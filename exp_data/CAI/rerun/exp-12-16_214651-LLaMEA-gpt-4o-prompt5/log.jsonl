{"id": "77829d84-a571-43ba-8b85-86e43e07c01f", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 4\n        shrink_factor = 0.85\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Adaptive Hypercube Search Algorithm with Dynamic Neighborhoods (AHSA-DN) that explores the search space using dynamically adjusting hypercubes to efficiently traverse high-dimensional landscapes.", "configspace": "", "generation": 0, "fitness": 0.1274990760212279, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.14.", "error": "", "parent_id": null, "metadata": {"aucs": [0.48537493773889306, 0.45006926418375637, 0.5518627811723045, 0.16217290680057972, 0.1326512070471093, 0.19638102602199492, 0.9528346873626667, 0.7706471064042059, 0.13456685681230174, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08298943514390977, 0.05748242038799467, 0.01656447871159139, 0.08636543985442802, 0.050572851312101874, 0.10733662569696756, 0.0604013179039653, 0.034703474057407036, 0.044516204511897195, 0.10943891074376111, 0.13317308797137106, 0.009381939376884807, 0.0410785617819962, 0.004822010388998543, 0.05687070982123654, 0.0310858661276332, 9.999999999998899e-05, 0.05536863104794665, 0.16629872174431726, 0.06945402287656255, 0.03358953459664915, 0.055037210850224394, 0.08538588948099746, 0.08656480129150024, 0.05521229449885412, 0.08275442850040449, 0.07537453080291723, 0.3696858922937577, 0.01727119079029349, 0.011326871368761537, 0.03731095172975363, 0.42797421094234356, 0.06138939667532428, 0.15937614651058885, 9.999999999998899e-05, 0.06562159839960824, 0.2270912583369682, 0.11042829859466474, 0.11535453359232184, 0.7606692000173592, 9.999999999998899e-05, 0.09383491852365222, 0.1320471082737118, 0.03505235590288014, 0.01906074805046898, 0.12091680749141709, 0.05021746034402963, 0.15606976346013157, 0.21352747599210542, 0.08681490568420958, 9.999999999998899e-05, 0.13676691388556195, 9.999999999998899e-05, 0.2316972393335721, 0.019210900067355263, 0.19459592001835246, 0.28292035417596184, 0.08451188614588134, 0.242878760200417, 9.999999999998899e-05, 0.1895697108629879, 0.35689836301342426, 0.15541330543395182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08812903188795462, 0.017788979640486646, 9.999999999998899e-05, 0.007990402112179829, 9.999999999998899e-05, 9.999999999998899e-05, 0.049120400447133616, 0.07010018701499598, 0.06634382516758974, 0.09899014010996432, 0.01878661549928551, 0.010420580199025808, 0.06175936079707023, 0.062371617923228095, 9.999999999998899e-05, 0.047942850654489666, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013859354975588323, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0158984499100725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11911927896731844, 9.999999999998899e-05, 0.0837836703276964, 9.999999999998899e-05, 0.17305152639352905, 0.17174327150904978, 0.18743029944685163, 0.5493640913865753, 0.15572412615978115, 0.16830019877674518, 0.09264726681102509, 0.44753685572312063, 0.1671076847632479, 0.20056384819298678, 0.06470758979430624, 9.999999999998899e-05, 0.03859377410246323, 0.05684085514255932, 0.09338868432120784, 0.08722739035670712, 0.07352032783552553, 0.07775497176986046, 0.08594997138850535, 0.1746857075058752, 0.26212231002596487, 0.20890873233478902, 0.11233047634265547, 0.2232358105199359, 0.13630074542163784, 0.2562413316995228, 0.32769462899485735, 0.20574910062230345, 0.28681455109608567, 0.1362140003210368, 0.14805561385399435, 0.18716591251374648, 0.14929239012107176, 0.12445393301995644, 0.2954473373158808, 0.25162061451160367, 0.09787422065965479, 0.10170680587823444, 0.2217760508429083, 0.1076553086639398, 0.158580875555706, 0.10852462203677571, 0.14222230841207562, 0.1741983631666344, 0.09083234307644505, 0.06897771836334154, 0.20790149500864719, 0.21282533315627716, 0.22920254118421213, 0.20480823250984903, 0.20839791833453258, 0.1864080093244792, 0.21992019764628767, 0.17272123478692425, 0.2018712366374974, 0.16673753072759223, 0.1837211520646077, 0.19966258439726192, 0.19704277973544715, 0.17958524687648947, 0.1904432950154391, 0.1819219610997781, 0.17839806266515734, 9.999999999998899e-05, 0.16029733529831225, 0.13662900619702445, 0.07166240498961562, 0.17378902884046654, 0.05772896814772144, 0.1234404351381454, 0.10830290313170787, 0.11419566995506791, 0.16693919851803674, 0.8173778176997536, 0.11349020578634661, 0.08227134166871586, 0.08330004298290483, 0.09984040242327208, 0.04444609483402506, 0.11372910818092319, 0.05427895959715101, 0.09507212386013542, 0.1906287012717055, 0.18989780373647402, 0.20737505605590056, 0.19600695654211975, 0.1689627464236495, 0.19607186980468527, 0.18134591111717568, 0.17175635662825084, 0.1989531336156578, 0.07856372226342268, 0.10682735977002289, 0.08444265537725337, 0.06673794062951566, 0.04101917144833589, 0.11496000219148905, 0.0793600822843622, 0.07967118540022533, 0.08130541556029658]}, "mutation_prompt": null}
{"id": "69f0c3c5-b2ff-4cb4-9003-dc2ca5401e24", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 4\n        shrink_factor = 0.85\n        success_rate_threshold = 0.2\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                hypercube_size /= shrink_factor  # Increase for exploration\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Improved Adaptive Hypercube Search Algorithm with Dynamic Neighborhoods (AHSA-DN) by dynamically adjusting exploration and exploitation phases based on success rate to traverse high-dimensional landscapes more efficiently.", "configspace": "", "generation": 1, "fitness": 0.15642477646640107, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "77829d84-a571-43ba-8b85-86e43e07c01f", "metadata": {"aucs": [0.24452581225072267, 0.2514406980767817, 0.2635695610116493, 0.25263945834404233, 0.3006989153105779, 0.2448668736366313, 0.258520659929414, 0.266547158680567, 0.25475196260368627, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06619019897163092, 0.0928890857888448, 0.0677539175395383, 0.06709438184061489, 0.08270314358758601, 0.0696490026498805, 0.07981467497177086, 0.09404081975666012, 0.09520864652844652, 0.0464301825971144, 0.07495805066853845, 0.0772941967727957, 0.06654604273078002, 0.07272867845060593, 0.0695673850903773, 0.08115686193251126, 0.07237567892028696, 0.06878569818894553, 0.9904130301202068, 0.9937687892965278, 0.9862387117586889, 0.9828578445751321, 0.9864954071945135, 0.9938176119809385, 0.9883065607394229, 0.9887453510686289, 0.9852593123563432, 0.16222160308233524, 0.18655031828473423, 0.1561469741130328, 0.12750722476818444, 0.14430678012733655, 0.1926186293930543, 0.13357105520867896, 0.17786272236327882, 0.13418955321975412, 0.21539157561052102, 0.18783571829922652, 0.22618915044125099, 0.17357944369742417, 0.24545515898029924, 0.2080263298654882, 0.1854367974980834, 0.2076035320937274, 0.2321886574059796, 0.05319876478151164, 0.07869290301164378, 0.07173119223587732, 0.04008429969590377, 0.07694622274010676, 0.06083323323549106, 0.04612529449514002, 0.06532468646953715, 0.06991298441529292, 0.07477686474092404, 0.056167157371272536, 0.07019633645625378, 0.04452228318388407, 0.07698324573540505, 0.056736818130758926, 0.10700941394425156, 0.055745012093153634, 0.06699970707439007, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03876414024589159, 0.0638665479842917, 0.0998110439420018, 0.05610758502097091, 0.07822252067400992, 0.04624467221831963, 0.06339490093878353, 0.049492217380425085, 0.06863124123352204, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020348202854226338, 0.018041169521514577, 0.03606831861229198, 0.024490365491401822, 0.012336720691033976, 0.04266235165974319, 0.03192785686262756, 0.03726464185953027, 0.049279694707120014, 0.27400099890743235, 0.2439621272202106, 0.27859032501897774, 0.26961375576423274, 0.26925262726569055, 0.28666196018109047, 0.2744071055119134, 0.26247820178468906, 0.23629733853285906, 0.06721455086441042, 0.06673439744545884, 0.08256214423274466, 0.06991402289513138, 0.09588868595415223, 0.07091174969972747, 0.08392879230048278, 0.06252757147883092, 0.07747547362392238, 0.13556786507566065, 0.1539596188607435, 0.13184710895875318, 0.1415662861924497, 0.1514160898987017, 0.16021277613987828, 0.13695389149846615, 0.1536923755119255, 0.13353486478301968, 0.18962510036477798, 0.20660514290096788, 0.1889583005926495, 0.21495914356136914, 0.19321545384990713, 0.211536925718668, 0.1867663481862719, 0.20985931579149242, 0.19238153105683908, 0.13913815509655036, 0.14930295740731014, 0.146997134651062, 0.13914450980312099, 0.15162417283385332, 0.12392299583925648, 0.1410766166940497, 0.13832361763953283, 0.1484982434566795, 0.19051306911755994, 0.17709910469201984, 0.1823691564452029, 0.1805877447717421, 0.17664279695431284, 0.18288148685987815, 0.18636039063719156, 0.17586470630190432, 0.16809719389704936, 0.16652734710202366, 0.18178047633319794, 0.17157356028247017, 0.16247842137122936, 0.16678588885123413, 0.1765885273390393, 0.16280761982129666, 0.17323995467513764, 0.17849018289967988, 0.12779873960106325, 0.12522461215466085, 0.16777800208784288, 0.3726611807497552, 0.19999779643192905, 0.13917632948579672, 0.11622144357972852, 0.11434690129080394, 0.1408489248593543, 0.26651349846829475, 0.11132083118487213, 0.08063271057194543, 0.10707764914506479, 0.193006507468506, 0.17911513332676254, 0.11021554681684742, 0.1607071002635332, 0.22607751203600857, 0.18094354939500257, 0.1757838603877282, 0.18569461082042482, 0.1887356890287546, 0.18351349863182032, 0.19437372492703076, 0.19394922279158322, 0.17969423196828116, 0.1847608085859247, 0.06653083903231705, 0.07699240128312068, 0.08641705595560323, 0.07392353279442121, 0.08523274976542561, 0.08917820162621903, 0.07580096008303794, 0.07173270829881329, 0.06500545036397876]}, "mutation_prompt": null}
{"id": "db48d995-872a-45cb-ad13-e59580dfb6fa", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 4\n        shrink_factor = 0.85\n        success_rate_threshold = 0.2\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.1  # Increase adaptively based on success\n                hypercube_size /= shrink_factor\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Improved AHSA-DN with adaptive shrink factor adjustment based on convergence rate.", "configspace": "", "generation": 2, "fitness": 0.18981206759750704, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "69f0c3c5-b2ff-4cb4-9003-dc2ca5401e24", "metadata": {"aucs": [0.40345875006789167, 0.441227341434579, 0.47402843644691706, 0.4293900741846224, 0.44906900292681984, 0.37304978364312036, 0.3353414741823969, 0.38733238829670313, 0.5351484022802449, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05156991138924372, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09300362766248638, 0.08021219503394983, 0.09424570404117183, 0.1088807639713093, 0.11513136981839434, 0.07815655539552757, 0.08736118538593507, 0.09410996722383191, 0.09661793507582783, 0.08007915079827199, 0.10391518791188459, 0.043336330514672006, 0.09003867630977425, 0.08656443045643336, 0.08601523090902807, 0.07186996234471299, 0.09540877241790036, 0.06613996943396994, 0.9878164995380515, 0.9937188152306309, 0.987544570909539, 0.9703047168271631, 0.9520188261038397, 0.8727468374534268, 0.958650005210193, 0.9885826737299753, 0.9579506937964618, 0.24166371313244295, 0.09375937920712463, 0.23235713568052874, 0.16398043323356792, 0.2795068105178047, 0.32575225459113255, 0.283847564741608, 0.20660711428152545, 0.23387058338928912, 0.23551728278070727, 0.2087833325054853, 0.29486148024915704, 0.27369816170244976, 0.21713047605209368, 0.19417282685173354, 0.2261695894091137, 0.22819157221091968, 0.3229780106611826, 0.1178200613185254, 0.25479793080301516, 0.1353757060357631, 0.14932300709473345, 0.1324688497128087, 0.1262999194689901, 0.15264545972352894, 0.17934305007984186, 0.14487079651954715, 0.14884889291133752, 0.13001650475873117, 0.14514318339708265, 0.07692502322712103, 0.21266964092105478, 0.17241269561428274, 0.11638553496566695, 0.12266235901804645, 0.11997217833540086, 0.04005170528821966, 0.0327472002660808, 0.01828369498333471, 0.003051106898297462, 0.01283124752658893, 0.0036278424595466152, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005249982159796218, 0.12043891746165258, 0.08793484303000154, 0.07080779918889002, 0.09956195232711018, 0.07482554134151509, 0.020691396065012135, 0.08418082653613002, 0.050888195097183786, 0.09508390621869278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016358685872226442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05238551315857254, 0.07142403023437238, 0.022836680609128468, 0.11688900936441737, 0.07213105461428349, 0.10836621945830704, 0.07865443118558046, 0.08249443464207395, 0.05384016239006828, 0.3487355600474479, 0.40183517180925576, 0.48371038816339385, 0.3854842478551014, 0.3941537223654339, 0.31398955516764204, 0.27137751812187194, 0.37123353633467127, 0.3808231232769085, 0.12192777514799769, 0.12115544854910132, 0.08303881608911068, 0.09556329293116106, 0.11074804840460728, 0.08558277500288969, 0.09545581840759021, 0.0890252060190021, 0.10070711099140717, 0.20009255672469362, 0.16743961220684656, 0.14555682729701003, 0.14646804228676158, 0.14413663420712963, 0.1734697064614309, 0.18161629537378998, 0.20327256330726373, 0.15312308906766903, 0.2864840718049583, 0.2896470304817331, 0.17382287597727408, 0.23174807151727717, 0.29183459972896764, 0.22201338753826316, 0.26188055642670094, 0.26893707620561214, 0.12256918329193411, 0.22213186048976363, 0.20943525168712662, 0.142816947884995, 0.171659901059931, 0.22652768293813919, 0.11506998231224441, 0.16865276288161835, 0.14219315558035817, 0.14423313863819764, 0.20138300842736645, 0.22773861179023103, 0.20346291387575932, 0.17659596585005766, 0.2127774373052368, 0.20664266118222108, 0.18922560883983108, 0.19392699323303964, 0.2024820202975659, 0.17723807467070596, 0.1838035490406238, 0.25155190491996404, 0.17740971754321677, 0.17832177606484145, 0.21955980886077608, 0.17698399741903648, 0.19139879722956465, 0.20764627941718328, 0.1076629742344799, 0.134387025454901, 0.16603031146534486, 0.46177983020770785, 0.2138020707338898, 0.12287112009497292, 0.12830709512131366, 0.11778675737071265, 0.16693578011564592, 0.3600166636746992, 0.1128227991967129, 0.08314822104410391, 0.08338558855777611, 0.10472262253813602, 0.20963540547109838, 0.11315048059398503, 0.16860882519139375, 0.09441947329885736, 0.19828258075943117, 0.17983783560524513, 0.18708367724588537, 0.17364857370849207, 0.18619589146653148, 0.17472034551264437, 0.17880396975062618, 0.17900246041883694, 0.19621302985338995, 0.08902550876532855, 0.10476645401504725, 0.07944960012000701, 0.08963111614407937, 0.08076520653645713, 0.13045667850455267, 0.10742556609127951, 0.08275959440345904, 0.0934830531564903]}, "mutation_prompt": null}
{"id": "5aa2f62e-1d4e-49e9-9cd5-5a840c6b9089", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 4\n        shrink_factor = 0.85\n        success_rate_threshold = 0.2\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.1  # Increase adaptively based on success\n                hypercube_size /= shrink_factor * (1 + self.evaluations / self.budget)  # Dynamic adjustment\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhanced AHSA-DN with dynamic adjustment of hypercube size based on evaluation progress.", "configspace": "", "generation": 3, "fitness": 0.22713060202854593, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.23.", "error": "", "parent_id": "db48d995-872a-45cb-ad13-e59580dfb6fa", "metadata": {"aucs": [0.8846790429440988, 0.8563496209794268, 0.7945230166635086, 0.7496192164290539, 0.5260634104213826, 0.7499687442008511, 0.8669163926178141, 0.8701345548646001, 0.48448377321895864, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0943129901311156, 0.10425780279567665, 0.06967561087672913, 0.09948589842894784, 0.06653951802979119, 0.11988344228334313, 0.07710663976288956, 0.11811293342775375, 0.09970455720353288, 0.07433376204034381, 0.09487952344457917, 0.052784639279459755, 0.10658671986604784, 0.07226902177562389, 0.11477747138785233, 0.07569349540011339, 0.05781534601078764, 0.10920463130394364, 0.9878097401870426, 0.9937147202794047, 0.987546165130135, 0.9511884256114629, 0.8697390251959769, 0.18147500342685186, 0.9217801351547193, 0.9885658534856153, 0.9523470069650659, 0.3107552436654202, 0.6782046957061216, 0.4535303944518916, 0.4873735184888224, 0.5690437441753728, 0.6190891922800197, 0.6105778503808279, 0.30461723350317704, 0.3132213932749379, 0.33113373270552726, 0.1406509966098558, 0.22566822790642027, 0.1941769957194781, 0.2216989484587253, 0.16161919730431418, 0.39276371742750404, 0.23319634788124166, 0.38382164981474554, 0.16336085765834818, 0.19974684409037746, 0.19747950834123607, 0.23437400239183726, 0.15730865823165097, 0.1722075855217703, 0.17354646230197235, 0.20633961290118696, 0.22925666024561342, 0.12777093035550224, 0.1519544893205399, 0.2894680425233519, 0.11237293615947785, 0.20721849499758305, 0.15828155235967756, 0.1586720096675821, 0.15265623821238317, 0.12263171299679831, 9.999999999998899e-05, 9.999999999998899e-05, 0.12063423725625944, 0.02276904100159516, 0.07235181256672929, 9.999999999998899e-05, 0.0016443656041056354, 9.999999999998899e-05, 9.999999999998899e-05, 0.06527538581411885, 0.07073768309147943, 0.079667586541458, 0.09327178592470353, 0.041714781886822094, 0.012240013276210049, 0.019723450647612717, 0.03681701620697353, 0.057147588998015086, 0.15044592768797194, 0.028392245544293093, 9.999999999998899e-05, 9.999999999998899e-05, 0.09752861449646755, 9.999999999998899e-05, 0.10987989091532635, 0.10919188726790252, 0.23682715094643403, 0.03441522679351838, 0.1052340925524986, 0.19820331317776718, 0.1084683510946235, 0.13478794878587674, 0.145177150885194, 0.09217294407564203, 0.10341918648711212, 0.07880492026500618, 0.38587988509972715, 0.5149938171109169, 0.41835253525576854, 0.3905417230996667, 0.48456636827140165, 0.45914506933603205, 0.4148596614742561, 0.4139182161059787, 0.526512096288055, 0.12362230883607772, 0.08213724010838908, 0.13372466359099855, 0.08956924467399496, 0.12664239709641, 0.1050649336042605, 0.10517051984074366, 0.07688196007999193, 0.09708670945411246, 0.2631895092446276, 0.19573253442847827, 0.23851351449605585, 0.1728794857006435, 0.2573812955832553, 0.22878677775810552, 0.22025157383468852, 0.21597092417338526, 0.1791981982989992, 0.3656592981760126, 0.2435054532358275, 0.16946276282439088, 0.244146774669725, 0.2766590686966348, 0.44573822554534226, 0.20487468353474325, 0.2249624764556406, 0.1184145480152482, 0.20756121281472717, 0.3300122018029392, 0.29977632309616375, 0.2716890996856194, 0.20291126017601802, 0.1547304922360656, 0.2682082025510072, 0.1844639543249521, 0.12834381610217083, 0.22230030144501645, 0.25496093030554334, 0.22762963576753414, 0.1714790206588186, 0.24943692906332338, 0.26307830716882397, 0.20116777133645947, 0.1995785942942636, 0.20258916055061305, 0.17646779973521554, 0.19040612059688833, 0.20585136474336385, 0.1847723601229624, 0.20103388303087244, 0.22347252489531033, 0.18610845411611487, 0.19226523069672308, 0.2171623564243076, 0.10782360089578469, 0.13618527744083786, 0.16627455078606945, 0.6096993438045715, 0.21389573170443021, 0.12320359467788244, 0.10860879898914899, 0.12374739045725769, 0.16731019999598062, 0.43122060881047697, 0.11323714306674737, 0.08336719330760334, 0.08343927517047811, 0.1049330816030124, 0.1300653991992078, 0.11346472526517004, 0.05926129324400731, 0.09484484497218104, 0.20707024514721328, 0.19357010785832907, 0.19726866276083332, 0.19105684595171202, 0.19178553768785844, 0.20304997309410044, 0.20033941090928997, 0.17757429412874626, 0.20035328037371902, 0.06612583297424013, 0.12593815704049616, 0.08475353917479156, 0.08692206530445967, 0.0673445172821856, 0.09421940292357689, 0.09325610390590522, 0.09040251582079584, 0.08838260164890366]}, "mutation_prompt": null}
{"id": "2fbdc7a0-7b57-4791-b1af-b59e55ceed84", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 4\n        shrink_factor = 0.85\n        success_rate_threshold = 0.2\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= max(shrink_factor, 0.1)  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.15  # Increase adaptively based on success\n                hypercube_size /= (shrink_factor * (1 + self.evaluations / self.budget))  # Dynamic adjustment\n            else:  # Added condition\n                hypercube_size *= 1.05  # Slightly increase for exploration\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Improved AHSA-DN with increased exploration by dynamic hypercube adaptation based on exploration-exploitation balance.", "configspace": "", "generation": 4, "fitness": 0.10892186123373047, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.20.", "error": "", "parent_id": "5aa2f62e-1d4e-49e9-9cd5-5a840c6b9089", "metadata": {"aucs": [0.27814636589083264, 0.34988404929124695, 0.13646592688781334, 0.39773679464423684, 0.2503302769494159, 0.19523051223044563, 0.20686643716940256, 0.19388446344830146, 0.23191857134351146, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03405980014666243, 0.048213296270031236, 0.0272004519261978, 0.02168646295353538, 0.04857188441142679, 0.030837157461789833, 0.0419867091254702, 0.04355022200549008, 0.03833101438747544, 0.02494480479201866, 0.012460014701039634, 9.999999999998899e-05, 0.0037680466733353013, 9.999999999998899e-05, 0.05473833183984811, 0.007267728032038789, 0.012039680295011013, 0.012953947801426668, 0.9917965832050982, 0.9938970569308061, 0.9876736868083517, 0.9842894595952407, 0.9866917044633616, 0.9762849576381863, 0.9838117797408732, 0.9946935955089753, 0.9852158815633221, 0.07659774428671284, 0.10067801048339375, 0.23022965080171842, 0.03740693386383631, 0.02850089377945275, 0.03322053441623152, 0.04510623152705462, 0.11954760361855132, 0.0272502481813921, 0.05566747865833477, 0.03951166821592156, 0.05660846834675981, 0.06914024844010469, 0.09656510246062677, 0.14028421931791835, 0.0507335864323315, 0.10142154252728086, 0.08060051175529648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11678988498332032, 9.999999999998899e-05, 0.01749593118848658, 0.08790169061571873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008267740266668655, 9.999999999998899e-05, 9.999999999998899e-05, 0.008940881667932499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022338911050789334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.24719091138805083, 0.22974920703958923, 0.1500910765939052, 0.14112866041974415, 0.209645377392782, 0.21623914007650435, 0.15962872834000263, 0.24516404486476873, 0.18677251382675242, 0.052964879297631495, 0.03874784588719127, 0.04125962048611287, 0.04159542564456098, 0.06218724012202059, 0.07358279779809274, 0.028719764998564656, 0.016509246155798407, 0.03038306059168605, 0.0931479914222797, 0.09330181493844047, 0.12307221584146899, 0.09338362301268732, 0.09211563345535212, 0.07660628317672258, 0.1021249541478626, 0.11023585121557566, 0.07291534135042244, 0.11883083116586024, 0.14114623859099007, 0.1135283177738855, 0.14540058358059216, 0.16250301201082007, 0.1529559607148263, 0.12993830366355363, 0.1406977335613082, 0.12972003163131685, 0.07226170880942484, 0.0853335945071294, 0.07753397554248331, 0.1089308581230023, 0.09142650965268773, 0.05999223088253203, 0.08549480071714866, 0.07259828338299923, 0.07339621244996164, 0.0916346253723066, 0.12497806724659699, 0.1283775663706016, 0.14448011297496177, 0.1167451930318042, 0.13036684242496088, 0.12245976138762271, 0.0871306438586602, 0.09777430808062004, 0.00733959812788143, 0.15649325518651636, 0.06996477715648164, 0.1515036734550249, 0.14445210024511979, 0.1465527986375701, 0.15157174170252297, 0.1559830777837986, 9.999999999998899e-05, 0.1088766215775544, 0.11232326697579265, 0.07597646467691266, 0.10682517908772493, 0.09555679557611985, 0.10093761570278914, 0.09794975729231681, 0.10682884593080999, 0.061461744686831854, 0.09118873565043817, 0.06020477803168722, 0.07327191607629757, 0.07614197137043177, 0.043908214314341554, 0.06638766507219351, 0.09506202732671132, 0.05778216585902174, 0.17603291398124643, 0.1786024026862042, 0.12526394024913512, 0.14645041863295571, 0.15009248708707779, 0.1584890203990501, 0.15860813425845677, 0.15857123063434952, 0.14025760751462002, 0.13694219309303213, 0.03818830423463315, 0.028212738350280375, 0.040157828018909436, 0.022625591870060635, 0.019006413534774946, 0.037333152158949945, 0.04459643826997495, 0.049237970835815714, 0.02557552316208489]}, "mutation_prompt": null}
{"id": "1c7f5633-1ab3-4e58-9a23-cd9e5b28ada7", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 4\n        shrink_factor = 0.85\n        success_rate_threshold = 0.2\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.1  # Increase adaptively based on success\n            hypercube_size /= shrink_factor * (1 + np.sin(self.evaluations / self.budget * np.pi))  # Dynamic adjustment\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhance exploration by adjusting hypercube shrink factor based on adaptive oscillation within bounds.", "configspace": "", "generation": 5, "fitness": 0.08532486547109136, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "5aa2f62e-1d4e-49e9-9cd5-5a840c6b9089", "metadata": {"aucs": [0.3553862264327802, 0.28876828240811414, 0.2678299278428723, 0.3691976312477906, 0.21021518620442858, 0.2900710374092802, 0.35810301527791866, 0.24302097439385406, 0.1296802027974704, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05400152597318919, 0.018548150001520103, 0.006622550084782408, 0.11551198429464293, 9.999999999998899e-05, 0.021377466871156714, 0.038527642764499825, 0.025026164870402545, 0.02949992007357416, 0.03541902866362612, 0.01754892751591053, 0.0025011949849315096, 9.999999999998899e-05, 9.999999999998899e-05, 0.0056793935506223026, 0.014037446663302422, 0.005509877725198398, 0.011253446514135623, 0.1345500179120912, 0.07341687814283926, 0.033606556258230946, 0.050944321600826736, 0.07710449963177057, 0.06502986795987686, 0.06274325153693205, 0.06503629268419897, 0.06474278559739721, 0.13881491919822897, 0.02203404960879618, 9.999999999998899e-05, 0.0225075929140921, 0.05590024903785684, 0.10031572861132698, 0.1163250412331931, 9.999999999998899e-05, 0.08555285506889809, 0.1548582420200879, 0.08447750087648243, 0.03214292246883255, 0.2157340205177668, 0.06155988140870394, 0.05759048200260408, 0.07651363709242764, 0.03310700236822517, 0.006318638337028504, 9.999999999998899e-05, 0.13190007050087182, 0.049055696522013026, 9.999999999998899e-05, 0.08328057697379698, 0.0019125613927962748, 0.07213141932635991, 9.999999999998899e-05, 9.999999999998899e-05, 0.0356967356622816, 0.13079037258224835, 0.06487975269202306, 0.03998418094516387, 0.07290345928262965, 9.999999999998899e-05, 0.09684406088067155, 9.999999999998899e-05, 0.06451369019236464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04999372028283, 0.04119644127396982, 0.05537200068538772, 0.0276436337826772, 9.999999999998899e-05, 9.999999999998899e-05, 0.001454855306158187, 0.029094574040023136, 0.042794922119234746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007002762294398002, 9.999999999998899e-05, 9.999999999998899e-05, 0.017470157152489785, 0.04479194403085418, 9.999999999998899e-05, 0.0063619200752560445, 0.04163889118648034, 0.100324025891661, 0.18252205663314658, 0.21809535390326462, 0.21422318296873732, 0.31775830070469824, 0.14838544160994238, 0.18953088434515264, 0.2940678965542195, 0.2062756783931895, 0.25528508188541077, 0.007395579975556177, 9.999999999998899e-05, 9.999999999998899e-05, 0.0849198179209727, 0.08838973455221621, 0.02201075819307685, 0.07197643829833056, 0.05720715196472137, 0.023249708452226292, 0.08010832668206824, 0.1357589722032877, 0.10259451300123168, 0.09154068271874494, 0.10601693274059742, 0.1194977746803384, 0.13339705744216457, 0.13477221026217412, 0.13004492896326336, 0.1419294364168392, 0.12759122707983483, 0.10555291497457475, 0.17630276680636614, 0.13340220880608145, 0.12934429108158763, 0.13241494243255258, 0.1340901567724574, 0.13155868851909636, 0.09167863168158474, 0.07748989960937924, 0.06153457204375523, 0.12294201589948406, 0.02619893440921972, 0.0636936359490965, 0.06627440011201347, 0.09556179574819113, 0.08008743833929455, 0.09960953363350067, 0.11272283271917549, 0.14069486614178928, 0.13030057612536894, 0.15481199710645632, 0.11819699514159565, 0.20440352892928737, 0.125459768480767, 0.17634730775383345, 0.17483202059561553, 0.18771162865025248, 0.17241870000010617, 0.16265085396217105, 0.16681138230446946, 0.1518749242636599, 0.1772504160306817, 0.15822424084001563, 0.033053383276659076, 0.10717461147427298, 0.12144437917045525, 0.0891006282749005, 0.17123916439981535, 0.15152287648985163, 0.05912506024954256, 0.1601775216596839, 0.12017690363642375, 0.10586845641084475, 0.2870647283437434, 0.15788861037702406, 0.06108633141448738, 0.07909238526133755, 0.10311418742693168, 0.044469502794668214, 0.11366512826249586, 0.059219646054982644, 0.21491003494326466, 0.18767585040735324, 0.17976427892337687, 0.20622288133661582, 0.17723710055128428, 0.12665154046904914, 0.18116779282278983, 0.21826958165553267, 0.22704889923718152, 0.19239408361119326, 0.04135248953369264, 0.03831035355001877, 0.038750230674648445, 0.10893334528299381, 0.03018679718600381, 0.04670863177467999, 0.059686799569002136, 0.02633829621011463, 0.06559007696552632]}, "mutation_prompt": null}
{"id": "82efe442-c308-4b5c-bc57-e1ac8e4e6d15", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 3  # Changed from 4 to 3\n        shrink_factor = 0.85\n        success_rate_threshold = 0.2\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.1  # Increase adaptively based on success\n                hypercube_size /= shrink_factor * (1 + 0.5 * self.evaluations / self.budget)  # Adjusted coefficient from 1 to 0.5\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhanced AHSA-DN with adaptive hypercube shrinkage based on progress dynamics.", "configspace": "", "generation": 6, "fitness": 0.22303900592576653, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.23.", "error": "", "parent_id": "5aa2f62e-1d4e-49e9-9cd5-5a840c6b9089", "metadata": {"aucs": [0.7260928948805625, 0.4522032264969542, 0.6298378437582206, 0.7761656788055433, 0.42893286413760845, 0.6463912474942377, 0.8456016326598239, 0.39798119294174594, 0.6503558243246109, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032965122318834306, 9.999999999998899e-05, 0.044011230082156905, 0.06043075936453679, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11202857965330315, 0.1042383970525751, 0.12819525526542297, 0.09596377763984876, 0.0951102780268539, 0.11718506918354943, 0.08257471718598008, 0.08584239306143826, 0.1032282552338949, 0.08083326560083204, 0.11067709267848402, 0.10481963619301982, 0.11294460153147357, 0.07840078967860187, 0.09757188916249893, 0.09400925825785489, 0.09337390196368756, 0.10660335594420067, 0.9920343932224958, 0.9938778207974801, 0.9861027696514227, 0.922984782996671, 0.9808704423381559, 0.9874856289197279, 0.9215850464555982, 0.9933198156266729, 0.9836295824102387, 0.28592915959616594, 0.5209111405906703, 0.20971643961830744, 0.28915144469281595, 0.4572430705229361, 0.2967797967513236, 0.6647548316621752, 0.19615393498751, 0.25992911419218967, 0.2334486772993445, 0.6269277922736209, 0.16900210457931353, 0.23475553667409943, 0.2150572482804226, 0.2415732368888116, 0.9248247419982369, 0.23738099019582148, 0.3611069715579952, 0.13055083123949285, 0.21407631550042705, 0.1561960301877987, 0.1831105711147033, 0.1556653476376174, 0.21681566548893993, 0.1475146150241795, 0.22189742267283674, 0.15212849278918417, 0.14500581939009038, 0.12388746873037193, 0.14461788718983082, 0.11735747949102093, 0.2883454368180457, 0.12456755574556866, 0.10716216636741105, 0.08499127788576155, 0.14403668630861388, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002678357698822076, 0.01552947885022149, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053638064790399564, 0.10393978511798363, 0.08141216993083922, 0.1070392342407358, 0.05291100613442956, 0.042122723585593325, 0.03321225733658684, 0.079572043342797, 0.10514394212389067, 0.05267992641436048, 9.999999999998899e-05, 0.12727926352922403, 9.999999999998899e-05, 0.03817979727122334, 0.00494669210561316, 0.04103172758730489, 0.012216818619000702, 9.999999999998899e-05, 0.08920343788826435, 0.01822850059359027, 0.2814562654875812, 0.13387498559024302, 0.12720318466472402, 0.08979186540761874, 0.09605906958115862, 0.0765688300221411, 0.05858371464844536, 0.10827269755065538, 0.35617510987258316, 0.38234446774927533, 0.2714117903889349, 0.4537364770568738, 0.5038538871729678, 0.44169769551308635, 0.32679309619369856, 0.35897140865738775, 0.31025186440151187, 0.09361114163527795, 0.11501497689858609, 0.07851228624129525, 0.09630501498905764, 0.07936899379661733, 0.08258325505732667, 0.10283637159808912, 0.10541138508415293, 0.09314856723888953, 0.16026580526411804, 0.1887193682678835, 0.1348074954428401, 0.2566513979443893, 0.1548675402585744, 0.2656504623721122, 0.18173416223014527, 0.23537860359079787, 0.17965625236461746, 0.2535164940215838, 0.3266376927881587, 0.37686669995046074, 0.3190744831668513, 0.281064072386759, 0.31358015604678635, 0.27100997424028006, 0.3266085435378874, 0.1932322137314314, 0.17900825980730262, 0.2674124614263901, 0.11403442337898906, 0.22804317096405768, 0.15690055136664616, 0.12322583734627446, 0.1966294726700386, 0.1655058316944069, 0.06812970554119513, 0.19717199573660038, 0.24531020784683455, 0.21350898317011446, 0.2043704315594651, 0.19881406113727307, 0.1940120617836606, 0.18903793009986558, 0.1925250247617346, 0.24949123343046808, 0.17812554297973715, 0.19738029298081028, 0.183273851476767, 0.20220155796725803, 0.18266946060047096, 0.18163792991235972, 0.18804116066738652, 0.1921869506500481, 0.18613256836998637, 0.15518602651853053, 0.1364813395376112, 0.7511098565790322, 0.44160344067218993, 0.19398770069942206, 0.19299396912737932, 0.1800346803827375, 0.11981837855338084, 0.14957084859591852, 0.5219658510044676, 0.1102970246045537, 0.07335975848548493, 0.11160224135677232, 0.5151371582456495, 0.2111830639219564, 0.11219790617667091, 0.16056990363267665, 0.20775117289601241, 0.2057865345255937, 0.18796416766062807, 0.1860425220298486, 0.18235139869719197, 0.2030732216080382, 0.19947616573780624, 0.18554307724118013, 0.1855158420263906, 0.20936368803894734, 0.08700269785070014, 0.10199004009772594, 0.07954025372915896, 0.09140433726684327, 0.10776069957370005, 0.07457882343312705, 0.08561946219799754, 0.08910224388627397, 0.07968877192957624]}, "mutation_prompt": null}
{"id": "41f4068b-3734-419f-bef2-8c0a3918e753", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 4\n        shrink_factor = 0.85\n        success_rate_threshold = 0.2\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.15  # More aggressive increase adaptively\n                hypercube_size /= shrink_factor * (1.5 + self.evaluations / self.budget)  # Dynamic adjustment\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Adaptive AHSA-DN with dynamically adjusted shrink factor and exploration-exploitation balance.", "configspace": "", "generation": 7, "fitness": 0.13245023857160157, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.18.", "error": "", "parent_id": "5aa2f62e-1d4e-49e9-9cd5-5a840c6b9089", "metadata": {"aucs": [0.48940765757002036, 0.29795923479818265, 0.3911674567920643, 0.3924713401560639, 0.2526582820854123, 0.4169796239108595, 0.34960959557687743, 0.4447049646219251, 0.4944477353479737, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0841683466694032, 0.026649771877670703, 9.999999999998899e-05, 0.03681054036527054, 0.06606554088841443, 0.008327670144000154, 0.012164544035734082, 0.068078094793807, 0.05001023613859579, 0.028113366125743555, 9.999999999998899e-05, 0.011320510453331711, 0.013434471628348765, 0.03926468928761695, 9.999999999998899e-05, 0.045416713329231806, 9.999999999998899e-05, 9.999999999998899e-05, 0.19883750598285466, 0.8905563122258194, 0.3062318474955902, 0.9451486612750043, 0.9783021997821517, 0.98299636019439, 0.9496505822419857, 0.9122424966861507, 0.9812649238915743, 0.11170314480321808, 0.0795392756680281, 0.10784703705314314, 0.13965991130954825, 0.1514406970235681, 0.03878532833592874, 0.15206167188503694, 0.11707499226816476, 0.08496936521040332, 0.09172018863357156, 0.05730319413574181, 0.024892376389061943, 0.13462924594449466, 9.999999999998899e-05, 9.999999999998899e-05, 0.07555485417913255, 9.999999999998899e-05, 9.999999999998899e-05, 0.027931323302188282, 0.13578276983960036, 0.1322811635158705, 9.999999999998899e-05, 9.999999999998899e-05, 0.10135463011065582, 0.1609785667834347, 0.09028775253197396, 0.15046842430136076, 0.09367680261126987, 0.19048247650934225, 0.14265374991393853, 0.19449168901869263, 0.08859354099852934, 0.08462761503679417, 0.07417469228223839, 0.2916617421687888, 0.1339354040091999, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04222312424424002, 0.039665755101638944, 0.15034163609475615, 0.05320875294394534, 9.999999999998899e-05, 9.999999999998899e-05, 0.046230563507353106, 0.020506366790597697, 0.04869639682293658, 9.999999999998899e-05, 0.006865590560585444, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08233936096644845, 9.999999999998899e-05, 0.07909213393886183, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014951237396297223, 0.0421106769007743, 0.05988062894474844, 0.01071519043786906, 9.999999999998899e-05, 0.0498329779875023, 0.1963722884182454, 0.1899547940939722, 0.320457481033374, 0.15827082157957562, 0.14144344699503508, 0.3727913352072947, 0.32049725291230147, 0.24891567945223914, 0.3839155447527044, 9.999999999998899e-05, 0.019855150306219205, 0.051552315331239495, 0.01747151488734089, 0.08890624455445939, 0.020669973748380976, 0.10648969395842633, 0.05794585366208882, 0.038780358765217904, 0.2441541768426212, 0.14453134802915613, 0.13862192934699435, 0.14913852993845234, 0.07810787511536688, 0.1599387525620568, 0.09194563248042964, 0.1767204240616158, 0.12734571064643585, 0.12866804853272917, 0.1112071120616458, 0.10320802460259348, 0.13523791605444535, 0.12770953540458685, 0.09916199175202078, 0.16002674200915357, 0.222688807166183, 0.08575869806528758, 0.11314067167093167, 0.05540633873373213, 0.13436247059437267, 0.0706065471074826, 0.11796227916091773, 0.054894779978772235, 0.10450077352842146, 0.09200606314247017, 0.029851523979138483, 0.17885624942647427, 0.05795893174199063, 0.12404222248826369, 0.1854619439253643, 0.17478581657441739, 0.1306799673964495, 0.19467631003041963, 0.07765199412288404, 0.12099833686093975, 0.1649138659377306, 0.21134608648568587, 0.1706806801544506, 0.17420491693249984, 0.20822802406566343, 0.15825800071564988, 0.1895520821570238, 0.14368741155459142, 0.1709823497254671, 0.15979299245699619, 0.1335435770899529, 0.10370045596850919, 0.17351272621378244, 0.08622552063976086, 0.12215356232341545, 0.10806460920321337, 0.12567545771456756, 0.09495225036931076, 0.17141553060989334, 0.10808041012028657, 0.0832239514336337, 0.08034872695889628, 0.09389776097771596, 0.12234082751674813, 0.11331412275051511, 0.11122056934046232, 0.08911407669761229, 0.19640918834694454, 0.20824092999260524, 0.18218245282583034, 0.20552570623934652, 0.24627251563070107, 0.200343016326734, 0.21564857568942675, 0.19461595134149678, 0.17187924694667944, 0.08355946918668855, 0.07862132907053965, 0.03989230313123571, 0.04226857352196223, 0.0323686538815906, 0.07310808374859623, 0.07669627667245238, 0.024729067598071364, 0.05227012562412725]}, "mutation_prompt": null}
{"id": "a406b086-a09d-464c-aa9e-1edb35664db3", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 4\n        shrink_factor = 0.85\n        success_rate_threshold = 0.2\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.1  # Increase adaptively based on success\n                hypercube_size /= shrink_factor * (1 + self.evaluations / self.budget)  # Dynamic adjustment\n            elif self.evaluations % (self.budget // 5) == 0:\n                position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)  # Reset strategy\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhanced AHSA-DN with adaptive hypercube resizing and position reset based on evaluation progress.", "configspace": "", "generation": 8, "fitness": 0.22713060202854593, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.23.", "error": "", "parent_id": "5aa2f62e-1d4e-49e9-9cd5-5a840c6b9089", "metadata": {"aucs": [0.8846790429440988, 0.8563496209794268, 0.7945230166635086, 0.7496192164290539, 0.5260634104213826, 0.7499687442008511, 0.8669163926178141, 0.8701345548646001, 0.48448377321895864, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0943129901311156, 0.10425780279567665, 0.06967561087672913, 0.09948589842894784, 0.06653951802979119, 0.11988344228334313, 0.07710663976288956, 0.11811293342775375, 0.09970455720353288, 0.07433376204034381, 0.09487952344457917, 0.052784639279459755, 0.10658671986604784, 0.07226902177562389, 0.11477747138785233, 0.07569349540011339, 0.05781534601078764, 0.10920463130394364, 0.9878097401870426, 0.9937147202794047, 0.987546165130135, 0.9511884256114629, 0.8697390251959769, 0.18147500342685186, 0.9217801351547193, 0.9885658534856153, 0.9523470069650659, 0.3107552436654202, 0.6782046957061216, 0.4535303944518916, 0.4873735184888224, 0.5690437441753728, 0.6190891922800197, 0.6105778503808279, 0.30461723350317704, 0.3132213932749379, 0.33113373270552726, 0.1406509966098558, 0.22566822790642027, 0.1941769957194781, 0.2216989484587253, 0.16161919730431418, 0.39276371742750404, 0.23319634788124166, 0.38382164981474554, 0.16336085765834818, 0.19974684409037746, 0.19747950834123607, 0.23437400239183726, 0.15730865823165097, 0.1722075855217703, 0.17354646230197235, 0.20633961290118696, 0.22925666024561342, 0.12777093035550224, 0.1519544893205399, 0.2894680425233519, 0.11237293615947785, 0.20721849499758305, 0.15828155235967756, 0.1586720096675821, 0.15265623821238317, 0.12263171299679831, 9.999999999998899e-05, 9.999999999998899e-05, 0.12063423725625944, 0.02276904100159516, 0.07235181256672929, 9.999999999998899e-05, 0.0016443656041056354, 9.999999999998899e-05, 9.999999999998899e-05, 0.06527538581411885, 0.07073768309147943, 0.079667586541458, 0.09327178592470353, 0.041714781886822094, 0.012240013276210049, 0.019723450647612717, 0.03681701620697353, 0.057147588998015086, 0.15044592768797194, 0.028392245544293093, 9.999999999998899e-05, 9.999999999998899e-05, 0.09752861449646755, 9.999999999998899e-05, 0.10987989091532635, 0.10919188726790252, 0.23682715094643403, 0.03441522679351838, 0.1052340925524986, 0.19820331317776718, 0.1084683510946235, 0.13478794878587674, 0.145177150885194, 0.09217294407564203, 0.10341918648711212, 0.07880492026500618, 0.38587988509972715, 0.5149938171109169, 0.41835253525576854, 0.3905417230996667, 0.48456636827140165, 0.45914506933603205, 0.4148596614742561, 0.4139182161059787, 0.526512096288055, 0.12362230883607772, 0.08213724010838908, 0.13372466359099855, 0.08956924467399496, 0.12664239709641, 0.1050649336042605, 0.10517051984074366, 0.07688196007999193, 0.09708670945411246, 0.2631895092446276, 0.19573253442847827, 0.23851351449605585, 0.1728794857006435, 0.2573812955832553, 0.22878677775810552, 0.22025157383468852, 0.21597092417338526, 0.1791981982989992, 0.3656592981760126, 0.2435054532358275, 0.16946276282439088, 0.244146774669725, 0.2766590686966348, 0.44573822554534226, 0.20487468353474325, 0.2249624764556406, 0.1184145480152482, 0.20756121281472717, 0.3300122018029392, 0.29977632309616375, 0.2716890996856194, 0.20291126017601802, 0.1547304922360656, 0.2682082025510072, 0.1844639543249521, 0.12834381610217083, 0.22230030144501645, 0.25496093030554334, 0.22762963576753414, 0.1714790206588186, 0.24943692906332338, 0.26307830716882397, 0.20116777133645947, 0.1995785942942636, 0.20258916055061305, 0.17646779973521554, 0.19040612059688833, 0.20585136474336385, 0.1847723601229624, 0.20103388303087244, 0.22347252489531033, 0.18610845411611487, 0.19226523069672308, 0.2171623564243076, 0.10782360089578469, 0.13618527744083786, 0.16627455078606945, 0.6096993438045715, 0.21389573170443021, 0.12320359467788244, 0.10860879898914899, 0.12374739045725769, 0.16731019999598062, 0.43122060881047697, 0.11323714306674737, 0.08336719330760334, 0.08343927517047811, 0.1049330816030124, 0.1300653991992078, 0.11346472526517004, 0.05926129324400731, 0.09484484497218104, 0.20707024514721328, 0.19357010785832907, 0.19726866276083332, 0.19105684595171202, 0.19178553768785844, 0.20304997309410044, 0.20033941090928997, 0.17757429412874626, 0.20035328037371902, 0.06612583297424013, 0.12593815704049616, 0.08475353917479156, 0.08692206530445967, 0.0673445172821856, 0.09421940292357689, 0.09325610390590522, 0.09040251582079584, 0.08838260164890366]}, "mutation_prompt": null}
{"id": "f636b2a5-d7af-47f2-9915-39e6c404ca81", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n        self.learning_rate = 0.1  # Added adaptive learning rate\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 4\n        shrink_factor = 0.85\n        success_rate_threshold = 0.2\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                candidate_position = position + direction * self.learning_rate  # Adjusted with learning rate\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n                    self.learning_rate *= 1.05  # Increase learning rate upon success\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.1  # Increase adaptively based on success\n                hypercube_size /= shrink_factor * (1 + self.evaluations / self.budget)  # Dynamic adjustment\n                if self.best_position is not None:  # Preserve elite position\n                    position = self.best_position\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Introduced adaptive learning rate and elite preservation to enhance exploration and convergence.", "configspace": "", "generation": 9, "fitness": 0.18436858229966807, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.23.", "error": "", "parent_id": "5aa2f62e-1d4e-49e9-9cd5-5a840c6b9089", "metadata": {"aucs": [0.45943979268377855, 0.5061820327726183, 0.5806920972220131, 0.5637616257194722, 0.5726101932888998, 0.7727383813658251, 0.7362504933985117, 0.7385857021843572, 0.3051383578181981, 0.10317406006672647, 9.999999999998899e-05, 9.999999999998899e-05, 0.017416047774150845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011940694702675336, 0.10501893399663564, 9.999999999998899e-05, 9.999999999998899e-05, 0.02583675224856108, 9.999999999998899e-05, 0.007161741842319325, 9.999999999998899e-05, 0.024524861956165434, 0.014947312543803104, 0.005820701007488105, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08923728788262941, 0.02537217999804342, 9.999999999998899e-05, 0.9747754673517496, 0.9907277800623367, 0.9859966437425228, 0.9842732039439064, 0.9862974231144619, 0.9837443659508828, 0.9922413728193435, 0.9821558537519134, 0.9808249174744316, 0.4535435095025294, 0.3312071860872401, 0.4351673388426506, 0.22871772117878186, 0.4264012854914123, 0.17906796276429338, 0.5155507934246475, 0.31019928827580556, 0.3680222016415504, 0.1376630752000081, 9.999999999998899e-05, 0.004581906731481844, 0.014997790015653156, 9.999999999998899e-05, 9.999999999998899e-05, 0.03293581906900067, 9.999999999998899e-05, 9.999999999998899e-05, 0.21859844031636744, 0.12468017473480286, 0.1533748740637899, 0.14763699395379937, 0.12296975452926251, 0.10632176032734209, 0.08566280195071885, 0.11879173641132401, 0.13463849077277268, 0.14814153933689944, 0.13987160727047143, 0.20466173023656475, 0.2737571751196639, 0.1484841935218716, 0.22762676083392774, 0.17266639120498017, 0.17370894143655768, 0.16567978014119522, 9.999999999998899e-05, 0.05013005004912574, 9.999999999998899e-05, 0.1324286174888153, 0.013502211574002998, 0.006257457021925816, 9.999999999998899e-05, 0.010896825646278363, 0.014360777040525852, 0.06128716635664366, 0.07192627461346779, 0.07016586773336875, 0.06419611398552749, 0.02167886573060529, 0.029952409295841975, 0.17548012057330709, 0.022980297127931926, 0.0678737300319151, 0.06766448205141917, 9.999999999998899e-05, 0.07651130548943563, 0.03813812459675159, 0.09471786102959234, 0.020686379689556222, 0.11364252786005258, 0.1303924754911523, 0.07844436154508727, 0.06309470963289965, 0.08499422058696726, 0.17316160577191275, 0.14422680293619217, 0.16766051855295483, 0.02410481134481457, 0.11543029454949649, 0.06913107651519146, 0.09262743384671379, 0.46744953310017523, 0.3184626135787053, 0.5838048388900328, 0.3972955850513906, 0.4019430982805715, 0.4037717636979301, 0.5444982830726378, 0.5450869261573179, 0.26852369017103817, 9.999999999998899e-05, 0.09931151844062847, 0.06190041259998014, 0.010450260674410683, 0.02578867084516623, 0.0013908948183428693, 0.034852353459239205, 0.02298239603348795, 0.0043616455839002866, 0.23979055300046925, 0.17011418734268846, 0.20763557734621085, 0.10410652216626037, 0.13436138870910785, 0.20260452853116362, 0.13545408263994563, 0.15041820044327503, 0.11542140776711296, 0.11482044002365188, 0.0987943182841573, 0.11106851741909629, 0.14557128483907822, 0.15436233583537928, 0.11886875682861464, 0.1499544174999735, 0.16213224636909507, 0.3162313656486031, 0.050148262521929055, 0.04775268603497462, 0.033315015549300164, 0.11792176857526371, 0.003590432712177627, 0.0670842856484769, 0.07884754200886113, 0.01415688948080096, 0.024339659520797752, 0.1665902889958778, 0.15155936751010868, 0.11885014489068468, 0.19140542882995382, 0.1747629518140893, 0.15097354766089865, 0.19255915858730854, 0.18730868217328978, 0.12752345628909678, 0.15951091228062853, 0.1843892796018345, 0.18241905682198112, 0.16409541073943934, 0.19814814362279698, 0.17585071457917145, 0.15841516678917122, 0.1704901186091492, 0.19332630412775487, 0.18888916215153206, 0.1371302618350887, 0.6549360055410958, 0.17416325322790016, 0.08512860088352392, 0.06189131707011675, 0.10885648240274548, 0.11538723299494891, 0.1689009411452873, 0.8432084978984308, 0.1124248968343029, 0.08313161932735424, 0.15711943667761352, 0.2016071956388502, 0.6293120893938591, 0.0905733976204709, 0.059260708596025835, 0.22215873495083438, 0.1838421138057018, 0.21331937491833874, 0.18429438751407856, 0.17469601934664336, 0.2041533731584919, 0.18614358811964804, 0.2102801262839743, 0.20366787942822173, 0.18934777001864045, 0.037013454566975246, 0.01239946892178434, 0.032302429277287215, 0.046644470418994, 0.01376020171648873, 0.01581151359181021, 0.05688629251019206, 0.015161886007720615, 0.03832922297741337]}, "mutation_prompt": null}
{"id": "bb99e7f5-a61d-4b6e-aba3-793fa418ef15", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 4\n        shrink_factor = 0.85\n        success_rate_threshold = 0.2\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.1  # Increase adaptively based on success\n            else:\n                hypercube_size *= 1.05  # Slightly increase for better exploration\n            hypercube_size /= shrink_factor * (1 + self.evaluations / self.budget)  # Dynamic adjustment\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Modified AHSA-DN by incorporating a dynamic exploration-exploitation balance mechanism for improved search efficiency.", "configspace": "", "generation": 10, "fitness": 0.0924403597511789, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.09.", "error": "", "parent_id": "5aa2f62e-1d4e-49e9-9cd5-5a840c6b9089", "metadata": {"aucs": [0.47897921982677016, 0.15266878659937488, 0.30103520947361617, 0.4850312572633947, 0.22010360525260952, 0.2679015813184835, 0.43427708650839736, 0.32611594770775576, 0.2724194095247898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03943298751846813, 0.022381871885865823, 0.002991270520486089, 0.06388248726220758, 0.016328730506197098, 0.07870194545111031, 0.06467859936057008, 0.022608795495407286, 0.009571353332234356, 0.014983390406540842, 0.03828731312266975, 0.04503121901544471, 0.004634622441599512, 0.018115381496299432, 9.999999999998899e-05, 0.04504634518341477, 0.022592464996915806, 0.019887875893684237, 0.13686456435069905, 0.08328628298323182, 0.036103036023961255, 0.05271170269757186, 0.08306686342843894, 0.07134134741240594, 0.06625804186609618, 0.07403230640398306, 0.07164837988396411, 0.1536610342261372, 0.05509721860385819, 9.999999999998899e-05, 0.012324023562332531, 0.019162197050440644, 0.10220176659624192, 0.09394362508610032, 9.999999999998899e-05, 0.06275822569062806, 0.0803056162855883, 0.06870399868809396, 0.05852801995151624, 0.13997567993621995, 0.10128909246160966, 0.09581926570477806, 0.045199780889942254, 0.04590355649981048, 0.05448096917071199, 9.999999999998899e-05, 0.08684882976717423, 0.14642218592218592, 9.999999999998899e-05, 0.07814991372278779, 9.999999999998899e-05, 0.19114398417772804, 9.999999999998899e-05, 9.999999999998899e-05, 0.008978694328540593, 0.18022228604650625, 0.22570349709573356, 9.999999999998899e-05, 0.05831081565489671, 9.999999999998899e-05, 9.999999999998899e-05, 0.145654430758134, 0.08915699185538484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04792910995740807, 0.045483868273800576, 0.052082172153172124, 0.048427514938649274, 9.999999999998899e-05, 9.999999999998899e-05, 0.010486495668064366, 0.022864977836253075, 0.028147398883480168, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0187344657116979, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09981781493803488, 9.999999999998899e-05, 9.999999999998899e-05, 0.18489763017800986, 0.05522039886078145, 0.03937963222273844, 0.013209006417401747, 0.010579392620205574, 0.01738058622344596, 0.3282230787710825, 0.305062381847538, 0.26826080999743673, 0.2512854714480707, 0.20469628958301933, 0.17714875354808302, 0.2183134822413455, 0.2461584106690663, 0.31970191310361895, 0.017884070292352394, 0.030623574125686392, 9.999999999998899e-05, 0.07818873989250352, 0.049881391032364775, 0.033349628274659704, 0.044630848640678566, 0.016899517502440564, 0.010650262689297363, 0.08013686887465843, 0.15162268781242272, 0.14591576510753146, 0.17093580724342627, 0.11556601276015355, 0.1255522594861611, 0.15237462143867941, 0.0863824745257552, 0.18560727576153635, 0.1607694588561771, 0.1082189881096548, 0.10417571830000705, 0.14822064324480255, 0.11295385259497837, 0.15921942124037214, 0.1364006562533383, 0.16908456569107855, 0.11890004923173858, 0.07183869630054929, 0.13175006414146007, 0.033631683824906444, 0.055541999767559025, 0.09031522505224987, 0.05243344407698114, 0.0897040257294186, 0.07744546684456366, 0.05140927409448237, 0.19187741244815992, 0.16010842552677063, 0.1922788471545086, 0.124400145458336, 0.11591125373399758, 0.1706544779561685, 0.1624318971549099, 0.12590229031767353, 0.12214850394593635, 0.18204786405514517, 0.1895336447720256, 0.15909388279604664, 0.11141053686603386, 0.16728970229319307, 0.1864733873670471, 0.12947498480448227, 0.17372638770161197, 0.06765078090634413, 0.15849224114785498, 0.13347774873938711, 0.10807624188523879, 0.2825684182636703, 0.13418127154763637, 0.058995863444175844, 0.10591765007530085, 0.11782086172414707, 0.1491352113333433, 0.18102442068676894, 0.14191589562767348, 0.07352037858898497, 0.08001889423825526, 0.11445797380252976, 0.0442686827736547, 0.11379995260552622, 0.05795294545372254, 0.21519216466008184, 0.17688122425681363, 0.17613897163161418, 0.1892373828559304, 0.2106658152493155, 0.1809964723321289, 0.1849734807604626, 0.19681839219378738, 0.1717347959591773, 0.16748536920978585, 0.033174519862023244, 0.06654014513343065, 0.02309323437106392, 0.027775863400002487, 0.04347640300090039, 0.06624552272192419, 0.019789910330024085, 0.06428329797047516, 0.03572258610466905]}, "mutation_prompt": null}
{"id": "6a6691e3-0fff-41e8-b98d-ed8e92a17c59", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 4\n        shrink_factor = 0.85\n        success_rate_threshold = 0.2\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size * (1 + self.evaluations / self.budget), self.dim)\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.1  # Increase adaptively based on success\n                hypercube_size /= shrink_factor * (1 + self.evaluations / self.budget)  # Dynamic adjustment\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Improved AHSA-DN by integrating a dynamic exploration-exploitation balance based on iteration progress.", "configspace": "", "generation": 11, "fitness": 0.228719706484927, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.23.", "error": "", "parent_id": "5aa2f62e-1d4e-49e9-9cd5-5a840c6b9089", "metadata": {"aucs": [0.8949424476013264, 0.874760881588087, 0.4595142812467369, 0.4580549367623218, 0.9054515403904297, 0.37568484786657164, 0.8075202608580765, 0.681466045492982, 0.9020240629736275, 0.025360815364069644, 0.07281698649815804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1319854159177155, 0.08997324122478001, 0.0793519082150046, 0.11700322670130592, 0.09911619603372401, 0.11020774642078957, 0.07203425016535059, 0.12992781227200834, 0.06594268918435431, 0.09382071465492003, 0.12158751394792011, 0.05952076777111437, 0.08486295740915573, 0.09801896982423441, 0.11082279001477868, 0.08698367044424427, 0.10529583359854022, 0.0719725567282189, 0.9878209372720017, 0.993717498381214, 0.9875488075915042, 0.9675604445730918, 0.9380165022535366, 0.8683572897002801, 0.9210644090013546, 0.9885610977022097, 0.955567572478456, 0.27205856795235817, 0.210955725572624, 0.29003668638631075, 0.4711891411370178, 0.4045342428580231, 0.5079140692637152, 0.6110896423167249, 0.7364792254805682, 0.3912443637096732, 0.26045625000558104, 0.17152297404168015, 0.36906059772971544, 0.24813230645791495, 0.2156701176607252, 0.2230849399312892, 0.3843449327611834, 0.23950971712844216, 0.8646986258258386, 0.13318540648612942, 0.21410210980271627, 0.1593231862878789, 0.2816000442379236, 0.14096382057043788, 0.22171184541064926, 0.2519115189723573, 0.19111868131273313, 0.15525330494121137, 0.13409127523928854, 0.1686771582783464, 0.10137322087859879, 0.11999265925861691, 0.17225944633840484, 0.19076517329198128, 0.1385593344959909, 0.17553483508440026, 0.12961404358387718, 9.999999999998899e-05, 9.999999999998899e-05, 0.16587355717514962, 0.008420473154594599, 0.08029353420914265, 9.999999999998899e-05, 0.0016762417243325611, 9.999999999998899e-05, 9.999999999998899e-05, 0.09094712994122478, 0.04832615249635197, 0.056312860896550965, 0.06654564577590572, 0.06182180775017809, 0.018094132560396048, 0.022422488445431377, 0.0968742320245215, 0.08574104884724254, 0.10611373046278694, 9.999999999998899e-05, 0.04546761353650164, 0.0035707147841723685, 0.06379832698883925, 0.08004025879390486, 9.999999999998899e-05, 0.11552919825598962, 0.009979666543088572, 0.02420005011512072, 0.057238565621210546, 0.17634467870980575, 0.11609917798849023, 0.15717493940313876, 0.1995076006155695, 0.18142467291460362, 0.062267804290747186, 0.16827516658645258, 0.36912794939823257, 0.5013015089582854, 0.3236978671737464, 0.5789192733202617, 0.5256165008250848, 0.39589808213291033, 0.4740176518601915, 0.44143029076450413, 0.475353862595844, 0.0962932252700297, 0.1451488935003563, 0.11019448840142754, 0.07158621887484984, 0.1128343774387578, 0.13726634204257793, 0.08377827500318158, 0.08731883587290135, 0.08956968132325105, 0.2492239363719112, 0.1729729756817957, 0.19716099783060936, 0.2753956524097163, 0.1452671183364237, 0.16325895427732795, 0.2631001252110732, 0.24539489741356046, 0.27017039805306176, 0.2583258701013659, 0.2862320417414501, 0.17581877471043228, 0.2688798410242248, 0.2605375415435425, 0.25993953898536437, 0.43033876360269463, 0.2158050583418697, 0.11666538932640069, 0.22505088407848384, 0.2122695107477226, 0.2472197935118282, 0.18428832274588425, 0.19545304222795745, 0.14500018324619868, 0.15422668392048566, 0.16116847863629447, 0.07265708929565207, 0.19141922890707286, 0.21258083397689065, 0.22408475779685222, 0.22493407451001401, 0.1928149553244085, 0.19961350074709483, 0.20985256301345634, 0.19291726942573906, 0.23564011005018026, 0.19564955976420928, 0.1921233565378344, 0.1864881457745211, 0.17936450784525204, 0.2057208697232551, 0.25126119069203, 0.17747916690862453, 0.22162498181648493, 0.21855942042873966, 0.1075260847549061, 0.1370685881332111, 0.1661589673181756, 0.851837280467459, 0.21400003783293509, 0.12309157323806919, 0.10813823370692921, 0.11907591552136998, 0.16742304615200954, 0.3491936620286842, 0.1128642053006439, 0.08340270722489296, 0.08341699866233632, 0.10492424935096112, 0.044236896299036155, 0.11356905124353911, 0.16792717090969145, 0.09482847018910556, 0.1898988362459083, 0.18617259699844002, 0.1951560620910674, 0.18899138925991732, 0.18704379643828184, 0.17500084720496512, 0.2032689613538038, 0.18162455429089475, 0.21334434007729552, 0.08770392220687262, 0.12229309269897493, 0.07501795378574283, 0.07721665588404159, 0.09100451992905378, 0.09665943914949293, 0.11068236175327473, 0.09156511014826407, 0.08078475409504027]}, "mutation_prompt": null}
{"id": "acd6965d-935a-4ba6-9c0b-38b9b4f02b85", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 4\n        shrink_factor = 0.85\n        success_rate_threshold = 0.2\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim) * (1 + self.evaluations / self.budget)\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor * (2 - self.evaluations / self.budget)  # Dynamic shape adjustment\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.1  # Increase adaptively based on success\n                hypercube_size /= shrink_factor  # Dynamic adjustment\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhanced AHSA-DN by introducing dynamic hypercube shape adjustment based on progress.", "configspace": "", "generation": 12, "fitness": 0.09111571232830062, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.20.", "error": "", "parent_id": "6a6691e3-0fff-41e8-b98d-ed8e92a17c59", "metadata": {"aucs": [0.11478432650139425, 0.0766887266020454, 0.10468766302435684, 0.13647629922297166, 0.10702251590569245, 0.10747845581050752, 0.11360127183710844, 0.12682915851887133, 0.11998693761127344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022305834157546833, 9.999999999998899e-05, 9.999999999998899e-05, 0.016540822163391256, 0.004324886758962365, 0.018725623611923425, 0.01310584787125757, 0.0051181485614196776, 0.011627920031627603, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011378133275804503, 0.003737138861811262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004392830346679477, 0.9978599201333467, 0.997774116480555, 0.9949943243061722, 0.9976252877698816, 0.9916091863410037, 0.9990427626878574, 0.994386457221987, 0.9947699075887385, 0.9972352283306273, 0.03434591652170582, 0.01654722515512841, 0.014283439549835908, 0.00376696737260096, 0.029064852605224956, 0.05344451492824209, 0.05917158553433677, 9.999999999998899e-05, 0.014935162261275892, 0.07331662151277707, 0.018303706386926022, 0.015304988389708729, 0.07828699596605615, 0.004355283594511095, 0.05982357115099657, 0.07008082282179862, 0.023085753404332943, 0.025543140076691118, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006996060544609439, 0.002528895620150462, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011015185937299776, 0.03813548468348149, 9.999999999998899e-05, 0.0032658675330365927, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09987472718524082, 0.10626074594652912, 0.14115615348834543, 0.10600978528461547, 0.12538541400922898, 0.08071058736634773, 0.19351737926651635, 0.1208366489299606, 0.0985489501587743, 0.008825292918770766, 0.02036832583763315, 0.021508570746011313, 0.012358757999393122, 0.012247515128421815, 0.00836412341868309, 0.004754915882639543, 0.01114676300075701, 0.01126340628013045, 0.1461186122675997, 0.1449790030054222, 0.13972866794511263, 0.12471188332261207, 0.10372823994880964, 0.12900934336939462, 0.11311132198447449, 0.13327601578401316, 0.10647995472093463, 0.12384106002985285, 0.10599116500349626, 0.11837246511711075, 0.13131115203283117, 0.11353846157619574, 0.11359347773131068, 0.14431767314172417, 0.1318580067659958, 0.11382253452739255, 0.05376328656995577, 0.05773920280338807, 0.048538838494012415, 0.06254395213612973, 0.053087005318509184, 0.05557864166794502, 0.09049316321425505, 0.06871914327396478, 0.06437905881233474, 0.1531259621391895, 0.10939991657134374, 0.1194691658760123, 0.13258802347197385, 0.10497559032312997, 0.12750045473996074, 0.1381086861578027, 0.09048318689297608, 0.09488389408485676, 9.999999999998899e-05, 9.999999999998899e-05, 0.13374076496833132, 0.15508085485344814, 9.999999999998899e-05, 9.999999999998899e-05, 0.14529820559247109, 9.999999999998899e-05, 9.999999999998899e-05, 0.11810740361961947, 0.09746800632208974, 0.11202027212612198, 0.11812913017375526, 0.0733938416798453, 0.08110730945919309, 0.11940489845080116, 0.1669085491007556, 0.07232367397550332, 0.10495694805892031, 0.06883957657048634, 0.09993925049262364, 0.033650271960692035, 0.10187560625242698, 0.028094849572945946, 0.11336690571170183, 0.11257518929253396, 0.11194487979576384, 0.15902687538706284, 0.18661851771708626, 0.17101366171258392, 0.16702484615209434, 0.1626554551655065, 0.16765524872984094, 0.17802501935376314, 0.16407645922322134, 0.16709605308874198, 0.04096174279026399, 0.01713141402025342, 0.03896683816577129, 0.012518268792768739, 0.007173874270189673, 0.027850089239110476, 0.021864435869530685, 0.006320077059906337, 0.03371287133787115]}, "mutation_prompt": null}
{"id": "e8c0ee4a-509b-469c-9246-262608812739", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 4\n        shrink_factor = 0.85\n        success_rate_threshold = 0.2\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size * (1 + self.evaluations / self.budget), self.dim)\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    shrink_factor *= 0.99  # Decay shrink factor for adaptive exploration\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.1  # Increase adaptively based on success\n                hypercube_size /= shrink_factor * (1 + self.evaluations / self.budget)  # Dynamic adjustment\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhanced AHSA-DN by incorporating a decay mechanism in the hypercube shrink factor for improved convergence.", "configspace": "", "generation": 13, "fitness": 0.2164846737381318, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.22.", "error": "", "parent_id": "6a6691e3-0fff-41e8-b98d-ed8e92a17c59", "metadata": {"aucs": [0.492714189958972, 0.4762208680526455, 0.4896846451398503, 0.8148315549022255, 0.7980258492993095, 0.3552354780788377, 0.8839370263440134, 0.29712451848480204, 0.8901696773060288, 9.999999999998899e-05, 9.999999999998899e-05, 0.045258528862448966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09224340058816216, 0.07895512569889307, 0.07994984699496777, 0.09563882735570928, 0.10121514699547751, 0.1242848519071782, 0.07860848588976244, 0.08251015893927394, 0.1022358756801044, 0.10452790787805388, 0.10241100358557631, 0.058225226091525695, 0.1017470080035453, 0.10924845498605695, 0.10322352113899069, 0.08248545066023705, 0.0780819093419306, 0.057878886369348015, 0.9879968316193544, 0.9937210493473628, 0.9875672814172969, 0.9261464846298187, 0.951658689571056, 0.9198898272337218, 0.9423173071456146, 0.9885780392294388, 0.9802823274458923, 0.3937333301815078, 0.36229332382080526, 0.37109406520482846, 0.45816901399990395, 0.3908882932649559, 0.3542945509095541, 0.35779090486489507, 0.33003473992809207, 0.5500701390198615, 0.3789122438940604, 0.293168784084923, 0.14502030850479275, 0.24281092069893528, 0.8910874027015542, 0.19543820788493527, 0.23570163203518202, 0.24402520946330575, 0.23458174501595708, 0.12831605729038797, 0.16976661849086228, 0.17437254486676723, 0.14781885538459205, 0.12817857621320194, 0.20219112503596215, 0.1259641942466374, 0.23357211105644082, 0.18006798417615977, 0.09844549131609492, 0.14227675173045318, 0.11885264945032237, 0.09395746062512167, 0.19078792994753668, 0.139521004598949, 0.212117582141655, 0.15697647066950016, 0.138084882044605, 0.005816483088032287, 9.999999999998899e-05, 0.06856801070582019, 0.044156145343476005, 9.999999999998899e-05, 0.08314958475652989, 0.0002204402597011379, 9.999999999998899e-05, 9.999999999998899e-05, 0.06323270254377089, 0.05566401398925258, 0.07765874097193481, 0.023571379316928542, 0.0667928161736785, 0.02333743131096966, 0.03456469053731959, 0.07076870134088509, 0.07885823859640717, 0.20214983937952724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08672182175471166, 9.999999999998899e-05, 0.0028083683468402842, 0.0658132208427109, 0.06535067607968215, 0.045023022305664906, 0.08397529876963727, 0.10213683600626011, 0.05816876497023116, 0.17651139065050647, 0.08603869799149866, 0.13403990660365084, 0.14025126640625096, 0.4340738101342052, 0.3395248175381197, 0.46110362991530673, 0.4413786651015331, 0.4613226026270415, 0.43142311895569696, 0.31148139622723725, 0.4508056973850547, 0.4314951726468049, 0.10863704455646472, 0.12065728955309729, 0.1076080365484744, 0.09101192760877197, 0.09221395988488745, 0.11693767966495194, 0.10602374243975865, 0.07881535736157053, 0.12209619001356098, 0.3570413116001442, 0.20611514619840232, 0.1814611595098018, 0.17870470724572463, 0.14828492419720418, 0.17112884866927147, 0.18528949959480767, 0.1374182796220461, 0.21464858997692915, 0.4348437731861494, 0.40664140430731766, 0.1707346185324481, 0.28794006844755327, 0.23397072104553107, 0.2855042174947915, 0.1973163808445373, 0.19854127043135883, 0.12150044797118387, 0.28357114686789586, 0.281902751276372, 0.294186743445204, 0.21670803549933992, 0.16467358160104428, 0.16088114675115972, 0.21199836588031584, 0.21649069447514324, 0.19588132367232813, 0.20809131999705177, 0.20833655914973004, 0.19485350019586944, 0.20426834464010712, 0.20282727134039624, 0.18639155643943184, 0.21318668232147242, 0.22847356165903188, 0.2147882300913877, 0.2206612550790562, 0.18228735046789102, 0.17650778794877664, 0.16980176207701736, 0.17982797107896897, 0.2092141579555531, 0.20296649168786562, 0.19733052401005458, 0.17516212669723608, 0.10741721664971626, 0.13483647482376893, 0.1661325119178897, 0.46463331306131805, 0.21307005146965752, 0.12315306328860076, 0.13602905340972415, 0.11887614749549646, 0.16698165614387295, 0.3354768125339376, 0.11284254145034478, 0.08334247773633963, 0.08276845264838772, 0.10484684930221322, 0.04305171406518182, 0.112939336048406, 0.16930817197850523, 0.09425081828228998, 0.1948357167555389, 0.18754033388537694, 0.17705701078752778, 0.19215598881269602, 0.17619383738356154, 0.1997241635954088, 0.17988334976238296, 0.20470133362435783, 0.23164037964612938, 0.08908977216707481, 0.09228873384912861, 0.07412274944922703, 0.08692153560578497, 0.07396756430409601, 0.08791111651932937, 0.13015061961585594, 0.0922669672170785, 0.08305308682815937]}, "mutation_prompt": null}
{"id": "4a6db850-5d32-4a2d-992d-7cf23f4f3cae", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 4\n        shrink_factor = 0.85\n        success_rate_threshold = 0.2\n        success_count = 0\n        expansion_factor = 1.2\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size * (1 + self.evaluations / self.budget), self.dim)\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.1  # Increase adaptively based on success\n                hypercube_size /= shrink_factor * (1 + self.evaluations / self.budget)  # Dynamic adjustment\n            else:\n                hypercube_size *= expansion_factor  # Expand if not successful\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhance AHSA-DN by adaptive exploration based on oscillating shrink and expansion of hypercube dynamically.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "An exception occurred: OverflowError('Range exceeds valid bounds').", "error": "OverflowError('Range exceeds valid bounds')", "parent_id": "6a6691e3-0fff-41e8-b98d-ed8e92a17c59", "metadata": {}, "mutation_prompt": null}
{"id": "94ff0c38-1699-4873-a4c8-5a8575d3101b", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 4\n        shrink_factor = 0.85\n        success_rate_threshold = 0.2\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size * (1 + self.evaluations / self.budget), self.dim)\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.1  # Increase adaptively based on success\n                hypercube_size /= shrink_factor * (1 + self.evaluations / self.budget)  # Dynamic adjustment\n            success_count = 0  # Reset for next round\n\n            # Update success rate threshold dynamically\n            success_rate_threshold = 0.1 + 0.1 * (self.evaluations / self.budget)\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhanced AHSA-DN by dynamically adjusting the success rate threshold for improved adaptability.", "configspace": "", "generation": 15, "fitness": 0.228719706484927, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.23.", "error": "", "parent_id": "6a6691e3-0fff-41e8-b98d-ed8e92a17c59", "metadata": {"aucs": [0.8949424476013264, 0.874760881588087, 0.4595142812467369, 0.4580549367623218, 0.9054515403904297, 0.37568484786657164, 0.8075202608580765, 0.681466045492982, 0.9020240629736275, 0.025360815364069644, 0.07281698649815804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1319854159177155, 0.08997324122478001, 0.0793519082150046, 0.11700322670130592, 0.09911619603372401, 0.11020774642078957, 0.07203425016535059, 0.12992781227200834, 0.06594268918435431, 0.09382071465492003, 0.12158751394792011, 0.05952076777111437, 0.08486295740915573, 0.09801896982423441, 0.11082279001477868, 0.08698367044424427, 0.10529583359854022, 0.0719725567282189, 0.9878209372720017, 0.993717498381214, 0.9875488075915042, 0.9675604445730918, 0.9380165022535366, 0.8683572897002801, 0.9210644090013546, 0.9885610977022097, 0.955567572478456, 0.27205856795235817, 0.210955725572624, 0.29003668638631075, 0.4711891411370178, 0.4045342428580231, 0.5079140692637152, 0.6110896423167249, 0.7364792254805682, 0.3912443637096732, 0.26045625000558104, 0.17152297404168015, 0.36906059772971544, 0.24813230645791495, 0.2156701176607252, 0.2230849399312892, 0.3843449327611834, 0.23950971712844216, 0.8646986258258386, 0.13318540648612942, 0.21410210980271627, 0.1593231862878789, 0.2816000442379236, 0.14096382057043788, 0.22171184541064926, 0.2519115189723573, 0.19111868131273313, 0.15525330494121137, 0.13409127523928854, 0.1686771582783464, 0.10137322087859879, 0.11999265925861691, 0.17225944633840484, 0.19076517329198128, 0.1385593344959909, 0.17553483508440026, 0.12961404358387718, 9.999999999998899e-05, 9.999999999998899e-05, 0.16587355717514962, 0.008420473154594599, 0.08029353420914265, 9.999999999998899e-05, 0.0016762417243325611, 9.999999999998899e-05, 9.999999999998899e-05, 0.09094712994122478, 0.04832615249635197, 0.056312860896550965, 0.06654564577590572, 0.06182180775017809, 0.018094132560396048, 0.022422488445431377, 0.0968742320245215, 0.08574104884724254, 0.10611373046278694, 9.999999999998899e-05, 0.04546761353650164, 0.0035707147841723685, 0.06379832698883925, 0.08004025879390486, 9.999999999998899e-05, 0.11552919825598962, 0.009979666543088572, 0.02420005011512072, 0.057238565621210546, 0.17634467870980575, 0.11609917798849023, 0.15717493940313876, 0.1995076006155695, 0.18142467291460362, 0.062267804290747186, 0.16827516658645258, 0.36912794939823257, 0.5013015089582854, 0.3236978671737464, 0.5789192733202617, 0.5256165008250848, 0.39589808213291033, 0.4740176518601915, 0.44143029076450413, 0.475353862595844, 0.0962932252700297, 0.1451488935003563, 0.11019448840142754, 0.07158621887484984, 0.1128343774387578, 0.13726634204257793, 0.08377827500318158, 0.08731883587290135, 0.08956968132325105, 0.2492239363719112, 0.1729729756817957, 0.19716099783060936, 0.2753956524097163, 0.1452671183364237, 0.16325895427732795, 0.2631001252110732, 0.24539489741356046, 0.27017039805306176, 0.2583258701013659, 0.2862320417414501, 0.17581877471043228, 0.2688798410242248, 0.2605375415435425, 0.25993953898536437, 0.43033876360269463, 0.2158050583418697, 0.11666538932640069, 0.22505088407848384, 0.2122695107477226, 0.2472197935118282, 0.18428832274588425, 0.19545304222795745, 0.14500018324619868, 0.15422668392048566, 0.16116847863629447, 0.07265708929565207, 0.19141922890707286, 0.21258083397689065, 0.22408475779685222, 0.22493407451001401, 0.1928149553244085, 0.19961350074709483, 0.20985256301345634, 0.19291726942573906, 0.23564011005018026, 0.19564955976420928, 0.1921233565378344, 0.1864881457745211, 0.17936450784525204, 0.2057208697232551, 0.25126119069203, 0.17747916690862453, 0.22162498181648493, 0.21855942042873966, 0.1075260847549061, 0.1370685881332111, 0.1661589673181756, 0.851837280467459, 0.21400003783293509, 0.12309157323806919, 0.10813823370692921, 0.11907591552136998, 0.16742304615200954, 0.3491936620286842, 0.1128642053006439, 0.08340270722489296, 0.08341699866233632, 0.10492424935096112, 0.044236896299036155, 0.11356905124353911, 0.16792717090969145, 0.09482847018910556, 0.1898988362459083, 0.18617259699844002, 0.1951560620910674, 0.18899138925991732, 0.18704379643828184, 0.17500084720496512, 0.2032689613538038, 0.18162455429089475, 0.21334434007729552, 0.08770392220687262, 0.12229309269897493, 0.07501795378574283, 0.07721665588404159, 0.09100451992905378, 0.09665943914949293, 0.11068236175327473, 0.09156511014826407, 0.08078475409504027]}, "mutation_prompt": null}
{"id": "cc4a0b5e-f199-4b07-ad79-45baf72222a4", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 4\n        shrink_factor = 0.85\n        success_rate_threshold = 0.2\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size * (1 + self.evaluations / self.budget), self.dim)\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.1  # Increase adaptively based on success\n                hypercube_size /= shrink_factor * (1 + 1.5 * self.evaluations / self.budget)  # Dynamic adjustment\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhanced AHSA_DN by introducing adaptive step size modulation based on success frequency.", "configspace": "", "generation": 16, "fitness": 0.22284447511752148, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.23.", "error": "", "parent_id": "6a6691e3-0fff-41e8-b98d-ed8e92a17c59", "metadata": {"aucs": [0.695734008057175, 0.4694019515642216, 0.9326187990131889, 0.9519320805369061, 0.8424292609236398, 0.7338305594725181, 0.6990255602628583, 0.7798761791148623, 0.6978085290110398, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10225927441509286, 0.12316785317642931, 0.09650492063455496, 0.10918476218601458, 0.10359681262418985, 0.11759324656163828, 0.07147670104201775, 0.12294003081059923, 0.07407796595348815, 0.09977800592046693, 0.08687758344464869, 0.054328373837000066, 0.10506418906681303, 0.07584132891677486, 0.07205573750128147, 0.08539040407467913, 0.14065967164347437, 0.039518411554336, 0.987817659308312, 0.9937152836620635, 0.9875497349745189, 0.9526876554614552, 0.9223512672752251, 0.18852241482418086, 0.9130195162993626, 0.9885423771452263, 0.94218831671932, 0.29834541126458813, 0.4423211578250431, 0.7579803880148773, 0.45589193719092025, 0.18060610687722367, 0.3645753765109667, 0.3251377808418271, 0.28871505221798566, 0.47768679218768495, 0.2292142927124866, 0.1456975646447134, 0.3007656626659495, 0.3761343723203041, 0.2836219027653487, 0.1623936242853744, 0.32790119200666545, 0.23893921984312372, 0.23916165839155024, 0.14991691883849256, 0.24905324266594175, 0.1746248687254094, 0.14505745772553913, 0.1372741553406066, 0.1688247146042866, 0.13269157322212832, 0.15988346490229433, 0.16928884752333795, 0.13523788914509083, 0.16689515020568213, 0.10578653922089376, 0.10957436774331564, 0.1638291766344082, 0.21731876707420283, 0.22327592245986716, 0.1760518623288273, 0.13154531125163615, 9.999999999998899e-05, 9.999999999998899e-05, 0.020100822226775006, 0.029311769440281576, 0.04610291996135896, 0.03259131471817489, 0.00529772528290251, 0.011000486078912908, 9.999999999998899e-05, 0.09375209777181537, 0.05234205528054081, 0.05877110195904556, 0.06453970658229391, 0.051196880988116256, 0.00989077176588582, 0.02483214009790391, 0.08656347018409127, 0.09311773632710652, 0.10464832274123359, 9.999999999998899e-05, 0.02766468894028662, 0.06075164088752971, 0.11043663401904924, 0.20179585008041356, 9.999999999998899e-05, 0.0745936182642728, 9.999999999998899e-05, 0.02394376754180738, 0.08616493847443163, 0.1476106551547417, 0.18792023424629856, 0.1079614235913936, 0.10384306098620655, 0.27328603938851725, 0.11756894900274728, 0.19774944463315525, 0.3695099355524627, 0.3694252500250149, 0.3211873068212042, 0.5169690331556044, 0.47356384710621946, 0.5836128886061003, 0.530370871403799, 0.4823774599641919, 0.417944433736397, 0.0950412860029084, 0.07741685679713395, 0.082332645424253, 0.07252483948303234, 0.11246404854026892, 0.09477878240667414, 0.1059028663521101, 0.09461404770087756, 0.125164986629707, 0.3220442453943416, 0.17621625841053978, 0.1390373534426388, 0.25415768619922596, 0.15824448323374085, 0.14921923119508285, 0.2229556645437909, 0.24691226270786237, 0.30374258814400223, 0.36302056286950457, 0.303291117435994, 0.18033222307226915, 0.31777388627220726, 0.23525807672397636, 0.1939918188251929, 0.304329424551958, 0.2437091354742802, 0.10192724331343994, 0.18215387605985955, 0.210485776373609, 0.2834491795903934, 0.20744365178062985, 0.21523986694583785, 0.17884703434398652, 0.21281943922022717, 0.18926563652594042, 0.19711683126949642, 0.21173065274972425, 0.18958453418477483, 0.2412252746187019, 0.23707663063933948, 0.21926591700639886, 0.21281896698142122, 0.23364863304419536, 0.18570414777038213, 0.21194725062575037, 0.20828975682056872, 0.1788816280246921, 0.1854691195760536, 0.17204991616774457, 0.19752107066818025, 0.18584495468604645, 0.18392039930679915, 0.20014978457646515, 0.22285684846653397, 0.10753277670582251, 0.13719223669405933, 0.16640327074631622, 0.9336994883955692, 0.2140085251543301, 0.12316359621721185, 0.10838937230033463, 0.12534261921589918, 0.16749419009662614, 0.35198880264393806, 0.11240952172517715, 0.08341577567937841, 0.0834614640661272, 0.10493647185972421, 0.044246780035049005, 0.11358196569452716, 0.16853168045383593, 0.09480680770019845, 0.17434522712660017, 0.1792493343142907, 0.18101281485330578, 0.18256747365132242, 0.18461646536856158, 0.19459922664173734, 0.1756226080594715, 0.20442306376032426, 0.18588704873575446, 0.08375408114837757, 0.09855495265989844, 0.08699669161676715, 0.08057249002377409, 0.09711185860036553, 0.1177113825127315, 0.13373843205040015, 0.07520544721047062, 0.08422484033914401]}, "mutation_prompt": null}
{"id": "19bb373f-7b54-40af-931c-c319a65da76b", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 4\n        shrink_factor = 0.85\n        success_rate_threshold = 0.2\n        success_count = 0\n        inertia = 0.9  # Added inertia factor\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size * (1 + self.evaluations / self.budget), self.dim)\n                candidate_position = position + inertia * direction  # Adjusted with inertia\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.1  # Increase adaptively based on success\n                hypercube_size /= shrink_factor * (1 + self.evaluations / self.budget)  # Dynamic adjustment\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhanced AHSA-DN by incorporating dynamic inertia to balance local and global search more effectively.", "configspace": "", "generation": 17, "fitness": 0.20903739762549825, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "6a6691e3-0fff-41e8-b98d-ed8e92a17c59", "metadata": {"aucs": [0.5990534840882142, 0.5397375937619315, 0.30298957147662553, 0.8727550289244612, 0.6667375122865067, 0.5093687000978279, 0.622112508747287, 0.314108120069748, 0.5920548212136771, 0.13001853481863657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007091052565979972, 0.030668884643477945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08245909194254875, 0.08136131979446304, 0.0862249826166892, 0.11040936052706152, 0.10343615418213281, 0.10573835855012681, 0.09488347204392777, 0.10085220367925851, 0.10126906103084621, 0.07992991287628448, 0.08594649586204361, 0.04740282687673958, 0.09367152871575835, 0.06620381128831554, 0.10921045025527476, 0.09421389660327073, 0.08059038769914673, 0.104806507034089, 0.98774489277238, 0.9936688030520323, 0.9875205758945168, 0.9503740202831552, 0.8701698128102355, 0.17354805306750043, 0.9138372507138035, 0.9837393605100779, 0.93627525140814, 0.29085205194871544, 0.35000509183681316, 0.23073319250989865, 0.3915230330902397, 0.6501261204876198, 0.2545503556146227, 0.5865038757816565, 0.2173037596909857, 0.2953931625607682, 0.20022452133736834, 0.11499898293555721, 0.38496063019417304, 0.35872769144300765, 0.21617411930491615, 0.16182400498430705, 0.3711894961081348, 0.1576540491841082, 0.2370394898062116, 0.1174486348116085, 0.13235841952783045, 0.17530977871996334, 0.197421286635996, 0.19249143022439963, 0.10971148697827393, 0.14123873882776683, 0.19591979285881667, 0.13062457180096387, 0.1713176034529179, 0.2344544143047934, 0.08804742675201016, 0.06715894309315973, 0.16087800332899804, 0.21049921390584225, 0.17755915260134625, 0.13558332935891848, 0.13853554984551208, 9.999999999998899e-05, 0.012769950429033283, 0.05279670307471174, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0855201651823787, 0.0597298869837628, 0.1263004539421636, 0.016857910961407097, 0.03968862110405058, 0.00810891634861799, 0.073246533571936, 0.06126298075305281, 0.07114973208364062, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05351207224008392, 9.999999999998899e-05, 0.11869334223214267, 0.0036471429682218837, 9.999999999998899e-05, 0.1728778403688297, 0.06341212913048422, 0.20124616068794798, 0.1785378691874674, 0.09003747119297967, 0.14648689144582805, 0.036227847077134334, 0.03631617270761833, 0.13017728457451172, 0.47929910672601217, 0.5240919907708987, 0.3798192683743493, 0.3801156441863681, 0.5483606158415771, 0.5149684227961193, 0.29017863506653463, 0.45250045803484007, 0.3779033062544911, 0.09718363040282385, 0.05888467102299877, 0.13390758064655983, 0.12510665380451613, 0.11318502607537617, 0.0969636738561388, 0.10071781996754403, 0.08209606436053896, 0.07282059959710718, 0.12217370094187696, 0.18439384196481046, 0.20595204346955032, 0.25791267131922535, 0.19256017989216268, 0.26429269985383397, 0.1733301695066397, 0.2683494583824414, 0.20921221400595658, 0.36051917530828326, 0.230035317668824, 0.1570038783487555, 0.20666180275468382, 0.2889447937768058, 0.24544908111273755, 0.44967477577605, 0.3546385779882004, 0.14777866209914337, 0.1032153437934914, 0.06257624316962973, 0.13038217129383667, 0.3325156518161285, 0.20688163615481203, 0.2550570019575876, 0.16169370353255708, 0.14941826625008803, 0.1107798564501512, 0.19942542157539056, 0.20015307454608833, 0.2154387452951566, 0.1796575318725805, 0.2320322174119307, 0.20781934668819313, 0.22161397912900793, 0.21187532050476532, 0.2332894499372099, 0.17329043209058548, 0.22132133965758427, 0.19888264710993575, 0.19843371531848886, 0.18741066666995365, 0.20057815839551962, 0.18192557763576056, 0.17510673284401201, 0.1965377060419834, 0.07822215936277643, 0.13366000112755705, 0.10914230044958095, 0.8672109311251821, 0.11278431216675855, 0.12328204309910329, 0.10790104905386255, 0.11475489890396073, 0.16763238139022885, 0.6062008586584309, 0.11307731436575374, 0.08320884983710153, 0.41079740666561493, 0.10518442643013337, 0.10618121542271841, 0.11350882660748562, 0.1687190973389685, 0.09487863313302969, 0.1734422047215205, 0.18455304023320096, 0.20408808523160848, 0.1839944192191144, 0.17902401007117263, 0.17641790033594495, 0.18652928671992186, 0.18136371910513494, 0.1840051399262136, 0.08218615262668716, 0.10480270906511924, 0.0958327896652309, 0.12273962516544212, 0.07824179690589883, 0.10014822354442787, 0.11694674422574403, 0.10544727299748613, 0.08264077423187954]}, "mutation_prompt": null}
{"id": "e4d5202b-8f9c-4937-a4f2-cad5fd5e1dee", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 4\n        shrink_factor = 0.85\n        success_rate_threshold = 0.2\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size * (1 + self.evaluations / self.budget), self.dim)\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n                    shrink_factor = min(shrink_factor * 1.1, 0.95)  # Adaptive learning rate adjustment\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.1  # Increase adaptively based on success\n                hypercube_size /= shrink_factor * (1 + self.evaluations / self.budget)  # Dynamic adjustment\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhanced AHSA-DN by incorporating adaptive learning rate to refine candidate selection efficiency.", "configspace": "", "generation": 18, "fitness": 0.1782739254694587, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "6a6691e3-0fff-41e8-b98d-ed8e92a17c59", "metadata": {"aucs": [0.26059846234297845, 0.25386992095673944, 0.26833884306894473, 0.6011860481734205, 0.2970332206953078, 0.2767342177221812, 0.2621377796012714, 0.24985980988124423, 0.30914008032421747, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006284360777901621, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008892502285505866, 0.07939579470589264, 0.10054787936772425, 0.07952416285483654, 0.0878510432116969, 0.09585997014330916, 0.06926517310175273, 0.10319355649812101, 0.0850227723557706, 0.09066241020292143, 0.08534957220894979, 0.08374200691331113, 0.07834040086871208, 0.06486592633127874, 0.07733231285184683, 0.08293269475628273, 0.09862247974290839, 0.07765321113523682, 0.08169186956114516, 0.990386119159863, 0.9937496764300958, 0.9877338609703754, 0.9857468422653041, 0.9804792140072257, 0.9937971512383066, 0.9882541804119782, 0.9888166840081081, 0.9851090604105925, 0.26026451259653116, 0.15263415580504314, 0.18989958475475066, 0.16613237394757818, 0.31224433853388756, 0.251128911453113, 0.17938709860678315, 0.2146552075545518, 0.20741508093631122, 0.2050901991633418, 0.28632177607920195, 0.26327145868865054, 0.2391254876507366, 0.5099969834190605, 0.20320754540607266, 0.2874056846598222, 0.22211179856494168, 0.23087709117602762, 0.024419762682688306, 0.0988525324894024, 0.11188924537534384, 0.0658882804393357, 0.11647113447160451, 0.09669937407175422, 0.09853965721150582, 0.10252465766744923, 0.21673826824422304, 0.10059731311952236, 0.1151303261306863, 0.12499352420883791, 0.08194327599491702, 0.11215476589404805, 0.08181230257609418, 0.10810370757524779, 0.11414565092301199, 0.09434415672505114, 0.0016704206090789597, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002046275913686335, 9.999999999998899e-05, 9.999999999998899e-05, 0.02488450769007633, 9.999999999998899e-05, 0.09101753893966014, 0.10850705812517736, 0.08673398268995192, 0.017787117923878215, 0.0692512724532417, 0.06271087090037109, 0.06214610511482754, 0.08674408798209898, 0.11735867196047423, 0.019414948196162407, 9.999999999998899e-05, 9.999999999998899e-05, 0.1211845368825516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04288909304665145, 0.010647149282296042, 0.07151839303668561, 0.05203923439385105, 0.0440907894967395, 0.059607401216991485, 0.02959399748299274, 0.02258070909895271, 0.029781685867497965, 0.278506823954476, 0.3474035707924331, 0.2755024613842447, 0.29678438207436864, 0.27242271699768195, 0.4216295377752316, 0.2680448473090691, 0.2869515625513567, 0.26385078616811763, 0.07784558624816795, 0.08028031512234335, 0.09814245392482057, 0.08826248247607671, 0.09593333717747732, 0.09388634616900049, 0.08342571121250564, 0.11090599964267545, 0.0900974743994768, 0.12559854246261126, 0.1851207344776442, 0.1538932638492453, 0.14684386329411514, 0.14398532189806557, 0.16882050473359322, 0.15497032215904527, 0.16875274441577803, 0.22931867276590578, 0.22279525233882658, 0.27136366138961343, 0.20876667677809158, 0.224470092503692, 0.21405605878213174, 0.3190439616251035, 0.21170174499995187, 0.23251459867666835, 0.24041678899516472, 0.16120869824380712, 0.15707223836866302, 0.1921233879503832, 0.16468419924875655, 0.16758288817676126, 0.14105472029159516, 0.13619946947264905, 0.12680467495795888, 0.16200275995360913, 0.18857412566993448, 0.21079559056943642, 0.1897006424877956, 0.18293651844447223, 0.20717153956009637, 0.181555122666477, 0.21974632664311156, 0.22229308477047494, 0.20723206621344448, 0.1731392062371997, 0.17517381995861725, 0.17910414786206252, 0.1813092337167741, 0.1824583841066042, 0.169252946093161, 0.17100973585572887, 0.19272809997567442, 0.1860556438359745, 0.1712232327889719, 0.13802285193614394, 0.6736705868354597, 0.1692931461040169, 0.06424391366237558, 0.11900096165062368, 0.1308278242005939, 0.12088211267454119, 0.15770926218032566, 0.3380222638733952, 0.11067792335140525, 0.08087078599729725, 0.0812423198921911, 0.20173620372033285, 0.2008676466834487, 0.1106325389351247, 0.1622301032805723, 0.4164433440451777, 0.18987947901357427, 0.18019430064835473, 0.2056474981740375, 0.20389130140285638, 0.1773292248777576, 0.19059303131164607, 0.1911377670697948, 0.18507721761448437, 0.1856915252041147, 0.07246368351818366, 0.08678063269584313, 0.07337591494640605, 0.06975483238995661, 0.0815821221163946, 0.07636419791136029, 0.08234058970184432, 0.07354146440388087, 0.06186492741263305]}, "mutation_prompt": null}
{"id": "5a55cd28-8c26-468c-ad76-ba0be35ea213", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 4\n        shrink_factor = 0.85\n        success_rate_threshold = 0.2\n        success_count = 0\n        stagnation_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size * (1 + self.evaluations / self.budget), self.dim)\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n                    stagnation_count = 0  # Reset stagnation\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.1  # Increase adaptively based on success\n                hypercube_size /= shrink_factor * (1 + self.evaluations / self.budget)  # Dynamic adjustment\n\n            # Expand hypercube if stagnation occurs\n            if success_count == 0:\n                stagnation_count += 1\n                if stagnation_count > 5:  # Adaptive expansion after sustained stagnation\n                    hypercube_size *= 1.2\n\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhanced AHSA-DN with adaptive hypercube expansion during stagnation to improve exploration balance.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "An exception occurred: OverflowError('Range exceeds valid bounds').", "error": "OverflowError('Range exceeds valid bounds')", "parent_id": "6a6691e3-0fff-41e8-b98d-ed8e92a17c59", "metadata": {}, "mutation_prompt": null}
{"id": "73506b5b-8085-40a8-b71f-d027f0e52835", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 4\n        shrink_factor = 0.85\n        success_rate_threshold = 0.2\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size * (1 + self.evaluations / self.budget), self.dim)\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= (shrink_factor - 0.05)  # Slightly more aggressive shrink\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.1  # Increase adaptively based on success\n                hypercube_size /= shrink_factor * (1 + self.evaluations / self.budget)  # Dynamic adjustment\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhanced AHSA-DN by introducing adaptive hypercube shrinkage based on candidate improvements.", "configspace": "", "generation": 20, "fitness": 0.2144788598053913, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.22.", "error": "", "parent_id": "6a6691e3-0fff-41e8-b98d-ed8e92a17c59", "metadata": {"aucs": [0.8539001805210338, 0.37733676094325475, 0.7238310974976521, 0.3709982679734085, 0.4298327114933197, 0.8977546871578745, 0.4520218574120187, 0.7716717682937358, 0.45146002938108154, 0.012154401863589182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03538893199593163, 9.999999999998899e-05, 0.09247785839774769, 0.10101221506434899, 0.05031297041749072, 0.10844583880868064, 0.10559583992721511, 0.09183235629270226, 0.09238431317244555, 0.08635608892138513, 0.138204971670851, 0.13588909250685322, 0.10342952303654385, 0.04706944625964138, 0.06007933800718113, 0.058618057908369936, 0.0725581181219177, 0.04985680944748527, 0.06305082641386184, 0.04827544389469096, 0.9605296994930781, 0.9909338423033451, 0.9876636666685856, 0.925028491884018, 0.9104716729165809, 0.922157517725347, 0.9190321059779014, 0.9161119499985615, 0.9654906148176745, 0.6199148603189415, 0.18675571855170214, 0.1576564148271522, 0.2684800217058516, 0.4595687244617864, 0.4132869065760183, 0.38415372242317825, 0.4862542569323981, 0.19910936808115798, 0.22977017739099315, 0.1152258915890636, 0.15221862083744342, 0.49995884915000177, 0.21509922279235227, 0.19584238227288797, 0.17853894744996324, 0.16535760282879675, 0.23945262842414083, 0.1740149709203057, 0.13091788460622245, 0.38084985809179384, 0.2200517769881727, 0.17197856647205279, 0.16656632532521287, 0.2309296890735545, 0.22564337721007743, 0.14680235678257536, 0.15818788183796428, 0.1269726196427915, 0.17918138015187413, 0.0807611913423083, 0.18112521574982254, 0.16476317169655963, 0.12592069779975756, 0.13531072341555228, 0.19547893411607942, 9.999999999998899e-05, 9.999999999998899e-05, 0.04172135104997232, 9.999999999998899e-05, 0.01110153059119201, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03730446537080645, 0.04488906847881413, 0.1317753278303393, 0.06297821332568032, 0.014070221381844883, 0.011335479403206783, 0.063306002714553, 0.08699731931464827, 0.13145563735141552, 0.292972020656442, 9.999999999998899e-05, 0.09741890812313725, 0.10241181849961778, 9.999999999998899e-05, 0.031565553706030314, 9.999999999998899e-05, 9.999999999998899e-05, 0.029450359659984104, 0.12846123587922043, 0.12266414580204821, 0.17780926780733552, 0.10298287994497513, 0.05949944935527196, 0.13956791740603347, 0.20483395992303233, 0.1368354105247026, 0.14078599756069365, 0.6527945271042481, 0.3077725852545026, 0.4645751218926063, 0.5332121648921255, 0.443536565856709, 0.5182267016045408, 0.3291360106211515, 0.5273814742660189, 0.5997415540084463, 0.08864510250453184, 0.035754967825721184, 0.06723304699366439, 0.10750313387998245, 0.08194283722515117, 0.13218952781804605, 0.0598476406871965, 0.08166364293421668, 0.11278319616569132, 0.26147500312289396, 0.16583472509605213, 0.20745802933956503, 0.23558398728160523, 0.5885134626188844, 0.17779971912247272, 0.33350434877830426, 0.20927380482831792, 0.2730461506660701, 0.35399611263822595, 0.2699183754426735, 0.15483961238114663, 0.44532056822122956, 0.18342080812215678, 0.19576178980357284, 0.15866571732913093, 0.38348461557489066, 0.10250886045117025, 0.21579103808729527, 0.15695624841976608, 0.11431085246168893, 0.22015687219388724, 0.18683173549622312, 0.11316190706129381, 0.1779807644746737, 0.16143177341876014, 0.16895608889448122, 0.2169529031029065, 0.2130937330808963, 0.22004780009573133, 0.20334250905332996, 0.23427089200164797, 0.2035735328352134, 0.18920862379196546, 0.19678671105397638, 0.19133150328946602, 0.19692023249931345, 0.21103214404847204, 0.17857016781133406, 0.2025187013750661, 0.18737408785365917, 0.19652069724969357, 0.1958389819988422, 0.22599689096506914, 0.19130016703067, 0.1602184463890155, 0.13679814871810847, 0.16713720005700328, 0.17334637614053172, 0.06584598491828997, 0.12339228479591324, 0.10853741132592254, 0.11431608114590985, 0.16829602017595313, 0.6793863057915337, 0.11349705816030875, 0.08354766985707152, 0.08334965288133867, 0.10556005586030492, 0.04440092507982951, 0.11369984999402583, 0.16953011844204302, 0.09473128876989778, 0.17828346690757413, 0.18336837824412122, 0.1744740259150791, 0.19426748745470346, 0.18425009742316356, 0.167868394881598, 0.17781598571291957, 0.18514747108401797, 0.18169795466004124, 0.08846226574417493, 0.10441459789604146, 0.07272270785789692, 0.10154962424175085, 0.08080198212940048, 0.11803949289179272, 0.08913767264846006, 0.09099287282338264, 0.08663146486225792]}, "mutation_prompt": null}
{"id": "f5a7b7d6-ae72-4c34-a74f-12e96c03e9c7", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        hypercube_size = (self.upper_bound - self.lower_bound) / 4\n        shrink_factor = 0.85\n        success_rate_threshold = 0.2\n        success_count = 0\n        stagnation_counter = 0  # Initialize stagnation counter\n\n        while self.evaluations < self.budget:\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                direction = np.random.uniform(-hypercube_size, hypercube_size * (1 + self.evaluations / self.budget), self.dim)\n                candidate_position = position + direction\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position\n                    hypercube_size *= shrink_factor\n                    success_count += 1\n                    stagnation_counter = 0  # Reset stagnation counter on improvement\n                else:\n                    stagnation_counter += 1  # Increase stagnation counter if no improvement\n\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.1\n                hypercube_size /= shrink_factor * (1 + self.evaluations / self.budget)\n            success_count = 0\n\n            if stagnation_counter > 10:  # Trigger restart if stagnation persists\n                position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                stagnation_counter = 0  # Reset stagnation counter\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "AHSA_DN-RS augments AHSA-DN with dynamic restart strategy triggered by stagnation to improve convergence.", "configspace": "", "generation": 21, "fitness": 0.11240308249502183, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.11.", "error": "", "parent_id": "6a6691e3-0fff-41e8-b98d-ed8e92a17c59", "metadata": {"aucs": [0.22124867557034344, 0.2527067645491107, 0.2653587013444899, 0.22366067373741816, 0.18534977493777638, 0.20234351489601643, 0.18952017231120588, 0.19220164941752094, 0.270234199166008, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020307041799900727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04466748364516138, 0.05752046198703176, 0.04646761796380783, 0.060114947122241524, 0.053626795485669065, 0.05135300945144805, 0.04597098706351732, 0.05887678256773432, 0.04384119478843018, 0.03211636330025358, 0.04645784541582598, 0.031743707548059885, 0.03430600589517285, 0.047216224419579844, 0.03360197713094726, 0.033522715270478676, 0.045133235174344866, 0.032357512326245175, 0.11983076473222554, 0.1024632642790777, 0.9247008177027213, 0.8524059741330656, 0.14665758791323646, 0.11117831615400631, 0.08085612672245224, 0.08232072540802782, 0.12745703595872004, 0.09787440336781494, 0.1709455574449812, 0.12363329918716404, 0.14462698311928102, 0.14643295253478827, 0.08766383363001529, 0.0739341634766233, 0.09061705569449663, 0.1060859463113315, 0.17380271739927688, 0.18174823973918808, 0.17622137196831333, 0.14925273555319019, 0.13762369335065028, 0.1830590607097563, 0.1330026262332774, 0.1296137573531756, 0.16204075022191355, 9.999999999998899e-05, 0.0697052962213276, 0.028399289684766904, 0.026609931988952895, 0.09036284247818327, 0.01871745829877014, 0.029586112312615986, 0.09096108761438759, 0.010101651712568827, 0.020165390298779173, 0.019955757170092348, 9.999999999998899e-05, 0.07839709816197593, 0.06310997561480802, 0.023621354307879483, 0.007208654616602472, 0.1627446604720797, 0.0026550272610522674, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045520001119492726, 0.033504530241912134, 0.06273829911890683, 0.07210647014786387, 0.05680141514655446, 0.06531693161935859, 0.08224884187395343, 0.04625323712461504, 0.056815544542855756, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023378625762363603, 9.999999999998899e-05, 9.999999999998899e-05, 0.03942386599739345, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.23237884116761964, 0.20680971991973662, 0.2434103885370159, 0.26443010945860035, 0.28818553454872764, 0.2281005689267389, 0.20598304121594335, 0.25928019474605923, 0.20920996414349313, 0.054558333214997035, 0.03988840522335291, 0.05141644332077888, 0.0590758313036891, 0.05601557231072751, 0.053396669365033844, 0.049581574553365315, 0.04083468990882688, 0.058401267107450416, 0.13710287131628973, 0.1720365469806513, 0.12940782515745597, 0.16278255245055062, 0.1343861377856318, 0.12735647831570518, 0.13191486494061322, 0.14416761921343801, 0.12763667909084886, 0.17364131231043956, 0.15700715245750907, 0.19321148479411931, 0.17544831278560447, 0.16813804397751897, 0.16336922595174908, 0.16673324463687733, 0.1734419673461809, 0.1866188938673543, 0.12680193028364883, 0.10536674911490884, 0.13486264770170164, 0.12671921087229365, 0.15357860163769832, 0.13382334073784552, 0.1329746734019711, 0.10537490507139535, 0.13667348188082729, 0.13873373978441794, 0.14784399995358632, 0.15160522942115717, 0.1449175254006988, 0.14832284712210053, 0.16045710275453606, 0.15878758523609426, 0.15468088862464413, 0.15051997253452443, 0.14805580936159857, 0.14908800767038122, 0.15063219689232976, 0.15136267004484383, 0.15659242441182797, 0.1462475781240935, 0.1579726586974768, 0.17032962620485936, 0.16138834795542245, 0.1524085146619727, 0.17398283336878906, 0.16732074823853615, 0.27260373339539046, 0.14843062661373096, 0.4281558157810367, 0.27138737156538584, 0.25627283676522206, 0.2255816254753199, 0.1531877156553927, 0.1251504491609492, 0.14611093577317003, 0.16715055226565523, 0.19440594953773205, 0.16854292556972905, 0.16955102633581498, 0.2910190792807136, 0.1537637233522846, 0.18810813479837474, 0.18084807275222148, 0.18516116353576206, 0.21028649950226486, 0.185851062066678, 0.18069818410912708, 0.18771343233096982, 0.1899526160864694, 0.1815219432142593, 0.046701396010153995, 0.053606061331059385, 0.05675942144421353, 0.05295869505555695, 0.046968050900358826, 0.050627489955725635, 0.05676126340606735, 0.04763433206054757, 0.054341379631916986]}, "mutation_prompt": null}
{"id": "52c8cfd1-9443-4930-ace4-66a564982870", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 4\n        shrink_factor = 0.9  # Adjusted to improve balance\n        success_rate_threshold = 0.2\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size * (1 + self.evaluations / self.budget), self.dim)\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.1  # Increase adaptively based on success\n                hypercube_size /= shrink_factor * (1 + self.evaluations / self.budget)  # Dynamic adjustment\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhanced AHSA-DN by optimizing hypercube shrinkage factor to better balance exploration and exploitation.", "configspace": "", "generation": 22, "fitness": 0.22139475144454346, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.22.", "error": "", "parent_id": "6a6691e3-0fff-41e8-b98d-ed8e92a17c59", "metadata": {"aucs": [0.8949424476013267, 0.40473312290030317, 0.48245475321274833, 0.4580549367623218, 0.6112979356464475, 0.5561447561792143, 0.6039763203015289, 0.725590981808204, 0.3078179020052214, 0.02535435678232012, 0.07428806815869216, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13150569313534377, 0.12885067727544697, 0.10239327335661419, 0.11700322670130592, 0.12902183359458508, 0.09807135511840404, 0.11743520226136295, 0.0876723908167163, 0.11038900102628868, 0.07936002724996871, 0.08523062366302514, 0.058948738515203325, 0.07497531973906135, 0.05568274995882838, 0.10758165419625787, 0.06998183734071894, 0.08508467152284194, 0.07197379549942473, 0.9886110339224307, 0.9937609546950424, 0.9860668614760119, 0.9250772831965688, 0.9504047634520881, 0.8788263821433264, 0.9523809708584752, 0.9885398289547532, 0.9804620325982948, 0.23724494756483105, 0.21123945462115357, 0.45970613423884876, 0.23343583591571182, 0.40453632057658395, 0.3244305613028454, 0.6123338026928606, 0.5133871544769802, 0.23441068987614477, 0.26045625000558104, 0.17152297404168015, 0.36906059772971544, 0.24813230645791495, 0.15731520916555852, 0.21350488457396533, 0.8512187572000455, 0.8527916406340608, 0.4018379975002597, 0.13266276494831597, 0.09693471735190429, 0.1834105274346295, 0.2816000442379236, 0.18006746448666033, 0.19066319754799554, 0.25145273776767285, 0.19311917287674363, 0.15525330494121137, 0.16868387660450734, 0.13367907916850907, 0.10137322087859879, 0.11999265925861691, 0.176817924454841, 0.19064764990864602, 0.1388566455293272, 0.16490585540928115, 0.12961404358387718, 0.03521653268920277, 9.999999999998899e-05, 0.1639420225976348, 0.00843833732010102, 9.999999999998899e-05, 0.0029686535337510866, 0.0016780253597533656, 9.999999999998899e-05, 9.999999999998899e-05, 0.09094712994122478, 0.0483315842235974, 0.05631286096192256, 0.06654831380336002, 0.042639140095072414, 0.019017625939806382, 0.05796982165565567, 0.09686809680488095, 0.06039178670786627, 0.11614239607381538, 0.15616676367660343, 9.999999999998899e-05, 9.999999999998899e-05, 0.061989410190982586, 0.08615099506988477, 0.04191551860688136, 9.999999999998899e-05, 0.15521447474234684, 0.024565628651010196, 0.04262846193794445, 0.15926071403261466, 0.11609917798849023, 0.21596940023389966, 0.1559746068080483, 0.09088280359377332, 0.08843499792237308, 0.16886695153941655, 0.45111132621151717, 0.5026931149235916, 0.40103956842392985, 0.5070222573116354, 0.44171229211841734, 0.3409689882763691, 0.47386777437452376, 0.44143071524752486, 0.4756419159813575, 0.08900410473376397, 0.09405077254345373, 0.0805250990767361, 0.07557276965471116, 0.08617605497642666, 0.10053996231379148, 0.08235809883259138, 0.11167855437048935, 0.0955724307131186, 0.2491673355704348, 0.1922706709094909, 0.1971581285075833, 0.27538655104280374, 0.15572364925043458, 0.16325895427732795, 0.2631039871279891, 0.2457393515182602, 0.24428356197115508, 0.2584164562039738, 0.14180648179764632, 0.17580488041484732, 0.2688798410242248, 0.26053754154353836, 0.25993953898595323, 0.43033876360275514, 0.29048439974748486, 0.11867603481752254, 0.32154557423642605, 0.21226975670108372, 0.2472197935118583, 0.18429112309154105, 0.19545304222792237, 0.14500018324777864, 0.15422668392048566, 0.15843831389857455, 0.10666994837505972, 0.19141922890704433, 0.18531241042596935, 0.22408475779685255, 0.22493407451001435, 0.19751116418032444, 0.19961350074709017, 0.20985256301345634, 0.2016906577956905, 0.23564011005017982, 0.19564955976420928, 0.18703815251198808, 0.170418447529313, 0.16751250070679802, 0.2057208697232551, 0.25126119069203, 0.17747916690862453, 0.22162499245930956, 0.18360465795980074, 0.1075260847549061, 0.13706859191417664, 0.09930949959318891, 0.8518372804674591, 0.2124593368013028, 0.12308815291545583, 0.10813821489628739, 0.11907591552136998, 0.16742308691445085, 0.3491936620286842, 0.11286414568571324, 0.0831458596242759, 0.08322776589691894, 0.2133643067596911, 0.04423689629876737, 0.11295993625634926, 0.16795637864648538, 0.0948292244835015, 0.18989883624590975, 0.18617259699843958, 0.19051585633041923, 0.18899138925991732, 0.18704379643828184, 0.17500084720496467, 0.20326896135380335, 0.19405770802292066, 0.213344340076855, 0.08770392220687262, 0.12229309269897493, 0.07501795378574283, 0.07721665588404159, 0.08121467522099413, 0.09436112272292485, 0.11068236175327473, 0.09156511014826407, 0.08860799162711042]}, "mutation_prompt": null}
{"id": "e79c8db6-9d53-4f1f-b971-6ba81ca63bf3", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 4\n        shrink_factor = 0.85\n        success_rate_threshold = 0.2\n        success_count = 0\n\n        # Adaptive memory for hypercube size\n        past_best_values = []\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size * (1 + self.evaluations / self.budget), self.dim)\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            past_best_values.append(self.best_value)\n            if len(past_best_values) > 5:  # Maintain a fixed size for memory\n                past_best_values.pop(0)\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.1  # Increase adaptively based on success\n                hypercube_size /= shrink_factor * (1 + self.evaluations / self.budget)  # Dynamic adjustment\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhanced dynamic adjustment by integrating adaptive memory-based hypercube tuning for improved exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": 0.228719706484927, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.23.", "error": "", "parent_id": "6a6691e3-0fff-41e8-b98d-ed8e92a17c59", "metadata": {"aucs": [0.8949424476013264, 0.874760881588087, 0.4595142812467369, 0.4580549367623218, 0.9054515403904297, 0.37568484786657164, 0.8075202608580765, 0.681466045492982, 0.9020240629736275, 0.025360815364069644, 0.07281698649815804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1319854159177155, 0.08997324122478001, 0.0793519082150046, 0.11700322670130592, 0.09911619603372401, 0.11020774642078957, 0.07203425016535059, 0.12992781227200834, 0.06594268918435431, 0.09382071465492003, 0.12158751394792011, 0.05952076777111437, 0.08486295740915573, 0.09801896982423441, 0.11082279001477868, 0.08698367044424427, 0.10529583359854022, 0.0719725567282189, 0.9878209372720017, 0.993717498381214, 0.9875488075915042, 0.9675604445730918, 0.9380165022535366, 0.8683572897002801, 0.9210644090013546, 0.9885610977022097, 0.955567572478456, 0.27205856795235817, 0.210955725572624, 0.29003668638631075, 0.4711891411370178, 0.4045342428580231, 0.5079140692637152, 0.6110896423167249, 0.7364792254805682, 0.3912443637096732, 0.26045625000558104, 0.17152297404168015, 0.36906059772971544, 0.24813230645791495, 0.2156701176607252, 0.2230849399312892, 0.3843449327611834, 0.23950971712844216, 0.8646986258258386, 0.13318540648612942, 0.21410210980271627, 0.1593231862878789, 0.2816000442379236, 0.14096382057043788, 0.22171184541064926, 0.2519115189723573, 0.19111868131273313, 0.15525330494121137, 0.13409127523928854, 0.1686771582783464, 0.10137322087859879, 0.11999265925861691, 0.17225944633840484, 0.19076517329198128, 0.1385593344959909, 0.17553483508440026, 0.12961404358387718, 9.999999999998899e-05, 9.999999999998899e-05, 0.16587355717514962, 0.008420473154594599, 0.08029353420914265, 9.999999999998899e-05, 0.0016762417243325611, 9.999999999998899e-05, 9.999999999998899e-05, 0.09094712994122478, 0.04832615249635197, 0.056312860896550965, 0.06654564577590572, 0.06182180775017809, 0.018094132560396048, 0.022422488445431377, 0.0968742320245215, 0.08574104884724254, 0.10611373046278694, 9.999999999998899e-05, 0.04546761353650164, 0.0035707147841723685, 0.06379832698883925, 0.08004025879390486, 9.999999999998899e-05, 0.11552919825598962, 0.009979666543088572, 0.02420005011512072, 0.057238565621210546, 0.17634467870980575, 0.11609917798849023, 0.15717493940313876, 0.1995076006155695, 0.18142467291460362, 0.062267804290747186, 0.16827516658645258, 0.36912794939823257, 0.5013015089582854, 0.3236978671737464, 0.5789192733202617, 0.5256165008250848, 0.39589808213291033, 0.4740176518601915, 0.44143029076450413, 0.475353862595844, 0.0962932252700297, 0.1451488935003563, 0.11019448840142754, 0.07158621887484984, 0.1128343774387578, 0.13726634204257793, 0.08377827500318158, 0.08731883587290135, 0.08956968132325105, 0.2492239363719112, 0.1729729756817957, 0.19716099783060936, 0.2753956524097163, 0.1452671183364237, 0.16325895427732795, 0.2631001252110732, 0.24539489741356046, 0.27017039805306176, 0.2583258701013659, 0.2862320417414501, 0.17581877471043228, 0.2688798410242248, 0.2605375415435425, 0.25993953898536437, 0.43033876360269463, 0.2158050583418697, 0.11666538932640069, 0.22505088407848384, 0.2122695107477226, 0.2472197935118282, 0.18428832274588425, 0.19545304222795745, 0.14500018324619868, 0.15422668392048566, 0.16116847863629447, 0.07265708929565207, 0.19141922890707286, 0.21258083397689065, 0.22408475779685222, 0.22493407451001401, 0.1928149553244085, 0.19961350074709483, 0.20985256301345634, 0.19291726942573906, 0.23564011005018026, 0.19564955976420928, 0.1921233565378344, 0.1864881457745211, 0.17936450784525204, 0.2057208697232551, 0.25126119069203, 0.17747916690862453, 0.22162498181648493, 0.21855942042873966, 0.1075260847549061, 0.1370685881332111, 0.1661589673181756, 0.851837280467459, 0.21400003783293509, 0.12309157323806919, 0.10813823370692921, 0.11907591552136998, 0.16742304615200954, 0.3491936620286842, 0.1128642053006439, 0.08340270722489296, 0.08341699866233632, 0.10492424935096112, 0.044236896299036155, 0.11356905124353911, 0.16792717090969145, 0.09482847018910556, 0.1898988362459083, 0.18617259699844002, 0.1951560620910674, 0.18899138925991732, 0.18704379643828184, 0.17500084720496512, 0.2032689613538038, 0.18162455429089475, 0.21334434007729552, 0.08770392220687262, 0.12229309269897493, 0.07501795378574283, 0.07721665588404159, 0.09100451992905378, 0.09665943914949293, 0.11068236175327473, 0.09156511014826407, 0.08078475409504027]}, "mutation_prompt": null}
{"id": "baa681f9-3ea1-49fb-a816-f7cc31e70a04", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 4\n        shrink_factor = 0.85\n        success_rate_threshold = 0.2\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size * (1 + self.evaluations / self.budget), self.dim)\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.1  # Increase adaptively based on success\n                success_rate_threshold *= 0.95  # Dynamically adjust for better balance\n                hypercube_size /= shrink_factor * (1 + self.evaluations / self.budget)  # Dynamic adjustment\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhanced exploration-exploitation balance by incorporating dynamic adjustment of the success rate threshold.", "configspace": "", "generation": 24, "fitness": 0.228719706484927, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.23.", "error": "", "parent_id": "6a6691e3-0fff-41e8-b98d-ed8e92a17c59", "metadata": {"aucs": [0.8949424476013264, 0.874760881588087, 0.4595142812467369, 0.4580549367623218, 0.9054515403904297, 0.37568484786657164, 0.8075202608580765, 0.681466045492982, 0.9020240629736275, 0.025360815364069644, 0.07281698649815804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1319854159177155, 0.08997324122478001, 0.0793519082150046, 0.11700322670130592, 0.09911619603372401, 0.11020774642078957, 0.07203425016535059, 0.12992781227200834, 0.06594268918435431, 0.09382071465492003, 0.12158751394792011, 0.05952076777111437, 0.08486295740915573, 0.09801896982423441, 0.11082279001477868, 0.08698367044424427, 0.10529583359854022, 0.0719725567282189, 0.9878209372720017, 0.993717498381214, 0.9875488075915042, 0.9675604445730918, 0.9380165022535366, 0.8683572897002801, 0.9210644090013546, 0.9885610977022097, 0.955567572478456, 0.27205856795235817, 0.210955725572624, 0.29003668638631075, 0.4711891411370178, 0.4045342428580231, 0.5079140692637152, 0.6110896423167249, 0.7364792254805682, 0.3912443637096732, 0.26045625000558104, 0.17152297404168015, 0.36906059772971544, 0.24813230645791495, 0.2156701176607252, 0.2230849399312892, 0.3843449327611834, 0.23950971712844216, 0.8646986258258386, 0.13318540648612942, 0.21410210980271627, 0.1593231862878789, 0.2816000442379236, 0.14096382057043788, 0.22171184541064926, 0.2519115189723573, 0.19111868131273313, 0.15525330494121137, 0.13409127523928854, 0.1686771582783464, 0.10137322087859879, 0.11999265925861691, 0.17225944633840484, 0.19076517329198128, 0.1385593344959909, 0.17553483508440026, 0.12961404358387718, 9.999999999998899e-05, 9.999999999998899e-05, 0.16587355717514962, 0.008420473154594599, 0.08029353420914265, 9.999999999998899e-05, 0.0016762417243325611, 9.999999999998899e-05, 9.999999999998899e-05, 0.09094712994122478, 0.04832615249635197, 0.056312860896550965, 0.06654564577590572, 0.06182180775017809, 0.018094132560396048, 0.022422488445431377, 0.0968742320245215, 0.08574104884724254, 0.10611373046278694, 9.999999999998899e-05, 0.04546761353650164, 0.0035707147841723685, 0.06379832698883925, 0.08004025879390486, 9.999999999998899e-05, 0.11552919825598962, 0.009979666543088572, 0.02420005011512072, 0.057238565621210546, 0.17634467870980575, 0.11609917798849023, 0.15717493940313876, 0.1995076006155695, 0.18142467291460362, 0.062267804290747186, 0.16827516658645258, 0.36912794939823257, 0.5013015089582854, 0.3236978671737464, 0.5789192733202617, 0.5256165008250848, 0.39589808213291033, 0.4740176518601915, 0.44143029076450413, 0.475353862595844, 0.0962932252700297, 0.1451488935003563, 0.11019448840142754, 0.07158621887484984, 0.1128343774387578, 0.13726634204257793, 0.08377827500318158, 0.08731883587290135, 0.08956968132325105, 0.2492239363719112, 0.1729729756817957, 0.19716099783060936, 0.2753956524097163, 0.1452671183364237, 0.16325895427732795, 0.2631001252110732, 0.24539489741356046, 0.27017039805306176, 0.2583258701013659, 0.2862320417414501, 0.17581877471043228, 0.2688798410242248, 0.2605375415435425, 0.25993953898536437, 0.43033876360269463, 0.2158050583418697, 0.11666538932640069, 0.22505088407848384, 0.2122695107477226, 0.2472197935118282, 0.18428832274588425, 0.19545304222795745, 0.14500018324619868, 0.15422668392048566, 0.16116847863629447, 0.07265708929565207, 0.19141922890707286, 0.21258083397689065, 0.22408475779685222, 0.22493407451001401, 0.1928149553244085, 0.19961350074709483, 0.20985256301345634, 0.19291726942573906, 0.23564011005018026, 0.19564955976420928, 0.1921233565378344, 0.1864881457745211, 0.17936450784525204, 0.2057208697232551, 0.25126119069203, 0.17747916690862453, 0.22162498181648493, 0.21855942042873966, 0.1075260847549061, 0.1370685881332111, 0.1661589673181756, 0.851837280467459, 0.21400003783293509, 0.12309157323806919, 0.10813823370692921, 0.11907591552136998, 0.16742304615200954, 0.3491936620286842, 0.1128642053006439, 0.08340270722489296, 0.08341699866233632, 0.10492424935096112, 0.044236896299036155, 0.11356905124353911, 0.16792717090969145, 0.09482847018910556, 0.1898988362459083, 0.18617259699844002, 0.1951560620910674, 0.18899138925991732, 0.18704379643828184, 0.17500084720496512, 0.2032689613538038, 0.18162455429089475, 0.21334434007729552, 0.08770392220687262, 0.12229309269897493, 0.07501795378574283, 0.07721665588404159, 0.09100451992905378, 0.09665943914949293, 0.11068236175327473, 0.09156511014826407, 0.08078475409504027]}, "mutation_prompt": null}
{"id": "08331fc3-500e-40c5-a66d-848ecc5a9790", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 4\n        shrink_factor = 0.85\n        success_rate_threshold = 0.2\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size * (1 + self.evaluations / self.budget), self.dim)\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.1  # Increase adaptively based on success\n                hypercube_size /= (shrink_factor * (1 + self.evaluations / self.budget * 0.5))  # Dynamic adjustment\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhanced AHSA-DN by introducing adaptive step-size modification based on both budget usage and success rate.", "configspace": "", "generation": 25, "fitness": 0.20959333857286405, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.22.", "error": "", "parent_id": "6a6691e3-0fff-41e8-b98d-ed8e92a17c59", "metadata": {"aucs": [0.7074621566307285, 0.7028116221410898, 0.47653651573880984, 0.42691680493522033, 0.6382529994069513, 0.3880469900977077, 0.3159322248967176, 0.4534690398653426, 0.6256737062065265, 0.03615346391371099, 0.004446413076980238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11534729232010776, 0.09514175780304668, 0.09856785429968218, 0.08730033526324621, 0.09278212167936395, 0.1226051048264033, 0.07132686336024907, 0.11750953032963585, 0.07480206499696285, 0.07693843645508569, 0.0900271881844048, 0.06186090075654216, 0.07102627228589276, 0.09217874444325169, 0.08600401236639132, 0.07953299369347389, 0.07083942164201784, 0.12035098570535374, 0.9878245857713877, 0.9937195276819635, 0.987548010524722, 0.9705951323870076, 0.9511925407753707, 0.924475718744747, 0.9542216493284761, 0.9885690510288313, 0.965457644290705, 0.448962920280936, 0.1968411660308078, 0.2134622440594207, 0.3867161681552941, 0.22547055434247654, 0.5338622722025503, 0.6069064662796356, 0.365043287955801, 0.2652672989983418, 0.2292142927124866, 0.22417957430683444, 0.6002391674988155, 0.5750248959323958, 0.2730854246064891, 0.2835816759642539, 0.25162463280684966, 0.18825971591482504, 0.2386280576294021, 0.11791811204063651, 0.24212120235646917, 0.1814552670252666, 0.1794583761794667, 0.1358426066455779, 0.14147090216413583, 0.21015863373436094, 0.24053595798482486, 0.1466593447466974, 0.1647825447404876, 0.12774985833699193, 0.09612331301308863, 0.09146204278503589, 0.17570404347501967, 0.17026021710129557, 0.09995701733000695, 0.18719343742239802, 0.12710582098561063, 0.04223188904463626, 9.999999999998899e-05, 0.03617788833239066, 0.0014643222374514098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005360686072559684, 9.999999999998899e-05, 0.09892861850027201, 0.05140734680099868, 0.05119471598326397, 0.025714580142891297, 0.07804645392763743, 0.023081117930946693, 0.052426460071933745, 0.08672359793876094, 0.07218125018812571, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02728476697362403, 9.999999999998899e-05, 0.004442975951373218, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020018059811568678, 0.09515202868451655, 0.1727548418726137, 0.10022207039997322, 0.1220900794852885, 0.09643423605277057, 0.09574864049528131, 0.05902563848717013, 0.0814373036235645, 0.36565445714107425, 0.4458897887604759, 0.3004365281959318, 0.47669027502043326, 0.3811594604911588, 0.3739363955200289, 0.48823159164461527, 0.46681887501454034, 0.4672794917288188, 0.10013940413043387, 0.13130715054095143, 0.09993910960869612, 0.07519343367776943, 0.08906936401779841, 0.08825240096130016, 0.09869827118954966, 0.10785544325262542, 0.09783371691138709, 0.15971127744003877, 0.1738486777148528, 0.1685515396943963, 0.13226351751924026, 0.21627396707335111, 0.3038988680068516, 0.16720538723657086, 0.31556634897745284, 0.20198451984651944, 0.39011392796456856, 0.3228029097509598, 0.2925596963742807, 0.3350691527505092, 0.35793853457301517, 0.17258710922712928, 0.319510599214629, 0.19449043585103576, 0.1252274149169469, 0.23552244992498506, 0.184689307326665, 0.2177463485582184, 0.15658794657239283, 0.18929713394265868, 0.263654473742603, 0.17468154837118177, 0.1707308638060886, 0.1042223809474937, 0.18917886756776392, 0.2123801923129962, 0.2198393048941133, 0.17720947695392697, 0.20552811404950666, 0.22537755966684214, 0.23141314637744603, 0.19463024188597733, 0.21607756616116336, 0.22136256062287063, 0.1998428973276043, 0.18511655318798048, 0.1767942008764266, 0.16849972978892125, 0.17464144352693312, 0.17313533353367838, 0.17991166807977022, 0.20053872599161837, 0.10751862083085417, 0.13693363672803716, 0.1658976982945658, 0.7012832970518191, 0.21393668600229454, 0.12269491157550494, 0.10804143361361784, 0.1190182020464079, 0.1670372310080125, 0.3464678592116056, 0.11269065595295302, 0.08337203179800912, 0.08340467717910593, 0.10490650277678648, 0.04421803597581819, 0.11348515290430172, 0.16899229116125503, 0.09472280189149607, 0.18587271507090786, 0.18390942007301925, 0.18728059969262456, 0.1855194794379338, 0.18592286734667518, 0.18146398721943546, 0.19053009464556803, 0.17992392823754233, 0.17848442793874786, 0.09548740502691366, 0.1068587544008851, 0.07898691608382757, 0.08520278779145973, 0.08189166856372321, 0.10242606613908123, 0.09642155406857345, 0.06991218045827863, 0.08644433245982674]}, "mutation_prompt": null}
{"id": "b39600d5-0114-4b9c-9674-14c2ef370f19", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 4\n        shrink_factor = 0.85\n        success_rate_threshold = 0.2\n        success_count = 0\n        cumulative_improvement = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size * (1 + self.evaluations / self.budget), self.dim)\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    cumulative_improvement += self.best_value - candidate_value\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.1 + cumulative_improvement / (1 + self.evaluations)  # Dynamic improvement-based adaptation\n                hypercube_size /= shrink_factor * (1 + self.evaluations / self.budget)  # Dynamic adjustment\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhance AHSA-DN by dynamically adapting the shrink factor based on cumulative improvement rate.", "configspace": "", "generation": 26, "fitness": 0.10137035633389603, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.21.", "error": "", "parent_id": "6a6691e3-0fff-41e8-b98d-ed8e92a17c59", "metadata": {"aucs": [0.946620963390377, 0.22515029025630984, 0.2791848728639581, 0.062300919546389166, 0.18242887125655538, 0.07390926931574526, 0.11296461381752465, 0.1776360749752266, 0.07092095103745011, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03865005152049761, 9.999999999998899e-05, 9.999999999998899e-05, 0.015404969632780596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022727348693573513, 9.999999999998899e-05, 0.03623986971117488, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9975335045873949, 0.9709000245763423, 0.9915892931568118, 0.9975850397573042, 0.9865532695597236, 0.9871935488266971, 0.9196440463705475, 0.9957719676503911, 0.9831281228420794, 0.06272491854888962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0618516450908172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08587888925451392, 9.999999999998899e-05, 9.999999999998899e-05, 0.09514675358550995, 9.999999999998899e-05, 9.999999999998899e-05, 0.0214191082179761, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013165498456432778, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13384365577648694, 0.05831027653144649, 0.46746235752730103, 0.14561530465644734, 0.060646469967310046, 0.016070757393734536, 0.47489978239647046, 0.11511574461677943, 0.11284892958877968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010490639607674712, 9.999999999998899e-05, 0.027838343405534816, 0.009719193272521243, 0.000756240545100817, 9.999999999998899e-05, 0.12959580038852037, 0.12385372207409129, 0.16856336714612297, 0.10511277577987999, 0.07216706687540264, 0.15314607097443533, 0.09695306000431925, 0.1295563812458429, 0.0665084324276135, 0.17523791950455903, 0.10676558983809825, 0.3041250559596932, 0.28711618476287404, 0.18460166315944138, 0.10079330034741163, 0.24870215567119358, 0.12218232969968379, 0.08714734279393266, 0.10291910218963929, 0.07232463871785, 0.03101329137728248, 0.18123789492546272, 0.026593466077026617, 0.0560798244903874, 0.11989252858317356, 0.08820643560629648, 0.04593231071296755, 0.23406722127753243, 0.1123354182482239, 0.16430514514874772, 0.17667898289942296, 0.1006401755115478, 0.1214373039048654, 0.19523133878886567, 0.07894234268257694, 0.17093151133251538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14269825640592548, 9.999999999998899e-05, 9.999999999998899e-05, 0.14535893450549142, 9.999999999998899e-05, 9.999999999998899e-05, 0.09099085899277559, 0.1086540937035948, 0.07573361412239843, 0.1544896488702645, 0.06411303331582108, 0.06192272503240215, 0.10135005525128327, 0.11530511306722313, 0.07420520481590431, 0.07514748149814199, 0.0934059909785081, 0.06893799726099947, 0.04783260338336581, 0.04658391241300963, 0.0748969919642164, 0.04231660029733686, 0.12342752871784324, 0.09475681275452497, 0.234489463363739, 0.18774326141019426, 0.19388858560717404, 0.18473819528448143, 0.19007259431199186, 0.18705791276146433, 0.24453492206705307, 0.2793273739212542, 0.1980197690442822, 0.0656621566668999, 0.0035706544649870553, 0.0545835234230686, 0.050842681392158195, 0.0053151738013466066, 0.03229513534058748, 0.0894762301861487, 0.04660797400718908, 0.04680436080441286]}, "mutation_prompt": null}
{"id": "89adfea4-ccf0-45f7-881a-826a499aace2", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 4\n        shrink_factor = 0.85\n        success_rate_threshold = 0.2\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            mutation_prob = 0.1 + 0.9 * (self.evaluations / self.budget)  # Adaptive mutation probability\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(\n                    -hypercube_size * mutation_prob, hypercube_size * (1 + self.evaluations / self.budget), self.dim)\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.1  # Increase adaptively based on success\n                hypercube_size /= shrink_factor * (1 + self.evaluations / self.budget)  # Dynamic adjustment\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhanced AHSA-DN by incorporating adaptive mutation probability to improve exploration.", "configspace": "", "generation": 27, "fitness": 0.06901534087601913, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.14.", "error": "", "parent_id": "6a6691e3-0fff-41e8-b98d-ed8e92a17c59", "metadata": {"aucs": [0.08800486696802168, 0.0629351697762166, 0.1098309481811004, 0.02674504510657283, 0.05353277036545201, 0.05130669829458623, 0.04986403320775967, 0.05704728055986685, 0.04254232161690197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009809421402671048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011766973405926362, 0.010033875558824734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0395437245839908, 0.007916341856281206, 0.05641585956730577, 0.0017172247791289452, 0.006777000880171746, 0.03939888337737518, 0.0053654640716462865, 0.004644204242900907, 0.04147233941434736, 0.9296666893375626, 0.9178494464465587, 0.970377553061547, 0.032890251653843405, 0.8089956161224654, 0.6543074231143273, 0.02386097905199991, 0.05806757615465907, 0.6173833010281295, 9.999999999998899e-05, 0.002671179574089022, 9.999999999998899e-05, 9.999999999998899e-05, 0.05950700196070846, 0.014849565350075089, 0.03993322012311451, 9.999999999998899e-05, 9.999999999998899e-05, 0.06915505614089179, 0.07499984295713147, 0.05267613013572481, 0.09689672564803509, 0.003167243659235486, 0.06145459013322818, 0.007335944107820236, 0.004506111887350395, 0.06619830107326019, 9.999999999998899e-05, 9.999999999998899e-05, 0.012771879831802502, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013034499071484462, 0.0002506698993601786, 9.999999999998899e-05, 0.06579846157401914, 0.016868065323043302, 0.019722072623728493, 0.07583380276444784, 0.031124186504896123, 0.002933607001987415, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003449743200768518, 9.999999999998899e-05, 0.057476352852646406, 0.024894607197612606, 0.16882709190805856, 0.09396956370126242, 0.10839020724196802, 0.07904280456625745, 0.11194672914665793, 0.11270792871535795, 0.05942391181010609, 0.017662546848310368, 0.014929050074034222, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012828423479882556, 9.999999999998899e-05, 9.999999999998899e-05, 0.07490977567461354, 0.10422029897260676, 0.14205937957978332, 0.21155803192748301, 0.1555072761176831, 0.12700308666284021, 0.06435732785645665, 0.11407173979580343, 0.21490327134138065, 0.10983168070731009, 0.15300075560069215, 0.10011260534697553, 0.1558289753284462, 0.13560124248777206, 0.114771910010811, 0.13810281034846017, 0.12401153152936328, 0.12915326297340268, 0.06034017569636141, 0.08190607853534637, 0.051360189133723866, 0.06482586132544388, 0.0716917285199965, 0.05673485755332419, 0.08521400400326895, 0.08354039811913716, 0.06629205684762696, 0.1259469336445891, 0.10147476216848395, 0.100445134894667, 0.1496320050107417, 0.10107165285002173, 0.11171362664430451, 0.14994518071322127, 0.08277136814939456, 0.11664445109015054, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04396837963915645, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16485751035687224, 0.05715371256348567, 0.03717882637119074, 0.09217177682329636, 0.07615159926151249, 0.06793680298791382, 0.08795513097550867, 0.1623824356399256, 0.12257445784858378, 0.07061489541034316, 0.054015616682666634, 0.057789836758602386, 0.015416744326659737, 0.048855114354202644, 0.026801119948585583, 0.10540967479303454, 0.06900870655905711, 0.17613368777318683, 0.17823819596452395, 0.20772801981583788, 0.18855680042715817, 0.17798568630667155, 0.17968042272834905, 0.18328495034672954, 0.17910054162144695, 0.19882590055080684, 0.18226300437597098, 0.031051316860219003, 0.003135877474257587, 0.0479984936849398, 0.019321425904482714, 0.024390956300804678, 0.016883480616834423, 0.022030153429607013, 0.02928828657154736, 0.027057839859869315]}, "mutation_prompt": null}
{"id": "3b14ba6c-8760-4b4e-9189-7f78a864adc6", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 4\n        shrink_factor = 0.85\n        success_rate_threshold = 0.2\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size * (1 + np.tanh(self.evaluations / self.budget)), self.dim)  # Line changed\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.1  # Increase adaptively based on success\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / self.budget))  # Line changed\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhanced AHSA-DN by dynamically adjusting hypercube size progression using a sigmoid-based exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": 0.22894532754346006, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.24.", "error": "", "parent_id": "6a6691e3-0fff-41e8-b98d-ed8e92a17c59", "metadata": {"aucs": [0.8941261181171853, 0.78310570578219, 0.5337104930897658, 0.45804498539802285, 0.9052646689947154, 0.38052922645581877, 0.798467682527022, 0.7644334153640615, 0.9088976704691176, 0.005152141852167058, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13504207400225365, 0.08942114293959313, 0.07921490675438092, 0.1165176443490834, 0.09890947731047894, 0.110148368467066, 0.07203447257005702, 0.12930589240843515, 0.0656345445500206, 0.09169836531092657, 0.12165286025406308, 0.05862645854066961, 0.09385938230836743, 0.09845423935526665, 0.08041523580174781, 0.08539036524855914, 0.08828818304443453, 0.06998676411833071, 0.9878209370529307, 0.993717498375166, 0.987548807426666, 0.9675607773072427, 0.9380509107419477, 0.8683976565789325, 0.9210745023240203, 0.9885610978653084, 0.955568334302991, 0.27194600818486825, 0.21095586242208897, 0.2915414640109032, 0.3686100475132471, 0.41090509451941937, 0.6861324360574699, 0.5600417827548103, 0.57749135253472, 0.39858678589298, 0.25944673677901875, 0.17152297404168015, 0.36906059772971544, 0.24813230645791495, 0.2156701176607252, 0.2230849399312892, 0.7784334520792555, 0.23950971712844216, 0.8646986258258386, 0.13135331392503447, 0.21417019910441382, 0.14325437075623504, 0.29638826237973703, 0.14110399780356764, 0.19329914484509192, 0.24572096537933652, 0.19106590638329224, 0.15565063470188067, 0.144021318039793, 0.1691519089082767, 0.1013807898798803, 0.159913663369463, 0.17078795122131618, 0.18443005806890989, 0.21359082010802033, 0.17544714972753717, 0.12951699619373835, 9.999999999998899e-05, 9.999999999998899e-05, 0.16581156370960548, 0.004383579437070684, 0.07915036712533363, 9.999999999998899e-05, 0.00031822601478981305, 9.999999999998899e-05, 9.999999999998899e-05, 0.07920400004056138, 0.05543078051445771, 0.05995136662371481, 0.05027571180261314, 0.06842829099637815, 0.02198713118413942, 0.01988306004511653, 0.09606835361096222, 0.08647752693637867, 0.1288428566714449, 9.999999999998899e-05, 0.04738085162328265, 0.06928722404677645, 0.06435102858611774, 0.07589168540320601, 9.999999999998899e-05, 9.999999999998899e-05, 0.047446705078512785, 0.018816284914343173, 0.05867265123307719, 0.17620378026413597, 0.11597121849922964, 0.12764136824455274, 0.15428722403139106, 0.11601219584514033, 0.10787590830551086, 0.22454897163601106, 0.36812648813067406, 0.4648373261468871, 0.3281187371868598, 0.5377091502440938, 0.4656489961681787, 0.40595430072398886, 0.4246289129403459, 0.4244417515559957, 0.5088359767446706, 0.08749665917591065, 0.14446873738445354, 0.1110110558413977, 0.07278185366949841, 0.11303081059418296, 0.13359007338651518, 0.10634512511757388, 0.08487165959838527, 0.09092228114561263, 0.24497164542941308, 0.17006035596632896, 0.21634302581068865, 0.3306140336682759, 0.2240672433619758, 0.15928089829821568, 0.27328247694193164, 0.21978959029514966, 0.23838610593564158, 0.276028955252549, 0.29670427152062206, 0.19044621363545855, 0.2596517374564534, 0.2785197068941423, 0.25898617206558194, 0.33068614352421843, 0.22128039880249728, 0.11666982661215664, 0.20901624378550676, 0.18611561085065098, 0.236229008865257, 0.1810734782893566, 0.18231162796732903, 0.13823200565065685, 0.162309504275292, 0.17749548540048965, 0.07264783455185575, 0.23241853793584477, 0.21782157512232447, 0.18812618446891094, 0.20927599157758237, 0.2100172669509639, 0.1988710076433503, 0.17441244953942825, 0.19443527112202896, 0.21398969893005437, 0.19632650866301005, 0.19210493694674968, 0.18166845915399066, 0.17514866285621122, 0.20832957300146926, 0.2513449946123637, 0.172549400664612, 0.22160650264679393, 0.21661012875665542, 0.10752608784582296, 0.13706273230545318, 0.16617503673155642, 0.8515258222819319, 0.21400113151904887, 0.12309160837944799, 0.10813725149592168, 0.12193384907907512, 0.16742352463227272, 0.3443912321035725, 0.11286353570933316, 0.08340327508818868, 0.08340493475632849, 0.10492430203819636, 0.04423688630090361, 0.11356884293594904, 0.1679320883316805, 0.09483323437805757, 0.1903719200881293, 0.1794870010573053, 0.19540337360422988, 0.18745277131660742, 0.1765785851591185, 0.18941412975495997, 0.2058154102881541, 0.18472062745197182, 0.21095882040350344, 0.0879628931425821, 0.13128701214246408, 0.07840029874044652, 0.07887919524355369, 0.08890294006041899, 0.10327341115179856, 0.11185808161338029, 0.08783263147138809, 0.08522895122658503]}, "mutation_prompt": null}
{"id": "0cbde9c8-4f28-45c5-83ca-065c45cf11f4", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 4\n        shrink_factor = 0.85\n        success_rate_threshold = 0.2\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Use cosine similarity with the best direction for exploration\n                random_direction = np.random.uniform(-1, 1, self.dim)\n                norm = np.linalg.norm(random_direction)\n                if norm != 0:\n                    random_direction /= norm\n                direction = random_direction * hypercube_size * (1 + np.tanh(self.evaluations / self.budget))  # Line changed\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.1  # Increase adaptively based on success\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / self.budget))  # Line changed\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhanced AHSA-DN by using cosine similarity for direction selection to improve convergence speed.", "configspace": "", "generation": 29, "fitness": 0.19590616745073638, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "3b14ba6c-8760-4b4e-9189-7f78a864adc6", "metadata": {"aucs": [0.37324052653919426, 0.22919021421829167, 0.7933294734979497, 0.31933926568194737, 0.24782804535257852, 0.6245754767637834, 0.4407243692250715, 0.23366565214548896, 0.5545028243711916, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07940833595000807, 9.999999999998899e-05, 0.1048895593982403, 0.09058032212772815, 0.09712434901160427, 0.09786827601503267, 0.07807891388023869, 0.09202015960733856, 0.08644497860232003, 0.09297696807687394, 0.06576138183136393, 0.07187763080063492, 0.07450054497282, 0.09342801378863042, 0.09114686189097121, 0.08042237174791411, 0.0933251127779764, 0.09953381474554934, 0.03857851748923491, 0.06384958476356883, 0.9879104129434065, 0.993594009701155, 0.9875592996869551, 0.9487757431169125, 0.9041239908921589, 0.23271294999873293, 0.9191931006148666, 0.9805941128896866, 0.9759934036909369, 0.11691083136068225, 0.5358360565562748, 0.30210185401217293, 0.39486385258379997, 0.5969267904184083, 0.31089645645858677, 0.21422983717007904, 0.10724533397020874, 0.27305915321610297, 0.23162329012108795, 0.13755797437746753, 0.1186085920446236, 0.20398029022138398, 0.22100057808115847, 0.17936541928487326, 0.17881333791465426, 0.1695218118739905, 0.22834991277285266, 0.1698491215803557, 0.1808341143334744, 0.2573745369438035, 0.029542592784046584, 0.19548220506600922, 0.13954177801233925, 0.11184132015603121, 0.17820841372195462, 0.20569128893130495, 0.19034770720078342, 0.17839060229599601, 0.08272673388382046, 0.0685902555037925, 0.20663329881804882, 0.16266941784644928, 0.056132015069429, 0.0994057233425063, 0.12945914361101207, 9.999999999998899e-05, 9.999999999998899e-05, 0.05739933748003656, 0.005274359227969927, 0.13345975042153602, 9.999999999998899e-05, 9.999999999998899e-05, 0.016500624515182083, 0.07615145918298916, 0.03267152697779896, 0.058971907264743106, 0.0793574343023663, 0.11010499689496334, 0.02881960392734051, 0.008661939705206345, 0.18199932139988217, 0.032097985149747044, 0.05264659429219298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01214756901281866, 0.1653038603667525, 0.11736344325802062, 0.07229421808870173, 0.06705613660933618, 0.03171001337541568, 0.12159954863161271, 0.0745500617031617, 0.09493963647790427, 0.2408422508358532, 0.08071659369405138, 0.14239771057126782, 0.020998885289689295, 0.16989455052983737, 0.06444866017868223, 0.3254262604611383, 0.2155666039213221, 0.33652942420967025, 0.5614631451597234, 0.559305279739798, 0.5542976840557632, 0.5841987616261208, 0.5088535027270755, 0.3241565474408571, 0.11137344210752276, 0.09762239417039564, 0.10026473516683454, 0.08499228703034956, 0.12312633902211523, 0.09003576918754042, 0.10298124408408071, 0.08996447310610511, 0.09182104715510464, 0.536819816430379, 0.18955944708821737, 0.20658392718326568, 0.2282669035913647, 0.24527127457181463, 0.22681247538412252, 0.1360722804647827, 0.138748564604531, 0.146921976530768, 0.25645574002383287, 0.21438657719920873, 0.16184759881308908, 0.24575074733732616, 0.20585658319122324, 0.1255945040569868, 0.2268483753021393, 0.2362747318702373, 0.13825200665127302, 0.14368631974066282, 0.13270638642800459, 0.058783825107592946, 0.18514910519261463, 0.11027109873800511, 0.14195420451200225, 0.2409917992213525, 0.25106266677750544, 0.1247821632780387, 0.19878088056947707, 0.1846707443997354, 0.22325641238738747, 0.2203176924799447, 0.20963703142672085, 0.20127525050149597, 0.2298169112508872, 0.228198192002521, 0.17645853126435773, 0.17325665582766103, 0.1712542417310724, 0.18092523170741182, 0.1717717500966397, 0.18453875264646336, 0.1946869188000786, 0.185585035188493, 0.1687799493986979, 0.17560685630099304, 0.1575059327475763, 0.13667415606910605, 0.11141437808387344, 0.5467638883125205, 0.11265226962034813, 0.12200161095773998, 0.10862526820310381, 0.11913131107236385, 0.16617040114188242, 0.4244925093585107, 0.11308806046341757, 0.08269735694151081, 0.3903837638844626, 0.2142577485054673, 0.04257289816645893, 0.11261367900424635, 0.16963557163635667, 0.30159425595651357, 0.1834910187966593, 0.18289744120588025, 0.18078165243254152, 0.1788448550711319, 0.17684298963878176, 0.185311206519157, 0.17909520993793338, 0.18202529975024262, 0.1790462653357645, 0.07250467679097705, 0.11817108747641991, 0.08218642758069294, 0.10239227049928723, 0.08394159001848434, 0.09928946795977411, 0.08422007760677552, 0.08831880033761486, 0.07342950492060374]}, "mutation_prompt": null}
{"id": "8fa0b690-47f8-4c9e-a3ca-9467dbdfa92d", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 4\n        shrink_factor = 0.85\n        success_rate_threshold = 0.2\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))  # Line changed\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.1  # Increase adaptively based on success\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / self.budget))  # Line changed\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Improved AHSA-DN by incorporating adaptive direction scaling based on cosine similarity for enhanced local search precision.", "configspace": "", "generation": 30, "fitness": 0.24240413750139875, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.24.", "error": "", "parent_id": "3b14ba6c-8760-4b4e-9189-7f78a864adc6", "metadata": {"aucs": [0.8293291787915678, 0.834286471759421, 0.8441763155686909, 0.8046301633297781, 0.7803292657463526, 0.8568947292401321, 0.8992628060527198, 0.8727746727469241, 0.8006756475024492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12041831939666969, 0.10481789541422659, 0.07024198432753581, 0.11079662951926039, 0.06680516167613026, 0.10672497629278255, 0.08114200665302274, 0.13465785005207742, 0.080795225568706, 0.07746281028227076, 0.10174321866317226, 0.05662416908329193, 0.10979693716475047, 0.0733828504006977, 0.12107236204757177, 0.10584828812939162, 0.08012253129022628, 0.08483251296841954, 0.9878097104168346, 0.993714699940208, 0.987546181968135, 0.9487388660550318, 0.9119476517949149, 0.18121614025109345, 0.9215140397437415, 0.9885657378705703, 0.9519320142920972, 0.4364439069924384, 0.6241535544860373, 0.49432876718306595, 0.37204662263500654, 0.5361870371472595, 0.6993513580125792, 0.6337964600897618, 0.4883577454737156, 0.5104936715334814, 0.3326657736144041, 0.1406509966098558, 0.22782415546068358, 0.1941410789057635, 0.2154749745195058, 0.16161923350946072, 0.23049521288218466, 0.2253961963630008, 0.8530945139440462, 0.22962011570389296, 0.20144356862153845, 0.1821900342113708, 0.21268649837480913, 0.1581893444930349, 0.1587609457875504, 0.16434933611161673, 0.2009028255579589, 0.19676410795363597, 0.1277560450491093, 0.1285334932116834, 0.3827748335243589, 0.11067343350084446, 0.2038251800150449, 0.1553983880583415, 0.16356220752308104, 0.2454417110952073, 0.14420997976320227, 9.999999999998899e-05, 9.999999999998899e-05, 0.12104641207754052, 0.03458378461505329, 0.0698207668822508, 9.999999999998899e-05, 0.007757281224809454, 9.999999999998899e-05, 9.999999999998899e-05, 0.06764096186056268, 0.05958458704007896, 0.061896233619910035, 0.07008444376385925, 0.039081533970976134, 0.011288192075735948, 0.022168681388510025, 0.02955863049696239, 0.0532965278244244, 0.18053015002534412, 0.03449639969372842, 0.03406869002056023, 0.06474878111734961, 0.096950680207326, 0.11314024023569036, 0.08048559943052913, 0.12555102327012824, 0.21868281313135862, 0.051619035539125835, 0.10226570853826211, 0.2289809685627321, 0.1597477053200126, 0.1307239582368055, 0.16850068030301135, 0.20996865259328568, 0.19711093717749972, 0.13722686142078033, 0.44616788219376424, 0.5286236681219247, 0.4796111008242211, 0.5168290753948253, 0.5152154809453491, 0.47259733897244016, 0.4842185681396598, 0.4824219968769833, 0.5442196848208556, 0.10764272893805005, 0.06897709519657114, 0.1671797282468258, 0.0960060445873342, 0.1331129921433598, 0.11156063336883382, 0.10640554977768968, 0.11626653564277223, 0.09456857949668573, 0.27838391897233716, 0.21856841139167726, 0.23240934277082592, 0.18642280527525024, 0.1753102434885001, 0.29172306709034734, 0.18808297964648002, 0.3459970369463341, 0.198162797649043, 0.3220060067564019, 0.2364378044614739, 0.1658174545774035, 0.23303862892543847, 0.24176166888030393, 0.4148171965810591, 0.23285148881885842, 0.19830859335066964, 0.11364413510458382, 0.24475853868746256, 0.21092859702578393, 0.3087543091162295, 0.196287059952726, 0.2048981286232665, 0.17253968847996093, 0.27652433967674195, 0.15286064263808297, 0.03493286110792326, 0.23080870988156632, 0.19361968546376662, 0.24208113069342485, 0.18773459459644548, 0.21241537147188017, 0.21754867769696618, 0.28597726602823736, 0.25428663964849796, 0.16901631018448193, 0.17509104371797402, 0.172487785078542, 0.21163703025404057, 0.1838115263827328, 0.19123051473143715, 0.19404282867523148, 0.19157997732193677, 0.24001690635810724, 0.21876968578511202, 0.10838886223590016, 0.13626024126639735, 0.1662779355760614, 0.8753452758140985, 0.2138997270035391, 0.12321328952351673, 0.10851780764741303, 0.12300103207678581, 0.1673174857702634, 0.7207548120657943, 0.11322666818402305, 0.08338484162799764, 0.0834403309782592, 0.10494331206866914, 0.04416320130871465, 0.11347328155085501, 0.05926141469019275, 0.0948465088778978, 0.2315500537088716, 0.1909240589689546, 0.1936011572044345, 0.2025027376618812, 0.19933433569182524, 0.20099032092834745, 0.2189018118628695, 0.22049149428674286, 0.23231257999937505, 0.09661854281680948, 0.1739334375185515, 0.08264900659177221, 0.07885051356656114, 0.07027050351659803, 0.10383346820810979, 0.09794801764951566, 0.10017121605796397, 0.09444605055927457]}, "mutation_prompt": null}
{"id": "56b123b1-96b3-42ba-aabe-cecb5a7f9178", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 3.5  # Line changed\n        shrink_factor = 0.9  # Line changed\n        success_rate_threshold = 0.2\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.05  # Line changed\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / self.budget))\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhanced AHSA-DN by adjusting the hypercube size initialization and modifying the adaptive shrinkage to improve exploration and exploitation balance.", "configspace": "", "generation": 31, "fitness": 0.24304154401670316, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.24.", "error": "", "parent_id": "8fa0b690-47f8-4c9e-a3ca-9467dbdfa92d", "metadata": {"aucs": [0.754005992546394, 0.8456676668960844, 0.7460101716185543, 0.8467289126617834, 0.7658509767998767, 0.7163701665266595, 0.8476845890532347, 0.792710415140373, 0.7110003797311106, 9.999999999998899e-05, 0.023469206450721147, 9.999999999998899e-05, 0.002361976283754341, 0.06510095954664707, 9.999999999998899e-05, 9.999999999998899e-05, 0.02548297579158132, 9.999999999998899e-05, 0.13148145477558504, 0.14205615645909797, 0.12680919563555648, 0.0978106887550021, 0.11695736224611097, 0.1096636426784473, 0.10589159200271092, 0.06958649400362771, 0.1173345224007959, 0.08809058130828051, 0.07798292475587809, 0.07869871647033944, 0.09009555754236154, 0.13087379206395489, 0.12776452478901068, 0.08663603830969258, 0.09312808424772212, 0.10571661959464507, 0.9922715895650079, 0.9939010381950202, 0.9861669118277597, 0.9848636326611883, 0.9810671410380766, 0.9938454753678089, 0.9884226085682708, 0.9897432792207783, 0.9833555994089799, 0.3977299043271795, 0.5495697358208977, 0.4461384313387533, 0.45115166791957084, 0.4633505674524676, 0.4300289378259219, 0.41807228994420953, 0.5438643736502202, 0.42911630656251, 0.2206645030161386, 0.7749774587495433, 0.7362225183109325, 0.2015443688092563, 0.25807060392826875, 0.35941874537314866, 0.26864029555051583, 0.228870491165994, 0.38706277325089034, 0.13320371079215731, 0.12698097814844256, 0.2128253451343015, 0.19792375920764138, 0.11711311051608442, 0.13159088571590816, 0.14813263396624665, 0.1233721804030018, 0.12382107339282555, 0.13853321687267017, 0.14969965311487998, 0.18602482291239308, 0.14103617195857765, 0.18370113115740971, 0.12301747499033555, 0.13463170231750587, 0.13883405995218911, 0.1810469024655843, 0.004957034246180436, 0.03221598436151796, 0.04363970744452583, 9.999999999998899e-05, 0.010459142166081459, 0.017592283116430907, 9.999999999998899e-05, 9.999999999998899e-05, 0.05951357546995728, 0.0395906069008124, 0.09603218249497181, 0.06270274650969099, 0.07704976508424022, 0.04487774276522882, 0.030920665727435348, 0.041573678135026104, 0.022968758343933637, 0.030067796430501947, 0.03667165779815096, 0.08273650618932571, 0.03771732766388691, 0.05660763165631011, 0.05870657559923442, 0.14362188430638312, 0.17590096748127582, 0.11920624731707796, 0.09418298279546367, 0.15011077216788404, 0.09945172057016693, 0.14130493380579667, 0.17162410910587655, 0.08146555167719727, 0.14600760394594692, 0.11627486408309051, 0.10949277271681657, 0.16045654479709626, 0.5621204124025228, 0.4715897629999062, 0.4470683271492253, 0.4392814579227321, 0.43484065774142056, 0.485609359361291, 0.49438835032552564, 0.4533431988188429, 0.4414566455819373, 0.1110859007569347, 0.13528108940414918, 0.10648545792814623, 0.1260949725310858, 0.1108923245681841, 0.13870426842911854, 0.08230342938865542, 0.09384024023911419, 0.1239232868455008, 0.18491545416146393, 0.22693447067722605, 0.2800139456520896, 0.23744872649110094, 0.24475724016676081, 0.15412902811787754, 0.23943079002385526, 0.11936867850015442, 0.3112233115949843, 0.37552578847898854, 0.3332582663206426, 0.18955661382432576, 0.30191086454210203, 0.4180071617853359, 0.3119211919378677, 0.4576395432246795, 0.30225410011503595, 0.2083323637968446, 0.3322354708742661, 0.24522315898600622, 0.27455375758067424, 0.25985154758107054, 0.26237172963202016, 0.30100518251824804, 0.20734369665160723, 0.24360104625049295, 0.20897829047564265, 0.1802557338324372, 0.20329973892551256, 0.20837824307471187, 0.2424958426704127, 0.23686967148982407, 0.22368433398674614, 0.24589230023773367, 0.19882042057388172, 0.2258021001935503, 0.23054008473341647, 0.1748221594075947, 0.19313511892870472, 0.18739296750801382, 0.20364176496160213, 0.1994616539303078, 0.19509161547993858, 0.2277655256206017, 0.23836417945303034, 0.18533539519610542, 0.13278800081367625, 0.16393840711127028, 0.1667129982636537, 0.21033646064126643, 0.12217227146795018, 0.13445226948940148, 0.12427936476165646, 0.16036726969379378, 0.15469814620854228, 0.20859316418541074, 0.08255354660151537, 0.1118791823900529, 0.2081667630274907, 0.04358073556888398, 0.11254120822980895, 0.1659039106318636, 0.2114306989172754, 0.21212892492188296, 0.19983404409256267, 0.2016014469696683, 0.22265305771217114, 0.18178826903491696, 0.18796385515342318, 0.20069957004036598, 0.19310726611717666, 0.21069893571790377, 0.0888744905361395, 0.10638769972008522, 0.0966554259629705, 0.08996599610689737, 0.08920610012904273, 0.12351818074293242, 0.09874788612005847, 0.10308503598740903, 0.09936879015240663]}, "mutation_prompt": null}
{"id": "fc5ebded-5560-4c0a-8754-717943c1022f", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 3.5\n        shrink_factor = 0.85  # Line changed\n        success_rate_threshold = 0.25  # Line changed\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.03  # Line changed\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / self.budget))\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Improved AHSA-DN by adjusting the hypercube shrinkage and success rate handling for better convergence.", "configspace": "", "generation": 32, "fitness": 0.2442325734906665, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.24.", "error": "", "parent_id": "56b123b1-96b3-42ba-aabe-cecb5a7f9178", "metadata": {"aucs": [0.7593963117905644, 0.7294823573984018, 0.7366825687466148, 0.7292198353969671, 0.7682054979188258, 0.7528084248515989, 0.8077197747857097, 0.7416568350988951, 0.7906656657259541, 9.999999999998899e-05, 0.005161923437685623, 0.0069883971602278105, 0.04866842043732611, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09962651547553814, 0.1029503094277876, 0.10338647210063079, 0.11055798364193614, 0.10321960754668036, 0.14198862757171082, 0.09640673731511307, 0.1388939243081342, 0.09821416789112958, 0.053694587696898055, 0.09979618042175009, 0.08505035269974792, 0.08861992892808557, 0.08513695867914661, 0.09814128834463154, 0.10216537422586758, 0.09027410826856486, 0.12137578385611758, 0.9921097384790688, 0.9939105019540374, 0.9861921586113618, 0.9853082722732074, 0.9810238030810439, 0.9938236668117015, 0.9884084481218312, 0.9889194598770362, 0.9849903554150526, 0.40042385817699, 0.7126607085403945, 0.577162691255144, 0.3871784080264161, 0.36274747551183906, 0.5462704569289272, 0.7525334888936099, 0.4930165841149805, 0.7195112064968008, 0.6662067687144726, 0.3056914242294064, 0.40729415910678946, 0.2863820670151619, 0.3331752451626733, 0.25708749236841977, 0.2259319083867536, 0.22738526037068263, 0.3354976840760513, 0.11276245446099287, 0.11717022850882464, 0.12333251838714476, 0.530860016944899, 0.12192714507538949, 0.15434244366416772, 0.15548498985877068, 0.12996717784978062, 0.12656970717672755, 0.14323854669485758, 0.15990271396474076, 0.20077122072765619, 0.2005699250695281, 0.13392209961221246, 0.14719554162180926, 0.18853893534638888, 0.15159033705215552, 0.18347874126678587, 9.999999999998899e-05, 0.019316847354272304, 0.010494742953632508, 9.999999999998899e-05, 0.03802468947051818, 0.014760065349814222, 0.005573700024689376, 9.999999999998899e-05, 0.034212100273119495, 0.03494124827490308, 0.09280886299760938, 0.055488015428868276, 0.10961786399446882, 0.0668467071139841, 0.012176830588480736, 0.04111823251552926, 0.02273042370701661, 0.046751190263102815, 0.07030600572775425, 0.03700510487638076, 0.0668590437380413, 0.21830448960897153, 0.06303191701025812, 0.16858598517245027, 0.08167027146408068, 0.07150166458311502, 0.0687387603565498, 0.14900745954728678, 0.17560689898182158, 0.07358750033965844, 0.09694457300313242, 0.10956449317626626, 0.20909443540452388, 0.07804126942278966, 0.11398264650098366, 0.1912207291329895, 0.4356504177211903, 0.45648649508079153, 0.40773720831660254, 0.4456754105599726, 0.41459989535746744, 0.4247151164906674, 0.4563241387500593, 0.4342356194939059, 0.4621338514781179, 0.10376706270038116, 0.1080094249177137, 0.1627741500401767, 0.12803505712360297, 0.10768556683309904, 0.1348916630044945, 0.10600529565945804, 0.1037365749992818, 0.12327836565595429, 0.2213787584101794, 0.22191590832272057, 0.2612740482444228, 0.210864128390993, 0.25829219719864427, 0.1731848460731722, 0.17961067705835043, 0.2310983244439332, 0.28007023812274645, 0.3773434029031443, 0.3881474187366474, 0.30421318965938327, 0.3530722778960167, 0.2732134117605788, 0.3884727288717764, 0.20942257276511378, 0.34800989281629935, 0.20679059391199384, 0.2357537916456014, 0.23083142741138085, 0.24296647600212917, 0.20996750605679304, 0.24230428656459568, 0.20633243819572222, 0.16432283927669455, 0.21125841238299425, 0.1645663783364827, 0.19080180203796548, 0.2197218299040512, 0.22116951943910257, 0.2104804792553765, 0.22100787696414237, 0.19806892967137402, 0.22271953418709844, 0.20923644720789714, 0.20221523252703621, 0.20107700204436374, 0.22898025570872882, 0.18054852595144188, 0.199465700349564, 0.18640430717791334, 0.2084922095827686, 0.18819605987221277, 0.19051844098285364, 0.1927735089471272, 0.15355870273106043, 0.13351178201435965, 0.7655053879585244, 0.16669390939574857, 0.20787137858470695, 0.1217657255413318, 0.10771571164462335, 0.12397943096207642, 0.15031542410208187, 0.15118565320457367, 0.2000315989966187, 0.08270320843382795, 0.11105792087707456, 0.20348866245598396, 0.043438075948857624, 0.11256856092817158, 0.16452263807703071, 0.2102872426317981, 0.2290107045248827, 0.187588823287412, 0.24967138227148378, 0.19793150165880502, 0.19181432061593107, 0.20971798360002636, 0.22355255049322642, 0.193546816549639, 0.20932208797593688, 0.08564865542843525, 0.1147716238361629, 0.07872627163733614, 0.08414463727016663, 0.09050446850647709, 0.1097236138747798, 0.10979973419712385, 0.09899324321886127, 0.0798315683083658]}, "mutation_prompt": null}
{"id": "a1387dca-aa31-4fca-a39c-b5400e775733", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 3.5\n        shrink_factor = 0.85\n        success_rate_threshold = 0.25\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.exp(-0.5 * (self.evaluations / self.budget))  # Line changed\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position\n                    hypercube_size *= shrink_factor * 0.95  # Line changed\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.03\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / self.budget))\n            success_count = 0\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Fine-tuned hypercube dynamics with adaptive step size and success monitoring for improved precision.", "configspace": "", "generation": 33, "fitness": 0.22578726994334972, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.22.", "error": "", "parent_id": "fc5ebded-5560-4c0a-8754-717943c1022f", "metadata": {"aucs": [0.8139500566082745, 0.3754068532702324, 0.7197000376655358, 0.4207061531872035, 0.8608973990204309, 0.5199185755711, 0.8281832883383649, 0.4090989092346694, 0.767460110728668, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043112286847275416, 9.999999999998899e-05, 0.10176899870311062, 0.10081096712625026, 0.08590263096621298, 0.10919838392949188, 0.0906506920676109, 0.10827561031250588, 0.09008601962165252, 0.09718837525671553, 0.06918869459589772, 0.08685022057858804, 0.08306608751188271, 0.10968327233265829, 0.12150475613552503, 0.07863193946666192, 0.1059096631159111, 0.10079153467070479, 0.0761087444007833, 0.0911451596085997, 0.9902595921109348, 0.991110416096917, 0.9059335288051082, 0.8731892503620249, 0.9650621098453293, 0.26436209726735815, 0.8394270267842368, 0.9837720035252115, 0.970270630542489, 0.5430920954682223, 0.5206802252870838, 0.8941972557085778, 0.8429985709330297, 0.5944820426288284, 0.44356427914242214, 0.4002332303364282, 0.7254647747567691, 0.54196577000635, 0.31242309999581785, 0.21352077822038507, 0.1608819362266306, 0.19046451959379085, 0.1958134479489536, 0.27825289481934434, 0.23383255959114846, 0.14776774967269102, 0.23975108754760133, 0.1477797596908207, 0.2304522031562789, 0.12552679647402332, 0.10336049814256965, 0.16686831047782857, 0.23788755243624904, 0.16810859343002138, 0.22181856807147393, 0.22058719738161936, 0.1558695725886715, 0.16547128781967457, 0.08879327351433497, 0.08733233534901541, 0.07627169689008129, 0.20077351376966346, 0.17065495925299567, 0.1773875351814318, 0.17472061611773737, 9.999999999998899e-05, 0.05095811336359879, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02244224142368023, 9.999999999998899e-05, 9.999999999998899e-05, 0.04608727021367576, 0.05084464814827494, 0.09208395062722396, 0.10401972293430439, 0.06310636398204317, 0.029920785737524103, 0.03390295670678478, 0.029686275654805083, 0.011640454512461984, 0.032826520079241694, 0.1837298608557678, 0.008676570626902302, 0.2699426000928472, 0.1448473853301352, 0.07471149320976511, 0.07639021186794581, 0.06901415826240032, 0.08004651954022868, 0.07018376847118601, 0.18701458477754618, 0.09438614073603435, 0.09989688030347188, 0.1437198937068107, 0.1335946097962153, 0.11269134758185428, 0.10424011212470463, 0.15308186639349464, 0.07100823744761842, 0.5154721119546878, 0.5385448629132384, 0.5161152800909243, 0.509853289883225, 0.5147079687265401, 0.4071498595261921, 0.5012199624101934, 0.5039950272671696, 0.47156199895356676, 0.09733744720413162, 0.11802073877042474, 0.09419726865632405, 0.1044777054222008, 0.11497425471814382, 0.08262427351705814, 0.09374360258682302, 0.09420068609819465, 0.09237292278713427, 0.13992538227497497, 0.2238870959407374, 0.16355311658522753, 0.18640607747116056, 0.17180510439475327, 0.14785111597398515, 0.24622272626367592, 0.21543937015173398, 0.17952332972129514, 0.26269465157628846, 0.40653356782512273, 0.29152436018657457, 0.35820627123237925, 0.3954334626420204, 0.2879364506524662, 0.37286078864313466, 0.3108878706090462, 0.1059869434078402, 0.28842275149415153, 0.2425219672122283, 0.1849425904219847, 0.2060428252707337, 0.16955547514694935, 0.2220950673801051, 0.18191881491263362, 0.20793162315718638, 0.23872452709774483, 0.21395442559372746, 0.24010842209733696, 0.21991648484437543, 0.1988922397390419, 0.21095077839493093, 0.22109685095661014, 0.19105668579486712, 0.17274509474332933, 0.19567053549938174, 0.19114477466688085, 0.2088163867992271, 0.18381387336851074, 0.18438318942499432, 0.22201911536890195, 0.23609842149613935, 0.21061666383469624, 0.19925789900225777, 0.18444715059728267, 0.17597536069572273, 0.1353235125172274, 0.16560549065460928, 0.17244233989452973, 0.2133672453820884, 0.12212024737358407, 0.13596922132693035, 0.12453108735342544, 0.16027707936403846, 0.1553400143867193, 0.20558447479400765, 0.08311618225685236, 0.08258732806142033, 0.1045733321095006, 0.04374776048931961, 0.11303674029930133, 0.16958965506239143, 0.21146389410271071, 0.17709626158649494, 0.18064605294695868, 0.18588031110080383, 0.20682927305761745, 0.1742711475522346, 0.18290330850058067, 0.18403063265259212, 0.19298191070837445, 0.18338547305230035, 0.07375090634941606, 0.08511764413968426, 0.06690268501154828, 0.11763954440018531, 0.07470046809142605, 0.09952788589258255, 0.08986269444727024, 0.08097193989961138, 0.08078141254544857]}, "mutation_prompt": null}
{"id": "d5ca45fe-e3fa-4ee0-b060-713069910787", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 3.5\n        shrink_factor = 0.8  # Line changed\n        success_rate_threshold = 0.3  # Line changed\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02  # Line changed\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / self.budget))\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhanced AHSA-DN by dynamically adjusting the shrink factor and hypercube size for better adaptability.", "configspace": "", "generation": 34, "fitness": 0.24435714437415312, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.24.", "error": "", "parent_id": "fc5ebded-5560-4c0a-8754-717943c1022f", "metadata": {"aucs": [0.6786531041078911, 0.728056861180001, 0.7927708691872974, 0.6977133896821976, 0.7681849189516523, 0.7928180557119011, 0.747919993478456, 0.7218634503339145, 0.750276686451709, 9.999999999998899e-05, 0.05078801205869421, 9.999999999998899e-05, 0.04662472922018346, 0.05287341725334804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07307896338729791, 0.11135042677480256, 0.07669091935200067, 0.0979139477158022, 0.0874712237392038, 0.13048520105846728, 0.10076947477922549, 0.14228672403694198, 0.10694920383144613, 0.08522708671143542, 0.07503178756448636, 0.08748766741070435, 0.11242213187064665, 0.10762685929700111, 0.07915929543012212, 0.09336286371881819, 0.11143600876751802, 0.09538994573600335, 0.9902624552237506, 0.9937017295193675, 0.9861477806394287, 0.9857223621868335, 0.9808299414812907, 0.9938099309414308, 0.9883484465564594, 0.9887650342187518, 0.9850683080631523, 0.6189813586514715, 0.7166561271171645, 0.542045604135067, 0.5108233287083692, 0.6287129591363894, 0.40696358954848433, 0.5045250146567823, 0.5948499895099765, 0.5309405649643717, 0.3210901301634652, 0.7208148375153636, 0.2269166305484306, 0.313947943854636, 0.2603404335040763, 0.2644230400285317, 0.23023761612894378, 0.23271280026675378, 0.32725066036205186, 0.14108928539542487, 0.11939175067359842, 0.1626281090148921, 0.2487177561597762, 0.1202366129885355, 0.15862560333762954, 0.13648267611828746, 0.14870649098609157, 0.16963679695240663, 0.13084064543085083, 0.26174953877648843, 0.15736379968431702, 0.1425429456203583, 0.15747967360109527, 0.16557160103021562, 0.18679708883209378, 0.12239788618512104, 0.16454198847158585, 9.999999999998899e-05, 0.04191633122033778, 0.006097995387561617, 0.0945173918162594, 9.999999999998899e-05, 0.01668204394019135, 9.999999999998899e-05, 0.0032114918845034257, 9.999999999998899e-05, 0.04086133652393387, 0.050120087651021494, 0.06962418817663907, 0.08502257247306932, 0.0333691685232379, 0.017359716835185446, 0.09930958017921898, 0.015313046850035983, 0.04397145511979994, 0.06978523908854617, 0.028195375043232662, 0.06991579335144904, 0.08393773816303651, 0.0871195895957988, 0.11616240826904412, 0.05624038246727847, 0.15713419592781042, 0.06029399488590059, 0.10335511179742207, 0.18384530813307243, 0.018412352761478123, 0.16167629925288418, 0.15195154165871683, 0.14243925190823814, 0.22015247320060571, 0.15009121945995485, 0.08210898233630537, 0.4160503528249143, 0.46321429180534235, 0.40544022274888303, 0.4644877680599059, 0.45784665828807947, 0.5807594677611749, 0.47094206667833316, 0.4722796274260903, 0.48192282538190667, 0.13400206272424353, 0.08854614607130917, 0.11315787749703976, 0.09349169038462479, 0.1539437486032963, 0.10711694440796804, 0.10798720261128802, 0.10474390921080501, 0.10202971066054634, 0.17480466668841144, 0.22146077056672997, 0.40433707840669786, 0.17571661534693517, 0.19027567725727113, 0.2754204385844058, 0.1755339709054322, 0.18294698391644904, 0.2496908802517649, 0.38752794445662053, 0.32917895347559, 0.23347471171865886, 0.25931131521363815, 0.25275390813643217, 0.30338929019379346, 0.20998773597121678, 0.3526379687562923, 0.29869565419970623, 0.1332842961126326, 0.23233675334754156, 0.2392886024182006, 0.256523218557113, 0.17372031943831567, 0.20847560626736417, 0.2676315555868235, 0.18834861127871538, 0.19368645612182378, 0.17802788250626056, 0.22977908314828022, 0.20649560403842182, 0.23479536789998723, 0.21628952287173064, 0.20439102248688157, 0.22509968035090355, 0.229967388421784, 0.20937536364423637, 0.19465592701545864, 0.17525546658321367, 0.20317243600694745, 0.17241479120500058, 0.17477872349179702, 0.20049665903346625, 0.1982211285608615, 0.21009921005997267, 0.1822015116016733, 0.15266243183641526, 0.13405764706532464, 0.7858698148396972, 0.16612277650963625, 0.20694706024483778, 0.12136839758386464, 0.13345303935242459, 0.12437940361352562, 0.1585220925406302, 0.5216469216692612, 0.19887980551726736, 0.0824940549880615, 0.11095451247996369, 0.2049048146744401, 0.20706834627869009, 0.11267158765517105, 0.16154040240322953, 0.2088498307580795, 0.2126624589839351, 0.19953172398738384, 0.2474200976275287, 0.20213305514512836, 0.20468932450175747, 0.1875290044232958, 0.1753006156562006, 0.20209024868414105, 0.19567033790730604, 0.09063637451230844, 0.08933453445527462, 0.09715081103864409, 0.10647117887208657, 0.08706332329155342, 0.11202291993496294, 0.06655985968629918, 0.08746545258556049, 0.08753384869548209]}, "mutation_prompt": null}
{"id": "9d9b5984-6418-452e-9cc5-7cf49d259b22", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 3.5\n        shrink_factor = 0.8  # Line changed\n        success_rate_threshold = 0.3  # Line changed\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02  # Line changed\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / self.dim))  # Line changed\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Refinement of AHSA-DN by enhancing step adaptability with evaluation-based hypercube size adjustment.", "configspace": "", "generation": 35, "fitness": 0.05264141140394279, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.07.", "error": "", "parent_id": "d5ca45fe-e3fa-4ee0-b060-713069910787", "metadata": {"aucs": [0.11347524764629702, 0.06467772043310671, 0.1219832484741823, 0.05164209764327732, 0.025779527960173465, 0.06337044330305508, 0.06780281238045915, 0.10993974803939632, 0.07416734465103947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056240975762187784, 9.999999999998899e-05, 9.999999999998899e-05, 0.019230548033612127, 9.999999999998899e-05, 0.006115336867716703, 0.007199812874402078, 9.999999999998899e-05, 0.0013393137481562123, 0.02501260888177881, 9.999999999998899e-05, 9.999999999998899e-05, 0.011134899636772722, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11583559351871753, 0.03094226727991045, 0.01613441772751434, 0.03825660508055917, 0.04856575358424975, 0.03243402803833395, 0.03193592775332932, 0.045311794285614604, 0.03183403676723828, 0.05558581977365884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06270286588677187, 0.0010009432248839767, 0.05625772155977704, 9.999999999998899e-05, 9.999999999998899e-05, 0.13588141723135827, 0.05523619893300458, 0.019042507301385347, 0.1680542717089657, 9.999999999998899e-05, 9.999999999998899e-05, 0.0737490339742175, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0750477174460884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008909463526329597, 9.999999999998899e-05, 0.015338170308088261, 9.999999999998899e-05, 0.1393446912353158, 0.06478557910567329, 9.999999999998899e-05, 9.999999999998899e-05, 0.03802301996214397, 0.027922933377187098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08753340685498279, 0.0396012469223993, 0.13828880054505788, 0.07889236756922147, 0.08659137205752998, 0.026071418623727194, 0.148260685863143, 0.09974780901688463, 0.10456761961629568, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040737151309027664, 0.010820360864805978, 0.04902895594737622, 0.02634603889210685, 9.999999999998899e-05, 0.0874848225480298, 0.15220411968918868, 0.13820611534715643, 0.10455995778386606, 0.1427554305868205, 0.11548123258374143, 0.0735754183066738, 0.15384993315502493, 0.10677600341839588, 0.10904888152427006, 0.11638748465274007, 0.10529363900638522, 0.148434743587483, 0.10002509330729537, 0.10269960386231747, 0.150824575673835, 0.11810409612180373, 0.08178889339279338, 0.08629788034198826, 0.05616671122640493, 0.03792790278421854, 0.20591924518438076, 0.015278587255317722, 0.05827675586279979, 0.10441704809808838, 0.050303636428526644, 0.025770437309670546, 0.21260906063812546, 0.09109824644251352, 0.19856165792034086, 0.17469955608783405, 0.10469232678685658, 0.1534068610301349, 0.20948999308564153, 0.09138983466814443, 0.13433605947247595, 0.15993167589435164, 9.999999999998899e-05, 9.999999999998899e-05, 0.18014389330498215, 9.999999999998899e-05, 9.999999999998899e-05, 0.18629802852258348, 9.999999999998899e-05, 9.999999999998899e-05, 0.0700080432755511, 0.11285258094845119, 0.04473328697602852, 0.14330316631933548, 0.021937317646019028, 0.04261014289470566, 0.05192723045369507, 0.12265111342126434, 0.07457809051505848, 0.23197669442817637, 0.0687133549757144, 0.014343618360167287, 0.02316218593478847, 0.07637858409919429, 0.024224333289189937, 0.0722283230995947, 0.015151336543188898, 0.023849323884093776, 0.19326471902586595, 0.19532166336371937, 0.2290300255723059, 0.20778245640596749, 0.20828102290666772, 0.22209969219958814, 0.25522518471200706, 0.22468371259973563, 0.25711738242048454, 0.06854526847723608, 0.013137399095613511, 0.054319404957042794, 0.057321131127687885, 0.016710780303015427, 0.036798663469142734, 0.046593080273569454, 0.019483531162507783, 0.03325387621357878]}, "mutation_prompt": null}
{"id": "b95fee4d-842d-494c-9ff3-30e6f895a9bf", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 3.5\n        shrink_factor = 0.8\n        success_rate_threshold = 0.3\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            success_rate_threshold *= 0.99  # Line changed\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / self.budget))\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhanced AHSA-DN with adaptive hypercube size adjustment based on dynamic threshold updates.", "configspace": "", "generation": 36, "fitness": 0.24435714437415312, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.24.", "error": "", "parent_id": "d5ca45fe-e3fa-4ee0-b060-713069910787", "metadata": {"aucs": [0.6786531041078911, 0.728056861180001, 0.7927708691872974, 0.6977133896821976, 0.7681849189516523, 0.7928180557119011, 0.747919993478456, 0.7218634503339145, 0.750276686451709, 9.999999999998899e-05, 0.05078801205869421, 9.999999999998899e-05, 0.04662472922018346, 0.05287341725334804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07307896338729791, 0.11135042677480256, 0.07669091935200067, 0.0979139477158022, 0.0874712237392038, 0.13048520105846728, 0.10076947477922549, 0.14228672403694198, 0.10694920383144613, 0.08522708671143542, 0.07503178756448636, 0.08748766741070435, 0.11242213187064665, 0.10762685929700111, 0.07915929543012212, 0.09336286371881819, 0.11143600876751802, 0.09538994573600335, 0.9902624552237506, 0.9937017295193675, 0.9861477806394287, 0.9857223621868335, 0.9808299414812907, 0.9938099309414308, 0.9883484465564594, 0.9887650342187518, 0.9850683080631523, 0.6189813586514715, 0.7166561271171645, 0.542045604135067, 0.5108233287083692, 0.6287129591363894, 0.40696358954848433, 0.5045250146567823, 0.5948499895099765, 0.5309405649643717, 0.3210901301634652, 0.7208148375153636, 0.2269166305484306, 0.313947943854636, 0.2603404335040763, 0.2644230400285317, 0.23023761612894378, 0.23271280026675378, 0.32725066036205186, 0.14108928539542487, 0.11939175067359842, 0.1626281090148921, 0.2487177561597762, 0.1202366129885355, 0.15862560333762954, 0.13648267611828746, 0.14870649098609157, 0.16963679695240663, 0.13084064543085083, 0.26174953877648843, 0.15736379968431702, 0.1425429456203583, 0.15747967360109527, 0.16557160103021562, 0.18679708883209378, 0.12239788618512104, 0.16454198847158585, 9.999999999998899e-05, 0.04191633122033778, 0.006097995387561617, 0.0945173918162594, 9.999999999998899e-05, 0.01668204394019135, 9.999999999998899e-05, 0.0032114918845034257, 9.999999999998899e-05, 0.04086133652393387, 0.050120087651021494, 0.06962418817663907, 0.08502257247306932, 0.0333691685232379, 0.017359716835185446, 0.09930958017921898, 0.015313046850035983, 0.04397145511979994, 0.06978523908854617, 0.028195375043232662, 0.06991579335144904, 0.08393773816303651, 0.0871195895957988, 0.11616240826904412, 0.05624038246727847, 0.15713419592781042, 0.06029399488590059, 0.10335511179742207, 0.18384530813307243, 0.018412352761478123, 0.16167629925288418, 0.15195154165871683, 0.14243925190823814, 0.22015247320060571, 0.15009121945995485, 0.08210898233630537, 0.4160503528249143, 0.46321429180534235, 0.40544022274888303, 0.4644877680599059, 0.45784665828807947, 0.5807594677611749, 0.47094206667833316, 0.4722796274260903, 0.48192282538190667, 0.13400206272424353, 0.08854614607130917, 0.11315787749703976, 0.09349169038462479, 0.1539437486032963, 0.10711694440796804, 0.10798720261128802, 0.10474390921080501, 0.10202971066054634, 0.17480466668841144, 0.22146077056672997, 0.40433707840669786, 0.17571661534693517, 0.19027567725727113, 0.2754204385844058, 0.1755339709054322, 0.18294698391644904, 0.2496908802517649, 0.38752794445662053, 0.32917895347559, 0.23347471171865886, 0.25931131521363815, 0.25275390813643217, 0.30338929019379346, 0.20998773597121678, 0.3526379687562923, 0.29869565419970623, 0.1332842961126326, 0.23233675334754156, 0.2392886024182006, 0.256523218557113, 0.17372031943831567, 0.20847560626736417, 0.2676315555868235, 0.18834861127871538, 0.19368645612182378, 0.17802788250626056, 0.22977908314828022, 0.20649560403842182, 0.23479536789998723, 0.21628952287173064, 0.20439102248688157, 0.22509968035090355, 0.229967388421784, 0.20937536364423637, 0.19465592701545864, 0.17525546658321367, 0.20317243600694745, 0.17241479120500058, 0.17477872349179702, 0.20049665903346625, 0.1982211285608615, 0.21009921005997267, 0.1822015116016733, 0.15266243183641526, 0.13405764706532464, 0.7858698148396972, 0.16612277650963625, 0.20694706024483778, 0.12136839758386464, 0.13345303935242459, 0.12437940361352562, 0.1585220925406302, 0.5216469216692612, 0.19887980551726736, 0.0824940549880615, 0.11095451247996369, 0.2049048146744401, 0.20706834627869009, 0.11267158765517105, 0.16154040240322953, 0.2088498307580795, 0.2126624589839351, 0.19953172398738384, 0.2474200976275287, 0.20213305514512836, 0.20468932450175747, 0.1875290044232958, 0.1753006156562006, 0.20209024868414105, 0.19567033790730604, 0.09063637451230844, 0.08933453445527462, 0.09715081103864409, 0.10647117887208657, 0.08706332329155342, 0.11202291993496294, 0.06655985968629918, 0.08746545258556049, 0.08753384869548209]}, "mutation_prompt": null}
{"id": "50f59c55-a8f0-4816-88d8-dd9202d60a1f", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 3.5\n        shrink_factor = 0.8\n        success_rate_threshold = 0.3\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-1, 1, self.dim)  # Line changed\n                direction *= np.random.uniform(0, hypercube_size, self.dim)  # Line changed\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= 0.95  # Line changed\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / self.budget))\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhanced exploration by dynamically adjusting the direction vector and incorporating adaptive hypercube resizing based on performance.", "configspace": "", "generation": 37, "fitness": 0.1968960869737126, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "d5ca45fe-e3fa-4ee0-b060-713069910787", "metadata": {"aucs": [0.3249085235150586, 0.3545796141739097, 0.35297771423673463, 0.5222526122770573, 0.34975614198493377, 0.34887560497432657, 0.4002948440287821, 0.33385367047638426, 0.5680851940158571, 0.0127463150076772, 0.059277046596956096, 0.021702469662120305, 9.999999999998899e-05, 0.07144070450694928, 9.999999999998899e-05, 0.007103601389778835, 0.05714686999405327, 9.999999999998899e-05, 0.12236975804459727, 0.14147116537009208, 0.09825472497919763, 0.10813938811200274, 0.09271161451708432, 0.08681439240291944, 0.09738111985972575, 0.11375272675512238, 0.11565882042869158, 0.1263051423564604, 0.1193818633487368, 0.06494165602881763, 0.08816323518099412, 0.14951422087146837, 0.0913431571815494, 0.09854295750535935, 0.10056548363728868, 0.09683087435500215, 0.190100057612005, 0.9900310468166151, 0.9927506500692604, 0.9898697101056904, 0.9816144545255087, 0.9876667272582901, 0.9855493034614763, 0.9971915096080027, 0.9918420992073679, 0.21254551595340931, 0.15768063661521647, 0.17474958535872487, 0.20080323722131677, 0.2391265434177411, 0.2555766990849053, 0.20644920048136017, 0.23031323789889013, 0.23272796742377144, 0.23757905170717153, 0.3340240503090727, 0.23072711112012612, 0.2628713190007306, 0.21375596853994883, 0.2321835845160729, 0.26406227237865254, 0.3777127299631936, 0.1509966928594687, 0.11995722667914832, 0.10213083754033336, 0.12255069387231032, 0.08868541449113021, 0.16051203312518225, 9.999999999998899e-05, 0.09969220264625334, 0.13446483980741253, 0.199614274352502, 0.10111083119818198, 0.14227667329149096, 0.07437362461133945, 0.09783555568395408, 0.1105834387439012, 0.12320445120479306, 0.1473252001149764, 0.15681489821593442, 0.15499659370614516, 9.999999999998899e-05, 0.028542528443230686, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000887029508878201, 0.003669589664368922, 0.009699040375622303, 0.12631357037002966, 0.045393799013528024, 0.09461540477855834, 0.10656477726072866, 0.07507488897967163, 0.0779042552105832, 0.11205878854475726, 0.10160277457846478, 0.05225738274642322, 9.999999999998899e-05, 0.009343731717402437, 0.0666467620992256, 0.006294690298691785, 9.999999999998899e-05, 0.10861090427509845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10170206264943749, 0.07197043847039253, 0.1089009023066343, 0.06656253648649091, 0.06253729544363873, 0.15964302277271758, 0.05669906399946667, 0.08363548000544485, 0.0838532380871122, 0.37217942179238706, 0.4121625643734015, 0.3021920235582164, 0.40225199136969547, 0.34650527491189165, 0.40682251782209633, 0.37034832132884976, 0.4515701672881358, 0.39468820960547824, 0.07635026673820755, 0.09100674996174896, 0.10281060180824553, 0.11982329499580813, 0.10405226884127172, 0.08173172519597194, 0.10576689316724808, 0.10737549973287952, 0.08626386498250982, 0.1643481639515736, 0.2917758183378437, 0.149641570377949, 0.13397351421028358, 0.21205239678182686, 0.23097036380268332, 0.16712826573859785, 0.23187719824792763, 0.2616260082738995, 0.23741663148198733, 0.23648000292514704, 0.22647501393538494, 0.3003507377482525, 0.19208452707244672, 0.2406954301293347, 0.2397230629966215, 0.3207004877451113, 0.3209199556601128, 0.22806672478549084, 0.24278574442389256, 0.1454868224471234, 0.2246825891108727, 0.20139815477576062, 0.17944150988240437, 0.2055940071782938, 0.24420674048009383, 0.213205444978403, 0.21568902913415255, 0.18465466339544434, 0.20111435359789331, 0.18669914251425657, 0.18175704035058293, 0.18171263432548646, 0.20849993703787828, 0.19471011874510402, 0.1808700085149224, 0.18435275171079157, 0.18081092915545582, 0.21522142287138513, 0.1881131321835292, 0.222343617481501, 0.19300403042760517, 0.18646701942202948, 0.19587422753980577, 0.18310436756576454, 0.15272996700227282, 0.13194902934450403, 0.13096430187828523, 0.6045898744124563, 0.14725430828871544, 0.6251523279994038, 0.13377451834202347, 0.15233318228924786, 0.42794001327483566, 0.3394567888019293, 0.11194553626698178, 0.08266614355839408, 0.1678743405735409, 0.20704889993911857, 0.21229551506361177, 0.16500285510736235, 0.1664829944602596, 0.2907237916907238, 0.18700662802529588, 0.1924135738994337, 0.183907574175739, 0.2086119177179987, 0.21765112578542523, 0.18652888376260712, 0.1796092007451292, 0.1928773398667829, 0.18243636151721065, 0.07727064018047403, 0.07135470925929299, 0.07934818856120274, 0.08261267111896575, 0.08190224479013208, 0.0774185924849351, 0.08792460976034033, 0.0752506042863551, 0.07708162350272374]}, "mutation_prompt": null}
{"id": "2051eb5f-1f5e-4bea-9f17-9fc0b21c20bf", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 3.5\n        shrink_factor = 0.8  # Line changed\n        success_rate_threshold = 0.3  # Line changed\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02  # Line changed\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / self.budget))\n            shrink_factor *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Update the shrink factor more dynamically based on a cosine function for improved adaptability.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "An exception occurred: OverflowError('Range exceeds valid bounds').", "error": "OverflowError('Range exceeds valid bounds')", "parent_id": "d5ca45fe-e3fa-4ee0-b060-713069910787", "metadata": {}, "mutation_prompt": null}
{"id": "8a98069a-a354-4b41-b857-b54fb9007b56", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 3.5\n        shrink_factor = 0.9  # Line changed\n        success_rate_threshold = 0.3  # Line changed\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02  # Line changed\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / self.budget))\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhanced hypercube adjustment by tweaking the shrink factor dynamically for refinement.", "configspace": "", "generation": 39, "fitness": 0.24730753067079872, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.24.", "error": "", "parent_id": "d5ca45fe-e3fa-4ee0-b060-713069910787", "metadata": {"aucs": [0.6787656460152934, 0.7499770533302565, 0.6935666978760091, 0.7251704472417781, 0.7075758114899849, 0.7428250917253103, 0.755959100392108, 0.7219949431172772, 0.7577084965000521, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399668805367598, 0.045801401699277045, 0.054550878933922076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07308104441705421, 0.10769840512396334, 0.09919540275203231, 0.09791514088456765, 0.10082178024392974, 0.09947968247652261, 0.16059388833278587, 0.1097086009071101, 0.13418990308590695, 0.07804463430371411, 0.09793930137414864, 0.11534697686212425, 0.11242079589792808, 0.10272292392308413, 0.08310702211239662, 0.09336506482871187, 0.09274409660594718, 0.08323033505174282, 0.9923539001226663, 0.9940321790284672, 0.9877620900832088, 0.9865534640810439, 0.9866140542117544, 0.9938348941147017, 0.9915834257201254, 0.9895511437546994, 0.9851541559028567, 0.6141622985741635, 0.7154790104172886, 0.4542082604223161, 0.7240138484757259, 0.5241990550922868, 0.7177335280742814, 0.5545308086398315, 0.5822921068018697, 0.46728147679491516, 0.3210901301634652, 0.7208148375153636, 0.22781660749811705, 0.313947943854636, 0.20448788009834884, 0.6896048710675281, 0.23023761612894378, 0.22644745389048548, 0.22820007741851622, 0.13579987552790118, 0.10779854775246023, 0.13907495419549054, 0.24849945405118368, 0.0993365985544542, 0.1637925981780236, 0.15782352804707045, 0.18298657781331562, 0.1713794349589789, 0.1406802260560136, 0.11260032257994046, 0.14980954928722912, 0.14623691967355934, 0.182197918364306, 0.16918279473066433, 0.18567322128275754, 0.15277102747951354, 0.1629658471244737, 9.999999999998899e-05, 0.04778101160330117, 0.12668403726642863, 0.09255431126640201, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001336750140789822, 9.999999999998899e-05, 0.03037400453165806, 0.05026470399593075, 0.06969522775983661, 0.08500365684242883, 0.07669924943978845, 0.012714642126163911, 0.024792682379151887, 0.015340908960258415, 0.03556301680798801, 0.06970975526376044, 0.1864353403758222, 0.06995808787540736, 0.2102210637830062, 0.18107654532195783, 0.08050182316937915, 0.0725795540805082, 0.1366811989179325, 0.06037007679964845, 0.1252992082591523, 0.04386375057900882, 0.01841218754670959, 0.16167629918113324, 0.14221793318848797, 0.10979884161992837, 0.11231257806986283, 0.15004364078886867, 0.0821010387086506, 0.42953058346444173, 0.4684250425825337, 0.4158143316358578, 0.4594734357793392, 0.48015211508170774, 0.49061373530606467, 0.46883552255603567, 0.5215103727368816, 0.44191845549689646, 0.10041073719815563, 0.12277586063176582, 0.15112134544852474, 0.09351667954521015, 0.0909725580543489, 0.12357392373427789, 0.08649864295751153, 0.08609000097292041, 0.08969285408900507, 0.174864316449157, 0.15504585014556393, 0.4043358936092374, 0.3435201171225253, 0.19048283293543955, 0.27542802058874705, 0.188968376584847, 0.18269094338584868, 0.25027701443604244, 0.34458568141638857, 0.32691450272062994, 0.3474811647680849, 0.2562323746229599, 0.2530657642923023, 0.3041640066732971, 0.2010130828687543, 0.3917638754257097, 0.22908139500172953, 0.1334067312936551, 0.2323367831830141, 0.2589158772203829, 0.24733554554646153, 0.21383091186195047, 0.20855066366224906, 0.19973313234755408, 0.18914989806658578, 0.19382244167073293, 0.17802788250639046, 0.2762103157702226, 0.24110033149407994, 0.23479539768481938, 0.19698010404043076, 0.20439102248688157, 0.22509968035087857, 0.22997291513914198, 0.20937536364424303, 0.19465750506268398, 0.1834666339816582, 0.20320436682304843, 0.1724307977965165, 0.1747787552401876, 0.20049688908093322, 0.1982221823397835, 0.21010076968000757, 0.19186086358563803, 0.1526624326442756, 0.1340577759064001, 0.7864067845385008, 0.1661227912912302, 0.20696933548786345, 0.12136827346206025, 0.13343721203578351, 0.12437938987330655, 0.15852178646477055, 0.5105057865491799, 0.19891829727323307, 0.08203425108837181, 0.11095453924555365, 0.20490481518110204, 0.20706834608663482, 0.11220420602823067, 0.1615426947943268, 0.20884723202363997, 0.2126638622336503, 0.20209121699740773, 0.21282507370848502, 0.19703366056732008, 0.19504969791040871, 0.1875290044232958, 0.17530061565624622, 0.20274592503642075, 0.21224261545593637, 0.09714353935480213, 0.08769818210223168, 0.09715189814758396, 0.10647350431416158, 0.0947863000497704, 0.11205016319027294, 0.06658699622150543, 0.09217657760786546, 0.08761977424892031]}, "mutation_prompt": null}
{"id": "eb0b6bc7-58d9-47b8-81a3-762b7d386925", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 3.5\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / self.budget))\n            hypercube_size *= max(0.5, 1 - 0.25 * np.sin(np.pi * self.evaluations / self.budget))  # Line changed\n            shrink_factor *= 1 - 0.1 * np.cos(self.evaluations / self.budget * np.pi)  # Line changed\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Adaptive hypercube size adjustment based on a cosine-modulated success rate for improved exploration and exploitation balance.", "configspace": "", "generation": 40, "fitness": 0.10576813949708465, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.14.", "error": "", "parent_id": "8a98069a-a354-4b41-b857-b54fb9007b56", "metadata": {"aucs": [0.14831166533571982, 0.19425398644083403, 0.2692977514804872, 0.1725872096340123, 0.13833442717000777, 0.1926861821955128, 0.3076912428566325, 0.15048762448550146, 0.175426160629231, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06262087984717768, 0.024213261776549033, 9.999999999998899e-05, 0.08841033118144748, 0.03213492870524626, 0.05553402728144996, 0.031784902341522536, 0.05090224930259102, 0.07532682040915628, 0.03647643076883378, 0.037384356679024844, 0.048440830549288494, 0.07180928610950721, 0.00040415188166131877, 0.023307095358864216, 0.010691392942069777, 0.02014803188683323, 0.06460210393918131, 0.9902399365820199, 0.07353800110990782, 0.05447961352367836, 0.9857759292169181, 0.12471845542501991, 0.9938375387586823, 0.08048845969594498, 0.07305245914690972, 0.9837065397028206, 0.14752133126453815, 0.005776171174238898, 0.046630112412089475, 0.058331158375803493, 0.06909388110522818, 0.0575456547503147, 0.11675958903385675, 9.999999999998899e-05, 0.09000860385129106, 0.1723713071184979, 0.13494873525743956, 0.16208281460071716, 0.22016775693591306, 0.06572610526931444, 0.15894367504533147, 0.11920589107507962, 0.07954581064539545, 0.1476653285255014, 0.11257577432813248, 0.0403314146201359, 9.999999999998899e-05, 0.012043793964138572, 0.190471649469924, 0.056478614017187234, 9.999999999998899e-05, 0.012090906516749267, 9.999999999998899e-05, 0.0019016348145274309, 0.13457606057534344, 9.999999999998899e-05, 0.11878620876703949, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01062988984203983, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031008952338574036, 0.02843719823448776, 0.029779099949542087, 0.05578089697608901, 9.999999999998899e-05, 9.999999999998899e-05, 0.06025232060827168, 0.01881363357296817, 0.0025794753763320744, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035758903998616143, 9.999999999998899e-05, 9.999999999998899e-05, 0.03881030147837061, 0.029342212293979153, 0.18680103537628379, 0.1657524039496826, 0.3107058891649721, 0.14829890078943264, 0.1784332276715026, 0.09178234573611843, 0.22087806541757593, 0.2597491905225444, 0.219595697952793, 0.07701585061576244, 9.999999999998899e-05, 0.0022380151416371286, 0.033688046436940344, 0.08566253431110693, 0.06688648563120425, 0.06169372852650701, 0.07416369700707948, 0.0673556386754568, 0.10218311874321995, 0.14093701185429486, 0.11125439475092391, 0.11230798627196181, 0.1292840202629001, 0.1120869690950631, 0.13870467582353174, 0.1061963476443134, 0.11885041621715786, 0.12032175167324732, 0.1833535722131181, 0.11135968700310916, 0.18258623249080697, 0.25676996292925847, 0.32185664583961393, 0.18183374460986257, 0.19803713629038233, 0.10921565951561352, 0.11176292859441295, 0.11346328341443623, 0.10077529653733253, 0.10462565041385075, 0.12432524975788528, 0.09728104369392843, 0.10333208454671494, 0.12379221069151047, 0.13689006752445898, 0.2643419200260516, 0.24392347096332845, 0.1445302535736266, 0.17340839651825046, 0.14906334773778873, 0.14452620998879917, 0.2130543882557996, 0.12428206277446918, 0.1826939111033794, 0.16769919508254538, 0.16893959881211218, 0.18747265024173654, 0.1649586028845601, 0.1481912128292432, 0.17018695555831387, 0.1610054033658247, 0.00977495875686396, 9.999999999998899e-05, 0.13582991195761351, 0.11590634265498134, 0.2711740601725383, 0.16718220949159346, 0.10933900315438894, 0.10710569202952724, 0.09178564108529152, 0.1258449807329789, 0.07664504364709412, 0.1179241691945141, 0.1284462740302913, 0.08345856139242547, 0.06910268626713623, 0.1008479241317225, 0.04265023071391971, 0.11260295466757275, 0.07226277090738675, 0.21058469036169436, 0.1764289511642836, 0.19844930145499073, 0.21564939358923152, 0.1595069669656004, 0.17283368629554174, 0.1674419493324829, 0.16085175348948288, 0.15363355692914338, 0.20128204454603837, 0.06702323121713383, 0.05073359147349421, 0.05349391146903437, 0.10441710781617497, 0.07994250711272122, 0.0651117265698169, 0.06947583824325632, 0.04747126621471509, 0.05294364215778147]}, "mutation_prompt": null}
{"id": "222e2d41-558a-4e5d-8663-4281ee879804", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 3.5\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n        momentum = 0.5  # Line changed\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                candidate_position = position + direction * (1 + momentum)  # Line changed\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n                else:\n                    momentum *= 0.9  # Line changed\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / self.budget))\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Adaptive hypercube with momentum to refine exploration and exploitation balance.", "configspace": "", "generation": 41, "fitness": 0.2458000832052655, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.24.", "error": "", "parent_id": "8a98069a-a354-4b41-b857-b54fb9007b56", "metadata": {"aucs": [0.7628513141592228, 0.7415488832115811, 0.8031480571394437, 0.7862662103458549, 0.7405080971570543, 0.7794771084623848, 0.772521040720298, 0.7128196853328721, 0.7407729340498288, 9.999999999998899e-05, 0.033041079486131775, 0.004777380585587188, 9.999999999998899e-05, 0.05586664698772181, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08080446049679502, 0.09856044192106905, 0.11091172285202666, 0.08066053093270986, 0.08247182063085512, 0.10408923762466038, 0.12752437887317736, 0.10629238305428423, 0.12177928777733393, 0.07386714212452228, 0.0984472639044629, 0.1020142193397674, 0.066984999229451, 0.11058170385980015, 0.10795150162215628, 0.07950755259971898, 0.10244607857781196, 0.1292377030768177, 0.9923195223899133, 0.9939787149194259, 0.9879156350896438, 0.9832903318945246, 0.9867007323884662, 0.9940464847355142, 0.9933057143333455, 0.9889259776372327, 0.9834510360941444, 0.6405999855360458, 0.6318111056982811, 0.4845221184064695, 0.5434332626786769, 0.6729200211393458, 0.562845082422938, 0.5572391857931245, 0.5663059296988351, 0.4019220333447845, 0.2939708077372406, 0.7030463877670916, 0.32307615819385327, 0.3419225333705618, 0.20680419113826387, 0.3206247287606099, 0.3013206085533767, 0.22848337461215762, 0.2207221792210804, 0.1438577214297524, 0.1364789567217125, 0.18074876893055347, 0.16132096122278528, 0.18151591159352676, 0.18365048062493672, 0.18331011992934798, 0.1766848961815891, 0.14624955567706133, 0.1290833965807746, 0.11634854653603366, 0.1510572120254845, 0.1353243034238134, 0.12341234822202019, 0.15055121996955645, 0.1490785407867241, 0.08099713071553283, 0.13836060877546752, 0.0025469356634384432, 0.002105369476229524, 9.999999999998899e-05, 9.999999999998899e-05, 0.013432559254029752, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07499569565123765, 0.07192716122488874, 0.07819201720578695, 0.08490448685842023, 0.1187091076180079, 0.02991852427569952, 0.04271505604674619, 0.020666787270710807, 0.022248542120975046, 0.07958583118295681, 0.05238289441978172, 0.17418631988756095, 0.0848575999482899, 0.061825326556066984, 0.061088625010133235, 0.121392329600855, 0.13531171756699134, 0.09512937098879792, 0.09800909574905581, 0.10680248106471313, 0.10596199497623782, 0.21539309785823546, 0.13075729537318825, 0.0927090827718966, 0.16002355473795637, 0.14708656639834095, 0.14328611744118114, 0.5404282196231706, 0.4429333573813604, 0.4141230137023153, 0.44193348278664957, 0.4339939905941643, 0.49153383779920656, 0.4505398188215992, 0.4558877580114882, 0.5420912936310199, 0.09991807905948102, 0.09792597019538629, 0.10396890296983308, 0.11978728146845896, 0.13059788695845143, 0.1104950032684836, 0.0884214543483347, 0.11716016022934495, 0.10820567741498799, 0.14841800687064188, 0.16062312146123003, 0.22263933328500685, 0.35442229150125637, 0.23623953548052812, 0.3411302010752554, 0.2449617736880645, 0.1489132010347506, 0.233424557471256, 0.2806161093180436, 0.27845787111036113, 0.3494338673897506, 0.3114600913778577, 0.2960794517542087, 0.29981757068138826, 0.3553333625897318, 0.2956474813600053, 0.22862303401308182, 0.21817385477122575, 0.16491760464335348, 0.29559081651491137, 0.3565051066218571, 0.25331275295449496, 0.3454450310147744, 0.20530820841665087, 0.16694776855409965, 0.23353351386385812, 0.19048381117084068, 0.234708435897788, 0.21613011662944492, 0.18699584548015102, 0.21196754883995306, 0.1780951746635122, 0.20241734976779624, 0.19706182257084948, 0.22582034861046196, 0.1749232522420907, 0.19013089530244087, 0.22577690874454326, 0.1850100329142299, 0.21217654137348585, 0.18194660623504144, 0.1927582569599542, 0.19000244147410195, 0.20674708447842016, 0.15249642164983668, 0.18256221706451603, 0.13284062553133624, 0.7746928020462064, 0.20694817634468876, 0.16526309879027756, 0.09336033189064763, 0.14520039351215108, 0.16153837497329238, 0.12510738358471207, 0.20171172134526483, 0.03865683009312415, 0.1254984610327381, 0.46780435767955497, 0.20531040028672165, 0.11165102923552384, 0.16293065095962733, 0.20897633190410592, 0.2036394588470274, 0.24128586117690354, 0.18225341617236557, 0.2068766805502288, 0.2050083002569495, 0.21625871110000827, 0.21935228961424613, 0.19835855532698665, 0.19348892224772873, 0.09117252216035254, 0.07687403670999715, 0.07026874476735556, 0.09367321728769606, 0.12207547709416156, 0.0955019031713511, 0.07520180928646314, 0.10581677267682132, 0.09347157229446423]}, "mutation_prompt": null}
{"id": "0788148f-5776-44bb-b51b-42b040244d31", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 3.5\n        shrink_factor = 0.9  # Line changed\n        success_rate_threshold = 0.3  # Line changed\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                adaptive_rate = 0.5 + 0.5 * (self.evaluations / self.budget)  # Line changed\n                candidate_position = position + direction * adaptive_rate  # Line changed\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02  # Line changed\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / self.budget))\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Introduce adaptive learning rates in hypercube adjustment to dynamically enhance exploration and exploitation balance.", "configspace": "", "generation": 42, "fitness": 0.24482744060947767, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.23.", "error": "", "parent_id": "8a98069a-a354-4b41-b857-b54fb9007b56", "metadata": {"aucs": [0.7103970723512429, 0.7882155709284204, 0.6938970587152599, 0.7717435896736717, 0.8229703790252864, 0.7680088432898783, 0.8077823930965526, 0.8002360635037484, 0.7675824225302121, 0.054186337780547156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02288860022842143, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0985576988893958, 0.1617606463803104, 0.12998403940842695, 0.10321988311180375, 0.09436610251190691, 0.08069071139263984, 0.08719225580258894, 0.13847544472136963, 0.13904867384265895, 0.1025893996459104, 0.06554228124364458, 0.07450959065180507, 0.10575704449280932, 0.10797868524382992, 0.07608734814622153, 0.08860183835105073, 0.11595495728366567, 0.08504879077468797, 0.9920102454630958, 0.9874054842499573, 0.9855932719029623, 0.953770921762263, 0.9598103810581788, 0.9571886588490566, 0.9704040564340526, 0.983990776007484, 0.9830059778018555, 0.5374220713425062, 0.7082368478132178, 0.5882055629681773, 0.4824154056001353, 0.4770682251236361, 0.6158268222075918, 0.6176595193518987, 0.5786208680506519, 0.5504003068082512, 0.22257158346803685, 0.17940284223285874, 0.22742032043840554, 0.34780558931289707, 0.2122452835816171, 0.21256836416967828, 0.23549675717209817, 0.3591753260020035, 0.2255628035142787, 0.1598468477677012, 0.12673372031546792, 0.160880130223091, 0.1071030336756914, 0.18623145679901365, 0.18512227431627226, 0.14438957934952212, 0.15659407227831035, 0.13146299943901107, 0.15017406012462797, 0.19017315754820152, 0.186051751690251, 0.13731353894902565, 0.184768969479564, 0.2109150013021518, 0.2466611804616229, 0.17127707162240569, 0.18230541264488753, 0.04319601201810419, 0.06463083443943196, 0.03303989786302042, 0.04474524447548467, 0.11673201840967118, 0.08271615652474718, 9.999999999998899e-05, 9.999999999998899e-05, 0.055806208224199016, 0.05629578957688752, 0.07825744062404993, 0.23311674697206086, 0.097188771302952, 0.03232912366922114, 0.01914304580836701, 0.1103165741459543, 0.03321198171592299, 0.0698403739740675, 0.18812963733223242, 0.03268069416053154, 0.11541024229477226, 0.14932120866823284, 0.12102764915944486, 0.1497151400832769, 0.08004726816636853, 0.13294725710206767, 0.055967560286937834, 0.1238179947560486, 0.12971781613172784, 0.12520817697649478, 0.13424052467926684, 0.25353186905652625, 0.11048102225873357, 0.12618563179062525, 0.20930191141693388, 0.15539408427167678, 0.46793420374317685, 0.4960104089867391, 0.47147278158629935, 0.4872089331552183, 0.4358259820436692, 0.5118396726476704, 0.49132700185164735, 0.5056330464434577, 0.46849210776944494, 0.1005469123389412, 0.06598213111798434, 0.13724826520979427, 0.09352423414966649, 0.11922982441030072, 0.15621542384862153, 0.0769007640389584, 0.1406115544480534, 0.1413869561159381, 0.21025569075901063, 0.2083664435046132, 0.1819016834762559, 0.21218346371076646, 0.2859694997186306, 0.27091523912969173, 0.31637324403113876, 0.218782031980297, 0.24375983557692815, 0.26594149670732126, 0.3904353183730306, 0.15742857691572387, 0.32394558575283283, 0.36138998677986356, 0.22164641615305736, 0.279022010064202, 0.21657901378288325, 0.13605797123297436, 0.22137778610987968, 0.23770882973671148, 0.17810102644366832, 0.2075921417088794, 0.2790836873711129, 0.14375459359401832, 0.17479004727389091, 0.2096866363946479, 0.09281835908461544, 0.1991040950932197, 0.2833412077050236, 0.2145475867889446, 0.21372603629383347, 0.2563009219273654, 0.20612296821629528, 0.2014178345476565, 0.1977238098467109, 0.22408590616341584, 0.1939505312487977, 0.1897237187433961, 0.18594165865882284, 0.1808767760832105, 0.19228892263884978, 0.19178901689270644, 0.21274488427824334, 0.18564413582345463, 0.1909079990433351, 0.15874658726610547, 0.13554136450599474, 0.10460220799589148, 0.1728036885326626, 0.19276538884547245, 0.06176190756658084, 0.10838992933128977, 0.1259273444076845, 0.16807653836780212, 0.7235608221251483, 0.11280448117345732, 0.08327048148518224, 0.08299017775928641, 0.2117077078111913, 0.04415575709079134, 0.1132531126159807, 0.1656170174000805, 0.3611633197760721, 0.22253425799919246, 0.21548323506194889, 0.2164530031932551, 0.20082687401150423, 0.2292474982160123, 0.2315313242153183, 0.20850259982070452, 0.22427424314753108, 0.2346525850304143, 0.07848324843901444, 0.1164514142746208, 0.07511716660279999, 0.09190885914210378, 0.09754919028470344, 0.09091066301481054, 0.08466223357372438, 0.10459890403351058, 0.10175304623615122]}, "mutation_prompt": null}
{"id": "2df7c753-4830-4505-bb13-d2385380a886", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 3.5\n        shrink_factor = 0.9  # Line changed\n        success_rate_threshold = 0.3  # Line changed\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n                else:\n                    # Apply gradient step\n                    grad = (candidate_position - position) / (candidate_value - value + 1e-8)\n                    position = position - 0.1 * grad  # Line changed\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02  # Line changed\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / self.budget))\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Adaptive hypercube and gradient-based refinement for efficient search.", "configspace": "", "generation": 43, "fitness": 0.20974326645091382, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.23.", "error": "", "parent_id": "8a98069a-a354-4b41-b857-b54fb9007b56", "metadata": {"aucs": [0.18109103979477392, 0.7345911714261192, 0.1844675824813795, 0.7087133569734831, 0.7450699623155891, 0.7743073469936093, 0.7395355495094864, 0.6833541488208826, 0.7194546940131996, 9.999999999998899e-05, 9.999999999998899e-05, 0.06369076952235442, 0.0452019417887517, 0.054286493067546515, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04702747351121639, 0.09910937926361585, 0.12584565675384296, 0.045468298239785154, 0.11944351444552503, 0.056265062831492796, 0.12224891958015105, 0.1067504078405136, 0.10346877797144394, 0.08955132257922904, 0.08888382559904928, 0.10075144755571397, 0.032916765931357284, 0.1004044175289549, 0.06648499876181047, 0.11744304251405535, 0.08862213707370048, 0.028450755739526157, 0.9923373533713431, 0.9940206382891209, 0.9877607906546509, 0.9856547233120023, 0.9865985491823276, 0.9938300706853631, 0.9915834195493699, 0.9868458181169518, 0.9851357682511962, 0.5250927568012962, 0.7207920885418022, 0.4702650926847042, 0.6793583466008732, 0.34732584759370566, 0.7357686041781033, 0.5870607440822186, 0.6121890458917925, 0.4845633344257937, 0.19348526483296213, 0.216849527158527, 0.22723067837914246, 0.1568840307612952, 0.1876041591751032, 0.26032373430108846, 0.3376604796614511, 0.2942349086859325, 0.2283540808854324, 0.14277208801726338, 0.10790124700442627, 0.19264321452695377, 0.24784674994654865, 0.09932566300242018, 0.16258194565650808, 0.15107501680694513, 0.1828358738126763, 0.16739079328897155, 0.1639489742698721, 0.1125401086950647, 0.15650692351890172, 0.11451509127944359, 0.1847800996272998, 0.21741324451407362, 0.18007528243647142, 0.15135866424966515, 0.16189816226958298, 9.999999999998899e-05, 0.03961580524094954, 0.1267026796111761, 0.09275830533077711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005074964400102133, 9.999999999998899e-05, 0.033357120626614556, 0.0500422624686071, 0.06943193929698355, 0.05994595322295848, 0.06084556363661975, 0.010821721688816122, 0.022205975264484423, 0.017176413784368516, 0.035285569681805073, 0.06970892184068578, 0.18518118966157293, 0.06995874376248234, 0.21022388424355964, 0.18107640762833044, 0.08050084693907933, 0.07257944998778842, 0.1366803453431732, 0.060369396226147565, 0.1773203815674428, 0.06591237389699345, 0.025523707489287673, 0.14247143052952038, 0.1519255010877425, 0.10660964897497505, 0.11462955090148896, 0.1362026274147018, 0.13194870230016953, 0.5077297976298855, 0.4596712730161314, 0.12391795494314395, 0.23776706563692063, 0.5145383814519404, 0.43869462075315324, 0.19330240228047435, 0.45196177233711987, 0.4034173390181506, 0.09883447000164347, 0.14616408437378703, 0.10306740184361662, 0.11395944503645117, 0.12492811493119205, 0.050021320887846055, 0.06812396817223176, 0.08397923376169181, 0.07644590105186577, 0.12964043396535108, 0.11698747429507494, 0.13926311671218705, 0.149228248023607, 0.18550436265057535, 0.09350733641372921, 0.1325931037649265, 0.12757877988620858, 0.16314576561813043, 0.10780442221795916, 0.16453742662750082, 0.17083173385167716, 0.1834559310364603, 0.23022780530532783, 0.17097336063459678, 0.12537009844383717, 0.4800102017508233, 0.08443141113976493, 0.08108395250288636, 0.2539848487271845, 0.17962420309639127, 0.12750572674000427, 0.17163327688697794, 0.12053233994017065, 0.10365885853598034, 0.20103089533748797, 0.1926177654083664, 0.0916346253723066, 0.2496706313263244, 0.16647716522112754, 0.1386597183980377, 0.19947589613503902, 0.17689468238628325, 0.13671057448439805, 0.2653442326810299, 0.13828546341902725, 0.19304360207180293, 0.1834684645204977, 0.20255169266984885, 0.17783996131701274, 0.17862422165916647, 0.19996759781871654, 0.19801359865384438, 0.2100995215959871, 0.1918416167654694, 0.20503486534361082, 0.18145665304319736, 0.09005004013022477, 0.18152588920134483, 0.1315827857131059, 0.08822868812870388, 0.09552558494418684, 0.106763631545847, 0.06102441574169892, 0.20043061819658392, 0.1607735855768322, 0.08209586783951894, 0.1106883312726108, 0.1098428569861244, 0.0596837612537765, 0.09694619977539565, 0.11042138086028519, 0.16812726987186088, 0.1881837077749582, 0.15510465887141422, 0.17209656536777151, 0.16271333942875277, 0.18912144886528026, 0.18569060711769603, 0.20353673695361918, 0.18824132030717167, 0.1884368323695238, 0.04780976984404728, 0.10314639629898625, 0.07662536307969747, 0.03318092446747123, 0.09485546404930334, 0.07467723426163198, 0.04714572829724506, 0.040839977535854666, 0.04873971649149511]}, "mutation_prompt": null}
{"id": "04f5c834-60ac-4676-8b4a-3b0289046b44", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 3.5\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.sin(self.evaluations / self.budget * np.pi))  # Line changed\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.03  # Line changed\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / self.budget))\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Adaptive hypercube adjustment with strategic exploration and exploitation balancing.", "configspace": "", "generation": 44, "fitness": 0.13743496011161865, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "8a98069a-a354-4b41-b857-b54fb9007b56", "metadata": {"aucs": [0.24983013794454279, 0.23281243511714012, 0.24053030729463365, 0.1737473022990491, 0.16246592065466792, 0.2680459413631032, 0.2554952376842522, 0.20388455626245183, 0.2769079540524999, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05199221795931319, 9.999999999998899e-05, 0.07147737237096641, 0.04516355099884972, 0.029927506185440822, 0.09019282637442594, 0.07608506386203284, 0.012716917790323357, 0.043938406477710856, 9.999999999998899e-05, 0.04845028578768129, 0.0824178894999752, 0.020821372230871216, 9.999999999998899e-05, 0.0177838126362303, 0.08104397052820245, 0.09835596973894567, 0.054485562044747526, 0.04869491765289391, 9.999999999998899e-05, 0.9719652057569474, 0.9817605514672373, 0.9851030965813737, 0.9784483311830044, 0.9791844322475463, 0.982887973005491, 0.982470291980261, 0.9785817105248209, 0.9831479947518302, 0.10744382835825383, 0.08690641807992161, 0.06063787518951014, 0.0848803108454873, 0.14980227522586387, 0.077371340803706, 0.03475972623871182, 0.0628948514067561, 0.08919171444621843, 0.209677174613359, 0.1039251028578354, 0.08655058809164107, 0.2039645414469753, 9.999999999998899e-05, 0.0010973542778063283, 0.11843442480402955, 0.0065497954352542465, 0.13969895664906562, 0.07166889692724476, 0.09264217706253308, 0.11605456771719602, 0.00010388482582457392, 0.011553631850615198, 0.03257208128626976, 0.0657589509214569, 0.016915294621136168, 0.0770943936307027, 0.11572753087608545, 0.032412729270282714, 0.03334745606936196, 0.08711775162474622, 0.0015338609722531649, 0.026461571042132315, 0.12817310106440605, 0.0017722026952544656, 0.03079803437886386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004372992630297112, 9.999999999998899e-05, 0.005045035755518068, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008135172474073027, 0.03816876276892511, 0.10208534601313435, 0.07428661480783827, 0.0304242687517724, 0.021818085811093457, 0.14491027446563054, 0.064433185914893, 0.04925698649250243, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010715029707586421, 0.002021875706523457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001241020906652901, 9.999999999998899e-05, 0.0010162870568232174, 0.0008065681314883832, 0.0002879076078430298, 0.0010474094995701622, 0.0006479470861894265, 0.00036329323201478303, 0.00030178235339606285, 0.00015245215175652138, 0.04504408389201986, 0.19104182773797673, 0.14051372837851828, 0.33925951179258207, 0.1893495155611724, 0.23950725885766655, 0.17717915257394523, 0.2741778551890378, 0.25832210892629004, 0.1765588641313558, 9.999999999998899e-05, 0.04298936345665827, 0.05845032728436561, 0.0029240521373998796, 0.10663705884288233, 0.08368787610513806, 0.08872109993071986, 0.05346513470418646, 0.04657473221368669, 0.22621840768296564, 0.15789978200242605, 0.19063681934096777, 0.08021432033886378, 0.1741490772541936, 0.21468196968240993, 0.0951855824958675, 0.21845824728903163, 0.16432589203247494, 0.14774388190809862, 0.10897461933121955, 0.1719505550127326, 0.35710235149178915, 0.09004302218776616, 0.15146587987829496, 0.1731120032656006, 0.14564994411828824, 0.14846781732018843, 0.19722626420076284, 0.06385143413508321, 0.05521470471091905, 0.12091499179687848, 0.07873072034896322, 0.07790705450254332, 0.12435329609979962, 0.04554897955239379, 0.04002991565690828, 0.19829235947653545, 0.16692270604876847, 0.1799991264165559, 0.23816229133377642, 0.10837174923143789, 0.17408417059326042, 0.20454662413172775, 0.11875263121749358, 0.18128798333879526, 0.15728920422728698, 0.16663578876348895, 0.1482644245903626, 0.16178163461253192, 0.17555473481571826, 0.15003417319560886, 0.1665490785300906, 0.16116663695663136, 0.1501773088933609, 0.17142362436355596, 0.4363055802235598, 0.16295387838517017, 0.16835600138892404, 0.12624434681350705, 0.20952809875919898, 0.15904509478611728, 0.14779343364231812, 0.16727815647473943, 0.29742234404149726, 0.11288292078947393, 0.14001244453058914, 0.08049399566170468, 0.16827483128976983, 0.14186447065333718, 0.29267726502937175, 0.14042452372360037, 0.17991323290639794, 0.20122878670041255, 0.1868332412532432, 0.18387588864929683, 0.19093546038105225, 0.17803054673425778, 0.1794078712802042, 0.1815999597744471, 0.18514381230172883, 0.1953918155255011, 0.06553846228209459, 0.050937160536769444, 0.04523924536426327, 0.06416286510031732, 0.02663979885615031, 0.046413782023972616, 0.09185839836623577, 0.024488048951804897, 0.07441379560127492]}, "mutation_prompt": null}
{"id": "89de90da-940c-4011-8733-095b906eccd8", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 3.5\n        shrink_factor = 0.92  # Line changed\n        success_rate_threshold = 0.2  # Line changed\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.03  # Line changed\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / self.budget))\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Adaptive hypercube adjustment with dynamic exploration-exploitation balance for enhanced refinement.", "configspace": "", "generation": 45, "fitness": 0.2453512453959204, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.24.", "error": "", "parent_id": "8a98069a-a354-4b41-b857-b54fb9007b56", "metadata": {"aucs": [0.759391263524468, 0.7295852609259446, 0.7263579699428733, 0.7292198353969661, 0.6860333910007298, 0.7668175779621562, 0.7512574332457016, 0.7416773174606532, 0.7311419841715396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.044575178110337066, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0996272961868423, 0.1092960936959938, 0.10602497847585879, 0.11056264333286381, 0.10321958478649162, 0.09323836526283213, 0.1258499346349441, 0.097003831548368, 0.11355337088490491, 0.09038910046312687, 0.08135093947204874, 0.08505039919484603, 0.08861991727480256, 0.09276143035176954, 0.0332365349345346, 0.085869830506757, 0.09532921517272985, 0.12156171590204956, 0.9925131330411228, 0.9939854493138665, 0.9878554701217004, 0.9857587428912494, 0.9866175913588106, 0.9938434422320968, 0.9915733192658325, 0.9933186919901149, 0.9850306888388278, 0.3757267805501012, 0.45737017493062104, 0.5713031911915977, 0.5509311349088886, 0.46162233567480926, 0.5169732731969993, 0.6516335135526359, 0.4361866218724315, 0.6236172218357818, 0.6662067687144726, 0.5396227210284428, 0.40729415910678946, 0.2863820670151619, 0.3264310472476999, 0.2618174470117738, 0.2259319083867536, 0.23052069302101874, 0.23596524042519673, 0.11274947480161879, 0.10830153484640559, 0.20556657388095878, 0.5307587901793136, 0.10098627029286655, 0.15388494942229214, 0.17031195558778833, 0.1334491611556594, 0.12222865257285453, 0.1470336297666096, 0.11290179351698904, 0.19748530192343683, 0.20029359674583902, 0.2582464588844824, 0.1442947830617286, 0.18717104983237964, 0.1536731721157969, 0.18339571966088963, 9.999999999998899e-05, 0.017421360654468865, 9.999999999998899e-05, 9.999999999998899e-05, 0.004998170096679688, 0.03073999327694532, 0.005555096818368632, 9.999999999998899e-05, 0.03390211692973477, 0.07490947147415461, 0.09014198669353357, 0.054796964742176546, 0.10937742785519022, 0.07447604212029368, 0.02325304838562936, 0.030161447681760323, 0.022733755941178657, 0.03334376574564435, 0.07030611016136334, 0.09296611018129897, 0.10041440546134672, 0.13928781004642965, 0.25799877140811023, 0.21877560633916016, 0.1165574438678868, 0.09244840844889335, 0.06873800288217613, 0.2052329676896486, 0.09230526453789933, 0.07364764582738959, 0.09697988203406982, 0.17976327744239484, 0.21051796643788623, 0.06865286851019514, 0.09657384581434181, 0.1912000625793704, 0.4479147596218095, 0.4199777227064938, 0.40916464246867434, 0.4628304769978031, 0.5070774634979545, 0.4768103902614723, 0.45482702386303697, 0.46887269331247927, 0.4489453234331915, 0.10377125222990802, 0.11088559241617535, 0.10129369288468204, 0.12803671320865284, 0.11646979831123205, 0.08693130038472541, 0.10597653974919541, 0.12427295567206897, 0.12327836728560815, 0.2218683795402333, 0.17166028202391004, 0.2612750150207397, 0.2113285402464028, 0.25551035483177875, 0.1706828068388173, 0.1841832301062034, 0.229477778216159, 0.284653211124142, 0.3176294675693099, 0.3897861219846732, 0.43814534245280323, 0.2935112044916236, 0.2732132934108984, 0.37972553126678943, 0.2045227020128556, 0.2371472839458295, 0.30738354283392566, 0.23749470705129339, 0.25452992733151236, 0.2093141695096753, 0.21958053468740202, 0.35908337019055736, 0.2783650277438594, 0.1643492078198744, 0.2112555031483062, 0.1646054633031656, 0.19080180203801345, 0.23995666881421396, 0.22116951943910945, 0.20534159749953773, 0.22711611009017274, 0.19807087878266516, 0.221933379928833, 0.24322036634703859, 0.24368407942853532, 0.20107692958383927, 0.18400982366328467, 0.18054852617632822, 0.19946570047372247, 0.1864058112721264, 0.2084660781533444, 0.18819606794417199, 0.19052039225076356, 0.19827700737001108, 0.15355867829295744, 0.13351177524368762, 0.7761484416606531, 0.1666939149757074, 0.2078713857611113, 0.12176572504240335, 0.10771571164462335, 0.1239817288030094, 0.1509759415515457, 0.15118434871480435, 0.20003159086302924, 0.0824253583702812, 0.10922468805622065, 0.20348866247754116, 0.04343808125868387, 0.11230634520419247, 0.16448570397909812, 0.21028724261913023, 0.1885954565809963, 0.18945249668151032, 0.24945697080825702, 0.19836607337307688, 0.19233098421355366, 0.20971798360002636, 0.22186526250669691, 0.19354727252039172, 0.2115503539171818, 0.08564813058397447, 0.08410415969806595, 0.09808711778325419, 0.08425416610493541, 0.10483278517934635, 0.10972374622778258, 0.0870966651056766, 0.09569741569314283, 0.07982200527718164]}, "mutation_prompt": null}
{"id": "632a3127-4ba3-47af-adac-1ed27f1f0b05", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 3.5\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                exploration_factor = np.abs(np.sin(self.evaluations / self.budget * np.pi / 2))  # Line changed\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim) * exploration_factor  # Line changed\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / self.budget))\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Dynamic adjustment of exploration factor based on evaluation progress to improve convergence speed.", "configspace": "", "generation": 46, "fitness": 0.12896717137212593, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.20.", "error": "", "parent_id": "8a98069a-a354-4b41-b857-b54fb9007b56", "metadata": {"aucs": [0.3052707934264647, 0.18476384614206343, 0.30777913848076444, 0.2692631902775471, 0.20504740895409979, 0.1607341186233553, 0.23070558301201172, 0.21838266476794965, 0.21745122730438282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05931886780601214, 0.0443200666945619, 9.999999999998899e-05, 0.014793480474583509, 9.999999999998899e-05, 0.007170165598384126, 0.06549349364418322, 9.999999999998899e-05, 0.01735868543488528, 0.08842983877411503, 0.061522039083937274, 0.0067977695973385766, 0.028598316343769525, 0.05605970379968728, 0.04546875297357689, 0.0508326091294482, 0.08069568442120123, 9.999999999998899e-05, 0.9717102441685601, 0.9783098059170606, 0.9840898653420889, 0.9804432153866544, 0.9707970297210617, 0.9828414079849827, 0.9569306344603771, 0.9782212716327054, 0.9827170668037918, 0.14467655193732065, 0.07666234118949855, 0.06101446157808155, 0.1231510764185525, 0.21391866087743105, 0.1288035745684356, 0.08835917207465938, 0.02779932210093994, 0.09322622877009801, 0.18729685466102242, 0.032533915895549215, 0.03293669123685106, 0.061741726771066374, 9.999999999998899e-05, 9.999999999998899e-05, 0.07819573638030286, 9.999999999998899e-05, 9.999999999998899e-05, 0.031327036731022107, 9.999999999998899e-05, 0.08510745574772027, 9.999999999998899e-05, 9.999999999998899e-05, 0.03465688841040315, 0.019181178128283904, 9.999999999998899e-05, 0.12271246439787975, 0.11983456263086645, 0.023878379679064476, 0.002518563748547753, 0.11772267479991749, 0.01794816362142415, 9.999999999998899e-05, 0.1276849258649687, 9.999999999998899e-05, 0.01602963571871019, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012419678987151128, 0.04388771789505497, 0.10513982755359741, 0.09151207989403998, 0.043170681715626213, 0.03782138683494962, 0.13822764105257845, 0.044110299854988044, 0.03840726811404016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02187824511598524, 0.0037318203830467578, 0.006631331117036288, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009402242808539407, 9.999999999998899e-05, 9.999999999998899e-05, 0.016352598932084406, 0.21989017623675478, 0.13693867940393722, 0.29691153839592543, 0.2829571515867485, 0.20559007090202164, 0.17228149117588765, 0.24738521366147037, 0.25927683664079526, 0.24313371489342428, 9.999999999998899e-05, 0.05997846219350189, 0.05984648885667598, 0.008771369534990692, 0.030809397378371628, 0.07445681599524268, 0.05083790996643944, 0.013454573447225782, 0.029143553866708638, 0.08562353488019125, 0.14871701226941036, 0.23159959968508204, 0.09375523177333978, 0.1387500023843644, 0.15626714587318036, 0.1297384752381897, 0.15320766110106065, 0.14159278835767342, 0.2807705680541388, 0.11799442366641122, 0.12770715933649313, 0.25019557729009845, 0.10010470109478287, 0.12639694335127427, 0.16670968127076902, 0.08407118170058403, 0.137889959632431, 0.08543325243223665, 0.07471882186531142, 0.04964101760713002, 0.12951747385357337, 0.02712419900939045, 0.06561680665920411, 0.08239263873056957, 0.029265515414875876, 0.060430920315887704, 0.18422230419608054, 0.07168715796215708, 0.13866287724166637, 0.19097920322664008, 0.06277093883304208, 0.11634873068488427, 0.18860954055250945, 0.07960847505449742, 0.15868794808446018, 0.15535315125241378, 0.16067927940686477, 0.16775419302150352, 0.16066181934724244, 0.16300914862671612, 0.1781711006335419, 0.16805735147501888, 0.1490368249410241, 0.1483078042340742, 0.15830510472989967, 0.12023576371822642, 0.4680355841606827, 0.21810205869153731, 0.11332291079882617, 0.21287096991822185, 0.1300161068921336, 0.11958736863437791, 0.16557748364560898, 0.16627044509543887, 0.14352425084088194, 0.1150275533647136, 0.11927723687093894, 0.20264300716027595, 0.17142561782016985, 0.30158477940714634, 0.1595882211843609, 0.1927116703675884, 0.190347916584804, 0.17767316367866937, 0.18478492314526107, 0.1936269523558526, 0.1810600454900072, 0.17592032265960444, 0.1903102977550566, 0.19087319046735207, 0.19179778223247868, 0.06454474897104523, 0.02325255522485603, 0.04268481239101496, 0.057915596908211464, 0.01395654112283884, 0.039042879375931094, 0.09064480918213635, 0.01853026741828634, 0.06344317159383261]}, "mutation_prompt": null}
{"id": "d57c6ec2-5c57-4844-9b83-b78fca5e3f2f", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 3.5\n        shrink_factor = 0.9  # Line changed\n        success_rate_threshold = 0.3  # Line changed\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02  # Line changed\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / self.budget))\n            else:\n                hypercube_size *= (1 + (1 - shrink_factor))  # Line changed\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Improved exploration by dynamic hypercube size adjustment based on past success trends.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "An exception occurred: OverflowError('Range exceeds valid bounds').", "error": "OverflowError('Range exceeds valid bounds')", "parent_id": "8a98069a-a354-4b41-b857-b54fb9007b56", "metadata": {}, "mutation_prompt": null}
{"id": "61848073-a4eb-483a-99b0-16c9ed1028bf", "solution": "import numpy as np\n\nclass AHSA_DN_Improved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 3.5\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n        persistence_factor = 0.5  # Line changed\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                if np.random.rand() < persistence_factor:  # Line changed\n                    direction += np.random.uniform(-hypercube_size, hypercube_size, self.dim) / 2  # Line changed\n\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position\n                    hypercube_size *= shrink_factor\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / self.budget))\n            success_count = 0\n\n        return self.best_position, self.best_value", "name": "AHSA_DN_Improved", "description": "Dynamic hypercube refinement with adaptive candidate selection and directional persistence.", "configspace": "", "generation": 48, "fitness": 0.20696208977707006, "feedback": "The algorithm AHSA_DN_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "8a98069a-a354-4b41-b857-b54fb9007b56", "metadata": {"aucs": [0.29590535453579947, 0.6736433121821161, 0.6863125340112963, 0.33428604199710976, 0.49713164320985015, 0.5909624598812727, 0.3066875489204596, 0.3481544220654573, 0.34266109058439065, 0.017925528026933035, 0.0004431071589148239, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03750872845939435, 9.999999999998899e-05, 0.07580396247707888, 0.08818297358037308, 0.07446695018279803, 0.15354103050285373, 0.07596032793888952, 0.10068322222467163, 0.0917723475758101, 0.12808592080491876, 0.08889048189918847, 0.05676173424225783, 0.06699859274926312, 0.0782638831418091, 0.08357206120099159, 0.07422508482181134, 0.08173793812585262, 0.09398886194617939, 0.10336201683915824, 0.08124167402105109, 0.9948853506722755, 0.9926023384409516, 0.9875558895578677, 0.9931935416730745, 0.9827644322120754, 0.97627339843754, 0.9875977747102702, 0.981987340412037, 0.9896075071398757, 0.261639123848867, 0.46129099668446505, 0.4633706228636898, 0.46808265459698584, 0.36796885942355884, 0.34042803234325425, 0.20888210596065204, 0.3220474144555914, 0.46151072251246483, 0.19922142104395235, 0.2690346709649126, 0.2688228235061513, 0.24592874918234342, 0.2070499510637276, 0.3146424750018362, 0.486890041961202, 0.26618278347533175, 0.6171755279690373, 0.08491262935689114, 0.149772404443551, 0.10950711265148616, 0.08194111323365183, 0.12527130604147896, 0.09433630020499129, 0.13029852590082813, 0.15899490636679803, 0.09123358566685125, 0.11452293499656807, 0.11900117155500867, 0.1238586539796177, 0.06564975687582919, 0.15517863955956657, 0.08831466793685849, 0.15795787501369707, 0.11640180637664999, 0.08444459571357654, 9.999999999998899e-05, 0.03450305759777783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02802311473729624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10067685240439006, 0.07068739918620925, 0.039938893310433876, 0.040273819111619424, 0.05167276973376378, 0.01208276828277377, 0.06299175652149225, 0.06916275390728444, 0.09330362434637007, 0.016220307212965634, 0.0763897518175981, 0.16351944097159665, 0.1247697359262504, 9.999999999998899e-05, 9.999999999998899e-05, 0.04584802098592322, 0.1437036194047796, 9.999999999998899e-05, 0.13786699517529755, 0.05238177505358721, 0.1058507516183197, 0.1213911779096446, 0.06058453028346378, 0.01666809331441732, 0.14734838790603189, 0.02939279515394244, 0.033465935005049685, 0.3499988412557423, 0.45148802594709414, 0.41269060843630023, 0.29940957437569715, 0.3259976260035422, 0.3279872736947508, 0.2723541279370121, 0.3402436646335052, 0.42184967891018754, 0.09046128623385519, 0.09682710765221059, 0.09653028536990294, 0.10174935920443773, 0.10247927487995423, 0.11268135513053945, 0.10092627841672475, 0.0974788223238765, 0.11344116529029746, 0.14005691848013135, 0.15952699072940724, 0.13166782484373707, 0.18303518360996307, 0.16421098661849043, 0.2769419306668496, 0.1649405479702305, 0.20067449597445353, 0.18184701105333823, 0.2978987410485282, 0.24722123209729974, 0.3467901290810338, 0.22249050938386394, 0.24177729316915164, 0.3144536711528598, 0.2617803865332369, 0.23036927792382955, 0.3476410198977836, 0.196268843458001, 0.16456133623021574, 0.11556386473240854, 0.15637821100811378, 0.1631724202948388, 0.15554221824599967, 0.16415791657319767, 0.23789443328744475, 0.15666344337082172, 0.20963899213968984, 0.19692803401373427, 0.21348110940188247, 0.2034539697166351, 0.1913510404462131, 0.1850404084287155, 0.1909778578267337, 0.20038540278563466, 0.20405798930379182, 0.1793295672708507, 0.17862535890821696, 0.18354678771965816, 0.1745487932142118, 0.17589941673086285, 0.17852025043974973, 0.16812596099020993, 0.1767366991025976, 0.16914096410841706, 0.15227643124526857, 0.12893469348089126, 0.3483518136940362, 0.6585882145413862, 0.18865812098112067, 0.12139832398818762, 0.12749858836084582, 0.14172071977492828, 0.14680669749282038, 0.48858834862339473, 0.11149295018851013, 0.15202725940521378, 0.3052344315850549, 0.5101438482234846, 0.19641443399495662, 0.10795933057105145, 0.16623497803737175, 0.3340335661628746, 0.1922257320927654, 0.22855186063967803, 0.21381941296029394, 0.17942445079507818, 0.17786448590151727, 0.1787514993010474, 0.1799149641585358, 0.1815249449543458, 0.1791639611520588, 0.07978756168032652, 0.08174526322147835, 0.06610381166426527, 0.0807929729027419, 0.07865476000419735, 0.08770754512099344, 0.08390836475234753, 0.06652260407189226, 0.08536115226938468]}, "mutation_prompt": null}
{"id": "02536f24-ef0c-4bd8-a994-f3817c158234", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 2.5  # Line changed\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / self.budget))\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhanced hypercube adjustment by tweaking the initial hypercube_size for improved exploration.", "configspace": "", "generation": 49, "fitness": 0.24672258775361394, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.24.", "error": "", "parent_id": "8a98069a-a354-4b41-b857-b54fb9007b56", "metadata": {"aucs": [0.6610437836024441, 0.7228563477283769, 0.7583756885874601, 0.7204444726721111, 0.7780289494763206, 0.7857253614164738, 0.7583289008824903, 0.7260692974569243, 0.684560486331411, 9.999999999998899e-05, 9.999999999998899e-05, 0.012117941006486777, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1196724556804617, 0.07972682743026926, 0.10724533067583886, 0.10706324311780102, 0.07240344989723835, 0.10314988346571408, 0.12814159936165648, 0.1016278410058521, 0.12940243206001867, 0.08548280313831036, 0.0887763983275669, 0.09286331463739628, 0.09015329779069192, 0.09230536052778338, 0.09261849925765109, 0.0981976624554518, 0.08043037227951211, 0.06279311635536944, 0.9923983942234759, 0.994719824809417, 0.9883434675503835, 0.9863724043768428, 0.9869240711127355, 0.9940016059818918, 0.9945938392937757, 0.9944054444312449, 0.9856499603225306, 0.40164789449004534, 0.5889301273875482, 0.47426495420116743, 0.6735948282550196, 0.6316637552940585, 0.3371780819306679, 0.5094218491328736, 0.6374929642906729, 0.45488138119803345, 0.19659705210274314, 0.24098798304861024, 0.20620250452678823, 0.19969853628017886, 0.25482239279681784, 0.25783486882000595, 0.7767323553662747, 0.3283902386828501, 0.2195119520450336, 0.12347709035632126, 0.11195768111827875, 0.12189044483241451, 0.15060724440417728, 0.15328736642054175, 0.17023588595532513, 0.13175688188487433, 0.1548438977907204, 0.1420026020038606, 0.13165980168667923, 0.10238228275588712, 0.13166711566070266, 0.11866080468507056, 0.1696423537409466, 0.11763938229234083, 0.12680565070671568, 0.1229951797353589, 0.12746859818537104, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0577140643032652, 0.019907347686904497, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06142867444512157, 0.05979748610204316, 0.0805496556582842, 0.10527961425577037, 0.09299190405426738, 0.029259161209189366, 0.08269436864107715, 0.034451854425980866, 0.08375977748337737, 0.03464972621611229, 0.08345665302288086, 0.060677798084612045, 0.0561646432001236, 0.2125588774007976, 0.06151793707243092, 0.04654230538442805, 0.28038210792542373, 0.0798258209160373, 0.06390381187404981, 0.20137370386905218, 0.0629403331880356, 0.09480515610823714, 0.18495275408845857, 0.18755922172565398, 0.06823504007941372, 0.052343221977440235, 0.2604816276038905, 0.4247256476299932, 0.46714303434937765, 0.38852126981242996, 0.5334099253873534, 0.4315691858423576, 0.4251944491559231, 0.5243878416090854, 0.45200928791466877, 0.4255411342050771, 0.0785948269775325, 0.10002719167930596, 0.08169049841005693, 0.09166728691798398, 0.10036903314293155, 0.08742466934772497, 0.46813586587200773, 0.10843552277846735, 0.07933368934468599, 0.16586989037087985, 0.1642085669938006, 0.2366089927882703, 0.27650347343901016, 0.21266902040271318, 0.27954192612995543, 0.17204056116204303, 0.2624503228998395, 0.21818254350152788, 0.3290576713736363, 0.34390583424293975, 0.37081006538796146, 0.22379790143986977, 0.34317846808209707, 0.2666924344789906, 0.29333665551419985, 0.26760457326919984, 0.26268526161800987, 0.27279594822641795, 0.17887176830894824, 0.19658803276053094, 0.17230389010590752, 0.2256720287260866, 0.18819619106214291, 0.2514267777751684, 0.19462281420228478, 0.22817844610906868, 0.23372110792614853, 0.23813097484249446, 0.2340575093850642, 0.1937591572346119, 0.21106076341056068, 0.21184193702461473, 0.2125308510076539, 0.17710565474686357, 0.1927149544712381, 0.17946738642453874, 0.16802339540392952, 0.1731548762898123, 0.208878384184923, 0.20536979894764218, 0.219259328491475, 0.19060872520661964, 0.16831285055792145, 0.16368797346540254, 0.16780694767667026, 0.1316310756469944, 0.7502144019754896, 0.6943607389578945, 0.20329034738605645, 0.15957421649089687, 0.7461311564249972, 0.12166872155459496, 0.15944182535111062, 0.12375610039255402, 0.1965276107946532, 0.6503450670708513, 0.12410889549538318, 0.4417835680033393, 0.1982857648926608, 0.1238766761422394, 0.16019697817248202, 0.20597272928162336, 0.19474547778893592, 0.17782705032442514, 0.20747961006000581, 0.1989233129787259, 0.20758892875854862, 0.1855564823418644, 0.18820887206224157, 0.2643335088337818, 0.23919141508470776, 0.06559785144530139, 0.07791891634582115, 0.08613063329422532, 0.08942602573696934, 0.09379665971709705, 0.08831714965014414, 0.08269299533451901, 0.09504263821309344, 0.0851097945350251]}, "mutation_prompt": null}
{"id": "df091bbe-26da-4642-af69-cd1e0db7b9c2", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 3.5\n        shrink_factor = 0.9  # Line changed\n        success_rate_threshold = 0.3  # Line changed\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                hypercube_size /= (shrink_factor * (1 + np.tanh(self.evaluations / self.budget) * 1.1))  # Line changed\n            else:\n                hypercube_size *= 1.05  # Line changed\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhanced hypercube adjustment with adaptive shrink factor and dynamic exploration-exploitation balance.", "configspace": "", "generation": 50, "fitness": 0.08910093733787387, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.20.", "error": "", "parent_id": "8a98069a-a354-4b41-b857-b54fb9007b56", "metadata": {"aucs": [0.08904791155055714, 0.09578808417599505, 0.1395805760920632, 0.11751934859643476, 0.11143459180863724, 0.1500891003962863, 0.16100845390839236, 0.11942588254075348, 0.16818610331842987, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008914132238024508, 0.014509341763540018, 0.01491904143725109, 0.0014519917592263898, 0.01979800599959325, 0.01828048417874073, 0.019141845792550183, 0.018937236420509596, 9.999999999998899e-05, 0.013876965647706907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9919268013579425, 0.9946681762865853, 0.99193188598636, 0.9939775428915661, 0.9911877165803994, 0.9939403908470635, 0.9943644467617977, 0.9958570414011833, 0.993540892112061, 0.034341279723816065, 0.024450634925685666, 0.004993641466311205, 0.0032725765843258925, 0.023083214093291615, 0.019109121059303846, 0.0381931289515538, 0.059231905846467425, 9.999999999998899e-05, 0.03734595938452512, 0.05533872001104723, 0.04894618543555784, 0.07820885617416407, 0.10823222018809775, 0.06680026912945236, 0.029788618747962792, 0.07711675726434364, 0.09510578412235648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0015587714778499961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14404911517277086, 0.13426793152627414, 0.12735287583670452, 0.1413288404257692, 0.13227346755039215, 0.13751347683437087, 0.1406873289018069, 0.1306439876187645, 0.16746781517597886, 0.017268416138659037, 0.01230467069468233, 0.016277943708502662, 0.027902911385135343, 0.027643694973302768, 0.02550336560144062, 0.013166783229481172, 0.031229080056188296, 0.014644953278998951, 0.09679387426814934, 0.10237959569082411, 0.093372816902354, 0.07642794303337719, 0.14994921053531984, 0.09613907130316002, 0.07449396818029186, 0.07286763440212163, 0.07458117336867143, 0.10392210688990144, 0.10458058704357265, 0.10454283718076163, 0.1227637149140306, 0.13091527362600153, 0.1197636333104205, 0.1159981237682246, 0.12421000504376911, 0.12259341113556532, 0.07286981986068897, 0.07003256646653533, 0.04584383786785162, 0.06664103798568344, 0.07182225325980396, 0.05110309005656399, 0.08050838911118485, 0.09397125628193825, 0.07034873181823242, 0.1124601122555996, 0.09546102499350795, 0.09830405685181998, 0.13692370438618073, 0.11821023509929707, 0.10464302484194454, 0.12245976138762271, 0.08672144948608218, 0.1274059020997118, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1431101177320162, 9.999999999998899e-05, 9.999999999998899e-05, 0.07583115381127792, 9.999999999998899e-05, 9.999999999998899e-05, 0.08045464814806669, 0.08842304524048472, 0.07622591167471005, 0.0932345548080179, 0.10653830728486013, 0.08985264756679279, 0.15222965762046792, 0.106763631545847, 0.0688663602797207, 0.06998166549268359, 0.07581723494943471, 0.06844270139495479, 0.05526249094261804, 0.03723780041956182, 0.04898280271844413, 0.0710816105984009, 0.06106907005873896, 0.11126198365135931, 0.15248696405535034, 0.15508851815844604, 0.15400187482983985, 0.14997015033255479, 0.1523927012232389, 0.1499243170297324, 0.14373838130849692, 0.14277380874977974, 0.15311372429370518, 0.029290163105756828, 0.03994011500799266, 0.03319006185854434, 0.02138361748725348, 0.024998716516194563, 0.009218114137177325, 0.025836327870896847, 0.02048635012492983, 0.01742763370065381]}, "mutation_prompt": null}
{"id": "ed0652af-e31d-4982-8a58-d508b6a30a8d", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 3.5\n        shrink_factor = 0.9  # Line changed\n        success_rate_threshold = 0.3  # Line changed\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    # Adaptive exploratory step scaling\n                    if candidate_value < value:\n                        shrink_factor *= 1.05  # Line changed\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02  # Line changed\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / self.budget))\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Refined dynamic shrink factor by integrating adaptive exploratory step scaling to enhance local search adaptability.", "configspace": "", "generation": 51, "fitness": 0.24959638202450285, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.24.", "error": "", "parent_id": "8a98069a-a354-4b41-b857-b54fb9007b56", "metadata": {"aucs": [0.8191435671813905, 0.790953477884792, 0.7920573593509399, 0.7706664558200332, 0.724303264289054, 0.8326407103017811, 0.8532952559754527, 0.8461599581137347, 0.8314311869635291, 9.999999999998899e-05, 0.03854812202638236, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036646194395735576, 9.999999999998899e-05, 0.10023733034811722, 0.08782168461982187, 0.09630194030353645, 0.0956224378080417, 0.07471150554957406, 0.11259803768416698, 0.13466298638440455, 0.09305558531449276, 0.08976437367292744, 0.10899441759588191, 0.08976740043168685, 0.07616664969800202, 0.12159737915042101, 0.10213856086273632, 0.13541756651855008, 0.047463288936412606, 0.09570149741874989, 0.07406535578433449, 0.9920445774553283, 0.9938846199853039, 0.9861170998359835, 0.9799430566353223, 0.9807564610473446, 0.9938439392928539, 0.9841668125615461, 0.9932725586969231, 0.9764789253390656, 0.43092495487229787, 0.42861711577450823, 0.36873661656900936, 0.351850851632037, 0.4050507971601024, 0.46267096506902683, 0.4748057806366669, 0.3215245430815701, 0.5242441477862296, 0.3387227129440591, 0.3095727085459593, 0.2247669209265175, 0.26164682932127603, 0.3305244493907713, 0.27508929503134316, 0.22968609329069012, 0.8004931993208927, 0.8870632760921272, 0.17407802449789778, 0.2194386974679846, 0.12609503484864004, 0.09874383671407339, 0.1488053574225785, 0.18169702920857367, 0.17728492891758252, 0.15431991207114437, 0.22577129921399008, 0.18773888216567935, 0.13402574945024714, 0.13569087031260008, 0.11126667717630334, 0.21538882627254374, 0.15854498341168288, 0.13085639128730742, 0.12819873951449967, 0.12300732458714536, 0.046117260188142106, 0.06751097778528659, 9.999999999998899e-05, 9.999999999998899e-05, 0.058240950305489037, 0.017053918945135083, 9.999999999998899e-05, 0.005534609749220043, 9.999999999998899e-05, 0.025303496623789723, 0.08519363394865864, 0.12842096103107847, 0.07943016100831679, 0.07427765277041343, 0.023378056639530076, 0.029054418006048577, 0.02691146518258647, 0.040413518301307905, 0.15939677561693266, 0.07693263305867859, 0.028783909689976683, 0.2298522024330929, 0.08564628430032895, 0.0844547800599208, 0.09741500703707717, 0.08704708766430791, 0.17047095199082762, 0.20275719730822073, 0.08915942920790254, 0.07737849531352803, 0.13077034061712633, 0.290248613691224, 0.16784196914163585, 0.14924617120967254, 0.17999258506929605, 0.13848040489744418, 0.524287602141597, 0.4460150125096829, 0.5603935383268348, 0.4589274087545189, 0.47876179222459514, 0.48422532988559963, 0.44855730291333007, 0.43013867327760524, 0.4535128487645529, 0.11437249747528622, 0.11577561631832034, 0.13202651097962315, 0.12308347253570628, 0.14684436209266039, 0.10550847468159574, 0.12842686135089776, 0.10995277146914795, 0.1378950461386712, 0.23888524502322428, 0.15182142582428115, 0.2945965686970241, 0.20198887134106813, 0.18752789898629807, 0.16708955323059105, 0.19293801079391648, 0.20026748440973152, 0.23479061560760883, 0.47447172634484003, 0.4498903566232517, 0.24099341530416862, 0.416409401538109, 0.30503580237623373, 0.32905022437807463, 0.24728282605720042, 0.22585863602557044, 0.34043883950844234, 0.3367018301910917, 0.2589165403096505, 0.20624925218119183, 0.31908880743101387, 0.20880766097799353, 0.28683226915065985, 0.22942104738253588, 0.19703121397411838, 0.2551809740621538, 0.28747704434726107, 0.24053264871889535, 0.24050000348971168, 0.22418564960814436, 0.20939301074904315, 0.22002995987049312, 0.20903523763252085, 0.23689858244815076, 0.1725941918145103, 0.17840161703452673, 0.19752428872249173, 0.1939686245392922, 0.20387541598457393, 0.2017808742785323, 0.19082073297288715, 0.1940088711149901, 0.18973444402546924, 0.19483195939889075, 0.18664813722498108, 0.13443850131079138, 0.16672539715459012, 0.8395890880842918, 0.2087064090401729, 0.12231438118973603, 0.13562480651265796, 0.12449713011666885, 0.15911801156268135, 0.15564682498028082, 0.2087015268291842, 0.0829180704109862, 0.11157634580700737, 0.20983779969794147, 0.043949973666926545, 0.11280273807545349, 0.1694663680236248, 0.2136162123894656, 0.19266866545844763, 0.20118895609830845, 0.200766081539967, 0.20070989594132937, 0.21226174826656874, 0.2009042065058978, 0.21553838827636806, 0.19616734870818875, 0.22116279805471406, 0.1005690728103944, 0.10612203659014652, 0.10207396876926378, 0.12738298456022135, 0.08158403352626464, 0.14368476821038167, 0.11095677750002997, 0.07240358720206108, 0.0954293588638555]}, "mutation_prompt": null}
{"id": "186bd646-f832-4c0c-8c9a-5d86d56f6164", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / 3.5\n        shrink_factor = 0.95  # Line changed\n        success_rate_threshold = 0.25  # Line changed\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    # Adaptive exploratory step scaling\n                    if candidate_value < value:\n                        shrink_factor *= 1.05  # Line unchanged\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02  # Line unchanged\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / self.budget))\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Improved dynamic adaptation by altering shrink factor and success rate threshold for enhanced exploration-exploitation balance.", "configspace": "", "generation": 52, "fitness": 0.2464780224362825, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.24.", "error": "", "parent_id": "ed0652af-e31d-4982-8a58-d508b6a30a8d", "metadata": {"aucs": [0.8192012103441625, 0.7925104599278685, 0.7976101947766936, 0.7707073902557033, 0.7584604479906574, 0.8527106191655999, 0.8296928666079828, 0.8463834098719744, 0.7767063293406498, 9.999999999998899e-05, 0.044885031210783355, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036647845574145355, 9.999999999998899e-05, 0.10029888654606944, 0.08518866656350343, 0.09584720835226113, 0.09561720424995834, 0.07471140609244742, 0.11216270270223216, 0.09148688742921318, 0.11172327781621938, 0.11026891889604107, 0.13533903066566522, 0.09986398849989486, 0.07615462217182101, 0.12159416531043044, 0.1035410532508435, 0.08076419726446493, 0.04746285888964774, 0.08562442359801803, 0.09931091582231, 0.9920147327175916, 0.9939176087336645, 0.9877713368981805, 0.9820480568477921, 0.9810231733701081, 0.9938620036845978, 0.9884852806378265, 0.9943555295504329, 0.9834397377040704, 0.39371317022478014, 0.3835395834875863, 0.6113387713992864, 0.5432462981311131, 0.5524715491853542, 0.44551336994668533, 0.4800734440381611, 0.41948060671071075, 0.41424154981472494, 0.3387227129440591, 0.3095727085459593, 0.4499313462439617, 0.26164682932127603, 0.2676069689643483, 0.26654005343512555, 0.22968609329069012, 0.23014355028490163, 0.23785461650557438, 0.17392571559309067, 0.1342427286314809, 0.12855880978907241, 0.09874746152939096, 0.16954354917067116, 0.1813983687590004, 0.17848190309119039, 0.16717319955797216, 0.22535354140688102, 0.18624952278325035, 0.14600710090456814, 0.13317212153784008, 0.11179499798816683, 0.15206267875062007, 0.15768269758914244, 0.1309184982861905, 0.1291684831131028, 0.1354571473042242, 0.04635525451089073, 0.06741377689195527, 9.999999999998899e-05, 9.999999999998899e-05, 0.05775564495217367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02514166753006375, 0.08515877904232816, 0.12847655607024022, 0.0794310106144569, 0.09193464522931294, 0.024497504765843447, 0.03985874050077998, 0.026919927257111342, 0.033167849712427255, 0.15939646839795918, 0.0770371540897038, 0.057897589458626664, 0.2298571021637431, 0.06783259771017203, 0.09208500282433019, 0.1300938670308035, 0.16261718197151187, 0.17047154410340193, 0.2027607522367797, 0.12399344145457725, 0.13678488239940945, 0.13077021665962296, 0.2903174941295785, 0.1582649000398555, 0.1460057197964454, 0.14009002691192585, 0.13818297397872126, 0.5279029135271254, 0.4392981924714501, 0.5603562282364554, 0.4726471044245353, 0.4763271797679085, 0.4897254724435588, 0.44602673746261823, 0.43153882054965864, 0.45465233754122736, 0.11437221786341811, 0.11577559177619001, 0.12168216332053361, 0.1230874066118286, 0.07482607220649318, 0.080689858944052, 0.12842739919257162, 0.13191517885354953, 0.15834020780080793, 0.2380120292443908, 0.20477337661246575, 0.30552984694176955, 0.2019898535241874, 0.18752790835278754, 0.16511418559339996, 0.19783466952879192, 0.1996858646615045, 0.23478801017749085, 0.3425316594218051, 0.4711900884929848, 0.4847864626113205, 0.3699789857376776, 0.37659185813005625, 0.31345555120653246, 0.24728282578321725, 0.22585862645703925, 0.3550060940668627, 0.3364765156338355, 0.24991480637817076, 0.14712927527373942, 0.3190886934532685, 0.20904668797132353, 0.2871051303758626, 0.22941682317251766, 0.1970353308704903, 0.2549024665276485, 0.1770167248719865, 0.19343525837697317, 0.24010715972146057, 0.22418564960814447, 0.23876852847839558, 0.22002147991572052, 0.20903523763252063, 0.2228238629952115, 0.1725941918144961, 0.17840112276317033, 0.212240134740716, 0.1939688692230972, 0.20387589995674493, 0.20177423465307842, 0.19082011933315668, 0.19399533505687716, 0.18973448646343538, 0.23806360969710239, 0.1866481372224471, 0.13443883159480285, 0.16672539856757518, 0.8395890880842918, 0.06588600132794076, 0.12231469955620455, 0.13562480664080123, 0.12449710822236537, 0.15911801353372523, 0.15564595767089262, 0.20869823958800815, 0.08202174643292015, 0.11146608450096995, 0.20983796026154766, 0.04394997377030263, 0.1125381621807241, 0.1694672025412014, 0.21361621092946326, 0.1930384266037326, 0.2021422698120473, 0.20166414440436198, 0.20070989594132937, 0.2122617482665683, 0.20427111893723093, 0.22737948422217702, 0.19766853037138754, 0.2032921491356635, 0.09956308676738879, 0.0868871942684718, 0.08155061641384187, 0.12733596463745922, 0.08487036852024155, 0.14344790530129958, 0.11108437316918718, 0.0775751285231625, 0.0953945037914411]}, "mutation_prompt": null}
{"id": "069caace-27b1-4dd8-9a7f-1d3574ec88a1", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / (3.5 * np.log1p(self.dim))  # Line changed\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    # Adaptive exploratory step scaling\n                    if candidate_value < value:\n                        shrink_factor *= 1.05\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.1)))  # Line changed\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Introducing a dynamic adjustment of the initial hypercube size based on the dimensionality to enhance convergence speed.", "configspace": "", "generation": 53, "fitness": 0.2518727716629194, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.25.", "error": "", "parent_id": "ed0652af-e31d-4982-8a58-d508b6a30a8d", "metadata": {"aucs": [0.8294409859408458, 0.7746353906115553, 0.7052152790447879, 0.7791100318835549, 0.8642871430677452, 0.9045308100360663, 0.8298402966218451, 0.8258483290219668, 0.7942145550317034, 0.012281073628949146, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08936601056068827, 0.115625272256764, 0.05264092509705465, 0.08633820901323364, 0.10227481808990013, 0.11154302549431849, 0.11116541136090474, 0.13106872336838604, 0.14826722510290258, 0.09630612845167341, 0.1311154452919724, 0.07570746987150523, 0.08099118957911655, 0.06850224029146679, 0.1109023307683692, 0.12087366393284715, 0.09193388950586545, 0.08454428448826479, 0.9885978641485859, 0.9910755624185243, 0.9862162230782299, 0.9520732100781015, 0.9459759531427135, 0.9678342830092445, 0.9593867205623303, 0.9839918624437374, 0.9827706484693574, 0.5411388364453846, 0.8555810754314727, 0.5892325487035601, 0.37456456483752065, 0.7434167592744052, 0.5426235119953619, 0.5072030808352664, 0.5648642958414039, 0.44714787984716353, 0.22951909335189047, 0.14129946006649408, 0.22848701355658563, 0.1961382498694103, 0.25979932994280774, 0.8444922960563447, 0.15253492152757953, 0.2489601779781827, 0.3309628889767743, 0.19676052406497024, 0.19705518113342146, 0.1724280433357206, 0.21318086386845225, 0.19850922155367723, 0.13681039429102582, 0.15769304512309956, 0.19164842187691644, 0.2167336159005856, 0.1363954226226033, 0.19568391922152717, 0.12820016118613853, 0.14768029860410004, 0.1605489303226323, 0.16393496824998588, 0.15590147419451528, 0.1653408446374015, 0.23085647603454296, 0.002673585061321093, 9.999999999998899e-05, 0.03468185219276709, 0.007473969397295832, 0.05996354864296971, 0.028237923276134613, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09508985590394914, 0.07748876509415736, 0.21307893250845544, 0.036363165290905664, 0.04649314452732434, 0.023734670221453258, 0.14041054328847058, 0.026396400157431166, 0.06845423767641445, 0.2716019723502757, 0.032421855252622866, 0.03226437691618067, 0.09112522147186686, 0.15873177126032334, 0.09319501566875754, 0.06242787255532933, 0.09812962031255723, 0.08877794635389002, 0.14427335700494026, 0.08957659266342866, 0.2610355613950245, 0.17157500655188018, 0.14862262743715582, 0.14083593234426994, 0.10827604498929455, 0.18104269695957442, 0.13295087336365718, 0.5271242013007233, 0.4654663890647316, 0.48478896649214753, 0.5361314821770051, 0.5464326453377732, 0.4341772869116982, 0.4490891218842016, 0.48067203290796856, 0.5172244956167309, 0.09206866281183701, 0.08586458383633999, 0.08526815631466966, 0.09398708607797635, 0.14682711073393762, 0.0919459812968032, 0.13418854265291214, 0.11395277264528447, 0.1323055790842793, 0.22529692740974705, 0.24221570037850515, 0.45519845375244905, 0.19016543463190427, 0.2879227896362362, 0.246437528528756, 0.19720956127885625, 0.33357319864007007, 0.29306147306290886, 0.4424222953864294, 0.3821147433896789, 0.18273948361075631, 0.31760702896901516, 0.3721241507831329, 0.15240025855325112, 0.5464454440859752, 0.25162387442648104, 0.12513523537361415, 0.24981453868038206, 0.2947115659508234, 0.09806758882740108, 0.30166403776158723, 0.2768868482470851, 0.1924676624247561, 0.2463973004944905, 0.18862485804698792, 0.10538093665898829, 0.21257112639262643, 0.20377608872961595, 0.20429942637305754, 0.1989728381392296, 0.22366430867650045, 0.1999319403631985, 0.24505656945287224, 0.22490986728549367, 0.18238397150120322, 0.20066583315997555, 0.1751218589183816, 0.20373928510481576, 0.20930287759102195, 0.1908649110606906, 0.1914031999493675, 0.19894824363870212, 0.21521480077467126, 0.20226221541883826, 0.1599106046432871, 0.1368523652584025, 0.10492707594086992, 0.17338476684518156, 0.11262142815526699, 0.06194240020367359, 0.10876903984561015, 0.12590662652094708, 0.1688632209727473, 0.8518417386843534, 0.11312569543615902, 0.08343091116608337, 0.08334056720516725, 0.214109163512207, 0.04438474006057569, 0.11311155848597321, 0.16925782418304902, 0.35759378266516606, 0.20937243289355068, 0.206484497300644, 0.1995771237025814, 0.19596816121221705, 0.20824606187291772, 0.2066871430051188, 0.23819001235840065, 0.20707084361638273, 0.21311236720028526, 0.10072333934017097, 0.10060948332224229, 0.07209180249512392, 0.10089549105051387, 0.06088422555531148, 0.2148131940981428, 0.12947320473681811, 0.13058843452509905, 0.1096187588387203]}, "mutation_prompt": null}
{"id": "35d575fa-cf4e-40bc-8bb5-02473eecc729", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / (3.5 * np.log1p(self.dim))\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n        success_streak = 0  # Added line\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    if candidate_value < value:\n                        shrink_factor *= 1.05\n                    success_count += 1\n                    success_streak += 1  # Added line\n                else:\n                    success_streak = 0  # Added line\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.1)))\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhancing convergence by introducing adaptive step size scaling based on success streaks.", "configspace": "", "generation": 54, "fitness": 0.2518727716629194, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.25.", "error": "", "parent_id": "069caace-27b1-4dd8-9a7f-1d3574ec88a1", "metadata": {"aucs": [0.8294409859408458, 0.7746353906115553, 0.7052152790447879, 0.7791100318835549, 0.8642871430677452, 0.9045308100360663, 0.8298402966218451, 0.8258483290219668, 0.7942145550317034, 0.012281073628949146, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08936601056068827, 0.115625272256764, 0.05264092509705465, 0.08633820901323364, 0.10227481808990013, 0.11154302549431849, 0.11116541136090474, 0.13106872336838604, 0.14826722510290258, 0.09630612845167341, 0.1311154452919724, 0.07570746987150523, 0.08099118957911655, 0.06850224029146679, 0.1109023307683692, 0.12087366393284715, 0.09193388950586545, 0.08454428448826479, 0.9885978641485859, 0.9910755624185243, 0.9862162230782299, 0.9520732100781015, 0.9459759531427135, 0.9678342830092445, 0.9593867205623303, 0.9839918624437374, 0.9827706484693574, 0.5411388364453846, 0.8555810754314727, 0.5892325487035601, 0.37456456483752065, 0.7434167592744052, 0.5426235119953619, 0.5072030808352664, 0.5648642958414039, 0.44714787984716353, 0.22951909335189047, 0.14129946006649408, 0.22848701355658563, 0.1961382498694103, 0.25979932994280774, 0.8444922960563447, 0.15253492152757953, 0.2489601779781827, 0.3309628889767743, 0.19676052406497024, 0.19705518113342146, 0.1724280433357206, 0.21318086386845225, 0.19850922155367723, 0.13681039429102582, 0.15769304512309956, 0.19164842187691644, 0.2167336159005856, 0.1363954226226033, 0.19568391922152717, 0.12820016118613853, 0.14768029860410004, 0.1605489303226323, 0.16393496824998588, 0.15590147419451528, 0.1653408446374015, 0.23085647603454296, 0.002673585061321093, 9.999999999998899e-05, 0.03468185219276709, 0.007473969397295832, 0.05996354864296971, 0.028237923276134613, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09508985590394914, 0.07748876509415736, 0.21307893250845544, 0.036363165290905664, 0.04649314452732434, 0.023734670221453258, 0.14041054328847058, 0.026396400157431166, 0.06845423767641445, 0.2716019723502757, 0.032421855252622866, 0.03226437691618067, 0.09112522147186686, 0.15873177126032334, 0.09319501566875754, 0.06242787255532933, 0.09812962031255723, 0.08877794635389002, 0.14427335700494026, 0.08957659266342866, 0.2610355613950245, 0.17157500655188018, 0.14862262743715582, 0.14083593234426994, 0.10827604498929455, 0.18104269695957442, 0.13295087336365718, 0.5271242013007233, 0.4654663890647316, 0.48478896649214753, 0.5361314821770051, 0.5464326453377732, 0.4341772869116982, 0.4490891218842016, 0.48067203290796856, 0.5172244956167309, 0.09206866281183701, 0.08586458383633999, 0.08526815631466966, 0.09398708607797635, 0.14682711073393762, 0.0919459812968032, 0.13418854265291214, 0.11395277264528447, 0.1323055790842793, 0.22529692740974705, 0.24221570037850515, 0.45519845375244905, 0.19016543463190427, 0.2879227896362362, 0.246437528528756, 0.19720956127885625, 0.33357319864007007, 0.29306147306290886, 0.4424222953864294, 0.3821147433896789, 0.18273948361075631, 0.31760702896901516, 0.3721241507831329, 0.15240025855325112, 0.5464454440859752, 0.25162387442648104, 0.12513523537361415, 0.24981453868038206, 0.2947115659508234, 0.09806758882740108, 0.30166403776158723, 0.2768868482470851, 0.1924676624247561, 0.2463973004944905, 0.18862485804698792, 0.10538093665898829, 0.21257112639262643, 0.20377608872961595, 0.20429942637305754, 0.1989728381392296, 0.22366430867650045, 0.1999319403631985, 0.24505656945287224, 0.22490986728549367, 0.18238397150120322, 0.20066583315997555, 0.1751218589183816, 0.20373928510481576, 0.20930287759102195, 0.1908649110606906, 0.1914031999493675, 0.19894824363870212, 0.21521480077467126, 0.20226221541883826, 0.1599106046432871, 0.1368523652584025, 0.10492707594086992, 0.17338476684518156, 0.11262142815526699, 0.06194240020367359, 0.10876903984561015, 0.12590662652094708, 0.1688632209727473, 0.8518417386843534, 0.11312569543615902, 0.08343091116608337, 0.08334056720516725, 0.214109163512207, 0.04438474006057569, 0.11311155848597321, 0.16925782418304902, 0.35759378266516606, 0.20937243289355068, 0.206484497300644, 0.1995771237025814, 0.19596816121221705, 0.20824606187291772, 0.2066871430051188, 0.23819001235840065, 0.20707084361638273, 0.21311236720028526, 0.10072333934017097, 0.10060948332224229, 0.07209180249512392, 0.10089549105051387, 0.06088422555531148, 0.2148131940981428, 0.12947320473681811, 0.13058843452509905, 0.1096187588387203]}, "mutation_prompt": null}
{"id": "a442713f-de27-4a8f-a435-416a00665da9", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / (3.5 * np.log1p(self.dim))\n        shrink_factor = 0.9\n        success_rate_threshold = 0.25  # Line changed\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    # Adaptive exploratory step scaling\n                    if candidate_value < value:\n                        shrink_factor *= 1.07  # Line changed\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.05)))  # Line changed\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Refining the exploratory step scaling and hypercube size dynamics for improved adaptability and convergence.", "configspace": "", "generation": 55, "fitness": 0.233970250328535, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.24.", "error": "", "parent_id": "069caace-27b1-4dd8-9a7f-1d3574ec88a1", "metadata": {"aucs": [0.6658840086645189, 0.8563125166868869, 0.6868403707085784, 0.9159147133098656, 0.8539742290366727, 0.8454392731029059, 0.7789525950307368, 0.8788787319860288, 0.8518430365510339, 0.1598787114683684, 9.999999999998899e-05, 0.002131553493779803, 0.030626543415113838, 0.0902957885417367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0683857138679439, 0.08611171095191417, 0.036219296981172544, 0.08417366195100662, 0.10785783813839622, 0.06302094689828952, 0.08697111160276094, 0.07794499377928166, 0.059886617221862615, 0.057316759016400654, 0.10354529855785655, 0.10869257546389122, 0.09700286249065959, 0.07543676812298394, 0.08679270136272588, 0.1395145411802332, 0.05130116345946156, 0.06320496063020964, 0.9878994072500618, 0.9911217260529799, 0.9877488945913468, 0.9504491753179661, 0.9401025416653919, 0.2481089645360668, 0.955054759441056, 0.9835138676263362, 0.9464618708362671, 0.3655987816557349, 0.3415351836853192, 0.417660309188568, 0.24207833627368425, 0.355200400870066, 0.6794065265975937, 0.6007566342891134, 0.3955667473886847, 0.6139442082226247, 0.80761602644726, 0.08287541466631432, 0.11916635467238157, 0.2163937053551157, 0.2156410952571638, 0.19445982455606758, 0.15093162238737678, 0.1292795244514211, 0.18022471035267262, 0.22347994832721507, 0.13173557575895412, 0.12901359147587832, 0.16625434010447826, 0.1654383638157222, 0.09307475792575681, 0.16478261943354788, 0.21987080115182722, 0.20340794706293686, 0.13303943033411014, 0.17813415395123156, 0.5178739197199351, 0.16091121907377004, 0.16585771843838337, 0.16418660497683746, 0.12777964392117935, 0.15636949006383005, 0.1728028575376347, 0.09659651006975778, 9.999999999998899e-05, 9.999999999998899e-05, 0.13438925765312415, 0.06688796645032014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10688365273001288, 0.04716375979063814, 0.08831115788474986, 0.19706846625051044, 0.03371780045555328, 0.038536270565459385, 0.0077589803769242405, 0.20860581542132461, 0.03418485218756595, 0.04859843845065448, 0.18502296038164412, 0.039171187481159775, 0.12522095424549318, 0.07286474067912008, 0.059607936468818346, 0.11546370040313636, 0.09598067010268774, 0.11275373707702874, 0.06219492478964617, 0.052412346213521754, 0.12805177633582165, 0.13451529260981954, 0.2117960784841112, 0.11850186344049385, 0.154788727287266, 0.11414722571048075, 0.22214249415262144, 0.1382086661438714, 0.558843687596599, 0.5078364920187035, 0.48870872518878894, 0.5494641762867445, 0.5164130878089948, 0.466468244739515, 0.5936084185559406, 0.4772446882990895, 0.4817533109867832, 0.09315850658608871, 0.15011072488954846, 0.13090666475873025, 0.07540448110573728, 0.1053744312363809, 0.1061053502670889, 0.12270040504640944, 0.0741403297989347, 0.10675601006827418, 0.18999367452458948, 0.17925780510091138, 0.3727332544373688, 0.19691959423122085, 0.28101363323244455, 0.15563075932902226, 0.45493685172594556, 0.1668333730338023, 0.3122114512134835, 0.4208168854688846, 0.21478910653517602, 0.1606833252929426, 0.3879332317513223, 0.44867544221969147, 0.18934325703971633, 0.25247081667782456, 0.262863772151274, 0.09574234407412896, 0.11450426719061835, 0.24787142017241837, 0.10888564426285263, 0.13811349160571496, 0.1402599659605479, 0.09759477158563223, 0.25259530745071745, 0.10725309069023026, 0.04695125022416413, 0.24264244420286674, 0.2057589854087689, 0.21693710023337853, 0.20112487799174483, 0.25340619819535126, 0.20057873511734203, 0.22769023702428992, 0.21489193911088234, 0.21293716680393127, 0.20779512308908465, 0.18303730069831192, 0.17156358241243597, 0.20872838642253355, 0.19052758803341796, 0.18112222070307948, 0.18031692964277335, 0.19489961431018288, 0.18056027132296948, 0.1600332179164925, 0.1365328261333154, 0.10495133307338278, 0.17346171628027618, 0.1111263959094545, 0.06193497231762268, 0.10880164311479856, 0.12558868776199905, 0.16905453863674935, 0.6306530821844958, 0.11323485928853316, 0.08284092525623055, 0.08339171616160912, 0.21463347113926856, 0.04439631758274276, 0.11365634027248017, 0.16985738292801367, 0.33751410624674405, 0.18930065873924184, 0.20020689682919002, 0.217805980409983, 0.22455579077167853, 0.1927343413860505, 0.2027917021495873, 0.17244344470764972, 0.20862228479877976, 0.17883466859806596, 0.08757697971051526, 0.10020312745246407, 0.06423006769713446, 0.0944602968509225, 0.04295528112427327, 0.09724989962275743, 0.17115937009222382, 0.09247496315102322, 0.0862011608489851]}, "mutation_prompt": null}
{"id": "dda05078-73c3-44d9-b82a-3fcb2b03d817", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / (3.5 * np.log1p(self.dim))\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n\n        dynamic_mutation_rate = 0.1  # New dynamic mutation rate\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    # Adaptive exploratory step scaling\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.95  # Adjust based on success\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.1)))\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Introduces a dynamic mutation rate based on success improvement to balance exploration and exploitation.", "configspace": "", "generation": 56, "fitness": 0.2530840605609299, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.24.", "error": "", "parent_id": "069caace-27b1-4dd8-9a7f-1d3574ec88a1", "metadata": {"aucs": [0.7537522978270162, 0.7561623210019325, 0.7879213212939731, 0.7253276463091574, 0.8222697369943742, 0.7577015905233488, 0.7186083763262585, 0.745696541394623, 0.7348206909515839, 0.031242163399844092, 9.999999999998899e-05, 9.999999999998899e-05, 0.017347488044726522, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036780948115469614, 9.999999999998899e-05, 0.12349435595119684, 0.10582920538193485, 0.5788901353414486, 0.09140712834008646, 0.09900067171955906, 0.1105974923296622, 0.08648797287082433, 0.11062430936392631, 0.06195819399241731, 0.10458101277320475, 0.11465337693090805, 0.05716065630072331, 0.07530586343632584, 0.10345518802860876, 0.09214400020798386, 0.08913254329032316, 0.060662794194789926, 0.07753698507180928, 0.990177076980821, 0.9886737503019902, 0.9855124101476993, 0.9695407839365934, 0.9727426297629745, 0.9607672344949709, 0.9802781152075835, 0.9843706795870472, 0.9832976053171395, 0.5290136475879393, 0.6764485354075338, 0.4647038074269221, 0.6530989711950657, 0.6890769804794427, 0.5528019189951445, 0.4610378328824023, 0.7484776279394516, 0.4966962287771828, 0.22475972886087958, 0.22498398767999717, 0.22614023059521626, 0.26871719644520686, 0.2146072133879351, 0.35835646837141244, 0.23575601893400933, 0.7090269096223942, 0.8035568857336144, 0.13431552772992184, 0.15021653278104186, 0.21242975375114292, 0.17549310772123317, 0.1767164849384535, 0.11810967936844441, 0.1394470246563424, 0.18184211502517955, 0.15085505903714003, 0.1865755723364091, 0.16964016644253022, 0.18508394252550164, 0.17823097315745995, 0.16824624291685308, 0.17670871684627143, 0.1610325474350237, 0.16101660312935384, 0.1668818648632543, 0.0020389937766108757, 0.09938187816700106, 0.04523211959586659, 0.08500057544094652, 0.05583377109202026, 0.04518103546546515, 9.999999999998899e-05, 9.999999999998899e-05, 0.04756083134081468, 0.056627701799358277, 0.07203216016987701, 0.11136548640139576, 0.04502269578210505, 0.07815405005946618, 0.017137275304253685, 0.15149416280718164, 0.05012420682981378, 0.028835439401452057, 0.1261374561848041, 0.03793754416955086, 0.11704739856957636, 0.0826287305761294, 0.07922149300703674, 0.09487374131381188, 0.20115823495378993, 0.21866425869181627, 0.1380822908379189, 0.1819716417432803, 0.09367383662240059, 0.18954975111051175, 0.20363503062973598, 0.19133022986552073, 0.1008261856235847, 0.19540264061590673, 0.13533075101860614, 0.17691384625545958, 0.49543813218280197, 0.44473746561830396, 0.48577537345030875, 0.5192268571973387, 0.47157175347813296, 0.4756482114798388, 0.49921171507160755, 0.44928900383069514, 0.5038719475571547, 0.12506385415220245, 0.06936969181524333, 0.10994529073565495, 0.1282598726203571, 0.07529650783572817, 0.12948399076910844, 0.1395439301433269, 0.1016361197676362, 0.11712916908003823, 0.2745786224353127, 0.21654538717088267, 0.2918969360466951, 0.38204589423162705, 0.2440534875279985, 0.1949826510426783, 0.20804961159848567, 0.23885066562188917, 0.22804116977741795, 0.23222420928137133, 0.34482647401022193, 0.13442214765865268, 0.2797235482949757, 0.3468334178939163, 0.1639810052533881, 0.20057173140315254, 0.21569265607834798, 0.12324192862984051, 0.16588262176047042, 0.22331758011918568, 0.20434256922872107, 0.1833555066694883, 0.2660185567888097, 0.08064374111546058, 0.24495337757711855, 0.2766932937870068, 0.2857179364671827, 0.22068908874304138, 0.23293306000727843, 0.20995490848386722, 0.2171744727150121, 0.2584378628521409, 0.23087923803715138, 0.2502950021064847, 0.19831775338287527, 0.19210640059742679, 0.19408308397020513, 0.18023529210083467, 0.17431097947902452, 0.19587837176366096, 0.1703809944682927, 0.21320454442978243, 0.23674055754871304, 0.2007155340768818, 0.17463175486201776, 0.1580969259403313, 0.1360776979076762, 0.8274700571957925, 0.17287512117095227, 0.11172588036050235, 0.06185001092900022, 0.10842154681683114, 0.12581389189189718, 0.16729960514373055, 0.6659475621126824, 0.1127135922412823, 0.08288454420756275, 0.08306985230444719, 0.21126971475994238, 0.04405078275872365, 0.1130629535285732, 0.16630568704726412, 0.3555217573293654, 0.19522465690714597, 0.19464503081337692, 0.18601383389675363, 0.19800657982738823, 0.22170936654082374, 0.20528875646270628, 0.18578468335588427, 0.2051177704740701, 0.18979171930266436, 0.10294714759564572, 0.10498679371764197, 0.10363837614742821, 0.10202718371300068, 0.10391477913324976, 0.1205380169292275, 0.0939344391266812, 0.08470829476268338, 0.08824511127622536]}, "mutation_prompt": null}
{"id": "65b9a68e-012f-4419-bf94-f2151b233e0e", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / (3.5 * np.log1p(self.dim))\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n\n        dynamic_mutation_rate = 0.1  # New dynamic mutation rate\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                exploration_factor = np.cos(np.pi * self.evaluations / self.budget)  # New exploration factor\n                direction *= np.abs(exploration_factor)\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    # Adaptive exploratory step scaling\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.95  # Adjust based on success\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.1)))\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhances dynamic mutation by introducing a cosine-based exploration factor for improved convergence.", "configspace": "", "generation": 57, "fitness": 0.2530819284424075, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.24.", "error": "", "parent_id": "dda05078-73c3-44d9-b82a-3fcb2b03d817", "metadata": {"aucs": [0.7537522978270158, 0.7561623210019325, 0.7879213212939735, 0.7253276463091574, 0.8222697369943742, 0.7577015905233488, 0.7186083763262585, 0.745696541394623, 0.7348206909515842, 0.031242163399844092, 9.999999999998899e-05, 9.999999999998899e-05, 0.017347488044726522, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03678061905504071, 9.999999999998899e-05, 0.12349435595119684, 0.10582920538193485, 0.5788901353414484, 0.09140712834008646, 0.09900067132149137, 0.11059749233758775, 0.08648797287082433, 0.11062430935748557, 0.06195819399396718, 0.10458101283796317, 0.11465337693090805, 0.05716065630072331, 0.07530586343632584, 0.10345518802860876, 0.09214399926762618, 0.08913254311813235, 0.06066279419450005, 0.07753698507180928, 0.990177076980821, 0.9886737503019902, 0.9855124101476993, 0.9695407839365934, 0.9727426297629745, 0.9607672344949709, 0.9802781152075835, 0.9843706795870472, 0.9832976053171395, 0.529013647587937, 0.6764485354075338, 0.4647038074269221, 0.6530989711945896, 0.6890769804794427, 0.5528019189951419, 0.4610378328824025, 0.7484776279391574, 0.4966962287771828, 0.22475972886087958, 0.22498398767999717, 0.22614023059521626, 0.26871719644520686, 0.2146072133879351, 0.35835646837141244, 0.23575601893400933, 0.7090269096223942, 0.8035568857336144, 0.13431552772992184, 0.15021653278104186, 0.21242975375114292, 0.17549310772123317, 0.1767164849384535, 0.11810967936844441, 0.13948658352997678, 0.18184211502517955, 0.15085505903714003, 0.1865755723364091, 0.16964016644253022, 0.1851762154176938, 0.17823097315745995, 0.1683282306384397, 0.17670871684627143, 0.1610325474350237, 0.1610115662087277, 0.1668818648632543, 0.0020389937766108757, 0.09938187816700106, 0.04523211959586659, 0.08500057544094652, 0.05583375168065907, 0.04518103546546515, 9.999999999998899e-05, 9.999999999998899e-05, 0.047463242249944027, 0.056627701799358277, 0.07203216016987701, 0.11136548744902253, 0.045026185625119286, 0.07815455257532844, 0.017137275304253685, 0.15149416280718164, 0.05012420682981378, 0.02883545285051481, 0.1261374561848041, 0.03793754016860529, 0.11704739856957636, 0.0826287305761294, 0.07922149300703674, 0.09487374131381188, 0.20115823495378993, 0.21866425869181672, 0.13808220377746916, 0.1819716417432803, 0.09367383662240059, 0.18954975111051175, 0.20363503062973598, 0.191330229832538, 0.1008261856235847, 0.19540264061339574, 0.13533075101810532, 0.17691384625546003, 0.49543813218280197, 0.4447374656183043, 0.48577537345030863, 0.5192268571973387, 0.47157175347813296, 0.4756482114798388, 0.49921171507160755, 0.44928900383069514, 0.5038719475571547, 0.12506385415220245, 0.06936969181524333, 0.10994529067408709, 0.1282598726203571, 0.07529650783572817, 0.12948399076958816, 0.1395439301433269, 0.1016361197681197, 0.11712916907964244, 0.2745775935824517, 0.21597992145440126, 0.29189697367196255, 0.3820458942319005, 0.24405348506423286, 0.1949826510426783, 0.2080451470008916, 0.23885066562188917, 0.22804116977741795, 0.2322242092813701, 0.34482647401022193, 0.13442214765865268, 0.2797235482949757, 0.3468334178939163, 0.1639810052533921, 0.20057173140315254, 0.21569265607834798, 0.12324192862984051, 0.16588262176047042, 0.22331758011918568, 0.20434256922792837, 0.18335550666985367, 0.2660185567888097, 0.08064374111546402, 0.2449533775771192, 0.2766932937870068, 0.2857179364671826, 0.22068449798933165, 0.23293306000727843, 0.20995490848386722, 0.2171744727150121, 0.2584374835837502, 0.2308792380371515, 0.25029499680948364, 0.19831775338287527, 0.19210640059742679, 0.19408308397020513, 0.18023529210083467, 0.17431097947902452, 0.19587837176366096, 0.1703809944682927, 0.21320454442978243, 0.23674055754871304, 0.2007155340768818, 0.17463175486201776, 0.1580969259403313, 0.1360776979076762, 0.8274700571957925, 0.17287512117095227, 0.11172588036050235, 0.06185001092900022, 0.10842154681683114, 0.12581389189189718, 0.16729960514373055, 0.6659475621126822, 0.1127135922412823, 0.08288454420756275, 0.08306985230444719, 0.21126971475994238, 0.04405078275872365, 0.1130629535285732, 0.16630568704726412, 0.3555217573293654, 0.19522465684287238, 0.194645030813134, 0.1860138338971673, 0.1980065798274656, 0.22170936654082374, 0.20528875646270628, 0.18578468335588427, 0.2051177704740701, 0.18979171930266436, 0.10294718492246901, 0.10498679371764197, 0.10363837614742821, 0.10202688056313325, 0.10391477913324976, 0.1205387348376189, 0.09393443181461913, 0.08470829476268338, 0.08824526903339924]}, "mutation_prompt": null}
{"id": "5a1b5c0c-0932-4a6f-a89e-0c26383ec84d", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / (3.5 * np.log1p(self.dim))\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n\n        dynamic_mutation_rate = 0.1  # New dynamic mutation rate\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    # Adaptive exploratory step scaling\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.95 + 0.05 * (self.evaluations / self.budget)  # Adjust based on success and progress\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.1)))\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Refines dynamic mutation rate adjustment for better convergence by incorporating evaluation progress.", "configspace": "", "generation": 58, "fitness": 0.2530840605609299, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.24.", "error": "", "parent_id": "dda05078-73c3-44d9-b82a-3fcb2b03d817", "metadata": {"aucs": [0.7537522978270162, 0.7561623210019325, 0.7879213212939731, 0.7253276463091574, 0.8222697369943742, 0.7577015905233488, 0.7186083763262585, 0.745696541394623, 0.7348206909515839, 0.031242163399844092, 9.999999999998899e-05, 9.999999999998899e-05, 0.017347488044726522, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036780948115469614, 9.999999999998899e-05, 0.12349435595119684, 0.10582920538193485, 0.5788901353414486, 0.09140712834008646, 0.09900067171955906, 0.1105974923296622, 0.08648797287082433, 0.11062430936392631, 0.06195819399241731, 0.10458101277320475, 0.11465337693090805, 0.05716065630072331, 0.07530586343632584, 0.10345518802860876, 0.09214400020798386, 0.08913254329032316, 0.060662794194789926, 0.07753698507180928, 0.990177076980821, 0.9886737503019902, 0.9855124101476993, 0.9695407839365934, 0.9727426297629745, 0.9607672344949709, 0.9802781152075835, 0.9843706795870472, 0.9832976053171395, 0.5290136475879393, 0.6764485354075338, 0.4647038074269221, 0.6530989711950657, 0.6890769804794427, 0.5528019189951445, 0.4610378328824023, 0.7484776279394516, 0.4966962287771828, 0.22475972886087958, 0.22498398767999717, 0.22614023059521626, 0.26871719644520686, 0.2146072133879351, 0.35835646837141244, 0.23575601893400933, 0.7090269096223942, 0.8035568857336144, 0.13431552772992184, 0.15021653278104186, 0.21242975375114292, 0.17549310772123317, 0.1767164849384535, 0.11810967936844441, 0.1394470246563424, 0.18184211502517955, 0.15085505903714003, 0.1865755723364091, 0.16964016644253022, 0.18508394252550164, 0.17823097315745995, 0.16824624291685308, 0.17670871684627143, 0.1610325474350237, 0.16101660312935384, 0.1668818648632543, 0.0020389937766108757, 0.09938187816700106, 0.04523211959586659, 0.08500057544094652, 0.05583377109202026, 0.04518103546546515, 9.999999999998899e-05, 9.999999999998899e-05, 0.04756083134081468, 0.056627701799358277, 0.07203216016987701, 0.11136548640139576, 0.04502269578210505, 0.07815405005946618, 0.017137275304253685, 0.15149416280718164, 0.05012420682981378, 0.028835439401452057, 0.1261374561848041, 0.03793754416955086, 0.11704739856957636, 0.0826287305761294, 0.07922149300703674, 0.09487374131381188, 0.20115823495378993, 0.21866425869181627, 0.1380822908379189, 0.1819716417432803, 0.09367383662240059, 0.18954975111051175, 0.20363503062973598, 0.19133022986552073, 0.1008261856235847, 0.19540264061590673, 0.13533075101860614, 0.17691384625545958, 0.49543813218280197, 0.44473746561830396, 0.48577537345030875, 0.5192268571973387, 0.47157175347813296, 0.4756482114798388, 0.49921171507160755, 0.44928900383069514, 0.5038719475571547, 0.12506385415220245, 0.06936969181524333, 0.10994529073565495, 0.1282598726203571, 0.07529650783572817, 0.12948399076910844, 0.1395439301433269, 0.1016361197676362, 0.11712916908003823, 0.2745786224353127, 0.21654538717088267, 0.2918969360466951, 0.38204589423162705, 0.2440534875279985, 0.1949826510426783, 0.20804961159848567, 0.23885066562188917, 0.22804116977741795, 0.23222420928137133, 0.34482647401022193, 0.13442214765865268, 0.2797235482949757, 0.3468334178939163, 0.1639810052533881, 0.20057173140315254, 0.21569265607834798, 0.12324192862984051, 0.16588262176047042, 0.22331758011918568, 0.20434256922872107, 0.1833555066694883, 0.2660185567888097, 0.08064374111546058, 0.24495337757711855, 0.2766932937870068, 0.2857179364671827, 0.22068908874304138, 0.23293306000727843, 0.20995490848386722, 0.2171744727150121, 0.2584378628521409, 0.23087923803715138, 0.2502950021064847, 0.19831775338287527, 0.19210640059742679, 0.19408308397020513, 0.18023529210083467, 0.17431097947902452, 0.19587837176366096, 0.1703809944682927, 0.21320454442978243, 0.23674055754871304, 0.2007155340768818, 0.17463175486201776, 0.1580969259403313, 0.1360776979076762, 0.8274700571957925, 0.17287512117095227, 0.11172588036050235, 0.06185001092900022, 0.10842154681683114, 0.12581389189189718, 0.16729960514373055, 0.6659475621126824, 0.1127135922412823, 0.08288454420756275, 0.08306985230444719, 0.21126971475994238, 0.04405078275872365, 0.1130629535285732, 0.16630568704726412, 0.3555217573293654, 0.19522465690714597, 0.19464503081337692, 0.18601383389675363, 0.19800657982738823, 0.22170936654082374, 0.20528875646270628, 0.18578468335588427, 0.2051177704740701, 0.18979171930266436, 0.10294714759564572, 0.10498679371764197, 0.10363837614742821, 0.10202718371300068, 0.10391477913324976, 0.1205380169292275, 0.0939344391266812, 0.08470829476268338, 0.08824511127622536]}, "mutation_prompt": null}
{"id": "7d6dade5-dbc7-41a3-9bdd-3fecb6ce7b7c", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / (3.5 * np.log1p(self.dim))\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n\n        dynamic_mutation_rate = 0.1  # New dynamic mutation rate\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.sin(self.evaluations / self.budget * np.pi))  # Changed line for sine pattern\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    # Adaptive exploratory step scaling\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.95  # Adjust based on success\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.1)))\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "AHSA_DN with dynamic step adjustment using sine function pattern for improved exploration.", "configspace": "", "generation": 59, "fitness": 0.13030137730262956, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "dda05078-73c3-44d9-b82a-3fcb2b03d817", "metadata": {"aucs": [0.26167671574174434, 0.26833929280055024, 0.2654766244144494, 0.18873751499492342, 0.17542009791477997, 0.2155594186696349, 0.17176224272365548, 0.172147202857852, 0.20130294310385866, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027765981294251008, 9.999999999998899e-05, 0.07220398354910718, 0.08737086137574002, 0.07006771949675006, 0.01483082591522833, 0.07656838190255222, 0.1089516235974135, 0.010780385845010843, 9.999999999998899e-05, 0.020525388266227074, 0.10425184639595386, 0.05946091574811141, 9.999999999998899e-05, 0.07598605148787574, 0.037818096729722694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9678752115072903, 0.9783970745794268, 0.9842320548001819, 0.9804592898068627, 0.971076398298468, 0.9852030169322866, 0.9583966545162727, 0.9782534777611575, 0.9811070740249368, 0.1472988791695261, 0.0871068979286852, 0.11063558692309505, 0.12047465510955413, 0.1618965372866058, 0.09683061231317502, 0.11446356018644388, 0.02863795812991443, 0.08604849935597836, 0.20298365501104032, 0.044808064664976666, 0.03877417387277238, 0.10140422276762528, 9.999999999998899e-05, 9.999999999998899e-05, 0.09131732654988645, 9.999999999998899e-05, 9.999999999998899e-05, 0.0990178685370392, 0.0003940273713270992, 0.08403502859906697, 0.008075372287694726, 0.04949544517917548, 0.07664234637234513, 0.0068116790556574935, 0.0266498690221999, 0.10850269129720325, 0.09956611089252088, 0.013346997061791765, 0.0072827795797199, 0.13155881391852853, 0.000842298682965481, 0.07026258378111816, 0.12505989330441902, 0.03525584861734532, 0.043648241675509736, 9.999999999998899e-05, 0.014612556464713822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007232927415716572, 0.00039275847157316246, 9.999999999998899e-05, 0.002546359624084671, 0.04218544680637082, 0.06304534368356529, 0.08975352733270159, 0.052520868287946554, 0.036903282232989665, 0.13962025551956503, 0.05396814566049046, 0.004307378572913523, 0.00040298713022657306, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00020402090455318156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02519837517979162, 0.000586742554585018, 0.0012909769761818568, 0.008206469498035385, 0.0005255333376067428, 0.0007216170099921815, 0.0001902994055237306, 0.0014590025376907123, 0.05131929392885726, 0.24277607136195034, 0.162375218376956, 0.24615368238894741, 0.23074605055869324, 0.3080110059846276, 0.22758091747928166, 0.20811342914310882, 0.24851862077960996, 0.25989754871150617, 9.999999999998899e-05, 0.041726288314205884, 0.11786096650950917, 0.05919845979443217, 0.06494160233558555, 0.023887544599702215, 0.0627778577965371, 0.013388224358245715, 0.0872254885388013, 0.17226754678480627, 0.15790357189866955, 0.19162673447311818, 0.05753724560014106, 0.1473199315759688, 0.2922614857113732, 0.08769239461479195, 0.14344223497773934, 0.09098571671109945, 0.142194244552716, 0.11068319957014794, 0.1346024219956078, 0.21540902669719997, 0.10162881367703436, 0.12095272987498396, 0.1776538463054319, 0.08489465959942422, 0.1202688713707254, 0.1221616962490869, 0.05659854974772427, 0.04508730037778774, 0.13692262961164414, 0.02840753490181991, 0.0650102744393849, 0.09814112411467846, 0.0689105659623801, 0.05260631235557267, 0.20042838332394974, 0.08805227556162842, 0.18016669032959942, 0.20395843820523896, 0.06986542558925779, 0.12491602468448149, 0.20222118516470322, 0.08093300119329017, 0.18503520614179947, 0.15369876428365514, 0.17547636969090363, 0.1580747679734339, 0.15962383130918734, 0.1614258668793278, 0.14675924332111556, 0.19031629199629252, 0.15191311558457332, 0.14696011668690567, 0.1562488034457512, 0.1290328102773841, 0.3809650281858534, 0.14122473282312642, 0.11868664959233743, 0.21759284406636215, 0.12551081283796262, 0.13811292267098374, 0.27568987211795415, 0.23012079037997124, 0.16674861212247738, 0.10638937564323803, 0.06313984498888803, 0.17157265151018908, 0.1613626521725613, 0.13696467163901638, 0.12553982715811085, 0.18006605510322116, 0.17612567260067902, 0.17350878249093038, 0.17350482497231245, 0.18559371253568246, 0.18406190797383815, 0.19077350359184175, 0.1828061907962838, 0.17885366753064114, 0.1877038773306654, 0.07931513817728242, 0.04115114204885029, 0.04801743651063428, 0.054839180901147255, 0.013477535532868345, 0.04808394458932275, 0.051985399753010086, 0.024993655947104565, 0.050620651719366694]}, "mutation_prompt": null}
{"id": "ac8dc532-7ca1-4628-80b9-c897053ddf9c", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / (3.5 * np.log1p(self.dim))\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n\n        dynamic_mutation_rate = 0.1  # New dynamic mutation rate\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    # Adaptive exploratory step scaling\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.92  # Adjust based on success\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Introduces adaptive mutation rate adjustment based on exploration progression to enhance convergence speed.", "configspace": "", "generation": 60, "fitness": 0.2612033274617199, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.25.", "error": "", "parent_id": "dda05078-73c3-44d9-b82a-3fcb2b03d817", "metadata": {"aucs": [0.7487027857921047, 0.7590213330771386, 0.7512691896022936, 0.7373368216492231, 0.8151321934114697, 0.7494817794481455, 0.7107978132969275, 0.748048643086031, 0.7583202253816346, 0.03717004715419736, 9.999999999998899e-05, 9.999999999998899e-05, 0.016694360180946943, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035184298230513056, 9.999999999998899e-05, 0.1243831164322966, 0.10569914013638759, 0.5602006588624824, 0.15868707882487687, 0.09155131947316897, 0.10702690331350773, 0.08676122980869982, 0.11695846235296026, 0.06187939340054527, 0.10679915112780436, 0.09205566552148936, 0.0677699525140546, 0.13637637196119434, 0.10713669534999137, 0.1056576760816984, 0.07993764865865138, 0.10426686718968681, 0.08768884578575198, 0.9901783910166313, 0.9887405870162472, 0.9855165206625727, 0.969582158165322, 0.9727781802965115, 0.9611972976027552, 0.9803756350957546, 0.984583527466095, 0.9833041986705403, 0.4865477747417247, 0.6509088900039024, 0.5799313621355978, 0.5459828806679328, 0.5234769373643244, 0.7545402491822746, 0.60089173917059, 0.755647895379227, 0.6765092054256572, 0.5123118852033117, 0.22429179097136653, 0.7193528597635404, 0.2689977088057681, 0.21460857613625728, 0.7082544652262935, 0.7393113837765215, 0.7040921603571026, 0.23702447118737624, 0.18724640386699098, 0.14883618336558624, 0.17914652791244645, 0.14058848522139156, 0.184473100735991, 0.11837268976078652, 0.1568805464790879, 0.18532766828281644, 0.1452324384545315, 0.16102227368757227, 0.18325553460705224, 0.1900940594364814, 0.18914956803177296, 0.16407678353333144, 0.14512542974512466, 0.16404779943911962, 0.1649552270276481, 0.18529038988101554, 0.003920804298905067, 0.08988340913976967, 0.0450877392534218, 0.08828176435802904, 0.055324395654234415, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04317105544356814, 0.058426318463334015, 0.0831817670161219, 0.11309247333354855, 0.0359985772236745, 0.08005528465915013, 0.019987240824998254, 0.15152221650930076, 0.030773801475664553, 0.0350617850057644, 0.12827531907978917, 0.03858406689677907, 0.1337505950382567, 0.07364064468778087, 0.10791576162135041, 0.10572814533147756, 0.16403006545193455, 0.20958039037221643, 0.13761324715770096, 0.17525911006455552, 0.0942001442325272, 0.19790031416030307, 0.2099996086961743, 0.22525041096114917, 0.10000235515693601, 0.1921666608563608, 0.1384723244800039, 0.15507971279757893, 0.5082413142688833, 0.4593177558488589, 0.4767575005620057, 0.4655602040635731, 0.47003192894415313, 0.4920560224904008, 0.48574369213496416, 0.4587305516646505, 0.4502155040500052, 0.12408743795076549, 0.06965342527625962, 0.11339412226820222, 0.15598792835473196, 0.08556201673963804, 0.1075557970463189, 0.11567351629641742, 0.10211438076272084, 0.15840140753241627, 0.28517206791842864, 0.2313725928457877, 0.35005538936784897, 0.3261925605039414, 0.1852438890678333, 0.2877846547607905, 0.293414881649946, 0.188369320032023, 0.3572317405991259, 0.1793932920300254, 0.19144562690346145, 0.1361421726880344, 0.39301000597843727, 0.3237690445863378, 0.1671903319843615, 0.21165493543542702, 0.2692726937613421, 0.135260591881308, 0.1585704124583026, 0.2645372636900437, 0.18620705932918702, 0.2445229993804905, 0.2947253962410672, 0.08512802816179332, 0.2841049899642256, 0.08941574716055234, 0.1968370963361189, 0.18861096114807385, 0.2610811154662561, 0.1688781043786346, 0.18187255621872822, 0.23577125139170385, 0.22498228272078435, 0.21142043734837512, 0.19996955145083417, 0.2251000364362632, 0.18122860424758713, 0.18566020255115268, 0.1741593897365532, 0.7162281791260241, 0.1700078329567306, 0.19181610164263507, 0.2318382001385525, 0.20076964278240272, 0.18414878969535076, 0.15807165710196025, 0.13585169942220487, 0.8334351897290275, 0.1728669513218043, 0.11171986079961038, 0.061841720468401085, 0.10841034441954567, 0.12578227650178253, 0.1672673293144601, 0.5542240862103174, 0.11269616605949107, 0.08288333215040822, 0.08306424943989676, 0.211231337166227, 0.04404303092687256, 0.11305327616152883, 0.16624636449143904, 0.31896532945995804, 0.2031019541137299, 0.22156502940418155, 0.20839203540229023, 0.20447224222498517, 0.22767039510880027, 0.18550991875859368, 0.18112679827466127, 0.21384758660693104, 0.2140768390361497, 0.08931006166405675, 0.09998752173833725, 0.09487983855497295, 0.09333464873460984, 0.08756631439478202, 0.10000009476553318, 0.11077978884001327, 0.08154821131135448, 0.09026970347654684]}, "mutation_prompt": null}
{"id": "756f6e9e-eff2-49b5-aec4-8ecbba7fa2cf", "solution": "import numpy as np\n\nclass AHSA_DN_Improved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / (3.5 * np.log1p(self.dim))\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n\n        dynamic_mutation_rate = 0.1  # New dynamic mutation rate\n        recent_progress = 0.0  # Track recent progress\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    if candidate_value < value:\n                        recent_progress = value - candidate_value  # Capture recent improvement\n                        dynamic_mutation_rate = max(0.01, dynamic_mutation_rate * (1 - recent_progress))  # Adjust\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN_Improved", "description": "Enhances adaptive mutation rate by incorporating a feedback mechanism based on recent progress to stabilize convergence.", "configspace": "", "generation": 61, "fitness": 0.2612033274617199, "feedback": "The algorithm AHSA_DN_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.25.", "error": "", "parent_id": "ac8dc532-7ca1-4628-80b9-c897053ddf9c", "metadata": {"aucs": [0.7487027857921047, 0.7590213330771386, 0.7512691896022936, 0.7373368216492231, 0.8151321934114697, 0.7494817794481455, 0.7107978132969275, 0.748048643086031, 0.7583202253816346, 0.03717004715419736, 9.999999999998899e-05, 9.999999999998899e-05, 0.016694360180946943, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035184298230513056, 9.999999999998899e-05, 0.1243831164322966, 0.10569914013638759, 0.5602006588624824, 0.15868707882487687, 0.09155131947316897, 0.10702690331350773, 0.08676122980869982, 0.11695846235296026, 0.06187939340054527, 0.10679915112780436, 0.09205566552148936, 0.0677699525140546, 0.13637637196119434, 0.10713669534999137, 0.1056576760816984, 0.07993764865865138, 0.10426686718968681, 0.08768884578575198, 0.9901783910166313, 0.9887405870162472, 0.9855165206625727, 0.969582158165322, 0.9727781802965115, 0.9611972976027552, 0.9803756350957546, 0.984583527466095, 0.9833041986705403, 0.4865477747417247, 0.6509088900039024, 0.5799313621355978, 0.5459828806679328, 0.5234769373643244, 0.7545402491822746, 0.60089173917059, 0.755647895379227, 0.6765092054256572, 0.5123118852033117, 0.22429179097136653, 0.7193528597635404, 0.2689977088057681, 0.21460857613625728, 0.7082544652262935, 0.7393113837765215, 0.7040921603571026, 0.23702447118737624, 0.18724640386699098, 0.14883618336558624, 0.17914652791244645, 0.14058848522139156, 0.184473100735991, 0.11837268976078652, 0.1568805464790879, 0.18532766828281644, 0.1452324384545315, 0.16102227368757227, 0.18325553460705224, 0.1900940594364814, 0.18914956803177296, 0.16407678353333144, 0.14512542974512466, 0.16404779943911962, 0.1649552270276481, 0.18529038988101554, 0.003920804298905067, 0.08988340913976967, 0.0450877392534218, 0.08828176435802904, 0.055324395654234415, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04317105544356814, 0.058426318463334015, 0.0831817670161219, 0.11309247333354855, 0.0359985772236745, 0.08005528465915013, 0.019987240824998254, 0.15152221650930076, 0.030773801475664553, 0.0350617850057644, 0.12827531907978917, 0.03858406689677907, 0.1337505950382567, 0.07364064468778087, 0.10791576162135041, 0.10572814533147756, 0.16403006545193455, 0.20958039037221643, 0.13761324715770096, 0.17525911006455552, 0.0942001442325272, 0.19790031416030307, 0.2099996086961743, 0.22525041096114917, 0.10000235515693601, 0.1921666608563608, 0.1384723244800039, 0.15507971279757893, 0.5082413142688833, 0.4593177558488589, 0.4767575005620057, 0.4655602040635731, 0.47003192894415313, 0.4920560224904008, 0.48574369213496416, 0.4587305516646505, 0.4502155040500052, 0.12408743795076549, 0.06965342527625962, 0.11339412226820222, 0.15598792835473196, 0.08556201673963804, 0.1075557970463189, 0.11567351629641742, 0.10211438076272084, 0.15840140753241627, 0.28517206791842864, 0.2313725928457877, 0.35005538936784897, 0.3261925605039414, 0.1852438890678333, 0.2877846547607905, 0.293414881649946, 0.188369320032023, 0.3572317405991259, 0.1793932920300254, 0.19144562690346145, 0.1361421726880344, 0.39301000597843727, 0.3237690445863378, 0.1671903319843615, 0.21165493543542702, 0.2692726937613421, 0.135260591881308, 0.1585704124583026, 0.2645372636900437, 0.18620705932918702, 0.2445229993804905, 0.2947253962410672, 0.08512802816179332, 0.2841049899642256, 0.08941574716055234, 0.1968370963361189, 0.18861096114807385, 0.2610811154662561, 0.1688781043786346, 0.18187255621872822, 0.23577125139170385, 0.22498228272078435, 0.21142043734837512, 0.19996955145083417, 0.2251000364362632, 0.18122860424758713, 0.18566020255115268, 0.1741593897365532, 0.7162281791260241, 0.1700078329567306, 0.19181610164263507, 0.2318382001385525, 0.20076964278240272, 0.18414878969535076, 0.15807165710196025, 0.13585169942220487, 0.8334351897290275, 0.1728669513218043, 0.11171986079961038, 0.061841720468401085, 0.10841034441954567, 0.12578227650178253, 0.1672673293144601, 0.5542240862103174, 0.11269616605949107, 0.08288333215040822, 0.08306424943989676, 0.211231337166227, 0.04404303092687256, 0.11305327616152883, 0.16624636449143904, 0.31896532945995804, 0.2031019541137299, 0.22156502940418155, 0.20839203540229023, 0.20447224222498517, 0.22767039510880027, 0.18550991875859368, 0.18112679827466127, 0.21384758660693104, 0.2140768390361497, 0.08931006166405675, 0.09998752173833725, 0.09487983855497295, 0.09333464873460984, 0.08756631439478202, 0.10000009476553318, 0.11077978884001327, 0.08154821131135448, 0.09026970347654684]}, "mutation_prompt": null}
{"id": "b8ccf109-04fa-4fef-a3ff-f725dbbf5787", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / (3.5 * np.log1p(self.dim))\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n\n        dynamic_mutation_rate = 0.1  # New dynamic mutation rate\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    # Adaptive exploratory step scaling\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.92  # Adjust based on success\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n            success_count = 0  # Reset for next round\n\n            # Enhance mutation rate adaptability based on proximity to best position\n            dynamic_mutation_rate *= 1 - np.linalg.norm(position - self.best_position) / (self.upper_bound - self.lower_bound)\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhances convergence by adjusting mutation rate based on both success count and the distance to the best solution.", "configspace": "", "generation": 62, "fitness": 0.2612033274617199, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.25.", "error": "", "parent_id": "ac8dc532-7ca1-4628-80b9-c897053ddf9c", "metadata": {"aucs": [0.7487027857921047, 0.7590213330771386, 0.7512691896022936, 0.7373368216492231, 0.8151321934114697, 0.7494817794481455, 0.7107978132969275, 0.748048643086031, 0.7583202253816346, 0.03717004715419736, 9.999999999998899e-05, 9.999999999998899e-05, 0.016694360180946943, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035184298230513056, 9.999999999998899e-05, 0.1243831164322966, 0.10569914013638759, 0.5602006588624824, 0.15868707882487687, 0.09155131947316897, 0.10702690331350773, 0.08676122980869982, 0.11695846235296026, 0.06187939340054527, 0.10679915112780436, 0.09205566552148936, 0.0677699525140546, 0.13637637196119434, 0.10713669534999137, 0.1056576760816984, 0.07993764865865138, 0.10426686718968681, 0.08768884578575198, 0.9901783910166313, 0.9887405870162472, 0.9855165206625727, 0.969582158165322, 0.9727781802965115, 0.9611972976027552, 0.9803756350957546, 0.984583527466095, 0.9833041986705403, 0.4865477747417247, 0.6509088900039024, 0.5799313621355978, 0.5459828806679328, 0.5234769373643244, 0.7545402491822746, 0.60089173917059, 0.755647895379227, 0.6765092054256572, 0.5123118852033117, 0.22429179097136653, 0.7193528597635404, 0.2689977088057681, 0.21460857613625728, 0.7082544652262935, 0.7393113837765215, 0.7040921603571026, 0.23702447118737624, 0.18724640386699098, 0.14883618336558624, 0.17914652791244645, 0.14058848522139156, 0.184473100735991, 0.11837268976078652, 0.1568805464790879, 0.18532766828281644, 0.1452324384545315, 0.16102227368757227, 0.18325553460705224, 0.1900940594364814, 0.18914956803177296, 0.16407678353333144, 0.14512542974512466, 0.16404779943911962, 0.1649552270276481, 0.18529038988101554, 0.003920804298905067, 0.08988340913976967, 0.0450877392534218, 0.08828176435802904, 0.055324395654234415, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04317105544356814, 0.058426318463334015, 0.0831817670161219, 0.11309247333354855, 0.0359985772236745, 0.08005528465915013, 0.019987240824998254, 0.15152221650930076, 0.030773801475664553, 0.0350617850057644, 0.12827531907978917, 0.03858406689677907, 0.1337505950382567, 0.07364064468778087, 0.10791576162135041, 0.10572814533147756, 0.16403006545193455, 0.20958039037221643, 0.13761324715770096, 0.17525911006455552, 0.0942001442325272, 0.19790031416030307, 0.2099996086961743, 0.22525041096114917, 0.10000235515693601, 0.1921666608563608, 0.1384723244800039, 0.15507971279757893, 0.5082413142688833, 0.4593177558488589, 0.4767575005620057, 0.4655602040635731, 0.47003192894415313, 0.4920560224904008, 0.48574369213496416, 0.4587305516646505, 0.4502155040500052, 0.12408743795076549, 0.06965342527625962, 0.11339412226820222, 0.15598792835473196, 0.08556201673963804, 0.1075557970463189, 0.11567351629641742, 0.10211438076272084, 0.15840140753241627, 0.28517206791842864, 0.2313725928457877, 0.35005538936784897, 0.3261925605039414, 0.1852438890678333, 0.2877846547607905, 0.293414881649946, 0.188369320032023, 0.3572317405991259, 0.1793932920300254, 0.19144562690346145, 0.1361421726880344, 0.39301000597843727, 0.3237690445863378, 0.1671903319843615, 0.21165493543542702, 0.2692726937613421, 0.135260591881308, 0.1585704124583026, 0.2645372636900437, 0.18620705932918702, 0.2445229993804905, 0.2947253962410672, 0.08512802816179332, 0.2841049899642256, 0.08941574716055234, 0.1968370963361189, 0.18861096114807385, 0.2610811154662561, 0.1688781043786346, 0.18187255621872822, 0.23577125139170385, 0.22498228272078435, 0.21142043734837512, 0.19996955145083417, 0.2251000364362632, 0.18122860424758713, 0.18566020255115268, 0.1741593897365532, 0.7162281791260241, 0.1700078329567306, 0.19181610164263507, 0.2318382001385525, 0.20076964278240272, 0.18414878969535076, 0.15807165710196025, 0.13585169942220487, 0.8334351897290275, 0.1728669513218043, 0.11171986079961038, 0.061841720468401085, 0.10841034441954567, 0.12578227650178253, 0.1672673293144601, 0.5542240862103174, 0.11269616605949107, 0.08288333215040822, 0.08306424943989676, 0.211231337166227, 0.04404303092687256, 0.11305327616152883, 0.16624636449143904, 0.31896532945995804, 0.2031019541137299, 0.22156502940418155, 0.20839203540229023, 0.20447224222498517, 0.22767039510880027, 0.18550991875859368, 0.18112679827466127, 0.21384758660693104, 0.2140768390361497, 0.08931006166405675, 0.09998752173833725, 0.09487983855497295, 0.09333464873460984, 0.08756631439478202, 0.10000009476553318, 0.11077978884001327, 0.08154821131135448, 0.09026970347654684]}, "mutation_prompt": null}
{"id": "89d3c12d-5940-43b7-8979-8e03eeeb2100", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / (3.5 * np.log1p(self.dim))\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n\n        dynamic_mutation_rate = 0.1  # New dynamic mutation rate\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                dynamic_mutation_rate *= 0.5 * (1 + np.cos(np.pi * self.evaluations / self.budget))  # Cosine annealing\n                direction *= np.abs(dynamic_mutation_rate)\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    # Adaptive exploratory step scaling\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.92  # Adjust based on success\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Incorporates cosine annealing for mutation rate to enhance dynamic adaptation during exploration.", "configspace": "", "generation": 63, "fitness": 0.19815522876761626, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.27.", "error": "", "parent_id": "ac8dc532-7ca1-4628-80b9-c897053ddf9c", "metadata": {"aucs": [0.9629585163495227, 0.9607994212067222, 0.9556405783056432, 0.9592520070198288, 0.9553567267840035, 0.9417412483730686, 0.9583720249334247, 0.9620419458946199, 0.9524936988068993, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09145331470621043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.966574138793561, 0.9690937348297962, 0.9759178327840557, 0.10547675119542055, 0.07236094077683286, 0.9677743469651594, 0.9499033301180284, 0.10554186786322406, 0.9810421439387972, 0.684524215243274, 0.5341339263439503, 0.12864191344333797, 0.47182603100537235, 0.508971366554812, 0.6827100314020413, 0.7154202467819581, 0.6186141336658477, 0.7308982688700658, 0.03466483644614926, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001233012381798626, 9.999999999998899e-05, 9.999999999998899e-05, 0.177296731922724, 0.1895177044332107, 0.13460589460370465, 0.15335530113462514, 0.1714550845416607, 0.1448338151005204, 0.16107919673392357, 0.30004098421184877, 0.16370578281104375, 0.20784950028734694, 0.15985884551435792, 0.1372280184764164, 0.160037000715065, 0.2559443697084899, 0.1307346498631078, 0.25285491976027097, 0.17711490605115965, 0.13262930113580473, 9.999999999998899e-05, 9.999999999998899e-05, 0.012733887743147876, 0.03939776410663165, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05940053324546957, 0.040319339907172624, 0.19164875648201363, 0.059720247246488944, 0.006557877631465425, 0.012032120261515455, 0.14319561911240397, 0.021499650561676353, 0.04284516368943625, 0.23120178523880464, 0.04384453883614847, 0.15800029645670333, 0.14107508260949364, 0.11067672888240299, 0.1351665320978629, 0.08589311772531638, 0.3097948804718873, 0.2828635119313392, 0.2918421848640632, 0.19547035002804547, 0.12513108329006695, 0.09752603246749547, 0.18422080437813249, 0.06914708718711904, 0.15826859113699798, 0.3000875240457903, 0.10072483327454573, 0.5052032135668171, 0.5004843214025095, 0.5018425387626292, 0.5184858037677486, 0.5785805005724427, 0.48088778481147376, 0.4964586306345593, 0.49750705627025094, 0.49989551368512875, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0489717742348037, 0.13924334148742545, 0.1773209820191356, 0.055977575520021694, 0.11323895013176366, 0.07836057242698558, 0.07710954057113306, 0.14210985168817258, 0.03877429594838633, 0.11506216409699899, 0.13999707575018216, 0.10624484415217084, 0.1463200773388571, 0.1093282961267269, 0.12266586881878716, 0.1391365875665782, 0.09717850475632128, 0.0933044144670514, 0.05233712279231573, 0.03833024520535999, 0.03522176941017929, 0.09796219123212635, 0.09284478821769604, 0.05661695430249214, 0.0740956805480919, 0.012632355234091341, 0.02452817759604331, 0.19478736115778716, 0.03441055675998106, 0.10029456647325896, 0.19117058185472802, 0.039532550708532344, 0.0825533560569165, 0.20613473685178518, 0.06698417718051897, 0.09481717694745473, 0.16104125175381523, 0.16371864268848224, 0.17851915666458318, 0.15704247937257076, 0.16112947620310003, 0.16316205197790845, 0.16892159197090495, 0.16318036307215078, 0.19036185510541825, 0.1884425506372247, 0.1363901812696393, 0.9596795451709397, 0.17256484531284821, 0.0654249728930959, 0.06161392229489848, 0.1081950327676412, 0.11510388609330835, 0.16673462626899838, 0.9411748731484336, 0.11310224561184334, 0.0826383822183685, 0.15503167123392836, 0.21211120880714618, 0.21150347506953981, 0.12081309083367997, 0.058825553104925765, 0.14845105834969796, 0.22703190717300514, 0.22330960892875318, 0.19539990177796251, 0.2742286093311742, 0.3365663466647204, 0.23105651925940096, 0.206156007817626, 0.2395003935916411, 0.32291012476868564, 0.036782336660180937, 0.01806416745755468, 0.031230196428940538, 0.038482798627596626, 0.001138971578112602, 0.015808958736842182, 0.04797212790500338, 0.008329124147060107, 0.03697841025299553]}, "mutation_prompt": null}
{"id": "2e977998-dd5a-40fe-a438-4e2425e79769", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / (3.5 * np.log1p(self.dim))\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n\n        dynamic_mutation_rate = 0.1  # New dynamic mutation rate\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    # Adaptive exploratory step scaling\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.92  # Adjust based on success\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n            else:  # New line to adapt mutation rate based on lack of success\n                dynamic_mutation_rate *= 1.1  # Another new line to increase exploration\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhances convergence by dynamically adapting the mutation rate based on both success rate and distance to the best solution.", "configspace": "", "generation": 64, "fitness": 0.2612033274617199, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.25.", "error": "", "parent_id": "ac8dc532-7ca1-4628-80b9-c897053ddf9c", "metadata": {"aucs": [0.7487027857921047, 0.7590213330771386, 0.7512691896022936, 0.7373368216492231, 0.8151321934114697, 0.7494817794481455, 0.7107978132969275, 0.748048643086031, 0.7583202253816346, 0.03717004715419736, 9.999999999998899e-05, 9.999999999998899e-05, 0.016694360180946943, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035184298230513056, 9.999999999998899e-05, 0.1243831164322966, 0.10569914013638759, 0.5602006588624824, 0.15868707882487687, 0.09155131947316897, 0.10702690331350773, 0.08676122980869982, 0.11695846235296026, 0.06187939340054527, 0.10679915112780436, 0.09205566552148936, 0.0677699525140546, 0.13637637196119434, 0.10713669534999137, 0.1056576760816984, 0.07993764865865138, 0.10426686718968681, 0.08768884578575198, 0.9901783910166313, 0.9887405870162472, 0.9855165206625727, 0.969582158165322, 0.9727781802965115, 0.9611972976027552, 0.9803756350957546, 0.984583527466095, 0.9833041986705403, 0.4865477747417247, 0.6509088900039024, 0.5799313621355978, 0.5459828806679328, 0.5234769373643244, 0.7545402491822746, 0.60089173917059, 0.755647895379227, 0.6765092054256572, 0.5123118852033117, 0.22429179097136653, 0.7193528597635404, 0.2689977088057681, 0.21460857613625728, 0.7082544652262935, 0.7393113837765215, 0.7040921603571026, 0.23702447118737624, 0.18724640386699098, 0.14883618336558624, 0.17914652791244645, 0.14058848522139156, 0.184473100735991, 0.11837268976078652, 0.1568805464790879, 0.18532766828281644, 0.1452324384545315, 0.16102227368757227, 0.18325553460705224, 0.1900940594364814, 0.18914956803177296, 0.16407678353333144, 0.14512542974512466, 0.16404779943911962, 0.1649552270276481, 0.18529038988101554, 0.003920804298905067, 0.08988340913976967, 0.0450877392534218, 0.08828176435802904, 0.055324395654234415, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04317105544356814, 0.058426318463334015, 0.0831817670161219, 0.11309247333354855, 0.0359985772236745, 0.08005528465915013, 0.019987240824998254, 0.15152221650930076, 0.030773801475664553, 0.0350617850057644, 0.12827531907978917, 0.03858406689677907, 0.1337505950382567, 0.07364064468778087, 0.10791576162135041, 0.10572814533147756, 0.16403006545193455, 0.20958039037221643, 0.13761324715770096, 0.17525911006455552, 0.0942001442325272, 0.19790031416030307, 0.2099996086961743, 0.22525041096114917, 0.10000235515693601, 0.1921666608563608, 0.1384723244800039, 0.15507971279757893, 0.5082413142688833, 0.4593177558488589, 0.4767575005620057, 0.4655602040635731, 0.47003192894415313, 0.4920560224904008, 0.48574369213496416, 0.4587305516646505, 0.4502155040500052, 0.12408743795076549, 0.06965342527625962, 0.11339412226820222, 0.15598792835473196, 0.08556201673963804, 0.1075557970463189, 0.11567351629641742, 0.10211438076272084, 0.15840140753241627, 0.28517206791842864, 0.2313725928457877, 0.35005538936784897, 0.3261925605039414, 0.1852438890678333, 0.2877846547607905, 0.293414881649946, 0.188369320032023, 0.3572317405991259, 0.1793932920300254, 0.19144562690346145, 0.1361421726880344, 0.39301000597843727, 0.3237690445863378, 0.1671903319843615, 0.21165493543542702, 0.2692726937613421, 0.135260591881308, 0.1585704124583026, 0.2645372636900437, 0.18620705932918702, 0.2445229993804905, 0.2947253962410672, 0.08512802816179332, 0.2841049899642256, 0.08941574716055234, 0.1968370963361189, 0.18861096114807385, 0.2610811154662561, 0.1688781043786346, 0.18187255621872822, 0.23577125139170385, 0.22498228272078435, 0.21142043734837512, 0.19996955145083417, 0.2251000364362632, 0.18122860424758713, 0.18566020255115268, 0.1741593897365532, 0.7162281791260241, 0.1700078329567306, 0.19181610164263507, 0.2318382001385525, 0.20076964278240272, 0.18414878969535076, 0.15807165710196025, 0.13585169942220487, 0.8334351897290275, 0.1728669513218043, 0.11171986079961038, 0.061841720468401085, 0.10841034441954567, 0.12578227650178253, 0.1672673293144601, 0.5542240862103174, 0.11269616605949107, 0.08288333215040822, 0.08306424943989676, 0.211231337166227, 0.04404303092687256, 0.11305327616152883, 0.16624636449143904, 0.31896532945995804, 0.2031019541137299, 0.22156502940418155, 0.20839203540229023, 0.20447224222498517, 0.22767039510880027, 0.18550991875859368, 0.18112679827466127, 0.21384758660693104, 0.2140768390361497, 0.08931006166405675, 0.09998752173833725, 0.09487983855497295, 0.09333464873460984, 0.08756631439478202, 0.10000009476553318, 0.11077978884001327, 0.08154821131135448, 0.09026970347654684]}, "mutation_prompt": null}
{"id": "53fe4ab2-fc0a-479a-980e-cb1a0aca8dc3", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / (3.5 * np.log1p(self.dim))\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n\n        dynamic_mutation_rate = 0.1  # New dynamic mutation rate\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    # Adaptive exploratory step scaling\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.92  # Adjust based on success\n                    success_count += 1\n\n            # Modify hypercube scaling based on recent best improvement\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.05\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhances exploitation through adaptive hypercube scaling influenced by recent best improvement trends.", "configspace": "", "generation": 65, "fitness": 0.24874270439874588, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.24.", "error": "", "parent_id": "ac8dc532-7ca1-4628-80b9-c897053ddf9c", "metadata": {"aucs": [0.7337971484078266, 0.7565896904447285, 0.7246166052126151, 0.79311736679468, 0.774687754801282, 0.7538181194391211, 0.7451316175254277, 0.8578062890055447, 0.8047208737428699, 0.0427048409410401, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05660993345031151, 9.999999999998899e-05, 0.08810920811274714, 0.10723303334431278, 0.07430184028132958, 0.0977142110208079, 0.13497373736175755, 0.12179275163141534, 0.07625832984394476, 0.11115510237739124, 0.08273837613194246, 0.07237140778938411, 0.08780345746357032, 0.06953445170138273, 0.09093328652610888, 0.07419125431802132, 0.06711005363350064, 0.06579430042984391, 0.10326096347352998, 0.07201415011923218, 0.9903686785575821, 0.9887905529984918, 0.9861093118270599, 0.9284560948788867, 0.9516514748786702, 0.18276636399972312, 0.9708640743954692, 0.9835981139132033, 0.98277340194135, 0.43174399269044095, 0.42349075617296794, 0.7202912715458283, 0.7087461151033108, 0.7091178888016272, 0.7324101167014736, 0.4663074005150639, 0.45383427411088495, 0.49050985524300117, 0.33138678686106415, 0.11461940422253902, 0.16957877431083468, 0.34295347052422, 0.27267006576129105, 0.7585248237338215, 0.8298532716034426, 0.7938639270239207, 0.34786385505631057, 0.18264718277824799, 0.23799493962531837, 0.1351594498037879, 0.17180502954299604, 0.20513156555067324, 0.14756042061682273, 0.14401493745414828, 0.13063917184379648, 0.1678748524099718, 0.16322077929532863, 0.1496424058161009, 0.19656423331597417, 0.2240099110545818, 0.192651633436151, 0.18055675283591777, 0.12463649524092468, 0.17034751400306103, 0.18563367500701455, 0.009773405760909015, 0.005771844358362421, 0.005556778709342125, 0.04610582328890611, 0.06073309062490484, 0.0016538492439016617, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012403258238796733, 0.0669013919321314, 0.05625009941720471, 0.16730135029004978, 0.04159335919912843, 0.06120813664827074, 0.03159579003511481, 0.13610421629266944, 0.029897947110123613, 0.04860340344819547, 0.12135679772232744, 0.027478877713154715, 0.04692958529991287, 0.07112722197803356, 0.23878009401424172, 0.0731138483987448, 0.05372318457660552, 0.15249032918527194, 0.15699908194820456, 0.14141552510438482, 0.08962633274472298, 0.164765966030766, 0.09345286138785447, 0.12379333924961688, 0.09693692134662046, 0.16636125537183066, 0.17015877155345693, 0.11618718284338558, 0.4946167939191176, 0.48409030379565243, 0.5052936952492877, 0.4530506220483238, 0.49703815227043646, 0.5051896689411922, 0.5178479991668818, 0.4550742167790146, 0.5005227230030571, 0.12889650553289433, 0.10531980469480207, 0.13636583253920564, 0.09573885251242287, 0.13411439115353185, 0.14226031370726633, 0.139580483827195, 0.09077511974580388, 0.14163183524362088, 0.18596973882625256, 0.24202213534932104, 0.2010851512080719, 0.41876106151103376, 0.3455972626545952, 0.18437479000106427, 0.15959348252947825, 0.29652577989356765, 0.18917630708126376, 0.38544100388445024, 0.3676375403550266, 0.14969663536416733, 0.3768848891437028, 0.20735445899703642, 0.1773789784902312, 0.24264100674308076, 0.3998310788248338, 0.12026890902836274, 0.2628285423016188, 0.31514652445907965, 0.19073900886040862, 0.29170103149316906, 0.20488673504611798, 0.1623045468023936, 0.27287950254399207, 0.28595243479102916, 0.05554359962919264, 0.20152296610512643, 0.24241495402159252, 0.21100648845418413, 0.17298982806507068, 0.2779997423934274, 0.19886259058610156, 0.2558742747005879, 0.2052778286146466, 0.21229843516701008, 0.18567283738795248, 0.18583498228458317, 0.19595734040333856, 0.17715622652292518, 0.2426424723950561, 0.18873713665805547, 0.19732608909470306, 0.19214755381292403, 0.18977842291210734, 0.10844878169427996, 0.13599863924007072, 0.10508164425982791, 0.173214763786822, 0.11237057658819272, 0.061880578849759504, 0.10866560684204163, 0.125797621346605, 0.16932823427728294, 0.6929605523689131, 0.1128654047254053, 0.08325410062078575, 0.08319181721667157, 0.2135425263881472, 0.04428982135268711, 0.11332776615299645, 0.16906918715058583, 0.7443080685187399, 0.19210361431354228, 0.19460012549488503, 0.20036022459439629, 0.24186191209844243, 0.24451164232033207, 0.19243309284334087, 0.20760416890636413, 0.20010078530507835, 0.21014249658108897, 0.0816264328324744, 0.11942111747534623, 0.09504392448172894, 0.08060728432861797, 0.07549948612463464, 0.09889311309323534, 0.12061859823329646, 0.07422479434827678, 0.09803281487137683]}, "mutation_prompt": null}
{"id": "3a65f62f-d8ef-4e77-9ed1-b024a312233a", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / (3.5 * np.log1p(self.dim))\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n\n        dynamic_mutation_rate = 0.1  # New dynamic mutation rate\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.sin(self.evaluations / self.budget * np.pi))  # Changed from cos to sin\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    # Adaptive exploratory step scaling\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.92  # Adjust based on success\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Introduces a dynamic exploration-exploitation balance by adjusting direction scaling with sin-based modulation.", "configspace": "", "generation": 66, "fitness": 0.12936185383498058, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "ac8dc532-7ca1-4628-80b9-c897053ddf9c", "metadata": {"aucs": [0.2417967157931188, 0.2904037638045871, 0.25805788016722786, 0.20446881187415455, 0.14405793549755108, 0.19667444690803348, 0.18698988012849327, 0.1696151566307974, 0.19948733146833952, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003847347702241599, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027183860048644815, 9.999999999998899e-05, 0.08143076329285504, 0.07861904870509517, 9.999999999998899e-05, 0.037384192795808624, 9.999999999998899e-05, 0.06566969796513, 0.014254362503653972, 9.999999999998899e-05, 0.015678402450502782, 0.0995598257804935, 0.09051337023934047, 9.999999999998899e-05, 0.010589170734352393, 0.028378829616842127, 0.020333315454494683, 0.013367774592420889, 0.05887378695413503, 9.999999999998899e-05, 0.9679209460354201, 0.9784234506636289, 0.9848188927774766, 0.9805689598599983, 0.9713055272848048, 0.9852056694253966, 0.9626996715206847, 0.9672195102912589, 0.9811120517928703, 0.1472800322397848, 0.05828293004657448, 0.11410337805197523, 0.12262987029495631, 0.16811029238797615, 0.102329994633505, 0.09034182968296844, 0.026418106341328906, 0.08336473450962512, 0.16063594534419878, 0.05106402680785194, 0.04239485832914358, 0.07550820307460704, 9.999999999998899e-05, 9.999999999998899e-05, 0.11856717282733642, 9.999999999998899e-05, 9.999999999998899e-05, 0.03662420282567658, 0.0007873772712062577, 0.04379676203198102, 0.003863118028658352, 0.057841203711513245, 0.07758368983901931, 0.015581669643437102, 0.02277644122360467, 0.11589860025052368, 0.10016315973240109, 0.01640500220062291, 0.006264313568306368, 0.1290490684885197, 0.0003924874220944119, 0.0603114749387893, 0.08786895380134807, 0.025943236099502665, 0.03857157217810092, 9.999999999998899e-05, 0.008384856516719275, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006581002379382195, 9.999999999998899e-05, 9.999999999998899e-05, 0.03220012079155332, 0.05254114401857002, 0.04701839281121889, 0.09094038706068208, 0.07682622722627352, 0.060830672301933064, 0.13768470315564152, 0.052600385814723594, 0.011448607136846145, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013504039196228224, 9.999999999998899e-05, 0.02335744827731545, 0.0007009741848800211, 0.002117999060769371, 0.006727151841327439, 0.0003786673887546943, 0.0006362058515786417, 0.000164668382290456, 0.00029803289381857834, 0.046533281088365075, 0.24345533815676057, 0.1610861244843711, 0.24187827103435444, 0.22919720697950374, 0.2114694146649082, 0.26822422706227, 0.20551951038290828, 0.2389833924486342, 0.2473858352207844, 0.011061398633242292, 0.03538666450671568, 0.0755250592223341, 9.999999999998899e-05, 0.07605415355853073, 0.05404786665906214, 0.07970340701718648, 0.013451040247905444, 0.09551097647622153, 0.10162995481438919, 0.15694280778052982, 0.24990594122197152, 0.08003402517706948, 0.12316232719048748, 0.17648839457149812, 0.09039647893861746, 0.1759813911413619, 0.12684426686687222, 0.13177833215463286, 0.11399644332382719, 0.13616537928008687, 0.17351687250077807, 0.0875311111677105, 0.11955375093982767, 0.2024295826668675, 0.08644086759266123, 0.11845772490225082, 0.13554595161214622, 0.04556066775114431, 0.05453839189373122, 0.2134870883275054, 0.028161036850076426, 0.06539704237756705, 0.08889221500937461, 0.03324248371783911, 0.05433232048076786, 0.23529044188331372, 0.0757691362704922, 0.15581733054341473, 0.23040484060947397, 0.07159159624502731, 0.11957529796804844, 0.23323799312426385, 0.07814722693715703, 0.16792722595020204, 0.15607862299877395, 0.1571884091400645, 0.15976952730543548, 0.16531111255373276, 0.1569291239742937, 0.15079597625937236, 0.16585436194217162, 0.17003627419758738, 0.1478150166709591, 0.1887425171706033, 0.13456119024312507, 0.44169412731200486, 0.14010556649787342, 0.11883679968143768, 0.20638073747576668, 0.14501884778978313, 0.15963036391859897, 0.22887990228692212, 0.2265742166759781, 0.1699609139847882, 0.11182595275865059, 0.11728220872721085, 0.17110609102651453, 0.17058327907214188, 0.14335157241626606, 0.1385860581860603, 0.179541100446447, 0.189472514445153, 0.19097182998673257, 0.18975428247264992, 0.18751990919221662, 0.17297286654598376, 0.18077032381340064, 0.18657778462887886, 0.19095000718853794, 0.17163370808059575, 0.09091434084582029, 0.035743332352131785, 0.049324204774143565, 0.0606867354937336, 0.013331024267121738, 0.04591388746187475, 0.09796104024755314, 0.023993220835530904, 0.044715842856707266]}, "mutation_prompt": null}
{"id": "69cff373-1ea5-4562-80c6-580380344a92", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / (3.5 * np.log1p(self.dim))\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n\n        dynamic_mutation_rate = 0.1  # New dynamic mutation rate\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    # Adaptive exploratory step scaling\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.92  # Adjust based on success\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n                hypercube_size *= (1 + 0.05 * np.log1p(success_count))  # Dynamically expand based on success\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Introduces dynamic hypercube expansion based on success to enhance exploratory capability.", "configspace": "", "generation": 67, "fitness": 0.25393614644637047, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.24.", "error": "", "parent_id": "ac8dc532-7ca1-4628-80b9-c897053ddf9c", "metadata": {"aucs": [0.7626134020389602, 0.7114144072607214, 0.7697929288570242, 0.7118781512670713, 0.7363606662566018, 0.7001284059421747, 0.7633329680911106, 0.7029234583315129, 0.7220561171970816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01474578931689352, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019312049426835287, 9.999999999998899e-05, 0.10131426550882838, 0.11837377730339815, 0.11597476038260868, 0.11711627511262757, 0.12282708005348453, 0.10759611781483314, 0.12363453829910775, 0.12512335824693854, 0.08356783917723065, 0.09312130403568519, 0.08619118965403849, 0.09410725565712763, 0.08583599351906379, 0.10105448588811683, 0.08629671344277268, 0.11816571072272031, 0.10363931655376035, 0.07862414557062403, 0.9905534116401374, 0.9936644728952904, 0.9877033692498806, 0.9845169837765598, 0.978374393573155, 0.9884184057914447, 0.9884040511179186, 0.9887032203853754, 0.984863074131193, 0.519327197788084, 0.4626757657747621, 0.4063277432626281, 0.5180452795212795, 0.6442638831146441, 0.4653578134731424, 0.5293542638971224, 0.6171842271682202, 0.5467455760332546, 0.7482539536064051, 0.7593053630912254, 0.5483745084974441, 0.33679768003478006, 0.7015899714643274, 0.2537461946907892, 0.2330997438595941, 0.2282941144339118, 0.5988322695599388, 0.13132315073780643, 0.1493263515685701, 0.18921453855453818, 0.1840529481594474, 0.19123746062327163, 0.09100824270539343, 0.12790302690651822, 0.1483629534287727, 0.19184908783255417, 0.14592073090853175, 0.1494164832158532, 0.19101598473814274, 0.17356603840305762, 0.16592827812314115, 0.1470261190309048, 0.11501264156837643, 0.14959503692448883, 0.17546148265170636, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014726889082463113, 0.007224514434064799, 0.01482108438685592, 0.0018400719872554427, 9.999999999998899e-05, 9.999999999998899e-05, 0.06976617809212915, 0.11593570699500433, 0.14680366329274508, 0.0445825468667721, 0.06968727705791466, 0.010092472162510413, 0.11008101537510084, 0.0502811257750454, 0.035850420384453185, 0.024859282155451745, 0.054037749003771895, 0.04545514422487307, 0.05380231489974563, 0.08955422018123516, 0.08194013909855857, 0.1910938247484123, 0.24028408842284998, 0.16269193798896198, 0.09710759756639797, 0.04731960141981295, 0.10105908036258482, 0.09152231523675969, 0.12681485146000326, 0.11169011435495724, 0.08236788531952477, 0.079155831057101, 0.1487262709914452, 0.45465624509172375, 0.4440132147514655, 0.521159110312267, 0.42322230923511184, 0.47026121676410504, 0.4427765505240475, 0.4617667335262412, 0.47311862259063286, 0.4662264131822129, 0.12891916036527107, 0.11636649263928756, 0.12222325982863735, 0.10548168026915028, 0.13398630419150304, 0.13280146207504973, 0.11668122326418229, 0.0982398136610616, 0.10754141251133786, 0.255219526490968, 0.18015279216005842, 0.18577791528271215, 0.20036398947181855, 0.23630315178699057, 0.19231159866115233, 0.24608633556745596, 0.3408395451276629, 0.147204492358061, 0.4194305895699211, 0.3432786998348504, 0.1425701082185582, 0.33518686720870616, 0.3995746965835587, 0.28005261627006295, 0.22594886811516157, 0.292147005290215, 0.38419059262242217, 0.28156127355250515, 0.2651837578065439, 0.1932362076584021, 0.16167130276384145, 0.16682770179187523, 0.1383163056407105, 0.2750737263738402, 0.18739042936338535, 0.22167298729920926, 0.21694774806362593, 0.19393375871594587, 0.22577172569384596, 0.24725078028220637, 0.18467412362663482, 0.22359325980784805, 0.22215285066164114, 0.2406683967962916, 0.21906087966537569, 0.2285494986237494, 0.201466751647441, 0.18454810510437047, 0.19197531350016628, 0.2123506815691777, 0.2064436341748661, 0.18708534356065654, 0.17970257661918154, 0.1780224399953969, 0.15480855344738198, 0.1337311085196472, 0.7471314238114521, 0.17218011110777776, 0.1898695639075143, 0.06140152029293966, 0.10773276828835276, 0.12485432619146719, 0.16824541463867737, 0.5576714810733274, 0.11203695582562845, 0.0822221504481544, 0.7644063956301383, 0.20946941809442354, 0.20372239422884508, 0.11272688022174893, 0.1641248230481428, 0.48001608875503876, 0.224938843029719, 0.19631520636858824, 0.2827936567914109, 0.17698342165950287, 0.20316424635059616, 0.2405564482281357, 0.19170908656682828, 0.194574571617678, 0.22473238110122185, 0.08938045255565763, 0.10610083234261714, 0.08435947599989779, 0.06770760219277527, 0.0823777431306778, 0.11559457308767729, 0.1504601971704198, 0.10485146597791029, 0.08654870172439622]}, "mutation_prompt": null}
{"id": "4dbaf893-c3e1-4a1f-b721-a0ff6259522c", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / (3.5 * np.log1p(self.dim))\n        shrink_factor = 0.9\n        success_rate_threshold = 0.35  # Adjusted success rate threshold\n        success_count = 0\n\n        dynamic_mutation_rate = 0.1  # New dynamic mutation rate\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi / 2))  # Cosine annealing\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    # Adaptive exploratory step scaling\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.92  # Adjust based on success\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhances adaptive mutation with cosine annealing and success threshold adjustments for improved exploration.", "configspace": "", "generation": 68, "fitness": 0.23620815185365768, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.23.", "error": "", "parent_id": "ac8dc532-7ca1-4628-80b9-c897053ddf9c", "metadata": {"aucs": [0.8191107526108572, 0.6288021004944533, 0.6537003617987929, 0.6511335064982793, 0.7696123336989243, 0.7914549762094367, 0.679466740547298, 0.5407992331485696, 0.633770058324944, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01297439770087383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03579203309561474, 9.999999999998899e-05, 0.12403012890253362, 0.099188995998853, 0.11362047810365605, 0.10929164031392724, 0.1032675358953089, 0.0921970209084173, 0.08305860163610301, 0.10479124155765962, 0.10758467443719821, 0.12529101470511728, 0.09111548885045762, 0.08160604962852014, 0.12108941237154214, 0.08999764207076899, 0.09401308556564159, 0.09510196419562067, 0.0994380512685682, 0.10629560010804251, 0.9901784751155241, 0.9887456240996115, 0.9855167387332282, 0.9695854198790004, 0.9727817860510756, 0.9613833095788185, 0.9803763532934898, 0.9846589320273088, 0.9833044563897476, 0.35921202713274447, 0.5559290630009925, 0.39220438240469, 0.45739160682072755, 0.560349737162072, 0.6466366287305982, 0.44336831110093455, 0.2839320262227276, 0.4854924335108437, 0.757525282867599, 0.22450830850685233, 0.33192379512198444, 0.2651826256972514, 0.2211749169861491, 0.3450433587817018, 0.3622524692011774, 0.5024923106544319, 0.23656818374248723, 0.12113772106674847, 0.12570700638153198, 0.1640051237301171, 0.18814864158389288, 0.18513951524786865, 0.10867283894245683, 0.14046480481477175, 0.18840136545132868, 0.15225142860923058, 0.15632541037557768, 0.1670286691403331, 0.1646829560198263, 0.151126966053993, 0.15287242182866234, 0.1480947923865853, 0.15006724571300623, 0.17554354820726925, 0.14441066741105713, 0.005460670740697449, 0.10725791945972873, 0.03521011230010285, 0.10306250312017506, 0.013140178739328046, 0.0018999384490416826, 9.999999999998899e-05, 9.999999999998899e-05, 0.021061388860810104, 0.0559462522441434, 0.10199499979300686, 0.14427963162791257, 0.041439696252679514, 0.08774357936535326, 0.020907056982396144, 0.15918195375026867, 0.037177209366773045, 0.03140599105060082, 0.10804088560961755, 0.022586034208914474, 0.13231237288125008, 0.06118953827010232, 0.05901543974580159, 0.10040787406580587, 0.12198466590740376, 0.07080008806096738, 0.12744519781449182, 0.1096328642737171, 0.08622638501427804, 0.16691943641433116, 0.14102318855358387, 0.2040949516369288, 0.17477323080783358, 0.16897545861256946, 0.13924294308396312, 0.09858289087668548, 0.4411353975922231, 0.3782253947333839, 0.47970017739252635, 0.46326040214180964, 0.39667946256629405, 0.4731467299815737, 0.4577765586529855, 0.4158865441737176, 0.45652313401904066, 0.12130471223784112, 0.10932032465566477, 0.11776061333545151, 0.11190867482928502, 0.06367534692906063, 0.11803697311935557, 0.09800191644082401, 0.09634127513352742, 0.09282510981494341, 0.14832197855624196, 0.20193346832146142, 0.2099390224851525, 0.29056113010926143, 0.1624552046375779, 0.20104953426491334, 0.2672245422147851, 0.16928923404322993, 0.22317581088934701, 0.28693318341103635, 0.1835954919151983, 0.13141897471678055, 0.48146984650962066, 0.3378538430990947, 0.17232120995160838, 0.18800629113181155, 0.4251787944633172, 0.12346101370530482, 0.1562298788308255, 0.27020958430175446, 0.21457693684537638, 0.2280614496581972, 0.20486119432970773, 0.09420749938058803, 0.21578841095209977, 0.23520963526745753, 0.28001680896097236, 0.2385960330286987, 0.236691789558364, 0.20509499257939623, 0.17656689107096368, 0.21064798318022304, 0.24397540196833856, 0.2103142129572635, 0.20495244983828032, 0.21555055099325038, 0.2148304710701332, 0.18288456725085456, 0.195572049893322, 0.19372361083709355, 0.17316392044935525, 0.1907277872351708, 0.19425347713625452, 0.19437385363513981, 0.18172428982969113, 0.15704678983308618, 0.13464045551626513, 0.7455791976971635, 0.17237477562285108, 0.11153238057562742, 0.06181572517780265, 0.10835896199466111, 0.12407912087507045, 0.16721734838736935, 0.7469674109296562, 0.11256901615419834, 0.08277262273723318, 0.0830855284006271, 0.20955442579861294, 0.043986736571661855, 0.1130020696938806, 0.16494484169186685, 0.3543171826625071, 0.17750361556071825, 0.19286510359573372, 0.17723054511972136, 0.18984725256418555, 0.1869623784259664, 0.18840495945822344, 0.18828836926423564, 0.19372539324161986, 0.18200104786232352, 0.09760027200184451, 0.11282631605770732, 0.08136697231137091, 0.07826718550932688, 0.08172509368098324, 0.11852063681800795, 0.11550555150070829, 0.07728080487151401, 0.0779743246464295]}, "mutation_prompt": null}
{"id": "3229054d-0580-4db8-871d-82be0d3e5e55", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / (3.5 * np.log1p(self.dim))\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n\n        dynamic_mutation_rate = 0.1  # New dynamic mutation rate\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.sin(self.evaluations / self.budget * 2 * np.pi))  # More aggressive exploration\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    # Adaptive exploratory step scaling\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.88  # Adjust more aggressively\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhances local search efficiency by dynamically adjusting the mutation rate more aggressively for faster convergence.", "configspace": "", "generation": 69, "fitness": 0.19772309666330068, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.22.", "error": "", "parent_id": "ac8dc532-7ca1-4628-80b9-c897053ddf9c", "metadata": {"aucs": [0.6322843171194239, 0.4505631550142517, 0.6367396399876668, 0.5857958343507195, 0.502365977252818, 0.33346932589097456, 0.5968883305494241, 0.5305969733522812, 0.5768951036917092, 0.04692053628668269, 9.999999999998899e-05, 9.999999999998899e-05, 0.07690526036444045, 0.002366820529110414, 9.999999999998899e-05, 0.03388690646451664, 0.03924040778651339, 9.999999999998899e-05, 0.07583354361916284, 0.0847765808723292, 0.12120214429724652, 0.08943097533591315, 0.08861617930887788, 0.04933238345648461, 0.07893591073723105, 0.10010113275273491, 0.09511540991199674, 0.09244942041994675, 0.06574222578182709, 0.0026466888750644735, 0.09857444818872751, 0.07674526010706928, 0.01936116109654451, 0.05826040341453276, 0.08820821040881077, 0.025911070364603606, 0.9682885815546262, 0.9817673262297244, 0.9868069403459823, 0.9783937422321536, 0.9710600187899583, 0.9830229569746749, 0.9696161242799467, 0.9648377479143574, 0.9814438639443391, 0.30791959506878663, 0.31614200278609783, 0.30407940841614756, 0.23934659220483723, 0.5422064842391467, 0.2738730394740557, 0.20610854078764762, 0.23525945795423975, 0.48680642515933925, 0.2126880893921672, 0.07172832356056602, 0.09105627918693504, 0.267962925746279, 9.999999999998899e-05, 0.10397887905859626, 0.12706215052438874, 0.004992033220357239, 0.5021875154638775, 0.07808454623359173, 0.1501181506439585, 0.09641763771960543, 0.11506799714493443, 0.08413553027996146, 0.07294416452350616, 0.08639529422668968, 0.14380741542931896, 0.13304345623177083, 0.13405208255903578, 0.06879070803406062, 0.18817881929516356, 0.13907530218142894, 0.06185544828049694, 0.09316448158745994, 0.12676575002569967, 0.09277535801495396, 0.1165243578874331, 9.999999999998899e-05, 9.999999999998899e-05, 0.004544638941575196, 0.005577829161650727, 9.999999999998899e-05, 9.999999999998899e-05, 0.001593915467388407, 9.999999999998899e-05, 9.999999999998899e-05, 0.06336216475500767, 0.041743803583565, 0.11998251931335124, 0.10113305955121032, 0.057372043706165665, 0.09661240108900515, 0.160216707366313, 0.04738865244880386, 0.021755449183766706, 0.1387711940934654, 0.020139830754312915, 0.04356591752842798, 9.999999999998899e-05, 0.07186370347636206, 0.03515964219115775, 0.04892021393840984, 0.054475537301237664, 0.08425515930695215, 0.05898626354902459, 0.032966402490749336, 0.09166697276957603, 0.09960253600702984, 0.022221230585815266, 0.04728527592512943, 0.051466608198906805, 0.03790131947274189, 0.0716195557437308, 0.37727006737886437, 0.3459830428556777, 0.38838031562849895, 0.3621549351635186, 0.3572246212275981, 0.32642063860400994, 0.38573933577221886, 0.39276649493975524, 0.3619058844338049, 9.999999999998899e-05, 0.07589922939585447, 0.07273993722173733, 0.02522533692076545, 9.999999999998899e-05, 0.09525436878174076, 0.061848492655970366, 0.04912427763256999, 0.02604200326220285, 0.35891376679964027, 0.15876822615639263, 0.24957413804020612, 0.2885196963609946, 0.2888549689821249, 0.1656501324267745, 0.3237943980941195, 0.19195289922826209, 0.3215036735282579, 0.14865610240126947, 0.10882129499597415, 0.15095311209688367, 0.3061193629680452, 0.16096158339500422, 0.1242101161982444, 0.17311556996350896, 0.13926866920773795, 0.1137430442009818, 0.144283635387637, 0.045975703477584506, 0.04565603722846734, 0.23188874272228244, 0.0476863412386932, 0.08632368687670355, 0.1790856995835879, 0.047742912973363305, 0.07775193190895191, 0.22401146719097442, 0.12305850663153595, 0.19139011879551315, 0.20111520067139432, 0.11445848604851194, 0.19091968545504567, 0.20363920559893656, 0.1286725621850182, 0.19708701816810537, 0.18398371364031985, 0.16699942569992687, 0.16819821622023778, 0.16767695944816952, 0.17934143221226528, 0.1610230009703475, 0.17343746222416534, 0.17411674867277394, 0.1711031339172725, 0.6324745363973684, 0.1339693482579425, 0.6914237766732377, 0.6217860496037035, 0.18731891289699265, 0.1610502215630053, 0.6528153858497117, 0.1804469531661862, 0.16822684347255712, 0.5480586010892987, 0.11310331791925654, 0.11743557367119173, 0.32272412621991275, 0.19615640467819984, 0.19915101363753696, 0.1410307067737525, 0.29200064693630734, 0.26831485622160367, 0.21059397280507286, 0.20850063984086986, 0.22995881306491595, 0.19567167556217724, 0.18051600555666225, 0.19799630608803076, 0.19751673429535332, 0.19988494671247303, 0.22792990014251213, 0.09869128598534338, 0.03493880111025971, 0.0714025050649425, 0.07136450398326233, 0.028581851088204546, 0.04407636928520131, 0.13944287208845763, 0.02238026488321687, 0.06772355432246846]}, "mutation_prompt": null}
{"id": "9d587620-bddb-4ee5-a186-f96223c920d3", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / (3.5 * np.log1p(self.dim))\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n\n        dynamic_mutation_rate = 0.1  # New dynamic mutation rate\n        initial_temp = 100.0  # Initial temperature for annealing\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    # Annealing-based dynamic mutation rate adjustment\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= np.exp(-self.evaluations / initial_temp)\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhances dynamic mutation rate by introducing temperature-based annealing for improved exploration-exploitation balance.", "configspace": "", "generation": 70, "fitness": 0.2612033274617199, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.25.", "error": "", "parent_id": "ac8dc532-7ca1-4628-80b9-c897053ddf9c", "metadata": {"aucs": [0.7487027857921047, 0.7590213330771386, 0.7512691896022936, 0.7373368216492231, 0.8151321934114697, 0.7494817794481455, 0.7107978132969275, 0.748048643086031, 0.7583202253816346, 0.03717004715419736, 9.999999999998899e-05, 9.999999999998899e-05, 0.016694360180946943, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035184298230513056, 9.999999999998899e-05, 0.1243831164322966, 0.10569914013638759, 0.5602006588624824, 0.15868707882487687, 0.09155131947316897, 0.10702690331350773, 0.08676122980869982, 0.11695846235296026, 0.06187939340054527, 0.10679915112780436, 0.09205566552148936, 0.0677699525140546, 0.13637637196119434, 0.10713669534999137, 0.1056576760816984, 0.07993764865865138, 0.10426686718968681, 0.08768884578575198, 0.9901783910166313, 0.9887405870162472, 0.9855165206625727, 0.969582158165322, 0.9727781802965115, 0.9611972976027552, 0.9803756350957546, 0.984583527466095, 0.9833041986705403, 0.4865477747417247, 0.6509088900039024, 0.5799313621355978, 0.5459828806679328, 0.5234769373643244, 0.7545402491822746, 0.60089173917059, 0.755647895379227, 0.6765092054256572, 0.5123118852033117, 0.22429179097136653, 0.7193528597635404, 0.2689977088057681, 0.21460857613625728, 0.7082544652262935, 0.7393113837765215, 0.7040921603571026, 0.23702447118737624, 0.18724640386699098, 0.14883618336558624, 0.17914652791244645, 0.14058848522139156, 0.184473100735991, 0.11837268976078652, 0.1568805464790879, 0.18532766828281644, 0.1452324384545315, 0.16102227368757227, 0.18325553460705224, 0.1900940594364814, 0.18914956803177296, 0.16407678353333144, 0.14512542974512466, 0.16404779943911962, 0.1649552270276481, 0.18529038988101554, 0.003920804298905067, 0.08988340913976967, 0.0450877392534218, 0.08828176435802904, 0.055324395654234415, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04317105544356814, 0.058426318463334015, 0.0831817670161219, 0.11309247333354855, 0.0359985772236745, 0.08005528465915013, 0.019987240824998254, 0.15152221650930076, 0.030773801475664553, 0.0350617850057644, 0.12827531907978917, 0.03858406689677907, 0.1337505950382567, 0.07364064468778087, 0.10791576162135041, 0.10572814533147756, 0.16403006545193455, 0.20958039037221643, 0.13761324715770096, 0.17525911006455552, 0.0942001442325272, 0.19790031416030307, 0.2099996086961743, 0.22525041096114917, 0.10000235515693601, 0.1921666608563608, 0.1384723244800039, 0.15507971279757893, 0.5082413142688833, 0.4593177558488589, 0.4767575005620057, 0.4655602040635731, 0.47003192894415313, 0.4920560224904008, 0.48574369213496416, 0.4587305516646505, 0.4502155040500052, 0.12408743795076549, 0.06965342527625962, 0.11339412226820222, 0.15598792835473196, 0.08556201673963804, 0.1075557970463189, 0.11567351629641742, 0.10211438076272084, 0.15840140753241627, 0.28517206791842864, 0.2313725928457877, 0.35005538936784897, 0.3261925605039414, 0.1852438890678333, 0.2877846547607905, 0.293414881649946, 0.188369320032023, 0.3572317405991259, 0.1793932920300254, 0.19144562690346145, 0.1361421726880344, 0.39301000597843727, 0.3237690445863378, 0.1671903319843615, 0.21165493543542702, 0.2692726937613421, 0.135260591881308, 0.1585704124583026, 0.2645372636900437, 0.18620705932918702, 0.2445229993804905, 0.2947253962410672, 0.08512802816179332, 0.2841049899642256, 0.08941574716055234, 0.1968370963361189, 0.18861096114807385, 0.2610811154662561, 0.1688781043786346, 0.18187255621872822, 0.23577125139170385, 0.22498228272078435, 0.21142043734837512, 0.19996955145083417, 0.2251000364362632, 0.18122860424758713, 0.18566020255115268, 0.1741593897365532, 0.7162281791260241, 0.1700078329567306, 0.19181610164263507, 0.2318382001385525, 0.20076964278240272, 0.18414878969535076, 0.15807165710196025, 0.13585169942220487, 0.8334351897290275, 0.1728669513218043, 0.11171986079961038, 0.061841720468401085, 0.10841034441954567, 0.12578227650178253, 0.1672673293144601, 0.5542240862103174, 0.11269616605949107, 0.08288333215040822, 0.08306424943989676, 0.211231337166227, 0.04404303092687256, 0.11305327616152883, 0.16624636449143904, 0.31896532945995804, 0.2031019541137299, 0.22156502940418155, 0.20839203540229023, 0.20447224222498517, 0.22767039510880027, 0.18550991875859368, 0.18112679827466127, 0.21384758660693104, 0.2140768390361497, 0.08931006166405675, 0.09998752173833725, 0.09487983855497295, 0.09333464873460984, 0.08756631439478202, 0.10000009476553318, 0.11077978884001327, 0.08154821131135448, 0.09026970347654684]}, "mutation_prompt": null}
{"id": "39f05573-1ab3-44c3-b78f-5733fdbc0804", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / (3.5 * np.log1p(self.dim))\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n\n        dynamic_mutation_rate = 0.1  # New dynamic mutation rate\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    # Adaptive exploratory step scaling\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.92  # Adjust based on success\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2))) \\\n                                  * np.abs(np.cos(self.evaluations / self.budget * np.pi))  # New cosine adjustment\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhances adaptive mutation rate by introducing cosine-based dynamic scaling to improve exploration-exploitation balance.", "configspace": "", "generation": 71, "fitness": 0.18665161994475407, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "ac8dc532-7ca1-4628-80b9-c897053ddf9c", "metadata": {"aucs": [0.3509003170780459, 0.3596843635288469, 0.40948859409458915, 0.3441671431051938, 0.3498136725482941, 0.3632101987418207, 0.3592890312978475, 0.35161496319201924, 0.3381078794297918, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017999473560138757, 9.999999999998899e-05, 0.12088224819556759, 0.10293590158313304, 0.12279094331567253, 0.1013145043536271, 0.08851160200210106, 0.08614834692734241, 0.07805722123446213, 0.12325654320147317, 0.09660755716477964, 0.08065699043040209, 0.07896930638902899, 0.07136226810243751, 0.07090706138967562, 0.10614908548887048, 0.08886567719781902, 0.08282337737313916, 0.055908750523395945, 0.08405103061958852, 0.9901786079702392, 0.9887667257569239, 0.9855184040029653, 0.9696124357876563, 0.9728096922182377, 0.9669693385704782, 0.980380436933657, 0.9861124628923531, 0.9833059139972115, 0.21561810562080985, 0.3030269432225602, 0.24716406951838932, 0.2405439289790824, 0.23625323349171468, 0.24176373855253508, 0.22881493861946878, 0.23359642554505267, 0.2627376646753219, 0.28180977014409603, 0.23874666834032532, 0.2669904564915466, 0.27568952876830244, 0.21339895221441374, 0.26559445706703644, 0.2982699594348309, 0.3489135151189825, 0.3114692332814746, 0.12144154394775086, 0.1236387789844493, 0.13787933370719296, 0.12132233934502934, 0.13587264619758332, 0.09161808514790282, 0.11595824526693721, 0.17697658646804793, 0.1558983239594247, 0.13123002525497718, 0.12307936149496868, 0.1453100744012671, 0.1468230146191012, 0.1360766368747367, 0.1310011102630606, 0.11312554721167722, 0.1263137134934741, 0.12011578366998343, 0.023575962149849916, 0.05381461235125573, 0.033652106578310526, 0.022921480081044998, 0.030427221467063115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011978420051501737, 0.06678514574811201, 0.09688249227034451, 0.13892885431688096, 0.062027283605384564, 0.0993368872018584, 0.019949231391971467, 0.15095741989319977, 0.03077777914888613, 0.029783223988271157, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07493916021879654, 0.060232601772670424, 0.05933488189063696, 0.08312885249607493, 0.06636997938828548, 0.06577208156500014, 0.07400618983559559, 0.041606143759333136, 0.0481098494829697, 0.32692137617232075, 0.36422582054116714, 0.34547567395177636, 0.32433255895372093, 0.3163024205472591, 0.3526947211396466, 0.3186910711749914, 0.33507392202280817, 0.3618438481753685, 0.0900381474688624, 0.0987867888566385, 0.11491807941132814, 0.10043021853565348, 0.11707893708962913, 0.10339249050004728, 0.10361603586201729, 0.09955448563748637, 0.10937704887632915, 0.18716364337555325, 0.19989536365735816, 0.14674220614344502, 0.18214953644624543, 0.14833457409806838, 0.17029610553483276, 0.20460986810394, 0.14436724010154744, 0.2452642713401425, 0.2543752568280272, 0.19348296418502353, 0.13665034532876708, 0.21768676364789874, 0.2516039331652572, 0.18824567614979693, 0.198690396696798, 0.19873767313870794, 0.13410476473455635, 0.15055649946832805, 0.18734649737287057, 0.16453809723159396, 0.21041812958215367, 0.21216857927096866, 0.0969076316531382, 0.17624789492343262, 0.20383370212434648, 0.2167496243726761, 0.2017585290616989, 0.19383976956809168, 0.19683599438452204, 0.1804136183434395, 0.20269980045396074, 0.24216185705121462, 0.20987771883249762, 0.21290486189681246, 0.20040647336249418, 0.1978485281706106, 0.1816841498999966, 0.1671150676528841, 0.202889264006056, 0.16855383707503113, 0.1749280862193624, 0.1967291338736692, 0.18811375338721437, 0.17731101891286127, 0.15732964160721263, 0.13488496385621473, 0.6222088853948649, 0.17207633899319463, 0.11144102080669949, 0.07478219892606519, 0.10825133509771645, 0.12473580726552114, 0.16656089803583507, 0.34392029580092, 0.11239852628737157, 0.08240433602248487, 0.08265210868815687, 0.2089283295063613, 0.043942962385071005, 0.11263643453405636, 0.16400840592358013, 0.29881106572343963, 0.1813544156500434, 0.1810863522355981, 0.19818898474884783, 0.18685675005992264, 0.19257527756264536, 0.1907146957780781, 0.1850518973691987, 0.18636454785303724, 0.1716810334020873, 0.0960859901232397, 0.10659789713724799, 0.08117240947700033, 0.08560030528225071, 0.07644261340908942, 0.10073220796621696, 0.09130246799754227, 0.09354094101898769, 0.06992655015050586]}, "mutation_prompt": null}
{"id": "32585f5f-5cdb-4777-92a6-bb13ace383c2", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / (3.5 * np.log1p(self.dim))\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n\n        dynamic_mutation_rate = 0.1  # New dynamic mutation rate\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor * (1 - self.evaluations / self.budget)  # Shrink based on progress\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.92  # Adjust based on success\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Introduces a dynamic hypercube shrinkage strategy based on evaluation progress to enhance precision.", "configspace": "", "generation": 72, "fitness": 0.24346550110667828, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.24.", "error": "", "parent_id": "ac8dc532-7ca1-4628-80b9-c897053ddf9c", "metadata": {"aucs": [0.887503295921084, 0.8092417861660262, 0.4388643909833888, 0.8655207468459665, 0.891046132552355, 0.8723704413403914, 0.8792261670233867, 0.4136631160899117, 0.8372208305503317, 0.05042651215367078, 9.999999999998899e-05, 9.999999999998899e-05, 0.01520293665779282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07071247207479558, 9.999999999998899e-05, 0.15207674080939504, 0.11373845071652355, 0.11758816770767733, 0.11197452852531697, 0.10080040110277155, 0.13255365847738632, 0.08343282466057989, 0.1160299490073412, 0.06117063743677864, 0.06767548235534415, 0.11094228216126156, 0.03202757704709436, 0.10221790538841613, 0.10534646684991855, 0.08263145123570881, 0.0828691501775769, 0.10127779945671134, 0.08733391729745177, 0.9901607422859218, 0.9883730503135569, 0.9773811783383157, 0.9543593381550294, 0.9591400957844547, 0.9573549732048604, 0.9705781777187147, 0.9836589812963251, 0.9834825323314296, 0.3177868309949021, 0.42851964152145816, 0.6742699289151727, 0.5635043590515767, 0.5138543181481212, 0.4428725630826337, 0.34812773448965595, 0.5129399662770292, 0.7289223174251046, 0.8927267428507044, 0.17007722550727467, 0.22804286681231434, 0.21435915389413562, 0.21348846814360167, 0.21370246732895248, 0.23525048236964485, 0.3124732242989181, 0.24450809443722188, 0.15077679641707287, 0.1259634322681059, 0.1872494925227255, 0.21411950110006794, 0.16329781619659023, 0.17490501437033268, 0.2225163284677002, 0.12607485017548936, 0.179083217311666, 0.1256937040315501, 0.13015734552418612, 0.273622166885765, 0.1277906522138872, 0.13676749935326715, 0.14611571376839694, 0.137484701028891, 0.15815539369991716, 0.15142878347426592, 0.04981766405931143, 9.999999999998899e-05, 0.04242272498555244, 0.08924014864450036, 0.007571039760745024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04555293293640772, 0.0707269252192847, 0.062350577384592154, 0.12330758898647687, 0.03375902892741833, 0.061798135573505, 0.015072700741194045, 0.15108865306794583, 0.020025639911622428, 0.040137921091200734, 0.15313677314035978, 0.03535448916443218, 0.1090222507524572, 0.07427830170412253, 9.999999999998899e-05, 0.11853047488126522, 9.999999999998899e-05, 0.1827562959361455, 0.48488033197985636, 0.08643284430564513, 0.05220084712587414, 0.1640183184464531, 0.1656186360680888, 0.21248426527297593, 0.13283315512494231, 0.10565233470403923, 0.24394138591139714, 0.21236156240206705, 0.4878401455067657, 0.39965778076634273, 0.46237454296363756, 0.43129834975637027, 0.44511735917876094, 0.44014876414482906, 0.5353143953753602, 0.5106272600176518, 0.48726302266518695, 0.120316132186163, 0.0512352302873067, 0.15104517214976954, 0.08387026962960209, 0.09326516053785505, 0.11245489989024304, 0.0985541175055421, 0.11062300546985948, 0.10507118304632035, 0.32467352132490945, 0.2358871761331478, 0.2075827064790312, 0.31985092101273127, 0.21335407889935432, 0.1880609195973003, 0.2471331767661301, 0.43753358793897956, 0.2062088954519835, 0.4615474002233997, 0.47293461509581736, 0.16478127160727485, 0.29552236056453074, 0.36552540987007964, 0.15428930106569494, 0.28927918173624434, 0.3620453639489012, 0.13949364019367672, 0.22205092782234415, 0.23208158753242625, 0.12264708002789504, 0.20716946374075662, 0.2174270002116535, 0.3441506523214515, 0.2279432575557433, 0.2486007136968571, 0.28500251427849754, 0.1844428916587887, 0.21250981659242263, 0.20526922664170144, 0.28709600943476266, 0.2153669348372228, 0.24703973428906034, 0.22023456171310873, 0.18298620436306845, 0.21148238783736073, 0.1855510436055483, 0.1929393818350169, 0.18299007984734184, 0.23389268094384974, 0.20662618588353576, 0.1959593986833572, 0.22135208779634818, 0.1873642919753986, 0.206011616268014, 0.15844670064600286, 0.13475889995026535, 0.10481179127101792, 0.1729033165018804, 0.11185626309939578, 0.061910968195878935, 0.1085750016874879, 0.12558955317148868, 0.1675759480316379, 0.35814075321230243, 0.11282417677589707, 0.08327480450774205, 0.08313641330458688, 0.2118697992044981, 0.04415363040278375, 0.11319481031043654, 0.1667977068989217, 0.28201262386550374, 0.2130682434096367, 0.22191925275707036, 0.20347105671516907, 0.1874056532828784, 0.18189452488368563, 0.21114805765505562, 0.1910531750721981, 0.2070502506146742, 0.2399827786889176, 0.09857587127952427, 0.14451194521905275, 0.09730251194293504, 0.0850252177141616, 0.11480742070749039, 0.1096783500655516, 0.128735069028989, 0.07847216135639867, 0.08326745646196632]}, "mutation_prompt": null}
{"id": "76f54324-bc4e-44c0-b4c3-d438702dc6b8", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / (3.5 * np.log1p(self.dim))\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n\n        dynamic_mutation_rate = 0.1  # New dynamic mutation rate\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    # Adaptive exploratory step scaling\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.92 + 0.08 * np.sin(self.evaluations / self.budget * 2 * np.pi)  # Adjust with oscillation\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhances adaptive mutation rate with oscillatory scaling to balance exploration and exploitation effectively.", "configspace": "", "generation": 73, "fitness": 0.2612033274617199, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.25.", "error": "", "parent_id": "ac8dc532-7ca1-4628-80b9-c897053ddf9c", "metadata": {"aucs": [0.7487027857921047, 0.7590213330771386, 0.7512691896022936, 0.7373368216492231, 0.8151321934114697, 0.7494817794481455, 0.7107978132969275, 0.748048643086031, 0.7583202253816346, 0.03717004715419736, 9.999999999998899e-05, 9.999999999998899e-05, 0.016694360180946943, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035184298230513056, 9.999999999998899e-05, 0.1243831164322966, 0.10569914013638759, 0.5602006588624824, 0.15868707882487687, 0.09155131947316897, 0.10702690331350773, 0.08676122980869982, 0.11695846235296026, 0.06187939340054527, 0.10679915112780436, 0.09205566552148936, 0.0677699525140546, 0.13637637196119434, 0.10713669534999137, 0.1056576760816984, 0.07993764865865138, 0.10426686718968681, 0.08768884578575198, 0.9901783910166313, 0.9887405870162472, 0.9855165206625727, 0.969582158165322, 0.9727781802965115, 0.9611972976027552, 0.9803756350957546, 0.984583527466095, 0.9833041986705403, 0.4865477747417247, 0.6509088900039024, 0.5799313621355978, 0.5459828806679328, 0.5234769373643244, 0.7545402491822746, 0.60089173917059, 0.755647895379227, 0.6765092054256572, 0.5123118852033117, 0.22429179097136653, 0.7193528597635404, 0.2689977088057681, 0.21460857613625728, 0.7082544652262935, 0.7393113837765215, 0.7040921603571026, 0.23702447118737624, 0.18724640386699098, 0.14883618336558624, 0.17914652791244645, 0.14058848522139156, 0.184473100735991, 0.11837268976078652, 0.1568805464790879, 0.18532766828281644, 0.1452324384545315, 0.16102227368757227, 0.18325553460705224, 0.1900940594364814, 0.18914956803177296, 0.16407678353333144, 0.14512542974512466, 0.16404779943911962, 0.1649552270276481, 0.18529038988101554, 0.003920804298905067, 0.08988340913976967, 0.0450877392534218, 0.08828176435802904, 0.055324395654234415, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04317105544356814, 0.058426318463334015, 0.0831817670161219, 0.11309247333354855, 0.0359985772236745, 0.08005528465915013, 0.019987240824998254, 0.15152221650930076, 0.030773801475664553, 0.0350617850057644, 0.12827531907978917, 0.03858406689677907, 0.1337505950382567, 0.07364064468778087, 0.10791576162135041, 0.10572814533147756, 0.16403006545193455, 0.20958039037221643, 0.13761324715770096, 0.17525911006455552, 0.0942001442325272, 0.19790031416030307, 0.2099996086961743, 0.22525041096114917, 0.10000235515693601, 0.1921666608563608, 0.1384723244800039, 0.15507971279757893, 0.5082413142688833, 0.4593177558488589, 0.4767575005620057, 0.4655602040635731, 0.47003192894415313, 0.4920560224904008, 0.48574369213496416, 0.4587305516646505, 0.4502155040500052, 0.12408743795076549, 0.06965342527625962, 0.11339412226820222, 0.15598792835473196, 0.08556201673963804, 0.1075557970463189, 0.11567351629641742, 0.10211438076272084, 0.15840140753241627, 0.28517206791842864, 0.2313725928457877, 0.35005538936784897, 0.3261925605039414, 0.1852438890678333, 0.2877846547607905, 0.293414881649946, 0.188369320032023, 0.3572317405991259, 0.1793932920300254, 0.19144562690346145, 0.1361421726880344, 0.39301000597843727, 0.3237690445863378, 0.1671903319843615, 0.21165493543542702, 0.2692726937613421, 0.135260591881308, 0.1585704124583026, 0.2645372636900437, 0.18620705932918702, 0.2445229993804905, 0.2947253962410672, 0.08512802816179332, 0.2841049899642256, 0.08941574716055234, 0.1968370963361189, 0.18861096114807385, 0.2610811154662561, 0.1688781043786346, 0.18187255621872822, 0.23577125139170385, 0.22498228272078435, 0.21142043734837512, 0.19996955145083417, 0.2251000364362632, 0.18122860424758713, 0.18566020255115268, 0.1741593897365532, 0.7162281791260241, 0.1700078329567306, 0.19181610164263507, 0.2318382001385525, 0.20076964278240272, 0.18414878969535076, 0.15807165710196025, 0.13585169942220487, 0.8334351897290275, 0.1728669513218043, 0.11171986079961038, 0.061841720468401085, 0.10841034441954567, 0.12578227650178253, 0.1672673293144601, 0.5542240862103174, 0.11269616605949107, 0.08288333215040822, 0.08306424943989676, 0.211231337166227, 0.04404303092687256, 0.11305327616152883, 0.16624636449143904, 0.31896532945995804, 0.2031019541137299, 0.22156502940418155, 0.20839203540229023, 0.20447224222498517, 0.22767039510880027, 0.18550991875859368, 0.18112679827466127, 0.21384758660693104, 0.2140768390361497, 0.08931006166405675, 0.09998752173833725, 0.09487983855497295, 0.09333464873460984, 0.08756631439478202, 0.10000009476553318, 0.11077978884001327, 0.08154821131135448, 0.09026970347654684]}, "mutation_prompt": null}
{"id": "2d7a2d52-c7cd-49d8-b9e7-4fe6e8240003", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / (3.5 * np.log1p(self.dim))\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n\n        dynamic_mutation_rate = 0.1  # New dynamic mutation rate\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    # Adaptive exploratory step scaling\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.92  # Adjust based on success\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02 + 0.02 * np.sin(self.evaluations / self.budget * 2 * np.pi)  # Added oscillation\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Introduces oscillating hypercube dynamics for improved balance between exploration and exploitation.", "configspace": "", "generation": 74, "fitness": 0.2531862239734892, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.24.", "error": "", "parent_id": "ac8dc532-7ca1-4628-80b9-c897053ddf9c", "metadata": {"aucs": [0.76200366179215, 0.7605623026016157, 0.791312350181544, 0.7196528581293249, 0.827164651282389, 0.7429439538545571, 0.7178353740405065, 0.7467494045318291, 0.7373976693978468, 0.03383580863331448, 9.999999999998899e-05, 9.999999999998899e-05, 0.017442174322159887, 0.0009937015991133835, 9.999999999998899e-05, 9.999999999998899e-05, 0.06913933041694309, 9.999999999998899e-05, 0.12234100290572769, 0.11816591913737651, 0.16393300981032866, 0.1329651932678495, 0.09907849111788813, 0.09458321547589765, 0.07792841581021692, 0.11006303112998195, 0.061980837321267246, 0.10858725902359456, 0.12692501595789019, 0.06186674742642606, 0.07482466513458452, 0.33540369584251684, 0.11145935763783743, 0.09489657132335882, 0.07309679673889058, 0.07750788896047434, 0.9901764397655998, 0.9887145995861658, 0.9855156310979397, 0.9695186091101834, 0.9727267017887279, 0.9606156896577043, 0.9802783900683509, 0.9843653275307322, 0.9832956402446148, 0.45162854731692914, 0.7406221620478728, 0.5207385766581376, 0.7145751433216538, 0.6184429937569216, 0.6773813824935637, 0.5927874715252928, 0.5794424635308386, 0.5987685166412636, 0.7214419585751641, 0.2131170808503231, 0.22614023059521626, 0.21361937413874144, 0.21460857613625728, 0.3650642055955713, 0.3736569320984984, 0.23674560778323783, 0.3313515798561957, 0.12744872756090042, 0.1510117766915462, 0.21281716102438863, 0.18349277507713058, 0.15439815926689948, 0.11964059297375629, 0.1424011579905773, 0.20431354296733173, 0.141148907793199, 0.19041284260488833, 0.12376861102903025, 0.19117836860028115, 0.18035845367375947, 0.1592998210646992, 0.16581421481599778, 0.15934075597998087, 0.16619627131516335, 0.1512131691681572, 0.04166035678489921, 0.10276530860999633, 0.045752729909363965, 0.08347737741530104, 0.05610676308237639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04813706826491382, 0.056555163172343104, 0.07171595226315841, 0.11090676526509413, 0.04430774063049814, 0.0779738215803163, 0.017063884322596423, 0.1515311021247555, 0.05511687521951758, 0.029949058271884654, 0.124753187471206, 0.03479788471463052, 0.13735968168197288, 0.07788594518458636, 0.08063561811225717, 0.10584977106803439, 0.160129786758901, 0.18431582753102316, 0.1429410377642918, 0.12135906150074482, 0.0898355485317841, 0.1893429501204691, 0.22449857417860963, 0.20595284283376603, 0.17273919056072462, 0.20249730287408652, 0.09517001761567512, 0.14055322906663592, 0.4567707599128016, 0.4469033391018593, 0.4844613711515947, 0.5188292668544408, 0.45689285317184947, 0.5039733305005858, 0.5032634791654245, 0.5019445581605341, 0.47028941965715076, 0.1002307038800977, 0.06935485159621113, 0.12396238533517367, 0.14188555507935996, 0.07698974638107114, 0.08959782245142411, 0.1397803951673675, 0.12007147629727422, 0.1173938366274433, 0.3404064221929364, 0.25248108955799264, 0.24434148864356398, 0.2804956623659167, 0.24590272778398858, 0.30139541712242524, 0.2986568500240888, 0.18413278976177994, 0.21953298588485848, 0.4045216228837307, 0.20102296988196722, 0.14815605757815753, 0.3183327409650898, 0.3614417839428724, 0.16694746732310017, 0.3712338980783413, 0.21627488807445416, 0.14161224257011507, 0.18111858006914283, 0.2098537674751647, 0.1921610378720815, 0.18298215820326336, 0.2406797174395161, 0.0805485209679766, 0.3053574774456501, 0.23399351611221864, 0.2452786981070243, 0.24054735342762357, 0.21844312392756782, 0.1974880226852681, 0.24733976642280586, 0.23061847860152251, 0.201726546790981, 0.27259415732979986, 0.21547854234184194, 0.20300715253036272, 0.19412474735543905, 0.16987673225837152, 0.18733698121416764, 0.19582042902809882, 0.20261258849786368, 0.21337145828414317, 0.2349623961863625, 0.18643123595176347, 0.18735454277375407, 0.1581141658621007, 0.13611322071100218, 0.8260464818678483, 0.17287843081975007, 0.11172883696264924, 0.061854556134243066, 0.10842820306772138, 0.12582133752024205, 0.16724576391949542, 0.6608100980393719, 0.11271813175653422, 0.08289711509381537, 0.0830722246536374, 0.21127328756236174, 0.044098981140613946, 0.11306825262429043, 0.1663161321605794, 0.294088197914965, 0.23187964453032972, 0.1868995669368193, 0.19658438648322685, 0.21200194304884146, 0.20533563579063152, 0.19390735316050078, 0.2062267104326082, 0.2001289627425391, 0.18731523458398547, 0.1030653855837601, 0.10122286412376247, 0.08635839964429215, 0.0940941751523684, 0.10160715767186124, 0.14472365099408957, 0.14801574833203013, 0.08913106605657084, 0.08588817010620464]}, "mutation_prompt": null}
{"id": "34b8ef18-07f6-40e8-a728-4f6b91c1ad96", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / (3.5 * np.log1p(self.dim))\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n\n        dynamic_mutation_rate = 0.1  # New dynamic mutation rate\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    # Adaptive exploratory step scaling\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.92  # Adjust based on success\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.04  # Slightly increased shrink adjustment\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Implements dynamic adjustment of hypercube shrink factor to enhance exploration and exploitation balance.", "configspace": "", "generation": 75, "fitness": 0.24719404691392055, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.24.", "error": "", "parent_id": "ac8dc532-7ca1-4628-80b9-c897053ddf9c", "metadata": {"aucs": [0.7928390123683012, 0.7205369582744581, 0.7331977141733567, 0.8111493311846649, 0.789837992005611, 0.8036687382293558, 0.764800906777706, 0.7437971219774843, 0.8210624630076842, 0.07753829436964077, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05450519793633524, 9.999999999998899e-05, 0.11980825878131474, 0.11072790467908622, 0.08822045990455385, 0.10943961627715237, 0.09521013505197662, 0.11095283190651029, 0.08892260065358026, 0.09526611034564647, 0.09363225318702717, 0.06877117606042171, 0.1094883591543645, 0.07412512519197845, 0.11312741682487448, 0.1061607307738659, 0.07553898144691262, 0.11411954015014547, 0.1066949203651224, 0.10518070562664195, 0.9900675056761582, 0.9887217255317955, 0.9857512695779657, 0.9105071196459354, 0.9548466585088504, 0.24831650750927658, 0.9724390891731859, 0.9836345915000723, 0.9818343224917406, 0.5374306847094961, 0.6994003152505982, 0.4517073908649317, 0.563192321891947, 0.6496075066794267, 0.4729104429146761, 0.5268308589762113, 0.6864136096684699, 0.5123104790838131, 0.33378221418039666, 0.14100535246137746, 0.22345121285875025, 0.7593663549918961, 0.20778597572089375, 0.7926361809352823, 0.5224626957996654, 0.239313869647252, 0.537461824587895, 0.20899250320888418, 0.16255843899598, 0.2993435555620396, 0.13805864305015514, 0.18763337413696946, 0.15177505017027948, 0.14644170937800027, 0.16219842565576348, 0.1937928254953305, 0.147715559279486, 0.15079782451179657, 0.21440589132132237, 0.17330687366112174, 0.16534609159463676, 0.12670154065504957, 0.14098410387277127, 0.24855238092901377, 0.17923716134099377, 0.004375307557558328, 0.0021386140505613715, 0.04466258167394532, 0.10172175632488911, 0.004784471024410375, 0.034837951743240225, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0644533530005561, 0.04553822745868186, 0.14704937614113056, 0.042103117590130745, 0.06624948700043065, 0.03788340645541588, 0.11725791156687426, 0.018625683535746118, 0.05348668246627153, 0.09723968328533517, 0.043404509031632954, 0.029782049576879355, 0.06807721083882812, 0.256242334130628, 0.15828919249246187, 0.08986883960373504, 0.1300374210906564, 0.07978913476776506, 0.12586885892441046, 0.06243381866173692, 0.19638052902547298, 0.13128138582400095, 0.10350738592808251, 0.05598999493299439, 0.11463311187001946, 0.14789022158270104, 0.17667428957991393, 0.45342425398570885, 0.5086173766412134, 0.4772215765136101, 0.4551988653926464, 0.486176102536265, 0.4525770107734275, 0.5365339883518292, 0.48446578253054184, 0.5001553818448685, 0.08726461124418017, 0.1088878696220954, 0.08052606363366666, 0.10695309197316893, 0.09845693811699874, 0.08309322643003891, 0.09377286152438591, 0.06376345948819784, 0.11054147489510435, 0.17017982580136737, 0.23170071034172046, 0.210120475823957, 0.37735570687547815, 0.18027254214888366, 0.42510519387257373, 0.3023367016120839, 0.30829904839138844, 0.33664339314998537, 0.4721456362830947, 0.41203469134207815, 0.14158184913111926, 0.3030390735849241, 0.26803673938304506, 0.2898201458769235, 0.2573010499978976, 0.21821674575015693, 0.12190353910251994, 0.2873151954687846, 0.22043525585485335, 0.1764396303680914, 0.19745226136104266, 0.2080952693986582, 0.08525592894429335, 0.17541512839021212, 0.25803843048706954, 0.17323673407591156, 0.2087784485590396, 0.21922127563379212, 0.2154898580153667, 0.2179987860426661, 0.21658357040426646, 0.30336654832760035, 0.24017210542277945, 0.2126709527139502, 0.2398678543416708, 0.21817985653676564, 0.188812508253989, 0.21482873884872644, 0.1728472375707515, 0.24115716818951305, 0.19484718637919896, 0.18541321814934475, 0.21598397179906093, 0.19305257307017087, 0.15859565311115442, 0.13646220234028372, 0.10518396494984572, 0.1730964811949205, 0.11203321110906306, 0.06184832837172194, 0.10857952277979843, 0.12546123322848068, 0.16924719614256245, 0.6405089579859009, 0.11279179327899236, 0.08316212787003374, 0.08312729547473297, 0.21266068315461206, 0.04426421841488204, 0.11318953363137552, 0.16939143561147885, 0.2812800165081425, 0.2011860156618105, 0.21755439963055745, 0.20993150496243795, 0.21148844645767517, 0.21601963431475413, 0.21703774039013946, 0.2195373914102967, 0.22076447719012326, 0.19021958290066032, 0.0933787204963481, 0.09913517725098686, 0.0729207024648133, 0.1218139294787175, 0.08910558750589148, 0.11995849115807267, 0.11944929676307892, 0.08665105292673014, 0.07929064163062283]}, "mutation_prompt": null}
{"id": "0e94ed77-94a7-4039-83c7-f4b084fb702f", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / (3.5 * np.log1p(self.dim))\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n\n        dynamic_mutation_rate = 0.1  # New dynamic mutation rate\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    # Adaptive exploratory step scaling\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.92  # Adjust based on success\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n            # Increase adaptive mutation non-linearly for better exploration\n            dynamic_mutation_rate *= (1 + 0.1 * (1 - np.tanh(success_count / self.dim)))  \n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhances dynamic adaptation with non-linear probability scaling to improve exploration balance.", "configspace": "", "generation": 76, "fitness": 0.2612033274617199, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.25.", "error": "", "parent_id": "ac8dc532-7ca1-4628-80b9-c897053ddf9c", "metadata": {"aucs": [0.7487027857921047, 0.7590213330771386, 0.7512691896022936, 0.7373368216492231, 0.8151321934114697, 0.7494817794481455, 0.7107978132969275, 0.748048643086031, 0.7583202253816346, 0.03717004715419736, 9.999999999998899e-05, 9.999999999998899e-05, 0.016694360180946943, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035184298230513056, 9.999999999998899e-05, 0.1243831164322966, 0.10569914013638759, 0.5602006588624824, 0.15868707882487687, 0.09155131947316897, 0.10702690331350773, 0.08676122980869982, 0.11695846235296026, 0.06187939340054527, 0.10679915112780436, 0.09205566552148936, 0.0677699525140546, 0.13637637196119434, 0.10713669534999137, 0.1056576760816984, 0.07993764865865138, 0.10426686718968681, 0.08768884578575198, 0.9901783910166313, 0.9887405870162472, 0.9855165206625727, 0.969582158165322, 0.9727781802965115, 0.9611972976027552, 0.9803756350957546, 0.984583527466095, 0.9833041986705403, 0.4865477747417247, 0.6509088900039024, 0.5799313621355978, 0.5459828806679328, 0.5234769373643244, 0.7545402491822746, 0.60089173917059, 0.755647895379227, 0.6765092054256572, 0.5123118852033117, 0.22429179097136653, 0.7193528597635404, 0.2689977088057681, 0.21460857613625728, 0.7082544652262935, 0.7393113837765215, 0.7040921603571026, 0.23702447118737624, 0.18724640386699098, 0.14883618336558624, 0.17914652791244645, 0.14058848522139156, 0.184473100735991, 0.11837268976078652, 0.1568805464790879, 0.18532766828281644, 0.1452324384545315, 0.16102227368757227, 0.18325553460705224, 0.1900940594364814, 0.18914956803177296, 0.16407678353333144, 0.14512542974512466, 0.16404779943911962, 0.1649552270276481, 0.18529038988101554, 0.003920804298905067, 0.08988340913976967, 0.0450877392534218, 0.08828176435802904, 0.055324395654234415, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04317105544356814, 0.058426318463334015, 0.0831817670161219, 0.11309247333354855, 0.0359985772236745, 0.08005528465915013, 0.019987240824998254, 0.15152221650930076, 0.030773801475664553, 0.0350617850057644, 0.12827531907978917, 0.03858406689677907, 0.1337505950382567, 0.07364064468778087, 0.10791576162135041, 0.10572814533147756, 0.16403006545193455, 0.20958039037221643, 0.13761324715770096, 0.17525911006455552, 0.0942001442325272, 0.19790031416030307, 0.2099996086961743, 0.22525041096114917, 0.10000235515693601, 0.1921666608563608, 0.1384723244800039, 0.15507971279757893, 0.5082413142688833, 0.4593177558488589, 0.4767575005620057, 0.4655602040635731, 0.47003192894415313, 0.4920560224904008, 0.48574369213496416, 0.4587305516646505, 0.4502155040500052, 0.12408743795076549, 0.06965342527625962, 0.11339412226820222, 0.15598792835473196, 0.08556201673963804, 0.1075557970463189, 0.11567351629641742, 0.10211438076272084, 0.15840140753241627, 0.28517206791842864, 0.2313725928457877, 0.35005538936784897, 0.3261925605039414, 0.1852438890678333, 0.2877846547607905, 0.293414881649946, 0.188369320032023, 0.3572317405991259, 0.1793932920300254, 0.19144562690346145, 0.1361421726880344, 0.39301000597843727, 0.3237690445863378, 0.1671903319843615, 0.21165493543542702, 0.2692726937613421, 0.135260591881308, 0.1585704124583026, 0.2645372636900437, 0.18620705932918702, 0.2445229993804905, 0.2947253962410672, 0.08512802816179332, 0.2841049899642256, 0.08941574716055234, 0.1968370963361189, 0.18861096114807385, 0.2610811154662561, 0.1688781043786346, 0.18187255621872822, 0.23577125139170385, 0.22498228272078435, 0.21142043734837512, 0.19996955145083417, 0.2251000364362632, 0.18122860424758713, 0.18566020255115268, 0.1741593897365532, 0.7162281791260241, 0.1700078329567306, 0.19181610164263507, 0.2318382001385525, 0.20076964278240272, 0.18414878969535076, 0.15807165710196025, 0.13585169942220487, 0.8334351897290275, 0.1728669513218043, 0.11171986079961038, 0.061841720468401085, 0.10841034441954567, 0.12578227650178253, 0.1672673293144601, 0.5542240862103174, 0.11269616605949107, 0.08288333215040822, 0.08306424943989676, 0.211231337166227, 0.04404303092687256, 0.11305327616152883, 0.16624636449143904, 0.31896532945995804, 0.2031019541137299, 0.22156502940418155, 0.20839203540229023, 0.20447224222498517, 0.22767039510880027, 0.18550991875859368, 0.18112679827466127, 0.21384758660693104, 0.2140768390361497, 0.08931006166405675, 0.09998752173833725, 0.09487983855497295, 0.09333464873460984, 0.08756631439478202, 0.10000009476553318, 0.11077978884001327, 0.08154821131135448, 0.09026970347654684]}, "mutation_prompt": null}
{"id": "1636f218-0285-4f6d-bee0-304c6b70dc3d", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / (3.5 * np.log1p(self.dim))\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n\n        dynamic_mutation_rate = 0.1  # New dynamic mutation rate\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                candidate_position = position + direction * (1 + 0.1 * np.sin(self.evaluations / self.budget * np.pi))\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    # Adaptive exploratory step scaling\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.92  # Adjust based on success\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "An enhanced mutation strategy with dynamic scaling factors improves adaptability and convergence.", "configspace": "", "generation": 77, "fitness": 0.26113829970990005, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.25.", "error": "", "parent_id": "ac8dc532-7ca1-4628-80b9-c897053ddf9c", "metadata": {"aucs": [0.7476208006818308, 0.7459613661618008, 0.777474428048558, 0.718124923723342, 0.7409069812164787, 0.7428042556882111, 0.7166452598356234, 0.7401893317956867, 0.7471586850154506, 0.01522360014370494, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03314350651496967, 9.999999999998899e-05, 0.11631276499857102, 0.11227634630197425, 0.46027698763491676, 0.14224033834088856, 0.10847393081605827, 0.1149663514948277, 0.07672577704816197, 0.15449390992411505, 0.1048800109276764, 0.1375992275768465, 0.11592271464638093, 0.10037731784267656, 0.11592213255593231, 0.09861080792725097, 0.08998239495731031, 0.10859303700747824, 0.08408899355488975, 0.09795189129193183, 0.990179907072744, 0.9888164908415873, 0.9855182138652001, 0.969603058051999, 0.9727953551332845, 0.9669718640141893, 0.9803819087018301, 0.9861181884977245, 0.9833082806222798, 0.7068249524836117, 0.7016185643856971, 0.47503885115150146, 0.6140012094889615, 0.5974697635590503, 0.7563417673060513, 0.6684774058016908, 0.5313154186510034, 0.6947691310624861, 0.48393628612778294, 0.1428884451282575, 0.24572445854501912, 0.263640416341579, 0.21418576978076043, 0.3810945451036116, 0.5164642571021989, 0.5701097966962669, 0.8289166076744933, 0.18608164334050314, 0.1467526600347977, 0.19897022665438568, 0.19003726474185556, 0.12242923355957624, 0.1170143861790639, 0.164797093780929, 0.17704496432658068, 0.15672218088515455, 0.14864407813210345, 0.16751712269900798, 0.22283178159567973, 0.20224643774853535, 0.16815516985245194, 0.15320657818226568, 0.1613603971779346, 0.15960865104211386, 0.15197197647444227, 0.005098013898987341, 0.10180701416695215, 0.042564180403619534, 0.09125636661936809, 0.05111673021586416, 0.003194123478368227, 9.999999999998899e-05, 9.999999999998899e-05, 0.047271650635036355, 0.06248623131359832, 0.14051047778068293, 0.12429046654603804, 0.0371898071208252, 0.0837431387171419, 0.010717985648945771, 0.15118405742997565, 0.035718913744398506, 0.03549350528902728, 0.1451280261190574, 0.03567346884280054, 0.13220361826911708, 0.07402951910486477, 0.10273850722196443, 0.09622334712159519, 0.14412812932910524, 0.17673896400045197, 0.1458431551518683, 0.16443707314516998, 0.10021935854927755, 0.16252445548304695, 0.20091223972121108, 0.14952306455187536, 0.196591750884214, 0.18814459054142285, 0.11454810001477311, 0.2322379079714637, 0.46271634811556017, 0.46684261774402935, 0.45133665796483013, 0.48740272953372366, 0.5229955351283824, 0.5470647581134072, 0.5320469528700857, 0.48040772739929327, 0.543569819807112, 0.10560535054079245, 0.07956650053479408, 0.11795056707146778, 0.5097132648206326, 0.1004666991480535, 0.14091979248365116, 0.10285575445869677, 0.10272535469755295, 0.10637803416876745, 0.20313017287705593, 0.21797063140736717, 0.2618918450332358, 0.35862236923665325, 0.18849120405376985, 0.3950358340402378, 0.18711016857371632, 0.22430175683743492, 0.34520390667460055, 0.3655142120264956, 0.1710168778776373, 0.1395264730233523, 0.35084688539304876, 0.4185186972219561, 0.13795085396468965, 0.23804717825741573, 0.2227299054113805, 0.12888581297321366, 0.19681629516882526, 0.25776341465955577, 0.16571085094824634, 0.18887692528629396, 0.25521186603887136, 0.08526272574655736, 0.23615129512086186, 0.3101494179782165, 0.2623043125791237, 0.24128040860676014, 0.21945753145378855, 0.1810283396948439, 0.2485841091804919, 0.21253928143263745, 0.20270946703769732, 0.21642584325692715, 0.2017945387438238, 0.1779742167393693, 0.18984905713468825, 0.1860383518070643, 0.21262750888839077, 0.20200659803588283, 0.19100316826835928, 0.21368325190572457, 0.21893979862102086, 0.18901380327575446, 0.17530484478822161, 0.1579766874836901, 0.13592990005770766, 0.8349587812668557, 0.17282284457454822, 0.19731843959941897, 0.06183071501285797, 0.1083920820125539, 0.12542580603843545, 0.1672278753325469, 0.601612547163159, 0.11266594153437814, 0.08285605920713446, 0.08304102402689806, 0.21112040123260245, 0.04403422244684807, 0.11301929869861682, 0.16534983932406355, 0.3296217885608669, 0.20888310216048944, 0.19550727205568263, 0.21121737534948892, 0.2116014625325796, 0.22521633087938042, 0.21735122674959695, 0.2214050298351481, 0.22246687894470485, 0.2024972874513673, 0.09085765921135602, 0.11277325112651071, 0.08691446564668459, 0.08185278023588949, 0.08910986927410047, 0.11495239893744169, 0.12163103026379429, 0.07742803310431978, 0.09189778582070007]}, "mutation_prompt": null}
{"id": "2a02fd2c-e33d-4f16-930d-925a9610e791", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / (3.5 * np.log1p(self.dim))\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n\n        dynamic_mutation_rate = 0.1  # New dynamic mutation rate\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    # Adaptive exploratory step scaling\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.92  # Adjust based on success\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02\n                hypercube_size /= shrink_factor * np.tanh(self.evaluations / (self.budget * 1.1))\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Integrates a dynamic exploration-exploitation balance by tuning shrink factor based on evaluation progression to enhance search precision.", "configspace": "", "generation": 78, "fitness": 0.07226074380083357, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.20.", "error": "", "parent_id": "ac8dc532-7ca1-4628-80b9-c897053ddf9c", "metadata": {"aucs": [0.07674988422563311, 0.05966743546373621, 0.07191681941924433, 0.05947196767685092, 0.059377319018164454, 0.059502749463033466, 0.043869683977462826, 0.06359569241214358, 0.04226758610902237, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012806338732279987, 9.999999999998899e-05, 9.999999999998899e-05, 0.0036525697992878525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019201683741626452, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9977547394074882, 0.997783723110596, 0.9950322489631858, 0.9976600797856245, 0.9986646278466185, 0.9990537219600517, 0.9944157187854032, 0.9959543069743049, 0.9972404141514414, 0.1178830776050207, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006926195509371791, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04568675971645897, 9.999999999998899e-05, 9.999999999998899e-05, 0.04029750753356531, 9.999999999998899e-05, 9.999999999998899e-05, 0.02837509207648803, 9.999999999998899e-05, 0.02376010154217567, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08153936668659467, 0.06018936578558021, 0.12849656072240045, 0.11923593298293944, 0.06460784000119313, 0.06036974251159066, 0.1258201015700564, 0.08507165678529949, 0.08503673781796184, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01327569110697624, 9.999999999998899e-05, 0.09335567496627795, 0.09325658082246047, 0.09336669769514161, 0.0765887701868333, 0.0766032777693526, 0.0997485571389145, 0.0728806197347347, 0.0729091494087486, 0.07285059148440509, 0.10116937036662998, 0.08382248923835633, 0.08156368654269386, 0.11544786602378976, 0.08244254553069585, 0.08231198529987704, 0.1345114278558458, 0.08266931490477414, 0.08260731793643261, 0.05314377023789896, 0.02010386949307852, 0.019925669170301474, 0.051873035624320774, 0.041190188442160935, 0.04112924036272303, 0.06322386114865586, 0.028628742946798402, 0.02862425086957099, 0.10941857836673119, 0.05069494012458142, 0.08844565602950116, 0.0987277179376691, 0.03370453825848141, 0.0795603648637947, 0.13146750926092066, 0.04283062308918184, 0.09535766879002128, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0764438012408396, 0.07637576480193786, 0.07641451980852709, 0.10754748296409145, 0.03308198201925838, 0.033085290641976295, 0.05293803628039928, 0.08686904874005086, 0.05461484527355753, 0.06760108769640971, 0.040940092003329154, 0.013877594062373877, 0.01480989603690086, 0.02183293876359016, 0.017663278354977607, 0.04444552082850495, 0.016798703549381955, 0.09736815123116227, 0.11289472601567763, 0.1486171557476933, 0.11291712777424068, 0.15015033399444633, 0.15009633377887988, 0.14991944782712185, 0.13688979166778426, 0.1368556276944899, 0.13690904365608259, 0.025521037609274377, 9.999999999998899e-05, 0.015776071421070403, 0.00869430287116324, 0.006813095120176138, 0.013851344152119416, 0.03490717052268921, 0.006267727278545521, 0.026646616019564084]}, "mutation_prompt": null}
{"id": "f935c776-cb1f-47da-aaf0-c76c3739c90b", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initial random position\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        # Save the best found so far\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        # Define hypercube initial size and step factor\n        hypercube_size = (self.upper_bound - self.lower_bound) / (3.5 * np.log1p(self.dim))\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n\n        dynamic_mutation_rate = 0.1  # New dynamic mutation rate\n\n        while self.evaluations < self.budget:\n            # Generate new candidates within the hypercube\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly pick a direction and step size within the hypercube\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                direction *= (1 + np.random.rand() * dynamic_mutation_rate)  # Adaptive directional scaling\n                candidate_position = position + direction\n                # Clamping within bounds\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                # Update the best found so far\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position  # Move towards better position\n                    hypercube_size *= shrink_factor  # Shrink hypercube for finer search\n                    # Adaptive exploratory step scaling\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.92  # Adjust based on success\n                    success_count += 1\n\n            # Adjust hypercube size based on success rate and evaluation progress\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n            success_count = 0  # Reset for next round\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Enhanced exploration by introducing adaptive directional scaling and dynamic mutation adjustment.", "configspace": "", "generation": 79, "fitness": 0.2646868227691846, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.24.", "error": "", "parent_id": "ac8dc532-7ca1-4628-80b9-c897053ddf9c", "metadata": {"aucs": [0.7517575611326981, 0.8096587483939848, 0.7565783960653, 0.777573144417073, 0.8102598577811949, 0.7157100505772634, 0.7744285432153051, 0.7816270967956008, 0.6842484712582158, 9.999999999998899e-05, 0.07767742244270781, 9.999999999998899e-05, 9.999999999998899e-05, 0.02630856148126115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08509698940678323, 0.11855341563469923, 0.11934339655210369, 0.10585825147016126, 0.11380781515109573, 0.09524601465454763, 0.1308569880979199, 0.0912363678397814, 0.1093900477167532, 0.09410431564040678, 0.09279240704940839, 0.0796146456945811, 0.09071724076265886, 0.1273464409685825, 0.15808659470994135, 0.07472164255605918, 0.0822261162194442, 0.04995381444007507, 0.9907789986510182, 0.9854116284357862, 0.9747649985488359, 0.9528436950783743, 0.9788309885508645, 0.9737583902157823, 0.9848377972488502, 0.9860287480938439, 0.9925238650019449, 0.5318414930706428, 0.4922882968549882, 0.7651235974741493, 0.5528892001541684, 0.5011113806681657, 0.5267291392926168, 0.5229668491713133, 0.6005193358593801, 0.613806049583911, 0.5812905660887069, 0.22638791035597217, 0.22028964707408527, 0.5763201272973293, 0.26777082906423555, 0.270335106174006, 0.8315525510134592, 0.42004181907720317, 0.3658228558060974, 0.1646192561366392, 0.16778227400554513, 0.15418093661767562, 0.1806879425182255, 0.17850047881247755, 0.19415272683503615, 0.1836162963706066, 0.16129203348170262, 0.11937510399048512, 0.15560884604704206, 0.17919086825099417, 0.1810313690010258, 0.18627502675227436, 0.18919469977032943, 0.14403868684058474, 0.15503626663869274, 0.19154107143003407, 0.17593234276427172, 0.006058859527768634, 0.0076818783914428534, 9.999999999998899e-05, 0.0320030322760394, 0.042522517883075484, 0.11866244093600997, 0.010186796294906153, 9.999999999998899e-05, 0.0006102616624912294, 0.04955527734930676, 0.06760818485066122, 0.18852503759532668, 0.1346796052783158, 0.06632137773684987, 0.025566873503538035, 0.15192043781408882, 0.036062924006206365, 0.0795172855385956, 0.07052659733997657, 0.05693461451675108, 0.09116255522204642, 0.12512735468157865, 0.13801267141593776, 0.061239161599091485, 0.20727913202786563, 0.06990029367161643, 0.23056795549959774, 0.27340553357072184, 0.30092712529691723, 0.10465804588700334, 0.25665652216023094, 0.1276107023510502, 0.20836767688526348, 0.09992471804889569, 0.20512271292449868, 0.2488864405417277, 0.45476802713794273, 0.4610338746612419, 0.48790929227217905, 0.49840322660387637, 0.5244032572365922, 0.518539626232414, 0.5091037948457161, 0.5307687383901898, 0.5106505100382535, 0.10282446098577291, 0.10338551185553424, 0.11076771658646156, 0.08479435608547936, 0.10541069142391513, 0.12492132582565607, 0.12226922111479432, 0.07141993729469909, 0.1185135093404226, 0.22336459246033813, 0.36282345573299546, 0.3014035816369163, 0.3300497854665857, 0.3294432157415086, 0.1979339148696263, 0.1990263397590324, 0.20928457917581578, 0.1762231747543388, 0.33893546711566147, 0.3944020045763593, 0.14275960367538354, 0.37725094375133983, 0.3242250947927503, 0.30492958476161947, 0.3088791176196025, 0.3979811702267815, 0.14968128225053023, 0.3422164432305743, 0.2322117937677729, 0.20705763533859012, 0.22552218177150107, 0.1916579346241084, 0.13755770224147945, 0.19098399285331413, 0.24387079199894623, 0.24162876264594169, 0.21284645420846104, 0.25906726975626493, 0.20833929359445036, 0.18734271243964318, 0.18372135908403264, 0.19201262081184822, 0.2613144095978801, 0.2315114434501927, 0.24113543512490077, 0.19080353524428428, 0.18417088575045348, 0.2351890901538387, 0.23754575399568323, 0.18558066686541308, 0.22978597828762226, 0.18988770472932592, 0.18608727074728448, 0.20327783709523906, 0.10799035691042136, 0.13600709826349977, 0.10535233090716589, 0.17273190093230917, 0.1512103576557925, 0.12268166177513884, 0.10802534373820893, 0.12536829553840267, 0.1669057642169799, 0.5402827335259124, 0.11300687202837112, 0.6515280778532849, 0.08308494327744209, 0.7971228046713746, 0.2116399371611215, 0.5010601962062016, 0.16913014670078008, 0.4139741440856396, 0.21419791946925293, 0.18698695383171493, 0.2127606043153366, 0.19476415121829382, 0.20125006069916895, 0.1782229666664087, 0.23996224893243456, 0.19920354324253953, 0.22895416134703905, 0.07302391457504143, 0.13380531651975702, 0.0798662586024913, 0.07828522262160964, 0.08579179880590582, 0.10897627228146922, 0.13333873183362233, 0.08339938861650553, 0.09325524082948455]}, "mutation_prompt": null}
{"id": "a1238a63-4ad4-43a2-af0a-5e897f84af9e", "solution": "import numpy as np\n\nclass AHSA_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)  \n        value = func(position)\n        self.evaluations += 1\n\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        hypercube_size = (self.upper_bound - self.lower_bound) / (3.5 * np.log1p(self.dim))\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n\n        dynamic_mutation_rate = 0.1\n\n        while self.evaluations < self.budget:\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                direction *= (1 + np.random.rand() * dynamic_mutation_rate)\n                candidate_position = position + direction\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position\n                    hypercube_size *= shrink_factor\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.92\n                    success_count += 1\n                else:\n                    dynamic_mutation_rate *= 1.05  # Increase mutation rate if no improvement\n\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n            else:\n                hypercube_size *= 1.05  # Expand search if success rate is low\n            success_count = 0\n\n        return self.best_position, self.best_value", "name": "AHSA_DN", "description": "Improved adaptive exploration and exploitation balance through dynamic adjustment of search parameters.", "configspace": "", "generation": 80, "fitness": 0.1062683975473905, "feedback": "The algorithm AHSA_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.20.", "error": "", "parent_id": "f935c776-cb1f-47da-aaf0-c76c3739c90b", "metadata": {"aucs": [0.16071727822941628, 0.15174855665146025, 0.15579959069096827, 0.18482617361895592, 0.16482919538897767, 0.17476746026366308, 0.17565398046266978, 0.1664619046297765, 0.22058352399651648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041284145971014374, 0.018701228226788214, 0.02843846361227187, 0.025659957721847815, 0.04778070106908705, 0.03143859289946138, 0.06311013067106874, 0.046508187402410694, 0.03367148599750347, 0.006448704590603649, 0.031511454010190953, 9.999999999998899e-05, 0.013513308977785132, 0.022580926398120593, 0.015446763840175848, 0.001173597602805998, 0.026931818661505735, 9.999999999998899e-05, 0.9942339060936645, 0.9921063029052889, 0.9824618813807903, 0.9908028355847687, 0.9928248201036193, 0.988873777236475, 0.994772239841017, 0.9941371628024791, 0.9960250237688356, 0.024755991409297184, 0.02179935738508665, 0.0422395687983258, 0.03821869089125285, 0.09053632817289037, 0.032766643103445126, 0.060866297207427644, 0.062099019034446035, 0.021027745267701015, 0.09008279266524422, 0.13094171737125704, 0.0510823172554945, 0.17387638410407202, 0.10933383759143178, 0.09233566526852188, 0.07571227874207509, 0.07621887648994163, 0.10765952850322302, 0.00485706682670517, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0725144193552052, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21914764899878503, 0.2581890571865584, 0.16874590431730252, 0.17242522377427116, 0.21882923127009457, 0.2455694906905106, 0.13686076428669325, 0.15201855028443934, 0.19380999433790302, 0.01866315478375058, 0.02682346517679013, 0.04694673719863984, 0.020579398002927185, 0.04476453858625795, 0.029170081933023506, 0.045200894366509425, 0.029987320714573218, 0.03727608650372638, 0.12095910018112987, 0.09310330772499675, 0.0931914344528586, 0.08052707156073957, 0.1034837538463893, 0.09239582548030956, 0.10949441525160075, 0.07292312341953278, 0.07283436773611518, 0.1265311156245642, 0.11055687271265247, 0.10717163592119483, 0.11119940438203435, 0.16390998547978253, 0.129337841851614, 0.15264514315314204, 0.1368889941010506, 0.1270296717910343, 0.05509204538740997, 0.057350170426883396, 0.04342402823675329, 0.10554346998152087, 0.13108422509092255, 0.059974900195704284, 0.08502960549186067, 0.07175974407395769, 0.060996366207449526, 0.11933949822235901, 0.11913169805726442, 0.14442218242698124, 0.13413102088757278, 0.14028239086280359, 0.1298781696740967, 0.16121660659272563, 0.12926293416480839, 0.11499754699438403, 0.1281925039541849, 0.1457107365673148, 0.15047066329313707, 0.16125774647069246, 0.1413563340140297, 0.1316737872901691, 0.15168441099862207, 0.1347106113906148, 0.07434417571454432, 0.09544125598141218, 0.11393530233711169, 0.08792673485646796, 0.21032721646617836, 0.09857932229742561, 0.11065834955178289, 0.06454354328516487, 0.08939457166346387, 0.06670900411802616, 0.14486110699484123, 0.08804988014266668, 0.08163731003901498, 0.07334862739258152, 0.09206528366055378, 0.09965530547425738, 0.17049594497389153, 0.09408331240024637, 0.053800972610434705, 0.17026431387199026, 0.12960011177606434, 0.16162603043938617, 0.1557127538559525, 0.16142201335861806, 0.15014754361642102, 0.13691686830019667, 0.1410385141003726, 0.1488007690862876, 0.03716702461598487, 0.025820092915012527, 0.025557927669903058, 0.03134395143805124, 0.030327828859193273, 0.03836776808118825, 0.024372770108517017, 0.03482686219161135, 0.04258989520878331]}, "mutation_prompt": null}
{"id": "d83b63e2-2152-4f7d-b639-0a0fe84c8c3c", "solution": "import numpy as np\n\nclass AHSA_DN_Improved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        hypercube_size = (self.upper_bound - self.lower_bound) / (3.5 * np.log1p(self.dim))\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n        dynamic_mutation_rate = 0.1\n\n        last_direction = np.zeros(self.dim)  # New line\n\n        while self.evaluations < self.budget:\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                direction *= (1 + np.random.rand() * dynamic_mutation_rate)\n                direction += 0.3 * last_direction  # Enhance persistence\n                candidate_position = position + direction\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position\n                    hypercube_size *= shrink_factor\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.92\n                    success_count += 1\n                last_direction = direction  # Retain direction\n\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n            success_count = 0\n\n        return self.best_position, self.best_value", "name": "AHSA_DN_Improved", "description": "Introduced adaptive mutation rate decay and directional persistence to enhance local exploitation and convergence.  ", "configspace": "", "generation": 81, "fitness": 0.265096515851489, "feedback": "The algorithm AHSA_DN_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.25.", "error": "", "parent_id": "f935c776-cb1f-47da-aaf0-c76c3739c90b", "metadata": {"aucs": [0.7241212517566368, 0.7104888319528916, 0.7093239331764691, 0.7722401466569813, 0.7272846302240921, 0.7373173036491063, 0.7407180859106008, 0.7166603099265973, 0.7670259786041351, 0.0017763122014515798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007321609616371516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1199930270741264, 0.08951627201280354, 0.12170187961728063, 0.08639685735821223, 0.14210234130952015, 0.05206247464181102, 0.10131258343237537, 0.1080436614604845, 0.09257421075899963, 0.15409442236298487, 0.04477077335908375, 0.10625306362663212, 0.0945242932616468, 0.13593203465917736, 0.09034276158538435, 0.061243843084360594, 0.1052824592407593, 0.15381115793103595, 0.9788856436899619, 0.9922209855121383, 0.9710902861944959, 0.9700316380638622, 0.9843006360512384, 0.9892502034784088, 0.988968066631903, 0.98632873858239, 0.9910737535036216, 0.6757290068740032, 0.7023267216851902, 0.7799974330726686, 0.5487273543394193, 0.5377611116334997, 0.7169535380798395, 0.4299102795766163, 0.5684947236317454, 0.3327572922949369, 0.2254398570422662, 0.40646479410745007, 0.16919336933597007, 0.7515662801848798, 0.41035126772150643, 0.27975187084152897, 0.5808907951083481, 0.7690509183054881, 0.23518512332148478, 0.18274052401285568, 0.17099901936401152, 0.1221510662049734, 0.21603699626431672, 0.17431538610739283, 0.16998597138191596, 0.17490429066046942, 0.12942813852988422, 0.1827173149577911, 0.17332834112065942, 0.19553559163890044, 0.18466540929287856, 0.1895275087663828, 0.1602220394225744, 0.12385196341837235, 0.19162640088633953, 0.16382826885256907, 0.13024705763886069, 0.08241986833734716, 9.999999999998899e-05, 0.05385898654267951, 9.999999999998899e-05, 9.999999999998899e-05, 0.05407726794964296, 9.999999999998899e-05, 9.999999999998899e-05, 0.019780664106311296, 0.07489220193302104, 0.1380358706235627, 0.08353545367342308, 0.04290901633230204, 0.06131983753652859, 0.03373304056883841, 0.06149077352781551, 0.03427450664884213, 0.04246669415358284, 0.13011509134029242, 0.3424878095023576, 0.10594630583365217, 0.1351200096099121, 0.11475854007355302, 0.0866354530950697, 0.1850320240698664, 0.044423610535628044, 0.087391112334818, 0.08107499373456561, 0.12493434036493112, 0.0935122848460751, 0.13864560566979311, 0.1273099479946903, 0.11689233515755348, 0.13062142589666237, 0.17439432173739788, 0.14976698988150672, 0.4940069366719093, 0.48238127235027706, 0.49173072649110317, 0.47479587200863516, 0.4854896850713847, 0.4563875955190101, 0.45913575729464073, 0.48375742330245175, 0.4404654501072247, 0.14116361983464698, 0.1042497673735937, 0.09200989233770285, 0.14022614227820485, 0.12922442117921162, 0.1586323728025949, 0.09375415464739256, 0.10861654050696001, 0.10609544963501194, 0.14365589014163294, 0.2612132135820009, 0.2631740628922745, 0.18617246031970847, 0.1821463981625786, 0.4070248557457218, 0.26456788287777344, 0.19906428972311274, 0.23280434611274892, 0.39216193828588486, 0.2748814016018123, 0.19157385468622035, 0.34568397312524035, 0.30458189039801253, 0.3473412710972572, 0.3887606876890174, 0.233856578756378, 0.3492390633775394, 0.2659717225107161, 0.2632857910466925, 0.22266725634983286, 0.21668011328783543, 0.23054084181925516, 0.3525445304424023, 0.1746980028745635, 0.26126915795807404, 0.09118598919675514, 0.23093514972919993, 0.21218308561736487, 0.25025275455133367, 0.20772060571394868, 0.23955976255585965, 0.27976586775919987, 0.21332450146647797, 0.19687984937591063, 0.249807254077842, 0.18430322767810836, 0.18644608627113357, 0.21132308441671632, 0.18463714512628127, 0.21738058832657847, 0.1771092604650868, 0.19636143300714426, 0.19216342260799357, 0.17900235308649748, 0.1567782518555798, 0.13496854998798224, 0.7884305762576981, 0.7941304472277423, 0.1530350494420829, 0.12299301108788563, 0.10849488290932519, 0.1249698845684899, 0.1674956705184164, 0.7415505714318743, 0.11244276127162689, 0.8012829842915751, 0.08297741887468801, 0.10503136663172297, 0.2086947060603196, 0.5483140936032498, 0.1694195250566619, 0.3725544726430463, 0.2069464952306478, 0.20519393658267804, 0.20840042922949475, 0.2010849377187034, 0.19447688014998576, 0.21226524178608674, 0.22325126293915232, 0.22007505358683577, 0.19364845267507347, 0.10833633309515112, 0.10102707234335817, 0.09802543173310418, 0.10138102290938056, 0.1013140705905593, 0.09161852221596056, 0.10558096999178457, 0.09209396753736077, 0.06843127313042807]}, "mutation_prompt": null}
{"id": "27cb8a57-9c87-44f5-bb28-cc7798596088", "solution": "import numpy as np\n\nclass AHSA_DN_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        hypercube_size = (self.upper_bound - self.lower_bound) / (3.5 * np.log1p(self.dim))\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n        dynamic_mutation_rate = 0.1\n\n        last_direction = np.zeros(self.dim)  # New line\n\n        while self.evaluations < self.budget:\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                perturbation = np.random.randn(self.dim) * 0.01  # New line\n                direction *= (1 + np.random.rand() * dynamic_mutation_rate) + perturbation  # Modified line\n                direction += 0.35 * last_direction  # Enhanced persistence\n                candidate_position = position + direction\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position\n                    hypercube_size *= shrink_factor * 0.98  # Adjusted shrink factor\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.91\n                    success_count += 1\n                last_direction = direction  # Retain direction\n\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n            success_count = 0\n\n        return self.best_position, self.best_value", "name": "AHSA_DN_Enhanced", "description": "Introduced adaptive directional amplifying with decay and stochastic perturbations to enhance convergence and exploration balance.", "configspace": "", "generation": 82, "fitness": 0.26336681045565913, "feedback": "The algorithm AHSA_DN_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.26.", "error": "", "parent_id": "d83b63e2-2152-4f7d-b639-0a0fe84c8c3c", "metadata": {"aucs": [0.8039377380929238, 0.8262272354717373, 0.7440580006501705, 0.7707134736198151, 0.7957697572770767, 0.7954155690932819, 0.7539136506785016, 0.8224569352156721, 0.7789482912254072, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027062104325705327, 9.999999999998899e-05, 0.001597306304744417, 9.999999999998899e-05, 9.999999999998899e-05, 0.08917260597514887, 0.12695336679935076, 0.06565716261841592, 0.13610299225600375, 0.10775685634083443, 0.08392293062890455, 0.11661970524960474, 0.07845009393681046, 0.08514791851084469, 0.08376818297670363, 0.06042111752777768, 0.0858311488581236, 0.11582954173887228, 0.09223842805652127, 0.08212797060035115, 0.13246888719283, 0.059680106855161785, 0.07598477388362768, 0.9852286374626898, 0.9795664404559781, 0.9683668492198407, 0.9854550881380877, 0.9474921328590243, 0.9873613199984105, 0.9702230255149755, 0.9814648981051792, 0.9674925644133702, 0.8020529662835589, 0.6502514241229982, 0.8688372707269547, 0.6007066719268179, 0.6292869603897023, 0.6179787330819253, 0.7362576057156895, 0.5861093699693608, 0.6302103948496739, 0.37085053302228566, 0.2287951057165426, 0.22581472295871585, 0.19482872570529797, 0.7321827459158279, 0.2127421928818679, 0.746486962943455, 0.6993375699180902, 0.810720797812704, 0.12501685895831782, 0.2651614916511863, 0.23743541573968485, 0.22353061472705893, 0.21854413654946192, 0.15417467807970897, 0.1968894828642893, 0.1683862471049684, 0.17355233644662726, 0.20084225128825428, 0.18200165785572053, 0.17170825903600473, 0.18241259396919418, 0.18692551477648356, 0.18307120862323367, 0.14802493990278653, 0.2105570385239972, 0.10506760834295781, 9.999999999998899e-05, 0.00824891639536085, 9.999999999998899e-05, 0.07847806029441695, 0.044690177708321066, 0.057325750470651804, 0.030985878153150792, 0.12982898993180336, 0.04019487060138671, 0.0887236917092441, 0.051650039560652616, 0.1697014181646569, 0.050072477484895184, 0.02232300281635058, 0.0032852578048992997, 0.10210978844138541, 0.022843956205525484, 0.0391362357397389, 0.027875977286443088, 0.02767881897666269, 0.09488868432956898, 0.22604031272738823, 0.14253951695289635, 0.07386640272671885, 0.061843157852729425, 0.13386302677338247, 0.05803038288491047, 0.11877365985136223, 0.07687956240582139, 0.23331396377472569, 0.20962542765513792, 0.14847779471439349, 0.21657924568798936, 0.46413065843272694, 0.12724557810554982, 0.10873261114291377, 0.45064128144367355, 0.4808240202243851, 0.5187356899702833, 0.49646773909975284, 0.49281159950895803, 0.5055216320242872, 0.4827071234313227, 0.4498056651350568, 0.4759511387348859, 0.09832669371126845, 0.052197764685742776, 0.04956406695477522, 0.10758642969885801, 0.07448213195898701, 0.10140111519615369, 0.0737720841638344, 0.10496675098054387, 0.09927287929554618, 0.15652183330307923, 0.5112329426678461, 0.16799622445245677, 0.2777744977825849, 0.283930412135287, 0.397713743546081, 0.22078936228394364, 0.19446714317747937, 0.19773447323359827, 0.268706913023673, 0.4286143340104741, 0.2826834608807901, 0.4162945805523468, 0.21736907337589906, 0.3263429464177059, 0.25291675257247004, 0.3246210861774558, 0.14473927866886804, 0.26088775718548163, 0.14699034706581027, 0.07953278594543067, 0.298849065706282, 0.1613414520364831, 0.2984122906169898, 0.17909824106981598, 0.14650707249259065, 0.07271867635000984, 0.18460179475806393, 0.20480225712766875, 0.1973058403120943, 0.260132849647997, 0.22232125473638042, 0.20365316460142557, 0.2054620106425198, 0.21976624317237792, 0.2106693210747017, 0.1847668288214761, 0.7241207225070483, 0.18061292887361302, 0.19315394489372806, 0.20621709315956982, 0.18995455550886742, 0.1970427294083119, 0.23855574927110368, 0.184855314722137, 0.15853894849208972, 0.1355421725099768, 0.10515276352779857, 0.17319401933482936, 0.06585504171790091, 0.15335169183105812, 0.10835289673553794, 0.1261770588943929, 0.1667404892321671, 0.7288288484007763, 0.11256241895703456, 0.12759312453621674, 0.15512818580450316, 0.10503856241135656, 0.10524860935462765, 0.11328698865067255, 0.1691869563488908, 0.5536706046260714, 0.20861216472519206, 0.1914700664340736, 0.18527083280416, 0.19426835507872198, 0.20333421584147304, 0.21009244507866986, 0.21886759579048476, 0.21809283163783555, 0.22678454972170015, 0.11112997334553854, 0.09860864737291397, 0.09358308737802012, 0.08776006606900644, 0.08916118357587222, 0.11393620715945785, 0.14208636465128943, 0.04942655489199754, 0.1049581890380854]}, "mutation_prompt": null}
{"id": "dae731bc-0e68-4fa8-900a-1e63ca3786bb", "solution": "import numpy as np\n\nclass AHSA_DN_Improved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        hypercube_size = (self.upper_bound - self.lower_bound) / (3.5 * np.log1p(self.dim))\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n        dynamic_mutation_rate = 0.1\n\n        last_direction = np.zeros(self.dim)  # New line\n\n        decay_factor = 0.99  # Introduced decay factor\n\n        while self.evaluations < self.budget:\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                direction *= (1 + np.random.rand() * dynamic_mutation_rate)\n                direction += 0.3 * last_direction  # Enhance persistence\n                candidate_position = position + direction\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position\n                    hypercube_size *= shrink_factor\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.92\n                    success_count += 1\n                last_direction = direction * decay_factor  # Apply decay\n\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n            success_count = 0\n\n        return self.best_position, self.best_value", "name": "AHSA_DN_Improved", "description": "Introduced a decay factor to directional persistence for improved adaptive search balance.", "configspace": "", "generation": 83, "fitness": 0.26829995988523625, "feedback": "The algorithm AHSA_DN_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.25.", "error": "", "parent_id": "d83b63e2-2152-4f7d-b639-0a0fe84c8c3c", "metadata": {"aucs": [0.7098468139762583, 0.7287156499067475, 0.6967379272587513, 0.8155047334060068, 0.7153609995019745, 0.7346246801254255, 0.6911062179377854, 0.7773254451405649, 0.7815093584805759, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009145536601202875, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1495066446985096, 0.09714040369980681, 0.10638417838570058, 0.08428238660764387, 0.09968007428989745, 0.10855506601843679, 0.10815764771556535, 0.12490240217387505, 0.1245341955450251, 0.10488936469693055, 0.05777591385372538, 0.08464316184254073, 0.11178891749171505, 0.11634271768578397, 0.07780710970828009, 0.08205056245885589, 0.08784061747751548, 0.06084657355026957, 0.978898874692773, 0.9922235125393977, 0.9710574256640199, 0.9700184602694975, 0.9843140823468757, 0.9892455388106826, 0.9889651287973313, 0.9863277623486488, 0.9910792310437787, 0.6188363134158901, 0.5904239834171728, 0.7201185700434372, 0.48672207176555116, 0.5828605312376776, 0.5489061107926692, 0.7190942291720958, 0.6984033958593281, 0.5424123524204654, 0.2412151116631861, 0.7553372882790985, 0.5064063697404122, 0.26206095294903997, 0.5159078588760666, 0.31341216102617653, 0.23216640614077244, 0.23654042698902644, 0.45693236670840165, 0.14071922326035025, 0.15212364866377104, 0.16835970914551235, 0.19978962137828327, 0.12566745714604022, 0.17543934975487752, 0.12322091486400755, 0.13151741148504048, 0.18815562923293827, 0.194979811511239, 0.30545234329354987, 0.23718489961743172, 0.21703223464424737, 0.16702844127669192, 0.19790149579349414, 0.1713214890448964, 0.1582736468513951, 0.13786287675534992, 0.012367379966973013, 9.999999999998899e-05, 0.002118160027318461, 9.999999999998899e-05, 9.999999999998899e-05, 0.07285659257845423, 0.008843165998608904, 9.999999999998899e-05, 9.999999999998899e-05, 0.077909443296592, 0.07096908722157136, 0.12086583038059817, 0.055040205685165544, 0.03741787470906033, 0.00911970118577643, 0.09588121501917468, 0.05934690725092917, 0.08954409632694837, 0.15589646664707923, 0.1565211248838898, 0.03691677791199832, 0.06541164340109751, 0.07355111398330083, 0.06766336796414785, 0.09860797786009357, 0.08810567604361419, 0.2192748419331506, 0.08114444496302553, 0.18255732018395743, 0.1444561596926207, 0.13838117618480228, 0.18960685606780137, 0.08148070788306327, 0.13929999634790513, 0.15423239949277034, 0.15583918682528697, 0.5178266939844476, 0.4566797101591835, 0.47957020451054955, 0.4842172766749804, 0.477548889004192, 0.47824999498385745, 0.483630468075135, 0.49367804063611487, 0.45862684383518293, 0.08947165004084767, 0.16020300880179927, 0.07723565977350355, 0.11400754381089462, 0.13933857272916428, 0.1352663529198409, 0.10278640294616093, 0.10788224874674923, 0.11598814760592957, 0.17995288272711607, 0.32324097917993877, 0.2909711028881513, 0.19827772058660686, 0.1739096918617522, 0.1722329728386649, 0.24152575282431188, 0.21408297307616342, 0.27793070998547287, 0.3477926863500498, 0.2619789955867521, 0.36152782669908734, 0.3226790388213069, 0.3755141759330485, 0.313060268697152, 0.32476803281067546, 0.24592978155906076, 0.3272843225502984, 0.29323721749158527, 0.29433470388164085, 0.2180513009483811, 0.2192255015764526, 0.2762108768351611, 0.16276716957257198, 0.18549138908509122, 0.2065932106825824, 0.31628691214720983, 0.202353213777273, 0.22995125547612627, 0.20664815208664034, 0.17764284663466967, 0.24728617188717794, 0.21820863698096593, 0.1898108186576759, 0.21496450268356215, 0.19279414731277533, 0.20263545023321927, 0.2160837936445814, 0.19134365104721496, 0.2068857941438399, 0.676109834471111, 0.20046530416932873, 0.18839062721858746, 0.18306911326353192, 0.18855785059778885, 0.1567853904246116, 0.13550476695942293, 0.8133657452357911, 0.7783068676263356, 0.15331253911054754, 0.12299605504977373, 0.10852206772413775, 0.1249298230238246, 0.16754257800914196, 0.7357375023575344, 0.11244661573183834, 0.7946680331308296, 0.08294477748573681, 0.10502274731896977, 0.20851459014335127, 0.8300432754577143, 0.16953249745273746, 0.42757838276194715, 0.1884371077507334, 0.22764833123835082, 0.1933045063515455, 0.22173512186564426, 0.19007974084307533, 0.21883786244204229, 0.2249264842404245, 0.2736382632960128, 0.20427109250926223, 0.09837572229795766, 0.12213413257754469, 0.08494694608581521, 0.09748578573379851, 0.06872201311754111, 0.13936630777232406, 0.10831217888865607, 0.06862269559948564, 0.10247679799494358]}, "mutation_prompt": null}
{"id": "65857aab-557e-44ce-b18f-ec5876c0941d", "solution": "import numpy as np\n\nclass AHSA_DN_Improved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        hypercube_size = (self.upper_bound - self.lower_bound) / (2.5 * np.log1p(self.dim)) # Adjusted\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n        dynamic_mutation_rate = 0.1\n\n        last_direction = np.zeros(self.dim)\n\n        decay_factor = 0.99\n\n        while self.evaluations < self.budget:\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                direction *= (1 + np.random.rand() * dynamic_mutation_rate)\n                direction += 0.3 * last_direction\n                candidate_position = position + direction\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position\n                    hypercube_size *= shrink_factor\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.88 # Adjusted\n                    success_count += 1\n                last_direction = direction * decay_factor\n\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.03 # Adjusted\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n            success_count = 0\n\n        return self.best_position, self.best_value", "name": "AHSA_DN_Improved", "description": "Enhanced adaptive search by introducing a dynamic hypercube scaling mechanism and refined mutation rate adjustment.", "configspace": "", "generation": 84, "fitness": 0.270050371355469, "feedback": "The algorithm AHSA_DN_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.26.", "error": "", "parent_id": "dae731bc-0e68-4fa8-900a-1e63ca3786bb", "metadata": {"aucs": [0.7071827237871708, 0.740607535876191, 0.741948768460382, 0.7445493050797127, 0.732911814526631, 0.7520237777820802, 0.7911625551990453, 0.749537545221608, 0.7053199418036171, 0.1327471414632846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11326263888240773, 9.999999999998899e-05, 0.0005602048113864111, 0.11981206818862444, 0.09337906895614412, 0.1238609888164367, 0.09766265593803014, 0.08410945710213769, 0.09137902080250404, 0.11543051641913171, 0.07632974319056052, 0.13006284145995273, 0.08212957648355568, 0.14324946859881948, 0.08251182206840568, 0.10605060842054059, 0.10135365152288944, 0.08501483019404221, 0.07536385893210062, 0.15290353069920037, 0.09058258809153774, 0.9867696403560519, 0.9861149181329654, 0.9816751062818949, 0.9825322829150362, 0.9841061283215149, 0.9896462281650983, 0.9955629655492031, 0.9865448188013803, 0.9960899227468385, 0.5649772130388995, 0.5895908955982213, 0.520305146809567, 0.5369716255352286, 0.7087590708911922, 0.4252878207482963, 0.5973476198349883, 0.728401343590554, 0.6829525813047785, 0.7326425432773657, 0.3133665017981221, 0.13585183837084736, 0.26008305043651847, 0.44349906659309746, 0.7816262642107787, 0.31903737611912797, 0.7943033720401347, 0.5307658350127356, 0.15550854629647803, 0.26185425813232854, 0.11457985910341817, 0.15888761248105698, 0.1597124883224691, 0.17535565059460145, 0.1885300423036278, 0.15824682835355708, 0.21850827200295375, 0.18105843288294565, 0.19091746769816387, 0.18829168704330557, 0.19627674812810303, 0.09790938499964508, 0.1212762957213801, 0.15613293648055693, 0.20894149618853974, 0.18504280925026073, 0.012416602291335233, 9.999999999998899e-05, 9.999999999998899e-05, 0.052792642336642936, 0.001339138643041915, 0.011984451429900456, 0.029504306286114668, 0.010384545920932187, 0.017837555204070488, 0.034722570460890334, 0.07763911917190258, 0.04929946262649609, 0.035359890141017813, 0.04771192646410072, 0.010170342732635063, 0.11763503263296482, 0.10007043940275728, 0.11013899957328743, 0.024619359441954702, 0.02656303890961975, 0.10619911793758552, 0.08852896806337318, 0.10507819193744894, 0.055189270184886285, 0.20752962132214148, 0.05232206537916462, 0.12538066620642618, 0.14501674452157076, 0.07790152172315679, 0.06857192017534741, 0.12147283025899891, 0.13479110823381157, 0.10070781469208379, 0.11156416771532718, 0.10924661913720357, 0.14345516967423733, 0.4640548157595332, 0.4500921908854719, 0.4719865186268102, 0.4760156975306018, 0.45035452159400025, 0.46600249225684187, 0.4431559260016841, 0.4393681325727623, 0.5045165537329226, 0.09652321443427003, 0.128402305836555, 0.13645973465545125, 0.12230934579519448, 0.10137479586728348, 0.09323956900393127, 0.08849980567291205, 0.11201205552833526, 0.15797244322553783, 0.20363725605332428, 0.23229761748340816, 0.2229522556207021, 0.24226348732392966, 0.31393361042610246, 0.27432550008424017, 0.1726565810659747, 0.20446366942352856, 0.19191706780210238, 0.41153738217080305, 0.1847785568196555, 0.16908250170858574, 0.20437242405803913, 0.4376570072245034, 0.16576656453044636, 0.34205933248817566, 0.3172038789459475, 0.22522474439340057, 0.20413649156529268, 0.22516770290370014, 0.09905703859716031, 0.2792858065373778, 0.20100413435526632, 0.17746185125211467, 0.2582442377821217, 0.21937200960280123, 0.20623319286559505, 0.1915607664084642, 0.2016810199877641, 0.21070003395444437, 0.18482208164290048, 0.19193286511696084, 0.21264309316430308, 0.23071670778828668, 0.19494140614286815, 0.1936056489448329, 0.18171468016908088, 0.19149078926758623, 0.1805506810487374, 0.23038615522270034, 0.23346695993397615, 0.18687949067873844, 0.19196471982400065, 0.21362193901629078, 0.6514195174599711, 0.15488266394443873, 0.13448254568046558, 0.7837966169552759, 0.8313273380474008, 0.196740321021873, 0.12261482654657252, 0.7859774851778395, 0.12458771454858053, 0.16402220028218195, 0.6054117890187709, 0.11254388794539794, 0.4048318442286045, 0.67809606440422, 0.4669168853039306, 0.20661851005051912, 0.36481994494385606, 0.16928167294054308, 0.6722646560616425, 0.20169812850350854, 0.20551534781890235, 0.21444429087771943, 0.20786066747519139, 0.2104398300326934, 0.2037923677004152, 0.240360460484224, 0.23592537898611854, 0.20709716138569612, 0.09194346037884693, 0.08842805253773223, 0.08496318541716408, 0.08876762945901051, 0.10172027605412093, 0.07879684493340278, 0.09369143435977256, 0.08677503457646596, 0.08812565478752332]}, "mutation_prompt": null}
{"id": "083634e3-5d11-4435-852e-e1f7a84de900", "solution": "import numpy as np\n\nclass AHSA_DN_Improved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        hypercube_size = (self.upper_bound - self.lower_bound) / (2.5 * np.log1p(self.dim))\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n        dynamic_mutation_rate = 0.1\n\n        last_direction = np.zeros(self.dim)\n\n        decay_factor = 0.99\n\n        while self.evaluations < self.budget:\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                direction *= (1 + np.random.rand() * dynamic_mutation_rate)\n                direction += 0.3 * last_direction\n                candidate_position = position + direction\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position\n                    hypercube_size *= shrink_factor\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 1.05  # Adjusted\n                    success_count += 1\n                last_direction = direction * decay_factor\n\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.03\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n            else:\n                dynamic_mutation_rate *= 1.01  # Adjusted\n            success_count = 0\n\n        return self.best_position, self.best_value", "name": "AHSA_DN_Improved", "description": "Enhanced adaptive search by incorporating a nonlinear dynamic mutation rate and adaptive exploration-exploitation balance.", "configspace": "", "generation": 85, "fitness": 0.1401454568306819, "feedback": "The algorithm AHSA_DN_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "65857aab-557e-44ce-b18f-ec5876c0941d", "metadata": {"aucs": [0.20952557729557542, 0.2438345125757685, 0.213293201518726, 0.21817061723293907, 0.23104114292018707, 0.2195167187251026, 0.22247152912077695, 0.2114344963692535, 0.23273546670569867, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061331046766301966, 0.04837020723041263, 0.08123264952720533, 0.03804263114526618, 0.05524120920517195, 0.05178320195878061, 0.04903802949548686, 0.048717543491544335, 0.06158529814047764, 0.03211684634465961, 0.05402314882470072, 0.04663669477141463, 0.048470057200994954, 0.05859851341198208, 0.06116162753347276, 0.07554142746614745, 0.04613981074186835, 0.0522950833385345, 0.9893617487496643, 0.9919644786763376, 0.9815571816593539, 0.9824066821907804, 0.9848582943214199, 0.9905196043689386, 0.9956832691549408, 0.9866637178146389, 0.9961705105444814, 0.08706018027637852, 0.11696145129192359, 0.11551137668610123, 0.14194485987039485, 0.11352651355208254, 0.13362699758595242, 0.1186654140444443, 0.11348476279450037, 0.11569905121148771, 0.1675843169500053, 0.13536502117270743, 0.11176157176131496, 0.24342745710876568, 0.16858953721908843, 0.17795357074931994, 0.11463311988294866, 0.14822177759336175, 0.18389779494566516, 0.012165549732681802, 0.07321340240520291, 0.04461872911619991, 0.06294518570354646, 0.12234060176212391, 0.03395280384866495, 0.04916160019514659, 0.07829461232332147, 0.10205276033155208, 0.049444306256664294, 0.06691802832195426, 0.03841471638699645, 0.028699723986849723, 0.016047513412844272, 0.07792963019543842, 0.044225229297362056, 0.1001050981634155, 0.005613403138184703, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011301409686904518, 0.08659639208664027, 0.06692351541057928, 0.025150718168889585, 9.999999999998899e-05, 0.02603830538401619, 0.07315720379737833, 0.018099392134149683, 0.020567030246001372, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038508025297311343, 0.0050264089701297365, 9.999999999998899e-05, 0.03210394822394502, 0.012290913143476412, 0.009860420558468475, 0.011206877502622725, 0.012516218651693056, 9.999999999998899e-05, 0.26297082281088147, 0.23474045554662493, 0.2630378422701326, 0.21610829984998658, 0.22596281454126355, 0.2231925229055508, 0.21657626513479267, 0.2385503675343843, 0.22554996472088273, 0.06069494971758371, 0.0889382864089473, 0.06067909350849243, 0.05733748513151282, 0.059278703486471906, 0.05453401426741511, 0.045177829913786494, 0.053297263480253765, 0.049750800049834676, 0.10982977564985008, 0.18028477367862228, 0.10709588057855346, 0.14341855610263032, 0.12730807948412115, 0.1048288893584528, 0.12156886798066391, 0.11075714026411498, 0.10757083682222712, 0.18435553594514864, 0.19138941769852535, 0.1831301361515687, 0.1656655250095791, 0.18347165460567438, 0.15846670072170932, 0.17963828529650439, 0.18573027225416439, 0.17634672302830057, 0.13159699863210284, 0.11952589714764139, 0.10645983931380121, 0.12192264636449068, 0.1255589914201357, 0.12000876046131093, 0.106853354316367, 0.10962678992697261, 0.09402241837812886, 0.20329824131390928, 0.15096736682653222, 0.14802898821645138, 0.16231440973277944, 0.14364926090158037, 0.19798080767494097, 0.17275572725574584, 0.16270826658947768, 0.1768252261289246, 0.14745834546397696, 0.15707139210771692, 0.15640497728245994, 0.1584561103100125, 0.1556334993482822, 0.1613013072808055, 0.15257582511259027, 0.1615002576098663, 0.15472864396740182, 0.12139888171625557, 0.11083757617279011, 0.23121109085626423, 0.2038563843065142, 0.1581534494749861, 0.11818307030411124, 0.16990137453110365, 0.12283189374427184, 0.1630298306002803, 0.22422728875255105, 0.11008381340778362, 0.19686538521284436, 0.2418079102709959, 0.1835298723052644, 0.16933005878439122, 0.15048087074814065, 0.16671510366286935, 0.1378495922519396, 0.16717706297792667, 0.1668676617321555, 0.1750904283203576, 0.18649717482746375, 0.164997247882665, 0.1798181934035885, 0.1718435389508468, 0.20827454111852273, 0.15834306400761, 0.06296463672087793, 0.0758779432778599, 0.07018898308166877, 0.06221637024855464, 0.05729707952706342, 0.06840341960263685, 0.06847974982568261, 0.06388529821447264, 0.06315265130214143]}, "mutation_prompt": null}
{"id": "8bca6646-ca6f-4fb2-ba6b-a1d554ffefdc", "solution": "import numpy as np\n\nclass AHSA_DN_Improved_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        hypercube_size = (self.upper_bound - self.lower_bound) / (2.8 * np.log1p(self.dim)) # Adjusted\n        shrink_factor = 0.92 # Adjusted\n        success_rate_threshold = 0.35 # Adjusted\n        success_count = 0\n        dynamic_mutation_rate = 0.1\n\n        last_direction = np.zeros(self.dim)\n\n        decay_factor = 0.98 # Adjusted\n        momentum_factor = 0.2 # New\n\n        while self.evaluations < self.budget:\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                direction *= (1 + np.random.rand() * dynamic_mutation_rate)\n                direction += momentum_factor * last_direction # Adjusted\n                candidate_position = position + direction\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position\n                    hypercube_size *= shrink_factor\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.88\n                    success_count += 1\n                last_direction = direction * decay_factor\n\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.03\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n            success_count = 0\n\n        return self.best_position, self.best_value", "name": "AHSA_DN_Improved_Refined", "description": "Improved dynamic scaling and momentum introduction for enhanced convergence in adaptive hypercube search.", "configspace": "", "generation": 86, "fitness": 0.2592740339343388, "feedback": "The algorithm AHSA_DN_Improved_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.24.", "error": "", "parent_id": "65857aab-557e-44ce-b18f-ec5876c0941d", "metadata": {"aucs": [0.7298434960979443, 0.6934866327601642, 0.7843025428119249, 0.7550849042637101, 0.7207404323060183, 0.8378553557518971, 0.7677497599498107, 0.7733950891971779, 0.7535037928630787, 0.07542932586438766, 0.023335366728598483, 9.999999999998899e-05, 0.024406713322483453, 9.999999999998899e-05, 9.999999999998899e-05, 0.033487824075540296, 9.999999999998899e-05, 9.999999999998899e-05, 0.09881182760311336, 0.11691190680890651, 0.153071941941622, 0.11575700054644134, 0.13108416263989298, 0.15225538780834735, 0.12763391636582033, 0.13391295499671485, 0.11747943774645608, 0.11454279130487244, 0.1138801320325954, 0.08429493775022778, 0.09072572231281462, 0.10537214252752014, 0.09821235126845418, 0.06473411888602876, 0.07511161408219436, 0.11346393526308418, 0.9866421317836236, 0.9920770601654386, 0.9783091429557113, 0.9774799376012852, 0.9865570654353618, 0.9892880861529267, 0.9954766722609057, 0.9872562334921956, 0.9961850212773274, 0.33878507667345714, 0.492952742394683, 0.550904989622039, 0.3180298648944878, 0.6922697849289003, 0.6779596377357497, 0.4670756488526211, 0.5736945355623622, 0.7353877219648918, 0.22394910634957776, 0.21463408012009744, 0.21508988982002308, 0.21130150074103626, 0.5556426864212132, 0.3672755047086834, 0.34581167478609554, 0.3478199173895973, 0.5233041169232702, 0.18673465735740957, 0.19315565210007335, 0.15161832645947138, 0.16770603772059456, 0.14457440840011693, 0.19586092834348623, 0.19899974726567005, 0.1939063631250998, 0.23945469838620959, 0.10795879316566026, 0.1594646696158899, 0.22883643213995675, 0.2164083399538429, 0.1826996171171955, 0.1216849629811102, 0.151014454773169, 0.16280423173240743, 0.17494585259324247, 0.019762826355370966, 0.04967800551555701, 9.999999999998899e-05, 0.0018005460669467954, 9.999999999998899e-05, 0.0030824786708273377, 9.999999999998899e-05, 0.0033927711199941424, 0.00160392063121928, 0.014990095022756167, 0.12123398302949195, 0.0731797377000275, 0.08174360259642055, 0.020713760085964705, 0.07326099364679117, 0.17467772101900736, 0.08974972035703488, 0.016150386551549656, 0.030046690687592137, 0.030593987774877873, 0.1647704402607817, 0.07511349183105431, 0.05728094372698744, 0.052411719267244194, 0.056893380079960254, 0.18377996790017037, 0.10746016235691536, 0.18166830789603416, 0.12450287311298247, 0.14525717938955762, 0.18697450734426413, 0.21214534596507362, 0.15943076045863458, 0.09157667564453875, 0.12991640646612546, 0.20546627132221018, 0.4549575620328342, 0.46637017435172257, 0.4893369334852108, 0.4913711093974894, 0.5359293040230261, 0.4757848566899662, 0.4617018298378176, 0.5113614272127487, 0.5107745378868365, 0.10469028194008334, 0.09872515381722424, 0.0925542848930978, 0.10141642995108646, 0.07347548111038105, 0.12117839835889666, 0.15240426836201715, 0.14354942331105847, 0.11280756229007072, 0.30348263617136695, 0.4045174409484652, 0.17484101569281207, 0.21498696774209136, 0.3055174110131327, 0.1671742925528391, 0.2372404523479541, 0.22051921702624988, 0.31615328717705315, 0.3854833698916055, 0.32456190413828767, 0.17805873125733418, 0.3242558568371655, 0.38669229251709025, 0.31815684217162077, 0.31036042200005853, 0.33384997228362145, 0.4096953874592325, 0.2309768979111818, 0.26903185527238394, 0.2127773268091403, 0.2089335315808285, 0.21209091882991915, 0.13394179723504418, 0.20712603139929264, 0.3970369308107483, 0.207016811428952, 0.21227407874179838, 0.24923917178515387, 0.21074320545520453, 0.20182786501852523, 0.2023370065847473, 0.25739345333542574, 0.20988491724986524, 0.18227738229640422, 0.2335311726589575, 0.19868490164068098, 0.1880469905659673, 0.20775931198338304, 0.19040107351278035, 0.1915641511145466, 0.1906912996686686, 0.21388348159346837, 0.1886421830921774, 0.1773436193683896, 0.1559866372769515, 0.13456645836851988, 0.8137282894538422, 0.793472165226357, 0.15209305321972366, 0.12244550610345684, 0.13425976019169716, 0.1142050832567989, 0.15104625124987847, 0.4873631512676093, 0.11153451676187087, 0.07304616380919904, 0.1692649542608753, 0.194755470840839, 0.20858392022086658, 0.4641125989886571, 0.16940992454715542, 0.3520869293034704, 0.19272283464329032, 0.2224301345358628, 0.2209601959726053, 0.2194329843268914, 0.21528928520465718, 0.1939724283683304, 0.19773886222974446, 0.25294199046773147, 0.22275085983473997, 0.09971732304144076, 0.09238648379793757, 0.08857474261840559, 0.1005570552602385, 0.09698099624877454, 0.12782912149145054, 0.11758285909142452, 0.09671177904797224, 0.10328149218875371]}, "mutation_prompt": null}
{"id": "d9687b99-13a1-48ab-834f-a815a39d74d6", "solution": "import numpy as np\n\nclass AHSA_DN_Improved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        hypercube_size = (self.upper_bound - self.lower_bound) / (2.5 * np.log1p(self.dim))\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n        dynamic_mutation_rate = 0.1\n\n        last_direction = np.zeros(self.dim)\n\n        initial_temp = 1.0\n        temperature = initial_temp\n\n        while self.evaluations < self.budget:\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                direction *= (1 + np.random.rand() * dynamic_mutation_rate)\n                direction += 0.3 * last_direction\n                candidate_position = position + direction\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                if candidate_value < self.best_value or np.exp((value - candidate_value) / temperature) > np.random.rand():\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position\n                    hypercube_size *= shrink_factor\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.88\n                    success_count += 1\n                last_direction = direction * (0.99 + 0.005 * np.random.rand())\n\n            temperature *= 0.95\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.03\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n            success_count = 0\n\n        return self.best_position, self.best_value", "name": "AHSA_DN_Improved", "description": "Improved adaptive search by incorporating simulated annealing-inspired temperature decay and refined exploration-exploitation balance.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "An exception occurred: OverflowError('Range exceeds valid bounds').", "error": "OverflowError('Range exceeds valid bounds')", "parent_id": "65857aab-557e-44ce-b18f-ec5876c0941d", "metadata": {}, "mutation_prompt": null}
{"id": "c43d17d9-bd2c-4798-8d0b-11fb2d92d7d3", "solution": "import numpy as np\n\nclass AHSA_DN_Improved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        hypercube_size = (self.upper_bound - self.lower_bound) / (2.5 * np.log1p(self.dim)) # Adjusted\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n        dynamic_mutation_rate = 0.1\n\n        last_direction = np.zeros(self.dim)\n\n        decay_factor = 0.99\n\n        while self.evaluations < self.budget:\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                noise = np.random.normal(0, 1, self.dim) # Added\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                direction *= (1 + np.random.rand() * dynamic_mutation_rate)\n                direction += 0.3 * last_direction + 0.05 * noise # Modified\n                candidate_position = position + direction\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position\n                    hypercube_size *= shrink_factor\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.88 # Adjusted\n                    success_count += 1\n                last_direction = direction * decay_factor\n\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.03 # Adjusted\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n            success_count = 0\n\n        return self.best_position, self.best_value", "name": "AHSA_DN_Improved", "description": "Improved adaptive search by enhancing directionality with correlated noise and modifying decay calculation for better exploration.", "configspace": "", "generation": 88, "fitness": 0.22736160850932993, "feedback": "The algorithm AHSA_DN_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.22.", "error": "", "parent_id": "65857aab-557e-44ce-b18f-ec5876c0941d", "metadata": {"aucs": [0.4608479200096257, 0.48464608449791735, 0.43945444493686414, 0.4566713052971785, 0.45797762410436993, 0.42896848530711984, 0.5010106729102091, 0.45566036209690886, 0.4588118528960621, 0.0925291771372444, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004611801110279146, 0.014716041619858844, 9.999999999998899e-05, 0.06650873590220474, 0.134926843019334, 0.12272454624952478, 0.12344578219071778, 0.11125597797524656, 0.1505476854693807, 0.09574422277711125, 0.11137754379781273, 0.08838249162965295, 0.0910309973585105, 0.10546015873952308, 0.12140840046325396, 0.13822673090511395, 0.08234695684562554, 0.11870424414737168, 0.0670409251941344, 0.08785004233424354, 0.09881994120400117, 0.9878480582368682, 0.9843076762294879, 0.9817262612887814, 0.9701394813681158, 0.9824121160990575, 0.9874221394565061, 0.9867530832376659, 0.9832610906942902, 0.9896314794277118, 0.32550710993492005, 0.3527255148615491, 0.33977970168882865, 0.3352924815169729, 0.3151878662549744, 0.3521703515669612, 0.35886780799042806, 0.3802830287121963, 0.3278836309976839, 0.6592139980388125, 0.5991493450941673, 0.3615288020908831, 0.25748967397493316, 0.28361071810472527, 0.21474717425209278, 0.2276033710069323, 0.3835588906904902, 0.7153916803580616, 0.1172309755004739, 0.18273137418304441, 0.08484333631951191, 0.17141450402995762, 0.19142922083342184, 0.16812081258968137, 0.1707274980132123, 0.17640614517990982, 0.16517504161542107, 0.11715757771013546, 0.15643944776385976, 0.09049986696570556, 0.1595502401444735, 0.16814400895984816, 0.17778992743587063, 0.1826200266393837, 0.20544247254545067, 0.11915404006228769, 0.00010490147147501627, 0.00884635349673224, 0.0001820694728503769, 0.08776322665299763, 0.003406791203892312, 0.02549643945406299, 0.06250123368998606, 0.005257167149167463, 0.005904072651292558, 0.07873545364169532, 0.047870381975047116, 0.08804921933968746, 0.10558325731728635, 0.011772844587740527, 0.057264554092069764, 0.047339413080008, 0.04314853436792532, 0.11306154596572249, 9.999999999998899e-05, 9.999999999998899e-05, 0.007487504815898882, 9.999999999998899e-05, 9.999999999998899e-05, 0.01119096959484922, 0.005933467685129701, 9.999999999998899e-05, 9.999999999998899e-05, 0.10428694067725697, 0.09452312803530916, 0.1022266896166033, 0.11679312922959484, 0.11744079479584812, 0.1086601721601641, 0.10673459490907078, 0.11268008046144184, 0.11997675440862787, 0.42187238093016055, 0.3999294794596495, 0.4526218982575072, 0.4181715008359994, 0.42623557538855483, 0.44384363093009205, 0.4087677798644195, 0.44216233272078453, 0.4242357304130091, 0.11884216807802661, 0.11740115257506534, 0.13218139305447807, 0.10054420030052735, 0.11807592875685802, 0.11407541382423625, 0.08389175990586939, 0.09105505891571608, 0.10100720977576716, 0.3148985691576014, 0.20924107445522389, 0.18350536701318587, 0.2769704194736733, 0.2576304085740371, 0.20433605566142876, 0.21302984602816166, 0.20708471637571635, 0.19992374831441628, 0.30183489510291117, 0.30603444206611674, 0.32125255147454446, 0.2956761450390559, 0.28389104523897213, 0.23841796537610793, 0.2984521665195152, 0.2951778994233424, 0.31965762816826204, 0.22130023333518334, 0.22773196582869049, 0.18466365161051668, 0.24415080410065204, 0.1798818296435173, 0.24433009382987314, 0.17879338663021205, 0.28238031521235973, 0.1859909997096858, 0.20086698451995055, 0.2118846649770164, 0.1994462591864068, 0.23694466857330632, 0.23130410102010546, 0.2030396535961857, 0.22427628402317779, 0.20349891274682463, 0.19668144138433485, 0.1957749748156722, 0.2027114429055925, 0.1802722027893796, 0.19285981385192086, 0.1870455735232105, 0.19958556832007834, 0.19922636819396533, 0.2154479271399008, 0.20174122660843974, 0.18354140152674503, 0.1974098680063714, 0.7706766102898872, 0.17111126399309984, 0.19632815254641278, 0.12192444190620588, 0.16979532364528527, 0.14608341899839883, 0.16654369497507704, 0.12621957542088025, 0.11177093679144656, 0.16877556469534105, 0.2086762725923711, 0.6955062174574292, 0.20813818265628115, 0.09361376870969484, 0.6632167665512954, 0.6346533014319284, 0.18957996637791785, 0.18757994136892453, 0.1818781192003428, 0.19940181970729332, 0.18240724505226968, 0.19288214655697034, 0.18140657536737115, 0.18733429026363813, 0.18773376463369962, 0.1087398660339628, 0.10362561547952776, 0.08790932867131318, 0.0873233902063415, 0.08848764947903653, 0.07878277048461568, 0.08155669730686077, 0.08072755829206602, 0.0735063120222279]}, "mutation_prompt": null}
{"id": "83401f9a-a882-4bad-85eb-5963bfb10d12", "solution": "import numpy as np\n\nclass AHSA_DN_Improved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        hypercube_size = (self.upper_bound - self.lower_bound) / (2.5 * np.log1p(self.dim)) # Adjusted\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n        dynamic_mutation_rate = 0.1\n\n        last_direction = np.zeros(self.dim)\n\n        decay_factor = 0.99\n\n        while self.evaluations < self.budget:\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                direction *= (1 + np.random.rand() * dynamic_mutation_rate)\n                direction += 0.3 * last_direction\n                candidate_position = position + direction\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position\n                    hypercube_size *= shrink_factor\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.85 # Adjusted\n                    success_count += 1\n                last_direction = direction * decay_factor\n\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.03 # Adjusted\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n            success_count = 0\n\n        return self.best_position, self.best_value", "name": "AHSA_DN_Improved", "description": "Improved adaptive search with a refined mutation rate decay mechanism for better convergence.", "configspace": "", "generation": 89, "fitness": 0.2736782327367052, "feedback": "The algorithm AHSA_DN_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.26.", "error": "", "parent_id": "65857aab-557e-44ce-b18f-ec5876c0941d", "metadata": {"aucs": [0.6901103558311863, 0.7403548953891421, 0.7307331059241227, 0.754507304227598, 0.7660617653744525, 0.720621566625933, 0.7738620706963351, 0.7335919033738105, 0.6893147136295135, 0.10247052042119154, 9.999999999998899e-05, 9.999999999998899e-05, 0.003303690848552643, 9.999999999998899e-05, 9.999999999998899e-05, 0.06519326883657772, 9.999999999998899e-05, 9.999999999998899e-05, 0.10404796293739749, 0.1055699224436919, 0.1219747724526391, 0.13913169176215834, 0.09259772768984154, 0.12369088135105466, 0.1207493418762251, 0.1130277559874967, 0.08864600545523482, 0.09462711456862705, 0.10394935078505518, 0.1037339667846674, 0.12198736016303868, 0.10474124633790871, 0.09493548997731527, 0.12906521516455938, 0.08843181853802418, 0.10133447825124908, 0.9867686388202226, 0.9860124269967011, 0.9816744676614371, 0.9825303723383688, 0.984101070554983, 0.9896375579015592, 0.9955563169620462, 0.9865398075028287, 0.9960867706809687, 0.6580142571829609, 0.7309648257464807, 0.5530303365311926, 0.6421850941589837, 0.45342778091208913, 0.6497383419422116, 0.7380761128176829, 0.7587018581556177, 0.6835872406401287, 0.5558158028300539, 0.22075238587508705, 0.7695689883272815, 0.26008305043651847, 0.26774724635973, 0.5297522271495991, 0.581153278285032, 0.3329586379394053, 0.3483509561703313, 0.17693416609867907, 0.23468622385062932, 0.11442952386214933, 0.18187221662888275, 0.11751315131583784, 0.13459503283121776, 0.17990381593127347, 0.1685238037650686, 0.15657551081144616, 0.18752250807176574, 0.17513109701246865, 0.267523521741984, 0.2628422703022939, 0.09625397959756321, 0.16160296273619357, 0.15381538337896694, 0.24612601183859784, 0.19725030303894164, 0.0260155552357082, 0.010665778432911388, 9.999999999998899e-05, 9.999999999998899e-05, 0.016443060978621915, 0.02622269740196448, 0.04884013808003784, 0.09998629560211392, 0.04181876595889078, 0.02123949864089192, 0.06972200491972913, 0.042260528969704, 0.03691823436347352, 0.044327879733017994, 0.019140692616743782, 0.09690107129403147, 0.08682608823402738, 0.05798270635968805, 0.02384967788953074, 0.02450819106078561, 0.06297418011287625, 0.08578153160397672, 0.05454994387082279, 0.0736852993897803, 0.18900328960284296, 0.04961825734374725, 0.11364613315311178, 0.14094109625527707, 0.13193364867812685, 0.07521298280654742, 0.11976985231365311, 0.30338998483092716, 0.10846435472119231, 0.11422977805097811, 0.16439566101270375, 0.28703537663675227, 0.43764701462165123, 0.4599388764923198, 0.4420720261404998, 0.4916236079981151, 0.4785677413288876, 0.47005065537332125, 0.4428093969362269, 0.45917065558858505, 0.4375923898926528, 0.0921362915188807, 0.09833033357469068, 0.1085552940011939, 0.12462044964532537, 0.16291452015709817, 0.10543764119486565, 0.08503732824473809, 0.11047707712702026, 0.12205434298946871, 0.22430562909367968, 0.25481005487516517, 0.2570844184155132, 0.18359253396046238, 0.20403798068411694, 0.25491623796069907, 0.18275260114114256, 0.28231076122413534, 0.24591757140224302, 0.35990964184253615, 0.17151530896668665, 0.2332903012451023, 0.19809002936884457, 0.29689926003094147, 0.20949142023938316, 0.35133078412834107, 0.33203079504463595, 0.1785001209893966, 0.25540268876614236, 0.27594483323657626, 0.13025305429714773, 0.18558001568824833, 0.2522649416739702, 0.2623364261662122, 0.24882619661640204, 0.2321042412344081, 0.0838713841298202, 0.21352826606895337, 0.19921357961092312, 0.21414659148437065, 0.2135402634200103, 0.19726712191462537, 0.20629114260954806, 0.210341887835916, 0.23344570106445905, 0.20639450615144506, 0.19853279530948853, 0.18570089822610514, 0.18587149719583573, 0.6848676870833184, 0.23395785521440904, 0.1866709070809066, 0.19934976111548341, 0.196695145738635, 0.20453283074187079, 0.15485170690431982, 0.13451929478582458, 0.7997205162144926, 0.8183734249518866, 0.1970700508712876, 0.12243992485805466, 0.791311617294881, 0.12459948939968979, 0.16396037980489364, 0.5181550613674649, 0.11254012777796107, 0.3958066437792336, 0.7196475179625297, 0.6720998569055394, 0.2080444776226491, 0.49814610234068735, 0.16915900948405505, 0.7908324576155903, 0.18757266133095496, 0.19668501190456922, 0.1984357580035545, 0.2312287803096248, 0.19635119986913363, 0.2075744311707426, 0.2039563358594363, 0.21870407450883644, 0.19123185895273254, 0.08547307932981585, 0.09460234629137698, 0.08753021768607017, 0.08579715227532347, 0.1022925081190933, 0.0790669836603407, 0.10172920161833277, 0.09650509880833191, 0.08434576482196976]}, "mutation_prompt": null}
{"id": "d4cc37a8-77f6-4732-bdf4-e80910df8cbc", "solution": "import numpy as np\n\nclass AHSA_DN_Improved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        hypercube_size = (self.upper_bound - self.lower_bound) / (2.0 * np.log1p(self.dim)) # Adjusted\n        shrink_factor = 0.92 # Adjusted\n        success_rate_threshold = 0.25 # Adjusted\n        success_count = 0\n        dynamic_mutation_rate = 0.12 # Adjusted\n\n        last_direction = np.zeros(self.dim)\n\n        decay_factor = 0.97 # Adjusted\n\n        while self.evaluations < self.budget:\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                direction = np.random.normal(0, hypercube_size, self.dim) # Adjusted\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                direction *= (1 + np.random.rand() * dynamic_mutation_rate)\n                direction += 0.3 * last_direction\n                candidate_position = position + direction\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position\n                    hypercube_size *= shrink_factor\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.82 # Adjusted\n                    success_count += 1\n                last_direction = direction * decay_factor\n\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.03\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n            success_count = 0\n\n        return self.best_position, self.best_value", "name": "AHSA_DN_Improved", "description": "Enhanced adaptive search with diversified direction mutation and improved convergence feedback.", "configspace": "", "generation": 90, "fitness": 0.25164029403673527, "feedback": "The algorithm AHSA_DN_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.25.", "error": "", "parent_id": "83401f9a-a882-4bad-85eb-5963bfb10d12", "metadata": {"aucs": [0.67311495714324, 0.7146756456630556, 0.764689728256694, 0.7174763870443033, 0.7230098288047203, 0.7417671979790605, 0.6927086244973454, 0.7011660340542913, 0.7107939375210641, 9.999999999998899e-05, 0.008673193939279233, 9.999999999998899e-05, 0.03515808600797443, 0.05518775792882202, 9.999999999998899e-05, 0.08806120823217622, 0.039121269728321195, 9.999999999998899e-05, 0.11506333651451461, 0.0871897266144952, 0.09714702579732892, 0.12872189861602457, 0.0864851022623867, 0.08386616737010577, 0.10583445079660703, 0.11834433875753025, 0.09153826968941192, 0.07700111095612605, 0.08714049356599185, 0.06726675686622308, 0.08576384450290298, 0.1111575147155609, 0.1416446364299775, 0.0997258514877416, 0.0752577062046732, 0.11473376823235737, 0.9883637747791977, 0.9968537473102997, 0.9904500548113768, 0.992295878897433, 0.9907182790976361, 0.9938617435721917, 0.9950663170555964, 0.9921694942460872, 0.9884772587843165, 0.5777530725962755, 0.7083413175398894, 0.40665060068489634, 0.6721437712709306, 0.6808113564390416, 0.7072718061798648, 0.7333774038836025, 0.6832761707195995, 0.5486939810487548, 0.20690816758458308, 0.23187710143899565, 0.20747601426107165, 0.3009118362381934, 0.1990493619749184, 0.25421522792643747, 0.2179664412080089, 0.6948244407813813, 0.2407990798387899, 0.16812205116512358, 0.15879701686147452, 0.16808620004428754, 0.14292607068471297, 0.1640273826358125, 0.17116743889198438, 0.11311992519503677, 0.15545363346250163, 0.15227667606695083, 0.09000721533956135, 0.15474284573692254, 0.09554553212782535, 0.16718667994747627, 0.18827620879361506, 0.1606687706569766, 0.1425384898212767, 0.11290071302683813, 0.18782614169109468, 9.999999999998899e-05, 9.999999999998899e-05, 0.009933844512801993, 0.04579161363781381, 0.016541755569024263, 9.999999999998899e-05, 0.01744849551280714, 0.05599332668940693, 9.999999999998899e-05, 0.032784359984014966, 0.16131581327624045, 0.054896080529501345, 0.05353053317851608, 0.02445668379200394, 0.010005019501554635, 0.06534085592359296, 0.09344931640739595, 0.057665025292413685, 0.022406011165571726, 0.02496833147302402, 0.02709405001524756, 0.09473774350072817, 0.11595492113136274, 0.08008386396276379, 0.07335393580412797, 0.10537548937190078, 0.046619938201956534, 0.15789616169408927, 0.08241912063619494, 0.0962842534888616, 0.08077238230134698, 0.12077547593237647, 0.08531562787107272, 0.10859620100388678, 0.09049981985901145, 0.046461109346207174, 0.44903492645661547, 0.44070903637201786, 0.38310414727144526, 0.41047971716466336, 0.4715225707837366, 0.47661277481525954, 0.45821276187160087, 0.45027449497051486, 0.455339961622505, 0.08564355082220243, 0.15270420290587694, 0.0908767030668427, 0.09305076988874894, 0.10495784959295673, 0.07312990649833084, 0.09432791241593308, 0.1145601409142093, 0.12807929796788708, 0.23710601636219608, 0.27276105905327563, 0.21830984433981815, 0.14282356847963673, 0.24900788352093384, 0.17631427090604446, 0.2321972994209085, 0.20722674275804343, 0.19058510118241678, 0.35483096484874466, 0.292161856566182, 0.3159548559855041, 0.3035507145417847, 0.28421469081076645, 0.39861852057146374, 0.3127100885902032, 0.2985818034811901, 0.2899755243102258, 0.19580204394848366, 0.283348858684608, 0.20369774805230478, 0.16822664450629743, 0.2319357187311606, 0.234155900223615, 0.17920076568807708, 0.17749541483289555, 0.1966126995442512, 0.22632801550608472, 0.17887055839047972, 0.2103192489144885, 0.20003866272932613, 0.19073831515039985, 0.19118209222198568, 0.21428991877946546, 0.18889836741484411, 0.2388739150925061, 0.22146309249369567, 0.18459755499727903, 0.6626743745302548, 0.17707059622523924, 0.1865863253883202, 0.17527566673657313, 0.19911464074941254, 0.19570533442002291, 0.17409945182605047, 0.7983538845208852, 0.17971533236619475, 0.741948490701568, 0.16598610698127636, 0.16499222548556702, 0.16230583898496898, 0.7361991992546517, 0.20080074053406138, 0.15399096126230238, 0.19828648268131188, 0.1977394197806509, 0.16357895174646442, 0.29427846086941845, 0.1977805342200638, 0.707938068257429, 0.15004114776752664, 0.20770036781084567, 0.20597079590083678, 0.21384710190150857, 0.18552079456292492, 0.1902547849386358, 0.21549928179635647, 0.2126947387617094, 0.19965464868111127, 0.22919001832768715, 0.19237128923373326, 0.21357722714994265, 0.08506632836386474, 0.07169491817253404, 0.08412501800191463, 0.08646127976068674, 0.06851448908820179, 0.0904899384562543, 0.10978301621600639, 0.0975386457772911, 0.09093381764364605]}, "mutation_prompt": null}
{"id": "75d0862d-e935-4cc9-b2f4-238218c153ec", "solution": "import numpy as np\n\nclass AHSA_DN_Improved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        hypercube_size = (self.upper_bound - self.lower_bound) / (2.5 * np.log1p(self.dim)) # Adjusted\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n        dynamic_mutation_rate = 0.1\n\n        last_direction = np.zeros(self.dim)\n\n        decay_factor = 0.995 # Enhanced decay factor for better exploration\n\n        while self.evaluations < self.budget:\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                direction *= (1 + np.random.rand() * dynamic_mutation_rate)\n                direction += 0.3 * last_direction\n                candidate_position = position + direction\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position\n                    hypercube_size *= shrink_factor\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.85 # Adjusted\n                    success_count += 1\n                last_direction = direction * decay_factor\n\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.03 # Adjusted\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n            success_count = 0\n\n        return self.best_position, self.best_value", "name": "AHSA_DN_Improved", "description": "Enhanced exploration by slightly increasing the decay factor for better search efficiency.", "configspace": "", "generation": 91, "fitness": 0.27016568441153416, "feedback": "The algorithm AHSA_DN_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.25.", "error": "", "parent_id": "83401f9a-a882-4bad-85eb-5963bfb10d12", "metadata": {"aucs": [0.7076220007086156, 0.7531165027076557, 0.7160063922885538, 0.7493366486433802, 0.7356219624927929, 0.7128293124120538, 0.7503415290735929, 0.7553483391937247, 0.6906634378874748, 0.14218998267586735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008005483163180394, 0.10211410641548335, 9.999999999998899e-05, 0.061000971987197006, 0.1044131415688544, 0.13571978734420076, 0.13014310804447582, 0.12284571419556456, 0.10346026314896883, 0.11189461396683231, 0.08540963732595697, 0.11348238558307744, 0.15804244224507924, 0.08415101880188014, 0.10337574549898798, 0.08785433699462264, 0.12283094210005108, 0.10340568583750265, 0.100307757608316, 0.11733750436206758, 0.08685082318963255, 0.10943817708584991, 0.9867663192228394, 0.9860116630276533, 0.9816758128828209, 0.9825303195557074, 0.9840997763907395, 0.9896403103608385, 0.9955570574640938, 0.9865383100535597, 0.996086724160769, 0.5888750314820579, 0.6979024669022821, 0.6089048045899557, 0.6558680336500962, 0.6648842601034399, 0.6501004157514045, 0.5644343438143842, 0.7358603017865972, 0.7128056621453869, 0.33642186553214504, 0.7078587015151989, 0.22317435264491903, 0.26054214781783447, 0.2089375703528752, 0.779206449586711, 0.2311042469441451, 0.3677366844541259, 0.2528087671915874, 0.15624268335880154, 0.22026689924009146, 0.11964942449733351, 0.17714491306133717, 0.11675442169155814, 0.1325031092806419, 0.19108334402934202, 0.17143393198617307, 0.12208145627779099, 0.17469865413092645, 0.16472790102767432, 0.17492931841539172, 0.2037699409016952, 0.09716594751901952, 0.18235912283398725, 0.16078346391177278, 0.19454946690883157, 0.20944048960929007, 0.0005097516404257707, 0.002900036977373399, 9.999999999998899e-05, 9.999999999998899e-05, 0.007482245239895047, 9.999999999998899e-05, 0.01813084357933714, 9.999999999998899e-05, 0.06234708349550311, 0.0317112360629197, 0.06704927948333261, 0.03981759180115152, 0.0472850414293251, 0.05189161723577995, 0.018517160747977268, 0.06983828316503737, 0.05039865822965217, 0.06563001345272679, 0.029912761232108842, 0.02560371601262601, 0.06286518627214865, 0.069787101282474, 0.06494064102017327, 0.07743657460974462, 0.08352164623104108, 0.10031315210944014, 0.05795577922671313, 0.14127593290306073, 0.13171831903693998, 0.06781288063596713, 0.1200359958475401, 0.16762722069731206, 0.10548273355127114, 0.13009630721795307, 0.19819581490599125, 0.21152117467739773, 0.5434275641100246, 0.4762976843391241, 0.4676522748879487, 0.47303457194877707, 0.4958128344273469, 0.4822342202345685, 0.45176836779952023, 0.44748233645137425, 0.44358595346285323, 0.10242384696707851, 0.10595708262524528, 0.10814010807148045, 0.10833725619111023, 0.1020515548897245, 0.1130019932203844, 0.12114999867300935, 0.0933234192900001, 0.12755769197801925, 0.15881519985195336, 0.18021330386412082, 0.2682686114736367, 0.1524943858395651, 0.3186753257718734, 0.23577809499382396, 0.2595737823738219, 0.3153419496697062, 0.25451402693464975, 0.2898171087295619, 0.18159537392423708, 0.15085573120594908, 0.20253245812270648, 0.34875279094787925, 0.39742620573931553, 0.34971213871296547, 0.26621291268352487, 0.3699511762585459, 0.21109835846755742, 0.2989677680531283, 0.3317760041565694, 0.17776897896571986, 0.18455767184634875, 0.2516080101936575, 0.24474493214470572, 0.23094183164207194, 0.15118532505459903, 0.25478340994301696, 0.2440880683298564, 0.20874789637180513, 0.23155431722040243, 0.23600292796389089, 0.19596876589453704, 0.19854957166794474, 0.21696523321062955, 0.22716376695791118, 0.19994409724793816, 0.19239338888417268, 0.1857682121319676, 0.6751083231383402, 0.19769379785942354, 0.18682423534738957, 0.19565764659518614, 0.2130253075399411, 0.18821997159097237, 0.15490212778239087, 0.13448009248459636, 0.80181196857832, 0.8099022603164518, 0.1882106760824137, 0.12263664171361799, 0.7889743235977981, 0.12454328135303772, 0.16392327238228976, 0.48121506231557765, 0.12579460233266326, 0.4949344264303137, 0.5150898106490016, 0.7272843254933994, 0.2065813423499011, 0.46457239825854124, 0.16919970615947588, 0.4480917862086633, 0.22362902686767627, 0.20323669437925185, 0.20501105620408366, 0.2289833047001073, 0.20830634619434596, 0.1801595942574502, 0.21157947875123295, 0.2101986537834668, 0.2028362445065155, 0.12282970711739849, 0.12030790970408611, 0.08770166281371872, 0.09754325184939772, 0.08073156332403719, 0.09829193439715289, 0.11631248434857355, 0.09062834826146804, 0.1060918240770603]}, "mutation_prompt": null}
{"id": "0bff31fa-2b9b-413e-ada7-dbee869af115", "solution": "import numpy as np\n\nclass AHSA_DN_Improved_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        hypercube_size = (self.upper_bound - self.lower_bound) / (2.5 * np.log1p(self.dim))\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n        dynamic_mutation_rate = 0.15  # Adjusted\n\n        last_direction = np.zeros(self.dim)\n\n        decay_factor = 0.98  # Adjusted\n\n        while self.evaluations < self.budget:\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.sin(self.evaluations / self.budget * np.pi))  # Adjusted\n                direction *= (1 + np.random.rand() * dynamic_mutation_rate)\n                direction += 0.4 * last_direction  # Adjusted\n                candidate_position = position + direction\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position\n                    hypercube_size *= shrink_factor\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.9  # Adjusted\n                    success_count += 1\n                last_direction = direction * decay_factor\n\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.05  # Adjusted\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n            success_count = 0\n\n        return self.best_position, self.best_value", "name": "AHSA_DN_Improved_Refined", "description": "Enhanced adaptive search with dynamic exploration-exploitation balance and adaptive mutation rate adjustments.", "configspace": "", "generation": 92, "fitness": 0.1381958537331131, "feedback": "The algorithm AHSA_DN_Improved_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.20.", "error": "", "parent_id": "83401f9a-a882-4bad-85eb-5963bfb10d12", "metadata": {"aucs": [0.2345169171357051, 0.11697013319869676, 0.17909350798135915, 0.22795232749460292, 0.16907552089263522, 0.31148958395206305, 0.22482587344216987, 0.170409159631426, 0.18710943487927412, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08005072304403293, 0.04308806781420427, 9.999999999998899e-05, 0.100772475603925, 0.09541528189148574, 0.03796210963067259, 0.07413980574573031, 0.024460217970284193, 0.053788762462015804, 0.07260933628336985, 0.06100802795853866, 9.999999999998899e-05, 9.999999999998899e-05, 0.03220735289367205, 0.04942806660075516, 0.06127644367188734, 0.020113752714274402, 9.999999999998899e-05, 0.9936742382609846, 0.9852550238661093, 0.9804512284705414, 0.9904633358714835, 0.9769029862698252, 0.9886816171624258, 0.9683317646264622, 0.9791546563113459, 0.9781188825648982, 0.08943379334495272, 0.12017591781357972, 0.09183383465240347, 0.10089773565243776, 0.08955817502208907, 0.028974002108385855, 0.14245735634116152, 0.07795615506747222, 0.12166690395649216, 0.204815892312191, 0.13357876213061004, 0.1443801013634911, 0.2844162690370189, 0.4278550961227302, 0.14504951364981333, 0.10239724610473988, 0.17084419788271077, 0.26685365278998374, 0.005008932080495465, 0.0014176152016649457, 0.0033307195134946177, 0.004082320711187304, 0.001071449638163413, 0.0033760625204030115, 0.099857638951805, 9.999999999998899e-05, 0.06739515062648549, 0.07679298065496731, 0.032751790264747394, 0.005382818149735069, 0.08962979013010441, 0.0008408748193342586, 0.001521350256089904, 0.09666931119068012, 0.005353738126003926, 0.013968669570416536, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01222284927724937, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009370552925076492, 0.004011431808871535, 0.000975005084672742, 0.050734967168545864, 0.0018165642909796498, 0.01734457688011204, 0.08794811455152263, 0.07907887933870139, 0.014478032752344383, 0.1432682692763021, 0.06295581472816503, 0.045491359230212636, 0.0010805442698674783, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005194307010184529, 9.999999999998899e-05, 0.0019024261213138605, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008928839981877656, 0.002521441611190278, 0.004576787454375175, 0.0001332442958998925, 9.999999999998899e-05, 0.0006268214303670749, 9.999999999998899e-05, 0.022222224478210095, 0.2270620610725511, 0.173996727309344, 0.1802008951892009, 0.22821655224993298, 0.3088288390845071, 0.14138151464015103, 0.22489459406013956, 0.2397724015057483, 0.14764601239133845, 0.08599863961759435, 0.09411681868137711, 0.017992670420925005, 0.07354770937885546, 0.02646083189418935, 0.10765354353138623, 0.05171199605209986, 9.999999999998899e-05, 0.014618201549212784, 0.13487396434095866, 0.15258709537116066, 0.16505780754366406, 0.10601142545447295, 0.10681781517148448, 0.2541105473520202, 0.17018221526621014, 0.23059863199237285, 0.12095214225944018, 0.21666666639409782, 0.11073798607417518, 0.1424441165486231, 0.25724880509439285, 0.16662008796785854, 0.1404621365480443, 0.21740497692073346, 0.09267079902121822, 0.24023114984078142, 0.18768208756683724, 0.23760790689414946, 0.06638646885663402, 0.16275757962583937, 0.026283288444045705, 0.08553722767199101, 0.1757951538726078, 0.021632966022887556, 0.19426878956130245, 0.20099080457009622, 0.08650975156976437, 0.16149130019418267, 0.2021826899452266, 0.06089020461891159, 0.1238400116831101, 0.21312651492938683, 0.07525179474774646, 0.15196701291940284, 0.1548131966564239, 0.0009815975162571489, 0.16755410757113298, 0.16859033420605052, 0.1607996703024972, 0.16078574329393236, 0.16318484010950085, 0.03476257526087134, 0.14302486943641657, 0.1691509662064522, 0.15802801770182484, 0.44691951965902177, 0.17061400790232983, 0.17792749700450206, 0.11827479389522666, 0.13831590610031852, 0.26682595116752206, 0.12109370224038007, 0.44140548655339384, 0.11307262392102713, 0.11134565886779624, 0.08081209381110932, 0.15689000498393524, 0.1571737907146713, 0.22722964391431244, 0.14960455528395855, 0.2489349228944795, 0.18809455377809892, 0.17891720427429214, 0.17106881433858867, 0.19300594328952225, 0.17793799206584338, 0.1783585991590957, 0.179249348713873, 0.19805195166338663, 0.18047203954999536, 0.08588153704587131, 0.020328336105714162, 0.06236309603256762, 0.07903508629301015, 0.020307879971293574, 0.0619037863479589, 0.08651890854243338, 0.03473928019279715, 0.06294288223284605]}, "mutation_prompt": null}
{"id": "74c2a494-e7ca-49dd-a2e8-8bd1088be8f2", "solution": "import numpy as np\n\nclass AHSA_DN_Improved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initialize positions\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        elite_position = position  # New: track elite position\n        value = func(position)\n        self.evaluations += 1\n\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        hypercube_size = (self.upper_bound - self.lower_bound) / (2.5 * np.log1p(self.dim))\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n        dynamic_mutation_rate = 0.1\n\n        last_direction = np.zeros(self.dim)\n\n        decay_factor = 0.99\n        learning_rate = 0.05  # New: Introduce a learning rate\n\n        while self.evaluations < self.budget:\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                direction *= (1 + np.random.rand() * dynamic_mutation_rate)\n                direction += 0.3 * last_direction\n                candidate_position = position + direction + learning_rate * (elite_position - position)  # Modified\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position\n                    hypercube_size *= shrink_factor\n                    dynamic_mutation_rate *= 0.85\n                    success_count += 1\n                last_direction = direction * decay_factor\n\n                if candidate_value < value:\n                    elite_position = candidate_position  # Update elite position\n\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.03\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n            success_count = 0\n\n        return self.best_position, self.best_value", "name": "AHSA_DN_Improved", "description": "Enhanced adaptive search integrating adaptive learning rate and elite-based guidance for improved performance.", "configspace": "", "generation": 93, "fitness": 0.2701118305887008, "feedback": "The algorithm AHSA_DN_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.25.", "error": "", "parent_id": "83401f9a-a882-4bad-85eb-5963bfb10d12", "metadata": {"aucs": [0.7455072692809339, 0.7194959305805513, 0.7702548544410561, 0.6909808025546504, 0.7406288928757261, 0.7504334743237913, 0.7967140410565331, 0.6972355242186153, 0.7341661712267887, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04157735841059096, 9.999999999998899e-05, 9.999999999998899e-05, 0.031057781883880642, 9.999999999998899e-05, 9.999999999998899e-05, 0.12841709855053673, 0.09807370514577474, 0.12595474902282278, 0.12204652551197559, 0.14140749140110043, 0.10716189052655023, 0.11183171393070002, 0.0871655146992869, 0.10169995747473548, 0.08739770722760964, 0.13458632518487834, 0.07542206088349734, 0.11706177690926034, 0.11395834504393787, 0.11947064131118201, 0.07313902037723641, 0.11980535449654539, 0.0981195471709625, 0.9871259183624882, 0.9837270604460869, 0.981776423025707, 0.9823478637107848, 0.9845210658622875, 0.9896072068626678, 0.9955116008049311, 0.9865264110364462, 0.9960784973984377, 0.6098131831707192, 0.6567022579012884, 0.44023167663009266, 0.37318243377540417, 0.7180222201647843, 0.6783348626383925, 0.629547415262202, 0.5824391473959978, 0.7266051733295695, 0.7143076207969487, 0.6953119354817582, 0.8411418510626109, 0.3381721908052404, 0.3421786621149485, 0.26065434251340125, 0.3345372067017083, 0.3517836558321471, 0.34574633694043655, 0.21817258302639897, 0.18909374910484367, 0.16304208729727165, 0.16794469157459135, 0.1676518628766911, 0.19823082631731825, 0.14172247682723538, 0.1788040630371086, 0.16810759500992623, 0.1482887049710382, 0.17597043675742208, 0.18639017981870998, 0.1763577393494561, 0.19144713494211407, 0.17916570452049396, 0.17064615408100947, 0.2211634318551079, 0.15339750340568514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0074762243289538954, 0.041949930111856326, 9.999999999998899e-05, 0.10103044789533522, 0.15242490902139816, 0.17879344949714526, 0.05836590305261857, 0.032018382237794185, 0.04219224274911648, 0.03775524059381863, 0.06402020564431365, 0.03502340756952127, 0.04227494637328766, 0.024490326065647827, 0.042787679805857626, 0.17406489947338288, 0.13896247027093656, 0.07870738969448887, 0.05704828122637118, 0.2614368864971036, 0.13544390167996334, 0.08276897683759521, 0.12551468801020782, 0.13703307483590088, 0.054969857385627985, 0.13322810599084767, 0.12968548341201624, 0.15009803088685914, 0.14905772445983567, 0.1467804139359996, 0.2549813065062996, 0.5485565970161911, 0.44965796878145325, 0.5162117666893897, 0.5174717597499519, 0.4887878811698718, 0.4587399053740956, 0.46452113996194033, 0.47845038726725264, 0.462501451448065, 0.128846012894983, 0.10106214838567829, 0.11418568565993303, 0.06629459168949547, 0.11677520749949288, 0.10963974715466318, 0.10876246903847953, 0.1131578191203707, 0.10845749267063676, 0.21820258297260198, 0.2783141392604003, 0.29818397427917065, 0.2556322137070167, 0.15191757428878117, 0.22493378594099533, 0.21922937372511975, 0.1825526364471759, 0.20040447402010453, 0.43592935910199704, 0.19052923456562343, 0.43273246837181256, 0.20418055648384692, 0.48592618037236146, 0.35852759937137757, 0.3941391904729902, 0.3765875638835644, 0.20292818319390815, 0.19196282778708695, 0.22414371653939524, 0.2626213838106727, 0.3089097059788578, 0.18775903404987793, 0.18222676130338156, 0.18632131942035113, 0.16960941254535244, 0.20599222700705067, 0.23803433064253232, 0.21281314839542498, 0.20632092859085904, 0.26359726755345025, 0.19331363962156933, 0.20633144791834934, 0.20713918619389837, 0.24374369024836018, 0.2691376878710515, 0.1956172602727856, 0.20653088844741985, 0.1919615869984055, 0.19822247292902284, 0.2071387828936928, 0.17649404001333902, 0.1779115450739004, 0.20913470748404506, 0.17417042129521365, 0.17199781451725282, 0.13496980920408042, 0.8255104216307587, 0.761198011203432, 0.1503918806357849, 0.12254783885696363, 0.8350165069011556, 0.1244156817151324, 0.15919501653265122, 0.0934272615821008, 0.11268754522550972, 0.07286210621305744, 0.16800629330426287, 0.6936442972808304, 0.2103270872326095, 0.8268042323889864, 0.1685323821362914, 0.3786254152862293, 0.1807949231008621, 0.22727048176094644, 0.2123202452995837, 0.2057726920870454, 0.21710799529019364, 0.20673568807361253, 0.20950851307000684, 0.20390404915685345, 0.20472724490960026, 0.09801283193657584, 0.08864787568190169, 0.08015096521018872, 0.09678464777086426, 0.09774696447232623, 0.11053411354276688, 0.08994658500537012, 0.09122875142363751, 0.07872323803209713]}, "mutation_prompt": null}
{"id": "94ace6d0-32f8-43e2-972f-12659285ce27", "solution": "import numpy as np\n\nclass AHSA_DN_Improved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        hypercube_size = (self.upper_bound - self.lower_bound) / (2.5 * np.log1p(self.dim))\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n        dynamic_mutation_rate = 0.1\n\n        last_direction = np.zeros(self.dim)\n\n        decay_factor = 0.98  # Adjusted\n\n        while self.evaluations < self.budget:\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                direction *= (1 + np.random.rand() * dynamic_mutation_rate)\n                direction += 0.5 * last_direction  # Adjusted\n                candidate_position = position + direction\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position\n                    hypercube_size *= shrink_factor\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.8  # Adjusted\n                    success_count += 1\n                last_direction = direction * decay_factor\n\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02  # Adjusted\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n            success_count = 0\n\n        return self.best_position, self.best_value", "name": "AHSA_DN_Improved", "description": "Adaptive mutation rate adjustment with momentum-based exploration improvements.", "configspace": "", "generation": 94, "fitness": 0.25761735523644225, "feedback": "The algorithm AHSA_DN_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.24.", "error": "", "parent_id": "83401f9a-a882-4bad-85eb-5963bfb10d12", "metadata": {"aucs": [0.7657575781421023, 0.7370334438837713, 0.6985352876853594, 0.6827028523401251, 0.7596392503196955, 0.7073120917299907, 0.7128552117721774, 0.7120336350101, 0.7860016761577281, 0.05981817709209658, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035996060117650774, 9.999999999998899e-05, 0.08174227200280215, 0.11533789954973306, 0.12911797909041556, 0.10731373975173608, 0.09911534525427745, 0.09258146509969034, 0.15095378688311234, 0.1162974505516009, 0.10416886265091796, 0.10423565911992394, 0.10684216347095588, 0.08610756215196469, 0.12370646815461439, 0.12247875018847154, 0.08734408263379012, 0.08542104537151185, 0.0882395325934533, 0.1572362826256425, 0.9935610160634042, 0.9864211661439753, 0.9771661072911273, 0.982355056369078, 0.983895939769632, 0.9840729091908123, 0.9953621896688293, 0.9827784283746986, 0.9961309963068461, 0.703951110747228, 0.51010965171655, 0.5991606648876147, 0.4979256237695222, 0.6533314849895802, 0.693220989729264, 0.42545314239616294, 0.7669572482295789, 0.6907906849050656, 0.5319507023039347, 0.22052637126542118, 0.2170443609072379, 0.20189247577348846, 0.2097789143896891, 0.25704948580251796, 0.45724445075396447, 0.22352559659901738, 0.23173501779459615, 0.1699525521775539, 0.18498871725765997, 0.27407575674908424, 0.18346155854384627, 0.16479996185902712, 0.14009591000470956, 0.1736382702589817, 0.15933893859090953, 0.1385982868725728, 0.14790000852507434, 0.10059824359933278, 0.12372517053731769, 0.11199450601322647, 0.17909397301117003, 0.21433812720554202, 0.16330931961692308, 0.14702253394339493, 0.18907283121276675, 0.05920530919565281, 0.0030800884998547495, 0.012316075910074997, 0.009783014318526906, 0.02078773633069919, 0.05305845245810192, 9.999999999998899e-05, 9.999999999998899e-05, 0.08755183530135113, 0.14831743220158755, 0.06448881117609184, 0.06524178729806085, 0.0766066653017422, 0.04858234950557494, 0.03085986121113604, 0.11412123769301086, 0.10044989361345802, 0.06134912183590546, 0.08783421251043166, 0.07198827010826592, 0.0933640759770129, 0.08111795842972647, 0.08097022464163295, 0.053268560481272154, 0.06566307629638612, 0.06338607253936535, 0.08141023414335324, 0.09892352372195945, 0.1326062310069963, 0.07287733304446842, 0.17694405589108086, 0.19929608236253327, 0.13480868654770983, 0.12803714133662358, 0.1527082160506419, 0.07887436764278699, 0.47692318844075166, 0.4738663894754861, 0.48062244733623005, 0.4746044716457155, 0.503660873811704, 0.49794535664220263, 0.4406847623760891, 0.46425454670537014, 0.45358408990924803, 0.13460064498468727, 0.09655458029792696, 0.1279380542726576, 0.07434049158588718, 0.10109762152099089, 0.12537928100350637, 0.11221243911683709, 0.10214496306877863, 0.1334708736382667, 0.4076720062554676, 0.3173174209897527, 0.27248657773476004, 0.29727141298013304, 0.25281264422348726, 0.2722316809468497, 0.24062876293053015, 0.18354983657622992, 0.2908638073512355, 0.29978532326208274, 0.31745444286877067, 0.2881486346886144, 0.270043156742245, 0.4184231809014499, 0.30856368349423224, 0.27408590829059754, 0.398933697877477, 0.34658185652701556, 0.12928089802004994, 0.18634807801630426, 0.2350701381200705, 0.19895443662883594, 0.25337473648946796, 0.16504684536687875, 0.19272469640222023, 0.28160076900118325, 0.15862089380138167, 0.22207953492558918, 0.24221346149090228, 0.1745529122402557, 0.2460810699942192, 0.25007536767215244, 0.2148148309222926, 0.23182618096521967, 0.22504426096649732, 0.24152529815096202, 0.20901118760538806, 0.1937947432803958, 0.17294382665207564, 0.20941571767009692, 0.18548655980704876, 0.21192756331813178, 0.1896085167362318, 0.2055855279518306, 0.16956011515992975, 0.1570363452398198, 0.13339285126658218, 0.802029534853915, 0.7692703003851866, 0.14979013631355464, 0.12257665722568167, 0.11975897286570669, 0.12434286549184703, 0.14877405830385892, 0.15346424893095267, 0.11228709252097402, 0.48341543197305115, 0.16753645834696473, 0.6703299126125216, 0.20448330220683664, 0.7487577786968358, 0.16557308328588427, 0.09370251032832455, 0.19065892267713347, 0.18683340705075246, 0.2022124624582461, 0.1900803660029745, 0.2153380311489922, 0.2047527664620491, 0.21211167451541435, 0.19601293442090095, 0.23113767361667037, 0.08427666300711534, 0.0819531690827775, 0.09906785836079068, 0.08530674964197149, 0.084449603737062, 0.09262062214182953, 0.08862877200744501, 0.095633871339603, 0.08434430662600534]}, "mutation_prompt": null}
{"id": "59ddeae9-73d4-4dcd-9d7a-e4643376a032", "solution": "import numpy as np\n\nclass AHSA_DN_Improved_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        hypercube_size = (self.upper_bound - self.lower_bound) / (2.0 * np.log1p(self.dim)) # Adjusted\n        shrink_factor = 0.8 # Adjusted\n        success_rate_threshold = 0.35 # Adjusted\n        success_count = 0\n        dynamic_mutation_rate = 0.12 # Adjusted\n\n        last_direction = np.zeros(self.dim)\n\n        decay_factor = 0.995 # Adjusted\n\n        while self.evaluations < self.budget:\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                direction *= (1 + np.random.rand() * dynamic_mutation_rate)\n                direction += 0.25 * last_direction # Adjusted\n                candidate_position = position + direction\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position\n                    hypercube_size *= shrink_factor\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.8 # Adjusted\n                    success_count += 1\n                last_direction = direction * decay_factor\n\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.02 # Adjusted\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n            success_count = 0\n\n        return self.best_position, self.best_value", "name": "AHSA_DN_Improved_Refined", "description": "A hybrid adaptive search with improved exploration-exploitation balance using dynamic mutation adjustment.", "configspace": "", "generation": 95, "fitness": 0.25974837984402144, "feedback": "The algorithm AHSA_DN_Improved_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.25.", "error": "", "parent_id": "83401f9a-a882-4bad-85eb-5963bfb10d12", "metadata": {"aucs": [0.737061275347448, 0.7066458326779821, 0.701955168187238, 0.801677932063739, 0.6947127126477994, 0.8075820291978444, 0.7226375630535216, 0.7289534565258056, 0.7246178398656659, 0.04746381698807711, 9.999999999998899e-05, 0.01975614055843966, 0.03319839590728202, 9.999999999998899e-05, 9.999999999998899e-05, 0.002082720116542758, 9.999999999998899e-05, 9.999999999998899e-05, 0.13103858494177745, 0.11133404282305948, 0.07673730543235613, 0.12581128162354493, 0.13795054719814015, 0.09803517152366803, 0.09533092787375752, 0.10170940772881076, 0.08490150366539817, 0.07115642208013229, 0.11755579397988292, 0.0854259578361456, 0.09511091433793606, 0.09187539432966774, 0.11629081885980486, 0.09264157413806207, 0.08908611465876715, 0.08520466032871932, 0.979075294803675, 0.9923742969040523, 0.9787693603939808, 0.9699072123034911, 0.9840123090453822, 0.9921801253789887, 0.9949187925903099, 0.9868377144927483, 0.9975493743444893, 0.6249981580146571, 0.696187262278807, 0.528357567557209, 0.6634274404607938, 0.4571685114296816, 0.6088522202806925, 0.5762031791666351, 0.5874583001814426, 0.48842711944256756, 0.6903599773140322, 0.7000855217269455, 0.7198644196438981, 0.1836706619604539, 0.7026611294182799, 0.20847559735815935, 0.22143279617073974, 0.22752016590029156, 0.22810275951133685, 0.12432735743802381, 0.18153962470945695, 0.10872368409280464, 0.16416674307205015, 0.1777860811991675, 0.11446795001642895, 0.1728105061126034, 0.19002971814598613, 0.18092444926286466, 0.18160587962960628, 0.1620012999668775, 0.1225614818324895, 0.14138916601921814, 0.18613614250288402, 0.11503149560340731, 0.15645262908168567, 0.16170864740225266, 0.12176845826089666, 0.04933548380478259, 0.04807473809446838, 0.010664552847536313, 9.999999999998899e-05, 0.01641818296271036, 0.016818220835181474, 0.002323599047831193, 0.007041276120605788, 0.004546547562524705, 0.042453589848017725, 0.06883668247973762, 0.11380512602695503, 0.07495047997576276, 0.0915664926030757, 0.003556335192286819, 0.056294525006003404, 0.06571037418170944, 0.06275375921631243, 0.029220194971169122, 0.1245005446842038, 0.1885116959927503, 0.10874849776869688, 0.07764361957514243, 0.09105178638236588, 0.08090293357136902, 0.06914152208834856, 0.17108029783028067, 0.07373208431419065, 0.18965779208028521, 0.17558327603929424, 0.13906563009139794, 0.18089657374491952, 0.20524114551844574, 0.12288573952916138, 0.1095231546162202, 0.17281986177403508, 0.4198137623324536, 0.4670541954731995, 0.481548211105733, 0.44028324969016364, 0.47103404888324785, 0.43214240701373696, 0.44135182488957503, 0.4428202394931554, 0.4838095563489754, 0.13660839108491873, 0.10395490841555022, 0.12345191354218255, 0.1002646495431434, 0.09886929007522727, 0.09817166692999713, 0.11970926895725587, 0.10081809557131949, 0.10426807992183218, 0.24575390952254483, 0.22118878574915435, 0.1692387022001709, 0.16045760385775698, 0.31408059745944794, 0.1871801068238096, 0.18394452204471323, 0.17948116386046864, 0.21591517692812878, 0.3918211008781576, 0.3184793308762651, 0.27441625939165093, 0.16224861708749172, 0.274954082436465, 0.25351528011123514, 0.3267992811369459, 0.43271976184615546, 0.24502231234214877, 0.1992731368265217, 0.21174424122882962, 0.2111319285386719, 0.274036816068543, 0.21767560243110284, 0.19214193861360296, 0.20796241483148437, 0.2114574162199795, 0.2082723903628787, 0.20222451979082556, 0.1981946622511611, 0.23243706387289298, 0.18322193383325724, 0.22359721069214689, 0.1971215424108288, 0.1821162445441884, 0.26846569094117523, 0.1915224774335147, 0.17394132913127236, 0.7224466668085219, 0.19366111394805685, 0.19539168431161724, 0.1836703670732518, 0.1745123627457067, 0.18690165808571002, 0.18309585787675886, 0.1961370039960646, 0.17210856642420003, 0.7520857414757988, 0.8106087317072169, 0.16984771069630278, 0.16712639451248468, 0.12215983102133143, 0.15214484261418315, 0.14141518954226961, 0.14921349209505952, 0.4900853992866613, 0.1355076502406899, 0.20509582342263488, 0.11121574358001274, 0.20225046870249264, 0.4979309321373344, 0.11222657615058562, 0.6523131799037799, 0.29232989774095186, 0.2442773374242494, 0.18550681727360607, 0.20127822665768746, 0.2181563961220967, 0.24383259742149266, 0.2041485829287205, 0.23305594909799476, 0.19451341701480684, 0.21022841029180117, 0.09264973924529618, 0.11816522432988497, 0.089712621174599, 0.12028384183830054, 0.09631386459772961, 0.07869357153122947, 0.08183671339573595, 0.08068798425109747, 0.09729074646812474]}, "mutation_prompt": null}
{"id": "768d283d-83b8-4428-bfd1-aecd939c55e3", "solution": "import numpy as np\n\nclass AHSA_DN_Improved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        hypercube_size = (self.upper_bound - self.lower_bound) / (2.5 * np.log1p(self.dim))\n        shrink_factor = 0.88  # Adjusted\n        success_rate_threshold = 0.25  # Adjusted\n        success_count = 0\n        dynamic_mutation_rate = 0.1\n\n        last_direction = np.zeros(self.dim)\n\n        decay_factor = 0.98  # Adjusted\n        learning_rate = 0.1  # New\n\n        while self.evaluations < self.budget:\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                direction *= (1 + np.random.rand() * dynamic_mutation_rate)\n                direction += learning_rate * last_direction  # Adjusted\n                candidate_position = position + direction\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position\n                    hypercube_size *= shrink_factor\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.82  # Adjusted\n                    success_count += 1\n                last_direction = direction * decay_factor\n\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.05  # Adjusted\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n            success_count = 0\n\n        return self.best_position, self.best_value", "name": "AHSA_DN_Improved", "description": "Improved adaptive search with dynamic learning rate and elitism integration for enhanced convergence.", "configspace": "", "generation": 96, "fitness": 0.2729210518193618, "feedback": "The algorithm AHSA_DN_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.26.", "error": "", "parent_id": "83401f9a-a882-4bad-85eb-5963bfb10d12", "metadata": {"aucs": [0.7588859920440182, 0.7324579126034076, 0.7247151612611629, 0.8084658059437877, 0.7622673715637879, 0.7485411420033292, 0.8215217307807082, 0.759104700448004, 0.7643827477566779, 0.018183905857085292, 0.01809992086322909, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05312102285747644, 0.05577060246366494, 9.999999999998899e-05, 0.11128760447006403, 0.09617616261915751, 0.08162964988706645, 0.07681656113451485, 0.09025999353815917, 0.11797653810626108, 0.08971499923825266, 0.12948213301922207, 0.11905434052639174, 0.12393527933190873, 0.12158483695459255, 0.12648965971347792, 0.08949295190399276, 0.10187074389848927, 0.07325318761616106, 0.08401842803532122, 0.1029064557400754, 0.08434038013711742, 0.9941595464200346, 0.9919437573966484, 0.978141045528945, 0.9824961848449313, 0.9842566937200873, 0.9894405602588614, 0.9954439431120824, 0.9921627743851679, 0.9975405710856249, 0.6934378478336769, 0.5476163091401306, 0.5666440804733158, 0.6000662472747954, 0.7448763954791546, 0.6682071822141694, 0.5412278255696872, 0.6255126708099112, 0.514492478075698, 0.41362498297328765, 0.7872649164090476, 0.1694409091221365, 0.26203249504627857, 0.8617982808453849, 0.35140339718573144, 0.7894188397460099, 0.37437144628465446, 0.23794240101149688, 0.16289208769552155, 0.18665584518677603, 0.1757312207878935, 0.17935713502798334, 0.20496769122090563, 0.18896254947846125, 0.15366786837063906, 0.17981885813284115, 0.11786103735438558, 0.22207791954955214, 0.18715415689927273, 0.12145234698903529, 0.1767004778030148, 0.18278838270712972, 0.12105658722033363, 0.1502196477301384, 0.2881457574355115, 0.2610055868543678, 0.06124882303650414, 9.999999999998899e-05, 9.999999999998899e-05, 0.008051668165015347, 0.0013698461556512775, 0.004068580383110532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04283829818600027, 0.12103023298746152, 0.11187013449043937, 0.12042973978990645, 0.06278155843131172, 0.036782905088196594, 0.060620517056227285, 0.039420544266863145, 0.1855713671377639, 0.050802166960647654, 0.04798240115056218, 0.061437992301217714, 0.08542464273074324, 0.20366341508935126, 0.11440883019787818, 0.07500031682836816, 0.08510220025153992, 0.08350488856852534, 0.0666013517767855, 0.20379108088027587, 0.21273045311774008, 0.16675222956275193, 0.1453365216745417, 0.1010934420899714, 0.12130822805576458, 0.2020649313819377, 0.10413819076979158, 0.4709283350605701, 0.48254551097662823, 0.5786944054311035, 0.543696917215287, 0.5112857843577254, 0.5123191002980514, 0.5334333326541296, 0.4774152214195274, 0.46455961466595963, 0.12954313280037622, 0.12132480549045321, 0.15223949998421982, 0.07528583860517213, 0.1257158925063806, 0.11397041945857977, 0.10757491278182862, 0.12873267590278925, 0.104027367532179, 0.3596690543555261, 0.18053369269117703, 0.20796113112375247, 0.2758556776271759, 0.20125382321878482, 0.2109685777822471, 0.2506177936904441, 0.28520019021822485, 0.1628553178977794, 0.2784356706672576, 0.18908625694655967, 0.19813401924554241, 0.3236588816738718, 0.30132639083945656, 0.42954566401350935, 0.3239166523706517, 0.2180123013227938, 0.21779557875352962, 0.18816604099886913, 0.19997853190642612, 0.10521837147324276, 0.11424226749006194, 0.25518734581313784, 0.21490627424566267, 0.26738625639893554, 0.24232164354441932, 0.249178518502983, 0.23614478515097093, 0.2288787018802293, 0.20205742731953635, 0.19746826858582722, 0.22624253954473283, 0.22474472886233965, 0.21448980143736684, 0.22023083512726815, 0.2021550152612227, 0.19551816409443, 0.1894418431211251, 0.1856158294694099, 0.17541135934371455, 0.17929900040880586, 0.1851106551929954, 0.175341761351968, 0.20702920175561423, 0.1805846973111902, 0.1568942803348251, 0.1354515432643626, 0.8568359503621231, 0.7588694097581139, 0.19854390925291554, 0.12315633553227323, 0.8735619033934013, 0.12487880691334063, 0.14965767561801435, 0.6366924630659097, 0.11264855372572857, 0.7614760804138848, 0.65171578286689, 0.10479979173514453, 0.10483012168535077, 0.45244806670048276, 0.16978930410329962, 0.32975921723794255, 0.21695268368391563, 0.21089261913823432, 0.23447222214574692, 0.1998764528905962, 0.19903519141662218, 0.2020562303128094, 0.20400840066942993, 0.21480744713095523, 0.20731182217494648, 0.0941612138777751, 0.10089339700205258, 0.07357120111762838, 0.08833575689150441, 0.08638543324040515, 0.1223312598027001, 0.15850961772737904, 0.09574766257606548, 0.07960571847752906]}, "mutation_prompt": null}
{"id": "cc382cfb-a85b-439c-9b49-5d35b7f0ba1f", "solution": "import numpy as np\n\nclass AHSA_DN_Improved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        hypercube_size = (self.upper_bound - self.lower_bound) / (2.5 * np.log1p(self.dim))\n        shrink_factor = 0.9\n        success_rate_threshold = 0.3\n        success_count = 0\n        dynamic_mutation_rate = 0.15  # Adjusted\n\n        last_direction = np.zeros(self.dim)\n\n        decay_factor = 0.98  # Adjusted\n\n        adaptive_learning_rate = 0.02  # New parameter\n\n        while self.evaluations < self.budget:\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                direction *= (1 + np.random.rand() * dynamic_mutation_rate)\n                direction += 0.3 * last_direction\n                candidate_position = position + direction\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position\n                    hypercube_size *= shrink_factor\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.8  # Adjusted\n                    success_count += 1\n                last_direction = direction * decay_factor\n\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.03\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n\n            position += adaptive_learning_rate * (self.best_position - position)  # New strategy\n\n            success_count = 0\n\n        return self.best_position, self.best_value", "name": "AHSA_DN_Improved", "description": "Enhanced mutation strategy and adaptive learning rate for improved exploration-exploitation balance.", "configspace": "", "generation": 97, "fitness": 0.2659458225102239, "feedback": "The algorithm AHSA_DN_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.25.", "error": "", "parent_id": "83401f9a-a882-4bad-85eb-5963bfb10d12", "metadata": {"aucs": [0.8235635037744297, 0.8451498802129497, 0.7414033699697715, 0.7167184144808979, 0.7025052776973151, 0.761347721725718, 0.7323629494493259, 0.7693460539601269, 0.707430354950703, 0.04022741598742119, 9.999999999998899e-05, 9.999999999998899e-05, 0.04038205581483578, 9.999999999998899e-05, 9.999999999998899e-05, 0.07844271918542656, 9.999999999998899e-05, 9.999999999998899e-05, 0.1304722871485232, 0.10763784848701197, 0.10786875315994693, 0.09953008488231574, 0.16100430140794564, 0.10379126686883233, 0.1294777557812915, 0.12065634834303729, 0.10546691092507021, 0.08654064794762872, 0.10036523850081469, 0.09702355870341839, 0.1153595071701109, 0.10844269264932449, 0.12440542302633817, 0.09712865096714052, 0.07541095304873446, 0.10193681727168735, 0.9867852657151521, 0.9920033675891706, 0.9816659886289284, 0.98253054477491, 0.9841258398011009, 0.989621253260022, 0.9955600334456818, 0.9865420267895378, 0.9960822682733643, 0.6716150350570382, 0.5704754525624751, 0.3810617101611298, 0.6256670836855287, 0.7847268165527013, 0.7420566839236553, 0.6450616532037484, 0.4947062773601615, 0.5606964413956925, 0.2224133380865554, 0.2169568354845134, 0.37366825101824575, 0.2597901089799437, 0.7315559591579803, 0.7456224413789294, 0.22310526893765237, 0.692094904487694, 0.23617521529810082, 0.12272047374058526, 0.16457490622216298, 0.1886338873408573, 0.16734479498482446, 0.12313938836038074, 0.1769444893321077, 0.14357350340230257, 0.2102103945367232, 0.12179286038000814, 0.15486060350574937, 0.17857771923530075, 0.20311299305376807, 0.15566373047009474, 0.09540781975152646, 0.1495356908733616, 0.17307964391368258, 0.10954676018615572, 0.22969874786835376, 0.04185712042844347, 0.026694689160579266, 9.999999999998899e-05, 0.05997667881311952, 0.008374512960574454, 0.001888621285573544, 0.0381624104522974, 0.026261672646521905, 0.027931830070911712, 0.05077477791188445, 0.0894443452569521, 0.10752808835860928, 0.026101539240038774, 0.07672070828136113, 0.017154305967653993, 0.1686056359242113, 0.0974219002019554, 0.06287600674551319, 0.028893439614264382, 0.0377993573090436, 0.09013019113233567, 0.07818802945223213, 0.10218331443657025, 0.0790872878782346, 0.14787177929467687, 0.11892221365987932, 0.047525491769885075, 0.11483695025827834, 0.07749875862367883, 0.06510465299934809, 0.10813393292207507, 0.12717317583858656, 0.18764914297993351, 0.0681717423544369, 0.16407117582130482, 0.10340063402229882, 0.49172057401152625, 0.4186683348599112, 0.44953768582297604, 0.4510989148509774, 0.4470928966362433, 0.44794449002727865, 0.424445765706025, 0.4441339504405907, 0.5158208966268131, 0.09900451469109317, 0.08418891668364437, 0.08596035073379749, 0.08114357107801129, 0.10297795220860151, 0.11896803089824948, 0.13421172753826505, 0.13726987736251883, 0.1333810583099766, 0.17587732131704814, 0.19586876938472875, 0.3503874274192542, 0.34691994560725914, 0.23136456779908698, 0.3014622257434266, 0.2794001408853054, 0.4014824397535697, 0.255638983878378, 0.34645693328261495, 0.18092426654040772, 0.21404793902341734, 0.38022630274915614, 0.3913563791569299, 0.34652046517834656, 0.3665379317997014, 0.3331156427574862, 0.14908604908018952, 0.2214896944651228, 0.29868976802583946, 0.2768115778538691, 0.2521724707248786, 0.28004292381370177, 0.2611115334927635, 0.19040658902014485, 0.2236016801144164, 0.26542096720770847, 0.19796280421857537, 0.21711743344089185, 0.2165292036239581, 0.1779551082470332, 0.2755584727603406, 0.20302045936247137, 0.18239399014202617, 0.20265897086132878, 0.22649267740076207, 0.2004324489959991, 0.23125556104851042, 0.19461871236024852, 0.20010940027904722, 0.18304734304226777, 0.23114509885457002, 0.17406261438930393, 0.18716775891194726, 0.17645498524288106, 0.15700230843395513, 0.1344070131736005, 0.8338721883680756, 0.7893488822606686, 0.19746045644578702, 0.12259590381024232, 0.782934669686411, 0.12469715421140914, 0.1639350578752743, 0.473328358932798, 0.11250059813969315, 0.07299462808384027, 0.08265262849197375, 0.5915111389599462, 0.20662444932599855, 0.41379230969209724, 0.1684221287930726, 0.35710991710434237, 0.21394189000776564, 0.1849966058093696, 0.21357714144084095, 0.22168060060806616, 0.20895771112187744, 0.19966553733773507, 0.22882813939754754, 0.208482096840917, 0.22322839968196495, 0.09169194921835988, 0.09862123800111422, 0.09321343837976581, 0.10170148851617034, 0.12567756784532735, 0.13507809560097428, 0.12541419596495218, 0.08432763082139594, 0.09075130634270046]}, "mutation_prompt": null}
{"id": "4f264572-bf34-4847-8e67-ab4893737317", "solution": "import numpy as np\n\nclass AHSA_DN_Improved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        hypercube_size = (self.upper_bound - self.lower_bound) / (2.0 * np.log1p(self.dim)) # Adjusted\n        shrink_factor = 0.92 # Adjusted\n        success_rate_threshold = 0.25 # Adjusted\n        success_count = 0\n        dynamic_mutation_rate = 0.12 # Adjusted\n\n        last_direction = np.zeros(self.dim)\n\n        decay_factor = 0.98 # Adjusted\n\n        while self.evaluations < self.budget:\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                direction *= (1 + np.random.rand() * dynamic_mutation_rate)\n                direction += 0.3 * last_direction\n                candidate_position = position + direction\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position\n                    hypercube_size *= shrink_factor\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.82 # Adjusted\n                    success_count += 1\n                last_direction = direction * decay_factor\n\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.05 # Adjusted\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n            success_count = 0\n\n        return self.best_position, self.best_value", "name": "AHSA_DN_Improved", "description": "Enhanced adaptive search with dynamic hypercube size adaptation and improved mutation control for robust exploration.", "configspace": "", "generation": 98, "fitness": 0.2592744069917255, "feedback": "The algorithm AHSA_DN_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.24.", "error": "", "parent_id": "83401f9a-a882-4bad-85eb-5963bfb10d12", "metadata": {"aucs": [0.7391023855491359, 0.8121023758271058, 0.7945448891166492, 0.6689127728453239, 0.7363358461513341, 0.7797344312454354, 0.7218375861067359, 0.7309999398030103, 0.8010413257584447, 0.00786153319061833, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014170725912376891, 9.999999999998899e-05, 0.07763419355424017, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13388999548366742, 0.12077391900314505, 0.1273798770122454, 0.10220038363770056, 0.10113237765390715, 0.14595483899400674, 0.11718691637661227, 0.11659665536438701, 0.11353249032140533, 0.0954969555955617, 0.07439136362275045, 0.09553266929207016, 0.09816239302278718, 0.08224954941300333, 0.10141898168737862, 0.08374519483844067, 0.07873391354044978, 0.10127719057648488, 0.9868064347671656, 0.992186747163717, 0.9817451128346043, 0.982894294774734, 0.9840864178289135, 0.9949170455277964, 0.9957107964744407, 0.9876411372569892, 0.9975508315581906, 0.667582247799789, 0.4104790644663322, 0.5608778361172726, 0.49891993934042134, 0.5447177207986615, 0.7140258021143908, 0.44521825783326163, 0.5145704550868813, 0.4016121861047568, 0.2243176853773301, 0.3533847161278957, 0.2222156308185257, 0.33102773169230537, 0.26333964857238756, 0.733997095071802, 0.47608140207184857, 0.22588527610219478, 0.2352409056066318, 0.11200680471797164, 0.16945862050742633, 0.1686178815328765, 0.09965151882772694, 0.1419330304385359, 0.18652483092006744, 0.13822428582856572, 0.20262143052002946, 0.16068199429928487, 0.17929610791235828, 0.18045661504809118, 0.19331878477109488, 0.11825233338374563, 0.15445635994233287, 0.14874907278855876, 0.10880414090512636, 0.1779273745853427, 0.10215208006418364, 0.0001340853398654751, 0.008631798904652932, 9.999999999998899e-05, 0.0503795703286134, 9.999999999998899e-05, 0.06719669870270228, 0.03506551977180805, 9.999999999998899e-05, 0.025737318113465912, 0.11873646957158868, 0.053835466218133066, 0.0919038836379521, 0.02175059663818013, 0.040468425030756205, 0.02918046569192101, 0.0504260856072396, 0.04208936661481799, 0.07038184673104808, 0.05507611510090171, 0.025577023576809577, 0.042105886656165215, 0.0635306261955969, 0.24794192716429875, 0.1880662203848058, 0.08005029386629559, 0.13595738864349027, 0.10835905213225028, 0.10357579688705498, 0.06283579940616713, 0.1207613268414609, 0.13561889355816725, 0.18330228286084926, 0.16459238930570574, 0.2815839159596957, 0.24508746450984287, 0.1711478809441258, 0.5126025898779032, 0.45248521458109403, 0.4191366698174368, 0.4808851879944437, 0.4653461830371497, 0.47520186897457806, 0.47871301944260647, 0.5067479598971725, 0.46965639866533593, 0.08941196109361405, 0.12690325084775922, 0.13520173777184408, 0.13610948120873312, 0.10206510900595367, 0.1047196830023649, 0.15454538435912568, 0.11960971177421653, 0.11921211836158818, 0.15502012758417405, 0.2252366371480592, 0.1882430826045839, 0.2359931471855512, 0.313232609283253, 0.21855817213971207, 0.22539723406796952, 0.18070561698466314, 0.14989507668346747, 0.39940286252312185, 0.2923613204947423, 0.2701099810735701, 0.3277441190820988, 0.3706807901022615, 0.41937173823065277, 0.3174470928142651, 0.26300881236865836, 0.30806955070454833, 0.25185834254133765, 0.23997834349811042, 0.25562802250886885, 0.22634218390544059, 0.22619498401366311, 0.19137537807377114, 0.17915746852948378, 0.18689483582948252, 0.2452860396656934, 0.20118068408787904, 0.23423803390293974, 0.23092589884841452, 0.22732415098794378, 0.2297056569932434, 0.18370820119173592, 0.19578585855885822, 0.2274092230561685, 0.2750509145015282, 0.6190312352604842, 0.20912671514968928, 0.19346522546880696, 0.19049604507489126, 0.1797524403695281, 0.19091201958012494, 0.18368401237979348, 0.2153996272241807, 0.20609899529701736, 0.15615802858950012, 0.13373798473833975, 0.165201522794166, 0.807717850074767, 0.16861415100845756, 0.12258783622768843, 0.7832605347191806, 0.12412380285802116, 0.14948537761326608, 0.56965890055852, 0.11215859812705753, 0.20766413782245374, 0.08244054497871844, 0.20906424203221963, 0.20785520691554682, 0.4631912692654854, 0.586878539047464, 0.4246173700750767, 0.20219238280623053, 0.22038259623393253, 0.2091411602754274, 0.20294569011003938, 0.19076562278551923, 0.1979412176590205, 0.21446068744403957, 0.2142692266241134, 0.2309596452437631, 0.08811072951895094, 0.09747192878617372, 0.09746431101411657, 0.08825182614883997, 0.09684857706184935, 0.12411874832124192, 0.1133588256429684, 0.09862670064116863, 0.08444588013988541]}, "mutation_prompt": null}
{"id": "9bd4b568-ac13-4cfe-925d-662b9ce199a8", "solution": "import numpy as np\n\nclass AHSA_DN_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.best_position = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        value = func(position)\n        self.evaluations += 1\n\n        if value < self.best_value:\n            self.best_value = value\n            self.best_position = position\n\n        hypercube_size = (self.upper_bound - self.lower_bound) / (2.2 * np.log1p(self.dim)) # Adjusted\n        shrink_factor = 0.88 # Adjusted\n        success_rate_threshold = 0.3\n        success_count = 0\n        dynamic_mutation_rate = 0.12 # Adjusted\n\n        last_direction = np.zeros(self.dim)\n\n        decay_factor = 0.98 # Adjusted\n\n        while self.evaluations < self.budget:\n            for _ in range(max(1, int(self.dim / 2))):\n                if self.evaluations >= self.budget:\n                    break\n                direction = np.random.uniform(-hypercube_size, hypercube_size, self.dim)\n                direction *= np.abs(np.cos(self.evaluations / self.budget * np.pi))\n                direction *= (1 + np.random.rand() * dynamic_mutation_rate)\n                direction += 0.35 * last_direction # Adjusted\n                candidate_position = position + direction\n                candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                candidate_value = func(candidate_position)\n                self.evaluations += 1\n\n                if candidate_value < self.best_value:\n                    self.best_value = candidate_value\n                    self.best_position = candidate_position\n                    position = candidate_position\n                    hypercube_size *= shrink_factor\n                    if candidate_value < value:\n                        dynamic_mutation_rate *= 0.83 # Adjusted\n                    success_count += 1\n                last_direction = direction * decay_factor\n\n            if success_count / max(1, int(self.dim / 2)) > success_rate_threshold:\n                shrink_factor *= 1.04 # Adjusted\n                hypercube_size /= shrink_factor * (1 + np.tanh(self.evaluations / (self.budget * 1.2)))\n            success_count = 0\n\n        return self.best_position, self.best_value", "name": "AHSA_DN_Refined", "description": "Enhanced mutation control and adaptive step size adjustment for improved exploration and exploitation balance.", "configspace": "", "generation": 99, "fitness": 0.25821714928670886, "feedback": "The algorithm AHSA_DN_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.24.", "error": "", "parent_id": "83401f9a-a882-4bad-85eb-5963bfb10d12", "metadata": {"aucs": [0.7010408862582442, 0.7923088073769695, 0.7564934675159127, 0.7256095158295163, 0.7687617362987723, 0.7770696897669132, 0.7719532314326353, 0.7751426871150493, 0.7157742169927654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006514490805208717, 9.999999999998899e-05, 0.02664421148457352, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11031827211015555, 0.1444393492269297, 0.11048525458111347, 0.13354405253513602, 0.12490353675572374, 0.10306712405572449, 0.10622193734877439, 0.13835934949387296, 0.11748123207678873, 0.1524258922270263, 0.08690413787138984, 0.1361004829581891, 0.09834833435183354, 0.09963763660513247, 0.12121569459150672, 0.0947916843978488, 0.0918028289847056, 0.0680831501014143, 0.9873183203448149, 0.9852331822753629, 0.97774426705854, 0.9823704941088185, 0.9842389706768462, 0.9919885281992977, 0.9956790928543042, 0.9874383217384295, 0.9961601952586786, 0.6227849377168708, 0.5175260569297085, 0.5110486803219243, 0.644224218416346, 0.698620538539374, 0.5540709726428239, 0.5913069094863084, 0.7181863531219133, 0.5021185557731522, 0.3486148637821789, 0.22491923296337013, 0.32922718819009267, 0.20134769107528272, 0.731718006795602, 0.32211389094049314, 0.5649802056264155, 0.2273415965150739, 0.35426504453128904, 0.15957833860911652, 0.1940864722218093, 0.18895405781544106, 0.16917498109049645, 0.30296866325633187, 0.1579596493383879, 0.14428907671429025, 0.12774853098346461, 0.16004348432130078, 0.1528759903250566, 0.10788277386546563, 0.19080795196540679, 0.10033787210724643, 0.16620597186536978, 0.11141550781410514, 0.22889077410141512, 0.22695352276983316, 0.18645943306285284, 9.999999999998899e-05, 0.033611880878837264, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022277497451010486, 0.044079957435757544, 0.06578000767758663, 0.041927440752427714, 0.07252554370235154, 0.06296818497776968, 0.18822330718017288, 0.06948464603620541, 0.03909412510665533, 0.02784733515092963, 0.05978682388431111, 0.06377484417056511, 0.057149788751165165, 0.026200145000111474, 0.05494662926203053, 0.03878933072730051, 0.0667538166838525, 0.07327864786472693, 0.1056730256295827, 0.07186725707220432, 0.09242563875640075, 0.11183475118387798, 0.12667262441653182, 0.12590344131005882, 0.11651976920342655, 0.16011387698404722, 0.12142870734943823, 0.10490462473890116, 0.08193994544072924, 0.2536652717180048, 0.06925251138320476, 0.44685023235224697, 0.5065889834219439, 0.4239839798890356, 0.47224995015565674, 0.44834888696927067, 0.46578927810062143, 0.5112228677556265, 0.4760333625365405, 0.4846584451713841, 0.1266675871089148, 0.12661507912808267, 0.11130930803011652, 0.12718914786793323, 0.0795883360246884, 0.08494334680745319, 0.10439004567173438, 0.1236999645169744, 0.09304348346466307, 0.17947617176916342, 0.18426713463466482, 0.2231128210319172, 0.24325370741378338, 0.1749279102046899, 0.28509965037119245, 0.20087788392550576, 0.2537549228962801, 0.18617588711460453, 0.2821896489699046, 0.34287963526174403, 0.3207715901513032, 0.358619385262937, 0.27705067304071995, 0.30578059543972036, 0.24727413798735098, 0.3334304038274465, 0.3411629518984619, 0.2422287480126315, 0.2775295804716209, 0.37693054264769676, 0.20785702464147082, 0.25433710298414214, 0.29664428428458567, 0.2074027195737984, 0.24143368660312203, 0.13534799721335744, 0.23394371280588544, 0.20854366867422325, 0.23487114724504055, 0.24790351106441189, 0.21313822427355533, 0.21064015416740833, 0.20774222615494708, 0.3064902290267174, 0.23458042198314177, 0.1839552529865488, 0.19360014239223222, 0.20145551503229175, 0.17625085104472005, 0.18506117578925108, 0.19156783637630959, 0.20278378290374366, 0.18105784725968155, 0.21254065203249362, 0.15540329933541142, 0.1338434013888702, 0.8047039053532291, 0.7896672001065079, 0.16836466126989869, 0.12695270986490237, 0.15559586819293547, 0.12333874728239047, 0.15716299020086666, 0.41097589497374487, 0.11271706398817949, 0.11298317872780372, 0.08201543302813863, 0.20822178574658634, 0.20885866879678827, 0.47502748396946826, 0.16650331938458984, 0.41872927436476115, 0.22668238452228806, 0.2036987742446975, 0.19834512241622781, 0.20871217201992254, 0.18496698418802981, 0.2111608242077122, 0.2033677481302738, 0.2099137546739963, 0.23825197297626388, 0.0917319569358841, 0.10978054356744638, 0.12192945353411178, 0.10031394626735068, 0.09989464999033804, 0.10291684077775298, 0.1004069537188731, 0.09591029665048467, 0.10027589017237315]}, "mutation_prompt": null}
