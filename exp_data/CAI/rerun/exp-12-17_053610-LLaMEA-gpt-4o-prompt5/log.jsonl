{"id": "8a45f90f-47ca-4295-9383-3251df582d55", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Randomized Local Search\n                if np.random.rand() < 0.1:\n                    trial = trial + np.random.normal(0, 0.1, self.dim)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Adaptive Differential Evolution with Randomized Local Search (ADE-RLS) - Combines differential evolution with adaptive parameter tuning and randomized local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.3892310998892132, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.25.", "error": "", "parent_id": null, "metadata": {"aucs": [0.8174335995287704, 0.7901306828950688, 0.7894616200250444, 0.7902492944706067, 0.7907688003285412, 0.8158523291194496, 0.8054682824043056, 0.7986855793518068, 0.80506518648028, 0.6382244486135147, 0.6278983790770839, 0.6450071419655665, 0.6184475128034113, 0.6606989338069671, 0.6603709030966833, 0.6188664727557042, 0.6416887347188476, 0.6532455389669907, 0.11644526422464063, 0.12811177222121228, 0.1122222765060975, 0.11895935429815141, 0.10668543238155781, 0.1264046435314372, 0.12029070389016994, 0.11304381451543466, 0.11843359174723578, 0.10708738658964578, 0.11142884294666, 0.10132324026851203, 0.09819756583512895, 0.10729915200691942, 0.10757271285933512, 0.10379199190833155, 0.11960946147744522, 0.12437188718875458, 0.8865064309660863, 0.8825859705240588, 0.8859854269804888, 0.8847684917810887, 0.9214963416316763, 0.8798981367170767, 0.9260370391439603, 0.8946224947867917, 0.8794305409821708, 0.48328013142757587, 0.449990170933927, 0.4943610833204516, 0.4713071663179369, 0.48772425329676394, 0.48920335454457486, 0.511540509974537, 0.4795371901104525, 0.47216607904131125, 0.7645648290751991, 0.7574696039036701, 0.7751927322480274, 0.7961426151267793, 0.7992900416048783, 0.786247008139972, 0.7726684568343901, 0.7885576387307992, 0.7975438793001439, 0.23765417878843587, 0.37169709069343493, 0.21036037637684346, 0.22778520367766353, 0.41336608381857076, 0.21380516564441254, 0.2086633617259427, 0.34104803288073904, 0.17042458624943557, 0.258598107632408, 0.4073655227901223, 0.27435226978448546, 0.38214553667434004, 0.4765266822360321, 0.27622188426768046, 0.20464408704605164, 0.16151763952842935, 0.2086864836166914, 0.390952920234783, 0.3707384575568001, 0.38605033708320147, 0.3755430806960317, 0.40056317139334596, 0.35956035778047724, 0.42156123356822917, 0.4211107574047759, 0.43449653584580905, 0.5383850624448663, 0.5717155309728446, 0.5379248086133788, 0.5097196757367144, 0.476048460410342, 0.5509510182431647, 0.5649953957654928, 0.5469931257781677, 0.5337568149319067, 0.13144138118113513, 0.21077844535091472, 0.15188853555597814, 0.26401192658413264, 0.2605248819448034, 0.27501116792026215, 0.16292012354194796, 0.12487723059069833, 0.24379162981686608, 0.349576519087784, 0.3198363197876086, 0.30097885004930247, 0.33580606818499004, 0.3292248205999042, 0.32888490409891324, 0.29633180716284346, 0.33252989627036955, 0.32043746500884673, 0.6967500859310762, 0.7050024364491876, 0.6931914342257817, 0.6932453409204269, 0.7143255522597358, 0.6866171972004569, 0.7033672908466031, 0.6870266890324699, 0.70472224225876, 0.11164449291106704, 0.10051581833704204, 0.11201772217118522, 0.0989958832258151, 0.09046641349886508, 0.0938078792557051, 0.10203434444705639, 0.10471740432441379, 0.09623772800610764, 0.1348571112667174, 0.3312783666958954, 0.1799204018761288, 0.1386223599810974, 0.15068324348542173, 0.1350343387883437, 0.1383764830271944, 0.12727450324921719, 0.15600063321711732, 0.3987831889428598, 0.42202642510482236, 0.42857644195993794, 0.39740405527313616, 0.4159410564623133, 0.41776650273939553, 0.4226238043857564, 0.43560825802486247, 0.45191001022885735, 0.3470629922092462, 0.32587199755351925, 0.29878018948258966, 0.3409763480209178, 0.3151033635863292, 0.32098429966908015, 0.33619416511518907, 0.35131308914205706, 0.36860079364150655, 0.1872234085214317, 0.19430889192572398, 0.19101110503857122, 0.20239779651083578, 0.1957012185658903, 0.18172897129738252, 0.2118514446764883, 0.1914554282595956, 0.196545307116469, 0.22694909631093618, 0.20498988859160194, 0.2306678320933946, 0.32241858853229866, 0.37028626757802696, 0.18673528829680286, 0.19014001591449758, 0.18131601239102424, 0.18809577625159868, 0.7557776673062959, 0.16567935176730952, 0.7173002653411655, 0.7335550140463643, 0.750695758496451, 0.1713689908110333, 0.6423526932575611, 0.18455880985899886, 0.6772999195313217, 0.6822566764722375, 0.6636023295234899, 0.7513869977066643, 0.19907050689607564, 0.6822051581118638, 0.6422610379444157, 0.7404263276005174, 0.20915195696991584, 0.20598120119362362, 0.20840765260557914, 0.20430745767855518, 0.19716220608135904, 0.1924950128851588, 0.18662582475771838, 0.17790510144574256, 0.19290771674688045, 0.21713682601805662, 0.2100900493880945, 0.08408700301995742, 0.08326060595861418, 0.07861627619991707, 0.08761619852879443, 0.09425546646717453, 0.09383795280824303, 0.08750539755032061, 0.08041886866492409, 0.08452741724635471]}, "mutation_prompt": null}
{"id": "3a5a07ad-4306-4a1a-b71d-37a010bca3b6", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                F_dynamic = np.random.uniform(0.3, 0.8)  # Stochastic adaptation of F\n                mutant = np.clip(a + F_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Enhanced Randomized Local Search\n                if np.random.rand() < 0.1:\n                    local_intensity = np.random.uniform(0.05, 0.15)  # Stochastic local search intensity\n                    trial = trial + np.random.normal(0, local_intensity, self.dim)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Enhanced Adaptive Differential Evolution with Stochastic Adaptive Mutation and Local Search (EADE-SAML) - Introduces stochastic adaptation of mutation factor and local search intensity for improved exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": 0.3664872644137001, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.24.", "error": "", "parent_id": "8a45f90f-47ca-4295-9383-3251df582d55", "metadata": {"aucs": [0.7979662196711396, 0.7628516975244668, 0.7986143016749665, 0.7823047476913984, 0.802015678252871, 0.813682608592871, 0.7847287287059751, 0.7909967783044902, 0.7953842524363791, 0.6127402462623579, 0.595552087593108, 0.607589529856378, 0.5959217607877618, 0.6166459958928368, 0.6348239382947756, 0.6280923606836797, 0.6017079206571694, 0.6114877961846132, 0.11221097863069152, 0.11863439031564971, 0.12351650114267831, 0.10231541893378437, 0.11375779882817294, 0.10014527193051814, 0.12116785416214804, 0.11510629510558423, 0.10915234758592074, 0.10097891109528367, 0.10211003097354243, 0.11813129232974173, 0.09086508254080872, 0.09605254218632908, 0.10095492334675416, 0.11544454624397527, 0.09949838521955079, 0.10031101480055837, 0.9658254833669521, 0.896153071152736, 0.86038809365658, 0.9311790621605796, 0.8896760151013243, 0.924342441223453, 0.9523758015728215, 0.9257093025909895, 0.9414524461671363, 0.4627579187803307, 0.46106534374554853, 0.3759055260972741, 0.42525880124269433, 0.45875224153852157, 0.4715181384887962, 0.49808107982535144, 0.44213121872727756, 0.4914173476844135, 0.7841931895277071, 0.7171131751895881, 0.7536070981670959, 0.7363567081575221, 0.7690912987493079, 0.8021447790568765, 0.7528705544326385, 0.7713640501962183, 0.7597117221950929, 0.22961419679505501, 0.3610119784303141, 0.3149679680392896, 0.40927566134478066, 0.2882446738148092, 0.20034600998214014, 0.2690254751346465, 0.2465515992965368, 0.3398088227400775, 0.3959413260307233, 0.32383017076245646, 0.24996254753233138, 0.24316488709504447, 0.3382177095932949, 0.28688273984629675, 0.35229106010902256, 0.20991816522462692, 0.2569382111708235, 0.34691183445526164, 0.38013976310422126, 0.34990699572650164, 0.41447782621211837, 0.3568193208081024, 0.3579683803895014, 0.35298910796214045, 0.372260123352664, 0.346592765013378, 0.49079894627219856, 0.5128769172086585, 0.5243341984885926, 0.488643368367091, 0.46781653180086247, 0.4820269577235118, 0.538769624375774, 0.5358988325233269, 0.5492044418617619, 0.09047441785130972, 0.09635908852352004, 0.0770374860063161, 0.22143954684039535, 0.22203458019999367, 0.23358645713386494, 0.17703828108536435, 0.10615191991846518, 0.12894782544849936, 0.3066761974260578, 0.2829210567488769, 0.2808537307282488, 0.3131963021876216, 0.3244075939203843, 0.29995860601818636, 0.2863361068794845, 0.28949765845052533, 0.25728764666103654, 0.6889364105408216, 0.6790484469812098, 0.6819670883058067, 0.6816970312634634, 0.657047890847954, 0.686352817137444, 0.7030615803226254, 0.6850543778236868, 0.6481258826727827, 0.0894853072931634, 0.0950993889375581, 0.10451437812265107, 0.10156894696055896, 0.09755791832729233, 0.09727785033974523, 0.0913329045323108, 0.09085787251716848, 0.08890052023951978, 0.20506290780921832, 0.29820384509206244, 0.17352355701697053, 0.13193839765432036, 0.1457754711639122, 0.23091230371840998, 0.1598183359919092, 0.11578463702626618, 0.21049624614351603, 0.414285910224817, 0.37508480091243035, 0.38076917501495877, 0.40664971729830945, 0.41459355377189233, 0.3914870812209842, 0.4231892836039438, 0.441021634420971, 0.4307277325862545, 0.31622132548473214, 0.2849744368607108, 0.30130272177106276, 0.3241003912809187, 0.2911637602038607, 0.2940068290322966, 0.3278670120131051, 0.3693638021751001, 0.32225603029911976, 0.18478300289494842, 0.19294930952246991, 0.2087503846733879, 0.18849963880995757, 0.2114671130849245, 0.19119416222694607, 0.19685721936696965, 0.1789449873454163, 0.19255860037255057, 0.20135756520626502, 0.2086433609388063, 0.1913133406300077, 0.22041095356015783, 0.19494870774726747, 0.21925475466516886, 0.18653081160660434, 0.18673226844854507, 0.1846457061757626, 0.7325243086637399, 0.6588361672783835, 0.16307306576740177, 0.6155397329754144, 0.1860337806911272, 0.7438078553400068, 0.18157718073369522, 0.5740492738073552, 0.6213695730078375, 0.7306100718182476, 0.20252983115542011, 0.20226607351178016, 0.16238724790163306, 0.201200182907594, 0.503535976499554, 0.20668995857326578, 0.20660084126391998, 0.2040436530301385, 0.19951628293271884, 0.18912523331021125, 0.18645275648606074, 0.18763232806210695, 0.17868090441976414, 0.18034567991076333, 0.18419176370423296, 0.18691501335337846, 0.18129898180298298, 0.0827256991480102, 0.09282649284722888, 0.07885682533397265, 0.07962803410870423, 0.0759170160436815, 0.07971910634035628, 0.08483369799610696, 0.07246883394378478, 0.08259450460481932]}, "mutation_prompt": null}
{"id": "bd3162cd-a51b-49f6-97b0-540e0cb7b1a7", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Randomized Local Search\n                if np.random.rand() < 0.1:\n                    trial = trial + np.random.normal(0, 0.1, self.dim)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n            \n            # Dynamic adjustment of F\n            self.F = 0.5 + 0.5 * (1 - evaluations / self.budget)  # Line changed for dynamic F adjustment\n        \n        return self.best_solution", "name": "ADERLS", "description": "Enhanced ADE-RLS with dynamic mutation factor adjustment for improved convergence.", "configspace": "", "generation": 2, "fitness": 0.2583305457741669, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.21.", "error": "", "parent_id": "8a45f90f-47ca-4295-9383-3251df582d55", "metadata": {"aucs": [0.5551171343028091, 0.5570518339449675, 0.559695034723791, 0.6185086630522069, 0.6180438475213892, 0.6228631353083086, 0.6103794624325851, 0.5886018593487876, 0.5868272166906605, 0.345910158800682, 0.36748935486339096, 0.3354280945741219, 0.3391040790521618, 0.3244718336529513, 0.3056647749024115, 0.37884713967303985, 0.34012426202905455, 0.3548718577753692, 0.08775138412156536, 0.09068260587263044, 0.10082638892327833, 0.08753329203801952, 0.08892117066746763, 0.08547947797895394, 0.09212098879418429, 0.08737042963086039, 0.09782867424206887, 0.08297779627029778, 0.08756570613865367, 0.0820478283194378, 0.07966950226511726, 0.08305288412395151, 0.07590681585447578, 0.08768737148212802, 0.08539513477659288, 0.08247129510262474, 0.9173818796450299, 0.9042416080872906, 0.9653039364555532, 0.8936379379950238, 0.9613826850666211, 0.930828908253386, 0.9537580988144463, 0.9529330604613749, 0.9389732898338735, 0.2828468176976717, 0.2824408027182793, 0.2620788013353287, 0.2683940770251392, 0.26308185005746054, 0.2928447664364612, 0.2939837583395428, 0.272470261907963, 0.27735346671228034, 0.46999669365758723, 0.4574628611784948, 0.40114555195541246, 0.4665674517524093, 0.526766426351756, 0.5086213718498829, 0.4777465362803851, 0.5108645492175936, 0.4853934248315802, 0.15435349398524845, 0.14978430118478991, 0.17582693958109064, 0.16718453658115517, 0.15161357078665738, 0.15288767683265292, 0.17596974137012678, 0.16374386858507128, 0.18381962365895899, 0.22627982065011354, 0.18238249545292506, 0.20188405757885264, 0.17254067923689742, 0.147884944002167, 0.18076845414196963, 0.1289990789568417, 0.17303132532590848, 0.15934098914247874, 0.11852368155294357, 0.12933202068691174, 0.0923565155071534, 0.16540891322864404, 0.11427494632786861, 0.10249803279562708, 0.1087828959343109, 0.130509212124308, 0.112777956200245, 0.21967713464743566, 0.250901855397063, 0.23622387273373302, 0.21458765964235216, 0.2149473691228182, 0.22530115603024425, 0.2500343056536316, 0.2442412980705807, 0.25706664918426336, 0.05727991889518469, 0.021352598923110033, 0.01828430759118893, 0.032465982899116175, 0.04519935892854576, 0.044685546314554125, 0.040949388242790485, 0.046270860294781446, 0.050168689837921, 0.14528352674569722, 0.14454219484990338, 0.13881670845962002, 0.15850244043274597, 0.14221459002646675, 0.14327781830023179, 0.16302380497015778, 0.14362234364211168, 0.1517414584118958, 0.48058779410364616, 0.45632591056145577, 0.47261552331472556, 0.47055491020652573, 0.47312205698971577, 0.4773513125213742, 0.4841662401157417, 0.4588989339620543, 0.44617190419182995, 0.07966561313115106, 0.08422117113240712, 0.10343406168439673, 0.08206242668360897, 0.08207469186245087, 0.07470665576301194, 0.0937911006809583, 0.0735362642204822, 0.07701222610239333, 0.11976760226488314, 0.1522216362640223, 0.38739555821869254, 0.18028792845820685, 0.14732302918541318, 0.13498849504729205, 0.1321048820174383, 0.163667876250972, 0.15165526494930215, 0.2693587231654144, 0.2529258397511771, 0.25315473531685917, 0.2745098791868674, 0.24518539472787615, 0.25206982805183165, 0.2977402878267259, 0.302410039635006, 0.2780355072965289, 0.19299704368413595, 0.19154450607439422, 0.18762670685628313, 0.18047785277110107, 0.20367877072929663, 0.19341874379444057, 0.20313645791015023, 0.19674960044578826, 0.21449021416959846, 0.18203468712061344, 0.20539164635934082, 0.16918507070709288, 0.1778639519377444, 0.17304515931840903, 0.19351045850939785, 0.19797196820986784, 0.17114526341023828, 0.1884185775138354, 0.17665189254903557, 0.16691995694599648, 0.1766529283464664, 0.17450050381887305, 0.17492871505160434, 0.174275917700368, 0.17683782913617174, 0.1741028827202208, 0.17669177472441044, 0.4769778056041476, 0.6195374489777998, 0.1638867685499117, 0.5645043313096207, 0.5553730833848829, 0.1758045490359338, 0.6312322018027376, 0.5584169247657491, 0.3558765836710708, 0.16429178037946113, 0.1940016681710467, 0.18309118493973875, 0.2635536781809107, 0.1656279294600237, 0.35771283601897963, 0.5322096907799234, 0.20176626107889084, 0.2077267303653828, 0.17661094952081935, 0.17686977336914222, 0.20606693048759295, 0.19898087195600767, 0.1856913885527246, 0.18058328038997318, 0.20162922702965802, 0.2003567782562301, 0.1831126802993318, 0.07757981825953142, 0.08079886489463606, 0.06934800856690904, 0.07119457459039036, 0.060356980872312116, 0.07459922305027844, 0.06490796480384398, 0.07878997134527521, 0.06476678631299015]}, "mutation_prompt": null}
{"id": "678a1af0-8052-4703-852b-dd905b3612e9", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.4 + 0.1 * np.random.rand()\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.8 + 0.2 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Randomized Local Search\n                if np.random.rand() < 0.1:\n                    trial = trial + np.random.normal(0, 0.1, self.dim)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Enhanced ADERLS with dynamic mutation factor and crossover probability for improved exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": 0.39405281121444174, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.26.", "error": "", "parent_id": "8a45f90f-47ca-4295-9383-3251df582d55", "metadata": {"aucs": [0.7967785766895379, 0.8143553317871997, 0.8193700855887027, 0.8089835476827187, 0.8266600200287699, 0.8257114016065925, 0.8195436799856107, 0.82203682948445, 0.812697138698864, 0.6937076824984041, 0.6804189998335521, 0.6436608238304093, 0.6688585599107222, 0.6546983727170808, 0.6737088734703756, 0.6934890747246125, 0.6871148695009264, 0.674185194671642, 0.17836657340501239, 0.10944462264680022, 0.11082012897179483, 0.15977526469245418, 0.11227189670047188, 0.12108269721986398, 0.12502507769761562, 0.11569367867887681, 0.12039212629706708, 0.0999908692093543, 0.11049261676341415, 0.10361502980670434, 0.10689027073288848, 0.12216187494086339, 0.1111648504157654, 0.09455565586237258, 0.10879300438103001, 0.11316193926798934, 0.8307169624796726, 0.9365890312519969, 0.8868586056382696, 0.9106136566491683, 0.8781703634785857, 0.9423753927680484, 0.867777384755978, 0.9157161533872007, 0.8712121081438166, 0.5381405455250512, 0.4127271119726088, 0.41467911168892335, 0.5092227260825, 0.5464919737373342, 0.5696169644682434, 0.5523100595729569, 0.5320230951196385, 0.4522408308684508, 0.7474398994282043, 0.8014279918005672, 0.7986349108822013, 0.7692490459877331, 0.8142937738672661, 0.8452994021748403, 0.787849224825648, 0.799043139424446, 0.7900948217879425, 0.23178238943548946, 0.29112352090521876, 0.23032007992949877, 0.18636989834292017, 0.2371218270171993, 0.1762845034911663, 0.2755131493229773, 0.19371123327777573, 0.21185190745755322, 0.21226421843887866, 0.19025154532725652, 0.18527392861561232, 0.20435901027308678, 0.2487012314696997, 0.1801575051706502, 0.19869247049854222, 0.15295059651958964, 0.1876435382454239, 0.5324802035941761, 0.5316336098905938, 0.46666874474794495, 0.47329796995496576, 0.5015683611425661, 0.4641192606639881, 0.46742775391705327, 0.47494649437631375, 0.48158846793593435, 0.6298929078262611, 0.5820937878266452, 0.5933201292835202, 0.5276421817738919, 0.5714680301582943, 0.5933987499310324, 0.647628259175612, 0.5970675786760745, 0.6629523871744134, 0.1522248740145391, 0.11925179277550813, 0.20587842651620392, 0.18921788770871428, 0.3487052252234343, 0.21948605036458024, 0.29857371240729835, 0.14635197328783667, 0.23775961523011913, 0.3525661110134872, 0.3991807966828478, 0.3394112210581597, 0.4052261085458332, 0.376818441748176, 0.368212263577696, 0.3733427495021874, 0.3820316616777448, 0.3291131054466905, 0.7251762670185476, 0.7437231522220396, 0.7408720255867112, 0.7455214832050197, 0.7430902831851072, 0.7528177878268832, 0.7332725734213383, 0.6903289481471742, 0.7238012569089549, 0.10566487799229884, 0.11282466401614077, 0.11113290263859477, 0.09192985444729496, 0.1059992394211311, 0.11829746610750957, 0.09696971995495751, 0.09659242190093464, 0.1038097834963061, 0.14195475775993927, 0.13913113286562506, 0.15406098485568764, 0.15251751515789125, 0.1433016699970776, 0.13201465245218424, 0.1834054050662518, 0.22798347026510069, 0.20405378818524644, 0.4544491750208697, 0.4805703984923869, 0.4398953911079557, 0.44877347195816697, 0.43985544146079547, 0.43829038971594836, 0.4827013123593863, 0.4964618451972419, 0.4947909897140278, 0.3632295994164785, 0.358240976638701, 0.3480593578361474, 0.3468429183466093, 0.3564688076792397, 0.3339831171304559, 0.38933601685860564, 0.3558589405084175, 0.37188801360706625, 0.2180563791736405, 0.19108138441585243, 0.19534508810017737, 0.19142982699768485, 0.19107312127110077, 0.2118061055365702, 0.2045784484161951, 0.19201578383136408, 0.20775251505541115, 0.18140046558915968, 0.19300578939620916, 0.19171428872055796, 0.19898706037052838, 0.20468999553129297, 0.20390357659737146, 0.18698784228672405, 0.21549187903881228, 0.18511310851327534, 0.6834221511659321, 0.7346989998688997, 0.7687701396586483, 0.7589712939906949, 0.8210360074630108, 0.7907256708279644, 0.19670046164207056, 0.7347796364406222, 0.6364240560266248, 0.8254229063578, 0.1660386249512087, 0.2034911502799781, 0.2034371771028043, 0.19375991797798164, 0.20219763655074152, 0.2064728174345235, 0.21066974497044688, 0.20767367118117586, 0.200513236312308, 0.20851242244879997, 0.2035796074773354, 0.19792340279345577, 0.1982332254116954, 0.18388465556439104, 0.18723803837955044, 0.1816592656377629, 0.1758541570137755, 0.08190991868376574, 0.08363302017616625, 0.08580394033068406, 0.08013118174313572, 0.086569172702891, 0.07883716360437354, 0.08012562274531942, 0.08572834973751109, 0.08879089493632131]}, "mutation_prompt": null}
{"id": "950edc96-522f-475c-8199-2fc81945a6b2", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # Adaptive population size scaling\n            self.population_size = min(10 * self.dim, max(4, int(self.budget / evaluations) * self.dim))\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.4 + 0.1 * np.random.rand()\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.8 + 0.2 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Randomized Local Search\n                if np.random.rand() < 0.1:\n                    trial = trial + np.random.normal(0, 0.1, self.dim)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Introduce adaptive population size scaling based on budget utilization to enhance convergence speed.", "configspace": "", "generation": 4, "fitness": 0.35611874633242974, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.26.", "error": "", "parent_id": "678a1af0-8052-4703-852b-dd905b3612e9", "metadata": {"aucs": [0.8622771134138278, 0.8586502058253849, 0.8566661766918872, 0.8545994950909914, 0.8565820233713732, 0.7316727266922498, 0.8639928669428724, 0.854420182798329, 0.8582308082080022, 0.7740555266582541, 0.5588502826859267, 0.788120183416567, 0.775590837817921, 0.7546447246535561, 0.5150757216230115, 0.7869122814343028, 0.7882717908238718, 0.7920267302054333, 0.3449792107241778, 0.1301804495827582, 0.12847533472033523, 0.14116934987155005, 0.16299430410559435, 0.17854893623303292, 0.11339047518683287, 0.12241293594770852, 0.13458781355864446, 0.11694186326694822, 0.09882612777907385, 0.1349595563450222, 0.13091973902327858, 0.13801205942602046, 0.13287155532802553, 0.126673441174612, 0.1134858675639775, 0.12901868474704203, 0.8931510778102045, 0.9365890312519969, 0.8605309599757713, 0.884729718611626, 0.8980689663025709, 0.9423753927680484, 0.8825826632293486, 0.9194099180656397, 0.8664504311768305, 0.3711056303164081, 0.2865491139364149, 0.3105962224327985, 0.3302111141924189, 0.40010817415489774, 0.33047919921720026, 0.3294254323308604, 0.30377457218623793, 0.3090229205504742, 0.36990019405557384, 0.8249453265972844, 0.8278260575320646, 0.8481955566689924, 0.8422311485960686, 0.8643421077978547, 0.3528225460757871, 0.8217882891104016, 0.8248219726412405, 0.24858799225812733, 0.19154511693391063, 0.1952922028063555, 0.16631253127949708, 0.23303835157049713, 0.1493606465373839, 0.17548538342908937, 0.14663553106829041, 0.18738360912339436, 0.16180405880006477, 0.13373142572408647, 0.15883349972221328, 0.15495504714362052, 0.20491985220971431, 0.18380599430465272, 0.17364745240474078, 0.18847080996600085, 0.16884760797817688, 0.134922972658571, 0.1976230045157099, 0.18605743091947502, 0.3932895293854284, 0.203397208725837, 0.394808979267254, 0.12331825811978303, 0.12631416576611953, 0.19301633427221365, 0.3312741371143316, 0.18748152171823818, 0.30837514603743665, 0.2647520397190165, 0.20713729949283888, 0.23652098544888767, 0.35563064375094955, 0.29821505988916397, 0.5251749638823278, 0.08329121156302777, 0.1402048790100785, 0.12336936504940788, 0.12047514144908689, 0.10688831509270313, 0.13166031100514397, 0.1692244189117773, 0.19147761924310702, 0.2199869797627696, 0.2708891625084139, 0.322696724666639, 0.3594045232619335, 0.2913046980343804, 0.2057659763642189, 0.27438691377096525, 0.22663957179574523, 0.21228558817845256, 0.3451261164371566, 0.6428427105609968, 0.7428079527602849, 0.6608934957632092, 0.6046436758925083, 0.5682656129772737, 0.7861206948980084, 0.5591922307136468, 0.6685024266680201, 0.6437969568956139, 0.13073508227111652, 0.12262475972867082, 0.11926212038120321, 0.11283510539495312, 0.1353815784810759, 0.16564935946101456, 0.10950247327970641, 0.10348425186221899, 0.11687175523516402, 0.2787354679744707, 0.17347386181901148, 0.22171701453908554, 0.21901625771869582, 0.3616414304027238, 0.20701110626681574, 0.1601446104331571, 0.2067868914486226, 0.21495344700213992, 0.530472126337331, 0.369854474242192, 0.4462145990129981, 0.47818878964889056, 0.49552043050956796, 0.4553827835010764, 0.4127726244945522, 0.44192639733702543, 0.5016751342906043, 0.3550905489548605, 0.38757425593327444, 0.4337860010207354, 0.39596645783624174, 0.36244654559188116, 0.45548890348149784, 0.34743242933319596, 0.48517829310044003, 0.40612107520779894, 0.23924189481532931, 0.22920730852341398, 0.19665532878975933, 0.23949116781465896, 0.21875825891697565, 0.20898498427036138, 0.2022804051912982, 0.21541332846870298, 0.1981708318657872, 0.2837212585437484, 0.21230383066915504, 0.21037625736297805, 0.3253646645346697, 0.20210678332373677, 0.20355890594069426, 0.2029590853441553, 0.2136127772125801, 0.2035228224991399, 0.4863622666628802, 0.5803166910190267, 0.706817847294883, 0.5488461670240709, 0.6567885268379265, 0.8413441790615939, 0.16573762331549857, 0.8239259489862788, 0.18261021226945418, 0.862959823284821, 0.166052007855798, 0.2119278677851849, 0.20423519493424602, 0.19823605039273184, 0.20268338366103467, 0.29383367468409427, 0.2106392826765615, 0.2080296480890904, 0.2081051228553028, 0.20851242244879997, 0.2035796074773354, 0.18299893407052814, 0.19379434920810634, 0.1783552062404613, 0.20133415332996862, 0.17056413245929658, 0.18926559556366607, 0.08327488301422659, 0.08817432231511069, 0.08066205973145513, 0.0843473308333581, 0.08600672255643349, 0.07548074623459688, 0.12659428422898678, 0.09166714626590255, 0.08770626781356661]}, "mutation_prompt": null}
{"id": "9a9d770d-1a6a-43f1-98a4-65331cf9701b", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        reduction_factor = 0.99\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.4 + 0.1 * np.random.rand()\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.8 + 0.2 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Randomized Local Search\n                if np.random.rand() < 0.1:\n                    trial = trial + np.random.normal(0, 0.1, self.dim)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n            \n            # Adaptive population size reduction\n            self.population_size = max(4, int(self.population_size * reduction_factor))\n            population = population[:self.population_size]\n            scores = scores[:self.population_size]\n        \n        return self.best_solution", "name": "ADERLS", "description": "Incorporate adaptive population size reduction to improve convergence speed and solution quality.", "configspace": "", "generation": 5, "fitness": 0.24944117227946017, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.20.", "error": "", "parent_id": "678a1af0-8052-4703-852b-dd905b3612e9", "metadata": {"aucs": [0.5165145506974845, 0.5895731652988039, 0.5879552652759301, 0.5165484491085706, 0.5573690650153762, 0.6149909692844846, 0.6071046490440164, 0.5113112443335537, 0.5341560617480983, 0.2657056372421416, 0.27192347681578244, 0.1410178446523137, 0.27298262667757256, 0.18357561126648336, 0.2027283785671089, 0.27467747637214424, 0.12787286769987039, 0.16047009371296916, 0.117955218421672, 0.12041133281604921, 0.12431718961379845, 0.1318445745674539, 0.12017031393049205, 0.12944004536654063, 0.1332440863410006, 0.12396251901829602, 0.10510751349310243, 0.10487699194821165, 0.12103171070492613, 0.09134377325451404, 0.11525023421366276, 0.09995264453919894, 0.11712467867262932, 0.10191577250040007, 0.12020529992071538, 0.10636413276027745, 0.9095909514699813, 0.9040807833269136, 0.904609752740094, 0.898549744079512, 0.9193615484772674, 0.9156267824977637, 0.9092029814001894, 0.9346371465251611, 0.898296295124255, 0.2955112947901961, 0.28255707075344727, 0.299294774213984, 0.2908707049122846, 0.27926914680143977, 0.3048304834303488, 0.33223825113924454, 0.32785866186259405, 0.28713639830111504, 0.24072790179546044, 0.3443608571773912, 0.4154968973294879, 0.8223246843495431, 0.27256895326801756, 0.34863009553432467, 0.7182516050330097, 0.8055262527767018, 0.8394494960710784, 0.16746861791762058, 0.1394465184450674, 0.14943115136516116, 0.12566192467731507, 0.13543838453057233, 0.15564302043308487, 0.14382771693328944, 0.16359756923646673, 0.1648460463824173, 0.14730354763256515, 0.1796346913805439, 0.13117439623175453, 0.19201243329445805, 0.1325700949867461, 0.15450189651333945, 0.14108964962881887, 0.19117492770435573, 0.1270191984324872, 0.0935910520739206, 0.1418940605845812, 0.11762068269290704, 0.17694169521589154, 9.999999999998899e-05, 0.11548021999892066, 0.08714505685507679, 0.11424945386640206, 0.08756616354270796, 0.08513863299879709, 0.23924625848500625, 0.209289539737613, 0.11418748811058488, 0.2189856306992588, 0.23224274770636033, 0.1648436355577534, 0.2571632741858517, 0.13365202938001441, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08454062654321481, 0.02062264480950471, 0.060814968930577584, 0.023429634980253522, 0.028105453545415382, 0.1688444986024049, 0.1596579824463188, 0.13511688381415665, 0.17740566240747158, 0.10701380187299059, 0.09502946441880644, 0.15427268662614246, 0.1198333092456465, 0.0901295717290932, 0.47274616481245024, 0.43342432020471366, 0.47358161943004695, 0.4548938601602782, 0.44293377930306155, 0.4502687272170971, 0.49301797189090724, 0.4996553426431385, 0.4657308713861781, 0.083134416851117, 0.12060224851335266, 0.11608568723919066, 0.13802428569780456, 0.13872970297464782, 0.10247347581483757, 0.09205449053398407, 0.09540623258866876, 0.11038551676372588, 0.18594337765711866, 0.14649389388325995, 0.15963929925497233, 0.1829433407348977, 0.15125767205096508, 0.17840694936670787, 0.17190395655367285, 0.19741996227487657, 0.1686162183044524, 0.31017813416223694, 0.2979962556149899, 0.3030262636135139, 0.3322610973182739, 0.3037206311297196, 0.2912198078863548, 0.31868627425457074, 0.34173559268311815, 0.3176869435529657, 0.22262193413761644, 0.2613495036457092, 0.2520014118187057, 0.1992332556445603, 0.21390925166395658, 0.22628040031980345, 0.22313873678442786, 0.29679904996426987, 0.24782985276404312, 0.21695550737733016, 0.20876995089237693, 0.19391087801737306, 0.20402224056652007, 0.1965517496909147, 0.18917172894556533, 0.20499596122880948, 0.20110558519292632, 0.1940935925482683, 0.19040344084119654, 0.20155313267800712, 0.19890761769887355, 0.18571014727538415, 0.20682802349246865, 0.19644185904633993, 0.2391759059801063, 0.1711722937799588, 0.19452182874485757, 0.18498859554610203, 0.727015044470678, 0.15131460156274001, 0.21741019748958434, 0.16721678175249488, 0.19283430542212765, 0.17828346906810055, 0.1543556502987793, 0.6134815473746182, 0.3971416621134828, 0.20956860931014998, 0.2057713616533835, 0.20629497041882716, 0.27534114634292106, 0.12530148847552847, 0.1536090034230525, 0.22241423360486845, 0.20595511246942821, 0.1843659012302029, 0.18282964258131273, 0.1814850056695706, 0.19728798016942162, 0.19958447299932458, 0.19999808880451742, 0.20663512189040922, 0.1834818079156505, 0.1861619104404354, 0.09696653535448219, 0.08358523878378421, 0.09696575708107813, 0.08694933410780481, 0.08221571153774787, 0.09062254214669119, 0.08851770076617926, 0.08829907717504337, 0.09705280038446873]}, "mutation_prompt": null}
{"id": "464958b2-5b67-4e37-b04a-f094c512b600", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.4 + 0.1 * np.random.rand()\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.8 + 0.2 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Adaptive Randomized Local Search probability\n                if np.random.rand() < (0.1 + 0.1 * (evaluations / self.budget)):\n                    trial = trial + np.random.normal(0, 0.1, self.dim)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Introducing adaptive local search probability to enhance exploration-exploitation balance.", "configspace": "", "generation": 6, "fitness": 0.3940640260858984, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.26.", "error": "", "parent_id": "678a1af0-8052-4703-852b-dd905b3612e9", "metadata": {"aucs": [0.8141912212421585, 0.8094988394780909, 0.8320875174583158, 0.8155278262992444, 0.8272273763870535, 0.8192106039022631, 0.8153344632551266, 0.8217762151682497, 0.8138574949314051, 0.6848273450891114, 0.6458249366638671, 0.6808187194254749, 0.6619525746789501, 0.6535544968973918, 0.6968608838356471, 0.6665077037811232, 0.6698912216160577, 0.6719436492303914, 0.11080616201586435, 0.1204076477430086, 0.1239157333345332, 0.15414064732276822, 0.1223979898290396, 0.12138880948553665, 0.12254330364605126, 0.10566359646877066, 0.108216395241309, 0.12345795558258577, 0.1140076300451277, 0.09897703447822859, 0.10700666867440833, 0.11814357613496063, 0.10514566936257508, 0.09498840096572636, 0.1179992291582217, 0.10305160180803741, 0.8930748163298745, 0.9365890312519969, 0.8965285008528628, 0.8836182026029714, 0.9077268237065338, 0.9136828442117388, 0.8839040009161414, 0.8988611970056254, 0.9068120343843697, 0.49277973107540674, 0.43281765235538794, 0.4283806287839873, 0.5588734101835866, 0.5250032189193201, 0.5210920547649146, 0.4104648074694289, 0.45994722220825845, 0.45051337622837595, 0.8015236499755407, 0.8131561743337996, 0.7822845520068644, 0.7459218435346027, 0.7676353437568457, 0.8195772700307777, 0.8278106052327402, 0.7977643445514603, 0.8106517919726532, 0.261216486367735, 0.16049864906178313, 0.19888892669078062, 0.18802640177161167, 0.2057583207709195, 0.16481063555796738, 0.4611446930537797, 0.2051717670306511, 0.1949654304200774, 0.15147027211553488, 0.21102315057835186, 0.16550408761397162, 0.17540220566862064, 0.25610847674922943, 0.1785988582236978, 0.17157493098208465, 0.18386585887218831, 0.2537261169941527, 0.46982149105166904, 0.459604828689546, 0.4597006210150806, 0.48477247655019107, 0.43847815001381574, 0.46930458984722034, 0.4809811270979555, 0.44916837349545136, 0.48308628321894675, 0.589680207756228, 0.5670354134009663, 0.567532611478234, 0.5743118009623133, 0.554588245920784, 0.5769761590404912, 0.6550287831997867, 0.5578358021468279, 0.6407215296932705, 0.09225618836161242, 0.15317838891939906, 0.16333647715920363, 0.1677274107756217, 0.348993478655963, 0.2084268676558938, 0.14266560438702203, 0.15916175859671622, 0.21454359429406344, 0.3503328927635989, 0.36728092777432364, 0.36530829403242593, 0.4001705528343532, 0.32802974809543484, 0.35909164625849777, 0.3748123387369109, 0.32178329356732327, 0.3359586600430432, 0.7562836501631185, 0.7406152400750093, 0.7377114954602071, 0.7394225608700326, 0.729563975555887, 0.7183336050927212, 0.738724095149401, 0.7287796137009747, 0.7419295158933541, 0.09408793490478418, 0.09314645732272164, 0.11534549811464345, 0.11302750537541395, 0.11373366693154674, 0.10347319269091382, 0.10614153672126081, 0.09530975594595825, 0.0996488017371927, 0.1297761301872703, 0.12540259475622517, 0.17013856403526095, 0.20506640063483628, 0.2406672148639344, 0.1420444568505369, 0.24534449343198728, 0.2047291903435059, 0.14090733551901036, 0.4522156321147701, 0.4528893971317355, 0.46722278226922564, 0.44415552911658895, 0.43454434495760064, 0.4417811874649962, 0.45010468656644176, 0.4790891096436153, 0.4829107358840804, 0.37019411204343355, 0.3490544513105388, 0.3522051005317708, 0.3092333502014446, 0.32291030662100506, 0.33291430005215816, 0.4164325038896537, 0.34605270121285636, 0.3756313023550756, 0.19590326771431876, 0.19367140454065324, 0.22037182502983654, 0.22471395391524185, 0.21254109181955072, 0.18800087455827819, 0.2030196725463137, 0.20610322000122616, 0.2311383880461696, 0.27694844751093384, 0.1867679706915073, 0.19063962300234383, 0.18999963222314842, 0.2141655339789409, 0.18947651904241614, 0.19483965116780422, 0.20417677301628723, 0.2766548042141277, 0.6624417511074431, 0.7686752232508818, 0.7385267037547807, 0.7068978468626532, 0.7848601352000997, 0.7427270351794921, 0.1646734448751369, 0.636202573148859, 0.7372366098457883, 0.8032640050769402, 0.16612446924071012, 0.2043854125512229, 0.4167479474581274, 0.40975320249364977, 0.6273609708215955, 0.2055815885974468, 0.21059462070224322, 0.20731441162708342, 0.200513236312308, 0.20553027855288353, 0.2001071939114225, 0.1806086700627153, 0.1957577834587494, 0.188901426854736, 0.17927970693303263, 0.18516257822861137, 0.18695613120499288, 0.08757121273496993, 0.09116299153743024, 0.08959195614125803, 0.08154829912734274, 0.08783611967305749, 0.0859386615801706, 0.10455049413788442, 0.08371090998759101, 0.0821172083108822]}, "mutation_prompt": null}
{"id": "eaef83ed-00b1-4e3b-8d0f-3d5e79414f5f", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.4 + 0.1 * np.random.rand()\n                # Slight bias towards the global best\n                mutant = np.clip(a + self.F * (b - c) + 0.1 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.8 + 0.2 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Adaptive Randomized Local Search probability\n                if np.random.rand() < (0.1 + 0.1 * (evaluations / self.budget)):\n                    trial = trial + np.random.normal(0, 0.1, self.dim)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Enhance exploitation by introducing a slight bias towards the global best in solution updates.", "configspace": "", "generation": 7, "fitness": 0.4224538955446049, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.28.", "error": "", "parent_id": "464958b2-5b67-4e37-b04a-f094c512b600", "metadata": {"aucs": [0.8511154474057905, 0.8531418608230988, 0.8605055977395211, 0.8473564478444453, 0.8594685324623422, 0.8551563905283879, 0.857221685761737, 0.8468630364826365, 0.8518859666918914, 0.7239429204258894, 0.7289632544756561, 0.7504291105068385, 0.7242442310065936, 0.7275379105332125, 0.7348870533619937, 0.7323768843892252, 0.7225311603397944, 0.7408192388494319, 0.1292172903852863, 0.11531896061865332, 0.1265874247332095, 0.12388211321304099, 0.11496543200691267, 0.13122258691738042, 0.12779747894832272, 0.14343130572318818, 0.12657852981310702, 0.11444897384848463, 0.11074981989323696, 0.11109876799211305, 0.11564927632007893, 0.10960743472813006, 0.10852320213349576, 0.11063942080773703, 0.12821956838679216, 0.11504519529298163, 0.9377657992127918, 0.9141731534725503, 0.8875224683719601, 0.8858750651349246, 0.9077620313876315, 0.9086808878373102, 0.8894525928516158, 0.9026046773154863, 0.8980939580296979, 0.6212085026730988, 0.5711320055760978, 0.5867977513266314, 0.6542864549736035, 0.6050316713137659, 0.6197192127050192, 0.5966507567151678, 0.5006258368653375, 0.6068512078373156, 0.8491960328065375, 0.8376327964915224, 0.7959779533493909, 0.8619430290860389, 0.8384665628708933, 0.8635350064397604, 0.23991547059609153, 0.8382996630097266, 0.8290262655405438, 0.15237596517134022, 0.14360057742500143, 0.18657260116439334, 0.1323468838866726, 0.17653016704898072, 0.17041120410286004, 0.28805352119327876, 0.18989565806064768, 0.26268614613675056, 0.2053956109728453, 0.18171152117419798, 0.1829924832830362, 0.20792533712795114, 0.19896782611980468, 0.20327020426256714, 0.28889406567635956, 0.20844842299938893, 0.23032537516662566, 0.5645865042102747, 0.6020160430430466, 0.5906753110010461, 0.6143218852940651, 0.5569286987695397, 0.5658904731149499, 0.5550163027981828, 0.5772782391916998, 0.624843532881298, 0.7039497685739504, 0.6758498235122574, 0.6995056110234239, 0.3576236809387072, 0.6234587539906884, 0.31532324864239125, 0.697640687575251, 0.7188237817371046, 0.667445428316187, 0.22369008891779807, 0.13001592283922236, 0.17916561028797384, 0.10239528602134873, 0.39798675266147654, 0.46208802021824125, 0.15800656773652377, 0.2752915168703215, 0.14854148816097656, 0.47235654467352706, 0.38128373531694815, 0.45373938495121147, 0.4817234370485599, 0.4862540250641698, 0.49355340987018015, 0.43591131944148453, 0.4443286651762641, 0.3824007221891762, 0.794999201078191, 0.7988130282755183, 0.7942227603012894, 0.8171903657782804, 0.7753536416121434, 0.788940643942746, 0.8152583714506363, 0.7916372502069349, 0.764391247669963, 0.09737923505787971, 0.1068063787743817, 0.1155763431258896, 0.10977624508062289, 0.12216645755668176, 0.09994110521872479, 0.09601640324008476, 0.12278586136114755, 0.12103398746591643, 0.13606209089152688, 0.16884940296885054, 0.17195284478835726, 0.30739249560393755, 0.13304714433269382, 0.127784164393977, 0.1580764998299381, 0.1605774398403701, 0.14814506511876735, 0.5142996756921432, 0.5299467695571012, 0.5434818937310009, 0.5559246137922442, 0.5158903379509345, 0.4896209672397608, 0.5413404869919377, 0.5423316934891256, 0.5183722098421366, 0.37376592860706115, 0.416048404373509, 0.44059730459746993, 0.38753819829871383, 0.39572900600491967, 0.3885796020005501, 0.46568298110709316, 0.45182892643622885, 0.42719992858788547, 0.19248388023072593, 0.21123935028873042, 0.20627036098020068, 0.2061928301872744, 0.20255801253691175, 0.2231130118003336, 0.2420207733096601, 0.21520507414567203, 0.25514236238809307, 0.2646913542778808, 0.38472934963073047, 0.2344404393515067, 0.211866212033321, 0.21161339789898181, 0.34038538824489717, 0.41426852803447256, 0.29353986627538553, 0.40055173756609097, 0.8607554927973282, 0.18311261585413285, 0.7887653133284243, 0.19568589711923046, 0.6956685656874224, 0.7970949089501629, 0.6199901105832356, 0.6828833050308754, 0.7764582345481486, 0.8516052260299909, 0.8166423260024853, 0.20707242648311452, 0.1631265232882313, 0.16732746027639278, 0.16696253832541075, 0.164471982211563, 0.319646091166378, 0.20895177418233124, 0.19022588531560092, 0.17624632423293207, 0.17483410807254918, 0.18206133219848508, 0.1860429721073661, 0.17902187293440186, 0.1946466456672915, 0.17701599707082283, 0.17270355936117399, 0.08964392558469458, 0.0919843077312511, 0.08586347349418844, 0.08735616760673981, 0.08890882417058188, 0.07841779660275738, 0.09432279603546134, 0.08487411700960024, 0.08701383991443568]}, "mutation_prompt": null}
{"id": "de148b9a-08f8-4848-a9ee-8879392b81c0", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor with scaling\n                self.F = 0.4 + 0.1 * np.random.rand() * (1 - evaluations / self.budget)\n                # Slight bias towards the global best\n                mutant = np.clip(a + self.F * (b - c) + 0.1 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.8 + 0.2 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Adaptive Randomized Local Search probability\n                if np.random.rand() < (0.1 + 0.1 * (evaluations / self.budget)):\n                    trial = trial + np.random.normal(0, 0.1, self.dim)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Introduce dynamic scaling to the mutation factor for enhanced exploration and exploitation balance.", "configspace": "", "generation": 8, "fitness": 0.4221566221892456, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.28.", "error": "", "parent_id": "eaef83ed-00b1-4e3b-8d0f-3d5e79414f5f", "metadata": {"aucs": [0.8598611902947986, 0.8668462540570706, 0.8674169091029303, 0.8490491417699894, 0.8670912063445027, 0.851889588593338, 0.8534751258481488, 0.8529193073555812, 0.8608716907746369, 0.7292350139450123, 0.7469012347913337, 0.7277021664565446, 0.7362469203731667, 0.741411579514788, 0.7418729313539758, 0.7128224643432354, 0.7300099588659552, 0.7444042933612117, 0.13620788200675504, 0.12976755395730832, 0.1319681813129724, 0.10811511510580407, 0.1446804133727977, 0.12568812080314906, 0.12580988821493722, 0.12244062667073863, 0.14322802677410218, 0.12597108483675545, 0.11313655887854168, 0.10828634574377083, 0.11039458578887151, 0.13993224933315485, 0.11888220711067299, 0.11814102643144975, 0.10520259692601974, 0.12030204875484196, 0.9377578180334711, 0.9197231040528107, 0.8721845222270678, 0.8873273510248526, 0.8869577237873875, 0.9068568442224249, 0.8836138765285719, 0.8895297853611539, 0.8969335375296319, 0.5363133182508315, 0.3335459084240898, 0.2437466366799046, 0.35726078281357754, 0.5564243768757153, 0.6379344043777365, 0.42576514132194054, 0.6321460678884074, 0.5870680898794318, 0.8246724734286688, 0.8414793024171513, 0.8578588392602466, 0.8614816970481303, 0.8539101422754446, 0.8661204257194337, 0.8758788793812743, 0.8535764228563473, 0.8550261159762715, 0.17023063436814778, 0.15661661574903452, 0.22378992674974796, 0.16041197006361385, 0.16678278744911967, 0.1795844255311747, 0.1802754938868124, 0.16995380102907365, 0.17228061152027063, 0.20059605408000503, 0.21656634412970088, 0.16069088725754788, 0.25584901061830534, 0.1753831074700254, 0.26310903507004346, 0.20101455909204902, 0.17160573514035482, 0.17355134947275797, 0.5950313572816803, 0.5939312690708811, 0.5761923888718616, 0.6201918952892752, 0.5478593212274048, 0.5994460739271814, 0.6342639299355378, 0.6007210702566655, 0.2968488692861697, 0.6612558676758653, 0.6800147353337855, 0.6915298038762716, 0.6097054658113198, 0.6708792188355606, 0.6089072682188489, 0.7185419955163549, 0.6951494329481007, 0.7098934403987478, 0.18051103261246737, 0.13933833157206676, 0.15798361238235303, 0.11099926420409079, 0.45936382583254476, 0.46664800772907566, 0.25138457570145833, 0.1880689766749415, 0.1386797748130384, 0.48018993993910075, 0.2004579738840616, 0.4654229596225242, 0.49174212177130594, 0.4478002670407243, 0.4986879462584256, 0.46060066204060335, 0.4632173413798296, 0.35251089980295736, 0.8099828209786407, 0.7904389900778492, 0.7803284301855313, 0.816214727753004, 0.7917274042565042, 0.7938398862312623, 0.7898388183526559, 0.804659785489521, 0.7932147319397944, 0.09323749267734327, 0.11516951610344661, 0.1129768148486362, 0.11433297673580944, 0.1068310181819494, 0.11446523036660006, 0.11883225967725597, 0.1095647859389215, 0.12578393609185257, 0.14507190473068876, 0.15156413369328292, 0.17171309415262825, 0.13799724804505298, 0.1438604729136045, 0.13990706047167423, 0.16685364886625886, 0.12966824217026174, 0.13418394292670532, 0.5131790968584165, 0.5266762159972573, 0.5583784166047695, 0.5415492382177977, 0.49872443012659173, 0.5281216924687973, 0.5586250035956951, 0.5494939676739646, 0.5529669174691929, 0.46754507789567146, 0.43072418462164597, 0.4082622798661678, 0.4162102833874629, 0.3971540270304915, 0.42707736832561893, 0.46863124051854654, 0.46999747673753123, 0.4095241597024222, 0.21868219234124908, 0.19817211868913687, 0.1964676942563035, 0.21652066826031746, 0.21468348199862308, 0.19977684027273013, 0.2111852078365527, 0.19825004968363524, 0.20571734453667379, 0.4582906703987083, 0.3503132440354749, 0.2324492057896006, 0.19580081819892947, 0.2864832760712209, 0.4888453127187057, 0.5212852608441749, 0.20477837937378407, 0.5286027682812661, 0.8414528673504694, 0.18293194516414446, 0.8345040661121197, 0.19624318378157468, 0.7280358612771477, 0.1677198707369384, 0.17995001039649394, 0.7114091045436799, 0.7730988794617948, 0.8559470004183005, 0.801237458719774, 0.20710515625443526, 0.20202653700538953, 0.16725954883430916, 0.1669247570039588, 0.6441182047209046, 0.3580053415085087, 0.20964489955604682, 0.19617566295061428, 0.18650429222910614, 0.1854530937788229, 0.21270019039177113, 0.19619744643146586, 0.18064436091863822, 0.19430323301876518, 0.17846071666018037, 0.17742549705140154, 0.10531295005208863, 0.08551340634849025, 0.07861349094138115, 0.08105385136331589, 0.0896299121250348, 0.08294884772732714, 0.08909641989158101, 0.08853123975200272, 0.08670776134550506]}, "mutation_prompt": null}
{"id": "692745f9-aa4f-411d-a6f1-1580daae46df", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight bias towards the global best\n                mutant = np.clip(a + self.F * (b - c) + 0.1 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.8 + 0.2 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Adaptive Randomized Local Search probability\n                if np.random.rand() < (0.1 + 0.1 * (evaluations / self.budget)):\n                    trial = trial + np.random.normal(0, 0.1, self.dim)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Introduce dynamic adjustment of the mutation factor to enhance exploration capabilities.", "configspace": "", "generation": 9, "fitness": 0.4238388884475939, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.27.", "error": "", "parent_id": "eaef83ed-00b1-4e3b-8d0f-3d5e79414f5f", "metadata": {"aucs": [0.8483453150136757, 0.8288503930238745, 0.8339518559959039, 0.8414265010480859, 0.8396923105138612, 0.8443207623506158, 0.8458620457177101, 0.8327809517736966, 0.8304246341390842, 0.6968358078626797, 0.7227845195334748, 0.7150290948804567, 0.7027786303280712, 0.711369300917831, 0.723390584158376, 0.7029360019736335, 0.6985974903601645, 0.7269424672163268, 0.12136615279963348, 0.1322271048014092, 0.11525530603738576, 0.11450514753677632, 0.13372724942044567, 0.11629259674893078, 0.22847553718024016, 0.15981693457902035, 0.13163851081531375, 0.10359174893206435, 0.1093290283565832, 0.12449446774903372, 0.1107122469097469, 0.11605799344773582, 0.11047263633410442, 0.11093770800767233, 0.11500459771632265, 0.1053165783218365, 0.9044036426461484, 0.9125322650410819, 0.9296929258909171, 0.910282911132253, 0.912814927245991, 0.9459620399166534, 0.8865183460886432, 0.8859355587384062, 0.8994466903172826, 0.5919367078042113, 0.5866929929980591, 0.5810826393419335, 0.6216885896838381, 0.5835205896014892, 0.6111940128665965, 0.5941741252862669, 0.6120807961343271, 0.6118316737987344, 0.8353418470223437, 0.7953812258500864, 0.7852852382995154, 0.8543804302175759, 0.8054035126266198, 0.8672115106608322, 0.8291132555917093, 0.8411090317060794, 0.826871814632075, 0.35381925625002775, 0.2905919571461274, 0.4882712800274861, 0.21606527949114884, 0.5949422787821079, 0.20171458595024505, 0.47199407074474875, 0.23434390657844772, 0.17926031644359752, 0.21161665060784118, 0.20757766579542702, 0.24375119067389373, 0.22361519633337223, 0.29122939537288706, 0.46568781576312746, 0.1790828234990589, 0.20235008868419269, 0.25054096858413344, 0.49439065695262785, 0.4818614673228925, 0.5601619309613762, 0.5535777744932108, 0.5225611667599199, 0.5116749762055661, 0.5525727058367077, 0.551895828912905, 0.5548902649228613, 0.6563168972753741, 0.6195377237033609, 0.6448385220049195, 0.6430231105275448, 0.39691061561657603, 0.6348766477769863, 0.6831064426057161, 0.6650180024617796, 0.6479976355299422, 0.18386916214413573, 0.10220777720177698, 0.14011447184977477, 0.42241099933846404, 0.422931680159236, 0.39494522644724517, 0.2715562888793135, 0.2125038745676453, 0.2756616733491374, 0.44411588304393845, 0.39150987792779623, 0.3846651671600321, 0.44968391974522304, 0.41440222914587355, 0.44819497883612036, 0.4328179674713233, 0.4067439442257256, 0.43112616315392616, 0.7752520303371102, 0.7717492664558464, 0.7927100743070089, 0.7892926648067097, 0.7809589042431841, 0.7544012944617874, 0.7674846738088256, 0.7801271287243734, 0.7729594132650002, 0.12929420947005088, 0.1124512375599881, 0.12203259464364857, 0.10690409429700554, 0.09695899359566962, 0.08988257760252782, 0.10108689504065438, 0.1037992797531726, 0.1278491867917777, 0.17786565814715483, 0.16934646922667285, 0.1658650040752323, 0.1363547262592829, 0.13610066795557052, 0.12413864565093025, 0.13061515080253372, 0.13026160107438067, 0.14840320752524527, 0.49379962615450945, 0.467815021059688, 0.4642729886393495, 0.5170596841324833, 0.46338856470197776, 0.4867502560248944, 0.5209953570346109, 0.483161855225292, 0.5278593819235822, 0.3942333561420891, 0.3789844947930525, 0.3763558867596287, 0.41827431889924604, 0.40175565980053696, 0.37442102773195696, 0.4276676755054104, 0.41515982387671724, 0.3983347121801759, 0.198247082707236, 0.19106415298253854, 0.2059613853125477, 0.220025548690166, 0.22723996861037543, 0.20718361866642743, 0.20134887366233967, 0.20183517675504015, 0.18582118734046016, 0.2364141975062214, 0.18612545613104992, 0.20520774782639029, 0.30794298604299564, 0.22239772931956292, 0.21798318271974715, 0.48256972159119627, 0.5341626236392876, 0.215044330059883, 0.1813538666762886, 0.16661661379803683, 0.7988751657351203, 0.8650465683051463, 0.7960229447042805, 0.8304268116975067, 0.1828173124912218, 0.1774351211582652, 0.7804367799972936, 0.8156398990555795, 0.16784241316931803, 0.20492408716663013, 0.7206651911892612, 0.2027227156912662, 0.1659745793669306, 0.16553681715524748, 0.8124201239477525, 0.202252871140985, 0.20045790579727452, 0.17408039081276805, 0.1803415722333872, 0.17937985065486994, 0.18795897965651798, 0.1804593047963441, 0.1809758741933909, 0.1964239311530177, 0.17383791729245912, 0.07853979546140089, 0.091168520255275, 0.0918910969808101, 0.09835302881464303, 0.08845963792536637, 0.08536861423635123, 0.07874367037713148, 0.07955415186009474, 0.0766275748167714]}, "mutation_prompt": null}
{"id": "35e4de10-ba4a-444f-8957-288d4c9d63ec", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutant = np.clip(a + self.F * (b - c) + 0.15 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.8 + 0.2 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Adaptive Randomized Local Search probability\n                if np.random.rand() < (0.1 + 0.1 * (evaluations / self.budget)):\n                    trial = trial + np.random.normal(0, 0.1, self.dim)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Slightly increase the bias towards the global best in the mutation strategy to enhance convergence speed.", "configspace": "", "generation": 10, "fitness": 0.4473829808608795, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.45 with standard deviation 0.28.", "error": "", "parent_id": "692745f9-aa4f-411d-a6f1-1580daae46df", "metadata": {"aucs": [0.8547502907148743, 0.8480800324560145, 0.8618790930797776, 0.854427966741209, 0.8679143952835982, 0.8479363303095255, 0.8573661581221675, 0.8564304539541403, 0.8582573687817361, 0.7314708537507367, 0.7488436271416357, 0.7479871937259785, 0.6958959681574739, 0.7532203042509308, 0.718934636222796, 0.7319556017040789, 0.7448775594045638, 0.7369307903736286, 0.1548267314244135, 0.13443935971188514, 0.13108361754852982, 0.1271767778293994, 0.12724826475575668, 0.12259406563874653, 0.14171937851034122, 0.11917839144979625, 0.12583255120709746, 0.1093137914297464, 0.12209992763925148, 0.11939596732920199, 0.12498339358100696, 0.12128268794261798, 0.09765254421712521, 0.11659160414907788, 0.11519647992348359, 0.12547295678639203, 0.8885562274593217, 0.877615561197983, 0.9038026326591179, 0.8873174509498535, 0.8865274148045661, 0.9329862953985782, 0.8877176098764209, 0.8905413081906415, 0.9563118645523758, 0.6898799648354383, 0.6272966289263556, 0.6202945262994912, 0.6096552147895464, 0.6574277074638912, 0.6531761762455018, 0.6569195749904582, 0.6330979528722482, 0.6395897020266879, 0.8503302294906255, 0.8667643166431903, 0.8417586566495401, 0.8555533431148662, 0.8466582415529302, 0.8675707772441421, 0.8519609968949479, 0.8618316032977904, 0.8520497895884229, 0.2117825580011612, 0.27364333564432086, 0.12978926382713396, 0.18481043046819534, 0.13098626791230927, 0.21858569785300175, 0.15906720352503112, 0.2431690341764522, 0.58810203349743, 0.20596260140979905, 0.37445213868338045, 0.4671928347606451, 0.19913972869853136, 0.28226133872877757, 0.1972097728638268, 0.2704863910774997, 0.25056515114183, 0.24652019224198762, 0.5925010859896997, 0.5682934157529251, 0.6050916128276884, 0.5639909180255284, 0.5719657128249684, 0.5708504751083902, 0.5579806021886207, 0.5966763904742195, 0.5581125042364121, 0.662812535096816, 0.6835084044203095, 0.6847983568147749, 0.6770982497032667, 0.7057710313311001, 0.6732904041506833, 0.7134742726010714, 0.6881847353496666, 0.6895826808675862, 0.16529173980683776, 0.06910187896611497, 0.145089463527579, 0.4176011866961239, 0.24885353865126958, 0.26666895191437934, 0.1540933965792638, 0.29196529643946, 0.2198289413839869, 0.45100863147054904, 0.43888958250249777, 0.45466765990128877, 0.5193949558028097, 0.47970369363760845, 0.4885688517788519, 0.48412429353597874, 0.4527604114331023, 0.4711122367803612, 0.806169313972299, 0.7900772615975424, 0.8040294390773609, 0.7960621192003813, 0.7844754876431581, 0.7849364773298038, 0.8134496864432902, 0.8088058584635314, 0.7875932322120243, 0.1339729879665229, 0.10377939156175275, 0.10387985118385856, 0.12867114535866253, 0.12249686371920687, 0.10675007063032393, 0.11863916631460236, 0.1217165272553804, 0.14145253054689277, 0.11793132988827071, 0.14965202951996726, 0.2944796760265165, 0.1540374296085949, 0.12397241507791945, 0.15249136891674042, 0.14021217579463463, 0.15184059534739558, 0.13213937718296798, 0.5465485394372025, 0.4918538760676483, 0.5368794870471072, 0.5611352156473913, 0.5184069475686661, 0.540293260827845, 0.5667613854981703, 0.5654900516416825, 0.5613149907692171, 0.45456033027616627, 0.43969113786418634, 0.424101213652067, 0.423667946270036, 0.4029763833081855, 0.4382664143152071, 0.4457547405441119, 0.44548757430545727, 0.4577506395607097, 0.2389855475749848, 0.20311967841057443, 0.19157702489938777, 0.20239755261103753, 0.23189882301311915, 0.20616297175692344, 0.2122721897966009, 0.2028389491316157, 0.23313781946690504, 0.2271517017727943, 0.3449190491916927, 0.18692882002697864, 0.5202790358467545, 0.2319105286126275, 0.4735885063622156, 0.3048882187343964, 0.6049115378221737, 0.39867529081245245, 0.820909219838192, 0.8060061403653526, 0.8171299802829219, 0.7926980510902284, 0.8440070368342185, 0.7912568549770659, 0.1680330076200739, 0.7873047045178438, 0.7970141270941982, 0.8617573982244181, 0.20567324466563952, 0.1261062385761217, 0.20763323362448782, 0.16620837628698648, 0.1656926833563115, 0.16715996424342683, 0.8150426018447804, 0.7263157409364782, 0.1851456170276281, 0.18460965028258025, 0.21128732731770383, 0.193511634674851, 0.18989003494777035, 0.18226775345054425, 0.19293096323931713, 0.19516005246122192, 0.18118788707760658, 0.09218987119703137, 0.0881521985659085, 0.08008857530066993, 0.08776677592683901, 0.08153606741669805, 0.08275707673148969, 0.08074372664063634, 0.09169575190302548, 0.09468415277905173]}, "mutation_prompt": null}
{"id": "eeddf90c-ffdd-4ce0-bfce-1958f97141f0", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutant = np.clip(a + self.F * (b - c) + 0.20 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.8 + 0.2 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Adaptive Randomized Local Search probability\n                if np.random.rand() < (0.1 + 0.1 * (evaluations / self.budget)):\n                    trial = trial + np.random.normal(0, 0.1, self.dim)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Slightly increase the bias towards the global best in the mutation strategy to improve exploitation capabilities.", "configspace": "", "generation": 11, "fitness": 0.4583563968046615, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.29.", "error": "", "parent_id": "35e4de10-ba4a-444f-8957-288d4c9d63ec", "metadata": {"aucs": [0.873628753058243, 0.8753079704293911, 0.8792811546514238, 0.876010596278052, 0.878661733166416, 0.8742962180110199, 0.8781986441792138, 0.883384963454587, 0.8660031709688785, 0.7591089458005077, 0.7660265490778179, 0.7547254489673613, 0.7693236250715356, 0.7654972436884259, 0.751533014038579, 0.7547071434848754, 0.7689356556912492, 0.7709614363795695, 0.14976049596618524, 0.15338152835409424, 0.32741991709371787, 0.12225679311394944, 0.24644618625565007, 0.10936541087071205, 0.12592636735207596, 0.22322390178556029, 0.1416384996945952, 0.11539396571657212, 0.1251735592350287, 0.13338879728508257, 0.12029946800177893, 0.10398181138350615, 0.10449253600228292, 0.12930046688694796, 0.12221656730351549, 0.12561967614722525, 0.9196386209963238, 0.9477765028760596, 0.8926860849798391, 0.8857461514273111, 0.9085429887826099, 0.9448469955409426, 0.8771057411554753, 0.9401605060698557, 0.8764409468359858, 0.6398450083220211, 0.6524580046314887, 0.6600549065860628, 0.6899339507031771, 0.6510627189189605, 0.6650264134200442, 0.7098522608671172, 0.669120933551651, 0.6929641055816838, 0.9143074156053291, 0.881796816102927, 0.8667733050597246, 0.8893722316981706, 0.9028349281170343, 0.8816509086272273, 0.857559175583393, 0.8803579946966645, 0.8655987485763756, 0.5454713584490525, 0.21474440375301462, 0.35944346021455453, 0.1970230971238579, 0.4217659031743459, 0.4457953541062193, 0.31376762586203755, 0.29252189638433235, 0.31682285413941913, 0.3404039697765827, 0.26557306965597105, 0.19659509818449583, 0.1861156235685748, 0.29058397504411393, 0.23629820438438176, 0.18136320803048833, 0.19669520489455794, 0.21444461423226235, 0.6622907136105867, 0.6302780420819756, 0.6449471253320465, 0.5608762402796359, 0.6019500581843842, 0.5206242341741218, 0.5276415650146449, 0.5941176120759744, 0.6476838198883574, 0.7247457552350541, 0.7287255023757863, 0.7081641516223471, 0.7340491467951431, 0.6749313116126449, 0.7020793383845816, 0.7483754808553053, 0.7378211505349186, 0.7261854381006511, 0.25862844544015495, 0.14483571502549386, 0.29461486227183664, 0.4318644194571911, 0.5313846113595151, 0.5331475674222284, 0.31755367192114814, 0.23949900929327805, 0.150273171791811, 0.5155818340321268, 0.49105062726230364, 0.5252929926022903, 0.554185493346215, 0.5266706176721496, 0.5420678666330639, 0.5294977261229861, 0.5156792945185646, 0.5124831623266708, 0.8327573695950974, 0.8239074146107133, 0.8370630639989016, 0.815887148237074, 0.8158020848352463, 0.8128361624029469, 0.8159579987814258, 0.8005510111731738, 0.8170576480512975, 0.11109693686143762, 0.10635706607806839, 0.11554413618688597, 0.09986902201672998, 0.1310620076042336, 0.11594272354858526, 0.10523131268859087, 0.1414330651317619, 0.10937089298705649, 0.1685461823284733, 0.14674277103278477, 0.3568714652762549, 0.151104738359367, 0.1608131731288278, 0.13433385921397623, 0.1545743133074715, 0.23472967960076807, 0.1317759893354048, 0.5729973888296069, 0.6083405623296052, 0.625882500192777, 0.588517440780477, 0.578776120869049, 0.5915170668201568, 0.6251822711877044, 0.628195673756438, 0.6001420144590259, 0.4963299147986886, 0.4597173964733636, 0.4684366683610306, 0.433967742315288, 0.4420556768392987, 0.4804628242829705, 0.5024460069751512, 0.45429368238465306, 0.5224278962823714, 0.2181432182286397, 0.1993724048544283, 0.20340712583158815, 0.22258751428902945, 0.21504681086243593, 0.20653122297411952, 0.2162776586866797, 0.21280629017145214, 0.2064250927338569, 0.40376609053910884, 0.5623467401057317, 0.22617825557818105, 0.22990164952795367, 0.23331043402183416, 0.1997071201239936, 0.5861971856446286, 0.22668858191825336, 0.5638219123302572, 0.1638546999892091, 0.18459300859754202, 0.15195840931507643, 0.8922754392041546, 0.17234897945472005, 0.8746069026332405, 0.8399749238944891, 0.15537476645904003, 0.19159500915878314, 0.9101370057424042, 0.21048240036652532, 0.2093231865845392, 0.8158617612306983, 0.166273763434027, 0.16554510429794722, 0.16618841880211366, 0.8314683353533697, 0.2111697797574429, 0.18301839698009525, 0.1774977138774415, 0.19739264636623433, 0.20438368390557038, 0.20056231213041342, 0.1890843794006667, 0.19212744999112308, 0.2023812569376492, 0.18699234131719167, 0.09265043170438292, 0.08074770688433419, 0.09172490834570723, 0.08495175018486811, 0.08897542201624287, 0.10046504294167247, 0.08728779340355464, 0.09382742136344002, 0.08483648925406229]}, "mutation_prompt": null}
{"id": "a8788952-0a10-480c-97a0-0dc5669d1b0f", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutant = np.clip(a + self.F * (b - c) + 0.20 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.8 + 0.2 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Adaptive Randomized Local Search probability\n                if np.random.rand() < (0.1 + 0.1 * (evaluations / self.budget) * (1 + 0.05 * np.random.rand())):  # Introduced slight stochastic variation\n                    trial = trial + np.random.normal(0, 0.1, self.dim)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Introduce slight stochastic variation in the adaptive random local search probability to enhance exploration.", "configspace": "", "generation": 12, "fitness": 0.46429274125574976, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.29.", "error": "", "parent_id": "eeddf90c-ffdd-4ce0-bfce-1958f97141f0", "metadata": {"aucs": [0.8633027837549164, 0.8614400866910012, 0.8762736385017391, 0.8801397885508526, 0.8770556052480953, 0.8704334545459395, 0.869836919918419, 0.8755528887284387, 0.8698714013598535, 0.7712780487502194, 0.7682863881359061, 0.7698615670917883, 0.7651044690903952, 0.7773277159451866, 0.7548839976143382, 0.7763468629554111, 0.7649540211182188, 0.6547981593874107, 0.14266982314855614, 0.13886387076959394, 0.4923883952693511, 0.1257785511804712, 0.12510117253590802, 0.317826340257082, 0.1395220651003496, 0.10509302077721061, 0.13622320347501138, 0.12469401856223394, 0.10356317676727611, 0.116331663760457, 0.11539770999002763, 0.10980539232366371, 0.1107120426653484, 0.11042182254224042, 0.10683331434809573, 0.1188339335694556, 0.9193696464612129, 0.9276541066217384, 0.8729108612809556, 0.9275792047744287, 0.895865569818328, 0.9190486095179891, 0.935790750598359, 0.9108658777456534, 0.9172517157645647, 0.7056399559196076, 0.6257923950436501, 0.6981276601886942, 0.6649441067773597, 0.697696690650065, 0.7078726688841087, 0.7221346156726152, 0.7103650045123489, 0.6920463514744912, 0.8780442175520763, 0.8853411262721727, 0.8708097133859692, 0.8591284000692044, 0.8861879617473204, 0.8583550758118551, 0.8604798419098196, 0.8641937322307224, 0.8469283852139216, 0.2379551020364563, 0.22829275711197894, 0.5210087571408215, 0.2031335444275314, 0.4620520667714846, 0.41104929469612905, 0.2449580039246646, 0.2614115559445146, 0.21719408454241407, 0.19222401297686298, 0.22884890091119947, 0.30228834477427957, 0.47947646842557257, 0.19785103667663184, 0.29470517319993017, 0.2508386780214156, 0.20700337270236402, 0.1968134651102179, 0.6013029313321783, 0.6157572766507183, 0.6309166266650645, 0.6494321727801751, 0.6427470339894599, 0.5259741665947752, 0.6530251534988617, 0.5863879050822918, 0.6446174823354724, 0.7070740972731966, 0.7242103743421523, 0.6547365344012319, 0.7056305375383476, 0.5710650203362191, 0.6771670415848343, 0.7360805848927215, 0.7041667035825819, 0.7329871512444379, 0.20789525478088278, 0.14087766582224592, 0.10199968389110325, 0.5632661627342783, 0.5080968121230467, 0.27878655494289006, 0.18210836139001363, 0.18539680188993712, 0.11294500748137848, 0.5246877467904885, 0.49633260283274017, 0.4620956321115557, 0.5468798929747367, 0.534483171817778, 0.5079784167681496, 0.5195225542987177, 0.49791001724673734, 0.34790995602225105, 0.8138207563683229, 0.8056711203495719, 0.752764536184233, 0.8316006732134783, 0.8051759728094394, 0.7983681460260306, 0.812058932538567, 0.8156256003369745, 0.8258220322902176, 0.11499060959446994, 0.11556106255864196, 0.11645846295158535, 0.12166395981724742, 0.11433386595632988, 0.11594233768678319, 0.11803696663560226, 0.10139444350147164, 0.10291224641262853, 0.14163217012615492, 0.15599392848767535, 0.36490014846990926, 0.16031106958845853, 0.12705258181383983, 0.1322260105675248, 0.14580086344407994, 0.1233096242841879, 0.1516163481320154, 0.5525875657056714, 0.5473258588124054, 0.570445715998726, 0.5414220435611641, 0.6332765284354995, 0.5537912378111125, 0.6424954035051444, 0.6199916972315493, 0.5617252107800852, 0.492979131780267, 0.4376058400651587, 0.45531336507246833, 0.4437209417235657, 0.4074599144264264, 0.4763166798222823, 0.4768785123293906, 0.48785766355920746, 0.47366858453742633, 0.22367616072494345, 0.21764882223326754, 0.20418143797966726, 0.210385182917048, 0.22180206827739335, 0.21331902231063482, 0.22455225039865956, 0.22199243712472916, 0.22135366513619248, 0.5714736209132161, 0.20004242649862813, 0.45380993425687355, 0.22525672938077534, 0.5899750134222925, 0.22708212832066, 0.4001448648565814, 0.5344789504348989, 0.21042477568126172, 0.17644854742178517, 0.18517682130464252, 0.18288769279890282, 0.8898980634881274, 0.8662913104696082, 0.197932559202727, 0.8145526355580781, 0.16379238950591624, 0.8387816790886455, 0.8536745153961209, 0.7815757542688561, 0.864829095828936, 0.49604837651568345, 0.732303859672139, 0.8163227583873498, 0.7344172540698835, 0.20775444392823172, 0.20780285537773213, 0.178274957693892, 0.1816835691466019, 0.20038717710768905, 0.17316317181863616, 0.17736186759883454, 0.19438961524842435, 0.21729251788719195, 0.17777781719257946, 0.17091965490145444, 0.0907627605402469, 0.09295068149126395, 0.0927406595478456, 0.08300120010198642, 0.09705940872868124, 0.08737999415864828, 0.08905124088089011, 0.08515246791565101, 0.08909961105954112]}, "mutation_prompt": null}
{"id": "8796bbab-d799-4a38-9a33-799efbd2c2ba", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        self.momentum = np.zeros(dim)  # Initialize momentum term\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutant = np.clip(a + self.F * (b - c) + 0.20 * (self.best_solution - a) + 0.1 * self.momentum, \n                                 self.lower_bound, self.upper_bound)  # Added momentum influence\n                \n                # Dynamic crossover probability\n                self.CR = 0.8 + 0.2 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Adaptive Randomized Local Search probability\n                if np.random.rand() < (0.1 + 0.1 * (evaluations / self.budget) * (1 + 0.05 * np.random.rand())):\n                    trial = trial + np.random.normal(0, 0.1, self.dim)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    self.momentum = trial - population[i]  # Update momentum with successful movement\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Integrate a momentum term to enhance search efficiency by preserving beneficial trends in population movements.", "configspace": "", "generation": 13, "fitness": 0.4610270473430245, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.29.", "error": "", "parent_id": "a8788952-0a10-480c-97a0-0dc5669d1b0f", "metadata": {"aucs": [0.8606696131913016, 0.8675189737937189, 0.8764221845070231, 0.8807967944165228, 0.8793009928117007, 0.8768177076900336, 0.8739382353523621, 0.8842300791096493, 0.8582073449497069, 0.7539800696466497, 0.7748293445032531, 0.7625543543730262, 0.7625715233942165, 0.7584906093387562, 0.7770347634562016, 0.74555968608349, 0.7494464004487851, 0.747331579719763, 0.15696095860178338, 0.12089379707267434, 0.12434957833535809, 0.14096169230772115, 0.1267317811916726, 0.12654649921284222, 0.11351548500669906, 0.14734505779140095, 0.12313428253221648, 0.11068839686696152, 0.11493826034926169, 0.12065324414750178, 0.12104540666772301, 0.12346443648417094, 0.10687750218256986, 0.12118858290404155, 0.10036183414051425, 0.13854002645842867, 0.9413153107570871, 0.9549064479924612, 0.9448625958673376, 0.9356200655800105, 0.9330305326049035, 0.9150089200761358, 0.9411109506737845, 0.9680314201217743, 0.9446384734451592, 0.714676123597751, 0.6839294882584056, 0.6991644369089143, 0.6704965706257605, 0.6991536403839679, 0.686799445528484, 0.7119703467170534, 0.7193965239221605, 0.6961539054411277, 0.8678070933669112, 0.8717147532092909, 0.868508767074227, 0.8747320520186146, 0.8922902661536098, 0.8700185673570334, 0.8667318710871669, 0.8530533924159278, 0.8528014163286964, 0.37770082686708994, 0.3208238771402001, 0.29176029020856886, 0.43002949043006333, 0.18261213325744263, 0.3566467160411254, 0.46044511272581634, 0.36561221259532306, 0.5149731397547259, 0.22547878120545284, 0.5417993673582022, 0.35071852398079595, 0.5677020436107257, 0.5347674828157516, 0.4487028992204035, 0.5645591292379195, 0.5484403924622245, 0.501006714648383, 0.6299389528414514, 0.6289183729775052, 0.6025988123177715, 0.6267994198945919, 0.6612722765662109, 0.5961668541187023, 0.6117771273609355, 0.5812151973065682, 0.6200724337940768, 0.7038762464244035, 0.7318520955190391, 0.698788639892084, 0.6960474962430476, 0.6748677366974616, 0.7007390344572169, 0.7276615832955586, 0.7131385803234973, 0.7215107954940615, 0.15560022152101005, 0.2584305594592742, 0.25234517976278104, 0.49353189083040205, 0.23338922432249976, 0.293346458462884, 0.12611688994155412, 0.21385575715110317, 0.19669921082991249, 0.5165259803917202, 0.46835802326900844, 0.4964603450419658, 0.5275090742286836, 0.5196465005822095, 0.4843918875247458, 0.4968860801883882, 0.5378751364453378, 0.47188769435777145, 0.8073101983773944, 0.817695765661935, 0.8255567901923737, 0.8130332473954475, 0.8011557115357749, 0.8192178112654631, 0.814803394480309, 0.7950565319932367, 0.8059433425952504, 0.10795682137064433, 0.12031987177318348, 0.09870057155189793, 0.10852597263491293, 0.11717146306263004, 0.1111217680064448, 0.11772251616340712, 0.09697031848037152, 0.10654492426018947, 0.17543855728288804, 0.13409993192326908, 0.14900533864253884, 0.14725028499839243, 0.15375903176489625, 0.1556460824285748, 0.15097169875658034, 0.18957748058554658, 0.16042677284610762, 0.5621115927623102, 0.5377747153757264, 0.5808240631755501, 0.5795352701002948, 0.5583580790551546, 0.6019542593670806, 0.6000031928463884, 0.5647508721242283, 0.5531315734847075, 0.42639497853464614, 0.45673446158750775, 0.4341503995464966, 0.43881026165996484, 0.448710122908235, 0.4310852852837541, 0.4662624218374405, 0.499843952471812, 0.45464039851024807, 0.2138562857583438, 0.2104437601117758, 0.21806696732056585, 0.2107469556174456, 0.20604743453057595, 0.20525044643070556, 0.2164704826723418, 0.21245323104819958, 0.2150980105277297, 0.22556084567894352, 0.2264295054782588, 0.20679882589695153, 0.20870224807102578, 0.2266634950398937, 0.20357748051282631, 0.40188546645687584, 0.5637317365419527, 0.23016844549011806, 0.14598807238947686, 0.1829531233063365, 0.8567200212805377, 0.8973791150154717, 0.8325274447102674, 0.1691457599419891, 0.780105942601897, 0.816335482066805, 0.20452830214088547, 0.8774677343118016, 0.47051541803389085, 0.8372592878040429, 0.21018600579225544, 0.11217945378510208, 0.16597740605240885, 0.2084600103691352, 0.15443056953782397, 0.15445578478735167, 0.177230945758041, 0.1752988316845292, 0.18644397355803122, 0.21919510450881874, 0.17718456255398085, 0.18557957399285374, 0.17825133156019657, 0.18730725172918372, 0.18368356761000493, 0.093076247529564, 0.09831894666645657, 0.0821801281220732, 0.08962843300207024, 0.08378807376524, 0.08463662422392504, 0.08181389612927692, 0.08319668958135429, 0.08070602639537516]}, "mutation_prompt": null}
{"id": "baa0783c-8c76-4fbd-ab69-b560940a27b9", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * (1 - evaluations / self.budget) * np.random.rand()  # Introduced self-adaptive mechanism\n                # Slight increase in the bias towards the global best\n                mutant = np.clip(a + self.F * (b - c) + 0.20 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.8 + 0.2 * (1 - evaluations / self.budget) * np.random.rand()  # Introduced self-adaptive mechanism\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Adaptive Randomized Local Search probability\n                if np.random.rand() < (0.1 + 0.1 * (evaluations / self.budget) * (1 + 0.05 * np.random.rand())):\n                    trial = trial + np.random.normal(0, 0.1, self.dim)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Introduce a self-adaptive mechanism for both the mutation factor and crossover probability to better balance exploration and exploitation.", "configspace": "", "generation": 14, "fitness": 0.4490245935770257, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.45 with standard deviation 0.29.", "error": "", "parent_id": "a8788952-0a10-480c-97a0-0dc5669d1b0f", "metadata": {"aucs": [0.8792386445568361, 0.8738607789121189, 0.8785734686167608, 0.8839129342971382, 0.882091068123872, 0.8783675977170903, 0.8782841907930761, 0.8774583686759728, 0.8648429901875098, 0.7817499776332353, 0.7777376645909424, 0.7733529015911939, 0.770798142852954, 0.7635883179133715, 0.7714200216812299, 0.777032831392809, 0.7779848291657216, 0.7736605139114894, 0.19451456469650563, 0.42061734012735974, 0.2021859486197568, 0.14339052195987811, 0.18752203145885793, 0.13756978369884032, 0.35790770589741805, 0.16684971911257584, 0.3418669364337469, 0.1260539974919831, 0.11357216402078285, 0.12467785482360527, 0.1399789640617326, 0.128561360762386, 0.1184177275276368, 0.12334900316642106, 0.13399855916126102, 0.15263750900192663, 0.9358980406682694, 0.9071651913811477, 0.8793003548528003, 0.9547770919685723, 0.8982078870834334, 0.8669652863144222, 0.9372469639990122, 0.9108152237277588, 0.9213923459427972, 0.54564342455238, 0.6476300672565077, 0.41139370063234537, 0.6850541228235534, 0.5748497996372928, 0.5192497477569009, 0.4410791831150511, 0.5936107642138532, 0.5224926423261338, 0.8648940814453803, 0.8794594977520199, 0.9041424509906236, 0.8828377794341916, 0.8841042632599818, 0.865569207771637, 0.8373350828655687, 0.867387653243187, 0.8705119342647913, 0.357604884745661, 0.13034136322492795, 0.2206126540183524, 0.15483867045571842, 0.19052286645321137, 0.16490405067153246, 0.19166102063130064, 0.1965532474342706, 0.20819097599790914, 0.22258521789756014, 0.253406188269343, 0.18196178955793219, 0.17332151280670804, 0.2468364957654252, 0.1733752040486194, 0.18992605361240678, 0.19932614722909947, 0.17042960704426569, 0.4712777093743018, 0.654286283315844, 0.21750720198057638, 0.6337171417760393, 0.5916044796486556, 0.4595330757068049, 0.6370529923131563, 0.5933735953375943, 0.595730661750439, 0.5803398389094492, 0.7098660229026758, 0.7234002854474176, 0.5389589066398599, 0.33862201528649594, 0.6936438459754549, 0.7086644948901366, 0.7286453475951846, 0.7277097413869504, 0.08206764314738635, 0.07112484193798718, 0.20796790727561465, 0.37837291978466925, 0.13517873744979936, 0.22350043496680705, 0.2327900705735546, 0.29891687101984243, 0.1037357122771293, 0.47121404790251253, 0.4226922059947543, 0.36752474203543173, 0.38670355507483023, 0.5203831923020275, 0.4541997385436445, 0.4586293081376124, 0.4147481118574625, 0.3718861764541833, 0.8172993410145185, 0.8130291808016612, 0.8289150340562649, 0.6848096405241405, 0.8129611173331173, 0.8279654240717107, 0.7757164694154817, 0.8083993541529222, 0.777618988455341, 0.1063932264040921, 0.1094198499255219, 0.1261355769844844, 0.13703275697845763, 0.1468429638310339, 0.1166915831230243, 0.11487537348908095, 0.13398433336081217, 0.10441324378528394, 0.13183553193192843, 0.1647986482931112, 0.13022428976442824, 0.14853765996605894, 0.15120802813451095, 0.13734931198361022, 0.14087674109096227, 0.13913445334832564, 0.24867995275179577, 0.6220526818067855, 0.5887196394400673, 0.6187281771062467, 0.6350925840188795, 0.6129155598576529, 0.6449145532198135, 0.6726099742147875, 0.5494780877809583, 0.6757605738266068, 0.4017600147578583, 0.4715448586278206, 0.4198458136691815, 0.4416282729121149, 0.5036570389598835, 0.44803172657945156, 0.5410084900412873, 0.5436072750535104, 0.49814137954928805, 0.20783270516037777, 0.19745215301062846, 0.22464955683258492, 0.21004292297283045, 0.24426336625246092, 0.2122589122548295, 0.20958737238498315, 0.21317668108915355, 0.2311230408914785, 0.21118760235661815, 0.23357716179229515, 0.6770218224445257, 0.21438723599453724, 0.68948295424567, 0.2070510853631219, 0.1823673847150742, 0.6782423539806146, 0.6423148566317922, 0.18276090836803915, 0.18523443804243234, 0.8185861834887765, 0.8850191636175845, 0.1982167130310084, 0.19692164208207552, 0.819447342370842, 0.7650350946580756, 0.7760051539154639, 0.8571930624510539, 0.20847227887028708, 0.8626732364124465, 0.8284088212493467, 0.6178320260494639, 0.1680079354909778, 0.7704773899486573, 0.779043018412366, 0.355229384540542, 0.19027144248219885, 0.17772347777145003, 0.21212779924925063, 0.1792785027079552, 0.1702382060009512, 0.18866450878748753, 0.18530994766604292, 0.18120539186477413, 0.1862886351070654, 0.0916132255181723, 0.08741964998544549, 0.09257070818104296, 0.08921897309204596, 0.08302141319565637, 0.09223328932946695, 0.09410488626879687, 0.08670637497971856, 0.09747951193100457]}, "mutation_prompt": null}
{"id": "de25144e-d83e-41e3-be57-1dd48471c1c7", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutant = np.clip(a + self.F * (b - c) + 0.20 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.8 + 0.2 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Adaptive Randomized Local Search with adaptive step size\n                if np.random.rand() < (0.1 + 0.1 * (evaluations / self.budget) * (1 + 0.05 * np.random.rand())):  \n                    step_size = 0.05 + 0.05 * (1 - evaluations / self.budget)  # Adaptive step size\n                    trial = trial + np.random.normal(0, step_size, self.dim)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Introduce adaptive step size in local search to improve convergence precision and balance exploration-exploitation.", "configspace": "", "generation": 15, "fitness": 0.458984008980007, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.29.", "error": "", "parent_id": "a8788952-0a10-480c-97a0-0dc5669d1b0f", "metadata": {"aucs": [0.8702845883678402, 0.8645801726403428, 0.8818113476631685, 0.8814675051790102, 0.8816623921800425, 0.8673205971772739, 0.8772723415167654, 0.8762724484948946, 0.8684984031994856, 0.763959249714534, 0.7704677459296712, 0.7704081718190543, 0.7491284510297955, 0.7517507588568508, 0.7501280406708599, 0.7739378522761111, 0.7712232571990253, 0.7353507775874715, 0.14062927383297974, 0.13302513473371658, 0.1432999649741702, 0.11337263106834083, 0.11892409638099322, 0.13821443881119544, 0.11558565133764076, 0.11608825042856041, 0.12675440593955412, 0.11769055972544917, 0.10852433672577189, 0.13433721947366062, 0.13176773189271718, 0.11049083473075283, 0.139009475303155, 0.10094438558513597, 0.12411516591435334, 0.12583879862037506, 0.9181573152734936, 0.9275969235239241, 0.8685871180900614, 0.9215126925406766, 0.8989539318083254, 0.9195655997981542, 0.9368657886240721, 0.8944019183561249, 0.9171267418934729, 0.6821037474600744, 0.6711254492867311, 0.673421032949944, 0.6812332355836086, 0.7087773710393728, 0.6877685832124485, 0.6387354042033213, 0.7008716355214047, 0.6849450438048256, 0.8473575522805598, 0.8867273463908063, 0.8485103357334167, 0.8532191073145118, 0.869647805004518, 0.8772752024708687, 0.8842520576215801, 0.8553906615963333, 0.8528481266381422, 0.6893165796268272, 0.2102623144204766, 0.5204903646374734, 0.5724913584462743, 0.31217014123357223, 0.1708205579602603, 0.33940902944163986, 0.30099739052353114, 0.23877186887673874, 0.190041026736819, 0.20556313360280354, 0.16768136568819014, 0.2566395419968869, 0.1889723329785279, 0.19437767074445966, 0.2219693572308723, 0.30600398649983673, 0.2300397253446954, 0.6250624115585859, 0.6201179351437648, 0.21142491897896898, 0.617485877548686, 0.6506886740799209, 0.6286098886791771, 0.6366655638950147, 0.25314543252534594, 0.6167640521637413, 0.6830955006915269, 0.7175480298413943, 0.6337545887000487, 0.7183471137229256, 0.6903627373167506, 0.7065265260706763, 0.7397718310688126, 0.7334863101161009, 0.7352258328376524, 0.32836038452038696, 0.189773791838455, 0.21384442831757333, 0.3602243907885916, 0.3336566445633956, 0.5116294753622712, 0.12702538141500574, 0.176183260060773, 0.11307568311255778, 0.3378779441327432, 0.5313772255021965, 0.4795844689299099, 0.5489443925601956, 0.5054177084737068, 0.5366983774878468, 0.49371233236851364, 0.5364186086518437, 0.39682311749969656, 0.7813955214878866, 0.7820274953365453, 0.8072593144239663, 0.8217935873505219, 0.8200096277071768, 0.8282834018373397, 0.8239761278192707, 0.8210286081736635, 0.8379198212349824, 0.11481973065879525, 0.22340545270193835, 0.12458579707016781, 0.11704959138315718, 0.09803339058586302, 0.09645597837890196, 0.11673120464908437, 0.10622616619175351, 0.10189416832958464, 0.14129332970914799, 0.16172444203402536, 0.1674675323387519, 0.22246576690346176, 0.12297775019527524, 0.13557643644478834, 0.16925937826759985, 0.13043660803044155, 0.12450243112357406, 0.5633017963309048, 0.5579640904874543, 0.5695720949407215, 0.5869852065401275, 0.6098463229538155, 0.5978281955060889, 0.6416653440023633, 0.6470590723711807, 0.5760166456988954, 0.5133256963847379, 0.4388395760450201, 0.492890301810167, 0.45616792090099134, 0.5300823157237986, 0.4909762792795659, 0.47362081981801574, 0.5234780845471227, 0.46765801325570355, 0.20622504989501345, 0.20880927369376323, 0.20132801923118626, 0.20217939546010644, 0.21862135876956568, 0.20958039691084984, 0.21977934553146916, 0.23270839745249172, 0.22353934699263767, 0.4844405191812712, 0.182809312200372, 0.5523992716676855, 0.44406092599696334, 0.485418836864724, 0.2131673137657064, 0.4679956926451364, 0.21783195584761972, 0.21404341520520698, 0.17644735871177908, 0.18518693655289054, 0.18288851632401593, 0.8837448999412767, 0.8659247843653455, 0.19798007420535568, 0.806381000988841, 0.1743216793989032, 0.8302654006341436, 0.8530906804053221, 0.7844365258046218, 0.8685869125260672, 0.20239483699844396, 0.7814925300173756, 0.6892116350499806, 0.7436975396846339, 0.2077496850435071, 0.20779598286603262, 0.1747497949910849, 0.18607822982752553, 0.20008494726225634, 0.20152336282053496, 0.1735502004752436, 0.19054396135350327, 0.18471295049915015, 0.18136004075690393, 0.19011456804046145, 0.08732902736552883, 0.08529169846890783, 0.08090309507780691, 0.09828473217070566, 0.09239716093892492, 0.07962453609464137, 0.08717647088620673, 0.09106791652133817, 0.08749923082001787]}, "mutation_prompt": null}
{"id": "b4a747a0-cc6e-4f19-9b49-1e3f2719f535", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutant = np.clip(a + self.F * (b - c) + 0.25 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Adaptive Randomized Local Search probability\n                if np.random.rand() < (0.1 + 0.1 * (evaluations / self.budget) * (1 + 0.05 * np.random.rand())):  # Introduced slight stochastic variation\n                    trial = trial + np.random.normal(0, 0.1, self.dim)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Refine the bias towards the global best and adjust crossover dynamics for enhanced convergence.", "configspace": "", "generation": 16, "fitness": 0.4783162052409383, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.30.", "error": "", "parent_id": "a8788952-0a10-480c-97a0-0dc5669d1b0f", "metadata": {"aucs": [0.8878202969751039, 0.8875370924163541, 0.8905458523648306, 0.8917368347230294, 0.8971449272253388, 0.898671058581318, 0.9030006412449263, 0.8880692835757827, 0.8965844896976065, 0.7853340758492984, 0.7889105509382031, 0.7964217724721372, 0.7914222567552436, 0.7942880579519006, 0.7378625894194057, 0.7433484930813228, 0.757057485352981, 0.7806070160069593, 0.1385111621828431, 0.15995827006242125, 0.14499361772746833, 0.12518926420771026, 0.14298406144689613, 0.13537033389456266, 0.1403186114000302, 0.13946363680531382, 0.1387045250898543, 0.11762390851944116, 0.11995852220050895, 0.11052496915555654, 0.12342201988596357, 0.11066784012768782, 0.0966112139760198, 0.12150266194722148, 0.11962958890737518, 0.12013013116396265, 0.9473541039068312, 0.9337318772876169, 0.8780623775137433, 0.8988071957182799, 0.8917985183891479, 0.9349056176628397, 0.9605791546769632, 0.8948529524486922, 0.9451601381045401, 0.7501841717190189, 0.7138396954491205, 0.7103085049224243, 0.7367079907569848, 0.7549998991007663, 0.7022111619308213, 0.7200916557060969, 0.6855056339271828, 0.685245313240794, 0.8967817249975226, 0.8941777587200257, 0.2258461870044588, 0.2791176917987497, 0.9024405320124042, 0.9090639171097349, 0.9025856566949287, 0.8893365987561931, 0.8970825165634337, 0.28351839405259294, 0.7779461032395838, 0.43111704850842314, 0.5108333190288185, 0.2242813683649847, 0.1322980551143863, 0.2106584261125377, 0.18676165087634566, 0.38772693561468285, 0.5434942189161485, 0.4772448451339564, 0.5391492290892043, 0.19697299718314343, 0.26664154130957674, 0.1400764313622792, 0.2420710825742659, 0.6841409416569261, 0.2515421980674363, 0.6789969976912059, 0.7105359593794448, 0.6660939765797844, 0.7060013887342159, 0.6940458282450984, 0.5902143127702866, 0.7371302300805577, 0.3167131894942359, 0.7039358242725606, 0.7558963021376706, 0.7133159782688836, 0.7813846728775427, 0.778185708090422, 0.7550588877051841, 0.7378490360085528, 0.7991042043336866, 0.7907891799120355, 0.7834187892214559, 0.11080948518063582, 0.10425040374855321, 0.09599554531620669, 0.42911339187800657, 0.175690930413412, 0.41560595725501603, 0.1675507455967229, 0.23465387069860522, 0.4003594648418055, 0.6393997947256803, 0.6079260437355616, 0.6252141782844675, 0.23007514923583816, 0.6341418363501439, 0.6177112204752768, 0.6058255054147813, 0.6005472160949838, 0.6003021387968585, 0.8583423517735544, 0.8417418820197213, 0.8535315399057419, 0.8539738231430161, 0.8328511428999796, 0.853095126014562, 0.8430835792526006, 0.8400823422760615, 0.83494545010307, 0.1241651762330992, 0.1315064513471771, 0.12115656065527258, 0.14102666243452022, 0.11475094524300677, 0.13029217038232743, 0.15066305791503365, 0.12273159857468485, 0.1385018842307143, 0.19726446436328882, 0.13909928824344553, 0.16375262603810858, 0.15414198553687275, 0.14835376371918352, 0.1331698445965096, 0.1537573285120386, 0.15112671777638065, 0.2224247443463604, 0.5825631270989279, 0.6368684480171075, 0.6251236384305217, 0.6728765391064466, 0.6505321849675663, 0.6512217966089406, 0.6853800178725806, 0.6751447525469354, 0.6823588048758442, 0.5367456346865349, 0.5645664823353975, 0.4942717705231623, 0.21677724656559372, 0.522913142153922, 0.5697137127801285, 0.5437925146184382, 0.5851251739126276, 0.5691130172493113, 0.20781902396378105, 0.23669565555830285, 0.21066559061092116, 0.24015074979282425, 0.2244807902555529, 0.2299222080753791, 0.20765919475232641, 0.21219830281709473, 0.19755648115364222, 0.6780825059124714, 0.41785756934454776, 0.6116742254449332, 0.23339785659630696, 0.2190907270174176, 0.2049897486059955, 0.6052666643310041, 0.2330458929764606, 0.19889628695799133, 0.8448955925111447, 0.18459669486598052, 0.152115812985953, 0.9032548014459699, 0.8478660635175151, 0.19819557970602542, 0.14140864044257107, 0.8716550304806838, 0.9040437229030822, 0.8939464614439572, 0.7827989930227917, 0.20562701043044296, 0.8793451657337501, 0.20867118556945552, 0.881344503543241, 0.11274450616591225, 0.166543610581262, 0.20956804762520864, 0.18731955755789753, 0.1883924959044806, 0.22172304902202267, 0.18934998986946072, 0.17328958171734843, 0.16987609611800925, 0.20030971842811407, 0.18671341196282953, 0.19268171027369552, 0.08616871708831897, 0.08184177048647745, 0.08521842132600144, 0.09625784460458986, 0.07981573948991227, 0.08510728480136132, 0.08505545234367906, 0.09765297609545287, 0.09381131642223495]}, "mutation_prompt": null}
{"id": "3d5e150b-b90d-4f31-acf2-6a2da102caca", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.4 + 0.4 * np.random.rand()  # Changed from 0.3 to 0.4\n                # Slight increase in the bias towards the global best\n                mutant = np.clip(a + self.F * (b - c) + 0.25 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Adaptive Randomized Local Search probability\n                if np.random.rand() < (0.1 + 0.1 * (evaluations / self.budget) * (1 + 0.05 * np.random.rand())):  # Introduced slight stochastic variation\n                    trial = trial + np.random.normal(0, 0.1, self.dim)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n                else:\n                    # Competition mechanism\n                    if func(trial) < scores[np.random.randint(self.population_size)]:  # Added competition check\n                        population[i] = trial\n                        scores[i] = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Enhance mutation diversity and incorporate a competition mechanism to improve convergence.", "configspace": "", "generation": 17, "fitness": 0.32038560671667615, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.22.", "error": "", "parent_id": "b4a747a0-cc6e-4f19-9b49-1e3f2719f535", "metadata": {"aucs": [0.708387058439617, 0.7439987978300049, 0.7334426411993287, 0.7313028334264678, 0.7208663312613226, 0.7295092264849692, 0.7356156293075045, 0.7332944031840078, 0.7161162065136664, 0.4484353884349974, 0.46458905439217146, 0.4648996567808993, 0.46192314684717195, 0.4269587159584879, 0.46280456548401927, 0.42689595368393274, 0.46061564453647197, 0.45911019758345284, 0.10784989431630532, 0.08615452434162929, 0.09773946954219248, 0.12318048065648546, 0.10134203917555928, 0.11887177441912877, 0.1016756646306829, 0.10625618305229345, 0.09856313080037593, 0.08928459113913634, 0.09581655725705918, 0.09014366888863501, 0.0940928381049082, 0.09975665976498782, 0.09535080138807117, 0.09143754780836111, 0.09699186542843874, 0.09245170357994736, 0.8391218884843233, 0.8125717159188015, 0.8040396863531285, 0.7870927758116288, 0.7880017738944609, 0.8271780529127118, 0.9085070701065437, 0.8177704635004954, 0.8641271464505266, 0.3889824884258073, 0.3831036358525831, 0.380330588837999, 0.3954924364128354, 0.370028704487816, 0.38411526169261867, 0.4347495110168458, 0.40619169466610794, 0.4131891761270906, 0.6842427191757008, 0.6394790528628125, 0.6652944468710419, 0.7400670190374377, 0.7542222737465262, 0.7189587959830288, 0.7425369260036176, 0.6719347294182691, 0.6563726434881552, 0.24142268294357405, 0.21298055067824506, 0.23781720442331988, 0.3313817099863211, 0.25983459320696933, 0.24308971097800092, 0.18984468772223828, 0.2763665443991863, 0.2944620765646161, 0.24798185520354699, 0.16986848764948392, 0.25090124199197195, 0.26105977746213926, 0.2451726412303279, 0.271732261297568, 0.23593598557693019, 0.22364921459124953, 0.3173592661269987, 0.24208720327343258, 0.2319510032867912, 0.23444245656864837, 0.2624399082678579, 0.2501402514692185, 0.2101366795331664, 0.26334089486161893, 0.24526497437792483, 0.2267927649857434, 0.35395683084488494, 0.40003540355714107, 0.4015163754919605, 0.36986664159530047, 0.375638535649508, 0.43894459003237063, 0.37851342565497437, 0.37202550888974306, 0.38789983727193156, 0.11108176167540929, 0.11860598703730485, 0.139109217174347, 0.09785277857315522, 0.1709905899981291, 0.1062492566608444, 0.11521625438307814, 0.08584209283043509, 0.12200411656901311, 0.20712860285248447, 0.22070156800894047, 0.2103430034247442, 0.23319897182754035, 0.23356970606174188, 0.23414404642444764, 0.2159297973835712, 0.25304780135780347, 0.22134473536585386, 0.5708063068252758, 0.6204603163242113, 0.5909510654844153, 0.5876212874822747, 0.6157444222585671, 0.5529535296597828, 0.6103985742394571, 0.6090992333948334, 0.5687785669717028, 0.09420118407668376, 0.097673627165485, 0.09788478805277645, 0.08683161778316795, 0.09503661714443679, 0.0887757710611995, 0.08733975559503704, 0.09203089566202849, 0.12368295149897823, 0.1227324203962209, 0.12475370363781058, 0.1461674487688226, 0.15558673548473412, 0.13262602172020121, 0.17425535498278766, 0.1407782060181556, 0.12817629081069537, 0.14041520867970503, 0.36364495676497377, 0.34485516079189615, 0.3436064380609263, 0.32851385784777654, 0.3553010879585826, 0.3498533899995898, 0.3740404266261782, 0.37385130082126494, 0.3701137818257676, 0.26153646111361706, 0.26345914882555455, 0.2729711758047165, 0.2828520674478925, 0.26280120830999665, 0.2736532791260997, 0.2881148965156659, 0.2885400060885994, 0.2770953706436521, 0.20848618102922634, 0.1765402666309528, 0.188581987188297, 0.19378879916312652, 0.1754344267782959, 0.17837133213727607, 0.19353692302246472, 0.1928584882539307, 0.20521275205730372, 0.19056837960585704, 0.17550432727482745, 0.18498094567464363, 0.22672640748737038, 0.2014005875033038, 0.17966811232089241, 0.2100671544022562, 0.1776505208541097, 0.19449980223915786, 0.7703547916510984, 0.1819233823247407, 0.14502177812434314, 0.7225973566518115, 0.18814143994729715, 0.6728132645431761, 0.14048232409285333, 0.6881073389386306, 0.6666397459888311, 0.2012405768422102, 0.16717291392749956, 0.5979109132387448, 0.64247544284819, 0.20070876770295454, 0.6265641071148259, 0.16294327651067797, 0.20717411945138142, 0.3859304029851419, 0.18029398099400518, 0.18483349188196663, 0.16886514979196432, 0.18019093531044328, 0.18465653753064892, 0.1707966750739628, 0.16398809028460803, 0.16491190036553383, 0.2004921477074223, 0.08295072401753445, 0.07196579448782836, 0.07390404643055826, 0.07470680528895113, 0.08357093358865564, 0.09314172271955745, 0.07457067275382301, 0.0775442253097941, 0.07362037656953835]}, "mutation_prompt": null}
{"id": "8294543d-963b-4669-81f4-1686e90f9f9c", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.4 + 0.3 * np.random.rand()  # Adjusted range from 0.3-0.7 to 0.4-0.7\n                # Slight increase in the bias towards the global best\n                mutant = np.clip(a + self.F * (b - c) + 0.25 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Adaptive Randomized Local Search probability\n                if np.random.rand() < (0.1 + 0.1 * (evaluations / self.budget) * (1 + 0.05 * np.random.rand())):  # Introduced slight stochastic variation\n                    trial = trial + np.random.normal(0, 0.1, self.dim)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Slightly boost the exploration by adjusting the mutation factor range.", "configspace": "", "generation": 18, "fitness": 0.47772348515462565, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.29.", "error": "", "parent_id": "b4a747a0-cc6e-4f19-9b49-1e3f2719f535", "metadata": {"aucs": [0.8616404926911063, 0.8742035469209954, 0.8678114492679954, 0.8812712449096923, 0.8748604106472688, 0.8766185962887297, 0.8798490782342293, 0.8788264100996085, 0.8718737361899688, 0.7665383578261242, 0.7666397621128695, 0.7581432157812347, 0.763105416767229, 0.771720888478667, 0.7680068504734445, 0.7567838871668853, 0.765589060423536, 0.7603020973994497, 0.13496869270383305, 0.14450109770717046, 0.1281037839752598, 0.10049289170783016, 0.182688893315735, 0.12047216859468901, 0.13833782718878396, 0.1277142537260184, 0.12183464677443223, 0.11469225114558235, 0.12774061989744145, 0.10505571631838462, 0.11540519337675081, 0.10048581814092616, 0.11343336501180279, 0.11206449924570994, 0.11446414879869393, 0.11328399861476157, 0.9439602090433963, 0.9322363719377423, 0.9293944787816999, 0.9072096886425346, 0.9255799599819916, 0.9111557584265718, 0.9335855634107662, 0.8907291340488511, 0.9671379643295772, 0.7258785305864923, 0.6937472703712438, 0.6894860484963441, 0.7177806875304266, 0.7234150086912084, 0.7286536671257484, 0.7017325772343839, 0.6548516960511285, 0.7104364625361417, 0.8793851499549474, 0.868019648026476, 0.869644554591677, 0.9115664264819906, 0.8869208690254481, 0.8888385195070154, 0.8511099870847899, 0.8744982931269698, 0.23433209878453598, 0.5811791825822481, 0.1311258482349722, 0.5344537201790489, 0.4726943659624847, 0.26094154853233065, 0.13100408058644297, 0.6232781454480196, 0.3606658426643129, 0.4592234729327396, 0.4342090239684806, 0.47640452460273586, 0.19968192668924412, 0.359436310626823, 0.5993717803779512, 0.4530936604105573, 0.48488622722280217, 0.4446616492930904, 0.4483579948329247, 0.6628422311119204, 0.6568938246782334, 0.636190405005186, 0.6329698611067002, 0.6832781894595916, 0.6411773632534138, 0.659800739641251, 0.6064884433762692, 0.6480932188299363, 0.7316742055326113, 0.7218969403791851, 0.7141927767966549, 0.7357241540815032, 0.7242807472254108, 0.7303320651396346, 0.7404538941209886, 0.7595588929712207, 0.7422210940726315, 0.09816788709065638, 0.15157179984921199, 0.22904651755494587, 0.5704201212542935, 0.5525136216568578, 0.4809905049527242, 0.31843738814511113, 0.3797077680154015, 0.12591901807107042, 0.5554064250952082, 0.5506910063960064, 0.5465612631567108, 0.5832603451120539, 0.5866390145172371, 0.5616574088311709, 0.5701936441065025, 0.5397419541872164, 0.5501974265775003, 0.8104148191566752, 0.8193040396118614, 0.8308886632903786, 0.827000817338166, 0.8196603603174754, 0.833760283202974, 0.8273103948082376, 0.8223306175907031, 0.8242503515714114, 0.11700061476115187, 0.10783440271536116, 0.1103350172308194, 0.13065329273751103, 0.10227214457856093, 0.11662435384962233, 0.10371291338084265, 0.10882227948235812, 0.1005900833977581, 0.12734901824608624, 0.14351033994494755, 0.13460869222618255, 0.28668848140925074, 0.16490702214487174, 0.13239124993662754, 0.12638126947191342, 0.15390339792325447, 0.1425478708740786, 0.5791476512947692, 0.5814182188513701, 0.5347683054891935, 0.5949930469871457, 0.5665828840354374, 0.5686375966376714, 0.6167988083060298, 0.5858749831386947, 0.6154050375576601, 0.4704159615438265, 0.4589047198280495, 0.49727914729263123, 0.459215783742251, 0.48491555029946476, 0.43769571396561724, 0.472729894456001, 0.49075344932982046, 0.47907103042736987, 0.2140260015729466, 0.23089542035191846, 0.220405665268683, 0.19663616342702306, 0.20786814266131015, 0.2346602457838467, 0.21753798700716764, 0.21555169889456338, 0.20934181083892245, 0.22271945059518272, 0.47029675629333634, 0.23205942244966415, 0.23084921419632465, 0.19043364049762468, 0.35321749380595535, 0.4486374114576339, 0.22884304457536275, 0.37571006974745846, 0.18638930870653658, 0.18515529351363003, 0.1530123976304607, 0.8879393141010965, 0.8569323343091035, 0.19589349762687913, 0.16502510417839056, 0.7714561795279569, 0.8580760597233283, 0.8608964247106007, 0.21034436019124136, 0.8004874864995417, 0.8305736486745332, 0.8178194773269438, 0.8319124836703907, 0.21222882979792246, 0.20794668763645363, 0.8538020901773795, 0.2088665056485659, 0.18797528676394815, 0.18111376727706707, 0.18046202804133005, 0.2011090864283933, 0.19479879979309733, 0.18980687222791193, 0.17119595213819216, 0.19812437765049817, 0.08931446947149813, 0.09136769881830753, 0.08962331102445154, 0.0910537479480168, 0.09468509050083651, 0.08715992473407352, 0.10782173272362672, 0.08870389271444123, 0.08517659945311551]}, "mutation_prompt": null}
{"id": "98f30fa8-da1b-4717-a8dc-515c243f4205", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutant = np.clip(a + self.F * (b - c) + 0.25 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Adaptive Randomized Local Search probability\n                if np.random.rand() < (0.1 + 0.1 * (evaluations / self.budget) * (1 + 0.05 * np.random.rand())):  # Introduced slight stochastic variation\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim)  # Added stochastic update\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Enhance exploration by introducing a stochastic update to maintain diversity and improve convergence.", "configspace": "", "generation": 19, "fitness": 0.4888345607059681, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.49 with standard deviation 0.31.", "error": "", "parent_id": "b4a747a0-cc6e-4f19-9b49-1e3f2719f535", "metadata": {"aucs": [0.8964749013413448, 0.893653533703653, 0.8869077503637034, 0.8940007465134243, 0.9000223644594052, 0.8950647102857454, 0.8970616603311992, 0.8791275044179909, 0.8917509559729726, 0.7929679980205184, 0.771799667540612, 0.7943267425417303, 0.7972800885759321, 0.7968881373710958, 0.7940921279842521, 0.8033121861522181, 0.790386262679447, 0.7477878119184356, 0.33709884571248716, 0.1421784189692058, 0.15581953592839526, 0.4599377979623269, 0.22066012026751258, 0.12777859958653193, 0.16685088835749107, 0.154772221252374, 0.13275110332781315, 0.13486721778205613, 0.1368048507508014, 0.10144181267054586, 0.11034281735456153, 0.11617100701887118, 0.14532672606212382, 0.11179631518668398, 0.12087947846925529, 0.12105844553926959, 0.9111608747334213, 0.8646509773642133, 0.8938824117710167, 0.9003133773834429, 0.8865448145750183, 0.8899843480960047, 0.9087108899918392, 0.9034192940101337, 0.8966905897990817, 0.7370970083205979, 0.7195177999771278, 0.7034087276657157, 0.7166011420234443, 0.749866090975184, 0.7435962223103372, 0.7589101540555598, 0.7287661663639524, 0.6414905645749502, 0.8925403613171223, 0.8714318213675661, 0.8792904944563407, 0.9052068097692648, 0.8884673881642012, 0.9001635830869306, 0.8842292470713969, 0.8639965916351835, 0.9086991407136078, 0.1833566136794199, 0.13180075703089045, 0.17919518402541057, 0.20494539402991363, 0.5465211161429064, 0.18339696823625995, 0.6401868587878303, 0.1721049820230217, 0.4904406087903971, 0.16877441599997112, 0.1328013499636176, 0.19319590256347385, 0.2563732651953453, 0.18022602480940297, 0.1675609876450469, 0.2835392075666989, 0.18164380666305957, 0.25869497685705056, 0.6710063854832857, 0.20794246354454216, 0.7242120790289522, 0.12051720503497343, 0.709299048968784, 0.739237953860596, 0.706304141417959, 0.7120281510768752, 0.6595404555719715, 0.7913414504740198, 0.7757829564678038, 0.7688309845445627, 0.7842936667052866, 0.7760618686845926, 0.2626541151434669, 0.7851194034662452, 0.7894204240808832, 0.7759482181185792, 0.2073091949656125, 0.20215788599544593, 0.20873570289479615, 0.29494711550235797, 0.2985034287491113, 0.4700881353391232, 0.334868865686356, 0.3032144675061481, 0.36899534285810565, 0.6068921488054515, 0.49981126583548197, 0.6086550491149303, 0.6304997375910248, 0.6293300869215734, 0.6190037666953405, 0.559418466728316, 0.6183177602013628, 0.5952296383982782, 0.8542701791634452, 0.8438354794347709, 0.8261884351255322, 0.8574014772117576, 0.850030007960484, 0.8616394220517518, 0.8422421995112415, 0.8570278642676862, 0.8508536378962757, 0.10002136923490212, 0.12005413619139149, 0.15855262383227653, 0.1431480869844567, 0.12203917022325461, 0.09882936542948173, 0.16457762849437418, 0.11228742958576954, 0.11392247753284279, 0.13470855420327266, 0.1793710147866755, 0.13744527540555374, 0.13864002162864886, 0.13058016197662237, 0.13898312046244177, 0.14337911064770947, 0.13622958396153484, 0.1347905240898264, 0.6295651988841252, 0.6526152876985638, 0.6481901677565783, 0.6368332347798731, 0.7018034602393537, 0.5942118118043936, 0.7097838915804702, 0.7092398652897506, 0.6773703716174342, 0.5558494445982022, 0.5722903559851416, 0.5537800566444603, 0.561762793482118, 0.5287322117430044, 0.5835650463845738, 0.5356353396008748, 0.3029988597073163, 0.5938306684408373, 0.22864361584237836, 0.20917257238646003, 0.18939639413003218, 0.23920249372335534, 0.21774364673257207, 0.21441348166452678, 0.22145060573297148, 0.20926449524971635, 0.230129945302198, 0.4404705400072255, 0.6219854567992693, 0.23183130633723847, 0.19733400567925496, 0.7712974561964381, 0.6654108370233827, 0.2131661674673453, 0.23953015871792127, 0.21686071335936274, 0.182196837435615, 0.208624475458409, 0.8963952457547922, 0.8692697501544622, 0.8766019795905666, 0.19587733567112575, 0.8532355139919847, 0.8467462355303096, 0.8952697402264276, 0.894031929348772, 0.8638697786756501, 0.9074458756582056, 0.8303000472505829, 0.16697227922477376, 0.20739158633109533, 0.21285988709653814, 0.8973746660005042, 0.8814312200843473, 0.19863157346323346, 0.17271746216639972, 0.19272219023222026, 0.1744470656300242, 0.18253438109837283, 0.17808161403555678, 0.20055400420884417, 0.19498372350865767, 0.19268171027369552, 0.08826561126741017, 0.09938665153026227, 0.08665385187208263, 0.09172473382184088, 0.08701739074727355, 0.08710637084326789, 0.09353423290331664, 0.0962569418196696, 0.0903052082835728]}, "mutation_prompt": null}
{"id": "833caaad-a38c-406e-beec-5354363e3d6f", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutant = np.clip(a + self.F * (b - c) + 0.25 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Adaptive Randomized Local Search probability\n                if np.random.rand() < (0.1 + 0.1 * (evaluations / self.budget) * (1 + 0.05 * np.random.rand())):\n                    trial = trial + np.random.normal(0, 0.1, self.dim) * (1 - (evaluations / self.budget))  # Adaptive scaling\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Introduce adaptive scaling for the stochastic update to balance exploration and exploitation.", "configspace": "", "generation": 20, "fitness": 0.47887227972894764, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.31.", "error": "", "parent_id": "98f30fa8-da1b-4717-a8dc-515c243f4205", "metadata": {"aucs": [0.8917052514946199, 0.8896294896238828, 0.8879281682703698, 0.8886015959729331, 0.9017788820161285, 0.8995227296188057, 0.9006441209836364, 0.8900991425850093, 0.8891888138549612, 0.8053110615496737, 0.7993187080015765, 0.7987291263787063, 0.7755092027558517, 0.798638795049197, 0.7745239675924952, 0.7619048321871624, 0.7959793016650649, 0.7872752299050173, 0.14803822906193542, 0.13670508624990163, 0.5587573012236915, 0.1572700476869361, 0.13838827616032834, 0.1737886926040304, 0.12151305843597437, 0.13448444364893453, 0.16282034078203267, 0.12482141129791491, 0.140323007064873, 0.11881460487088136, 0.09979601618102607, 0.10967975063712199, 0.12477066991305852, 0.12401211761369646, 0.1285664738762563, 0.14646223517074486, 0.9473426008499378, 0.9276861293451295, 0.9030753739671054, 0.8978229713890754, 0.8844070586150381, 0.9347211727678746, 0.9605751362149013, 0.8899872803665136, 0.9266646423131963, 0.749005396153519, 0.7339289847860332, 0.7059171357431717, 0.7395503390885914, 0.7521788032101054, 0.712419033314986, 0.7125778550991957, 0.7112061714925761, 0.699162709488457, 0.8936551894367387, 0.8865304889828878, 0.8698600107142488, 0.8981303329839784, 0.9149956634786567, 0.8924692541811059, 0.8799122099976218, 0.8931620226315005, 0.8735994494976441, 0.21943914190168212, 0.424394022895231, 0.4535977865843992, 0.2362044755571202, 0.4741638404627353, 0.13227332708212813, 0.21840216996509043, 0.21404236030026458, 0.5227922323223329, 0.38627423336548405, 0.3813148596392003, 0.1906696770186661, 0.22384885718429692, 0.2996800290141307, 0.19464049781184922, 0.46101453695362393, 0.2750108717658226, 0.20040872107558738, 0.700226907903098, 0.6939849996875715, 0.6305438023934182, 0.7112536920177106, 0.7156523682543443, 0.7206271095183976, 0.47648327146990177, 0.1723440213483748, 0.7073131241104115, 0.8023711779320586, 0.7567781482982299, 0.781091570726919, 0.7681772799436752, 0.7256790364959715, 0.6465691963305854, 0.7934236331867903, 0.7889679516107844, 0.7785058617164998, 0.12268860641334545, 0.11298244895124865, 0.1511616915254108, 0.46223760478887643, 0.22503215374736996, 0.1706257485084297, 0.14614699933009756, 0.3836405242654428, 0.32137947780941467, 0.6109844358191251, 0.6121064329963644, 0.6251315764030652, 0.5998863844443798, 0.625564965314088, 0.6036894125836014, 0.6199906008831655, 0.2939020679858978, 0.40392650882409875, 0.849704403156037, 0.8538540013324378, 0.8587308292518497, 0.8456507669006389, 0.8467974080760937, 0.6322221787520419, 0.8545513946976356, 0.847269970224426, 0.8536703254110087, 0.10473388019215413, 0.12781391491844074, 0.13925180062461118, 0.12086231926093227, 0.12381581514378359, 0.11613373430117846, 0.11593095756089211, 0.1347161977411806, 0.11444771557984545, 0.1338104495072434, 0.49737363809463564, 0.1336629019503609, 0.1405312887091621, 0.12768851605817033, 0.23604662756812733, 0.13778326500372973, 0.1357564035036234, 0.1473498119106733, 0.6499586369769476, 0.5716653484139195, 0.6677447349585307, 0.6632138311372584, 0.6593551559834315, 0.6508674070498812, 0.6445633993789897, 0.6887672109550469, 0.6859470314436833, 0.49299158620653893, 0.5695062022471646, 0.2892874179769641, 0.22508889866382464, 0.5588538346152138, 0.5354680516607193, 0.570344859906489, 0.5778427553736051, 0.576696606455676, 0.22013208707601306, 0.25032678874012215, 0.19654263340735767, 0.18823136048919664, 0.23598581253675088, 0.22800042143951216, 0.21574174743466168, 0.2052550375966854, 0.22741017985606216, 0.7450641399932156, 0.48451308904945267, 0.21462780040677576, 0.6994955704735404, 0.24199829783298632, 0.19828187857458124, 0.2394275915893903, 0.210046702552787, 0.23221195052868926, 0.8475870081839122, 0.1845765667275826, 0.15214907019451662, 0.8971230216662588, 0.8662969565804487, 0.19821019680684326, 0.1414282774059602, 0.8982152550691804, 0.9015503290249246, 0.8947805132681255, 0.8262610962309824, 0.20536186269380352, 0.8785702321194561, 0.20916459444030722, 0.877562534088879, 0.1127435231017464, 0.16654929735257307, 0.20957134627624296, 0.17916529295624317, 0.19458310584717076, 0.1813572274979478, 0.1903658378167583, 0.1790832236651786, 0.17182462224474526, 0.1950152475550484, 0.18699238478907465, 0.20010360560271634, 0.08508227774644361, 0.07812120867295325, 0.08311365600230147, 0.10127143444434628, 0.09667889482505876, 0.08938631176533218, 0.09894226730244104, 0.08372114308752754, 0.08720039145505265]}, "mutation_prompt": null}
{"id": "58b8411a-51e4-4768-8933-4d097bf3bf97", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                self.F = 0.3 + 0.4 * np.random.rand()\n                mutant = np.clip(a + self.F * (b - c) + 0.25 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Adjusted stochastic update factors for more variability\n                if np.random.rand() < (0.15 + 0.1 * (evaluations / self.budget) * (1 + 0.1 * np.random.rand())):  # Increased randomness slightly\n                    trial = trial + np.random.normal(0, 0.15, self.dim)  # Increased variance for exploration\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Enhance exploration by increasing stochastic variance and refining adaptive search strategies.", "configspace": "", "generation": 21, "fitness": 0.47997370548372525, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.30.", "error": "", "parent_id": "98f30fa8-da1b-4717-a8dc-515c243f4205", "metadata": {"aucs": [0.8842786455913227, 0.8879055590266146, 0.8867149352183081, 0.8879544692487545, 0.882644579570882, 0.8943923010135326, 0.8898554577655428, 0.8851960243946106, 0.8841544958675625, 0.7766520712313013, 0.7677742604387442, 0.7652274441282647, 0.7814077314244866, 0.7685616718844126, 0.7557803840786663, 0.7450747081756846, 0.7785419158515663, 0.779970837367457, 0.15315745684875615, 0.12200808389514384, 0.14256454654538608, 0.14213148858776292, 0.23150151151903198, 0.13416406586543783, 0.14485609330494975, 0.45423997606011657, 0.14721996391425707, 0.11442844860863499, 0.12119320814935186, 0.12318560503321552, 0.12548670505475368, 0.1086293284340849, 0.1236677229719566, 0.125017511685781, 0.10231361912286518, 0.10600208223300356, 0.9497391850435575, 0.8755580992879803, 0.9074118570616351, 0.9549160048118701, 0.919825221918831, 0.9219347259799763, 0.9281650690849986, 0.9146154408849387, 0.920088166102168, 0.6796859830661751, 0.7222729551220722, 0.7139329538596455, 0.6884056199104303, 0.7096034794419568, 0.7040007454572397, 0.6867140947461445, 0.7077909615654406, 0.7367056025046381, 0.8895259157450568, 0.8924051975217928, 0.8741469263846511, 0.9050712620822232, 0.8882304818391614, 0.8686477573743354, 0.8785536256042961, 0.8818746785603105, 0.9031337805099043, 0.27182506710866816, 0.30590298769768065, 0.2422546666446388, 0.4748512310186327, 0.21544969758598165, 0.33550395933572597, 0.4431356083425193, 0.26888793386872456, 0.13274079782172887, 0.21006817664274136, 0.210671856447177, 0.1799205822877442, 0.3572677065280736, 0.4619632463748746, 0.24527195549113545, 0.20512816595937433, 0.17373255920799724, 0.26370434596603265, 0.1599555541030746, 0.6996183765462946, 0.6597278490949274, 0.23989091627085424, 0.680156235549654, 0.5444106519486367, 0.7049550384490477, 0.6882335541818382, 0.6858947768634822, 0.4697162606123535, 0.7628146982025062, 0.7592432426130157, 0.7668997935848713, 0.4468145801400224, 0.7421699805435538, 0.7697407457141644, 0.7727397405966158, 0.6283409404741883, 0.14953831692452169, 0.12931912313381633, 0.141790618433013, 0.5333121552024619, 0.3485635135615862, 0.6042289100008582, 0.33624189156792583, 0.14838946544270126, 0.18525508869941232, 0.5745241830920917, 0.5871018219068682, 0.5829521126838941, 0.6044955356396493, 0.5803808210772305, 0.5549821998715617, 0.5936393702283584, 0.4209771239764244, 0.5235452634988107, 0.8501197120542657, 0.7788232476569716, 0.836934645442018, 0.8354722873604874, 0.8308261698165914, 0.83445813370066, 0.853137613094382, 0.8339266664623016, 0.8383865510989473, 0.10950416387719064, 0.13090691835160073, 0.14080468889893505, 0.10821842526523962, 0.14091289242312977, 0.11226899591039907, 0.13184823602146045, 0.13358677251937, 0.11371761377550593, 0.13315872557162, 0.13496717351181364, 0.16288537032846162, 0.26086027003365686, 0.1374214697547439, 0.14140502424341017, 0.17133892959079766, 0.13241054677365538, 0.13640277998513373, 0.5710046877526396, 0.6152918004416228, 0.576389305222443, 0.6145626712537096, 0.5947599202174925, 0.6227424632461573, 0.6733550149044323, 0.6809999175168509, 0.662489177306137, 0.5134963014284892, 0.4909685007525605, 0.5530956343034767, 0.5215902688078773, 0.515731069724729, 0.5310746236466745, 0.5093828144623127, 0.5694124169237833, 0.5069182622462121, 0.2232911955881114, 0.2107753607521322, 0.2118949151227787, 0.20045438874413024, 0.21005555723602043, 0.2384781625456197, 0.21854592537831674, 0.22007517139974975, 0.22213579731290123, 0.2061791133940628, 0.22034166352634943, 0.223099712920519, 0.24204179796658454, 0.22432558549518966, 0.1965488225677524, 0.5109901449357928, 0.6100091769596483, 0.18674187995700586, 0.18518623746342933, 0.18595911029852508, 0.8182310372055047, 0.9009658536226387, 0.8992000852021633, 0.17120006009642674, 0.903599087003228, 0.9018989787596294, 0.8519741151191301, 0.9068512068449737, 0.8095022764592147, 0.8776915205614114, 0.8731521647944086, 0.20716798246506007, 0.87033704378718, 0.8318595428723582, 0.8491252672236953, 0.1620053073160902, 0.1815496208131553, 0.18779544817830107, 0.18621475449797775, 0.18708392283828912, 0.1726949853022639, 0.18559809301331975, 0.1935579361292845, 0.18708318766071852, 0.20423139173034055, 0.09645254300814254, 0.10103285017618069, 0.09856596149051478, 0.08771599710362898, 0.09015495503111648, 0.09052440074703905, 0.08801184495838643, 0.0881009925417946, 0.09243968034275163]}, "mutation_prompt": null}
{"id": "fdb497f6-f00a-4103-b2cf-d748bd21b11e", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = population_size\n        \n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                self.F = 0.3 + 0.5 * (np.random.rand() ** 2)\n                mutant = np.clip(a + self.F * (b - c) + 0.3 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.8 + 0.2 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                if np.random.rand() < (0.15 + 0.1 * (evaluations / self.budget)):\n                    trial = trial + np.random.normal(0, 0.15, self.dim)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n            \n            if evaluations % 100 == 0:\n                population_size = max(4, population_size - 1)\n                population = population[:population_size]\n                scores = scores[:population_size]\n        \n        return self.best_solution", "name": "ADERLS", "description": "Introducing dynamic population resizing and improved local search to enhance convergence and adaptivity.", "configspace": "", "generation": 22, "fitness": 0.4587802532325, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.31.", "error": "", "parent_id": "98f30fa8-da1b-4717-a8dc-515c243f4205", "metadata": {"aucs": [0.9042265657570362, 0.9091251090973556, 0.9089712849925927, 0.9023912174797459, 0.9091199131079785, 0.9061468044747931, 0.8963943703773737, 0.9050832151193483, 0.9025473030657132, 0.7715535852187773, 0.7976705320407036, 0.7240652744124048, 0.8115887226829744, 0.7288222146694965, 0.7882609281935514, 0.7915444983420649, 0.8070417925022642, 0.5322610044847771, 0.26062910756820645, 0.14290157116313662, 0.15957279534087465, 0.13799885202167717, 0.6239522909009703, 0.11647928623372716, 0.08973510587831512, 0.18556353645657508, 0.1664359050241383, 0.10734474940026228, 0.11083232684832256, 0.10695934890847913, 0.10854598644047186, 0.12531473667640491, 0.10853855580210381, 0.14764339038000218, 0.11289210787750037, 0.1392347058267811, 0.9396929026629194, 0.8833111912037355, 0.935129224449485, 0.9159443027776807, 0.943878813699983, 0.933447743914151, 0.9240880823106651, 0.928355353531354, 0.9416896743606771, 0.6999376223303408, 0.754023440386184, 0.7366083832693973, 0.7361172158318527, 0.7779606945026425, 0.7388860845050784, 0.7186016854779761, 0.7496319298102625, 0.766054085997518, 0.22861711339725277, 0.9022031599141386, 0.9122872370775553, 0.9027699925486597, 0.9089382150440922, 0.9163165503084789, 0.9077008193663653, 0.922370156837408, 0.16965325944606624, 0.1803149673744563, 0.2025299818909092, 0.1779371653989532, 0.39599279115756003, 0.1952589143050738, 0.39136571752772564, 0.6150477834569559, 0.25006324220933285, 0.17253866421705077, 0.18660738433818946, 0.19870733570503463, 0.2822344156394274, 0.5605482009117253, 0.20108340996696383, 0.3895863813609771, 0.7844979522346383, 0.17410258542111112, 0.17545373386209828, 0.21369756221942549, 0.14175895504912128, 0.13894273432980175, 0.7225724708317152, 0.2764442737995563, 0.17872789477154838, 0.519705014335877, 0.5872668544880559, 0.2278901621790227, 0.7837793477108189, 0.7956141230502574, 0.7550570214264677, 0.7848048919485133, 0.06278871347034276, 0.7852499375791098, 0.7632541888411227, 0.6923013561375486, 0.7613453039870118, 0.3333855272563353, 0.1657207535467603, 0.306648755203634, 0.25616990938028994, 0.3657154067001034, 0.3401874288452017, 0.3770856239744207, 0.17704009020736433, 0.13150740596509458, 0.29062989194846756, 0.4571721048354396, 0.3774003131742223, 0.3232258517839611, 0.599719865674145, 0.39519327889567635, 0.5000797969797152, 0.3192528711545901, 0.3048903216290745, 0.8330673195231082, 0.8152820524284801, 0.7546763907544282, 0.8357969398605893, 0.8664639217066387, 0.8606306304509967, 0.7337878758146354, 0.8583602855760616, 0.7981976923527412, 0.10888757478157329, 0.3884377663962466, 0.14707838247631932, 0.13673644259851447, 0.14684098873163598, 0.10769823375311027, 0.10537082446081036, 0.1517059033923962, 0.2461600280327888, 0.24254915401652843, 0.14627879719624148, 0.1356883356928389, 0.14241770514830954, 0.13289655993159144, 0.4930393249509537, 0.2934424800473583, 0.1748398136135626, 0.15148031220880454, 0.6158067390056252, 0.7257836897162743, 0.6902764275272881, 0.7238816841915168, 0.6290721353941723, 0.7278446263351832, 0.7081495426744313, 0.5935863228606371, 0.7044013771906213, 0.4423868542238393, 0.6099257079312992, 0.6173720210907803, 0.4092826122391061, 0.6039556389854849, 0.4277652669757305, 0.5636148294101568, 0.5558972260472335, 0.24144710397766345, 0.21579981482290445, 0.20621242881021995, 0.21873069107488707, 0.2326536296885937, 0.22436875799452094, 0.23777697972100154, 0.21260359802591522, 0.21050995009533613, 0.20976404811329696, 0.24197114969212796, 0.209433089320754, 0.19895585569602936, 0.21851344525981709, 0.2147355991899942, 0.2074547710528094, 0.1955967973213496, 0.2467538281977978, 0.21972050135154308, 0.9053609052934622, 0.9089469871734269, 0.17678493365551362, 0.9317062482731182, 0.19709643522153353, 0.9279118536203126, 0.8658147315456373, 0.16797783845451764, 0.16553889058101146, 0.728313436507884, 0.212532306346792, 0.8483615420334772, 0.9006957021178934, 0.20778317018346948, 0.889471925480587, 0.7885158906321381, 0.8615096803558391, 0.1652376775163209, 0.19382790117632998, 0.186722353138027, 0.1856827771668903, 0.17823175044529183, 0.18189551959013617, 0.1831871760041337, 0.17801466086274453, 0.19105456078865568, 0.19348130237190475, 0.09548326122936013, 0.09523808176805759, 0.09387425994503451, 0.0870862618843492, 0.09678374213979335, 0.09027713124476577, 0.12499982610411953, 0.09023485256775787, 0.09338238767969265]}, "mutation_prompt": null}
{"id": "b3472afb-dc1d-4ebc-b811-96465217f0a0", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutant = np.clip(a + self.F * (b - c) + 0.25 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Dynamic learning rate for stochastic update\n                learning_rate = 0.1 * (1 - evaluations / self.budget)\n                \n                # Adaptive Randomized Local Search probability\n                if np.random.rand() < (0.1 + 0.1 * (evaluations / self.budget) * (1 + 0.05 * np.random.rand())):\n                    trial = trial + np.random.normal(0, learning_rate, self.dim)  # Adjusting stochastic update\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Introduce a dynamic learning rate for the stochastic update to balance exploration and exploitation.", "configspace": "", "generation": 23, "fitness": 0.4788722804398495, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.31.", "error": "", "parent_id": "98f30fa8-da1b-4717-a8dc-515c243f4205", "metadata": {"aucs": [0.8917052514946217, 0.8896294896238828, 0.8879281682703687, 0.8886015959729331, 0.90177888201613, 0.8995227296188057, 0.9006441209836392, 0.8900991425850131, 0.8891888138549633, 0.8053110615496737, 0.7993187080016035, 0.7987291263787751, 0.7755092027557612, 0.7986387950496887, 0.7745239675925379, 0.7619048321871813, 0.7959793016650649, 0.7872752299050101, 0.14803822906193542, 0.13670508624990163, 0.5587573012236915, 0.1572700476869361, 0.13838827616032834, 0.1737886926040304, 0.12151305843597437, 0.13448444364893453, 0.16282034078203267, 0.12482141129791491, 0.140323007064873, 0.11881460487088136, 0.09979601618102607, 0.10967975063712199, 0.12477066991305852, 0.12401211761369646, 0.1285664738762563, 0.14646223517074486, 0.9473426008499378, 0.9276861293451295, 0.9030753739671054, 0.8978229713890754, 0.8844070586150381, 0.9347211727678746, 0.9605751362149013, 0.8899872803665136, 0.9266646423131963, 0.7490053961535785, 0.7339289847842143, 0.7059171357430847, 0.739550339088765, 0.752178803210199, 0.7124190333159812, 0.7125778550985219, 0.7112061714948796, 0.6991627094883575, 0.8936551894367387, 0.8865304889828878, 0.8698600107142488, 0.8981303329839784, 0.9149956634786567, 0.8924692541811059, 0.8799122099976218, 0.8931620226315005, 0.8735994494976441, 0.21943914190168212, 0.42439402288937367, 0.45359778656986205, 0.23620447555712354, 0.4741638404783838, 0.13227332708212813, 0.21840216996509043, 0.21404236030025858, 0.5227922323230842, 0.3862742333663618, 0.38131485963941136, 0.19066967701866666, 0.22384885718429093, 0.2996800290141459, 0.19464049781184922, 0.46101453695326156, 0.2750108717658226, 0.20040872107558338, 0.700226907903098, 0.6939849996875715, 0.6305438023934182, 0.711253692012227, 0.7156523682543443, 0.7206271095186502, 0.47648327146990177, 0.1723440213483124, 0.7073131241104789, 0.8023711779320417, 0.7567781482981872, 0.781091570726919, 0.7681772799436752, 0.7256790364959715, 0.6465691963305854, 0.7934236331869499, 0.7889679516107844, 0.7785058617193704, 0.1226886064133319, 0.1129824489512603, 0.15116169152552306, 0.46223760478869147, 0.22503215374737462, 0.17062574850857182, 0.14614699933009656, 0.3836405242654428, 0.3213794778089373, 0.6109844358191251, 0.6121064407942438, 0.6251315794258945, 0.5998863844443798, 0.6255649329309086, 0.6036896028969014, 0.6199905842206508, 0.2939020679556028, 0.40392650881417536, 0.8497044031592589, 0.8538540013445541, 0.8587308292453824, 0.8456507669049127, 0.8467974081127373, 0.6322221787520406, 0.8545513946882818, 0.8472699702166193, 0.8536703254120684, 0.10473388019215413, 0.12781391491844074, 0.13925180062461118, 0.12086231926093227, 0.12381581514378359, 0.11613373430117846, 0.11593095756089211, 0.1347161977411806, 0.11444771557984545, 0.1338104495072434, 0.4973736380947372, 0.1336629019503609, 0.1405312887091621, 0.12768851605817033, 0.23604662756812733, 0.13778326500372973, 0.1357564035036234, 0.1473498119106733, 0.6499586369769476, 0.5716653479457481, 0.6677447349761393, 0.663213831197453, 0.6593551560144544, 0.6508674070426057, 0.6445633992272755, 0.6887672109807914, 0.6859470313572438, 0.492991586148785, 0.569506201859303, 0.28928741797859125, 0.2250888986665649, 0.558853834409801, 0.5354680515440844, 0.570344859906489, 0.5778427556890455, 0.5766966088850032, 0.22013208707601306, 0.25032678874012215, 0.19654263340735756, 0.18823136048919664, 0.23598581253675088, 0.22800042143951216, 0.21574174743466168, 0.2052550375966854, 0.22741017985606216, 0.7450641399993512, 0.48451308911859325, 0.21462780040677576, 0.6994955704731479, 0.24199829783298632, 0.19828187857458124, 0.2394275915893903, 0.210046702552787, 0.23221195052868926, 0.8475870081839122, 0.1845765667275826, 0.15214907019451662, 0.8971230216662588, 0.8662969565804487, 0.19821019680684326, 0.1414282774059602, 0.8982152550691804, 0.9015503290249246, 0.8947805132681255, 0.8262610962309824, 0.20536186269380352, 0.8785702321194561, 0.20916459444030722, 0.877562534088879, 0.1127435231017464, 0.16654929735257307, 0.20957134627624296, 0.17916529295624317, 0.19458310584717076, 0.1813572274979478, 0.1903658378167583, 0.1790832236651786, 0.17182462224474526, 0.1950152475550484, 0.18699238478907465, 0.20010360560271634, 0.08508227774644361, 0.07812120867295325, 0.08311365600230147, 0.10127143444434628, 0.09667889482505876, 0.08938631176533218, 0.09894226730244104, 0.08372114308752754, 0.08720039145505265]}, "mutation_prompt": null}
{"id": "a1804b21-7b31-46f5-87b0-61f17041cb5a", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand() * (1 - evaluations / self.budget)  # Adjusted with iteration progress\n                # Slight increase in the bias towards the global best\n                mutant = np.clip(a + self.F * (b - c) + 0.25 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Adaptive Randomized Local Search probability\n                if np.random.rand() < (0.1 + 0.1 * (evaluations / self.budget) * (1 + 0.05 * np.random.rand())):  # Introduced slight stochastic variation\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim)  # Added stochastic update\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Introduce a dynamic adjustment to the mutation factor based on the iteration progress, enhancing convergence efficiency.", "configspace": "", "generation": 24, "fitness": 0.4699330458324398, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.30.", "error": "", "parent_id": "98f30fa8-da1b-4717-a8dc-515c243f4205", "metadata": {"aucs": [0.9020702484035553, 0.8943367733608093, 0.8958208381904627, 0.8935931345471149, 0.9012094350078205, 0.8989527861894223, 0.899932429325984, 0.8881519609049959, 0.8938697574607283, 0.8014957280052971, 0.7862225589219763, 0.7741910043146825, 0.15078942836132558, 0.8068583167222191, 0.7451266592068457, 0.7953780778531271, 0.8018568276938777, 0.7929186626928603, 0.32991834052702473, 0.4659237222781164, 0.15115345249479106, 0.6212797850549778, 0.4281594447967402, 0.12300911160419115, 0.12508343823056, 0.13181066624202487, 0.5437570395367685, 0.1276050651301226, 0.14510617453213215, 0.14125218969137532, 0.12821865100139151, 0.10635178024857483, 0.13262529559687586, 0.14118487819324854, 0.13064488122134577, 0.1354734318914088, 0.9189825727332275, 0.8305658411550931, 0.884926552896877, 0.8940842372357009, 0.912294995452409, 0.8878927255316232, 0.9031439594631477, 0.904203930758467, 0.913428405875018, 0.7382467825863537, 0.6355437093359378, 0.6112143916264581, 0.6332938905870762, 0.7557754210755991, 0.6591941732387246, 0.5272973205820541, 0.6576307914774593, 0.5400820922728959, 0.9084762324163816, 0.895660191878125, 0.876007722239114, 0.9117012209382216, 0.8959098265192573, 0.8903321194294808, 0.8887679569234639, 0.9113651250696277, 0.8861050266012129, 0.14645702879768052, 0.3815684385110254, 0.2634728163520661, 0.2204718004633528, 0.17215763912393067, 0.1762474200767058, 0.19636157662866782, 0.15842885221599357, 0.20461921429179153, 0.16747623565558734, 0.1433796556568031, 0.15646375591466444, 0.2094309640565104, 0.25942987486292646, 0.15779338033853707, 0.1730044150026524, 0.18882504912306153, 0.1928336504507, 0.7254253923284153, 0.10726240741002091, 0.38186526628088024, 0.20551785376932918, 0.7244704717675357, 0.7666879599756772, 0.2891111564910209, 0.753836569445343, 0.17368043014736012, 0.8041553471493688, 0.7818715996908527, 0.7874536333414128, 0.7997577110605928, 0.7886534785165485, 0.7643302144819488, 0.7893612513812358, 0.7986198074823263, 0.8051262390177298, 0.25619462791850656, 0.20585594292284282, 0.14329616717916926, 0.18372299534679326, 0.22160953864281663, 0.30443642481676425, 0.13748183016001025, 0.22081332808259346, 0.24273806873384496, 0.42170044504257975, 0.5006640070834325, 0.38617184655685066, 0.497668066041153, 0.6715767581863586, 0.512270048869368, 0.11324800323876405, 0.5501910098881224, 0.48266549190786845, 0.8465069038849242, 0.859364878877868, 0.8534684270586839, 0.6423086679581473, 0.868902196088258, 0.8624294655142558, 0.8656190779038636, 0.8643562096038722, 0.8544870378695435, 0.5010135434272965, 0.10956782410986576, 0.1168934979176054, 0.21705099217707735, 0.13587999494940528, 0.14271484022159509, 0.13913741233468213, 0.12355803650254804, 0.1413911689236358, 0.17224770008700363, 0.13821021258188726, 0.6194156042645396, 0.14217934018830725, 0.25406426064351506, 0.3175351409984126, 0.16931080501668117, 0.2864259325291406, 0.1293740717113102, 0.6025604285763998, 0.6926967168375384, 0.6975827507763155, 0.6889161983533687, 0.7066657748757763, 0.7041454018247744, 0.739407206393315, 0.7459933784354347, 0.6655798404068783, 0.43350751768883533, 0.4693989797833994, 0.5823676330154512, 0.5947202864281393, 0.6305305434852653, 0.41967697204782084, 0.6258789769567181, 0.6626239388431354, 0.6565296519333527, 0.1932894054563823, 0.20856437821819596, 0.2401626791651863, 0.2408418793647179, 0.2169793634296009, 0.2359550762771936, 0.210937475914175, 0.21982816077445388, 0.21933812453663837, 0.20850118798516737, 0.21642762907556767, 0.20286076480095294, 0.21774815548309423, 0.6739446302772821, 0.6684822062373338, 0.2418381100519008, 0.7042041698259727, 0.23277030483326533, 0.18198997892508884, 0.20881771347506228, 0.8978801992774903, 0.17535463355905034, 0.8774558396768958, 0.1990298772862903, 0.8101311995740128, 0.16581178481682113, 0.8586047265751005, 0.8823514494022411, 0.21151836622080278, 0.8702172118549913, 0.866707904219941, 0.16721876988275675, 0.20735129627354376, 0.21279790717646763, 0.895346569574742, 0.8583430456650089, 0.1910589173716296, 0.19029529348801555, 0.20313845776082717, 0.1934841543514565, 0.18478027241083095, 0.19795865182591688, 0.18747291203730532, 0.1763279851236348, 0.1923485128000848, 0.08966501210791267, 0.09662491698974485, 0.0879335405571412, 0.11139011352551498, 0.08841656995216507, 0.08454231780590071, 0.08732233502676645, 0.0913322707920281, 0.08827570151901365]}, "mutation_prompt": null}
{"id": "b2d85e6d-0c5a-497d-bed1-c9abd541e4ad", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutant = np.clip(a + self.F * (b - c) + 0.25 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Adaptive Randomized Local Search probability\n                if np.random.rand() < (0.1 + 0.1 * (evaluations / self.budget) * (1 + 0.05 * np.random.rand())):  # Introduced slight stochastic variation\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)  # Added: mean of top 20%\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)  # Modified: added mean bias\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Increase local search efficiency by incorporating a slight adaptive bias toward the mean of top solutions.", "configspace": "", "generation": 25, "fitness": 0.4900416178386026, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.49 with standard deviation 0.30.", "error": "", "parent_id": "98f30fa8-da1b-4717-a8dc-515c243f4205", "metadata": {"aucs": [0.8996303919892923, 0.893409497507576, 0.8941788249450575, 0.8960702726119465, 0.8931571393029507, 0.8860319465828875, 0.8955281964993352, 0.8845843081241074, 0.8801352624772963, 0.7769718030192139, 0.7944303688545921, 0.7486952764178747, 0.7940915463544951, 0.7781988606279363, 0.7888844901089376, 0.7829065251046112, 0.7932195889689162, 0.7719079357981271, 0.14534200885556825, 0.15921806627650148, 0.1439918759829445, 0.15956013571715555, 0.12784232270274498, 0.1572520480164401, 0.15633123786515657, 0.15584826419299447, 0.14005785346119282, 0.0998659556914463, 0.11389426794658608, 0.10938142851592525, 0.1125864735876525, 0.12303215038185411, 0.0997008406216271, 0.14344712223677436, 0.13892201804840354, 0.11368010735199063, 0.9233638786230725, 0.8821364792941239, 0.8684697566710713, 0.8949762469933071, 0.9010847061672177, 0.9224911443943252, 0.9269586400988423, 0.9046178541081658, 0.9294382774354046, 0.6968635399014673, 0.7201314927877425, 0.6763322947754888, 0.7363671927653095, 0.7414071020480049, 0.7530554150388825, 0.7344639212128828, 0.7501924301113304, 0.7484810409706216, 0.8896614657099574, 0.8840628060544617, 0.907038290391655, 0.9014195272224349, 0.8919180736067173, 0.8831330428589732, 0.9050686368353695, 0.8962833915063575, 0.8825974959048983, 0.1591214837192121, 0.5102149614949203, 0.4508222554481819, 0.26101843139339875, 0.2021191333011888, 0.21023037241742937, 0.18080083685707504, 0.19282011802564836, 0.19323198902445848, 0.2020509467299888, 0.4347548514923044, 0.23367644979286784, 0.1864281530406342, 0.24300689564627487, 0.21595760156336352, 0.5981769464839866, 0.17450720025629451, 0.2222910346354482, 0.37160761960141087, 0.5716399178511042, 0.6947398461304736, 0.6874607303548839, 0.7226317714174332, 0.7342216466147742, 0.1907952153581849, 0.5702513493263945, 0.6789387748263411, 0.767692288271393, 0.7480508096951545, 0.780542344276594, 0.6525279642466495, 0.5708209058770639, 0.7684598291672708, 0.7693121506436189, 0.7676739577310648, 0.7901700317694379, 0.18973280617642785, 0.3582492140927732, 0.23154328495102527, 0.41058060062554025, 0.5986125766038188, 0.36744997658076817, 0.19734969526278578, 0.258350432251374, 0.3824192639261388, 0.61725449627025, 0.6005224137356178, 0.6083267203533291, 0.6151573154101693, 0.6509046952046499, 0.5667785106363488, 0.5730749280462248, 0.6142508437712089, 0.6217065322040657, 0.8423222443401424, 0.8229700346162749, 0.8471587409586172, 0.8463699316057692, 0.8552082987801705, 0.8408441549180593, 0.8597797901747566, 0.8601244981042704, 0.8510768156923402, 0.1238372325700875, 0.18413651651952512, 0.116772286196837, 0.1191253332309603, 0.3603797787884526, 0.11274157125673678, 0.11158348301442167, 0.1159764328790438, 0.12157528266169648, 0.15638416278530254, 0.15370519103674396, 0.19196477344681318, 0.1464914018084943, 0.16031107148842438, 0.6148509926717154, 0.14524437037535187, 0.13758340875883457, 0.2504331890780058, 0.6659737129128744, 0.6636861968302156, 0.6198956942354328, 0.6712828057407338, 0.6608313811375401, 0.6656257963556156, 0.7034598583699021, 0.6916192318313801, 0.6985531786255542, 0.5574519130152666, 0.5005435954731874, 0.46714141218470295, 0.5141146227928792, 0.2531683265200161, 0.55014892062922, 0.5981094847651066, 0.6004023075557204, 0.5603996599867793, 0.22097225940625642, 0.2328082995971853, 0.21321371817407142, 0.22789688242012485, 0.21169525640252973, 0.22353172763414997, 0.22217435103099492, 0.23544688316463402, 0.23128046626295207, 0.20515099705569317, 0.5554116989761686, 0.19431691493099956, 0.20293981164585362, 0.5445183836713555, 0.19933762560163537, 0.2247279612798887, 0.4143171902150877, 0.21603439414778192, 0.8371495721920796, 0.20650587754768535, 0.8830862947356047, 0.8806321990549764, 0.8892055848772742, 0.19883427274976861, 0.1766276633602165, 0.84944039843743, 0.8571608914030471, 0.8683781928529083, 0.8768498111667244, 0.8836927310650209, 0.20934927189560604, 0.16717152760774023, 0.8019560594244239, 0.21244115057810464, 0.8846621453456663, 0.9036051300396596, 0.1928482347330316, 0.18407454082760177, 0.18223449347918452, 0.18645014232569834, 0.1748252924788769, 0.18710485746802796, 0.18631231429764172, 0.18876567464526361, 0.19281178604614857, 0.08971808814494076, 0.08534793216143466, 0.08866363137658628, 0.09333446983461147, 0.09809327174105653, 0.11999289297643823, 0.09317893739856353, 0.09107298248243856, 0.0852455512286937]}, "mutation_prompt": null}
{"id": "22b921e0-f7ec-4c25-beaa-65ccf01a0a28", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutant = np.clip(a + self.F * (b - c) + 0.25 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Adaptive Randomized Local Search probability\n                if np.random.rand() < (0.1 + 0.1 * (evaluations / self.budget) * (1 + 0.05 * np.random.rand())):\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.2, self.dim) + 0.075 * (top_mean - trial)  # Adjusted perturbation and influence of top_mean\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Enhance local exploration by adjusting the random normal perturbation and increasing the impact of top solutions.", "configspace": "", "generation": 26, "fitness": 0.4797324207223149, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.31.", "error": "", "parent_id": "b2d85e6d-0c5a-497d-bed1-c9abd541e4ad", "metadata": {"aucs": [0.892559012161289, 0.8900844358690744, 0.8847760456973514, 0.8860075860108729, 0.8899229161109599, 0.8974248704965693, 0.8938501132453925, 0.8880312276850155, 0.8916057219388183, 0.7952768765459455, 0.7970317541505908, 0.8024380753915972, 0.7771937408784095, 0.7967867317439324, 0.7864823834086345, 0.7780679019193733, 0.7871109145108219, 0.7735368952049544, 0.1332375409562856, 0.384484669777974, 0.15620518959199126, 0.1438118398930761, 0.1318377395743393, 0.1273900734465716, 0.10419893971071092, 0.09723821728191417, 0.13510700678799625, 0.1045157090109724, 0.11190299468998144, 0.1165959855336327, 0.13251907163115362, 0.11558551362171088, 0.11839403926571956, 0.11257453105613002, 0.1279745556711085, 0.12108042686977738, 0.9525246507923842, 0.9063959200384282, 0.8587979561666021, 0.8981118051822914, 0.8644907405954078, 0.9108529420545025, 0.9560404725331444, 0.8892863499827817, 0.9556448399898726, 0.7180194325218718, 0.7297415382577348, 0.7026623113118682, 0.7544060445575226, 0.7424942641387215, 0.7520755691428815, 0.7525644476303166, 0.72361757118157, 0.7264208532829621, 0.8894480960777741, 0.8887139493119364, 0.8833277507414142, 0.8909607972000939, 0.9081304679989091, 0.9053194306569028, 0.8874697638522125, 0.8685923167714324, 0.8766688003802753, 0.7292029425137423, 0.17705079076697894, 0.2220989092898502, 0.17264754766014812, 0.4825769755430087, 0.14422723572886975, 0.17663131464361048, 0.23227143649724358, 0.6318187466831036, 0.22323819682268153, 0.4037621264265796, 0.1599409909346583, 0.5588369922599663, 0.1656400694259712, 0.18063479483090727, 0.2754562283517109, 0.3590185839882153, 0.2004815233076236, 0.26845858102498243, 0.6917544813678214, 0.6307447054243075, 0.6540815515627829, 0.6750129465767764, 0.6091526433635965, 0.7251153789699947, 0.6358398738230235, 0.7040839633786931, 0.7920053658794465, 0.7585897839441059, 0.7937652724271074, 0.39753608510118954, 0.7375837877795253, 0.7433913755932753, 0.793637721026472, 0.7839286242086219, 0.778592056887923, 0.10242402536370443, 0.1884563072406913, 0.16133893430727475, 0.2458911531959831, 0.42669932747668304, 0.16759084493641507, 0.3274540787033525, 0.21051975130503575, 0.3188853353612109, 0.625078030911046, 0.596923106549417, 0.5555472665450765, 0.6342250300257898, 0.5931025676712285, 0.6300245595952898, 0.6243444486126202, 0.5401707668628125, 0.5155383919704479, 0.8387263370982845, 0.8559575356687397, 0.7792360886278336, 0.8361988148110582, 0.8357359972079342, 0.8533779532714778, 0.8493449049137078, 0.854187249023818, 0.839626674120994, 0.09717235730918761, 0.1311446852709287, 0.11388366519562754, 0.25923848079490874, 0.1151185569727059, 0.11536259495851586, 0.11988666062116393, 0.1411616357376384, 0.13372323410961084, 0.1366107598871955, 0.16113764037321598, 0.13984755929784987, 0.1412848678586086, 0.17114666305932347, 0.15592764851822116, 0.2623968198523622, 0.17358701900351448, 0.1398298856040865, 0.6407652699246449, 0.5402177431773743, 0.6591211252192036, 0.6385872404858987, 0.6350766894945735, 0.5634346553004871, 0.6643845677362156, 0.6053911616169363, 0.6532952905731825, 0.5031025645886972, 0.5430659083783383, 0.5409812373733287, 0.5781666654743789, 0.5490733617946831, 0.5789911201146994, 0.5927521397235543, 0.5548794415622205, 0.22968929869728028, 0.2060443257244725, 0.2052380924979227, 0.21224036752907083, 0.19489792539228867, 0.20441357541277017, 0.22110907415766445, 0.2108488336375406, 0.22863165059274504, 0.2143773441737088, 0.2245152348936783, 0.20078776313632896, 0.23631194797077382, 0.6530280379087317, 0.22856802190118264, 0.21153392286042227, 0.19831647157010757, 0.22649371803858165, 0.213914314928219, 0.18233357886004664, 0.18631324526854431, 0.8682363167193499, 0.9055642491753209, 0.8866520855816684, 0.14762291234655045, 0.8375982347298802, 0.9009094963519867, 0.8670865500587817, 0.8994563343669981, 0.21077716736871432, 0.8519668568703772, 0.891168779781016, 0.20842326972795944, 0.8842536131715075, 0.11270553712267461, 0.10425273130108448, 0.880737321613096, 0.19241351340401824, 0.18586188080897903, 0.18154241466483778, 0.1782970091634818, 0.18435488505855568, 0.18091304948505982, 0.18385970499163162, 0.17993200135764675, 0.20160943773562812, 0.09224281310961502, 0.09109101502127215, 0.08998895310791089, 0.08427890641000524, 0.08479724710159786, 0.08751460010700307, 0.08718540591521506, 0.0930920587410321, 0.09542744634950084]}, "mutation_prompt": null}
{"id": "8de04d85-9fe6-4baf-a965-51ebc9b464a6", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.uniform(0.5, 1.5)  # Modified: vary F by adding an extra factor\n                \n                # Slight increase in the bias towards the global best\n                mutant = np.clip(a + self.F * (b - c) + 0.25 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Adaptive Randomized Local Search probability\n                if np.random.rand() < (0.1 + 0.1 * (evaluations / self.budget) * (1 + 0.05 * np.random.rand())):\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Enhance exploration by varying mutation factor dynamically based on current evaluations.", "configspace": "", "generation": 27, "fitness": 0.41686795203295324, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.26.", "error": "", "parent_id": "b2d85e6d-0c5a-497d-bed1-c9abd541e4ad", "metadata": {"aucs": [0.8194253606130997, 0.8056998227548859, 0.8128804700964474, 0.8126511085513887, 0.8213782882992471, 0.8253803280811336, 0.8057803108742685, 0.7950130825510947, 0.8137971046816275, 0.6676422818991994, 0.6503420203434453, 0.6500686298202221, 0.637208538829688, 0.6415014117094054, 0.6633516716906407, 0.6597355621607394, 0.6268105188637458, 0.6447680519554109, 0.12321716770868862, 0.10852965756568211, 0.10986352414108147, 0.11151889182466479, 0.11451912042530243, 0.11661966239066224, 0.12815456690718308, 0.10842742488583279, 0.11715254677594311, 0.08660095365396114, 0.10930834261280065, 0.09864845398713074, 0.09823008620178608, 0.11880393408700896, 0.09020693042313432, 0.10575665709506954, 0.10384583291122729, 0.09253385651376134, 0.979556953133768, 0.9452931986138493, 0.9227729605625723, 0.9084757938559068, 0.9144814194722894, 0.8906669392024167, 0.9276340964968535, 0.9319281443615136, 0.973362175724605, 0.5590367744941693, 0.569334912752437, 0.5739700309396922, 0.5432406381060016, 0.5273540749710737, 0.5134082702446077, 0.578352777330952, 0.5574109166671557, 0.5693218673339069, 0.797195298608382, 0.7694900545730803, 0.8018041170488912, 0.8027690537195378, 0.7877602030422051, 0.828775519799453, 0.798419500273952, 0.7629090279505035, 0.8094394291490418, 0.5644402553509665, 0.4418761532399158, 0.5207819467087781, 0.5831210078452429, 0.5172612813968431, 0.5385302892461725, 0.5031514382343055, 0.48414098482852075, 0.466215674029158, 0.46414200914097425, 0.39265655691054635, 0.4949960591695627, 0.5412763013704887, 0.47698581071997725, 0.5133504671969931, 0.12826712819682085, 0.532727335211685, 0.4700581929779486, 0.5049384237556219, 0.4867535675942184, 0.4649731737544034, 0.49130870420189643, 0.4739159255872559, 0.5113757457397843, 0.4966135382257385, 0.5140147511467077, 0.4911370142841981, 0.6027106417329451, 0.549787536692702, 0.5998810228477874, 0.6149702765181131, 0.5930634149610139, 0.5880369262848986, 0.5769853508175173, 0.5875887299575733, 0.5952775335331952, 0.1064885194795796, 0.26196489973042203, 0.1432748475046126, 0.4183138642680019, 0.3680371619906275, 0.28417560713605594, 0.21654628940326215, 0.2584214043521612, 0.20646695277626437, 0.3639864730218555, 0.3616036069206602, 0.3807442457207968, 0.3746467405578785, 0.38076955876517027, 0.368135106577302, 0.35565151198561173, 0.34354038761593797, 0.3588045700416971, 0.7376942791505026, 0.743592720315531, 0.7547129730973297, 0.7300312701237668, 0.7278918164900641, 0.7436670719374648, 0.7378688176284957, 0.7232132512403744, 0.7404485825779024, 0.10855095618741739, 0.10915526063294456, 0.10975136631979165, 0.09149578277352699, 0.10430520821640943, 0.10218325312479704, 0.09865634902391973, 0.09166705337540593, 0.09184123093109597, 0.12499870429603488, 0.12434084342211138, 0.13171840740825247, 0.14869525946081086, 0.17577246387177858, 0.19285783850386173, 0.15730318632121942, 0.13764588882855044, 0.1292471395371958, 0.4097745274371031, 0.4177572234671999, 0.4165662515870121, 0.40762144442497816, 0.42961253419141265, 0.43835797515892905, 0.43615077943594993, 0.44188549146721134, 0.4344832387428641, 0.3385012923763163, 0.349614095675434, 0.3377304697851683, 0.336597056817978, 0.34616016700119445, 0.33205462116933404, 0.33442073755654855, 0.3636805875387006, 0.3508027207681691, 0.1945128175716344, 0.19934005139964983, 0.19088923653452594, 0.185981250640189, 0.20207648615547147, 0.21124607808595797, 0.19371950612362443, 0.19943349203093774, 0.1892969525631003, 0.19024549949284242, 0.18565268173921778, 0.2460715934263059, 0.19564792900915307, 0.20167286025788, 0.22380596037493394, 0.2660426643151118, 0.21161135532431563, 0.21953013641235986, 0.16370038976393664, 0.20027895878070578, 0.1498945229400266, 0.7855265552929205, 0.7714695472711058, 0.7771231987876382, 0.7701955433716218, 0.8172922906878067, 0.7572437853265828, 0.7756952585895702, 0.20458361121702062, 0.6753146498473104, 0.20398159019433493, 0.7402091715137917, 0.19943245386988218, 0.21045880765635283, 0.15152146140398892, 0.21165879843024127, 0.18381992306173445, 0.18569789883525611, 0.1752587921564953, 0.19068808340810195, 0.19993500996955937, 0.18664771776990852, 0.17901486503567432, 0.2037446751976809, 0.18029364886308652, 0.08128702680191147, 0.08149752012469502, 0.08367392984598832, 0.08313140589062129, 0.08269874192185744, 0.08944718192892342, 0.07171727786499726, 0.07935165289162138, 0.07371771217588285]}, "mutation_prompt": null}
{"id": "3f4259c7-d154-4809-865e-4fabd6757181", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutant = np.clip(a + self.F * (b - c) + 0.25 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.2 * (np.argsort(scores).tolist().index(i) / self.population_size)):  # Updated dynamic probability\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Incorporate stochastic ranking to dynamically adjust the local search probability based on current evaluation progress.", "configspace": "", "generation": 28, "fitness": 0.4908617243301831, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.49 with standard deviation 0.29.", "error": "", "parent_id": "b2d85e6d-0c5a-497d-bed1-c9abd541e4ad", "metadata": {"aucs": [0.8745177899678104, 0.8760810553442168, 0.8832984904697208, 0.8803627908430172, 0.8894195704019662, 0.8857658481616564, 0.8830141761020773, 0.8843254629984847, 0.883648427657004, 0.7498136768891658, 0.7612041123777894, 0.7613529595427954, 0.7496633491680846, 0.7600381092660344, 0.7322048326326683, 0.7666609903556527, 0.759181769314917, 0.7678341719633814, 0.12117067795888925, 0.1463843314184493, 0.13289012966256375, 0.1739774811254723, 0.12701161372454428, 0.3518730977490696, 0.14852237344490582, 0.16827003985782507, 0.13062312464746806, 0.13731115478306422, 0.11062804488945399, 0.10429400379966425, 0.13299928490088864, 0.10878515228332275, 0.12241287625677999, 0.1174413036021309, 0.1360295931723362, 0.12441370243518901, 0.9105485434414775, 0.9388304489837341, 0.8809104854881055, 0.9124518704929727, 0.8813260744465501, 0.9386335702352719, 0.9186382282672565, 0.9093822693527049, 0.9859124985552763, 0.7338081752600656, 0.719438077085626, 0.7155980268760945, 0.7343753744191692, 0.7060429427887347, 0.7287073903576806, 0.7276742544617767, 0.7228766133937485, 0.7400969123183403, 0.8653729726310819, 0.8908899053381244, 0.8987802023827903, 0.8785006139109813, 0.9022397297230639, 0.868585099289142, 0.8723162283033439, 0.8862443462940084, 0.8999914264412263, 0.6713792724145776, 0.26392438927950346, 0.5662311812378005, 0.7590384164445715, 0.4412450005438958, 0.3563549030951896, 0.13512366402949139, 0.5900717323098472, 0.526076722492894, 0.27426406600534026, 0.18983054152219936, 0.5762307625079981, 0.41499317242540557, 0.5671295217052716, 0.21279231656259712, 0.5872302440218469, 0.4336280631647158, 0.22425258693484018, 0.6180024346046994, 0.2885850998906194, 0.6174012710731355, 0.6103953148140744, 0.6666665097776308, 0.6020941870884937, 0.6776120556308856, 0.5800592514311871, 0.6931853567693731, 0.7710912158535136, 0.7437867189691367, 0.7321795354691831, 0.7315499345682057, 0.7332020804211825, 0.7402981946729199, 0.7411759138135292, 0.7355962720964271, 0.7250278263158627, 0.24649076320731977, 0.2154685965473242, 0.17950359628528967, 0.5907374687474654, 0.42176395684339185, 0.6070411747188756, 0.24199390437446322, 0.2367642848063246, 0.19097720087041792, 0.5521821895300036, 0.5586329261139003, 0.4263546236056158, 0.5740992632076714, 0.39702914858794724, 0.5870820584252763, 0.5579017570454592, 0.557191705516086, 0.5341555258958954, 0.7904007796319377, 0.8417421246387492, 0.8354307434382142, 0.8536342897691738, 0.844420393386374, 0.8398192292926645, 0.8415852466044252, 0.8331566961814761, 0.829423086066738, 0.1393674844056343, 0.11487170842938199, 0.2641908944152438, 0.3549152326476689, 0.11423447245523333, 0.25317739196905253, 0.13227570045651205, 0.10543738742849096, 0.11665717043942114, 0.13954979822908775, 0.12948105783022057, 0.14533167565497884, 0.1515285687244452, 0.3148662906015789, 0.3706311869913338, 0.14221912246338486, 0.13996199518685792, 0.15601002793976115, 0.6254304030352458, 0.6269582784918614, 0.6195516481979699, 0.6348961335702741, 0.5883435768098235, 0.6275014753660494, 0.6434246240833594, 0.6351775085265898, 0.6442999199411785, 0.49652641065093295, 0.4185964443754884, 0.48476386945632965, 0.5512891907075608, 0.48717617331822116, 0.5157564019424177, 0.44892889658128354, 0.5688914560578131, 0.5677470351545636, 0.2382545001916756, 0.21886118305898372, 0.22674027584743095, 0.21024610922747422, 0.23415691272867734, 0.2183991810591681, 0.21641160644891533, 0.2207196461129144, 0.2246929958704711, 0.20915876281582224, 0.6340480629616168, 0.20310446383707348, 0.6785969530472128, 0.24444424189583958, 0.23469297904347663, 0.23160723062146793, 0.2144037653781503, 0.6963805113973295, 0.18560244413097216, 0.19594354487745724, 0.8995168092907001, 0.9078005274990852, 0.8779925658946234, 0.8731009102002486, 0.7760688143830269, 0.16553199590457535, 0.9051284151060951, 0.20114860465925233, 0.21132002485350898, 0.902997337014892, 0.8654553137011226, 0.16779128002149524, 0.2084490491451626, 0.11176444283741116, 0.21184783650070738, 0.8933804014915805, 0.19324776434000068, 0.1781934037184446, 0.17762005413145654, 0.1802007342961066, 0.1914075275677648, 0.17860784791064377, 0.18097456427436487, 0.1991791208295961, 0.2442203089791397, 0.09539618232828273, 0.0940247629005293, 0.09138022547083369, 0.08776170543797068, 0.09281214053906983, 0.0892559945337087, 0.08862784230616039, 0.08623353933725719, 0.09697611182401467]}, "mutation_prompt": null}
{"id": "e4c51a05-7438-4795-b2a4-68c8609d9d13", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Adaptive mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand() * (1.0 if scores[i] > np.median(scores) else 0.5)  # Changed line\n                # Slight increase in the bias towards the global best\n                mutant = np.clip(a + self.F * (b - c) + 0.25 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.2 * (np.argsort(scores).tolist().index(i) / self.population_size)):  # Updated dynamic probability\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.1 * (top_mean - trial)  # Changed line\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Enhance exploration by introducing adaptive differential scaling and leveraging neighborhood-based local search.", "configspace": "", "generation": 29, "fitness": 0.483260235854539, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.30.", "error": "", "parent_id": "3f4259c7-d154-4809-865e-4fabd6757181", "metadata": {"aucs": [0.8931643409912638, 0.8853894184755078, 0.894370091809011, 0.8895869453521819, 0.8952154805767712, 0.8885391218382077, 0.8856397119111662, 0.8941736569525427, 0.8889814472929382, 0.7628414535350065, 0.716865895865561, 0.76969341507777, 0.7653502350638037, 0.7699608109799051, 0.760701504905205, 0.784043487272438, 0.787322462854944, 0.6942872025436309, 0.1645385770013572, 0.14232581388158183, 0.12218857601226207, 0.14369559237445284, 0.12693236645881878, 0.40933945065224575, 0.1339513881915193, 0.15580622453467674, 0.1399378292221658, 0.1176390921269056, 0.11249852018926054, 0.10963870072216109, 0.1337013363084385, 0.1118687974103999, 0.13243832407390033, 0.10836250284306403, 0.1271574931253041, 0.1831693963956197, 0.9181311457263726, 0.9200101264872372, 0.9176381869977032, 0.8985049170991596, 0.9007264452129043, 0.8905180484676051, 0.9267794590419596, 0.9117424610107224, 0.9859097831425563, 0.7563894591805409, 0.7536542181393776, 0.7467287512322842, 0.680846400708818, 0.7274300598481667, 0.7582659779119131, 0.7386252253627122, 0.7192199587536536, 0.7166759215631986, 0.9059948384558308, 0.898222595580747, 0.39044416484158706, 0.8990406869690318, 0.9196331857716253, 0.8692786983961146, 0.8856102791253162, 0.8695331993976623, 0.8267875408670933, 0.18821949150415906, 0.2934840048731929, 0.7932368941341946, 0.29400468561457394, 0.421023534099231, 0.4159113483951985, 0.24701132175262863, 0.2410094277370669, 0.20051939047833878, 0.18780323577304447, 0.21252141285397208, 0.2040392070233361, 0.25861240684300246, 0.1669931399594885, 0.4763782756459164, 0.3675743271873504, 0.23141291588860935, 0.1918793027382285, 0.444527011405793, 0.7235349335701916, 0.5803275483158448, 0.7068409424151325, 0.5327846769888815, 0.26068330412653673, 0.4943185976500013, 0.6579699519974322, 0.7295178125639621, 0.26574821896822565, 0.7597539172818534, 0.7681867386580887, 0.7658858117860105, 0.7546402832694187, 0.7447554806388937, 0.7872544912743057, 0.7724983722164598, 0.7600751614961488, 0.1655507214838694, 0.22460203083665553, 0.31777905521584526, 0.3637338141331683, 0.1573027377327587, 0.5820556031656137, 0.2883943455423188, 0.22713319370273166, 0.35255722904415254, 0.6011718240734037, 0.4293693580643839, 0.5968697741967506, 0.5867269873818708, 0.6221204455024709, 0.5146465442494089, 0.39263473152097317, 0.611120715405161, 0.5902783566478824, 0.8205452576878645, 0.8541329712974355, 0.8430035105578839, 0.8485159547978186, 0.8494709750964227, 0.8545729131988795, 0.8351303957008898, 0.7403510556817215, 0.8507337259032894, 0.09187104508681931, 0.10978514900799818, 0.11163727154722092, 0.13287637236465344, 0.10915939557691001, 0.13472245776712366, 0.12039746935648576, 0.13251443884522596, 0.11897315573478628, 0.4065508329585258, 0.14784361918666855, 0.14503231144134465, 0.14996611999337495, 0.2642371357945509, 0.16010614351660624, 0.1667951613432993, 0.1435290599186716, 0.13579209839627182, 0.5947794599064413, 0.551780280161459, 0.6309443980443246, 0.557422641931453, 0.5859307059059873, 0.6854135072643406, 0.666233465390157, 0.6620596533052734, 0.6750536458615778, 0.39662634279810505, 0.5369824613467924, 0.2896771512073736, 0.5208721249419221, 0.5014534612546477, 0.5462619766310473, 0.5751170681460775, 0.5499312515596074, 0.5790990020247655, 0.20829208409143385, 0.22134328082602095, 0.2275190331442818, 0.20064701101484084, 0.20569344933146338, 0.21311926993615793, 0.23057530374048263, 0.23945749858816712, 0.19987668223872368, 0.19142492458584082, 0.2445065954164476, 0.24077546536793815, 0.2223386328396224, 0.20564724295741765, 0.2148993461291514, 0.23518570910165004, 0.23064386763339795, 0.2171262819193841, 0.9054135287249138, 0.8833593163163377, 0.9008976654381724, 0.9074943208461634, 0.9089036982747499, 0.910770189026484, 0.18581653673168474, 0.14140598551019612, 0.8939826920136948, 0.8896084764439641, 0.8731449891182315, 0.8850322676909961, 0.21138489092389479, 0.21019809201349549, 0.8781971581846446, 0.8047074117655614, 0.8945248327577098, 0.9119020676359092, 0.18407784926805326, 0.18127839465102458, 0.1730444263961154, 0.1720191575151192, 0.18042263807705472, 0.17679001656605853, 0.19222364904333766, 0.1797126857968393, 0.17971752139022212, 0.08953752146979255, 0.09080720653634711, 0.09765881741398974, 0.09708694074837598, 0.12194114014856028, 0.10449779147101057, 0.08916342591007864, 0.0934128764635761, 0.09247504685753305]}, "mutation_prompt": null}
{"id": "1076d77c-37c2-4a51-8c90-68ad75fee754", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Introduce a random walk component in mutation\n                mutant = np.clip(a + self.F * (b - c) + 0.25 * (self.best_solution - a) + 0.05 * np.random.randn(self.dim), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Refine local search mechanism\n                if np.random.rand() < (0.15 + 0.2 * (np.argsort(scores).tolist().index(i) / self.population_size)):  # Adjusted probability\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + 0.1 * np.random.normal(0, 0.1, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Enhance exploration by incorporating a random walk in mutation and refining local search mechanism for improved convergence.", "configspace": "", "generation": 30, "fitness": 0.29502370826287044, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "3f4259c7-d154-4809-865e-4fabd6757181", "metadata": {"aucs": [0.5368670732273031, 0.5124876413198352, 0.5347461942271765, 0.5270023618179206, 0.5221834546412851, 0.5357348948819404, 0.5539870729632168, 0.5249798983493514, 0.5220083060228141, 0.13159692753866803, 0.16620960282955088, 0.1443302693614429, 0.12213122795487563, 0.17734641166646248, 0.159975533100716, 0.11600672408736568, 0.10909381856096456, 0.0726329285742977, 0.1185162660302922, 0.1989035503850256, 0.15239384189691196, 0.13238043342809047, 0.1328009364470747, 0.1522435008510824, 0.13388971805752203, 0.14753088391331748, 0.14272121651824887, 0.11724746460450919, 0.12442792314580342, 0.10733350108119033, 0.10372202032695366, 0.11985740152122804, 0.1246014354461411, 0.12296200857371709, 0.1272982377356744, 0.12417532937805642, 0.9034615898086201, 0.9456348264619767, 0.9450830858374972, 0.8969450182854128, 0.938938185034425, 0.9347025988467565, 0.9324430584676896, 0.9132821627806819, 0.9088090914225472, 0.3881415364083435, 0.3772498179363306, 0.3558246525645836, 0.36471866754467097, 0.37355772156160205, 0.3651259500208527, 0.36488128518412866, 0.36670132425797297, 0.36048386789008036, 0.8454243109743003, 0.8837866426808709, 0.8417528098145002, 0.9019816872360746, 0.8757683811761694, 0.832445309688195, 0.8432283961332312, 0.2337803627570414, 0.8814985409744921, 0.2786609537361434, 0.21183829995168924, 0.20182516952175134, 0.2122811628571466, 0.20203968971509045, 0.21119571468676301, 0.2265079466695844, 0.20682371235973063, 0.20528311157145085, 0.21562848905552945, 0.2021032891533432, 0.20183758741302704, 0.22124724207967306, 0.2160576804069848, 0.19444436520495434, 0.2181885438702117, 0.22417296820035826, 0.2250381104014475, 0.1062897427930195, 0.08469491318898092, 0.08498732576051826, 0.12309158366516437, 0.08198569283618307, 0.10683689846870514, 0.10302721929124259, 0.060799683898784096, 0.08697853578686476, 0.15275426209183096, 0.18229778041420308, 0.1997068904838456, 0.1440993315353002, 0.1424655192559634, 0.1543472107914422, 0.1947482280390368, 0.14378544334305443, 0.19419300077372004, 0.005813159035357063, 9.999999999998899e-05, 9.999999999998899e-05, 0.02226265721510612, 0.0008586059396269441, 9.999999999998899e-05, 0.0018085074542583124, 0.0033000868265242733, 0.009191301320448986, 0.15085744283661007, 0.15601291934198525, 0.13441154050646842, 0.15740989977720632, 0.1486877879136166, 0.1705823364101634, 0.1517558665978841, 0.150945545711349, 0.14499976442103213, 0.4937372587518143, 0.4688060373931682, 0.48137618331828225, 0.46841286595882037, 0.4569830926205919, 0.4639240181117409, 0.4577816295373327, 0.4764160939095081, 0.4849712676051745, 0.12244754465885976, 0.11420150387279515, 0.124300882584094, 0.1163985728898399, 0.10794481775320963, 0.09787243772280674, 0.11724999040771089, 0.1337499354101518, 0.11314537696408877, 0.17949712627900494, 0.14971258601635218, 0.15847881936328923, 0.15104305042434352, 0.16243967026353168, 0.15357423141460824, 0.12883103925102646, 0.20580597369912967, 0.22395064334859327, 0.32098706143241285, 0.3275757598797324, 0.33239650184089886, 0.3292622912920673, 0.3239552220182883, 0.32894641925413903, 0.34215283217138626, 0.3442148522074089, 0.3360993965028315, 0.2722429365846206, 0.2711716602962517, 0.26658268219484726, 0.2629193502184195, 0.2647601526029312, 0.25770079168852855, 0.2724456813706615, 0.2746389706623389, 0.27288531367077684, 0.23056823061357623, 0.214374373802785, 0.21554915500145988, 0.24139848098730077, 0.20942563151166516, 0.21993505691992277, 0.22043589418862541, 0.22676907436106042, 0.22052632180469822, 0.19801524613051957, 0.2241945311459479, 0.33155087732705146, 0.3223636100452705, 0.2371361816804961, 0.2370971608478275, 0.2976081532006897, 0.20183070705951955, 0.23177577229607682, 0.18698031661611525, 0.18673684046251915, 0.18308540355123082, 0.8136419852181358, 0.7870654354610206, 0.8074145324192209, 0.8105309088880084, 0.772952434469472, 0.7344352481006501, 0.7160837675278442, 0.7108977311934166, 0.7064387927381823, 0.6886491750055211, 0.6898944277789593, 0.16692582915784637, 0.21304259100078016, 0.12780968476863197, 0.6882263678286284, 0.18705845454089065, 0.18864815923552936, 0.17715992003199676, 0.1800370035067288, 0.18447770634451077, 0.18755802641381236, 0.19190932148037287, 0.18342636507237875, 0.17972396081173725, 0.0892715204018556, 0.08784648276946883, 0.09583804663522133, 0.09241462530771316, 0.08699193848990472, 0.08534457701079301, 0.0993938222612718, 0.09120570165400554, 0.09202128348728478]}, "mutation_prompt": null}
{"id": "4c3fe370-9bb2-4ed7-a907-4887364678c2", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            sorted_indices = np.argsort(scores)\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Adaptive mutation factor\n                self.F = 0.3 + 0.6 * (1 - scores[i] / self.best_score) * np.random.rand()\n                # Dynamic crossover probability with elitism\n                self.CR = 0.7 + 0.25 * np.random.rand() if i in sorted_indices[:int(0.1 * self.population_size)] else 0.9\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                if np.random.rand() < (0.15 + 0.25 * (sorted_indices.tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[sorted_indices[:int(self.population_size * 0.2)]], axis=0)\n                    trial += np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Integrate adaptive differential evolution with elitism and adaptive learning rates for improved convergence.", "configspace": "", "generation": 31, "fitness": 0.2783558187942777, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.26.", "error": "", "parent_id": "3f4259c7-d154-4809-865e-4fabd6757181", "metadata": {"aucs": [0.8508278323801415, 0.8327606444358383, 0.8502624652257149, 0.8248711528377035, 0.8528283203489054, 0.837839636576412, 0.84474617913277, 0.8768619379996485, 0.8510072891101458, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17899211332842302, 0.24493291634535364, 0.14926314097705107, 0.1807201607718889, 0.5787173857401613, 0.17124912167453044, 0.14760187639311573, 0.3335932775568985, 0.15198565757162175, 0.1265230228284152, 0.1498192991674132, 0.12460329192192965, 0.14205812655902883, 0.11468859749350502, 0.1307653675748257, 0.10454692343108696, 0.10336664292097775, 0.11515869720486716, 0.9658719803577238, 0.9751619946456139, 0.9673120641421505, 0.8867544609064535, 0.8556911798869454, 0.8794462104042146, 0.5856425857647745, 0.43794217001566926, 0.843538370325167, 0.31644938943043655, 0.34697568640100795, 0.23996514244706202, 0.4603819675080947, 0.276466936984163, 0.21454142800899423, 0.2743634413829241, 0.23096216828948968, 0.23192557595814756, 0.20993368390716427, 0.8579284165374087, 0.2214340668103616, 0.8522601683778885, 0.8641254752823933, 0.18938198791288863, 0.7721714204973551, 0.7658771710663435, 0.7907323705679001, 0.19361194108955304, 0.09275318431661306, 0.13378531024157814, 0.06446515958839305, 0.08259400955305085, 0.052631769555187, 0.16036603742936129, 0.3632106351264581, 0.0961595423835705, 0.21326195327646214, 0.18140098511541403, 0.11323142809734732, 0.039867025646495136, 0.03957322554051357, 0.08174896863467307, 0.16462783835453343, 0.1567763320791402, 0.1386553727962173, 9.999999999998899e-05, 9.999999999998899e-05, 0.004680584000511634, 9.999999999998899e-05, 0.012810299834901118, 0.0050467704931048685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1225001559401202, 0.11402218092526595, 0.07262802401981949, 0.06285024148765439, 0.04908423310943766, 0.11258578743287595, 0.16300618767768305, 0.027237536351107705, 0.1558647458034217, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17354007463701715, 0.07315859428469307, 0.1619565260033542, 0.20774652063590182, 0.24155142939888552, 0.02596984179982409, 0.24815611619858202, 0.23254150361022752, 0.32947121814816593, 0.5473707905705292, 0.5507400912577951, 0.6188521486609998, 0.7030944491623337, 0.7522998489051574, 0.5873792843833527, 0.640286867088848, 0.7507961125783731, 0.5964174301939302, 0.136931430121491, 0.12944634716330639, 0.1270782145303201, 0.1575513657780726, 0.10991551503224894, 0.12087947876283722, 0.0813251762515903, 0.09944137970926092, 0.08921765378489088, 0.3029654992035171, 0.17000456949661835, 0.34352927263338784, 0.2730721919269353, 0.2762311981238075, 0.1457797074619258, 0.3264327537421724, 0.2530601404002718, 0.1464206577134588, 0.4602511195080712, 0.44645598204187886, 0.4740755809421333, 0.4505979945914429, 0.49898345550374723, 0.4950622821744597, 0.582009016999838, 0.6068196775638122, 0.5731645182096023, 0.2709050790347246, 0.29542158145741115, 0.29473398760420655, 0.443655944827297, 0.32847463256233145, 0.41334652770106173, 0.2628906990796974, 0.3767929985548434, 0.4143438758492093, 0.21097225005335762, 0.19692579203744054, 0.21686513791967754, 0.22979290497347182, 0.19910953022119326, 0.22081972547701567, 0.2390663612054924, 0.20997067568963113, 0.20640202019296616, 0.10629754352260401, 0.1629941682956776, 0.2774365520800003, 0.2022743640643565, 0.34043414085778634, 0.23600453500147767, 0.16522690960098774, 0.16594767295972035, 0.16532952400696233, 0.1852062663683438, 0.8334700718220646, 0.19362553860268783, 0.4452789016964779, 0.17387140118025568, 0.5104118861376137, 0.1842049525785977, 0.16874469802384795, 0.8285412720234072, 0.7380772984496539, 0.208091190507806, 0.20569820999884192, 0.2087975269833794, 0.20876742725253106, 0.16623214328204172, 0.1262389306765852, 0.20456637298439562, 0.20327280087096766, 0.19576234015199645, 0.18552423047689892, 0.1872668289891356, 0.19070379393943893, 0.18776598876646833, 0.1780629071635833, 0.18140811964451364, 0.1744456950129657, 0.1826521748411266, 0.084491588212115, 0.08828882306502961, 0.08235516580769875, 0.09175727766306774, 0.08501110569985537, 0.0962449865986853, 0.12484840745160564, 0.10214601858144434, 0.08529229911160197]}, "mutation_prompt": null}
{"id": "cede4de4-4cff-47c4-bff0-4998143c9fcb", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.6 * np.random.rand()  # Changed from 0.4 to 0.6\n                # Slight increase in the bias towards the global best\n                mutant = np.clip(a + self.F * (b - c) + 0.25 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):  # Updated 0.2 to 0.25\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Enhance exploration by adjusting the dynamic mutation factor and improve exploitation by fine-tuning the local search strategy.", "configspace": "", "generation": 32, "fitness": 0.44322280626569704, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.44 with standard deviation 0.28.", "error": "", "parent_id": "3f4259c7-d154-4809-865e-4fabd6757181", "metadata": {"aucs": [0.8444579477313745, 0.8439546998458037, 0.8480634885012592, 0.8531380123448008, 0.8516191095588375, 0.8663129330835627, 0.8557425888667242, 0.8440770656908749, 0.84506156182172, 0.7008565867479724, 0.68652220272778, 0.6917144438317215, 0.670945266335166, 0.7032995737309942, 0.689382168769665, 0.700350285115872, 0.7005998585774094, 0.6814608662771238, 0.15374393554631938, 0.12661836024626905, 0.11365848597591555, 0.13075840502574354, 0.12137196103851478, 0.10993737781811763, 0.1351681796211246, 0.11375272099396949, 0.12358412246886186, 0.10734353260150453, 0.10406147237529473, 0.12678179818261448, 0.11982069560500497, 0.11553277964096687, 0.11270395018592938, 0.11924961650151489, 0.11070586394149029, 0.11920090133364902, 0.9621284771282562, 0.9464805060325643, 0.9156264751748038, 0.9072631376304587, 0.9071274961113562, 0.9282602431614572, 0.9034693556330433, 0.9542243074616891, 0.9483389337814406, 0.6446838180624073, 0.6253319598574155, 0.6474278552322417, 0.6283040078976666, 0.6336121123687029, 0.6421294593722315, 0.6565709019062218, 0.6502294794966597, 0.6566209858507503, 0.8590515984169704, 0.8725544674611395, 0.8515948428394531, 0.8950503109819542, 0.8528204292346977, 0.8358602850769316, 0.8466923117502837, 0.8806481527459777, 0.8552795468507197, 0.40096948735180893, 0.5618373739076531, 0.5096952974272819, 0.38070507517723806, 0.4019894507257785, 0.5452180970225733, 0.5974446222590851, 0.43960948994066185, 0.44026239921195565, 0.6139413085033506, 0.49619095755616205, 0.3465110729352967, 0.6070192399408197, 0.5213078873092128, 0.4902158982271573, 0.5281102224670391, 0.4790770431982877, 0.5841984390098682, 0.6096728678147151, 0.6043731826843193, 0.5809846203170588, 0.5806965423784247, 0.6039544586406034, 0.5632709670397986, 0.5578492212666624, 0.5895004780473642, 0.5942387080530087, 0.6740295804726031, 0.6962259047494672, 0.6592393642477079, 0.6656944462036413, 0.6792032278682657, 0.6589083829570892, 0.6806787356908237, 0.6844670286244655, 0.7054128581779489, 0.24362849384584173, 0.15260512523747582, 0.3045187494761067, 0.33774009407825667, 0.3087108584878576, 0.24309771675139324, 0.21400691962328633, 0.16523965201241608, 0.2682113827193129, 0.42837858455299016, 0.4600635450280617, 0.42723566873765706, 0.4304157309361841, 0.4527307530093544, 0.4602216646996047, 0.4442543243213367, 0.4548316798733607, 0.44211580399630057, 0.7945687356947225, 0.8034352233886614, 0.7820961223914309, 0.7700185545366747, 0.7828244020483554, 0.8026512549428174, 0.7991108412903456, 0.7872722617617324, 0.7801247693546569, 0.09962537892617218, 0.11903885578953977, 0.11036271409705478, 0.103925276387685, 0.11709220600996073, 0.11451199893668274, 0.10896503202966601, 0.09912914885786106, 0.11606770028532376, 0.15890062594608134, 0.15471034384487647, 0.125226851775726, 0.14340728152247462, 0.1401456593892776, 0.1599573490844246, 0.14790305464910214, 0.12724373415564838, 0.14016295018370617, 0.5365318715072807, 0.5066105659513322, 0.521244021711466, 0.47801015428657234, 0.5190380741042726, 0.5051634206850848, 0.5331859048580988, 0.5273014266668433, 0.49796110870840016, 0.4045271097406835, 0.4062518703896776, 0.3989229607949756, 0.43400855258391613, 0.38391717052338814, 0.42107783590288783, 0.4041989468340208, 0.4543535786700973, 0.4444292808719994, 0.199242965755963, 0.20423406568901314, 0.20634192585083422, 0.19664619224501256, 0.1953105557402225, 0.22087351077730732, 0.21891841400380885, 0.20227210238479876, 0.20465228150983594, 0.1854975167609395, 0.195446080769333, 0.22217362034815213, 0.1784714156770555, 0.22404573691638596, 0.21924210405685518, 0.19880624481093212, 0.21236030791027494, 0.19244310431730627, 0.18403545239285035, 0.8695566596590943, 0.8541710196987369, 0.863291586169011, 0.1963370206048568, 0.19675724231575964, 0.18428318451539283, 0.15168015319789607, 0.14546169917674656, 0.8178909447871603, 0.2108079605297294, 0.8321048945563173, 0.1673581115535029, 0.20310434147025513, 0.16147226292812644, 0.20796353275256696, 0.21018383916766936, 0.8523043589416592, 0.18597356425206235, 0.1949860312796301, 0.1775710848586024, 0.2194487734219296, 0.18629474006760316, 0.17911140617436527, 0.18029108879741873, 0.17860195772186815, 0.1838358034936558, 0.09370910479105021, 0.08577521933057597, 0.08360295427093134, 0.0844442384196542, 0.08989454873260416, 0.08162495277268722, 0.08736477992884706, 0.08869869996802282, 0.08429765212507989]}, "mutation_prompt": null}
{"id": "475d8c07-5112-4df9-bc29-e5f014347685", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutant = np.clip(a + self.F * (b - c) + 0.25 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.2 * (np.argsort(scores).tolist().index(i) / self.population_size)):  # Updated dynamic probability\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.05, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)  # Slightly reduced perturbation size\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Adaptive perturbation with top-performer influence for enhanced local search precision.", "configspace": "", "generation": 33, "fitness": 0.4838855204674751, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.29.", "error": "", "parent_id": "3f4259c7-d154-4809-865e-4fabd6757181", "metadata": {"aucs": [0.8821816979623288, 0.8763216381750363, 0.8830759272466056, 0.8815136855003975, 0.8807715908993636, 0.89395726403553, 0.8887491175634331, 0.8894286848975399, 0.8806212901169796, 0.7563889333576062, 0.7529312027467838, 0.7388873645867167, 0.7509165653362184, 0.7696285635656316, 0.7621610732626282, 0.7537976404277698, 0.7718331471362576, 0.7636360164825342, 0.14805953887419887, 0.16524873716042332, 0.5084228332801761, 0.14081706215639278, 0.1299001746004087, 0.3357991468758169, 0.15746694760721003, 0.3499646184807952, 0.12297939197132068, 0.1056461325064425, 0.09811334334975674, 0.10479496105257824, 0.1188547034906815, 0.11652671454041896, 0.11715829388516685, 0.15343175231182848, 0.12538430604790463, 0.12719121575384884, 0.9092048687904666, 0.9238777238561722, 0.9179813096586646, 0.926548830301344, 0.8818203353276565, 0.9121748911770559, 0.8974993812879383, 0.9055401343065534, 0.9859109691396811, 0.7175626424268446, 0.7027840393938336, 0.723483369733124, 0.6802673295087189, 0.7428068691888782, 0.733982987335001, 0.7262376321320234, 0.6745317357851581, 0.7164808607870613, 0.8959727968207635, 0.8943110557030451, 0.890194143655072, 0.8780124318688356, 0.9054242113884174, 0.9006081367142256, 0.8857321485970664, 0.8761701924191696, 0.8761747218151533, 0.6054720184183902, 0.3940441837264851, 0.32618945085152695, 0.43809970215072247, 0.46043625616923733, 0.5261506690310924, 0.32317287187738697, 0.26757934821696394, 0.554816472939218, 0.206909774442528, 0.2827987453642773, 0.528536955442749, 0.5700603345647772, 0.6333592172763711, 0.26614854072467153, 0.2449542836817038, 0.4636668691335213, 0.5004895671436302, 0.685621919133681, 0.6609117492413737, 0.32624382154900955, 0.5124465627203942, 0.6000869694726227, 0.63756355750066, 0.6272209731151412, 0.6819598624838696, 0.6742751191012897, 0.7521995549739698, 0.7455857872496294, 0.744818526922973, 0.7619371332896158, 0.48485066044964353, 0.7359746699256513, 0.7315392158565097, 0.7682774267921008, 0.7401739170236783, 0.36547921237016046, 0.24940784989150744, 0.15458287817017813, 0.2763876033885847, 0.25394050838559235, 0.18649073443498232, 0.35872492625028396, 0.2525970564578309, 0.16530978206517355, 0.5275120230335313, 0.5690331640565758, 0.4989072796875066, 0.5849396084921608, 0.5354726050578307, 0.5891794406778483, 0.5535059971015189, 0.5790913172012359, 0.5075487457457094, 0.83687998253862, 0.8571914943114164, 0.841795328599683, 0.8352837026693507, 0.8420473178866101, 0.8382364828578036, 0.8360889016656988, 0.8400839310189165, 0.8355145257810245, 0.12677767665671436, 0.15498004158092404, 0.11032627524247252, 0.13974897727450952, 0.11989730731651072, 0.11823503368799315, 0.2373429943742149, 0.12531529727258606, 0.25956011280027225, 0.15889882065565708, 0.13889224503907138, 0.14480600885901873, 0.29001842701225256, 0.13832994085129813, 0.5223534927079363, 0.1321585232978657, 0.15133474230643806, 0.13238091833938648, 0.5680770745378325, 0.622357557754752, 0.6319632228975908, 0.6263682277480258, 0.5996490081188197, 0.6295665119569347, 0.673048448756256, 0.654717227163885, 0.6064711104512199, 0.5442035857272381, 0.48283287965578714, 0.49140782961476415, 0.4766069795825758, 0.5442236524438628, 0.5277738183677319, 0.5331286361591596, 0.5480559584646745, 0.5250733233311664, 0.2340455193718297, 0.21501247184762706, 0.22330394650778163, 0.20410933146830534, 0.23170274944877423, 0.2185053422140818, 0.20808802270665494, 0.21479074609749205, 0.21651645704125033, 0.23199046763781372, 0.2439090231791331, 0.2390699179528376, 0.20286428393985811, 0.22201386072077833, 0.6392144752043096, 0.6786167194086665, 0.23556324798110972, 0.2043311612751051, 0.18618574833777457, 0.1501921579087495, 0.1872576418006946, 0.9156906661393558, 0.8818314602489175, 0.17130463389279282, 0.814996208142897, 0.8770414682500746, 0.8978161171267942, 0.8703159895008669, 0.21192824907785734, 0.889179438133439, 0.20803347520647453, 0.16753537178558675, 0.1654277916968735, 0.16041745106564953, 0.21161641471997295, 0.8998243156603967, 0.17732008388866438, 0.17403584696445362, 0.1784287783981081, 0.18101244315161702, 0.1854546909696727, 0.1860882089039495, 0.18188341418806742, 0.1885695823199368, 0.18888628530008722, 0.08766705880542036, 0.10421655455831347, 0.09284746916080744, 0.08626133231986277, 0.09157601102695156, 0.10244911563684034, 0.0903261150702529, 0.09114171980022168, 0.09432136568837901]}, "mutation_prompt": null}
{"id": "2e2ed420-25c4-4646-8cba-54eaf5325c70", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.4 + 0.5 * np.random.rand()  # Slightly increased range\n                # Stronger bias towards the global best\n                mutant = np.clip(a + self.F * (b - c) + 0.3 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.2 * (np.argsort(scores).tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    # Reduced noise in stochastic ranking\n                    trial = trial + np.random.normal(0, 0.05, self.dim) + 0.03 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Adjust the dynamic mutation more towards the global best solution while reducing noise in the local search.", "configspace": "", "generation": 34, "fitness": 0.45971838159200357, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.27.", "error": "", "parent_id": "3f4259c7-d154-4809-865e-4fabd6757181", "metadata": {"aucs": [0.8527391203864272, 0.8405656029678883, 0.8385923003305077, 0.8448954871821338, 0.8533121712737709, 0.8332693512499594, 0.8450233393660466, 0.8453078830612515, 0.8506342439124042, 0.7105919165906616, 0.7018809819501726, 0.7019003830555177, 0.6860524801870795, 0.7074191416746398, 0.682233372871162, 0.6995355102406695, 0.6781204012181573, 0.6848098771889024, 0.12930635891203068, 0.11046284378293025, 0.13159708426881012, 0.1084605532006695, 0.10886230563236765, 0.13792289342469177, 0.1327145326074306, 0.11776151896132037, 0.31870825202668107, 0.12639732853330665, 0.10510746186583197, 0.11021388331559812, 0.1150423401375994, 0.09774155770277926, 0.09974317648097863, 0.11419941589575211, 0.10519411407739354, 0.12322371264553988, 0.8902646834104413, 0.9006711864382079, 0.9737558464934828, 0.9152882211630282, 0.9379842320468393, 0.9315308975663155, 0.8942987972635337, 0.9400708644922104, 0.9469649360706527, 0.6276614153171505, 0.6224712524355824, 0.6272354882421755, 0.6260303839407657, 0.6119177641357675, 0.6739137254882134, 0.6535493088108519, 0.6651687930944503, 0.6254737661723548, 0.8683363656741543, 0.8660816920068132, 0.8309776224380795, 0.8582318432953457, 0.8599436693655722, 0.878343889165763, 0.8606813761212853, 0.8464044909677674, 0.8596385958410387, 0.5530984406234377, 0.12685534640030616, 0.5660473176550789, 0.5193572842661461, 0.4639014866605943, 0.6219897771216648, 0.5867278927778381, 0.5278389634875451, 0.5452654612879829, 0.5663377594343542, 0.48624161996271775, 0.464581158052349, 0.623681630931437, 0.5952502088439192, 0.5680979738002156, 0.47535302810174307, 0.6107626782408839, 0.46187649566096045, 0.6076173588482522, 0.5774492656757935, 0.5730934144419616, 0.5820367949985871, 0.562067983692665, 0.5690209524663292, 0.5344882767650818, 0.5700216023705622, 0.572602677759164, 0.6327225445521284, 0.6638568192726809, 0.6406930484354121, 0.6608607393551451, 0.6813092324110972, 0.6803713436889514, 0.6571554476615857, 0.6867804048665918, 0.6747756974858634, 0.20826422798794297, 0.284071614759723, 0.1716599846998932, 0.41369328155735496, 0.44776382919357116, 0.44749326413104595, 0.22232255598424067, 0.2298994307094565, 0.24673032508517112, 0.43711566685849834, 0.4414746046753547, 0.4366221566404255, 0.4371414359666391, 0.4265120229123017, 0.4481138974624461, 0.43155792528201653, 0.410379160169685, 0.4053216599771323, 0.7911464595337763, 0.7657998523006757, 0.7715672581664226, 0.7954226997596101, 0.7913348557453869, 0.7862999294674377, 0.7807175278689413, 0.7814578976823366, 0.761726439622292, 0.10418487464370174, 0.10606943853380857, 0.10121628292286189, 0.11480132834489709, 0.10073420979358216, 0.11417854473634181, 0.1053780149676582, 0.12490897169402582, 0.10921078783369753, 0.14619402994072084, 0.20648470154568754, 0.14876557918491762, 0.1333968125685575, 0.14023321905185349, 0.123429731135835, 0.21075026069009817, 0.14652804711956902, 0.12520913914366116, 0.4790096931981319, 0.48192977359678113, 0.49353351049020067, 0.5081546497378542, 0.4439488002231514, 0.49438468347520215, 0.48590066680370414, 0.5029499386514227, 0.5015664511579034, 0.3991741907055424, 0.3606891119633653, 0.39341131903773574, 0.37396086087837555, 0.41702767189780865, 0.40167807083623197, 0.41128020983403246, 0.43522389218295277, 0.4289737986904014, 0.2244824369980637, 0.214717128472524, 0.19643320778706685, 0.22899304204391246, 0.22040866119988933, 0.20858842726651472, 0.18691964987806864, 0.20923237362902913, 0.22902185357533, 0.23476861795045756, 0.45881492136309887, 0.21919769844071346, 0.28896276106836194, 0.3473212755299594, 0.4448655320949979, 0.2188570624822056, 0.23212233964963713, 0.45316568063008766, 0.749034518026012, 0.8591537398020994, 0.8215506152843551, 0.8497178880236291, 0.19588727531420225, 0.8464022535055694, 0.8245775667682798, 0.8335224309672147, 0.168886561871877, 0.16970524647473795, 0.20727703708513723, 0.8453178350075496, 0.16581046056197923, 0.12632587897706704, 0.8168326011167956, 0.7899667509715796, 0.21079062032933593, 0.20568175769826202, 0.18985177105340645, 0.18373750304743275, 0.18716042967399282, 0.1782617958689794, 0.18159074981939483, 0.17467922447019846, 0.20013773652039413, 0.1793740603876347, 0.17809238022221985, 0.08696308326557922, 0.08038838303273044, 0.09425814115960007, 0.10121095551171744, 0.07868406386383353, 0.07727884128729179, 0.0882933702855958, 0.07418500918574633, 0.08300585226544022]}, "mutation_prompt": null}
{"id": "d091c995-cc97-4144-951d-31a12281bb18", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        chaotic_map = np.random.rand(self.population_size)  # Chaotic map initialization\n        \n        while evaluations < self.budget:\n            chaotic_map = 4 * chaotic_map * (1 - chaotic_map)  # Logistic map for chaos\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                self.F = 0.3 + 0.7 * chaotic_map[i]  # Chaotic mutation scaling\n                mutant = np.clip(a + self.F * (b - c) + 0.25 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                if np.random.rand() < (0.1 + 0.2 * (np.argsort(scores).tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Enhance adaptive strategy by incorporating chaotic mapping and improved mutation scaling to enhance exploration and convergence efficiency.", "configspace": "", "generation": 35, "fitness": 0.44357696660474355, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.44 with standard deviation 0.27.", "error": "", "parent_id": "3f4259c7-d154-4809-865e-4fabd6757181", "metadata": {"aucs": [0.8367925463049413, 0.8439346018872181, 0.8445530523489355, 0.8504595401848835, 0.8512304925560894, 0.8364607387173383, 0.8475750897933496, 0.8397824404515721, 0.8483044405038295, 0.6620020216214805, 0.6598971518659943, 0.6854225036162251, 0.6850692959075162, 0.6841275512264031, 0.6694191543392611, 0.6487286124545468, 0.6976939858864084, 0.7125608848052688, 0.11393090767024716, 0.11626219063588616, 0.14073638785831988, 0.12164016327418481, 0.13322195647523927, 0.11981080784357434, 0.10989311829049797, 0.1599720844122292, 0.11041720008690759, 0.09879819263045697, 0.10724954758790228, 0.10303709953569362, 0.11292739703299248, 0.11198893924075348, 0.10600042272044552, 0.09963152308753909, 0.11953143377458075, 0.11447734179324365, 0.957395179376417, 0.993217418250063, 0.946106294508727, 0.889141309057454, 0.9253731699076811, 0.9371105181429625, 0.9179751892032102, 0.918512590161735, 0.9401919873575987, 0.6475023008850631, 0.6181048361680259, 0.6181208033159242, 0.644624200903727, 0.6503278643658184, 0.6102183920362196, 0.6452258888921851, 0.6095234309309775, 0.6479308709502527, 0.8276911491482233, 0.8340876086896295, 0.8352528174333, 0.8612894195690257, 0.8497398420357086, 0.8542479208315402, 0.8571681241760717, 0.8528150403040455, 0.8348314409170763, 0.5120950678808447, 0.4520542105375429, 0.42600277572049794, 0.44806836171323705, 0.45080353540877793, 0.4649506785401374, 0.401896095445441, 0.531325893611994, 0.51203327741615, 0.43189861869719726, 0.28697962319693127, 0.4752470644915209, 0.476898283765434, 0.5121079411112988, 0.4926801111287564, 0.36270718648682, 0.4758317781248296, 0.3548310024235839, 0.5777714411234264, 0.5719814382450957, 0.5702759003355704, 0.5716111193166848, 0.556716468333472, 0.5758691547415911, 0.586424058009111, 0.5717906746779922, 0.5692145118916477, 0.667521204243065, 0.6667506197982926, 0.6590404133815102, 0.6719670166892344, 0.6420980766626668, 0.6080891529750447, 0.6772231977010397, 0.6516613780436978, 0.6727521006532338, 0.2187613735467191, 0.11575760052102091, 0.29288458431628683, 0.4194867447195937, 0.476365515177517, 0.2546722656439635, 0.130998159636458, 0.17181142649331138, 0.17230658063947668, 0.4467237432443588, 0.4543454269290098, 0.432394469427266, 0.4770328200504239, 0.46896856604437076, 0.441806464973576, 0.4294683591184316, 0.4553729764050649, 0.39030798494602637, 0.7775610404874702, 0.7825475041856038, 0.7937493706714662, 0.7799222529720728, 0.7618461644831016, 0.7731344695873519, 0.7853956201057847, 0.7743568807664729, 0.8054915110572834, 0.12662976940610482, 0.11993339349672971, 0.10912670313347839, 0.11592399105572382, 0.10083069906679287, 0.10693510938601936, 0.10656284505769875, 0.11030505440100136, 0.11649740134297004, 0.14188649167538747, 0.13532627978691458, 0.13048286996019776, 0.13391312888875395, 0.17201762917038232, 0.13351664132678032, 0.19982247714066925, 0.1470073691485253, 0.15867615530924972, 0.5087630049356511, 0.5022750864410596, 0.5204218681978375, 0.5014667551954153, 0.5060289480974499, 0.5040586741508524, 0.548578969574653, 0.5381763987590276, 0.544699389762052, 0.4321835389351152, 0.42052513217304033, 0.4358168744298059, 0.42491267987196457, 0.43208217946585015, 0.3581015518122874, 0.4378180255443094, 0.44304922663819635, 0.41813059367410343, 0.19520448300733384, 0.20976573628925688, 0.20220901779811962, 0.1935356801071435, 0.20478362881595458, 0.2502897149736856, 0.20727278312762987, 0.18818095031698545, 0.22713924019656728, 0.20935422013952398, 0.5775037817615984, 0.22414775777047924, 0.32543247917205786, 0.19266014107077112, 0.20276773226704337, 0.22302697364074542, 0.20020689609706244, 0.23443160825264608, 0.8818898887112229, 0.1855902552644213, 0.8137073135572293, 0.8312270155748822, 0.19530565597858307, 0.19641032775534584, 0.8204234379612195, 0.8058169237910606, 0.5657932587780332, 0.8278165876676724, 0.21099463099544313, 0.846158410667838, 0.21191491426428988, 0.2074261745077981, 0.16664320321563342, 0.21037573924039854, 0.12758717132958153, 0.2119023762718948, 0.18388165967766212, 0.18562196485619797, 0.1870428456040848, 0.17763905666440039, 0.17649976484820096, 0.20145018475380183, 0.1845990934636953, 0.18090471105189154, 0.19344465027858337, 0.08414523942966168, 0.08317250623659833, 0.08290615487119635, 0.08899041030591504, 0.08701663297380424, 0.08966938249917189, 0.08333875831480675, 0.08718112210081186, 0.0798358973314538]}, "mutation_prompt": null}
{"id": "1bc501b4-b003-4aba-b8d9-629339958aa7", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor with diversity influence\n                diversity = np.std(population, axis=0).mean()\n                self.F = 0.3 + 0.4 * np.random.rand() * (1 - diversity / (self.upper_bound - self.lower_bound))\n                # Slight increase in the bias towards the global best\n                mutant = np.clip(a + self.F * (b - c) + 0.25 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.2 * (np.argsort(scores).tolist().index(i) / self.population_size)):  # Updated dynamic probability\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Improve exploration by introducing adaptive mutation scaling dynamically influenced by population diversity.", "configspace": "", "generation": 36, "fitness": 0.4748162823732374, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.29.", "error": "", "parent_id": "3f4259c7-d154-4809-865e-4fabd6757181", "metadata": {"aucs": [0.8846724788850251, 0.8883072059742488, 0.8827428346376378, 0.8873695349294133, 0.8840325619981089, 0.8901156333578641, 0.8936126361237277, 0.89327602724392, 0.8834211904914561, 0.7546974730449058, 0.7651670819797997, 0.7623794996414217, 0.7575577122672212, 0.76846112454258, 0.7523501693953843, 0.7308292766229317, 0.7464161096777551, 0.7629618737157317, 0.14441436782837502, 0.21246406101985116, 0.1506399472759109, 0.12362542550669564, 0.13008333218255197, 0.1137188314837958, 0.13852458881840668, 0.1483536978933616, 0.31776301352419445, 0.12324780389237, 0.1017276841574336, 0.11783502215655339, 0.12986035369352156, 0.11935129596712124, 0.10913016360310213, 0.12849780481988982, 0.1338376866126717, 0.12815039863670352, 0.8920999775817949, 0.9501310293903943, 0.9144362021405663, 0.8957695179984309, 0.9264712289069792, 0.9421112759365645, 0.9335497181144383, 0.9208101770891204, 0.9048306457977069, 0.7254570402016696, 0.734886146272827, 0.7312394563256555, 0.7253458510361068, 0.7276924756733186, 0.717544628217937, 0.7219387830841502, 0.6830675347323515, 0.7092077153456875, 0.886230653053807, 0.8972066936450651, 0.8783232292775447, 0.8937092575795709, 0.2778491198027454, 0.8982674788408533, 0.23114001234949721, 0.8904134306050825, 0.9063127203926254, 0.3236569000188362, 0.364372186652132, 0.40583651380594943, 0.21074435686385706, 0.3057281932293505, 0.5962059744853073, 0.44312571833605785, 0.4122777278461188, 0.4100129298257925, 0.22246952370210837, 0.20469136922401177, 0.25583192828801204, 0.5727574793159095, 0.29651798549169084, 0.2516759458289456, 0.5040543211135753, 0.24944070706871257, 0.5525663372376415, 0.6562371086379224, 0.6484979764465915, 0.711682880867267, 0.6954246167008763, 0.6537805463645099, 0.6637568792642119, 0.6899979098821238, 0.6328066238780243, 0.6921419706361315, 0.7590141764661593, 0.7301804258243547, 0.6448334503484408, 0.31026025502107124, 0.741531880373764, 0.2693496935760874, 0.7439430978731535, 0.7132769916013477, 0.7414143152279384, 0.23384269625716503, 0.2130682097816311, 0.3591132409983614, 0.26754139570854796, 0.36656967167247767, 0.33097428604677537, 0.22824228728431972, 0.2677131303443443, 0.17929310182282443, 0.5835272275345789, 0.5446672235687648, 0.5336777913805992, 0.5649119279942969, 0.5603625410498942, 0.5843232903446272, 0.4485276127494884, 0.5481829485876041, 0.5725654220033054, 0.7801830617986343, 0.8425728208781839, 0.840099038333946, 0.8291627397111155, 0.8308906040535284, 0.8339001661800093, 0.8344395962497912, 0.8442413146153407, 0.8363376767551646, 0.11163010373941529, 0.11197404905543284, 0.13352626020392422, 0.13241337352951998, 0.14224420203373433, 0.11145770683581868, 0.1189038530007629, 0.11312515145896318, 0.13632105919903348, 0.1910888731025031, 0.17172703485206697, 0.2686558720192005, 0.1932447456142875, 0.3337063201448959, 0.5610570390059798, 0.16526843413980097, 0.1790223218901449, 0.12996756943694943, 0.6349642551418408, 0.62679549126692, 0.5883978477561304, 0.6414315781353255, 0.5890242589863127, 0.6238558659717034, 0.6673414511063049, 0.6718711148261548, 0.6068047192131835, 0.48660836630709836, 0.4854986837756964, 0.4107504005972783, 0.5277601783175871, 0.4456629742978788, 0.5232303012799235, 0.4576476098338491, 0.5488355801256195, 0.5353463698691578, 0.2087237646495882, 0.26034471760922706, 0.21789782479997966, 0.2288561632753946, 0.22177745905369106, 0.19237872847649562, 0.21563103016352947, 0.22139590090408223, 0.19708739976399436, 0.6060108564934679, 0.20058351229827642, 0.20717485981807882, 0.2356071384652243, 0.22588490197181477, 0.1945777008975449, 0.23912305044940918, 0.2172757158613614, 0.21580262928229377, 0.18663276208153678, 0.19775960918135582, 0.8772065878669758, 0.9054858278613735, 0.1989958832996892, 0.8996433732181122, 0.8589244477068053, 0.16129304109227727, 0.8977288602669193, 0.8936292683872048, 0.21104002049183435, 0.8871015546381504, 0.20953413616752403, 0.2109496095689014, 0.8704410574425958, 0.10444510074383873, 0.8972473916140655, 0.8929930908398406, 0.176225974698607, 0.1953370463310895, 0.18201243965753333, 0.18495716363245351, 0.19319621749919236, 0.18336297870277785, 0.19882910513407592, 0.18137847152505926, 0.19701926723680996, 0.08466459973934493, 0.09568110801630048, 0.0873148502933353, 0.08754798650140128, 0.09026721515848968, 0.09020281190133828, 0.09044980699256588, 0.0948857708067069, 0.08797236199591063]}, "mutation_prompt": null}
{"id": "35a196d7-0c9a-44e0-9896-00ca87523a83", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.4 + 0.5 * np.random.rand()  # Adjusted dynamic range\n                # Slight increase in the bias towards the global best\n                mutant = np.clip(a + self.F * (b - c) + 0.25 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.2 * (np.argsort(scores).tolist().index(i) / self.population_size)):  # Updated dynamic probability\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Adjust the dynamic mutation factor to enhance exploration in the solution space.", "configspace": "", "generation": 37, "fitness": 0.424021318585904, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.27.", "error": "", "parent_id": "3f4259c7-d154-4809-865e-4fabd6757181", "metadata": {"aucs": [0.830328484677098, 0.8239840732858776, 0.8274013631536719, 0.8297745655716597, 0.8272226475898179, 0.8112838929383863, 0.8308561718952061, 0.8385858486093245, 0.8179591617882084, 0.664809530729358, 0.6563851426762394, 0.6635870757538735, 0.6694182429764893, 0.6667652341898023, 0.6469305059990782, 0.6582398742263265, 0.6685143115546346, 0.6649749342305613, 0.11779768000460356, 0.10701766450756478, 0.11148230367681422, 0.12701906784096173, 0.11787476124210372, 0.12182752959347032, 0.10774755466930097, 0.12452413035802401, 0.11018299730659076, 0.10699335137985944, 0.09964323389478102, 0.10424102746944242, 0.11920804802706353, 0.11600332778469769, 0.11363901102131002, 0.10899419090138895, 0.1185711277542143, 0.11401729346963307, 0.9225887562400295, 0.9187051030333067, 0.9195657802252832, 0.9679308903279189, 0.9142496026289212, 0.9052380783950491, 0.9065133057734156, 0.9045308152169499, 0.943586458648778, 0.598128399897405, 0.6096448444769975, 0.5943738044185809, 0.6140930646442091, 0.5861849720591559, 0.5670662515597351, 0.6060011537342848, 0.5849171113500053, 0.5897989609453089, 0.8274849453207316, 0.8142902709004347, 0.8161259375058117, 0.8039629932593153, 0.8435920447561113, 0.8483672645063849, 0.8340170502046562, 0.8589244498190617, 0.8395114862726147, 0.5496384977163464, 0.5322583374602465, 0.4173431572288415, 0.49327831286818413, 0.45082175812213143, 0.404087630966499, 0.45992772927944514, 0.5552109401524286, 0.43403721969121334, 0.30728760740216743, 0.5450319124086278, 0.4824968276723003, 0.5507399713745678, 0.3980082659293682, 0.5865606223176876, 0.4691424336424175, 0.4747046884605466, 0.5886948746525149, 0.42430984868408206, 0.4910431275244338, 0.5406059458598513, 0.5398680490308388, 0.5720601928192146, 0.5223109903419607, 0.4884249760981624, 0.5031852475828774, 0.5336560383597839, 0.5936330536249301, 0.6525870907225835, 0.6321357972539827, 0.6338689169040114, 0.6016485745710982, 0.6034238736786964, 0.6341389079576729, 0.6353730550985993, 0.6542631516731523, 0.12535910912172454, 0.20223841294962008, 0.09033748983742007, 0.36079980736591843, 0.34508284222856, 0.16020280850114055, 0.17897452759376042, 0.10818545849255912, 0.1894323724648399, 0.3821754825703051, 0.41524073750325263, 0.3911614182253538, 0.4094341529924167, 0.3804997111652818, 0.39006605405963735, 0.3922611959646548, 0.38599756786243533, 0.3814170584061747, 0.7529577333389059, 0.7687222784227021, 0.7547617824181355, 0.7402920136435598, 0.7591244273789673, 0.7542402248305234, 0.7484799057903071, 0.7458545733178734, 0.7557570749674369, 0.09587361098559943, 0.10867395335237928, 0.10455479837237402, 0.11259059244193925, 0.11376423425041393, 0.11607051319663064, 0.10339312185619187, 0.09734286988936058, 0.11208590043240785, 0.13297514320408077, 0.13117436848821729, 0.13626240303938852, 0.12767319716587422, 0.1799127601295435, 0.1465668436647538, 0.13654873048308058, 0.13192425403716113, 0.14814843716685377, 0.46507071286143586, 0.4598066212075419, 0.47444888159641097, 0.44722737809949753, 0.45159235202816483, 0.45063528819991505, 0.4754717272487533, 0.46004554378246576, 0.47822349132430564, 0.37671525939148, 0.350161172363447, 0.35936072899436644, 0.36307836314462805, 0.34645990375973545, 0.35440962772946427, 0.3830681794302603, 0.4071822031013552, 0.3804825522387967, 0.19871402812882866, 0.20979863178457814, 0.22939031600092796, 0.21300074101047595, 0.21070739037793296, 0.2092585506636334, 0.20272266166027542, 0.19803941667530833, 0.2096141867022071, 0.21943590636204002, 0.2441603831537731, 0.21888230777348205, 0.19239663927557815, 0.217996386608464, 0.2653671608836877, 0.4047366317287333, 0.310222212055564, 0.2647896117710419, 0.845563874718129, 0.18357821587411793, 0.19224112989626396, 0.8056094495097622, 0.19296080522957837, 0.198938014713834, 0.8300495703592254, 0.19311345127084156, 0.7162832270427202, 0.7642145321803128, 0.16743343830605195, 0.7799689153303367, 0.7947275263569236, 0.16547381644004455, 0.2057166046007901, 0.20921987837150535, 0.21028521449242576, 0.20965541730076365, 0.17863249078725463, 0.17674475023224534, 0.17929419026409976, 0.19225130163941118, 0.18245010356294955, 0.1829051413889653, 0.17943658122877582, 0.17672512946599706, 0.17598169853515322, 0.08618004878076702, 0.08239530937954154, 0.08347600861906246, 0.09077591168773702, 0.08330881385828692, 0.08364192077239585, 0.07424948391802266, 0.08515777928890234, 0.08369318246442492]}, "mutation_prompt": null}
{"id": "e87807f0-9ff6-4b93-bd43-676475b6c6f5", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutant = np.clip(a + self.F * (b - c) + 0.3 * (self.best_solution - a), self.lower_bound, self.upper_bound)  # Adjusted mutation strategy\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.2 * (np.argsort(scores).tolist().index(i) / self.population_size)):  # Updated dynamic probability\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Adjust the mutation strategy to balance exploration and exploitation better.", "configspace": "", "generation": 38, "fitness": 0.4788809654635831, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.30.", "error": "", "parent_id": "3f4259c7-d154-4809-865e-4fabd6757181", "metadata": {"aucs": [0.9043822378911506, 0.8853199417899877, 0.8907383090598239, 0.8992001892173934, 0.896652615484108, 0.8937032530494634, 0.8878544133305919, 0.8973657446170913, 0.8937040242017021, 0.7121303395032947, 0.7542341380848778, 0.7780782352070693, 0.7786268976134824, 0.7559584787574006, 0.7363419336565796, 0.7819236673260761, 0.7776668917956935, 0.7793709035681622, 0.4531916072588452, 0.115833076323272, 0.5004613783281853, 0.1323401140635364, 0.1344238918432722, 0.13453385512576665, 0.2609711947042789, 0.15223114603143417, 0.32095101685496186, 0.13413744584887677, 0.12601592428984387, 0.11266968143154554, 0.13407299286279262, 0.10852544577448497, 0.09258791329063731, 0.11074847305741875, 0.14191190367081852, 0.14139479402448796, 0.8889292713727461, 0.9415816903926124, 0.9384507897798879, 0.9422862728024063, 0.938840966018452, 0.9426695805271135, 0.9408354992328007, 0.9095600401727617, 0.9729850798158415, 0.7532159251314923, 0.736477823672399, 0.7282239273157767, 0.6958614560686572, 0.7387217710533722, 0.729176252519897, 0.7348664486638705, 0.7281069719933115, 0.7709715909073236, 0.9088289292400349, 0.9086619046641261, 0.8892893093868637, 0.9109123745428445, 0.9225805304975038, 0.27804878635416685, 0.8704827557153172, 0.9012951869563433, 0.896525948867482, 0.7428113098279003, 0.3407087880087374, 0.5704132004293812, 0.40271830980309264, 0.32556313928610703, 0.5502710971846791, 0.20696274976981266, 0.5613954296560084, 0.3568838967622059, 0.3402116304189158, 0.613515727011023, 0.35986888439527864, 0.4434729869247327, 0.35390626492080024, 0.2239691576722901, 0.24464518594105467, 0.4261423899626525, 0.26259163145671893, 0.21404986562543027, 0.6878502823832269, 0.29357728553438, 0.6994967724246324, 0.2533934645342979, 0.5763190826687101, 0.6847776850231213, 0.694498977737866, 0.7061069774427831, 0.7650613847573973, 0.7645054812613415, 0.7682036042234496, 0.7740239068014512, 0.5919331201393111, 0.7491811768730346, 0.7788443372220469, 0.7586315488922394, 0.7657925875764872, 0.24356452375116555, 0.11605037926230033, 0.19636973163722027, 0.37996771606590285, 0.5272146508579645, 0.27323114020897243, 0.16029524113727145, 0.2052186743690575, 0.20309842293260527, 0.5640971254442702, 0.5761693838825972, 0.6045700805623843, 0.6227104370807566, 0.6110766575630872, 0.6231920484089432, 0.5662668857886906, 0.5926160601228957, 0.6072610990615421, 0.841434518816391, 0.8563835111784324, 0.8508114428928342, 0.8556388984585979, 0.8398116786866097, 0.8437056316674681, 0.8440268098043964, 0.8407300999562703, 0.8385958133915736, 0.27239068807778644, 0.1341495900359605, 0.11277043031045231, 0.13084499456394771, 0.13181840412727996, 0.1454746641715977, 0.11520513076423611, 0.13742105383019576, 0.1094817442564967, 0.3383294986877554, 0.1473146151257413, 0.14218731656098826, 0.12237195732332329, 0.16245392053141405, 0.12911098158513468, 0.323064372660406, 0.12571953986572282, 0.15658341916679164, 0.6594203891098556, 0.6368910802510477, 0.6462349174407197, 0.6545102605263918, 0.6641899016925132, 0.6502290449481868, 0.5742987976845892, 0.7153624185329208, 0.6836680873047665, 0.5392921336048964, 0.29837548721576335, 0.5730795014341797, 0.5516026670787111, 0.5128217402908384, 0.5652527001478339, 0.25053861495091945, 0.5621166187461051, 0.5610447047492372, 0.22760395175036285, 0.1993007016216527, 0.21048712435802508, 0.22416656665498758, 0.22647994339055755, 0.257236837682597, 0.22127317770914867, 0.22107476354573397, 0.21777053541751878, 0.24158113824419525, 0.2256768984460712, 0.20734612554898468, 0.2192133286218957, 0.23942956239847213, 0.21695033671705155, 0.2277746000269022, 0.7358289680844143, 0.24139506374662456, 0.18667699393175152, 0.1979567924500446, 0.18699991827112727, 0.8770407225962848, 0.19734070515619817, 0.9083006830408614, 0.8382657058284116, 0.1754664835096299, 0.8728255597447552, 0.8824150743089907, 0.2116264346669101, 0.900817983496757, 0.20738988149736293, 0.20842559231616864, 0.20567705479321097, 0.10447842513414429, 0.21209971109614156, 0.8916443816860425, 0.19371544477033997, 0.18185648597424897, 0.20061938568223325, 0.19862102201651344, 0.1830264135852111, 0.17785355867345187, 0.17930421649572859, 0.19794424127126742, 0.16758929270656409, 0.08377286918938065, 0.08910712540493426, 0.09056653670779946, 0.10121274499608257, 0.08834078141615698, 0.10124740721214498, 0.08940997620081648, 0.0937084768024542, 0.09368431003732314]}, "mutation_prompt": null}
{"id": "9d42e909-6188-44e9-ab69-be949a0fdda2", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutant = np.clip(a + self.F * (b - c) + 0.25 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.2 * (np.argsort(scores).tolist().index(i) / self.population_size)):  # Updated dynamic probability\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial) * (1 - self.best_score / (self.best_score + 1))\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Use a dynamic scaling factor for local search adjustments by incorporating the current best score to guide exploration.", "configspace": "", "generation": 39, "fitness": 0.48257206561281113, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.29.", "error": "", "parent_id": "3f4259c7-d154-4809-865e-4fabd6757181", "metadata": {"aucs": [0.8870882595411348, 0.8880723485067956, 0.8725033092248182, 0.874787136731754, 0.8846133920836269, 0.8766951791163514, 0.8742815795637159, 0.8861034914705631, 0.8819758229932138, 0.7605360702132804, 0.7612491439900348, 0.760116025348536, 0.734830664217689, 0.734429410510244, 0.7532089438534646, 0.7610656845402726, 0.7643513331791257, 0.7597164101058365, 0.14116029762415816, 0.4684963261116881, 0.15326423547172052, 0.13337409357348118, 0.4463547923000981, 0.15243105059926731, 0.13619553597284484, 0.41981383076535206, 0.24352159794820916, 0.13710015672111409, 0.12284340432199425, 0.13341790090537708, 0.10766721534458867, 0.12450636198518461, 0.12099531047838408, 0.1181900453076401, 0.11830819957333205, 0.13348481045036098, 0.9328674456532574, 0.9491084786003459, 0.9160808742112359, 0.9282808889779499, 0.9246243721561005, 0.901075742574194, 0.9169923925786906, 0.9110917576093893, 0.9859123513492162, 0.7295293636679698, 0.6604251780268646, 0.6904712648101277, 0.7073812906705701, 0.7179450364854787, 0.7436167048902671, 0.7152603140019647, 0.7030995094307388, 0.7271898629699236, 0.8852094548403071, 0.8987436145493897, 0.8876716216109976, 0.8718800097842666, 0.8936181846137297, 0.886270128623764, 0.8933589371266927, 0.8693192428508492, 0.8588786881877275, 0.2478959499102259, 0.40729349030135464, 0.3604305887628094, 0.22459501037442653, 0.3972849562977119, 0.28829943070210606, 0.3026202378872276, 0.3753057557265884, 0.35540697584164305, 0.5608990033885854, 0.5871619036353813, 0.43806753717736957, 0.2390168007161031, 0.2642790029856592, 0.36719842581500384, 0.5302177930487177, 0.39854399262203055, 0.434540135135408, 0.6661933191966458, 0.518420932309554, 0.6864409855585343, 0.5784190112386145, 0.6234024110325109, 0.6522803418099388, 0.665036886482441, 0.6780864729691845, 0.6750568826010639, 0.7475747419667333, 0.7518036913515416, 0.7527898856380459, 0.7393834242724449, 0.726707803076774, 0.7223877555358572, 0.7339554134786863, 0.7556785068140646, 0.7535465146766386, 0.4040308953351741, 0.13792778742672274, 0.2770714833211596, 0.32050755455332014, 0.20751136327124864, 0.37480475290910886, 0.2199356134484436, 0.36944490281339326, 0.2943932533512996, 0.5686201063591328, 0.5467900236050017, 0.5433604098030658, 0.5619252555546317, 0.3730746905161886, 0.5771768568323562, 0.5019784805819406, 0.5760999855154172, 0.5665757088185093, 0.8288327872070854, 0.832961620958719, 0.833134353107096, 0.8329336591200793, 0.8341017926129476, 0.8323324760166999, 0.8287516103514518, 0.8380140153498326, 0.8274223792693474, 0.12695418031629635, 0.11884699975198487, 0.12939385791658164, 0.41133103356433554, 0.13342401335722753, 0.11409831794907765, 0.10990428670719554, 0.12107042479628527, 0.14525780435247215, 0.49044584278444103, 0.1293908957047588, 0.16685217367560468, 0.1450712094781047, 0.2562500866336279, 0.14600818686128947, 0.15196157266408294, 0.16306862911923015, 0.1832991325164708, 0.6182975238377411, 0.5468436398217034, 0.622262924463169, 0.641274645727371, 0.6063834090052116, 0.6305211249616307, 0.6362251619960835, 0.6578170805495434, 0.6342578158747217, 0.4853668016249997, 0.535498952234652, 0.44057712874465116, 0.5031352258165422, 0.543371906758193, 0.45943428945149756, 0.4687672181117978, 0.5227127175078495, 0.48764707728779166, 0.20556437333758038, 0.22216098697760578, 0.2307000335189946, 0.22449682385379133, 0.2156873647332237, 0.23555405548220965, 0.21484063002027565, 0.2171672884315552, 0.22390094314229247, 0.22524966318985273, 0.22994381251962948, 0.21657158862862902, 0.2156739758194547, 0.20498661051904365, 0.19455358904831754, 0.20511195921657976, 0.23446926131610168, 0.21661552324718103, 0.18634311045315632, 0.19561208184686707, 0.18676624527529817, 0.8867594097848925, 0.8829978716450209, 0.8869632426299046, 0.1760596246980375, 0.16829797868478058, 0.8709990950994889, 0.8817130167559784, 0.21150368836536038, 0.874211447613858, 0.8778300861789181, 0.15388765871711352, 0.20667801689050325, 0.2104592084487844, 0.8242044943715185, 0.8833773075992271, 0.18810228264691708, 0.19216783367603807, 0.19016624364564172, 0.18286085060232848, 0.18879316195869555, 0.19253975541147839, 0.21212846870780178, 0.18781269571582093, 0.18453069969021674, 0.08870250931235768, 0.09411026340458306, 0.09045267358480724, 0.09214951028312912, 0.08022692282902977, 0.08790868365361093, 0.08211204574325404, 0.08218193631433457, 0.0890964053576534]}, "mutation_prompt": null}
{"id": "fedc6859-c055-4e18-ac36-0d16015d1f0a", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand() + 0.1 * (np.std(population) / self.dim)  # Adjusted line\n                \n                # Slight increase in the bias towards the global best\n                mutant = np.clip(a + self.F * (b - c) + 0.25 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.2 * (np.argsort(scores).tolist().index(i) / self.population_size)):  # Updated dynamic probability\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Implement a small enhancement to adjust the mutation factor dynamically based on the diversity of the population.", "configspace": "", "generation": 40, "fitness": 0.48137279037170794, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.29.", "error": "", "parent_id": "3f4259c7-d154-4809-865e-4fabd6757181", "metadata": {"aucs": [0.8847774751781984, 0.8746954284208731, 0.8679962269381356, 0.8730273857911712, 0.8589073590149355, 0.8636146386373116, 0.8647199910701895, 0.8790515081015093, 0.8698030070832271, 0.7366643299103316, 0.7333446146454052, 0.7464942348410947, 0.74174028324495, 0.7325142690607724, 0.7189795662198804, 0.7370150660240388, 0.7425892167913323, 0.7306526772415041, 0.1527942263639166, 0.14973843371660478, 0.15363145577385584, 0.11701900144422639, 0.1416224317166338, 0.158009936751058, 0.15453073745003654, 0.11387275802308472, 0.13901643966285082, 0.14181537577958203, 0.12176031726965286, 0.12642139372190708, 0.11131330751271784, 0.13481122393290157, 0.1071779766342037, 0.11507008547853725, 0.13374492169364838, 0.14298424498548323, 0.8933402468515308, 0.9226478897507755, 0.9188710148181212, 0.9330038319092758, 0.9369467468560978, 0.8864038861767627, 0.9071371203449218, 0.8751202930194281, 0.9326926885524728, 0.6935554758214668, 0.6807124920554, 0.6772518967711717, 0.6639727807225297, 0.6741795075631409, 0.6793306905348641, 0.7094694884659174, 0.712601103064038, 0.7032210244160688, 0.87038841230221, 0.8902459799580937, 0.8802280766689136, 0.8682984349298598, 0.8655754199962232, 0.9144738522388438, 0.8712095650902822, 0.8930517006174085, 0.8700135579145937, 0.5428022941999036, 0.13292595835324084, 0.578532297461846, 0.44092491675536216, 0.5001164950355705, 0.40739332142986495, 0.4466025339542088, 0.4465965616518416, 0.5914395596813686, 0.610675130545425, 0.3790170006965675, 0.2721631510777881, 0.4611357561182723, 0.21700609871173715, 0.47962584007373754, 0.3815941232888955, 0.2395298698713505, 0.46896116633976126, 0.606573319221821, 0.3944821213164287, 0.6241627900815108, 0.588129914456538, 0.6281288766075663, 0.6447798949282401, 0.656120834284252, 0.6684067462354197, 0.6778320818924768, 0.7115345138027497, 0.7345264982681825, 0.7348136500656934, 0.6955891838790816, 0.6910064573814674, 0.6814976025430288, 0.7460163978685574, 0.732665045067787, 0.7166910605313547, 0.30751211921280475, 0.13630634780892048, 0.2898591168514858, 0.493462531391029, 0.4998970521554633, 0.5284318445291447, 0.34489818231091074, 0.1939300735100482, 0.265591102035197, 0.49106992062393917, 0.48828297444499813, 0.5086988500599868, 0.5021237417213704, 0.5029927078914163, 0.51503399758169, 0.49536628940623084, 0.5034085185885273, 0.4993664739235367, 0.8223695680878754, 0.8293788554897031, 0.8150542785453819, 0.8058839183832289, 0.8160832132927942, 0.8015381853801401, 0.8082603462452935, 0.8235357983522984, 0.8332740092212062, 0.10783406240376314, 0.12660166525888705, 0.11220902087965257, 0.12824623024858905, 0.11879590063728174, 0.12732563514300477, 0.10872174348277608, 0.10643287717362437, 0.12211562225203743, 0.14058049542433326, 0.30250270242001576, 0.13852978940458016, 0.15398302544161602, 0.15013908551140742, 0.13960021963574998, 0.14202150144921322, 0.18215673812739452, 0.2816679624891564, 0.5687189904423847, 0.598540769668144, 0.5607897812448874, 0.6354818471174415, 0.6031791841783394, 0.6048053466313068, 0.5996679453651994, 0.5852719298953468, 0.5781724685175784, 0.48115788508175006, 0.4776032112635651, 0.46933482503732915, 0.45195310844248016, 0.4684578884932351, 0.44372861567205124, 0.44593498944816945, 0.4809483560367631, 0.5119491696029713, 0.21020386266995583, 0.2272598035966812, 0.22320314067766156, 0.20736026729315404, 0.2440656466915634, 0.1991485010830789, 0.2146896151900023, 0.20391370874620574, 0.21156112240092229, 0.21117366231297718, 0.219484213596691, 0.2201945004719097, 0.6109735464798045, 0.2358437865253573, 0.2277948984258772, 0.22766013818451603, 0.24083980183039178, 0.22682753802356648, 0.8739834663090882, 0.1843682134915543, 0.8592446890175808, 0.8936022984260342, 0.8367034003577491, 0.8829843383434215, 0.18271216967027348, 0.1680990503804355, 0.15424957157556196, 0.8565985897075803, 0.840931551113179, 0.8871500562030907, 0.8041739582327054, 0.7682371024783186, 0.20434066776860182, 0.21066107902231102, 0.7867786752396161, 0.8358189200506801, 0.18648616122429396, 0.19832030137772216, 0.17728081934180795, 0.19047607875165484, 0.18178868404502901, 0.16652562293434225, 0.1904146746896489, 0.1915589721786629, 0.20454731100915724, 0.08775663911994636, 0.09089467775690396, 0.08852913037192633, 0.09748331382641284, 0.07858891440431903, 0.09261132076543976, 0.08829963408693697, 0.08561722418596895, 0.08387329484891959]}, "mutation_prompt": null}
{"id": "228ee681-07c2-4fbe-822f-98a73525f7a7", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                mutant = np.clip(a + self.F * (b - c) + 0.25 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Adjust crossover probability with score-based weight\n                self.CR = 0.85 + 0.15 * (1 - scores[i] / self.best_score)  # Changed dynamic probability\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.2 * (np.argsort(scores).tolist().index(i) / self.population_size)):  # Updated dynamic probability\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Enhance mutation and crossover strategies by adjusting weights based on individual performance.", "configspace": "", "generation": 41, "fitness": 0.2945838074388587, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.30.", "error": "", "parent_id": "3f4259c7-d154-4809-865e-4fabd6757181", "metadata": {"aucs": [0.8839187700863523, 0.8666646619479035, 0.8730013022591555, 0.8788828013079518, 0.8792305659522043, 0.8679931010513525, 0.8771411233834856, 0.8697901168264244, 0.8663898988971427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20800483512232837, 0.26548472700329817, 0.140351546071405, 0.1664017001346899, 0.11010327436204714, 0.14155776329208236, 0.12071884222679308, 0.11525410670390901, 0.11434634300555513, 0.11517042919756315, 0.12005276989269353, 0.13120198549339934, 0.10673468611947079, 0.11111101110687482, 0.10816080325367783, 0.11303447730093519, 0.13240718441241228, 0.11165873336972987, 0.10136416485675859, 0.9393535846888266, 0.9319301584590723, 0.9412193216048348, 0.917953010456471, 0.9189513185926443, 0.9559541140516011, 0.9335637990435366, 0.9373325035697132, 0.16267455778229656, 0.10568218097588888, 0.0947562588178047, 0.16751136129423616, 0.1211579500898804, 0.1888627919631053, 0.6801186420838563, 0.6254666679423238, 0.5357384168572045, 0.7358517905683444, 0.7374959649760418, 0.6909401122732617, 0.407812477763685, 0.286810386445852, 0.3840600475341962, 0.13931185889304964, 0.1459125548451078, 0.125367693154659, 0.09124878879407006, 0.07619910868964286, 0.09310008238326173, 0.44891419988899317, 0.22259044271124517, 0.25564856716478623, 0.051973196730662696, 0.05186453525207413, 0.06477942120377644, 0.07572704029484989, 0.09275760788327603, 0.10656995968427085, 0.06398111067444556, 0.06117067644798557, 0.07358111554961289, 0.08486221653232029, 0.08732323005723086, 0.06859909161261601, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04696582347415046, 0.046809383300808416, 0.07021925235101223, 0.0557206456506556, 0.03161417406650402, 0.024131462019643002, 0.4022947776209511, 0.06237732758417747, 0.0391586059925374, 0.060576163756015045, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06503171827402388, 0.11710957329203242, 0.08914531845884066, 0.1871276059184347, 0.20687606204848918, 0.12005658491048976, 0.33054239588549517, 0.3029277616827115, 0.41606751565785627, 0.7910278148179206, 0.760208020616599, 0.7878295409344295, 0.7863840895409504, 0.7783576791559009, 0.7511697691427863, 0.7877317536384263, 0.766840294521013, 0.7932848277570326, 0.11881870496680691, 0.1130550688784, 0.12441887154051978, 0.0989216747244851, 0.1060589254593769, 0.11073744851777179, 0.10461934710251353, 0.10213977551727238, 0.0860831696096731, 0.1366869605640313, 0.1361833708311746, 0.15016602098880516, 0.1357465074462587, 0.13135165759252432, 0.17438870178296673, 0.13402075180985817, 0.12715371444615664, 0.12846365107791458, 0.5152345788810131, 0.5450021141657313, 0.5319381543847327, 0.5749787929970295, 0.527838146059139, 0.5341697936341931, 0.571160655052239, 0.6143498392035535, 0.5708250039786329, 0.4171575799378081, 0.2959856348432589, 0.4318868136702596, 0.36824380379872224, 0.37291001450260186, 0.37711480430359257, 0.4298951028811121, 0.46324958956012985, 0.4094731912159225, 0.2223105276850833, 0.2149160666120642, 0.21044665620255765, 0.19405092398258406, 0.23102264591556865, 0.21326140854921327, 0.2229120200162904, 0.23997310041281084, 0.21536907786752002, 0.16274431025185132, 0.6405761817980147, 0.19899206962662697, 0.16074921112490737, 0.16729307898721402, 0.15916265490156234, 0.1628641291807651, 0.16014482015569442, 0.13623772916753984, 0.18504687194197744, 0.8662868272947281, 0.18292761634737498, 0.8836773382531782, 0.16177283345938887, 0.7615713022816819, 0.8792121291176628, 0.1747321092316504, 0.8653590116482685, 0.8935338699637771, 0.809874920405, 0.8595441541187128, 0.8451385243852297, 0.20910340966370822, 0.16557921870146597, 0.7543051639252775, 0.859101268027711, 0.1677497462856401, 0.19918950398221646, 0.18700142244108808, 0.18567171105287694, 0.18816244828634276, 0.1832472780601162, 0.17937766245722375, 0.1788309860086349, 0.17959056893835768, 0.17865470176293552, 0.09324363050128903, 0.09260762039328552, 0.08506889481656965, 0.08145986763725799, 0.09540641981353781, 0.09408037203453767, 0.08842508122941872, 0.0874621195516786, 0.08565367141952396]}, "mutation_prompt": null}
{"id": "a7675a76-c7e7-49ab-af3b-9929d73d38ac", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor with added diversity adjustment\n                diversity = np.std(population, axis=0)\n                self.F = 0.3 + 0.4 * np.random.rand() + 0.1 * np.mean(diversity)\n                mutant = np.clip(a + self.F * (b - c) + 0.25 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.2 * (np.argsort(scores).tolist().index(i) / self.population_size)):  # Updated dynamic probability\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Enhance exploration by introducing adaptive scaling based on the diversity of the population to improve convergence.", "configspace": "", "generation": 42, "fitness": 0.453541135266999, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.45 with standard deviation 0.28.", "error": "", "parent_id": "3f4259c7-d154-4809-865e-4fabd6757181", "metadata": {"aucs": [0.8614745511263502, 0.8555662424343686, 0.8631245237698735, 0.8636516584735925, 0.8668132864532639, 0.8661979226306709, 0.8656024098931158, 0.867255814703837, 0.8704260565425501, 0.736888025208801, 0.7244444819795199, 0.731015342645137, 0.6377735799119721, 0.7293037021369712, 0.7301282090051879, 0.7091841168716729, 0.7277523559073384, 0.723281033699964, 0.2049669297256863, 0.13747504757770734, 0.13292775345921637, 0.12460273600923921, 0.127437858401785, 0.12294004037084327, 0.1423518903908645, 0.13455995938198595, 0.12075148503969524, 0.10124064616047634, 0.12820976508540827, 0.11424994688999923, 0.11740286286301582, 0.10190778368937314, 0.10968058404250847, 0.10879318152441264, 0.10841820284655224, 0.10456648136184399, 0.8949926969546182, 0.935068238119792, 0.9189799360530091, 0.9235440016997416, 0.9467345641222621, 0.9267721231395359, 0.9075122495395461, 0.9577796885594629, 0.9694106202474401, 0.6607110107019254, 0.6902767331748494, 0.6991055385806728, 0.6912179032512327, 0.7041267536594364, 0.6855082786822237, 0.7049605323010104, 0.6839536823652056, 0.682622986870665, 0.8547021990059203, 0.8565975982215757, 0.8601283423387867, 0.8572180915213468, 0.8605741652700918, 0.841735618954744, 0.8718127453070935, 0.8745519460246876, 0.8555394913736131, 0.493124307140422, 0.3673750163142617, 0.47487200484618564, 0.2945681451863128, 0.2214937544839234, 0.1295806538620078, 0.4436943622339422, 0.1311027547633321, 0.6659725124293088, 0.34609846395802346, 0.2735690226227889, 0.2114706043870216, 0.22877990311948915, 0.4046647945377315, 0.202425879473089, 0.45445886127873314, 0.2778946085834061, 0.5668283305467592, 0.6115041915276199, 0.5778244745595784, 0.603022791576979, 0.6505936917511497, 0.5800166260280529, 0.6226612803471043, 0.5261526557093124, 0.5982120572191546, 0.5907901778084161, 0.6469656565067209, 0.6762904245475312, 0.6859075039064566, 0.67664456893921, 0.5916459661604534, 0.6879783724831399, 0.6593500904366456, 0.6755329887015527, 0.6706843496249562, 0.3193481411620781, 0.1032740966602802, 0.1082581434395321, 0.5520906524922393, 0.35490792723796194, 0.5567977106140776, 0.3417597617100768, 0.2394283070451697, 0.23066623897177796, 0.4228564915869234, 0.5103400329149642, 0.5389500025454914, 0.5697580636212631, 0.5594533461418794, 0.5579461849230318, 0.5374657109289757, 0.46060419939983466, 0.515021321595952, 0.816869432763542, 0.8209474065116549, 0.8194264762272572, 0.8258727882272627, 0.8100994716051411, 0.8140673575987007, 0.824829730228588, 0.7927773140206436, 0.8146628379123236, 0.09686658268612669, 0.1324334306057765, 0.11408043230780873, 0.11232805056841821, 0.11077321667543549, 0.12792453633143863, 0.10220547159894655, 0.10723249829877202, 0.12297254054256668, 0.13105590161329217, 0.140040036807767, 0.3039538845492208, 0.14777272303165645, 0.1384755624950731, 0.13222122470330921, 0.1491277754391782, 0.13003030019060824, 0.14361801019899012, 0.5708321927636538, 0.5897775539073895, 0.6004211258063101, 0.5744914486470365, 0.5376051086214942, 0.5625825656474119, 0.6195406331480853, 0.5520435644105981, 0.6277952259223876, 0.47508188302994125, 0.43654401152384537, 0.4899855881476336, 0.43985722780883696, 0.4224879544996314, 0.4589381196569514, 0.4827370238650057, 0.5482776045721353, 0.47893875347596626, 0.2173691828614055, 0.19612884989340573, 0.19547584826788467, 0.1900431077529614, 0.22443300472919636, 0.20517924801198917, 0.2100651873302587, 0.22083919934634022, 0.20602374783551303, 0.19533003702056417, 0.21159246763872963, 0.6480924111738291, 0.22683058307797033, 0.5584497020131081, 0.38011937368309645, 0.4757659070454041, 0.42570898221215847, 0.22200129573220007, 0.18323801196209233, 0.1930874838704687, 0.8028108325475611, 0.7473646843724415, 0.18505703583413669, 0.7961054466949885, 0.731543802942592, 0.6567209323486198, 0.7358060572812168, 0.16451274630063184, 0.2080802609791974, 0.20531153857532258, 0.1654135685374235, 0.16124059777742827, 0.7190278603061895, 0.209457040082333, 0.2073470852523842, 0.2089582132974922, 0.17520173348308166, 0.20186622956473455, 0.17974731294984303, 0.18412260898560628, 0.18483317047754189, 0.18960539843200996, 0.19473715351206167, 0.18048792283392867, 0.19462888685753477, 0.08806054198687785, 0.08239976294339302, 0.0905371039364733, 0.09038179628401499, 0.08038081626257354, 0.07775915765862629, 0.07900745499513995, 0.08429375742017542, 0.07851811045824775]}, "mutation_prompt": null}
{"id": "02614121-44bb-49d2-8474-33e3fd3e4d5c", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutant = np.clip(a + self.F * (b - c) + 0.25 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):  # Updated dynamic probability\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Refine the stochastic ranking by amplifying the local search probability dynamically based on convergence speed.  ", "configspace": "", "generation": 43, "fitness": 0.49139517560495716, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.49 with standard deviation 0.29.", "error": "", "parent_id": "3f4259c7-d154-4809-865e-4fabd6757181", "metadata": {"aucs": [0.8809017027996021, 0.876208642351553, 0.8802483901372944, 0.8799871220294363, 0.8862235976246208, 0.8834079999308968, 0.8887680587963531, 0.8732725429879356, 0.8772148324239588, 0.7450122559473671, 0.7641511767090877, 0.7443215841612348, 0.7348413524784392, 0.7491388093379225, 0.7526578898960771, 0.7495961368226112, 0.7468851445161924, 0.7487089382933262, 0.24659846843529498, 0.18001215172580975, 0.21278532153951568, 0.11307365263263203, 0.11584631544188173, 0.3059050371944988, 0.34400905939150617, 0.14045039695756, 0.11885638815706812, 0.11900182096238565, 0.09434351837546895, 0.125847742380094, 0.13406755108851143, 0.12655068583119222, 0.12437268528136669, 0.12510047719332396, 0.11887313998335525, 0.11297093944170078, 0.9366267577250252, 0.926679246626446, 0.9212108809983206, 0.9118929254562904, 0.9185722989432762, 0.9423569477015369, 0.9342540119835062, 0.9052030428155062, 0.9094698060510726, 0.703632482152128, 0.7153529061557129, 0.6872624225748463, 0.726726192172872, 0.6906891336909391, 0.708822707852011, 0.7057292744886053, 0.6674909779362765, 0.7158046952972573, 0.875765434807692, 0.9123950154898757, 0.879520814922699, 0.8899569528348342, 0.8976081965863983, 0.907749394498939, 0.8753979032794772, 0.885730318531625, 0.8797076543043352, 0.606087698781159, 0.4253566671181299, 0.5443643638217195, 0.49820141655842576, 0.49466556875832934, 0.3427281968898894, 0.3221161733245289, 0.6039810539790469, 0.4293465881064069, 0.24466223432719902, 0.23662927058689387, 0.5772551835064934, 0.4587337533540251, 0.2724345833409354, 0.5765800826811704, 0.5230709238522254, 0.6254591691234728, 0.6314410251810598, 0.6808150076210824, 0.657493841341894, 0.48322687080056637, 0.4630091045140814, 0.5967171427272916, 0.5777895890088338, 0.6367169862262199, 0.6894006706444329, 0.6856184850064491, 0.7204506194489854, 0.7441432949002624, 0.6572051627731361, 0.714338195167703, 0.15101409401074561, 0.6960147276379967, 0.7477850701061468, 0.728995314113106, 0.7524558272076074, 0.17523439524856588, 0.32239389884339975, 0.2993553744696591, 0.5538959351910013, 0.5539476398344184, 0.5102223557407354, 0.2712585460056779, 0.11678230203158146, 0.1567363509738221, 0.5750847347746202, 0.5272663538501643, 0.504118144026432, 0.5717148790228176, 0.49466006006826324, 0.5546930681595543, 0.5260185821268093, 0.564534700775273, 0.5450272261632645, 0.8540159533194936, 0.8222806618913195, 0.8396221362587335, 0.8375947637907586, 0.834272039455314, 0.7245004168648519, 0.8331995656080762, 0.8172514289720516, 0.8473571197060992, 0.14446113041461472, 0.13287107049590108, 0.11071638452772148, 0.11366835515638851, 0.12602918899389637, 0.1419904980514448, 0.14415365049296558, 0.14297240701691283, 0.13675724969585024, 0.18093922820663633, 0.16383731059847706, 0.4222186910151118, 0.13421962837736612, 0.1356988876887203, 0.2906437393967233, 0.12772689441140395, 0.1378182151359233, 0.15609274883199797, 0.5619469641897981, 0.5928801815950915, 0.577782228515185, 0.6053436112689614, 0.6152934309803915, 0.620996353826094, 0.6197665055617458, 0.6408890091894409, 0.6480906780599056, 0.28109021565257564, 0.4522950050489669, 0.4968704934804068, 0.4849850834739675, 0.5107915759548425, 0.48057879160705286, 0.4364360653361248, 0.4632423745519534, 0.48063017581160294, 0.24289044670787052, 0.21912293761015866, 0.20231028643647708, 0.21927630939791132, 0.2018250286923048, 0.2037951330974206, 0.20409347142290346, 0.1936846141937233, 0.21323458270406914, 0.2074609263035666, 0.6408123562474906, 0.19753878812796977, 0.7481936413253951, 0.24155442544351313, 0.23598854256412527, 0.5967030838803263, 0.22130865316783987, 0.21371171944427914, 0.18603996966699243, 0.9091935494879053, 0.18725379250392382, 0.909955298047463, 0.890484134596472, 0.19855022459215033, 0.8533353177585618, 0.8018549580590852, 0.8195151124274831, 0.8934124712944271, 0.21160835003499823, 0.8724527789301952, 0.2091706673956658, 0.202114725353001, 0.8027355541182455, 0.7239746904648218, 0.853643762111461, 0.20913844019908012, 0.19824033440934352, 0.18577728729956777, 0.18028232115570353, 0.1789354498501745, 0.179452510331373, 0.2003383708455393, 0.19912149258105527, 0.18646086436664866, 0.2009402022183192, 0.08864572599509479, 0.08843924868966135, 0.0830806310279657, 0.08795827684041646, 0.08525645695678796, 0.09348474771314574, 0.10121586156493523, 0.08377374167505747, 0.08812912587352417]}, "mutation_prompt": null}
{"id": "a741c782-194e-4f44-ac0c-2281aba2aad3", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutant = np.clip(a + self.F * (b - c) + 0.25 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability (modified line)\n                self.CR = 0.80 + 0.20 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):  # Updated dynamic probability\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Increase bias towards best individual by altering dynamic crossover probability range for enhanced exploration-exploitation balance.", "configspace": "", "generation": 44, "fitness": 0.4660408807308361, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.28.", "error": "", "parent_id": "02614121-44bb-49d2-8474-33e3fd3e4d5c", "metadata": {"aucs": [0.8730542295891905, 0.869348594800863, 0.8701197582700874, 0.8721047080220999, 0.8789618366135215, 0.8854508742273666, 0.8789283196661986, 0.8742307673936054, 0.8722628589433757, 0.7296207008453739, 0.7487575564319737, 0.7417557925469251, 0.73532593044742, 0.7437641919169657, 0.7276818165524188, 0.751344808797481, 0.7489968385014116, 0.7333885731901368, 0.29266611061110903, 0.4486316793617716, 0.16291475349025697, 0.21697812392361138, 0.12087593223608051, 0.27009358555527707, 0.1431584539514943, 0.1396171773310163, 0.15345610484157568, 0.11536128417986458, 0.10490365783770905, 0.11317782372115193, 0.12094926454657162, 0.10772180800510656, 0.12336006505647257, 0.10112663579059955, 0.13830008052977205, 0.12621047416914533, 0.9382447483678261, 0.9347218536245342, 0.93350438767839, 0.9020725817861425, 0.9171331862144156, 0.9399109332609789, 0.9308571523912126, 0.907848973115027, 0.9473647472823772, 0.7026104348277951, 0.6720530803350058, 0.6889133809501713, 0.7115007330316194, 0.7044768242043574, 0.7021631485887414, 0.681281065191359, 0.7139855877306498, 0.7104744526301204, 0.836286103654869, 0.874830003680076, 0.8628226026211676, 0.9007138680568407, 0.8778151311557278, 0.8991927223589884, 0.667356634014016, 0.8785727096112761, 0.8769139733716399, 0.33169330343423453, 0.2983685802408277, 0.4946772899414802, 0.3254060242476462, 0.3361269176557029, 0.31271048497937814, 0.3703929701318037, 0.5220560007585583, 0.5982553536026751, 0.33390769839488843, 0.40822514182450353, 0.22329632816115264, 0.5078726139544463, 0.36152163835900863, 0.4000276791189793, 0.37543250362431746, 0.43721211205957344, 0.25090265567017067, 0.3828641970308839, 0.47832274701775324, 0.6339563181997783, 0.6046858864768172, 0.33667977914609715, 0.5492130446999959, 0.6207517466989019, 0.6609019758824843, 0.5708947435059191, 0.7288219830894527, 0.6951289076184257, 0.6983915017224737, 0.6607388870097649, 0.6568417573786154, 0.677907320892764, 0.6871787117543913, 0.7127317463407719, 0.6320198945968636, 0.12246211689238351, 0.18124142143750988, 0.2986819013492912, 0.49874290493283646, 0.2591310679886746, 0.1873457220997421, 0.13285518459091783, 0.203631938461453, 0.28309624226189634, 0.47770109454036747, 0.47758741995042653, 0.45429614218983594, 0.5214676659260561, 0.5203024271304373, 0.4976643258465808, 0.44345736552064596, 0.3977277884397169, 0.5312676180063931, 0.8173213296417412, 0.8149819120720294, 0.8335924184945669, 0.7938607284148974, 0.8077193037272312, 0.8130717000917633, 0.8276043762762932, 0.797224598498361, 0.803683750290222, 0.11617928093501273, 0.12282646989666735, 0.14056887001587326, 0.10723798395286854, 0.13972001498425857, 0.12478870486520155, 0.15887767056150437, 0.11270107517212002, 0.11878816171441631, 0.16853073347754344, 0.2004561130289335, 0.17866727954440398, 0.16586125050918343, 0.13476650274671642, 0.15824273468283767, 0.19710120998790348, 0.14336486399263648, 0.13013353586837073, 0.5854175577832292, 0.5697660993604863, 0.5663130755251703, 0.6028374809908558, 0.5702670572557478, 0.5633828582867826, 0.5824118018181925, 0.6200660643602127, 0.6074483049776924, 0.4345955327194897, 0.48049927154340377, 0.43809398955964207, 0.44408268852689103, 0.24004096949154707, 0.4577178238064057, 0.5021458486506687, 0.4614774628826699, 0.5166271521581036, 0.2200679048738613, 0.20263502013918122, 0.229632131918875, 0.21014285898756635, 0.20514576920243477, 0.21290920850921013, 0.21511210463117658, 0.22268767248954835, 0.21185699570211614, 0.5652073315312833, 0.2258693997282334, 0.2095618419086317, 0.6391203824395266, 0.5867428084031905, 0.2050038098006136, 0.22008735873448726, 0.6194120557866767, 0.22009533099334644, 0.18605759295985336, 0.893638436114854, 0.1871902613614771, 0.8875597211989213, 0.8806930285773946, 0.9100478550517955, 0.1405409256510226, 0.7455394382638143, 0.1665997276370661, 0.899690820598678, 0.21052009238002733, 0.886845856460817, 0.8518491880656338, 0.16784356072399298, 0.21177549852169109, 0.10441932673678933, 0.8380176134472965, 0.2080753916639272, 0.19527374674727338, 0.18873063819215696, 0.18685354570681312, 0.181939399298101, 0.20049712237270068, 0.1832154164844617, 0.18244470143836622, 0.18835484208212705, 0.17712635072877891, 0.08924645416516774, 0.0890661520202255, 0.08713450964418246, 0.08423205757696617, 0.09009819433423849, 0.0888834016018103, 0.08597263302107183, 0.09450079874717099, 0.08900335494623834]}, "mutation_prompt": null}
{"id": "e88eb198-310d-4af2-b37d-a8c2708db47f", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutant = np.clip(a + self.F * (b - c) + 0.25 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):  # Updated dynamic probability\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + 0.07 * np.random.normal(0, 0.05, self.dim) + 0.1 * (top_mean - trial) # Adjusted scaling\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                # Influence of elite individual\n                elite_influence = np.mean(np.sort(scores)[:5]) - scores[i]\n                trial = np.clip(trial + 0.05 * elite_influence, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Enhance the local search by incorporating the elite individual's influence and adaptive scaling.", "configspace": "", "generation": 45, "fitness": 0.18283846615805843, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.27.", "error": "", "parent_id": "02614121-44bb-49d2-8474-33e3fd3e4d5c", "metadata": {"aucs": [0.8591068348729034, 0.8617966690821063, 0.8526774155720753, 0.8364171868243343, 0.851085231558226, 0.8068792455101852, 0.8575875460868718, 0.8751193622459431, 0.861742269466456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030024311875957777, 0.04534451614870194, 0.03145967111447845, 0.0433857001823178, 0.03034144093083213, 0.045959161939501225, 0.06247734157299456, 0.03514603018283835, 0.041303819144582254, 0.022940766716154082, 0.015000634595852547, 0.023565651054116676, 0.026379478227043895, 0.0290415624674093, 0.02970309970870444, 0.014763392921912755, 0.024950600504228482, 0.019117365672120856, 0.5640478518658912, 0.5584008056106479, 0.5003114742922958, 0.7941091813888614, 0.7943990826746519, 0.5182055513584154, 0.8438587419080514, 0.8705961118115209, 0.8836196080300538, 0.06274794416174423, 9.999999999998899e-05, 9.999999999998899e-05, 0.027772304820958604, 0.020890049259585042, 0.020324530762069637, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.12512672836868155, 0.12290609741185599, 0.10978285635150065, 0.07058981349637383, 0.1314116446957958, 0.06149843384485798, 0.06800897441142628, 0.07061610032182741, 0.0827545715045751, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.8114208269298866, 0.8273680024244858, 0.813812297175267, 0.44624074641007017, 0.3479888023125267, 0.3036232055904763, 0.8061544115042845, 0.8153975848417525, 0.8344747955688603, 0.02639301388490567, 0.029466720272395608, 0.023405008899459845, 0.05335721896327472, 0.03996699530325243, 0.04697534680941773, 0.03966029263088455, 0.029425104509750222, 0.04464129084031265, 0.15783953813609064, 0.1634627238380978, 0.1369017802481578, 0.157038774596161, 0.15876961762726838, 0.17166197916524384, 0.16069803964345897, 0.17167012452789754, 0.18543545710313203, 0.515543754106648, 0.5286484614045199, 0.5240734183604522, 0.5401635872347286, 0.5461038478815863, 0.5247249526241407, 0.5552978289209277, 0.5418803742731686, 0.5786225605025448, 0.21474331768210664, 0.17013838328168518, 0.18829994930946015, 0.13465916136567724, 0.13032706076875689, 0.15288012338823354, 0.16953660550837812, 0.14339035756631768, 0.15965359455947403, 0.21296769403556814, 0.21320614669973037, 0.1984392733490421, 0.2178967809012402, 0.19388924076427205, 0.1950009237076179, 0.21994234967156945, 0.21015603768751467, 0.20403810476731654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17764514924442099, 0.7627346172947491, 0.5559655375184206, 0.7869119638243292, 0.19542483724404913, 0.1225113835534043, 0.1453908890319715, 0.14700426930620814, 0.15227051280383297, 0.23370079111871822, 0.1578213940824007, 0.15387869605982318, 0.567114076347027, 0.4996001173063197, 0.6808819997556441, 0.1393216940375085, 0.1941679782391592, 0.11900717845544218, 0.18018780576059323, 0.17815669428197156, 0.1792544546728756, 0.18581812881409243, 0.18604290505435506, 0.20128467708497622, 0.1888489496874015, 0.18024530251246684, 0.1945984211866003, 0.04363316121450511, 0.05150597580029914, 0.06561532181576435, 0.04688913236466108, 0.05152680941934473, 0.05457486490415231, 0.04723308016943861, 0.05812652985598399, 0.066551702013248]}, "mutation_prompt": null}
{"id": "d1cd6d5f-48f5-4a7d-840d-b000a9dfd545", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        self.success_mutations = 0\n        self.attempted_mutations = 0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Adaptive mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand() + 0.2 * (self.success_mutations / max(1, self.attempted_mutations))\n                # Adaptive crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand() - 0.1 * (self.success_mutations / max(1, self.attempted_mutations))\n                mutant = np.clip(a + self.F * (b - c) + 0.25 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):  \n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                self.attempted_mutations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    self.success_mutations += 1\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Enhance diversity by adapting mutation and crossover parameters using historical success rates.", "configspace": "", "generation": 46, "fitness": 0.44675776880493756, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.45 with standard deviation 0.27.", "error": "", "parent_id": "02614121-44bb-49d2-8474-33e3fd3e4d5c", "metadata": {"aucs": [0.8498751858329355, 0.8375218740494811, 0.8363338850792468, 0.8328930543421029, 0.8304207018859029, 0.8439857579282497, 0.834706895939078, 0.8358470430473831, 0.8359867113933259, 0.7110102453531235, 0.6875715968937617, 0.6640880515000581, 0.6820568927312496, 0.6935493748747823, 0.6959223754739361, 0.6846030660696303, 0.67257397480574, 0.6690550664912402, 0.32260392384774617, 0.15162603017676501, 0.14050784004857708, 0.2535906948703217, 0.11660951815835452, 0.14139962429329467, 0.15067901237899517, 0.15173395166797288, 0.13966901445543167, 0.11749056760117915, 0.11632441148221517, 0.11789240049487248, 0.11705070529220118, 0.10585598778656291, 0.1258738584287088, 0.1343715967210275, 0.13348719607887471, 0.1201899096671254, 0.9638224976794315, 0.9265538944798253, 0.9102597238737499, 0.9313645274983875, 0.9161706986109329, 0.9250024452376994, 0.9416090710933559, 0.949690599070723, 0.9208985581726974, 0.6060136619548475, 0.6336017567511689, 0.6403347195706903, 0.6336084992073983, 0.6041766311591876, 0.6229281681221558, 0.6155552139503393, 0.6348914914209085, 0.6402124139589263, 0.8515041532522994, 0.8100922665505812, 0.8302777080115613, 0.8428799184867118, 0.8362164281312664, 0.8509681049101387, 0.8406290556823016, 0.8308613101664952, 0.8570551085248871, 0.436815252249241, 0.40578551542813734, 0.4107708321154825, 0.4120662160496088, 0.32651391370531224, 0.30689284115202653, 0.5668603995184697, 0.44974275591934554, 0.42473360623207446, 0.45541153987495586, 0.3039578547890621, 0.4900850735066369, 0.38813850609479816, 0.5540431732523454, 0.3845056868431469, 0.5130369523023766, 0.489278417119865, 0.4730563963864778, 0.555588904150802, 0.5629196023200387, 0.5245605076507533, 0.5657023005578107, 0.5165121982817826, 0.5376909302752086, 0.5570230864934338, 0.5277184255019345, 0.5561393628744506, 0.6575528816238855, 0.5835235881938239, 0.6671221230541732, 0.6720595740902204, 0.6263139447218189, 0.6478878237971042, 0.664689591221239, 0.6473561888996155, 0.666564700198621, 0.261368749913665, 0.1288694222031994, 0.23029844099541885, 0.4275837116748922, 0.23817838729507768, 0.2039381515949955, 0.30312125875076235, 0.25940297262613654, 0.18283637774375394, 0.406081148921151, 0.3956380362855473, 0.40144076872405654, 0.4054871069402183, 0.40795150959833804, 0.4379649606664485, 0.4061265555797644, 0.3860245768245302, 0.4094388481763166, 0.7550850705258123, 0.7700037648700016, 0.7628058510831848, 0.7548929617791064, 0.7509352602973179, 0.7616186176053266, 0.7688109778999836, 0.7601349316441577, 0.7562255837016967, 0.10992729163567694, 0.11382485203642267, 0.11946190747933128, 0.13014564812706997, 0.1133661411282939, 0.11209619038364671, 0.10894762640257738, 0.10741048795222774, 0.11329706718039156, 0.1326562167413955, 0.13764154198707979, 0.20513803626998484, 0.13649655237690783, 0.15141181699045114, 0.1794184636927033, 0.14745362087476843, 0.1439958978455459, 0.129261255712682, 0.5030058420039553, 0.521232694110805, 0.5234098165901075, 0.5202221510339679, 0.4921181864558033, 0.5215367215644281, 0.5329155375035195, 0.5647675405915265, 0.5690872991610691, 0.40108041921500615, 0.41839651832822544, 0.3943953262906137, 0.41378267196423246, 0.43587112426946706, 0.4149960871842804, 0.4228086297089739, 0.44670634829095657, 0.4437375795489452, 0.20040253876991887, 0.2224277729036872, 0.19850474625511327, 0.1932880851040082, 0.21349451953678122, 0.21210886024370101, 0.1879179675150292, 0.21561299508276233, 0.22437313679868331, 0.4771625665728425, 0.2225238600489544, 0.23731400501637445, 0.5260922906865382, 0.22873120619873555, 0.23479566129047025, 0.20601564402468397, 0.575685378002182, 0.2111378927944927, 0.18705724238339472, 0.8268329028905566, 0.8520053560990059, 0.1757177179613778, 0.8320770694550538, 0.8291099067723441, 0.8371222290497223, 0.8261586151164794, 0.8497814400074045, 0.7979896169961873, 0.20971764843254725, 0.1684286423392003, 0.7850143382404591, 0.20753751188327418, 0.16720590034879046, 0.2104322068200778, 0.20630827748505443, 0.15430612789456521, 0.1831524665902573, 0.19550487201053457, 0.18327432395423904, 0.1819236254987323, 0.17760506026730605, 0.1882335164351413, 0.21392461777359761, 0.18395906943462603, 0.18318987483240978, 0.08667335294084566, 0.08909087005510774, 0.08992384818071208, 0.08232513730359747, 0.08739995046606275, 0.08432506730711542, 0.09345828965435465, 0.08601089377718218, 0.08426894669413831]}, "mutation_prompt": null}
{"id": "08b575a2-e3cb-479b-bc61-667706126af2", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.4 + 0.5 * np.random.rand()  # Adjusted range from 0.3-0.7 to 0.4-0.9\n                # Slight increase in the bias towards the global best\n                mutant = np.clip(a + self.F * (b - c) + 0.25 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):  # Updated dynamic probability\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Enhance the exploration capability by adjusting the mutation factor's range.", "configspace": "", "generation": 47, "fitness": 0.41877029534814375, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.26.", "error": "", "parent_id": "02614121-44bb-49d2-8474-33e3fd3e4d5c", "metadata": {"aucs": [0.8254822168375401, 0.8175174432245157, 0.8265538537896475, 0.8269046761646819, 0.8189417782551658, 0.8137596344561269, 0.8340486455440898, 0.828960063987278, 0.8452513073816603, 0.6471616938745388, 0.6561966680525666, 0.637651068368289, 0.6536682628020274, 0.6477572761871793, 0.661254249639673, 0.6164917542346635, 0.6508626391217311, 0.6665818156644938, 0.1284344437232594, 0.11296236003934279, 0.12257585688754769, 0.10970712835075502, 0.11580998239053752, 0.10897214166147529, 0.12337918701610706, 0.10870675658123652, 0.10936480176188956, 0.09651010957439099, 0.12907758786564205, 0.11075313027253941, 0.13414600234883378, 0.11095288701018524, 0.11081125087404176, 0.09785965507700845, 0.10284214994883545, 0.11797454813351105, 0.9216622647847654, 0.9072513144325473, 0.922862589587111, 0.9438804853604006, 0.9275093499667403, 0.8913475741172081, 0.9514174384121172, 0.9232112650383986, 0.9485654042323928, 0.5780263809999564, 0.5302223608058879, 0.5869100991493157, 0.5727081215357996, 0.5657933500165204, 0.5856968014375983, 0.6251227445141172, 0.6063810462880523, 0.573527440308825, 0.8232146984992615, 0.8311608528598198, 0.787823726863812, 0.8237070633228915, 0.795063585037397, 0.8359462240926189, 0.8289375741948036, 0.8358430695105727, 0.8543941685336172, 0.4865022697222564, 0.5285931090789855, 0.48932716980560276, 0.46481912901086875, 0.5052037400250178, 0.5157944222596115, 0.5548772524719836, 0.4481503941152498, 0.5290135978643749, 0.26168694356507916, 0.5401452761356107, 0.5856806164668501, 0.5119489835748193, 0.4381565892138549, 0.4976066441043937, 0.5054775344340607, 0.4562567010485249, 0.38890717596777336, 0.5217630727459108, 0.5181487568560206, 0.5239397495441258, 0.5389441296505608, 0.5031199893103807, 0.45681145414270163, 0.4937902075792092, 0.5025690414464961, 0.49855637287673804, 0.6238990425246577, 0.625374632525861, 0.6285294678360198, 0.6427382709301424, 0.611889849890018, 0.6194514478149937, 0.6369540831054278, 0.6307991847938708, 0.5932700087671807, 0.23813282813805658, 0.10817779473361355, 0.14404563437769524, 0.26400255574465414, 0.33671877411106077, 0.16314357275438818, 0.2785573140919312, 0.26334055963527137, 0.29329340957925065, 0.4024109221067347, 0.3661102129734787, 0.3966004624630942, 0.38660954731657293, 0.3689418842737143, 0.39081724432676535, 0.39505683429152727, 0.4251057547995236, 0.3931897296581335, 0.7431391290614006, 0.7610253783192649, 0.7581268127328966, 0.7462388159183966, 0.7581271784730739, 0.7475813524048154, 0.7387276271471301, 0.7418675587704753, 0.7344794186019552, 0.10977673275022803, 0.10709264343107083, 0.10998819012102323, 0.10948144672596338, 0.10167957108331771, 0.10707009200646045, 0.10401130623377708, 0.09675325423972658, 0.10549582868045004, 0.13067311637819967, 0.1236604828890544, 0.1327966473275759, 0.15105265708371718, 0.13653907791504882, 0.1445869466390335, 0.13620344082589886, 0.12265189412653932, 0.15556414667936092, 0.44573813178447685, 0.45217371034394327, 0.4226899166939565, 0.41727638229868436, 0.460882575354322, 0.44032164954028463, 0.4800460959417435, 0.4731517152521252, 0.4753517579847196, 0.3664414931311799, 0.35698875724559165, 0.36417918401829585, 0.39764593723679553, 0.3578176528767647, 0.3473507583207295, 0.36309430827141753, 0.38316216748140963, 0.3844820137674654, 0.19619839656247218, 0.20005302625753763, 0.19520893417674312, 0.22458530281329125, 0.20447913941758367, 0.22341641580596483, 0.18832150443260653, 0.24013230309946232, 0.19627049331079816, 0.4028603185462182, 0.17548208742577076, 0.18437346086009543, 0.18975729712567357, 0.4315226893513475, 0.2738179480884013, 0.3738860958498913, 0.3569084369061567, 0.21540232591464115, 0.18529719331406724, 0.8495007081313004, 0.14626991583855997, 0.8606799509259287, 0.8220939901275035, 0.16347767014241776, 0.7756065425469273, 0.7422748823229146, 0.18145933873619868, 0.20801502776000125, 0.21040701284802832, 0.20701250226138324, 0.20934555924523557, 0.12776711004619212, 0.16545323778053556, 0.20891526722616705, 0.1526301494578376, 0.16525768730016066, 0.21037132913643652, 0.18004835821411502, 0.18070642106809864, 0.18289356207326424, 0.17700033755407785, 0.19814661827460223, 0.1889498413806443, 0.19245066969038038, 0.18587780561180256, 0.11476609840930452, 0.08665544702593142, 0.09117424880917202, 0.08569230269844519, 0.08403695346099072, 0.0845044659943236, 0.08433473122789092, 0.08433569799393281, 0.08809066292359569]}, "mutation_prompt": null}
{"id": "fb5eed97-81f2-4e9b-a34c-e324b853dbbb", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutant = np.clip(a + self.F * (b - c) + 0.30 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):  # Updated dynamic probability\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Enhance exploration by slightly increasing the randomness in mutation strategy for better global search.", "configspace": "", "generation": 48, "fitness": 0.49330695684283576, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.49 with standard deviation 0.30.", "error": "", "parent_id": "02614121-44bb-49d2-8474-33e3fd3e4d5c", "metadata": {"aucs": [0.8831838677113955, 0.8889895698873738, 0.891118170141475, 0.8998892942637516, 0.8990681021827616, 0.8946113419532067, 0.8960710777966937, 0.8969057454906734, 0.8919463391646171, 0.7815149192914674, 0.785180946857195, 0.7544136722241908, 0.7587736504410947, 0.7589108210666466, 0.7686250732603179, 0.7803036752036455, 0.771544249967661, 0.77469588481643, 0.14127698514376175, 0.1407552905117987, 0.13981646514033597, 0.4052904704682845, 0.15619802455448994, 0.1358838214031015, 0.4161798718929386, 0.46512911004695723, 0.13635044923302864, 0.14765108015403927, 0.12700680659086405, 0.1105637758246294, 0.14200603576927318, 0.10975298616658946, 0.1198784141791448, 0.11142083021646498, 0.12967816264457865, 0.12430973697821046, 0.9445682288053554, 0.9256467954505241, 0.9367439965602188, 0.9184712795665878, 0.9249271125425469, 0.932239445695981, 0.9168679045080692, 0.8934950509869197, 0.9242768977818682, 0.7557169516016325, 0.7212789066852816, 0.7535603396118056, 0.715761465254162, 0.7319434298627348, 0.7522817687614985, 0.746945553976291, 0.7598469652618269, 0.7419686276868188, 0.8938433608053261, 0.8884930477846814, 0.8885905981317751, 0.8938296512539098, 0.9237479554396092, 0.9006599496115775, 0.8653362833443913, 0.8887230928480363, 0.8873498344234951, 0.5632742715022735, 0.2211028252862004, 0.37228287094206414, 0.48667067228953564, 0.510385835773236, 0.5120072222122839, 0.4022167443256851, 0.6243200767400618, 0.6299003226155249, 0.33837908784795323, 0.28866686598240276, 0.5093151507178154, 0.6061892392752494, 0.3403877846164719, 0.477824150416013, 0.25793869814748416, 0.13472514539470137, 0.35454720807881235, 0.6807653925184944, 0.6899648341744311, 0.6639828697224172, 0.6375129727500553, 0.7035211954244953, 0.23051296612564698, 0.6988921616274426, 0.6999483338412258, 0.7104192586591873, 0.7649939963106248, 0.727067627973143, 0.7555736694800501, 0.7111696231999824, 0.724492705416889, 0.6462106293197065, 0.7675088425969239, 0.7787790782919148, 0.752385992554782, 0.20112727420751386, 0.2105094243910356, 0.3117352849322219, 0.178916874726736, 0.23723557983289134, 0.29129476201202487, 0.3655149208945294, 0.1547890990741846, 0.3764570713450397, 0.5551787922729046, 0.5649081656022594, 0.5931585483938027, 0.5715337979768927, 0.5842092195867303, 0.580229259967977, 0.5729990923086182, 0.5788094701773805, 0.5812065074887985, 0.8395069743878666, 0.8527488444700899, 0.8257824857577096, 0.8505939755891325, 0.8586389326844364, 0.8443935410072353, 0.8430466134617818, 0.8561715768359981, 0.8324366446337123, 0.1549733348767811, 0.12712285443043458, 0.12193881013390495, 0.1448351685223479, 0.11810066592916924, 0.10145355276474022, 0.13431561489554955, 0.11482652716225517, 0.14313157090222506, 0.2216706152641702, 0.22130021219520435, 0.1792494926222038, 0.15111304906304068, 0.14810243702365056, 0.1346037335192828, 0.5716676632120441, 0.20259169204968797, 0.15907009151926377, 0.5745017400204804, 0.6480834110014569, 0.6348917448842373, 0.6751866746946333, 0.6322268748492963, 0.6481703369986992, 0.666691010877801, 0.6565572283404935, 0.6430593875665918, 0.48090869294944916, 0.4849055306538873, 0.3174546688069836, 0.580917675749298, 0.4841125362733554, 0.4243890315817477, 0.5213737521277262, 0.5534722488579218, 0.4930539654088314, 0.20975954910350336, 0.2060871956704412, 0.2014600565526521, 0.2096934844831635, 0.22294133170365404, 0.21159995854327074, 0.2334697609478179, 0.20879292943565864, 0.20133521682558164, 0.19285734292763768, 0.20927118513472376, 0.20320877629950007, 0.2215495719857865, 0.5561519292198891, 0.20415269967783467, 0.23827216829438913, 0.24928822514245907, 0.24401668689249167, 0.1864972305525685, 0.9050157350716483, 0.1858245881745476, 0.9076655811822651, 0.1980662433323077, 0.8968470072425297, 0.1418740433271818, 0.8130738804967387, 0.8765724006297512, 0.903253090288245, 0.21258894826868613, 0.9088794504970349, 0.16817414813710507, 0.16735524517433864, 0.835559688844084, 0.21011886699308158, 0.838030596858743, 0.9033767038209903, 0.17758527351775122, 0.1796588382957336, 0.17705981129623616, 0.17081582557206199, 0.18411482376872257, 0.1753886695768937, 0.1804514740295985, 0.18333928640450048, 0.1946102866183027, 0.08648640320559475, 0.09208130845431883, 0.09328748135838394, 0.08954648365155149, 0.09285797466722834, 0.08574090719581906, 0.09499837508415654, 0.08964726894907071, 0.10494880189275158]}, "mutation_prompt": null}
{"id": "2b04e050-8703-4f75-91c4-3ffd5993b25d", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.35 + 0.4 * np.random.rand()  # Change made here\n                # Slight increase in the bias towards the global best\n                mutant = np.clip(a + self.F * (b - c) + 0.30 * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):  # Updated dynamic probability\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Slightly increase the exploration by adjusting mutation factor range for better global exploration.", "configspace": "", "generation": 49, "fitness": 0.46809742375015695, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.29.", "error": "", "parent_id": "fb5eed97-81f2-4e9b-a34c-e324b853dbbb", "metadata": {"aucs": [0.883172270267459, 0.8757061969804343, 0.8765070614491887, 0.8782277810906659, 0.8830216616151395, 0.8802227622891068, 0.8726003920716393, 0.8758010755182787, 0.8819465642421516, 0.7595341857493015, 0.7513723381424564, 0.7299051211551546, 0.7522847158506253, 0.7159444764079168, 0.7518853918571822, 0.7405834405862269, 0.7661227404252018, 0.74946723614507, 0.1172093762515628, 0.14093516273389362, 0.18884732285061523, 0.13411034241865205, 0.1437566896122967, 0.12542545094904767, 0.1332607002738061, 0.16860173867575445, 0.164347424838567, 0.14026867051910596, 0.12236348646303141, 0.11439204875185915, 0.12262185039253581, 0.10744073052337011, 0.128215550719872, 0.10728471637891668, 0.12227981846673652, 0.11869300338239319, 0.9275649346635638, 0.9198279452147867, 0.9257902256739015, 0.9215861286879884, 0.9015199592884696, 0.9320249127412618, 0.9603342866829145, 0.9647448911010068, 0.938337763629883, 0.687443304487146, 0.6905967285334647, 0.723589351505859, 0.7273629830368415, 0.7116654723381837, 0.6928032546669571, 0.6997979156893297, 0.7055528288327118, 0.7183569918926487, 0.8798657449696057, 0.8774171496940236, 0.849037879672079, 0.9024219934682053, 0.8971896280363374, 0.8900542306877388, 0.23228079953812708, 0.8758005429797691, 0.8670312289406701, 0.5177321620852416, 0.4595605532576732, 0.5911996325654298, 0.541531559076359, 0.5232504751577088, 0.5640378274240299, 0.4419158395644578, 0.5432561212622026, 0.6180643589810955, 0.4826175537107652, 0.5217534863547313, 0.46068922543942725, 0.5583436170537157, 0.1326945181471394, 0.5979597897740376, 0.5754771157348337, 0.5367469583664046, 0.4867633508966721, 0.4263212048904944, 0.6481999979575648, 0.6571765201622896, 0.6399598370683866, 0.6522734431043893, 0.5710831497319504, 0.6468385803800305, 0.6461261085000376, 0.6465675485826949, 0.7523064575095706, 0.6920780470754595, 0.7253142596124293, 0.7320486689149697, 0.7448472839426201, 0.7052137172191912, 0.650404277623519, 0.7313736171635197, 0.7201280262915116, 0.31617304389918766, 0.3271047916829317, 0.11588336055452853, 0.529674302453533, 0.4971171582523477, 0.22471332976471114, 0.28007167739117533, 0.15513490037294564, 0.2118315563559382, 0.544897193750072, 0.5365334839021403, 0.5007220130732273, 0.5337251057410036, 0.5279962001618992, 0.5588594586804155, 0.5177615230324073, 0.5438009632546865, 0.5416683117442203, 0.814423896113932, 0.8382496485093271, 0.8381945092371245, 0.820084672404263, 0.8279659666697018, 0.8377711524154183, 0.8263270113262291, 0.8254151986661626, 0.8280022037846009, 0.10463400550009316, 0.11200555189979311, 0.10990295788716464, 0.11256063198429234, 0.19263628582043524, 0.11724634762215613, 0.13511044390388927, 0.13245102573100942, 0.10413832119096589, 0.17330077603699934, 0.14576554628581195, 0.5268411710525471, 0.14502539848201124, 0.25605766163942933, 0.1392895143816386, 0.16879975324571883, 0.13353308917370832, 0.17679780987133653, 0.6025831976218612, 0.5862845679111769, 0.6073548899457146, 0.5356071521202167, 0.5780362829469468, 0.5739299799487303, 0.6362622420533415, 0.5858454166270305, 0.6260790724953411, 0.4753352200395088, 0.46867398875327226, 0.49444292685661617, 0.4642944195456994, 0.4547296739781156, 0.48410887375849443, 0.4984347871754784, 0.5132146948640388, 0.5064022505545752, 0.20128292254662727, 0.21334754819134116, 0.20988976612161114, 0.20555599837791116, 0.20874881649210975, 0.21198358666992756, 0.20002299344668806, 0.21262009456099673, 0.2120159495270465, 0.24136361391310301, 0.23224774788705294, 0.20800486276174424, 0.23354800371141304, 0.6562315453994372, 0.21445840836866448, 0.21781654608443746, 0.6018460189536923, 0.21860097354652197, 0.1858318298708046, 0.18510862106323533, 0.152238908363988, 0.8918614428510305, 0.1994528176606175, 0.19816345784156342, 0.17229662329562156, 0.16516149811592518, 0.15671859487167206, 0.8820101100103264, 0.2121545556027491, 0.8797307945745809, 0.21026691010747167, 0.2082044225096248, 0.2065758785690166, 0.21023947941532184, 0.15475519485868894, 0.8489708510051664, 0.18067002412588407, 0.1857171327579309, 0.17149150908756494, 0.21385111473950746, 0.19233402004455002, 0.18281854769414674, 0.2090925131551995, 0.18943524254779864, 0.17802776931951958, 0.08921332867368059, 0.08740916758787731, 0.09195532960728559, 0.08446138529746583, 0.0975151612308891, 0.08423646085589132, 0.09833205839970904, 0.0827791789808463, 0.08634417339989231]}, "mutation_prompt": null}
{"id": "0bc05cfa-0e81-46cf-b889-9869887902e8", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutation_scaling = np.random.uniform(0.2, 0.4)  # <--- Change applied here\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):  # Updated dynamic probability\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Introduce dynamic scaling in the mutation strategy to adaptively refine search direction.", "configspace": "", "generation": 50, "fitness": 0.49621245636142663, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.50 with standard deviation 0.30.", "error": "", "parent_id": "fb5eed97-81f2-4e9b-a34c-e324b853dbbb", "metadata": {"aucs": [0.8968138980410117, 0.8899981331985486, 0.8918787593894177, 0.8902399287433795, 0.8897959636750616, 0.9007415152775595, 0.8965930726151682, 0.8958849987536968, 0.883659416925253, 0.775967504364034, 0.7823098000181051, 0.765698477654126, 0.7819004110516107, 0.7631663778831159, 0.7656744752468001, 0.7581995836512956, 0.7521674236701249, 0.7536517168758323, 0.1297259568552408, 0.12585374366405178, 0.13972634762073144, 0.14444180699825115, 0.1758107396441304, 0.1395103645732062, 0.313283842055472, 0.160903836521903, 0.157008582542972, 0.12158373090222085, 0.11075709523790389, 0.12644145997380163, 0.13460186513015593, 0.13169629655325477, 0.1311583875134118, 0.13537798979404725, 0.10091656279251005, 0.13717688493913482, 0.9138991735003892, 0.9049665928549139, 0.9072288503105215, 0.9416156471853161, 0.9091708243309324, 0.9237265153368359, 0.9318610632009284, 0.8874716949460113, 0.9293087168491093, 0.7537913643331825, 0.7121601084501601, 0.7283679111091863, 0.7320999094559808, 0.716687097999543, 0.6755136902880478, 0.7441618059309922, 0.7401434002620887, 0.7402172148501471, 0.8898720193032419, 0.908415328950279, 0.9158260007615844, 0.9082837079813658, 0.8848396097488799, 0.8931158419871357, 0.8963139992664872, 0.8870661826145694, 0.9094809438027366, 0.745695025906525, 0.652227740339073, 0.504690253535686, 0.4566333870357293, 0.13368422214485132, 0.4389999796926657, 0.4272470268662829, 0.37969896323049146, 0.4789811152661525, 0.23841435994950966, 0.37002851062915254, 0.38094151415403954, 0.5646647778778786, 0.3972159464099805, 0.45254608978862976, 0.4441967610579405, 0.2964887752708172, 0.5690256369881179, 0.625905786628205, 0.6846811075858773, 0.6416556746568389, 0.7043364710052384, 0.6046401625805289, 0.1274237100245187, 0.5826214775308551, 0.563292393176618, 0.6715072241053075, 0.7604715624175502, 0.7490946113360831, 0.7556536053280719, 0.735649427203776, 0.7341746997773891, 0.6930992563097578, 0.776425875705783, 0.7521607735082314, 0.7898128113107209, 0.35112429333051787, 0.23188746105545344, 0.19335070086287842, 0.22447813309178233, 0.11001731020932326, 0.455450586981327, 0.2584750285408861, 0.14575956563481574, 0.3224153565979132, 0.5579348314876327, 0.5798585901638528, 0.3327851738510197, 0.5698576950927345, 0.5863418683502898, 0.6054486682214117, 0.5592176549667537, 0.6148169937786142, 0.3792867713813294, 0.8516125518730229, 0.853504120093494, 0.8443681680276401, 0.7754901877548279, 0.8510089503826066, 0.8276010173431997, 0.8439081717426307, 0.8417139016573183, 0.8329752622818678, 0.1151577587602356, 0.12037751887370318, 0.09227214868863598, 0.12895710972101138, 0.15844015211784968, 0.12359927400484083, 0.13551385030871865, 0.13330058360860442, 0.38209287899566224, 0.18712215554253098, 0.13330961662193708, 0.17740240050840272, 0.18826209501104196, 0.5334269353491823, 0.2532038406252973, 0.24285266063207978, 0.1428398628722276, 0.2482866337117805, 0.6772855342936626, 0.5832340277595209, 0.6308701228733178, 0.6760750748927492, 0.5612700710730534, 0.6364522966866574, 0.664424713449911, 0.6641693713288174, 0.645803567520034, 0.5439158252210828, 0.3249579483457953, 0.6044834966856814, 0.5362472307217838, 0.5938174324855432, 0.543279927799576, 0.597438375579201, 0.5904416563995976, 0.5955959127693551, 0.19983382664288085, 0.20681366722900607, 0.20228244573285936, 0.2551663680090692, 0.21792482541027747, 0.22300250408816757, 0.22802578917608862, 0.21361419654003677, 0.21806058984206644, 0.20456623797114337, 0.2092741991367002, 0.18182316696894973, 0.21814071523553658, 0.23380718449866367, 0.19397038107508013, 0.41867486478042415, 0.6451291800426444, 0.2418679562427858, 0.9172785457358217, 0.9107243653019046, 0.8847093306240665, 0.9249571215809301, 0.1979602306022329, 0.19914592588861324, 0.8794061572799745, 0.7912092363652461, 0.8859152270893978, 0.9056000276265549, 0.21072167956098709, 0.8979445786487277, 0.16777929190655216, 0.2103778800811793, 0.8952136392840442, 0.21312321258527012, 0.104781330140586, 0.8378264867398231, 0.19972040337747132, 0.17995229158660864, 0.18736500655013422, 0.18167777200110968, 0.19330569101275197, 0.17962376351244347, 0.18723918184856503, 0.1847247800354943, 0.18946036970543922, 0.0913000896057714, 0.08952819771184928, 0.1070933121470311, 0.0882346688880592, 0.09116005053748599, 0.09269317610715022, 0.09418089618944814, 0.09237300769896939, 0.11882759100187235]}, "mutation_prompt": null}
{"id": "27340fda-292a-426e-be78-4e7b2de15806", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Adaptive mutation scaling based on distance to the best solution\n                distance_to_best = np.linalg.norm(population[i] - self.best_solution)\n                mutation_scaling = 0.2 + 0.2 * (distance_to_best / np.linalg.norm(self.best_solution))  # <--- Change applied here\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):  # Updated dynamic probability\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Introduce adaptive mutation scaling based on the distance to the best solution to enhance convergence.", "configspace": "", "generation": 51, "fitness": 0.4737542199892958, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.29.", "error": "", "parent_id": "0bc05cfa-0e81-46cf-b889-9869887902e8", "metadata": {"aucs": [0.8910265877542655, 0.8791067988794279, 0.8762940094104457, 0.8804504315389936, 0.8783969204078272, 0.8833485619043292, 0.8584543756332111, 0.8762183212265614, 0.8770554425101268, 0.7674031010515159, 0.6641728818853446, 0.7369893128016869, 0.7525552601168598, 0.7370092745974436, 0.7618442390563359, 0.7316487584014364, 0.7437162401679218, 0.722272702958997, 0.13034153087223477, 0.11443197061537813, 0.1555628104014033, 0.14264913251760336, 0.1341931146116645, 0.12308796480875195, 0.16121367615964932, 0.17354649024958801, 0.19837242347837536, 0.11920682857886511, 0.09579839476548113, 0.11145156045539861, 0.1331753540900581, 0.10267115228917534, 0.13502851622176204, 0.12356531473874999, 0.10807965516886486, 0.10920849732547144, 0.9117096822938057, 0.956583905509844, 0.9163697074700906, 0.9174807263227621, 0.9419384141847056, 0.9486653496870708, 0.9069073283001081, 0.91451528305094, 0.9047051433035311, 0.694734873244875, 0.6789624596009098, 0.7083689066827011, 0.6640728784730145, 0.6795470843794396, 0.6582206482769791, 0.6566619737271464, 0.6954146266950831, 0.7017305761224253, 0.8892143926950316, 0.8896443537298152, 0.9031339459883037, 0.8389909480430364, 0.9117356201639779, 0.8970517367259216, 0.8610495569013392, 0.766844545282196, 0.8979414406519489, 0.598158648753373, 0.2167552671714411, 0.1318479343003639, 0.46948876156902486, 0.276788807309829, 0.45877367838905425, 0.7350504586192044, 0.13622114646393824, 0.29824639638691974, 0.5419016677906031, 0.19950809347351162, 0.26180423393260954, 0.2898664575191743, 0.4069068420836961, 0.20128969194511337, 0.2820143725116391, 0.5686357418745689, 0.4153229137788078, 0.6254313395355409, 0.6533374175357398, 0.6404190544507431, 0.654251092078288, 0.5911134610122191, 0.591102453508189, 0.19979810826822453, 0.6654377782394408, 0.6780661523274518, 0.7445745950235103, 0.6924789376030511, 0.7608630011500722, 0.6870083042192967, 0.7613128022091037, 0.739219564246717, 0.7437146410497169, 0.7001693428260376, 0.7477068249326657, 0.19349267551559157, 0.09679699141438836, 0.09186462150340435, 0.5720762524294214, 0.5465288799321353, 0.25765367214504487, 0.1902915509986327, 0.17037613612669755, 0.28937380862365925, 0.4981527398048533, 0.505027898521845, 0.4879859995859762, 0.4949684855547689, 0.5143887294188265, 0.5423235250462093, 0.5081589554835304, 0.5443924352561657, 0.4966842013355839, 0.8361950705943206, 0.8313998239302615, 0.8281448296592503, 0.8194698562228035, 0.8266896417355528, 0.8405749455540669, 0.8415982605408767, 0.8211608371160628, 0.8445103896849213, 0.10542488717623077, 0.10847071213319137, 0.118568091536837, 0.10151632617585982, 0.12959227810414464, 0.13163180659891005, 0.12445402421550311, 0.12996899830837627, 0.11093642309884377, 0.5820862101655758, 0.5201490452692265, 0.19692042017892764, 0.5547885453909702, 0.43190984979989366, 0.599281679701451, 0.1740182273927241, 0.1514741208079231, 0.14904099680393923, 0.5585896839555471, 0.5880187527528151, 0.5574125585768871, 0.5850286009310319, 0.587563155186211, 0.570468332142632, 0.6450509522865508, 0.6234829824366518, 0.6358416943834461, 0.45125170174685625, 0.4095146267817684, 0.49636470921847053, 0.5098047611558252, 0.4506618910239689, 0.4964437771360428, 0.5029220196532791, 0.49723934421930915, 0.46784114303154034, 0.2283031524242234, 0.21596087390821928, 0.21394802519955103, 0.24335169151746983, 0.23697477976076764, 0.2003838067156275, 0.2177460496180217, 0.26820108323049685, 0.2443453975668871, 0.24918903136992032, 0.21730801683847378, 0.20573704402399529, 0.24535867757022323, 0.19189371815311085, 0.24524461829515032, 0.6585031968463899, 0.7122093599145904, 0.20829827200618978, 0.8945399084888418, 0.12282070638116693, 0.14690334841632136, 0.17272858197232688, 0.19915656366871426, 0.19906818623186207, 0.9070688194985074, 0.9054874278434952, 0.9139936340780265, 0.926871957925329, 0.21139419723398756, 0.07348972666392817, 0.21238873222344112, 0.16824667742749966, 0.8011316711825075, 0.8349829037240075, 0.8516205941352945, 0.16766683423091622, 0.17892834577553363, 0.1846098560116538, 0.1847274178950432, 0.19242414116462758, 0.17591497663989142, 0.17933033306209434, 0.19110165926436873, 0.182209495101748, 0.19747558044847036, 0.09317998607873357, 0.09238073577000128, 0.10952655025996338, 0.09244015614085799, 0.09735260459608142, 0.09296030597960692, 0.08685556058755506, 0.08926365374601686, 0.08736865042086372]}, "mutation_prompt": null}
{"id": "e484f2dd-b4a2-4e32-8bc1-c90e3b537253", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutation_scaling = np.random.uniform(0.2, 0.4)\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability with further adaptation\n                self.CR = 0.75 + 0.25 * np.random.rand()  # <--- Change applied here\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)): \n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n\n            # Adaptively reduce population size to focus search\n            if evaluations % (self.population_size * 10) == 0:  # <--- Change applied here\n                self.population_size = max(10, int(self.population_size * 0.9))  # <--- Change applied here\n                population = population[:self.population_size]\n                scores = scores[:self.population_size]\n        \n        return self.best_solution", "name": "ADERLS", "description": "Enhance exploration by incorporating adaptive population size control and dynamic crossover for better search space coverage.", "configspace": "", "generation": 52, "fitness": 0.4730715058316643, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.29.", "error": "", "parent_id": "0bc05cfa-0e81-46cf-b889-9869887902e8", "metadata": {"aucs": [0.895031796585065, 0.8965646854312833, 0.8876101557915725, 0.8922814420347225, 0.8875002264489923, 0.8985983481052939, 0.885958169524769, 0.8972673914168948, 0.8989595398697252, 0.7629187377544333, 0.7769605133125408, 0.7620589010895751, 0.7719429228865242, 0.7648905286813393, 0.7342883002046412, 0.7713202971087523, 0.7610630207486634, 0.7758753740659952, 0.1554063220843025, 0.14492091991945222, 0.1551910961851647, 0.15778054888768056, 0.2776789496993284, 0.32186818828411357, 0.4865510828802607, 0.15419998010625646, 0.14566033070290973, 0.29814263278720965, 0.13056633850964483, 0.11831222716180512, 0.22854137024901955, 0.11156763890455457, 0.12609177067947863, 0.1249544172770286, 0.15311585832246688, 0.13386628731560746, 0.8815829574162779, 0.9491832250058165, 0.9229169773186634, 0.9446307295213212, 0.9316652192351426, 0.926827765890916, 0.955664025607279, 0.92384165151983, 0.9524496161647589, 0.7413403862063541, 0.7247853173630914, 0.7316017581308357, 0.74591098175393, 0.7134718769023377, 0.733028733092223, 0.7383282255481868, 0.7217236302496575, 0.7309438502438357, 0.22680041703958898, 0.8730013318560796, 0.8792438066958645, 0.8920049520262366, 0.881012371209757, 0.7565797421926628, 0.8683900592115348, 0.8905801993153111, 0.9114097080914535, 0.5263908405151645, 0.5887488036858156, 0.3025158567113013, 0.309520566680366, 0.5631633404932628, 0.3123659418375838, 0.35254810161100103, 0.2818025800489179, 0.5077338332348569, 0.5151052815402168, 0.31796500996584265, 0.2888210980995607, 0.5549342173230101, 0.5955376979894488, 0.5321052345837294, 0.397241902678401, 0.13221765589561107, 0.2276961859040374, 0.6210061405483815, 0.6404589057104779, 0.5718768511515451, 0.6523272709704389, 0.6324615522474977, 0.5818619773051685, 0.6714949901863434, 0.6592452480866894, 0.6327189550983112, 0.7079925920043828, 0.6841912262219365, 0.7280581746046413, 0.7115626821082954, 0.7126996440178264, 0.6868782425300011, 0.7463313315533269, 0.7521662242933759, 0.7034962480542715, 0.14823903709148, 0.16070644366992526, 0.37833934711236916, 0.46009839827657617, 0.4217083298677239, 0.2522005168786765, 0.1464327009646571, 0.28220786470457293, 0.25332374144606706, 0.5255739150363329, 0.399628282543414, 0.43001780682382673, 0.5232978037658854, 0.5042040998718921, 0.5441312204938125, 0.4165764254064639, 0.4118105737102822, 0.36724846969285374, 0.8206876539630712, 0.829146690632541, 0.8436833468297228, 0.8342069311305556, 0.8220222644383688, 0.836100288198565, 0.7997859319856522, 0.8318008461439628, 0.8256843027257147, 0.15300981979076445, 0.15809379685980007, 0.15229887117767482, 0.12143208868445832, 0.10832886833014888, 0.10965732328325395, 0.13308003199217766, 0.11540598259184098, 0.1190189620781481, 0.1653046872457451, 0.12423556296508376, 0.1583229633472747, 0.1538912797236055, 0.38481872703973086, 0.17522458573738464, 0.16275958042885308, 0.273785977683922, 0.1496031690425358, 0.617799806158946, 0.6544026476828897, 0.6719142372825893, 0.6723556560686721, 0.683866479344282, 0.6354880522222263, 0.6720231262049676, 0.6856519760505275, 0.61854513039441, 0.5136785579903518, 0.516187588496219, 0.4778786429320421, 0.5084126861528053, 0.4962271047442025, 0.5027510223968794, 0.5229249830514182, 0.5403391793928224, 0.5835201218291254, 0.2128460268357757, 0.20244181755659907, 0.22098772150859036, 0.2095034452467761, 0.21612642401127113, 0.2382168445939643, 0.25375839968693426, 0.215208914824923, 0.21573100599177797, 0.2377333776734365, 0.22751047211013986, 0.6857444537471282, 0.20433320684480827, 0.21857871486723146, 0.6465652338528135, 0.23460498831591747, 0.23217064737175064, 0.20632002048598508, 0.9112751163005336, 0.16397209037411398, 0.18441266450076965, 0.8844908692204997, 0.19945596480425065, 0.1992705912891014, 0.8597134234893997, 0.14181460164724413, 0.9029089418166417, 0.9017982267858795, 0.2107615912149925, 0.11114759968313992, 0.8917024786467397, 0.210166596871588, 0.15517155594503584, 0.16653845677140144, 0.10441192269005328, 0.16367015349098313, 0.17892862050587177, 0.18318155665759916, 0.18317570400409, 0.18104042297255096, 0.18236225441075538, 0.18737321483362146, 0.19610209239595222, 0.17442167264648434, 0.18014347593958813, 0.09054199584909639, 0.09391765750581249, 0.10008208248199058, 0.09527735996994324, 0.09000876567103733, 0.09102249374094173, 0.10023177239006509, 0.08425715109426224, 0.09154166438182709]}, "mutation_prompt": null}
{"id": "8cda8ff2-8b85-40ce-a965-ca6c32c1ed51", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.5 * np.random.rand()  # <--- Changed scaling from 0.4 to 0.5\n                # Slight increase in the bias towards the global best\n                mutation_scaling = np.random.uniform(0.1, 0.3)  # <--- Changed range from (0.2, 0.4) to (0.1, 0.3)\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.8 + 0.2 * np.random.rand()  # <--- Changed base CR from 0.85 to 0.8\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):  # Updated dynamic probability\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Enhance mutation diversity and improve crossover efficiency by adjusting parameters adaptively.", "configspace": "", "generation": 53, "fitness": 0.43667874163133447, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.44 with standard deviation 0.27.", "error": "", "parent_id": "0bc05cfa-0e81-46cf-b889-9869887902e8", "metadata": {"aucs": [0.8500353517683082, 0.8480446228293533, 0.8591563731564289, 0.8408309759121133, 0.8542675527148222, 0.85117926428879, 0.84861373201333, 0.8441304324360384, 0.8246368226064658, 0.6813860997157691, 0.6989684693737093, 0.7065918975273797, 0.6886963167716496, 0.6734586791159178, 0.688749185817018, 0.6941047884659995, 0.6900558251718367, 0.6861788351805518, 0.11691828215531563, 0.11232518930910773, 0.13346311535024746, 0.1291929069815797, 0.11088387984800141, 0.14512773495790732, 0.13753452186817883, 0.13919575035411602, 0.11985708855822264, 0.12642481131947592, 0.10758237769706525, 0.11464524736916881, 0.11761528050097436, 0.11929894068224745, 0.13365065949062682, 0.11183206755731245, 0.12371871053063255, 0.10158513590899454, 0.9041266308403421, 0.9091098258427562, 0.9364642880780594, 0.9467972444666137, 0.9293199841430595, 0.9405652156206645, 0.9341614501904223, 0.9173039554036485, 0.9811302393657095, 0.6107037887566564, 0.6315877292319896, 0.6125595963190232, 0.6508662205869926, 0.597677358338963, 0.6073974876144278, 0.6398726461428832, 0.6278719024340635, 0.6251835731638573, 0.8310516445031643, 0.8721000067734725, 0.8616248290610795, 0.8652067833769381, 0.850298067788378, 0.8605482332304268, 0.8566420445118315, 0.8487764461367898, 0.8493327270080547, 0.4625624169413154, 0.4312105372124203, 0.1299543550527842, 0.1316833193560355, 0.48372193386416307, 0.4096614030919089, 0.30896039492185146, 0.3910101494600944, 0.2795731026420383, 0.4042108895884856, 0.47827332658398036, 0.5409261074816265, 0.5083944622424491, 0.3107573437746818, 0.3709021495910594, 0.3922678140603705, 0.40461481230246676, 0.272614863684149, 0.5299210623852357, 0.46628227204966355, 0.5078327199143866, 0.5228111669401295, 0.5346676668797414, 0.5297573559625407, 0.5297507209261046, 0.5125474228639773, 0.5551330014726308, 0.6817869858053592, 0.6204696195679825, 0.6352370069016003, 0.6421145993015073, 0.6641325910392069, 0.6239294869654122, 0.6269190207185525, 0.6502779122155999, 0.6659338192640774, 0.2596751390188551, 0.1604162950632202, 0.17472326022528228, 0.4091141210005834, 0.22388393214821034, 0.43686142344683887, 0.1898151719325607, 0.29367294362937246, 0.10971035672399976, 0.3881731299885016, 0.39093790006273454, 0.40765843774626864, 0.42079572451911085, 0.4026034055432397, 0.4344072562880158, 0.40296137752847494, 0.4236123611192536, 0.4004153277477739, 0.7740508278783291, 0.7849179127467723, 0.7635131817845225, 0.7862226427660979, 0.7743069997011969, 0.7762452311887738, 0.7677076103242051, 0.7604757511535158, 0.7720389769055526, 0.10474098409855104, 0.11588985567025922, 0.12628622950933044, 0.10667777148141777, 0.13193113872485596, 0.11010888040204814, 0.1190654788172717, 0.10448675304156207, 0.1258910609006889, 0.12797689864475326, 0.15112877781210066, 0.13538373941955217, 0.1490406600695895, 0.13011115580020305, 0.12665030360047635, 0.15907766135674395, 0.17447789223059296, 0.14999242955565517, 0.4816334651545935, 0.49076781368172484, 0.5063839400550993, 0.47705923148611873, 0.50670480143622, 0.5280510470227808, 0.5399440742546018, 0.5175250375767206, 0.541406525677528, 0.38662841904205847, 0.40218406552532127, 0.42319964779087105, 0.3742937173843286, 0.38920362411733966, 0.4036279283128561, 0.42031244669307, 0.4071822411761862, 0.4256419664765363, 0.20445333776992103, 0.2119218375212376, 0.2408135208509743, 0.22210521249812587, 0.20987574252790675, 0.19274767711464513, 0.22404495666301172, 0.2048074690096564, 0.20551099024341457, 0.20378078927854582, 0.5368035853582795, 0.19137823363533057, 0.5297289334849082, 0.3723858056141047, 0.19193789987423138, 0.5104580077904111, 0.23221284505367978, 0.20792269731374646, 0.8218512736994792, 0.8116699550627149, 0.1850003044306302, 0.9027648291066107, 0.196305097847001, 0.1986215614686082, 0.18513729245827448, 0.7254299694433151, 0.8199703080155543, 0.8664973200524011, 0.20747570705531126, 0.853734706146893, 0.844454750074812, 0.2076831421561245, 0.16698293786181162, 0.2079956219492295, 0.21004598975943722, 0.1659462062685445, 0.19037876333702897, 0.18928603665928811, 0.1837281932233723, 0.18540692023540772, 0.18065769670111875, 0.1816262990386538, 0.17837251645103225, 0.19511146652600253, 0.1860924238914483, 0.07639443641363852, 0.0897157192453567, 0.08821917072408503, 0.08548590272608159, 0.08797821630573599, 0.08742421545015622, 0.0891205145017413, 0.08740739924803564, 0.09114076778980584]}, "mutation_prompt": null}
{"id": "4b0f9bf6-9b7c-4b96-9fbb-00eeccec592f", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                memory_factor = np.random.uniform(0.1, 0.3)  # <--- Change applied here\n                mutation_scaling = np.random.uniform(0.2, 0.4)  \n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a) + memory_factor * (a - b), self.lower_bound, self.upper_bound)  # <--- Change applied here\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)): \n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Enhance dynamic scaling by incorporating a stochastic memory factor for increased exploration.", "configspace": "", "generation": 54, "fitness": 0.46421342821816175, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.28.", "error": "", "parent_id": "0bc05cfa-0e81-46cf-b889-9869887902e8", "metadata": {"aucs": [0.8665654673095899, 0.8569263131108911, 0.8746918013377429, 0.8692357396559766, 0.8584036874515989, 0.8572162564136806, 0.8673211415235049, 0.8711310387404891, 0.851786577649306, 0.7091149530170522, 0.6746011979892679, 0.7326791850353165, 0.6963484767010863, 0.7098210469840875, 0.7146752336281021, 0.7150888190130207, 0.7215089958875154, 0.7270445559990031, 0.1145376956616666, 0.13862192138571205, 0.11820824326313539, 0.1360686199379636, 0.14695132042544579, 0.1272012146585474, 0.12374886444160238, 0.12262948271314622, 0.11765854192702374, 0.09799330960909325, 0.10268868885000171, 0.12167394918347274, 0.11387497384472878, 0.12269681810632427, 0.12151761772725078, 0.13219512954210677, 0.1042541270852465, 0.15300656128996126, 0.9405660204409955, 0.9108274270714254, 0.9193232149084434, 0.9027568454727043, 0.920603394310226, 0.9329108228514273, 0.9452248550205095, 0.9225751506876362, 0.965322364056234, 0.6874603659279465, 0.6406517278540536, 0.6623901336471014, 0.6823968022566687, 0.6953472303455133, 0.6680392454548102, 0.6997726741088459, 0.7104980648290885, 0.6897762032047118, 0.8707305079467551, 0.8451942291327809, 0.8757370219922489, 0.8869086278584326, 0.8829146230511025, 0.8488383508224118, 0.8880949709112703, 0.8712323598324515, 0.8910844142025509, 0.39936880245875694, 0.5322860949311001, 0.5009463514357024, 0.5030449536352802, 0.5732721534354027, 0.5134851996637912, 0.5071436917603598, 0.6738550723833785, 0.6770583043367064, 0.3717851894751155, 0.6458075507983251, 0.4037494152217087, 0.5424498399341235, 0.3676361405549323, 0.451581496797803, 0.690082174520757, 0.6398395049675112, 0.48046569647905957, 0.6375292694407284, 0.6305745394254285, 0.6062953836158682, 0.4981663562608897, 0.567023531280071, 0.620019685354511, 0.6043416384766338, 0.5371918343731665, 0.6255852315051995, 0.6915705917140971, 0.7156960675271653, 0.6623294301888147, 0.6912289083275673, 0.6752180005197922, 0.6376560026654805, 0.7516574534417056, 0.6792726606522052, 0.6855629097204365, 0.216239845290364, 0.31924939800572105, 0.1612858766128915, 0.2693114331161728, 0.19739183826728235, 0.15884814420764692, 0.22144402142978448, 0.2933189410056699, 0.11216957857650467, 0.4797519065869408, 0.45203332429868204, 0.5025468188105271, 0.466467174868592, 0.5173183918244058, 0.48902480410451576, 0.49301342873262854, 0.48557274924446814, 0.4691746573179274, 0.8063055899210111, 0.8066150966080818, 0.7730393660098775, 0.8129990399328467, 0.7990119700564229, 0.8046128353547574, 0.8146911590692147, 0.8182035345671765, 0.800208693074757, 0.11101424434929208, 0.12087589392138853, 0.11134026919708673, 0.18850323922601442, 0.13729579627441035, 0.10300072675583816, 0.11473662872577373, 0.12201101852216611, 0.10694157029908913, 0.16293467700924413, 0.1341110778903145, 0.2087246367698583, 0.1427362150100424, 0.1760308605732155, 0.16485358581336096, 0.1313191710312438, 0.1296485354771687, 0.35546130909484186, 0.5818161019420487, 0.48372462105599767, 0.5451292488801238, 0.5226315690220669, 0.5505196787791015, 0.5533337334819628, 0.5720710771647213, 0.5777725188836635, 0.5620332386065467, 0.49448072269806953, 0.4353856714798202, 0.48495714363536746, 0.39221602890264473, 0.45269777793523147, 0.4755812236113567, 0.4726656223735868, 0.4892801516803371, 0.46597030228012903, 0.22499730855786326, 0.2054398967747555, 0.20278004332432042, 0.20052973110544636, 0.19770705920734355, 0.1901865761922581, 0.1943643675315888, 0.21117547978209628, 0.20770368083772506, 0.22370070392346364, 0.23668798256998558, 0.25000710907661705, 0.4997052942559165, 0.2448041494799138, 0.2169957645537629, 0.19669564644556348, 0.23879859151424776, 0.23335200079425833, 0.7880042816516764, 0.18334711543236903, 0.8668137756982959, 0.8824284045651093, 0.1976045204980379, 0.8804122629081967, 0.7482467608821669, 0.18528762287757838, 0.17222808485722219, 0.857594853144946, 0.2110188482253652, 0.20926392197162136, 0.8525323749370748, 0.1627067564220639, 0.16697366135509928, 0.7103979455234711, 0.21121347625416687, 0.20823909711217725, 0.1883348963937348, 0.18893166149994522, 0.1851301967697624, 0.19277588345243135, 0.19050693344606084, 0.1916846902819791, 0.21094043883985236, 0.19723180334625023, 0.18009677220734266, 0.08778778569167645, 0.07659652286519192, 0.091980344664635, 0.08280848291751264, 0.08491285499297652, 0.08874892541672708, 0.08627428885565402, 0.0829971344212459, 0.08111788099060635]}, "mutation_prompt": null}
{"id": "3469dec6-6f61-4985-8d59-59f1821f7569", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutation_scaling = np.random.uniform(0.2, 0.4)\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.15, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)  # Changed line\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Enhance exploration by adding diversity in local search through stochastic ranking adjustments.", "configspace": "", "generation": 55, "fitness": 0.4843011144648958, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.30.", "error": "", "parent_id": "0bc05cfa-0e81-46cf-b889-9869887902e8", "metadata": {"aucs": [0.8944026086115412, 0.8837918064826701, 0.8897224373000713, 0.882887900536421, 0.8931965952614881, 0.9002710067164368, 0.8822941573160183, 0.8914144140064167, 0.8818769272672281, 0.7862161696103215, 0.7589043250125881, 0.7762258637572254, 0.7642027433098815, 0.7541975019477718, 0.7432200383992529, 0.7526068678751503, 0.7777300452727258, 0.7541010079712678, 0.21487979946593683, 0.544075369352895, 0.11560571871043124, 0.14293786719746837, 0.11515221256323183, 0.1344459940779652, 0.15894110832298014, 0.2529054679728807, 0.13709262275069634, 0.1254997216278143, 0.13361273494662695, 0.129480646615186, 0.1054053070391554, 0.13986262123649706, 0.09724366846800969, 0.11516188777304048, 0.13457303326695857, 0.1297035281096407, 0.9237116346750447, 0.9246523609021556, 0.9126511567189053, 0.9229153224187295, 0.9278752847886271, 0.9337940737097482, 0.932621474017112, 0.9437890179580121, 0.9525648479028412, 0.7525158536191571, 0.7354884769202414, 0.7247594612795695, 0.7173712701238872, 0.7316694808697763, 0.7206298436594459, 0.7438587509842349, 0.719929555336676, 0.72734796818987, 0.8938279844797156, 0.8968928053198024, 0.8702267204754195, 0.9076415592416046, 0.19292758724247283, 0.9018600712204257, 0.891380898798574, 0.8807176316503414, 0.8951771169641624, 0.5842684145023298, 0.5690038423139181, 0.4544645925831523, 0.4881183435488704, 0.1334235483363444, 0.13457085988192485, 0.412407006348408, 0.49957000587048506, 0.30154162182468447, 0.465414687224995, 0.5654633015546524, 0.5402280481407704, 0.24869225041928023, 0.5506522690082598, 0.4394698956330799, 0.5566552895284281, 0.4637354006992206, 0.13086416225539288, 0.6082244622642008, 0.6980869905462765, 0.5834455936524492, 0.3066914817131231, 0.6859140890975706, 0.4685857078203539, 0.6791420593246851, 0.5596658674046551, 0.5913325954463675, 0.7536464558534932, 0.703936179564473, 0.7682590748361571, 0.7428634847410989, 0.733218409666543, 0.6427728866690225, 0.7396428010668492, 0.7734793741543895, 0.7823057944560736, 0.07924352315235683, 0.25860205823080706, 0.28683119203747687, 0.4662250513217151, 0.20655102302305672, 0.15740968760792495, 0.3312016347271084, 0.25180023497645365, 0.3677490119483675, 0.5694414306637965, 0.5366687910261267, 0.5048841302053413, 0.5907492016026438, 0.5921715132793051, 0.5842150295870527, 0.6130077710684373, 0.37780707258653823, 0.4466938090775491, 0.8329304013466423, 0.8543826670671875, 0.8391793391733309, 0.8393064238623423, 0.8464888638296626, 0.8450208284957494, 0.8527624436026968, 0.8387649392729812, 0.8588996674183769, 0.10549274506941309, 0.1249760807828828, 0.1037110010194543, 0.14003242948153494, 0.1128149074999737, 0.15350482703251567, 0.10878126736720928, 0.09753349925331856, 0.11038665095193134, 0.4686049492874761, 0.18187816553955116, 0.12920079047405797, 0.14917799848979063, 0.2156294216889737, 0.1524690004203516, 0.23157601828127705, 0.138739763696048, 0.22561704049906506, 0.6060789827404534, 0.6457982389306394, 0.5572390372140489, 0.6573209531595798, 0.5921943427954319, 0.6227235707115502, 0.6967228147839494, 0.6033292483948789, 0.642680707219667, 0.5448850393662963, 0.5388330931406552, 0.5600388490439852, 0.5234736268148759, 0.49248671167986946, 0.5758980323526401, 0.511319232071247, 0.5703725253339559, 0.5348187982532453, 0.22262340947090808, 0.24919269223437202, 0.23616502877941414, 0.2503309487550919, 0.22880513189644824, 0.22307088809624254, 0.22196952222529898, 0.2068411124978341, 0.2264143672185841, 0.20211879022851686, 0.23393315184747576, 0.2145286688179303, 0.2361684643705424, 0.19810317728862825, 0.5304169065927206, 0.6959746327706093, 0.17987823285280624, 0.2425597028373373, 0.9186938778516773, 0.9025576066131299, 0.8661806625921705, 0.9247999318059767, 0.19845697412166097, 0.1995008618272558, 0.18560134717913102, 0.8600930096255203, 0.8837765949718566, 0.911966997032289, 0.21057333819377533, 0.11172798478110868, 0.16782646804475898, 0.21082505195944024, 0.8901975088864872, 0.21263896413723282, 0.10473767811804968, 0.8651621166251897, 0.17100637025922572, 0.18552743971664132, 0.18938680683819198, 0.19239350292844803, 0.18443505495233803, 0.18931142049417682, 0.2012493293080262, 0.18087579308024482, 0.19360901412530218, 0.09596689073263065, 0.09291017878634811, 0.09438673900517935, 0.08140617058637256, 0.09238974238689202, 0.0933690212133873, 0.08161589651545798, 0.09157408806886214, 0.08549057766905321]}, "mutation_prompt": null}
{"id": "a89f74c8-6303-441e-807d-8cc6c73ed6f5", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutation_scaling = np.random.uniform(0.3, 0.5)  # <--- Change applied here\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):  # Updated dynamic probability\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Enhance the exploration by slightly increasing the range of the mutation scaling factor.", "configspace": "", "generation": 56, "fitness": 0.4965544500508051, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.50 with standard deviation 0.30.", "error": "", "parent_id": "0bc05cfa-0e81-46cf-b889-9869887902e8", "metadata": {"aucs": [0.9121905241196623, 0.9049888352477241, 0.9074654310081776, 0.9094762113448329, 0.9074291668085929, 0.9141546849334085, 0.904067020459196, 0.9057383959543781, 0.9064121051875252, 0.785296702390627, 0.7969061579114091, 0.793598530469148, 0.7960415840762983, 0.7698813641775017, 0.8061447356388662, 0.8022073221560589, 0.8103346923377944, 0.7804806941149789, 0.15684384030567144, 0.146671447664108, 0.1509915427641103, 0.1614992101399666, 0.1369493781285117, 0.15706106060981606, 0.09710651159232753, 0.13743028045571315, 0.14212148561789784, 0.10862319991767577, 0.10700961991073288, 0.11744935316024474, 0.138908402135569, 0.10645770617403993, 0.11719993172139298, 0.12785691731238935, 0.13952744465795464, 0.10599112293457824, 0.9544702987396855, 0.9560359234674586, 0.9527046124074197, 0.9446223715822422, 0.9350202576014897, 0.956309918811545, 0.9626631220448452, 0.9104333819168043, 0.9310789149433134, 0.7811806055888608, 0.780225300119403, 0.7591770607323641, 0.7838556105912832, 0.7713170149711827, 0.7879167768139035, 0.8049119652456116, 0.7549241443569086, 0.7787568207231936, 0.9327002594262604, 0.9218581444720694, 0.2285627938256778, 0.9097489047291228, 0.9236913372587011, 0.921480697303369, 0.9002587308524813, 0.9312856898321997, 0.9137899158145238, 0.6907147830220586, 0.4788634352126264, 0.5204775657572822, 0.13380104072940469, 0.32736822658024745, 0.5737308005372233, 0.5329827532686435, 0.363193315236907, 0.41455892867478006, 0.5457250711523455, 0.5555964670288278, 0.5971090217736095, 0.5380320860342851, 0.13225870393599648, 0.7057260849877485, 0.5563713613086699, 0.38228427802011566, 0.5476779332595376, 0.7382603197192796, 0.4661817707492675, 0.1448773842211245, 0.23867017669364088, 0.38660516657588195, 0.6961357236345431, 0.18546993791923305, 0.6490989189879526, 0.7588347480197157, 0.7190876833075335, 0.4903298867814997, 0.7807943389474322, 0.7051490725465687, 0.7405998051069277, 0.7753259895480538, 0.7876123128041214, 0.6424508290172457, 0.8043622887440711, 0.19548928824384315, 0.13556954455461712, 0.3303861228751487, 0.47124359367106894, 0.288019463328966, 0.24772110950425208, 0.15057559725889857, 0.35310598628478806, 0.31103447561946274, 0.659193517407519, 0.42228535430356573, 0.5807204303474037, 0.3730729087773659, 0.6393567384401821, 0.49512981641599496, 0.6040578293026304, 0.6276169948479747, 0.6086484775670407, 0.8641749683435713, 0.8595607349220395, 0.8366075618379014, 0.8538476295125355, 0.8625452838407591, 0.8793856666390015, 0.8565061638129059, 0.8630981530967197, 0.8571441537703934, 0.15085876584169655, 0.10872104473745436, 0.1262833145321165, 0.12751164507410062, 0.12836485743442427, 0.1556951861760867, 0.5955562321547769, 0.14809625045962727, 0.11946391332837392, 0.6147997879686525, 0.3478349018433676, 0.2074299092047326, 0.4357420461470669, 0.6269688771455009, 0.4098299702480642, 0.6508501360030441, 0.41738852181186115, 0.2887961562921313, 0.7131628895309915, 0.3016134728665658, 0.585453402795514, 0.6336064887494303, 0.61393865629743, 0.7297564913734852, 0.67796228937677, 0.6289199856111816, 0.7200776572118522, 0.6576929475187374, 0.4644867276777821, 0.3172174531325571, 0.6214910777843894, 0.4422859017319397, 0.5400127310345659, 0.5941588403350795, 0.6659710272733019, 0.22876493132655684, 0.19297025952825142, 0.21622476850167527, 0.2374512058702105, 0.21296458734924195, 0.2452925091722532, 0.2328058576469053, 0.23689353544628955, 0.2328771594221325, 0.22163268862883911, 0.18401851748034548, 0.8128753884184596, 0.22028249177961456, 0.24868308866409194, 0.22223397522486643, 0.25034348238782367, 0.20309690653164258, 0.24889661051891, 0.20485301024614855, 0.18733170056208248, 0.15583815782477417, 0.15377015911996295, 0.9376596421779907, 0.1999199229913391, 0.2003758131280129, 0.9121247953532905, 0.1610055096436297, 0.926286871938714, 0.897963494717368, 0.1692762439125428, 0.9163935450495537, 0.9102111434342398, 0.21168435971522637, 0.15733176129401305, 0.21354211863674843, 0.8220465627431399, 0.9056156069387999, 0.19134759638003696, 0.18492145106186098, 0.17459869519280713, 0.18339007941096253, 0.18308318052357908, 0.17800432477388917, 0.2006536910508241, 0.184785305115015, 0.19465483576757014, 0.09989108168209349, 0.09443030133427477, 0.09232174818501948, 0.08427126205769908, 0.08831843668708894, 0.09439414616043962, 0.08765768138885577, 0.09938697308409772, 0.090203519005705]}, "mutation_prompt": null}
{"id": "42eaffdf-5dee-4245-806c-1a300f39f847", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        self.history = []  # Store historical best scores\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Adaptive mutation factor based on historical performance\n                self.F = 0.3 + 0.2 * np.random.rand() + 0.1 * (1 - np.mean(self.history[-5:]) / self.best_score if self.history else 0)\n                mutation_scaling = np.random.uniform(0.3, 0.5)\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    self.history.append(score)\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Introduce adaptive learning strategies by incorporating historical information for better convergence.", "configspace": "", "generation": 57, "fitness": 0.3179409256325812, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.30.", "error": "", "parent_id": "a89f74c8-6303-441e-807d-8cc6c73ed6f5", "metadata": {"aucs": [0.9300070016954244, 0.9265586571218076, 0.9254326630006744, 0.9197905602336895, 0.9305290222500553, 0.9301521287563616, 0.9272061755416799, 0.9251132620415634, 0.9131104892709868, 9.999999999998899e-05, 9.999999999998899e-05, 0.23721006302297243, 9.999999999998899e-05, 0.000296524703444101, 9.999999999998899e-05, 9.999999999998899e-05, 0.2928289219791359, 0.31316321460936225, 0.1579708966081005, 0.1686949346962623, 0.11861443439253694, 0.18055107477000198, 0.13704956334820295, 0.11674748557993675, 0.08285247560011433, 0.11634157110345966, 0.18095520853627256, 0.11397029937628578, 0.1097322042750164, 0.15441915563493436, 0.0935345589277553, 0.08650542740222933, 0.09387387757039922, 0.11177179892569988, 0.11699897853095831, 0.09654189081370279, 0.8502358910360797, 0.7462311789470608, 0.8383383050884511, 0.953756236809165, 0.8628662572581342, 0.9246197589721252, 0.9097338969280949, 0.9128493374954765, 0.889831337417056, 0.7465613737706525, 0.47203560583726867, 0.49435371554297414, 0.7423578149568024, 0.6481571416758745, 0.6266022781861563, 0.675075842401978, 0.7232269670689155, 0.43647401895240234, 0.22918752507830598, 0.40017358751063437, 0.21785625953914145, 0.42083021847036994, 0.2802869371751867, 0.19329691081758138, 0.1119558923217302, 0.1787605572153952, 0.2469426420474803, 0.11791704347102228, 0.05807865003126789, 0.174701208528516, 0.06756593060325433, 0.17991405600638632, 0.094092885678422, 0.20700813222215453, 0.06402412947964053, 0.1603067847436177, 0.11852617244317609, 0.2313023282268869, 0.17772962822560712, 0.1486879061317279, 0.019595781093272646, 0.07806195307751862, 0.19812329953459407, 0.17591175367559686, 0.1755278272830838, 0.38681230463655325, 9.999999999998899e-05, 0.08368053396646591, 0.0996260247713675, 0.0713795152612271, 0.02996815088596505, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.37987664046190595, 0.22063199335601835, 0.5382521001946283, 0.041926963671379935, 0.0576973657309503, 0.04779913298693006, 0.13605783990217346, 0.10130783051385628, 0.04364231914833849, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21120923538301795, 0.00086057467113132, 0.07838042583996196, 0.2745241928222236, 0.2947981439867198, 0.2650307590969221, 0.3131230864942046, 0.022960520694135678, 0.029013648411682746, 0.19860097360882834, 0.29794059955704466, 0.30962900206138055, 0.8617778393734068, 0.896131319005565, 0.6113940286966197, 0.7614476103822984, 0.7134517602975272, 0.5936872995674696, 0.8703050738442305, 0.8015031571759152, 0.5637285320911565, 0.1348420164819678, 0.11731306658443996, 0.09608950458531185, 0.14256622385015816, 0.18369444065817797, 0.18503530053401462, 0.1334383414771304, 0.03061389475217058, 0.030996815290590396, 0.7798278088673618, 0.25187449231136283, 0.6520562906506875, 0.28207964298497157, 0.7741345871982329, 0.41155895798678976, 0.7708689589505026, 0.49271700625716797, 0.2455695549478174, 0.787856269929345, 0.34310394473991923, 0.803967461466006, 0.7859478938686055, 0.6627907628197178, 0.5385446588207778, 0.26093569143213813, 0.7984187728223431, 0.2791481695156385, 0.3942486004811855, 0.2836713526031174, 0.2886217759907971, 0.6679432719951817, 0.28653489067068194, 0.5381000542561635, 0.41768010466145244, 0.3882371523672099, 0.4121503283589977, 0.2283967774221315, 0.2392833340505618, 0.21831189583386734, 0.21963942349313714, 0.22493775454102216, 0.2740513874708267, 0.2252300974081869, 0.21074443635311813, 0.24858998570838964, 0.008721819678835563, 9.999999999998899e-05, 0.06173439674918624, 0.19863633073326292, 0.21056120753313945, 0.22629816778018663, 0.14678897701523852, 0.1032806555637027, 0.1256371173313512, 0.18827214553441984, 0.18687644491823807, 0.1873608709137553, 0.8589727344062958, 0.16788395634762088, 0.17015218645177788, 0.14219636484116704, 0.18908977258443838, 0.9237376380969854, 0.8994598560601467, 0.21340258093384112, 0.07357965162586788, 0.9268614210680415, 0.21309135662954215, 0.16882598015852746, 0.21177612260016399, 0.9040300578470248, 0.8877968131478218, 0.17846802272898077, 0.20009378683825574, 0.17289531113321976, 0.1781672514506334, 0.1970136174083168, 0.21224945943381512, 0.19792225143366626, 0.19384567191789248, 0.17269922825607265, 0.0881373993723451, 0.08777081591856817, 0.09635283654907001, 0.09324506825723289, 0.09328214241939148, 0.10322705642272378, 0.08819803568026019, 0.09140423021770405, 0.09492599335497454]}, "mutation_prompt": null}
{"id": "149ebc1e-a96b-4c99-9b49-2cdec223d32d", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                self.F = 0.3 + 0.5 * np.random.rand()  # Adaptive scaling\n                mutation_scaling = np.random.uniform(0.4, 0.6)  # Adjusted mutation range\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.8 + 0.2 * np.random.rand()  # Slightly different crossover probability\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                if np.random.rand() < (0.1 + 0.3 * (np.argsort(scores).tolist().index(i) / self.population_size)):  # Updated probability\n                    neighborhood = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.1)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + 0.05 * (neighborhood - trial)  # Enhanced local search\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Introduce adaptive scaling and neighborhood-based local search to enhance convergence.", "configspace": "", "generation": 58, "fitness": 0.4944699257526674, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.49 with standard deviation 0.30.", "error": "", "parent_id": "a89f74c8-6303-441e-807d-8cc6c73ed6f5", "metadata": {"aucs": [0.9062321559429798, 0.9085860163469531, 0.9052165958310541, 0.9081504022503548, 0.9084238565522103, 0.9037127440474579, 0.9002786547959037, 0.9001681494269494, 0.8995589100152599, 0.7889036029185962, 0.7674181704262437, 0.7680139868934358, 0.7856342319179164, 0.8160502744499847, 0.7689684128944452, 0.7916051740202789, 0.8016703147182571, 0.7685975713498701, 0.15763591137755706, 0.45544419177656226, 0.13547579203763527, 0.14181533586247808, 0.1573543135606671, 0.10828461141949441, 0.1272093871721851, 0.16913023244499037, 0.46427583067161515, 0.11237446876901047, 0.09779239066640844, 0.14141407220034707, 0.11948833978166606, 0.10125166000257246, 0.09842971105773579, 0.11575805658331662, 0.11211208329502731, 0.14571101443414813, 0.9394529807736859, 0.946442126450848, 0.9739252392359966, 0.956432287243223, 0.9389021837066701, 0.9220988039347249, 0.9641581605904577, 0.940533044654673, 0.990517274215308, 0.7481348955296812, 0.7567598786386466, 0.7663940506538716, 0.7808005136409362, 0.7493980898234058, 0.7642134787327108, 0.7671819409887418, 0.7457150548558972, 0.7441580820013981, 0.8975550732705304, 0.916836224971313, 0.8840107693625009, 0.9234739142786638, 0.9077654006618486, 0.9129615542711327, 0.9151080204229436, 0.9021523412135685, 0.2370423653532323, 0.5358397433636186, 0.7627820022754581, 0.13185601621242482, 0.6882492247526298, 0.6831982929819811, 0.5933855003188924, 0.5821880437985036, 0.5716284608586707, 0.6278907770856715, 0.532426522955334, 0.6677946404724991, 0.5030662237084141, 0.7089991165966494, 0.6969695080573584, 0.6217823989271669, 0.6238223352395655, 0.6008688876998763, 0.13449512933927166, 0.15460545487702915, 0.6844497564361163, 0.6664779711338564, 0.678836419020992, 0.7075097042202851, 0.6025602339892551, 0.6990666482217076, 0.6830936520264144, 0.6370916440693819, 0.7397094962580544, 0.7512853217266211, 0.7382746144423582, 0.7439016216281149, 0.711660252603314, 0.750984327067127, 0.7925179191526626, 0.7790774930515698, 0.7461485265833008, 0.09036946614280861, 0.28476876171678567, 0.2079448312345925, 0.3741642822044393, 0.4469924691895445, 0.14693966905725486, 0.27922166929388426, 0.33543255680157336, 0.21480314175275295, 0.531218164361351, 0.5723065031208556, 0.5653914279203476, 0.6057308630115574, 0.5912919395012357, 0.6184386551138237, 0.4461241835809896, 0.5508832121350216, 0.5720635532022641, 0.8621697050823439, 0.8560758098316915, 0.8751202565022, 0.8388857455895501, 0.8271341469404675, 0.8262623492516024, 0.8532569074280356, 0.8337906602884708, 0.8361643429100554, 0.12038730240073259, 0.1389001435093251, 0.121636190025874, 0.18030960029118015, 0.17882009253126652, 0.12629006337209625, 0.13566850966390176, 0.23302439970336553, 0.1254478896871657, 0.15766317036328603, 0.16096953854218787, 0.5879144333120385, 0.44303382953003523, 0.13427975006174342, 0.2526201318031782, 0.5997120646655992, 0.6538922176716724, 0.5320483689154358, 0.5994542421164473, 0.6713135808083573, 0.6877306036088502, 0.5749232943804559, 0.5837362641436883, 0.5840685288190657, 0.6977548955438817, 0.7040988821827738, 0.6280927800213976, 0.5776001301723426, 0.2859315463825205, 0.4840262780477843, 0.4759848357655122, 0.3156959992044355, 0.31453622049272734, 0.4377233398647964, 0.30507290856297553, 0.6220284549934645, 0.21102507729904418, 0.2269993304465907, 0.23142492966877237, 0.2246543258711472, 0.21441737186077403, 0.24581594980602062, 0.21500514079017263, 0.22100645984206646, 0.23677052901142026, 0.803973409831861, 0.19525760487828303, 0.22096111380639338, 0.24586029859084102, 0.22401266148651489, 0.18664441505021845, 0.19698374041066402, 0.2087474623329808, 0.20818448898687303, 0.12574453478578795, 0.1868927651804394, 0.1882353460826378, 0.1716982480316015, 0.904026799881877, 0.20024735937739913, 0.9125499788505685, 0.8651952991745644, 0.9284564047913682, 0.9017423783543623, 0.16909920663580613, 0.07352291660299581, 0.21128610604678888, 0.21184145347822692, 0.16873438598511437, 0.20941022502095352, 0.10447397248669643, 0.1671456237423199, 0.18129289857692854, 0.18704808794147953, 0.19887504268377676, 0.18737693154605195, 0.1844246773256788, 0.1749368351537245, 0.20829406018809737, 0.1872743996653603, 0.183118683595207, 0.10023536691774793, 0.08933308335187518, 0.0946484227944222, 0.10172513118604509, 0.09414333101908323, 0.08618924204853151, 0.0919875720175991, 0.09119916187938903, 0.08525370733763171]}, "mutation_prompt": null}
{"id": "dbbce6cc-f66f-4729-a793-36d224d80c07", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        self.learning_rate = 0.01  # Added learning rate for adaptive adjustments\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Learning rate affects mutation scaling\n                mutation_scaling = np.random.uniform(0.3, 0.5) * (1 + self.learning_rate * (self.best_score - scores[i]))  # Modified line\n                \n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):  # Updated dynamic probability\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Introduce a learning rate to adaptively adjust the mutation scaling factor for better exploration.", "configspace": "", "generation": 59, "fitness": 0.35635035109736496, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.33.", "error": "", "parent_id": "a89f74c8-6303-441e-807d-8cc6c73ed6f5", "metadata": {"aucs": [0.9100546427272614, 0.9014975339383495, 0.9009814778296796, 0.9000383603176864, 0.9041846859963185, 0.9070295476992748, 0.9009179697704713, 0.9005119874414372, 0.8911299847993133, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14209101878658403, 0.14830488811829023, 0.1538391327003259, 0.13510506055810534, 0.14680288067224867, 0.28046588727707134, 0.11445768946390544, 0.15048635678447098, 0.15887273548820646, 0.11404355685872092, 0.11656799100784754, 0.1183256405214288, 0.11292368888075521, 0.12648543605503348, 0.11310448918127769, 0.11704484805747395, 0.10636668336817034, 0.11442458236418263, 0.9453362039047074, 0.9166713108179798, 0.919814089307657, 0.90933092378968, 0.9338258028600077, 0.9363584453834835, 0.9338017769136028, 0.9422774243444348, 0.9850459125510936, 0.7272693998129272, 0.7092244483071501, 0.6580825707911621, 0.7150057149572868, 0.6795467706254692, 0.6903639033756037, 0.5212719192087436, 0.47632946324897285, 0.3912303303439858, 0.8877558342838687, 0.8876160217243484, 0.872688319432505, 0.8569426174580103, 0.8806165767510331, 0.8786871626808597, 0.8750444412925875, 0.8581720696782176, 0.888541940070713, 0.049280437502081775, 0.008380501578129973, 0.0002969758482535001, 0.029189994451022216, 0.03571320166032488, 0.025969376924160348, 0.10976079206446743, 0.08667337593204338, 0.07649446195806087, 0.13475843670070375, 0.5042890904052937, 0.11267102769584236, 0.06276988979641063, 0.014070011084001632, 0.061421579052879816, 0.13175365394987115, 0.05635727505441224, 0.06931227821612806, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08078476975847193, 0.17099731223648973, 0.10240476489231698, 0.10761836363214095, 0.12513905412846216, 0.3518833320022068, 0.4765547636983182, 0.3805961546018142, 0.5579509860893699, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.39034103260785835, 0.34970122264499026, 0.28697014821418143, 0.4583859355363621, 0.3829800627084252, 0.3676699635123568, 0.5052204814631613, 0.4356466116358383, 0.31857260256921915, 0.8678987274622709, 0.85961237775936, 0.8513771472524909, 0.8467250127340032, 0.8489265658773935, 0.8544201733525, 0.7890102399074965, 0.8087521769446, 0.861580540421377, 0.12545459942520243, 0.17881686774921857, 0.11096565736958086, 0.450597096846873, 0.11640836635986229, 0.13174405279504808, 0.12441466024287307, 0.10827168581490965, 0.31926781340395005, 0.2508369059324663, 0.15050916292801808, 0.4324546807423487, 0.3693600668422885, 0.1674108153913345, 0.1290018777834383, 0.506509009484394, 0.14274417873700584, 0.13458947416195877, 0.6150959779282987, 0.6908822386277742, 0.7342523159175096, 0.5869003965137827, 0.7337850649902851, 0.6894610873897311, 0.700117313762286, 0.6370901246841909, 0.6919294589798528, 0.6328942952675126, 0.47927916370917545, 0.5298091413057842, 0.4931594680378034, 0.5735504426047247, 0.5037310542686295, 0.5173281333909493, 0.4718683052973134, 0.5546807717582558, 0.24534429071329955, 0.21990265080504423, 0.19773399293721838, 0.20083851581777745, 0.2138873406361529, 0.2579089557870279, 0.23831881422129197, 0.23888715373186897, 0.21994011948684156, 0.1303718285388764, 0.13508858215323238, 0.15111336753289284, 0.17400142105183025, 0.14202119769961297, 0.1419964737574153, 0.12401043750959306, 0.14299621272149365, 0.15369309845014545, 0.9365100095226022, 0.18767180860547028, 0.15244387772328793, 0.9206028786954158, 0.8817625859346038, 0.1992342189907398, 0.18790110551506922, 0.8865140759059804, 0.8989109603467571, 0.8966622547123299, 0.20998491031293365, 0.8730985541269969, 0.16681417461500114, 0.16692790565959637, 0.15496121387757833, 0.2067997082701616, 0.7894507610143365, 0.1519834855719191, 0.19073921003518512, 0.18844248426083388, 0.1832705654878014, 0.20740243735933805, 0.19002954476725553, 0.1812282921449263, 0.1867954601996651, 0.1808949370567544, 0.1819627962105136, 0.11080044079883189, 0.08691132116894584, 0.09300923956334195, 0.09473024358866511, 0.08497534215453673, 0.0959772515655748, 0.0897909609837696, 0.08925645794060544, 0.08150514824971122]}, "mutation_prompt": null}
{"id": "92521748-e264-41ad-b37c-f6e6580a2fe7", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                avg_distance = np.mean(np.std(population, axis=0))  # New calculation for diversity measure\n                self.F = 0.3 + 0.6 * np.random.rand() * avg_distance  # Modified mutation factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.75 + 0.25 * np.random.rand() * avg_distance  # Modified crossover probability\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Improve mutation and crossover dynamics by introducing adaptive learning based on population diversity.", "configspace": "", "generation": 60, "fitness": 0.30827531928098406, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.24.", "error": "", "parent_id": "a89f74c8-6303-441e-807d-8cc6c73ed6f5", "metadata": {"aucs": [0.7982794840041485, 0.7865848693237967, 0.8058487946159293, 0.8087848513546056, 0.8181994477680746, 0.8063503579256833, 0.8118864080885121, 0.8062040328391468, 0.7895159524679249, 0.5575287919634762, 0.5432759432870615, 0.5532144174751887, 0.5637818209439796, 0.5673804550491244, 0.5732140776185527, 0.5340051378427138, 0.5702481330715417, 0.5734040785264332, 0.11298784050990429, 0.10573606286001136, 0.11194887953805954, 0.11490800663315293, 0.12548676758297772, 0.11257698849015674, 0.1103413039138803, 0.11090603859940784, 0.117276400581804, 0.10556916563996233, 0.10207854750308376, 0.1199182578285376, 0.10407803782029423, 0.10869573828727641, 0.11243718311377504, 0.10839270715538174, 0.10321063814509723, 0.09840417893230713, 0.9693797214499822, 0.9534062879649012, 0.983553663421752, 0.8984303087650652, 0.9366322800370357, 0.8924388869607132, 0.9384947420838856, 0.8850286539578898, 0.9239763812852012, 0.4141171542439568, 0.4357407150665332, 0.3008330398625261, 0.4231012473628165, 0.4516548255759316, 0.31029260834921, 0.36953434503450533, 0.4041676138657866, 0.2946784849943944, 0.722742923171511, 0.6786761504387722, 0.65854279781682, 0.7224045582628502, 0.6961653464210344, 0.7503152691266206, 0.730898604286284, 0.6648059690765944, 0.7283067262544745, 0.1429722690704932, 0.1304447200376846, 0.17027267764487364, 0.15057085934065728, 0.16794009969017532, 0.27212357883352445, 0.16569074138338424, 0.23050435725753393, 0.15373355434996883, 0.1152367809811331, 0.14353104931373806, 0.11454055475715463, 0.1698830884887058, 0.17256267882123555, 0.1565303806868824, 0.1740631297335089, 0.15021640242120515, 0.2151949557118774, 0.17666430809746858, 0.19651374201128746, 0.17793633548442434, 0.19847078419080977, 0.1705009647118324, 0.17241571033316871, 0.12432414449108453, 0.14615061049544875, 0.1581910037272397, 0.2677650984364973, 0.27234925061169324, 0.259807038213941, 0.25982288659289676, 0.254578620165109, 0.24689463075508178, 0.29994014352774057, 0.27466206511418423, 0.2913578033568677, 0.06743801560544238, 0.12892891681178265, 0.061037919427445964, 0.13219266254486428, 0.056078546640862426, 0.14266742613503502, 0.11848747180413355, 0.11454243620579674, 0.15102833449991981, 0.1968220087935475, 0.18771727201446975, 0.20811478621105617, 0.22990634073918292, 0.2153691662772511, 0.22520318779046888, 0.21422298768676018, 0.2046560677101994, 0.1866491824785217, 0.6111173812110073, 0.5881118777268208, 0.5860358408247823, 0.5702354244167029, 0.564379364281125, 0.5837961794191935, 0.5164072978961869, 0.560498832489648, 0.5833226462003449, 0.10205610108390795, 0.09692024886914896, 0.10883275401151726, 0.09555560210712777, 0.09088155218357186, 0.09523615596722723, 0.09264677638644991, 0.0969440922458682, 0.09346345353201047, 0.218737559489822, 0.16687611565172444, 0.4878523571651727, 0.18865940839332318, 0.1636649082585987, 0.2423860846888517, 0.2409260627480051, 0.33550491907407465, 0.5081568109207777, 0.3612021158649876, 0.34371052475261155, 0.40356308825017273, 0.33803061961558656, 0.3416960168894263, 0.32691334365786107, 0.42882263412891564, 0.4499563847731981, 0.42870479712886145, 0.2644812929546553, 0.2541447986942871, 0.22719103957226583, 0.25258615357741576, 0.23452715409812386, 0.2399453857128223, 0.2994798723498546, 0.3163945237160519, 0.3138192210382966, 0.1960669029126466, 0.19028545967697696, 0.21566981583229328, 0.15887243599102352, 0.19431348829641204, 0.17873281539781583, 0.1738227739252054, 0.1764861224124048, 0.17115403676642948, 0.17688966614817814, 0.18151801525705347, 0.18009646997108908, 0.24543027787097982, 0.21144746189407992, 0.21471071206646597, 0.19487887947273674, 0.21647428876372954, 0.19459149806675335, 0.16634002452028196, 0.6825089054945862, 0.17021225663927086, 0.17812885139556633, 0.1750561203809109, 0.16735762229399875, 0.1743046252825392, 0.18131124594799441, 0.18228755337076907, 0.1619540175396209, 0.37637900687534565, 0.19077721728231378, 0.1884173955720253, 0.14747295248179637, 0.38138426773649414, 0.2088046415497432, 0.20679275870407732, 0.2095541722813864, 0.18439372525551712, 0.18134457769059387, 0.17627233100662865, 0.18439956279379655, 0.19546447696807956, 0.18783092464501316, 0.1789346153696928, 0.18933047699720285, 0.20986255525472852, 0.09232049788483276, 0.07395638519689984, 0.07464868611223197, 0.07989782036449233, 0.07541298657055973, 0.0636717205682682, 0.07554309670013448, 0.07659057981786077, 0.0763355647513978]}, "mutation_prompt": null}
{"id": "27aec248-8842-4639-930d-4de7d1026a8b", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.4 + 0.5 * np.random.rand()  # Changed\n                # Enhance exploration with chaotic sequence\n                mutation_scaling = (0.3 + 0.5 * (2 * np.random.rand() - 1)) * (1 - evaluations / self.budget)  # Changed\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Local attraction towards best\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):  # Unchanged\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.1 * (top_mean - trial)  # Changed\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Introduce adaptive differential evolution with local attraction by dynamically adjusting mutation and enhancing exploration with chaotic perturbations.", "configspace": "", "generation": 61, "fitness": 0.42097151767887186, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.27.", "error": "", "parent_id": "a89f74c8-6303-441e-807d-8cc6c73ed6f5", "metadata": {"aucs": [0.8420577353213583, 0.8305630654584107, 0.8302939251645401, 0.8359008993110886, 0.8498005339278869, 0.850717759674313, 0.83448541028824, 0.8524439383835759, 0.8361453255273863, 0.6570184858683765, 0.6315580006174447, 0.6214915030502852, 0.668157887274671, 0.6582411064611504, 0.6729850145281442, 0.6523226669944698, 0.668742461935521, 0.6396668848959053, 0.12383201377490716, 0.10910391899777638, 0.16344986222309177, 0.12779288930963162, 0.11837536761366407, 0.10823407185794875, 0.11647689304125797, 0.1552732040953353, 0.10720311047181608, 0.11484305859812483, 0.10748639876755683, 0.11355227808809576, 0.10239062283527633, 0.11799327107181912, 0.10932942194261774, 0.11358969136728303, 0.11599381382002016, 0.12171606677365476, 0.9824062745412672, 0.9466986916169389, 0.9742280708104297, 0.9234428996938449, 0.9703548764213465, 0.9111976273315215, 0.9381232251181342, 0.942590047778256, 0.9856432527385832, 0.5700893001306487, 0.5311715625780364, 0.5227682217990997, 0.5761498528183274, 0.5458395037808332, 0.5659396049085292, 0.5699662569370663, 0.5567795447174786, 0.542152850973386, 0.903268561579424, 0.8302609825464558, 0.8072487582442477, 0.8386009406159135, 0.8659538598080417, 0.8527782714491725, 0.8447034704933276, 0.8644826362947681, 0.825320484041344, 0.42856331224755173, 0.6091159247671424, 0.44060049480592456, 0.5250515498375932, 0.5517175241612103, 0.5164315031594319, 0.4206740154178712, 0.4604895847327769, 0.3862756734998609, 0.41472403291287474, 0.44702635056840667, 0.41636478115176956, 0.4614635556158385, 0.4194836775851464, 0.5072051886253593, 0.5734479614123977, 0.4378283263897895, 0.5235145246756334, 0.49174978427978033, 0.47799321976872566, 0.44517979903978777, 0.4499376490098903, 0.4568180282608235, 0.49408553083358075, 0.47826062207647757, 0.494510620631059, 0.43804052166124097, 0.5584488129009908, 0.6201684640537883, 0.614010525125803, 0.6187283259076991, 0.5844055948040852, 0.5738663238133253, 0.6005441088753466, 0.6293090015301868, 0.6521652648448177, 0.12673849552391003, 0.0787156446207935, 0.14898162812058435, 0.3015536048268723, 0.3302805146287997, 0.3386037394497564, 0.198838551674982, 0.28914352729662174, 0.15497301696158083, 0.3621766489733337, 0.3394530138949392, 0.3357112427348278, 0.3751786112428698, 0.3663915927785574, 0.3757081268741802, 0.3677909839770245, 0.35421597293192786, 0.367976291022151, 0.7238636413237253, 0.7572006789820123, 0.7893193053451998, 0.7521476012858938, 0.749062131184111, 0.7585669757792886, 0.7400984944514614, 0.7499709844437841, 0.7412679148287065, 0.11367986870516256, 0.10999990488417699, 0.10319933756583799, 0.11962830410749992, 0.11283933268658786, 0.10811236269483959, 0.09998745469535386, 0.11608006014530003, 0.10651249161133403, 0.17358213914025689, 0.1589135229042744, 0.14813862680068068, 0.12792758727204578, 0.19094417527005003, 0.14420579928569988, 0.25735139392962925, 0.238559951141589, 0.18770462045052272, 0.4434125293995097, 0.4531069277933668, 0.45843183536945054, 0.40987868186871035, 0.4421918479664422, 0.4472865964543776, 0.4686451573800732, 0.474893946882628, 0.46156702858110954, 0.37963921096644093, 0.3439905164196648, 0.3455238107987255, 0.3584260392239811, 0.3876296165887556, 0.3561239490383068, 0.4022701654673049, 0.3886426393462513, 0.3999941643872932, 0.2057432783687969, 0.19595496663921597, 0.20802821220308398, 0.23302060056534413, 0.21602081208090496, 0.20689897084533082, 0.21074631554014012, 0.2081271406897729, 0.20364949757504847, 0.4228127942802232, 0.20820454948840583, 0.23988096239714707, 0.2051372203686187, 0.2131200292570422, 0.21001782113385203, 0.2282087763584314, 0.49152327630200154, 0.20446962411987546, 0.1861371769059641, 0.20534036896022234, 0.17205196322816152, 0.17215993373562655, 0.19684370719526445, 0.19663122262865274, 0.1870996824653376, 0.8430081911125615, 0.8654298013677644, 0.853613937020299, 0.16883166954347217, 0.16648294022558607, 0.20494959423209425, 0.20894372812321116, 0.8416343901713434, 0.7779330516129388, 0.21176024651393255, 0.7483757550684078, 0.17234045435397727, 0.18395790821240066, 0.2019697574444007, 0.17742786883517092, 0.17205474112759334, 0.18231087870037888, 0.17749851013617102, 0.20424734208223327, 0.17565543620771662, 0.08845929698317212, 0.08261491963278045, 0.08673347815862109, 0.09013682750475505, 0.07892168550169354, 0.08004900666695247, 0.08585505566635443, 0.07847576098569153, 0.09380778164800141]}, "mutation_prompt": null}
{"id": "8ab66b8d-370c-42a4-9f26-ce24058330cb", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        self.success_f = []\n        self.success_cr = []\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                if len(self.success_f) > 0:\n                    self.F = np.random.choice(self.success_f) + 0.1 * np.random.rand()\n                else:\n                    self.F = 0.3 + 0.4 * np.random.rand()\n                \n                # Slight increase in the bias towards the global best\n                mutation_scaling = np.random.uniform(0.3, 0.5)\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                if len(self.success_cr) > 0:\n                    self.CR = np.random.choice(self.success_cr) + 0.1 * np.random.rand()\n                else:\n                    self.CR = 0.85 + 0.15 * np.random.rand()\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    self.success_f.append(self.F)\n                    self.success_cr.append(self.CR)\n                    if len(self.success_f) > 50:  # Limit history size\n                        self.success_f.pop(0)\n                        self.success_cr.pop(0)\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Introduce adaptive mutation and crossover based on success history to enhance convergence speed.", "configspace": "", "generation": 62, "fitness": 0.20343600005293905, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "a89f74c8-6303-441e-807d-8cc6c73ed6f5", "metadata": {"aucs": [0.4486229736938192, 0.3555279727530547, 0.4711937630755104, 0.37005018986497273, 0.3802156340349284, 0.49875722876914197, 0.3718117326555216, 0.440928167961429, 0.32992019317099774, 0.051848716685172214, 0.04918221060368799, 0.060381118429071234, 0.060989869213208814, 0.06429643405119745, 0.08430004839178185, 0.05862043716877374, 0.06641533957504031, 0.08972500097704939, 0.08110293954896353, 0.07001100214740907, 0.0832100980375684, 0.07638642170086352, 0.07066747452170907, 0.09265681731461972, 0.09235922640168936, 0.08108320911712386, 0.09874580333376759, 0.07601567020567468, 0.06901600544593423, 0.06556201293696218, 0.06557675405445007, 0.06831412147063087, 0.08054921356013767, 0.08335078859066869, 0.07862157088066601, 0.08024721923688538, 0.989095426085094, 0.978324076500045, 0.9194436370261307, 0.9507517691717117, 0.9874826891485725, 0.9560613597911302, 0.9437194809524492, 0.9702597967414013, 0.9476845049603699, 0.24381324508243718, 0.197770859519795, 0.189763903407706, 0.22906517200918475, 0.2648790444639493, 0.31304039383123905, 0.21963839307220379, 0.1994373357193503, 0.1980967250647725, 0.2548171791054046, 0.24871003401329395, 0.21131878426966755, 0.28336347766948433, 0.29229765136177865, 0.2627996750166095, 0.21383335551079774, 0.27315956133096875, 0.22263808890250358, 0.16330250231943078, 0.10658119764715879, 0.1896226414808707, 0.12292297544263342, 0.1404774095903244, 0.1476669831414159, 0.1319412902936289, 0.1030051054126867, 0.09939274566363587, 0.18652561320766203, 0.1378886805814764, 0.10145250087810886, 0.14375877025806005, 0.11768471566923366, 0.09108003741067727, 0.16086670654753255, 0.0852264821105071, 0.11773059097898364, 0.040547969226735536, 0.1945314438777871, 0.02061199756344012, 0.05333448167692312, 0.08604718559317903, 0.048985874881226854, 0.023162801614315165, 0.09556889037323668, 0.04758179739982438, 0.15824755797106105, 0.19055081636455606, 0.19412738785614359, 0.1551243888948346, 0.15414224586742187, 0.2311605975775446, 0.23590630850083139, 0.27346970765899836, 0.21712786305676113, 9.999999999998899e-05, 0.0021008048947209756, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006515537800283022, 0.09523164006056506, 0.06479746320811541, 0.1684266752163478, 0.0892985852370406, 0.10111020125420433, 0.09156956009902895, 0.05285771072563017, 0.06515055857916974, 0.05593128505515654, 0.30371865476029225, 0.31732590576985553, 0.3653746706679518, 0.32684440324913455, 0.3720296990752535, 0.3333676777690292, 0.33619010357330736, 0.3208751905386049, 0.4154735809799168, 0.08357467869138913, 0.07809992671149468, 0.07545688664053118, 0.07531375592250356, 0.07985331336265222, 0.09010389835409027, 0.08481233722456982, 0.09565006141326482, 0.07191690801890038, 0.14501132335521638, 0.12987958373494568, 0.21739889860704154, 0.15097182900873818, 0.14350742783767678, 0.13840823462054264, 0.20863282289242358, 0.15028713309858543, 0.140967147590905, 0.198766308949076, 0.233831581617998, 0.2587223792609461, 0.2743229434881881, 0.1928916383452125, 0.2460024808540442, 0.2316035795496716, 0.23631572911134868, 0.23869037559227468, 0.1798065300353564, 0.16994494702288432, 0.20271020694042619, 0.18659893631350744, 0.16083044869419538, 0.24150981536607896, 0.2088089638533538, 0.20111898702369269, 0.2325220887449876, 0.18493027017790453, 0.17198690651192106, 0.17189343612727515, 0.17250235523485513, 0.19748170637038498, 0.16929065165466783, 0.21309114838591126, 0.19841934921982773, 0.20885845608361564, 0.17424698193285515, 0.17530093317139794, 0.16837684618747262, 0.17189934033950416, 0.1792091998434775, 0.19419663457211178, 0.17369752193902843, 0.1705027250135458, 0.1693372531367079, 0.1704093151644751, 0.4351175429739741, 0.15233858835703307, 0.1938787186320895, 0.3683819533012356, 0.6630214627487627, 0.38183031695616976, 0.15613064272592658, 0.3579225567998645, 0.2784141376076411, 0.2091916043619947, 0.20243006920008544, 0.20243599235623055, 0.19270563574147914, 0.17651473753285685, 0.21082474376424365, 0.5181238481597005, 0.203509102654716, 0.19207399926697533, 0.1848112729083592, 0.17644095128880366, 0.17947363871703947, 0.1743457124335155, 0.17176829187647435, 0.17738635689182536, 0.18774019172775092, 0.18514219231494966, 0.05924149178239135, 0.06942261425346274, 0.07197366774903835, 0.08106189944460163, 0.07257037735835714, 0.07625080231268255, 0.06729417505976854, 0.05478855688859385, 0.08736785395999158]}, "mutation_prompt": null}
{"id": "ac85cb50-1ad3-4519-a392-5ad79897096b", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor with adaptive scaling\n                self.F = 0.4 + 0.6 * np.random.rand()  # Adjusted range\n                mutation_scaling = np.random.uniform(0.2, 0.6)  # Updated range\n                # Enhanced mutation strategy by adding diversity\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a) + 0.1 * np.random.normal(size=self.dim), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.75 + 0.25 * np.random.rand()  # Adjusted range\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):  # Updated dynamic probability\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Improve diversity and exploration through enhanced mutation strategies and adaptive scaling.", "configspace": "", "generation": 63, "fitness": 0.24406237100736786, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "a89f74c8-6303-441e-807d-8cc6c73ed6f5", "metadata": {"aucs": [0.4830811247974697, 0.49113719696487135, 0.4972887940966815, 0.5038077659139764, 0.46641782742722315, 0.45876596801432035, 0.4750054332469663, 0.4854464608826906, 0.4591578349788703, 0.0969391842195817, 0.1107707364790893, 0.09657154333209184, 0.0700165550442543, 0.0909931125772444, 0.07977971901609093, 0.09679376181456556, 0.07285653515190027, 0.07770312126430923, 0.10480079280053611, 0.12084734045159529, 0.11413230177343026, 0.10949175029905545, 0.11648913533514405, 0.13594226102315476, 0.11561083175657527, 0.1196607614456372, 0.11818175567351952, 0.10504384830471758, 0.113678641366734, 0.10450886846509189, 0.11277991546373356, 0.11467168977574804, 0.09982006410693245, 0.11086183502704972, 0.10598563972583175, 0.10088242415540694, 0.9667609685238525, 0.935158482409089, 0.9609381608151446, 0.9527071461385049, 0.9622963197288784, 0.9785296426225334, 0.9694647667601176, 0.9751263966528391, 0.9452371368492997, 0.30048349604030955, 0.29367392729804975, 0.3013230927092735, 0.30190025500024653, 0.33173206780111253, 0.3029267245960605, 0.3163472717357556, 0.29633730343846143, 0.3184155521145492, 0.3667242572658781, 0.36059423238248167, 0.6793060713434627, 0.6790631900416303, 0.7118874392416394, 0.8000140022251981, 0.36077878721572354, 0.8188185400536416, 0.42727405784337624, 0.1720269125833136, 0.1852325176321351, 0.1880638420317824, 0.17608236697622648, 0.15419772262694353, 0.189401612712376, 0.1496842387396491, 0.17884810701615628, 0.16105263777411605, 0.163507993987989, 0.16181509134531769, 0.1505510085183731, 0.16744108588067064, 0.17332472999285697, 0.1590135286928378, 0.16732032016639842, 0.18818127522893602, 0.17644767310867793, 0.05735969798339868, 0.027939600189954006, 0.056961508177725384, 0.046618938752453376, 0.020572237186588294, 0.030715451514153225, 0.05661965712138739, 0.049509772140656216, 0.04368309214568167, 0.14934980640990358, 0.17659261242157354, 0.1298705181662273, 0.13494824634007296, 0.1260989309263152, 0.09429841087037927, 0.13097251595136017, 0.13724479249149713, 0.14359584366604417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009851108793343943, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12525387315568803, 0.11273369985436343, 0.11746747785246336, 0.11187665762533561, 0.13304171923612718, 0.117220753745923, 0.11002431868914586, 0.1031745381065986, 0.108114803770055, 0.41848787097795526, 0.4500965513752717, 0.42035917198878214, 0.41988903893595286, 0.42753119606019374, 0.423434772345903, 0.42013812278119833, 0.4365197494496895, 0.40232109853408216, 0.10643219472193854, 0.10347077161955553, 0.1070443190903736, 0.1024314494198223, 0.10429048243579275, 0.09441277982616125, 0.09927700961045793, 0.11061525525694893, 0.10610416172639414, 0.1238037974170988, 0.18572614972372936, 0.1430840735558373, 0.131991178561219, 0.1340722596015954, 0.16393200709889355, 0.19347098743025304, 0.14751731053538464, 0.16237504041068584, 0.2882867442034157, 0.3094467533792151, 0.29653526100441385, 0.3041200791165546, 0.3019746470784709, 0.29999522502055365, 0.30533380741558136, 0.3077677616829013, 0.30159105074008863, 0.22244620379082058, 0.2377591723771305, 0.23888999187011528, 0.2324404801863692, 0.2251273245137121, 0.2329286582074016, 0.2346836893965678, 0.2430327165772853, 0.24352315532177704, 0.217527949437883, 0.20876657553943057, 0.20049764630810318, 0.18803262877429072, 0.21689540802749863, 0.22332086439675036, 0.20505693760749732, 0.18616347569857006, 0.21312052950184412, 0.22218113511336945, 0.22559844441628452, 0.1946360672317895, 0.2042413793978599, 0.21288908995467715, 0.20994664375617866, 0.20276852359919872, 0.20440256914928912, 0.226994432992915, 0.616034932046196, 0.6355180627095123, 0.18308533554375717, 0.19630109118557737, 0.19795148554121733, 0.16435219564831494, 0.17565453593230174, 0.6575617256442488, 0.5550131075081113, 0.16806134188439792, 0.5515995445611902, 0.20694145902054428, 0.5797180806173787, 0.16787379173067696, 0.16727726097057583, 0.15913379895786162, 0.5997569658231988, 0.10393205821460483, 0.19175743528653133, 0.17595822044110832, 0.18973869718010128, 0.1749653439757527, 0.19107164246627273, 0.18618799642965767, 0.18627291296005055, 0.17435602287766738, 0.19405891719692536, 0.08305315751665598, 0.09862550987875895, 0.07910503969207872, 0.08392147195900856, 0.08871957816266973, 0.08405576497297718, 0.08398901600813657, 0.08043013644083441, 0.09210760592526734]}, "mutation_prompt": null}
{"id": "6d6c37aa-9921-4994-bf63-1d2aa88c7eb7", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        self.success_rate = 0.2  # <--- Added for dynamic adjustment\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            successful_mutations = 0  # <--- Track successful mutations\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutation_scaling = np.random.uniform(0.3 * self.success_rate, 0.5 * self.success_rate)  # <--- Adjusted dynamically\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):  # Updated dynamic probability\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    successful_mutations += 1  # <--- Increment on success\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n            \n            # Update success rate based on performance\n            self.success_rate = max(0.1, successful_mutations / self.population_size)\n        \n        return self.best_solution", "name": "ADERLS", "description": "Dynamically adjust the mutation scaling factor based on success history to enhance convergence.", "configspace": "", "generation": 64, "fitness": 0.4287297584699919, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.27.", "error": "", "parent_id": "a89f74c8-6303-441e-807d-8cc6c73ed6f5", "metadata": {"aucs": [0.8686497884226879, 0.8524793693660736, 0.859219670541673, 0.8634266033732013, 0.8551878545770515, 0.8617747828746609, 0.8670664219894832, 0.8707785231558293, 0.862307718704444, 0.6886707814986132, 0.7005349999107533, 0.7190968045985269, 0.6905249529490789, 0.6778632899221712, 0.7035564423216913, 0.704024117294701, 0.6790565374942079, 0.6451887686463746, 0.1760847110679753, 0.11660335836833768, 0.11114668059091037, 0.13093638045980371, 0.11805027971723026, 0.13321034252147146, 0.11162495153995222, 0.12651897743979446, 0.13345435563584274, 0.0959938262492962, 0.11481853086582816, 0.11177063018250377, 0.10374856526385134, 0.12376940498162181, 0.10202219009347357, 0.11544953405943581, 0.11455964116398953, 0.11825978889364508, 0.9526369619052758, 0.897711004465382, 0.9031257874813271, 0.8960595962790422, 0.9307953411386392, 0.8302278824498608, 0.9160866080589819, 0.946354157304948, 0.9330796368338654, 0.5828508315954917, 0.5781443802752144, 0.6133947617319524, 0.5822444584231921, 0.6203818448949219, 0.5644832437114621, 0.6466202591431252, 0.6169597684917572, 0.6245831272186693, 0.8564999132991904, 0.845227379730683, 0.8438659665788142, 0.8546772124571645, 0.8484977683777487, 0.8485888710188056, 0.8395078882021919, 0.8443159477327183, 0.8236359921760239, 0.27386244076584043, 0.31416493495514997, 0.42381080931343684, 0.42225026722342407, 0.49172831664120853, 0.27010803325126476, 0.38614746824852186, 0.400412598599991, 0.2737641445429625, 0.3430969034116752, 0.24133059556367897, 0.22907762268989595, 0.20048935301780424, 0.2324602343380222, 0.2802563563676812, 0.2458717941019496, 0.24666883130587602, 0.3942135616543804, 0.5592961238551116, 0.49440115362799963, 0.31803131521222616, 0.5300171616853168, 0.4908515839516481, 0.5179336476286135, 0.3841265622007226, 0.5495629111290425, 0.536505614305911, 0.6572059360644031, 0.614342127844597, 0.6114934992573584, 0.6198674638213988, 0.5581863611268421, 0.6231930681459744, 0.6392000991147796, 0.6343364129467735, 0.6384990609145076, 0.28512693986066073, 0.11569807285742095, 0.14345611154105375, 0.44526354696332093, 0.4328238153858499, 0.44869369576505014, 0.30132957594386967, 0.2792228457812145, 0.17321232356084637, 0.4254791004000462, 0.41328941454573564, 0.41893677792494033, 0.47273128649853424, 0.43431056237702903, 0.419812320638803, 0.38613347030541534, 0.38317072464308244, 0.4148386945116508, 0.7769273053945606, 0.7694810204328175, 0.7864499347883375, 0.7899595716125377, 0.7821050454406784, 0.7833601822891042, 0.7810036201570699, 0.7911344925434882, 0.7831585142339417, 0.11368672098970878, 0.1149911320129926, 0.09857962917585916, 0.11480913477874932, 0.09435445923883656, 0.09893401961109771, 0.10150136004685406, 0.13733989660560242, 0.1069739618879243, 0.12050994963429462, 0.15144470478693073, 0.1651071105335723, 0.18244558872200067, 0.32323971271664587, 0.15558217073484726, 0.1615980501121036, 0.15325389281425783, 0.14445508696608178, 0.4823978247111097, 0.4450273706124581, 0.4699955763661876, 0.5004055776975869, 0.4493631306706459, 0.4757778454653223, 0.5059151870203877, 0.49204789588417597, 0.4864502702922098, 0.3505631348354522, 0.3608619683219143, 0.4042718662581902, 0.37383134363221093, 0.3906628335601171, 0.3440146278375331, 0.38696929807931824, 0.4024289724436766, 0.3668980770411957, 0.21864982414872214, 0.1992296310421594, 0.22394889712351107, 0.22118344427480363, 0.20310037734071562, 0.2018790994699171, 0.21717469761314612, 0.20479141588527427, 0.22089453413343152, 0.48111524396025884, 0.31158195752045226, 0.20176897096709945, 0.3439393221163284, 0.26222615412079164, 0.21849438658734488, 0.22116597058983967, 0.2136548659542461, 0.34383376265504895, 0.7647231847614413, 0.18275508955124187, 0.15329556084383, 0.9068164159672201, 0.7714589736574451, 0.19476659049978085, 0.1879609983121019, 0.6684754241237997, 0.7988347475471368, 0.8564769831622474, 0.207532404498041, 0.8442058500317047, 0.836296955385793, 0.21007582046831674, 0.825857210858007, 0.20990525119466352, 0.21059608793888684, 0.15367711457423705, 0.1818258904223815, 0.18879930911662746, 0.18745838501379453, 0.19067657522225323, 0.17005869231711568, 0.19093840939254103, 0.1789390646159167, 0.2063315279574507, 0.1901073894362798, 0.08632585698313655, 0.08274641234237756, 0.0900276326844629, 0.08147468092117083, 0.08140178165827161, 0.08594263668852797, 0.07690911940971978, 0.08047265863738051, 0.08429970278611654]}, "mutation_prompt": null}
{"id": "b179e759-6efa-454d-bab7-c2347b15ab44", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutation_scaling = np.random.uniform(0.4, 0.6)  # <--- Change applied here to widen mutation scaling range\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):  # Updated dynamic probability\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Introduce a slight increase in the mutation scaling range to enhance exploration further.", "configspace": "", "generation": 65, "fitness": 0.5047486914065541, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.50 with standard deviation 0.31.", "error": "", "parent_id": "a89f74c8-6303-441e-807d-8cc6c73ed6f5", "metadata": {"aucs": [0.9210447951689591, 0.9195490685572134, 0.9180437940020044, 0.9218194070722122, 0.9248875513334048, 0.9211253990992747, 0.9164716944063751, 0.91704990905136, 0.9235211455987513, 0.8114494113936339, 0.8312907782453726, 0.8200410549720036, 0.8020905387401137, 0.7043925879312942, 0.8420662209320937, 0.7421135736403188, 0.8278399548638329, 0.8147059526110845, 0.16561118488883209, 0.1636434032565438, 0.1596867089474283, 0.14486455130433185, 0.15446172334301222, 0.15350802237566874, 0.11833071399552864, 0.15667594376420857, 0.14070281785995742, 0.1354460382104642, 0.1140345849853226, 0.08441642707161245, 0.1000150310866249, 0.1552749889221483, 0.12897794904589777, 0.1092683954719651, 0.1532125094707213, 0.11983283416848278, 0.9744084547102758, 0.9422934963809289, 0.9498462519683013, 0.9482907076417336, 0.9535483411722595, 0.9451951227681629, 0.986446105279588, 0.9442634010614502, 0.9862629365982057, 0.8171901165550093, 0.796176219384276, 0.8108996517533037, 0.8105489180712608, 0.8148853969036456, 0.8163290636968297, 0.8248300620461377, 0.8116357783247533, 0.8312500971262948, 0.21302525629361713, 0.22993629315073238, 0.9213057382806124, 0.9274704401848003, 0.19334356770988614, 0.918464111613906, 0.23774327535704654, 0.24419323067641385, 0.9217651330785734, 0.6139236200719911, 0.5497205663514572, 0.626688226302915, 0.6759887146561616, 0.5475442816242211, 0.7385812854951732, 0.7306335225237144, 0.5758555374267591, 0.7290388341663109, 0.5948753631739294, 0.13397438832507558, 0.6928157466295185, 0.6529511820007263, 0.6161192117460149, 0.7440074607582632, 0.65177450019938, 0.627121161190705, 0.13494117427238506, 0.2452426354514392, 0.7019994913402907, 0.2471065628947422, 0.7579068979398561, 0.2275378119535283, 0.5484915561802344, 0.352428885026716, 0.4270747915720403, 0.7165108495580387, 0.8130666686747045, 0.5413988973974518, 0.8280982839182283, 0.7654152295074887, 0.49418169819030144, 0.6137167721078866, 0.33609271704287746, 0.8263419549028616, 0.8211618820609676, 0.41483296284690097, 0.4137072035023762, 0.25941865438074396, 0.3451572185974763, 0.302196205336262, 0.547061777018179, 0.3244383757440039, 0.19529801836232685, 0.22614775644458351, 0.5408808617764803, 0.658790354649954, 0.6387297158703806, 0.6630803819698043, 0.5042425071887361, 0.516127502230162, 0.4248519535213078, 0.5909784844765673, 0.6873354728506758, 0.8728048915321786, 0.8846703351508689, 0.8813543081568008, 0.7282840885355069, 0.7213412853768704, 0.8731309713676425, 0.8839463724703249, 0.8549543153195979, 0.865179318633815, 0.12712082506814315, 0.10262681051928679, 0.11224918890648117, 0.17821862638090136, 0.1366206762215152, 0.1857282983674564, 0.13954502401328683, 0.1389689947328716, 0.14940980529669845, 0.663783146673073, 0.7115965666733532, 0.20972404673050815, 0.7399276889365315, 0.21289101003346844, 0.46162391128925406, 0.23623365011784425, 0.21071223209153722, 0.22779401568227609, 0.7731320298398284, 0.7750028725213689, 0.5214600033169454, 0.7210388558460568, 0.7614290406575484, 0.752633375788025, 0.584444274321289, 0.7486949609751805, 0.7604236818504686, 0.2524558653764407, 0.3685514981889786, 0.52317378951076, 0.2540909289816625, 0.5838871976238369, 0.45684658362430797, 0.3396605460781166, 0.7230198080927068, 0.6869554774021749, 0.2240286236251574, 0.19864713746085494, 0.2061220665547544, 0.21925570186795262, 0.21070638316480295, 0.21935553632303573, 0.204585071729533, 0.2150708798151746, 0.20890889899234377, 0.21402539209361116, 0.8400290642337296, 0.7869897997615491, 0.24963882728837616, 0.20966024106490921, 0.21035895776096813, 0.2054938410234759, 0.22426971502211135, 0.20923207651381326, 0.18818547133501018, 0.17607321117261332, 0.15368584709942512, 0.9370953512466604, 0.19982753586265878, 0.9424299529919067, 0.9358310008964784, 0.9113415847110433, 0.9309202598189963, 0.9346783312940802, 0.16949801858294267, 0.07354410247876275, 0.9341031082365462, 0.2130858957150138, 0.8661030991620879, 0.9048789952129259, 0.104846199220336, 0.920842248350024, 0.20922728219865538, 0.18418544377423796, 0.18989241661297884, 0.19260904301480997, 0.18693998269298484, 0.17584815991123126, 0.1792131596163099, 0.1704628155909007, 0.17347393578190895, 0.09221395274601141, 0.09298991644454513, 0.11694079540890523, 0.09664708732253202, 0.08756025420063629, 0.0899429386691405, 0.0848699489518171, 0.09418075989634433, 0.09521222604694468]}, "mutation_prompt": null}
{"id": "eeaf54a2-533b-456e-a549-424b6192b10f", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Adaptive mutation factor based on population diversity\n                diversity = np.std(population, axis=0).mean()\n                self.F = 0.3 + 0.4 * (1 - np.exp(-diversity))\n                mutation_scaling = np.random.uniform(0.4, 0.6)\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Introduce adaptive scaling for mutation based on current diversity to balance exploration and exploitation.", "configspace": "", "generation": 66, "fitness": 0.3884724349654024, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.30.", "error": "", "parent_id": "b179e759-6efa-454d-bab7-c2347b15ab44", "metadata": {"aucs": [0.9301476556230894, 0.9252831172748319, 0.9314934826417898, 0.9369729864045085, 0.9335616214159816, 0.9337173070304358, 0.9293833030385112, 0.9360058174863454, 0.9370440806647726, 0.22613987140123393, 0.5050649719797395, 0.3311333135077008, 0.2013241546979857, 0.17213771875269246, 0.17672073739798688, 0.8454387673432858, 0.689812039879087, 0.6869825439080424, 0.15375733759819943, 0.1201782971113442, 0.14539871770640544, 0.1527331971466046, 0.1461470618664361, 0.17513348635498083, 0.09149444636530513, 0.1550787002088415, 0.1812762513766204, 0.1090592813789295, 0.13599828232314015, 0.10888645155572563, 0.15205556122699704, 0.11636116756589743, 0.10589003661326113, 0.0830470587388299, 0.15532511398151638, 0.11723096442838854, 0.985138060351283, 0.94487672167933, 0.9465596526628945, 0.948519452218469, 0.98878008729404, 0.9537843428524841, 0.9428484741924456, 0.9606220290355022, 0.9605620076495234, 0.3981140523533434, 0.6317994164100963, 0.6618693106975402, 0.4530151054452556, 0.6826857777836686, 0.7087334469503999, 0.36421700794152156, 0.376434383159861, 0.48918461578282535, 0.8731361110310434, 0.9019383524129629, 0.9234999327740747, 0.22099448523392184, 0.2814968097154472, 0.9212825535775375, 0.9283415438787294, 0.9232027526472456, 0.9153217319501279, 0.165954725710447, 0.176975884887133, 0.2921076129912673, 0.17149840239129266, 0.19584708457669864, 0.26949074953795416, 0.1478190713444123, 0.21003484987630905, 0.1739741218622083, 0.15349833701397897, 0.19817285209559987, 0.180958166394402, 0.21490224532123925, 0.32439445142445156, 0.1299733375308939, 0.18879852678690612, 0.18384389663082856, 0.24528367919409377, 0.07828451431714023, 0.23003454577720117, 0.4027665617681082, 0.11430030584552442, 0.24065049177304276, 0.19227269646491008, 0.14411094694687, 0.0984551694796939, 0.7989833317073652, 0.8219506213917938, 0.8286360102755884, 0.5661835615856858, 0.7735859117956371, 0.8029699045034413, 0.7030053596765253, 0.5479006112961081, 0.6853072795688284, 0.8327803869710506, 0.17128171457489094, 0.2756803703568531, 0.2744822608013826, 0.12590195632247636, 0.19738700162097, 0.20352249199188444, 0.11720416396747291, 0.27110116555179764, 0.18998184658217565, 0.25236244172059774, 0.22899629222012308, 0.2570314246295836, 0.15308763972442518, 0.15871256561711833, 0.3355671554599653, 0.215498545491961, 0.2293050617777057, 0.22137452580979944, 0.6242245276519006, 0.6256617383908782, 0.6576772102272608, 0.5976294512342356, 0.5187726317117831, 0.5004949881385308, 0.67730400955284, 0.5958479014269805, 0.5993356206167706, 0.10579315442665882, 0.13514264237790108, 0.12668693809566467, 0.17704272613437755, 0.12223878904554841, 0.467458051514144, 0.1488886168195961, 0.10620393598233036, 0.17756707616924983, 0.12943909172680923, 0.13876728759939727, 0.3051136160452914, 0.14118426865338063, 0.351400488365471, 0.15767947379781266, 0.5683730058420117, 0.1612354065527607, 0.14780899863865582, 0.5170863876063099, 0.5494813323992951, 0.3962127482358697, 0.5179961421867605, 0.48097625838318414, 0.40143334448466006, 0.2485384608911172, 0.6201155104571614, 0.8156014527674591, 0.29599412765005007, 0.33590889539393454, 0.4014575063278564, 0.43639771686005535, 0.27542819812414576, 0.23273010311715425, 0.2729109331756796, 0.365773864330987, 0.28576469483286604, 0.2243546258573451, 0.23136402035923842, 0.20246302524870263, 0.22494749095744815, 0.21907828006035812, 0.21393541064709065, 0.23447643830847686, 0.226166266456575, 0.19873382105408333, 0.20154937496912484, 0.18482057083502312, 0.18930415068135964, 0.181042923445219, 0.19795611615015773, 0.19640332406714467, 0.19358421627461153, 0.21022557087339688, 0.2234482868392048, 0.18533222357126156, 0.9177567958116446, 0.1620015491786424, 0.9143789410353327, 0.8931136303720321, 0.9244448733757651, 0.9148605734032887, 0.892933303416807, 0.9319759099823417, 0.9169012102643436, 0.21201951601329672, 0.1270869872821342, 0.8951170813239426, 0.16731331027365381, 0.15520765658797886, 0.2128097730168117, 0.20912287612377, 0.155792726551359, 0.20894088751564355, 0.19068582969434755, 0.18305190107371883, 0.1939859649475194, 0.18894952541074927, 0.1859998629223012, 0.19316422724850824, 0.201928972089655, 0.19024582221358677, 0.0895490905347468, 0.09020247327119923, 0.0891786938046929, 0.09895817236699145, 0.09080329312002489, 0.09908461256846712, 0.10064594748912148, 0.08428118259799744, 0.08902936641305315]}, "mutation_prompt": null}
{"id": "a8104caf-e220-4e5f-98d3-f7b1009013c4", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutation_scaling = np.random.uniform(0.4, 0.65)  # <--- Change applied here to widen mutation scaling range\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):  # Updated dynamic probability\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Adjust the mutation scaling range to enhance exploration by slightly increasing its upper limit.", "configspace": "", "generation": 67, "fitness": 0.49489159900578483, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.49 with standard deviation 0.32.", "error": "", "parent_id": "b179e759-6efa-454d-bab7-c2347b15ab44", "metadata": {"aucs": [0.91966316105695, 0.9236220791276799, 0.9226445073478925, 0.9306782845837104, 0.9309815840304232, 0.9305909424235872, 0.926204890293871, 0.9198391848039931, 0.9224728395804005, 0.8321795126002121, 0.7411790753294509, 0.8254908350740894, 0.8203925879472234, 0.8184512725953507, 0.8223220305234646, 0.7938259311221021, 0.812265174432156, 0.8269357668798047, 0.14793850194422298, 0.16956962502740447, 0.15500143967056335, 0.12271505478803191, 0.15903818907014788, 0.13319508297927862, 0.1549530865395351, 0.15518073005422717, 0.1452847051217423, 0.08767051918578361, 0.11020341539366363, 0.09706202103573947, 0.09270176171287947, 0.1298218401589949, 0.10989575784009087, 0.11968975293226014, 0.1394385948230592, 0.12724337206237923, 0.9887735644569942, 0.9484009130905432, 0.9767578629558766, 0.9477240396335669, 0.9516611028205273, 0.943877268486906, 0.9543175202404598, 0.9460104758779712, 0.9690190733499123, 0.8219223380177161, 0.8188004980273702, 0.8109013474294878, 0.8128480862547699, 0.8199859824204323, 0.8188696921330546, 0.8162305827520865, 0.7902233721615171, 0.8141692053681525, 0.8812979061506051, 0.9381341889921063, 0.9207985939797733, 0.9458784620654724, 0.28161287443050786, 0.9372590817082915, 0.9307196703346569, 0.23637964896809094, 0.23489876322145797, 0.8443154796776812, 0.6723485358267308, 0.6191381168299587, 0.6116042744358259, 0.6280163807472975, 0.6439941847626764, 0.7021327218404825, 0.6159970879964785, 0.7267118782205411, 0.7868729276931635, 0.6041215069646049, 0.758507695907799, 0.6179650951870852, 0.6506817037740673, 0.6591992576832413, 0.7402628142159136, 0.702673455604627, 0.7564968809832147, 0.11449635240371259, 0.0641826650081202, 0.7497912890360543, 0.738918444254521, 0.1819721009201941, 0.18245510902907502, 0.39758566702467757, 0.24476959184800173, 0.5853641755326782, 0.8232860141698244, 0.518964011918227, 0.8178503152058992, 0.2915775177793015, 0.7450226341993413, 0.38674810556697137, 0.8107039590291876, 0.8240915820967399, 0.8008681525132555, 0.25407041067904734, 0.23806415021530913, 0.19039287867969168, 0.387253064127994, 0.49740257778269514, 0.45369050070904404, 0.33610019747347, 0.20193594657975744, 0.24115518412751402, 0.495329125798168, 0.42599001879332454, 0.5133787324058172, 0.6521073222563357, 0.6658985232381855, 0.5993296214515758, 0.3322988889049988, 0.393457042562144, 0.5489895396553273, 0.8721798522214134, 0.8867529298199648, 0.888542328853903, 0.7300234163280079, 0.8835761636169722, 0.8951740776048254, 0.8790695581798526, 0.8827098861258064, 0.8832064985381275, 0.14190992962543747, 0.11800283529229494, 0.15128993440400973, 0.14365700144238103, 0.17146145629283982, 0.12605057749289483, 0.1390817637106777, 0.14505522428358653, 0.16094462009917188, 0.2050348443954615, 0.5163603997675987, 0.21815223297933173, 0.7474482742812274, 0.3526215778938394, 0.7329158753308669, 0.7861296347677336, 0.24864713287500595, 0.216567130458854, 0.5231266456725909, 0.78453164671037, 0.5529020087480675, 0.653647033814253, 0.2834119114248119, 0.7382835120041458, 0.7973197371369799, 0.5593998332821621, 0.5421219441625722, 0.581540133482888, 0.42383821207143035, 0.46756833785099816, 0.30290156417431824, 0.45214621968322966, 0.31844434266398447, 0.2717670715287611, 0.31118152517187436, 0.35779439678273983, 0.2105958723428848, 0.2365512243677904, 0.22846138647531467, 0.19908422537654125, 0.2153515027470042, 0.21841566542151403, 0.22792853569334526, 0.2083640815571075, 0.23117099750820536, 0.1963223950471482, 0.2089396650214681, 0.19894573487591283, 0.20889915833712758, 0.20331091113728084, 0.20950697677970254, 0.19047744794367039, 0.20112689921354554, 0.21077047896276468, 0.18784471404229375, 0.18631797821358442, 0.15375888924809644, 0.1726461635654476, 0.9128222759785335, 0.9481862940908512, 0.9368320443164198, 0.16248675789908829, 0.9481260524782414, 0.929857837257801, 0.2126961234450151, 0.07354122950148101, 0.9313893381342222, 0.21321509864730248, 0.16843612039354194, 0.9351954476398803, 0.21311481553323974, 0.9197945221023817, 0.2033511478820852, 0.18550198268096885, 0.1865623099398055, 0.18912871591636116, 0.17469039474675663, 0.19573705757025295, 0.20324595605985873, 0.185361278717739, 0.20468531959096048, 0.10136884211835262, 0.09592304879639246, 0.09229451355018659, 0.0980550706134552, 0.09195130491680226, 0.08828574598167449, 0.08835715641779074, 0.08664478133699227, 0.09011802732082563]}, "mutation_prompt": null}
{"id": "1e93946c-a975-4fdc-87db-82963a8ceb49", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Adaptive mutation scaling based on fitness variance\n                fitness_variance = np.var(scores)\n                mutation_scaling = 0.5 * (1 + fitness_variance / (1 + fitness_variance))  # Modified mutation_scaling line\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):  # Updated dynamic probability\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Introduce adaptive mutation scaling based on fitness variance to improve dynamic exploration.", "configspace": "", "generation": 68, "fitness": 0.4189195985964985, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.32.", "error": "", "parent_id": "b179e759-6efa-454d-bab7-c2347b15ab44", "metadata": {"aucs": [0.927581836200987, 0.9260006649317227, 0.9212753898041116, 0.923908795217057, 0.9264940041333484, 0.9287167862003226, 0.9244999303593759, 0.935862317725317, 0.9306305857207207, 0.8413254503845924, 0.8527977038813581, 0.8415388250286095, 0.8558818893897873, 0.8452942016093256, 0.8578287166681897, 0.8250987828567589, 0.8703508145586024, 0.8398587754574196, 0.09377816672655148, 0.10726096030657117, 0.08717654548311349, 0.126730254554545, 0.09795407085824359, 0.11310023833329397, 0.08058243391822617, 0.09335848840431682, 0.11860139041287954, 0.14005989877181013, 0.04886342048782388, 0.09800311264558259, 0.08227352312548841, 0.08041961744650128, 0.0930905483085559, 0.11827072972736863, 0.11841694535634961, 0.058998684995534845, 0.989873647217537, 0.9917157220553129, 0.9732106901096003, 0.9877047521320924, 0.9743854065471902, 0.989253643266956, 0.9827784246543468, 0.9856973965927386, 0.9626596946155397, 0.820992541451678, 0.8132503836902385, 0.8240793331584015, 0.8160801935190843, 0.8271946960238123, 0.7917167722816174, 0.8199007764489666, 0.8225899888088326, 0.8246590148107189, 0.9498348377907172, 0.23126627505862551, 0.1586119126184543, 0.21126151956358175, 0.21545006704723657, 0.2152367596499306, 0.09077210905421451, 0.955971330976789, 0.9414307706078067, 0.5001944342268156, 0.5159990276449643, 0.13422290451938446, 0.63311328795147, 0.5888608410062988, 0.664063627353491, 0.8716231973372626, 0.6326493915906672, 0.7357255899259154, 0.1365910809667501, 0.6243600619951607, 0.6129079130921903, 0.7575066337949677, 0.1304376913306945, 0.8079383136581639, 0.5378701238232437, 0.8245881383768131, 0.5609478510210503, 0.08713245894002253, 0.1298502404901214, 0.14502011928949143, 0.19680250563026935, 0.8149079571423107, 0.130084270042097, 0.2191390417627499, 0.29361555819088303, 0.12507104196549623, 0.2530535424373518, 0.3620964729412579, 0.19514190540661158, 0.24838743882662662, 0.1802500866502036, 0.8033900223983941, 0.1496913273751086, 0.3344923505229722, 0.3889926014274163, 0.13730453361062223, 0.10374088612562082, 0.13789883625148758, 0.2783148057908945, 0.17477378386512932, 0.43389324820859176, 0.3084610277266703, 0.19967322142575827, 0.11052883405376468, 0.5327742823170796, 0.3182291197968825, 0.3372063471709532, 0.5642060267389335, 0.48960044703226135, 0.7187462842140568, 0.28974821707014553, 0.3115147012353344, 0.3511395642314554, 0.8880177493830819, 0.8692113065665559, 0.8837140528741362, 0.8590634652027276, 0.8904169496869754, 0.8857324610042963, 0.8832917157820365, 0.8922240621901963, 0.8891099823527581, 0.1350202440018975, 0.054252717096419434, 0.08683776414689859, 0.10906651746205498, 0.0964608906900094, 0.07981852327382788, 0.12440975648607766, 0.10731840550704597, 0.0711648259474763, 0.23240585509472322, 0.18130863537042108, 0.2127376079082619, 0.30861374185957036, 0.23879101939685377, 0.2947153858308834, 0.1955099092679733, 0.14167464091628112, 0.24706786419099813, 0.7097169085866895, 0.26714695299037916, 0.3917529679657832, 0.7659468371610966, 0.29276884610654375, 0.6638488546230772, 0.41691551375866887, 0.777106440486508, 0.7962473673730358, 0.266240489919945, 0.21339972505871285, 0.7086198965017483, 0.3855708969629946, 0.227731943648097, 0.7090826697420731, 0.6261735613761392, 0.5857752411453553, 0.26137656425081146, 0.1928643192228906, 0.2172676872238768, 0.2019612335051042, 0.21894225002344836, 0.20925209785630627, 0.2077737989453452, 0.22779796964275767, 0.2535595739917721, 0.2807944003427332, 0.19914866965719802, 0.1898370113571436, 0.22388932254213356, 0.2541179710149226, 0.17992243033150446, 0.19970430089590485, 0.18675406630210356, 0.20042993061061976, 0.19129707276903796, 0.1787099066445036, 0.12699366606665785, 0.1545257604228798, 0.17259529020945752, 0.2010792751039806, 0.1198052370631072, 0.14319434643985496, 0.16503646734884714, 0.9554000470135957, 0.9471740744263565, 0.16968893984697553, 0.21302157963722335, 0.21357248307921073, 0.1693276230787697, 0.09442679197457493, 0.10512902704399862, 0.15691477174678403, 0.9507722536943075, 0.19517365041194146, 0.18603570685974724, 0.19698150650795865, 0.16981602599048606, 0.18219406830922846, 0.17032315372223872, 0.19121803173666763, 0.21058979304050873, 0.17515717045477963, 0.08159613289121803, 0.09134864374630691, 0.08775237248087164, 0.0918763664954857, 0.06316978137703222, 0.09435754139382657, 0.08264604263703945, 0.08838553324747322, 0.1080160236541633]}, "mutation_prompt": null}
{"id": "ba16a679-ea1e-4b9a-ad28-7e564e313c19", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutation_scaling = np.random.uniform(0.4, 0.7)  # <-- Only line changed: increased upper bound from 0.6 to 0.7\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):  # Updated dynamic probability\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Introduce a slight increase in the mutation scaling upper bound to enhance exploration further.", "configspace": "", "generation": 69, "fitness": 0.4950725583270535, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.50 with standard deviation 0.31.", "error": "", "parent_id": "b179e759-6efa-454d-bab7-c2347b15ab44", "metadata": {"aucs": [0.9244539296697634, 0.9256554889272115, 0.9251717041956757, 0.926157383558281, 0.9328118869133232, 0.9350933126598735, 0.9292593883381458, 0.9194286082754902, 0.9270748860479169, 0.8421823676585072, 0.8221593758827807, 0.7950706498126219, 0.8445493430361943, 0.8456976456188565, 0.8299415760386302, 0.8527028354976257, 0.8401753588320153, 0.778615812252345, 0.686115716651408, 0.1694409177255477, 0.13506354241517182, 0.11207077197046478, 0.12796431054152912, 0.6237429832521475, 0.14507294922881597, 0.15420891723640417, 0.14106180502234145, 0.11725167249780466, 0.10139176447166942, 0.12790475047931826, 0.09598625476830058, 0.13548294003666783, 0.11869900400012134, 0.10992471269518245, 0.10185573281143989, 0.13322708689239193, 0.9887591284709252, 0.9592097258773216, 0.9774906631407952, 0.9552619519081373, 0.9534563111342208, 0.9353525513915221, 0.9572101083606068, 0.9840506618494925, 0.9618700031855612, 0.8179101955983582, 0.8252638500602005, 0.8269665989093956, 0.8141314078262188, 0.837251828085579, 0.8269538864717261, 0.821297554682714, 0.8094410844926563, 0.8224925241254705, 0.9417260513015453, 0.9332682079601788, 0.21049701269232024, 0.9342409370457323, 0.21352448404082502, 0.9427712044275474, 0.41013509806057313, 0.23742295104413647, 0.9356706289917205, 0.6029623718782906, 0.5452608296843537, 0.7725338872783203, 0.7637944955486432, 0.6650720642475302, 0.6789491309142907, 0.633282539936524, 0.7429233523311258, 0.6764798399204903, 0.6705405750400999, 0.603130637593212, 0.13674383271935608, 0.631171212837762, 0.7425993200661306, 0.6095641483295012, 0.6269276298793127, 0.6160492134553104, 0.1347635683023798, 0.12816530681882754, 0.6640978151289392, 0.21202528625718564, 0.1055171216482147, 0.6288938110585112, 0.3922112671816733, 0.7465468800657322, 0.2952840306398782, 0.6995375960191078, 0.8364474297039224, 0.5290239905973974, 0.8354524228850351, 0.8228129542757876, 0.295703258483097, 0.7202894695986536, 0.851198269926154, 0.8275523740405164, 0.46223240811820343, 0.17283802720553665, 0.3213693975729319, 0.15181289631587347, 0.33152170723261354, 0.3529494254394403, 0.15027871904721812, 0.20024810948286675, 0.19225223782205847, 0.18173671193393415, 0.5332510027067748, 0.4930165640182691, 0.6868952017342964, 0.41403468521338327, 0.6989789740954722, 0.5708523684286952, 0.42913008099095085, 0.6097398927107491, 0.6477390402064738, 0.8795349928173846, 0.8735507265751169, 0.8879792269018268, 0.764757842762166, 0.8867090457949546, 0.8424641464181306, 0.8895258421863651, 0.8010367400645864, 0.8829830196437163, 0.12268629401731868, 0.09119342690440113, 0.11548158202262326, 0.129882642191266, 0.11010553238373866, 0.12232281244177867, 0.17241488393523174, 0.10965465648382255, 0.5164280550320056, 0.5547694098548122, 0.4164135025234824, 0.39511381314200134, 0.2685128630320832, 0.6850550673304744, 0.5362481179708956, 0.21429148391427244, 0.2919249537225018, 0.7759666676425206, 0.7744849039084731, 0.6619602611244182, 0.7891946787044593, 0.6228904517248466, 0.48327904364744356, 0.6573204954653742, 0.7764298155708098, 0.5156674411346027, 0.6557381138171686, 0.7076389169911333, 0.7149955289189487, 0.31431746114312453, 0.3697891553608553, 0.5209559265907576, 0.3565264371810394, 0.6062591415533229, 0.6900338846794207, 0.26792773626148636, 0.21814542473413734, 0.24257060582314172, 0.20209234908085605, 0.22137680562278994, 0.20742123070557195, 0.23733972840654505, 0.22140175298544507, 0.21474273173048963, 0.20567522266831462, 0.2551106251520284, 0.21139382816139662, 0.22326903749214, 0.2503713246694428, 0.22133187191670955, 0.18908384527848277, 0.19115957166290998, 0.20016124471499575, 0.19833977833075467, 0.18839025327401737, 0.18782289977368283, 0.14811558895902233, 0.951892133988065, 0.20061010254096778, 0.9361355103022776, 0.9264013171176732, 0.11019307992170091, 0.9425612863157449, 0.9295735201494169, 0.16976338416313685, 0.07355692158137805, 0.21159480666481545, 0.21309978157762788, 0.16871152986024796, 0.2127766845813982, 0.10475395225527284, 0.904803446902496, 0.1774530514596634, 0.18043432110514734, 0.19931410431368035, 0.19728105507446114, 0.1967611534057886, 0.19586351260634727, 0.1834989340018135, 0.19328755177985046, 0.1879838639512158, 0.1062234539552297, 0.09110631235168187, 0.13500715583651723, 0.09109769507686649, 0.09016108735252615, 0.10173026605097635, 0.07942441424193403, 0.09218399110436404, 0.11202137280876157]}, "mutation_prompt": null}
{"id": "7fde75e0-be38-4de2-a507-5a26e9498515", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutation_scaling = np.random.uniform(0.4, 0.6)\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.80 + 0.20 * np.random.rand()  # <--- Change applied here to widen crossover probability range\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Slightly increase the crossover probability range to enhance diversity.", "configspace": "", "generation": 70, "fitness": 0.4982119594054361, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.50 with standard deviation 0.30.", "error": "", "parent_id": "b179e759-6efa-454d-bab7-c2347b15ab44", "metadata": {"aucs": [0.9180546482182239, 0.9168535238143728, 0.9221891901466367, 0.9183427680490394, 0.9277257535579788, 0.9203724173126261, 0.9217718950528171, 0.9150069310740043, 0.913293747003805, 0.8227481651965545, 0.7557651773855586, 0.7861240946208775, 0.8134291637592597, 0.8180899151882081, 0.8218251517822909, 0.776422912625952, 0.8138295749212342, 0.8321603932928243, 0.14581674382904242, 0.15547484366143505, 0.13931752084812088, 0.16917256396706892, 0.13224538264243035, 0.5155205890148418, 0.14630743867100882, 0.16225496765952807, 0.16041350495739004, 0.1381908610463657, 0.10910313071933564, 0.139527286556412, 0.1319264161840974, 0.10888409754165895, 0.11743775816772029, 0.13127952479824923, 0.10927462375155905, 0.10766424550384601, 0.9526119176404123, 0.9567721778051529, 0.9760565940184167, 0.9475513196853609, 0.9579858392779473, 0.9427323251099462, 0.9406355893068474, 0.952967962801323, 0.9754763123912005, 0.8022515304682868, 0.8008869403776191, 0.789122397217355, 0.7975070234439752, 0.7957912194592318, 0.7922242911781932, 0.8097782792305148, 0.7865854981757925, 0.7962325131795692, 0.9173600698571308, 0.9154786490928436, 0.3870164917265322, 0.9326420961243725, 0.9211535843405757, 0.2140745750159747, 0.23605063911478497, 0.9279468450473709, 0.18096227053879077, 0.7182489262294928, 0.6515239265842956, 0.5635726308060334, 0.65559757130723, 0.6242249999457172, 0.6235739066576851, 0.6968550479894293, 0.5836199370010527, 0.8292177107554847, 0.7352464125384786, 0.5552756447742236, 0.6610451557954193, 0.6390012463123163, 0.7019906908575815, 0.7515970652043724, 0.7810341283088036, 0.5912277950371325, 0.6632764583787705, 0.7434883889977248, 0.37357460737839454, 0.14879595823994407, 0.36666921897824145, 0.7385739081902656, 0.5849521308721034, 0.5078226289402188, 0.6211439976595072, 0.16145163082100722, 0.7788442640229627, 0.7414423155044529, 0.6736760145952854, 0.7819622226456406, 0.28813069615155296, 0.7047447316309868, 0.7162516357867597, 0.7590925486576247, 0.7753362742548935, 0.17366863279631473, 0.34117515949906196, 0.33906354909184233, 0.49478954685815923, 0.26389255603686823, 0.43491083808623876, 0.23897045099437164, 0.18966867056005332, 0.13722299293832052, 0.4301408498282908, 0.48086803724189653, 0.6415976052817833, 0.4513355999800549, 0.6632256290167188, 0.4734488294160173, 0.6603470224685652, 0.47061428707885977, 0.4355872368386948, 0.8734123783731321, 0.8542307236070498, 0.8662852693568741, 0.8536118207370906, 0.8662946675763766, 0.8437649236194199, 0.8634488131640123, 0.8358997198233944, 0.8550382585946861, 0.13895301346607047, 0.1547344991399101, 0.13336187875393446, 0.1348059424590663, 0.15462373218240077, 0.15802040642685866, 0.14992492083255615, 0.10843840011767547, 0.1355205178984581, 0.5285902734407899, 0.49739511266491276, 0.6915435714592064, 0.17710438142851725, 0.6938090613745815, 0.6671925895932065, 0.7387546987534461, 0.650261238382137, 0.6662913225370586, 0.34269365856499534, 0.5718254284219191, 0.640402236042009, 0.7121080617460526, 0.5516484905422492, 0.7461947261200107, 0.7358970780899113, 0.6079624762156128, 0.48388353539104834, 0.322139366018523, 0.46685590143905853, 0.4675559027914382, 0.6450498904540782, 0.3445896964522208, 0.2950064157323603, 0.250127284289003, 0.3651973820161887, 0.6618020721801778, 0.23478078391303214, 0.24980165259857412, 0.2368056600988926, 0.24030684257272572, 0.19520120682619846, 0.20034594673856887, 0.22106267301236426, 0.20362700551259627, 0.2089202056713022, 0.2434243067289018, 0.22230454142544964, 0.24939344407413389, 0.21419655188599174, 0.19801756975216234, 0.22537863054470442, 0.2424384914895239, 0.2007160465842931, 0.817368772240994, 0.1877347454450029, 0.16470835084890256, 0.1535016573278588, 0.17271557992612308, 0.20058158351671052, 0.16900072151195122, 0.9282097956459252, 0.16277855778614136, 0.1675262162408946, 0.9118982231531035, 0.21179127714395662, 0.07354282597481832, 0.9285343567690596, 0.2132321677111021, 0.902999290204473, 0.9133069688954903, 0.10481019722002616, 0.90976468832133, 0.1791807190362219, 0.20116922326111608, 0.17988817497973597, 0.18029009362221604, 0.17575875450975476, 0.17904210053964975, 0.18112150748403144, 0.1793194884420769, 0.18560812724239018, 0.08806837935747991, 0.09703629055719487, 0.10934844251959275, 0.09726809787760393, 0.08573771658450768, 0.08661488273737872, 0.09128050678147925, 0.09209247328318781, 0.08969718320453335]}, "mutation_prompt": null}
{"id": "012e1270-a7db-4962-8a4c-56cc1adff8be", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutation_scaling = np.random.uniform(0.4, 0.6)\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.88 + 0.12 * np.random.rand()  # Increased crossover probability slightly\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Increase the crossover probability slightly to improve the exploration-exploitation balance.", "configspace": "", "generation": 71, "fitness": 0.48644122930391615, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.49 with standard deviation 0.31.", "error": "", "parent_id": "b179e759-6efa-454d-bab7-c2347b15ab44", "metadata": {"aucs": [0.9291595119369561, 0.9222561771978213, 0.921489009104258, 0.9132940110549064, 0.9235988360082834, 0.9223565194302974, 0.9225437023263243, 0.9244311268716973, 0.9193407150049963, 0.7965544101495975, 0.8160501652727191, 0.8028036172501212, 0.8543786038028442, 0.8302249305603335, 0.8474081297727206, 0.7230693103846517, 0.8156376112445841, 0.8151767101639977, 0.09143240992843382, 0.15193169334453593, 0.17699626356280496, 0.3791121961044077, 0.1485114288588717, 0.11479178682282931, 0.12552585364702373, 0.5089993220464852, 0.18220551483376612, 0.12224922051938925, 0.07887233519612724, 0.11677778458032284, 0.1378689785043825, 0.12738019395735212, 0.14039781248558614, 0.0951630951670952, 0.17046332979072143, 0.09022638008646477, 0.9886572604031946, 0.9517051416605421, 0.9427142460188828, 0.9631062877599076, 0.9641770151806413, 0.9574063809463687, 0.9556092272587602, 0.9459417303294453, 0.9577393209523725, 0.8288531010289525, 0.7996649617538805, 0.8064239386176604, 0.8120428044612086, 0.8130631967721468, 0.8197090688428392, 0.8117367017653467, 0.8188959564172943, 0.815387461849913, 0.23068803252444636, 0.9507801372018247, 0.7995444813057575, 0.9159433205785029, 0.21375970582712078, 0.2825974878542563, 0.23623098419262956, 0.23605964694037807, 0.9361151386155823, 0.13477806882544463, 0.5506668805222511, 0.6028431374385945, 0.6465234516560274, 0.4944991090838958, 0.13590194770372999, 0.6881122582017822, 0.1357330389885314, 0.6726665290279477, 0.5842684845684716, 0.6268055215159739, 0.6413624633198357, 0.5038039119688793, 0.5600565181675226, 0.6898113314149681, 0.5494737073118339, 0.5441092231700408, 0.13536733174360704, 0.7877092601957585, 0.11997401246083095, 0.08267108406757906, 0.14269115326889537, 0.6539927403733297, 0.38079645613472113, 0.7817192880633186, 0.3145053921189346, 0.7037688324768414, 0.807427295819761, 0.40728326716653684, 0.8168489517469677, 0.8295187634197003, 0.19627373818422134, 0.5529315869306488, 0.839950806750194, 0.8516870379878395, 0.8497304875200279, 0.16596441705829024, 0.35856105191163, 0.44222792669326905, 0.3739726896204193, 0.32528990505090594, 0.3975908972362646, 0.2031569374652077, 0.1538497586728006, 0.21084503158458234, 0.6279856130839656, 0.5559328211266015, 0.6298625348935704, 0.39561933502331215, 0.5512520922238493, 0.68539209758511, 0.5102024226485058, 0.4470791933060402, 0.6789409146437764, 0.8845202302544285, 0.8138232471331024, 0.8768257382321469, 0.8701594808794113, 0.8858701099110284, 0.6772261251542009, 0.8687200205034463, 0.8551819059624041, 0.8604319468385344, 0.14272030528824675, 0.09328488212306907, 0.15454277723178989, 0.15536185190646923, 0.15465252962954568, 0.0985184288627855, 0.2562809655418502, 0.14102529859430724, 0.13940518793229717, 0.6351575988972945, 0.555966286045029, 0.1896015953779312, 0.17884134758952863, 0.6659432300333621, 0.7974835901774626, 0.6213616297642283, 0.2636297708114693, 0.6973904857389425, 0.7635307683740684, 0.5064168898019836, 0.3472817044912726, 0.6398282828851212, 0.660546745342074, 0.7561659806216738, 0.7706669506061354, 0.4232075137878538, 0.6592644476139242, 0.46121276705265524, 0.18476998771306896, 0.3600504675053088, 0.7029563797078386, 0.7030705894721186, 0.522766948954028, 0.2876711986505003, 0.3102766068313606, 0.4019368261174726, 0.23074243462366972, 0.19577549985346143, 0.19607791424381948, 0.21371118510237996, 0.2175875073360145, 0.24419420983454343, 0.21413556934246725, 0.23006227864276307, 0.198491845354546, 0.19814614864273739, 0.8341419563263152, 0.22465788103135576, 0.21381164656441298, 0.22375593457346443, 0.18850152925872699, 0.21143688397489957, 0.22905583919122896, 0.20916457319259485, 0.1887293271531646, 0.18706934456490243, 0.14812229410708444, 0.9434236324624784, 0.2004865026010797, 0.9432780688886495, 0.9409145568382924, 0.16243040705888456, 0.9206489781231932, 0.9329048729695848, 0.16934002593231745, 0.07357015876384398, 0.9233626150561405, 0.21316513753271216, 0.16840593752281052, 0.9207018894080219, 0.8777861517162875, 0.09436642553108943, 0.17986072999663083, 0.18798334991771293, 0.1784552597056005, 0.19237059900858644, 0.1914722265439467, 0.1988208859087517, 0.18326922037277493, 0.18970725001284305, 0.18858691235804792, 0.096187499410752, 0.08755563394283528, 0.10084219862979005, 0.09347700956172944, 0.0943783289739758, 0.11732916656230141, 0.09038848007447264, 0.09175494705359377, 0.08794090317172198]}, "mutation_prompt": null}
{"id": "24bb2241-23a2-41f0-9360-b4a3b642d406", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Adaptive mutation scaling based on fitness diversity\n                fitness_diversity = np.std(scores) / (np.mean(scores) + 1e-9)\n                mutation_scaling = np.clip(0.4 + fitness_diversity, 0.4, 0.6)  # Adaptive scaling\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):  # Updated dynamic probability\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Incorporate adaptive mutation scaling based on fitness diversity to enhance convergence and robustness.", "configspace": "", "generation": 72, "fitness": 0.47546191929432263, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.30.", "error": "", "parent_id": "b179e759-6efa-454d-bab7-c2347b15ab44", "metadata": {"aucs": [0.9160430505387118, 0.9098665203682218, 0.9102671195990029, 0.9102836045974072, 0.9066605860379751, 0.9156362087116345, 0.9106020789127751, 0.902908868140404, 0.9061632507848875, 0.8255060593617621, 0.7893500186654687, 0.7856897165101979, 0.7758685093101323, 0.8102737252907362, 0.8164011795453099, 0.8113058046678875, 0.8252200761281229, 0.8101969559851929, 0.172901463609344, 0.14925504510811682, 0.17486908626763198, 0.6682960967820406, 0.5955872811196041, 0.13978688805560546, 0.1510351629139306, 0.6881008058985704, 0.15338070225800804, 0.154504792596585, 0.12209379434177903, 0.1178108978170529, 0.10922226929638568, 0.12621785989918244, 0.09458367383535948, 0.11236480230300783, 0.11470467737105428, 0.14001832193342656, 0.9402162164725364, 0.9618628669033699, 0.9201357502564945, 0.9610719724284918, 0.9441379138312885, 0.9557437607973657, 0.9216902988560569, 0.9293197431818148, 0.9174634736860401, 0.7963082885725979, 0.7855534884947484, 0.809133945331377, 0.7937676400612497, 0.7891338843132965, 0.775095166116105, 0.7965259483206781, 0.7729486810169208, 0.7883488999185517, 0.9306521054037906, 0.9047457788926422, 0.9121670243587239, 0.28193566370760614, 0.916637683962015, 0.2805975519599585, 0.1557387617589442, 0.9308394530324273, 0.9217158382098496, 0.5719565654983978, 0.5364068192613098, 0.5722556134902472, 0.8276890561316765, 0.7978173611724938, 0.6382699193634673, 0.4790972751753997, 0.4926872771806937, 0.5012468455575201, 0.39588790056892764, 0.7287951486326205, 0.5250772187893264, 0.671977612056042, 0.5376048317109574, 0.5526208163283403, 0.328417361675033, 0.4180569724008194, 0.3372916495864179, 0.3684024056042947, 0.17097642231827992, 0.4378153608832981, 0.5503448255254964, 0.09669419260876988, 0.5943172414599218, 0.12503212687982523, 0.0903539173200747, 0.7315455492964325, 0.7661991721171246, 0.1422220225803923, 0.6914835311825445, 0.7564582790653046, 0.17105863864017778, 0.7877890929530554, 0.33010149129316313, 0.8102269275222029, 0.3578332574265287, 0.3494676287715368, 0.14172490386367276, 0.6054874329622277, 0.21837107716019855, 0.2437914604521345, 0.30434397474384145, 0.14257045716614614, 0.3628658377697137, 0.40689871227623264, 0.6573424656841091, 0.5404200580154686, 0.34487690651041947, 0.4175793998912143, 0.5793766824404634, 0.5672321613401166, 0.5650580963278768, 0.36206015023688964, 0.6254830371486408, 0.8724558105238904, 0.8739913353074531, 0.8699077800112489, 0.8712110287776056, 0.8653829495139385, 0.8617407573272403, 0.8357483083519996, 0.8780370086251117, 0.7161081774236673, 0.24924744101958551, 0.12876229765054636, 0.15545139300059696, 0.1152856104114508, 0.13468846021230307, 0.10959102409584154, 0.12670649658440292, 0.1487808627891618, 0.13904121733680808, 0.21964623911897674, 0.15472894819295013, 0.687856288143669, 0.18128749693123314, 0.6738658833237849, 0.4532380916411427, 0.7769654773677772, 0.41427998613257366, 0.4003749313507554, 0.6939027713634753, 0.7371487997903532, 0.6403712642955934, 0.5991189924357847, 0.674233606157164, 0.7197873904821467, 0.7256453305864299, 0.5980084312848122, 0.5804425613610205, 0.6591656800102971, 0.22478714852066572, 0.39228165259837855, 0.4595139174550824, 0.30671936880710604, 0.35128128105782286, 0.6494719905272719, 0.5964053728561409, 0.49897403037930876, 0.24930629687265926, 0.21080849021447956, 0.23022626378137645, 0.21613031868872, 0.2189580545980213, 0.23359381303447413, 0.22661377630130342, 0.20815970331464662, 0.2235754982711493, 0.2241614949477636, 0.19907544327525295, 0.1841940910361367, 0.20725648382779227, 0.19633486427989, 0.23914881116177467, 0.1987278952650008, 0.19553374370824605, 0.18528101554200616, 0.15767330754216013, 0.18872216641619743, 0.153750096372281, 0.9360993863631252, 0.20043478751377808, 0.2008000113344195, 0.14264333075814573, 0.1768351914007873, 0.895908629209965, 0.920536088780617, 0.21198774963264122, 0.12658440903074697, 0.21107593110024503, 0.1682682724198148, 0.1554144844387927, 0.10489508021462246, 0.8921002508347229, 0.8502480200774276, 0.19376185781722188, 0.17699366790063598, 0.1832785333937913, 0.20937327984359644, 0.1922812912151317, 0.20065000161517965, 0.17659910116729693, 0.20617942659828847, 0.18456411635902736, 0.09038938534381558, 0.09340107572899758, 0.08595494454583108, 0.1006036970377161, 0.09241007320276318, 0.09414757287917563, 0.11633312144541574, 0.09738572526588174, 0.09933765709323339]}, "mutation_prompt": null}
{"id": "20283f1e-3c19-4ac9-aa7f-b45cd68a57d5", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10.2 * dim)  # Slightly increased population size\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutation_scaling = np.random.uniform(0.4, 0.6)\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Slightly increase the population size to improve diversity and exploration capabilities.", "configspace": "", "generation": 73, "fitness": 0.5049990427231652, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.50 with standard deviation 0.31.", "error": "", "parent_id": "b179e759-6efa-454d-bab7-c2347b15ab44", "metadata": {"aucs": [0.9245652762476101, 0.9133603925397057, 0.9158403153431997, 0.9153380997494309, 0.9136170491360549, 0.9204016059532738, 0.9256831270950334, 0.9234348451561506, 0.9212805692686992, 0.8074991454046618, 0.8123920259142747, 0.7781067924363663, 0.7959849791650331, 0.7873441741859066, 0.7653231505686791, 0.8248327278432306, 0.7975769781585138, 0.791184289358633, 0.11189649417100411, 0.5737304520502491, 0.1314185149848801, 0.11622785915640177, 0.14828275580654915, 0.11575668390286642, 0.1865992584886702, 0.15866494462580616, 0.18145460156822324, 0.08173542722627447, 0.09108507405132205, 0.17691301159197625, 0.1214684777622479, 0.10737256828199226, 0.1570771695356128, 0.12287625957244674, 0.1468137641591064, 0.13616885795712952, 0.9535609906010767, 0.9549857722829829, 0.9426863383782811, 0.9306394301821833, 0.967088126497768, 0.9392531548055011, 0.9512191177410149, 0.9187289485792729, 0.971570156679648, 0.8177460187101712, 0.8122404311974719, 0.7835751980923017, 0.7897546455656832, 0.8088455464501547, 0.7986895161848703, 0.7961705049916482, 0.783520160939348, 0.8245098026553457, 0.9332989693709393, 0.9140165583650173, 0.39765107923884657, 0.9122515417643167, 0.9217444574617252, 0.21409211962142294, 0.9224044296815501, 0.9198478155574474, 0.9352006792947084, 0.8135650032690542, 0.1291792136851445, 0.5734341226800435, 0.5885480963852862, 0.5931301033463887, 0.7814045747043197, 0.6552511639240667, 0.7402443256623837, 0.6793471949876111, 0.4985888744533612, 0.5178659588206367, 0.7437624244370136, 0.598782280800104, 0.6665861111464766, 0.6888630392879993, 0.4559414820937291, 0.6311257038954832, 0.6212345951038766, 0.35324008814891417, 0.4908026030394833, 0.23362329801411363, 0.42892557022835287, 0.5213069335369127, 0.2221106066789692, 0.21225312120948692, 0.6360106838113442, 0.7389444230399589, 0.805544666736097, 0.8047633651677402, 0.8092440721648761, 0.808317042313607, 0.25973572608886186, 0.34747010861214656, 0.8051021547652912, 0.3687141576950278, 0.8222836580550386, 0.10239186281992674, 0.27267421547925597, 0.36273622552454676, 0.44172387677030034, 0.4221263160249872, 0.3703307526062132, 0.3582471567953073, 0.13604070856024242, 0.2883196559741247, 0.4087348449389345, 0.39651456435734866, 0.6951368477251918, 0.6169767016944427, 0.6369227734292007, 0.605480993705702, 0.48090426281077436, 0.490931202776989, 0.36568071891490594, 0.8708975081291015, 0.8536580326311732, 0.8752194536289599, 0.7965131657190462, 0.8594014104997649, 0.8663030450750192, 0.8476974968204583, 0.816916374841363, 0.8852923940462784, 0.1328227851705206, 0.14107175269227157, 0.13920515145073786, 0.15328346370488577, 0.13749052728154987, 0.1341703437601791, 0.11358523651617092, 0.5656375531374038, 0.11099842322035658, 0.27856770332701974, 0.17502126937705398, 0.19959620995429428, 0.5954097852024256, 0.7273707320772003, 0.3053815989161369, 0.6928713597282137, 0.6184384771086822, 0.585340664813196, 0.75603379260194, 0.7606161918450812, 0.7355512138055428, 0.6411392382341476, 0.5705162831357444, 0.7714970113301678, 0.7660902031001237, 0.5769737292768351, 0.6208685019589733, 0.5624324762271271, 0.39459410582643717, 0.3483567449719913, 0.44085836841092174, 0.24442148179137835, 0.3825988870242475, 0.29391971896301916, 0.48488229102469005, 0.2773331697106183, 0.2380349611480066, 0.23347745488662186, 0.21499275376178728, 0.23885114301702437, 0.198168753438154, 0.24414014165768283, 0.22852066004299554, 0.20765794272099147, 0.23549216454645183, 0.19666153462449543, 0.21955402202329288, 0.19789980016304998, 0.2236267979986606, 0.20693744484488485, 0.22637441034816752, 0.2061451257605369, 0.8254892558413269, 0.197838172234175, 0.18743282924272364, 0.1771197264623925, 0.187841111905651, 0.9517334300531309, 0.9466595372443363, 0.1997979984848154, 0.9095974756321259, 0.11301024516616565, 0.1584108490021494, 0.924306506114092, 0.8995638250853903, 0.0735333280395487, 0.9123916957061993, 0.15482217183308988, 0.1561680182409596, 0.9184679851907028, 0.9012540640142129, 0.939412628269284, 0.179801789602672, 0.1895696797650891, 0.1938600029488442, 0.18231050090679746, 0.1765065937264999, 0.18389838030252426, 0.1784911476036074, 0.20960437797713583, 0.18950200779976445, 0.0925231436467524, 0.08900050356987044, 0.10323170654831537, 0.08905066673557671, 0.09630324312838623, 0.09188052780188705, 0.0859144701273713, 0.08401436750545377, 0.09437936748791487]}, "mutation_prompt": null}
{"id": "1c1b8ff5-d1ec-4d89-b119-bb5bbad6cdb6", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10.2 * dim)  # Slightly increased population size\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutation_scaling = np.random.uniform(0.4, 0.6)\n                mutant = np.clip(a + self.F * (b - c) + (1 - mutation_scaling) * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.75 + 0.25 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Introduce adaptive crossover probability and increase exploration by modifying mutation strategy.", "configspace": "", "generation": 74, "fitness": 0.4840740361436795, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.30.", "error": "", "parent_id": "20283f1e-3c19-4ac9-aa7f-b45cd68a57d5", "metadata": {"aucs": [0.9149630422640709, 0.9110435608317815, 0.9137182249092473, 0.9161694703369907, 0.9118427926927226, 0.9128694885294261, 0.9146997598596243, 0.9066949660063804, 0.9086509940978323, 0.8054971942085061, 0.8033818372289081, 0.7886385664719638, 0.7697714468960292, 0.8204227285443557, 0.76953218728605, 0.7501992626179023, 0.7880704982945681, 0.7928487593095249, 0.18173414409565336, 0.13647846632137173, 0.1726354199592135, 0.12156472230417059, 0.13987689726996955, 0.11533189258072585, 0.11266867673283665, 0.14542281915896205, 0.13149784935147524, 0.09334127881051513, 0.17345584394471625, 0.13481343275520996, 0.10937331778667736, 0.0868310073768509, 0.11291038075876991, 0.12658746986593228, 0.087726764501047, 0.1146400945800613, 0.956773961839906, 0.9852546359043901, 0.9373678197105654, 0.9295141493029696, 0.9539730749143848, 0.9610592467322824, 0.9550868619936544, 0.9296062395117912, 0.9545267198664066, 0.798996940408093, 0.7636493418795345, 0.7753624151129859, 0.7918293366232156, 0.7825597797753011, 0.7774724944202396, 0.7766775241140546, 0.7676784917722967, 0.7649683582116992, 0.912244383432658, 0.8933925081562022, 0.8844807266887746, 0.9008996809294381, 0.9183947200594726, 0.2132782376446426, 0.19827777042612993, 0.9194914644484606, 0.9152273187180202, 0.5931475429444477, 0.6115549377077838, 0.5947660170400959, 0.765430585611303, 0.5716846479996653, 0.5726071368404548, 0.7997331096624949, 0.5725580995731998, 0.5187411442911486, 0.5940009956457737, 0.13480261729730614, 0.5368893139698754, 0.47854146048758417, 0.6881324151215698, 0.6246007835324181, 0.7186143827940568, 0.49447815356679525, 0.13399421251191979, 0.3104537863613299, 0.6473804678939723, 0.5951616017193642, 0.35414408604004644, 0.22910744320994092, 0.41333787160452906, 0.24959576926204485, 0.6702407641192063, 0.6914465192224346, 0.7591632979917353, 0.7468920319693965, 0.7237695448493658, 0.7489097360757044, 0.5947084809977409, 0.7140242701552542, 0.7811593297301368, 0.748740334309187, 0.797053751857216, 0.07042871172475318, 0.07832322676976489, 0.3179293626107115, 0.19355762561747047, 0.2818434255472464, 0.4429775314644031, 0.20193532145902926, 0.18403449245913794, 0.22037773958614215, 0.4982353953042903, 0.5162594181438842, 0.5719468361420085, 0.5947094515124101, 0.45673133137527966, 0.6129392671922944, 0.46561725154127986, 0.41520486364938836, 0.4473017732499208, 0.851273285413593, 0.7963101939779311, 0.813434896234905, 0.8576720349595958, 0.8688871719442108, 0.8559536155484537, 0.8586201207693845, 0.8626601846919905, 0.8481210746205605, 0.13322147496594228, 0.13825279588348127, 0.12401990682959718, 0.16571478397416506, 0.15218873715590742, 0.18224982664053535, 0.13613921941199236, 0.15913354026526028, 0.13197474093164796, 0.5513631493077141, 0.30736036140390754, 0.273802844862405, 0.5105895914486586, 0.6648643208794842, 0.23899537214167532, 0.18432932126388024, 0.4031386133650112, 0.2336730980476499, 0.6965053267270642, 0.3910193811380447, 0.7215495302142401, 0.7126712795740362, 0.729876962931786, 0.6878826703022484, 0.6419992780622179, 0.7479131931244278, 0.5771843109631138, 0.3285800824414322, 0.24893029020635593, 0.6201692689278684, 0.3033955006022031, 0.22303361773785157, 0.35623720944262827, 0.4810150576109228, 0.41920148033288784, 0.6182562693585054, 0.20402465930567282, 0.2096070236719757, 0.22030006745840724, 0.23700632097941765, 0.20815163576416573, 0.21622723427014523, 0.21925227989407048, 0.19788408078407693, 0.22926488002970657, 0.20620453185366228, 0.2207137552768742, 0.22182228656440572, 0.25006465678042766, 0.2073656149104477, 0.21841146791510258, 0.20883724093567146, 0.2255905056661247, 0.202266103374367, 0.18792912511788062, 0.18660252669168031, 0.18772425987919916, 0.16625659764110368, 0.19945363968041008, 0.19976816411296427, 0.9224789906856901, 0.8894350979164963, 0.16303214216760897, 0.919396695726312, 0.2123042717344914, 0.9157095830826523, 0.8896208047888634, 0.1550238648513097, 0.15529998163234904, 0.8476988811512984, 0.9154803147985604, 0.9011221380871661, 0.1762537755240572, 0.18565604308284656, 0.19263054333746465, 0.1876439013860589, 0.1869147990399771, 0.1900816964050689, 0.1775297115604988, 0.1932386948910888, 0.1807813226018843, 0.08962498649711415, 0.11797747861143071, 0.09325397500300292, 0.09232170864762446, 0.0932762239860051, 0.09522847929255751, 0.09264126795267735, 0.12021933676645791, 0.10415232017730158]}, "mutation_prompt": null}
{"id": "52e1686c-59f9-41c5-baba-79de9b5f36be", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10.2 * dim)  # Slightly increased population size\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Adaptive population size scaling\n                dynamic_factor = 1 + np.random.rand() * 0.1 * (evaluations / self.budget)\n                mutant = np.clip(a + self.F * (b - c) + dynamic_factor * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Enhanced local search strategy\n                if np.random.rand() < (0.1 + 0.3 * (np.argsort(scores).tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + 0.07 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Introduce a dynamic population size adjustment and enhanced local search for improved convergence.", "configspace": "", "generation": 75, "fitness": 0.46615210627478815, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.33.", "error": "", "parent_id": "20283f1e-3c19-4ac9-aa7f-b45cd68a57d5", "metadata": {"aucs": [0.9437626273444756, 0.9433642378081825, 0.940198304210847, 0.942319647415483, 0.9447311907571647, 0.9416323787893103, 0.9374048840293057, 0.9377262659964934, 0.9398650175011415, 0.8586656543238655, 0.8503996182447133, 0.8639910606265717, 0.8607061728415585, 0.8609716917147698, 0.8556570542266458, 0.8589853729409264, 0.8507238704523596, 0.8502126896991531, 0.1192516921791501, 0.11186460657525421, 0.12399773534404612, 0.09768720530491903, 0.03732810906849138, 0.11976690695142223, 0.11824752776029912, 0.08539637987394622, 0.11307319053721498, 0.11206777447214877, 0.06639118865716409, 0.09633120110613969, 0.131952706328056, 0.10200996777051785, 0.053997649141154236, 0.14673278448346372, 0.056679614810061896, 0.06437890893311304, 0.9881261677651118, 0.9923542284433611, 0.9924873854670035, 0.984635751045706, 0.9878753119660969, 0.9763017527780852, 0.991474980825643, 0.9922291281921112, 0.991042794181047, 0.8198843028656908, 0.8256133438229566, 0.8099594117079265, 0.8087977829355361, 0.786076455946661, 0.8202013677496978, 0.817192480462428, 0.7850712116466279, 0.8123792658861216, 0.5483213623161767, 0.7464153256985089, 0.1646715871400296, 0.28491854511359105, 0.9340641623189977, 0.1941190141544622, 0.13165031176522501, 0.9390467431659415, 0.22355977995231646, 0.8623149131714225, 0.8017842261090722, 0.8170450972993353, 0.1368937449612012, 0.13597558932443043, 0.7881670495066357, 0.8814486736301699, 0.13657737142344484, 0.803929019250677, 0.8139332214961423, 0.8303960049708052, 0.8345460713045882, 0.8764688730342999, 0.8341221458313449, 0.7944295682116584, 0.8412793463959962, 0.8521549286985252, 0.13594490420302574, 0.5969883529568024, 0.6410373380218566, 0.7075178231856438, 0.43072709813371257, 0.4288668643222885, 0.42505791022827466, 0.7890914539081852, 0.7546562503892058, 0.7607816049655338, 0.8022266408005113, 0.4141652842991692, 0.782294003715306, 0.8546789441664221, 0.6165199203560336, 0.8053367692977186, 0.7603287696425267, 0.8269534632799663, 0.77012528564067, 0.43636121601439926, 0.42833176106059123, 0.30148572503981386, 0.4866053941106355, 0.6430830517123604, 0.49296414383004583, 0.1830451162900144, 0.20734584952697255, 0.154665592576947, 0.5843014544619721, 0.6988782274685175, 0.6222966756278387, 0.6447353560935651, 0.5222017242074298, 0.4252251636225237, 0.4693614594965617, 0.49459429620658213, 0.5921052885647697, 0.9015353977907685, 0.8936446606554869, 0.8958034735561512, 0.9037065613644887, 0.8950227337538881, 0.873061594249081, 0.9048230804101158, 0.8964640924816266, 0.9023694798751604, 0.1125734468389119, 0.09750956268454625, 0.07512932859350874, 0.08364554637843302, 0.11222133340201923, 0.06847393821715742, 0.1257845962221592, 0.08086148828836215, 0.14268704213360073, 0.27634062954136374, 0.19021000359833184, 0.24196588949498754, 0.2682066232777892, 0.3688847235404521, 0.3557142201550578, 0.36634754616837695, 0.33521768494549165, 0.35616977894359436, 0.39768475298717487, 0.24577718813934812, 0.3699029716129689, 0.5164419379870697, 0.4997697364900521, 0.6123107394915754, 0.25349328316305086, 0.49990818642676327, 0.4150262542749923, 0.29015221451288153, 0.27905621768709454, 0.30023028383703054, 0.3022916294889202, 0.1897665871278682, 0.44289762706463, 0.2395190480985474, 0.3457654531194103, 0.3156613141937652, 0.22159673807258828, 0.16919966187319546, 0.2466071648921575, 0.21029360780378104, 0.20527569426966052, 0.2240264304527172, 0.1958628513662236, 0.19830672202323607, 0.20513141462468976, 0.17461762837870998, 0.1985178792452853, 0.21336013354542827, 0.17218420413111146, 0.19813000015619442, 0.1836603643720689, 0.20423889565642572, 0.21162926051645203, 0.17764824100389176, 0.18885834682776637, 0.16747706784594518, 0.1663030222286478, 0.9676744944286835, 0.2012541922354678, 0.20136869614095154, 0.14318667850741096, 0.16567706866568865, 0.16882974754341773, 0.9572510261963615, 0.21416871747398158, 0.07358542794027467, 0.9492013902395696, 0.16933961103368278, 0.16936826984530817, 0.21459407121505136, 0.10510724130665616, 0.09470335081574432, 0.22531924641329681, 0.1915493533260636, 0.18352155501057876, 0.17985851974664402, 0.1920806762729148, 0.18370499276270247, 0.17553167109217016, 0.18438896819705952, 0.1833698769745743, 0.09683210487223082, 0.06106800900356191, 0.07971277140916788, 0.07476194913999656, 0.09115956073426823, 0.0816874244968141, 0.13817609501464945, 0.08148984238562373, 0.09708227778670442]}, "mutation_prompt": null}
{"id": "9c18db07-2507-4025-8e89-ea46b3c0f75b", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10.2 * dim)\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Adaptive mutation factor based on evaluations\n                self.F = 0.4 + 0.5 * (1 - evaluations / self.budget) * np.random.rand()\n\n                # Hybrid mutation with best solution influence\n                mutation_scaling = np.random.uniform(0.3, 0.5)\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Balanced crossover probability\n                self.CR = 0.8 + 0.2 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Improved local search strategy\n                if np.random.rand() < (0.1 + 0.2 * (np.argsort(scores).tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) * 0.9 + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Introduce adaptive learning rates and a more balanced crossover to enhance convergence and exploration.", "configspace": "", "generation": 76, "fitness": 0.4837712974343057, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.29.", "error": "", "parent_id": "20283f1e-3c19-4ac9-aa7f-b45cd68a57d5", "metadata": {"aucs": [0.8730300543025421, 0.867977698944721, 0.8558835216541159, 0.8652521737214772, 0.8729822336712212, 0.8764038149507798, 0.869055569052943, 0.8685297524757272, 0.8711646042365965, 0.7498983200613629, 0.7459753427638602, 0.7243027546041907, 0.7489915237869009, 0.7488980482993429, 0.7391466938348324, 0.7420193634020978, 0.7459297913589777, 0.7428654412991296, 0.1337264607144707, 0.13684100404756194, 0.12511326511578702, 0.16223419690490848, 0.1455946401068139, 0.2622551499166429, 0.12301204932911802, 0.15939290802507988, 0.13558420948398597, 0.13897533637218273, 0.1375715652840077, 0.11809808728897642, 0.13037425912388512, 0.10707514505739346, 0.12907757602552516, 0.1375118129444194, 0.1204130423738019, 0.11845553395000807, 0.9818931393306736, 0.9403950687266192, 0.9541925110297076, 0.9795490284266269, 0.948461339470898, 0.9255964778595029, 0.9482615494775839, 0.965899194275163, 0.9316642035731112, 0.7104672584847298, 0.7033134791925467, 0.6845334090476534, 0.6967458510829132, 0.6818587194157467, 0.7157053020340229, 0.7110185003581917, 0.6914565991613515, 0.707897168020219, 0.8458468893342672, 0.8614607988188185, 0.8431484347500285, 0.9037920907750568, 0.8792418258862224, 0.8737234008230964, 0.8732964310790542, 0.8943269362777003, 0.865408494682724, 0.6915706773596397, 0.546141965311671, 0.5447413816159898, 0.5571930960835352, 0.584834324770037, 0.5603403230169086, 0.43363476706378046, 0.13345368280664638, 0.6185254441381796, 0.5479163595491134, 0.5922725977638427, 0.46833787653515124, 0.4902006330337494, 0.4638666638043756, 0.13127022530387655, 0.5073832019541307, 0.5054029149190054, 0.543192485233251, 0.5982655732568289, 0.6062531286751877, 0.6295319171052388, 0.5237612295413063, 0.6250550930959557, 0.626980239803844, 0.6002219837472766, 0.6196162161836631, 0.6020646832557444, 0.7315504634048255, 0.7141391840264716, 0.7007787823865157, 0.7062792319603, 0.6327499940632292, 0.6934190437801233, 0.7338037799893893, 0.6954166579826063, 0.6929172778239885, 0.19637859262228063, 0.1056442191139424, 0.21805662335427378, 0.3573914858735021, 0.5610758500863574, 0.530821387515741, 0.1995716311289294, 0.22741509940890214, 0.3301963518322333, 0.5187970927340688, 0.5454021532801048, 0.5384282015997077, 0.5222477326374575, 0.5611803756338651, 0.5334808378177986, 0.5595376551835838, 0.4897509061026515, 0.44581828501756615, 0.8143941999263403, 0.8164328227659353, 0.8082707227950541, 0.8143041513512546, 0.8061676803039993, 0.8064963764774064, 0.8099205126954396, 0.8002507680316834, 0.8173116267311501, 0.11550583980903228, 0.1815830049703101, 0.1170201627597044, 0.4687590029918669, 0.10969542423744938, 0.1281573813816309, 0.19078009137301855, 0.14532876630306069, 0.10174040470242285, 0.15159982502027436, 0.14850090558044327, 0.14211599159625343, 0.14129566553948603, 0.14065894843014215, 0.13466771969338953, 0.14386203979480439, 0.13634803458425881, 0.22371987296278706, 0.627126056253619, 0.602743843027362, 0.6280722008118174, 0.601830193388611, 0.6025447678527209, 0.6308828242191367, 0.6446021919857077, 0.6436870240540402, 0.6509253572530079, 0.49393484108038943, 0.4711020935279595, 0.5121890113655236, 0.5610330313912442, 0.4990985125407048, 0.47777748058045943, 0.5420724831818207, 0.5072536768445536, 0.512042275047669, 0.19755112861949942, 0.21430185123724022, 0.21768747705980873, 0.20718825565863785, 0.22588122206816375, 0.2124368929892344, 0.2222511637637985, 0.24780292378876456, 0.2276097144450241, 0.6014322906983609, 0.23924679909543267, 0.20039027954044308, 0.6355658244717939, 0.4358457124695473, 0.214062205433596, 0.2375902966768223, 0.2287728871157626, 0.22757734306479427, 0.8724675511923854, 0.8891342027756954, 0.18559630824017037, 0.8900785745607906, 0.19603675986780333, 0.8825430000722264, 0.14824457619693454, 0.16101848152749276, 0.8959592278974681, 0.8941148207941758, 0.16647237179452512, 0.16726939158556675, 0.2096544634133597, 0.1669414577114089, 0.7435683965325063, 0.21180981102777263, 0.8122811405623936, 0.2013924063300463, 0.1918518328380866, 0.1871154229818155, 0.1790177350538512, 0.18889213121124437, 0.19527736408821406, 0.2137196862113765, 0.17447307647416144, 0.17698646890879066, 0.1906022391860307, 0.09981409626654791, 0.08765659685711669, 0.09128248221932411, 0.08926593279123918, 0.10549173460766126, 0.10132438465271532, 0.08939922031570913, 0.08952905869875283, 0.08827313778504486]}, "mutation_prompt": null}
{"id": "5d827067-8189-439f-a2a3-d9099c6d35c7", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10.2 * dim)  # Slightly increased population size\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutation_scaling = np.random.uniform(0.4, 0.6)\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.80 + 0.20 * np.random.rand()  # Increased range for CR\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Increase crossover probability range to enhance exploration and increase diversity.", "configspace": "", "generation": 77, "fitness": 0.4955492818322036, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.50 with standard deviation 0.30.", "error": "", "parent_id": "20283f1e-3c19-4ac9-aa7f-b45cd68a57d5", "metadata": {"aucs": [0.9193364276336802, 0.9122135780587537, 0.9132100864199019, 0.9121767167086142, 0.9142184015091476, 0.9189584402309989, 0.9168222086778408, 0.9116020594770933, 0.9174179710764994, 0.8258909230630356, 0.7965764626453667, 0.8112813733933131, 0.7931461925308758, 0.792849906326122, 0.7910857253509531, 0.814821623611061, 0.7561319741286792, 0.7666281839435151, 0.131695393718533, 0.14001896154249005, 0.14308334658916277, 0.587068608696009, 0.14990016105158444, 0.6806158621568689, 0.12735266340538887, 0.636839621887825, 0.17103139551612645, 0.14919351683023285, 0.11322963813530551, 0.12254984097445865, 0.11171760375012985, 0.11596851508167638, 0.12823107772853015, 0.13826917539469263, 0.12098079545502971, 0.10816759679995869, 0.9097707931223531, 0.9456484787555554, 0.9297040046646036, 0.9511448836640581, 0.9580060906400718, 0.9605065202266073, 0.946494445256452, 0.9522297293152021, 0.9522301116381897, 0.8003198554164914, 0.7707323484056292, 0.7893799798815562, 0.7867120517345508, 0.7932877636696692, 0.789638227844903, 0.7947338961292414, 0.7911839441374133, 0.8069672239131359, 0.22958748660663464, 0.9186837897069359, 0.9200399630183105, 0.22158069865205443, 0.9304307989425696, 0.9095547524739704, 0.2862260729524946, 0.9088437223266246, 0.8503888175316235, 0.6037639125774034, 0.6022706418989541, 0.6080870718001335, 0.6761939805447562, 0.7412417046268053, 0.13386236543680918, 0.48017884321833215, 0.6195547298989152, 0.5181152437702172, 0.13580523431502511, 0.13477228338785208, 0.5605649440265787, 0.555757543412831, 0.13419262268609633, 0.5835970178766239, 0.5294085096827355, 0.598437551901577, 0.6365843076126605, 0.22191312039227185, 0.6923382835543936, 0.09826130827472246, 0.3751172123836153, 0.7491272063149566, 0.31654826537062497, 0.1940883089858736, 0.7014042716054343, 0.6789410626748738, 0.6546397889824218, 0.7689098140021313, 0.784413931646664, 0.7398766654677169, 0.6811725853598305, 0.4159151626826326, 0.787448667860247, 0.7876120262543871, 0.8220624048430654, 0.3320547937820284, 0.31824740907365523, 0.23918511082696226, 0.3128129026636368, 0.5258903587308598, 0.6412794683375347, 0.49514109571112186, 0.12532981660000064, 0.31673750964526626, 0.398961832223626, 0.42970150456929856, 0.6405384123897551, 0.6206917838542167, 0.6474747659060858, 0.6198759759481764, 0.4482599909344157, 0.5400842970676137, 0.5683852611562934, 0.8749953701445854, 0.8686324491157443, 0.8497891153488764, 0.8101815651834583, 0.8590502180814568, 0.8743904931418282, 0.8577380413004767, 0.8579998627475409, 0.8687319300991281, 0.12421728596246062, 0.13442782151472188, 0.12059585205472101, 0.11261010514598291, 0.10688123211860656, 0.15075997322943568, 0.17665213760984266, 0.13385882159559637, 0.1366542459391361, 0.24116360765565692, 0.3204408207364724, 0.3468432559867103, 0.4339676209167498, 0.3034190337006495, 0.6889077593220221, 0.5863752100032569, 0.28941127376830067, 0.14477082762762894, 0.5833927152774464, 0.611038813463513, 0.7000063365388691, 0.7556163062021307, 0.6870450090783418, 0.7473714613688872, 0.753543766594815, 0.4685141481845063, 0.46107904048977066, 0.6028920193441778, 0.46869409348650004, 0.6394209203582748, 0.6198014821347815, 0.24028266166184686, 0.28505451728386355, 0.22822589219041423, 0.41415671816180966, 0.6805221063328555, 0.21567416380399873, 0.23610740449948275, 0.22709223770556808, 0.2366499930102235, 0.193968845431299, 0.2502971884941657, 0.23039580655862024, 0.20670195901753774, 0.22151459267820406, 0.21985508992751912, 0.2448181857603854, 0.211318939075538, 0.2513593769564375, 0.18765649676920482, 0.19175409354779238, 0.20327427857519198, 0.2218328329826763, 0.20554882361391258, 0.18699974626357918, 0.17682724338977673, 0.18780072473194886, 0.9323006706132618, 0.9289148397020562, 0.19956889207271167, 0.17617867712548052, 0.9252829178883543, 0.16687258119163528, 0.9182232397302882, 0.8763608077336287, 0.07353294457111748, 0.8957272889840855, 0.1668203877023403, 0.1686261196922938, 0.898457370875097, 0.9148701686033666, 0.9198855279751361, 0.18136727137769582, 0.17718746984303002, 0.1796474270344448, 0.17887479104537618, 0.19932212322216414, 0.1737498768121979, 0.2080566777846281, 0.177786785128625, 0.17865603995591373, 0.09080549368420177, 0.09193474190888373, 0.09036910841682566, 0.09151319319002182, 0.09328273472203219, 0.09849612248432549, 0.13264648135956958, 0.09182505805805374, 0.10678971939315884]}, "mutation_prompt": null}
{"id": "9d346aa6-0813-4baa-8a5a-f5a10f72f04c", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10.2 * dim)  # Slightly increased population size\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutation_scaling = np.random.uniform(0.4, 0.6)\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.25)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Modify the strategy for selecting top performing individuals to increase local exploitation efficiency.", "configspace": "", "generation": 78, "fitness": 0.49754702589143773, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.50 with standard deviation 0.31.", "error": "", "parent_id": "20283f1e-3c19-4ac9-aa7f-b45cd68a57d5", "metadata": {"aucs": [0.9269318924143723, 0.9139900012349947, 0.9235523156456019, 0.9184469106395639, 0.9137259023400115, 0.9168370216085633, 0.925715275445519, 0.914830227544675, 0.9291525010201998, 0.7905373788225252, 0.8183306185068161, 0.7641590088718622, 0.804893382707397, 0.8172443238078645, 0.799262453118422, 0.7790024605257763, 0.7646581408726407, 0.7619648761078996, 0.11683401921619374, 0.16020032046635913, 0.16656787591013034, 0.154224638065927, 0.1421169265777842, 0.1709111396416252, 0.16168981821049178, 0.6381125144527146, 0.1719736288078224, 0.1341049690387095, 0.11980787397746229, 0.11973757884580061, 0.12056956783092154, 0.1385747797969128, 0.13516331816693417, 0.09605291051384934, 0.12598626905184063, 0.09735605695107719, 0.9543470939696911, 0.9508725249136852, 0.9398789902312016, 0.9418782755121612, 0.96707301981542, 0.962116170444924, 0.9415523302741128, 0.9458229202303249, 0.9715495885708101, 0.8177956278973979, 0.8085825152193357, 0.794748706087304, 0.8183215905206462, 0.7834747560616598, 0.8021207263122732, 0.8093983967914331, 0.8156526709366032, 0.8011741450341668, 0.22894942813881547, 0.9300907452984065, 0.9223264463840215, 0.21394412118798922, 0.3846650729681178, 0.21279899131473834, 0.9358612526023528, 0.8731885336986033, 0.9236846605294599, 0.6722209428137469, 0.1285438368046523, 0.6826294156334207, 0.7108272775753088, 0.6564050168397035, 0.6983251769933877, 0.6921736368143738, 0.7512318977447915, 0.578068145797289, 0.6677857053661027, 0.7077738285741793, 0.7374138636122742, 0.690419167892576, 0.6275096557791628, 0.6990707595104843, 0.7561227409305665, 0.6736536256762249, 0.6434490540205771, 0.15918214101498585, 0.7618085489295909, 0.17617517206851385, 0.1672606934912919, 0.6783826453125201, 0.40424846201547315, 0.7075260056268355, 0.1266450697751227, 0.6912805010629864, 0.8231889485900648, 0.27635740397124153, 0.7836233361268495, 0.8029046589285935, 0.5806657648670177, 0.6368678873494718, 0.8182041442826434, 0.8008690755030541, 0.7833939752691443, 0.4045328169977599, 0.15952899680789956, 0.3017636915754215, 0.5394533152757968, 0.4123725772557254, 0.2221104774825431, 0.1482824350414954, 0.15192395560435956, 0.3367145810239722, 0.7188556327322841, 0.39574183847988487, 0.5422379250247071, 0.5560440847886896, 0.6479658286261328, 0.5927028528713917, 0.6791293171223312, 0.64916922125904, 0.6092876750419249, 0.8656553633522568, 0.682963783126877, 0.7665225123283868, 0.8778558437692321, 0.8306740603504541, 0.8669991052829784, 0.8587215919037545, 0.8545229211421869, 0.8133050687420624, 0.13554321092871124, 0.09694529272709429, 0.138253707762092, 0.15728297926823254, 0.10792968517055412, 0.1292366668519942, 0.3380780977775961, 0.14055578651560585, 0.10793935265807053, 0.596037673854914, 0.5669045371999755, 0.6593850855871783, 0.6121053236214298, 0.19112720166309616, 0.26963535183476905, 0.3274769488097572, 0.1795481507603678, 0.5774434681108738, 0.269824346223946, 0.6286844701411942, 0.6038172238952888, 0.6480365526141484, 0.6989563341126366, 0.7513314423178111, 0.5976877392906419, 0.593155207361604, 0.5442551185698494, 0.27799326650690204, 0.347225959572136, 0.39858641076492296, 0.32815639278623054, 0.23888148760304062, 0.704928700709377, 0.41341043215913753, 0.5011101862117586, 0.24799598859412775, 0.2238110219602748, 0.22740639256722417, 0.20838903997882074, 0.23043851898225376, 0.22189373992174666, 0.19399363827846106, 0.21658382770623652, 0.20735240091229967, 0.23506693507524612, 0.18843625759735128, 0.2097805811610115, 0.20602040192277682, 0.19985454092192634, 0.20820805628566164, 0.20986987249119937, 0.2030571403638115, 0.2118708923283632, 0.208530484532093, 0.18782888439176237, 0.17745213675396576, 0.18766831270148443, 0.9399951523328349, 0.9448945970147042, 0.20036075010490817, 0.9156464769335759, 0.1643741488424424, 0.15839438158301766, 0.913941066687573, 0.9044366601671747, 0.07353317491355849, 0.9228873493903105, 0.15609228671151265, 0.15628295549612015, 0.9094730404621159, 0.925578268120051, 0.9311079602356861, 0.22284231436846536, 0.17599391895937155, 0.19515952745145004, 0.1722084517685778, 0.19873269794865023, 0.18423059765560768, 0.19261311868195796, 0.17943472256142945, 0.1775153946811706, 0.07707514980103447, 0.08908890652731627, 0.09849535582016855, 0.0938386210530966, 0.08963846105308837, 0.08172135359233457, 0.08768534566798225, 0.08821647413581268, 0.11735620117973489]}, "mutation_prompt": null}
{"id": "96bb0ce4-f8d7-4f10-a906-b973ab77bcfa", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10.2 * dim)  # Slightly increased population size\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutation_scaling = np.random.uniform(0.5, 0.7)  # Changed line: adjusted mutation_scaling range\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Enhance convergence by slightly altering the mutation scaling factor range in the differential evolution strategy.", "configspace": "", "generation": 79, "fitness": 0.47492160898264557, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.32.", "error": "", "parent_id": "20283f1e-3c19-4ac9-aa7f-b45cd68a57d5", "metadata": {"aucs": [0.9278928129977694, 0.9282305120868519, 0.9270972719331935, 0.9310969390000953, 0.9304938202953953, 0.9260290315348431, 0.9251998694695758, 0.9298076453447943, 0.9299219128976869, 0.835782161776321, 0.816884755538788, 0.8357494064496322, 0.8102318102692403, 0.8456650179473475, 0.8275138718966327, 0.8083611296513621, 0.8197861793940949, 0.8008329613288462, 0.17506422682959544, 0.1521197005571876, 0.15870506459459544, 0.15882448674633365, 0.14570121599608699, 0.16113146770696274, 0.1154628822062026, 0.10750913617596469, 0.11486845159828385, 0.12122868403884768, 0.12377514270475554, 0.09301435806686953, 0.10466483005892657, 0.09722851393328324, 0.10691477296570762, 0.12290036214967603, 0.11492739803902319, 0.13194898024118284, 0.9566995127754635, 0.9752577719724617, 0.9265388520586353, 0.9573325543984902, 0.9759086639962664, 0.9555680653914936, 0.9585718798032626, 0.9703825211210858, 0.9769198147790628, 0.8206582130877041, 0.8058926935511144, 0.8166325685737429, 0.8230410977565722, 0.812561824150547, 0.8273282496910725, 0.8387844574984408, 0.7994964266522534, 0.8308633855112579, 0.23050330261961804, 0.23043000523563562, 0.2299136582699851, 0.9309356248724974, 0.9547087145885444, 0.22094494154813893, 0.23636274417906578, 0.23753837851609538, 0.9369036024472914, 0.8381522084638477, 0.8012773363749823, 0.7045938314857734, 0.5924964450638555, 0.700195306199722, 0.5655568831033801, 0.7474422893174532, 0.6232104857770142, 0.689219279099623, 0.8101714790356572, 0.6653303237183801, 0.7890788485127993, 0.6631981786635612, 0.6139222384347216, 0.13595800148456982, 0.6629187270013108, 0.7071388534982109, 0.8153450217175515, 0.13251664786278983, 0.2444487393872561, 0.089508134079191, 0.2898503525782389, 0.27382861660783997, 0.4949611897346129, 0.5466967941391705, 0.37900546708765404, 0.6564165605897073, 0.7558292182505044, 0.2075516765144556, 0.8548523611642211, 0.20878867653235045, 0.19080364537383931, 0.7764304820042869, 0.8062156491329453, 0.812180488669613, 0.8285042976005985, 0.14514125755641527, 0.08800638807511696, 0.12764888818181064, 0.3216955753624319, 0.5681317313545262, 0.20391060602189082, 0.41375768390643575, 0.13331175840374165, 0.11471223246616158, 0.5804346047336058, 0.4128127525195636, 0.5010128048797743, 0.6088185770302943, 0.6720948754403976, 0.5329316747644225, 0.5758540625221618, 0.47105122777600494, 0.3826272318582995, 0.7204436458995286, 0.8753358487080103, 0.879975374549027, 0.8097849259635691, 0.8776999970294381, 0.8877270059174627, 0.7656518374947445, 0.8795423267872661, 0.8811961954790137, 0.11707684367199578, 0.1104647125249465, 0.11746008384567452, 0.1586415858377619, 0.09016192333184514, 0.159403949670466, 0.08425917384486148, 0.15069530209836357, 0.12725447394715617, 0.7243645357097164, 0.13545072263707025, 0.6196463861970161, 0.7666225397851087, 0.19363777136300275, 0.25032671410443696, 0.7061304611861907, 0.6139420620533048, 0.6838686772281719, 0.3342592311839687, 0.3547518663425112, 0.5246108620584972, 0.7803859328972017, 0.5678814900836342, 0.3044160222938602, 0.7942409174783382, 0.38019979621524713, 0.3580921827376373, 0.2282908103003931, 0.24504775684303015, 0.5953180970107687, 0.32719024019789256, 0.41620095920179023, 0.5674611480897336, 0.21988257252409815, 0.5740713082825748, 0.2886823097750618, 0.22245788664751565, 0.22376784598275923, 0.20723059260644472, 0.2218980978298839, 0.2128178534524875, 0.2119553654820152, 0.2496967788933374, 0.22307063566517105, 0.2046448801961308, 0.20978328419660908, 0.19314207851330778, 0.22546316741970318, 0.1752706352870691, 0.21149786639186985, 0.22427241298976264, 0.20980210083230855, 0.20429770190885388, 0.2225304217007068, 0.9557660174246896, 0.16973646435214929, 0.18739511096327355, 0.954159420339121, 0.20070929686796912, 0.2005017397145743, 0.9364357083826969, 0.16591623215970408, 0.9490204073526674, 0.9353164988056754, 0.21344846474234513, 0.07356950855008815, 0.16928952731383928, 0.9122992606462773, 0.156457119395773, 0.10487570148878655, 0.9336240232867257, 0.930328771081204, 0.1778160273558782, 0.1963802488502886, 0.18692302221331825, 0.19807269797138893, 0.17826757151368933, 0.19320758432019147, 0.17638062545987432, 0.19132013062031217, 0.19093428090560105, 0.09282639933721581, 0.08467195706999542, 0.07858008819797924, 0.09180918983468656, 0.0925459868271511, 0.09244310563420555, 0.09147115463283773, 0.09382522456446074, 0.09859980911500221]}, "mutation_prompt": null}
{"id": "4f775f07-c5a1-4bed-a7e3-9ee76bbc795e", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10.2 * dim)  # Slightly increased population size\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Dynamic mutation scaling\n                mutation_scaling = np.random.uniform(0.3, 0.7)\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Introduce a dynamic adaptation of the mutation scaling factor to balance exploration and exploitation.", "configspace": "", "generation": 80, "fitness": 0.488072118262459, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.49 with standard deviation 0.31.", "error": "", "parent_id": "20283f1e-3c19-4ac9-aa7f-b45cd68a57d5", "metadata": {"aucs": [0.9241995700916938, 0.9146869711602663, 0.9176242104553796, 0.9145435079407395, 0.9183681764779437, 0.9190162716859814, 0.919656066866773, 0.922598758962585, 0.9204452009745604, 0.8301578289178004, 0.8191440863358086, 0.7874707412446853, 0.7999088741553165, 0.8159044421304549, 0.8048399326384982, 0.8096600721117289, 0.72850500171707, 0.6969478116615861, 0.1267263121751797, 0.1780554616656933, 0.12889752657148712, 0.11716627081901665, 0.17002589728032358, 0.16961629078176843, 0.1427261339822804, 0.722895367282967, 0.573100715852483, 0.10430017540040937, 0.1247468332220405, 0.11054744767511981, 0.10847028611826914, 0.10635247209292176, 0.12159711129209005, 0.12387074123936415, 0.11407978864095458, 0.08536624239298019, 0.9471463137521196, 0.9686984475672308, 0.9638910355994148, 0.9445012391550615, 0.9488424755489682, 0.9367986817504759, 0.9678731902549806, 0.9309081631660919, 0.9468387667765022, 0.8189722694000665, 0.7816503873355733, 0.7800093417864221, 0.7941918832810102, 0.7937097812995451, 0.7844250149477485, 0.810881716171488, 0.7953516691321529, 0.8092266253225583, 0.37957741557197855, 0.922850796607822, 0.9196402666883208, 0.9330578579208865, 0.9503478708559194, 0.2827667847193359, 0.921182770389477, 0.9169083836437009, 0.22139756005792466, 0.13537844498403262, 0.13381684906523228, 0.5482247068126811, 0.7270668793704276, 0.581052750647937, 0.6410912393569919, 0.5848281542792424, 0.808499753213313, 0.636558386456995, 0.621192987342524, 0.7328531335053075, 0.4628092581204656, 0.6547081136126272, 0.6048071923517102, 0.6636190246060625, 0.13493827642771705, 0.5706546968505242, 0.6701525149897085, 0.7083203478510613, 0.7108257844397998, 0.13218267237595516, 0.741082066404052, 0.7333000680853532, 0.04847006292034717, 0.23338393348236486, 0.6731827399481614, 0.38618067366627673, 0.6432563193167606, 0.7982346729143767, 0.7725183555030739, 0.8078470211105794, 0.34965318989529537, 0.6028662843428194, 0.31690394280701006, 0.6329985061062919, 0.5813779009897891, 0.07785113552784184, 0.1748076311530895, 0.32572867508931946, 0.21588360742968915, 0.49662325968855725, 0.5433160461585378, 0.13775035345190823, 0.1619733128757116, 0.21954825940728784, 0.6727424151002628, 0.615795495033501, 0.43122800426881436, 0.7075783693624251, 0.6466196364506631, 0.5641906394742731, 0.42863038327194125, 0.5535599003895225, 0.504242801553838, 0.7512904019275015, 0.8611170901945615, 0.881213213115585, 0.8859587367962855, 0.8733851744849, 0.8648391814277964, 0.8841236318081248, 0.8847213232073505, 0.8066131233794377, 0.10470894478240278, 0.15126760461398203, 0.10599866076796405, 0.13002051952554317, 0.1315236298349035, 0.14039953390049065, 0.12179123362069932, 0.10400708901325817, 0.10652259492312877, 0.33959832145629276, 0.7334276203223912, 0.32112117781279137, 0.44658219088402684, 0.5523463655915124, 0.3299551022883992, 0.7721852064841326, 0.28801483287117635, 0.29185973169908574, 0.625144955149119, 0.7393839572743683, 0.7784312531489024, 0.7259419729415988, 0.7766056742175067, 0.6145400022593441, 0.7449635085162649, 0.4657466777436493, 0.5799320486401114, 0.33237032103900055, 0.24019041948367725, 0.4812616545384897, 0.5762975129418126, 0.22460368688353138, 0.4560501191950822, 0.3247526042644924, 0.7228390313569455, 0.575200501103372, 0.23991020336294522, 0.20661443980988314, 0.2559086174980979, 0.20548657434580286, 0.23850202249582164, 0.23681018666725517, 0.2053451234198712, 0.2401725479051543, 0.21919341852283747, 0.22342406726145458, 0.20873334105881192, 0.2123821443784868, 0.2099039462989276, 0.18944443990931903, 0.2016605633967833, 0.49481925316474085, 0.18854479771143196, 0.19204895286148993, 0.18792324493706147, 0.1866533958749701, 0.18811281520366274, 0.9472875249325226, 0.201680222905669, 0.19996194820388413, 0.931388419914346, 0.16707336001951556, 0.16635527927195348, 0.9318094457894197, 0.21276169315278692, 0.07354228482234682, 0.9219670329295847, 0.2108481830606157, 0.21245853217407162, 0.16718924485349596, 0.9237698762329388, 0.8982725752423842, 0.18612413396004157, 0.20038151334053356, 0.17823223256300602, 0.18950321506412116, 0.18579800601219376, 0.17762891961992933, 0.18415981439706297, 0.1863526381208741, 0.19837255821403732, 0.10239960744939347, 0.09122880068631622, 0.11545848239186329, 0.08061633943524171, 0.09399239808631388, 0.0931416790841808, 0.09203113478801883, 0.09653506354536423, 0.09804101235427165]}, "mutation_prompt": null}
{"id": "817b4ebb-000c-4524-a7aa-664a4855eecd", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10.2 * dim)  # Slightly increased population size\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutation_scaling = np.random.uniform(0.45, 0.65)  # Changed line\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Slightly increase the mutation scaling range for enhanced exploration of the search space.", "configspace": "", "generation": 81, "fitness": 0.4890246574335788, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.49 with standard deviation 0.32.", "error": "", "parent_id": "20283f1e-3c19-4ac9-aa7f-b45cd68a57d5", "metadata": {"aucs": [0.9244152999448956, 0.9196483165883691, 0.9276810720307548, 0.9313300109686594, 0.9270139178988068, 0.9228064318444965, 0.9258838752337493, 0.9183456205493489, 0.9270104821991887, 0.8406107572400522, 0.7927044250710212, 0.8304963853911966, 0.7885820610610547, 0.8104577634350311, 0.8138248671398847, 0.7938749360097208, 0.7799832280065607, 0.8317461885903383, 0.15606486044844292, 0.12087661449884202, 0.13365353450381823, 0.1227266542256692, 0.1445714584081934, 0.15901334988559013, 0.16943857445163668, 0.1422308004631777, 0.7675226805431122, 0.09619832728739597, 0.10922959901310547, 0.13883681142977133, 0.0954064377422037, 0.09495562398535262, 0.12966145069594326, 0.09137427388171049, 0.1088976401192272, 0.07871784198491172, 0.9122261566208498, 0.9548615269672386, 0.9639981901757193, 0.9542535470995206, 0.9461103240843712, 0.9372391024011582, 0.9578644919576476, 0.9489958586147677, 0.9813710568185656, 0.8228112952649974, 0.8077181006419311, 0.7849292051252235, 0.821951978288704, 0.8062329840226838, 0.8114634020026068, 0.8411335600662014, 0.8052891379224024, 0.8355795903434919, 0.9041827293678061, 0.9150709190756879, 0.9346991073811718, 0.935355429523259, 0.942529643147369, 0.927292441003023, 0.23681377269647774, 0.2375963117008809, 0.9279679774090145, 0.5403854115651325, 0.6425899986896355, 0.6215235671680344, 0.6900690048305189, 0.5785002002948196, 0.6770365353333794, 0.6748588673457443, 0.6251504315950376, 0.5739062697286601, 0.5722471194119483, 0.1344145320053869, 0.7206337905707101, 0.6604049717234008, 0.682668639619544, 0.13595255379388926, 0.6071960342290328, 0.6663760852014716, 0.687176140039754, 0.13881091020310776, 0.4525874695518295, 0.2457561376620827, 0.2827067869315848, 0.6892439411637836, 0.30233562509759415, 0.6818972949544011, 0.6561069511443487, 0.40107514117480036, 0.7842535896341003, 0.8032954200678079, 0.8061811983596174, 0.6719603305904467, 0.7183377214022353, 0.8104986464782513, 0.8346411355569165, 0.8080937593258841, 0.8340663932286505, 0.0996152347816418, 0.08426156532188112, 0.15826689769033853, 0.3455897997611037, 0.33052501209063867, 0.14773334197745625, 0.2885252227195466, 0.14935707187005864, 0.4650252800552612, 0.4710148918963962, 0.35470143819880884, 0.4961594655738508, 0.5009393798734183, 0.3317147834991768, 0.6709049347214724, 0.336642305799966, 0.6224853031988326, 0.6196762151044273, 0.8872516464643347, 0.8210486926997833, 0.8764920726638492, 0.895134114433282, 0.8725133368165335, 0.8921442097111714, 0.8940311807502921, 0.8796908724708024, 0.8656883958767452, 0.11730275159805847, 0.11567143317047501, 0.13895231088018845, 0.1363089453565608, 0.12133167498128405, 0.1590031034478847, 0.12255183014028825, 0.12945397261196445, 0.09532438782515906, 0.20245379270415442, 0.35310287504451754, 0.40473463943158117, 0.7674102990009255, 0.3718342703893234, 0.7047495021794984, 0.6021747116562746, 0.36847623673855656, 0.6178383851504188, 0.37759725309177994, 0.32824612670110453, 0.33108991457218606, 0.6259716305401082, 0.788590355410863, 0.7743507994405133, 0.6025867943834053, 0.6150101099001402, 0.7864216931571884, 0.47968837221866034, 0.3231328842938789, 0.4218314637801154, 0.4757094624226893, 0.2940904399272194, 0.36036099905879304, 0.24707576068906578, 0.35248387577922013, 0.2550300282457446, 0.20266923619120758, 0.23406505468272376, 0.21293733566061268, 0.23106948479931577, 0.23785695749672364, 0.21561984253177136, 0.2264362379586654, 0.20299300839072132, 0.22825311347907384, 0.18574959735448782, 0.1987465992499421, 0.19218127314605382, 0.20835107336208158, 0.21115982269008937, 0.19090288988600768, 0.18739514464597262, 0.20818045465235846, 0.18984268003576743, 0.165632536635681, 0.18765742546461428, 0.168415292304677, 0.9497927574113587, 0.9380925198341549, 0.20040159985130768, 0.14253048980944583, 0.16239230735894583, 0.9397179426234598, 0.9299190633635193, 0.21337843077388885, 0.07354910277545945, 0.9262505558630986, 0.1559376152700257, 0.15548772041036996, 0.8908504023575307, 0.12790726343981806, 0.9297288575731814, 0.19160449384325295, 0.1815854335692888, 0.183227981490102, 0.17727032205225135, 0.17962886548405255, 0.20546102141093303, 0.19525646907488625, 0.18166153612294078, 0.18813502661544113, 0.10813656562932594, 0.08485216361321712, 0.11959063974298478, 0.08099319975757968, 0.09020633330687544, 0.08774172420168247, 0.09418311411831326, 0.0952830707709269, 0.10311198540644562]}, "mutation_prompt": null}
{"id": "3a82f780-ae96-4c8a-ac0c-1a777394a8d0", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10.2 * dim)  # Slightly increased population size\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor\n                self.F = 0.3 + 0.4 * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutation_scaling = np.random.uniform(0.5, 0.7)  # Changed the range\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Introduce a small exploration boost by adjusting the mutation scaling randomly within a given range.", "configspace": "", "generation": 82, "fitness": 0.47492160898264557, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.32.", "error": "", "parent_id": "20283f1e-3c19-4ac9-aa7f-b45cd68a57d5", "metadata": {"aucs": [0.9278928129977694, 0.9282305120868519, 0.9270972719331935, 0.9310969390000953, 0.9304938202953953, 0.9260290315348431, 0.9251998694695758, 0.9298076453447943, 0.9299219128976869, 0.835782161776321, 0.816884755538788, 0.8357494064496322, 0.8102318102692403, 0.8456650179473475, 0.8275138718966327, 0.8083611296513621, 0.8197861793940949, 0.8008329613288462, 0.17506422682959544, 0.1521197005571876, 0.15870506459459544, 0.15882448674633365, 0.14570121599608699, 0.16113146770696274, 0.1154628822062026, 0.10750913617596469, 0.11486845159828385, 0.12122868403884768, 0.12377514270475554, 0.09301435806686953, 0.10466483005892657, 0.09722851393328324, 0.10691477296570762, 0.12290036214967603, 0.11492739803902319, 0.13194898024118284, 0.9566995127754635, 0.9752577719724617, 0.9265388520586353, 0.9573325543984902, 0.9759086639962664, 0.9555680653914936, 0.9585718798032626, 0.9703825211210858, 0.9769198147790628, 0.8206582130877041, 0.8058926935511144, 0.8166325685737429, 0.8230410977565722, 0.812561824150547, 0.8273282496910725, 0.8387844574984408, 0.7994964266522534, 0.8308633855112579, 0.23050330261961804, 0.23043000523563562, 0.2299136582699851, 0.9309356248724974, 0.9547087145885444, 0.22094494154813893, 0.23636274417906578, 0.23753837851609538, 0.9369036024472914, 0.8381522084638477, 0.8012773363749823, 0.7045938314857734, 0.5924964450638555, 0.700195306199722, 0.5655568831033801, 0.7474422893174532, 0.6232104857770142, 0.689219279099623, 0.8101714790356572, 0.6653303237183801, 0.7890788485127993, 0.6631981786635612, 0.6139222384347216, 0.13595800148456982, 0.6629187270013108, 0.7071388534982109, 0.8153450217175515, 0.13251664786278983, 0.2444487393872561, 0.089508134079191, 0.2898503525782389, 0.27382861660783997, 0.4949611897346129, 0.5466967941391705, 0.37900546708765404, 0.6564165605897073, 0.7558292182505044, 0.2075516765144556, 0.8548523611642211, 0.20878867653235045, 0.19080364537383931, 0.7764304820042869, 0.8062156491329453, 0.812180488669613, 0.8285042976005985, 0.14514125755641527, 0.08800638807511696, 0.12764888818181064, 0.3216955753624319, 0.5681317313545262, 0.20391060602189082, 0.41375768390643575, 0.13331175840374165, 0.11471223246616158, 0.5804346047336058, 0.4128127525195636, 0.5010128048797743, 0.6088185770302943, 0.6720948754403976, 0.5329316747644225, 0.5758540625221618, 0.47105122777600494, 0.3826272318582995, 0.7204436458995286, 0.8753358487080103, 0.879975374549027, 0.8097849259635691, 0.8776999970294381, 0.8877270059174627, 0.7656518374947445, 0.8795423267872661, 0.8811961954790137, 0.11707684367199578, 0.1104647125249465, 0.11746008384567452, 0.1586415858377619, 0.09016192333184514, 0.159403949670466, 0.08425917384486148, 0.15069530209836357, 0.12725447394715617, 0.7243645357097164, 0.13545072263707025, 0.6196463861970161, 0.7666225397851087, 0.19363777136300275, 0.25032671410443696, 0.7061304611861907, 0.6139420620533048, 0.6838686772281719, 0.3342592311839687, 0.3547518663425112, 0.5246108620584972, 0.7803859328972017, 0.5678814900836342, 0.3044160222938602, 0.7942409174783382, 0.38019979621524713, 0.3580921827376373, 0.2282908103003931, 0.24504775684303015, 0.5953180970107687, 0.32719024019789256, 0.41620095920179023, 0.5674611480897336, 0.21988257252409815, 0.5740713082825748, 0.2886823097750618, 0.22245788664751565, 0.22376784598275923, 0.20723059260644472, 0.2218980978298839, 0.2128178534524875, 0.2119553654820152, 0.2496967788933374, 0.22307063566517105, 0.2046448801961308, 0.20978328419660908, 0.19314207851330778, 0.22546316741970318, 0.1752706352870691, 0.21149786639186985, 0.22427241298976264, 0.20980210083230855, 0.20429770190885388, 0.2225304217007068, 0.9557660174246896, 0.16973646435214929, 0.18739511096327355, 0.954159420339121, 0.20070929686796912, 0.2005017397145743, 0.9364357083826969, 0.16591623215970408, 0.9490204073526674, 0.9353164988056754, 0.21344846474234513, 0.07356950855008815, 0.16928952731383928, 0.9122992606462773, 0.156457119395773, 0.10487570148878655, 0.9336240232867257, 0.930328771081204, 0.1778160273558782, 0.1963802488502886, 0.18692302221331825, 0.19807269797138893, 0.17826757151368933, 0.19320758432019147, 0.17638062545987432, 0.19132013062031217, 0.19093428090560105, 0.09282639933721581, 0.08467195706999542, 0.07858008819797924, 0.09180918983468656, 0.0925459868271511, 0.09244310563420555, 0.09147115463283773, 0.09382522456446074, 0.09859980911500221]}, "mutation_prompt": null}
{"id": "b0340e13-1c9b-40f6-9b24-06a43dc3faef", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10.2 * dim)  # Slightly increased population size\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor with adaptive scaling\n                self.F = 0.3 + (0.7 * (1 - evaluations / self.budget)) * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutation_scaling = np.random.uniform(0.4, 0.6)\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Integrate adaptive scaling of the mutation factor to enhance exploration-exploitation balance.", "configspace": "", "generation": 83, "fitness": 0.5102445172117339, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.51 with standard deviation 0.30.", "error": "", "parent_id": "20283f1e-3c19-4ac9-aa7f-b45cd68a57d5", "metadata": {"aucs": [0.8964950025026693, 0.886157844980602, 0.9022126623165933, 0.8954006058018474, 0.8975886227546443, 0.8985116792929775, 0.8913010461101445, 0.8968704845134774, 0.8947465010145484, 0.7666883318397294, 0.7808850266870009, 0.768594306739774, 0.7644947055643406, 0.7712785548851675, 0.7764825829829418, 0.7749654097008286, 0.7860902812072363, 0.771428273867869, 0.3056174048908059, 0.1700092148889597, 0.14219796106311677, 0.15045792909221722, 0.43560736235112063, 0.12439309586850689, 0.13022911805141635, 0.16588547544773313, 0.1651840470502095, 0.11196171171413394, 0.10963316744356921, 0.12608676626685889, 0.11229808818356324, 0.10794131005450003, 0.12203942797657508, 0.1597379019047498, 0.13075359927706665, 0.10782216354353824, 0.9457141274012587, 0.951320776382599, 0.9644065000739952, 0.9589875614038031, 0.9568295731971265, 0.9722763697301061, 0.9617591709295082, 0.9520372417997129, 0.9556608983521566, 0.7663633281006771, 0.7473073712706053, 0.7356211905175669, 0.7467052619032959, 0.7496560615057748, 0.767072549549525, 0.7553775243719008, 0.7512525306805065, 0.7733821765093329, 0.9122768715301601, 0.8962802023542292, 0.8994872623882032, 0.9121806332772918, 0.9150223005566026, 0.2797117548349487, 0.902781750534664, 0.8979235734247321, 0.8812260992081131, 0.6436213784734157, 0.5689461505715114, 0.7433563923861757, 0.7136413512623305, 0.6266138675856978, 0.7193992443797101, 0.6221225865803984, 0.13408707770089223, 0.5517272184620357, 0.5184167801327926, 0.3828397274219185, 0.13426850166513105, 0.7486934102696673, 0.5823444563597919, 0.7045559554138835, 0.7117435748994732, 0.6465928054346461, 0.4968698602920686, 0.2552722702738801, 0.7157971345167872, 0.38245760454601574, 0.7174888052619224, 0.72324685692931, 0.7184557244331551, 0.7223589377743009, 0.6958775929054322, 0.7000387840355308, 0.7670579546302077, 0.7724747924517931, 0.7746841295223297, 0.7668559128062278, 0.7771074509714602, 0.7625342579961856, 0.778530546150968, 0.7459030446159344, 0.7634136469162764, 0.1608825352419221, 0.09674173895204008, 0.29736473017465237, 0.6698348274723829, 0.4050121526330419, 0.21062530257526424, 0.4102995114619077, 0.3967613916469829, 0.19223173257433113, 0.6460126117154625, 0.5597631668187012, 0.5825620399497282, 0.6606431332296603, 0.44398957654431237, 0.6123217455146719, 0.5454153310331278, 0.6121724016784749, 0.6294095487221334, 0.8581953604959994, 0.8413637080086996, 0.8394308415167313, 0.8398488840668227, 0.8456988482576906, 0.8529090096245402, 0.8460346585970377, 0.8490643370517805, 0.845126680029389, 0.13947545037075615, 0.13208389925028075, 0.15300148401008906, 0.1306202956922341, 0.09849409550887744, 0.16986386603691428, 0.3319748463017731, 0.13745417100813506, 0.10069992840572162, 0.7099541727431229, 0.2242494663944229, 0.5380782577026515, 0.16643226596263683, 0.24800367267485657, 0.17732676174462636, 0.19199786683895803, 0.3197794332521364, 0.24537377152710105, 0.6078555927104132, 0.7176838017583176, 0.5662491312869657, 0.5895764594702696, 0.7127883770876755, 0.7211911749183433, 0.6072690266665454, 0.5831704928041799, 0.7203284401939549, 0.5357121237752562, 0.5419745832041076, 0.5209134342696945, 0.4549540761950548, 0.6192088437852128, 0.531026789863838, 0.49971306708772933, 0.6675406132250254, 0.630355749107276, 0.22336034948661243, 0.20191311337001372, 0.19760459491101134, 0.2406636576170419, 0.21494685329720808, 0.212187771028034, 0.2398243155980917, 0.21715187282669257, 0.25159619800323874, 0.19467978827387677, 0.21901267012392867, 0.22025065016942558, 0.19870371651013097, 0.24988512547599806, 0.20625232367137825, 0.19962688774763016, 0.20491538933117814, 0.7273598775493444, 0.927152038581727, 0.18462744749252413, 0.18587759412585747, 0.17847731482237073, 0.19929070953358097, 0.9042170543188385, 0.14180901811041946, 0.8633183092988435, 0.14701932618462488, 0.90641849238487, 0.861640751350899, 0.9098915411216526, 0.21040432335837045, 0.2077249097247763, 0.15563975496306248, 0.15443571546813073, 0.8850957066842452, 0.8688957142402606, 0.18569567470383141, 0.18358507239268007, 0.18756832662476863, 0.18931441638040425, 0.18341052233457833, 0.17385537402214613, 0.19972259086400956, 0.1924001803400497, 0.19572558008980268, 0.0910056255964864, 0.08859440269861696, 0.09015104412732167, 0.09184882319379994, 0.0920132275676504, 0.10120364776191348, 0.08995090159520791, 0.09049500649332332, 0.0862490201206969]}, "mutation_prompt": null}
{"id": "608e4c0c-654b-4598-96f2-4c72803660e8", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10.2 * dim)  # Slightly increased population size\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor with adaptive scaling\n                self.F = 0.3 + (0.7 * (1 - evaluations / self.budget)) * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutation_scaling = np.random.uniform(0.4, 0.6)\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a) + 0.1 * (a - b), self.lower_bound, self.upper_bound) # Added momentum term\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Incorporate a momentum term in the mutation step to enhance convergence speed.", "configspace": "", "generation": 84, "fitness": 0.501200630718069, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.50 with standard deviation 0.30.", "error": "", "parent_id": "b0340e13-1c9b-40f6-9b24-06a43dc3faef", "metadata": {"aucs": [0.8896028852639783, 0.8857361565928835, 0.8889225514817777, 0.889767443145656, 0.9002695448591241, 0.8893546170989557, 0.8943989949220639, 0.889661241003608, 0.895520062154152, 0.7806035038434012, 0.7827193936254798, 0.7807336396193449, 0.783114134444711, 0.7785176846303116, 0.7696065766148518, 0.7699704729414625, 0.7802639723476702, 0.767613675813883, 0.36356796179685535, 0.2260153949533218, 0.5560973211560192, 0.13347361512805833, 0.1374794320126579, 0.47844760906979333, 0.12447315713605533, 0.13941072088005235, 0.14121823972030612, 0.12570734307226616, 0.0968701973899988, 0.10748269787034337, 0.13165189880037376, 0.12928489382934072, 0.12738253542599765, 0.1059803742251999, 0.12845110793808434, 0.11021382283498837, 0.9504273984720725, 0.9569096346682823, 0.9912052052264838, 0.9541992073845205, 0.973914914131289, 0.9356290002424091, 0.9408206365480445, 0.9506439392235874, 0.972638328230858, 0.7590923154085356, 0.747506255330139, 0.7446471257670804, 0.765507701045827, 0.7602813491374358, 0.746043079650419, 0.7444187077225053, 0.7475398743671222, 0.7632067737688242, 0.90782959914922, 0.9037038733732116, 0.9163690949978885, 0.21362483933426035, 0.8726644931763895, 0.8994608052283921, 0.876764695906075, 0.8799641568321903, 0.8951393438777345, 0.7192189592485387, 0.7744965009737023, 0.6829768658999994, 0.6178900135604721, 0.7214193216049354, 0.6740957203544973, 0.6746275740750058, 0.13406405369580077, 0.6393967263194729, 0.6748547677136448, 0.5395587487170299, 0.6198225944973756, 0.6940861815175877, 0.6352687201961811, 0.6512938077856554, 0.6735600592560891, 0.6582551982819618, 0.13251975503024804, 0.5543682361675228, 0.7143144396656109, 0.3804712076834176, 0.7216694557850221, 0.6826117259257841, 0.6738342947383263, 0.7185427912169295, 0.6914598004424573, 0.683669738042364, 0.766909890554287, 0.7169837104216364, 0.7879584518792002, 0.7489447976027528, 0.7506133761532974, 0.7736475679501288, 0.7316291305671593, 0.7448828163892678, 0.7614161058652643, 0.39438450069623, 0.15879300758881376, 0.2005311048037557, 0.635022630611384, 0.6031922157827834, 0.26652781766172606, 0.3572366368125207, 0.19257485481186332, 0.40220286983247744, 0.4785304828897068, 0.4684848799333856, 0.6119190165082811, 0.5118102294411655, 0.4545434268620362, 0.6385523277796297, 0.45136517958726363, 0.4565221596710308, 0.5404624314469535, 0.8580026865705928, 0.8453739219870986, 0.8471000885831454, 0.8264787112234382, 0.8410338298828343, 0.7795537962455523, 0.8570975595045303, 0.8457332812284182, 0.8441087768611136, 0.1253483847307143, 0.13578772048096144, 0.11933270544731334, 0.11121013535535762, 0.1349868848456265, 0.47346006370878435, 0.1167264460237164, 0.13155337504437759, 0.14607952587763862, 0.7007091220474461, 0.5924502136278014, 0.14345861447053088, 0.43092187469395293, 0.27128543759899826, 0.19659892820729397, 0.21196180756472416, 0.1381780184617506, 0.14255137318714006, 0.5854181539490435, 0.6413939845223718, 0.5305336416816337, 0.6754626662437461, 0.692539573305306, 0.6009886397046265, 0.702043844072398, 0.6195522191796865, 0.7225685798253001, 0.338383306675217, 0.5583779229196006, 0.5273342058391497, 0.26936630664254213, 0.48904898784995987, 0.6146243059159252, 0.2590490259550172, 0.6452916394366138, 0.45256200449388184, 0.20705974113158332, 0.2150997002034628, 0.23158014687145467, 0.2347635261398573, 0.2185382476201665, 0.1963090041611284, 0.22215375314586738, 0.2307888403697692, 0.2171667204301556, 0.2197779718096755, 0.20674751032952232, 0.7255251180597743, 0.22067459980002546, 0.24133504234364545, 0.24690683329859353, 0.22208845676468558, 0.20373966360028162, 0.24301145857682827, 0.9256260154164149, 0.1834786409108683, 0.9197174920262915, 0.910068276870778, 0.1983110562857503, 0.19765891862061824, 0.9007227495800021, 0.1982788918391235, 0.1639872896255269, 0.8960046757206145, 0.21284190951057602, 0.21048651187557832, 0.1672838075607357, 0.1679949629785762, 0.16771227365950803, 0.1556159301337584, 0.16735660819892728, 0.2109151730700357, 0.18389168564440528, 0.18635562844103648, 0.20160040683294933, 0.17711337123724735, 0.19611242799747042, 0.17755640321009036, 0.19209817350455927, 0.17546053315938204, 0.1967444975617505, 0.08787067073659693, 0.0867796017764928, 0.09174910719823115, 0.10169001386438536, 0.0981429243275368, 0.0905625959524794, 0.08310345516498363, 0.08661022982073996, 0.1032185981160686]}, "mutation_prompt": null}
{"id": "79e3d45a-1d6b-4696-93d4-f5ad4fc9b7af", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10.2 * dim)  # Slightly increased population size\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor with adaptive scaling\n                self.F = 0.3 + (0.7 * (1 - evaluations / self.budget)) * np.random.rand()\n                # Slight decrease in the bias towards the global best\n                mutation_scaling = np.random.uniform(0.3, 0.5)\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Slightly decrease the mutation scaling factor to refine exploration-exploitation balance.", "configspace": "", "generation": 85, "fitness": 0.5034271001622546, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.50 with standard deviation 0.29.", "error": "", "parent_id": "b0340e13-1c9b-40f6-9b24-06a43dc3faef", "metadata": {"aucs": [0.8708401615303747, 0.874190947663273, 0.8720239035396045, 0.8811198396113221, 0.875436062471772, 0.8770348391009369, 0.8852906257431797, 0.87876706812322, 0.8816478553178546, 0.7484718135592656, 0.755965816351747, 0.7273528694877742, 0.7424772393070259, 0.7639234682861576, 0.7583112088646811, 0.744512394129599, 0.7506942353695147, 0.7442026616496078, 0.14200599777367517, 0.12828807967404976, 0.1560105457401849, 0.40876900801982574, 0.14615833266472633, 0.14569266594511432, 0.14153260166504644, 0.4869055430110547, 0.4249623919990303, 0.13765850602359897, 0.12270748864874681, 0.1192036538604947, 0.11333660123770462, 0.12894701247381668, 0.1359908914810921, 0.1353953564328516, 0.13162371130357065, 0.12742807351421215, 0.9431208545144034, 0.964638503295805, 0.9772694875693558, 0.9256412728839738, 0.9273152773844349, 0.9320147026819764, 0.9691220847092193, 0.9472748188129106, 0.9219464854895764, 0.734048945802805, 0.7290736614627704, 0.7477419867318904, 0.7299613525490805, 0.7323948836406349, 0.7179094729332745, 0.7210450066592338, 0.741482915678032, 0.7418607850515753, 0.8814344297872373, 0.8724039994714755, 0.8769099405572882, 0.8971183499721611, 0.8781589853833602, 0.9026686911090023, 0.8850382012761374, 0.8642880336538027, 0.8586708275221504, 0.5694331513704186, 0.13271397903309168, 0.7187838235936612, 0.6836422490800523, 0.673178859945567, 0.5164960273865337, 0.557011677326011, 0.5669393304619187, 0.6054562826802021, 0.5592547401659933, 0.7192320949195568, 0.6788165094325791, 0.6617419477871824, 0.46835796248194217, 0.5326046184235681, 0.5489982092245682, 0.5552424455061187, 0.678517781975232, 0.6758649313030742, 0.6697873629499002, 0.6746856171374402, 0.6903817252701848, 0.6490672441865615, 0.5664874691578538, 0.6697837534433526, 0.6380708983665441, 0.6877480521103725, 0.742541022207658, 0.7080466956695044, 0.7494991335726451, 0.7506017443494467, 0.7097338454639049, 0.7454277332366943, 0.7586987116007394, 0.7435730015391787, 0.7649101230472702, 0.07906255481564461, 0.2572608207760382, 0.16385283126983108, 0.4392864635217679, 0.5912766794386812, 0.257379727328486, 0.38053933427860376, 0.09718510004139957, 0.24376627379846583, 0.5345258106366872, 0.5086181602340497, 0.5236294493544624, 0.615629398919172, 0.5404994240180141, 0.46872131326342803, 0.5381946265371185, 0.4850927052456897, 0.3882635016205548, 0.8331348655245319, 0.8280725957472125, 0.8112996557536438, 0.8395194727702404, 0.822776771412804, 0.8353552604362846, 0.8448710818192133, 0.8274294197207236, 0.8092008441073058, 0.11374476997524086, 0.11608814386347477, 0.12246503068633041, 0.1620801696835702, 0.33054251440316174, 0.14015426380037332, 0.1620281126566775, 0.12351649599440895, 0.11636569041176359, 0.13349466559839906, 0.3801961179118696, 0.16913487943917227, 0.5094692887760627, 0.12409292229890889, 0.13170729715312357, 0.14110644636869152, 0.1260567838644958, 0.14447581306754886, 0.5492457983182752, 0.6545911046094001, 0.6558634492333584, 0.6825914726415125, 0.6619160232711414, 0.6810921884594334, 0.6758946438093717, 0.7215278768331317, 0.6820351678657068, 0.46096341257183626, 0.5203911616059838, 0.47842900729727666, 0.49410193549385817, 0.36188169939568093, 0.5138654365313056, 0.5196042848928599, 0.5349832095009379, 0.599569023087505, 0.22236213059793608, 0.21844924815682198, 0.19957580315434997, 0.21899492180464963, 0.2249270119126836, 0.2206255481697319, 0.2203847678494446, 0.22586986794765507, 0.21415854628361608, 0.6726942936648256, 0.19671427361586413, 0.5643605888414402, 0.2045957924241797, 0.18609669272982987, 0.21818327386385628, 0.23066322836844, 0.6758845337784423, 0.20737942072438154, 0.8929898707757536, 0.20976548273180573, 0.8988907257798253, 0.8860639070001157, 0.1967018597429787, 0.8526735584873486, 0.8536155026858236, 0.19676040283526863, 0.20964289576011774, 0.8788769862821869, 0.2123929764082867, 0.8147606195528287, 0.8568812776507557, 0.20482479791394037, 0.15486785006609372, 0.15166384934535293, 0.12795216923586927, 0.2105860445085247, 0.20880403953953197, 0.18269360309913596, 0.1980431717654929, 0.18389993914405367, 0.19830137008665816, 0.1819273630756838, 0.18801913720781116, 0.18246089928740183, 0.1995364303008369, 0.08853920882928012, 0.0899896009864668, 0.09210177595237878, 0.08748111051756846, 0.0925332315396381, 0.08522034251924326, 0.09772403651714667, 0.09056071056130566, 0.09411231613862181]}, "mutation_prompt": null}
{"id": "084802a3-48be-459f-9586-8130e3a38369", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10.2 * dim)  # Slightly increased population size\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Refined dynamic mutation factor\n                self.F = 0.4 + (0.6 * (1 - evaluations / self.budget)) * np.random.rand()\n                mutation_scaling = np.random.uniform(0.45, 0.65)  # Adjusted scaling range\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Enhanced stochastic ranking\n                if np.random.rand() < (0.1 + 0.3 * (np.argsort(scores).tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Refine adaptive scaling and stochastic ranking to enhance convergence rate.", "configspace": "", "generation": 86, "fitness": 0.49045615000147075, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.49 with standard deviation 0.30.", "error": "", "parent_id": "b0340e13-1c9b-40f6-9b24-06a43dc3faef", "metadata": {"aucs": [0.8753298441175015, 0.8736909299796687, 0.8684640567667271, 0.8708710715739777, 0.8793393575386893, 0.8898829858815225, 0.8741523379890899, 0.8784830376173899, 0.8799512051684636, 0.7402230931778543, 0.7430157809840396, 0.7402315780579616, 0.7303199794461105, 0.7312603271668476, 0.7508005135675007, 0.7188694631993697, 0.7441701446873402, 0.741969955624636, 0.1411380092287956, 0.16135407373672828, 0.1406744865544739, 0.15085970243118796, 0.15235573249262613, 0.35995341647460377, 0.20866977091662875, 0.148873386072647, 0.34906347987233644, 0.13777240102366728, 0.11447640936516223, 0.10712451502229581, 0.1304007080144407, 0.13088894316167676, 0.1493532080984432, 0.11778717264953942, 0.1250694683011585, 0.10517039685935592, 0.9859444414466167, 0.9925696496546843, 0.9619437228792552, 0.9893234862081042, 0.9634187711712452, 0.9692188112475918, 0.9924989487859716, 0.9732710757042204, 0.9821824039728347, 0.7248397154052213, 0.7164735395694064, 0.6925754563571501, 0.7128209036608553, 0.7205784931294494, 0.7016701982139313, 0.7213440503827582, 0.7296754240268657, 0.7295514778460921, 0.8804734995027054, 0.8877764993438422, 0.8883011182407932, 0.8831038328151014, 0.8928047219441891, 0.89206001716113, 0.8749919077292342, 0.8681683943855515, 0.8546063363435927, 0.7269270089435198, 0.6648650818922796, 0.6405628462658564, 0.5979413322501226, 0.6556668276370243, 0.606030534030308, 0.6011332564793475, 0.6167316710845555, 0.606491237242919, 0.5437981281591006, 0.655641269065173, 0.6689337459234945, 0.6926353431303176, 0.5577494876266136, 0.6893181300075262, 0.722393982370011, 0.5973708073260036, 0.7227729648824344, 0.6533266456974746, 0.6774720743320126, 0.6483234264324187, 0.6650433309914145, 0.6310061610728672, 0.6535357628385332, 0.6505747363250228, 0.6545801492627431, 0.6748603005613398, 0.7221242904911762, 0.7245648945056662, 0.7473827937503545, 0.7356942702136744, 0.724333232830132, 0.7274442418549553, 0.7198159998727329, 0.7399246762730174, 0.7315546972080499, 0.10235683481720148, 0.37586135356235406, 0.14333431475818414, 0.5652211156039239, 0.5751396031367675, 0.19408242775986229, 0.14722038961164396, 0.1535145648089059, 0.27751903389484534, 0.4366611482747983, 0.5742130279288792, 0.5377791221740446, 0.5916220789732042, 0.5753492978748349, 0.5538206100041656, 0.5501454120334967, 0.5737911691981641, 0.541191857823228, 0.8361686423083838, 0.8143697865314685, 0.8201436997141172, 0.8211754818183137, 0.8209360489555938, 0.8247035708349546, 0.8358098133311714, 0.8184824104060384, 0.829893031244531, 0.10902019155999676, 0.09611953738546786, 0.12034984089036116, 0.11510281002786737, 0.12322766125785989, 0.13757507671267954, 0.1194560393326648, 0.11696152044493102, 0.1272836775369962, 0.23878995326944308, 0.20436351551684728, 0.14587465227306895, 0.14176270003157587, 0.15786513482641007, 0.18219216022616558, 0.31454558974094493, 0.13723946363227402, 0.1938408579598857, 0.5312446959731301, 0.6312196260723844, 0.567206027637077, 0.62759366273788, 0.6362187460041828, 0.5671499532922044, 0.6620440199697952, 0.6441243624806356, 0.6571640548225022, 0.4722739050537712, 0.5819902248651043, 0.5078360946044, 0.5648850906111569, 0.46782630319874907, 0.2546442391803301, 0.6231137019372535, 0.49492763533298423, 0.47559941598742983, 0.24258906294573157, 0.20738160795062233, 0.21018548630246536, 0.2118428875582714, 0.21049425014227496, 0.21609802643030007, 0.2140482123565811, 0.2008636740037636, 0.22592337046186461, 0.2194921474537408, 0.21471699079236684, 0.20032650600694302, 0.20353876843716412, 0.23563233064545475, 0.20555425188512222, 0.2014905044241737, 0.21081030805452983, 0.24089913793640083, 0.8664809802741796, 0.17510051633071066, 0.1650173053869265, 0.8875394854043176, 0.19680686932085334, 0.16618600833379293, 0.14143766111043843, 0.15765092201449626, 0.8210904945077341, 0.8886460600617443, 0.21151831616916583, 0.8699456600338527, 0.16795862308158416, 0.8406105043545536, 0.16855050320565879, 0.20762509161155207, 0.12792559698219974, 0.212827494742992, 0.18157778482039244, 0.18120019339422266, 0.17230980018091469, 0.18302230539997622, 0.17759437123849475, 0.19110201621357714, 0.193963068825733, 0.17832989479950356, 0.1848649652621066, 0.08309783989461261, 0.07737970886466305, 0.09371026361272561, 0.1026622736924937, 0.10965977934352955, 0.09059751051686926, 0.08306281151064343, 0.08651838612181706, 0.09120864136234519]}, "mutation_prompt": null}
{"id": "a59179aa-7104-4575-84c2-6442f1b69eaf", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10.2 * dim)  # Slightly increased population size\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor with adaptive scaling\n                fit_scaling = scores[i] / (self.best_score + 1e-9)\n                self.F = 0.3 + (0.7 * (1 - evaluations / self.budget)) * fit_scaling * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutation_scaling = np.random.uniform(0.4, 0.6)\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Enhance the adaptive mutation strategy by introducing a fitness-based scaling factor for refined exploration-exploitation.", "configspace": "", "generation": 87, "fitness": 0.3615816881627576, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.32.", "error": "", "parent_id": "b0340e13-1c9b-40f6-9b24-06a43dc3faef", "metadata": {"aucs": [0.8848742439426509, 0.8899702084728421, 0.8861444853498701, 0.893864025289283, 0.8872685894114055, 0.8947981355970427, 0.8980433747305733, 0.891324285680785, 0.8941455883666207, 0.0009053142143830017, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004004081837831852, 0.023957701819382393, 0.021231370097784974, 0.13474753902481285, 0.1299676122004919, 0.16488996233245967, 0.12444240821228791, 0.12707062892224208, 0.1546670629447492, 0.16320144430657202, 0.4299011557125153, 0.1229468788239867, 0.14625727218546458, 0.12614267735737483, 0.12209831852976127, 0.13122638800291664, 0.12514793920694134, 0.14604972750915235, 0.09490345445172965, 0.1144394382206414, 0.10456572750502491, 0.9908019101128281, 0.9936203408143656, 0.966678080633532, 0.9635295685570967, 0.9530168207951394, 0.968088648470589, 0.98883709604293, 0.9638556912078173, 0.9267430799478986, 0.6980278701994154, 0.6497012290683943, 0.6310103266873124, 0.6738696552271404, 0.6792151819065475, 0.6467561617686934, 0.7135091096613319, 0.7164273092425919, 0.7061193400443022, 0.8861849347816503, 0.8610270060613254, 0.8690235781597596, 0.8485125917316516, 0.8630784964885017, 0.269287791794952, 0.7425231400402741, 0.7599831791837095, 0.7904221904843406, 0.09972006439753911, 0.075681294226846, 0.08577852189359614, 0.5337864545613346, 0.3569818469723618, 0.23552967481687215, 0.13162239996846659, 0.17846075814369777, 0.08821485172431753, 0.33431678262567055, 0.1156355995523094, 0.394862539164758, 0.03176322492140027, 0.04820835825260705, 0.029983027461027323, 0.1452173435410723, 0.2965745434233097, 0.1255935444221854, 0.011631585400945887, 0.0057106817069340066, 0.010458996790978947, 0.012872622478370954, 0.02507621463034415, 0.00601766190360542, 9.999999999998899e-05, 0.002884437712360577, 0.00572204773032059, 0.12067944384515361, 0.14157177536286258, 0.21616802647842237, 0.17422578323828675, 0.35845189606355243, 0.05320652076597365, 0.48769152843062336, 0.4853927946464609, 0.5194469434623089, 0.001865224148939526, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4192211503705636, 0.3858093066838817, 0.47939446267554175, 0.3658704285704425, 0.33877188554298154, 0.5269297086626765, 0.45533186310241247, 0.5237757979629298, 0.43286170370991806, 0.8630225710885658, 0.8363916246971353, 0.8593310862791947, 0.8575758929412967, 0.8493091000168994, 0.8612309333737961, 0.8536665809422292, 0.8459979742294464, 0.8355439392267641, 0.11412180125662308, 0.11342300606979583, 0.129214991019323, 0.11286816963222279, 0.10401574613346165, 0.106747433083059, 0.14055685101552007, 0.13584123941885884, 0.1307237540159384, 0.19534673460086904, 0.2090478058599896, 0.17863587847945417, 0.22910622779208434, 0.24839566322439333, 0.23846929024730557, 0.2020996944396246, 0.2033972010330113, 0.14113896645303525, 0.5669784670447862, 0.7141511177810959, 0.6069680545210303, 0.5202030085373572, 0.5855457319336037, 0.7088320598426783, 0.568233951825458, 0.7125318409730675, 0.539660300760916, 0.6082888056352298, 0.44485741416276137, 0.540803232914546, 0.4496063373777467, 0.33179727250352975, 0.5072476335753499, 0.612570765343949, 0.6481699773410181, 0.5281272603872662, 0.22676864227491067, 0.2167482394304474, 0.22971526419178168, 0.21738319936793682, 0.19850953244695446, 0.2112232034303092, 0.21949121448937925, 0.23249868051789002, 0.19994051497356713, 0.1942405279371916, 0.20070593501014178, 0.20612666801109336, 0.20949716825445197, 0.5382154199210896, 0.19121852775123482, 0.4200142368413996, 0.16302132626305554, 0.1604110973982148, 0.1657350114906978, 0.18238874714244424, 0.16423482550087032, 0.15419725905558657, 0.17447076892581204, 0.17610967849818404, 0.9051505770379097, 0.8985064518015812, 0.1654755456562731, 0.913303389585106, 0.21050584852370902, 0.9019316897820401, 0.20905731244955028, 0.16742891551824302, 0.1547527064871882, 0.9281501654910818, 0.9033358501367599, 0.9145280343118847, 0.1855589209568892, 0.1837580278887051, 0.17973699592779013, 0.18058331033475006, 0.19528930906759556, 0.1840382167171637, 0.17535948092800058, 0.18223951683825623, 0.19411580047153798, 0.09340036331875168, 0.0892550911136244, 0.09639233587659424, 0.0852214349732272, 0.09689373266519563, 0.08341007427047842, 0.08996384723025563, 0.07937777540405155, 0.08284615271467188]}, "mutation_prompt": null}
{"id": "98257b5c-d001-4693-be8b-9bc84444d52a", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10.2 * dim)  # Slightly increased population size\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor with non-linear decay\n                self.F = 0.3 + (0.7 * (1 - np.power((evaluations / self.budget), 2))) * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutation_scaling = np.random.uniform(0.4, 0.6)\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[np.argsort(scores)[:int(self.population_size * 0.2)]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Add a non-linear decay mechanism to the mutation factor for enhanced exploitation in later stages.", "configspace": "", "generation": 88, "fitness": 0.5000755471003372, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.50 with standard deviation 0.30.", "error": "", "parent_id": "b0340e13-1c9b-40f6-9b24-06a43dc3faef", "metadata": {"aucs": [0.885508362372647, 0.8873541982373109, 0.8895012075024316, 0.8856098248931404, 0.8887966428747446, 0.8903690650748248, 0.8890536923122652, 0.8865755272124856, 0.8877735405999032, 0.7757618694326547, 0.7489196272304881, 0.7576345736731848, 0.7707712214577472, 0.7716825787375716, 0.7620942828207635, 0.7670295322967757, 0.77307712464988, 0.7749422173858431, 0.14544118731004763, 0.1320143887735068, 0.4349301130411749, 0.34885629043146804, 0.15055221054973422, 0.10869074952051105, 0.13855634078133972, 0.4837101879552569, 0.14384040525719377, 0.14680382585867768, 0.13338217976179945, 0.11318803114923215, 0.14804318740347355, 0.10521843364229666, 0.11215008579048058, 0.1336880757347788, 0.12016140200959147, 0.11290390153112606, 0.9493305947265281, 0.9392282829285299, 0.9646922127322167, 0.9617884396201462, 0.9711041937260024, 0.9722747714955824, 0.9523385945110685, 0.9373853870928319, 0.9552104507927319, 0.7576630932835843, 0.7488062110904525, 0.7161844913377982, 0.7548572490654819, 0.7379760381990572, 0.7274418637217948, 0.7498918602162138, 0.730375178525491, 0.7432545717107566, 0.897951167019728, 0.8951705510455169, 0.909014630223191, 0.8880130169418475, 0.8848658263822411, 0.917242846149347, 0.8856509737380653, 0.9066996399792157, 0.8940191979050782, 0.6914396051715189, 0.657458867518586, 0.6776637036639692, 0.5791076513854976, 0.6295684338197142, 0.7331227123378413, 0.6149404281818139, 0.13359687414392518, 0.5749343221728006, 0.6480939363523037, 0.6123897828773445, 0.6006097541135496, 0.6757689983227537, 0.6697702741564846, 0.6131649065549531, 0.6059954054799703, 0.7371378173896015, 0.13276571621422173, 0.6119231862528178, 0.6596966924390748, 0.5399678663549844, 0.7066337484394162, 0.6903346206860879, 0.6919624178853564, 0.6940474247606213, 0.6709768504355911, 0.5955838841384512, 0.7481911654896494, 0.7337865596636539, 0.7588978607099793, 0.7445093981307573, 0.7512024783128228, 0.7448933097530037, 0.7253329625951233, 0.755951644602935, 0.7320409952901257, 0.29440382498421247, 0.07430067817225594, 0.24254311287430053, 0.5844108770804984, 0.3015787134242264, 0.3366382911512523, 0.23680281037007023, 0.24547173312924775, 0.20215997116091322, 0.6023839712335817, 0.5910262783987293, 0.5505849974758947, 0.6329047219013203, 0.585049596859327, 0.5877744215232527, 0.55937846838571, 0.5724695558512978, 0.5806127044893319, 0.8449589171025111, 0.8400579158913232, 0.8360217562261363, 0.8405022051500174, 0.8390315370832393, 0.8438953837398242, 0.8411172169440306, 0.8336139340912245, 0.840711105634286, 0.11786318340612256, 0.1288814801182352, 0.1437434461835797, 0.13041523111050124, 0.1464020595035479, 0.13866718802425115, 0.10772084739118948, 0.13292674975547203, 0.12547400165493494, 0.32527956217143017, 0.2186392179082618, 0.13492133553874408, 0.4160821566902214, 0.13509627949608438, 0.1773547674094227, 0.20884890161516756, 0.30350575868587104, 0.17750641833669212, 0.5701574449755853, 0.640579247294309, 0.5333801018461666, 0.6576170473118502, 0.6405136111466008, 0.6690115686618576, 0.5538473639091461, 0.607467391322752, 0.6911287658109653, 0.5810883572515525, 0.5239626012371279, 0.4499203935859687, 0.5086768799633612, 0.5269562720580065, 0.27749404891392304, 0.5399039155131671, 0.58279023136196, 0.48478398892581076, 0.20720238441430117, 0.22061207837900443, 0.19654791288559204, 0.2164527705824273, 0.2369969834259723, 0.2287737993278086, 0.21786132585603912, 0.23647395459023213, 0.21965050942728326, 0.22635965972093341, 0.20379105671634778, 0.22146274933592747, 0.204097777852282, 0.24740109313640557, 0.20017425935463873, 0.21682831520935408, 0.24059528451726908, 0.24721698055466967, 0.9128787260052003, 0.18685462257030527, 0.8645196934441883, 0.17842116875339398, 0.198329880579302, 0.9025267669557733, 0.8868277545771526, 0.16160973235573894, 0.1667473584909912, 0.9149536140785165, 0.8543768492880984, 0.20816925553149734, 0.21045321394177718, 0.20817203355126923, 0.1545795323592043, 0.16678039862217542, 0.8587233036527903, 0.21069953852215462, 0.18116905870770184, 0.1785857381038084, 0.18821115960183465, 0.21372746731996717, 0.19036923827395458, 0.19050846184733405, 0.19157504436665873, 0.19444346867093443, 0.17678301000717345, 0.10805377918610592, 0.08702921211956727, 0.08557912241336163, 0.08263125364650259, 0.08974856601276915, 0.09106649166521641, 0.10146089439408568, 0.10124114252895944, 0.08452053459889308]}, "mutation_prompt": null}
{"id": "b14afbbd-784c-4348-a5d5-ccad650b4a19", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10.2 * dim)  # Slightly increased population size\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor with adaptive scaling\n                self.F = 0.3 + (0.7 * (1 - evaluations / self.budget)) * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutation_scaling = np.random.uniform(0.4, 0.6)\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[np.argsort(scores)[:max(1, int(self.population_size * 0.1 * (1 - evaluations / self.budget)))]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Introduce adaptive population size re-evaluation and selective top mean attraction for improved exploration.", "configspace": "", "generation": 89, "fitness": 0.5178264248011635, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.52 with standard deviation 0.30.", "error": "", "parent_id": "b0340e13-1c9b-40f6-9b24-06a43dc3faef", "metadata": {"aucs": [0.8916456774399747, 0.8843493178167222, 0.8932196448283308, 0.8898398696405694, 0.889578078034091, 0.8928492848162535, 0.8962558982067959, 0.8988374167930483, 0.8943170335604776, 0.7800690224640638, 0.78016925478976, 0.7621211591598565, 0.7888519570688538, 0.787834074991401, 0.7744335425096674, 0.7794988738189264, 0.7588832769192999, 0.7704570513801322, 0.1505276124910213, 0.1300456651645967, 0.14591026226492454, 0.13041847830443587, 0.4933140644457271, 0.11715471185074167, 0.14345339666875612, 0.15976557180120232, 0.16972175580447457, 0.13301984027085545, 0.1278690076553849, 0.11050930491970634, 0.10696330662070375, 0.1261776603319399, 0.1345362495815967, 0.14569754117939593, 0.14568366928864473, 0.12266509398538294, 0.9669807058004425, 0.9696259685453482, 0.9685091073241338, 0.9574600466253547, 0.9532221779819224, 0.972301601999247, 0.9923906130692374, 0.9328243824909814, 0.9641531359293767, 0.7771143808547872, 0.7406482937255232, 0.7453200674882183, 0.7404513211327235, 0.7559046782337394, 0.758803585934819, 0.7610220886119677, 0.7679633940001925, 0.7613169022727656, 0.22878199134197263, 0.9021314468435362, 0.8938006863501383, 0.9232716183961278, 0.9196792018332902, 0.8544667462499225, 0.9069886443499016, 0.906709538808437, 0.9163781712702184, 0.6413392290701438, 0.6552430316093982, 0.6059046802031767, 0.6166266590844525, 0.13399653558197766, 0.671152407695644, 0.6211918177276834, 0.6344756658230568, 0.5975038901189609, 0.5695508437713208, 0.549934907407863, 0.6207293346638777, 0.6325088149319243, 0.5821028114938591, 0.6914678898901593, 0.5862734862434098, 0.69290834903762, 0.7132381720287062, 0.7225662294809991, 0.727739313404873, 0.6610236541563186, 0.7411274327928468, 0.6910087477537379, 0.7191684212465939, 0.7161260446734401, 0.6745129674466047, 0.7170836859266523, 0.7772735624710253, 0.7747379607042162, 0.7688503282878292, 0.7648581600743544, 0.7736276890968582, 0.7616896908110617, 0.7528519066376907, 0.7491496230414132, 0.7847953096828154, 0.30711995098920575, 0.15330907254302728, 0.39943096667387223, 0.6482851187826274, 0.6409046744014144, 0.3594350129649052, 0.15899050593489172, 0.21112335840202345, 0.327053471737627, 0.5462116278719729, 0.6329479764776669, 0.5337998330738243, 0.528713163307764, 0.6252329211233025, 0.5698605386496195, 0.6074086186180666, 0.6383409241762816, 0.6383423412429556, 0.8620476697341445, 0.8672346305653796, 0.850224818335875, 0.8399239702124992, 0.8128356602724517, 0.8532276262383567, 0.8444364542664617, 0.8412959032726958, 0.8489777554203115, 0.11289443882646355, 0.14809140421361822, 0.1256348359914946, 0.12620918345272525, 0.5138452747840752, 0.12656842261663948, 0.1552352757320281, 0.1546645207951729, 0.15404921861919652, 0.5897488260562478, 0.2583398665957032, 0.453486765678061, 0.1593517231182059, 0.6301908705965568, 0.20988423110166188, 0.16297303536962915, 0.3460945878548587, 0.13246032344924297, 0.7158762336250106, 0.7140785345064489, 0.6843066411853557, 0.5827110224346372, 0.5604078146554192, 0.7033964553509813, 0.7395220976632216, 0.6918953213150724, 0.5233313427075801, 0.36680915517545487, 0.3752541716556148, 0.3407982878187139, 0.38374745576398395, 0.5540076068426323, 0.5077072626939005, 0.5647218818646875, 0.27212315894935746, 0.4571441580668618, 0.22720469580246072, 0.2369486003769118, 0.2085536677219748, 0.22265362208923412, 0.21625291451977657, 0.21207130168190524, 0.23623621456760668, 0.22849550491846593, 0.19633041807604357, 0.2357224154650025, 0.200519154803248, 0.2044198566562051, 0.24144131155151027, 0.22395988131522826, 0.21810514185605268, 0.19580093179188252, 0.20842116736473304, 0.7338189378357958, 0.9029166591413479, 0.18562530034672353, 0.9142752710085031, 0.17845037486804938, 0.1990971800443596, 0.9110831551065434, 0.8933875751413156, 0.1607250204938767, 0.15672368153912264, 0.9089897840844475, 0.20957759637552553, 0.886482904018953, 0.8939763327548125, 0.20985947755623746, 0.15556437839763237, 0.15369766866385726, 0.8380674483953372, 0.8885051647370916, 0.186849428809566, 0.19284970939506618, 0.17148586702363178, 0.17835830880832615, 0.18153719119864287, 0.19280764211774382, 0.1808333308072586, 0.18462516318194977, 0.1782017612683372, 0.08734962668623047, 0.09516266816370211, 0.09308596706245531, 0.0934499506586639, 0.08505192051439958, 0.08846406436915477, 0.09114364035993183, 0.10068088736521019, 0.09113056737293301]}, "mutation_prompt": null}
{"id": "5503d57b-1910-41b9-a3d2-bca45ad75263", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10.2 * dim)\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                self.F = 0.4 + (0.6 * (1 - evaluations / self.budget)) * np.random.rand()\n                mutation_scaling = np.random.uniform(0.6, 0.8) \n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.8 + 0.2 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                if np.random.rand() < (0.15 + 0.3 * (np.argsort(scores).tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[np.argsort(scores)[:max(1, int(self.population_size * 0.15 * (1 - evaluations / self.budget)))]], axis=0)\n                    trial = trial + np.random.normal(0, 0.15, self.dim) + np.random.normal(0, 0.07, self.dim) + 0.07 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Enhanced adaptive exploration with stochastic selection and convergence rate adaptation for improved optimization.", "configspace": "", "generation": 90, "fitness": 0.48761457177174283, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.49 with standard deviation 0.30.", "error": "", "parent_id": "b14afbbd-784c-4348-a5d5-ccad650b4a19", "metadata": {"aucs": [0.8747848595006751, 0.8724459717745234, 0.8812448414197401, 0.8849604420090508, 0.8858896213146006, 0.8844132170117017, 0.8836897821129731, 0.8822204240704631, 0.878192085111484, 0.7580489841027502, 0.7488851798553853, 0.72607017230889, 0.7613464491539443, 0.7598265081951661, 0.743519830285304, 0.7612441476178355, 0.7691638853833483, 0.7556973235044687, 0.1571862124741381, 0.14184251799618108, 0.16319633996255722, 0.589274585543841, 0.1350953011605558, 0.4543294418017755, 0.12426307330716513, 0.11307593099542557, 0.12314697997594226, 0.15736928583334753, 0.10820389377217221, 0.12993840548687763, 0.11715157356112993, 0.11336878802148764, 0.10530452982148764, 0.11052840894506122, 0.11170254452404749, 0.13871135680644764, 0.9610521650757252, 0.9774206007936833, 0.9512392899833384, 0.9756936400482634, 0.9702383623708545, 0.9724322942570833, 0.9895908973464365, 0.9862583538780773, 0.959950872227618, 0.6964979428745246, 0.6943796458239784, 0.7293563175585142, 0.6874297063375063, 0.701695316429868, 0.7333973954695672, 0.7000353323204147, 0.6955499651475598, 0.7248018515761503, 0.9023235821274819, 0.8836184381027461, 0.8884813008609427, 0.2785511475301645, 0.8649300546717901, 0.8993012758321858, 0.8500619769548948, 0.864299349054547, 0.8989597515136954, 0.5857477521892074, 0.6224406063751573, 0.13058148910538603, 0.6882819415297162, 0.651095733961639, 0.7421540660078848, 0.6564216532247293, 0.6727366898773534, 0.6464153459391386, 0.6400644323322187, 0.6693204921996945, 0.6798568701449539, 0.7350896710374313, 0.6401243902429647, 0.6976891284250561, 0.718244596892229, 0.5745285523713338, 0.6880003242039745, 0.6519718735468742, 0.5483001373709339, 0.5843979599243915, 0.055021435878828795, 0.6561872540323628, 0.604394748382496, 0.6449735959478238, 0.6544604287608771, 0.6530318406576092, 0.7265909829353352, 0.7078819126536622, 0.7499815333543057, 0.7256876914734309, 0.6974014774582437, 0.7215554291669689, 0.7536326571636364, 0.7117152684411763, 0.7249734739290253, 0.18797834562032245, 0.10120322709419693, 0.15920271345790282, 0.23682974385541167, 0.5769727651025991, 0.33718166147481676, 0.13887751277617932, 0.10593143795079663, 0.3885760137753649, 0.5443792802758399, 0.5376777740511903, 0.4927296333478125, 0.5527029837917448, 0.5399708634065192, 0.5160363259044008, 0.5651939921291902, 0.5292546147664177, 0.5664801286311403, 0.8212080873052218, 0.8315893724348777, 0.8271198608157255, 0.8208749848520485, 0.819443434877775, 0.8345816824229007, 0.827018349623878, 0.8219338219510768, 0.8362762083458142, 0.144978812392755, 0.10770885885997428, 0.12871764580241574, 0.1365100558952398, 0.12248190606701936, 0.133959024382711, 0.21092342916761908, 0.13023182650121778, 0.14343565146292236, 0.18615256672017078, 0.13019801147286414, 0.3940686689803069, 0.4167491310971464, 0.6198392506931302, 0.24073510716020197, 0.6570831737850092, 0.26184243260140416, 0.15675800395776318, 0.6683944198815257, 0.5685771004146094, 0.5485757207250284, 0.6428971036569664, 0.4693405880779472, 0.5341616693046747, 0.6925468090618799, 0.7090133391714705, 0.5039576192311521, 0.4398150727848693, 0.3292639054518949, 0.5313004937091714, 0.5619973092349912, 0.35446807135790437, 0.4687849665281535, 0.46088854455364825, 0.5928515562569625, 0.3119486937067164, 0.21189207599521775, 0.2230837993950059, 0.21017985828861052, 0.22981333155653483, 0.21946856470013887, 0.21477292895467814, 0.20516220711881883, 0.19549407040056666, 0.2018196039225888, 0.19422494306322746, 0.2227486610946342, 0.2475685252342973, 0.22320150266470917, 0.2464226645002472, 0.20628741967858, 0.20455312331915876, 0.22096984073544357, 0.24562348607387008, 0.1667932843157307, 0.8912529002896403, 0.16592419943154657, 0.9071149669556731, 0.19981035878643327, 0.1462619935546592, 0.14219344790518096, 0.17127342318111372, 0.9209422001912939, 0.8845844334986429, 0.21233750992526235, 0.21063306288545658, 0.8459865729169178, 0.2092226302623017, 0.16605014220685188, 0.8828113669094042, 0.15627724966073242, 0.16669438749594356, 0.18152022427578773, 0.21011671876322036, 0.17250865783570102, 0.19065438407300506, 0.17693552895390807, 0.18179600472207635, 0.18073331875191068, 0.2027076404101561, 0.18146844554631347, 0.08312155666328458, 0.08007782084376358, 0.1004069517001952, 0.08642016620070969, 0.08302587639384074, 0.08908847912959572, 0.08540680625577046, 0.09865171461866307, 0.08844195231124397]}, "mutation_prompt": null}
{"id": "39c17a83-48dd-4d3e-9afa-23d8a25c1079", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10.2 * dim)  # Slightly increased population size\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # Reduce population size as evaluations approach budget\n            self.population_size = int(self.population_size * (1 - (evaluations / self.budget) * 0.5))\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor with adaptive scaling\n                self.F = 0.3 + (0.7 * (1 - evaluations / self.budget)) * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutation_scaling = np.random.uniform(0.4, 0.6)\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[np.argsort(scores)[:max(1, int(self.population_size * 0.1 * (1 - evaluations / self.budget)))]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Introduce dynamic population size reduction to enhance convergence towards the budget's end.", "configspace": "", "generation": 91, "fitness": -Infinity, "feedback": "An exception occurred: ValueError(\"Cannot take a larger sample than population when 'replace=False'\").", "error": "ValueError(\"Cannot take a larger sample than population when 'replace=False'\")", "parent_id": "b14afbbd-784c-4348-a5d5-ccad650b4a19", "metadata": {}, "mutation_prompt": null}
{"id": "f25185a7-748a-4e6d-8190-61c38e97fb88", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10.2 * dim)  # Slightly increased population size\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor with adaptive scaling\n                self.F = 0.3 + (0.7 * (1 - evaluations / self.budget)) * np.random.rand()\n                # Bias towards both the global best and random individual to maintain diversity\n                random_individual = population[np.random.choice(indices)]\n                mutation_scaling = np.random.uniform(0.4, 0.6)\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a) + 0.1 * (random_individual - a), self.lower_bound, self.upper_bound)\n                \n                # Adaptive crossover probability based on diversity\n                diversity_factor = np.std(population, axis=0).mean() / (self.upper_bound - self.lower_bound)\n                self.CR = 0.85 + 0.15 * (1 - diversity_factor)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[np.argsort(scores)[:max(1, int(self.population_size * 0.1 * (1 - evaluations / self.budget)))]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Enhance convergence by implementing adaptive crossover rates and diversity preservation mechanisms.", "configspace": "", "generation": 92, "fitness": 0.4732164015389222, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.32.", "error": "", "parent_id": "b14afbbd-784c-4348-a5d5-ccad650b4a19", "metadata": {"aucs": [0.9081781802966378, 0.9141425872184622, 0.9182626829202307, 0.9135072285308748, 0.9137272649928687, 0.9159681439910715, 0.9188685308012889, 0.9070979047509921, 0.9218112617324735, 0.7794116442053424, 0.8081885288872317, 0.784256863753516, 0.660184446749999, 0.14476485862566135, 0.7764237892703152, 0.8139000790157435, 0.12168386670552933, 0.1275059766243094, 0.124233582904128, 0.15892940388948884, 0.1112125404859664, 0.17005957630512514, 0.14836917955076934, 0.14935266580410111, 0.10644416936818635, 0.15832315067034064, 0.12738963031762818, 0.10383533707976933, 0.12182617014725672, 0.11668923920925756, 0.15697945034296812, 0.14736677972616852, 0.0703519739796904, 0.15658318289173567, 0.10024667653767194, 0.13639670884670108, 0.9546287112430609, 0.91116605153616, 0.9615351252853643, 0.9906254913926074, 0.9227341812996309, 0.9392421789896596, 0.9517707261953205, 0.9443679862477068, 0.9795163929936614, 0.7062486628376692, 0.726489860551921, 0.819518517538781, 0.81547475610622, 0.7221844296227933, 0.7185278838000468, 0.8241018231561463, 0.7614759488210301, 0.8223164119666848, 0.9298105783886577, 0.9171860523510175, 0.9360613818604626, 0.9277607140487895, 0.931910422367788, 0.9444292471646275, 0.9062013897280304, 0.9193522927836599, 0.932456525190421, 0.2912327407421018, 0.3041727287285425, 0.3034671986445149, 0.1965724899466852, 0.331853255707928, 0.6141639514715298, 0.20332197038185895, 0.718086471437269, 0.13293804438186907, 0.1937778412196689, 0.21155879318767257, 0.24244928168264113, 0.2733522736336539, 0.8160474190505982, 0.23090022085312767, 0.23815108284814612, 0.134217228994297, 0.2114570404552858, 0.23488170578870393, 0.36285936192782875, 0.24732737655866888, 0.7991237422342157, 0.8188691313550243, 0.17523684182569854, 0.803434014954259, 0.13272348813638624, 0.774784006568434, 0.8512387751807524, 0.8010896186824584, 0.849849287738198, 0.8052894054427125, 0.8458921277025504, 0.8439213467772174, 0.851147995460221, 0.8354358269051139, 0.8319847240123931, 0.3275784518681455, 0.19435411809017067, 0.18678108070838906, 0.15785979273793216, 0.28814040170210986, 0.1760807803691138, 0.350765179920585, 0.16793248893242385, 0.2432957693248432, 0.5819374808657365, 0.6368599882730254, 0.6301950238243865, 0.4084752500800788, 0.7376761138088143, 0.692893362610759, 0.36304131399576667, 0.48779514711582694, 0.6105038051336755, 0.8844984130140107, 0.7840423677299075, 0.8770427321713816, 0.79344804880463, 0.8921884598015114, 0.8988552101545993, 0.8460526755218225, 0.864373753108989, 0.797196379000568, 0.13662536044409956, 0.1254188281480958, 0.16506780079307082, 0.15052417677071173, 0.15164825911157442, 0.17048766250167569, 0.1442155098282486, 0.148228101066618, 0.7281434531813412, 0.5491047269875396, 0.37399402865888154, 0.5470211623835997, 0.3039101557022831, 0.6308432260940756, 0.22983808980095055, 0.6620283789371773, 0.1850589938132573, 0.14675537263603233, 0.6498916854970291, 0.5093018876963448, 0.500017388296979, 0.7481990006622836, 0.4764083387003404, 0.632602938811519, 0.7863890595224652, 0.4655634628006121, 0.6172050131385092, 0.2819125493444832, 0.43365437888379543, 0.4910992152025667, 0.31529894057671526, 0.5335274157149199, 0.7169045140923291, 0.6375852128031694, 0.7488408596100815, 0.27567475851906764, 0.25187619332973976, 0.24219509545456597, 0.24032416705482296, 0.27684313465725485, 0.22378964156036896, 0.22135546261287475, 0.21902994784869811, 0.253917973318456, 0.2212429256629086, 0.24793202070905307, 0.24824583994465632, 0.22155553210617673, 0.2512834047135041, 0.20815177540768848, 0.21880999941634793, 0.18190947165590177, 0.19769997680046603, 0.17906379817214435, 0.1874704375955334, 0.18668560332565098, 0.16791148540041068, 0.9421269743213672, 0.19947311357975206, 0.14762876076039155, 0.1623288261328103, 0.19392605486130188, 0.9440293154007099, 0.9362101186519893, 0.8856847928309578, 0.9261327324918828, 0.9402245118444202, 0.1672140675191076, 0.21044855038283306, 0.16706345362103092, 0.12822902911967016, 0.9163725590046606, 0.18286535269295723, 0.18364301091377344, 0.1902116906419623, 0.1833807054582549, 0.18087977012405598, 0.19553070894292912, 0.21452256703500716, 0.17755267498036997, 0.17278463812941935, 0.08839434048325734, 0.07922872278034954, 0.08960291186747071, 0.09592876955805318, 0.08875905058556421, 0.08840097009488634, 0.08719432460628085, 0.0944741425541279, 0.11577232707106866]}, "mutation_prompt": null}
{"id": "c57c433f-a77b-48e6-b840-91b7d5146ebf", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10.2 * dim)  # Slightly increased population size\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor with adaptive scaling\n                self.F = 0.3 + (0.7 * (1 - evaluations / self.budget)) * np.random.rand()\n                # Dynamic adjustment in the mutation scaling factor\n                mutation_scaling = 0.3 + 0.3 * np.random.rand()\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Adaptive crossover probability\n                self.CR = 0.85 + 0.1 * np.random.rand() + 0.05 * (evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[np.argsort(scores)[:max(1, int(self.population_size * 0.1 * (1 - evaluations / self.budget)))]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Introduce adaptive scaling in crossover probability and dynamic adjustment of mutation scaling factor to enhance exploration and convergence.", "configspace": "", "generation": 93, "fitness": 0.491442733563412, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.49 with standard deviation 0.29.", "error": "", "parent_id": "b14afbbd-784c-4348-a5d5-ccad650b4a19", "metadata": {"aucs": [0.8778583105562143, 0.8862680751242973, 0.8866870722641725, 0.8850285180026448, 0.8762753889638436, 0.8893565717342475, 0.8874344020202252, 0.8851199268126763, 0.8869727963798932, 0.7666010334666946, 0.7679926170365533, 0.7579863139705553, 0.7810356406388382, 0.7672568000503447, 0.7771255253855464, 0.7516866845476821, 0.769935523468121, 0.7604110053506112, 0.3576795280748436, 0.15848795564225215, 0.13910832063094714, 0.15114723061690472, 0.14233361519918597, 0.15273085406236808, 0.3553993915100727, 0.15445758993822079, 0.14832476461338262, 0.11673039548441289, 0.12246442408182212, 0.12306033357749457, 0.13263475340353748, 0.10198008549002313, 0.12040651256637358, 0.16158450621517728, 0.12949282458329126, 0.1301368164923491, 0.9427149896571401, 0.980431371483741, 0.9443352498351127, 0.9548937049208388, 0.9690856647133153, 0.9268623564581457, 0.9503914384752375, 0.9616685201231948, 0.955381502629478, 0.7373309177560203, 0.7403341872860143, 0.7327976157284417, 0.7523290762550983, 0.7335048676365757, 0.7318475209367823, 0.7364718400513683, 0.7523477797103721, 0.7492164531347539, 0.8840018057720924, 0.8684049484861219, 0.8895643552585858, 0.8939127098599249, 0.8818636766906404, 0.21268052356499478, 0.8880204472719024, 0.8970280740195158, 0.8691607499736036, 0.590806135523914, 0.7368508233786787, 0.5694947658789946, 0.6180024964314808, 0.13423924099995843, 0.7012620982363322, 0.6786496732523636, 0.4840409473670083, 0.5997381198142167, 0.13231298780403267, 0.6396708962102848, 0.45788369891152236, 0.5509225787511394, 0.6555086851241678, 0.6399039520175402, 0.4933827000288268, 0.6053249983204514, 0.4242447220859289, 0.5411735276795497, 0.6892899787018111, 0.6232640921773946, 0.6857044193713068, 0.6131784265143922, 0.24133719321777247, 0.6939041990960648, 0.6506157739275341, 0.6807437661740221, 0.7446214526947931, 0.7303756884148096, 0.7515266950108422, 0.7410474856803841, 0.7218535254417797, 0.717598592575917, 0.7539733341441301, 0.7268844200675948, 0.7592561805548637, 0.09051265987754742, 0.4115018401404502, 0.4340661665551424, 0.31175683528903697, 0.307978485307279, 0.3439293142047336, 0.22549710423644598, 0.29705042901263956, 0.20326354031011795, 0.5580367478372185, 0.47475105923746375, 0.4487244887234869, 0.5244742054906774, 0.5356209537356194, 0.5243524668166712, 0.4241856301852065, 0.5993529348430042, 0.5139776891787496, 0.8397705955112589, 0.80786946422276, 0.8477137652719376, 0.8316757788330053, 0.8312181706519433, 0.8337057395341019, 0.8359586011604117, 0.8338050839139226, 0.8025027883380457, 0.15864680058700342, 0.12149246757401577, 0.14535968653917186, 0.12840379621547748, 0.13964304797621374, 0.1411219642832472, 0.11115178783012303, 0.12414636684778635, 0.12275934256578513, 0.40274362543081377, 0.1700875531507745, 0.25359693857174226, 0.3649811216024478, 0.5569670900598954, 0.15202699908542305, 0.13671406149453902, 0.3979623220619155, 0.24041502063455655, 0.547749304869536, 0.6253279196263122, 0.5501756300054443, 0.6802364809688106, 0.6870477703818612, 0.5652895466057181, 0.712872339698825, 0.5763928948015273, 0.6999168938807452, 0.5606963857189817, 0.5918423246708786, 0.5075432637419987, 0.42425112915499474, 0.5536801520341226, 0.5788841338968789, 0.32709833341710814, 0.5791643573713046, 0.5824896383859428, 0.21239593798389056, 0.1973922869202398, 0.22718777495628883, 0.23138749598541186, 0.20939244182653138, 0.21291283096791658, 0.21105827665220678, 0.24646954691520728, 0.20479427847603937, 0.21035287916576895, 0.7340759731255352, 0.2042386362582561, 0.23686047945489808, 0.7160644302885857, 0.20237168430776042, 0.18614814019178083, 0.24726486735581066, 0.7255066426923145, 0.2086321162144923, 0.18374432749827851, 0.18623480396846093, 0.9015086863723974, 0.16867895351628193, 0.14640201333920888, 0.8412983429779148, 0.17604058625950092, 0.889668863542286, 0.8851982457058372, 0.7795466796632128, 0.8348054942222549, 0.20906972898913667, 0.20821167942511642, 0.20861465534470514, 0.1671589019526709, 0.12835550595954848, 0.16613940016651962, 0.17526708960024884, 0.18664535347746747, 0.17866096092449513, 0.18875944578660442, 0.17843717714220986, 0.17894489813198033, 0.1889369985063164, 0.20440451378016045, 0.1688954920521626, 0.09896420224837821, 0.0902866543952423, 0.08242099313635132, 0.08944860143600941, 0.0926256802451002, 0.08887593057992182, 0.0936123342219165, 0.08711358147810966, 0.0876531965246099]}, "mutation_prompt": null}
{"id": "f82656c3-86c1-4407-9af0-a96166c79f96", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10.2 * dim)  # Slightly increased population size\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor with adaptive scaling\n                self.F = 0.3 + (0.7 * (1 - evaluations / self.budget)) * np.random.rand()\n                \n                # Adjusted mutation scaling for enhanced diversity\n                mutation_scaling = np.random.uniform(0.5, 0.7)\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[np.argsort(scores)[:max(1, int(self.population_size * 0.1 * (1 - evaluations / self.budget)))]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Enhance exploration by adjusting mutation scaling factors for better diversity.", "configspace": "", "generation": 94, "fitness": 0.5117845097238342, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.51 with standard deviation 0.31.", "error": "", "parent_id": "b14afbbd-784c-4348-a5d5-ccad650b4a19", "metadata": {"aucs": [0.9028448523779268, 0.8991196840165409, 0.9057284806281098, 0.8958515341060271, 0.9064912844398708, 0.9000868436479164, 0.8992927644140221, 0.9010460334013225, 0.9065434052683455, 0.8112047208904236, 0.8101473412227749, 0.8023321681383925, 0.8124349331229568, 0.8087738716072852, 0.8021639881171376, 0.7796099167887078, 0.7604039282772488, 0.792754830954918, 0.13022628465562736, 0.1490713020232588, 0.13892884187938304, 0.14711095745218494, 0.18378787633099714, 0.13557372297690795, 0.16865229779021484, 0.1431995250938085, 0.1120032052434008, 0.10934307918322883, 0.07761087909563669, 0.1202808623392635, 0.15205584433608543, 0.14279779602274534, 0.11763526184612239, 0.1350586149510411, 0.11895260956128517, 0.10655320093508747, 0.9645726427244073, 0.9869802707777221, 0.9778256109909951, 0.9881304717310376, 0.9753735010780498, 0.9766111381192065, 0.9925711256230101, 0.9841602266636688, 0.9767831125631478, 0.775604652019443, 0.7667337153243063, 0.763615066090829, 0.7857575356726816, 0.7819601032718759, 0.7803629027784864, 0.7867368427023758, 0.777511911781818, 0.7919186665084201, 0.23000781259190684, 0.8784418406222627, 0.9007244807580933, 0.9248909560999785, 0.9155299078753772, 0.9154728992969143, 0.8982981094323232, 0.2356721788813324, 0.9182392490907092, 0.1341054754261457, 0.6255259415182575, 0.5929291418319755, 0.7653261267126097, 0.6585400681355978, 0.7666481309186601, 0.7165812636446043, 0.713860395776396, 0.6649963038323331, 0.134614719951905, 0.715097724560521, 0.5862621840315481, 0.7088246182132996, 0.7088470569235257, 0.6764645806647234, 0.7245118972418931, 0.7327844051180565, 0.621439993506288, 0.6990491810178725, 0.6563026838633155, 0.30678976624307375, 0.731538435760872, 0.7175983872030012, 0.6765010829223732, 0.7517516432616593, 0.7351394245531679, 0.735153193625375, 0.8069321054960061, 0.7814928109853873, 0.7813525374295416, 0.7867086576954933, 0.7709489560485918, 0.7741940554016299, 0.7771700533683819, 0.7874068140138214, 0.8045707865878661, 0.17515426857491678, 0.17766585613421648, 0.22678170956748067, 0.3993953318545944, 0.366695387630516, 0.2686535989072524, 0.17635530598730842, 0.21622358369115469, 0.4177224985491874, 0.6775818003804528, 0.608545278986964, 0.5302987120648619, 0.571828579676472, 0.6415200195404849, 0.6601826556755452, 0.5221254672623268, 0.6012961552629663, 0.6691124894393004, 0.8628743283144543, 0.858098109471863, 0.8501592308553177, 0.8641530004546529, 0.8506200862512798, 0.8744030831237766, 0.8727480405782604, 0.8584922421089521, 0.8609161587558426, 0.10847417395865255, 0.12530578404679926, 0.13789596719906527, 0.13719281915910764, 0.1287436759594368, 0.15185321658044415, 0.15659858308523567, 0.12964797085338053, 0.1514585534135222, 0.44368723632350626, 0.56410547267267, 0.6875434638303433, 0.2375309473033741, 0.2575459375551641, 0.17237752263412653, 0.2164164658042046, 0.21406853089995526, 0.2686777795887909, 0.6859512588691143, 0.596569742734094, 0.7373898508498575, 0.5112502836649023, 0.4529464501889443, 0.5663666584509918, 0.7512905779474512, 0.5795615729341814, 0.6017000418309697, 0.7115702723224041, 0.3710668090715219, 0.6771905730504156, 0.64453857389727, 0.23855688823878607, 0.4114461783084453, 0.5464523456921568, 0.6636934514939828, 0.5869862865809935, 0.23541587701063083, 0.23843409246213898, 0.21869847069379555, 0.311675157898208, 0.21988858984449433, 0.2134708710383565, 0.22108985938597925, 0.20182483653556738, 0.2183030398614858, 0.21088652214770065, 0.21271712167571866, 0.222086536298423, 0.25034910728385795, 0.22045929118019836, 0.77315601461536, 0.24598440576773017, 0.2239308904258429, 0.20624418268361233, 0.9232987941581654, 0.1763029094681875, 0.18776215348216707, 0.19932268504932749, 0.19892821075933487, 0.9239453864475679, 0.9131502038101129, 0.1664279318256744, 0.16628985776077476, 0.9251041261277856, 0.21290369098465756, 0.9003536444258795, 0.16775016122842556, 0.16813835981378833, 0.15547141316341262, 0.15507896433734059, 0.9218423265677367, 0.9153865386144011, 0.18537370170077705, 0.19203009291614492, 0.19430123936831578, 0.19614864579858415, 0.18269734980552976, 0.19410633200589522, 0.18929268349070738, 0.1724972345579152, 0.19168336727285462, 0.11658827535301974, 0.08890809218336548, 0.08388509783803388, 0.08266305240711702, 0.0961309032383435, 0.0890177045455024, 0.1285356269040414, 0.09670136147206754, 0.09544594086908054]}, "mutation_prompt": null}
{"id": "77dbc872-499f-4b7e-85da-bd7daf6d2513", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10.2 * dim)  # Slightly increased population size\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor with adaptive scaling\n                self.F = 0.3 + (0.7 * (1 - evaluations / self.budget)) * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutation_scaling = np.random.uniform(0.35, 0.6)\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[np.argsort(scores)[:max(1, int(self.population_size * 0.1 * (1 - evaluations / self.budget)))]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Introduce a more diverse mutation strategy by slightly modifying the scaling factor.", "configspace": "", "generation": 95, "fitness": 0.5082927703073875, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.51 with standard deviation 0.30.", "error": "", "parent_id": "b14afbbd-784c-4348-a5d5-ccad650b4a19", "metadata": {"aucs": [0.884499007410169, 0.8932376125686862, 0.9011915380462343, 0.8819876458568134, 0.894275118025594, 0.8938156649218603, 0.8964332359020873, 0.8863268886016424, 0.8826294038582673, 0.7859117226270598, 0.758952033539124, 0.7167016330913587, 0.7822752614561308, 0.770506440279493, 0.772960253156182, 0.7730149794167064, 0.7620822457881046, 0.7716921056985377, 0.288979559500787, 0.1608853977557041, 0.13472717974723236, 0.1531262042608994, 0.1443433733193622, 0.1546477933006296, 0.4723271334250788, 0.1590047586145905, 0.13855475609287604, 0.11106531505943784, 0.124492575835356, 0.11895870370700956, 0.11331719917028127, 0.10787828884878947, 0.12933435077785216, 0.14349345825440885, 0.13507398102312673, 0.1211197206495539, 0.9531007432382024, 0.9516512501473126, 0.9620681460696254, 0.944856043289451, 0.9410612486489947, 0.9567845458775576, 0.9549875062170344, 0.944490150329094, 0.9525003185729156, 0.7433491778479008, 0.7452002232504142, 0.7455919618861484, 0.7375336722189263, 0.7612774802485652, 0.7504448121011326, 0.7423074487518541, 0.7613734741319031, 0.7580764440254533, 0.8882244088031959, 0.9013225944461759, 0.8730914228332978, 0.8969597551429924, 0.9068949741222395, 0.8955559262722312, 0.8930224295122939, 0.9057779763717255, 0.8897955056899475, 0.6261898723141305, 0.6714938471306727, 0.7030250033320928, 0.6056271892166304, 0.6682145600969855, 0.5750311392880423, 0.6370167205965198, 0.6673931612968285, 0.6607382338401397, 0.593904666942144, 0.7062640303483989, 0.693015590974384, 0.7212677217699608, 0.6088082274366498, 0.5349408781750578, 0.13449961263596344, 0.6571906889985837, 0.5664694499971206, 0.6535534990098819, 0.6966491481597714, 0.6861910397351392, 0.6872226033541315, 0.70308940577915, 0.7196161585911057, 0.6983482160014848, 0.6379218709415961, 0.6758371430757462, 0.7749046208132442, 0.7508183761764394, 0.7899309441805078, 0.7619018577618373, 0.7364156937044029, 0.7593201825680976, 0.774278061426871, 0.7382773707098298, 0.7610007896484319, 0.08274993200125047, 0.1914735113481979, 0.2269085963728028, 0.6640708111441234, 0.31332215864085133, 0.20479427092093683, 0.14365394977093815, 0.32209192120685537, 0.3032246912672716, 0.6211885422213411, 0.513735157398687, 0.505641903958181, 0.5487622112252653, 0.5181989509762497, 0.6223733537014285, 0.5708231677936384, 0.6327920986813711, 0.575519583126787, 0.8502490707866861, 0.7903729574932882, 0.8315887174147252, 0.8510485879991906, 0.8593864141974337, 0.8501981826304003, 0.8628041270000872, 0.8331596498990815, 0.8481486584095317, 0.1261147429630961, 0.12211140784663344, 0.1520106407232713, 0.10392001552324759, 0.11791766964739414, 0.16323340674113496, 0.12414710803685536, 0.16314885891475883, 0.15415466404116362, 0.13164736891638273, 0.18449687622334932, 0.4363834033206444, 0.2831208354905207, 0.47404309494941776, 0.1611789129718192, 0.2781957359789201, 0.1522618454650857, 0.15604316173021526, 0.5060531975133826, 0.6836273391713689, 0.5378247554841824, 0.553265258857573, 0.5192491637478318, 0.6021536723253833, 0.5611143365691162, 0.6984411728363902, 0.5306153636800589, 0.3768512928338109, 0.5064848034351397, 0.5890398951159397, 0.6329682971860855, 0.5263237899684259, 0.3819558167211241, 0.6437633452003797, 0.6331571321092113, 0.491798073558784, 0.21416812804595642, 0.2087679811365829, 0.20714067392176416, 0.1971429079230096, 0.21919210012190649, 0.20884031703700978, 0.22426001706352505, 0.2000192188757144, 0.2037578103240114, 0.20701367955743444, 0.21790570761036643, 0.21790086274767073, 0.2442911117210066, 0.1879030634348745, 0.20197734657368915, 0.21929509190845464, 0.23619288904269187, 0.24091866790357963, 0.8850896579334504, 0.1645052181548874, 0.9087875041720271, 0.917522391035603, 0.8974946189244997, 0.19882121508978512, 0.898410000491713, 0.9013221688806834, 0.16562481994786138, 0.9257110658625292, 0.8706471305937384, 0.12655764642276468, 0.8934036373820473, 0.20984388387543695, 0.2090625561057079, 0.16714743832981116, 0.12839141384247754, 0.21258520363905542, 0.18167527586940224, 0.18827805609616044, 0.18211248051537032, 0.17591242512296035, 0.17984080111861644, 0.18365751143366238, 0.17093257783922622, 0.16996297971963725, 0.18743974894399262, 0.09334645290836019, 0.08261568349979476, 0.08495130321376887, 0.0866177106740521, 0.09143305961803239, 0.1011141560730906, 0.08768888216871362, 0.09670111199633336, 0.09875563490489947]}, "mutation_prompt": null}
{"id": "7a2c41ea-e7ba-4bfa-8985-7c69c5d21e7f", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10.2 * dim)\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Adjusted dynamic mutation factor with refined scaling\n                self.F = 0.4 + (0.6 * (1 - evaluations / self.budget)) * np.random.rand()\n                # Slight refinement in the bias towards the global best\n                mutation_scaling = np.random.uniform(0.35, 0.55)\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[np.argsort(scores)[:max(1, int(self.population_size * 0.1 * (1 - evaluations / self.budget)))]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Introduce a refined dynamic mutation strategy and slightly adjusted bias towards the best solution for enhanced exploration.", "configspace": "", "generation": 96, "fitness": 0.5010392434460217, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.50 with standard deviation 0.29.", "error": "", "parent_id": "b14afbbd-784c-4348-a5d5-ccad650b4a19", "metadata": {"aucs": [0.8594890075677686, 0.8555696583140151, 0.8635582611376946, 0.869441842381188, 0.8647115183512684, 0.8628081727032606, 0.8629608474269657, 0.8661314780885043, 0.8643234794090259, 0.7289554762818204, 0.7307504324650698, 0.7319777483772658, 0.7498713962172553, 0.7228775546524783, 0.7472428527789532, 0.7230028799256818, 0.7329923547515265, 0.7117687486810256, 0.14802303122842053, 0.3272269422349735, 0.1357144103702269, 0.12530074294128613, 0.1361931904616882, 0.1367247013432723, 0.26560323016336684, 0.12523841746897357, 0.14502017662734856, 0.12913532911472247, 0.1266817910696173, 0.13811970049630495, 0.14037999805963608, 0.13470993054399516, 0.13406511118123032, 0.11381933731097937, 0.11926752225006965, 0.12484824352627433, 0.9788952817086998, 0.979411485498934, 0.9750668133454875, 0.9598080232355841, 0.964908529054395, 0.9481586523118006, 0.9502267847280932, 0.9518143871282579, 0.9548739759764726, 0.698721585967417, 0.6722948127273616, 0.703327047260268, 0.701980123309687, 0.6930406874899571, 0.697406055571449, 0.7180907087586541, 0.7106146409826769, 0.7101953239289132, 0.8958633079723854, 0.8588079781029279, 0.854451306738215, 0.8764109176332389, 0.8605872963733384, 0.8943560205420549, 0.8470053893681189, 0.8481268547520129, 0.858867412338192, 0.589860963816659, 0.6168874351318192, 0.6032875380570109, 0.5538116624790214, 0.6549507192448083, 0.5613538951619436, 0.1333788217130517, 0.6194221994355511, 0.6373567635092721, 0.6008806812729653, 0.6509378398665461, 0.6640970722822033, 0.5878921805439791, 0.6567607635842144, 0.5943850443188117, 0.6033347534371925, 0.6549501926912369, 0.7079565381577779, 0.6743331224450912, 0.6027988509481624, 0.6411164368901211, 0.554826522267363, 0.6318787173839373, 0.6437640313821325, 0.6342135541574457, 0.6419519377201877, 0.6365906687994916, 0.6876776844102552, 0.718609464683442, 0.7203772823305786, 0.7168135975256745, 0.7159669081510761, 0.7054556138863328, 0.7337328817719124, 0.7378956569750355, 0.7482044026231971, 0.22551684282538076, 0.10388740891644466, 0.14684455824926312, 0.5521449129211584, 0.5639423019868715, 0.39270042220026613, 0.16976412741296731, 0.37931362022540993, 0.25902735886739636, 0.563799879259882, 0.5252225115030966, 0.5337296254309536, 0.5625770905118646, 0.564726127010204, 0.560906802296679, 0.5425915852083143, 0.5435912314864167, 0.5559816678940599, 0.8243589064202773, 0.8146099386508707, 0.8113448406342221, 0.8085652347370474, 0.8056249732614734, 0.8040196529079924, 0.8145056086960787, 0.8056233493753598, 0.813314270464798, 0.1191857342720144, 0.10347217254220997, 0.12437537012396771, 0.11810218400363903, 0.27198192971362134, 0.10298508573291787, 0.11722535035684545, 0.10799203149049064, 0.1291990114289161, 0.270740328653179, 0.1597992647034282, 0.192815611733395, 0.15787582486382556, 0.1565499720535234, 0.1952170877621996, 0.15856802968639017, 0.12559960693071248, 0.14791263217139694, 0.6410107506601148, 0.5612836218674974, 0.6164370365346364, 0.6022947347829308, 0.6200803687603587, 0.5475659135108534, 0.6390957858246729, 0.5608859487105304, 0.6307496461722301, 0.4395707392875452, 0.5178609428462662, 0.4644842815057246, 0.5294800517523255, 0.4915661258954861, 0.5081852580792978, 0.5441637822139268, 0.5617463019876129, 0.5261569594038855, 0.21158395703449473, 0.22199373894238184, 0.22863434370879043, 0.24305565704653065, 0.19921930664221899, 0.23017049557263447, 0.20230935481494527, 0.23220000933750173, 0.24037760445073064, 0.21190439783505122, 0.2050455049168438, 0.6046833809218823, 0.6214952601243262, 0.18598548261814907, 0.19130735324267611, 0.19911646124566218, 0.5859198186421893, 0.22245418300073938, 0.9054846129621124, 0.8842169138198279, 0.8877761928340714, 0.9015902392267108, 0.1981702567498913, 0.7960246205229786, 0.891242864777876, 0.7893948063540468, 0.20905626783486542, 0.8784302055790116, 0.21300709577202936, 0.20735756696219332, 0.20638426567668544, 0.2053918119442235, 0.16709873483948046, 0.15327189580504308, 0.8693575805572995, 0.8837718734570804, 0.18820134245148679, 0.1753550896386925, 0.2007472975157819, 0.18898209799221444, 0.17554644764779637, 0.19093206156251608, 0.17627175093670522, 0.1811467380095535, 0.1797516529301273, 0.08671370952817692, 0.09421502691841832, 0.08659405114654561, 0.08484980312213775, 0.09768191836163131, 0.0857245992669805, 0.0880530772298298, 0.09253590202883366, 0.10071025714351345]}, "mutation_prompt": null}
{"id": "86bd9ffc-0a0f-47a0-81ae-bf3a2f4d4121", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10.2 * dim)  # Slightly increased population size\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor with adaptive scaling\n                self.F = 0.3 + (0.7 * (1 - evaluations / self.budget)) * np.random.rand()\n                # Adjusted bias towards the global best\n                mutation_scaling = np.random.uniform(0.5, 0.7)\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[np.argsort(scores)[:max(1, int(self.population_size * 0.1 * (1 - evaluations / self.budget)))]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Introduce adaptive weighting towards the global best solution and increase mutation diversity dynamically to enhance convergence.", "configspace": "", "generation": 97, "fitness": 0.5117845097238342, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.51 with standard deviation 0.31.", "error": "", "parent_id": "b14afbbd-784c-4348-a5d5-ccad650b4a19", "metadata": {"aucs": [0.9028448523779268, 0.8991196840165409, 0.9057284806281098, 0.8958515341060271, 0.9064912844398708, 0.9000868436479164, 0.8992927644140221, 0.9010460334013225, 0.9065434052683455, 0.8112047208904236, 0.8101473412227749, 0.8023321681383925, 0.8124349331229568, 0.8087738716072852, 0.8021639881171376, 0.7796099167887078, 0.7604039282772488, 0.792754830954918, 0.13022628465562736, 0.1490713020232588, 0.13892884187938304, 0.14711095745218494, 0.18378787633099714, 0.13557372297690795, 0.16865229779021484, 0.1431995250938085, 0.1120032052434008, 0.10934307918322883, 0.07761087909563669, 0.1202808623392635, 0.15205584433608543, 0.14279779602274534, 0.11763526184612239, 0.1350586149510411, 0.11895260956128517, 0.10655320093508747, 0.9645726427244073, 0.9869802707777221, 0.9778256109909951, 0.9881304717310376, 0.9753735010780498, 0.9766111381192065, 0.9925711256230101, 0.9841602266636688, 0.9767831125631478, 0.775604652019443, 0.7667337153243063, 0.763615066090829, 0.7857575356726816, 0.7819601032718759, 0.7803629027784864, 0.7867368427023758, 0.777511911781818, 0.7919186665084201, 0.23000781259190684, 0.8784418406222627, 0.9007244807580933, 0.9248909560999785, 0.9155299078753772, 0.9154728992969143, 0.8982981094323232, 0.2356721788813324, 0.9182392490907092, 0.1341054754261457, 0.6255259415182575, 0.5929291418319755, 0.7653261267126097, 0.6585400681355978, 0.7666481309186601, 0.7165812636446043, 0.713860395776396, 0.6649963038323331, 0.134614719951905, 0.715097724560521, 0.5862621840315481, 0.7088246182132996, 0.7088470569235257, 0.6764645806647234, 0.7245118972418931, 0.7327844051180565, 0.621439993506288, 0.6990491810178725, 0.6563026838633155, 0.30678976624307375, 0.731538435760872, 0.7175983872030012, 0.6765010829223732, 0.7517516432616593, 0.7351394245531679, 0.735153193625375, 0.8069321054960061, 0.7814928109853873, 0.7813525374295416, 0.7867086576954933, 0.7709489560485918, 0.7741940554016299, 0.7771700533683819, 0.7874068140138214, 0.8045707865878661, 0.17515426857491678, 0.17766585613421648, 0.22678170956748067, 0.3993953318545944, 0.366695387630516, 0.2686535989072524, 0.17635530598730842, 0.21622358369115469, 0.4177224985491874, 0.6775818003804528, 0.608545278986964, 0.5302987120648619, 0.571828579676472, 0.6415200195404849, 0.6601826556755452, 0.5221254672623268, 0.6012961552629663, 0.6691124894393004, 0.8628743283144543, 0.858098109471863, 0.8501592308553177, 0.8641530004546529, 0.8506200862512798, 0.8744030831237766, 0.8727480405782604, 0.8584922421089521, 0.8609161587558426, 0.10847417395865255, 0.12530578404679926, 0.13789596719906527, 0.13719281915910764, 0.1287436759594368, 0.15185321658044415, 0.15659858308523567, 0.12964797085338053, 0.1514585534135222, 0.44368723632350626, 0.56410547267267, 0.6875434638303433, 0.2375309473033741, 0.2575459375551641, 0.17237752263412653, 0.2164164658042046, 0.21406853089995526, 0.2686777795887909, 0.6859512588691143, 0.596569742734094, 0.7373898508498575, 0.5112502836649023, 0.4529464501889443, 0.5663666584509918, 0.7512905779474512, 0.5795615729341814, 0.6017000418309697, 0.7115702723224041, 0.3710668090715219, 0.6771905730504156, 0.64453857389727, 0.23855688823878607, 0.4114461783084453, 0.5464523456921568, 0.6636934514939828, 0.5869862865809935, 0.23541587701063083, 0.23843409246213898, 0.21869847069379555, 0.311675157898208, 0.21988858984449433, 0.2134708710383565, 0.22108985938597925, 0.20182483653556738, 0.2183030398614858, 0.21088652214770065, 0.21271712167571866, 0.222086536298423, 0.25034910728385795, 0.22045929118019836, 0.77315601461536, 0.24598440576773017, 0.2239308904258429, 0.20624418268361233, 0.9232987941581654, 0.1763029094681875, 0.18776215348216707, 0.19932268504932749, 0.19892821075933487, 0.9239453864475679, 0.9131502038101129, 0.1664279318256744, 0.16628985776077476, 0.9251041261277856, 0.21290369098465756, 0.9003536444258795, 0.16775016122842556, 0.16813835981378833, 0.15547141316341262, 0.15507896433734059, 0.9218423265677367, 0.9153865386144011, 0.18537370170077705, 0.19203009291614492, 0.19430123936831578, 0.19614864579858415, 0.18269734980552976, 0.19410633200589522, 0.18929268349070738, 0.1724972345579152, 0.19168336727285462, 0.11658827535301974, 0.08890809218336548, 0.08388509783803388, 0.08266305240711702, 0.0961309032383435, 0.0890177045455024, 0.1285356269040414, 0.09670136147206754, 0.09544594086908054]}, "mutation_prompt": null}
{"id": "738a3298-dd26-441f-ad2d-d4ab2911b1c5", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10.2 * dim)  # Slightly increased population size\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor with adaptive scaling\n                self.F = 0.3 + (0.7 * (1 - evaluations / self.budget)) * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutation_scaling = np.random.uniform(0.45, 0.65)  # Changed line\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[np.argsort(scores)[:max(1, int(self.population_size * 0.1 * (1 - evaluations / self.budget)))]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Enhance early exploration by slightly increasing mutation scaling in the differential evolution strategy.", "configspace": "", "generation": 98, "fitness": 0.5178481836034087, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.52 with standard deviation 0.31.", "error": "", "parent_id": "b14afbbd-784c-4348-a5d5-ccad650b4a19", "metadata": {"aucs": [0.9049486616774652, 0.9071553973581076, 0.9054779556389514, 0.9009657578411306, 0.8956642830388919, 0.8959877087386809, 0.8975187160616258, 0.9036467765571548, 0.8989416556020814, 0.7991574910211329, 0.7794812302989902, 0.7910314915661562, 0.7908749500730666, 0.792896621439425, 0.7923464521036641, 0.7936335279323253, 0.7684899489958743, 0.7869031015511232, 0.11233186094766823, 0.5060015724546291, 0.26695078962447194, 0.13485723869164123, 0.17579932026930745, 0.16083188624548717, 0.0902895621726475, 0.16408909272989025, 0.14308444025234568, 0.10986525310965112, 0.11278771994137604, 0.12296178758401366, 0.1427032336210643, 0.13122105786131655, 0.14870579195661826, 0.13644328600466815, 0.10844127211603882, 0.13013942165856274, 0.9499481938844768, 0.9678645945838408, 0.9811109944990246, 0.9744057945992849, 0.9731837225832218, 0.9715010553810363, 0.9924377380336789, 0.9738222530994124, 0.9570226356414976, 0.7693754690783641, 0.7788432868917793, 0.7674653288314689, 0.7805085823677663, 0.749189405747757, 0.788197990074753, 0.7792699230193638, 0.7862115101114491, 0.7686428445623563, 0.9072266728343092, 0.8932881518334117, 0.9164813891917073, 0.912125657256353, 0.906831649536726, 0.9012506662681261, 0.8888113582392649, 0.9080835944557493, 0.8993434033131743, 0.6443972165505278, 0.13367050608397635, 0.6007561260333468, 0.6543440536724576, 0.6201730434507652, 0.6511976767838363, 0.591351442065194, 0.7297577407030029, 0.7388510596507061, 0.13483843637619086, 0.5787472546110393, 0.7017211032869791, 0.7806975696932994, 0.7771803435719421, 0.681574740285126, 0.7165802270462227, 0.5954307871240749, 0.7466745813778417, 0.6142119443486581, 0.7291414136584167, 0.6508903846801248, 0.06787892157646769, 0.7097691958469066, 0.7038975142127903, 0.7088133584299414, 0.7254781214009434, 0.7578163566507303, 0.790733341984132, 0.7730825279735878, 0.7929525726722495, 0.7940828606856609, 0.7574931352179202, 0.7110981141632242, 0.7912323309361577, 0.7866450255417643, 0.7754733116652641, 0.1247062109832392, 0.13337234016706212, 0.13239300651479569, 0.6804456989165301, 0.16343779911227918, 0.13859977671317525, 0.39812651378638264, 0.3553944654364307, 0.19719574351126867, 0.6397260263421704, 0.47210714632754014, 0.6555687127240799, 0.5792606258644988, 0.6359603711664346, 0.6544483576714633, 0.6291207523677156, 0.6021285927958319, 0.5211187313889156, 0.8603116947636256, 0.8532111211153529, 0.8455813585624549, 0.8575775703054858, 0.8578406422982785, 0.8588368147893812, 0.8695862020448484, 0.837884939314167, 0.8645857121128762, 0.4347542687889637, 0.16677698407501484, 0.10746009358255249, 0.4194488597845867, 0.11659551799284162, 0.1502745336812772, 0.12021472814445155, 0.12336129937616935, 0.16560242685814008, 0.2019294735681919, 0.19056747464548762, 0.2501862669802092, 0.2102457745515679, 0.1764881374629409, 0.3123657083620246, 0.21330852764482555, 0.42042815427924174, 0.14497041639531727, 0.722073476074631, 0.7285168779697782, 0.5916587434740033, 0.7071744313407038, 0.68292278582612, 0.7285391885422641, 0.626992833078047, 0.608108874652127, 0.5886752878971668, 0.4203862200742021, 0.548079534154005, 0.3051571578003818, 0.5625778417567605, 0.5106996507868707, 0.30086957062478703, 0.26854805056465647, 0.5018008923511186, 0.6873788846490319, 0.21838314458489183, 0.19809384323270074, 0.20382339265922045, 0.2274880899521171, 0.2145836188500213, 0.2109893023167695, 0.23978121693344812, 0.22544676356133908, 0.26053910377253486, 0.24083699082369725, 0.2471035928712827, 0.22140901874092567, 0.7491147418364847, 0.2243624328808791, 0.2062367077032291, 0.20495550751192015, 0.24795395710438162, 0.20980015755192905, 0.18631187001576066, 0.17627495990802888, 0.8956294688000038, 0.9056496814377588, 0.1988473077507088, 0.9238108045128801, 0.14168796074270107, 0.9099368210708066, 0.871575945954242, 0.9166673628695315, 0.21221663057675277, 0.12741097514462196, 0.9006332652404371, 0.16684127509001467, 0.1561972866518192, 0.15261172073933416, 0.8813204494228211, 0.9124831203451607, 0.19844466742380829, 0.18733624173361663, 0.1804300846395539, 0.18561689113452362, 0.18226739372275647, 0.19357318961406034, 0.20768103407287009, 0.1887415145794452, 0.20177564723120112, 0.09708840647202743, 0.1211018821776233, 0.08970920301269358, 0.10133898508228034, 0.08845773643951693, 0.074617189448271, 0.1002525901724799, 0.08680328496922574, 0.08559283169434817]}, "mutation_prompt": null}
{"id": "00fc2d66-3069-42ee-b25b-0874662ece24", "solution": "import numpy as np\n\nclass ADERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(10.2 * dim)  # Slightly increased population size\n        self.F = 0.5\n        self.CR = 0.9\n        self.best_solution = None\n        self.best_score = float('inf')\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        self.best_solution = population[np.argmin(scores)]\n        self.best_score = np.min(scores)\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # Dynamic adjustment of population size\n            current_population_size = int(self.population_size * (0.5 + 0.5 * (1 - evaluations / self.budget)))\n            for i in range(current_population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation factor with adaptive scaling\n                self.F = 0.3 + (0.7 * (1 - evaluations / self.budget)) * np.random.rand()\n                # Slight increase in the bias towards the global best\n                mutation_scaling = np.random.uniform(0.45, 0.65)  # Changed line\n                mutant = np.clip(a + self.F * (b - c) + mutation_scaling * (self.best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover probability\n                self.CR = 0.85 + 0.15 * np.random.rand()\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Stochastic ranking to adjust local search\n                if np.random.rand() < (0.1 + 0.25 * (np.argsort(scores).tolist().index(i) / self.population_size)):\n                    top_mean = np.mean(population[np.argsort(scores)[:max(1, int(self.population_size * 0.1 * (1 - evaluations / self.budget)))]], axis=0)\n                    trial = trial + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim) + 0.05 * (top_mean - trial)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                score = func(trial)\n                evaluations += 1\n                \n                if score < scores[i]:\n                    population[i] = trial\n                    scores[i] = score\n                    \n                    if score < self.best_score:\n                        self.best_solution = trial\n                        self.best_score = score\n        \n        return self.best_solution", "name": "ADERLS", "description": "Introduce a dynamic population size adjustment based on evaluation progress to balance exploration and exploitation.", "configspace": "", "generation": 99, "fitness": 0.46856949268560044, "feedback": "The algorithm ADERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.30.", "error": "", "parent_id": "738a3298-dd26-441f-ad2d-d4ab2911b1c5", "metadata": {"aucs": [0.8859351010929821, 0.8900676056138521, 0.8911281681846679, 0.8934693538317273, 0.8908122068661869, 0.8951982828583949, 0.8912370802845403, 0.8811176711555061, 0.8865511983244466, 0.7741190946466447, 0.7789262895602367, 0.764959471826363, 0.7621591445381171, 0.7541773573209031, 0.7588035661776436, 0.7555327794789322, 0.7660353400464512, 0.7787532326526017, 0.1077156926960301, 0.14927142648471126, 0.12910357264605232, 0.10730858027423151, 0.15586309422413802, 0.13786560490906163, 0.1853451776121694, 0.1596024918986062, 0.16204703308939006, 0.0910506718083619, 0.1354712840234381, 0.1131465083190113, 0.1293289365067889, 0.1162089956138268, 0.13127650935090218, 0.14502249184854832, 0.1474293567269478, 0.1516599076888766, 0.9672353360674181, 0.963206559435505, 0.9763554917012285, 0.9690231018884435, 0.9648572417698645, 0.9848493487843469, 0.9924377380336789, 0.9690158422748106, 0.986256831563287, 0.7161568523978352, 0.7095765404814485, 0.7389153806418667, 0.7482200442128258, 0.7242807040008533, 0.7291581004933916, 0.7005650908019065, 0.7124848244436905, 0.7290765251739451, 0.8957910248495718, 0.8917511044327321, 0.8966163861084283, 0.895906304061508, 0.9098119540969912, 0.21524629852028676, 0.8794626253916038, 0.9069766684507212, 0.2346111408606848, 0.367850876904372, 0.39605185314999725, 0.4565158509002615, 0.13236437764689357, 0.5425032136011858, 0.5309183636018588, 0.5395590191685273, 0.5268171627088061, 0.13460192385520608, 0.7522434265369431, 0.28080642314699045, 0.2746228665912013, 0.6164504745305719, 0.6271582821728963, 0.6704095220434787, 0.6648865842557474, 0.587500683506867, 0.5397013615936774, 0.6973982515585455, 0.6085731683089597, 0.6309470965351271, 0.07139695266292279, 0.6660039823063837, 0.5598084272996855, 0.6791929318970507, 0.5703212748031379, 0.6820192895031905, 0.7653563772691767, 0.7356911621799966, 0.7585687876622659, 0.7157618920646434, 0.7435377941114355, 0.6299049253846747, 0.781584003860291, 0.7427562624438011, 0.7794246041738695, 0.09828385212571467, 0.16267999008338807, 0.3834691002006604, 0.43015663425804196, 0.3169967424519269, 0.24078709126511577, 0.30707282925958057, 0.22345675440966795, 0.161538401987685, 0.5081564588846268, 0.4229473020917276, 0.442871448449382, 0.46962365003932316, 0.4425755330205059, 0.46194570939823465, 0.5013609823363809, 0.351047161269441, 0.478392188046449, 0.8262959593822277, 0.8366270948885238, 0.797142388699817, 0.8198217555930676, 0.8523507529973529, 0.8421146711434658, 0.7995348499207113, 0.7786266436697103, 0.8507992238994806, 0.10205384377316862, 0.15194629085895595, 0.13399296325940324, 0.14745246142297275, 0.133686745245981, 0.13061465584188248, 0.13104570915185632, 0.14286368955056183, 0.1671569724134857, 0.16674545540615815, 0.16565631250571078, 0.4825380946290211, 0.23074113249322603, 0.615256158031543, 0.23077604845293687, 0.1523752976765005, 0.1453279284396316, 0.2528248429044172, 0.5842488483517303, 0.5679822580636196, 0.5276537079072025, 0.598620203931797, 0.4910861425491564, 0.5621324232438547, 0.5706915888006536, 0.5903053154159597, 0.5170811268138766, 0.3184401890057752, 0.5031682622199604, 0.5406491372633082, 0.48004458848720943, 0.4137688901696599, 0.2605102005685318, 0.6054376745201562, 0.45727483214946796, 0.3618061193856599, 0.20694285286437597, 0.21234029647451602, 0.229560707462518, 0.20518311481895346, 0.2149951026837562, 0.2003925860444754, 0.22074369135170635, 0.20081985402370295, 0.23193009286470412, 0.19591208149816752, 0.19651221623945925, 0.6222311431256538, 0.20133267823391465, 0.24426992039315343, 0.22210361399753187, 0.20934334298741308, 0.21062624845348166, 0.238757237310683, 0.1651716253383212, 0.18665514781074066, 0.882089919472171, 0.9137073067006419, 0.16869006994783609, 0.8905230103821934, 0.14201170336538693, 0.8574610281798115, 0.16597065616452378, 0.9070739009476186, 0.21257130033341565, 0.20659151728212688, 0.8861029881351251, 0.16795814854173696, 0.1550756573590002, 0.20963873936092836, 0.1672447971135107, 0.9041176608504476, 0.17886935962067785, 0.20436679472294472, 0.19300399626279974, 0.18616238706632315, 0.17701408752192005, 0.19470301568265058, 0.17444742333521213, 0.18677192473015392, 0.1991473595872869, 0.08462638369359587, 0.11504499918017941, 0.08017002929543737, 0.08622484844722489, 0.09167827379494864, 0.07908438590435418, 0.0863563490509508, 0.08807004018217734, 0.09123073215914779]}, "mutation_prompt": null}
