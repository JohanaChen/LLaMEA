{"id": "e8ef206f-c1d8-4229-840b-be7a5a22ede5", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        inertia_weight = 0.7\n        cognitive_coeff = 1.5\n        social_coeff = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Adaptive Sampling and Dynamic Exploration (ASDE) utilizes adaptive sampling based on progressive evaluation metrics and dynamically balances exploration and exploitation to efficiently navigate complex search spaces.", "configspace": "", "generation": 0, "fitness": 0.23758526580420905, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": null, "metadata": {"aucs": [0.528524196124922, 0.5901959222209471, 0.5919084560480665, 0.5919334910210325, 0.5615810299377961, 0.6452899231095361, 0.5711109850271583, 0.7520629020777639, 0.627848041386289, 0.23201744986806294, 0.031222225011221627, 0.1811507178803371, 0.23539288797441726, 0.24799960881708982, 0.13293003521143343, 0.035352819275089487, 0.22590505697237562, 0.31043788809238426, 0.14461574806840305, 0.29429366599757145, 0.12161750629847934, 0.14747237170278238, 0.21243738272740176, 0.13354742514481366, 0.14843181045358755, 0.13510243679594935, 0.120685953688492, 0.10589970834494145, 0.11546056400954052, 0.08933774843698994, 0.11330387758422, 0.14487434504774377, 0.12774641478718207, 0.10512034111485313, 0.12281754751765439, 0.14354704496733428, 0.9832553829324215, 0.9732082139972068, 0.9885137525818917, 0.9858865407707066, 0.9855195839395753, 0.9804223767580537, 0.9816249825495521, 0.9853350222187012, 0.9814191278590148, 0.39543699635171947, 0.3148809348545879, 0.05838303405674983, 0.1485952412043684, 0.41246382507168367, 0.1484312983184234, 0.118827490928467, 0.08843191292859431, 0.08866964607130379, 0.21477834911260074, 0.6791399118023279, 0.2888966807616492, 0.2042374581045796, 0.26395585109529096, 0.7404530225572965, 0.12099337818430611, 0.12552693126462833, 0.2278231566274962, 0.14345420851876878, 0.10764585145609451, 0.15759453590161288, 0.11585889258860282, 0.15095237606256107, 0.16882992955230514, 0.1584712317060739, 0.14296528627527716, 0.16926799904547585, 0.11591997145221355, 0.12175642875456638, 0.13598464898396467, 0.1461559003501416, 0.2113159369471207, 0.156836435478511, 0.14879432062441156, 0.10521357435551693, 0.18089008991608457, 0.00033363119730489554, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01780005931650752, 9.999999999998899e-05, 0.06929785372450425, 0.013371928348757889, 0.06432380460269882, 0.10779807391752916, 0.06767537007929547, 0.08773564044332283, 0.021166023292804148, 0.025961757191269474, 0.04957478236693147, 0.05146291529139213, 0.04727408854337023, 0.017693464033413875, 0.02462117870667857, 0.06497860683638335, 0.029119721175307145, 0.05258389601061464, 0.09884191872410097, 0.06282890795900786, 0.043259730908665195, 0.1274087489039223, 0.08511874210226456, 0.03398660208072868, 0.037951489420787965, 0.1353839067800221, 0.1261502861525743, 0.005307373844341212, 0.08348956028028764, 0.051062842721226076, 0.18275516444366713, 0.49761750544730987, 0.43259614561466253, 0.4480370635128721, 0.5192715762023352, 0.47294713935697597, 0.45459035216594457, 0.47690261181626115, 0.47610553525651034, 0.46003876571078295, 0.1273219540145255, 0.09292573867726717, 0.09600578299518914, 0.14823954667901473, 0.11860329343525777, 0.14829085840924894, 0.06982060145158253, 0.12315661491104657, 0.14164802008631816, 0.27923794998017004, 0.23141773179747793, 0.2180657546864413, 0.24581695253543046, 0.21464689610082166, 0.2718641480104059, 0.2045303821429476, 0.1548276440224896, 0.1585501495507038, 0.2253040705780739, 0.36044156177573927, 0.2677066094996686, 0.2798930870007863, 0.355000128422167, 0.2563314469805905, 0.3034453487427944, 0.34063140261175573, 0.2641362108698222, 0.23412979527335953, 0.16978229865708783, 0.28801075634578954, 0.23166352413072977, 0.18437307874786013, 0.16616855044227907, 0.23069579535066054, 0.30078394145998566, 0.2371595184405927, 0.2643175406197953, 0.16456046712257555, 0.2000122321531561, 0.21678844394731756, 0.19165989308544373, 0.20111528145404167, 0.24383765428528759, 0.21610142661376608, 0.19868488410064666, 0.21494600850237722, 0.23108598558342408, 0.21213313236742792, 0.24050056711391843, 0.1971224357636887, 0.2075348581246209, 0.2302779633476797, 0.23644904905941289, 0.19537965050397055, 0.7270430550367988, 0.1672985770635269, 0.15329006457932515, 0.770307790011223, 0.20050028973461642, 0.16855423371089873, 0.17619753955925366, 0.16150599138897437, 0.2098372944759379, 0.5131423998501066, 0.21148979747397667, 0.3472749617492271, 0.19902268302062598, 0.36467957496100434, 0.14578424925122124, 0.2017580321403437, 0.4576930442209627, 0.16148558323617657, 0.19025969867900971, 0.1881224057604488, 0.18890153795558218, 0.18157547757458514, 0.20737046470319254, 0.19568342031361208, 0.18102343850391234, 0.19931551348998344, 0.19716530118706543, 0.10130849926195318, 0.08200600891758636, 0.08579990703729778, 0.0864632773009707, 0.0883418146361109, 0.09291312221150128, 0.08412909222708365, 0.07186830927358934, 0.08905233054714101]}, "mutation_prompt": null}
{"id": "0c414f4f-15c3-408c-8d5e-19f27b07c032", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        inertia_weight = 0.7\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                \n                # Updated lines for adaptive coefficients\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget)\n                social_coeff = social_coeff_base * (self.evaluations / self.budget)\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Modified ASDEOptimizer to use adaptive cognitive and social coefficients for improved convergence.", "configspace": "", "generation": 1, "fitness": 0.23960320331681328, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.19.", "error": "", "parent_id": "e8ef206f-c1d8-4229-840b-be7a5a22ede5", "metadata": {"aucs": [0.8364098564272758, 0.8239063196741855, 0.839969135980446, 0.2691293251434387, 0.7867718644125786, 0.563714957705054, 0.7929101858789158, 0.8017765255240445, 0.29374276726503745, 0.09811688512778494, 0.10166948541863785, 0.14114117100285495, 0.08483574593579668, 0.16123135857920812, 0.07709038608968932, 0.06871266682838473, 0.23933911285623322, 0.261308972147247, 0.11043860640624703, 0.15985817166444305, 0.10128025167488974, 0.10378425284567272, 0.12477375384455358, 0.12017201431356694, 0.09690488389118834, 0.15656555296920993, 0.10819660231332129, 0.10026268031694019, 0.0759097079069958, 0.08888801459085316, 0.09635467281367416, 0.10434004958781329, 0.07333989602068391, 0.11863630554484028, 0.14575731102787126, 0.08111434677084495, 0.5301403860155389, 0.4071378872767608, 0.4714139993674148, 0.3306668341971002, 0.3096006069529975, 0.29277345265483823, 0.3968549824519183, 0.3618785025049137, 0.1656800640359537, 0.3540565909629385, 0.2523240654311215, 0.37682986979397715, 0.29435031106602794, 0.19902666242888545, 0.13504875006026174, 0.4946369577474188, 0.26377327906892156, 0.5899016692050835, 0.8643641292106816, 0.349222205965382, 0.21649769494103666, 0.27385079251399647, 0.20560116870765455, 0.1611500098427816, 0.1491553917011752, 0.14394748762818455, 0.22231328025584485, 0.25209798998956334, 0.13450253238792664, 0.1857300026871278, 0.07943480880801002, 0.2614240657852951, 0.016467482121606425, 0.16036788972041816, 0.12885774592689925, 0.2733624303251597, 0.12395902789449298, 0.1612329684655286, 0.35169915282390074, 0.14043319358458062, 0.15990547970886104, 0.12642370783449164, 0.2245999895303996, 0.1481361416550835, 0.1241755671562812, 0.010077948348872656, 0.04749121799088729, 0.07501278590013283, 0.022644936599375276, 9.999999999998899e-05, 0.022906860266384, 0.030260538570152096, 0.017606736496085573, 0.001459028166961085, 0.14532036754017785, 0.13048317892620775, 0.12432588389161048, 0.05271997560681407, 0.08645315652917962, 0.11009575823401119, 0.11348290816508322, 0.15243377089728616, 0.11420816251668187, 0.24193366300163044, 0.27249412429960806, 0.1104051128036615, 0.112945156406418, 0.13999920182673153, 0.10971356548127353, 0.10000293394629511, 0.1312550166516967, 0.15338936953412052, 0.06426488568081656, 0.2882721644346563, 0.2696739834762878, 0.0012749604460193797, 0.048398772769957965, 0.09152659017032094, 0.14517418640626567, 0.08918216030509751, 0.07474860944532702, 0.4898224973987336, 0.5126599510450476, 0.5219220954439938, 0.5033056125616588, 0.36850291235488786, 0.5317990907425095, 0.5712886840204804, 0.5470795606566705, 0.5240311355412297, 0.050252274453314594, 0.04644606236607485, 0.06105900066458958, 0.1065126368009589, 0.10076799141472237, 0.11628715349553553, 0.11074061222893183, 0.14395501485649087, 0.08378101224469936, 0.1853093860647389, 0.20482888179081105, 0.15930163269848818, 0.1527602656052659, 0.17137756044568309, 0.16332257483881807, 0.2318293146390944, 0.31301691447079794, 0.29196583140693744, 0.29629756702587007, 0.42577306829573036, 0.3348646989921442, 0.3682081743475333, 0.33082589480645874, 0.41699629935900606, 0.2075924620620313, 0.29835373882578786, 0.2367802808480951, 0.22189378667091608, 0.2091630009620682, 0.17392399230779632, 0.19922360123919103, 0.19455938665059314, 0.22927086808276687, 0.17969224644519977, 0.224413232893103, 0.21917691217192192, 0.2106811132693548, 0.2022729020968308, 0.27375167117128796, 0.26379679845473347, 0.24587728484706683, 0.19698820491679214, 0.2337796390983966, 0.200538504562216, 0.22994704070656047, 0.20083968870893987, 0.19237616366908727, 0.18811640190764534, 0.21250431377960277, 0.18814249077354595, 0.17342047930692328, 0.1802273325598348, 0.17466248915965954, 0.17985595924295672, 0.18081196710714298, 0.1664026266122457, 0.18332969885354988, 0.8278099355422346, 0.19516374841895168, 0.7677891753270997, 0.6937407557172641, 0.7713384494016191, 0.14923121474574652, 0.7538748162718646, 0.5309419926682684, 0.5103239720881416, 0.6303278889234142, 0.4789994006946545, 0.16018980069327915, 0.5546115724378321, 0.5339254188909843, 0.45806500968038166, 0.19775754498846498, 0.20352309497261012, 0.18827631137605827, 0.2078565818455561, 0.21586282855517858, 0.17568673785165534, 0.19030416937604855, 0.2233845044064059, 0.19057727468798769, 0.07674942977988752, 0.11024280408741016, 0.0830305154320955, 0.1006107245847645, 0.08649210339283331, 0.11096900415801192, 0.0996869644906907, 0.09210384531027083, 0.10048800596530894]}, "mutation_prompt": null}
{"id": "7bb0df52-072e-471b-9498-51e7ad802494", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                # Modified line for adaptive inertia weight\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget)\n                social_coeff = social_coeff_base * (self.evaluations / self.budget)\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Enhance convergence by dynamically adjusting inertia weight based on evaluations.", "configspace": "", "generation": 2, "fitness": 0.30527436572340294, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.24.", "error": "", "parent_id": "0c414f4f-15c3-408c-8d5e-19f27b07c032", "metadata": {"aucs": [0.7856735571952778, 0.7750268014045623, 0.7920248860551589, 0.7673875834081116, 0.7758735353561703, 0.7601943246177498, 0.7793049203853347, 0.7830376512511469, 0.7022774265794576, 0.4797174556187892, 0.47485541061556447, 0.3769160939685552, 0.3480990822111927, 0.5374262458631194, 0.17601344567448218, 0.5463068872966832, 0.49181223286964937, 0.5096017839946754, 0.10760292790733672, 0.14905106379965127, 0.0962195944551093, 0.11975837647112697, 0.16085053405171623, 0.1336010267185257, 0.12937117058546532, 0.12019823769708304, 0.15073641061277598, 0.09797202281887862, 0.15260486838378806, 0.10692720518786258, 0.09950633574754209, 0.11426712054279764, 0.11431722029012326, 0.11597272983116891, 0.11255882205363799, 0.10853268075524791, 0.9088664921706082, 0.9270550944558548, 0.93675496549651, 0.8933796973781777, 0.8663367791821779, 0.8438224662897502, 0.9095724080499586, 0.8987276100675087, 0.9228586484695621, 0.39605779890821646, 0.5582755572443224, 0.5908700210265025, 0.5333383204293436, 0.5287365339836594, 0.5378402172279404, 0.5779569153614506, 0.5673028202729637, 0.5992548716142159, 0.7627706982446001, 0.3505713013998998, 0.3676528642444873, 0.2708963282410307, 0.8094406514510734, 0.20365212686938639, 0.21191280290989034, 0.21120648769403783, 0.3593431252446626, 0.163012401293384, 0.14359841612602198, 0.11174505395120582, 0.13535712751572682, 0.22897101033945677, 0.11082948260425762, 0.20789078849055076, 0.22170021996626021, 0.19056467012392464, 0.16709241114217388, 0.11630005771149754, 0.2164617729083198, 0.24500134591576217, 0.24016915975122444, 0.2366041992176896, 0.23053119811328038, 0.23043193451125976, 0.194886357037803, 0.0848996940612442, 0.014170062510486026, 0.06713300051903626, 0.06451831443487677, 9.999999999998899e-05, 0.06537527166886214, 0.009517834795775504, 0.007955330829915508, 0.06049399479810402, 0.0954394201707981, 0.0801066805661168, 0.1315307795636751, 0.08334313333755727, 0.10683936539410466, 0.16350399634825918, 0.14384029119549213, 0.16841046652332592, 0.08543935080779452, 0.09582600789563034, 0.042319923531384696, 0.30982145244192727, 0.047413703936113105, 0.13303900937168145, 0.06644952015618599, 0.12019389101471245, 0.060431146399393065, 0.1646560864019162, 0.24331966584705256, 0.13247389835660706, 0.18447355605941784, 0.09276527352543928, 0.11886413250175631, 0.06572255020547468, 0.12131211813732101, 0.14456446538718115, 0.07791511401839357, 0.5263897531461718, 0.4896956217427374, 0.5197797039764942, 0.5176488416828371, 0.5231463027918455, 0.5118663557800553, 0.5503898897601356, 0.551692988196615, 0.5123790636893463, 0.14333504175089096, 0.10520704787076152, 0.08395407096157126, 0.12448549944653298, 0.12706463436199034, 0.12819387213890354, 0.11352599843321354, 0.15685633400984933, 0.16288392472358115, 0.14316681255836883, 0.17143649285814533, 0.15289341458098282, 0.23523164427442889, 0.1854799699418097, 0.16087193493139962, 0.22857181280404693, 0.2066839564211741, 0.2259853492366305, 0.2794837469913819, 0.2876283624124354, 0.3143994599436801, 0.35280235088195944, 0.33800484475922143, 0.3702310029780719, 0.2401486255928068, 0.4518786549944872, 0.26364672274098155, 0.18851177642219719, 0.19108154354821316, 0.2512063689089694, 0.3289770044632845, 0.26206788639929923, 0.27715593414307227, 0.1969904382235621, 0.23935646155020662, 0.19952372285410713, 0.2109375883778598, 0.20511713316824587, 0.203772347702606, 0.21177062097657995, 0.22910002362809734, 0.2052769262259, 0.23219969279728025, 0.23040306647427533, 0.23746106362993746, 0.233399465561004, 0.22107025585986206, 0.184909798234128, 0.1948407335178709, 0.20956298661849038, 0.1863269475477658, 0.2051587707495668, 0.5046930756615298, 0.1857885737391355, 0.7510046771553301, 0.16717780495357148, 0.7756775504795914, 0.744106038907783, 0.6903589753960464, 0.7957684074724741, 0.7319480192371406, 0.5676381701411878, 0.14796783770272415, 0.665946649822122, 0.47213309148763816, 0.5337037064041527, 0.4465334096120992, 0.5064916720252218, 0.5114287069601098, 0.5201974352095239, 0.45353584598917696, 0.6034771827552592, 0.19756116593956907, 0.18507838995462011, 0.18521955224673248, 0.18554717176979907, 0.18124208066508418, 0.20699621355232822, 0.18473182571958602, 0.18750927382840077, 0.18883190696913177, 0.09241382968928269, 0.11637756562294854, 0.0831902648867141, 0.09238788960488964, 0.080203233359039, 0.08507165284351781, 0.0908976353483566, 0.09718737067397609, 0.0886430958851877]}, "mutation_prompt": null}
{"id": "3422d6e3-7b21-4caf-bbb4-7c2fd8adde5a", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget)\n                social_coeff = social_coeff_base * np.random.rand()  # Line changed\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Improve exploration by randomizing social coefficients to better escape local optima.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"unsupported operand type(s) for -: 'NoneType' and 'float'\").", "error": "TypeError(\"unsupported operand type(s) for -: 'NoneType' and 'float'\")", "parent_id": "7bb0df52-072e-471b-9498-51e7ad802494", "metadata": {}, "mutation_prompt": null}
{"id": "e72a9c34-1249-41ad-9d84-245b48233a00", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                # Modified line for exponential decay of inertia weight\n                inertia_weight = 0.9 * np.exp(-0.4 * self.evaluations / self.budget)\n                \n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget)\n                social_coeff = social_coeff_base * (self.evaluations / self.budget)\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce exponential decay for inertia weight to enhance global exploration.", "configspace": "", "generation": 4, "fitness": 0.2994794095150355, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "7bb0df52-072e-471b-9498-51e7ad802494", "metadata": {"aucs": [0.7150169598756413, 0.7375848298755117, 0.7531463569605987, 0.7345468427169327, 0.7520290286792752, 0.7358828253062316, 0.7589934151265091, 0.7454636514913737, 0.752714982226373, 0.348093079870323, 0.18115381752605475, 0.3072811031690723, 0.41542149752142377, 0.3400665317921192, 0.4085021810478011, 0.3994114198219796, 0.3557520076806452, 0.3689324881712919, 0.1198058143166636, 0.1296213673750699, 0.14049609030369647, 0.13814355110365928, 0.36219526822317216, 0.1232159126660719, 0.13805995278186134, 0.12672923538079395, 0.15168461254325338, 0.10106598170206471, 0.1162117104795225, 0.09806337598251069, 0.11294483943335165, 0.13050484931678852, 0.11184784803933523, 0.12140844903943548, 0.14487468981716267, 0.11453464862794549, 0.9117615105285704, 0.9271903472579324, 0.9402024958588666, 0.8938054770172689, 0.8688455913367861, 0.8472826182920763, 0.9096881082235073, 0.8988606550961176, 0.922927863118385, 0.5152668076420333, 0.4786318961089462, 0.5265726375875343, 0.5540932887587413, 0.5739806573962227, 0.5288415710890455, 0.4843333844136528, 0.5530777270371903, 0.5377578221020914, 0.3063382142681076, 0.3524955509797566, 0.8017749818432215, 0.2647661274832973, 0.7497331158890812, 0.2026137740048113, 0.22580884434104564, 0.2196594202787806, 0.6614355337433977, 0.22616276458486329, 0.1167738755041704, 0.14925287828824207, 0.1710624828172277, 0.22885076092100964, 0.11105673387316017, 0.20699795238795138, 0.251156565815734, 0.2290094521207331, 0.17898940963527277, 0.11143435488664832, 0.21187595517661262, 0.2590909205087213, 0.2373583683270586, 0.20358423141347026, 0.2366550570690994, 0.2397231759276156, 0.23377126737600928, 0.08869117509106095, 0.05979121107901775, 0.010701095259538662, 0.056199740047669144, 9.999999999998899e-05, 0.08194009397754687, 0.05182305547603028, 0.008299878326289756, 0.0954333985401623, 0.11887313082217077, 0.08003408215074614, 0.1289632179041822, 0.0590042794906358, 0.06312734026863687, 0.11851822693143144, 0.1360172529832122, 0.13288704261510487, 0.18099021927097214, 0.1685488967990283, 0.03882806815625239, 0.20808032363515327, 0.06045331515667296, 0.09055635294361342, 0.0690838345695618, 0.14144360163866532, 0.06223313347498205, 0.20879288336742163, 0.17608604233911251, 0.12879856535169198, 0.09903096460800676, 0.09295368248797442, 0.12100365948087732, 0.0887490754409398, 0.12483057528719088, 0.10129957643814891, 0.07766843778441579, 0.48075658866760274, 0.5213327571409128, 0.502057395953061, 0.49469029358863637, 0.5242561829226973, 0.5443400597394338, 0.5637696164896738, 0.5235975012692965, 0.5571213451826182, 0.12197399661355246, 0.07822029782368556, 0.11364532629924229, 0.10692844406821134, 0.08160769848488292, 0.10624734850571471, 0.12570952726269768, 0.11134786074156122, 0.10406022664113401, 0.1962770788443211, 0.16793940529234408, 0.17187640398471782, 0.20170458056679774, 0.18907923196453758, 0.22460920668703632, 0.16528109090726317, 0.17866233349683658, 0.24722906647295362, 0.393806008986198, 0.2608599957312666, 0.36055009479557265, 0.3017170629278336, 0.3842736568623384, 0.3383402651809574, 0.20505987788486835, 0.3232652296911882, 0.2353458296979405, 0.20517274593219403, 0.250139476460554, 0.27298032892735824, 0.21026202609220312, 0.14567245386971261, 0.24636656774264087, 0.2285711615371857, 0.23145582823145605, 0.24316966101695558, 0.22631652204804442, 0.22804707153243642, 0.22754552962007768, 0.23406321595187984, 0.2189717622972175, 0.22783824251501772, 0.24312228899744792, 0.23187165814666055, 0.2033822321946246, 0.21441637880256625, 0.2320326937073981, 0.20535377711931602, 0.200058034239599, 0.20172951221956725, 0.20765320596565384, 0.2264249279227034, 0.198741606375328, 0.19594474417722652, 0.7478138047246006, 0.1671497755165957, 0.7470089608995176, 0.7267425262819807, 0.693267583645474, 0.8328301682451564, 0.6806046118035511, 0.5764760922859649, 0.1489918029317021, 0.6419233380170783, 0.5168417107903807, 0.578379588704417, 0.18112005451022217, 0.5053848144166083, 0.47253010498340053, 0.4884304069212867, 0.5316255849375093, 0.6321323674255238, 0.20821768585284373, 0.20150067825954998, 0.20650654125693713, 0.18408940536647878, 0.19136120141309698, 0.2157282565436216, 0.19712348940253954, 0.1846612697898129, 0.19449050767610243, 0.08386329860136321, 0.07788862159738674, 0.08100524916553864, 0.08602937435785185, 0.08937207922024193, 0.09130636739304787, 0.08488358459251066, 0.09621093601775532, 0.09742919717170517]}, "mutation_prompt": null}
{"id": "cc088adb-119a-45c6-ba24-4c992936ad8f", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        chaotic_sequence = np.random.rand(population_size, self.dim) * (np.random.rand() - 0.5)\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                # Modified line for adaptive inertia weight\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget)\n                social_coeff = social_coeff_base * (self.evaluations / self.budget)\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i])) + chaotic_sequence[i]\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Improve convergence by introducing a chaotic sequence to enhance exploration in velocity updates.", "configspace": "", "generation": 5, "fitness": 0.16394302375855754, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.16.", "error": "", "parent_id": "7bb0df52-072e-471b-9498-51e7ad802494", "metadata": {"aucs": [0.24464076983143257, 0.42454376155601403, 0.22848910746485485, 0.24982949108443697, 0.47552513948804553, 0.17002507678617496, 0.1884754375911677, 0.4005581003429345, 0.1405262916616925, 9.999999999998899e-05, 0.09561754576195813, 9.999999999998899e-05, 9.999999999998899e-05, 0.08807102774658704, 9.999999999998899e-05, 9.999999999998899e-05, 0.09765207189518665, 9.999999999998899e-05, 0.06731804194068969, 0.1078436213342937, 0.06789369154042868, 0.06503045760375259, 0.10651041997723387, 0.07911667360190167, 0.07282807403668834, 0.12123205401929749, 0.04475599695444343, 0.05121000386870311, 0.07845091551944605, 0.07006236472623517, 0.0563717517485538, 0.11270476849031985, 0.05325613045061961, 0.050313817107896064, 0.08633141202077954, 0.06090160875996409, 0.17732955748559676, 0.9234827497073467, 0.9361477968540912, 0.2658136630367144, 0.9004568568665461, 0.2712618044152517, 0.934327529799674, 0.9153569978788575, 0.11282332384868587, 0.08079728678606957, 0.2658686933341067, 0.13717550154612568, 0.15112130370320498, 0.2345607053979767, 0.1753032792605882, 0.16654785758368984, 0.24523395627716205, 0.13132441397699657, 0.19754178422755153, 0.29357771490200524, 0.17795570125288718, 0.19145987246230045, 0.7085901643685385, 0.13682622776849818, 0.18756001681751422, 0.21999059527660336, 0.18517937685072416, 0.10939523733902934, 0.13853633007563715, 0.08055547106283245, 0.0707260325974759, 0.1278423239443378, 0.05265236570260823, 0.1164550826455325, 0.12601324044826323, 0.02296133588689231, 0.09576150752620194, 0.13045306635173115, 0.03580819895416121, 0.08891509237030282, 0.14506974705101205, 0.05225402191240014, 0.10201208260968575, 0.11906589143675972, 0.03284120038853766, 9.999999999998899e-05, 0.04810361568772681, 9.999999999998899e-05, 9.999999999998899e-05, 0.04404560217128106, 9.999999999998899e-05, 9.999999999998899e-05, 0.07468801622237575, 9.999999999998899e-05, 0.10159660189009534, 0.09777481151785983, 0.0355078319421227, 0.04322901508499888, 0.06596721598791733, 0.06595100911168994, 0.11551211593996735, 0.18395465163655766, 0.049598917177615665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02143003501448515, 9.999999999998899e-05, 9.999999999998899e-05, 0.06375161001722263, 9.999999999998899e-05, 0.015729783997724733, 0.12936431774778234, 0.016880608051923596, 0.03255531072342399, 0.06638291773799432, 9.999999999998899e-05, 0.27864502559932436, 0.3613683667232851, 0.2502062851576474, 0.2537563334067564, 0.3954305993303503, 0.17346702179449802, 0.307505328648341, 0.4122884873999584, 0.22927492073193334, 0.06689568621970632, 0.08867695547015775, 0.06726435495593819, 0.0872114123229134, 0.098640660492741, 0.04806819678418217, 0.07429170880484293, 0.09834335592984444, 0.06660234378751395, 0.13237257720418893, 0.16799761746756525, 0.15661367214643707, 0.15008754977905592, 0.1765231485993578, 0.16184082198079375, 0.151902287613489, 0.17977645088686256, 0.15218373347987146, 0.1867184475488658, 0.24518866024860753, 0.19390713018697014, 0.20473380227184712, 0.2774961303046979, 0.1911814770429069, 0.1951730567300196, 0.2911168300387649, 0.16230046807089604, 0.12490549568930842, 0.2029478712788777, 0.13984265392691542, 0.14846328943533704, 0.24158692248046498, 0.14778517787374534, 0.15919130066373743, 0.20218458884574453, 0.11641364635209062, 0.18943494449832, 0.22538001641942496, 0.18165610247408825, 0.19813642454396085, 0.20538805471474808, 0.1723934966457238, 0.18964790959995237, 0.21530708791837783, 0.18545272182523098, 0.16726208570788692, 0.21296925513398834, 0.15670953327677084, 0.19434854761329146, 0.2738110516001725, 0.15327345829834016, 0.17178321027992294, 0.18247175095646329, 0.16228689082057024, 0.17227704733847327, 0.1838745408020953, 0.14996260933983518, 0.2625756846604951, 0.4636014826601864, 0.2822889261865035, 0.15776466422369906, 0.5373660715800643, 0.24833983793725478, 0.2391787603204346, 0.20416482248098577, 0.20488199460125367, 0.28501414009974946, 0.5378206616144052, 0.22678709715106404, 0.20632671626398802, 0.264446093969922, 0.2931279669285214, 0.21447236169902972, 0.20031679658150758, 0.1840349780413969, 0.18046185192682584, 0.20267498680468465, 0.18975651726860687, 0.183950608425406, 0.18719217691220558, 0.18812779462038676, 0.08360457054712356, 0.08917347065318915, 0.07458143296023356, 0.09598859833656859, 0.08546122531717448, 0.056268808447660024, 0.07023716744648278, 0.08640522523420024, 0.06175847587102856]}, "mutation_prompt": null}
{"id": "91925bb2-f0d6-4bcb-a2b5-065649007f83", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget)\n                social_coeff = social_coeff_base * (self.evaluations / self.budget)\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * ((global_best_position + np.random.uniform(-0.1, 0.1, self.dim)) - swarm[i]))  # Added random perturbation\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Integrate random perturbation into the global best position to encourage exploration.", "configspace": "", "generation": 6, "fitness": 0.24007120452629604, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "7bb0df52-072e-471b-9498-51e7ad802494", "metadata": {"aucs": [0.4884442810863989, 0.476664102276413, 0.49065215791630434, 0.46345171220371895, 0.4836104079591891, 0.4835632210817816, 0.4714009718687916, 0.46518120051855305, 0.47252292207898505, 0.041278023611201586, 0.03729231557019885, 0.08936614680557253, 0.022904723563393237, 0.14204363366715156, 0.0814915716312844, 0.06625406138124212, 0.10040852484043095, 9.999999999998899e-05, 0.1136514090301518, 0.09956801133873727, 0.10939487054433739, 0.1294842461236907, 0.09852319833037126, 0.116267532670696, 0.09175146590354666, 0.11824195819680428, 0.14093983227151952, 0.11779309742975197, 0.10618129289865041, 0.08413337664324605, 0.11329623159388524, 0.09507984506121081, 0.08923020641578283, 0.09722053082074378, 0.10077206420316431, 0.08425817206929098, 0.9341666001042254, 0.9291876714300286, 0.9316840968422628, 0.899717397315303, 0.8649671505540167, 0.8787977816063157, 0.8968847296147059, 0.9037977502130794, 0.921612462655657, 0.30607162911226493, 0.3334656404721098, 0.3337103284338383, 0.3235240684807401, 0.3347152512657311, 0.31812722906616087, 0.31374624163030085, 0.35477028726705784, 0.32530771041129247, 0.39823856957142534, 0.7355941938102442, 0.6494274264102775, 0.2727115080518654, 0.26765707382138737, 0.2030714553949432, 0.7339618470798874, 0.20944399005535375, 0.22123758837343466, 0.10601452406922252, 0.15219755484376107, 0.15920403978565267, 0.11655799945946077, 0.1583001003582949, 0.15822950795289303, 0.16144425074414193, 0.2242932869361427, 0.19977453654443134, 0.18750903026349497, 0.14543257229304218, 0.15325485115268678, 0.1238216867612778, 0.19723252099168864, 0.12240318541140383, 0.15732489292916596, 0.18375899689151076, 0.14071443249979, 0.055254491922814286, 0.08774301745970592, 9.999999999998899e-05, 0.08485177339210537, 0.00993785925751911, 0.005313578519053563, 0.05438513906402154, 0.03838870160878416, 0.026591800672382093, 0.20039559946621444, 0.14060232922638172, 0.13565064403877736, 0.1493721935451232, 0.05785666778884857, 0.07600571394544187, 0.15604329307882703, 0.12696534735787723, 0.1889534671304246, 9.999999999998899e-05, 9.999999999998899e-05, 0.008394583221454921, 0.002288886735483331, 9.999999999998899e-05, 0.008067610138313697, 9.999999999998899e-05, 0.009891107611082917, 0.0002456018613971045, 0.08031051678850676, 0.12504611453807735, 0.12181757456480591, 0.0952453156444002, 0.1315473943943476, 0.05485946053314361, 0.113410791168427, 0.13225601089300343, 0.0743123138765368, 0.45412455813325936, 0.42786769799730584, 0.47450470718838, 0.47777003302785315, 0.456159217083001, 0.4622190335953892, 0.44345462535218383, 0.47987039897738315, 0.4360449171761167, 0.10880467101004176, 0.11104361421150821, 0.0778823147009573, 0.09044577895300698, 0.11105589600449839, 0.11832902026820136, 0.10289752287328136, 0.1339128455164761, 0.10420349691904396, 0.15685606622901227, 0.15398691215307136, 0.18806369958349378, 0.2327032542938713, 0.151823581588996, 0.16497952108632818, 0.2272457768214573, 0.22007723647184307, 0.20957766300887637, 0.20906616196107075, 0.2823483941624846, 0.3071875330545457, 0.3066839587657303, 0.27041409540135597, 0.3091750648296713, 0.27506336376812957, 0.31247895249955615, 0.2936475847266147, 0.19563671654801107, 0.2310353977253654, 0.1577965321861562, 0.2474946340188452, 0.259942138152493, 0.21116099993688886, 0.18464985984747084, 0.2370469364004042, 0.21766389049435175, 0.21708054490016648, 0.20158610178083614, 0.22815557679197906, 0.25271227615642866, 0.19749717353161056, 0.21510298108814685, 0.2318093177791748, 0.1981902602174591, 0.21623709843521433, 0.22346230651480126, 0.20542990444344766, 0.22475622084833313, 0.19849239762001847, 0.18797840764301665, 0.192154793051597, 0.21181920238772245, 0.2234529888493516, 0.2158562081690144, 0.1615175249920412, 0.184881518765721, 0.18242532035533432, 0.6477288408948547, 0.1943519843103968, 0.18886714518972758, 0.6531703323881197, 0.17134274090024992, 0.5531167847340352, 0.5335363278792202, 0.616104082559309, 0.2004180777595982, 0.4716908720540458, 0.5006006604036621, 0.6654187597169199, 0.41207290998719925, 0.4530108897101284, 0.438497643675416, 0.19442346088184315, 0.18513863404706998, 0.1714640084367215, 0.1814130597584641, 0.22107789514597476, 0.1861419225055303, 0.17708938369680416, 0.17836544838451263, 0.20127209092440346, 0.07730451200255195, 0.08394350079172785, 0.09214343180275286, 0.11658949773265681, 0.08081496534919352, 0.11653278477934292, 0.09355484115183177, 0.09024077670603436, 0.07495964441280756]}, "mutation_prompt": null}
{"id": "c5210b07-b910-494d-a9ea-8afa9707f520", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                # Incorporate chaotic sequence for enhanced exploration\n                chaotic_sequence = np.sin(3.14 * np.random.rand(self.dim))\n                \n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget)\n                social_coeff = social_coeff_base * (self.evaluations / self.budget)\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i])) * chaotic_sequence\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce chaotic sequences to enhance exploration capability in the velocity update.", "configspace": "", "generation": 7, "fitness": 0.16891651963974452, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.14.", "error": "", "parent_id": "7bb0df52-072e-471b-9498-51e7ad802494", "metadata": {"aucs": [0.5778337369727224, 0.6968307064144567, 0.7970980573992619, 0.16408878847435593, 0.2979679960684487, 0.359609762353154, 0.436469786328639, 0.26028435777458236, 0.28357840054451056, 0.10616975978916998, 9.999999999998899e-05, 0.11333286533528686, 0.13117358554692982, 0.05575597121306597, 0.10415987063638477, 0.05112485360084229, 0.029682779599032205, 0.026479131847427784, 0.08163097195999758, 0.10427783383353817, 0.09777301336527722, 0.07302436636860044, 0.09602239607932772, 0.08942275362816055, 0.07337517492912171, 0.10802346966177268, 0.09013146282149154, 0.08257713144528367, 0.08492062599148908, 0.08355249319659341, 0.07796229530949217, 0.08593958434930027, 0.119386804436041, 0.08808464934505122, 0.12184099241979895, 0.07279083135566344, 0.09708224631934603, 0.10233339056183954, 0.11566217228328879, 0.08322886007472696, 0.08041042704732304, 0.10377613953826348, 0.11245794838979672, 0.08225937815115181, 0.10072772504910976, 0.11624395842270174, 0.1026711591341869, 0.07451569351381748, 0.13043459824160997, 0.14508559945356359, 0.15380261902970815, 0.28024357008756573, 0.11108752981247694, 0.13867173663475574, 0.21444086994612366, 0.3514150337376525, 0.20913974537045965, 0.261530369326727, 0.2543348463613926, 0.3383928900544877, 0.14132708498606694, 0.13683673372691663, 0.15991978006889496, 0.1255476738168091, 0.1978724582605148, 0.02877725874612913, 0.13954688275826344, 0.12719343156064422, 9.999999999998899e-05, 0.14715749454984306, 0.16054528055515982, 0.14727337052934475, 0.11898227391937466, 0.11424192047973869, 0.18196727159408332, 0.12086522286746204, 0.16040518415202443, 0.21414393826735478, 0.12483709129612075, 0.13330375655480697, 0.14890701352846258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0034240081947216616, 9.999999999998899e-05, 0.07587105506949432, 9.999999999998899e-05, 9.999999999998899e-05, 0.08426026811954557, 0.18021051291548973, 0.0955717850904686, 0.13025502677903444, 0.06475613206691255, 0.061344519687128174, 0.10060760602471452, 0.18254743440500687, 0.08334536274273252, 0.17994184712110928, 9.999999999998899e-05, 0.10747472671092562, 9.999999999998899e-05, 0.10022437707849863, 9.999999999998899e-05, 0.09588391482485126, 9.999999999998899e-05, 9.999999999998899e-05, 0.022559508647000626, 0.0756305587281606, 0.059340206961549624, 0.04224358546243634, 0.024932433469409987, 0.059801904324714994, 0.08406736273736226, 0.06055891259292945, 0.006617479277535865, 0.03260055655579985, 0.37117291828751586, 0.40674668695090943, 0.38620658300572586, 0.28428247351620506, 0.2905495161356926, 0.2821315254771636, 0.4732824107513435, 0.43123040572387294, 0.461973154258299, 0.04971219828894047, 0.03617989955292755, 0.0638644354825958, 0.09446321300201399, 0.0740852554265683, 0.11050221995730114, 0.08073221621990057, 0.07639399180324313, 0.13537530826578936, 0.1678024348511894, 0.24896188137115594, 0.15559819279157705, 0.20849351201535915, 0.21308648193369817, 0.1534069670795798, 0.1742397125393903, 0.15452084214422923, 0.24044905231068336, 0.2671149574530819, 0.22036316122570543, 0.2544871913359069, 0.32154579712001363, 0.40134299557302344, 0.35192288717283904, 0.17881625524500955, 0.2702913759239388, 0.22451434505960333, 0.17125715020144294, 0.14711411041193645, 0.17869979959126436, 0.16062133550885227, 0.2651186732586265, 0.16791523312204348, 0.14937909851816078, 0.22876554492522183, 0.20274971381316087, 0.23522527638880164, 0.2020556652354818, 0.197392154823546, 0.2546155514363616, 0.2188085388623371, 0.21166156478970555, 0.21813952005863668, 0.20618490246813725, 0.21949290635310115, 0.18923648760139733, 0.1743193695438171, 0.1617505944165467, 0.16996929502921487, 0.18981251947882583, 0.18339207409099523, 0.16086135278665203, 0.1806668073898352, 0.16913136693991782, 0.12118543408927107, 0.1799053889793546, 0.14885668999869905, 0.6543550617403586, 0.18893461045297888, 0.6053854231746183, 0.13403816010104552, 0.4221672921317283, 0.1435718236427228, 0.47918945703366267, 0.8124182918208969, 0.20747354634980875, 0.5317726373671221, 0.15833546317232317, 0.13176259014879288, 0.23622158664435522, 0.24960094329125937, 0.24881529018452475, 0.2012593909359225, 0.20348818430350113, 0.19164868341807917, 0.21788380627967185, 0.18246803581650806, 0.18119702803932292, 0.20485515264732512, 0.20491323067567668, 0.19974314459409137, 0.08495459355026524, 0.08686170377399671, 0.09276933689056821, 0.07506503382755492, 0.07877791145436297, 0.1126603733423377, 0.07772260240353335, 0.08350896030233146, 0.09467434256833696]}, "mutation_prompt": null}
{"id": "ff283148-4459-41a0-a6d4-14bda20d420b", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                # Modified line for adaptive inertia weight\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget)\n                social_coeff = social_coeff_base * (self.evaluations / self.budget)\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Apply damping to the velocities\n                velocities[i] *= 0.95\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Enhance convergence by introducing velocity damping to reduce oscillations during optimization.", "configspace": "", "generation": 8, "fitness": 0.2959164052688806, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "7bb0df52-072e-471b-9498-51e7ad802494", "metadata": {"aucs": [0.8145745351458384, 0.7999984379544255, 0.8124524315994293, 0.791198257826178, 0.802811012903659, 0.8092708315640049, 0.8134842606442145, 0.8081626919909076, 0.7972645173362053, 0.45277809694563453, 0.21716119535059264, 0.5845698181230574, 0.5554051628441632, 0.6077281397519891, 0.5629932229043502, 0.1823301105210221, 0.5494159156786504, 0.44348304830181273, 0.15513306302811303, 0.13724861562504542, 0.1643570537754867, 0.13259143985643873, 0.14067384832797414, 0.12254146035140889, 0.08936769473657491, 0.13725778657398824, 0.10974225063216103, 0.11143373025541425, 0.06827825866435289, 0.0920786606698788, 0.10107629850298594, 0.13158068148984348, 0.08330911779206052, 0.09992913672087467, 0.13800662944889353, 0.09396162133404218, 0.8754268017305358, 0.9040056364045663, 0.9225818328561392, 0.7834830514412874, 0.8138272274652248, 0.7988528507677156, 0.8590323634637697, 0.8660934478843915, 0.8957328433581309, 0.4585196411028676, 0.5976898752017445, 0.6159859725946935, 0.4016147188402299, 0.6345810870543507, 0.5859504762540516, 0.616705581192363, 0.4855511383347878, 0.6570913346586545, 0.3509443854668082, 0.7432557596742231, 0.363350490550959, 0.27214474858343873, 0.2603849984107107, 0.20843355286257037, 0.2245013469582785, 0.2197455121815961, 0.5629194563988804, 0.16098389536007107, 0.12889291398433156, 0.12192227992276772, 0.10629985116628382, 0.17457465271097805, 0.17310350876160574, 0.19067167223654546, 0.20078188481047987, 0.22444206843327275, 0.16208483391341766, 0.20003075506393997, 0.24367297341945093, 0.268007257643742, 0.17478304251197374, 0.23863050128609298, 0.21300816729857053, 0.21413945246243615, 0.21433596285938994, 0.11387824486188969, 0.05318519315546821, 0.03423126787953312, 0.14588759241518023, 9.999999999998899e-05, 0.027857225349016357, 0.09034405729878292, 0.06675509099664068, 0.03108714098330534, 0.13215553466829366, 0.10045745259699657, 0.12246714534243996, 0.06990184349802364, 0.09625025208412008, 0.07165881660874707, 0.10877892325839844, 0.16439731827866821, 0.10459606284776113, 0.1055072833213404, 0.1422992876974306, 0.12224358071127739, 0.12009686405996511, 0.1236934953249571, 0.08473128799696938, 0.08856353721206012, 0.09336694822658809, 0.08731169612738376, 0.19682721070690845, 0.12264588103202712, 0.18386794925162797, 0.03297922948111187, 0.19723531900920144, 0.10486777791195168, 0.15610912069836136, 0.07569819296535663, 0.07795370564400417, 0.5276714627893448, 0.49789538931712995, 0.49778089954664584, 0.5123876149097806, 0.49447880565524993, 0.5140634594551441, 0.5195805600380747, 0.5379225434777584, 0.5636151344730078, 0.11059472175690732, 0.07684242258671525, 0.08541884530751065, 0.11781309631961412, 0.10314035129615318, 0.13549079633510186, 0.16380866462823762, 0.1273553864927529, 0.12138482776651305, 0.25767356908540573, 0.1698720864253802, 0.21307825483184606, 0.19882744557600884, 0.18375970061043012, 0.2392427702559865, 0.18076221929604486, 0.1727339741085291, 0.20826411283526225, 0.2684565415841187, 0.22987340692008074, 0.2841744382917256, 0.43201399231565774, 0.3672881677057439, 0.26627142340418997, 0.2389677897356951, 0.2321792428234235, 0.2590213855582457, 0.26990120020954556, 0.2486527978198828, 0.18184324762929593, 0.21933191344657255, 0.22044389175126444, 0.17779231642596482, 0.18591959035002703, 0.2485679232239183, 0.21489907797671026, 0.21834001104983347, 0.1862105631315336, 0.2030772943056257, 0.2594313110968667, 0.21847001989583592, 0.23621229797435472, 0.21632721876565075, 0.225234803476828, 0.21605990003518316, 0.19178282866651075, 0.20921429363956479, 0.1925374851297823, 0.2108771136035381, 0.1932920035040372, 0.18513328743164192, 0.21331939897166463, 0.22202651593781197, 0.22524008226212278, 0.180832110454912, 0.18025800829239758, 0.1479457528851741, 0.7538164323873786, 0.1967548942591829, 0.8450513363693959, 0.16598562046854803, 0.617736567591102, 0.5500083136191656, 0.5093033667054567, 0.7838943537992158, 0.5659096564756554, 0.5145989589807267, 0.6330262988942246, 0.5256800531592778, 0.6590013442392915, 0.44289327232123477, 0.6318856811036893, 0.20926222786876314, 0.18158658957396878, 0.18532360824708471, 0.1847629019296071, 0.19724321337845563, 0.19559539661184322, 0.18405720792423197, 0.19166369945397277, 0.19954987436510185, 0.08426781272785322, 0.1070677470156357, 0.08247228876090884, 0.07520102901123282, 0.10801025587696766, 0.11419939687432068, 0.09414757088835946, 0.09142180713248726, 0.07527662699261473]}, "mutation_prompt": null}
{"id": "ece84de1-29fd-4e34-b729-1ed862c32fcd", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                # Modified line for adaptive inertia weight\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                # Updated cognitive and social coefficients\n                cognitive_coeff = cognitive_coeff_base * np.var(swarm)\n                social_coeff = social_coeff_base * (1 - np.var(swarm))\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Enhance convergence by introducing adaptive cognitive and social coefficients based on variance in the population.", "configspace": "", "generation": 9, "fitness": 0.06725848626731938, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.14.", "error": "", "parent_id": "7bb0df52-072e-471b-9498-51e7ad802494", "metadata": {"aucs": [0.12573128019866198, 0.08108763387163931, 0.09328654330848718, 0.09788004039591414, 0.12081386588487131, 0.11042008850345264, 0.0998473575412605, 0.09652578845209503, 0.06863468668670525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 0.005375109906600173, 0.010643411704069683, 0.006592353378601756, 0.006669962766643223, 0.018248263482334326, 0.01907939869991082, 0.010674738340807233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 0.0004952459975243739, 9.999999999998899e-05, 0.01729024970856441, 9.999999999998899e-05, 0.01724145586094039, 0.0988054966186721, 0.9873670016164887, 0.3126847617818156, 0.9873746595160787, 0.9757560143179128, 0.09893458614984507, 0.09954906689269594, 0.09884951012102905, 0.9767749476977333, 0.06274794416174423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.04400590515244307, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.10449966628487983, 0.08224659834595494, 0.059824388882108726, 0.15838571439363391, 0.07285119553694963, 9.999999999998899e-05, 0.03671052741101921, 0.08874699715422008, 0.012122049935807677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038785813173876083, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013369654214255955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10888030686047845, 0.15756555760738078, 0.14838054695461433, 0.11904107487716664, 0.10794944028818121, 0.09580441870675127, 0.20533181614043883, 0.09778747138459387, 0.12980099166864634, 0.00926624095079609, 9.999999999998899e-05, 0.02198412468535549, 0.03266886175302153, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 9.999999999998899e-05, 0.0267656688986897, 0.09175126379712206, 0.09548391406060341, 0.11842175776965747, 0.09855305120349966, 0.10852972522114013, 0.10985532968930078, 0.12291422436297816, 0.08629394972165605, 0.0937752345504077, 0.1028643476597173, 0.10773627813833686, 0.1613932299901244, 0.13800672315110074, 0.1138073754026484, 0.10444782645124173, 0.12028165949079228, 0.17377774300845283, 0.11471801083403965, 0.05985564337097804, 0.03683550023936155, 0.08398582550377798, 0.08254209131735313, 0.06406947898089654, 0.06342850570876157, 0.0837317855149382, 0.0997711199450243, 0.06412526395900253, 0.11943364695601921, 0.09544557327861514, 0.13345086981233123, 0.1103568689991713, 0.09519512033215283, 0.10896891037713907, 0.12245976138762271, 0.07872931414554718, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07612528510443861, 0.07640603771848886, 0.0935483196159761, 0.07327841830047488, 0.1207914665021157, 0.07153542811333469, 0.1070176662487543, 0.10511484148144368, 0.06957073549503179, 0.11040265245322212, 0.10267165755511809, 0.06932034027342138, 0.05193784206319829, 0.07764646834411082, 0.05903250263678039, 0.06579452145821474, 0.049320812232425126, 0.05111739458703801, 0.16247409082752895, 0.1502855986696835, 0.15901419228947722, 0.1499229192654058, 0.21085826096920202, 0.15032709398781285, 0.15468061975785607, 0.17169333929432817, 0.14760785796585862, 0.033287446492909156, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.03425093938292756, 0.020045516730027746, 0.016228383701229143, 0.03803354422653826, 0.017643830485487344]}, "mutation_prompt": null}
{"id": "3b26a039-f964-415c-bcd6-9c553b697cec", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                # Modified lines for adaptive inertia weight\n                inertia_weight = 0.9 - 0.4 * np.power((self.evaluations / self.budget), 2)\n                \n                cognitive_coeff = cognitive_coeff_base * np.exp(-3 * (self.evaluations / self.budget))\n                social_coeff = social_coeff_base * (1 - np.exp(-3 * (self.evaluations / self.budget)))\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce non-linear inertia adaptation and dynamic coefficents to improve convergence.", "configspace": "", "generation": 10, "fitness": 0.24728089201503298, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.21.", "error": "", "parent_id": "7bb0df52-072e-471b-9498-51e7ad802494", "metadata": {"aucs": [0.5418639800351301, 0.5609490150304679, 0.5709872866520835, 0.5503396359160724, 0.47260286563412457, 0.5503849140939899, 0.5418797684364947, 0.5492725286540697, 0.5551605333183487, 0.22201738749479305, 0.07324169702216965, 0.2799505414383895, 0.00424453578259687, 0.07131558717466246, 0.023033397791969445, 0.15957792155949668, 0.14168151756835756, 0.07453587816927265, 0.12288403769956424, 0.09568433496385387, 0.13779243693776444, 0.10810822686989463, 0.15180419575119464, 0.096870148633031, 0.09419734111117029, 0.1414829265668881, 0.11274280786100577, 0.09714083272144802, 0.10377004271782753, 0.12192146130010684, 0.10326693872399395, 0.09027465172265825, 0.1366837003139788, 0.13450173001349286, 0.14703185796768048, 0.13931505035340397, 0.9505423878872201, 0.9585826714237985, 0.9581939650604756, 0.9267853968847709, 0.9101006747095283, 0.9293168112187746, 0.9366184194306199, 0.931907851018186, 0.9423418116339494, 0.3159995151702444, 0.3231129768549619, 0.31670143961121044, 0.3870867750053788, 0.2552491236957801, 0.24588954282053133, 0.31492320514974403, 0.28878858117923045, 0.35487169612924163, 0.6566879214700039, 0.22033284487193205, 0.5432716892700422, 0.19176292639371972, 0.2030929876077795, 0.25375199600730236, 0.21102845749336208, 0.5546663278869963, 0.2257233732932049, 0.13807053087879684, 0.20367595660530502, 0.14180748511894248, 0.10922206594229411, 0.17711445736133302, 0.17504143260735094, 0.19638892988485235, 0.15564483866388346, 0.12142268055762684, 0.1451464951999083, 0.14446235587025258, 0.1741990414534753, 0.16984300410872055, 0.12396298660434146, 0.12154143331475697, 0.1887012476114357, 0.17569993981730092, 0.13809859662431567, 0.021615191759596697, 0.05245735478323754, 0.023808992883240343, 0.03830990523485489, 0.0008199916589508582, 0.0031752349928979573, 0.059376887497650355, 0.05464853871644104, 9.999999999998899e-05, 0.20951687190802226, 0.08468467323030548, 0.10222023083236886, 0.08517795919466697, 0.0661015523199816, 0.07063803781260991, 0.09832435570467601, 0.1459618818858005, 0.14602963332596752, 0.0820739368586082, 0.025915862782032728, 0.0776734191910633, 0.062680515950159, 0.0707993493264979, 0.030340252658291655, 0.03531732428391243, 0.06461834909797359, 0.09255675776340888, 0.12721230977187314, 0.0868454826421341, 0.16263343251097284, 0.06334257257248987, 0.09689529980910772, 0.08696181976103368, 0.14188373715516556, 0.06929176561311035, 0.0806337874092915, 0.36516089893789827, 0.4027832264822492, 0.4712629390364558, 0.45490481476251565, 0.39995388458253156, 0.4099788704113233, 0.4721437500006247, 0.4064257103782808, 0.40196341464253504, 0.10662157709293174, 0.07356226511374664, 0.09650108173513294, 0.09943362991616489, 0.1024821228142353, 0.12148568355835321, 0.0830791199577876, 0.14727688781430004, 0.11495583330920867, 0.20169714378589454, 0.1830546795440603, 0.2483509754197396, 0.2500582061193336, 0.2939246211302249, 0.2584236557314361, 0.19769935095214997, 0.1889548380453796, 0.21463361884772136, 0.3293440161990149, 0.29085302777644095, 0.3044550492267938, 0.2860979054714127, 0.2740674541056828, 0.2989819908973209, 0.28555142830247304, 0.33135030739649507, 0.3665189380343743, 0.20997865962952023, 0.28401152586050493, 0.2641314054871947, 0.2754347638605138, 0.21671345792966457, 0.26869231362217194, 0.17501145872508328, 0.27027738352391895, 0.18757153072845745, 0.21528832439506562, 0.2400727044300286, 0.22408404165172813, 0.21363187712411813, 0.19025082657705594, 0.22501124573362352, 0.23404400234024658, 0.20935942457828483, 0.19740804779199483, 0.1937105920012393, 0.20551509533927392, 0.1941005740273053, 0.19513872153437983, 0.20216861066655756, 0.1949693696254603, 0.20360594593467374, 0.19644175899811145, 0.18377114259843652, 0.6082065250778868, 0.18127476512526453, 0.15071911774323454, 0.5869561567738262, 0.526660725722992, 0.6418136639672429, 0.6141784279611505, 0.16618971618871814, 0.6197209040909808, 0.4394236102331506, 0.23815115433122158, 0.47230166090154047, 0.16610538344163417, 0.4704985748799517, 0.2778606460745743, 0.3480826139914297, 0.4635011832226803, 0.5846518090095247, 0.19308492982000058, 0.18717094678690405, 0.1866819578235709, 0.1972585130222767, 0.18523800980301186, 0.19060310613626374, 0.1954544726122931, 0.1885599360313106, 0.19119380455099966, 0.0911648821979737, 0.10184805669920693, 0.08830789415457507, 0.08581737144522716, 0.08600251374565937, 0.10981317249652855, 0.08845395366384723, 0.07855641363064203, 0.10024854934026295]}, "mutation_prompt": null}
{"id": "6ad2f513-6eee-4e94-918b-8cf1a55b5742", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                # Modified line for adaptive inertia weight\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget)\n                social_coeff = social_coeff_base * (self.evaluations / self.budget)\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive population size\n            population_size = int(min(50, max(5, population_size * (1 + 0.1 * (1 - self.evaluations / self.budget)))))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce an adaptive population size to balance exploration and exploitation throughout the optimization process.", "configspace": "", "generation": 11, "fitness": 0.30527436572340294, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.24.", "error": "", "parent_id": "7bb0df52-072e-471b-9498-51e7ad802494", "metadata": {"aucs": [0.7856735571952778, 0.7750268014045623, 0.7920248860551589, 0.7673875834081116, 0.7758735353561703, 0.7601943246177498, 0.7793049203853347, 0.7830376512511469, 0.7022774265794576, 0.4797174556187892, 0.47485541061556447, 0.3769160939685552, 0.3480990822111927, 0.5374262458631194, 0.17601344567448218, 0.5463068872966832, 0.49181223286964937, 0.5096017839946754, 0.10760292790733672, 0.14905106379965127, 0.0962195944551093, 0.11975837647112697, 0.16085053405171623, 0.1336010267185257, 0.12937117058546532, 0.12019823769708304, 0.15073641061277598, 0.09797202281887862, 0.15260486838378806, 0.10692720518786258, 0.09950633574754209, 0.11426712054279764, 0.11431722029012326, 0.11597272983116891, 0.11255882205363799, 0.10853268075524791, 0.9088664921706082, 0.9270550944558548, 0.93675496549651, 0.8933796973781777, 0.8663367791821779, 0.8438224662897502, 0.9095724080499586, 0.8987276100675087, 0.9228586484695621, 0.39605779890821646, 0.5582755572443224, 0.5908700210265025, 0.5333383204293436, 0.5287365339836594, 0.5378402172279404, 0.5779569153614506, 0.5673028202729637, 0.5992548716142159, 0.7627706982446001, 0.3505713013998998, 0.3676528642444873, 0.2708963282410307, 0.8094406514510734, 0.20365212686938639, 0.21191280290989034, 0.21120648769403783, 0.3593431252446626, 0.163012401293384, 0.14359841612602198, 0.11174505395120582, 0.13535712751572682, 0.22897101033945677, 0.11082948260425762, 0.20789078849055076, 0.22170021996626021, 0.19056467012392464, 0.16709241114217388, 0.11630005771149754, 0.2164617729083198, 0.24500134591576217, 0.24016915975122444, 0.2366041992176896, 0.23053119811328038, 0.23043193451125976, 0.194886357037803, 0.0848996940612442, 0.014170062510486026, 0.06713300051903626, 0.06451831443487677, 9.999999999998899e-05, 0.06537527166886214, 0.009517834795775504, 0.007955330829915508, 0.06049399479810402, 0.0954394201707981, 0.0801066805661168, 0.1315307795636751, 0.08334313333755727, 0.10683936539410466, 0.16350399634825918, 0.14384029119549213, 0.16841046652332592, 0.08543935080779452, 0.09582600789563034, 0.042319923531384696, 0.30982145244192727, 0.047413703936113105, 0.13303900937168145, 0.06644952015618599, 0.12019389101471245, 0.060431146399393065, 0.1646560864019162, 0.24331966584705256, 0.13247389835660706, 0.18447355605941784, 0.09276527352543928, 0.11886413250175631, 0.06572255020547468, 0.12131211813732101, 0.14456446538718115, 0.07791511401839357, 0.5263897531461718, 0.4896956217427374, 0.5197797039764942, 0.5176488416828371, 0.5231463027918455, 0.5118663557800553, 0.5503898897601356, 0.551692988196615, 0.5123790636893463, 0.14333504175089096, 0.10520704787076152, 0.08395407096157126, 0.12448549944653298, 0.12706463436199034, 0.12819387213890354, 0.11352599843321354, 0.15685633400984933, 0.16288392472358115, 0.14316681255836883, 0.17143649285814533, 0.15289341458098282, 0.23523164427442889, 0.1854799699418097, 0.16087193493139962, 0.22857181280404693, 0.2066839564211741, 0.2259853492366305, 0.2794837469913819, 0.2876283624124354, 0.3143994599436801, 0.35280235088195944, 0.33800484475922143, 0.3702310029780719, 0.2401486255928068, 0.4518786549944872, 0.26364672274098155, 0.18851177642219719, 0.19108154354821316, 0.2512063689089694, 0.3289770044632845, 0.26206788639929923, 0.27715593414307227, 0.1969904382235621, 0.23935646155020662, 0.19952372285410713, 0.2109375883778598, 0.20511713316824587, 0.203772347702606, 0.21177062097657995, 0.22910002362809734, 0.2052769262259, 0.23219969279728025, 0.23040306647427533, 0.23746106362993746, 0.233399465561004, 0.22107025585986206, 0.184909798234128, 0.1948407335178709, 0.20956298661849038, 0.1863269475477658, 0.2051587707495668, 0.5046930756615298, 0.1857885737391355, 0.7510046771553301, 0.16717780495357148, 0.7756775504795914, 0.744106038907783, 0.6903589753960464, 0.7957684074724741, 0.7319480192371406, 0.5676381701411878, 0.14796783770272415, 0.665946649822122, 0.47213309148763816, 0.5337037064041527, 0.4465334096120992, 0.5064916720252218, 0.5114287069601098, 0.5201974352095239, 0.45353584598917696, 0.6034771827552592, 0.19756116593956907, 0.18507838995462011, 0.18521955224673248, 0.18554717176979907, 0.18124208066508418, 0.20699621355232822, 0.18473182571958602, 0.18750927382840077, 0.18883190696913177, 0.09241382968928269, 0.11637756562294854, 0.0831902648867141, 0.09238788960488964, 0.080203233359039, 0.08507165284351781, 0.0908976353483566, 0.09718737067397609, 0.0886430958851877]}, "mutation_prompt": null}
{"id": "c7fec616-1450-4045-8f5a-dd8e2460a1a9", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                cognitive_coeff = cognitive_coeff_base * (0.5 + 0.5 * (self.evaluations / self.budget))\n                social_coeff = social_coeff_base * (0.5 + 0.5 * (1 - self.evaluations / self.budget))\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce adaptive coefficients based on evaluations for enhanced exploitation-exploration balance.", "configspace": "", "generation": 12, "fitness": 0.21644533189495643, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "7bb0df52-072e-471b-9498-51e7ad802494", "metadata": {"aucs": [0.5009061571583363, 0.5932239879557977, 0.5946351080723156, 0.5595895547305698, 0.5129081586334192, 0.6006822667096515, 0.5899754945014205, 0.5933111160196609, 0.17864637371506176, 0.24461441265473016, 0.29387431487019033, 0.09448425361755508, 0.2431489438732345, 0.208648279876265, 9.999999999998899e-05, 0.03351908713506668, 0.22824296367778607, 0.2943514380161846, 0.11744174481479408, 0.13045423293007574, 0.1012293656993497, 0.11272773440072414, 0.11542040551222599, 0.09679331464482999, 0.11576520784698008, 0.1731462615905459, 0.14248201628837864, 0.08521445233951852, 0.11753214423071312, 0.10876618684291206, 0.12067784361024969, 0.0878700573228669, 0.08978231772883705, 0.08957193645263017, 0.0931011434581025, 0.10720207163312279, 0.9847318255936098, 0.9676679976885293, 0.9886981248485448, 0.983891876771388, 0.9856470989134382, 0.9804891884212585, 0.9858595040021597, 0.9853599545027751, 0.9837303452374837, 0.3392023107047164, 0.3300514687862556, 0.05860654125279163, 0.3284804359938386, 0.31872360785150666, 0.13787377675738532, 0.08203293194825478, 0.32700291654745994, 0.10907082520527822, 0.1691328769941114, 0.2101924341914132, 0.2872474439258872, 0.20170495774088104, 0.2955960822087499, 0.18385951201109085, 0.11491678281567363, 0.1193649611766121, 0.2018292017778167, 0.13619386953855173, 0.07851939940024455, 0.11998399155818296, 0.07741520801009794, 0.15056964005490592, 0.1129308928535444, 0.1249008991524082, 0.1374756582252077, 0.14466393954841972, 0.13042600143091398, 0.014892741632282047, 0.07432952516267, 0.09047784917139345, 0.16581255512583415, 0.14140651894313483, 0.10335427531562236, 9.999999999998899e-05, 0.09990934813273367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03725359769299341, 0.009928967014979029, 0.000610142819153392, 9.999999999998899e-05, 9.999999999998899e-05, 0.06165959832469303, 0.022401880095749616, 0.051800889573639486, 0.08523389423627015, 0.01177035819683514, 0.011755540620290272, 0.044945758981253636, 0.028732042099830823, 0.07558685096932838, 0.0304708853748914, 0.0247678709057918, 0.02328943345801804, 0.03849766941817523, 0.026862340895921766, 0.04770003771436204, 0.05018226668771553, 0.03592763911766361, 0.06575581045492596, 0.06582490528731744, 0.023517241227418162, 0.11552832630082799, 0.05476080673430883, 9.999999999998899e-05, 0.004219590210189694, 0.03384811928879061, 0.08451746494753842, 0.06294843483224155, 0.42346560475325956, 0.41714341029787017, 0.4409109682704003, 0.40321896828557324, 0.4470949156805907, 0.3295177463183321, 0.38133365280977627, 0.3856646194757207, 0.4121691103689207, 0.0604570659986009, 0.06198143850449067, 0.05400755263517587, 0.11203025078414464, 0.09877195345647594, 0.09327579894318494, 0.08018637311900689, 0.1280701652139733, 0.08238097641929365, 0.2755934904485928, 0.2126251612354939, 0.20593797969849703, 0.1777926382968108, 0.18038286514198554, 0.18879743654369918, 0.247563700960708, 0.18876072240590702, 0.19953355707215092, 0.2829772406505322, 0.2654064776841881, 0.30040287302708457, 0.25052910846548826, 0.19386158694028077, 0.24051884514616084, 0.32600151237316455, 0.36736996332574756, 0.34579380661577264, 0.21363062345609785, 0.2015706422687239, 0.19564157755255462, 0.13354240408855844, 0.23208656144731554, 0.2119616945604582, 0.20097699321451823, 0.26437704438162135, 0.2879869030705303, 0.1929701565889016, 0.15065291560399496, 0.19311691787227325, 0.2480722970431406, 0.1960267463899087, 0.19636768774131497, 0.20089443382846484, 0.20134481240685131, 0.18553058865440242, 0.20825430852920557, 0.20804470157898036, 0.18721504370215913, 0.21255781762685588, 0.22360637673336026, 0.19696444846197192, 0.2150480766149292, 0.19632718145318262, 0.18565282413465634, 0.6681338875241473, 0.1678087442439501, 0.12403440537901878, 0.5803977202117239, 0.19260014572994932, 0.12671327457929926, 0.5408766503661075, 0.1887079585163336, 0.7093702941282289, 0.4662390839684316, 0.20758221221825457, 0.2645188626230448, 0.39895934270219646, 0.4604173885399685, 0.13276535215077057, 0.1031100772254584, 0.187687733072471, 0.15198361648347236, 0.21635692311660726, 0.18576836463271207, 0.19605085259902355, 0.2037687676925728, 0.18278473825528485, 0.19416018800177914, 0.21539714201626126, 0.19532585673971303, 0.1883269692260201, 0.07636264839046691, 0.08503819347007735, 0.0773739576113508, 0.06875737246695701, 0.07674492544684652, 0.0855593751362852, 0.10609595779353187, 0.08666092567018091, 0.07243445583983443]}, "mutation_prompt": null}
{"id": "095e512c-a315-4cdd-9b48-da391dc66f86", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                # Modified line for adaptive inertia weight\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.97  # Introduced a decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce a decay factor in cognitive and social coefficients for improved balance.", "configspace": "", "generation": 13, "fitness": 0.31553039797694127, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "7bb0df52-072e-471b-9498-51e7ad802494", "metadata": {"aucs": [0.7810983807876964, 0.7425893686205127, 0.7769628107984308, 0.7207902871570786, 0.7845518048913482, 0.7883993547889762, 0.7595703137071862, 0.7589931526782085, 0.7681634827024957, 0.41095865569776613, 0.46405374558295565, 0.5299086695315791, 0.36889851320148503, 0.41337407021236705, 0.424364817163995, 0.25142227122831906, 0.4725472751012566, 0.4163546983381733, 0.12044776439135307, 0.13633887628913144, 0.15896258308844613, 0.14765749410426465, 0.13329289508503572, 0.12431953885620095, 0.14824484377803326, 0.1153986697005508, 0.10558966799052938, 0.1103396418965249, 0.10461711163046783, 0.09356078214701413, 0.12031591794486762, 0.10536948736361884, 0.14278558177979261, 0.12149146407236189, 0.14383056346130052, 0.09065464439517923, 0.9093985006399392, 0.9270225842432895, 0.9364067484353598, 0.8930499248475776, 0.8687222040617905, 0.8429914304010808, 0.9094354684159939, 0.8985785493676486, 0.9226193360732508, 0.5707698105488055, 0.5588023479691269, 0.6159837226336391, 0.5840286907362944, 0.6006018544879355, 0.5677599125056885, 0.5999487079243074, 0.5576211026926736, 0.5689101492684545, 0.7911315883294008, 0.7006862354193877, 0.36934693421920994, 0.2698358143600742, 0.3492185033709052, 0.20692007689019665, 0.23452529464667637, 0.6435337077081078, 0.8097466712127495, 0.19009478632633603, 0.13527702313589307, 0.10979885993182492, 0.17726325691055012, 0.23293658799474815, 0.14353588209300083, 0.2065023414155358, 0.2477998654782596, 0.22148261004722924, 0.1921921160327963, 0.12219669825280721, 0.21058977168000959, 0.27861285842010275, 0.2199328469961237, 0.25822797601605874, 0.2217117915681236, 0.2360811947149669, 0.2288191100338941, 0.060595337357403856, 0.09301604626498627, 0.007137644817182598, 0.06021692177588123, 0.013658402684708415, 0.08928758115490343, 0.1234474988595139, 0.0100206055587998, 0.10829513142166614, 0.17266563079558472, 0.0923511918034039, 0.15189917617905735, 0.0776333466734701, 0.15246983623890376, 0.10885310721020547, 0.10546512301596944, 0.12396719388468647, 0.13800117683067237, 0.10496443939923938, 0.053490829802283923, 0.21485769822983014, 0.08654780161685616, 0.1944959631214872, 0.08257830309909209, 0.10043163205276218, 0.059249790570893524, 0.17099979175887514, 0.16827793540971014, 0.10488828837097486, 0.16788853119547476, 0.1500963015100062, 0.2111295638869135, 0.05846270297355605, 0.14860974510241598, 0.09095579523572628, 0.0769216774668372, 0.5327399244601476, 0.5467056560261289, 0.4976156815035061, 0.4930209781405739, 0.5356466946393346, 0.5723778419976089, 0.5197769242121961, 0.5233032471350616, 0.5373924063310305, 0.08313302033291836, 0.09908854766052078, 0.08810798086874438, 0.13228708621226049, 0.12845299689409873, 0.1309919659982841, 0.1098903265103649, 0.12023039259160373, 0.12183288884490373, 0.2596822754127842, 0.14215669500072803, 0.2725822822243674, 0.2030992540780806, 0.2352643936623081, 0.27271487554554275, 0.20712266891057074, 0.19578034739824646, 0.19508441943589783, 0.3004536563339507, 0.2814250894910577, 0.31546922403507505, 0.38330701382862853, 0.38484058785325503, 0.47745207732225603, 0.2180503282580124, 0.43817297056380666, 0.242372553764984, 0.2839550556635758, 0.26800765172475116, 0.22987205270904765, 0.20979298458105544, 0.3140386707968722, 0.21802367542410805, 0.2368530416104656, 0.32046544293178736, 0.23921449980473197, 0.22008091835759513, 0.24287913890316315, 0.23885995765422963, 0.2101858924469917, 0.21798840718631995, 0.22948426779630293, 0.23186057627245338, 0.26191685743222337, 0.21677061229906025, 0.185278682439996, 0.21304222001429451, 0.21196097954296744, 0.23589872832866476, 0.18281664424038935, 0.2093836731087596, 0.19397663417431754, 0.20217218541744286, 0.2027760667290981, 0.7755776700314525, 0.1774707508665868, 0.7712263232528317, 0.7279850681495645, 0.6970319234295221, 0.8422117219307743, 0.764890515479547, 0.5945103272686092, 0.14800877812641833, 0.723979734104816, 0.5756911106099595, 0.5976773847572417, 0.1602023121184809, 0.5013733635665896, 0.41663790850472293, 0.6835078828979969, 0.5445844888093692, 0.6301793456827938, 0.19940443738430602, 0.18263394024777357, 0.20605000674665908, 0.19746243961408627, 0.1897335549470638, 0.18630684215011595, 0.18244953551299314, 0.19013638588851545, 0.20233494037414435, 0.10990636475958981, 0.1317937915873727, 0.09184823114609153, 0.08644065538462531, 0.0908404344061513, 0.08512884944224064, 0.11448158925225493, 0.13103819004781403, 0.08794998151847522]}, "mutation_prompt": null}
{"id": "4020bbc0-3d99-4cfe-977a-2f05e40480e6", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                # Modified line for adaptive inertia weight\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.97  # Introduced a decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Adjust population size dynamically\n            population_size = int(min(50, self.budget // 10 * (1 + 0.1 * (self.evaluations / self.budget))))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Incorporate a dynamic population size adjustment to balance exploration and exploitation more effectively.", "configspace": "", "generation": 14, "fitness": 0.31553039797694127, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "095e512c-a315-4cdd-9b48-da391dc66f86", "metadata": {"aucs": [0.7810983807876964, 0.7425893686205127, 0.7769628107984308, 0.7207902871570786, 0.7845518048913482, 0.7883993547889762, 0.7595703137071862, 0.7589931526782085, 0.7681634827024957, 0.41095865569776613, 0.46405374558295565, 0.5299086695315791, 0.36889851320148503, 0.41337407021236705, 0.424364817163995, 0.25142227122831906, 0.4725472751012566, 0.4163546983381733, 0.12044776439135307, 0.13633887628913144, 0.15896258308844613, 0.14765749410426465, 0.13329289508503572, 0.12431953885620095, 0.14824484377803326, 0.1153986697005508, 0.10558966799052938, 0.1103396418965249, 0.10461711163046783, 0.09356078214701413, 0.12031591794486762, 0.10536948736361884, 0.14278558177979261, 0.12149146407236189, 0.14383056346130052, 0.09065464439517923, 0.9093985006399392, 0.9270225842432895, 0.9364067484353598, 0.8930499248475776, 0.8687222040617905, 0.8429914304010808, 0.9094354684159939, 0.8985785493676486, 0.9226193360732508, 0.5707698105488055, 0.5588023479691269, 0.6159837226336391, 0.5840286907362944, 0.6006018544879355, 0.5677599125056885, 0.5999487079243074, 0.5576211026926736, 0.5689101492684545, 0.7911315883294008, 0.7006862354193877, 0.36934693421920994, 0.2698358143600742, 0.3492185033709052, 0.20692007689019665, 0.23452529464667637, 0.6435337077081078, 0.8097466712127495, 0.19009478632633603, 0.13527702313589307, 0.10979885993182492, 0.17726325691055012, 0.23293658799474815, 0.14353588209300083, 0.2065023414155358, 0.2477998654782596, 0.22148261004722924, 0.1921921160327963, 0.12219669825280721, 0.21058977168000959, 0.27861285842010275, 0.2199328469961237, 0.25822797601605874, 0.2217117915681236, 0.2360811947149669, 0.2288191100338941, 0.060595337357403856, 0.09301604626498627, 0.007137644817182598, 0.06021692177588123, 0.013658402684708415, 0.08928758115490343, 0.1234474988595139, 0.0100206055587998, 0.10829513142166614, 0.17266563079558472, 0.0923511918034039, 0.15189917617905735, 0.0776333466734701, 0.15246983623890376, 0.10885310721020547, 0.10546512301596944, 0.12396719388468647, 0.13800117683067237, 0.10496443939923938, 0.053490829802283923, 0.21485769822983014, 0.08654780161685616, 0.1944959631214872, 0.08257830309909209, 0.10043163205276218, 0.059249790570893524, 0.17099979175887514, 0.16827793540971014, 0.10488828837097486, 0.16788853119547476, 0.1500963015100062, 0.2111295638869135, 0.05846270297355605, 0.14860974510241598, 0.09095579523572628, 0.0769216774668372, 0.5327399244601476, 0.5467056560261289, 0.4976156815035061, 0.4930209781405739, 0.5356466946393346, 0.5723778419976089, 0.5197769242121961, 0.5233032471350616, 0.5373924063310305, 0.08313302033291836, 0.09908854766052078, 0.08810798086874438, 0.13228708621226049, 0.12845299689409873, 0.1309919659982841, 0.1098903265103649, 0.12023039259160373, 0.12183288884490373, 0.2596822754127842, 0.14215669500072803, 0.2725822822243674, 0.2030992540780806, 0.2352643936623081, 0.27271487554554275, 0.20712266891057074, 0.19578034739824646, 0.19508441943589783, 0.3004536563339507, 0.2814250894910577, 0.31546922403507505, 0.38330701382862853, 0.38484058785325503, 0.47745207732225603, 0.2180503282580124, 0.43817297056380666, 0.242372553764984, 0.2839550556635758, 0.26800765172475116, 0.22987205270904765, 0.20979298458105544, 0.3140386707968722, 0.21802367542410805, 0.2368530416104656, 0.32046544293178736, 0.23921449980473197, 0.22008091835759513, 0.24287913890316315, 0.23885995765422963, 0.2101858924469917, 0.21798840718631995, 0.22948426779630293, 0.23186057627245338, 0.26191685743222337, 0.21677061229906025, 0.185278682439996, 0.21304222001429451, 0.21196097954296744, 0.23589872832866476, 0.18281664424038935, 0.2093836731087596, 0.19397663417431754, 0.20217218541744286, 0.2027760667290981, 0.7755776700314525, 0.1774707508665868, 0.7712263232528317, 0.7279850681495645, 0.6970319234295221, 0.8422117219307743, 0.764890515479547, 0.5945103272686092, 0.14800877812641833, 0.723979734104816, 0.5756911106099595, 0.5976773847572417, 0.1602023121184809, 0.5013733635665896, 0.41663790850472293, 0.6835078828979969, 0.5445844888093692, 0.6301793456827938, 0.19940443738430602, 0.18263394024777357, 0.20605000674665908, 0.19746243961408627, 0.1897335549470638, 0.18630684215011595, 0.18244953551299314, 0.19013638588851545, 0.20233494037414435, 0.10990636475958981, 0.1317937915873727, 0.09184823114609153, 0.08644065538462531, 0.0908404344061513, 0.08512884944224064, 0.11448158925225493, 0.13103819004781403, 0.08794998151847522]}, "mutation_prompt": null}
{"id": "215e3992-f36c-419f-b80c-82cac42163af", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        initial_population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (initial_population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (initial_population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(initial_population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            # Introduced adaptive population size\n            population_size = int(initial_population_size * (1 - (self.evaluations / self.budget) * 0.5)) or 1\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.97\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce adaptive population size to maintain exploratory and exploitative balance throughout the optimization process.", "configspace": "", "generation": 15, "fitness": 0.3114343519340768, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.24.", "error": "", "parent_id": "095e512c-a315-4cdd-9b48-da391dc66f86", "metadata": {"aucs": [0.7935883266895651, 0.7826794378561712, 0.7721974915141386, 0.7973049394097584, 0.790391460127255, 0.7803972678096773, 0.7763603562702779, 0.7670701850833717, 0.7992584136894805, 0.511307802369537, 0.48909867454091527, 0.5294876343981941, 0.4742864646024887, 0.42176648630101166, 0.5304923315521919, 0.33327424155696184, 0.5397832934821241, 0.5476770741826414, 0.3889361439194682, 0.13014049084980528, 0.14348672069516522, 0.11792735789811226, 0.13744184436193396, 0.15819209036224524, 0.10489397127641442, 0.15748446376737335, 0.1396640449570612, 0.10372228659218186, 0.1321598847467148, 0.10760382566181648, 0.10635579581937527, 0.10016549129234131, 0.11664615497655828, 0.10661735172764075, 0.11980448326277926, 0.08928851752330647, 0.8988938435328011, 0.9243553204732338, 0.9339096978105181, 0.878485902826539, 0.8786856989568679, 0.8937031500721632, 0.9163667090668298, 0.8927150413356911, 0.9227338770964679, 0.5297730173107533, 0.638069816339276, 0.6599980840515713, 0.6169850069917983, 0.4478712221644572, 0.6318444467737458, 0.632324648426824, 0.46913885089379115, 0.62856875302077, 0.7678397840019149, 0.7096728358993183, 0.809840258894942, 0.2691631423392974, 0.3552245245759619, 0.18429883001796965, 0.17020310316227605, 0.22319708075041278, 0.23497137402217572, 0.19672019828513088, 0.24683552112972051, 0.1708889359917306, 0.2093218975511546, 0.20663465784450152, 0.19759180473257054, 0.2218176257619583, 0.2636604833019103, 0.21775992008266454, 0.22275963747025895, 0.22178424657387263, 0.13629949417938036, 0.27581590660529876, 0.26623138647567446, 0.2600504954337568, 0.21752681450752154, 0.20857046139708513, 0.2262867063667291, 0.10916175324583743, 0.05919190486974435, 0.00972821045050365, 0.05648524881139694, 0.06583516891885333, 0.007567136048395318, 0.12482358686700246, 0.050833006948826864, 0.09183347370118411, 0.14960180736518125, 0.13122949399317918, 0.16129750350557603, 0.06572793072023653, 0.09435716227648083, 0.08544461596344666, 0.13711372551073253, 0.14028236854990772, 0.2062972632988952, 0.17005522822555763, 0.02998055518521192, 0.2214366181043893, 0.11151789695308922, 0.14765777927524393, 0.11141310592578646, 0.1309104224432649, 0.09618768676014255, 0.05882155925619825, 0.13831862191251698, 0.21161872488201572, 0.2584530471094304, 0.07233960081750612, 0.3544671155763752, 0.13382356660383432, 0.10961714262399713, 0.11592037564668023, 0.07719027622711261, 0.4969617807546596, 0.5134444775985779, 0.5031374770262281, 0.5017492113531901, 0.5150092347477948, 0.535868309513504, 0.5327730668279504, 0.5499794944964282, 0.5291709153262902, 0.09820850610361553, 0.09671771831862552, 0.11679807756293414, 0.12159550961002408, 0.1350474177517148, 0.12606889730343462, 0.15848220795278667, 0.11634085868335475, 0.16008434252792525, 0.2065763330840248, 0.2639807379774094, 0.13862262552945326, 0.23208432876247365, 0.1638216472496018, 0.1658431691391783, 0.1754232825212706, 0.19839502647149276, 0.14610382163983326, 0.42552370743678625, 0.42141730175270753, 0.34974356159887754, 0.3901976026816799, 0.28023046751980385, 0.30723082636691645, 0.2273462274285073, 0.2925506377304119, 0.40068769058197584, 0.19247650808534278, 0.20391623694057248, 0.2803095208261569, 0.3598514755607929, 0.24846179836347893, 0.3006992752404982, 0.18405439061522955, 0.2584800113771337, 0.21129246936573198, 0.23887041169660428, 0.25680631807306287, 0.22161747045685887, 0.2630364795593061, 0.24246362510995556, 0.23183613279997983, 0.21786127815530576, 0.303304499135737, 0.22700838105389487, 0.2428776473933656, 0.22650755686518087, 0.21416788568246659, 0.22870285702764526, 0.212440667118029, 0.20617534176806507, 0.21886937422505548, 0.2047737167517576, 0.20815962011368527, 0.1816421698483247, 0.17329578834836734, 0.1841373162450365, 0.6799948511347254, 0.193682785760097, 0.789642184212963, 0.7723277395279189, 0.7007215596282368, 0.40793310470137856, 0.20240912565329705, 0.20299191701438657, 0.6791202643129242, 0.5372807509235417, 0.6677066265111807, 0.1976503292865449, 0.5618232607648567, 0.6517595495167857, 0.6189312463885044, 0.1833593077442287, 0.18349964108089434, 0.19845515187651386, 0.20770848506149608, 0.20581231385464116, 0.17712330108504248, 0.20153546080494822, 0.19524177973728496, 0.19750870811517174, 0.0948892159318635, 0.08890921058071599, 0.10135238365724542, 0.08025953671918451, 0.10255611440546053, 0.09207047585578709, 0.0915485287552481, 0.09129922279514935, 0.09651946142923518]}, "mutation_prompt": null}
{"id": "cd047db1-721b-4521-bd6f-b9385473b22e", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                # Modified line for adaptive inertia weight\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.9 + 0.07 * (1 - self.evaluations / self.budget)  # Adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce an adaptive decay factor for improved convergence dynamics.", "configspace": "", "generation": 16, "fitness": 0.3097945154710869, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.24.", "error": "", "parent_id": "095e512c-a315-4cdd-9b48-da391dc66f86", "metadata": {"aucs": [0.7602556438746949, 0.7374287961493615, 0.7870146861636875, 0.758754192108347, 0.7628161059904164, 0.7739754671960363, 0.7826563512764311, 0.7741549620498819, 0.7570248564177184, 0.19200086288434026, 0.463941084379373, 0.4454990426495474, 0.409102312095324, 0.47385537854769333, 0.35265858744372536, 0.48706784732929875, 0.4756313604813788, 0.4176587117868663, 0.1344331708271569, 0.13791486703456501, 0.13163021177046974, 0.13366827870788822, 0.1219555293179394, 0.1374856627011568, 0.131398983913128, 0.12326268490000858, 0.13069085811485015, 0.1075540563277182, 0.10589262994847837, 0.1045949659414902, 0.0988460789650597, 0.10868195297403327, 0.13050034208909544, 0.15292966345497538, 0.13000945070597558, 0.10352327314208198, 0.911567181549506, 0.9270251621155755, 0.9363911519046125, 0.8930489560346209, 0.8687058820049102, 0.8428919577163471, 0.9094417321388354, 0.8985598005336795, 0.9225971310068303, 0.5141765994589786, 0.6009138417920912, 0.49049191435877415, 0.5486453800645084, 0.4796991735432641, 0.6211488411762733, 0.5640840958470885, 0.4706335737002374, 0.5788742179699724, 0.7625471802835228, 0.7959656759643017, 0.7832181433211105, 0.3377726677906274, 0.3528900707523137, 0.20197316197939164, 0.2347032587104284, 0.7243169099198408, 0.678133410790619, 0.2296986295711706, 0.13387611897223195, 0.11050105032405788, 0.180491988039177, 0.21943330033575215, 0.14887445025776647, 0.21704995546878303, 0.25313316885776505, 0.2089005846972043, 0.19695380107868377, 0.12148746061118565, 0.21333291941657084, 0.24265553947147223, 0.2064098131935136, 0.30100679963322596, 0.1785949238727379, 0.23287491503921165, 0.19853570003961318, 0.06012470758725463, 0.0979394612019725, 0.006238755232655047, 0.05571123211193352, 9.999999999998899e-05, 0.08449639705413703, 0.11089676682122318, 0.007213975234810266, 0.08801428023767, 0.1274056498051208, 0.08703559156746976, 0.1431219725829005, 0.09091134790472011, 0.15057116445405794, 0.10743686364697846, 0.10386207494739153, 0.17588360160434946, 0.10444312512040377, 0.11075046600922811, 0.05957467786389825, 0.2308774395005908, 0.09047096579298453, 0.17136276774460946, 0.07941773839060229, 0.1018010389945534, 0.05867948166088044, 0.14884082360352857, 0.14302750719874313, 0.10292405192911025, 0.17568491940734932, 0.14807127460933156, 0.19760091473279018, 0.09203901393310021, 0.14233133519126928, 0.11127069504268328, 0.07638907196895439, 0.5171306704549294, 0.5005058156162082, 0.4755256444803351, 0.5051040288970199, 0.4767239169794756, 0.49659148631533667, 0.5813742446605532, 0.5398508563935744, 0.5282074759240254, 0.10368439725423761, 0.09702886221178708, 0.10192183720619763, 0.11877637896916371, 0.08953213181030228, 0.11144925171898179, 0.1470731644515847, 0.11724655308162857, 0.1303672656262277, 0.18253069319779924, 0.15360206208211435, 0.17676639608907985, 0.22571990563641486, 0.22809030312509126, 0.19272604288097717, 0.21130921911770928, 0.22199254252300993, 0.22869067972392554, 0.3314316932154314, 0.2809064729316456, 0.3370413844899093, 0.3078260319118734, 0.3418646581503104, 0.38908499098896354, 0.234081156908447, 0.3032460665715221, 0.39602768839809865, 0.2073499350368827, 0.2817889923115302, 0.2572815213006383, 0.292706793996075, 0.248555724867202, 0.20151645322700606, 0.17968606305181944, 0.2591210177988307, 0.21906449677163942, 0.23787875172566952, 0.22602092363828774, 0.22305762473865487, 0.2292908014459003, 0.2022759865811874, 0.21337334736029256, 0.21153180585813391, 0.23665563329677275, 0.2205973787467358, 0.20815503768074195, 0.4008126352493615, 0.19018197092392353, 0.26833582050083726, 0.19460819968895915, 0.1833643245440778, 0.20718439381875553, 0.19893098022166322, 0.23533640103665998, 0.1824141825431631, 0.17756695068817696, 0.761870084308502, 0.7333293658888699, 0.6853120552742131, 0.823692918145283, 0.7369659991043624, 0.5800437882258911, 0.14827604603015954, 0.5426513551966698, 0.49919969273791986, 0.3976437724757852, 0.5714996403406956, 0.46066451882088166, 0.4706591065009831, 0.6240909488571746, 0.5723582835117972, 0.5656371222320997, 0.17493044187690399, 0.20322343157147793, 0.19408417696603808, 0.18749831595557676, 0.21478729695686805, 0.22652838919695328, 0.1930716262623524, 0.20432884015805886, 0.18443122232777243, 0.09278359223153532, 0.12189326114872479, 0.0956482474867173, 0.08107265606318848, 0.07869743570096066, 0.08952425094599092, 0.10832537684924248, 0.0993738478249323, 0.09262386427887925]}, "mutation_prompt": null}
{"id": "d5f2d0de-eba4-4dbd-8f72-c86fe4de74c6", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                # Modified line for adaptive inertia weight\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.97\n                # Non-linear decay for coefficients\n                cognitive_coeff = cognitive_coeff_base * (1 - (self.evaluations / self.budget)**2) * decay_factor\n                social_coeff = social_coeff_base * ((self.evaluations / self.budget)**2) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce non-linear decay in coefficients for enhanced convergence.", "configspace": "", "generation": 17, "fitness": 0.2235335843789669, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.18.", "error": "", "parent_id": "095e512c-a315-4cdd-9b48-da391dc66f86", "metadata": {"aucs": [0.7269061625909112, 0.731469244774145, 0.7284937034093312, 0.6990671654114382, 0.7104766392680217, 0.7010790728381429, 0.687170509739284, 0.7082504622341763, 0.7248248286877036, 0.340240346258325, 0.096734114403218, 0.1124881605993503, 0.08049372295701829, 0.12012870882514493, 0.07358490702281395, 0.10727759867529707, 0.4961304617862591, 0.03760007963798362, 0.08837691065040254, 0.08539051833355915, 0.08545856617777481, 0.1236935889019487, 0.08897148641577346, 0.09118798753682622, 0.0966708592668779, 0.08217241083584104, 0.08782121256775444, 0.060037712921521935, 0.06966892122445556, 0.08424343130336331, 0.09702698001566368, 0.12191821242486656, 0.071671174452684, 0.09906862924075199, 0.11948696900486833, 0.10025264833863712, 0.6787622456668857, 0.5404052400276032, 0.8044835143504795, 0.22526051074252174, 0.16395710438520272, 0.25093731948201115, 0.5630618663394987, 0.15940255054561459, 0.8252870044450197, 0.43770853665512144, 0.4832997688020254, 0.26990243932710234, 0.33712877776093375, 0.14644547957995235, 0.28010825102045644, 0.1325571081364989, 0.23153162419402684, 0.30968597150635224, 0.5979363662591444, 0.48383388958329465, 0.19858715991502485, 0.3072310628040741, 0.321103635876664, 0.5949128441600429, 0.19522298621476208, 0.18778010827298308, 0.3435843209785847, 0.16555268599699102, 0.10262748234129271, 0.14067031419419473, 0.20229862639564278, 0.12154036682769853, 0.08079371188097006, 0.1574783166491971, 0.20868546011308176, 0.1201759617557695, 0.125143961167427, 0.1030306505598253, 0.1600449335075126, 0.11299956990865034, 0.15316145067178621, 0.10396934054464524, 0.13979365194925142, 0.11089416924533013, 0.1319899616277389, 0.03079605799297369, 0.0030724921895735058, 0.061830628513398156, 0.052503149472929, 0.06081250437920116, 9.999999999998899e-05, 0.05505365686527963, 0.038416975927022534, 0.0026369577628736485, 0.13831035968215144, 0.09908477877658262, 0.1503379627563981, 0.11332245680827202, 0.12377194559280036, 0.0983890213523837, 0.15291881581257127, 0.11216534774015385, 0.13297885970782775, 0.12770144164555264, 0.04490111996839019, 0.11961156916224447, 0.07810095181717713, 0.16172650892411589, 0.1523440848200065, 0.07259158426774082, 0.16358624518461562, 0.08751733689585439, 0.08444087458744565, 0.10155041190831038, 0.10149566401561239, 0.18966127949142542, 0.09680926203181406, 0.07139626579420166, 0.07493609635329301, 0.068347358732893, 0.06865941829894306, 0.46872892707066116, 0.4771785707838696, 0.5652330881951573, 0.46462208933958016, 0.44633572630463336, 0.5019221201181443, 0.5290016184843225, 0.4955567089379117, 0.5021119368229283, 0.09353642984658561, 0.058983444311470845, 0.06897543068926593, 0.06722755395266433, 0.11254931247283817, 0.0825723558987409, 0.10259558880465924, 0.08825953096444794, 0.09297511178301121, 0.1893854740820642, 0.19101456409436823, 0.25258678705175985, 0.17970354772794817, 0.15077227422315087, 0.16910519100564525, 0.16588529587768386, 0.15721348786965572, 0.20637315995087968, 0.19230725169467944, 0.20734786889733448, 0.24863968987630547, 0.23028407630590542, 0.2536622849347666, 0.22523952962261118, 0.22012210033403212, 0.3578187372874907, 0.22685263263202815, 0.1537023798112359, 0.1698218998895632, 0.14641692861866107, 0.1915612413483957, 0.16211640603271316, 0.208666681561256, 0.16475062778811622, 0.17773837982155405, 0.17862966168472738, 0.1887940581233707, 0.20814614757310435, 0.19253158431431672, 0.22559580485675557, 0.1950887066373389, 0.21988164049311332, 0.20413222148183707, 0.19821643817382162, 0.19834224779366882, 0.18711835932020204, 0.17197528078433533, 0.17812527449364446, 0.18626210253979048, 0.18771759174448688, 0.1568549240737631, 0.18917423638046615, 0.1881308012250552, 0.16312658512320233, 0.1477711596402207, 0.17647356587779683, 0.17636030206972952, 0.5161754617589835, 0.19173651583768392, 0.5838033695340171, 0.49846060321857644, 0.45932878104992714, 0.5394239021526623, 0.45757530764674315, 0.39739725103637336, 0.18126829503444553, 0.34220738577592846, 0.44508476238394246, 0.36542162625987973, 0.2942190463753408, 0.4121231060634064, 0.2368602081504555, 0.19083711299534034, 0.2194050698709864, 0.19058715370225088, 0.20570142067548558, 0.1914368129998002, 0.19152020144329784, 0.1966165846709781, 0.18257103185147594, 0.1855573468084568, 0.07398709576227591, 0.0778025172617981, 0.06932003731290914, 0.09411730352336911, 0.08991809122573446, 0.07596990552928362, 0.1012175584816759, 0.0781694189897546, 0.0731493466151183]}, "mutation_prompt": null}
{"id": "7708e99d-7137-4bb6-8bd0-f374dbc06e99", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.97\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Update population size dynamically\n            population_size = int(min(50, self.budget // 10) * (1 + 0.1 * (self.evaluations / self.budget)))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce a dynamic population size that adapts with the budget utilization for enhanced exploration and exploitation balance.", "configspace": "", "generation": 18, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 50 is out of bounds for axis 0 with size 50').", "error": "IndexError('index 50 is out of bounds for axis 0 with size 50')", "parent_id": "095e512c-a315-4cdd-9b48-da391dc66f86", "metadata": {}, "mutation_prompt": null}
{"id": "116bc4b7-ebfe-4c42-8384-224f4d0cb8c4", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            # Change 1: Introduce dynamic population size adjustment\n            population_size = int(min(50, np.ceil(self.budget / (self.evaluations + 1))))\n\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.97  # Introduced a decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                # Change 2: Alter cognitive coefficient calculation\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n                \n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce a dynamic population size that adapts based on the remaining budget to enhance exploration and exploitation balance.", "configspace": "", "generation": 19, "fitness": 0.24173128165640356, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "095e512c-a315-4cdd-9b48-da391dc66f86", "metadata": {"aucs": [0.8831742410542563, 0.8940905418248225, 0.8881582021187961, 0.897412149313259, 0.7783807284447954, 0.8950090052667231, 0.8127576766011335, 0.7540316201337145, 0.8962109168901732, 0.2996062751082682, 0.06569031126275915, 0.17051199639675485, 0.3217329422208526, 0.19002634659010886, 0.01778583594516514, 0.09957776104820149, 0.13910334524280243, 0.048938750954431676, 0.11342293533231984, 0.16325016741454257, 0.13713254760875604, 0.14708937086024343, 0.12296713214918875, 0.14883995715390197, 0.14671626442500552, 0.16640575784533662, 0.1333629887301575, 0.10128017821900759, 0.05601199619658259, 0.10791050286519877, 0.08505976858079378, 0.11951985293431333, 0.14589001924534095, 0.1311421054669869, 0.14746631522322529, 0.11338456114810125, 0.9381461326527553, 0.9485050371436494, 0.9550317210107259, 0.9247234429316104, 0.13574280747448408, 0.9158521431851447, 0.9370555045948836, 0.9297263505860459, 0.946758350007304, 0.39037878198147624, 0.21419941417238897, 0.32111250467549435, 0.33558407049546646, 0.1640027098561101, 0.27774806155094955, 0.2601457087093014, 0.38828571664281, 0.25932885058747845, 0.31432211024131107, 0.3830321094224032, 0.1769073698539403, 0.3221056647919658, 0.18631248545566403, 0.19449842509664483, 0.1638746174112352, 0.14991182694678262, 0.1759884488295218, 0.12790380552670744, 0.12998920048553186, 0.17683823580868685, 0.15773897241764512, 0.1295485653215115, 9.999999999998899e-05, 0.14443477973918706, 0.14438600314100403, 0.1574483285172109, 0.19131806797876294, 0.13360766976384653, 0.19530835971130978, 0.12554468563427068, 0.4510015860892983, 0.14397810196206828, 0.14014727809839422, 0.12481165468558741, 0.16410275560817078, 9.999999999998899e-05, 0.106438768398609, 0.11106619363203285, 0.016625097588263804, 0.000970968296894692, 0.05366907876182525, 9.999999999998899e-05, 0.005520108414009184, 9.999999999998899e-05, 0.08925718744873534, 0.0774941101676695, 0.14956051939862713, 0.045090856677348135, 0.0212387611155882, 0.046525449471494174, 0.11858394354742263, 0.12174587855209906, 0.10351454821303219, 0.13674046453117095, 0.09781714400928909, 0.1641550403362495, 0.09130715287494118, 0.21855076506963977, 0.1246870213321517, 0.10687838666534477, 0.2917862672389344, 0.21605327328930335, 0.08447229080141638, 0.091725185847079, 0.14671798548630355, 0.07009054007640858, 0.08775720980964341, 0.05747499725230665, 0.17857942052076048, 0.20848013251551567, 0.09714869562085737, 0.49063383674286887, 0.46866781305086447, 0.479120138839246, 0.6062623655878483, 0.5017692359128707, 0.4685056799255426, 0.4617230731402655, 0.47045994176377703, 0.5421020789825918, 0.07846723858145321, 0.09037252373885496, 0.08490980838095052, 0.11174208607715586, 0.09873662827826335, 0.08835763388132112, 0.101664650933188, 0.11284368660165378, 0.10188835005173091, 0.2918839200568333, 0.14013352131623213, 0.14021396893643856, 0.16575865701502934, 0.15171542756917056, 0.14985065490571192, 0.1434750135905387, 0.1556384471795531, 0.19167964190218822, 0.18381688055275436, 0.26025458541719326, 0.2065013473519347, 0.2124253854510043, 0.2870817043154521, 0.3471930814005304, 0.16793416191246924, 0.2431554076104816, 0.1878739696497025, 0.19376499246231016, 0.17814849728129178, 0.1344207107259282, 0.2778705415099182, 0.16565929583671624, 0.1806930715997339, 0.20094803974942688, 0.19055736041175608, 0.22502504107454646, 0.2069934752303716, 0.20630423754358962, 0.20684554200350758, 0.22841982472409117, 0.2231720031228892, 0.2501037995431842, 0.21453376861918427, 0.210067847993767, 0.22493310244892673, 0.20037707881213873, 0.2014587406245596, 0.21463186721261884, 0.1855859596189986, 0.18723527991703814, 0.18049949688131361, 0.1755853801988917, 0.19012859029837492, 0.18963541280141294, 0.39302223433744454, 0.21938546072638632, 0.2415100857041318, 0.3234186818904613, 0.16756273023944923, 0.7568238769043218, 0.645992709866922, 0.16093330679723117, 0.16870231060632834, 0.2487855618032525, 0.2783604782615694, 0.2659170988075439, 0.18735505687034404, 0.4166913900760102, 0.16551903006624957, 0.171813769596881, 0.16909155400789044, 0.225093727783797, 0.17963777903583344, 0.20338999463424556, 0.20376243411372275, 0.2022242642311709, 0.19494557836580217, 0.19276648995636403, 0.18325269850362647, 0.19808996653985456, 0.18348677124265655, 0.09110011491140524, 0.10462156709021397, 0.07357169935933527, 0.1104826712732554, 0.09492820734741292, 0.08435038538365969, 0.10149001090880738, 0.08460500948313587, 0.06829769863256518]}, "mutation_prompt": null}
{"id": "dd20383f-bb54-49f7-9730-99aacae8d76d", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                # Modified line for adaptive inertia weight\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.97 + 0.01 * (self.evaluations / self.budget)  # Adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce adaptive decay factor based on evaluations ratio for dynamic balance.", "configspace": "", "generation": 20, "fitness": 0.3194659928940912, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "095e512c-a315-4cdd-9b48-da391dc66f86", "metadata": {"aucs": [0.7534516312621488, 0.7662387556965051, 0.7900215512836071, 0.7520025273207782, 0.7705481084771196, 0.7941193778677973, 0.7664721483040895, 0.7655189311662309, 0.7629839135154749, 0.435917425133743, 0.5034488980461562, 0.4570285832045451, 0.4482295714517741, 0.45716003798087035, 0.47375835251733256, 0.467375542234698, 0.4727749829388256, 0.36148769864645935, 0.12677197782356964, 0.12481429225896334, 0.15764285765918995, 0.1639965719561851, 0.3570825540504209, 0.14872689309665166, 0.1261622228193079, 0.1323339672417796, 0.10243398078061039, 0.09988844684357867, 0.10110404308010335, 0.0955996257998859, 0.0904634523906338, 0.13924009003527704, 0.14231153429752452, 0.10532824146831787, 0.14439613173520593, 0.08416865992485878, 0.9093727024092965, 0.9270222189617691, 0.9364090625338248, 0.8930524248528336, 0.8687244337919973, 0.8430066332572543, 0.9094393341160517, 0.8985812433514455, 0.9226226280771429, 0.6055665944780881, 0.6226001122234479, 0.5514116042802639, 0.5455218071273742, 0.32560346679811913, 0.5612040070879363, 0.5865657379322525, 0.5960922813541903, 0.5773162246162009, 0.7696489190708917, 0.7841946164752857, 0.3709127056892242, 0.2698081934022022, 0.35422858030098026, 0.20164412210711746, 0.608089583895985, 0.2950681679187025, 0.7052052179436705, 0.24098764627177316, 0.13883040598007412, 0.13233231798751988, 0.16587472953452487, 0.21717186505180497, 0.16067140884971742, 0.2209400915079056, 0.2367961733447087, 0.18510707176644048, 0.20224800027735224, 0.12191673147141102, 0.21555051036895279, 0.27906076278324, 0.21641768958955043, 0.28720591164108633, 0.21780881003418984, 0.2348374669007951, 0.18733830891467873, 0.05856964935438591, 0.07714953374723132, 0.029852581924575294, 0.06755114137797447, 0.0007493055027579798, 0.08838109500229163, 0.11282362763091025, 0.008642261431502818, 0.0629462881694337, 0.15592600662306577, 0.1021203074848891, 0.16524128500326574, 0.07338851304079685, 0.10934609081093438, 0.14031751262850545, 0.10735740361639168, 0.12158358901898703, 0.15314693375293376, 0.0949421060635659, 0.05745617282586968, 0.21074077492288423, 0.08178633272721614, 0.16558393314386344, 0.08312993985744599, 0.10136098348344835, 0.058503239847665145, 0.17804395713671495, 0.12749788671225792, 0.10668011547734879, 0.16739457563760485, 0.17849780687388372, 0.1930774147654275, 0.05640626718456809, 0.14442384810631825, 0.0904569302243835, 0.07605791098065728, 0.553839779431893, 0.49336418274146, 0.5479883200857847, 0.5307518947672683, 0.5376701976126099, 0.5006135037552488, 0.5404160462293061, 0.5416999955028201, 0.5030456865322785, 0.10271396264804733, 0.10507177045923, 0.09113542589875634, 0.11698973185730088, 0.12703076563968496, 0.12727125838039388, 0.1351814207453923, 0.11750644247531694, 0.12847006071783185, 0.19646060910666707, 0.19236334468726402, 0.27103025343592446, 0.21936243067415662, 0.24558445365524362, 0.2442199475939234, 0.23193829107386654, 0.18388275551041255, 0.2585179097711108, 0.21971822740604086, 0.43547881230177277, 0.42856985570894335, 0.43069979312509554, 0.3040098781482765, 0.4936923995020047, 0.3755831048556796, 0.33147715011946466, 0.24512241273484248, 0.21129117510805706, 0.2829571564106328, 0.2152621051465322, 0.22389588278951322, 0.22924646522458547, 0.2959320828620937, 0.23376400903505867, 0.3973010054357702, 0.23510575737187966, 0.2525699390056214, 0.2490212726971206, 0.2309077311959019, 0.22917405958518022, 0.21662670106012616, 0.21641082522166, 0.23601109920796648, 0.26098623545124033, 0.220102763653508, 0.185295194702646, 0.21434228383561726, 0.216605878962146, 0.23296598477663777, 0.1828994975847985, 0.19076949028927725, 0.19396206224002777, 0.5019763111303479, 0.20271354593357527, 0.7771988098433442, 0.17747235580918952, 0.768193345400909, 0.7225321875255082, 0.6725947151576923, 0.8053599072747545, 0.7664784311715176, 0.6069188183420147, 0.14810917976030813, 0.6659315452599857, 0.5943321944309401, 0.5577223184913064, 0.16019139662070325, 0.5147112467293611, 0.5595316697106985, 0.6441394101357368, 0.5375838707659202, 0.6718364506757933, 0.1866626573028093, 0.1834131950505994, 0.19032353222027765, 0.1944864054417551, 0.1944451604549423, 0.19149059512753674, 0.19462729960542058, 0.19070064411015342, 0.18854726010295508, 0.07226560657364467, 0.15017903552937428, 0.08549801428708415, 0.0957622369805029, 0.08943671266976927, 0.09646735253817607, 0.12190117306681603, 0.128378112218832, 0.0845175991970929]}, "mutation_prompt": null}
{"id": "c1a57ff8-b9e8-481f-8734-2394350e5df8", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                # Modified line for nonlinear inertia weight decay\n                inertia_weight = 0.9 * (1 - (self.evaluations / self.budget)**2)\n\n                decay_factor = 0.97 + 0.01 * (self.evaluations / self.budget)  # Adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce nonlinear inertia weight decay to enhance exploration-exploitation balance.", "configspace": "", "generation": 21, "fitness": 0.2992061714800476, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.23.", "error": "", "parent_id": "dd20383f-bb54-49f7-9730-99aacae8d76d", "metadata": {"aucs": [0.7325790069582423, 0.7194832445666108, 0.7471558088175314, 0.7472268039585249, 0.7488855465023141, 0.7171634494942125, 0.7510687151820591, 0.6573270113811787, 0.7392360503844759, 0.16273054219246774, 0.32898259710434385, 0.42352595467253684, 0.364649736780408, 0.27807820707226405, 0.4507860527603722, 0.4519504189298805, 0.42497662114488166, 0.19754481891206466, 0.14211929628225262, 0.13457742313627385, 0.14312602395560603, 0.11207145941385155, 0.12380226007600359, 0.13493365979896443, 0.13121600147803114, 0.15104056933350218, 0.11715069656448618, 0.10968365602925279, 0.09949588403982057, 0.12253443685932452, 0.1268397330854366, 0.14149380766203323, 0.12303415619116109, 0.12117056831009687, 0.1602423445956298, 0.11031868624242802, 0.9160792613499381, 0.9312115789216913, 0.9403040436316994, 0.9013631683509377, 0.879088661652758, 0.8702767937662504, 0.914099648789104, 0.9032796682038817, 0.9261147019893087, 0.4606187204140949, 0.5164443706096935, 0.4739389340449611, 0.5085974669352744, 0.5263661498916208, 0.5079413024838328, 0.4971297756357569, 0.4339076867760999, 0.49981704181909425, 0.7135114973468846, 0.3654358323446556, 0.3601796969396083, 0.8050724896775855, 0.35138065271361196, 0.2569508479648751, 0.22275163424467992, 0.7123706854371626, 0.367189234534263, 0.21731930356988094, 0.1358373850199086, 0.11416406908834464, 0.134139460035967, 0.21915101805018355, 0.10573857840401324, 0.19260247212382542, 0.25176483391153714, 0.19726839091320647, 0.19503949727595515, 0.11847553070047456, 0.18696904331793796, 0.2072599508367471, 0.19157704915372364, 0.23910732804256718, 0.23331797519764363, 0.21260120694366624, 0.3397800114642068, 0.04306760245537844, 0.0873340772940614, 9.999999999998899e-05, 0.14318692069147387, 0.028567035360012594, 0.0560623611081823, 0.027672968915507967, 0.01911902121877651, 0.09383695769184774, 0.13036978853858783, 0.10242340793369242, 0.15070810629519038, 0.05770653545305848, 0.09462173163112331, 0.06605286019706214, 0.12066967992935573, 0.16510338762782317, 0.1529795319865952, 0.14228821953987025, 0.048885073445879224, 0.09837569694114412, 0.06363202605726981, 0.18273259648471107, 0.05888679231480598, 0.10035777215701147, 0.05681303319899145, 0.22238447087510305, 0.2240337934287221, 0.10587261246157798, 0.1440728866408364, 0.059490952030700095, 0.12960836765168404, 0.07366964227348416, 0.0566481808553686, 0.07308922775540505, 0.07588825182030157, 0.5270690307016457, 0.502393309500511, 0.46872299785333416, 0.531358998521698, 0.5381873085920632, 0.49550513873823787, 0.5426236365603436, 0.48953048294469403, 0.4883260708587662, 0.09347477639773538, 0.0947727337047174, 0.12005652121192123, 0.14086470300289533, 0.07566683406027641, 0.11323383018563038, 0.12888936915102112, 0.1264813169004192, 0.10214350984636367, 0.15726121414353944, 0.18975064803067965, 0.2215093558075112, 0.16440583499050987, 0.19298637334879687, 0.18128590892777585, 0.27497171804244325, 0.15834616322519557, 0.2263302587011341, 0.2486827229788907, 0.3908599484805939, 0.3672043037648812, 0.4194253213813899, 0.3752799083706988, 0.3044270156311568, 0.341720398734753, 0.40681649630394656, 0.3851438272790695, 0.22451342158085208, 0.22057444783511204, 0.2675002265445856, 0.25999322362414345, 0.22676156865333008, 0.22118108041054974, 0.2672270972557681, 0.31528397980873024, 0.23527685548153487, 0.2239882470751039, 0.21041519312613988, 0.2011002748009294, 0.2458895859069884, 0.21006024782333999, 0.2170287734757742, 0.25087539724174446, 0.21322872399939752, 0.2106345612510221, 0.20223267168670722, 0.23142973150274815, 0.4792049485565192, 0.19775032435833206, 0.18953116155067007, 0.22588235972617254, 0.19689316291117143, 0.20788162840878166, 0.2064509344393799, 0.7313812800372584, 0.17686441156837118, 0.7611343382843003, 0.7212148258769041, 0.6576706929951192, 0.799902852416694, 0.7182686805673248, 0.5749654241297781, 0.14874668903707877, 0.6158983688302502, 0.19850011113266797, 0.3711720076569175, 0.358630299360701, 0.560896302532988, 0.43762362452393644, 0.47025675602576844, 0.5707429269383406, 0.4585782769848856, 0.21649854150217296, 0.18649999905938397, 0.21198332714137136, 0.19880217267240463, 0.18677714804458923, 0.20845666446682087, 0.19721577574775107, 0.19901334114162306, 0.21272105234686056, 0.0886195236967594, 0.09443613148111885, 0.08469010457975878, 0.09336007462127038, 0.0788680376998665, 0.09698216511639168, 0.15818084855554937, 0.08843077779530506, 0.09200419856299902]}, "mutation_prompt": null}
{"id": "bdf139da-cf21-4221-be39-28d12c862e5d", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.97 + 0.01 * (self.evaluations / self.budget)\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < 0.01:  # Random restart strategy for diversity\n                    swarm[i] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Enhance solution quality by introducing diversity through random re-initialization of some particles.", "configspace": "", "generation": 22, "fitness": 0.2803612684229724, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.23.", "error": "", "parent_id": "dd20383f-bb54-49f7-9730-99aacae8d76d", "metadata": {"aucs": [0.5479956671773207, 0.7704957148933262, 0.6195715232125312, 0.7413430557370493, 0.6384475743718377, 0.7247168118469003, 0.7676543985461096, 0.7154392527179924, 0.7068383859248546, 0.3110316294781914, 0.29153386215648736, 0.3889887186174562, 0.13883618288869526, 0.14080905001519728, 0.23902111053870267, 0.23272858300986388, 0.16679422569787727, 0.07983063861729911, 0.11696356710326128, 0.14253330008266152, 0.12515180431098416, 0.15077294962832544, 0.35809375372487917, 0.1454188354122884, 0.11227987584502475, 0.15705613695723242, 0.11346483789957851, 0.1054590759204117, 0.09057755120846889, 0.11459324604759424, 0.09222526846087353, 0.0889888365188235, 0.10133753362886566, 0.10166472130700765, 0.12372692566614585, 0.12716628604265934, 0.9103307628278589, 0.9361548200063765, 0.9310861182461501, 0.9085196638188339, 0.8979260984376691, 0.8931813675205256, 0.9103536098069511, 0.9079877008333787, 0.9413901204566592, 0.5726187569609551, 0.3302874653126968, 0.44828763949612127, 0.49399236444670513, 0.4811464935047437, 0.34956087863050844, 0.5255380199525874, 0.5029530994024417, 0.44603287147041637, 0.7896651854577021, 0.5576507351376124, 0.6404636942159919, 0.2712914194576246, 0.29989079456379986, 0.30864406741813766, 0.22418130224537725, 0.21603033705820185, 0.5666379781482493, 0.1728084625202695, 0.21583388629239797, 0.15130477130170106, 0.1750684371918929, 0.17609445160338222, 0.11790679930310599, 0.14247916349232037, 0.15913228010083114, 0.1658596999674915, 0.1970466794479777, 0.1896847076318493, 0.1507986233545212, 0.22646080831928184, 0.19115013802883907, 0.19773980161283133, 0.21268922597586815, 0.28414429660821716, 0.1215660430555423, 0.01224497242516187, 0.06811567989327505, 0.028825970951295354, 0.006998549596728854, 0.023808479841002206, 0.05145521518492502, 0.04563494666007095, 0.015167546105128715, 0.0258147343692382, 0.15943955204393712, 0.07235557345233279, 0.13631097210026033, 0.08261440507694806, 0.09575577219649478, 0.08213617057368539, 0.1416603269611152, 0.11227028530725924, 0.0900425844713102, 0.06519219675034471, 0.046763532284485154, 0.17201295671997574, 0.07833877267967182, 0.08306448160014279, 0.061532199624851125, 0.08933915211826593, 0.11094621809112071, 0.09311195152649376, 0.25112067602765775, 0.08937786852446827, 0.1487741964762478, 0.1891613707283064, 0.04397300523255765, 0.07791018374436132, 0.19644899846085428, 0.08434399058585784, 0.07142362035918959, 0.5091247405882007, 0.4909122137480687, 0.5275792466974665, 0.4799716990394579, 0.4639758330837719, 0.5065258343288064, 0.5474060607447917, 0.507044656655957, 0.5115041279151822, 0.15081507988744047, 0.10704707558965987, 0.13560494835097048, 0.12828947285899772, 0.12178745878248687, 0.10474319875749227, 0.08987812167829601, 0.11923947035639848, 0.09690101012984409, 0.22117000186752556, 0.2212231359788378, 0.18686285660245217, 0.17737565452635085, 0.2017794085902448, 0.1426710153496309, 0.16135871792697343, 0.1449570733637061, 0.1952692979840971, 0.3085914733313906, 0.36357902605229764, 0.35321696061675223, 0.3288772361507104, 0.4138050737462061, 0.4331659112180182, 0.3832414821856218, 0.3662581100821495, 0.27545159610747405, 0.2116420005114782, 0.20603764726270846, 0.26719000243798596, 0.17632516358669836, 0.22518491987689326, 0.305211303827329, 0.21669643271447037, 0.19404814563391815, 0.18605893657006523, 0.2145391284828554, 0.20266047854747504, 0.21093221230404968, 0.2026707689563807, 0.20720133930472584, 0.21781506393993255, 0.2524568491560413, 0.23812015314352353, 0.20446357655520842, 0.18417074867927485, 0.19895894892791455, 0.18194271908013993, 0.22338942382397442, 0.19372332261988123, 0.19955270388133217, 0.17636369279524133, 0.19259587460173921, 0.2003902122538027, 0.1768201877974287, 0.1660820408766589, 0.6657188083338332, 0.7820772470681403, 0.6963464336909533, 0.567823146523524, 0.5452647735428011, 0.44132718299803697, 0.14980746248538157, 0.5412132916892942, 0.7206481156610787, 0.39185903505778674, 0.4894639190408271, 0.29654268282012153, 0.5274347868821768, 0.4934912991235343, 0.41573264389079334, 0.4145583674922465, 0.1976274823984604, 0.19467107493420865, 0.1817250181808282, 0.1880474418745549, 0.1986731027422597, 0.21654010645155186, 0.21216286833299092, 0.2008579067611399, 0.1860283349608699, 0.08165586007587045, 0.09882941886943775, 0.09657510103573841, 0.0984401388655266, 0.12512906027212534, 0.1006890791623124, 0.07775772470243447, 0.07383956089785026, 0.07641758292009382]}, "mutation_prompt": null}
{"id": "9c4aae20-2d4d-4cd2-9e81-05e33c0d1f57", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.97 + 0.01 * (self.evaluations / self.budget)\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                dynamic_learning_factor = 0.5 + 0.5 * np.sin(np.pi * self.evaluations / self.budget)  # New line for dynamic learning factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * dynamic_learning_factor * (personal_best_positions[i] - swarm[i]) +  # Modified line\n                                 social_coeff * r2 * dynamic_learning_factor * (global_best_position - swarm[i]))  # Modified line\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce a dynamic learning factor to enhance exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": 0.2971161538420812, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.23.", "error": "", "parent_id": "dd20383f-bb54-49f7-9730-99aacae8d76d", "metadata": {"aucs": [0.7878780160175503, 0.7556029940506939, 0.7790791472985482, 0.7711544023188517, 0.7623992834189168, 0.7663932969000801, 0.7500508738325506, 0.7526423679711507, 0.7390693684922326, 0.5106573200296168, 0.4315856144904864, 0.4670269219522476, 0.438506942964477, 0.4955081449114557, 0.48132008887483446, 0.4484570175142335, 0.4588861146897887, 0.4156355185485706, 0.1588640306130119, 0.13553128470553422, 0.13596719456374462, 0.10194011965457617, 0.1425412221327691, 0.09240310456492662, 0.10138178208650483, 0.1386811483337862, 0.10468093848423887, 0.11756597946863645, 0.09337652928534257, 0.10038207881365435, 0.09961498054756268, 0.11640712333383074, 0.1394441807915604, 0.1284528960661162, 0.1387460683591888, 0.10030912960873595, 0.8845355339666343, 0.8997467214431026, 0.9188872904315185, 0.8519492213235689, 0.8046451463282516, 0.8170353760519027, 0.8815833228217081, 0.8428072433060916, 0.9113934843880664, 0.6101714243617709, 0.5015110220416046, 0.5906127554175664, 0.6080302539961113, 0.44713186502766356, 0.5650332742588925, 0.588842548574399, 0.5810011063827576, 0.5482339846463767, 0.22053921722812497, 0.22289874928809927, 0.2261562286046086, 0.3630271404031242, 0.35246311786529905, 0.26090034109796867, 0.17191257855203546, 0.16681149846200694, 0.21352184020904363, 0.23266049678134382, 0.2421979162172222, 0.1712126690047595, 0.1814415613099455, 0.27151992013963877, 0.11412481257130969, 0.23225982869767625, 0.2880174633396373, 0.16196639578335104, 0.21543450180216195, 0.11689481913192012, 0.17323943117555318, 0.2902648846940027, 0.17333426172963629, 0.2094664052919064, 0.15212778800456106, 0.22215846110462167, 0.2187399816442014, 0.022900151118675938, 0.03452736671220902, 0.009761950536589237, 0.04903262786423623, 0.012689560820341672, 0.021733666200892565, 0.11400878963954542, 0.006327961191284648, 0.011641746834223365, 0.15078515748284282, 0.1504179016160715, 0.17426526120893782, 0.09670702057253588, 0.11859939260743035, 0.07898018627201231, 0.19201672730541064, 0.14539268887821677, 0.15697820053653244, 0.1272113536374736, 0.07149594801134385, 0.09466149321436901, 0.1020228709276747, 0.2541594034324359, 0.13743890036920114, 0.24267202736697502, 0.1841070192518225, 0.12733136554036595, 0.1281691877232224, 0.11604173417238473, 0.1401112921436437, 0.03918048959661191, 0.10601302563872361, 0.09803766351915943, 0.2070882327205653, 0.08054659816773746, 0.07500312424798228, 0.5744399244055391, 0.5201364740142074, 0.512066945297244, 0.5477815077732302, 0.5423013023482433, 0.55429908528482, 0.6066345060417043, 0.5808905592615282, 0.5568173033063994, 0.1367097324760581, 0.07504163560930188, 0.06282088463691649, 0.1261472419569276, 0.0970756287476926, 0.11961167015229335, 0.12374161234496117, 0.12295399185640221, 0.1358565768109754, 0.19674367551329786, 0.2239292151857022, 0.16893897464723706, 0.2527647154416005, 0.2066358580553589, 0.21399038886912936, 0.1830913460303637, 0.23042942552003365, 0.2512370412894479, 0.2066307253066696, 0.4258262671404711, 0.3156703400318972, 0.2609609679678285, 0.42185556531858714, 0.3633161791179881, 0.3381520867222674, 0.33295072522154245, 0.23659775731611377, 0.1501135024360163, 0.2019817767987938, 0.1972841213275015, 0.23221110780727372, 0.2600616664535914, 0.25701419444529694, 0.17427602954638532, 0.1983795946871557, 0.19824194013209406, 0.21334274247948326, 0.23754487156257187, 0.20242141034659877, 0.2187160825567176, 0.2395399974720347, 0.20729489554788993, 0.22681147010721314, 0.20939945767229295, 0.2302232210752383, 0.19740971458494783, 0.23096066736266407, 0.20591721410054897, 0.2229631611589702, 0.2224370730103452, 0.1859969399663437, 0.18476486809962767, 0.1665883533150998, 0.2096661170361852, 0.7327786197650898, 0.16700124898572888, 0.1509776493984304, 0.7695043501594704, 0.19325992363124, 0.8028141538230557, 0.1596918378827269, 0.16313428394434282, 0.7104428839596446, 0.5853527985837963, 0.709142605242723, 0.792501935567524, 0.6175727956867182, 0.5096321868286915, 0.5969532894096745, 0.47018287314431617, 0.5609421797987952, 0.6236954574442171, 0.21587807088039634, 0.20160405736518794, 0.21767583164794801, 0.1792919049425944, 0.19327541030776108, 0.20679953906944482, 0.18478654733360145, 0.211515888871751, 0.1843331196883592, 0.10382383270911866, 0.0761147304669545, 0.07827100105109897, 0.08730816167925082, 0.09342816619391325, 0.0947351058564393, 0.08425009957585428, 0.09001631436958613, 0.097145148843786]}, "mutation_prompt": null}
{"id": "a88ffaf3-4230-4b7b-9e6c-83d5b6a8cc7c", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.97 + 0.01 * (self.evaluations / self.budget)\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (0.5 + 0.5 * self.evaluations / self.budget) * decay_factor  # Adjusted line\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Refine adaptive coefficients by introducing slight bias towards global exploration at early stages.", "configspace": "", "generation": 24, "fitness": 0.25355111247073653, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "dd20383f-bb54-49f7-9730-99aacae8d76d", "metadata": {"aucs": [0.6197340573261706, 0.580902828093924, 0.6006229035597174, 0.6617832821592406, 0.6406728158428808, 0.569013659037465, 0.6039866953159856, 0.6006333867488638, 0.6152253380482657, 0.15178549621030413, 0.2245426270500398, 0.3079232425667118, 0.21301557948296646, 0.18635965044240688, 0.22803432588773875, 0.21680435774032492, 0.3257827699098167, 0.25364388473766075, 0.13236139819732884, 0.12901092361399336, 0.09701758288296769, 0.12042951658609469, 0.09621764428695512, 0.08546715373165059, 0.12733050218734077, 0.11706450420362924, 0.1187342605308912, 0.10859175313657121, 0.10656527550061579, 0.12284666704451863, 0.09868200632263324, 0.0933431960282598, 0.07653138080681587, 0.1086151233926983, 0.1456676336871473, 0.12353573440598031, 0.976106449085963, 0.9675610931238996, 0.9812853034297143, 0.9759295132684503, 0.9713680374842383, 0.9716625570356232, 0.9812608191895054, 0.9676765599126411, 0.9762272735615829, 0.35808135132895647, 0.4149362348543697, 0.36717535394176426, 0.37984335025760907, 0.42556015135590985, 0.14544881738064452, 0.3468481897139092, 0.37719788174437907, 0.3466234404715147, 0.217152874966003, 0.2934149940414583, 0.1983418087511103, 0.18994627589936652, 0.1984799758001189, 0.19005091229995807, 0.2917848884181068, 0.5809937724590379, 0.2849895918445663, 0.19100042029452746, 0.11240395069451625, 0.15577252178059098, 0.120735937543062, 0.11167102356546188, 0.10262220579107106, 0.188123751695781, 0.16929092946517432, 0.16798779155632815, 0.12304695107126684, 0.14239456937691541, 0.10018221248967807, 0.21307316100205176, 0.1387010195364462, 0.18603556933419008, 0.14895771366177357, 0.07273669738161948, 0.1596989762984845, 0.01063825798598883, 0.028360683417582355, 0.03214344145957382, 0.020851604992201622, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005565275674956904, 0.039738512210440224, 9.999999999998899e-05, 0.050477730375475094, 0.11227957745136374, 0.15593422976994153, 0.05905008337545037, 0.03143603905586112, 0.0181106872004686, 0.07326647281635523, 0.053172729409283415, 0.05016443262123538, 0.093715963195656, 0.02208609425225072, 0.052462096542685854, 0.06999262280619656, 0.04266231263471287, 0.03480187133833401, 0.05028855961157608, 0.05080066376394898, 0.05989439691497411, 0.07724155201891714, 0.1413362041752303, 0.11847606110177944, 0.1353556974987591, 0.11040599838166576, 0.07386096927402652, 0.04063464565206709, 0.0905856472714599, 0.06655289694349542, 0.4429937489113851, 0.45254930206686406, 0.4920337748807788, 0.4187124065541975, 0.43708838904911984, 0.4526729183192729, 0.4695237484060384, 0.4473193396060031, 0.4709356936500164, 0.11846796336962528, 0.06262092875751002, 0.12551181063244876, 0.09393237404885568, 0.09950296513626833, 0.09532002444773169, 0.0943431465798591, 0.11976989636113744, 0.09752555212068725, 0.2254115109263265, 0.1650092974023033, 0.27916044964504627, 0.16791664999205236, 0.1602011337106506, 0.16620790692527188, 0.3657785948653858, 0.1694285749862573, 0.20900936232994927, 0.3677311248561357, 0.3353161101745231, 0.2930404497298488, 0.33878372023734304, 0.3154757347181608, 0.32154718483638567, 0.3118672004508727, 0.338320477924569, 0.2271241598161945, 0.1605413772703299, 0.2300686288903384, 0.2358222961662264, 0.16346982984627134, 0.22991375567306727, 0.22239001553204207, 0.18920372993638823, 0.3478981313700561, 0.24726489053550227, 0.2149964809436158, 0.17269854441444987, 0.2180929309519769, 0.19126739888266442, 0.1998123245137451, 0.1846862369248633, 0.200522776211857, 0.17966735386202726, 0.20561029059834757, 0.21113044460559893, 0.226318589711054, 0.20078861524928038, 0.19957536700936407, 0.19530191473000302, 0.25909169672942234, 0.19910671595292506, 0.1898662655246851, 0.2017183960352571, 0.6874319407502083, 0.16661443140481846, 0.6788235996415803, 0.6754878652462262, 0.19724994432989817, 0.6546104055412966, 0.6111562523187706, 0.6608771914090398, 0.5737243696977488, 0.5842994305646696, 0.2093613799587033, 0.19025737078882576, 0.4660194689287883, 0.36516519865020114, 0.14459161271097964, 0.40830421691844254, 0.20303912763779475, 0.6986898203784638, 0.19633439474746428, 0.17417527750554196, 0.1900960025787588, 0.19411289535999732, 0.21621103751915938, 0.18743516557310436, 0.1840201200971563, 0.1921204914326773, 0.19514256231163485, 0.09176160964595415, 0.07958067907035726, 0.0803054859793303, 0.09067482798076942, 0.09422956591201381, 0.09102127371986535, 0.08466609349076004, 0.07739856044617266, 0.09057470498310682]}, "mutation_prompt": null}
{"id": "ca05185e-3266-4048-9c6b-c331d566b64f", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                # Modified line for adaptive inertia weight\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.97 + 0.01 * (self.evaluations / self.budget)  # Adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor * 1.05  # Subtle increase\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce a subtle dynamic adjustment of cognitive and social coefficients to enhance convergence.", "configspace": "", "generation": 25, "fitness": 0.3062986896711101, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.24.", "error": "", "parent_id": "dd20383f-bb54-49f7-9730-99aacae8d76d", "metadata": {"aucs": [0.7743278622418306, 0.7795423081012121, 0.7591456613102097, 0.7675618610384224, 0.7770711652755404, 0.7760054115053481, 0.7582140543300768, 0.7719641113633472, 0.7552427781769155, 0.45107483328690434, 0.49349482602935457, 0.276476286144574, 0.4840791095240913, 0.38316523647267986, 0.4175135935887756, 0.4587430343424468, 0.4705339107437594, 0.4796623698496546, 0.12248816235118432, 0.13755196127893832, 0.1293327943853263, 0.13288433131051247, 0.13511641357283133, 0.1390232835544819, 0.12160001364131456, 0.11375728581844757, 0.1272681616407716, 0.10455673509764452, 0.10187497514901822, 0.1056801866755892, 0.11937168737082104, 0.10062000854740505, 0.12816700523807267, 0.10350253506877871, 0.14839459739759386, 0.10694521844156957, 0.9086086881224472, 0.9271222537677034, 0.9402045902427378, 0.8938134979596446, 0.8684677063221257, 0.8433046841389181, 0.9136571666899992, 0.8988321819278591, 0.9228954643490028, 0.4634888871018962, 0.5455956070805635, 0.5534606817583996, 0.5066775970525813, 0.5713392440617693, 0.5320299667841509, 0.5575486174130206, 0.5940664866544876, 0.5952775112241013, 0.3611365216980065, 0.6935907694344103, 0.7437424687422487, 0.2728119152780706, 0.2824835899819005, 0.19894138838040598, 0.22389699510564676, 0.35270630598941755, 0.3376828313491528, 0.24159301468489158, 0.14319415426402915, 0.1172771261460257, 0.17191728284733687, 0.24130979790445095, 0.10834326820371243, 0.22958300800275988, 0.2341116237327462, 0.22383865271551973, 0.1983235495650031, 0.20428986956923967, 0.2023638798762678, 0.25235868310917287, 0.22209552800649413, 0.27019280595933093, 0.21307179443701085, 0.2159019458653506, 0.22851527701842556, 0.01652602241941481, 0.13791032749656862, 0.018340663538361168, 0.056028958645775284, 0.0010221122232143554, 0.007097829179756987, 0.03957916797906458, 0.005487181172536881, 0.03701578845755027, 0.18885942749223716, 0.1386502760388394, 0.10923309338932974, 0.07806144258856418, 0.12123109567423251, 0.10566734051585225, 0.11362199437114617, 0.18618060363525102, 0.1268409297181179, 0.09364315559547653, 0.05522311727342544, 0.258634317825321, 0.06356939286163055, 0.14519100130094342, 0.06604508677938536, 0.10845081567366888, 0.0617885523144559, 0.201550344697893, 0.17690968262208484, 0.10817747831629443, 0.14865021231018638, 0.094030260876944, 0.15627269363745633, 0.0812174732768417, 0.2033097866022021, 0.074148166113158, 0.07847902219355163, 0.49132738281984156, 0.5062647282540862, 0.5303789010334405, 0.5288095466537461, 0.5200593713898578, 0.5254090224988479, 0.5427159431411461, 0.5128813474672256, 0.564734525083934, 0.08871433684058005, 0.1005704988202506, 0.10539866029392997, 0.11288160563986727, 0.1276579288433548, 0.09793914230226841, 0.11221896282210331, 0.1311411573574438, 0.15528219372618512, 0.24630373362985536, 0.26285650345465406, 0.16401189523496273, 0.1664857780325436, 0.24141980646704386, 0.17596037071496173, 0.208568592616875, 0.19940436341818146, 0.22838326593959268, 0.4276737769588691, 0.42173808092598797, 0.35708919602202194, 0.35721336713154983, 0.4390256444689039, 0.2966704389666621, 0.21841349035124014, 0.45471223589589715, 0.2510277553284501, 0.34787062763435306, 0.22535705840219789, 0.2464921741637447, 0.20612568383568186, 0.33438698853202964, 0.2751959387995464, 0.18322640392581502, 0.24494637867888025, 0.19371977125728823, 0.21393296556724462, 0.20534693018550676, 0.23516979575893682, 0.23413664213180574, 0.22041827814774873, 0.22727445924336276, 0.2432965009288205, 0.2074855512371473, 0.21951121888381742, 0.2080415169101878, 0.21066647732630983, 0.18705726875727047, 0.2082611446795971, 0.19236138691120652, 0.21249211054481587, 0.21676268485007377, 0.19152499338766515, 0.22907259548891157, 0.6729384087389488, 0.16700473472705313, 0.7782326554854998, 0.7121669671074661, 0.7094594904805096, 0.8318492153125426, 0.16517923468368156, 0.6387051801499708, 0.14865067295070022, 0.6768743033705211, 0.4233848257755404, 0.4993648113021857, 0.4619964566048196, 0.43718984550827333, 0.5595368841994441, 0.6210791710299757, 0.5467173983328677, 0.6116169349182099, 0.17745790506434655, 0.18723577493817167, 0.18276145087932927, 0.1817960387642774, 0.192736793044047, 0.20935985826599512, 0.19748783162646122, 0.21668930285269383, 0.19004992187373082, 0.0818580488497127, 0.10039014711726102, 0.08639216262790417, 0.09439390781998847, 0.10834821226234093, 0.08651943278847762, 0.08434062186875668, 0.1452084208563993, 0.08780338487473527]}, "mutation_prompt": null}
{"id": "98393537-ec42-4d30-aa9e-25784c7c9bec", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.97 + 0.01 * (self.evaluations / self.budget)  # Adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * (1 + decay_factor) / 2\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * (1 + decay_factor) / 2\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce dynamic cognitive and social coefficients based on evaluations ratio for better convergence.", "configspace": "", "generation": 26, "fitness": 0.3091037486548891, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.24.", "error": "", "parent_id": "dd20383f-bb54-49f7-9730-99aacae8d76d", "metadata": {"aucs": [0.7731234563329431, 0.769533464134343, 0.7801684338358404, 0.7793824608551319, 0.7804589200163785, 0.7714495668075801, 0.7430269903495618, 0.7832952386034646, 0.7614679994723378, 0.4917157779546578, 0.3546442583564735, 0.39603755610374836, 0.5034030580353713, 0.4424818949481707, 0.4824412683178365, 0.4961087106173776, 0.3526202433501283, 0.4485870545544628, 0.1290467589760962, 0.13399023924250963, 0.0834511957634062, 0.13522354148641802, 0.14400617948268168, 0.12795982183985855, 0.1317734711374534, 0.13072378191806988, 0.13838390033086612, 0.10834946110991328, 0.11023072222586283, 0.09801641805831207, 0.08262172412427804, 0.10888396796467026, 0.11151041236259895, 0.1172910120076871, 0.11926584898243786, 0.15140059634551895, 0.9088825938202695, 0.9270315323361833, 0.9365222101562936, 0.8934009808299446, 0.8664569960580952, 0.8430065576896116, 0.9095058423742899, 0.898657234585015, 0.9227518519183591, 0.5882060876732518, 0.5883115506099053, 0.6037389731339728, 0.5381038336258606, 0.4884926002011304, 0.6117556063139759, 0.6227676532134019, 0.4549353882253466, 0.5639778310389493, 0.3469928604024982, 0.7060942704472009, 0.3547517961356459, 0.31379101976160284, 0.7668462376029715, 0.2013416024965955, 0.2219662003874039, 0.21884390021416533, 0.7344630243680438, 0.21665900173977326, 0.14087833396436367, 0.11079689352650224, 0.17614304238609035, 0.23192415396392385, 0.1169514289776109, 0.22208581072923916, 0.21822713182186027, 0.2154000934237299, 0.23247523146516935, 0.12106719934283794, 0.19321633729665555, 0.25899763244505836, 0.2353849397850596, 0.18377817103357186, 0.241029557834873, 0.23392146024256733, 0.2784598071351515, 0.07637004589902574, 0.06327668725600577, 0.009774366532777412, 0.049272523478331665, 0.011845378849399846, 0.07873364699169538, 0.08057033477501319, 0.006248687562427024, 0.08615203197474552, 0.18417853506432014, 0.17454805892053915, 0.15014649424013882, 0.08118349835109018, 0.1142642857004621, 0.12133782015430516, 0.12457198304014272, 0.1490483338034979, 0.10175609344487124, 0.13860449780567763, 0.0665177982092855, 0.1734283251264347, 0.07060170184015768, 0.1903897208963875, 0.08179075199084651, 0.07896461168786917, 0.06154616350558517, 0.23561260651866744, 0.2993176037868087, 0.10237245574484366, 0.17261890886801157, 0.08912423398304603, 0.15661190597031382, 0.07586819751210638, 0.09400995286686264, 0.07552463667318166, 0.07760298859960713, 0.49134420210224394, 0.4630240515179531, 0.5073063778801226, 0.5070709840762813, 0.5442632707546892, 0.5104634880779042, 0.5636401039626813, 0.5257357987455825, 0.5519429991398661, 0.09173768061089815, 0.12506950557566854, 0.10004546875169018, 0.11007595157163919, 0.1325522123697298, 0.12417295080560675, 0.11135662514209632, 0.15433437738046174, 0.08985638789157979, 0.17014284349380648, 0.2054228145598429, 0.1842094680504316, 0.16745444371495122, 0.18365992778925455, 0.20474591639991668, 0.15835112319196465, 0.22743118298164444, 0.1928790119943491, 0.31803128660576874, 0.38323393449104826, 0.2259767076043636, 0.31556680078018184, 0.31271933398456153, 0.2567759804930587, 0.36791197608793746, 0.41644571956905607, 0.24331453670975678, 0.16342180760778813, 0.2300862888022558, 0.1633254451713294, 0.2664212099553501, 0.24301215824169464, 0.20203313310874005, 0.17709566354530526, 0.24037801492135036, 0.24481378520248387, 0.23628903140992707, 0.2483546503373898, 0.21959511544147559, 0.23287469100203273, 0.245112664105673, 0.203781845251505, 0.2228834752127784, 0.24653314147805216, 0.2290458390338952, 0.20816716747006025, 0.22906194181446415, 0.17788398078552803, 0.2228984720012097, 0.19409417340410162, 0.19389162369002644, 0.19426844125042153, 0.21047305313731357, 0.22843783115671923, 0.740172170089761, 0.177094376035566, 0.8037261245424363, 0.7807707371257127, 0.6519769719254549, 0.8421471771645029, 0.7206147777197501, 0.16513024246233277, 0.14806748262611513, 0.6904015435594386, 0.7009122898358492, 0.5713572813755972, 0.5480850710811106, 0.46658989377579874, 0.6385692359611039, 0.645803364556327, 0.5497355670606984, 0.5824448175622661, 0.1773666109248585, 0.19606106888510189, 0.19814346970812113, 0.18484780125463474, 0.19374830075845295, 0.19262474109736394, 0.18880929526226453, 0.20559451519373984, 0.189701113796642, 0.09384599911401403, 0.10603533492271999, 0.0863574610639889, 0.08419688743675358, 0.08901332476098256, 0.10401276376565383, 0.09177487544585605, 0.12430539872711255, 0.08901779711753932]}, "mutation_prompt": null}
{"id": "352a2f9e-f217-4687-bd9d-2eb96d70c1bc", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.97 + 0.01 * (self.evaluations / self.budget)  # Adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - np.sin((np.pi / 2) * (self.evaluations / self.budget))) * decay_factor\n                social_coeff = social_coeff_base * (np.sin((np.pi / 2) * (self.evaluations / self.budget))) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce nonlinear decay in cognitive and social coefficients for enhanced exploration-exploitation balance.", "configspace": "", "generation": 27, "fitness": 0.2831620336780784, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.23.", "error": "", "parent_id": "dd20383f-bb54-49f7-9730-99aacae8d76d", "metadata": {"aucs": [0.7219915489303517, 0.6918589779664472, 0.7523110268934197, 0.7135396296354648, 0.7146639945369653, 0.7115258448980064, 0.7576780509138845, 0.7054781121791488, 0.6707203570853545, 0.2634447590730876, 0.3372852072473008, 0.3535842621668558, 0.3406429205557492, 0.16850457908488548, 0.24798018931822918, 0.14924289805691804, 0.21999947327871383, 0.18763301838354796, 0.14803231269375405, 0.12159843255600011, 0.1405556860023629, 0.11954089834908666, 0.13209024620767396, 0.09985580037045694, 0.11295484297152925, 0.12401408580606643, 0.14651625262613432, 0.10062856551461519, 0.08243456800779281, 0.10534201922252528, 0.1210129359218588, 0.09105672119945551, 0.133301158796028, 0.10385833157211288, 0.1624814816647906, 0.101279379024805, 0.9218287301439528, 0.9402407005955806, 0.945076202848774, 0.9174438907074888, 0.8799734729060669, 0.9037688965605217, 0.9186029614311302, 0.9122666311717471, 0.9333452995959097, 0.5374943262002487, 0.4118053566702625, 0.5424120531533718, 0.47985782923337494, 0.3655440220729841, 0.5112842570550766, 0.46707669892005943, 0.4261122284623452, 0.46926310749680755, 0.22323970154312445, 0.7364272824108538, 0.7775497832022973, 0.7578028463322415, 0.1886454823225735, 0.20345142139963257, 0.2256051951385325, 0.21704986196321074, 0.370929056897906, 0.24340297615069717, 0.16193083315982604, 0.19921580333180855, 0.11301192628219614, 0.24672421347496742, 0.2822360307975854, 0.19889440800629565, 0.18915492425517433, 0.2206533426808016, 0.19924287651871442, 0.20801688081716097, 0.20214371447694646, 0.19854960743167838, 0.1594934029248103, 0.24883105181092025, 0.21566695650528234, 0.25067222287571844, 0.16619731449212738, 0.0013731191258226083, 0.08482018444710904, 0.00635061784121993, 0.016985466876128896, 9.999999999998899e-05, 0.03464216473835535, 0.07586196639946807, 0.01941566125769878, 0.008728620900675388, 0.12539078253906333, 0.07244833968350506, 0.135565106768746, 0.059022823821731074, 0.10913489409285337, 0.08078562029010483, 0.09740262650651854, 0.1601806643323167, 0.1830810768920076, 0.07178408662439983, 0.06250152898975991, 0.19514456752402864, 0.13177801860852745, 0.10203192007935757, 0.05136621169950761, 0.1177687110897414, 0.0542736657759717, 0.1608462678457785, 0.15334254043196338, 0.20085781636032474, 0.23313818696789912, 0.03753947211676245, 0.18327344885881414, 0.08148730312218433, 0.05424181095538605, 0.07591103811268562, 0.07732250599216828, 0.5056884554143039, 0.45597103940368555, 0.5179993444201989, 0.5246115955840505, 0.4706643893113096, 0.4880076890602203, 0.4966185092062476, 0.5271964109581824, 0.525407820385463, 0.09218203293733218, 0.10777228576984377, 0.10936010657286332, 0.09538261113209556, 0.11337696940433928, 0.14928929361745868, 0.12370472847500513, 0.1321250090451327, 0.098009045061202, 0.2853373172135296, 0.18693288670917718, 0.18791987328394866, 0.14749416735248722, 0.2512991941699484, 0.2768289824875201, 0.1886733573385997, 0.2062359933482567, 0.15930106066284266, 0.26234879944665046, 0.26826750356837914, 0.34894222368349237, 0.28894407185902393, 0.3956066550957391, 0.37407110923406606, 0.22258873263019208, 0.42462307592068127, 0.24976487989951324, 0.21394788493059047, 0.24865228724397725, 0.2653895121108062, 0.26922860836474904, 0.23031814148971075, 0.268243711532856, 0.2142826812387496, 0.3353895229260998, 0.21431924253656476, 0.24684915763532178, 0.21622832498617595, 0.2306870450427878, 0.21621607201277848, 0.22404955059391352, 0.2261045214723575, 0.2169410796813097, 0.22505110683257235, 0.21625322120234525, 0.21575287241814534, 0.19049158367629515, 0.1821310527276856, 0.21309468772305984, 0.2324018752726451, 0.1959931397225687, 0.23543740154161774, 0.19914310547946124, 0.22871080410284095, 0.183123669066662, 0.1669635367225918, 0.18519409271173426, 0.7070614484404348, 0.6584746427734738, 0.817002923474696, 0.17109783432069403, 0.16556023009075238, 0.1495071283687126, 0.6654806872157362, 0.45080241986849656, 0.5000250685700296, 0.5534004084814821, 0.5852843479065971, 0.6330469068621376, 0.20003505510703912, 0.6045362950509942, 0.6677244423621924, 0.18937265426894367, 0.2015316052131091, 0.18825887930716856, 0.19089197149776915, 0.20157196568176383, 0.1934103913599884, 0.2003593973644071, 0.19033061662317974, 0.1909478144778458, 0.10120422531019191, 0.0894227983140301, 0.10946842327463513, 0.08882667549415524, 0.10924158310759935, 0.08435832269231447, 0.0916141910436814, 0.09494445154915432, 0.09439356752082617]}, "mutation_prompt": null}
{"id": "7eb47783-91a5-49ec-babe-a04d5858754a", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        initial_population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n        \n        # Replace population_size with dynamic calculation\n        population_size = int(initial_population_size * (1 - (self.evaluations / self.budget)))\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                # Modified line for adaptive inertia weight\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.97 + 0.01 * (self.evaluations / self.budget)  # Adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce a dynamic population size that decreases with evaluations to enhance exploitation in later stages.", "configspace": "", "generation": 28, "fitness": 0.3194659928940912, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "dd20383f-bb54-49f7-9730-99aacae8d76d", "metadata": {"aucs": [0.7534516312621488, 0.7662387556965051, 0.7900215512836071, 0.7520025273207782, 0.7705481084771196, 0.7941193778677973, 0.7664721483040895, 0.7655189311662309, 0.7629839135154749, 0.435917425133743, 0.5034488980461562, 0.4570285832045451, 0.4482295714517741, 0.45716003798087035, 0.47375835251733256, 0.467375542234698, 0.4727749829388256, 0.36148769864645935, 0.12677197782356964, 0.12481429225896334, 0.15764285765918995, 0.1639965719561851, 0.3570825540504209, 0.14872689309665166, 0.1261622228193079, 0.1323339672417796, 0.10243398078061039, 0.09988844684357867, 0.10110404308010335, 0.0955996257998859, 0.0904634523906338, 0.13924009003527704, 0.14231153429752452, 0.10532824146831787, 0.14439613173520593, 0.08416865992485878, 0.9093727024092965, 0.9270222189617691, 0.9364090625338248, 0.8930524248528336, 0.8687244337919973, 0.8430066332572543, 0.9094393341160517, 0.8985812433514455, 0.9226226280771429, 0.6055665944780881, 0.6226001122234479, 0.5514116042802639, 0.5455218071273742, 0.32560346679811913, 0.5612040070879363, 0.5865657379322525, 0.5960922813541903, 0.5773162246162009, 0.7696489190708917, 0.7841946164752857, 0.3709127056892242, 0.2698081934022022, 0.35422858030098026, 0.20164412210711746, 0.608089583895985, 0.2950681679187025, 0.7052052179436705, 0.24098764627177316, 0.13883040598007412, 0.13233231798751988, 0.16587472953452487, 0.21717186505180497, 0.16067140884971742, 0.2209400915079056, 0.2367961733447087, 0.18510707176644048, 0.20224800027735224, 0.12191673147141102, 0.21555051036895279, 0.27906076278324, 0.21641768958955043, 0.28720591164108633, 0.21780881003418984, 0.2348374669007951, 0.18733830891467873, 0.05856964935438591, 0.07714953374723132, 0.029852581924575294, 0.06755114137797447, 0.0007493055027579798, 0.08838109500229163, 0.11282362763091025, 0.008642261431502818, 0.0629462881694337, 0.15592600662306577, 0.1021203074848891, 0.16524128500326574, 0.07338851304079685, 0.10934609081093438, 0.14031751262850545, 0.10735740361639168, 0.12158358901898703, 0.15314693375293376, 0.0949421060635659, 0.05745617282586968, 0.21074077492288423, 0.08178633272721614, 0.16558393314386344, 0.08312993985744599, 0.10136098348344835, 0.058503239847665145, 0.17804395713671495, 0.12749788671225792, 0.10668011547734879, 0.16739457563760485, 0.17849780687388372, 0.1930774147654275, 0.05640626718456809, 0.14442384810631825, 0.0904569302243835, 0.07605791098065728, 0.553839779431893, 0.49336418274146, 0.5479883200857847, 0.5307518947672683, 0.5376701976126099, 0.5006135037552488, 0.5404160462293061, 0.5416999955028201, 0.5030456865322785, 0.10271396264804733, 0.10507177045923, 0.09113542589875634, 0.11698973185730088, 0.12703076563968496, 0.12727125838039388, 0.1351814207453923, 0.11750644247531694, 0.12847006071783185, 0.19646060910666707, 0.19236334468726402, 0.27103025343592446, 0.21936243067415662, 0.24558445365524362, 0.2442199475939234, 0.23193829107386654, 0.18388275551041255, 0.2585179097711108, 0.21971822740604086, 0.43547881230177277, 0.42856985570894335, 0.43069979312509554, 0.3040098781482765, 0.4936923995020047, 0.3755831048556796, 0.33147715011946466, 0.24512241273484248, 0.21129117510805706, 0.2829571564106328, 0.2152621051465322, 0.22389588278951322, 0.22924646522458547, 0.2959320828620937, 0.23376400903505867, 0.3973010054357702, 0.23510575737187966, 0.2525699390056214, 0.2490212726971206, 0.2309077311959019, 0.22917405958518022, 0.21662670106012616, 0.21641082522166, 0.23601109920796648, 0.26098623545124033, 0.220102763653508, 0.185295194702646, 0.21434228383561726, 0.216605878962146, 0.23296598477663777, 0.1828994975847985, 0.19076949028927725, 0.19396206224002777, 0.5019763111303479, 0.20271354593357527, 0.7771988098433442, 0.17747235580918952, 0.768193345400909, 0.7225321875255082, 0.6725947151576923, 0.8053599072747545, 0.7664784311715176, 0.6069188183420147, 0.14810917976030813, 0.6659315452599857, 0.5943321944309401, 0.5577223184913064, 0.16019139662070325, 0.5147112467293611, 0.5595316697106985, 0.6441394101357368, 0.5375838707659202, 0.6718364506757933, 0.1866626573028093, 0.1834131950505994, 0.19032353222027765, 0.1944864054417551, 0.1944451604549423, 0.19149059512753674, 0.19462729960542058, 0.19070064411015342, 0.18854726010295508, 0.07226560657364467, 0.15017903552937428, 0.08549801428708415, 0.0957622369805029, 0.08943671266976927, 0.09646735253817607, 0.12190117306681603, 0.128378112218832, 0.0845175991970929]}, "mutation_prompt": null}
{"id": "f9b9f928-2b00-43ee-a373-a1961451dcf4", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.97 + 0.01 * (self.evaluations / self.budget)\n                cognitive_coeff = cognitive_coeff_base * np.sin(np.pi * self.evaluations / (2 * self.budget)) * decay_factor  # Modified line\n                social_coeff = social_coeff_base * np.cos(np.pi * self.evaluations / (2 * self.budget)) * decay_factor  # Modified line\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Enhance velocity adaptation by introducing dynamic coefficients based on time-dependent functions.", "configspace": "", "generation": 29, "fitness": 0.20634486464874918, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "dd20383f-bb54-49f7-9730-99aacae8d76d", "metadata": {"aucs": [0.5974054098767347, 0.5147003244025379, 0.5304395171344769, 0.6121475629384294, 0.18136581943453323, 0.56095052860782, 0.5010110989534577, 0.6091875143465657, 0.1491413163762334, 0.2907453123587762, 0.06457295829046672, 0.060756557647751785, 0.05695329723619669, 0.3714512931990187, 0.32406226269898775, 0.031041543111757663, 0.032907705645780494, 0.0686511999899696, 0.04780452523197054, 0.0951238965783856, 0.07691761206283065, 0.11184589761390529, 0.2125691215599831, 0.08048070767287352, 0.052237361103755986, 0.13620771638716656, 0.10037719351473862, 0.12017738314481452, 0.04387790367686262, 0.08271718847671605, 0.09113309645883472, 0.11588509829725047, 0.07935646532470253, 0.09475111432151939, 0.08436110555262344, 0.09412315752018585, 0.9847256359621157, 0.9764100660025846, 0.9886533528863817, 0.983741301343975, 0.9855837617719825, 0.9773081628588014, 0.9858406337967983, 0.9853375636428133, 0.983702492796838, 0.4578146752402775, 0.2636465595438412, 0.05700761104483665, 0.14063431475985455, 0.14092328826126155, 0.42108058188586917, 0.08150127079966174, 0.08423745248145964, 0.12260641511776282, 0.3190511684034736, 0.20754093603053092, 0.15861736037412466, 0.21283197544549926, 0.17755477731570046, 0.18357729583211257, 0.11768387973173777, 0.12944161874201932, 0.30189670773870336, 0.1367899530127501, 0.0808186381449143, 0.1485272352247441, 0.10393759264729907, 0.09702482737047302, 0.09979947194098382, 0.1147711691387252, 0.1298274942604285, 0.14322433161578552, 0.11277080903404879, 0.10950366298914638, 0.08737769705250886, 0.15977711688032192, 0.10111933722503452, 0.181093956169336, 0.1684955742567752, 0.0921197559193101, 0.0902632865393378, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023779830847644345, 9.999999999998899e-05, 9.999999999998899e-05, 0.0386139777704575, 0.050069030161509875, 0.00808075172967071, 0.042387743997552185, 9.999999999998899e-05, 0.005375508973948451, 0.036338140323388335, 0.019069827593994892, 0.09010774761865692, 0.026499974692807515, 9.999999999998899e-05, 0.018339784810387005, 0.04103902692030237, 0.08107387028497048, 0.03932143646123909, 0.05222385611478042, 0.0502954405269862, 0.06087256631394289, 0.008169450924837451, 9.999999999998899e-05, 0.12148808734269967, 0.004639360852350172, 0.07061967109083889, 0.028381527042788735, 0.11094951910257533, 0.1301566600302232, 0.03918339941157434, 0.4588552280602094, 0.4035751366415734, 0.385296326282199, 0.42638304250862624, 0.3892576435043834, 0.20419921052379586, 0.4183665726455853, 0.3901631458316116, 0.4575166121174732, 0.06270902166800774, 0.05907135800988239, 0.049586441169479856, 0.1142458088201016, 0.08748365560926197, 0.09261805430476522, 0.06722082007053853, 0.09154978899583899, 0.0882924874439337, 0.14079431237703632, 0.18648147142188332, 0.27414731362753997, 0.21078234275769292, 0.1567262934284508, 0.1295322716745766, 0.4561965690015509, 0.2757209983212118, 0.19638318415283806, 0.2543911506079677, 0.18477791850110847, 0.23445192785131197, 0.17981908741268893, 0.33108848274462266, 0.30314447188136495, 0.25550577242951544, 0.3170152076500754, 0.3092343671199326, 0.1448409081049018, 0.1935069475493808, 0.20372885860152723, 0.18990926582021517, 0.18873137024718423, 0.16123635013373894, 0.24264317366865784, 0.22776925925079472, 0.25089623972904784, 0.1989840029002793, 0.15562292553302015, 0.21350756694291273, 0.20734936932062786, 0.1928243986113677, 0.19943293290453035, 0.21585234231570316, 0.23013976544767067, 0.2216952773386731, 0.1998728429686416, 0.2111850752058303, 0.20219566360001784, 0.19227468866639597, 0.19530551909570004, 0.19701450172038137, 0.192188151762409, 0.21833277883241398, 0.1722143002616816, 0.2505948222486488, 0.16878023374008366, 0.13286376150573964, 0.6309712236183747, 0.18759077243759859, 0.18438828337802293, 0.11761992028669699, 0.1550278377752018, 0.6316662546320417, 0.576316774614437, 0.20838924889691268, 0.18654208656947036, 0.4917842351790237, 0.33989265995315576, 0.13710551161142626, 0.09989282228369445, 0.10046773467883052, 0.4450539320041528, 0.18677426672913677, 0.21115491649500018, 0.19252598344540162, 0.17070677144794189, 0.1758346502991187, 0.1955251914495688, 0.1893344273858094, 0.18645803768399782, 0.19021683246664856, 0.06967944886586064, 0.0622307466467551, 0.07437204248034435, 0.082086886640231, 0.07569243371418144, 0.05783521387506663, 0.101611127205955, 0.08524511756355713, 0.0946138536977067]}, "mutation_prompt": null}
{"id": "14b1a333-f6fe-45cc-a724-e494e3384bfe", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.97 + 0.01 * (self.evaluations / self.budget)\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Adjusted line for dynamic velocity scaling\n                velocities[i] = np.clip(velocities[i], -0.5, 0.5) \n                \n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Enhanced adaptive behavior by adjusting velocity bounds for progressive exploration-exploitation balance.", "configspace": "", "generation": 30, "fitness": 0.30040681683446974, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "dd20383f-bb54-49f7-9730-99aacae8d76d", "metadata": {"aucs": [0.7806994323322091, 0.7743574887965277, 0.7924631620286545, 0.7794566575089295, 0.7786234343491119, 0.7709663195951264, 0.7743962255101218, 0.7777731269086707, 0.7618734576424095, 0.3022771839842455, 0.5398282946479689, 0.3158044540406758, 0.4040575412063172, 0.48069705025000264, 0.3848833677068565, 0.46576574768886625, 0.4335746389059314, 0.36754202015325543, 0.10766290722839023, 0.0981760326968606, 0.12599356535827244, 0.16441136332526507, 0.1496198591974628, 0.13731747538059658, 0.09606999542918071, 0.14501889811647162, 0.1433156505210904, 0.10200403454400042, 0.10018580938198629, 0.08408908603646137, 0.11705204057725238, 0.11887967650027276, 0.10556987503114779, 0.10706209406437772, 0.16158623907317904, 0.1268111532887609, 0.8714403294602304, 0.8932651958456358, 0.9014116201575267, 0.8651485689263656, 0.800198440780095, 0.8416604369172409, 0.8739486522217198, 0.8477205066000666, 0.866492941295036, 0.6192442486076544, 0.5865523216049705, 0.5283518351314136, 0.5855862610731273, 0.5032126503768768, 0.5853830677857159, 0.6268781955147373, 0.5949989341995698, 0.5837739953017727, 0.7415969154194895, 0.6419631859249619, 0.7160299880010395, 0.2165601095508778, 0.7976495800281419, 0.2044808109627363, 0.17453264731980234, 0.2227772867912139, 0.22445744613576657, 0.39992109841860246, 0.11188740805382225, 0.11750486806575322, 0.18168874662699674, 0.2568834994812188, 0.11507670168096573, 0.24662814094388863, 0.25173647737802896, 0.1999882250226258, 0.2157398092579801, 0.24694031814304607, 0.2220053276415398, 0.2439641907368687, 0.23181933030732682, 0.1616588833065925, 0.2599531072647441, 0.2193274502598097, 0.24131010203685865, 0.05736190885711623, 0.0493603097974421, 0.051826071260051454, 0.0121106973318017, 0.029329286805268695, 0.0750109026977307, 0.08198097391631143, 0.028497878043417635, 0.0713571694007451, 0.19541745119463982, 0.09544116578921058, 0.1999372751828551, 0.06257340219287721, 0.10881864509092598, 0.11967366058737483, 0.11025755376423951, 0.12881112437474218, 0.16879689886593352, 0.08510901728019471, 0.08052968944324279, 0.10630739571750947, 0.11313668218495765, 0.17516667220665127, 0.09169401945421518, 0.07867801096420934, 0.1277198471077685, 0.06620805349990022, 0.2602889708272612, 0.12650310577854762, 0.12574463653750756, 0.04969555178348417, 0.21161311731127985, 0.08763636414782994, 0.18170245379030803, 0.07488956283955772, 0.07662532360972585, 0.5044639723978204, 0.504748450134902, 0.509662836380419, 0.5438555659076251, 0.5228888722342496, 0.5409516017921423, 0.541405806967572, 0.5758366608807496, 0.5380246135647413, 0.08590453066666448, 0.10586580563840764, 0.08557536154692791, 0.1221428303171993, 0.09869003951280897, 0.14633714301225753, 0.32637799506005716, 0.10800807605695806, 0.0989094726414127, 0.250201422431765, 0.17101880788542823, 0.15828861313969222, 0.2635570480516386, 0.23676832498749467, 0.1703275303010603, 0.1689424270926042, 0.25983524868579366, 0.19721388688139363, 0.25186841117084713, 0.35290416458736085, 0.29270002789502536, 0.3716929676831735, 0.2638634740349104, 0.309073693964809, 0.2265281393500762, 0.23782359375077078, 0.25598680835422627, 0.15053266845149482, 0.21058731288618593, 0.210235609098545, 0.20484330630083403, 0.2085511620814896, 0.19774488591221095, 0.23126509026846354, 0.24637367492768913, 0.2349446223207845, 0.2224561235816338, 0.2327146899461494, 0.20875364150832676, 0.24403233364024635, 0.22344482649728148, 0.24254773950465813, 0.21171444840142384, 0.2056097555252281, 0.24453557191991981, 0.19517087127249455, 0.23412379276648587, 0.18509288238501764, 0.21516715116835483, 0.19163411271772246, 0.201987327373234, 0.18050529617808664, 0.2911575045101057, 0.24045175689350506, 0.18170027743596207, 0.17968647396243176, 0.17869401319390177, 0.7966086692658596, 0.19456817819722905, 0.7796185772866451, 0.683802573145365, 0.16488671579686398, 0.7398122137678544, 0.6308709270519597, 0.20731691106270678, 0.5976595049469604, 0.6664341676293275, 0.6038168565823541, 0.20107376000414623, 0.6201087929063075, 0.5421715147215085, 0.5990493671398447, 0.18987347126489218, 0.1965656460798425, 0.18456213929030962, 0.19798026405439206, 0.1913432604797939, 0.18969288414890784, 0.19253075831723665, 0.18801332125301295, 0.20968579693464828, 0.08142290262280516, 0.08780471134085532, 0.08141754439273696, 0.09415747120644313, 0.09091151993101088, 0.11818851671990682, 0.12183528497251861, 0.08411098692883279, 0.07444801400733181]}, "mutation_prompt": null}
{"id": "56f88fcc-eb21-4bf5-8dcc-9a47dd9adfba", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.97 + 0.01 * (self.evaluations / self.budget)\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * (1 + decay_factor) / 2  # Adjusted coefficient\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * (1 + decay_factor) / 2  # Adjusted coefficient\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce a dynamic cognitive-social coefficient balance to enhance convergence.", "configspace": "", "generation": 31, "fitness": 0.3091037486548891, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.24.", "error": "", "parent_id": "dd20383f-bb54-49f7-9730-99aacae8d76d", "metadata": {"aucs": [0.7731234563329431, 0.769533464134343, 0.7801684338358404, 0.7793824608551319, 0.7804589200163785, 0.7714495668075801, 0.7430269903495618, 0.7832952386034646, 0.7614679994723378, 0.4917157779546578, 0.3546442583564735, 0.39603755610374836, 0.5034030580353713, 0.4424818949481707, 0.4824412683178365, 0.4961087106173776, 0.3526202433501283, 0.4485870545544628, 0.1290467589760962, 0.13399023924250963, 0.0834511957634062, 0.13522354148641802, 0.14400617948268168, 0.12795982183985855, 0.1317734711374534, 0.13072378191806988, 0.13838390033086612, 0.10834946110991328, 0.11023072222586283, 0.09801641805831207, 0.08262172412427804, 0.10888396796467026, 0.11151041236259895, 0.1172910120076871, 0.11926584898243786, 0.15140059634551895, 0.9088825938202695, 0.9270315323361833, 0.9365222101562936, 0.8934009808299446, 0.8664569960580952, 0.8430065576896116, 0.9095058423742899, 0.898657234585015, 0.9227518519183591, 0.5882060876732518, 0.5883115506099053, 0.6037389731339728, 0.5381038336258606, 0.4884926002011304, 0.6117556063139759, 0.6227676532134019, 0.4549353882253466, 0.5639778310389493, 0.3469928604024982, 0.7060942704472009, 0.3547517961356459, 0.31379101976160284, 0.7668462376029715, 0.2013416024965955, 0.2219662003874039, 0.21884390021416533, 0.7344630243680438, 0.21665900173977326, 0.14087833396436367, 0.11079689352650224, 0.17614304238609035, 0.23192415396392385, 0.1169514289776109, 0.22208581072923916, 0.21822713182186027, 0.2154000934237299, 0.23247523146516935, 0.12106719934283794, 0.19321633729665555, 0.25899763244505836, 0.2353849397850596, 0.18377817103357186, 0.241029557834873, 0.23392146024256733, 0.2784598071351515, 0.07637004589902574, 0.06327668725600577, 0.009774366532777412, 0.049272523478331665, 0.011845378849399846, 0.07873364699169538, 0.08057033477501319, 0.006248687562427024, 0.08615203197474552, 0.18417853506432014, 0.17454805892053915, 0.15014649424013882, 0.08118349835109018, 0.1142642857004621, 0.12133782015430516, 0.12457198304014272, 0.1490483338034979, 0.10175609344487124, 0.13860449780567763, 0.0665177982092855, 0.1734283251264347, 0.07060170184015768, 0.1903897208963875, 0.08179075199084651, 0.07896461168786917, 0.06154616350558517, 0.23561260651866744, 0.2993176037868087, 0.10237245574484366, 0.17261890886801157, 0.08912423398304603, 0.15661190597031382, 0.07586819751210638, 0.09400995286686264, 0.07552463667318166, 0.07760298859960713, 0.49134420210224394, 0.4630240515179531, 0.5073063778801226, 0.5070709840762813, 0.5442632707546892, 0.5104634880779042, 0.5636401039626813, 0.5257357987455825, 0.5519429991398661, 0.09173768061089815, 0.12506950557566854, 0.10004546875169018, 0.11007595157163919, 0.1325522123697298, 0.12417295080560675, 0.11135662514209632, 0.15433437738046174, 0.08985638789157979, 0.17014284349380648, 0.2054228145598429, 0.1842094680504316, 0.16745444371495122, 0.18365992778925455, 0.20474591639991668, 0.15835112319196465, 0.22743118298164444, 0.1928790119943491, 0.31803128660576874, 0.38323393449104826, 0.2259767076043636, 0.31556680078018184, 0.31271933398456153, 0.2567759804930587, 0.36791197608793746, 0.41644571956905607, 0.24331453670975678, 0.16342180760778813, 0.2300862888022558, 0.1633254451713294, 0.2664212099553501, 0.24301215824169464, 0.20203313310874005, 0.17709566354530526, 0.24037801492135036, 0.24481378520248387, 0.23628903140992707, 0.2483546503373898, 0.21959511544147559, 0.23287469100203273, 0.245112664105673, 0.203781845251505, 0.2228834752127784, 0.24653314147805216, 0.2290458390338952, 0.20816716747006025, 0.22906194181446415, 0.17788398078552803, 0.2228984720012097, 0.19409417340410162, 0.19389162369002644, 0.19426844125042153, 0.21047305313731357, 0.22843783115671923, 0.740172170089761, 0.177094376035566, 0.8037261245424363, 0.7807707371257127, 0.6519769719254549, 0.8421471771645029, 0.7206147777197501, 0.16513024246233277, 0.14806748262611513, 0.6904015435594386, 0.7009122898358492, 0.5713572813755972, 0.5480850710811106, 0.46658989377579874, 0.6385692359611039, 0.645803364556327, 0.5497355670606984, 0.5824448175622661, 0.1773666109248585, 0.19606106888510189, 0.19814346970812113, 0.18484780125463474, 0.19374830075845295, 0.19262474109736394, 0.18880929526226453, 0.20559451519373984, 0.189701113796642, 0.09384599911401403, 0.10603533492271999, 0.0863574610639889, 0.08419688743675358, 0.08901332476098256, 0.10401276376565383, 0.09177487544585605, 0.12430539872711255, 0.08901779711753932]}, "mutation_prompt": null}
{"id": "168da8c5-4394-4651-bfb2-54db46dd3029", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                # Modified line for logarithmic inertia weight decay\n                inertia_weight = 0.9 - 0.4 * np.log1p(self.evaluations / self.budget)\n                \n                decay_factor = 0.97 + 0.01 * (self.evaluations / self.budget)  # Adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce logarithmic inertia weight decay for consistent convergence.", "configspace": "", "generation": 32, "fitness": 0.30698398883591876, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.24.", "error": "", "parent_id": "dd20383f-bb54-49f7-9730-99aacae8d76d", "metadata": {"aucs": [0.7538872861946659, 0.7502164044603195, 0.7617839644191875, 0.7591013663958022, 0.7564673102835021, 0.7548442378900191, 0.7640394535416454, 0.7139397417901416, 0.7275706194920609, 0.2711404774614037, 0.4551986479208924, 0.392017160216797, 0.3359750239331438, 0.36376781629606525, 0.41645572863096936, 0.46268052366825174, 0.3511956234442366, 0.42000653386355535, 0.1298229137621445, 0.15221702936541093, 0.13817110882754935, 0.1154091329789495, 0.1438412047644071, 0.16133983714277111, 0.1284798039811318, 0.1257502715755927, 0.1280516997009301, 0.10538716573026763, 0.0920037070584454, 0.09776779289697624, 0.08012842910366069, 0.09104249764815231, 0.11303430387610625, 0.12686220905627232, 0.13990784033167636, 0.09852213904189688, 0.9115974949869771, 0.9270310428313323, 0.9364200271997196, 0.8931176868152705, 0.8687989033479935, 0.8469982655646612, 0.9094666636500827, 0.8986098302439537, 0.9226440590007136, 0.5857103395756238, 0.5882649539401288, 0.5386143716336944, 0.5058030441368014, 0.51848608464331, 0.49376025322757, 0.5638175535236776, 0.52745336311606, 0.49850826438496065, 0.7874585826724898, 0.8190464725679055, 0.3633724281893953, 0.7830387770749673, 0.6637566937941053, 0.20728489328213573, 0.22607099883152437, 0.22263101354026527, 0.3649134005441912, 0.20878723325122794, 0.1433876727522183, 0.15267637150709723, 0.16097278150292127, 0.23093969851677043, 0.20069454083900196, 0.2210539660569557, 0.25704730420554256, 0.19439637248041397, 0.20429898815703074, 0.12250056508872198, 0.22194859393662947, 0.26149920306163443, 0.23279616475125675, 0.27518518527897373, 0.20322691146728467, 0.23505960917288293, 0.21468776047576354, 0.0694161827072669, 0.08529904299145274, 0.05025319478704693, 0.049837222195672104, 9.999999999998899e-05, 0.0671811279530874, 0.11261593455277596, 0.007683545003148162, 0.09305417869553634, 0.12224306822071407, 0.09920363518583142, 0.15930472018282094, 0.06658033698736254, 0.09788024972364984, 0.11832296897820416, 0.11677865288856504, 0.1324049931637179, 0.11179047227657446, 0.1030591043231911, 0.042648104904931095, 0.2271386983598307, 0.07075395262117545, 0.15646411864487586, 0.07808725205841982, 0.08263148478528459, 0.05971375906786003, 0.1558976531357804, 0.13405737252526628, 0.10087469663325044, 0.1551233897081754, 0.15832660939858356, 0.18745621103161003, 0.06320754024454311, 0.1402416664149072, 0.08616105998548684, 0.07621995303932805, 0.506085094898284, 0.49782052286746015, 0.5135462874834424, 0.4936445438411724, 0.5411947360567924, 0.5441172995701524, 0.5416820290176391, 0.54433723470933, 0.49490078153447203, 0.0831192405399448, 0.10486111141172749, 0.10592739878297275, 0.13251588762377065, 0.10705235107231403, 0.09636268414285865, 0.09855025759073233, 0.1203607411100609, 0.13041506095707278, 0.16413236958092203, 0.21278609569856655, 0.26385512303441505, 0.22534889255920476, 0.23737625028924425, 0.21575357307832743, 0.214762890335375, 0.16216154340524902, 0.19813449278245965, 0.31505365114033135, 0.2992284045656687, 0.3676859338005498, 0.3493320119813985, 0.3017155127222081, 0.34754771851262156, 0.21651510941675256, 0.4223806715720778, 0.2469554255478319, 0.19153963876215785, 0.2443027324821423, 0.1714876098195025, 0.18587549640790235, 0.25760330362887784, 0.28046862742748213, 0.204477768403169, 0.29397685421844266, 0.23663412761627856, 0.21152341193792756, 0.22835662284690472, 0.24693873092935714, 0.1997935414901587, 0.22690781461377507, 0.20606337081941095, 0.2075529148992976, 0.22386964067058068, 0.27951405839951327, 0.1980044618112352, 0.19051999649337648, 0.1812400280365769, 0.23189549743035165, 0.23284957126411998, 0.1931037705563443, 0.19350608460941432, 0.18641896862333607, 0.23313538960409064, 0.7314557453002986, 0.1670083865772507, 0.8049316180498272, 0.7489435201905492, 0.7310767924945728, 0.8103936943490401, 0.7580870878654401, 0.5577967256822765, 0.148073540253431, 0.6980639329141636, 0.5164983778085045, 0.47584812769849516, 0.16012102935776495, 0.7069031324250503, 0.4903747081559018, 0.5729883822303331, 0.5492613530400927, 0.5634496561282514, 0.19145565989899582, 0.20422337967009907, 0.20939359741991703, 0.1836143126441917, 0.18781610075028998, 0.18445760798239486, 0.20194486019163138, 0.18838942935229797, 0.18013349557342118, 0.08676513909859207, 0.13648478886710613, 0.07850786801975795, 0.08560287349723839, 0.09627291727768972, 0.09079222668926812, 0.10184916142618372, 0.13946243594354402, 0.08544741175670678]}, "mutation_prompt": null}
{"id": "ec88a97c-7246-4eeb-8bac-51ce25d3191c", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.97 + 0.01 * (self.evaluations / self.budget) \n                # Modified cognitive and social coefficients\n                cognitive_coeff = cognitive_coeff_base * (0.5 + 0.5 * (1 - self.evaluations / self.budget)) * decay_factor\n                social_coeff = social_coeff_base * (0.5 + 0.5 * (self.evaluations / self.budget)) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce a dynamic learning factor scaling for better exploration and exploitation balance.", "configspace": "", "generation": 33, "fitness": 0.25034211775486714, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "dd20383f-bb54-49f7-9730-99aacae8d76d", "metadata": {"aucs": [0.5373170056628038, 0.5493515953755739, 0.5494094688781466, 0.5831940194109375, 0.6030204779978294, 0.6137748330469767, 0.6263035335073375, 0.5847665168891713, 0.5778024086072088, 0.22958746771226912, 0.22233324186953773, 0.34188771919039185, 0.23952909786707366, 0.1449671366783446, 0.23874435985240006, 0.09929191877106225, 0.2503317313640865, 0.02415255058137178, 0.13853031548817907, 0.14394490993464282, 0.11431415099972764, 0.1193350857208485, 0.11235789688278497, 0.24677706465636406, 0.10673473057785632, 0.33392193150076854, 0.2762097074461892, 0.09706173923084027, 0.11830167250897916, 0.1134878212758389, 0.09337767462177193, 0.13069467367683374, 0.08877553707731367, 0.12468126518851019, 0.11544552172263323, 0.138460249583646, 0.976106449085963, 0.9675630664999457, 0.9812853034297143, 0.9759295132684503, 0.9713683767386448, 0.9716625570356232, 0.9812608191895054, 0.9676775951398912, 0.9762266159811733, 0.35959416629272445, 0.41732726829292943, 0.37471711617435843, 0.3579574903042775, 0.29806783221235666, 0.14593391195618477, 0.32168558544021986, 0.39796577260292065, 0.11719616468510685, 0.21846994573277312, 0.6150404371186153, 0.19935845119938966, 0.19206967188605573, 0.20279475416773096, 0.19930092875474603, 0.5778053190091856, 0.202797225870608, 0.217508665206952, 0.2512230812959714, 0.10597337860566836, 0.15444078228048752, 0.10078962821028659, 0.10879948990798471, 0.13653318769194955, 0.16543534001189786, 0.1130776962950939, 0.15615694170184813, 0.15216222734898022, 0.13988360281076473, 0.21624774886120057, 0.18524646169519743, 0.25544256594041304, 0.1833144976445341, 0.10332621054520186, 0.07182089408334014, 0.1839912945633061, 9.999999999998899e-05, 0.029428634860098613, 9.999999999998899e-05, 0.013806086676870888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0070249168208885715, 9.999999999998899e-05, 0.049157805143337674, 0.11239626255682689, 0.11022704510641401, 0.06801538423857023, 0.03268727819463724, 0.022541331491727767, 0.06965315315710563, 0.08566252609914704, 0.11677196102078191, 0.042382949941653036, 0.01648336023321495, 0.031038394645370504, 0.08256827941200373, 0.03744685543252202, 0.04319733503090284, 0.054103198197289926, 0.07072479155867128, 0.0355103824181644, 0.06534310817803912, 0.1632840781781031, 0.15608732851213447, 0.12759143367069614, 0.11027750242342083, 0.07166826687564376, 0.04532420928421421, 0.18301820042296646, 0.058584612560874105, 0.40448546180703393, 0.4598359233724486, 0.4393886836737695, 0.45745520593477906, 0.48000144293052527, 0.4242645382946584, 0.47461550315071677, 0.4059222209227782, 0.43605934954608305, 0.11268653660351591, 0.07610878030365542, 0.09495101221365243, 0.11321963609093888, 0.10570719770523829, 0.10281973863244365, 0.09173628877283535, 0.11491872274088688, 0.14672359776654298, 0.1838111483635353, 0.16437564515508252, 0.29748248403963984, 0.17526489183437222, 0.23192585165403234, 0.2380006051504281, 0.3325487284326336, 0.20713872186143412, 0.21030812506054186, 0.2514520611499108, 0.2798434105597114, 0.24610214584183765, 0.29211048340978285, 0.3190043444492411, 0.2523137638678622, 0.29609632831734767, 0.310347300459349, 0.30658487853812344, 0.23406393659063707, 0.2227176068510215, 0.25426799846184245, 0.16247339150834028, 0.24440199489361925, 0.2114416406056967, 0.2733245131606802, 0.27608729603589277, 0.27636014930326025, 0.25431674592665654, 0.20922147727727458, 0.20483799443519124, 0.19707338909881267, 0.1757288679272475, 0.22955049302749098, 0.2156075750958486, 0.20193375075522402, 0.20076873332035516, 0.20284757580754775, 0.20766149229699882, 0.20313726273675747, 0.20432776059813373, 0.19000453396870876, 0.1876175529892128, 0.19350976110896623, 0.35375507135923434, 0.20072263261668544, 0.6541165701699228, 0.17907137351346103, 0.16534777826239555, 0.6255216120878397, 0.5667118547231498, 0.6910694448217489, 0.6432349987360391, 0.7083950655790014, 0.6139875038249079, 0.5235795235369358, 0.20932932719146724, 0.1629892752278964, 0.1912289007723168, 0.36244657915563583, 0.1470599784252936, 0.10391381481116824, 0.2066810049908122, 0.5565750049480188, 0.22161565461051158, 0.19197998053820542, 0.19525259101922454, 0.1914286391562957, 0.20556263628124571, 0.17809514980502406, 0.1752095717070712, 0.1925210496176757, 0.19895949856075645, 0.08846421102294533, 0.08234673497801925, 0.08678937342181958, 0.09017453036819556, 0.08213825663658103, 0.0883491835558945, 0.09451328472245857, 0.08673952126753537, 0.07980626417040892]}, "mutation_prompt": null}
{"id": "bc374219-6b36-48fd-aa8c-5c50229b977a", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.97 + 0.01 * np.power(self.evaluations / self.budget, 2)  # Non-linear adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce a non-linear adaptive decay factor to improve convergence in later iterations.", "configspace": "", "generation": 34, "fitness": 0.3131651806092214, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.24.", "error": "", "parent_id": "dd20383f-bb54-49f7-9730-99aacae8d76d", "metadata": {"aucs": [0.7783811480718252, 0.7608297895159528, 0.7783831150598519, 0.7216501578721888, 0.7763651106980269, 0.7993249404412819, 0.7571697616651079, 0.7539458459181586, 0.7542480624032688, 0.4175350654542782, 0.5093674877081726, 0.5200624185869386, 0.31100879126637215, 0.31128088894130945, 0.4593849521101887, 0.42588328013772847, 0.39273126105472744, 0.5278609204651966, 0.12041829883633837, 0.13631214384918822, 0.15844930805962743, 0.14781099912923168, 0.15234039646861397, 0.12457630534328223, 0.1489272169316591, 0.11538905208548678, 0.1120747972457633, 0.11045773241279078, 0.09236867459601328, 0.0928532306304658, 0.11219154183302837, 0.1045592851001147, 0.14271137376448917, 0.12419168187284102, 0.14383315373872496, 0.09340339264362041, 0.9094009247703094, 0.9270225509955269, 0.936406840429973, 0.8930501868516835, 0.8687225074899187, 0.8429932507279944, 0.9094356937436904, 0.8985787187300165, 0.9226195221453658, 0.6022860433622997, 0.5811899772416425, 0.40846099656404034, 0.5884341002439828, 0.5233006488141941, 0.5205042529714703, 0.6139108282593614, 0.6004516408090783, 0.6266052372557014, 0.7911315883294008, 0.7006862354193877, 0.36934693421920994, 0.2698286939431723, 0.3492185033709052, 0.20708370782051666, 0.23452529464667637, 0.22251167875355327, 0.8095811529212023, 0.20914202953666705, 0.13893643806423284, 0.10991439430412575, 0.1755788008798509, 0.23549490267622963, 0.17337238208055827, 0.2206477191030327, 0.2490275278052353, 0.24295123121971474, 0.20071752418986166, 0.1220390495076299, 0.21129773552820463, 0.2743732334476433, 0.22315523473472376, 0.2517196542305311, 0.21590483306514097, 0.21537606597580938, 0.22500415368282756, 0.06095795817523686, 0.08971205588068465, 0.0068928083855954725, 0.061211552986365714, 9.999999999998899e-05, 0.09017927985796415, 0.11257000850048549, 0.010230157613252189, 0.10683439287026963, 0.19940532659353516, 0.09829316972353574, 0.1540727325204614, 0.0862943079411379, 0.12984784184917497, 0.10804398457332698, 0.10625099166743857, 0.13681935804830214, 0.12672332328727476, 0.10569304764280874, 0.053541153224444527, 0.2135371974468271, 0.08635459549137414, 0.1672714423182753, 0.08261338711253141, 0.09888550633081772, 0.057507540115515954, 0.17453195662117793, 0.17331794955366908, 0.10575005090622325, 0.16781841829122224, 0.14994620785646362, 0.2121509468592686, 0.06002637023740731, 0.14891336489411355, 0.0911431187651589, 0.07696563678256774, 0.5149782243111912, 0.5438168808694642, 0.5157727835853689, 0.4966421660721281, 0.5393624588063852, 0.5793251944249116, 0.5899834893615177, 0.5217459468061665, 0.5267989262695438, 0.08317666206280228, 0.0990111713807712, 0.08810754663301346, 0.12010298576342393, 0.11912998687966248, 0.13098621989401782, 0.10950294523243898, 0.11929255121038151, 0.1282557309336928, 0.24924503211159887, 0.16202379022971125, 0.296819015972261, 0.21161355096498125, 0.20995574564481512, 0.24801009483434788, 0.2235737155516625, 0.20628098810417272, 0.19702148149137744, 0.22952499541709526, 0.2768337820377835, 0.31203170226237487, 0.44147217274236605, 0.46615625561013296, 0.44642333508440846, 0.2321245263606324, 0.42918379287288666, 0.24758629363459417, 0.27996259856371475, 0.2501951671292084, 0.21650646879107116, 0.18862002726115512, 0.3133321077550191, 0.21740978433212998, 0.24014720717882843, 0.33758207953813213, 0.24476471270362343, 0.23011387157371332, 0.2521892976550375, 0.19616251210303304, 0.23614248066894072, 0.23233908484327048, 0.2188127232840238, 0.20968502568664205, 0.22673640120113903, 0.22655449360429958, 0.18527884150143237, 0.21282905705372723, 0.21625609471623353, 0.2357338992775877, 0.1872951750056684, 0.20944257250930265, 0.19399915650656652, 0.20357498738060043, 0.20276989108574528, 0.7734665962518757, 0.1774435928623661, 0.7757153803474452, 0.7201472765135705, 0.6765600724449633, 0.8362614503351026, 0.7617781373973124, 0.5082671457873398, 0.14807681460505606, 0.7091333783139446, 0.4817342693713704, 0.6160184051372029, 0.1602006460465043, 0.5602299475480624, 0.4443356940138957, 0.6644264186642276, 0.6162870734083961, 0.6012016869885657, 0.19858991926401182, 0.1864408321601425, 0.1826411566822157, 0.20429700864509304, 0.18192377581652652, 0.1898330969376939, 0.1868055034904048, 0.1929389108164764, 0.18271114404997602, 0.11031810036454115, 0.12272866066554966, 0.09198377995997598, 0.08835431009470196, 0.08194016775666824, 0.08500188819236176, 0.11457864013873298, 0.12854995969389527, 0.08582096679365692]}, "mutation_prompt": null}
{"id": "3e99adbb-6f73-47af-953f-883e68ebac87", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                # Modified line for adaptive inertia weight\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.97 + 0.01 * (self.evaluations / self.budget)  # Adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - (self.evaluations / self.budget)**1.5) * decay_factor # Nonlinear decay\n                social_coeff = social_coeff_base * ((self.evaluations / self.budget)**1.5) * decay_factor  # Nonlinear growth\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce nonlinear decay for cognitive and social coefficients to enhance convergence speed.", "configspace": "", "generation": 35, "fitness": 0.2787909431861116, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.22.", "error": "", "parent_id": "dd20383f-bb54-49f7-9730-99aacae8d76d", "metadata": {"aucs": [0.7664672705616266, 0.751650235743353, 0.7663742775466051, 0.7565392249836362, 0.7535322568796387, 0.7705304065860313, 0.7498403445672484, 0.7626097122811845, 0.7560661731613185, 0.23496680003804993, 0.0940260598465773, 0.4717790895247763, 0.5178191970468069, 0.5488156308982104, 0.43587992290121724, 0.29718206892994425, 0.561318760415614, 0.3615479507006488, 0.08826912262681708, 0.12496989258158031, 0.09357301634044801, 0.11925264289502902, 0.09894705782738222, 0.12578637430414363, 0.11156848742710823, 0.13724982345050196, 0.13890812583358148, 0.10646772072263089, 0.07972208016005933, 0.10603188737142322, 0.1304919133513649, 0.12319616041915238, 0.0895389966772957, 0.10391604221867379, 0.12545271553183102, 0.09255084570614691, 0.8273104315644355, 0.8358125164141048, 0.8736155363985506, 0.5653198639819883, 0.7804649202389417, 0.6494028092013842, 0.8154428829255727, 0.7929180989427564, 0.8994256788133003, 0.6057995026746579, 0.507792779130295, 0.5686925967742581, 0.5568460439334341, 0.58662310681394, 0.6239772302332085, 0.5775382456640572, 0.5702156139368151, 0.5580958195054375, 0.6601019539415813, 0.7071286395994171, 0.25966923704544975, 0.25910640738611623, 0.31888224058906334, 0.2447978499221073, 0.28752431468953144, 0.16085047063632996, 0.3027405278000941, 0.2826546669405158, 0.10437931509930554, 0.24788858681450654, 0.20912526299396317, 0.21653387792515555, 0.12756812137459528, 0.1433431403147155, 0.2551508638449571, 0.15967672104872088, 0.12648129844375966, 0.18588363062350965, 0.15865227870496568, 0.11689148459269894, 0.17529782030543117, 0.11945936778794697, 0.24129529685509277, 0.1607086473463718, 0.10878495500955976, 0.06345576810429288, 9.999999999998899e-05, 0.0456688016608392, 0.07964415515857803, 0.04478063736345972, 0.01003133717154947, 0.04641807558810107, 9.999999999998899e-05, 0.02329769560125028, 0.11741108439056203, 0.07575381227769773, 0.13004427918400274, 0.0860934860028838, 0.09033209330725644, 0.10709755171121538, 0.12697283039344343, 0.12618632001599495, 0.10647876825505609, 0.09465633892573566, 0.029132591775446248, 0.1142670024557012, 0.08660707024565695, 0.0788887288855602, 0.20880925802363315, 0.15748672408167608, 0.1418938841422156, 0.12833544621059423, 0.22822622896395628, 0.08800632316429091, 0.2766401030771848, 0.08233673054912849, 0.10423494266736688, 0.0714351160419846, 0.11674457384884973, 0.08503826591268848, 0.07296595838831321, 0.4996187016111293, 0.5125771427299759, 0.5019784661887308, 0.573660545578687, 0.5062650798567935, 0.5279706433144771, 0.5126575764431838, 0.5169529064792152, 0.5503002342036344, 0.08511082845372675, 0.10397613012994988, 0.07332981529261873, 0.12850925499609622, 0.07527795004389648, 0.08798511689296606, 0.11872817130180979, 0.1012124482708674, 0.09051320492478732, 0.18109461643212, 0.148283693228775, 0.17130056067272614, 0.21401661938540884, 0.25768836256858585, 0.16510072299198508, 0.2234413595762912, 0.1710726988398784, 0.21912377140556172, 0.21559784257415493, 0.3638236932976885, 0.28151393222457854, 0.22573415865695312, 0.2421307823567299, 0.3487316306117576, 0.36108771708079945, 0.32938016406677884, 0.22283155781199215, 0.13651866175705618, 0.1821732535397742, 0.19474489022281272, 0.17115586046345266, 0.21108051185183063, 0.2429975555024837, 0.20416328205662304, 0.22381988010611664, 0.2170239938226748, 0.20782313922261364, 0.2245554289289141, 0.21796629225679653, 0.21531407153537763, 0.20424653074381893, 0.22020588841789823, 0.1983939835073142, 0.21165788267316576, 0.18583261488231329, 0.1818767318416521, 0.17469321435932705, 0.17432325946897886, 0.20448240108109217, 0.18195280060881525, 0.21683575935199828, 0.44208040970989637, 0.20183706006600433, 0.18195023970407054, 0.5498047244465494, 0.16664497862833105, 0.1812729875520851, 0.5585722329690712, 0.19173357680633984, 0.7029427168962873, 0.5690902547225043, 0.16050627841935805, 0.65802354320707, 0.5412237874429802, 0.709849918786603, 0.4030671500283328, 0.19637251879845496, 0.5351846944902481, 0.5519974307678843, 0.3576218360294272, 0.4204984880332525, 0.3481304368103225, 0.188063346488054, 0.19051140709537717, 0.2095164553326445, 0.20009966866680584, 0.20038840514789713, 0.18897836651328292, 0.18574039784789387, 0.17880795072023925, 0.19652632882989496, 0.060641401871714185, 0.0881070824659157, 0.08894357302956646, 0.07678514374317025, 0.08249427304164691, 0.11648859220192787, 0.12482406433451265, 0.0854078361838414, 0.08141725528600297]}, "mutation_prompt": null}
{"id": "bcb9126a-444d-473d-8795-b8d8ec85090c", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        chaotic_sequence = np.random.rand(population_size, self.dim)  # Chaotic sequence initialization\n        \n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                # Modified line for adaptive inertia weight\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.97 + 0.01 * (self.evaluations / self.budget)  # Adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * chaotic_sequence[i] * (global_best_position - swarm[i]))  # Use chaotic sequence\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Improve exploration by introducing chaotic sequences to update velocities in PSO.", "configspace": "", "generation": 36, "fitness": 0.2909752176798673, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.23.", "error": "", "parent_id": "dd20383f-bb54-49f7-9730-99aacae8d76d", "metadata": {"aucs": [0.7606854978982168, 0.7747159467593214, 0.7771345888587519, 0.7704151127742495, 0.7793528674541218, 0.7814955797509221, 0.7672549736740577, 0.7543408278674937, 0.7707053581956113, 0.4610930303447537, 0.449194056006194, 0.4958485949637902, 0.5346529891811769, 0.4972634594952505, 0.5347157630728334, 0.5146594167327521, 0.4788201710659963, 0.50165526504901, 0.10247632720972866, 0.15783201421583892, 0.1292037718725092, 0.1405768175081734, 0.11279663056771694, 0.12537869543485558, 0.1287823519621063, 0.11294642632393603, 0.19452703516666392, 0.1066172181376358, 0.07676774945950315, 0.08826004556845068, 0.10068980149076923, 0.1512628737825067, 0.11625696370710703, 0.09594268993550137, 0.12996842580998147, 0.09908088219278, 0.9294145131081698, 0.9227088528098563, 0.926968750756459, 0.9004679007712929, 0.8847629227166791, 0.9003367876876326, 0.9280265637652761, 0.890111410064376, 0.8993926632060174, 0.32261251383808565, 0.49521849428534614, 0.35850420066372335, 0.40607650523397154, 0.42017562221898885, 0.5512955563427506, 0.4492423958652536, 0.37506644419578294, 0.5444904392532932, 0.3465371203553802, 0.6272447760394954, 0.20687031257742317, 0.20965271766272164, 0.679359728890303, 0.18503646636006377, 0.3083725281609573, 0.17136162453833637, 0.7700325948608575, 0.2612016759664707, 0.14728054302913063, 0.15406054960571058, 0.17104202043651895, 0.16238792704603056, 0.16696399150251695, 0.17629155753761971, 0.30102161909906455, 0.218956977764453, 0.12476231781950442, 0.12035717114311406, 0.221847170579901, 0.18856064412670304, 0.15976162931515026, 0.16228683084218265, 0.1738370668115069, 0.20828310325861632, 0.22235562961271726, 0.03836627602521059, 0.0539231897387894, 0.0954495922986287, 0.032848022778527275, 0.06488671287291947, 0.00682284434722058, 0.005352700851858794, 0.036581339510593947, 0.06782143200157043, 0.16833893821760193, 0.1197780969236375, 0.13405898667455607, 0.08907247722083067, 0.1481952947234273, 0.0727291039673259, 0.12396152042029918, 0.17162979292446867, 0.08532553016962541, 0.07688155909730943, 0.029329178284388746, 0.07712953592072536, 0.1275264118363173, 0.08377812215001812, 0.08275105229685065, 0.07985858528790135, 0.07937481013285141, 0.12571512591122425, 0.14799822670127594, 0.05223861460877521, 0.09764278744219568, 0.05620211823806731, 0.15055418361763373, 0.19532312177928512, 0.11227841715151954, 0.07906241666640468, 0.07894474070225022, 0.47632144138018717, 0.47854798863317505, 0.49506516524149824, 0.49181285796664564, 0.5048343136726645, 0.5263220449093869, 0.45838823762386605, 0.49533513962374376, 0.5296879877377153, 0.09111646712637178, 0.08459429887897274, 0.09032593064461303, 0.10028533485925584, 0.0841348632041854, 0.1357322085146785, 0.12007250486793453, 0.10635076987521552, 0.10824193514438973, 0.15743983766281744, 0.18035816359004075, 0.22377971297203247, 0.1755595149566339, 0.17570016218228524, 0.2646165004327038, 0.1263740592507413, 0.2157039006299809, 0.17813725618091902, 0.22200837040933685, 0.25371692517243505, 0.3325905534074227, 0.32112208257781794, 0.2979432652887518, 0.34352901416164994, 0.2808143556754785, 0.449154067762761, 0.39165253111152853, 0.21381811960820707, 0.20796834429060385, 0.2037822814148923, 0.19835097086534448, 0.20998726325351202, 0.23883216869831003, 0.17504773608665514, 0.21454313664515956, 0.20284816938996175, 0.23505935753426088, 0.22745842907593883, 0.19217767033972188, 0.20798081590328976, 0.204591490430726, 0.2010737469410604, 0.21662632924082004, 0.21362027732256827, 0.24784173414538258, 0.18841680442730235, 0.18569133151906603, 0.23126079665468247, 0.44728415388938325, 0.203783866686982, 0.6362802159907802, 0.18873747720630352, 0.19108848299113756, 0.18114702428660434, 0.17956594894270894, 0.1657025953722514, 0.1461601530993334, 0.7281526622112089, 0.6330928947437111, 0.6800586267229667, 0.17010542988055555, 0.6718283415384254, 0.764985856105914, 0.41719226448426294, 0.6120356988555755, 0.5974913120300238, 0.561305746586048, 0.38180953536001494, 0.34013473399745453, 0.3364273325264999, 0.5268185486913421, 0.367595487912453, 0.18989706376014814, 0.19186612431654282, 0.19485740139588292, 0.18874463566053834, 0.1841673003507569, 0.17985392551244528, 0.19915525817601565, 0.19498142574118826, 0.20163589315643404, 0.08026368076531021, 0.11384286234121388, 0.08059012012489442, 0.09290185111943716, 0.09574017247908972, 0.10954170857706924, 0.08983385349905038, 0.08388378628762871, 0.09405891765068064]}, "mutation_prompt": null}
{"id": "4ee4cfcb-ad6e-4e1a-92dd-4a7355973917", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            diversity = np.mean(np.std(swarm, axis=0))  # Calculate population diversity\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.97 + 0.01 * (self.evaluations / self.budget)\n                cognitive_coeff = cognitive_coeff_base * (1 - diversity) * decay_factor  # Adaptive cognitive coefficient\n                social_coeff = social_coeff_base * diversity * decay_factor  # Adaptive social coefficient\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce adaptive cognitive and social coefficients based on population diversity to enhance convergence.", "configspace": "", "generation": 37, "fitness": 0.1642084284909064, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.20.", "error": "", "parent_id": "dd20383f-bb54-49f7-9730-99aacae8d76d", "metadata": {"aucs": [0.41830568669938406, 0.43806772998639487, 0.41591391609312256, 0.18288515221147306, 0.17697045553844415, 0.5302562381593691, 0.13911618813955684, 0.1409445015786388, 0.16751019268056566, 9.999999999998899e-05, 0.0197450910303838, 9.999999999998899e-05, 9.999999999998899e-05, 0.12896559804369023, 9.999999999998899e-05, 9.999999999998899e-05, 0.016336456575788416, 9.999999999998899e-05, 0.12671381326034858, 0.08768455404281517, 0.06818134454448666, 0.07306996006084776, 0.09014310541948489, 0.054610607254027, 0.043658628041315595, 0.11524317678643925, 0.0912598252350676, 0.07604435579187507, 0.03283526992401242, 0.04598839468987992, 0.1189993227771251, 0.08110143249451118, 0.019988051775630122, 0.0930131382285746, 0.04509369227792526, 0.09094308655305194, 0.9903709472646564, 0.9721628825231713, 0.990778728179938, 0.9904467620804982, 0.9899085652463236, 0.9853230048396956, 0.9905787892799626, 0.9886752926411541, 0.9901553057767306, 0.2996661906439917, 0.05243371013526721, 9.999999999998899e-05, 0.039251162740349343, 0.020696633452819135, 0.1287571705966135, 0.07917695300924898, 0.049048275655072526, 0.08584344251695597, 0.1943947232177815, 0.18494898396458526, 0.15786502483066323, 0.18832478063466473, 0.11235008174465622, 0.16832679429499242, 0.08187037657067342, 0.12025216111295012, 0.08239479082343315, 0.10921609792697995, 0.08126476363179314, 0.06320711705787785, 9.999999999998899e-05, 0.07457865735851488, 0.09868562268423464, 9.999999999998899e-05, 0.09434579858627767, 0.1007792176504374, 0.21499297267943307, 0.009449548285543785, 0.009135087042036694, 0.09007103233446201, 0.09118941765092148, 0.10088411947587006, 0.24537872461335264, 0.09370252058674633, 0.07124705411266818, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027288323752229227, 9.999999999998899e-05, 9.999999999998899e-05, 0.0384771445283173, 0.022943899612825613, 0.021835913271992413, 0.0634020745293743, 9.999999999998899e-05, 9.999999999998899e-05, 0.016697732212316407, 0.034413773210383414, 0.03470262370491761, 9.999999999998899e-05, 9.999999999998899e-05, 0.024471672520454568, 0.053080915789959326, 9.999999999998899e-05, 0.03885756896895032, 0.05024396784918006, 0.10731770225221937, 0.04682492711129782, 0.09921705828214666, 9.999999999998899e-05, 0.08929240436622732, 0.0042430815908430786, 9.999999999998899e-05, 0.004678330660958685, 0.04071899963515402, 0.005857035433376012, 0.05817555772078964, 0.34344737444695006, 0.3208382756082687, 0.4071825464088995, 0.20058810114451442, 0.34756924716756943, 0.21370795603020565, 0.3930302854369898, 0.3920736021097102, 0.3479353984043323, 0.04990973748638883, 0.060856336002561906, 0.06732077989528895, 0.08679778817629269, 0.026550451598708613, 0.09166269363652724, 0.05037274651400625, 0.12336398113539182, 0.14011888556878238, 0.20810892213380838, 0.16009916430157722, 0.18298529310654543, 0.14180900986186373, 0.2747206338714926, 0.13854562518723434, 0.1520163739559428, 0.19253458017590352, 0.1420804353466919, 0.215503640719661, 0.22289212985232287, 0.2839909214126001, 0.1739460372449323, 0.14388543326877257, 0.13769204927439804, 0.28662599488929263, 0.26240128269151186, 0.17954767384639148, 0.17174118604966648, 0.06766249165076166, 0.16116937558792377, 0.14833295225852194, 0.1594587754436736, 0.159950794164754, 0.2120917498175866, 0.2351137309467919, 0.10604208082055044, 0.18468395595055276, 0.134673618688386, 0.20096948691981187, 0.19330988304347096, 0.152179923225926, 0.1517204479484755, 0.1753382020750962, 0.16624669702982975, 0.19315773549803916, 0.15039237364859015, 0.15494347131274389, 0.15469943781842466, 0.1792041353405993, 0.10431230610110598, 0.1489720917687366, 0.15794353195796806, 0.162170843327768, 0.13929172647959365, 0.3294490443809819, 0.5873247943149471, 0.11456732082020937, 0.5888506680967769, 0.1815514121945403, 0.11077314426915164, 0.13726573153299015, 0.14619903668421974, 0.1420115966893729, 0.4728640098384037, 0.17865349841953226, 0.07166556126023149, 0.2473853006429082, 0.23056608357915132, 0.10249676976138, 0.1956035122453782, 0.1982758578449184, 0.18461291536220414, 0.18273516311715843, 0.21704742319924364, 0.19321654045647396, 0.19514294534210164, 0.14985080031131315, 0.21872146385857028, 0.19754442061074928, 0.1751311468438349, 0.1825445881579193, 0.05785157291435805, 0.04348162296377611, 0.0642734346859084, 0.052678726441805934, 0.07100968662688778, 0.053641837190600894, 0.0800610374718459, 0.0827789776545298, 0.07040904848858553]}, "mutation_prompt": null}
{"id": "82ee8282-3187-40c2-b38f-c07a1572407c", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.97 + 0.01 * (self.evaluations / self.budget)  # Adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Added line for adaptive velocity clamping\n                max_velocity = 0.5 * np.linalg.norm(global_best_position) \n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Implement an adaptive velocity clamping strategy based on the global best score.", "configspace": "", "generation": 38, "fitness": 0.3195483626056594, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "dd20383f-bb54-49f7-9730-99aacae8d76d", "metadata": {"aucs": [0.7534516312621488, 0.7615506338696301, 0.7900215512836071, 0.7520025273207782, 0.7705481084771196, 0.7680342450745197, 0.7664721483040895, 0.7655189311662309, 0.7629839135154749, 0.42135726346895086, 0.5034488980461562, 0.4570285832045451, 0.3983691825619933, 0.4456953733715572, 0.43898328354552085, 0.44322788949755243, 0.4727749829388256, 0.37252673190701424, 0.1267719912584978, 0.12506059342943132, 0.15764371463992377, 0.16493597843389074, 0.3570772676384094, 0.1487171150421649, 0.12622939886645868, 0.1323339672417796, 0.10243398078061039, 0.0998887787303081, 0.10127424274326746, 0.09654346227388155, 0.09046744073417101, 0.1392977151882715, 0.12996341686511237, 0.10536011371882215, 0.14439613173520593, 0.08611191033651755, 0.9093727024092965, 0.9270222189617691, 0.9364090625338248, 0.8930524248528336, 0.8687244337919973, 0.8430066332572543, 0.9094393341160517, 0.8985812433514455, 0.9226226280771429, 0.609060810570544, 0.5987922967846995, 0.5514116042802639, 0.5432362762815497, 0.32560346679811913, 0.5883774104687893, 0.5865657379322525, 0.5960922813541903, 0.5773162246162009, 0.7696489190708917, 0.7841946164752857, 0.3709127056892242, 0.2698081934022022, 0.35422858030098026, 0.20164412210711746, 0.672824709394996, 0.2950681679187025, 0.7678265359955269, 0.229215146262167, 0.13813883134778593, 0.1211511647906256, 0.16587472953452487, 0.21717186505180497, 0.16067140884971742, 0.23268882567715043, 0.23679617334456793, 0.1851070661541343, 0.22309923631128914, 0.22121962087094504, 0.2050024738857612, 0.2358106568042585, 0.23986254922362227, 0.2549225789284637, 0.16835229366019866, 0.24126585218263485, 0.19382993846820484, 0.060265955398983384, 0.07701596975645264, 0.032414256081229165, 0.06755114137797447, 0.0007493055027579798, 0.07513416014676144, 0.07428633346198388, 0.035408230603635404, 0.09860492821322009, 0.153605580012123, 0.06535086385061928, 0.17188739993342783, 0.07570751368877715, 0.11669950953273367, 0.13193217159065718, 0.10775955864539866, 0.12307340008063239, 0.14859568437513504, 0.0949421060635659, 0.05745617282586968, 0.21074077492288423, 0.08178633272721614, 0.16558393314386344, 0.08313528060617159, 0.10136098348344835, 0.058503239847665145, 0.17804395713671495, 0.12749788671225792, 0.10668011547734879, 0.16739457563760485, 0.17849780687388372, 0.1930774147654275, 0.05640626718456809, 0.14442384810631825, 0.0904569302243835, 0.07605791098065728, 0.553839779431893, 0.49614350442441024, 0.5475269698681994, 0.5332272269752123, 0.5376701976126099, 0.5006135037552488, 0.5294955548404938, 0.5402430816776427, 0.47396482733971246, 0.10271396264828259, 0.10507177045923, 0.09113542589875634, 0.08986481148358993, 0.12703316121749553, 0.09667487931735963, 0.13518141973564413, 0.11750644247531694, 0.12847006071767297, 0.2230786820189271, 0.179727675324713, 0.26277751092071233, 0.21689489326867373, 0.24844131418281745, 0.2159488960749103, 0.24959937732386317, 0.16308999982836447, 0.2637732938892071, 0.22011813259028945, 0.4464228718472393, 0.4251310778807307, 0.37969040351672967, 0.2819707219830725, 0.33657757307293534, 0.36332758381689023, 0.40361532358338637, 0.2400886942323991, 0.21871607870057763, 0.28848272823572707, 0.21507971557830674, 0.1964072796278301, 0.28263238899944554, 0.30580347762799553, 0.22446348864604948, 0.3234900289324327, 0.23694971987661007, 0.22890811089400542, 0.21126424649003095, 0.24565093594773313, 0.23013970175105258, 0.22163274405191902, 0.20571084474309131, 0.22362752468815683, 0.2257394866264567, 0.22398214717100295, 0.1852497972798668, 0.21434230472261095, 0.212283664702274, 0.23296584067793014, 0.1828994975847985, 0.19099313336760515, 0.38347438069299455, 0.5081168485125549, 0.2027135365385525, 0.7771988098433442, 0.6649603932142307, 0.768193345400909, 0.7271106695821712, 0.7107983508885327, 0.8102032737124829, 0.7622635932327269, 0.6295666948055234, 0.14810673168999255, 0.5729163593121337, 0.46397926365924536, 0.49764409283483246, 0.4970466768304024, 0.4911405059028908, 0.4965272823974892, 0.5535116341450047, 0.5414180937212583, 0.5813926857105846, 0.20123937389897828, 0.1777407291165004, 0.18515517321513986, 0.17533966577863647, 0.19448162569769933, 0.19097284145801263, 0.18599677021189975, 0.2072630660780228, 0.2038771930487684, 0.08055045043481257, 0.11878367751003516, 0.08611292350301736, 0.08830821839468916, 0.08503302654986733, 0.09521335070615733, 0.1017537274975634, 0.11000435525059571, 0.08465709010024725]}, "mutation_prompt": null}
{"id": "ca1a7b8d-5f47-47d9-9d0f-9b4414a0e1b3", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.95 + 0.015 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                max_velocity = 0.5 * np.linalg.norm(global_best_position) \n\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Enhanced adaptive decay factor for velocity clamping to improve convergence stability.", "configspace": "", "generation": 39, "fitness": 0.3071300802770268, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.24.", "error": "", "parent_id": "82ee8282-3187-40c2-b38f-c07a1572407c", "metadata": {"aucs": [0.7781588172900006, 0.7681163670650117, 0.7842991210153915, 0.788034519862329, 0.7581354282751198, 0.7724455600746717, 0.7823029496626477, 0.768691642458474, 0.7587475207534522, 0.45046880117675714, 0.2903694788982355, 0.45365394817264404, 0.47629552050012913, 0.4874179081951061, 0.45066223763046176, 0.43028393737083503, 0.4411193531969454, 0.47190014187883966, 0.11398075320808165, 0.13019974928472233, 0.16318767218953611, 0.13849227056394464, 0.1353570111684952, 0.11471904627898677, 0.155460955376721, 0.11671618516164417, 0.15519883796268008, 0.08552758691962659, 0.10167007627604763, 0.09928450128013633, 0.08645227283178303, 0.09582805220794999, 0.10847552734957466, 0.10080694348957664, 0.12835283566826727, 0.12777596806650604, 0.9115038224099906, 0.9270665942004394, 0.9362112806517688, 0.8897228651739394, 0.865226150135211, 0.8355261362722972, 0.909724942611489, 0.8951732791968553, 0.92253339627814, 0.5115667150512306, 0.5882597723307637, 0.5503064336735944, 0.5850883897763829, 0.43341971724578576, 0.4975454222433786, 0.5964871513526975, 0.5716254008564254, 0.5852672875330699, 0.36607051521640965, 0.7685304690887599, 0.7386709549760552, 0.35361815063620794, 0.2656929816231349, 0.20151037475393463, 0.20946808638940295, 0.3129524220530999, 0.3392009650529796, 0.2795280949285309, 0.15941272659914008, 0.1113112492548558, 0.16767722655725414, 0.23918347003964613, 0.1575882874128154, 0.20590421664054825, 0.23448610755076393, 0.1821943084330413, 0.2409391962932126, 0.22890201709069247, 0.22115069616375094, 0.2526815285566185, 0.2301594408310429, 0.24166891423205739, 0.21772821950640664, 0.22960648517747573, 0.10691249264372504, 0.007825004061471241, 0.1621684494200687, 0.054490575223504645, 0.0934306658589974, 9.999999999998899e-05, 0.0652210570245999, 0.09930651586957262, 0.010278938243882485, 0.04746979140143359, 0.1869075231944859, 0.1421798355278826, 0.1387569683034584, 0.08265362977931168, 0.09403019050305461, 0.16121548709763667, 0.10207805824771166, 0.14527632815188773, 0.12323165566891725, 0.11857857515289338, 0.039919690920728, 0.12360330019481058, 0.07724134872487798, 0.09742084561155773, 0.06684994875663652, 0.08249814246759779, 0.06100171214336425, 0.15682570377064842, 0.16329981141101146, 0.09996359704537006, 0.12500172546635058, 0.08000872910602597, 0.1284184631099441, 0.07628873702056005, 0.28368020764118196, 0.07404240001499729, 0.07509800891818963, 0.5056036528051358, 0.5274695090477706, 0.5102045751211137, 0.5289997639268325, 0.5024423137756968, 0.5496562274437132, 0.5472778386250221, 0.5536205695751717, 0.5150087829727352, 0.08408649583986938, 0.08784050319141457, 0.13376233511817592, 0.13433601028252284, 0.10535939630164781, 0.12468836567740249, 0.1384258233241753, 0.13393091636825116, 0.11958184236825076, 0.16252954784885065, 0.26771241737550533, 0.17673749978025677, 0.2370190227078499, 0.1867814664475267, 0.19579513080784128, 0.20767222752657122, 0.20491178419955958, 0.2442117710048104, 0.38508328921049295, 0.40414248551606846, 0.3649029276083695, 0.29576217851494546, 0.3577974281202878, 0.3730310322695126, 0.21853863091315173, 0.4236928923126434, 0.23337982053708195, 0.2696466327273256, 0.2238144848002701, 0.27812402901842614, 0.3306002175576678, 0.27849026841592206, 0.20107640389165937, 0.20464246247838924, 0.24260248387964367, 0.18763588105497897, 0.21994573299859566, 0.19533551268638838, 0.23319966008325577, 0.22433049176164843, 0.1884897170508394, 0.21001880227753644, 0.2156719907569944, 0.21962932380003763, 0.21251970326612446, 0.21837454152423563, 0.22927551395742174, 0.225658845848682, 0.1778109515899201, 0.19454897274254823, 0.5051412931957382, 0.182641665058771, 0.19388418386155304, 0.6076065325057196, 0.7242546973078758, 0.18211532147000598, 0.18400874769459674, 0.7347126378605059, 0.7099800532667293, 0.7852401541992674, 0.16905627998860218, 0.6319140795032332, 0.14695010304546507, 0.5630747411976915, 0.6670803011162, 0.6009186240123396, 0.6436633013709339, 0.5120106497152703, 0.5005317093380417, 0.31867540362494406, 0.5171992693737744, 0.5887371061207098, 0.1799615393037347, 0.18808668963005648, 0.17907586608415382, 0.21371443827180736, 0.20926445433404228, 0.1996222954163248, 0.2240427448146206, 0.19753024960664212, 0.2178784216652443, 0.08646442509775865, 0.12013120465098637, 0.08292799779055005, 0.12954189055012544, 0.09367393212467434, 0.09825327191346644, 0.1281616315872498, 0.113939014971562, 0.09503584405111831]}, "mutation_prompt": null}
{"id": "51471933-738c-4efb-973e-6fa878853f43", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                # Adjusted line for adaptive inertia weight\n                inertia_weight = 0.9 - (0.9 - 0.5) * (personal_best_scores[i] - global_best_score) / abs(global_best_score)\n\n                decay_factor = 0.97 + 0.01 * (self.evaluations / self.budget)  # Adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                max_velocity = 0.5 * np.linalg.norm(global_best_position) \n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce adaptive inertia weight modification based on the convergence rate to improve convergence speed.", "configspace": "", "generation": 40, "fitness": 0.19850446332262298, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "82ee8282-3187-40c2-b38f-c07a1572407c", "metadata": {"aucs": [0.4845315990525394, 0.5532522463163656, 0.5346021650887747, 0.5076352083432825, 0.5319311062715633, 0.49805337179395237, 0.5217604520099006, 0.43365272816030187, 0.4355391651702545, 0.031603489986894995, 0.03577502694289181, 0.1475550958762255, 0.06606244548866302, 0.023312278270154252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11083061268503602, 0.10807440383921407, 0.10545686210068783, 0.14163420041667962, 0.1313322150084827, 0.1210086336618782, 0.13536858812216035, 0.09341446353532279, 0.12341662270758758, 0.0983525317493984, 0.10937366044766983, 0.08496440184587173, 0.10161699463222906, 0.09918812967079793, 0.08725183939947745, 0.10012821742655431, 0.13256865692773012, 0.0775478238038857, 0.8714787448281452, 0.8537626985963156, 0.4727533895931012, 0.8920252821404581, 0.8743590647188321, 0.8624233063175477, 0.8671925646630958, 0.8742066640149899, 0.8567955535210658, 0.20570151284011462, 0.1162164613594796, 0.06051067535725452, 0.1970583259152069, 0.24825030147821647, 0.13055510209580246, 0.08709964639171486, 0.20588392085406992, 9.999999999998899e-05, 0.47792566329975716, 0.22093128921085148, 0.3033383565489287, 0.21283869809563916, 0.2907043455838123, 0.18780776739191196, 0.146706941387312, 0.16058859527497205, 0.20803172374840384, 0.1317835909200068, 0.08382326430971665, 0.1214625343026915, 0.039842614770831064, 0.14389912821451778, 0.12601566872456837, 0.16668795468031805, 0.07731970073186645, 0.11496426334257726, 0.19102233061482277, 0.1470369702570148, 0.03311311906829373, 0.09188263630763427, 0.07594767545636227, 0.044742097352672094, 0.11739933249301504, 0.11170013597073025, 0.11820660675955408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006716792329883869, 0.07582797739770353, 0.06838327666369093, 0.06575065399294377, 0.04769651417432941, 0.036065895382373814, 0.02139571506555671, 0.06482794320577012, 0.030972510838060185, 0.04869931411052242, 0.014838337059274287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05027459352724184, 9.999999999998899e-05, 0.10000446451149869, 0.0003735359969757601, 0.08341193350105858, 0.09776325781385364, 0.12744942147277383, 0.10846305115694654, 0.07173773862613486, 0.024863965090901052, 0.08341550883383753, 0.058373187598108944, 0.07142847507442895, 0.4325062026434914, 0.43961796329920455, 0.4431462521879672, 0.4181891012186557, 0.39852051207952177, 0.45802166180027015, 0.3851865723557566, 0.43838830919622174, 0.4304164947913043, 0.11054666150858339, 0.06751296814669472, 0.08709091477199815, 0.0903843210589963, 0.09756112571820574, 0.11301682657623602, 0.09697322104673822, 0.08789515510817292, 0.09454772630809871, 0.18532140000703579, 0.179242487050841, 0.16337733938286325, 0.1487689295604494, 0.2814303498196442, 0.20786398697778863, 0.18395136940233536, 0.18484357284014918, 0.20939935631734108, 0.2866718462274984, 0.2737918791587457, 0.2923584419691655, 0.23591010981263538, 0.29139895967665086, 0.24463260362911232, 0.22161331812341878, 0.31755849124171953, 0.2233050734099209, 0.17056884333442035, 0.16049317390762463, 0.21292986847949447, 0.19883607874612186, 0.1739346897577525, 0.1967663156389824, 0.17827334899916225, 0.21414862715711402, 0.1751323301291393, 0.2241468935140314, 0.22495909534107716, 0.2479481892191221, 0.22240627157985815, 0.21302053537852328, 0.24211089273935738, 0.2143341839874413, 0.22916094120625452, 0.20202177260591903, 0.19815635059163494, 0.16300265309211504, 0.18522126884391055, 0.1744426367909615, 0.18531425091682774, 0.16973680764929977, 0.1616038365484459, 0.18879324246482887, 0.17272316512358266, 0.40424897260281445, 0.16656462625375612, 0.1493504839334331, 0.3415364758243189, 0.17275407874593185, 0.16051231803379762, 0.1621487028889298, 0.4230085696892095, 0.14649270282938032, 0.4183543635257597, 0.30469698942557666, 0.3319958460231365, 0.31294781339196576, 0.3661515413476537, 0.4370316791729272, 0.3141657759690566, 0.45097287984251044, 0.2932783748056932, 0.19367986426040384, 0.194237851392715, 0.17842519764113385, 0.17937325121742198, 0.22287349954160407, 0.17472709616006155, 0.1796823979952794, 0.19394460163627558, 0.17348742926962402, 0.07139006226011646, 0.07461101881315313, 0.07383142679959875, 0.08497592699629009, 0.095761409955471, 0.09346717496706913, 0.10317062514489839, 0.08321339582714005, 0.08547147875242822]}, "mutation_prompt": null}
{"id": "a9eb0f13-d809-495d-8ab0-6bad54115b08", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.6 * (self.evaluations / self.budget)  # Adjusted inertia weight\n                \n                decay_factor = 0.97 + 0.01 * (self.evaluations / self.budget)  # Adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                max_velocity = 0.5 * np.linalg.norm(global_best_position) \n\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce dynamic inertia weight reduction for improved convergence speed.", "configspace": "", "generation": 41, "fitness": 0.30391093084376175, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "82ee8282-3187-40c2-b38f-c07a1572407c", "metadata": {"aucs": [0.8046008549339773, 0.7953988085607607, 0.8035368932055319, 0.795431436850223, 0.7957683726616535, 0.7917978182295806, 0.7974158753414694, 0.794073157797238, 0.7959028046934818, 0.2480795980961772, 0.5371221586933639, 0.32111135245370437, 0.15082948782483596, 0.5768126548245449, 0.5089041394910329, 0.5815477562783757, 0.5678248489451373, 0.48878882293572756, 0.11261241910084352, 0.13155786399105585, 0.13526131274906927, 0.131749587557895, 0.1408512221925604, 0.11331634468328389, 0.1544849402216678, 0.14269230187403992, 0.16431522494681394, 0.12419038451252418, 0.09598816370693852, 0.09673327607980498, 0.1462265314516935, 0.11506944734490576, 0.16001487947287896, 0.08736896315946885, 0.1396388245887945, 0.11122303841626213, 0.9072964159627509, 0.9225268136156197, 0.9360354216544859, 0.8851833566595003, 0.8565410362651963, 0.8262250746764913, 0.9009845344610542, 0.8853697866444346, 0.9188732229377016, 0.609736732735661, 0.6354933824717853, 0.4242456885345073, 0.6649046351174976, 0.5238965953618206, 0.4990721675320797, 0.6464445100544278, 0.5440361473095237, 0.4405067099439026, 0.2219057075284473, 0.36449395898763737, 0.7377709996861854, 0.7486761494365552, 0.8223804323855134, 0.20510016965144606, 0.23067903836176207, 0.21990339321556418, 0.23036864685511393, 0.19990174824285756, 0.14385536605184757, 0.11544671852787292, 0.1759168907092078, 0.18787354062920758, 0.10941909098451885, 0.16398341750567613, 0.22235319918872765, 0.16861908183721408, 0.168805902595213, 0.18611448072430914, 0.19058614500436344, 0.20567689487237129, 0.16307213091224626, 0.16596075242993524, 0.16075561502063518, 0.18512499420745243, 0.1530644618632352, 0.09220438384751073, 0.07745806746472372, 0.038651517805527114, 0.05943993179785634, 0.018215910392891832, 0.029851548657344074, 0.17135295051090615, 0.03488596493724616, 0.04531878709947501, 0.12877006168908178, 0.09497926574288362, 0.13301198599062414, 0.07582963475491211, 0.09552285604070099, 0.10843950101699062, 0.16090105394337662, 0.1460712420916509, 0.12773572109359144, 0.15055091074586358, 0.07746174028580521, 0.28917273913624786, 0.09057249559275404, 0.2153836889206716, 0.08645548161854144, 0.29517367563215025, 0.06136182518406186, 0.16322879676604318, 0.16162492427586017, 0.10937434629108089, 0.1855678814510896, 0.07691802097846212, 0.12986504418665135, 0.061300663282068846, 0.10583279565105508, 0.09100842375550144, 0.07743165997571921, 0.5840871232617157, 0.5731631174667536, 0.4938531926439027, 0.51701333896512, 0.5039735071380896, 0.5217268968895398, 0.524931972710204, 0.5371075676126809, 0.5363278270481062, 0.10984593856901503, 0.11906740331990606, 0.10687252862853058, 0.09034001256529733, 0.10856691715354772, 0.10129845453559227, 0.0861706647319681, 0.14385608180479226, 0.11670040594500242, 0.2236738713956723, 0.1974061100529988, 0.16553889546648426, 0.3176222559380668, 0.23425434749957308, 0.15615176964123856, 0.1639859010068463, 0.1579606341804336, 0.1923022357328228, 0.514322981205209, 0.2683531462062346, 0.4451640947172921, 0.3906786451195722, 0.362231891415814, 0.32363767170331403, 0.22852735715912176, 0.45821463685406283, 0.3077001775694195, 0.2878838802324093, 0.25014168186879593, 0.21968235808052672, 0.23128400811357774, 0.27181926157999037, 0.2717610426688236, 0.19723798077755117, 0.25483832524868266, 0.2034042412399394, 0.2306488135558591, 0.24137162151923708, 0.21729499279541653, 0.20884593376747018, 0.20790022797039565, 0.20882196587198498, 0.21653822207769058, 0.22318941495023703, 0.21842064534940075, 0.19120355014003698, 0.2346273512476108, 0.17853825353474784, 0.20212835358087777, 0.19506176799764596, 0.18442985189485384, 0.18691544190273035, 0.19009846610242742, 0.2259829285608651, 0.7268600862248245, 0.16713242676610685, 0.8009174316308532, 0.7637004177967904, 0.7449523863555374, 0.8422046128741816, 0.16464226922689107, 0.5894821248398229, 0.1483773731559488, 0.7572831883225218, 0.43565763651933254, 0.4458557296438359, 0.4608357914945844, 0.35420897428458675, 0.45901288593996226, 0.3681351377639559, 0.15473508092194133, 0.3873034786185524, 0.18457279689214212, 0.18329962997588067, 0.2111401501025728, 0.19937655891040773, 0.19845537189048168, 0.1860878304539888, 0.20375636033293443, 0.2284260091651935, 0.19083769758703506, 0.07243729808099675, 0.07840034221215098, 0.11206721474069814, 0.08811566810209259, 0.0930806357227828, 0.08430805344271974, 0.1266949852133784, 0.10994721946241082, 0.08941182527292635]}, "mutation_prompt": null}
{"id": "b3e30926-e937-426d-8ef9-4fb8dbf279dd", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            # Adjust population size based on evaluations\n            population_size = int(min(50, self.budget // (10 + 2 * (self.evaluations // (self.budget // 10)))))\n\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.97 + 0.01 * (self.evaluations / self.budget)  # Adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Added line for adaptive velocity clamping\n                max_velocity = 0.5 * np.linalg.norm(global_best_position) \n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce a dynamic population size adjustment to balance exploration-exploitation over time.", "configspace": "", "generation": 42, "fitness": 0.3195483626056594, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "82ee8282-3187-40c2-b38f-c07a1572407c", "metadata": {"aucs": [0.7534516312621488, 0.7615506338696301, 0.7900215512836071, 0.7520025273207782, 0.7705481084771196, 0.7680342450745197, 0.7664721483040895, 0.7655189311662309, 0.7629839135154749, 0.42135726346895086, 0.5034488980461562, 0.4570285832045451, 0.3983691825619933, 0.4456953733715572, 0.43898328354552085, 0.44322788949755243, 0.4727749829388256, 0.37252673190701424, 0.1267719912584978, 0.12506059342943132, 0.15764371463992377, 0.16493597843389074, 0.3570772676384094, 0.1487171150421649, 0.12622939886645868, 0.1323339672417796, 0.10243398078061039, 0.0998887787303081, 0.10127424274326746, 0.09654346227388155, 0.09046744073417101, 0.1392977151882715, 0.12996341686511237, 0.10536011371882215, 0.14439613173520593, 0.08611191033651755, 0.9093727024092965, 0.9270222189617691, 0.9364090625338248, 0.8930524248528336, 0.8687244337919973, 0.8430066332572543, 0.9094393341160517, 0.8985812433514455, 0.9226226280771429, 0.609060810570544, 0.5987922967846995, 0.5514116042802639, 0.5432362762815497, 0.32560346679811913, 0.5883774104687893, 0.5865657379322525, 0.5960922813541903, 0.5773162246162009, 0.7696489190708917, 0.7841946164752857, 0.3709127056892242, 0.2698081934022022, 0.35422858030098026, 0.20164412210711746, 0.672824709394996, 0.2950681679187025, 0.7678265359955269, 0.229215146262167, 0.13813883134778593, 0.1211511647906256, 0.16587472953452487, 0.21717186505180497, 0.16067140884971742, 0.23268882567715043, 0.23679617334456793, 0.1851070661541343, 0.22309923631128914, 0.22121962087094504, 0.2050024738857612, 0.2358106568042585, 0.23986254922362227, 0.2549225789284637, 0.16835229366019866, 0.24126585218263485, 0.19382993846820484, 0.060265955398983384, 0.07701596975645264, 0.032414256081229165, 0.06755114137797447, 0.0007493055027579798, 0.07513416014676144, 0.07428633346198388, 0.035408230603635404, 0.09860492821322009, 0.153605580012123, 0.06535086385061928, 0.17188739993342783, 0.07570751368877715, 0.11669950953273367, 0.13193217159065718, 0.10775955864539866, 0.12307340008063239, 0.14859568437513504, 0.0949421060635659, 0.05745617282586968, 0.21074077492288423, 0.08178633272721614, 0.16558393314386344, 0.08313528060617159, 0.10136098348344835, 0.058503239847665145, 0.17804395713671495, 0.12749788671225792, 0.10668011547734879, 0.16739457563760485, 0.17849780687388372, 0.1930774147654275, 0.05640626718456809, 0.14442384810631825, 0.0904569302243835, 0.07605791098065728, 0.553839779431893, 0.49614350442441024, 0.5475269698681994, 0.5332272269752123, 0.5376701976126099, 0.5006135037552488, 0.5294955548404938, 0.5402430816776427, 0.47396482733971246, 0.10271396264828259, 0.10507177045923, 0.09113542589875634, 0.08986481148358993, 0.12703316121749553, 0.09667487931735963, 0.13518141973564413, 0.11750644247531694, 0.12847006071767297, 0.2230786820189271, 0.179727675324713, 0.26277751092071233, 0.21689489326867373, 0.24844131418281745, 0.2159488960749103, 0.24959937732386317, 0.16308999982836447, 0.2637732938892071, 0.22011813259028945, 0.4464228718472393, 0.4251310778807307, 0.37969040351672967, 0.2819707219830725, 0.33657757307293534, 0.36332758381689023, 0.40361532358338637, 0.2400886942323991, 0.21871607870057763, 0.28848272823572707, 0.21507971557830674, 0.1964072796278301, 0.28263238899944554, 0.30580347762799553, 0.22446348864604948, 0.3234900289324327, 0.23694971987661007, 0.22890811089400542, 0.21126424649003095, 0.24565093594773313, 0.23013970175105258, 0.22163274405191902, 0.20571084474309131, 0.22362752468815683, 0.2257394866264567, 0.22398214717100295, 0.1852497972798668, 0.21434230472261095, 0.212283664702274, 0.23296584067793014, 0.1828994975847985, 0.19099313336760515, 0.38347438069299455, 0.5081168485125549, 0.2027135365385525, 0.7771988098433442, 0.6649603932142307, 0.768193345400909, 0.7271106695821712, 0.7107983508885327, 0.8102032737124829, 0.7622635932327269, 0.6295666948055234, 0.14810673168999255, 0.5729163593121337, 0.46397926365924536, 0.49764409283483246, 0.4970466768304024, 0.4911405059028908, 0.4965272823974892, 0.5535116341450047, 0.5414180937212583, 0.5813926857105846, 0.20123937389897828, 0.1777407291165004, 0.18515517321513986, 0.17533966577863647, 0.19448162569769933, 0.19097284145801263, 0.18599677021189975, 0.2072630660780228, 0.2038771930487684, 0.08055045043481257, 0.11878367751003516, 0.08611292350301736, 0.08830821839468916, 0.08503302654986733, 0.09521335070615733, 0.1017537274975634, 0.11000435525059571, 0.08465709010024725]}, "mutation_prompt": null}
{"id": "beb7aabc-7f68-44c6-bcd7-985b0a09ee29", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.5 * (self.evaluations / self.budget)  # Slightly increased decay\n\n                decay_factor = 0.97 + 0.01 * (self.evaluations / self.budget)\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Adjusted adaptive velocity clamping\n                max_velocity = 0.6 * np.linalg.norm(global_best_position) \n\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Enhance convergence by fine-tuning velocity clamping and inertia weight.", "configspace": "", "generation": 43, "fitness": 0.31011751258841197, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.24.", "error": "", "parent_id": "82ee8282-3187-40c2-b38f-c07a1572407c", "metadata": {"aucs": [0.7890101524551658, 0.7873523947094327, 0.7972742465586757, 0.7793054877118262, 0.7471350199004303, 0.7930199024626368, 0.7835156552178129, 0.7904860539382341, 0.7791653330010957, 0.512052511639745, 0.4967097212286318, 0.5624626044214868, 0.26605391442843584, 0.52947265861584, 0.5625453464424957, 0.3931498868814082, 0.5069098768837983, 0.5323697668975977, 0.1427062384650093, 0.1264821422489838, 0.13835878697455917, 0.14298833531962285, 0.4562572060534773, 0.13140995027730018, 0.12901797299146256, 0.12132067137369706, 0.10963143116962204, 0.12980429066899546, 0.11886855250909989, 0.1015612600493987, 0.11623441166854975, 0.12106456500447771, 0.13325048134210082, 0.10151392643141244, 0.14495520617861368, 0.09405677325798678, 0.9083149559820964, 0.9267882665952997, 0.9361886754137464, 0.889084991829596, 0.861955953798569, 0.8309222984756275, 0.905602101850077, 0.8944930188417239, 0.9204172241626439, 0.5587282320261885, 0.48783050608965817, 0.6278645473543361, 0.6215434750409905, 0.5516362433430795, 0.42563381271925405, 0.5876620705980915, 0.6401565741588302, 0.6059014177423343, 0.3564117345081673, 0.3616606951969289, 0.7332202765405547, 0.27088377908614325, 0.7511616726753888, 0.2024916610559604, 0.2187363705506653, 0.27613787677523893, 0.22983765155087832, 0.24808259046068093, 0.10755759862192349, 0.10717544198146733, 0.1711335377875337, 0.21997650290141435, 0.14358355130273925, 0.18254199086211464, 0.2359206190817421, 0.16597726556555104, 0.1844211101068468, 0.19602687685181008, 0.1955292624177728, 0.24542521209112989, 0.17409866911859462, 0.2681402617774509, 0.2157090970025466, 0.13321832442451853, 0.1732024485240038, 0.04151119766907563, 0.15246896432489943, 0.16679378226125174, 0.06857456790138461, 9.999999999998899e-05, 0.007543397118379813, 0.06035860317236985, 0.005290634332693833, 0.003534266960547261, 0.2171678709879783, 0.15050240018017325, 0.13489839110448898, 0.07808742162819349, 0.10982785772976711, 0.056475350462163676, 0.15111239861340453, 0.12767477983169195, 0.11503917403103692, 0.1290767428195062, 0.10265290447979258, 0.22811737768450546, 0.06998163994931672, 0.12794266740685512, 0.06716242173738318, 0.09367821269622123, 0.06100450223975973, 0.1564025361123258, 0.22596766564059656, 0.10090889672524339, 0.18332991401683807, 0.1123285779948876, 0.17146219293171505, 0.07137817146128311, 0.16235201033986413, 0.07555153186788266, 0.07664807484787683, 0.510639743551147, 0.5356320438462068, 0.5251346603819593, 0.5003975232956791, 0.4967848507613085, 0.5612630386996413, 0.5410596959056366, 0.5248832519499674, 0.5446516218410868, 0.08621200147754049, 0.11573290413760096, 0.11105888398948849, 0.14410326025974685, 0.10787147347563475, 0.0799063506775094, 0.12627349792022668, 0.1601150389040895, 0.12152183246395942, 0.18558750031933757, 0.22350137707108575, 0.18804485041188845, 0.22959139927224526, 0.24002753536180732, 0.1677165556289445, 0.16092537428903064, 0.2012157599343528, 0.2137087527809911, 0.2770330331403845, 0.3193669906901816, 0.3196093558812979, 0.4033540962061497, 0.3121885927965732, 0.2948029418988525, 0.20028919317316773, 0.2998756888114361, 0.31509681677516754, 0.25533757888990294, 0.21831000094526654, 0.2030961467024608, 0.21692609683299757, 0.2734009405121699, 0.2347399941098689, 0.2200500002646797, 0.2820101203507517, 0.24423116103934994, 0.24290833160917003, 0.2510909660926768, 0.21163495124685128, 0.21284808108317455, 0.20653837552827659, 0.2106633771853228, 0.25135848038426634, 0.2514518357249983, 0.21371408000485148, 0.43240570040118154, 0.21310709072077483, 0.1972727228095068, 0.19914292308675263, 0.22701235440860168, 0.18264498636215598, 0.1927050446905857, 0.21159337681315582, 0.23065539386521905, 0.7313666623969255, 0.16686485561728692, 0.7406751313632591, 0.7869523167296063, 0.6720147124416491, 0.8505664087088709, 0.16723280209611657, 0.6386633495058712, 0.14739229721436586, 0.758695908409687, 0.546980131203692, 0.5311825064175668, 0.5424506235776245, 0.5014198817695095, 0.43092928946568543, 0.664145243552344, 0.4659238043183995, 0.6493967895532605, 0.2030824853120431, 0.1862520711409451, 0.18030426382833575, 0.17895143958274096, 0.1800051035965915, 0.17537156773696716, 0.2001945463660998, 0.2043795484337252, 0.19630455970543814, 0.08533898837754172, 0.07957663864865605, 0.08819749945019262, 0.122625020921033, 0.08344136300732186, 0.08523306820013421, 0.09125430921006572, 0.1178263088820769, 0.12279734322668612]}, "mutation_prompt": null}
{"id": "05a9431d-eb2d-4349-bce6-95dba194825d", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.uniform(0.5, 1.0, self.dim)  # Adjusted line for increased randomness\n                r2 = np.random.uniform(0.5, 1.0, self.dim)  # Adjusted line for increased randomness\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.97 + 0.01 * (self.evaluations / self.budget)  # Adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Added line for adaptive velocity clamping\n                max_velocity = 0.5 * np.linalg.norm(global_best_position) \n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Enhance exploration by adjusting the randomization factors.", "configspace": "", "generation": 44, "fitness": 0.29385553392449154, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.24.", "error": "", "parent_id": "82ee8282-3187-40c2-b38f-c07a1572407c", "metadata": {"aucs": [0.8191963906822395, 0.7750818764481734, 0.8225217327043388, 0.7998748023012718, 0.8142210433053003, 0.8119718759211298, 0.8031028631080508, 0.8058944643411086, 0.7909845003881217, 0.18141883665755254, 0.15285467915256234, 0.20944564533128396, 0.24001493245704797, 0.4043971753111024, 0.3884697499012615, 0.3973883081563667, 0.1840663676894787, 0.167075572095717, 0.09104915011834569, 0.11227485850128471, 0.08030543478174001, 0.08945372157901277, 0.14501717141263892, 0.11069917531727291, 0.09518921955887016, 0.0909019318415849, 0.16315915620929378, 0.08832861547989812, 0.09392524662899426, 0.06804840803689571, 0.06827980693736024, 0.10451107978554774, 0.09324755251945349, 0.08436418569072135, 0.13597270671816308, 0.1028416820583874, 0.9173649798241762, 0.938990510806289, 0.9447931533024817, 0.8948163353863258, 0.8715149954827648, 0.8720250066484522, 0.909636602718312, 0.8987421658153524, 0.9221495877555401, 0.6654250294475943, 0.6907220743937998, 0.49188965967706055, 0.46104452966430276, 0.49895547675748486, 0.47784471728725086, 0.4454729141718824, 0.5280358609119282, 0.26741037868189965, 0.3751850911312544, 0.7949978456184702, 0.37085015891095463, 0.20808898247287744, 0.36116893946532513, 0.21159379501551878, 0.17416302892049607, 0.15699601129264518, 0.1722800303815324, 0.3063173430107671, 0.329408625306875, 0.14101119627517655, 0.12606939296694308, 0.45890455401498875, 0.18185775021659845, 0.4669560954360602, 0.4951038464732973, 0.4820039463810434, 0.37218986795587017, 0.2810546235031288, 0.2228064993103962, 0.571865862468334, 0.12299383234279337, 0.4796255213028179, 0.469921415851307, 0.17802676142205676, 0.23418952175860952, 0.05728090916337625, 0.04356376902974768, 0.06791854790193208, 0.09195277483260833, 0.03302472695854941, 0.0945088291879922, 0.14722331677032174, 0.05015581483677456, 0.13765992548875783, 0.17521886717751645, 0.1359281681084472, 0.18473044738048516, 0.08918112443050508, 0.11028714667609074, 0.10643771388045042, 0.1393446081913331, 0.14713369698231815, 0.18612723161483313, 0.1284013518420536, 0.1720133309588442, 0.12275451199733745, 0.10859228281807576, 0.11428785980816247, 0.11952313657447522, 0.08416423058540912, 0.23487182858991695, 0.12470042030826445, 0.14577239657922159, 0.16920977972755769, 0.15101626894094733, 0.07196166217246935, 0.1432615555103003, 0.17350166297787806, 0.27976292295567784, 0.08097750411518123, 0.07723408630005923, 0.5673362825862536, 0.5100671548690704, 0.5924229832388108, 0.5581847049048291, 0.542289986183558, 0.547811336059148, 0.5229732821754005, 0.5187477944423098, 0.5556671195966951, 0.08781668661678776, 0.0920281853302376, 0.07367160151626051, 0.10517906361642981, 0.1228556658429183, 0.09025127215005613, 0.08732530277600381, 0.09390493006857703, 0.16610681244600933, 0.18498411331391618, 0.23594092553507717, 0.1662836929298137, 0.22023853938060822, 0.16532275095831062, 0.15397570180320996, 0.17998664809197618, 0.19275424591957324, 0.18070220467216602, 0.20954771118309767, 0.237815006969464, 0.3426895294317823, 0.27291491372123633, 0.25139603582368875, 0.23804337727156644, 0.19132911407782094, 0.3348846278837495, 0.23977162952731346, 0.15817759259129183, 0.1658692521375542, 0.1559418048520984, 0.2128670950185314, 0.20212262744701526, 0.29448024952425444, 0.17224057637922907, 0.21045130853853744, 0.2409677142928649, 0.26022722473550475, 0.2307763562131563, 0.21925798090271076, 0.2318481944091877, 0.2249764201546115, 0.2179539500636114, 0.24091898359223318, 0.22950450060844152, 0.24306251936643852, 0.20364177542990536, 0.1874237969072654, 0.166156265834712, 0.19069019523647213, 0.1921397128317096, 0.17636292765807704, 0.18564181848129546, 0.1887369607470073, 0.2019001569368407, 0.1839618307558516, 0.16649244712825806, 0.18356572653094716, 0.86124902052107, 0.19369388171521118, 0.7986388956264733, 0.17355198711471698, 0.16697451495083804, 0.1566034286767406, 0.6615890234357236, 0.5539390591253994, 0.5149265717265161, 0.6533852293747353, 0.6701813073249452, 0.603934977014259, 0.3958377074591717, 0.41938583796968, 0.6235096744433922, 0.22384442549394667, 0.18158434343959573, 0.18700082993470046, 0.18692908695358124, 0.1994210758381041, 0.1975369494027054, 0.20726967938397245, 0.20989420814208992, 0.21033197025825623, 0.07642732464975288, 0.10135440463317047, 0.08575820162047854, 0.10014895568313165, 0.09193440950041654, 0.11585811425807135, 0.12559526709167457, 0.1015005071174655, 0.1237267111503716]}, "mutation_prompt": null}
{"id": "64014244-0e58-4a68-b137-49074d046cc6", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        momentum = 0.5  # Added line for momentum\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.97 + 0.01 * (self.evaluations / self.budget)  # Adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (momentum * velocities[i] +  # Changed line for momentum application\n                                 inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Added line for adaptive velocity clamping\n                max_velocity = 0.5 * np.linalg.norm(global_best_position) \n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce momentum term into the velocity update to enhance exploration capabilities.", "configspace": "", "generation": 45, "fitness": 0.11185519547979689, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.19.", "error": "", "parent_id": "82ee8282-3187-40c2-b38f-c07a1572407c", "metadata": {"aucs": [0.1447321366408576, 0.12886909405403746, 0.14171898441896524, 0.13848305356340207, 0.13901596333764632, 0.14694225729932298, 0.11825973268630408, 0.22115760078520819, 0.13435217151720624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059455882884304034, 0.022564094154858494, 0.03207209631220054, 0.049207180885417756, 0.04095207484998209, 0.03284119185281065, 0.025072979020539288, 0.021607077298918753, 0.03003804571379698, 0.009883001514705447, 0.031072930106985197, 0.015827362908316323, 0.01959972157639278, 0.019591929760262028, 0.02985960772235663, 0.017355219367236385, 0.04298203359066155, 0.026439014944796724, 0.9625791494336448, 0.9756410441319852, 0.9729128689569211, 0.9704356132585886, 0.9632266820394523, 0.9566324964635646, 0.975979298538483, 0.9743471455798944, 0.9787167936416915, 0.06413314040007645, 0.04090580753522843, 0.039736375813668956, 0.072186329968146, 0.036569612504329996, 0.05117119016179983, 0.06009255851349515, 0.06892186608184858, 0.07062370585716904, 0.1573636890730553, 0.11569619434382927, 0.1343958680022368, 0.10855135263037441, 0.1012944867004053, 0.10193178844090922, 0.10851605422650323, 0.08497930378180263, 0.08856162305952897, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00670108782250467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008207646320018247, 0.009328782545775516, 0.008948412026100083, 9.999999999998899e-05, 9.999999999998899e-05, 0.025793857172906054, 9.999999999998899e-05, 0.019357324673688003, 0.033376068823375515, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02359483417738739, 0.04056514280458812, 0.03642488632241325, 0.007216699102038704, 0.007610492734109187, 0.005026710962375391, 0.022309706899207415, 0.10864016678538735, 0.018599535870479356, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19451462089495386, 0.17819932620645818, 0.1531932327641865, 0.1420226086307812, 0.1614600792765747, 0.1578561226329912, 0.21667487245870065, 0.13989985605018573, 0.14935907454404473, 0.02487046488427913, 0.028243168226067428, 0.029915111913277004, 0.03266886175302153, 0.029979792768333957, 0.0364084921197213, 0.028038446809893647, 0.020590422799109165, 0.03484748619385514, 0.13157807411591926, 0.13123939591355116, 0.14007980578327028, 0.12967573937313226, 0.13037198222257562, 0.13467614702464725, 0.13926344380850098, 0.15518636809609598, 0.14755685864391566, 0.13827497018669732, 0.14229450310524994, 0.1613932299901244, 0.13800672315110074, 0.16222601094487032, 0.13951131177511455, 0.13063787299064789, 0.20900887181006178, 0.15413492321856193, 0.07555178396339457, 0.08749465242734511, 0.10010242066555552, 0.08297128607883075, 0.08889991933808683, 0.08699051651409195, 0.0837317855149382, 0.171183520107977, 0.0876534189743996, 0.13254372941930992, 0.16912938890926266, 0.13965064522632675, 0.16947492861227131, 0.14155184407777055, 0.13655604597884807, 0.205177205406054, 0.16082180870612772, 0.13287199328508237, 0.1329026833787178, 0.12508033678861863, 0.12809356856379728, 9.999999999998899e-05, 0.0030938848717694256, 0.12520038666736744, 0.13280677670989194, 9.999999999998899e-05, 9.999999999998899e-05, 0.15322811445894424, 0.13607019489293504, 0.12563755928076226, 0.15488435932398203, 0.12229936837185573, 0.10902036589532249, 0.12321270257042238, 0.1295844193254716, 0.15560456693807811, 0.11040265245322212, 0.10682540760268189, 0.11113583506788094, 0.15194126259917173, 0.10295615759823906, 0.09635552063684882, 0.16886155727910268, 0.16299413940212348, 0.1660294871810345, 0.1781987162027321, 0.18537260706174652, 0.18400184793730245, 0.1992884765848324, 0.19172095854103932, 0.20577474869184564, 0.17416389910532504, 0.17207658682067417, 0.17944813431083384, 0.0342747214147785, 0.03854423071043145, 0.05197705945545472, 0.04431816174247305, 0.04442843186297396, 0.03053491619860982, 0.04431861137863857, 0.03803354422653826, 0.04105426429703474]}, "mutation_prompt": null}
{"id": "3b00d63b-ff74-4022-be35-7cafb0f5bc8d", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.97 + 0.01 * (self.evaluations / self.budget)  # Adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Changed line for adaptive velocity clamping\n                max_velocity = 0.5 * np.linalg.norm(global_best_position - (self.evaluations/self.budget) * global_best_position) \n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce linear interpolation for adaptive velocity clamping based on evaluations to improve convergence.", "configspace": "", "generation": 46, "fitness": 0.3165458744494362, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "82ee8282-3187-40c2-b38f-c07a1572407c", "metadata": {"aucs": [0.7534516312621488, 0.7670579071363524, 0.7900215512836071, 0.7520025273207782, 0.7705481084771196, 0.7802643118895869, 0.7664721483040895, 0.7655189311662309, 0.7629839135154749, 0.4716517608958898, 0.5034528234618498, 0.48577698874783914, 0.5236606045656542, 0.43418580749382096, 0.4428946919699216, 0.4647886286295576, 0.4727749829388256, 0.33811698897593356, 0.12677305422520402, 0.13807982306621003, 0.1578192243984078, 0.1639973168253689, 0.35877658210860497, 0.13441731226496234, 0.12617765519405255, 0.1321507292926346, 0.10218276217276268, 0.10870023932874517, 0.11452920438971037, 0.07984105832002364, 0.09012498555466131, 0.14083543013538236, 0.12996341686511237, 0.10585158276605522, 0.14439612780811073, 0.1000157900996923, 0.9093727024092965, 0.9270222189617691, 0.9364090625338248, 0.8930524248528336, 0.8687244337919973, 0.8430066332572543, 0.9094393341160517, 0.8985812433514455, 0.9226226280771429, 0.5785639553068975, 0.6172586167375296, 0.5514116042802639, 0.5537871914952666, 0.3041136846037391, 0.5878000352256171, 0.5865657379322525, 0.5960922813541903, 0.5773162246162009, 0.7696489190708917, 0.7306383538803813, 0.3709127056892242, 0.2698081934022022, 0.35422858030098026, 0.20164412210711746, 0.627480347896829, 0.29560410673118, 0.7052052179436705, 0.2086017920434623, 0.1337330400139115, 0.1245561150604948, 0.17475881563933804, 0.2171718644064381, 0.1606711702324265, 0.23007888574087643, 0.23693963312580069, 0.17833215919690615, 0.2261098371851782, 0.12364653529167424, 0.21333843616764903, 0.26108427217871066, 0.2488031594187884, 0.25063877352830066, 0.21583477016343544, 0.21066679324659776, 0.21732185800987014, 0.06195820340485847, 0.0793466376332479, 0.030697901264860605, 0.06755189763922886, 0.0007492423356959543, 0.08479166347504075, 0.05227426523287626, 0.009823323209291135, 0.12350446920453229, 0.11642682075937516, 0.06529174751352218, 0.11709943955371838, 0.08834371314316103, 0.13199293523435796, 0.1352008457297983, 0.11107681945484438, 0.13958042579034913, 0.13695528801492352, 0.0949421060635659, 0.057474446283584224, 0.21074077492288423, 0.08178633272721614, 0.16558393314386344, 0.08312993991190121, 0.10136098348344835, 0.058503239847665145, 0.17804395713671495, 0.12755772664847242, 0.10668011547734879, 0.16739457563760485, 0.17849780687388372, 0.1930774147654275, 0.05640626718456809, 0.14442384810631825, 0.0904569302243835, 0.07605791098065728, 0.553839779431893, 0.49614350442548516, 0.5422806018752631, 0.5323509962950114, 0.5376701978690397, 0.5006135037552488, 0.5494298107000121, 0.5401782569911362, 0.5209803252278463, 0.1027139626480823, 0.10507178716503063, 0.09113542589875634, 0.10760339554431975, 0.12680128128847779, 0.14078965560061463, 0.13518142180676573, 0.11750644324772963, 0.12847006071657796, 0.2394190351324652, 0.1768544514789553, 0.29215858101882086, 0.22688346400808146, 0.2258635878579669, 0.19119347006640375, 0.250355569362139, 0.19015395840593186, 0.2505156005633977, 0.2967901443019393, 0.4131297603359726, 0.3794155089827894, 0.46177216371711904, 0.23631308278932628, 0.4207407423667293, 0.39850906717642265, 0.38604081615928254, 0.24549202365428324, 0.20732430206820207, 0.29208929139538997, 0.2144989540622847, 0.23150707260323566, 0.2561111661285289, 0.3080615349397813, 0.2352948949834306, 0.3844418713188654, 0.23436748260407458, 0.21523835811909486, 0.23671423064933184, 0.22273463014734285, 0.22501677940899123, 0.24381530920553118, 0.2044944373335681, 0.24531452647050978, 0.225058906038191, 0.2135687136687875, 0.1852498084097025, 0.214340402259648, 0.22279624201545334, 0.23296663425778474, 0.18289949758454194, 0.18917646373694952, 0.1938911157901565, 0.21042512312848827, 0.20271352397638098, 0.7772624274413689, 0.1670083764470055, 0.768193345400909, 0.7271106695821712, 0.6123812071037211, 0.8053606239853472, 0.7765171652574697, 0.6144982263128584, 0.14810800146993264, 0.725371078114993, 0.5828181990735715, 0.4897667830007375, 0.5012177458945264, 0.45684318857492834, 0.44031966050451055, 0.4830365306746307, 0.4719889753387727, 0.637700420197018, 0.18208211139147001, 0.19285373237549797, 0.19767777760073468, 0.18921503126799866, 0.18375722083021595, 0.18479378942176705, 0.18342656484024633, 0.18974141670006683, 0.2016380462620555, 0.08555622216505876, 0.11425275466885687, 0.08519829926303135, 0.09136190208482298, 0.0970996042144856, 0.10008408878724773, 0.128521664254731, 0.11225498578925386, 0.0847793131771668]}, "mutation_prompt": null}
{"id": "26452b0e-4598-4ef8-9b9e-82cca3500263", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.97 + 0.01 * (self.evaluations / self.budget)  # Adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Enhanced line for adaptive velocity clamping using non-linear scaling\n                max_velocity = 0.5 * np.log1p(np.linalg.norm(global_best_position))\n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Enhanced adaptive velocity clamping by introducing a non-linear scaling factor to improve convergence stability.", "configspace": "", "generation": 47, "fitness": 0.3051776246145189, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.24.", "error": "", "parent_id": "82ee8282-3187-40c2-b38f-c07a1572407c", "metadata": {"aucs": [0.7675818915642534, 0.7551040645565984, 0.7757076672819033, 0.7716289124343846, 0.7072422952108484, 0.76623179409332, 0.7554853456553225, 0.7636040713754919, 0.7564652542794091, 0.4091895490248212, 0.4056724895911289, 0.5107926681818279, 0.47433639248213144, 0.4884684882222683, 0.2239305509405295, 0.5450471824125909, 0.490527838439486, 0.48075735378681006, 0.1383219967713749, 0.1339927246738536, 0.12884981320108269, 0.11326828854856341, 0.13375948249994307, 0.1334158081765321, 0.1122813266132493, 0.14792683579382704, 0.14689250176243218, 0.10215221754172199, 0.10186068814266547, 0.10249628481686979, 0.11997631182653645, 0.111424512760811, 0.12486280441392372, 0.10191994633198631, 0.12900118866694177, 0.08580004888466974, 0.911488395859214, 0.9270222189617691, 0.9362415201458373, 0.8930104748678329, 0.8553124536521362, 0.8436138725620954, 0.9099801581044361, 0.8946406404267642, 0.9226226280771429, 0.6197916609868268, 0.6091602020377784, 0.5510216892109459, 0.591333043938336, 0.27327539516786703, 0.5143935237363519, 0.5756711700373276, 0.6008540693911779, 0.5958797592887224, 0.35700072016873297, 0.7706319613795058, 0.8050013212700526, 0.2680922053309769, 0.3604690770268877, 0.2026642858981943, 0.20814286270213056, 0.7609981096160797, 0.3308598203608568, 0.12234790572299403, 0.11969212164116183, 0.17803443724471324, 0.11379388054395545, 0.2287260430277296, 0.1505655204705305, 0.21034353960717522, 0.17551747275583784, 0.21829062498053242, 0.14986186000358415, 0.16759613681379282, 0.2270605855161162, 0.2619169225322179, 0.1196723771891186, 0.2491811435417951, 0.2277783778988104, 0.24625646960081315, 0.12140345880921632, 0.08289500719018761, 0.06046069971157686, 0.1032485504927334, 0.06200647454034569, 0.021273934464489552, 0.052847575178638584, 0.026464980223951717, 0.04420081464137515, 0.004284167995296961, 0.16246761587934, 0.06958786903913494, 0.14923677990437811, 0.09552426052601837, 0.14004186865394752, 0.15764938255810013, 0.11440649871894415, 0.17954980637100637, 0.1290699219063406, 0.3321765806360998, 0.04525995328956811, 0.170678175552321, 0.06154371800816949, 0.20168280011813855, 0.08895175575805692, 0.09389975131553452, 0.060556157470663896, 0.16608882827816762, 0.23447105607500196, 0.09933776817603812, 0.1828498259629876, 0.10444630601979388, 0.17978631169022286, 0.06371439387755307, 0.1033745677043727, 0.09078800795945641, 0.07638889460316711, 0.5236270181246736, 0.5304014648665196, 0.5701536879593914, 0.4912119509124576, 0.5572558350164847, 0.5541371357538147, 0.5206596574703102, 0.5115384860092521, 0.5076492114645688, 0.09029630887418738, 0.10592678181142967, 0.07541181919920492, 0.10158425838935714, 0.15292726656886824, 0.13894472786272383, 0.10964198708968398, 0.10020077556056417, 0.1261292252453723, 0.16041372108862084, 0.1739009628656757, 0.19349952030032969, 0.22366452025877115, 0.20380451106582376, 0.2745195630949868, 0.19007668510200304, 0.2579565201440023, 0.19086798637147095, 0.21344423348704122, 0.3184250646221186, 0.3738513422172075, 0.3671964013388128, 0.43976502901376824, 0.4266653618158278, 0.4404442591951786, 0.27419732494882953, 0.3548796102533395, 0.24655413162889794, 0.18467665813404532, 0.22314427385987445, 0.26504338262003757, 0.2447204320598656, 0.30304908430653865, 0.2329649911780265, 0.3484874010042298, 0.20790780799658937, 0.23508998513922463, 0.2340770215992215, 0.2387635873694477, 0.22948015328479066, 0.22641998068748204, 0.20649813596261568, 0.21991301862210344, 0.25343551885915283, 0.20462786022593193, 0.19197438819464974, 0.22454044685337227, 0.20362328042727762, 0.23483517479188154, 0.18850485789052396, 0.2254473061096114, 0.48127128962345356, 0.20345619358658673, 0.23647671577388596, 0.7218482493108063, 0.16728039339429923, 0.7337291364852248, 0.16565013998226918, 0.6864023871916287, 0.8006324307628319, 0.16761387768431646, 0.6215507109533163, 0.14824386219652153, 0.5572380803344765, 0.1963496999553599, 0.5882462396401607, 0.5133216122544986, 0.5432542867455517, 0.3981510736848197, 0.477066568793562, 0.5041266781447546, 0.5679234276251254, 0.1782819993879199, 0.19865806794125884, 0.18122520839468192, 0.1908527466481773, 0.20004208193475703, 0.19246368706855432, 0.222712483062937, 0.19163856725086803, 0.1972768738789592, 0.08741586176548155, 0.10864730365908237, 0.09144084392788521, 0.09144596405535899, 0.09156109240403898, 0.08936837413709653, 0.12347997932690158, 0.08755162056548793, 0.09102224347782872]}, "mutation_prompt": null}
{"id": "d0d9d9e1-b342-4fcb-b76a-eddeee6c4f8b", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        initial_population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        # Adjust population size dynamically\n        population_size = initial_population_size + int(self.budget * 0.05)\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.97 + 0.01 * (self.evaluations / self.budget)  # Adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Added line for adaptive velocity clamping\n                max_velocity = 0.5 * np.linalg.norm(global_best_position) \n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Enhance global search by dynamically adjusting population size based on budget exhaustion.", "configspace": "", "generation": 48, "fitness": 0.1617728348403183, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.14.", "error": "", "parent_id": "82ee8282-3187-40c2-b38f-c07a1572407c", "metadata": {"aucs": [0.30648728139029835, 0.3002972567922557, 0.2713519539278427, 0.2760096555009274, 0.2410143382416955, 0.27168855894681276, 0.2716507195278367, 0.28211009674567344, 0.25979851497939077, 9.999999999998899e-05, 0.006721010626130952, 0.005499678019157406, 9.999999999998899e-05, 0.0006009243975815259, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08331976620874959, 0.0798055235108428, 0.0751434081322142, 0.08512597398490385, 0.08775359121662551, 0.08237181695250817, 0.07736283255849052, 0.0907401095471263, 0.07896787108364045, 0.05524781703888404, 0.0628363984285184, 0.07046348713884132, 0.049991033423474995, 0.06023521289650302, 0.08420194018296989, 0.07068017243135327, 0.06826737204976197, 0.0699275912918692, 0.6434822878162838, 0.5787492794245306, 0.6523754350673256, 0.6031237041106263, 0.5631573319437444, 0.583495700246843, 0.6006275670227856, 0.7138694533820911, 0.6991843609477527, 0.15189549489209786, 0.1555552034882316, 0.17442574737320626, 0.16090430630055585, 0.15043338410489582, 0.14563363321670697, 0.15220933474609066, 0.17564350741095514, 0.1839506511456649, 0.2129661982349007, 0.25950421489986175, 0.19926026640806482, 0.23556142017977266, 0.2254166740263761, 0.19722513189018387, 0.24025972656856076, 0.22429767068708129, 0.19089095500305453, 0.0288025486787874, 0.047161419228245016, 0.08397181739341375, 0.09074568722643928, 0.09189389817715798, 0.08091524878419609, 0.07482936455475153, 0.09259068596642461, 0.10447019590639661, 0.11038197625920076, 0.08387937903149101, 0.08482277310298336, 0.10712220676536421, 0.05317206583783973, 0.09549700646849946, 0.10202028693622889, 0.08390780962420541, 0.09102027225457499, 0.006351951694409608, 0.018662843447706967, 0.0015236709202501864, 0.012378873507898569, 9.999999999998899e-05, 0.00039730178212049605, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07454591134445987, 0.1435184860006813, 0.17309637883568252, 0.08085037298129005, 0.05636548226707494, 0.08381928191133736, 0.11276986411374423, 0.09945123201657735, 0.06212854933202161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04156590511839009, 0.029492510278617212, 0.043245985740993476, 0.027366428809209697, 0.02380511093997406, 0.03555786518022597, 0.03429315358643925, 0.03124824739322396, 0.019271735566558368, 0.2618190051691367, 0.2936876787304714, 0.2909266546290824, 0.2902082748368696, 0.3008693477332477, 0.29343738559579646, 0.31064828618417273, 0.29810173764551406, 0.2830445183059235, 0.10676934098139523, 0.09441260225429304, 0.07161596359711442, 0.10122871001015088, 0.0867115761981826, 0.08456415881741774, 0.0709338551077291, 0.09398052500693543, 0.07404830303448184, 0.18083370055195414, 0.1878970230843242, 0.15880300096811495, 0.1777837231517636, 0.1750966696342683, 0.14174612291951416, 0.18353168249059504, 0.16681638038988422, 0.13911679788225595, 0.2043379367191317, 0.20768895856481118, 0.21180304159947538, 0.21700899687616415, 0.2318086902665828, 0.22421338718905248, 0.23552156189433904, 0.22263609582226296, 0.21334992889038507, 0.1540533957003739, 0.15497973521008535, 0.1413469464559004, 0.15216311725243936, 0.16664720644500663, 0.16981089381445158, 0.14804613094446217, 0.13778036635999402, 0.1455767060540042, 0.2055844930199443, 0.19546706192610608, 0.19795356194282043, 0.17585893007826958, 0.21272111878454059, 0.19204636941257747, 0.1961992225858903, 0.20206493487949362, 0.1921835118067785, 0.15914995985211822, 0.18069718110445943, 0.1814238520192074, 0.16436862586626555, 0.17929289311299812, 0.16953011872201784, 0.16006185873455103, 0.1933490928740823, 0.1724553161114536, 0.16645345925224753, 0.37203972137484775, 0.32661968647222106, 0.17191861171074885, 0.3534096083182434, 0.4292818760486996, 0.3310637959921452, 0.3465506054619002, 0.3162607555980117, 0.3884343794020251, 0.3357349988936107, 0.31607296007882923, 0.22166550364637738, 0.27556578966614553, 0.28489338645822804, 0.16665602190646855, 0.3075324239559204, 0.2544320748789626, 0.17122912838255033, 0.18570343158725677, 0.18645529525071247, 0.19331773085878323, 0.18970032326150965, 0.1842392141368807, 0.18216035540331876, 0.1868733185171012, 0.20468009849494173, 0.0889661397822763, 0.07594796636229262, 0.08725786483134756, 0.07114123645874992, 0.061751875485218766, 0.06687038477304574, 0.0734242657367069, 0.07509544621494535, 0.08513603437618567]}, "mutation_prompt": null}
{"id": "9ac1ab79-c5e3-46c0-a616-5977a2fd0ba4", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.97 + 0.01 * (self.evaluations / self.budget)  # Adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Adjusted line for adaptive velocity clamping\n                max_velocity = 0.5 * np.linalg.norm(global_best_position) / (1 + abs(global_best_score))\n\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Improved adaptive velocity clamping by incorporating normalized global best score to enhance convergence.", "configspace": "", "generation": 49, "fitness": 0.09360142492260135, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.13.", "error": "", "parent_id": "82ee8282-3187-40c2-b38f-c07a1572407c", "metadata": {"aucs": [0.15960871141103417, 0.2189272442619573, 0.20862712864400934, 0.0970544104390677, 0.11003146471351388, 0.11176763996242334, 0.1171548500115237, 0.09899500517145277, 0.08354116591404703, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006065782196056579, 0.022440759108574126, 0.020497341535060887, 0.0439756803775434, 0.0474174535042573, 0.04998169870689073, 0.04187688064971484, 0.046793638757890554, 0.04529990880157442, 0.006392989830250051, 0.00014784549287449877, 0.0035519951575317954, 0.07503391567567019, 0.04403341402820893, 0.024930669009406103, 0.037118304667549507, 0.0470264818586138, 0.0068511540009834615, 0.7930968184726104, 0.8677817618610377, 0.8217352432258237, 0.05346330431588431, 0.04745481050874345, 0.037888344369329974, 0.07761101790308844, 0.05623721488912159, 0.044676037849378236, 0.07646791672723852, 0.13753996601741147, 9.999999999998899e-05, 0.11777895714118147, 0.07502271913993952, 0.17653246597498296, 9.999999999998899e-05, 0.011613856351912921, 9.999999999998899e-05, 0.12184192516966574, 0.14713857015709908, 0.08224170279781662, 0.1939872959351534, 0.1424696033923869, 0.036898924112279574, 0.13899650968500377, 0.16011444175818657, 0.19730145276116562, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10720965910564861, 9.999999999998899e-05, 0.06194412128993121, 9.999999999998899e-05, 0.05051527659909372, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008383078556496337, 9.999999999998899e-05, 9.999999999998899e-05, 0.026811516985586814, 0.38239510480572403, 0.3738591735105541, 0.2725165960155269, 0.12796682088681788, 0.1209025043452353, 0.12310705599468397, 0.2719403528999068, 0.21088319923654575, 0.23422717228885837, 0.0017092932626459056, 9.999999999998899e-05, 0.02352229743417278, 0.05334356097871207, 0.01870524497534387, 0.03652846593996817, 0.1094583253763518, 0.07599693538356511, 0.08111393647634724, 0.17147335628882043, 0.16925053592083694, 0.1676241827238124, 0.13130737573827134, 0.1491666588612779, 0.12406959909430137, 0.16451325373334036, 0.1394280084424574, 0.1357887224546701, 0.19327050602179896, 0.20691654349500999, 0.20428673989049084, 0.21493875361881642, 0.22059336550324882, 0.21381448506752632, 0.13779326152672822, 0.17794661788936195, 0.14495214764162379, 0.15034687342138497, 0.12962021271204027, 0.1824776374938195, 0.17117000316229403, 0.09965186345284405, 0.1588028190172226, 0.0896901883804514, 0.11170592523055056, 0.09660569169604283, 0.1770923776860409, 0.16439514302789426, 0.1860976360071004, 0.1949670697737168, 0.1687522187803765, 0.1773940793920774, 0.1592759392331642, 0.13482675550667922, 0.15713310100115818, 0.05434381364898744, 9.999999999998899e-05, 0.005820964526923489, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10857052308681181, 0.12363680681964584, 0.13390267955414625, 0.837392662535987, 0.19757020316215812, 0.19320774693201748, 0.10768312142582359, 0.10717560074486132, 0.07200983188901788, 0.1108042397679686, 0.10534584485040144, 0.06934996428955653, 0.0515681457131959, 0.03872148749376447, 0.05998625290337589, 0.20970329958599165, 0.17214309843216602, 0.22543575579989583, 0.20109782088690942, 0.19141526921483643, 0.19615758088512014, 0.18601885198559487, 0.1899595868269225, 0.1987635125424807, 0.1919822069339745, 0.20645630622515287, 0.18627146352467916, 0.0420915522315265, 0.05561149822438438, 0.05807804247196857, 0.059912703098590314, 0.07372047144722604, 0.049709438612828505, 0.05883355055963935, 0.0741765690423144, 0.06516557976595783]}, "mutation_prompt": null}
{"id": "4a898629-bbed-4ea2-9b6b-b05d52f093e1", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.97 + 0.01 * (self.evaluations / self.budget)  # Adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Added line for adaptive velocity clamping\n                max_velocity = 0.5 * np.linalg.norm(global_best_position) \n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Implement a dynamic population resizing mechanism to improve exploration-exploitation balance.", "configspace": "", "generation": 50, "fitness": 0.32363230836193124, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.26.", "error": "", "parent_id": "82ee8282-3187-40c2-b38f-c07a1572407c", "metadata": {"aucs": [0.8644959509160881, 0.8441604099197266, 0.8538401804161584, 0.8496614879839088, 0.853605769878456, 0.8495399645429095, 0.8463593622625618, 0.8552605963780542, 0.846155160809152, 0.6597915711781237, 0.6368049841529253, 0.5964786324121754, 0.6223959108101842, 0.5633259850238521, 0.627832390150585, 0.621079742580005, 0.581588950275005, 0.5908979220455399, 0.47010126624176873, 0.1300891665538806, 0.1313857710466575, 0.15790618751082042, 0.13882728759032648, 0.17618841374443217, 0.1308290404815069, 0.11980652358587174, 0.10807300463836167, 0.13327930520308529, 0.1270179382592631, 0.1001806547975237, 0.14102368567441714, 0.12666765357815746, 0.1015969650516052, 0.1074796690992349, 0.08779589176186886, 0.11047847596750815, 0.9417484888468899, 0.9465940496213984, 0.9565896587416791, 0.9164433811305008, 0.8646831253263496, 0.9136598142163141, 0.9411418226346062, 0.9273346426006621, 0.9037393170907075, 0.6007112136873349, 0.6199797654670902, 0.5090879270772317, 0.7133901883527469, 0.5699624892661534, 0.6140644134891275, 0.5434883534577234, 0.5451697996253011, 0.6894351553805194, 0.3148976788437887, 0.37395236508669816, 0.20266090144754334, 0.26269192400270625, 0.8339164607896491, 0.21162700784542743, 0.16817049270411788, 0.22392580903135195, 0.1751649559105476, 0.3720938949654201, 0.23239726113949133, 0.33572742160250646, 0.12630195496643448, 0.23542851410950294, 0.11645632587321475, 0.25481510123269446, 0.27480363197115354, 0.2756096108342364, 0.19090702334366438, 0.24253259732934496, 0.3006132000352746, 0.21154356652703799, 0.18976777559856395, 0.28009815043014086, 0.25398263329793125, 0.12105099106728179, 0.12442630024714385, 0.00421118246671337, 9.999999999998899e-05, 0.062016590098642466, 0.036060990077080746, 0.0007931189571424024, 0.014149214057430082, 0.06541164267659327, 9.999999999998899e-05, 0.03994577915222142, 0.1706454035860281, 0.10582247828945723, 0.14112981287544557, 0.12675479293250935, 0.07163217059826288, 0.09201829888662583, 0.14921986230118167, 0.1662674132077615, 0.15856686102396855, 0.18270596831972907, 0.06640692548580207, 0.2342154586458719, 0.21968156417040985, 0.3152728212665553, 0.09208293024804848, 0.1257570669304129, 0.09895848472917312, 0.11476374595567507, 0.1458447749708346, 0.10709856080010016, 0.4269414789338781, 0.06812624881929008, 0.179756029336263, 0.18247626206112122, 0.12596861270745308, 0.1328336624270361, 0.08118095423493576, 0.6116639950552147, 0.5710312684109184, 0.5595841260258769, 0.5540089696780486, 0.5274988627109599, 0.5909588111719608, 0.579035702173365, 0.5676718879889051, 0.5538195342149008, 0.0996450286626166, 0.11167613270194665, 0.15986998209105674, 0.0942142736596383, 0.1162524873759625, 0.09483762419522646, 0.11563688418697093, 0.08724888624425453, 0.11741357170793876, 0.14681910459981684, 0.23208488771766778, 0.19411804083607076, 0.20816024032498315, 0.22470233325863276, 0.1823834066514859, 0.18507823154174108, 0.17075802260431028, 0.25821728106142505, 0.3035810179621067, 0.26852525484235135, 0.3626969849341022, 0.2782529810791544, 0.3417279142686319, 0.4590924492141272, 0.2420348629918465, 0.36539404110712403, 0.26227461318442, 0.18538064435125068, 0.2766003057885744, 0.1460081818790684, 0.2365059169195629, 0.25413676943819896, 0.22792430392560126, 0.19848471273041646, 0.3461882379309966, 0.1764271196453865, 0.2435895055176256, 0.23608860211880156, 0.23640505676569856, 0.23837417878474176, 0.24900355076636582, 0.21998338633771042, 0.22925953117115128, 0.22949427575831804, 0.2398123645705602, 0.2012677514626504, 0.21766870162143348, 0.18331909159156967, 0.2350221466534398, 0.20091063713113566, 0.2056645283645997, 0.23501677208999538, 0.1861122586611682, 0.1772975463592984, 0.8088152936502628, 0.6004597876624826, 0.18235624957520602, 0.8182241828021339, 0.19850198533078167, 0.8057583318078227, 0.17211117320321978, 0.5781490305613561, 0.6979078717035049, 0.6959269660771557, 0.6887433524023261, 0.6874765506620353, 0.6095874791005164, 0.5637919016586332, 0.20320095458156118, 0.6830547485662974, 0.16338063963943916, 0.6316619570658463, 0.183370552638061, 0.20416323253645696, 0.19198298781398715, 0.1929568675245944, 0.19733541375464803, 0.19674296635315314, 0.22182764737902183, 0.2120057500688569, 0.2222821787664193, 0.09380070066893365, 0.09126675163419384, 0.07847251202149708, 0.0970080478048001, 0.09206993265459784, 0.07446629925656523, 0.09108724869228446, 0.08813577871245504, 0.08687331707840695]}, "mutation_prompt": null}
{"id": "0b57ea1b-4fc0-4789-8217-6128fe8d58d4", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                # Refined inertia weight decay\n                inertia_weight = 0.9 - 0.5 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.97 + 0.01 * (self.evaluations / self.budget)  # Adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Added line for adaptive velocity clamping\n                max_velocity = 0.5 * np.linalg.norm(global_best_position) \n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Refine the inertia weight decay to improve the balance between exploration and exploitation.", "configspace": "", "generation": 51, "fitness": 0.31762107285227864, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "4a898629-bbed-4ea2-9b6b-b05d52f093e1", "metadata": {"aucs": [0.8691843723709584, 0.8545367172952444, 0.8617860163876244, 0.8480322591200068, 0.861775179258033, 0.8556552661580132, 0.8571443641522132, 0.8607665026614004, 0.854333801740859, 0.684710395381722, 0.554013990665325, 0.6827115950101389, 0.32012840029484546, 0.6815430335549311, 0.6982858185867475, 0.6160907870142786, 0.6083404970830406, 0.22463429562966364, 0.1400836344551073, 0.15667124864953608, 0.1342067596487888, 0.14724819836451064, 0.16135185756111947, 0.13786007177595816, 0.13506448707853302, 0.13497675492208183, 0.11641344143670118, 0.09955993471884517, 0.14067332459879545, 0.09963654332601857, 0.14147383784757728, 0.10962713998266549, 0.09722556786296788, 0.11136673196960001, 0.09637913944225052, 0.11804914599354743, 0.9395688050257976, 0.9446080813133554, 0.9547826091385843, 0.9121197921263458, 0.8626541099083412, 0.9133337897240328, 0.9410038176518671, 0.9265410913715673, 0.8925372817036301, 0.7271057456583336, 0.6111822824825884, 0.5969899717392632, 0.623304962659903, 0.6632562650345397, 0.6377581022392501, 0.6028635769358935, 0.6855793168784018, 0.6787165817915424, 0.37225526278470245, 0.6134274028620506, 0.16774490376223516, 0.2731317579964393, 0.3471753026974821, 0.18831458602022644, 0.16755274016500266, 0.3385554445481841, 0.1730923802087445, 0.3359497226625192, 0.1299093683697694, 0.2512857238680042, 0.16075925807152758, 0.18896888362994346, 0.16663342253619595, 0.2043124533847167, 0.16718579786716314, 0.32728927559603826, 0.12605781297955798, 0.16806093973557312, 0.25316220785377674, 0.19533200354989666, 0.18627464032333363, 0.19232900729197577, 0.5760840545829353, 0.12189599114366667, 0.1509233568181877, 0.01177702053828067, 9.999999999998899e-05, 0.062257276829285946, 0.023632709557533937, 9.999999999998899e-05, 0.09678241900645823, 0.11057024873574939, 9.999999999998899e-05, 9.999999999998899e-05, 0.17303606556835616, 0.11006990794808424, 0.17542814724193445, 0.08861547235419853, 0.08248749532622968, 0.11929631450607614, 0.1312812076890053, 0.19626467219545762, 0.22136111377579648, 0.155894188572545, 0.09234153454264016, 0.26391091291321234, 0.20722427894270257, 0.33053752410165993, 0.09187779255705297, 0.10435993512367692, 0.09466212834051091, 0.1013168173934701, 0.21258496313277242, 0.09725895597311407, 0.2523386081714699, 0.08278861529734782, 0.17958272511103512, 0.23890260425110987, 0.12749391226992324, 0.15686580335181932, 0.08263328343777743, 0.5104396891185494, 0.5253328964195974, 0.5527240318745889, 0.5862382467280283, 0.5378681831706593, 0.5334115691943954, 0.5781669492974113, 0.595639879965685, 0.5782532518863956, 0.11362065387201525, 0.11353555203616994, 0.1203141256743786, 0.118125111471436, 0.11752094463584983, 0.09399014072428213, 0.12578695986507193, 0.08761309178101184, 0.10225613895015462, 0.25149628335444274, 0.21337826173749708, 0.311392576951078, 0.2591217075633946, 0.2721800383073588, 0.18983220231865816, 0.21808497802086224, 0.21159401077374373, 0.24819866520020173, 0.3356909457071978, 0.32978614430722386, 0.4351273512272411, 0.30452728822466435, 0.24796619714193635, 0.29047721816631467, 0.24636734667535098, 0.2977985269532133, 0.22421303340061793, 0.17659163884397588, 0.1825109193482901, 0.16617209191201165, 0.20237177720768873, 0.2275699916316184, 0.236857236295005, 0.19404273613423206, 0.25708842087176376, 0.17022541802939417, 0.23932904617794548, 0.25064092340967914, 0.23565547201293158, 0.23131049670355863, 0.21611694175530372, 0.2665147848312708, 0.21630613197752968, 0.22329142430157367, 0.22145565950866464, 0.20119257600100848, 0.20842021125355215, 0.17845587499214, 0.22015904040240775, 0.21539075306748057, 0.18995700889441747, 0.20191545984900827, 0.20091635630892601, 0.17683153200114843, 0.8172403376459914, 0.17360913214171958, 0.1824545344750269, 0.810830848210953, 0.19805445529620747, 0.7463980724986038, 0.17133391127530684, 0.7063884771459846, 0.7101663719079476, 0.5212253556426104, 0.5869679621432468, 0.7333382772454109, 0.5519226612233656, 0.45760176747365067, 0.540179442722204, 0.47971551740779583, 0.16325233520054538, 0.6016721360107075, 0.18377000097008667, 0.1905346485575785, 0.19148293392831917, 0.19266301831509836, 0.1713177675505111, 0.2083513743283243, 0.2375257537903872, 0.20011333149179766, 0.19874478340757362, 0.09462357437179758, 0.14830109083280352, 0.11697286253965344, 0.10581839322193942, 0.09262637640826654, 0.08713934299038906, 0.07536787521763344, 0.08730718862900322, 0.08083405600551574]}, "mutation_prompt": null}
{"id": "99746694-97dc-4a92-9d2a-92e637ffe0e6", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.5\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Added line for adaptive velocity clamping\n                max_velocity = 0.5 * np.linalg.norm(global_best_position) \n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Implement an enhanced adaptive decay factor to dynamically adjust exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": 0.3270021630767922, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.26.", "error": "", "parent_id": "4a898629-bbed-4ea2-9b6b-b05d52f093e1", "metadata": {"aucs": [0.8536746641386366, 0.8511940597033008, 0.8368534551687018, 0.847672884544018, 0.8433952239705887, 0.8476116930376136, 0.8494318075204773, 0.8472386534103656, 0.850422187171633, 0.4427551944591325, 0.5997694374135008, 0.659784770047003, 0.5627026839331377, 0.5963172621987614, 0.5564852356802019, 0.6299395967347661, 0.6518320604003348, 0.5641707863539493, 0.14488228497654876, 0.158795988760709, 0.11962232441199849, 0.3457983099095431, 0.1302934167395695, 0.1602115488109317, 0.16326742544920303, 0.16622294914251545, 0.136876032519882, 0.13781511351100306, 0.10784174724133733, 0.08512594206475932, 0.1109193728721739, 0.1257954710048289, 0.12873225970625046, 0.1214845006330384, 0.08305948861348045, 0.11689010018655643, 0.9397557445613297, 0.9450650323986871, 0.9551727987089069, 0.9142049215903753, 0.8625437893924187, 0.9136269723240733, 0.9410912236334902, 0.9273674591187997, 0.8940818548360965, 0.7039821949790157, 0.7217350173104912, 0.5476747317770934, 0.7014291042179638, 0.6749539131143887, 0.5327829258180341, 0.6647955388552333, 0.6365116614936586, 0.6552289079939853, 0.28558013009404026, 0.5891989530438277, 0.22155212146253112, 0.3636533226648635, 0.7708337766851432, 0.26436617614056446, 0.14953620492280661, 0.23328698345315568, 0.22252339324428672, 0.2379598547502032, 0.22549604235350873, 0.36364545425149786, 0.2048133277374795, 0.1985590626435474, 0.13607818163716368, 0.27086685896162277, 0.23651516780241932, 0.26226144649349803, 0.24016880537671725, 0.21306093678552396, 0.2593682478928091, 0.22094691163639768, 0.19227631812101853, 0.2661291448637787, 0.2817544718491407, 0.12831001134335362, 0.2201919402254695, 9.999999999998899e-05, 9.999999999998899e-05, 0.06244104991843813, 0.009886733026668315, 0.004726135684206767, 0.08297315019471285, 0.07820986067145408, 9.999999999998899e-05, 9.999999999998899e-05, 0.176102519651118, 0.07218978872039039, 0.1287764843706778, 0.0720066646828893, 0.07694970876348672, 0.10276173870918448, 0.1992592444519804, 0.1786604846457942, 0.16281391863964423, 0.21865097700771008, 0.04413271382913575, 0.2822661577801936, 0.1915535017334643, 0.21652584938238284, 0.07651926606617887, 0.1655719418591356, 0.14453667459491093, 0.09211865179242107, 0.15542746518814488, 0.12345497455337995, 0.258302639052741, 0.06757707657878786, 0.19608066531201962, 0.16595525257445276, 0.18789113175584493, 0.17096959201532413, 0.08035294497348133, 0.5457046776342014, 0.5312361962533924, 0.5387871281492024, 0.5519829188469628, 0.5161359697892298, 0.560258251414502, 0.5837763078468605, 0.6072240348795699, 0.560042865613918, 0.15053366207846752, 0.1125128663801177, 0.12072963264960834, 0.11061739347994992, 0.1427974460770196, 0.13349557189424066, 0.08589807248310644, 0.12472856590932757, 0.09524919277690513, 0.24933601572183006, 0.1930256564920786, 0.1945097245910844, 0.18566317551474854, 0.22770087391522753, 0.25067994532344684, 0.2386719597610969, 0.22246365944856528, 0.2937158079943192, 0.2526245438145319, 0.3846596589428296, 0.27906702620450363, 0.3573938887067333, 0.24276293918279201, 0.5070985872236756, 0.2543834372955903, 0.40084073029972045, 0.2511167953417661, 0.1642742111315716, 0.17597555940900822, 0.14649517541308255, 0.21685020086220963, 0.20176888796595405, 0.33568396082554497, 0.20481171369802942, 0.3288420899249449, 0.1815638700296287, 0.20498785273845033, 0.2382977251253402, 0.2047447384820703, 0.22500268207274043, 0.27417863775631746, 0.2057951772465323, 0.2540375406118903, 0.20972324780829543, 0.20310734802338404, 0.21670470452586155, 0.23603310945343092, 0.19959187455291316, 0.20124300495066905, 0.6454578375162358, 0.1967125880627154, 0.20132660226253962, 0.19618207582889713, 0.18247381400998675, 0.797717879481715, 0.18261821404017542, 0.18292995155699787, 0.7675389055849384, 0.19797147856203123, 0.785022045436006, 0.17161415738091879, 0.7292957730097109, 0.7330485925052834, 0.614004956688641, 0.540214826982512, 0.757195077776768, 0.5944507178300525, 0.6061926884610116, 0.5243723673297218, 0.6486973972703667, 0.16063783314383528, 0.5354242593011942, 0.20134800358718996, 0.2219275053448686, 0.20752281492352098, 0.19920324215332885, 0.2123781599443202, 0.2227377728741733, 0.19575312254636623, 0.18993172762303834, 0.21619447147531579, 0.08560602464462486, 0.08453176691617592, 0.09173371568310051, 0.08325032389872833, 0.0992473056928651, 0.08858550374816931, 0.13446804066356344, 0.09538879082602747, 0.09255247029926283]}, "mutation_prompt": null}
{"id": "62f62c8e-6dec-4a20-aa1a-574c23da4d8c", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7  # Changed from 1.5 to 1.7 for enhanced exploration\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Added line for adaptive velocity clamping\n                max_velocity = 0.5 * np.linalg.norm(global_best_position) \n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce a slight improvement by adjusting the cognitive coefficient base for better exploration early in the optimization process.", "configspace": "", "generation": 53, "fitness": 0.33648345279796466, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.26.", "error": "", "parent_id": "99746694-97dc-4a92-9d2a-92e637ffe0e6", "metadata": {"aucs": [0.8519729102696711, 0.8650149591928635, 0.8429391538835211, 0.856024037500573, 0.8497997784256758, 0.8262596554375692, 0.8511560302122059, 0.8586612256226924, 0.844578250399371, 0.6804559194297055, 0.5105545451444696, 0.5650230746690768, 0.46681306457247584, 0.6323582115619935, 0.6690952661429765, 0.5069420108483336, 0.6313693400978858, 0.6253134017920325, 0.13814308202057834, 0.16060119181025234, 0.11942828050496423, 0.44301195386814574, 0.14875816416906706, 0.15506856702162708, 0.10439062555094547, 0.15594914919112834, 0.15818263724619797, 0.40250560822965564, 0.123621813848939, 0.09765036754714873, 0.13316271919142386, 0.0960460037180002, 0.08862640135614397, 0.12301114968759974, 0.09846054643246949, 0.10133511529953942, 0.9517998799272424, 0.9451060991534151, 0.9550029518669542, 0.9144993412516249, 0.862329059045597, 0.9161816292787832, 0.9390544848776956, 0.9201642388092636, 0.9005600671691727, 0.6383147280212806, 0.6645482994916447, 0.5802295079548447, 0.6490697757744981, 0.6428222464987063, 0.6527347750759429, 0.6860544326010887, 0.654691134316503, 0.6697938287966276, 0.770659110968466, 0.3331452255453152, 0.22331907380769567, 0.8349009946126145, 0.20755728778803584, 0.2632465827082565, 0.20255635411159734, 0.708617943619867, 0.337543531041097, 0.2354607231805208, 0.2287757237398893, 0.19525560615457438, 0.24393095529938014, 0.222095378251834, 0.1817475155318926, 0.23247724832062788, 0.2618953584441518, 0.22174569651874232, 0.22492070699863043, 0.1907155520254894, 0.12686585771310988, 0.2066320566941835, 0.27095301014724094, 0.2433447397557672, 0.2474742242708209, 0.22512276537899467, 0.1038007290973132, 9.999999999998899e-05, 0.0002993184794882753, 0.07451660478981281, 9.999999999998899e-05, 0.026699961488209523, 9.999999999998899e-05, 0.07189018696931382, 0.0015310192254092136, 0.0718680725874119, 0.11239952885546445, 0.09783546763985795, 0.16092456962277557, 0.16889625190823243, 0.08193159440158126, 0.08750072729971181, 0.14134672791410008, 0.15923449882609642, 0.10877667410049052, 0.17401492350433712, 0.059725454377940856, 0.18127028167346781, 0.2095061966195001, 0.0884466237166156, 0.11552962800884214, 0.0996914841922748, 0.12275237910616288, 0.06969423519301965, 0.13579721421241242, 0.11949307297597611, 0.22036544420884185, 0.05695901530765657, 0.08507122849405147, 0.2046049892465046, 0.1158630887138159, 0.12049292381090437, 0.08050759409631825, 0.5358073988901031, 0.5444044822824208, 0.5641428137156647, 0.5640895767818153, 0.542751871331485, 0.5435433370313119, 0.5540548203467668, 0.5548521843542384, 0.5629108044718741, 0.11247224101783126, 0.14105043468908351, 0.08613051750397949, 0.09945322490893271, 0.15810966949662197, 0.10500970797891818, 0.12135997063639337, 0.1621697737979565, 0.10990886343329354, 0.17350798460140326, 0.17270479958144647, 0.3176172136093963, 0.20511957924150137, 0.21392145011024333, 0.17640245114878705, 0.19588272049527655, 0.21461284515042467, 0.36323822879415424, 0.2012976255526665, 0.4327762384806215, 0.2517376391664671, 0.3617136632263447, 0.36131541879169016, 0.3619773822189273, 0.2253114724161398, 0.4189235500064612, 0.23159933522607756, 0.20026746406548968, 0.2057881441105932, 0.1867194867752372, 0.21958315864808742, 0.20605449135022058, 0.2941354118330669, 0.19323364202359794, 0.2702252555722231, 0.20890754765086306, 0.26402778447044095, 0.21117726731495556, 0.229399029632957, 0.2185927029025766, 0.21516839974478807, 0.2203954759338872, 0.2245507725945982, 0.2115422180187848, 0.23280328564289965, 0.2205782456328741, 0.23150191170730983, 0.23538638296151992, 0.21941228396078305, 0.19799147186541366, 0.21459045700818458, 0.21085093587788528, 0.6252001502758393, 0.21949729187056122, 0.7564829593245328, 0.6220933804186091, 0.7365346164578115, 0.8125323595557944, 0.6515250660907587, 0.7448338314237186, 0.5725669899706605, 0.7281838673329621, 0.8131292631446336, 0.6002042180946283, 0.464061102572626, 0.7256557185484607, 0.762256840115795, 0.37486423703316163, 0.2004362171211196, 0.5176789932888969, 0.5975911761100947, 0.6468878620965475, 0.20921744234424655, 0.21337294575921395, 0.19121482626745967, 0.204156930813574, 0.21590741859005924, 0.1982992399273149, 0.20070703807012347, 0.19543746004362283, 0.18822260023349013, 0.11768122267315284, 0.08831245317668068, 0.09074468197745877, 0.10503346054340512, 0.10895206680150782, 0.10187821575002132, 0.10234084932138265, 0.08425099493809451, 0.11197767339588649]}, "mutation_prompt": null}
{"id": "bf9ba32f-0e84-4d3c-86bf-fa1139331861", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7  # Changed from 1.5 to 1.7 for enhanced exploration\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Slightly modified adaptive velocity clamping\n                max_velocity = 0.6 * np.linalg.norm(global_best_position) \n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Enhance the adaptive velocity clamping for better convergence control.", "configspace": "", "generation": 54, "fitness": 0.33455840453901975, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.26.", "error": "", "parent_id": "62f62c8e-6dec-4a20-aa1a-574c23da4d8c", "metadata": {"aucs": [0.8518054513837655, 0.8650149591928635, 0.8429391538835211, 0.856024037500573, 0.8497997784256758, 0.8262596554375692, 0.8511560302122059, 0.8586612256226924, 0.844578250399371, 0.6804559194297055, 0.5453294263881128, 0.5928791282228186, 0.5266075447924067, 0.6108685120421098, 0.6668627927337085, 0.48546706111586846, 0.6313693400978858, 0.5939708826652103, 0.14238098261327037, 0.14448831306222232, 0.12173118737314692, 0.4749367519889096, 0.13362885499058064, 0.155068332075177, 0.10418420343252477, 0.1550050749044456, 0.14016914360637434, 0.41544574031075043, 0.12357944323479875, 0.09781827670048393, 0.13305141234038187, 0.0901282063415143, 0.12721114916329657, 0.12280057896558205, 0.10696828131448188, 0.10133708050676049, 0.9517998799272424, 0.9451060991534151, 0.9550029518669542, 0.9144993412516249, 0.862329059045597, 0.9161816292787832, 0.9390544848776956, 0.9201642388092636, 0.9005600671691727, 0.649712533837494, 0.6645482994916447, 0.580229418092866, 0.6461610463575655, 0.6091055135509748, 0.656839790767208, 0.6808945598352427, 0.654691134316503, 0.6406406422975477, 0.770659110968466, 0.6541432618169248, 0.22331907380769567, 0.8349009946126145, 0.20755728778803584, 0.2632465827082565, 0.22492334515998968, 0.32511600478806635, 0.3652290790231768, 0.23376439768954993, 0.22483497508934458, 0.17491956581271462, 0.23594445338040226, 0.2188978457316364, 0.2138783121425024, 0.2422144076851418, 0.24673824103271758, 0.17594834549108107, 0.21968411182517944, 0.20516805944241345, 0.12679785665247223, 0.24435065933328115, 0.2587370913899536, 0.2658313075481865, 0.2327403113369193, 0.20576325035983478, 0.10403439287829808, 0.003518210646401121, 9.999999999998899e-05, 0.07359844719848041, 9.999999999998899e-05, 0.031028810529141637, 9.999999999998899e-05, 0.09545670416084218, 0.0071102050602012135, 0.07233451627621157, 0.16122333384388932, 0.0965455629442673, 0.16359808149856858, 0.15456538547265664, 0.0773068412176906, 0.12014661443637431, 0.14711105616780573, 0.1910370193929365, 0.1392206239552306, 0.17403792407846685, 0.05972241880828788, 0.18127420441045028, 0.20950656870550344, 0.08844698098773063, 0.1155286845120338, 0.09968885780977721, 0.12275297447397149, 0.069692158961277, 0.1357972144205376, 0.11949307186955249, 0.22036536895287406, 0.05695901524227598, 0.08507122851636029, 0.20460501194587877, 0.11586308871405127, 0.12049292381090437, 0.08050759409631825, 0.5457626005187339, 0.6375794080850166, 0.5609929975296905, 0.5440263923097277, 0.5338718835768038, 0.5448167763212441, 0.5437479787107957, 0.5419817928734012, 0.5294901129907339, 0.11230024629966151, 0.1410504346808249, 0.0861305150317514, 0.09901371733921915, 0.1563419915743931, 0.10361159482893034, 0.12135995904806873, 0.10276824905350601, 0.10815894689903671, 0.17427870156442427, 0.17929400435603216, 0.2451002872891891, 0.24204494931839982, 0.21400411711443446, 0.1757187435356331, 0.1936948176145632, 0.21629946835100078, 0.36432243568224465, 0.2168129479443981, 0.4295578677602734, 0.366177690440472, 0.31826536656314197, 0.2507466516529838, 0.3805723247933849, 0.22456000462225778, 0.4771340403107802, 0.23952091072440895, 0.2005375665408894, 0.2054071828370767, 0.16803152153183676, 0.2031881189950031, 0.18305728171287772, 0.19529763205701434, 0.22021648037992836, 0.2712480147081734, 0.17597499926135185, 0.22559642088781406, 0.20030388925675302, 0.2071083062090633, 0.22109687477803197, 0.23243910976706905, 0.2369598547401538, 0.21260759748253355, 0.23249059564318963, 0.20717119194122657, 0.22057431119146864, 0.232025798165848, 0.23532680874671952, 0.21931606681829785, 0.18822460476651737, 0.21451235468481733, 0.21085425484362863, 0.5330758441391013, 0.21949729300850873, 0.7654799365355894, 0.5991160990874231, 0.7420568089742823, 0.7981622920362514, 0.5516211298671425, 0.7533163695482517, 0.1704197932446676, 0.7379649418368087, 0.7737513060080945, 0.6170276333713153, 0.48992908044293204, 0.5839829035800599, 0.7770418034264477, 0.41066921252069655, 0.6322811741732766, 0.5700418329148321, 0.6226044221192668, 0.6133846505932086, 0.1859716817383399, 0.213000362927093, 0.1876916618247998, 0.18516831543506518, 0.21308056168490452, 0.18874275813445518, 0.19762112984167146, 0.1990662995024326, 0.19330767630586032, 0.09968816560441895, 0.06868674173915101, 0.09110210288470666, 0.09298683948678377, 0.10863573289860995, 0.10902678513963071, 0.08240560902843697, 0.08989720435720683, 0.10568157820034152]}, "mutation_prompt": null}
{"id": "ca97b31f-9379-419c-8d04-31770dfb887a", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7  # Changed from 1.5 to 1.7 for enhanced exploration\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.95 + 0.03 * (self.evaluations / self.budget)  # Slight adjustment for better trade-off\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Added line for adaptive velocity clamping\n                max_velocity = 0.5 * np.linalg.norm(global_best_position) \n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Fine-tune the adaptive decay factor for a more balanced exploration-exploitation trade-off.", "configspace": "", "generation": 55, "fitness": 0.31968069127123755, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.26.", "error": "", "parent_id": "62f62c8e-6dec-4a20-aa1a-574c23da4d8c", "metadata": {"aucs": [0.8536585959778797, 0.8613981308222134, 0.8410273470030758, 0.849448831552064, 0.8545411162951637, 0.8468607176532329, 0.8586159214023373, 0.8487167623199873, 0.8459394647423022, 0.6559218636793435, 0.6607149819179289, 0.5133077901190746, 0.2510268962732295, 0.656457717262467, 0.6752649854104131, 0.5894548510074558, 0.5159623253584589, 0.5748006077287022, 0.13626931962561684, 0.12848248138491103, 0.3756653553138444, 0.13391971029807115, 0.09997868489749784, 0.1449256639726435, 0.13268825987201893, 0.16267517340890303, 0.1148171935187684, 0.10868974860238345, 0.12869720678135166, 0.0790001156688861, 0.1184503571219464, 0.10246368106493176, 0.11374234401110084, 0.15333203519748184, 0.14192283884729173, 0.08496209874933625, 0.9517847726457844, 0.9449828564873987, 0.9548442174369575, 0.9167396622089924, 0.8468795746320361, 0.9161845458547406, 0.939026062812807, 0.9203845418435446, 0.8972614365395503, 0.6380995768203764, 0.6568574681980027, 0.6105801000840891, 0.6530520619577926, 0.6725890130939292, 0.6996359916710452, 0.6745398518485801, 0.6487503894021925, 0.6800663893677946, 0.30320697262792684, 0.3782627028209423, 0.22455258900562514, 0.21305257196943517, 0.26989296630516246, 0.2044581447310182, 0.1706230775908456, 0.7686878068559099, 0.22304630483748555, 0.22824321059121955, 0.24272562072653525, 0.25601415426282015, 0.1935006607053944, 0.22946161723143066, 0.20288249643036294, 0.23559370236988153, 0.27853601775914827, 0.2430145200956666, 0.12232497199213466, 0.1982017518711816, 0.1295192052903683, 0.2737510523398968, 0.20187718214350514, 0.28431856692217183, 0.267334459850852, 0.12228083563402758, 0.10537730169087212, 0.0017000752494658045, 0.00010207678334894776, 0.07060771761407136, 0.006613519589191541, 9.999999999998899e-05, 0.08564713256892786, 0.07031800408700095, 0.0061977124325565125, 0.006116498979435558, 0.14229178839328993, 0.15184297216911458, 0.17486128243353793, 0.0968215464335822, 0.054377038528238164, 0.05744945069500751, 0.14195255319308175, 0.1691239173222392, 0.10567125888827344, 0.1968837438177532, 0.06673727389966877, 0.19851354269126276, 0.2077779011252785, 0.08772492241036978, 0.12085486087988662, 0.0914859971177635, 0.14203127699883644, 0.07078881195419562, 0.13060297547528776, 0.10358276072983941, 0.19102768590974717, 0.06077447193508889, 0.1118806646782523, 0.2044377323448553, 0.13131422100893453, 0.13803085185036912, 0.08044312164774547, 0.5620740904499055, 0.5156395310812703, 0.5511616765774128, 0.5329310123219648, 0.5617295528217725, 0.5536233772414548, 0.557830082171996, 0.5642566778094031, 0.5406873988922829, 0.08680182615128396, 0.10934545903388204, 0.13207055829119274, 0.10205061459326736, 0.10725569545197955, 0.13741314453863573, 0.11474147806702573, 0.11907265222667962, 0.10583877245608586, 0.20666496850155436, 0.21323274420855176, 0.1884242103457906, 0.20829046111875027, 0.17635901998040737, 0.1724570066943304, 0.19225379107511675, 0.1552870513712984, 0.3043981342570814, 0.28556839605965467, 0.4598254507958952, 0.29133643151887645, 0.49842978108284297, 0.3427644294462958, 0.3219868005591454, 0.24608038427535828, 0.40422655093216875, 0.21446247480921776, 0.21377112386314867, 0.21953349294963953, 0.17547206530931725, 0.29972610719273673, 0.24927472642681503, 0.2685576191337531, 0.2270156696915001, 0.34653905364927295, 0.1902953546087156, 0.24436183303762038, 0.2109821210253784, 0.20334359472553343, 0.22967606792856377, 0.26357295853317, 0.24566667131346354, 0.23165819920474828, 0.20420280533469704, 0.2409462570442955, 0.20559196414794845, 0.22551457674755238, 0.20870676268658994, 0.23327156256224624, 0.20187482983455418, 0.19306844902651643, 0.21619881100986404, 0.19398712111826721, 0.2124407007032788, 0.7619864962334595, 0.644423645284947, 0.7154582845510074, 0.7423742872389074, 0.19675549726054864, 0.8276225538563445, 0.17041176469249764, 0.7000720627778165, 0.7360668716732768, 0.6273763011703153, 0.20319085245597657, 0.20145217626949374, 0.7094824080679152, 0.2994558914830885, 0.557958717400945, 0.5841459778319538, 0.5340849920509692, 0.5861885269331548, 0.19543306497163881, 0.18891607827934498, 0.1788011729039214, 0.1840134223027965, 0.21217243055194313, 0.21441631877470568, 0.18769893973547136, 0.19469123440878233, 0.18821992669201515, 0.09217200276032833, 0.09018237341454582, 0.09362190332473075, 0.103970250106869, 0.08992916374198723, 0.09660425910359949, 0.0828389121501294, 0.09193517234330773, 0.09159568151430741]}, "mutation_prompt": null}
{"id": "0b68ea61-e4e7-437a-b4ba-2ff2585f7091", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7  # Changed from 1.5 to 1.7 for enhanced exploration\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.8 - 0.4 * (self.evaluations / self.budget)  # Adjusted from 0.9\n\n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Added line for adaptive velocity clamping\n                max_velocity = 0.5 * np.linalg.norm(global_best_position) \n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce a slight improvement by modifying the inertia weight decay for better balance between exploration and exploitation.", "configspace": "", "generation": 56, "fitness": 0.2714059797801095, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "62f62c8e-6dec-4a20-aa1a-574c23da4d8c", "metadata": {"aucs": [0.884699547331693, 0.7179813541321485, 0.8922132781399439, 0.7937794034284127, 0.7245527799652722, 0.7452322698428175, 0.8835859668783967, 0.8057149920384118, 0.6901551137368425, 0.3089641512342356, 0.343423279018353, 0.32796563798050105, 0.45481159605207955, 0.6514714509364143, 0.13140034625060304, 0.06541250626528272, 0.13931248903340698, 0.1784341672537506, 0.0959488957525898, 0.1374459765234347, 0.11585258415360566, 0.49057066884356215, 0.13922716229176912, 0.0971855049431235, 0.10617918504373391, 0.14019419367322794, 0.10966384994682266, 0.09307294983180614, 0.09769692328341084, 0.09020478202323812, 0.1111296555870318, 0.08721784556600376, 0.08452030102372354, 0.09583193594517048, 0.08830602780389285, 0.12953350986087098, 0.87156152338555, 0.8811607847747297, 0.8961342542516191, 0.7668076066862934, 0.6873389397924837, 0.7494919809056648, 0.8060931277717451, 0.7679966135432794, 0.8334847408254901, 0.3823378532772397, 0.49613921549010986, 0.4900660224326162, 0.2993956308921033, 0.23297150902523767, 0.3501447744896766, 0.2748817789778646, 0.28311866177258693, 0.4210953916737682, 0.3534856051142232, 0.8655587471394488, 0.16694593479491504, 0.3729044716504205, 0.2091098169396195, 0.17776999939975557, 0.15629040833875119, 0.14052457288288478, 0.1704253363545396, 0.2955063659672452, 0.13027088433598344, 0.3245624954027554, 0.20450997924469727, 0.16825912567936485, 0.19978739849680982, 0.17590963909849178, 0.14352065772240874, 0.15278667627842857, 0.12289341345422655, 0.16885859758544264, 0.1271267916345067, 0.11112127826489615, 0.2264962731736736, 0.1271335344643585, 0.19373934261846548, 0.12475374564663655, 0.12778675315598143, 0.11628713320472273, 0.024170616797042244, 0.05283004972334271, 0.012275451738168353, 9.999999999998899e-05, 0.04859604875536372, 0.0543879193177218, 9.999999999998899e-05, 0.01190845849788258, 0.20141630512125408, 0.09849070786488501, 0.15828266237556599, 0.07739017539102044, 0.08128157268093095, 0.07938803718971377, 0.1488856465710614, 0.1717044575471327, 0.11620741447950766, 0.08994140617277513, 0.03507428401113444, 0.16264961514755738, 0.15442959431390102, 0.16243550354345937, 0.0955761387053482, 0.14265584836294443, 0.15946456834870382, 0.08617141640698867, 0.10742191941242873, 0.1619304982020785, 0.1866437946494005, 0.07436564084415409, 0.04720210198159713, 0.17677125019772943, 0.1414131736340103, 0.31060564373987787, 0.08014220188108034, 0.5248532375564231, 0.5524830785524318, 0.47080545256055484, 0.511539741363102, 0.4060575843405728, 0.49610207156509545, 0.5447459380328665, 0.5442518044781697, 0.5280014357113205, 0.04235050152348263, 0.09335477078648036, 0.07288139877494959, 0.08115964225701955, 0.11668766961929, 0.11584213700085422, 0.11345929781130726, 0.11417542696467753, 0.1101398621680093, 0.19116745759346243, 0.19946333888291323, 0.21387016042932316, 0.16985943642784374, 0.1918437663434841, 0.17917172430294925, 0.18640632152293135, 0.24251952267049215, 0.17244008146232193, 0.17431451083772276, 0.27773993530501895, 0.2108747689546453, 0.4062200261572533, 0.3212510853204571, 0.2677848141157969, 0.20489580585273848, 0.2658147382126622, 0.22541110851283408, 0.18974183573587167, 0.17894464565870916, 0.14630319980741746, 0.2908376044121478, 0.30778519237214697, 0.16870328847052696, 0.21798399184158312, 0.23946256799603538, 0.18196043918531857, 0.2704162897330681, 0.23944826589619117, 0.23456985722438217, 0.21487141608961058, 0.2257642707069688, 0.23385379428033193, 0.26513991772597967, 0.25895320057636695, 0.20823078948625584, 0.22085001023728468, 0.17940039450597056, 0.18144170877469834, 0.1898721283329432, 0.18655657525776215, 0.1935324932223228, 0.1769698845457609, 0.20789059810414967, 0.1865698905124229, 0.18084403407780436, 0.7641996505977119, 0.186383850487727, 0.8331589401408963, 0.19332376712360988, 0.8094339761869578, 0.6394516306176208, 0.7307905468319933, 0.6298447488213736, 0.411568313264263, 0.655599470606823, 0.2018002202365109, 0.6070563768977579, 0.34271676401429285, 0.41688544555482665, 0.10262481468092666, 0.5178304072758502, 0.34209209719030653, 0.20031353967948473, 0.1912364623571574, 0.19704899568825796, 0.20701675819676546, 0.19737581300373008, 0.18624900384519882, 0.19159352410565822, 0.21081121341279307, 0.19042417432144376, 0.09475092047099731, 0.09947263103251736, 0.07788092444948502, 0.11777193890944859, 0.09133937195704078, 0.08879154000806744, 0.08400826052555732, 0.08960523675588572, 0.10065457128017219]}, "mutation_prompt": null}
{"id": "6f34ca6d-a1b3-4e8f-a291-ca30f3ac5713", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7\n        social_coeff_base = 1.6  # Changed from 1.5 to 1.6 for improved convergence\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                max_velocity = 0.5 * np.linalg.norm(global_best_position)\n\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Enhanced exploration through a slight increase in social coefficient base to foster better swarm convergence.", "configspace": "", "generation": 57, "fitness": 0.32731120243174167, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.26.", "error": "", "parent_id": "62f62c8e-6dec-4a20-aa1a-574c23da4d8c", "metadata": {"aucs": [0.8390291766980508, 0.8506637847888948, 0.8505818839127117, 0.8577019374190129, 0.8465471417210686, 0.8513581418067327, 0.8347672655771734, 0.8543630582212187, 0.8393219568005246, 0.5404531409938786, 0.6562691700728529, 0.58229079050808, 0.6867691607900003, 0.6543550907427829, 0.5822710359198451, 0.4148016259841082, 0.456287586376092, 0.4709015448419799, 0.14349614590788073, 0.15951736445599485, 0.46543138818647745, 0.4927326186014396, 0.13955416467347892, 0.1471650009531622, 0.16617897333656018, 0.11549857023051868, 0.09385261670741651, 0.13934110662908405, 0.1909397311846981, 0.09275370928595017, 0.10150464707085771, 0.10556644371396307, 0.11075258151681233, 0.15757057847906597, 0.09105103706254536, 0.10120512343124188, 0.9538560309139859, 0.9471329013599709, 0.9567893535646792, 0.9189812039628898, 0.8643011183792855, 0.9185693736764123, 0.9421671841299891, 0.922529193798849, 0.9091489919628111, 0.7016794164600961, 0.653744205080895, 0.617438957505336, 0.6763862024142265, 0.5878582112257402, 0.5144428501729177, 0.703480689479125, 0.6601853727868836, 0.6576558267497823, 0.3529822204643841, 0.8092822076873888, 0.7070364630953495, 0.2751350984297697, 0.3318284396670983, 0.21275318922872233, 0.17326553905018027, 0.3342383345719703, 0.3064066569177961, 0.2176778922631457, 0.21857772881077986, 0.23534717642219138, 0.13020878970273442, 0.23023902003340657, 0.25331537772449486, 0.25208069167857783, 0.2473640280914572, 0.2642035407882961, 0.125176868820154, 0.25068440999941954, 0.1277623714068653, 0.26507856033730226, 0.22598134090577637, 0.27562439289907203, 0.2663378978765908, 0.11793875805504905, 0.10645565306843674, 0.005645740427843715, 9.999999999998899e-05, 0.02195767941937632, 0.004915287791868672, 0.024220970962426924, 0.005806559250895793, 0.0941320935183576, 9.999999999998899e-05, 0.11125105262014401, 0.16673364259840384, 0.1216987579916411, 0.15509953733427972, 0.14833792959246672, 0.06668093345288639, 0.07738397682693754, 0.12511311084742904, 0.14065472903980003, 0.20638121326787984, 0.21115883401519797, 0.05620311341046125, 0.06789934359992422, 0.1253591800881022, 0.11305125605873145, 0.10708116679901192, 0.0881554798702664, 0.10721692063870747, 0.06805568034914089, 0.0828068935039733, 0.09935239785186734, 0.22498120778557085, 0.04437187184508806, 0.0904052230812653, 0.18006179861897342, 0.1501260420628434, 0.22610797849692255, 0.08071298086201173, 0.4950346359563874, 0.520129141586423, 0.5235174476341401, 0.5737625929516315, 0.5461417040812281, 0.525319258965331, 0.5453115392341537, 0.5457872110748829, 0.5316814053968888, 0.1286864917108771, 0.12472987070139441, 0.1392955335494639, 0.13109085817397703, 0.11562795585440322, 0.10479253570622493, 0.12402101407475818, 0.10416969497231099, 0.10340047011537878, 0.19364883844593572, 0.17581558763778415, 0.27911857694443876, 0.15875461205991537, 0.2705543011419873, 0.15665573866418148, 0.22656022746516347, 0.19133236172703227, 0.3797599664726806, 0.39961276487129627, 0.3037752702590193, 0.29264937721437123, 0.32562252875047093, 0.34838021709012335, 0.3948050284544038, 0.24098642447219154, 0.5432771252873414, 0.3619073107653158, 0.26527237405088977, 0.29548101850493114, 0.158473796571857, 0.22592760338095752, 0.26952286616503174, 0.26633781494632314, 0.19568471964569467, 0.20838962285411322, 0.19933708616219803, 0.2010687850557834, 0.2674961087653037, 0.2111418975490782, 0.22981071765771055, 0.2380690291984986, 0.19659997170340338, 0.273944991242156, 0.238011033243276, 0.21239083548088022, 0.21399104860810825, 0.2039632649389984, 0.22337140528285904, 0.2186539320580091, 0.1805057523789253, 0.2124916368807208, 0.2016609093559114, 0.20507706760547062, 0.20076650982636424, 0.7685750250276584, 0.1760953550731248, 0.6395429960062401, 0.6798409094856066, 0.1957908037516516, 0.6106615038422017, 0.789862093023607, 0.7022395438498807, 0.7186135286126445, 0.5235772247432617, 0.2076030086536832, 0.7521578467890312, 0.7228992256787315, 0.16627056868671897, 0.6592884671017156, 0.5372021350833338, 0.7232429482392375, 0.6070399785600741, 0.18088370808648258, 0.18641606640797437, 0.2008124212558925, 0.1860141675310122, 0.1978248604039019, 0.20969842925533133, 0.2167479595531575, 0.19260343990268958, 0.2096989540867331, 0.0836852263646346, 0.09345573341361613, 0.09518989737030314, 0.13428157964933507, 0.0887192688447942, 0.11600002700307344, 0.09767239486158874, 0.10215614741896151, 0.08620325295822895]}, "mutation_prompt": null}
{"id": "9a12c32c-7db3-4ab7-a613-4f4b6f829a29", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.8  # Changed from 1.7 to 1.8 for possibly better balance\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Added line for adaptive velocity clamping\n                max_velocity = 0.5 * np.linalg.norm(global_best_position) \n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Adjusted the cognitive coefficient base to 1.8 for potentially improved balance between exploration and exploitation.", "configspace": "", "generation": 58, "fitness": 0.329667557545389, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.26.", "error": "", "parent_id": "62f62c8e-6dec-4a20-aa1a-574c23da4d8c", "metadata": {"aucs": [0.8473964946840091, 0.8607231098567338, 0.8505728148123151, 0.8557470759199248, 0.8403744982428598, 0.8487658609047045, 0.8186865563990008, 0.821756161156219, 0.8471865985598468, 0.566988815198733, 0.5839215099971412, 0.5034628313048122, 0.6507922476348138, 0.41122089463322853, 0.5669300877923655, 0.524440584593167, 0.45501121449013304, 0.6123681617102681, 0.11413107306214532, 0.1327458023988085, 0.13267263339111146, 0.15487501312393703, 0.1296875242863198, 0.10025909024706692, 0.5145715576315746, 0.1328859179974493, 0.09188893400464027, 0.1489732818524392, 0.10147886487900726, 0.09318818853457, 0.11096471075886949, 0.10406933690521525, 0.09994593682805775, 0.1340510341118064, 0.10059240396783953, 0.08419056938009761, 0.9538910636547647, 0.946862803566462, 0.9555797990820744, 0.9168770974373451, 0.8522788339375974, 0.9167164875187449, 0.9389069485089597, 0.9321589426834282, 0.901709795130745, 0.6924310859358666, 0.7014963251578726, 0.5204707382016416, 0.663975476377719, 0.6431522049364491, 0.5940321472222923, 0.7073279630211756, 0.6267223487614746, 0.6748419871357365, 0.7689215648294218, 0.36090953402101755, 0.6141275441654239, 0.7618687451138443, 0.26668289825970104, 0.18962788017435106, 0.6972924807137694, 0.22619567954291386, 0.22801480782730754, 0.22876085320983153, 0.2504698360371165, 0.23023651952267132, 0.21774174002667201, 0.21315850671747716, 0.16869752659468173, 0.22047518039801806, 0.23769088628887836, 0.204906663780823, 0.12873061677537045, 0.27424692094005854, 0.1875185574151237, 0.24993357774270697, 0.35611870080803043, 0.23326342364972386, 0.44977330917369207, 0.12320316182553048, 0.10754387353607653, 0.0026478710472863654, 9.999999999998899e-05, 0.05832452584596626, 0.008438673087989845, 0.04305612112310431, 0.04860782643520212, 9.999999999998899e-05, 9.999999999998899e-05, 0.04221058372716491, 0.23211910455938434, 0.14024743188249633, 0.20319868951976539, 0.13447206670324008, 0.08550271022989686, 0.05994056394195335, 0.16086770328333877, 0.16383256258210788, 0.1473222718247269, 0.13798671024369868, 0.05559676606360264, 0.18922275855002813, 0.12913825530802658, 0.09826421095017579, 0.1196997725943908, 0.12662998621155497, 0.11263628863779673, 0.0673792492247749, 0.07359559285957074, 0.14318151518860045, 0.0778918300404301, 0.0332756323538872, 0.09453209420087638, 0.13819729885651455, 0.16919376769541616, 0.051864874942878614, 0.0802343782488768, 0.5572460289023851, 0.5284744269834647, 0.5540393036606686, 0.5213412711113548, 0.5562566991275308, 0.5492652104905091, 0.5679815599142323, 0.5418826997732791, 0.6151045239925662, 0.12628690762601202, 0.10869090718400132, 0.10725461850391071, 0.12199412867039883, 0.09912317265606652, 0.10145334191391209, 0.14107969722577984, 0.13688960311432397, 0.09255501880893968, 0.16524472540499024, 0.2042783085943073, 0.2603350654409017, 0.18145167670155504, 0.2436695986105356, 0.17265949996251873, 0.27240221392235275, 0.1906521932381815, 0.2726676944479809, 0.1997590409108615, 0.37348472080158646, 0.3058688019725898, 0.382320695810781, 0.2603216169872963, 0.3867333433421182, 0.21731919077905915, 0.4101160035483137, 0.38898454007139327, 0.15808757399689222, 0.2620280826903404, 0.15406085871611153, 0.27495674344041376, 0.21618045428777288, 0.26876063245755455, 0.19930375202907402, 0.23564350698147085, 0.17492040919110763, 0.23169540243656883, 0.23807781193840505, 0.24741550999432183, 0.23913583489452872, 0.2625284475258005, 0.23354029126147102, 0.23074325389881756, 0.2005777730842908, 0.24773846599667104, 0.19393704647368437, 0.1875511271161835, 0.23726819557636658, 0.21017513671787436, 0.19508947016100386, 0.19897847614413577, 0.2133544672651907, 0.24510537255509957, 0.1744520149769181, 0.6201282668580065, 0.6128776056380142, 0.76623261090752, 0.8197306273795829, 0.7007421576290327, 0.7498531473828092, 0.771901504806554, 0.673601723131253, 0.6668886325914302, 0.6553590663716884, 0.5696819831915644, 0.5960364727156975, 0.6920136615701933, 0.649339341619392, 0.20292253086331302, 0.6344764527831689, 0.48621548938204284, 0.1637714645928161, 0.1998996035042333, 0.20073198818721816, 0.19308584132503592, 0.21122767209363646, 0.18381613840039146, 0.1974873416673225, 0.20354498063939785, 0.19105922919548068, 0.19813611470087455, 0.09966922486872187, 0.07571905010068081, 0.09923846038281625, 0.08832583001619332, 0.0901185929695939, 0.1098222935166645, 0.09477304767798755, 0.08757133054988131, 0.09302867200255693]}, "mutation_prompt": null}
{"id": "3e173db3-0f4d-480a-b00c-6c3d5e1a5ca2", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7  # Changed from 1.5 to 1.7 for enhanced exploration\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.5 * (self.evaluations / self.budget)  # Changed from 0.4 to 0.5\n                \n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Added line for adaptive velocity clamping\n                max_velocity = 0.5 * np.linalg.norm(global_best_position) \n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Adjusted the inertia weight formula for more dynamic adaptability throughout the optimization process.", "configspace": "", "generation": 59, "fitness": 0.32559829062617535, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.26.", "error": "", "parent_id": "62f62c8e-6dec-4a20-aa1a-574c23da4d8c", "metadata": {"aucs": [0.8554624703289804, 0.8721692603115836, 0.8536042055519806, 0.8426088796931508, 0.8555260032816618, 0.8616524381072139, 0.8584487115407375, 0.8590789814421966, 0.8493301117044953, 0.641706233580406, 0.6307202699595913, 0.6040026108798655, 0.6521510274217489, 0.6809087552911646, 0.6877598012457053, 0.36720660416865414, 0.6343056405145917, 0.537290664383639, 0.11136389293505655, 0.13748344383589428, 0.0833289338732609, 0.15169563275295583, 0.12885576663291232, 0.4872143818279071, 0.11594992187300324, 0.44534021285267866, 0.14210263631975106, 0.12724931532363004, 0.11916948228431923, 0.10462119570010131, 0.12593370127688663, 0.12714746857388692, 0.1176004537863029, 0.11802484820653336, 0.11371977551260493, 0.08233652600408081, 0.9516602416018823, 0.944833869918555, 0.9547235410218592, 0.9164125771842292, 0.8396989886576257, 0.9136070833288712, 0.938846011973274, 0.9179058433968293, 0.8942930308966743, 0.6609712213891462, 0.5280392030610676, 0.5332700033235268, 0.7025330277447632, 0.4816736349012958, 0.6306636614277293, 0.7064203660344547, 0.3832057348982124, 0.6802148856974319, 0.3344041275260705, 0.8183222134750158, 0.7696428044607132, 0.3663038711767619, 0.25288467410121307, 0.35437328076076247, 0.1482785715033853, 0.3665215613449101, 0.22520003565101665, 0.1809376299227582, 0.17492791051608803, 0.19860773823524036, 0.1962859193339227, 0.18856403586200454, 0.18690656900961466, 0.21319242351422685, 0.32842989467367834, 0.35419604500497104, 0.25860991257519117, 0.222481485402937, 0.12685952283319224, 0.18546771041862953, 0.25310636449670587, 0.19746686116415935, 0.2499934218939538, 0.28957582328315357, 0.10578722007291308, 0.0012201011119181704, 9.999999999998899e-05, 0.0500065728300737, 9.999999999998899e-05, 0.0019736737894147094, 0.049200906220453366, 0.1038784920798167, 0.000526973999360747, 0.04014479772444923, 0.11682823849937851, 0.10132700895569047, 0.1764234459562607, 0.08584502693568319, 0.07248931136525227, 0.08132314473154534, 0.14338623542525764, 0.1910435240179864, 0.15318371633690042, 0.24827276479561056, 0.06256112193356544, 0.1307074219303731, 0.25679229735259534, 0.10028426844829497, 0.11149376819825918, 0.0951312756156314, 0.09407538157306738, 0.07092769047625369, 0.135526260052109, 0.08438132620049088, 0.2530685013458558, 0.06385314325619218, 0.078471971660113, 0.21093589586538053, 0.13767763242150377, 0.15341889319363822, 0.09049251815414305, 0.5226427863939993, 0.5755044150943918, 0.5122254554549767, 0.5535682905611554, 0.5599544091079796, 0.5469726663655108, 0.6021414680846315, 0.5260844889381424, 0.5599473151929453, 0.09136220172536391, 0.11286516556426618, 0.11516243041334306, 0.13838399284454028, 0.14528978495959222, 0.09815533666711507, 0.14615650791036683, 0.1139580286825792, 0.09868348430374208, 0.2024435690539801, 0.20133898825686292, 0.19450141877464622, 0.17126305205421466, 0.2763281158451071, 0.15990817598676244, 0.18858541916660798, 0.19231620767500002, 0.28304846354696356, 0.2730617496488277, 0.39351019269126963, 0.30630368952424236, 0.3919601354725454, 0.36871877476551995, 0.3726160845831109, 0.23355573238355465, 0.4572363523801187, 0.22697643255873112, 0.2460672541085076, 0.1769237737918642, 0.16632188212252674, 0.1790066338623325, 0.27189430095574685, 0.23413510212917343, 0.24748168002792215, 0.3109109928946059, 0.18838677190318331, 0.259853095036121, 0.20953033868406812, 0.22840827708646716, 0.23303482546929444, 0.21325612476167555, 0.21452065452385405, 0.24196819697574212, 0.21467840393751392, 0.22734394823890347, 0.23856812276748895, 0.20140551425939313, 0.21160935039750228, 0.22061378110378826, 0.19048600287637685, 0.192470451204376, 0.18357976715682867, 0.20307726591596287, 0.2070149219057028, 0.7347714707209512, 0.17147426089997297, 0.7434662412108528, 0.7806598704849397, 0.19529392275564428, 0.803121079391631, 0.5199383516044451, 0.6856188005342483, 0.7418415375663492, 0.42244567458806215, 0.48966072067204336, 0.20155260856476986, 0.6982333234989185, 0.4138839902575818, 0.6981299316429496, 0.5027760426325882, 0.4775617539187881, 0.602936057222418, 0.20883080743605342, 0.2011595799150655, 0.20096053692058258, 0.23526016598318522, 0.19554428612090247, 0.1959619785864316, 0.20425740218000699, 0.23831751712298188, 0.1916352887214925, 0.08432029662647178, 0.104284498154398, 0.09296595518161432, 0.0908447420572418, 0.0820472346065646, 0.140587111858545, 0.08632143374523771, 0.08808610954691498, 0.12275785949114382]}, "mutation_prompt": null}
{"id": "ba92ab96-aafe-4f2b-8eb0-13dd2bb3fd07", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7\n        social_coeff_base = 1.7  # Changed from 1.5 to 1.7 for improved search balance\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                max_velocity = 0.5 * np.linalg.norm(global_best_position) \n\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Enhance exploration by adjusting the social coefficient base to improve search balance.", "configspace": "", "generation": 60, "fitness": 0.31802290350543694, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "62f62c8e-6dec-4a20-aa1a-574c23da4d8c", "metadata": {"aucs": [0.8493721843299672, 0.8579571225535545, 0.8276861236888791, 0.8527359798549843, 0.8549794171910345, 0.8521071737482724, 0.8596483269347137, 0.8548712306938614, 0.8326647180593226, 0.6303157400462103, 0.595688380754236, 0.6605493099921379, 0.4803459722534783, 0.6296174886542187, 0.5377489199186716, 0.5702849402007815, 0.5457603487307139, 0.6358580594562923, 0.13968242498836758, 0.1366058692905936, 0.12905053966228863, 0.1579428254323877, 0.12548671568137337, 0.3189016888340752, 0.17282995937223022, 0.16274572210371574, 0.14548665569791808, 0.09528702054272631, 0.11607383883102451, 0.09602285626932572, 0.13387140501704775, 0.10054530400078443, 0.12259118321039275, 0.16479430963621344, 0.09700278577660648, 0.11684204914587204, 0.9540538923174152, 0.948934574506935, 0.956940818492593, 0.9218473406597967, 0.8673107065715167, 0.9207616247744185, 0.941427685107278, 0.9252244417953448, 0.9083118836868526, 0.6308587753854916, 0.7010646626383189, 0.5969022367249965, 0.6167881237551555, 0.6623014324467188, 0.7058902708762902, 0.6041078165144362, 0.4481223597809273, 0.6785045590078866, 0.35416061941836474, 0.7841659655416936, 0.21357858320628864, 0.21932491579312596, 0.7320181420243015, 0.1898745152839426, 0.21248351695114864, 0.22620220806665747, 0.22527449781853925, 0.23611393716202522, 0.24021605830733594, 0.09556626124457035, 0.20635079370989629, 0.25727598386762374, 0.2480726602716954, 0.23563964015543815, 0.2549866306398031, 0.27047292175345405, 0.1407936970890098, 0.23459226193014937, 0.13024101748169903, 0.27897832851017323, 0.33643915267917657, 0.2284635906763639, 0.24949041250335868, 0.2070879149527166, 0.10747249596367581, 0.11519457425700308, 9.999999999998899e-05, 0.07600358131710638, 0.04692029210122706, 9.999999999998899e-05, 9.999999999998899e-05, 0.05613499269906619, 9.999999999998899e-05, 0.05665761014107107, 0.19363823571678995, 0.10784311172531014, 0.12836035880539642, 0.19618312076636235, 0.09825122781427076, 0.07476683248736937, 0.10099700431499659, 0.1546985372033549, 0.10163818022920879, 0.20874368638989726, 0.05582662523343607, 0.16954605162244496, 0.1317098977699528, 0.09909613436906561, 0.11231373680806245, 0.08575917625485507, 0.0916950766806447, 0.06766471046509281, 0.07241932428165188, 0.09696807784999073, 0.19203913387130855, 0.06993624146732347, 0.11915605697628684, 0.1502937024201223, 0.13570277418034693, 0.1425482911911169, 0.08165209658948258, 0.5866859753601805, 0.519962780080816, 0.5527087015428409, 0.6109129928633408, 0.5823458829920568, 0.5063073289842117, 0.5618898246621807, 0.53595007995841, 0.5569984469600049, 0.12974828779010772, 0.1037290188521296, 0.12198497507635553, 0.12491839384257708, 0.13306013677810913, 0.10848329753458186, 0.13480007654826565, 0.08621758579692762, 0.08339195583657366, 0.18573259311138446, 0.24626407695201136, 0.2062551399167185, 0.17948681846519554, 0.19119451049118164, 0.15277662913086532, 0.18260914710401044, 0.23972697646428764, 0.4558077674576755, 0.21609771804090971, 0.23769177737305136, 0.2943263299994203, 0.32804052742452083, 0.3821615847241795, 0.3735688321357332, 0.25475322234608133, 0.4009231075917613, 0.3461523038095521, 0.18053384854712418, 0.1829127108012898, 0.1810494432582841, 0.3273472869511628, 0.26735440908394037, 0.2080774160568053, 0.21494019040921153, 0.26445538541973357, 0.21438139234935727, 0.2166156981364168, 0.22439739858495444, 0.19789461143804943, 0.22897435808346023, 0.24097723811393956, 0.21315912500874978, 0.22371078522403265, 0.21324248527539014, 0.2268529429786197, 0.2305885376431338, 0.21450819970960988, 0.2191184061082989, 0.2041512801603096, 0.19751868136486972, 0.23504754467463285, 0.1996499590436983, 0.19811433476777895, 0.20252057669507162, 0.18362687142513823, 0.1743918708815252, 0.1816070008460039, 0.724222714498584, 0.1691512228617732, 0.6678211084011096, 0.7677037714355841, 0.6191243236723618, 0.7352127233573295, 0.5826575834459505, 0.20644204424004642, 0.6631323855134159, 0.4548293170016042, 0.465162240574138, 0.46178927204147535, 0.6153265505082803, 0.6816104435062789, 0.6131717792085973, 0.19210532115826262, 0.1963113645411909, 0.2073296715374887, 0.1908427524520906, 0.21115822257062078, 0.18814795996560119, 0.19687279457174323, 0.1827850201821689, 0.20250861645914464, 0.0881190982243748, 0.08065569191471222, 0.0870402595474079, 0.13222256044292535, 0.09306123005897116, 0.11505876819695238, 0.13685086705650806, 0.1462853442548978, 0.08144636813549166]}, "mutation_prompt": null}
{"id": "3e0c6ce1-30d1-4014-a0b6-fd55da0768cc", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7  # Changed from 1.5 to 1.7 for enhanced exploration\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.5 * (self.evaluations / self.budget)  # Altered from 0.4 to 0.5\n                \n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Added line for adaptive velocity clamping\n                max_velocity = 0.5 * np.linalg.norm(global_best_position) \n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce an adaptive inertia weight adjustment for improved convergence speed.", "configspace": "", "generation": 61, "fitness": 0.32559829062617535, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.26.", "error": "", "parent_id": "62f62c8e-6dec-4a20-aa1a-574c23da4d8c", "metadata": {"aucs": [0.8554624703289804, 0.8721692603115836, 0.8536042055519806, 0.8426088796931508, 0.8555260032816618, 0.8616524381072139, 0.8584487115407375, 0.8590789814421966, 0.8493301117044953, 0.641706233580406, 0.6307202699595913, 0.6040026108798655, 0.6521510274217489, 0.6809087552911646, 0.6877598012457053, 0.36720660416865414, 0.6343056405145917, 0.537290664383639, 0.11136389293505655, 0.13748344383589428, 0.0833289338732609, 0.15169563275295583, 0.12885576663291232, 0.4872143818279071, 0.11594992187300324, 0.44534021285267866, 0.14210263631975106, 0.12724931532363004, 0.11916948228431923, 0.10462119570010131, 0.12593370127688663, 0.12714746857388692, 0.1176004537863029, 0.11802484820653336, 0.11371977551260493, 0.08233652600408081, 0.9516602416018823, 0.944833869918555, 0.9547235410218592, 0.9164125771842292, 0.8396989886576257, 0.9136070833288712, 0.938846011973274, 0.9179058433968293, 0.8942930308966743, 0.6609712213891462, 0.5280392030610676, 0.5332700033235268, 0.7025330277447632, 0.4816736349012958, 0.6306636614277293, 0.7064203660344547, 0.3832057348982124, 0.6802148856974319, 0.3344041275260705, 0.8183222134750158, 0.7696428044607132, 0.3663038711767619, 0.25288467410121307, 0.35437328076076247, 0.1482785715033853, 0.3665215613449101, 0.22520003565101665, 0.1809376299227582, 0.17492791051608803, 0.19860773823524036, 0.1962859193339227, 0.18856403586200454, 0.18690656900961466, 0.21319242351422685, 0.32842989467367834, 0.35419604500497104, 0.25860991257519117, 0.222481485402937, 0.12685952283319224, 0.18546771041862953, 0.25310636449670587, 0.19746686116415935, 0.2499934218939538, 0.28957582328315357, 0.10578722007291308, 0.0012201011119181704, 9.999999999998899e-05, 0.0500065728300737, 9.999999999998899e-05, 0.0019736737894147094, 0.049200906220453366, 0.1038784920798167, 0.000526973999360747, 0.04014479772444923, 0.11682823849937851, 0.10132700895569047, 0.1764234459562607, 0.08584502693568319, 0.07248931136525227, 0.08132314473154534, 0.14338623542525764, 0.1910435240179864, 0.15318371633690042, 0.24827276479561056, 0.06256112193356544, 0.1307074219303731, 0.25679229735259534, 0.10028426844829497, 0.11149376819825918, 0.0951312756156314, 0.09407538157306738, 0.07092769047625369, 0.135526260052109, 0.08438132620049088, 0.2530685013458558, 0.06385314325619218, 0.078471971660113, 0.21093589586538053, 0.13767763242150377, 0.15341889319363822, 0.09049251815414305, 0.5226427863939993, 0.5755044150943918, 0.5122254554549767, 0.5535682905611554, 0.5599544091079796, 0.5469726663655108, 0.6021414680846315, 0.5260844889381424, 0.5599473151929453, 0.09136220172536391, 0.11286516556426618, 0.11516243041334306, 0.13838399284454028, 0.14528978495959222, 0.09815533666711507, 0.14615650791036683, 0.1139580286825792, 0.09868348430374208, 0.2024435690539801, 0.20133898825686292, 0.19450141877464622, 0.17126305205421466, 0.2763281158451071, 0.15990817598676244, 0.18858541916660798, 0.19231620767500002, 0.28304846354696356, 0.2730617496488277, 0.39351019269126963, 0.30630368952424236, 0.3919601354725454, 0.36871877476551995, 0.3726160845831109, 0.23355573238355465, 0.4572363523801187, 0.22697643255873112, 0.2460672541085076, 0.1769237737918642, 0.16632188212252674, 0.1790066338623325, 0.27189430095574685, 0.23413510212917343, 0.24748168002792215, 0.3109109928946059, 0.18838677190318331, 0.259853095036121, 0.20953033868406812, 0.22840827708646716, 0.23303482546929444, 0.21325612476167555, 0.21452065452385405, 0.24196819697574212, 0.21467840393751392, 0.22734394823890347, 0.23856812276748895, 0.20140551425939313, 0.21160935039750228, 0.22061378110378826, 0.19048600287637685, 0.192470451204376, 0.18357976715682867, 0.20307726591596287, 0.2070149219057028, 0.7347714707209512, 0.17147426089997297, 0.7434662412108528, 0.7806598704849397, 0.19529392275564428, 0.803121079391631, 0.5199383516044451, 0.6856188005342483, 0.7418415375663492, 0.42244567458806215, 0.48966072067204336, 0.20155260856476986, 0.6982333234989185, 0.4138839902575818, 0.6981299316429496, 0.5027760426325882, 0.4775617539187881, 0.602936057222418, 0.20883080743605342, 0.2011595799150655, 0.20096053692058258, 0.23526016598318522, 0.19554428612090247, 0.1959619785864316, 0.20425740218000699, 0.23831751712298188, 0.1916352887214925, 0.08432029662647178, 0.104284498154398, 0.09296595518161432, 0.0908447420572418, 0.0820472346065646, 0.140587111858545, 0.08632143374523771, 0.08808610954691498, 0.12275785949114382]}, "mutation_prompt": null}
{"id": "42a738ba-fddd-4f38-89fe-73a34b16c992", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor * (global_best_score / (global_best_score + 1e-10))  # Introduced adaptive scaling\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                max_velocity = 0.5 * np.linalg.norm(global_best_position)\n\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce adaptive social coefficient scaling for better convergence.", "configspace": "", "generation": 62, "fitness": 0.3364834505812604, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.26.", "error": "", "parent_id": "62f62c8e-6dec-4a20-aa1a-574c23da4d8c", "metadata": {"aucs": [0.8519729102687411, 0.8650149592345748, 0.8429391538703301, 0.8560240374890559, 0.8497997784314308, 0.8262596554308126, 0.8511560302005161, 0.8586612256182684, 0.8445782504260158, 0.680455919696556, 0.5105545452581806, 0.5650230752337922, 0.46681306583521276, 0.6323582140316268, 0.6690952759155611, 0.5069420102164658, 0.6313693409701608, 0.6253134013618366, 0.13814308202057268, 0.1606011918101944, 0.11942828050493959, 0.44301195354093426, 0.14875816416856358, 0.1550685670214742, 0.10439062555094658, 0.15594914919118652, 0.15818263724623172, 0.4025056083708255, 0.12362181384895488, 0.09765036754714818, 0.13316271919075828, 0.09604600371835381, 0.0886264013562279, 0.12301114968774185, 0.0984605464325019, 0.10133511529948169, 0.9517998799269449, 0.9451060991534312, 0.9550029518674927, 0.9144993412516248, 0.8623290590455938, 0.9161816292787838, 0.9390544848776917, 0.92016423880927, 0.9005600671691723, 0.638314718331078, 0.6645482947609944, 0.5802295049563366, 0.6490697743833856, 0.6428222417976417, 0.6527347772238983, 0.6860544327560384, 0.6546911341420574, 0.6697938288174721, 0.770659110968466, 0.3331452255453152, 0.22331907380769567, 0.8349009946126145, 0.20755728778803584, 0.2632465827082565, 0.20255635411159734, 0.708617943619867, 0.337543531041097, 0.23546072317999167, 0.228775723739582, 0.19525560615467097, 0.2439309552998714, 0.22209537825245584, 0.18174751553185142, 0.23247724831916672, 0.2618953584446563, 0.2217456965165403, 0.22492070699857425, 0.19071555202546486, 0.12686585771308478, 0.20663205669399853, 0.2709530101448189, 0.24334473975254145, 0.2474742242680964, 0.2251227653786092, 0.1038007290973132, 9.999999999998899e-05, 0.0002993184794882753, 0.07451660478967481, 9.999999999998899e-05, 0.026699961488313106, 9.999999999998899e-05, 0.07189018696941674, 0.0015310192246250631, 0.07186807258740724, 0.11239952885603144, 0.09783546763907525, 0.1609245695801641, 0.16889625302722688, 0.08193159440511955, 0.0875007271635152, 0.14134672791144298, 0.15923449880402818, 0.10877667410153302, 0.17401492350436454, 0.059725454377926646, 0.18127028167347503, 0.20950619661932346, 0.08844662371661993, 0.1155296280088054, 0.09969148419227114, 0.12275237910605774, 0.06969423519301055, 0.13579721421275848, 0.11949307297574674, 0.2203654441902836, 0.05695901530689007, 0.08507122849548754, 0.20460498931192062, 0.11586308871389028, 0.1204929238108694, 0.08050759409653097, 0.5358073988995011, 0.544404482269391, 0.564142813848215, 0.5640895768187926, 0.5427518713246509, 0.5435433370326672, 0.5540548203568814, 0.5548521844468665, 0.562910804681831, 0.11247224101785813, 0.1410504346890642, 0.08613051750397516, 0.09945322490895048, 0.15810966949696137, 0.10500970797901688, 0.12135997063772463, 0.1621697737978428, 0.10990886343344297, 0.173507984597143, 0.17270479958303242, 0.31761721361095185, 0.20511957924134394, 0.21392145011153219, 0.17640245114818187, 0.19588272049487288, 0.21461284503277922, 0.36323822879929235, 0.20129762564372367, 0.43277607043391286, 0.25173765440434326, 0.36171366190642074, 0.3613154412804662, 0.36197736861267715, 0.2253114724140195, 0.41892355290556904, 0.2315993350559985, 0.20026749587862736, 0.20578782653184713, 0.18671950075918775, 0.21958309814741095, 0.20605449207542337, 0.29413541284529987, 0.19323364214954064, 0.2702252559033057, 0.2089075476420562, 0.2640277844666189, 0.2111772672945269, 0.2293990296370756, 0.21859270294964306, 0.21516839975223034, 0.22039547594409203, 0.22455077258754486, 0.21154221800107353, 0.2328032856432548, 0.22057824563287243, 0.2315019117073377, 0.2353863829615176, 0.2194122839607755, 0.19799147186541755, 0.21459045700817747, 0.2108509358778904, 0.6252001503263602, 0.2194972918706185, 0.7564829593303981, 0.6220933804142905, 0.7365346164586141, 0.8125323596335777, 0.6515250658781797, 0.7448338314354532, 0.5725669899704108, 0.7281838673328348, 0.813129263144575, 0.600204218094706, 0.46406110257270305, 0.7256557185484137, 0.7622568401157078, 0.3748642370330745, 0.20043621712112225, 0.5176789932964216, 0.597591176111889, 0.6468878621018449, 0.20921744243047768, 0.21337294580334032, 0.1912148262989376, 0.2041569307954656, 0.21590741840108263, 0.19829923976990327, 0.2007070380660646, 0.19543745995516482, 0.18822260022617243, 0.11768122267385694, 0.0883124531759808, 0.09074468197740149, 0.10503346054287754, 0.10895206680252834, 0.10187821575043532, 0.10234084932041043, 0.08425099493975607, 0.11197767339594233]}, "mutation_prompt": null}
{"id": "ea3147fb-9031-4af0-a365-4820265353eb", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7  # Changed from 1.5 to 1.7 for enhanced exploration\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.2 * (self.evaluations / self.budget)  # Adjusted lower bound to 0.5\n                \n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Added line for adaptive velocity clamping\n                max_velocity = 0.5 * np.linalg.norm(global_best_position) \n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Increase inertia weight's lower bound for improved exploitation in later stages of optimization.", "configspace": "", "generation": 63, "fitness": 0.30762638546771304, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.24.", "error": "", "parent_id": "62f62c8e-6dec-4a20-aa1a-574c23da4d8c", "metadata": {"aucs": [0.7948672867243484, 0.7372239101906579, 0.833210063150198, 0.7959399283071824, 0.8092847499944834, 0.8233152799801859, 0.7930634869555524, 0.8088639641615416, 0.8186948510548206, 0.49303186967239465, 0.5197678177933718, 0.38941510128361423, 0.5213239889505747, 0.3195861339352205, 0.4774961459508076, 0.3106042731223635, 0.4480703406631512, 0.39765666931114396, 0.21394717411113284, 0.3258688347489215, 0.16487197273952447, 0.13950620049626572, 0.1105574779081786, 0.13258872688844892, 0.12889120689426126, 0.15303934881031223, 0.10448146144566439, 0.1083653068212227, 0.14251396258611881, 0.10092225034719393, 0.11853504191465913, 0.12263963953697932, 0.12296566396148467, 0.10944832298397955, 0.12017029839643856, 0.1260166230003782, 0.9538544668350637, 0.9471249807164835, 0.9567596414707279, 0.9213777900669508, 0.8570957631605913, 0.9209793529596992, 0.942334134070802, 0.926306360448261, 0.9014165247036274, 0.4688347010262681, 0.45633079561151113, 0.43871900728575086, 0.6073439248359589, 0.48313728757605734, 0.5438033538740425, 0.48639493895746455, 0.49497768552858845, 0.5483886738739032, 0.6473704753890495, 0.6221300503722426, 0.28264060816606285, 0.3588262343997841, 0.5190191887280806, 0.20720619091862102, 0.17118756016078174, 0.775013892910909, 0.22238658513312126, 0.2122169563445162, 0.2155630268074501, 0.18255031077242034, 0.19066567417967395, 0.18802960493005705, 0.2038190103954699, 0.20705363843319968, 0.17761530281483195, 0.19347243477477372, 0.20838751930720079, 0.19398718652812819, 0.12659398572325176, 0.24437617903478526, 0.12432359662531667, 0.24000408738227852, 0.2506923678144293, 0.16982604151421488, 0.10662189658234167, 9.999999999998899e-05, 0.001898129038855445, 0.004969311753895811, 9.999999999998899e-05, 0.0015315353777121121, 0.019958397274794315, 0.13395285117679245, 0.0006230692718639519, 0.0021725439936141067, 0.1755342524247182, 0.11556373599302627, 0.09800805427317572, 0.10385587115960915, 0.07119625236690386, 0.0766805428143238, 0.1325465012452931, 0.13249902791434054, 0.15388762554560398, 0.1497133697513625, 0.05563249144817384, 0.21474809738168688, 0.11923333870330866, 0.09117652651102703, 0.09863036928327618, 0.08977857283530011, 0.09993023978065962, 0.0683171286734876, 0.16482587776031032, 0.09685593388660674, 0.15904021608690633, 0.07905499673950067, 0.09525286440114156, 0.3173840396865023, 0.23123867274669296, 0.21000281245947483, 0.08068426533707607, 0.5099676863397958, 0.5424435816057304, 0.5072272910001552, 0.5296611292774904, 0.5472172160323654, 0.5800853546615368, 0.5301692860794347, 0.5535824258245521, 0.564399602757692, 0.1526940121739122, 0.16297915536239183, 0.09518799647003073, 0.14132077917044883, 0.14948437763058842, 0.09950025133905716, 0.11905033789743025, 0.10983411291006373, 0.13451456071581236, 0.2763308297641899, 0.20409264338268462, 0.2300660667440253, 0.21709917034329196, 0.3322282601191767, 0.1898814536855873, 0.2039317891417861, 0.20305726350140307, 0.32378398971843214, 0.2469456193374593, 0.34896263117373194, 0.31823723147411564, 0.3036383690013663, 0.3999829100064999, 0.31904183451962975, 0.3709139331784469, 0.2902038645737687, 0.27820118239636626, 0.18949506038541286, 0.2782940317174746, 0.1524310517636135, 0.25876560323849074, 0.15853615142512556, 0.2596842676267118, 0.19007938933212798, 0.21594252496830624, 0.19206300784975228, 0.19706855094597964, 0.20680347290511847, 0.20891278063072127, 0.22426451137730274, 0.2256955008235083, 0.21136932106347617, 0.21711622485623516, 0.2307920790870519, 0.21203746708501992, 0.23557978361011278, 0.20606531331964573, 0.35121866579990235, 0.4662704828774059, 0.21051691676369066, 0.21506537495628586, 0.2159832573872611, 0.20910783923460763, 0.19975610241057418, 0.733809221384446, 0.4905501996992342, 0.652370443044161, 0.7326538119138546, 0.19240864958159543, 0.7109318789368209, 0.6823601548892252, 0.5658910354877258, 0.6968185008934149, 0.46007782194408997, 0.6057386363635916, 0.2010839483487511, 0.5450653885695458, 0.1663005915147514, 0.45997857917443263, 0.43910705363277913, 0.3760814792270618, 0.4618904166779352, 0.183443892282662, 0.18492192377310568, 0.21833512605836336, 0.20150808986962998, 0.19718060007851568, 0.20208616903002663, 0.1976511828032228, 0.19393989377372767, 0.21490920440722183, 0.10727453147795041, 0.10275179252155153, 0.08763351914885775, 0.12150739485517192, 0.08399151990141762, 0.10911490008629043, 0.08897317666011895, 0.08627135548667264, 0.08777236574217895]}, "mutation_prompt": null}
{"id": "8e7fda7d-48c2-4c35-a1f8-5d849fe8dfe7", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7\n        social_coeff_base = 1.6  # Changed from 1.5 to 1.6 for enhanced global convergence\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                max_velocity = 0.5 * np.linalg.norm(global_best_position) \n                \n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Enhance global best influence by slightly increasing the social coefficient base for improved convergence.", "configspace": "", "generation": 64, "fitness": 0.32731120243174167, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.26.", "error": "", "parent_id": "62f62c8e-6dec-4a20-aa1a-574c23da4d8c", "metadata": {"aucs": [0.8390291766980508, 0.8506637847888948, 0.8505818839127117, 0.8577019374190129, 0.8465471417210686, 0.8513581418067327, 0.8347672655771734, 0.8543630582212187, 0.8393219568005246, 0.5404531409938786, 0.6562691700728529, 0.58229079050808, 0.6867691607900003, 0.6543550907427829, 0.5822710359198451, 0.4148016259841082, 0.456287586376092, 0.4709015448419799, 0.14349614590788073, 0.15951736445599485, 0.46543138818647745, 0.4927326186014396, 0.13955416467347892, 0.1471650009531622, 0.16617897333656018, 0.11549857023051868, 0.09385261670741651, 0.13934110662908405, 0.1909397311846981, 0.09275370928595017, 0.10150464707085771, 0.10556644371396307, 0.11075258151681233, 0.15757057847906597, 0.09105103706254536, 0.10120512343124188, 0.9538560309139859, 0.9471329013599709, 0.9567893535646792, 0.9189812039628898, 0.8643011183792855, 0.9185693736764123, 0.9421671841299891, 0.922529193798849, 0.9091489919628111, 0.7016794164600961, 0.653744205080895, 0.617438957505336, 0.6763862024142265, 0.5878582112257402, 0.5144428501729177, 0.703480689479125, 0.6601853727868836, 0.6576558267497823, 0.3529822204643841, 0.8092822076873888, 0.7070364630953495, 0.2751350984297697, 0.3318284396670983, 0.21275318922872233, 0.17326553905018027, 0.3342383345719703, 0.3064066569177961, 0.2176778922631457, 0.21857772881077986, 0.23534717642219138, 0.13020878970273442, 0.23023902003340657, 0.25331537772449486, 0.25208069167857783, 0.2473640280914572, 0.2642035407882961, 0.125176868820154, 0.25068440999941954, 0.1277623714068653, 0.26507856033730226, 0.22598134090577637, 0.27562439289907203, 0.2663378978765908, 0.11793875805504905, 0.10645565306843674, 0.005645740427843715, 9.999999999998899e-05, 0.02195767941937632, 0.004915287791868672, 0.024220970962426924, 0.005806559250895793, 0.0941320935183576, 9.999999999998899e-05, 0.11125105262014401, 0.16673364259840384, 0.1216987579916411, 0.15509953733427972, 0.14833792959246672, 0.06668093345288639, 0.07738397682693754, 0.12511311084742904, 0.14065472903980003, 0.20638121326787984, 0.21115883401519797, 0.05620311341046125, 0.06789934359992422, 0.1253591800881022, 0.11305125605873145, 0.10708116679901192, 0.0881554798702664, 0.10721692063870747, 0.06805568034914089, 0.0828068935039733, 0.09935239785186734, 0.22498120778557085, 0.04437187184508806, 0.0904052230812653, 0.18006179861897342, 0.1501260420628434, 0.22610797849692255, 0.08071298086201173, 0.4950346359563874, 0.520129141586423, 0.5235174476341401, 0.5737625929516315, 0.5461417040812281, 0.525319258965331, 0.5453115392341537, 0.5457872110748829, 0.5316814053968888, 0.1286864917108771, 0.12472987070139441, 0.1392955335494639, 0.13109085817397703, 0.11562795585440322, 0.10479253570622493, 0.12402101407475818, 0.10416969497231099, 0.10340047011537878, 0.19364883844593572, 0.17581558763778415, 0.27911857694443876, 0.15875461205991537, 0.2705543011419873, 0.15665573866418148, 0.22656022746516347, 0.19133236172703227, 0.3797599664726806, 0.39961276487129627, 0.3037752702590193, 0.29264937721437123, 0.32562252875047093, 0.34838021709012335, 0.3948050284544038, 0.24098642447219154, 0.5432771252873414, 0.3619073107653158, 0.26527237405088977, 0.29548101850493114, 0.158473796571857, 0.22592760338095752, 0.26952286616503174, 0.26633781494632314, 0.19568471964569467, 0.20838962285411322, 0.19933708616219803, 0.2010687850557834, 0.2674961087653037, 0.2111418975490782, 0.22981071765771055, 0.2380690291984986, 0.19659997170340338, 0.273944991242156, 0.238011033243276, 0.21239083548088022, 0.21399104860810825, 0.2039632649389984, 0.22337140528285904, 0.2186539320580091, 0.1805057523789253, 0.2124916368807208, 0.2016609093559114, 0.20507706760547062, 0.20076650982636424, 0.7685750250276584, 0.1760953550731248, 0.6395429960062401, 0.6798409094856066, 0.1957908037516516, 0.6106615038422017, 0.789862093023607, 0.7022395438498807, 0.7186135286126445, 0.5235772247432617, 0.2076030086536832, 0.7521578467890312, 0.7228992256787315, 0.16627056868671897, 0.6592884671017156, 0.5372021350833338, 0.7232429482392375, 0.6070399785600741, 0.18088370808648258, 0.18641606640797437, 0.2008124212558925, 0.1860141675310122, 0.1978248604039019, 0.20969842925533133, 0.2167479595531575, 0.19260343990268958, 0.2096989540867331, 0.0836852263646346, 0.09345573341361613, 0.09518989737030314, 0.13428157964933507, 0.0887192688447942, 0.11600002700307344, 0.09767239486158874, 0.10215614741896151, 0.08620325295822895]}, "mutation_prompt": null}
{"id": "dff754e9-2303-4088-b7be-afe530526b39", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7  # Changed from 1.5 to 1.7 for enhanced exploration\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.7 + 0.2 * np.cos(np.pi * (self.evaluations / self.budget))  # Adjusted inertia weight formula\n                \n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Added line for adaptive velocity clamping\n                max_velocity = 0.5 * np.linalg.norm(global_best_position) \n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Slightly adjust the inertia weight formula to enhance convergence speed and balance exploration/exploitation.", "configspace": "", "generation": 65, "fitness": 0.3181953150246819, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "62f62c8e-6dec-4a20-aa1a-574c23da4d8c", "metadata": {"aucs": [0.8479707589349565, 0.8202466525172437, 0.8087863141490577, 0.8384685458407102, 0.8144470153476187, 0.7461821790666324, 0.7830516833676022, 0.8428694432259152, 0.8176002682909244, 0.5742704502868119, 0.5385492423312767, 0.3021245361558196, 0.5504835828708828, 0.5951105107775199, 0.48123654013739825, 0.49943209854789195, 0.3731765900790103, 0.5466162930063988, 0.4677436309327182, 0.45601695544826715, 0.11908994659449779, 0.1499414149534628, 0.15185569382005892, 0.15311407093424745, 0.16070691167180706, 0.15380938354705942, 0.13379692651161335, 0.10238839271875988, 0.1141869694250025, 0.09806608397950278, 0.15252503293354325, 0.1355645397573424, 0.14131279877049552, 0.10952150979195518, 0.10874064897967839, 0.11831170660648382, 0.9540390150773896, 0.9489446868252982, 0.9569822857952424, 0.9192960726140015, 0.8678655558857179, 0.9232992515999358, 0.9425625509241395, 0.9274463312158732, 0.9019437822713565, 0.5840167097148998, 0.6363259677212759, 0.5868381481244236, 0.584923592819217, 0.5562364442674362, 0.6073451055091361, 0.6622577726312234, 0.588353801907811, 0.6852700921296844, 0.3575937730701464, 0.2655978654280451, 0.2180078065272053, 0.7264031677015607, 0.8320399375585941, 0.21204853331288753, 0.2138114965548501, 0.22797515489832143, 0.22632972871209678, 0.2556094682162475, 0.2476506347622397, 0.12306767385802264, 0.12728061714290873, 0.2366971769491515, 0.1844788422815935, 0.20850237690631201, 0.19434160478660834, 0.2267699999558216, 0.21268332072477547, 0.21984015128128653, 0.12054130544295671, 0.25058026900112196, 0.12379955618205041, 0.22337078837483504, 0.238665293855859, 0.16552625286612566, 0.1084404804922795, 0.004087823203728802, 9.999999999998899e-05, 0.11080464781471144, 0.006061028909876809, 0.015801571991508, 0.04011256823990095, 9.999999999998899e-05, 9.999999999998899e-05, 0.0015854322573702895, 0.10811140595403268, 0.11822740287660383, 0.18927008970153825, 0.1144926313836635, 0.15086642198810696, 0.0673655476667725, 0.16398885505868588, 0.1547298837627279, 0.10504511229647306, 0.2958427507119965, 0.0586236891749049, 0.10159354991954661, 0.18419765189178638, 0.09461434759559073, 0.1019809158287166, 0.10239328887905252, 0.17034686384153575, 0.060376473607119396, 0.09891300102628342, 0.11814615687157493, 0.32058055752480563, 0.10125157244054694, 0.08460704157821186, 0.23371820633616813, 0.0978515962861144, 0.1428978380670871, 0.08181384560318472, 0.523659376047008, 0.5062623429659223, 0.5544532763058649, 0.5354827992732225, 0.5397812959815057, 0.5324126753752161, 0.543936324652498, 0.5521701468437705, 0.5463379746489476, 0.14136363868410373, 0.15785397184855787, 0.1010039091079874, 0.1257916513828492, 0.1199570210166423, 0.0832518171141986, 0.13171409068761608, 0.08876682379311429, 0.10368768799388306, 0.201261916208053, 0.17523117940273591, 0.18037397662772325, 0.1586551209189614, 0.2032769164738205, 0.1466758777848518, 0.2058485205545605, 0.24436671381385722, 0.3399363529319226, 0.37014394676328777, 0.3414756394427001, 0.24686155762621775, 0.2516998401269974, 0.4339416557520551, 0.46309105753854396, 0.23868956620623083, 0.3575838833833951, 0.24517407335813546, 0.2223003962349076, 0.22039324597358123, 0.16325154396765806, 0.28724500287394117, 0.20089028063805148, 0.26375004938639857, 0.23603886175656275, 0.3199687331768485, 0.2988603363582054, 0.24891787533201226, 0.19722614155257268, 0.21636611360818625, 0.23246159645411069, 0.2206674241398815, 0.24793094975720198, 0.28132685022091597, 0.22706370273775278, 0.2200990063385322, 0.5319211399650146, 0.22746185979810918, 0.2279785832634439, 0.17547745402894122, 0.23865515844453977, 0.19694129674199423, 0.18431335580893982, 0.2028416739531952, 0.19823460768710233, 0.18059039854316017, 0.6841789231273228, 0.7416460392042261, 0.7441844136555821, 0.1939516301049311, 0.7665529645868268, 0.17135340389401177, 0.684251581985158, 0.7046236558385512, 0.6411915321793584, 0.3676272419193327, 0.5391555177460041, 0.6791348026107826, 0.3599427935648729, 0.5745502273960371, 0.5750064348880652, 0.5843588990288342, 0.496685451160508, 0.20192188392661614, 0.20401778800206605, 0.2006445824625679, 0.19039521087896583, 0.19903915583517073, 0.17901816311587515, 0.20046260301882912, 0.18339283114127047, 0.22948491448347375, 0.09431377477982716, 0.09101442499446799, 0.08596465778928453, 0.10151112731612089, 0.07920905593492411, 0.12604024633005462, 0.11722775602045166, 0.09196590237241231, 0.095304660181743]}, "mutation_prompt": null}
{"id": "4b9a3f21-2ef1-4110-a231-0247af90f490", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7  # Changed from 1.5 to 1.7 for enhanced exploration\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.5 * (self.evaluations / self.budget)  # Modified line for inertia weight adjustment\n                \n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Added line for adaptive velocity clamping\n                max_velocity = 0.5 * np.linalg.norm(global_best_position) \n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce an adaptive inertia weight adjustment for improved convergence dynamics.", "configspace": "", "generation": 66, "fitness": 0.32559829062617535, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.26.", "error": "", "parent_id": "62f62c8e-6dec-4a20-aa1a-574c23da4d8c", "metadata": {"aucs": [0.8554624703289804, 0.8721692603115836, 0.8536042055519806, 0.8426088796931508, 0.8555260032816618, 0.8616524381072139, 0.8584487115407375, 0.8590789814421966, 0.8493301117044953, 0.641706233580406, 0.6307202699595913, 0.6040026108798655, 0.6521510274217489, 0.6809087552911646, 0.6877598012457053, 0.36720660416865414, 0.6343056405145917, 0.537290664383639, 0.11136389293505655, 0.13748344383589428, 0.0833289338732609, 0.15169563275295583, 0.12885576663291232, 0.4872143818279071, 0.11594992187300324, 0.44534021285267866, 0.14210263631975106, 0.12724931532363004, 0.11916948228431923, 0.10462119570010131, 0.12593370127688663, 0.12714746857388692, 0.1176004537863029, 0.11802484820653336, 0.11371977551260493, 0.08233652600408081, 0.9516602416018823, 0.944833869918555, 0.9547235410218592, 0.9164125771842292, 0.8396989886576257, 0.9136070833288712, 0.938846011973274, 0.9179058433968293, 0.8942930308966743, 0.6609712213891462, 0.5280392030610676, 0.5332700033235268, 0.7025330277447632, 0.4816736349012958, 0.6306636614277293, 0.7064203660344547, 0.3832057348982124, 0.6802148856974319, 0.3344041275260705, 0.8183222134750158, 0.7696428044607132, 0.3663038711767619, 0.25288467410121307, 0.35437328076076247, 0.1482785715033853, 0.3665215613449101, 0.22520003565101665, 0.1809376299227582, 0.17492791051608803, 0.19860773823524036, 0.1962859193339227, 0.18856403586200454, 0.18690656900961466, 0.21319242351422685, 0.32842989467367834, 0.35419604500497104, 0.25860991257519117, 0.222481485402937, 0.12685952283319224, 0.18546771041862953, 0.25310636449670587, 0.19746686116415935, 0.2499934218939538, 0.28957582328315357, 0.10578722007291308, 0.0012201011119181704, 9.999999999998899e-05, 0.0500065728300737, 9.999999999998899e-05, 0.0019736737894147094, 0.049200906220453366, 0.1038784920798167, 0.000526973999360747, 0.04014479772444923, 0.11682823849937851, 0.10132700895569047, 0.1764234459562607, 0.08584502693568319, 0.07248931136525227, 0.08132314473154534, 0.14338623542525764, 0.1910435240179864, 0.15318371633690042, 0.24827276479561056, 0.06256112193356544, 0.1307074219303731, 0.25679229735259534, 0.10028426844829497, 0.11149376819825918, 0.0951312756156314, 0.09407538157306738, 0.07092769047625369, 0.135526260052109, 0.08438132620049088, 0.2530685013458558, 0.06385314325619218, 0.078471971660113, 0.21093589586538053, 0.13767763242150377, 0.15341889319363822, 0.09049251815414305, 0.5226427863939993, 0.5755044150943918, 0.5122254554549767, 0.5535682905611554, 0.5599544091079796, 0.5469726663655108, 0.6021414680846315, 0.5260844889381424, 0.5599473151929453, 0.09136220172536391, 0.11286516556426618, 0.11516243041334306, 0.13838399284454028, 0.14528978495959222, 0.09815533666711507, 0.14615650791036683, 0.1139580286825792, 0.09868348430374208, 0.2024435690539801, 0.20133898825686292, 0.19450141877464622, 0.17126305205421466, 0.2763281158451071, 0.15990817598676244, 0.18858541916660798, 0.19231620767500002, 0.28304846354696356, 0.2730617496488277, 0.39351019269126963, 0.30630368952424236, 0.3919601354725454, 0.36871877476551995, 0.3726160845831109, 0.23355573238355465, 0.4572363523801187, 0.22697643255873112, 0.2460672541085076, 0.1769237737918642, 0.16632188212252674, 0.1790066338623325, 0.27189430095574685, 0.23413510212917343, 0.24748168002792215, 0.3109109928946059, 0.18838677190318331, 0.259853095036121, 0.20953033868406812, 0.22840827708646716, 0.23303482546929444, 0.21325612476167555, 0.21452065452385405, 0.24196819697574212, 0.21467840393751392, 0.22734394823890347, 0.23856812276748895, 0.20140551425939313, 0.21160935039750228, 0.22061378110378826, 0.19048600287637685, 0.192470451204376, 0.18357976715682867, 0.20307726591596287, 0.2070149219057028, 0.7347714707209512, 0.17147426089997297, 0.7434662412108528, 0.7806598704849397, 0.19529392275564428, 0.803121079391631, 0.5199383516044451, 0.6856188005342483, 0.7418415375663492, 0.42244567458806215, 0.48966072067204336, 0.20155260856476986, 0.6982333234989185, 0.4138839902575818, 0.6981299316429496, 0.5027760426325882, 0.4775617539187881, 0.602936057222418, 0.20883080743605342, 0.2011595799150655, 0.20096053692058258, 0.23526016598318522, 0.19554428612090247, 0.1959619785864316, 0.20425740218000699, 0.23831751712298188, 0.1916352887214925, 0.08432029662647178, 0.104284498154398, 0.09296595518161432, 0.0908447420572418, 0.0820472346065646, 0.140587111858545, 0.08632143374523771, 0.08808610954691498, 0.12275785949114382]}, "mutation_prompt": null}
{"id": "9c6a4458-3cb0-4591-8f96-df051e96f077", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7\n        social_coeff_base = 1.6  # Changed from 1.5 to 1.6 for enhanced global convergence\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                max_velocity = 0.5 * np.linalg.norm(global_best_position)\n\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Enhance global search by slightly increasing the social coefficient base for improved convergence.", "configspace": "", "generation": 67, "fitness": 0.32731120243174167, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.26.", "error": "", "parent_id": "62f62c8e-6dec-4a20-aa1a-574c23da4d8c", "metadata": {"aucs": [0.8390291766980508, 0.8506637847888948, 0.8505818839127117, 0.8577019374190129, 0.8465471417210686, 0.8513581418067327, 0.8347672655771734, 0.8543630582212187, 0.8393219568005246, 0.5404531409938786, 0.6562691700728529, 0.58229079050808, 0.6867691607900003, 0.6543550907427829, 0.5822710359198451, 0.4148016259841082, 0.456287586376092, 0.4709015448419799, 0.14349614590788073, 0.15951736445599485, 0.46543138818647745, 0.4927326186014396, 0.13955416467347892, 0.1471650009531622, 0.16617897333656018, 0.11549857023051868, 0.09385261670741651, 0.13934110662908405, 0.1909397311846981, 0.09275370928595017, 0.10150464707085771, 0.10556644371396307, 0.11075258151681233, 0.15757057847906597, 0.09105103706254536, 0.10120512343124188, 0.9538560309139859, 0.9471329013599709, 0.9567893535646792, 0.9189812039628898, 0.8643011183792855, 0.9185693736764123, 0.9421671841299891, 0.922529193798849, 0.9091489919628111, 0.7016794164600961, 0.653744205080895, 0.617438957505336, 0.6763862024142265, 0.5878582112257402, 0.5144428501729177, 0.703480689479125, 0.6601853727868836, 0.6576558267497823, 0.3529822204643841, 0.8092822076873888, 0.7070364630953495, 0.2751350984297697, 0.3318284396670983, 0.21275318922872233, 0.17326553905018027, 0.3342383345719703, 0.3064066569177961, 0.2176778922631457, 0.21857772881077986, 0.23534717642219138, 0.13020878970273442, 0.23023902003340657, 0.25331537772449486, 0.25208069167857783, 0.2473640280914572, 0.2642035407882961, 0.125176868820154, 0.25068440999941954, 0.1277623714068653, 0.26507856033730226, 0.22598134090577637, 0.27562439289907203, 0.2663378978765908, 0.11793875805504905, 0.10645565306843674, 0.005645740427843715, 9.999999999998899e-05, 0.02195767941937632, 0.004915287791868672, 0.024220970962426924, 0.005806559250895793, 0.0941320935183576, 9.999999999998899e-05, 0.11125105262014401, 0.16673364259840384, 0.1216987579916411, 0.15509953733427972, 0.14833792959246672, 0.06668093345288639, 0.07738397682693754, 0.12511311084742904, 0.14065472903980003, 0.20638121326787984, 0.21115883401519797, 0.05620311341046125, 0.06789934359992422, 0.1253591800881022, 0.11305125605873145, 0.10708116679901192, 0.0881554798702664, 0.10721692063870747, 0.06805568034914089, 0.0828068935039733, 0.09935239785186734, 0.22498120778557085, 0.04437187184508806, 0.0904052230812653, 0.18006179861897342, 0.1501260420628434, 0.22610797849692255, 0.08071298086201173, 0.4950346359563874, 0.520129141586423, 0.5235174476341401, 0.5737625929516315, 0.5461417040812281, 0.525319258965331, 0.5453115392341537, 0.5457872110748829, 0.5316814053968888, 0.1286864917108771, 0.12472987070139441, 0.1392955335494639, 0.13109085817397703, 0.11562795585440322, 0.10479253570622493, 0.12402101407475818, 0.10416969497231099, 0.10340047011537878, 0.19364883844593572, 0.17581558763778415, 0.27911857694443876, 0.15875461205991537, 0.2705543011419873, 0.15665573866418148, 0.22656022746516347, 0.19133236172703227, 0.3797599664726806, 0.39961276487129627, 0.3037752702590193, 0.29264937721437123, 0.32562252875047093, 0.34838021709012335, 0.3948050284544038, 0.24098642447219154, 0.5432771252873414, 0.3619073107653158, 0.26527237405088977, 0.29548101850493114, 0.158473796571857, 0.22592760338095752, 0.26952286616503174, 0.26633781494632314, 0.19568471964569467, 0.20838962285411322, 0.19933708616219803, 0.2010687850557834, 0.2674961087653037, 0.2111418975490782, 0.22981071765771055, 0.2380690291984986, 0.19659997170340338, 0.273944991242156, 0.238011033243276, 0.21239083548088022, 0.21399104860810825, 0.2039632649389984, 0.22337140528285904, 0.2186539320580091, 0.1805057523789253, 0.2124916368807208, 0.2016609093559114, 0.20507706760547062, 0.20076650982636424, 0.7685750250276584, 0.1760953550731248, 0.6395429960062401, 0.6798409094856066, 0.1957908037516516, 0.6106615038422017, 0.789862093023607, 0.7022395438498807, 0.7186135286126445, 0.5235772247432617, 0.2076030086536832, 0.7521578467890312, 0.7228992256787315, 0.16627056868671897, 0.6592884671017156, 0.5372021350833338, 0.7232429482392375, 0.6070399785600741, 0.18088370808648258, 0.18641606640797437, 0.2008124212558925, 0.1860141675310122, 0.1978248604039019, 0.20969842925533133, 0.2167479595531575, 0.19260343990268958, 0.2096989540867331, 0.0836852263646346, 0.09345573341361613, 0.09518989737030314, 0.13428157964933507, 0.0887192688447942, 0.11600002700307344, 0.09767239486158874, 0.10215614741896151, 0.08620325295822895]}, "mutation_prompt": null}
{"id": "3beb7ea4-fd37-4faf-beaa-b4ae5463b72d", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7  # Changed from 1.5 to 1.7 for enhanced exploration\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.6 * (self.evaluations / self.budget)  # Adjusted decay factor from 0.4 to 0.6\n                \n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Added line for adaptive velocity clamping\n                max_velocity = 0.5 * np.linalg.norm(global_best_position) \n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Adjust the inertia weight decay to better balance exploration and exploitation throughout the optimization process.", "configspace": "", "generation": 68, "fitness": 0.32345465423856146, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.26.", "error": "", "parent_id": "62f62c8e-6dec-4a20-aa1a-574c23da4d8c", "metadata": {"aucs": [0.8594233449448352, 0.8691365208096347, 0.8605611560127897, 0.863774252846462, 0.8639905051231354, 0.8697732371674729, 0.8639331215938532, 0.8670704572886409, 0.8565178283799724, 0.6902023309811309, 0.6398854322415195, 0.5030994692512465, 0.24113235802419108, 0.6564065919515643, 0.6134656138629433, 0.46491087697416733, 0.5205523723340129, 0.7126086918019688, 0.5549380188563722, 0.16423368444706288, 0.15469289141725318, 0.5245355850685534, 0.13078316921706012, 0.13048138395954978, 0.10786162399030685, 0.16431606895935258, 0.13194031044925236, 0.12764624001595015, 0.14585382847469486, 0.10685357999821676, 0.08952498856011548, 0.10485013798933929, 0.10320837929174231, 0.12209356091619106, 0.10265950205884344, 0.08802186858685523, 0.949925485411116, 0.944680195621323, 0.9546994042840344, 0.9114560926045093, 0.8303465341610707, 0.9110154278386298, 0.9368120452832935, 0.9157104854129529, 0.8929243939795445, 0.42992030466382536, 0.6276857958664517, 0.5861149969336923, 0.7131840138318334, 0.5379312073351479, 0.5266377056488274, 0.6117002438148305, 0.6330245519984781, 0.5266232595220848, 0.700746814748836, 0.3695118372675156, 0.2933409717377825, 0.8241182649967327, 0.21490207584680887, 0.2709759681374069, 0.2563338659711143, 0.32719378477078687, 0.6547431743965813, 0.2290507279867845, 0.1903236207107344, 0.26455877214612933, 0.16859283424935623, 0.18116489786705348, 0.16900068130064083, 0.19538019938759987, 0.16338950435886912, 0.26835543507715176, 0.3768555471220095, 0.18105545683355984, 0.12573966222984623, 0.18357105894586123, 0.2423228983578226, 0.18928908265913647, 0.27045189804550496, 0.20198189058323024, 0.17702955195354297, 9.999999999998899e-05, 0.005691042851173167, 0.056959352184560386, 9.999999999998899e-05, 0.000710688006514415, 0.07421662305960874, 0.1222359645688399, 0.003043752991518378, 0.004806384083012927, 0.14201657738860862, 0.1401317191499869, 0.1398881275658228, 0.09353050099722093, 0.07318098700886788, 0.08624143837437459, 0.18312630284592601, 0.15947042712500747, 0.16511137157095868, 0.21138309265716615, 0.06340277478453771, 0.18730110668173972, 0.2367720540803412, 0.1287389846695849, 0.10802310111893443, 0.0946450738282354, 0.34244867884951113, 0.07286914300439074, 0.09612492475962209, 0.15981048085322747, 0.22416374161460695, 0.05178698338481136, 0.09465652401298486, 0.29318538981151643, 0.28784663867605, 0.1392113466953746, 0.08011385009643379, 0.585723547921662, 0.5506570346520898, 0.544983440057808, 0.6206076537930578, 0.5423408495215086, 0.5855098228108024, 0.548762540875966, 0.5375741440173492, 0.5621623092177268, 0.11451772131595062, 0.11628794887100535, 0.11762573433087875, 0.12389397030746974, 0.12615479541174301, 0.10575250597405594, 0.1577658327063466, 0.1273859534095796, 0.11803709600311629, 0.20472158897588788, 0.19452391004254044, 0.19489843641063997, 0.24652240857028196, 0.21954288453361215, 0.16640293697824615, 0.20119063522794733, 0.1825970083916444, 0.27860708753763097, 0.20982080716012808, 0.271815432890134, 0.37077686842063373, 0.3489334690621142, 0.3454396084932809, 0.29655682575965947, 0.25632654549505174, 0.4236883356649187, 0.24189255577304558, 0.227324054661322, 0.19043859808259733, 0.16189168808722476, 0.23383945725884092, 0.26061857300971136, 0.2798410166495052, 0.19965046701846867, 0.28402609526242095, 0.16758811864508572, 0.224815165534191, 0.2530194692797779, 0.2178231917521526, 0.219940426428195, 0.23439298316695945, 0.24113865884424113, 0.2383180257909857, 0.21377843455366696, 0.19874876854270873, 0.19508803086564586, 0.2061520927774111, 0.19753458567229387, 0.24454942921087597, 0.20371151788727104, 0.22911002911758382, 0.21335870775123322, 0.20043032482378564, 0.22636270214273535, 0.7275273135049289, 0.17260975196328, 0.7083232653214826, 0.7203240964249185, 0.19279739598304058, 0.8511864503669317, 0.16962577796683853, 0.6796215222502037, 0.7164291388798301, 0.5901357352391856, 0.7833175084663317, 0.20194360838955905, 0.7671379511092815, 0.16535402195866533, 0.20232797113051681, 0.35372881821529, 0.5109184814814344, 0.5049320252239832, 0.2055534823585562, 0.20677592631976238, 0.20666786234877865, 0.1869096465757245, 0.1967429099332636, 0.22093048815852112, 0.20871789786589412, 0.19328576071704318, 0.20487040718459693, 0.09425323640263528, 0.07529575673208333, 0.08796540932425723, 0.09725193685830313, 0.09207515641488284, 0.09548405065843713, 0.11660797240373122, 0.10693766196430965, 0.12379130493302071]}, "mutation_prompt": null}
{"id": "c72ccc0a-6b0b-4bff-a458-a9c9f9a70493", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7  # Changed from 1.5 to 1.7 for enhanced exploration\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.85 - 0.35 * (self.evaluations / self.budget)  # Adjusted inertia weight\n                \n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Added line for adaptive velocity clamping\n                max_velocity = 0.5 * np.linalg.norm(global_best_position) \n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce a minor adjustment to the inertia weight to improve convergence stability.", "configspace": "", "generation": 69, "fitness": 0.31485724080344896, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.25.", "error": "", "parent_id": "62f62c8e-6dec-4a20-aa1a-574c23da4d8c", "metadata": {"aucs": [0.8729937406036301, 0.8748278065401096, 0.8793989019420376, 0.8749161595669096, 0.8617857898615419, 0.8717369116443814, 0.8658271946567204, 0.8748675903333496, 0.8734950287292459, 0.6725402532687654, 0.72238392088194, 0.696263768733234, 0.6476915376620317, 0.709845164395694, 0.6277936347708541, 0.38860725693294906, 0.6248911991515069, 0.681936044602601, 0.12829238534107135, 0.13746234329336515, 0.12982851193051648, 0.16372783477692576, 0.16198531988681097, 0.1194209296270039, 0.11226090762444074, 0.1376136647303361, 0.13362979493440885, 0.10736566210136611, 0.14226398585129862, 0.08158858275701075, 0.11910567563731889, 0.10041981408680878, 0.10526240511259854, 0.1646987203189727, 0.09613121772433386, 0.12550109929265818, 0.9321719202144279, 0.9257818983442664, 0.9449029066119788, 0.8916308430043002, 0.7950221625675373, 0.8676167070513705, 0.8853836217895553, 0.8966974050761538, 0.8658678163016159, 0.6874424495361378, 0.6541047165220584, 0.5407678692924015, 0.44311711091988815, 0.6787550714497355, 0.41167077493996584, 0.5174786342030813, 0.6583779274179907, 0.6066072160295641, 0.30813835068632633, 0.33797680597415025, 0.8326112400554316, 0.909719438759247, 0.21073561343447167, 0.2089691520316418, 0.17529010517752597, 0.1714244198454613, 0.1937311734065852, 0.3841353305982873, 0.18630244598138113, 0.12702945194317894, 0.2503725939463739, 0.26574308154852433, 0.12016390211089001, 0.26196880209708406, 0.28412749772781065, 0.22265783141494544, 0.26175039497236696, 0.2380481092160488, 0.12610778884583984, 0.1907878264721785, 0.207702144304588, 0.18888461483511032, 0.2316968763126529, 0.18096209872405478, 0.20388872247243717, 9.999999999998899e-05, 0.00021994230001365356, 0.13168339824255015, 0.01847882359752917, 0.00010715414642459287, 0.07609748201797939, 0.08031674489424623, 9.999999999998899e-05, 0.01140613736695617, 0.17480800876419744, 0.10756887312135188, 0.1992088275272127, 0.06388728773463115, 0.07063614010947805, 0.09078704950298833, 0.15294149894745857, 0.1809687485518412, 0.11234330002133042, 0.19882846968927126, 0.04360861047077702, 0.17588522906018644, 0.1415872492745801, 0.21375129284611039, 0.1207756596802193, 0.09764097040247166, 0.39363555571305464, 0.0968537558610344, 0.09034571986181017, 0.11173777488784986, 0.15300902850135245, 0.03008717460773025, 0.09360376779590374, 0.23272344545320345, 0.241385792862719, 0.31933124551258896, 0.08166957941723008, 0.5173161639821953, 0.5134818388658846, 0.5946001767674483, 0.5375782520070291, 0.5574986473104666, 0.5244904962088417, 0.5658598165407298, 0.5676972351637888, 0.5470706696953718, 0.11757940092919072, 0.07676805993008784, 0.09300551456628314, 0.12763449006100636, 0.1442456521175718, 0.11042914755061006, 0.1343930380662568, 0.11885544020056804, 0.0706491499019396, 0.2885012804317635, 0.21525584174780388, 0.2781287102376163, 0.18316536749668844, 0.2095868586529045, 0.18358643169168742, 0.2192870370662361, 0.2232201917407396, 0.21784860737212608, 0.23116282582271586, 0.29326143092472334, 0.34717611388725955, 0.2963890880514629, 0.29157282582597677, 0.3030741105730609, 0.23569325947552566, 0.2944296453445381, 0.3806219620946092, 0.2011434710994887, 0.11617764037438538, 0.19062975126095782, 0.27973822810680793, 0.24534789730918338, 0.2176261993613935, 0.2111386814803139, 0.2728583635247517, 0.19077850420461162, 0.22483054389238277, 0.23819453908823107, 0.24268479094013928, 0.22432849380338327, 0.23164976516989433, 0.204906147217095, 0.24926459127056455, 0.23111570604231713, 0.25569879888554703, 0.2145639021866903, 0.1957159767811495, 0.18903497618695386, 0.24395540695900209, 0.21144421103894706, 0.18559564094193137, 0.19090165296740502, 0.24858553541130068, 0.2099272359459371, 0.6934269028693882, 0.709076116054663, 0.18336643826419508, 0.7857012955977059, 0.19611958323440304, 0.793164419223892, 0.16402192909279134, 0.16594481588375165, 0.7193347448572547, 0.5989076017830659, 0.20691548107655577, 0.6233801334722662, 0.16264957594190732, 0.38680953957625175, 0.4813432832091251, 0.4752831779713038, 0.389311709281864, 0.41083815219020525, 0.2113769951867034, 0.1953225848097725, 0.18871853392080917, 0.20534515863991543, 0.19158681350975304, 0.20450243796135292, 0.20401904025891648, 0.2110981541122683, 0.1998492692099828, 0.12157139015729446, 0.10138544109184511, 0.07986834166711776, 0.08356406037613595, 0.09958847987729735, 0.07775705009636169, 0.1124560879361598, 0.09018339763982108, 0.07562108554374425]}, "mutation_prompt": null}
{"id": "2424f2bd-2e12-49af-8c2f-5634fb85f532", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7  # Changed from 1.5 to 1.7 for enhanced exploration\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.8 - 0.4 * (self.evaluations / self.budget)  # Changed from 0.9 to 0.8\n                \n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Added line for adaptive velocity clamping\n                max_velocity = 0.5 * np.linalg.norm(global_best_position) \n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce a slight improvement by adjusting the inertia weight base for enhanced convergence.", "configspace": "", "generation": 70, "fitness": 0.2714059797801095, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "62f62c8e-6dec-4a20-aa1a-574c23da4d8c", "metadata": {"aucs": [0.884699547331693, 0.7179813541321485, 0.8922132781399439, 0.7937794034284127, 0.7245527799652722, 0.7452322698428175, 0.8835859668783967, 0.8057149920384118, 0.6901551137368425, 0.3089641512342356, 0.343423279018353, 0.32796563798050105, 0.45481159605207955, 0.6514714509364143, 0.13140034625060304, 0.06541250626528272, 0.13931248903340698, 0.1784341672537506, 0.0959488957525898, 0.1374459765234347, 0.11585258415360566, 0.49057066884356215, 0.13922716229176912, 0.0971855049431235, 0.10617918504373391, 0.14019419367322794, 0.10966384994682266, 0.09307294983180614, 0.09769692328341084, 0.09020478202323812, 0.1111296555870318, 0.08721784556600376, 0.08452030102372354, 0.09583193594517048, 0.08830602780389285, 0.12953350986087098, 0.87156152338555, 0.8811607847747297, 0.8961342542516191, 0.7668076066862934, 0.6873389397924837, 0.7494919809056648, 0.8060931277717451, 0.7679966135432794, 0.8334847408254901, 0.3823378532772397, 0.49613921549010986, 0.4900660224326162, 0.2993956308921033, 0.23297150902523767, 0.3501447744896766, 0.2748817789778646, 0.28311866177258693, 0.4210953916737682, 0.3534856051142232, 0.8655587471394488, 0.16694593479491504, 0.3729044716504205, 0.2091098169396195, 0.17776999939975557, 0.15629040833875119, 0.14052457288288478, 0.1704253363545396, 0.2955063659672452, 0.13027088433598344, 0.3245624954027554, 0.20450997924469727, 0.16825912567936485, 0.19978739849680982, 0.17590963909849178, 0.14352065772240874, 0.15278667627842857, 0.12289341345422655, 0.16885859758544264, 0.1271267916345067, 0.11112127826489615, 0.2264962731736736, 0.1271335344643585, 0.19373934261846548, 0.12475374564663655, 0.12778675315598143, 0.11628713320472273, 0.024170616797042244, 0.05283004972334271, 0.012275451738168353, 9.999999999998899e-05, 0.04859604875536372, 0.0543879193177218, 9.999999999998899e-05, 0.01190845849788258, 0.20141630512125408, 0.09849070786488501, 0.15828266237556599, 0.07739017539102044, 0.08128157268093095, 0.07938803718971377, 0.1488856465710614, 0.1717044575471327, 0.11620741447950766, 0.08994140617277513, 0.03507428401113444, 0.16264961514755738, 0.15442959431390102, 0.16243550354345937, 0.0955761387053482, 0.14265584836294443, 0.15946456834870382, 0.08617141640698867, 0.10742191941242873, 0.1619304982020785, 0.1866437946494005, 0.07436564084415409, 0.04720210198159713, 0.17677125019772943, 0.1414131736340103, 0.31060564373987787, 0.08014220188108034, 0.5248532375564231, 0.5524830785524318, 0.47080545256055484, 0.511539741363102, 0.4060575843405728, 0.49610207156509545, 0.5447459380328665, 0.5442518044781697, 0.5280014357113205, 0.04235050152348263, 0.09335477078648036, 0.07288139877494959, 0.08115964225701955, 0.11668766961929, 0.11584213700085422, 0.11345929781130726, 0.11417542696467753, 0.1101398621680093, 0.19116745759346243, 0.19946333888291323, 0.21387016042932316, 0.16985943642784374, 0.1918437663434841, 0.17917172430294925, 0.18640632152293135, 0.24251952267049215, 0.17244008146232193, 0.17431451083772276, 0.27773993530501895, 0.2108747689546453, 0.4062200261572533, 0.3212510853204571, 0.2677848141157969, 0.20489580585273848, 0.2658147382126622, 0.22541110851283408, 0.18974183573587167, 0.17894464565870916, 0.14630319980741746, 0.2908376044121478, 0.30778519237214697, 0.16870328847052696, 0.21798399184158312, 0.23946256799603538, 0.18196043918531857, 0.2704162897330681, 0.23944826589619117, 0.23456985722438217, 0.21487141608961058, 0.2257642707069688, 0.23385379428033193, 0.26513991772597967, 0.25895320057636695, 0.20823078948625584, 0.22085001023728468, 0.17940039450597056, 0.18144170877469834, 0.1898721283329432, 0.18655657525776215, 0.1935324932223228, 0.1769698845457609, 0.20789059810414967, 0.1865698905124229, 0.18084403407780436, 0.7641996505977119, 0.186383850487727, 0.8331589401408963, 0.19332376712360988, 0.8094339761869578, 0.6394516306176208, 0.7307905468319933, 0.6298447488213736, 0.411568313264263, 0.655599470606823, 0.2018002202365109, 0.6070563768977579, 0.34271676401429285, 0.41688544555482665, 0.10262481468092666, 0.5178304072758502, 0.34209209719030653, 0.20031353967948473, 0.1912364623571574, 0.19704899568825796, 0.20701675819676546, 0.19737581300373008, 0.18624900384519882, 0.19159352410565822, 0.21081121341279307, 0.19042417432144376, 0.09475092047099731, 0.09947263103251736, 0.07788092444948502, 0.11777193890944859, 0.09133937195704078, 0.08879154000806744, 0.08400826052555732, 0.08960523675588572, 0.10065457128017219]}, "mutation_prompt": null}
{"id": "35a55744-255d-4ff7-883b-9183a2783460", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7  # Changed from 1.5 to 1.7 for enhanced exploration\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.8 - 0.3 * (self.evaluations / self.budget)  # Changed line for improved balance\n                \n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Added line for adaptive velocity clamping\n                max_velocity = 0.5 * np.linalg.norm(global_best_position) \n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Adjust the inertia weight formula for better balance between exploration and exploitation.", "configspace": "", "generation": 71, "fitness": 0.28575239569292415, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.24.", "error": "", "parent_id": "62f62c8e-6dec-4a20-aa1a-574c23da4d8c", "metadata": {"aucs": [0.8718308562523736, 0.7204143158422165, 0.8788429764078295, 0.7724255332658075, 0.7889560463334911, 0.875016760852926, 0.8917359673285786, 0.7202753461724998, 0.860206545812849, 0.2096822027414087, 0.20976119197100307, 0.23706007381683358, 0.33402338155985545, 0.647856683231649, 0.10271649829240936, 0.20184796370047375, 0.6720483239000221, 0.3327543310540102, 0.11429414430502238, 0.1294372525936064, 0.16196352207492493, 0.10602115091394804, 0.11998572474468527, 0.10954233991808793, 0.10181681061070502, 0.13061586438264727, 0.10728141614541442, 0.10654524187186432, 0.11587021673253162, 0.08989402570829697, 0.10427856329921581, 0.0895650804971625, 0.08482433650732746, 0.11427776147860225, 0.09126909336021849, 0.16724326183455307, 0.881226731057935, 0.8815372337957851, 0.8985393360996476, 0.7730307317987746, 0.6938716187196579, 0.7830413590544343, 0.7738598718706343, 0.824249905487284, 0.862974846372506, 0.47992803353314606, 0.4603625356683705, 0.38206531450325887, 0.47043878107643866, 0.37425083103546963, 0.6009845514231553, 0.5101546914739806, 0.2528725111582536, 0.5371572164217804, 0.3857382960635669, 0.6873477347437651, 0.3057466783984122, 0.8201967194814732, 0.21648871158013794, 0.1862862010750278, 0.16721376754276984, 0.1440099326447516, 0.17412992097154167, 0.3013779392773769, 0.14340907393076974, 0.26076454705752705, 0.12372059773524235, 0.2217176406421617, 0.17530698788467958, 0.17973674420240804, 0.1564189800860457, 0.1600417525755916, 0.12389500443588475, 0.1482495294963615, 0.1272695016606764, 0.3345798845772844, 0.2276429114775479, 0.14119868649317047, 0.19951966731587045, 0.12298444162629674, 0.13177438548731402, 0.002915251261289442, 0.09156048322647825, 0.0574910167424969, 0.03296239730075923, 9.999999999998899e-05, 0.04593765146646378, 0.07239974549350303, 9.999999999998899e-05, 0.006854439950866209, 0.13445543868329912, 0.09609651561732058, 0.19433463685562158, 0.07745076969626608, 0.07645731955414847, 0.062340025360199114, 0.1603997301943031, 0.1356064130489556, 0.2127870909515417, 0.09137091635129713, 0.0368609954311403, 0.17099157379417174, 0.19754308096452156, 0.16746351852938057, 0.08427773177392028, 0.14217077022714764, 0.18085207264472059, 0.09471852328783803, 0.10530846779778114, 0.15633002538365492, 0.20171238389253732, 0.04980610210958658, 0.05912584794467257, 0.13631053675916338, 0.1393413296584708, 0.14942159978403413, 0.08011260007184451, 0.5295129351111167, 0.5636416557835259, 0.5333832871111925, 0.5628600285872696, 0.49481692255003706, 0.4668992486944822, 0.5500473127735853, 0.5613058769767754, 0.5408281681801107, 0.08001130126598344, 0.130632926667121, 0.09876044198097711, 0.09298724571391959, 0.1436519426556515, 0.07947383210387238, 0.1265227039378959, 0.09148052550582886, 0.1003703967786711, 0.17423366097037973, 0.2833392548986241, 0.22640110920723056, 0.20643774847408836, 0.18924331830986707, 0.17930620463313773, 0.18347996652826826, 0.17220242203411162, 0.20062326919151985, 0.1640008026144134, 0.3137125721114705, 0.3569746788266852, 0.22815736207726278, 0.26034883481980065, 0.2914097106936684, 0.24811925642173827, 0.2994058826503281, 0.21352378602294453, 0.15124781389998188, 0.24137543109503645, 0.14205694526175738, 0.2362959308134327, 0.26826914293512305, 0.32661439131620995, 0.20800424186625988, 0.21619732987942974, 0.18423671651469165, 0.2365485193263377, 0.24882511251559025, 0.23353373315628612, 0.2212906735573713, 0.24591459236592372, 0.21516831748666432, 0.23820659882144668, 0.20578999051902103, 0.2225686664613994, 0.2202372657541214, 0.19565041248155535, 0.1892597643178887, 0.20152784039097027, 0.17602271966080185, 0.1906187799142819, 0.18707040661679453, 0.20843644937835237, 0.1962627101520502, 0.7550071954474341, 0.8030181396332604, 0.18625433988160345, 0.6467905751376316, 0.1952499289373415, 0.7707201769166947, 0.7537233991044783, 0.6704627036980553, 0.7584426464540539, 0.4903708736926645, 0.6859743575098121, 0.2019293091291584, 0.6493466009139431, 0.3481807126834947, 0.4630311172862479, 0.1034354816850257, 0.45597773382245643, 0.5275243948037258, 0.2132025076000018, 0.19277665646790998, 0.20273201106048122, 0.20437246787807029, 0.1849842952784383, 0.1862888535936943, 0.20414678546042264, 0.2025183112072313, 0.19116938252373128, 0.08594554091528772, 0.07875029652303822, 0.08561744679951733, 0.08455489316614984, 0.09726433038894611, 0.09326712667521808, 0.13894894252476353, 0.09772903545326261, 0.08401166375742031]}, "mutation_prompt": null}
{"id": "0106d9c8-71ba-48f8-af90-cdf447e8a2f0", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.98 + 0.02 * (self.evaluations / self.budget)  # Slightly adjusted adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                max_velocity = 0.5 * np.linalg.norm(global_best_position) \n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Adjust the cognitive coefficient's decay factor for smoother transitions and improved exploration-exploitation balance.", "configspace": "", "generation": 72, "fitness": 0.3197492965135607, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "62f62c8e-6dec-4a20-aa1a-574c23da4d8c", "metadata": {"aucs": [0.8470487202611154, 0.8576967971433489, 0.8558681856865072, 0.8525186743411727, 0.8453888808665374, 0.8488803560686395, 0.8343771594737129, 0.8585713251754684, 0.8484409187466071, 0.6169899258657876, 0.6269360891701616, 0.5621698662643995, 0.6193680422164836, 0.6467826756128454, 0.5739896136603335, 0.4989711272962092, 0.6094908424694258, 0.630901177076302, 0.13448288035091083, 0.1609903098387525, 0.10947034282114343, 0.14205330384214665, 0.13432596988320233, 0.12657891881422223, 0.14848667386162173, 0.13822348068241774, 0.15860768859271213, 0.11033273823461531, 0.11369683269499875, 0.09005568266625597, 0.12680520387641914, 0.10927644095708478, 0.107606864596002, 0.15118412377164792, 0.10359077057477806, 0.12677898927627662, 0.9518180447216543, 0.9469277391558, 0.9566855419047184, 0.9167206899509597, 0.8530109528160703, 0.9166926423419444, 0.9391160430958505, 0.9201233441839358, 0.9023463875919628, 0.6659645938395209, 0.6510882430842595, 0.6304944426068388, 0.5621525517205563, 0.6229795878762862, 0.40206254540381936, 0.6860384068476253, 0.616210399789912, 0.6646874470983221, 0.7935117318881986, 0.7832288286387679, 0.2185351190723207, 0.7042853537073407, 0.33443555209065956, 0.21397973145176352, 0.2070140723228212, 0.34489853789508707, 0.22758374712101292, 0.26202557589244047, 0.23200877111822327, 0.16968336850163668, 0.13046884684249294, 0.23338732385148542, 0.2287824851709651, 0.2066341405790958, 0.22315202601324058, 0.25890904500377687, 0.2293715497264508, 0.24063612597235484, 0.1242579052214342, 0.12807116258297446, 0.25093912579768085, 0.2787081151455203, 0.26082979942905715, 0.2071167110860792, 0.1104263419763083, 9.999999999998899e-05, 9.999999999998899e-05, 0.08065633630743108, 0.061840905748051234, 0.048985542333531695, 0.042600118705118595, 0.05768818889028682, 9.999999999998899e-05, 0.04449422079661891, 0.1508378620930504, 0.12355459210799269, 0.11777965354427156, 0.0807070400266644, 0.05652650036387674, 0.11585716565339166, 0.14275112130417222, 0.15571198320874902, 0.12518793314602228, 0.20145405960912932, 0.06112812734180295, 0.3573569086802044, 0.1478304081759697, 0.11377295771487739, 0.0748427724142624, 0.09323908413921034, 0.09559023666610555, 0.07180149840010963, 0.07576083538665568, 0.1456725923244494, 0.2745744298371372, 0.06590896153194203, 0.08963010024126417, 0.26322607496269945, 0.3023141566747465, 0.14256370993166545, 0.08044836749366346, 0.5769673574846184, 0.522269759342095, 0.5102394405507698, 0.5438226252159853, 0.5344337838977267, 0.5837853649592986, 0.5464019564024806, 0.5515664028923811, 0.5608246248779604, 0.16287292453987523, 0.1227623369843368, 0.12330395158366281, 0.13256405355508682, 0.135899148442992, 0.13825680510268323, 0.15276609616035242, 0.1466031741028584, 0.11150370059621595, 0.19864388508790365, 0.22115730573879577, 0.14840601547631815, 0.15637365215473142, 0.2940839703811401, 0.17806885607416556, 0.18519554599589494, 0.22577371963730675, 0.24723443386138866, 0.28625588424793047, 0.2922442833762098, 0.35165384849341275, 0.3694478852359302, 0.2717584832462858, 0.431342020610597, 0.43079965839814316, 0.283496670636846, 0.2503024287967305, 0.23059661012821842, 0.33156369610557146, 0.14400062146543313, 0.26050888756964097, 0.17384616144958476, 0.2841707371212606, 0.17278514820336555, 0.2876749992278935, 0.17238691314724397, 0.2139052046055745, 0.22014388698292864, 0.21271026087488198, 0.23067457424407722, 0.25667899592410226, 0.2400609761001674, 0.1962032879908796, 0.2192900866602736, 0.21044995173654857, 0.2294673025066486, 0.2023222114929647, 0.20816366215412352, 0.23920405433339464, 0.20078467078200568, 0.18827908731205123, 0.23896669336971121, 0.19540106747120856, 0.20926752528798565, 0.1566909939493657, 0.7386567110874591, 0.1842922862887194, 0.8332335027949727, 0.6244957567656862, 0.7087980213468016, 0.15393746025632515, 0.1679316022789895, 0.7252404250479227, 0.4748655181237179, 0.5746113295164177, 0.5977775832685976, 0.20554246527440356, 0.31996996012865564, 0.5746105234904717, 0.4890969472755021, 0.5877555440392208, 0.5425014369536018, 0.1976538284488456, 0.1771683219150031, 0.2006235957810557, 0.18871395152341197, 0.21362402166491812, 0.19054292160222797, 0.20450525262470443, 0.20820969190870897, 0.21452079478283692, 0.09464442114271876, 0.08968292269383837, 0.08718535208043288, 0.1017903179331483, 0.09828824710135486, 0.1238803350130886, 0.10317785478189812, 0.0890830784462101, 0.07642300459441198]}, "mutation_prompt": null}
{"id": "0640edb1-8b14-4884-940c-74d06b447a98", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7  # Changed from 1.5 to 1.7 for enhanced exploration\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.85 - 0.4 * (self.evaluations / self.budget)  # Adjusted from 0.9 to 0.85\n                \n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Added line for adaptive velocity clamping\n                max_velocity = 0.5 * np.linalg.norm(global_best_position) \n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Adjust inertia weight base for smoother balance between exploration and exploitation.", "configspace": "", "generation": 73, "fitness": 0.30954216358812514, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.25.", "error": "", "parent_id": "62f62c8e-6dec-4a20-aa1a-574c23da4d8c", "metadata": {"aucs": [0.8740958929436792, 0.8758522655248794, 0.87804592609889, 0.8692607669277812, 0.8681448884683531, 0.8799578269554795, 0.8712880468521291, 0.8737092524749468, 0.8675891750962056, 0.29879399264199313, 0.7192113556738889, 0.5912468896838272, 0.6118779162780388, 0.7168615088026804, 0.5575230570416196, 0.525050951850248, 0.6454662638516941, 0.3814461009491109, 0.16939302764620767, 0.12080585944632782, 0.10476443101371191, 0.12320880133172318, 0.13260402964149487, 0.11477879493702581, 0.14229535052544195, 0.3731139573084661, 0.1414676052190854, 0.10461951875299691, 0.1315332575852779, 0.09239055746297875, 0.14127535732711727, 0.09687136761725068, 0.09997194672679033, 0.14083551460900579, 0.09546295033482843, 0.10198134502591727, 0.9305872054380028, 0.9237229253017265, 0.944820499161794, 0.8894874102406691, 0.7829846239089164, 0.867450212836591, 0.8665918096001237, 0.8944867664612398, 0.8655653224175697, 0.6373332038307162, 0.7117395197942167, 0.509241818711401, 0.7452494412956043, 0.5997101683159782, 0.43772561190789894, 0.5668980101832313, 0.645662137654943, 0.6556516945096423, 0.370337460051373, 0.7661036318457308, 0.8343822042863612, 0.8702917276901867, 0.2713290571568262, 0.2691730659269931, 0.22545957078872247, 0.16560228162777024, 0.17133035774431626, 0.5661302140105722, 0.1556920631025045, 0.12708332525986532, 0.2193686729915194, 0.20665302187483603, 0.15069401497340984, 0.24923912183751484, 0.2269700859883088, 0.18802787807871202, 0.28932136233237327, 0.23876679464653072, 0.12640665358944858, 0.18138564449383088, 0.20525671942538526, 0.2180260970527762, 0.21340056264112972, 0.1830593501894069, 0.10866176156204055, 9.999999999998899e-05, 9.999999999998899e-05, 0.06645152832852053, 0.0025189746885327935, 0.025609214792057577, 0.05895930169447727, 0.05900347365147973, 0.0032404190889119278, 0.0019087789796380372, 0.17955094586725895, 0.0939358123673002, 0.2064274272710549, 0.07386787373563186, 0.11678666043073505, 0.05978068708437734, 0.16940774659529212, 0.1712450488612145, 0.12201532170309182, 0.19781124030635389, 0.04776050411138333, 0.14842205288543842, 0.14179427989969484, 0.22318825832063416, 0.13202988955854034, 0.09816299507273885, 0.29069429454579465, 0.09942116842143622, 0.0770333543424444, 0.11885867628195279, 0.17452554518520846, 0.029785953896280026, 0.1222701380568908, 0.34093711511507385, 0.14824003287742837, 0.17837686910304584, 0.08158497048505664, 0.5430287093013044, 0.5090285952567777, 0.6233137146163497, 0.5741475837459133, 0.5285210224039749, 0.5057120025991095, 0.5542473846315703, 0.5572336721649074, 0.5636513405126942, 0.12122329799212783, 0.06995171647936183, 0.08667438633158087, 0.11910810172903641, 0.12072373024615768, 0.09611030831341782, 0.12155095346432754, 0.09795457379725392, 0.10717655344654908, 0.15492690106145512, 0.175943436586252, 0.20043779176231624, 0.29653210070361347, 0.22665485348071057, 0.21999910707174086, 0.2296203552438557, 0.181214919161113, 0.22644036994287353, 0.33589826111250864, 0.39601013878894653, 0.34118885446394764, 0.26566039702276445, 0.27401610489282513, 0.335375189003457, 0.24772702452345086, 0.32141172485356606, 0.21588217183136893, 0.22285625110123242, 0.1295553514123563, 0.17257941062822224, 0.2386374279270692, 0.17303160958976915, 0.13854886535036348, 0.22621727755309062, 0.21406065973660493, 0.18432377186457494, 0.23093060026300227, 0.24037094235088452, 0.23619330693991947, 0.21726447226723788, 0.21443901230909568, 0.20776169083814877, 0.22306208882994916, 0.22862316693952944, 0.2595533919180695, 0.21081034884067862, 0.19084242310673527, 0.20236328571759887, 0.24201188693620534, 0.20848187916554672, 0.18552593764397463, 0.19172823876992984, 0.2486970203672505, 0.22766204123104172, 0.6615131121587411, 0.7764054761843657, 0.1836946458023947, 0.7734355973255981, 0.1960423601819551, 0.7984618964994197, 0.1636111953119571, 0.16583393198536578, 0.15659402258556965, 0.5163633704175701, 0.20558681809015622, 0.615206597269776, 0.1627215718650763, 0.3598672495591556, 0.19610164404631636, 0.5283425372050645, 0.383844134588901, 0.5561170090375503, 0.1953755851276321, 0.18544065264685883, 0.21522068493222812, 0.19675193836965588, 0.2023589275800196, 0.18898186469832157, 0.1904891941109358, 0.19580161882287173, 0.1919468145519263, 0.08783355838665174, 0.07862258543168843, 0.10196201533786264, 0.09932353375595904, 0.09403616954016925, 0.08185062317748126, 0.08999667953965873, 0.103398385452804, 0.08388023834933411]}, "mutation_prompt": null}
{"id": "56f2e24a-0b42-4fb5-82a3-2bf172825581", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.92 + 0.06 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                max_velocity = 0.5 * np.linalg.norm(global_best_position) \n\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Adjusted the decay factor formula to enhance dynamic adaptability in exploration and exploitation balance.", "configspace": "", "generation": 74, "fitness": 0.32763611131056636, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.26.", "error": "", "parent_id": "62f62c8e-6dec-4a20-aa1a-574c23da4d8c", "metadata": {"aucs": [0.8509856920235191, 0.8591145893702984, 0.8555324412280144, 0.846690403469008, 0.8414204896491313, 0.8552026148953836, 0.8453565897788198, 0.8600218837767823, 0.850169168374722, 0.6814650842499106, 0.5084215253861316, 0.6343118023168741, 0.6306334704795509, 0.6453887843202719, 0.6620283583571445, 0.49130708393632727, 0.622257173196994, 0.6367980850952419, 0.1641188941697237, 0.159666620780737, 0.1340671312386439, 0.14879404744300007, 0.14189834327001194, 0.11497078372358371, 0.11225912667007854, 0.14523066804263274, 0.1392104484242096, 0.11252484656272976, 0.14070490620678555, 0.10683874199962462, 0.10626875229199362, 0.10483183123159101, 0.12764247065979184, 0.14420008431416698, 0.09392801585944366, 0.10058426529293685, 0.9460535012821273, 0.9447938912747211, 0.954756578541884, 0.9136252769993675, 0.8520178315804856, 0.9161625369108668, 0.9389272497413792, 0.9220388080400863, 0.8940050740393347, 0.7210396234080786, 0.6805946663591895, 0.6011561612389922, 0.6542030414688675, 0.6532887560950144, 0.6206507265838422, 0.6710149134897064, 0.6728275185192826, 0.5680951833196808, 0.36426455889704834, 0.7950820877584096, 0.20319251619585532, 0.26046767686531425, 0.8477311152467847, 0.21245905252240105, 0.15693915448276152, 0.2225496610355322, 0.22489049690508556, 0.26187268530795405, 0.23090576238830118, 0.2291399411164874, 0.18659047949732321, 0.22692901446895308, 0.09813542451757729, 0.20731745958588377, 0.246241075913315, 0.3084848184190745, 0.18783610719619115, 0.22170234177370962, 0.2125292088968923, 0.23816827716705935, 0.4356945976164184, 0.2884486142042375, 0.25413903433166984, 0.12228056226248629, 0.192300000818732, 9.999999999998899e-05, 9.999999999998899e-05, 0.07614351165743971, 9.999999999998899e-05, 9.999999999998899e-05, 0.02927376952640881, 0.10945190367774726, 0.0017954089273558571, 0.04764501714095981, 0.09427778358636951, 0.14189186431341205, 0.16932121055049554, 0.08472015864987392, 0.10230673505152421, 0.08450978925859165, 0.16684092676042706, 0.158079872183167, 0.15661888047729533, 0.17821372549937786, 0.10543101256521747, 0.2511858598865572, 0.21392918660860627, 0.1270052433134259, 0.08883864369584371, 0.09464043399469124, 0.0925258450793397, 0.08314351103626871, 0.22498212152780928, 0.09150451137786664, 0.2564840507987727, 0.05274318626345664, 0.07957660407792155, 0.1796582211506499, 0.32706518787888306, 0.3840734094465915, 0.09128187604550053, 0.5726667507201664, 0.5566561527171257, 0.52276919421846, 0.5734353068689184, 0.6065532651440495, 0.5508567595771418, 0.5529777592775411, 0.5276219080732109, 0.5623430071032461, 0.13530413346057413, 0.15001884857413372, 0.12791031062664637, 0.11973270707520167, 0.17070622612087138, 0.10958092835903477, 0.1363786716739227, 0.109975974072407, 0.08491830332926764, 0.24416559962709727, 0.2097846785131866, 0.19780203461665435, 0.13977379528168676, 0.1782538784380655, 0.19090606214303885, 0.345568620387229, 0.16808086383538534, 0.22114396215501797, 0.21590557925767329, 0.2908171169949314, 0.323383630536617, 0.37155844183265974, 0.3613618239486973, 0.3693533039352699, 0.21791258899251886, 0.5163210957216484, 0.23618068885064158, 0.18170518722190676, 0.26133529793023147, 0.17604720815456165, 0.321431383020199, 0.26475721342678793, 0.3889446759690155, 0.21649472826725769, 0.24074594344865152, 0.19949222913532394, 0.2375473412672784, 0.2141217779464678, 0.22495025605904895, 0.21585042007797572, 0.21416338251333933, 0.2126685027635543, 0.23107746573375754, 0.26287578953541013, 0.21945241748323863, 0.22988724520114856, 0.4008188724666254, 0.21293976034948014, 0.6256839598543287, 0.22275854555041563, 0.5751354873537793, 0.21848539852605708, 0.19238135572809145, 0.18657805733298327, 0.6532160209523187, 0.1722826086520558, 0.1828886908036783, 0.7440190350214917, 0.19116322419029352, 0.7443763016544562, 0.17056539133389037, 0.6932089740283169, 0.6799809049768106, 0.6209033880728894, 0.20709925200669954, 0.7133909905209339, 0.6069633178727678, 0.42330534342946, 0.19733687529795485, 0.5841683247954406, 0.5201452249232841, 0.5703859402121543, 0.19568267266387318, 0.18709221658993624, 0.19888454034267977, 0.2082306135725699, 0.1878029512135796, 0.18565836312275252, 0.20329560136415048, 0.19951855038258814, 0.17442488988419425, 0.07508835512043566, 0.08505366616079812, 0.09876055124925553, 0.09419567859351441, 0.08451114023375761, 0.08247207924544053, 0.08813816119882412, 0.13402595261439, 0.11220663202981962]}, "mutation_prompt": null}
{"id": "2619feae-b1b0-410e-953a-327bc4e99cfc", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7  # Changed from 1.5 to 1.7 for enhanced exploration\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * ((self.evaluations / self.budget) ** 2)  # Adjusted formula\n\n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Added line for adaptive velocity clamping\n                max_velocity = 0.5 * np.linalg.norm(global_best_position) \n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Adjusted the inertia weight formula to enhance convergence speed towards the end of the optimization process.", "configspace": "", "generation": 75, "fitness": 0.29269680782532476, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.23.", "error": "", "parent_id": "62f62c8e-6dec-4a20-aa1a-574c23da4d8c", "metadata": {"aucs": [0.7343483282392629, 0.8083929967881925, 0.8162898940367681, 0.7409025071424813, 0.7989204655273099, 0.7682890601307251, 0.798993675733761, 0.8212048139611272, 0.7737096361251554, 0.3762522924994355, 0.4541257583320494, 0.3087322249513237, 0.3862663757349003, 0.35815179831712607, 0.4302140105426312, 0.04623988654449518, 0.21319335559288488, 0.34819003539032645, 0.12551366787363494, 0.1375618217185156, 0.11488864385749253, 0.15250255416135694, 0.11767629084107867, 0.12498296147648891, 0.11549275435232154, 0.1406589662383374, 0.1325587433577433, 0.09419029097313303, 0.10728203393945879, 0.10302799557536402, 0.09908588526436157, 0.10106720470009367, 0.11563831025695637, 0.10597506676928403, 0.09751202828548289, 0.12470497334331176, 0.9540725086705927, 0.9489649271621551, 0.9570249058839303, 0.9194967275547556, 0.8728190049127109, 0.9233696775422591, 0.9426428754532282, 0.9275458749770188, 0.9022606829949501, 0.47628469172830157, 0.4589025131869444, 0.5328789863151426, 0.36852978068696185, 0.43098516803442777, 0.34434362544247765, 0.4553313273831211, 0.4632002036028806, 0.4481481728078476, 0.33658691968621, 0.5460688730506, 0.3140451406579372, 0.3499644627876862, 0.361951742999599, 0.21044361205940487, 0.21099878313207732, 0.5018460820234119, 0.22712522658250178, 0.2158912404738751, 0.23778654348389794, 0.14593967598433466, 0.12785530464642691, 0.18083889964911204, 0.18457136853669787, 0.2144536738294931, 0.2075541499883342, 0.2128429701629163, 0.175402602549239, 0.2212144025752547, 0.12075177280692173, 0.23020265306952392, 0.19937590590553, 0.18099847367427324, 0.24474887432774328, 0.16405383185245104, 0.10675207610899284, 9.999999999998899e-05, 0.00011111660594087525, 0.052193568981831806, 0.010548300031689384, 0.020831275942038707, 0.024947047041025905, 0.004459801540212305, 9.999999999998899e-05, 0.0043836094169695805, 0.11353647525931354, 0.08999667676066014, 0.13959209622764412, 0.11359580984750517, 0.1416906976184089, 0.06071031894089973, 0.14556545236114904, 0.15217213926456408, 0.11220028547253891, 0.2337086438361704, 0.051434342795722454, 0.09166438116314457, 0.205729361982406, 0.09311729800145496, 0.08453932615659232, 0.07648502357685394, 0.11417375048128264, 0.06732666520121111, 0.13287085957417166, 0.10443065096187454, 0.2588880101383173, 0.09136103927670469, 0.09932043093873544, 0.3087448996016716, 0.10100208687629952, 0.11082170892953769, 0.08216140182490472, 0.487016481018263, 0.4914423845719592, 0.5172822052127909, 0.5342152759775329, 0.5334425402315057, 0.48621191886104254, 0.5254648531616211, 0.497144274542876, 0.5290339367633463, 0.1331662249150133, 0.11250805730591096, 0.10199077133030299, 0.13718876332036578, 0.1032222343455631, 0.10669478126410126, 0.11163291840760481, 0.08845021928706887, 0.10025020757885483, 0.23623343808205732, 0.1847239396657263, 0.14444130432134294, 0.19442609390666676, 0.30401628079622856, 0.17261294390912885, 0.2560858425774102, 0.24523963335903887, 0.30768119112673487, 0.40960859268350414, 0.29942299637867564, 0.32184935838659334, 0.2446593199482786, 0.35253737683622255, 0.31592078346815844, 0.21308166086707137, 0.3480908446199963, 0.34440660536352863, 0.2235312100756942, 0.21941541373655926, 0.14995763644105609, 0.2667061645968797, 0.2385391288686235, 0.2634605567119457, 0.2065202296876576, 0.28199220205684383, 0.21036304724003563, 0.21313995153015086, 0.20136628313718397, 0.2063971560503961, 0.20857552829497605, 0.24153502182933106, 0.2273256464061082, 0.2215881472498401, 0.24885341723078447, 0.22985799780508387, 0.20622210129895957, 0.19077534502883076, 0.2142386069276938, 0.23473867349114474, 0.23198653753714804, 0.1876803875234384, 0.2285696614517606, 0.21276317422112823, 0.23188164576546388, 0.5833044775564489, 0.676100503948183, 0.7371548089640486, 0.7967464014448213, 0.19426088363571148, 0.6798426796374047, 0.17007263127858152, 0.5778564830884414, 0.6547071870589725, 0.49630988530744335, 0.652076120074595, 0.46063098407538816, 0.6856228483783479, 0.4609252560737461, 0.35051255611959864, 0.5021186141941991, 0.507484553833322, 0.5795684137311036, 0.19347378884419475, 0.19188993612286986, 0.1883480888832202, 0.19105413922808157, 0.20130290016634822, 0.19178856887852547, 0.2089718565275216, 0.20360602265781325, 0.20058137817939603, 0.09030338009752614, 0.07631300306331146, 0.09233346087947669, 0.1431298811562448, 0.08775622963023255, 0.07508518594701674, 0.09444692171134339, 0.10032975163180158, 0.09280480353008547]}, "mutation_prompt": null}
{"id": "27ad5638-595b-47ab-a88e-82e7fe76cc35", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7  # Changed from 1.5 to 1.7 for enhanced exploration\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Slightly increased adaptive velocity clamping factor\n                max_velocity = 0.55 * np.linalg.norm(global_best_position)\n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Slightly increase the maximum velocity clamping factor to allow broader exploration in the search space.", "configspace": "", "generation": 76, "fitness": 0.33808550620148947, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.26.", "error": "", "parent_id": "62f62c8e-6dec-4a20-aa1a-574c23da4d8c", "metadata": {"aucs": [0.8543546074723366, 0.8650149591928635, 0.8429391538835211, 0.856024037500573, 0.8497997784256758, 0.8262596554375692, 0.8511560302122059, 0.8586612256226924, 0.844578250399371, 0.6804559194297055, 0.553453301065772, 0.5864696755469188, 0.4540832813234722, 0.6146663973063258, 0.6716070046811622, 0.5024871307514577, 0.6313693400978858, 0.6379314314902595, 0.1421599568839521, 0.15892786207698995, 0.1026571490385011, 0.4102088703870359, 0.13362891598505378, 0.15498221029743386, 0.10404200586336321, 0.15536986003141062, 0.4381082650766155, 0.3730883118975902, 0.12358147332883418, 0.11040304194834294, 0.1332152199536054, 0.096630059048325, 0.11155445409085474, 0.12212512430145217, 0.1069682861257989, 0.10133506116991264, 0.9517998799272424, 0.9451060991534151, 0.9550029518669542, 0.9144993412516249, 0.862329059045597, 0.9161816292787832, 0.9390544848776956, 0.9201642388092636, 0.9005600671691727, 0.649182484198298, 0.6645482994916447, 0.580229418092866, 0.6273469039655448, 0.5780649994998196, 0.6558300304362024, 0.699824372069114, 0.654691134316503, 0.6406391275600549, 0.770659110968466, 0.6541432618169248, 0.22331907380769567, 0.8349009946126145, 0.20755728778803584, 0.26346442051739627, 0.24703043812813408, 0.6530388938345049, 0.3651019629589157, 0.21537866651384718, 0.23319661813768466, 0.18943802875595572, 0.23776674606202308, 0.23903861507620838, 0.19654165453851846, 0.23588359291181205, 0.24707906704364668, 0.2156163085319288, 0.227016371461205, 0.21240524922564608, 0.1279699674808933, 0.23970029853760544, 0.25464985765148473, 0.23236955295010697, 0.20992333463471113, 0.20831602072479904, 0.10403051951489506, 9.999999999998899e-05, 9.999999999998899e-05, 0.07479619890262912, 9.999999999998899e-05, 0.026541720339024466, 9.999999999998899e-05, 0.04901179435145919, 0.005882865204303367, 0.07230343111536564, 0.10839558547894268, 0.13072114755016806, 0.17411383551784, 0.14212413825935877, 0.08114576608513346, 0.07683252345037095, 0.14309457553775085, 0.16997445681336265, 0.09726248377240587, 0.1740297771065762, 0.05971991196389281, 0.18127182429860134, 0.209506773402644, 0.08844714318550273, 0.1155285250666398, 0.09968885461431654, 0.12276934725563038, 0.06969213982698963, 0.1357972144205376, 0.11949307187233904, 0.22036536895287406, 0.05695901520349089, 0.08507122851636029, 0.20460408729669743, 0.11586308923229716, 0.12049292381090437, 0.08050759409631825, 0.5371027970654918, 0.5377477895815869, 0.5613596709215125, 0.5436005021444162, 0.5337261866682039, 0.5423399752763614, 0.5431497158150006, 0.5439314855110227, 0.5366893150546092, 0.11229973112049974, 0.1410504346808249, 0.08613051496962743, 0.09904004194295268, 0.1570960128873099, 0.09558036917147761, 0.12135988068093562, 0.12059125064591913, 0.10549200851626794, 0.17319802971981335, 0.18056140751657968, 0.34498976257432745, 0.20577410967195642, 0.21429961930195518, 0.18071379015545552, 0.19597747567712132, 0.21331109863145026, 0.3658346477946045, 0.19748536573201358, 0.4312893096131101, 0.4000131744887615, 0.38123316474696356, 0.36282346508806007, 0.3428664912888868, 0.2256605142713941, 0.3500295240129915, 0.23248559689441795, 0.19904592983558467, 0.20498412485870754, 0.16596307053049986, 0.20284781607388325, 0.1949248391944981, 0.18973379797708112, 0.19773228702883516, 0.2705551111534976, 0.2169793337316701, 0.218683619980499, 0.22517306338195897, 0.20628104902884592, 0.19942094632363783, 0.22577718668871583, 0.19561357163333593, 0.22343848954914303, 0.24125672084694294, 0.1928704241898791, 0.22057431119394955, 0.23201855700388385, 0.23537223596140877, 0.21943198706253386, 0.1882246047648184, 0.21451235213273745, 0.21085424938614972, 0.5926091414840107, 0.3865048760230375, 0.764897392866406, 0.6001320143524682, 0.7318755177295386, 0.7912072511999547, 0.7140555213661428, 0.7471669860453023, 0.1686280886451652, 0.7595395197540207, 0.7672917534511293, 0.6032013618517101, 0.5141162647102089, 0.6563363976453481, 0.773841407924222, 0.42981035227202835, 0.5775827767718704, 0.5582455793977945, 0.6185333310907372, 0.653484998044968, 0.19116783041897512, 0.21268010929535863, 0.18800655416784973, 0.1936413266809528, 0.2129319000698623, 0.19138020996342697, 0.19934976484861577, 0.19150703127079438, 0.19255383286741912, 0.07826033380179176, 0.08440337901505024, 0.09229633824390715, 0.11449561248359241, 0.10916339960553356, 0.12641837649640708, 0.08239389819062837, 0.08037573399693354, 0.09398311109095103]}, "mutation_prompt": null}
{"id": "c527eb17-6540-48c4-a4a8-9ca79613ffd3", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7  # Changed from 1.5 to 1.7 for enhanced exploration\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.7 - 0.4 * (self.evaluations / self.budget)  # Modified inertia weight\n\n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Slightly increased adaptive velocity clamping factor\n                max_velocity = 0.55 * np.linalg.norm(global_best_position)\n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Adjust the inertia weight to start at a lower value for better early exploration.", "configspace": "", "generation": 77, "fitness": 0.21776394356710269, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.19.", "error": "", "parent_id": "27ad5638-595b-47ab-a88e-82e7fe76cc35", "metadata": {"aucs": [0.7141153097602528, 0.7510221416024994, 0.7561916017740735, 0.6540808905639568, 0.6097747733915027, 0.648473589887665, 0.6711581615550195, 0.6309708283410693, 0.6191696330133866, 0.040960888663906236, 0.0023814721779821246, 0.046155232696474924, 9.999999999998899e-05, 0.03486547984905497, 0.06341148943637875, 0.005533559398821164, 0.1193692014953609, 0.014017759716070222, 0.07887894132285367, 0.12114112521913101, 0.07731281119435085, 0.08901422542556425, 0.1211724928776915, 0.515286032117237, 0.12016483952106172, 0.09752800388144112, 0.09128312505652225, 0.07308176696281532, 0.08040635321201173, 0.06379849606610655, 0.08558811561349555, 0.08630050923584764, 0.11730352854349113, 0.07530553789038841, 0.07198903381529775, 0.09717244244210266, 0.6345179552279681, 0.8143958652865949, 0.7752090587459413, 0.6326414638380407, 0.6283679611722142, 0.701924048659224, 0.6822196408425685, 0.6229087259572101, 0.649368988552283, 0.20692795610280468, 0.21792002536490662, 0.19888775054106067, 0.21352789260936467, 0.25721954321489315, 0.2505503419793471, 0.23700377665605998, 0.14401503590632203, 0.2376598183158194, 0.22258088007905408, 0.20331757157698116, 0.2136157094138813, 0.3444652299942442, 0.2663500745339361, 0.2163178645819247, 0.16366387471336197, 0.11654551706490823, 0.1633129585878329, 0.1891185599034232, 0.10821391174873274, 0.12161350929919135, 0.178226607349659, 0.15670296348596058, 0.17987106398328034, 0.15606223388058027, 0.1925775227952632, 0.12627130072262038, 0.21239558530339053, 0.28489290477124374, 0.11061935453842431, 0.12107593556468255, 0.11459206471338002, 0.12503255852897965, 0.16747845631822855, 0.10557238369122823, 0.15216912274733918, 9.999999999998899e-05, 9.999999999998899e-05, 0.022062206312889243, 0.008516371508389242, 0.02321575617048599, 0.03988709802813373, 9.999999999998899e-05, 9.999999999998899e-05, 0.10263654676188039, 0.12030362688060159, 0.08628023297743126, 0.26261906145610503, 0.05869715864495284, 0.0600288692000871, 0.07043026202409564, 0.11551493128674084, 0.15437078915647018, 0.09721298473291196, 0.0834389930629984, 0.1040980523945283, 0.1953324269691693, 0.08256598015834138, 0.12420243567575995, 0.054344906051173036, 0.08634325884696259, 0.09654361921166199, 0.053995752434837785, 0.10588478367059106, 0.17103671065421855, 0.13390047688903672, 0.026659642130266725, 0.19580636421045006, 0.056253918364897126, 0.1765093456875576, 0.10442311610155608, 0.06628001618558244, 0.47694395780563836, 0.4377218978673594, 0.45682622459898115, 0.3556518478353028, 0.36085334895577637, 0.35833160790552654, 0.4583270121219065, 0.39990919144019854, 0.5066731859838026, 0.06171674430667595, 0.05549163427582793, 0.06499155458509631, 0.09605481086873713, 0.0929602379145763, 0.11945756897547488, 0.136931623748886, 0.07004784243250683, 0.06713136186555091, 0.17660990060331483, 0.15771172149782764, 0.15414365428611, 0.15080357934075805, 0.17293894586351632, 0.2543811541447901, 0.1898864426653396, 0.16034962726898538, 0.134675041764168, 0.17150281620786823, 0.256445192915011, 0.23252297290368285, 0.2914343433630252, 0.25988656876672867, 0.23672100721343325, 0.21902328713528674, 0.26146481946637856, 0.19232204530799402, 0.13415450527006456, 0.14819247892260135, 0.16411810584507913, 0.22245532268376156, 0.22178851362754426, 0.16215759071490232, 0.18521849279397307, 0.21406785664298345, 0.17850851298566672, 0.23650008038289105, 0.2398146794228717, 0.19544343321129687, 0.2283532070957507, 0.2112818652732673, 0.21300852844896567, 0.22688059184666265, 0.23361781863534514, 0.21800657344722618, 0.19010205329510255, 0.18470489170765858, 0.1840423636580668, 0.18486254924058854, 0.17524672476906467, 0.18276561916415845, 0.19463047534247258, 0.17093149955687736, 0.17961812168880387, 0.1806483863356083, 0.17287323626150286, 0.1852293692265503, 0.6647216838772784, 0.19154133087346303, 0.7804958430237702, 0.11760478499187288, 0.5919261633424044, 0.1509765904410284, 0.45530967294829927, 0.7508568580886217, 0.4179005113820341, 0.34654080235673956, 0.2964042025111716, 0.4234467020456698, 0.10271674158202948, 0.4061425382962194, 0.22401764890394105, 0.22346112603403778, 0.2362874815479069, 0.1964645610879393, 0.2003707483820757, 0.19541121620823843, 0.1874321533717339, 0.21917712884670815, 0.20252684389487208, 0.20506078306628706, 0.09226914578657575, 0.06057861282997712, 0.07114912640561111, 0.10332010600214003, 0.094204141562235, 0.08095750519486122, 0.10422383310161198, 0.08160516761115144, 0.09164517677031558]}, "mutation_prompt": null}
{"id": "3bc3c60d-8512-4644-b64e-33558c019feb", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7  # Changed from 1.5 to 1.7 for enhanced exploration\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.85 - 0.4 * (self.evaluations / self.budget)  # Reduced inertia weight\n\n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Slightly increased adaptive velocity clamping factor\n                max_velocity = 0.55 * np.linalg.norm(global_best_position)\n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Slightly reduce the inertia weight for improved convergence balance.", "configspace": "", "generation": 78, "fitness": 0.3117368134659582, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.25.", "error": "", "parent_id": "27ad5638-595b-47ab-a88e-82e7fe76cc35", "metadata": {"aucs": [0.8716739418094114, 0.8758522655248794, 0.87804592609889, 0.8692607669277812, 0.8681448884683531, 0.8799578269554795, 0.8712880468521291, 0.8737092524749468, 0.8675891750962056, 0.4323413938170122, 0.7192113556738889, 0.5930673171556847, 0.6042083719976743, 0.7168614971542764, 0.5224600086088389, 0.5266910680044732, 0.6454662638516941, 0.44923670446339214, 0.16939301196180656, 0.12426937215659728, 0.10469243284702456, 0.12318455886922697, 0.132562670120437, 0.11828143411930037, 0.14257106799611974, 0.3755947754606589, 0.14146560261406171, 0.10386267579287889, 0.13153305031442653, 0.08842402928283666, 0.14130976697920905, 0.0983726063117043, 0.09511113794748982, 0.13389797980385498, 0.09550814400689545, 0.09973308533995551, 0.9305872054380028, 0.9237229253017265, 0.944820499161794, 0.8894874102406691, 0.7829846239089164, 0.867450212836591, 0.8665918096001237, 0.8944867664612398, 0.8655653224175697, 0.6310438672258553, 0.7117395197942167, 0.4719688779523572, 0.5942671948874103, 0.6435435355629764, 0.4014061833156135, 0.5412637046574611, 0.5848583210767553, 0.6556516945096423, 0.370337460051373, 0.3336619496260389, 0.8343822042863612, 0.8702917276901867, 0.2713290571568262, 0.2691730659269931, 0.22545957078872247, 0.14939751584525274, 0.17133035774431626, 0.5432657758363149, 0.15673271275410117, 0.12708128177961786, 0.2135874375930099, 0.2089411877028754, 0.15209828907254663, 0.25490190205875085, 0.2269116292234743, 0.18824575155475876, 0.3124771324429827, 0.21671490224893764, 0.12624047514513004, 0.16716804520519213, 0.20567043933872364, 0.25513228130054444, 0.16682409214138738, 0.1827301083382198, 0.10868299222326372, 9.999999999998899e-05, 9.999999999998899e-05, 0.0668311130758118, 0.0022977278759294117, 0.005972812865831845, 0.05844396341325375, 0.13553365385605032, 0.004232014145017948, 0.0039257242521278934, 0.1808949227182236, 0.09308946021569242, 0.2070056379046027, 0.08215016391961694, 0.1191724925706299, 0.06805129137137012, 0.20239038935327625, 0.1890444654159975, 0.1297085989374227, 0.1978118439928308, 0.04776136384067653, 0.1484213289048123, 0.1417936434979793, 0.22318813152105377, 0.13202992905208266, 0.09816299507273885, 0.2906940268799857, 0.09942149346887219, 0.0770333543424444, 0.11885867628195279, 0.17452554518520846, 0.02978595158066455, 0.12227013805683928, 0.34093711511507385, 0.14824003287731424, 0.1783768691029971, 0.08158497048505664, 0.5425862695478763, 0.5501388046428645, 0.6240026909096403, 0.5767274240168478, 0.5257767836419733, 0.5049945223443073, 0.540947370015038, 0.5619144174898609, 0.5558088879547158, 0.12126677464640256, 0.069951690845234, 0.0866742944867861, 0.11875765856808651, 0.12100598752718639, 0.09641955548689873, 0.12022940173352015, 0.09795434606154596, 0.10289644505928441, 0.2050471406244042, 0.182790811832241, 0.2004376866599995, 0.2966561658275493, 0.23104672208913457, 0.2170624631679713, 0.22293484050664159, 0.1613910204641763, 0.22607401979765518, 0.36166885692071205, 0.3920844177123596, 0.3381370834163112, 0.2978744694956381, 0.2768470515289787, 0.2777336682557018, 0.24772857113282665, 0.32199755880545233, 0.21605646605577977, 0.22312965985848554, 0.12128760060475974, 0.17129352633258854, 0.2614664059333742, 0.17303163081242978, 0.2505490481255058, 0.22621485395174723, 0.21406478781774252, 0.19004967737044953, 0.24987108271407754, 0.21268858026500348, 0.22793779407239423, 0.23304570956309034, 0.20650893822137273, 0.2245612781388977, 0.26488000338543694, 0.22645044994889196, 0.21553620792428496, 0.21216611539859187, 0.1908476022222606, 0.20433835422026692, 0.242011887832555, 0.20733456915237025, 0.18552591601319213, 0.19172823876983836, 0.2486970203672505, 0.2024585662061681, 0.6880405046342029, 0.7764054761843657, 0.1837248834722266, 0.7576582604020621, 0.19604236001643116, 0.7984610835952924, 0.1635111293016155, 0.1658339319854002, 0.15659402258556965, 0.604674378176121, 0.20558681792465727, 0.6101692482122588, 0.49178496106110303, 0.468525352117945, 0.19765721894744226, 0.6352123763589856, 0.5323941135924002, 0.5718720489039666, 0.19554906718938592, 0.19761304418491576, 0.19858601773836515, 0.19254744054380113, 0.1988239818445965, 0.18856290629283745, 0.18793088593622687, 0.18949035192433594, 0.19212335881190268, 0.11248273808836562, 0.08447796983838074, 0.08790714396424248, 0.08747559856888243, 0.09517263830924694, 0.06911501592113889, 0.11795397822665676, 0.0915387226577088, 0.0794705032055657]}, "mutation_prompt": null}
{"id": "1bf26174-9544-4871-a34f-a1ec9dd9a40b", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7\n        social_coeff_base = 1.4  # Changed from 1.5 to 1.4 for improved balance between exploration and exploitation\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                max_velocity = 0.55 * np.linalg.norm(global_best_position)\n\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Minimize premature convergence by slightly reducing the social coefficient base for better exploration-exploitation balance.", "configspace": "", "generation": 79, "fitness": 0.3207649161605154, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.26.", "error": "", "parent_id": "27ad5638-595b-47ab-a88e-82e7fe76cc35", "metadata": {"aucs": [0.85316167703268, 0.8568019349048474, 0.8669324594838704, 0.8542841230781091, 0.8471613300520768, 0.8467295655786456, 0.8548848766730146, 0.8480419840655453, 0.8339674276587765, 0.5814716793056744, 0.6175965101746367, 0.48395667726312674, 0.5753563889876303, 0.578494248835688, 0.682227686491085, 0.5513713213962552, 0.5125819977105908, 0.5530861501756309, 0.10897897142084167, 0.14711965662689108, 0.13951118543015273, 0.38843679886845406, 0.13822207355068727, 0.12005098347227572, 0.12215288436328209, 0.14047601956564992, 0.1281454804685438, 0.1604273249476541, 0.14000241311436, 0.10261590037080315, 0.12051816640818414, 0.09588339366161314, 0.12758518870452684, 0.12123134789251122, 0.09747553569272893, 0.11804785567472209, 0.9515635555576702, 0.9431763570330578, 0.9546553546001456, 0.9133182288746782, 0.8524031687830403, 0.9151048507783694, 0.938863231583597, 0.9144707568471572, 0.8948346616648901, 0.5666343815736161, 0.7026908206389488, 0.644357196416729, 0.6456850945476977, 0.6704626346821706, 0.6269882818097681, 0.6623773200548164, 0.7022959428370183, 0.6896544639654911, 0.37846521539201516, 0.7623559880923738, 0.6635246645768385, 0.3624419860176803, 0.2690450433194025, 0.2645512600515866, 0.20717018849548086, 0.23090470347340786, 0.198956159995603, 0.23071661964450718, 0.22230340881643496, 0.21718811855054787, 0.16400077065483798, 0.2605594134061825, 0.2563018339414088, 0.18873414405772915, 0.2233791365940706, 0.2014133716409392, 0.18663499297489738, 0.22723857934786063, 0.1276014106484359, 0.25727308360917867, 0.297886670490616, 0.23406785877169645, 0.23716893269197148, 0.12084815428542806, 0.1756010822606502, 0.003890673850733384, 9.999999999998899e-05, 0.028124361348396243, 0.009312214592670176, 0.05448141751375335, 0.06408778122403114, 0.13595860034013274, 9.999999999998899e-05, 0.004303732851782094, 0.14425870588632606, 0.08835726098347163, 0.1436268118801005, 0.09748184671548366, 0.07748879547252507, 0.07947446407978509, 0.16253560999540606, 0.1573641811429659, 0.13367245754226764, 0.14798476014353912, 0.06377199557477709, 0.3408260948280021, 0.13265040076166712, 0.07686261053155607, 0.11608282406862402, 0.09240994142732817, 0.14397931462593294, 0.06936242979264684, 0.09826732055859244, 0.09150357765086015, 0.19932116454858806, 0.057841985681890806, 0.09486649671653158, 0.1822737397420332, 0.11119874804009455, 0.12751594035908564, 0.07918643068343933, 0.5201958926344346, 0.5156329777873747, 0.5482943833003457, 0.535851082015329, 0.5583835755985462, 0.578826571183825, 0.5627640907483933, 0.5657063607587487, 0.5575856928813941, 0.10366607014768303, 0.12875877834988847, 0.09359867196381999, 0.12002359894002024, 0.09825301264945696, 0.1251814445638585, 0.09348303195078311, 0.10514385412615901, 0.11579070537155334, 0.22609013082117657, 0.17537327677257986, 0.2425918898046585, 0.21297914757281, 0.29939918167219426, 0.2038148799363656, 0.19354749508322022, 0.22341555766412946, 0.2733819589009081, 0.20853028431243825, 0.27016138091490516, 0.2925578106405401, 0.3194310733366754, 0.24320179864717284, 0.32636418486103613, 0.3096020463603877, 0.3269431730420247, 0.2895370941648676, 0.2095197510642708, 0.22526642074282044, 0.18169123581107993, 0.29292738115970374, 0.20275501133935436, 0.2720610836847188, 0.2016409754666828, 0.24378410517781834, 0.16274971323159293, 0.2152192193386756, 0.21400312417534229, 0.21192535298423376, 0.24931213362872862, 0.22930527192501937, 0.2221893052591779, 0.24886257623549868, 0.21060238038000056, 0.24574577193491753, 0.20002985781307547, 0.17974331800416754, 0.6056444078410712, 0.20159236655828106, 0.1860553903645623, 0.23053804208098705, 0.21717144890875417, 0.38000627332691006, 0.22957973642735452, 0.8122365035901745, 0.16733698777490735, 0.7749652458829108, 0.7854874183375817, 0.19396914531755738, 0.8251531474592231, 0.1717125193836957, 0.6395835416956115, 0.7067214016323635, 0.5315382352060711, 0.4811749400368517, 0.20036208353795215, 0.6240637409609826, 0.3801950940786083, 0.20294865667542994, 0.51881795991433, 0.5794748476967367, 0.630097796459733, 0.17001352233922462, 0.18971008168102543, 0.217259444593769, 0.21347916477164353, 0.19292228306556103, 0.1959729398948633, 0.2102038791884615, 0.1911211058500718, 0.18078427932276298, 0.09302323144516444, 0.14099763182112368, 0.09255172210273033, 0.08521779598951584, 0.12246987960617972, 0.13551477737500206, 0.13807313659334464, 0.09769878971769286, 0.0770021410205205]}, "mutation_prompt": null}
{"id": "574aa95f-8369-4989-b829-6c952d84095e", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(55, self.budget // 10))  # Increased from 50 to 55\n        cognitive_coeff_base = 1.7  # Changed from 1.5 to 1.7 for enhanced exploration\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Slightly increased adaptive velocity clamping factor\n                max_velocity = 0.55 * np.linalg.norm(global_best_position)\n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Slightly increase population size to enhance diversity in exploration and exploitation within the search space.", "configspace": "", "generation": 80, "fitness": 0.32294052465696277, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.26.", "error": "", "parent_id": "27ad5638-595b-47ab-a88e-82e7fe76cc35", "metadata": {"aucs": [0.8589003592623715, 0.8516634794853635, 0.8602217266330221, 0.8283089928484697, 0.8318806841052064, 0.8574632454704618, 0.8567659247808398, 0.8466149384011216, 0.8516871015540911, 0.6698670141759451, 0.6124678833370362, 0.6880802921481366, 0.6400944733663952, 0.5786571732182728, 0.5844243767289522, 0.6183416385122336, 0.4951566177172638, 0.6661855277073683, 0.12396728407373081, 0.3426118943627636, 0.13797355591456284, 0.15847617758300292, 0.12945132570104212, 0.3431000478096924, 0.1339037194044207, 0.12472327973576647, 0.12094327442393238, 0.10678719071872078, 0.15522680115890797, 0.08908620965294745, 0.10662385334634272, 0.12106580726302996, 0.13575901658176537, 0.14278549467753432, 0.11615957194775961, 0.13652842392584075, 0.92589448122085, 0.949983786096031, 0.9143291165739402, 0.9320919571784585, 0.9429330373526522, 0.9224574409385364, 0.9360111983558973, 0.9099003710333173, 0.9463423360004759, 0.6756529040575847, 0.6766181450630988, 0.6235249624772545, 0.48704313758449735, 0.5072674891098363, 0.6528779992812623, 0.676509992608078, 0.7285396198207195, 0.704966447871636, 0.24102571166517883, 0.31757400031494576, 0.35372809850302467, 0.6542654181525247, 0.27060726374098276, 0.34613461163720116, 0.1756293989974298, 0.7942844615604396, 0.17243356083888028, 0.23945848606241238, 0.25579432775999333, 0.125989944993121, 0.10842116146844727, 0.20345149251136185, 0.2354163999493697, 0.2803194059249473, 0.1618399919945045, 0.25505066810227073, 0.22622366728072907, 0.22777198950566602, 0.23282040776980972, 0.2672014045771499, 0.26105415739838145, 0.2718188952255717, 0.2845703381588668, 0.24314300800651711, 0.22610599510792095, 0.06979169122311213, 0.0716865339984224, 9.999999999998899e-05, 0.05431767727203274, 0.034489696531079916, 9.999999999998899e-05, 0.0756252851498106, 0.002854176030935185, 0.00027054849873853204, 0.12164479068294953, 0.08782748924909589, 0.1508549802515976, 0.089121111438064, 0.10993893452003345, 0.09263760577290936, 0.15762750336607767, 0.1880254976571445, 0.17426183769372217, 0.0690057175944625, 0.060147084023231434, 0.22308722686927207, 0.0835807019723801, 0.2010155393828188, 0.17031299930144195, 0.12254409984353642, 0.18469682742508164, 0.08528974213838825, 0.21285992944435472, 0.07850054776156179, 0.12248826863692264, 0.10786032580227944, 0.11943001678117982, 0.1056444572089349, 0.11187394505948689, 0.13009321289336073, 0.0793288946701276, 0.5805196234493634, 0.5715311274819707, 0.5760486547238475, 0.5901805133275454, 0.5596035281802287, 0.5100752046739176, 0.5331253498838036, 0.5422048375312171, 0.6022752185966729, 0.10574136967699121, 0.12661744220350246, 0.1004013102410447, 0.09675126097981812, 0.11753293983530888, 0.1082250135665288, 0.14002133175281284, 0.1127867494374164, 0.1350427005627265, 0.15873286832973976, 0.2679622177728116, 0.2986550201640935, 0.1913981910419993, 0.1935357576932586, 0.19778203708894315, 0.18819636269676598, 0.2561231850071376, 0.1544661678664857, 0.26782160769486596, 0.23363415608570037, 0.3200274266111798, 0.34148391967114544, 0.23916808670529144, 0.4691066252664291, 0.2978982518791611, 0.39017638730577675, 0.24039240194511424, 0.2778457187026627, 0.24477939150463457, 0.25767579753681735, 0.33991687048315244, 0.2424063496021639, 0.17481761327476397, 0.1891886726551707, 0.23471649623105928, 0.21408104328034183, 0.21928342282569857, 0.2148197532901146, 0.21812170036937306, 0.22434553359694231, 0.24176996736645384, 0.2253465050964002, 0.23396319636312768, 0.23900580493270918, 0.2196606368359061, 0.2012280821814928, 0.18638593449934915, 0.20727587308394035, 0.6290976846101951, 0.2008985982982635, 0.18819912358948088, 0.20850547620720283, 0.20387556671047957, 0.22251148076631688, 0.15719094342652729, 0.16677606113401122, 0.14909809735062263, 0.7634138118825291, 0.19554818723106326, 0.8370888813539528, 0.7557098874579706, 0.7475070218534491, 0.6530197237635462, 0.5390133886829811, 0.7121570017660206, 0.4770659852277145, 0.5644433977524156, 0.3116341049208261, 0.1997243164961977, 0.16285509970904732, 0.6949472740295815, 0.5253052248726164, 0.20809542396533365, 0.18785680845515085, 0.2192119444831545, 0.1919967914258417, 0.18303675110108075, 0.1980200095078325, 0.20840816670832096, 0.19256268286021427, 0.2129373042847046, 0.08119593050839047, 0.0849220761553604, 0.07653838422718728, 0.14837504552542324, 0.08172369973193128, 0.10300405353170494, 0.08108139537924453, 0.10211023732096458, 0.09064310728559433]}, "mutation_prompt": null}
{"id": "80e6f7aa-1397-414c-b370-e5c437f741c3", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 2.0  # Adjusted for balanced exploration and exploitation\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.7 + 0.2 * np.cos(np.pi * self.evaluations / (2 * self.budget))\n                \n                decay_factor = 0.94 + 0.04 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                max_velocity = 0.6 * np.linalg.norm(global_best_position)  # Adjusted for improved convergence\n\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Enhance exploration and convergence by introducing a novel dynamic inertia strategy and adaptive parameter tuning.", "configspace": "", "generation": 81, "fitness": 0.27147551605189363, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": "27ad5638-595b-47ab-a88e-82e7fe76cc35", "metadata": {"aucs": [0.6434976294126049, 0.7348797543218801, 0.6414457009677279, 0.7516065648454906, 0.7872786882756035, 0.7361136343093786, 0.6502997931191805, 0.7360808912620094, 0.7194085507514059, 0.08487321167854367, 0.2521654364982825, 0.21642010352116947, 0.22230571586905756, 0.18177596161185405, 0.2360445246633308, 0.22169766806006808, 0.06610578545824175, 0.1479212382054773, 0.12368176913566253, 0.10969889585424986, 0.13525158960314088, 0.12644365902946264, 0.10620919204190249, 0.12257868931654903, 0.11925742800686889, 0.12155375288613635, 0.1195199171931357, 0.11950829114996164, 0.1086373637100434, 0.10397825654241077, 0.12742004288845088, 0.11157910080952937, 0.10420569884234754, 0.11841601558264825, 0.11671161867381818, 0.10686822886373071, 0.9496469193297871, 0.9474348596964696, 0.9586830492667854, 0.9258209114800152, 0.8820834307698396, 0.9278829937454642, 0.9466210101886262, 0.9362026311144288, 0.9086017415685571, 0.4539651353606863, 0.42551758593438904, 0.33363175362756314, 0.3595430000665967, 0.38445218078420207, 0.48266253596792286, 0.34062675057292846, 0.3923057370533142, 0.42637682509134245, 0.4571665446205848, 0.6161933568835501, 0.4571100791791042, 0.5116736438579093, 0.3393307296570125, 0.21208556278479596, 0.2903427253490509, 0.30537664458441827, 0.2258660507282425, 0.17197705106086292, 0.23973225894838956, 0.13583121661683506, 0.16433327322822822, 0.15977012404824764, 0.15436906752309076, 0.21951114003237948, 0.399601068446624, 0.18314416690858604, 0.17565237877449547, 0.1841313800957639, 0.1423890886305842, 0.19997591371764045, 0.2014110045130899, 0.20850256657237187, 0.18998037179139904, 0.1859548441645048, 0.2252965590122573, 9.999999999998899e-05, 9.999999999998899e-05, 0.005998503829951596, 9.999999999998899e-05, 0.004447741465903654, 0.0398112940855857, 0.0006771762804405057, 9.999999999998899e-05, 0.00849893648374822, 0.12887362911362976, 0.0888242216604831, 0.10598029584922064, 0.10023415881112019, 0.12249478357874255, 0.0678957550243493, 0.10574789188031153, 0.10484050757470542, 0.09532065891091601, 0.1087362132901859, 0.04513885835054954, 0.03973108493841904, 0.07946555459845217, 0.15261534088638784, 0.07128740270223988, 0.12162166300348165, 0.10791435273181882, 0.05597796915731856, 0.21449315927469392, 0.06559075038998308, 0.08773633272709103, 0.07741461018329032, 0.09384901530488354, 0.13859578607103062, 0.17021775258809702, 0.13071216068256386, 0.07887493853724648, 0.4865423972808005, 0.4569885071312735, 0.48951823359207025, 0.48900131747256215, 0.5009698348405434, 0.45163221729641956, 0.5099947505853447, 0.4955681974632379, 0.4238300315732757, 0.0837606446908834, 0.09673053319058322, 0.07984803351329517, 0.12022512060485824, 0.09843528374301636, 0.10794162208001123, 0.12079907023389658, 0.1368843395600532, 0.09938623759927101, 0.14960785057652792, 0.16686894331117597, 0.23344593267514924, 0.16050602450727858, 0.26123930615336277, 0.2618829980739662, 0.16393207621921158, 0.15546654940663596, 0.21140732955763542, 0.2646622537555854, 0.2673968760719213, 0.28082472137398795, 0.295390571228042, 0.3577050534492807, 0.3233575337889677, 0.24795056161457363, 0.3350640873157652, 0.27421758692546305, 0.23276122596862747, 0.19555934783766638, 0.1564741249778273, 0.2439704570448915, 0.2536705098932035, 0.23163377601963664, 0.18951684010973513, 0.21304453770638998, 0.2527453676324719, 0.18414926217547145, 0.22230689746154764, 0.2420150764202348, 0.20396557250524294, 0.23677771302245254, 0.22612197410527957, 0.21753629958411602, 0.2169749090937806, 0.22700267390426987, 0.22573608761889685, 0.22971344596870402, 0.1931527085518353, 0.2145949070067641, 0.21688985333925936, 0.19555903748102355, 0.23006573585338186, 0.2802851681349212, 0.21111469864779597, 0.5401622882739331, 0.5734407433150557, 0.5725827382971109, 0.6986029007487005, 0.19563276766920945, 0.6299126325849833, 0.17895269696896243, 0.5940375844406607, 0.6400317556587962, 0.524512478554143, 0.20703424286034733, 0.41847067754931466, 0.50197401354747, 0.6916387039813947, 0.47426561174763227, 0.5216031788678768, 0.4802731225568315, 0.16482073741072256, 0.18551412789397315, 0.1834937857852893, 0.22912881749626535, 0.1896739078131432, 0.2086954337564184, 0.2009630500360483, 0.20572661253420865, 0.1996372134756853, 0.18708063091124372, 0.09148353742077364, 0.07654685560701657, 0.08138335427292909, 0.07700150588689503, 0.07904957616305786, 0.07386777089384888, 0.0910888035116002, 0.09425738142867557, 0.08362266449031064]}, "mutation_prompt": null}
{"id": "382e4bd0-f5f6-4bd6-aba9-2ed474d4dae2", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7  # Changed from 1.5 to 1.7 for enhanced exploration\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * ((self.evaluations / self.budget) ** 1.1) * decay_factor  # Change made here\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Slightly increased adaptive velocity clamping factor\n                max_velocity = 0.55 * np.linalg.norm(global_best_position)\n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduced a progressive increase to the social coefficient for better convergence towards the global best.", "configspace": "", "generation": 82, "fitness": 0.3150200100773559, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "27ad5638-595b-47ab-a88e-82e7fe76cc35", "metadata": {"aucs": [0.8562678023306538, 0.8546095246873844, 0.8545369480505044, 0.8541213464446238, 0.8272884431254818, 0.8461771885961527, 0.841433653024988, 0.8498885172089593, 0.8413800195261094, 0.632191001645863, 0.6028277403536759, 0.5412116437211725, 0.5538939084601686, 0.625014370994148, 0.6186156134954928, 0.600610684607169, 0.6113974195820775, 0.5427533837451226, 0.1313976877551788, 0.15091944785787859, 0.1445689026856568, 0.5497686496793948, 0.11503660282492567, 0.3674422745251055, 0.09226975214840549, 0.15745676267910935, 0.1486431756741935, 0.12126960141766996, 0.11782181776222045, 0.07893118563401369, 0.1161980273187806, 0.10466273660098957, 0.1128829726633378, 0.12769116358025256, 0.09632552892783386, 0.11602666783978544, 0.9449733997870757, 0.9339713576933398, 0.948637672163402, 0.9008967793760441, 0.7945067798593828, 0.9134470604749099, 0.932192032531642, 0.9001855312092278, 0.8808447923150426, 0.7239407250091787, 0.6565809263790393, 0.603060059020875, 0.6479232502067439, 0.6673125421225929, 0.681022614062101, 0.6349974814409722, 0.6620433829762926, 0.60021876574987, 0.3593571378322966, 0.8233426236156267, 0.16466744039157222, 0.27241620255256127, 0.26747620869644007, 0.18745436909207136, 0.20452824677137083, 0.22523199801675386, 0.36315564473770934, 0.2749614713270495, 0.20005268316870917, 0.31919585234973424, 0.126810723011898, 0.2638285128162471, 0.1832807006019489, 0.23604330297900833, 0.24147898146706326, 0.2698673478329028, 0.19335063259491603, 0.2333303905365567, 0.1238633287113251, 0.22793928908678207, 0.18355329509151308, 0.2633006273241888, 0.30381328440838307, 0.15210390529257634, 0.1619730646450509, 9.999999999998899e-05, 9.999999999998899e-05, 0.06629021737300789, 0.04802000376589444, 0.021909677359393753, 0.07497259280622315, 9.999999999998899e-05, 9.999999999998899e-05, 0.04347110127893716, 0.1431122580856099, 0.17359082667343084, 0.17858291434294038, 0.12074773045376441, 0.07722439692143868, 0.05526493205205063, 0.14428209821342153, 0.14995935340975663, 0.11077391202332076, 0.17182539945323205, 0.05989994659888431, 0.12330381955102787, 0.2430355172305707, 0.16014570807449513, 0.07419391808680031, 0.11895520804925275, 0.0944559360854309, 0.0684755763002064, 0.06884991276687158, 0.0779695823464317, 0.11527815281868148, 0.033828678376545906, 0.07714595486986309, 0.14052007540979017, 0.1434618923305787, 0.13332084938183686, 0.08093773941839977, 0.5362498438493459, 0.6074788349077962, 0.560673244979272, 0.5267991920206996, 0.5581815459745041, 0.4994629538810208, 0.5408488724451688, 0.5537345718396383, 0.6018725570059673, 0.09055564340899747, 0.13143893357468261, 0.09081680507569267, 0.11476099707421505, 0.10991922757675854, 0.09267024380999478, 0.4287057716381222, 0.13017606472824195, 0.1111685286936892, 0.19285637947508893, 0.21548871359154065, 0.17636875318322232, 0.16338870654719162, 0.21836817706988132, 0.1787873384372035, 0.1962728831432723, 0.2237138726422938, 0.16465947657630253, 0.228728466419012, 0.3266012180703689, 0.31778372642370334, 0.3322288729987951, 0.49577221299857266, 0.3020731692126113, 0.23105386978291942, 0.30309713046799136, 0.22761059751655321, 0.15736689751988286, 0.25879400980845124, 0.16899868512499594, 0.2313409214480593, 0.24933295081706852, 0.29561712929766903, 0.21533355491264805, 0.25343879793538326, 0.17779958487187397, 0.23464453397850793, 0.254880034507707, 0.2235665892299028, 0.23277328586332802, 0.21855771586114092, 0.2257378567530186, 0.25696145424117023, 0.2286998000528493, 0.19275555892630913, 0.20047871856301214, 0.18966389494189229, 0.21597130926140884, 0.19498713240203414, 0.21599521542213196, 0.20385560287086824, 0.216572858765827, 0.21399751850358506, 0.19561357739339502, 0.6726112224473964, 0.7245130904558175, 0.7576954205943245, 0.8275743279891323, 0.19427802844225672, 0.845606015361551, 0.15781587477668213, 0.16605039503961583, 0.6530022610242097, 0.46028040098627765, 0.34664074418728874, 0.1981080356972056, 0.19028025704492257, 0.1641786709045484, 0.6526485076118067, 0.5445683509764156, 0.49312884400717794, 0.6270768486425582, 0.1936508732299751, 0.21187639055802643, 0.17999926664053056, 0.19857641721699737, 0.19160451305762682, 0.18667209975293164, 0.18861756284549314, 0.20292270000225587, 0.19591503984208325, 0.08203092850856486, 0.09275747901165321, 0.07962812683137854, 0.10813482435656752, 0.14961014568902176, 0.08257158608262138, 0.12110287647801488, 0.07706589409479381, 0.07055510359413952]}, "mutation_prompt": null}
{"id": "1b372812-ab2d-402c-bf2a-a4d193f02a0e", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7  # Changed from 1.5 to 1.7 for enhanced exploration\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.92 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Slightly increased adaptive velocity clamping factor\n                max_velocity = 0.55 * np.linalg.norm(global_best_position)\n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Slightly increase the inertia weight to enhance balance between exploration and exploitation.", "configspace": "", "generation": 83, "fitness": 0.32413823294532346, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "27ad5638-595b-47ab-a88e-82e7fe76cc35", "metadata": {"aucs": [0.8315406827805054, 0.8417209853226454, 0.8442187742058356, 0.8336382312050362, 0.8276361476412758, 0.8333158553925001, 0.8407167805278988, 0.831738246108729, 0.8194006055687195, 0.569603863171182, 0.4060987434904346, 0.5548137229200081, 0.4817911718418634, 0.6243574258155036, 0.6248620734889937, 0.5784726654393614, 0.5191712933848232, 0.5163068265904283, 0.16177801767395794, 0.16330208999490203, 0.1578965365481828, 0.14683624534151318, 0.3328345783369726, 0.13357194770740466, 0.12680085980606004, 0.29874568470910634, 0.10899453378517521, 0.11001958335444073, 0.17382243788394447, 0.09779182415428256, 0.11722535921025812, 0.10120402084559643, 0.11169400593729772, 0.13759161750049043, 0.10774525331348472, 0.14377704150928317, 0.953908777326223, 0.9524921595685992, 0.9590053915915686, 0.9287850838195669, 0.8865657102947725, 0.9279986929827486, 0.949626207986478, 0.9315780968374396, 0.9082949838021602, 0.6871818522201958, 0.582559483610234, 0.6068769236730303, 0.5888225592968508, 0.5761644717119725, 0.5777156130312922, 0.6528717434645496, 0.5909323025375997, 0.6266440827739145, 0.6589347596693402, 0.3420789764829111, 0.3609893057581628, 0.27244254085057706, 0.8405464642148225, 0.20507598079403522, 0.15008253376732006, 0.22967719951287113, 0.22317025944571944, 0.23200310217137599, 0.2803604925890347, 0.2985601144932356, 0.12678496193718292, 0.21468792831542682, 0.11338160571960432, 0.22755118226510418, 0.38873508087776953, 0.2774951411788985, 0.2385058382139652, 0.29098288966899877, 0.12627011871992566, 0.2468953737029197, 0.21945670272539786, 0.29446932781337354, 0.24655273148956613, 0.21362556742160643, 0.23875501647298714, 0.09482481546781363, 0.0003295573751455061, 0.042851888368447555, 0.007890191206250563, 0.005826641191178372, 9.999999999998899e-05, 0.06774429104544866, 0.00011661667677165255, 0.012968460290537442, 0.1633509686370871, 0.10689764779615485, 0.13817664461164691, 0.10638421404025555, 0.12109855158432914, 0.052973110439065385, 0.1606182548955799, 0.09320013685588568, 0.15029391863461938, 0.17376812334123715, 0.06498103543765188, 0.2341858040628696, 0.08468528961680144, 0.12910304170285103, 0.11068447568404649, 0.10222735651658388, 0.13743429905572835, 0.0833484246817896, 0.15602053884688416, 0.2468514069307418, 0.10745791592011478, 0.07297768555694051, 0.0942446432877514, 0.3112306442859284, 0.08994031371450417, 0.18537276736406894, 0.07921752328797083, 0.5267842097141091, 0.5232028433225403, 0.5427935406155017, 0.5553516773230334, 0.5196474342614112, 0.5349048994762926, 0.5798656388049473, 0.6339588744114124, 0.5397874432288603, 0.11081076737500373, 0.13352970703379363, 0.13337947205855127, 0.10716194825061087, 0.11633929807988785, 0.08113964510426541, 0.13893492549036235, 0.13393584654716684, 0.11516766461381778, 0.1934880946434947, 0.15820483720368705, 0.17804715563125573, 0.2079653706443878, 0.2749572578346824, 0.21402478584681206, 0.23843671769452512, 0.23585017875560854, 0.2890620149300823, 0.35468574097200545, 0.3140520605481302, 0.2783370624249093, 0.2753000402057729, 0.26363501827809177, 0.3369705693054563, 0.29597545679465853, 0.27619602022104706, 0.2829865065842889, 0.3905136894240586, 0.14929407274245476, 0.18319896919579193, 0.22344495893989025, 0.24788990771545016, 0.3312579305374187, 0.2970677125353606, 0.2499408631604193, 0.20963842534123, 0.2071151427201109, 0.25611690144411137, 0.23152337565857217, 0.23252417867301278, 0.24761608578499428, 0.2177564631719089, 0.21494750413117514, 0.2317917910148809, 0.26931983932194314, 0.2027270111677001, 0.23124307996399696, 0.20138125875461788, 0.19582900853899077, 0.19117388104305, 0.1991876419025116, 0.2031108256649281, 0.18370507245682133, 0.21851093160828383, 0.8048252967459588, 0.8225432140918884, 0.18091784582055326, 0.8247187965049678, 0.5787276846822166, 0.7337182714784933, 0.17015891482475365, 0.6537227584209095, 0.6859261139907123, 0.6229546794075091, 0.5972982619900988, 0.20271760910628622, 0.7555316738124945, 0.6611468834540424, 0.20016486349370466, 0.5755781929439603, 0.39553224676595033, 0.6031173987764404, 0.17900322440591387, 0.238017644229921, 0.2050114561921882, 0.2227199007193853, 0.21706693418039436, 0.18016242740225175, 0.22169675339954698, 0.19609490482547776, 0.18378207851217188, 0.09232948755988601, 0.08170438990655982, 0.0939270441392307, 0.08129071875527094, 0.09375707110478182, 0.11324740844300085, 0.1011786868645026, 0.09236038562563353, 0.09200158304856976]}, "mutation_prompt": null}
{"id": "57811556-7633-432e-a7e2-79d7d3a1bd24", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7  # Changed from 1.5 to 1.7 for enhanced exploration\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.95 - 0.4 * (self.evaluations / self.budget)  # Increased start value\n\n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Slightly increased adaptive velocity clamping factor\n                max_velocity = 0.55 * np.linalg.norm(global_best_position)\n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Increase the inertia weight start value to enhance exploration in early phases.", "configspace": "", "generation": 84, "fitness": 0.306128828152896, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.24.", "error": "", "parent_id": "27ad5638-595b-47ab-a88e-82e7fe76cc35", "metadata": {"aucs": [0.7793858264788895, 0.7706778099187246, 0.806832717208142, 0.79986741507878, 0.722162886880076, 0.8046038660512672, 0.8065908690343642, 0.7636334225214185, 0.7961212003375137, 0.36870939373447964, 0.3502526636508655, 0.37668951236535597, 0.3151065972636379, 0.3800713974764246, 0.46228587868872417, 0.21739817393373173, 0.4251036058741151, 0.31712690219927053, 0.13706006128987924, 0.16501698154327482, 0.25832747112732746, 0.13185663689728322, 0.326590232219397, 0.13696842921024177, 0.14254956889503156, 0.14655152660449655, 0.11105599903926244, 0.09138887945947027, 0.12408088559613462, 0.11415010336678644, 0.13258347082533384, 0.09974018491678505, 0.11281855936507013, 0.13061871438466477, 0.09958383348553357, 0.1020545414804197, 0.9562834484237733, 0.963175556961196, 0.9613457675402844, 0.9364288757429156, 0.9121693122490603, 0.9477185597949803, 0.9607467133779697, 0.947909771614108, 0.9196539493440107, 0.5799561312108474, 0.6187017408552448, 0.5052450120105245, 0.5490688888653523, 0.5983044445065648, 0.5207639753698031, 0.5246298748982086, 0.5427857718514717, 0.5456049575395844, 0.35948698515812216, 0.709534716915122, 0.2177065082804165, 0.26179542625547647, 0.3107111290315453, 0.2658755744840663, 0.21823362684597936, 0.32889837042685566, 0.21875911878015508, 0.1979193099259201, 0.1997417124021249, 0.17658740312644294, 0.20075281344571871, 0.18947930581400285, 0.20882687875374084, 0.2029267221960559, 0.258440377790665, 0.2019709448086351, 0.3379141674881406, 0.2211011443835892, 0.38694033893063673, 0.22791470048592644, 0.1283692649294328, 0.26313868023045583, 0.24512771813169, 0.26869406742652224, 0.10900089054665785, 9.999999999998899e-05, 0.05781832238304907, 0.10799969758378081, 9.999999999998899e-05, 0.004371500955120622, 9.999999999998899e-05, 0.0387210040959326, 9.999999999998899e-05, 0.008220017496443743, 0.20423618203058536, 0.07035387811414695, 0.12045324116701772, 0.11369435553621077, 0.08121739310132925, 0.05212537708848142, 0.1236519068323445, 0.14839041326646052, 0.14405556935227504, 0.10804746866385972, 0.09543865909605298, 0.2711098177865954, 0.2101139150142236, 0.07202686461139451, 0.06026320090213444, 0.08730363718343415, 0.1788045316033513, 0.06362160013038287, 0.17969651874414905, 0.10939534970942566, 0.22232711566284902, 0.08730802436316609, 0.08431583957386868, 0.14261529664954287, 0.10163463971797759, 0.20673811953106092, 0.0784797029821881, 0.48668131792560954, 0.5762445194943318, 0.562810114782502, 0.5343912672558149, 0.5247144929767322, 0.5040649091133895, 0.5880673209207776, 0.5139660560639534, 0.5516482601940423, 0.11273598826942666, 0.11094983120152191, 0.10393922036161496, 0.10647549750755314, 0.1125784936588301, 0.10460065569084798, 0.12095963164580936, 0.10279027478665614, 0.11411313675557233, 0.17653744875176147, 0.32331476443737006, 0.16351926366699898, 0.2298889100327448, 0.24191698920833993, 0.2490532390905158, 0.20531147588439302, 0.1578349473478251, 0.18291369108352562, 0.4115565906957158, 0.28983854109497253, 0.30839944009152565, 0.3035117034952277, 0.2479647362200893, 0.3286665364259871, 0.3225932280941861, 0.3421586664510097, 0.4536500450022959, 0.17750943470479397, 0.3226255903947738, 0.24319662590040136, 0.31145835921009135, 0.2939449171270886, 0.22935498370026175, 0.23832031512931195, 0.2301676427936482, 0.22898590500632499, 0.21061607625002243, 0.23987796387504834, 0.19729028985085517, 0.21496319025390587, 0.23385992321936422, 0.19462354047549302, 0.23002593287197992, 0.23664480984313419, 0.21585715327973998, 0.22360736402222514, 0.19242115304762064, 0.199120941730084, 0.40693163945258093, 0.21587766942661057, 0.20116063457615807, 0.19429206062072313, 0.1915870537664881, 0.19239488888504785, 0.6915132800353292, 0.7235104350568016, 0.18195006633258515, 0.6952738093941819, 0.5245720992676597, 0.6867817888781687, 0.1553761086789347, 0.6500597357034931, 0.6866878345815175, 0.6620105446233395, 0.5472144315374923, 0.5487874681186081, 0.5863055834757182, 0.16243320949673978, 0.4070614342567448, 0.5625687558321091, 0.5331979766142747, 0.5453721171213567, 0.19682593918463387, 0.2136701593494824, 0.19895407893369232, 0.1879402221783969, 0.1857198509140302, 0.1927808705732741, 0.1892420853469795, 0.18401896706050203, 0.19223967148091692, 0.0849680509191405, 0.13534231130320273, 0.10503927436952776, 0.11825780988985846, 0.09123522709150489, 0.1007092864887622, 0.11592645438594285, 0.09428980356892191, 0.08200684540747061]}, "mutation_prompt": null}
{"id": "e2b145b0-3168-480a-b291-8ef3cdf30688", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7  # Changed from 1.5 to 1.7 for enhanced exploration\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Slightly increased adaptive velocity clamping factor\n                max_velocity = 0.55 * np.linalg.norm(global_best_position) * (1 + 0.1 * self.evaluations / self.budget)  # Changed\n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Adjusted the velocity clamping factor formula to enhance dynamic adaptation based on evaluation progress.", "configspace": "", "generation": 85, "fitness": 0.335402243211405, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.26.", "error": "", "parent_id": "27ad5638-595b-47ab-a88e-82e7fe76cc35", "metadata": {"aucs": [0.8577817529110672, 0.8650149591928635, 0.8429391538835211, 0.856024037500573, 0.8497997784256758, 0.8262596554375692, 0.8511560302122059, 0.8586612256226924, 0.844578250399371, 0.6804559194297055, 0.5790034441235881, 0.5909882087616203, 0.4446817660573914, 0.6265653803145322, 0.6676566130651851, 0.44967642731609503, 0.6313693400978858, 0.6357690302974233, 0.14215533477748887, 0.15893527734368784, 0.10009904345045251, 0.4836625014166862, 0.13362885683980352, 0.15506858959760883, 0.10417407414900481, 0.1551955417586669, 0.4335132245291021, 0.38030851789749653, 0.12358147210975456, 0.10160047124373905, 0.13342940304367024, 0.09001190904862744, 0.1294451143358305, 0.12222402100320995, 0.10699871239697112, 0.10133708040671807, 0.9517998799272424, 0.9451060991534151, 0.9550029518669542, 0.9144993412516249, 0.862329059045597, 0.9161816292787832, 0.9390544848776956, 0.9201642388092636, 0.9005600671691727, 0.6362172729551565, 0.6645482994916447, 0.580229418092866, 0.6279566687226291, 0.646030496044451, 0.6550374720718724, 0.6710553405115968, 0.654691134316503, 0.6406396443704281, 0.770659110968466, 0.6541432618169248, 0.22331907380769567, 0.8349009946126145, 0.20755728778803584, 0.2632465827082565, 0.22493760225703263, 0.32511600478806635, 0.3651019629589157, 0.1899848767723349, 0.23401621813169027, 0.1746616970083189, 0.23483847956526238, 0.22789558276089616, 0.1916016849004848, 0.24392277970858722, 0.25155832370079445, 0.18353607535934635, 0.22702488038360336, 0.20945302726758386, 0.1266265818485448, 0.1961858685975243, 0.2625233977699186, 0.26873590120937674, 0.22724543088071947, 0.2305888467221655, 0.1039616483871385, 9.999999999998899e-05, 0.0003115878148646223, 0.07580601035363566, 9.999999999998899e-05, 0.020999568623998988, 9.999999999998899e-05, 0.011954494416703931, 0.0058095234126034345, 0.07259535305140108, 0.11138083678449096, 0.09253807857414853, 0.17564434628469805, 0.14393091246076728, 0.07827139044005849, 0.07646284156989636, 0.15408180279411843, 0.1794545850056467, 0.10526050520259811, 0.17402829968182998, 0.05972252067926909, 0.18127415781604517, 0.20950720287597602, 0.08844706502401423, 0.1155296363594307, 0.09968885403119188, 0.12275289497026243, 0.0696920298139978, 0.1357972144205376, 0.11949307184909652, 0.22036536895287406, 0.05695901524227598, 0.08507122851636029, 0.20460501194587877, 0.11586308871405127, 0.12049292381090437, 0.08050759409631825, 0.5341049977549266, 0.5379341734107057, 0.5570929655079744, 0.536325453510872, 0.5352355168499574, 0.5460154911877173, 0.5557135044135701, 0.523191518827473, 0.5468849066507974, 0.1123549382901523, 0.1410504346808249, 0.08613051505936564, 0.09903600714243, 0.1566254558875324, 0.09642813349074364, 0.12136000806833658, 0.10275088432967272, 0.11981926315426294, 0.17340556131695617, 0.1859006203976552, 0.24199075937823733, 0.20994552219668006, 0.2135664227004529, 0.17566224115105922, 0.19334729817723684, 0.21331015222263128, 0.3631542234124847, 0.213753903771846, 0.43238295271278526, 0.3338686592540373, 0.34297236281198595, 0.3142341929847886, 0.48697515669809976, 0.22502910617808758, 0.5128954761162774, 0.2429434934256024, 0.19153800036968427, 0.20496145081130657, 0.16457766119507944, 0.19210469935610264, 0.20539377005074133, 0.2575747670678966, 0.19505410507381649, 0.2700941152518058, 0.2017930057039371, 0.22329668598796926, 0.18710067011851028, 0.21224462732756788, 0.22576386788536118, 0.21307528754211003, 0.24234213524356663, 0.19891215974500576, 0.23936833333102336, 0.2506633911360925, 0.22057431119278592, 0.2320401784576085, 0.23534652159224945, 0.21943251403024155, 0.18822460476549796, 0.21451235251391632, 0.21087096334154098, 0.6470177819885357, 0.2194972930843212, 0.7630752636420262, 0.5654433686538174, 0.72763282928781, 0.7700888167469708, 0.5903884831477031, 0.7571909052129897, 0.17344766597515804, 0.7242762138410276, 0.7886889039761895, 0.5299364020299387, 0.48113273197392115, 0.6496734892446179, 0.7738428766329633, 0.454701575520876, 0.6518350370713608, 0.5762081106334473, 0.606012159732692, 0.5727655061095007, 0.187507276974322, 0.21423552602112828, 0.18784466815650325, 0.19412026802063242, 0.21251446954576314, 0.19503038859457078, 0.20502627452094213, 0.19999346472562907, 0.1836561402995418, 0.08390946125828125, 0.09288288022074798, 0.08962715486081763, 0.09806441094390084, 0.10892648341858602, 0.10251686454842324, 0.08407891441678816, 0.08807864644613639, 0.1029675593446413]}, "mutation_prompt": null}
{"id": "4e15ce28-2a48-4990-8f83-fbe5d2715d91", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7  # Changed from 1.5 to 1.7 for enhanced exploration\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.85 - 0.4 * (self.evaluations / self.budget)  # Slightly decreased to 0.85\n                \n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Slightly increased adaptive velocity clamping factor\n                max_velocity = 0.55 * np.linalg.norm(global_best_position)\n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Slightly decrease the inertia weight upper bound for more exploitation.", "configspace": "", "generation": 86, "fitness": 0.3117368134659582, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.25.", "error": "", "parent_id": "27ad5638-595b-47ab-a88e-82e7fe76cc35", "metadata": {"aucs": [0.8716739418094114, 0.8758522655248794, 0.87804592609889, 0.8692607669277812, 0.8681448884683531, 0.8799578269554795, 0.8712880468521291, 0.8737092524749468, 0.8675891750962056, 0.4323413938170122, 0.7192113556738889, 0.5930673171556847, 0.6042083719976743, 0.7168614971542764, 0.5224600086088389, 0.5266910680044732, 0.6454662638516941, 0.44923670446339214, 0.16939301196180656, 0.12426937215659728, 0.10469243284702456, 0.12318455886922697, 0.132562670120437, 0.11828143411930037, 0.14257106799611974, 0.3755947754606589, 0.14146560261406171, 0.10386267579287889, 0.13153305031442653, 0.08842402928283666, 0.14130976697920905, 0.0983726063117043, 0.09511113794748982, 0.13389797980385498, 0.09550814400689545, 0.09973308533995551, 0.9305872054380028, 0.9237229253017265, 0.944820499161794, 0.8894874102406691, 0.7829846239089164, 0.867450212836591, 0.8665918096001237, 0.8944867664612398, 0.8655653224175697, 0.6310438672258553, 0.7117395197942167, 0.4719688779523572, 0.5942671948874103, 0.6435435355629764, 0.4014061833156135, 0.5412637046574611, 0.5848583210767553, 0.6556516945096423, 0.370337460051373, 0.3336619496260389, 0.8343822042863612, 0.8702917276901867, 0.2713290571568262, 0.2691730659269931, 0.22545957078872247, 0.14939751584525274, 0.17133035774431626, 0.5432657758363149, 0.15673271275410117, 0.12708128177961786, 0.2135874375930099, 0.2089411877028754, 0.15209828907254663, 0.25490190205875085, 0.2269116292234743, 0.18824575155475876, 0.3124771324429827, 0.21671490224893764, 0.12624047514513004, 0.16716804520519213, 0.20567043933872364, 0.25513228130054444, 0.16682409214138738, 0.1827301083382198, 0.10868299222326372, 9.999999999998899e-05, 9.999999999998899e-05, 0.0668311130758118, 0.0022977278759294117, 0.005972812865831845, 0.05844396341325375, 0.13553365385605032, 0.004232014145017948, 0.0039257242521278934, 0.1808949227182236, 0.09308946021569242, 0.2070056379046027, 0.08215016391961694, 0.1191724925706299, 0.06805129137137012, 0.20239038935327625, 0.1890444654159975, 0.1297085989374227, 0.1978118439928308, 0.04776136384067653, 0.1484213289048123, 0.1417936434979793, 0.22318813152105377, 0.13202992905208266, 0.09816299507273885, 0.2906940268799857, 0.09942149346887219, 0.0770333543424444, 0.11885867628195279, 0.17452554518520846, 0.02978595158066455, 0.12227013805683928, 0.34093711511507385, 0.14824003287731424, 0.1783768691029971, 0.08158497048505664, 0.5425862695478763, 0.5501388046428645, 0.6240026909096403, 0.5767274240168478, 0.5257767836419733, 0.5049945223443073, 0.540947370015038, 0.5619144174898609, 0.5558088879547158, 0.12126677464640256, 0.069951690845234, 0.0866742944867861, 0.11875765856808651, 0.12100598752718639, 0.09641955548689873, 0.12022940173352015, 0.09795434606154596, 0.10289644505928441, 0.2050471406244042, 0.182790811832241, 0.2004376866599995, 0.2966561658275493, 0.23104672208913457, 0.2170624631679713, 0.22293484050664159, 0.1613910204641763, 0.22607401979765518, 0.36166885692071205, 0.3920844177123596, 0.3381370834163112, 0.2978744694956381, 0.2768470515289787, 0.2777336682557018, 0.24772857113282665, 0.32199755880545233, 0.21605646605577977, 0.22312965985848554, 0.12128760060475974, 0.17129352633258854, 0.2614664059333742, 0.17303163081242978, 0.2505490481255058, 0.22621485395174723, 0.21406478781774252, 0.19004967737044953, 0.24987108271407754, 0.21268858026500348, 0.22793779407239423, 0.23304570956309034, 0.20650893822137273, 0.2245612781388977, 0.26488000338543694, 0.22645044994889196, 0.21553620792428496, 0.21216611539859187, 0.1908476022222606, 0.20433835422026692, 0.242011887832555, 0.20733456915237025, 0.18552591601319213, 0.19172823876983836, 0.2486970203672505, 0.2024585662061681, 0.6880405046342029, 0.7764054761843657, 0.1837248834722266, 0.7576582604020621, 0.19604236001643116, 0.7984610835952924, 0.1635111293016155, 0.1658339319854002, 0.15659402258556965, 0.604674378176121, 0.20558681792465727, 0.6101692482122588, 0.49178496106110303, 0.468525352117945, 0.19765721894744226, 0.6352123763589856, 0.5323941135924002, 0.5718720489039666, 0.19554906718938592, 0.19761304418491576, 0.19858601773836515, 0.19254744054380113, 0.1988239818445965, 0.18856290629283745, 0.18793088593622687, 0.18949035192433594, 0.19212335881190268, 0.11248273808836562, 0.08447796983838074, 0.08790714396424248, 0.08747559856888243, 0.09517263830924694, 0.06911501592113889, 0.11795397822665676, 0.0915387226577088, 0.0794705032055657]}, "mutation_prompt": null}
{"id": "4f166c21-276c-49c6-bd34-61e2662cc763", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7  # Changed from 1.5 to 1.7 for enhanced exploration\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.2 * (self.evaluations / self.budget)  # Reduced decay rate\n                \n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Slightly increased adaptive velocity clamping factor\n                max_velocity = 0.55 * np.linalg.norm(global_best_position)\n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Reduce inertia weight decay rate for steadier convergence in later iterations.", "configspace": "", "generation": 87, "fitness": 0.31117895106496957, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.24.", "error": "", "parent_id": "27ad5638-595b-47ab-a88e-82e7fe76cc35", "metadata": {"aucs": [0.7941571274599138, 0.7363198940150735, 0.833210063150198, 0.7959399283071824, 0.8092847499944834, 0.8233152799801859, 0.7930804161505782, 0.8088639641615416, 0.8186948510548206, 0.4923493257604903, 0.5122099485522725, 0.3994142023159245, 0.5033308772100586, 0.3326492766127144, 0.47633742107660426, 0.30857875657525013, 0.4480703406631512, 0.41679643835165436, 0.15477894243974055, 0.22769500986917002, 0.14864671480278124, 0.13592181708110906, 0.12019776390911263, 0.13263152171733983, 0.12377844689423945, 0.15307362531160396, 0.10468371495909412, 0.10783679590100814, 0.13018183268087946, 0.08839174190929444, 0.10658010271055607, 0.11833892780516564, 0.12198819335564459, 0.11835282657220492, 0.10714868891193874, 0.12850719504275476, 0.9538544668350637, 0.9471249807164835, 0.9567596414707279, 0.9213777900669508, 0.8570957631605913, 0.9209793529596992, 0.942334134070802, 0.926306360448261, 0.9014165247036274, 0.4787265265976909, 0.44804432529680094, 0.482919255004278, 0.5949610219100815, 0.5433558939988115, 0.5443574093433785, 0.5331780028488775, 0.4864440317181198, 0.5528712560819381, 0.6953583973132519, 0.6221300503722426, 0.30226833831468203, 0.3356534496790504, 0.33752757801989064, 0.20720619091862102, 0.14922777527427677, 0.775013892910909, 0.22238658513312126, 0.1834736653287048, 0.2116765579523625, 0.18032458491049141, 0.21255004798186605, 0.18907857238036763, 0.21140990317491226, 0.22618391667830895, 0.21449769237283567, 0.17906022885694617, 0.16299412849490125, 0.15953157450602307, 0.24830958221674249, 0.23528004556979398, 0.1249446433039808, 0.2692341742423011, 0.24121235801023344, 0.17021620738140575, 0.10648238139434874, 0.0004982545819488537, 0.0017041097905313718, 0.004871083837752255, 0.011779344189020824, 9.999999999998899e-05, 0.00038857984817719515, 0.05849257941813868, 9.999999999998899e-05, 0.008814393462099335, 0.13540621761437865, 0.1358250939823289, 0.10661116785231228, 0.10932069779996512, 0.07157370487035808, 0.08154501418187177, 0.14519902953607633, 0.19870324266074357, 0.11722225212544835, 0.14970981783743742, 0.05670024858792455, 0.2147484261688012, 0.11923333802191405, 0.0911766399530769, 0.09862892190235473, 0.0897767566474229, 0.09992983632190766, 0.0683163182072325, 0.16483802606281406, 0.09685593111773927, 0.15725481817333364, 0.07895260600403742, 0.09525286440114156, 0.3173840396865023, 0.2306359341159494, 0.20980416387802847, 0.08068426533707607, 0.5206537106316125, 0.529557007266255, 0.510351953974169, 0.5251052449566185, 0.5526414940340707, 0.577667735829856, 0.5336490725303928, 0.5144130088709717, 0.5702178527312141, 0.15269957426550063, 0.1629791567808475, 0.09518925060774386, 0.13864489862162532, 0.1673138203540624, 0.09956736838838587, 0.11108040991851009, 0.10983590285169753, 0.10769518001718681, 0.23109988470787513, 0.19178441108057498, 0.22985189721825383, 0.27281399125979167, 0.24412170165542224, 0.16781535286851923, 0.2033907214149676, 0.1644015710471085, 0.3216297930456826, 0.31660443038687414, 0.2967655731583294, 0.3999844063472874, 0.37956748772161064, 0.40623341330661344, 0.404400046291012, 0.26636447895692617, 0.31486665295502636, 0.282104714286357, 0.263704917023884, 0.257458669406361, 0.15442534790566842, 0.25119779385268015, 0.15800976087582896, 0.26537712153798343, 0.20231865543081684, 0.21495056913948396, 0.2037733190908141, 0.24952112707752505, 0.2111331923142704, 0.23161661101750275, 0.21569591504182895, 0.2327288124075101, 0.22241153144596415, 0.23448743576789421, 0.23948623589118945, 0.2091131511975829, 0.2276910053797897, 0.20668111514311627, 0.32586656249466983, 0.5043853146710728, 0.21103727069547173, 0.21279373682560543, 0.21600556933393966, 0.3422029823350182, 0.19984847524161065, 0.6452249550608447, 0.6761966920415726, 0.6746449273668902, 0.7439563939768745, 0.19441850545173922, 0.7221775748748822, 0.6205358413790476, 0.6710652194022897, 0.6997266568174656, 0.45473073025276844, 0.4776783410756843, 0.201084110683605, 0.6905142575333907, 0.16630230930860002, 0.4802264148442883, 0.5706769394910782, 0.5076295222455712, 0.6252458426827038, 0.18356864255298833, 0.19360542229451227, 0.21819028148349862, 0.20359812368827201, 0.19717662516628442, 0.19333491277488202, 0.18461477778630275, 0.1941100362035052, 0.2029539816599193, 0.1288040081396139, 0.09360254137659763, 0.09463391104467211, 0.13545791741856483, 0.08958015703598177, 0.07297937674704569, 0.08655999347733434, 0.09813912389651236, 0.08000929254726397]}, "mutation_prompt": null}
{"id": "deb6bc38-822a-4ae9-8981-af846e7b1185", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.6  # Changed from 1.7 to 1.6 to fine-tune exploration\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Slightly increased adaptive velocity clamping factor\n                max_velocity = 0.55 * np.linalg.norm(global_best_position)\n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Decrease cognitive coefficient base to 1.6 to fine-tune exploration and balance with exploitation.", "configspace": "", "generation": 88, "fitness": 0.3198268414335199, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "27ad5638-595b-47ab-a88e-82e7fe76cc35", "metadata": {"aucs": [0.8443342233829424, 0.8487081255422557, 0.8527066993533446, 0.8471136187906761, 0.8492828070288506, 0.8537894588344597, 0.8528074277272311, 0.8476519914295675, 0.8531219548738318, 0.5650331427629884, 0.6281533880890634, 0.6372921733199717, 0.4235584578447854, 0.6308033827580575, 0.6813876484664543, 0.5485289232483563, 0.5885016023897669, 0.6311304464095289, 0.24339857603759585, 0.11275795588912552, 0.12689409981383248, 0.42260739563865446, 0.11451185728661661, 0.12478447724635422, 0.13761979903679766, 0.12078044783120545, 0.17680661755776506, 0.13685995451797295, 0.1260218914316258, 0.10134776318298322, 0.13474316135450481, 0.10120493280048071, 0.10292226191003084, 0.13463634849243444, 0.08954538006085755, 0.09818714828308617, 0.9471823730276414, 0.945110517774321, 0.9548258442426829, 0.9165759271824951, 0.8648051957097899, 0.9180665008290539, 0.9411015756136095, 0.922005791110728, 0.8943280719539694, 0.6212230925102751, 0.5620642923691852, 0.5832386008032054, 0.6867719889487014, 0.6721611394159199, 0.5979898298422164, 0.6131198538053362, 0.6108045810177913, 0.7170958544302235, 0.3677344488989962, 0.35699681162800356, 0.5144109053086843, 0.26630887626470556, 0.7864461605724373, 0.2647973857536078, 0.17308689687215306, 0.22413960509541708, 0.22196623794503967, 0.26012866843181737, 0.20156875937412255, 0.17082261333565152, 0.2719211029220141, 0.2486619336666518, 0.17992485059358365, 0.2336165848106857, 0.24607970715889582, 0.3318116655602822, 0.12750934681080184, 0.2431171010458405, 0.15659256322517245, 0.22162114247384468, 0.36668534229084726, 0.2840682056761402, 0.2816174741965948, 0.12480967087968498, 0.10800660742254409, 0.0007686950772580747, 9.999999999998899e-05, 0.05018041075060997, 0.026407202579682765, 0.0309271277537988, 9.999999999998899e-05, 0.03329872234801423, 0.0011018461472521723, 0.0753540603282068, 0.1731291489432215, 0.10721035489044006, 0.12697411844413053, 0.1048288572592957, 0.07395188257566243, 0.09104083528140616, 0.18883592167729946, 0.19574238348228734, 0.1348402562092892, 0.20546786880446655, 0.06767299752261402, 0.17298579878613907, 0.24586936213221433, 0.13179685365516836, 0.08559781648774645, 0.09228306804510189, 0.10708534332078523, 0.08656703281857658, 0.17950032190859744, 0.10384185529681766, 0.2482571803753374, 0.04370223727538891, 0.10209474908786287, 0.1685749363871779, 0.10076387936903719, 0.29095284496010565, 0.08553604055185837, 0.560143277686598, 0.5307748136083965, 0.5409499145921906, 0.5691397817422998, 0.5268267973965233, 0.5505869904707107, 0.5752319912433956, 0.5419918664155838, 0.5472828835131773, 0.10899262099649842, 0.09652521340598286, 0.08851266751262288, 0.13179659933560983, 0.10748488250757415, 0.1322767320215511, 0.13253571627340333, 0.08899045362969105, 0.10554687357158177, 0.20362269545977252, 0.15263026952003367, 0.17424661253245355, 0.21573177922147246, 0.24408114012269588, 0.1782223561086952, 0.23454948814503618, 0.22261973326358464, 0.27886584378832135, 0.23862975862453273, 0.28773467548444764, 0.3234218205199858, 0.27319599964141694, 0.31824109546987056, 0.3325483184131782, 0.38061704639532623, 0.4409243747862266, 0.4010539010864578, 0.18373589728907513, 0.24037420453053715, 0.13818650364194185, 0.24567472844943827, 0.1906092717529123, 0.25296058333405746, 0.23851371569988034, 0.20441535033997948, 0.19216453052125082, 0.2300434317493787, 0.23068241484665541, 0.2549295489984149, 0.21073081713852448, 0.23653766161942935, 0.20807785856646666, 0.2162376425678736, 0.21217809012476496, 0.19149584861431135, 0.18873380336298173, 0.23469209691826243, 0.24292933994620447, 0.21368951599397956, 0.2038100820669232, 0.19981177750071288, 0.24093988162027258, 0.1941766196526199, 0.399910276256323, 0.18230810975324885, 0.7522674500843809, 0.18432645432177386, 0.7068146047199616, 0.1980526022789847, 0.8242314991750048, 0.1705360979508972, 0.7306814383965439, 0.17950666251047787, 0.6025244542446067, 0.20815953289349176, 0.7299212158784398, 0.78261690783688, 0.3822009483001989, 0.4125761278539579, 0.6443527777072982, 0.5420751603907015, 0.5798412416890081, 0.20090697781308875, 0.1960763531924251, 0.22038928866193574, 0.20537978103579468, 0.1899283963459698, 0.19039753495266987, 0.22046887838875195, 0.21429662961379914, 0.1933060987243005, 0.10092007098367317, 0.12358119065898643, 0.08682447245237568, 0.09028689654454813, 0.09665230320721307, 0.08871332848539881, 0.10172948275240101, 0.0884014800888544, 0.10277757218391304]}, "mutation_prompt": null}
{"id": "5d05277a-4714-4a76-9557-56b63ff9fda7", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                # Modified line for inertia weight formula\n                inertia_weight = 0.9 - 0.5 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                max_velocity = 0.55 * np.linalg.norm(global_best_position)\n\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Slightly adjust the inertia weight formula to improve the balance between exploration and exploitation.", "configspace": "", "generation": 89, "fitness": 0.3270282103799245, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.26.", "error": "", "parent_id": "27ad5638-595b-47ab-a88e-82e7fe76cc35", "metadata": {"aucs": [0.8540751384663665, 0.8736021868814208, 0.8536042055519806, 0.8426088796931508, 0.8555260032816618, 0.8616524381072139, 0.8584487115407375, 0.8590789814421966, 0.8493301117044953, 0.6587123737633656, 0.6318555144482662, 0.596276003616012, 0.5800471291545712, 0.6860768073856066, 0.6770945303666609, 0.41737427949074535, 0.6343056405145917, 0.6317731536667746, 0.14328306029875604, 0.13748204304320755, 0.08341859944133212, 0.1509979241090076, 0.12840625994940913, 0.16305556938992782, 0.11592799227809159, 0.3986389536198709, 0.14218247385670635, 0.12175170278956071, 0.11907296136468826, 0.09918917476111966, 0.1259332568761925, 0.1271469967320964, 0.13473648237063296, 0.11816902854339661, 0.11394704325296423, 0.0823365254619759, 0.9516602416018823, 0.944833869918555, 0.9547235410218592, 0.9164125771842292, 0.8396989886576257, 0.9136070833288712, 0.938846011973274, 0.9179058433968293, 0.8942930308966743, 0.6365142919985797, 0.5225117918210492, 0.6184993367253115, 0.7127782042890365, 0.6287495094707627, 0.5226090379832836, 0.7024945755950558, 0.4030834453501959, 0.6802148856974319, 0.3636099936509749, 0.8183222134750158, 0.8059525272001715, 0.3663038711767619, 0.25288467410121307, 0.7471533177383798, 0.1482785715033853, 0.35919933079496236, 0.22520003565101665, 0.19709744411341357, 0.17351419530303014, 0.24084108017964578, 0.21513333488920539, 0.18870447388058897, 0.20508140150017184, 0.2132425283898307, 0.33378151261235733, 0.3544647856975852, 0.2608048669900712, 0.2225331667068301, 0.1264162349449811, 0.21301116359531214, 0.21435676671972093, 0.19220742558001958, 0.2722224137970972, 0.2842541734928855, 0.10580498048844111, 0.00043281009193596454, 9.999999999998899e-05, 0.04936736929983854, 9.999999999998899e-05, 9.999999999998899e-05, 0.009427295416888581, 0.13161557448816497, 0.0014839684420063781, 0.08070623805120136, 0.15700060841577657, 0.13359416667963286, 0.1127725874331994, 0.10578595117917444, 0.08138965362519046, 0.08751988803357669, 0.16641334213350056, 0.1455264980880695, 0.15096054127530367, 0.24827236997447777, 0.06256258054637054, 0.13070506064208043, 0.25679255120292377, 0.10028430684741929, 0.11149415348848524, 0.09513238678230196, 0.09407538130964332, 0.0709273406203631, 0.13552625733314638, 0.08438132620049088, 0.2530685013441113, 0.0638399464590852, 0.078471971660113, 0.21093721751715533, 0.13767763636612418, 0.15341889319359892, 0.09049251815437742, 0.5209813955768642, 0.5210356671499673, 0.5109715816709071, 0.5708968714794294, 0.6024210337931009, 0.5218273614927297, 0.6068204480327568, 0.5331926327514214, 0.5722724346183837, 0.09136240080518232, 0.11286573596592475, 0.115162430379398, 0.13730197583869974, 0.14528846455406075, 0.09791617091052851, 0.1471471546971359, 0.11378922467467978, 0.09863740153140954, 0.20235448822466562, 0.19911841083112125, 0.16377078771796716, 0.1685075131902255, 0.28632677077426116, 0.15783571257575346, 0.1909753844240628, 0.15396374235264798, 0.28397369134347505, 0.22321352695259478, 0.38152134786444536, 0.25033339446353897, 0.41025533392632574, 0.3925436476066114, 0.37864352638943244, 0.2560656415501398, 0.36102701961737826, 0.2694256053832007, 0.2500385766454226, 0.17780615289320212, 0.16791113072488184, 0.22574165305868665, 0.222760841873743, 0.22894013326598317, 0.24354720259000318, 0.3260722816530739, 0.18916076727379982, 0.2627528892081278, 0.22929904899623976, 0.19995546415281784, 0.21787147731068357, 0.25622793829693324, 0.20615201170312625, 0.23937268792933442, 0.20541007044615778, 0.24718218624021981, 0.2115041263615296, 0.2014039179835142, 0.20550132030130797, 0.22058569066552947, 0.19042901270379298, 0.19247864557829053, 0.18829792556243996, 0.20307727034011702, 0.20701455379987654, 0.7369469497639474, 0.17156721945666686, 0.7460875629071613, 0.8228403886364674, 0.1955940342948589, 0.8338994915226252, 0.14923390876632425, 0.7052709423511819, 0.6927099156404797, 0.46065565272219755, 0.7366642350243015, 0.20155319882263079, 0.6718596596820089, 0.35775569024800347, 0.6520702616348102, 0.5323712022028111, 0.5672250900274738, 0.618240738909972, 0.18449732440963185, 0.18863138055199968, 0.19669763923487116, 0.2360082900845425, 0.22139739592095242, 0.2098621452700108, 0.1962872852554629, 0.24191311489973755, 0.19675251139487793, 0.11354632580404611, 0.08085459062316824, 0.09715723715812397, 0.13041339782429406, 0.09072477760662767, 0.10959561572924281, 0.08688694882482073, 0.09575539992884641, 0.12303722966518671]}, "mutation_prompt": null}
{"id": "a8c51ab0-db1e-410a-adf7-151239388288", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7  # Changed from 1.5 to 1.7 for enhanced exploration\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Slightly increased adaptive velocity clamping factor\n                max_velocity = 0.55 * np.linalg.norm(global_best_position)\n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing, changed scaling factor from 0.5 to 0.55\n            population_size = int(min(50, self.budget // 10) * (0.55 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Adjust the population size scaling factor to slightly increase diversity and adaptability during optimization.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 50 is out of bounds for axis 0 with size 50').", "error": "IndexError('index 50 is out of bounds for axis 0 with size 50')", "parent_id": "27ad5638-595b-47ab-a88e-82e7fe76cc35", "metadata": {}, "mutation_prompt": null}
{"id": "c67c215b-0774-4aed-8816-49d0b08ed1e7", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7  \n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            diversity = np.std(swarm)  # Calculate swarm diversity\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)  \n                # Introduce diversity factor to adapt learning rates\n                cognitive_coeff = cognitive_coeff_base * (1 - diversity) * decay_factor\n                social_coeff = social_coeff_base * diversity * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                max_velocity = 0.55 * np.linalg.norm(global_best_position)\n\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce adaptive learning rates for cognitive and social components based on swarm diversity to enhance exploration and exploitation balance.", "configspace": "", "generation": 91, "fitness": 0.10640846997426925, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.19.", "error": "", "parent_id": "27ad5638-595b-47ab-a88e-82e7fe76cc35", "metadata": {"aucs": [0.14334242117739326, 0.1647819277053817, 0.2013112957525124, 0.13558993645671302, 0.13956240850847135, 0.13499924980687716, 0.10977858188318734, 0.12805713464407742, 0.13768566808708016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0324517726274669, 0.02545683524948783, 0.016938807022062408, 0.012683498338026622, 0.019361885437187643, 0.033282540160007534, 0.018248263482334326, 0.028763723664770424, 0.03220486213620022, 0.004130844536417322, 0.030493314821154693, 0.016392143203409426, 0.01959972157639278, 0.018986126518923063, 0.01153251256114507, 0.020039343892282013, 0.007251587413040439, 0.021760114326389912, 0.9873346261095519, 0.9901554152678061, 0.9905919705536161, 0.992636124226431, 0.9887485212473832, 0.9883983903933382, 0.9920800939537916, 0.9885059811379683, 0.9898662212349667, 0.13618518527836165, 0.036358407353782596, 9.999999999998899e-05, 0.0400656256072045, 0.05393123586626791, 0.04538052449192509, 0.08922715078525922, 0.05858341804475098, 0.035863643470613216, 0.10449966628487983, 0.1319910782666448, 0.12587421513184038, 0.1584279570859144, 0.08797772155117722, 0.03750823598194586, 0.05920672380476166, 0.09067059303214775, 0.040915521963287405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05643839154186392, 0.007179453827149351, 9.999999999998899e-05, 0.07047223684469317, 9.999999999998899e-05, 0.06177875046788561, 0.00162230464392088, 9.999999999998899e-05, 0.0695609038356566, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01822000584822836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011479120551530109, 0.00346839697470136, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14656161419448088, 0.15983750364744886, 0.16219628808302589, 0.13330115126129782, 0.18741867791399358, 0.15671461268482767, 0.21065927986569855, 0.17881529311156463, 0.16943476160736115, 0.02373679690029662, 0.016837488816174973, 0.0383316908536806, 0.05738219142268608, 0.038866562374784364, 0.03299073061330804, 0.016882276814120134, 0.03683502813426043, 0.03230545848954114, 0.09741803824331219, 0.10387641349168586, 0.1236857904328339, 0.10520845301726656, 0.10852972522114013, 0.11134593205204824, 0.09798893200676084, 0.0943062141632468, 0.07726393575557644, 0.138610929961673, 0.15377806431209862, 0.1625387948011887, 0.18368843477586572, 0.1455903238454026, 0.13361414650701986, 0.1464143301750349, 0.17410016058268063, 0.13822966086829225, 0.08385544436100323, 0.046859040762345594, 0.10095744401329887, 0.13461167058842471, 0.11608295185913153, 0.10140139457592434, 0.0892298297504387, 0.0997711199450243, 0.08498434828411194, 0.1455420661614566, 0.11255584181562828, 0.13345086981233123, 0.1489327876263662, 0.12099969987332426, 0.13784018165370926, 0.12638788049951033, 0.14732538542369855, 0.1362999380880905, 0.1386652552296438, 0.15470893754794346, 0.1405302601420495, 0.00016241470978695105, 0.13692280267492896, 0.14729354911664727, 0.014492354533567009, 9.999999999998899e-05, 0.145764552680129, 0.10187843811535546, 0.11175483114716134, 0.09983341198090945, 0.14313572364911487, 0.1207914665021157, 0.1175251854131597, 0.11088998040850451, 0.10844556136710615, 0.13779881942719763, 0.14498230700183035, 0.10406563503289767, 0.13758662935942834, 0.0506857903344724, 0.0855084568414255, 0.0609202112952707, 0.1136829605368701, 0.07956266272519552, 0.12163382276508605, 0.1485411298973175, 0.1564346215698913, 0.16867330764264987, 0.14406902560738577, 0.15331482891418013, 0.15312145661521004, 0.1742488630609318, 0.1483656358728025, 0.14689007985489466, 0.042152226400929416, 0.042071778808143945, 0.03887321354890538, 0.027015293023570086, 0.03425093938292756, 0.05004531334007678, 0.051869503009380646, 0.07546577875243077, 0.025730582857598328]}, "mutation_prompt": null}
{"id": "d5d5437a-efd7-47d4-95c8-19bf96682dec", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7  # Changed from 1.5 to 1.7 for enhanced exploration\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.95 - 0.4 * (self.evaluations / self.budget)  # Increased initial inertia weight\n                \n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Slightly increased adaptive velocity clamping factor\n                max_velocity = 0.55 * np.linalg.norm(global_best_position)\n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Increase the inertia weight for improved balance between exploration and exploitation.", "configspace": "", "generation": 92, "fitness": 0.306128828152896, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.24.", "error": "", "parent_id": "27ad5638-595b-47ab-a88e-82e7fe76cc35", "metadata": {"aucs": [0.7793858264788895, 0.7706778099187246, 0.806832717208142, 0.79986741507878, 0.722162886880076, 0.8046038660512672, 0.8065908690343642, 0.7636334225214185, 0.7961212003375137, 0.36870939373447964, 0.3502526636508655, 0.37668951236535597, 0.3151065972636379, 0.3800713974764246, 0.46228587868872417, 0.21739817393373173, 0.4251036058741151, 0.31712690219927053, 0.13706006128987924, 0.16501698154327482, 0.25832747112732746, 0.13185663689728322, 0.326590232219397, 0.13696842921024177, 0.14254956889503156, 0.14655152660449655, 0.11105599903926244, 0.09138887945947027, 0.12408088559613462, 0.11415010336678644, 0.13258347082533384, 0.09974018491678505, 0.11281855936507013, 0.13061871438466477, 0.09958383348553357, 0.1020545414804197, 0.9562834484237733, 0.963175556961196, 0.9613457675402844, 0.9364288757429156, 0.9121693122490603, 0.9477185597949803, 0.9607467133779697, 0.947909771614108, 0.9196539493440107, 0.5799561312108474, 0.6187017408552448, 0.5052450120105245, 0.5490688888653523, 0.5983044445065648, 0.5207639753698031, 0.5246298748982086, 0.5427857718514717, 0.5456049575395844, 0.35948698515812216, 0.709534716915122, 0.2177065082804165, 0.26179542625547647, 0.3107111290315453, 0.2658755744840663, 0.21823362684597936, 0.32889837042685566, 0.21875911878015508, 0.1979193099259201, 0.1997417124021249, 0.17658740312644294, 0.20075281344571871, 0.18947930581400285, 0.20882687875374084, 0.2029267221960559, 0.258440377790665, 0.2019709448086351, 0.3379141674881406, 0.2211011443835892, 0.38694033893063673, 0.22791470048592644, 0.1283692649294328, 0.26313868023045583, 0.24512771813169, 0.26869406742652224, 0.10900089054665785, 9.999999999998899e-05, 0.05781832238304907, 0.10799969758378081, 9.999999999998899e-05, 0.004371500955120622, 9.999999999998899e-05, 0.0387210040959326, 9.999999999998899e-05, 0.008220017496443743, 0.20423618203058536, 0.07035387811414695, 0.12045324116701772, 0.11369435553621077, 0.08121739310132925, 0.05212537708848142, 0.1236519068323445, 0.14839041326646052, 0.14405556935227504, 0.10804746866385972, 0.09543865909605298, 0.2711098177865954, 0.2101139150142236, 0.07202686461139451, 0.06026320090213444, 0.08730363718343415, 0.1788045316033513, 0.06362160013038287, 0.17969651874414905, 0.10939534970942566, 0.22232711566284902, 0.08730802436316609, 0.08431583957386868, 0.14261529664954287, 0.10163463971797759, 0.20673811953106092, 0.0784797029821881, 0.48668131792560954, 0.5762445194943318, 0.562810114782502, 0.5343912672558149, 0.5247144929767322, 0.5040649091133895, 0.5880673209207776, 0.5139660560639534, 0.5516482601940423, 0.11273598826942666, 0.11094983120152191, 0.10393922036161496, 0.10647549750755314, 0.1125784936588301, 0.10460065569084798, 0.12095963164580936, 0.10279027478665614, 0.11411313675557233, 0.17653744875176147, 0.32331476443737006, 0.16351926366699898, 0.2298889100327448, 0.24191698920833993, 0.2490532390905158, 0.20531147588439302, 0.1578349473478251, 0.18291369108352562, 0.4115565906957158, 0.28983854109497253, 0.30839944009152565, 0.3035117034952277, 0.2479647362200893, 0.3286665364259871, 0.3225932280941861, 0.3421586664510097, 0.4536500450022959, 0.17750943470479397, 0.3226255903947738, 0.24319662590040136, 0.31145835921009135, 0.2939449171270886, 0.22935498370026175, 0.23832031512931195, 0.2301676427936482, 0.22898590500632499, 0.21061607625002243, 0.23987796387504834, 0.19729028985085517, 0.21496319025390587, 0.23385992321936422, 0.19462354047549302, 0.23002593287197992, 0.23664480984313419, 0.21585715327973998, 0.22360736402222514, 0.19242115304762064, 0.199120941730084, 0.40693163945258093, 0.21587766942661057, 0.20116063457615807, 0.19429206062072313, 0.1915870537664881, 0.19239488888504785, 0.6915132800353292, 0.7235104350568016, 0.18195006633258515, 0.6952738093941819, 0.5245720992676597, 0.6867817888781687, 0.1553761086789347, 0.6500597357034931, 0.6866878345815175, 0.6620105446233395, 0.5472144315374923, 0.5487874681186081, 0.5863055834757182, 0.16243320949673978, 0.4070614342567448, 0.5625687558321091, 0.5331979766142747, 0.5453721171213567, 0.19682593918463387, 0.2136701593494824, 0.19895407893369232, 0.1879402221783969, 0.1857198509140302, 0.1927808705732741, 0.1892420853469795, 0.18401896706050203, 0.19223967148091692, 0.0849680509191405, 0.13534231130320273, 0.10503927436952776, 0.11825780988985846, 0.09123522709150489, 0.1007092864887622, 0.11592645438594285, 0.09428980356892191, 0.08200684540747061]}, "mutation_prompt": null}
{"id": "c6417441-87ee-46be-b25f-5b2350654383", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7  # Changed from 1.5 to 1.7 for enhanced exploration\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Slightly increased adaptive velocity clamping factor\n                max_velocity = 0.55 * np.linalg.norm(global_best_position)\n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.6 + 0.4 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Adjust the dynamic population resizing factor to enhance diversity in the population and improve convergence.", "configspace": "", "generation": 93, "fitness": 0.32689541918676995, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.26.", "error": "", "parent_id": "27ad5638-595b-47ab-a88e-82e7fe76cc35", "metadata": {"aucs": [0.8245421178207912, 0.8395878820355265, 0.8293920181768688, 0.8391911078277713, 0.844726040324125, 0.8178126560949807, 0.8274718224845954, 0.8508982266287266, 0.8314298907707044, 0.5845761915391336, 0.49737868054580814, 0.5880229915073749, 0.43171259731405953, 0.646532381089772, 0.6210510999034409, 0.5280592994287311, 0.5802377008808506, 0.5089038577278941, 0.1580772579243308, 0.15634917808140658, 0.30565297260879465, 0.13855591973507364, 0.15768588025729768, 0.14550399104106693, 0.14367269324016363, 0.2743789769077535, 0.09015540892816443, 0.10850605191783069, 0.10248642524825757, 0.08239953216869011, 0.14124051198432885, 0.10235951531623522, 0.10334531556210891, 0.1290348560374439, 0.11738635684338783, 0.13298680659834194, 0.9341841980262532, 0.9407510736224582, 0.9498645148783097, 0.8847147061786302, 0.9145373101425577, 0.9008053342967358, 0.9198916785010516, 0.9373872129791351, 0.9463562088630846, 0.6381957049767499, 0.6896643070701706, 0.651436463463889, 0.5979572362128616, 0.5057999147550883, 0.6226271213350631, 0.6653923400758571, 0.650418866111647, 0.6598243959459354, 0.6351315002657945, 0.7854060973624568, 0.7812089669196152, 0.2105102442243565, 0.26795585397646426, 0.2650187921242697, 0.17300161352449828, 0.22316102849134878, 0.2271200182356451, 0.25083704530893725, 0.17856383600273862, 0.21081055016020578, 0.12608719778858735, 0.21063154116416394, 0.19247233702568833, 0.2599717611651179, 0.24133474328431526, 0.22801609470758855, 0.24451817753170513, 0.240846693857944, 0.24489336071809065, 0.236137403005656, 0.26091727177020063, 0.1848068248270106, 0.22191721063346237, 0.1443320419102091, 0.1770806318442646, 0.054956127558477785, 9.999999999998899e-05, 0.007135028674772559, 0.08797496102523816, 0.027802903281447966, 0.03515691036519564, 0.09156340583923306, 9.999999999998899e-05, 0.001273272524318414, 0.1761117326372037, 0.17776041097494977, 0.1400204831317089, 0.08855242752839931, 0.09833718223752874, 0.07457790149955035, 0.10425462888820347, 0.09688436190242244, 0.0920592415172301, 0.11341337791182016, 0.05816422901740592, 0.39611884034401523, 0.07511656985287496, 0.24166457004645514, 0.0725883706138436, 0.09272358536185243, 0.1376302352025638, 0.10607568363971331, 0.11969862874068826, 0.46456808853763987, 0.10574354312505363, 0.10290775977069822, 0.32001296942888735, 0.11416949966696288, 0.10669235993803527, 0.3116450633784814, 0.09266847646530585, 0.5362043201949753, 0.5226451920610744, 0.591109442792313, 0.5473010518731567, 0.5666724904673619, 0.513327117876778, 0.5793340329089096, 0.613284526878741, 0.5716461437220048, 0.09026887181784282, 0.12033470469884211, 0.10430144531094065, 0.12068764479495275, 0.14150226234840757, 0.14179331969366793, 0.13507044545844038, 0.11636067487231772, 0.10541574730532866, 0.1779700462177558, 0.3145621160656137, 0.18995010341170981, 0.17259437849128667, 0.16967413228932438, 0.19966710296236, 0.18662211850682353, 0.17723267607168947, 0.2751581365235224, 0.34543052137038677, 0.2401157295689097, 0.3895416179517961, 0.41631591942276314, 0.2933514317259994, 0.4562886537431122, 0.25521875186189447, 0.3573811928822007, 0.361516893321429, 0.2446921493899824, 0.2321959729174482, 0.1522548741299794, 0.22654163435374808, 0.211441294466978, 0.26881691612635805, 0.17126659147357148, 0.2929933469732596, 0.20077949544261997, 0.21164707339235367, 0.22394730943739038, 0.21502598782450966, 0.24074470394042224, 0.21204756483313902, 0.19036773242385185, 0.2114050675953527, 0.22053701091573097, 0.20162914136214827, 0.5647254532116386, 0.19883653673682866, 0.2116340998513201, 0.2120844991107257, 0.20035897009688075, 0.4060514809840968, 0.6280122729275964, 0.2145279808896564, 0.24226183068188167, 0.17567542026974203, 0.17423156672949736, 0.80529787698936, 0.7887393513780637, 0.1977626413079131, 0.749217864304409, 0.77818042261549, 0.16574019778652127, 0.7157881916791475, 0.6322232139722839, 0.5544456240835063, 0.7285069447064052, 0.20038381438867814, 0.1655062606435167, 0.42332292652167736, 0.497754948551406, 0.7037054788106243, 0.6247237801795935, 0.19908795564983617, 0.1766317535503804, 0.19192259314705284, 0.18815520218572035, 0.21630324684565128, 0.20285119174684585, 0.21830104922304128, 0.19501298224395758, 0.18621315486106382, 0.09853002674028866, 0.12659856502295352, 0.12158294751620635, 0.09310001901046105, 0.10126188831561389, 0.115488870105808, 0.1169857802956834, 0.09081079121595614, 0.08666358439803168]}, "mutation_prompt": null}
{"id": "1ca9506b-1a78-470f-877b-d9910d577fd4", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7  # Changed from 1.5 to 1.7 for enhanced exploration\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.95 + 0.05 * (self.evaluations / self.budget)  # Slightly adjusted decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Enhanced velocity clamping strategy\n                max_velocity = 0.6 * np.linalg.norm(global_best_position)  # Adjusted clamping factor\n\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Enhance the dynamic adaptation of velocity clamping and decay factor to balance exploration and exploitation.", "configspace": "", "generation": 94, "fitness": 0.3223274665446141, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.26.", "error": "", "parent_id": "27ad5638-595b-47ab-a88e-82e7fe76cc35", "metadata": {"aucs": [0.8567293762703546, 0.8624258873449765, 0.8437749434571875, 0.8501531279850034, 0.8374039677467834, 0.8606961642649467, 0.8527309549805926, 0.8537106318953536, 0.8452550291181378, 0.5990436718444275, 0.6345315714368969, 0.45151803336444507, 0.4908357169633838, 0.6264297486968755, 0.6872756510001944, 0.6041971961876055, 0.6191962676726732, 0.5974774594559029, 0.13385644607148173, 0.1390821835142677, 0.12418838393680054, 0.13214910670881586, 0.11413197287357868, 0.16633918648887125, 0.09246948316156245, 0.1367206932444367, 0.12382547679714062, 0.10516781014832155, 0.12216963983673212, 0.07586010885081274, 0.10484154737519324, 0.13043129101291284, 0.10286267337452648, 0.16928192889099447, 0.12275060497691703, 0.11318512765449162, 0.9517885392441597, 0.9449883922259077, 0.9548503802948475, 0.9167461315150309, 0.847102788583373, 0.9161901098895436, 0.9390292665779434, 0.9203750004952003, 0.8972670614588568, 0.6485392356978871, 0.6489469458533468, 0.5985961418434316, 0.6416446786101275, 0.397704307398994, 0.6876182945015779, 0.6115592258847009, 0.6402650238455352, 0.6683267218345876, 0.3462777855499103, 0.7776516254417518, 0.3632564447976646, 0.21303053815810424, 0.2715225513078281, 0.20438189967749631, 0.220294774109419, 0.7508835579736005, 0.2224724610489246, 0.21930426248667068, 0.231516892610919, 0.16781149915236293, 0.1970458495219225, 0.2645769691041344, 0.2126860516255692, 0.23535438509856155, 0.24309156540265608, 0.229503216630905, 0.12239587641197325, 0.2512500907350723, 0.12923968787434548, 0.2534288550896543, 0.2710242221034064, 0.24951792281351004, 0.23264574546822958, 0.12232486587694835, 0.10518162479551518, 9.999999999998899e-05, 9.999999999998899e-05, 0.06644459028286742, 0.00916394871663273, 9.999999999998899e-05, 0.07827007596714652, 0.04826137812552189, 0.004687320563818376, 0.00013856770336406754, 0.17501990580444904, 0.14448997327067992, 0.15577167955493643, 0.11007842453195604, 0.06633092251387351, 0.10813271049964446, 0.12967790542596813, 0.14602607837304293, 0.10292837327195303, 0.1935127428193073, 0.06452962518589356, 0.18782475978443625, 0.2191008650519598, 0.092904979144533, 0.12533033177440323, 0.09172373041405824, 0.13417977210479348, 0.0679688360302616, 0.13179035624621815, 0.10909824930278877, 0.18303467772806514, 0.060927388644609004, 0.11038594356482334, 0.20269430427988766, 0.12440098810527156, 0.13598336719266224, 0.08060031971533332, 0.5202776931065587, 0.5094261656362812, 0.6078919625828392, 0.5505597596635745, 0.5291263065179264, 0.5442993901580484, 0.5695395179472342, 0.5456612437617272, 0.5556076098779157, 0.1599681393717921, 0.10057818751008363, 0.14779186506094577, 0.12588553663815616, 0.1097553681628215, 0.11820185631331281, 0.10889488307856887, 0.09805053865130486, 0.10630120347773153, 0.19012957460171587, 0.18403937894705247, 0.17708322390174858, 0.20742149642229835, 0.17857854663646644, 0.2215724464725165, 0.2766574678519732, 0.24725523409017036, 0.31492533817571833, 0.2789402331111822, 0.3293052947043881, 0.34614244556926577, 0.38352942833351256, 0.44310594371041134, 0.2910435909150434, 0.2557529992200531, 0.4088974138076542, 0.22136813119662346, 0.24870895184470632, 0.1655499294768591, 0.17716158187378372, 0.31107347792622764, 0.2503563697908677, 0.3872290995210309, 0.20877578012450504, 0.3135954486236703, 0.1669586859123099, 0.24075312251353964, 0.23125749612659652, 0.24246465598145173, 0.20725000641355174, 0.20249243712020504, 0.2039321266479447, 0.22683027683887114, 0.2487678218447582, 0.20292439919088057, 0.2041700022138503, 0.21678301845279435, 0.2327954781742687, 0.22882330257902672, 0.1980396178367948, 0.19386846490136445, 0.21609075838634384, 0.20514628977537197, 0.23170437811478162, 0.7657209320055781, 0.5691314378819041, 0.8099901618294487, 0.7746847086761841, 0.1971742916995719, 0.8494258938488802, 0.1708538575101718, 0.7728872539212596, 0.6946047568388767, 0.6156730379552656, 0.2033084448360517, 0.2016227503864758, 0.6338508745702389, 0.39365852007124824, 0.6045379028693203, 0.5872823196339764, 0.5517577495101607, 0.6527008565158814, 0.2650585650224103, 0.191004448848908, 0.21287652652954736, 0.19175603462870527, 0.20431609732960343, 0.19027238288688253, 0.21319858971608519, 0.19174483716520097, 0.19515669417833093, 0.08804722126377507, 0.07645661566077411, 0.0844551218377162, 0.08513783914550854, 0.09792946049420947, 0.1274455421101377, 0.08510630864079671, 0.07994378679957259, 0.0832709345061523]}, "mutation_prompt": null}
{"id": "a9abb9b1-f5ab-497d-a852-b00de308897e", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.8  # Changed from 1.7 to 1.8 for improved exploration\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Slightly increased adaptive velocity clamping factor\n                max_velocity = 0.55 * np.linalg.norm(global_best_position)\n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Increase the base cognitive coefficient slightly to enhance individual exploration capability.", "configspace": "", "generation": 95, "fitness": 0.326907927883251, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.26.", "error": "", "parent_id": "27ad5638-595b-47ab-a88e-82e7fe76cc35", "metadata": {"aucs": [0.851675443135414, 0.8607231098567338, 0.8505728148123151, 0.8557470759199248, 0.8403744982428598, 0.8487658609047045, 0.8186865563990008, 0.821756161156219, 0.8471865985598468, 0.566988815198733, 0.599515427445255, 0.5628973095873264, 0.6836729782565949, 0.5308879652244751, 0.6307356798285237, 0.5497359400865073, 0.47420562417614454, 0.6150132168606164, 0.1208232089573621, 0.11898496850175033, 0.1324749281232045, 0.34223076020128795, 0.13783108707883163, 0.13441092480319838, 0.5237360532346329, 0.1419670185498042, 0.08740645726501828, 0.14880019602135586, 0.1003261452366967, 0.09745567236992791, 0.14098419965568698, 0.11483428425483655, 0.09959866680836293, 0.13402502907187686, 0.10142240217248033, 0.10856600933867722, 0.9538910636547647, 0.946862803566462, 0.9555797990820744, 0.9168770974373451, 0.8522788339375974, 0.9167164875187449, 0.9389069485089597, 0.9321589426834282, 0.901709795130745, 0.6925541379857578, 0.7014963251578726, 0.5282804041819261, 0.6937768746056809, 0.6727410871092929, 0.6353187899140811, 0.7083142520867556, 0.6344893205616043, 0.6748419871357365, 0.7672914314029959, 0.4560074210258718, 0.30991612341198205, 0.7618687451138443, 0.26668289825970104, 0.18962788017435106, 0.34403751163580665, 0.26526979702501485, 0.22801480782730754, 0.21248396613264453, 0.23617582785169122, 0.19870881009465402, 0.21683978715718122, 0.2164459502999625, 0.15436902569443123, 0.23370857627131159, 0.2694214755433092, 0.18922317570919278, 0.2200855763645082, 0.26133511703392065, 0.18703914633617247, 0.23522347757063822, 0.254498087787306, 0.24593654258941822, 0.23935015539221793, 0.11823311133470782, 0.10612482878617213, 9.999999999998899e-05, 9.999999999998899e-05, 0.08520396995175084, 0.009492183166038393, 0.03958609814784109, 0.046931944498350586, 0.0010588469895465025, 0.002890419403214217, 0.04301809452131988, 0.18793190206353916, 0.14589624020064385, 0.13102861393058196, 0.11027203555795406, 0.086553760932916, 0.07865597800981705, 0.15246344617975394, 0.15784363018758107, 0.13674907032298378, 0.13798900325755692, 0.05557635289818863, 0.18923244317159515, 0.1291396317609147, 0.09826485036193722, 0.11969785745366646, 0.1266318281004718, 0.11263550179855009, 0.06737924922499783, 0.07359558210025441, 0.14318151518860045, 0.07789088105147934, 0.033145953965047936, 0.09453209195830736, 0.1381972988600697, 0.16925166351045917, 0.05186487020697805, 0.0802343782488768, 0.5518193245660833, 0.5215189087676626, 0.5515372326447459, 0.5300678656556326, 0.5552668588243255, 0.5509477735203476, 0.5546994535740724, 0.5515891599857234, 0.5565551684295222, 0.12628735344727104, 0.1086345640283769, 0.12052444722533817, 0.10024469701531247, 0.1315435466479754, 0.10116423749519232, 0.15091269828020937, 0.13292520891408344, 0.13130853808454734, 0.23884859827821225, 0.17154698351410658, 0.23063807150594762, 0.25235157429691724, 0.21736918883355616, 0.16935265677425437, 0.18480499419581398, 0.18562055014379186, 0.26989503378737445, 0.1927711616812101, 0.3578266961108695, 0.320007070821121, 0.34877677848683775, 0.26574170009627085, 0.333562987765358, 0.2165965174651211, 0.4697110351339365, 0.2581583259950603, 0.1545834254695223, 0.2584642042275126, 0.1453054157328575, 0.29479704944317797, 0.2582433530189312, 0.3142614392231874, 0.20015726182396743, 0.26951038663034765, 0.2100846501245689, 0.23194909811027764, 0.2163377261290671, 0.2323116309301897, 0.23039735977367115, 0.21991840328291934, 0.22452459101266709, 0.22068013265072084, 0.19825278119728218, 0.21673372938623803, 0.21653447775610102, 0.19375511375743892, 0.23726819559573709, 0.21143949211257052, 0.19536352359607423, 0.18698291036055925, 0.21335448163482507, 0.24510544360786513, 0.18530424298714554, 0.6610836406706465, 0.6289105932802317, 0.789331700669442, 0.8196986539094969, 0.7150565868420309, 0.7720148881431748, 0.7967978578435356, 0.6926772079243779, 0.6135699138095844, 0.572474400794549, 0.20422196477514976, 0.6668004761554294, 0.6931270005370015, 0.6928217892219621, 0.20292253085821144, 0.6145783225490012, 0.5266117519556313, 0.16377167962216221, 0.1855970825606893, 0.18377844005749822, 0.19269398585581454, 0.19468861625471623, 0.19384265272033985, 0.18248681310193182, 0.20383958371350597, 0.19236959886648164, 0.19340555685073557, 0.1109779356383499, 0.09292085820129503, 0.07152315120221209, 0.08840015190242279, 0.08922556360778033, 0.1001638189519859, 0.07793040167921239, 0.0983229860803333, 0.0907763058445642]}, "mutation_prompt": null}
{"id": "f73ada61-6a04-4946-9897-d81f65cd158d", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7  # Changed from 1.5 to 1.7 for enhanced exploration\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.95 - 0.45 * (self.evaluations / self.budget)  # Adjusted for enhanced early exploration\n                \n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Slightly increased adaptive velocity clamping factor\n                max_velocity = 0.55 * np.linalg.norm(global_best_position)\n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Slightly tweak the inertia weight schedule to favor early exploration and late exploitation.", "configspace": "", "generation": 96, "fitness": 0.31865573204097625, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "27ad5638-595b-47ab-a88e-82e7fe76cc35", "metadata": {"aucs": [0.8092772276547088, 0.8223951041048942, 0.8321337309189343, 0.8153524756018145, 0.8103755553679302, 0.7844454606432699, 0.7981112646635542, 0.798212320040054, 0.8154709794824648, 0.28834607804884504, 0.4965230743405429, 0.3781260922910572, 0.296444533596107, 0.47610111164456437, 0.49576281300470293, 0.25421196982014393, 0.44695003814323, 0.31194446496792994, 0.4276382733136216, 0.12839719712473685, 0.13950807020642764, 0.12435391641824989, 0.12503667106265093, 0.1600467089026164, 0.2877064215353926, 0.12254438394712475, 0.1351188312822782, 0.12304586240623416, 0.14373825047140576, 0.0856436413742171, 0.13762471024035294, 0.10776932709040643, 0.1284274361192803, 0.10265830297605749, 0.15016494488197862, 0.1450814632349393, 0.9562437620047474, 0.9631127145881639, 0.9613335837817445, 0.9360907000971561, 0.9119967382493676, 0.9477021671681973, 0.960669487976154, 0.9478534026593971, 0.9151331126511572, 0.648509342814227, 0.606150750697936, 0.5780549438551174, 0.4482743821846432, 0.6378691826131055, 0.5775122219321918, 0.586103764742284, 0.5969773270383003, 0.5806740574964672, 0.6871252274271205, 0.367393841366324, 0.7129866108048851, 0.20471530838181762, 0.2641070613858658, 0.20823819184292303, 0.21845807987667276, 0.684567242203335, 0.7658689982009317, 0.22502947486088443, 0.2127768932109234, 0.22070282468015356, 0.1697399524092652, 0.22109319266077565, 0.20174835104095767, 0.22793651870673548, 0.34808314484586267, 0.2241612390888782, 0.22114216941001563, 0.2173430862364072, 0.20494330658325455, 0.24586545294291628, 0.26123674800446317, 0.2639390616674795, 0.23078730945042503, 0.2521462285981323, 0.10807705312432758, 0.005067998769600179, 0.0001444474749622282, 0.018763871657926923, 0.0011070216204036587, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009308642898098185, 9.999999999998899e-05, 0.010401300999629881, 0.2329999835461376, 0.1203192724997243, 0.1264018671400532, 0.12024728131745255, 0.06993904519006955, 0.0809529151184113, 0.10929779280291663, 0.17839513832891551, 0.14685115396339932, 0.21125890806106196, 0.1587746392264826, 0.2206494726969357, 0.24183387193591166, 0.08808277217784977, 0.065302361104151, 0.05913109400603733, 0.17584676201401495, 0.05356009840202536, 0.19131282253601134, 0.12466006340445368, 0.2702346681190597, 0.057324296806021136, 0.08698753996337727, 0.14037992957953516, 0.10188082148003086, 0.1708502322339529, 0.07893176766118026, 0.47714201890450736, 0.5288099275654852, 0.5008866076297723, 0.51077429079766, 0.5557603825052678, 0.5647603549205178, 0.5590213497660568, 0.5915346850905709, 0.5760128061203349, 0.10428584964119714, 0.09616306846207023, 0.12083165809777563, 0.13258830215028028, 0.12593217479061436, 0.3707234156970418, 0.13943154002760638, 0.11843312653036997, 0.11489111265741359, 0.2483989952019885, 0.17678508136804283, 0.20019702422910945, 0.2056630749070143, 0.18833105488618618, 0.1922249524603492, 0.15916918570720429, 0.27421303887110493, 0.19447183308317084, 0.3185339452658338, 0.3614099739478456, 0.3730322695648385, 0.34129113599086225, 0.37653179117074376, 0.3135367992817375, 0.3051224896168253, 0.4210855654017942, 0.24431163216267127, 0.23362389064527256, 0.22969306234146336, 0.25731108990337104, 0.26569237639094123, 0.2625084630448007, 0.2582902790212378, 0.2224873757084327, 0.29095183312879813, 0.20820476069056804, 0.2198071524680172, 0.24573684908119608, 0.2176237882122215, 0.24117118121632297, 0.22522223398221863, 0.23465902342245526, 0.22765200891659088, 0.22511969017255418, 0.24095610219787056, 0.2061835982035356, 0.1956224437673284, 0.1869006974773484, 0.22552350308905156, 0.2011354238115114, 0.1901294852074048, 0.4506561219686772, 0.19841513713120718, 0.2107653107515488, 0.7071891636066545, 0.7267240486959328, 0.18221589670337646, 0.7390875038269666, 0.19882066576553115, 0.7323413321922987, 0.1565540565416037, 0.614325903646656, 0.6812062317449187, 0.6977302203536002, 0.6055621601675829, 0.6726951806784408, 0.7152475167000671, 0.31068995452208203, 0.5438684816908208, 0.4096109248392603, 0.16017111589697908, 0.639287552594292, 0.2029010528295241, 0.20337407929065776, 0.19642055761047805, 0.20112159142901265, 0.20450038603223542, 0.21048514700182475, 0.20532115750277258, 0.22252749414620687, 0.20474709425205162, 0.07918068852334714, 0.09009237702656825, 0.11328881878454433, 0.07886365419512564, 0.0933609767196183, 0.1492299854997018, 0.09471460859187353, 0.09420973744718553, 0.08335041276496069]}, "mutation_prompt": null}
{"id": "619b1916-ec48-468f-829f-67856eccf0f3", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7  # Changed from 1.5 to 1.7 for enhanced exploration\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.95 - 0.4 * (self.evaluations / self.budget)  # Slightly increased base\n\n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Slightly increased adaptive velocity clamping factor\n                max_velocity = 0.55 * np.linalg.norm(global_best_position)\n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Slightly increased inertia weight base to enhance the exploratory capability of the swarm.", "configspace": "", "generation": 97, "fitness": 0.306128828152896, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.24.", "error": "", "parent_id": "27ad5638-595b-47ab-a88e-82e7fe76cc35", "metadata": {"aucs": [0.7793858264788895, 0.7706778099187246, 0.806832717208142, 0.79986741507878, 0.722162886880076, 0.8046038660512672, 0.8065908690343642, 0.7636334225214185, 0.7961212003375137, 0.36870939373447964, 0.3502526636508655, 0.37668951236535597, 0.3151065972636379, 0.3800713974764246, 0.46228587868872417, 0.21739817393373173, 0.4251036058741151, 0.31712690219927053, 0.13706006128987924, 0.16501698154327482, 0.25832747112732746, 0.13185663689728322, 0.326590232219397, 0.13696842921024177, 0.14254956889503156, 0.14655152660449655, 0.11105599903926244, 0.09138887945947027, 0.12408088559613462, 0.11415010336678644, 0.13258347082533384, 0.09974018491678505, 0.11281855936507013, 0.13061871438466477, 0.09958383348553357, 0.1020545414804197, 0.9562834484237733, 0.963175556961196, 0.9613457675402844, 0.9364288757429156, 0.9121693122490603, 0.9477185597949803, 0.9607467133779697, 0.947909771614108, 0.9196539493440107, 0.5799561312108474, 0.6187017408552448, 0.5052450120105245, 0.5490688888653523, 0.5983044445065648, 0.5207639753698031, 0.5246298748982086, 0.5427857718514717, 0.5456049575395844, 0.35948698515812216, 0.709534716915122, 0.2177065082804165, 0.26179542625547647, 0.3107111290315453, 0.2658755744840663, 0.21823362684597936, 0.32889837042685566, 0.21875911878015508, 0.1979193099259201, 0.1997417124021249, 0.17658740312644294, 0.20075281344571871, 0.18947930581400285, 0.20882687875374084, 0.2029267221960559, 0.258440377790665, 0.2019709448086351, 0.3379141674881406, 0.2211011443835892, 0.38694033893063673, 0.22791470048592644, 0.1283692649294328, 0.26313868023045583, 0.24512771813169, 0.26869406742652224, 0.10900089054665785, 9.999999999998899e-05, 0.05781832238304907, 0.10799969758378081, 9.999999999998899e-05, 0.004371500955120622, 9.999999999998899e-05, 0.0387210040959326, 9.999999999998899e-05, 0.008220017496443743, 0.20423618203058536, 0.07035387811414695, 0.12045324116701772, 0.11369435553621077, 0.08121739310132925, 0.05212537708848142, 0.1236519068323445, 0.14839041326646052, 0.14405556935227504, 0.10804746866385972, 0.09543865909605298, 0.2711098177865954, 0.2101139150142236, 0.07202686461139451, 0.06026320090213444, 0.08730363718343415, 0.1788045316033513, 0.06362160013038287, 0.17969651874414905, 0.10939534970942566, 0.22232711566284902, 0.08730802436316609, 0.08431583957386868, 0.14261529664954287, 0.10163463971797759, 0.20673811953106092, 0.0784797029821881, 0.48668131792560954, 0.5762445194943318, 0.562810114782502, 0.5343912672558149, 0.5247144929767322, 0.5040649091133895, 0.5880673209207776, 0.5139660560639534, 0.5516482601940423, 0.11273598826942666, 0.11094983120152191, 0.10393922036161496, 0.10647549750755314, 0.1125784936588301, 0.10460065569084798, 0.12095963164580936, 0.10279027478665614, 0.11411313675557233, 0.17653744875176147, 0.32331476443737006, 0.16351926366699898, 0.2298889100327448, 0.24191698920833993, 0.2490532390905158, 0.20531147588439302, 0.1578349473478251, 0.18291369108352562, 0.4115565906957158, 0.28983854109497253, 0.30839944009152565, 0.3035117034952277, 0.2479647362200893, 0.3286665364259871, 0.3225932280941861, 0.3421586664510097, 0.4536500450022959, 0.17750943470479397, 0.3226255903947738, 0.24319662590040136, 0.31145835921009135, 0.2939449171270886, 0.22935498370026175, 0.23832031512931195, 0.2301676427936482, 0.22898590500632499, 0.21061607625002243, 0.23987796387504834, 0.19729028985085517, 0.21496319025390587, 0.23385992321936422, 0.19462354047549302, 0.23002593287197992, 0.23664480984313419, 0.21585715327973998, 0.22360736402222514, 0.19242115304762064, 0.199120941730084, 0.40693163945258093, 0.21587766942661057, 0.20116063457615807, 0.19429206062072313, 0.1915870537664881, 0.19239488888504785, 0.6915132800353292, 0.7235104350568016, 0.18195006633258515, 0.6952738093941819, 0.5245720992676597, 0.6867817888781687, 0.1553761086789347, 0.6500597357034931, 0.6866878345815175, 0.6620105446233395, 0.5472144315374923, 0.5487874681186081, 0.5863055834757182, 0.16243320949673978, 0.4070614342567448, 0.5625687558321091, 0.5331979766142747, 0.5453721171213567, 0.19682593918463387, 0.2136701593494824, 0.19895407893369232, 0.1879402221783969, 0.1857198509140302, 0.1927808705732741, 0.1892420853469795, 0.18401896706050203, 0.19223967148091692, 0.0849680509191405, 0.13534231130320273, 0.10503927436952776, 0.11825780988985846, 0.09123522709150489, 0.1007092864887622, 0.11592645438594285, 0.09428980356892191, 0.08200684540747061]}, "mutation_prompt": null}
{"id": "9315901c-1fc7-490b-9f5e-d8ce0eb7a6c7", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7  # Changed from 1.5 to 1.7 for enhanced exploration\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget)\n                \n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Slightly increased adaptive velocity clamping factor\n                max_velocity = 0.6 * np.linalg.norm(global_best_position)  # Changed from 0.55 to 0.6\n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduced a slight increase in the adaptive velocity clamping factor to enhance exploration.", "configspace": "", "generation": 98, "fitness": 0.33455840453901975, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.26.", "error": "", "parent_id": "27ad5638-595b-47ab-a88e-82e7fe76cc35", "metadata": {"aucs": [0.8518054513837655, 0.8650149591928635, 0.8429391538835211, 0.856024037500573, 0.8497997784256758, 0.8262596554375692, 0.8511560302122059, 0.8586612256226924, 0.844578250399371, 0.6804559194297055, 0.5453294263881128, 0.5928791282228186, 0.5266075447924067, 0.6108685120421098, 0.6668627927337085, 0.48546706111586846, 0.6313693400978858, 0.5939708826652103, 0.14238098261327037, 0.14448831306222232, 0.12173118737314692, 0.4749367519889096, 0.13362885499058064, 0.155068332075177, 0.10418420343252477, 0.1550050749044456, 0.14016914360637434, 0.41544574031075043, 0.12357944323479875, 0.09781827670048393, 0.13305141234038187, 0.0901282063415143, 0.12721114916329657, 0.12280057896558205, 0.10696828131448188, 0.10133708050676049, 0.9517998799272424, 0.9451060991534151, 0.9550029518669542, 0.9144993412516249, 0.862329059045597, 0.9161816292787832, 0.9390544848776956, 0.9201642388092636, 0.9005600671691727, 0.649712533837494, 0.6645482994916447, 0.580229418092866, 0.6461610463575655, 0.6091055135509748, 0.656839790767208, 0.6808945598352427, 0.654691134316503, 0.6406406422975477, 0.770659110968466, 0.6541432618169248, 0.22331907380769567, 0.8349009946126145, 0.20755728778803584, 0.2632465827082565, 0.22492334515998968, 0.32511600478806635, 0.3652290790231768, 0.23376439768954993, 0.22483497508934458, 0.17491956581271462, 0.23594445338040226, 0.2188978457316364, 0.2138783121425024, 0.2422144076851418, 0.24673824103271758, 0.17594834549108107, 0.21968411182517944, 0.20516805944241345, 0.12679785665247223, 0.24435065933328115, 0.2587370913899536, 0.2658313075481865, 0.2327403113369193, 0.20576325035983478, 0.10403439287829808, 0.003518210646401121, 9.999999999998899e-05, 0.07359844719848041, 9.999999999998899e-05, 0.031028810529141637, 9.999999999998899e-05, 0.09545670416084218, 0.0071102050602012135, 0.07233451627621157, 0.16122333384388932, 0.0965455629442673, 0.16359808149856858, 0.15456538547265664, 0.0773068412176906, 0.12014661443637431, 0.14711105616780573, 0.1910370193929365, 0.1392206239552306, 0.17403792407846685, 0.05972241880828788, 0.18127420441045028, 0.20950656870550344, 0.08844698098773063, 0.1155286845120338, 0.09968885780977721, 0.12275297447397149, 0.069692158961277, 0.1357972144205376, 0.11949307186955249, 0.22036536895287406, 0.05695901524227598, 0.08507122851636029, 0.20460501194587877, 0.11586308871405127, 0.12049292381090437, 0.08050759409631825, 0.5457626005187339, 0.6375794080850166, 0.5609929975296905, 0.5440263923097277, 0.5338718835768038, 0.5448167763212441, 0.5437479787107957, 0.5419817928734012, 0.5294901129907339, 0.11230024629966151, 0.1410504346808249, 0.0861305150317514, 0.09901371733921915, 0.1563419915743931, 0.10361159482893034, 0.12135995904806873, 0.10276824905350601, 0.10815894689903671, 0.17427870156442427, 0.17929400435603216, 0.2451002872891891, 0.24204494931839982, 0.21400411711443446, 0.1757187435356331, 0.1936948176145632, 0.21629946835100078, 0.36432243568224465, 0.2168129479443981, 0.4295578677602734, 0.366177690440472, 0.31826536656314197, 0.2507466516529838, 0.3805723247933849, 0.22456000462225778, 0.4771340403107802, 0.23952091072440895, 0.2005375665408894, 0.2054071828370767, 0.16803152153183676, 0.2031881189950031, 0.18305728171287772, 0.19529763205701434, 0.22021648037992836, 0.2712480147081734, 0.17597499926135185, 0.22559642088781406, 0.20030388925675302, 0.2071083062090633, 0.22109687477803197, 0.23243910976706905, 0.2369598547401538, 0.21260759748253355, 0.23249059564318963, 0.20717119194122657, 0.22057431119146864, 0.232025798165848, 0.23532680874671952, 0.21931606681829785, 0.18822460476651737, 0.21451235468481733, 0.21085425484362863, 0.5330758441391013, 0.21949729300850873, 0.7654799365355894, 0.5991160990874231, 0.7420568089742823, 0.7981622920362514, 0.5516211298671425, 0.7533163695482517, 0.1704197932446676, 0.7379649418368087, 0.7737513060080945, 0.6170276333713153, 0.48992908044293204, 0.5839829035800599, 0.7770418034264477, 0.41066921252069655, 0.6322811741732766, 0.5700418329148321, 0.6226044221192668, 0.6133846505932086, 0.1859716817383399, 0.213000362927093, 0.1876916618247998, 0.18516831543506518, 0.21308056168490452, 0.18874275813445518, 0.19762112984167146, 0.1990662995024326, 0.19330767630586032, 0.09968816560441895, 0.06868674173915101, 0.09110210288470666, 0.09298683948678377, 0.10863573289860995, 0.10902678513963071, 0.08240560902843697, 0.08989720435720683, 0.10568157820034152]}, "mutation_prompt": null}
{"id": "fb2a373e-eb8a-4e6d-9dc8-14871e25ca9c", "solution": "import numpy as np\n\nclass ASDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = int(min(50, self.budget // 10))\n        cognitive_coeff_base = 1.7  # Changed from 1.5 to 1.7 for enhanced exploration\n        social_coeff_base = 1.5\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(swarm[i])\n                self.evaluations += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i]\n                    \n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i]\n\n            # Update velocities and positions\n            for i in range(population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                # Introduce a small adaptive oscillation to inertia weight\n                inertia_weight = 0.9 - 0.4 * (self.evaluations / self.budget) + 0.05 * np.sin(self.evaluations)\n\n                decay_factor = 0.96 + 0.02 * (self.evaluations / self.budget)  # Enhanced adaptive decay factor\n                cognitive_coeff = cognitive_coeff_base * (1 - self.evaluations / self.budget) * decay_factor\n                social_coeff = social_coeff_base * (self.evaluations / self.budget) * decay_factor\n\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Slightly increased adaptive velocity clamping factor\n                max_velocity = 0.55 * np.linalg.norm(global_best_position)\n\n                # Modified line for velocity clamping\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population resizing\n            population_size = int(min(50, self.budget // 10) * (0.5 + 0.5 * self.evaluations / self.budget))\n\n        return {\"best_position\": global_best_position, \"best_score\": global_best_score}", "name": "ASDEOptimizer", "description": "Introduce a small adaptive oscillation to inertia weight for more dynamic exploration and exploitation balance.", "configspace": "", "generation": 99, "fitness": 0.3172753678641932, "feedback": "The algorithm ASDEOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "27ad5638-595b-47ab-a88e-82e7fe76cc35", "metadata": {"aucs": [0.855802223262236, 0.858565328422205, 0.8551292548400637, 0.8478373223002613, 0.8545565734356388, 0.8412975947991277, 0.8484907153524324, 0.8542732461439877, 0.8430657112670288, 0.674798831957575, 0.5948016158282452, 0.6221207592017416, 0.6104388990348788, 0.6632016304121824, 0.6572910600289876, 0.3917238409921311, 0.6220410416915079, 0.458200309233431, 0.1356811552576349, 0.12374759310205141, 0.13059684891561973, 0.14416330749977502, 0.13907384004844114, 0.1256679289727921, 0.12192630193949405, 0.13725600066520305, 0.13347792913954382, 0.1340427604957728, 0.13960028635074728, 0.0934948098871402, 0.14663612817181693, 0.10552251448733019, 0.11276816438507942, 0.10640639674233154, 0.11808540908709364, 0.12412946968337402, 0.9419555411168103, 0.9328460020570359, 0.9495788564125923, 0.9186636903501075, 0.864663696968112, 0.9030369370313506, 0.9242757841500789, 0.9046136307817563, 0.8806203651060713, 0.6589756561469434, 0.6480892774600111, 0.6626272282902047, 0.654967827914976, 0.692622460759458, 0.4579916555775416, 0.7066978277289421, 0.6717073305866923, 0.6608054748486845, 0.34261718349117054, 0.7245108242275762, 0.7587310167041765, 0.8241631059205656, 0.36666674307195357, 0.26048322824490977, 0.20558063609075683, 0.18951746116068457, 0.2061424671104488, 0.2669306720489175, 0.24302393557778157, 0.2272555354723952, 0.21722858415522983, 0.2094506429057682, 0.17277860391838473, 0.26259176058950084, 0.34627294295181177, 0.23192379952179842, 0.2820329625428132, 0.3832506245702695, 0.12633602638951902, 0.2635771844920304, 0.2260580691117553, 0.28000091423564577, 0.2384191820898134, 0.11606124355930292, 0.16703285914751453, 0.007290754871736915, 0.019888450394306756, 0.0707189528131612, 0.04186155059665275, 0.07853059802146312, 0.06320924299646102, 0.009561750194384544, 9.999999999998899e-05, 0.014592004017225157, 0.14080741230120186, 0.10177989416589972, 0.16254898330742074, 0.08273053882586467, 0.06602507333126162, 0.0691177322425276, 0.15791757387090888, 0.1141805886012498, 0.15126942180771674, 0.19662320973319947, 0.0627633808925977, 0.21842441934611045, 0.11806812906368092, 0.15948746679821657, 0.07484669299389624, 0.09317123445062658, 0.19883673139782543, 0.06806355866951164, 0.34031110913343277, 0.2228154618428979, 0.16633070154981067, 0.05372119475820636, 0.18137652222998313, 0.07759859341879327, 0.1035269405960908, 0.15153809903351578, 0.08110497280563089, 0.574805120214458, 0.5792236895667493, 0.5401345981018932, 0.5663440201700843, 0.557871132782572, 0.5411331202788641, 0.5414923447502711, 0.5690736698137898, 0.569007824461786, 0.10457878775816354, 0.12361625417289002, 0.09926323187674935, 0.10233771616791631, 0.11997663785238033, 0.14654879580210112, 0.15867233178183648, 0.08801656895369903, 0.10677751974478145, 0.2425057234918948, 0.21807320319531365, 0.21595140922151246, 0.16177505884233045, 0.22304483029236832, 0.15573125299260027, 0.1959549454948628, 0.17082400350037918, 0.24495685497567343, 0.34387697073775625, 0.45874531811573693, 0.21057318802666836, 0.2492599204356286, 0.23779540790959441, 0.37575792769812155, 0.25446870426907564, 0.5155904955803514, 0.16270286205101858, 0.2191482299893357, 0.17214005025716383, 0.18729848573898555, 0.22493987124077064, 0.20647317478685356, 0.2916568713760167, 0.22133477377349686, 0.29145557477023987, 0.1805745488667888, 0.2462205256122565, 0.21044368081687992, 0.22309063796768258, 0.22458090367587447, 0.24669296446428512, 0.2104840357474519, 0.2234529347835975, 0.2502174149477535, 0.24517719354850243, 0.2115537221302617, 0.21131223096545282, 0.18643273436222385, 0.20325653881094308, 0.19958356134055755, 0.19126977213788843, 0.19151030818927095, 0.20148054228784462, 0.23763365128581249, 0.6217196625409871, 0.17356657809778042, 0.698240942182123, 0.8113385013438755, 0.1971713303254904, 0.8605925148180855, 0.17312498975600787, 0.16622079132640755, 0.1761788003373166, 0.4563351786950419, 0.20597603313619572, 0.47390285577141633, 0.2021751642606987, 0.41102171521911934, 0.6232394089066057, 0.5486525855316373, 0.4778231251342637, 0.6250759348571018, 0.19009712482954944, 0.23079583452266428, 0.19353350512539513, 0.1745272697505621, 0.19022727263743222, 0.20589447035069475, 0.1972323615697763, 0.20863515746455674, 0.1956731128651088, 0.10254916313448759, 0.08250549611204916, 0.08949683802965536, 0.0830702260703321, 0.08266175577356605, 0.12037504554199274, 0.13632303843770133, 0.1029333261987565, 0.08668677635700983]}, "mutation_prompt": null}
