{"id": "9e191aa2-5e94-4bae-b76d-74eab2fa5ad4", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                # Select three distinct individuals randomly for mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                # Mutant vector\n                mutant = np.clip(a + self.scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                # Evaluate the trial vector\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                # Selection\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive scaling and crossover\n                if eval_count % (self.population_size * 2) == 0:\n                    self.scaling_factor = np.random.uniform(0.4, 0.9)\n                    self.crossover_rate = np.random.uniform(0.8, 1.0)\n\n        # Return the best solution found\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Adaptive Neighborhood Differential Evolution with Dynamic Scaling and Crossover for Efficient Black Box Optimization.", "configspace": "", "generation": 0, "fitness": 0.3490968762908522, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.23.", "error": "", "parent_id": null, "metadata": {"aucs": [0.7442747161737295, 0.7520010852935113, 0.7339459406000559, 0.7593446914249488, 0.7696095580823765, 0.7611254163523636, 0.7704514019087103, 0.7379713955781453, 0.7555322348216795, 0.5746912273856962, 0.6009117917182459, 0.556266461393193, 0.5744416426229602, 0.6266885309837672, 0.5421507416443581, 0.624291050036567, 0.5916769765832895, 0.5663643788258732, 0.1188308310663404, 0.11446878747256828, 0.10993249294660179, 0.11816622608127214, 0.11901816033542745, 0.13381609280661777, 0.11375727207073327, 0.1188870788920443, 0.12131672807475802, 0.0908173801178469, 0.09734992012941168, 0.09561724667337479, 0.10177750433850219, 0.09453501335750647, 0.09988917716679813, 0.09749094349649623, 0.09970345451890772, 0.1021634421736588, 0.9370518152386133, 0.8377568314695447, 0.8837556004843704, 0.9191778345818646, 0.8089797792338469, 0.9486205340869978, 0.9196236980392624, 0.8769294670471532, 0.9297347021922218, 0.4182218006457372, 0.3669513825770483, 0.36137636554976493, 0.44136498322960604, 0.4217206898346184, 0.4129343570986904, 0.40203147591154376, 0.4147291161092893, 0.40704365461611136, 0.663847776308931, 0.6795088289038669, 0.703150784911099, 0.7322363371929641, 0.7439125618177964, 0.7039869178127267, 0.6884948993598039, 0.7450156570419433, 0.6648033958315034, 0.32726741699325956, 0.36316791975290585, 0.33174378712283625, 0.32381709393761926, 0.26711414944155876, 0.3502206970648437, 0.30944934216002895, 0.3285984168643771, 0.3861096653602982, 0.3454562039631959, 0.3008730160703462, 0.015524434352120031, 0.3864249109796981, 0.2424198087811098, 0.3646900844408183, 0.2943023782655143, 0.34833861245269493, 0.3495411413104502, 0.29045948453122294, 0.31315118950197907, 0.2771308174742805, 0.2559057538831847, 0.3130886690535075, 0.3636184241401902, 0.30089154123589945, 0.3191497344274452, 0.31286845807400065, 0.4721394041882069, 0.4525048474746005, 0.46990733543034513, 0.3731927710028201, 0.43225567668376985, 0.3977861809024139, 0.49692449046034504, 0.5405373269102267, 0.49137708680568526, 0.09728251209815042, 0.11077135774423674, 0.09457636300754624, 0.16401720417816634, 0.10304552666304878, 0.20735906834443318, 0.12152408055472808, 0.1309329453456819, 0.16101184787043987, 0.2608410284482042, 0.25814696783525914, 0.2542490204661202, 0.27677818080926864, 0.27304674992792355, 0.27525941531386744, 0.2397850536988091, 0.26902134000591016, 0.24730994809384188, 0.6693693960965087, 0.639422524110193, 0.6135135469746813, 0.656783457498304, 0.6436492729983083, 0.6490469661904672, 0.6269924837242336, 0.6258815413144505, 0.6574088073329031, 0.09494293008724486, 0.09150233890456816, 0.10645333508354249, 0.1097530105020007, 0.099335128312115, 0.10378265641582551, 0.10911189821208478, 0.08801380195230302, 0.08226894178276067, 0.18926107265824144, 0.29963168903429205, 0.1844023101068164, 0.12671362201407843, 0.15536134409856328, 0.13484033933323059, 0.14250326787052303, 0.1286802286478712, 0.1437997261801489, 0.3449125297640344, 0.3465338020567589, 0.3640038587149822, 0.35144637661920985, 0.351704073061585, 0.35268767449388516, 0.3589436171942143, 0.3677950158432516, 0.3610820024015209, 0.2573296568678234, 0.27588640721547153, 0.2562094988639637, 0.26010944865540897, 0.25920799925781735, 0.26252859992248034, 0.2762450147297696, 0.2783815823623915, 0.26093483657897565, 0.19547562209062985, 0.18955326581341725, 0.203026459340497, 0.18492534562358642, 0.21645060455638176, 0.19374230321633834, 0.20088980930692146, 0.1810932736542169, 0.223652366142861, 0.19106543345529103, 0.17821334269664735, 0.18125339264972795, 0.1908810324841368, 0.1889535708688319, 0.184709834559582, 0.20564814802604525, 0.22818875958145224, 0.18548918937995262, 0.7448550002010206, 0.14969741912829082, 0.6721447191148631, 0.3732309707093243, 0.6997425112954545, 0.5419011657826616, 0.42018160455585707, 0.2821804338926056, 0.7130444452297469, 0.5611418367865901, 0.5867032636202207, 0.19738599311424276, 0.19333857049131864, 0.1992302062083945, 0.6802324537044664, 0.20821256052204795, 0.20262444379386502, 0.2047855611614493, 0.19069111143097295, 0.17441372964570223, 0.187155355875124, 0.1764401544597527, 0.19819968276286126, 0.20979158373827123, 0.1911065376884471, 0.18994347058328453, 0.2137563836958507, 0.06930741507230032, 0.08085305705623613, 0.07588882205164138, 0.07055347335124929, 0.08530653386520282, 0.08463713540857021, 0.0730781341163973, 0.0709615096105104, 0.07548352143826409]}, "mutation_prompt": null}
{"id": "20cfeeec-5312-497b-a9f6-d14df0d67f3d", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                # Select three distinct individuals randomly for mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                # Mutant vector with enhanced control through scaling factor adjustment\n                mutant = np.clip(a + (0.5 + np.random.rand() * 0.3) * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                # Evaluate the trial vector\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                # Selection\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive scaling and crossover\n                if eval_count % (self.population_size * 2) == 0:\n                    self.scaling_factor = np.random.uniform(0.4, 0.9)\n                    self.crossover_rate = np.random.uniform(0.8, 1.0)\n\n        # Return the best solution found\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Improved Adaptive Neighborhood DE with Enhanced Mutant Vector Control for Better Exploration.", "configspace": "", "generation": 1, "fitness": 0.3357239716084893, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.23.", "error": "", "parent_id": "9e191aa2-5e94-4bae-b76d-74eab2fa5ad4", "metadata": {"aucs": [0.7430924763812607, 0.7458807308514444, 0.7409235160703342, 0.75303400247294, 0.7572941138595387, 0.7436307501209698, 0.7435772734570494, 0.7380172207221498, 0.7589685062626408, 0.5747862066447362, 0.5763963396964054, 0.5742551347146357, 0.5426612976373735, 0.5667091194129841, 0.5608559524129266, 0.5524163898361221, 0.56275159082178, 0.5940250166022877, 0.09525629059680507, 0.11749535610420148, 0.1024754302935953, 0.11143510699618198, 0.1088146953075313, 0.11238444438852369, 0.12173387126672497, 0.09616311200593741, 0.09391999831979303, 0.08445065979303412, 0.09220687374792469, 0.09883227631932856, 0.08621790960687392, 0.09477838864261501, 0.09227140895967367, 0.0974721624792313, 0.10157466903749524, 0.09593519071453316, 0.9189701935508842, 0.9120617216308735, 0.9032927418470281, 0.894389293016325, 0.9457940964410863, 0.9761928456293801, 0.8711067161209651, 0.9344031059767097, 0.9155619239837686, 0.39226320770511647, 0.4091239942345247, 0.4134941614014852, 0.3871384148016991, 0.4137973161281212, 0.4065406516327167, 0.4183446265360583, 0.4139732312172536, 0.3897230321355263, 0.6357943011340608, 0.6400920154798913, 0.6844905894220641, 0.7093644676891762, 0.677454325537436, 0.7014500325574593, 0.7028850901622026, 0.7024221162969446, 0.6755184517304281, 0.3848778398412944, 0.35240337278199985, 0.3263175742717823, 0.22168279242686695, 0.31796874402423103, 0.27164552592135993, 0.3707446823105699, 0.3383494130355539, 0.37658838192402144, 0.3143208479169354, 0.3260308273574767, 0.05250979681827228, 0.34818114655899557, 0.21065105735738776, 0.35721716565535144, 0.24850790559335378, 0.2567626256363845, 0.2681684726085606, 0.31809029328743077, 0.32808956934129163, 0.2816142556924439, 0.3446731410387215, 0.2793591811364565, 0.2636450113833869, 0.28480894858416317, 0.3474911944322606, 0.2983266224538337, 0.4840302753479564, 0.45355638087929606, 0.4730547278660453, 0.43750630184077977, 0.41904086506405747, 0.3694945315519166, 0.46852529036286683, 0.4447009151583058, 0.460010226746559, 0.1038526039702572, 0.07463306923908553, 0.07369892741634598, 0.142251120736146, 0.14873250529277282, 0.1490417129424152, 0.11901166479412584, 0.11683399310939913, 0.13425557726495407, 0.25258682267806176, 0.25330050916393954, 0.24538745662740558, 0.2594328058000803, 0.2650780206034209, 0.24844871129461, 0.24323798882926517, 0.2511915064308292, 0.23728622840727498, 0.6176212859247832, 0.5975051458333309, 0.6324398291019825, 0.6221077128278043, 0.6542701544647367, 0.62198440222304, 0.6630112048256007, 0.6125904832808176, 0.6527020966961679, 0.1002209280850288, 0.0974256448746379, 0.09590846372224637, 0.0994686925252719, 0.09037626430640644, 0.11378435695907518, 0.08673083206791654, 0.09032831993568635, 0.09030394138933284, 0.22735735374734134, 0.14375371105520385, 0.1397471654696395, 0.1287453293452705, 0.2002027960505416, 0.13662927225967492, 0.14922767387635272, 0.19569694554522066, 0.1509880652177722, 0.333642213440167, 0.37066869626518595, 0.37009427709313036, 0.30478148665125004, 0.32222563900601575, 0.3178917508158986, 0.35190900184892837, 0.3502464571479159, 0.35397925629092175, 0.24008042438429944, 0.2572104330683024, 0.2589258597270945, 0.24886699598571504, 0.24627058615749997, 0.24563656208591755, 0.2771023998645338, 0.2741454404862723, 0.2734047555641811, 0.1878441568782585, 0.19621167316341948, 0.1759398784063857, 0.1810705756223423, 0.19305841018638603, 0.2056157214016171, 0.19657999364001266, 0.18249542886124326, 0.20219737357106382, 0.18605931207944393, 0.1827378311128629, 0.18451603512438552, 0.2021173810714375, 0.19264119842443506, 0.18169448395891885, 0.18517196037649208, 0.18755215307220552, 0.1772254104927582, 0.5992741346897884, 0.6064745660401016, 0.19058912769148206, 0.6277771450870715, 0.18138067104101252, 0.5564372646974916, 0.7201621174954111, 0.17956861808497615, 0.6936690106618006, 0.3612206351849826, 0.19990972013214026, 0.19212460994132152, 0.16496710262130365, 0.1924898038281283, 0.1814632694083752, 0.2075738591376528, 0.1974602601929316, 0.2127996564408705, 0.18166217409679164, 0.19636715123712167, 0.1875203214615544, 0.17044851075676126, 0.18372920629264422, 0.1868101152104218, 0.18249467450991275, 0.17781479358600705, 0.18144222500886065, 0.06892495295785006, 0.08197928291975642, 0.0796864365486546, 0.08186030174107162, 0.0752248400947998, 0.07594928076222696, 0.07281383854819268, 0.07916087575954844, 0.0826647532615582]}, "mutation_prompt": null}
{"id": "c56cb207-28fc-4dde-b074-35fc8672f380", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                # Select three distinct individuals randomly for mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                # Mutant vector with random scaling factor\n                mutant = np.clip(a + np.random.uniform(0.4, 0.9) * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                # Evaluate the trial vector\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                # Selection\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive scaling and crossover\n                if eval_count % (self.population_size * 2) == 0:\n                    self.scaling_factor = np.random.uniform(0.4, 0.9)\n                    self.crossover_rate = np.random.uniform(0.8, 1.0)\n\n        # Return the best solution found\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Incorporate random scaling factor update during each mutation to enhance exploration capabilities.", "configspace": "", "generation": 2, "fitness": 0.34834615940158115, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.24.", "error": "", "parent_id": "9e191aa2-5e94-4bae-b76d-74eab2fa5ad4", "metadata": {"aucs": [0.763398190088908, 0.7569794998864314, 0.7483559576636263, 0.7784183113257028, 0.7607789173617543, 0.7682230185928787, 0.7381112286063933, 0.762344007097707, 0.744277791129843, 0.5853610437602896, 0.6089268994626988, 0.604856118803676, 0.5878632662423233, 0.5731221312237982, 0.5526287289164002, 0.5923867155675906, 0.5799093960809824, 0.553083986520077, 0.11806419956059966, 0.1044083002527596, 0.09333585408520084, 0.11029402752352713, 0.12964574312705113, 0.11326871827362628, 0.10402764105891693, 0.10451695160413565, 0.1164483007644892, 0.09669895868762612, 0.11358982106494042, 0.10747776349934468, 0.10364107556540925, 0.09189734382142156, 0.08820490887406118, 0.0997276874421319, 0.0905929199397022, 0.10040989039012516, 0.9350293921049114, 0.9269381553366068, 0.9173813972846677, 0.9506992570617981, 0.9366842341750846, 0.9704407487929132, 0.971975223277603, 0.9735579204902961, 0.8951102274103625, 0.39006621414877496, 0.39214600328927374, 0.40249117350441, 0.39282532185827024, 0.4106613810372094, 0.40998815382805687, 0.4109429550812249, 0.38646190802518754, 0.4191355208504435, 0.6745409937684927, 0.7037951268524086, 0.6788506417230507, 0.705831050594059, 0.6856364205813478, 0.744869778330314, 0.7062278678944476, 0.7149790496623382, 0.7404871715883365, 0.308045598855365, 0.3465733330741627, 0.34836333145977594, 0.3185743237592483, 0.2751312876898995, 0.33682138310906673, 0.29105913092010405, 0.25179065563033076, 0.2886316196596437, 0.3434747979363909, 0.20217029623254146, 0.22273542601066632, 0.2709297149357064, 0.33207606976878135, 0.33712037272421724, 0.4277468925852733, 0.2975511113090985, 0.31246314060296165, 0.3076012257224213, 0.3359587582160021, 0.2550696180298194, 0.29052973208123445, 0.3251096428043261, 0.28239615443943333, 0.3322959322482508, 0.3736826344402996, 0.30170490555398055, 0.4778022905343343, 0.46070802077795225, 0.4819325278355172, 0.4504569478245818, 0.4662219515377819, 0.44981801314149183, 0.44568758021743693, 0.47732741183997607, 0.5145438691134467, 0.13418707612470748, 0.11474921854243858, 0.06923951782102356, 0.11238973091305138, 0.10288304527810432, 0.16791951113793235, 0.15207978446026715, 0.10044688823407055, 0.09763895375418341, 0.24137705769051632, 0.24683693686581942, 0.2652509453959998, 0.2625085509935189, 0.2653276755428736, 0.28087523036014594, 0.2568201274752827, 0.27040131357512076, 0.2729765520254558, 0.6179095722272225, 0.6016287673235013, 0.6444667979369572, 0.6573726687705674, 0.6449643069966964, 0.6153157961278919, 0.6750624584727485, 0.6467798859663829, 0.6684243784543822, 0.09137996743977705, 0.1109678345511187, 0.10293132204491562, 0.10640586259110896, 0.10304130113055965, 0.09800466343947833, 0.09279161218686693, 0.10312232112165698, 0.09469149738470528, 0.1657487807048621, 0.1676928681374379, 0.12360377637866238, 0.17053731184282983, 0.17494429911109544, 0.1973875620368245, 0.15389984984316996, 0.15198682375151695, 0.13853666818829502, 0.36159474457329854, 0.3247335586937995, 0.33862229839653546, 0.3520602877829433, 0.36671972742591674, 0.3659236387024113, 0.3845891061548373, 0.36383300319353107, 0.3562291549556106, 0.2734747188377935, 0.2741925023835775, 0.2559362911149283, 0.25777832874982054, 0.2790431414477561, 0.26370008742644524, 0.29067764514357053, 0.2925312052123986, 0.2823660032718799, 0.21031639519608625, 0.19371431078356482, 0.20729450902055246, 0.18821797627214576, 0.1891098199181077, 0.18531298667828444, 0.18288056085067284, 0.22964663809858943, 0.19244406331118236, 0.18927780050966136, 0.17988358751110223, 0.19608994835909277, 0.18079341200396282, 0.1956726496174127, 0.18797510163782138, 0.1800046756823731, 0.18819918133611346, 0.17977327975344637, 0.1684637067537469, 0.6576032830289343, 0.6153188658757428, 0.6486324936875634, 0.17973351601706478, 0.17899720950001774, 0.18461619071639312, 0.6846410554641207, 0.18254383311894462, 0.6849622537823797, 0.692056176960854, 0.6071357029515043, 0.6968567019767036, 0.19466891757106863, 0.19355567648897098, 0.2085227957476039, 0.20400398262452313, 0.2100003134973284, 0.20996030473949145, 0.2005285388001199, 0.18995746796299795, 0.19797011553639365, 0.19846421624905763, 0.18419339968484105, 0.1966448501781186, 0.1898120156772377, 0.1604565004356322, 0.06856503246743273, 0.07660688286617878, 0.0714129690191323, 0.07909971400416038, 0.08130187655354293, 0.07609149189132547, 0.08282760377688592, 0.08532720845537956, 0.09398385128162068]}, "mutation_prompt": null}
{"id": "edfe8710-793f-4996-9f4b-1fa224e4f269", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]  # Best individual in the population\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                # Select three distinct individuals randomly for mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                # Mutant vector using elite-guided mutation strategy\n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                # Evaluate the trial vector\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                # Selection\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive scaling and crossover\n                if eval_count % (self.population_size * 2) == 0:\n                    self.scaling_factor = np.random.uniform(0.4, 0.9)\n                    self.crossover_rate = np.random.uniform(0.8, 1.0)\n\n        # Return the best solution found\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Introduced elite-guided mutation strategy to improve convergence by utilizing the best individual in the mutation process.", "configspace": "", "generation": 3, "fitness": 0.4200941421133301, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.31.", "error": "", "parent_id": "9e191aa2-5e94-4bae-b76d-74eab2fa5ad4", "metadata": {"aucs": [0.9178925587102934, 0.9355579794576441, 0.920456508927464, 0.885945363927299, 0.9310623895512712, 0.9088440786984011, 0.9182386327206331, 0.9216693055766643, 0.919778493277434, 0.6346812605415708, 0.5362311572782013, 0.8606570461217254, 0.07014490780604432, 0.7797569309565011, 0.5865809830922815, 0.8461439181768948, 0.8188806401172894, 0.8557550661246233, 0.07545875299337201, 0.0729832118360404, 0.126605338398586, 0.07274726451848401, 0.14418554630065605, 0.026916134616336018, 0.12626857407253156, 0.09590617640355181, 0.11567622459290028, 0.10241599049143191, 0.08945384011215951, 0.1412310999264681, 0.07053809121490573, 0.1153133401087354, 0.1023299814742511, 0.0976326180498076, 0.08455678074400985, 0.1287835809411496, 0.9811116015261, 0.9814263777804022, 0.9448109335506566, 0.9723202577194356, 0.9796995628580887, 0.9649790291728101, 0.955520970636841, 0.9824390425877614, 0.9529913613624122, 0.8001930390818017, 0.7830705339113355, 0.771662645390218, 0.7562195019737697, 0.78930465508327, 0.7525893493107007, 0.7512434182229394, 0.17455639461695682, 0.7834758743977297, 0.17083845557191835, 0.24018616248771452, 0.38635911586364036, 0.2824527929940195, 0.2796680907407074, 0.2805914538837988, 0.23068066497835227, 0.2365773650211519, 0.3632382009273526, 0.6800085165962599, 0.13499381770063068, 0.35884896622440143, 0.8056749281180987, 0.1335135838385224, 0.6802508611429849, 0.13513184401063993, 0.5289833012485345, 0.664796107855694, 0.7852314336575494, 0.6098726024210313, 0.7962105423564059, 0.6236533014975021, 0.11428456633071804, 0.7916452326279833, 0.6494662310022004, 0.7329651478926035, 0.6651359699042085, 0.11343745652364723, 0.5431627443432107, 0.7625215947697502, 0.2308115330958289, 0.2542823150505914, 0.681169629205475, 0.7777944059923818, 0.008477512612891203, 0.7211601446614966, 0.759290075239959, 0.5636998349508311, 0.727047747312787, 0.7975119603106064, 0.021161805841991566, 0.17370102649038455, 0.8119697945111025, 0.4470398863592301, 0.8272822755928185, 0.17815332155657948, 0.15647543064227354, 0.3564795275333884, 0.47713441838409476, 0.7402125688070137, 0.319692717773707, 0.43094372082853827, 0.17006207515300253, 0.1737066337081158, 0.46333139161618675, 0.58109042889251, 0.7210425512881606, 0.6742694468456627, 0.5154817101774671, 0.5600375951721592, 0.08423254248141399, 9.999999999998899e-05, 0.08477062367665245, 0.8621684625820981, 0.7982629148382769, 0.8079299025578565, 0.8727233935522376, 0.881658410867288, 0.88596591144078, 0.8767179877414173, 0.8309928948895353, 0.8938539044421554, 0.09203215586015501, 0.049698198667839866, 0.0901773415081556, 0.11370261132381132, 0.05552520559352325, 0.15336126482278778, 0.15714591550078805, 0.09711158258984687, 0.07812412130414048, 0.764980099437167, 0.28184272329735793, 0.3045953107580224, 0.27221777009567105, 0.2711696084741829, 0.17246808660962454, 0.7680942883562607, 0.17383111032483411, 0.34466840097487106, 0.46677644289143505, 0.37410926483982654, 0.23834170586323977, 0.38793817166624, 0.2878398219301562, 0.6064414449244249, 0.25021154854934624, 0.19256509440421832, 0.2309037135382358, 0.3553943049384466, 0.2841336533557366, 0.2859476666206303, 0.27802065378102725, 0.22867344100919929, 0.21465236736940518, 0.2026541719989674, 0.3548801098560742, 0.380956179546602, 0.19981641881545897, 0.20556293647689527, 0.2171966313601218, 0.19955808043668244, 0.14362185378242487, 0.20696298562738946, 0.25460594622500043, 0.22018728884578964, 0.18919965734299227, 0.1797907806330139, 0.22273319210821563, 0.20987589866775502, 0.18324317416170266, 0.1749172507426725, 0.2090867485290845, 0.21057904138255135, 0.22378272601754667, 0.2094261978147932, 0.1884301811061707, 0.1668342206679716, 0.10695111835779203, 0.9475273437686215, 0.17787746383431036, 0.12241466671469137, 0.9416157289308583, 0.14811999868826675, 0.1643754738090003, 0.9399660176305431, 0.21341853774400166, 0.9359597599014476, 0.15600271774406882, 0.7626217157858048, 0.21132293743936337, 0.9303020092774378, 0.16744916966248546, 0.21413116112747899, 0.1900124416444876, 0.22097896106563952, 0.18070872757492706, 0.18592968604643567, 0.1844159056214535, 0.18963402296568976, 0.1864880482400506, 0.18415237001834983, 0.20433596416906008, 0.1156836603689313, 0.13281183628061977, 0.08385588702055358, 0.08391952476475395, 0.08677559102323396, 0.07851383461471984, 0.10510551531062173, 0.09997844262456823, 0.11521588913353875]}, "mutation_prompt": null}
{"id": "188c4196-6b4c-486f-bd85-8f0e20cc37d0", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]  # Best individual in the population\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                # Select three distinct individuals randomly for mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                # Mutant vector using elite-guided mutation strategy\n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                # Evaluate the trial vector\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                # Selection\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive scaling and crossover\n                if eval_count % (self.population_size * 2) == 0:\n                    self.scaling_factor = np.random.uniform(0.4, 0.9)\n                    self.crossover_rate = np.random.uniform(0.8, 1.0)\n            \n            # Dynamic population size adjustment\n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        # Return the best solution found\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Introduced a dynamic population size strategy that adapts the number of individuals based on progress to enhance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": 0.43052737813206116, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.32.", "error": "", "parent_id": "edfe8710-793f-4996-9f4b-1fa224e4f269", "metadata": {"aucs": [0.9249255592396658, 0.9246163905761163, 0.9204236567685931, 0.9202636546804508, 0.9205510097944611, 0.914408260140618, 0.9319275659362559, 0.9119061689622405, 0.922166182655568, 0.8375853068234967, 0.034828485430966394, 0.8602772604479116, 0.7668434759956387, 0.85560314973083, 0.4766818106554749, 0.8491024184318055, 0.8529756496769934, 0.8112662215798031, 0.15972202161101412, 0.11909153490412971, 0.08977537765233723, 0.1149915201696955, 0.13238291267472746, 0.028773003537220343, 0.1879554749074419, 0.09613636070452636, 0.13180596353469065, 0.08696179162061557, 0.15782486281699182, 0.08995628966553759, 0.18261181922698078, 0.1612369889270049, 0.15226756809858122, 0.1406215185758667, 0.09034277132060231, 0.048844531236093225, 0.9811116015261, 0.9814263777804022, 0.9308914030068269, 0.9722684174871078, 0.9796995628580887, 0.9637243957585471, 0.9696003842344535, 0.9824390425877614, 0.9577028708041863, 0.8043971159830757, 0.7569391691946485, 0.7681601284412396, 0.8322261030819063, 0.7949535382793573, 0.8077297528414301, 0.7993940760173535, 0.07964334990258881, 0.7709358547178632, 0.34713800167436926, 0.8885155877245093, 0.170546411412954, 0.2820304349472391, 0.19354140208570814, 0.9091089337449274, 0.23604883812348476, 0.22499888027300208, 0.24570222494926897, 0.5768530187451033, 0.1355148598435837, 0.47870112857294145, 0.6294035879062793, 0.5704484733534524, 0.7374739159070816, 0.46841463223696944, 0.7108085900428963, 0.7079699827491879, 0.7704182825154757, 0.693414230857837, 0.825133020156096, 0.7419507168264063, 0.13506891312060376, 0.7370772315375684, 0.13589522013283406, 0.7637599250756332, 0.13507866654328204, 0.2707035035760641, 0.622871672345424, 0.11675546396150982, 0.059096056422010546, 0.7915893930254172, 0.42958526253626317, 0.4039948268967011, 0.5636200895450226, 0.44528634753998253, 0.33693175209621673, 0.3120428739118243, 0.7905742380226222, 0.3018788092507483, 0.12051185781692708, 0.8298218495841292, 0.8658143313517348, 0.824548680221316, 0.8260367412801815, 0.20190062354331106, 0.182389214861707, 0.38827420864917017, 0.08460247788843245, 0.6593879118170738, 0.27167307871334234, 0.15124516272178934, 0.2582223036673573, 0.15233740043753408, 0.6602716350772708, 0.529125550806429, 0.5009905445609557, 0.7244100446960915, 0.6454281797857144, 0.6946442169057543, 0.6039994359573275, 0.05103368706753941, 0.08471346025895998, 0.8491973436941795, 0.8924913070690996, 0.90386907800309, 0.8878686372467923, 0.8916270331680403, 0.9036870704944109, 0.7451746450948682, 0.8552053837396972, 0.8932063398650232, 0.08320790484592977, 0.07672805323340381, 0.0819486558510556, 0.11567482758985059, 0.06069134097395745, 0.10763336447822935, 0.15972803698008065, 0.1154672675104026, 0.06304317616626354, 0.7443602123427339, 0.33926446269856825, 0.2909331989436327, 0.29508967529443475, 0.28857762510845164, 0.17526709102995774, 0.30971245151497195, 0.17831936148301608, 0.39939489004841255, 0.46784215614764013, 0.4802847261881774, 0.24952009330947067, 0.7857585883491995, 0.5002657682720326, 0.31635974503176156, 0.2516419162296991, 0.20059279821966458, 0.267559054269766, 0.2982592414585814, 0.28255062414095455, 0.2154807156309867, 0.33641766413637275, 0.23409455749783914, 0.1812987245061196, 0.3401766823124446, 0.29542386752385086, 0.42954625619519005, 0.20085509584714123, 0.1971613690665891, 0.20157980867936232, 0.2211120913207436, 0.16112985220483445, 0.2012935315713099, 0.23788790763605394, 0.19641202148593107, 0.19936181581306978, 0.16615242409164166, 0.223384959980518, 0.209922112791309, 0.17341571021089963, 0.19807775897384483, 0.20225417299236415, 0.22768517931163423, 0.2248662424305038, 0.2262446857275935, 0.18826267069311642, 0.16648875469934699, 0.10686363142689748, 0.9550539735384965, 0.17805480341822133, 0.12246076124274607, 0.9547062903527401, 0.14811340201478218, 0.1643802092268174, 0.9385102576465327, 0.21329570051989288, 0.9471771377552981, 0.15606573327536521, 0.8846214165443915, 0.21125786648327172, 0.9408203123851214, 0.16762549793650183, 0.21406199074308163, 0.18379793956465829, 0.20185353703469522, 0.1978426845661897, 0.19717560315243876, 0.18763124999307346, 0.18846322124161874, 0.19174220750254367, 0.2518875232044784, 0.19008845651575113, 0.11143884540949112, 0.10560827130404304, 0.08654672272794761, 0.060236467002970695, 0.08693209137660596, 0.10001430476581807, 0.13223709591778388, 0.09667553915185512, 0.10845747109453929]}, "mutation_prompt": null}
{"id": "385092d4-b615-4d33-b438-4a9dae25c82c", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]  # Best individual in the population\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                # Select three distinct individuals randomly for mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                # Mutant vector using elite-guided mutation strategy\n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                # Evaluate the trial vector\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                # Selection\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive scaling and crossover\n                if eval_count % (self.population_size * 2) == 0:\n                    self.scaling_factor = np.random.uniform(0.4, 0.9)\n                    self.crossover_rate = self._adaptive_crossover_rate()  # Adjusted crossover rate\n            \n            # Dynamic population size adjustment\n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        # Return the best solution found\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def _adaptive_crossover_rate(self):\n        diversity = np.mean(np.std(self.population, axis=0))\n        return np.clip(1.0 - diversity / (self.upper_bound - self.lower_bound), 0.8, 1.0)", "name": "AdaptiveNeighborhoodDE", "description": "Improved exploration by introducing adaptive crossover strategy based on population diversity.", "configspace": "", "generation": 5, "fitness": 0.4284463075008862, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.32.", "error": "", "parent_id": "188c4196-6b4c-486f-bd85-8f0e20cc37d0", "metadata": {"aucs": [0.9357086858044057, 0.9158201359742545, 0.925728717875828, 0.9097014842728539, 0.9202812822273756, 0.9198224661268899, 0.937296736264263, 0.9209659481774942, 0.9285919718706817, 0.8452049268869798, 0.7473316130982761, 0.8449711750275606, 0.8516231569288506, 0.8611605602607537, 0.8158979003508386, 0.766061142445443, 0.8643357556678568, 0.832242881648184, 0.07274512871642258, 0.07636839937524253, 0.09794922727494626, 0.09257177233338021, 0.1087234060445138, 0.0876582870027065, 0.14482103604376062, 0.11670561648801869, 0.15699846844326315, 0.09767815285093295, 0.17493856485568526, 0.09200693859072273, 0.08285956833151065, 0.09674316195766475, 0.12225675491518728, 0.09720297947382239, 0.12167492566282656, 0.07673662244877266, 0.9811090879970229, 0.9763429900058882, 0.9676913223814008, 0.973325719399967, 0.9726394115285631, 0.9683588590565596, 0.9732272181130898, 0.9779811647051655, 0.9715832561728956, 0.8311483787812783, 0.7481055987644862, 0.7924712199992346, 0.7691124304476786, 0.7834968323979634, 0.7693404740223724, 0.8418082569555579, 0.7260265929488259, 0.8060623447518589, 0.22484328733796, 0.9239348098167286, 0.17047670256851943, 0.2815861101411967, 0.2813489434342744, 0.21250663251633561, 0.23320184517743214, 0.9114030552623957, 0.9381999573943639, 0.4847113705240026, 0.1879118329383921, 0.697480899873797, 0.5619714164333774, 0.8292921998174562, 0.1357380646776366, 0.8686807079112093, 0.5938989304131141, 0.5002531142325372, 0.7014186274156679, 0.13562036931435117, 0.6988140946272914, 0.5727294531010818, 0.1348698002604124, 0.7530831753061575, 0.6800643534484803, 0.20167531097967728, 0.7867212190186514, 0.07546711471691692, 0.7874438236194113, 0.06762691357749151, 0.7228057420425671, 0.8008887964302382, 0.05971284295169099, 0.8234896881418327, 0.010069454445171488, 0.07056313524749658, 0.4091983909594269, 0.12891616150198748, 0.7879981267942817, 0.4217762236904339, 0.49427181741386117, 0.16761303500673497, 0.8600701888843761, 0.264079771650062, 0.7932748577033735, 0.1531264463639318, 0.11953705401471704, 0.38847690546299707, 0.08432017307566053, 0.2657241849988612, 0.24082331622798725, 0.10759642929135804, 0.2110696611096159, 0.14904460959142085, 0.5736164663064114, 0.5821102979626139, 0.40789483607588284, 0.5558869488336433, 0.47405175245521847, 0.5275326697814783, 0.08462142241515869, 0.3151994545760911, 0.42063878188113035, 0.8966115737902486, 0.6642831180436382, 0.9163972994737266, 0.8991138168190835, 0.7866886330938145, 0.908245996748656, 0.7282418182612482, 0.9062665355557296, 0.9128806432424361, 0.09896476024254064, 0.06586636860508643, 0.09446285765329798, 0.1384595711096217, 0.10047319721372083, 0.1077946627620433, 0.05019364964007489, 0.11332574378973459, 0.0423346321395931, 0.5598103932309916, 0.24786029993109182, 0.23370130846830273, 0.1789864801959169, 0.4956043771949712, 0.2068623351370784, 0.78740426354869, 0.17791492364809858, 0.2412135459852529, 0.26034615789718873, 0.3875796660098316, 0.5834958236607912, 0.5607415317810603, 0.22758756170582017, 0.4041974728689496, 0.24021789843816632, 0.33162069717915443, 0.44884233016949027, 0.20366390141041846, 0.2933318929582793, 0.24084651779927813, 0.2909753331991093, 0.2042533636556424, 0.23069856061625116, 0.2672068068039475, 0.15851523807636425, 0.21450440860201414, 0.27503361526490167, 0.1949062239325764, 0.21675582595732645, 0.2063452738519279, 0.2301624182505262, 0.15834824934035208, 0.23413304386953881, 0.19723105467388458, 0.25879616487818335, 0.21237110603613096, 0.19254820868026146, 0.20229978413938654, 0.18041017349037813, 0.2092131549894638, 0.21141558352571033, 0.2108938485007218, 0.18897741181005512, 0.2277915966570998, 0.1880653841558989, 0.16992525554764526, 0.18602129960151803, 0.9550098062973654, 0.9123599090937758, 0.12220615940688384, 0.9493567128182964, 0.1479658001696238, 0.16666377478280026, 0.9454893131648252, 0.2129808639175772, 0.9344048443662664, 0.15473158638564566, 0.9225766402077172, 0.21212327425779232, 0.9389197343407457, 0.059024021871668664, 0.2104655635971303, 0.19676541963730476, 0.18235686325595257, 0.17445875865718952, 0.19872952653169818, 0.2041965941841407, 0.1740633919492831, 0.1838816727356245, 0.1741688533643435, 0.1974255589907289, 0.12537944909188103, 0.1531751807990318, 0.0844738225573074, 0.0881782504388029, 0.09210455903732107, 0.0807392664944393, 0.10978727775184838, 0.0922815406791253, 0.12953529455532187]}, "mutation_prompt": null}
{"id": "9fabb89b-e164-4e3f-afa4-7d405869ebeb", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]  # Best individual in the population\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                # Select three distinct individuals randomly for mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                # Mutant vector using elite-guided mutation strategy\n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                # Evaluate the trial vector\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                # Selection\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.crossover_rate = min(1.0, self.crossover_rate + 0.01)\n\n                # Adaptive scaling and crossover\n                if eval_count % (self.population_size * 2) == 0:\n                    self.scaling_factor = np.random.uniform(0.4, 0.9)\n                    self.crossover_rate = np.random.uniform(0.8, 1.0)\n            \n            # Dynamic population size adjustment\n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        # Return the best solution found\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Integrated adaptive mutation and crossover rates that adjust based on performance improvements to further balance exploration and exploitation.", "configspace": "", "generation": 6, "fitness": 0.32978325784212403, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.29.", "error": "", "parent_id": "188c4196-6b4c-486f-bd85-8f0e20cc37d0", "metadata": {"aucs": [0.7255075400953462, 0.9118386026342864, 0.9321135348669563, 0.5062273657164713, 0.8302847730706966, 0.9319741739513756, 0.4977398157940889, 0.9190670741571874, 0.864435409809936, 0.07565925676706553, 0.10931544748661892, 0.4588606146560744, 0.20852753331438378, 0.6602726018190104, 9.999999999998899e-05, 0.35727223711637435, 0.8454627409977664, 0.03925795271370558, 0.0915668131514008, 0.048483780776412244, 0.1128704234826986, 0.051383424453230186, 0.14487204288745248, 0.02791359677703331, 0.11505491323970995, 0.04008727170872861, 0.05431070569869534, 0.09717922985264504, 0.15778322599842853, 0.06872371741448291, 0.057238278790308295, 0.06149149759762518, 0.13745315859778706, 0.02757892900864567, 0.12409586748878809, 0.10331094136725694, 0.9842136026062649, 0.9784395846591317, 0.9413561899585515, 0.946677746840287, 0.9495563492152158, 0.9468669236004402, 0.9331282345323413, 0.9861853984094164, 0.9576416991032867, 0.8071295865016402, 0.7919506842749651, 0.055953845214473, 0.7513419438873359, 0.7278364055789242, 0.8303263397106186, 0.1509750755037832, 0.7832586288378715, 0.8279488947048208, 0.17238806086519365, 0.14072553209834515, 0.17519186042695856, 0.21586428796647805, 0.9488647259635034, 0.16225637081769695, 0.1806033211869863, 0.2377000781376002, 0.1777193412359397, 0.4917545959178672, 0.3606027531668162, 0.3486223095995622, 0.15545460861441462, 0.12397308926588413, 0.08482844463027883, 0.6940408793391024, 0.8660280401410014, 0.2673553974206099, 0.15235927018050155, 0.6959735870507306, 0.633627172839283, 0.32329790138206427, 0.16067451533310873, 0.18559828867166384, 0.36259826430001196, 0.3575914945876417, 0.4692424315369671, 9.999999999998899e-05, 0.20989358753476628, 0.09568344286540065, 0.08107499670554408, 0.12455625228905609, 9.999999999998899e-05, 0.0650985912722577, 0.1792472810413478, 0.09876747999054647, 0.21296424106105805, 0.36539468119039953, 0.32105667325460896, 0.203076403911031, 0.2037838735921752, 0.16757511616231402, 0.8044162737102721, 0.2786696082154335, 0.16024178081579887, 0.16743207296452678, 0.26888513990542784, 0.0645013747652452, 0.3614589829067911, 0.1151663695810603, 0.32358367082026274, 0.33337568764469483, 0.32659276819467575, 0.08538404668668287, 0.2534734631000518, 0.22010997366028817, 0.2742704280890105, 0.32906619130077386, 0.36085893059539853, 0.3306890075979271, 0.21631648208043308, 0.05472835563729006, 0.08566482390102714, 0.8140332352793227, 0.6214008349869711, 0.7935212263470182, 0.47598642965753724, 0.8765733975586187, 0.7835629353009748, 0.7174711806327029, 0.6085445957570454, 0.7455429814938835, 0.07262928003326363, 0.08342859440803951, 0.06547167369708018, 0.07054401336042193, 0.0379087294787398, 0.08606180157109555, 0.053426335298080274, 0.0827632804729066, 0.058838466967030434, 0.20620586947044284, 0.3483084513828515, 0.2054130792207075, 0.16180593020571798, 0.8368413562192432, 0.19908656432910365, 0.23603278642660486, 0.17828428122869178, 0.8810358392590893, 0.2913423165891086, 0.39911288460632477, 0.2767846093918219, 0.2481105454936956, 0.32511904022848426, 0.3402817375659861, 0.2510463721243875, 0.14684144882735384, 0.22025017552424708, 0.36908877163649645, 0.3156700055159176, 0.09879872742608875, 0.3148936688523709, 0.19888687677081085, 0.24057692956143506, 0.2519696788643636, 0.13577639584102452, 0.23790182562676954, 0.2015641857718321, 0.21652239804983386, 0.22338094718998014, 0.263705105354049, 0.20859643266071515, 0.2143703082485262, 0.19237079839228965, 0.18734450015622617, 0.21612679516459798, 0.2287606308481861, 0.21031125222844305, 0.2112647184506682, 0.2280331946795443, 0.18402378668115105, 0.1898190736075911, 0.22768683541671364, 0.2110603278807912, 0.21259356316943845, 0.9036011041548689, 0.08186223229954681, 0.8488543570108986, 0.14887563636911583, 0.1788164490451325, 0.12306526206587076, 0.9370449938631525, 0.10712584598297503, 0.1664584753699666, 0.7723852101967741, 0.2128465448471839, 0.9302203272691449, 0.15624562174996914, 0.05953034468944329, 0.044017720895072276, 0.5050577063892974, 0.11292792446451672, 0.8572166238082733, 0.17638275750643262, 0.21937622120565625, 0.17226798593386916, 0.19831005115536326, 0.18805614654345992, 0.2018055743565874, 0.18862700295607204, 0.18399667734381242, 0.2303431190359222, 0.10978431365412633, 0.1194158214419212, 0.0870502656973633, 0.10899063631032258, 0.07738469097851552, 0.10038256956897074, 0.10956465469720511, 0.0865310274814256, 0.10375548100228804]}, "mutation_prompt": null}
{"id": "49660ae4-ceb0-435a-ab4f-7a511bd03d13", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate += 0.05  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Introduced learning-based parameter adaptation to improve convergence by dynamically adjusting mutation and crossover rates based on recent successes.", "configspace": "", "generation": 7, "fitness": 0.4312090356567013, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.28.", "error": "", "parent_id": "188c4196-6b4c-486f-bd85-8f0e20cc37d0", "metadata": {"aucs": [0.7992502262315352, 0.7970564562334613, 0.7926536258298407, 0.5374092896172993, 0.803320023115788, 0.7864618175029086, 0.799858121165146, 0.8016654162590868, 0.8022242152284671, 0.664536604167254, 0.6597562946665952, 0.7038340914505832, 0.6618855856209009, 0.6742692397612424, 0.695528305663802, 0.6497662871819531, 0.6420482795218396, 0.6805083013756057, 0.1411847411260635, 0.13177192206854038, 0.14799612534552176, 0.08173787396105614, 0.11051891551850335, 0.02710065779461379, 0.0910064606906692, 0.06629294065761604, 0.10437341810029188, 0.11914652278439464, 0.09267065197553437, 0.08893606976212576, 0.08104529416582495, 0.10104287589037309, 0.02730848612967185, 0.10549700471518786, 0.09530626644947149, 0.0849117761810434, 0.9862936706855833, 0.981696835014886, 0.9600936838081515, 0.9833099205636935, 0.9804892680325642, 0.9729782501569356, 0.9810867360023743, 0.9817140456793843, 0.97119911271261, 0.605735657637736, 0.5919085827087068, 0.6790891965616209, 0.6282492109485753, 0.623079797013377, 0.623234236822078, 0.5425504097842851, 0.08660001370741122, 0.6277926342990128, 0.7985869595591352, 0.809770871213159, 0.7991124477453593, 0.8322986492590879, 0.8411393287663802, 0.8618392074146803, 0.8001582892607406, 0.829474974987433, 0.8303212733398568, 0.12771877700311218, 0.6238383020329359, 0.6629696889945615, 0.6217504966865566, 0.619295610572677, 0.7115171756462688, 0.6904143449340197, 0.6654902583948643, 0.6607296709993087, 0.5819048935831997, 0.638210613989914, 0.634771509541362, 0.6192587780425676, 0.6594820103133345, 0.6153308811489533, 0.12934883118888318, 0.6608831907359081, 0.13253277874605118, 0.6430677595527877, 0.677705816731435, 0.6991696625747352, 0.6612955919626977, 0.65880998869635, 0.6459038574398719, 0.6550696373147873, 0.010031096940886663, 0.627305251827946, 0.7254886158163228, 0.091491774465018, 0.7077237106122458, 0.7265444683846417, 0.6287848112425407, 0.5650199630678079, 0.7792492270857458, 0.7247610064166763, 0.7522424439384351, 0.4396065934384227, 0.5360041059260724, 0.3323695955480098, 0.5123136823520157, 0.4721852303181372, 0.4926958878880934, 0.06717326882826324, 0.38001865609167396, 0.2345351596033104, 0.5004587493567034, 0.5179451038318453, 0.5172698259189201, 0.47362950448955676, 0.4605882822735935, 0.487862312632371, 0.47397401545062645, 0.5232865855312001, 0.47382185829620116, 0.7662117306876172, 0.7551684592196423, 0.411351645461839, 0.7903979088166024, 0.8043567543461864, 0.7969144740969404, 0.8157657238844849, 0.7946275744495157, 0.7785970967758682, 0.09368040273179068, 0.10504650560430584, 0.0981154554175322, 0.13424644757068893, 0.0946622257359413, 0.0710063870422577, 0.10518289656007329, 0.1037403824598736, 0.08888107950666813, 0.22518547208240303, 0.2515310539845983, 0.7030946316951301, 0.3126850957926357, 0.2853037910813546, 0.27293802524309696, 0.4083518086716893, 0.22576303721257596, 0.15229613950161947, 0.3845398385515698, 0.4735230796540153, 0.4847053579359413, 0.33136412311529717, 0.4023655434718081, 0.36745562371463447, 0.3349935891214434, 0.35596984747341065, 0.47109096166639874, 0.2595060259704116, 0.24844338190407034, 0.3573331592023513, 0.29258288874146277, 0.3211042624260797, 0.3541929400967023, 0.3901290701187653, 0.41318375888681447, 0.40287097542746475, 0.20885696763883854, 0.21210852433454885, 0.19938760475093031, 0.18440659780537294, 0.16215253416720243, 0.18309925216781664, 0.182530394292162, 0.17968128301379815, 0.1799940196629759, 0.2442422936951526, 0.19817461587329543, 0.2427142492044243, 0.2039072926023684, 0.17942062307592765, 0.19607227668334837, 0.1816746584616521, 0.17625904501875778, 0.22185212307802937, 0.1875296210987104, 0.1463987270346463, 0.163309367219181, 0.16769099646775554, 0.17787955644802644, 0.19554731229414102, 0.8847831589622138, 0.14779467439495508, 0.16373516147413214, 0.8958952940037996, 0.21239295091246446, 0.20660133094385902, 0.20984842103012247, 0.22523845160763523, 0.20983183516835324, 0.8911040927302195, 0.16712753544894798, 0.1954211077964062, 0.15759655951942952, 0.18235686325595257, 0.17598251327225956, 0.17754232406693282, 0.16733559616000493, 0.17637222596235147, 0.17397851895960614, 0.17651526408942209, 0.17378714744432378, 0.12005826605667191, 0.08204059172713918, 0.06534907547335533, 0.07612433006043462, 0.0789833780995095, 0.0736841232422939, 0.0924137133481503, 0.06573708062081574, 0.05963918482003594]}, "mutation_prompt": null}
{"id": "275e6dfc-257a-4452-9da3-1d2d989517c1", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate += 0.05  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.45 + 0.5 * self.success_rate, 0.4, 0.9)  # Slightly increased increment\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Improved convergence by introducing a slight increase in scaling factor adaptation increment.", "configspace": "", "generation": 8, "fitness": 0.4312090356567013, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.28.", "error": "", "parent_id": "49660ae4-ceb0-435a-ab4f-7a511bd03d13", "metadata": {"aucs": [0.7992502262315352, 0.7970564562334613, 0.7926536258298407, 0.5374092896172993, 0.803320023115788, 0.7864618175029086, 0.799858121165146, 0.8016654162590868, 0.8022242152284671, 0.664536604167254, 0.6597562946665952, 0.7038340914505832, 0.6618855856209009, 0.6742692397612424, 0.695528305663802, 0.6497662871819531, 0.6420482795218396, 0.6805083013756057, 0.1411847411260635, 0.13177192206854038, 0.14799612534552176, 0.08173787396105614, 0.11051891551850335, 0.02710065779461379, 0.0910064606906692, 0.06629294065761604, 0.10437341810029188, 0.11914652278439464, 0.09267065197553437, 0.08893606976212576, 0.08104529416582495, 0.10104287589037309, 0.02730848612967185, 0.10549700471518786, 0.09530626644947149, 0.0849117761810434, 0.9862936706855833, 0.981696835014886, 0.9600936838081515, 0.9833099205636935, 0.9804892680325642, 0.9729782501569356, 0.9810867360023743, 0.9817140456793843, 0.97119911271261, 0.605735657637736, 0.5919085827087068, 0.6790891965616209, 0.6282492109485753, 0.623079797013377, 0.623234236822078, 0.5425504097842851, 0.08660001370741122, 0.6277926342990128, 0.7985869595591352, 0.809770871213159, 0.7991124477453593, 0.8322986492590879, 0.8411393287663802, 0.8618392074146803, 0.8001582892607406, 0.829474974987433, 0.8303212733398568, 0.12771877700311218, 0.6238383020329359, 0.6629696889945615, 0.6217504966865566, 0.619295610572677, 0.7115171756462688, 0.6904143449340197, 0.6654902583948643, 0.6607296709993087, 0.5819048935831997, 0.638210613989914, 0.634771509541362, 0.6192587780425676, 0.6594820103133345, 0.6153308811489533, 0.12934883118888318, 0.6608831907359081, 0.13253277874605118, 0.6430677595527877, 0.677705816731435, 0.6991696625747352, 0.6612955919626977, 0.65880998869635, 0.6459038574398719, 0.6550696373147873, 0.010031096940886663, 0.627305251827946, 0.7254886158163228, 0.091491774465018, 0.7077237106122458, 0.7265444683846417, 0.6287848112425407, 0.5650199630678079, 0.7792492270857458, 0.7247610064166763, 0.7522424439384351, 0.4396065934384227, 0.5360041059260724, 0.3323695955480098, 0.5123136823520157, 0.4721852303181372, 0.4926958878880934, 0.06717326882826324, 0.38001865609167396, 0.2345351596033104, 0.5004587493567034, 0.5179451038318453, 0.5172698259189201, 0.47362950448955676, 0.4605882822735935, 0.487862312632371, 0.47397401545062645, 0.5232865855312001, 0.47382185829620116, 0.7662117306876172, 0.7551684592196423, 0.411351645461839, 0.7903979088166024, 0.8043567543461864, 0.7969144740969404, 0.8157657238844849, 0.7946275744495157, 0.7785970967758682, 0.09368040273179068, 0.10504650560430584, 0.0981154554175322, 0.13424644757068893, 0.0946622257359413, 0.0710063870422577, 0.10518289656007329, 0.1037403824598736, 0.08888107950666813, 0.22518547208240303, 0.2515310539845983, 0.7030946316951301, 0.3126850957926357, 0.2853037910813546, 0.27293802524309696, 0.4083518086716893, 0.22576303721257596, 0.15229613950161947, 0.3845398385515698, 0.4735230796540153, 0.4847053579359413, 0.33136412311529717, 0.4023655434718081, 0.36745562371463447, 0.3349935891214434, 0.35596984747341065, 0.47109096166639874, 0.2595060259704116, 0.24844338190407034, 0.3573331592023513, 0.29258288874146277, 0.3211042624260797, 0.3541929400967023, 0.3901290701187653, 0.41318375888681447, 0.40287097542746475, 0.20885696763883854, 0.21210852433454885, 0.19938760475093031, 0.18440659780537294, 0.16215253416720243, 0.18309925216781664, 0.182530394292162, 0.17968128301379815, 0.1799940196629759, 0.2442422936951526, 0.19817461587329543, 0.2427142492044243, 0.2039072926023684, 0.17942062307592765, 0.19607227668334837, 0.1816746584616521, 0.17625904501875778, 0.22185212307802937, 0.1875296210987104, 0.1463987270346463, 0.163309367219181, 0.16769099646775554, 0.17787955644802644, 0.19554731229414102, 0.8847831589622138, 0.14779467439495508, 0.16373516147413214, 0.8958952940037996, 0.21239295091246446, 0.20660133094385902, 0.20984842103012247, 0.22523845160763523, 0.20983183516835324, 0.8911040927302195, 0.16712753544894798, 0.1954211077964062, 0.15759655951942952, 0.18235686325595257, 0.17598251327225956, 0.17754232406693282, 0.16733559616000493, 0.17637222596235147, 0.17397851895960614, 0.17651526408942209, 0.17378714744432378, 0.12005826605667191, 0.08204059172713918, 0.06534907547335533, 0.07612433006043462, 0.0789833780995095, 0.0736841232422939, 0.0924137133481503, 0.06573708062081574, 0.05963918482003594]}, "mutation_prompt": null}
{"id": "7bf2b4b3-32eb-42b4-bb18-7b53ebad48c2", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate += 0.02  # Adjusted success rate increment\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Enhanced success rate adjustment to improve adaptive convergence by fine-tuning the increment step.", "configspace": "", "generation": 9, "fitness": 0.4312090356567013, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.28.", "error": "", "parent_id": "49660ae4-ceb0-435a-ab4f-7a511bd03d13", "metadata": {"aucs": [0.7992502262315352, 0.7970564562334613, 0.7926536258298407, 0.5374092896172993, 0.803320023115788, 0.7864618175029086, 0.799858121165146, 0.8016654162590868, 0.8022242152284671, 0.664536604167254, 0.6597562946665952, 0.7038340914505832, 0.6618855856209009, 0.6742692397612424, 0.695528305663802, 0.6497662871819531, 0.6420482795218396, 0.6805083013756057, 0.1411847411260635, 0.13177192206854038, 0.14799612534552176, 0.08173787396105614, 0.11051891551850335, 0.02710065779461379, 0.0910064606906692, 0.06629294065761604, 0.10437341810029188, 0.11914652278439464, 0.09267065197553437, 0.08893606976212576, 0.08104529416582495, 0.10104287589037309, 0.02730848612967185, 0.10549700471518786, 0.09530626644947149, 0.0849117761810434, 0.9862936706855833, 0.981696835014886, 0.9600936838081515, 0.9833099205636935, 0.9804892680325642, 0.9729782501569356, 0.9810867360023743, 0.9817140456793843, 0.97119911271261, 0.605735657637736, 0.5919085827087068, 0.6790891965616209, 0.6282492109485753, 0.623079797013377, 0.623234236822078, 0.5425504097842851, 0.08660001370741122, 0.6277926342990128, 0.7985869595591352, 0.809770871213159, 0.7991124477453593, 0.8322986492590879, 0.8411393287663802, 0.8618392074146803, 0.8001582892607406, 0.829474974987433, 0.8303212733398568, 0.12771877700311218, 0.6238383020329359, 0.6629696889945615, 0.6217504966865566, 0.619295610572677, 0.7115171756462688, 0.6904143449340197, 0.6654902583948643, 0.6607296709993087, 0.5819048935831997, 0.638210613989914, 0.634771509541362, 0.6192587780425676, 0.6594820103133345, 0.6153308811489533, 0.12934883118888318, 0.6608831907359081, 0.13253277874605118, 0.6430677595527877, 0.677705816731435, 0.6991696625747352, 0.6612955919626977, 0.65880998869635, 0.6459038574398719, 0.6550696373147873, 0.010031096940886663, 0.627305251827946, 0.7254886158163228, 0.091491774465018, 0.7077237106122458, 0.7265444683846417, 0.6287848112425407, 0.5650199630678079, 0.7792492270857458, 0.7247610064166763, 0.7522424439384351, 0.4396065934384227, 0.5360041059260724, 0.3323695955480098, 0.5123136823520157, 0.4721852303181372, 0.4926958878880934, 0.06717326882826324, 0.38001865609167396, 0.2345351596033104, 0.5004587493567034, 0.5179451038318453, 0.5172698259189201, 0.47362950448955676, 0.4605882822735935, 0.487862312632371, 0.47397401545062645, 0.5232865855312001, 0.47382185829620116, 0.7662117306876172, 0.7551684592196423, 0.411351645461839, 0.7903979088166024, 0.8043567543461864, 0.7969144740969404, 0.8157657238844849, 0.7946275744495157, 0.7785970967758682, 0.09368040273179068, 0.10504650560430584, 0.0981154554175322, 0.13424644757068893, 0.0946622257359413, 0.0710063870422577, 0.10518289656007329, 0.1037403824598736, 0.08888107950666813, 0.22518547208240303, 0.2515310539845983, 0.7030946316951301, 0.3126850957926357, 0.2853037910813546, 0.27293802524309696, 0.4083518086716893, 0.22576303721257596, 0.15229613950161947, 0.3845398385515698, 0.4735230796540153, 0.4847053579359413, 0.33136412311529717, 0.4023655434718081, 0.36745562371463447, 0.3349935891214434, 0.35596984747341065, 0.47109096166639874, 0.2595060259704116, 0.24844338190407034, 0.3573331592023513, 0.29258288874146277, 0.3211042624260797, 0.3541929400967023, 0.3901290701187653, 0.41318375888681447, 0.40287097542746475, 0.20885696763883854, 0.21210852433454885, 0.19938760475093031, 0.18440659780537294, 0.16215253416720243, 0.18309925216781664, 0.182530394292162, 0.17968128301379815, 0.1799940196629759, 0.2442422936951526, 0.19817461587329543, 0.2427142492044243, 0.2039072926023684, 0.17942062307592765, 0.19607227668334837, 0.1816746584616521, 0.17625904501875778, 0.22185212307802937, 0.1875296210987104, 0.1463987270346463, 0.163309367219181, 0.16769099646775554, 0.17787955644802644, 0.19554731229414102, 0.8847831589622138, 0.14779467439495508, 0.16373516147413214, 0.8958952940037996, 0.21239295091246446, 0.20660133094385902, 0.20984842103012247, 0.22523845160763523, 0.20983183516835324, 0.8911040927302195, 0.16712753544894798, 0.1954211077964062, 0.15759655951942952, 0.18235686325595257, 0.17598251327225956, 0.17754232406693282, 0.16733559616000493, 0.17637222596235147, 0.17397851895960614, 0.17651526408942209, 0.17378714744432378, 0.12005826605667191, 0.08204059172713918, 0.06534907547335533, 0.07612433006043462, 0.0789833780995095, 0.0736841232422939, 0.0924137133481503, 0.06573708062081574, 0.05963918482003594]}, "mutation_prompt": null}
{"id": "fce0e553-93ff-4279-8220-2a439835a556", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c, d = self.population[np.random.choice(idxs, 4, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b + c - d), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate += 0.05  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Enhanced mutation strategy by utilizing an additional differential vector to increase exploration capabilities.", "configspace": "", "generation": 10, "fitness": 0.19821301807138347, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "49660ae4-ceb0-435a-ab4f-7a511bd03d13", "metadata": {"aucs": [0.31789191575494913, 0.33318924336155564, 0.34857006278155345, 0.40069525765972624, 0.39791055560251176, 0.4496216784207041, 0.42136663790974294, 0.3888305200917219, 0.40743326172712624, 0.1841108856554552, 0.17142813257521416, 0.1914265103086208, 0.1721438630756038, 0.18106964729099617, 0.15615671798024633, 0.16768532642230205, 0.21121983440931624, 0.16249526503689227, 0.07239198508963363, 0.07568652643963547, 0.07810706448684812, 0.07044544621519377, 0.060558666857343124, 0.08556380518140627, 0.06469260352018757, 0.06849977358229153, 0.06034605820279393, 0.05226336680222232, 0.05953513084237061, 0.05207474218711139, 0.0707108236016959, 0.058638548234606014, 0.061627090052503664, 0.045045048674713706, 0.05992991756614896, 0.05854748785372499, 0.9892560535159223, 0.9667678687515686, 0.9772857682773981, 0.9842179936099172, 0.9869929732081151, 0.9833238658338959, 0.9795279366957631, 0.9869207636349242, 0.9897432170511375, 0.16043159667167417, 0.1665924892585885, 0.18496910158751423, 0.1752089721788418, 0.17654280189309812, 0.19276445070918202, 0.1835952536625478, 0.19995212948457808, 0.1873646718041827, 0.23191573491372441, 0.2654196026243957, 0.23597990001219338, 0.43222876901155705, 0.30370966283413414, 0.27776435625894313, 0.2677328917764856, 0.3312414233296097, 0.3624901162771461, 0.08063796151942115, 0.10250257051551748, 0.10522937446411174, 0.09027499273802897, 0.09432411464530888, 0.10337211244012856, 0.09612131504326604, 0.12335201060913514, 0.08143787730379848, 0.010002774922942659, 0.009612761211142407, 0.02109703555714737, 0.07109067519797663, 0.08261650719221547, 0.09742799559734372, 0.11001052366432396, 0.11531080136774452, 0.07929730785064826, 0.10845152882622044, 0.11106128661154036, 0.07830042199995602, 0.10845018935181239, 0.09856328519818891, 0.07948568154972013, 0.09146055852502799, 0.0643764579476217, 0.0710101021958115, 0.1968306424756846, 0.22141909102748236, 0.2167753997002071, 0.15735084035732816, 0.19536167568083052, 0.22862640869697082, 0.23948486239790445, 0.21821952430444558, 0.2316347650350874, 9.999999999998899e-05, 0.01177496364252184, 0.008842712003576114, 0.000553533732017053, 0.03943213601598616, 0.006904919202709081, 0.00350864884534674, 0.0035831924777507407, 0.0026688672909375155, 0.09712649296974274, 0.09869693022452597, 0.09164263633791103, 0.10183956113676285, 0.10827574426791431, 0.11137149513606415, 0.11206774115580231, 0.12123453933714334, 0.1260518428736408, 0.34075199437054593, 0.33748991527524574, 0.3180544541508189, 0.35259925161591, 0.3554928146691987, 0.4056178828236372, 0.349188107541316, 0.33769343001998364, 0.35113609249398947, 0.07108482610357081, 0.0688718991850148, 0.07221001569487273, 0.05856313869361862, 0.06558396689017787, 0.07392343357965236, 0.06411055028751855, 0.0865237579586583, 0.0581575188092327, 0.2081104480815491, 0.13105963468292536, 0.1344491493689044, 0.15609929042410642, 0.143793915389947, 0.16368447616121318, 0.2385966629143269, 0.15761562085120862, 0.21305960451923867, 0.206891178914696, 0.2443766445952681, 0.22660703878376165, 0.19269080597866384, 0.21466286404026858, 0.21067961342995445, 0.22794593065783642, 0.21659285905969838, 0.23221438301871922, 0.16199595881604523, 0.1488673261941278, 0.1607521845304578, 0.13953469740821423, 0.1537599938988271, 0.15057811768925822, 0.16957368304504872, 0.15688986114217407, 0.14883018319254893, 0.17061271144857637, 0.15685189301722768, 0.17412820406687934, 0.1733516479988717, 0.18601109968949414, 0.15903575827330518, 0.17200779928308352, 0.15826581523764616, 0.17007745251023554, 0.16541170322643395, 0.15968478626215254, 0.1661308133496301, 0.16882691682071238, 0.16542819692003397, 0.16670473784649908, 0.16074700570067357, 0.15291869129105107, 0.1546797454105675, 0.5119080281076307, 0.19368427522073883, 0.18981363887138936, 0.27420287834488377, 0.18591030389914065, 0.16278172897040022, 0.27206192789702177, 0.3904366579437749, 0.2689093719372013, 0.2221365552407606, 0.15995357859693127, 0.12383260394436313, 0.24560936988483217, 0.15658241586697164, 0.16528424824214982, 0.5290381160397437, 0.12443918073401472, 0.20960512873430037, 0.18125276665675694, 0.18631020672329712, 0.18373753036198526, 0.17705797956373426, 0.17776795909820287, 0.19614593953056392, 0.1833746009539079, 0.18174610607306618, 0.17420974785245802, 0.06178661782356454, 0.0579185746121762, 0.04659542706046593, 0.06256734964068167, 0.05524043360468045, 0.0515773135219455, 0.055505177627753643, 0.054958252793833706, 0.04812259944437536]}, "mutation_prompt": null}
{"id": "3cc9c20c-3cec-44a8-a1c2-dfa6772faea9", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate += 0.05  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n            \n            # Introduce diversity with a dynamic scaling factor\n            self.scaling_factor = 0.5 + 0.3 * np.sin(np.pi * eval_count / self.budget)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Enhancing diversity by introducing a dynamic scaling factor based on iteration count.", "configspace": "", "generation": 11, "fitness": 0.347411849213872, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.28.", "error": "", "parent_id": "49660ae4-ceb0-435a-ab4f-7a511bd03d13", "metadata": {"aucs": [0.7188827228835013, 0.8317398607097406, 0.6683484101790658, 0.4693022339981777, 0.9362822118782853, 0.6716675144498336, 0.8895395100185969, 0.9229559017594653, 0.9280545613184521, 0.2101599796784952, 0.05066511525589901, 0.2700148416901951, 0.5726740082996612, 0.5749527386626128, 0.03330147492716384, 0.6151228953401491, 0.5537553929211834, 0.4348018671484951, 0.08974816982577616, 0.07350317687498265, 0.11233454430289747, 0.034523873684676576, 0.10808068850567032, 0.02632809613499576, 0.10166072835402007, 0.050035280268578175, 0.11606377980217131, 0.11592614340856178, 0.0962927494103969, 0.05659612686274684, 0.06321280547305397, 0.10158822906072018, 0.02253531374248563, 0.09575095123582256, 0.029618803463224097, 0.029272992593625036, 0.9756293850713312, 0.9739867109768425, 0.8498925911907173, 0.9618889137204596, 0.9513258719553455, 0.9461832277653489, 0.9490255754500896, 0.9652247441663014, 0.946495849167542, 0.8350121806157491, 0.5876218727879101, 0.7200618613687764, 0.6998762952961511, 0.7764161922037802, 0.634867321236998, 0.7977878688675372, 0.04576569619045845, 0.541137267035978, 0.14478965543496158, 0.08408412994571812, 0.11711945484932662, 0.2815306687182002, 0.15643115024912424, 0.21344338110569516, 0.2358414300170677, 0.2476479013767816, 0.37043442704816876, 0.05409090380328707, 0.41669724331227864, 0.2715466058722841, 0.5955027398320909, 0.519915109572862, 0.13471155478271268, 0.559562791714791, 0.4387777044145945, 0.6436607539685593, 0.36036408667647846, 0.4918267527527933, 0.627987817187927, 0.4170118538725224, 0.13477185268125302, 0.5471983465948667, 0.5840348583310848, 0.8980420791267754, 0.1367839742308301, 0.04704893341694538, 9.999999999998899e-05, 0.6345178922596172, 0.45964348497553065, 0.031863873558801936, 0.3849000679427753, 0.4717372750530541, 0.2604058300265467, 9.999999999998899e-05, 0.5665224731624119, 0.3386565543378067, 0.033485974745247615, 0.8715872130744015, 0.3320805292958736, 0.11442620646804935, 0.5628801585489875, 0.4694503114204479, 0.6507735763523756, 0.6218041027880192, 0.3567006825694413, 0.5819037674609293, 0.08384662512776064, 0.5775451551804197, 0.7821791182484059, 0.13139346703377508, 0.5181845821987231, 0.1904196142780925, 0.4038599147404063, 0.2876979894770286, 0.789301384747313, 0.5024411438161336, 0.3084891327760515, 0.2171103660114776, 0.4582234172672096, 0.05337835648375133, 0.08516754216699318, 0.75879628940466, 0.6618152757582931, 0.7893510895790337, 0.20709352000530634, 0.7415985933501037, 0.9196306867025766, 0.9245408095622715, 0.8359061169774604, 0.6573889398977384, 0.09278167179451446, 0.049782991913632, 0.06244733165697758, 0.07629842745455262, 0.054090609372982046, 0.07318906409444081, 0.048384622846813, 0.06682172264393904, 0.0656911274021813, 0.30473418239868655, 0.3533112177761505, 0.305458642699204, 0.27731683299483256, 0.23692177325798214, 0.17213001962195162, 0.41744292429129437, 0.17717948509847792, 0.21360652634463217, 0.3948380294615593, 0.3258482164061137, 0.1681363219983143, 0.23008705139756225, 0.2654337018349936, 0.18608456421893727, 0.23056255445394414, 0.1967986776629458, 0.25379545190607367, 0.4327519657013106, 0.2513348156600733, 0.08351952287666353, 0.268392618162841, 0.24202515697150906, 0.15119464479127132, 0.5025363532718101, 0.17304594442021348, 0.22105089727600802, 0.20096785464231814, 0.22917960258463776, 0.24239972590166603, 0.22432801550087622, 0.1894244766698906, 0.18204146550813716, 0.18715977357082825, 0.17350269961769227, 0.2059350039139105, 0.1722316278750734, 0.18606589127431028, 0.1942038632418166, 0.17893996911530174, 0.18177942409085313, 0.20017121405141236, 0.1739628902726228, 0.1695868063515582, 0.2574023024488169, 0.18877987180586142, 0.16392330808890765, 0.10708214999298993, 0.11517484965303881, 0.17878756963242814, 0.1145246922041171, 0.9522093546387475, 0.14850349312601518, 0.16651600405434452, 0.8916007952317694, 0.21353023972738716, 0.9621439359568632, 0.15705502739149668, 0.2271883456774253, 0.1991301035269918, 0.9440746993230902, 0.058981628607051584, 0.20785755372591597, 0.21209200981710608, 0.2121397144167002, 0.18991373999261973, 0.2229590357143556, 0.1842437289066855, 0.20126017665538998, 0.18008570487456232, 0.17962948657706912, 0.18496611616983494, 0.10652187721665451, 0.09268609824823248, 0.08238213258024008, 0.0907897951694675, 0.1255071959784262, 0.06717984300278879, 0.11757408017383897, 0.10989248312693323, 0.11651393553191625]}, "mutation_prompt": null}
{"id": "cf9626d6-971e-48e4-bac0-306843bb72cd", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate += 0.05  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.3 + 0.5 * self.success_rate, 0.4, 0.9)  # Changed line\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Enhanced exploration by adjusting the scaling factor adaptation to encourage diversity.", "configspace": "", "generation": 12, "fitness": 0.4312090356567013, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.28.", "error": "", "parent_id": "49660ae4-ceb0-435a-ab4f-7a511bd03d13", "metadata": {"aucs": [0.7992502262315352, 0.7970564562334613, 0.7926536258298407, 0.5374092896172993, 0.803320023115788, 0.7864618175029086, 0.799858121165146, 0.8016654162590868, 0.8022242152284671, 0.664536604167254, 0.6597562946665952, 0.7038340914505832, 0.6618855856209009, 0.6742692397612424, 0.695528305663802, 0.6497662871819531, 0.6420482795218396, 0.6805083013756057, 0.1411847411260635, 0.13177192206854038, 0.14799612534552176, 0.08173787396105614, 0.11051891551850335, 0.02710065779461379, 0.0910064606906692, 0.06629294065761604, 0.10437341810029188, 0.11914652278439464, 0.09267065197553437, 0.08893606976212576, 0.08104529416582495, 0.10104287589037309, 0.02730848612967185, 0.10549700471518786, 0.09530626644947149, 0.0849117761810434, 0.9862936706855833, 0.981696835014886, 0.9600936838081515, 0.9833099205636935, 0.9804892680325642, 0.9729782501569356, 0.9810867360023743, 0.9817140456793843, 0.97119911271261, 0.605735657637736, 0.5919085827087068, 0.6790891965616209, 0.6282492109485753, 0.623079797013377, 0.623234236822078, 0.5425504097842851, 0.08660001370741122, 0.6277926342990128, 0.7985869595591352, 0.809770871213159, 0.7991124477453593, 0.8322986492590879, 0.8411393287663802, 0.8618392074146803, 0.8001582892607406, 0.829474974987433, 0.8303212733398568, 0.12771877700311218, 0.6238383020329359, 0.6629696889945615, 0.6217504966865566, 0.619295610572677, 0.7115171756462688, 0.6904143449340197, 0.6654902583948643, 0.6607296709993087, 0.5819048935831997, 0.638210613989914, 0.634771509541362, 0.6192587780425676, 0.6594820103133345, 0.6153308811489533, 0.12934883118888318, 0.6608831907359081, 0.13253277874605118, 0.6430677595527877, 0.677705816731435, 0.6991696625747352, 0.6612955919626977, 0.65880998869635, 0.6459038574398719, 0.6550696373147873, 0.010031096940886663, 0.627305251827946, 0.7254886158163228, 0.091491774465018, 0.7077237106122458, 0.7265444683846417, 0.6287848112425407, 0.5650199630678079, 0.7792492270857458, 0.7247610064166763, 0.7522424439384351, 0.4396065934384227, 0.5360041059260724, 0.3323695955480098, 0.5123136823520157, 0.4721852303181372, 0.4926958878880934, 0.06717326882826324, 0.38001865609167396, 0.2345351596033104, 0.5004587493567034, 0.5179451038318453, 0.5172698259189201, 0.47362950448955676, 0.4605882822735935, 0.487862312632371, 0.47397401545062645, 0.5232865855312001, 0.47382185829620116, 0.7662117306876172, 0.7551684592196423, 0.411351645461839, 0.7903979088166024, 0.8043567543461864, 0.7969144740969404, 0.8157657238844849, 0.7946275744495157, 0.7785970967758682, 0.09368040273179068, 0.10504650560430584, 0.0981154554175322, 0.13424644757068893, 0.0946622257359413, 0.0710063870422577, 0.10518289656007329, 0.1037403824598736, 0.08888107950666813, 0.22518547208240303, 0.2515310539845983, 0.7030946316951301, 0.3126850957926357, 0.2853037910813546, 0.27293802524309696, 0.4083518086716893, 0.22576303721257596, 0.15229613950161947, 0.3845398385515698, 0.4735230796540153, 0.4847053579359413, 0.33136412311529717, 0.4023655434718081, 0.36745562371463447, 0.3349935891214434, 0.35596984747341065, 0.47109096166639874, 0.2595060259704116, 0.24844338190407034, 0.3573331592023513, 0.29258288874146277, 0.3211042624260797, 0.3541929400967023, 0.3901290701187653, 0.41318375888681447, 0.40287097542746475, 0.20885696763883854, 0.21210852433454885, 0.19938760475093031, 0.18440659780537294, 0.16215253416720243, 0.18309925216781664, 0.182530394292162, 0.17968128301379815, 0.1799940196629759, 0.2442422936951526, 0.19817461587329543, 0.2427142492044243, 0.2039072926023684, 0.17942062307592765, 0.19607227668334837, 0.1816746584616521, 0.17625904501875778, 0.22185212307802937, 0.1875296210987104, 0.1463987270346463, 0.163309367219181, 0.16769099646775554, 0.17787955644802644, 0.19554731229414102, 0.8847831589622138, 0.14779467439495508, 0.16373516147413214, 0.8958952940037996, 0.21239295091246446, 0.20660133094385902, 0.20984842103012247, 0.22523845160763523, 0.20983183516835324, 0.8911040927302195, 0.16712753544894798, 0.1954211077964062, 0.15759655951942952, 0.18235686325595257, 0.17598251327225956, 0.17754232406693282, 0.16733559616000493, 0.17637222596235147, 0.17397851895960614, 0.17651526408942209, 0.17378714744432378, 0.12005826605667191, 0.08204059172713918, 0.06534907547335533, 0.07612433006043462, 0.0789833780995095, 0.0736841232422939, 0.0924137133481503, 0.06573708062081574, 0.05963918482003594]}, "mutation_prompt": null}
{"id": "fc74f84f-138c-4b98-a747-45998a300983", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            best_fitness = self.fitness[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate += 0.05  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(\n                        0.4 + 0.5 * self.success_rate * (best_fitness - np.min(self.fitness)) / abs(best_fitness), 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Introduced adaptive scaling factor adjustment based on global improvement to enhance solution quality.", "configspace": "", "generation": 13, "fitness": 0.18461758973285858, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.16.", "error": "", "parent_id": "49660ae4-ceb0-435a-ab4f-7a511bd03d13", "metadata": {"aucs": [0.20186151831750343, 0.25455524565164656, 0.19221511085476317, 0.08272167070450775, 0.3153133275057306, 0.1620072644726842, 0.30514614973137755, 0.23884475994539145, 0.404683695710485, 9.999999999998899e-05, 0.04785896903056219, 0.12188397225818626, 0.1414317134544264, 0.208398235231821, 9.999999999998899e-05, 0.018581741179416134, 0.03383507006702835, 9.999999999998899e-05, 0.08428052854655921, 0.08892483159484799, 0.0784491968043578, 0.07972696778952393, 0.10912715358101521, 0.023141411352754604, 0.10505149757214871, 0.055061196994173556, 0.08497842234130315, 0.11300786036991017, 0.06639823137246748, 0.05866595203150571, 0.06319964880606899, 0.09928287901041499, 0.019414536004272342, 0.07637781402236266, 0.05142046918659038, 0.06381471088806034, 0.9862936706855833, 0.981696835014886, 0.9600936838081515, 0.15441017990772288, 0.13255701271281828, 0.051295217565436535, 0.9763132538070775, 0.9783642229070719, 0.9649099625840607, 0.23196332684537824, 0.2661880766718816, 0.4306011571372662, 0.1594280242689079, 0.19802953022106218, 0.19579723940028737, 0.21156681511595332, 0.08254860327810454, 0.35938062314871544, 0.13168837491952345, 0.20750059160629686, 0.17058744325668795, 0.2222210007160531, 0.1678012008544707, 0.34784138603882364, 0.2227430154256801, 0.34597148094185015, 0.23862847520167285, 9.999999999998899e-05, 0.14430823826641803, 9.999999999998899e-05, 0.0636826341477541, 0.03186666033051411, 9.999999999998899e-05, 0.15749850614069438, 0.13446674732053632, 0.1299343253042231, 0.0849554223018737, 0.10256041245540692, 0.1374553721677303, 0.12952796395947042, 0.304375112231289, 0.13781034500662404, 0.12919032057262136, 0.38040439229789824, 0.12866004959706823, 0.13612319554856045, 0.07248851983537918, 0.07311179107726751, 0.06840259093413148, 9.999999999998899e-05, 9.999999999998899e-05, 0.10204139396890044, 0.0178025940343689, 9.999999999998899e-05, 0.15102331784233558, 0.04296212855834236, 0.019155670557274407, 0.26707249412462464, 0.01450605078241718, 0.10656437256040974, 0.24622946360123155, 0.061972566519551964, 0.26671327625932373, 0.21385292638789333, 0.13757991848733309, 0.2248660846538274, 0.10133776120894111, 0.13699982827543644, 0.13407620800234055, 0.07704728038762643, 0.17835065749234058, 0.1068679127306843, 0.10596071737638779, 0.10521573954071606, 0.2183004225321853, 0.14807335259340093, 0.10073626980362949, 0.10870765981387598, 0.14692533578137446, 0.0766917975726148, 0.10552575577433965, 0.2968079060572232, 0.4251880107039435, 0.2778596340823952, 0.14945294269759524, 0.1773769666086903, 0.38907831871536414, 0.32758111338292717, 0.2925282712328905, 0.2660313054885183, 0.07452864210103616, 0.02979661256427335, 0.07188906581794541, 0.05021869867076034, 0.04364326139664776, 0.09148333972181677, 0.07217373296731255, 0.0817786498612244, 0.08007366199971622, 0.1715141350440068, 0.24189771852996522, 0.13862627532050187, 0.20137582294972667, 0.2426765233003807, 0.17272316356924233, 0.18116982549347194, 0.1737822676079286, 0.21701139461037866, 0.3851644246216518, 0.31752089495913605, 0.15633806611384538, 0.21489994070757823, 0.17558469329789406, 0.21255203983692628, 0.20597282130468608, 0.19189236475697946, 0.17561535939707862, 0.21253606260364033, 0.19525662350678064, 0.2062935386499889, 0.1299289054276136, 0.17371517538355952, 0.1871538249563639, 0.1654934851993316, 0.17541835529713024, 0.19488890702247386, 0.24448333821631052, 0.2080824821945796, 0.23691389941107477, 0.23568877015961043, 0.15796180083849054, 0.1909283383445315, 0.23732730146691938, 0.16924077542583005, 0.19741445739496433, 0.18666615837540212, 0.17297428759782962, 0.1896687914902372, 0.17287373389169225, 0.18037729816405268, 0.19423932558108792, 0.17424371360384827, 0.1841895915757492, 0.2202481257390041, 0.18875805409283541, 0.1563069204505253, 0.10339664311138508, 0.4647891556192638, 0.16742324588348179, 0.14669811275075084, 0.40886398304851257, 0.14362402339225078, 0.16443685586364132, 0.3914518447350107, 0.20593158161416236, 0.3287013436692692, 0.15699531160298685, 0.2269018640690046, 0.16148842897363958, 0.4213227827756072, 0.1677226262277598, 0.21374612505797086, 0.21668914097781555, 0.19429368526003832, 0.21166518131561884, 0.24799428916372224, 0.17459705693831862, 0.249013535640908, 0.24765298645816536, 0.2147682729279008, 0.20092355843860676, 0.10523310531830699, 0.12949623636912, 0.08970057542424714, 0.07502137124904562, 0.06178296731065569, 0.05726937019000866, 0.08393145723681006, 0.09665745814472193, 0.13717158484114733]}, "mutation_prompt": null}
{"id": "ea59d9bc-b4ba-45dd-8162-03afb9d67374", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate += 0.05  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n                # Introduce random exploration\n                self.population = np.vstack((self.population, np.random.uniform(self.lower_bound, self.upper_bound, (5, self.dim))))\n                self.fitness = np.append(self.fitness, [np.inf]*5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Enhanced diversification by introducing random exploration during population size reduction.", "configspace": "", "generation": 14, "fitness": 0.42794787324789285, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.29.", "error": "", "parent_id": "49660ae4-ceb0-435a-ab4f-7a511bd03d13", "metadata": {"aucs": [0.794308287357202, 0.8150450550509314, 0.7943589798588806, 0.8059335073702747, 0.79994776847505, 0.8220093095595382, 0.8153938547706365, 0.7846470990724821, 0.8335119248710456, 0.6233456148543942, 0.5905835382604833, 0.629058678212647, 0.6501501446915315, 0.7097951568612841, 0.6476830359983409, 0.6841020249698897, 0.6772254213761553, 0.66341975121881, 0.13854807773774447, 0.14992007537110474, 0.1461591201463116, 0.06908337012163834, 0.11803349627426307, 0.027060062065482282, 0.10013993113396025, 0.10011052349025973, 0.10522868775449712, 0.1359411387806575, 0.12360297655509644, 0.08271746584044182, 0.09663141349891013, 0.13937616643750061, 0.02560702108579338, 0.08299231143400154, 0.10107816202014219, 0.1264893053461028, 0.9862936706855833, 0.981696835014886, 0.9567786765935474, 0.9833099205636935, 0.9804892680325642, 0.9758816892721532, 0.9810867360023743, 0.9817140456793843, 0.9692991484090502, 0.609941352629195, 0.600734824897544, 0.4800684645348301, 0.5989740355886035, 0.7021842089292709, 0.25036563008568513, 0.4965027225831722, 0.08215948771242287, 0.37988699068083576, 0.7688184628513994, 0.7975517445301759, 0.824626664341594, 0.8484061089727261, 0.8154429812090978, 0.8367387779964164, 0.8390523640573805, 0.8253301894904482, 0.7925086678847291, 0.6633708236855775, 0.6499299889037571, 0.6328727673993323, 0.6831323044227923, 0.6320103278574167, 0.6148983767514142, 0.6683144071937501, 0.12941806707545767, 0.661203977628359, 0.6891028327158464, 0.5791944715555561, 0.5938689566858628, 0.13295546659450608, 0.6399362075701958, 0.4353813501086635, 0.7286409474518659, 0.5583088608971285, 0.7396788668454882, 0.6128857194778963, 0.07174769489497301, 0.6113932285775538, 0.6164646431946019, 0.6529340032938037, 0.6447066042269993, 0.6686279071133079, 0.6695926688056053, 0.6612699268588007, 0.7226838603074677, 0.6572972634009997, 0.6998012286631532, 0.7103670124639754, 0.6838891393606983, 0.7384566030852655, 0.7587861341117269, 0.7205205278853573, 0.7414431414080346, 0.5378031430774802, 0.5253617505247538, 0.29888537425485107, 0.07304190211772676, 0.49354371775871186, 0.22473333625092773, 0.20243615994585673, 0.3102139018788772, 0.3234991709405408, 0.4667856401133478, 0.011574128594249111, 0.4024959492887712, 0.5136826369827353, 0.5230261898344377, 0.5057661042642465, 0.4738653001323757, 0.05699362636028871, 0.4884674145578086, 0.7684301573250817, 0.7530625466666571, 0.8099635898312365, 0.7885858348235616, 0.7706031369957675, 0.7830239202046193, 0.7658194700985665, 0.8043372552096841, 0.771212950057955, 0.12627333467161994, 0.1206656567213582, 0.10141131919743673, 0.06613076514269234, 0.11106771355410838, 0.13429130648744048, 0.11850394260317154, 0.1457484782785321, 0.099661672157628, 0.728287159503086, 0.2744251274548186, 0.10832916960164696, 0.11183001951416682, 0.27668741934423835, 0.1787601433235637, 0.4310640966024686, 0.6913359652944833, 0.1543058697569586, 0.44816001128400895, 0.32521426898343053, 0.29444511773334325, 0.3020399441902356, 0.4043767158395827, 0.3959753278043645, 0.439069219940713, 0.4551280045819984, 0.23860300878163754, 0.363245357154488, 0.3631344019539864, 0.41738899809425256, 0.27781196695707755, 0.3897078912171619, 0.14037257825776728, 0.4087588019184244, 0.294864532078322, 0.25238343143762076, 0.18337030146173727, 0.18814198291074757, 0.20823911693275554, 0.17346477187464293, 0.17821603556143617, 0.16259795128584442, 0.1616288021544493, 0.1777924180756485, 0.1658207200551849, 0.20860755834392264, 0.22018212045602004, 0.22036279431165617, 0.22068874756460222, 0.18463884230151795, 0.1783421898906803, 0.18816762992245017, 0.17600460461084144, 0.19023730204399603, 0.18750468222951366, 0.16588740355366172, 0.16496596767983251, 0.1682067776283307, 0.1772697374607718, 0.19590258792619075, 0.48125025588268644, 0.14752282757075574, 0.16391532914320273, 0.8855208671844829, 0.21189478149130858, 0.8630968113529192, 0.20923852062391535, 0.22508083811040303, 0.20805616275415773, 0.9039821274438601, 0.16701523467389712, 0.19533928522146116, 0.177790216961771, 0.18235686325595257, 0.15771936950784915, 0.18867142033309037, 0.18062032329732736, 0.17538889050094875, 0.18612167531756807, 0.19444412211067597, 0.1940781630219871, 0.06974623876389063, 0.0733098125120134, 0.0665115934227073, 0.06500644056675065, 0.0665575573410806, 0.0761848766076102, 0.07466204549433919, 0.0756580365748647, 0.05691740713056459]}, "mutation_prompt": null}
{"id": "1911ea0f-db70-4b48-b5be-4cda086e91a8", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate += 0.03  # Increment success rate (changed line)\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Fine-tuned success rate increment to balance exploration and exploitation better.", "configspace": "", "generation": 15, "fitness": 0.4312090356567013, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.28.", "error": "", "parent_id": "49660ae4-ceb0-435a-ab4f-7a511bd03d13", "metadata": {"aucs": [0.7992502262315352, 0.7970564562334613, 0.7926536258298407, 0.5374092896172993, 0.803320023115788, 0.7864618175029086, 0.799858121165146, 0.8016654162590868, 0.8022242152284671, 0.664536604167254, 0.6597562946665952, 0.7038340914505832, 0.6618855856209009, 0.6742692397612424, 0.695528305663802, 0.6497662871819531, 0.6420482795218396, 0.6805083013756057, 0.1411847411260635, 0.13177192206854038, 0.14799612534552176, 0.08173787396105614, 0.11051891551850335, 0.02710065779461379, 0.0910064606906692, 0.06629294065761604, 0.10437341810029188, 0.11914652278439464, 0.09267065197553437, 0.08893606976212576, 0.08104529416582495, 0.10104287589037309, 0.02730848612967185, 0.10549700471518786, 0.09530626644947149, 0.0849117761810434, 0.9862936706855833, 0.981696835014886, 0.9600936838081515, 0.9833099205636935, 0.9804892680325642, 0.9729782501569356, 0.9810867360023743, 0.9817140456793843, 0.97119911271261, 0.605735657637736, 0.5919085827087068, 0.6790891965616209, 0.6282492109485753, 0.623079797013377, 0.623234236822078, 0.5425504097842851, 0.08660001370741122, 0.6277926342990128, 0.7985869595591352, 0.809770871213159, 0.7991124477453593, 0.8322986492590879, 0.8411393287663802, 0.8618392074146803, 0.8001582892607406, 0.829474974987433, 0.8303212733398568, 0.12771877700311218, 0.6238383020329359, 0.6629696889945615, 0.6217504966865566, 0.619295610572677, 0.7115171756462688, 0.6904143449340197, 0.6654902583948643, 0.6607296709993087, 0.5819048935831997, 0.638210613989914, 0.634771509541362, 0.6192587780425676, 0.6594820103133345, 0.6153308811489533, 0.12934883118888318, 0.6608831907359081, 0.13253277874605118, 0.6430677595527877, 0.677705816731435, 0.6991696625747352, 0.6612955919626977, 0.65880998869635, 0.6459038574398719, 0.6550696373147873, 0.010031096940886663, 0.627305251827946, 0.7254886158163228, 0.091491774465018, 0.7077237106122458, 0.7265444683846417, 0.6287848112425407, 0.5650199630678079, 0.7792492270857458, 0.7247610064166763, 0.7522424439384351, 0.4396065934384227, 0.5360041059260724, 0.3323695955480098, 0.5123136823520157, 0.4721852303181372, 0.4926958878880934, 0.06717326882826324, 0.38001865609167396, 0.2345351596033104, 0.5004587493567034, 0.5179451038318453, 0.5172698259189201, 0.47362950448955676, 0.4605882822735935, 0.487862312632371, 0.47397401545062645, 0.5232865855312001, 0.47382185829620116, 0.7662117306876172, 0.7551684592196423, 0.411351645461839, 0.7903979088166024, 0.8043567543461864, 0.7969144740969404, 0.8157657238844849, 0.7946275744495157, 0.7785970967758682, 0.09368040273179068, 0.10504650560430584, 0.0981154554175322, 0.13424644757068893, 0.0946622257359413, 0.0710063870422577, 0.10518289656007329, 0.1037403824598736, 0.08888107950666813, 0.22518547208240303, 0.2515310539845983, 0.7030946316951301, 0.3126850957926357, 0.2853037910813546, 0.27293802524309696, 0.4083518086716893, 0.22576303721257596, 0.15229613950161947, 0.3845398385515698, 0.4735230796540153, 0.4847053579359413, 0.33136412311529717, 0.4023655434718081, 0.36745562371463447, 0.3349935891214434, 0.35596984747341065, 0.47109096166639874, 0.2595060259704116, 0.24844338190407034, 0.3573331592023513, 0.29258288874146277, 0.3211042624260797, 0.3541929400967023, 0.3901290701187653, 0.41318375888681447, 0.40287097542746475, 0.20885696763883854, 0.21210852433454885, 0.19938760475093031, 0.18440659780537294, 0.16215253416720243, 0.18309925216781664, 0.182530394292162, 0.17968128301379815, 0.1799940196629759, 0.2442422936951526, 0.19817461587329543, 0.2427142492044243, 0.2039072926023684, 0.17942062307592765, 0.19607227668334837, 0.1816746584616521, 0.17625904501875778, 0.22185212307802937, 0.1875296210987104, 0.1463987270346463, 0.163309367219181, 0.16769099646775554, 0.17787955644802644, 0.19554731229414102, 0.8847831589622138, 0.14779467439495508, 0.16373516147413214, 0.8958952940037996, 0.21239295091246446, 0.20660133094385902, 0.20984842103012247, 0.22523845160763523, 0.20983183516835324, 0.8911040927302195, 0.16712753544894798, 0.1954211077964062, 0.15759655951942952, 0.18235686325595257, 0.17598251327225956, 0.17754232406693282, 0.16733559616000493, 0.17637222596235147, 0.17397851895960614, 0.17651526408942209, 0.17378714744432378, 0.12005826605667191, 0.08204059172713918, 0.06534907547335533, 0.07612433006043462, 0.0789833780995095, 0.0736841232422939, 0.0924137133481503, 0.06573708062081574, 0.05963918482003594]}, "mutation_prompt": null}
{"id": "23c97388-5ce8-4c4f-9dcb-6db4e0b95efa", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                # Change: Used a weighted sum for the mutant vector\n                mutant = np.clip(0.5 * (best_individual + a) + self.scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate += 0.05  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Enhanced mutation strategy by using a weighted sum of the best and randomly selected individuals.", "configspace": "", "generation": 16, "fitness": 0.42582960300788036, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.26.", "error": "", "parent_id": "49660ae4-ceb0-435a-ab4f-7a511bd03d13", "metadata": {"aucs": [0.7655071325916706, 0.7723347380556198, 0.73839849377346, 0.7697294668311203, 0.7955152297131558, 0.7594319215270178, 0.7595742540379125, 0.7570863126867418, 0.7495992686758294, 0.5767362909594825, 0.5846650191521615, 0.5905413303720153, 0.5967714791207896, 0.5890202323285723, 0.586356550770709, 0.5873701403150569, 0.5537499632078201, 0.590954895850182, 0.10105067200784612, 0.09242806603145759, 0.09396568999239929, 0.10232971752078301, 0.116440860203195, 0.09568664513351799, 0.08424027102151976, 0.08940889616352121, 0.07753165457784361, 0.08728532868042838, 0.09277165749360972, 0.08984434434653998, 0.08932480436840706, 0.07853695254621906, 0.08541502444327775, 0.08215070962561333, 0.10122921667556584, 0.08028031927458501, 0.9635120199945737, 0.9814044022301349, 0.9351866937916646, 0.9151586490221377, 0.9237344343789259, 0.9811223206143903, 0.9551863414674415, 0.9324334311922978, 0.9519473275924756, 0.5331416159227346, 0.4872156772877314, 0.5049349803484112, 0.5316321789042984, 0.4706706359653572, 0.4855125529394754, 0.5168907175280962, 0.49461161523223873, 0.5148230193552006, 0.7665477963720024, 0.7154704055914971, 0.7201002041023175, 0.7897152314134559, 0.7919278235621778, 0.8029333766462687, 0.7708222895982948, 0.7661110172073269, 0.7737502851719799, 0.5091232001270117, 0.6058873651223575, 0.6083652881797256, 0.5518489221505183, 0.5784306573055431, 0.5674127407963747, 0.5026028523214578, 0.5110343942439963, 0.5286836979974712, 0.5530926667875851, 0.5209412466058, 0.5058625627761302, 0.48595422017197465, 0.5613325661357607, 0.5291871797599955, 0.5568035746763451, 0.5972886622059264, 0.5549610030541334, 0.5652001108597982, 0.5476707843694278, 0.5443998055510902, 0.5812002997569667, 0.5420191273081921, 0.5230382506009825, 0.5079104688642291, 0.5290973223910107, 0.577473769269859, 0.6734235346683205, 0.6522161804020461, 0.6466399892354409, 0.6715173080730092, 0.6595556212528361, 0.6642595156778184, 0.648675937554869, 0.6667269478737267, 0.6783722263409078, 0.19252958003710796, 0.24778165480430814, 0.19048067744014574, 0.38292568136033556, 0.2643097897144918, 0.2437382942113021, 0.27226399822715186, 0.24567054717288617, 0.3249161572054705, 0.39865004454016184, 0.3897671092366608, 0.37356900159561635, 0.38769727111506624, 0.3811258523747101, 0.37382206061203604, 0.40799183483244383, 0.371314079977371, 0.39082080298164834, 0.7147597932797266, 0.7332733086115282, 0.7461018430202614, 0.7263371524245057, 0.740535387748003, 0.7260462917103745, 0.7136911804117855, 0.713976406538962, 0.7136675416812958, 0.09752773007630644, 0.08809223765530172, 0.10000139339284342, 0.07715377180930194, 0.0970006368218932, 0.099742836980512, 0.09067606727098643, 0.0789467920289888, 0.10349488033025078, 0.17168339777454023, 0.15387061072563757, 0.24553910985361527, 0.15109489787398456, 0.13208441664041715, 0.18624070105768364, 0.19591377292348666, 0.2510952809300805, 0.1595267737294418, 0.35163259950211445, 0.36451909341650746, 0.3671288298479065, 0.39195319411771545, 0.3739261819558074, 0.368095931552471, 0.38021651218164965, 0.38750893637331696, 0.39925570419461576, 0.3144377154352892, 0.31898733407947766, 0.2963358565540444, 0.33334240451966435, 0.3323957314466949, 0.3494721600282874, 0.3275787561436946, 0.33175831728063065, 0.2992824936034646, 0.17829892213270881, 0.2101654429043568, 0.1874311714744189, 0.2017362855541852, 0.19906310036477604, 0.20516232063357442, 0.21524644105947066, 0.19809707209075278, 0.18223800808416313, 0.19849736324946787, 0.17910332937554252, 0.18993976973241855, 0.17892279984980397, 0.37695211238579496, 0.22034833312783098, 0.2060280609547993, 0.19335294034923722, 0.17944913928883943, 0.7847470071604488, 0.1713460319165857, 0.8113729736988373, 0.7768948228492552, 0.8113234326511806, 0.7579234546935891, 0.7795333765803141, 0.7696392152013579, 0.7638259902942943, 0.8178483167595867, 0.20459949977936753, 0.7467697640716502, 0.7672711950453106, 0.20611320616647455, 0.6157820972851052, 0.16438936005498783, 0.15103380257206866, 0.21226044735161753, 0.18619122896844242, 0.17533873988106607, 0.1905667675203091, 0.1932563673562271, 0.20191094776389895, 0.1918510450194616, 0.175471527857456, 0.19959456318277158, 0.18112140642210084, 0.07605592114578053, 0.08898850700648031, 0.07540472798132503, 0.08685642909297198, 0.06575906479098415, 0.06820588624586799, 0.07207257078679774, 0.07655176113133655, 0.07804318385354059]}, "mutation_prompt": null}
{"id": "ee87e35f-f4ad-445a-b4a1-4227d1a65f73", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate += 0.05  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 2 * self.dim:  # Changed from 5 * self.dim to 2 * self.dim\n                self.population_size = max(2 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Enhanced convergence by dynamically adjusting the population size reduction strategy based on dimensionality.", "configspace": "", "generation": 17, "fitness": 0.4312090356567013, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.28.", "error": "", "parent_id": "49660ae4-ceb0-435a-ab4f-7a511bd03d13", "metadata": {"aucs": [0.7992502262315352, 0.7970564562334613, 0.7926536258298407, 0.5374092896172993, 0.803320023115788, 0.7864618175029086, 0.799858121165146, 0.8016654162590868, 0.8022242152284671, 0.664536604167254, 0.6597562946665952, 0.7038340914505832, 0.6618855856209009, 0.6742692397612424, 0.695528305663802, 0.6497662871819531, 0.6420482795218396, 0.6805083013756057, 0.1411847411260635, 0.13177192206854038, 0.14799612534552176, 0.08173787396105614, 0.11051891551850335, 0.02710065779461379, 0.0910064606906692, 0.06629294065761604, 0.10437341810029188, 0.11914652278439464, 0.09267065197553437, 0.08893606976212576, 0.08104529416582495, 0.10104287589037309, 0.02730848612967185, 0.10549700471518786, 0.09530626644947149, 0.0849117761810434, 0.9862936706855833, 0.981696835014886, 0.9600936838081515, 0.9833099205636935, 0.9804892680325642, 0.9729782501569356, 0.9810867360023743, 0.9817140456793843, 0.97119911271261, 0.605735657637736, 0.5919085827087068, 0.6790891965616209, 0.6282492109485753, 0.623079797013377, 0.623234236822078, 0.5425504097842851, 0.08660001370741122, 0.6277926342990128, 0.7985869595591352, 0.809770871213159, 0.7991124477453593, 0.8322986492590879, 0.8411393287663802, 0.8618392074146803, 0.8001582892607406, 0.829474974987433, 0.8303212733398568, 0.12771877700311218, 0.6238383020329359, 0.6629696889945615, 0.6217504966865566, 0.619295610572677, 0.7115171756462688, 0.6904143449340197, 0.6654902583948643, 0.6607296709993087, 0.5819048935831997, 0.638210613989914, 0.634771509541362, 0.6192587780425676, 0.6594820103133345, 0.6153308811489533, 0.12934883118888318, 0.6608831907359081, 0.13253277874605118, 0.6430677595527877, 0.677705816731435, 0.6991696625747352, 0.6612955919626977, 0.65880998869635, 0.6459038574398719, 0.6550696373147873, 0.010031096940886663, 0.627305251827946, 0.7254886158163228, 0.091491774465018, 0.7077237106122458, 0.7265444683846417, 0.6287848112425407, 0.5650199630678079, 0.7792492270857458, 0.7247610064166763, 0.7522424439384351, 0.4396065934384227, 0.5360041059260724, 0.3323695955480098, 0.5123136823520157, 0.4721852303181372, 0.4926958878880934, 0.06717326882826324, 0.38001865609167396, 0.2345351596033104, 0.5004587493567034, 0.5179451038318453, 0.5172698259189201, 0.47362950448955676, 0.4605882822735935, 0.487862312632371, 0.47397401545062645, 0.5232865855312001, 0.47382185829620116, 0.7662117306876172, 0.7551684592196423, 0.411351645461839, 0.7903979088166024, 0.8043567543461864, 0.7969144740969404, 0.8157657238844849, 0.7946275744495157, 0.7785970967758682, 0.09368040273179068, 0.10504650560430584, 0.0981154554175322, 0.13424644757068893, 0.0946622257359413, 0.0710063870422577, 0.10518289656007329, 0.1037403824598736, 0.08888107950666813, 0.22518547208240303, 0.2515310539845983, 0.7030946316951301, 0.3126850957926357, 0.2853037910813546, 0.27293802524309696, 0.4083518086716893, 0.22576303721257596, 0.15229613950161947, 0.3845398385515698, 0.4735230796540153, 0.4847053579359413, 0.33136412311529717, 0.4023655434718081, 0.36745562371463447, 0.3349935891214434, 0.35596984747341065, 0.47109096166639874, 0.2595060259704116, 0.24844338190407034, 0.3573331592023513, 0.29258288874146277, 0.3211042624260797, 0.3541929400967023, 0.3901290701187653, 0.41318375888681447, 0.40287097542746475, 0.20885696763883854, 0.21210852433454885, 0.19938760475093031, 0.18440659780537294, 0.16215253416720243, 0.18309925216781664, 0.182530394292162, 0.17968128301379815, 0.1799940196629759, 0.2442422936951526, 0.19817461587329543, 0.2427142492044243, 0.2039072926023684, 0.17942062307592765, 0.19607227668334837, 0.1816746584616521, 0.17625904501875778, 0.22185212307802937, 0.1875296210987104, 0.1463987270346463, 0.163309367219181, 0.16769099646775554, 0.17787955644802644, 0.19554731229414102, 0.8847831589622138, 0.14779467439495508, 0.16373516147413214, 0.8958952940037996, 0.21239295091246446, 0.20660133094385902, 0.20984842103012247, 0.22523845160763523, 0.20983183516835324, 0.8911040927302195, 0.16712753544894798, 0.1954211077964062, 0.15759655951942952, 0.18235686325595257, 0.17598251327225956, 0.17754232406693282, 0.16733559616000493, 0.17637222596235147, 0.17397851895960614, 0.17651526408942209, 0.17378714744432378, 0.12005826605667191, 0.08204059172713918, 0.06534907547335533, 0.07612433006043462, 0.0789833780995095, 0.0736841232422939, 0.0924137133481503, 0.06573708062081574, 0.05963918482003594]}, "mutation_prompt": null}
{"id": "fd342393-605c-4f15-9e07-14d7517a610e", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate += 0.05  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate / self.dim, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Introduced adaptive step size scaling based on dimension to enhance exploration in higher dimensions.", "configspace": "", "generation": 18, "fitness": 0.42585034464121035, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.29.", "error": "", "parent_id": "49660ae4-ceb0-435a-ab4f-7a511bd03d13", "metadata": {"aucs": [0.8416759493368018, 0.7970564562251945, 0.8004697034066263, 0.5374092896172993, 0.803320023115788, 0.7971552165606866, 0.8020008853582546, 0.817860387329366, 0.8022242152284671, 0.688594872354003, 0.6269387958582061, 0.6128043250034136, 0.6558995625989907, 0.5619025369361248, 0.029180395037008422, 0.655057892900234, 0.018172038555674952, 0.3804535563145711, 0.10487176250733388, 0.09166849191079052, 0.12637287847567602, 0.10090220979873488, 0.10117374038700522, 0.02193948791424971, 0.0910064606906692, 0.06629294065761604, 0.12350832884424123, 0.07477283991979689, 0.0947580545648532, 0.08030800437979291, 0.11824505808047547, 0.10103805328681137, 0.026566509595251198, 0.10219780446491256, 0.10310037730719268, 0.09952402611412181, 0.9862936706855833, 0.981696835014886, 0.9558235182511357, 0.9833022243007717, 0.9805283459586202, 0.9729794523781089, 0.9810867360023743, 0.9817140456793843, 0.97119911271261, 0.6532548957517754, 0.5759072022343394, 0.6790891965616209, 0.5207053622209599, 0.5370708371109194, 0.6102442090745338, 0.542550409751877, 0.08660001370741122, 0.6164364810801195, 0.38142089180394856, 0.834828523756266, 0.2603117584653102, 0.8558459318138506, 0.8204168897697546, 0.8360458172302914, 0.8218076417733108, 0.8697119725525062, 0.7416147482118521, 0.6419113398348766, 0.6238383031500132, 0.6692136786527161, 0.6333146385877413, 0.10355988469171984, 0.7115171756500427, 0.13000333442845768, 0.6654902580431383, 0.7224525715278232, 0.6768172653698299, 0.6512671611266123, 0.6179789171548493, 0.5784309968287482, 0.6594820103133345, 0.6468215862058202, 0.6912424246646782, 0.6608831907359081, 0.6847947669535643, 0.6540611759888427, 0.6376939144252541, 0.6690653540626228, 0.5991930915688785, 0.6247993532562782, 0.5766729822047456, 0.6562257685612679, 0.5383322090771987, 0.6701260081628342, 0.7214790933280233, 0.7215862725859322, 0.7325939014743451, 0.7111618252542753, 0.7106705629696244, 0.7333394582480275, 0.781925790595104, 0.7243722433001183, 0.7522424439384351, 0.04289094980308694, 0.5527905295890712, 0.46028309860270167, 0.07275023066191166, 0.5528077066003507, 0.5837401536566209, 0.06702745336114135, 0.38001865609167396, 0.21011950524051748, 0.5229519172402736, 0.5180130700055787, 0.507852118467864, 0.47362950448955676, 0.4605882822735935, 0.5146634079092155, 0.47397401545062645, 0.5232060752479311, 0.2725427804631394, 0.7551487399693506, 0.7551685113217609, 0.765877682902844, 0.8092182797536138, 0.7626255889986986, 0.8032809054212663, 0.6804398719626458, 0.773787736105861, 0.6213255342475744, 0.11277909176090983, 0.12992927562533463, 0.09617866529951569, 0.1353018755053106, 0.09468320809934161, 0.09677300304689629, 0.1003056871060437, 0.11122654431418721, 0.11500533246907851, 0.19358652392593567, 0.6695815552570746, 0.22902598584929557, 0.1481576717879789, 0.2826528015674371, 0.6225166789285261, 0.17740492592138513, 0.17498203486965835, 0.2378903090524329, 0.36485336895536447, 0.38834794952336815, 0.17379278717962132, 0.423078836152494, 0.3646959028610599, 0.29938570682816723, 0.2986642573200625, 0.21560627932814957, 0.3160584555284559, 0.217324330402052, 0.2647556520637875, 0.26873404183324046, 0.1836761459812356, 0.32110426230183653, 0.18335164245550728, 0.25252572251727845, 0.3932803362057623, 0.46140734229542824, 0.17249519586205975, 0.19640376440373675, 0.19547170395033076, 0.2096450819931297, 0.16524605124294955, 0.20272757204178182, 0.19566021531321154, 0.17618946558557114, 0.17840997388675783, 0.17676166203606813, 0.17841942579094883, 0.19165065168030027, 0.20212017255495884, 0.24327294153343404, 0.188439222607249, 0.20837514387388034, 0.1965323852575711, 0.19701568111786638, 0.18758342188036659, 0.1702443833285553, 0.1854431491945855, 0.8514664603577728, 0.17811535786686383, 0.08942431384154625, 0.8582961263952895, 0.1476519557759881, 0.16384492146567498, 0.8838990018980861, 0.2120261079066469, 0.8774167908282244, 0.15600229921766529, 0.8444929948743043, 0.16065754667316434, 0.8884079067941585, 0.16727726730883008, 0.2097315022852847, 0.21250129006856455, 0.18235686325595257, 0.1641418387168967, 0.1828122510850827, 0.1799746759388563, 0.16219078395368303, 0.1832034227518219, 0.22397450827041432, 0.17378714744432378, 0.08494805764256541, 0.0781112995442701, 0.0637935540024922, 0.07868582660873058, 0.07017469063125992, 0.08469061632224761, 0.07697564430590942, 0.07249599906023341, 0.0872208509036031]}, "mutation_prompt": null}
{"id": "884ef130-87e7-402f-85b9-02285c780be1", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.9 * self.success_rate + 0.1  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Enhanced the adaptation mechanism by refining the update rule for the success rate to balance exploration and exploitation effectively.", "configspace": "", "generation": 19, "fitness": 0.43165837337146196, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.28.", "error": "", "parent_id": "49660ae4-ceb0-435a-ab4f-7a511bd03d13", "metadata": {"aucs": [0.7934967248430793, 0.8182396380197647, 0.7864171761185668, 0.820636363087007, 0.8210980437793891, 0.8031945567765307, 0.8002358961087774, 0.7877621365618768, 0.8111163406703183, 0.636033904752538, 0.6899305369538569, 0.6521290296690421, 0.6796153930171847, 0.6206730972008412, 0.6504323875353958, 0.5945852983953959, 0.6927260317445716, 0.6743606237201678, 0.0895975605545134, 0.13177816662669517, 0.14872767056206015, 0.08098831635021475, 0.11065510242399212, 0.027097607792865297, 0.09100577694535184, 0.06844664390545152, 0.11255093345505829, 0.11898579649542063, 0.09293337294760329, 0.08893261728789403, 0.08138274331440132, 0.10094908431797378, 0.02790942110571437, 0.10548337591091861, 0.08601158809235843, 0.09075014697177375, 0.9862936649197322, 0.981695799851693, 0.9600935557298524, 0.983309894439261, 0.9804892564267528, 0.9729782536826707, 0.9810867083488279, 0.9817140254956278, 0.9711990443900546, 0.6049806657646146, 0.591493480177113, 0.47717093253097775, 0.6187647090916324, 0.47644057687280517, 0.6252568683881639, 0.5151267107927454, 0.08659317278997769, 0.6311105111721329, 0.8016887206766015, 0.34203865095931074, 0.768608223486352, 0.8512402460237287, 0.8514666009545704, 0.8620841607222179, 0.8017547634105494, 0.8264407746397078, 0.8097725985823251, 0.1277014915553618, 0.6127596846953265, 0.6565576263354524, 0.6237335107553311, 0.5862511342487664, 0.5115128273794287, 0.7021921752595432, 0.6751883126785172, 0.6733936535649492, 0.6060835961893167, 0.6136101663956077, 0.6332759626405973, 0.6330852128233883, 0.6367537964994308, 0.6006216411877083, 0.5957326155522098, 0.12682036676354091, 0.5521828305498231, 0.6651634334618524, 0.6854037420801475, 0.6360327973330698, 0.6659295507610197, 0.6479474766149443, 0.6803579819712102, 0.6765168407547146, 0.010117421523520576, 0.6893628553255325, 0.7623267185157347, 0.6847558721491169, 0.6981362630668153, 0.7401893110078461, 0.6539365816805052, 0.7425037883646791, 0.74423770367184, 0.7157033463586623, 0.7070121869881154, 0.39811153690328416, 0.5053089522268622, 0.33716338765483733, 0.5264291766461038, 0.5338234028559666, 0.5139084426274706, 0.0683076130343988, 0.36946003393420423, 0.30496073177102057, 0.5168246066012063, 0.4451087095317141, 0.49737436498274645, 0.4804422277005338, 0.5077552636678015, 0.5068765856937265, 0.07864161555013383, 0.5149877004836192, 0.46216637598637955, 0.7656191993560203, 0.7818914227925018, 0.41058180386148346, 0.7918416252926299, 0.7835461831827324, 0.7902724499578875, 0.8148599016626809, 0.8046027464457775, 0.786202035178448, 0.09507656790623809, 0.12273199979234672, 0.11005105389628422, 0.10955840745018464, 0.09496411659919846, 0.08153539774104412, 0.10527425975876537, 0.10087522825853179, 0.0887267959242326, 0.16422368029822443, 0.20643186617320275, 0.6859100738629242, 0.264656555541536, 0.233619936091907, 0.3328818715996902, 0.42361055984109197, 0.22546850297803145, 0.2544915131731834, 0.3835810703331848, 0.3919776560582897, 0.4801284303162934, 0.4099330662875804, 0.3432575118526632, 0.42584992884353856, 0.4303900438582823, 0.42392567760579203, 0.32923049457872045, 0.27181823877762357, 0.34385298265367115, 0.24181121003963657, 0.28050403759592524, 0.42706110402969266, 0.2724565156174168, 0.4307151926507088, 0.3180747212223407, 0.37507126037440197, 0.20583605871740562, 0.23515190675025943, 0.209581926046137, 0.197728521206614, 0.21097938207456168, 0.16859695000633623, 0.18707583581807852, 0.1730086240919365, 0.18222126318845044, 0.24425463675026093, 0.19817193751666873, 0.24296140240406106, 0.20483683665834773, 0.17816384925683248, 0.20630579084155665, 0.18143500364556442, 0.17624570874016787, 0.22185086631429674, 0.1875294865568693, 0.14640177869175164, 0.16331099174283537, 0.16769748177189936, 0.17786618354883232, 0.19574361107317595, 0.8759793679370917, 0.14784312929282784, 0.16373825477100834, 0.894740836546805, 0.21239102500976903, 0.20659777770505838, 0.20857006157893054, 0.22523910794467616, 0.20983487097636466, 0.8738427621378517, 0.16712640883238983, 0.19542115165314922, 0.1717099839618046, 0.19313123996834525, 0.174111962975097, 0.1939009188531584, 0.16826332175941605, 0.21251965083629543, 0.1758487667160643, 0.2045497440610532, 0.17727562722615786, 0.0962353364681261, 0.11018740179847097, 0.07961664851692873, 0.09119248006223657, 0.10287119093608232, 0.07090468108581316, 0.12789898803241628, 0.09273613186148177, 0.0733260091152752]}, "mutation_prompt": null}
{"id": "61dfa504-d476-4702-9f0e-ef6182f84b39", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.9 * self.success_rate + 0.1  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n            if eval_count % (self.population_size * 10) == 0:  # Enhanced line to improve diversity\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Enhanced population diversity by incorporating random initialization periodically.", "configspace": "", "generation": 20, "fitness": 0.43165837337146196, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.28.", "error": "", "parent_id": "884ef130-87e7-402f-85b9-02285c780be1", "metadata": {"aucs": [0.7934967248430793, 0.8182396380197647, 0.7864171761185668, 0.820636363087007, 0.8210980437793891, 0.8031945567765307, 0.8002358961087774, 0.7877621365618768, 0.8111163406703183, 0.636033904752538, 0.6899305369538569, 0.6521290296690421, 0.6796153930171847, 0.6206730972008412, 0.6504323875353958, 0.5945852983953959, 0.6927260317445716, 0.6743606237201678, 0.0895975605545134, 0.13177816662669517, 0.14872767056206015, 0.08098831635021475, 0.11065510242399212, 0.027097607792865297, 0.09100577694535184, 0.06844664390545152, 0.11255093345505829, 0.11898579649542063, 0.09293337294760329, 0.08893261728789403, 0.08138274331440132, 0.10094908431797378, 0.02790942110571437, 0.10548337591091861, 0.08601158809235843, 0.09075014697177375, 0.9862936649197322, 0.981695799851693, 0.9600935557298524, 0.983309894439261, 0.9804892564267528, 0.9729782536826707, 0.9810867083488279, 0.9817140254956278, 0.9711990443900546, 0.6049806657646146, 0.591493480177113, 0.47717093253097775, 0.6187647090916324, 0.47644057687280517, 0.6252568683881639, 0.5151267107927454, 0.08659317278997769, 0.6311105111721329, 0.8016887206766015, 0.34203865095931074, 0.768608223486352, 0.8512402460237287, 0.8514666009545704, 0.8620841607222179, 0.8017547634105494, 0.8264407746397078, 0.8097725985823251, 0.1277014915553618, 0.6127596846953265, 0.6565576263354524, 0.6237335107553311, 0.5862511342487664, 0.5115128273794287, 0.7021921752595432, 0.6751883126785172, 0.6733936535649492, 0.6060835961893167, 0.6136101663956077, 0.6332759626405973, 0.6330852128233883, 0.6367537964994308, 0.6006216411877083, 0.5957326155522098, 0.12682036676354091, 0.5521828305498231, 0.6651634334618524, 0.6854037420801475, 0.6360327973330698, 0.6659295507610197, 0.6479474766149443, 0.6803579819712102, 0.6765168407547146, 0.010117421523520576, 0.6893628553255325, 0.7623267185157347, 0.6847558721491169, 0.6981362630668153, 0.7401893110078461, 0.6539365816805052, 0.7425037883646791, 0.74423770367184, 0.7157033463586623, 0.7070121869881154, 0.39811153690328416, 0.5053089522268622, 0.33716338765483733, 0.5264291766461038, 0.5338234028559666, 0.5139084426274706, 0.0683076130343988, 0.36946003393420423, 0.30496073177102057, 0.5168246066012063, 0.4451087095317141, 0.49737436498274645, 0.4804422277005338, 0.5077552636678015, 0.5068765856937265, 0.07864161555013383, 0.5149877004836192, 0.46216637598637955, 0.7656191993560203, 0.7818914227925018, 0.41058180386148346, 0.7918416252926299, 0.7835461831827324, 0.7902724499578875, 0.8148599016626809, 0.8046027464457775, 0.786202035178448, 0.09507656790623809, 0.12273199979234672, 0.11005105389628422, 0.10955840745018464, 0.09496411659919846, 0.08153539774104412, 0.10527425975876537, 0.10087522825853179, 0.0887267959242326, 0.16422368029822443, 0.20643186617320275, 0.6859100738629242, 0.264656555541536, 0.233619936091907, 0.3328818715996902, 0.42361055984109197, 0.22546850297803145, 0.2544915131731834, 0.3835810703331848, 0.3919776560582897, 0.4801284303162934, 0.4099330662875804, 0.3432575118526632, 0.42584992884353856, 0.4303900438582823, 0.42392567760579203, 0.32923049457872045, 0.27181823877762357, 0.34385298265367115, 0.24181121003963657, 0.28050403759592524, 0.42706110402969266, 0.2724565156174168, 0.4307151926507088, 0.3180747212223407, 0.37507126037440197, 0.20583605871740562, 0.23515190675025943, 0.209581926046137, 0.197728521206614, 0.21097938207456168, 0.16859695000633623, 0.18707583581807852, 0.1730086240919365, 0.18222126318845044, 0.24425463675026093, 0.19817193751666873, 0.24296140240406106, 0.20483683665834773, 0.17816384925683248, 0.20630579084155665, 0.18143500364556442, 0.17624570874016787, 0.22185086631429674, 0.1875294865568693, 0.14640177869175164, 0.16331099174283537, 0.16769748177189936, 0.17786618354883232, 0.19574361107317595, 0.8759793679370917, 0.14784312929282784, 0.16373825477100834, 0.894740836546805, 0.21239102500976903, 0.20659777770505838, 0.20857006157893054, 0.22523910794467616, 0.20983487097636466, 0.8738427621378517, 0.16712640883238983, 0.19542115165314922, 0.1717099839618046, 0.19313123996834525, 0.174111962975097, 0.1939009188531584, 0.16826332175941605, 0.21251965083629543, 0.1758487667160643, 0.2045497440610532, 0.17727562722615786, 0.0962353364681261, 0.11018740179847097, 0.07961664851692873, 0.09119248006223657, 0.10287119093608232, 0.07090468108581316, 0.12789898803241628, 0.09273613186148177, 0.0733260091152752]}, "mutation_prompt": null}
{"id": "7a7a7ea6-9366-496c-b2b1-5bf157c3cda9", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.9 * self.success_rate + 0.1  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 4)  # Slightly more aggressive reduction\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Integrate dynamic population size adaptation to balance diversity and convergence.", "configspace": "", "generation": 21, "fitness": 0.4198966920473118, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.28.", "error": "", "parent_id": "884ef130-87e7-402f-85b9-02285c780be1", "metadata": {"aucs": [0.7874753631927337, 0.7987890223975576, 0.7878901829001883, 0.7980093150344089, 0.8137976862436723, 0.8216926437130971, 0.7879552631008745, 0.8030083009564293, 0.7985525563060856, 0.65626921574425, 0.6372380063885889, 0.6445425043981899, 0.6430669572532431, 0.6690157211156297, 0.046020266864992165, 0.6590549547704658, 0.004831112321244335, 0.05168738179786869, 0.10406940210505888, 0.11100281325770978, 0.1124125925947832, 0.11934488981473002, 0.0795859629976623, 0.027543787104570172, 0.12545972252481474, 0.08064166708829346, 0.1258449661671055, 0.08940366725237658, 0.12734399867727975, 0.08935444267186488, 0.07002270095895058, 0.08922663658752827, 0.02487849661275454, 0.08457640713965775, 0.0997221523195545, 0.10709015843516334, 0.9862936649197322, 0.981695799851693, 0.9559261413619591, 0.983309894439261, 0.9804892564267528, 0.9759602205209024, 0.9810867083488279, 0.9817140254956278, 0.9687132899896373, 0.6244432862229294, 0.32631177961935187, 0.6147699741027621, 0.5861734238997163, 0.5699002790515988, 0.5978606701172535, 0.65163625285826, 0.6230238118648002, 0.5832461832783893, 0.7373361841437757, 0.8188294388447237, 0.8266533927188477, 0.8238923607602725, 0.8334419043544266, 0.7980256658859105, 0.7810013023616722, 0.3636479620483004, 0.8402013676062801, 0.6244747221800069, 0.6330790149723073, 0.6355163910102539, 0.6447786320804748, 0.6520436328556889, 0.6745365921980344, 0.7024277284437106, 0.6192618392050203, 0.6084365306947144, 0.6376377691471613, 0.5370913005056968, 0.6315127622356769, 0.6143811003808287, 0.6573670468099992, 0.12882048286179526, 0.6516133468249409, 0.6070531289785089, 0.5928412091934212, 0.6155378816207062, 0.07190967418318994, 0.6477536318745082, 0.639510041202857, 0.6492793366814529, 0.6200905723574649, 0.6678517349446997, 0.627278363014915, 0.6075530682488277, 0.7083902504735247, 0.6457852990615349, 0.6932400600481297, 0.7679038230473167, 0.01815108736008586, 0.7316231654460228, 0.7388494242277419, 0.7048158901801278, 0.6933708566018861, 0.3805696096925614, 0.42220137839927874, 0.23546558334920775, 0.5139034878429308, 0.5363527109123862, 0.531668577353237, 0.06707504666551345, 0.3351900480514055, 0.47206978714850933, 0.4284266397465609, 0.5290992444551395, 0.5132733615677811, 0.4553999663293381, 0.5206765017842079, 0.429409197545252, 0.4656491491573308, 0.057202732060345984, 0.49447505295741934, 0.5942985760686119, 0.7444570520363429, 0.7804639082699183, 0.7841877934991719, 0.7771152178195017, 0.7568153285272293, 0.7812019584181702, 0.791658380319996, 0.7743109842546655, 0.10766432995230024, 0.11325113405233733, 0.09234834908058476, 0.08751817289398256, 0.16789124023086155, 0.08986182666812204, 0.09298661213072101, 0.10306085128575337, 0.07084673469860159, 0.2824611026486268, 0.260644417123306, 0.17939395633000788, 0.18363871466765136, 0.23707130298550505, 0.6987195269809401, 0.20105678637795632, 0.17514957325192282, 0.24117000726676374, 0.46498884187253875, 0.3545893486377051, 0.24242037985681852, 0.3150519788793593, 0.3279264896431312, 0.4106429268410732, 0.40410316454288564, 0.3718974794791493, 0.4162871087584902, 0.3743928142526314, 0.26858451032371045, 0.2267757531329544, 0.4606487161000208, 0.3498133917628292, 0.3248202189142523, 0.3548191260063943, 0.34711399580844915, 0.3799029307362827, 0.17788387101688496, 0.21007631614365763, 0.1972135342142407, 0.21238555281121818, 0.1991210248430375, 0.1975589874148409, 0.2108789961869384, 0.19707991586168327, 0.21602428895524994, 0.17671941534261992, 0.2023512749819263, 0.22056001876758113, 0.1798640184757696, 0.20017492647048452, 0.22082908275281465, 0.18812654789831462, 0.19771099113497548, 0.19360257735575814, 0.18714968283053512, 0.1473084473219578, 0.16370192868835842, 0.1693014611016742, 0.17779265264162092, 0.19750810375537242, 0.8856645642177858, 0.1477337901124547, 0.16361011607448295, 0.8820875636580354, 0.21240813615361975, 0.20588366121607082, 0.15576891527483183, 0.22527067894153052, 0.20880991970276708, 0.893138015382894, 0.1674921658624835, 0.20966537264138285, 0.15949371683994373, 0.19380547251352287, 0.19970689767756655, 0.20358268418023018, 0.1728783615311943, 0.18971596655559397, 0.18337257800655227, 0.16647582396099148, 0.20143343223824417, 0.07965086244732067, 0.09652663937963812, 0.06601790236837224, 0.07854812339251127, 0.07690828450733012, 0.07814258810584485, 0.08163548590598968, 0.07403209183925885, 0.07139841510048173]}, "mutation_prompt": null}
{"id": "f1a28fe2-863a-44c6-9f9f-f304509e4e64", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.9 * self.success_rate + 0.1  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n                    # Dynamic population resizing based on success rate\n                    self.population_size = int(10 * self.dim * (1 + 0.5 * (1 - self.success_rate)))\n\n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Introduce a dynamic population resizing mechanism based on success rate to adaptively balance exploration and exploitation.", "configspace": "", "generation": 22, "fitness": 0.41934922919552386, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.28.", "error": "", "parent_id": "884ef130-87e7-402f-85b9-02285c780be1", "metadata": {"aucs": [0.7883876879069385, 0.8054457709797326, 0.7978281482854622, 0.7506892194477458, 0.7905741469603932, 0.7868590802083724, 0.8090605803690096, 0.7954652653905189, 0.796076981226412, 0.07501021273245645, 0.6123801972401909, 0.6579234641472507, 0.594688679584585, 0.4973576541072501, 0.04611436962743354, 0.6308439159848451, 0.612242730849398, 0.6280892947734711, 0.08979784343639385, 0.07521372892984002, 0.11009750458345657, 0.1275597437214987, 0.12344438145919356, 0.10287505408043307, 0.11484260438657146, 0.11147151410648348, 0.13206681767988016, 0.12481132754578417, 0.07323746440531709, 0.08398117319555443, 0.09293174203919985, 0.10870840215808053, 0.026435881649375714, 0.1408632383326538, 0.08935428582558214, 0.10081150933018213, 0.9862936649197322, 0.981695799851693, 0.9543217401452158, 0.983309894439261, 0.9804892564267528, 0.973101397169037, 0.9810867083488279, 0.9817140254956278, 0.9727701099620467, 0.6107209649354564, 0.5644127031811927, 0.32698493225208736, 0.6170094564030245, 0.49657104623470605, 0.6126854168162583, 0.3383426520259929, 0.54356709535916, 0.3164437095929963, 0.820364645597482, 0.7997448276420993, 0.7824169802161771, 0.8178019116425703, 0.8084807497830655, 0.8464738695131155, 0.7851512070774012, 0.805234478078738, 0.7351655594974866, 0.6079281899113472, 0.6306755448652611, 9.999999999998899e-05, 0.6256361655128563, 0.5694624108859105, 0.6658137912254445, 0.6673865423682968, 0.5707157139042156, 0.6738325934496907, 0.562118902005276, 0.12646402772541132, 0.5566599229092957, 0.5982162992206272, 0.1276983740556923, 0.6765193340476116, 0.5625448970044656, 0.6337882695112396, 0.617310741478774, 0.6121812552143455, 0.5750137856835884, 0.59410166419241, 0.6462753217547386, 0.6500222202258625, 0.6230590568420075, 0.6252632415997617, 0.663964025921802, 0.6164716516521545, 0.7149139790267598, 0.676812881140701, 0.7055416436307018, 0.7022542879079736, 0.6580993617324096, 0.6915695890869828, 0.7208581657170269, 0.7055143851747632, 0.6942466022390531, 0.25994407871097513, 0.3384103578504496, 0.3407330213594598, 0.49167763091108485, 0.50946119935835, 0.24925286403034375, 0.30988482406195195, 0.29157264945213424, 0.25352346046499197, 0.41890144914725114, 0.011390440581917405, 0.4175753927548772, 0.46354890262366566, 0.5014698600074192, 0.42051150643562973, 0.07886096338240567, 0.49952101600054943, 0.4414023606554147, 0.7802453344149934, 0.7332273501708888, 0.7448839441427844, 0.5694160989066135, 0.7655122889869677, 0.7466933935821094, 0.7578475606837533, 0.7677134006679192, 0.7563024264269007, 0.10854974393934413, 0.10170750809470952, 0.1056535692475401, 0.1183193847706725, 0.10677602857539148, 0.11936452615880877, 0.09238762842247561, 0.06851908452747524, 0.081363571991527, 0.13973590120858714, 0.265818049375223, 0.1725070311869269, 0.18788772555414734, 0.28244213173114463, 0.2449355860728759, 0.2553211730296471, 0.17480869870167826, 0.17613126311968041, 0.3223760983424361, 0.2877076252869335, 0.4095230558058157, 0.34679193152034415, 0.41116827736763095, 0.4420672646323738, 0.4355306945287519, 0.45124453566653333, 0.46204573117683034, 0.2942982573920312, 0.3246841375485082, 0.43970573131665946, 0.3340929194154568, 0.3895829353181318, 0.3816063889988146, 0.26147030347070555, 0.26146522447555476, 0.4022249504944405, 0.25110662033465414, 0.20600178858136975, 0.22190952535800612, 0.17993647211919928, 0.24233087849303003, 0.19449881539102465, 0.21133340901449416, 0.24071483418109108, 0.18329893866486224, 0.19512135581119505, 0.1794581573431595, 0.22188893767753903, 0.18418599284230408, 0.18121179296475165, 0.5731070310354247, 0.19476470496886134, 0.187366899308255, 0.19286651640109953, 0.1871462575336701, 0.14666113887632415, 0.8510158370202342, 0.1708129533849675, 0.17756503756734032, 0.19514453903434714, 0.8890189759473166, 0.1472390914770857, 0.1637941312477318, 0.8650654542043708, 0.21171626310904668, 0.206730140907322, 0.2067195564417006, 0.8648626916323037, 0.20757531548375652, 0.8515605501952828, 0.1677562129336122, 0.19922325621900605, 0.2134749855018011, 0.20397154021138042, 0.16981391383540978, 0.1743623099669368, 0.2143377568635325, 0.172103287273915, 0.19297763829172232, 0.17817013158055905, 0.17378714744432378, 0.07769122802162642, 0.10677336679767502, 0.07463343778146658, 0.07992785862717466, 0.061232393775641825, 0.06957084768363142, 0.06531190694870692, 0.056658821018011785, 0.08969515854769139]}, "mutation_prompt": null}
{"id": "77879942-a049-4adf-8a07-31f1f0653405", "solution": "import numpy as np\n\nclass DynamicPopulationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            diversity = np.std(self.population, axis=0).mean()\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.9 * self.success_rate + 0.1  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0:\n                if diversity < 0.1:\n                    self.population_size = max(5 * self.dim, self.population_size - 5)\n                else:\n                    self.population_size = min(20 * self.dim, self.population_size + 5)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "DynamicPopulationDE", "description": "Introduced dynamic population resizing based on diversity metrics to enhance exploration and exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 51 is out of bounds for axis 0 with size 50').", "error": "IndexError('index 51 is out of bounds for axis 0 with size 50')", "parent_id": "884ef130-87e7-402f-85b9-02285c780be1", "metadata": {}, "mutation_prompt": null}
{"id": "091a5c96-267a-4091-976c-4d715abba5fd", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.9 * self.success_rate + 0.1  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                fitness_variance = np.var(self.fitness)  # Calculate variance of fitness\n                if fitness_variance < 1e-5:  # If variance is very low\n                    self.population_size = max(5 * self.dim, self.population_size - 5)\n                else:\n                    self.population_size = min(10 * self.dim, self.population_size + 5)  # Increase population size\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Introduced adaptive population resizing based on performance variance to enhance convergence.", "configspace": "", "generation": 24, "fitness": 0.4308338546422654, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.28.", "error": "", "parent_id": "884ef130-87e7-402f-85b9-02285c780be1", "metadata": {"aucs": [0.8076115715607779, 0.819687545950903, 0.7768275612707735, 0.8011086958656604, 0.7894599659159064, 0.8104019234780179, 0.7993691066658465, 0.7997882497311508, 0.7706921151444859, 0.6306351937491488, 0.04002159713149378, 0.6609928822853213, 0.6312406034633404, 0.6852792606335365, 0.6028566551670348, 0.6542828120358286, 0.6547939946708781, 0.6394957614305589, 0.1069207666182731, 0.1324176875853038, 0.08167583211511942, 0.08659844748076595, 0.13623443319377615, 0.026958250560354058, 0.12648926874254462, 0.10507669215967108, 0.1040528774760403, 0.09809237548162508, 0.1056359437841966, 0.08770823405336614, 0.09844511234652642, 0.09237049837183697, 0.09682516477236136, 0.12693894891073976, 0.10456780241742958, 0.08041898411653348, 0.9862936649197322, 0.981695799851693, 0.9537341683333097, 0.983309894439261, 0.9804892564267528, 0.9758031477182085, 0.9810867083488279, 0.9817140254956278, 0.9747858014693327, 0.5557442015026286, 0.5739480953431451, 0.5433100314514387, 0.5012004166444439, 0.6252823597468595, 0.48862940375506525, 0.6078309704022314, 0.12231262317715319, 0.5827785961764116, 0.8102500574121374, 0.8148093021671324, 0.7658649467592041, 0.7894939771050865, 0.8114461088389952, 0.8109628623210291, 0.8057692330707642, 0.835942855970463, 0.8299575736540634, 0.6180720875061322, 0.65734300914005, 0.6366557154593167, 0.6295684350313222, 0.126895540681342, 0.6351113558926649, 0.6884526299330793, 0.6385197208570115, 0.6445323877348741, 0.1271034670116118, 0.5291064506765675, 0.6216703965429781, 0.6405564227249452, 0.5634094903713776, 0.588438783014205, 0.7114887140887254, 0.6252172096739668, 0.5369215214031575, 0.6009363482969815, 0.6161953529670983, 0.6566288383106149, 0.5655732546952392, 0.6257330700752008, 0.608315717022688, 0.6182029764241055, 0.5958434935470569, 0.5906880928409932, 0.6834916890241337, 0.6552192274781237, 0.6749069589480556, 0.6778644174506463, 0.017973294036796483, 0.7202368009839103, 0.7396615200054375, 0.7047629739332042, 0.7085489843792231, 0.4300001738778101, 0.36507873257988777, 0.27753140375071506, 0.4127801158743115, 0.0672291925267533, 0.2690825048535118, 0.06608309231577347, 0.3166504039234772, 0.3860140146192299, 0.4547196849270675, 0.42925788598195236, 0.4130691781998975, 0.43203585618441176, 0.4482578308594509, 0.4652247949631362, 0.405124033211825, 0.048524530811307365, 0.48415029373927676, 0.7598145283756496, 0.7929137550413199, 0.785377312460388, 0.7763662539056483, 0.7621678506124308, 0.7755850982981563, 0.7901494713850938, 0.7634825951708254, 0.7877664485977625, 0.10760207510311226, 0.12837027298339765, 0.1442465597509166, 0.12948348591983083, 0.16717235610478987, 0.08989879343943263, 0.15795000763736566, 0.09042826598508835, 0.10793329884702652, 0.22764000699854392, 0.6917891182239493, 0.36861169809938976, 0.3056822586375445, 0.2360794270797687, 0.4536036392069558, 0.267584740045836, 0.1754243356978079, 0.22082581291321146, 0.4058299900792899, 0.3520707472686334, 0.4269798036352418, 0.4278213591021153, 0.3345355525027367, 0.2709641957191865, 0.45643097682956246, 0.29632163671936373, 0.4244060312012713, 0.2729021691536859, 0.2660914451805073, 0.208076394331837, 0.4374003476845897, 0.38946531176404575, 0.40722978577648405, 0.40623671010733275, 0.15995493791009596, 0.3369032915589716, 0.18049842756869772, 0.19866029488631898, 0.1904379384489876, 0.22978696248844266, 0.16286569928793937, 0.1958399429648412, 0.19897191821643168, 0.15485529215655747, 0.173825440500751, 0.2215970367225114, 0.2060176823741081, 0.18555148601544247, 0.2213910187592497, 0.2087845618382883, 0.2160761049289618, 0.1800250630257395, 0.23707352259057368, 0.2231946622210128, 0.18671073972007002, 0.15186087705267293, 0.1653486587967643, 0.8631105649291644, 0.17697515520099205, 0.1963132503615016, 0.8861370720750719, 0.1472541159628281, 0.16343238009228278, 0.8855138243490948, 0.21145637977817988, 0.8403845159214993, 0.20906848761718033, 0.8385857646040442, 0.20900073988599444, 0.8942204709136546, 0.16737091632654078, 0.1992207089044744, 0.18489661432834958, 0.20287665493279228, 0.1876045521098173, 0.1742153784261804, 0.1953772061530039, 0.17168956938280167, 0.19768748569350425, 0.19687587451271715, 0.17378714744432378, 0.11010883534416405, 0.08435497192415153, 0.08563426035140564, 0.09523496540668153, 0.07775238212010604, 0.06890854025856574, 0.07273310536670108, 0.08910391745474677, 0.07320434078551008]}, "mutation_prompt": null}
{"id": "2b77472e-fe97-4b50-b2db-915b8609c549", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        prev_best_fitness = np.inf\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.9 * self.success_rate + 0.1  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n\n            current_best_fitness = self.fitness[best_idx]\n            if eval_count % (self.population_size * 5) == 0:\n                if current_best_fitness < prev_best_fitness:\n                    self.population_size = max(5 * self.dim, self.population_size - 5)\n                prev_best_fitness = current_best_fitness\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Refined the adaptation mechanism by introducing dynamic adjustment of population size based on convergence speed to enhance diversification.", "configspace": "", "generation": 25, "fitness": 0.43165837337146196, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.28.", "error": "", "parent_id": "884ef130-87e7-402f-85b9-02285c780be1", "metadata": {"aucs": [0.7934967248430793, 0.8182396380197647, 0.7864171761185668, 0.820636363087007, 0.8210980437793891, 0.8031945567765307, 0.8002358961087774, 0.7877621365618768, 0.8111163406703183, 0.636033904752538, 0.6899305369538569, 0.6521290296690421, 0.6796153930171847, 0.6206730972008412, 0.6504323875353958, 0.5945852983953959, 0.6927260317445716, 0.6743606237201678, 0.0895975605545134, 0.13177816662669517, 0.14872767056206015, 0.08098831635021475, 0.11065510242399212, 0.027097607792865297, 0.09100577694535184, 0.06844664390545152, 0.11255093345505829, 0.11898579649542063, 0.09293337294760329, 0.08893261728789403, 0.08138274331440132, 0.10094908431797378, 0.02790942110571437, 0.10548337591091861, 0.08601158809235843, 0.09075014697177375, 0.9862936649197322, 0.981695799851693, 0.9600935557298524, 0.983309894439261, 0.9804892564267528, 0.9729782536826707, 0.9810867083488279, 0.9817140254956278, 0.9711990443900546, 0.6049806657646146, 0.591493480177113, 0.47717093253097775, 0.6187647090916324, 0.47644057687280517, 0.6252568683881639, 0.5151267107927454, 0.08659317278997769, 0.6311105111721329, 0.8016887206766015, 0.34203865095931074, 0.768608223486352, 0.8512402460237287, 0.8514666009545704, 0.8620841607222179, 0.8017547634105494, 0.8264407746397078, 0.8097725985823251, 0.1277014915553618, 0.6127596846953265, 0.6565576263354524, 0.6237335107553311, 0.5862511342487664, 0.5115128273794287, 0.7021921752595432, 0.6751883126785172, 0.6733936535649492, 0.6060835961893167, 0.6136101663956077, 0.6332759626405973, 0.6330852128233883, 0.6367537964994308, 0.6006216411877083, 0.5957326155522098, 0.12682036676354091, 0.5521828305498231, 0.6651634334618524, 0.6854037420801475, 0.6360327973330698, 0.6659295507610197, 0.6479474766149443, 0.6803579819712102, 0.6765168407547146, 0.010117421523520576, 0.6893628553255325, 0.7623267185157347, 0.6847558721491169, 0.6981362630668153, 0.7401893110078461, 0.6539365816805052, 0.7425037883646791, 0.74423770367184, 0.7157033463586623, 0.7070121869881154, 0.39811153690328416, 0.5053089522268622, 0.33716338765483733, 0.5264291766461038, 0.5338234028559666, 0.5139084426274706, 0.0683076130343988, 0.36946003393420423, 0.30496073177102057, 0.5168246066012063, 0.4451087095317141, 0.49737436498274645, 0.4804422277005338, 0.5077552636678015, 0.5068765856937265, 0.07864161555013383, 0.5149877004836192, 0.46216637598637955, 0.7656191993560203, 0.7818914227925018, 0.41058180386148346, 0.7918416252926299, 0.7835461831827324, 0.7902724499578875, 0.8148599016626809, 0.8046027464457775, 0.786202035178448, 0.09507656790623809, 0.12273199979234672, 0.11005105389628422, 0.10955840745018464, 0.09496411659919846, 0.08153539774104412, 0.10527425975876537, 0.10087522825853179, 0.0887267959242326, 0.16422368029822443, 0.20643186617320275, 0.6859100738629242, 0.264656555541536, 0.233619936091907, 0.3328818715996902, 0.42361055984109197, 0.22546850297803145, 0.2544915131731834, 0.3835810703331848, 0.3919776560582897, 0.4801284303162934, 0.4099330662875804, 0.3432575118526632, 0.42584992884353856, 0.4303900438582823, 0.42392567760579203, 0.32923049457872045, 0.27181823877762357, 0.34385298265367115, 0.24181121003963657, 0.28050403759592524, 0.42706110402969266, 0.2724565156174168, 0.4307151926507088, 0.3180747212223407, 0.37507126037440197, 0.20583605871740562, 0.23515190675025943, 0.209581926046137, 0.197728521206614, 0.21097938207456168, 0.16859695000633623, 0.18707583581807852, 0.1730086240919365, 0.18222126318845044, 0.24425463675026093, 0.19817193751666873, 0.24296140240406106, 0.20483683665834773, 0.17816384925683248, 0.20630579084155665, 0.18143500364556442, 0.17624570874016787, 0.22185086631429674, 0.1875294865568693, 0.14640177869175164, 0.16331099174283537, 0.16769748177189936, 0.17786618354883232, 0.19574361107317595, 0.8759793679370917, 0.14784312929282784, 0.16373825477100834, 0.894740836546805, 0.21239102500976903, 0.20659777770505838, 0.20857006157893054, 0.22523910794467616, 0.20983487097636466, 0.8738427621378517, 0.16712640883238983, 0.19542115165314922, 0.1717099839618046, 0.19313123996834525, 0.174111962975097, 0.1939009188531584, 0.16826332175941605, 0.21251965083629543, 0.1758487667160643, 0.2045497440610532, 0.17727562722615786, 0.0962353364681261, 0.11018740179847097, 0.07961664851692873, 0.09119248006223657, 0.10287119093608232, 0.07090468108581316, 0.12789898803241628, 0.09273613186148177, 0.0733260091152752]}, "mutation_prompt": null}
{"id": "9e35fa58-d7de-4e67-a3d7-7455e2dd49b8", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < (self.crossover_rate + np.random.uniform(-0.05, 0.05)):  # Stochastic fluctuation\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.9 * self.success_rate + 0.1  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Introduced stochastic fluctuation to the crossover rate for better exploration-exploitation balance.", "configspace": "", "generation": 26, "fitness": 0.41665016566654045, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.28.", "error": "", "parent_id": "884ef130-87e7-402f-85b9-02285c780be1", "metadata": {"aucs": [0.8241106939941565, 0.8113040856146301, 0.788989571353224, 0.7840510058257839, 0.18865965818138153, 0.8190041904439626, 0.8278497006499417, 0.8064915996182754, 0.7954835527704384, 9.999999999998899e-05, 0.07241957458718085, 0.5815043698204242, 0.6501758534054409, 0.6427526010454752, 0.690779609736428, 0.6844523309293715, 0.6696154134345839, 0.6332321020229543, 0.1524777105391849, 0.07319634148007992, 0.1368055358141662, 0.12527594759427663, 0.06361005494967598, 0.10725635664590139, 0.1086201853696308, 0.10724829207497966, 0.11024254556260094, 0.11142737512354128, 0.07696272583198682, 0.11746095607739226, 0.14937588251437806, 0.013856896490033743, 0.12362310142843469, 0.09741534030922161, 0.01610665755559204, 0.10422067741937535, 0.9814536534162843, 0.9789540215857799, 0.9743426072602162, 0.987957823229623, 0.9760737375960291, 0.9738843968952117, 0.9806250716179751, 0.975147972486419, 0.980794472674262, 0.6442869205871771, 0.612632440241061, 0.05975230435484502, 0.574515693493555, 0.6225296649483283, 0.6090484707752954, 0.5856101874730671, 0.6241845389762346, 0.6735291436374627, 0.7888761628833825, 0.7790257230979765, 0.7567257570570505, 0.8426453418524532, 0.7130588950058605, 0.834583296184763, 0.800585416908422, 0.7820035169257653, 0.8395109914707917, 0.6386992607539635, 0.6680594232892741, 0.6093115866135601, 0.12816413730188092, 0.6614582532186475, 0.6466493237285533, 0.6736081115099024, 0.12633464892521862, 0.6756654922980672, 0.6566664680769786, 0.6377571851669926, 0.6651715938961995, 0.5663986007791642, 0.6315027435492395, 0.5842755229636762, 0.6151798775996966, 0.6189239937909266, 0.6556454027216039, 0.6241952540793967, 0.5271271864061404, 0.6018017630105955, 0.6348792173619988, 0.05656545271477753, 0.0006534985427085749, 0.5964073533632677, 0.5715181715648678, 0.6143865608243615, 0.7108904730615854, 0.6754110299053958, 0.717963145936539, 0.719153934262819, 0.7380720644981323, 0.6605405269552784, 0.7496721147689878, 0.6781305788622631, 0.6906263883807352, 0.23947645301507858, 0.3498190541403444, 0.22481737995786766, 0.4314068086721349, 0.490130588602232, 0.4953930556146562, 0.13120330883489473, 0.4214761263584066, 0.37152985771993996, 0.4404458836028199, 0.47639600060052234, 0.4819164949593806, 0.4183488426119315, 0.43704789980041525, 0.4301623386365109, 0.4180155650404729, 0.4262799612703363, 0.5084482553263803, 0.7590145012316776, 0.761739707006985, 0.7366066828656637, 0.7604379006844464, 0.7670973006668207, 0.7649226648571578, 0.7883475119471037, 0.709073921090029, 0.7879979986518925, 0.08153367499269792, 0.14988428739950888, 0.09453178069189361, 0.1099618949438409, 0.11151543173272183, 0.08218451118295689, 0.1160722460678324, 0.10220525449800766, 0.10902158802155737, 0.28591963517653396, 0.35360708747445957, 0.2025735304311912, 0.1226149658791974, 0.1689871510393074, 0.37819089263218997, 0.15771827278347883, 0.23650902803389762, 0.2704159178057549, 0.45334919098109316, 0.4674581866477505, 0.2357293726520786, 0.4386875944217933, 0.4298926156278712, 0.48635560054789095, 0.3716511998848093, 0.38396587807837956, 0.4427719850471833, 0.2819959928583706, 0.25040771869635425, 0.3774537023745562, 0.30214424240246673, 0.43477599268701594, 0.2916871437719665, 0.4357174270817975, 0.16030814084689538, 0.1371491053970867, 0.20846573096799625, 0.20772459909256535, 0.19674854052407165, 0.183929925739736, 0.18454247612366348, 0.2167040066653727, 0.25225912558353936, 0.19191971187718804, 0.18663021384068446, 0.20700886566523047, 0.23748325903140088, 0.1974844878761246, 0.2416749659481865, 0.21458393722378977, 0.18955882017589265, 0.2463386662805468, 0.21484279485047886, 0.20364833178320296, 0.18504787126801148, 0.11999255787272034, 0.16604533535264576, 0.10655919641399614, 0.1624737465512397, 0.1676662092019089, 0.8876442548984037, 0.10804295549275922, 0.161758734679456, 0.881301436493697, 0.11219617134569349, 0.12045194803699322, 0.1684962109038668, 0.2077280011481002, 0.12494745698356213, 0.8722380401355398, 0.12774246424075264, 0.20407179152774702, 0.21642660798413182, 0.20053944166204296, 0.23604776834704555, 0.17903271928429965, 0.24455395971298455, 0.22539850449204268, 0.1936028383222299, 0.2358694913009275, 0.20840211970564382, 0.08661038604243276, 0.13916486990859134, 0.08533618183775094, 0.09669657285433186, 0.044848508085173155, 0.09380842670097611, 0.08770417714882772, 0.08610260735935449, 0.0818743973359054]}, "mutation_prompt": null}
{"id": "6af970b3-cce3-41be-a09c-9bcad94a935c", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b + c - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.9 * self.success_rate + 0.1  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - int(0.1 * self.population_size))  # Dynamic size reduction\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Improved success rate adaptation by dynamically adjusting population size and enhancing exploration.", "configspace": "", "generation": 27, "fitness": 0.146838714616706, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "884ef130-87e7-402f-85b9-02285c780be1", "metadata": {"aucs": [0.21130207393729605, 0.19761734911161943, 0.21715125497719834, 0.2273647220678645, 0.29569782281433143, 0.24810876758838096, 0.24674109566141833, 0.2225334189261895, 0.2579567948684296, 0.04301740040920454, 0.05467062247929366, 0.05635361063944, 0.054849930655405665, 0.051310415938921494, 0.03071404142878531, 0.05716242337309285, 0.06254906732289678, 0.04720258788840914, 0.0448270813258812, 0.05450868629519812, 0.05258003601503458, 0.05430824358956576, 0.058770348322717436, 0.06037300710579352, 0.05431796570547087, 0.06848993366306044, 0.0498707970044181, 0.04001136479988143, 0.034502166763101916, 0.04039504410593331, 0.03336241381587457, 0.041833672409318234, 0.03972755769170455, 0.03712074574822277, 0.03727803031255428, 0.03480172323128883, 0.9855342070731197, 0.9895214093094014, 0.9806545171421934, 0.9770435430532972, 0.9856537438265929, 0.9744620040568087, 0.9864610423054083, 0.9891190346404181, 0.970996854831569, 0.11217258832684363, 0.09932299444283055, 0.10098135025176802, 0.10050819209057049, 0.11845477709576113, 0.12591471627477624, 0.1301386237872395, 0.08339273171628481, 0.1255511571770207, 0.15302973584562207, 0.1662798403554323, 0.16229789219786728, 0.17750718566452306, 0.200817150297668, 0.21127578086316567, 0.17028958902361135, 0.17529227656560975, 0.17939960187865822, 0.01785337526943409, 0.04579636559238698, 0.017145093335441564, 0.049188784087482285, 0.03957574656226459, 0.042166982680770015, 0.011303494456435637, 0.04034788667156408, 0.03747771089158469, 0.009860809627778466, 0.021736472205751145, 0.009938442804526493, 0.034031182568788565, 0.01881306470408506, 0.014183905068180347, 0.028168082847012332, 0.04182965425508467, 0.03804742081767232, 0.0029159303270649417, 9.999999999998899e-05, 0.0015123717218280541, 0.0007353765615686347, 0.027749018531761926, 0.01097017224369723, 0.018924910748717605, 0.0035106473468610178, 0.005720989356089334, 0.09013889497887762, 0.08603774815575305, 0.12369790830509575, 0.09869057646276347, 0.08524663839173796, 0.16762545973231313, 0.0951424816172377, 0.11582832250843389, 0.16301811196193217, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025406517912778703, 0.02530037733120849, 0.042399678738387236, 0.028226429754666604, 0.04272136825788364, 0.026491476462759622, 0.04437205204180861, 0.032855110442339575, 0.03722650436731578, 0.23554230605783066, 0.2238200317929795, 0.2543886603120178, 0.2633228209489439, 0.2457411740195352, 0.23125042386626704, 0.22763665307094927, 0.2029540859563692, 0.21967851056456345, 0.06921668254885449, 0.055146932963790696, 0.0663328274687719, 0.0572769925911889, 0.05404576327556243, 0.050556488303200475, 0.05568069839722045, 0.05178242238430941, 0.05587368389170444, 0.14922234645718613, 0.15014110790860957, 0.1752004085609069, 0.15032879790754328, 0.18148171587950845, 0.1392166839836202, 0.19388733521028467, 0.1580021807963441, 0.1420219662222778, 0.165706883775515, 0.16281275839150022, 0.16213714642892973, 0.16269469363580558, 0.19066011354012713, 0.16308885049013588, 0.16346505419485968, 0.18183913069902669, 0.18855447200876108, 0.1311970738541406, 0.10659952729316269, 0.11066828226210879, 0.14695634885773812, 0.13762609703029882, 0.16105561347375952, 0.12232628430412151, 0.13022345097044874, 0.15388988475741028, 0.1818026702118396, 0.14445320859193267, 0.19694572361313667, 0.15924137599203114, 0.1483034137968936, 0.15058084069040856, 0.14895279356322644, 0.15394025407196443, 0.15277479062405253, 0.1512697158940024, 0.13252990759540173, 0.1439625108451109, 0.1432537794941181, 0.145394500717542, 0.14193098021537276, 0.1323460761355285, 0.15830416795718005, 0.14834331656076716, 0.15009424373513702, 0.1619753085723491, 0.2208831947454668, 0.1517898875177761, 0.17716593554369608, 0.3291356832193706, 0.26621992646534076, 0.3054135308728787, 0.1724081130414603, 0.1643913144548984, 0.12748614612565723, 0.16791579156714065, 0.12979061691171123, 0.1267563144893069, 0.13519688528414275, 0.12377267111014467, 0.25280762245056254, 0.20875379405608385, 0.1864268319321919, 0.18311628430383886, 0.16649507378938544, 0.18637342316902317, 0.20745498544655194, 0.1831074776661108, 0.17852878950435258, 0.1511282503499457, 0.15835748743755063, 0.04565583477339674, 0.042374118219892454, 0.049367154684858194, 0.04456319135630038, 0.054070051779149586, 0.04732373493807718, 0.055970234951343456, 0.05433421321186216, 0.04259253885846115]}, "mutation_prompt": null}
{"id": "08816826-33bb-42c9-b289-de9d77131a76", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.8 * self.success_rate + 0.2  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Modified the update rule for the success rate to enhance adaptive exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": 0.4314780628159282, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.28.", "error": "", "parent_id": "884ef130-87e7-402f-85b9-02285c780be1", "metadata": {"aucs": [0.7992521889985171, 0.79705645824509, 0.7916608568737555, 0.5509425486189863, 0.8026289330790102, 0.7864638341958832, 0.7998627328898116, 0.8015731439367505, 0.802223870604472, 0.6531734172200869, 0.646292789254773, 0.7038893858845097, 0.6689490821509396, 0.6725469551884009, 0.6942512907335695, 0.653823877328956, 0.6567585568448105, 0.6930854573401509, 0.14118474182180762, 0.13177192213940359, 0.14816739036479198, 0.0822888464082756, 0.11051891553887816, 0.027100657760731894, 0.09100646069071905, 0.0662929405191981, 0.10434328481726696, 0.11663727637908072, 0.09265845382941074, 0.08893606967709966, 0.08104529446913145, 0.10098892330400067, 0.02730802788068054, 0.10549266885275987, 0.09530626634735395, 0.0849117755667812, 0.9862936706855335, 0.9816968350069125, 0.9600936838065779, 0.9833099205634082, 0.9804892680324375, 0.972978250156974, 0.9810867360021058, 0.9817140456792101, 0.9711991127119467, 0.6082107283760174, 0.5918847936967869, 0.6790878845124, 0.6282494730135264, 0.6230937543868167, 0.623243946833327, 0.5419639915965908, 0.08660001369334136, 0.628014321522224, 0.7985869595591352, 0.809770871213159, 0.7991124477453593, 0.8322986492590879, 0.8411393287663802, 0.8618392074146803, 0.8001582892607406, 0.829474974987433, 0.8303212733398568, 0.1277187770448056, 0.6295267524843393, 0.6622665165832524, 0.6119680147870377, 0.6178704286933739, 0.7115172872452102, 0.6893968674438833, 0.6672022146654994, 0.6607476057245959, 0.5819050125018198, 0.63556627782143, 0.6347830004026608, 0.6198627050180637, 0.6588360309723529, 0.6179935220553673, 0.1293488325981187, 0.6608760698288159, 0.1325327787661017, 0.6467464798321508, 0.6777499325527764, 0.6959077792902546, 0.6641210746562816, 0.6574276984424987, 0.6458861343798721, 0.6465814841243369, 0.010031090872004045, 0.629114675241792, 0.7225260408034825, 0.09149177124359065, 0.6932440164389304, 0.7334459932693354, 0.6268311474825042, 0.5645676627796399, 0.7712577002189975, 0.7192124432648384, 0.7522414362503547, 0.44497955889268537, 0.5301688513397815, 0.31940959204395336, 0.509133846513214, 0.46812605224765147, 0.4985735180867473, 0.06717330471877925, 0.38591304680230143, 0.23170200672829977, 0.5036988468711248, 0.5263214247282954, 0.5203980155073336, 0.4814749667100552, 0.45863569518254177, 0.47714373175171243, 0.46887731166919333, 0.5129368868009276, 0.4624501905542773, 0.7677754868514023, 0.7479075982939795, 0.41357438188204865, 0.794635675671334, 0.8042153303836302, 0.7975315364580043, 0.8150793823266889, 0.7960397456429135, 0.7774270757275279, 0.094350693867719, 0.10504650611043398, 0.08934025285145542, 0.13424641643319934, 0.09476665795589201, 0.07091037872566552, 0.10539633733490628, 0.103740379015275, 0.0889974674123345, 0.22599614434572934, 0.25155574519565105, 0.703093462358166, 0.3121886392525324, 0.285634593272845, 0.2729220391323993, 0.4107752632939642, 0.22576032846427752, 0.15228711029019326, 0.38454101300633703, 0.47456373770711, 0.4786974826687356, 0.33136242895467216, 0.40235662372618564, 0.3673947422738183, 0.3348613921387089, 0.35596963898824796, 0.47050561666687374, 0.2595085857209436, 0.2487744612935271, 0.3574134179519356, 0.2925855428421247, 0.32140710749079027, 0.35429343230739907, 0.3899713557879475, 0.41324666206670446, 0.4028881507278388, 0.20885703233445552, 0.21210854645164035, 0.1993873387144215, 0.1844062179380459, 0.16215243910464994, 0.18309946337724803, 0.1825303786545539, 0.17968126170450538, 0.17999401761696388, 0.2442422935888594, 0.19817461577632878, 0.2427142494797475, 0.20355274151490033, 0.17939174501310717, 0.19607287252346872, 0.18158398202371517, 0.1825970004682963, 0.2218521230757602, 0.18752962108436855, 0.14639872592175218, 0.16330936728776346, 0.16769099645395058, 0.177879556389675, 0.19554731195974906, 0.8847831915339346, 0.14779467440075822, 0.16373515260843707, 0.8958953594219758, 0.21239295090169585, 0.20660133101742229, 0.20984842099427392, 0.225238451628908, 0.2098318351526477, 0.8910957204750437, 0.16712753541407, 0.19542110779980537, 0.16506981237835916, 0.1925041350188974, 0.17598239172677166, 0.17754544962309904, 0.16733546667311294, 0.17637281766248947, 0.20201587017452227, 0.17651428176584527, 0.20502801027241324, 0.12016214567029915, 0.082040591073955, 0.06534907395729772, 0.07612433078279768, 0.07927297745807049, 0.0736841229226004, 0.11857619911783679, 0.06626122661531642, 0.05963918416278324]}, "mutation_prompt": null}
{"id": "6c5544cf-b108-4569-8173-89e89be28c2f", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.95 * self.success_rate + 0.05  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Enhanced success rate adaptation by adjusting the rate increment for improved balance.", "configspace": "", "generation": 29, "fitness": 0.41013581774830077, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.29.", "error": "", "parent_id": "884ef130-87e7-402f-85b9-02285c780be1", "metadata": {"aucs": [0.8171739919867607, 0.8095944334075567, 0.7867267895177006, 0.8016508481055755, 0.8050913544702856, 0.8075614193010384, 0.798358459227162, 0.792988408572814, 0.79156604840147, 0.07641698870166347, 0.6271357901778382, 0.6180233950425535, 0.6964600932573988, 0.6323278439301505, 0.045588596928444525, 0.5109884055777723, 0.6771106293162863, 0.6669379604868322, 0.10094653359162642, 0.09579428934606149, 0.1490997601286599, 0.13667695971801874, 0.10653269198939164, 0.028878507870949366, 0.10760399636781837, 0.08965251671562202, 0.09578315610770782, 0.10256680990725653, 0.08459561705538776, 0.0859980466303667, 0.11122749623196615, 0.10014716875526741, 0.025564951464500663, 0.12766356930748624, 0.10307517519073994, 0.10087761961639785, 0.9862924583341228, 0.9815680555035716, 0.09867571544584841, 0.9833050759479378, 0.9805304320469849, 0.9729789708369335, 0.9806205134095557, 0.9817098681442763, 0.9697979607345558, 0.5892154269989055, 0.5867557473267052, 0.6398326591829979, 0.519736549859026, 0.3221682378303814, 0.5843229123569473, 0.5821273005172494, 0.6545961239529205, 0.6172403788012262, 0.83028741307975, 0.8653515875587846, 0.8111315092173662, 0.8689772096053973, 0.21551858854834305, 0.8082010198065088, 0.8302202335957509, 0.8813394227911717, 0.8540240257486121, 0.5949448756715194, 0.6597492333423982, 0.6714185881288379, 0.6487462468897895, 0.12898417837906873, 0.665597685857094, 0.6511160384480601, 0.11941060396998782, 0.6483737748352241, 0.6405557806072144, 0.6250426080793773, 0.6908992372468766, 0.13342096660482616, 0.7099595055443679, 0.6270577194633792, 0.7216268847513663, 0.12605138533263416, 0.6264003844946904, 0.6217818103283808, 0.07065993638553447, 0.6245547830935229, 0.6715928139585458, 0.6766412656293719, 0.6601056433284342, 0.6073446894725913, 0.010009974560488244, 0.596848760178457, 0.7184563726042992, 0.6930385841924968, 0.7099361360638337, 0.7146257274572375, 0.6321588726988174, 0.7705191540741334, 0.7422575603606067, 0.7055064910554535, 0.7290075812022023, 0.2065448473817204, 0.3719449344078337, 0.28101317594864605, 0.06978511817817812, 0.288916930102022, 0.49549774096752075, 0.06781631582630654, 0.4136034239794333, 0.09211133828495, 0.4700050971987365, 0.48542063071376784, 0.4994589309573233, 0.4833330210556508, 0.5415510734879303, 0.488528448082734, 0.41099709736606005, 0.5282108761366728, 0.5223138661297824, 0.7916864527254839, 0.7603787624424723, 0.8046337916062785, 0.7774480630638962, 0.7683043819256232, 0.7828791567345279, 0.759317264443805, 0.7999263726633441, 0.7921991507090274, 0.08760288760548007, 0.08745203320114414, 0.1192485304491041, 0.10590461768667792, 0.08728621620830745, 0.1042609172154636, 0.1455895529010499, 0.10843279251322879, 0.14770561691546213, 0.14769696479126482, 0.39175214460418784, 0.18379508336743033, 0.32914416742242847, 0.20999050297117638, 0.34305097584762545, 0.29333705806980603, 0.17035102998194074, 0.1577995259633852, 0.2647294045871518, 0.38716711661518777, 0.33008962567119127, 0.3532428553167668, 0.4854699677299946, 0.35917921291699617, 0.39797406068116437, 0.3634093204125529, 0.33830874927248555, 0.3274268466457769, 0.24964040711199997, 0.39880435475795495, 0.2489106604664304, 0.2807523481096944, 0.411698901078689, 0.34407912306054356, 0.16492286894843178, 0.278958426394068, 0.20259375717270656, 0.15429266485993998, 0.15614755010885695, 0.19513941303005555, 0.1900720425873037, 0.2083578832780223, 0.20597475786645236, 0.1902491244170238, 0.1876438946373883, 0.185241005486538, 0.1837614978944072, 0.18236929344094066, 0.2024964705982557, 0.20514408255606875, 0.20120501623217746, 0.24443690582360245, 0.1975336493341876, 0.20248157251967236, 0.18750450849151656, 0.14644810696693145, 0.18299120126559187, 0.1685151195071497, 0.1762071214854255, 0.19651041763526378, 0.8792197425910036, 0.14786680132945562, 0.16374433890503237, 0.8883126313651818, 0.21244595229761398, 0.2040268096340263, 0.1555387243547619, 0.2253081091848499, 0.20996288418107023, 0.8920826955506145, 0.1674232530662253, 0.1954194645977897, 0.1994493130463697, 0.21006673113234442, 0.172961516974676, 0.21593524103873152, 0.16663448584674623, 0.2246118592600146, 0.18650624301529684, 0.21112043252527235, 0.20379563571753423, 0.07960916885735403, 0.09045740945360847, 0.08382728098556325, 0.09415205031517604, 0.09137663988569944, 0.0899503867407544, 0.09941210299497383, 0.0648422109058614, 0.09565475679443713]}, "mutation_prompt": null}
{"id": "aa198062-f1bc-44c3-886c-0125b5a70f4b", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.8 * self.success_rate + 0.2  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Improved adaptive mechanism by further fine-tuning the formula for updating the success rate to better exploit successful trials.", "configspace": "", "generation": 30, "fitness": 0.4314780628159282, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.28.", "error": "", "parent_id": "884ef130-87e7-402f-85b9-02285c780be1", "metadata": {"aucs": [0.7992521889985171, 0.79705645824509, 0.7916608568737555, 0.5509425486189863, 0.8026289330790102, 0.7864638341958832, 0.7998627328898116, 0.8015731439367505, 0.802223870604472, 0.6531734172200869, 0.646292789254773, 0.7038893858845097, 0.6689490821509396, 0.6725469551884009, 0.6942512907335695, 0.653823877328956, 0.6567585568448105, 0.6930854573401509, 0.14118474182180762, 0.13177192213940359, 0.14816739036479198, 0.0822888464082756, 0.11051891553887816, 0.027100657760731894, 0.09100646069071905, 0.0662929405191981, 0.10434328481726696, 0.11663727637908072, 0.09265845382941074, 0.08893606967709966, 0.08104529446913145, 0.10098892330400067, 0.02730802788068054, 0.10549266885275987, 0.09530626634735395, 0.0849117755667812, 0.9862936706855335, 0.9816968350069125, 0.9600936838065779, 0.9833099205634082, 0.9804892680324375, 0.972978250156974, 0.9810867360021058, 0.9817140456792101, 0.9711991127119467, 0.6082107283760174, 0.5918847936967869, 0.6790878845124, 0.6282494730135264, 0.6230937543868167, 0.623243946833327, 0.5419639915965908, 0.08660001369334136, 0.628014321522224, 0.7985869595591352, 0.809770871213159, 0.7991124477453593, 0.8322986492590879, 0.8411393287663802, 0.8618392074146803, 0.8001582892607406, 0.829474974987433, 0.8303212733398568, 0.1277187770448056, 0.6295267524843393, 0.6622665165832524, 0.6119680147870377, 0.6178704286933739, 0.7115172872452102, 0.6893968674438833, 0.6672022146654994, 0.6607476057245959, 0.5819050125018198, 0.63556627782143, 0.6347830004026608, 0.6198627050180637, 0.6588360309723529, 0.6179935220553673, 0.1293488325981187, 0.6608760698288159, 0.1325327787661017, 0.6467464798321508, 0.6777499325527764, 0.6959077792902546, 0.6641210746562816, 0.6574276984424987, 0.6458861343798721, 0.6465814841243369, 0.010031090872004045, 0.629114675241792, 0.7225260408034825, 0.09149177124359065, 0.6932440164389304, 0.7334459932693354, 0.6268311474825042, 0.5645676627796399, 0.7712577002189975, 0.7192124432648384, 0.7522414362503547, 0.44497955889268537, 0.5301688513397815, 0.31940959204395336, 0.509133846513214, 0.46812605224765147, 0.4985735180867473, 0.06717330471877925, 0.38591304680230143, 0.23170200672829977, 0.5036988468711248, 0.5263214247282954, 0.5203980155073336, 0.4814749667100552, 0.45863569518254177, 0.47714373175171243, 0.46887731166919333, 0.5129368868009276, 0.4624501905542773, 0.7677754868514023, 0.7479075982939795, 0.41357438188204865, 0.794635675671334, 0.8042153303836302, 0.7975315364580043, 0.8150793823266889, 0.7960397456429135, 0.7774270757275279, 0.094350693867719, 0.10504650611043398, 0.08934025285145542, 0.13424641643319934, 0.09476665795589201, 0.07091037872566552, 0.10539633733490628, 0.103740379015275, 0.0889974674123345, 0.22599614434572934, 0.25155574519565105, 0.703093462358166, 0.3121886392525324, 0.285634593272845, 0.2729220391323993, 0.4107752632939642, 0.22576032846427752, 0.15228711029019326, 0.38454101300633703, 0.47456373770711, 0.4786974826687356, 0.33136242895467216, 0.40235662372618564, 0.3673947422738183, 0.3348613921387089, 0.35596963898824796, 0.47050561666687374, 0.2595085857209436, 0.2487744612935271, 0.3574134179519356, 0.2925855428421247, 0.32140710749079027, 0.35429343230739907, 0.3899713557879475, 0.41324666206670446, 0.4028881507278388, 0.20885703233445552, 0.21210854645164035, 0.1993873387144215, 0.1844062179380459, 0.16215243910464994, 0.18309946337724803, 0.1825303786545539, 0.17968126170450538, 0.17999401761696388, 0.2442422935888594, 0.19817461577632878, 0.2427142494797475, 0.20355274151490033, 0.17939174501310717, 0.19607287252346872, 0.18158398202371517, 0.1825970004682963, 0.2218521230757602, 0.18752962108436855, 0.14639872592175218, 0.16330936728776346, 0.16769099645395058, 0.177879556389675, 0.19554731195974906, 0.8847831915339346, 0.14779467440075822, 0.16373515260843707, 0.8958953594219758, 0.21239295090169585, 0.20660133101742229, 0.20984842099427392, 0.225238451628908, 0.2098318351526477, 0.8910957204750437, 0.16712753541407, 0.19542110779980537, 0.16506981237835916, 0.1925041350188974, 0.17598239172677166, 0.17754544962309904, 0.16733546667311294, 0.17637281766248947, 0.20201587017452227, 0.17651428176584527, 0.20502801027241324, 0.12016214567029915, 0.082040591073955, 0.06534907395729772, 0.07612433078279768, 0.07927297745807049, 0.0736841229226004, 0.11857619911783679, 0.06626122661531642, 0.05963918416278324]}, "mutation_prompt": null}
{"id": "c2c89c1c-91b5-451d-9348-c4243e8d2dfe", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.8 * self.success_rate + 0.2  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Improved the adaptation mechanism by refining the success rate update rule for better convergence.", "configspace": "", "generation": 31, "fitness": 0.4314780628159282, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.28.", "error": "", "parent_id": "884ef130-87e7-402f-85b9-02285c780be1", "metadata": {"aucs": [0.7992521889985171, 0.79705645824509, 0.7916608568737555, 0.5509425486189863, 0.8026289330790102, 0.7864638341958832, 0.7998627328898116, 0.8015731439367505, 0.802223870604472, 0.6531734172200869, 0.646292789254773, 0.7038893858845097, 0.6689490821509396, 0.6725469551884009, 0.6942512907335695, 0.653823877328956, 0.6567585568448105, 0.6930854573401509, 0.14118474182180762, 0.13177192213940359, 0.14816739036479198, 0.0822888464082756, 0.11051891553887816, 0.027100657760731894, 0.09100646069071905, 0.0662929405191981, 0.10434328481726696, 0.11663727637908072, 0.09265845382941074, 0.08893606967709966, 0.08104529446913145, 0.10098892330400067, 0.02730802788068054, 0.10549266885275987, 0.09530626634735395, 0.0849117755667812, 0.9862936706855335, 0.9816968350069125, 0.9600936838065779, 0.9833099205634082, 0.9804892680324375, 0.972978250156974, 0.9810867360021058, 0.9817140456792101, 0.9711991127119467, 0.6082107283760174, 0.5918847936967869, 0.6790878845124, 0.6282494730135264, 0.6230937543868167, 0.623243946833327, 0.5419639915965908, 0.08660001369334136, 0.628014321522224, 0.7985869595591352, 0.809770871213159, 0.7991124477453593, 0.8322986492590879, 0.8411393287663802, 0.8618392074146803, 0.8001582892607406, 0.829474974987433, 0.8303212733398568, 0.1277187770448056, 0.6295267524843393, 0.6622665165832524, 0.6119680147870377, 0.6178704286933739, 0.7115172872452102, 0.6893968674438833, 0.6672022146654994, 0.6607476057245959, 0.5819050125018198, 0.63556627782143, 0.6347830004026608, 0.6198627050180637, 0.6588360309723529, 0.6179935220553673, 0.1293488325981187, 0.6608760698288159, 0.1325327787661017, 0.6467464798321508, 0.6777499325527764, 0.6959077792902546, 0.6641210746562816, 0.6574276984424987, 0.6458861343798721, 0.6465814841243369, 0.010031090872004045, 0.629114675241792, 0.7225260408034825, 0.09149177124359065, 0.6932440164389304, 0.7334459932693354, 0.6268311474825042, 0.5645676627796399, 0.7712577002189975, 0.7192124432648384, 0.7522414362503547, 0.44497955889268537, 0.5301688513397815, 0.31940959204395336, 0.509133846513214, 0.46812605224765147, 0.4985735180867473, 0.06717330471877925, 0.38591304680230143, 0.23170200672829977, 0.5036988468711248, 0.5263214247282954, 0.5203980155073336, 0.4814749667100552, 0.45863569518254177, 0.47714373175171243, 0.46887731166919333, 0.5129368868009276, 0.4624501905542773, 0.7677754868514023, 0.7479075982939795, 0.41357438188204865, 0.794635675671334, 0.8042153303836302, 0.7975315364580043, 0.8150793823266889, 0.7960397456429135, 0.7774270757275279, 0.094350693867719, 0.10504650611043398, 0.08934025285145542, 0.13424641643319934, 0.09476665795589201, 0.07091037872566552, 0.10539633733490628, 0.103740379015275, 0.0889974674123345, 0.22599614434572934, 0.25155574519565105, 0.703093462358166, 0.3121886392525324, 0.285634593272845, 0.2729220391323993, 0.4107752632939642, 0.22576032846427752, 0.15228711029019326, 0.38454101300633703, 0.47456373770711, 0.4786974826687356, 0.33136242895467216, 0.40235662372618564, 0.3673947422738183, 0.3348613921387089, 0.35596963898824796, 0.47050561666687374, 0.2595085857209436, 0.2487744612935271, 0.3574134179519356, 0.2925855428421247, 0.32140710749079027, 0.35429343230739907, 0.3899713557879475, 0.41324666206670446, 0.4028881507278388, 0.20885703233445552, 0.21210854645164035, 0.1993873387144215, 0.1844062179380459, 0.16215243910464994, 0.18309946337724803, 0.1825303786545539, 0.17968126170450538, 0.17999401761696388, 0.2442422935888594, 0.19817461577632878, 0.2427142494797475, 0.20355274151490033, 0.17939174501310717, 0.19607287252346872, 0.18158398202371517, 0.1825970004682963, 0.2218521230757602, 0.18752962108436855, 0.14639872592175218, 0.16330936728776346, 0.16769099645395058, 0.177879556389675, 0.19554731195974906, 0.8847831915339346, 0.14779467440075822, 0.16373515260843707, 0.8958953594219758, 0.21239295090169585, 0.20660133101742229, 0.20984842099427392, 0.225238451628908, 0.2098318351526477, 0.8910957204750437, 0.16712753541407, 0.19542110779980537, 0.16506981237835916, 0.1925041350188974, 0.17598239172677166, 0.17754544962309904, 0.16733546667311294, 0.17637281766248947, 0.20201587017452227, 0.17651428176584527, 0.20502801027241324, 0.12016214567029915, 0.082040591073955, 0.06534907395729772, 0.07612433078279768, 0.07927297745807049, 0.0736841229226004, 0.11857619911783679, 0.06626122661531642, 0.05963918416278324]}, "mutation_prompt": null}
{"id": "36e809b1-bafd-4bc6-8d03-0459a40b846d", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.92  # Adjusted crossover rate\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.9 * self.success_rate + 0.1  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Minor adjustment to increase crossover rate slightly for enhanced diversity.", "configspace": "", "generation": 32, "fitness": 0.42934689903278034, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.29.", "error": "", "parent_id": "884ef130-87e7-402f-85b9-02285c780be1", "metadata": {"aucs": [0.8063118689897109, 0.8051959697425953, 0.786625125601409, 0.7845542264077946, 0.8144646650416041, 0.8063637497023729, 0.8084075843964693, 0.7972028826285211, 0.7960466112809466, 0.6505526583070647, 0.6928835000293553, 0.6603254665269473, 0.6841639130026692, 0.6826128549856098, 0.661985981604591, 0.017805976175692018, 0.6464731725102595, 0.6653417589079225, 0.078735517598845, 0.09568465825982297, 0.09737048383466829, 0.079503858295765, 0.10919343343714882, 0.05997031572316025, 0.11830978964417604, 0.1231649343968173, 0.08771500468263438, 0.094321864746163, 0.11493179452970004, 0.10015278471501954, 0.12795084421149294, 0.10140461328983041, 0.038775541349737264, 0.13539189871157598, 0.10689441042983217, 0.08223026834900482, 0.9862936642790967, 0.9761433454568069, 0.09867430515114106, 0.9831964967787439, 0.9804958784801967, 0.9732625579414315, 0.9804295597930184, 0.981667591843715, 0.9620254259589007, 0.6282564624154732, 0.6543681125009488, 0.47449393188510547, 0.6185632728829011, 0.2741299193155752, 0.5920368801259358, 0.5948849736584492, 0.5586942982025411, 0.608111039979023, 0.8438119362964214, 0.8030548621755211, 0.8467340870527026, 0.8423186778643329, 0.8516563426882436, 0.8069524846931566, 0.3509592079319478, 0.3306848906660611, 0.8454274399965681, 0.12459145263330107, 0.6424604461959791, 0.6568022161771119, 0.7129780090774485, 0.12975645475241804, 0.630679146558375, 0.65164827299688, 0.65213999623262, 0.7271498697071808, 0.7003240716025221, 0.6614046379474856, 0.6715462399168357, 0.5595653320502405, 0.7404963566827161, 0.6764763997320316, 0.662588598410953, 0.627676256500995, 0.12978725863209017, 0.6574681981164935, 0.6364629526038637, 0.6585809109790577, 0.6107589165647106, 0.6368879522570616, 0.6547352964483352, 0.6524137534497679, 0.626012417442595, 0.5440455202510063, 0.7287999467646031, 0.09187888744573391, 0.710801934707124, 0.7772855425694943, 0.7266342159348409, 0.7462903412915063, 0.7564270932933216, 0.6664039983265612, 0.7479901509564637, 0.3672778464857983, 0.26461117627998354, 0.05132472786506137, 0.49628502324989965, 0.5772998320332607, 0.0891075445138898, 0.06552699580511312, 0.35140072929677346, 0.4488319109980905, 0.5372131328553327, 0.4451087095317141, 0.4917264136719005, 0.47969776656561125, 0.5562937481719654, 0.4467659209069317, 0.4732347901871956, 0.4995431841109811, 0.5467520921783512, 0.7634231868573615, 0.7186748697758074, 0.8026363882085068, 0.7447165796108364, 0.7713597068440252, 0.7587006361508427, 0.78753790585871, 0.6793598543532071, 0.7893009254800577, 0.08796371486395238, 0.0645189596131801, 0.10500639857421923, 0.13337464111777098, 0.11372832895233931, 0.07617785050988368, 0.06503607655160648, 0.11523062764554703, 0.1090483033125651, 0.2220429764097852, 0.734455645775394, 0.20350691860892722, 0.6155261972278443, 0.2792649264096895, 0.16960768776997726, 0.13693162766248823, 0.18581994303298632, 0.20523583079153618, 0.37102687744178986, 0.3961426399873219, 0.288174767782318, 0.4943829010748847, 0.3160993186904588, 0.4169659097828329, 0.3865408611883405, 0.4060012972162216, 0.41874891008713955, 0.2102645614023988, 0.32145571870425504, 0.3589076368827898, 0.26831689351041965, 0.20969789996063048, 0.16190805175505518, 0.2719270157758339, 0.3337222024993588, 0.25152241644563256, 0.1790229158744694, 0.18952039184516567, 0.2529838611302151, 0.20001521946057743, 0.19775664308416396, 0.21443887254301242, 0.18937609356775076, 0.21634166099706664, 0.21037179037245268, 0.20432681809280717, 0.18016448263889706, 0.1991530722985011, 0.23825875848941325, 0.21540086468894437, 0.19715337171172176, 0.1783840765463035, 0.21515727740473167, 0.20582950293248958, 0.1879311848657058, 0.14681365460262474, 0.8756920354195291, 0.8789669313956503, 0.17845317822788742, 0.11930729329260281, 0.8889235886385058, 0.1575224852607957, 0.166467826961335, 0.8836965270442, 0.21123993625943605, 0.8618600841657105, 0.1664478487877632, 0.16945904473080464, 0.21085759822454953, 0.8911006719901683, 0.16681989013699694, 0.21358031414344414, 0.16348227727875342, 0.18929285741361868, 0.16864323217212518, 0.20927635736572137, 0.16664450472650716, 0.18640405864354648, 0.1819070421845158, 0.17204060069385774, 0.19464057401916202, 0.0792795054026263, 0.08548987029606925, 0.08942402423312834, 0.08431521119134688, 0.1039719548743191, 0.07684094844797196, 0.09816559217387821, 0.08655848387267562, 0.08146652212914829]}, "mutation_prompt": null}
{"id": "01093138-6997-4852-8c88-21c8a89cc45d", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(0.8 * best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.9 * self.success_rate + 0.1  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Fine-tuned the mutation strategy by adjusting the best individual's contribution to improve convergence speed.", "configspace": "", "generation": 33, "fitness": 0.1349378710047397, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.10.", "error": "", "parent_id": "884ef130-87e7-402f-85b9-02285c780be1", "metadata": {"aucs": [0.2983829772438683, 0.29789359710047625, 0.3654028654973045, 0.19389658304053703, 0.2113702578015596, 0.26231414009008214, 0.28389128676581477, 0.24355414818242704, 0.27775854806989886, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007360936863080814, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06436313602804644, 0.06924015899287428, 0.07575217625725639, 0.08338985979917202, 0.07326324101653137, 0.0674564325581325, 0.07633985724725223, 0.07620836370335071, 0.09997477612652017, 0.08325289902131916, 0.06581547731961235, 0.07095784675203831, 0.0633351814577009, 0.08469360854859531, 0.06266941525250391, 0.06662291336614856, 0.06806491031016815, 0.09367493765366375, 0.08094762228913965, 0.08049694276041641, 0.0692283875943609, 0.10758958265389318, 0.09307291789475769, 0.07777591831089281, 0.1269992158605936, 0.08214765501404131, 0.057065418620794284, 0.16143617126989263, 0.140703856480777, 0.16891053221833086, 0.1613082836887223, 0.14490645149592107, 0.15305714474726573, 0.152412799989478, 0.13340759049449102, 0.14950127779397349, 0.3379205185348414, 0.3135512714607884, 0.32961445125501654, 0.15430879410846687, 0.1670736642447097, 0.12238706071119776, 0.11648740291570825, 0.19931245899769168, 0.16374773044992996, 0.09416870908808017, 0.12872487480850014, 0.09462709699044647, 0.0016971816212231206, 0.10119977087837584, 0.044838882890254506, 0.06051091799333719, 0.059253945784235484, 0.11182134141024014, 0.22398080345317617, 0.21255666449375787, 0.21860010374911276, 0.19265156137803796, 0.22016458296948782, 0.24359441296845374, 0.2455764751260633, 0.24591804325777944, 0.222881563794186, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01707222277079823, 9.999999999998899e-05, 0.028075255512937103, 0.04188461337595595, 0.04569195811679816, 0.05583447657668261, 0.10083551057388063, 0.057837868866831954, 0.08014545190756528, 0.015151614576967898, 0.04228086442421841, 0.028724538711672576, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018905219763395653, 9.999999999998899e-05, 0.01722976999855086, 0.026382359225960883, 0.03267144616780515, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008343230050557926, 0.23007925955462638, 0.31391428153929957, 0.3342361214782382, 0.25014507835252786, 0.26081341376215506, 0.2875999161228626, 0.31842357801320087, 0.2979720858878684, 0.29012154447929794, 0.0611871711080777, 0.07172465832468422, 0.07795325380751417, 0.05487048838383435, 0.07327627398031034, 0.07370052842039254, 0.07770140198072062, 0.07704172504754259, 0.09751459618186453, 0.11097854401353402, 0.15868364117478484, 0.14690866974433758, 0.1371431121972273, 0.12500579853796334, 0.1462006558649559, 0.13249134112844496, 0.12265251138618738, 0.13891694160695245, 0.1981627816330208, 0.2103462718912501, 0.21855933146941908, 0.24478784622274619, 0.25126703419924734, 0.23429557245449828, 0.23563945355607274, 0.20548400410335343, 0.2096947111252352, 0.16519781964526137, 0.12406033598809174, 0.1368690418006372, 0.1934074694590867, 0.18421492782473559, 0.20189029245464596, 0.13143797222476572, 0.1584557982610333, 0.1352807761036382, 0.2000170139002645, 0.1916001147147519, 0.1732021780332138, 0.20942018657067107, 0.21225764229515742, 0.2117320023514273, 0.18678887825996604, 0.18131917281478105, 0.208630799767777, 0.1871693659469944, 0.1709733801500406, 0.1747026037775795, 0.17004983175120525, 0.18036917514200845, 0.17355479417230124, 0.16709096132008994, 0.17781699260482142, 0.18843095329499504, 0.1873811961737658, 0.1839683470629122, 0.1783964820854388, 0.28691086699659796, 0.3210834106865641, 0.16024157244440962, 0.3217222246365119, 0.16515463575139588, 0.14745747109215623, 0.3489528195457259, 0.16553348273984358, 0.28733966231463737, 0.1487378559381627, 0.26388824274892697, 0.16765296345678815, 0.4421082339772361, 0.3452062384704665, 0.1811828710400728, 0.20374232386206526, 0.18407417622343014, 0.1913884798487837, 0.17589084890990525, 0.1761263029964122, 0.1719722933256671, 0.17756683835791298, 0.1734565058827231, 0.1800742968412029, 0.08577862283729332, 0.09437375578843676, 0.0675326498987513, 0.08971366424532334, 0.08774919779829093, 0.10043168993268159, 0.0680388107355493, 0.08853810883235547, 0.08087392698383233]}, "mutation_prompt": null}
{"id": "33124686-0903-4f41-8d81-ea77a2df4e36", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = np.random.choice([idx for idx in range(self.population_size) if idx != i], 3, replace=False)\n                a, b, c = self.population[idxs]  # Changed line: selection of vectors a, b, c\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.9 * self.success_rate + 0.1  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Introduced diversity in mutation strategy by modifying the selection of vectors a, b, c to reduce premature convergence.", "configspace": "", "generation": 34, "fitness": 0.43165837337146196, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.28.", "error": "", "parent_id": "884ef130-87e7-402f-85b9-02285c780be1", "metadata": {"aucs": [0.7934967248430793, 0.8182396380197647, 0.7864171761185668, 0.820636363087007, 0.8210980437793891, 0.8031945567765307, 0.8002358961087774, 0.7877621365618768, 0.8111163406703183, 0.636033904752538, 0.6899305369538569, 0.6521290296690421, 0.6796153930171847, 0.6206730972008412, 0.6504323875353958, 0.5945852983953959, 0.6927260317445716, 0.6743606237201678, 0.0895975605545134, 0.13177816662669517, 0.14872767056206015, 0.08098831635021475, 0.11065510242399212, 0.027097607792865297, 0.09100577694535184, 0.06844664390545152, 0.11255093345505829, 0.11898579649542063, 0.09293337294760329, 0.08893261728789403, 0.08138274331440132, 0.10094908431797378, 0.02790942110571437, 0.10548337591091861, 0.08601158809235843, 0.09075014697177375, 0.9862936649197322, 0.981695799851693, 0.9600935557298524, 0.983309894439261, 0.9804892564267528, 0.9729782536826707, 0.9810867083488279, 0.9817140254956278, 0.9711990443900546, 0.6049806657646146, 0.591493480177113, 0.47717093253097775, 0.6187647090916324, 0.47644057687280517, 0.6252568683881639, 0.5151267107927454, 0.08659317278997769, 0.6311105111721329, 0.8016887206766015, 0.34203865095931074, 0.768608223486352, 0.8512402460237287, 0.8514666009545704, 0.8620841607222179, 0.8017547634105494, 0.8264407746397078, 0.8097725985823251, 0.1277014915553618, 0.6127596846953265, 0.6565576263354524, 0.6237335107553311, 0.5862511342487664, 0.5115128273794287, 0.7021921752595432, 0.6751883126785172, 0.6733936535649492, 0.6060835961893167, 0.6136101663956077, 0.6332759626405973, 0.6330852128233883, 0.6367537964994308, 0.6006216411877083, 0.5957326155522098, 0.12682036676354091, 0.5521828305498231, 0.6651634334618524, 0.6854037420801475, 0.6360327973330698, 0.6659295507610197, 0.6479474766149443, 0.6803579819712102, 0.6765168407547146, 0.010117421523520576, 0.6893628553255325, 0.7623267185157347, 0.6847558721491169, 0.6981362630668153, 0.7401893110078461, 0.6539365816805052, 0.7425037883646791, 0.74423770367184, 0.7157033463586623, 0.7070121869881154, 0.39811153690328416, 0.5053089522268622, 0.33716338765483733, 0.5264291766461038, 0.5338234028559666, 0.5139084426274706, 0.0683076130343988, 0.36946003393420423, 0.30496073177102057, 0.5168246066012063, 0.4451087095317141, 0.49737436498274645, 0.4804422277005338, 0.5077552636678015, 0.5068765856937265, 0.07864161555013383, 0.5149877004836192, 0.46216637598637955, 0.7656191993560203, 0.7818914227925018, 0.41058180386148346, 0.7918416252926299, 0.7835461831827324, 0.7902724499578875, 0.8148599016626809, 0.8046027464457775, 0.786202035178448, 0.09507656790623809, 0.12273199979234672, 0.11005105389628422, 0.10955840745018464, 0.09496411659919846, 0.08153539774104412, 0.10527425975876537, 0.10087522825853179, 0.0887267959242326, 0.16422368029822443, 0.20643186617320275, 0.6859100738629242, 0.264656555541536, 0.233619936091907, 0.3328818715996902, 0.42361055984109197, 0.22546850297803145, 0.2544915131731834, 0.3835810703331848, 0.3919776560582897, 0.4801284303162934, 0.4099330662875804, 0.3432575118526632, 0.42584992884353856, 0.4303900438582823, 0.42392567760579203, 0.32923049457872045, 0.27181823877762357, 0.34385298265367115, 0.24181121003963657, 0.28050403759592524, 0.42706110402969266, 0.2724565156174168, 0.4307151926507088, 0.3180747212223407, 0.37507126037440197, 0.20583605871740562, 0.23515190675025943, 0.209581926046137, 0.197728521206614, 0.21097938207456168, 0.16859695000633623, 0.18707583581807852, 0.1730086240919365, 0.18222126318845044, 0.24425463675026093, 0.19817193751666873, 0.24296140240406106, 0.20483683665834773, 0.17816384925683248, 0.20630579084155665, 0.18143500364556442, 0.17624570874016787, 0.22185086631429674, 0.1875294865568693, 0.14640177869175164, 0.16331099174283537, 0.16769748177189936, 0.17786618354883232, 0.19574361107317595, 0.8759793679370917, 0.14784312929282784, 0.16373825477100834, 0.894740836546805, 0.21239102500976903, 0.20659777770505838, 0.20857006157893054, 0.22523910794467616, 0.20983487097636466, 0.8738427621378517, 0.16712640883238983, 0.19542115165314922, 0.1717099839618046, 0.19313123996834525, 0.174111962975097, 0.1939009188531584, 0.16826332175941605, 0.21251965083629543, 0.1758487667160643, 0.2045497440610532, 0.17727562722615786, 0.0962353364681261, 0.11018740179847097, 0.07961664851692873, 0.09119248006223657, 0.10287119093608232, 0.07090468108581316, 0.12789898803241628, 0.09273613186148177, 0.0733260091152752]}, "mutation_prompt": null}
{"id": "40290e14-2a46-4efd-a6de-f586eea7dfbc", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = np.std(np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))) / 2\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.9 * self.success_rate + 0.1  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Improved the adaptation mechanism by using a dynamic scaling factor initialization based on current population diversity.", "configspace": "", "generation": 35, "fitness": 0.2835253678924489, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.28.", "error": "", "parent_id": "884ef130-87e7-402f-85b9-02285c780be1", "metadata": {"aucs": [0.8089532655391027, 0.7932404563590559, 0.7623906119729622, 0.8310395461649974, 0.7935596517329516, 0.1826203259907898, 0.797614199923405, 0.17397300731681808, 0.18126270038639802, 9.999999999998899e-05, 9.999999999998899e-05, 0.5923346142765022, 9.999999999998899e-05, 0.652435148722253, 9.999999999998899e-05, 0.018075380343269498, 9.999999999998899e-05, 0.6958786649945039, 0.1675831420115208, 0.07001091341494903, 0.09068019958715179, 0.08463337091018164, 0.13942676197786863, 0.08426537227448438, 0.08304318968928204, 0.11154467790828426, 0.08634066190606704, 0.06284539938856448, 0.08934921647042626, 0.06888802302593844, 0.1250320401960031, 0.04554334993884146, 0.10111360969485217, 0.134136580085346, 0.11711522202955926, 0.1321137897932969, 0.9901821653828968, 0.9909739946551805, 0.9902371219007315, 0.9894148422185748, 0.9775124606562579, 0.9897027989401577, 0.9892057725099813, 0.9868336504183642, 0.992819415623215, 0.6245226460530722, 0.1137130965106673, 0.4667134737055948, 0.14906820185112823, 9.999999999998899e-05, 0.6243916739714672, 0.5297694391025193, 0.08802422476925897, 0.0514496875731324, 0.060216583111187494, 0.8118988476145779, 0.33361034648004184, 0.20152829495508673, 0.3438949794860652, 0.7680883455000895, 0.8586911897562999, 0.8224600583763576, 0.1371030473510524, 0.6417649609283833, 9.999999999998899e-05, 0.665605728377969, 0.1040131723811617, 0.10446227226728022, 0.10541935517242196, 0.5371496131925988, 0.6512327165266736, 0.565734951269413, 0.120344342973564, 0.009959795787217951, 9.999999999998899e-05, 0.13059271065452982, 0.1271227734213748, 0.6413389262612597, 0.18941188334209924, 0.6670148687625608, 0.6043981328187183, 0.6093869848676363, 0.07094111614868548, 0.06811743697941253, 9.999999999998899e-05, 9.999999999998899e-05, 0.04484422381499975, 9.999999999998899e-05, 0.633724136805815, 0.6571103674490741, 0.729733574372962, 0.7030512400882609, 0.07470692456164107, 0.6783514998370748, 0.10559134764492795, 0.02231202245628905, 0.0493912996730258, 0.12315845120524371, 0.05005967803512956, 9.999999999998899e-05, 0.04662922521402579, 9.999999999998899e-05, 0.2363659058149501, 0.07367253149538233, 0.52089390555451, 0.2169391682043117, 0.2628207677613056, 9.999999999998899e-05, 0.01103329726809732, 0.011369604687551549, 0.45976144904205596, 0.5432052839884985, 9.999999999998899e-05, 0.39894611282410486, 0.04867952689445432, 0.5242521831747271, 9.999999999998899e-05, 0.7619215414055367, 0.7406178145977174, 0.755506809009931, 0.20651497287617337, 0.2079452847142066, 0.7791466387915565, 0.7578017209597875, 0.7938426431360582, 0.7596834647587558, 0.05436701882849715, 0.06999560246372416, 0.1180660874402556, 0.09374888793389036, 0.053128342291352104, 0.08372330474482914, 0.06568779036372174, 0.0960096779258538, 0.09732881473939592, 0.1862126435273289, 0.21889721115414418, 0.14533033662662043, 0.15424980399282617, 0.09815925513217993, 0.23745761205331306, 0.16334761854417812, 0.14626412360749386, 0.09837848803214344, 0.2502887089489706, 0.30768233473080575, 0.2469301370152741, 0.18797182978279114, 0.30775794163798664, 0.19011221586360982, 0.5167490511722077, 0.44215267672390024, 0.26290714759560885, 0.24006264324840587, 0.4180524855703983, 0.2429332479088646, 0.4155720722230185, 0.11804398056947829, 0.3492348322663219, 0.09487011234000786, 0.268284803390221, 0.05312772610584271, 0.24128297520152742, 0.1891874060550115, 0.20192718174003665, 0.18568608048924973, 0.21781419544580105, 0.19646782666946794, 0.17454669483392204, 0.18414485581970297, 0.19914483335418576, 0.18927467638478357, 0.24244114261542382, 0.17878882393132955, 0.1967055329024795, 0.19909211605043886, 0.17113790671104112, 0.19758939300871625, 0.6735645490021304, 0.2163687696933171, 0.15329462633974766, 0.1401525392507581, 0.10727752415207725, 0.8343124296633804, 0.16443854158273352, 0.17440515209671825, 0.1401996042108905, 0.12927658973873968, 0.18716543032728472, 0.1611922562552378, 0.16051842593105903, 0.15386313547777586, 0.20618503978553226, 0.09704238763548778, 0.20647645637290712, 0.10905147550333327, 0.12920703921706267, 0.09282877081406515, 0.1593494938747575, 0.1632363197778275, 0.15777876659673296, 0.1597971844848748, 0.1536232885363885, 0.17429147153717206, 0.20146688264727486, 0.16395408512651521, 0.18362901821239308, 0.058040759668774755, 0.06572540862646514, 0.07518371838053539, 0.10060797228595586, 0.061925696038327094, 0.09032685832581011, 0.06066521326890029, 0.08264912249730771, 0.06982344137444763]}, "mutation_prompt": null}
{"id": "2e86dbc4-7245-42cf-a4e2-a88ca5adae17", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.9 * self.success_rate + 0.1  # Increment success rate\n\n                if eval_count % (self.population_size * 3) == 0:  # Adjusted adaptation frequency\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 3) == 0 and self.population_size > 5 * self.dim:  # Adjusted reduction frequency\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Enhanced AdaptiveNeighborhoodDE by fine-tuning population reduction and parameter adaptation frequency.", "configspace": "", "generation": 36, "fitness": 0.4149838880167963, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.29.", "error": "", "parent_id": "884ef130-87e7-402f-85b9-02285c780be1", "metadata": {"aucs": [0.8320035319339056, 0.8222878676710426, 0.7916707355979068, 0.8344867386825221, 0.8290728730480986, 0.7834357938862762, 0.8135391437490044, 0.8163786983517406, 0.8132246394106183, 9.999999999998899e-05, 0.6522826988882837, 0.659131993551453, 0.6893538497008369, 0.048048709298422865, 9.999999999998899e-05, 0.6937350866804721, 0.6572260646399536, 0.6397471617469439, 0.24196764286501893, 0.10099923269451372, 0.09777316246720291, 0.08075783449369212, 0.08528797763695728, 0.08727464882554781, 0.10588572164167886, 0.08716602570207066, 0.1104503833453051, 0.11489599804885531, 0.11462084566089348, 0.11320528898087556, 0.08216050275178788, 0.10516973345137137, 0.09189880155982755, 0.10680061099812188, 0.10686692936509412, 0.12607507883187685, 0.9843398400744928, 0.9766857009774523, 0.946384850876155, 0.9735154879545587, 0.9820051640597626, 0.9763188701580163, 0.9719312910701414, 0.9825017558732938, 0.0984657818322957, 0.46623326577783186, 0.6197477481896698, 0.27943107148543633, 0.595051834772506, 0.37553721668958473, 0.534558054682901, 0.5909339146490438, 9.999999999998899e-05, 0.6443875288322373, 0.8457248528468897, 0.8225390074207087, 0.3684834031144052, 0.9045064740247644, 0.8324542491750787, 0.19334827417802414, 0.8178815029712645, 0.8719485408256907, 0.8345269296147633, 0.1271394036724789, 0.6551015375710929, 0.622538949304154, 0.7022267196915254, 0.6523744225593047, 0.6715664691604621, 0.6843080585304173, 0.5885362100926947, 0.7016247948603356, 0.7106863017012157, 0.13066260274903618, 0.6815493053448742, 0.6947747697631711, 0.13070781538294163, 0.7184576167541116, 0.7192646196653052, 0.673067077513738, 0.6658152293572559, 0.6119274728213411, 0.07013685416749305, 0.6351914931235765, 0.667791986215224, 0.6728707926753987, 0.6886883672339827, 0.6803825891419595, 0.6560051405584008, 0.6787869365033244, 0.7509213039338931, 0.7049882075619518, 0.7205408038519042, 0.7725756453415216, 0.6824454049925665, 0.69372280607991, 0.7842117822246428, 0.6940594543878383, 0.4737256512391662, 0.4248133654915768, 0.4619874675601615, 0.16958234683225204, 0.07533610008615088, 0.56471575396968, 0.08542224838682011, 0.06742327373521617, 0.3196323726068313, 0.4192010065765359, 0.48925282219365385, 0.5360240083293957, 0.4828055929864621, 0.47735062951960106, 0.45592730227329625, 0.5470424333252586, 0.07868377026960915, 0.51600310448829, 0.08302190618582173, 0.777772130435407, 0.7710770723456942, 0.7913202131956615, 0.7560607695428824, 0.7807544112917127, 0.7917952540537113, 0.7802164664371831, 0.7872804249249664, 0.7657601089266751, 0.13186884882653926, 0.06189220568549714, 0.1131634507630277, 0.10213042911647097, 0.10383968161236157, 0.07953395944860076, 0.08946231584039, 0.11320854051646534, 0.0975918847429681, 0.26156199665420876, 0.6424117673320997, 0.174435546355859, 0.19609675391764203, 0.24124855700989511, 0.6486824615670581, 0.11195707083252715, 0.1772697564002539, 0.1702723884841193, 0.41781271301620726, 0.47582151167875897, 0.4006098521220044, 0.31117107491259977, 0.42353018721846825, 0.34629052747247047, 0.4853982341869014, 0.3353079450400476, 0.3201322530730535, 0.23632077507958416, 0.2627702671195211, 0.26420233881538413, 0.3247109406683303, 0.46024625813098596, 0.219816057588886, 0.23328557795819083, 0.3181052575117945, 0.29419472976871497, 0.21270910534594856, 0.16373978484411145, 0.22499815629928266, 0.22916121242211807, 0.17666150492461496, 0.2087695578115919, 0.2306462465047282, 0.219512241659367, 0.1640749598736424, 0.2206126764797347, 0.20354157457401012, 0.19213300708144265, 0.2050710841929516, 0.20178337224059517, 0.2367100266688309, 0.18706814288404716, 0.219388012839987, 0.21517145633193235, 0.18790199386487316, 0.165161287536586, 0.10692578764307836, 0.16870308474165252, 0.17766904161843267, 0.11673692928147172, 0.8905832041793319, 0.1474673302538536, 0.1642586978206213, 0.8973961647480435, 0.21071466068225986, 0.8819273929838881, 0.15558389352268553, 0.8944331769734892, 0.21025829362579285, 0.8960691064459267, 0.1657069526678624, 0.19915533319417555, 0.18931968397803534, 0.18831541423856035, 0.20211883306922507, 0.18907529810929347, 0.18685669538766492, 0.1715086836704759, 0.20265268305423745, 0.1678210822685916, 0.1931070901935048, 0.07179378462380259, 0.09583494090335976, 0.06935979534818504, 0.07092499486787252, 0.07442816736928781, 0.08690324555961038, 0.07107669405771155, 0.08179561376851474, 0.0786069699453481]}, "mutation_prompt": null}
{"id": "1c1e1d8f-c389-44b9-b67e-69e58205c0e4", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + self.scaling_factor * (b - c), self.lower_bound, self.upper_bound)  # Changed line\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.9 * self.success_rate + 0.1  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Improved the mutation strategy by using a weighted difference vector to enhance exploration.", "configspace": "", "generation": 37, "fitness": 0.2644600777428239, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.19.", "error": "", "parent_id": "884ef130-87e7-402f-85b9-02285c780be1", "metadata": {"aucs": [0.5010660171114503, 0.5093761533970524, 0.5259902676325063, 0.5398730894390479, 0.5625720932888163, 0.5249223400122733, 0.5610176807502312, 0.5836258564647859, 0.5475141594314328, 0.3013434757187601, 0.28520183114343267, 0.29838296904027006, 0.32411099277891176, 0.30702568901206384, 0.3393661041801682, 0.3198527160041501, 0.2904296669258245, 0.3276307558482746, 0.09301287758587173, 0.08702551236563172, 0.09466975333117589, 0.08051807537714428, 0.08492046083286242, 0.08585592308713363, 0.08862107899676097, 0.09569013251922842, 0.08528052266049468, 0.07655882417936277, 0.0748341316671276, 0.06828393969940716, 0.07570117277007449, 0.06627569009771883, 0.09709817219606631, 0.07513061266410337, 0.07601767284556105, 0.0702887286884103, 0.8658470819015783, 0.9865579012192526, 0.6102548409106552, 0.8971569828943786, 0.6749714751631967, 0.8998380283604284, 0.8044698788441116, 0.8559348804463041, 0.7637065706013977, 0.27438085704659676, 0.264579791227447, 0.057654714697758735, 0.2755438450653661, 0.27828746179408725, 0.2722119438164585, 0.26655395610901955, 0.2988360345814075, 0.28462522779088706, 0.5163807731382779, 0.5316595667698953, 0.4307187128056592, 0.5418054236233105, 0.6402880373154127, 0.5582625952029674, 0.6057935303480391, 0.5663128093193359, 0.5072212481905525, 0.20953896155750185, 0.1957290700411628, 0.17472496557502104, 0.2125948945784073, 0.19692404368567173, 0.23762139932783843, 0.20721478404020344, 0.23731277881026835, 0.21293314866631496, 0.2600705266363349, 0.1570134169714973, 0.14799171100319364, 0.2280656897112605, 0.2063463979659541, 0.24517389431180336, 0.2034565372413022, 0.17605985345479835, 0.1995907141668114, 0.19711169204261114, 0.2271644817510422, 0.24338233223337669, 0.24999433099539103, 0.2407538458615499, 0.23874628906508755, 0.2382092162124012, 0.23583270111165877, 0.19336507970813654, 0.3909421170164097, 0.37904772868104974, 0.3726960830755752, 0.3700973504240035, 0.36567273849927573, 0.357243681985582, 0.35378992835899037, 0.36193843147464466, 0.3859392085180009, 0.06707369720903278, 0.06603771749090925, 0.06358317364070243, 0.09879414678436882, 0.07706083433519162, 0.07925009156824292, 0.08399825063165611, 0.05044959293293594, 0.05232834187466273, 0.1968997359356247, 0.17647453457251283, 0.2109855395268554, 0.17639163617690934, 0.18500624335609572, 0.19980369881517712, 0.20284043237378824, 0.1957198160557575, 0.19390884446865952, 0.45231336267762134, 0.4437671900492802, 0.4736346935412419, 0.494183530774593, 0.4898769943903073, 0.46958393273331356, 0.46510667885836543, 0.4698247917993299, 0.48244069220931474, 0.08173925350511979, 0.09345715199321947, 0.08626861227160987, 0.08972611865500835, 0.08510102881350501, 0.09827995183342753, 0.09256495077220639, 0.08870865252019033, 0.09029807209041263, 0.22553561578905545, 0.20167744885427563, 0.1765775188742046, 0.17459533552022166, 0.228704994088876, 0.21156327509354067, 0.19593192091274336, 0.15116290088171103, 0.19222618662857727, 0.2712144998381808, 0.24069935736385661, 0.26367432738102026, 0.2505906142894321, 0.24484531035573953, 0.23774626525663445, 0.2648542643470534, 0.2725383249188529, 0.25017667275068267, 0.2120753292697637, 0.20149505608843488, 0.20528265912177335, 0.19777751257203702, 0.20289452234116812, 0.20368239673964927, 0.19241115153205723, 0.20827710459109294, 0.23100899860097823, 0.18776385391786465, 0.16560132572615494, 0.19611140763070334, 0.18417722823622673, 0.18983261433541387, 0.17360135075232608, 0.17216535425346646, 0.17673221912605164, 0.16677850510784598, 0.16639359433583778, 0.1794837920785387, 0.17057365474359376, 0.1610416812282205, 0.1815090011124163, 0.18338000784419217, 0.17668978292051474, 0.17628873575736148, 0.17084516507829872, 0.6430375746499578, 0.17568101351329823, 0.16689476223651678, 0.626538554307649, 0.1892954747383424, 0.17888731551908366, 0.17635382255796117, 0.5959756124918894, 0.19225984842308563, 0.19199435941391352, 0.18926001305912132, 0.6489829004190419, 0.49554296772849626, 0.31212491594977987, 0.19355350613103395, 0.2060196545985351, 0.2056365675952776, 0.20054591229529584, 0.1865280256232832, 0.18783039728201056, 0.17886787578308627, 0.17663270716115753, 0.19338370938271754, 0.20979158373827123, 0.17589107790499658, 0.1740852425360363, 0.16341239425338194, 0.07341669286880492, 0.06944640716172834, 0.0754835440974615, 0.0681769852348536, 0.06934332275822619, 0.061527348482237176, 0.06886391742484299, 0.05971176834934633, 0.06549885766794583]}, "mutation_prompt": null}
{"id": "546c118f-4c1e-4cf7-a00f-b3c607e08026", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.9 * self.success_rate + 0.1  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0:\n                new_size = int(max(5 * self.dim, self.population_size * (0.9 + 0.1 * self.success_rate)))  # Change made here\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Introduced dynamic adjustment of the population size based on success rate to improve adaptability.", "configspace": "", "generation": 38, "fitness": 0.42797147014337705, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.28.", "error": "", "parent_id": "884ef130-87e7-402f-85b9-02285c780be1", "metadata": {"aucs": [0.8021291922587762, 0.796333515683398, 0.7563896148070877, 0.7825541613142896, 0.801839185883131, 0.7909435247385042, 0.7694633237061291, 0.7942638411515208, 0.7826604778011643, 0.6381437373725758, 0.040021596405670046, 0.6468291161553738, 0.6331147955256522, 0.6742878777681929, 0.6053329574859927, 0.6455131290350269, 0.6534792007353394, 0.6242482525660109, 0.10691051538431406, 0.13226169775069063, 0.08149410978028393, 0.08656273329848407, 0.1362344657254274, 0.026958251383203624, 0.12631928424375205, 0.10507889462428721, 0.10396021886251072, 0.09944793592549428, 0.10510525823791772, 0.08740754240315252, 0.09844518937446334, 0.09237049420825894, 0.09682523568382584, 0.1269390702460369, 0.10423788497074571, 0.08041898411653348, 0.9862936649197322, 0.981695799851693, 0.9537341683333097, 0.983309894439261, 0.9804892564267528, 0.9758031477182085, 0.9810867083488279, 0.9817140254956278, 0.9747858014693327, 0.4951207167589061, 0.5416714667366653, 0.5247301906515944, 0.46811162131975925, 0.5891677890207825, 0.5587451019489711, 0.5800592476289135, 0.12231256059913775, 0.5868696535639935, 0.8102500574121374, 0.8148093021671324, 0.7658649467592041, 0.7894939771050865, 0.8114461088389952, 0.8109628623210291, 0.8057692330707642, 0.835942855970463, 0.8299575736540634, 0.614847349423727, 0.6443523634040902, 0.6317716308919126, 0.6517147517310153, 0.12689547839939386, 0.6281903167019283, 0.687945310125931, 0.6468254804658277, 0.6541022499421384, 0.12710355147100438, 0.5280085601479622, 0.618521076592491, 0.6386993112622981, 0.5708715750419613, 0.5912299425545353, 0.7028965466651258, 0.6222438195599185, 0.5287923415997065, 0.5914427727333864, 0.6142733708583997, 0.6437133726620227, 0.5716905004707848, 0.6188625521362906, 0.596982290727174, 0.6083817139240485, 0.5841669021332496, 0.5828116082694672, 0.6696926406092772, 0.6330503418047054, 0.6762747349721144, 0.6656285043128393, 0.01797329394977809, 0.7066270901303533, 0.7412385455261368, 0.6988032840615783, 0.6923518249624157, 0.4137092760915069, 0.35196860191256896, 0.2687554010678773, 0.4000208606547986, 0.06722919728893262, 0.27433386416930605, 0.06608308986500355, 0.29683932041215755, 0.3918682350582674, 0.430980763691021, 0.42322289155020154, 0.39515365234440203, 0.4229300125948773, 0.4607124249640536, 0.46184314709415764, 0.3898599943646003, 0.04852453024106107, 0.49247134159928696, 0.7667349886268882, 0.7586754720283694, 0.7775490958388533, 0.7726994949416891, 0.7549185733033049, 0.7648550846934014, 0.7764185538195664, 0.740225811691084, 0.7666588728481896, 0.10834845087334011, 0.1280182649443352, 0.14424639407699413, 0.12627994904248718, 0.16710914990154602, 0.0898749880796853, 0.15794968173274138, 0.09602655096873913, 0.10420798187421865, 0.2272236684781782, 0.6736556128446098, 0.3683568366347162, 0.3054232416103966, 0.23608668422230672, 0.4509618173620169, 0.2683850117322597, 0.17542446994304717, 0.22089284593444958, 0.4553692462689837, 0.3561837011813881, 0.4990613806237043, 0.41830163767885975, 0.3326835246095081, 0.27094801764303855, 0.4045014398746579, 0.2966490197519428, 0.4481026046218778, 0.2728492405006814, 0.26619710280470843, 0.20807413514861706, 0.45605102612027015, 0.37865427861200884, 0.39837188556300285, 0.3890571154300396, 0.15996227550668407, 0.3406253286548029, 0.18022649919426548, 0.1986112237877108, 0.19123989388479523, 0.23035312955520226, 0.16286468296144252, 0.19597370575499706, 0.1980399688477129, 0.15372251279994253, 0.17349301496161118, 0.22159871411888066, 0.20601771133325242, 0.18560473047210624, 0.2213909375931128, 0.21601348338190918, 0.21607637045772576, 0.18024749061122658, 0.23707303081590692, 0.22319400764386466, 0.18671051146436835, 0.1518608560367557, 0.16534869507984218, 0.8625748623647993, 0.17697537252078677, 0.19631356369604902, 0.8842755192141771, 0.14725413022412848, 0.1634324108999986, 0.8760971134066088, 0.2114568273485684, 0.8309531133973962, 0.20906801411165765, 0.8349270467129797, 0.20900104879484738, 0.8939729568016914, 0.1673710060793826, 0.1992206234123891, 0.18489661398852064, 0.2027022662371909, 0.18753757626268708, 0.1743722012961162, 0.1952723795198924, 0.17168956937962798, 0.19795046200926403, 0.20398834433681523, 0.17378714744432378, 0.11796451345849068, 0.08306442658764157, 0.08554082077594283, 0.09388711844595199, 0.07817964305249825, 0.06890854025856574, 0.06689648562574368, 0.08808297441711965, 0.06950457515613928]}, "mutation_prompt": null}
{"id": "29977d31-3f38-4ca1-bac9-a1bae931d8cf", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(20 * dim, 200)  # Increased initial size for better exploration\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.9 * self.success_rate + 0.1  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Introduced a dynamic adjustment to the initial population size to enhance early-stage exploration.", "configspace": "", "generation": 39, "fitness": 0.30473312918811535, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.22.", "error": "", "parent_id": "884ef130-87e7-402f-85b9-02285c780be1", "metadata": {"aucs": [0.5761105643884702, 0.6133862174616724, 0.5733179003598994, 0.6048033478585138, 0.6183640670406716, 0.6146312975608108, 0.6132049639542474, 0.6259000551150721, 0.5801026883174566, 0.3209905618295341, 0.3319326425968374, 0.2872627391660564, 0.321050313948544, 0.33388980426707837, 0.2524406115977993, 0.31857902101671487, 0.32769155823197293, 0.04582039964503726, 0.0998204527697153, 0.11134209249552329, 0.10252093222704373, 0.10332114318871877, 0.10784601676255356, 0.10424773107644192, 0.13667366762915412, 0.11601811465607459, 0.09872295859318037, 0.08923859709022486, 0.1114719537473724, 0.09691082195634959, 0.1056552363993245, 0.0910054245336529, 0.11313582664117872, 0.10120190037209631, 0.10637767210733107, 0.1010866312521872, 0.9789358668110927, 0.9775275682698982, 0.9672861677259128, 0.9732781189184199, 0.9636312442907979, 0.9696595276235613, 0.978881566117049, 0.9757008454787172, 0.9685547810922346, 0.3328998844652906, 0.3137097712785881, 0.28742764874167515, 0.30367179927269095, 0.3167541350569071, 0.30227226202394797, 0.2983901901374658, 0.33964826648376234, 0.2697230369627497, 0.6683720248162337, 0.6217721866732976, 0.6117552517789513, 0.6314997628783787, 0.6666938669026972, 0.7221681649842497, 0.5765598144233277, 0.5866318197217322, 0.5951632485612166, 0.3323655510774369, 0.31061801153653024, 0.3420378512839165, 0.3446041919986761, 0.2784846961413955, 0.3238385147773143, 0.31088044109786295, 0.1900154815903281, 0.33292717813831973, 0.12542929510883438, 0.12100844181432058, 0.3085906931169645, 0.3759358897394838, 0.31984060976375617, 0.35633599374596414, 0.3945407713486324, 0.30422614115609026, 0.3199875779210932, 0.28182266111065146, 0.06259724171587044, 0.2898093014388653, 0.24378820680072988, 0.2745112784750269, 0.2875785929651672, 0.2975919878285759, 0.2706766907532073, 0.27757112151083285, 0.40618539427103273, 0.4196831200283917, 0.41799819869588106, 0.3691092435231055, 0.4188399143026873, 0.42241404473617017, 0.42718328782897563, 0.42490407771904737, 0.4227580463381696, 0.08031560851588526, 0.07145004383830966, 0.025448974798660817, 0.14960715072227815, 0.1094817901552857, 0.047937156828430694, 0.11259994534034434, 0.0814364205726753, 0.078749391840922, 0.19780795135842133, 0.2144798865106714, 0.23789920989850954, 0.2125398979935108, 0.21162637549927177, 0.2229161537016302, 0.22868153817587678, 0.04597488546598849, 0.24742919441626687, 0.5491657590722192, 0.5596960298996532, 0.5597845872570492, 0.5545061036257035, 0.5520050157042917, 0.5389355229176682, 0.5016816187750199, 0.5324245182546216, 0.5161826405596289, 0.095724654568903, 0.11891463498485155, 0.09096236256445522, 0.12201916631615917, 0.09760078798740834, 0.11475932305780812, 0.1103622832931529, 0.09587018593532481, 0.09469102343474423, 0.31629687909108395, 0.2956805280973447, 0.19674121654432353, 0.2295377257714627, 0.18512163481344246, 0.1639956940697357, 0.3097318442439917, 0.23132893878794336, 0.1661245843392526, 0.29152123862466983, 0.3085908702263678, 0.2811232813279264, 0.30358620679634307, 0.30395753147306837, 0.2967639036745864, 0.30775528242967076, 0.3161422506262984, 0.2949028217845432, 0.2693075523261903, 0.2260852107915573, 0.21879471000065254, 0.25127097267939213, 0.2363469024662067, 0.24854439608284806, 0.23354312980815628, 0.24573195703555195, 0.2268306434180749, 0.18378100116617557, 0.19737706438429137, 0.18854668848374345, 0.20073871367009133, 0.19655877418981016, 0.1925421514004484, 0.1858115574379562, 0.1947893058085406, 0.21370502687834037, 0.29935230758604303, 0.21716565218797956, 0.19692317791570746, 0.18808537136807146, 0.22484560258809883, 0.211020513924285, 0.22823083903963537, 0.1780647135483867, 0.21644935066383364, 0.20537645097041402, 0.1349144689273144, 0.8265251477142812, 0.7478527337741558, 0.17731103530975345, 0.12279541275495143, 0.20343471319510054, 0.1256836538679985, 0.18995830490828658, 0.7619931903419599, 0.11282076947716235, 0.758906980345608, 0.20778593191153882, 0.7419975855510967, 0.20942119852173635, 0.1271686974403443, 0.167399971134927, 0.10414064943677437, 0.1901074513923129, 0.17234898163752477, 0.18796394256768967, 0.187814109691826, 0.19121060095285003, 0.1796518406697647, 0.2170362312247136, 0.2245185554363759, 0.18795371867398702, 0.06980456859840756, 0.05957557637253352, 0.06840289513140829, 0.0744547702000884, 0.07130984324673628, 0.06910824225432766, 0.08413590412739336, 0.06522751636165125, 0.08389625635152587]}, "mutation_prompt": null}
{"id": "b0e486a8-7b22-42ac-8d9b-b2df6e17e070", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                # Changed mutant strategy: blend best_individual with a random population vector\n                random_vector = self.population[np.random.choice(idxs)]\n                mutant = np.clip((best_individual + random_vector) / 2 + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.9 * self.success_rate + 0.1  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Improved the mutation strategy by dynamically balancing between the best individual and a random vector to enhance exploration.", "configspace": "", "generation": 40, "fitness": 0.4123753595214481, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.26.", "error": "", "parent_id": "884ef130-87e7-402f-85b9-02285c780be1", "metadata": {"aucs": [0.752233255458882, 0.7581637034477271, 0.7615160246269588, 0.755773050190742, 0.7774780762030028, 0.7657553703359694, 0.7595302574802023, 0.7927764143137889, 0.7607509954604419, 0.5943368949376071, 0.598427231408932, 0.5961345511502736, 0.6179621391447927, 0.5947608246888569, 0.6185584311913224, 0.6300534760053527, 0.5934890631598984, 0.6123603535512863, 0.10092554723634262, 0.08572790475694514, 0.09805513242706942, 0.08455341789519988, 0.09669752116272123, 0.0955053382254375, 0.09831778433632665, 0.08878591293211358, 0.08363139001413766, 0.09255768550403554, 0.09104349331410555, 0.09552664933508881, 0.07235763344093016, 0.0764605687313955, 0.07900552537771821, 0.11655220145090295, 0.07708308195264435, 0.07959523227250642, 0.9627433849824063, 0.9781313015598905, 0.9598367271369113, 0.9810548725905276, 0.9611369818672342, 0.9003322441020992, 0.8684365518924094, 0.9065911323002771, 0.9199776236361107, 0.5018311874913173, 0.5140030209113107, 0.517703735245364, 0.5022112385351212, 0.5196906228532124, 0.48092457247710685, 0.5392739414994799, 0.5179458570336453, 0.499201926247526, 0.8047172423050944, 0.7899945357815824, 0.7905256474027949, 0.7440786751133545, 0.7742493059725328, 0.7846411524958034, 0.7793230171203384, 0.8017030064432695, 0.8111681682821476, 0.5760557867425578, 0.465945340395462, 0.45358067732217067, 0.5607663322594418, 0.5604894184920203, 0.5752305125828217, 0.5289938144337039, 0.5982017189687658, 0.5831453152788812, 0.20396371372077993, 0.5638807055291841, 0.5937416868077086, 0.5960192505366989, 0.48950059694167836, 0.5126310898496743, 0.46297098684546256, 0.5622000788191277, 0.5986289838289328, 0.5641801904321471, 0.567877562423595, 0.5116486330185989, 0.5368232520353217, 0.5543258146033332, 0.5473015083174411, 0.601932845952638, 0.5820402481149733, 0.6262014248808244, 0.6672323671384661, 0.6614174568764055, 0.6536593763362403, 0.6786158623758611, 0.6527495590995696, 0.6622819518760935, 0.6788662115373604, 0.6475300964926965, 0.668873229137741, 0.30752078098714664, 0.28987611342404584, 0.24868670877155363, 0.41213774066319997, 0.3869627624782014, 0.38033920020587375, 0.29608513845142925, 0.3344133565531904, 0.21107730453786233, 0.37845982412713164, 0.42970442241917595, 0.3559962303487394, 0.4055307341271581, 0.38848227093535437, 0.38282996574722783, 0.41819560529213573, 0.4145054867562171, 0.41334385678885177, 0.723056430712518, 0.7012048866828693, 0.7336746166771985, 0.7362247186464079, 0.7220223243391578, 0.7283594649914096, 0.7250580011809917, 0.7246328064802336, 0.737687740429537, 0.09448181681741885, 0.09319951675614246, 0.08132318600301947, 0.09305344929870185, 0.08684789271331828, 0.11071113358472306, 0.09324651055737831, 0.08228027917524927, 0.08438850858828628, 0.1679272781683816, 0.1687997333000325, 0.224777611884714, 0.3503245629420918, 0.12622854293420782, 0.12826218199772998, 0.12656360957729396, 0.21530629951138136, 0.1891180693290343, 0.41170357975995553, 0.3876841684923553, 0.3839471005645656, 0.3704803050912182, 0.3771387361489571, 0.3994735830388991, 0.3749015788050527, 0.3681763773946074, 0.4018148126164317, 0.33742339705866997, 0.34175001237450475, 0.3282657517594596, 0.3201667626363899, 0.3252265202081559, 0.31964809174154196, 0.31637954608130536, 0.3314738623711543, 0.3015265411890997, 0.18402326082240106, 0.17644644262171372, 0.19840658424885738, 0.18810200024495805, 0.1829744080566672, 0.241479634820843, 0.19520582706891787, 0.1838079633364349, 0.17950979099962172, 0.23069034410701272, 0.1858291785500833, 0.22087770016123365, 0.17822419290744584, 0.17185357794376122, 0.17367523623383807, 0.2305178444746777, 0.20170079396018736, 0.21632030641233568, 0.7878086623787472, 0.1835739489767857, 0.18668409766162308, 0.8406379821039645, 0.1654747514961027, 0.18879108043815185, 0.5351559796767096, 0.7470852128162615, 0.16138986306648495, 0.21259275576248315, 0.2121815734627177, 0.7821447552695496, 0.8386959998981905, 0.20743768914850857, 0.1525238911711735, 0.15531049999122037, 0.12700238748152426, 0.1621990898535547, 0.17672765643077948, 0.17172377800481242, 0.1987316435917713, 0.19993733817587223, 0.1804835485820948, 0.18014762785849814, 0.19855560894387458, 0.18371094001048915, 0.18153681548021539, 0.08245468985412541, 0.06957407046941555, 0.08520678277904448, 0.08523047605908718, 0.08370991607902545, 0.07271441522612299, 0.0751832008544252, 0.07045717404294538, 0.07719385693429182]}, "mutation_prompt": null}
{"id": "d2a70a0a-ac6c-40cb-b5d8-aeb74d24fab4", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.7  # Adjusted for better exploration\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + self.scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.9 * self.success_rate + 0.1\n\n                if eval_count % (self.population_size * 2) == 0:\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 10)  # Increased reduction rate\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Introduced dynamic population size adjustment and refined mutation strategy for enhanced exploration.", "configspace": "", "generation": 41, "fitness": 0.28417619009789363, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.21.", "error": "", "parent_id": "884ef130-87e7-402f-85b9-02285c780be1", "metadata": {"aucs": [0.5779024805566786, 0.5803138153109082, 0.5655599241394083, 0.5771733515159239, 0.5843157616614768, 0.6193643632015704, 0.5809698077551012, 0.623516349974118, 0.590046592408408, 0.35098661329219727, 0.35587167019613275, 0.3354643641076491, 0.3359758149486025, 0.3532891393132639, 0.35262663956393847, 0.35238688729600753, 0.36298131066655726, 0.32553763282884174, 0.0798373633856092, 0.08922951364818332, 0.10637280673722782, 0.08370686199897392, 0.07274295277635645, 0.09743998827412093, 0.09138437170805469, 0.08835495134908633, 0.09858603299032387, 0.08458040368294062, 0.08037894916897748, 0.08941239808432422, 0.07651063615284637, 0.07710879286771355, 0.07336218313044285, 0.084802060372002, 0.07437258386067047, 0.08110064580471388, 0.681059093849725, 0.9786403361213794, 0.9683329891013335, 0.9677637185857046, 0.8280527439384096, 0.9185581608646795, 0.9734178280742412, 0.8861217829024225, 0.9025620966766127, 0.28216734973568003, 0.29383528682898863, 0.26084702563797213, 0.31672020139642587, 0.29188548446092577, 0.29501610789105015, 0.28713537637077247, 0.2965959936273336, 0.29638166299011104, 0.5265278887690632, 0.5386928151448722, 0.6004654849354869, 0.6462345553717403, 0.6165808582892054, 0.645765933969948, 0.5618179325063413, 0.5777932423471527, 0.6111510734091985, 0.21932209233702304, 0.2548441229618664, 0.25792976776338083, 0.23977961141904247, 0.2890352039573638, 0.27726544849875767, 0.26197937508913005, 0.235922312782613, 0.26451805995775635, 0.2596381373264852, 0.05247238623077155, 0.05146799296787907, 0.2501900718184623, 0.24415195623743224, 0.21317646489121866, 0.197732524653778, 0.22134402860639402, 0.2691180702650051, 0.253642139617141, 0.2174117075751706, 0.2657730203076121, 0.2674486382140483, 0.2874986841696786, 0.2688470559635624, 0.22605323537779143, 0.25705627672286013, 0.24484641649336747, 0.366303076059884, 0.4629838558550058, 0.406104774478391, 0.38089240255729295, 0.39833018335191306, 0.40540920365879096, 0.4604065442157349, 0.4753670375426473, 0.40553437551644955, 0.08170691679885789, 0.042483351032769456, 0.13431695340502137, 0.04873835203605181, 0.09213149861293146, 0.12062607407858028, 0.09919330526802317, 0.0632034272860239, 0.05581603943079172, 0.1711402303794659, 0.22041887636319657, 0.18286981122300372, 0.2008492776611539, 0.2147733944200373, 0.2090069845096859, 0.22740053285278405, 0.2200766367716045, 0.22724485089383872, 0.5431865519187499, 0.5282601793598058, 0.525403881597692, 0.5204006530208043, 0.5484922350369105, 0.5306179416925282, 0.5479140560226685, 0.5084472568777105, 0.5340126274372294, 0.09573807109791799, 0.0904300157983644, 0.08594261136281822, 0.10134404127123231, 0.08798996257816294, 0.08635624796968822, 0.08030083600918392, 0.07386247700550719, 0.07431130362364569, 0.1832116454869288, 0.14901917803257314, 0.19078458410763965, 0.14714894346797824, 0.20944428581242014, 0.2200211236471188, 0.1707430099328865, 0.22174718733917165, 0.264031762303799, 0.26661619821419236, 0.2934226466006481, 0.26726015219077703, 0.24314144163858542, 0.2590925690811414, 0.2620067474405995, 0.27781767571369065, 0.29645391020279144, 0.2716914537435754, 0.229288942105345, 0.18857078470282884, 0.21358076266689863, 0.21153230165783132, 0.21189334330206988, 0.1999401502867647, 0.2209472176188978, 0.21975558419114527, 0.2214863515383726, 0.19271126661666282, 0.17704001534211278, 0.1921746232671957, 0.17402174992473118, 0.193263540902345, 0.17575572630002168, 0.16772486335260606, 0.1754192633971905, 0.18472199083360963, 0.17580399987289896, 0.18162939713052317, 0.17796553141977622, 0.22279213819469212, 0.17895982406770494, 0.17074091700751215, 0.17413477107343966, 0.17843673070070987, 0.18099770885278332, 0.6483651840318005, 0.1810038013056453, 0.13684455463622347, 0.17858171359949915, 0.17671145778623665, 0.5913754509032256, 0.17585346640835364, 0.1874385884276406, 0.17928820354891506, 0.1984288362231187, 0.20017599287977927, 0.6322848115161117, 0.16999624576437422, 0.5278732704858257, 0.19013961734938967, 0.7307613353190039, 0.20644569586243866, 0.20465931755948408, 0.1791408758678561, 0.1787557992424369, 0.19147115840041296, 0.20149652820799457, 0.15217488698677428, 0.1765530189265997, 0.18064998047942993, 0.16568677478362392, 0.19443840831894388, 0.06351288702352753, 0.06754582281325894, 0.06176015564356585, 0.06286368911474982, 0.06306950333019956, 0.07515421030115976, 0.05781378645425317, 0.059087892696242705, 0.0612173709914674]}, "mutation_prompt": null}
{"id": "a320b599-3889-401e-adbb-0388e5e7895c", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                localized_factor = np.random.uniform(0.4, 0.9)  # New localized mutation factor\n                mutant = np.clip(best_individual + localized_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.9 * self.success_rate + 0.1  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Improved neighborhood exploration by incorporating a localized mutation adaptation mechanism.", "configspace": "", "generation": 42, "fitness": 0.2639440725141296, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.26.", "error": "", "parent_id": "884ef130-87e7-402f-85b9-02285c780be1", "metadata": {"aucs": [0.9163756439274835, 0.9356042821154003, 0.774208254614895, 0.5666633509517087, 0.9368647183919534, 0.43362829586542706, 0.9274508063260452, 0.9282208394099809, 0.9062754744210612, 0.01659521628402294, 0.043872663813898316, 0.08172185488386552, 0.06744658807877235, 0.11123766241069044, 0.04864350771600734, 0.06641157421543353, 0.1648759774441334, 9.999999999998899e-05, 0.10072911302155096, 0.10946961764269869, 0.07455972782100417, 0.0918850536312622, 0.1280889690533048, 0.14181263425445578, 0.13204316195883026, 0.06956680784778524, 0.15803663549907687, 0.12475980920359486, 0.08832663062041535, 0.06712681128668208, 0.11820708800596746, 0.09602704556390962, 0.0861177051093488, 0.09666308971264292, 0.06905170150308437, 0.10282776442331265, 0.982063700221744, 0.990042641323854, 0.0745282428899825, 0.9855650790348476, 0.9738425954887028, 0.9883497861975757, 0.9806266925509675, 0.9813027513769418, 0.9733030388475944, 0.8112324245227512, 0.8463756811190928, 0.6137217820791968, 0.6388876192733632, 0.46260178896011395, 0.19829450907589052, 0.09876145979929885, 0.84190966962468, 9.999999999998899e-05, 0.21093360815991857, 0.9389055321397295, 0.2292928949828461, 0.15642726923985062, 0.1615606077054199, 0.0718375072569506, 0.23751354748879971, 0.9020954424425389, 0.15053270869115254, 9.999999999998899e-05, 0.15877922166678726, 0.12260408288272806, 9.999999999998899e-05, 0.1320958399808495, 9.999999999998899e-05, 0.19637723440434618, 0.16435587919820316, 0.2568188666978709, 0.23518099937948722, 0.21064804241144297, 0.25022052095687664, 0.1507057980706501, 0.23150709550487003, 0.24526145866163018, 0.15089488353835256, 0.2840303413901767, 0.4180628844379978, 9.999999999998899e-05, 0.10122254872195247, 9.999999999998899e-05, 0.03504261828815902, 0.045590752121918765, 0.013803283644588382, 9.999999999998899e-05, 9.999999999998899e-05, 0.012755406058795549, 0.03642709923576826, 0.2329502306589457, 0.29420502525302994, 0.24714538824807686, 0.10461655578666162, 0.02684118599627272, 0.206051501701769, 0.05065700298555398, 0.07371099531701053, 0.19145390294805198, 0.1843538093674293, 0.1297287238757383, 0.14676371293799473, 0.17730890152780265, 0.1014181500108916, 0.0782344730970912, 0.1680699191990057, 0.09526586339661935, 0.01201277714337301, 0.3195967561668078, 0.3781773958060374, 0.6913090114450982, 0.16674332318970042, 0.437846913261307, 0.08418095073192722, 0.1353937316152134, 0.08223114045438051, 0.6465515914706613, 0.3896028880186361, 0.775049914786178, 0.5396020471262434, 0.27958378856800414, 0.6521294428487212, 0.804512322087052, 0.9175538153773076, 0.6981217417513638, 0.08858421854868026, 0.07027641005822227, 0.09976305990074452, 0.05976311335316875, 0.1199556041421258, 0.08885754086339581, 0.09050857744928675, 0.10252186630662385, 0.062148259787290216, 0.20562194942652257, 0.2387728070460663, 0.20342808407487456, 0.2684854871258806, 0.17906664023164554, 0.42385916922127775, 0.3188356280424388, 0.18096159864646466, 0.18734879952745775, 0.2593219295159144, 0.3083639926458903, 0.23343057417311197, 0.3164339294115772, 0.3075062814352729, 0.48887412478419334, 0.23886879038221365, 0.18511591992349663, 0.21719182358464972, 0.3935376796905897, 0.20698251645568988, 0.2663358678487735, 0.3344551023701069, 0.4395836017431074, 0.19783045547241418, 0.31095580673607603, 0.11005227424896025, 0.21344633844225147, 0.24488620266117544, 0.2976397253789319, 0.29842183946405987, 0.1956795066008581, 0.21634423298948635, 0.19128467038048513, 0.20039504986813494, 0.1993919309527914, 0.19850853028599025, 0.20244232567694265, 0.21513797312288385, 0.19825089081805292, 0.1852306705095872, 0.1922200099445025, 0.1975142382378101, 0.22494418824536755, 0.2023008806619645, 0.17901676134744704, 0.12342716044908086, 0.16739030329990523, 0.1657260526159704, 0.14795507694282173, 0.13095648862552556, 0.16363778531100392, 0.1371766280214739, 0.10822159858034697, 0.16779608654108902, 0.7639363117014175, 0.21171616081461708, 0.12161537262341571, 0.16884722522039997, 0.15527597898103374, 0.04417561610991283, 0.11296055697757057, 0.1278917037900955, 0.21435372806696806, 0.19102400970869382, 0.18440938067457213, 0.18504594161310106, 0.19973103542175696, 0.17249215017746677, 0.18274496389460881, 0.18614013239022587, 0.21421500622642664, 0.18813689445659343, 0.1084299941612713, 0.10213179257120286, 0.08863847453922191, 0.08028040013935023, 0.1065898265686257, 0.09999008659001707, 0.15887966026048084, 0.09069348790586951, 0.1284667323840062]}, "mutation_prompt": null}
{"id": "bc6211b6-56a3-4595-8d95-b8232edfd366", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.9 * self.success_rate + 0.1  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)  # Adjusted population reduction\n            \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Introduced adaptive population reduction based on the convergence rate to enhance exploitation.", "configspace": "", "generation": 43, "fitness": 0.43165837337146196, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.28.", "error": "", "parent_id": "884ef130-87e7-402f-85b9-02285c780be1", "metadata": {"aucs": [0.7934967248430793, 0.8182396380197647, 0.7864171761185668, 0.820636363087007, 0.8210980437793891, 0.8031945567765307, 0.8002358961087774, 0.7877621365618768, 0.8111163406703183, 0.636033904752538, 0.6899305369538569, 0.6521290296690421, 0.6796153930171847, 0.6206730972008412, 0.6504323875353958, 0.5945852983953959, 0.6927260317445716, 0.6743606237201678, 0.0895975605545134, 0.13177816662669517, 0.14872767056206015, 0.08098831635021475, 0.11065510242399212, 0.027097607792865297, 0.09100577694535184, 0.06844664390545152, 0.11255093345505829, 0.11898579649542063, 0.09293337294760329, 0.08893261728789403, 0.08138274331440132, 0.10094908431797378, 0.02790942110571437, 0.10548337591091861, 0.08601158809235843, 0.09075014697177375, 0.9862936649197322, 0.981695799851693, 0.9600935557298524, 0.983309894439261, 0.9804892564267528, 0.9729782536826707, 0.9810867083488279, 0.9817140254956278, 0.9711990443900546, 0.6049806657646146, 0.591493480177113, 0.47717093253097775, 0.6187647090916324, 0.47644057687280517, 0.6252568683881639, 0.5151267107927454, 0.08659317278997769, 0.6311105111721329, 0.8016887206766015, 0.34203865095931074, 0.768608223486352, 0.8512402460237287, 0.8514666009545704, 0.8620841607222179, 0.8017547634105494, 0.8264407746397078, 0.8097725985823251, 0.1277014915553618, 0.6127596846953265, 0.6565576263354524, 0.6237335107553311, 0.5862511342487664, 0.5115128273794287, 0.7021921752595432, 0.6751883126785172, 0.6733936535649492, 0.6060835961893167, 0.6136101663956077, 0.6332759626405973, 0.6330852128233883, 0.6367537964994308, 0.6006216411877083, 0.5957326155522098, 0.12682036676354091, 0.5521828305498231, 0.6651634334618524, 0.6854037420801475, 0.6360327973330698, 0.6659295507610197, 0.6479474766149443, 0.6803579819712102, 0.6765168407547146, 0.010117421523520576, 0.6893628553255325, 0.7623267185157347, 0.6847558721491169, 0.6981362630668153, 0.7401893110078461, 0.6539365816805052, 0.7425037883646791, 0.74423770367184, 0.7157033463586623, 0.7070121869881154, 0.39811153690328416, 0.5053089522268622, 0.33716338765483733, 0.5264291766461038, 0.5338234028559666, 0.5139084426274706, 0.0683076130343988, 0.36946003393420423, 0.30496073177102057, 0.5168246066012063, 0.4451087095317141, 0.49737436498274645, 0.4804422277005338, 0.5077552636678015, 0.5068765856937265, 0.07864161555013383, 0.5149877004836192, 0.46216637598637955, 0.7656191993560203, 0.7818914227925018, 0.41058180386148346, 0.7918416252926299, 0.7835461831827324, 0.7902724499578875, 0.8148599016626809, 0.8046027464457775, 0.786202035178448, 0.09507656790623809, 0.12273199979234672, 0.11005105389628422, 0.10955840745018464, 0.09496411659919846, 0.08153539774104412, 0.10527425975876537, 0.10087522825853179, 0.0887267959242326, 0.16422368029822443, 0.20643186617320275, 0.6859100738629242, 0.264656555541536, 0.233619936091907, 0.3328818715996902, 0.42361055984109197, 0.22546850297803145, 0.2544915131731834, 0.3835810703331848, 0.3919776560582897, 0.4801284303162934, 0.4099330662875804, 0.3432575118526632, 0.42584992884353856, 0.4303900438582823, 0.42392567760579203, 0.32923049457872045, 0.27181823877762357, 0.34385298265367115, 0.24181121003963657, 0.28050403759592524, 0.42706110402969266, 0.2724565156174168, 0.4307151926507088, 0.3180747212223407, 0.37507126037440197, 0.20583605871740562, 0.23515190675025943, 0.209581926046137, 0.197728521206614, 0.21097938207456168, 0.16859695000633623, 0.18707583581807852, 0.1730086240919365, 0.18222126318845044, 0.24425463675026093, 0.19817193751666873, 0.24296140240406106, 0.20483683665834773, 0.17816384925683248, 0.20630579084155665, 0.18143500364556442, 0.17624570874016787, 0.22185086631429674, 0.1875294865568693, 0.14640177869175164, 0.16331099174283537, 0.16769748177189936, 0.17786618354883232, 0.19574361107317595, 0.8759793679370917, 0.14784312929282784, 0.16373825477100834, 0.894740836546805, 0.21239102500976903, 0.20659777770505838, 0.20857006157893054, 0.22523910794467616, 0.20983487097636466, 0.8738427621378517, 0.16712640883238983, 0.19542115165314922, 0.1717099839618046, 0.19313123996834525, 0.174111962975097, 0.1939009188531584, 0.16826332175941605, 0.21251965083629543, 0.1758487667160643, 0.2045497440610532, 0.17727562722615786, 0.0962353364681261, 0.11018740179847097, 0.07961664851692873, 0.09119248006223657, 0.10287119093608232, 0.07090468108581316, 0.12789898803241628, 0.09273613186148177, 0.0733260091152752]}, "mutation_prompt": null}
{"id": "f53e9e35-a513-4450-a323-e2bef7858b41", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Adjusted the success rate update formula to increase responsiveness to fitness improvements.", "configspace": "", "generation": 44, "fitness": 0.43357099259294557, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.28.", "error": "", "parent_id": "884ef130-87e7-402f-85b9-02285c780be1", "metadata": {"aucs": [0.7961725042964937, 0.7979893954068605, 0.7924080897545305, 0.5271954277416551, 0.8168456008557715, 0.7867133276781033, 0.7981756754987965, 0.7585767919395229, 0.8040440945489407, 0.6358152886078761, 0.649738092657008, 0.6832278307713449, 0.6876363005023934, 0.6606300311611887, 0.660939008230114, 0.6563317506764689, 0.6399348602850248, 0.6635829314225923, 0.1411848619870405, 0.13177194761668565, 0.14842052802970518, 0.08258163052487011, 0.11051893286462144, 0.027100645637302856, 0.09100646069582052, 0.06629288805710565, 0.10549162019812652, 0.11839618878898872, 0.09267175985334486, 0.08893604985080816, 0.08104534366312832, 0.10138273531797715, 0.02729402060747632, 0.10553774719340092, 0.09530625785777991, 0.08751596216383384, 0.9862936706654768, 0.9816968315908347, 0.9600936832778677, 0.98330992046155, 0.9804892679871923, 0.972978250170713, 0.9810867359002584, 0.9817140456089953, 0.9711991124603216, 0.6131184783699514, 0.5841835754941334, 0.66898617838183, 0.5287852437884127, 0.4674403374563987, 0.6149292151463968, 0.5569005648232768, 0.08660002062798922, 0.6300270861764945, 0.7985869595591352, 0.809770871213159, 0.7991124477453593, 0.8322986492590879, 0.8411393287663802, 0.8618392074146803, 0.8001582892607406, 0.829474974987433, 0.8303212733398568, 0.12771877633195872, 0.6286312010646791, 0.6705352600497976, 0.6035057912317956, 0.6269216785027238, 0.707582114079182, 0.6780304839653071, 0.6840599995972608, 0.6705720178115839, 0.5774637720464907, 0.599770105384327, 0.6329042241144598, 0.6426393493086833, 0.6519417919466235, 0.5913226156826074, 0.12934957912217904, 0.6443673801220944, 0.13253273904629626, 0.6417928598366447, 0.6695912376326996, 0.6779713207115976, 0.6674570674544238, 0.6656887724131327, 0.6509997001679082, 0.6330363749211955, 0.010030856401970989, 0.6279479180632251, 0.7680340207362237, 0.09149138340607876, 0.6882854492060375, 0.7271233098271566, 0.6458270423078505, 0.7211585837638803, 0.772717495466963, 0.7313186352661539, 0.7523512463111219, 0.4165198031468079, 0.5104034204287238, 0.38488366215627967, 0.5209913099457797, 0.45951962492095444, 0.49426329720074214, 0.06720597207130707, 0.4399285966904971, 0.23887107443494981, 0.5217131417805367, 0.48508741698684865, 0.4726497753564952, 0.4670129511662927, 0.47544484216420035, 0.4615206153879656, 0.47323462276256556, 0.5103563422667463, 0.4753704409239631, 0.7620749828186136, 0.7476489637077405, 0.4574940788419317, 0.7913231031923913, 0.7959391862691896, 0.7857107884193262, 0.8161850812881213, 0.7780487911029771, 0.7763107931224129, 0.09516534018557321, 0.10504666491281045, 0.10074348815512169, 0.1342463819824976, 0.09458901582929136, 0.0713353565435213, 0.10478844369936702, 0.10374036374995665, 0.08889445228797088, 0.22512920568260464, 0.6588588001660443, 0.7252985234531445, 0.3044734612296879, 0.2856763405650067, 0.2715830604733164, 0.4222929842756017, 0.22610746106703095, 0.1529387026153639, 0.38485890007877366, 0.5005760224117362, 0.447583768149581, 0.3648794085122111, 0.4237052579167988, 0.45372713109858054, 0.45624348975212914, 0.35600235337533404, 0.4651950972176563, 0.25961288617873746, 0.24875913282123052, 0.37407775550522937, 0.32197676997237734, 0.37348530012029546, 0.3620655789463658, 0.29121357477594334, 0.42141773455987663, 0.38618185800167104, 0.2122504550027292, 0.212116437670268, 0.22094400840052808, 0.1682585520771106, 0.18011102767448517, 0.18849116432533697, 0.17961457365308475, 0.179674104021468, 0.17999350740704134, 0.24424208504388167, 0.19817458810396027, 0.24271429683233559, 0.2040639505312598, 0.1796570599129158, 0.19607172785223115, 0.18148056206101315, 0.17652926016736892, 0.22185211259957904, 0.1875296200464187, 0.1463985394411269, 0.16330937409295398, 0.1676909978618123, 0.17787953527568157, 0.1955489036665775, 0.8847881389819163, 0.1477946923146103, 0.16373520934724783, 0.8959037060152241, 0.21239294191232017, 0.20660134422199583, 0.20984841539812038, 0.22523845511797158, 0.20983176509773782, 0.8931941124113842, 0.16712752614630244, 0.1954211086128259, 0.1576417178157733, 0.19302135657928055, 0.1759600236482003, 0.17898215651250904, 0.18369336733302166, 0.17645329574228585, 0.1895397474120587, 0.1770670289937043, 0.18343531810767977, 0.11999883528837818, 0.08204040813280733, 0.07932726982978189, 0.07612448948153105, 0.07930929096838935, 0.0790242345263994, 0.11553853676464931, 0.06626277323620777, 0.05963898940301893]}, "mutation_prompt": null}
{"id": "a7a5dd04-2a16-4825-be48-884f02a3aa0d", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.90 * self.success_rate + 0.10  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Improved the formula for adjusting the success rate to increase its sensitivity to changes in performance.", "configspace": "", "generation": 45, "fitness": 0.43165837337146196, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.28.", "error": "", "parent_id": "f53e9e35-a513-4450-a323-e2bef7858b41", "metadata": {"aucs": [0.7934967248430793, 0.8182396380197647, 0.7864171761185668, 0.820636363087007, 0.8210980437793891, 0.8031945567765307, 0.8002358961087774, 0.7877621365618768, 0.8111163406703183, 0.636033904752538, 0.6899305369538569, 0.6521290296690421, 0.6796153930171847, 0.6206730972008412, 0.6504323875353958, 0.5945852983953959, 0.6927260317445716, 0.6743606237201678, 0.0895975605545134, 0.13177816662669517, 0.14872767056206015, 0.08098831635021475, 0.11065510242399212, 0.027097607792865297, 0.09100577694535184, 0.06844664390545152, 0.11255093345505829, 0.11898579649542063, 0.09293337294760329, 0.08893261728789403, 0.08138274331440132, 0.10094908431797378, 0.02790942110571437, 0.10548337591091861, 0.08601158809235843, 0.09075014697177375, 0.9862936649197322, 0.981695799851693, 0.9600935557298524, 0.983309894439261, 0.9804892564267528, 0.9729782536826707, 0.9810867083488279, 0.9817140254956278, 0.9711990443900546, 0.6049806657646146, 0.591493480177113, 0.47717093253097775, 0.6187647090916324, 0.47644057687280517, 0.6252568683881639, 0.5151267107927454, 0.08659317278997769, 0.6311105111721329, 0.8016887206766015, 0.34203865095931074, 0.768608223486352, 0.8512402460237287, 0.8514666009545704, 0.8620841607222179, 0.8017547634105494, 0.8264407746397078, 0.8097725985823251, 0.1277014915553618, 0.6127596846953265, 0.6565576263354524, 0.6237335107553311, 0.5862511342487664, 0.5115128273794287, 0.7021921752595432, 0.6751883126785172, 0.6733936535649492, 0.6060835961893167, 0.6136101663956077, 0.6332759626405973, 0.6330852128233883, 0.6367537964994308, 0.6006216411877083, 0.5957326155522098, 0.12682036676354091, 0.5521828305498231, 0.6651634334618524, 0.6854037420801475, 0.6360327973330698, 0.6659295507610197, 0.6479474766149443, 0.6803579819712102, 0.6765168407547146, 0.010117421523520576, 0.6893628553255325, 0.7623267185157347, 0.6847558721491169, 0.6981362630668153, 0.7401893110078461, 0.6539365816805052, 0.7425037883646791, 0.74423770367184, 0.7157033463586623, 0.7070121869881154, 0.39811153690328416, 0.5053089522268622, 0.33716338765483733, 0.5264291766461038, 0.5338234028559666, 0.5139084426274706, 0.0683076130343988, 0.36946003393420423, 0.30496073177102057, 0.5168246066012063, 0.4451087095317141, 0.49737436498274645, 0.4804422277005338, 0.5077552636678015, 0.5068765856937265, 0.07864161555013383, 0.5149877004836192, 0.46216637598637955, 0.7656191993560203, 0.7818914227925018, 0.41058180386148346, 0.7918416252926299, 0.7835461831827324, 0.7902724499578875, 0.8148599016626809, 0.8046027464457775, 0.786202035178448, 0.09507656790623809, 0.12273199979234672, 0.11005105389628422, 0.10955840745018464, 0.09496411659919846, 0.08153539774104412, 0.10527425975876537, 0.10087522825853179, 0.0887267959242326, 0.16422368029822443, 0.20643186617320275, 0.6859100738629242, 0.264656555541536, 0.233619936091907, 0.3328818715996902, 0.42361055984109197, 0.22546850297803145, 0.2544915131731834, 0.3835810703331848, 0.3919776560582897, 0.4801284303162934, 0.4099330662875804, 0.3432575118526632, 0.42584992884353856, 0.4303900438582823, 0.42392567760579203, 0.32923049457872045, 0.27181823877762357, 0.34385298265367115, 0.24181121003963657, 0.28050403759592524, 0.42706110402969266, 0.2724565156174168, 0.4307151926507088, 0.3180747212223407, 0.37507126037440197, 0.20583605871740562, 0.23515190675025943, 0.209581926046137, 0.197728521206614, 0.21097938207456168, 0.16859695000633623, 0.18707583581807852, 0.1730086240919365, 0.18222126318845044, 0.24425463675026093, 0.19817193751666873, 0.24296140240406106, 0.20483683665834773, 0.17816384925683248, 0.20630579084155665, 0.18143500364556442, 0.17624570874016787, 0.22185086631429674, 0.1875294865568693, 0.14640177869175164, 0.16331099174283537, 0.16769748177189936, 0.17786618354883232, 0.19574361107317595, 0.8759793679370917, 0.14784312929282784, 0.16373825477100834, 0.894740836546805, 0.21239102500976903, 0.20659777770505838, 0.20857006157893054, 0.22523910794467616, 0.20983487097636466, 0.8738427621378517, 0.16712640883238983, 0.19542115165314922, 0.1717099839618046, 0.19313123996834525, 0.174111962975097, 0.1939009188531584, 0.16826332175941605, 0.21251965083629543, 0.1758487667160643, 0.2045497440610532, 0.17727562722615786, 0.0962353364681261, 0.11018740179847097, 0.07961664851692873, 0.09119248006223657, 0.10287119093608232, 0.07090468108581316, 0.12789898803241628, 0.09273613186148177, 0.0733260091152752]}, "mutation_prompt": null}
{"id": "d3f650d4-7f0b-464c-a570-56ac370872f2", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.3 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Enhanced exploration by adjusting the scaling factor update formula for improved convergence.", "configspace": "", "generation": 46, "fitness": 0.41425257966002704, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.34.", "error": "", "parent_id": "f53e9e35-a513-4450-a323-e2bef7858b41", "metadata": {"aucs": [0.9162616082081437, 0.9195865419337114, 0.9144529313888909, 0.1331202956559575, 0.9205122271102725, 0.9027248241983395, 0.9186914664684165, 0.9137105002908505, 0.905534266740612, 9.999999999998899e-05, 0.07625263851082742, 0.8195693429990443, 0.13542593145510584, 0.8251580441112507, 0.044842727187694664, 0.019284586045128727, 0.8292885901062236, 0.05513477979114301, 0.10192722186002579, 0.07990009899697326, 0.07627958876903451, 0.07802643164709155, 0.1221860080519166, 0.02734116935831521, 0.14105422901377151, 0.15381959869282946, 0.08944602101585386, 0.09930745382298012, 0.1724853317767283, 0.07766111586746083, 0.115759389839593, 0.10108886630582747, 0.028762004275676545, 0.10800272147908474, 0.08581672003615637, 0.10340048511141409, 0.9862262055104032, 0.980731485126793, 0.9235470868205339, 0.9812302811051019, 0.9742845389775984, 0.9645134930784398, 0.9739738766265593, 0.9810368970854421, 0.9632799163422551, 0.7912297317401716, 0.7539449660208837, 0.797343262878884, 0.774078858628174, 0.7578340518052826, 0.776442326946634, 0.7877924764049287, 0.12262573566793167, 0.7793426469258825, 0.38435382073715907, 0.20908359632509288, 0.9053041108259471, 0.9309453114184447, 0.9409853470835456, 0.21257459842934912, 0.931818486275905, 0.9178972567596975, 0.408490315357966, 0.12775501822513757, 0.3008701136411377, 9.999999999998899e-05, 0.8599000572412404, 0.779521885794721, 0.2472632989630783, 0.22654414224736064, 0.3694785134976243, 0.2625655880723169, 0.23010955840230252, 0.23476280106138725, 0.8577447907543678, 0.23091075057396526, 0.8509056330920651, 0.19056282647527756, 0.3771880238613756, 0.2456548127376118, 0.3774008391371272, 0.23458935094901667, 0.08399111661828917, 0.3916030136199866, 0.07843162684617055, 0.8486875812475634, 0.850831812439474, 0.8494687688074429, 0.0655061833535392, 0.09307315119023352, 0.8770939307773662, 0.39472070138987114, 0.03460981147624187, 0.8650438399720112, 0.05216486418656152, 0.8520678531086352, 0.8892533338155686, 0.8770939654519778, 0.8595189508525787, 0.11219432859149259, 0.08840542058182144, 0.2659698074098584, 0.08232865379188314, 0.7343189698608227, 0.11065787388078607, 0.11557080545723186, 0.42667712340742014, 0.1038691407075808, 0.7595624011210914, 0.0977623790416352, 0.7650750273588289, 0.7797775524534618, 0.7693772597480419, 0.7660239525870738, 0.729417416969026, 0.7633317330820514, 0.755559023696707, 0.8869156949931281, 0.8875050040083166, 0.8919897744465128, 0.8971884909344067, 0.8991010545377932, 0.9002362587010215, 0.8934274064308197, 0.9003344740579954, 0.8927358664742279, 0.09331194233172613, 0.047800213151232174, 0.07533619659459834, 0.050401204975087044, 0.058632293562123405, 0.10753320215429463, 0.10319327529916222, 0.09634658150255959, 0.10287398989057495, 0.24299473709268027, 0.8658281129656555, 0.19722037353391664, 0.8251225413874663, 0.28822208308205954, 0.8043083473669457, 0.23570069404941285, 0.17795351765598166, 0.277760895789268, 0.4518136382469622, 0.5572122429283912, 0.18712603334584987, 0.5324547172308575, 0.2874592295375279, 0.25724265515650124, 0.24207940100403302, 0.19846357681077453, 0.2707687895640396, 0.4148412811960528, 0.4935811543859714, 0.4017927767848404, 0.6137053469168485, 0.29215020144512527, 0.19249822096638536, 0.4831512839821289, 0.36520300066376576, 0.4363388973117429, 0.18992842578916125, 0.20699534518985163, 0.20889807994377396, 0.21577534977237434, 0.13926352741796566, 0.17802984862916926, 0.1778916181639033, 0.20742226304639633, 0.24339115313852477, 0.20982919103402686, 0.2064337881408046, 0.20783705655407325, 0.19476234399082237, 0.22250493765101698, 0.19650098962251172, 0.18343206514526222, 0.2063436118870121, 0.25290332432217966, 0.18859621867110032, 0.18590330744818606, 0.10693659866238636, 0.9415261149435763, 0.1782738726025882, 0.12237744238333359, 0.9457748373507325, 0.14843503754010978, 0.16430973576843444, 0.9404024920368746, 0.21340684816096567, 0.938278299141891, 0.15690720270105118, 0.2265688861779156, 0.21004374139071402, 0.939938780257397, 0.16681929479167634, 0.21394853873083253, 0.1869882175181744, 0.182562678359533, 0.17235554407060227, 0.19190359264965673, 0.18008841936970144, 0.1664927997210499, 0.19261209877671737, 0.1814432384941469, 0.18236639908312868, 0.0705785610708668, 0.0781488174383067, 0.07964378472338907, 0.08122734975910884, 0.06860178023118857, 0.07747878627998384, 0.08969613099930573, 0.07023561041648696, 0.09599273630432803]}, "mutation_prompt": null}
{"id": "0b479c46-aff3-4a56-af0a-fd1c70f02b29", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.75 * self.success_rate + 0.25  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Improved adaptive strategy by increasing the success rate update factor.", "configspace": "", "generation": 47, "fitness": 0.4315430118133001, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.28.", "error": "", "parent_id": "f53e9e35-a513-4450-a323-e2bef7858b41", "metadata": {"aucs": [0.799250230448515, 0.7970564562331101, 0.7926536311962006, 0.5718210835288506, 0.8033197379966913, 0.7864618218915324, 0.7998581312346983, 0.8016653014514401, 0.8022242146491446, 0.6671761024426426, 0.6549479839934372, 0.6982936635493739, 0.6618886493745706, 0.6742688347029877, 0.6955272356680515, 0.6494811820230533, 0.6420434236506574, 0.6805053467378719, 0.14118474112892454, 0.13177192206867006, 0.14798092551590158, 0.08343241165789461, 0.1105189155185663, 0.0271006577945484, 0.09100646069066587, 0.06629294065732572, 0.10475932152030565, 0.11830859205515498, 0.09261156629895562, 0.08893606976185986, 0.0810452941669546, 0.10094644875499037, 0.027300380329911444, 0.10573933488000731, 0.09530626644901563, 0.08491177617992618, 0.9862936706855832, 0.9816968350148736, 0.9600936838081483, 0.9833099205636929, 0.980489268032564, 0.9729782501569356, 0.9810867360023738, 0.9817140456793839, 0.9711991127126086, 0.6057356590004298, 0.5919085284447441, 0.6790891944294566, 0.6282492115715621, 0.6230803205986848, 0.6232342584027577, 0.5425504042831735, 0.08660001370744597, 0.6277937864884942, 0.7985869595591352, 0.809770871213159, 0.7991124477453593, 0.8322986492590879, 0.8411393287663802, 0.8618392074146803, 0.8001582892607406, 0.829474974987433, 0.8303212733398568, 0.12771877700321455, 0.6238385492141258, 0.6629697129692143, 0.6217517424305442, 0.6192958399048767, 0.7115171758514954, 0.6904142557026431, 0.6654902710945816, 0.6607300129865885, 0.5819048938887863, 0.6382098150696063, 0.63477153997564, 0.6192589592133966, 0.6594820306760094, 0.6153312511436924, 0.12934883119361895, 0.6608831795828235, 0.13253277874619585, 0.6430684795233232, 0.677705954788637, 0.6996368751338717, 0.661296254760001, 0.658140563141925, 0.6459038237384929, 0.6539224975318252, 0.010031096904922765, 0.6273069691659092, 0.7253180320942563, 0.09149177446516155, 0.7077265324812245, 0.7264434584264499, 0.6346578329844839, 0.5460701848357985, 0.7792516879716416, 0.7247727505884003, 0.7522424422409755, 0.4396069592347295, 0.5360043689929055, 0.33103447980790623, 0.5123016231529989, 0.4727668982666039, 0.4926941256025875, 0.06717326882909624, 0.3729846955585834, 0.23453517581150363, 0.48937571485911646, 0.518352061822297, 0.5205815128007043, 0.47669308400398624, 0.45492861417272656, 0.4906644550124619, 0.48110406739946654, 0.519814039946144, 0.48272046600289, 0.7662192719486842, 0.754847479213498, 0.42414552865487065, 0.7904010751169803, 0.8043569064684175, 0.7969144397657779, 0.8157658909662253, 0.7944438782104397, 0.7788138702277685, 0.09516593493017766, 0.10504650560543305, 0.09373774085357434, 0.1342464765625606, 0.09464041804851808, 0.07087672211249296, 0.10477220628462891, 0.10374038336959968, 0.08878296493125726, 0.22519502070079278, 0.2515327554095833, 0.7030946306953091, 0.31268013097270264, 0.28511164073766204, 0.2729380197879715, 0.40835095003014954, 0.22576305447114853, 0.15229615235600014, 0.3845399415873588, 0.47352306879286066, 0.4847039920795636, 0.33136422243204955, 0.4023656366502192, 0.3674554912377237, 0.33496143735372275, 0.3559699147078095, 0.4710865882861681, 0.25950602240208254, 0.24853416809623208, 0.35733366277079803, 0.2925829088882964, 0.3211031317796106, 0.35419443342159584, 0.39012990831369965, 0.41321268897627117, 0.40287103935180035, 0.2088569680081218, 0.21210852437678762, 0.19938760378235776, 0.1844065958941873, 0.16215253391627316, 0.18309925298619034, 0.18253039423191308, 0.17968128297043096, 0.17999401965723538, 0.24424229369476602, 0.1981746158730361, 0.24271424920558426, 0.20318526751039345, 0.17835634790278487, 0.19607174419717444, 0.18177074088527378, 0.1771138068099819, 0.22185212307802893, 0.18752962109864635, 0.1463987270353918, 0.16330936722027267, 0.16769099646851304, 0.17787955644768594, 0.19554731229419542, 0.8847831591157599, 0.14779467439496552, 0.16373516147494416, 0.8958952943779461, 0.21239295091243782, 0.206601330944155, 0.20984842102992562, 0.22523845160768374, 0.20983183516828552, 0.8911040356210685, 0.16712753544885417, 0.19542110779641497, 0.15759656699820224, 0.18235686325595257, 0.1759825126536544, 0.17754236018432112, 0.16733559728759684, 0.17637223664694102, 0.19954796943671405, 0.1765152602027822, 0.17378714744432378, 0.12008974073982659, 0.08204059172559808, 0.06534907546997748, 0.07612433006271913, 0.07848757870204681, 0.07368412324162288, 0.12078172715421587, 0.06573708061807959, 0.059639184818288005]}, "mutation_prompt": null}
{"id": "e939ea2a-81b4-4099-a06a-8aa7c310a127", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.7 + 0.3 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Modified crossover rate update to improve convergence speed by increasing variability in exploration.", "configspace": "", "generation": 48, "fitness": 0.43357099259294557, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.28.", "error": "", "parent_id": "f53e9e35-a513-4450-a323-e2bef7858b41", "metadata": {"aucs": [0.7961725042964937, 0.7979893954068605, 0.7924080897545305, 0.5271954277416551, 0.8168456008557715, 0.7867133276781033, 0.7981756754987965, 0.7585767919395229, 0.8040440945489407, 0.6358152886078761, 0.649738092657008, 0.6832278307713449, 0.6876363005023934, 0.6606300311611887, 0.660939008230114, 0.6563317506764689, 0.6399348602850248, 0.6635829314225923, 0.1411848619870405, 0.13177194761668565, 0.14842052802970518, 0.08258163052487011, 0.11051893286462144, 0.027100645637302856, 0.09100646069582052, 0.06629288805710565, 0.10549162019812652, 0.11839618878898872, 0.09267175985334486, 0.08893604985080816, 0.08104534366312832, 0.10138273531797715, 0.02729402060747632, 0.10553774719340092, 0.09530625785777991, 0.08751596216383384, 0.9862936706654768, 0.9816968315908347, 0.9600936832778677, 0.98330992046155, 0.9804892679871923, 0.972978250170713, 0.9810867359002584, 0.9817140456089953, 0.9711991124603216, 0.6131184783699514, 0.5841835754941334, 0.66898617838183, 0.5287852437884127, 0.4674403374563987, 0.6149292151463968, 0.5569005648232768, 0.08660002062798922, 0.6300270861764945, 0.7985869595591352, 0.809770871213159, 0.7991124477453593, 0.8322986492590879, 0.8411393287663802, 0.8618392074146803, 0.8001582892607406, 0.829474974987433, 0.8303212733398568, 0.12771877633195872, 0.6286312010646791, 0.6705352600497976, 0.6035057912317956, 0.6269216785027238, 0.707582114079182, 0.6780304839653071, 0.6840599995972608, 0.6705720178115839, 0.5774637720464907, 0.599770105384327, 0.6329042241144598, 0.6426393493086833, 0.6519417919466235, 0.5913226156826074, 0.12934957912217904, 0.6443673801220944, 0.13253273904629626, 0.6417928598366447, 0.6695912376326996, 0.6779713207115976, 0.6674570674544238, 0.6656887724131327, 0.6509997001679082, 0.6330363749211955, 0.010030856401970989, 0.6279479180632251, 0.7680340207362237, 0.09149138340607876, 0.6882854492060375, 0.7271233098271566, 0.6458270423078505, 0.7211585837638803, 0.772717495466963, 0.7313186352661539, 0.7523512463111219, 0.4165198031468079, 0.5104034204287238, 0.38488366215627967, 0.5209913099457797, 0.45951962492095444, 0.49426329720074214, 0.06720597207130707, 0.4399285966904971, 0.23887107443494981, 0.5217131417805367, 0.48508741698684865, 0.4726497753564952, 0.4670129511662927, 0.47544484216420035, 0.4615206153879656, 0.47323462276256556, 0.5103563422667463, 0.4753704409239631, 0.7620749828186136, 0.7476489637077405, 0.4574940788419317, 0.7913231031923913, 0.7959391862691896, 0.7857107884193262, 0.8161850812881213, 0.7780487911029771, 0.7763107931224129, 0.09516534018557321, 0.10504666491281045, 0.10074348815512169, 0.1342463819824976, 0.09458901582929136, 0.0713353565435213, 0.10478844369936702, 0.10374036374995665, 0.08889445228797088, 0.22512920568260464, 0.6588588001660443, 0.7252985234531445, 0.3044734612296879, 0.2856763405650067, 0.2715830604733164, 0.4222929842756017, 0.22610746106703095, 0.1529387026153639, 0.38485890007877366, 0.5005760224117362, 0.447583768149581, 0.3648794085122111, 0.4237052579167988, 0.45372713109858054, 0.45624348975212914, 0.35600235337533404, 0.4651950972176563, 0.25961288617873746, 0.24875913282123052, 0.37407775550522937, 0.32197676997237734, 0.37348530012029546, 0.3620655789463658, 0.29121357477594334, 0.42141773455987663, 0.38618185800167104, 0.2122504550027292, 0.212116437670268, 0.22094400840052808, 0.1682585520771106, 0.18011102767448517, 0.18849116432533697, 0.17961457365308475, 0.179674104021468, 0.17999350740704134, 0.24424208504388167, 0.19817458810396027, 0.24271429683233559, 0.2040639505312598, 0.1796570599129158, 0.19607172785223115, 0.18148056206101315, 0.17652926016736892, 0.22185211259957904, 0.1875296200464187, 0.1463985394411269, 0.16330937409295398, 0.1676909978618123, 0.17787953527568157, 0.1955489036665775, 0.8847881389819163, 0.1477946923146103, 0.16373520934724783, 0.8959037060152241, 0.21239294191232017, 0.20660134422199583, 0.20984841539812038, 0.22523845511797158, 0.20983176509773782, 0.8931941124113842, 0.16712752614630244, 0.1954211086128259, 0.1576417178157733, 0.19302135657928055, 0.1759600236482003, 0.17898215651250904, 0.18369336733302166, 0.17645329574228585, 0.1895397474120587, 0.1770670289937043, 0.18343531810767977, 0.11999883528837818, 0.08204040813280733, 0.07932726982978189, 0.07612448948153105, 0.07930929096838935, 0.0790242345263994, 0.11553853676464931, 0.06626277323620777, 0.05963898940301893]}, "mutation_prompt": null}
{"id": "2c5fd7a7-74c5-4403-b525-2b7d88d47e92", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.2  # Initialize success rate to a higher starting value\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Improved initialization of the success rate to better adapt to early iterations.", "configspace": "", "generation": 49, "fitness": 0.4324054569456022, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.28.", "error": "", "parent_id": "f53e9e35-a513-4450-a323-e2bef7858b41", "metadata": {"aucs": [0.7889559652720194, 0.7979871340496115, 0.7983763623703609, 0.527193396398794, 0.8090212300539451, 0.7829793343664682, 0.7981865370368771, 0.7588022808016264, 0.8030125573059315, 0.6626810202159356, 0.673923495555048, 0.6879449163115336, 0.68313548015252, 0.6693252726304578, 0.6570202628973547, 0.647790480546609, 0.634507462021524, 0.6565095073515933, 0.1411848488313332, 0.1317719445275083, 0.14840194744106883, 0.08323182557017517, 0.11051893216017616, 0.02710064698513126, 0.09100646069241558, 0.06629289390147186, 0.10576444201763935, 0.11989422138660444, 0.09255746289820321, 0.08893605204303112, 0.08104533711342887, 0.10141585490039873, 0.027298649718581647, 0.1055045959165738, 0.09530625972620632, 0.0910239941592188, 0.9862936706677108, 0.98169683197128, 0.9600936833367882, 0.9833099204728993, 0.9804892679922337, 0.9729782501691823, 0.9810867359116046, 0.9817140456168162, 0.9711991124883536, 0.6016752022292633, 0.5819079759937864, 0.6690687625782197, 0.5280175494640191, 0.4674470176443841, 0.6128896993150588, 0.5607823964490166, 0.08660002024650715, 0.630298912357366, 0.7985869595591352, 0.809770871213159, 0.7991124477453593, 0.8322986492590879, 0.8411393287663802, 0.8618392074146803, 0.8001582892607406, 0.829474974987433, 0.8303212733398568, 0.1277187750412635, 0.6272141124758521, 0.6677992871468481, 0.6242012880276171, 0.6159507863975685, 0.7092628545739805, 0.6587968123472148, 0.6865955811077444, 0.6689099049902951, 0.5774581147112121, 0.6367645146787511, 0.6316533846048498, 0.6462966086390527, 0.6432721738206819, 0.6045637288360672, 0.12934963248321873, 0.6435020795582598, 0.13253273972766277, 0.6429952952121134, 0.6521288918082799, 0.6757292624571745, 0.6664704613619421, 0.679533464320408, 0.6534143889712002, 0.6532568416517925, 0.010030874007195045, 0.6227941635210803, 0.7737684413860808, 0.0914913088530277, 0.6872272154524308, 0.6946347062188454, 0.6337412250275176, 0.5625025943682388, 0.7010996299661993, 0.7397354068398346, 0.7515902247866333, 0.3920139767297739, 0.4961799801267541, 0.3751638266533276, 0.533015211598822, 0.4779274450485581, 0.4880469058409519, 0.0672055041438574, 0.42678716315916665, 0.2085368729722551, 0.5027497822657128, 0.4741361812950726, 0.506682415874202, 0.45281514107187026, 0.47369804766293877, 0.46929098268552083, 0.46257399668760424, 0.5114826235745855, 0.4703468016651853, 0.7773765337337046, 0.7609741227637159, 0.46222257373917064, 0.7859790563863829, 0.7995073778883304, 0.7876090145057262, 0.817215423943252, 0.7792592596766016, 0.7831347550662242, 0.09532335963490934, 0.10504664655486029, 0.09813495011057616, 0.13424638125373856, 0.09451689044171596, 0.07190557178111578, 0.10476484493142946, 0.10374036572809675, 0.08875834727235632, 0.22586777993804252, 0.6368472817675226, 0.7210004671505545, 0.3200081198072948, 0.28649609603560244, 0.27107014738367297, 0.418739016163866, 0.22555198986380287, 0.15252914143613105, 0.3868104277700224, 0.48733896834878265, 0.46172459664497223, 0.3648754876475323, 0.423578688333321, 0.4523074472742994, 0.41976825486926816, 0.356007294057229, 0.46904573881418554, 0.25952890898817726, 0.2483931131794177, 0.37402279927017057, 0.32126380543419075, 0.37722679130711523, 0.3619884622987857, 0.29125430316765655, 0.4241061485924119, 0.399090639935047, 0.21221630813843995, 0.2121155585945086, 0.22246371213193672, 0.16825563810656385, 0.18433517267040012, 0.1913777714191084, 0.18250379651151927, 0.179674901779866, 0.17999356628074492, 0.24424208738525743, 0.19817459095806667, 0.24271429156528823, 0.20350695981106293, 0.1798633480635322, 0.20805293759739374, 0.18172447548356663, 0.1819310876891601, 0.22185211285884776, 0.1875296202893102, 0.14639853580362305, 0.16330936839729127, 0.16769099730523107, 0.17787953322744465, 0.19554890318637752, 0.8847875885415266, 0.14779469219246621, 0.163735226240034, 0.8959027713473229, 0.21239294211963, 0.20660134271328712, 0.20984841625045514, 0.22523845495064454, 0.20983176361918965, 0.8915793199349665, 0.16712752688092003, 0.19542110852220418, 0.16151468384459622, 0.20370663599178573, 0.1759622793770037, 0.17895946963052267, 0.17534309159715467, 0.17644278838248206, 0.1893976511557829, 0.1770744306958455, 0.17378721070807912, 0.1199170707221181, 0.08204042853234228, 0.07968821024496464, 0.0761244717745283, 0.07907021142316228, 0.07828479912634789, 0.11861601363638252, 0.0657366666194188, 0.0596390111174]}, "mutation_prompt": null}
{"id": "b419e792-bba0-4026-b8dc-79af6ddcc410", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.3 + 0.4 * self.success_rate, 0.4, 0.9)  # Changed line\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Fine-tuned the formula for updating the scaling factor to enhance convergence speed.", "configspace": "", "generation": 50, "fitness": 0.41459606830241963, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.34.", "error": "", "parent_id": "f53e9e35-a513-4450-a323-e2bef7858b41", "metadata": {"aucs": [0.9162614216621094, 0.9195864846392009, 0.9144526446601077, 0.13312029564368444, 0.9205122484900091, 0.9027216414519832, 0.9186925949784783, 0.9137059847448489, 0.9055342259097314, 9.999999999998899e-05, 0.07625255327068592, 0.8201210987571694, 0.15671722974840252, 0.828468095798149, 0.04484216016778919, 0.019284585572684976, 0.8290733212106925, 0.055134777001496826, 0.10192722330683102, 0.07990011144200215, 0.07627958922315115, 0.07785824599893243, 0.12218600914399247, 0.027341167954701984, 0.14105422714231863, 0.1538196075436674, 0.08944602105044341, 0.09930757235250798, 0.17248532160914842, 0.07766112114861667, 0.11575938746656134, 0.10108889747165917, 0.02876200633027215, 0.10800271348652224, 0.08581672399589202, 0.10340047964180032, 0.9862262055079353, 0.980731485116204, 0.9235470867396955, 0.9812302810413956, 0.9742845390053007, 0.9645134931768, 0.9739738765730495, 0.9810368970661021, 0.9632799163104774, 0.7914328885940558, 0.7539963376797495, 0.7973303086577832, 0.7741426063554395, 0.7577091354905136, 0.7779206552601607, 0.7877871754298029, 0.12262575488549265, 0.7804917839456365, 0.38435382073715907, 0.20908359632509288, 0.9053041108259471, 0.9309453114184447, 0.9409853470835456, 0.21257459842934912, 0.931818486275905, 0.9178972567596975, 0.408490315357966, 0.12775500885242685, 0.3028475445570715, 9.999999999998899e-05, 0.8599133465389466, 0.7804869759540614, 0.24726312354119495, 0.2265460737578937, 0.370336927317641, 0.2625645573041788, 0.2253973225491538, 0.2347628318086784, 0.8577543460343937, 0.230711921502733, 0.8509010722314907, 0.1826373387610899, 0.3781873162671845, 0.2506480014612462, 0.3773947517898809, 0.254492608974937, 0.08399162497437063, 0.2366192477137995, 0.07319442999584047, 0.8501261166967653, 0.8512117847074061, 0.8511418424434871, 0.06922240115027212, 0.09026281946302639, 0.8759334296618528, 0.40965435851999543, 0.03460981093858462, 0.8823317122606903, 0.07439380455257139, 0.8524426741155863, 0.8889997968911639, 0.8762237056723929, 0.8559088557352972, 0.11219104745941677, 0.08840506021704164, 0.2659081649047813, 0.08232865231102837, 0.6894671479926431, 0.11051316310152992, 0.11557086721667109, 0.43194726982612297, 0.10386912634312162, 0.7615073860456578, 0.0977623420438305, 0.7643400009546444, 0.7766278672663708, 0.771132408493826, 0.7694780910102034, 0.7338794613517383, 0.7607134805704667, 0.7633048818388163, 0.8845326515522853, 0.8871765408881409, 0.893863187503817, 0.8971505702826083, 0.9001215969146895, 0.900171085789539, 0.891854001815471, 0.9021750966607532, 0.889348866150542, 0.0933119113503661, 0.047800212672727826, 0.07533619134448821, 0.050401203556040275, 0.05863229379880053, 0.107533203454931, 0.10319328079802415, 0.09610426943489692, 0.1028740209855954, 0.24327526644277664, 0.8498751876175583, 0.19721744329850954, 0.7878887080240844, 0.2880931563614607, 0.8061228991796143, 0.23179602717260273, 0.17795383614288585, 0.24442417714761955, 0.4518320834538203, 0.5571633352638112, 0.1871250036278863, 0.5403714913035031, 0.287459246793191, 0.258125928399461, 0.2423417872045387, 0.19846753616981327, 0.2705681759835964, 0.4148811544751265, 0.46947568429359243, 0.40441874685237944, 0.7807605803494081, 0.29215046337657924, 0.1927968377332392, 0.5673453715866273, 0.3640703092720664, 0.4503205005078086, 0.19804856409224703, 0.20699959604457374, 0.208899361004925, 0.21521285172584126, 0.13926453221083923, 0.17803051924656121, 0.17788726094012652, 0.2061345420741023, 0.2433886111971908, 0.20982918921318694, 0.2064337871576304, 0.2078370558219298, 0.1947623437951853, 0.22250492824364065, 0.19650099025526724, 0.18343206479300056, 0.2063436113895688, 0.25290332423005724, 0.18859621866956133, 0.18590330764440655, 0.1069365987747064, 0.9415261854341498, 0.17827387339040524, 0.12237744185786215, 0.9457748365711715, 0.14843503759187737, 0.16430973586522157, 0.9404021648243265, 0.21340684816339006, 0.9382782586550611, 0.15690720279860904, 0.22656888598697422, 0.21004373013202404, 0.9399385979776455, 0.16681929480246904, 0.21394853870163155, 0.18698525356244422, 0.18256279936649822, 0.17235627793695807, 0.1922857626392761, 0.1800870220862535, 0.166488569404858, 0.18952443218476833, 0.18143699497188792, 0.182411387396886, 0.07059357133337052, 0.0781491273500391, 0.07883427335558901, 0.08122025084848916, 0.06860187530863526, 0.07747872965311198, 0.09044437955815754, 0.07023565748377891, 0.09598641090683646]}, "mutation_prompt": null}
{"id": "759a52f9-5c86-4c41-91cf-413eeefec990", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.8 * self.success_rate + 0.2  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Slightly increase the weight in the success rate update formula for faster adaptation.", "configspace": "", "generation": 51, "fitness": 0.4314780628159282, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.28.", "error": "", "parent_id": "f53e9e35-a513-4450-a323-e2bef7858b41", "metadata": {"aucs": [0.7992521889985171, 0.79705645824509, 0.7916608568737555, 0.5509425486189863, 0.8026289330790102, 0.7864638341958832, 0.7998627328898116, 0.8015731439367505, 0.802223870604472, 0.6531734172200869, 0.646292789254773, 0.7038893858845097, 0.6689490821509396, 0.6725469551884009, 0.6942512907335695, 0.653823877328956, 0.6567585568448105, 0.6930854573401509, 0.14118474182180762, 0.13177192213940359, 0.14816739036479198, 0.0822888464082756, 0.11051891553887816, 0.027100657760731894, 0.09100646069071905, 0.0662929405191981, 0.10434328481726696, 0.11663727637908072, 0.09265845382941074, 0.08893606967709966, 0.08104529446913145, 0.10098892330400067, 0.02730802788068054, 0.10549266885275987, 0.09530626634735395, 0.0849117755667812, 0.9862936706855335, 0.9816968350069125, 0.9600936838065779, 0.9833099205634082, 0.9804892680324375, 0.972978250156974, 0.9810867360021058, 0.9817140456792101, 0.9711991127119467, 0.6082107283760174, 0.5918847936967869, 0.6790878845124, 0.6282494730135264, 0.6230937543868167, 0.623243946833327, 0.5419639915965908, 0.08660001369334136, 0.628014321522224, 0.7985869595591352, 0.809770871213159, 0.7991124477453593, 0.8322986492590879, 0.8411393287663802, 0.8618392074146803, 0.8001582892607406, 0.829474974987433, 0.8303212733398568, 0.1277187770448056, 0.6295267524843393, 0.6622665165832524, 0.6119680147870377, 0.6178704286933739, 0.7115172872452102, 0.6893968674438833, 0.6672022146654994, 0.6607476057245959, 0.5819050125018198, 0.63556627782143, 0.6347830004026608, 0.6198627050180637, 0.6588360309723529, 0.6179935220553673, 0.1293488325981187, 0.6608760698288159, 0.1325327787661017, 0.6467464798321508, 0.6777499325527764, 0.6959077792902546, 0.6641210746562816, 0.6574276984424987, 0.6458861343798721, 0.6465814841243369, 0.010031090872004045, 0.629114675241792, 0.7225260408034825, 0.09149177124359065, 0.6932440164389304, 0.7334459932693354, 0.6268311474825042, 0.5645676627796399, 0.7712577002189975, 0.7192124432648384, 0.7522414362503547, 0.44497955889268537, 0.5301688513397815, 0.31940959204395336, 0.509133846513214, 0.46812605224765147, 0.4985735180867473, 0.06717330471877925, 0.38591304680230143, 0.23170200672829977, 0.5036988468711248, 0.5263214247282954, 0.5203980155073336, 0.4814749667100552, 0.45863569518254177, 0.47714373175171243, 0.46887731166919333, 0.5129368868009276, 0.4624501905542773, 0.7677754868514023, 0.7479075982939795, 0.41357438188204865, 0.794635675671334, 0.8042153303836302, 0.7975315364580043, 0.8150793823266889, 0.7960397456429135, 0.7774270757275279, 0.094350693867719, 0.10504650611043398, 0.08934025285145542, 0.13424641643319934, 0.09476665795589201, 0.07091037872566552, 0.10539633733490628, 0.103740379015275, 0.0889974674123345, 0.22599614434572934, 0.25155574519565105, 0.703093462358166, 0.3121886392525324, 0.285634593272845, 0.2729220391323993, 0.4107752632939642, 0.22576032846427752, 0.15228711029019326, 0.38454101300633703, 0.47456373770711, 0.4786974826687356, 0.33136242895467216, 0.40235662372618564, 0.3673947422738183, 0.3348613921387089, 0.35596963898824796, 0.47050561666687374, 0.2595085857209436, 0.2487744612935271, 0.3574134179519356, 0.2925855428421247, 0.32140710749079027, 0.35429343230739907, 0.3899713557879475, 0.41324666206670446, 0.4028881507278388, 0.20885703233445552, 0.21210854645164035, 0.1993873387144215, 0.1844062179380459, 0.16215243910464994, 0.18309946337724803, 0.1825303786545539, 0.17968126170450538, 0.17999401761696388, 0.2442422935888594, 0.19817461577632878, 0.2427142494797475, 0.20355274151490033, 0.17939174501310717, 0.19607287252346872, 0.18158398202371517, 0.1825970004682963, 0.2218521230757602, 0.18752962108436855, 0.14639872592175218, 0.16330936728776346, 0.16769099645395058, 0.177879556389675, 0.19554731195974906, 0.8847831915339346, 0.14779467440075822, 0.16373515260843707, 0.8958953594219758, 0.21239295090169585, 0.20660133101742229, 0.20984842099427392, 0.225238451628908, 0.2098318351526477, 0.8910957204750437, 0.16712753541407, 0.19542110779980537, 0.16506981237835916, 0.1925041350188974, 0.17598239172677166, 0.17754544962309904, 0.16733546667311294, 0.17637281766248947, 0.20201587017452227, 0.17651428176584527, 0.20502801027241324, 0.12016214567029915, 0.082040591073955, 0.06534907395729772, 0.07612433078279768, 0.07927297745807049, 0.0736841229226004, 0.11857619911783679, 0.06626122661531642, 0.05963918416278324]}, "mutation_prompt": null}
{"id": "8afd3a56-43c4-4a10-b30a-bac4dbb351c6", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c, d = self.population[np.random.choice(idxs, 4, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b + c - d), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Enhanced mutation strategy by adding diversity from a fourth vector to improve exploration.", "configspace": "", "generation": 52, "fitness": 0.2008737746226355, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "f53e9e35-a513-4450-a323-e2bef7858b41", "metadata": {"aucs": [0.3214530756914097, 0.3649827895955655, 0.34090279595683914, 0.37744634032717506, 0.4047205572306046, 0.4451950992425291, 0.4311805978943788, 0.395132467348957, 0.3899277310604542, 0.19300956508841705, 0.17393973689888975, 0.15348114620153697, 0.1635109002743429, 0.1929187892417532, 0.19595071384938834, 0.20039244131989986, 0.1666760606919091, 0.1714788988828575, 0.07174849293972452, 0.06605135389278571, 0.07808460805834361, 0.07045787150198868, 0.060560220741453175, 0.08556476598446439, 0.06469888801853829, 0.0684974979243147, 0.060345409263842686, 0.05766610919763249, 0.07895636073082712, 0.05186291497110429, 0.07021230879051932, 0.061311072161766234, 0.06379925428558941, 0.04609552548300522, 0.0631400491376024, 0.05874708508965887, 0.9892560523284677, 0.9667678679013636, 0.977285767680118, 0.9842179930930606, 0.9869929732108629, 0.9833238658300804, 0.9795279367752538, 0.9869207636292985, 0.989743217052957, 0.1577194749500339, 0.1681356604394263, 0.1843000962924619, 0.17844366322708483, 0.17748320689350205, 0.17567305382056952, 0.19757512775280606, 0.20071692903133964, 0.17661673668186828, 0.2443661255841163, 0.2820524420454995, 0.25110289632387206, 0.3617088908041731, 0.3640629866745926, 0.39897297102553453, 0.32558385780460175, 0.26418433512950434, 0.5446402722075018, 0.0797824426030711, 0.12396692648457852, 0.0686694271587488, 0.09181546726601209, 0.09302738577131564, 0.11161405518820378, 0.08897213417968264, 0.10751042467619154, 0.08289678916050902, 0.010002779031936915, 0.0096127440419157, 0.02109691193351515, 0.0754459288403625, 0.0713175303925947, 0.09739732717308613, 0.10911141369538169, 0.12457953423625878, 0.07637382582849916, 0.1005793905241007, 0.13835728380459955, 0.10254567119006008, 0.09990726268684524, 0.09940764220429776, 0.09957128840127694, 0.10952723157068611, 0.07940183586556193, 0.06819313441913166, 0.2257978014035873, 0.2043384515751413, 0.2418035390912847, 0.15056605577674675, 0.19511375635331807, 0.22849844172303724, 0.23336016559715933, 0.21707385034684112, 0.24207978261775354, 0.00830444362574434, 0.01229290691732643, 0.006235606670872196, 9.999999999998899e-05, 0.012170655268169739, 0.0013711018289992438, 0.0008877140015327578, 0.002087296575682185, 0.0014984632178871582, 0.09480959388355281, 0.09443930425309588, 0.0953137056457044, 0.09638362891128127, 0.10603671760415567, 0.1055176757511086, 0.12433183799804703, 0.12613378835840772, 0.1333490713994041, 0.3366798063261839, 0.3316692276211647, 0.33262144556826556, 0.3871785134587371, 0.34237940663625255, 0.36040540326147463, 0.3431433724447751, 0.3192619272506858, 0.37673345000886405, 0.07105685237762394, 0.06883462890955139, 0.07741001940726566, 0.05856837420936334, 0.06561211574459247, 0.06593915920554194, 0.07186712012729402, 0.08649548197770596, 0.06336151990837702, 0.2083950532959722, 0.13108286162366733, 0.19868388068368148, 0.15632927847097833, 0.1438201405634807, 0.20511076685511087, 0.2274334324824403, 0.1595612502445194, 0.21339601449672385, 0.20729357189949815, 0.23047534117873092, 0.22583663811915589, 0.19432411095834323, 0.21838127248499806, 0.20425026074502284, 0.20808025959625742, 0.21414606450893459, 0.20339323880525662, 0.15534925226923713, 0.16364255853784726, 0.16457235230973222, 0.13458158675411347, 0.15350287602439183, 0.1502583551591924, 0.1814299188253523, 0.16151929631425788, 0.15573030411472244, 0.16306389860561288, 0.1555011802258176, 0.18547047379311843, 0.156532440192924, 0.1663116385139508, 0.16861001823030708, 0.14892719284252376, 0.17741801738398522, 0.16990378910111936, 0.15889072489859024, 0.15971506072919806, 0.16611665138096976, 0.1760172526071827, 0.16589687649897278, 0.1666822063014608, 0.16084469170043336, 0.15295007595214627, 0.1538261635532584, 0.5245725008655108, 0.19332068521475199, 0.19006860867449327, 0.29783850324782823, 0.18592091512393583, 0.16351651338537343, 0.2691914524709774, 0.3950682508358285, 0.2705020732229638, 0.23475103943750797, 0.15995982119060848, 0.12386804857160094, 0.25034207466025205, 0.15512192169447914, 0.16537196937512055, 0.5722313839773987, 0.124277510845335, 0.20959888470931687, 0.18107786842821183, 0.18630458551708684, 0.18567980772193649, 0.17711172516213158, 0.19924374638657638, 0.19582047624243792, 0.18327290888573222, 0.18175183109738013, 0.17519020905432536, 0.061777479546045844, 0.057934562442515714, 0.046592999547396485, 0.06243845735222253, 0.05521551858150653, 0.051562855900442406, 0.04767824634468287, 0.05495263290599339, 0.05907733170816298]}, "mutation_prompt": null}
{"id": "16f97b01-25cd-45c3-976b-83c64eef1802", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.8 * self.success_rate + 0.2  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Refined success rate update formula to further enhance adaptation responsiveness.", "configspace": "", "generation": 53, "fitness": 0.4314780628159282, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.28.", "error": "", "parent_id": "f53e9e35-a513-4450-a323-e2bef7858b41", "metadata": {"aucs": [0.7992521889985171, 0.79705645824509, 0.7916608568737555, 0.5509425486189863, 0.8026289330790102, 0.7864638341958832, 0.7998627328898116, 0.8015731439367505, 0.802223870604472, 0.6531734172200869, 0.646292789254773, 0.7038893858845097, 0.6689490821509396, 0.6725469551884009, 0.6942512907335695, 0.653823877328956, 0.6567585568448105, 0.6930854573401509, 0.14118474182180762, 0.13177192213940359, 0.14816739036479198, 0.0822888464082756, 0.11051891553887816, 0.027100657760731894, 0.09100646069071905, 0.0662929405191981, 0.10434328481726696, 0.11663727637908072, 0.09265845382941074, 0.08893606967709966, 0.08104529446913145, 0.10098892330400067, 0.02730802788068054, 0.10549266885275987, 0.09530626634735395, 0.0849117755667812, 0.9862936706855335, 0.9816968350069125, 0.9600936838065779, 0.9833099205634082, 0.9804892680324375, 0.972978250156974, 0.9810867360021058, 0.9817140456792101, 0.9711991127119467, 0.6082107283760174, 0.5918847936967869, 0.6790878845124, 0.6282494730135264, 0.6230937543868167, 0.623243946833327, 0.5419639915965908, 0.08660001369334136, 0.628014321522224, 0.7985869595591352, 0.809770871213159, 0.7991124477453593, 0.8322986492590879, 0.8411393287663802, 0.8618392074146803, 0.8001582892607406, 0.829474974987433, 0.8303212733398568, 0.1277187770448056, 0.6295267524843393, 0.6622665165832524, 0.6119680147870377, 0.6178704286933739, 0.7115172872452102, 0.6893968674438833, 0.6672022146654994, 0.6607476057245959, 0.5819050125018198, 0.63556627782143, 0.6347830004026608, 0.6198627050180637, 0.6588360309723529, 0.6179935220553673, 0.1293488325981187, 0.6608760698288159, 0.1325327787661017, 0.6467464798321508, 0.6777499325527764, 0.6959077792902546, 0.6641210746562816, 0.6574276984424987, 0.6458861343798721, 0.6465814841243369, 0.010031090872004045, 0.629114675241792, 0.7225260408034825, 0.09149177124359065, 0.6932440164389304, 0.7334459932693354, 0.6268311474825042, 0.5645676627796399, 0.7712577002189975, 0.7192124432648384, 0.7522414362503547, 0.44497955889268537, 0.5301688513397815, 0.31940959204395336, 0.509133846513214, 0.46812605224765147, 0.4985735180867473, 0.06717330471877925, 0.38591304680230143, 0.23170200672829977, 0.5036988468711248, 0.5263214247282954, 0.5203980155073336, 0.4814749667100552, 0.45863569518254177, 0.47714373175171243, 0.46887731166919333, 0.5129368868009276, 0.4624501905542773, 0.7677754868514023, 0.7479075982939795, 0.41357438188204865, 0.794635675671334, 0.8042153303836302, 0.7975315364580043, 0.8150793823266889, 0.7960397456429135, 0.7774270757275279, 0.094350693867719, 0.10504650611043398, 0.08934025285145542, 0.13424641643319934, 0.09476665795589201, 0.07091037872566552, 0.10539633733490628, 0.103740379015275, 0.0889974674123345, 0.22599614434572934, 0.25155574519565105, 0.703093462358166, 0.3121886392525324, 0.285634593272845, 0.2729220391323993, 0.4107752632939642, 0.22576032846427752, 0.15228711029019326, 0.38454101300633703, 0.47456373770711, 0.4786974826687356, 0.33136242895467216, 0.40235662372618564, 0.3673947422738183, 0.3348613921387089, 0.35596963898824796, 0.47050561666687374, 0.2595085857209436, 0.2487744612935271, 0.3574134179519356, 0.2925855428421247, 0.32140710749079027, 0.35429343230739907, 0.3899713557879475, 0.41324666206670446, 0.4028881507278388, 0.20885703233445552, 0.21210854645164035, 0.1993873387144215, 0.1844062179380459, 0.16215243910464994, 0.18309946337724803, 0.1825303786545539, 0.17968126170450538, 0.17999401761696388, 0.2442422935888594, 0.19817461577632878, 0.2427142494797475, 0.20355274151490033, 0.17939174501310717, 0.19607287252346872, 0.18158398202371517, 0.1825970004682963, 0.2218521230757602, 0.18752962108436855, 0.14639872592175218, 0.16330936728776346, 0.16769099645395058, 0.177879556389675, 0.19554731195974906, 0.8847831915339346, 0.14779467440075822, 0.16373515260843707, 0.8958953594219758, 0.21239295090169585, 0.20660133101742229, 0.20984842099427392, 0.225238451628908, 0.2098318351526477, 0.8910957204750437, 0.16712753541407, 0.19542110779980537, 0.16506981237835916, 0.1925041350188974, 0.17598239172677166, 0.17754544962309904, 0.16733546667311294, 0.17637281766248947, 0.20201587017452227, 0.17651428176584527, 0.20502801027241324, 0.12016214567029915, 0.082040591073955, 0.06534907395729772, 0.07612433078279768, 0.07927297745807049, 0.0736841229226004, 0.11857619911783679, 0.06626122661531642, 0.05963918416278324]}, "mutation_prompt": null}
{"id": "ab61b2c9-ce9c-434c-8777-231d936b7110", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate * (np.min(self.fitness) - np.max(self.fitness)), 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Introduced a dynamic update for scaling_factor based on the difference between the best and worst fitnesses.", "configspace": "", "generation": 54, "fitness": 0.1123943527738631, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.09.", "error": "", "parent_id": "f53e9e35-a513-4450-a323-e2bef7858b41", "metadata": {"aucs": [0.17236044007354323, 0.24491161526372496, 0.1759924846975135, 0.07962670382186321, 0.22297905397020035, 0.12747141454607513, 0.2889700591205123, 0.19948630037805037, 0.2555677009577777, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006108037325654236, 9.999999999998899e-05, 9.999999999998899e-05, 0.02961330383970784, 9.999999999998899e-05, 9.999999999998899e-05, 0.08920656561999962, 0.07415361865235903, 0.08174497316870599, 0.03744124437825991, 0.11386151948425538, 0.0059286678489055555, 0.09220009716216682, 0.05947348401488539, 0.03305880298916941, 0.09810274868957636, 0.06685874579011819, 0.02987024601450372, 0.043663806266289074, 0.08225045444555257, 0.003385954382950307, 0.09919316716321769, 0.029953613767064624, 9.999999999998899e-05, 0.21116531771006086, 0.0955764655640633, 0.06120690865404754, 0.11304749363724986, 0.13116231237152676, 0.0615587889211876, 0.06665470201807344, 0.1378041754604219, 0.04686335183391199, 0.08949209145300863, 0.03502202843254054, 0.03320673324712731, 0.03279826026042121, 0.035940041847194126, 0.0266028103817596, 0.20974749178633267, 9.999999999998899e-05, 0.05585172313278053, 0.12464488542233465, 0.0796203700454795, 0.1110157499263652, 0.18109614387390494, 0.14524841140215228, 0.03886713070580661, 0.11461431657514098, 0.11406283923676219, 0.1798476965773036, 9.999999999998899e-05, 0.05687410683177474, 9.999999999998899e-05, 0.08642433244950609, 9.999999999998899e-05, 0.06380945119901404, 9.999999999998899e-05, 9.999999999998899e-05, 0.032973744396156635, 9.999999999998899e-05, 0.03723922619764908, 9.999999999998899e-05, 0.13040276393910621, 0.07161381645837261, 0.13086585275981, 0.140770300773158, 0.025743632639644742, 0.14446752227742832, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06451139202205358, 0.03668205518855017, 0.037740415645462044, 0.07343931897587641, 0.011509722819075807, 0.03675248972252898, 0.20796818985770793, 0.04024966498693083, 0.042540803573788755, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023285138010018636, 0.1175098552812287, 9.999999999998899e-05, 0.007113202286601172, 9.999999999998899e-05, 0.033274879368774046, 9.999999999998899e-05, 0.07631396708812788, 0.2459572265408858, 0.17521940658654966, 0.2436076236425635, 0.13418255601567874, 0.1525888749331329, 0.28819715648994326, 0.3048319966541603, 0.27124088484607634, 0.3941237451291698, 0.08188619885924786, 0.025651453271540947, 0.04585014711050195, 0.0635886164354843, 0.04808229745383508, 0.08462138836481536, 0.04869170876366802, 0.08336214233605566, 0.05429070330884678, 0.17238913089127073, 0.24330347633254457, 0.16528481927508532, 0.1928519940834883, 0.18968691307536933, 0.17811133738488205, 0.23316259113502713, 0.17572423132660675, 0.19961402208305612, 0.30014637126090027, 0.2454248790821263, 0.15126785009265076, 0.219692631602458, 0.1846823236202012, 0.18482482517498566, 0.1989642405412847, 0.19898545049067695, 0.18384415246424157, 0.21462522250062077, 0.12608262136685622, 0.08070491008894842, 0.12992898608455705, 0.15139485759458626, 0.16564271743620484, 0.14427392135886608, 0.17062511087863674, 0.1270658162688718, 0.19086527214811, 0.1854941329422961, 0.20973079782920678, 0.21020113180278754, 0.15829446253530988, 0.19772156701816723, 0.24125174443527342, 0.2900585619837771, 0.2148012162197197, 0.18596665929001144, 0.1639941280269157, 0.16749160957577147, 0.17107523428989246, 0.1643835166038592, 0.19420196697214465, 0.16532185551102752, 0.16515385130134108, 0.16706806793522577, 0.17175212739085433, 0.13694111901066242, 0.10328059520524335, 0.11376358868748049, 0.1666667397526348, 0.06558005507046982, 0.28906032147960314, 0.12308166594923964, 0.16443684716531282, 0.424546771579432, 0.2055980313008785, 0.29678166565249453, 0.15503769763402975, 0.22732526116720175, 0.16852729022076096, 0.394979776601452, 0.05880562655911603, 0.21100547064162867, 0.1923002795084362, 0.18235686325595257, 0.19952525874204607, 0.2504197479958392, 0.1967102510150205, 0.2307182337339817, 0.19129608021901967, 0.21474586912876026, 0.20092355843860676, 0.09358182294737383, 0.08511106180074146, 0.07896873422948625, 0.05719901799874183, 0.05041213991272997, 0.05862266464714416, 0.10889143837595616, 0.08703272787493355, 0.09380958254526561]}, "mutation_prompt": null}
{"id": "522d5f07-ddac-42a1-b855-106a53b9570c", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.6 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Enhanced scaling factor adaptation using success rate for improved convergence.", "configspace": "", "generation": 55, "fitness": 0.4312090356567013, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.28.", "error": "", "parent_id": "f53e9e35-a513-4450-a323-e2bef7858b41", "metadata": {"aucs": [0.7992502262315352, 0.7970564562334613, 0.7926536258298407, 0.5374092896172993, 0.803320023115788, 0.7864618175029086, 0.799858121165146, 0.8016654162590868, 0.8022242152284671, 0.664536604167254, 0.6597562946665952, 0.7038340914505832, 0.6618855856209009, 0.6742692397612424, 0.695528305663802, 0.6497662871819531, 0.6420482795218396, 0.6805083013756057, 0.1411847411260635, 0.13177192206854038, 0.14799612534552176, 0.08173787396105614, 0.11051891551850335, 0.02710065779461379, 0.0910064606906692, 0.06629294065761604, 0.10437341810029188, 0.11914652278439464, 0.09267065197553437, 0.08893606976212576, 0.08104529416582495, 0.10104287589037309, 0.02730848612967185, 0.10549700471518786, 0.09530626644947149, 0.0849117761810434, 0.9862936706855833, 0.981696835014886, 0.9600936838081515, 0.9833099205636935, 0.9804892680325642, 0.9729782501569356, 0.9810867360023743, 0.9817140456793843, 0.97119911271261, 0.605735657637736, 0.5919085827087068, 0.6790891965616209, 0.6282492109485753, 0.623079797013377, 0.623234236822078, 0.5425504097842851, 0.08660001370741122, 0.6277926342990128, 0.7985869595591352, 0.809770871213159, 0.7991124477453593, 0.8322986492590879, 0.8411393287663802, 0.8618392074146803, 0.8001582892607406, 0.829474974987433, 0.8303212733398568, 0.12771877700311218, 0.6238383020329359, 0.6629696889945615, 0.6217504966865566, 0.619295610572677, 0.7115171756462688, 0.6904143449340197, 0.6654902583948643, 0.6607296709993087, 0.5819048935831997, 0.638210613989914, 0.634771509541362, 0.6192587780425676, 0.6594820103133345, 0.6153308811489533, 0.12934883118888318, 0.6608831907359081, 0.13253277874605118, 0.6430677595527877, 0.677705816731435, 0.6991696625747352, 0.6612955919626977, 0.65880998869635, 0.6459038574398719, 0.6550696373147873, 0.010031096940886663, 0.627305251827946, 0.7254886158163228, 0.091491774465018, 0.7077237106122458, 0.7265444683846417, 0.6287848112425407, 0.5650199630678079, 0.7792492270857458, 0.7247610064166763, 0.7522424439384351, 0.4396065934384227, 0.5360041059260724, 0.3323695955480098, 0.5123136823520157, 0.4721852303181372, 0.4926958878880934, 0.06717326882826324, 0.38001865609167396, 0.2345351596033104, 0.5004587493567034, 0.5179451038318453, 0.5172698259189201, 0.47362950448955676, 0.4605882822735935, 0.487862312632371, 0.47397401545062645, 0.5232865855312001, 0.47382185829620116, 0.7662117306876172, 0.7551684592196423, 0.411351645461839, 0.7903979088166024, 0.8043567543461864, 0.7969144740969404, 0.8157657238844849, 0.7946275744495157, 0.7785970967758682, 0.09368040273179068, 0.10504650560430584, 0.0981154554175322, 0.13424644757068893, 0.0946622257359413, 0.0710063870422577, 0.10518289656007329, 0.1037403824598736, 0.08888107950666813, 0.22518547208240303, 0.2515310539845983, 0.7030946316951301, 0.3126850957926357, 0.2853037910813546, 0.27293802524309696, 0.4083518086716893, 0.22576303721257596, 0.15229613950161947, 0.3845398385515698, 0.4735230796540153, 0.4847053579359413, 0.33136412311529717, 0.4023655434718081, 0.36745562371463447, 0.3349935891214434, 0.35596984747341065, 0.47109096166639874, 0.2595060259704116, 0.24844338190407034, 0.3573331592023513, 0.29258288874146277, 0.3211042624260797, 0.3541929400967023, 0.3901290701187653, 0.41318375888681447, 0.40287097542746475, 0.20885696763883854, 0.21210852433454885, 0.19938760475093031, 0.18440659780537294, 0.16215253416720243, 0.18309925216781664, 0.182530394292162, 0.17968128301379815, 0.1799940196629759, 0.2442422936951526, 0.19817461587329543, 0.2427142492044243, 0.2039072926023684, 0.17942062307592765, 0.19607227668334837, 0.1816746584616521, 0.17625904501875778, 0.22185212307802937, 0.1875296210987104, 0.1463987270346463, 0.163309367219181, 0.16769099646775554, 0.17787955644802644, 0.19554731229414102, 0.8847831589622138, 0.14779467439495508, 0.16373516147413214, 0.8958952940037996, 0.21239295091246446, 0.20660133094385902, 0.20984842103012247, 0.22523845160763523, 0.20983183516835324, 0.8911040927302195, 0.16712753544894798, 0.1954211077964062, 0.15759655951942952, 0.18235686325595257, 0.17598251327225956, 0.17754232406693282, 0.16733559616000493, 0.17637222596235147, 0.17397851895960614, 0.17651526408942209, 0.17378714744432378, 0.12005826605667191, 0.08204059172713918, 0.06534907547335533, 0.07612433006043462, 0.0789833780995095, 0.0736841232422939, 0.0924137133481503, 0.06573708062081574, 0.05963918482003594]}, "mutation_prompt": null}
{"id": "f1fe7181-ab23-454d-b2f2-4be5c9a4eb82", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                # Changed line\n                mutant = np.clip(best_individual + self.scaling_factor * (a - b + c - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.4, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Improved local search by blending crossover rate and scaling factor for better exploration and exploitation balance.", "configspace": "", "generation": 56, "fitness": 0.14693430895613901, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "f53e9e35-a513-4450-a323-e2bef7858b41", "metadata": {"aucs": [0.20659291268722013, 0.23168604206853982, 0.20993227432772, 0.24452606224610351, 0.29586382957833235, 0.2678500195620098, 0.2236539426709213, 0.2781591624351494, 0.2738599554443999, 0.05058335464329233, 0.055690543226886935, 0.04966389461401799, 0.031507709131814, 0.057560077762560335, 0.0489564235921609, 0.05190758984440835, 0.07420112232400788, 0.0574799133393703, 0.04461335388430743, 0.04842831767218936, 0.05906766419139109, 0.05376084283146032, 0.05889720698935075, 0.053105122372476554, 0.06955454807101102, 0.053059867880135614, 0.05388166741877698, 0.03192832083293928, 0.030370792358619614, 0.0367353916823111, 0.04399033368544458, 0.05348707170963085, 0.04188174980031456, 0.037271526065121185, 0.03824210037812703, 0.038406189601638885, 0.9855342062489074, 0.9895214088948114, 0.9806545283177225, 0.9770435718195993, 0.9856537410459002, 0.9744628259367734, 0.986461041991029, 0.9891190346404181, 0.9709966603374044, 0.11902619506630985, 0.09753707278013879, 0.1073368690600015, 0.09966891516988285, 0.11313631361859877, 0.12996532245645198, 0.13427935477097197, 0.08311543168895064, 0.12323974042582342, 0.16598947566702804, 0.1761723114192002, 0.16597220078778718, 0.21099293575976075, 0.1841680458077053, 0.18647567511453333, 0.16839720988840545, 0.19456861910347734, 0.19649912681335124, 0.03603013797471899, 0.05569033583180172, 0.017219600568698645, 0.05881304295010359, 0.03538692492115769, 0.03015229436091449, 9.999999999998899e-05, 0.039391274602684656, 0.03240221021122702, 0.016303775196441217, 0.02167274925154905, 0.009942467095770513, 0.05956492531678248, 0.01250759059196771, 0.01810342283462929, 0.037337106529033326, 0.04164380857840866, 0.05104602317352802, 0.009906792418757138, 9.999999999998899e-05, 0.018128675304609487, 0.013975192989304164, 0.056093484866604926, 0.019624766038856212, 0.0004064274710170457, 9.999999999998899e-05, 9.999999999998899e-05, 0.07355591915089499, 0.07743518956328166, 0.08632963985580755, 0.09134292032023128, 0.06857459104950481, 0.15555634178603628, 0.0946239255239898, 0.08548490137058684, 0.17144655270384324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029509705922453056, 0.04620089869014732, 0.026665822053461685, 0.027908934188384804, 0.031891800555519545, 0.029412717216030226, 0.04879634914188191, 0.036099622757106986, 0.04773402532227011, 0.2551070382048499, 0.20859474512361664, 0.24752985038677822, 0.23630148125954364, 0.23708446548745066, 0.2375954921969603, 0.21460559707258953, 0.23566091693815638, 0.2066849592719746, 0.05207212012197493, 0.05854599529218285, 0.06531481940571993, 0.050337528974670365, 0.046005499159687546, 0.0487293479194314, 0.048262266883123406, 0.05786230824721683, 0.05454086479455711, 0.11496873775103489, 0.13510824945722344, 0.14783402726100647, 0.2370762433105298, 0.14989023120089007, 0.13616278454112707, 0.14836474949341905, 0.1368834350740643, 0.15995374226451953, 0.15619068472772268, 0.1681409191944927, 0.1577058541426879, 0.15911231385548763, 0.16177982589307072, 0.15705824445332106, 0.1818452376307329, 0.18100378248298066, 0.20119643687673228, 0.11961703383709954, 0.11443857447488792, 0.1264833744858821, 0.13570356252754845, 0.12731101400103872, 0.1314594051451199, 0.1277945474447042, 0.12024689565957525, 0.13811128073044987, 0.15883569321964752, 0.15432267679108047, 0.16221124124206376, 0.14841232958120654, 0.16204744165011142, 0.17171811815030802, 0.15408206761737475, 0.14364656145938348, 0.13908715502768754, 0.1511721637138993, 0.14195711672209543, 0.1383613280379774, 0.14714059095631205, 0.1572453011860192, 0.1519885216345026, 0.1334182199856936, 0.16002674072005374, 0.15550639848370962, 0.15047444503900065, 0.16204116636359756, 0.22908153336998816, 0.14450594652698323, 0.18016133074142748, 0.3651860031522731, 0.27693947421481047, 0.3092610351574826, 0.1724582489442742, 0.17249525157022294, 0.13251444656137867, 0.17058664497633125, 0.10573437316434753, 0.12655116147479217, 0.14044131664852377, 0.12384361823952383, 0.2747127487544324, 0.2081114476265965, 0.1873308024616649, 0.1846462564032466, 0.18420785460332345, 0.1840640859673306, 0.16312976177764282, 0.18008416175336517, 0.21080466586352908, 0.1575961137402897, 0.13426550618175792, 0.03608388961720299, 0.03787313204833154, 0.04713808900333116, 0.03834196863255601, 0.054331909964704383, 0.046364922732054614, 0.05209480735615801, 0.057278230092263405, 0.04006061515922954]}, "mutation_prompt": null}
{"id": "4377dc65-57f7-48a2-acc8-5c82e680b163", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.3 + 0.5 * self.success_rate, 0.3, 0.9)  # Changed scaling factor lower limit\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Enhanced exploration by adjusting scaling factor limit to improve success rate adaptation.", "configspace": "", "generation": 57, "fitness": 0.47401547002023925, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.32.", "error": "", "parent_id": "f53e9e35-a513-4450-a323-e2bef7858b41", "metadata": {"aucs": [0.852655620992429, 0.8808621624817707, 0.8519230796789625, 0.8559469870087169, 0.876690755146738, 0.8791606832462004, 0.8714988698713647, 0.8814815777190443, 0.8681197508355043, 0.6960070848953124, 9.999999999998899e-05, 0.7340236241182485, 0.7688176404013985, 0.7276299963785643, 0.6203587460088624, 0.018967670765784317, 0.004903360753501174, 0.7520912987869667, 0.1100330159466465, 0.12834652092556176, 0.1026742775271341, 0.07073638880876076, 0.1042972763972635, 0.09473696107359086, 0.1072102287009391, 0.07647215379060235, 0.08190544835570768, 0.08896384199344576, 0.08496482802937078, 0.10729925527835549, 0.11284046961350136, 0.1366895605873346, 0.08045945537404786, 0.07374229943035804, 0.11850226683243203, 0.08780827842181282, 0.9862558583104573, 0.9811994155810921, 0.944546616199363, 0.9815462923760268, 0.9797268612266788, 0.9697671907368525, 0.9799795440113772, 0.9809706144810489, 0.9740813042052321, 0.7186555571529267, 0.7135081945351254, 0.6475701866815012, 0.6316273900155847, 0.663339061597646, 0.7647514572917846, 0.678885988925513, 0.08171296903281089, 0.7337205109337769, 0.8778530893653781, 0.89362661926834, 0.8474188165094805, 0.906988410884668, 0.21298387222269166, 0.20610698978255215, 0.890356731278095, 0.8947779493174634, 0.888808938423849, 0.13200940360085078, 0.6865651812466136, 0.7204954222669173, 0.7197571476446611, 0.7130018610588078, 0.7865964946864361, 0.771696557888994, 0.7571895826094082, 0.7281414285712293, 0.7574448462735364, 0.7172224438285342, 0.7362977062221769, 0.7802987204871262, 0.12953449136715878, 0.7702119927647872, 0.8074180468449056, 0.7495136303138348, 0.7387208858523335, 0.6851355836571873, 9.999999999998899e-05, 0.7532116457515496, 0.7465880700877335, 0.7462931113806563, 0.729443819624904, 0.7696029273952169, 0.7452934128180152, 0.7455112980934389, 0.8161557593480763, 0.7661151320498878, 0.7583112141168845, 0.8119547633167431, 0.7440172648902603, 0.7929605814629412, 0.8285805219692065, 0.8045657192085881, 0.79830928631606, 0.44283928068600464, 0.633558312002392, 0.3993367560596668, 0.5570292085969442, 0.6725647034718557, 0.2787080544194034, 0.23550198880594075, 0.5528467010142177, 0.2329009253959642, 0.657440816479008, 0.6320569352927223, 0.6750558427818982, 0.6536123326059196, 0.666363863306567, 0.6559364141707089, 0.6188441223824963, 0.639834176460934, 0.6350635625837082, 0.842519770683861, 0.8321660042876927, 0.8553001017872923, 0.8471595670491241, 0.8320226974500451, 0.8479916195581046, 0.8497072848863308, 0.8605141702735645, 0.8471083318702436, 0.09416537752165954, 0.06340504558943316, 0.10129448626204685, 0.11203943310572972, 0.11674919224895253, 0.0975193058978826, 0.1455373547230936, 0.1431164836253943, 0.08781053685584206, 0.34692972812955014, 0.7868573279070987, 0.2512020823304978, 0.17722709059313002, 0.7817918593842412, 0.7565829766679554, 0.3920784871618461, 0.1761550370825713, 0.16239165916033127, 0.6407589156323208, 0.5392664813540711, 0.4584143119864498, 0.42991137951119807, 0.4111639852475222, 0.19954601542131556, 0.4266939410675795, 0.19983560758632513, 0.4968317726247655, 0.48676611519462853, 0.49234135886792196, 0.4355022710894819, 0.20461152448974107, 0.4470291919478391, 0.5243915000182433, 0.6082630824392121, 0.2759281715636841, 0.5216073995743389, 0.17335884440502636, 0.19905722455878117, 0.2260023651215296, 0.16760341743308904, 0.13824587290920587, 0.19167299941080795, 0.2109734877352777, 0.19299208037418525, 0.18843486601672876, 0.22232258765885182, 0.7252810626875463, 0.21920299268147336, 0.2070066335744667, 0.20729689570044418, 0.20829542204388418, 0.22260838327559418, 0.20462355866744297, 0.22485294280150825, 0.18802299516267207, 0.17472342934708707, 0.1852346654256598, 0.16939516407715127, 0.17810749911952295, 0.1963819708578728, 0.9222632750329584, 0.14824375265435374, 0.1640221752339499, 0.9260868739177817, 0.2130538241751797, 0.9059572645363057, 0.15666712742599065, 0.22531389059613482, 0.21121827933891657, 0.3207107275475153, 0.16738254880462022, 0.1994119628235449, 0.17442210403550795, 0.18961040572993226, 0.17181209785931784, 0.18510874853540193, 0.18041235849047565, 0.17833113008319235, 0.19315440404840778, 0.20910069037535983, 0.19013562610827273, 0.10879330246627084, 0.08111410541169972, 0.06459207249886256, 0.07849771720985133, 0.069511493915272, 0.08083484910887906, 0.07997047346886188, 0.06619773435655685, 0.07405929177077364]}, "mutation_prompt": null}
{"id": "f506fcd3-915c-431f-9575-d8d290ebbae1", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.3 + 0.5 * self.success_rate, 0.3, 0.9)  # Changed scaling factor lower limit\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate + 0.02 * np.random.rand(), 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Improve exploration by randomly adjusting the crossover rate within a small range.", "configspace": "", "generation": 58, "fitness": 0.45793794834853924, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.32.", "error": "", "parent_id": "4377dc65-57f7-48a2-acc8-5c82e680b163", "metadata": {"aucs": [0.8604210227427407, 0.8706111921080902, 0.8357965637112815, 0.8503687775175017, 0.8431138981680342, 0.8803830170425774, 0.8512056092030846, 0.8517085836563901, 0.8605050209628735, 9.999999999998899e-05, 9.999999999998899e-05, 0.7579550441110717, 0.7445085880245959, 0.7837569788571025, 0.045877054634162584, 0.6939749408862503, 0.7588445519988114, 0.7465640925202858, 0.07942364650625955, 0.09352605798182867, 0.10443184638479175, 0.10984144480630254, 0.12581905805304938, 0.1644056120451598, 0.11404455353985143, 0.09026509934244709, 0.09977862687255257, 0.14033473461109658, 0.09295549352441135, 0.09119367399745004, 0.11281086528177131, 0.08999645964952452, 0.026235409321014647, 0.10552046229128353, 0.09241556139087426, 0.09847444335387678, 0.9845531082059018, 0.9808158203861423, 0.09842912457769348, 0.9733054589473004, 0.9823530113444365, 0.960026654219281, 0.9637554088295768, 0.9844495932219731, 0.9677181123734524, 0.7043351225518677, 0.7155750058980328, 0.6566842118120135, 0.6829137647323417, 0.6692636979569702, 0.6904339643139388, 0.6563527945965737, 0.6813097114400818, 0.6954962277101477, 0.8789359144337945, 0.8748835413449876, 0.8999802268424549, 0.8623372649796759, 0.8834514199231559, 0.19133084916361187, 0.8835496289519514, 0.8864176392078295, 0.23731471356213474, 0.7369566500407363, 0.13348415537354408, 0.7636005710484606, 0.7664964281120186, 0.7449154320909586, 0.1302517642469957, 0.7768801441236599, 0.7583789243009075, 0.1346438655708071, 0.7703251444603058, 0.7600044317387414, 0.7438063063355482, 0.752841285365295, 0.7523879610048329, 0.6339192488264822, 0.7893243072460482, 0.7948351138064749, 0.7673581356625909, 0.09196921712408024, 9.999999999998899e-05, 0.7728410886588366, 0.7594019957960557, 0.7551293675233847, 0.7453655528882688, 0.7378096892623007, 0.7566516293320331, 0.7464344500592661, 0.8067993694912114, 0.09366032329670904, 0.7645512457119954, 0.8078571950750775, 0.018567986578923446, 0.8095709451210067, 0.8415574772313555, 0.8059068644275813, 0.7846436696758017, 0.6221961911753158, 0.4092421751144697, 0.6840740689063788, 0.6653614700341491, 0.35084445195690117, 0.7065384273058808, 0.5346584361027571, 0.6032132146863546, 0.2778816925804899, 0.6411153050638396, 0.011849504685254919, 0.6861220196106873, 0.6579423485355009, 0.6461281991475527, 0.6689682625126124, 0.08236494708170872, 0.6569054422067777, 0.5847085496034267, 0.839398105136694, 0.8431753978437617, 0.8386895192877046, 0.8548902368242408, 0.8524639792430281, 0.8303172596591121, 0.8475775668619813, 0.8554623818511881, 0.8422346680276108, 0.1142159382601885, 0.1075660479014594, 0.09470823629055636, 0.08766200321887829, 0.13199379749608708, 0.1272611965616829, 0.10406479360960186, 0.08636889330608866, 0.10718192158085571, 0.32129129953924207, 0.15441479116885837, 0.17260552913878624, 0.19656137731355072, 0.21564267728106812, 0.1820230492760634, 0.26456771169971227, 0.17770009037749301, 0.14703281781037492, 0.5183432028317891, 0.4838558028143597, 0.41244954021319746, 0.23914296899214482, 0.4314027236841499, 0.22791676324642007, 0.6294422137857991, 0.19832027457579038, 0.5161100182090146, 0.2847746156316553, 0.4083762666319226, 0.3719310308508269, 0.48356978527255223, 0.21580479450435008, 0.22895011047757308, 0.43111932207291304, 0.47118044321224983, 0.4073425185834474, 0.21604324277283893, 0.186164974919534, 0.16567105798465132, 0.19886675720688962, 0.17627573296294063, 0.1787748798992017, 0.23768649400032693, 0.1914056208463074, 0.1951285853484731, 0.18944999493824122, 0.1739879956201994, 0.24733725665848105, 0.1719072300961576, 0.7348750125130743, 0.21699862225353028, 0.2230986795679163, 0.17910240594157478, 0.6500705227262222, 0.18784380678853008, 0.16492376869432923, 0.18494317994461384, 0.915243016731311, 0.1759374747007132, 0.19642099937221036, 0.9056878194376792, 0.14804040902543347, 0.16397317384865295, 0.9218508449187959, 0.21275990952399737, 0.8862617482825599, 0.1558488856832122, 0.868988187080909, 0.21154993804848332, 0.9182008578730918, 0.16713800704776893, 0.19921865957515694, 0.20044606094871464, 0.19052973577574672, 0.16468372312278312, 0.17347300700591384, 0.1719039070126639, 0.18878907229976938, 0.17785562053580417, 0.24361226205326314, 0.19013701030191088, 0.09941827750653776, 0.07012371593712485, 0.07728270610263333, 0.06684038280583005, 0.06892300749277147, 0.10709262210767778, 0.0774170904515229, 0.06398120694154497, 0.09472538034814659]}, "mutation_prompt": null}
{"id": "01f13ec5-703d-47e2-a1ba-c4c255c2ec5b", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.35 + 0.5 * self.success_rate, 0.3, 0.9)  # Changed scaling factor lower limit\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Enhanced AdaptiveNeighborhoodDE by slightly adjusting scaling factor adaptation for better convergence.", "configspace": "", "generation": 59, "fitness": 0.4413396764540629, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.44 with standard deviation 0.31.", "error": "", "parent_id": "4377dc65-57f7-48a2-acc8-5c82e680b163", "metadata": {"aucs": [0.848852545924879, 0.8277532073594631, 0.8470168971083281, 0.8388998792653237, 0.8476641721464164, 0.8277840792409411, 0.8315346765790018, 0.8355007878900407, 0.8381241981185369, 0.6762200241070311, 0.04055397838187469, 0.7055769348848652, 0.6989694670741522, 0.6620489142602136, 9.999999999998899e-05, 0.7248272354851814, 0.7370498243518712, 0.7355804294161677, 0.07894672767362076, 0.09947392797848531, 0.11135747873563118, 0.09004479549239186, 0.10443185334691829, 0.027277965160490747, 0.11156228138996394, 0.07847447251031625, 0.10700586003915014, 0.16162363286649473, 0.1319639074350083, 0.06763841263133685, 0.087182160437417, 0.09207786676871021, 0.08299891017372196, 0.09023961668432079, 0.13455159711266151, 0.08754331497438284, 0.98627348658237, 0.9812490165405275, 0.09864749026738251, 0.983996242691124, 0.9804881410495319, 0.9717562354727123, 0.9803085106596979, 0.9810781710809852, 0.9744097068116382, 0.6491906645558447, 0.6642583707891159, 0.5054415430696078, 0.663771662324983, 0.6467726023716708, 0.2653109429321444, 0.6379245220427631, 0.674390652328528, 0.6244800688715098, 0.8831529627422715, 0.8670721231485845, 0.7668690056844829, 0.87144546439396, 0.8799782091674551, 0.8712856560025793, 0.8666096999847491, 0.8444179476053613, 0.8365330799552334, 0.6769201830200265, 0.6867685963000588, 0.12083279621970466, 0.7576101444488972, 0.6960994596309347, 0.7245342633824678, 0.7487580628315874, 0.6466336430082795, 0.709435673168858, 0.6733923646569486, 0.7218142143114629, 0.7338560444375621, 0.13583052739468204, 0.691138971366116, 0.6462722627465856, 0.7664639274230121, 0.6074800263776907, 0.7078223263854484, 0.702631856316436, 0.656663987467125, 0.6783041622212478, 0.056527255584771785, 0.6830119724076622, 0.7246646276490967, 0.6966192329280394, 0.01031175989505495, 0.6448562010303263, 0.7953531672597958, 0.7280895043785462, 0.7119272665223557, 0.7756606451719228, 0.6787432341420772, 0.802493377174111, 0.7926350543972603, 0.746065152933084, 0.7757152719777627, 0.03394895629853267, 0.6196818104153214, 0.24397996847659942, 0.07383449563396627, 0.6267459873721104, 0.5841152579655162, 0.07077820864755524, 0.3392987507218398, 0.2402899214768225, 0.5769704491709763, 0.0116640124303109, 0.5670179211776822, 0.5494207053001456, 0.598615299283442, 0.5852514472025114, 0.5630574299510991, 0.16326468938811345, 0.5027863107665347, 0.8091067944892156, 0.8158476707292837, 0.8217094279454068, 0.8292945695746692, 0.8111292241753947, 0.8045583247234689, 0.8454474606845802, 0.8098350361858913, 0.8016703543127395, 0.09842569099709342, 0.08503605330492958, 0.1337994516024239, 0.110755547868428, 0.08507284230409662, 0.08319278791826945, 0.10867047692457055, 0.1514256289760022, 0.06530654011521142, 0.2517393652153107, 0.3577118659681108, 0.2044725450707131, 0.11607725237172095, 0.28216640993143105, 0.16881001759529468, 0.24494218117858269, 0.17037815065606776, 0.20446230232493823, 0.42978344732739293, 0.4861775730568394, 0.30948994920948103, 0.576691058734297, 0.5847926534036929, 0.4416116082723318, 0.4350644286140595, 0.21938532764354768, 0.42751108248000413, 0.4451021507211873, 0.4828802051606971, 0.14397603445491147, 0.4790602367321558, 0.2070560914468832, 0.2569761802120384, 0.48275498794931015, 0.25858130216255026, 0.33127910536223903, 0.19801448032836744, 0.18353271734904386, 0.19955729719064264, 0.19616051973461923, 0.15268518659369656, 0.21551690742142926, 0.19836509703497307, 0.15811383700996517, 0.1861106520681708, 0.20909780615187434, 0.21344644639002375, 0.24185183302327362, 0.18682009322981108, 0.20128845736030143, 0.18228638398140107, 0.18807088613947265, 0.19455014979003993, 0.18433472676906093, 0.18790476012845359, 0.17113508103980835, 0.16463801166171566, 0.16862277581301566, 0.17788028369679776, 0.19674237864136956, 0.9041868462698484, 0.14791085153536276, 0.16398718187845518, 0.9036359299074728, 0.2126507152349062, 0.9068624651990674, 0.2101845111788342, 0.8891765505312785, 0.21034840253121434, 0.8989002240622495, 0.16754798565506246, 0.21361415991211052, 0.1838303145392316, 0.1903956064441702, 0.17863376064925396, 0.18791379614907633, 0.19449856218727657, 0.21065246962483575, 0.1940623513654378, 0.1923882002205174, 0.19029314293601118, 0.09763813367484908, 0.06927448549328108, 0.07275912501404458, 0.06677153065860619, 0.0694741642751796, 0.07382343463793972, 0.09343853636345356, 0.05980235810575174, 0.060547102829804356]}, "mutation_prompt": null}
{"id": "d96eae62-1c28-4d12-bde3-a1d61ef0fe52", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + self.scaling_factor * (best_individual - b), self.lower_bound, self.upper_bound)  # Changed this line\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.3 + 0.5 * self.success_rate, 0.3, 0.9)  # Changed scaling factor lower limit\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Increased mutation diversity by altering the mutant vector calculation method.", "configspace": "", "generation": 60, "fitness": 0.3670360447451702, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.28.", "error": "", "parent_id": "4377dc65-57f7-48a2-acc8-5c82e680b163", "metadata": {"aucs": [0.7952830470263801, 0.7951937640766303, 0.7957479793347818, 0.8170581328941942, 0.8200121541370982, 0.7988785520447209, 0.8010641705431454, 0.7989143926132156, 0.8066566890961904, 0.5499556284810228, 9.999999999998899e-05, 0.6585268042740806, 0.64706039072425, 0.6217367876797244, 9.999999999998899e-05, 9.999999999998899e-05, 0.6471990829707974, 0.05736846804809048, 0.1256472795246123, 0.10059044038547449, 0.12418348752940223, 0.1176796633905145, 0.09467372453601186, 0.07785797511313053, 0.09158461773648774, 0.1410596721526084, 0.10289161664893476, 0.09602940478746769, 0.12297671769057428, 0.13861616626715734, 0.10599239319062603, 0.11866096341795618, 0.12287039726876503, 0.10934839437498556, 0.12050629588741635, 0.10494269208321527, 0.9901757024689509, 0.9858728813280748, 0.0988955283093268, 0.9743181859679407, 0.991267910107298, 0.9806549108201214, 0.9822448445393815, 0.9909080389326598, 0.9801629173208555, 0.059496552632234634, 0.6271939112372228, 0.3802405082979805, 0.6474112545180519, 0.6327978830128658, 0.5808604490479952, 0.4685444170134191, 0.3180618119487223, 0.08810919767578784, 0.8320392839213833, 0.8268556390981288, 0.8398671776254271, 0.7928498718325537, 0.2044925522468366, 0.8637851271935345, 0.8525608588386051, 0.8182582720739426, 0.3722740464361787, 0.6463352602622785, 0.6673753785980046, 0.6246980116968719, 0.6342535024813443, 0.1035857114568991, 0.6453046435131121, 0.6463396255726748, 0.6136905990039541, 0.674178612529025, 0.0552739669415232, 0.6542063022821616, 0.01001422735555857, 0.5518299589623982, 9.999999999998899e-05, 0.5951499338940214, 0.6419990199493928, 0.6095777132342947, 0.12625373037720966, 0.6058864688574923, 0.06922957814811848, 0.6223416646150521, 0.6284036587072396, 0.019338628351816656, 0.049186159197663226, 0.607701590330262, 0.6151579741472257, 0.6393766886920002, 0.5909342676524405, 0.7426252384468177, 0.7174907266933489, 0.7317339604911504, 0.7625963497627957, 0.09042195776405859, 0.7239048580538978, 0.7273525196852453, 0.6877681975847183, 0.15704088801021043, 9.999999999998899e-05, 9.999999999998899e-05, 0.08647135723231691, 0.44336347250672437, 0.5353877520773611, 0.10679553328053148, 0.47700420385235776, 0.2888157363950753, 0.503081930110671, 0.487210164918512, 0.5061398871824399, 0.5269912473128073, 0.4767386472028716, 0.504678686211359, 0.5118252037840854, 0.3729069804763623, 0.0790723064649923, 0.7977587144332365, 0.7716730278309825, 0.7810318112987978, 0.7618390622627922, 0.20707514407109184, 0.5052536445708449, 0.7513921536179573, 0.7475810381335065, 0.7383903470547737, 0.12551482907683098, 0.09831874848074262, 0.12292665327008057, 0.09148901867558612, 0.09353010725945021, 0.12958798108142022, 0.09804702606034987, 0.07994589957025366, 0.12065817444760651, 0.2296610866559302, 0.21395661018948664, 0.19216676896319917, 0.19994338796874223, 0.15721714404665565, 0.21268248148863567, 0.14701666395686575, 0.20676984530558173, 0.1725446674938763, 0.41884487572724327, 0.4328885422006571, 0.19279247479496553, 0.39670356134091167, 0.3467519660301285, 0.3345607370264617, 0.2144551748351725, 0.41817865502498475, 0.42798904999898013, 0.24391015021486284, 0.1886100536076184, 0.39258416713889466, 0.3175804532656169, 0.4055986805106271, 0.4286134068494777, 0.1650377043467286, 0.3780964081249185, 0.41142222768700065, 0.17441784403544403, 0.1883446382228049, 0.16192047483429617, 0.171667771431801, 0.17716829991233496, 0.17669836968798558, 0.177761320985806, 0.1759649318919655, 0.18799977199617435, 0.19962205965624258, 0.19241368612932508, 0.2003080435208423, 0.2119121628373144, 0.21202918330816078, 0.23140437425299876, 0.18450347867872152, 0.1876263884602255, 0.1893657354468844, 0.16278975383667604, 0.12645954319276476, 0.15288952244950615, 0.16620274388976009, 0.8418805174147417, 0.1946449869453728, 0.16330205079901428, 0.12135448515488967, 0.2084175955268689, 0.16567520319738904, 0.1670008645820764, 0.12658425130972295, 0.20522170749713242, 0.2072446932580163, 0.20136521940611873, 0.12788140022181038, 0.41079377052229826, 0.20294977318812746, 0.17983638550549863, 0.19368230922221175, 0.1683932936812842, 0.17349039291465373, 0.1689448438409098, 0.15893498327622768, 0.18037140858027356, 0.19462585695505585, 0.1785952157145081, 0.06461723915869988, 0.07188186617288772, 0.07484969271103659, 0.08460452278348563, 0.07256706032846216, 0.0582435461017381, 0.07924643979264478, 0.07340461241389873, 0.07851068944525685]}, "mutation_prompt": null}
{"id": "f4ad542e-8cc9-4cc1-b0ec-44db35a371b7", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.3 + 0.5 * np.sin(self.success_rate * np.pi), 0.3, 0.9)  # Changed scaling factor adaptation\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Introduced dynamic adaptation of the scaling factor to enhance balance between exploration and exploitation.", "configspace": "", "generation": 61, "fitness": 0.09784622315934771, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "4377dc65-57f7-48a2-acc8-5c82e680b163", "metadata": {"aucs": [0.15349929005792617, 0.23444274405613919, 0.14014475539144355, 0.06293283088232515, 0.18648861037471165, 0.09529778456032378, 0.22230627070812092, 0.14285348198319137, 0.3265887986382038, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08212634923147921, 0.06512469499343221, 0.08519976903965598, 0.03179827229599996, 0.09264049515511519, 0.0006101402126840183, 0.11372632741029953, 0.025204374755203762, 0.027847943549287657, 0.08440248121606042, 0.06169013617234009, 0.02810836886169288, 0.04579741046931285, 0.041398428555975975, 9.999999999998899e-05, 0.06263048923302794, 0.03163352844132328, 9.999999999998899e-05, 0.13182300709439498, 0.08125020844616992, 0.03311886461826741, 0.06978335325208374, 0.12081103900484103, 0.034391595944374465, 0.057668239903025276, 0.1371510754841323, 0.03471526120259982, 0.08800044518378969, 0.032185002266812646, 0.015348657811791955, 0.015016805949462086, 0.03260563780354764, 0.00821538986242687, 0.09350370381652395, 9.999999999998899e-05, 0.031177303693924463, 0.08315661317482659, 0.06808949527496677, 0.10350600602529758, 0.1555568358379913, 0.11324539238945619, 0.01936811855479814, 0.0907413878066956, 0.1022031879415265, 0.15464429040248684, 9.999999999998899e-05, 0.04116150677708008, 9.999999999998899e-05, 0.05800751848188668, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07526337997357546, 9.999999999998899e-05, 0.0029437627546500256, 9.999999999998899e-05, 0.1171735331066116, 0.10976442128738673, 0.16359229554793986, 0.1277030918100609, 0.02289433734660873, 0.06931590184530179, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045809232304903524, 0.03330332473066322, 0.026147415663056006, 0.08125128338500998, 9.999999999998899e-05, 0.03140030681846184, 0.14939735597142267, 0.04786837495439744, 0.052339906736172614, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010648336543962023, 0.05220107082375902, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040326276019141516, 0.2056637300296139, 0.16990690726128344, 0.3188232663218582, 0.1283507435678135, 0.13900154369589912, 0.2453785388618629, 0.3898732790563275, 0.24677108133164927, 0.2832674257991037, 0.0829936367254075, 0.013786773979469036, 0.02753652325549516, 0.04610591020369825, 0.03640185193204415, 0.08090561756409476, 0.03774541550891941, 0.054531999625680894, 0.023592978135586917, 0.21225390248282827, 0.21124368126651083, 0.19939078962163315, 0.12715836602574182, 0.1963609325386586, 0.16092641362332127, 0.15374195882577257, 0.16761078830582699, 0.24798714539087685, 0.2671868930543999, 0.19353811892356065, 0.15159960396724603, 0.20981170437045626, 0.1522166820119477, 0.14543374642711093, 0.16959293299351597, 0.18904859881871405, 0.19720949841009394, 0.12392911234971105, 0.10454142623360896, 0.0695828263240732, 0.13344873654559886, 0.1613549351137874, 0.1269031813985082, 0.12174528036112808, 0.1564492462088558, 0.11280699258124782, 0.17249519586205975, 0.2022225388986687, 0.24721392488827043, 0.1920300536730123, 0.14950511552808843, 0.1714915084790084, 0.19820740338788767, 0.21913284454859971, 0.21043486066537564, 0.15975350068808714, 0.04708665309584137, 0.1531567864803881, 0.1596656081533896, 0.15326571948620782, 0.18064396729677168, 0.16888452285576117, 0.1321738843531426, 0.18194095916147845, 0.16771508914387145, 0.06308210720875418, 0.10249449082103024, 0.11349633429888617, 0.12537696877684212, 0.061767146492987535, 0.23298421672079062, 0.11168925520712292, 0.1653558625792173, 0.28575211502581654, 0.16784512990333256, 0.13122981643408715, 0.13193660055813383, 0.2278364571924788, 0.16392148716049137, 0.20678943043808362, 0.057071237968913, 0.20520195931099772, 0.1772708665881404, 0.22109885376285598, 0.19932456077260963, 0.17697846723734056, 0.1809300588862366, 0.21623688355263015, 0.22313323998859647, 0.21474229436201997, 0.25767093057167123, 0.10472058022215402, 0.09027620587548157, 0.08450494636466299, 0.06201694340588215, 0.05906867532211835, 0.05212605167145046, 0.11649720710990263, 0.06989738917091559, 0.09894524990647735]}, "mutation_prompt": null}
{"id": "b723fe23-d7d0-452e-b42b-01de52971617", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.3 + 0.5 * self.success_rate, 0.3, 0.9)  # Changed scaling factor lower limit\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Enhanced exploration by adjusting scaling factor to improve success rate adaptation.", "configspace": "", "generation": 62, "fitness": 0.443593259404939, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.44 with standard deviation 0.31.", "error": "", "parent_id": "4377dc65-57f7-48a2-acc8-5c82e680b163", "metadata": {"aucs": [0.859856700161116, 0.8506946714758356, 0.8495570814107989, 0.8575285995962074, 0.8661346938958275, 0.8842888574400668, 0.8540520346405147, 0.890534913604103, 0.8644101097640868, 0.7714138571099398, 0.07378300352900402, 0.7341180881703753, 0.7548178827675107, 0.06601344297055889, 0.6843735084665385, 0.7754850740365811, 0.77750631238738, 0.7452216121425617, 0.09544222550487735, 0.14360731313541475, 0.1005034724123367, 0.14719876327565762, 0.08886984781398333, 0.117558005769276, 0.13675974671132185, 0.13521484581622167, 0.07785171580621641, 0.08435563940500745, 0.08413422285254601, 0.08793167758579346, 0.12913775312874043, 0.11435784719173536, 0.06651913806873255, 0.12105640949536922, 0.12948686522591069, 0.09303171584937242, 0.9728385867582291, 0.9735811763653475, 0.961071381549528, 0.960254642753083, 0.9815761465027882, 0.09916457080849927, 0.978533568370949, 0.9805740667049434, 0.9834098156145703, 0.6815999195692077, 0.6978425799797452, 0.6881869713760189, 0.6627231366274713, 0.7284108232445423, 0.6673008738147423, 0.7097786634025116, 0.08798589710535965, 0.6881232786778608, 0.38608326472184795, 0.2946910973012127, 0.8746855757035173, 0.8884512741581159, 0.19144931324258319, 0.20409710242833956, 0.8700482028721641, 0.8965609050054948, 0.8533657423851863, 0.6963554579168476, 0.7534819160189801, 0.7641485677703403, 0.7525185341383616, 0.6760214966522753, 0.7994603970529545, 0.6967476734358939, 0.7714751257696751, 0.7211206889562969, 0.7897516850657742, 0.7898572030648614, 0.13463399753820982, 0.7406451113418064, 0.7574571209540053, 0.7586048342614702, 0.7798881061854535, 0.7948466834517106, 0.7386442244145803, 0.07506296698959358, 0.43205425708388934, 0.7281775539967228, 0.7255290905287312, 0.761030224778276, 0.7253720133706125, 0.010251950087913242, 0.7499478233324643, 0.08313652018815387, 0.8070593238770534, 0.8189221878468576, 0.820005882387965, 0.8031093791610434, 0.7823883870164379, 0.789182611465531, 0.6013839031846887, 0.8223370529548261, 0.7959630425705831, 9.999999999998899e-05, 0.31393699390399066, 0.03582249974301399, 0.650911984581636, 0.7064531934206535, 0.44373894966485794, 0.45851706156076766, 0.36838339097831474, 0.07230809830401486, 0.6342315280446955, 0.6374588999280975, 0.6584134416167934, 0.6833647044058053, 0.6308183631452633, 0.6589371606507688, 0.6213741082203119, 0.6426500738602826, 0.08327254940416695, 0.8562916613087452, 0.8456834992374768, 0.8600344199431383, 0.8388292892825604, 0.8460444648723985, 0.20836386396975592, 0.8412851458771673, 0.8268567931101196, 0.8348543036859086, 0.10588798440052272, 0.11365769455332342, 0.12490770330082812, 0.10359626482646223, 0.14968882160338126, 0.11023448058827512, 0.0961227086432127, 0.06365630587137916, 0.10282650585803077, 0.22503998177149465, 0.31425445325559753, 0.22189996306588133, 0.17626867443057548, 0.6764967987677164, 0.27147937811628087, 0.2550769156809921, 0.4222675442046172, 0.21306964739598266, 0.36322277964781713, 0.4316316625124048, 0.4383828957874776, 0.5341595400754998, 0.2711582589056861, 0.46549250385400387, 0.5875306932342859, 0.6321219783556501, 0.5494527918834506, 0.38277525519260114, 0.2502257022396319, 0.5959104013788725, 0.4646695801067504, 0.1947167244714928, 0.40657537919494213, 0.22470992371544318, 0.4661120683771588, 0.5061553603200952, 0.15784032396395598, 0.18853957226912976, 0.18799245502166773, 0.24572995312437373, 0.2100571049152884, 0.2497975619288041, 0.18184737735577705, 0.18287147400820847, 0.21876654643554538, 0.1823342705090255, 0.216820343315702, 0.7654731121182627, 0.2423079430421834, 0.24738220908398245, 0.22262997641884585, 0.18085583556062568, 0.20772859091265716, 0.22269192041683283, 0.1229855253607599, 0.1362928487169751, 0.09888631023777783, 0.16847028520265872, 0.16189047246381527, 0.2088831546636878, 0.10805654463423564, 0.12688715986035226, 0.16586106567120573, 0.15704336422870147, 0.11318058403938791, 0.16818305924687316, 0.09412297481381937, 0.11251927773785841, 0.21116403988162458, 0.9121328239975268, 0.8966474329247713, 0.19555648670758108, 0.19352328499719174, 0.17941409707054534, 0.17098535037038387, 0.18263059688134464, 0.15833281024946266, 0.16709142311795422, 0.1739654211540601, 0.16664130343347983, 0.18371906197853294, 0.06308388087850914, 0.07391767649519698, 0.09656673028097795, 0.08343407389836743, 0.06322321548256937, 0.06928316638111864, 0.07253582206267895, 0.06942625851632689, 0.08579888864689433]}, "mutation_prompt": null}
{"id": "f8cb6e71-1038-49f2-8348-6e1ab441473a", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip((a + b) / 2 + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)  # Modified mutation\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.3 + 0.5 * self.success_rate, 0.3, 0.9)  # Changed scaling factor lower limit\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Improved population diversity by using mid-point mutation for enhanced global search.", "configspace": "", "generation": 63, "fitness": 0.10754632816584667, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.17.", "error": "", "parent_id": "4377dc65-57f7-48a2-acc8-5c82e680b163", "metadata": {"aucs": [0.1913993288100444, 0.10226359402398466, 0.11097535649232926, 0.1928816014302246, 0.21191601436330054, 0.12109262033921508, 0.15512707124905123, 0.13268642197844382, 0.06021431982737291, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004752555681439619, 9.999999999998899e-05, 9.999999999998899e-05, 0.015180967659687794, 0.05095810570396697, 0.03323791414903843, 0.04988751723023199, 0.08125749554413908, 0.05891770898636095, 0.02422012299295495, 0.06875799795398052, 0.04667331216951276, 9.999999999998899e-05, 0.030371470231040476, 0.04654454219897741, 9.999999999998899e-05, 0.046235875077278776, 0.035515057461435906, 0.01103940811128068, 0.06482298372999962, 0.0410290853382036, 0.9714815678239332, 0.9700821232582729, 0.9396747871091014, 0.09821027696758267, 0.09926274792046219, 0.9442029045189911, 0.9590926303570466, 0.9767213988517255, 0.9159419803280213, 9.999999999998899e-05, 0.12322234598364135, 0.07013912339875683, 0.036675503184694924, 9.999999999998899e-05, 0.10053911150517159, 0.08287613188025245, 0.0047564837059118625, 9.999999999998899e-05, 0.07024426657297123, 0.13471763815854498, 0.12613722509410763, 0.036711950765188184, 0.1037026762675125, 0.013923325586595814, 0.05334081808105895, 0.038594214041756225, 0.08932477685545559, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06714114844424368, 9.999999999998899e-05, 9.999999999998899e-05, 0.0066585146666262585, 9.999999999998899e-05, 9.999999999998899e-05, 0.010011606534452211, 0.05389727262345656, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07216541619594463, 0.034524836446721885, 9.999999999998899e-05, 0.006142719085292625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.057036278806163354, 0.1045101409870256, 0.05446248182699476, 0.013793654145581202, 9.999999999998899e-05, 0.02941853144826001, 0.00345237389525177, 0.0019548964820969017, 0.09313668346242776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008719139885431826, 9.999999999998899e-05, 0.010876711815397955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15687405885973238, 0.1815475108548631, 0.15795029586256915, 0.10863561606880723, 0.15027911802732108, 0.1774169631464414, 0.22383250906650987, 0.13461088449479175, 0.23979181002716943, 0.03499356290261746, 0.07173234625112235, 0.047780963375354424, 0.08906506865068209, 0.018652984943200446, 0.040665048198983644, 0.033225318417561045, 0.08285111126916123, 0.03848461656860913, 0.14136412161626888, 0.1532800800275227, 0.13070052640389984, 0.13573517188798445, 0.1960011093335755, 0.10142787115729479, 0.1456237818033127, 0.11192052885860793, 0.14603877427373513, 0.1515413066732193, 0.11864753033239939, 0.19361176745997533, 0.1192937626442403, 0.1511207368917863, 0.1821177705179412, 0.11123351218285482, 0.2597077815232941, 0.1582221754229617, 0.16529105681154121, 0.14929744372268228, 0.18319427505301, 0.09556397921112225, 0.12077320474214082, 0.14487713388052692, 0.07792073114941744, 0.13093346557354602, 0.10679294174844511, 0.20654501767312405, 0.16568642840701064, 0.20759858174339718, 0.126037645406177, 0.1987290797168998, 0.17450016656011536, 0.17542538860740953, 0.18724900208394968, 0.19463521452518395, 0.1655062172749887, 0.1584126120495588, 9.999999999998899e-05, 0.17448866582829248, 0.17472621416362288, 0.1688854921916365, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10966465393930613, 0.11166652160387858, 0.17942182856524758, 0.10505955800551636, 0.11831694120791658, 0.11329253819194363, 0.16719167086614872, 0.12284206896248362, 0.106272252775645, 0.24073271246824468, 0.14768907082119387, 0.0589885195119243, 0.10689829508873483, 0.12192170885968046, 0.09003172112383528, 0.10161878644493227, 0.08479440068348099, 0.1835681621181694, 0.15719788083861808, 0.17196668251501157, 0.17575147671097202, 0.1659648622795954, 0.15567484638043572, 0.17101927377638892, 0.18713842827635552, 0.1704706654357664, 0.18400465265381205, 0.0640903962175966, 0.05561004884060128, 0.06656630386463824, 0.05693294399719184, 0.0629038826457794, 0.05628222762514756, 0.032926047299173145, 0.0489978768119359, 0.046652058593789625]}, "mutation_prompt": null}
{"id": "7e038b2b-b1f2-4c81-a35a-803110b1ca19", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.4 + 0.5 * self.success_rate, 0.3, 0.9)  # Changed scaling factor lower limit\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Improved exploitation by tightening the lower limit of the scaling factor.", "configspace": "", "generation": 64, "fitness": 0.43357099259294557, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.28.", "error": "", "parent_id": "4377dc65-57f7-48a2-acc8-5c82e680b163", "metadata": {"aucs": [0.7961725042964937, 0.7979893954068605, 0.7924080897545305, 0.5271954277416551, 0.8168456008557715, 0.7867133276781033, 0.7981756754987965, 0.7585767919395229, 0.8040440945489407, 0.6358152886078761, 0.649738092657008, 0.6832278307713449, 0.6876363005023934, 0.6606300311611887, 0.660939008230114, 0.6563317506764689, 0.6399348602850248, 0.6635829314225923, 0.1411848619870405, 0.13177194761668565, 0.14842052802970518, 0.08258163052487011, 0.11051893286462144, 0.027100645637302856, 0.09100646069582052, 0.06629288805710565, 0.10549162019812652, 0.11839618878898872, 0.09267175985334486, 0.08893604985080816, 0.08104534366312832, 0.10138273531797715, 0.02729402060747632, 0.10553774719340092, 0.09530625785777991, 0.08751596216383384, 0.9862936706654768, 0.9816968315908347, 0.9600936832778677, 0.98330992046155, 0.9804892679871923, 0.972978250170713, 0.9810867359002584, 0.9817140456089953, 0.9711991124603216, 0.6131184783699514, 0.5841835754941334, 0.66898617838183, 0.5287852437884127, 0.4674403374563987, 0.6149292151463968, 0.5569005648232768, 0.08660002062798922, 0.6300270861764945, 0.7985869595591352, 0.809770871213159, 0.7991124477453593, 0.8322986492590879, 0.8411393287663802, 0.8618392074146803, 0.8001582892607406, 0.829474974987433, 0.8303212733398568, 0.12771877633195872, 0.6286312010646791, 0.6705352600497976, 0.6035057912317956, 0.6269216785027238, 0.707582114079182, 0.6780304839653071, 0.6840599995972608, 0.6705720178115839, 0.5774637720464907, 0.599770105384327, 0.6329042241144598, 0.6426393493086833, 0.6519417919466235, 0.5913226156826074, 0.12934957912217904, 0.6443673801220944, 0.13253273904629626, 0.6417928598366447, 0.6695912376326996, 0.6779713207115976, 0.6674570674544238, 0.6656887724131327, 0.6509997001679082, 0.6330363749211955, 0.010030856401970989, 0.6279479180632251, 0.7680340207362237, 0.09149138340607876, 0.6882854492060375, 0.7271233098271566, 0.6458270423078505, 0.7211585837638803, 0.772717495466963, 0.7313186352661539, 0.7523512463111219, 0.4165198031468079, 0.5104034204287238, 0.38488366215627967, 0.5209913099457797, 0.45951962492095444, 0.49426329720074214, 0.06720597207130707, 0.4399285966904971, 0.23887107443494981, 0.5217131417805367, 0.48508741698684865, 0.4726497753564952, 0.4670129511662927, 0.47544484216420035, 0.4615206153879656, 0.47323462276256556, 0.5103563422667463, 0.4753704409239631, 0.7620749828186136, 0.7476489637077405, 0.4574940788419317, 0.7913231031923913, 0.7959391862691896, 0.7857107884193262, 0.8161850812881213, 0.7780487911029771, 0.7763107931224129, 0.09516534018557321, 0.10504666491281045, 0.10074348815512169, 0.1342463819824976, 0.09458901582929136, 0.0713353565435213, 0.10478844369936702, 0.10374036374995665, 0.08889445228797088, 0.22512920568260464, 0.6588588001660443, 0.7252985234531445, 0.3044734612296879, 0.2856763405650067, 0.2715830604733164, 0.4222929842756017, 0.22610746106703095, 0.1529387026153639, 0.38485890007877366, 0.5005760224117362, 0.447583768149581, 0.3648794085122111, 0.4237052579167988, 0.45372713109858054, 0.45624348975212914, 0.35600235337533404, 0.4651950972176563, 0.25961288617873746, 0.24875913282123052, 0.37407775550522937, 0.32197676997237734, 0.37348530012029546, 0.3620655789463658, 0.29121357477594334, 0.42141773455987663, 0.38618185800167104, 0.2122504550027292, 0.212116437670268, 0.22094400840052808, 0.1682585520771106, 0.18011102767448517, 0.18849116432533697, 0.17961457365308475, 0.179674104021468, 0.17999350740704134, 0.24424208504388167, 0.19817458810396027, 0.24271429683233559, 0.2040639505312598, 0.1796570599129158, 0.19607172785223115, 0.18148056206101315, 0.17652926016736892, 0.22185211259957904, 0.1875296200464187, 0.1463985394411269, 0.16330937409295398, 0.1676909978618123, 0.17787953527568157, 0.1955489036665775, 0.8847881389819163, 0.1477946923146103, 0.16373520934724783, 0.8959037060152241, 0.21239294191232017, 0.20660134422199583, 0.20984841539812038, 0.22523845511797158, 0.20983176509773782, 0.8931941124113842, 0.16712752614630244, 0.1954211086128259, 0.1576417178157733, 0.19302135657928055, 0.1759600236482003, 0.17898215651250904, 0.18369336733302166, 0.17645329574228585, 0.1895397474120587, 0.1770670289937043, 0.18343531810767977, 0.11999883528837818, 0.08204040813280733, 0.07932726982978189, 0.07612448948153105, 0.07930929096838935, 0.0790242345263994, 0.11553853676464931, 0.06626277323620777, 0.05963898940301893]}, "mutation_prompt": null}
{"id": "32988449-ef8c-4932-a5c2-73b9dfefff03", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.3 + 0.5 * self.success_rate, 0.3, 0.9)  # Changed scaling factor lower limit\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 10)  # Changed from decrement of 5 to 10\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Incorporate dynamic population resizing to enhance convergence speed and solution quality.", "configspace": "", "generation": 65, "fitness": 0.4259629699942597, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.33.", "error": "", "parent_id": "4377dc65-57f7-48a2-acc8-5c82e680b163", "metadata": {"aucs": [0.8892007956414354, 0.8813934778373216, 0.8643394490193173, 0.8562372663616928, 0.8841309411348931, 0.8726255341973396, 0.8969445788775018, 0.8913676243536783, 0.8758382420618616, 0.07572877120835364, 0.041957179165433844, 0.776809041943035, 0.794064448538049, 0.7770868705116927, 0.04449215985614485, 0.8087675355557065, 0.05395656427866036, 0.7857739285453142, 0.09550828273901224, 0.07969355994844862, 0.10324369663627497, 0.1363875538689222, 0.12828320255105374, 0.043103307670484314, 0.13892556740932427, 0.08483628239333396, 0.1093131836802066, 0.0949618499891014, 0.06547620319821579, 0.07354900830186784, 0.07645168196235375, 0.0848978487627432, 0.05041935006754705, 0.06351700918973313, 0.09782913802342486, 0.08536818200859198, 0.9862558583104573, 0.9811994155810921, 0.09863182372789214, 0.9815462923760268, 0.9797268612266788, 0.9687772284999954, 0.9799795440113772, 0.9809706144810489, 0.9721758852041142, 0.7408335210785421, 0.42683777920658506, 0.7318866503977218, 0.39686691166703547, 0.04516672039522163, 0.7393713265821182, 0.6404181018374155, 0.04977271484818557, 0.7606275134336565, 0.8892719096574694, 0.896669714491746, 0.8726879614421369, 0.8881865063494438, 0.21308728136139599, 0.19252358299122074, 0.23621301727718114, 0.917177893684203, 0.2365263753962259, 0.13335910754717606, 0.13372175235761474, 0.8002257132818353, 0.769484644821488, 0.13127597198911067, 0.17563160621764184, 0.8065661806336509, 0.12974351149386965, 0.7271133611183485, 0.7415579967059864, 0.7773971569322305, 0.13160585436329963, 0.13337936846406795, 0.7919167896229042, 0.13181681609568152, 0.8240280951274928, 0.788062232001056, 0.7123359848840113, 0.7514960144302144, 9.999999999998899e-05, 0.7707245851032408, 0.05845543173313328, 0.7555566175101922, 0.7891568968860434, 0.7826964520594799, 0.7392913471241549, 0.7433301074854499, 0.8401787362760889, 0.7804605396888384, 0.03376260510374851, 0.8341305157670079, 0.6827051521187606, 0.8278689781923467, 0.8421945791993246, 0.8265389350494496, 0.8228403090643304, 0.3614257354398843, 0.5085324597004586, 0.4875232806848969, 0.5733078128932583, 0.43257502519791413, 0.3821839802265229, 0.07252889523396444, 0.28958815329743337, 0.31556545132885083, 0.659896160117721, 0.011858167608764791, 0.7170642196818136, 0.6653143866170332, 0.694101875684124, 0.7000658580031751, 0.6828925824780951, 0.5940039673288984, 0.6637753692362023, 0.8542655203875877, 0.8532679453080348, 0.8656438127526125, 0.8423265164972806, 0.865501096317819, 0.8649915706241631, 0.8552641145046348, 0.8676353776676646, 0.8563463188352844, 0.11148923475723149, 0.07868514426551487, 0.08093222703564984, 0.10526430660125408, 0.10225394663203202, 0.10270803947868024, 0.0659252395265959, 0.0867882103997788, 0.07723266384874028, 0.19451443029129056, 0.780853479801142, 0.16856285074901556, 0.2630078280902174, 0.30473143732873587, 0.7823342950100352, 0.15040073185016423, 0.17700249015868375, 0.18222447979663092, 0.6035065086726725, 0.6853742744786916, 0.45121705491758424, 0.5160515004941579, 0.6486221708009802, 0.2279727872897347, 0.5227935365235171, 0.21467318096130417, 0.34402489561181815, 0.28154751944709333, 0.2668851475188746, 0.19379423235345916, 0.4243699077588353, 0.5165346658738642, 0.201573882906821, 0.40251635504515837, 0.5286963849356912, 0.24814756481823197, 0.18268577980520218, 0.17072385673082557, 0.19404453087904927, 0.1771283487261377, 0.18910499248060764, 0.15671004325020554, 0.22389402390806146, 0.20592247458030133, 0.15734986995693356, 0.19696909708041976, 0.19546354011218747, 0.20624253735679077, 0.2248216688021656, 0.1804438959731044, 0.2309118475868589, 0.1964497570236199, 0.2194960465007343, 0.22209804508771347, 0.1882501350981709, 0.1864463345288625, 0.1655822945613047, 0.16956534393622769, 0.17825544775049817, 0.19514154989611732, 0.9277571009008992, 0.14807403545108921, 0.1639762689441353, 0.9220968100630602, 0.21277328635599402, 0.9305846230432047, 0.15665522384405028, 0.22542559259208939, 0.21182047104744373, 0.9233175189261357, 0.1678994051098105, 0.2137675619159506, 0.18129872514236645, 0.1858577052375585, 0.1846139330432789, 0.17511673205989375, 0.16755225060963053, 0.1783454309445106, 0.17398052370827022, 0.18451900163931445, 0.1850624362151443, 0.09782408555592448, 0.0946902791588583, 0.06714052162777973, 0.0796385142621111, 0.0898023023154284, 0.06491804063235451, 0.12716880648741813, 0.06079595984306818, 0.054590381333711635]}, "mutation_prompt": null}
{"id": "540db90b-7f51-43f1-abb5-7391ee82d129", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    self.scaling_factor = np.clip(0.3 + 0.5 * self.success_rate, 0.4, 1.0)  # Adjusted scaling factor limits\n                    self.crossover_rate = np.clip(0.7 + 0.3 * self.success_rate, 0.7, 1.0)  # Adjusted crossover rate limits\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Enhance diversity by introducing dynamic exploration-exploitation balance through adaptive scaling and crossover rates.", "configspace": "", "generation": 66, "fitness": 0.47401547002023925, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.32.", "error": "", "parent_id": "4377dc65-57f7-48a2-acc8-5c82e680b163", "metadata": {"aucs": [0.852655620992429, 0.8808621624817707, 0.8519230796789625, 0.8559469870087169, 0.876690755146738, 0.8791606832462004, 0.8714988698713647, 0.8814815777190443, 0.8681197508355043, 0.6960070848953124, 9.999999999998899e-05, 0.7340236241182485, 0.7688176404013985, 0.7276299963785643, 0.6203587460088624, 0.018967670765784317, 0.004903360753501174, 0.7520912987869667, 0.1100330159466465, 0.12834652092556176, 0.1026742775271341, 0.07073638880876076, 0.1042972763972635, 0.09473696107359086, 0.1072102287009391, 0.07647215379060235, 0.08190544835570768, 0.08896384199344576, 0.08496482802937078, 0.10729925527835549, 0.11284046961350136, 0.1366895605873346, 0.08045945537404786, 0.07374229943035804, 0.11850226683243203, 0.08780827842181282, 0.9862558583104573, 0.9811994155810921, 0.944546616199363, 0.9815462923760268, 0.9797268612266788, 0.9697671907368525, 0.9799795440113772, 0.9809706144810489, 0.9740813042052321, 0.7186555571529267, 0.7135081945351254, 0.6475701866815012, 0.6316273900155847, 0.663339061597646, 0.7647514572917846, 0.678885988925513, 0.08171296903281089, 0.7337205109337769, 0.8778530893653781, 0.89362661926834, 0.8474188165094805, 0.906988410884668, 0.21298387222269166, 0.20610698978255215, 0.890356731278095, 0.8947779493174634, 0.888808938423849, 0.13200940360085078, 0.6865651812466136, 0.7204954222669173, 0.7197571476446611, 0.7130018610588078, 0.7865964946864361, 0.771696557888994, 0.7571895826094082, 0.7281414285712293, 0.7574448462735364, 0.7172224438285342, 0.7362977062221769, 0.7802987204871262, 0.12953449136715878, 0.7702119927647872, 0.8074180468449056, 0.7495136303138348, 0.7387208858523335, 0.6851355836571873, 9.999999999998899e-05, 0.7532116457515496, 0.7465880700877335, 0.7462931113806563, 0.729443819624904, 0.7696029273952169, 0.7452934128180152, 0.7455112980934389, 0.8161557593480763, 0.7661151320498878, 0.7583112141168845, 0.8119547633167431, 0.7440172648902603, 0.7929605814629412, 0.8285805219692065, 0.8045657192085881, 0.79830928631606, 0.44283928068600464, 0.633558312002392, 0.3993367560596668, 0.5570292085969442, 0.6725647034718557, 0.2787080544194034, 0.23550198880594075, 0.5528467010142177, 0.2329009253959642, 0.657440816479008, 0.6320569352927223, 0.6750558427818982, 0.6536123326059196, 0.666363863306567, 0.6559364141707089, 0.6188441223824963, 0.639834176460934, 0.6350635625837082, 0.842519770683861, 0.8321660042876927, 0.8553001017872923, 0.8471595670491241, 0.8320226974500451, 0.8479916195581046, 0.8497072848863308, 0.8605141702735645, 0.8471083318702436, 0.09416537752165954, 0.06340504558943316, 0.10129448626204685, 0.11203943310572972, 0.11674919224895253, 0.0975193058978826, 0.1455373547230936, 0.1431164836253943, 0.08781053685584206, 0.34692972812955014, 0.7868573279070987, 0.2512020823304978, 0.17722709059313002, 0.7817918593842412, 0.7565829766679554, 0.3920784871618461, 0.1761550370825713, 0.16239165916033127, 0.6407589156323208, 0.5392664813540711, 0.4584143119864498, 0.42991137951119807, 0.4111639852475222, 0.19954601542131556, 0.4266939410675795, 0.19983560758632513, 0.4968317726247655, 0.48676611519462853, 0.49234135886792196, 0.4355022710894819, 0.20461152448974107, 0.4470291919478391, 0.5243915000182433, 0.6082630824392121, 0.2759281715636841, 0.5216073995743389, 0.17335884440502636, 0.19905722455878117, 0.2260023651215296, 0.16760341743308904, 0.13824587290920587, 0.19167299941080795, 0.2109734877352777, 0.19299208037418525, 0.18843486601672876, 0.22232258765885182, 0.7252810626875463, 0.21920299268147336, 0.2070066335744667, 0.20729689570044418, 0.20829542204388418, 0.22260838327559418, 0.20462355866744297, 0.22485294280150825, 0.18802299516267207, 0.17472342934708707, 0.1852346654256598, 0.16939516407715127, 0.17810749911952295, 0.1963819708578728, 0.9222632750329584, 0.14824375265435374, 0.1640221752339499, 0.9260868739177817, 0.2130538241751797, 0.9059572645363057, 0.15666712742599065, 0.22531389059613482, 0.21121827933891657, 0.3207107275475153, 0.16738254880462022, 0.1994119628235449, 0.17442210403550795, 0.18961040572993226, 0.17181209785931784, 0.18510874853540193, 0.18041235849047565, 0.17833113008319235, 0.19315440404840778, 0.20910069037535983, 0.19013562610827273, 0.10879330246627084, 0.08111410541169972, 0.06459207249886256, 0.07849771720985133, 0.069511493915272, 0.08083484910887906, 0.07997047346886188, 0.06619773435655685, 0.07405929177077364]}, "mutation_prompt": null}
{"id": "da6e11bc-4e25-4b86-bab6-a21158755edf", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + self.scaling_factor * (b - c), self.lower_bound, self.upper_bound)  # Modified mutant vector\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.3 + 0.5 * self.success_rate, 0.3, 0.9)  # Changed scaling factor lower limit\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Fine-tuned the mutation strategy by modifying the mutant vector computation to enhance solution diversity.", "configspace": "", "generation": 67, "fitness": 0.3260079658459342, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.21.", "error": "", "parent_id": "4377dc65-57f7-48a2-acc8-5c82e680b163", "metadata": {"aucs": [0.5989833939829743, 0.6133675616599666, 0.6660556149749323, 0.6260168346798743, 0.6730237597195661, 0.6679391398520689, 0.6449718802825424, 0.6855594146607605, 0.6430711748064092, 0.46805228895936957, 0.4205199002827874, 0.4479413201479845, 0.4343915227801798, 0.3945773058917724, 0.39851122604614453, 0.4260498830663493, 0.41688895833929596, 0.43491754094163604, 0.09085331868897706, 0.09329878147375403, 0.07887366126192641, 0.09101731297690807, 0.09016781518600692, 0.09945324724508575, 0.09462488024978954, 0.09539476619741327, 0.08762153413725049, 0.07378685595638468, 0.08361911383805853, 0.08202254273542076, 0.08006662886011073, 0.07316979802651058, 0.07326715890099444, 0.07760922499271838, 0.0857670409225959, 0.07471878009206756, 0.9164619637214526, 0.6446186851051259, 0.5341149110550627, 0.5620470945343079, 0.9197939692255683, 0.7821856614705629, 0.723189634802782, 0.7912437583895232, 0.8703785021246171, 0.3325824778919607, 0.3376837100576022, 0.3071977250963941, 0.3346253241158509, 0.36537369203550196, 0.3271824525472965, 0.36642269602119737, 0.3442550253146923, 0.33633829359800915, 0.6772683494335057, 0.6889911995345712, 0.6572916510735862, 0.6607155703573067, 0.6498024915641409, 0.6954921219412638, 0.683088738208028, 0.6745552078824124, 0.6992490911523582, 0.2912052946832976, 0.3310564083499353, 0.3005090132264455, 0.28527255395983153, 0.33830766684940916, 0.2856924779505011, 0.37151084802252565, 0.33087006049976164, 0.3868825533832817, 0.04520746279804366, 0.19862882391736125, 0.009823549300516099, 0.23846163327342795, 0.2727680131394672, 0.25092511328717104, 0.32753249775958826, 0.28345052559753314, 0.2803569364413544, 0.3377722013256602, 0.35682677650443195, 0.3434795037980142, 0.39984833298290656, 0.44444954146900073, 0.34649501669384664, 0.3378377280846576, 0.3224989867155992, 0.35787163702455915, 0.5200055097124139, 0.4581692396360598, 0.4534477040950392, 0.46468053215189775, 0.49822564682095516, 0.4967006607936917, 0.49973822069899465, 0.4882649835473424, 0.5185748015720464, 0.14415972422725876, 0.10852410925355105, 0.08872256462685468, 0.20461389226068627, 0.16245829286497315, 0.1998416674163338, 0.12179019761768994, 0.06857773631941633, 0.09086892626254284, 0.23925968570228573, 0.25419427100156256, 0.24588032178198005, 0.2624285182359527, 0.24772261766053294, 0.2623464147240051, 0.262585533196939, 0.2452208026943984, 0.24934223320879223, 0.5835475657666679, 0.5531782201192416, 0.5738598492067017, 0.6131526006480361, 0.612478228328813, 0.6001660499001874, 0.5748527594824411, 0.574408251201594, 0.5400233484292665, 0.08860679405555527, 0.09022479213395096, 0.09708593738489346, 0.08551819290444818, 0.10195653945455108, 0.08610234376491444, 0.07790513754004769, 0.07420377829094282, 0.07812144190212511, 0.17102462708514665, 0.15185784908570044, 0.17459965905795471, 0.16704502079790895, 0.2996973724857974, 0.13959111478073882, 0.16288542828910524, 0.217739721161486, 0.1592878713109358, 0.30566786792523515, 0.29966996799774204, 0.30222975084868675, 0.2785498738804899, 0.2787706474685926, 0.25691182254959677, 0.30044414436249667, 0.3085397068668566, 0.32787912250331697, 0.253486033876557, 0.2482102781948261, 0.23469889973799796, 0.22874039894208464, 0.240070723558502, 0.264649036720799, 0.24617009463559814, 0.25807256693712466, 0.2353690072753012, 0.18484424797401489, 0.18553650253911735, 0.18337615332684964, 0.19697140256935208, 0.19878745890990368, 0.18923795454701653, 0.17440473965115366, 0.16571435293419257, 0.1799122506230979, 0.18180792093619613, 0.17602421998508888, 0.22385665545802225, 0.19427898799527077, 0.18848272863140525, 0.1792037140448146, 0.17556723513143957, 0.17802065181620075, 0.17745776217009512, 0.7398953755204731, 0.7338278769291867, 0.6805746561221819, 0.18587312772378262, 0.7055133989415427, 0.18256111388808605, 0.6250760173755503, 0.6678158931658094, 0.7381350353064813, 0.629552930074847, 0.6019489783313559, 0.6610709673956741, 0.19678642743057306, 0.6404142058990383, 0.6388849216003691, 0.21017012022869352, 0.20421007714282013, 0.2044374307170248, 0.18425401669318375, 0.17076572398680567, 0.19105228467344348, 0.17884423049703213, 0.17864400659938728, 0.20979158373827123, 0.20196700605577267, 0.17814028182057806, 0.16267641949884204, 0.06701143540597021, 0.07964939224469758, 0.08570144888458109, 0.0787159590531219, 0.07083107060168436, 0.06866371610403799, 0.0806360570482153, 0.07099846435393353, 0.06168644738095008]}, "mutation_prompt": null}
{"id": "b6977e16-f26d-486e-9f38-00597f50decb", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.3 + 0.5 * self.success_rate, 0.3, 0.9)  # Changed scaling factor lower limit\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - int(5 * self.success_rate))  # Line changed\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Enhanced exploration by dynamically adjusting population size based on success rate.", "configspace": "", "generation": 68, "fitness": 0.451683633799025, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.45 with standard deviation 0.32.", "error": "", "parent_id": "4377dc65-57f7-48a2-acc8-5c82e680b163", "metadata": {"aucs": [0.863897062281979, 0.8685135314170911, 0.8663452140817609, 0.18813841991229896, 0.8719028695034754, 0.8822525901705423, 0.8698638448333766, 0.8727725171035563, 0.8679885008037327, 9.999999999998899e-05, 0.7340509503103358, 0.7699715871343136, 0.7718707788913515, 0.7573683919847558, 9.999999999998899e-05, 0.7591664400371814, 0.7312183037105907, 0.05351897495230873, 0.07815529439385649, 0.1207447430447417, 0.10400716568676693, 0.09720690447101132, 0.1344218286118487, 0.10811781524034836, 0.10597511931523973, 0.06811664802063966, 0.0919193432706259, 0.11331069745971323, 0.12476597846060444, 0.10093959988702861, 0.07595011379488892, 0.1187920512695031, 0.10234051528161459, 0.07482202980233432, 0.09192544565737881, 0.09952378568934361, 0.9862558583104573, 0.9811994155810921, 0.9444078102517651, 0.9815462923760268, 0.9797268612266788, 0.970635986533769, 0.9799795440113772, 0.9809706144810489, 0.9727543410985376, 0.6844347692000055, 0.6463828345544727, 0.6812840130387794, 0.5090493332646224, 0.7080466580826006, 0.6615466386083211, 0.5390940071324929, 0.049168159478657825, 0.7398803803785874, 0.8349858892435245, 0.8492709934431993, 0.8281537699798827, 0.8933332314017772, 0.8605744250851519, 0.20388186321044222, 0.8954091376251923, 0.9000837356879352, 0.8885253976068219, 0.130752945200718, 0.7434466052238273, 0.7506211030732342, 0.8021855963699882, 0.7799164278680015, 0.6923488946597856, 0.761912120775688, 0.7056367123500504, 0.7121443329944581, 0.758644992003497, 0.7530558069498587, 0.7394249934899992, 0.665826642797905, 0.12913223451417322, 0.760979526906445, 0.7001179381233006, 0.13022050373013994, 0.721361708650275, 0.7051798889684049, 9.999999999998899e-05, 0.7454743460532567, 9.999999999998899e-05, 0.7791683427792695, 0.13951967462565462, 0.7534324156718807, 0.7336561900111331, 0.749710539631145, 0.8117993157831378, 0.7147658797739747, 0.03365503977857531, 0.8023615517812679, 0.7329892286314328, 0.8068259383887209, 0.8200760447261184, 0.8341981387478411, 0.8207618549890965, 0.623080883136, 0.46852251913894793, 0.6380754166705453, 0.2973839516167931, 0.6482311238526932, 0.09428795885774999, 0.0715630994027, 0.4997497761224451, 0.582141807033498, 0.6597494848094657, 0.6738620906631485, 0.6683774803625082, 0.6234121937177342, 0.6352988344711097, 0.6496101024797141, 0.08206274361516297, 0.08243451070234664, 0.6118716913255131, 0.8313592208519139, 0.8434352703848218, 0.8530317956263904, 0.8440060269927322, 0.8413034804393036, 0.8334948451108048, 0.8311667587502974, 0.8447177743769052, 0.8369679908331693, 0.11364119461408773, 0.07416980460328271, 0.10737427374121977, 0.09787707654189504, 0.09056880902621356, 0.08858894875866807, 0.08060026404530451, 0.10304644046842026, 0.10854287438176657, 0.2915400855130249, 0.7896551455553504, 0.128195630660481, 0.14048955687486941, 0.7856065915971148, 0.676716782600466, 0.15659408235892291, 0.17097865321458539, 0.4067906156006852, 0.5188450490998132, 0.6222700318939143, 0.19018141499437946, 0.41681383145146333, 0.47289159555110105, 0.2484949291457884, 0.23585179653513322, 0.22373759269710647, 0.6125615970548794, 0.3931999250250102, 0.6347002645678181, 0.36319577674590475, 0.18257584869476773, 0.3737423895598827, 0.38288737172052134, 0.5506835106267143, 0.5600955214633692, 0.23427894868857457, 0.18975356755608197, 0.19736438637656561, 0.1965957227149021, 0.1775337117282244, 0.17673632736960754, 0.17918885861529565, 0.1876216304159829, 0.2123364009252009, 0.1855085508636798, 0.1918803043185353, 0.18871537799569382, 0.7678637595242399, 0.2042334048872061, 0.21593670638566975, 0.22095486952865162, 0.20122526032972565, 0.17480567353037224, 0.23197272653269752, 0.18804112697521114, 0.16362659481962782, 0.18558771154659848, 0.16946709137517446, 0.1782111848210256, 0.19529464258527118, 0.907418804812297, 0.14809667343925847, 0.16389048077222945, 0.9212997702829838, 0.2126785440635025, 0.9074431342581041, 0.15668357491901475, 0.22551742062364877, 0.21077538090239545, 0.9102421406165748, 0.16750997243328125, 0.21391183096240918, 0.18688230369155268, 0.18235686325595257, 0.16959979750390775, 0.19267212792893218, 0.18990044851480492, 0.18450333245386308, 0.17797259806833243, 0.1653014026645071, 0.17923120956925653, 0.0798231064673861, 0.07075741295466864, 0.0825595846302496, 0.08809642869305112, 0.06795969166851978, 0.06687404512324413, 0.08017796761126117, 0.08184399584774615, 0.08188571371668985]}, "mutation_prompt": null}
{"id": "ed0de776-ce33-43ea-bfcd-a45b15c019ff", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.9 * self.success_rate + 0.1  # Refined success rate adaptation\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.3 + 0.5 * self.success_rate, 0.3, 0.9)\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 4 * self.dim:\n                self.population_size = max(4 * self.dim, self.population_size - 5)  # More aggressive population reduction\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Introduce adaptive population sizing and refined success rate adaptation for improved convergence.", "configspace": "", "generation": 69, "fitness": 0.4671790396766445, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.32.", "error": "", "parent_id": "4377dc65-57f7-48a2-acc8-5c82e680b163", "metadata": {"aucs": [0.8538497593015559, 0.8810708066230575, 0.8556298463174704, 0.8557658225690237, 0.8784229515928365, 0.8793051144749345, 0.8678304078594163, 0.8882365449220508, 0.8654641017269878, 0.06526904634320252, 9.999999999998899e-05, 0.7412431075046992, 0.7584583580301971, 0.751688158804239, 0.046636452824784236, 0.018956528183640353, 0.004903052227131055, 0.745190096304805, 0.10978055317530311, 0.12834739842253162, 0.10374595423816557, 0.07026338777436925, 0.10852149878955497, 0.09512603514964502, 0.10732639548994594, 0.07647130205594643, 0.08237948247102045, 0.08896591962634703, 0.08381321330585756, 0.10251449876626284, 0.11333603906344891, 0.13669558489410316, 0.1311061410371751, 0.0831176092094611, 0.10671789666231091, 0.08808872622929598, 0.9862558539292984, 0.981199399985157, 0.9445466721567561, 0.9815460445549278, 0.979726846645035, 0.9697671051364274, 0.9799790731809165, 0.9809705994604166, 0.9740812852881692, 0.7228475287549403, 0.7040375882295027, 0.6428051510026866, 0.6655581867379279, 0.6802560515133, 0.7154143406427125, 0.6884702284209634, 0.5668674710370518, 0.7078338439964985, 0.8669325724604604, 0.891503215077529, 0.8717510197272288, 0.9076141328657191, 0.21298387222269166, 0.20610698978255215, 0.8797187268343376, 0.8996790874588612, 0.8836834221290761, 0.13202145981429314, 0.701931643896097, 0.7392032664292387, 0.7312142090725908, 0.7176133694363857, 0.7825042912439326, 0.7695706075243249, 0.7831546634996528, 0.7432050731522901, 0.7481955831645859, 0.7225190846906122, 0.7130223907721738, 0.7785394187185509, 0.12953397574013525, 0.7646667110593903, 0.7809467791929604, 0.7481285255394956, 0.6701156462022413, 0.7041176839297649, 9.999999999998899e-05, 0.7659312804764766, 0.767736591058896, 0.733555257003556, 0.735562800078036, 0.756422260279781, 0.7431230068053302, 0.7575280046027144, 0.816213810356877, 0.7178573633852182, 0.7342151624107913, 0.8233780319585438, 0.7606877203376953, 0.8101877933754, 0.8177950908472403, 0.7960701304790533, 0.8118683219700074, 0.4635246179820378, 0.627022163182386, 0.4565426193831268, 0.4950476609831127, 0.6880680079930315, 0.22519898576131825, 0.21018572634248445, 0.5608399888329592, 0.09799518946571861, 0.6696093459664239, 0.6211678989318066, 0.6842408547530401, 0.6557492776533388, 0.6483845141351627, 0.6508763967897665, 0.634304713820148, 0.6519448913987214, 0.6545266259040874, 0.844705671927219, 0.836214231419807, 0.8536694606924604, 0.8474299593225254, 0.8231991173398971, 0.8514615348479655, 0.8526306028969014, 0.8584169065040994, 0.8289966727415957, 0.09416352527571148, 0.06339524216944792, 0.10193753120023885, 0.1119688520914437, 0.11674993407044876, 0.09901753897516641, 0.14553643792761906, 0.14312056537440276, 0.08791726257157295, 0.33066345102255645, 0.2053851881316392, 0.3499161332408889, 0.3960621993650154, 0.7997852139712828, 0.20680368934434068, 0.2785735568091643, 0.17775408685103466, 0.2771797947141865, 0.5394919879163897, 0.48835302075311515, 0.4270238675490081, 0.510562497059016, 0.33836569539580974, 0.19958863805185922, 0.3741355127599998, 0.19994289197404536, 0.42691428959496447, 0.6056849023231962, 0.4442899240894289, 0.2549262022054134, 0.24606883332224472, 0.48168363592241326, 0.5632895902369293, 0.38965181869997145, 0.27654591546251095, 0.4018948389742394, 0.1963219817852515, 0.20662034583313915, 0.20478797316320707, 0.1801814122925418, 0.185696223920231, 0.21138054681130247, 0.241723499692569, 0.1945231384957855, 0.1927720636337673, 0.2223414561192839, 0.7650869854677026, 0.21920265357278035, 0.2070059748647054, 0.2072967669448641, 0.20838408899340588, 0.22257541609456355, 0.2046235515680166, 0.22485467167076245, 0.18802301139956945, 0.17476861949386735, 0.18522755172793082, 0.16939637958436082, 0.17811191489854716, 0.1963817849670063, 0.9208824476776154, 0.14824376427731367, 0.16402207860164086, 0.9269612635161577, 0.21305539413587615, 0.9051895977964703, 0.15666769444147943, 0.2253142245128944, 0.21121058071908516, 0.910331590121224, 0.16743386548474848, 0.199411886453555, 0.19101997360015666, 0.1869149299728854, 0.17528832146079132, 0.1763999652998245, 0.17917815444381868, 0.20649495495238213, 0.22998626983346493, 0.17790768292691883, 0.17738861551641416, 0.11303742379867177, 0.08029276443386713, 0.06542557852818331, 0.0963877482812735, 0.07603756719900756, 0.08076604633876339, 0.08969205872752117, 0.07624603529128304, 0.0749870667426743]}, "mutation_prompt": null}
{"id": "6da23cb1-8e74-46d6-a52e-09f990391c85", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.3 + 0.5 * self.success_rate, 0.3, 0.9)\n                    self.crossover_rate = np.clip(0.7 + 0.3 * self.success_rate, 0.7, 1.0)  # Slightly adjusted crossover rate\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Fine-tuned adaptive crossover rate for better exploration-exploitation balance.", "configspace": "", "generation": 70, "fitness": 0.47401547002023925, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.32.", "error": "", "parent_id": "4377dc65-57f7-48a2-acc8-5c82e680b163", "metadata": {"aucs": [0.852655620992429, 0.8808621624817707, 0.8519230796789625, 0.8559469870087169, 0.876690755146738, 0.8791606832462004, 0.8714988698713647, 0.8814815777190443, 0.8681197508355043, 0.6960070848953124, 9.999999999998899e-05, 0.7340236241182485, 0.7688176404013985, 0.7276299963785643, 0.6203587460088624, 0.018967670765784317, 0.004903360753501174, 0.7520912987869667, 0.1100330159466465, 0.12834652092556176, 0.1026742775271341, 0.07073638880876076, 0.1042972763972635, 0.09473696107359086, 0.1072102287009391, 0.07647215379060235, 0.08190544835570768, 0.08896384199344576, 0.08496482802937078, 0.10729925527835549, 0.11284046961350136, 0.1366895605873346, 0.08045945537404786, 0.07374229943035804, 0.11850226683243203, 0.08780827842181282, 0.9862558583104573, 0.9811994155810921, 0.944546616199363, 0.9815462923760268, 0.9797268612266788, 0.9697671907368525, 0.9799795440113772, 0.9809706144810489, 0.9740813042052321, 0.7186555571529267, 0.7135081945351254, 0.6475701866815012, 0.6316273900155847, 0.663339061597646, 0.7647514572917846, 0.678885988925513, 0.08171296903281089, 0.7337205109337769, 0.8778530893653781, 0.89362661926834, 0.8474188165094805, 0.906988410884668, 0.21298387222269166, 0.20610698978255215, 0.890356731278095, 0.8947779493174634, 0.888808938423849, 0.13200940360085078, 0.6865651812466136, 0.7204954222669173, 0.7197571476446611, 0.7130018610588078, 0.7865964946864361, 0.771696557888994, 0.7571895826094082, 0.7281414285712293, 0.7574448462735364, 0.7172224438285342, 0.7362977062221769, 0.7802987204871262, 0.12953449136715878, 0.7702119927647872, 0.8074180468449056, 0.7495136303138348, 0.7387208858523335, 0.6851355836571873, 9.999999999998899e-05, 0.7532116457515496, 0.7465880700877335, 0.7462931113806563, 0.729443819624904, 0.7696029273952169, 0.7452934128180152, 0.7455112980934389, 0.8161557593480763, 0.7661151320498878, 0.7583112141168845, 0.8119547633167431, 0.7440172648902603, 0.7929605814629412, 0.8285805219692065, 0.8045657192085881, 0.79830928631606, 0.44283928068600464, 0.633558312002392, 0.3993367560596668, 0.5570292085969442, 0.6725647034718557, 0.2787080544194034, 0.23550198880594075, 0.5528467010142177, 0.2329009253959642, 0.657440816479008, 0.6320569352927223, 0.6750558427818982, 0.6536123326059196, 0.666363863306567, 0.6559364141707089, 0.6188441223824963, 0.639834176460934, 0.6350635625837082, 0.842519770683861, 0.8321660042876927, 0.8553001017872923, 0.8471595670491241, 0.8320226974500451, 0.8479916195581046, 0.8497072848863308, 0.8605141702735645, 0.8471083318702436, 0.09416537752165954, 0.06340504558943316, 0.10129448626204685, 0.11203943310572972, 0.11674919224895253, 0.0975193058978826, 0.1455373547230936, 0.1431164836253943, 0.08781053685584206, 0.34692972812955014, 0.7868573279070987, 0.2512020823304978, 0.17722709059313002, 0.7817918593842412, 0.7565829766679554, 0.3920784871618461, 0.1761550370825713, 0.16239165916033127, 0.6407589156323208, 0.5392664813540711, 0.4584143119864498, 0.42991137951119807, 0.4111639852475222, 0.19954601542131556, 0.4266939410675795, 0.19983560758632513, 0.4968317726247655, 0.48676611519462853, 0.49234135886792196, 0.4355022710894819, 0.20461152448974107, 0.4470291919478391, 0.5243915000182433, 0.6082630824392121, 0.2759281715636841, 0.5216073995743389, 0.17335884440502636, 0.19905722455878117, 0.2260023651215296, 0.16760341743308904, 0.13824587290920587, 0.19167299941080795, 0.2109734877352777, 0.19299208037418525, 0.18843486601672876, 0.22232258765885182, 0.7252810626875463, 0.21920299268147336, 0.2070066335744667, 0.20729689570044418, 0.20829542204388418, 0.22260838327559418, 0.20462355866744297, 0.22485294280150825, 0.18802299516267207, 0.17472342934708707, 0.1852346654256598, 0.16939516407715127, 0.17810749911952295, 0.1963819708578728, 0.9222632750329584, 0.14824375265435374, 0.1640221752339499, 0.9260868739177817, 0.2130538241751797, 0.9059572645363057, 0.15666712742599065, 0.22531389059613482, 0.21121827933891657, 0.3207107275475153, 0.16738254880462022, 0.1994119628235449, 0.17442210403550795, 0.18961040572993226, 0.17181209785931784, 0.18510874853540193, 0.18041235849047565, 0.17833113008319235, 0.19315440404840778, 0.20910069037535983, 0.19013562610827273, 0.10879330246627084, 0.08111410541169972, 0.06459207249886256, 0.07849771720985133, 0.069511493915272, 0.08083484910887906, 0.07997047346886188, 0.06619773435655685, 0.07405929177077364]}, "mutation_prompt": null}
{"id": "75f9e11e-16ce-4f21-b61c-7d94178f6967", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.3 + 0.5 * self.success_rate, 0.3, 0.9)\n                    self.crossover_rate = np.clip(0.7 + 0.3 * self.success_rate, 0.8, 1.0)  # Changed crossover rate calculation\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Enhanced exploration by dynamically adjusting crossover rate based on success rate.", "configspace": "", "generation": 71, "fitness": 0.47401547002023925, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.32.", "error": "", "parent_id": "4377dc65-57f7-48a2-acc8-5c82e680b163", "metadata": {"aucs": [0.852655620992429, 0.8808621624817707, 0.8519230796789625, 0.8559469870087169, 0.876690755146738, 0.8791606832462004, 0.8714988698713647, 0.8814815777190443, 0.8681197508355043, 0.6960070848953124, 9.999999999998899e-05, 0.7340236241182485, 0.7688176404013985, 0.7276299963785643, 0.6203587460088624, 0.018967670765784317, 0.004903360753501174, 0.7520912987869667, 0.1100330159466465, 0.12834652092556176, 0.1026742775271341, 0.07073638880876076, 0.1042972763972635, 0.09473696107359086, 0.1072102287009391, 0.07647215379060235, 0.08190544835570768, 0.08896384199344576, 0.08496482802937078, 0.10729925527835549, 0.11284046961350136, 0.1366895605873346, 0.08045945537404786, 0.07374229943035804, 0.11850226683243203, 0.08780827842181282, 0.9862558583104573, 0.9811994155810921, 0.944546616199363, 0.9815462923760268, 0.9797268612266788, 0.9697671907368525, 0.9799795440113772, 0.9809706144810489, 0.9740813042052321, 0.7186555571529267, 0.7135081945351254, 0.6475701866815012, 0.6316273900155847, 0.663339061597646, 0.7647514572917846, 0.678885988925513, 0.08171296903281089, 0.7337205109337769, 0.8778530893653781, 0.89362661926834, 0.8474188165094805, 0.906988410884668, 0.21298387222269166, 0.20610698978255215, 0.890356731278095, 0.8947779493174634, 0.888808938423849, 0.13200940360085078, 0.6865651812466136, 0.7204954222669173, 0.7197571476446611, 0.7130018610588078, 0.7865964946864361, 0.771696557888994, 0.7571895826094082, 0.7281414285712293, 0.7574448462735364, 0.7172224438285342, 0.7362977062221769, 0.7802987204871262, 0.12953449136715878, 0.7702119927647872, 0.8074180468449056, 0.7495136303138348, 0.7387208858523335, 0.6851355836571873, 9.999999999998899e-05, 0.7532116457515496, 0.7465880700877335, 0.7462931113806563, 0.729443819624904, 0.7696029273952169, 0.7452934128180152, 0.7455112980934389, 0.8161557593480763, 0.7661151320498878, 0.7583112141168845, 0.8119547633167431, 0.7440172648902603, 0.7929605814629412, 0.8285805219692065, 0.8045657192085881, 0.79830928631606, 0.44283928068600464, 0.633558312002392, 0.3993367560596668, 0.5570292085969442, 0.6725647034718557, 0.2787080544194034, 0.23550198880594075, 0.5528467010142177, 0.2329009253959642, 0.657440816479008, 0.6320569352927223, 0.6750558427818982, 0.6536123326059196, 0.666363863306567, 0.6559364141707089, 0.6188441223824963, 0.639834176460934, 0.6350635625837082, 0.842519770683861, 0.8321660042876927, 0.8553001017872923, 0.8471595670491241, 0.8320226974500451, 0.8479916195581046, 0.8497072848863308, 0.8605141702735645, 0.8471083318702436, 0.09416537752165954, 0.06340504558943316, 0.10129448626204685, 0.11203943310572972, 0.11674919224895253, 0.0975193058978826, 0.1455373547230936, 0.1431164836253943, 0.08781053685584206, 0.34692972812955014, 0.7868573279070987, 0.2512020823304978, 0.17722709059313002, 0.7817918593842412, 0.7565829766679554, 0.3920784871618461, 0.1761550370825713, 0.16239165916033127, 0.6407589156323208, 0.5392664813540711, 0.4584143119864498, 0.42991137951119807, 0.4111639852475222, 0.19954601542131556, 0.4266939410675795, 0.19983560758632513, 0.4968317726247655, 0.48676611519462853, 0.49234135886792196, 0.4355022710894819, 0.20461152448974107, 0.4470291919478391, 0.5243915000182433, 0.6082630824392121, 0.2759281715636841, 0.5216073995743389, 0.17335884440502636, 0.19905722455878117, 0.2260023651215296, 0.16760341743308904, 0.13824587290920587, 0.19167299941080795, 0.2109734877352777, 0.19299208037418525, 0.18843486601672876, 0.22232258765885182, 0.7252810626875463, 0.21920299268147336, 0.2070066335744667, 0.20729689570044418, 0.20829542204388418, 0.22260838327559418, 0.20462355866744297, 0.22485294280150825, 0.18802299516267207, 0.17472342934708707, 0.1852346654256598, 0.16939516407715127, 0.17810749911952295, 0.1963819708578728, 0.9222632750329584, 0.14824375265435374, 0.1640221752339499, 0.9260868739177817, 0.2130538241751797, 0.9059572645363057, 0.15666712742599065, 0.22531389059613482, 0.21121827933891657, 0.3207107275475153, 0.16738254880462022, 0.1994119628235449, 0.17442210403550795, 0.18961040572993226, 0.17181209785931784, 0.18510874853540193, 0.18041235849047565, 0.17833113008319235, 0.19315440404840778, 0.20910069037535983, 0.19013562610827273, 0.10879330246627084, 0.08111410541169972, 0.06459207249886256, 0.07849771720985133, 0.069511493915272, 0.08083484910887906, 0.07997047346886188, 0.06619773435655685, 0.07405929177077364]}, "mutation_prompt": null}
{"id": "c1c45d04-cbf7-4185-98a9-355d7e392f86", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.3 + 0.5 * self.success_rate, 0.3, 0.9)  # Changed scaling factor lower limit\n                    self.crossover_rate = np.clip(0.7 + 0.3 * self.success_rate, 0.8, 1.0)  # Adjusted crossover rate upper limit\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Enhanced exploration by adjusting scaling factor and crossover rate limits to improve success rate adaptation.", "configspace": "", "generation": 72, "fitness": 0.47401547002023925, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.32.", "error": "", "parent_id": "4377dc65-57f7-48a2-acc8-5c82e680b163", "metadata": {"aucs": [0.852655620992429, 0.8808621624817707, 0.8519230796789625, 0.8559469870087169, 0.876690755146738, 0.8791606832462004, 0.8714988698713647, 0.8814815777190443, 0.8681197508355043, 0.6960070848953124, 9.999999999998899e-05, 0.7340236241182485, 0.7688176404013985, 0.7276299963785643, 0.6203587460088624, 0.018967670765784317, 0.004903360753501174, 0.7520912987869667, 0.1100330159466465, 0.12834652092556176, 0.1026742775271341, 0.07073638880876076, 0.1042972763972635, 0.09473696107359086, 0.1072102287009391, 0.07647215379060235, 0.08190544835570768, 0.08896384199344576, 0.08496482802937078, 0.10729925527835549, 0.11284046961350136, 0.1366895605873346, 0.08045945537404786, 0.07374229943035804, 0.11850226683243203, 0.08780827842181282, 0.9862558583104573, 0.9811994155810921, 0.944546616199363, 0.9815462923760268, 0.9797268612266788, 0.9697671907368525, 0.9799795440113772, 0.9809706144810489, 0.9740813042052321, 0.7186555571529267, 0.7135081945351254, 0.6475701866815012, 0.6316273900155847, 0.663339061597646, 0.7647514572917846, 0.678885988925513, 0.08171296903281089, 0.7337205109337769, 0.8778530893653781, 0.89362661926834, 0.8474188165094805, 0.906988410884668, 0.21298387222269166, 0.20610698978255215, 0.890356731278095, 0.8947779493174634, 0.888808938423849, 0.13200940360085078, 0.6865651812466136, 0.7204954222669173, 0.7197571476446611, 0.7130018610588078, 0.7865964946864361, 0.771696557888994, 0.7571895826094082, 0.7281414285712293, 0.7574448462735364, 0.7172224438285342, 0.7362977062221769, 0.7802987204871262, 0.12953449136715878, 0.7702119927647872, 0.8074180468449056, 0.7495136303138348, 0.7387208858523335, 0.6851355836571873, 9.999999999998899e-05, 0.7532116457515496, 0.7465880700877335, 0.7462931113806563, 0.729443819624904, 0.7696029273952169, 0.7452934128180152, 0.7455112980934389, 0.8161557593480763, 0.7661151320498878, 0.7583112141168845, 0.8119547633167431, 0.7440172648902603, 0.7929605814629412, 0.8285805219692065, 0.8045657192085881, 0.79830928631606, 0.44283928068600464, 0.633558312002392, 0.3993367560596668, 0.5570292085969442, 0.6725647034718557, 0.2787080544194034, 0.23550198880594075, 0.5528467010142177, 0.2329009253959642, 0.657440816479008, 0.6320569352927223, 0.6750558427818982, 0.6536123326059196, 0.666363863306567, 0.6559364141707089, 0.6188441223824963, 0.639834176460934, 0.6350635625837082, 0.842519770683861, 0.8321660042876927, 0.8553001017872923, 0.8471595670491241, 0.8320226974500451, 0.8479916195581046, 0.8497072848863308, 0.8605141702735645, 0.8471083318702436, 0.09416537752165954, 0.06340504558943316, 0.10129448626204685, 0.11203943310572972, 0.11674919224895253, 0.0975193058978826, 0.1455373547230936, 0.1431164836253943, 0.08781053685584206, 0.34692972812955014, 0.7868573279070987, 0.2512020823304978, 0.17722709059313002, 0.7817918593842412, 0.7565829766679554, 0.3920784871618461, 0.1761550370825713, 0.16239165916033127, 0.6407589156323208, 0.5392664813540711, 0.4584143119864498, 0.42991137951119807, 0.4111639852475222, 0.19954601542131556, 0.4266939410675795, 0.19983560758632513, 0.4968317726247655, 0.48676611519462853, 0.49234135886792196, 0.4355022710894819, 0.20461152448974107, 0.4470291919478391, 0.5243915000182433, 0.6082630824392121, 0.2759281715636841, 0.5216073995743389, 0.17335884440502636, 0.19905722455878117, 0.2260023651215296, 0.16760341743308904, 0.13824587290920587, 0.19167299941080795, 0.2109734877352777, 0.19299208037418525, 0.18843486601672876, 0.22232258765885182, 0.7252810626875463, 0.21920299268147336, 0.2070066335744667, 0.20729689570044418, 0.20829542204388418, 0.22260838327559418, 0.20462355866744297, 0.22485294280150825, 0.18802299516267207, 0.17472342934708707, 0.1852346654256598, 0.16939516407715127, 0.17810749911952295, 0.1963819708578728, 0.9222632750329584, 0.14824375265435374, 0.1640221752339499, 0.9260868739177817, 0.2130538241751797, 0.9059572645363057, 0.15666712742599065, 0.22531389059613482, 0.21121827933891657, 0.3207107275475153, 0.16738254880462022, 0.1994119628235449, 0.17442210403550795, 0.18961040572993226, 0.17181209785931784, 0.18510874853540193, 0.18041235849047565, 0.17833113008319235, 0.19315440404840778, 0.20910069037535983, 0.19013562610827273, 0.10879330246627084, 0.08111410541169972, 0.06459207249886256, 0.07849771720985133, 0.069511493915272, 0.08083484910887906, 0.07997047346886188, 0.06619773435655685, 0.07405929177077364]}, "mutation_prompt": null}
{"id": "7bd32ffe-b332-41d2-9f0d-f33126e8b8cf", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                # Change: Alter mutation strategy to improve diversity\n                mutant = np.clip(a + self.scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.3 + 0.5 * self.success_rate, 0.3, 0.9)  # Changed scaling factor lower limit\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Enhanced exploration by adjusting mutation strategy to improve diversity in search.", "configspace": "", "generation": 73, "fitness": 0.3260079658459342, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.21.", "error": "", "parent_id": "4377dc65-57f7-48a2-acc8-5c82e680b163", "metadata": {"aucs": [0.5989833939829743, 0.6133675616599666, 0.6660556149749323, 0.6260168346798743, 0.6730237597195661, 0.6679391398520689, 0.6449718802825424, 0.6855594146607605, 0.6430711748064092, 0.46805228895936957, 0.4205199002827874, 0.4479413201479845, 0.4343915227801798, 0.3945773058917724, 0.39851122604614453, 0.4260498830663493, 0.41688895833929596, 0.43491754094163604, 0.09085331868897706, 0.09329878147375403, 0.07887366126192641, 0.09101731297690807, 0.09016781518600692, 0.09945324724508575, 0.09462488024978954, 0.09539476619741327, 0.08762153413725049, 0.07378685595638468, 0.08361911383805853, 0.08202254273542076, 0.08006662886011073, 0.07316979802651058, 0.07326715890099444, 0.07760922499271838, 0.0857670409225959, 0.07471878009206756, 0.9164619637214526, 0.6446186851051259, 0.5341149110550627, 0.5620470945343079, 0.9197939692255683, 0.7821856614705629, 0.723189634802782, 0.7912437583895232, 0.8703785021246171, 0.3325824778919607, 0.3376837100576022, 0.3071977250963941, 0.3346253241158509, 0.36537369203550196, 0.3271824525472965, 0.36642269602119737, 0.3442550253146923, 0.33633829359800915, 0.6772683494335057, 0.6889911995345712, 0.6572916510735862, 0.6607155703573067, 0.6498024915641409, 0.6954921219412638, 0.683088738208028, 0.6745552078824124, 0.6992490911523582, 0.2912052946832976, 0.3310564083499353, 0.3005090132264455, 0.28527255395983153, 0.33830766684940916, 0.2856924779505011, 0.37151084802252565, 0.33087006049976164, 0.3868825533832817, 0.04520746279804366, 0.19862882391736125, 0.009823549300516099, 0.23846163327342795, 0.2727680131394672, 0.25092511328717104, 0.32753249775958826, 0.28345052559753314, 0.2803569364413544, 0.3377722013256602, 0.35682677650443195, 0.3434795037980142, 0.39984833298290656, 0.44444954146900073, 0.34649501669384664, 0.3378377280846576, 0.3224989867155992, 0.35787163702455915, 0.5200055097124139, 0.4581692396360598, 0.4534477040950392, 0.46468053215189775, 0.49822564682095516, 0.4967006607936917, 0.49973822069899465, 0.4882649835473424, 0.5185748015720464, 0.14415972422725876, 0.10852410925355105, 0.08872256462685468, 0.20461389226068627, 0.16245829286497315, 0.1998416674163338, 0.12179019761768994, 0.06857773631941633, 0.09086892626254284, 0.23925968570228573, 0.25419427100156256, 0.24588032178198005, 0.2624285182359527, 0.24772261766053294, 0.2623464147240051, 0.262585533196939, 0.2452208026943984, 0.24934223320879223, 0.5835475657666679, 0.5531782201192416, 0.5738598492067017, 0.6131526006480361, 0.612478228328813, 0.6001660499001874, 0.5748527594824411, 0.574408251201594, 0.5400233484292665, 0.08860679405555527, 0.09022479213395096, 0.09708593738489346, 0.08551819290444818, 0.10195653945455108, 0.08610234376491444, 0.07790513754004769, 0.07420377829094282, 0.07812144190212511, 0.17102462708514665, 0.15185784908570044, 0.17459965905795471, 0.16704502079790895, 0.2996973724857974, 0.13959111478073882, 0.16288542828910524, 0.217739721161486, 0.1592878713109358, 0.30566786792523515, 0.29966996799774204, 0.30222975084868675, 0.2785498738804899, 0.2787706474685926, 0.25691182254959677, 0.30044414436249667, 0.3085397068668566, 0.32787912250331697, 0.253486033876557, 0.2482102781948261, 0.23469889973799796, 0.22874039894208464, 0.240070723558502, 0.264649036720799, 0.24617009463559814, 0.25807256693712466, 0.2353690072753012, 0.18484424797401489, 0.18553650253911735, 0.18337615332684964, 0.19697140256935208, 0.19878745890990368, 0.18923795454701653, 0.17440473965115366, 0.16571435293419257, 0.1799122506230979, 0.18180792093619613, 0.17602421998508888, 0.22385665545802225, 0.19427898799527077, 0.18848272863140525, 0.1792037140448146, 0.17556723513143957, 0.17802065181620075, 0.17745776217009512, 0.7398953755204731, 0.7338278769291867, 0.6805746561221819, 0.18587312772378262, 0.7055133989415427, 0.18256111388808605, 0.6250760173755503, 0.6678158931658094, 0.7381350353064813, 0.629552930074847, 0.6019489783313559, 0.6610709673956741, 0.19678642743057306, 0.6404142058990383, 0.6388849216003691, 0.21017012022869352, 0.20421007714282013, 0.2044374307170248, 0.18425401669318375, 0.17076572398680567, 0.19105228467344348, 0.17884423049703213, 0.17864400659938728, 0.20979158373827123, 0.20196700605577267, 0.17814028182057806, 0.16267641949884204, 0.06701143540597021, 0.07964939224469758, 0.08570144888458109, 0.0787159590531219, 0.07083107060168436, 0.06866371610403799, 0.0806360570482153, 0.07099846435393353, 0.06168644738095008]}, "mutation_prompt": null}
{"id": "6eecc29d-fc12-4be6-863b-b56e17a1a5f6", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - c), self.lower_bound, self.upper_bound)  # Modified line\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.3 + 0.5 * self.success_rate, 0.3, 0.9)  # Changed scaling factor lower limit\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Minor scaling factor adjustment to improve convergence rate.", "configspace": "", "generation": 74, "fitness": 0.443593259404939, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.44 with standard deviation 0.31.", "error": "", "parent_id": "4377dc65-57f7-48a2-acc8-5c82e680b163", "metadata": {"aucs": [0.859856700161116, 0.8506946714758356, 0.8495570814107989, 0.8575285995962074, 0.8661346938958275, 0.8842888574400668, 0.8540520346405147, 0.890534913604103, 0.8644101097640868, 0.7714138571099398, 0.07378300352900402, 0.7341180881703753, 0.7548178827675107, 0.06601344297055889, 0.6843735084665385, 0.7754850740365811, 0.77750631238738, 0.7452216121425617, 0.09544222550487735, 0.14360731313541475, 0.1005034724123367, 0.14719876327565762, 0.08886984781398333, 0.117558005769276, 0.13675974671132185, 0.13521484581622167, 0.07785171580621641, 0.08435563940500745, 0.08413422285254601, 0.08793167758579346, 0.12913775312874043, 0.11435784719173536, 0.06651913806873255, 0.12105640949536922, 0.12948686522591069, 0.09303171584937242, 0.9728385867582291, 0.9735811763653475, 0.961071381549528, 0.960254642753083, 0.9815761465027882, 0.09916457080849927, 0.978533568370949, 0.9805740667049434, 0.9834098156145703, 0.6815999195692077, 0.6978425799797452, 0.6881869713760189, 0.6627231366274713, 0.7284108232445423, 0.6673008738147423, 0.7097786634025116, 0.08798589710535965, 0.6881232786778608, 0.38608326472184795, 0.2946910973012127, 0.8746855757035173, 0.8884512741581159, 0.19144931324258319, 0.20409710242833956, 0.8700482028721641, 0.8965609050054948, 0.8533657423851863, 0.6963554579168476, 0.7534819160189801, 0.7641485677703403, 0.7525185341383616, 0.6760214966522753, 0.7994603970529545, 0.6967476734358939, 0.7714751257696751, 0.7211206889562969, 0.7897516850657742, 0.7898572030648614, 0.13463399753820982, 0.7406451113418064, 0.7574571209540053, 0.7586048342614702, 0.7798881061854535, 0.7948466834517106, 0.7386442244145803, 0.07506296698959358, 0.43205425708388934, 0.7281775539967228, 0.7255290905287312, 0.761030224778276, 0.7253720133706125, 0.010251950087913242, 0.7499478233324643, 0.08313652018815387, 0.8070593238770534, 0.8189221878468576, 0.820005882387965, 0.8031093791610434, 0.7823883870164379, 0.789182611465531, 0.6013839031846887, 0.8223370529548261, 0.7959630425705831, 9.999999999998899e-05, 0.31393699390399066, 0.03582249974301399, 0.650911984581636, 0.7064531934206535, 0.44373894966485794, 0.45851706156076766, 0.36838339097831474, 0.07230809830401486, 0.6342315280446955, 0.6374588999280975, 0.6584134416167934, 0.6833647044058053, 0.6308183631452633, 0.6589371606507688, 0.6213741082203119, 0.6426500738602826, 0.08327254940416695, 0.8562916613087452, 0.8456834992374768, 0.8600344199431383, 0.8388292892825604, 0.8460444648723985, 0.20836386396975592, 0.8412851458771673, 0.8268567931101196, 0.8348543036859086, 0.10588798440052272, 0.11365769455332342, 0.12490770330082812, 0.10359626482646223, 0.14968882160338126, 0.11023448058827512, 0.0961227086432127, 0.06365630587137916, 0.10282650585803077, 0.22503998177149465, 0.31425445325559753, 0.22189996306588133, 0.17626867443057548, 0.6764967987677164, 0.27147937811628087, 0.2550769156809921, 0.4222675442046172, 0.21306964739598266, 0.36322277964781713, 0.4316316625124048, 0.4383828957874776, 0.5341595400754998, 0.2711582589056861, 0.46549250385400387, 0.5875306932342859, 0.6321219783556501, 0.5494527918834506, 0.38277525519260114, 0.2502257022396319, 0.5959104013788725, 0.4646695801067504, 0.1947167244714928, 0.40657537919494213, 0.22470992371544318, 0.4661120683771588, 0.5061553603200952, 0.15784032396395598, 0.18853957226912976, 0.18799245502166773, 0.24572995312437373, 0.2100571049152884, 0.2497975619288041, 0.18184737735577705, 0.18287147400820847, 0.21876654643554538, 0.1823342705090255, 0.216820343315702, 0.7654731121182627, 0.2423079430421834, 0.24738220908398245, 0.22262997641884585, 0.18085583556062568, 0.20772859091265716, 0.22269192041683283, 0.1229855253607599, 0.1362928487169751, 0.09888631023777783, 0.16847028520265872, 0.16189047246381527, 0.2088831546636878, 0.10805654463423564, 0.12688715986035226, 0.16586106567120573, 0.15704336422870147, 0.11318058403938791, 0.16818305924687316, 0.09412297481381937, 0.11251927773785841, 0.21116403988162458, 0.9121328239975268, 0.8966474329247713, 0.19555648670758108, 0.19352328499719174, 0.17941409707054534, 0.17098535037038387, 0.18263059688134464, 0.15833281024946266, 0.16709142311795422, 0.1739654211540601, 0.16664130343347983, 0.18371906197853294, 0.06308388087850914, 0.07391767649519698, 0.09656673028097795, 0.08343407389836743, 0.06322321548256937, 0.06928316638111864, 0.07253582206267895, 0.06942625851632689, 0.08579888864689433]}, "mutation_prompt": null}
{"id": "df8e2689-01b1-4e4e-8be6-8921388e0933", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + self.scaling_factor * (b - c), self.lower_bound, self.upper_bound)  # Changed mutation formula\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.3 + 0.5 * self.success_rate, 0.3, 0.9)  # Changed scaling factor lower limit\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - 5)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Enhanced exploration by adjusting mutation strategy to improve diversity.", "configspace": "", "generation": 75, "fitness": 0.3260079658459342, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.21.", "error": "", "parent_id": "4377dc65-57f7-48a2-acc8-5c82e680b163", "metadata": {"aucs": [0.5989833939829743, 0.6133675616599666, 0.6660556149749323, 0.6260168346798743, 0.6730237597195661, 0.6679391398520689, 0.6449718802825424, 0.6855594146607605, 0.6430711748064092, 0.46805228895936957, 0.4205199002827874, 0.4479413201479845, 0.4343915227801798, 0.3945773058917724, 0.39851122604614453, 0.4260498830663493, 0.41688895833929596, 0.43491754094163604, 0.09085331868897706, 0.09329878147375403, 0.07887366126192641, 0.09101731297690807, 0.09016781518600692, 0.09945324724508575, 0.09462488024978954, 0.09539476619741327, 0.08762153413725049, 0.07378685595638468, 0.08361911383805853, 0.08202254273542076, 0.08006662886011073, 0.07316979802651058, 0.07326715890099444, 0.07760922499271838, 0.0857670409225959, 0.07471878009206756, 0.9164619637214526, 0.6446186851051259, 0.5341149110550627, 0.5620470945343079, 0.9197939692255683, 0.7821856614705629, 0.723189634802782, 0.7912437583895232, 0.8703785021246171, 0.3325824778919607, 0.3376837100576022, 0.3071977250963941, 0.3346253241158509, 0.36537369203550196, 0.3271824525472965, 0.36642269602119737, 0.3442550253146923, 0.33633829359800915, 0.6772683494335057, 0.6889911995345712, 0.6572916510735862, 0.6607155703573067, 0.6498024915641409, 0.6954921219412638, 0.683088738208028, 0.6745552078824124, 0.6992490911523582, 0.2912052946832976, 0.3310564083499353, 0.3005090132264455, 0.28527255395983153, 0.33830766684940916, 0.2856924779505011, 0.37151084802252565, 0.33087006049976164, 0.3868825533832817, 0.04520746279804366, 0.19862882391736125, 0.009823549300516099, 0.23846163327342795, 0.2727680131394672, 0.25092511328717104, 0.32753249775958826, 0.28345052559753314, 0.2803569364413544, 0.3377722013256602, 0.35682677650443195, 0.3434795037980142, 0.39984833298290656, 0.44444954146900073, 0.34649501669384664, 0.3378377280846576, 0.3224989867155992, 0.35787163702455915, 0.5200055097124139, 0.4581692396360598, 0.4534477040950392, 0.46468053215189775, 0.49822564682095516, 0.4967006607936917, 0.49973822069899465, 0.4882649835473424, 0.5185748015720464, 0.14415972422725876, 0.10852410925355105, 0.08872256462685468, 0.20461389226068627, 0.16245829286497315, 0.1998416674163338, 0.12179019761768994, 0.06857773631941633, 0.09086892626254284, 0.23925968570228573, 0.25419427100156256, 0.24588032178198005, 0.2624285182359527, 0.24772261766053294, 0.2623464147240051, 0.262585533196939, 0.2452208026943984, 0.24934223320879223, 0.5835475657666679, 0.5531782201192416, 0.5738598492067017, 0.6131526006480361, 0.612478228328813, 0.6001660499001874, 0.5748527594824411, 0.574408251201594, 0.5400233484292665, 0.08860679405555527, 0.09022479213395096, 0.09708593738489346, 0.08551819290444818, 0.10195653945455108, 0.08610234376491444, 0.07790513754004769, 0.07420377829094282, 0.07812144190212511, 0.17102462708514665, 0.15185784908570044, 0.17459965905795471, 0.16704502079790895, 0.2996973724857974, 0.13959111478073882, 0.16288542828910524, 0.217739721161486, 0.1592878713109358, 0.30566786792523515, 0.29966996799774204, 0.30222975084868675, 0.2785498738804899, 0.2787706474685926, 0.25691182254959677, 0.30044414436249667, 0.3085397068668566, 0.32787912250331697, 0.253486033876557, 0.2482102781948261, 0.23469889973799796, 0.22874039894208464, 0.240070723558502, 0.264649036720799, 0.24617009463559814, 0.25807256693712466, 0.2353690072753012, 0.18484424797401489, 0.18553650253911735, 0.18337615332684964, 0.19697140256935208, 0.19878745890990368, 0.18923795454701653, 0.17440473965115366, 0.16571435293419257, 0.1799122506230979, 0.18180792093619613, 0.17602421998508888, 0.22385665545802225, 0.19427898799527077, 0.18848272863140525, 0.1792037140448146, 0.17556723513143957, 0.17802065181620075, 0.17745776217009512, 0.7398953755204731, 0.7338278769291867, 0.6805746561221819, 0.18587312772378262, 0.7055133989415427, 0.18256111388808605, 0.6250760173755503, 0.6678158931658094, 0.7381350353064813, 0.629552930074847, 0.6019489783313559, 0.6610709673956741, 0.19678642743057306, 0.6404142058990383, 0.6388849216003691, 0.21017012022869352, 0.20421007714282013, 0.2044374307170248, 0.18425401669318375, 0.17076572398680567, 0.19105228467344348, 0.17884423049703213, 0.17864400659938728, 0.20979158373827123, 0.20196700605577267, 0.17814028182057806, 0.16267641949884204, 0.06701143540597021, 0.07964939224469758, 0.08570144888458109, 0.0787159590531219, 0.07083107060168436, 0.06866371610403799, 0.0806360570482153, 0.07099846435393353, 0.06168644738095008]}, "mutation_prompt": null}
{"id": "59833120-a86a-4b70-bda0-0d3e9a38517b", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.3 + 0.5 * self.success_rate, 0.3, 0.9)  # Changed scaling factor lower limit\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - int(5 * (1 + 0.1 * np.random.rand())))  # Dynamic size reduction\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Improved exploitation by dynamically scaling population size based on fitness improvement.", "configspace": "", "generation": 76, "fitness": 0.47645200388066933, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.31.", "error": "", "parent_id": "4377dc65-57f7-48a2-acc8-5c82e680b163", "metadata": {"aucs": [0.852655620992429, 0.8808621624817707, 0.8519230796789625, 0.8588056343994557, 0.876690755146738, 0.8791606832462004, 0.8714988698713647, 0.8814815777190443, 0.8681197508355043, 0.7832589200035921, 9.999999999998899e-05, 0.7340236241182485, 0.7712310571820538, 0.7276299963785643, 0.6203587460088624, 0.7907465933883603, 0.004903360753501174, 0.7520912987869667, 0.08878528778472428, 0.12834652092556176, 0.1026742775271341, 0.07018174089397888, 0.1042972763972635, 0.09473696107359086, 0.10722231451091135, 0.07647215379060235, 0.08190544835570768, 0.11350497790015235, 0.08496482802937078, 0.10729925527835549, 0.11284046961350136, 0.1366895605873346, 0.08045945537404786, 0.09393387426661826, 0.11850226683243203, 0.08780827842181282, 0.9862558583104573, 0.9811994155810921, 0.944546616199363, 0.9815462923760268, 0.9797268612266788, 0.9697671907368525, 0.9799795440113772, 0.9809706144810489, 0.9740813042052321, 0.7186555571529267, 0.7135081945351254, 0.6475701866815012, 0.7049826870281621, 0.663339061597646, 0.7647514572917846, 0.692573851024088, 0.08171296903281089, 0.7337205109337769, 0.8591012967287169, 0.89362661926834, 0.8474188165094805, 0.8774228324457639, 0.21298387222269166, 0.20610698978255215, 0.2353196959428847, 0.8947779493174634, 0.888808938423849, 0.13265713781648647, 0.6865651812466136, 0.7204954222669173, 0.6734552383443511, 0.7130018610588078, 0.7865964946864361, 0.7366844725038485, 0.7571895826094082, 0.7281414285712293, 0.6564150983121031, 0.7172224438285342, 0.7362977062221769, 0.7802987204871262, 0.12953449136715878, 0.7702119927647872, 0.7448322865542343, 0.7495136303138348, 0.7387208858523335, 0.6858239175319094, 9.999999999998899e-05, 0.7532116457515496, 0.7263228733133409, 0.7462931113806563, 0.729443819624904, 0.7844866031947932, 0.7452934128180152, 0.7455112980934389, 0.8036089810594489, 0.7661151320498878, 0.7583112141168845, 0.8162487712991644, 0.7440172648902603, 0.7929605814629412, 0.8285805219692065, 0.8045657192085881, 0.79830928631606, 0.47534775360329684, 0.633558312002392, 0.3993367560596668, 0.5570292085969442, 0.6725647034718557, 0.2787080544194034, 0.0721889001386915, 0.5528467010142177, 0.2329009253959642, 0.6493154340959075, 0.6320569352927223, 0.6750558427818982, 0.6579965469886919, 0.666363863306567, 0.6559364141707089, 0.6188441223824963, 0.639834176460934, 0.6350635625837082, 0.836219957560741, 0.8321660042876927, 0.8553001017872923, 0.8631682598116124, 0.8320226974500451, 0.8479916195581046, 0.8497072848863308, 0.8605141702735645, 0.8471083318702436, 0.11017338040096747, 0.06340504558943316, 0.10129448626204685, 0.0746774252618434, 0.11674919224895253, 0.0975193058978826, 0.124936440563442, 0.1431164836253943, 0.08781053685584206, 0.34692972812955014, 0.7868573279070987, 0.2512020823304978, 0.17722709059313002, 0.7817918593842412, 0.7565829766679554, 0.3920784871618461, 0.1761550370825713, 0.16239165916033127, 0.5703720308292968, 0.5392664813540711, 0.4584143119864498, 0.42991137951119807, 0.4111639852475222, 0.19954601542131556, 0.4457948625448718, 0.19983560758632513, 0.4968317726247655, 0.48676611519462853, 0.49234135886792196, 0.4355022710894819, 0.4532339057501493, 0.4470291919478391, 0.5243915000182433, 0.4648951246575054, 0.2759281715636841, 0.5216073995743389, 0.17335884440502636, 0.19905722455878117, 0.2260023651215296, 0.20251002667900508, 0.13824587290920587, 0.19167299941080795, 0.21567162645512739, 0.19299208037418525, 0.18843486601672876, 0.22232258765885182, 0.7252810626875463, 0.21920299268147336, 0.2059858941111231, 0.20729689570044418, 0.20829542204388418, 0.22260838327559418, 0.20462355866744297, 0.22485294280150825, 0.18806358398528977, 0.17472342934708707, 0.1852346654256598, 0.16939210620476264, 0.17810749911952295, 0.1963819708578728, 0.9166718735471865, 0.14824375265435374, 0.1640221752339499, 0.9260868739177817, 0.2130538241751797, 0.9059572645363057, 0.15666712742599065, 0.22531389059613482, 0.21121827933891657, 0.9189670716471996, 0.16738254880462022, 0.1994119628235449, 0.17987059884333523, 0.18961040572993226, 0.17181209785931784, 0.18368723495639883, 0.18041235849047565, 0.17833113008319235, 0.18996126847517625, 0.20910069037535983, 0.19013562610827273, 0.10879330246627084, 0.08111410541169972, 0.06459207249886256, 0.07178579747214275, 0.069511493915272, 0.08083484910887906, 0.07997047346886188, 0.06619773435655685, 0.07405929177077364]}, "mutation_prompt": null}
{"id": "f4da9520-1ced-48f9-8ebd-a0f24ccfd87f", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                # Change: Include best_individual influence in the mutant vector\n                mutant = np.clip(best_individual + self.scaling_factor * (a - b) + 0.1 * (best_individual - self.population[i]), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.3 + 0.5 * self.success_rate, 0.3, 0.9)  # Changed scaling factor lower limit\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - int(5 * (1 + 0.1 * np.random.rand())))  # Dynamic size reduction\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Refined mutation strategy by incorporating best individual's influence to enhance convergence.", "configspace": "", "generation": 77, "fitness": 0.4362968022564037, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.44 with standard deviation 0.31.", "error": "", "parent_id": "59833120-a86a-4b70-bda0-0d3e9a38517b", "metadata": {"aucs": [0.8636218911573667, 0.8563378418789924, 0.8344648672699732, 0.8742897749141089, 0.8571370109410519, 0.18876845025814348, 0.8673597994438641, 0.8506270739934926, 0.8587501293442432, 9.999999999998899e-05, 9.999999999998899e-05, 0.7594988597836074, 0.7581481294593728, 0.7293299703319688, 9.999999999998899e-05, 0.0524501096199701, 0.018052735931017527, 0.05907687413993079, 0.11354895687187327, 0.13247807618636065, 0.11133837961286008, 0.09056610300602785, 0.12428559816016982, 0.14715258731360203, 0.10334806632776727, 0.10330321883123394, 0.06316809447300786, 0.10865643042418305, 0.0926828005070065, 0.06763866694980714, 0.10940884243612403, 0.11901418639206873, 0.11110219160224588, 0.07765798080241071, 0.11568157697129755, 0.07750833756854969, 0.9863244660883652, 0.9812469887422557, 0.9685624718578782, 0.9818144970499362, 0.9811120674327666, 0.9722544617517813, 0.9773914270001893, 0.982728744109918, 0.9768575141813093, 0.5730428932115983, 0.5282611091308891, 0.5639613374733953, 0.48403885104088995, 0.5317579390792015, 0.4584390490754322, 0.5045886808450317, 0.4762623171501872, 0.564321282327548, 0.8453189243418473, 0.8793944354012293, 0.38282239454285505, 0.8701863900085758, 0.9069549959347115, 0.2102878336684756, 0.882404454728331, 0.8388391220780548, 0.17757623157517066, 0.7628912567624917, 0.6781065012860388, 0.7221596331153199, 0.7037734560288125, 0.7015673042661668, 0.13244848090686645, 0.7061500667689418, 0.12910577500246945, 0.7129187171836291, 0.7518453227725246, 0.7154296983288725, 0.7833923007441164, 0.7381120134692705, 0.7352035194212485, 0.6796851196575155, 0.7163945415977946, 0.13070972165910555, 0.7647934922721819, 0.6974602286128473, 0.0735159900677852, 0.0732492685061199, 0.7044610385232599, 0.7374397153706476, 0.7258499467534625, 0.7460115172473831, 0.7493675459878254, 0.7465667053977214, 0.7539785654470823, 0.6958807885494517, 0.7908272574839874, 0.7856860058026681, 0.8121186006716923, 0.021566200900956733, 0.8373280201781077, 0.8114398861680165, 0.7845960213329464, 0.04931221696296506, 0.6575176892063768, 0.04988926152305717, 0.6464536958116357, 0.4839871867033084, 0.6105966917920018, 0.30704386728939137, 0.43322870497610877, 0.43546179519071815, 0.6332183374952166, 0.011741962333747358, 0.6169276325815076, 0.6567143454789657, 0.6376683947269262, 0.6320463990264843, 0.08072260272650111, 0.6311449339289879, 0.6291191537490395, 0.832898835777389, 0.8290973859827859, 0.8290817156741381, 0.8459597170840718, 0.8485034887874551, 0.8241166271663252, 0.829233067801354, 0.826009016498993, 0.8408861442177417, 0.09274931743360992, 0.08293890096367118, 0.09567846597281482, 0.11057625042680663, 0.11706207568513094, 0.1544405767317759, 0.0966922294871736, 0.12271643696763845, 0.07027315698846737, 0.3407066605289535, 0.1279867076133494, 0.16265437023371943, 0.25923047047712655, 0.2745545849925094, 0.17250396492986841, 0.1698628971483913, 0.1671267601614772, 0.1974347574912826, 0.5932660306405013, 0.4066039827685166, 0.487427800277771, 0.5280072670381031, 0.5036401257237468, 0.4771723021538663, 0.5677934960173829, 0.5153014848361809, 0.513496546948598, 0.38508717260863023, 0.3923519115612868, 0.3460508422761567, 0.43265293340426547, 0.42378069594495515, 0.18389643765476016, 0.20928097611407204, 0.39467268400092126, 0.5712395355650757, 0.19052769025240168, 0.20505152133933036, 0.20548048068255176, 0.19442989749689843, 0.19637853401557992, 0.1806849675665695, 0.20757553249980476, 0.2019735836448242, 0.20662042953115745, 0.20633331715828707, 0.2346154845544497, 0.7333411297817748, 0.24095323394833157, 0.24128258420914306, 0.2007737421176473, 0.24501126764807069, 0.2148184798320859, 0.24165732037893572, 0.18762562504421387, 0.11969861992844821, 0.9222135996736237, 0.8882708964800288, 0.17694582575565965, 0.16573510533603164, 0.16278746460888283, 0.8942565443519719, 0.1641235129525941, 0.9175267673676643, 0.11244183092562421, 0.12770757349509843, 0.15537520513155956, 0.8874123864246735, 0.20853283039827664, 0.9164602818106786, 0.1093213248106718, 0.21372244886451686, 0.19255765921819123, 0.18530045653501115, 0.1866956535895743, 0.18860750517489422, 0.18547166178378138, 0.19705053996445088, 0.18126688756931786, 0.20948673551252506, 0.18537163434027293, 0.11104894780888075, 0.09098589989949124, 0.07286453258283887, 0.10617864926319076, 0.08288816940104005, 0.08548054842442177, 0.08487260169233635, 0.07362252237639111, 0.09166524498992945]}, "mutation_prompt": null}
{"id": "559391cf-dcf5-45df-84c5-052a7110a5e0", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + self.scaling_factor * (b - c), self.lower_bound, self.upper_bound)  # Update mutation strategy\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.3 + 0.5 * self.success_rate, 0.3, 0.9)  # Changed scaling factor lower limit\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - int(5 * (1 + 0.1 * np.random.rand())))  # Dynamic size reduction\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Improved exploration by adjusting mutation strategy to use differential vectors for broader search capability.", "configspace": "", "generation": 78, "fitness": 0.3264583954374355, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.21.", "error": "", "parent_id": "59833120-a86a-4b70-bda0-0d3e9a38517b", "metadata": {"aucs": [0.5989833939829743, 0.6133675616599666, 0.6660556149749323, 0.6209279730631362, 0.6730237597195661, 0.6679391398520689, 0.6449718802825424, 0.6855594146607605, 0.6430711748064092, 0.42939237946192366, 0.4205199002827874, 0.4479413201479845, 0.4343915227801798, 0.3945773058917724, 0.39851122604614453, 0.42551239022999765, 0.41688895833929596, 0.43491754094163604, 0.09085331868897706, 0.09329878147375403, 0.07887366126192641, 0.09422708611941688, 0.09016781518600692, 0.09945324724508575, 0.09768485328378551, 0.09539476619741327, 0.08762153413725049, 0.08158558910723768, 0.08361911383805853, 0.08202254273542076, 0.07306205850251213, 0.07316979802651058, 0.07326715890099444, 0.08194364680125965, 0.0857670409225959, 0.07471878009206756, 0.5055436851148281, 0.6446186851051259, 0.5341149110550627, 0.8836128211682532, 0.9197939692255683, 0.7821856614705629, 0.6129378855945563, 0.7912437583895232, 0.8703785021246171, 0.3325824778919607, 0.3376837100576022, 0.3071977250963941, 0.35171841522646563, 0.36537369203550196, 0.3271824525472965, 0.36642269602119737, 0.3442550253146923, 0.33633829359800915, 0.6550313638581139, 0.6889911995345712, 0.6572916510735862, 0.6560890735125102, 0.6498024915641409, 0.6954921219412638, 0.6484465154845093, 0.6745552078824124, 0.6992490911523582, 0.278832809615552, 0.3310564083499353, 0.3005090132264455, 0.3156078632046644, 0.33830766684940916, 0.2856924779505011, 0.3517433603785126, 0.33087006049976164, 0.3868825533832817, 0.42389204707724903, 0.19862882391736125, 0.009823549300516099, 0.23846163327342795, 0.2727680131394672, 0.25092511328717104, 0.36821386715032545, 0.28345052559753314, 0.2803569364413544, 0.3475427314792606, 0.35682677650443195, 0.3434795037980142, 0.3592501081594077, 0.44444954146900073, 0.34649501669384664, 0.3304101109820673, 0.3224989867155992, 0.35787163702455915, 0.5200055097124139, 0.4581692396360598, 0.4534477040950392, 0.49346247492284734, 0.49822564682095516, 0.4967006607936917, 0.5411523653778363, 0.4882649835473424, 0.5185748015720464, 0.10520939216796465, 0.10852410925355105, 0.08872256462685468, 0.15897952299446882, 0.16245829286497315, 0.1998416674163338, 0.11463204997029008, 0.06857773631941633, 0.09086892626254284, 0.24621782112333102, 0.25419427100156256, 0.24588032178198005, 0.2546114145661399, 0.24772261766053294, 0.2623464147240051, 0.27686102514349764, 0.2452208026943984, 0.24934223320879223, 0.5835475657666679, 0.5531782201192416, 0.5738598492067017, 0.6098739083103422, 0.612478228328813, 0.6001660499001874, 0.5831977661613847, 0.574408251201594, 0.5400233484292665, 0.0886067939953491, 0.09022479213395096, 0.09708593738489346, 0.0929937698580603, 0.10195653945455108, 0.08610234376491444, 0.08359057352956512, 0.07420377829094282, 0.07812144190212511, 0.17102462708514665, 0.15185784908570044, 0.17459965905795471, 0.16704502079790895, 0.2996973724857974, 0.13959111478073882, 0.16288542828910524, 0.217739721161486, 0.1592878713109358, 0.29614165591840724, 0.29966996799774204, 0.30222975084868675, 0.27854953027417517, 0.2787706474685926, 0.25691182254959677, 0.30819661265078035, 0.3085397068668566, 0.32787912250331697, 0.253486033876557, 0.2482102781948261, 0.23469889973799796, 0.22874039894208464, 0.240070723558502, 0.264649036720799, 0.2489491506112007, 0.25807256693712466, 0.2353690072753012, 0.18484424797401489, 0.18553650253911735, 0.18337615332684964, 0.17737707729590968, 0.19878745890990368, 0.18923795454701653, 0.19295707982478638, 0.16571435293419257, 0.1799122506230979, 0.1840655897686766, 0.17602421998508888, 0.22385665545802225, 0.19427898799527077, 0.18848272863140525, 0.1792037140448146, 0.17556723513143957, 0.17802065181620075, 0.17745776217009512, 0.7398953755204731, 0.7338278769291867, 0.6805746561221819, 0.18587312772378262, 0.7055133989415427, 0.18256111388808605, 0.6250760173755503, 0.6678158931658094, 0.7381350353064813, 0.629552930074847, 0.6019489783313559, 0.6610709673956741, 0.19678642743057306, 0.6404142058990383, 0.6388849216003691, 0.2102432903671947, 0.20421007714282013, 0.2044374307170248, 0.18425401669318375, 0.17076572398680567, 0.19105228467344348, 0.17884423049703213, 0.17864400659938728, 0.20979158373827123, 0.20196700605577267, 0.17814028182057806, 0.16267641949884204, 0.06626507725041142, 0.07964939224469758, 0.08570144888458109, 0.0787159590531219, 0.07083107060168436, 0.06866371610403799, 0.06388316500300462, 0.07099846435393353, 0.06168644738095008]}, "mutation_prompt": null}
{"id": "8ad1b11a-55d6-4088-9bf1-304509152b3b", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                # Enhanced mutation strategy\n                mutant = np.clip(best_individual + self.scaling_factor * (a - b + best_individual - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.3 + 0.5 * self.success_rate, 0.3, 0.9)  # Changed scaling factor lower limit\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - int(5 * (1 + 0.1 * np.random.rand())))  # Dynamic size reduction\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Enhanced mutation strategy by incorporating the best-of-the-best individual for improved exploration.", "configspace": "", "generation": 79, "fitness": 0.24712824050595664, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.23.", "error": "", "parent_id": "59833120-a86a-4b70-bda0-0d3e9a38517b", "metadata": {"aucs": [0.6002664665880229, 0.640609423728149, 0.569349905216104, 0.6526790812080712, 0.18124054867606743, 0.7060949461332604, 0.6430833482533176, 0.17395459192491525, 0.6813209914359979, 9.999999999998899e-05, 9.999999999998899e-05, 0.037355213282870725, 0.04413615033106488, 9.999999999998899e-05, 0.04379114760164904, 0.4408773481690643, 0.050164469533629186, 9.999999999998899e-05, 0.09239845470241559, 0.07861578771533373, 0.07020839755886277, 0.0630615197548472, 0.09371420434100197, 0.07552751130683577, 0.07420438399430718, 0.07166943917345447, 0.0492639470737497, 0.07978166846113177, 0.0701677823652801, 0.07592652520839127, 0.06453623624633653, 0.07216512873730752, 0.07726078927823288, 0.07018603233130505, 0.07534299957373458, 0.06458723188082949, 0.9857967786499074, 0.9815608770340051, 0.09915638003963356, 0.9862263980982595, 0.974049570811751, 0.9849897700778519, 0.9811972717225862, 0.9941662234669973, 0.9850179514272401, 0.19931109975944472, 0.16085267974705353, 0.17985130837251528, 0.18475576714065867, 0.132998424172177, 0.15450509091781772, 0.22875988397657876, 0.11954822595471792, 0.05120340461488826, 0.47825357181193273, 0.26652199565609, 0.6297163978135674, 0.16110244125309436, 0.1593686039775133, 0.11651574898947437, 0.6512560056150805, 0.6645253007337129, 0.7342221286405355, 0.11441675439384713, 0.27143185575448303, 0.10671902196579408, 0.2060464129777687, 0.37725026256199967, 0.12091790480150721, 0.34799557861288166, 0.2692808059514398, 0.3360920478993713, 0.11795204205653431, 0.31037058115599037, 0.016239247478076146, 0.30036899289709273, 0.20521795594224512, 0.38597173222976233, 0.2990230877336385, 0.25963790343427773, 0.11811333013928194, 0.269916899560103, 0.0664264317005343, 0.08506197910309421, 9.999999999998899e-05, 0.05130241068640773, 0.0006301718743420004, 0.34524595812984127, 0.26238759984836857, 9.999999999998899e-05, 0.442757445008093, 0.48308164666124476, 0.03414446511530167, 0.42697304887803655, 9.999999999998899e-05, 0.5333515456177058, 0.5504777932488168, 0.5702214765491936, 0.4843597765740444, 9.999999999998899e-05, 0.168105033106852, 9.999999999998899e-05, 0.05999849754612552, 0.1046526873661272, 0.060820779915656376, 0.11561020680104162, 0.10170283092413024, 0.08360216885036864, 0.2268988335344162, 0.30055837311487466, 0.29466035032291993, 0.26651146952473037, 0.23310591342982845, 9.999999999998899e-05, 0.25639554933054165, 9.999999999998899e-05, 0.2517084254741714, 0.5980572651941576, 0.5767866495161242, 0.5673743732442772, 0.5542202825703162, 0.5815269845394576, 0.5768101590417644, 0.5129347702023612, 0.5109949268994056, 0.5216988645242883, 0.06811976761934546, 0.05604868325080248, 0.06089907291691454, 0.0567294948185203, 0.06360444740181759, 0.08155922441111141, 0.06178611480023699, 0.05673367450469591, 0.0846268830613266, 0.2350023357347404, 0.15596443793852977, 0.16047019177545718, 0.20077154549035048, 0.15767501199592027, 0.14834365668694738, 0.21070941242194918, 0.20171303087934533, 0.2002008311365896, 0.27815769958460657, 0.23303176812506088, 0.26218904421103084, 0.25782582081023064, 0.27333071994881597, 0.2686670892395584, 0.293404004187801, 0.28593910417877677, 0.25306626586174374, 0.2442460797658157, 0.24031448466609517, 0.25009566652213744, 0.24779085805395995, 0.20081186653126637, 0.18319424872770707, 0.2293524138838945, 0.28607693657591504, 0.1776815228163221, 0.19912629921146885, 0.16273002318213603, 0.17736324383491597, 0.1864163649743088, 0.17590214326905462, 0.15875872469390195, 0.1723615556494973, 0.19165264531121695, 0.1934350035840925, 0.17169064875123274, 0.16220159991950422, 0.16915316088531074, 0.17412197443226685, 0.17066227814447243, 0.1930921665940567, 0.1862322226803107, 0.1789931658052919, 0.1719454884153554, 0.18168086530075478, 0.16402944104377803, 0.16543313724625786, 0.1283309461120361, 0.7941330782595131, 0.11861784131334685, 0.11269466334841505, 0.11433840361491654, 0.16051651285402257, 0.7087579342147627, 0.11303837542899164, 0.6902982840494674, 0.10818143723016516, 0.11117250341373341, 0.20205576922956747, 0.7105396883749961, 0.1270595421361208, 0.2004213234921125, 0.20239564457351567, 0.1821093254944791, 0.17533012488851074, 0.20224523087212165, 0.18573472208176467, 0.1519822245986756, 0.19692792894880362, 0.19376222639474316, 0.1848281186308277, 0.06236820738946913, 0.06596008764532924, 0.05486867852662147, 0.05105571711098933, 0.0684385468328017, 0.07098312145194907, 0.06750326167831211, 0.03783188872660559, 0.06791249312873138]}, "mutation_prompt": null}
{"id": "8a1ac2ca-e632-4eb1-a09d-df52f064becf", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.3 + 0.6 * self.success_rate, 0.3, 0.9)  # Changed scaling factor adjustment\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - int(5 * (1 + 0.1 * np.random.rand())))  # Dynamic size reduction\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Improved exploration and exploitation balance by enhancing scaling factor adjustment.", "configspace": "", "generation": 80, "fitness": 0.42750108860603386, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.29.", "error": "", "parent_id": "59833120-a86a-4b70-bda0-0d3e9a38517b", "metadata": {"aucs": [0.7909031633154551, 0.797993406264076, 0.8002297945017237, 0.8012552800384538, 0.8049907877192423, 0.7875078415575314, 0.8243718367029174, 0.8084860115331147, 0.8040350375530365, 0.6486104685602103, 0.6760155497950268, 0.6819452661510024, 0.06617059628777822, 0.6660231993772584, 0.6830115293104624, 0.05411382562335443, 0.6393069848507185, 0.6928146056478541, 0.10369151532408727, 0.13177195249639206, 0.14819043859321956, 0.09021161868272976, 0.11051893416283987, 0.027100643173990857, 0.09100646070211549, 0.06629287753713675, 0.10530425228221885, 0.11259997806067279, 0.09256444313707712, 0.08893604586036397, 0.11293224137912694, 0.1012532717587612, 0.027298749348162676, 0.09663989543458451, 0.09530625454250274, 0.08744848223283519, 0.9862936706614555, 0.9816968309060363, 0.9600936831718112, 0.9833099204411213, 0.9804892679781179, 0.9729782501734685, 0.9810867358798352, 0.9817140455949176, 0.9711991124098639, 0.6152471519422732, 0.5600484463455597, 0.6733225729722353, 0.5015928675331641, 0.4674159994062177, 0.6155365741701366, 0.3419306951821828, 0.08660001853230881, 0.6303539017911629, 0.788783138872071, 0.809770871213159, 0.7991124477453593, 0.8322986492590879, 0.8411393287663802, 0.8618392074146803, 0.8756262386792647, 0.829474974987433, 0.8303212733398568, 0.1277187786131897, 0.6133603900630179, 0.6600811108501421, 0.6535916683893901, 0.6088660906263809, 0.7076443094447136, 0.6878831433647463, 0.6797744539082893, 0.6543499108471226, 0.6129051400520749, 0.6267753890238539, 0.635969757886545, 0.6447358194360217, 0.6616401361779749, 0.6046644977484661, 0.6528460213059093, 0.6455783531657873, 0.1325327398890962, 0.6367317476874084, 0.6686707851099564, 0.6804877604105615, 0.6696574079415678, 0.6513904910695425, 0.6414185989526482, 0.6139091955696815, 0.010036174528026631, 0.6301211342931301, 0.7331871096555407, 0.09149126635898996, 0.6911142908064729, 0.5922330240385665, 0.6188689575731077, 0.7373189391594429, 0.7748333451422061, 0.738149885957917, 0.7680673581697655, 0.43334637770908613, 0.5061537779672585, 0.36504026289701175, 0.5164753323555632, 0.482647001333539, 0.49263236119337606, 0.07036603696033927, 0.38750375944899995, 0.20504638281860377, 0.43594809154762304, 0.4744701237850182, 0.5060263312792715, 0.46932011364546844, 0.48050155294361974, 0.4640399126717617, 0.07885010785823598, 0.5432599710561887, 0.4575900804854254, 0.7468056660182336, 0.7509428577093994, 0.42834059436621297, 0.7744344894724635, 0.7990908712525118, 0.7906224841888185, 0.8113200701165719, 0.7909858857544871, 0.7809571249289279, 0.14054902458837093, 0.10504673922515761, 0.08988743368941743, 0.09542378014695407, 0.0948852956590297, 0.07168957324394853, 0.10565340782026778, 0.10374036176204937, 0.08891903154949465, 0.22563403136348004, 0.6845977279071929, 0.5060369289926098, 0.3100619181963461, 0.28541692685543163, 0.27245675941521397, 0.40871675111847094, 0.22562328808001764, 0.1525321356228556, 0.3588794480550942, 0.4628590464483916, 0.4526551313172634, 0.3648861802472735, 0.41898406722828396, 0.44883329932605986, 0.35494031442719465, 0.3560002873691287, 0.4720684900566814, 0.3022649902699528, 0.24902710630576907, 0.37220443361443867, 0.4134802910874391, 0.38233979109750726, 0.3344306123204559, 0.4016160168200691, 0.4213797444809757, 0.3285179325033528, 0.21202564407448832, 0.21542884243906268, 0.21901966983672505, 0.19738655773447378, 0.1791938570845525, 0.1908882925676395, 0.1920290338758035, 0.17967266799691117, 0.1799934002015673, 0.2442420807252912, 0.19817458296560142, 0.24271430644323666, 0.21836491874622133, 0.17332653208483184, 0.2056146095428859, 0.19486821181187874, 0.17682882680277145, 0.22185211242315295, 0.18753308489678788, 0.14639861024573797, 0.16330937634345666, 0.16769098208907052, 0.17787954493920166, 0.19554891085365278, 0.8845916762910639, 0.14779469281914548, 0.16373510977657302, 0.8961699728014314, 0.21239294151168453, 0.2066013472156013, 0.20984841386636688, 0.22523845395633812, 0.20983174290807916, 0.8849684758744801, 0.16712752449978907, 0.19542110877496854, 0.1761330227274448, 0.19304811547206369, 0.1759562783407066, 0.18428483420625386, 0.17283706415185685, 0.1764743128624794, 0.18943866077413318, 0.17638411817625566, 0.17846882123787478, 0.10761470704752063, 0.08204037141238385, 0.07694885379623118, 0.07088837563887296, 0.07852977329383504, 0.07782902504738509, 0.07458699760519316, 0.06573652171582467, 0.05963895031637434]}, "mutation_prompt": null}
{"id": "050518bb-beab-45cc-b2d3-fc2bdb9ff182", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 15 * dim  # Changed initial population size\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    self.scaling_factor = np.clip(0.3 + 0.5 * self.success_rate, 0.3, 0.9)  # Changed scaling factor lower limit\n                    self.crossover_rate = np.clip(0.8 + 0.2 * self.success_rate, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - int(5 * (1 + 0.1 * np.random.rand())))  # Dynamic size reduction\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Improved exploration by adjusting the initial population size to enhance search diversity.", "configspace": "", "generation": 81, "fitness": 0.42097148626114, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.28.", "error": "", "parent_id": "59833120-a86a-4b70-bda0-0d3e9a38517b", "metadata": {"aucs": [0.794973359578769, 0.77573164895396, 0.786116571730162, 0.8088161119563541, 0.7968128092722961, 0.786489407822047, 0.7928969035026305, 0.7789006109955207, 0.8072774464828353, 0.6379373932436567, 0.6447913164332977, 0.6451550296818223, 0.6153753987839935, 0.6529718860819871, 0.044094320858200975, 0.6309489077932411, 0.6426379984496524, 0.43347005791706683, 0.0870466564515262, 0.11881188797069553, 0.10847334831233624, 0.0943094669739234, 0.1304029420538143, 0.1509878176567645, 0.11831929696608712, 0.15168477458121854, 0.1694227718640452, 0.10793020560649724, 0.11108331696572427, 0.11716653829401713, 0.09692214375283315, 0.12222713790911599, 0.37755985919115187, 0.10057686072464223, 0.13004868366931532, 0.13346704987213165, 0.9836834149564923, 0.9660964059922085, 0.9315800637228313, 0.9845210170180583, 0.967021702621047, 0.9853437400909816, 0.9763064564542221, 0.9770756172310876, 0.979228192970181, 0.5267748872762053, 0.4784955017479622, 0.45404052060955624, 0.5165214598379411, 0.5389684558562474, 0.4716253018630985, 0.08605392860841543, 0.4912497260837003, 0.5808786004354742, 0.8163024854998645, 0.8211792695943765, 0.8120142765919336, 0.840109612070597, 0.7134200950032215, 0.8223567927009217, 0.8190819222327199, 0.11629127282353524, 0.8165185924836789, 0.6858467179072335, 0.1271655721024445, 0.615867136551549, 0.6239600388899849, 0.6417486193056412, 0.6113075542749646, 0.12501358825718523, 0.6872922117654758, 0.6331659561166151, 0.6868488254616356, 0.6375778499308087, 0.6136312647477784, 0.622781624664598, 0.6415185740435103, 0.6310130796836817, 0.5716382476506727, 0.12394357192493677, 0.6250535652983811, 0.06802584612657958, 0.6171255055174089, 0.06976841993869343, 0.5988364698535318, 0.6033305996690145, 0.5957988918865649, 0.5804878877978512, 0.6561371515780922, 0.5902432631684609, 0.6605805759994228, 0.677994366117316, 0.7097414814774834, 0.6920605541561523, 0.713235846461566, 0.6481736385606451, 0.7391528308935978, 0.7356174249948896, 0.685185744537294, 0.14051699007320517, 0.20773811534404274, 0.1914632354996224, 0.5027960939793927, 0.4625122192910346, 0.38956659702824137, 0.17876620895907314, 0.31113997950944317, 0.2664857983073643, 0.4291628923091375, 0.4749639925118617, 0.4858270755766776, 0.44863447832294745, 0.4577723963910495, 0.44894595727046427, 0.45696170307516615, 0.43443894797289473, 0.449512004776335, 0.751674996396497, 0.7486632957758868, 0.7967754121628003, 0.7781782112567235, 0.7584482406849159, 0.7662164352733335, 0.7554954150489999, 0.774508834042535, 0.8022950202570087, 0.09165250980212969, 0.12013231029596971, 0.09227686387294254, 0.12841223437122185, 0.12345983038566333, 0.12003213070554541, 0.11108361939486477, 0.145160582039233, 0.10315152884818779, 0.14731283469443757, 0.23958076056341826, 0.1660608848135665, 0.6065361807546602, 0.21067423878391833, 0.6355936124516417, 0.1869488978397139, 0.31293798972457765, 0.3911981589785286, 0.48066905399364557, 0.4344846897207719, 0.4317011587638454, 0.4262476098258644, 0.4626616634964519, 0.42249433375655543, 0.1755619390243106, 0.4514055819372408, 0.45917225423594243, 0.395444319438233, 0.3496494108694803, 0.35389719344671744, 0.3903644040073928, 0.3712198277820785, 0.37175549792858753, 0.2049827488153303, 0.4023184818316462, 0.3219572170593761, 0.18896407266557413, 0.19740336891818167, 0.19472330601539378, 0.202021055842048, 0.17039076227076544, 0.19554768831225622, 0.20074293712875857, 0.18744620674947732, 0.20036744260104344, 0.24002451020499016, 0.23791488784367698, 0.2145006762901639, 0.21622512984620124, 0.20521238928070074, 0.21399056586558918, 0.20144694829230925, 0.21520514700117344, 0.21616059981036673, 0.15881307273282985, 0.187803478053574, 0.8862364394215708, 0.1687163748058843, 0.8751323280815114, 0.19243327030237234, 0.11941703205678533, 0.21382114319662082, 0.15276852969736643, 0.8667143843086651, 0.11278781920807324, 0.8614671169874223, 0.16247590141190527, 0.20822780320257617, 0.2104501333384775, 0.11242680363223823, 0.16742882940649595, 0.1275621159286675, 0.18970326489886824, 0.18702995046007276, 0.2096001015509904, 0.1821527059582897, 0.16895341895104665, 0.19050901924492214, 0.17969636082098583, 0.19379366208083104, 0.15439982770723237, 0.09539896926638614, 0.10597527390903794, 0.09333483230143724, 0.08835031663121062, 0.06304541751560633, 0.0851149281192971, 0.07974719790925244, 0.07434067142069156, 0.07662399355649174]}, "mutation_prompt": null}
{"id": "13c4246c-e258-4231-b7a6-d30642688be3", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    diversity = np.std(self.population, axis=0).mean()\n                    self.scaling_factor = np.clip(0.3 + 0.4 * self.success_rate + 0.1 * diversity, 0.3, 0.9)  # Enhanced scaling factor adaptation\n                    self.crossover_rate = np.clip(0.8 + 0.1 * self.success_rate + 0.1 * diversity, 0.8, 1.0)  # Enhanced crossover rate adaptation\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - int(5 * (1 + 0.1 * np.random.rand())))  # Dynamic size reduction\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Enhanced exploration by introducing adaptive scaling factor and adaptive crossover rate linked to diversity.", "configspace": "", "generation": 82, "fitness": 0.48412678774967055, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.31.", "error": "", "parent_id": "59833120-a86a-4b70-bda0-0d3e9a38517b", "metadata": {"aucs": [0.8943148896174345, 0.9015470730896271, 0.8622418058679882, 0.8663131209163171, 0.8774117151532422, 0.8844655492317739, 0.8850111425439049, 0.893747869443986, 0.8818837910200881, 0.7661847654336168, 9.999999999998899e-05, 0.7824332053078197, 0.7618031345725715, 0.7722365412885448, 0.7507879729823144, 0.7771619832373242, 0.7590385150786728, 0.7644610953630997, 0.14954488445808567, 0.10683206452594263, 0.15508927209764967, 0.10422910462625201, 0.14563208168479436, 0.02678282652013897, 0.11313229428076188, 0.1408549783545544, 0.1359172798427548, 0.11179886003049178, 0.10940962377111796, 0.10504346767327699, 0.1007210817945452, 0.10879018725035816, 0.14875135524659655, 0.09250459813295131, 0.16502027209961811, 0.11840544024708055, 0.9862676229674028, 0.9812257576533782, 0.9549432477630113, 0.9839995545484143, 0.9780984765726326, 0.9717594427334839, 0.9803127925931808, 0.9810381011727307, 0.9744095645428572, 0.6826218651971695, 0.3745562280479656, 0.7109052567623565, 0.6701250206373153, 0.7086410153356247, 0.6093163540308083, 0.7241371806177294, 0.08727031606202296, 0.7318915242471449, 0.8862531179090896, 0.8621548525676533, 0.8828354821069959, 0.9229006757114399, 0.2134923259426964, 0.8943357064577596, 0.8888541621630112, 0.8944002122197899, 0.8697435153082866, 0.7514259789688907, 0.7265521033420346, 0.7184164641898807, 0.7049595253387027, 0.7866864483178158, 0.7352556027417747, 0.7473445445077335, 0.7386181554244474, 0.13415586924899292, 0.6815489543344457, 0.13202286137403718, 0.7414947353208163, 0.7002207512578801, 0.12964240740753286, 0.7222041525538294, 0.7370317728728033, 0.7361666068487354, 0.7439837884816336, 0.7417824916632367, 9.999999999998899e-05, 0.7282300088037306, 0.7173394314776075, 0.737611365895475, 0.7247781083813578, 0.7287303133043896, 0.7504785645788116, 0.6357555366986631, 0.8104168273056016, 0.7590543601689617, 0.7587941116424439, 0.7999615483837099, 0.704954681450668, 0.7798617160275902, 0.8122319797537563, 0.7740408905031667, 0.8142124210845366, 0.511422962137074, 0.3399129266478853, 0.4246899750873816, 0.4539444212075362, 0.1736984445740647, 0.6166193322127885, 0.07242017479124208, 0.32762607634923346, 0.27422561106690546, 0.6387120952182324, 0.5616633332420502, 0.6414528556843794, 0.6275349979131803, 0.6415273274377655, 0.6853740561686994, 0.6686322011612564, 0.6317353323225494, 0.6265489064948262, 0.8429291774883034, 0.8443698672735345, 0.8463853295398716, 0.8577266803099195, 0.8395370826785852, 0.8415134743271633, 0.8491812196306238, 0.854692715195846, 0.8510075734580917, 0.08270319300428253, 0.1121198082883873, 0.11210642008543015, 0.1108710899725498, 0.1018586495790903, 0.08924392160878436, 0.13533287479828982, 0.13563401666387598, 0.10536151064315014, 0.18733236269983944, 0.7488925105112402, 0.7441208334554248, 0.1161408991751659, 0.32274063263175645, 0.2285688736902023, 0.17137390505186434, 0.1765422856960931, 0.1527752657124649, 0.6472349426709931, 0.5207680357111693, 0.1760382306674937, 0.5623454440723732, 0.5212153887608412, 0.5815359728729056, 0.44227971755948947, 0.6940905555034481, 0.5345163328421534, 0.4088830251794533, 0.5235018685739932, 0.6293172322804184, 0.5010989661014555, 0.5071707434679296, 0.5401062108325088, 0.5256881132473854, 0.47797354856507546, 0.43279093745008745, 0.19450470288161736, 0.20187022149674416, 0.21488896376192956, 0.18735390072489544, 0.19380647892029534, 0.18766065340096771, 0.18578983304843433, 0.25546852795949315, 0.24249504503424946, 0.20684211190506996, 0.24433404377127643, 0.7935100589564084, 0.24933148499339475, 0.2065234211942245, 0.22208454327029714, 0.2509158111883104, 0.24366383650658985, 0.21932848040613417, 0.1883697824503443, 0.14663011028732575, 0.16421868788944716, 0.16868034462708292, 0.1780589967534072, 0.19582259164017846, 0.9072911084559282, 0.1481313118390004, 0.16394670516986243, 0.9021055894352469, 0.21302694308200554, 0.2082633357835375, 0.15573378830998685, 0.9242592322925428, 0.210895059573192, 0.9136734371762576, 0.1675126591007876, 0.21379065289892973, 0.15872801804353054, 0.18235686325595257, 0.18313837391186338, 0.17333170706940004, 0.16733559616000493, 0.17836670706550506, 0.17940777127610386, 0.23045235259885044, 0.18937786973901027, 0.11063330666911175, 0.09366549954031667, 0.08775104978313608, 0.07941791610884086, 0.08784146995739117, 0.08847329398432813, 0.13482987871021557, 0.0919227024016458, 0.10605655790923607]}, "mutation_prompt": null}
{"id": "f4dfc451-c050-4277-8808-071b2650e66d", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    diversity = np.std(self.population, axis=0).mean()\n                    self.scaling_factor = np.clip(0.3 + 0.4 * self.success_rate + 0.1 * diversity, 0.3, 0.9)  # Enhanced scaling factor adaptation\n                    self.crossover_rate = np.clip(0.8 + 0.1 * self.success_rate + 0.1 * diversity, 0.8, 1.0)  # Enhanced crossover rate adaptation\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, int(self.population_size * 0.95))  # Dynamic size reduction\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Improved convergence speed by dynamically adjusting the population size based on fitness variance.", "configspace": "", "generation": 83, "fitness": 0.48041991263920136, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.31.", "error": "", "parent_id": "13c4246c-e258-4231-b7a6-d30642688be3", "metadata": {"aucs": [0.8735126297928245, 0.8920911091769423, 0.8610247219836479, 0.8653676239055828, 0.878756197653339, 0.8767545608521173, 0.8949846746893185, 0.8770057546359501, 0.8692252100771604, 9.999999999998899e-05, 0.7387420072161641, 0.7742256024720197, 0.7991137506416489, 0.7826756639131293, 0.04732830721300285, 0.7847835379645391, 0.018739394115278474, 0.05334497538328142, 0.12835882199008297, 0.09776133111822238, 0.1236922948115543, 0.17136842474214287, 0.1163472764695378, 0.02774482183214455, 0.14358884604901745, 0.1665892733893073, 0.1501318833841382, 0.14089814436888626, 0.11746157339575636, 0.11092255109279159, 0.15185628344577928, 0.12002555764542033, 0.02877946782027907, 0.103678166112118, 0.12442627011209861, 0.12257366205349718, 0.9862676229674028, 0.9812257576533782, 0.09866123064046928, 0.9839995545484143, 0.9780262397423607, 0.9744534042816725, 0.9803127925931808, 0.9810381011727307, 0.9734568169552723, 0.7450647057670191, 0.648476564753421, 0.6386932980016953, 0.6687782128748347, 0.6965376215482587, 0.6387057252378983, 0.6441181280187814, 0.5876608705827744, 0.7002450439589718, 0.882565312756166, 0.8463758440516466, 0.825587335020276, 0.899216858088631, 0.8861114560844507, 0.8724118765877507, 0.8937455600408567, 0.912440895022145, 0.8829509409544604, 0.7713016763851126, 0.7317605348877406, 0.7192657319345199, 0.756426241501209, 0.7731643750595342, 0.772126241451066, 0.7659682362338701, 0.7315322083346325, 0.13417220985350797, 0.7392705462737381, 0.7480209293293196, 0.7833493996200528, 0.13600906443653638, 0.7181162586313697, 0.6974482050149551, 0.13367253444298244, 0.7423298184714253, 0.6695423336482751, 0.7246286265069314, 0.0716634852805269, 0.6851991761338694, 0.7475869716048532, 0.6785760783082141, 0.7367361822158695, 0.6788261022149666, 0.6699832596299105, 0.07684353222200957, 0.7774290476301895, 0.7411817013720956, 0.7669899752720668, 0.7911529956818575, 0.7123099604959926, 0.78264933409775, 0.8275648834664195, 0.7739392261793288, 0.7572039128776364, 0.23376075731909118, 0.1853434531783429, 0.5705079578413162, 0.5872106562722617, 0.6391917510450835, 0.639134268687835, 0.2431240221115032, 0.4464857790203497, 0.28421028120309944, 0.6066296927910884, 0.6154080434127525, 0.6072061606261394, 0.6274460584714432, 0.6363524361019808, 0.6404664024511406, 0.618761473991277, 0.5924737985374042, 0.6348178213554401, 0.8582871094307021, 0.8367501660102354, 0.8459734225607496, 0.8491578237542196, 0.8324897020100338, 0.82832737732485, 0.8394026401501539, 0.8513204817851597, 0.85887547693141, 0.10198399516304146, 0.13459487244791668, 0.10997261809619319, 0.12138414327099434, 0.09444332730828264, 0.13800546784387313, 0.07844784846481145, 0.13319496277925424, 0.11291478313531356, 0.2828763277750852, 0.7787421848684211, 0.17164974442768943, 0.11609608874829647, 0.7457035733556956, 0.7697120562459607, 0.3289165920242454, 0.17183682010585577, 0.16522040638756275, 0.5629945049084601, 0.6107328144272337, 0.6656132317322794, 0.5798443104351693, 0.5526498955721323, 0.5250158209287656, 0.23836027526749082, 0.1948729944325338, 0.5596030120565443, 0.43780948801559494, 0.5278132358376062, 0.5180378957061378, 0.5333419932046077, 0.37866098076728827, 0.24239668203250309, 0.5136187688612818, 0.4358654646511504, 0.47127421746803766, 0.17718933284642246, 0.20377850828643962, 0.20074345587084585, 0.20000995692603063, 0.19285957974676704, 0.22038578972431067, 0.260925735724585, 0.16942156047170354, 0.2200560034279574, 0.22198239195288372, 0.2199247523823562, 0.2198457313472606, 0.2528519008428557, 0.2183525498833334, 0.23753592903563958, 0.24448763663428819, 0.2412672443099394, 0.24173376413956305, 0.1879629765219506, 0.1468592715581255, 0.89379923671643, 0.16882048972396624, 0.17780523176001883, 0.19616029705146953, 0.8998837083828999, 0.14805287309017645, 0.16402461202664942, 0.9095754955545171, 0.21289276757487008, 0.8583745205946214, 0.15560763731741079, 0.8308641838591247, 0.21017027313170422, 0.9093983754825686, 0.16730674691653313, 0.19936677068120845, 0.16802072100786025, 0.18235686325595257, 0.17399557569966506, 0.21475132130744456, 0.1744341313600526, 0.1776453401578295, 0.17397851895960614, 0.390633450294548, 0.2394115625159372, 0.12955141005190418, 0.1273759564099589, 0.09773998638548764, 0.12577259804323826, 0.08337713731267615, 0.08654042568859244, 0.1535143868055866, 0.08738813297229642, 0.12557076908908782]}, "mutation_prompt": null}
{"id": "6833fd4e-ad15-43f0-8f75-7b0a96ab3da8", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Increased initial population size\n        self.scaling_factor = 0.6  # Initial scaling factor\n        self.crossover_rate = 0.8  # Adjust crossover rate\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1\n        self.learning_factor = 0.05  # Introduce a learning factor\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + self.scaling_factor * (b - c), self.lower_bound, self.upper_bound)  # Use a different mutation strategy\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < self.crossover_rate  # Vectorized crossover\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = (1.0 - self.learning_factor) * self.success_rate + self.learning_factor\n\n                if eval_count % (self.population_size * 2) == 0:\n                    diversity = np.std(self.population, axis=0).mean()\n                    self.scaling_factor = np.clip(0.4 + 0.3 * self.success_rate + 0.2 * diversity, 0.3, 0.9)\n                    self.crossover_rate = np.clip(0.75 + 0.15 * self.success_rate + 0.1 * diversity, 0.75, 0.95)  # Adjust crossover rate limits\n\n            if eval_count % (self.population_size * 3) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - int(5 * (1 + np.random.rand() * 0.1)))\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Leverage adaptive learning rate strategies to enhance convergence speed and exploit diversity for better exploration.", "configspace": "", "generation": 84, "fitness": 0.22636577632722257, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.19.", "error": "", "parent_id": "13c4246c-e258-4231-b7a6-d30642688be3", "metadata": {"aucs": [0.4578782337300823, 0.4688438017016202, 0.48885935516738555, 0.5159622157964252, 0.5279081742881504, 0.5382671552281979, 0.5010584439741257, 0.4751999559714746, 0.47684184060025125, 0.23552757828457072, 0.257294571673206, 0.2856145859300363, 0.23222198634871583, 0.26591932188662815, 0.2639231371847559, 0.24749559348703853, 0.23702181826349022, 0.25443703846978827, 0.09558044731923854, 0.11429096111743131, 0.09233021276515119, 0.08403271980002958, 0.08906224449576672, 0.07923671418855571, 0.0946698399146817, 0.09349899068830803, 0.08478046223964653, 0.07918953524711592, 0.06950176709533784, 0.0822709954720382, 0.07450222128419248, 0.0791028416745948, 0.10346782052474301, 0.07543121125144736, 0.08122917450026912, 0.07635774296379427, 0.8454890119507255, 0.9567805306653658, 0.9508764172296008, 0.9224969862351833, 0.9122949422358596, 0.918193939212509, 0.9662063665512313, 0.9832010163939123, 0.8881047401160453, 0.21623834411272957, 0.22935797407898506, 0.2141995903419468, 0.20051387945498844, 0.2369323756037115, 0.23274325945769414, 0.22298558218623432, 0.2407476947987669, 0.2444496746503214, 0.3894275903882687, 0.3640534394782604, 0.47066073779679984, 0.44691185240926923, 0.4342663618230588, 0.47261276338938873, 0.27230486248669006, 0.4202760031564188, 0.4489042977580564, 0.1509681714007911, 0.160495779714952, 0.14338728435195813, 0.12441970837872307, 0.15902328508840802, 0.1418138313928925, 0.12299282129461497, 0.13152773587582123, 0.15808908196677063, 0.010009828532370757, 0.11074644963481184, 0.1732423967109178, 0.12093515909439811, 0.15206677372026678, 0.14293219594408746, 0.10952670984084834, 0.13594659267006992, 0.14084421924733748, 0.10874631144478719, 0.10872393331479013, 0.09080253463612276, 0.1198979862332783, 0.12638309426490157, 0.09124616551473375, 0.10669501112078428, 0.08363855140400445, 0.10296124925729544, 0.22135321303434552, 0.2744385253291435, 0.1965762579566478, 0.23924087502326097, 0.15793783470222444, 0.2123731304126878, 0.2556536048621215, 0.24621914076550877, 0.2650478525227391, 0.009862482429630615, 0.02989439271530614, 0.008015270807979147, 0.010958781685774577, 0.009381382904065538, 0.02617093390709757, 0.02516660915482738, 0.011501366310339822, 0.013787583542444692, 0.14216940638788167, 0.11919301094276669, 0.1197738840777256, 0.12609650955220764, 0.1340694901229159, 0.14167956743845844, 0.12543792809087206, 0.1252165657482407, 0.14870161315180264, 0.4141195443694575, 0.39394147576603133, 0.427069629896201, 0.4136515881910131, 0.43663140966790526, 0.40318161583142476, 0.38215575216120534, 0.4103580593532814, 0.4379677399321701, 0.07749145193447471, 0.08444580163228244, 0.09231151034217433, 0.0733113260979198, 0.08450155111431357, 0.1025339952131673, 0.07114137554880051, 0.08626833574475201, 0.07259580750016903, 0.14371416538305515, 0.2017859135755511, 0.13506224976207593, 0.1489855601197605, 0.16835408966450027, 0.2066050630291596, 0.1364254665753769, 0.15924284031400637, 0.15247614202593174, 0.24054429625837903, 0.22439844420241173, 0.24494820532424777, 0.23443780100255607, 0.21375909888994726, 0.2315987033225262, 0.25691468767207803, 0.24051160799654614, 0.25415951833102157, 0.1868146706923428, 0.18357062302277227, 0.18192252680608612, 0.16994110862042566, 0.17636569834400706, 0.16261522019630503, 0.19694990657191125, 0.19088513633099014, 0.1653345360558891, 0.17705867551803933, 0.161012519161146, 0.17802948192974621, 0.17700697794030862, 0.1765753543807248, 0.17928615833346406, 0.16644992793592683, 0.1721160242859351, 0.19760096838125385, 0.16535039679743802, 0.16852035559328016, 0.17288825839563327, 0.16866162357295922, 0.16858217302446943, 0.1675154064853146, 0.16520141218313744, 0.17854417910699016, 0.18430226917894899, 0.16132878642333182, 0.16472920619347586, 0.5409499634682977, 0.5836513819803251, 0.17673423876205818, 0.1731029846314246, 0.17421875184839497, 0.23896102673744357, 0.1649846983118619, 0.18778853456940203, 0.19503244865760938, 0.34805331928892047, 0.23360260055799498, 0.16134224232152206, 0.15679913851696925, 0.19955739440895248, 0.20510286801891586, 0.6437637223415071, 0.17064142642347047, 0.19144950848606335, 0.18530580548159448, 0.17148001526106837, 0.18050639056624418, 0.18828188250491107, 0.20300676754942626, 0.1741182972452352, 0.2050054296363234, 0.08623567361680684, 0.06283115850656318, 0.06853802670962927, 0.06485409645626605, 0.07015760733857856, 0.07032021524570953, 0.06494988445023087, 0.06267666722164489, 0.06422109423051492]}, "mutation_prompt": null}
{"id": "3d0a8e5d-9bc7-4571-bd9a-85e255466774", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n                if eval_count % (self.population_size * 2) == 0:\n                    # Adjust mutation and crossover rates based on success rate\n                    diversity = np.std(self.population, axis=0).mean()\n                    self.scaling_factor = np.clip(0.3 + 0.4 * self.success_rate + 0.1 * diversity, 0.3, 0.9)  # Enhanced scaling factor adaptation\n                    self.crossover_rate = np.clip(0.8 + 0.1 * self.success_rate + 0.1 * diversity, 0.8, 1.0)  # Enhanced crossover rate adaptation\n            \n            if eval_count % (self.population_size * 5) == 0 and self.population_size > 5 * self.dim:\n                self.population_size = max(5 * self.dim, self.population_size - int(5 * (1 + 0.1 * np.random.rand())))  # Dynamic size reduction\n                self.population_size = int(self.population_size * (1 + 0.05 * np.random.rand()))  # Introduce adaptive resizing\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Introduced adaptive population size scaling to enhance exploration capabilities while considering budget utilization.", "configspace": "", "generation": 85, "fitness": 0.47645882710826437, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.31.", "error": "", "parent_id": "13c4246c-e258-4231-b7a6-d30642688be3", "metadata": {"aucs": [0.8943148896174345, 0.8867377203185071, 0.8692516994240811, 0.8720083306987289, 0.8832094563657512, 0.8820246445738321, 0.8850111425439049, 0.875575929522893, 0.882549159848779, 9.999999999998899e-05, 0.7383956741397526, 0.7825535535018107, 0.7745111457017536, 0.06718715468021241, 0.6949330803556388, 0.7771619832373242, 0.7805470881934717, 0.6304386267089656, 0.13118605866265298, 0.10236320268948762, 0.15558351700298756, 0.10422910462625201, 0.13666136449383937, 0.02738097918719884, 0.11313229428076188, 0.08338907678286378, 0.14566887115054394, 0.15103715914619664, 0.1470692583465001, 0.14397887880175875, 0.1007210817945452, 0.10582672634655754, 0.10198252817323394, 0.09250459813295131, 0.10926490700677949, 0.14694793942450035, 0.9862676229674028, 0.9812257576533782, 0.09866123064046928, 0.9839995545484143, 0.9780262397423607, 0.9758553358284358, 0.9803127925931808, 0.9810381011727307, 0.9710629896465593, 0.6862758852945767, 0.7160661233759281, 0.6914990497015997, 0.6556902783695079, 0.6744905210321832, 0.6684956420705688, 0.7241371806177294, 0.0821534144134004, 0.7388758250521825, 0.8464318419507659, 0.8470946471155422, 0.8728604585352855, 0.915645201075544, 0.21185291403983075, 0.9166187515459869, 0.8945239966473376, 0.887599681335229, 0.8780358775706861, 0.6896703307345015, 0.7577569180356992, 0.6893349473907269, 0.7292476517668514, 0.6782203776108073, 0.7742534650731058, 0.13360626180814128, 0.7216207692257837, 0.7337277426589714, 0.7034752560518852, 0.714794152482974, 0.016400644164863976, 0.6640334940047112, 0.7009188802841617, 0.7651993755029424, 0.7822776810225163, 0.6899141350955906, 0.6265650695905438, 0.7417570493610468, 0.7394655615314749, 0.7285631175867554, 0.7149987954894858, 0.7126070622885692, 0.700610208343652, 0.7483304917215827, 0.7220860013066275, 0.7283794139525802, 0.809040499294299, 0.7687187286719726, 0.7810051825977415, 0.7974636009628122, 0.7093853847170634, 0.7800828612391715, 0.8122319797537563, 0.7892447105156849, 0.7630162752710592, 0.15757205938755992, 0.40148195018968746, 0.4687922612619745, 0.599272535429662, 0.6716987663602425, 0.5183616770689843, 0.07318885637030814, 0.5725261092739038, 0.09908574137482773, 0.6360075776619272, 0.6488699799316401, 0.5793824292183851, 0.6664797067009589, 0.6124776061729817, 0.5950015193447589, 0.6621797782245608, 0.6065727511772526, 0.6244423808829042, 0.8349955992263141, 0.8465726991789668, 0.8458402009212798, 0.8581015041670441, 0.8436636012503858, 0.8455992477543549, 0.8491812196306238, 0.8574838001028167, 0.8567684571968249, 0.08264399475821338, 0.09809184268579085, 0.1031194085146313, 0.1108710899725498, 0.07270675085996536, 0.1387316983455701, 0.13533287479828982, 0.13623894035481932, 0.10800540110891577, 0.2700918033800269, 0.23026161025210157, 0.1726281424722127, 0.11615758940480758, 0.27454757877553704, 0.6000555338830612, 0.17137390505186434, 0.17586580702277865, 0.15391552239889605, 0.6437583260678779, 0.5309292326532791, 0.5264045762712013, 0.5623454440723732, 0.5466647443063215, 0.5474913092821925, 0.5673458425564535, 0.2167844020707872, 0.6815941169345552, 0.4088830251794533, 0.4634132626198666, 0.48418834747257167, 0.2750105783430761, 0.2215662128065875, 0.24628880773754713, 0.5256881132473854, 0.6066381588100047, 0.5221725940185096, 0.19450470288161736, 0.21514977332015262, 0.22130520876512805, 0.1919878914697587, 0.16802415494444667, 0.19110794425512578, 0.18578983304843433, 0.19150103419139186, 0.2679831562458719, 0.20684211190506996, 0.21957195865448775, 0.24637193938276913, 0.22420238370620682, 0.2189897789909928, 0.717739332896242, 0.2509158111883104, 0.23797661365090172, 0.20902847411096326, 0.18825245476125552, 0.14654775388904506, 0.1835187277238458, 0.16868034462708292, 0.17774094855511446, 0.1969818691403542, 0.9072911084559282, 0.14795878464745926, 0.16392348522768274, 0.9021055894352469, 0.21265847322446274, 0.8811850938975427, 0.15573378830998685, 0.22469460206785075, 0.21181921246251945, 0.9136734371762576, 0.16759436015175977, 0.2139973853752697, 0.15872801804353054, 0.19854265508635438, 0.2034058118910239, 0.17333170706940004, 0.21770408303302868, 0.2084160969567116, 0.17940777127610386, 0.21793056863997362, 0.1891941803631415, 0.11063330666911175, 0.12240770875032703, 0.07656123217005129, 0.07941791610884086, 0.06389704432644716, 0.09190685705468327, 0.13482987871021557, 0.08606763629349312, 0.08172823912553973]}, "mutation_prompt": null}
{"id": "f8722487-340d-421d-9cae-1b5b7d42d16e", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n            if eval_count % (self.population_size * 2) == 0:\n                diversity = np.std(self.population, axis=0).mean()\n                self.scaling_factor = np.clip(0.3 + 0.4 * self.success_rate + 0.1 * diversity, 0.3, 0.9)\n                self.crossover_rate = np.clip(0.8 + 0.1 * self.success_rate + 0.1 * diversity, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0:\n                if eval_count > 0.5 * self.budget:  # New condition for adaptive reduction\n                    self.population_size = max(5 * self.dim, self.population_size - int(5 * (1 + 0.1 * np.random.rand())))\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Improved exploration and convergence speed by introducing an adaptive population size based on convergence progress.", "configspace": "", "generation": 86, "fitness": 0.49265655869330166, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.49 with standard deviation 0.30.", "error": "", "parent_id": "13c4246c-e258-4231-b7a6-d30642688be3", "metadata": {"aucs": [0.8893579941028189, 0.8752649050277542, 0.8570720270347363, 0.8751541007435216, 0.8879493914879476, 0.8718773681075366, 0.8922868628398649, 0.8748498116172335, 0.8807634688833255, 0.7684476185862797, 0.7015900068023053, 0.7814143090558674, 0.7908768804453432, 0.7549676686918076, 0.7405537277195848, 0.7836046943914323, 0.774089746017927, 0.7720990047248814, 0.12298193843450589, 0.14454832051744904, 0.13993308740443555, 0.14691075143539434, 0.1188355671292105, 0.028109204683936184, 0.1367820283215102, 0.13909261768640446, 0.11731063252102836, 0.14008982958174987, 0.12497171375478133, 0.12078131752439225, 0.13364944348154129, 0.12343609123263011, 0.127118793114256, 0.10408900779782393, 0.5984276631133457, 0.10372599725281595, 0.9862676229674028, 0.9812257576533782, 0.953111205744725, 0.9839995545484143, 0.9780262397423607, 0.9748398056181107, 0.9803127925931808, 0.9810381011727307, 0.974701421501568, 0.6860012791868715, 0.6743069088115186, 0.6448588145603691, 0.6553528537308784, 0.04516520568300397, 0.6322006978838713, 0.6701895006796827, 0.0871531057280357, 0.6717092011952062, 0.8688335623846631, 0.8479631380313365, 0.814607283659277, 0.8805892935359528, 0.19342645628687416, 0.8944027562086809, 0.8503343535820035, 0.862217592961675, 0.8733660913527346, 0.7325714649976408, 0.7515468895508124, 0.6890733532398681, 0.6535163800330559, 0.7523183308010342, 0.7103234455989678, 0.708276948490492, 0.6501994930748253, 0.1338991516840632, 0.7445454866226684, 0.713318068051806, 0.12869957817834676, 0.6798507017812969, 0.7014212071109056, 0.6792381340590022, 0.7030584753621439, 0.7377187953955469, 0.6181857303339843, 0.624590438372594, 0.6817597944190975, 0.6560969237852378, 0.7025720880382761, 0.6637873659510628, 0.7134275437938525, 0.6927077643349913, 0.5764881088472105, 0.679481173381782, 0.7787742861925032, 0.7539207768917675, 0.7656489030506154, 0.7637062298442413, 0.7496117461881739, 0.745134845068289, 0.7998889786733789, 0.7536898115027396, 0.7660441764946713, 0.25519638538054545, 0.3662877582591144, 0.6344102177858877, 0.4904402898570319, 0.6399609613432947, 0.6163206738823803, 0.12809715696071378, 0.40770552807302685, 0.17354218765585816, 0.5487869355292279, 0.5695582783807602, 0.5833391648018917, 0.6032454524556482, 0.6127062251036818, 0.6133074754815735, 0.5707393294099804, 0.5791524424430301, 0.5714309339312886, 0.8279246301045331, 0.8342825893880714, 0.8218333631084523, 0.8454840546140039, 0.8253951611090402, 0.8150233890468959, 0.8372179548901963, 0.8430288095246189, 0.8244210209245865, 0.09390156452032006, 0.12194267297660477, 0.10548637217288415, 0.12659867444443718, 0.07659547925781829, 0.12546052941063024, 0.07335968655786129, 0.07455994273889333, 0.12286345582668856, 0.7083779231576797, 0.775525651876326, 0.20071725878513158, 0.24757105869128282, 0.17975048840519448, 0.591328604201609, 0.1869837392948166, 0.1759781463291441, 0.6902984534978907, 0.5004620881889996, 0.6662024255070731, 0.5286904330920927, 0.536572851924004, 0.3869367171575856, 0.6276010420146743, 0.5478559320183274, 0.1979380187147135, 0.672266547041084, 0.33290218680546746, 0.4607447139368649, 0.5136907487930843, 0.45035273384752217, 0.20756810346450305, 0.41325798624376675, 0.558548335685652, 0.6132468621194884, 0.48392211388442397, 0.25809975215402947, 0.20468074068162823, 0.21139402750528025, 0.2044167859697552, 0.20198226054640134, 0.20431884680703505, 0.20319878744894038, 0.24711133282660103, 0.17949701188122835, 0.24856727439467552, 0.24719037605691285, 0.2075810012695185, 0.2535304784215787, 0.19286523693419189, 0.2325562509322413, 0.24304983771725086, 0.239567411043224, 0.22082221899325716, 0.18823214127222343, 0.14722436615238987, 0.16525291656562235, 0.8905573104795839, 0.17732325371470592, 0.16593956181100167, 0.9208608369257871, 0.14805288031844088, 0.16394656127326013, 0.8957459096688024, 0.21278307105352667, 0.88546420877629, 0.15576429751791132, 0.9015872587523607, 0.21030522201824164, 0.9046050669568542, 0.16737535012376525, 0.21373300959323693, 0.17715293866957815, 0.18235686325595257, 0.1899393305538648, 0.17333170706940004, 0.1985070371469524, 0.19999073447674798, 0.18192619483207184, 0.17108667552341517, 0.2360989349224576, 0.12078175780325395, 0.12240660220589761, 0.08519056350025367, 0.12960680631057964, 0.07717400166108268, 0.08588917666342222, 0.09107923333444656, 0.07873247154908025, 0.1381781042182494]}, "mutation_prompt": null}
{"id": "01d334ad-28a8-40fe-9246-a2b2fe70835d", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n        self.restart_threshold = 0.1  # Trigger restart if improvement is low\n\n    def __call__(self, func):\n        eval_count = 0\n        last_best_fitness = np.inf\n\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n\n            if np.abs(last_best_fitness - self.fitness[best_idx]) / (np.abs(last_best_fitness) + 1e-10) < self.restart_threshold:\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n                self.fitness.fill(np.inf)\n\n            last_best_fitness = self.fitness[best_idx]\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b) + 0.1 * (c - best_individual), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15\n            \n            if eval_count % (self.population_size * 2) == 0:\n                diversity = np.std(self.population, axis=0).mean()\n                self.scaling_factor = np.clip(0.3 + 0.4 * self.success_rate + 0.1 * diversity, 0.3, 0.9)\n                self.crossover_rate = np.clip(0.8 + 0.1 * self.success_rate + 0.1 * diversity, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0:\n                if eval_count > 0.5 * self.budget:\n                    self.population_size = max(5 * self.dim, self.population_size - int(5 * (1 + 0.1 * np.random.rand())))\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Enhanced exploration and exploitation balance using adaptive mutation and dynamic restart mechanism to escape local minima.", "configspace": "", "generation": 87, "fitness": 0.13587855811996136, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "f8722487-340d-421d-9cae-1b5b7d42d16e", "metadata": {"aucs": [0.18224448441897734, 0.18359256091857246, 0.16461969940728016, 0.21785814148530436, 0.21074750955272326, 0.18942914619290296, 0.19290641827533395, 0.19521190497144025, 0.2085660981160945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06179005686306793, 0.04279698495211415, 0.05242473373726664, 0.04595926914945103, 0.05317967631726439, 0.05075288613322704, 0.044900750701832526, 0.04577064837002365, 0.054341587204304265, 0.04193049891909928, 0.027993529349639168, 0.02301393686505948, 0.03222307715307271, 0.05520454029448285, 0.03581721875373023, 0.03609863162287397, 0.03380743189056534, 0.035228762113553413, 0.9837300473657775, 0.9802360518234813, 0.9800195616194073, 0.9859405779894674, 0.9794452040804766, 0.9830546197623595, 0.9756996737821632, 0.9859807913569392, 0.9752720993990428, 0.0781205918411031, 0.10289928865108244, 0.09571169540723223, 0.10352724133188496, 0.08526894981469979, 0.08418803263218722, 0.11798371505588623, 0.0844076155872171, 0.08666080424734668, 0.13318158272145486, 0.15434154177758197, 0.13741503021496648, 0.15467649250816684, 0.14529931911053207, 0.1630092852629359, 0.1637886954325175, 0.16259350538508188, 0.14242467727449382, 9.999999999998899e-05, 0.0038851966420383466, 0.00029158746291391147, 0.10705592898381289, 0.07276045860455849, 0.03767486448331914, 0.05153815142482909, 0.058486908989843545, 0.02315155831148752, 0.08408234969020156, 0.03762685092727791, 0.04676097272343338, 0.005650535890042385, 0.01109868797998792, 0.03376090801870757, 0.0012407407737020648, 0.010337150805790007, 0.003974207796070495, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03928303067949779, 0.04844377208325745, 0.02744928281403114, 0.0727209746658879, 0.041626786197239585, 0.05743290097319953, 0.05732192905225386, 0.05460828047522337, 0.0446177840588573, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008056144879187599, 9.999999999998899e-05, 0.004966956816894852, 0.053164619462224616, 9.999999999998899e-05, 0.0036667335959129632, 0.01797031141874994, 0.027947040704296655, 0.030632096136061993, 0.19134113382707352, 0.21646332150556225, 0.2107299404320393, 0.1922599862905342, 0.20998049868089064, 0.207175668616144, 0.21852069967789745, 0.22590277684960136, 0.2024776436595902, 0.06292749095668948, 0.05884575006006709, 0.08195781275449754, 0.054452105388138605, 0.05268162161563539, 0.05227624843761236, 0.054319611548170776, 0.09138953742562084, 0.04666183289342263, 0.1434840448909881, 0.15069246633775712, 0.1386960141418967, 0.15216690262271315, 0.13346028711439917, 0.12219617009409123, 0.2185467741785907, 0.13716536069068208, 0.14470420269346052, 0.17188117095436284, 0.17750218144931296, 0.16810235059716228, 0.15970569473179896, 0.16886170505157405, 0.17233097848265821, 0.1703654207628772, 0.18596423979472954, 0.18020131925426974, 0.13302668989216293, 0.14244378631227106, 0.12542588671191446, 0.11677508845368412, 0.13606790558970638, 0.11774853052817813, 0.1239451169527983, 0.13008246908841525, 0.10932246122634082, 0.1860321884065893, 0.14777499386921877, 0.16340702082416247, 0.1591777156167653, 0.15113578248288217, 0.16934744993623263, 0.15718160340761933, 0.15195030678045374, 0.15139224564665765, 0.14941894828122548, 0.13554376539872848, 0.1576875642609662, 0.16837228262390969, 0.16048210186497147, 0.14022822945040803, 0.15915119594052007, 0.1477393384973804, 0.14566422123113498, 0.16720702351084837, 0.18509062109582652, 0.15242909569885688, 0.16771421609159554, 0.2942178373279223, 0.1916607094988685, 0.1887248229220907, 0.18769402734682805, 0.16089061429338036, 0.1540501463547571, 0.16358872864213791, 0.15711150829142118, 0.12988829804112956, 0.15174867973575323, 0.16321699800248313, 0.2019336378112626, 0.19115469139693742, 0.18748367072138594, 0.1891394488400664, 0.17603365372593105, 0.18582773845271394, 0.19456871888994287, 0.2003042908950632, 0.19509410979067665, 0.1853383784284549, 0.17650075890612826, 0.17788185272663082, 0.049470751062652196, 0.052800382397798384, 0.05063373472740418, 0.05325975249565651, 0.05627581538338433, 0.0637555124443856, 0.05496352284284145, 0.052825836624427525, 0.050800536070660374]}, "mutation_prompt": null}
{"id": "90f46ed8-f29a-4062-9286-bd336063853e", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                # This line is modified (1 line changed)\n                mutant = np.clip(best_individual + self.scaling_factor * (a - b + c - self.population[np.random.choice(idxs)]), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n            if eval_count % (self.population_size * 2) == 0:\n                diversity = np.std(self.population, axis=0).mean()\n                self.scaling_factor = np.clip(0.3 + 0.4 * self.success_rate + 0.1 * diversity, 0.3, 0.9)\n                self.crossover_rate = np.clip(0.8 + 0.1 * self.success_rate + 0.1 * diversity, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0:\n                if eval_count > 0.5 * self.budget:  # New condition for adaptive reduction\n                    self.population_size = max(5 * self.dim, self.population_size - int(5 * (1 + 0.1 * np.random.rand())))\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Enhance exploration by modifying the mutation strategy to incorporate an additional difference vector.", "configspace": "", "generation": 88, "fitness": 0.2588645749484371, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.22.", "error": "", "parent_id": "f8722487-340d-421d-9cae-1b5b7d42d16e", "metadata": {"aucs": [0.6261991323417129, 0.5496894521337414, 0.599408321454014, 0.680759839804723, 0.6789446753519646, 0.6476709764497488, 0.6823056239048841, 0.6594245499420639, 0.6412820069139842, 0.4058389207932197, 0.3647652100920703, 0.3692354483503264, 0.38964769064874816, 0.36972712013942766, 0.35105291791977455, 0.3993047733866363, 0.40382116612020735, 0.424697045536915, 0.07684551208574408, 0.07037743835157362, 0.07188016173946798, 0.07895183225149116, 0.07430768287101364, 0.0843892601209143, 0.07765961656170184, 0.08716405093492063, 0.06861867932124188, 0.06271597728885048, 0.06829214019227015, 0.07204192653090469, 0.06261071195236434, 0.05735943540086752, 0.07447256566313976, 0.06159685769338796, 0.074290903969783, 0.05780839237292201, 0.9898909519486842, 0.9840783679071299, 0.9830635759743789, 0.988368795985805, 0.9879967208500686, 0.9856996424353267, 0.9899220087089763, 0.9908024744304778, 0.9849530403757524, 0.22776923140227756, 0.2446146906453427, 0.2687463461440267, 0.1981213389398523, 0.21972228549732908, 0.18085727581877997, 0.08656838787629384, 0.08742832649696897, 0.2556792431305007, 0.5235325150315436, 0.49007282183726875, 0.4801338754119704, 0.4432892693534437, 0.5411186480903984, 0.5516979036529743, 0.45022557896092474, 0.535723629265261, 0.5541765431304477, 0.20029097004008267, 0.2827463406095809, 0.23013275662740007, 0.2421311870701205, 0.20522398204804992, 0.24080054231259296, 0.2902105193103135, 0.2782480065219697, 0.19570582123247815, 0.009489779376210539, 0.35708097642639824, 0.3115387739847686, 0.15829139230767375, 0.11303376259550513, 0.08973166251484, 0.19696049882533084, 0.2097050696496945, 0.21838093169407802, 0.16305726111526797, 0.1929781132235684, 0.22159717318636696, 0.11968239322765517, 0.14558441418522794, 0.1343029097507199, 0.11344234887874449, 0.1812295447815021, 0.05244856580227619, 0.28684230807174305, 0.22834765149808223, 0.24716822178860642, 0.2624177743266436, 0.2298685705076683, 0.26012948668367164, 0.2946619511842933, 0.2981934658265629, 0.2921525142068929, 0.033718495619868394, 0.02705057821251211, 0.019738567306529564, 0.062311606865701696, 0.07162966169189944, 0.052424031546206784, 0.07881162172020117, 0.05968071730810898, 0.04299057796181627, 0.18721585637387883, 0.15837229321970459, 0.1481387560047882, 0.20150137256579237, 0.19622625007193817, 0.18000543568061034, 0.20612400766752503, 0.2017175657914213, 0.19147648911798043, 0.5091614147667275, 0.48876112113640413, 0.45723947218489813, 0.5322936093802575, 0.5266968514646566, 0.4861252457021161, 0.48969590487694215, 0.49640125136796076, 0.5040160207888753, 0.09487225108461339, 0.09362949082665728, 0.08780378278316037, 0.08105423310697346, 0.07967699291006669, 0.0810464357790639, 0.06334493359205995, 0.07545960788471562, 0.07467851160133998, 0.15945141592996626, 0.15044491906193813, 0.1533255371906087, 0.29068113689008857, 0.19954610241504456, 0.1564955615619048, 0.17458606271037136, 0.1683146685119875, 0.1515843448542994, 0.23982371643724443, 0.2180068412885039, 0.2530552213015659, 0.20882076176936226, 0.22972995463048274, 0.21610772163387348, 0.250270735394881, 0.28538651954545613, 0.2932777203435769, 0.18139000829052543, 0.19600016693703237, 0.16112418882515755, 0.18766383812313658, 0.14235804839102295, 0.1491853499899859, 0.1936523603694963, 0.2007930189206325, 0.20831883609713653, 0.17979962382895887, 0.18966130721994034, 0.18016722420581677, 0.15734002433943728, 0.1700533132808728, 0.16338414630955445, 0.16669674511252086, 0.17143629224874624, 0.16573068297577942, 0.17926966819613377, 0.16912336463864708, 0.17150654058830384, 0.17250429215067886, 0.178620571308446, 0.170485060252354, 0.17528667315912605, 0.17436056191947757, 0.16842177552264093, 0.6629420759606277, 0.1708759480283597, 0.6587063626679981, 0.17703882050057307, 0.18464711859831173, 0.1813814188747056, 0.19044779051451655, 0.2249263398561827, 0.18130730454279131, 0.16194436800457002, 0.1896577701673372, 0.12497501055404459, 0.15613385170473415, 0.17411205234250993, 0.29930142435477924, 0.5138580244309658, 0.12585475220885278, 0.20770979475651308, 0.18716047075619813, 0.17685802708779896, 0.1808594971198516, 0.18367668825168615, 0.1797749392573138, 0.1793366601655102, 0.17979355767545002, 0.20079031659712565, 0.19273017874908793, 0.05425117403048774, 0.06832865259729859, 0.051509464032464924, 0.05557019777906058, 0.05290579605221468, 0.05444807510214256, 0.05959282595282367, 0.05174812245502458, 0.05204052921430635]}, "mutation_prompt": null}
{"id": "16d9c05f-3557-483a-a47d-7655dad16a62", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b + c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n            if eval_count % (self.population_size * 2) == 0:\n                diversity = np.std(self.population, axis=0).mean()\n                self.scaling_factor = np.clip(0.3 + 0.4 * self.success_rate + 0.1 * diversity, 0.3, 0.9)\n                self.crossover_rate = np.clip(0.8 + 0.1 * self.success_rate + 0.1 * diversity, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0:\n                if eval_count > 0.5 * self.budget:  # New condition for adaptive reduction\n                    self.population_size = max(5 * self.dim, self.population_size - int(5 * (1 + 0.1 * np.random.rand())))\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Enhanced exploration by slightly increasing mutation diversity with a refined scaling factor adjustment.", "configspace": "", "generation": 89, "fitness": 0.08448379082709041, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.15.", "error": "", "parent_id": "f8722487-340d-421d-9cae-1b5b7d42d16e", "metadata": {"aucs": [0.2101930016128214, 0.12251481937700481, 0.06392113764288843, 0.11902119118854204, 0.09989334086594714, 0.11220132549521677, 0.1327605458450738, 0.12340038401443854, 0.14792535400716933, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019736713221413682, 0.052120363318416296, 9.999999999998899e-05, 0.02174803429957628, 9.999999999998899e-05, 9.999999999998899e-05, 0.03430612931483812, 0.023152975037712853, 0.0014773688136181518, 0.03548179267217677, 0.021202732638008648, 9.999999999998899e-05, 0.0348420724594416, 9.999999999998899e-05, 9.999999999998899e-05, 0.03651979855920762, 0.008991215132736707, 9.999999999998899e-05, 0.9906883226282645, 0.9825170567971548, 0.02194543163996876, 0.07466485402020584, 0.9864419374340584, 0.09688932143751261, 0.0747025425903306, 0.9857504611404366, 0.9065717442871484, 0.029207188136290307, 9.999999999998899e-05, 9.999999999998899e-05, 0.005789586637982236, 0.011959876726246654, 9.999999999998899e-05, 9.999999999998899e-05, 0.05618202837842745, 9.999999999998899e-05, 0.06843287105921769, 0.055669053044037686, 0.031088532289399562, 0.11524647586157266, 0.05773357784301403, 0.009743599505471878, 0.0971821872780001, 0.022847647019711648, 0.08543044149048673, 0.028566071534155135, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03142047028852102, 9.999999999998899e-05, 9.999999999998899e-05, 0.030381812765726823, 9.999999999998899e-05, 0.009962170382250224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017635573090457601, 0.014538242095265774, 9.999999999998899e-05, 0.045012715278214266, 0.00039939036487490753, 0.009439095367381967, 0.01711466599456557, 0.03471689626748942, 0.03577572954130315, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17569924352389532, 0.09998555853955748, 0.15121145142797865, 0.16642098402258565, 0.11267514361415365, 0.032913166155164486, 0.2663102847970201, 0.14260780519634297, 0.17211199621516482, 0.04117960200445503, 0.029866527028554413, 9.999999999998899e-05, 0.024577068170312466, 0.010513570773165726, 0.03794215492464914, 0.047401733435656346, 0.05390183026275697, 0.011089598315624838, 0.12207029289021887, 0.1434079018284785, 0.13766604894876933, 0.11707716524844147, 0.09315613337332729, 0.09402978616313773, 0.1446274159006593, 0.09578775996067945, 0.13508930074960512, 0.16527908911509437, 0.17762056528117576, 0.13346249654965792, 0.16695067004684316, 0.13684318487582514, 0.1179433690566779, 0.13310339862430098, 0.1703801973694008, 0.0914793959570267, 0.1259723295091033, 0.05332897937512937, 0.056024016858545855, 0.13330399459672426, 0.09043798237275769, 0.08190669532623629, 0.11664902402755994, 0.08864781757717866, 0.030212594000683768, 0.19807108488552194, 0.16185993370494312, 0.17456103486322316, 0.17126245171163879, 0.12410953844654105, 0.14654549142231954, 0.14887661611076541, 0.1206617009524742, 0.10450293467396332, 0.14818269662342587, 9.999999999998899e-05, 9.999999999998899e-05, 0.14374197696408342, 0.13336789477361288, 9.999999999998899e-05, 0.15654989121620544, 0.13458985588897776, 9.999999999998899e-05, 0.16935032788911542, 0.12139833269969291, 0.1273678825796669, 0.1183414641284316, 0.11837527925767777, 0.0741031237790547, 0.10479648352498039, 0.21492688916416813, 0.10193163257628002, 0.08760405600563193, 0.09017509632875986, 0.06250220487669067, 0.08558752547540971, 0.06681854694429368, 0.12052665799128603, 0.16513020086159957, 0.08079907420725196, 0.11307362050382197, 0.1872007648626487, 0.17037370388743966, 0.17745535690691328, 0.22662029948919016, 0.179381858304291, 0.20342590346525213, 0.1911064720338338, 0.1640381573279459, 0.15760402937126783, 0.038386802414086874, 0.03363245838069817, 0.017938228269576806, 0.07038619758917597, 0.04055393905308957, 0.013306370568502146, 0.05503882481350919, 0.024531898359022808, 0.02497487858331804]}, "mutation_prompt": null}
{"id": "af80aa5d-1f9f-448f-9ae5-c18f50244105", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_memory = []  # Store past success rates\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n\n                mutant = np.clip(a + self.scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_memory.append(1)\n                else:\n                    self.success_memory.append(0)\n\n            if eval_count % (self.population_size * 2) == 0:\n                diversity = np.std(self.population, axis=0).mean()\n                recent_success_rate = np.mean(self.success_memory[-self.population_size:])\n                self.scaling_factor = np.clip(0.3 + 0.4 * recent_success_rate + 0.1 * diversity, 0.3, 0.9)\n                self.crossover_rate = np.clip(0.8 + 0.1 * recent_success_rate + 0.1 * diversity, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0:\n                if eval_count > 0.5 * self.budget:\n                    self.population_size = max(5 * self.dim, self.population_size - int(5 * (1 + 0.1 * np.random.rand())))\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhanced convergence through adaptive scaling, dynamic mutation, and memory of past successes.", "configspace": "", "generation": 90, "fitness": 0.37438770254493425, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.25.", "error": "", "parent_id": "f8722487-340d-421d-9cae-1b5b7d42d16e", "metadata": {"aucs": [0.8040478158932264, 0.7950301208583561, 0.8104984230231584, 0.7974928387153327, 0.8081595339342533, 0.8023486122521221, 0.8099689988251998, 0.8133307322560341, 0.8110845500258423, 0.6605197362522659, 0.6757680034818778, 0.6587347396411993, 0.6698508427198893, 0.6320064310875042, 0.6577631378887872, 0.6464429560446284, 0.6721941898782082, 0.6662607237774364, 0.11488175514370125, 0.18660397498859904, 0.2571517257589062, 0.12161499476041515, 0.12186907428969429, 0.1118451800019511, 0.1477359565292159, 0.136511935000021, 0.11924457604170025, 0.15152228900761333, 0.16462103857763688, 0.13435883905493173, 0.1484079337337766, 0.11374141416450634, 0.11938050508760367, 0.12459974092090031, 0.16362150931548514, 0.1079348256557201, 0.8491504533141074, 0.986554139613782, 0.8870610530331431, 0.8796242871156494, 0.8089956412462014, 0.927888648227538, 0.8884160928760222, 0.9095211760917616, 0.83790463040101, 0.43276190635837, 0.47723607761715114, 0.38057536626198896, 0.5032682118935092, 0.5137209422918259, 0.5660112776780335, 0.4966911379649598, 0.50890249657586, 0.4905552782803031, 0.791292570232207, 0.7541327719429217, 0.7927268730278124, 0.7851788722452561, 0.7996113150566797, 0.7698719274379656, 0.8096402037914149, 0.7932364415445932, 0.7754463224515432, 0.16057732339511255, 0.17131954143958883, 0.1555859837711825, 0.19494515247837485, 0.1555270930603334, 0.17521739766310818, 0.16945163035927147, 0.23244553299286508, 0.175246481480683, 0.03283912436378722, 0.12742729252245721, 0.11807548995393424, 0.15470503419014914, 0.1737363684181873, 0.27590106988175034, 0.19348775222856052, 0.2273981914765707, 0.33975776033270644, 0.30859303697781515, 0.42000978663644495, 0.46229329084857496, 0.460789254605775, 0.45783802341506985, 0.4355632307757996, 0.33292370257663506, 0.404071482112649, 0.46242371661040194, 0.46945285869270725, 0.5437026495889393, 0.5231704307990002, 0.456559832675819, 0.5139109370204855, 0.49620676110556416, 0.6014679553981644, 0.5267216889471448, 0.4681315919576776, 0.1354228060033853, 0.12736376769621072, 0.05952019565296629, 0.19074655057306644, 0.24929760477526652, 0.17033077553829812, 0.15633550894406567, 0.24266511226313126, 0.13795349100769394, 0.3465037584057086, 0.2942526284396454, 0.3305806953661664, 0.28684521827551257, 0.34246869356941234, 0.32807028326451004, 0.3002554072077285, 0.2938558151776133, 0.2987955217042585, 0.6267531430867244, 0.709231168416895, 0.6697611233787852, 0.7069191656024136, 0.6552041810111819, 0.7087878842438837, 0.7023165354517097, 0.6753191644314314, 0.6227764829743501, 0.0961587496938513, 0.10192556867145086, 0.11170614105551269, 0.12026243822011018, 0.10166044052876755, 0.10454948425865296, 0.09267056127494411, 0.10840934660145596, 0.11390140553777806, 0.14401224471054552, 0.13422063051234856, 0.1515386565015635, 0.13244498217691836, 0.18696208910239565, 0.20031754137497648, 0.25698475779795094, 0.15867304463927845, 0.1401349849902166, 0.4775428201236487, 0.447861059715183, 0.4542570379553005, 0.43256687965438045, 0.5004337502338461, 0.4540080579981556, 0.505162428734154, 0.48163998536504593, 0.515346061061362, 0.3391583362344346, 0.34487383611560685, 0.3178153360170106, 0.33773592230933447, 0.35354091338977855, 0.3326659695526316, 0.3991669226313972, 0.38130521948311047, 0.3842073305000182, 0.2372208830463246, 0.20905273282744152, 0.19314469564261882, 0.21320878626127182, 0.1755752571782616, 0.186502923780416, 0.19263315150523264, 0.2110995223102976, 0.18975189583604246, 0.2883330323724492, 0.25252812048504714, 0.25885998784330344, 0.3791092317480472, 0.2036430741171481, 0.20812643316481294, 0.20064796692747755, 0.49124902193640807, 0.36166210145150746, 0.7997686372945627, 0.16253657098400331, 0.7428893499969264, 0.1588712050897002, 0.7546686160627738, 0.17576559930850977, 0.16242490564393153, 0.6753116795414316, 0.20091825439612698, 0.6092829574333305, 0.5938951807518215, 0.7269856727579644, 0.20239212147537633, 0.1921804868167103, 0.2279697425838062, 0.20606459147939338, 0.2029494395362198, 0.2059985900398047, 0.18519260601720577, 0.18746873535392872, 0.18673505456032746, 0.18256104694077824, 0.18582644557330064, 0.21611928450332618, 0.17575803289809833, 0.1874628366471628, 0.17557970778187104, 0.08536487001748283, 0.06972293140301244, 0.07908541418885418, 0.0876473480597677, 0.07921031254124755, 0.08279035250595956, 0.08056172485057855, 0.07550798294174732, 0.07717280619691336]}, "mutation_prompt": null}
{"id": "4642b14d-36ea-4c0a-bd06-a674f99541f2", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n\n                perturbation = np.random.normal(0, 0.1, self.dim)  # Added perturbation\n                mutant = np.clip(best_individual + self.scaling_factor * (a - b) + perturbation, self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15\n\n            if eval_count % (self.population_size * 2) == 0:\n                diversity = np.std(self.population, axis=0).mean()\n                self.scaling_factor = np.clip(0.4 + 0.3 * self.success_rate + 0.1 * diversity, 0.3, 0.9)  # Adjusted formula\n                self.crossover_rate = np.clip(0.85 + 0.05 * self.success_rate + 0.1 * diversity, 0.8, 1.0)  # Adjusted formula\n            \n            if eval_count % (self.population_size * 5) == 0:\n                if eval_count > 0.5 * self.budget:\n                    self.population_size = max(5 * self.dim, self.population_size - int(5 * (1 + 0.1 * np.random.rand())))\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Integrate adaptive perturbation strategies to enhance diversity and convergence.", "configspace": "", "generation": 91, "fitness": 0.23761712337598365, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "f8722487-340d-421d-9cae-1b5b7d42d16e", "metadata": {"aucs": [0.4672759382971673, 0.46290032821274973, 0.4719154499364068, 0.46258943603721425, 0.4826027513557165, 0.46472241323101826, 0.4776059736893632, 0.46336673428624986, 0.4782940085355587, 0.0884117059861772, 0.09015070835706152, 0.05176659815958351, 0.07598959002520422, 0.05576541070237695, 0.0458039054957895, 0.07747976750965313, 0.08291930604586129, 0.07905063661488454, 0.10031948197413099, 0.12215165300697395, 0.11140733134941361, 0.10071581723146372, 0.09929923369089788, 0.13836862589887589, 0.09937677526394184, 0.09759090941222948, 0.10012287942973619, 0.10008473179468003, 0.1195610331126622, 0.09522205396352368, 0.09856751808795394, 0.11779597402484521, 0.1007002779022147, 0.09618975235294691, 0.09262896844544755, 0.09209376883131704, 0.9809976210144722, 0.9866739828850737, 0.9715830989617951, 0.9665800053211405, 0.9852492824946393, 0.9763792973309688, 0.9740223310253671, 0.9863586640548127, 0.9674237601436986, 0.3025737615798261, 0.310923817940328, 0.2969428621711764, 0.34626591093823633, 0.31035026158559287, 0.2976942095262243, 0.29561126207466226, 0.3242499633654158, 0.31612838250063424, 0.5656008661195816, 0.45087669140891695, 0.5647622986509304, 0.7452400733082029, 0.21295370288699467, 0.757809342481188, 0.6019237957874382, 0.5790475510034363, 0.7068826665124224, 0.21036766803630347, 0.20905820599472635, 0.20600347850931033, 0.25430590884894533, 0.19517453682219044, 0.19192328537215153, 0.20040048127564847, 0.18450036225193267, 0.19203831312186503, 0.205894501197747, 0.1924351993557698, 0.12086432955903581, 0.225367639231972, 0.200550247597984, 0.2079871685435577, 0.18603085317889456, 0.23538046235839116, 0.2087220569193139, 0.061628341259854835, 0.07349083271067647, 0.04312675545394473, 0.036904679719729216, 0.0235831745960442, 0.056565815445320355, 0.04929745991620971, 0.029388984675012608, 0.05776485174473944, 0.14695532422171942, 0.12074360522916594, 0.12231175015689455, 0.12206338227633606, 0.1494890604381901, 0.13082057268079028, 0.15034739166910605, 0.11740739754373442, 0.1570374808201559, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025572739740969963, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11264141076579925, 0.11556575717358919, 0.1071672717547022, 0.10181250714408874, 0.10580481089803073, 0.12315254829053268, 0.12633520181948155, 0.08896270775454973, 0.12575931347593983, 0.44542776795606465, 0.4305841785858123, 0.4408768431363792, 0.40663175690901365, 0.4608365158505847, 0.4257044486900713, 0.4529911197148577, 0.46313006463758755, 0.4156798006985908, 0.11128816295285815, 0.10089769751245292, 0.09995952875330782, 0.08947116627675755, 0.09070678618378114, 0.077119466787684, 0.10048175474778231, 0.09717372170137095, 0.0928527854324036, 0.19070545647355774, 0.22234442948880728, 0.29833172707859845, 0.1991480378496553, 0.2974514071090324, 0.1847950978058992, 0.23394347693985973, 0.20739637982075632, 0.2563473298602519, 0.2832957455199485, 0.3007847312595858, 0.2948102142004154, 0.3219747616273848, 0.29382500864830685, 0.2908796948825153, 0.3051860051861518, 0.3052753854618462, 0.29848604314670224, 0.2598581655835174, 0.23041146465122642, 0.2024020492481523, 0.2333351185366882, 0.22962161110439094, 0.17286778518728263, 0.24429285638772646, 0.21955931529220718, 0.23564739028532944, 0.19995876216874287, 0.19275033551899035, 0.18907812110359634, 0.1723896242503572, 0.1731258852380948, 0.19439253446902183, 0.19720754256402684, 0.19479858299393438, 0.1736994415884956, 0.23910773856723733, 0.20636007987409288, 0.1946184819622, 0.22500847980295624, 0.20516919456105986, 0.21420681264686658, 0.24256612581175874, 0.20735542757088543, 0.18856930588824572, 0.18783635906206142, 0.13621671758227927, 0.16659672908537704, 0.17702062501663918, 0.16919019211784858, 0.16737451783696522, 0.17722219540304773, 0.12613759878111686, 0.16263228486193582, 0.595643686436025, 0.6231707158665909, 0.12791995250101995, 0.15545204106916444, 0.20985401490018107, 0.15492821751036867, 0.15595048236608078, 0.1129636328215674, 0.21365961042202675, 0.17467457196570924, 0.1826698050691994, 0.1851453398628713, 0.19122281379677886, 0.19459531185201817, 0.18414689426337583, 0.1934845906728917, 0.17978418451208655, 0.18389196449714407, 0.10935232958472862, 0.06874576559019929, 0.09060779409512976, 0.07412528253209894, 0.07014022494878813, 0.09172622309784839, 0.09662463393937637, 0.07913737629804873, 0.10189796414151875]}, "mutation_prompt": null}
{"id": "3d828805-8953-44d4-97f8-733e4b8c57f5", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + self.scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < self.crossover_rate\n                trial[crossover_points] = mutant[crossover_points]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15\n\n            if eval_count % (self.population_size * 2) == 0:\n                diversity = np.std(self.population, axis=0).mean()\n                self.scaling_factor = np.clip(0.3 + 0.5 * self.success_rate + 0.2 * diversity, 0.3, 0.9)\n                self.crossover_rate = np.clip(0.8 + 0.1 * self.success_rate + 0.1 * diversity, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0:\n                if eval_count > 0.5 * self.budget:\n                    self.population_size = max(5 * self.dim, self.population_size - int(5 * (1 + 0.1 * np.random.rand())))\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Refined exploration and adaptive mechanisms by introducing a dynamic scaling factor and enhanced crossover mechanism.", "configspace": "", "generation": 92, "fitness": 0.2565539720077879, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.20.", "error": "", "parent_id": "f8722487-340d-421d-9cae-1b5b7d42d16e", "metadata": {"aucs": [0.5652453904126378, 0.5594786135735642, 0.5999580715013006, 0.6241500906411755, 0.635571401426192, 0.6139860024124473, 0.6182338977736332, 0.5936494036355489, 0.616734977905884, 0.3062653869210803, 0.3350629508362257, 0.28221265868161194, 0.35560075503801447, 0.33475625821673904, 0.31102611470171815, 0.34739553375457066, 0.3179123973504625, 0.360167469189152, 0.0842351144993565, 0.0773364795370306, 0.0869849732789919, 0.0832013229155939, 0.09185739239413182, 0.09687671890668847, 0.09827030683064697, 0.0883534031210087, 0.09409806140479882, 0.0766618222161154, 0.06976914863049966, 0.07827267484666556, 0.07005066167398089, 0.08912078754649244, 0.08016230894834775, 0.08266772084219631, 0.08648515832808101, 0.08593439706787553, 0.8636484227079118, 0.9865579097322812, 0.775840810497074, 0.9186597021063998, 0.8312103625155496, 0.9455717852443721, 0.8926442083825737, 0.9329388834420906, 0.9353820104886233, 0.25989526570833243, 0.26608997145389435, 0.2502174998216957, 0.28132470608811366, 0.3000004314780583, 0.24770197191464016, 0.2693283965042962, 0.2705707716104224, 0.2509011022814871, 0.39105247144299426, 0.5423597254304998, 0.4873813622416988, 0.48476445736459284, 0.5828855725982677, 0.5803735323150621, 0.4517416612408526, 0.46481920563746826, 0.45318930530431156, 0.15660760444916666, 0.16977865034399042, 0.17028706403563743, 0.18759094440885182, 0.14012034498431492, 0.17362260929114326, 0.158379597508577, 0.18668069102887552, 0.18656434901198304, 0.24499681686238906, 0.11939148558374069, 0.1136470187872417, 0.17260434826657478, 0.15331454932832078, 0.20612160745330843, 0.18592135592861214, 0.15922835324045792, 0.17839179948246053, 0.17252629523881824, 0.15589304591740272, 0.17182884962217015, 0.18619978168983053, 0.19683800466238632, 0.2057527652171507, 0.1808993913289546, 0.18948403476315978, 0.18480802120119544, 0.2940998560415936, 0.30336779323583296, 0.27501769151753674, 0.3207078988270927, 0.3243490285539554, 0.2820527071444755, 0.31489999162053994, 0.31381845116094687, 0.29572201015740496, 0.02625594641492046, 0.031596391410463553, 0.011462287164764717, 0.0346393176382338, 0.05109201549773057, 0.03760332256397181, 0.0022768120574617745, 0.024302118767516756, 0.04886939792775813, 0.13575518654554142, 0.13676841846669918, 0.14929890518772004, 0.15022176429065548, 0.1612061118535748, 0.16761330659753315, 0.16657760113198272, 0.1577965752912871, 0.14504648402383225, 0.4733552342423011, 0.4598276565305097, 0.46737984085468054, 0.49504454943249054, 0.47103158701203907, 0.4886052542640439, 0.47332829648145847, 0.4700567631900818, 0.4602235593574512, 0.09049807179283054, 0.0970772067755743, 0.08903854901371511, 0.07849807531934949, 0.07526969567304698, 0.086080867530973, 0.07942331351900811, 0.08663258341066193, 0.08155217431601758, 0.1490324035325915, 0.1181919951892565, 0.15719153156193444, 0.18362164800455916, 0.12835590621417925, 0.20387251601830159, 0.2029271849167369, 0.1699533317999723, 0.19589993219841595, 0.2514403793209474, 0.25003397363739355, 0.26137136295067787, 0.25001568919049477, 0.23535436987380542, 0.24327292406328438, 0.25843015667771385, 0.2557168693713361, 0.2583427214655928, 0.19059125426715795, 0.19264465795845276, 0.20066908387479765, 0.1759759725922222, 0.20636428046959876, 0.19939610126434315, 0.20006735645461793, 0.21448328980191955, 0.19055746854452593, 0.17997484063502378, 0.1885539473385366, 0.1819779381836346, 0.17749732034359, 0.1849503076211455, 0.1782419803011589, 0.18445636865521786, 0.16127844945926828, 0.16228064696701805, 0.18150082507318388, 0.16552957567157867, 0.1759118243783323, 0.1614282197839244, 0.17470100741920547, 0.17506190657851672, 0.16384851794012378, 0.16791630521796175, 0.1805652594987237, 0.6437841528866435, 0.1694475956020033, 0.6078390216488578, 0.18037939902798006, 0.5995653181442168, 0.1853516029239246, 0.2548936449870881, 0.2549464359864634, 0.16571254378309697, 0.189135911427195, 0.5516208339076658, 0.39351028321835346, 0.18604933480715713, 0.18650140152154626, 0.4021537064807543, 0.20959713037215122, 0.20333974155043089, 0.20129383860622507, 0.18197601689638976, 0.188173683166026, 0.18510100904281257, 0.1826601917669025, 0.19087820316682635, 0.20979158373827123, 0.1693404772274575, 0.15194031607647762, 0.15920695960840525, 0.08306855094866572, 0.07002671383043213, 0.05857724949095733, 0.06645633620713465, 0.07201924545209204, 0.0698078436998214, 0.06380107033911953, 0.06285222833392667, 0.06779139356974462]}, "mutation_prompt": null}
{"id": "6cb05a50-ba69-4072-83f8-737c1a8b1cc8", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n        self.adaptation_rate = 0.05  # Added adaptation rate for dynamic adjustments\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                diversity = np.std(self.population, axis=0).mean()  # Calculating diversity here for adaptive mutation\n                mutant = np.clip(a + self.scaling_factor * (b - c) + self.adaptation_rate * diversity * (best_individual - a), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n            if eval_count % (self.population_size * 2) == 0:\n                self.scaling_factor = np.clip(0.4 + 0.3 * self.success_rate, 0.3, 0.9)  # Adjust scaling factor more dynamically\n                self.crossover_rate = np.clip(0.85 + 0.05 * self.success_rate, 0.8, 1.0)  # Adjust crossover rate\n\n            if eval_count % (self.population_size * 5) == 0:\n                if eval_count > 0.5 * self.budget:\n                    self.population_size = max(5 * self.dim, self.population_size - int(5 * (1 + 0.1 * np.random.rand())))\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Enhanced adaptive mechanisms and introduced a dynamic mutation strategy to improve robustness and convergence efficiency.", "configspace": "", "generation": 93, "fitness": 0.3318790095992679, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.23.", "error": "", "parent_id": "f8722487-340d-421d-9cae-1b5b7d42d16e", "metadata": {"aucs": [0.7220555376259139, 0.7035160544272784, 0.7377957377975732, 0.734564333165826, 0.7360036826452562, 0.7252650755760157, 0.7165885140488842, 0.7575583471854342, 0.7390989392842449, 0.5185774665275515, 0.5548851764534173, 0.5457433441000518, 0.5220221456839742, 0.5421091454791174, 0.5279343597383599, 0.5491667130624237, 0.5422517468038899, 0.5349740400250745, 0.10213684595806449, 0.11718290729122782, 0.10406913638787796, 0.10306775905361576, 0.10216237081037816, 0.12443049219728053, 0.09968172401276532, 0.10262748342896644, 0.11337983426806297, 0.0898337323671149, 0.10656908949655064, 0.09530038960637233, 0.09575675021929564, 0.10864721087560392, 0.1038055910893898, 0.09385877845499291, 0.09580978711648436, 0.08572075270226664, 0.9189120055994872, 0.884449422536088, 0.9138947108085994, 0.9293160666307793, 0.9409495317148664, 0.9013770595791494, 0.9410666270928696, 0.8773953998820148, 0.8983345812459578, 0.3373287534532786, 0.38879756643315133, 0.3937503282555074, 0.3351090736359149, 0.3483450723613105, 0.3789339926850974, 0.40510547821298537, 0.38390978627075123, 0.39477471340021497, 0.6413839121726912, 0.64661703919386, 0.6362375397837127, 0.7284728749283815, 0.6930072205817751, 0.7238562049301367, 0.704735734902306, 0.7310360229934721, 0.682232648538492, 0.36111642794276044, 0.30326681315935333, 0.3532010584377868, 0.22840558818914136, 0.3088587699282528, 0.2977983831953507, 0.29836842603075253, 0.24267650275837072, 0.29042318302423475, 0.3110932441438108, 0.3265287842187803, 0.30481336396422365, 0.345303279571745, 0.3531499383477327, 0.2932157721039974, 0.28104062348308967, 0.26923636019589736, 0.2947353148997227, 0.25810519630924633, 0.26107630973747586, 0.22448093493332777, 0.2951438350011715, 0.2856526415739602, 0.25108797706868413, 0.23230954404118065, 0.3057539888468107, 0.2386234011831294, 0.4068899804053777, 0.4261275490542845, 0.3984696904749091, 0.4116556230975076, 0.3557372243721242, 0.36038991657444197, 0.4294258311984589, 0.39916555481361327, 0.4473474115851328, 0.07537521597198915, 0.05712762511241143, 0.10710812386148283, 0.12173213207530975, 0.06518345632086364, 0.10872678211670517, 0.1139822427616416, 0.11164529536457812, 0.1174515650273823, 0.22139768367231316, 0.20620238163715654, 0.23607601663970912, 0.23106197417564822, 0.22989074233458484, 0.2412116149248119, 0.2199964396074955, 0.23652254552500707, 0.23059176587014119, 0.5748071023975652, 0.5905619894086007, 0.5792735194268033, 0.5877829440861067, 0.586733095955067, 0.5869294834587724, 0.5836407757333133, 0.5886792800484475, 0.5928611258757188, 0.09399019404201514, 0.07949376620648041, 0.10067801821095512, 0.08202599729503124, 0.09052720571835948, 0.0854965081413146, 0.12024075295960412, 0.09869838498398709, 0.08422846515083127, 0.15730490734445834, 0.11862309719573627, 0.10709718956952585, 0.1521450264292905, 0.16820379439505218, 0.17192053771150273, 0.14872257504320785, 0.1579024989472242, 0.16191891597527697, 0.31159784238857113, 0.32815372476828, 0.312211420030021, 0.33371730811368705, 0.3231915029836807, 0.32331818624847297, 0.3533535053575674, 0.3571763661526919, 0.340532514626926, 0.2487690960510558, 0.25997485260235775, 0.25822102401693825, 0.2584653020722222, 0.2629193098068717, 0.24093894258020876, 0.25380528057546303, 0.24943533165195053, 0.27126568790807826, 0.194269477092062, 0.1973102500532764, 0.2274085561839846, 0.19674613345443104, 0.20031322302922294, 0.1987252223480156, 0.21291125508177622, 0.18881616249894073, 0.20747458312458777, 0.18029291507947587, 0.17673512737468988, 0.18180946494488603, 0.17791808328966507, 0.18387315022811823, 0.1749430694773937, 0.1813698314562071, 0.19708373177933414, 0.18356378755093206, 0.5269330735081388, 0.17842581179950978, 0.6331534120249989, 0.5739879447577914, 0.18789861308190647, 0.18965594514008588, 0.6280813142657704, 0.6052762044034744, 0.6649235585784146, 0.657753017378929, 0.6029048492193708, 0.5929696467773706, 0.4161016939987069, 0.4408759218527887, 0.19722001391924937, 0.21010452561732884, 0.20061349915914428, 0.20702593882930065, 0.18229408438612527, 0.19950950553734736, 0.18551327464026968, 0.17188428510091602, 0.18091457937560673, 0.18903245570566518, 0.2003759135575791, 0.18716213252978864, 0.1976229612262228, 0.07914614492025451, 0.07125831585166775, 0.0680307982703755, 0.08648416526056568, 0.07254209064048645, 0.08211807577589081, 0.07216510974293489, 0.07419888158340049, 0.07717153167768487]}, "mutation_prompt": null}
{"id": "f767597e-92ff-42e5-a90b-b350adfa6ac3", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant_1 = np.clip(a + self.scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                mutant_2 = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                if np.random.rand() < 0.5:\n                    for j in range(self.dim):\n                        if np.random.rand() < self.crossover_rate:\n                            trial[j] = mutant_1[j]\n                else:\n                    for j in range(self.dim):\n                        if np.random.rand() < self.crossover_rate:\n                            trial[j] = mutant_2[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15\n\n            if eval_count % (self.population_size * 2) == 0:\n                diversity = np.std(self.population, axis=0).mean()\n                self.scaling_factor = np.clip(0.4 + 0.3 * self.success_rate + 0.1 * diversity, 0.3, 0.9)\n                self.crossover_rate = np.clip(0.8 + 0.1 * self.success_rate + 0.1 * diversity, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0:\n                if eval_count > 0.5 * self.budget:\n                    self.population_size = max(5 * self.dim, self.population_size - int(5 * (1 + 0.1 * np.random.rand())))\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Enhanced exploration and exploitation balance using adaptive scaling and dual mutation strategy.", "configspace": "", "generation": 94, "fitness": 0.4297745685284966, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.27.", "error": "", "parent_id": "f8722487-340d-421d-9cae-1b5b7d42d16e", "metadata": {"aucs": [0.8002292577862501, 0.8126301300761796, 0.792598704688187, 0.8246592228147477, 0.8225365241879694, 0.853527678101942, 0.8171597333955962, 0.823910452834299, 0.8070206668266993, 0.6573679948801461, 0.6543754692582462, 0.688356145043904, 0.6710991587246772, 0.6391596867700411, 0.6753098364269218, 0.6730233502424232, 0.6527762026810091, 0.659244825596123, 0.42894164772997667, 0.12569936644772228, 0.10227367712416957, 0.32266928619801727, 0.1336650027450227, 0.1245398060542744, 0.09469534781986932, 0.12049671091848524, 0.13640411594255797, 0.1523937183799513, 0.11418751901959057, 0.10051081139481344, 0.11022252706336588, 0.09013083189496285, 0.09968931886072896, 0.106206346644517, 0.0926741264415708, 0.11309443278340181, 0.9885997535372623, 0.970084457204802, 0.9651758409797109, 0.9624917348550789, 0.9735865214654106, 0.9841522502118915, 0.9907189497102982, 0.9822368991646765, 0.9732422922337889, 0.5814074873233684, 0.5440699331037431, 0.5222114250287291, 0.48652294690117304, 0.5337708496172354, 0.5413605178200889, 0.5147110022042203, 0.5560848134506311, 0.5583793337810816, 0.7648842093168059, 0.7676306302365595, 0.8057309607164109, 0.8120613942494739, 0.8438801617934596, 0.32655146845905814, 0.7991597457537514, 0.8075546894722002, 0.7727792283005017, 0.5916743117614381, 0.6076635688511384, 0.46582702483431127, 0.5525610284847957, 0.12431714206058808, 0.5742531576944687, 0.5091720184526753, 0.5736825509220329, 0.5600000357494836, 0.05206098226732847, 0.6081605944953221, 0.05380902188005143, 0.5653925016041416, 0.5517601901331854, 0.5578238368529882, 0.5514393238074079, 0.5021914436228754, 0.561677907682061, 0.5325584900806903, 0.5752169029485281, 0.5226898129242991, 0.5119989049927237, 0.5861552069879643, 0.4499267943842057, 0.49790782855841276, 0.558219559424774, 0.47718783973051404, 0.606787306161251, 0.6705611702571019, 0.6185246265037639, 0.6134654326647457, 0.6674522235188711, 0.6009394963647237, 0.6068354371685585, 0.6497853609988395, 0.6613253245237303, 0.3206747269458582, 0.11772683865523381, 0.20799706790693695, 0.28790562458663893, 0.22346116779522196, 0.24427235052564533, 0.322992353341636, 0.16615747899922695, 0.1339396046168928, 0.35993234069715563, 0.415131951405724, 0.398882041910823, 0.44820400685764294, 0.39014952162891836, 0.3819949376702134, 0.39547826180295764, 0.4041083027754456, 0.39559521293277755, 0.7327123012004266, 0.7522750175125807, 0.7357934118317384, 0.7438976641004637, 0.7282471640772309, 0.7242077653131191, 0.7275764430568757, 0.7448577956348088, 0.7129107193134092, 0.13102352090386338, 0.099092018076963, 0.11700603977296253, 0.09979631387806509, 0.1140736594016808, 0.10625739053416872, 0.10420857025195451, 0.16149896806292907, 0.09431447790808978, 0.17587859293486585, 0.12450506619992507, 0.19798547247747, 0.3242949439448046, 0.24395169123746063, 0.17568365559168664, 0.18786482480510636, 0.5618640446568455, 0.2198815705166639, 0.4536240583132892, 0.4078510765025659, 0.39592393500688716, 0.4068798041048506, 0.45125274741552013, 0.37673180628320535, 0.5402488091585069, 0.48730244186297045, 0.4626912555834075, 0.3441930772657672, 0.34344428719081144, 0.3484428275845416, 0.32988528989502375, 0.34710552272040107, 0.34569674392337746, 0.3794185114919897, 0.3593299381463815, 0.39126548728403066, 0.23636640468353198, 0.17478804791770342, 0.18409350668165259, 0.17998370910912365, 0.17355257877426755, 0.19536946769602137, 0.18022170374219837, 0.179549061076683, 0.18488646686106458, 0.5953204334555217, 0.22041637654313007, 0.2104288479694344, 0.5757311720651815, 0.22978266418480042, 0.2255013004043882, 0.5944358660881357, 0.20401869338737733, 0.4449961166839662, 0.20901144289344364, 0.16424252407587414, 0.20585798554073365, 0.1651852219285842, 0.7858362132986719, 0.15570647081876599, 0.1617731902994145, 0.8227866772179696, 0.19507447813150625, 0.7892468564264498, 0.8399527011986803, 0.12690904525167424, 0.8296815581090202, 0.8300516235735261, 0.8047230292447494, 0.2023342266355035, 0.15467438763781993, 0.2135093193628389, 0.16563476979639613, 0.17982964518625721, 0.17128093268309463, 0.18807104606773872, 0.19440557367442557, 0.18110791915587032, 0.18683423888376893, 0.1863957089464493, 0.1972778342163548, 0.08668962019307913, 0.0723213873663795, 0.08557430089898044, 0.08365660523609164, 0.07719722463544099, 0.07193751977202101, 0.08401931864358925, 0.07924221650891372, 0.07275756729659366]}, "mutation_prompt": null}
{"id": "20d21ab6-68ca-4686-982a-9b5ed4f0e1c9", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n            if eval_count % (self.population_size * 2) == 0:\n                diversity = np.std(self.population, axis=0).mean()\n                self.scaling_factor = np.clip(0.3 + 0.4 * self.success_rate + 0.1 * diversity, 0.3, 0.9)\n                self.crossover_rate = np.clip(0.8 + 0.1 * self.success_rate + 0.1 * diversity, 0.8, 1.0)\n                self.scaling_factor *= 1.1 if np.random.rand() < 0.05 else 1  # New dynamic adjustment\n\n            if eval_count % (self.population_size * 5) == 0:\n                if eval_count > 0.5 * self.budget:  # New condition for adaptive reduction\n                    self.population_size = max(5 * self.dim, self.population_size - int(5 * (1 + 0.1 * np.random.rand())))\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Improved convergence by adjusting scaling factor dynamically based on fitness improvement.", "configspace": "", "generation": 95, "fitness": 0.4671214999388518, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.31.", "error": "", "parent_id": "f8722487-340d-421d-9cae-1b5b7d42d16e", "metadata": {"aucs": [0.8830367024422197, 0.8825851618428955, 0.8622640857217302, 0.8545703757415154, 0.886536442459948, 0.8630080839107175, 0.8799156062473983, 0.8722891629057927, 0.8789772069677338, 0.07345805983564946, 0.07209053428640577, 0.7810582442602713, 0.7644210618994324, 0.7751748993458983, 0.7805771226469492, 0.8060140078335609, 0.018671540198582415, 0.05352727214862685, 0.08713324638013165, 0.14963102696635233, 0.6631146717541747, 0.06888386066362873, 0.14866655026458198, 0.01797471895927716, 0.15233459279523653, 0.119837306117761, 0.13458183577233118, 0.0967722275722055, 0.12489640625774812, 0.11703569837097927, 0.10202290188838947, 0.1583478733213144, 0.15227366291156663, 0.1451291084117069, 0.12558226702314246, 0.10141890237355167, 0.9846067644423305, 0.9811383220059685, 0.09854100738915073, 0.9638809517293018, 0.9827988931308449, 0.9708065601592227, 0.9771204444506167, 0.9847045441473286, 0.9749861148779919, 0.670713594872369, 0.6693019671815126, 0.6347268401532307, 0.6358983302096928, 0.04521245153637332, 0.6471160463547083, 0.6955730227466849, 0.08699056218161094, 0.6646316622853443, 0.22453847830470708, 0.8808113264858308, 0.8636517466019182, 0.8729876320144054, 0.89481152722744, 0.893361805329354, 0.8738298386701018, 0.8441215835010442, 0.8188658583426532, 0.7164934312490479, 0.7383413794733681, 0.6827047956507226, 0.7439565428395791, 0.7079306919081072, 0.6437435382103992, 0.7367718769248014, 0.7071863213972611, 0.6909731067451428, 0.6997149205721829, 0.7330499295830989, 0.12909853985348396, 0.6799206990711248, 0.64493160993865, 0.695571864530601, 0.7844162847140188, 0.6819713009100923, 0.6991675389279504, 0.6832489376018714, 0.6316738623148636, 0.6774444737913127, 0.057234499576809705, 0.6440322546797514, 0.6126119948859289, 0.7191484682432678, 0.6896418069979096, 0.6567181810235652, 0.7858984421919599, 0.7448874251961914, 0.6505287977103866, 0.7455050993178072, 0.7456322126504856, 0.7666450650210543, 0.7855726185677442, 0.7556952810107487, 0.7715537170027419, 0.44022278273229876, 0.17422123274337287, 0.18121765047423, 0.5918198720265675, 0.18494866436044266, 0.6174100777706638, 0.2769120415261801, 0.4882596332250939, 0.22684069788421635, 0.5577503125181594, 0.011786390300231875, 0.595922720283295, 0.5879148245060037, 0.6058673414664622, 0.5942531045986623, 0.5697815804211968, 0.048934990087775465, 0.08333432203814206, 0.8341319882750075, 0.8252690848715656, 0.8369777520028179, 0.8171253431712459, 0.8130526147022787, 0.8205134885236821, 0.8254005783012808, 0.8333443715630369, 0.8252575211484914, 0.1078333211991761, 0.10636685451914785, 0.10772996265899204, 0.15001373561391573, 0.15345656390238727, 0.41204252882205905, 0.10361572603996594, 0.10475165507077855, 0.06816669083850613, 0.15763399170056802, 0.7572939189988518, 0.33407505056412246, 0.2858700861973289, 0.23218147627543873, 0.750126253388313, 0.28912271084273433, 0.17589957407190682, 0.2022718442395428, 0.6318851326676083, 0.5778314155915228, 0.5489299673628307, 0.7008556000527923, 0.49874542039221637, 0.5618887750944734, 0.5340988038195449, 0.5877919207773151, 0.6154434110184481, 0.5001296167378467, 0.3303923435427025, 0.25775382250207546, 0.511070660118454, 0.4509452282723392, 0.4926222411409742, 0.46160199320898254, 0.16362746937068517, 0.3911996125882191, 0.2015224561052883, 0.2005266208241372, 0.1825862241207864, 0.25437767525726374, 0.17096804665614473, 0.19615863464194028, 0.1926853647743738, 0.22572978220337558, 0.2545195845524487, 0.2233447442924773, 0.24732402547541799, 0.24716495183739529, 0.20735615648255112, 0.22301584425981025, 0.2441895396814604, 0.7941372709608491, 0.22362110172451743, 0.20172241963447568, 0.1880676556126326, 0.1644579950297963, 0.16297057015900696, 0.8784960599339666, 0.1776278835864692, 0.1659250552673206, 0.8974437027470967, 0.14773207714200876, 0.16389737583342745, 0.9065822002094495, 0.2123457930254251, 0.8677185386932706, 0.1552685666468585, 0.90928101021003, 0.2087955383790192, 0.8886549039265232, 0.16763787254359575, 0.19939042903649906, 0.17371421971373602, 0.19079873874329145, 0.17985432737750684, 0.19635008848481061, 0.1729060128897265, 0.18559041852445324, 0.17397851895960614, 0.19579778398867365, 0.22218481629986164, 0.0939866486764136, 0.13302185073073092, 0.08883406357536117, 0.11528473212464319, 0.0842847372686567, 0.10808654966692288, 0.10198114739428965, 0.0862412313324783, 0.1292102537333767]}, "mutation_prompt": null}
{"id": "32b221db-89a8-480c-b7dc-507018a9a514", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b + c - best_individual), self.lower_bound, self.upper_bound)  # Modified mutation strategy\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15\n                \n            if eval_count % (self.population_size * 2) == 0:\n                diversity = np.std(self.population, axis=0).mean() + 0.01 * np.random.rand()  # Added randomness\n                self.scaling_factor = np.clip(0.3 + 0.4 * self.success_rate + 0.1 * diversity, 0.3, 0.9)\n                self.crossover_rate = np.clip(0.7 + 0.2 * self.success_rate, 0.7, 0.95)  # Adjusted clipping range\n            \n            if eval_count % (self.population_size * 5) == 0:\n                if eval_count > 0.5 * self.budget:\n                    self.population_size = max(5 * self.dim, self.population_size - int(5 * (1 + 0.1 * np.random.rand())))\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Enhanced diversity and convergence by incorporating adaptive scaling factor and crossover rate adjustments based on dynamic diversity measures.", "configspace": "", "generation": 96, "fitness": 0.37142891840336306, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.25.", "error": "", "parent_id": "f8722487-340d-421d-9cae-1b5b7d42d16e", "metadata": {"aucs": [0.8141281845351465, 0.7947357233746188, 0.8180481256256639, 0.8100757977662112, 0.8063492033490335, 0.8166642912885369, 0.8080535571000551, 0.7984505164900406, 0.811283838971472, 0.6028463574510936, 0.5957343724204034, 0.594775377407274, 0.6525178177569855, 0.5858955828720507, 0.6022409060979149, 0.6211968324138127, 0.6506966793801163, 0.6341668030439929, 0.10958023757992874, 0.09708393070879284, 0.10259963988604959, 0.11513376927173813, 0.11515227533571959, 0.10420108312779452, 0.14392863360330577, 0.10044921341671542, 0.11335345299783384, 0.08962112660485233, 0.10247188606144386, 0.10508010381604649, 0.0898060525768859, 0.10516901853304639, 0.09094923777258668, 0.09578261032784285, 0.08874076551116883, 0.10293327187494472, 0.9555280245613615, 0.9348187137928631, 0.9226696528954926, 0.957197271665493, 0.9368945965483179, 0.9748243595912075, 0.9051681500181082, 0.9547336377941777, 0.966996127640906, 0.5977988974752727, 0.537287639813177, 0.4912586617668837, 0.5461562887904424, 0.5250934853703121, 0.49566868601457204, 0.5565468355391568, 0.5412959334341463, 0.49683278336102155, 0.7344435401377971, 0.6371074449084531, 0.7144411161370563, 0.6785850832476954, 0.749903303630524, 0.6414337719565786, 0.6907424469550689, 0.7264841167453095, 0.7683463175740584, 0.42864993572642107, 0.34162917784406155, 0.5370052881559422, 0.4562320348446698, 0.4476887237986783, 0.4904104898924566, 0.5071198017875087, 0.49066579104652674, 0.4902772922209607, 0.32518433410184666, 0.48853480290612106, 0.43655102417993896, 0.4582103860439316, 0.49743040363530155, 0.5115291977129013, 0.5450888442778916, 0.4932843200687973, 0.5083458686293691, 0.25910274263919875, 0.26281463925085546, 0.23264863457193374, 0.22738620327093662, 0.1729277047491531, 0.16225338208215456, 0.23907126849545024, 0.1845429070683523, 0.2337689244934863, 0.39861843038290945, 0.35016462402463533, 0.3401172576580205, 0.37998339819721627, 0.34335999714625376, 0.3298176050163033, 0.4655183816823716, 0.42653031240543027, 0.4183290879080498, 0.11419751718347015, 0.14058979940910343, 0.11634671189607126, 0.17352152299595835, 0.15683818742431854, 0.17388586906277947, 0.06292474390384029, 0.18840561013042545, 0.1156305857281017, 0.3157135124283438, 0.3083637772829707, 0.32652461128331656, 0.339827452414587, 0.32837422148130413, 0.35779536227182096, 0.32532327688652296, 0.34715489749939643, 0.32714584850591055, 0.7230544339886471, 0.6981438112000615, 0.702601409898961, 0.691349900826145, 0.6953604749227815, 0.7432312079143102, 0.72294981072738, 0.6855326207282411, 0.740164930508515, 0.07979256441137872, 0.09077290879859756, 0.0904499471618323, 0.08280532043975197, 0.09469608652632888, 0.09921083972181222, 0.09550919253423362, 0.09532075077696789, 0.08739914832986906, 0.16950808287509211, 0.1486147533579486, 0.1832671645435331, 0.13334137882162034, 0.1768975889313309, 0.133979667393463, 0.17810540261501062, 0.13853221841069896, 0.14112592288130077, 0.4197971891116352, 0.40196833118165887, 0.37781965406731266, 0.400707835295677, 0.35410373857687993, 0.41684985427737165, 0.42070891474271255, 0.44642158281348066, 0.4104595214175638, 0.3029976425558468, 0.2706079785323233, 0.2687402652376424, 0.2695147708972143, 0.21773800820995826, 0.26440660618060396, 0.317946362314685, 0.3021283119566247, 0.3017241749035682, 0.17924913916564567, 0.17205105005249788, 0.1865286790395735, 0.19699863515595628, 0.21247839758222054, 0.16712560394475873, 0.18948520874391994, 0.18893962594645042, 0.2014367112751183, 0.1803059253541598, 0.18592814795068924, 0.18039833218624446, 0.20811040313530882, 0.18516410453062448, 0.1819480540252184, 0.17914398479158677, 0.1797109399833342, 0.18669712500144475, 0.7008119708551945, 0.16923096748686184, 0.7243138437155479, 0.18996761793016304, 0.4231930356357497, 0.18703907446296442, 0.32844356488264137, 0.16254827932045934, 0.36773662932819096, 0.6782243200528096, 0.6043515213617519, 0.12521197334658662, 0.5646935256655656, 0.6065059881646393, 0.1437594894138703, 0.57552680431465, 0.12772983641115065, 0.6123389325828568, 0.17581302185482217, 0.18914685348120897, 0.22690793764229733, 0.18813021064552504, 0.18544702294727344, 0.17689957094981656, 0.17414888444096122, 0.20629477549804853, 0.18105737955831136, 0.08723945851335901, 0.07078191110033427, 0.06390627263236603, 0.07367844265334733, 0.0751402260073133, 0.0735148836890347, 0.0747735741541592, 0.06903683138872163, 0.06953350423369153]}, "mutation_prompt": null}
{"id": "1f4abe5b-9a65-41ea-8bbf-228d60f075d5", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n\n                if np.random.rand() < 0.5:  # Switch strategy based on random chance\n                    mutant = np.clip(a + self.scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                else:\n                    mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15\n\n            if eval_count % (self.population_size * 2) == 0:\n                diversity = np.std(self.population, axis=0).mean()\n                self.scaling_factor = np.clip(0.3 + 0.4 * self.success_rate + 0.1 * diversity, 0.3, 0.9)\n                self.crossover_rate = np.clip(0.8 + 0.1 * self.success_rate + 0.1 * diversity, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0:\n                if eval_count > 0.5 * self.budget:\n                    self.population_size = max(5 * self.dim, self.population_size - int(5 * (1 + 0.1 * np.random.rand())))\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Adaptive Differential Evolution with Dynamic Strategy Selection enhances exploration by alternating between differential and random mutation based on fitness diversity.", "configspace": "", "generation": 97, "fitness": 0.4299200980225271, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.27.", "error": "", "parent_id": "f8722487-340d-421d-9cae-1b5b7d42d16e", "metadata": {"aucs": [0.8002296210877992, 0.8126301221008778, 0.792598668736306, 0.8246587778283138, 0.8225365241885768, 0.8535276697788368, 0.8171597348673298, 0.8248277845827621, 0.8070206708659832, 0.6573679948801461, 0.6543754692582462, 0.6883558513589777, 0.6710991587246772, 0.6391596867700411, 0.6753098364269218, 0.6730233502424232, 0.6685167175789934, 0.659243652101457, 0.4282250418684421, 0.12569936648889746, 0.10227367696204215, 0.32266426875909826, 0.1336650027087386, 0.1245398060543057, 0.09469534781982147, 0.12049671116505378, 0.13640411594256074, 0.1523937168789835, 0.11418751910570168, 0.10051081139474882, 0.11022252706316071, 0.09013095935219917, 0.09968931821332228, 0.10620634664417739, 0.0926731722350469, 0.11309443278332199, 0.9885997535372623, 0.9700844572048075, 0.9651758409797109, 0.9624917348550758, 0.9735865213766909, 0.9841522502118915, 0.9907189497102982, 0.9822368991646765, 0.9732422922337889, 0.5814401328899794, 0.5420360767963448, 0.5222114250170606, 0.4865229487327144, 0.5337551813296755, 0.5413583057487712, 0.5147110023197006, 0.5560848144958211, 0.5583793635289286, 0.7648842093168059, 0.7676306302365595, 0.8057309607164109, 0.8120613942494739, 0.8438801617934596, 0.32655146845905814, 0.7991597457537514, 0.8075546894722002, 0.7727792283005017, 0.5916743120573578, 0.6076618424126387, 0.46582696765892584, 0.5536511441762537, 0.12431714206119726, 0.5742531758183733, 0.5091719738725934, 0.5736825520302988, 0.5489766824387132, 0.05206098226732847, 0.6081605944953221, 0.053809021881648045, 0.5688575293213305, 0.5517601901200209, 0.5578238237276474, 0.5514393238258924, 0.5021914436228754, 0.5616779138507397, 0.5325584900806903, 0.5752169029485281, 0.5226898129242991, 0.5119989049927237, 0.5861552069879643, 0.4499267943842057, 0.49790782855841276, 0.5635808460427609, 0.47718783973051404, 0.606787306161251, 0.6705611702571019, 0.6185246265037639, 0.6134654326647457, 0.6674522235188711, 0.6009394963647237, 0.6068354371685585, 0.6497853609988395, 0.6613135878773506, 0.3201728944649751, 0.11956051194579653, 0.20799435328978066, 0.28790935885465996, 0.24220394854036909, 0.2442723479515121, 0.32299047819873505, 0.16273290461998513, 0.13344547079349633, 0.3598589148021353, 0.4095472740805217, 0.392049048827504, 0.4440907835478287, 0.39201274646596984, 0.38164895986131164, 0.39547826180295764, 0.4040792271326571, 0.39558381565194045, 0.7327122928774952, 0.7522768352311091, 0.7330295700054612, 0.7440350585067623, 0.7282493071620781, 0.7242077653131191, 0.7275761698966083, 0.7429847045496567, 0.7137660976325211, 0.13102352090354086, 0.099092018076963, 0.11700603977296253, 0.09979631387584253, 0.1140736594016587, 0.10625739111934362, 0.10420857025194996, 0.1614989677988553, 0.09431447790786751, 0.17587859293486585, 0.12450506619992507, 0.1979854724383585, 0.3242949439448046, 0.24395169123746063, 0.17568365559168664, 0.18786482480510636, 0.5618640446568455, 0.2198815705166639, 0.4542439926049483, 0.4404102123043826, 0.39592408076483776, 0.40687994239045633, 0.45125274741552013, 0.37673180628320535, 0.5354962395544097, 0.4843572018154868, 0.46277362507147013, 0.33987980941559925, 0.34344429324385584, 0.3484428275845416, 0.32988528989502375, 0.3471054260016625, 0.3456967435882553, 0.379417075527419, 0.35932994042426714, 0.3912654888077608, 0.236366404686146, 0.17478804784154767, 0.1840935161383036, 0.17998370910912365, 0.17355257877426755, 0.19536957383633902, 0.18022170374219837, 0.179549061076683, 0.1848919078133625, 0.5953204651158257, 0.22041637652303436, 0.210428847968973, 0.5757309318465768, 0.22978266415047333, 0.2255013004043912, 0.5944360371422129, 0.20401869338737733, 0.4449961166694295, 0.2090114428934403, 0.16424252407587414, 0.20585798554073365, 0.1651852219285842, 0.7858362132986719, 0.15570647081876599, 0.1617731902994145, 0.8227866772179696, 0.19507447813150625, 0.7892468564264498, 0.8399527011986803, 0.12690904525167257, 0.8296815581090202, 0.8300516235735261, 0.8047230292447494, 0.20233422663550182, 0.15467438763781993, 0.21350931935758377, 0.16563476979639613, 0.17982964518625721, 0.1712809327318231, 0.18807104606773872, 0.19440557367442557, 0.18110791915587032, 0.18683423888376893, 0.1863957089464493, 0.1972778342163548, 0.08668834581428675, 0.07232109634264106, 0.08557430089901685, 0.08365660523636231, 0.0771972246351117, 0.0719375197728559, 0.08401931864354995, 0.07924221651063212, 0.07275756729715344]}, "mutation_prompt": null}
{"id": "c852a4ea-8977-455a-b2b4-b35b8342bd4e", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(best_individual + self.scaling_factor * (a - b), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n            if eval_count % (self.population_size * 2) == 0:\n                diversity = np.std(self.population, axis=0).mean()\n                best_fitness = self.fitness[best_idx]\n                self.scaling_factor = np.clip(0.3 + 0.4 * self.success_rate + 0.2 * (1 - best_fitness), 0.3, 0.9)  # Adjusted line\n                self.crossover_rate = np.clip(0.8 + 0.1 * self.success_rate + 0.1 * diversity, 0.8, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0:\n                if eval_count > 0.5 * self.budget:  # New condition for adaptive reduction\n                    self.population_size = max(5 * self.dim, self.population_size - int(5 * (1 + 0.1 * np.random.rand())))\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Enhancing convergence speed by dynamically adjusting the scaling factor based on success rate and current best fitness.", "configspace": "", "generation": 98, "fitness": 0.16828046335260674, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "f8722487-340d-421d-9cae-1b5b7d42d16e", "metadata": {"aucs": [0.15909888530169314, 0.23756223174724844, 0.14866694398339364, 0.06540072402632646, 0.20328759684412723, 0.10297199883533159, 0.7870442182915393, 0.7742804897833392, 0.8139569812128072, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14820865433031905, 0.11837593108870847, 0.08222520063907979, 0.043165678143407105, 0.10295505803341021, 0.0011552125313534223, 0.11523097423843609, 0.0253139496839071, 0.038688924943351743, 0.12194628678776775, 0.09720725035426148, 0.09252939726994192, 0.04601449578713923, 0.04153869361148321, 0.002161020797779578, 0.06561896890752283, 0.03247476482734257, 9.999999999998899e-05, 0.9734706637959423, 0.0834262435126728, 0.03509433134186113, 0.0704737467095582, 0.12139280199853042, 0.035426733672787813, 0.05867072514665106, 0.14109947231130193, 0.03804069547058875, 0.11502624918768489, 0.03328275285488147, 0.011400791152361145, 0.01756976190669468, 0.03231118304136105, 0.011178649214988345, 0.59450861655804, 9.999999999998899e-05, 0.5281775386909464, 0.09256016282182811, 0.06808949527496677, 0.103432900130624, 0.1637322793249486, 0.11324539238945619, 0.026479560122359413, 0.0907413878066956, 0.1022031879415265, 0.15464429040248684, 9.999999999998899e-05, 0.04547874705474564, 9.999999999998899e-05, 0.6039240668583924, 9.999999999998899e-05, 0.5567854678094981, 9.999999999998899e-05, 9.999999999998899e-05, 0.12871653505377856, 9.999999999998899e-05, 0.018832721834938115, 9.999999999998899e-05, 0.13072064387930804, 0.16935609594595336, 0.1703788606969021, 0.13212665756057773, 0.15773077423984505, 0.13112847221962398, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.500906050317756, 9.999999999998899e-05, 9.999999999998899e-05, 0.06993512655620593, 0.04410842672784843, 0.039864925405421636, 0.650462125142347, 0.0071604923895367545, 0.04033291340596967, 0.16112221355731604, 0.05352384537909316, 0.0783731512857625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015461476213367686, 0.0884642002589775, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.343194175558453, 9.999999999998899e-05, 0.3075448775608651, 0.7090301524372866, 0.6780902648497749, 0.7042914072982183, 0.693559458490927, 0.6813814814309003, 0.6441233207022175, 0.40317736432125284, 0.2704669201919322, 0.32020163570062576, 0.0843967990079465, 0.014728003288847269, 0.030344628702776433, 0.05542849127509786, 0.037858488292522474, 0.08031424576946444, 0.059919362518714325, 0.08047313079629548, 0.025213469254406817, 0.25360275286325495, 0.24224985561995405, 0.21790977804889644, 0.1632502193084523, 0.23556560067534504, 0.4885058110433891, 0.14835799974642627, 0.17570493547098287, 0.2270635877114633, 0.3734279519302022, 0.3834559004492225, 0.24893334739317519, 0.2057755638639096, 0.1675533475683596, 0.1471829383207145, 0.17344012765672923, 0.18974710860822297, 0.20449205691707628, 0.3046116087163495, 0.30276285073387665, 0.06725960812023346, 0.208355718991177, 0.1648566316822, 0.15566153059820032, 0.16645025279321468, 0.16447182943658556, 0.12950644072900408, 0.18615186067129863, 0.1901356243155633, 0.18559186385509152, 0.19623588594667385, 0.15487744041860496, 0.17834107395886656, 0.22526807065794197, 0.19047278623699593, 0.19350867826120244, 0.6348545943038058, 0.20538446980074654, 0.18781967802110544, 0.16882109590334038, 0.1529350483821721, 0.18750042214496054, 0.16860723596791927, 0.15896122848100347, 0.18285474992926087, 0.16871272050512487, 0.06723434531711447, 0.10333917867981235, 0.11452452804467261, 0.13847543412312735, 0.06172307673153099, 0.8879926663029265, 0.14722281249330404, 0.16350907493320754, 0.8331569357857634, 0.21101343421596863, 0.8187495913552802, 0.14645622727640295, 0.227437023863016, 0.16653696216878744, 0.898436714201039, 0.05908013622480068, 0.1991259809131517, 0.20127379252986566, 0.2236105875106199, 0.20604766520192708, 0.2599706299690636, 0.20680457453202106, 0.37420290727696726, 0.18759850907210351, 0.17630704307565814, 0.17378714744432378, 0.11033507121771202, 0.09715481593526898, 0.07353760335663262, 0.05971152117900547, 0.06152385464853227, 0.055131011362327786, 0.13085710912755877, 0.0737047335761194, 0.10042568973469024]}, "mutation_prompt": null}
{"id": "f3adaf83-b9bd-4223-9542-085e75adcf7e", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.success_rate = 0.1  # Track recent success rate for adaptation\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + self.scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(cross_points, mutant, trial)\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_rate = 0.85 * self.success_rate + 0.15  # Increment success rate\n\n            if eval_count % (self.population_size * 2) == 0:\n                diversity = np.std(self.population, axis=0).mean()\n                self.scaling_factor = np.clip(0.3 + 0.3 * self.success_rate, 0.3, 0.7)\n                self.crossover_rate = np.clip(0.8 + 0.2 * diversity, 0.7, 1.0)\n            \n            if eval_count % (self.population_size * 5) == 0:\n                if eval_count > 0.5 * self.budget:  # Adaptive reduction based on budget usage\n                    self.population_size = max(5 * self.dim, self.population_size - int(0.1 * self.population_size))\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveNeighborhoodDE", "description": "Incorporate stochastic ranking and adaptive parameter tuning to balance exploration and exploitation effectively.", "configspace": "", "generation": 99, "fitness": 0.34748177006059877, "feedback": "The algorithm AdaptiveNeighborhoodDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.24.", "error": "", "parent_id": "f8722487-340d-421d-9cae-1b5b7d42d16e", "metadata": {"aucs": [0.7592889919451544, 0.7659912141339984, 0.7787496026658456, 0.7767845080727508, 0.7732419107266704, 0.7667571665650943, 0.7882421582224945, 0.7764821567230291, 0.776098614123007, 0.6281459477932313, 0.6208817296417002, 0.6101768108093497, 0.6266696015466988, 0.6257454765046293, 0.6231303248553653, 0.6239123461937036, 0.6055589844006803, 0.6031632158645758, 0.09745996091071518, 0.0984506438339624, 0.10497787591010987, 0.10797643749022934, 0.11197981156182613, 0.10196197784110594, 0.08785136677663685, 0.10673309106518392, 0.10846100609212139, 0.0889807496268088, 0.09980838792330282, 0.08484239392166604, 0.10009527944838537, 0.09758602546941875, 0.09736968879755314, 0.09167204634116533, 0.09070743988855923, 0.1051474423999691, 0.825080597458132, 0.9237259128518494, 0.8837713357849324, 0.8285830533086772, 0.8378344318094, 0.832372261457574, 0.8670649829975329, 0.8625243893765385, 0.8898423156911232, 0.4260787894373117, 0.415816589457942, 0.42589377000059025, 0.39911991893044796, 0.41791571063696786, 0.4431784942725341, 0.40355655710580796, 0.4293754554132778, 0.4041451541582658, 0.6855714843901646, 0.743399771424643, 0.7409953460782139, 0.7898870622417813, 0.734510723352931, 0.7674618458141219, 0.7376286703049095, 0.7380552436672311, 0.7356482511761671, 0.2630317132791944, 0.23269185145872195, 0.25431015696969206, 0.23092556550537802, 0.23569892474759913, 0.2526018394072277, 0.18187174446624477, 0.17558275793909184, 0.2366718167237979, 0.18286101125635734, 0.30544511078720493, 0.11089480372946925, 0.25933784754451494, 0.28716792268791635, 0.21697629189345036, 0.21881475099125935, 0.31696829717645203, 0.23680085837099263, 0.3062857128739789, 0.33253128260249465, 0.3595957305710402, 0.35751721405604586, 0.319906922647479, 0.35381794169415204, 0.3571278060849632, 0.3514095591468386, 0.3377104213764902, 0.43413349032315385, 0.4673968085687997, 0.46745360295333127, 0.427057608390779, 0.45055706632188564, 0.46570618408845166, 0.4479030213073175, 0.4536559569836791, 0.5024799812683625, 0.15305460725983155, 0.14802913456080657, 0.13373621834284966, 0.18201542886565403, 0.15240748861665065, 0.19939779292130666, 0.09887427528276871, 0.11456676105694974, 0.10566954642311488, 0.23886249937515092, 0.23077438005343343, 0.25205599641986287, 0.237538560892412, 0.22586252709664212, 0.2486640872311069, 0.22652493814256536, 0.22509057846600877, 0.2417761439416123, 0.5926204191733584, 0.5954175768286452, 0.6010306361076954, 0.5806299172293792, 0.5854097395847904, 0.5657136750224052, 0.60210281849737, 0.6051502377525388, 0.5817351284697254, 0.10361081008978912, 0.09116173702453068, 0.10392279559655648, 0.09224243812356558, 0.09707161947940424, 0.08746583433318444, 0.12366801599648092, 0.09528515310650854, 0.09823068916297073, 0.1706440497265308, 0.2117768968306254, 0.2166716795232625, 0.18242006832474755, 0.1596685334083482, 0.12393803420061611, 0.1670426744444985, 0.17772848794219154, 0.18749201893944423, 0.3673566415629502, 0.3312972321959715, 0.34608603476199307, 0.35902654236888243, 0.3456423094438553, 0.3488568750725811, 0.37613207577717045, 0.37651655404833195, 0.38888808426749677, 0.26622286518417937, 0.2751617608120821, 0.27223981562912825, 0.2720672541354736, 0.2433172284918832, 0.27858904888362823, 0.30208053749156794, 0.2811253572580018, 0.2786961675805951, 0.1966203129931846, 0.1954936098015837, 0.19343032150667483, 0.20923976701815938, 0.1978856143667942, 0.1814957138350486, 0.2035689278290702, 0.2067940177514097, 0.19888387709410404, 0.1921928190363026, 0.18523444082981766, 0.17916026812676522, 0.17997949829764515, 0.19608899874326413, 0.19113114387695562, 0.24734255461730192, 0.2026440345792747, 0.18042213542445296, 0.7416111019554312, 0.18173846254042259, 0.17094049172742198, 0.18875888598326618, 0.7219556763880846, 0.7216872345149775, 0.6479586151388089, 0.14948969576747861, 0.767832371943616, 0.39891583732598657, 0.749928672512611, 0.7525507065228272, 0.6951296994688339, 0.20458348482865152, 0.19461666208513073, 0.2108791745116636, 0.5528565765414631, 0.20630607541955226, 0.2131734123435689, 0.1909576446794623, 0.19340070034472912, 0.18112394642488194, 0.18530453679999392, 0.20979158373827123, 0.18274095339303553, 0.17667807190825535, 0.19451480712972713, 0.08455625838473313, 0.07619179669101106, 0.07200641153543363, 0.08695911260553513, 0.07681915889572011, 0.07826889016861971, 0.07299261415226888, 0.08545465230035065, 0.08470518497646717]}, "mutation_prompt": null}
