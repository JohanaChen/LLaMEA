{"id": "fb313584-791e-4b49-b43e-6cf2c97b2b49", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))  # Ensure a minimum population\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.gaussian_factor = 0.2\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant_vector = a + self.mutation_factor * (b - c)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                \n                # Apply dynamic Gaussian perturbation\n                trial_vector += self.gaussian_factor * np.random.normal(0, 1, self.dim)\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = func(trial_vector)\n                eval_count += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n        \n        return population[np.argmin(fitness)], np.min(fitness)", "name": "HybridDifferentialEvolution", "description": "A hybrid metaheuristic combining differential evolution with dynamic Gaussian perturbations for adaptive exploration-exploitation balance.", "configspace": "", "generation": 0, "fitness": 0.09573396698649968, "feedback": "The algorithm HybridDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": null, "metadata": {"aucs": [0.1861143344732349, 0.18488465821226896, 0.1687906936630379, 0.1954314528676787, 0.1740320873711606, 0.17975760972096666, 0.18777702434020227, 0.1909106176004718, 0.1785644492060583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05952320911498832, 0.05316907360635581, 0.04478240217068741, 0.03726285325967471, 0.03890017834572701, 0.042672193781421064, 0.04199944215404505, 0.0512335433499842, 0.04672796572302884, 0.030053530848379917, 0.024430476899385045, 0.03025584438664608, 0.03524296461058296, 0.022348982818810148, 0.021127080851509716, 0.03696417075239278, 0.02145007392356746, 0.033059542837577616, 0.2380919999893153, 0.20687963303125534, 0.18619001548959047, 0.20075355946954487, 0.15027920121872884, 0.3600797801896377, 0.2514016760977994, 0.21743174308713586, 0.1921185014658202, 0.07518601415694881, 0.08583871451222569, 0.10171882691615464, 0.10934761337206023, 0.07722648963976009, 0.056283872374390365, 0.09494931059303147, 0.06992167978182573, 0.09149425784348408, 0.13776579407617606, 0.19308637766117165, 0.14859284869307576, 0.1133172867493013, 0.11716037459603945, 0.1278111796714667, 0.11428147739893957, 0.12291599043133172, 0.12244506287321566, 9.999999999998899e-05, 0.004130275838204911, 0.00012237371561674149, 0.003180139886062028, 0.01916904713980716, 0.011220955129967458, 0.0027210822082439634, 9.999999999998899e-05, 0.010756135862768468, 0.0170623302371119, 0.015237197411814618, 0.006650823016260854, 9.999999999998899e-05, 0.035362057023575866, 9.999999999998899e-05, 0.01854581968607305, 0.00456725898427246, 0.0031235252316468287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033545948482282206, 0.06535045920481664, 0.06532983830924555, 0.05173539607661659, 0.08113734560802444, 0.0511644128748554, 0.0537204939684891, 0.052693984165303465, 0.03753882807872, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00021661972646813688, 9.999999999998899e-05, 0.000621276444640384, 0.0006931191659005354, 0.0009618429051421185, 0.003971225212371476, 0.0013369260352479317, 0.0033175251835171338, 0.20358220717475184, 0.20732803781738263, 0.18640736811219472, 0.2055799784281095, 0.1951138886389978, 0.19273526688096676, 0.1980655687085019, 0.22294644040481904, 0.19199944945985448, 0.044081043061474534, 0.052394981601691315, 0.04324222316929971, 0.04596297647451664, 0.04156449770406778, 0.0413352471208871, 0.051131010256768916, 0.03830572089090223, 0.04775951385313615, 0.166755984567871, 0.1521803782432788, 0.1326598434994417, 0.13769654585267255, 0.1463003652587921, 0.16229913838969512, 0.14963138758589234, 0.13293973642091206, 0.13273554884437178, 0.16262333051218647, 0.15627640615841065, 0.17096992324614035, 0.1565755512536351, 0.15513476721160058, 0.1703363547400395, 0.15804542596809912, 0.1764283710202157, 0.15938023237630472, 0.09910656239635973, 0.09378091957072487, 0.11202006725570901, 0.10400573745997221, 0.12196422628551917, 0.11684742346816857, 0.1025471922610861, 0.1237427242099084, 0.10800055546888288, 0.14935348651989566, 0.1518837392230129, 0.16178183709796834, 0.15098075537943878, 0.14859170205298655, 0.15929523486191643, 0.16813164117434753, 0.15042716432915582, 0.1589379716031346, 0.13738512289598348, 0.1453727497640397, 0.14671462092351706, 0.14280711027795567, 0.14902277952979037, 0.14368435772614108, 0.14484618811115668, 0.14556388991246116, 0.1644654309621939, 0.133848032879615, 0.16679477618376493, 0.16005773061943762, 0.15176503580803635, 0.23570231720745427, 0.122414151589046, 0.15324563983997774, 0.14999613660544708, 0.1618659857471243, 0.14301596130282068, 0.1581113255008857, 0.15162828472985823, 0.13662633431171312, 0.1449700832682571, 0.11182872076740025, 0.17551218898041065, 0.17449745427357466, 0.1488675754455011, 0.18249436185500645, 0.20174225318827455, 0.18425510182043958, 0.209397223689875, 0.21837522038533075, 0.1789461589675504, 0.17797738226052429, 0.18745620390490036, 0.20568880668582523, 0.05210726078304828, 0.06265680085731984, 0.06585155299632517, 0.04997836407669243, 0.058815507864153016, 0.05131362809915152, 0.07532529613519179, 0.06097808126786608, 0.04614402647448679]}, "mutation_prompt": null}
{"id": "bf11419b-c430-4265-ad51-dc351baa7f23", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.gaussian_factor = 0.2\n        self.gaussian_scale = 0.1  # New adaptive scaling factor\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Self-adaptive mutation factor\n                mutation_factor = self.mutation_factor * (1 - eval_count / self.budget)\n\n                mutant_vector = a + mutation_factor * (b - c)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n\n                # Apply dynamic Gaussian perturbation with adaptive scaling\n                trial_vector += self.gaussian_factor * np.random.normal(0, self.gaussian_scale, self.dim)\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced variant of differential evolution incorporating adaptive Gaussian scaling and self-adaptive mutation to improve convergence.", "configspace": "", "generation": 1, "fitness": 0.106964831088065, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "fb313584-791e-4b49-b43e-6cf2c97b2b49", "metadata": {"aucs": [0.2142420275154877, 0.19963237163909964, 0.199800952389106, 0.20213807291339403, 0.18945015137566268, 0.201599397411371, 0.19695216595371534, 0.20505473249658557, 0.20091460349924462, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00016528756460543192, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0532101465176138, 0.05565036184847194, 0.05849858109353501, 0.05849531085736326, 0.05460544990120031, 0.05375169260856638, 0.06064935732179488, 0.051838240399810775, 0.06407782209324309, 0.034762880243386696, 0.035373576298252885, 0.039864630666705314, 0.03768906921464421, 0.03494407028865831, 0.0448165075977911, 0.054293127461433666, 0.04048408628755573, 0.03984060315571747, 0.28132505353642134, 0.21420509075180894, 0.18656462904443072, 0.1941698637770285, 0.1587945825174618, 0.18884747892150922, 0.2601913639891291, 0.17334987968206939, 0.6341584903177748, 0.0910722965193177, 0.0777929146006241, 0.10323114570707459, 0.07208646904787963, 0.08099950651603727, 0.08491056506282602, 0.09802612268026645, 0.07208044431868532, 0.11548776607392264, 0.15571894991659063, 0.1937248325340709, 0.15570974502253287, 0.1460511333905562, 0.16783601693618655, 0.1336488081116931, 0.1273281032224446, 0.1689150686471308, 0.129144565294665, 0.022743992723996742, 0.018493520700685107, 0.017791806113532926, 0.02342223906315377, 0.03316982029191273, 0.015711434921735545, 0.0157841521912927, 0.023437784143491847, 0.021801348819020183, 0.01340633259251367, 0.05611103256945649, 0.043893456950884535, 0.02607154038797832, 0.040975819247373146, 0.03025555371285371, 0.03009545049703377, 0.03843037297832419, 0.03249265686966285, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001782568598193035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051916827969554324, 0.0668131278613544, 0.05625078447954146, 0.062242044349667736, 0.06042771698552751, 0.050335417615170575, 0.07617480096059426, 0.07404229895577663, 0.10852364771105294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038367727697128373, 0.0025214391159735783, 0.007562225679368373, 0.0069500170433162145, 0.0026568996059466166, 0.0030340592832082125, 0.009763426230855243, 0.010686933317277214, 0.00492553250315142, 0.2320132626653294, 0.2181137202177139, 0.20937607848307116, 0.21932709384476923, 0.2067475555421272, 0.20950071235471168, 0.226931742902154, 0.20549570110354243, 0.2281025272716274, 0.07561102964317545, 0.05093677203007485, 0.05221441092395396, 0.07170019040339792, 0.052515133907833134, 0.05369258128207477, 0.05495797592387841, 0.05504274860858127, 0.05526117967465649, 0.1480205917782711, 0.13069896136531256, 0.15293996273020893, 0.14284783782284882, 0.14178470904798046, 0.1454717143205706, 0.15771249942297094, 0.15371535043325768, 0.12633117631967705, 0.18186636312536786, 0.1634029196022193, 0.1757735693968585, 0.17060851804511457, 0.17387402995415147, 0.17614605122623794, 0.1620190280035958, 0.17816177143209022, 0.16962551719856656, 0.1159890988795087, 0.10832912126538163, 0.12176750706452477, 0.14628793753621794, 0.12368946535564829, 0.12817794043112496, 0.13162639009949928, 0.13262198848498663, 0.1156191625924714, 0.17848089290722802, 0.17073598046088045, 0.16860558234356593, 0.16446588603875056, 0.16891645534329214, 0.1621420214722773, 0.18770598933381766, 0.1697994972864466, 0.181199349988737, 0.15328458625848107, 0.15816969783822055, 0.15088579190624585, 0.15094003497536157, 0.15672204608215912, 0.16047452076539304, 0.14691515112117937, 0.14905698025534453, 0.16646489371761963, 0.16658758474003021, 0.16775056890878293, 0.1624921376292785, 0.15814066377948277, 0.19902281022039836, 0.15694352647799537, 0.175376019602278, 0.16701393282679233, 0.1674787995418794, 0.16665549296532722, 0.16657624438947805, 0.16402192819909212, 0.23425155624253746, 0.16195618781649368, 0.14214153715729294, 0.1762453103855438, 0.19219049105510022, 0.16001348537284832, 0.1871527266687879, 0.19017897422901875, 0.18006838481677445, 0.20470999126252498, 0.2135749380374129, 0.1912165304174498, 0.19451831967581756, 0.17967190949800593, 0.20568880668582523, 0.050952351966089604, 0.05961855180490694, 0.06937507419634603, 0.06110510035892769, 0.060863190833932435, 0.06192558632131551, 0.07532529613519179, 0.0591805765158846, 0.06160295191055898]}, "mutation_prompt": null}
{"id": "5eab3c39-61e4-4b21-b602-7fae0c0b7702", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.gaussian_factor = 0.2\n        self.gaussian_scale = 0.1  # Adaptive scaling factor for Gaussian noise\n        self.adaptive_learning_rate = 0.1  # New adaptive learning rate for mutation\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Self-adaptive mutation factor with adaptive learning rate\n                mutation_factor = self.mutation_factor * (1 - eval_count / self.budget) + self.adaptive_learning_rate * np.random.normal()\n                \n                mutant_vector = a + mutation_factor * (b - c)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n\n                # Apply dynamic Gaussian perturbation with adaptive scaling\n                trial_vector += self.gaussian_factor * np.random.normal(0, self.gaussian_scale, self.dim)\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced differential evolution algorithm with adaptive learning rate for mutation factors and Gaussian noise, balancing exploration and exploitation for improved convergence.", "configspace": "", "generation": 2, "fitness": 0.10438918004180599, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.07.", "error": "", "parent_id": "bf11419b-c430-4265-ad51-dc351baa7f23", "metadata": {"aucs": [0.19465360128785292, 0.20199445256566928, 0.2094277053488831, 0.2019352431564696, 0.2055759895807191, 0.1872567906848055, 0.22111977018311613, 0.2023184582981048, 0.19334262649338207, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025201566845229895, 9.999999999998899e-05, 0.05241301264377618, 0.06538699733635733, 0.055579734230898015, 0.051963871608955214, 0.05601865248837512, 0.06102827406971301, 0.05546898995131, 0.05820777039437619, 0.05289439775885019, 0.03720150863103222, 0.041755401623687405, 0.04506164534892765, 0.047344746382496083, 0.0379392946358843, 0.0375853300673159, 0.04509332069210248, 0.0364904932592075, 0.0372221101714294, 0.20091428846805093, 0.1441418919538261, 0.16997674339639357, 0.17531178602906639, 0.25790414906350945, 0.16448598371074918, 0.27503322647597694, 0.21722369860623436, 0.16210505045564083, 0.09800873497268481, 0.07934999169083279, 0.10171882691615464, 0.08658049657476097, 0.0737797912917062, 0.05475380538486774, 0.10089938303798551, 0.09991371842010177, 0.09703402742759171, 0.14181111149590453, 0.19366233827402524, 0.1563322509350693, 0.1330896859291295, 0.1260332615401134, 0.12980222319893708, 0.17277065884879628, 0.12991855518216122, 0.1514259627400426, 0.022166875578631284, 0.024859311462441802, 0.015236586453622802, 0.029573904901165737, 0.02227874987516265, 0.04401979731745087, 0.01667483690552929, 0.035921719795414586, 0.03510804996639871, 0.03191668082658616, 0.021684402704035932, 0.030293538787425467, 0.04384590581335979, 0.05227025168173771, 0.05742252126750369, 0.07787885900099223, 0.023062802351626832, 0.022030088691304073, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05299274279882138, 0.07231795745034197, 0.1470502893314255, 0.06601531221218393, 0.05525396492573398, 0.03348265085733326, 0.05659246425950837, 0.056576160545308674, 0.06807525761315014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0036206817904419486, 0.005418132431409095, 0.010112242313804698, 0.002515683218921927, 0.006319159586217427, 0.012719370281349063, 0.0068300720978566876, 0.003902694442052379, 0.008280833793671949, 0.2227301042279598, 0.2152911399934131, 0.19583095258722383, 0.21524920426260974, 0.20622492926103664, 0.2262865051197558, 0.20692845065813303, 0.22934654442113045, 0.22404007968308948, 0.0529980064700285, 0.05698470402707423, 0.05654916843240443, 0.06675900557735115, 0.06226649344244073, 0.05208847649394921, 0.05533610230189101, 0.052980903915768596, 0.05900745666944096, 0.14207919768445376, 0.1469127790543473, 0.1446073034567089, 0.13879285658712526, 0.1390204085068384, 0.1454397367022835, 0.15012949744280435, 0.12876763953781278, 0.1232110545564814, 0.17225374652010528, 0.17493530437058546, 0.1767991144463611, 0.16117852536464283, 0.16996540507008395, 0.17214939805597373, 0.17160314055409165, 0.19117276544347228, 0.15976729716765126, 0.1188306725167646, 0.11480648147187278, 0.1139917065174948, 0.12049880787209699, 0.12440423667904199, 0.11163348232960435, 0.11755657473915093, 0.1322546886873257, 0.11838086326403496, 0.1585307132599708, 0.1664692816023109, 0.1579446925300375, 0.1583898989910304, 0.16521213700178417, 0.1653668516802983, 0.15795077086667209, 0.1645732395248417, 0.16684289891435833, 0.1489349740967444, 0.16318922535887737, 0.15346363518668826, 0.14921954092647283, 0.1581542646780254, 0.15731533478284676, 0.14538945025344796, 0.15233922728883698, 0.16660267918222105, 0.15708465508128733, 0.18546728920626676, 0.16280653915401222, 0.18391053328442042, 0.1621925811055318, 0.1683695515106356, 0.17127918817401155, 0.15907196962970105, 0.19517370924937916, 0.2404287831092916, 0.2082615650982027, 0.20433283245016565, 0.15982393610669665, 0.12961676981031356, 0.17112091300596477, 0.1679268459382829, 0.19954975265826835, 0.14833316156177911, 0.20843602625026358, 0.19788897012266993, 0.17789616093400185, 0.18742902190297306, 0.2135749380374129, 0.18918261263650593, 0.19588595826472488, 0.18640513809988146, 0.20568880668582523, 0.04929614044852537, 0.053000914405688104, 0.06585155299632517, 0.07162678633030173, 0.06274651310006318, 0.06012445524285448, 0.07532529613519179, 0.058536814862821474, 0.05478393724201869]}, "mutation_prompt": null}
{"id": "ba4fcdb5-77cf-491f-8ea5-f83b09491114", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.gaussian_factor = 0.2\n        self.gaussian_scale = 0.1  # New adaptive scaling factor\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Self-adaptive mutation factor\n                mutation_factor = self.mutation_factor * (1 - eval_count / self.budget)\n\n                mutant_vector = a + mutation_factor * (b - c)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n\n                # Apply probabilistic adaptive Gaussian perturbation\n                if np.random.rand() < 0.5:  # Probabilistic modification\n                    trial_vector += self.gaussian_factor * np.random.normal(0, self.gaussian_scale, self.dim)\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introduced probabilistic Gaussian mutation factor adaptation to enhance convergence speed.", "configspace": "", "generation": 3, "fitness": 0.1045601223799432, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "bf11419b-c430-4265-ad51-dc351baa7f23", "metadata": {"aucs": [0.20531160849627417, 0.1967240348945274, 0.19457025240622283, 0.1975260491951415, 0.19706321230775314, 0.19340771478250507, 0.19892482945861678, 0.19076129170580824, 0.1923260590777789, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05852343524500214, 0.06109739882354337, 0.047125390659288446, 0.059313476518413566, 0.06973216633704615, 0.06215043104093143, 0.04948303370152518, 0.05854643773419632, 0.0581443940125731, 0.03699432562623084, 0.038327690898739664, 0.042498296613666, 0.044889110020378764, 0.03378811176418872, 0.03633650980815606, 0.04106517521858821, 0.041929725203224355, 0.04127558437061585, 0.17905806462536988, 0.20957985736268403, 0.1517201129574962, 0.13262081487127853, 0.18378589232285514, 0.33219272989038795, 0.29861959076502775, 0.17843263970511947, 0.1613015071433963, 0.0929024614720203, 0.07540006808895161, 0.15021424914340664, 0.07296437443115067, 0.10117979752399331, 0.05219553791672171, 0.16469721476372323, 0.08936021354626467, 0.10086207387476642, 0.13545005833607082, 0.19364917841124185, 0.15645971961251248, 0.12192712908559045, 0.13657379161616845, 0.19242876078100002, 0.13699707637369907, 0.13955960244811683, 0.15540681532914769, 0.01850515828109489, 0.0298750593373015, 0.02189130824807195, 0.026670365641750182, 0.024151218530014784, 0.019876863068719608, 0.0353075171586843, 0.026330000072930848, 0.03471256760872132, 0.020720711905464317, 0.0236385268757775, 0.023814416119861903, 0.03323589854994358, 0.04552874624075609, 0.030035045087090095, 0.034656902121881994, 0.01990228579599329, 0.02437227400721187, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.075045755144316, 0.06925896487295724, 0.08191115837439844, 0.06652792328805712, 0.06674475634270471, 0.05060823353477695, 0.050043795929824775, 0.06716092314291489, 0.0493816280301691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007915604910518459, 0.005930676854912442, 0.006677156999659539, 0.0084547110902784, 0.007748769078579243, 0.008243092422096754, 0.0062297044635736265, 0.008173541204737345, 0.006676847091060645, 0.22344774405046597, 0.22686532582467878, 0.22113299038142686, 0.2215017285546974, 0.20632157888782554, 0.20632770461979166, 0.23157701847626067, 0.240008519487099, 0.23333126117838576, 0.05391585224719986, 0.061911276765697965, 0.04974342288958655, 0.05421525685222239, 0.046922892235375935, 0.05319858249031839, 0.05012882301296995, 0.058742922194753966, 0.061768231061755774, 0.13770214880771858, 0.1597249313290764, 0.13445467811414458, 0.138111795206177, 0.13844339996217658, 0.1250068552505128, 0.14963138758589234, 0.1359601794155143, 0.13715251761904934, 0.1713538327423152, 0.1729185611704841, 0.18191917019613713, 0.1650749044159836, 0.18068949720718097, 0.1780590958954653, 0.16663841184633943, 0.19410311736565955, 0.17201517421482426, 0.11410926674179611, 0.12163561424960556, 0.11893266751340759, 0.11153864165344674, 0.12489369033805175, 0.1150847378467601, 0.1269349808282173, 0.13204289365824773, 0.11954126403869736, 0.1797903706619991, 0.16560676688033704, 0.16107560593397208, 0.1703813224533276, 0.1589793901607709, 0.16737993804250673, 0.16496354366174126, 0.16256024183969708, 0.1675424452147949, 0.1453100202960288, 0.15714251483078678, 0.14937980048177812, 0.14871231450590094, 0.1644238796548556, 0.15930259873806696, 0.14539387153567318, 0.14838861694915484, 0.16366146191911535, 0.15739704126128495, 0.16826898537793966, 0.18227399884120266, 0.19618662771274709, 0.17901496616224233, 0.16523269942005614, 0.1949090862923858, 0.1835248320601358, 0.23068825048351116, 0.14899254829096586, 0.23233080119292848, 0.15423704141056171, 0.15538140754929175, 0.15588914633834883, 0.14253303438722942, 0.1713102483217177, 0.172009798880858, 0.1672579580441692, 0.17806412323091203, 0.19037378243135206, 0.18554810431195679, 0.18684229603765312, 0.2135749380374129, 0.1703245417078788, 0.17547970412954705, 0.18195991255450694, 0.20568880668582523, 0.05597678936887418, 0.05728295100095471, 0.06605631456526773, 0.05941475321462708, 0.061906638692572735, 0.05776744578191917, 0.07532529613519179, 0.06746298771408032, 0.05173614050981579]}, "mutation_prompt": null}
{"id": "2ed17edb-0d91-4d7e-8ef2-1662b7644403", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.gaussian_factor = 0.2\n        self.gaussian_scale = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Self-adaptive mutation factor\n                mutation_factor = self.mutation_factor * (1 - eval_count / self.budget)\n\n                mutant_vector = a + mutation_factor * (b - c)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Dynamic crossover rate decreasing over time\n                crossover_rate = self.crossover_rate * (1 - eval_count / self.budget)\n                trial_vector = np.where(np.random.rand(self.dim) < crossover_rate, mutant_vector, population[i])\n\n                # Apply dynamic Gaussian perturbation with adaptive scaling\n                trial_vector += self.gaussian_factor * np.random.normal(0, self.gaussian_scale, self.dim)\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced differential evolution algorithm with an adaptive mutation factor and dynamic crossover rate to improve convergence speed.", "configspace": "", "generation": 4, "fitness": 0.10118212357393028, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "bf11419b-c430-4265-ad51-dc351baa7f23", "metadata": {"aucs": [0.18518566232442113, 0.19569862094386103, 0.2018322693526301, 0.18897398936125642, 0.17157460321797113, 0.18734772039374226, 0.19621237324211027, 0.17949050257374188, 0.16933837969177623, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0584994540938627, 0.0637676719896042, 0.056606835486960105, 0.052325449565146065, 0.05142341146495233, 0.051495035405535794, 0.05788664780936237, 0.060152869889796734, 0.06228437336688897, 0.03290535870960121, 0.03704774208326311, 0.0367274390773662, 0.03146615601196667, 0.03198203347596407, 0.03979367580393578, 0.0514932218615648, 0.033974088293797444, 0.041596797437419064, 0.20628851130118642, 0.2597164243737361, 0.1595139269020419, 0.23440968028425102, 0.17960042011259814, 0.31021243373355034, 0.18880152267827421, 0.17792829004646304, 0.4129886619788947, 0.08586048030877613, 0.10083372198184237, 0.10445316562568385, 0.05074996440223856, 0.0778097667696287, 0.0525054854204422, 0.1052360026441862, 0.07382386246592654, 0.09073074732565567, 0.1194453235950792, 0.19308637766117165, 0.1481850439168273, 0.12516779814073475, 0.11673080231849309, 0.13350541175064368, 0.14881430711489652, 0.13854600498644398, 0.15311070106288605, 0.012457519809402573, 0.012557088134496963, 0.011188812621892419, 0.01712558831727362, 0.008490962896720688, 0.015058208473008428, 0.03229200422099021, 0.016229107161581435, 0.00850712906335771, 0.007805270477800108, 0.005348044594934098, 0.0051224823831129696, 0.004194900288879033, 0.03579133660942224, 0.02083133744113641, 0.017993280776203546, 0.008421659853193653, 0.022128071720770803, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03685123615821595, 0.07816672069013753, 0.058736130969533784, 0.0478199696252023, 0.0465815414029217, 0.0476378102442615, 0.047260350542952634, 0.057923978230137396, 0.10883702348898716, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044271458034328415, 0.0023096751138440563, 0.0005627357118815901, 9.999999999998899e-05, 0.0002161953399321126, 0.002509456532128418, 0.20163005059465078, 0.22006315421730438, 0.24949910433553124, 0.20974180448093216, 0.19357246900380332, 0.20492043645555158, 0.21595947853339525, 0.19602675518605805, 0.20054808885883113, 0.0445331871296436, 0.050619119130566825, 0.048170199034429206, 0.048243482169974206, 0.046534850413284756, 0.04614379639147681, 0.04975624427652603, 0.03809516337592955, 0.05596414571789521, 0.13818389599457315, 0.1337255211270374, 0.12810901886070392, 0.1453609380121208, 0.1365660439621046, 0.14135536845982954, 0.14963138758589234, 0.14078708364606496, 0.14944889797479244, 0.16648160483617225, 0.17100528790402314, 0.1731970736789068, 0.16549217755941004, 0.17306763899220423, 0.1783096752252068, 0.172434030417981, 0.17666463405149446, 0.16079160347281418, 0.12735947561176597, 0.10250613509190754, 0.11606661960765263, 0.11325213285411484, 0.12121577016861962, 0.12596174602818233, 0.11540001434318015, 0.1282096867646505, 0.10736453766578014, 0.1649913910528219, 0.1704819505656502, 0.1603726540303545, 0.16716361435549842, 0.1705090185866055, 0.1706076094913418, 0.16631934101711832, 0.16580922978691837, 0.16667625438926936, 0.14679773886916847, 0.14751757876921, 0.15299025707159453, 0.14675896989823123, 0.15541110687724047, 0.15255502114570552, 0.15335433385358843, 0.14688534881113569, 0.1730146886297511, 0.14997014908716644, 0.16685725356451642, 0.16435652561872272, 0.16002414732755332, 0.2154943854761293, 0.16222413141701997, 0.1486977788818178, 0.15917693721046655, 0.1922769574180938, 0.1545256384721737, 0.15380548114931913, 0.15181969428805075, 0.22693356604990722, 0.15186936239712756, 0.14507148376761703, 0.16290815690427185, 0.19277566180042793, 0.16008783987116026, 0.19321472911612647, 0.19170940590214436, 0.17597048608417665, 0.18883583905636203, 0.2135749380374129, 0.19842075669333048, 0.19663149495698806, 0.17889127447851516, 0.20568880668582523, 0.053461986042837584, 0.0647534141184467, 0.06723995099672009, 0.061974646641314246, 0.06608789225602396, 0.058847950907599755, 0.07532529613519179, 0.06323689857763615, 0.05077657287086479]}, "mutation_prompt": null}
{"id": "8b1c76fb-fcaf-4808-a39b-8d46799a9cbc", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.gaussian_factor = 0.2\n        self.gaussian_scale = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # Dynamic population resizing\n            if eval_count > 0.5 * self.budget:\n                self.population_size = max(5, int(0.05 * self.budget))\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                mutation_factor = self.mutation_factor * (1 - eval_count / self.budget)\n\n                mutant_vector = a + mutation_factor * (b - c)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n\n                # Adaptive Gaussian perturbation\n                gaussian_scale = self.gaussian_scale * (1 - eval_count / self.budget)\n                trial_vector += self.gaussian_factor * np.random.normal(0, gaussian_scale, self.dim)\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "A refined differential evolution algorithm with a dynamic population resizing strategy and adaptive Gaussian noise to enhance convergence speed.", "configspace": "", "generation": 5, "fitness": 0.10897400914449873, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "bf11419b-c430-4265-ad51-dc351baa7f23", "metadata": {"aucs": [0.2203384830992331, 0.2094975027116439, 0.195463824886565, 0.20844976285100725, 0.2032626205072734, 0.21379695920695851, 0.21516625477007145, 0.19209764913576044, 0.2117515272304067, 0.0007341167306600394, 0.010800201668327514, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011756584212105903, 0.0013125035049288414, 9.999999999998899e-05, 0.0014099596709762352, 9.999999999998899e-05, 0.06051034113191123, 0.0570062904101567, 0.05054259438422526, 0.05424574307233543, 0.05960451892168661, 0.05901668697901319, 0.06400783414094002, 0.05520771635333588, 0.057966419259873114, 0.04358142576738866, 0.03438564329316707, 0.045555409223551946, 0.04161699465338642, 0.04252033671560551, 0.048131620253439866, 0.04926045556584158, 0.04667807134252977, 0.04180862666467544, 0.28184898820256954, 0.20436731683676768, 0.19288003788031305, 0.20975163698792454, 0.16039159930377223, 0.20872231122415874, 0.29245283325618054, 0.19802493861565273, 0.6343169905355581, 0.08574331608757313, 0.08313642520049747, 0.10391503934400315, 0.07686896324042103, 0.07889481561454792, 0.07906896931536955, 0.11264922296426083, 0.08172280840669477, 0.11654208463983773, 0.14091584924904255, 0.19663914196305365, 0.162052814417328, 0.157471897209582, 0.1573892125142775, 0.1365150326782385, 0.13034527129111428, 0.15686044826693635, 0.1422674315764363, 0.018084496886282997, 0.0325740656946093, 0.02388468434748703, 0.03908095488507446, 0.029878181735757625, 0.02261327520195633, 0.026831342246517287, 0.028927135966975936, 0.03251116354724959, 0.01827395029096146, 0.05846593848160142, 0.04086717499722459, 0.027520323836608962, 0.05097541193459909, 0.032031531629003296, 0.035243360091636866, 0.04699680974687004, 0.04198652896856725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06866951934533316, 0.07904416246553814, 0.07595404411937978, 0.06503728368629635, 0.07428290933416903, 0.04627686320687352, 0.0556100109703499, 0.0581568467122634, 0.10521266415593455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0046309816163071504, 0.0084030916541189, 0.015095169417715604, 0.006674999676869464, 0.004961994251438728, 0.008267424569011417, 0.009634948732597293, 0.007246644539528613, 0.006817029950677678, 0.2323325387307238, 0.22565351456514227, 0.21618044836833528, 0.22964062834319443, 0.21160391851234328, 0.21281078569135037, 0.2334583607280193, 0.21463069764412956, 0.230716738115196, 0.08170606510923517, 0.0537336550349482, 0.05127257976575961, 0.07342015382671618, 0.054469298400873, 0.056841257600089956, 0.05429652098387505, 0.05889390647849502, 0.05706396788694601, 0.14336798582955668, 0.13223284901241872, 0.16194901805212536, 0.13882726199112672, 0.139016602163754, 0.13916534391273017, 0.14980134491708774, 0.12991295684861126, 0.12602112912225816, 0.18518948237941502, 0.17568096066949623, 0.18405433556133455, 0.17449127963394417, 0.17364577866149722, 0.1825230972960149, 0.17824332076006089, 0.18868768262329982, 0.17501188074172003, 0.12063021595732859, 0.10790556035802656, 0.13201123967887474, 0.125658338515093, 0.13076490700459875, 0.12514921328535022, 0.13017472661761953, 0.13548313282909763, 0.12015168775818874, 0.1549646719049641, 0.15559955485653187, 0.17081357310155476, 0.15908956173445654, 0.15897195180222967, 0.16449082290633632, 0.18176855925302404, 0.16702613194580773, 0.1739972438599776, 0.14794898429638348, 0.15732769185279705, 0.1533338689400292, 0.15678389332990594, 0.1578640762057546, 0.16118231612294365, 0.14786436208339127, 0.1533444993232802, 0.16638684988351782, 0.18164824131622948, 0.18969343149608153, 0.17758002430370345, 0.1756069421245, 0.170681792325433, 0.17130957239092326, 0.17546905563704673, 0.16821419918801117, 0.17238083425992212, 0.15745481216492663, 0.16904030768793943, 0.16624261547714325, 0.23636368405405483, 0.16552221534968903, 0.15622786124102583, 0.1757516019234654, 0.1675019234713716, 0.16232676151512204, 0.18092451954528432, 0.18555463859913124, 0.17815864025531825, 0.18683568409856555, 0.2135749380374129, 0.18699092915182614, 0.19770948814565314, 0.17816840889990293, 0.20568880668582523, 0.050095101584599955, 0.05335721700194607, 0.06784853317313477, 0.06350349049815973, 0.0699029589778506, 0.056326248612019625, 0.07532529613519179, 0.05971493384639759, 0.058873216424442765]}, "mutation_prompt": null}
{"id": "1f3e7b52-d44c-4744-9084-6e573c63c443", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85  # Slightly increased for diversity\n        self.crossover_rate = 0.9\n        self.gaussian_factor = 0.2\n        self.gaussian_scale = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.5 * self.budget:\n                self.population_size = max(5, int(0.05 * self.budget))\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                mutation_factor = self.mutation_factor * (1 - eval_count / self.budget)\n\n                # Enhanced mutation: weighted difference strategy\n                mutant_vector = a + mutation_factor * (b - c) + 0.2 * (population[np.argmin(fitness)] - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n\n                gaussian_scale = self.gaussian_scale * (1 - eval_count / self.budget)\n                trial_vector += self.gaussian_factor * np.random.normal(0, gaussian_scale, self.dim)\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "A refined differential evolution algorithm with a dynamic population resizing strategy, adaptive Gaussian noise, and enhanced mutation strategy for faster convergence.", "configspace": "", "generation": 6, "fitness": 0.12639255227877538, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.09.", "error": "", "parent_id": "8b1c76fb-fcaf-4808-a39b-8d46799a9cbc", "metadata": {"aucs": [0.2602487414644372, 0.2627439179286676, 0.25595967843096146, 0.2578973912519207, 0.24732954804823137, 0.2614821863854109, 0.24682752233967098, 0.2378477134688486, 0.2515336047581498, 0.008961298297156861, 0.010799232881817389, 0.014289810334305875, 0.015853550925846505, 0.011055309848674422, 0.025361692556106763, 0.005665349154391652, 0.023326028031137813, 0.01298092863041389, 0.06820701121905437, 0.06991209770894224, 0.0660899266275754, 0.06213995991920296, 0.07022686576909232, 0.07349127242446707, 0.07554039026904169, 0.0685947759824248, 0.07367136148664444, 0.04564052089859194, 0.04471100977626086, 0.047782178765379824, 0.05579445699994945, 0.05786306353484083, 0.046876355701002126, 0.05491422196481632, 0.055800272572963494, 0.055294112337686996, 0.3631608946735986, 0.2756226508783719, 0.26224283528227077, 0.2919590037166604, 0.35085880221629706, 0.24370269440897951, 0.31941790520763913, 0.2684175767095267, 0.25264290300664827, 0.1010709272003194, 0.10095072710332387, 0.12461042708962855, 0.10463879710941415, 0.10173940864387476, 0.0952865449922361, 0.12472590161109165, 0.10733582320107327, 0.12683508300442903, 0.16867852923852533, 0.21977426631162866, 0.18838637036096295, 0.17662584041207352, 0.18892510972277166, 0.17693700645236354, 0.1874475717838483, 0.18462815669026988, 0.17784224304736995, 0.0648981535427563, 0.047964461261277624, 0.053675834250567434, 0.05014565227637391, 0.03820849057411346, 0.06113813699784765, 0.08362217189361254, 0.07027803144899858, 0.05323471519224454, 0.0472213376752838, 0.057849581589573984, 0.07820136167827318, 0.05553119653089267, 0.07504284123790161, 0.06372761180064135, 0.06856277765185603, 0.049045745476251956, 0.04788575986154697, 0.006951557573763756, 0.008017215625790941, 0.0001508041634328272, 0.007293744340532093, 0.004389826261879337, 0.003956359478901494, 0.002579571321202123, 0.003309640817418913, 0.013258081225806406, 0.09017350001642077, 0.1194778182740498, 0.09102338295382795, 0.10148257788764681, 0.10999040041427777, 0.08006806719151338, 0.08893497992698829, 0.10964068005613825, 0.08787990451532679, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024515365581523674, 0.0304951970257874, 0.028070524581669476, 0.03166371665845269, 0.0237340644974825, 0.023841190675883972, 0.02550965951485573, 0.02632039127671648, 0.0287586805432285, 0.26698233202089205, 0.25893062068291195, 0.2584025145551305, 0.258174936432945, 0.258296183572444, 0.2515477668813615, 0.2627272103957826, 0.2561744180286716, 0.2583463413971413, 0.0615379521092162, 0.06988795029934969, 0.07392356094355823, 0.06493918246421948, 0.06572346441175958, 0.06467495139590351, 0.06687430286809615, 0.05854383537501928, 0.06605908605257538, 0.1542102016314324, 0.14281602942660798, 0.1250913630756353, 0.15123926401484244, 0.16063666665924725, 0.1455638505841802, 0.1510586017552794, 0.14709363646055718, 0.13078705613181663, 0.2006312831975724, 0.18906833333815332, 0.235125596268693, 0.18511963385585617, 0.1933794725728729, 0.1927004943059989, 0.1939103291649953, 0.1986265815392605, 0.19810461695671233, 0.14356675933783247, 0.1297343995870942, 0.13987209396851008, 0.1370460291470006, 0.14356660505990426, 0.13122520528502424, 0.14264202219214384, 0.1492677117269513, 0.1307980033888011, 0.17001997727607943, 0.1631399631006798, 0.17361429407895212, 0.18345497034698244, 0.1755685086982709, 0.17527978331291905, 0.17886165015158983, 0.2016880145396973, 0.180005299963795, 0.15161058673503613, 0.16405853573971485, 0.15437052828431863, 0.15396869775727084, 0.1575773786922715, 0.16924956237486766, 0.153105869078348, 0.16412194059752905, 0.17212072868413852, 0.18387981670627573, 0.24206885123087318, 0.23118919912350033, 0.23604404900339537, 0.2032782628055847, 0.22297476183249565, 0.15339962564087928, 0.25901626557794366, 0.16249293768805562, 0.18539773265228676, 0.2013469639529668, 0.2070939330172632, 0.20390459955044304, 0.17398269657652765, 0.1966902693132181, 0.17386147218353942, 0.18042923868041538, 0.16895152427109572, 0.18858975457338234, 0.19098518594255043, 0.17839774392183205, 0.20969469230013815, 0.2135749380374129, 0.18043616118484918, 0.20019978662526938, 0.19677649289470167, 0.20568880668582523, 0.06552646283054075, 0.06579928117093081, 0.0724040522086905, 0.062197914284750966, 0.0718664138581886, 0.07037749052445363, 0.08027831789796824, 0.06659319776175265, 0.06315953766325033]}, "mutation_prompt": null}
{"id": "8216ccf1-48d5-43ed-96ea-076e78e72c43", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.gaussian_factor = 0.2\n        self.gaussian_scale = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.5 * self.budget:\n                self.population_size = max(5, int(0.05 * self.budget))\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                mutation_factor = self.mutation_factor * (1 - eval_count / self.budget)\n\n                # Enhanced mutation: weighted difference strategy\n                mutant_vector = a + mutation_factor * (b - c) + 0.2 * (population[np.argmin(fitness)] - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Dynamic crossover rate\n                self.crossover_rate = 0.8 + 0.2 * (1 - np.exp(-(eval_count / self.budget)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n\n                gaussian_scale = self.gaussian_scale * (1 - eval_count / self.budget)\n                trial_vector += self.gaussian_factor * np.random.normal(0, gaussian_scale, self.dim)\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Improved differential evolution with dynamic crossover strategy for better exploration-exploitation balance.", "configspace": "", "generation": 7, "fitness": 0.12688426700439467, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.09.", "error": "", "parent_id": "1f3e7b52-d44c-4744-9084-6e573c63c443", "metadata": {"aucs": [0.2534682141101845, 0.24973311123714237, 0.23812461031700516, 0.25838712805161235, 0.2523087380321153, 0.25374517382376216, 0.24888532366549554, 0.24158383427236996, 0.2496797564069536, 0.016603346164764443, 0.015788874374777495, 0.01710333428529487, 0.012285984386307791, 0.015355517858456347, 0.006080504439744061, 0.008225674584002585, 0.009454002108733928, 0.006558638207745937, 0.06324842688154553, 0.06921171912945157, 0.07847702952664659, 0.07201953631695357, 0.06639492274973857, 0.06938813718268444, 0.0700813299537596, 0.06618345348061061, 0.07196362273614598, 0.04567682590004951, 0.05160364681047869, 0.04794773321999968, 0.05489957298574866, 0.05061689480409293, 0.04459446518716559, 0.055700903618238096, 0.04926611619975796, 0.05399113011563772, 0.6682186258104463, 0.27201929107804856, 0.2544422012874217, 0.210233144212446, 0.28964039446764633, 0.3167827216426208, 0.250034901963081, 0.2943367584561626, 0.2800716902376764, 0.10784031386293702, 0.10738161298459237, 0.11341602025889919, 0.08964301180257095, 0.10795655348677813, 0.1113926209044157, 0.11517337702711661, 0.09477418290908612, 0.11339891272889036, 0.19630312239118985, 0.21494383633499292, 0.18708697129062735, 0.18035162337666244, 0.2036885916782798, 0.18263237654811582, 0.18048163944426232, 0.1808093777409806, 0.18964336409347748, 0.053258067729991865, 0.05108452363589022, 0.057254137867913446, 0.04719335839716987, 0.06105950332043519, 0.04388578232280782, 0.04967359664230009, 0.051608773098261174, 0.07099070519655615, 0.053797251888400344, 0.05246275076229667, 0.047849120775945275, 0.04647859327778403, 0.06633826357451034, 0.05738211286046502, 0.06274415483954454, 0.041858344379806844, 0.05292741898045039, 0.0041197783690888334, 0.0028583943398760026, 0.003028100796111932, 0.005137070024582524, 0.007393761286224931, 0.0029295949745242744, 0.002470460691152754, 0.007551025039449488, 0.0038427410976750176, 0.10410916662689329, 0.09231389071876017, 0.09765266973517006, 0.10835108726357845, 0.08255407483550936, 0.0956706864248581, 0.08127251513072564, 0.09251311285892372, 0.07959677750043703, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02788725325166741, 0.022926874332521052, 0.02964648450076879, 0.028515658498206142, 0.026503953780581124, 0.0326443011829608, 0.028899704895124834, 0.02967426556173125, 0.02901873913640285, 0.26935042528967124, 0.2679537791232425, 0.2475965946752664, 0.2671865343483112, 0.2520703691081896, 0.2652449381347983, 0.25516639301373767, 0.24990639384375057, 0.2600226662499239, 0.08287066826491629, 0.07770206129968815, 0.07194087414083639, 0.06216387409583224, 0.06689935370066724, 0.0650908768929861, 0.06467383448234854, 0.06287824975492495, 0.0682321474472114, 0.1371397050817792, 0.15577398295129297, 0.13324388397668285, 0.13888492101475258, 0.13511880823300437, 0.13477564435023648, 0.14963138758589234, 0.14004711028798178, 0.13512086605404783, 0.2075623424469184, 0.19755120733203524, 0.19761299375413788, 0.18836707051720458, 0.203203652225749, 0.18810773651698387, 0.18978785144153565, 0.22868837500096761, 0.19655782493062102, 0.1407675945225605, 0.13883587669114006, 0.14016628918174645, 0.14739418700701756, 0.14488290720187036, 0.1338960410384623, 0.13370361766766292, 0.13970731887006949, 0.14306762896467207, 0.16600090163178538, 0.19051033399499695, 0.1759516770876386, 0.18351569099796283, 0.17829743330400638, 0.17196201958616586, 0.17414225276535766, 0.1764324729434562, 0.1812961927672604, 0.15141610334703803, 0.17595756561979903, 0.15764577649480582, 0.1546630964112654, 0.15990781124178866, 0.15552527582690523, 0.15683208281512762, 0.153705378850856, 0.19095384620690592, 0.20477596505627937, 0.22080890936612463, 0.20428536184160861, 0.21320032154720203, 0.2197789370072828, 0.23831430392694952, 0.1895854095145264, 0.24297836936675754, 0.16068665630804557, 0.2025025885642483, 0.2305991955227722, 0.22525464392887806, 0.21810336387727514, 0.20747661498902337, 0.17775521867100852, 0.1872126551807859, 0.17905166973904396, 0.18690026695261897, 0.18041906495322324, 0.19491306695223665, 0.19047281988375087, 0.18937619380259907, 0.2135749380374129, 0.17983460799514428, 0.17306794378845303, 0.18562672143027537, 0.20568880668582523, 0.06612559411680519, 0.06303776000301864, 0.07039791888548175, 0.07091636047421712, 0.06571822688710294, 0.06438057768016459, 0.07558330601036611, 0.06632190492425494, 0.06584956492340666]}, "mutation_prompt": null}
{"id": "8125700d-ec59-4704-b135-cb876d0af3a1", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.gaussian_factor = 0.2\n        self.gaussian_scale = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # Adaptive population resizing\n            if eval_count > 0.5 * self.budget:\n                new_population_size = max(5, int(0.05 * self.budget) + int((self.budget - eval_count) / 10))\n                population = population[:new_population_size]\n                fitness = fitness[:new_population_size]\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                mutation_factor = self.mutation_factor * (1 - eval_count / self.budget)\n\n                # Enhanced mutation: weighted difference strategy\n                mutant_vector = a + mutation_factor * (b - c) + 0.2 * (population[np.argmin(fitness)] - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Dynamic crossover rate\n                self.crossover_rate = 0.8 + 0.2 * (1 - np.exp(-(eval_count / self.budget)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n\n                gaussian_scale = self.gaussian_scale * (1 - eval_count / self.budget)\n                trial_vector += self.gaussian_factor * np.random.normal(0, gaussian_scale, self.dim)\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced differential evolution with adaptive population resizing for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 906 is out of bounds for axis 0 with size 900').", "error": "IndexError('index 906 is out of bounds for axis 0 with size 900')", "parent_id": "8216ccf1-48d5-43ed-96ea-076e78e72c43", "metadata": {}, "mutation_prompt": null}
{"id": "67dba6ee-5426-4265-8f09-9ea683e945b8", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.5 * self.budget:\n                self.population_size = max(5, int(0.05 * self.budget))\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Adaptive mutation factor\n                mutation_factor = self.mutation_factor * (1 - np.tanh(eval_count / self.budget))\n\n                # Enhanced mutation: weighted difference strategy\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (population[np.argmin(fitness)] - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover rate\n                self.crossover_rate = 0.7 + 0.3 * (1 - np.log(1 + eval_count / self.budget))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Adaptive mutation and crossover strategy in differential evolution to enhance convergence speed.", "configspace": "", "generation": 9, "fitness": 0.13221627076314496, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.14.", "error": "", "parent_id": "8216ccf1-48d5-43ed-96ea-076e78e72c43", "metadata": {"aucs": [0.2329838387715678, 0.24251431092801645, 0.24049455416149035, 0.23559531883050522, 0.24930664627101062, 0.2497286375184834, 0.2423902314112083, 0.21841600039881925, 0.22424885876146938, 0.007425659623090497, 0.0035767658764223054, 0.0018281965635266184, 0.005117343420342202, 0.0014073176292729306, 0.003963976224304111, 0.008885574228068793, 0.007156407207898119, 0.0023575332051792852, 0.061068899251060405, 0.07037701878151659, 0.06126507648684132, 0.07027209920374011, 0.06269823174495126, 0.06278437121955027, 0.06521360779125296, 0.06120892665268618, 0.06739677831174251, 0.045482706412147356, 0.04850867232162148, 0.04188628712390585, 0.04288278662892242, 0.04625934438766521, 0.04776783680355201, 0.050975668602515345, 0.050071263221812656, 0.05087014310777738, 0.7511235721892777, 0.7666259697346023, 0.6662569352449166, 0.766492996251691, 0.7754878315476077, 0.5203337634578076, 0.8399748705361811, 0.6691014341516632, 0.5343786909342764, 0.10122398936304833, 0.09889559321902541, 0.11493495962124611, 0.09219736874363338, 0.09452512196429141, 0.09483245816008634, 0.1094198455672124, 0.08805173547231393, 0.11107495161489755, 0.15331454195864425, 0.19776049510987737, 0.1808557721828219, 0.15989705907652274, 0.16314699909380093, 0.14806263325690083, 0.15165818026346156, 0.1511450231236593, 0.14768358048789865, 0.045003585963726445, 0.02908894666618067, 0.062261561911471475, 0.04622044174576856, 0.040586355801222274, 0.040952484949471235, 0.04039416776563631, 0.06076125289553569, 0.041448527865637685, 0.03363632851202725, 0.038601758794023056, 0.033744270133172716, 0.048628082812265716, 0.04956841792380218, 0.03428250819202494, 0.06077592822184108, 0.034577585610561457, 0.0433476691511383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004776509767329129, 9.999999999998899e-05, 9.999999999998899e-05, 0.06467473440770932, 0.10339905916826608, 0.09204604622471269, 0.07009936615093215, 0.05735202181119203, 0.07757818716617182, 0.056952193635686155, 0.07595114001003278, 0.07097329671528918, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013413891813630285, 0.01966949712803967, 0.02505940367383286, 0.02289930441186805, 0.01866186996418784, 0.019666582480683092, 0.020082407738685304, 0.016384064436564594, 0.013777317273586998, 0.24473224325924592, 0.23814319013363938, 0.23446192929256493, 0.2459535607755241, 0.23299913480592882, 0.23676851963465584, 0.2408654778083703, 0.23550344362617082, 0.23567925494642428, 0.06564523900477393, 0.0632199857572554, 0.05858821724921692, 0.0615590919637492, 0.061005171287158766, 0.062283877896368356, 0.06681300970457993, 0.0603503883710218, 0.0620670642217136, 0.14026364258183965, 0.13187795009401926, 0.1493910404911738, 0.1422003032354895, 0.1458476033626943, 0.1264096159421373, 0.14963138758589234, 0.1286411058599637, 0.12531226063586742, 0.19969110344243468, 0.1792189024660198, 0.1893911279069901, 0.17494249498983339, 0.1889848831701323, 0.18961041683829716, 0.18017273628442676, 0.19800800009454622, 0.18643796845012373, 0.11904527460735337, 0.12679866270610596, 0.13649464376412468, 0.13052682740911514, 0.1352338190135559, 0.12396697907624532, 0.12219193487703195, 0.13706161102700842, 0.1245392055919623, 0.17817575736513735, 0.1814288616829306, 0.173864922151735, 0.18254816696104603, 0.16199497768529636, 0.17587773564181175, 0.17305497839083095, 0.17707797355957022, 0.16844758621041056, 0.1521258829214368, 0.1547883985574393, 0.1616162725809227, 0.15325712142565406, 0.15988898867476686, 0.15732427798333082, 0.1563613707230681, 0.164864963386407, 0.16799312470318095, 0.15207533812417784, 0.17938020422240264, 0.16976475756774712, 0.20513116878062831, 0.15654978375344997, 0.1444122616699911, 0.19945422479898323, 0.15102936315914994, 0.17406712116765244, 0.17214837567818808, 0.150856422941539, 0.1962866793537682, 0.16132695156296029, 0.16460097770801219, 0.15268824579467943, 0.1609143438768892, 0.17507816171067392, 0.15912041445455893, 0.18795941143215256, 0.18805785624126925, 0.18308694086990174, 0.1878370842381918, 0.2135749380374129, 0.17979199854025496, 0.17644177304005493, 0.1893797993206583, 0.20568880668582523, 0.0536031824074642, 0.0580054440604334, 0.07422101964791328, 0.06296898916871485, 0.06840414660273741, 0.06245460834050265, 0.07845943582746784, 0.0584962579535071, 0.05433630394646205]}, "mutation_prompt": null}
{"id": "c5b72c2b-cae2-4e81-88a7-9d62a943b669", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        gradient_weight = 0.05  # New parameter for gradient-inspired mutation\n\n        while eval_count < self.budget:\n            if eval_count > 0.5 * self.budget:\n                self.population_size = max(5, int(0.05 * self.budget))\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            # Calculate a pseudo-gradient\n            pseudo_gradient = np.zeros(self.dim)\n            for i in range(self.population_size):\n                pseudo_gradient += population[i] - population[np.argmin(fitness)]\n            pseudo_gradient /= self.population_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Adaptive mutation factor\n                mutation_factor = self.mutation_factor * (1 - np.tanh(eval_count / self.budget))\n\n                # Enhanced mutation: weighted difference with gradient-inspired component\n                mutant_vector = a + mutation_factor * (b - c) + gradient_weight * pseudo_gradient\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover rate\n                self.crossover_rate = 0.7 + 0.3 * (1 - np.log(1 + eval_count / self.budget))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Population and Gradient-Inspired Mutation for Faster Convergence.", "configspace": "", "generation": 10, "fitness": 0.10708212000715847, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.09.", "error": "", "parent_id": "67dba6ee-5426-4265-8f09-9ea683e945b8", "metadata": {"aucs": [0.21812433387826202, 0.21387354951140358, 0.20296580107587414, 0.1975470480570629, 0.20353093783107723, 0.19141582462175133, 0.2170862719993698, 0.1881556879397993, 0.19194098630623058, 9.999999999998899e-05, 0.0005548003880107011, 9.999999999998899e-05, 0.0011570169886343518, 9.999999999998899e-05, 0.0018171182168141842, 9.999999999998899e-05, 0.0005358461695356143, 9.999999999998899e-05, 0.05594618159022069, 0.05665814564085181, 0.056091794590243826, 0.0567322247699964, 0.05180310532872079, 0.05074045420916351, 0.05477661036664416, 0.05496859462735282, 0.05154789392072512, 0.03981449873260878, 0.038033264030378766, 0.04305870398832634, 0.037814691280276036, 0.04024390736261152, 0.0341936428065408, 0.043932703947068164, 0.045859231368789, 0.03653878650732245, 0.1637222966670312, 0.5923024420535066, 0.14256274224745136, 0.40883567197218373, 0.16261441393099885, 0.5472300330786015, 0.4010709543495241, 0.16201089953958803, 0.1761541801668698, 0.08124506005890375, 0.08347603606308363, 0.10428850127665579, 0.07792364586918643, 0.08714933567874528, 0.053626540602714545, 0.10595895962549129, 0.07333495716898797, 0.11153940021840225, 0.13703279608234242, 0.19308637766117165, 0.15209311801028047, 0.15753855116136217, 0.14809573521647468, 0.14693264468955491, 0.12048875180707941, 0.14678350994008438, 0.13765493239466597, 0.026853707871216104, 0.017971262085120343, 0.06512293209793063, 0.045629280263281724, 0.01780312283127483, 0.0305985409755527, 0.028080210777980064, 0.027384415331552336, 0.023866148748926896, 0.012105084235174424, 0.019633076373603897, 0.01130844970612066, 0.014647454823241257, 0.04064991134836782, 0.01119665663804048, 0.029973437788452628, 0.021774798612297475, 0.03480632378789472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05193679797985784, 0.07452556710794922, 0.05411619529661149, 0.06071188033028829, 0.04601404170735335, 0.04929433529389082, 0.08280650239642873, 0.1330893670777834, 0.06611388701524479, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006103178333655923, 0.003560018899740447, 0.003923278416575693, 0.005957058485082101, 0.0052965389429520116, 0.011483090447178657, 0.007479706397337527, 0.013659825475663134, 0.008405513722918423, 0.26081698119223107, 0.23055937983007968, 0.2163790840175639, 0.22068278881224968, 0.21309791900066655, 0.2153373500160196, 0.21694488988282723, 0.20850626779629922, 0.21125126934145133, 0.04942340588073946, 0.049649948617159656, 0.0528215165297512, 0.05363090660777958, 0.04953368711144579, 0.055228574218096016, 0.050304752837252664, 0.07504649869589297, 0.06841370401456348, 0.13709410100555053, 0.1286601126451924, 0.14312778221839695, 0.14119357397826227, 0.1356312451250713, 0.1756773817081121, 0.14963138758589234, 0.1320787869764205, 0.1325855617813071, 0.16675618264366399, 0.17754177601752796, 0.1728253055278257, 0.16746837782667567, 0.17647284465854973, 0.16841416424596267, 0.17109544161936352, 0.17850094551218865, 0.16239418967721408, 0.11163806473180615, 0.11281904090915418, 0.11642839048042353, 0.11302274758385233, 0.1278420424319383, 0.12344639475788843, 0.11349746266626515, 0.12911301128523978, 0.12297728032628019, 0.15186240010151375, 0.16377992089159066, 0.16452551314407537, 0.17106045064437037, 0.15971602793039563, 0.1683938823123311, 0.18331439973478647, 0.16976206860984966, 0.16113986842030303, 0.14852109123154533, 0.15158546407565188, 0.15323650258694765, 0.15456446487902342, 0.15261022680681258, 0.15573244476815107, 0.150624025857656, 0.1484220537005616, 0.16415027376340208, 0.15652058041247707, 0.2030571168037152, 0.16496502936332058, 0.16206890735951618, 0.14962760956364674, 0.1351422995889996, 0.14928106323694623, 0.14204776059118485, 0.1594422072595315, 0.19088551964863687, 0.18782867230552291, 0.1505776003414383, 0.16361865020624677, 0.15266900312233034, 0.127416207082797, 0.17758585328368703, 0.1652717265356809, 0.16053511166413792, 0.17850049001121204, 0.1840951386782479, 0.19553902011522806, 0.1884900225306858, 0.2135749380374129, 0.17506205955709297, 0.18140448468521786, 0.17850312428081616, 0.2083768185103212, 0.058666531708989944, 0.05767078381332724, 0.0669044286690087, 0.056046387437376666, 0.06433464056250593, 0.05383228976260379, 0.07532529613519179, 0.06646083049945606, 0.05145237518950907]}, "mutation_prompt": null}
{"id": "bad18256-1906-4e8c-a9f8-11452a12f56e", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.5 * self.budget:\n                self.population_size = max(5, int(0.05 * self.budget))\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            population_mean = np.mean(population, axis=0)\n            diversity = np.mean(np.linalg.norm(population - population_mean, axis=1))\n            dynamic_mutation_factor = self.mutation_factor + 0.1 * diversity\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutant_vector = a + dynamic_mutation_factor * (b - c) + 0.15 * (population[np.argmin(fitness)] - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                self.crossover_rate = 0.7 + 0.3 * (1 - np.log(1 + eval_count / self.budget))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Integrate a dynamic adjustment of mutation factor and crossover rate based on population diversity to enhance convergence.", "configspace": "", "generation": 11, "fitness": 0.11669168474774769, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.17.", "error": "", "parent_id": "67dba6ee-5426-4265-8f09-9ea683e945b8", "metadata": {"aucs": [0.16924458138949228, 0.17726726267443715, 0.14585057116380507, 0.17271115616887545, 0.1792782392485418, 0.164260141439052, 0.17401499090519978, 0.15612064914320578, 0.17800456201814818, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03590484224774959, 0.05101229941853469, 0.03486398972425908, 0.03449583315180493, 0.044025641914283375, 0.03697788230551691, 0.039484563719150545, 0.04115109839674247, 0.039318873745223026, 0.023404467908213378, 0.01971679840103313, 0.028768542186533907, 0.02244845995570177, 0.01279545972207985, 0.01682583931673376, 0.03696417075239278, 0.014357626031805237, 0.029763828138413717, 0.901082580591844, 0.9058091022150344, 0.8519139308258994, 0.8508443129358906, 0.8638766030038084, 0.8951087589714374, 0.898703280387437, 0.8753264072427904, 0.883830806156208, 0.07511263165365967, 0.07510940173832203, 0.10921717574779155, 0.06982635771046664, 0.08705093039155987, 0.0463897687037923, 0.09472457566024695, 0.06353802991894153, 0.08919533621105913, 0.11547029897669658, 0.19308637766117165, 0.1481850439168273, 0.09102516335424227, 0.08744527801275981, 0.1058108274250048, 0.112702794549845, 0.1070724909726396, 0.10239867355929744, 9.999999999998899e-05, 9.999999999998899e-05, 0.00037451257753706724, 9.999999999998899e-05, 0.002483436907158243, 9.999999999998899e-05, 9.999999999998899e-05, 0.0028111494521178004, 9.999999999998899e-05, 0.007990352002493872, 0.008746090845098697, 0.028335185422357467, 9.999999999998899e-05, 0.035362057023575866, 0.020719533882599395, 0.017993280776203546, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.047700036849285254, 0.06535045920481664, 0.04490689360873623, 0.05175357493830779, 0.04065497748008384, 0.02931313263695412, 0.021453254217456585, 0.0395769247199218, 0.036037900893695185, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00020645675348318626, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004603621191490159, 0.0014056088507974351, 9.999999999998899e-05, 0.2003844423089155, 0.18487064596046288, 0.17783153199113855, 0.2055799784281095, 0.17403772026072928, 0.19226744717352073, 0.19726210125892918, 0.1579461784695173, 0.1891480374906228, 0.04543849940479394, 0.04031368233025301, 0.04080479699968853, 0.049440511170616985, 0.03310519123318734, 0.03547506917252852, 0.036585788746268944, 0.030803937208197518, 0.04639795618279985, 0.14538098878151196, 0.13797322748901975, 0.13649773102020935, 0.1407260942407531, 0.15379084492014095, 0.1354468678483035, 0.14963138758589234, 0.1473897804203883, 0.1264093266816444, 0.1602710620254989, 0.1572624034149689, 0.16814906059237933, 0.14861417032694657, 0.1515497148076549, 0.161856142914947, 0.14815387424156834, 0.18339018472704316, 0.1458786885420894, 0.09387828833418266, 0.08372356878379328, 0.11109491287868445, 0.09581796457008929, 0.12092313537362531, 0.10009679980249697, 0.09514877733001192, 0.1237427242099084, 0.0958185030746741, 0.15663743914005102, 0.1343407785539108, 0.1394860778378728, 0.14040474191590024, 0.13536808326635985, 0.14950702032209284, 0.14466922882037303, 0.14187582547175426, 0.1645820737134891, 0.14149802518428145, 0.1461235986362508, 0.14006577975982915, 0.13676508515206698, 0.13279773790427807, 0.14152725567514868, 0.13325636161381682, 0.1322631973657521, 0.16207881422481074, 0.1405545130344228, 0.16679477618376493, 0.1593083731255257, 0.155133632296938, 0.12578657517082525, 0.14357878107235322, 0.1517185852075319, 0.14287353575095152, 0.1614368110645884, 0.11787126229461642, 0.11829958490745507, 0.12489943867061737, 0.11932095526103692, 0.0993215553912109, 0.1173186546462004, 0.16518563215413418, 0.1649445058641673, 0.145945139641929, 0.1797932291031591, 0.1840951386782479, 0.1832185616814942, 0.18846027178360136, 0.2135749380374129, 0.1759653254302158, 0.1780178075528447, 0.17852656987722804, 0.20568880668582523, 0.038588128696308344, 0.0509774156488203, 0.06585155299632517, 0.0496458412526628, 0.058815507864153016, 0.04664249445781443, 0.07532529613519179, 0.05593665332742259, 0.03970669843632346]}, "mutation_prompt": null}
{"id": "329805b5-d555-4d6b-942a-322b33a7a594", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.4 * self.budget:  # Adjusted threshold for population resizing\n                new_size = max(5, int(self.population_size * 0.8))  # Dynamic population resizing\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Dynamic mutation factor based on fitness variance\n                mutation_factor = self.mutation_factor * (1 - np.std(fitness) / np.mean(fitness))\n\n                # Enhanced mutation: weighted difference strategy\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover rate\n                self.crossover_rate = 0.7 + 0.3 * (1 - np.log(1 + eval_count / self.budget))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with a self-adaptive population size and dynamic exploration strategy to improve convergence.", "configspace": "", "generation": 12, "fitness": 0.132785417623261, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.13.", "error": "", "parent_id": "67dba6ee-5426-4265-8f09-9ea683e945b8", "metadata": {"aucs": [0.23255427389227756, 0.24334905025488685, 0.22263279089254207, 0.2587204619125838, 0.2880939969260964, 0.22896494049236404, 0.19526907042215746, 0.1983626478889159, 0.22783504750789085, 0.03686891516595081, 0.03247049879318298, 0.029812002109692926, 0.03873797877477447, 0.022524183550066468, 0.03179810774513481, 0.02117130977807935, 0.015209807180154522, 0.02880793686309857, 0.04915778814200544, 0.04967438749587205, 0.044285962013744906, 0.06726344170690268, 0.07045552772265018, 0.06845690400706428, 0.06828514915915262, 0.06320864987143504, 0.06498803973395573, 0.033414135900348474, 0.015810292375898816, 0.035380200050510235, 0.06149975123146956, 0.05344145159594915, 0.05408845054541411, 0.06613558190450619, 0.05131722768699287, 0.05719758852897905, 0.4153183697619929, 0.5416020956932386, 0.4332188124313574, 0.7675166420250636, 0.7425154224150321, 0.8082787203833012, 0.8391735547331511, 0.7061060733883482, 0.596532996178635, 0.1218228199036212, 0.11941424834023906, 0.1278067633129596, 0.0902604259151496, 0.09966608798937271, 0.07441067565318626, 0.116096961249754, 0.13299066764839718, 0.14928032414131398, 0.16735438023980043, 0.19487298412420373, 0.1830103259764585, 0.19055541229014372, 0.18938258347458414, 0.19344221730731537, 0.21069722173907024, 0.21167537268206638, 0.1983141405813289, 0.06778035822184447, 0.060819130851590075, 0.0751725523728306, 0.058439099564757124, 0.029312881263074075, 0.023420033714249278, 0.071719235698388, 0.07799572368196384, 0.07159218559351688, 0.08642006882188902, 0.07241916393743997, 0.06744461563467552, 0.0903103923183246, 0.07879134350124295, 0.08760815116357878, 0.0835056748660602, 0.07811983881205398, 0.07872538527838047, 0.0013391108520827144, 0.01172283507652394, 0.0027990041493378692, 0.01031540223831251, 0.0015611465351197396, 0.0016235301119257306, 0.004982957674858568, 9.999999999998899e-05, 9.999999999998899e-05, 0.05200976133361601, 0.06761801265169876, 0.04873506658001314, 0.0728047652157231, 0.06349977647785776, 0.04931789033189471, 0.054492710517616616, 0.0807740066596302, 0.057047605585381134, 0.008013618310321768, 0.002071095439526438, 9.999999999998899e-05, 0.011969889699374847, 0.013396068319961207, 0.00021484939424809557, 0.01455816206846905, 0.006677058556399218, 0.010164340282622142, 0.03170760549504992, 0.04591512945369325, 0.028896211851679232, 0.022513072629472997, 0.01829761326475632, 0.0172166548506113, 0.013167368811298763, 0.016719297037996128, 0.014341803361544558, 0.21585013669764752, 0.2154073020388323, 0.20300426675777383, 0.22893242683523374, 0.20310285856503774, 0.21277367697067706, 0.233289492725416, 0.2226764507940735, 0.23217009217194728, 0.0597623092763051, 0.0539881561756842, 0.06028164599439356, 0.059490881087286285, 0.062392583978227, 0.056345606757741584, 0.06571234206484133, 0.0699701458435169, 0.06521396339908114, 0.14059508566223577, 0.12046838190039966, 0.13479452966880712, 0.1518777853249731, 0.13511880823300437, 0.15298453157058012, 0.14979137870529613, 0.13719116588477986, 0.13667727672208407, 0.1602710620254989, 0.16086668218375544, 0.17194045638989575, 0.17375559765234871, 0.18611009919609467, 0.1862137145348184, 0.164960520647368, 0.17979310802614512, 0.16595802138029736, 0.1594907934158042, 0.13117091180301432, 0.1368909168808624, 0.14668942951494868, 0.14070137854097087, 0.14373323359077717, 0.10810691222387303, 0.13493851049292338, 0.12391847563964675, 0.1626640598131791, 0.1559039450133236, 0.15449318106236787, 0.16405634056552731, 0.17498553604857026, 0.1662004891636809, 0.15609049045701195, 0.1588421653227835, 0.1639693606442839, 0.15611713464623356, 0.15524395215070474, 0.1609828398888925, 0.16477637148791568, 0.1788542099939494, 0.16295497996434882, 0.1608438031363667, 0.16832570558061344, 0.1728886201587646, 0.14929481700584424, 0.16842051473780995, 0.16420088751467066, 0.2089267778882271, 0.17710659694900355, 0.1699328784327092, 0.13451117015140313, 0.15220742257921915, 0.1649841212416504, 0.13634775453708137, 0.14362800318022473, 0.14007444746923414, 0.14827768961220733, 0.1349197732873758, 0.14183904009379678, 0.16410868491737418, 0.20368770712634, 0.1559331806014137, 0.1785541746889283, 0.18680392802981238, 0.18423897062525585, 0.18702225617821955, 0.2135749380374129, 0.17182232415925813, 0.1852710751412261, 0.1838509374677868, 0.20568880668582523, 0.05278255078281724, 0.05467730074332389, 0.0670681418385799, 0.06759610116620607, 0.06534062410647135, 0.060472659122047134, 0.07540961224102105, 0.06381860532956218, 0.06075033639533545]}, "mutation_prompt": null}
{"id": "18543b27-9df1-4d6f-88d5-8b9bdbfb771a", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.4 * self.budget:  # Adjusted threshold for population resizing\n                new_size = max(5, int(self.population_size * 0.8))  # Dynamic population resizing\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Adaptive mutation factor based on fitness variance\n                mutation_factor = self.mutation_factor * (1 - np.std(fitness) / np.mean(fitness + 1e-8))\n\n                # Enhanced mutation: weighted difference strategy\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover rate\n                self.crossover_rate = 0.7 + 0.3 * (1 - np.log(1 + eval_count / self.budget))\n\n                # Maintain diversity by probabilistically replacing a trial vector\n                if np.random.rand() < 0.05:\n                    trial_vector = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                else:\n                    trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with adaptive mutation strategy and population diversity preservation for improved convergence.", "configspace": "", "generation": 13, "fitness": 0.1315361533413072, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.13.", "error": "", "parent_id": "329805b5-d555-4d6b-942a-322b33a7a594", "metadata": {"aucs": [0.20756412853764883, 0.22685736927015154, 0.18619144906108775, 0.24081101821620354, 0.21817899049588074, 0.20993617847403945, 0.204814189508155, 0.18432921933777602, 0.181538458188522, 0.011266516832393214, 0.016801576998654477, 0.019745934962657308, 0.019083607433759253, 0.025802460810551375, 0.019193707576834695, 0.010118692943349772, 0.06038609117342619, 0.021391335074483875, 0.04370020088023485, 0.05555384787555373, 0.038599085749648654, 0.0819700013666097, 0.0655749376001511, 0.08034417431460383, 0.0786618296174525, 0.05898705820095851, 0.0641833243009221, 0.028865287081859425, 0.0206824794133057, 0.03522414566297283, 0.05785362712121056, 0.05682657661609736, 0.0708053490665983, 0.057998831625190705, 0.06138171983354079, 0.049925648224047325, 0.3657429764928666, 0.4169655346690604, 0.4407913583602834, 0.7561035031415235, 0.7705591204766082, 0.6773202681389423, 0.5224556591316171, 0.7668955217899596, 0.7996310638806219, 0.10272290109790361, 0.08639215839602443, 0.10857335619288166, 0.10300690696790493, 0.07275293748961198, 0.0952976944034486, 0.12619836113012206, 0.1462327235151326, 0.13788633556301122, 0.17178228025528608, 0.26672198770189304, 0.17024514216440334, 0.24564899652474548, 0.16475164863003033, 0.19906465324028622, 0.19578056421777323, 0.2019274972214654, 0.21294281207382781, 0.08587914363238325, 0.0608006063078157, 0.06650203194985083, 0.010605840379801723, 0.008963266570021888, 0.03436192500826707, 0.061076924837144, 0.06747637271337792, 0.05873639444845902, 0.0799737385717959, 0.07126324544175078, 0.07505367561077525, 0.0708072992507014, 0.0779652095311496, 0.09151056217940201, 0.0771998783592035, 0.07312471093361639, 0.08038948069471386, 0.006170133140295353, 0.0035142984329479265, 0.01332961883817807, 0.006302443332066088, 9.999999999998899e-05, 0.00391051846286572, 9.999999999998899e-05, 0.0002792130138928872, 9.999999999998899e-05, 0.03972747576420166, 0.08260044198319816, 0.068188063100723, 0.059318502454020705, 0.07910425910758312, 0.07648328070366683, 0.0463639893137352, 0.051509259379193595, 0.05433225662852004, 0.010358490449384972, 9.999999999998899e-05, 0.01955006054408892, 0.03323663514934472, 9.999999999998899e-05, 0.0005301316532102529, 0.014694679812589984, 0.02135955059481698, 0.015661815968116777, 0.023476191592026963, 0.021679370067761772, 0.01840882663842036, 0.017746486247507187, 0.015275167168215198, 0.019729461360302958, 0.022261382977303623, 0.0019492261310428693, 0.005891615933813821, 0.2125062037000428, 0.20477447363610868, 0.1981201730007388, 0.2445814878777962, 0.19730153602597844, 0.2101779573404272, 0.23606983890833522, 0.2546061443282994, 0.22638433560147142, 0.05839081748528785, 0.052660344254547686, 0.05622952735059539, 0.08045838724351584, 0.06313056013319696, 0.0553837216892189, 0.07112523166503704, 0.055747625844958404, 0.07135838741170575, 0.18891971307408972, 0.13005219420555458, 0.15029338839232165, 0.15828819760764656, 0.15722042627713217, 0.15311466982981403, 0.14963138758589234, 0.1442412584646705, 0.14657949757600341, 0.16780741723269565, 0.1554541696175793, 0.17684766051195333, 0.19102233133489654, 0.17805352669952101, 0.18973850540162107, 0.17347742799665888, 0.18208288788840699, 0.1618160663651642, 0.12944374921669022, 0.13687010189531812, 0.15038780465988344, 0.1287016528059658, 0.1397982527490923, 0.14623954901695246, 0.11596464339138035, 0.13010713062914825, 0.11986512592966503, 0.14341818038055276, 0.14545458882966322, 0.14360733763605715, 0.16212510452232087, 0.17036905064064323, 0.1564501918229123, 0.18192851765518758, 0.1653738766007602, 0.16175902829045097, 0.1563541050754328, 0.16695516927161103, 0.17217418969425458, 0.17444242107058505, 0.17154146230753198, 0.17080716476016966, 0.15935054014199923, 0.16654855724951834, 0.1711303043324851, 0.16930433747955598, 0.16679477618376493, 0.20130767944620098, 0.2308466239371414, 0.14723351398072315, 0.2546367216528277, 0.15253316196741185, 0.19388080213003145, 0.19568092301788087, 0.1466461698629068, 0.14841843521068132, 0.14376577638498633, 0.19027235861125058, 0.15369218638845084, 0.1263600062042115, 0.17155805615363806, 0.16625179207091823, 0.14020817227263527, 0.18007076142171696, 0.1860979185730397, 0.18113442593380213, 0.19301228924868352, 0.2135749380374129, 0.18032214575229844, 0.1921353846066426, 0.17890541231245694, 0.20568880668582523, 0.05132548745418808, 0.06471143231007459, 0.06812389615432224, 0.059501308662632035, 0.06571800699747288, 0.05465522578674731, 0.07532529613519179, 0.06031423769747002, 0.06030921018501345]}, "mutation_prompt": null}
{"id": "2286fdfd-70b2-48e9-a51a-1ff1edf992c1", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.4 * self.budget:\n                new_size = max(5, int(self.population_size * 0.85))  # Slightly different resizing factor\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Stochastic approximation for mutation factor\n                mutation_factor = self.mutation_factor * (1 - np.std(fitness) / (np.mean(fitness) + 1e-6)) + np.random.normal(0, 0.02)\n\n                # Enhanced mutation: weighted difference strategy\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover rate\n                self.crossover_rate = 0.7 + 0.3 * (1 - np.log(1 + eval_count / self.budget))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with stochastic approximation for mutation scaling and adaptive learning based on fitness diversity.", "configspace": "", "generation": 14, "fitness": 0.12509311879448035, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.13.", "error": "", "parent_id": "329805b5-d555-4d6b-942a-322b33a7a594", "metadata": {"aucs": [0.23270008363574524, 0.20137913845619781, 0.18674319041140452, 0.19838414801297388, 0.2001190131677949, 0.20068375143096195, 0.17979496468943945, 0.17562232716684645, 0.17242008549617205, 0.010926084229829214, 0.009346029814239265, 0.012144733289134124, 0.009884523457762362, 0.015272257450612003, 0.010741477409339839, 0.003562309676197084, 0.008838459922417718, 0.009243015008405742, 0.03712285460586917, 0.04552381682665929, 0.032069145163095114, 0.05814567039443208, 0.06404229377721427, 0.05712114411516811, 0.056984849831173245, 0.06017576136721159, 0.0668767358509953, 0.022932461233801216, 0.017455223644898044, 0.02918058365201681, 0.05508230469909703, 0.06362472962513532, 0.050857835991311884, 0.057581439879923146, 0.05367161557839428, 0.05811318804014809, 0.3537634530753483, 0.4747949467165298, 0.4314931096002621, 0.6410319207425303, 0.7279630661240429, 0.8717608682010403, 0.6477878477315118, 0.7616144353894293, 0.7007482516055262, 0.11312114709056786, 0.10323446282036841, 0.1089080529650257, 0.08003284796501464, 0.08090854190722896, 0.09513312262505291, 0.13645580981558925, 0.09133828385163656, 0.11961497532729648, 0.17795265394577287, 0.19467619780540213, 0.16589349922192465, 0.17248450892448997, 0.198726684085324, 0.1781418179024742, 0.17421896031426842, 0.21460454828594855, 0.17708600885712933, 0.0635863669235105, 0.07394537764850062, 0.07191453739650644, 0.047924495306299275, 0.0219249801532998, 0.034163584962424776, 0.07291455201682384, 0.05046551747977879, 0.052966354240758795, 0.07980691809712204, 0.06549044467377385, 0.06369447320872657, 0.06122388352726471, 0.07132374317064316, 0.0733895852988744, 0.08614401638664715, 0.0777887213660502, 0.06806133729588348, 9.999999999998899e-05, 0.00041174175317204575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001365492694257786, 0.0012302923547198308, 0.003324181088589784, 9.999999999998899e-05, 0.04136955038710988, 0.06877995013507465, 0.054025034317893406, 0.06345072621267278, 0.07051681224124462, 0.04558088684926975, 0.046472558140774556, 0.06370691548103768, 0.03924634160155316, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013429783801817585, 0.018137697448485368, 0.017078239613864787, 0.01937662110151195, 0.012090133158076388, 0.014002065025867205, 0.014636136738749195, 0.02414625763145939, 0.021997474224903835, 0.2003844423089155, 0.18724579229236227, 0.17956563224327582, 0.21025109307475742, 0.2079357251824957, 0.19499325134140366, 0.220613797517352, 0.19080118873222895, 0.20556630240696971, 0.054476849160535856, 0.05984147579632737, 0.06157192081505658, 0.0660156088973437, 0.05626724706593922, 0.05131918682104675, 0.06650113562291793, 0.05992227043013865, 0.08058074404928506, 0.13908344909317294, 0.12363999038016482, 0.15502258359882448, 0.1613246140656811, 0.14200879082096873, 0.12586784861543587, 0.14963138758589234, 0.16921300739085254, 0.12696116547146719, 0.1602710620254989, 0.15059180881326262, 0.16814906059237933, 0.17588174411442536, 0.17323584553509352, 0.1746007084209088, 0.16110839233412266, 0.17688420377742275, 0.1865718447191378, 0.14187290398271346, 0.13267977256753272, 0.14100599077534715, 0.11824698437082148, 0.12624604175325294, 0.12435361181762705, 0.10485936323867318, 0.13778615127635496, 0.13169616341597634, 0.13816324846732586, 0.15105250039140905, 0.14249695114384053, 0.15742261915457822, 0.18654687671830794, 0.1610317610233003, 0.15842135194304408, 0.15221162729223436, 0.16161759336265624, 0.14927510605146932, 0.15682933131020438, 0.16327198540850496, 0.16017005930657402, 0.1654820010778505, 0.1810833692204361, 0.16265928820282494, 0.1581742391876949, 0.17358004495725, 0.15592067040300717, 0.19374159435805993, 0.16129065902163076, 0.16753458361756035, 0.2133863920663861, 0.1611130088186712, 0.1358025117226318, 0.15314114386214928, 0.15960607695307027, 0.13576462326937822, 0.13020496244930324, 0.13976033108000518, 0.17831289040764353, 0.15257105520981296, 0.13126761998473435, 0.1609143438768892, 0.16713669844284273, 0.17064814216995872, 0.17417336984698284, 0.1845311761305224, 0.19150747797711465, 0.18855461155617625, 0.2135749380374129, 0.17730687649897192, 0.173986939601939, 0.1981165877906539, 0.20568880668582523, 0.0494449816434841, 0.052780486461791565, 0.06585155299632517, 0.05668445397194588, 0.059837884528427865, 0.052522600976621425, 0.07532529613519179, 0.057394879195763915, 0.05221427227424791]}, "mutation_prompt": null}
{"id": "3d27d4ad-3c2c-4aac-b320-7af6963b9823", "solution": "import numpy as np\n\nclass ImprovedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, lam=1.5):\n        sigma = (np.math.gamma(1 + lam) * np.sin(np.pi * lam / 2) / (np.math.gamma((1 + lam) / 2) * lam * 2 ** ((lam - 1) / 2))) ** (1 / lam)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / abs(v) ** (1 / lam)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.4 * self.budget:\n                new_size = max(5, int(self.population_size * 0.8))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor = self.mutation_factor * (1 - np.std(fitness) / np.mean(fitness))\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                if np.random.rand() < 0.5:  # Incorporate Lévy flights occasionally\n                    mutant_vector += self.levy_flight()\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                self.crossover_rate = 0.7 + 0.3 * (1 - np.log(1 + eval_count / self.budget))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "ImprovedDifferentialEvolution", "description": "Adaptive Enhanced Differential Evolution with Lévy Flight and Multi-Scale Mutation Strategies for improved exploration and convergence.", "configspace": "", "generation": 15, "fitness": 0.13233923078474372, "feedback": "The algorithm ImprovedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.14.", "error": "", "parent_id": "329805b5-d555-4d6b-942a-322b33a7a594", "metadata": {"aucs": [0.23745610218830226, 0.2046092394389022, 0.26403360025714595, 0.21408828745031616, 0.19989247264843568, 0.21180233435727192, 0.20841389084517437, 0.18572518608933009, 0.18802160733294804, 0.018618095348178376, 0.0010410552190350808, 0.02915174025424183, 0.016595604978909995, 0.0032128803333191236, 0.02237803456854126, 0.019237351526715463, 0.013983367504102562, 0.020014540133932335, 0.04648223299391263, 0.04933066519613294, 0.03899622642228373, 0.051583808171657974, 0.05968884552886444, 0.06743534463705858, 0.05621435724735968, 0.05740630246787659, 0.05961924221649928, 0.03127957283144445, 0.019353459447048804, 0.03236392597773663, 0.04959761056494427, 0.04048705955383103, 0.05421498460420371, 0.05595289549022475, 0.05848727265255094, 0.052597882990217615, 0.6431713289276628, 0.5579304685950676, 0.6761181043920461, 0.6833651254734978, 0.8487432587881947, 0.8103253609919115, 0.8012813336843899, 0.8229926118001817, 0.6996817096416726, 0.09525532592750408, 0.10525119573884512, 0.1187638138120517, 0.09878415536412777, 0.09156515396969411, 0.08630300048576212, 0.11943992228771949, 0.12196848609991684, 0.12454296429911793, 0.15453925648236055, 0.19308637766117165, 0.1702329558132829, 0.16368477764402978, 0.17865508355103998, 0.17266669187177996, 0.18284805781545188, 0.1874875282991073, 0.1828281211463647, 0.05748542466518336, 0.04909032569782068, 0.08380136810991112, 0.007207611443079132, 0.02118756432406932, 0.06307419275867321, 0.05390924388864382, 0.04520695212274983, 0.05043093280172217, 0.04940969837677456, 0.06340330479677414, 0.05827157119763082, 0.06198734427245878, 0.06695625867143717, 0.05456699768116524, 0.06861451495679372, 0.05559845780106698, 0.07094308733769361, 0.003515291221897865, 0.0001349352187699493, 9.999999999998899e-05, 9.999999999998899e-05, 0.011472441306286996, 0.0009171281967086387, 0.004106568516580089, 0.00020900627258446658, 0.006137156566296986, 0.049765393929761204, 0.1066282958383532, 0.06281300582566307, 0.08252013438240646, 0.06603697053244884, 0.03865287464631051, 0.060380205364705786, 0.04991591195385936, 0.047318473805926575, 9.999999999998899e-05, 9.999999999998899e-05, 0.00980198293271528, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001025504475778538, 0.012206192213902956, 0.022005493992505176, 0.018676826240631605, 0.014843314386207007, 0.010506614672395331, 0.01136400093672818, 0.020600766234332157, 0.021760678787990373, 0.01681516705788655, 0.01729254569141181, 0.22252722201789255, 0.2071784969594489, 0.19936235447167527, 0.2279115722127223, 0.20797679024554006, 0.20794646447168041, 0.2464615309126048, 0.21498566626822802, 0.22559183133494876, 0.04995607416863146, 0.050004113712003195, 0.04731198688114213, 0.05431600542955095, 0.053330867892954825, 0.05636847755475227, 0.0658890154863182, 0.07466029956978149, 0.06737985404268709, 0.13727203064625937, 0.13120164452782357, 0.13524996958670854, 0.15780064757054024, 0.1679498083005374, 0.136090101007717, 0.15021010748825425, 0.1768383009608837, 0.1408483860147488, 0.17654906340361465, 0.15378577005338956, 0.17209683179309665, 0.17319738252317451, 0.16951130073401632, 0.17381558131406816, 0.16702756440707867, 0.18066387248272076, 0.16533402500257832, 0.14020294595411853, 0.1306355098895816, 0.13318948284922993, 0.13445201412206664, 0.13542754856110584, 0.12487501971741743, 0.11704316484221111, 0.12791966143686573, 0.12883143814993836, 0.14507108671363345, 0.13788761354497603, 0.15692883875806563, 0.1679684501162717, 0.16245905625064427, 0.17194331785641948, 0.15770765645653861, 0.16337702072044136, 0.16354193551210006, 0.14919841610849238, 0.1585503079360766, 0.1700893290854265, 0.16059382275276024, 0.16092526175538535, 0.16142829960819782, 0.15464321740194942, 0.15994187318662734, 0.16730178645941796, 0.14026925537485202, 0.16917273625734142, 0.16619185397618108, 0.16961794121369733, 0.2221893641420949, 0.19210262013353163, 0.15338780032052513, 0.14583702466429527, 0.15760003272196832, 0.143014380967043, 0.1454982917147507, 0.27079356867552995, 0.21029588124935716, 0.19187580957045924, 0.1718296090912792, 0.16899329167424293, 0.16800424208171394, 0.1664160452487069, 0.17659351422757297, 0.18507370170192372, 0.19367434960532603, 0.194198942515991, 0.2135749380374129, 0.18476242058203107, 0.18634042371708637, 0.18097838567511426, 0.20568880668582523, 0.05779387506934941, 0.05165129023298609, 0.06959393390428814, 0.06726379342139122, 0.06410689671864, 0.052353336948110174, 0.07576452139661416, 0.05483930627478917, 0.050949594379594565]}, "mutation_prompt": null}
{"id": "dca95375-95d5-40e9-8c62-671545e055ec", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.4 * self.budget:\n                new_size = max(5, int(self.population_size * 0.8))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor = self.mutation_factor * (1 - np.std(fitness) / np.mean(fitness))\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Improved adaptive crossover strategy\n                self.crossover_rate = 0.7 + 0.3 * np.exp(-0.05 * eval_count / self.budget)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with an improved adaptive crossover strategy for faster convergence.", "configspace": "", "generation": 16, "fitness": 0.13192394393901438, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.13.", "error": "", "parent_id": "329805b5-d555-4d6b-942a-322b33a7a594", "metadata": {"aucs": [0.22326032215984637, 0.22772168404458804, 0.19211503480012804, 0.21829186614240337, 0.2043945851941067, 0.21212748389941916, 0.20157010528719344, 0.21587394367609536, 0.18032061305614666, 0.020111551250443505, 0.017132161949650393, 0.02217423892339887, 0.020996354053796296, 0.029972449753751795, 0.011699958025832902, 0.014933333392679327, 0.011619640244094231, 0.022060515050236984, 0.04559002651185351, 0.05099884619746953, 0.03368463541544553, 0.060122752007938485, 0.0658188501087803, 0.056893605579593, 0.07017782084590873, 0.0625962459302204, 0.06723426746424244, 0.022953427308511132, 0.015149668515456183, 0.028768542186533907, 0.0546856525803614, 0.046980884443248216, 0.04922760025731854, 0.058489556389907715, 0.05032335064407489, 0.05743441099354718, 0.4842667145120434, 0.5063059366807139, 0.3992010741044776, 0.7684507533698346, 0.8374328971984298, 0.812950692013759, 0.8384376269602164, 0.7230221690500079, 0.5374979243920034, 0.0930507653011331, 0.1086401704038148, 0.10349857719302835, 0.07076537786438952, 0.08630046833154192, 0.08522638454358733, 0.14340328327635776, 0.12029011535298284, 0.12142717338431863, 0.19393426745937936, 0.20707354808278877, 0.18795456941890032, 0.1720054264608134, 0.17438859790802685, 0.18360128537560738, 0.2053559558340483, 0.20021377841916121, 0.1956663252027242, 0.08797045376992174, 0.0720328759915062, 0.07657889317358602, 0.04075137467019774, 0.04422632982839225, 0.04609820757688654, 0.06712920725784821, 0.06773550665709505, 0.07233235751025235, 0.08216594842890756, 0.09643524852837859, 0.07979087847976529, 0.08874929138800602, 0.08385135551882872, 0.08857771164524697, 0.08278230557374466, 0.07857404584834515, 0.07038039970728571, 0.01941138032311296, 0.021869687427690798, 0.023638447042342192, 0.02647544789866696, 0.044713025227511416, 0.03901068128241225, 0.015188535665239367, 0.016429403201751125, 0.010353047668048232, 0.0822452613291309, 0.07585381563088944, 0.06343198047447207, 0.05037293088589445, 0.08472009097085231, 0.054752319074585776, 0.07178515665348384, 0.07583450647353729, 0.07250971669719386, 9.999999999998899e-05, 0.010539391843338297, 0.002341624155542399, 9.999999999998899e-05, 0.012404274845836283, 0.0014881629679617259, 9.999999999998899e-05, 0.020371055866913235, 0.007775134414121587, 0.017487447381557275, 0.01867475227937343, 0.01729031870914055, 0.027267103648892954, 0.018744547078486384, 0.0205350403309269, 0.016768346483661656, 0.01839194024308599, 0.027300774569978814, 0.2131257815207227, 0.1977610338920377, 0.18655410756770785, 0.22229095711588065, 0.19718424671052526, 0.2017321194567142, 0.22191443365625518, 0.19497284459795172, 0.21984190231450407, 0.051067720146861895, 0.05725180046546907, 0.06974080074400568, 0.06326407242316368, 0.05541683598122693, 0.06117884312791522, 0.07548344214103508, 0.07385396090714003, 0.07532425764061934, 0.13959981173802882, 0.12209369286665406, 0.13185133640678337, 0.17051531773323914, 0.14082030380225918, 0.13666257227878542, 0.14963138758589234, 0.12948172511124978, 0.15614833219336177, 0.1602710620254989, 0.1525299866038229, 0.16814906059237933, 0.184555899177542, 0.1959313437779997, 0.1760735412639033, 0.15735459466533663, 0.1770873291785351, 0.15771149460984257, 0.15246306550996158, 0.14663117118492341, 0.14252285529176412, 0.12286371651733463, 0.14402633794849096, 0.13636697559097788, 0.11113004311475327, 0.13469934097455438, 0.12193026652273342, 0.1466936131532116, 0.14696070157553554, 0.14118468780258497, 0.15991193635197343, 0.14476718205288508, 0.17987607740445766, 0.15374283331283956, 0.21093728583016724, 0.15804619537572562, 0.153941304863784, 0.16138351675705576, 0.15636751356327072, 0.17320803515806005, 0.1738377498677901, 0.16639469910525384, 0.1584336443518356, 0.16491079377736406, 0.16842294128205726, 0.13641497971227656, 0.20952302388272626, 0.16586483750339454, 0.18547799417543143, 0.2042442048447154, 0.17192722588109866, 0.1459936005048228, 0.14699799187449103, 0.16463086357205015, 0.18410555059586087, 0.14383489503949043, 0.15050821593711572, 0.1513927362904739, 0.13302628061092314, 0.13341965869906547, 0.1665833562169997, 0.1664545915164377, 0.1893680260466294, 0.17836462172042578, 0.19667140463868504, 0.17609851747031957, 0.2107041219537087, 0.2135749380374129, 0.1792175820508488, 0.17433463383446346, 0.18096734929672298, 0.20568880668582523, 0.06240945147111521, 0.05241760829799991, 0.06620072293735979, 0.05690272273573049, 0.06555117570492441, 0.051116738185177035, 0.07532529613519179, 0.05453602587683304, 0.053334121950020186]}, "mutation_prompt": null}
{"id": "80a883d6-71e3-4a32-8e2e-9db7d6ae999d", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.45 * self.budget:  # Adjusted threshold for population resizing\n                new_size = max(5, int(self.population_size * 0.75))  # Dynamic population resizing\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Enhanced mutation: dynamic factor based on diversity\n                diversity_factor = np.std(population) / np.mean(population)\n                mutation_factor = self.mutation_factor * (1 - diversity_factor)\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                self.crossover_rate = 0.7 + 0.3 * (1 - np.log(1 + eval_count / self.budget))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with adaptive mutation based on diversity and improved population resizing for better convergence.", "configspace": "", "generation": 17, "fitness": 0.11658749374014549, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "329805b5-d555-4d6b-942a-322b33a7a594", "metadata": {"aucs": [0.16834045273823017, 0.17678732104141304, 0.13347284088925937, 0.16462091782407262, 0.17126032839879213, 0.16253306018887903, 0.2315033627651213, 0.13733567521344814, 0.14878984631033965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038396378563625655, 0.04496310970400286, 0.030514424113925798, 0.02466262003992703, 0.03732066520661048, 0.03662342001376073, 0.039323021091705934, 0.03588651610472804, 0.03405517513607792, 0.022932461233801216, 0.015149668515456183, 0.028768542186533907, 0.01959972157639278, 0.01089740579551235, 0.0144346847797302, 0.03696417075239278, 0.013995737864724078, 0.029763828138413717, 0.9011037631889379, 0.901545512369827, 0.9052913448444037, 0.9046979287611618, 0.9057705279621495, 0.90218469860551, 0.9065108652831974, 0.9046048790464627, 0.9068306378817224, 0.06344281282558129, 0.07510940173832203, 0.10230989764161602, 0.052067424838013854, 0.06634163749781952, 0.03934596509779875, 0.09472457566024695, 0.052682181476422896, 0.08919533621105913, 0.11943061846237901, 0.19308637766117165, 0.1481850439168273, 0.07875439981616894, 0.08275626531536251, 0.08747239253350059, 0.07863895537483367, 0.11466285366481554, 0.1184282811445817, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026174016234413733, 9.999999999998899e-05, 0.014441083878865557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006526171681477733, 0.008028104616963128, 0.004139012375761197, 9.999999999998899e-05, 0.035362057023575866, 9.999999999998899e-05, 0.017993280776203546, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014918958768651791, 0.06535045920481664, 0.04490689360873623, 0.044669195072529644, 0.0234223620180537, 0.04469133800773706, 0.02545815389833972, 0.0339060597669375, 0.021772587117838915, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002539219412109217, 0.014843589207774843, 0.0004929715706289972, 0.008165961863018545, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003613853002291889, 0.0002248391361241442, 0.0031710321775688666, 0.2003844423089155, 0.18462911766473922, 0.186005807511461, 0.2055799784281095, 0.1776771365521368, 0.19226744717352073, 0.19726210125892918, 0.1548154236718794, 0.1891480374906228, 0.05400426538883729, 0.05821966579901561, 0.0501308415108872, 0.0338782750261738, 0.03398609462808322, 0.038317682108378937, 0.034547357403104995, 0.03120469247310753, 0.04683272553072526, 0.14948363626709849, 0.1331658892667501, 0.13212983230088926, 0.13766266535167793, 0.13886811994047443, 0.15042242711426257, 0.20570401717374587, 0.13783522521205616, 0.15097609099733034, 0.1707274896194032, 0.15059180881326262, 0.16814906059237933, 0.14217434856011568, 0.14857952897030824, 0.161856142914947, 0.16848638414478467, 0.18229007078478532, 0.16075981587429378, 0.09445724495899854, 0.09574879604014519, 0.11642567714002616, 0.09373791699045797, 0.12092313537362531, 0.10574625022466988, 0.11149672944210576, 0.13138950727398424, 0.10513093845869093, 0.13660975675650866, 0.13713559792232954, 0.1370036645952668, 0.14040474191590024, 0.13115840598582018, 0.14941079401652335, 0.14051810624462013, 0.1380410414912887, 0.15384279319850125, 0.1319193168884849, 0.14205085413662677, 0.14006577975982915, 0.13374366089686696, 0.1341421261535758, 0.13928752906414898, 0.1358893261205616, 0.13491564351385854, 0.16207881422481074, 0.1186220673767655, 0.16679477618376493, 0.16471027304002728, 0.15176503580803635, 0.1398880001482321, 0.12554785717242034, 0.12917674760088482, 0.1370094409671868, 0.15734365961366015, 0.12143021727895831, 0.10970974939691203, 0.12206946191677615, 0.12243568601980881, 0.10228518024506517, 0.10913184713065671, 0.1609143438768892, 0.1659930928253145, 0.131902487303451, 0.1672033181983903, 0.19818378399477454, 0.17025490104907637, 0.18683568409856555, 0.2135749380374129, 0.17163598010110526, 0.1780564984096552, 0.17996066980729408, 0.20568880668582523, 0.038285013558567726, 0.0476667368595004, 0.06585155299632517, 0.0496458412526628, 0.058815507864153016, 0.04631565748941047, 0.07532529613519179, 0.0518308563739136, 0.03968536562315572]}, "mutation_prompt": null}
{"id": "a7a4d8e1-bef5-4677-a319-ed355cbb5648", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.4 * self.budget:\n                new_size = max(5, int(self.population_size * 0.8))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor = self.mutation_factor * (1 - np.std(fitness) / np.mean(fitness))\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Fitness-based adaptive crossover rate\n                self.crossover_rate = 0.7 + 0.3 * (1 - (np.median(fitness) / np.max(fitness)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introduced a fitness-based adaptive crossover rate to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 18, "fitness": 0.1358664478666776, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.13.", "error": "", "parent_id": "329805b5-d555-4d6b-942a-322b33a7a594", "metadata": {"aucs": [0.23686571289920466, 0.24383314490072994, 0.2147488720019578, 0.2181802590846822, 0.2631294513431577, 0.24441131524142234, 0.23039692213795948, 0.1492404529913407, 0.18085249790046454, 0.013215427348285402, 0.019961710346490857, 0.024233917552941242, 0.03172700517463123, 0.02982039311468654, 0.027309255696291057, 0.011624544040068407, 0.025894457805364035, 0.012848762032036776, 0.05439021652201714, 0.049338700687344694, 0.03713368548855611, 0.07629133567883073, 0.06581916022323786, 0.07332706555464141, 0.10630149097832309, 0.07547177785853765, 0.0675583876773369, 0.022932461233801216, 0.015149668515456183, 0.034281486622759205, 0.0607999010871525, 0.060895404015689714, 0.053386095167124226, 0.058698114792485434, 0.056398081338739026, 0.06812106753573366, 0.47218735116306043, 0.43068944685965493, 0.5516234678787744, 0.7518381906807828, 0.7625863961900293, 0.6692907258176719, 0.8394119937211264, 0.7560681174933954, 0.618999276693174, 0.11352267956253459, 0.1253653623221871, 0.11559435732148615, 0.08355430495712646, 0.07866782769316283, 0.08654920858942372, 0.1244063914754957, 0.1307513157524901, 0.15832813145101898, 0.16036131028032918, 0.20531945248619776, 0.25078058861173314, 0.19261871029086342, 0.19933457630040463, 0.18757303844990703, 0.20412318096430881, 0.24032420335291393, 0.19607544804715615, 0.0958484669627373, 0.060784266098425355, 0.06569203068389706, 0.05059590422059024, 0.027442318938311616, 0.033119164426020475, 0.07943775374844864, 0.07195016913009422, 0.0675206636022041, 0.07499168530610045, 0.1008892431594719, 0.0664488527847581, 0.08541323401344925, 0.09589089922936578, 0.08755280344890981, 0.07904613033815244, 0.08132331475584831, 0.0763397122948456, 0.01884429878434346, 0.020499656520997944, 0.01868168165908568, 0.03047837661399866, 0.017777147326780707, 0.005463033308440002, 0.02365174769083045, 0.008047251314618697, 0.010383706275667981, 0.06685759937989133, 0.09118179678745597, 0.08825128562360407, 0.06718220835691957, 0.07733754081238275, 0.05443439691149177, 0.07609121009610154, 0.06101651845241629, 0.0578490474005362, 0.004964662214141935, 9.999999999998899e-05, 9.999999999998899e-05, 0.002986356633046472, 9.999999999998899e-05, 0.011707416403727633, 0.027308695642608294, 0.01736384542578595, 0.017211417444343513, 0.02429059456172722, 0.019839116878507035, 0.012417409335670926, 0.021391459533091073, 0.01643734264936214, 0.02601974502075277, 0.017901502274728975, 0.011015255078540731, 0.02619285638835933, 0.22063007691211345, 0.21816053921216094, 0.21177777447335, 0.22521982846179112, 0.19959423703270807, 0.2128707794272322, 0.2390891502463246, 0.2529836937967006, 0.2290445132219806, 0.05418346945003538, 0.05258015958565976, 0.05076976759035501, 0.060801349623810674, 0.05987974171083754, 0.055108350839973896, 0.06710846927042458, 0.08911981439179872, 0.0891258948260153, 0.15244851321918673, 0.14178581539364243, 0.14163896704775647, 0.13996474730055575, 0.13806106335733836, 0.1130594502439004, 0.14963138758589234, 0.14903167769387493, 0.17981408142966926, 0.16793333743786676, 0.15148658482101873, 0.1684951789554412, 0.17333392028152617, 0.19393589525130106, 0.18971182237734918, 0.16319533968762245, 0.18973537830775278, 0.17092310837636648, 0.12956747440746819, 0.14341944292827502, 0.1269817595327598, 0.13808266094873056, 0.13325250831792235, 0.14213951786858814, 0.11654274883458571, 0.12968275723854827, 0.12496887286454128, 0.13972923016099426, 0.14762421696742478, 0.1561288555949354, 0.16687279475614414, 0.1588331557058673, 0.15945747264866006, 0.15326927357707887, 0.1647920641034294, 0.1673809176209421, 0.15196351592260904, 0.15974285993511805, 0.15561025286701857, 0.16121210665031216, 0.17503569780983452, 0.17018175268503, 0.16134985728014706, 0.16525849260638603, 0.1722404325189163, 0.21729986020190561, 0.218358047000626, 0.1593083731255257, 0.1961601384696947, 0.17131505799318036, 0.22303903676518755, 0.19322368445134042, 0.21456072729432307, 0.15863113839672893, 0.1794101987438138, 0.16606506705344015, 0.16963224848095015, 0.12209493120332315, 0.14168810733546655, 0.12847669430842668, 0.1691188455783209, 0.2147917109335974, 0.19746057573695164, 0.1756503721630286, 0.1864577380186816, 0.1887420164172109, 0.18683568409856555, 0.2135749380374129, 0.17902507383609267, 0.19558603343916392, 0.19721842917478172, 0.20568880668582523, 0.055390526903800086, 0.0674245788433423, 0.06604188116969145, 0.07451103532209657, 0.0670869899025871, 0.0593198055283054, 0.07532529613519179, 0.05505922068438851, 0.051829249638314145]}, "mutation_prompt": null}
{"id": "3fcbee35-67cb-4a27-9814-033dc95ec00b", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.4 * self.budget:\n                new_size = max(5, int(self.population_size * 0.8))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Dynamic mutation factor based on population diversity\n                diversity = np.mean(np.std(population, axis=0))\n                mutation_factor = self.mutation_factor * (1 - np.std(fitness) / np.mean(fitness)) * (1 + 0.1 * diversity)\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Fitness-based adaptive crossover rate\n                self.crossover_rate = 0.7 + 0.3 * (1 - (np.median(fitness) / np.max(fitness)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introduced a dynamic mutation factor adjustment based on population diversity to improve convergence speed.", "configspace": "", "generation": 19, "fitness": 0.1296620240230319, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.13.", "error": "", "parent_id": "a7a4d8e1-bef5-4677-a319-ed355cbb5648", "metadata": {"aucs": [0.2512094097472508, 0.23982913159664299, 0.22772484298126594, 0.19445903734743986, 0.24108318876501522, 0.20982893481956744, 0.2393789897030807, 0.12676791299444923, 0.1544760314633704, 0.012391251536013947, 0.02016420946043962, 0.02746030264301358, 0.006245872964085408, 0.01600508790253885, 0.016473813886972333, 0.0057090925251163105, 0.028870582939611422, 0.02534225111487265, 0.0385997486506936, 0.05015443883803694, 0.03590695784814546, 0.05925895310605589, 0.0634160977078333, 0.07043946881368279, 0.06444987267000069, 0.06025494417921273, 0.05363675090075681, 0.022932461233801216, 0.015543647685896445, 0.03502941926781589, 0.07756395845925579, 0.056384182505579195, 0.05443569260664094, 0.06694510812466092, 0.051689911845165804, 0.056346993948863, 0.4847971993392409, 0.4591767228318073, 0.45709771341753236, 0.6640516383170683, 0.7620994868048516, 0.6641526066644992, 0.8612166080018384, 0.7559618678065013, 0.6654712768339004, 0.1092178007105471, 0.11692220772990491, 0.10662835541782878, 0.06434541990362574, 0.0811013984684078, 0.10175733281698718, 0.11137251300700413, 0.13579152134859118, 0.11116403582114998, 0.15094229341800525, 0.20296103378402208, 0.15847420577992166, 0.19854879809536974, 0.17920016260277438, 0.16476716553488735, 0.19142528189388475, 0.19620957042685783, 0.19130301883607026, 0.07257774136374828, 0.07264489303948374, 0.07703998757185104, 0.019782249493399795, 0.028394334001091703, 0.05184198554876707, 0.06677194616158066, 0.06072770903450764, 0.06873927748165898, 0.06454051303608088, 0.0861834389977737, 0.0693691180815853, 0.08912020981786573, 0.08830697173854873, 0.09393974259988569, 0.07378737686193304, 0.07242294337073019, 0.09395151901356225, 0.0008450905076042847, 0.024242541355792846, 0.0222085864505851, 0.01773261464446385, 0.025425708153348436, 0.032326460814317226, 0.014272149541381118, 0.013881827676216929, 0.007799774161822315, 0.07104698375918217, 0.07173483003478376, 0.09006794491796066, 0.05314036311389447, 0.06945189430531196, 0.04809566462465775, 0.10240317069046867, 0.06680609582194774, 0.06176283855161924, 0.0038195370458575795, 0.0068837810352117, 9.999999999998899e-05, 0.005846403559364832, 0.012120292173578351, 9.999999999998899e-05, 0.016635303705598736, 0.024106637437053324, 0.00673752048534515, 0.03194642043102791, 0.025165241373272362, 0.02070250607121249, 0.0111943315631019, 0.014842468672435105, 0.013188730857193742, 0.050459030356747814, 0.013585595311414678, 0.013539896599984225, 0.2182513993676809, 0.19964480218635594, 0.19812076062598005, 0.21642390622612406, 0.18981637973705845, 0.2186833179644211, 0.22679527197773952, 0.2374144328611557, 0.21700870158633712, 0.050497690091447334, 0.057116490546277654, 0.05685550187817212, 0.05188798323271859, 0.0534805510934393, 0.0545400846445413, 0.06303866579281514, 0.09082285617995345, 0.06728963476399297, 0.13709410100555053, 0.14416058118532782, 0.13305818821907978, 0.146671773334351, 0.13646215209043477, 0.11543614239672328, 0.16096953316378226, 0.12732594227386707, 0.13301851408412968, 0.1602710620254989, 0.15459944877305953, 0.16814906059237933, 0.1697461520692568, 0.18694542981061024, 0.17799439123826255, 0.16560126455431323, 0.17836006628278478, 0.15933432045555018, 0.14611555260969322, 0.13287652153894036, 0.1353041960431257, 0.13265348442569735, 0.12913079097983793, 0.13933256842824326, 0.10674369065851574, 0.12868951739553536, 0.11483376906912512, 0.13394394348349692, 0.13448311506996413, 0.13858818205244483, 0.16359236937550137, 0.15691173082234855, 0.16055874648118973, 0.1553598950769971, 0.1654614581035534, 0.16939913232139658, 0.15652182447838225, 0.15678820104322022, 0.15267035848108224, 0.16289491834116887, 0.16797205379984248, 0.16662223583928626, 0.16648443523291157, 0.16086433425495816, 0.17680296852675037, 0.1672291701904164, 0.16679605759685767, 0.1636082209731392, 0.18101345033883576, 0.2549824821273081, 0.15303795955098143, 0.15255051826349986, 0.1403733352078842, 0.1884075670833445, 0.1485426556190017, 0.12581673379390845, 0.12997956586545611, 0.12966142381256507, 0.13894450216287602, 0.12482867680971999, 0.1630619447948477, 0.16527833940859205, 0.21215231931290557, 0.18177282353529922, 0.1840951386782479, 0.18425726791035857, 0.1881751484390034, 0.2135749380374129, 0.18673955636232553, 0.18199938248118375, 0.1863392469255386, 0.20568880668582523, 0.053962518551357475, 0.054094120016522584, 0.06585155299632517, 0.05165315711421137, 0.06213198646854112, 0.049916766947832536, 0.07532529613519179, 0.0583614936935275, 0.045380535425924795]}, "mutation_prompt": null}
{"id": "283eedf9-5e1b-4aea-9efb-6277175f7210", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.4 * self.budget:\n                new_size = max(5, int(self.population_size * (1 - np.std(fitness)/np.mean(fitness))))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor = self.mutation_factor * (1 - np.std(fitness) / np.mean(fitness))\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                self.crossover_rate = 0.7 + 0.3 * (1 - (np.median(fitness) / np.max(fitness)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introduced a dynamic population resizing strategy to enhance adaptability and convergence speed in varying landscapes.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 1209 is out of bounds for axis 0 with size 1000').", "error": "IndexError('index 1209 is out of bounds for axis 0 with size 1000')", "parent_id": "a7a4d8e1-bef5-4677-a319-ed355cbb5648", "metadata": {}, "mutation_prompt": null}
{"id": "7232cb3b-806a-4627-99cb-3a9445b376ef", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # Dynamic population reduction based on fitness diversity\n            diversity = np.std(fitness) / (np.mean(fitness) + 1e-9)\n            if eval_count > 0.4 * self.budget and diversity < 0.1:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor = self.mutation_factor * (1 - np.std(fitness) / np.mean(fitness))\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                self.crossover_rate = 0.7 + 0.3 * (1 - (np.median(fitness) / np.max(fitness)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced exploitation by incorporating a dynamic population reduction strategy based on fitness diversity.", "configspace": "", "generation": 21, "fitness": 0.13337431546729775, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.13.", "error": "", "parent_id": "a7a4d8e1-bef5-4677-a319-ed355cbb5648", "metadata": {"aucs": [0.25700915801083646, 0.23841958519976425, 0.2475858952022424, 0.22890197921565536, 0.3404672166348097, 0.3199455705532317, 0.2733883632989127, 0.15693329158943603, 0.2793484749766296, 0.015252619430855874, 0.014598328699839125, 0.006692601988729452, 0.011332144264639132, 0.007977818402105208, 0.010537492901724566, 9.999999999998899e-05, 0.0022244984383360533, 0.00010931775968603397, 0.07288765779878936, 0.04734583165854678, 0.05520181994106954, 0.06635513404831161, 0.067672115045886, 0.06684631086934989, 0.10630111451488722, 0.0678110470898533, 0.06197128370640803, 0.022932461233801216, 0.015149668515456183, 0.028768542186533907, 0.053472752114058886, 0.05459723711184017, 0.05308951269206408, 0.054958158933111956, 0.050716911548963295, 0.06548208020913626, 0.39979861278553075, 0.4138740706450088, 0.29914399236554523, 0.7518381906807828, 0.7625863961900293, 0.6692907258176719, 0.8394119937211264, 0.7560681174933954, 0.618999276693174, 0.1028571369244844, 0.10528153319793543, 0.10810684130119463, 0.0828477859373199, 0.06644363163259259, 0.0804439259519526, 0.1244063914754957, 0.12746302468339232, 0.1581295673091676, 0.15186357599299938, 0.19308637766117165, 0.25078058861173314, 0.19164766544477596, 0.16664508504277398, 0.17468248684938137, 0.1832044503983853, 0.21234312481602424, 0.18892028572271724, 0.09418193914680795, 0.05527866355889688, 0.05242092705571355, 0.05059590422059024, 0.027442318938311616, 0.034005969845134265, 0.07737202085461015, 0.060948871978171115, 0.062226532963023384, 0.08923626629315773, 0.10119692789065104, 0.06307793795448813, 0.1044107541867767, 0.08929140355518217, 0.07723648959033813, 0.06767114599905, 0.09761211084844768, 0.07377696958272262, 0.004101098036665141, 0.004286514228240557, 0.0008122599849026413, 0.0067356264012538025, 0.00042907643884537716, 0.0063213739789469425, 0.008796762781388634, 0.009832090673405736, 0.004233672864103033, 0.04419969244511013, 0.08567570179223827, 0.07165564400993885, 0.062475718547662984, 0.06198075306507689, 0.03933058751759422, 0.07727473225384762, 0.05421564031161963, 0.05183490637964727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030259756953584516, 0.01059386542228058, 0.015025829671932667, 0.011224480709164375, 0.01873331313093418, 0.00697310352464553, 0.017901502274728975, 0.011492913829672768, 0.02619285638835933, 0.25076121682275, 0.23505570220896888, 0.2310009254346974, 0.2055799784281095, 0.24351890197516757, 0.24247909481052177, 0.23229587019029796, 0.26511725508313666, 0.24898731302388966, 0.055385154616008236, 0.06023018131262803, 0.05524597598915648, 0.056807654906991245, 0.05961354169370281, 0.05850053052610871, 0.07566008309502992, 0.08911981439179872, 0.06756389610382607, 0.15244851321918673, 0.14156548363735633, 0.13269053418449328, 0.1444015802522326, 0.14265424511801705, 0.11155928719120034, 0.14963138758589234, 0.14094308382593423, 0.17981408142966926, 0.1602710620254989, 0.15148658482101873, 0.16814906059237933, 0.16358433903724978, 0.18871161164308392, 0.17863901902782997, 0.17118896441937648, 0.2062793355117103, 0.17863916861083762, 0.12956747440746819, 0.14341944292827502, 0.1357391539277678, 0.128104880718667, 0.12742434487212628, 0.13282428715186612, 0.13918584710769333, 0.1493110055729172, 0.1359636248809427, 0.14093465726679222, 0.14508309967312039, 0.1561288555949354, 0.16951510679545767, 0.15814174980225892, 0.1781518371875549, 0.160765263738208, 0.16296222055357412, 0.1691546998839778, 0.15146343129705198, 0.15974285993511805, 0.15561025286701857, 0.16788797602226058, 0.17271703134461203, 0.1679959877485322, 0.1612071697571701, 0.16674562727708475, 0.17331113511562712, 0.19329893539144383, 0.218358047000626, 0.1664402026676789, 0.1940509682864523, 0.17131505799318036, 0.15483385873294353, 0.1467978807318432, 0.21456072729432307, 0.15796156227984826, 0.21103073524016214, 0.1725958935455838, 0.15189221076299653, 0.13023396012336563, 0.15543348535063994, 0.14888029763543253, 0.16461185115163246, 0.2147917109335974, 0.19746057573695164, 0.1765638602423114, 0.1879119045649721, 0.18717955771752326, 0.18683568409856555, 0.2135749380374129, 0.18873802362731096, 0.1957457620946842, 0.19721842917478172, 0.20568880668582523, 0.05430082433704697, 0.06666894702841386, 0.06585155299632517, 0.07451103532209657, 0.06648117261662922, 0.0656751208498747, 0.0753668887131762, 0.0548789063831735, 0.049685611462755186]}, "mutation_prompt": null}
{"id": "c18883ad-8d3e-43c7-8756-380ca73d6197", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolutionImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.initial_mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.4 * self.budget:\n                new_size = max(5, int(self.population_size * 0.8))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Dynamic mutation factor adjustment\n                mutation_factor = self.initial_mutation_factor * (1 - (eval_count / self.budget))\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Fitness-based adaptive crossover rate\n                self.crossover_rate = 0.7 + 0.3 * (1 - (np.median(fitness) / np.max(fitness)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolutionImproved", "description": "Introduced dynamic mutation factor adjustment based on iteration progress to enhance convergence and maintain population diversity.", "configspace": "", "generation": 22, "fitness": 0.13283078410401927, "feedback": "The algorithm EnhancedDifferentialEvolutionImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.12.", "error": "", "parent_id": "a7a4d8e1-bef5-4677-a319-ed355cbb5648", "metadata": {"aucs": [0.2500806829044746, 0.24582199015024142, 0.2497646316291794, 0.2718845551152044, 0.24969260330615028, 0.24172466019298766, 0.17620491874863398, 0.13454870531969898, 0.14097331335078267, 0.015914999443993327, 0.03995407745331181, 0.016554876580966216, 0.03684757571235353, 0.010594188744513344, 0.02995544703034103, 0.01429027457403298, 0.03473731531607005, 0.02284521825520147, 0.05339780550001383, 0.049967792055209403, 0.06630836116958594, 0.07121855960879764, 0.06369991797648888, 0.0719248955566858, 0.07633769232426058, 0.07347994582102024, 0.07222011019710595, 0.053255069599819405, 0.048241921418357925, 0.0485900919787855, 0.0512565987357162, 0.05085836902745555, 0.051702411886590194, 0.060360385690268026, 0.05675555788931341, 0.05661787471125357, 0.16891537700054526, 0.23267307268587434, 0.7035452625041448, 0.2117485517231028, 0.722665623453943, 0.40960239907678797, 0.8611508509255622, 0.758462510882081, 0.22022553293784908, 0.11471883150615536, 0.10132766461789311, 0.11390673160860265, 0.09351835419820187, 0.10415503519417002, 0.110346519708726, 0.10972087972865707, 0.09948799786236084, 0.10911750541178333, 0.17464420673818093, 0.21144435409822904, 0.17704842484819894, 0.17878352915999163, 0.17900494105077558, 0.17344740343435117, 0.17014504418937926, 0.20391367797785998, 0.19417700282144923, 0.06607948404789332, 0.05814741321533734, 0.07294878975253538, 0.05117127434960678, 0.046924861967375775, 0.041280463786683375, 0.048710700395067974, 0.06391214447642357, 0.055167173485783816, 0.051146852151483846, 0.04335751751917283, 0.046046443518928726, 0.05823274863944827, 0.06937474533515975, 0.04512714276091534, 0.06632790761363017, 0.04705433840704121, 0.04898814971109844, 0.010360392071563362, 0.015001645150653387, 0.02115308845328434, 0.016110083842304612, 0.027493206152927052, 0.01330802667224884, 0.01633080687716737, 0.021518747241861313, 0.018262150215760498, 0.09519245859297576, 0.11350795592382235, 0.0998927378417418, 0.10796455480099998, 0.09430675417461676, 0.0949728212888149, 0.12939591485328705, 0.10500162966528281, 0.10733654575072649, 0.007502639516238752, 9.999999999998899e-05, 9.999999999998899e-05, 0.00809693281847812, 9.999999999998899e-05, 0.001972147432719451, 0.0035011029170988195, 0.007151150313980392, 0.008350427825362439, 0.027185010536193266, 0.02658411151678719, 0.023922505759671364, 0.03342109715960628, 0.033975297472945365, 0.04257511419629045, 0.026618300144173213, 0.018146728923838618, 0.016616976348785784, 0.2484162166692423, 0.2354686052047119, 0.24146960724350974, 0.24435266619537221, 0.23394758965021634, 0.21810299952868362, 0.26373412009350705, 0.2625195247972325, 0.24905984585347496, 0.06720012947751053, 0.0832172805164868, 0.06425882359989321, 0.06365461098282144, 0.05777478274861536, 0.06140391045440852, 0.0596500284773821, 0.07298520173985468, 0.07632525670607992, 0.1563672522232198, 0.1490174265491061, 0.16155325240022722, 0.14028305870632396, 0.13511880823300437, 0.11439162855669982, 0.15664332898832856, 0.14600117190741602, 0.1388785021380381, 0.18747110203562178, 0.1770334774280018, 0.18384342866123948, 0.18358024642610693, 0.19300380600473055, 0.19555351479458716, 0.18551670006290777, 0.20204186949425107, 0.19430299543746554, 0.13809388787114818, 0.12754535825353464, 0.15416290230474916, 0.13774795349798719, 0.15204831634553595, 0.1335091434361224, 0.13143480841518995, 0.14029190108123546, 0.13032979277164103, 0.1593893120365918, 0.17968420346377678, 0.16332372264094241, 0.16712873857227128, 0.192984946613451, 0.17602652409323216, 0.1654347139699659, 0.17887113888639017, 0.18870422214272276, 0.14927259232394985, 0.15890982737247905, 0.16130636933901865, 0.15632532924811626, 0.15741873631999226, 0.16027769528779667, 0.16242193636537994, 0.1550712045312561, 0.17097008264753455, 0.22253991182788224, 0.2631825071162097, 0.2263380599461421, 0.2573969874667137, 0.1808145264577371, 0.25604496604853344, 0.159021013247022, 0.18708950354691556, 0.20531446902893746, 0.16428481648375404, 0.2010394962825982, 0.17407542336204318, 0.39698541584196656, 0.19112932268925975, 0.16778980499378415, 0.17315874736088444, 0.17993910961684267, 0.19404132973026023, 0.1796446400205095, 0.18492293681529148, 0.17484036611313258, 0.18692896418599225, 0.2135749380374129, 0.1796274042338769, 0.1828416773054613, 0.19039606302433754, 0.20568880668582523, 0.0597427898103986, 0.06476156977689784, 0.07262208403433457, 0.06379320650981612, 0.0743679349003531, 0.06433405890108335, 0.0768026588104842, 0.06467409690905679, 0.05936373562260577]}, "mutation_prompt": null}
{"id": "c61f29f9-f39e-40bd-90db-2d52f3562de2", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.4 * self.budget:\n                new_size = max(5, int(self.population_size * 0.8))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor = self.mutation_factor * (1 - np.std(fitness) / np.mean(fitness))\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Stochastic perturbation for increased diversity\n                if np.random.rand() < 0.05:\n                    mutant_vector += np.random.normal(0, 0.1, size=self.dim)\n\n                # Fitness-based adaptive crossover rate\n                self.crossover_rate = 0.7 + 0.3 * (1 - (np.median(fitness) / np.max(fitness)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced population diversity with stochastic perturbation for improved convergence.", "configspace": "", "generation": 23, "fitness": 0.13383653375860619, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.13.", "error": "", "parent_id": "a7a4d8e1-bef5-4677-a319-ed355cbb5648", "metadata": {"aucs": [0.2538017323592121, 0.23287403865741096, 0.2440558749135041, 0.238983949624326, 0.23049635440865635, 0.23248430714796886, 0.21621557626855137, 0.17034972838515183, 0.16405159122114488, 0.014874564311156191, 0.02651893843234976, 0.01122599332604679, 0.02513245317473156, 0.025932972957202538, 0.016827656917962175, 0.017709866389545414, 0.010361034780674183, 0.01053742720737827, 0.05528468101434081, 0.05180011448706989, 0.04630165142277598, 0.06872065684381201, 0.07575369742144411, 0.06637923492399755, 0.07019236601287415, 0.06467490462098724, 0.05979769014569902, 0.033712742821016994, 0.017453056949045975, 0.034612948941240784, 0.06685261198618031, 0.05542081579697966, 0.06002372766768871, 0.05573264826892077, 0.055063565214270915, 0.051251357105661755, 0.40899505331531605, 0.32785357962621087, 0.43280368935135627, 0.7395487443934203, 0.6311859577846173, 0.7882621553835415, 0.7615875515169711, 0.7021320889893443, 0.7441788098197863, 0.119566369323033, 0.11386980892464749, 0.11328937932981786, 0.11128801876761896, 0.10314356288834603, 0.09508182637088847, 0.12816665960292706, 0.10354907888410902, 0.1203063203144511, 0.16253927394077805, 0.20190716069637982, 0.18682676591223668, 0.19184102464821084, 0.18995252489074055, 0.2262720527136165, 0.19902632492433936, 0.2593137346890546, 0.247595754892588, 0.07658283254311427, 0.06413218405379162, 0.1027721512020966, 0.036237137412394094, 0.05748186324634441, 0.061630516274665426, 0.08590190679515075, 0.07784869298305674, 0.06768365609616844, 0.08177918293108455, 0.08712264243027368, 0.07596496198934832, 0.08069639066531331, 0.08101353253667554, 0.09853892545235465, 0.08944404980823961, 0.08596418632870295, 0.07740284824014143, 0.015886296088624685, 0.014891007001482826, 0.016247772027837337, 0.010494342188127836, 0.029480474913807897, 0.024454265749525583, 0.0046818862539595996, 0.005194894903088221, 0.005304753090519254, 0.06715150144001947, 0.0864049984047579, 0.09500184880642104, 0.1081400928854015, 0.10694096776056561, 0.08097586027340453, 0.06034405274300336, 0.06983900701538148, 0.07797298857508472, 9.999999999998899e-05, 0.00010270771372455911, 0.00028725044344135586, 9.999999999998899e-05, 0.01084399784131218, 0.0015806630204308059, 0.023877154563551106, 0.025899683013117847, 0.017671845086734916, 0.0236382934496987, 0.0318384215790396, 0.01860373773675361, 0.02000159252859779, 0.015197093568102171, 0.018371124299516817, 0.0038968291350085504, 0.019052567807271603, 0.014369470031589837, 0.22033173183063093, 0.19662649210199823, 0.2117788285719191, 0.23282809109539238, 0.20817599704329404, 0.2185597260867541, 0.23929365337070962, 0.21631475408849044, 0.22138873121410108, 0.055356508124671966, 0.05670101286194551, 0.05452951923539151, 0.06632616725762785, 0.06180681738829896, 0.05256828358454535, 0.07212397626602418, 0.06722983972135899, 0.07495454605218088, 0.13814110366465193, 0.14090389301970296, 0.1421925302737489, 0.15832427015114425, 0.13939741157850982, 0.11828014035989287, 0.14963138758589234, 0.1440387615610309, 0.14907595533218032, 0.1672743348687007, 0.15675335404722468, 0.16814906059237933, 0.18995472473665076, 0.17359016110721237, 0.18340665463175743, 0.1660187445286161, 0.19314311560316444, 0.18492922074139329, 0.13703973571452932, 0.12611676513874848, 0.1341056213985412, 0.13195635956534768, 0.1461768249708283, 0.1335608450929614, 0.1345342488019885, 0.1377985415909394, 0.11077709910341382, 0.13952423916693546, 0.14222433500395604, 0.16217438051469313, 0.1603104565503103, 0.1535871257019682, 0.16822552995877982, 0.15301923577421672, 0.17306027449528316, 0.17386275860527, 0.1612473546262747, 0.16713367013297242, 0.15440379078944155, 0.16375873202513846, 0.17009946077768545, 0.17351040035535115, 0.1575247819164297, 0.16305443636819805, 0.17262900156568717, 0.24784411513231575, 0.16967908104963658, 0.16654661740080523, 0.20115703845329624, 0.1563831080019492, 0.19799438650963253, 0.2443776357895654, 0.14410108361466578, 0.20451753672997963, 0.14088734752242493, 0.1552205866829076, 0.13595536130757668, 0.14046061528914566, 0.17116062148036415, 0.15835988006192092, 0.1609143438768892, 0.1708447318185321, 0.15250827232930697, 0.17719540669882694, 0.1840951386782479, 0.19046328616128694, 0.18861436548466493, 0.2135749380374129, 0.1786183728983256, 0.1758790963993937, 0.17743883405769612, 0.20568880668582523, 0.05750465709638197, 0.05483067680598086, 0.081789352392311, 0.05213154922019314, 0.06061977412329489, 0.057716916478395386, 0.07576019915522725, 0.05922057939770298, 0.05253856610262797]}, "mutation_prompt": null}
{"id": "1ec64cd4-53b6-480b-afc8-73075d8c5e25", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.4 * self.budget:\n                new_size = max(5, int(self.population_size * 0.8))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Introduced mutation factor decay\n                mutation_factor = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / np.mean(fitness))\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Fitness-based adaptive crossover rate\n                self.crossover_rate = 0.7 + 0.3 * (1 - (np.median(fitness) / np.max(fitness)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introduced mutation factor decay to gradually enhance exploitation over iterations for faster convergence.", "configspace": "", "generation": 24, "fitness": 0.13846581636891486, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.11.", "error": "", "parent_id": "a7a4d8e1-bef5-4677-a319-ed355cbb5648", "metadata": {"aucs": [0.26118109979385185, 0.26233429165936073, 0.26419314705034236, 0.25309963026431825, 0.25368169035860855, 0.23405361222908272, 0.18045197805942093, 0.13332561619471672, 0.14097331335078267, 0.017679272062378404, 0.02917865425752264, 0.022285540782261193, 0.038225924290475444, 0.01382519961336015, 0.019368064688161435, 0.00031455569607241607, 0.025103301587648952, 9.999999999998899e-05, 0.04221816144506574, 0.05543349606413761, 0.05156624927179676, 0.08373803391526746, 0.08089303546776339, 0.08540028609055228, 0.08198577218556713, 0.07869173357763959, 0.09193138619553798, 0.027798091730540375, 0.02016272291688659, 0.04183776563001762, 0.0692977513361458, 0.07176522195967427, 0.06435787165159579, 0.07080844198152936, 0.06568710099160235, 0.06730609998002579, 0.38306562115544784, 0.3923517470958725, 0.3619386143181508, 0.7081511602308969, 0.7185984416027927, 0.5135679444712679, 0.6861864051036783, 0.41225058806643133, 0.19768148962793353, 0.10630556354310061, 0.11617376010382008, 0.1286940927717305, 0.0961044027194835, 0.09644661689054923, 0.08963856859194053, 0.17283218774742803, 0.15150529262116652, 0.13379442593221214, 0.21521647103974773, 0.21827963567086806, 0.20408451294137775, 0.30523893725851325, 0.20377852450352785, 0.22268453508227237, 0.20727186823224986, 0.2212491872344765, 0.19385534718487263, 0.10291344786513978, 0.0666534921455062, 0.08439085254736889, 0.049626613153411214, 0.06399993617867206, 0.03920448398242771, 0.09105828311355857, 0.10302277304840501, 0.07287650253516853, 0.09298468247963065, 0.09772684034381052, 0.07921620045044564, 0.10695447739554498, 0.09621930628823161, 0.10298354363159146, 0.09626806149623168, 0.08205928685471753, 0.08923804228323606, 0.027673591562139888, 0.004487365852839376, 0.018109386299812624, 0.013573817554231038, 0.011791634360137304, 0.027361638860595616, 0.011034012041411745, 0.007575979293219293, 0.012930925274520777, 0.09441154939639795, 0.1234773872669237, 0.11330247307971097, 0.09648722142285437, 0.10361626344114427, 0.10667002524210079, 0.10251346079482915, 0.14109241139197326, 0.09232979904109473, 9.999999999998899e-05, 9.999999999998899e-05, 0.008738728545345631, 9.999999999998899e-05, 0.007332566266476381, 9.999999999998899e-05, 0.0014712946332366972, 0.0012260083703433677, 9.999999999998899e-05, 0.038576723549567205, 0.036863512935142895, 0.043959771071463316, 0.03068824523762126, 0.03174941311833368, 0.03906723288955105, 0.024625555032270707, 0.014894449127157539, 0.024795826959369105, 0.2113454084617018, 0.21379092526541488, 0.19858540678137016, 0.21711794759334524, 0.2177045446125605, 0.2229754865608734, 0.2629788577034229, 0.25533606641075446, 0.24761912848483236, 0.06875564939319267, 0.06956159268655338, 0.07048805766104138, 0.06995397352654564, 0.06030588314589591, 0.07161962912119002, 0.08660974626085294, 0.07295426256622284, 0.07752875654425428, 0.15450150763783455, 0.13352388904595425, 0.13772241366630988, 0.16031819451836093, 0.13864237750633746, 0.11248283810999127, 0.15464808175027034, 0.1346717135024612, 0.14510912801503395, 0.17524474420873526, 0.15548527113713884, 0.17144834991173208, 0.2055888131452962, 0.2054858307578753, 0.19773599670678532, 0.19347598877094452, 0.20321374458477248, 0.183552722763629, 0.14472228139889298, 0.13866591997561628, 0.13501683708475998, 0.14896111470252693, 0.1539727778576525, 0.14934500319892852, 0.1395321634946569, 0.1468470063988796, 0.13947109447441275, 0.1634874553775848, 0.18476842628126722, 0.16676760104605237, 0.1708861637845559, 0.18717292775207528, 0.17953436586289095, 0.16998052152087106, 0.1686034048675027, 0.173399971027279, 0.17059320687777124, 0.17014093821560605, 0.1600974402746368, 0.16764330863261545, 0.1780291965331322, 0.16943683633337436, 0.16776290112432013, 0.1766825321998502, 0.17640854804613004, 0.21278245959037723, 0.24503639804671729, 0.2233585875963825, 0.2506957722556291, 0.23330318276939865, 0.2409830331161955, 0.19759824855868668, 0.1970883628881458, 0.1792521871058167, 0.1644302184583032, 0.26842756287180414, 0.16011919807329955, 0.38001464241238136, 0.1853233065426162, 0.17575820318513447, 0.1732024494614156, 0.17019829818413057, 0.16876456374119875, 0.1850382673810267, 0.19610720557629957, 0.2022932733833539, 0.18802924210340155, 0.2135749380374129, 0.1774928316962201, 0.19175894784947278, 0.1802944476823577, 0.20568880668582523, 0.06502038117413644, 0.05771910763143662, 0.0722455068022062, 0.06522107004347855, 0.06919985670504025, 0.06152010772267835, 0.07884232586359263, 0.06565644286564054, 0.06303887698463218]}, "mutation_prompt": null}
{"id": "5a347f93-c663-4663-a3b6-d6caf6c9346d", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.4 * self.budget:\n                new_size = max(5, int(self.population_size * 0.8))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Introduced mutation factor decay\n                mutation_factor = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / np.mean(fitness))\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Slight dynamic adjustment to the crossover rate for enhanced exploration\n                self.crossover_rate = 0.7 + 0.3 * (1 - (np.median(fitness) / np.max(fitness))) + 0.05 * (np.random.rand() - 0.5)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introduced a small dynamic adjustment to the crossover rate to enhance exploration.", "configspace": "", "generation": 25, "fitness": 0.13665077788224395, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.11.", "error": "", "parent_id": "1ec64cd4-53b6-480b-afc8-73075d8c5e25", "metadata": {"aucs": [0.24721015099177635, 0.28284516168536955, 0.27384881943272643, 0.27117666993310297, 0.2486460935814162, 0.2318088762736178, 0.18650403317773, 0.12687096689454824, 0.14173611840872213, 0.018306089707705753, 0.035587227552464684, 0.013787350292095657, 0.04213007064513019, 0.02706857798595086, 0.02964594784370478, 0.0190711077132526, 0.020438237514970203, 0.006987355801513329, 0.04687725755607297, 0.05630885864816104, 0.043737268793216044, 0.07339528717699118, 0.0857152312407321, 0.07203639602756862, 0.08086592654970881, 0.07813909545432907, 0.08349445049840343, 0.02998220973849841, 0.019264436911796246, 0.029920147756885895, 0.07873163808063022, 0.07241578509459645, 0.07681770119886533, 0.07307326158234195, 0.062431452475995464, 0.060555893424808716, 0.3722009874676584, 0.3832494936101227, 0.39826271078682707, 0.540918270463357, 0.6797854054599988, 0.7147305239748727, 0.46707036902821253, 0.45472179411113445, 0.2967989225394413, 0.11572214507229439, 0.10771585427948283, 0.1315165375285573, 0.09268641180078863, 0.10560781871422675, 0.07417748251081124, 0.1461545942457958, 0.1462593888063064, 0.16129660083897723, 0.21816380554171233, 0.22771538130870328, 0.19295275444146254, 0.22149597200181226, 0.27138737852697914, 0.23241949307646803, 0.3157405902732138, 0.22690936790618488, 0.2422424872646416, 0.08291842077190703, 0.1033716040162479, 0.06475761875140873, 0.04179260030265919, 0.04911912792383499, 0.04743396594336269, 0.07486173715366662, 0.08704669547608901, 0.09586500299425937, 0.09565924430419814, 0.0823820791573493, 0.0850511685869948, 0.0760413173903014, 0.1254488177852474, 0.08004661319608108, 0.08462331422189395, 0.08449924581607571, 0.09870092831612509, 0.007552728042448109, 0.019444621178405952, 0.006591170328130502, 0.014459485309638698, 9.999999999998899e-05, 0.01964044996987757, 0.025901073474838943, 0.018904813207504367, 0.02248697698530322, 0.10485370277195305, 0.142271081980188, 0.10820673749312537, 0.09577716680930148, 0.10705603114830553, 0.09488548781097339, 0.09745606015844677, 0.10091820923704853, 0.11824018726453955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007384380226090892, 9.999999999998899e-05, 0.004976825137969487, 9.999999999998899e-05, 0.006466889300317025, 0.03817987867524841, 0.036231721786851634, 0.035828970280740724, 0.03599001505604282, 0.03520428461109171, 0.030108618567765144, 0.016400473527797832, 0.010320254715729837, 0.024263452384536865, 0.21526637410914273, 0.214378323515085, 0.2202190181864404, 0.21542479846107332, 0.24267451091798298, 0.20445665953767644, 0.2754022805304941, 0.2444847040609549, 0.27319879856404616, 0.06370625870460245, 0.06898571626845518, 0.06134735361829646, 0.0730534737042311, 0.06421516657585413, 0.07391008685008915, 0.07259139608709342, 0.0706181032043347, 0.07674943149918068, 0.14252197962379776, 0.12179379611597252, 0.14000574597252602, 0.15124304217552031, 0.1391125191710798, 0.11124607337876247, 0.1516985987256818, 0.14319152761185394, 0.14952375024029685, 0.16287724194299757, 0.1567430786883084, 0.17210173855143585, 0.2047453662246681, 0.20603052518448906, 0.1974604021820835, 0.19469135929191017, 0.20399189357700664, 0.18668952486895996, 0.15060920736642436, 0.1352241098620901, 0.15271913299004847, 0.130468013222366, 0.16407984797631636, 0.1474261228148287, 0.13572736816677133, 0.14318256476641655, 0.1380366621249144, 0.14816819305461248, 0.160267815557111, 0.1723962919604033, 0.19652133634544722, 0.18227941210586196, 0.1766113996180365, 0.17240335841128562, 0.18229342058693043, 0.17865989581264785, 0.16099943549162254, 0.1597841953964111, 0.16078173106406501, 0.1763470485447156, 0.17263868183275322, 0.1765900194935981, 0.1647054806288385, 0.17645248241020184, 0.17444853426793017, 0.16550113949249812, 0.23947421880609343, 0.25580793495905163, 0.2643734739734144, 0.264442833064621, 0.25704309184298335, 0.20819022757776606, 0.18678134043205352, 0.16072361658108691, 0.16739574625241205, 0.17581995037902853, 0.14547562718965767, 0.15983416133473727, 0.14014540136540632, 0.15147977601370477, 0.16597092809556202, 0.16731678004717998, 0.1515888436745667, 0.18522763316501611, 0.1883000662104587, 0.17168637351801586, 0.18978550804122074, 0.2135749380374129, 0.17016015438354426, 0.1782264524827597, 0.2005275420006577, 0.20568880668582523, 0.06402283853390345, 0.05776972065243369, 0.0710821097615777, 0.06309303368093655, 0.07829011567586674, 0.062340237013322475, 0.07652785002641072, 0.06895666853354032, 0.06276150071506092]}, "mutation_prompt": null}
{"id": "091eb6ee-4f51-433f-88c0-41e28aa34943", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.4 * self.budget:\n                new_size = max(5, int(self.population_size * (0.8 + 0.1 * np.random.rand())))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Introduced mutation factor decay\n                mutation_factor = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / np.mean(fitness))\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Self-adaptive crossover rate\n                self.crossover_rate = 0.7 + 0.3 * (1 - (np.median(fitness) / np.max(fitness))) * np.random.rand()\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced diversity and convergence through adaptive population resizing and self-adaptive crossover rate.", "configspace": "", "generation": 26, "fitness": 0.1280421019115535, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.10.", "error": "", "parent_id": "1ec64cd4-53b6-480b-afc8-73075d8c5e25", "metadata": {"aucs": [0.23624695090626568, 0.2495208671015866, 0.2225989786999888, 0.22515868711445497, 0.21738251549279475, 0.22503796570333412, 0.2240834044699468, 0.1877530125710175, 0.17678070151322423, 0.014209461014148328, 0.008217590810634778, 0.005452172205671735, 0.009436007507996669, 0.01468900595611633, 0.012615554603366608, 0.0014442888610890492, 0.006307981427218556, 0.0013596252697727351, 0.05064882496796985, 0.061334182968085016, 0.04180200022403735, 0.07585992071060466, 0.07373410272598835, 0.07360565930926455, 0.07730793773486744, 0.06510820165585518, 0.0717275763104821, 0.025514573702180465, 0.022755710687061392, 0.031617957552384945, 0.05976334007554962, 0.0659026738939279, 0.06428875768193887, 0.06256777688122639, 0.06658913931313548, 0.06495423063656058, 0.3356134523275971, 0.3461318217013897, 0.33313116453362257, 0.529739286993023, 0.36852981824732556, 0.8155385692297262, 0.1931276894346895, 0.37443517039218455, 0.607737487406571, 0.10683836599370333, 0.1101752389139099, 0.11445212129525284, 0.09048317497218816, 0.08831913473877595, 0.09820179199171775, 0.13043545112888077, 0.12424857456330296, 0.1368989363866263, 0.19308954269102485, 0.2130440314553812, 0.1812629930319657, 0.22592210961633663, 0.18840751632042652, 0.2039252437747885, 0.20492262509562253, 0.2072994999432617, 0.20110474603159445, 0.06857520594751898, 0.07769142287283648, 0.054822808304433646, 0.039458913639617954, 0.025521540738761672, 0.037768843324496815, 0.056501875613757524, 0.06074647786393128, 0.05399970719759972, 0.07528071637512601, 0.06160762604536063, 0.08346318542894826, 0.06637683220696255, 0.0837060411754934, 0.07989198237937123, 0.07495645549568786, 0.07967874007223585, 0.1112079669821, 0.003476437230638285, 0.0047647644852338855, 0.0049513681120076924, 0.00042540385517753077, 0.004430804491313611, 0.0034654967674297987, 0.00060381912938412, 0.001151862245994395, 9.999999999998899e-05, 0.0928165957635807, 0.07776880505332462, 0.08975854035872266, 0.0730551456252031, 0.07591883903097185, 0.06988046759205191, 0.054082403480080976, 0.08996287556552218, 0.07615952103696, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00030768931570490654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020535335272022004, 0.02139301967141638, 0.03106616991132105, 0.02055310171031377, 0.02163768135726918, 0.027328647420392427, 0.013667220695754101, 0.011567713316596562, 0.017869869428902008, 0.2148179883075212, 0.19810690618371796, 0.19666777424232829, 0.23496995866096837, 0.23759994430585019, 0.23235448399378167, 0.25895636698629365, 0.2574039821834039, 0.2433473568048825, 0.05922804670789317, 0.059784460377758974, 0.06689275704972097, 0.06392927054469366, 0.07176551641056572, 0.07295674244410222, 0.0811111560639367, 0.06866140734356119, 0.08199909189864263, 0.14126954071705, 0.13981820796912126, 0.1444281158295525, 0.14547805788833068, 0.1424922322151111, 0.14097306311723856, 0.14963138758589234, 0.14958038676396757, 0.14801048026796926, 0.16484149082827204, 0.16461938639407803, 0.17269234083162643, 0.197905303044298, 0.20041102299757885, 0.19154490743377806, 0.18983265428738938, 0.18799751173500856, 0.17524560785623267, 0.13523065663881062, 0.1381252046937369, 0.15264052336368916, 0.13838764564968864, 0.14123784830728714, 0.13737931552396, 0.12172366509101917, 0.1358008951339552, 0.12375428236333097, 0.13900392221312974, 0.1695855533778997, 0.1448894732755741, 0.1893605267328322, 0.188162622219607, 0.1787295988223182, 0.17057560474797007, 0.1823635754130113, 0.17043586914323638, 0.15944256260780953, 0.15690795974050087, 0.15854508939000056, 0.1736468479981471, 0.1678541683990732, 0.16240548139276356, 0.1598647737355412, 0.16355294867606485, 0.17012548026762142, 0.18278703442042155, 0.2060558219888209, 0.21416810808024, 0.23593227475109102, 0.23413432209313034, 0.26140926170457, 0.1832979567809241, 0.18173450132253133, 0.1680469234236236, 0.1872503087819023, 0.1575830079078685, 0.167874285101008, 0.1954632332431422, 0.24303187070877252, 0.17025717570457888, 0.1682503367566991, 0.1705670132967151, 0.2060828170275547, 0.18126430141610594, 0.19203779813809674, 0.19164055383802348, 0.19369246318242006, 0.2135749380374129, 0.1844791408101708, 0.1760255038986528, 0.1913729579058301, 0.20568880668582523, 0.0589074869917271, 0.06409863754126122, 0.06792246117064027, 0.0756943926954744, 0.06689468985031022, 0.06534693840833738, 0.07553874054586451, 0.06391230757983213, 0.060869801857113104]}, "mutation_prompt": null}
{"id": "8eb680d0-0a27-4ccd-b077-0871600012db", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.4 * self.budget:\n                # Adaptive population reduction\n                new_size = max(5, int(self.population_size * (0.8 - 0.1 * np.std(fitness))))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Introduced mutation factor decay with diversity preservation\n                diversity_factor = 1 - (np.std(population, axis=0).mean() / (self.upper_bound - self.lower_bound))\n                mutation_factor = self.mutation_factor * ((self.budget - eval_count) / self.budget) * diversity_factor\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c + 0.2 * (best_individual - a))  # Enhanced mutation strategy\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Fitness-based adaptive crossover rate\n                self.crossover_rate = 0.7 + 0.3 * (1 - (np.median(fitness) / np.max(fitness)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced multi-phase strategy with diversity preservation and adaptive population reduction to improve convergence speed.", "configspace": "", "generation": 27, "fitness": 0.11114658855769378, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "1ec64cd4-53b6-480b-afc8-73075d8c5e25", "metadata": {"aucs": [0.2188166541674712, 0.22812368659138327, 0.19899146095027664, 0.20186529179838286, 0.19430313907651464, 0.1986571331929814, 0.1739226485981391, 0.12131213164676025, 0.14097331335078267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07677903591714186, 0.07105142261824515, 0.07882931418384231, 0.08397233511053459, 0.06582554861265288, 0.0698090213176632, 0.08134150399354434, 0.08534558417619342, 0.0867198668098903, 0.062021563675686564, 0.04667902044529204, 0.05579660938991149, 0.07329535677877574, 0.046694009466229036, 0.05562377758616188, 0.05650403787214053, 0.040247455235204455, 0.04218122957890569, 0.13685906375069246, 0.1723997206472757, 0.1348981961526584, 0.18588107038187096, 0.14139523087030015, 0.5630787431750436, 0.18990232744568614, 0.17096437350958127, 0.1251564599887186, 0.09421786838707613, 0.10496854148349466, 0.10171882691615464, 0.09875407796876445, 0.10966850963285601, 0.05803846150518421, 0.09987778372226508, 0.10737877836129461, 0.10452453463167588, 0.14786736318478322, 0.19308637766117165, 0.18271827273961339, 0.14779476907535005, 0.13864493819269796, 0.17567507273958194, 0.17524945849818885, 0.13275622341315008, 0.13344507694436525, 0.012861751717376912, 0.008657988673212103, 0.12186987518243919, 0.009740586039133303, 0.011783067803489922, 0.023334104177544557, 0.055108782333064266, 0.014910095459766293, 0.02972517698743249, 0.035537329851137445, 0.012388913348102326, 0.04458218368919675, 0.011700154701916876, 0.04343297059937323, 0.03656486137250048, 0.05112335559227554, 0.03480722132035263, 0.02291036142287617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08178925412600835, 0.08978922511246601, 0.07217702442971963, 0.08868593531073221, 0.06073506956084562, 0.05908407528548232, 0.06937052858408754, 0.06324132751329248, 0.10592765308081198, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03886382570368041, 0.004539671273660506, 0.024341421722258616, 0.016599633153791205, 9.999999999998899e-05, 9.999999999998899e-05, 0.01542330905489575, 0.029731795883573442, 0.001195356826612981, 0.22838958281946875, 0.2216858200090972, 0.21647961837132257, 0.30028705394672184, 0.22670475223069686, 0.21366302313439134, 0.23144969228872114, 0.22252776684579845, 0.234423374631882, 0.07924183965682152, 0.053717076985859036, 0.09148942448429753, 0.057757303953858696, 0.09416254839921767, 0.08340067627275272, 0.04728991590540077, 0.0647337925399506, 0.05998601938964854, 0.13709410100555053, 0.18944649017107507, 0.163882934104286, 0.17769905094541394, 0.15271238579287638, 0.16395802858528974, 0.14963138758589234, 0.1907154724082607, 0.1551408393324678, 0.17599054948626092, 0.20376620125920963, 0.1802752396775823, 0.231173799169904, 0.18414859897382074, 0.1895537337033384, 0.1893156557029655, 0.20768673888392786, 0.17883222997070336, 0.15307230907615854, 0.11440250795331774, 0.11607390235572912, 0.14279691983091525, 0.13099107549899258, 0.11809694321234876, 0.11508117505168647, 0.15898349943576962, 0.12093899883226389, 0.16855034605729557, 0.16961666594396774, 0.18404638515337146, 0.19944972311086406, 0.2112121228525219, 0.18095614672208116, 0.17875145784052204, 0.17872333726498668, 0.16960168717788782, 0.1452779578060488, 0.15051148708335182, 0.1542865639880754, 0.15345247639641857, 0.1561582633339914, 0.15759149588660892, 0.14617303890609568, 0.15666841674686915, 0.17358749400995077, 0.15475610959986263, 0.1788904577886158, 0.17359206106664204, 0.16033208819916, 0.16700915282108275, 0.13361572922617382, 0.17720362160306813, 0.1597277796622948, 0.15728372346554131, 0.158050011382879, 0.15054062955545233, 0.223183260076799, 0.15391404012885979, 0.15671493473802056, 0.25426593382972174, 0.20525877971213957, 0.16448694155013566, 0.1919749716492648, 0.18221552398331498, 0.19758887832569483, 0.17386732772572921, 0.1951071206230347, 0.2135749380374129, 0.1847097991570016, 0.17349443646019158, 0.18402923075816213, 0.20568880668582523, 0.0737939481473946, 0.06202598005805671, 0.08003459864226081, 0.07694594025616408, 0.06352021075182424, 0.06431382997842305, 0.08047939591379238, 0.07647278409671676, 0.05749887663900788]}, "mutation_prompt": null}
{"id": "091ef4f9-7146-472e-9bc5-a66354d54273", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.4 * self.budget:\n                new_size = max(5, int(self.population_size * 0.8))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Introduced mutation factor decay\n                mutation_factor = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / np.mean(fitness))\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Dynamic crossover rate adjustment based on generation progress\n                gen_progress = eval_count / self.budget\n                crossover_rate = 0.9 - 0.2 * gen_progress\n\n                trial_vector = np.where(np.random.rand(self.dim) < crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introduced dynamic crossover rate adjustment based on generation progress to enhance search balance between exploration and exploitation, improving convergence speed.", "configspace": "", "generation": 28, "fitness": 0.13630763627359502, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.12.", "error": "", "parent_id": "1ec64cd4-53b6-480b-afc8-73075d8c5e25", "metadata": {"aucs": [0.258228475127275, 0.27134621867410813, 0.25135427388896936, 0.2507973643511079, 0.253665275689258, 0.279164758676846, 0.24416193840712508, 0.2446271550999688, 0.24632804894994997, 0.025955302126376978, 0.013658608051695609, 0.013211273916849287, 0.028742299723796494, 0.038423370750243935, 0.016717365835116516, 0.026326795824762828, 0.029306759919633607, 0.01964044041194779, 0.061555991303713364, 0.06597916944267668, 0.05756506039700182, 0.07552909620501636, 0.08157165280426848, 0.07335500411410689, 0.07729601574053724, 0.08164115031657171, 0.0762942012335518, 0.03405514962847578, 0.029092130717343956, 0.04094358752200955, 0.06294195799723368, 0.060047102684145814, 0.06583545467950791, 0.06728994860408277, 0.06597391776241979, 0.06845955513431012, 0.3670468231923807, 0.41885954049286755, 0.3890155390364878, 0.42367162237325817, 0.540513822786373, 0.7991470037467083, 0.6613463093634492, 0.7528069151004682, 0.3178566154701753, 0.1053831988425723, 0.1256142916892059, 0.1068029805061036, 0.10314522056860476, 0.09397258644549988, 0.0848017903988324, 0.14021581771677716, 0.1085186968619879, 0.15630049496580434, 0.20282958094244707, 0.20481937961355112, 0.19115167767334773, 0.20694761079322121, 0.19949203638566393, 0.20842891816467024, 0.20645312712647623, 0.20559431933209882, 0.2008380892722067, 0.06215693568861658, 0.06424733447993636, 0.06240371111014542, 0.0636271087566691, 0.04559049275528182, 0.028788074447778533, 0.05763266511586862, 0.05891229016297983, 0.08317966467191673, 0.07516158793631111, 0.06903508486967169, 0.0709848486972865, 0.06696763883234691, 0.08942378041012522, 0.07776167662115496, 0.07448554328024748, 0.07506065514570603, 0.06263798778076213, 0.007272867511672998, 0.005917667731837328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019117330237214958, 0.003965247676319228, 9.999999999998899e-05, 0.07457662762183248, 0.07673351703425246, 0.11764875659950935, 0.07384557447559759, 0.055107237718794, 0.051349758850645966, 0.14130598689995, 0.0732006568055591, 0.06301337047429101, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026817517865456275, 0.03701965612984148, 0.036349222113681745, 0.03338304514139945, 0.03789636217313419, 0.03293192066823225, 0.014631991641982478, 0.021070208054713713, 0.02591786351105896, 0.22607281613950903, 0.23060362536530032, 0.22683261381608577, 0.24365099338624263, 0.23561831351576534, 0.2429824295424915, 0.26493007912742605, 0.26474344229869395, 0.25600242134023454, 0.07339314463868507, 0.07320678124299063, 0.06315271592847127, 0.06839780505340731, 0.07191086964754578, 0.07030683330664433, 0.07489534032468836, 0.06477056462970665, 0.07376582981290392, 0.17289056289133875, 0.1245731554282491, 0.12770774071284363, 0.16056552913200173, 0.1523824594668295, 0.12997021470077774, 0.15578208262020543, 0.13854805266432502, 0.1400918615038963, 0.17096816064686227, 0.16835448598952696, 0.18029579521894434, 0.20088149160628677, 0.19839518161112168, 0.199843118529203, 0.19241607897558433, 0.20148218557922104, 0.19178243339684897, 0.13051586815469052, 0.1459319310790692, 0.14383071244694967, 0.16532392831507137, 0.1615249293550245, 0.14315252210686014, 0.1343865792045813, 0.16147767582133143, 0.1369738699185622, 0.16897586255598107, 0.1562868744039717, 0.17757265718647142, 0.1710241708809621, 0.17320479707664782, 0.17337536667805364, 0.19291020736918119, 0.19486338534603087, 0.17065862918370878, 0.15801808138964046, 0.16414715364891475, 0.1615160547027693, 0.1640058049264086, 0.1725126706594039, 0.16372505034931695, 0.16446579695092456, 0.16738879974428622, 0.17801021433097652, 0.15905025376876836, 0.24412057227002637, 0.2387419087437167, 0.2520648812654823, 0.20906415400342437, 0.22652143989469065, 0.19233434878390165, 0.1884879776688111, 0.1931070923955054, 0.21344396328970838, 0.1628324378284749, 0.17820528798324797, 0.21463753515306594, 0.17684128604914873, 0.1604826834812969, 0.16616175730665472, 0.1716662034651717, 0.17261894966629387, 0.1819752172953455, 0.190584779834453, 0.1789709953959404, 0.18683568409856555, 0.2135749380374129, 0.1826950566001898, 0.17693351050292982, 0.18087537583090407, 0.20668824754282455, 0.06077127470031607, 0.07011965447446777, 0.07095517200405788, 0.06497234992530831, 0.07227737987496019, 0.0644161188643968, 0.07532529613519179, 0.06212882688664634, 0.07404026943904285]}, "mutation_prompt": null}
{"id": "92fba998-3a14-4277-ace4-1e37eeb852f8", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:  # Modified from 0.4 to 0.3 for earlier resizing\n                new_size = max(5, int(self.population_size * 0.75))  # Changed from 0.8 to 0.75\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Introduced mutation factor decay\n                mutation_factor = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))  # Added a small constant to avoid division issue\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Fitness-based adaptive crossover rate\n                self.crossover_rate = 0.7 + 0.3 * (1 - (np.median(fitness) / np.max(fitness)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with a novel mutation factor decay and adaptive resizing based on convergence.", "configspace": "", "generation": 29, "fitness": 0.14125298172362208, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.11.", "error": "", "parent_id": "1ec64cd4-53b6-480b-afc8-73075d8c5e25", "metadata": {"aucs": [0.2819301247972047, 0.2667752159032114, 0.27786145458394107, 0.2751854175764914, 0.25209249753045593, 0.26829073816516336, 0.2034543988492754, 0.13561830902797933, 0.14368255874629376, 0.011272679344660919, 0.033659065780172415, 0.03676579491730625, 0.026207632182995266, 0.0062110701559031645, 0.0005383525411665202, 0.02054306342282486, 9.999999999998899e-05, 9.999999999998899e-05, 0.057328734662816516, 0.05492073946518705, 0.06161110093368427, 0.07764547727428361, 0.08324840035263026, 0.09321619766197475, 0.14507935412789807, 0.1017579114470527, 0.08925869231516248, 0.032663724472889566, 0.03372962513217714, 0.05365682438384789, 0.07381543639144872, 0.06540190057795003, 0.0803752866511992, 0.06730121031168346, 0.07126097863670544, 0.07326470217317727, 0.44425106830725447, 0.4647375529695609, 0.13958950500931055, 0.7081511602308969, 0.7185984416027927, 0.554985651016747, 0.6861864051036783, 0.20482699063655418, 0.2064288564126494, 0.11228082922126836, 0.1304181506673645, 0.11480837910231434, 0.09334173778087784, 0.09595313974588204, 0.0982562489315002, 0.13767182641680809, 0.15150529262116652, 0.13952324586433784, 0.2095678629043496, 0.251265323499297, 0.20219839927497119, 0.24462489018761735, 0.23884704268865276, 0.20617326184086726, 0.23194058336487167, 0.23705270470129391, 0.17653689334488187, 0.12069819241584756, 0.07956879377652581, 0.08319651539128026, 0.04875507605911422, 0.05574038506426782, 0.02823102338085559, 0.10176898242600363, 0.0872102075037765, 0.08084601516465884, 0.09290966330762296, 0.0988787813785661, 0.06827520529517384, 0.08850557994413122, 0.13443864500168634, 0.14431464681520412, 0.09778792588238117, 0.09561768244825564, 0.08652731137487368, 0.06731089537357926, 0.004487488034566001, 0.03907904739484025, 9.999999999998899e-05, 0.032519819290664054, 0.06361968455552547, 0.030361105221064055, 0.027337359445221643, 0.03999330985363536, 0.1014646526345776, 0.11526250393626958, 0.12355909030588641, 0.10370645878310225, 0.09674867964958866, 0.1174015431711859, 0.12808578656341074, 0.13955893337368486, 0.0882224516655391, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005468296161574293, 0.008165264383667825, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04256318632998113, 0.0515585383124193, 0.0517924813495827, 0.04310862511867386, 0.04667862737817252, 0.02339410188080071, 0.0504608290413453, 0.048041597845574824, 0.03021071762456018, 0.2003844423089155, 0.22439598895427093, 0.22685209086869296, 0.20635733687287838, 0.22348098925605842, 0.21442345801608154, 0.27482094622495046, 0.2834675148153908, 0.2568243231925045, 0.07566335305257377, 0.06667003404772642, 0.08026489376908741, 0.07519321017789538, 0.061856370499055124, 0.07649784761391276, 0.06993405656626606, 0.06405996014517046, 0.08176483096035048, 0.15164596532466224, 0.12795443197862533, 0.13282961147971217, 0.14322166893578336, 0.14353729999323583, 0.11868257647059288, 0.15326317143060209, 0.13040016372384067, 0.13303026025944276, 0.1646048523453706, 0.16423494374772996, 0.16814906059237933, 0.20167825486035829, 0.22019665601057392, 0.1980818645869824, 0.19516950760393736, 0.2206498909901432, 0.19072333809557396, 0.14319642681956157, 0.1408982236102082, 0.13948988256064476, 0.1693940389889993, 0.16868128670987914, 0.1658063292471692, 0.13802126591063735, 0.1682053185195297, 0.14405324516107687, 0.1771212977272737, 0.18311091008789704, 0.1687142824912129, 0.17253530967021158, 0.2167533430498204, 0.18710516245988218, 0.17021555053755766, 0.17072055473716696, 0.17401001175679176, 0.17059320687777124, 0.17014093821560605, 0.1621060683724278, 0.17124116410404144, 0.19728254018782698, 0.16702604990599434, 0.16243476100006515, 0.17906670766446675, 0.17733890858109425, 0.2501030700052074, 0.18067317168958374, 0.2190798199986781, 0.2777222506596966, 0.18530305398894298, 0.23940579051695832, 0.1721971450339439, 0.22393165790117953, 0.20314125154001417, 0.1543942180572545, 0.26842756287180414, 0.15889401957923766, 0.38001464241238136, 0.19417465683174573, 0.16450839260909922, 0.1749563809831427, 0.1688566836339731, 0.17560694680498234, 0.18477497265362386, 0.1958433642088141, 0.2022932733833539, 0.18861320022111372, 0.2135749380374129, 0.18209729016397191, 0.18471876111549257, 0.18040804070576955, 0.20641883278210504, 0.06991193138927354, 0.06742337918952912, 0.07379657441282816, 0.0657050614245136, 0.07062230176515893, 0.0711230178648753, 0.08169280280712887, 0.06802285035468247, 0.06620697272525633]}, "mutation_prompt": null}
{"id": "442ad521-ed46-4834-8c91-738b01671207", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Adjusted crossover rate for exploration-exploitation balance\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with an adjusted crossover mechanism for better exploration-exploitation balance.", "configspace": "", "generation": 30, "fitness": 0.14216957567457256, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.11.", "error": "", "parent_id": "92fba998-3a14-4277-ace4-1e37eeb852f8", "metadata": {"aucs": [0.2760611267805948, 0.26248487125593023, 0.2836849515459038, 0.2835337692461709, 0.2615543837968002, 0.2496517266683792, 0.26121392079012284, 0.251092589273595, 0.2820052690605537, 0.008615410861052664, 0.010030229974770322, 0.009438742142762191, 9.999999999998899e-05, 0.006375110656654526, 0.04444660551666946, 9.999999999998899e-05, 0.003103255471934574, 0.016985358621980362, 0.04531400918875084, 0.074952034528466, 0.04516839346401025, 0.09250553323937072, 0.0745214744290068, 0.09199247094457863, 0.0954814090597712, 0.09642564440568169, 0.08836058469856256, 0.03812810589492188, 0.015149668515456183, 0.031197995385342292, 0.07211602844231524, 0.07359252169319785, 0.07821912842363798, 0.07005723055431701, 0.07004611887448209, 0.07262922281985107, 0.47922609369413816, 0.5727828342044896, 0.4544601506722554, 0.49807158642900695, 0.7142415540096012, 0.5152707826772388, 0.5815753992589732, 0.7032160580092182, 0.42574041400478757, 0.10674058928537378, 0.11729995007973415, 0.12504448859109907, 0.12323887758388608, 0.1104068495745485, 0.11125819678096782, 0.13345304139514924, 0.14220422440050584, 0.1331556733463689, 0.19305402959543905, 0.19961054759085295, 0.1916892081335808, 0.2573751546560705, 0.21962355819355595, 0.19908825149988163, 0.20407027060223448, 0.23384207096536747, 0.20536141966603338, 0.08731658830766009, 0.06926075222613959, 0.09990381197274911, 0.024277604480021364, 0.06813991643650585, 0.02741687945474025, 0.07774365041307352, 0.07856530230342829, 0.11099440583375564, 0.0837148724399649, 0.09808779856108507, 0.0848957100665364, 0.12036057858867366, 0.11137592400378471, 0.09352445043338997, 0.09194740046068695, 0.1012723669789346, 0.08555937558114424, 0.029375190687243258, 0.038411764379324476, 0.00412370799766737, 9.999999999998899e-05, 0.017967410138070017, 0.016225340049765724, 0.01805111644619717, 0.01630825421692572, 0.019715136828401203, 0.1142107832169228, 0.10005766915586478, 0.10292661054359287, 0.09585906805119104, 0.10662198064106743, 0.11180027550626326, 0.09561246424464132, 0.10849850750729184, 0.09605856209742158, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005580273948049386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05639118806960197, 0.03909546720569146, 0.04808989087658233, 0.0368114957613872, 0.03959912824071854, 0.03251962257605323, 0.014467334109971142, 0.009429657936046665, 0.008404306149626062, 0.2003844423089155, 0.1871710143165939, 0.1820210350527619, 0.2055799784281095, 0.19361270673363107, 0.19226744717352073, 0.26261551570920305, 0.2773955519753901, 0.2617748484285418, 0.08132652375449578, 0.07193618493259568, 0.07849422823846874, 0.07292002642742224, 0.07323145663686115, 0.06496929245344962, 0.08264277529164321, 0.1100419106319066, 0.08771414690383295, 0.14214731801307845, 0.14569343328220552, 0.1492531129263316, 0.17315104960349126, 0.15152162340611286, 0.1585034961328613, 0.16672072771399504, 0.16344635370155336, 0.143275773165088, 0.1602710620254989, 0.15059180881326262, 0.16814906059237933, 0.2251793982211927, 0.2086369897996364, 0.19553257714087435, 0.193823424594596, 0.20797591202506327, 0.19522323300411026, 0.13804698679377203, 0.13150122832360722, 0.13697982057427893, 0.16128440425429758, 0.1712680845272243, 0.15937913753527955, 0.14133103970248428, 0.1633857817134301, 0.1485052410495067, 0.1733676077206352, 0.16415777883743699, 0.18321481416338015, 0.16619991009534352, 0.17308489619571632, 0.1834427871217187, 0.1813717933537251, 0.1768719164147493, 0.18338562369702383, 0.157506134712448, 0.1661980558086943, 0.1539491782002127, 0.1748822659465784, 0.18191326999389357, 0.1688847955128564, 0.16062495204796634, 0.1680362487433391, 0.19602640821891815, 0.20022607136283466, 0.21691209459757588, 0.17655103907780667, 0.2638864924546712, 0.1544204804066971, 0.29205643670701065, 0.18053779018017246, 0.22519107111071024, 0.161723722499428, 0.18065082268311894, 0.18791694089754996, 0.15337980359126013, 0.2302326132116792, 0.19606913749796628, 0.1859085836241826, 0.17086295621403857, 0.17310056462572343, 0.16237205116605347, 0.19224371042490807, 0.19455229504151406, 0.18711748788871263, 0.18695905839007787, 0.2137935483563117, 0.188699157700703, 0.18528818893315113, 0.1825261211592759, 0.20568880668582523, 0.06380165362084556, 0.06439065645232767, 0.07663769338175386, 0.0663161230755892, 0.07317344223454236, 0.059098846848216424, 0.08308728565450307, 0.07097843791066338, 0.06737579297327068]}, "mutation_prompt": null}
{"id": "e0b4c484-a3bc-46f7-98bf-146613b9e8f0", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Adaptive mutation factor based on diversity\n                mutation_factor = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor *= 1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean()\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with adaptive mutation factor for improved convergence speed.", "configspace": "", "generation": 31, "fitness": 0.14634912383787435, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.15.", "error": "", "parent_id": "442ad521-ed46-4834-8c91-738b01671207", "metadata": {"aucs": [0.232069667462934, 0.276968331758802, 0.301564455665164, 0.24741343533646698, 0.2609857994330028, 0.2504892894756039, 0.2221932057519801, 0.25094404751665156, 0.23824132964572664, 9.999999999998899e-05, 0.02208043264260451, 9.999999999998899e-05, 0.011942028295557239, 0.011731090182572013, 0.01886699596547714, 0.03599886642425387, 9.999999999998899e-05, 0.010811239300143827, 0.0416715754326662, 0.06132908814729576, 0.04418338183215509, 0.0787259427942979, 0.0810789075576911, 0.07991119252341017, 0.0826669336537087, 0.07748795324525859, 0.07638319722225606, 0.03523570797489861, 0.028499231690840454, 0.040771554288347445, 0.0777144964251194, 0.05722331318698215, 0.05880019486841159, 0.07181978764281716, 0.0698401802359826, 0.08030899648972956, 0.9009431534381689, 0.9058091022150344, 0.9049160484613171, 0.6441077895735621, 0.5526681533254898, 0.7521553230758797, 0.5680405119015166, 0.8884904692595734, 0.9003899323158896, 0.11521027911682846, 0.11239951577032337, 0.12364376953839218, 0.07813714229856883, 0.13141389184436925, 0.09092249809095831, 0.16451793070568166, 0.09073073504076978, 0.12015910951929532, 0.21089045618562186, 0.20543099885999627, 0.16461088024554005, 0.20620645623630407, 0.20561483117977564, 0.19842060812890172, 0.20364515126543414, 0.22328474175823365, 0.20450221199755214, 0.08701329088884135, 0.10358559743391049, 0.07755441141435682, 0.043994232408176126, 0.0403998934259846, 0.02511017124896575, 0.08418153463591038, 0.10964907411565272, 0.09571661499164164, 0.08188302901286515, 0.08849150608517542, 0.08407072899859214, 0.06750424012101486, 0.07366654946301443, 0.08961117505636795, 0.07876451136153795, 0.09130171694481581, 0.0681561438972923, 0.04465339675442259, 0.02380340384829327, 0.004596354092296084, 0.006271085372307472, 0.005466552147813664, 0.031767302364619665, 9.999999999998899e-05, 0.019220652418012296, 0.026811208322737312, 0.07905572108632153, 0.12454138959100214, 0.11628950536198424, 0.08872920994764677, 0.06463663169444356, 0.09317646518418898, 0.12259031163993128, 0.09135538435352919, 0.060834833252385034, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03779769266993194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05077475865170633, 0.05306343623222387, 0.04453647015450879, 0.04218606716783979, 0.031184463115706995, 0.030833551107307344, 0.010948785285268992, 0.009456927893302436, 0.01159231670388472, 0.2003844423089155, 0.18462911766473922, 0.18365344224157765, 0.2055799784281095, 0.17610583723822004, 0.19226744717352073, 0.2676324939679534, 0.26638774781654306, 0.2581992564318675, 0.07615513240666716, 0.06876146009837336, 0.08879336315622821, 0.07314931367267197, 0.07941953450361183, 0.07922181050135657, 0.06050212383972775, 0.06160504556802482, 0.07534241535129271, 0.15878178938377097, 0.13540817451561704, 0.1337113709118567, 0.1836440450834892, 0.1474959468056548, 0.16090598793396294, 0.15498804969110624, 0.14416425653736897, 0.17398053200360442, 0.1604137259708086, 0.15059180881326262, 0.17465721232071196, 0.1972151944032633, 0.19414210409893207, 0.1989265245586449, 0.17412717987134185, 0.20008333441160486, 0.18584627977985624, 0.14610610050811124, 0.13679183761265357, 0.13380253938907571, 0.14841381318542335, 0.17778419689319547, 0.17036328430312186, 0.14916142616987216, 0.14363755646390242, 0.12572316672367034, 0.1571476590679971, 0.1504433740169976, 0.1649174264980604, 0.17808517287107517, 0.1708818431594905, 0.19627764881484389, 0.16847423364427783, 0.16233567135933213, 0.19180546263752296, 0.1510507705459111, 0.16404686729063578, 0.14992193494048767, 0.17347200033512833, 0.17773411902558978, 0.18403428427885282, 0.15985460658071948, 0.173131735860785, 0.16837221876817476, 0.21768653120017611, 0.20308076881293757, 0.1668451469458727, 0.2600035472632307, 0.20117671265172743, 0.14695389491967448, 0.14586808729919398, 0.14823827752521523, 0.1599093268729883, 0.14164208762155028, 0.19492653064024767, 0.16118857432482725, 0.1346970497494372, 0.19617182543868994, 0.12267873604860124, 0.17300668840343858, 0.16448694155013566, 0.1596214576108128, 0.17605807923960204, 0.19563479224689795, 0.19176442110998393, 0.19173247333353494, 0.2135749380374129, 0.17902304315908135, 0.19174790766038552, 0.18973849107102791, 0.20568880668582523, 0.06296941740267481, 0.07578599181359913, 0.07899375354214588, 0.06388686172528468, 0.07288709386693881, 0.07183369434901632, 0.08209430657173367, 0.06664572381088962, 0.0812824987313826]}, "mutation_prompt": null}
{"id": "6849eca9-9fae-4c6d-87de-f880f2ea763d", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Adaptive mutation factor with diversity consideration\n                diversity = np.std(population, axis=0).mean()\n                mutation_factor = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor *= 1 + 0.1 * (diversity / (np.mean(population, axis=0).mean() + 1e-30))\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with adaptive scaling factor based on population diversity for improved convergence.", "configspace": "", "generation": 32, "fitness": 0.14162735466988038, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.15.", "error": "", "parent_id": "e0b4c484-a3bc-46f7-98bf-146613b9e8f0", "metadata": {"aucs": [0.2896568294415772, 0.2915330601887386, 0.27874140652407065, 0.2920862470088026, 0.2936766546336905, 0.26607992282857773, 0.29644610082902045, 0.25070503388315857, 0.2631134932617474, 0.015295388542429511, 0.012936025312085597, 0.0026354273677541284, 0.010848606325578491, 0.001661578845031042, 9.999999999998899e-05, 0.00733803136479072, 9.999999999998899e-05, 0.005651582880862427, 0.0636446969498442, 0.06362866696155056, 0.03162471085292784, 0.09554696732002088, 0.09544790066390652, 0.06917117165659237, 0.08525302076958374, 0.0838358535912559, 0.09196843502115704, 0.03929712479530112, 0.037746927538821584, 0.028768542186533907, 0.06771521667434932, 0.07368781437321537, 0.045663114623430534, 0.06552115505581912, 0.057790160087361264, 0.06656028363305122, 0.8946910368452546, 0.9058091022150344, 0.8887906158586711, 0.28747016360307565, 0.9004385609934401, 0.4714192385450555, 0.7191419915208862, 0.8911610278168755, 0.4005005648488662, 0.120881559992708, 0.1369247885723084, 0.11320753572316722, 0.0953792027607826, 0.12878708412864703, 0.12124496184389633, 0.12217560886694467, 0.1033282056005963, 0.10886657748925443, 0.13506031527768758, 0.19308637766117165, 0.15133752624787944, 0.3861388327497749, 0.2056403851853803, 0.20222237244296426, 0.22296161089980837, 0.19640065543920715, 0.2032248182121842, 0.09660867099819648, 0.06028772568089025, 0.07964488142143378, 0.04030679016704575, 0.028803260142231335, 0.03813375668351582, 0.07634532562143881, 0.09016663253500878, 0.09328581512367329, 0.08419280088116443, 0.08175768009838191, 0.08324788815729867, 0.07229939556092868, 0.08270069352484066, 0.05350647547068188, 0.07796126508104662, 0.06018224448016862, 0.06344034288698697, 0.03336640653625067, 0.014792721784129714, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013158165675511757, 9.999999999998899e-05, 0.1153155813939466, 0.12758291425465396, 0.10065456279155294, 0.07043108249643593, 0.06957514376388285, 0.06673931994489724, 0.06996454176160116, 0.09140346381124387, 0.053611107984183226, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0033132839000201697, 0.005127050062784466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04466550056520957, 0.0953952984956461, 0.061699448048892935, 0.02527961345763652, 0.03349351057364347, 0.008991590604937816, 0.004414871324820324, 0.004254988072034616, 0.0628194140413687, 0.20832621277414232, 0.18462911766473922, 0.18590694907866223, 0.2055799784281095, 0.22917040459387017, 0.19226744717352073, 0.2789570167787899, 0.28343813368427806, 0.2667007299362948, 0.0627219733958927, 0.0722382655261461, 0.05987702427306618, 0.07519123925448201, 0.0734762528361993, 0.0848062509380596, 0.07127244434275293, 0.08519620632825242, 0.08902688139173842, 0.1382004927373477, 0.13085959556281979, 0.1440301235255267, 0.17327428467925, 0.1779504620294423, 0.14749010014293185, 0.15330867782599655, 0.13520838704504023, 0.1303271966665952, 0.1602710620254989, 0.15935935837143567, 0.16814906059237933, 0.17833350924880398, 0.21050752200086031, 0.18325583963919867, 0.17827602272642684, 0.20128271538666453, 0.16963965744163723, 0.14391195727658812, 0.1238921687159773, 0.15685282010540724, 0.13228718646199178, 0.14273257050565002, 0.13756953127371985, 0.14771461329377322, 0.14868910871464092, 0.14140346631200484, 0.1566471688661346, 0.143768417512686, 0.15301108279790587, 0.16182520002739398, 0.14836042943559336, 0.17575167780662648, 0.16210984603842937, 0.1463099977642338, 0.17587476704645089, 0.16969560980819265, 0.16800193665686836, 0.15959954389083764, 0.16867327590071013, 0.19072679641880286, 0.1705745014272041, 0.16774062683579827, 0.18105896735733118, 0.17457884232028809, 0.1459508439111774, 0.16679477618376493, 0.16080338534719207, 0.16314141037353658, 0.14727196099098872, 0.13549854063320366, 0.1907057597358628, 0.13656391611683194, 0.1598363265206897, 0.1492752212198062, 0.15712311535679058, 0.18013766879410653, 0.24435320974298724, 0.15175189179473925, 0.1271751545025731, 0.1709192896124092, 0.16448694155013566, 0.15477022705321886, 0.17991141005597366, 0.18921924205922558, 0.17475998508601842, 0.18798881408676293, 0.2135749380374129, 0.17688596522595978, 0.1826926442873481, 0.1807328919844673, 0.20568880668582523, 0.052299942087493, 0.060688661159359114, 0.07917884409021259, 0.05916857697194933, 0.06756419973635353, 0.05951013465669586, 0.08142841361679254, 0.08051876919658585, 0.06727892441724237]}, "mutation_prompt": null}
{"id": "8c56d45c-ba00-4349-93ff-093254cc57c7", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor *= 1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean()\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Dynamic crossover adaptation\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.std(fitness) / (np.mean(fitness) + 1e-30)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with dynamic crossover adaptation based on fitness diversity for improved convergence.", "configspace": "", "generation": 33, "fitness": 0.13597454589981034, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.15.", "error": "", "parent_id": "e0b4c484-a3bc-46f7-98bf-146613b9e8f0", "metadata": {"aucs": [0.26781193224107447, 0.2556049101530419, 0.2480256700394441, 0.27198993502816937, 0.2780199934906247, 0.24688003088095944, 0.2655784107883181, 0.25157956349755517, 0.2751550272644073, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030086348019408016, 9.999999999998899e-05, 0.007879759623066307, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05488572732265529, 0.05221100008419344, 0.05626552287628528, 0.06224264908253663, 0.06944132805860559, 0.0688272638531724, 0.0687728652124937, 0.06608743292585528, 0.06025617693817098, 0.022932461233801216, 0.018602044662581085, 0.034643561518078014, 0.05538359391550962, 0.050643981998082066, 0.055026459376134707, 0.06345540256475446, 0.052720346842362376, 0.06035107605803025, 0.8909305586525853, 0.9058091022150344, 0.9049160484613171, 0.8720943331684146, 0.7035841533809943, 0.5489389563876073, 0.45086182997022883, 0.7205304230547576, 0.548332938092488, 0.08417704075490196, 0.1138171889394658, 0.10171882691615464, 0.10466997336474759, 0.10710613126274171, 0.07725210081264244, 0.11334183385206176, 0.10131666901082992, 0.10639776281733648, 0.19521724529823936, 0.2208951151479518, 0.17281121883890993, 0.18813818549968941, 0.2168403585632085, 0.21795221420134503, 0.1559404565087058, 0.2154924373593916, 0.1676091258532617, 0.05209179966409461, 0.024688334327249817, 0.013788006728814084, 0.004421972153588971, 0.025193692225538133, 9.999999999998899e-05, 0.04477595977751303, 0.03202897889568179, 0.026675036927665485, 0.054005656426184934, 0.03716063497189093, 0.03655734857261872, 0.055778298617238375, 0.07770276555854472, 0.07039693816558479, 0.06610654184090636, 0.05242612979108796, 0.03580818827699461, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04281494170462097, 0.06624031158298771, 0.09098389993315892, 0.0551003213514476, 0.08537380819124885, 0.04674121159604927, 0.0525615647731873, 0.0729553268429376, 0.04825579076022801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03053158200659034, 0.059005431095105254, 0.030265275431215155, 0.02685614860843566, 0.039951037513335175, 0.03156590639564416, 0.01329398684579608, 0.005943309576703526, 0.006165922858973327, 0.2003844423089155, 0.18462911766473922, 0.1799638106000897, 0.27393653516971495, 0.23812516391649108, 0.260752105794953, 0.26019549847808354, 0.24124097430647884, 0.2576848138841704, 0.0738570783991005, 0.07139563495829893, 0.07167633116929595, 0.06909649279404495, 0.0704544302409007, 0.08889891986891962, 0.06461388146172609, 0.057565737493086244, 0.0618330641616347, 0.13780547914096775, 0.1650685124621627, 0.1360949918658484, 0.13938881553502558, 0.1417135558757192, 0.134070249897418, 0.15892820203016234, 0.14531159941561178, 0.13582978470615814, 0.16116612263048846, 0.15170310690837252, 0.16814906059237933, 0.19211993194640087, 0.20812794828783088, 0.19203562186244205, 0.18786197682250028, 0.2168128259481139, 0.19106033724756877, 0.13042527298204454, 0.11778415744417892, 0.12444534990130818, 0.1602947496686884, 0.1663679027244256, 0.1482322615159164, 0.1407240898721931, 0.14892577386757333, 0.15644509823751052, 0.17143493354943584, 0.1498181054652179, 0.16029954895133924, 0.16582286479871944, 0.17417470970092852, 0.16456940721983626, 0.1736045086582908, 0.15285316824052442, 0.16686444743375284, 0.15712106772296142, 0.15539665542609815, 0.15072668251215304, 0.161892272174057, 0.16507330364322914, 0.1659672814443558, 0.15053974520323676, 0.1600108231195949, 0.1651725408204796, 0.17371613379020834, 0.20314198146933837, 0.19607397166484863, 0.15890900114309658, 0.1501421510654558, 0.15849317607077174, 0.23765013482069786, 0.13742192825735933, 0.15937565730680125, 0.1884307760717856, 0.14214561041719775, 0.15454456436073505, 0.1728819263785648, 0.15929567385756804, 0.13518600452995633, 0.18528143847687728, 0.16448694155013566, 0.18895339645418419, 0.1759471820410874, 0.1888621350563029, 0.1834470478547613, 0.18683568409856555, 0.2135749380374129, 0.18349907332670556, 0.18194466191874448, 0.18711651775088733, 0.20568880668582523, 0.06318160390845606, 0.066106351626389, 0.07336224089288212, 0.06352065534280393, 0.07604363163420202, 0.06812135583761991, 0.0801922638889715, 0.07154696609437283, 0.07305440182781475]}, "mutation_prompt": null}
{"id": "78d654a1-6ae8-43ca-a8c8-39f65118ba2c", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.35 * self.budget:  # Slightly altered threshold for resizing\n                new_size = max(5, int(self.population_size * 0.7))  # Adjust the scaling factor\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Adaptive mutation factor based on diversity\n                mutation_factor = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor *= 1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean()\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with adaptive mutation and dynamic population size adjustment for optimized convergence.", "configspace": "", "generation": 34, "fitness": 0.14264451762693883, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.15.", "error": "", "parent_id": "e0b4c484-a3bc-46f7-98bf-146613b9e8f0", "metadata": {"aucs": [0.25533627485974075, 0.24708248478070804, 0.25245297841865433, 0.2746555129915029, 0.2564415477101124, 0.21247359015872636, 0.24215976583968002, 0.19808980839848478, 0.2199091469519231, 9.999999999998899e-05, 9.999999999998899e-05, 0.024776308623495447, 9.999999999998899e-05, 0.010299602219357773, 0.03670999009266984, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03210685975987404, 0.0637903080843002, 0.05203900028071329, 0.08999513216692301, 0.081049483032691, 0.08827452126389401, 0.08532430338297359, 0.08918730464444125, 0.09233751677040603, 0.047228663517926206, 0.019900199875307223, 0.029667742129151686, 0.08187577021383263, 0.06683492441059025, 0.0625661589639338, 0.06679386529612408, 0.08045644106226935, 0.07530708923814322, 0.9009431534381689, 0.9058091022150344, 0.9049160484613171, 0.5042078519069353, 0.6384571592982624, 0.7521553230758797, 0.2145572658900483, 0.8884904692595734, 0.9003899323158896, 0.13414855810621662, 0.1030428192623416, 0.11828284976436465, 0.07640514763118322, 0.10446649360644766, 0.08652754382859607, 0.12827867327855325, 0.08822451732125647, 0.11715185562470976, 0.16554696936936486, 0.2002934859750901, 0.1711391225897212, 0.22091355706559213, 0.23221304011643062, 0.20784793085330688, 0.17937301637188519, 0.24266518384694202, 0.17306810650136517, 0.09124300503219784, 0.09626039795758223, 0.07975922371202981, 0.03295709938011826, 0.0403998934259846, 0.04190114415311896, 0.09681312484403859, 0.09869960465053229, 0.07397429002049538, 0.09085095631635831, 0.08651274878350212, 0.0793544423746756, 0.06994053332935624, 0.06885400466396152, 0.08403618142731484, 0.07488567801735135, 0.08516964309906416, 0.0709145801753821, 0.01718487829244364, 0.011182618812826006, 0.018027387194044397, 0.02172249564915052, 9.999999999998899e-05, 0.04547379736126711, 0.012934275487062274, 0.00841591959776311, 9.999999999998899e-05, 0.06333696830702595, 0.11311387352546265, 0.11917559208291517, 0.05035595245535174, 0.07057765105818559, 0.10504157249259827, 0.09831526487676878, 0.07227833755968882, 0.09185584046836115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041729537184549415, 0.04656074640496788, 0.04440338356110696, 0.03572833036970058, 0.05032379542926879, 0.030509083443246876, 0.009025845275217215, 0.007986640079853724, 0.004656149462500592, 0.2003844423089155, 0.18806149344437573, 0.2056990312164383, 0.2055799784281095, 0.1714511066506922, 0.208126192810553, 0.22387342769014063, 0.19273997337649174, 0.279336044667317, 0.07654705583323462, 0.08559408160024651, 0.07167009066766183, 0.07636611939459437, 0.09863135386382182, 0.0858280372260447, 0.05758106577367672, 0.06875124637484331, 0.07160147526525706, 0.14237865846385322, 0.15143125798215884, 0.1368282679413878, 0.1836440450834892, 0.14589345536809173, 0.1381822343478445, 0.14963138758589234, 0.16460470328142363, 0.1687798826303053, 0.1604137259708086, 0.15059180881326262, 0.16814906059237933, 0.1921188567412382, 0.186632044504369, 0.1772720223341726, 0.1903521522738275, 0.20874992943321824, 0.18971604854423163, 0.1378297931692627, 0.13679183761265357, 0.13499680717654106, 0.15426595231541285, 0.17268288576773594, 0.1892819524446333, 0.12451710757488199, 0.14292779269347355, 0.11904575591533717, 0.1806814643205662, 0.15591751049751035, 0.1683462237250598, 0.1841663559932859, 0.16717754661162476, 0.19925388945270428, 0.17913631188310297, 0.1721309196313241, 0.19667878229520175, 0.15610418023414785, 0.16404686729063578, 0.15382667914732773, 0.18124004103343594, 0.1711488120567929, 0.18382077217709458, 0.15828140651804823, 0.168354988558426, 0.1801620023833067, 0.21674369540994176, 0.21911799274886878, 0.18474793178000137, 0.1639616950706897, 0.1528328622564975, 0.14893002530048194, 0.16215744918477848, 0.15082938673723179, 0.1599502405931651, 0.14489770830857562, 0.24421402507308432, 0.15777614818627173, 0.1441444894488092, 0.19617182543868994, 0.12911574216316368, 0.16802372711069802, 0.16448694155013566, 0.1596214576108128, 0.18197160640468024, 0.19815569173800973, 0.1915308324987003, 0.19067538974524922, 0.2135749380374129, 0.17520720818330215, 0.18190064382421134, 0.1845763506241539, 0.20568880668582523, 0.07949404311248531, 0.0766097241488426, 0.06978615320426507, 0.06954373834756333, 0.07228202840400422, 0.07294464394344247, 0.08558820375294107, 0.06817359594717198, 0.07100250797331786]}, "mutation_prompt": null}
{"id": "3d12ffa7-fe4e-4ab6-8c37-3814e310327a", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.25 * self.budget:  # Changed from 0.3 to 0.25\n                new_size = max(5, int(self.population_size * 0.7))  # Changed from 0.75 to 0.7\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Adaptive mutation factor based on diversity\n                mutation_factor = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor *= 1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean()\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                self.crossover_rate = 0.6 + 0.4 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30)))  # Changed from 0.65 + 0.35 to 0.6 + 0.4\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with a strategic reduction in population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 35, "fitness": 0.14533702881855512, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.15.", "error": "", "parent_id": "e0b4c484-a3bc-46f7-98bf-146613b9e8f0", "metadata": {"aucs": [0.21360209709056643, 0.291839937012106, 0.2294255986355649, 0.2470761878874117, 0.24514173841562303, 0.2644837416545325, 0.23937464581048695, 0.20191663797170123, 0.215762688066511, 9.999999999998899e-05, 0.012166429385341515, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011640121091600841, 0.02056465702002186, 0.030232148380683443, 9.999999999998899e-05, 0.03210685975987404, 0.04496310970400286, 0.02494238013514405, 0.10415814775086729, 0.1005241179844304, 0.08118432795585617, 0.16259457853687742, 0.09258335299624121, 0.09460856404286655, 0.022932461233801216, 0.015149668515456183, 0.028768542186533907, 0.07342375310827465, 0.05450748460525445, 0.08424281956460378, 0.08938963564569369, 0.06996555956851858, 0.09866186154236634, 0.9009431534381689, 0.9058091022150344, 0.9049160484613171, 0.8266083340828851, 0.6522912224666408, 0.5443182946302383, 0.6159977116482176, 0.889171450187248, 0.5404622826620564, 0.1084714697384408, 0.13310930442548874, 0.13353925975078895, 0.07720079298552152, 0.0968125780568958, 0.0796251718449017, 0.11848809234556523, 0.11879878976526448, 0.13121119962891303, 0.2156127484742938, 0.21532100631648, 0.17605206621151848, 0.20526763003826065, 0.20414143413559915, 0.21238890488787243, 0.15312361227679216, 0.21294525722277402, 0.18155697525503012, 0.0992080733235089, 0.08153761380493574, 0.09281151351227168, 0.024921481009996027, 0.0403998934259846, 0.027205122227759282, 0.09867816797096873, 0.08367712139907524, 0.0794131457307502, 0.07744580032633452, 0.07115663047564103, 0.08870898248255765, 0.06685303313140067, 0.07270402283579369, 0.0997604718623144, 0.09927982027081583, 0.07461567530060509, 0.08460070901356354, 0.03313661228177622, 9.999999999998899e-05, 0.013639751679261458, 0.005929060869722558, 0.009792262560553544, 0.034085152193559454, 0.001141024325936768, 9.999999999998899e-05, 9.999999999998899e-05, 0.045420635265057574, 0.09313739332199344, 0.11776547487367184, 0.05949202165075895, 0.0687127404775878, 0.11287913039375708, 0.09359106714262633, 0.08047053473189048, 0.05341689511923797, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03013242461299137, 0.02873451629644974, 0.06289175281703085, 0.0740554987025136, 0.03333114130687098, 0.02974961896660533, 0.06613597670112281, 0.037845468327539655, 0.01583946091626731, 0.2003844423089155, 0.18462911766473922, 0.17965834533621294, 0.2055799784281095, 0.1714511066506922, 0.19226744717352073, 0.2553599771545604, 0.22644713034297237, 0.2084514566938841, 0.09233462463524489, 0.06790206473544791, 0.07999728865048705, 0.07635878993809475, 0.08696239424970953, 0.08720286833730095, 0.0625151941657014, 0.06627606864687074, 0.07498381814852506, 0.15059016271395287, 0.15809027054929414, 0.20318577236863944, 0.14516048714554108, 0.14391798399190026, 0.17282738723057411, 0.15984278661239437, 0.1598400822843833, 0.1644169591423995, 0.1604137259708086, 0.15059180881326262, 0.16814906059237933, 0.1821811956426248, 0.22518166888675017, 0.23647335019112203, 0.18388612729247633, 0.18817527410514623, 0.18279323645671075, 0.12559131404305446, 0.1185154263296645, 0.1345599766821297, 0.17227197076950018, 0.1508464737055052, 0.16859027673461746, 0.1454747625206937, 0.14869422752724182, 0.1338339895757028, 0.18596914956201516, 0.165611328782994, 0.1871912779867434, 0.20028027309869456, 0.15617515603489895, 0.183569628365015, 0.19427211121932186, 0.16816062547450406, 0.1754116052541531, 0.1678916069750367, 0.17036691452849895, 0.15009444259540683, 0.22985686987812637, 0.17316050131510452, 0.17145788349062008, 0.17889775319338563, 0.168849086910681, 0.18062034956592665, 0.19695460008235943, 0.19928777981858437, 0.17274125662833706, 0.27317852694775213, 0.14972110497393876, 0.14117364082351813, 0.13213354288926316, 0.16037423562580022, 0.16539518938999476, 0.13909163833992588, 0.2315793922171725, 0.13625359832497397, 0.24031386259109266, 0.12548899611147868, 0.263652916161637, 0.17186180435057652, 0.16448694155013566, 0.1596214576108128, 0.18293153490250713, 0.1959078366161825, 0.17160363134494638, 0.18773340467283184, 0.21359826062140586, 0.17871090409936574, 0.20217870811726502, 0.18868269819851002, 0.20568880668582523, 0.07119634513815454, 0.07203385042405896, 0.08166358013469399, 0.07466437167203965, 0.06762960588232148, 0.07227796472515635, 0.07788856933379107, 0.07883795550631512, 0.06744463687451097]}, "mutation_prompt": null}
{"id": "5fcc6529-8f25-4a01-ae0a-7be103f1bf0f", "solution": "import numpy as np\n\nclass MemeticDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.local_search_prob = 0.15\n\n    def local_search(self, individual, func):\n        # Local search using a simple gradient approximation\n        step_size = 0.01\n        trial = np.copy(individual)\n        for i in range(self.dim):\n            trial[i] += step_size\n            right = func(trial)\n            trial[i] -= 2 * step_size\n            left = func(trial)\n            trial[i] += step_size  # reset to original\n            if right < left:\n                trial[i] += step_size\n            elif left < right:\n                trial[i] -= step_size\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Adaptive mutation factor based on diversity\n                mutation_factor = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor *= 1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean()\n\n                mutant_vector = a + mutation_factor * (b - c)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.local_search_prob:\n                    trial_vector = self.local_search(trial_vector, func)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "MemeticDifferentialEvolution", "description": "Adaptive Memetic Differential Evolution integrates local search strategies with adaptive mutation and crossover to enhance convergence speed.", "configspace": "", "generation": 36, "fitness": 0.10738229031009378, "feedback": "The algorithm MemeticDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.14.", "error": "", "parent_id": "e0b4c484-a3bc-46f7-98bf-146613b9e8f0", "metadata": {"aucs": [0.16834045273823017, 0.17717609592104766, 0.15905745887908818, 0.16193287893964736, 0.16077847573788617, 0.16173893177844345, 0.1739226485981391, 0.14153762646057189, 0.22117665738163872, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03210685975987404, 0.04807181726610121, 0.026890704766927787, 0.04785583688092798, 0.0382145262355672, 0.04175424206584888, 0.04669437225964268, 0.03588651610472804, 0.06614281290199486, 0.022932461233801216, 0.016120475695539982, 0.028768542186533907, 0.03094447619260643, 0.024443487761251936, 0.024722249860686274, 0.04381692336215415, 0.01681014049016427, 0.033331334323986606, 0.8321847404333581, 0.8822360879426131, 0.8646133362609275, 0.5972817729127322, 0.11738785833779253, 0.847666186436213, 0.10186796261152509, 0.17551773193788978, 0.8806658894895316, 0.06949984127211306, 0.0818804052070482, 0.10171882691615464, 0.04752685190071915, 0.0701914176656182, 0.06596012100668436, 0.10873411537883315, 0.05790070648042578, 0.09836666620269374, 0.12002385599460796, 0.19308637766117165, 0.1603850003914049, 0.09898357197124863, 0.11060283530916681, 0.11793592250846419, 0.08826483685796416, 0.13356950589090089, 0.12005437120636431, 9.999999999998899e-05, 0.021561956509768554, 0.0013511559286667474, 9.999999999998899e-05, 9.999999999998899e-05, 0.010017898548655868, 9.999999999998899e-05, 0.007060511517140378, 0.010765175294588869, 0.005946399720480389, 0.024108524536175846, 0.0006190842955960951, 9.999999999998899e-05, 0.035362057023575866, 0.012559182843972172, 0.03252388938525941, 0.017415707732905905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04745005805939695, 0.06535045920481664, 0.04490689360873623, 0.07578423984715632, 0.056518099899280916, 0.03382257173159464, 0.057936805838045946, 0.0497211637865379, 0.048473098982758756, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011106578504442854, 9.999999999998899e-05, 0.0005272835516280105, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20067363143024364, 0.18462911766473922, 0.18354389317317987, 0.20569771892865374, 0.1714511066506922, 0.19294063505613335, 0.19878725587640278, 0.1583921086460306, 0.19007691539720828, 0.041383239751524026, 0.03758269238801515, 0.027162169800367342, 0.04852117856463933, 0.03407030522671861, 0.041175929318747695, 0.04397942692902601, 0.058275570841442303, 0.056199801617210166, 0.14800894184133961, 0.11183617176527638, 0.12759994004545605, 0.16470265329352385, 0.13511880823300437, 0.13429828005793276, 0.14963138758589234, 0.1419273868967199, 0.12613783019802416, 0.1602710620254989, 0.15059180881326262, 0.16814906059237933, 0.15256926594425346, 0.15412243821391025, 0.162718559808677, 0.14614590791628002, 0.17377774300845283, 0.1450897710833109, 0.11069112585936614, 0.10816084466295395, 0.11711502411817565, 0.10730183224575918, 0.12092313537362531, 0.10466438525210486, 0.12837191517305746, 0.1237427242099084, 0.09321422018317793, 0.1361042001207503, 0.1573880481833505, 0.15173643503771528, 0.1420499434696596, 0.1348712335057658, 0.16008896810226814, 0.13955449568712552, 0.13816422928230765, 0.17985617343156868, 0.13764664148547978, 0.15516209056398034, 0.15901777292936325, 0.1432475899433857, 0.15748346037311167, 0.14493275450512444, 0.14755146802967378, 0.14194783158853264, 0.16207881422481074, 0.12793710027700889, 0.16679477618376493, 0.1593083731255257, 0.15176503580803635, 0.1207914665021157, 0.11366881042480814, 0.1363978108184909, 0.13103481399402683, 0.15692009224327252, 0.1217206759065581, 0.11525834685803871, 0.1476174376136138, 0.12956126951579316, 0.12148707404315395, 0.1442047725128779, 0.1609143438768892, 0.1696885861487908, 0.15163446317533236, 0.17792571340641827, 0.19331201198505776, 0.1862626435079845, 0.19485148261044793, 0.2135749380374129, 0.18903846914722255, 0.2151686739697738, 0.18868719215845564, 0.20568880668582523, 0.04059870889754402, 0.058145903044643954, 0.06585155299632517, 0.054237544842520746, 0.05905261469169132, 0.05065975397331368, 0.07532529613519179, 0.055857000448143124, 0.05315540162353516]}, "mutation_prompt": null}
{"id": "57f71c85-43cd-4a68-9a90-71c9051ba8f4", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        successful_mutations = 0\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Dynamic mutation factor based on iteration and success rate\n                dynamic_factor = (1 - eval_count / self.budget) * (1 + successful_mutations / (eval_count + 1e-30))\n                mutation_factor = self.mutation_factor * dynamic_factor\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    successful_mutations += 1\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with dynamic mutation factor scaling based on iteration and success rate for improved convergence.", "configspace": "", "generation": 37, "fitness": 0.13712360271788046, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.14.", "error": "", "parent_id": "e0b4c484-a3bc-46f7-98bf-146613b9e8f0", "metadata": {"aucs": [0.2759184122141364, 0.258808388998531, 0.23473145874565904, 0.25134150893582397, 0.2680121514302649, 0.25327666397164894, 0.23350136352995143, 0.22563112623406345, 0.24223296408181616, 0.041081916282045494, 0.035842552245921255, 0.005323073509164944, 0.013843569366448372, 0.02037855664464039, 0.019575102521484755, 0.005643976802568229, 0.03536847252877129, 0.01622461175082457, 0.06838325090859287, 0.06432447255843687, 0.048933895735069344, 0.0752021938818338, 0.07936036566400906, 0.07147679500276627, 0.08657176289769886, 0.0628425143960698, 0.07178525827214288, 0.03942934523151165, 0.018402794120200072, 0.04167618205785917, 0.058291794073729974, 0.05677355690261521, 0.05623271075189673, 0.08182537506548049, 0.045816895397337465, 0.05806986827016858, 0.8303521851386263, 0.7672541632869238, 0.2433114543116499, 0.70714218260356, 0.6139219193612554, 0.6016428094342743, 0.8615997264961569, 0.7053123403515069, 0.6639561471768742, 0.09837601349656122, 0.09885317170095076, 0.10678695300511698, 0.09605960300741068, 0.08944025881023476, 0.10726520668807138, 0.1021307233278359, 0.10336143341292359, 0.08919533621105913, 0.16792263888319214, 0.2042474476549493, 0.16805114410563715, 0.18984882751128673, 0.14603774545295833, 0.17169677996728716, 0.17766797676895618, 0.19903465997445424, 0.23056150690353505, 0.08896917602321519, 0.027234959893752797, 0.05099698759856586, 0.041051863923937004, 0.040799449364910645, 0.05004269775006864, 0.06656702061837116, 0.054552580563342, 0.05139239421565711, 0.039903269531143426, 0.0505652984766668, 0.07115857539660353, 0.0571975210951845, 0.06800922069083737, 0.051044349909932674, 0.057392915624229546, 0.05354563455339889, 0.04496611224465685, 0.028989266368382394, 0.01602930799689095, 0.004908424987377313, 9.999999999998899e-05, 9.999999999998899e-05, 0.015410097246240761, 0.04714291184769104, 0.02954456339615741, 0.004784718858937387, 0.09086776078664571, 0.11159918184295492, 0.10146256485615379, 0.09539987962719876, 0.08701991760026773, 0.13390210391004898, 0.10077554445862602, 0.11367277100111917, 0.06797248918673138, 0.003965353446344633, 0.06031076660105772, 9.999999999998899e-05, 0.010711944768624693, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009537875221711678, 9.999999999998899e-05, 0.025982557177775978, 0.042669860078860644, 0.028580897217438728, 0.024799659847672184, 0.02242328239765612, 0.0194074584488253, 0.009157130441908023, 0.0138873987767405, 0.034055858103755554, 0.21632658809236993, 0.19804689729766944, 0.1922519458068528, 0.21438225454121618, 0.1800129537678642, 0.19226744717352073, 0.2592299132003051, 0.23466401585823105, 0.29609785628473806, 0.06616088040756818, 0.07700949160887827, 0.06373158154889402, 0.06729668093103625, 0.06908000639650946, 0.05987731417869213, 0.05491424969551695, 0.05556951227745088, 0.059183689302363396, 0.13763293800309107, 0.14083464385070477, 0.13516719265329558, 0.13934942359855462, 0.15673398099979463, 0.12887687039633589, 0.14963138758589234, 0.15833282652054625, 0.1477377111484539, 0.16828301155916758, 0.1718595344347017, 0.17567810162019815, 0.183089081067338, 0.1869699885960444, 0.1885589550122767, 0.19791501771429443, 0.19573047802504195, 0.1877133059301097, 0.11070335853638191, 0.12213475612649616, 0.1200830794098885, 0.13412348054695944, 0.14755850085891686, 0.13940189639381972, 0.13772294025124032, 0.14091330947851766, 0.13716686586378712, 0.15654787479583898, 0.18640209820466425, 0.1687057222626196, 0.16848248222838336, 0.16568020508987424, 0.17392192638124526, 0.18027046035574534, 0.17422159732000342, 0.18020498169876864, 0.14726680634379152, 0.15954302273236043, 0.15623200765519485, 0.15558571146315303, 0.17211834837423334, 0.15869708784735248, 0.14904659423584177, 0.18227466431491923, 0.17062491041953454, 0.18263861405563842, 0.18398214247010347, 0.2076657514181499, 0.16223337721884545, 0.19405776882975312, 0.1448252091771678, 0.1883819553813464, 0.22860110496815, 0.15692009224327252, 0.16355071328977866, 0.21161653818813253, 0.16278781803771558, 0.16812116406095667, 0.17241949770486442, 0.15286688574443674, 0.20014370651745061, 0.16448694155013566, 0.14783538892454473, 0.1906194703702807, 0.1943673607093046, 0.17575389879127779, 0.18728718511653775, 0.21535873956355922, 0.1838385853259955, 0.18351297982703396, 0.184777496820983, 0.2057967344326822, 0.06936351187575851, 0.06755773912863317, 0.07593701611885773, 0.0641993858147687, 0.07286580319304481, 0.06913781956994514, 0.07583500714221736, 0.06483246384293273, 0.05846307336417356]}, "mutation_prompt": null}
{"id": "20f95e89-21d7-4c16-994c-25c8b5e8f3c0", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Dual adaptive mutation factors based on diversity and fitness spread\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean())\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with dual adaptive mutation factors for diverse convergence adjustment.", "configspace": "", "generation": 38, "fitness": 0.1476505966076341, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.15.", "error": "", "parent_id": "e0b4c484-a3bc-46f7-98bf-146613b9e8f0", "metadata": {"aucs": [0.23115584562315206, 0.2536398693451023, 0.2040693377172802, 0.29691782126110133, 0.26140234213055, 0.21165000640946952, 0.22914414374753378, 0.25795974094094154, 0.2380840047774836, 0.019537286931653575, 0.020882254115608512, 0.14070620070734297, 0.001158337767595774, 0.011280515168901717, 0.03162048802007922, 0.014020410663575733, 0.012281275561796479, 0.019890185284362594, 0.053717842502089885, 0.08769950178155705, 0.0556386447890469, 0.07969040447322351, 0.07591890393953526, 0.08750871971065188, 0.09020791906348291, 0.08566550073388257, 0.1638619439250406, 0.03142681219069221, 0.015149668515456183, 0.033768121667710926, 0.06298839617128782, 0.06722234586776865, 0.06357516163744348, 0.06169433363622834, 0.0660462302679844, 0.08353779806382877, 0.9010011061940166, 0.9058091022150344, 0.9049160484613171, 0.6996642736163468, 0.629591522344688, 0.788641221188669, 0.695665611289739, 0.888558013214552, 0.5290717097619304, 0.13432482424135228, 0.1192901268206128, 0.14186283056785065, 0.12272841039831761, 0.12758345141333516, 0.11895621878897433, 0.14720485549135498, 0.10149567365050394, 0.13063624851619282, 0.15843914191477015, 0.23742661746208438, 0.15493310719665243, 0.2238808118746971, 0.20676511108397044, 0.1755673238355261, 0.2216631794797499, 0.22266982192587814, 0.24066888991123814, 0.06600229512164302, 0.07325446632219978, 0.13012247760453488, 0.06536482614691141, 0.05166163981228511, 0.052087901461043695, 0.09009154397417629, 0.09691120736811021, 0.08571310171758273, 0.06984460253367175, 0.07714109418957504, 0.0704389489531504, 0.05667803893906309, 0.07464018505286862, 0.07809140439881646, 0.05851721611244809, 0.07825732231052318, 0.08724275963073469, 0.03704261205386805, 0.04016980480862331, 0.043754370580115, 0.04365524750526861, 0.021923582036975642, 0.03215030914834538, 0.020977052098565818, 0.013213916906663292, 0.020258296233200745, 0.1340267460403366, 0.1520760306930644, 0.12473080816729365, 0.11126914802554055, 0.13418423476092012, 0.11279411677955031, 0.1177917196034679, 0.0940758092165892, 0.0881252068388867, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00045352386236696685, 9.999999999998899e-05, 9.999999999998899e-05, 0.032473293323360686, 0.03547983315148562, 0.06435520280429663, 0.0440044833863501, 0.014577502813630794, 0.02766107078772362, 0.09134191365334954, 0.025246845205340263, 0.028678765524454364, 0.022631479033869306, 0.022003928811985318, 0.004002874879465712, 0.20456210123307939, 0.1990799977865617, 0.21982858943259964, 0.21125752266623699, 0.19168673011882464, 0.23355699961080023, 0.2403814631794291, 0.2341171481726485, 0.22215483283933968, 0.06736716512222862, 0.07485938039385343, 0.057667161172052284, 0.07383765941632137, 0.07899362377956098, 0.06889090025711087, 0.07203923085927577, 0.0650822175991489, 0.0719881362745749, 0.14376109337993148, 0.1320816697234608, 0.17108194594119774, 0.14357781975573702, 0.1369579317452122, 0.1359588938494113, 0.1621791087297343, 0.13363088446535099, 0.1325124799486881, 0.1602710620254989, 0.1527735278847251, 0.22312195406651947, 0.1956085585700097, 0.1900220515075539, 0.18204482027162416, 0.19340973449091348, 0.20021926886327002, 0.17065726346990762, 0.1267321453206829, 0.1382136010982804, 0.13353962112012963, 0.1731978106515193, 0.17799378341787742, 0.1446540272854958, 0.1413391792660712, 0.17074158613114565, 0.13686089236398347, 0.17409833263249808, 0.14586166761222352, 0.1596172064649649, 0.1666290640917365, 0.1622305414819859, 0.1656298869038244, 0.1513140072276825, 0.15191531306729067, 0.1738360226363489, 0.15987020846987887, 0.15883596178878268, 0.1624149756129989, 0.17348587912861035, 0.1822770178348706, 0.1790105721419093, 0.16828178211062184, 0.1724013623302355, 0.17186054653879124, 0.15349548101890742, 0.1679550184511368, 0.1593083731255257, 0.20635975815951968, 0.1553745538079021, 0.16566238777541298, 0.12727563478002035, 0.14631509092634765, 0.15692009224327252, 0.15633877772023264, 0.15839995382661587, 0.13311994876583233, 0.24365218222226848, 0.12226889985468481, 0.14566609799193753, 0.17303660292946554, 0.17928982519816417, 0.17456012068540128, 0.18839599459679335, 0.1872519740887847, 0.17809836262780498, 0.1959206485073166, 0.2135749380374129, 0.1799613362212258, 0.18846179747611813, 0.18206273109408222, 0.20568880668582523, 0.06199351359971128, 0.0672756145312503, 0.07109016144466807, 0.06423335551374187, 0.06641324317564778, 0.06337259004398088, 0.07990698423775044, 0.06502186862878967, 0.071317895568492]}, "mutation_prompt": null}
{"id": "67377d76-db95-43a4-91ef-72b8662cb973", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Dual adaptive mutation factors based on diversity and fitness spread\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean())\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Adapt crossover rate based on population diversity\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * (np.std(population) / (np.mean(population) + 1e-30))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with adaptive crossover rate scaling based on population diversity for improved convergence speed.", "configspace": "", "generation": 39, "fitness": 0.10249789920477366, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.11.", "error": "", "parent_id": "20f95e89-21d7-4c16-994c-25c8b5e8f3c0", "metadata": {"aucs": [0.16834045273823017, 0.2233238556733299, 0.16793174738907513, 0.19633701360908162, 0.21717031210154447, 0.16340155046136684, 0.2286818869938958, 0.2634534210831301, 0.22964333345670318, 0.005598408659101772, 0.01519811077675326, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03210685975987404, 0.04496310970400286, 0.02494238013514405, 0.02698382156910306, 0.061886301024052015, 0.0570108012094781, 0.046049814833801994, 0.03588651610472804, 0.061559734450174486, 0.027105353421766787, 0.0348056657417839, 0.028768542186533907, 0.05504051162829615, 0.04586354308708107, 0.014336455673474857, 0.05723764117241248, 0.017128732998096363, 0.029763828138413717, 0.6207539066546741, 0.9058091022150344, 0.061625075665953766, 0.5537580056148583, 0.3737014186164752, 0.10857149935796317, 0.08112837145109009, 0.12507874831725418, 0.07910796259277375, 0.06274794416174423, 0.07510940173832203, 0.10171882691615464, 0.05256240589661065, 0.062276416502640486, 0.03510390343170844, 0.1123313577620203, 0.10467387307014375, 0.08919533621105913, 0.15919940694359558, 0.206674682848782, 0.1481850439168273, 0.13932657960306283, 0.17997498556500469, 0.08132921701227258, 0.17199260597574462, 0.4224609224853121, 0.10017772473897679, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03266678429373515, 0.07309057504069583, 9.999999999998899e-05, 0.017993280776203546, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06535045920481664, 0.04490689360873623, 0.08076488846292229, 0.13418423476092012, 0.01130940744628206, 0.09067381025522903, 0.11315907858463359, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005849035318853613, 9.999999999998899e-05, 0.009892179848976723, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.22029846859314461, 0.24898093838278845, 0.17783153199113855, 0.2055799784281095, 0.18494585696511467, 0.19226744717352073, 0.23705590503707485, 0.1647877390955126, 0.232464279441837, 0.05754925720353965, 0.0697577722365349, 0.02198412468535549, 0.05559084253470714, 0.03536382408880623, 0.03311251826949413, 0.03438542197390415, 0.02706967400016458, 0.04616519580518197, 0.13709410100555053, 0.11033293612473538, 0.13012799379663642, 0.13766266535167793, 0.13677043712921255, 0.12976976572985044, 0.14963138758589234, 0.1526386369680487, 0.11580530444786818, 0.1602710620254989, 0.15059180881326262, 0.16814906059237933, 0.16707201626363843, 0.20568286550560566, 0.161856142914947, 0.1803655058928174, 0.20975838338529373, 0.1591188271984687, 0.11994265365510037, 0.12221247884078279, 0.11109491287868445, 0.16030964370622025, 0.16681119599105676, 0.09793549997287943, 0.11473837189617697, 0.1306573326615882, 0.09321422018317793, 0.13942152667012964, 0.1332351951554296, 0.13345086981233123, 0.14906655272444036, 0.14911089520261378, 0.16688832681053478, 0.1576178215348356, 0.1453840452141656, 0.16598216311415248, 0.1468038680329048, 0.15883596178878268, 0.14006577975982915, 0.13374366089686696, 0.13218827530490984, 0.14505044442651138, 0.15304744835604867, 0.17406357434173914, 0.16207881422481074, 0.13252903508781622, 0.16679477618376493, 0.1593083731255257, 0.16074736501551867, 0.1207914665021157, 0.1265064642464515, 0.20093695843289416, 0.13669283025019996, 0.15839495918841207, 0.15388717221256643, 0.139791777703846, 0.14170958804623845, 0.15393701851030583, 0.08726044171474201, 0.12745724237239608, 0.18564997057091748, 0.17094034525968238, 0.11110135294054202, 0.16843301577396796, 0.1840951386782479, 0.16514268781168506, 0.18683568409856555, 0.2135749380374129, 0.16791601608634177, 0.17033057146416664, 0.17743883405769612, 0.20568880668582523, 0.055490249547338166, 0.06982660123645323, 0.07833833863240214, 0.06201417761563499, 0.064618688969178, 0.06111328923809867, 0.07532529613519179, 0.058061599194141666, 0.050188889162319006]}, "mutation_prompt": null}
{"id": "918d59c8-29e3-4b35-a674-68d4236f091c", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Dual adaptive mutation factors based on diversity and fitness spread\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean())\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Adjust crossover rate based on fitness diversity\n                self.crossover_rate = 0.65 + 0.35 * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with dynamic crossover rate adjustment based on fitness diversity for improved convergence.", "configspace": "", "generation": 40, "fitness": 0.13046302753914785, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.15.", "error": "", "parent_id": "20f95e89-21d7-4c16-994c-25c8b5e8f3c0", "metadata": {"aucs": [0.20434968449341606, 0.19716963771554386, 0.19657624506664506, 0.25653948678328686, 0.21475766238101202, 0.21771085236664245, 0.2249067861114118, 0.22150149893940085, 0.21227923148419525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.044455742105579676, 0.05245284915590287, 0.047767837820552606, 0.0722752569589089, 0.07623193670481831, 0.10283964724126926, 0.07258950059711444, 0.06278271090586818, 0.060999477177767436, 0.022932461233801216, 0.015149668515456183, 0.03541625182760111, 0.05811930667847376, 0.053041022625712864, 0.06180134989596586, 0.06621645396741027, 0.04868943654524649, 0.06900923049943197, 0.8946279894776803, 0.9058091022150344, 0.9049160484613171, 0.874465455540315, 0.6793635182157729, 0.7401338931637588, 0.5192724113428159, 0.7282395622551747, 0.5160497566915021, 0.08718901624370223, 0.10806667435336881, 0.11403559623439252, 0.10565049422919415, 0.08740885968021461, 0.1025780962303734, 0.10672093200741961, 0.10631431792598556, 0.11602082105461509, 0.1571129140289078, 0.20192019462627608, 0.16872542201279717, 0.16539732196154933, 0.17159412400027396, 0.16199376714424651, 0.2128699376573423, 0.1698922876990453, 0.17941660650110958, 0.0604074448044003, 0.04144093475731403, 0.04171534705960678, 0.019752568394261427, 0.035039573732111196, 0.03297408493138265, 0.03702839739066277, 0.03388289549874057, 0.034356842613039174, 0.03907212401498816, 0.0374884178110817, 0.04488494697485601, 0.034394610415642624, 0.09327478890514718, 0.06970253676083271, 0.05762072365589466, 0.03139286473713032, 0.04294711992148659, 0.004940994522074638, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04870543461022059, 0.08208753771519728, 0.09201827758815129, 0.051102374057986344, 0.07526991900380786, 0.038531447248037476, 0.05502910597458399, 0.05389071058757222, 0.04158101406880799, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04207082102046733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021846331979108125, 0.03668609694712033, 0.03326643783064187, 0.0187592153061783, 0.031147380310616257, 0.0196885377695587, 0.032886533408790775, 0.009089426751253682, 0.014192028069722418, 0.2025927919889975, 0.19141731891259628, 0.19204136081592915, 0.22041402838655633, 0.25872869773905016, 0.2265856082042439, 0.23089345896423485, 0.2156639885808972, 0.21789726538751908, 0.053277759282528536, 0.07569210010960448, 0.05020645231569032, 0.06039277029449097, 0.0653389066254243, 0.05608211706695998, 0.053387836130675215, 0.059348535222812804, 0.05319745809042142, 0.1556852619144251, 0.1346642049487824, 0.13107190535623958, 0.1403611315398966, 0.14202508706128558, 0.13074934321011245, 0.15053513277765274, 0.14365681951647125, 0.13124616164554426, 0.1602710620254989, 0.15154782991506122, 0.16814906059237933, 0.1606639754786482, 0.18027931742820769, 0.18772735301806875, 0.20048833734366167, 0.20284678560212477, 0.15798932208599858, 0.12871199881626905, 0.11864524376324825, 0.12562777263472724, 0.13853625991283514, 0.13399076655639142, 0.12363060870447784, 0.10495049662259259, 0.14215367501241472, 0.11201469752025517, 0.15261889766135806, 0.17421906038073653, 0.15547210302259795, 0.15663767768485526, 0.15815154897077754, 0.1590465922135279, 0.15965172068494815, 0.16831431874406266, 0.1705673211336134, 0.1468837641081826, 0.15491077963069255, 0.15533949192281093, 0.1587269840535397, 0.1675997558490362, 0.16323132549030184, 0.16414560668742273, 0.15971192028701076, 0.16683487473587044, 0.14992102243448446, 0.16679477618376493, 0.16383216418664637, 0.15176503580803635, 0.1496424818823704, 0.13218634599917278, 0.1346499445138326, 0.12840014189788873, 0.15692009224327252, 0.1401848553812104, 0.1600767171905798, 0.14263147373782392, 0.18988624088028472, 0.13709692481653324, 0.1549162211382369, 0.17346256922199332, 0.16503318141510193, 0.13651393607755014, 0.17943125421270834, 0.18959882750118973, 0.17873902753330406, 0.18683568409856555, 0.2135749380374129, 0.17588771903614053, 0.18619353412532436, 0.18089700635840789, 0.20568880668582523, 0.04678300426154114, 0.05989062210168217, 0.07085255488811815, 0.05565361396243729, 0.06066375446157923, 0.068290053240875, 0.07854353203710596, 0.07038758179348914, 0.057734306827099124]}, "mutation_prompt": null}
{"id": "44d99dfa-46fc-4844-8b53-37d7170c8645", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean())\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Adaptive scaling for crossover rate based on population diversity\n                diversity_factor = np.std(population, axis=0).mean() / (np.std(population) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introduced adaptive scaling to the crossover rate based on dynamic population diversity for improved convergence.", "configspace": "", "generation": 41, "fitness": 0.14826660414065815, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.15.", "error": "", "parent_id": "20f95e89-21d7-4c16-994c-25c8b5e8f3c0", "metadata": {"aucs": [0.21548991012212637, 0.25634498482397117, 0.19535685839347794, 0.23978970450779202, 0.23442383493389285, 0.2649782914919887, 0.2139745549486367, 0.2598915537475823, 0.2121061773302988, 0.044465111115746914, 0.06111452080183122, 0.04859409724478503, 0.07923225083603558, 0.07909208486357422, 0.04200240995172533, 0.047603566175062006, 0.04256367365677738, 0.0013102128127949753, 0.054663303502095584, 0.07448229550179275, 0.052492190952239226, 0.10059660979753138, 0.09937831144781051, 0.07954416767245043, 0.10505047016409297, 0.09699636159862257, 0.09399356696341032, 0.044066161764937384, 0.015149668515456183, 0.042842495431193894, 0.06534003817114586, 0.06495152415983507, 0.05623272593358175, 0.06561835505009272, 0.05035695194122525, 0.06344469827301413, 0.9010011061940166, 0.9058091022150344, 0.9049160484613171, 0.6996642736163468, 0.6295863944012405, 0.788641221188669, 0.6955372413257884, 0.888558013214552, 0.4953573833619981, 0.10513637177684254, 0.11725650535005694, 0.12717421235341275, 0.11243798682263895, 0.1475459141476153, 0.13886350868831232, 0.11793336213337191, 0.14509371952953498, 0.14300577204521414, 0.17168652690145592, 0.20748225741406678, 0.1604746197309621, 0.16732689665557132, 0.369216299077916, 0.1710963317605927, 0.38597148799654746, 0.1838608963785504, 0.18971343274852948, 0.07206013785992704, 0.09869917883299661, 0.0709074830941887, 0.05272358880278083, 0.07550616612911487, 0.08444893548161325, 0.10091006467752162, 0.10203349651917126, 0.0741179469988521, 0.07654983607823362, 0.07642538425238021, 0.062267385478328996, 0.057587792145169625, 0.035362057023575866, 0.07250169690441999, 0.07201061074532156, 0.05953096452001305, 0.08521410917888739, 0.0002623440115563369, 0.0290968627692757, 9.999999999998899e-05, 0.03160810383166823, 9.999999999998899e-05, 9.999999999998899e-05, 0.02596747781816977, 0.01839000226633647, 0.012844916712373755, 0.10904948058434927, 0.12089294118743055, 0.09471397152828176, 0.09397415993312808, 0.08134251277653148, 0.1082696018189303, 0.11692887325607315, 0.13283723834691152, 0.09539098068078733, 9.999999999998899e-05, 0.050521278742200026, 9.999999999998899e-05, 0.007829797094619062, 9.999999999998899e-05, 9.999999999998899e-05, 0.014826769635274628, 9.999999999998899e-05, 9.999999999998899e-05, 0.03416173772146558, 0.07198516288033607, 0.046264554855843354, 0.06378370285919666, 0.050627621435255454, 0.019131034537985814, 0.03923874363486779, 0.008700897654907336, 0.02864775210971715, 0.22071919556996356, 0.20337236651837398, 0.20396988980618558, 0.2055799784281095, 0.20245218274965993, 0.19423799207597692, 0.2699908911794019, 0.21584441200046622, 0.267941664918365, 0.060489687182282204, 0.06081868954870129, 0.0596690303026447, 0.08142476505595297, 0.09082079045033364, 0.0810627810509299, 0.07203923085927577, 0.0650822175991489, 0.0741899030245119, 0.15176401161185749, 0.12688187049592292, 0.13820810537434314, 0.14357781975573702, 0.1369579317452122, 0.1359588938494113, 0.15869471203166707, 0.13700918899482006, 0.1325124799486881, 0.1602710620254989, 0.17079807844999229, 0.22155797962971335, 0.21380337264798333, 0.20346547340778132, 0.21875091006581837, 0.2084298421385613, 0.23890002271916966, 0.17296238922525486, 0.17397709926552363, 0.14073639319659437, 0.13353962112012963, 0.18852369982738415, 0.1471452616162463, 0.12785927444111966, 0.1424359595389515, 0.175910810704745, 0.1456048440183808, 0.17605887120408514, 0.15454067796951443, 0.15278011320167084, 0.1620658408339526, 0.16601291808770402, 0.17246947452306816, 0.1512882219749656, 0.15616565142160066, 0.18001903407947317, 0.15741251293418568, 0.17408331189121018, 0.15291228806215817, 0.15902743397257524, 0.22719176811738095, 0.1737386845137433, 0.1600554130475883, 0.20906681657753257, 0.20001989525738695, 0.14119037656654565, 0.167902226479688, 0.1642160952722519, 0.16026374926082532, 0.15596329626880723, 0.14714907492406315, 0.12777245811539906, 0.14631509092634765, 0.15692009224327252, 0.1563275636013406, 0.15839995382661587, 0.147995393238474, 0.24365218222226848, 0.13673094059467727, 0.14566609799193753, 0.17303660292946554, 0.17217689713152118, 0.17456012068540128, 0.18999978680578633, 0.18631360202845226, 0.16494009406626464, 0.1959206485073166, 0.2135749380374129, 0.1902396457605271, 0.18846179747611813, 0.18206273109408222, 0.20568880668582523, 0.05966929112109409, 0.06739648818788391, 0.0691314262433661, 0.060005306711120476, 0.06779679961243001, 0.06225436936422224, 0.07958485771563661, 0.07081944844082877, 0.06371060491355252]}, "mutation_prompt": null}
{"id": "44df51aa-045f-4ceb-a72c-8e574d8c2bf4", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                fitness_range = (np.max(fitness) - np.min(fitness)) + 1e-30\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor3 = self.mutation_factor * (1 - (np.min(fitness) / fitness_range))\n                mutation_factor = (mutation_factor1 + mutation_factor2 + mutation_factor3) / 3 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean())\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Adaptive scaling for crossover rate based on population diversity\n                diversity_factor = np.std(population, axis=0).mean() / (np.std(population) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced exploitation through a mutation factor adjusted by fitness-based scaling to improve convergence speed.", "configspace": "", "generation": 42, "fitness": 0.1353308676247163, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.14.", "error": "", "parent_id": "44d99dfa-46fc-4844-8b53-37d7170c8645", "metadata": {"aucs": [0.22365468388681398, 0.20703368916530318, 0.21010361535676825, 0.21532131674350352, 0.24919101059993487, 0.21103919521707326, 0.1739226485981391, 0.17033655095259326, 0.18801565156789612, 0.042375250489875005, 0.04022223544553105, 0.04129143643714672, 0.013031593428842081, 0.049074187131393, 0.04385066257561143, 0.05330837668969923, 0.04623616708283662, 0.044672137478098395, 0.04618269673107278, 0.05040970683581103, 0.028530801508641734, 0.08156750493406362, 0.07164728005763954, 0.07745638501136431, 0.07683805217694117, 0.079101999424807, 0.08116523245589491, 0.04716606517164801, 0.03677570164585009, 0.03015912220266148, 0.05363348549039215, 0.0548563256629121, 0.06736146270185162, 0.06600832416568914, 0.05102091171783707, 0.05285373176130437, 0.9010473696168615, 0.9058091022150344, 0.9049160484613171, 0.7143107385621812, 0.6155611224054615, 0.47314954485843497, 0.5659828331081656, 0.8885531915630835, 0.43474072192705615, 0.1062684618700327, 0.12161715988001431, 0.13903182669570324, 0.12569391653929018, 0.15995402248679746, 0.1096992505899349, 0.12030556891682209, 0.07012072886224907, 0.10780608578425654, 0.16557743142608594, 0.19308637766117165, 0.15527747918197188, 0.13084751435486142, 0.15641402664003667, 0.15185010706796764, 0.16517105219110073, 0.1968709972661401, 0.17001229276174945, 0.04699328583319662, 0.0397015566074006, 0.06410728554843192, 0.06312702455004204, 0.03134205835405668, 0.05761093642940085, 0.07074198964870215, 0.06566766719632056, 0.0691124908324966, 0.051625187014727625, 0.07234708237704945, 0.06549486838667395, 0.07219790086721878, 0.05899493945284762, 0.054056872996124494, 0.06561818515771789, 0.0718142378987231, 0.0649764080810552, 0.009692750601107747, 0.04441564826146405, 0.02931292876365077, 0.011784171225324491, 0.02306298282812802, 0.004921280261711791, 0.0029961101132109924, 0.006670803845115869, 0.000981740538059217, 0.10576932394632022, 0.13053757339027383, 0.13861671485136617, 0.11568034239938074, 0.11972598286253944, 0.09450285974665529, 0.09578676408281261, 0.10867551323434765, 0.1073636648738242, 0.007498166545917728, 0.027539838105091308, 9.999999999998899e-05, 0.025247977565582724, 0.03320072967032828, 0.014492671214767272, 0.04295784834513794, 0.045482146364140275, 0.05177978138266626, 0.04254603995046724, 0.03356556474864536, 0.04293800807733261, 0.03877969781164481, 0.014516299931295773, 0.03564376810629788, 0.016741822999901124, 0.013399365208908609, 0.024618752810920186, 0.2003844423089155, 0.18890462097857263, 0.18870751857580148, 0.2055799784281095, 0.1714511066506922, 0.19226744717352073, 0.22351812768818113, 0.1911899802396978, 0.198635636043606, 0.05414947013826221, 0.046962343615000623, 0.05448803408299352, 0.05683780966420582, 0.06001930085067031, 0.06569249478529215, 0.05644785997300972, 0.053303787055442475, 0.0852841893851024, 0.14006139665179684, 0.1365542585619831, 0.1618696172415497, 0.15528286260035407, 0.14358728523995756, 0.13416906520586636, 0.14963138758589234, 0.14513937909237284, 0.13802042782488333, 0.17852697499472325, 0.16776651827747524, 0.16814906059237933, 0.17062708723300146, 0.1795405911965745, 0.17762453936067357, 0.16582592587143663, 0.17377774300845283, 0.17325490274785094, 0.13299655950623723, 0.12071717348481326, 0.12117164965262395, 0.1397015151513128, 0.1430296403224216, 0.14441170055578478, 0.12123290870515724, 0.12482628960972075, 0.11166220266283966, 0.16214633038609993, 0.14573833751778964, 0.1362889813307836, 0.1581409972410207, 0.1409170161028287, 0.17524164344676518, 0.15828185916144233, 0.15241148643759206, 0.1678474354616566, 0.15445546517943898, 0.16646815301912699, 0.14493965915091545, 0.1738074599971291, 0.16306269756978453, 0.15754940622928482, 0.14542404795762065, 0.16191539091836116, 0.16207881422481074, 0.3229325885056564, 0.16679477618376493, 0.1855090783766341, 0.16215509956596308, 0.19402202707094374, 0.15229156244459174, 0.14753770776080544, 0.13447143642598436, 0.15692009224327252, 0.12120576009730488, 0.12184979022783937, 0.12501548188564815, 0.12110104561696922, 0.08834542164733428, 0.10913184713065671, 0.1633220225704234, 0.1701762559187091, 0.1643108650317292, 0.19691251483952188, 0.20636374414701897, 0.17351860122652563, 0.19646198112498225, 0.21723909350502113, 0.18249719887855986, 0.1763401350169017, 0.18016856181902985, 0.20568880668582523, 0.06370786120659233, 0.05666750213046834, 0.06710745831178899, 0.0629149269916297, 0.05921183820319542, 0.053457799527088845, 0.07532529613519179, 0.07122405234149298, 0.06770340094224703]}, "mutation_prompt": null}
{"id": "0f066ca7-a2f2-4335-b118-a07eb7284fb4", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean())\n\n                balance_factor = 0.1 * (eval_count / self.budget)\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + (1 - balance_factor) * mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = np.std(population, axis=0).mean() / (np.std(population) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Adjusted the mutation strategy by introducing a balance factor to increase exploration during early evaluations, enhancing convergence speed.", "configspace": "", "generation": 43, "fitness": 0.1481746886091493, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.15.", "error": "", "parent_id": "44d99dfa-46fc-4844-8b53-37d7170c8645", "metadata": {"aucs": [0.20775262835136998, 0.22654685127230878, 0.2836687592391468, 0.22739514100550873, 0.23522151450857087, 0.2729563049045106, 0.28397912697693495, 0.2564650900315484, 0.22782435310568805, 0.05558927768767841, 0.06140014919007464, 0.024328427042711542, 0.08468516800203074, 0.03424126958741658, 0.12278445239415592, 0.024236160465191503, 0.03756424805419978, 0.012932725976357529, 0.06939796419530508, 0.07070650625060093, 0.047890410724329424, 0.08932049631870231, 0.09004480252656899, 0.08524227251264438, 0.08212532533937977, 0.08772885038058664, 0.0832094030382805, 0.040524920973113, 0.017460774395610335, 0.05448944083111362, 0.07492780604623528, 0.0666383858288353, 0.07050745734152619, 0.06630618659720655, 0.05212486892204071, 0.07936059755997416, 0.9009966067969786, 0.9058091022150344, 0.9049160484613171, 0.6996293310093362, 0.613118764635487, 0.7534287193392043, 0.6951473395036446, 0.888724690040236, 0.6081939398535068, 0.12692237925804217, 0.11835930725274268, 0.12721429130468365, 0.11735660345839738, 0.14048360063834098, 0.11949725576457237, 0.12805835804718335, 0.11330773834736652, 0.121645727956044, 0.1681129490454748, 0.20667434786406014, 0.17628073362856045, 0.21230874900488084, 0.1743929651529159, 0.15937045726424748, 0.2135384721960002, 0.4028192349135006, 0.19059896718333558, 0.05772858328927122, 0.07317639792101815, 0.06986143238498099, 0.06631641137570932, 0.03880994402530724, 0.07573104317278356, 0.07677449303294903, 0.08654198026104365, 0.07439777966510241, 0.06332810833679647, 0.08284835935683155, 0.08911383905636172, 0.056961850960969396, 0.0768217478158929, 0.07059250950364859, 0.06741993598061713, 0.06513858599058109, 0.0729426879709053, 0.046988576361104206, 0.0016811528766005335, 9.999999999998899e-05, 0.025992236018427373, 9.999999999998899e-05, 9.999999999998899e-05, 0.03348736148462372, 9.999999999998899e-05, 0.0274943479489117, 0.0991031762412935, 0.1257368183261156, 0.14707856390771634, 0.07878969675376735, 0.08073266720412686, 0.08542731034667517, 0.11874648124766496, 0.12052695391859158, 0.10755821293807255, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021460971902302894, 0.061955131465915136, 0.030773312263156716, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008903779434989323, 0.016140174790268302, 0.018618526203266317, 0.025210290022110726, 0.032036128562560995, 0.0472437075993134, 0.06128155652221723, 0.032076206968536636, 0.031056957935360563, 0.03130227727126733, 0.20340787871001986, 0.26190702134316257, 0.2640792261528694, 0.21408146968308417, 0.19857930888140296, 0.2159920779176855, 0.26260506518651194, 0.2187633746300166, 0.24689211428143454, 0.05937101618972551, 0.06980439085383228, 0.07178002034607744, 0.08663105177966957, 0.0765733651941447, 0.0791840939788897, 0.06846640742419752, 0.05903698559762793, 0.07963120368371146, 0.19882097450025826, 0.13492800112605785, 0.15214102439570576, 0.14140457325901956, 0.1519002173198769, 0.13276569912485525, 0.1617972020466083, 0.15683838394578198, 0.1497300357554866, 0.16169309105628837, 0.19633115229357923, 0.20850900430561314, 0.19606704977065148, 0.22535242596796246, 0.20839043257916323, 0.1897376495244476, 0.2125824609123973, 0.179511247466279, 0.1282794089430328, 0.15141837923629786, 0.12666571904620672, 0.16260574059624255, 0.1706835074847176, 0.1293528104723306, 0.14973129563015386, 0.13586001845886697, 0.14594051810776387, 0.17360898949598902, 0.16872061632946278, 0.15820483037800626, 0.16020615074538092, 0.1585544043217213, 0.16605636884679698, 0.15107166133579863, 0.17148592470936108, 0.17906598563560128, 0.15783429700053808, 0.1707644471515487, 0.16586053426872627, 0.17039262529786225, 0.1749827515320279, 0.16794260367248393, 0.16221801566274208, 0.16180077729313458, 0.17685993386060583, 0.1770698127790522, 0.1669227732262265, 0.16736022034064713, 0.1683327050704132, 0.18382566655685206, 0.1443684788435774, 0.13756702286076894, 0.1444875191174365, 0.15692009224327252, 0.16890794538517095, 0.17209476606237584, 0.14993601842145454, 0.13876081829071174, 0.14066185379905105, 0.13939879984033066, 0.16712747511759718, 0.1651252373327161, 0.16528596894091008, 0.1876095816808564, 0.1840951386782479, 0.1711731265004215, 0.19139436037357704, 0.2135749380374129, 0.1799747074711746, 0.1771998791495789, 0.18724587353655975, 0.20568880668582523, 0.05643236912505378, 0.05635879372517061, 0.0820424219807141, 0.06186864237313405, 0.06553385368096265, 0.055127606306139776, 0.08068053835210776, 0.08596872640640052, 0.06017699897064854]}, "mutation_prompt": null}
{"id": "fc04ceab-fafc-468f-9f9b-22c03594c930", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                noise = np.random.normal(0, 0.1)  # Added noise to mutation factor\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2 + noise) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean())\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = np.std(population, axis=0).mean() / (np.std(population) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced exploration by introducing noise to mutation factor for diverse solution generation.", "configspace": "", "generation": 44, "fitness": 0.14217999202636522, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.14.", "error": "", "parent_id": "44d99dfa-46fc-4844-8b53-37d7170c8645", "metadata": {"aucs": [0.24771489534783764, 0.23260858651448524, 0.19855134165231025, 0.23101546867445055, 0.2602015049943388, 0.23207886106628128, 0.294819828049674, 0.26407943175603665, 0.2543569367829125, 0.07733794324783017, 0.03774821193047029, 0.060114682424770916, 0.05119448554818351, 0.09054907438944515, 0.02831385969138156, 0.05764957157063122, 0.0563893937375024, 0.050331313578542924, 0.053234428411010226, 0.07692693527423855, 0.04282480329620797, 0.09239142398334921, 0.10145697409653853, 0.08094197196144759, 0.08750576534481991, 0.09875160844353725, 0.09895701804994517, 0.04243262624641286, 0.04198909850589683, 0.03953768510566147, 0.07318231504598849, 0.06538183685962995, 0.06232084023597906, 0.06312391291143626, 0.06946602524617096, 0.06703619539447259, 0.8876352514168334, 0.9045072298301621, 0.9033243611312827, 0.5990372141285198, 0.5943106828000033, 0.7358266495091039, 0.6774726725498537, 0.5922209202675339, 0.4845248763195261, 0.11750101436635685, 0.134067660087699, 0.1420005241281853, 0.12261660057675072, 0.1272690232091449, 0.14295211126648788, 0.1312241590345613, 0.10289155513114112, 0.13145589268589553, 0.18235648930682768, 0.2021434297665573, 0.1481850439168273, 0.1978959705146741, 0.20098365581735522, 0.164676557373864, 0.23075874722669942, 0.19377601546725587, 0.18342704435210022, 0.06483743255455487, 0.05670527261992353, 0.058743732986974995, 0.0639119353114791, 0.0552039185724037, 0.0598473279931262, 0.08325998653761113, 0.0860947036075288, 0.0697520965647278, 0.07026704618002078, 0.0644647449046788, 0.08694496222998283, 0.06205884476056034, 0.07174910052384698, 0.04938403022548754, 0.08139141356074975, 0.07139777581189921, 0.06774989210650106, 9.999999999998899e-05, 0.004860683535179877, 0.00919477442524308, 0.0016571451646379964, 0.006115546488929979, 0.009098484410703489, 0.021228262490716077, 0.006774775652055531, 0.01624215010700869, 0.10320504928320318, 0.14552574659747897, 0.09913257694421662, 0.102099763790786, 0.09164310725384606, 0.09644795588836674, 0.11435042063877665, 0.11935046436349062, 0.11758013816893875, 9.999999999998899e-05, 0.03448715366987831, 9.999999999998899e-05, 0.008020534301160342, 0.014901355278071016, 9.999999999998899e-05, 9.999999999998899e-05, 0.013677582002250555, 9.999999999998899e-05, 0.03885176557379122, 0.06267074097132952, 0.027361167261880648, 0.023993098974838922, 0.026449198293543308, 0.02123965481470058, 0.0225652619813993, 0.013565849884672798, 0.028087331108331948, 0.20687513410203306, 0.20628099569724567, 0.18151316662727845, 0.2055799784281095, 0.18591103600596093, 0.19226744717352073, 0.24633193873208292, 0.20968183617612812, 0.21408629040389082, 0.06460136287853313, 0.06833381496035507, 0.06309114551644501, 0.07162941600060568, 0.060558838764000256, 0.0709153751936552, 0.05264339481218794, 0.050699794244869145, 0.07092556754415291, 0.153569896783187, 0.14923406613709012, 0.13189736548111108, 0.15079376324348437, 0.14233299091392182, 0.13887896195367944, 0.14963138758589234, 0.1711781821362296, 0.12679165399034953, 0.16393141013514945, 0.15997257123314446, 0.17016462870493865, 0.18715699915708284, 0.1851194576305325, 0.18009121066498623, 0.20048093495166963, 0.24157805731284077, 0.17328655971168228, 0.12382549152413846, 0.11842452228072287, 0.14788154993811964, 0.15814542701024625, 0.1318994957364079, 0.12031582033478228, 0.12842785411698765, 0.14046472741258187, 0.1422840018077406, 0.16404868961936248, 0.17654663785797897, 0.16411465171544437, 0.16338517961161503, 0.15795971242040763, 0.1601913308433579, 0.15583738585052875, 0.1478393620285755, 0.1926965597786532, 0.17237204309913745, 0.16951069474294944, 0.16357688070903642, 0.17911729938695975, 0.1901794573665413, 0.17932382316040507, 0.1876664980096563, 0.16604529738700735, 0.17878006799951074, 0.1659895990030673, 0.1714353900986082, 0.16282662415319882, 0.18225706138019904, 0.18125678626456632, 0.15600287873570162, 0.1681368740313779, 0.14589970834227883, 0.1790145528478826, 0.14789511875484163, 0.14540481223307666, 0.1428943045495371, 0.11866338853352043, 0.13029363929964655, 0.13656241402018765, 0.1609143438768892, 0.17959361359286885, 0.17812210895746428, 0.1947750025750803, 0.18497389567011957, 0.18861121659087965, 0.22599753885888008, 0.2135749380374129, 0.1867478166097537, 0.17254150716575278, 0.17751815476142274, 0.20568880668582523, 0.06149339986837199, 0.054722357473785066, 0.06962496853940425, 0.0697385690517438, 0.06562596491460715, 0.05638033002938214, 0.07901707581565187, 0.06506902637157108, 0.06443723334093587]}, "mutation_prompt": null}
{"id": "ee130301-5620-452a-81fd-5b1b383f118b", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        elite_size = max(1, int(0.05 * self.population_size))\n        \n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            elite_indices = np.argsort(fitness)[:elite_size]\n            elite_population = population[elite_indices]\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean())\n\n                best_individual = elite_population[np.argmin(fitness[elite_indices])]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = np.std(population, axis=0).mean() / (np.std(population) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introduced a targeted mutation strategy using elite solutions to enhance exploration and convergence.", "configspace": "", "generation": 45, "fitness": 0.14600113254945268, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.14.", "error": "", "parent_id": "44d99dfa-46fc-4844-8b53-37d7170c8645", "metadata": {"aucs": [0.24931518569621314, 0.2784414059443566, 0.2401449301408436, 0.30122554544018054, 0.3185488081925606, 0.21135532823334324, 0.22789702517722377, 0.2572967273244068, 0.2522000843007829, 0.08675153222701792, 0.06409306225552369, 0.041086104272258894, 0.01656394067780098, 0.06109218050575915, 0.016827759191160974, 0.008143859176154344, 0.06453883887329082, 0.005046227399713832, 0.07256073786042982, 0.06502570459650836, 0.0642303216266158, 0.135496571669394, 0.0893997286458198, 0.07585890216001412, 0.08368211775483214, 0.09268697808074744, 0.07919017977472353, 0.051293854252917104, 0.015149668515456183, 0.043080579926835005, 0.0731557097673482, 0.06264258453440197, 0.054258468130883974, 0.0663623839894446, 0.06241249098741486, 0.06329121368747925, 0.9010011061940166, 0.9058091022150344, 0.9049160484613171, 0.6526077703881585, 0.6283563335316751, 0.7489571758662407, 0.6022594169483967, 0.7196555884660396, 0.5264702988540139, 0.1302660024592287, 0.11588824665328012, 0.1316938624554148, 0.12041010491214166, 0.13598810399096217, 0.10765406795012644, 0.12456957025509818, 0.10399423906898575, 0.14313338431923261, 0.16431368043112982, 0.20748225741406678, 0.38438277276292754, 0.2003994501583829, 0.15445306391073677, 0.17825363717280385, 0.180211144299099, 0.22464033605395606, 0.2226864609605942, 0.07573024067115186, 0.11241725228224841, 0.0761986657625826, 0.08455449032484408, 0.07921429897059074, 0.06990868127825356, 0.10004471565171824, 0.09146656818031351, 0.07773634213744995, 0.0635009409751226, 0.07611282748481374, 0.08033906893390519, 0.058918627472078655, 0.06574725518101276, 0.062424936111162066, 0.05794407624301057, 0.06517399889093434, 0.07772591354774927, 0.018450017279126762, 0.021712412929989267, 0.002670925476419117, 0.011959443265182723, 0.0057212415462738475, 0.002501960169724038, 0.004484029365105613, 0.01802664824198197, 0.01002866758757448, 0.13579128521800687, 0.10262063164010216, 0.12294164447980149, 0.08833824831557235, 0.10395918788447567, 0.12603362357647951, 0.12461474632011249, 0.13205539130056532, 0.09798993678346435, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008220813178541064, 0.0694335810473633, 9.999999999998899e-05, 0.01155766470384001, 9.999999999998899e-05, 9.999999999998899e-05, 0.036401848048797536, 0.03401009301916913, 0.01912915938154469, 0.028905446920219346, 0.020511879479007455, 0.043298244373678796, 0.03167172080639702, 0.04649765419288632, 0.03646939805472671, 0.031749723839588295, 0.22928275574358092, 0.24730379200905017, 0.207426803889862, 0.2055799784281095, 0.18392019553073047, 0.22066596016063678, 0.20647364823342418, 0.23892508912029864, 0.24833164737682145, 0.06168420832362531, 0.06025162053847066, 0.058653850554303055, 0.07151921305196551, 0.07692191734870724, 0.07795734041989877, 0.067033447114063, 0.06957970812043457, 0.061007771884817874, 0.13824729265292957, 0.13624859533452005, 0.1616689331019392, 0.13836398435618213, 0.1369579317452122, 0.11937421648272373, 0.15869471203166707, 0.16459419681530474, 0.13633751522206916, 0.1602710620254989, 0.1527735278847251, 0.21446842662097665, 0.19778485325660666, 0.16984130946813858, 0.19105633261311583, 0.18271062813607442, 0.23630750360297248, 0.1740165144647925, 0.15706462903836804, 0.12330544428253887, 0.13355724436573435, 0.17863594264152838, 0.18695419124866008, 0.142037881634127, 0.13844881474371518, 0.1402372623280176, 0.13007958087697802, 0.18063392163745084, 0.1558136052039234, 0.1549968500358324, 0.16088708371255378, 0.16252976391760676, 0.19691568996985398, 0.15347590535602595, 0.14409257712439427, 0.17841160914723042, 0.16868285709927955, 0.18118857110994824, 0.16246273025427493, 0.14886157374772213, 0.22323142050345335, 0.17296965453652446, 0.15870204021701395, 0.17111586356136554, 0.17508078917181336, 0.14207868236596655, 0.16763570972994946, 0.22106410846555447, 0.16545688825110805, 0.15351268715386945, 0.12863467009136198, 0.13727130524517162, 0.14448144295707965, 0.15970748231251475, 0.15671572226353148, 0.14012226960021112, 0.1363877791008974, 0.12665817331408125, 0.12965410315435077, 0.14840729916108952, 0.22712619398922584, 0.17174860389589575, 0.15096060463858907, 0.17327098089073967, 0.18631360202845226, 0.17008044244688403, 0.1959206485073166, 0.2135749380374129, 0.19447072252182906, 0.18117936636468335, 0.18206273109408222, 0.20568880668582523, 0.05763214555445373, 0.06448308398242464, 0.07411651445030254, 0.06943707091149176, 0.06509561464615032, 0.05850273992627808, 0.0774298715822519, 0.06751984079688211, 0.062414399626799066]}, "mutation_prompt": null}
{"id": "f8644d36-eab1-43fa-9bc6-04352031671c", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean())\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.1 * (best_individual - population.mean(axis=0))\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = np.std(population, axis=0).mean() / (np.std(population) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced population mutation strategy using elite-guided perturbation for improved convergence speed.", "configspace": "", "generation": 46, "fitness": 0.15429044709782916, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.16.", "error": "", "parent_id": "44d99dfa-46fc-4844-8b53-37d7170c8645", "metadata": {"aucs": [0.2556428245523158, 0.24229467366687518, 0.23048198012617271, 0.3047015433821709, 0.27543843231642606, 0.24852997364133456, 0.2269851247450253, 0.2754546584691757, 0.31873405896826057, 0.09235947226588237, 0.055522115290442375, 0.06282299460867358, 0.031509188688770284, 0.07714017584824617, 0.07303014982713107, 0.10396189112386223, 0.03534396688624186, 0.03784973164012573, 0.04784094502976166, 0.13926302073880792, 0.06302953762382801, 0.09905461232462986, 0.10897619170860362, 0.09205843501887134, 0.1017575214925791, 0.0767876417064397, 0.08828183794175326, 0.05308954546490896, 0.029213013917278485, 0.04180781492531638, 0.06294351204277848, 0.06785620116250923, 0.0727561845542849, 0.09800854262576975, 0.057386905851970926, 0.08581961368873525, 0.9009599972798413, 0.9058091022150344, 0.9049160484613171, 0.7123153012987349, 0.7215072063624387, 0.8950678128538083, 0.8357367675802189, 0.8915167690200623, 0.7576070697811426, 0.10656211348037481, 0.12020751608671942, 0.1572922843282235, 0.11733870241399746, 0.12955768806903922, 0.13572282898856725, 0.13192379215249617, 0.12042877177681333, 0.1103656013958555, 0.1808637595116912, 0.2424142802920024, 0.16001205617279224, 0.38631392287941224, 0.18465069135685064, 0.1642468063315473, 0.2386619129120644, 0.2269669494629517, 0.22318301215096548, 0.05867065383617043, 0.04735316109291765, 0.0808733336718227, 0.06507398075369053, 0.03330808134211072, 0.048485851922628664, 0.08265796359681277, 0.1325784680169625, 0.08530509710075662, 0.0717280723012218, 0.07568018259374598, 0.1298836157232095, 0.04564654732537199, 0.08308159095378465, 0.07697262540648331, 0.09849257161208802, 0.08509034207364075, 0.056900944551105614, 9.999999999998899e-05, 0.027678230992125075, 9.999999999998899e-05, 0.0017955282368519176, 0.023993644865464514, 9.999999999998899e-05, 9.999999999998899e-05, 0.018144916662645616, 9.999999999998899e-05, 0.10963034981949182, 0.13580806674935286, 0.12957831721782254, 0.11272327397535065, 0.14773864659842806, 0.09837499855281318, 0.11017145856083155, 0.13789219396855334, 0.11998255422401993, 0.0015851465153186028, 9.999999999998899e-05, 0.029574047379863022, 0.041544822413151605, 0.09792769834880233, 0.0015981607385622265, 0.014801329414019015, 9.999999999998899e-05, 9.999999999998899e-05, 0.03608482060044427, 0.06263799031263695, 0.03517563692974912, 0.037233340662432224, 0.0467962233298298, 0.06132680543127167, 0.01661955517081204, 0.030508432486001436, 0.03828572753315329, 0.23137763138583434, 0.18627858924233187, 0.1919552106344502, 0.2055799784281095, 0.20771882964623578, 0.19226744717352073, 0.25114961446475226, 0.21262970186702135, 0.26542280722861655, 0.07277413345083383, 0.06275746970732055, 0.06774914037464386, 0.07034530633951386, 0.08628502262368765, 0.07878803162663806, 0.08164538351927642, 0.059490828938203455, 0.08263268990517447, 0.14448182314542302, 0.14247534683678154, 0.14793260009248077, 0.13766266535167793, 0.14635655604411746, 0.13057288812291068, 0.1497581041909336, 0.15551876626038663, 0.18006416932712543, 0.1602710620254989, 0.17855342080348513, 0.16814906059237933, 0.16962288229183464, 0.2016796282822343, 0.16979567537500662, 0.20501044867402396, 0.23631384716068904, 0.17545318582876424, 0.18432510989167672, 0.12469329058669698, 0.16556006586707572, 0.15263765906287186, 0.13619735165452806, 0.1729118200091756, 0.13154610809243517, 0.1549558128178209, 0.14562108954675568, 0.15609999491957383, 0.16512270096517168, 0.16650479605301005, 0.16724284715148807, 0.14801485975099204, 0.16756272516962012, 0.1596728141100895, 0.1548338922871606, 0.1785170953397246, 0.16254706943311903, 0.1713232649175096, 0.1687374389974139, 0.17710043494174244, 0.1761772990435111, 0.1702994584507458, 0.16868010486798446, 0.16052800442337578, 0.18177450805604944, 0.15980823618116502, 0.16679477618376493, 0.19949330001263366, 0.16282823449301798, 0.1495065489466908, 0.13124937809181958, 0.16159554772225215, 0.16383312208534995, 0.16058171199363258, 0.13463727950573934, 0.13573196578650937, 0.13873988059816766, 0.26333243417368335, 0.16181141621880757, 0.15447699124415015, 0.16721773481808977, 0.16601765600313478, 0.20830991501631757, 0.17727692457359756, 0.18423554459640423, 0.1762461234592989, 0.18723450018432808, 0.2135749380374129, 0.177433613551503, 0.17980898034725268, 0.17837020612473575, 0.20568880668582523, 0.060946032004457806, 0.06924770212620446, 0.0724184641933513, 0.06473561452330523, 0.06554788877796724, 0.06108297880608826, 0.07954123417124104, 0.06654941957524374, 0.06544610890347446]}, "mutation_prompt": null}
{"id": "cd8bb891-020a-466b-87e1-300f610ca259", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                dynamic_factor = 1 - eval_count / self.budget\n                mutation_factor1 = self.mutation_factor * dynamic_factor * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean())\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.1 * (best_individual - population.mean(axis=0))\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = np.std(population, axis=0).mean() / (np.std(population) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Adaptive mutation scaling for balancing exploration and exploitation enhances convergence.", "configspace": "", "generation": 47, "fitness": 0.15403486863775162, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.16.", "error": "", "parent_id": "f8644d36-eab1-43fa-9bc6-04352031671c", "metadata": {"aucs": [0.2556428245523158, 0.24229467366688062, 0.23048198012659682, 0.3047015433821709, 0.27543843233061893, 0.248529973641335, 0.22698512474500698, 0.2754546584691757, 0.31873405896826057, 0.0923594722652964, 0.05552211529045159, 0.06282299460867358, 0.031509188688770284, 0.035008363595937175, 0.07303014982713685, 0.10396189112384835, 0.035343966910968305, 0.03784973164021832, 0.047840945029762216, 0.13926302073920183, 0.06302953762382191, 0.09905461232462986, 0.10897619169678341, 0.09205843501887134, 0.10175752149257933, 0.0767876417064397, 0.08828183786202115, 0.05308954546490785, 0.029213013920410758, 0.04180781528070687, 0.06294351204244997, 0.06785620116288504, 0.0727561845542849, 0.09800854262577063, 0.057386905851970926, 0.08581961368868196, 0.9009599972798413, 0.9058091022150344, 0.9049160484613171, 0.7123153012987349, 0.7215072063624387, 0.8950678128538083, 0.8357367675802189, 0.8915167690200623, 0.7576070697811426, 0.10656211348037481, 0.12020751608671942, 0.1572922843282235, 0.11733870241399746, 0.1295576880690391, 0.13572282898856425, 0.13192379215249617, 0.12042877177681333, 0.1103656013958555, 0.1808637595116912, 0.2424142802920024, 0.16001205617279224, 0.38631392287941224, 0.18465069135685064, 0.1642468063315473, 0.2386619129120644, 0.2269669494629517, 0.22318301215096548, 0.05867065383617043, 0.04735316109291765, 0.08087333367182314, 0.06507398075369053, 0.03330808134211072, 0.048485851922628664, 0.08265796359681277, 0.13257846801696227, 0.08530509710075618, 0.0717280723012218, 0.07568018259374598, 0.1298836163328091, 0.04564654744012819, 0.0833899120988052, 0.07697262540648331, 0.09849257161226399, 0.08441023742464748, 0.056900944551105614, 9.999999999998899e-05, 0.027678230992125075, 9.999999999998899e-05, 0.0017955282368519176, 0.023993644865466957, 9.999999999998899e-05, 9.999999999998899e-05, 0.018199125589751786, 9.999999999998899e-05, 0.10963034981945508, 0.13580806674934598, 0.12957831721782076, 0.11272327050647013, 0.14773864659842806, 0.09837499855281318, 0.1101714582054436, 0.13789219401134212, 0.11998255422406423, 0.0015851465164335998, 9.999999999998899e-05, 0.029574047410502735, 0.0415448221445629, 0.09792769834929627, 0.0015981653366696769, 0.014801329414025122, 9.999999999998899e-05, 9.999999999998899e-05, 0.03608482060044427, 0.06263799031264095, 0.035175636929746346, 0.037233340662432224, 0.046796223329828135, 0.06132680543116076, 0.01661955517081204, 0.030508432486001436, 0.03828572753315329, 0.231377631385835, 0.18627858924233187, 0.1919552106344502, 0.2055799784281095, 0.2077188296464153, 0.19226744717352073, 0.2511496144647557, 0.21262970186734576, 0.26542280722861655, 0.07277413345083383, 0.06275746970732055, 0.06774914037464186, 0.07034530633951386, 0.08628502262368765, 0.07878803162663806, 0.08164538351927642, 0.05949082893655466, 0.08263268990517447, 0.14458019081926865, 0.12357841673102377, 0.14793260082732707, 0.13766266535167793, 0.14635655604411746, 0.13057288909011167, 0.155166486113951, 0.1555187664876294, 0.17768201128576389, 0.1602710620254989, 0.17855342080348513, 0.16814906059237933, 0.16962288229183464, 0.20167962858494326, 0.16979567537500662, 0.20501044618004483, 0.23631384664179922, 0.17545318582876457, 0.18432512543227453, 0.1246932905862137, 0.16595397457036687, 0.15263765907248505, 0.1361953836839226, 0.1729118183699977, 0.13154610809243517, 0.15495581281790927, 0.14562108954674968, 0.15864054377179004, 0.16512270136384977, 0.16650522776240317, 0.17574914405470676, 0.14917780706917527, 0.16405825563861542, 0.15967422372069762, 0.15484141444790822, 0.1785170961684588, 0.16254706943311903, 0.1713232649175077, 0.1687374389974139, 0.1771004349417391, 0.1761772990435111, 0.1702994584507458, 0.16868010486794394, 0.16052800442337578, 0.18177450805604944, 0.15980823618116502, 0.16679477618376493, 0.19949330004086474, 0.16282823449301798, 0.14950654894669058, 0.13124937809178205, 0.16159554772225215, 0.16383312208534995, 0.16058171188050385, 0.13463727950573934, 0.13573196578650937, 0.13873988059817144, 0.26333243430937814, 0.16181141621880757, 0.15447699124414993, 0.16721773481808977, 0.16601765600313478, 0.20830991501631757, 0.17779809280609027, 0.1840951386782479, 0.1762466953643831, 0.18683568409856555, 0.2135749380374129, 0.17136212426395725, 0.17980808650987523, 0.1783702053451086, 0.20568880668582523, 0.060946032004457806, 0.0692477021260689, 0.0724184641933513, 0.06473561452330523, 0.06554788877796724, 0.06108297880608826, 0.07954123417124104, 0.06654941957524374, 0.06544610890347446]}, "mutation_prompt": null}
{"id": "f51a4e0c-0c72-4e31-8460-48437d6009f0", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = max(0.5, (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean()))\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.1 * (best_individual - population.mean(axis=0))\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = np.std(population, axis=0).mean() / (np.std(population) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced diversity management with adaptive mutation factor adjustment for improved convergence.", "configspace": "", "generation": 48, "fitness": 0.14982658262271484, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.15.", "error": "", "parent_id": "f8644d36-eab1-43fa-9bc6-04352031671c", "metadata": {"aucs": [0.22734942317152484, 0.2786849738734283, 0.2213566431050158, 0.3047015433821709, 0.2529298851064309, 0.27854716089644893, 0.26651041979521073, 0.2235266054913818, 0.26459801603587696, 0.038564632879671046, 0.11801371853476961, 0.05616824684675936, 0.04645723894425369, 0.0316210849424895, 0.003307632328469645, 0.05524642377361144, 0.011121007689784856, 0.06885690451356241, 0.06057924362407141, 0.081103608137429, 0.04431056631444097, 0.07443003081596167, 0.08498555085258364, 0.09342612842015663, 0.07617250167344769, 0.10117257358995724, 0.07464853849076158, 0.053524833975044706, 0.033279796508185244, 0.04527479537322576, 0.08709342069062187, 0.06626521424207643, 0.0652154506382312, 0.06541944623170748, 0.06124372772237763, 0.05488725866453481, 0.9009599972798413, 0.9058091022150344, 0.8726171782717781, 0.8630973398845371, 0.6713656010189752, 0.6898703986365631, 0.8620467277970714, 0.7127216473074671, 0.5682119863771542, 0.14457812084455368, 0.11127622376703661, 0.1403087895784152, 0.14331150545533655, 0.11214620678335452, 0.10039727061195858, 0.11634895590170657, 0.10146331768494998, 0.12184633254607469, 0.143951321673766, 0.23310528297351296, 0.1760534291178436, 0.3803430052749678, 0.1662792003468272, 0.3689178418992818, 0.16074336476477624, 0.17143810451062513, 0.17847744884591288, 0.07341998340029643, 0.05457989825060994, 0.0634244802058056, 0.04817875772731073, 0.03465201304800125, 0.05776202298615585, 0.06224572444285936, 0.04405971674225917, 0.059559099062064136, 0.05855570420288081, 0.06574403082196334, 0.047047435017815276, 0.06626378113257547, 0.07542728408885291, 0.07963224012380965, 0.06723938205373148, 0.04983466043859808, 0.07198630126795724, 0.029440745289080028, 9.999999999998899e-05, 9.999999999998899e-05, 0.008175694201376649, 0.012156463351176705, 0.00020135638810425682, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08534128122625739, 0.08272656444668225, 0.09459733318765362, 0.07178357089541954, 0.10315017013169059, 0.07589430055997237, 0.10847348242606036, 0.1128807876267689, 0.07466912383578417, 0.06499574196013091, 0.05151530596633602, 9.999999999998899e-05, 0.03375547738739637, 0.029374908541748068, 0.01899114684965808, 0.04821016097518527, 0.07498150185295616, 9.999999999998899e-05, 0.039486892426647824, 0.04619777964110994, 0.03685274892747781, 0.03625352463714793, 0.05676330592818213, 0.040227629303640766, 0.04332809990638253, 0.060397775349737226, 0.058860332406965754, 0.25535968430647726, 0.24571075857875468, 0.22745421101765484, 0.23035238784670087, 0.1714511066506922, 0.19226744717352073, 0.20858675932675164, 0.22410309542217, 0.2508704104521715, 0.06971765699199017, 0.07128753782860253, 0.10070085262070405, 0.07608050244482079, 0.06172249372012173, 0.08000919278516161, 0.07672098293609086, 0.06241806679337292, 0.05943453078142613, 0.179446971169278, 0.12865041759708618, 0.16862783195104603, 0.13777505962288839, 0.1552316893421234, 0.12695358932236522, 0.18740916266739527, 0.13272285025925734, 0.1474628228520627, 0.19050113461744722, 0.1769638586494935, 0.19283228296773636, 0.2000912575060303, 0.1854973419003383, 0.20468288732921014, 0.22827173075103224, 0.22146505851192078, 0.18339959832107977, 0.12399363198277458, 0.15639675486544313, 0.13961213993855803, 0.16655568829650969, 0.16524205525273106, 0.13389238070791454, 0.12456440620887843, 0.15670531507954744, 0.13996796291055214, 0.1706279641167826, 0.15744806390982158, 0.15561969490160077, 0.18944511947122733, 0.1666859996634641, 0.18772009407351897, 0.16885528377713166, 0.1715183922612763, 0.17016823781496482, 0.15741335176105153, 0.16884029810214052, 0.16514216309381058, 0.17109510884863544, 0.16893888755830644, 0.16319067467157622, 0.15057552418114228, 0.15904358655174378, 0.1739983949475451, 0.13979317481072828, 0.18530596773949237, 0.1949612868409918, 0.16680333732800523, 0.153374364218964, 0.1387089786444209, 0.16048014106106911, 0.16005834250451956, 0.1666351246880402, 0.19914513833027736, 0.17037055790814426, 0.19660936792597006, 0.1799148833723171, 0.24760011122920378, 0.13197242667746356, 0.16628257018540027, 0.18099854855540365, 0.16079190416156763, 0.1831715103004281, 0.18845979499354426, 0.18276130478290886, 0.19012838510347874, 0.2135749380374129, 0.19327511264100616, 0.18209006259500515, 0.19415154774545607, 0.20568880668582523, 0.0692266029107037, 0.06582472681714258, 0.07792790598501365, 0.06333423696630325, 0.06594310815557969, 0.06161855874006583, 0.08286676140931626, 0.06771771765236168, 0.07120847155396859]}, "mutation_prompt": null}
{"id": "adb27996-ce75-42c8-b620-99dce25e57dc", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean())\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.1 * (best_individual - population.mean(axis=0))\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = np.std(population, axis=0).mean() / (np.std(population) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * (diversity_factor + 0.5 * np.random.rand())\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Adaptive crossover rate modulation based on population diversity for enhanced convergence.", "configspace": "", "generation": 49, "fitness": 0.15153771717412884, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.16.", "error": "", "parent_id": "f8644d36-eab1-43fa-9bc6-04352031671c", "metadata": {"aucs": [0.24420284171946072, 0.2578161679247579, 0.2070198142031563, 0.32959023562985634, 0.23096028490011866, 0.29978483833106273, 0.2300120289554587, 0.22808057583507002, 0.2334489756607695, 0.019177582559459005, 0.043563166319432134, 0.061756483037984644, 0.021526433220198316, 0.05575472322150221, 0.06075005233782793, 0.06366845826204481, 0.04959027130372162, 0.09521832187109525, 0.05044973639949135, 0.05309165914257119, 0.02494238013514405, 0.07422702107122547, 0.10006171735329861, 0.08876369584390031, 0.08527502526755759, 0.08571146481737524, 0.08694771335308182, 0.028008993417488415, 0.015149668515456183, 0.028768542186533907, 0.07381100185193701, 0.056140759467457446, 0.064655773410624, 0.07589375986716862, 0.08300855275091212, 0.07962725342441701, 0.8953525979662035, 0.8713642584201258, 0.8989623255880829, 0.7636957786940425, 0.8938191665003068, 0.8790064086528493, 0.8441446990797619, 0.7767901149972801, 0.785654300776468, 0.12421440143366758, 0.12724019201166725, 0.13337466750100357, 0.11107886209532059, 0.130493247616555, 0.1251547635851803, 0.14736197362148085, 0.11759111591510862, 0.1254787135904889, 0.18632990428560514, 0.19308637766117165, 0.17186922089653467, 0.15556907234782102, 0.20542050223980834, 0.17336697916703292, 0.4116779972646789, 0.20890486082238158, 0.22383027494893926, 0.0987143989739343, 0.09170820953883208, 0.07910827402300324, 0.036278043834301776, 0.07555484105903831, 0.06629596140218286, 0.07070418238771858, 0.07929005706530845, 0.09586240181319694, 0.07216813046120063, 0.07209025161953397, 0.08746491585611438, 0.05098253437671574, 0.1010569433649593, 0.07813909653141293, 0.07640484115108936, 0.0653965162948198, 0.07131774567542304, 0.03352088303524792, 0.01800702605732074, 9.999999999998899e-05, 0.047284618888256635, 0.03630384022601796, 0.05162153858129659, 9.999999999998899e-05, 0.028753433022242425, 0.016339741335697933, 0.12867590567416243, 0.1380574594569831, 0.11890788555297716, 0.13538069102593742, 0.11517818551539438, 0.08950951550320385, 0.14302570786720314, 0.1348687564800366, 0.12834305796152967, 9.999999999998899e-05, 9.999999999998899e-05, 0.029662352534745473, 0.015385912075671748, 9.999999999998899e-05, 0.005071666535986896, 0.014870592938429739, 9.999999999998899e-05, 0.04829176222390397, 0.041291644073040645, 0.046080663457390036, 0.054402235466290416, 0.031080130179281018, 0.06809805187180318, 0.028361584128330453, 0.011368526289074365, 0.005860151806144298, 0.03144604441019905, 0.2032419061105436, 0.21116337165147925, 0.2142942708088581, 0.2055799784281095, 0.1714511066506922, 0.20015612478355793, 0.2418096222044871, 0.2309855157553321, 0.23105224615821118, 0.07775800459674242, 0.06900612832480568, 0.06066317638107377, 0.0731219292192854, 0.06443695906539904, 0.06868359422615744, 0.07618943831090852, 0.060945227473426344, 0.062486289563181474, 0.14577674764811377, 0.148814692655165, 0.13210452426418562, 0.16728878982073725, 0.14343289578364438, 0.13641001539076658, 0.1548319375745565, 0.1613995570877893, 0.13907204319967736, 0.16086223069462535, 0.15059180881326262, 0.16814906059237933, 0.1822838811604094, 0.18483083778134302, 0.191704349294763, 0.22511779897213868, 0.21805555276496646, 0.1787154776873473, 0.18136779660314717, 0.13754136499189895, 0.17513545177981127, 0.14134320606580708, 0.1452062398081484, 0.14922880608337075, 0.13010604582141128, 0.16337581466455142, 0.11208879057514698, 0.16055680696041252, 0.14841135409861195, 0.17265128103896954, 0.16622874364528883, 0.15183258427264412, 0.1691559772568798, 0.1665039788583912, 0.15945149247227441, 0.16482046827523533, 0.16561841814511336, 0.16691583535001941, 0.16649646751211877, 0.1663842477513131, 0.17334296604569155, 0.16852136085902258, 0.1607471465951108, 0.1735396013281395, 0.1878100674788591, 0.1542160286976485, 0.17662338737932348, 0.2152377038429989, 0.1575408941831602, 0.14350052321830442, 0.14820372726119024, 0.16225141036153568, 0.1649551691312301, 0.15692009224327252, 0.15115513925671276, 0.15762276874680392, 0.12780277668686557, 0.15364030070752743, 0.15531177336298518, 0.12949435669360032, 0.16400197343597922, 0.17366433014171967, 0.15708262173822896, 0.1862524044917604, 0.18423787893741117, 0.1850695657443595, 0.1958233061504674, 0.2135749380374129, 0.1923595878128337, 0.17873656863354648, 0.1785179073991502, 0.20568880668582523, 0.05474776382054802, 0.0642125818930499, 0.0712461326037872, 0.05802703679553911, 0.06573826437763597, 0.058906640554896916, 0.08399861132067965, 0.06536471858067794, 0.07209415259688046]}, "mutation_prompt": null}
{"id": "3688f0ce-3a11-496e-b9a5-46ded71a2083", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                progress_rate = eval_count / self.budget\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean()) * (1 + 0.05 * progress_rate)\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.1 * (best_individual - population.mean(axis=0))\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = np.std(population, axis=0).mean() / (np.std(population) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introduced adaptive mutation scaling based on iteration progress to enhance convergence speed.", "configspace": "", "generation": 50, "fitness": 0.15339052254923383, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.16.", "error": "", "parent_id": "f8644d36-eab1-43fa-9bc6-04352031671c", "metadata": {"aucs": [0.21311539286754266, 0.31946197675866106, 0.23304888825612702, 0.24321859159018244, 0.22263414391943792, 0.2579828839645053, 0.2270656742574454, 0.2907297150870706, 0.22930668091924378, 0.07831140999775055, 0.06739934441521778, 0.08873528636997019, 0.0357126915783319, 0.09175270910709366, 0.08174975200011103, 0.09445096652096618, 0.050148634109640655, 0.035298555787981245, 0.06576262108168163, 0.06417006559690108, 0.03330145702034626, 0.08953266032457452, 0.1472960878725289, 0.09237025363227547, 0.11917763227474387, 0.13158400818757787, 0.09228188272559679, 0.026681160131916126, 0.03470598587676288, 0.043840588761649424, 0.06216174718350831, 0.05935370601740142, 0.08697271829226505, 0.0819851257242653, 0.07721272480629016, 0.053913220185823785, 0.9009600027564987, 0.9058091022150344, 0.9049160484613171, 0.7058581130396315, 0.7226545597533642, 0.8950664059027248, 0.8357367675802189, 0.8910711967201196, 0.7834059373294113, 0.13335458543891887, 0.131615769131448, 0.16419613223477914, 0.11306345397222539, 0.1363702613883948, 0.13803518040281526, 0.12701524834592004, 0.13011389053027234, 0.1325833418209308, 0.17074789529007028, 0.2036253080314674, 0.16788186131336846, 0.17052619523750523, 0.14496827850247007, 0.20635936172855263, 0.19276929242155316, 0.24017779035755127, 0.2297476034347532, 0.05094929374285584, 0.07108581707483574, 0.1131268776766785, 0.05194511101487498, 0.06629447389332777, 0.08578491849574388, 0.09226891617163768, 0.08443899926506548, 0.0875925441490244, 0.066388053384828, 0.06757091077577937, 0.07495822581512035, 0.04868270727239776, 0.06040668878770594, 0.06901045365534464, 0.0653012340955269, 0.068692062521299, 0.07565482745892127, 9.999999999998899e-05, 0.01598189318098797, 9.999999999998899e-05, 0.002542701853625151, 0.0010328907547429989, 0.007977537982369554, 0.0063053786156073155, 0.02664257461683861, 0.017476910287631653, 0.10119557271283608, 0.12782286592265224, 0.11860618375062693, 0.15156005910742099, 0.15691724786030314, 0.07698906409725226, 0.11407946420937731, 0.12124694668245262, 0.08552080133146578, 9.999999999998899e-05, 9.999999999998899e-05, 0.10535061519492261, 0.06281010294893696, 0.0408312701093424, 0.001214535401704242, 0.0015612664649932162, 9.999999999998899e-05, 0.019752174031272274, 0.02219596341589547, 0.03342212310505854, 0.046183507646802346, 0.03991143749100834, 0.0743200495713241, 0.04515805946117002, 0.0396815968935309, 0.01621313207473718, 0.02235360082785831, 0.2003844423089155, 0.19603823260083686, 0.19019552233756265, 0.2085479974582949, 0.19944169100754627, 0.24741719795929407, 0.27655525241400936, 0.23252034355865958, 0.20558862734388073, 0.0671175242449279, 0.07510374484677962, 0.06885827566184488, 0.059821252848524464, 0.08545168086531907, 0.0726177611910318, 0.05869016091649304, 0.05126058750604556, 0.07070539529796693, 0.14282875431904507, 0.11993506179623947, 0.13752172064217483, 0.1602341807080243, 0.14948075738165478, 0.14409434064415894, 0.14963138758589234, 0.13423206105541108, 0.13729395035071357, 0.1746820423434663, 0.1646604494835221, 0.1984446336785345, 0.1957041366212119, 0.1963474707109104, 0.18228324132994878, 0.1768326705184765, 0.2543815515152996, 0.20786059870392004, 0.18243357345703914, 0.14852007282086366, 0.18980266694861558, 0.14943003089846696, 0.1902213131605942, 0.166296354528934, 0.15436466196657272, 0.1328503153035685, 0.12632791977267066, 0.19543370759259204, 0.15729845478803473, 0.15805509761121683, 0.1685452502737198, 0.16716398554593093, 0.15961206446699017, 0.15598121190973036, 0.16123725368674569, 0.19431548583174096, 0.17797869130717847, 0.16593119130725043, 0.1784317900093989, 0.17491183322292558, 0.1689566434652957, 0.16958993188822857, 0.17292969694408988, 0.16606436322774643, 0.17871227938879564, 0.13641436958465714, 0.16723305371217523, 0.16880574168208662, 0.16092667089618917, 0.14729815993973827, 0.15792228689867838, 0.21341171032266626, 0.1400017857535356, 0.15692009224327252, 0.14778359705121458, 0.13469858165964144, 0.2024593846688606, 0.14306308764085574, 0.13247272346688677, 0.16028919152547239, 0.1609143438768892, 0.17393823825544896, 0.3147425688303568, 0.1852891690687024, 0.18491794146994767, 0.18681494010795663, 0.18937042207122423, 0.2135749380374129, 0.17718245946549382, 0.1831524567718067, 0.17773867596174275, 0.20568880668582523, 0.05432815527010393, 0.07341901329176415, 0.07055822226503738, 0.06866892313839357, 0.07071118135490073, 0.05457520089343326, 0.08005352154213652, 0.06386032321898916, 0.06442622152911315]}, "mutation_prompt": null}
{"id": "bb9adb4b-93c4-4412-b5a0-1012be0eb994", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean())\n                mutation_factor *= 1.02  # Slight adjustment for improved exploration\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.1 * (best_individual - population.mean(axis=0))\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = np.std(population, axis=0).mean() / (np.std(population) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.02  # Fine-tune crossover rate dynamically\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Improved adaptive mutation with dynamic crossover strategy for enhanced exploration-exploitation balance.", "configspace": "", "generation": 51, "fitness": 0.15483533413877165, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.16.", "error": "", "parent_id": "f8644d36-eab1-43fa-9bc6-04352031671c", "metadata": {"aucs": [0.23968217111316514, 0.2296237919661881, 0.24625877650660066, 0.2728548438119879, 0.2480361171826887, 0.24152370058383132, 0.2199360919389194, 0.23103110101027646, 0.2437130723895502, 0.06888378291790254, 0.07585696646318096, 0.06962640445622381, 0.10839129641012601, 0.08804618097828498, 0.10335563239833168, 0.04556506836982188, 0.040899056346132556, 0.04022870384213051, 0.06600936113780664, 0.0770803881876414, 0.0272629165424223, 0.08346067387381917, 0.08773067344222907, 0.10156401243099955, 0.07635779250518349, 0.09052920924819918, 0.10633619140053485, 0.048581845938174384, 0.04922195031237375, 0.04478850735973716, 0.05040996476439252, 0.06940826690008595, 0.07311832203063384, 0.08059512369913568, 0.0617340755833129, 0.0788113762534225, 0.9009620904532042, 0.9058091022150344, 0.9049160484613171, 0.7225049223170189, 0.8415734866588912, 0.6805117100289937, 0.8357367675802189, 0.8891545944804844, 0.9003899323158896, 0.13123279677157118, 0.14000220260691787, 0.14165011037057795, 0.1090411427378416, 0.1787757652864067, 0.13587271222147324, 0.12703771144477727, 0.11500103351151014, 0.15612264340945836, 0.1731571277890407, 0.19308637766117165, 0.21277155890303867, 0.17906955169523242, 0.15407684404769229, 0.17331310464325, 0.21514922045750662, 0.19593963679019133, 0.18935499260494482, 0.0773245453212057, 0.06688145531613887, 0.10234102491473207, 0.03941052454970395, 0.06831736737855076, 0.0799439077561066, 0.07722192545599993, 0.08300443227133236, 0.07149686841425551, 0.0483503357130628, 0.09492271561139931, 0.10407965717116785, 0.04747146923182555, 0.06738900505549605, 0.051760456984270786, 0.07335397836703161, 0.05695485816256729, 0.0701500468626064, 0.005839308685191447, 0.01632851204517627, 0.02437477708346447, 0.024617028837382038, 9.999999999998899e-05, 9.999999999998899e-05, 0.003932639959435935, 9.999999999998899e-05, 0.006031630219786699, 0.10358377736178825, 0.11524952471044458, 0.16254286140463958, 0.14733790849829786, 0.17528440053799899, 0.10006556719903348, 0.14013351756200032, 0.1302003876665131, 0.11511889161007205, 0.0033119535932754074, 0.019246077031830122, 9.999999999998899e-05, 0.031531149257871816, 9.999999999998899e-05, 9.999999999998899e-05, 0.05708812329631985, 0.0545526595926602, 0.0292951553938694, 0.06030843756220472, 0.049631505332813464, 0.03296969405769301, 0.03633330762111131, 0.031562843600560386, 0.0246170065754997, 0.037419055444906424, 0.023715941508463234, 0.012728188708828414, 0.2577778123308433, 0.22623831828237284, 0.2084368434961511, 0.2055799784281095, 0.19483129624164752, 0.19226744717352073, 0.25360021466574034, 0.2643852396876075, 0.2337339391417479, 0.11730087160218283, 0.091826894837018, 0.05788201469711751, 0.06782759746272748, 0.0716527826782174, 0.08339949819995196, 0.07531836366580102, 0.07805664923006916, 0.0838173360007548, 0.14368310519402672, 0.1356555845115579, 0.16494836197088225, 0.1578748809351509, 0.143313976672229, 0.2138519961216775, 0.14963138758589234, 0.1414003241245615, 0.1724957155595288, 0.181122423344394, 0.15059180881326262, 0.19441351094951143, 0.20088403389979403, 0.18529257164026736, 0.1746535461113935, 0.19966571071667472, 0.22738961472249652, 0.19833956905216732, 0.141248373679975, 0.1282477936244364, 0.15798179725776484, 0.17306003174723428, 0.20202598312012765, 0.13474542363195174, 0.14070904835201414, 0.1304560148855176, 0.15562259132503498, 0.15983956469107707, 0.16227333298165836, 0.1556828644743362, 0.1696153477268193, 0.16200685319146146, 0.17890688715430647, 0.16848442560362886, 0.16802194265230885, 0.19285416496858765, 0.16338250880869287, 0.167470194670148, 0.168327748800999, 0.1704010428346424, 0.21394201893606712, 0.1692017196029536, 0.21626612845009097, 0.1631432560547741, 0.176722842265148, 0.13258259513998816, 0.23870654600674346, 0.164226695646989, 0.16009051532424257, 0.1616944739788927, 0.1435402862290539, 0.17864053535208135, 0.18797127780035805, 0.16169321296566974, 0.19755104776529187, 0.15444128618353603, 0.24184010791766009, 0.15772552081813596, 0.11869244264456325, 0.16356268431112253, 0.16618686080450207, 0.20491217416087992, 0.18862850183534774, 0.18016385218511421, 0.1861851275956482, 0.18313870727594928, 0.18683568409856555, 0.2135749380374129, 0.17557282394712825, 0.17410534117038623, 0.1888020828882938, 0.20568880668582523, 0.0629050497842103, 0.06398413127985003, 0.06948196134035045, 0.06446031138556518, 0.06473432343812979, 0.057376670288083575, 0.07877457480841876, 0.07022075070729428, 0.06130614667889389]}, "mutation_prompt": null}
{"id": "61b2e773-22d1-4a0f-abd5-b715fcba9dcf", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean())\n                mutation_factor *= 1.021  # Slight adjustment for improved exploration\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.12 * (best_individual - population.mean(axis=0))  # Adjusted elite guidance\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = np.std(population, axis=0).mean() / (np.std(population) + 1e-30)\n                self.crossover_rate = 0.66 + 0.34 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor  # Adjusted crossover rate\n                self.crossover_rate *= 1.02  # Fine-tune crossover rate dynamically\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with adaptive elite guidance and dynamic strategy adaptation for superior convergence.", "configspace": "", "generation": 52, "fitness": 0.15167531224960024, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.16.", "error": "", "parent_id": "bb9adb4b-93c4-4412-b5a0-1012be0eb994", "metadata": {"aucs": [0.30929595042772284, 0.19418311028257218, 0.2644680186744688, 0.24514605416427238, 0.26600227170467494, 0.21697622877202127, 0.2211838689356308, 0.25810321288531235, 0.22030682030925297, 0.03254080341344556, 0.07517651771857758, 0.04642457356565033, 0.09356117425185151, 0.08985165639886239, 0.036334264817894146, 0.07355932939867349, 0.04314822575053345, 0.025852057349148194, 0.07784492797301612, 0.07181090354196318, 0.06641550326468115, 0.08988814251371458, 0.07877580618197066, 0.09316837839629921, 0.0897422278816421, 0.10552260794991941, 0.0828800155257653, 0.03853994056784593, 0.02781306312002252, 0.06364543169040204, 0.06688693722593164, 0.06527476180974967, 0.0617260112078033, 0.07108500479600388, 0.055418942190351816, 0.07426885236689684, 0.9009620775868343, 0.9058091022150344, 0.9049160484613171, 0.7132777719627492, 0.730364826386888, 0.7731178199232471, 0.8597814631651703, 0.8893150857161815, 0.7843214813570807, 0.1592517143822504, 0.12484449351189564, 0.11921845822539656, 0.12301360682124118, 0.1308698403137305, 0.14868265935215408, 0.1458711778602645, 0.10976405438860803, 0.14056683581927243, 0.16438599838812173, 0.20077710303988994, 0.15516850712240537, 0.15410870679329036, 0.22024764283361264, 0.21015934122905333, 0.2035428033341533, 0.1967935375997938, 0.19008173941941786, 0.07619479393212769, 0.07390222495834786, 0.07186839205902829, 0.06160699544926951, 0.04111148650299834, 0.08636667413220933, 0.12110890952869924, 0.09013888115533297, 0.0723500916000025, 0.07800752272722888, 0.08536459755352444, 0.07720245150748928, 0.05364083690382959, 0.081332873266042, 0.07060375907573235, 0.06409880102346521, 0.0691462931921909, 0.07250182683975259, 0.007498489787471363, 0.02462756907102326, 0.00032777407987016893, 9.999999999998899e-05, 0.004979524428841087, 9.999999999998899e-05, 0.02253534568436899, 0.021920554327549358, 0.011967611164455216, 0.11814015161823577, 0.13432656804371412, 0.1062607413885529, 0.1133620817935378, 0.10017817019678699, 0.09415563039171904, 0.11862841709936056, 0.12057464948251984, 0.11405637676301761, 0.03423878168145167, 9.999999999998899e-05, 9.999999999998899e-05, 0.04978239354337399, 0.08910050362203814, 0.050750139702997465, 0.04729565981802519, 0.006584785817662087, 0.03828078588867012, 0.05014781881564612, 0.012356330319318709, 0.037073037190748837, 0.04860626722423056, 0.0323866156420447, 0.05188970744799848, 0.01938152804798332, 0.05574956751432747, 0.05202934495419509, 0.22481676969452347, 0.22700554095262082, 0.17783153199113855, 0.2055799784281095, 0.1761275907157842, 0.19226744717352073, 0.23282284465597514, 0.22772308942716768, 0.24412542269813042, 0.07351947407535242, 0.07443852215409119, 0.07033204561377371, 0.058156458280577916, 0.08186266965843714, 0.07852264315332869, 0.06208256953828861, 0.066995782743271, 0.06523716198157203, 0.13723787337380777, 0.13406693277569615, 0.17357947231262127, 0.15063241377545178, 0.15029618515390974, 0.14796893566226865, 0.152390229672138, 0.14943144939730268, 0.1291962185493032, 0.17955802294780354, 0.20036479339056856, 0.19873009866079694, 0.17767461231055626, 0.2059017953448724, 0.2241189251302257, 0.1687535591702688, 0.21875989078374847, 0.1807925472790095, 0.16160290096331886, 0.17843551335267838, 0.17135273701665432, 0.14522327810993263, 0.16909481574139806, 0.13003636633605709, 0.12710438590021533, 0.13925712784384703, 0.13091425388324318, 0.16717288380902973, 0.16071431824473925, 0.15681872617924597, 0.15974778588325467, 0.15953345789125684, 0.15809810613091613, 0.1567556393758499, 0.15767366835081464, 0.2139328835069486, 0.16419352601920634, 0.15881224285159934, 0.1684072569156071, 0.16009496966323333, 0.1734224494304032, 0.1855489274164499, 0.169425387235016, 0.17651427440547574, 0.17622126268413307, 0.18562696240397547, 0.16948170572507748, 0.2279657381821607, 0.16480962614825534, 0.1657588063509251, 0.12633047528926367, 0.14347549298231355, 0.13258394576051835, 0.15954669307783298, 0.15665291787775038, 0.13260122983224065, 0.24260521773484944, 0.13270693002523726, 0.13752525022876128, 0.14580564964559017, 0.1609143438768892, 0.16788626293322229, 0.1732614300587444, 0.20739588155809363, 0.1840951386782479, 0.18485353519594427, 0.1872814265882855, 0.2135749380374129, 0.1731091891101234, 0.18277315866460053, 0.19000255284420586, 0.20568880668582523, 0.06078213858949311, 0.0658388612711922, 0.06917894158082605, 0.05831868766225967, 0.06785264674543268, 0.05716687610169702, 0.07578327689401954, 0.07600137671352347, 0.09344486289972176]}, "mutation_prompt": null}
{"id": "7e3679e9-9f99-47cd-bee2-08e95dd7be8e", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                elite_count = max(1, int(0.1 * new_size))  # Preserve top 10% as elites\n                elite_indices = np.argsort(fitness)[:elite_count]\n                elites = population[elite_indices]\n                population = np.concatenate((elites, np.random.uniform(self.lower_bound, self.upper_bound, (new_size - elite_count, self.dim))))\n                fitness = np.array([func(ind) for ind in population])\n                self.population_size = new_size\n                eval_count += self.population_size - elite_count\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean())\n                mutation_factor *= 1.02  # Slight adjustment for improved exploration\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.1 * (best_individual - population.mean(axis=0))\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = np.std(population, axis=0).mean() / (np.std(population) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.02  # Fine-tune crossover rate dynamically\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introduced adaptive population resizing with elite preservation to enhance convergence speed and optimization effectiveness.", "configspace": "", "generation": 53, "fitness": 0.13261320854958938, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.16.", "error": "", "parent_id": "bb9adb4b-93c4-4412-b5a0-1012be0eb994", "metadata": {"aucs": [0.18027231631248652, 0.20202173702847026, 0.1730281070049814, 0.18064680828911328, 0.1777919030311128, 0.16641757239587518, 0.1744097648463241, 0.17692419020931105, 0.1949311199085223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04599786401765271, 0.05064119998803218, 0.034860869172881004, 0.06019140653187971, 0.05652506367643273, 0.06371412363564066, 0.06641927993634289, 0.06645800543640001, 0.07970617643796252, 0.03025479241483331, 0.03231022444073173, 0.03348542083595185, 0.04032739209999103, 0.036234873327684713, 0.03893566127455872, 0.05332368716383895, 0.04974751996366411, 0.058914440415048897, 0.9009620904532042, 0.9058091022150344, 0.9049160484613171, 0.7225049223170189, 0.8415734866588912, 0.6805117100289937, 0.8357367675802189, 0.8891545944804844, 0.9003899323158896, 0.11578179878265349, 0.12022999417694413, 0.12739157667868095, 0.11331544615275457, 0.12973960357103642, 0.11562501183091389, 0.1323971396697916, 0.10278534966504371, 0.15377159387195427, 0.15378345231618784, 0.19308637766117165, 0.15002239502587422, 0.16082823777500066, 0.13745721202333405, 0.12324277145716367, 0.1670577511299931, 0.17300109678159548, 0.1610220204826035, 0.03588892170292579, 0.023765366423978418, 0.045081010344315664, 0.035053668733081356, 0.049756874676181506, 0.06459586992201471, 0.048184214010140725, 0.0538774090589188, 0.05270999184255576, 0.0308310418815132, 0.05554031043295837, 0.041026395527004045, 0.012144102381725363, 0.05369732031223906, 0.016078877460930396, 0.025816558597296146, 0.021157290030376474, 0.046824479800754326, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06781591114638397, 0.075901578737114, 0.14384518960058545, 0.08467413278689961, 0.17528440053799899, 0.05233620067053957, 0.06837741299208433, 0.07343220215609125, 0.07528788435893552, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002454849956190497, 0.0032026645990150815, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026906920094458275, 9.999999999998899e-05, 0.026034268200986976, 0.02382715138222158, 0.014200113162763262, 0.22053830167176658, 0.19677591904025138, 0.2071629212601256, 0.20696417146302315, 0.17584980581258935, 0.19226744717352073, 0.21045736264750436, 0.19085307148247388, 0.19263802651710116, 0.05223938758674063, 0.05362022061337279, 0.03979122411507796, 0.04396686490382473, 0.06373557244180972, 0.0700220807301335, 0.044662713257261566, 0.049353315969762335, 0.06541379442257023, 0.14477696805379436, 0.14468023140408204, 0.14827215687131023, 0.1578748809351509, 0.14286227034817656, 0.15046355666133782, 0.14963138758589234, 0.13814110023023263, 0.16751811123938132, 0.17676741364690807, 0.16652391246847142, 0.17278939827632112, 0.1575195746637279, 0.17048555247353447, 0.161856142914947, 0.17276434879612412, 0.18631720105002336, 0.1584035263955138, 0.14647255158871753, 0.13504905023316027, 0.15197812102614372, 0.12888592157847434, 0.13547869535826884, 0.10628703954325125, 0.11689334350904579, 0.1237427242099084, 0.10596668351909588, 0.1420028883124882, 0.13579938498784017, 0.1403921255588435, 0.15792100592001024, 0.16644865860046298, 0.16139284637741147, 0.1450959537987121, 0.1465668754722319, 0.1813561167806359, 0.15472456510238752, 0.15862877033148037, 0.16825051832803217, 0.1593209815213582, 0.15644299124945904, 0.15741144434889665, 0.14699164145981836, 0.16119555336526215, 0.16207881422481074, 0.13656434733392764, 0.16679477618376493, 0.1608298705838197, 0.20269737398612975, 0.14297477488837795, 0.14501467945159952, 0.15129447681641972, 0.18398405711876265, 0.16115809557464456, 0.19755104776529187, 0.14735067876387042, 0.23183520556428927, 0.1277516136072271, 0.1355225006464008, 0.15155473647633533, 0.17736363269055, 0.24915111061366124, 0.23235437368632983, 0.1813728837970442, 0.1840951386782479, 0.1802849567361824, 0.1907437960477496, 0.2135749380374129, 0.1758156986174565, 0.17527599436119057, 0.17905412730426784, 0.20568880668582523, 0.055563605216882195, 0.051518555154028034, 0.06689929358057778, 0.05016451294113011, 0.05955580211139111, 0.049250847768117834, 0.07532529613519179, 0.05792925997293019, 0.05287362158858777]}, "mutation_prompt": null}
{"id": "0ee54112-a367-4e98-9469-1064cdf63b91", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.82  # Adjusted mutation factor for better exploration\n        self.crossover_rate = 0.92  # Adjusted crossover rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.4 * self.budget:  # Enhanced dynamic population resizing\n                new_size = max(5, int(self.population_size * 0.7))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.12 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean())\n                mutation_factor *= 1.03  # Enhanced exploration\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.12 * (best_individual - population.mean(axis=0))  # Adjusted elite guidance\n                mutant_vector = a + mutation_factor * (b - c) + 0.13 * (best_individual - a) + elite_guided_factor\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = np.std(population, axis=0).mean() / (np.std(population) + 1e-30)\n                self.crossover_rate = 0.7 + 0.3 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.03  # Fine-tuned crossover rate\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Improved Differential Evolution with dynamic population sizing and adaptive mutation for enhanced convergence.", "configspace": "", "generation": 54, "fitness": 0.1442086475496106, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.16.", "error": "", "parent_id": "bb9adb4b-93c4-4412-b5a0-1012be0eb994", "metadata": {"aucs": [0.22274423250204023, 0.22870338558058223, 0.2178569221429616, 0.2410612090178984, 0.2548856562681201, 0.21373863367324075, 0.24790993917248838, 0.22575328808951423, 0.2031090058747047, 0.020944546324222935, 0.061225565809508, 0.07482929557047768, 0.05932414065213143, 0.06852053675829484, 0.01811561623713498, 0.0157980395410372, 0.03340083906580238, 0.029161299463413837, 0.06565088090654758, 0.07977783773974823, 0.06126477541272801, 0.07961693451040885, 0.09203608858601897, 0.08808557466736744, 0.08171611723718508, 0.08005510957703521, 0.09056183271647555, 0.040198964502502155, 0.02122439984916691, 0.04641982818760937, 0.04894257310318739, 0.0618829594304694, 0.059555678164530224, 0.05917794358993955, 0.05296096265871297, 0.05019714278606591, 0.9009642165675837, 0.9058091022150344, 0.9049160484613171, 0.6774749092346346, 0.6271718440853322, 0.6753823565992297, 0.8357367675802189, 0.8895402961945911, 0.8956469293840909, 0.14373987344122907, 0.13645245503843817, 0.13312907983601674, 0.11899049688304508, 0.13395951621507596, 0.13546296148747983, 0.13975870850001537, 0.1101232975744737, 0.11283934220606628, 0.14256500486341717, 0.193658138163193, 0.17199380026004096, 0.19874716222462052, 0.16779704555939712, 0.15519528439272035, 0.1744940606551585, 0.2019943870459271, 0.18792666377822642, 0.0471435367016827, 0.06062352083368239, 0.07029578191305841, 0.06855040418340264, 0.044812787479558525, 0.057418578607450255, 0.09901866729588871, 0.06128485151040164, 0.09337367537716235, 0.05957675607235047, 0.07074668262748307, 0.05791054887610647, 0.025169636345967028, 0.06550556313101874, 0.04205815417071168, 0.06066844862877607, 0.06374151512051796, 0.06386211913438733, 0.003344335680834365, 0.02336319212666238, 0.016874089660274705, 0.003460036925501342, 0.01824993800544905, 9.999999999998899e-05, 0.019452826017912983, 0.02288651194645608, 0.009444597665054788, 0.12513902323128567, 0.102940434981458, 0.12084170152908158, 0.11218411606114698, 0.10834338493576401, 0.09383413122170392, 0.11449886448359248, 0.11615930785543205, 0.1289650653151495, 0.0044742737982466085, 9.999999999998899e-05, 9.999999999998899e-05, 0.04596031027627867, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012536660298645641, 0.04807535598475787, 0.037204005524158146, 0.031610654734483434, 0.01597265245561741, 0.03916224006616742, 0.038284555464025316, 0.031178044220838474, 0.022309617798455972, 0.04146455283555983, 0.22623652166777675, 0.20627715289091686, 0.24307647807386246, 0.20661338705774646, 0.17304427762967411, 0.19226744717352073, 0.21146313668267946, 0.18194467993481123, 0.23289505485687712, 0.0748130224553144, 0.07432854633412989, 0.06285053088339043, 0.07645089937401173, 0.08474679408515462, 0.08392386431925969, 0.06192939673424003, 0.05449420265548799, 0.08228610926613633, 0.14750462690698496, 0.13133522686372945, 0.13703068348428837, 0.13915340774834517, 0.17503338802616875, 0.16530962083212597, 0.15179032076298593, 0.13188948001468448, 0.1299695363869825, 0.1602710620254989, 0.16408923318408064, 0.180052567131742, 0.1739568765582271, 0.1905098533901427, 0.16842993450395316, 0.18136216937419547, 0.2102709160573949, 0.1767931732535709, 0.15691543706643607, 0.1320971611048437, 0.17742833403036928, 0.13180440141093075, 0.16313020953556712, 0.13512132690981127, 0.11553207268499355, 0.14386103416485185, 0.13485286830617993, 0.15581839493865812, 0.1501388499148112, 0.1477268063697551, 0.1600867961268475, 0.14802868458738394, 0.16367323410488588, 0.15697603361118506, 0.15900452831916445, 0.1793650952216327, 0.15769287611373273, 0.1615964412545613, 0.15610578138529108, 0.17895688948814037, 0.1709226516914406, 0.17229271950528768, 0.14818684462065923, 0.16447963595450188, 0.17360605336429413, 0.2399599796899361, 0.17601295893907265, 0.1593083731255257, 0.18996729980896854, 0.19721417299317945, 0.16097848863505937, 0.19934215184716642, 0.13508620479494948, 0.16326332777023067, 0.1404770609063073, 0.14982317698648062, 0.13878642532337448, 0.13854950069547667, 0.1089501543251794, 0.12848107894137262, 0.16134785107279093, 0.16652728448689325, 0.15087829247257667, 0.17770041152585003, 0.18806380836531966, 0.18226105306334905, 0.1952616142658401, 0.2135749380374129, 0.17552990352752218, 0.18924928172891275, 0.17993714597965704, 0.20568880668582523, 0.06245638882297955, 0.06241055867848788, 0.07165846877844195, 0.056396068597655336, 0.07440663625061916, 0.060545731301024364, 0.0815057729843085, 0.07789351983459492, 0.06122602618179551]}, "mutation_prompt": null}
{"id": "f5ccb7fc-f235-4732-be5d-132f6b2059e4", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean())\n                mutation_factor *= 1.02  # Slight adjustment for improved exploration\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.1 * (best_individual - population.mean(axis=0))\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Modified crossover strategy\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.02  # Fine-tune crossover rate dynamically\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with adaptive mutation and crossover influenced by convergence trends for improved optimization speed.", "configspace": "", "generation": 55, "fitness": 0.1566880679924138, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.16.", "error": "", "parent_id": "bb9adb4b-93c4-4412-b5a0-1012be0eb994", "metadata": {"aucs": [0.22122682518832226, 0.21550930235552446, 0.2566252509792739, 0.2766522652486627, 0.26873317940770625, 0.23975688014865604, 0.23513636417079053, 0.2042762753979207, 0.261748037153989, 0.07390277687178914, 0.04925640908373663, 0.10951703139913516, 0.07925459870230989, 0.07384258210147832, 0.0366195258611024, 0.03547850424735077, 0.041171829017506156, 0.0631928101544027, 0.05750082962698977, 0.07839907673312896, 0.0640806424023791, 0.079082899127213, 0.08002119247177142, 0.08890694658827447, 0.08553125738336653, 0.09700890730636069, 0.08464459712748851, 0.04492884349046289, 0.03443306895177123, 0.04397903803762182, 0.07577114170407129, 0.06352971552651743, 0.06791072413001875, 0.07294278302731982, 0.06326091882747842, 0.055042926416404736, 0.9009622924864553, 0.9058091022150344, 0.9049160484613171, 0.7611323426344814, 0.6784306713474879, 0.8950680006848801, 0.8357367675802189, 0.8893192733400825, 0.9003899323158896, 0.1567219784585041, 0.1497506941307022, 0.17347238151325817, 0.13635878730890127, 0.14057912715191012, 0.15457428152713326, 0.15575022771338576, 0.11814640881436589, 0.14843610944196084, 0.1669224391009464, 0.20188218928523616, 0.1827335836374383, 0.16230255956425188, 0.37454943285630116, 0.16811483232898095, 0.23752906043279276, 0.23029403582204966, 0.1963920990845328, 0.0774301024117594, 0.04142615851515674, 0.08082503950789799, 0.0671581192086591, 0.07485665471745484, 0.07850369732798534, 0.08174092846805958, 0.08437241493226788, 0.08299926494975207, 0.10437316189097723, 0.07294441881830149, 0.119853242879006, 0.03532034553776864, 0.06683843177213489, 0.05558690747583683, 0.07381498483626492, 0.05105612942960358, 0.06776379374926977, 0.07824685835409384, 0.049523671145550674, 0.04296497951797684, 0.02003365812233604, 0.021273435934253904, 9.999999999998899e-05, 0.013225484370394391, 0.012760824228384315, 0.017315204456412214, 0.10876525433867867, 0.1187075638562628, 0.11637604835412507, 0.1325751818322911, 0.14590226458171418, 0.11062895394178318, 0.12159763935297574, 0.13428925370836164, 0.12529530604237848, 0.013554207307152288, 0.028831258977041085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03993358277007797, 0.010349200852536877, 0.03316329294562037, 0.029621834816419557, 0.023312872207025936, 0.04075468793838333, 0.05998112654447518, 0.06801960312962851, 0.051860538014465996, 0.055968796228041406, 0.019698035352615273, 0.03223234170198119, 0.031082896519907477, 0.26955825183835236, 0.25853385625770164, 0.25810578492778136, 0.26456487419914776, 0.22176277115780862, 0.23786695432983318, 0.2369710972864163, 0.24693071704396863, 0.2336728716298998, 0.06779008629047167, 0.07291167395488396, 0.06990967401222092, 0.06209205913750815, 0.07936461028724284, 0.06957948411194159, 0.07538890067145965, 0.06736909045520967, 0.08229701322850802, 0.14274828504644554, 0.12351481463405811, 0.1359325318164183, 0.14285390550537191, 0.13694625534154037, 0.1363432609474612, 0.15773178210189565, 0.15571242302574606, 0.13919576823291013, 0.20770315459811772, 0.19722098076134276, 0.19230391472787678, 0.1594871811582651, 0.19913878160857934, 0.19517418015745902, 0.21695855514710272, 0.1853115229253952, 0.16842027595608666, 0.15152276918732588, 0.17420276370083188, 0.18104310685827307, 0.14538869052915215, 0.1726062893176601, 0.13540725259229525, 0.12588400571119074, 0.1550784902706066, 0.12346335209900428, 0.1466283573643654, 0.14024711114364086, 0.1667848011590689, 0.18059862706972507, 0.14631595537501885, 0.1552213634242693, 0.16230361716985497, 0.15293267878216588, 0.16401959115272224, 0.1530687171756535, 0.18024143909069845, 0.16825051832803217, 0.16795851489816283, 0.17873158127096944, 0.17144328425181432, 0.16587817058635013, 0.17829094043842486, 0.18159597748364942, 0.19436319202399677, 0.21126746644172334, 0.1593083731255257, 0.15995426743214047, 0.1682535671327804, 0.13403258738285984, 0.2047466651059754, 0.13813563534626594, 0.16053638129058634, 0.30022617778472527, 0.17363210237186866, 0.18042144187750075, 0.19421161663063502, 0.12439288561257511, 0.16878354955209995, 0.17636775753275602, 0.20491217416087992, 0.18862850183534774, 0.17530291600360293, 0.18810674787645165, 0.16862351920565632, 0.18683568409856555, 0.2135749380374129, 0.17574032581570842, 0.17440729443973502, 0.1912426216697577, 0.20568880668582523, 0.05747723358498247, 0.061228850931376866, 0.07312535376890406, 0.06390216975118768, 0.06652080282447681, 0.06352237363518654, 0.07699509082520994, 0.06445355125398222, 0.0729644828914674]}, "mutation_prompt": null}
{"id": "b84604f2-2392-4197-a0a2-6f59fb2ec0f3", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Self-adaptive mutation strategy\n                mutation_factor_dynamic = self.mutation_factor * np.random.uniform(0.9, 1.1)\n                mutation_factor1 = mutation_factor_dynamic * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = mutation_factor_dynamic * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean())\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.1 * (best_individual - population.mean(axis=0))\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Dynamic crossover strategy\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                adaptive_crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate = self.crossover_rate * 0.98 + adaptive_crossover_rate * 0.02\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with self-adaptive mutation strategy and dynamic crossover rate for accelerated convergence.", "configspace": "", "generation": 56, "fitness": 0.1552590692023596, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.16.", "error": "", "parent_id": "f5ccb7fc-f235-4732-be5d-132f6b2059e4", "metadata": {"aucs": [0.2332955246080518, 0.29022121320465377, 0.2166715838299469, 0.23834910611325122, 0.2211294285252423, 0.3024084597233775, 0.23460740930333646, 0.22543333375224406, 0.23092393529575672, 0.020830443652406383, 0.02780192021127792, 0.01948969484427976, 0.040640952851025536, 0.020040550218163644, 0.052804296205526624, 0.014461259464893517, 0.0443447554200902, 0.050441385449632836, 0.08845217886924528, 0.08055284015444863, 0.06333635118383407, 0.0773245912950582, 0.07656132437405372, 0.07772241920390277, 0.0939431703201391, 0.08277520899051394, 0.10055229314593594, 0.048304052406198394, 0.044605128651894255, 0.05471216924631628, 0.07919248787209288, 0.08339040838814293, 0.06944439879389541, 0.09040650394778349, 0.06644361817738376, 0.06415285704006168, 0.8684198488017031, 0.8514640250480255, 0.8989629614890613, 0.7416137623531682, 0.904074475715098, 0.90059533173776, 0.8077905439021891, 0.7093089556721939, 0.784645384407217, 0.13891452150161498, 0.14200735079084847, 0.14681693055242284, 0.12473635200074751, 0.13580847403157892, 0.17053170466289502, 0.15992138905886621, 0.1321090346258632, 0.14658508809645376, 0.17672493744635254, 0.23045510640499822, 0.148360071964855, 0.16706945202601398, 0.16458987274032022, 0.21967888033137462, 0.19512741549799395, 0.21122438504981778, 0.22607169170006702, 0.07374710961867292, 0.0862922856752888, 0.0920114061443097, 0.06074442764774901, 0.044225363884397684, 0.052146140825406695, 0.07713259741620371, 0.08081710217112936, 0.08487794281935823, 0.071035309749923, 0.12608364713439735, 0.07326357986380228, 0.05464218333155768, 0.06661477353093581, 0.06750146399818135, 0.08214474186977438, 0.0656891634918011, 0.06530908269860569, 0.04442149876055046, 0.00509004841633065, 9.999999999998899e-05, 0.058695339792089185, 0.01968773962219128, 0.040494502071932614, 0.010424558969118647, 0.00825304871849708, 0.03562657212225118, 0.12348322670182066, 0.12826664250278086, 0.16261907830552158, 0.1330562938938249, 0.15432700375560104, 0.11488826386612239, 0.14318744849923182, 0.14093556550426967, 0.12146218877974624, 9.999999999998899e-05, 0.0016473969102905883, 0.057985059824484764, 0.04668515399893747, 0.024782752762170235, 0.026705025435787455, 0.04402541209743127, 0.006649648872482983, 0.036238927354387274, 0.04997273864956209, 0.023813291502535194, 0.06117078033455292, 0.027566100403420224, 0.033156184954944545, 0.03206018766114194, 0.05965261609579209, 0.06951193084820428, 0.027386803011295147, 0.25543116998246307, 0.24697552105974174, 0.2722273340839847, 0.2892551858959094, 0.24433667148220672, 0.27984141673788976, 0.2543742680302845, 0.20265711398869168, 0.23030320366147228, 0.08104266782194303, 0.07538412385817395, 0.07000537383949434, 0.07294880223181066, 0.08173903412357975, 0.09228786826597768, 0.07895527330346452, 0.05086911932143634, 0.07235673742687554, 0.19123273851916434, 0.14727847406889882, 0.12290003285274054, 0.16838505818375127, 0.17157970322112848, 0.1402520748711873, 0.1526100404555818, 0.1591872564366147, 0.14935001098585177, 0.22560114019635924, 0.19088512381722844, 0.1789096015044399, 0.2050691603611252, 0.2039550695095298, 0.1846637043660344, 0.19363152850469068, 0.22242775347651889, 0.1790915613332047, 0.14264614668120612, 0.15368573397818985, 0.1348290083782704, 0.17142322228430362, 0.1435435390913713, 0.13601336100494898, 0.1602823522014143, 0.16247106147763335, 0.13450764073045196, 0.15600287280734504, 0.15899432243526157, 0.16829645744582722, 0.17602119195286414, 0.15840471822061153, 0.16462730335033504, 0.15499131764757634, 0.15678772861245216, 0.17643520939390478, 0.16461614754387643, 0.17361510863077778, 0.16158340780775748, 0.18261088954854032, 0.17104336562350908, 0.17262507583563236, 0.16467552342309988, 0.16716273853703656, 0.1818377456318776, 0.1514982269875601, 0.16679477618376493, 0.20949288592890125, 0.16530630422689996, 0.14490606334209755, 0.14813512616008107, 0.14804459245877644, 0.21459443268655853, 0.20413927872299886, 0.13973969685415577, 0.1448831232985076, 0.13766699411501626, 0.17586896092465576, 0.1497566250983947, 0.1673681558774004, 0.1684454473437803, 0.17866312467689327, 0.17551160823489842, 0.18235013924277987, 0.19350424157395651, 0.1847681500934384, 0.18700580199053396, 0.2135749380374129, 0.17627952118796353, 0.19900921245697722, 0.18063791885496372, 0.20568880668582523, 0.059021362571082814, 0.05910986271074781, 0.07416871019029536, 0.05618890821888434, 0.06625573137664709, 0.08434873700298307, 0.07980420465135085, 0.06227299217488147, 0.06563762229772596]}, "mutation_prompt": null}
{"id": "0d8c9497-be22-4ba5-b82e-dd7fdc71cf7c", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean())\n                mutation_factor *= 1.022  # Slight adjustment for improved exploration\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.1 * (best_individual - population.mean(axis=0))\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Improved crossover strategy\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.025  # Fine-tune crossover rate dynamically\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with adaptive scaling based on fitness diversity and improved crossover dynamics for better convergence.", "configspace": "", "generation": 57, "fitness": 0.15905481495953744, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.16.", "error": "", "parent_id": "f5ccb7fc-f235-4732-be5d-132f6b2059e4", "metadata": {"aucs": [0.26311204634346874, 0.24625061808530668, 0.2388027934427811, 0.24156628159098736, 0.23930396425346867, 0.25845987817564153, 0.2614069900730679, 0.2401933954865212, 0.3596042180787056, 0.04595791414927586, 0.0545240047031923, 0.08449751446320553, 0.048863859480146155, 0.0502308953597882, 0.060584621675067174, 0.03304467036746428, 0.03424618458602402, 0.0812034462547403, 0.06301081836648503, 0.07896197574683406, 0.07418332138613115, 0.08738074898450487, 0.08707323955425073, 0.08825806579385409, 0.0893633072891784, 0.08722622988585549, 0.06888573913080676, 0.06379540173094267, 0.047701417336313945, 0.04960987756026969, 0.06429900956761192, 0.07232205974188288, 0.05359293943751342, 0.0749978525734728, 0.06894603614746142, 0.0598461844749445, 0.9009622943465907, 0.9058091022150344, 0.9049160484613171, 0.8046828920441438, 0.6793220734340251, 0.8950673577503018, 0.8357367675802189, 0.889320057384727, 0.9003899323158896, 0.12108249056305576, 0.12957153939599597, 0.16466963269770551, 0.12199855910379609, 0.15409665452257504, 0.13980532600977547, 0.16092385317543867, 0.12574039682323312, 0.13174079434233266, 0.25033023238846985, 0.20772204908519032, 0.15267968307921342, 0.2131587848771832, 0.2025924992677548, 0.19800527697167225, 0.22007517120635567, 0.2116756005042313, 0.23707210417976132, 0.0720379928898286, 0.04455328283685589, 0.08279607339683648, 0.06706922275121763, 0.05707288871043581, 0.08910105793947898, 0.06856445453372362, 0.09462041535133425, 0.08096512246467535, 0.1276901809657156, 0.07368467562447933, 0.07706146684176562, 0.049614176607692406, 0.06718444935091084, 0.04595486381393654, 0.07384505335748526, 0.059423960309612056, 0.06609949601375742, 0.05041488262999316, 0.06902730643916, 0.03789228289770641, 0.02491740294835454, 0.042451775561937244, 9.999999999998899e-05, 0.021315090693531213, 0.02582401132589618, 0.03381268398521187, 0.10179884894157454, 0.15428134909839608, 0.13026854001166344, 0.10142429963331301, 0.1306113213077259, 0.13126386510477073, 0.1248336930453956, 0.15551405010831654, 0.13001981784274208, 0.09382772060374556, 0.021645183130379553, 9.999999999998899e-05, 0.09455897864642682, 0.12192037426540026, 0.00017688338018762018, 0.04555089510481625, 0.03744633745913872, 9.999999999998899e-05, 0.042031503249098434, 0.024372515784155113, 0.02808402826314227, 0.051028310009094136, 0.0461461117001567, 0.04778082941686412, 0.05164226300342212, 0.035367836350839954, 0.047972063989774494, 0.2652048360010032, 0.2693999028857633, 0.2882766217695113, 0.25474921016099894, 0.20749116726098704, 0.2954767503323569, 0.22525578724538386, 0.24177329908567646, 0.24091158781925948, 0.06136855579268374, 0.07746283847770974, 0.06440799460736923, 0.06996805597437628, 0.06649421418802393, 0.0758038321367287, 0.07641725762047213, 0.08650097375898402, 0.08768469935731937, 0.13709410100555053, 0.15022653963690935, 0.19214389515504093, 0.14309115380788995, 0.1555857730831618, 0.1332154968605357, 0.14963138758589234, 0.1413432015928836, 0.1326771491483052, 0.21566152047405163, 0.20398928400786454, 0.20845764328916672, 0.17413298193664473, 0.17594801313356434, 0.2086433920928512, 0.176268636057189, 0.21815446078892842, 0.1986525211387664, 0.19158811813591647, 0.16632977537436977, 0.17806059394199636, 0.15061216186824544, 0.14575909790211405, 0.16688450254239962, 0.13470695463533355, 0.15748094812152336, 0.12875639545127415, 0.17379350661826598, 0.1538837748454649, 0.15532279524938564, 0.1650621590867115, 0.14375388481053542, 0.1665120711094652, 0.1654560942867811, 0.15663920168237078, 0.17313691769917694, 0.16419114985412075, 0.16925743343303334, 0.16974592509157516, 0.1707588494551623, 0.17687200161239758, 0.17633894214750212, 0.1680522460695666, 0.1861879460210294, 0.17553879577982767, 0.15315164329201814, 0.21194927742970782, 0.16388475778105327, 0.1651145560607542, 0.19459042674379112, 0.1357957687688588, 0.14808802678613442, 0.148983696729441, 0.16091213684175598, 0.1358555654748549, 0.2033458103641287, 0.17864850598185078, 0.15756876541291442, 0.12241225127457422, 0.14227619982833362, 0.19041967995943, 0.17541027406847298, 0.21714307351030815, 0.17285772625451734, 0.19450106767523123, 0.18188041353395157, 0.19263981499521432, 0.2135749380374129, 0.17606808295759402, 0.17873331726788233, 0.19746878030531834, 0.20568880668582523, 0.05796416725853981, 0.06337518538388398, 0.07306052504313698, 0.06352212471735241, 0.06928258830686795, 0.060239484274117405, 0.07664343179285793, 0.07062111205807031, 0.06860448561335475]}, "mutation_prompt": null}
{"id": "7ce95aea-868f-459b-b8d3-e03f4d6be8cd", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean())\n\n                # Introduced probabilistic scaling mechanism\n                scaling_factor = np.random.uniform(0.9, 1.1) * np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)))\n                mutation_factor *= scaling_factor * 1.022  # Slight adjustment for improved exploration\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.1 * (best_individual - population.mean(axis=0))\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.025  # Fine-tune crossover rate dynamically\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introduced a probabilistic scaling mechanism for mutation factors adaptive to current fitness improvements for enhanced exploratory capability.", "configspace": "", "generation": 58, "fitness": 0.16156840722286964, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.12.", "error": "", "parent_id": "0d8c9497-be22-4ba5-b82e-dd7fdc71cf7c", "metadata": {"aucs": [0.3181610214372258, 0.2913307259528152, 0.3022138031102607, 0.28094607502245095, 0.2855893136451175, 0.37287286794629304, 0.26284621140902065, 0.24470311035652503, 0.29666435670675007, 9.999999999998899e-05, 0.02028302646168212, 9.999999999998899e-05, 9.999999999998899e-05, 0.02137615084505451, 0.0262987738033984, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11174163183948227, 0.0933545579881444, 0.09802403658978398, 0.10515975295949298, 0.09694351348147479, 0.09507659402266166, 0.11238351468708774, 0.08985201657381481, 0.09793972836656517, 0.07704245308013646, 0.08568292280988188, 0.08023170828448034, 0.09121848338913974, 0.06847013147352432, 0.0689297429764314, 0.1017294724830543, 0.08209097108681251, 0.10185294127516897, 0.5063775916211872, 0.5962349387338097, 0.530057317149453, 0.5170960389821526, 0.4968682780851271, 0.430562833278215, 0.4711698613173757, 0.7847133044590369, 0.48049144633264185, 0.17467451042335902, 0.18327907112165287, 0.1537667601423265, 0.15771963234263753, 0.16717859049730754, 0.1454875258035252, 0.15367565620324297, 0.14115556962970588, 0.16210293918760765, 0.19613354642043923, 0.22442624607200545, 0.19133667049709735, 0.1968406151101404, 0.2344569308934249, 0.19580580580225515, 0.20434880467545335, 0.20553819755227642, 0.266879269373941, 0.1312690699658109, 0.0855784344128, 0.07508308809325315, 0.09069318056218578, 0.09016954819585155, 0.08430118445042079, 0.07774256052014183, 0.10169271258544865, 0.10193477689490427, 0.07859430736165018, 0.09116942190126187, 0.10034300439800847, 0.0924369046147715, 0.08844755030798446, 0.07175848907543625, 0.0861935667682121, 0.07366037412434456, 0.07340577444881258, 9.999999999998899e-05, 0.053013023764487466, 0.01623062680538845, 9.999999999998899e-05, 0.018786209139620924, 9.999999999998899e-05, 0.00029356995422791243, 0.014477765712596735, 9.999999999998899e-05, 0.12859003121747425, 0.11902310144967831, 0.13450067025847878, 0.14149605117360098, 0.13301177920375562, 0.034607099358411, 0.13094548931538996, 0.14934592001808655, 0.18780518070030372, 9.999999999998899e-05, 0.0062699370519175845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020753010360347823, 0.023039577904844344, 0.008758893446209726, 0.07440474211969283, 0.04332672242543245, 0.08615146593433587, 0.07399837917703045, 0.0924981565212547, 0.12484620170707217, 0.06669727119445235, 0.043030304432047695, 0.04868597191031987, 0.2631033125785335, 0.3565248587716313, 0.32200823948713964, 0.28658774429711964, 0.3046823057851551, 0.31388747451926935, 0.26588533843952866, 0.2652605683901189, 0.2983804590634159, 0.08026517382530751, 0.08186319481542126, 0.09601841051991544, 0.08491038739377232, 0.09540417473141538, 0.09027536663889768, 0.08748855596476501, 0.07707969900469358, 0.09659234667834748, 0.13709410100555053, 0.1524229676428306, 0.1351544265120609, 0.14793664260881745, 0.1593854230879066, 0.18870644046397855, 0.20806710529855377, 0.2050448775256184, 0.20398502309160893, 0.18556486087187718, 0.20300482473971715, 0.2194344090410859, 0.20348357877116618, 0.21076428552815918, 0.2121984098847316, 0.2324783625648592, 0.21415005942892462, 0.18738207829813536, 0.20766200804675528, 0.15476850465879943, 0.18696084997940365, 0.187640570133766, 0.17317280723170458, 0.19987596993854662, 0.16712139044231955, 0.15367542847711124, 0.16040859581807176, 0.18470230141764754, 0.16618739681981498, 0.18409698942942765, 0.1704954670360116, 0.16828226058892382, 0.189533581902389, 0.17474007136879333, 0.16435239601807994, 0.18109491995422922, 0.18241687173986543, 0.16680916050525085, 0.16712807196041124, 0.17138715829353446, 0.1839116245860628, 0.21501297206025438, 0.16328266763002863, 0.2422524404104126, 0.18847085436834832, 0.162287437837636, 0.3074008051933693, 0.17962879858108827, 0.43374619815673965, 0.4147341165000673, 0.3894530568429506, 0.14428223881288105, 0.29954025890235203, 0.20375895488239637, 0.20206847854764698, 0.2691176659841483, 0.3416988191044207, 0.1901734002667287, 0.22149942127922695, 0.18397974872672473, 0.16717961649690738, 0.18459911444727972, 0.36607284079356506, 0.1997508149427999, 0.19457388414009968, 0.17193035441331372, 0.18683568409856555, 0.2135749380374129, 0.1831688267687337, 0.1775836613112649, 0.18577181937604448, 0.20568880668582523, 0.07545868491149654, 0.0685846775707476, 0.07380968068572658, 0.07208656669684621, 0.07314244913849433, 0.06862948593070706, 0.07546512042919562, 0.08139066347607182, 0.08224138937549419]}, "mutation_prompt": null}
{"id": "f770ed0f-dccd-41d6-9273-aa3f81d8c9d9", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                # Adaptive population resizing based on fitness variance\n                if np.var(fitness) > 0.1:\n                    new_size = max(5, int(self.population_size * 0.75))\n                else:\n                    new_size = max(5, int(self.population_size * 0.85))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean())\n\n                scaling_factor = np.random.uniform(0.9, 1.1) * np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)))\n                mutation_factor *= scaling_factor * 1.022\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.1 * (best_individual - population.mean(axis=0))\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.025\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introduced adaptive population resizing based on fitness variance for improved resource allocation.", "configspace": "", "generation": 59, "fitness": 0.16038905157793448, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.12.", "error": "", "parent_id": "7ce95aea-868f-459b-b8d3-e03f4d6be8cd", "metadata": {"aucs": [0.3417464550720082, 0.3130518764640905, 0.2433647222042421, 0.2943177652251371, 0.2877859372916408, 0.34898160619346374, 0.24316270447140986, 0.2554726291525633, 0.2582771280644923, 9.999999999998899e-05, 0.02028302646168212, 9.999999999998899e-05, 9.999999999998899e-05, 0.02137615084505451, 0.0262987738033984, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11174163183948227, 0.0933545579881444, 0.09802403658978398, 0.10515975295949298, 0.09694351348147479, 0.09507659402266166, 0.11238351468708774, 0.08985201657381481, 0.09793972836656517, 0.07704245308013646, 0.08568292280988188, 0.08023170828448034, 0.09121848338913974, 0.06847013147352432, 0.0689297429764314, 0.1017294724830543, 0.08209097108681251, 0.10185294127516897, 0.5063775916211872, 0.5962349387338097, 0.530057317149453, 0.5170960389821526, 0.4968682780851271, 0.430562833278215, 0.4711698613173757, 0.7847133044590369, 0.48049144633264185, 0.17467451042335902, 0.18327907112165287, 0.1537667601423265, 0.15771963234263753, 0.16717859049730754, 0.1454875258035252, 0.15367565620324297, 0.14115556962970588, 0.16210293918760765, 0.19613354642043923, 0.22442624607200545, 0.19133667049709735, 0.1968406151101404, 0.2344569308934249, 0.19580580580225515, 0.20434880467545335, 0.20553819755227642, 0.266879269373941, 0.1312690699658109, 0.0855784344128, 0.07508308809325315, 0.09069318056218578, 0.09016954819585155, 0.08430118445042079, 0.07774256052014183, 0.10169271258544865, 0.10193477689490427, 0.07859430736165018, 0.09116942190126187, 0.10034300439800847, 0.0924369046147715, 0.08844755030798446, 0.07175848907543625, 0.0861935667682121, 0.07366037412434456, 0.07340577444881258, 9.999999999998899e-05, 0.053013023764487466, 0.01623062680538845, 9.999999999998899e-05, 0.018786209139620924, 9.999999999998899e-05, 0.00029356995422791243, 0.014477765712596735, 9.999999999998899e-05, 0.12859003121747425, 0.11902310144967831, 0.13450067025847878, 0.14149605117360098, 0.13301177920375562, 0.034607099358411, 0.13094548931538996, 0.14934592001808655, 0.18780518070030372, 9.999999999998899e-05, 0.0062699370519175845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020753010360347823, 0.023039577904844344, 0.008758893446209726, 0.07440474211969283, 0.04332672242543245, 0.08615146593433587, 0.07399837917703045, 0.0924981565212547, 0.12484620170707217, 0.06669727119445235, 0.043030304432047695, 0.04868597191031987, 0.2789772638883148, 0.2930265948323437, 0.2697095613935252, 0.3020193313820715, 0.3055870924734789, 0.31429320339066147, 0.27240278824697417, 0.287243043131611, 0.2539287994027595, 0.08026517382530751, 0.08186319481542126, 0.09601841051991544, 0.08491038739377232, 0.09540417473141538, 0.09027536663889768, 0.08748855596476501, 0.07707969900469358, 0.09659234667834748, 0.13709410100555053, 0.1524229676428306, 0.1351544265120609, 0.14793664260881745, 0.1593854230879066, 0.18870644046397855, 0.20806710529855377, 0.2050448775256184, 0.20398502309160893, 0.18556486087187718, 0.20300482473971715, 0.2194344090410859, 0.20348357877116618, 0.21076428552815918, 0.2121984098847316, 0.2324783625648592, 0.21415005942892462, 0.18738207829813536, 0.20766200804675528, 0.15476850465879943, 0.18696084997940365, 0.187640570133766, 0.17317280723170458, 0.19987596993854662, 0.16712139044231955, 0.15367542847711124, 0.16040859581807176, 0.18470230141764754, 0.16618739681981498, 0.18409698942942765, 0.1704954670360116, 0.16828226058892382, 0.189533581902389, 0.17474007136879333, 0.16435239601807994, 0.18109491995422922, 0.18241687173986543, 0.16680916050525085, 0.16712807196041124, 0.17138715829353446, 0.1839116245860628, 0.21501297206025438, 0.16328266763002863, 0.2422524404104126, 0.18847085436834832, 0.162287437837636, 0.3074008051933693, 0.17962879858108827, 0.35762976305048444, 0.4147341165000673, 0.37903102643236497, 0.14428223881288105, 0.29954025890235203, 0.20375895488239637, 0.20206847854764698, 0.2691176659841483, 0.3416988191044207, 0.1901734002667287, 0.22149942127922695, 0.18397974872672473, 0.16717961649690738, 0.18469604529570105, 0.36607284079356506, 0.1997508149427999, 0.19457388414009968, 0.17193035441331372, 0.18683568409856555, 0.2135749380374129, 0.1831688267687337, 0.1775836613112649, 0.18577181937604448, 0.20568880668582523, 0.07545868491149654, 0.0685846775707476, 0.07380968068572658, 0.07208656669684621, 0.07314244913849433, 0.06862948593070706, 0.07546512042919562, 0.08139066347607182, 0.08224138937549419]}, "mutation_prompt": null}
{"id": "2987ebc4-eeab-4c2a-89e7-48c21c3e4ed4", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean())\n\n                # Introduced probabilistic scaling mechanism\n                scaling_factor = np.random.uniform(0.9, 1.1) * np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)))\n                mutation_factor *= scaling_factor * 1.022  # Slight adjustment for improved exploration\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.1 * (best_individual - population.mean(axis=0))\n                roughness_factor = 0.05 * (np.min(fitness) / (np.std(fitness) + 1e-30))  # New dynamic scaling based on roughness\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor + roughness_factor\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.025  # Fine-tune crossover rate dynamically\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "This variant enhances diversity by introducing a small dynamic scaling factor for mutation based on the fitness landscape's roughness.", "configspace": "", "generation": 60, "fitness": 0.12478624542439821, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.10.", "error": "", "parent_id": "7ce95aea-868f-459b-b8d3-e03f4d6be8cd", "metadata": {"aucs": [0.2189496071510708, 0.22572512650029442, 0.21807176984483223, 0.18961630327733248, 0.2537278606289014, 0.16707132068569175, 0.23978488663963948, 0.18330748684485754, 0.19930997135768969, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009183267172859666, 0.018728572968110146, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06010039390890087, 0.06687833255732845, 0.052853532764485345, 0.07302547612102772, 0.09330598652101962, 0.07138237704284223, 0.09582603785247279, 0.06073210994005951, 0.06946683519284047, 0.06096869376767644, 0.04712106807510208, 0.04859910676957335, 0.06374026593257365, 0.05783983852252117, 0.06532441854550308, 0.07116870101041328, 0.06089837414559407, 0.07105208122948281, 0.4892643537973892, 0.9001215792945885, 0.5047166464042423, 0.10402638244023477, 0.08670063092790714, 0.0857329711542466, 0.11546692082564403, 0.11750396315002742, 0.15180921589054108, 0.18282967324989985, 0.15759960747848378, 0.15588717067379998, 0.1502830069714648, 0.1604025502574259, 0.13667393233586533, 0.14566774265749005, 0.10668532792990859, 0.13077934175133854, 0.16875683983660694, 0.20341988731809135, 0.18729477195966626, 0.17592468246384485, 0.189303086812888, 0.1885559113779064, 0.2146920709953043, 0.22165186018735183, 0.21090321142283597, 0.07281177275644823, 0.08938579864115859, 0.0891868766264795, 0.06232199342159128, 0.054439706159720824, 0.05984999625740672, 0.0683933238558404, 0.08205068089430168, 0.07344495001673057, 0.07365009777900777, 0.09352977480804714, 0.05094964059365026, 0.0854467487447661, 0.08180007788631827, 0.06407786789676795, 0.06531869606100149, 0.06864077763566712, 0.07785339377573708, 0.01174691096745517, 0.023499528238031586, 0.018734778335044555, 9.999999999998899e-05, 0.03386431606525653, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11051224344888178, 0.1196172937792992, 0.12802246637516745, 0.15491346282487428, 0.11920984474449015, 0.03870778472032521, 0.12503596468994582, 0.13671556130426865, 0.11555563228689503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03943402239918392, 0.03274149995539244, 0.03324528369715807, 0.034391373871475506, 0.03587755647716606, 0.03805080743403977, 0.023136801871556423, 0.02312467036892174, 0.0365934084134617, 0.25179877299716946, 0.23091672493511828, 0.23461944298425852, 0.21311026102874953, 0.2646089674723625, 0.2275859943677343, 0.21877347851576534, 0.22589796477724544, 0.20916452767937577, 0.0684991183767022, 0.061776869242994636, 0.0680647372800477, 0.06809663841430613, 0.0711968197475471, 0.06057449010595861, 0.07163247444138465, 0.07229886572686628, 0.08532089968547574, 0.13709410100555053, 0.14530596553121045, 0.1456679971586602, 0.14938981511853455, 0.13511880823300437, 0.13866166857126427, 0.14963138758589234, 0.14872934179272357, 0.15148710401019738, 0.17444723819338415, 0.18457728028454046, 0.1761136925440292, 0.18028564221424637, 0.17249072395347886, 0.20081719692329514, 0.16289702859672361, 0.17377774300845283, 0.17775753377451475, 0.14499175652613083, 0.12867843427079928, 0.1548363803303764, 0.1400661685314144, 0.14209128732523368, 0.1531164281949925, 0.13639093125898982, 0.13754732346468967, 0.1408481545693434, 0.15302042013351436, 0.14555609648385348, 0.15916739194119145, 0.19842550083316712, 0.15680546028622178, 0.20894140677777195, 0.16952737065229972, 0.165766279186903, 0.16073169434480605, 0.15475339573586355, 0.1760674107730954, 0.16654365271513727, 0.16394899476791835, 0.16391277743539645, 0.1583356065963919, 0.1600928776474444, 0.17571963598640739, 0.17580743273636068, 0.2028257872789243, 0.22306032045991775, 0.1933170795022523, 0.255810587161015, 0.17273170386518, 0.2839704615061335, 0.14968438411119045, 0.16330412022626584, 0.2502564793786701, 0.1255710029688304, 0.1210474905629062, 0.12206946191677615, 0.12371578038321751, 0.12087054495885241, 0.11480825381984827, 0.16712843425457435, 0.18137068700827408, 0.19704684004587114, 0.18864736349299494, 0.19494245770860907, 0.18802738404021546, 0.18785681159037193, 0.2135749380374129, 0.17624016500968775, 0.19086238186230664, 0.179244332060019, 0.20568880668582523, 0.07172651137143726, 0.06227202898159301, 0.08342577455345379, 0.07228578699106569, 0.08384788172267377, 0.06535229601906689, 0.07603717815343902, 0.0700054040092557, 0.0709279755727854]}, "mutation_prompt": null}
{"id": "775072a3-7a16-473f-82c2-2281bdeb321b", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean())\n\n                # Enhanced probabilistic scaling mechanism\n                scaling_factor = np.random.uniform(0.9, 1.1) * np.exp(-0.045 * np.abs(np.min(fitness) - np.mean(fitness)))\n                mutation_factor *= scaling_factor * 1.022  # Slight adjustment for improved exploration\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.1 * (best_individual - population.mean(axis=0))\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.025  # Fine-tune crossover rate dynamically\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced probabilistic scaling with adaptive mutation based on fitness variance and population diversity for improved exploration.", "configspace": "", "generation": 61, "fitness": 0.15814768900729592, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.11.", "error": "", "parent_id": "7ce95aea-868f-459b-b8d3-e03f4d6be8cd", "metadata": {"aucs": [0.2867061898535246, 0.39723924120095633, 0.23470455389765021, 0.3135092654463658, 0.26945464067209657, 0.2639833801648688, 0.2916656670687898, 0.27312222686252896, 0.322539130031538, 9.999999999998899e-05, 0.025963893204195676, 9.999999999998899e-05, 9.999999999998899e-05, 0.024185515718760486, 0.06583532874174491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09288040058504432, 0.1411895492752021, 0.078756649903859, 0.10156105205433164, 0.09809862317814877, 0.10191688431989021, 0.10736366890690097, 0.10428565550863511, 0.10171735652788194, 0.07727252830180298, 0.09149770323863449, 0.08704472545384356, 0.08537977509881745, 0.07460183305944756, 0.07504355865262002, 0.08567469826970142, 0.06722051553453678, 0.0925973936401262, 0.5129170273520698, 0.5763242610905275, 0.515585178305515, 0.43708027542417727, 0.4834351716252646, 0.5331431970681079, 0.4845560003926076, 0.5231887788016059, 0.4722411104707134, 0.1913809857154889, 0.17047205728899317, 0.1612611155520881, 0.15762291038994714, 0.1624873764994893, 0.14210970541804324, 0.16392392338373052, 0.13315654395865295, 0.16224435129571357, 0.2281448308980485, 0.2530918756016104, 0.23014631482587555, 0.1976254574818267, 0.2393239965523869, 0.19654999175741228, 0.2229713440597837, 0.20391623879507648, 0.2654014526150822, 0.11235329759321122, 0.08455078827135143, 0.07532321538189357, 0.08993785860559167, 0.08464622960791535, 0.08854830551323789, 0.08084173209679524, 0.10504336906511402, 0.09223454215815541, 0.07597089064253726, 0.08631346528386097, 0.10057160603934678, 0.09747054955562084, 0.08984277468108448, 0.07165692537835278, 0.08871766359321154, 0.07445086636557807, 0.07278769492847537, 9.999999999998899e-05, 0.046129910611691916, 0.017176013005664625, 9.999999999998899e-05, 0.0188650510629208, 9.999999999998899e-05, 0.0002625443035507713, 0.014527783221575219, 9.999999999998899e-05, 0.12509340714889405, 0.11590227895030036, 0.13389641844856992, 0.13307682306689406, 0.13348443487109196, 0.035098863036375216, 0.1381158993557825, 0.144419368249322, 0.17778903757664355, 9.999999999998899e-05, 0.006241835573715271, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021877682971916834, 0.05387731840785559, 0.010332361734099682, 0.0704594290660665, 0.04599452862897979, 0.08079466601691998, 0.05792129217529096, 0.062167554174483164, 0.044289529842122644, 0.06211547208839707, 0.04873163235606659, 0.06614707887657878, 0.2821606972379844, 0.2886195038283138, 0.3125614142396449, 0.28079770158427253, 0.31081120358659675, 0.3042552047205075, 0.30184610879192875, 0.26084099600265076, 0.2473488532957585, 0.08060997030938455, 0.0876676335787897, 0.08354581864713617, 0.08927337398983815, 0.09027085162919157, 0.07235210382689561, 0.08289329189200967, 0.07326599689883495, 0.09181037668705361, 0.16539591736876535, 0.14248389494780545, 0.13654310458338337, 0.15318738668063836, 0.156721851915807, 0.1422549146681822, 0.15694205302547493, 0.1372767655908823, 0.14555180012048674, 0.19493657119966057, 0.21483622246517875, 0.1952364073379489, 0.2094731494982105, 0.23942497295596998, 0.20162509960278707, 0.23904269984630588, 0.20493719613344485, 0.17556814883506833, 0.2156448209942371, 0.17831679847133786, 0.2244480519374723, 0.18199081515490456, 0.19471785025601485, 0.1685668256576197, 0.16429910111318513, 0.16281496665826467, 0.16754471960583883, 0.17221449693668944, 0.18771521448342943, 0.18480152910014402, 0.18525346669192422, 0.18299997527429301, 0.2271806062801387, 0.1864706597174164, 0.16841315267451684, 0.18140890340167903, 0.16884417350624592, 0.17117119928980395, 0.17069063657294514, 0.16798004109023024, 0.17318279604536513, 0.18599991844427843, 0.20153883276331153, 0.16785152644933188, 0.1802798697121354, 0.16509415276469208, 0.3219149912165886, 0.1840270208532947, 0.3995941080249744, 0.17000295071838978, 0.3098267612315362, 0.4145293903434455, 0.34963096190021303, 0.1709640440354473, 0.19092432370047974, 0.2065604650369428, 0.20680428402124484, 0.2896826896935427, 0.18025380760881182, 0.2101979422529212, 0.1661759743123603, 0.186210323991573, 0.29187777840007023, 0.18037119399175738, 0.18650171304246577, 0.17949847143081465, 0.18683568409856555, 0.2135749380374129, 0.1911027126146012, 0.19293066820993465, 0.18002271018037175, 0.20568902929795718, 0.07047192527481583, 0.07061151692446743, 0.0749686667870475, 0.06902391850806255, 0.0738688401518548, 0.0757051916076914, 0.07706002393328615, 0.07914549336543097, 0.07267288563192265]}, "mutation_prompt": null}
{"id": "7915c451-a408-43dc-ae0b-68d078f9bc06", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean())\n\n                # Introduced probabilistic scaling mechanism\n                scaling_factor = np.random.uniform(0.9, 1.1) * np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)))\n                mutation_factor *= scaling_factor * 1.022  # Slight adjustment for improved exploration\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.12 * (best_individual - population.mean(axis=0)) # Adjusted factor for diversity preservation\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.025  # Fine-tune crossover rate dynamically\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced diversity preservation through adaptive elite-guided scaling to accelerate convergence.", "configspace": "", "generation": 62, "fitness": 0.16069950772166083, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.12.", "error": "", "parent_id": "7ce95aea-868f-459b-b8d3-e03f4d6be8cd", "metadata": {"aucs": [0.29362787621881337, 0.33625414472082715, 0.27210108639808583, 0.3068027736827921, 0.26370354910596827, 0.302048806512325, 0.26793162822254324, 0.2772009204592766, 0.27362618373661884, 9.999999999998899e-05, 0.04024098411582322, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030510385319084676, 0.022771887330544804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09981873820492271, 0.09529428472658896, 0.08797661302463589, 0.16647836623666867, 0.101652273197256, 0.10843667952518132, 0.11271486597054758, 0.08553977424997705, 0.09126552912418251, 0.07760886444794124, 0.07396489958379748, 0.08129953675730972, 0.07960489633153611, 0.07934473626674499, 0.0823251522006272, 0.08117446256496463, 0.07100861963296012, 0.07581378001818506, 0.5428830797922368, 0.6640521084116121, 0.5525295672595143, 0.5185420848202754, 0.5490292569602031, 0.49008326960647797, 0.4948041155768331, 0.5081571285431952, 0.532595810236559, 0.1813188690249754, 0.15963592418110584, 0.15270480857237412, 0.17034273417355017, 0.17397571761341402, 0.17875115771287242, 0.16983130277694036, 0.13150099422798778, 0.15964491995219088, 0.2109897321548344, 0.25062381308657333, 0.19940256035637494, 0.22262736118537818, 0.21338634375998822, 0.2059887397551824, 0.23648468439246417, 0.246389597322608, 0.4180566542256222, 0.1170659160820422, 0.09260637385192128, 0.06953299140557878, 0.09076638822968996, 0.07989890915938869, 0.09183679627636354, 0.08421011704050674, 0.07690455740737656, 0.08182606275447901, 0.08137255140214217, 0.10954774027807601, 0.09622181922154871, 0.08619810112232096, 0.09377721664744565, 0.07040039818242616, 0.08448488982177549, 0.07215034804114151, 0.07476571973527157, 0.0057338368426373965, 9.999999999998899e-05, 0.08871838674214738, 0.01182477142209315, 9.999999999998899e-05, 9.999999999998899e-05, 0.002382186712276413, 9.999999999998899e-05, 0.0015547623139522404, 0.09581054769719577, 0.10970442159608007, 0.12816403303007085, 0.1444781320682479, 0.12933349506944947, 0.032349912109990164, 0.1566301476718729, 0.1576490556251916, 0.12650177319984046, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012821132488850528, 9.999999999998899e-05, 0.056686538856264845, 0.0603484269028548, 0.12032693010644835, 0.06218309761745222, 0.0740118133579839, 0.07236946708146375, 0.0355462389965604, 0.07053183030495291, 0.047939416148760405, 0.30533013603961223, 0.3266080976221559, 0.2825948011851158, 0.3002335529626159, 0.3213877149818294, 0.3077817492477932, 0.29122301627267067, 0.2994260957016267, 0.2740027382903092, 0.07994682049173862, 0.08128173278931594, 0.08131486140861421, 0.09301148512062196, 0.08324212052680358, 0.0904503443617265, 0.09200610223764216, 0.07125407498335679, 0.08517219636936679, 0.162554623256012, 0.18943757266727645, 0.18323888309834369, 0.1616446394308907, 0.1417290244244408, 0.157359123436713, 0.15966015567014624, 0.17941877924292804, 0.15005281834348516, 0.20572057651689435, 0.24193340944615904, 0.21139430356521316, 0.2223380131294147, 0.22027500949201517, 0.2115505575093597, 0.20735278782614708, 0.24049014005523994, 0.19629337173009775, 0.19875070376801518, 0.1598549008146889, 0.1728129402834364, 0.15813956290333298, 0.19977442851744387, 0.17448257837068792, 0.14593570806332357, 0.18583239797608875, 0.16662911720132945, 0.1825288274421366, 0.16113456166542728, 0.18290042083953473, 0.16647656871644667, 0.1616922208217626, 0.18188286178928215, 0.163352566400363, 0.17523684366618963, 0.22438581685298764, 0.1674948849361514, 0.17521945217532608, 0.17944991014373013, 0.18239836564324097, 0.1758618609147501, 0.1668214343533424, 0.16693697805167118, 0.17850044326986703, 0.1880479403460148, 0.21356412393357127, 0.32328386612870996, 0.1639729440765183, 0.33804524977655603, 0.3773147937833483, 0.4421247340850657, 0.21567336992664543, 0.24924586385455672, 0.16160956109434665, 0.22915041499943045, 0.2241909947083378, 0.20346955486781326, 0.25209443476243965, 0.21431242165990594, 0.1913186077915694, 0.16596276167563917, 0.19231064843517998, 0.29871187568614277, 0.18763093865657432, 0.1955876082165301, 0.18173965426575933, 0.18961568629399728, 0.2135749380374129, 0.17728941597539905, 0.17793186437529607, 0.19117961163886021, 0.20568880668582523, 0.07133982957606189, 0.08385398923371246, 0.07964048438302818, 0.07453704707393805, 0.07627531340100979, 0.07044194384555036, 0.0789588619229602, 0.08154343952647414, 0.07421877000124966]}, "mutation_prompt": null}
{"id": "8bff75c5-1843-4f08-9f7a-ed17becd75f6", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor3 = 0.5 * self.mutation_factor  # New component for better exploration\n                mutation_factor = (mutation_factor1 + mutation_factor2 + mutation_factor3) / 3 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean())\n\n                # Introduced probabilistic scaling mechanism\n                scaling_factor = np.random.uniform(0.9, 1.1) * np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)))\n                mutation_factor *= scaling_factor * 1.022  # Slight adjustment for improved exploration\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.1 * (best_individual - population.mean(axis=0))\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.025  # Fine-tune crossover rate dynamically\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with updated adaptive mutation by incorporating an additional weighted component for improved convergence.", "configspace": "", "generation": 63, "fitness": 0.15870315003913799, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.11.", "error": "", "parent_id": "7ce95aea-868f-459b-b8d3-e03f4d6be8cd", "metadata": {"aucs": [0.2732597980071263, 0.328944366213637, 0.2788169906221303, 0.3053307045410546, 0.28037728735422485, 0.30922463051758264, 0.2800820588692633, 0.3001914728029118, 0.3163758141213794, 9.999999999998899e-05, 0.019876601000788474, 9.999999999998899e-05, 9.999999999998899e-05, 0.02473142325579336, 0.05584896908583736, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08944513475202454, 0.09407191301774676, 0.09099566592038788, 0.08491420820690732, 0.08870243302687608, 0.11786042739271596, 0.1124007706726532, 0.08747971144587008, 0.09568693756818447, 0.08838131426227902, 0.08236388009110618, 0.07900833229162907, 0.07709108096857598, 0.07147136786146624, 0.0749879823382702, 0.0801883369194607, 0.06942068564157233, 0.07791876079292492, 0.48892159015119574, 0.5730176693918831, 0.4978472074537874, 0.5126173634669796, 0.4776370152846957, 0.4233741183588201, 0.4437896594187877, 0.43399422878356486, 0.5131482031906913, 0.20197155584675464, 0.15945903661336802, 0.20107439441456698, 0.15034332591992172, 0.17046731654531944, 0.14368014108702354, 0.19008879341296947, 0.14980719809410092, 0.1762007065731659, 0.21915086072498924, 0.2658797887796127, 0.2143841176886767, 0.19984914546350274, 0.24283208535094258, 0.20198776574809585, 0.22073476506478673, 0.22980270198732966, 0.258612590137712, 0.10838034774116712, 0.08180782199703296, 0.07555723881690646, 0.08847797419947223, 0.08720901259915026, 0.0894921836002559, 0.07819756303224801, 0.10268901253421858, 0.10538059677900824, 0.07425437750054276, 0.09241565276556918, 0.08876918953498225, 0.09796260679588609, 0.09025888347575073, 0.07171056935127906, 0.0863303048874714, 0.07513164529886907, 0.07322122477122817, 9.999999999998899e-05, 0.05003708495031822, 0.01576846929890019, 9.999999999998899e-05, 0.019084707656456534, 9.999999999998899e-05, 0.00023919314726117413, 0.014348074184903248, 9.999999999998899e-05, 0.12411338450551379, 0.12591639194469284, 0.1240103319456235, 0.1355709401170223, 0.129924854430584, 0.036562984838812596, 0.1372779277294267, 0.17411839002910834, 0.15605977259960346, 9.999999999998899e-05, 0.0063217174733830594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019690582836273673, 0.01932847929361181, 0.008479356798674953, 0.06177657200292341, 0.04491073664447909, 0.08507038649384335, 0.10370051817367643, 0.06562239992391172, 0.09084158248203023, 0.061073493663893585, 0.04270860129247611, 0.0569479441406151, 0.3039009625197955, 0.3119371577265311, 0.28350198377955893, 0.28679579081457895, 0.2897589396748089, 0.33403795324594354, 0.2726800380013541, 0.2727457801700144, 0.28106036506544074, 0.08130029702740815, 0.08136625834709466, 0.08707168945547816, 0.0887490121218587, 0.08499836485386225, 0.0970471434138821, 0.08939380581256462, 0.07911046474555405, 0.08257693399980492, 0.15856073973860207, 0.15958029568628573, 0.16569901753737326, 0.1821796421197316, 0.15994687083733738, 0.13471842284059543, 0.18769175136984861, 0.14902391089964384, 0.1375055429116233, 0.21373500180620242, 0.22268738789542564, 0.20897696684808165, 0.21167122069652267, 0.22373498844437845, 0.19792531593990104, 0.20013198315112712, 0.2328870764578903, 0.1926710287648984, 0.20503953039736567, 0.17532808048242787, 0.16681932060197324, 0.1673609305398004, 0.17402080998311908, 0.20562049843064456, 0.16123833947683142, 0.17553373879312295, 0.16375652641339566, 0.17913726544869546, 0.1734464921147284, 0.18566452972136926, 0.1901539252055543, 0.16209230413398945, 0.19457234587368544, 0.17936028140034832, 0.18282566998730776, 0.1975060223641738, 0.1627146490735889, 0.17718802914927057, 0.17407484655271388, 0.1813515210326454, 0.16271739540336927, 0.16663600155619407, 0.18164550943552082, 0.1695052493361976, 0.1807912333613907, 0.17370305462350732, 0.2663218458729758, 0.28610306012205733, 0.3688718600715447, 0.199384625749357, 0.37253000542026615, 0.24400552426677935, 0.24562785282163635, 0.18175749894855553, 0.29170631464092023, 0.17313564281914984, 0.26255891350187344, 0.215067188839288, 0.1649457705395151, 0.3277487301276536, 0.16646255223677564, 0.18749449042199418, 0.374564201038719, 0.182111744322216, 0.1928814185803429, 0.18097667603141732, 0.2123216480957173, 0.2135749380374129, 0.177618859171075, 0.19009318831241329, 0.2103812938457279, 0.20568880668582523, 0.07014010363541934, 0.07359469871773328, 0.07854480003171449, 0.069765139055192, 0.07184952144937684, 0.07382879090293759, 0.08040779382649033, 0.07820730221001027, 0.09806991369510176]}, "mutation_prompt": null}
{"id": "9932a25b-c4e2-4224-9163-b8b8e4c58982", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean())\n\n                # Introduced probabilistic scaling mechanism\n                scaling_factor = np.random.uniform(0.9, 1.1) * np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)))\n                mutation_factor *= scaling_factor * 1.022\n\n                # Slight adjustment to enhance exploration and selection\n                mutation_factor *= (0.98 + 0.02 * np.random.rand())\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.1 * (best_individual - population.mean(axis=0))\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.025\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced selection and mutation strategy includes fitness-based scaling for mutation factor and dynamic crossover adjustments to accelerate convergence.", "configspace": "", "generation": 64, "fitness": 0.1560798523168188, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.12.", "error": "", "parent_id": "7ce95aea-868f-459b-b8d3-e03f4d6be8cd", "metadata": {"aucs": [0.30729810682562675, 0.30933716417604795, 0.26544263819197256, 0.30677306180992003, 0.30203821906132566, 0.2742442616819921, 0.3140475560853354, 0.24605782660421305, 0.23422358029077517, 9.999999999998899e-05, 0.032158883759050294, 9.999999999998899e-05, 0.009750680017545865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0897762266594444, 0.10397223936267619, 0.09476942188319915, 0.08917680592720445, 0.09163130134213027, 0.09468037200670787, 0.09212302259373939, 0.09810783502071152, 0.09153146951239355, 0.08509331833764444, 0.08966417567851837, 0.08903540967969514, 0.07670052750467915, 0.07968939105215744, 0.07909848392090701, 0.0789365175980471, 0.08383931440917947, 0.0851087584762279, 0.5864752943662452, 0.4638443139971342, 0.597092728256907, 0.423269797597126, 0.4717356169980016, 0.4298799297746978, 0.7399104780598932, 0.4590994806733565, 0.4745431792234991, 0.1558968021992485, 0.1693049798337255, 0.16405863866281067, 0.14706987438072605, 0.13382302374573085, 0.12900158593044964, 0.18578036404345366, 0.1520070941625531, 0.16814269241772106, 0.19750387248121615, 0.2261801613482176, 0.22492047101729473, 0.2033244967759784, 0.24209792422191623, 0.24047698029936337, 0.24209937936620607, 0.24681844976053513, 0.27661631300754985, 0.08649896980049376, 0.07764304476361417, 0.07936035194106716, 0.10021804798835277, 0.07684585766232699, 0.049920410656496994, 0.07495230781969564, 0.07406596409228694, 0.0959088320092234, 0.0736252645090486, 0.08332917060079803, 0.12799120077394632, 0.07174046450474347, 0.0898393108777964, 0.07734393535888062, 0.06851582287530344, 0.07808840376716131, 0.07152383996559097, 9.999999999998899e-05, 0.016343987416211347, 9.999999999998899e-05, 0.020487603992979886, 9.999999999998899e-05, 9.999999999998899e-05, 0.004758681303503209, 0.005387686927262769, 0.0014579170684335674, 0.1492541294838371, 0.10468059294606169, 0.15208956945464602, 0.17576353323190974, 0.10313215225880157, 0.05349024930629187, 0.1164090361648874, 0.11846902792714487, 0.10118861486614183, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015813726867981548, 9.999999999998899e-05, 0.012128973759251815, 0.06482016131898272, 0.0636393650625503, 0.08009348811368722, 0.07420090983242011, 0.1172183014754733, 0.03789179028515133, 0.07189635956954843, 0.0390039990982306, 0.050923871324663916, 0.29850249912420856, 0.276316663714688, 0.3023901453923198, 0.26060532679631, 0.25564109864374474, 0.2678202031131366, 0.23518300252919822, 0.25302535348704036, 0.29725673054138213, 0.08210329245315151, 0.09525115148782737, 0.07932176291686499, 0.0898067634405465, 0.08729625249402384, 0.0826546593552504, 0.07755687683116064, 0.0927113524871922, 0.09741119629314021, 0.1498991644262716, 0.2175125952626309, 0.14146991413278687, 0.18489455655344067, 0.16241637769257944, 0.1484035258076738, 0.1646234350445257, 0.1592478546000562, 0.14365932745289445, 0.22561816990156602, 0.23131279144741446, 0.2021870459951357, 0.20796225862186535, 0.21804725739794317, 0.2107880365267062, 0.21667277028212584, 0.22913573742131033, 0.17228710518614665, 0.1922953790965679, 0.15553091546467712, 0.16011612219588556, 0.17756447633754835, 0.16190842122418503, 0.17480546951527975, 0.16544433176291184, 0.16507194741080888, 0.1833585150768141, 0.18378313789320966, 0.15978587717038084, 0.20330455433059946, 0.1640419876853837, 0.22900310192442186, 0.17037251403466602, 0.18302131642758712, 0.16797633450025606, 0.19553631570441998, 0.18131301658031906, 0.1709116559464473, 0.17089803609656995, 0.17516963993852408, 0.1742442531304006, 0.17345757181997945, 0.1680703678106713, 0.16893157127075997, 0.1824020169680538, 0.22492818782042578, 0.3179429480868947, 0.16171312929138604, 0.3349986734232171, 0.3014847891095097, 0.4872884382916174, 0.19433318150836598, 0.16915360064787277, 0.19191820060167797, 0.20126752752852772, 0.18901796815731253, 0.3140269519489235, 0.17148369866164848, 0.21233747609251552, 0.2797915871869261, 0.1649575881254619, 0.18575108679438357, 0.31320487760169147, 0.18081606747828782, 0.1840951386782479, 0.188248686191809, 0.18752018871406595, 0.2135749380374129, 0.1785628020410881, 0.17492896876515673, 0.1842988423800591, 0.20568880668582523, 0.07155547274921559, 0.06914661510547127, 0.08247273890404527, 0.07665417549205378, 0.07384169390984685, 0.0697354694533775, 0.07954339112671183, 0.07598194572269346, 0.07063572485404745]}, "mutation_prompt": null}
{"id": "d981c44c-2565-4880-815b-99d7dda8044a", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean())\n\n                # Introduced adaptive learning rate for mutation factor\n                learning_rate = 0.01 + 0.1 * (np.abs(np.min(fitness) - np.max(fitness)) / (np.mean(fitness) + 1e-30))\n                mutation_factor *= learning_rate\n\n                scaling_factor = np.random.uniform(0.9, 1.1) * np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)))\n                mutation_factor *= scaling_factor * 1.022\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.1 * (best_individual - population.mean(axis=0))\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.025\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                # Noise reduction in fitness calculation\n                trial_fitness = np.mean([func(trial_vector) for _ in range(2)])\n                eval_count += 2\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "AdaptiveDifferentialEvolution", "description": "Introduced adaptive learning rate for mutation factor to enhance global search and incorporated noise reduction in fitness calculation.", "configspace": "", "generation": 65, "fitness": 0.11139272825502447, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "7ce95aea-868f-459b-b8d3-e03f4d6be8cd", "metadata": {"aucs": [0.19438300177240986, 0.22688252604444548, 0.19482196378967542, 0.20656194262533034, 0.20492853568662173, 0.1981328924806326, 0.20799088162454693, 0.20356860688569411, 0.25494281534310226, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014464528764479567, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05599451642851605, 0.059030526615435175, 0.0662152125586164, 0.061724449344462085, 0.0647766676348962, 0.06613439154157863, 0.08925883764229914, 0.057042420421380635, 0.06582602709446206, 0.05003354530674642, 0.06228023215585632, 0.050312489652506565, 0.04974084417413538, 0.04719025537566013, 0.050394391049121245, 0.05154029184438336, 0.04768538549387391, 0.05535254882883889, 0.2168167975536911, 0.27161431167365824, 0.19248658416232334, 0.3059503845807541, 0.15137652973771687, 0.11710113495115348, 0.2415926043699249, 0.13057814236094523, 0.5339906895969645, 0.12028937518118055, 0.11645413789682857, 0.1235853450590636, 0.09465797766936734, 0.09340263503182211, 0.10019430221006387, 0.10545970776952596, 0.10575580993856659, 0.11023054925049214, 0.16479560632586832, 0.20449958398017398, 0.1606048763457476, 0.14812595373007242, 0.1733267284334331, 0.16032730918873095, 0.15444476670197327, 0.15896036619815734, 0.17955875115056152, 0.036617735049200184, 0.024198209529796122, 0.033696421985735636, 0.03526069071275939, 0.02180638772546062, 0.027145556488770817, 0.031005573653144936, 0.022617278797859908, 0.02669864287430812, 0.022687203859086402, 0.027783832903228167, 0.01796811359499484, 0.029186732403718607, 0.0393568868882227, 0.030447266866021727, 0.03514241552777275, 0.04043161524879946, 0.042849693674357314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00027732794048385134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09759205502041335, 0.0917659823547683, 0.09341988006277768, 0.08848707873943984, 0.0759677346548131, 0.025133931237775853, 0.07956598918950075, 0.09647877769706359, 0.10007574508268313, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012208609226725842, 0.007410923013806525, 0.019660856113968617, 0.010224619753226971, 0.014376492234980498, 0.016960256595970558, 0.007797546849197756, 0.004361147653910491, 0.002179952484217984, 0.2133416819413988, 0.21642040276238894, 0.20912044302668775, 0.2417153332514529, 0.22741973545414895, 0.21938607416257727, 0.23372549480113292, 0.22644760984529266, 0.22971340308889765, 0.053852041526358696, 0.05292093735331005, 0.06396833890226428, 0.07302806550458885, 0.0638457776089455, 0.07018577259633008, 0.06265238450585442, 0.055266989865144556, 0.06250074387754068, 0.13736753391384915, 0.12025904469586424, 0.13903811754092565, 0.13766266535167793, 0.13642971601256249, 0.1327710723158776, 0.14963138758589234, 0.15243171233955966, 0.13983183293854928, 0.16297160580018188, 0.1804594044810781, 0.18317990136130524, 0.17985937343864133, 0.18461601084548152, 0.1768850531767181, 0.1764169209290508, 0.18390202459728922, 0.17224509372013053, 0.1287233262568489, 0.1158051444660454, 0.1368801068822797, 0.11814018348599753, 0.129034796532441, 0.13199040014600594, 0.11639702960218878, 0.12691100788146736, 0.1171377141836627, 0.19752158240398732, 0.1619559220033009, 0.16470313676294568, 0.17186359268126505, 0.17650654800476384, 0.18203877244443734, 0.1547230585020668, 0.16511140746310105, 0.17507864022569997, 0.14788019847349787, 0.15782937602820124, 0.1540544056371802, 0.16016088272375806, 0.15883567771479334, 0.15463131123597962, 0.15337673909456573, 0.16519175862080338, 0.1659451590960762, 0.16940978026161935, 0.20843033117488496, 0.17413861895056892, 0.1591563683817172, 0.1595100003672777, 0.160796771275323, 0.18246186760960859, 0.1926994858418588, 0.15692009224327252, 0.17696010146638275, 0.16076023054984667, 0.20350895929245938, 0.16701662123340788, 0.19773514889940358, 0.22874393579773988, 0.16572446814595077, 0.21576694825770315, 0.21740223231915323, 0.17263325785947614, 0.18819149099031918, 0.17140115772391695, 0.200541403057508, 0.2135749380374129, 0.17788081338343908, 0.17983170322248987, 0.17743883405769612, 0.20568880668582523, 0.059689645434575556, 0.06478921553680916, 0.07905043842750292, 0.05913572245315479, 0.06930217122243632, 0.05976172356212939, 0.07610360666198435, 0.06487172766416915, 0.06348613592335062]}, "mutation_prompt": null}
{"id": "368c4ffe-3d13-4ed5-8d36-5af021298387", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # New adaptive mutation factor\n                diversity = np.std(population)\n                mutation_factor = self.mutation_factor * (1 + 0.1 * diversity / (np.mean(population) + 1e-30)) * np.exp(-0.05 * eval_count / self.budget)\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.1 * (best_individual - population.mean(axis=0))\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # New adaptive crossover rate\n                fitness_variance = np.var(fitness)\n                self.crossover_rate = 0.7 + diversity * 0.3 / (fitness_variance + 1e-30)\n                self.crossover_rate *= 1.015\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introduced adaptive mutation and crossover rates based on population diversity and fitness variance for improved convergence speed.", "configspace": "", "generation": 66, "fitness": 0.12988910357230646, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.16.", "error": "", "parent_id": "7ce95aea-868f-459b-b8d3-e03f4d6be8cd", "metadata": {"aucs": [0.2515791084839545, 0.24216950282555094, 0.2284769227645993, 0.21379788481861117, 0.2426159788527803, 0.23756758185463445, 0.22931155233267186, 0.1982217863842194, 0.21667610978360285, 0.04848742430733022, 9.999999999998899e-05, 0.04855500568428628, 0.0591116226642292, 0.014088086313705728, 0.022505047427801017, 0.0007743121008252363, 0.005784550443150294, 0.030791809085620847, 0.05947436635994363, 0.055374431351421505, 0.05517091274974095, 0.05979621054965101, 0.06663920757184583, 0.053548060636961825, 0.12106080722532042, 0.07325778003047967, 0.08769215384412743, 0.05755263934977961, 0.0496896941490631, 0.05343886216245641, 0.0655364330227749, 0.044771669645594425, 0.04273592285024019, 0.04135128433973534, 0.03634338253826008, 0.031027645495382283, 0.8965176634924121, 0.899902513349574, 0.9049160484613171, 0.8008397107025061, 0.9004385609934401, 0.7648557935762869, 0.5907658555636859, 0.8913349722880656, 0.5932653421173752, 0.09397908819497136, 0.09316459125973908, 0.10171882691615464, 0.0968616843972786, 0.09097118363483603, 0.0746494814023172, 0.09840874155057988, 0.058191098337822766, 0.11188903836551167, 0.13190371178368754, 0.19308637766117165, 0.1481850439168273, 0.11588540277051929, 0.12461300612749837, 0.11127059929839234, 0.10903698336054424, 0.1300331689300701, 0.1463787873115654, 0.04314169642584531, 0.04904526748887306, 0.051640961673732666, 0.05227240602750405, 0.05381994727078876, 0.04640095357995855, 0.058790219261182775, 0.04243399520480928, 0.05152670350538624, 0.0375269254966899, 0.015135208725055471, 0.006404388838965658, 0.00437826200371727, 0.035362057023575866, 9.999999999998899e-05, 0.02453379563502167, 9.999999999998899e-05, 0.004725477542264489, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005385484194237122, 9.999999999998899e-05, 9.999999999998899e-05, 0.004619991587157868, 0.07082533510378142, 0.07584165060338, 0.06413132327394122, 0.050999058398695896, 0.058403181339258814, 0.020889967176055513, 0.017492923264538884, 0.04869165216565785, 0.027924715795323074, 0.013559434828941619, 0.019569417894615637, 9.999999999998899e-05, 9.999999999998899e-05, 0.0229614366197749, 0.009856605602971968, 0.052655056050597726, 0.04980483940501468, 9.999999999998899e-05, 0.025248421635805762, 0.02412003396144824, 0.026520087422281402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03652825964356943, 0.028592040659909834, 0.044624918641561595, 0.2735343062279131, 0.23790164679648462, 0.23425987940952564, 0.2055799784281095, 0.19296243812353553, 0.19321684037037712, 0.24274780987164946, 0.22726420143630832, 0.2614690128135456, 0.06533071254034561, 0.056809255234999134, 0.052929923831263825, 0.06367293560777432, 0.0679939169976096, 0.062471246766717003, 0.06134021111394017, 0.06356173701565715, 0.07128720416959655, 0.16179662398371253, 0.13810558726402888, 0.18529700947653527, 0.13766266535167793, 0.1652664381432405, 0.13775639303238674, 0.14963138758589234, 0.1329441938166337, 0.18536266843756655, 0.1602710620254989, 0.15146388814400202, 0.16889775564127363, 0.14097882835597852, 0.16171850956268186, 0.161856142914947, 0.16978375170799298, 0.18205127663276943, 0.15644813041563177, 0.10716889766213866, 0.10783668089661913, 0.11109491287868445, 0.11836344990811054, 0.12092313537362531, 0.09793549997287943, 0.11482585435556358, 0.13131319303927813, 0.12404830176383363, 0.14165973173013569, 0.14564086562415524, 0.14834377181209824, 0.14040474191590024, 0.13196739598829066, 0.14941079401652335, 0.13568553860806476, 0.1509611662380077, 0.177446664031099, 0.1402192576567577, 0.14914006661443002, 0.1459613363082759, 0.15393132079215444, 0.1546703116950423, 0.1583902574858015, 0.1354136536344115, 0.14044185780824914, 0.16271335671817544, 0.1257182399297755, 0.16679477618376493, 0.16190973923798246, 0.16968288723927183, 0.13449836740539012, 0.15309785306960566, 0.13234614372447484, 0.12778644055451982, 0.15890663657239457, 0.1509295912242694, 0.1336595795265697, 0.14489694300968292, 0.11866338853352043, 0.10828756773062687, 0.12197874678714493, 0.16961547527212462, 0.18332951209332404, 0.16431344344646426, 0.1740435135199776, 0.18546058016696565, 0.19928943707507485, 0.18683568409856555, 0.2135749380374129, 0.17787372781481814, 0.17875629516029223, 0.18839575374164108, 0.20568880668582523, 0.044893166641899906, 0.05470589104608148, 0.06585155299632517, 0.0496458412526628, 0.058815507864153016, 0.06704160736567011, 0.08016084169734528, 0.061761608272090096, 0.06327557612798651]}, "mutation_prompt": null}
{"id": "8cbea406-f2c7-4f78-94c7-0c7b0ca5bc36", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        best_fitness = np.min(fitness)\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Adaptive mutation based on individual fitness improvement\n                mutation_factor_dynamic = self.mutation_factor * (1 + 0.1 * ((best_fitness - fitness[i]) / (np.abs(best_fitness) + 1e-30)))\n\n                mutation_factor1 = mutation_factor_dynamic * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = mutation_factor_dynamic * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean())\n\n                scaling_factor = np.random.uniform(0.9, 1.1) * np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)))\n                mutation_factor *= scaling_factor * 1.022\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.1 * (best_individual - population.mean(axis=0))\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.025\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    best_fitness = min(best_fitness, trial_fitness)\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "EnhancedDifferentialEvolution with adaptive mutation based on individual fitness improvements for faster convergence.", "configspace": "", "generation": 67, "fitness": 0.1586572684149419, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.12.", "error": "", "parent_id": "7ce95aea-868f-459b-b8d3-e03f4d6be8cd", "metadata": {"aucs": [0.3008580244330258, 0.2775910111064841, 0.29924545541519887, 0.28785123034560456, 0.24811484283827256, 0.4015835135426712, 0.2663020814344228, 0.3236329538691395, 0.2810573486861826, 9.999999999998899e-05, 0.02027988836753869, 9.999999999998899e-05, 9.999999999998899e-05, 0.027170606054424784, 0.042365029592911, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10772866604648568, 0.09327839411579775, 0.09021925830107125, 0.0912479911937435, 0.09170812952114826, 0.10614861319782865, 0.11639307387401099, 0.09267814578544764, 0.09395266971918359, 0.09035313413314927, 0.08859520326752468, 0.08992680595838343, 0.08000657765789643, 0.08095858960595703, 0.07456525082894838, 0.08262983960558434, 0.07927632460874867, 0.09753232427533254, 0.5299975310913809, 0.6228867073617302, 0.8462013882035165, 0.516828374011037, 0.4884171674425134, 0.4418393108683848, 0.4451729697074207, 0.5039675204938592, 0.5188027522840974, 0.18132471802508998, 0.1784785884632032, 0.1586574137218213, 0.13930767998743943, 0.17919976316588615, 0.1710495492333255, 0.16190198265450417, 0.15286483135336748, 0.152709373729924, 0.20914363913460843, 0.2526083454334662, 0.2031508406380278, 0.20356221928863683, 0.2124763518061623, 0.22174680644566347, 0.22751026848759115, 0.25510870549112974, 0.3999470345218328, 0.16144516803386266, 0.08512986291350155, 0.07557435135920254, 0.09072269721267912, 0.0916198673616826, 0.10316342336974282, 0.08062737136091214, 0.08942274406601047, 0.08523987811662559, 0.07968363977906934, 0.08257761882919545, 0.11591478302398317, 0.09335417984701833, 0.08910907178131966, 0.07168775381196413, 0.08337519908294633, 0.07498554076104669, 0.07329168304591871, 9.999999999998899e-05, 0.04898013131339307, 0.030299878976568162, 9.999999999998899e-05, 0.017693435145533676, 9.999999999998899e-05, 0.00026913809966044866, 0.014504607062645336, 9.999999999998899e-05, 0.11787487304948951, 0.13474429386804354, 0.13278745569573258, 0.13336604383067374, 0.13007239878843446, 0.033939426109572346, 0.13386552314182465, 0.15504978935048608, 0.15863945858512107, 9.999999999998899e-05, 0.006266668251611041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02060901217558253, 0.022425097851572318, 0.008813985163610982, 0.057157689468300465, 0.035800966836142645, 0.07598601715489517, 0.06666225731395681, 0.07620495679560613, 0.05786121501828689, 0.07261659997629355, 0.042730765802281745, 0.057325140900369664, 0.3364934439466908, 0.26805424432623004, 0.2858638078241038, 0.2666699764990029, 0.3032517437600071, 0.3166971074418008, 0.25061276768557184, 0.25884468048653864, 0.26851945132937427, 0.07339450189047636, 0.07494787814480475, 0.09951110133113927, 0.08685865541619897, 0.08647983984196161, 0.07630440059495192, 0.09714772230746382, 0.08682489041074604, 0.09469671914492761, 0.14721777959578464, 0.12716973333454973, 0.1755027576380005, 0.21229858677138036, 0.14240466574147304, 0.13423453948823172, 0.1678728938963988, 0.15486907578605313, 0.13800741029734742, 0.21655791562813442, 0.22425483164513293, 0.20908864743703548, 0.23055982406841635, 0.21201242266917275, 0.21260604984697562, 0.19068854981429917, 0.24400160291120843, 0.1768663244317642, 0.15144234238509602, 0.16871355232011886, 0.18237032590836477, 0.16119507403456934, 0.1860850399300682, 0.19187846177676937, 0.17487075280881603, 0.1782283085639056, 0.16065702772166535, 0.19307552174613596, 0.1797751922719235, 0.16723639479519803, 0.19434971106564503, 0.17111205784113825, 0.1923185638939311, 0.15657655502953316, 0.16789614403844533, 0.19836425568287408, 0.16782395743479628, 0.16386976345810222, 0.16702774061153092, 0.17070658212379952, 0.18360398597244287, 0.20659522684860254, 0.1787337354808265, 0.16392981625371195, 0.1829640319042739, 0.17391308391596316, 0.33532166766982685, 0.2237606637348678, 0.35729011831217383, 0.16467202290194383, 0.18361598033188997, 0.16268975887343606, 0.20458351295646626, 0.16209912558685424, 0.20353171091175892, 0.2083250543675368, 0.24981351470771962, 0.21490209807755423, 0.3049173123891671, 0.1838843024418595, 0.16624703880832548, 0.19426834178463803, 0.3125669740020851, 0.19144596120210688, 0.18847068857887506, 0.18457761821440133, 0.1881366462002657, 0.2135749380374129, 0.17260459279472595, 0.17951715498199539, 0.17767307804941412, 0.20568880668582523, 0.07683729119529348, 0.07367555631374412, 0.07878255745933915, 0.06993790751255624, 0.07126327576236835, 0.07501319106926674, 0.07532529613519179, 0.08408326548001732, 0.07908873498484814]}, "mutation_prompt": null}
{"id": "7386d2fd-fd5e-43a3-9b5a-bd870aa611f7", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            best_two_indices = np.argsort(fitness)[:2]  # Identify the two best individuals\n            best_two = population[best_two_indices]  # Preserve best two individuals\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean())\n\n                scaling_factor = np.random.uniform(0.9, 1.1) * np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)))\n                mutation_factor *= scaling_factor * 1.022\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.1 * (best_individual - population.mean(axis=0))\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.025\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n            # Reintroduce best two individuals to maintain elitism\n            population[:2] = best_two\n            fitness[:2] = [func(best_two[0]), func(best_two[1])]\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Added elitism by preserving two best individuals in each generation to enhance convergence speed and stability.", "configspace": "", "generation": 68, "fitness": 0.15440611784557406, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.11.", "error": "", "parent_id": "7ce95aea-868f-459b-b8d3-e03f4d6be8cd", "metadata": {"aucs": [0.25132291763726256, 0.27864172405390775, 0.24313970174875443, 0.27943806247615244, 0.301803949979807, 0.28121037801197113, 0.2644620245870779, 0.26893060904589383, 0.243677449275714, 9.999999999998899e-05, 0.01650087028846936, 9.999999999998899e-05, 0.00377676616744671, 0.021908284196199945, 0.01499660439690853, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09006027948085793, 0.09312446245874417, 0.0856949176223738, 0.08750222627884907, 0.08518004378384836, 0.10079739305134228, 0.10920115413779752, 0.07677917346289165, 0.09417681564614089, 0.07625998132773004, 0.07676790740809114, 0.08783495464602986, 0.08361682988539365, 0.07920661821976405, 0.0855485767758224, 0.0776873818591357, 0.06951286060150452, 0.09121745239736556, 0.5046214448298805, 0.5874819329920407, 0.5319245546750726, 0.5152622704960438, 0.47328807016414665, 0.44798776526349426, 0.4405507839533733, 0.5639020680371434, 0.5364027689118362, 0.1971368332295549, 0.17614728798188228, 0.15611280825866636, 0.18168966899554562, 0.18400632851687382, 0.13889091591892777, 0.15820966881840015, 0.12931668622098313, 0.16456488095229216, 0.2267409897550028, 0.23508907108599963, 0.1862402024729628, 0.22297991188692945, 0.22603283174546318, 0.20223813204049457, 0.22185710960031102, 0.22219479346683935, 0.2435072123668942, 0.11485488573961211, 0.08338852146272024, 0.08693938803727708, 0.0808512805638385, 0.08263928941904919, 0.08447959763843027, 0.07576764198483177, 0.08542600372227238, 0.1077455969297253, 0.07784195430357, 0.08960319159585506, 0.08244388999840324, 0.09166768393613567, 0.09150861281617695, 0.069965082528476, 0.08691526493650548, 0.08240835954994419, 0.07227986283542776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01641072932920673, 0.001421472207463581, 9.999999999998899e-05, 9.999999999998899e-05, 0.0051640624998697815, 0.12788327420207912, 0.12253459545905043, 0.1434190460513437, 0.15426476823436241, 0.14505831860445673, 0.06280030613641752, 0.1165002457119324, 0.14905770619575287, 0.17116498634932764, 9.999999999998899e-05, 0.00260765707884969, 9.999999999998899e-05, 9.999999999998899e-05, 0.002316152549819206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0063133448847971785, 0.059356078750448016, 0.03431562203944105, 0.05927187393366129, 0.06147122897283952, 0.07547593377310235, 0.055756035395759684, 0.046576096887374074, 0.04194325282467448, 0.056946905399061665, 0.27188996539768995, 0.2731312147497794, 0.30261543343746455, 0.27054372584895314, 0.26164664504886537, 0.2754252413298053, 0.26266953072225485, 0.26413421802145787, 0.2824017961109221, 0.07457363981844267, 0.0944609181463062, 0.08768284866937681, 0.09070085740916034, 0.07870387712406846, 0.08166327337849566, 0.11182775848230508, 0.08182258176541979, 0.10450038154816266, 0.15311233353142994, 0.14710348060105194, 0.13067777977384487, 0.13766266535167793, 0.14999505618346443, 0.2012054200893535, 0.15166436262087934, 0.14622922918503645, 0.1543712738667442, 0.19322858890338734, 0.18379079230112916, 0.19361179750765878, 0.18784886752634022, 0.20454016192490376, 0.22590050183574029, 0.1931986829820187, 0.21131591641585978, 0.16918732868813768, 0.17184967941596774, 0.1706835897530271, 0.16879898587924258, 0.1587485894808186, 0.1495450792122105, 0.1538817673701064, 0.15255893705006696, 0.1426341876815026, 0.15964986354828448, 0.1848303851755131, 0.18440984001299032, 0.17127762456656548, 0.180293178487403, 0.16977151499481347, 0.17911432284460194, 0.18779632355095177, 0.15864647870807325, 0.1904578228761199, 0.16262076101356016, 0.17591602230284276, 0.16770550206723023, 0.17229331544014803, 0.17000051917862657, 0.16721745590636605, 0.16331439032427697, 0.16890097749889832, 0.1773160159735322, 0.16572043406745374, 0.3582525132658845, 0.23563130041208846, 0.33361266059913974, 0.4126401194800957, 0.34849297947594116, 0.1622648788122628, 0.2792320070989396, 0.18709552622774062, 0.2589339517959893, 0.20831702975212296, 0.26409514328994854, 0.29259603698815895, 0.21645678107650335, 0.1915783926593021, 0.1672719801755822, 0.18831942584037797, 0.3527657907628785, 0.19995558990280937, 0.19292122880891183, 0.17733073523727017, 0.18683568409856555, 0.2135749380374129, 0.18612578283447, 0.17612047675054532, 0.19515629191812356, 0.20568880668582523, 0.0715019122642605, 0.06815220477075035, 0.07058394067494644, 0.07044119748995581, 0.06903626055635304, 0.06700500718422664, 0.08533903156704437, 0.07749547203120277, 0.08909750042394282]}, "mutation_prompt": null}
{"id": "20dafa40-6c4b-4680-a70e-65c34c0b8f1d", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean())\n\n                # Introduced probabilistic scaling mechanism\n                scaling_factor = np.random.uniform(0.9, 1.1) * np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)))\n                mutation_factor *= scaling_factor * 1.022  # Slight adjustment for improved exploration\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.1 * (best_individual - population.mean(axis=0))\n                # Enhanced elitist amplification\n                elite_amplification = 0.2 * (best_individual - a)\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor + elite_amplification\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.025  # Fine-tune crossover rate dynamically\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introduced adaptive mutation with elitist amplification to enhance convergence speed by strengthening the influence of the best individuals. ", "configspace": "", "generation": 69, "fitness": 0.18413728759735798, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.13.", "error": "", "parent_id": "7ce95aea-868f-459b-b8d3-e03f4d6be8cd", "metadata": {"aucs": [0.3106035444482871, 0.3353663918960368, 0.4023793079784056, 0.32727603722753806, 0.3192780901810487, 0.3333263537188229, 0.3504135810786936, 0.3101742400695029, 0.3350191574453777, 9.999999999998899e-05, 0.00746903792528919, 0.010849987965963925, 9.999999999998899e-05, 0.0006690439747830679, 0.023080554559832822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1142868202866959, 0.11210058277494939, 0.09710456331961281, 0.1063580330810473, 0.1267224036973188, 0.10255781905071415, 0.07657907456787894, 0.10259057014700956, 0.11410421122435543, 0.11694814453013969, 0.0754220732311387, 0.0961878198795354, 0.09976529073178775, 0.10118155340434909, 0.08547573858017354, 0.11290770402359163, 0.10029175187896233, 0.08022703198947023, 0.5567589827269643, 0.6948406352005292, 0.7890966725952353, 0.5666502206581492, 0.5556528680189928, 0.5428575081589126, 0.5135774801069304, 0.5029363969718781, 0.8027391219539557, 0.25386343940933775, 0.23874147481893426, 0.21791789346781942, 0.23125513742388903, 0.23149015899345315, 0.26771120465839215, 0.27664756507147104, 0.23557300876005094, 0.2306703076456842, 0.2943586091790197, 0.27166248574502405, 0.25760553038243017, 0.22088231568745487, 0.2750395827315264, 0.2801249682457876, 0.24960167036393088, 0.2718482444863132, 0.4195671112067302, 0.16423197095597475, 0.11152831550880926, 0.10464703614042481, 0.11767005241856876, 0.2236884860185151, 0.07592929985662555, 0.13426779848528148, 0.14126569845403014, 0.1027918107421667, 0.10148291865067716, 0.18609609394820004, 0.21053553872701103, 0.11832813816793109, 0.1271462618510093, 0.14427423166006992, 0.13059218320393318, 0.11199141233747556, 0.10612572176612067, 9.999999999998899e-05, 0.007148065146570293, 9.999999999998899e-05, 0.0074956261057285145, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013232807948966752, 0.014838575081107752, 0.10765099247468501, 0.12162211544102086, 0.14717735203097404, 0.09219997428907367, 0.18582302891350233, 0.041492441806669, 0.22302176318564393, 0.2064435691545563, 0.1751502908588729, 0.12748404080411124, 0.03890336880972867, 0.023072807289869934, 0.04203810228481619, 0.0555823563442005, 0.09994812433914158, 0.07146296689841292, 0.05876437089046904, 0.09272374324722954, 0.09177503676919874, 0.09141748477559253, 0.06925899844067263, 0.06375990015011124, 0.05595343156027155, 0.07206289696889912, 0.11928700311967955, 0.059521338282892966, 0.09831082337345964, 0.31266776843421196, 0.326044572160317, 0.342939123913077, 0.3341576809066521, 0.3246543864146967, 0.3398580573744383, 0.35145537142876815, 0.3361775941346862, 0.32011343431752337, 0.08184532560940083, 0.1265938659320791, 0.10750901809760893, 0.11337193420223268, 0.09029005502966991, 0.08568371135429265, 0.0909510773233031, 0.11628874004424028, 0.12376930065922243, 0.15026250239039307, 0.17657477049846326, 0.16085398376485827, 0.1646822908762282, 0.17377100311137506, 0.14882473941847096, 0.21140194657878153, 0.15203324977149058, 0.14587461531146095, 0.23145243886367317, 0.20365990017716296, 0.24155053512836078, 0.21577141575330094, 0.25524173879587775, 0.21289467732952072, 0.22007503928663363, 0.22508746390730128, 0.2189182285083533, 0.18731035644023952, 0.18335559461260842, 0.18891035186403538, 0.15787611164768645, 0.16992538435996662, 0.20570392132751747, 0.17250598297200448, 0.16266210013960736, 0.17044081329986205, 0.18718063241399718, 0.1785611691254162, 0.17808779264948427, 0.18725830306657598, 0.22533957648983893, 0.18303588953499228, 0.1840737746462351, 0.17709672384871045, 0.18504589270634875, 0.1718369572149201, 0.18171976857186412, 0.17345602681735217, 0.21868990781241138, 0.1842459119012405, 0.17681877785243183, 0.17699631037426355, 0.175837354966352, 0.1756855016028197, 0.1663358874158044, 0.5106138506923947, 0.17105799480464035, 0.18031544291756185, 0.18402009957756704, 0.5103120844138869, 0.15837806334973992, 0.36611415236305844, 0.2522841854480855, 0.18325659795588778, 0.30805512118938605, 0.3350251381613605, 0.28336402721879816, 0.16910684502573736, 0.18494096280911565, 0.16715927601279945, 0.1954109925334787, 0.3752289034065751, 0.19525256847321348, 0.19427134679629743, 0.19207129644187304, 0.18683568409856555, 0.2135749380374129, 0.17580204441431957, 0.18867041325777412, 0.18654845955142407, 0.20568880668582523, 0.08194416164218343, 0.07731370382475089, 0.0875363584226958, 0.08178125656180601, 0.09155554807577249, 0.0807031090874134, 0.09302719072012644, 0.08160493153569293, 0.08093075782332182]}, "mutation_prompt": null}
{"id": "c6d65484-23de-497d-a677-13a24eac4ac9", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        success_count = 0\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean())\n\n                # Introduced probabilistic scaling mechanism\n                scaling_factor = np.random.uniform(0.9, 1.1) * np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)))\n                mutation_factor *= scaling_factor * 1.022  # Slight adjustment for improved exploration\n\n                if eval_count > 0.1 * self.budget:\n                    mutation_factor *= (1 + success_count / self.population_size)  # Dynamic adjustment\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.1 * (best_individual - population.mean(axis=0))\n                # Enhanced elitist amplification\n                elite_amplification = 0.2 * (best_individual - a)\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor + elite_amplification\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.025  # Fine-tune crossover rate dynamically\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    success_count += 1  # Track successful improvements\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introduced dynamic mutation factor adjustment based on the success rate of previous generations to enhance convergence.", "configspace": "", "generation": 70, "fitness": 0.1616557906766189, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.13.", "error": "", "parent_id": "20dafa40-6c4b-4680-a70e-65c34c0b8f1d", "metadata": {"aucs": [0.20787400115398147, 0.23182800165054007, 0.19549007395230078, 0.2161114819568174, 0.21689416516836368, 0.19595970730562307, 0.2288566973537508, 0.21021541809787614, 0.22203607985133145, 0.0054019783647411, 0.021948251317332912, 0.05560656790194329, 0.01966514614029491, 0.037518138479613716, 0.019751996610897216, 0.010025272467152346, 0.03127772549696106, 0.012502795343598883, 0.09400198413401051, 0.07556262296174954, 0.07099648140189452, 0.08650551141254659, 0.10225961655830129, 0.08237790003448842, 0.08115670439068168, 0.08241438902368536, 0.1009152088762657, 0.09971739709793892, 0.06138034571997597, 0.08097318654691699, 0.07876860336016545, 0.08738706720541867, 0.0772727886485054, 0.09130025167284461, 0.08953595687640659, 0.07295101567320961, 0.6455623000845462, 0.7165935937508686, 0.7097768523032424, 0.5966395275532282, 0.6329075208543884, 0.5884028898042872, 0.6000152200069282, 0.688296636608988, 0.7638991408080837, 0.24594407393055973, 0.21767169379159546, 0.19137382247299417, 0.24078210726831184, 0.20737996818560422, 0.21993685636257188, 0.2745322490514581, 0.1948494489751681, 0.21642748909240905, 0.22741741280944283, 0.2069398349826559, 0.2182795748018297, 0.18893574858415563, 0.20364325972783637, 0.2066803585986302, 0.20466768349540165, 0.21410487746205686, 0.19240617062351462, 0.15864228113087375, 0.10162705269606997, 0.10284290338834068, 0.11272544035543974, 0.15325951674538718, 0.0744051783257128, 0.12440907652518929, 0.12985000472580344, 0.10301027381422723, 0.10082833302658656, 0.17929443856178473, 0.15598673224798154, 0.11201278957549399, 0.12488439982457078, 0.13086051356706252, 0.12125205387941329, 0.11083963484853798, 0.10115186272035592, 9.999999999998899e-05, 0.00514422257702063, 9.999999999998899e-05, 0.007136033268707265, 9.999999999998899e-05, 9.999999999998899e-05, 0.003353926672290841, 0.01138582636013219, 0.012290365323599173, 0.12272415624896715, 0.14258224484503912, 0.14663294717082886, 0.09859835824384067, 0.12204776664452444, 0.04296649980788991, 0.2171117805859455, 0.18914854996234542, 0.15113082450659554, 0.07679697743047986, 0.03730077325722325, 0.021392016941723546, 0.03906559598337045, 0.04905793882914855, 0.05271099938951196, 0.06517355529002689, 0.04673602985452485, 0.0625558027179095, 0.07573982320613815, 0.08658923791925277, 0.059115686029963754, 0.050182415535287905, 0.048760980699230294, 0.06157081077285398, 0.08940477175293071, 0.05436389887749904, 0.07235802102619382, 0.24123548881122725, 0.23018442121483063, 0.22679630156030095, 0.2404749584363196, 0.2408957975360898, 0.2481258494052827, 0.23959356632061135, 0.24707634561634373, 0.23912036973878503, 0.08300744900588031, 0.09876160524751998, 0.09167208672865201, 0.07659003972869738, 0.09532579101359007, 0.10588781543360437, 0.08326109914021085, 0.08851384492027958, 0.08473906805949971, 0.13910717607793044, 0.16800657201476643, 0.16362152463095736, 0.1448246027932133, 0.140996014168004, 0.12880880267307948, 0.14963138758589234, 0.14940266481919695, 0.15098957670198743, 0.18110881768295362, 0.18797649992067522, 0.18728469664562064, 0.18853116192046604, 0.17060917445480028, 0.17814263785569096, 0.1798655019669413, 0.17377774300845283, 0.155494453430427, 0.13905462957177495, 0.15634006398919498, 0.16337094903459348, 0.1239776131699093, 0.13532713951974895, 0.16587833860231427, 0.13545338703267495, 0.1336713024831443, 0.14736727698475294, 0.1800012430207587, 0.15122802914036038, 0.16600637693660958, 0.2090855588909929, 0.18170646294317694, 0.1698527497323843, 0.1793701059195315, 0.17659958026114875, 0.181060761638694, 0.16098946659156954, 0.18021794418544101, 0.16976893596083642, 0.17695291268568258, 0.16845487527395908, 0.1662544294324252, 0.17699634223573302, 0.1760135235884852, 0.17073941950921834, 0.163721294891212, 0.29187008276141546, 0.20482450461138357, 0.17840102319405537, 0.1860272574137386, 0.32250108166045477, 0.16116997788686427, 0.276293934221877, 0.15881268935765724, 0.17001923052887324, 0.1663572611861408, 0.29592666075980956, 0.2862873667092547, 0.20953421285703022, 0.23758206190582165, 0.1761647060625774, 0.3030924158475141, 0.30353864248414064, 0.1893982611555871, 0.18933469321954977, 0.1844400553764135, 0.19027157528240102, 0.2135749380374129, 0.19229818490663753, 0.18814561260850682, 0.20727887993498284, 0.20568880668582523, 0.08323205859976257, 0.08229380377665985, 0.08854707582363008, 0.07387313090998637, 0.07480251342539146, 0.07718614779977628, 0.10114377869778823, 0.08356384057287436, 0.07135453450406182]}, "mutation_prompt": null}
{"id": "816f937a-d80c-429e-8bcb-63b4fff0f2a7", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean())\n\n                # Adjusted probabilistic scaling mechanism\n                scaling_factor = np.random.uniform(0.88, 1.12) * np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)))\n                mutation_factor *= scaling_factor * 1.022  # Slight adjustment for improved exploration\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.1 * (best_individual - population.mean(axis=0))\n                elite_amplification = 0.2 * (best_individual - a)\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor + elite_amplification\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.025  # Fine-tune crossover rate dynamically\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Adjusted mutation strategy by adding an adaptive scaling factor to enhance diversity while maintaining a smooth convergence.", "configspace": "", "generation": 71, "fitness": 0.1826583452664422, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.13.", "error": "", "parent_id": "20dafa40-6c4b-4680-a70e-65c34c0b8f1d", "metadata": {"aucs": [0.30284246092580636, 0.3414484309585014, 0.30324367547923825, 0.32955864145358627, 0.3157535151017927, 0.3252516848103163, 0.3236891739246236, 0.2995235744487088, 0.3389855960424317, 9.999999999998899e-05, 0.00803052467704568, 0.011272247641786803, 9.999999999998899e-05, 0.0005834773206901955, 0.003484387951103063, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12242313542796601, 0.10476141941712835, 0.09404249663260289, 0.10290168919661025, 0.12019115667077129, 0.09414610054244676, 0.07759644284074507, 0.09852460748992997, 0.11510208055383664, 0.11705909711319185, 0.0714598126552708, 0.09740321396645613, 0.09035961353326016, 0.10084773598434604, 0.08395152166879849, 0.11287437916882626, 0.1025080988061623, 0.08092808251259287, 0.5566988495192431, 0.6948359324982321, 0.7557732496286876, 0.5657126155487652, 0.5556098881374847, 0.5425656471144467, 0.5138706004310898, 0.5624946516204337, 0.8026656220429014, 0.2593864437082528, 0.25315054370005863, 0.22048301656250457, 0.22855166206113253, 0.22775999692966564, 0.24098400684296017, 0.2745322490514581, 0.2534491806924125, 0.22842526171140143, 0.2722742343229465, 0.2708764418239269, 0.2540450057329634, 0.2046477805404786, 0.2929981153269421, 0.4287859765332134, 0.2606158696972264, 0.23381790329221952, 0.21130374320167333, 0.16371135200724563, 0.11382930477546438, 0.10475347909013544, 0.11846627096895046, 0.208868186610477, 0.07596024587714079, 0.13900512867854287, 0.14136467497557992, 0.10221276782613042, 0.10152330667696663, 0.18050058874302444, 0.21299582706353248, 0.11683812705464391, 0.12751439269873988, 0.14927046379281017, 0.12813833357826243, 0.11295851542951318, 0.1058958763815212, 9.999999999998899e-05, 0.007149442174350207, 9.999999999998899e-05, 0.0074773849426234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01444091797574587, 0.013469515073692095, 0.10717184612535624, 0.12185861922333263, 0.14898909638500069, 0.10171097350771474, 0.15874123940710527, 0.040861848082527796, 0.22230104347935675, 0.22614481892651772, 0.1519597981762092, 0.1275578262724002, 0.03890242578204883, 0.023089048716737892, 0.04203738311190064, 0.05557647690736889, 0.09996801663705102, 0.07127807632934768, 0.05873930509225189, 0.09274032284573064, 0.09182723387287628, 0.09157653115309894, 0.067713222830596, 0.06692018737831185, 0.061517105870398714, 0.07221424168526736, 0.11998701800505807, 0.05931925725889775, 0.09733931080054081, 0.3274305042047919, 0.3160919483112943, 0.3380443567548499, 0.28733511909419795, 0.32114852279850004, 0.34599915087521826, 0.34872000533831216, 0.3191577027377912, 0.3266612353748438, 0.08367567179346203, 0.12208959035604638, 0.10819655578460474, 0.1042626606297361, 0.0950575773165141, 0.09233620222069616, 0.09568215556016568, 0.1163068905349095, 0.1346971399813921, 0.17185510793518954, 0.11992103630641981, 0.18797817005824569, 0.14260210303495402, 0.14181208655801258, 0.13386608119751164, 0.15507284636685126, 0.13614224611399073, 0.1527973994428754, 0.2564455782095304, 0.19559864503825675, 0.265957191304823, 0.22587744094254258, 0.22987427199489796, 0.20995980603038533, 0.24978827747136634, 0.24609668111249694, 0.18442022999605834, 0.18449742367632038, 0.19832940643603925, 0.2054276496732107, 0.13275662651436282, 0.19191267732504158, 0.2139743548243378, 0.1670345102476466, 0.1640448551847148, 0.19487285291587642, 0.1854281007593106, 0.20753899274550403, 0.1940728307543781, 0.17699809917354847, 0.17988175058482725, 0.18686218787760023, 0.18099688355345145, 0.16956780476203515, 0.20117291914818547, 0.18278302632845056, 0.19679754757149448, 0.1776542273939149, 0.21544275008939207, 0.17480582135660638, 0.17069217746732934, 0.18774249203839632, 0.18138021940711746, 0.17624975719564995, 0.4219303300970403, 0.4199750106174811, 0.17051809400160123, 0.17999727583600011, 0.18356895713678578, 0.15294981038561017, 0.14961898810945318, 0.33968100335201257, 0.16606989235617142, 0.18397355301879637, 0.3494384167017742, 0.31220301339615886, 0.35762510174353745, 0.21565736081603593, 0.431482730787741, 0.167074390171994, 0.19533976259917585, 0.37707579953886794, 0.18765800475258998, 0.18684931910255187, 0.1699284320100134, 0.18683568409856555, 0.2135749380374129, 0.18329053482795643, 0.1831999722889064, 0.1821768602479379, 0.20568880668582523, 0.07516235026915186, 0.0764464709086875, 0.09193058666066789, 0.08283555294795675, 0.08970122894514776, 0.09358373525991703, 0.09546118453135555, 0.08315213147230116, 0.08222222060446205]}, "mutation_prompt": null}
{"id": "76f2d703-738b-4bfc-8b61-7a21151f58ee", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean())\n\n                scaling_factor = np.random.uniform(0.9, 1.1) * np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)))\n                mutation_factor *= scaling_factor * 1.022\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.1 * (best_individual - population.mean(axis=0))\n                elite_amplification = 0.2 * (best_individual - a)\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor + elite_amplification\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.025\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n            # Implement dynamic opposition-based learning\n            if eval_count % (self.budget // 10) == 0:\n                opposite_population = self.lower_bound + self.upper_bound - population\n                opposite_fitness = np.array([func(ind) for ind in opposite_population])\n                eval_count += self.population_size\n                improve_mask = opposite_fitness < fitness\n                population[improve_mask] = opposite_population[improve_mask]\n                fitness[improve_mask] = opposite_fitness[improve_mask]\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Integrated a dynamic opposition-based learning strategy to enhance exploration by periodically introducing opposite solutions.", "configspace": "", "generation": 72, "fitness": 0.16413505305955164, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.11.", "error": "", "parent_id": "20dafa40-6c4b-4680-a70e-65c34c0b8f1d", "metadata": {"aucs": [0.3152935101954325, 0.26730857444400935, 0.24857620271190795, 0.2862781161813457, 0.3179001607209748, 0.28334367097042035, 0.2632369006861941, 0.26062195882222183, 0.2741544134260442, 9.999999999998899e-05, 0.0011821167003137623, 0.00018247296726481288, 9.999999999998899e-05, 0.05241218266059655, 0.041550985718165845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09859670042177882, 0.0912909558313999, 0.09537202593490879, 0.08658912872789393, 0.09811705853447816, 0.09478390194268271, 0.08016138706135134, 0.08388861023593741, 0.10341749382414722, 0.07350571821467855, 0.06466946608737634, 0.09361498348484187, 0.08250926577466833, 0.08133419755552262, 0.07929456467988771, 0.08280043978051221, 0.09575703221492626, 0.07225685053182429, 0.41026977534524045, 0.5277242787324704, 0.6606581998888055, 0.43192149273929903, 0.36811100989134293, 0.35315273942188385, 0.40181840801031965, 0.417360693179893, 0.7287730507844282, 0.21927366272934, 0.2042794675772619, 0.19431412765498302, 0.2103726659441525, 0.21457492810775425, 0.21200243144605868, 0.20839571699425163, 0.18920608532203953, 0.19259185253274091, 0.2415975904929365, 0.23781815997267963, 0.2412046551930207, 0.203270576288471, 0.223412813780272, 0.22064968837624432, 0.24650883690232794, 0.24177629411129897, 0.222947314395885, 0.1388040098011123, 0.08976821124686374, 0.09500281204796424, 0.10366198095639834, 0.1508729071401187, 0.07011054387703664, 0.10462166693806763, 0.1170911718568668, 0.09883636715148225, 0.11368183642273866, 0.15577646707588233, 0.20143892641213623, 0.09526139876375017, 0.11425881163701757, 0.2183517650284854, 0.18902819520221714, 0.09774078869222869, 0.0955952611627976, 9.999999999998899e-05, 0.0012900783636987656, 9.999999999998899e-05, 0.0028527102194698672, 9.999999999998899e-05, 9.999999999998899e-05, 0.01711010956327097, 0.019175258493452918, 0.008235302419599244, 0.09788058870849037, 0.09228970698344141, 0.09945330403056019, 0.09438632284215254, 0.12617934465575997, 0.041515909695464925, 0.18767108931432397, 0.1404736196512043, 0.11507878785857284, 0.06746646813854518, 0.025337744548249663, 0.015874800885797735, 0.029074060178069683, 0.04055562518995304, 0.06068803315638782, 0.052914086749913825, 0.04277959727898417, 0.06149169446493996, 0.06492523682253049, 0.06313046907538844, 0.06903084375931179, 0.058087559093322305, 0.05319480600052706, 0.05800334404238583, 0.07095657974353164, 0.04160250093504669, 0.07633596912060714, 0.30826007297009816, 0.2860681162674056, 0.29382004715456, 0.2874377796164028, 0.2959681270560036, 0.27764252907398645, 0.31973924457239344, 0.3412883044417011, 0.30754559411454807, 0.08502398438970449, 0.10059815020182306, 0.0992266917951734, 0.10311119359220322, 0.08538501252899389, 0.08859027296154964, 0.11400215865972807, 0.08835759506486884, 0.09907219235628695, 0.1571948557239139, 0.13994436518380593, 0.16599394801858347, 0.1502169611821671, 0.1461609549945906, 0.1417855275078127, 0.17609989982217233, 0.13409557868834598, 0.16178993395189933, 0.20676401013369783, 0.2019591495039449, 0.22069659376332873, 0.21384170850944628, 0.20625084387368775, 0.21557930802510794, 0.22043049147561655, 0.21762804969949623, 0.19115101262987477, 0.18735667493389607, 0.17190972694976758, 0.1899916767596025, 0.18933422687845536, 0.1666192180544398, 0.19159764818537994, 0.1500478115163083, 0.16513868750957228, 0.16867579267573707, 0.20102218021462492, 0.18402964267370125, 0.16562407477462604, 0.16601807788616008, 0.18647723250446424, 0.19140763532836158, 0.17943156870987154, 0.1738246177029954, 0.17139913300278642, 0.1647279104520457, 0.17743886399511777, 0.16816985779879035, 0.2030209348576555, 0.17631528620626635, 0.1725366928471811, 0.17537366035381752, 0.1722926871149144, 0.17771123485061602, 0.16204857106691817, 0.35139783919407497, 0.3041562044636398, 0.17680565413920157, 0.17938382834687105, 0.41864292946755743, 0.2503399187492068, 0.3525196762252978, 0.2676660735585794, 0.1761951491476259, 0.3250229906245371, 0.24666305580272463, 0.25842270086261987, 0.22073512106477833, 0.27203277981902485, 0.31759183980396544, 0.19198783452371937, 0.3096875811548513, 0.1728118824990299, 0.19427134679629743, 0.17362514988864786, 0.18683568409856555, 0.2135749380374129, 0.18542202689879117, 0.18867041325777412, 0.18396247721740533, 0.20568880668582523, 0.0738962377621929, 0.07917445996453165, 0.07575753820972497, 0.07175172084496895, 0.07531725081128793, 0.07239119382997838, 0.08292875926351895, 0.08456601956446774, 0.0751805567202295]}, "mutation_prompt": null}
{"id": "73071372-da83-4936-a0a3-0fa9926d7dde", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean())\n\n                scaling_factor = np.random.uniform(0.9, 1.1) * np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)))\n                mutation_factor *= scaling_factor * 1.022\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.15 * (best_individual - population.mean(axis=0))\n                elite_amplification = 0.25 * (best_individual - a)  # Adjusted elite amplification\n\n                # New dynamic elite biasing\n                dynamic_bias = 0.1 * np.sign(np.mean(fitness) - fitness[i]) * np.abs(best_individual - a)\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor + elite_amplification + dynamic_bias\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.025\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Refined the mutation strategy by introducing dynamic elite biasing and adaptive mutation constraints for faster convergence.", "configspace": "", "generation": 73, "fitness": 0.1948508021992877, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.15.", "error": "", "parent_id": "20dafa40-6c4b-4680-a70e-65c34c0b8f1d", "metadata": {"aucs": [0.3300921688815228, 0.37584396361586425, 0.3241586377411021, 0.33102652289906975, 0.3648616037337826, 0.3425240050078008, 0.31111031633228936, 0.343644666239044, 0.4096809380662768, 0.010052640651715405, 0.038282574397731195, 0.045930925155745705, 0.1327485367006218, 0.04954660821307533, 0.025660342655227764, 0.0313282841919823, 0.064798996290659, 0.1249932385317376, 0.11060307096554711, 0.10938097981272643, 0.1090556028895513, 0.08845576137548139, 0.12643258517789113, 0.09943102354879951, 0.1137866033781072, 0.09712312052945249, 0.10970249649768504, 0.11469314235857986, 0.10740598080085384, 0.07872368105948335, 0.09975883017328446, 0.11235968262768203, 0.09899403736148893, 0.08005100326535852, 0.0960037648786436, 0.09499959650565848, 0.6803043589256814, 0.8421209181820399, 0.8089008367802588, 0.7166061508704891, 0.634050682114923, 0.6228496548065481, 0.6742171913777463, 0.6305043813297002, 0.8602409809404195, 0.25825242428968453, 0.25724437824717883, 0.2758888368689749, 0.25856672980499307, 0.2293188772429603, 0.2778693264617752, 0.29675140062640526, 0.2477091080262933, 0.26136928631278544, 0.26424460369987446, 0.2709095851739447, 0.2770243402009418, 0.2813987707270502, 0.47485094198340394, 0.2434829707836601, 0.30475106176775835, 0.2103446571324762, 0.31470296914205587, 0.21853366318745138, 0.12357607715402741, 0.14078636051047144, 0.14471112716565182, 0.15684646203678765, 0.08167281842651919, 0.12042813408816577, 0.12266483172901077, 0.10229205408669062, 0.10588267830543396, 0.10489120749146463, 0.16922109849116895, 0.14703570594904847, 0.13080075516930578, 0.11821656196683139, 0.11246450649704531, 0.14434803738956037, 0.12134259219470056, 0.0017291658339018134, 0.11446397965246502, 0.07504394495790623, 0.0056223670000051795, 9.999999999998899e-05, 0.00392323778111181, 9.999999999998899e-05, 9.999999999998899e-05, 0.02079722249355742, 0.09620929525449551, 0.1471561631743321, 0.11595322208781489, 0.10671947774031054, 0.16767830935753936, 0.06872202291720819, 0.13558213421104903, 0.08629492077032719, 0.091618854828873, 0.04699072388647896, 0.01622477654874621, 0.022371393062557532, 0.07569430915123554, 0.09025386874632368, 0.05590220540367352, 0.0716947299151447, 0.04308141008213484, 0.1597429370592306, 0.10541480164077133, 0.03893925929754383, 0.056745817979115265, 0.1183700333665123, 0.06782491641702659, 0.039377933909849006, 0.07255933333644993, 0.11157676358711655, 0.06259307318929552, 0.3684824175545024, 0.3502168987345132, 0.34440828392645517, 0.31275364992465393, 0.32666285711183307, 0.32674961155677285, 0.3175671020400541, 0.30832032709409507, 0.37092281325145027, 0.1000569888971804, 0.088794249025269, 0.11462191532386712, 0.10453336928965895, 0.09399152812328193, 0.12102304049334345, 0.09297064725042836, 0.09153557911128196, 0.11343769073322563, 0.17841143856475195, 0.14807570257021851, 0.1601402690814664, 0.14545108577732369, 0.14940256963122078, 0.15187794538516086, 0.15393720599985883, 0.1672835564136831, 0.18539291307883587, 0.2234960705565412, 0.22178901544194352, 0.20928390960873433, 0.23487464239101707, 0.2544205655551829, 0.22926156679276466, 0.2137275099316941, 0.23641324663649144, 0.22392730796536353, 0.21975930003296906, 0.20082437782915374, 0.21330356985606191, 0.170363338825831, 0.16449849886518786, 0.20124779920863378, 0.20495138603947327, 0.18610848687784465, 0.21320010380944854, 0.18404217616500618, 0.17942938835995337, 0.20921458868277465, 0.19508016889335422, 0.18896752940288486, 0.19433518218577905, 0.19257080815752192, 0.20497479467634683, 0.1963742725963975, 0.18320808420490953, 0.20475388849863396, 0.2065268895850254, 0.18115713554916446, 0.1752241990114095, 0.21614647173852186, 0.16945178313770015, 0.1886073119640137, 0.1798563256383633, 0.24230051079156412, 0.5234194292129262, 0.46744834841215666, 0.17905750552026745, 0.18593162483880077, 0.1564667518769911, 0.26172672543125863, 0.45628504244849644, 0.1662013328673052, 0.18836740502441063, 0.2595005373997318, 0.32290181213731783, 0.31596296717896055, 0.17530091333012876, 0.30741853900306704, 0.2815674207200557, 0.197176511363499, 0.40856643668575154, 0.17704721913517463, 0.18670121944785234, 0.1931350553105301, 0.19545891724525777, 0.2135749380374129, 0.17929308547617606, 0.17862934530626973, 0.17743883405769612, 0.20568880668582523, 0.08150203862498528, 0.07714878995210384, 0.10645570993754916, 0.07901861344458627, 0.08175646045676599, 0.0925711350601488, 0.09005944410350786, 0.09879100025151455, 0.08290086484262171]}, "mutation_prompt": null}
{"id": "8f7eeb8c-f108-4986-b003-cf35da5aa070", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Adaptive mutation based on diversity\n                pop_diversity = np.mean(np.std(population, axis=0))\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean()) * (1 + 0.1 * pop_diversity)\n\n                scaling_factor = np.random.uniform(0.9, 1.1) * np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)))\n                mutation_factor *= scaling_factor * 1.022\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.15 * (best_individual - population.mean(axis=0))\n                elite_amplification = 0.25 * (best_individual - a)\n\n                dynamic_bias = 0.1 * np.sign(np.mean(fitness) - fitness[i]) * np.abs(best_individual - a)\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor + elite_amplification + dynamic_bias\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.025\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introducing an adaptive mutation factor based on the population's diversity to enhance convergence speed within a 1.6% code modification.", "configspace": "", "generation": 74, "fitness": 0.19610707913980907, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.15.", "error": "", "parent_id": "73071372-da83-4936-a0a3-0fa9926d7dde", "metadata": {"aucs": [0.29510499173594185, 0.3544709253782845, 0.2975564760976164, 0.3163999149526219, 0.3457097374801953, 0.3390029459248104, 0.3288449536418504, 0.33958428201303337, 0.3629108107969139, 0.010305160466020591, 0.038194939797852934, 0.047400696262991704, 0.14959654939037426, 0.04962789844305748, 0.031340335925009066, 0.03182099859559129, 0.06230777249517583, 0.16164968014658843, 0.12235169557684256, 0.11358389154307302, 0.12363601652553202, 0.08991199688588769, 0.11775470350478645, 0.12405297543379745, 0.12045771335052835, 0.09267209167134238, 0.11315720280820574, 0.10156237850006034, 0.10340059646785216, 0.08211671617682748, 0.0760828403856516, 0.11478437275680886, 0.1021483178772511, 0.0768229154995832, 0.09401928226627476, 0.09445553826765152, 0.6665945067583483, 0.8505478797411661, 0.794620109340785, 0.7163764722620058, 0.6509031148528419, 0.6278648757645386, 0.7240463903640517, 0.6267867853049556, 0.8602116921244762, 0.2570198852257748, 0.24774942782924958, 0.2645295609828522, 0.24395173560095462, 0.23405669542948004, 0.27522224570024356, 0.2903768449392107, 0.2660062940696365, 0.27291922767685406, 0.44418069239602787, 0.26303839353934055, 0.26069471783716813, 0.23959903158553542, 0.47794550360892984, 0.2822235944502519, 0.5089478862947298, 0.22961212481573, 0.48769707607378054, 0.21187105368384473, 0.12168339466824107, 0.1435971644946873, 0.1366848690822382, 0.16216465486497078, 0.08186013781779311, 0.12301254011100082, 0.12276416106866017, 0.10200480140604595, 0.10728639673874585, 0.10532618291307494, 0.16162527379241853, 0.14980866210836608, 0.1300158661980233, 0.11992813444011696, 0.11115178570785267, 0.14819688505920092, 0.12149067181422124, 0.001729157709482343, 0.11233491450659727, 0.07502811789215413, 0.005622366576483739, 9.999999999998899e-05, 0.003926809695033784, 9.999999999998899e-05, 9.999999999998899e-05, 0.02076244965870977, 0.09345575232726966, 0.14041226412397223, 0.11596093963665499, 0.10668809474720542, 0.16678390091480955, 0.07395143992479081, 0.1472312695104402, 0.08626078040018403, 0.09844938040091078, 0.04699070951425788, 0.016224772201067772, 0.022371396734646276, 0.07569540941820763, 0.09028869978624987, 0.055902150307141185, 0.07169473149722216, 0.043081380932763036, 0.15973658596253193, 0.10819854915945415, 0.03907577267168949, 0.05708041163170585, 0.11654391882105097, 0.06892078404622226, 0.08000958976487038, 0.07400135302260369, 0.11700430424852415, 0.0624823226485538, 0.3045493727942884, 0.376590453606068, 0.32783650585550506, 0.293612579730435, 0.31898073574502106, 0.3061901953515944, 0.32211589583499833, 0.3427434643706534, 0.38072734258037033, 0.10269112386241086, 0.08567973694413067, 0.1060377653498994, 0.10470684129758223, 0.1099597474798133, 0.0929797460733276, 0.10989958630250951, 0.09284231043484925, 0.11014209057492552, 0.17066194788496336, 0.1729983275328857, 0.16198698771743436, 0.14964482219141717, 0.1394063007651828, 0.174389502935973, 0.1566805269886432, 0.15537974487122552, 0.1760457450166758, 0.21111063764909688, 0.19926556620515556, 0.21895697721326313, 0.2015835951438023, 0.19941188158248568, 0.20113001687937837, 0.19758525365446944, 0.2106710043100346, 0.21599191284398123, 0.1712784979102464, 0.20532301874725356, 0.19306561716064197, 0.1791985738110059, 0.17077024442742172, 0.19787241263904376, 0.1666104449200846, 0.18829567423369487, 0.17572579757198037, 0.1711414057396612, 0.17938114386374948, 0.1754532261630768, 0.18103737418693167, 0.1810366936631267, 0.18977724937093676, 0.2008398059209815, 0.19382563288217847, 0.20522023141747536, 0.18113360010445145, 0.1896152450463584, 0.20396547416901312, 0.1835883670207319, 0.1759490021380563, 0.21512107205687447, 0.16926060558527456, 0.18102279457766113, 0.18884289828144762, 0.4203119290310626, 0.42949775915927657, 0.5329525967605211, 0.17944262747295325, 0.1837669479074131, 0.18647456018910336, 0.16312709727198593, 0.46701409078964584, 0.18007778871447555, 0.1841784086839714, 0.3063531041914559, 0.33676268475210624, 0.4144089759788955, 0.20611645666230205, 0.1755505329894015, 0.21053864649410547, 0.19850492325200175, 0.48482638748156703, 0.1812787367195463, 0.19491400585907181, 0.17142932874653416, 0.19357604893435387, 0.2135749380374129, 0.17112570106229918, 0.18135803861421695, 0.17743883405769612, 0.20568880668582523, 0.08042974638978373, 0.07577708717204301, 0.1001252229702837, 0.07575185216628066, 0.07488072987204253, 0.08997153874459951, 0.08956190935410291, 0.10119617137838599, 0.10241033449444947]}, "mutation_prompt": null}
{"id": "6c15e7aa-879f-42e3-a7ad-e8b3bae1ab9d", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Adaptive mutation based on diversity\n                pop_diversity = np.mean(np.std(population, axis=0))\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean()) * (1 + 0.1 * pop_diversity)\n\n                scaling_factor = np.random.uniform(0.9, 1.1) * np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)))\n                mutation_factor *= scaling_factor * 1.022\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.15 * (best_individual - population.mean(axis=0))\n                elite_amplification = 0.25 * (best_individual - a)\n\n                dynamic_bias = 0.1 * np.sign(np.mean(fitness) - fitness[i]) * np.abs(best_individual - a)\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor + elite_amplification + dynamic_bias\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.55 + 0.45 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.025\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introduce adaptive crossover rate adjustment based on population diversity and fitness variance to enhance exploitation and exploration balance.", "configspace": "", "generation": 75, "fitness": 0.1924513349965172, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.15.", "error": "", "parent_id": "8f7eeb8c-f108-4986-b003-cf35da5aa070", "metadata": {"aucs": [0.3139245984931014, 0.3396351335275345, 0.2673455850013411, 0.3308806548693256, 0.3735108486872699, 0.3584632049279822, 0.29117760479264576, 0.30696586759401046, 0.43516900715216467, 0.014464584547332238, 0.02858729662848669, 0.04300972553929494, 0.11067644077524785, 0.05162941750196659, 0.02540938414562266, 9.999999999998899e-05, 0.06431033647399087, 0.08010338545215567, 0.1434643375728739, 0.10488408427034446, 0.11276150409235075, 0.0914854514159793, 0.13891978677956995, 0.16011623416505605, 0.11103416912357056, 0.10345193913866346, 0.11644473611975714, 0.09909976200359327, 0.1235727286215631, 0.10283293073145905, 0.08592636237611606, 0.10677544304484221, 0.10767212390164971, 0.08138761840646713, 0.09446017240559157, 0.09056646358459897, 0.6665945067583483, 0.8505478797411661, 0.794620109340785, 0.6519128732120858, 0.6325150552771499, 0.5579896908327422, 0.7240812660247488, 0.7728675331172772, 0.8583461360346596, 0.2531397037591896, 0.25350588212880953, 0.2725708905271216, 0.2450450537925063, 0.2536968039862957, 0.2657984873477751, 0.2730804642383984, 0.23858879813401446, 0.26919566849663956, 0.2649004219743347, 0.3017054500848544, 0.2606470939925133, 0.2392110318236782, 0.46182764761268746, 0.23981967555383576, 0.3091577848264525, 0.21920733031236217, 0.30221988850027437, 0.2056530622376591, 0.12412103994317747, 0.13099927920181742, 0.13811299548929967, 0.15240040713562208, 0.08183451170935241, 0.11664028840085228, 0.12014645050529071, 0.10185035449406366, 0.10767631178498183, 0.10529056095426748, 0.15683602408930053, 0.1391971933748506, 0.12989525956122694, 0.11930105532784985, 0.10969133812565235, 0.13882938816556345, 0.1265418028649552, 9.999999999998899e-05, 0.11330193015230361, 0.07514161130235297, 0.006107022925548322, 9.999999999998899e-05, 0.004036760763428515, 9.999999999998899e-05, 9.999999999998899e-05, 0.020125766805748957, 0.09372829244298353, 0.1481628504664324, 0.11233070996121564, 0.10591376188291446, 0.1629746583202566, 0.07415505585289284, 0.14690446822067882, 0.08650464924112489, 0.09314691090539962, 0.04701871812435998, 0.014982452835934024, 0.021696516007563504, 0.07550985703929747, 0.09207755536447948, 0.05121440649833109, 0.06724430347520371, 0.04174876934899019, 0.14764408597616352, 0.09712741674416447, 0.047661786388423444, 0.060808886449546073, 0.12099012660438324, 0.06615941836731731, 0.06662984695315222, 0.07606769164300076, 0.10346969432665154, 0.06155832947350992, 0.3512412724640951, 0.36043228198983857, 0.3357286598533308, 0.2690509415070419, 0.32701105690298615, 0.32332638490898413, 0.31637254771233525, 0.3070130656045049, 0.3547066467087798, 0.09589836410810182, 0.08299129028078223, 0.13010658278467435, 0.10112387024525071, 0.09171429057278968, 0.09579177146882989, 0.10861791064678805, 0.09269561672048343, 0.11176913385819665, 0.16724622479638762, 0.1611752850541881, 0.13447221181423974, 0.14954648791226466, 0.1583138363934048, 0.1615347088432354, 0.17968459594837682, 0.1412046097743016, 0.17969183782209308, 0.22594063342546467, 0.26415718985039793, 0.22170358506828447, 0.22811777139938882, 0.24973019559765897, 0.2194865734762752, 0.21545901175052906, 0.22057857063634378, 0.21306923772680297, 0.17711675041299946, 0.19939344846245233, 0.21861687681009, 0.15531144595216573, 0.17240088846786494, 0.21470269702209077, 0.1833690429154965, 0.17956832250798271, 0.20042350021755506, 0.18407075578580467, 0.19469153535124661, 0.19088030561951796, 0.20356155656750574, 0.1798249616231693, 0.1919732960023396, 0.18254768077992445, 0.16063446879038912, 0.18167743827182703, 0.17698429704851748, 0.1913473537700976, 0.2115701619611252, 0.17944432481449024, 0.1937735433202129, 0.21541034373186296, 0.17289327376401165, 0.1819589617580455, 0.18225318442516392, 0.21011721917327075, 0.41714845598442885, 0.4970002872843774, 0.17943075642774542, 0.1837541894727327, 0.18652710709019849, 0.30955719319966535, 0.30275586219557593, 0.1635425457015559, 0.18481559552365656, 0.2511288824596206, 0.3280796468383266, 0.3978170599877039, 0.37090760231727815, 0.20364349196983866, 0.22962618127806822, 0.19889461820530763, 0.40265872389575685, 0.17834596458870489, 0.1848724355020258, 0.16834324948706203, 0.19357604893435387, 0.2135749380374129, 0.17104175245151332, 0.18847721492654745, 0.18140076936711746, 0.20568880668582523, 0.0831718594042502, 0.10148235404261341, 0.0896165669200023, 0.07312352773506658, 0.0827791261112879, 0.06538067950095738, 0.09053641069526253, 0.09548796341536858, 0.11150491513209326]}, "mutation_prompt": null}
{"id": "9f82dff8-a06f-441d-bff3-90f065c9433d", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            prev_best_fitness = np.min(fitness)\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                pop_diversity = np.mean(np.std(population, axis=0))\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean()) * (1 + 0.1 * pop_diversity)\n\n                scaling_factor = np.random.uniform(0.9, 1.1) * np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)))\n                mutation_factor *= scaling_factor * 1.022\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.15 * (best_individual - population.mean(axis=0))\n                elite_amplification = 0.25 * (best_individual - a)\n\n                dynamic_bias = 0.1 * np.sign(np.mean(fitness) - fitness[i]) * np.abs(best_individual - a)\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor + elite_amplification + dynamic_bias\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n            # Dynamic self-adaptive crossover rate based on fitness improvement rate\n            current_best_fitness = np.min(fitness)\n            improvement_rate = (prev_best_fitness - current_best_fitness) / (np.abs(prev_best_fitness) + 1e-30)\n            self.crossover_rate = 0.65 + 0.35 * np.clip(improvement_rate, 0, 1)\n            self.crossover_rate *= 1.025\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Incorporating a dynamic self-adaptive crossover rate based on fitness improvement rate to balance exploration and exploitation.", "configspace": "", "generation": 76, "fitness": 0.19044576948659622, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.15.", "error": "", "parent_id": "8f7eeb8c-f108-4986-b003-cf35da5aa070", "metadata": {"aucs": [0.35988002261420726, 0.29899530987065204, 0.30885114769798694, 0.3262430348244513, 0.32939654327530077, 0.36484351872258847, 0.31674358631305155, 0.3351609448834796, 0.35925098537995714, 0.1064522872439786, 0.19935024605295448, 0.20098580597218874, 0.027940726263108284, 0.09791616888384413, 0.0369810721022128, 0.12958372666383766, 0.17073996560083393, 0.08535952015677162, 0.10121242402608654, 0.2061643426077785, 0.10892109077329915, 0.10808884684428355, 0.11061590514906128, 0.11234371490513673, 0.09345663215291411, 0.10503944261350695, 0.12094144721709421, 0.08169204754437664, 0.08531111652575596, 0.10956654375238017, 0.10199634514298173, 0.08027626271020505, 0.0949277894902334, 0.09157156417369572, 0.08863227524582795, 0.08177382635313768, 0.770241883379564, 0.8109415926107674, 0.7292183237598358, 0.6395263001550879, 0.8139029951750595, 0.7544966832193591, 0.644120317136196, 0.6212222582026607, 0.8602167889242789, 0.2393972074472357, 0.22448272932890578, 0.21551455048196255, 0.22657963677096682, 0.19492218597715305, 0.2273786742975592, 0.2157950401458807, 0.19423114031356992, 0.221358360126943, 0.2604476267832613, 0.23855538013531286, 0.25404475435832596, 0.19635938799928598, 0.2453255672179655, 0.2126577097442489, 0.24856363342451582, 0.2681067585873961, 0.28392206352590843, 0.15161670823522166, 0.09680343047277817, 0.1195601068130474, 0.1229987897114665, 0.14446808685137946, 0.07303076545892984, 0.11292581566576176, 0.12582518861178393, 0.12281059660240534, 0.13318144684235067, 0.12047465494856002, 0.12976217424264958, 0.12549610575328518, 0.1174878273153579, 0.1578329425511118, 0.1076540565161247, 0.11571475776089624, 0.10724651428004583, 0.00964708553487692, 9.999999999998899e-05, 0.011316664624660744, 9.999999999998899e-05, 9.999999999998899e-05, 0.010860782762693977, 0.009997016487359511, 0.007362793623092889, 0.010713354754846804, 0.09491583586408592, 0.1243906589226943, 0.10606528361781564, 0.0896350974020732, 0.10827413924394769, 0.07397071459555116, 0.12688752652514745, 0.15280719876279203, 0.0737286232239801, 0.05568703636466943, 0.015593782559670921, 0.03316876314338746, 0.1085574892056318, 0.06105015064226704, 0.03736218096499411, 0.056688566777507, 0.10908396634767781, 0.055279589405355045, 0.17964923291559953, 0.08363662968969732, 0.11520547668397663, 0.09678950545052323, 0.10308441295046156, 0.09192984600891974, 0.06269333673017541, 0.09334224777659439, 0.1416677777240437, 0.30973138141302414, 0.31959445548333876, 0.31940406553720035, 0.291319000917618, 0.3650082806910656, 0.3270693649209989, 0.30707606214473593, 0.2992116132856384, 0.30199396275060864, 0.08442602588746106, 0.08532744720226348, 0.08710977388954178, 0.09369375980643113, 0.12908875449305834, 0.1167984274409779, 0.09666297413880443, 0.07961629491908584, 0.09191264373521224, 0.14383161988636095, 0.1432095960032258, 0.16246934208802066, 0.14335064024434419, 0.15017219139632576, 0.15504323599162473, 0.1729982355666989, 0.17087988839507284, 0.15750821845122787, 0.21596045506414752, 0.20324629738658972, 0.21501444334025133, 0.21967981811759618, 0.20513885127384723, 0.20956381782212674, 0.20294521843359636, 0.22090399865111932, 0.17199918103298661, 0.17996726475422453, 0.21141001571109652, 0.22563250616697872, 0.18639961785248593, 0.15290336845461938, 0.18303012304189137, 0.19112365014743926, 0.18105150847438345, 0.1607983793635056, 0.18108835728301043, 0.16718611292520114, 0.19457949593606438, 0.19923267369530073, 0.16601792369628565, 0.17877012390945368, 0.20364614305823214, 0.17643311703186426, 0.2048521139945929, 0.18604540907844436, 0.18426472373821934, 0.22023116497537243, 0.17181275682188646, 0.17854329633705945, 0.20093902723668366, 0.187699125368178, 0.19548709594873503, 0.19531589734415067, 0.18455658705505273, 0.39658277103476836, 0.4313341305834164, 0.17835957488555976, 0.39831789181802646, 0.14463797106098153, 0.16559792098565052, 0.421203022544675, 0.18129695673498303, 0.19037200434354495, 0.19005206093023463, 0.3379949722986695, 0.39360345593289314, 0.40387744864261177, 0.43289172378514573, 0.16687967007991933, 0.19348711112579653, 0.2738370039420117, 0.1960038106008517, 0.18690271392381907, 0.20528871756295375, 0.18683568409856555, 0.2135749380374129, 0.1762549105317932, 0.1792283494702489, 0.1919350051299733, 0.20568880668582523, 0.08001427350245116, 0.08378930281370944, 0.09727856064191454, 0.08316025788252446, 0.08770082477128327, 0.09218019268902222, 0.10400147250148872, 0.09385993779666224, 0.10931732763446111]}, "mutation_prompt": null}
{"id": "b625ae79-c945-4233-82a4-7f66c6fa6d64", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Dual-scaling factor based on fitness spread and diversity\n                pop_diversity = np.mean(np.std(population, axis=0))\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean()) * (1 + 0.1 * pop_diversity)\n\n                scaling_factor = np.random.uniform(0.88, 1.12) * np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)))\n                mutation_factor *= scaling_factor * 1.022\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.15 * (best_individual - population.mean(axis=0))\n                elite_amplification = 0.25 * (best_individual - a)\n\n                dynamic_bias = 0.1 * np.sign(np.mean(fitness) - fitness[i]) * np.abs(best_individual - a)\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor + elite_amplification + dynamic_bias\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.025\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introducing a dual-scaling factor for mutation based on fitness spread and population diversity to enhance convergence.", "configspace": "", "generation": 77, "fitness": 0.19677225009369095, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.15.", "error": "", "parent_id": "8f7eeb8c-f108-4986-b003-cf35da5aa070", "metadata": {"aucs": [0.29758536198772345, 0.31140519333230676, 0.40536068494891375, 0.3408025081614413, 0.3022561134956263, 0.3124381855905354, 0.3424478376042214, 0.3552376795054397, 0.3268412292847186, 0.02288329985470683, 0.04105908206694564, 0.04235901133318676, 0.1459726222550034, 0.04994889201686725, 0.025132168539577115, 0.03217016767131686, 0.06301307319327731, 0.14348436441990764, 0.11707998329607383, 0.11752054607033424, 0.11684024620986933, 0.08459444556024065, 0.11802449344712018, 0.09458854575354803, 0.11879126017936847, 0.10271678109676818, 0.11297543424683831, 0.0927208573877768, 0.10174649976555228, 0.08645686068599356, 0.0761561927259512, 0.11520082039229185, 0.1021728119699079, 0.07707831652115316, 0.09600265156775878, 0.09023373482740848, 0.7992943053231895, 0.8392803961285071, 0.7946096983166924, 0.7163654314876708, 0.646892202368861, 0.6271647411049865, 0.6732624542605168, 0.6298071927725967, 0.8602120651379174, 0.23846427330519948, 0.2386798098230528, 0.2789056407220558, 0.24404324765919783, 0.23935093156241505, 0.2562949231569437, 0.29193566645846136, 0.26250083615521036, 0.27034264503442174, 0.4503947714191847, 0.28363518311894986, 0.26431046445584216, 0.43054874956036426, 0.5940424054473421, 0.2823195252532871, 0.31706023205396927, 0.4389926896571875, 0.4864946096089501, 0.2182788017459032, 0.12219268071808542, 0.14135681586428295, 0.14024498656488904, 0.15656532960684566, 0.08207367791610354, 0.11947670325465043, 0.12139417540513586, 0.10220522712416424, 0.1071003022037994, 0.10486663308784772, 0.16294858478881702, 0.14976354067540287, 0.13020430196163346, 0.11762451671693885, 0.11111663110026604, 0.1437248103542439, 0.13046804113011057, 0.0017291615322868603, 0.11395608737030305, 0.0752302332875463, 0.005622367639374182, 9.999999999998899e-05, 0.003999348181140339, 9.999999999998899e-05, 9.999999999998899e-05, 0.020791664756953487, 0.09376673701331661, 0.14854911706623242, 0.11493988003795041, 0.10406147145295763, 0.15860562592369964, 0.07215672247856086, 0.14559525002669949, 0.08627064614998603, 0.09154632951495967, 0.04698989821266697, 0.01622254353564201, 0.022371774077670437, 0.07604794974584872, 0.09024903949081287, 0.05589322904415095, 0.07169685232643874, 0.04308877057792493, 0.1566367741435346, 0.10636251322700174, 0.03914444713158516, 0.05899435460153568, 0.1096531256897022, 0.07844152914716651, 0.039625634173840574, 0.07244235999299053, 0.11612039072994174, 0.06214696521941965, 0.3439485264285631, 0.3074495457285681, 0.31124213772244014, 0.29229897477547484, 0.33038719729317745, 0.3192891008852926, 0.33283676563462605, 0.3027237179415201, 0.3082477570545704, 0.09231499913203356, 0.08544841414790227, 0.10882958669563247, 0.10145462321482779, 0.11236604972922282, 0.10212146984028692, 0.09028556729420811, 0.09231718017426116, 0.10943637732696698, 0.15660932470616684, 0.1583214517373499, 0.1804672585954158, 0.15259346668727103, 0.16190802365129786, 0.14735387761357543, 0.17735113012879689, 0.18231178758420463, 0.18393604101686267, 0.22824530812987298, 0.21331698822893352, 0.214908763910732, 0.21813475563537432, 0.20414267745858206, 0.24028774158351573, 0.2200350808834638, 0.23280010204749746, 0.2174137527352481, 0.1647933342658252, 0.17256888355453737, 0.20208946214818302, 0.17359682217076533, 0.16748977277107968, 0.22574841178392357, 0.1419979551264563, 0.16148996552160555, 0.19226933333997853, 0.19866121947255433, 0.17649134010049783, 0.20064725398345307, 0.17874130633986895, 0.1825927535386599, 0.17308041112516925, 0.1990887119075524, 0.1688589203114812, 0.1938056602691982, 0.17372536725198062, 0.1917948821195934, 0.20754634079552048, 0.18036362766459424, 0.17557184604867926, 0.2161549605389994, 0.16945429204395746, 0.18156425357577732, 0.18458223999452683, 0.4087568677432942, 0.4905471482447904, 0.4679195019100779, 0.1795381314717417, 0.18448653684699445, 0.1492761263412722, 0.1652369037946264, 0.3694412547183712, 0.18047819399880516, 0.18727551711515356, 0.35367265725848585, 0.3628011763040244, 0.364408872860555, 0.22068318908468498, 0.2896508892670038, 0.1674261609265948, 0.19972860991601638, 0.4014082052352522, 0.18733263927840293, 0.18888864555250462, 0.17773712587320933, 0.18683568409856555, 0.2135749380374129, 0.17452644435920772, 0.1825976282044106, 0.17957698163814328, 0.20568880668582523, 0.08089420953731352, 0.09132156613210352, 0.09703742433904883, 0.07966862977765299, 0.08226339499092661, 0.07903659070775537, 0.08525216402016411, 0.0874151342354409, 0.09515961657564587]}, "mutation_prompt": null}
{"id": "22f4e847-8ff1-4637-bfb7-13497580055e", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                pop_diversity = np.mean(np.std(population, axis=0))\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean()) * (1 + 0.1 * pop_diversity)\n\n                scaling_factor = np.random.uniform(0.88, 1.12) * np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)))\n                mutation_factor *= scaling_factor * 1.022\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.15 * (best_individual - population.mean(axis=0))\n                elite_amplification = 0.25 * (best_individual - a)\n\n                dynamic_bias = 0.1 * np.sign(np.mean(fitness) - fitness[i]) * np.abs(best_individual - a)\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor + elite_amplification + dynamic_bias\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.05:  # Adaptive adjustment for diversity\n                    mutant_vector += 0.1 * np.random.normal(size=self.dim)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.025\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Integrating an adaptive mutation strategy by incorporating a population self-adjustment mechanism to refine exploration and exploitation balance.", "configspace": "", "generation": 78, "fitness": 0.19527777132148, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.15.", "error": "", "parent_id": "b625ae79-c945-4233-82a4-7f66c6fa6d64", "metadata": {"aucs": [0.32682899195821724, 0.33604586123556424, 0.29900743288186726, 0.32898470916555156, 0.32163772342326924, 0.31765443413546346, 0.36620813621503323, 0.3979371613096815, 0.3360454174388118, 0.051003725549666146, 0.06838117504676833, 0.16180803083023332, 0.0107781350943007, 0.07946150984417, 0.04017000156955075, 0.01979773523513939, 0.04718461897073778, 0.03063820034037601, 0.1117473505399883, 0.10146372189675024, 0.11721169660410902, 0.09695635600370711, 0.1261615507561471, 0.10945835558093664, 0.0879801817953354, 0.11096960117445565, 0.09872556268946786, 0.09671486749416636, 0.10546895234422149, 0.09371144700511358, 0.07812242057563723, 0.08087624083315059, 0.10635012569706814, 0.08914184933217473, 0.0853701132391278, 0.11207226236323453, 0.8477854674756453, 0.8061836280293241, 0.7879443963184786, 0.6467801015595107, 0.7652347929687204, 0.6300980615272593, 0.8068310930538092, 0.7657967633736307, 0.7933276095264058, 0.2725823780123816, 0.3002061196276343, 0.27279087631534826, 0.23328055539560855, 0.23551334067595642, 0.24342658875044754, 0.25405771910223707, 0.2576634787323565, 0.2982536249676263, 0.24875180600533053, 0.2834106590355514, 0.22837706439457328, 0.29487963257202865, 0.2971764470319864, 0.29692836858327054, 0.34601546823326157, 0.3378193583866387, 0.21383201364422644, 0.1922783306807785, 0.16949628034855346, 0.12151366032184652, 0.1057331765901155, 0.1409598974478784, 0.07708008009064327, 0.0929340934428714, 0.12519304497618, 0.10374412345279438, 0.13893178518757632, 0.13962388123528657, 0.1256764391841887, 0.1332636251452617, 0.1417465447941435, 0.1340530376020561, 0.11008934967225037, 0.11063040743245234, 0.1468623318600819, 0.13243410812350298, 0.10973340756911742, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008716666487853519, 9.999999999998899e-05, 0.015118024287164356, 0.0111087645695217, 0.03596191758939604, 0.12069778036162626, 0.17505943226688103, 0.09365883397741948, 0.16804084723507862, 0.15666444277170855, 0.08127874795990686, 0.1281502889496704, 0.19716474248700433, 0.1351740697395284, 0.0529944720127733, 0.023422492431797726, 0.023488069570946957, 0.10979832362142461, 0.09329811920145525, 0.08914522781346845, 0.05560973767248523, 0.06264232830791738, 0.07810097873123067, 0.13806579194024104, 0.09590874140366612, 0.09786748350288799, 0.1473280283813716, 0.11940456002999367, 0.13949355300177124, 0.06577456912759239, 0.08139594316993481, 0.09086594477840226, 0.317013934907481, 0.31714740368963723, 0.35609017855348524, 0.3064067902903185, 0.31442411659271896, 0.29396776284293014, 0.33455068877805405, 0.30224638179957297, 0.3237055069484537, 0.06777503719535494, 0.08800150240250748, 0.10224382340512361, 0.1143414384596746, 0.10389786665925183, 0.09162688470511726, 0.11187501339827999, 0.10493940324825801, 0.12014546622031119, 0.1547106279722379, 0.1474219437156764, 0.1773933974896862, 0.15652836447530627, 0.1790273422105625, 0.13634737977840394, 0.16509270762900274, 0.13931231479500417, 0.1910656215190184, 0.23382615044430133, 0.23373105289490503, 0.24440028027814553, 0.22781574701630825, 0.24707857357572938, 0.22336304294026232, 0.21421528645453214, 0.2651770091952149, 0.17447624017037666, 0.19728657934105465, 0.21819449153519455, 0.23187513382692237, 0.17669592852188942, 0.1587135284509481, 0.18280333823587736, 0.16838654106406503, 0.16417673202191085, 0.17649307634628053, 0.17904526622353512, 0.16709812237553856, 0.17815994380896594, 0.18557027680658267, 0.1730946250384059, 0.1694006593547498, 0.17468379637229214, 0.17741473042902767, 0.18746720481416035, 0.16356345511716497, 0.18963700365738578, 0.19166143019941195, 0.18303754279605855, 0.20643284900396952, 0.1845903783285997, 0.1969787026988622, 0.21732284482056163, 0.20298786847858907, 0.17068928665830407, 0.4743149019342031, 0.4725894492463123, 0.18026210581662216, 0.1841729949702825, 0.14803304285409236, 0.15919014327212988, 0.4765144016362255, 0.17932735197803717, 0.2782417336433577, 0.15513211784977798, 0.2714829806110316, 0.35455338867747277, 0.1860394959863787, 0.37947444760572613, 0.1670258159742738, 0.19472212067922579, 0.39881773700124223, 0.18091531697467012, 0.1840951386782479, 0.1824857371843155, 0.19244405413071963, 0.2135749380374129, 0.191311393595622, 0.18492583494159798, 0.19855345262232582, 0.20568880668582523, 0.07353685100513718, 0.07765511141240844, 0.08590109543368529, 0.08212855219446957, 0.07238879093480788, 0.09963553486574295, 0.09928009994740528, 0.09091211922680997, 0.10097333068550307]}, "mutation_prompt": null}
{"id": "a1d9214a-78b3-4058-851d-81e32f4033f4", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Adaptive mutation factor with fitness history\n                prev_best = np.min(fitness)\n                mut_factor_change = 0.1 * (prev_best - np.min(fitness)) / (np.abs(prev_best) + 1e-30)\n                mutation_factor = self.mutation_factor * (1 + mut_factor_change)\n\n                scaling_factor = np.random.uniform(0.9, 1.1)\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.15 * (best_individual - population.mean(axis=0))\n                \n                dynamic_bias = 0.1 * np.sign(np.mean(fitness) - fitness[i]) * np.abs(best_individual - a)\n                mutant_vector = a + mutation_factor * scaling_factor * (b - c) + elite_guided_factor + dynamic_bias\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover rate based on fitness improvements\n                improvement = (np.min(fitness) - np.mean(fitness)) / (np.std(fitness) + 1e-30)\n                self.crossover_rate = 0.5 + 0.4 * np.tanh(improvement)\n                \n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introducing adaptive mutation and crossover strategies with fitness history awareness to improve convergence speed.", "configspace": "", "generation": 79, "fitness": 0.13061881523673888, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.10.", "error": "", "parent_id": "b625ae79-c945-4233-82a4-7f66c6fa6d64", "metadata": {"aucs": [0.3915757254461192, 0.36989223615691247, 0.37608878835943127, 0.38051217971557294, 0.3678611882819711, 0.3672672703472153, 0.38654110867020175, 0.3337972690211274, 0.15414450929204326, 0.22007218247993343, 0.10650994314584072, 0.21210822921184103, 0.19996955773820557, 0.18429584530570142, 0.1972643198274333, 0.2288487363202738, 0.20452209443070968, 0.21679055572231842, 0.2084624520463476, 0.07612990531728481, 0.07735764384651755, 0.22835487173602842, 0.07846612082243976, 0.20691454576236934, 0.08209280199349234, 0.08451692258177335, 0.07602002795174101, 0.06874601467278574, 0.06811994872415839, 0.07527474351542007, 0.07270375411243057, 0.04848327289257559, 0.16368653542466616, 0.07702902827693292, 0.0511060357860178, 0.061599373699571136, 0.3632725876191244, 0.3651114704372449, 0.37209778389552506, 0.35902716364589593, 0.38604125002739464, 0.3644937672410934, 0.3651147511676569, 0.3827103774542968, 0.3687362164030268, 0.0905381863697261, 0.10187230529346647, 0.12776484263530796, 0.10372133798948346, 0.11066765941214818, 0.07713992024946181, 0.10240895852942244, 0.059158810956944974, 0.09741040922263278, 0.14496525084974365, 0.1936052142561836, 0.14886418750969443, 0.15435079203143343, 0.13998052891404167, 0.14319165366844877, 0.14312957065281773, 0.11800998940511509, 0.13104762133297188, 0.03693880683460715, 0.043666359662721144, 0.03295110608366414, 0.025493521523132, 0.03218017379666127, 0.03802768259056288, 0.04747716146336789, 0.04435562208292265, 0.056737690258701345, 0.0510794488975318, 0.03203237752228272, 0.029053053059787226, 0.012440915673048059, 0.06044289914455081, 0.04782161031667531, 0.043111144864744544, 0.014673268392334626, 0.03930774195591735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00017114780962890208, 9.999999999998899e-05, 9.999999999998899e-05, 0.05997288259313349, 0.06535045920481664, 0.05012642392605926, 0.06723176844273326, 0.06273010971972126, 0.021289066058246098, 0.06087125993108389, 0.042001102612833185, 0.036748862413252925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00021449982406285262, 0.025015264730308462, 0.003223187468181843, 0.011247871230431028, 0.005821875319579561, 9.999999999998899e-05, 0.010109048256793485, 0.01572151385026266, 0.00782763738322334, 0.019821474608529566, 0.02326074353608598, 0.0022232944921118936, 0.03030556895341885, 0.02446621138852134, 0.024151292661744317, 0.2667392544371905, 0.2586591140876381, 0.26344706412211993, 0.2252688679938274, 0.20376778024113407, 0.24252161180484566, 0.26648745934696894, 0.23937710984834715, 0.27982554642818425, 0.043689309394354336, 0.058095156151777294, 0.06725949711084123, 0.046945994088288034, 0.0504397472799486, 0.05309469678938128, 0.046770976148386545, 0.04355402838515687, 0.059625673624295494, 0.15590862273431627, 0.121256785208815, 0.13315107035799179, 0.14389111323395043, 0.13723661715046676, 0.1861353346027329, 0.169114295780614, 0.14215000309018522, 0.11839524067928398, 0.17868890737453513, 0.18960817651519646, 0.17511529539570692, 0.16178803055696533, 0.17578355307389304, 0.18567667041176328, 0.16863432799402367, 0.1853596189674278, 0.1510802859710686, 0.12360568739475353, 0.13514908262848402, 0.11448582957572506, 0.10836068808468335, 0.13318322255253556, 0.11499849041112609, 0.11216043542220944, 0.13289999630866112, 0.11552839443593454, 0.15053790610869988, 0.1666914242503168, 0.17989471863462936, 0.15533892275446082, 0.16362648500876387, 0.1640177890518878, 0.15087041011702773, 0.1537585623346024, 0.16610138369830307, 0.14730194415993425, 0.16327644029844868, 0.1569527068322223, 0.16701647993655822, 0.1608796629930701, 0.1571377076662116, 0.16191464793878008, 0.16369038740456177, 0.18082438949455482, 0.12270145797411491, 0.1690606411455794, 0.16494663581376134, 0.1861037608290842, 0.15342830972355026, 0.146941032997704, 0.15987324470214936, 0.21647126487299562, 0.1585862072872678, 0.13880854093282047, 0.15326835781244486, 0.164630691092995, 0.16593027356364987, 0.12831001594004487, 0.16250592246429663, 0.1609143438768892, 0.16448694155013566, 0.13536253730353032, 0.17764894041359025, 0.1840951386782479, 0.18710561059720898, 0.18683568409856555, 0.2135749380374129, 0.1796809841086351, 0.16692715004070158, 0.17814965363250923, 0.20568880668582523, 0.044798208300688036, 0.04927311224007225, 0.06588190008156702, 0.05486013835767334, 0.0637743426542916, 0.05173138129080057, 0.07532529613519179, 0.05625499771315312, 0.04852949996399747]}, "mutation_prompt": null}
{"id": "678f8ee1-4f1f-4e6a-ae51-16715b4308f9", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.success_history = []\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Dual-scaling factor based on fitness spread and diversity\n                pop_diversity = np.mean(np.std(population, axis=0))\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean()) * (1 + 0.1 * pop_diversity)\n\n                scaling_factor = np.random.uniform(0.88, 1.12) * np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)))\n                mutation_factor *= scaling_factor * 1.022\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.15 * (best_individual - population.mean(axis=0))\n                elite_amplification = 0.25 * (best_individual - a)\n\n                dynamic_bias = 0.1 * np.sign(np.mean(fitness) - fitness[i]) * np.abs(best_individual - a)\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor + elite_amplification + dynamic_bias\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.025\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    self.success_history.append(1)\n                else:\n                    self.success_history.append(0)\n\n                # Adaptive crossover rate based on success history\n                if len(self.success_history) > 10:\n                    recent_success_rate = np.mean(self.success_history[-10:])\n                    if recent_success_rate > 0.2:\n                        self.crossover_rate = min(1.0, self.crossover_rate + 0.05)\n                    else:\n                        self.crossover_rate = max(0.5, self.crossover_rate - 0.05)\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introducing adaptive crossover rate adjustments based on historical success to improve convergence.", "configspace": "", "generation": 80, "fitness": 0.19677225009369095, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.15.", "error": "", "parent_id": "b625ae79-c945-4233-82a4-7f66c6fa6d64", "metadata": {"aucs": [0.29758536198772345, 0.31140519333230676, 0.40536068494891375, 0.3408025081614413, 0.3022561134956263, 0.3124381855905354, 0.3424478376042214, 0.3552376795054397, 0.3268412292847186, 0.02288329985470683, 0.04105908206694564, 0.04235901133318676, 0.1459726222550034, 0.04994889201686725, 0.025132168539577115, 0.03217016767131686, 0.06301307319327731, 0.14348436441990764, 0.11707998329607383, 0.11752054607033424, 0.11684024620986933, 0.08459444556024065, 0.11802449344712018, 0.09458854575354803, 0.11879126017936847, 0.10271678109676818, 0.11297543424683831, 0.0927208573877768, 0.10174649976555228, 0.08645686068599356, 0.0761561927259512, 0.11520082039229185, 0.1021728119699079, 0.07707831652115316, 0.09600265156775878, 0.09023373482740848, 0.7992943053231895, 0.8392803961285071, 0.7946096983166924, 0.7163654314876708, 0.646892202368861, 0.6271647411049865, 0.6732624542605168, 0.6298071927725967, 0.8602120651379174, 0.23846427330519948, 0.2386798098230528, 0.2789056407220558, 0.24404324765919783, 0.23935093156241505, 0.2562949231569437, 0.29193566645846136, 0.26250083615521036, 0.27034264503442174, 0.4503947714191847, 0.28363518311894986, 0.26431046445584216, 0.43054874956036426, 0.5940424054473421, 0.2823195252532871, 0.31706023205396927, 0.4389926896571875, 0.4864946096089501, 0.2182788017459032, 0.12219268071808542, 0.14135681586428295, 0.14024498656488904, 0.15656532960684566, 0.08207367791610354, 0.11947670325465043, 0.12139417540513586, 0.10220522712416424, 0.1071003022037994, 0.10486663308784772, 0.16294858478881702, 0.14976354067540287, 0.13020430196163346, 0.11762451671693885, 0.11111663110026604, 0.1437248103542439, 0.13046804113011057, 0.0017291615322868603, 0.11395608737030305, 0.0752302332875463, 0.005622367639374182, 9.999999999998899e-05, 0.003999348181140339, 9.999999999998899e-05, 9.999999999998899e-05, 0.020791664756953487, 0.09376673701331661, 0.14854911706623242, 0.11493988003795041, 0.10406147145295763, 0.15860562592369964, 0.07215672247856086, 0.14559525002669949, 0.08627064614998603, 0.09154632951495967, 0.04698989821266697, 0.01622254353564201, 0.022371774077670437, 0.07604794974584872, 0.09024903949081287, 0.05589322904415095, 0.07169685232643874, 0.04308877057792493, 0.1566367741435346, 0.10636251322700174, 0.03914444713158516, 0.05899435460153568, 0.1096531256897022, 0.07844152914716651, 0.039625634173840574, 0.07244235999299053, 0.11612039072994174, 0.06214696521941965, 0.3439485264285631, 0.3074495457285681, 0.31124213772244014, 0.29229897477547484, 0.33038719729317745, 0.3192891008852926, 0.33283676563462605, 0.3027237179415201, 0.3082477570545704, 0.09231499913203356, 0.08544841414790227, 0.10882958669563247, 0.10145462321482779, 0.11236604972922282, 0.10212146984028692, 0.09028556729420811, 0.09231718017426116, 0.10943637732696698, 0.15660932470616684, 0.1583214517373499, 0.1804672585954158, 0.15259346668727103, 0.16190802365129786, 0.14735387761357543, 0.17735113012879689, 0.18231178758420463, 0.18393604101686267, 0.22824530812987298, 0.21331698822893352, 0.214908763910732, 0.21813475563537432, 0.20414267745858206, 0.24028774158351573, 0.2200350808834638, 0.23280010204749746, 0.2174137527352481, 0.1647933342658252, 0.17256888355453737, 0.20208946214818302, 0.17359682217076533, 0.16748977277107968, 0.22574841178392357, 0.1419979551264563, 0.16148996552160555, 0.19226933333997853, 0.19866121947255433, 0.17649134010049783, 0.20064725398345307, 0.17874130633986895, 0.1825927535386599, 0.17308041112516925, 0.1990887119075524, 0.1688589203114812, 0.1938056602691982, 0.17372536725198062, 0.1917948821195934, 0.20754634079552048, 0.18036362766459424, 0.17557184604867926, 0.2161549605389994, 0.16945429204395746, 0.18156425357577732, 0.18458223999452683, 0.4087568677432942, 0.4905471482447904, 0.4679195019100779, 0.1795381314717417, 0.18448653684699445, 0.1492761263412722, 0.1652369037946264, 0.3694412547183712, 0.18047819399880516, 0.18727551711515356, 0.35367265725848585, 0.3628011763040244, 0.364408872860555, 0.22068318908468498, 0.2896508892670038, 0.1674261609265948, 0.19972860991601638, 0.4014082052352522, 0.18733263927840293, 0.18888864555250462, 0.17773712587320933, 0.18683568409856555, 0.2135749380374129, 0.17452644435920772, 0.1825976282044106, 0.17957698163814328, 0.20568880668582523, 0.08089420953731352, 0.09132156613210352, 0.09703742433904883, 0.07966862977765299, 0.08226339499092661, 0.07903659070775537, 0.08525216402016411, 0.0874151342354409, 0.09515961657564587]}, "mutation_prompt": null}
{"id": "75c287bb-1cd8-4c89-950a-19bfd6f76ca2", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Dual-scaling factor based on fitness spread and diversity\n                pop_diversity = np.mean(np.std(population, axis=0))\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean()) * (1 + 0.1 * pop_diversity)\n\n                scaling_factor = np.random.uniform(0.88, 1.12) * np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)))\n                adaptive_factor = 1.0 + 0.1 * np.log1p(1 + (eval_count / self.budget))\n                mutation_factor *= scaling_factor * 1.022 * adaptive_factor\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.15 * (best_individual - population.mean(axis=0))\n                elite_amplification = 0.25 * (best_individual - a)\n\n                dynamic_bias = 0.1 * np.sign(np.mean(fitness) - fitness[i]) * np.abs(best_individual - a)\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor + elite_amplification + dynamic_bias\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.025\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introducing adaptive scaling of mutation based on convergence rate to enhance exploitation-exploration balance.", "configspace": "", "generation": 81, "fitness": 0.19534876247269828, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.15.", "error": "", "parent_id": "b625ae79-c945-4233-82a4-7f66c6fa6d64", "metadata": {"aucs": [0.28504641876528336, 0.33836184351314036, 0.37611084728597644, 0.38555048495829725, 0.2982465142920554, 0.34405870747987644, 0.28995777825979896, 0.3478172893493814, 0.2848296494214472, 0.013825314322732485, 0.04179182918272273, 0.046399520598231936, 0.13963932162073944, 0.053850546146766876, 0.028616259372373887, 0.06334422426909281, 0.06331225974549504, 0.11635875338268165, 0.14428222802676338, 0.12213046171125153, 0.10257631019850633, 0.12194724054118777, 0.11721276738415332, 0.11830981867611079, 0.10757164435884203, 0.10722352568194637, 0.11891578577066209, 0.09567484480287969, 0.11023674834682973, 0.0816142114643108, 0.07490325210794613, 0.11429528264820132, 0.10228848175078087, 0.07697062709010549, 0.09543503007820908, 0.0965680031850854, 0.7990524469646075, 0.8665690942659268, 0.7794599301900732, 0.7162636967128801, 0.6479986761412204, 0.5780000297139598, 0.6905095437447162, 0.6266516077442041, 0.860209730096957, 0.24219416416319128, 0.2579244972260599, 0.26514651993102056, 0.24445898730283144, 0.24286281646623242, 0.26325267533091445, 0.3002747325265548, 0.2428055527938342, 0.2636077375796514, 0.24557196967034356, 0.2842477829927522, 0.24102928361528775, 0.2522372431467774, 0.4992852533392489, 0.23529722781102802, 0.5353723134330315, 0.2378282564053189, 0.49484224354930895, 0.21733569441429612, 0.12586704191776332, 0.1634736602004857, 0.14199355445564366, 0.15765816486181972, 0.08170415463402936, 0.1209790480295676, 0.12666769906314312, 0.10232526346000648, 0.10707159725253446, 0.10490518315822706, 0.15894006282480622, 0.14499740429435204, 0.12935886910909067, 0.11780568263788427, 0.11385573235063917, 0.14667649408262007, 0.15207025469496926, 0.0017291046206250327, 0.11336968933949287, 0.07490131824162949, 0.005622362812078285, 9.999999999998899e-05, 0.004838297446395523, 9.999999999998899e-05, 9.999999999998899e-05, 0.020945627891729268, 0.09386990073798074, 0.14800849902793967, 0.11743953563773868, 0.10540749164569352, 0.16201855420069022, 0.06727338025920504, 0.14218999842486757, 0.11950881544730074, 0.10284582855528257, 0.0469271268145629, 0.016223098387301405, 0.022371457733173505, 0.07635354562897323, 0.09029123784301862, 0.05589790115339488, 0.07168974305310494, 0.043077387298584124, 0.15875260753455767, 0.10066906868985825, 0.040936629046755435, 0.05150955418938685, 0.13229815386200827, 0.0843107188889326, 0.058581947195478046, 0.0755628690688529, 0.10992533146370753, 0.062045107202656435, 0.2924099112894638, 0.31213042665578794, 0.31721383006422665, 0.2980288648531245, 0.2890402956274163, 0.33624866656999797, 0.3170584867767259, 0.31752524383269776, 0.3378598531356509, 0.08627760116490613, 0.08115576961042625, 0.10777801306539736, 0.10763743751029253, 0.09442832453532723, 0.10638145450700542, 0.10398225629208735, 0.09352785679961073, 0.09213426686829806, 0.1551575585547722, 0.16172832848791563, 0.14090044217105513, 0.16942938224321002, 0.14176264753795653, 0.15238170870690415, 0.1800935622434472, 0.14755221462086954, 0.16376076250644345, 0.2126995365181482, 0.19813006191768767, 0.20021560893633294, 0.21563826559344057, 0.21840510958293713, 0.26362569397262814, 0.23081964786395415, 0.2570990007537717, 0.2324158856600277, 0.19377815120130548, 0.18212445555010082, 0.2193291318548315, 0.19715264883934258, 0.16804008659613412, 0.1835244039514392, 0.1706123056968779, 0.1766580587897748, 0.193313304395344, 0.18606537131250944, 0.18375825241300825, 0.18049447070514602, 0.1743413389823747, 0.16922706136337273, 0.2075342505254073, 0.1737793474496191, 0.18795896051413286, 0.18947624020639375, 0.17323890681548493, 0.1911583207465255, 0.20867885610741677, 0.18031743982254045, 0.17391939746589036, 0.2160776079036575, 0.16861612367201684, 0.18164959790937651, 0.179046461951765, 0.2597022063704503, 0.47587884466426744, 0.5235722108428542, 0.17948857892995473, 0.1857748951070165, 0.15702481475963048, 0.4874547733468495, 0.4752172988822212, 0.18370173690597058, 0.1881330588998701, 0.18285073946217512, 0.3924744473988303, 0.34881833161143505, 0.29607668498364403, 0.1791471016210333, 0.167547821892167, 0.19492701760748132, 0.3663912085571933, 0.17391757967378685, 0.1840951386782479, 0.17917470296039661, 0.1930397344578284, 0.2135749380374129, 0.18065496088939503, 0.17600742323455576, 0.17792097200105528, 0.20630702724029204, 0.07916977924865665, 0.07593734834900157, 0.12253120237753334, 0.0730201209881377, 0.08692784668057663, 0.10459686552889491, 0.09263648448666717, 0.08012374657756116, 0.07940523164542479]}, "mutation_prompt": null}
{"id": "137aa964-3c2f-48ca-b7af-50415c1e5dc5", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        best_overall = np.copy(population[np.argmin(fitness)])\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                pop_diversity = np.mean(np.std(population, axis=0))\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean()) * (1 + 0.1 * pop_diversity)\n\n                scaling_factor = np.random.uniform(0.88, 1.12) * np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)))\n                mutation_factor *= scaling_factor * 1.022\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.15 * (best_individual - population.mean(axis=0))\n                elite_amplification = 0.25 * (best_overall - a)\n\n                dynamic_bias = 0.1 * np.sign(np.mean(fitness) - fitness[i]) * np.abs(best_individual - a)\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor + elite_amplification + dynamic_bias\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.025\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                # Update the best overall individual if a better one is found\n                if trial_fitness < func(best_overall):\n                    best_overall = trial_vector\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introducing stochastic elitism with adaptive learning rate to enhance convergence speed by leveraging the best individual's historical performance.", "configspace": "", "generation": 82, "fitness": 0.14781740269591645, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.12.", "error": "", "parent_id": "b625ae79-c945-4233-82a4-7f66c6fa6d64", "metadata": {"aucs": [0.22667778041133568, 0.2314489312338297, 0.21186481320838868, 0.2259972660285422, 0.23416015151380454, 0.22946388298379894, 0.25488139960458345, 0.21661916393559433, 0.22165704297773747, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029643962982497607, 0.00021636073431652303, 0.0020008013621319876, 9.999999999998899e-05, 0.00030636438295494894, 9.999999999998899e-05, 0.07817331914718084, 0.09213054922638952, 0.08845876149835097, 0.0669888661799527, 0.08731140945520621, 0.08255015275143252, 0.09478857233797788, 0.07465619853919347, 0.08140928358005073, 0.06884832351674575, 0.0682355714763988, 0.06262925553814547, 0.06299531993157648, 0.08641462020493695, 0.08517660847756248, 0.05946646694159152, 0.08490007638238717, 0.07680193152558079, 0.6932334503455617, 0.7720990234773399, 0.6832712831185703, 0.5271329342141597, 0.3861752674760005, 0.3482639923504338, 0.440014043237861, 0.3449219579211581, 0.8133174621555759, 0.191117595686779, 0.1979217452793185, 0.22578120099414578, 0.2086537566281309, 0.18856848553675132, 0.2119825273669932, 0.2301052016804992, 0.19707492058140696, 0.21208325766990765, 0.22517698176177547, 0.2287500649753451, 0.19841726699856943, 0.2150903014524822, 0.2465692934749012, 0.21550237024045693, 0.25522824412321465, 0.1970994779118832, 0.26738926142971353, 0.1327792948986949, 0.09820353928699388, 0.1087487509292121, 0.10531316802965907, 0.12529086049811755, 0.06684486362589692, 0.09514494774458349, 0.09629391729018755, 0.08201768309911639, 0.0903051631841778, 0.08695426332849987, 0.12005905767448022, 0.11871873290121948, 0.10368989111310711, 0.0985414041120437, 0.09059243902992187, 0.11476016930114241, 0.09900746435598462, 9.999999999998899e-05, 0.04760292229514396, 0.030481157474644194, 0.0019028871825296223, 9.999999999998899e-05, 0.0007328920769923419, 9.999999999998899e-05, 9.999999999998899e-05, 0.00653782511995904, 0.07020034911599815, 0.1180800038715748, 0.09088416481882156, 0.08042257436283451, 0.11628090521159762, 0.046091739750732996, 0.08821057174374414, 0.0705820239060746, 0.07034463703839133, 0.00013555401091214225, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018438358357936169, 9.999999999998899e-05, 0.0025239103341744284, 9.999999999998899e-05, 0.004680401216026975, 0.052623295502596035, 0.027213797409671003, 0.034716001226693716, 0.07589280605089244, 0.04677829894532515, 0.02664297637910562, 0.0541656842716457, 0.06675707415172472, 0.045665921817768296, 0.25407762248435806, 0.2593899880128472, 0.2585038848586889, 0.2372168231211329, 0.24868078199530252, 0.2553250390117906, 0.25889821723906503, 0.2395464617499613, 0.26108820452697334, 0.07441021701819028, 0.06863834071808939, 0.08928769788765967, 0.07731120713721229, 0.0741992790569278, 0.07670217884881769, 0.07749598519014322, 0.07559533314828937, 0.08991137578135655, 0.14992562647163554, 0.14719139500263012, 0.14624896382267383, 0.13919937774732116, 0.13672657198534577, 0.12122783215330235, 0.14963138758589234, 0.1491903644460585, 0.1402804970172007, 0.18457578204613145, 0.1737841078873993, 0.18346006170253693, 0.15854776155772765, 0.16701473458070504, 0.18906769718060168, 0.19021313524888805, 0.1787705051802413, 0.17644766049055893, 0.15097460183454603, 0.15281325404344148, 0.16356074072833504, 0.13467053280544095, 0.13690778800956027, 0.1677054354910591, 0.1273145225133956, 0.1412933633047745, 0.15525150374774965, 0.18044425939385456, 0.16358780882642654, 0.17129714435212695, 0.16918482027466997, 0.17136996158094875, 0.1518925741418774, 0.16784685809137667, 0.15536656627005374, 0.17212749681113204, 0.1633557781420395, 0.18009574658713212, 0.18409319413403413, 0.1712394537166465, 0.16307826647467805, 0.18722788192914086, 0.16246714991470312, 0.1728880086761686, 0.17508793423052704, 0.25626113380808546, 0.2958396536459269, 0.30915502871286604, 0.17440731283013988, 0.1745234131699388, 0.14402253841781054, 0.16026844883689773, 0.22912643358357487, 0.16872965667141393, 0.1719814323254535, 0.23788493456233828, 0.19860960671046557, 0.27091533568615267, 0.17779793205746353, 0.21303524247059547, 0.16618972792669573, 0.1943717736772521, 0.2995342169968921, 0.18288744662140466, 0.1840951386782479, 0.1699517687699068, 0.18683568409856555, 0.2135749380374129, 0.1725331332518224, 0.17875841266095827, 0.17868024119394776, 0.20568880668582523, 0.06456884597352641, 0.06534500402792687, 0.07696216053542826, 0.06432947286860347, 0.07181140538419384, 0.07288095092807889, 0.07581370326330072, 0.0736396969200358, 0.07614920672579084]}, "mutation_prompt": null}
{"id": "71a140a2-5273-4de4-8bf2-06d2f2dd9fd3", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Adaptive scaling mechanism based on population variance and fitness improvement\n                fitness_improvement = np.mean(fitness) - np.min(fitness)\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean()) * (1 + 0.1 * fitness_improvement)\n\n                scaling_factor = np.random.uniform(0.88, 1.12) * np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)))\n                mutation_factor *= scaling_factor * 1.022\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.15 * (best_individual - population.mean(axis=0))\n                elite_amplification = 0.25 * (best_individual - a)\n\n                dynamic_bias = 0.1 * np.sign(np.mean(fitness) - fitness[i]) * np.abs(best_individual - a)\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor + elite_amplification + dynamic_bias\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.025\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introducing an adaptive scaling mechanism that leverages population variance and fitness improvement rate to enhance convergence speed.", "configspace": "", "generation": 83, "fitness": 0.18502051225551616, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.16.", "error": "", "parent_id": "b625ae79-c945-4233-82a4-7f66c6fa6d64", "metadata": {"aucs": [0.23880998818486965, 0.2407492772719385, 0.2538024033952979, 0.305162836319549, 0.3094297012513607, 0.29399737359017675, 0.28692926469793134, 0.26002032246231965, 0.3765228366072879, 0.02967883567465035, 0.06064051663454051, 0.048674708265991073, 0.16265845347865493, 0.0521765020141729, 0.03152022747169103, 0.11062031309371889, 0.06979997702789964, 0.17283196261673106, 0.1018542761640785, 0.1242655959099026, 0.1033602318515755, 0.09898260160339001, 0.08910925368045175, 0.1176106391502224, 0.1176920692975697, 0.094922088744257, 0.15832118364951164, 0.10548754515319647, 0.12928221441769105, 0.0970794027735028, 0.08569772021985389, 0.08920953201710069, 0.09754748152893988, 0.07197649274727935, 0.09616099768771058, 0.08959264875990736, 0.8093661410021213, 0.8470211051450882, 0.7058731616831091, 0.7923718471199855, 0.8596668445406411, 0.749882288528605, 0.903497306539722, 0.7896037768213334, 0.8703642396411355, 0.2438710420964545, 0.24029104490460118, 0.25492175966834507, 0.29323204959526383, 0.26352270708766956, 0.24791835239033022, 0.28470393061549204, 0.24439146976449766, 0.26385798515971237, 0.23433899651265933, 0.26679309544267704, 0.22225408228499077, 0.46489119854577854, 0.25156398785759926, 0.23949225189868162, 0.3164599803942094, 0.22441436713616836, 0.4788821411987447, 0.19717442116924921, 0.1255010260420697, 0.12607041027966404, 0.13762247114472526, 0.14145021652062173, 0.08229239402393318, 0.12466753046664014, 0.12209051227877321, 0.10197638506909568, 0.11076566608510185, 0.10453605142343059, 0.1451404817858949, 0.14068582883463165, 0.13246265240498722, 0.11615900884876407, 0.11029457843623569, 0.14686904519157684, 0.1260672073393977, 0.001716292542171649, 0.10961832786780856, 0.07490012427106629, 0.005621775046565913, 9.999999999998899e-05, 0.004475477776055725, 9.999999999998899e-05, 9.999999999998899e-05, 0.02036509677534848, 0.09511929518991435, 0.1454407178289835, 0.11366184312001282, 0.10234436384765655, 0.1737422343158953, 0.06482943839677158, 0.1372850655653659, 0.08791693670073364, 0.09098308141912548, 0.04726948473713832, 0.016162418788314592, 0.022357275128979892, 0.07527080532147123, 0.09039299990867034, 0.05588232647116076, 0.07153236929003493, 0.04303574351247208, 0.15578810040773783, 0.09347302274650415, 0.06241265940307117, 0.06357290542192695, 0.1117840436735561, 0.0971388133299913, 0.058024159908336204, 0.08713144325070477, 0.11424332645201207, 0.061042531267061384, 0.28875411736705014, 0.31102874663126867, 0.28351171831729804, 0.2601241856177866, 0.28845208949614776, 0.3046266923139056, 0.2562708016362084, 0.28134965343516805, 0.3072420231295371, 0.08753360063917315, 0.10302536732627265, 0.09165460516465596, 0.08242965493939469, 0.0946762857263711, 0.09657243728134857, 0.08053132217369441, 0.0995333337841019, 0.09329816973642924, 0.158787435584537, 0.1425940548428294, 0.13131396931289296, 0.15712084007413796, 0.1466772821009492, 0.12920267317854284, 0.1525285161261427, 0.13625527489343459, 0.142465494049406, 0.21249739056492878, 0.21292681723488105, 0.1965770043270767, 0.18202270671053145, 0.2051726092185716, 0.2020062194592921, 0.22319893251476863, 0.19974214997012874, 0.17462316855542792, 0.22218290342721636, 0.15449483586682455, 0.19116006998939505, 0.1973531794062383, 0.17478178820711476, 0.1837816912669611, 0.1482455987120027, 0.17260742044806032, 0.1902699694639789, 0.1689177271279374, 0.1645580698745922, 0.178893923468609, 0.15930500471530396, 0.16295642408340083, 0.16108927000824802, 0.17147142183488118, 0.16465223422048436, 0.1762196191239238, 0.1720075494354063, 0.19098170368036405, 0.1961404270389745, 0.1886883796080252, 0.17686123904054807, 0.2080830000249282, 0.17177308613683528, 0.18034291661555013, 0.18242507353666804, 0.26051068269611866, 0.27621477065623135, 0.3169906170664194, 0.17189917342511707, 0.1621939625116915, 0.3317064320048918, 0.15652950695567036, 0.1761910682198783, 0.1641434299856368, 0.1734542835889108, 0.16993110667997025, 0.22373695330497112, 0.38263846398836154, 0.15372995911242326, 0.1450998767620838, 0.18204257568568205, 0.18523525479508085, 0.188925757920679, 0.18088515256277937, 0.18598971315604684, 0.19896429641666913, 0.19514871830777658, 0.2135749380374129, 0.19244285598726307, 0.1861102576356055, 0.19412484982485045, 0.20568880668582523, 0.07282973096574674, 0.07565875652245613, 0.07292082398662547, 0.07966945313288942, 0.07811995527985982, 0.07206335322447244, 0.07832500208629156, 0.0855569305286219, 0.06632629167576598]}, "mutation_prompt": null}
{"id": "fd8ee826-18e7-43a9-b508-054927c880a8", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                pop_diversity = np.mean(np.std(population, axis=0))\n                fitness_progress = (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean()) * (1 + 0.1 * pop_diversity)\n\n                exploration_exploitation_balance = 1 + 0.05 * np.tanh(fitness_progress)\n                mutation_factor *= exploration_exploitation_balance\n\n                scaling_factor = np.random.uniform(0.88, 1.12) * np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)))\n                mutation_factor *= scaling_factor * 1.022\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.15 * (best_individual - population.mean(axis=0))\n                elite_amplification = 0.25 * (best_individual - a)\n\n                dynamic_bias = 0.1 * np.sign(np.mean(fitness) - fitness[i]) * np.abs(best_individual - a)\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor + elite_amplification + dynamic_bias\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.025\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introducing a dynamic exploration-exploitation balance by adjusting mutation factor based on population fitness progress over time.", "configspace": "", "generation": 84, "fitness": 0.19394423815473663, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.15.", "error": "", "parent_id": "b625ae79-c945-4233-82a4-7f66c6fa6d64", "metadata": {"aucs": [0.2812074917213395, 0.30741948547102127, 0.35507040002916945, 0.32853284643599523, 0.31294728353618706, 0.3140885337707209, 0.2973649192690987, 0.289939721870747, 0.3444715231613896, 0.010094970944809933, 0.04228240690644469, 0.04740113180344396, 0.12989156335526153, 0.050744129373363256, 0.02616426000581873, 0.055736358372457606, 0.06343344231339665, 0.10024969114480631, 0.12425412819234916, 0.12378464465604211, 0.10498379495661192, 0.08763115158078105, 0.12195100249840707, 0.10403758101913296, 0.11178432488309042, 0.09909006717321767, 0.12013362139011075, 0.10356366822933705, 0.11191506423766173, 0.08164048472714769, 0.07478011870383838, 0.10382509368406045, 0.10627914766689828, 0.07415957050017297, 0.09362802537291337, 0.09443452894277837, 0.8000818382446395, 0.8417463854335275, 0.7795631562275989, 0.7163520987361809, 0.6468409657674835, 0.6217328577485384, 0.7240288950434446, 0.6266673298001864, 0.860208197149643, 0.23119058070334308, 0.24052861886516097, 0.2632968983462045, 0.24362384167848172, 0.2588424176917221, 0.3109867897051277, 0.2856158264158729, 0.239962670895716, 0.2612283208190542, 0.25012452733668644, 0.46262523535822986, 0.25803803260752556, 0.23909284296206657, 0.4716431549589174, 0.23690180608768086, 0.31410122680280916, 0.2569413553250207, 0.4897214646973497, 0.21941877257713993, 0.12062634732582789, 0.14294061745462783, 0.14577021914303945, 0.16063218405055157, 0.0816842636044719, 0.11777490175877137, 0.13177906692860963, 0.10202945235748595, 0.10598805197386152, 0.10482890088814456, 0.16159135560112137, 0.15007799236614205, 0.12992440434234287, 0.12271281231490772, 0.1100467018598964, 0.14524512639652765, 0.12851282788088447, 0.0017291327017061597, 0.11317502053621342, 0.07365457330795055, 0.005622365140480534, 9.999999999998899e-05, 0.0037300720168328416, 9.999999999998899e-05, 9.999999999998899e-05, 0.020647453826816986, 0.0955143793532196, 0.17608215785886272, 0.1160507023811046, 0.10968262024630693, 0.15811070601167831, 0.06707633685401271, 0.1424993139309927, 0.09474470679814662, 0.0969962454201444, 0.04696012879107114, 0.016222234860533535, 0.02237235900502943, 0.07556512086675682, 0.0901235268441467, 0.05589643365074537, 0.07171302706844018, 0.04307649873589503, 0.15151260024018742, 0.10215620385362523, 0.03862384035633604, 0.05380219436436218, 0.11359949141104075, 0.07024539571798394, 0.039459154699267085, 0.0729775911943511, 0.1095620164835136, 0.062158372233163006, 0.307261304483195, 0.3181793859461616, 0.3049051771690673, 0.31231773199336266, 0.30500734940754404, 0.3127661408126444, 0.3071834181550437, 0.28540566268747236, 0.33763527428712736, 0.09160578543776265, 0.08061259414361233, 0.10789989451726456, 0.11065954509551446, 0.08792122675310876, 0.12169932294530428, 0.09286256152664296, 0.09191553946797526, 0.09715741293465707, 0.16559808449607005, 0.15419084823252072, 0.1501920676637708, 0.14664894429360376, 0.18260910045315848, 0.14120330867710562, 0.15927688422235642, 0.16585064367001978, 0.17205114556267997, 0.2169569858856687, 0.23420708691367687, 0.23525290330599302, 0.21735877807094306, 0.18318227320455627, 0.1938631046146403, 0.22393824246513894, 0.23286439029177708, 0.20639217460657333, 0.17976848330863326, 0.18825009337882437, 0.23608782794313865, 0.1622562027239265, 0.16597078988581215, 0.21492702924476237, 0.15779982590226593, 0.15085982486560656, 0.2059059341588586, 0.1773594556429794, 0.1890816424369467, 0.19590526133573416, 0.19905793900523516, 0.2027166581111809, 0.18452476861759493, 0.2180865988761791, 0.1719387323393432, 0.20488805602779703, 0.16876061439059853, 0.2033104664853448, 0.20568595457744687, 0.18012836940847288, 0.17622935924197303, 0.21595810347625144, 0.16899729397961605, 0.18244154798856227, 0.1869646900811618, 0.3983096106614068, 0.5286538079974834, 0.45268330984015204, 0.18007736874775748, 0.18405015463930285, 0.15638154642015922, 0.16313525994292044, 0.38784967913865365, 0.17965726699533335, 0.1828255950690275, 0.3469836856392241, 0.330661484540943, 0.4131178324091075, 0.1547909927728628, 0.31468312877537685, 0.1673413193356218, 0.19647977311451037, 0.4614993453942132, 0.17556029866955325, 0.18912149888029994, 0.17457475105412745, 0.18737202630914385, 0.2135749380374129, 0.18896975280220352, 0.18017489845154855, 0.1790617527760331, 0.20568880668582523, 0.08337369455875054, 0.07430324471008443, 0.1093748123009356, 0.08030146063862864, 0.0809704044171865, 0.09479306912155083, 0.11751421845601162, 0.08641786290139786, 0.09930348249690046]}, "mutation_prompt": null}
{"id": "c1c88427-ae7a-423b-8dbc-38ba0106ce73", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                pop_diversity = np.mean(np.std(population, axis=0))\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean()) * (1 + 0.1 * pop_diversity)\n\n                scaling_factor = np.random.uniform(0.88, 1.12) * np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)))\n                mutation_factor *= scaling_factor * 1.022\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.15 * (best_individual - population.mean(axis=0))\n                elite_amplification = 0.25 * (best_individual - a)\n\n                dynamic_bias = 0.1 * np.sign(np.mean(fitness) - fitness[i]) * np.abs(best_individual - a)\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor + elite_amplification + dynamic_bias\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.025\n\n                # Adaptive crossover rate based on convergence speed\n                convergence_speed = np.abs(np.min(fitness) - np.mean(fitness)) / (np.std(fitness) + 1e-30)\n                self.crossover_rate *= np.tanh(convergence_speed)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introduce an adaptive crossover rate based on convergence speed to improve optimization performance.", "configspace": "", "generation": 85, "fitness": 0.18949626939015207, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.15.", "error": "", "parent_id": "b625ae79-c945-4233-82a4-7f66c6fa6d64", "metadata": {"aucs": [0.3921624339479216, 0.3186680754869804, 0.30380589402747993, 0.320350228838162, 0.3784200084579906, 0.2813554711696311, 0.3327101392368881, 0.33059878627187256, 0.29921825410988223, 0.032113802169280836, 0.046343923278884924, 0.026057420505048, 0.10845645981518315, 0.07415634540435967, 0.10173792320209363, 0.008828651217151706, 0.10265589274691977, 0.11644887050547714, 0.10586693119911539, 0.1472064306921428, 0.11076053953196019, 0.08890152984703403, 0.13589418145910737, 0.13719954152716252, 0.11976795256556483, 0.14939000728488794, 0.12173321483648125, 0.10799749343011122, 0.0973536222503757, 0.09121833299756532, 0.07847968455439003, 0.10199203412457702, 0.10608427661776254, 0.07851017895436929, 0.09068170151546506, 0.08749669192302212, 0.7992943053231895, 0.8392803961285071, 0.7946096983166924, 0.5938706663489173, 0.62227533729214, 0.6223392254993635, 0.7659525267149814, 0.6173316774518356, 0.8602386712149601, 0.24083506841462698, 0.22619204705921447, 0.2610936035195204, 0.25819687191502416, 0.2282701388723103, 0.27060674285601194, 0.2907389208078711, 0.23672642462705207, 0.2590906735202547, 0.2652478395248591, 0.2467920507354744, 0.2024582892873249, 0.2335991291325097, 0.4526785489019929, 0.4129810668736813, 0.30249632399591164, 0.2120051638009166, 0.31406307203973893, 0.18821246396691726, 0.1177737630773259, 0.12012028371018191, 0.14004143707011318, 0.13695970591900408, 0.08126058719875584, 0.11321213891039539, 0.11730692081875238, 0.10095801135998372, 0.10582947442163892, 0.10477805939919382, 0.1472602222004391, 0.1367733622192694, 0.1291244224372332, 0.1131499509988223, 0.10820370247345368, 0.1360757965512539, 0.11746706354309022, 9.999999999998899e-05, 0.1060553139932443, 0.06994431369631893, 0.005335842947843283, 9.999999999998899e-05, 0.0033965300369478424, 9.999999999998899e-05, 9.999999999998899e-05, 0.019808735632175, 0.09491141031379213, 0.13908383699760885, 0.10953706451773793, 0.10573897925477216, 0.15860562592369964, 0.07369540827344023, 0.11895424884769601, 0.08683949688799453, 0.08990377691680951, 0.038774979896613826, 0.009054484049972777, 0.015352330428712424, 0.03810073311693252, 0.06953616030908183, 0.03694855329663749, 0.04447175111131996, 0.029813165386413543, 0.055543760627098315, 0.09167150899916943, 0.033532379548982694, 0.061385592630581964, 0.10990470411041842, 0.06572023001305005, 0.03753461760068222, 0.07200086364597424, 0.1051885495398237, 0.0635928208235571, 0.3636704675871143, 0.33910954908292823, 0.3305697861818758, 0.30483551641925455, 0.306821455658544, 0.29356801191860216, 0.27726312516946894, 0.2774481383610602, 0.3133405702647706, 0.09495368521022052, 0.08827025620389928, 0.08854037666241199, 0.10730047039500423, 0.09462728729327063, 0.12387642763862006, 0.09372726801557096, 0.09229655154496597, 0.11203158263261015, 0.16827556478932515, 0.18685302447965546, 0.14955409576921574, 0.14064133527007983, 0.17559906585326812, 0.15371834894487257, 0.16361124098755353, 0.13199089261380248, 0.186262381365759, 0.2039454672553005, 0.22025243261306138, 0.2133204249791908, 0.20425071659101257, 0.2075869619878773, 0.2061639649410737, 0.22115883009366255, 0.21658223707847357, 0.20649494962628323, 0.16605426186675953, 0.20151505133392444, 0.208652278898661, 0.15386373895272243, 0.18903274458704789, 0.21653532743496007, 0.1982675350842249, 0.1601243998880243, 0.1765618073515669, 0.15744853737510878, 0.162422632104816, 0.19875562837976357, 0.19340128002871693, 0.1735033291689666, 0.2058935629479155, 0.18865729932705788, 0.1853086219766773, 0.1974389582804874, 0.17363543738458698, 0.2051018509692556, 0.203780510283745, 0.17138359796784897, 0.17206338602828386, 0.1977887171677306, 0.1684764081456176, 0.18930180560417942, 0.18627969926590726, 0.3925256455595404, 0.4116190405540038, 0.37287695838605195, 0.17946009172882693, 0.18448657848273797, 0.14916978468441466, 0.16703218354695815, 0.38165603608625054, 0.17724017435340722, 0.1861905391484, 0.3523015907400109, 0.30037947914112373, 0.3752988404406695, 0.18568666889003693, 0.43350591787835624, 0.16739687491827115, 0.196696080919199, 0.4238470205131807, 0.18547789123085645, 0.1840951386782479, 0.18007860461854774, 0.18940496081757718, 0.2135749380374129, 0.17957090238105944, 0.18448995762640774, 0.18554012170845913, 0.20604614291059054, 0.06955693359434445, 0.0768036745873516, 0.09459987573647888, 0.08196550863431218, 0.08566865137713431, 0.07510786469994912, 0.10601932756526933, 0.08921830285424948, 0.11211247443082739]}, "mutation_prompt": null}
{"id": "8f81394b-4dad-4843-ae65-b2d042dc61c6", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                pop_diversity = np.mean(np.std(population, axis=0))\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean()) * (1 + 0.1 * pop_diversity)\n\n                scaling_factor = np.random.uniform(0.88, 1.12) * np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)))\n                mutation_factor *= scaling_factor * 1.022\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.15 * (best_individual - population.mean(axis=0))\n                elite_amplification = 0.3 * (best_individual - a)  # Modified line for additional elite influence\n\n                dynamic_bias = 0.1 * np.sign(np.mean(fitness) - fitness[i]) * np.abs(best_individual - a)\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor + elite_amplification + dynamic_bias\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.025\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Adaptive elite-guided mutation with diversity scaling for improved convergence.", "configspace": "", "generation": 86, "fitness": 0.19826575197264754, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.16.", "error": "", "parent_id": "b625ae79-c945-4233-82a4-7f66c6fa6d64", "metadata": {"aucs": [0.3175967808866832, 0.3109644572402971, 0.31484719916818416, 0.32720880258254936, 0.33871939969087306, 0.32826779910219406, 0.31109258174956333, 0.31804970348248685, 0.3412497626986353, 0.02026434768094809, 0.07100518310392434, 0.14752747354536844, 0.04152429893492482, 0.06224096752913133, 0.13687938782455844, 0.09567152488273478, 0.07384101240831553, 0.013442828524544481, 0.1258930080124675, 0.08758763960165838, 0.1370758593160588, 0.10981494648814882, 0.11818463150900282, 0.1271379483704046, 0.11289270612412106, 0.11755774249683726, 0.10686843865482676, 0.11645287438566487, 0.11188770745459864, 0.09503981470395972, 0.10399042889376342, 0.09969492108788558, 0.1069007169268672, 0.08230780004882476, 0.14050092999500408, 0.0969215500941053, 0.7662741639504435, 0.8534304884764987, 0.7539842380274647, 0.6892714711691503, 0.6838437008450474, 0.749881845462534, 0.835072702444325, 0.7896352160832953, 0.8673212578510947, 0.25685150303578497, 0.28105470218086215, 0.27667628656124155, 0.2818451980793567, 0.2819618051334939, 0.2840751954395788, 0.2675692720938193, 0.2708672697581319, 0.2848075977511133, 0.29017745814275253, 0.21811605554222646, 0.3008387574961118, 0.1989286881404958, 0.2941954196546297, 0.24009089215597124, 0.4718014776574586, 0.6385820885913862, 0.27555573555239454, 0.12982070507498977, 0.17460273043249486, 0.13950805103737507, 0.13092607796213285, 0.14141642744659477, 0.0835247991461503, 0.1319275024520803, 0.1364983643827964, 0.1157771995558936, 0.15660259302492818, 0.11563693002384612, 0.17522481874422524, 0.12103437942264694, 0.13262420114545181, 0.1490235367713736, 0.10964360257097128, 0.15961292930420112, 0.1136599004601696, 9.999999999998899e-05, 0.06257154874485116, 9.999999999998899e-05, 0.02716413672710094, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08992022825161783, 0.14113042778415796, 0.12317917712616566, 0.12541159781542044, 0.12181758071182869, 0.07992819211572755, 0.1473646919845607, 0.14005954520272823, 0.06784773856331872, 0.03417271461567484, 0.018203468094078912, 0.025863932623753083, 0.18019055589360544, 0.07536591519731517, 0.04828834591928788, 0.054722750230189354, 0.08256823895523957, 0.06810522106625971, 0.11670517327645069, 0.08402017010218266, 0.09434588269861544, 0.1108310226853293, 0.07413666173488109, 0.09548820878278252, 0.08538679178959097, 0.07979812402079611, 0.06608351333319773, 0.3387277344201687, 0.31719463924036606, 0.3058546225055113, 0.33562757988612624, 0.29811684435012054, 0.34624180954395556, 0.31826967461432676, 0.2914722521029135, 0.3172998274120674, 0.08659519280566197, 0.12609653839096502, 0.10111940994164137, 0.10880097030674374, 0.10593055443448751, 0.10334459913465799, 0.11798283887630368, 0.11855983363317157, 0.0795698361716981, 0.2899743176859252, 0.16044442844262197, 0.17039088104471156, 0.15091849657055012, 0.18930738747027143, 0.16335672797757472, 0.16741731100012602, 0.16634790919810005, 0.1796379007162341, 0.2963120961341259, 0.20164563828959925, 0.21399459202947768, 0.22972044801077907, 0.2321347178233848, 0.2149912501043496, 0.2075855905424865, 0.23232257433338188, 0.20291640655973564, 0.19483056853970337, 0.183286719133395, 0.2082885958395413, 0.1940241334220112, 0.18574122570584561, 0.2125418030677555, 0.1595935781692307, 0.17311029007841805, 0.20534132684812612, 0.17146199077829993, 0.1663127242543907, 0.17328590538719058, 0.21830137651135217, 0.21627457413082407, 0.20046378471916937, 0.198930138272559, 0.17902330226120833, 0.17532206539735762, 0.17652223913899057, 0.17692332792638443, 0.17326858696941927, 0.18375144357918405, 0.1974620198822552, 0.2446638951951159, 0.1855565498126106, 0.18352907820688102, 0.18154853450374075, 0.16934990986688447, 0.46780965907511396, 0.5392618315761737, 0.18169295514382056, 0.18516537924721466, 0.14984318962319032, 0.1667636944255395, 0.35357433346288836, 0.1757812684394452, 0.1919162850938776, 0.26748405243879747, 0.32853791145948286, 0.2396833022634196, 0.17691374807416838, 0.3718081690252514, 0.1692663216996445, 0.20100201541960006, 0.46163106023145273, 0.18935411421686887, 0.18724181776627769, 0.16930344375482564, 0.18754268646670014, 0.2135749380374129, 0.18825103839457746, 0.18781470682002244, 0.17743883405769612, 0.20568880668582523, 0.08113564764491388, 0.07429157689937982, 0.09612107226198752, 0.07847244656263497, 0.08640925608853756, 0.09113576532043366, 0.11078012473041532, 0.0890281440473718, 0.10049974285293395]}, "mutation_prompt": null}
{"id": "4155d449-cdb3-490c-9e7e-3d756a5b265c", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                pop_diversity = np.mean(np.std(population, axis=0))\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean()) * (1 + 0.1 * pop_diversity)\n\n                scaling_factor = np.random.uniform(0.88, 1.12) * np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)))\n                mutation_factor *= scaling_factor * 1.022\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.15 * (best_individual - population.mean(axis=0))\n                elite_amplification = 0.32 * (best_individual - a)  # Adjusted line for enhanced elite influence\n\n                dynamic_bias = 0.1 * np.sign(np.mean(fitness) - fitness[i]) * np.abs(best_individual - a)\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a) + elite_guided_factor + elite_amplification + dynamic_bias\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.03  # Slightly increased crossover rate for faster convergence\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced diversity through dynamic mutation and crossover adjustment in differential evolution.", "configspace": "", "generation": 87, "fitness": 0.20267695125613597, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.16.", "error": "", "parent_id": "8f81394b-4dad-4843-ae65-b2d042dc61c6", "metadata": {"aucs": [0.28155943571330666, 0.32838189782592475, 0.35377648407857865, 0.32363336050919633, 0.35898067457950533, 0.3841927357161853, 0.3342069922222829, 0.3783155343177942, 0.33041120369715093, 0.058945730116193085, 0.013653685832283213, 0.11007271612322744, 0.02431566188779266, 0.05913955364326029, 0.07698219857150235, 0.05525776755637346, 9.999999999998899e-05, 9.999999999998899e-05, 0.12747846753580416, 0.10416450380835196, 0.11226011033731598, 0.13093348031801366, 0.13908897609915383, 0.13757304985271335, 0.13726993440111723, 0.10413747829184394, 0.14460723765360928, 0.08540152921362787, 0.08660377901229399, 0.09799984348162782, 0.13118266141223178, 0.09328704281036404, 0.0989104471023069, 0.0835438971321586, 0.10340307203071042, 0.10874823388302579, 0.7070859660201306, 0.873546300324084, 0.7470080424475039, 0.6151029067135886, 0.8079347941700847, 0.7560136028559907, 0.8425133362366789, 0.7904865219377548, 0.8708374692624896, 0.28599864384070384, 0.26772164372561635, 0.2786686579752047, 0.2711161398325942, 0.29289336900561025, 0.2589259948581796, 0.296121409769148, 0.2734025386717308, 0.32456388207629594, 0.3142282446035052, 0.28522787746758227, 0.2738651697284836, 0.22658407698879623, 0.283547129011514, 0.45195290755670725, 0.49753143616191664, 0.2929233819665301, 0.319061599095237, 0.1391717534351068, 0.11422001584320729, 0.14546778637209812, 0.13118910074618684, 0.13719149283564147, 0.08150355559973854, 0.13615614403184462, 0.16455980764290867, 0.11186942361133201, 0.1612890670953484, 0.11126389359726507, 0.17763178830431792, 0.14429129001160113, 0.14910222372608462, 0.14070065101013918, 0.11180764083360462, 0.16591678395669474, 0.11029187815689034, 9.999999999998899e-05, 0.1358179716157385, 0.10375227538776999, 0.010576646560040759, 0.006475406613682622, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07747745549771368, 0.19081428036626147, 0.15202420033906505, 0.14212248539402628, 0.12165084263529824, 0.10771338933714092, 0.09757211614514327, 0.18689260817891007, 0.14929802078488497, 0.034299423108221316, 0.018910204146185938, 0.03129197053502397, 0.11125726034487393, 0.15234611108439133, 0.052832033678876344, 0.07999969538978025, 0.050773662012963516, 0.10922390963671347, 0.15954535942517722, 0.06878041709626015, 0.07519796976404292, 0.08135846218196097, 0.12224282050457769, 0.09114718718721415, 0.13455804538837002, 0.16361191447362777, 0.06622861609456654, 0.3089327389251869, 0.35194911713079835, 0.34699036143726514, 0.3451249667992423, 0.32209574169790045, 0.36132114202590815, 0.32588029549946773, 0.3416163213433181, 0.33150315138487785, 0.1006443386172956, 0.11103065495165432, 0.10931937479366949, 0.11760100072667301, 0.10918571631643681, 0.11831028539066446, 0.11834922730186881, 0.08134815110050908, 0.07847803900277395, 0.17370767811615173, 0.17344026227126574, 0.21798984396372345, 0.21732026995801978, 0.2054501181286933, 0.1583663179734034, 0.17478094182155124, 0.14159596453551027, 0.15149952638200537, 0.22193261106907192, 0.23210260846026332, 0.20710563677448568, 0.23416714986746323, 0.20902277667873803, 0.21679135770194013, 0.230915462141157, 0.2384233159626652, 0.21330910941175552, 0.19847333740598028, 0.18631472937303084, 0.194409318401227, 0.17153657829326907, 0.1809408817832523, 0.23762605461744113, 0.15160527981759497, 0.16950037419431863, 0.2008142171425813, 0.1793324513655854, 0.20205314080063486, 0.18772068009566478, 0.20201033256462875, 0.19657133375592184, 0.18355017145721997, 0.16963464085216406, 0.17914500449761528, 0.18764571697359844, 0.18036288475983253, 0.1865639808700308, 0.18548985448244626, 0.19235334844570529, 0.17967629148039233, 0.20546843845359042, 0.1813106963707536, 0.18817705734041323, 0.17986416475690747, 0.1680828725451733, 0.5135666799226782, 0.5004573067787803, 0.1808930104156875, 0.48165281806234683, 0.15750131467937667, 0.16503815294828328, 0.4254486495622368, 0.16977294376434038, 0.18902339078421249, 0.1871070704227945, 0.388746301951728, 0.25352624730618956, 0.17586163444269298, 0.32629843176372864, 0.16716600063825005, 0.19931082820954793, 0.43100578169658643, 0.17892356847434998, 0.18796807331170096, 0.18937942619505788, 0.18683568409856555, 0.2135749380374129, 0.17982134641989744, 0.1882676313421634, 0.18424060872355863, 0.20568880668582523, 0.08489558708766709, 0.09066815594885724, 0.09695455253875063, 0.08375504696607983, 0.07493005596119473, 0.1002975005469312, 0.09877619840376106, 0.08331093191133732, 0.09032190997344647]}, "mutation_prompt": null}
{"id": "6ce37dc8-d99c-4c92-9358-4ae5b8e71d1b", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                pop_diversity = np.mean(np.std(population, axis=0))\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean()) * (1 + 0.1 * pop_diversity)\n\n                scaling_factor = np.random.uniform(0.88, 1.12) * np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)))\n                mutation_factor *= scaling_factor * 1.022\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.15 * (best_individual - population.mean(axis=0))\n                elite_amplification = 0.32 * (best_individual - a)\n\n                dynamic_bias = 0.1 * np.sign(np.mean(fitness) - fitness[i]) * np.abs(best_individual - a)\n                mutant_vector = a + mutation_factor * (b - c) + 0.125 * (best_individual - a) + elite_guided_factor + elite_amplification + dynamic_bias  # Modified line\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.03\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced mutation and crossover strategies with dynamic adjustments for improved convergence speed.", "configspace": "", "generation": 88, "fitness": 0.20323926597883626, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.16.", "error": "", "parent_id": "4155d449-cdb3-490c-9e7e-3d756a5b265c", "metadata": {"aucs": [0.324598562527485, 0.32357048877474603, 0.36264166841690926, 0.3654273963541842, 0.35734467207302945, 0.3462393926860535, 0.30299186833893144, 0.29860557429078394, 0.36042245888200397, 0.0280405618995494, 0.029490458270223785, 0.1667873204717807, 0.046399253316948275, 0.04519797364456535, 0.18505926577939336, 0.051029439884445305, 0.006212177480865666, 0.045363047584998095, 0.11295450433185361, 0.11845644269098488, 0.09558038737866303, 0.11312334146142455, 0.1340534719677584, 0.13097248864319155, 0.11960357132812238, 0.10401916750688855, 0.1255996519202407, 0.07069370084750504, 0.1033095879062188, 0.11625804655196792, 0.10130370484335194, 0.11187768473227166, 0.09757768937261879, 0.07814121970954402, 0.09101073315944086, 0.09497761471212185, 0.7133596017296763, 0.8649382979035484, 0.8209275229408886, 0.6879067711716513, 0.739422096851711, 0.5751975735009078, 0.8165694330973647, 0.7873072280951445, 0.8610526675222019, 0.26441322209022833, 0.26039643257002687, 0.26035252343300264, 0.26657088252771943, 0.2830020979708494, 0.26535162818983504, 0.27725388126364947, 0.26806778255121044, 0.2820999775737325, 0.33019642930796267, 0.46513317629115736, 0.28247825083918043, 0.4814291899664207, 0.30944606145546627, 0.2237199307061839, 0.2125204705566811, 0.675664130078987, 0.23267463456941828, 0.12890960783451932, 0.1685094104693522, 0.1301885080861841, 0.12515457733622348, 0.14401140391851264, 0.08232245566504881, 0.15140045295820148, 0.20324213596523055, 0.10921828183212179, 0.17585737318230588, 0.12646642971170963, 0.15531305337501944, 0.12790707467408213, 0.13380824154604976, 0.15462497266541364, 0.10997568609346131, 0.15688526904208744, 0.11116664431955892, 9.999999999998899e-05, 0.057654857017087835, 0.046748160552620543, 0.12519314185302777, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09344109871604656, 0.18551619892490956, 0.1275084213513259, 0.1930607646920346, 0.13461179165618908, 0.11585929821455432, 0.10298605074560219, 0.07166811118979444, 0.11824271914023432, 0.04174307276898759, 0.017873318477808264, 0.029433889072351338, 0.1228430384877418, 0.07695724407547788, 0.042390533290441845, 0.079012508586353, 0.05779888996886107, 0.07265937501987685, 0.16372884540040555, 0.058854044536248096, 0.07898891924892837, 0.09263198171186071, 0.07451606159452362, 0.10336118265499139, 0.12952146393942732, 0.09122325227940853, 0.08462401112893458, 0.32302831441465774, 0.36348801029162503, 0.31839146757103454, 0.3106418186847665, 0.32368551845680804, 0.3315113234993017, 0.3131209655151941, 0.29716204166800264, 0.33061653094016974, 0.09262295479147231, 0.11151313502062898, 0.08866550972617204, 0.09069748240951936, 0.11955777014715274, 0.11803488501140669, 0.11237728594914131, 0.10692411663012769, 0.09178366908057489, 0.18426877743949122, 0.1910920047664033, 0.21812969418931405, 0.14120060014002334, 0.17253069773849916, 0.16604347647937034, 0.16033609568999363, 0.17754411441404372, 0.20790354890432405, 0.2497708751204627, 0.22296898064469328, 0.23539768645958525, 0.20838302728604452, 0.2530000562217677, 0.21861413901379512, 0.23359750054582662, 0.23228510725095652, 0.23700958334286149, 0.22343428457684855, 0.1859803776263026, 0.22517900631914, 0.17171423952484477, 0.21075142238704792, 0.20626386257164764, 0.1562029463186354, 0.15605582509275173, 0.20515165830415827, 0.17135668803226034, 0.19599723102521738, 0.17617766588190553, 0.18805224237050766, 0.1706130461712677, 0.21427507259301626, 0.17713959058680162, 0.18605667215067834, 0.18511921325542813, 0.18454913894538838, 0.17657459338671655, 0.17429420461702516, 0.18439463317352356, 0.23869549327215134, 0.20578066630551062, 0.18297649965290608, 0.18313865163044374, 0.18010005483665625, 0.16954863504605822, 0.4611792921089968, 0.5609501417435876, 0.1800045646561088, 0.4906993099732786, 0.14689990886768578, 0.1658066296548646, 0.378501437256201, 0.18030638806313293, 0.19152770103986527, 0.17900728675144506, 0.33279098127052953, 0.4692895539712686, 0.40365371845975606, 0.3641580088025774, 0.16748946436982826, 0.20200089454194425, 0.29416242750653054, 0.19583309303655227, 0.1840951386782479, 0.1869303925122865, 0.18683568409856555, 0.2135749380374129, 0.17982447124324985, 0.18649558924345222, 0.1971790681314084, 0.20568880668582523, 0.09577139996288353, 0.07761196585568064, 0.10379125202051387, 0.07082385414634917, 0.08410133049535085, 0.10248377031347078, 0.08792225814558075, 0.08421471930154623, 0.09000331990559574]}, "mutation_prompt": null}
{"id": "900ad39e-12d7-44e4-b474-f6e4b942d7be", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        successful_mutations = 0\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                pop_diversity = np.mean(np.std(population, axis=0))\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean()) * (1 + 0.1 * pop_diversity)\n\n                success_rate_mod = 1 + 0.15 * (successful_mutations / (i + 1))\n                mutation_factor *= success_rate_mod  # Adaptive scaling based on success rate\n\n                scaling_factor = np.random.uniform(0.88, 1.12) * np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)))\n                mutation_factor *= scaling_factor * 1.022\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.15 * (best_individual - population.mean(axis=0))\n                elite_amplification = 0.32 * (best_individual - a)\n\n                dynamic_bias = 0.1 * np.sign(np.mean(fitness) - fitness[i]) * np.abs(best_individual - a)\n                mutant_vector = a + mutation_factor * (b - c) + 0.125 * (best_individual - a) + elite_guided_factor + elite_amplification + dynamic_bias\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.03\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    successful_mutations += 1\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introduced adaptive mutation factor scaling based on current generation success rate to enhance convergence.", "configspace": "", "generation": 89, "fitness": 0.17717797200013413, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.15.", "error": "", "parent_id": "6ce37dc8-d99c-4c92-9358-4ae5b8e71d1b", "metadata": {"aucs": [0.2305054074966152, 0.234015299278176, 0.24218847907446772, 0.24329784775242946, 0.27852814622353916, 0.27379695117649383, 0.2397144146872927, 0.2551506731013585, 0.2541572384221509, 0.03965245109383608, 0.059338112674306664, 0.0740925321731929, 0.03753421394770062, 0.04736437060191745, 0.03292739630770669, 0.04712140440230672, 0.07959294475629775, 0.042093593826490694, 0.07878473983866696, 0.08976796243719531, 0.09422075245765882, 0.09111763156396901, 0.09432902556568801, 0.11157077797852566, 0.08495425560446745, 0.09773016280787017, 0.11309884513185642, 0.0696357711845722, 0.10359951243125942, 0.10972210690459672, 0.10191609023512482, 0.09638870898075058, 0.08247425885691972, 0.06978588375789585, 0.09307155025684932, 0.08506786083787343, 0.7675890505347622, 0.8660630927931501, 0.7945002881494816, 0.6893603304775023, 0.7455547136670324, 0.7023509053402915, 0.8219122751322163, 0.7892265958214398, 0.8611460286889239, 0.27314112308348926, 0.25019836837165, 0.24464880056064153, 0.2641836516564138, 0.2554269072440577, 0.240224544654574, 0.26241059557833624, 0.24489770369497932, 0.3048555882887797, 0.2811632452176498, 0.25284260289215255, 0.2703635625619407, 0.2294641860723463, 0.24983540848213248, 0.18675999979668745, 0.21251729291694332, 0.3468460673181816, 0.21680113072189766, 0.12056826262502895, 0.1645725633835322, 0.1176924569529123, 0.11227606125810707, 0.1331110346850679, 0.0820551981987957, 0.1365750701193501, 0.1742793569804535, 0.10736282850929235, 0.1658911431796528, 0.11724627358269879, 0.1440785153673776, 0.12677267766235711, 0.13123237078260697, 0.13589261848229595, 0.10901423021923218, 0.14017344147967392, 0.11038854624634153, 9.999999999998899e-05, 0.06465994275384912, 0.062447047651110754, 0.1202808136575293, 0.012462708500815323, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08817209059311004, 0.18116594343552206, 0.12437224596940577, 0.17512977314958478, 0.14275051033916974, 0.108435730609725, 0.10159388314981566, 0.07615325056045708, 0.1436084439766897, 0.04130208085388154, 0.017723009174203108, 0.029283430522208387, 0.10495226744687647, 0.07491566845546727, 0.04197296113668436, 0.07877784988713243, 0.057611387568254346, 0.07116633585509535, 0.10721890998569505, 0.054148986167829705, 0.06572382968320456, 0.08920176835006244, 0.07250704210583503, 0.09431222973893927, 0.10406695914462616, 0.0812844990942102, 0.08166372333362337, 0.2866663637264728, 0.25543162233126326, 0.25150029570021526, 0.27377958248282563, 0.2518266851678951, 0.2829029363600417, 0.25736876532152997, 0.2309594779386397, 0.28473123973020864, 0.07106354513719948, 0.10598448137371885, 0.07219263302808465, 0.09262227862420314, 0.10271116296089278, 0.08131378705220871, 0.09666516781396317, 0.09775194480286753, 0.07911489560081719, 0.1958890007949431, 0.14228592262610706, 0.14547163010848707, 0.15171305730746754, 0.14225219789747334, 0.13074332541895983, 0.14963138758589234, 0.13038258210145925, 0.146876859123931, 0.17639005038757205, 0.1950394600360209, 0.17070271312675545, 0.18200481165103288, 0.2173236313210536, 0.1783575138660346, 0.1852244968638046, 0.18475323325912874, 0.1726925050709428, 0.1685358215830205, 0.15224401403907817, 0.19474090639820185, 0.15883793752432707, 0.15179876062435727, 0.14667139935338114, 0.12762146986843093, 0.14963947142343992, 0.14900641601846842, 0.1693949637724379, 0.17853680309639208, 0.19164498777318595, 0.18269928789838974, 0.14892845758947137, 0.17464130041044923, 0.16361308293734622, 0.15956396551707308, 0.1673670759710183, 0.16608064444235937, 0.17497987151632244, 0.1739691238415345, 0.17412430594568906, 0.19214758514737773, 0.183633970259646, 0.18183862696129027, 0.17610868278838732, 0.1718012889284971, 0.26994497270262874, 0.3394973569271037, 0.3377710978987275, 0.17930668198404842, 0.1895430272313331, 0.14829434085340543, 0.15548791265608775, 0.23080823841565012, 0.179996851615856, 0.1871787919869624, 0.16570182966033187, 0.2958170452533371, 0.3147394822601741, 0.31079156972944944, 0.2446693412526305, 0.17427070388018184, 0.19641696077850423, 0.2212580639513998, 0.1799266243911516, 0.1840951386782479, 0.17960423470703968, 0.18683568409856555, 0.2135749380374129, 0.17713556713563217, 0.17956830623981346, 0.1846839700567996, 0.20568880668582523, 0.0822811084468349, 0.07931120941963987, 0.09727583394399131, 0.06963692255096199, 0.0784731602170281, 0.07960190642984111, 0.08509694664304135, 0.08460410830567211, 0.07772234556290936]}, "mutation_prompt": null}
{"id": "73aa5de0-4195-42ad-ae9a-d9cf49d55599", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.history = []\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                pop_diversity = np.mean(np.std(population, axis=0))\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean()) * (1 + 0.1 * pop_diversity)\n\n                scaling_factor = np.random.uniform(0.88, 1.12) * np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)))\n                if len(self.history) > 1:\n                    improvement = np.mean(np.diff(self.history[-5:])) if len(self.history) > 5 else np.mean(np.diff(self.history))\n                    scaling_factor *= 1 + 0.05 * np.sign(improvement)\n                mutation_factor *= scaling_factor * 1.022\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.15 * (best_individual - population.mean(axis=0))\n                elite_amplification = 0.32 * (best_individual - a)\n\n                dynamic_bias = 0.1 * np.sign(np.mean(fitness) - fitness[i]) * np.abs(best_individual - a)\n                mutant_vector = a + mutation_factor * (b - c) + 0.125 * (best_individual - a) + elite_guided_factor + elite_amplification + dynamic_bias\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.03\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n                self.history.append(trial_fitness)\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introduce adaptive mutation factor scaling based on historical population improvement to enhance convergence speed.", "configspace": "", "generation": 90, "fitness": 0.1973974103537606, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.15.", "error": "", "parent_id": "6ce37dc8-d99c-4c92-9358-4ae5b8e71d1b", "metadata": {"aucs": [0.33622605283533713, 0.3712576535139488, 0.4008174762663934, 0.2957687725462118, 0.3152093980807945, 0.31511601266461686, 0.3446121393424364, 0.29759015456043114, 0.36288780965353395, 0.027894234328963097, 0.02579542311109939, 0.15169234029890144, 0.04170858043982284, 0.041045796429110326, 0.12068490221741268, 0.04743381430109361, 0.0034267011304393025, 0.04574162052205444, 0.1132674705136808, 0.10759450002403825, 0.09963916388186966, 0.11455114803349209, 0.13189153730797953, 0.1301377684784133, 0.12049198803294126, 0.10448848057977433, 0.12736380474236508, 0.08377890063077831, 0.11472258242405897, 0.11559711720245447, 0.1028888342322869, 0.11068664520754323, 0.10632194758722158, 0.07246485364497113, 0.08816487222326375, 0.09511102499197444, 0.6749029949043089, 0.8559805355081034, 0.8106370389581397, 0.6887908401533661, 0.7393306990926167, 0.6289613579321095, 0.8165411896906605, 0.7872479146796147, 0.8610578579743551, 0.26585687645652256, 0.26869437433723087, 0.2689669208593527, 0.27030867833427463, 0.2788479927334533, 0.2608699374221951, 0.28185904625048275, 0.2696532459136163, 0.2773693813653878, 0.3138159869641103, 0.22880740871917393, 0.29686428886092653, 0.2955378483410849, 0.29264287464974137, 0.19286438834905784, 0.2727366441893311, 0.3428486424686926, 0.20989830418133215, 0.12717563594721526, 0.1696524358223951, 0.1327259719685624, 0.12535607305441432, 0.1465854618825364, 0.08223526642759693, 0.15240668810942115, 0.2042553190747044, 0.10910779238542123, 0.1730077174251926, 0.124405969577846, 0.16309371482749724, 0.12483373123624586, 0.13366354174515205, 0.15003277238749124, 0.10938472257279142, 0.15014052423238777, 0.11204203852951289, 9.999999999998899e-05, 0.06316455433413537, 0.0471990370338482, 0.12518405865844684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009096508202118825, 0.08761741602741346, 0.18429567741139485, 0.12480210799419855, 0.2174740655630385, 0.12319860438638153, 0.1212285041884692, 0.10413414130855414, 0.07168208139758359, 0.12489481831158777, 0.041729739436692004, 0.017875851871140713, 0.029416203784861095, 0.12306613331945426, 0.07696141409729784, 0.04239514101088804, 0.0789879955100865, 0.057799495659125344, 0.07264605762459209, 0.13012346128647334, 0.061368143301688494, 0.09604340825806534, 0.09606254512838663, 0.07902376206708073, 0.09858299848907648, 0.11974656970039144, 0.09011054783984984, 0.08565375188664315, 0.38016571510154407, 0.32336967312923093, 0.3497614251856287, 0.3155601451884844, 0.3048833261171524, 0.32600075261726613, 0.3210240450736255, 0.3380260571984388, 0.3250671207885124, 0.09075401050289733, 0.11973324815943087, 0.0923920509362075, 0.09346109261729418, 0.0902112286072575, 0.1149832919825805, 0.11844747661404076, 0.10359682988063301, 0.09207079863378043, 0.17442035048060278, 0.18588067727575852, 0.14188766556731114, 0.14735757100890257, 0.22998910356960967, 0.13951805212213453, 0.164408133829542, 0.20617016237967878, 0.18999494142332973, 0.25257935624662475, 0.20756794600448458, 0.24063204124529136, 0.2178328474055452, 0.22713453908059267, 0.22812307914777818, 0.2057202583833786, 0.21455512757040796, 0.22031409422713943, 0.20889607018057021, 0.1754335125871639, 0.22203036078707894, 0.2434976944106524, 0.1714332371406908, 0.2268182819160155, 0.14716905197575836, 0.16709795937233174, 0.19973970196195878, 0.18547136373988082, 0.17356186400811002, 0.19236967172828467, 0.18267584661702352, 0.18930098515843807, 0.17389324710011445, 0.18837455595606756, 0.17532359025176014, 0.18799970947585842, 0.17661886945459226, 0.1771241117315796, 0.1741774466600433, 0.18476705945296112, 0.19387645348099003, 0.20150043543784846, 0.1854428077518876, 0.1832493492123718, 0.17689389016955104, 0.18292087563668902, 0.42039081333954154, 0.5425264141007131, 0.17997687098427195, 0.18846404048357757, 0.4405024401511163, 0.1670817628805893, 0.3474672981824065, 0.18184974154830813, 0.1923205394627785, 0.1901408192061801, 0.38413588187813885, 0.32464813156846906, 0.36806261328541257, 0.29909880985303705, 0.16748476219468378, 0.19968880718725945, 0.2914175396547395, 0.1709972216364436, 0.19338111263362245, 0.17674882731269648, 0.18683568409856555, 0.2135749380374129, 0.19741298330221757, 0.17743119953581077, 0.19776969640620423, 0.20568880668582523, 0.0856179515471095, 0.07304853184931581, 0.09741608713788397, 0.07886204326449553, 0.07580493371179597, 0.09039510604093359, 0.08932496666654755, 0.09109257054985387, 0.08998034519154385]}, "mutation_prompt": null}
{"id": "b07aba11-9e6e-4a44-9730-b82c3dc11595", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                pop_diversity = np.mean(np.std(population, axis=0))\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + 0.98 * mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean()) * (1 + 0.1 * pop_diversity)\n\n                scaling_factor = np.random.uniform(0.88, 1.12) * np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)))\n                mutation_factor *= scaling_factor * 1.022\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.15 * (best_individual - population.mean(axis=0))\n                elite_amplification = 0.32 * (best_individual - a)\n\n                dynamic_bias = 0.1 * np.sign(np.mean(fitness) - fitness[i]) * np.abs(best_individual - a)\n                mutant_vector = a + mutation_factor * (b - c) + 0.125 * (best_individual - a) + elite_guided_factor + elite_amplification + dynamic_bias\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.33 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.03\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Slightly adjusted mutation and crossover rate dynamics for improved adaptive behavior.", "configspace": "", "generation": 91, "fitness": 0.19659159912968482, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.15.", "error": "", "parent_id": "6ce37dc8-d99c-4c92-9358-4ae5b8e71d1b", "metadata": {"aucs": [0.315754485849464, 0.3117653311437544, 0.331348546884618, 0.3084105151429799, 0.3260904888903068, 0.34506300010870683, 0.3156343609244673, 0.2930629505375434, 0.33474854014644506, 0.027753736202359103, 0.08499873396284052, 0.1645248793601357, 0.040016969819892445, 0.04198244702937681, 0.1719979396898621, 0.07162163232328445, 0.0032538283158910497, 0.04178447083611392, 0.11320145303981466, 0.17675127781314037, 0.09273216984401311, 0.10900853444133773, 0.12285597513330782, 0.14157635905185184, 0.0942879488311058, 0.10538253625378824, 0.1285651180400027, 0.08548501024943411, 0.11190700726563774, 0.11577590669282622, 0.11282440270389194, 0.11324979868381269, 0.09876616909278668, 0.07545786797287235, 0.0891652395793171, 0.08173814719586281, 0.6708340179481598, 0.8647180529566464, 0.7799105549243719, 0.6879544845313426, 0.7396242144709161, 0.5770176687799337, 0.8184146137377144, 0.7617146619325552, 0.8610672146615864, 0.2851563921378002, 0.2510896945033022, 0.26068240367446793, 0.26093367516350585, 0.28753203132952265, 0.2647748530039258, 0.2773502534004545, 0.2646642386608884, 0.2949871400204451, 0.3138159869641103, 0.2623743928086476, 0.4561241020131598, 0.28845784463896784, 0.2921808604760051, 0.19432766381980304, 0.2125204705566811, 0.3428486424686926, 0.21311470560796975, 0.12892084302419116, 0.16960173810254164, 0.13154669227917015, 0.12574136174871142, 0.14029997977409892, 0.08223880628761049, 0.15331295105579612, 0.21192569211090106, 0.10877786167506143, 0.17685784052568665, 0.12775131236253, 0.15992130146550898, 0.1321409059119687, 0.1332400202814873, 0.14901174858043564, 0.10952869060469106, 0.15327317382312844, 0.11106749877709832, 9.999999999998899e-05, 0.04749875344719001, 0.046732098237024955, 0.12495068706468138, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0015762884298956559, 0.08912551641046651, 0.1851549828604342, 0.12496836898976182, 0.19260389369670028, 0.13461211240850557, 0.11979369058144129, 0.1034113788980594, 0.0716692179374755, 0.11748871405275219, 0.041097059572696715, 0.01773175597917742, 0.029382530545988272, 0.11997170470131058, 0.07628104430762028, 0.04202702469875441, 0.0750431908340804, 0.05575609819534877, 0.07231479693121656, 0.14285960320644697, 0.06582710131682956, 0.06887869251600254, 0.09274363639857097, 0.08709051606488771, 0.10487274756548082, 0.13539341743028876, 0.08965662639258554, 0.08491732482764947, 0.3268555800106654, 0.3474508272299469, 0.32760501385395113, 0.3242787755327302, 0.3154700111043156, 0.34346787312287774, 0.31032831063515176, 0.3170231715144688, 0.35911397411612056, 0.09701394650781259, 0.11838240007252332, 0.0959358854774629, 0.09475007197384533, 0.09613008164434411, 0.1103829890758703, 0.11554842388798148, 0.10867662451179727, 0.09176660923200874, 0.1930071086564401, 0.1732512493512791, 0.18297515172611645, 0.17109838445504155, 0.14778688770915227, 0.1502345117606012, 0.16106785222435793, 0.13532843480891243, 0.1500593927824917, 0.23874314419187537, 0.2071169016030664, 0.23169966895297367, 0.16867028167428577, 0.2208804321614607, 0.2243790848162176, 0.2072965560721184, 0.2525707952160283, 0.19435900545092155, 0.18888894020329572, 0.15916650346645544, 0.21968399703309083, 0.1981523910607076, 0.1534287777376696, 0.2162954713181957, 0.1649939919196246, 0.15292778284621067, 0.20868323211640893, 0.15649885713625522, 0.17851596859875407, 0.18026924133506095, 0.18629817580858166, 0.16098376728219133, 0.19002884231750827, 0.18448715044108022, 0.1929634479358362, 0.17927018885738, 0.17278905437175274, 0.1768092338202767, 0.1744688822774002, 0.1845195762650823, 0.20723636748067287, 0.19431760870085601, 0.18292097252531703, 0.1830772274118272, 0.17567696082860407, 0.48028565309139626, 0.5422185975373219, 0.45381729608500854, 0.18041897616676017, 0.1867094121974393, 0.1492523320169885, 0.16563836404054966, 0.47632121761053825, 0.21672412834366828, 0.18822840356584036, 0.18030052564725174, 0.4198391151235249, 0.3890965638198831, 0.18158421083013832, 0.18538970342250938, 0.16740626878870735, 0.20111916064670066, 0.39109005219490256, 0.17874613279651408, 0.19036601259588315, 0.18821147014284756, 0.18791401743256186, 0.2135749380374129, 0.19107807958265943, 0.1871967814513823, 0.1777104812060557, 0.2060000472546205, 0.0808047422449748, 0.07334637729162274, 0.1067005035015074, 0.07393396230848726, 0.08647004733325792, 0.10447613169366887, 0.09379123590572858, 0.0995539662686924, 0.08458887248723823]}, "mutation_prompt": null}
{"id": "4db32818-abc9-418d-b9fb-126bd7a12019", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                pop_diversity = np.mean(np.std(population, axis=0))\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                adaptive_scaling = 1 + 0.05 * (pop_diversity / (np.mean(np.abs(population), axis=0) + 1e-30)).mean()\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean()) * (1 + 0.1 * pop_diversity) * adaptive_scaling\n\n                scaling_factor = np.random.uniform(0.88, 1.12) * np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)))\n                mutation_factor *= scaling_factor * 1.022\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.15 * (best_individual - population.mean(axis=0))\n                elite_amplification = 0.32 * (best_individual - a)\n\n                dynamic_bias = 0.1 * np.sign(np.mean(fitness) - fitness[i]) * np.abs(best_individual - a)\n                mutant_vector = a + mutation_factor * (b - c) + 0.125 * (best_individual - a) + elite_guided_factor + elite_amplification + dynamic_bias\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.03\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introduce adaptive mutation scaling based on population diversity to enhance convergence speed.", "configspace": "", "generation": 92, "fitness": 0.1998017706641452, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.16.", "error": "", "parent_id": "6ce37dc8-d99c-4c92-9358-4ae5b8e71d1b", "metadata": {"aucs": [0.3001775773759747, 0.37277748540286737, 0.33302906267394183, 0.33620129783928665, 0.30572443516078085, 0.37500215691795924, 0.3418499421372506, 0.3395496905122173, 0.31558336449083757, 0.027860531998990856, 0.029560912626892644, 0.21184405581143761, 0.03902310502687556, 0.04425716633909016, 0.15770638430516615, 0.05231491027086099, 0.006102224478315099, 0.04546496566631453, 0.09044788173324159, 0.10831673842594369, 0.09186539821550255, 0.1165672478023162, 0.12647540388540457, 0.13282656083356092, 0.12026802938054282, 0.12132921908067962, 0.12746869310481868, 0.07811879755954687, 0.11718973463938254, 0.11470014249547766, 0.10341296595933014, 0.11467501904340094, 0.10107834040879204, 0.07734701920721676, 0.08802445869481779, 0.08979251412715716, 0.7680872160662187, 0.8661079869148989, 0.811055434196654, 0.688965036026067, 0.7395644073020025, 0.6074761522718516, 0.816583055630546, 0.7873814401529781, 0.8611176394590974, 0.26571583579871605, 0.26031260952279245, 0.2826492146665117, 0.2649013727055368, 0.2763365050876203, 0.26276313408825536, 0.27754897838756776, 0.26834025249592364, 0.28223976992189315, 0.32897611888465594, 0.28269649129003827, 0.2729689783376046, 0.30036662577659334, 0.29679142916801593, 0.22134540628687127, 0.26146154006973943, 0.6756377671490166, 0.23354750087460818, 0.12931258949620716, 0.1682327337395776, 0.1289551909730492, 0.1272453068325483, 0.14304010937021538, 0.08238531934793625, 0.14853978276958224, 0.2055393850006132, 0.10897506677726176, 0.17199994992992684, 0.12058965637418984, 0.16144992593455387, 0.13582452444464455, 0.13305908190211901, 0.14826723707285783, 0.1093390365669642, 0.1508038068453843, 0.11282055439068628, 9.999999999998899e-05, 0.05154787574701336, 0.04707515306568277, 0.125195910172464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08783667317933319, 0.18626071917502962, 0.12478807192040753, 0.19130142842989084, 0.13419823925154084, 0.11957314129164731, 0.10277960602207492, 0.07167048345279159, 0.12777747185634014, 0.0417430753040009, 0.017873319383725716, 0.029433890288291464, 0.12284431164054999, 0.07695760182926203, 0.04239056172382494, 0.07901206793969717, 0.05779888979606718, 0.07265939116891695, 0.16450028855136312, 0.06071747651194492, 0.07682108805964871, 0.09352158884483253, 0.07577532247544383, 0.10867521275597569, 0.13041489834827336, 0.09408522625515436, 0.08549802472344614, 0.3340765068000575, 0.3487428700512535, 0.29922919338030973, 0.33896056986994694, 0.32343595923957114, 0.35098848252869974, 0.3381088958427503, 0.29787533046987447, 0.311042979824832, 0.09128393851255168, 0.10924160747200329, 0.0866021079308239, 0.10415015787113302, 0.10646291980316058, 0.10737288010244261, 0.1565891080491063, 0.10400720333160385, 0.09189537201373055, 0.18978448830341044, 0.15620654062044326, 0.14850925752362476, 0.14576081317934808, 0.14508223561715006, 0.16110805516426663, 0.1639605387865387, 0.20103556299277137, 0.20299929179364717, 0.21784739059392844, 0.19058933885364893, 0.2214977332090009, 0.21710542043774306, 0.22304238700261592, 0.21662785185110323, 0.2217003264536358, 0.22083008646035862, 0.189515636276954, 0.21177400267149027, 0.1810798876084817, 0.22666787938821376, 0.18592092169235952, 0.23708089160304124, 0.1885920347332215, 0.15258929491333872, 0.174871951812696, 0.18769856118174721, 0.16420405511922964, 0.19315463373721475, 0.18451647233521784, 0.20250230934303004, 0.17788883524665866, 0.18474927870908164, 0.17816192884193438, 0.19981328388092023, 0.1985465559919628, 0.18514650112352626, 0.17603058341391975, 0.17374254819337298, 0.18439610169358944, 0.19595439190988895, 0.1864555355724411, 0.1830195179634757, 0.18237243915600876, 0.1810500868487548, 0.2505903899060058, 0.4995414678192739, 0.4380297257773962, 0.18014568589273017, 0.1870682284643438, 0.459089294682241, 0.1597424745872127, 0.3665803996937962, 0.2704659374138729, 0.1894646571641172, 0.1854052876158664, 0.3240203343639114, 0.303508735419153, 0.3208279065708085, 0.280704486017303, 0.16746636039784568, 0.20159646724673874, 0.34439820781719266, 0.17618462774688193, 0.19367412264798323, 0.17569706065486113, 0.21656838569845116, 0.2135749380374129, 0.1794160348402416, 0.17333705442378922, 0.19024938698938776, 0.22899084741601428, 0.07999441090126402, 0.07414102819009472, 0.1015942327138879, 0.08091489259650864, 0.0747805400502981, 0.09785134500326553, 0.09198276139585615, 0.07526502773542143, 0.09049259756765116]}, "mutation_prompt": null}
{"id": "1f5a5e37-b865-4455-8aef-f5f121b2f189", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                pop_diversity = np.mean(np.std(population, axis=0))\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean()) * (1 + 0.1 * pop_diversity)\n\n                scaling_factor = np.random.uniform(0.87, 1.13) * np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)))  # Slightly adjusted range\n                mutation_factor *= scaling_factor * 1.022\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.15 * (best_individual - population.mean(axis=0))\n                elite_amplification = 0.32 * (best_individual - a)\n\n                dynamic_bias = 0.1 * np.sign(np.mean(fitness) - fitness[i]) * np.abs(best_individual - a)\n                mutant_vector = a + mutation_factor * (b - c) + 0.125 * (best_individual - a) + elite_guided_factor + elite_amplification + dynamic_bias\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.03\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introduced a dynamic scaling factor adjustment based on population diversity to enhance convergence speed.", "configspace": "", "generation": 93, "fitness": 0.19984721306885048, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.16.", "error": "", "parent_id": "6ce37dc8-d99c-4c92-9358-4ae5b8e71d1b", "metadata": {"aucs": [0.3433503471104967, 0.3278887690225383, 0.2973466082892773, 0.31463696289707466, 0.3957472661195043, 0.3249914807497233, 0.32142434635319816, 0.3462962841820999, 0.38760360084146805, 0.02815386466988512, 0.029824268021860778, 0.1676292232733183, 0.04072609180930753, 0.046414268393390024, 0.163353086148062, 0.05093982448218082, 0.00595309084420681, 0.053072313224672873, 0.09494035165404824, 0.11974849498044571, 0.08893934828501482, 0.11850234171052176, 0.11032851123847154, 0.13298980797394722, 0.11641999851878504, 0.10014723421589311, 0.12816483446857563, 0.07781579428250662, 0.10403112953586735, 0.1168661963612212, 0.10689842169550523, 0.11153349178251915, 0.09972368784485841, 0.07734061211957144, 0.09048152082642313, 0.09499257129528871, 0.7018948803495744, 0.864959758650061, 0.8111754311906613, 0.6879075399073571, 0.7393104538605324, 0.573592135693419, 0.8165696825345456, 0.7872995889137662, 0.8610560353792398, 0.2663192745205978, 0.26038787494155247, 0.26050393511320913, 0.2613329131448441, 0.2958104567267149, 0.26525100892800113, 0.28275177638371685, 0.2679624195854844, 0.2819830310859809, 0.31566789273036966, 0.28161311087538865, 0.2793368747917755, 0.2940302436590947, 0.47687366606875403, 0.22003916683709812, 0.2557177147099211, 0.6756377671490166, 0.21093801627633024, 0.12978533674232495, 0.16912805896633742, 0.12816936838406423, 0.12474333615301747, 0.14194950126120454, 0.08228247786877618, 0.14802078023582654, 0.20065212321096526, 0.1093835677619629, 0.17299798518502973, 0.12637711819681685, 0.15626985340879018, 0.13197402772015854, 0.13320533249099786, 0.1507273683027488, 0.10969056960438306, 0.15084448193009414, 0.11148232131462354, 9.999999999998899e-05, 0.05596147263463047, 0.04668095195762745, 0.1251935157051034, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0846993919076463, 0.1883955553972353, 0.12588903013187902, 0.19442912707519133, 0.13407434595926337, 0.11673461692422793, 0.1027050224752758, 0.07166731816714378, 0.1232091891933147, 0.041732200273076336, 0.017873809390670625, 0.029418374795408098, 0.12252239015783051, 0.07701200686575171, 0.04238934722568155, 0.07899938385957939, 0.057798991482734485, 0.07265922090630916, 0.14061154911959695, 0.060085490572096556, 0.07752667978757566, 0.09340676232274092, 0.07394355397444685, 0.10222811590015102, 0.12975169025762112, 0.09090510420585018, 0.08406558418325372, 0.3277110198739942, 0.3176486485407518, 0.2958046902514543, 0.3089117598118851, 0.35561006625524594, 0.3345841008974516, 0.3374319807773132, 0.3105275997437571, 0.3116500146094494, 0.08959218399375679, 0.11250672200185896, 0.08734090521692284, 0.09265226559538353, 0.11820303114971398, 0.11793571177823337, 0.1117721294990568, 0.10072395637525, 0.09166354729131998, 0.20110297551078515, 0.15627334648361013, 0.15824652084161517, 0.16427446041227545, 0.16193518616488123, 0.1566172928870896, 0.16014992729064148, 0.23010131939713951, 0.15675018349933323, 0.22875712162004702, 0.21425906838076048, 0.23086782699236486, 0.22927596441605647, 0.24998749107262286, 0.21389956848603475, 0.22681604724354743, 0.21310713278227555, 0.23871421780649416, 0.18329348535193368, 0.1994497373529016, 0.23384933649093398, 0.19271235476896076, 0.20513509288374776, 0.20600463239260658, 0.16275043670298328, 0.17350063388752424, 0.1751930653931909, 0.1775251442787934, 0.1916553218659668, 0.19230952393984613, 0.19119816582082416, 0.19726953083491738, 0.1929363053261518, 0.18918462010602632, 0.17184113101130605, 0.17258833035168897, 0.1775960506356008, 0.17262331286974564, 0.1742584662731228, 0.18468756275619647, 0.1963603796072072, 0.21512520386767475, 0.18299067799121194, 0.1831523373208872, 0.18035635693801177, 0.390381146879632, 0.5178682424460654, 0.4772968597217593, 0.180376323790423, 0.18264744717677706, 0.14670441612105356, 0.16516781950937443, 0.3438509130831441, 0.1795387567864507, 0.18824206279401368, 0.18022946572946474, 0.39778507114246753, 0.393560330093899, 0.3208243319666103, 0.2993778219481297, 0.16752998002464248, 0.20072732107113977, 0.32584044972737136, 0.1877678840639606, 0.22275061088855397, 0.19003843735366466, 0.19363879293687192, 0.2135749380374129, 0.18056028902617383, 0.1787406052790984, 0.18695940770009545, 0.20568880668582523, 0.08067058564340657, 0.08012590351171855, 0.0944554638565065, 0.0755490093300546, 0.07331901086911097, 0.1034216334663699, 0.10138867169350019, 0.09436210483672125, 0.08509182893413203]}, "mutation_prompt": null}
{"id": "9cb0b856-ae44-484a-bbbd-b1948b11ac8e", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                pop_diversity = np.mean(np.std(population, axis=0))\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean()) * (1 + 0.1 * pop_diversity)\n\n                dynamic_scaling_factor = np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)) + 0.05 * pop_diversity)\n                mutation_factor *= dynamic_scaling_factor * 1.022\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.15 * (best_individual - population.mean(axis=0))\n                elite_amplification = 0.32 * (best_individual - a)\n\n                dynamic_bias = 0.1 * np.sign(np.mean(fitness) - fitness[i]) * np.abs(best_individual - a)\n                mutant_vector = a + mutation_factor * (b - c) + 0.125 * (best_individual - a) + elite_guided_factor + elite_amplification + dynamic_bias\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.03\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introduced a dynamic adaptive scaling for the mutation factor based on population diversity to improve convergence.", "configspace": "", "generation": 94, "fitness": 0.2040715729830276, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.15.", "error": "", "parent_id": "6ce37dc8-d99c-4c92-9358-4ae5b8e71d1b", "metadata": {"aucs": [0.354568726716456, 0.30295785021738886, 0.34130192575420903, 0.30267802162185486, 0.4055499388899033, 0.3185565890545081, 0.337982004160979, 0.33742666645171504, 0.3389091310500607, 0.17234529731213477, 0.09161791163028488, 0.15605518718782552, 9.999999999998899e-05, 0.1725362490901673, 0.05776152414359326, 0.24249498968254724, 0.10768624897067802, 0.11629152506063767, 0.11699053473332499, 0.11523185166354688, 0.09615592931468364, 0.10674968508549243, 0.13520942175597772, 0.10618988482024583, 0.09164775929880142, 0.0866728703369043, 0.11665920458609957, 0.08691423505785623, 0.09196823192761494, 0.09574423285126288, 0.09060511792593262, 0.09010583949044726, 0.11783929015828676, 0.07722376300508116, 0.10993572193130108, 0.08935941798335212, 0.7096085109434628, 0.8170263660798684, 0.8232129457393772, 0.7345527986377705, 0.7052931995831848, 0.7173179328384685, 0.8454221269548646, 0.8388528137579625, 0.8580606671402186, 0.2713917207145897, 0.30307925776568834, 0.2938141040125831, 0.2761637970660822, 0.26625352028303917, 0.2490627900941702, 0.30150907360544754, 0.27883201750736286, 0.3067421923069016, 0.28829503928930356, 0.29738223903295247, 0.27069251138908546, 0.4820142816114139, 0.29180268235605966, 0.29776904463335363, 0.2068263543174942, 0.22571945509291325, 0.21415850787051316, 0.21292586878279862, 0.15617523707184844, 0.24824548302403815, 0.11067242227016072, 0.14858986714155198, 0.08419551437506412, 0.16824935129951268, 0.12728358278543495, 0.12489784643243407, 0.10641504490787279, 0.1131047208342677, 0.12407741847790565, 0.13110520827225025, 0.13859327257398546, 0.11032547900124212, 0.20481090481808584, 0.17110695029556222, 0.2598935740056144, 0.05765002032272293, 0.08416260365664019, 0.0673217331088124, 0.04565800734630976, 0.05230135656544865, 9.999999999998899e-05, 0.009887137968034088, 0.04754219564837692, 0.025684398252379115, 0.0981561938048151, 0.22439750643903256, 0.10568847483512056, 0.09212558148935879, 0.1152027048750428, 0.045495061094068645, 0.10190891398901225, 0.2367993247797634, 0.0737613785922524, 0.13841686212705973, 0.039526902301338485, 0.029404509597395156, 0.07214043003037374, 0.042001453161633284, 0.06216282552460051, 0.06437844961720562, 0.09645755994956706, 0.08252907178842672, 0.11023299609806636, 0.10769564723168801, 0.0850847455306808, 0.09157382906897016, 0.08962295753176364, 0.14016297029529656, 0.09086098431013556, 0.14505468065392835, 0.0943023156039231, 0.3096196109974919, 0.325320439039837, 0.31299317658357395, 0.32876268218324634, 0.33385539197249714, 0.32836034857291774, 0.35167948786672376, 0.30830249796710285, 0.319871913923215, 0.07802738606697857, 0.1422474913943752, 0.0804147331071452, 0.10507004209711301, 0.1186674341908096, 0.09391425209720383, 0.11111992987625852, 0.12109991794385166, 0.13105065401234783, 0.17606432652766502, 0.13725502053460836, 0.1869879770791848, 0.16821539659156914, 0.1587797769233823, 0.16311222428997152, 0.16239039499297048, 0.14785756384690563, 0.16083543760895258, 0.20616909016233298, 0.2247435003855669, 0.21997223995040205, 0.21856450244200487, 0.2352597721925993, 0.1753361458263435, 0.20908259458052303, 0.22854503945563343, 0.22991142109622065, 0.19072723981883388, 0.2079657761143432, 0.22498969065920105, 0.164228467655122, 0.20434431324076285, 0.17753743435458036, 0.16504270777298558, 0.20288537574204935, 0.21683953413005452, 0.18107302696247585, 0.194435699131295, 0.18186581578589678, 0.2398807147464237, 0.18661917548920337, 0.19879594570946946, 0.20435534132703126, 0.19791061895957773, 0.19232168142983586, 0.19119431260731923, 0.19512334346029037, 0.18367730465134247, 0.1775008555463412, 0.20531994016731292, 0.19351149545002444, 0.18522550647799896, 0.19897325442806402, 0.18240604320032772, 0.44562145864277203, 0.44480474644283574, 0.4164778357491582, 0.18012857224771228, 0.18551468376492986, 0.14942596581545642, 0.3986120787871077, 0.3584294106452146, 0.17810375879267581, 0.1885483349123278, 0.18112312855983648, 0.36187760279230186, 0.4298396072840104, 0.18087058146791268, 0.21475316141414424, 0.16778972215824395, 0.1958196385721792, 0.34182975902479407, 0.1890426240124473, 0.20941363366822607, 0.18754045010021614, 0.18885202429014958, 0.2135749380374129, 0.1799199420026607, 0.18714346278045346, 0.19808114548763267, 0.20952727895586087, 0.08267215549126428, 0.08817629178961484, 0.0817042938717748, 0.07933489969213481, 0.08230823780064744, 0.09988028943835836, 0.10161684255105519, 0.09328109776272109, 0.07861142102586904]}, "mutation_prompt": null}
{"id": "21f19016-7656-4cc8-a67b-ec4affb2bedc", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                pop_diversity = np.mean(np.std(population, axis=0))\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean()) * (1 + 0.1 * pop_diversity)\n\n                dynamic_scaling_factor = np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)) + 0.05 * pop_diversity)\n                mutation_factor *= dynamic_scaling_factor * 1.022\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.15 * (best_individual - population.mean(axis=0))\n                elite_amplification = 0.32 * (best_individual - a)\n\n                dynamic_bias = 0.1 * np.sign(np.mean(fitness) - fitness[i]) * np.abs(best_individual - a)\n                mutant_vector = a + mutation_factor * (b - c) + 0.125 * (best_individual - a) + elite_guided_factor + elite_amplification + dynamic_bias\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                fitness_variance = np.var(fitness)\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor * (1 + 0.1 * fitness_variance / (np.mean(fitness) + 1e-30))\n                self.crossover_rate *= 1.03\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introduced a dynamic adjustment for crossover rate influenced by fitness variance to enhance convergence speed in diverse landscapes.", "configspace": "", "generation": 95, "fitness": 0.19450687470870132, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.16.", "error": "", "parent_id": "9cb0b856-ae44-484a-bbbd-b1948b11ac8e", "metadata": {"aucs": [0.3273992191842503, 0.3548709115575245, 0.35052065735383797, 0.41323947106012915, 0.3555246969882, 0.344343221654284, 0.2782335476941509, 0.28649817625088503, 0.3463280204726231, 0.10493532584007503, 0.07292648004724056, 0.06447073874246123, 9.999999999998899e-05, 0.08482456514043302, 0.03734921178414774, 0.23675311168959534, 0.0860524669353464, 0.06219918004575631, 0.03210685975987404, 0.04496310970400286, 0.02494238013514405, 0.11977060031608011, 0.14317582715007704, 0.09306444382218837, 0.08225971788531006, 0.10464172287723361, 0.11601606274188181, 0.050938969760264574, 0.04034297690495692, 0.048800928283272316, 0.08369208566630937, 0.08215177152406394, 0.11250141174541017, 0.08929772284525994, 0.09569749950890616, 0.08958785109763334, 0.7096085109434628, 0.8170263660798684, 0.8232129457393772, 0.7345530289413176, 0.705402830223337, 0.6987062670382845, 0.8778272816892114, 0.855140271335448, 0.8677486714616749, 0.29527558987971647, 0.2854083136320038, 0.2938141040125831, 0.24371576078581447, 0.2663948738127747, 0.2770971618400411, 0.2730221352612415, 0.2119505296800539, 0.2906954097501937, 0.29123047329129315, 0.27143049020585575, 0.24765340850641793, 0.47790764359036475, 0.476856281778699, 0.29740203699173773, 0.20475637666840008, 0.2673285384073423, 0.21415850787051316, 0.22386132540280712, 0.15158613168923274, 0.2661971289574898, 0.07605608486670223, 0.11971274471454674, 0.07888267628938406, 0.17086922523068515, 0.13460057837864114, 0.1257987076878846, 0.10750262719124781, 0.1135126056431569, 0.12768481754812233, 0.14118822325960356, 0.13856215894018697, 0.11040196671358093, 0.20419192692942156, 0.17528004044608592, 0.29240321493154375, 0.05371590404488957, 0.08322894753517052, 0.05929399844751093, 0.04571827498174985, 0.057549795860507014, 9.999999999998899e-05, 0.002915967165012301, 0.051777407333174263, 0.024944205718157586, 0.09925435162866436, 0.24569062804589692, 0.10568847483512056, 0.09043457160572921, 0.11406155455107947, 0.045481500093837335, 0.08023720814896573, 0.23541106859092653, 0.0744517385294583, 0.10790370803025895, 0.04020893021137162, 0.03027151241799042, 0.07710001546210643, 0.04299545486987422, 0.06411399985413846, 0.06541454549639891, 0.10112647575159339, 0.09163430155468066, 0.10467068617448527, 0.10580606917486457, 0.07162307677886803, 0.10011345408660421, 0.08251469099381592, 0.14021467099602136, 0.06450958133859308, 0.059451147771347856, 0.0397170281814877, 0.3227151962206295, 0.3090711160181069, 0.27719657198960235, 0.2055799784281095, 0.1714511066506922, 0.19226744717352073, 0.316223353380807, 0.27216382962463714, 0.3081879370525056, 0.07742147347266237, 0.10112585239641214, 0.07589450970542655, 0.09520687885600965, 0.10222418936257549, 0.09640900432680866, 0.09589586846653853, 0.1177012811674173, 0.13105065401234783, 0.2162011188541273, 0.12919566650327874, 0.22465657876978662, 0.1549663478444291, 0.13511880823300437, 0.15174520980198558, 0.16612620833582692, 0.18517788979147698, 0.14896704236641212, 0.21942313176662787, 0.2051662807562229, 0.19320860447801025, 0.1859454965028241, 0.2032525112390826, 0.2221005680906778, 0.23796178149234748, 0.21965611022460751, 0.19775459217602664, 0.16970444167674892, 0.1661507655501997, 0.17877222023345662, 0.15493001453396704, 0.21224126362003692, 0.16497012165160319, 0.17462894283033892, 0.1757062207008021, 0.22476949919676636, 0.1554841705851726, 0.15712255771619998, 0.15238251571180828, 0.2398807147464237, 0.18081309981330718, 0.19131658560120757, 0.16672646141021885, 0.17396068627992933, 0.18488654121272385, 0.16163242482275186, 0.1738018950125919, 0.16280116932241784, 0.18365089257550093, 0.20544600730760942, 0.1990250975232366, 0.18724020988529244, 0.20000400711317323, 0.1823106331543939, 0.17177590502023055, 0.4766576663448162, 0.5216392917019589, 0.18012857224771228, 0.18548459261994388, 0.14942432816661055, 0.3832216244706308, 0.3330025756996565, 0.16947991250500494, 0.1876119465688475, 0.18112312855983648, 0.3494284148448078, 0.40434101681795565, 0.18087058146791268, 0.288128145396196, 0.16772193755206666, 0.1851943657351507, 0.21710909207950657, 0.18948447058400442, 0.21918910419646453, 0.18787005455278838, 0.18885202429014958, 0.2135749380374129, 0.1799199420026607, 0.17970054336258656, 0.17987057504604942, 0.20952727895586087, 0.09561616234859793, 0.08139480298135804, 0.09958864142872204, 0.07672127184113564, 0.0879919430963293, 0.10778475727488801, 0.10614210959919457, 0.09631320844295899, 0.08334877125352336]}, "mutation_prompt": null}
{"id": "ef824f43-8e6e-404d-9b80-938e7e1f8d36", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                pop_diversity = np.mean(np.std(population, axis=0))\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean()) * (1 + 0.1 * pop_diversity)\n\n                dynamic_scaling_factor = np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)) + 0.05 * pop_diversity)\n                mutation_factor *= dynamic_scaling_factor * 1.025  # Slightly increased factor\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.15 * (best_individual - population.mean(axis=0))\n                elite_amplification = 0.32 * (best_individual - a)\n\n                dynamic_bias = 0.1 * np.sign(np.mean(fitness) - fitness[i]) * np.abs(best_individual - a)\n                mutant_vector = a + mutation_factor * (b - c) + 0.125 * (best_individual - a) + elite_guided_factor + elite_amplification + dynamic_bias\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.03\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced adaptive differential evolution with minor adjustment in mutation factor calculation for improved convergence.", "configspace": "", "generation": 96, "fitness": 0.20368387057403384, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.15.", "error": "", "parent_id": "9cb0b856-ae44-484a-bbbd-b1948b11ac8e", "metadata": {"aucs": [0.3330763887254802, 0.31600348355303876, 0.3356828448527618, 0.3226049560277884, 0.3371996998398915, 0.2857738132548622, 0.3182141118852908, 0.33207262098151547, 0.3625411219710626, 0.19457329688101255, 0.09166584302816305, 0.2086887469821469, 9.999999999998899e-05, 0.17800565042216598, 0.05499430398930505, 0.23255135053169873, 0.10893540782264921, 0.1210795445469528, 0.1250513590118577, 0.12349942412211057, 0.09299057499741537, 0.10676831642703577, 0.1360649154031638, 0.10251536750751189, 0.09136915815962698, 0.08886828297046612, 0.12438379286718171, 0.08761714681375632, 0.0920149529259976, 0.10163385970338312, 0.09233205861472016, 0.09058921884266857, 0.11958375618345729, 0.07736935627944963, 0.11345903771418309, 0.08655896052123757, 0.7780285282185972, 0.8149336219605917, 0.8097579084307204, 0.7345563581550806, 0.7056453981414634, 0.7173115477198354, 0.8454312533379824, 0.8388533062495396, 0.8580599645379284, 0.26118918201843, 0.3030772788999285, 0.2938140956882658, 0.26306125901668254, 0.27933618627576484, 0.2566748077931026, 0.3046975866299103, 0.27906694806194, 0.30657453480269914, 0.3081083129432717, 0.2856827152925383, 0.2603973529937238, 0.2882989728364268, 0.47507155579218474, 0.2905832466491284, 0.2068263543174942, 0.2635854646922491, 0.21412584816173152, 0.22253302735671665, 0.15392689898785972, 0.24702016010896455, 0.11067902385927264, 0.1498070069580153, 0.08420178046542492, 0.1644561755098033, 0.12964949288096195, 0.12862560775666076, 0.10637477357425706, 0.11317770527772975, 0.12405247821056187, 0.1295420698881864, 0.13859215856615958, 0.11033380434654139, 0.2082889069384679, 0.17526772910853838, 0.2607093876640183, 0.07202552913580762, 0.10385806705825129, 0.06735211774005656, 0.05687367630200024, 0.05228453813302769, 9.999999999998899e-05, 0.00989502952768273, 0.04705027995636335, 0.02568359288960531, 0.10001030006616096, 0.22302062222038244, 0.10568847483512056, 0.0919484323879427, 0.11406155455107947, 0.045506215205410316, 0.09464047338771941, 0.24752426982128395, 0.07823349842480676, 0.13854832505202153, 0.039510841315651635, 0.029403819732735204, 0.07214016095278042, 0.04200011654063329, 0.06216385781220635, 0.06436999314439384, 0.09649556424762817, 0.08251967063908994, 0.11038629176479575, 0.10710035386658179, 0.08716629361130124, 0.09026841412557018, 0.0874688292736806, 0.13222076580736086, 0.08987841301919675, 0.14817919814461222, 0.09853607597372027, 0.321133516316056, 0.3090890440008738, 0.33339543766958946, 0.35104491216867895, 0.3315756469489999, 0.34168565114369176, 0.33589147058033864, 0.3228587670222244, 0.3253560731783337, 0.07791932437334692, 0.1422018136145503, 0.08535308903436545, 0.11181511587192194, 0.11599645165669825, 0.08696612733573894, 0.11348789064841258, 0.1205815250124167, 0.13368827504472414, 0.18234423110787645, 0.15668205038320027, 0.1845571994987697, 0.15161967104362117, 0.16631675952799618, 0.14573331705871628, 0.16758550112053694, 0.1703591660158561, 0.1779386459119663, 0.2164128467923937, 0.2177787887620638, 0.20713097593974084, 0.21260185606460147, 0.21428514838048784, 0.20169869775010463, 0.22534518121875347, 0.24396113791492346, 0.223829626541181, 0.19773341946685752, 0.2277847626920515, 0.20018606560238406, 0.14091590431897316, 0.21806975893530067, 0.18035586868978948, 0.16937072270920706, 0.16230690265450554, 0.18565526153799128, 0.19934773442382425, 0.17863179518678063, 0.2055507749041603, 0.19373751775210357, 0.18452758755913234, 0.17396621072449436, 0.18304708162955474, 0.18125397193649584, 0.17801183783827068, 0.1901186386979521, 0.19332900049442636, 0.18331037433425557, 0.1806950711723715, 0.20541042951718824, 0.1934623802807729, 0.1851304283834465, 0.2006694527849353, 0.17798648310432474, 0.1578673852006618, 0.5152787701840389, 0.4300390023568911, 0.18085387811476772, 0.18851485750642094, 0.14867754753842377, 0.48250569055926007, 0.3318133138110235, 0.1747456290744942, 0.18850499447888036, 0.17975645438850985, 0.35193820796850794, 0.4617580134419923, 0.17326850777483105, 0.2357917322498041, 0.1678031396688524, 0.19520471714741772, 0.33803028258574974, 0.17092388840802175, 0.20189464187047368, 0.18294381294559958, 0.2099384865432603, 0.2135749380374129, 0.18239996477538845, 0.16999286951574866, 0.1980235613660989, 0.20568880668582523, 0.07483456623647866, 0.0880444774171314, 0.08702868473368053, 0.08352438465624146, 0.07525680209627694, 0.09010711987915743, 0.09984950507719292, 0.07102973937216817, 0.09098714223629467]}, "mutation_prompt": null}
{"id": "ad79accf-d748-41d7-82c2-09ccd463abe6", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                pop_diversity = np.mean(np.std(population, axis=0))\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean()) * (1 + 0.1 * pop_diversity)\n\n                dynamic_scaling_factor = np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)) + 0.05 * pop_diversity)\n                mutation_factor *= dynamic_scaling_factor * 1.022\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.15 * (best_individual - population.mean(axis=0)) * (1 + 0.005 * (eval_count / self.budget))\n                elite_amplification = 0.32 * (best_individual - a)\n\n                dynamic_bias = 0.1 * np.sign(np.mean(fitness) - fitness[i]) * np.abs(best_individual - a)\n                mutant_vector = a + mutation_factor * (b - c) + 0.125 * (best_individual - a) + elite_guided_factor + elite_amplification + dynamic_bias\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.03\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced population diversity exploitation by introducing an adaptive elite factor based on generation progress.", "configspace": "", "generation": 97, "fitness": 0.2043324015137939, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.16.", "error": "", "parent_id": "9cb0b856-ae44-484a-bbbd-b1948b11ac8e", "metadata": {"aucs": [0.3528179689941652, 0.3267339863735641, 0.3337818242540943, 0.3250676911018595, 0.3499525826426989, 0.36850839160361903, 0.3329671942859519, 0.31010914722506966, 0.3836485094969174, 0.12913453325501578, 0.143793260392183, 0.15329364483748487, 9.999999999998899e-05, 0.25552608239020325, 0.06423132137753074, 0.22278185651472793, 0.08963913859437922, 0.05813257396833993, 0.12381163064438838, 0.11609895977739892, 0.09621580632973414, 0.13026085837813717, 0.11325437305524844, 0.10681440886482563, 0.10853145114643725, 0.10269565138475167, 0.11622111831576809, 0.09477723686600437, 0.09543453572081506, 0.10478631701397167, 0.08950988501376778, 0.090985425236918, 0.11377503305855119, 0.07801796856728238, 0.117619906670821, 0.08901483957556233, 0.7443592019221593, 0.900252166473363, 0.8231560682838404, 0.7345614172986167, 0.7055583091319779, 0.717340134092519, 0.8454825171327185, 0.8388615374894043, 0.8580656929198051, 0.2557715630478187, 0.24713037281254313, 0.2776569216322271, 0.3120140991837981, 0.2621963008040745, 0.25898229937054607, 0.2961640773485136, 0.273828044552774, 0.29698332772484326, 0.3084381922336814, 0.2950629751792776, 0.27408763543563797, 0.2938498945573662, 0.4757430669095618, 0.29047152948594634, 0.2732627234365341, 0.3336023028311417, 0.21410637320539394, 0.20365929201072552, 0.14750938665427638, 0.24401746775344701, 0.1083213301145366, 0.1591956274524986, 0.08217888095139603, 0.17740999642041877, 0.1341196685630921, 0.12235671744309762, 0.106341869917841, 0.11315927267537951, 0.12520649080521928, 0.1311853053856319, 0.1391994683763067, 0.11077542302432375, 0.1940381428781497, 0.16907767025597842, 0.2575008821630632, 0.11855367024632102, 0.10045154443801863, 0.06183401016689294, 0.04519685603048651, 0.04153707537660978, 9.999999999998899e-05, 0.01479389591746716, 0.04447131973817575, 0.021908595212167037, 0.10887751360829845, 0.19018306276994634, 0.15477320324769206, 0.08468144342390893, 0.14826786589122787, 0.04574541332677906, 0.11468294630845555, 0.11695329089963502, 0.1032413451451244, 0.12278083408241747, 0.053189770701686734, 0.028692059423670813, 0.07417666079582885, 0.042750624634325995, 0.06317312470391812, 0.058514516881109535, 0.09480656599247561, 0.08163940546704218, 0.1079214106001396, 0.10526485902279148, 0.07879264031981748, 0.09551032369462864, 0.0793600315059172, 0.16298416350014544, 0.09917639040482096, 0.13851052319668256, 0.10117437303213739, 0.30704748560903894, 0.3243723302723016, 0.318111245957715, 0.3237904270427451, 0.36754945708154485, 0.30945508457617954, 0.3697833037648266, 0.29301940179747576, 0.3476350099323642, 0.07764097326536468, 0.141721555706376, 0.08585974748814673, 0.09605631804624115, 0.1201321730267273, 0.08897823041637254, 0.11223252734385536, 0.12074741693295032, 0.13129537480971232, 0.16494233560815752, 0.15482283318572476, 0.18060531476285413, 0.14319558071192529, 0.14188350859271026, 0.1459593645572944, 0.19114567205552635, 0.1720413052686376, 0.1494105168302956, 0.23217258019274567, 0.2111214593886802, 0.20535209872490368, 0.20505272990694334, 0.21588270794406084, 0.18515741049006296, 0.22013263710568487, 0.22062084816204164, 0.213436870784955, 0.2207573725416776, 0.19599212484230888, 0.21515737114549893, 0.16887071499610462, 0.14634875027901784, 0.1617289960245185, 0.17739074056576842, 0.18329494281057945, 0.19059517957222938, 0.18331543175703324, 0.1886468643621253, 0.20828611986953316, 0.18076497932029179, 0.18737227252884459, 0.18489829870202235, 0.19952181127633195, 0.20475533726186546, 0.1930257983585315, 0.1896752461846759, 0.20100259022212863, 0.1790789822388822, 0.17777244565625572, 0.20523102282646566, 0.19333917109333865, 0.1846971954741179, 0.19867540652769033, 0.18233905312393628, 0.18109290483146034, 0.4958143967597717, 0.4563083114314016, 0.18022652447927245, 0.18617228081573345, 0.14941540037412593, 0.38859720734521674, 0.44669116363298256, 0.17060668252191047, 0.18859275153101063, 0.18174802100645537, 0.2835329544135712, 0.37790663170419214, 0.1773175572130904, 0.22447718081965895, 0.1677306897908909, 0.19534326727830664, 0.4299431967970899, 0.18676419572473058, 0.1957789050868941, 0.18135359070400248, 0.18683568409856555, 0.2135749380374129, 0.17907670523848318, 0.17266435559381665, 0.19015047514690264, 0.21028783945158924, 0.0681809886691479, 0.08912376778207709, 0.09732177068664916, 0.0795418156499692, 0.08442697823763412, 0.1001659325218639, 0.10251496379062264, 0.10051370624732159, 0.10014885468432477]}, "mutation_prompt": null}
{"id": "333723f0-8e6f-44f0-b513-0c3cdc40a650", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                pop_diversity = np.mean(np.std(population, axis=0))\n                fitness_variance = np.var(fitness)\n\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - fitness_variance / (np.mean(fitness ** 2) + 1e-30))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean()) * (1 + 0.1 * pop_diversity)\n\n                dynamic_scaling_factor = np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)) + 0.05 * pop_diversity)\n                mutation_factor *= dynamic_scaling_factor * 1.022\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.15 * (best_individual - population.mean(axis=0)) * (1 + 0.005 * (eval_count / self.budget))\n                elite_amplification = 0.32 * (best_individual - a)\n\n                dynamic_bias = 0.1 * np.sign(np.mean(fitness) - fitness[i]) * np.abs(best_individual - a)\n                mutant_vector = a + mutation_factor * (b - c) + 0.125 * (best_individual - a) + elite_guided_factor + elite_amplification + dynamic_bias\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.05\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introduced adaptive crossover and mutation based on population diversity and fitness variance to enhance convergence speed.", "configspace": "", "generation": 98, "fitness": 0.20453732433839897, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.15.", "error": "", "parent_id": "ad79accf-d748-41d7-82c2-09ccd463abe6", "metadata": {"aucs": [0.3524546307180463, 0.33225440489544933, 0.2605772545396504, 0.32485875534320163, 0.3243976994739326, 0.34476531161874113, 0.28944961465288566, 0.30305773301165984, 0.36781830640252344, 0.1222282696357766, 0.132772960480654, 0.15339260807082633, 9.999999999998899e-05, 0.15103316262533883, 0.06427713565993731, 0.22045703987770393, 0.10594544460620892, 0.049110290366626175, 0.11880153865661036, 0.11255858216794024, 0.09941755753828962, 0.1054803711724075, 0.11857824820572527, 0.09769634251660408, 0.15834432351465677, 0.12161079316808532, 0.12595452766038584, 0.0999758776355546, 0.08792503528212658, 0.11266616418145992, 0.08003102795968187, 0.09096200633123974, 0.11316900639438077, 0.08252921215868714, 0.1091777692301481, 0.09042326438320902, 0.7443592019221593, 0.900252166473363, 0.8231560682838404, 0.7287925360811754, 0.7558200093238272, 0.6612263083414077, 0.7497460646425984, 0.8171168202843426, 0.8580416415093307, 0.25551026515530717, 0.26635556127844984, 0.27563584714951805, 0.25184310595212545, 0.2464561763352502, 0.2603939986493703, 0.3037585171229499, 0.30026768568441, 0.31882105990674026, 0.3112979877730949, 0.2902732416781786, 0.276123459896521, 0.2860348257540276, 0.48459900446728166, 0.476369203064386, 0.27105736401155434, 0.5057331659591142, 0.21410637320539394, 0.2147908337110923, 0.15048246075695937, 0.2661131036854708, 0.10851089498472721, 0.1497998785574457, 0.08508406195407114, 0.16826582089777353, 0.13368853342863762, 0.1226619324628202, 0.10641366175599143, 0.11326612856669416, 0.1252967660740376, 0.13296788187870956, 0.13780768092104445, 0.11071647212828539, 0.20637426087932786, 0.1697695553056332, 0.26940853282861943, 0.1074560442853223, 0.09955747102909973, 0.06084842385561695, 0.04362830027742348, 0.05563941066323164, 9.999999999998899e-05, 0.01171689640838236, 0.0478076193580953, 0.022574717445199344, 0.11352546674124786, 0.19449412155190138, 0.15460796254490927, 0.09752332970693789, 0.1505173787006745, 0.04582780371770645, 0.1102211818938531, 0.11735985920625303, 0.1025001300784425, 0.12843045604275882, 0.05313650144134752, 0.028361407566094954, 0.07186531388847739, 0.042682165639961966, 0.06337428146695911, 0.05930202682685681, 0.09639969152957706, 0.08529555176186099, 0.10728979303193864, 0.10817518987771169, 0.07565306760763746, 0.10088943788167104, 0.0803206827894688, 0.16325282732554847, 0.09640200060390414, 0.14247105157627427, 0.09933016198911915, 0.33087071496833265, 0.3163500677519282, 0.3297309432188654, 0.3037872693675243, 0.3478144287539212, 0.3346294225985388, 0.3360523610993975, 0.31170471738836836, 0.3281997197161395, 0.07706976263403742, 0.0931877693308274, 0.077710738071607, 0.11380744411623378, 0.11619555573670892, 0.094473308151373, 0.11285459556578148, 0.12131942485950453, 0.13129537480971232, 0.19216084401414735, 0.14692531707028667, 0.18786274519185076, 0.16275015601146747, 0.19066148226280277, 0.13113313408326832, 0.17117865995450898, 0.14644056838037944, 0.18929652068228764, 0.20831096446276065, 0.22086971670752087, 0.22497175645894507, 0.20750039834780287, 0.2324871415308688, 0.21149358359846104, 0.2058869872525665, 0.23828385716971257, 0.18950188946732527, 0.2172401217854415, 0.20930176266104927, 0.19111561453670078, 0.16581998056492253, 0.1610162048679742, 0.17062124943656376, 0.16571205573663172, 0.18429201588826405, 0.18136417135240324, 0.176823618648433, 0.17318245088980933, 0.20828611986953316, 0.19705085081900686, 0.19417165086277954, 0.190978687978409, 0.1739926330099505, 0.18722364674891778, 0.19943457191773717, 0.1903977894417681, 0.2012863112574278, 0.1791643263593895, 0.17991385074982735, 0.2056484860246406, 0.18658561401766227, 0.18559097683277892, 0.1999148654588041, 0.17791631453516643, 0.18553425302068438, 0.48887788136667787, 0.16424316458495758, 0.18022613170159152, 0.18618008690348886, 0.14941514497148656, 0.329985773913375, 0.3924941288355439, 0.25190883982431944, 0.18607048482683242, 0.1874362238954359, 0.3988350297935247, 0.4972498243994512, 0.3722842701710941, 0.26482365447001044, 0.167779868858282, 0.19580477353532977, 0.3202256543673956, 0.17687931435869375, 0.1957789050868941, 0.1774058338025265, 0.18683568409856555, 0.2135749380374129, 0.17907670523848318, 0.17528102904334386, 0.17757099663632814, 0.20568880668582523, 0.08183748787736767, 0.07985503542989703, 0.10378351766075522, 0.07954232775595649, 0.0780519815090116, 0.0920946051169691, 0.10671826191783529, 0.10129643452731052, 0.0932436027028809]}, "mutation_prompt": null}
{"id": "574b327b-a6b2-48da-bf66-d72563dbb0f9", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                pop_diversity = np.mean(np.std(population, axis=0))\n                fitness_variance = np.var(fitness)\n\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - fitness_variance / (np.mean(fitness ** 2) + 1e-30))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2\n\n                dynamic_scaling_factor = np.exp(-0.05 * np.abs(np.min(fitness) - np.mean(fitness)) + 0.05 * pop_diversity)\n                mutation_factor *= dynamic_scaling_factor * 1.022\n\n                best_individual = population[np.argmin(fitness)]\n                elite_guided_factor = 0.15 * (best_individual - population.mean(axis=0)) * (1 + 0.005 * (eval_count / self.budget))\n                elite_amplification = 0.32 * (best_individual - a)\n\n                dynamic_bias = 0.1 * np.sign(np.mean(fitness) - fitness[i]) * np.abs(best_individual - a)\n                mutant_vector = a + mutation_factor * (b - c) + 0.12 * (best_individual - a) + elite_guided_factor + elite_amplification + dynamic_bias\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                diversity_factor = (np.std(population, axis=0).mean() / (np.std(population) + 1e-30)) * (np.max(fitness) - np.min(fitness)) / (np.mean(fitness) + 1e-30)\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30))) * diversity_factor\n                self.crossover_rate *= 1.05\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced exploration by adjusting mutation and crossover interactions to improve convergence adaptively.", "configspace": "", "generation": 99, "fitness": 0.2031039975437583, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.16.", "error": "", "parent_id": "333723f0-8e6f-44f0-b513-0c3cdc40a650", "metadata": {"aucs": [0.37475823620674353, 0.3599307884134403, 0.39710020340906715, 0.38136874359339357, 0.36461318370521434, 0.3415673373985876, 0.37338405266112507, 0.3323675779386348, 0.3193667099525732, 0.07259395225299414, 0.1599187038669394, 0.10541014722651021, 0.0007405262392500278, 0.07868459291625718, 0.06350434139112571, 0.1804511635880317, 0.10959444309662014, 0.05219084779353311, 0.11077091600624422, 0.11256915456124006, 0.12106021286418234, 0.11607487864590094, 0.1236687288128242, 0.11356398050357508, 0.10957518194038762, 0.12645930236856529, 0.11278002121842856, 0.11119340397857325, 0.06874577030393669, 0.09240689219471221, 0.08792405700993, 0.09124456955210314, 0.10211702350648755, 0.08364657792591601, 0.08315189870676365, 0.07758576411582652, 0.7623017278510438, 0.8394070169420005, 0.8093934950155053, 0.7284317547877025, 0.7550121702180927, 0.7150705845099619, 0.7560181677775917, 0.8361397307275826, 0.8579831048447597, 0.2568578376143925, 0.23492008917660456, 0.27397815009186965, 0.2509999431801172, 0.23399212942749115, 0.2469202513620945, 0.27436959759600343, 0.28934624986765733, 0.2958750881588543, 0.32702765468182093, 0.2875111652891674, 0.2673425397651443, 0.26085467364429227, 0.4769543878301409, 0.3040528151918259, 0.28342308259748283, 0.32204340248039665, 0.21183424737395395, 0.1824284902342309, 0.0969837120400725, 0.24680657015403562, 0.10872523579723925, 0.16636357537719304, 0.08522733435202368, 0.14893619577887962, 0.16960134086826184, 0.146969198744467, 0.10556902926226341, 0.11239367734557038, 0.1314850069236616, 0.14492742578238027, 0.13901072218650246, 0.10938745925311233, 0.1777398148923316, 0.18191702995091108, 0.2561465279491314, 0.0881578680600309, 0.05409800364094286, 0.06806061026284482, 0.028543557097379768, 0.006934287752261126, 9.999999999998899e-05, 9.999999999998899e-05, 0.03967555706473935, 0.015597042433076802, 0.09655340797343293, 0.15987734177582402, 0.2171843711961603, 0.07867763542099604, 0.2177236284381282, 0.04428089735299001, 0.15175053653373505, 0.09762917061073695, 0.0833216066685083, 0.051821923241233914, 0.045306847691553576, 0.039044321080771605, 0.08700283735600112, 0.08088545020165072, 0.06519510414366869, 0.06127880973522537, 0.07628303704340778, 0.06920894463275307, 0.1330730118296104, 0.11136022382484456, 0.08514285612885286, 0.08470022524667842, 0.0790942396576989, 0.13482733071222996, 0.0879314133504202, 0.14808251642157244, 0.0642751421380865, 0.3232196457462192, 0.33775498677540994, 0.3245138606866812, 0.3594824711986955, 0.3491494174218125, 0.3246427278362226, 0.33395802820018416, 0.3406792943079686, 0.3143937345552793, 0.06847399594999792, 0.12178324053408796, 0.06889726450246203, 0.09171252297259891, 0.1103862918611469, 0.0900827792161143, 0.10587672501760959, 0.09916913754243561, 0.09901030979504777, 0.1733000997709765, 0.19573092784701862, 0.13897021176996327, 0.15797652427459485, 0.17273332689247622, 0.1437980251939749, 0.18314222230918076, 0.15257819663822247, 0.1638884375250611, 0.23171031848332324, 0.2211737374156202, 0.23928467064696957, 0.21367411575056094, 0.23215359169038263, 0.24080295332170165, 0.22916981447093066, 0.2558317952271163, 0.23833556804931788, 0.19477680650545204, 0.19568005715559822, 0.19698422486446554, 0.14961138468544488, 0.2051893821832177, 0.21601360126406033, 0.18897194978697662, 0.1661235102482589, 0.2030497542120988, 0.2093311716612174, 0.18197611523331336, 0.1957773023300422, 0.18232326893500395, 0.19864714565469144, 0.18746545179016538, 0.18753195949002932, 0.2136575247807767, 0.18966704389834688, 0.17317463018012946, 0.1938772706812062, 0.17705609597646121, 0.2014921090380175, 0.20677615111278003, 0.18136235063449213, 0.18316903575324817, 0.18771817483402897, 0.1838585966991011, 0.17127994672406543, 0.4519484857225099, 0.3822079009039392, 0.17989357942439133, 0.18996780389850332, 0.1510117900847936, 0.43629136302890237, 0.38050565530686975, 0.16945063656507042, 0.19001059382625973, 0.18692775937813533, 0.4107019853643189, 0.4258897369697928, 0.18574673988002233, 0.28385246762983485, 0.1672596614063535, 0.19738798957589088, 0.43624611100736965, 0.1703473131924682, 0.1983305100847692, 0.17668117534414707, 0.18683568409856555, 0.2135749380374129, 0.17562865164739228, 0.20111765288406425, 0.1835555563975827, 0.20568880668582523, 0.09648251072061198, 0.07703275971083001, 0.09441351504776363, 0.08360209534824026, 0.0952745000501316, 0.09469123432697979, 0.09395626318126993, 0.10903912762901269, 0.08538487990220145]}, "mutation_prompt": null}
