{"id": "fb313584-791e-4b49-b43e-6cf2c97b2b49", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))  # Ensure a minimum population\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.gaussian_factor = 0.2\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant_vector = a + self.mutation_factor * (b - c)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                \n                # Apply dynamic Gaussian perturbation\n                trial_vector += self.gaussian_factor * np.random.normal(0, 1, self.dim)\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = func(trial_vector)\n                eval_count += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n        \n        return population[np.argmin(fitness)], np.min(fitness)", "name": "HybridDifferentialEvolution", "description": "A hybrid metaheuristic combining differential evolution with dynamic Gaussian perturbations for adaptive exploration-exploitation balance.", "configspace": "", "generation": 0, "fitness": 0.09573396698649968, "feedback": "The algorithm HybridDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": null, "metadata": {"aucs": [0.1861143344732349, 0.18488465821226896, 0.1687906936630379, 0.1954314528676787, 0.1740320873711606, 0.17975760972096666, 0.18777702434020227, 0.1909106176004718, 0.1785644492060583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05952320911498832, 0.05316907360635581, 0.04478240217068741, 0.03726285325967471, 0.03890017834572701, 0.042672193781421064, 0.04199944215404505, 0.0512335433499842, 0.04672796572302884, 0.030053530848379917, 0.024430476899385045, 0.03025584438664608, 0.03524296461058296, 0.022348982818810148, 0.021127080851509716, 0.03696417075239278, 0.02145007392356746, 0.033059542837577616, 0.2380919999893153, 0.20687963303125534, 0.18619001548959047, 0.20075355946954487, 0.15027920121872884, 0.3600797801896377, 0.2514016760977994, 0.21743174308713586, 0.1921185014658202, 0.07518601415694881, 0.08583871451222569, 0.10171882691615464, 0.10934761337206023, 0.07722648963976009, 0.056283872374390365, 0.09494931059303147, 0.06992167978182573, 0.09149425784348408, 0.13776579407617606, 0.19308637766117165, 0.14859284869307576, 0.1133172867493013, 0.11716037459603945, 0.1278111796714667, 0.11428147739893957, 0.12291599043133172, 0.12244506287321566, 9.999999999998899e-05, 0.004130275838204911, 0.00012237371561674149, 0.003180139886062028, 0.01916904713980716, 0.011220955129967458, 0.0027210822082439634, 9.999999999998899e-05, 0.010756135862768468, 0.0170623302371119, 0.015237197411814618, 0.006650823016260854, 9.999999999998899e-05, 0.035362057023575866, 9.999999999998899e-05, 0.01854581968607305, 0.00456725898427246, 0.0031235252316468287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033545948482282206, 0.06535045920481664, 0.06532983830924555, 0.05173539607661659, 0.08113734560802444, 0.0511644128748554, 0.0537204939684891, 0.052693984165303465, 0.03753882807872, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00021661972646813688, 9.999999999998899e-05, 0.000621276444640384, 0.0006931191659005354, 0.0009618429051421185, 0.003971225212371476, 0.0013369260352479317, 0.0033175251835171338, 0.20358220717475184, 0.20732803781738263, 0.18640736811219472, 0.2055799784281095, 0.1951138886389978, 0.19273526688096676, 0.1980655687085019, 0.22294644040481904, 0.19199944945985448, 0.044081043061474534, 0.052394981601691315, 0.04324222316929971, 0.04596297647451664, 0.04156449770406778, 0.0413352471208871, 0.051131010256768916, 0.03830572089090223, 0.04775951385313615, 0.166755984567871, 0.1521803782432788, 0.1326598434994417, 0.13769654585267255, 0.1463003652587921, 0.16229913838969512, 0.14963138758589234, 0.13293973642091206, 0.13273554884437178, 0.16262333051218647, 0.15627640615841065, 0.17096992324614035, 0.1565755512536351, 0.15513476721160058, 0.1703363547400395, 0.15804542596809912, 0.1764283710202157, 0.15938023237630472, 0.09910656239635973, 0.09378091957072487, 0.11202006725570901, 0.10400573745997221, 0.12196422628551917, 0.11684742346816857, 0.1025471922610861, 0.1237427242099084, 0.10800055546888288, 0.14935348651989566, 0.1518837392230129, 0.16178183709796834, 0.15098075537943878, 0.14859170205298655, 0.15929523486191643, 0.16813164117434753, 0.15042716432915582, 0.1589379716031346, 0.13738512289598348, 0.1453727497640397, 0.14671462092351706, 0.14280711027795567, 0.14902277952979037, 0.14368435772614108, 0.14484618811115668, 0.14556388991246116, 0.1644654309621939, 0.133848032879615, 0.16679477618376493, 0.16005773061943762, 0.15176503580803635, 0.23570231720745427, 0.122414151589046, 0.15324563983997774, 0.14999613660544708, 0.1618659857471243, 0.14301596130282068, 0.1581113255008857, 0.15162828472985823, 0.13662633431171312, 0.1449700832682571, 0.11182872076740025, 0.17551218898041065, 0.17449745427357466, 0.1488675754455011, 0.18249436185500645, 0.20174225318827455, 0.18425510182043958, 0.209397223689875, 0.21837522038533075, 0.1789461589675504, 0.17797738226052429, 0.18745620390490036, 0.20568880668582523, 0.05210726078304828, 0.06265680085731984, 0.06585155299632517, 0.04997836407669243, 0.058815507864153016, 0.05131362809915152, 0.07532529613519179, 0.06097808126786608, 0.04614402647448679]}, "mutation_prompt": null}
{"id": "bf11419b-c430-4265-ad51-dc351baa7f23", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.gaussian_factor = 0.2\n        self.gaussian_scale = 0.1  # New adaptive scaling factor\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Self-adaptive mutation factor\n                mutation_factor = self.mutation_factor * (1 - eval_count / self.budget)\n\n                mutant_vector = a + mutation_factor * (b - c)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n\n                # Apply dynamic Gaussian perturbation with adaptive scaling\n                trial_vector += self.gaussian_factor * np.random.normal(0, self.gaussian_scale, self.dim)\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced variant of differential evolution incorporating adaptive Gaussian scaling and self-adaptive mutation to improve convergence.", "configspace": "", "generation": 1, "fitness": 0.106964831088065, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "fb313584-791e-4b49-b43e-6cf2c97b2b49", "metadata": {"aucs": [0.2142420275154877, 0.19963237163909964, 0.199800952389106, 0.20213807291339403, 0.18945015137566268, 0.201599397411371, 0.19695216595371534, 0.20505473249658557, 0.20091460349924462, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00016528756460543192, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0532101465176138, 0.05565036184847194, 0.05849858109353501, 0.05849531085736326, 0.05460544990120031, 0.05375169260856638, 0.06064935732179488, 0.051838240399810775, 0.06407782209324309, 0.034762880243386696, 0.035373576298252885, 0.039864630666705314, 0.03768906921464421, 0.03494407028865831, 0.0448165075977911, 0.054293127461433666, 0.04048408628755573, 0.03984060315571747, 0.28132505353642134, 0.21420509075180894, 0.18656462904443072, 0.1941698637770285, 0.1587945825174618, 0.18884747892150922, 0.2601913639891291, 0.17334987968206939, 0.6341584903177748, 0.0910722965193177, 0.0777929146006241, 0.10323114570707459, 0.07208646904787963, 0.08099950651603727, 0.08491056506282602, 0.09802612268026645, 0.07208044431868532, 0.11548776607392264, 0.15571894991659063, 0.1937248325340709, 0.15570974502253287, 0.1460511333905562, 0.16783601693618655, 0.1336488081116931, 0.1273281032224446, 0.1689150686471308, 0.129144565294665, 0.022743992723996742, 0.018493520700685107, 0.017791806113532926, 0.02342223906315377, 0.03316982029191273, 0.015711434921735545, 0.0157841521912927, 0.023437784143491847, 0.021801348819020183, 0.01340633259251367, 0.05611103256945649, 0.043893456950884535, 0.02607154038797832, 0.040975819247373146, 0.03025555371285371, 0.03009545049703377, 0.03843037297832419, 0.03249265686966285, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001782568598193035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051916827969554324, 0.0668131278613544, 0.05625078447954146, 0.062242044349667736, 0.06042771698552751, 0.050335417615170575, 0.07617480096059426, 0.07404229895577663, 0.10852364771105294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038367727697128373, 0.0025214391159735783, 0.007562225679368373, 0.0069500170433162145, 0.0026568996059466166, 0.0030340592832082125, 0.009763426230855243, 0.010686933317277214, 0.00492553250315142, 0.2320132626653294, 0.2181137202177139, 0.20937607848307116, 0.21932709384476923, 0.2067475555421272, 0.20950071235471168, 0.226931742902154, 0.20549570110354243, 0.2281025272716274, 0.07561102964317545, 0.05093677203007485, 0.05221441092395396, 0.07170019040339792, 0.052515133907833134, 0.05369258128207477, 0.05495797592387841, 0.05504274860858127, 0.05526117967465649, 0.1480205917782711, 0.13069896136531256, 0.15293996273020893, 0.14284783782284882, 0.14178470904798046, 0.1454717143205706, 0.15771249942297094, 0.15371535043325768, 0.12633117631967705, 0.18186636312536786, 0.1634029196022193, 0.1757735693968585, 0.17060851804511457, 0.17387402995415147, 0.17614605122623794, 0.1620190280035958, 0.17816177143209022, 0.16962551719856656, 0.1159890988795087, 0.10832912126538163, 0.12176750706452477, 0.14628793753621794, 0.12368946535564829, 0.12817794043112496, 0.13162639009949928, 0.13262198848498663, 0.1156191625924714, 0.17848089290722802, 0.17073598046088045, 0.16860558234356593, 0.16446588603875056, 0.16891645534329214, 0.1621420214722773, 0.18770598933381766, 0.1697994972864466, 0.181199349988737, 0.15328458625848107, 0.15816969783822055, 0.15088579190624585, 0.15094003497536157, 0.15672204608215912, 0.16047452076539304, 0.14691515112117937, 0.14905698025534453, 0.16646489371761963, 0.16658758474003021, 0.16775056890878293, 0.1624921376292785, 0.15814066377948277, 0.19902281022039836, 0.15694352647799537, 0.175376019602278, 0.16701393282679233, 0.1674787995418794, 0.16665549296532722, 0.16657624438947805, 0.16402192819909212, 0.23425155624253746, 0.16195618781649368, 0.14214153715729294, 0.1762453103855438, 0.19219049105510022, 0.16001348537284832, 0.1871527266687879, 0.19017897422901875, 0.18006838481677445, 0.20470999126252498, 0.2135749380374129, 0.1912165304174498, 0.19451831967581756, 0.17967190949800593, 0.20568880668582523, 0.050952351966089604, 0.05961855180490694, 0.06937507419634603, 0.06110510035892769, 0.060863190833932435, 0.06192558632131551, 0.07532529613519179, 0.0591805765158846, 0.06160295191055898]}, "mutation_prompt": null}
{"id": "5eab3c39-61e4-4b21-b602-7fae0c0b7702", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.gaussian_factor = 0.2\n        self.gaussian_scale = 0.1  # Adaptive scaling factor for Gaussian noise\n        self.adaptive_learning_rate = 0.1  # New adaptive learning rate for mutation\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Self-adaptive mutation factor with adaptive learning rate\n                mutation_factor = self.mutation_factor * (1 - eval_count / self.budget) + self.adaptive_learning_rate * np.random.normal()\n                \n                mutant_vector = a + mutation_factor * (b - c)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n\n                # Apply dynamic Gaussian perturbation with adaptive scaling\n                trial_vector += self.gaussian_factor * np.random.normal(0, self.gaussian_scale, self.dim)\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced differential evolution algorithm with adaptive learning rate for mutation factors and Gaussian noise, balancing exploration and exploitation for improved convergence.", "configspace": "", "generation": 2, "fitness": 0.10438918004180599, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.07.", "error": "", "parent_id": "bf11419b-c430-4265-ad51-dc351baa7f23", "metadata": {"aucs": [0.19465360128785292, 0.20199445256566928, 0.2094277053488831, 0.2019352431564696, 0.2055759895807191, 0.1872567906848055, 0.22111977018311613, 0.2023184582981048, 0.19334262649338207, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025201566845229895, 9.999999999998899e-05, 0.05241301264377618, 0.06538699733635733, 0.055579734230898015, 0.051963871608955214, 0.05601865248837512, 0.06102827406971301, 0.05546898995131, 0.05820777039437619, 0.05289439775885019, 0.03720150863103222, 0.041755401623687405, 0.04506164534892765, 0.047344746382496083, 0.0379392946358843, 0.0375853300673159, 0.04509332069210248, 0.0364904932592075, 0.0372221101714294, 0.20091428846805093, 0.1441418919538261, 0.16997674339639357, 0.17531178602906639, 0.25790414906350945, 0.16448598371074918, 0.27503322647597694, 0.21722369860623436, 0.16210505045564083, 0.09800873497268481, 0.07934999169083279, 0.10171882691615464, 0.08658049657476097, 0.0737797912917062, 0.05475380538486774, 0.10089938303798551, 0.09991371842010177, 0.09703402742759171, 0.14181111149590453, 0.19366233827402524, 0.1563322509350693, 0.1330896859291295, 0.1260332615401134, 0.12980222319893708, 0.17277065884879628, 0.12991855518216122, 0.1514259627400426, 0.022166875578631284, 0.024859311462441802, 0.015236586453622802, 0.029573904901165737, 0.02227874987516265, 0.04401979731745087, 0.01667483690552929, 0.035921719795414586, 0.03510804996639871, 0.03191668082658616, 0.021684402704035932, 0.030293538787425467, 0.04384590581335979, 0.05227025168173771, 0.05742252126750369, 0.07787885900099223, 0.023062802351626832, 0.022030088691304073, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05299274279882138, 0.07231795745034197, 0.1470502893314255, 0.06601531221218393, 0.05525396492573398, 0.03348265085733326, 0.05659246425950837, 0.056576160545308674, 0.06807525761315014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0036206817904419486, 0.005418132431409095, 0.010112242313804698, 0.002515683218921927, 0.006319159586217427, 0.012719370281349063, 0.0068300720978566876, 0.003902694442052379, 0.008280833793671949, 0.2227301042279598, 0.2152911399934131, 0.19583095258722383, 0.21524920426260974, 0.20622492926103664, 0.2262865051197558, 0.20692845065813303, 0.22934654442113045, 0.22404007968308948, 0.0529980064700285, 0.05698470402707423, 0.05654916843240443, 0.06675900557735115, 0.06226649344244073, 0.05208847649394921, 0.05533610230189101, 0.052980903915768596, 0.05900745666944096, 0.14207919768445376, 0.1469127790543473, 0.1446073034567089, 0.13879285658712526, 0.1390204085068384, 0.1454397367022835, 0.15012949744280435, 0.12876763953781278, 0.1232110545564814, 0.17225374652010528, 0.17493530437058546, 0.1767991144463611, 0.16117852536464283, 0.16996540507008395, 0.17214939805597373, 0.17160314055409165, 0.19117276544347228, 0.15976729716765126, 0.1188306725167646, 0.11480648147187278, 0.1139917065174948, 0.12049880787209699, 0.12440423667904199, 0.11163348232960435, 0.11755657473915093, 0.1322546886873257, 0.11838086326403496, 0.1585307132599708, 0.1664692816023109, 0.1579446925300375, 0.1583898989910304, 0.16521213700178417, 0.1653668516802983, 0.15795077086667209, 0.1645732395248417, 0.16684289891435833, 0.1489349740967444, 0.16318922535887737, 0.15346363518668826, 0.14921954092647283, 0.1581542646780254, 0.15731533478284676, 0.14538945025344796, 0.15233922728883698, 0.16660267918222105, 0.15708465508128733, 0.18546728920626676, 0.16280653915401222, 0.18391053328442042, 0.1621925811055318, 0.1683695515106356, 0.17127918817401155, 0.15907196962970105, 0.19517370924937916, 0.2404287831092916, 0.2082615650982027, 0.20433283245016565, 0.15982393610669665, 0.12961676981031356, 0.17112091300596477, 0.1679268459382829, 0.19954975265826835, 0.14833316156177911, 0.20843602625026358, 0.19788897012266993, 0.17789616093400185, 0.18742902190297306, 0.2135749380374129, 0.18918261263650593, 0.19588595826472488, 0.18640513809988146, 0.20568880668582523, 0.04929614044852537, 0.053000914405688104, 0.06585155299632517, 0.07162678633030173, 0.06274651310006318, 0.06012445524285448, 0.07532529613519179, 0.058536814862821474, 0.05478393724201869]}, "mutation_prompt": null}
{"id": "ba4fcdb5-77cf-491f-8ea5-f83b09491114", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.gaussian_factor = 0.2\n        self.gaussian_scale = 0.1  # New adaptive scaling factor\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Self-adaptive mutation factor\n                mutation_factor = self.mutation_factor * (1 - eval_count / self.budget)\n\n                mutant_vector = a + mutation_factor * (b - c)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n\n                # Apply probabilistic adaptive Gaussian perturbation\n                if np.random.rand() < 0.5:  # Probabilistic modification\n                    trial_vector += self.gaussian_factor * np.random.normal(0, self.gaussian_scale, self.dim)\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introduced probabilistic Gaussian mutation factor adaptation to enhance convergence speed.", "configspace": "", "generation": 3, "fitness": 0.1045601223799432, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "bf11419b-c430-4265-ad51-dc351baa7f23", "metadata": {"aucs": [0.20531160849627417, 0.1967240348945274, 0.19457025240622283, 0.1975260491951415, 0.19706321230775314, 0.19340771478250507, 0.19892482945861678, 0.19076129170580824, 0.1923260590777789, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05852343524500214, 0.06109739882354337, 0.047125390659288446, 0.059313476518413566, 0.06973216633704615, 0.06215043104093143, 0.04948303370152518, 0.05854643773419632, 0.0581443940125731, 0.03699432562623084, 0.038327690898739664, 0.042498296613666, 0.044889110020378764, 0.03378811176418872, 0.03633650980815606, 0.04106517521858821, 0.041929725203224355, 0.04127558437061585, 0.17905806462536988, 0.20957985736268403, 0.1517201129574962, 0.13262081487127853, 0.18378589232285514, 0.33219272989038795, 0.29861959076502775, 0.17843263970511947, 0.1613015071433963, 0.0929024614720203, 0.07540006808895161, 0.15021424914340664, 0.07296437443115067, 0.10117979752399331, 0.05219553791672171, 0.16469721476372323, 0.08936021354626467, 0.10086207387476642, 0.13545005833607082, 0.19364917841124185, 0.15645971961251248, 0.12192712908559045, 0.13657379161616845, 0.19242876078100002, 0.13699707637369907, 0.13955960244811683, 0.15540681532914769, 0.01850515828109489, 0.0298750593373015, 0.02189130824807195, 0.026670365641750182, 0.024151218530014784, 0.019876863068719608, 0.0353075171586843, 0.026330000072930848, 0.03471256760872132, 0.020720711905464317, 0.0236385268757775, 0.023814416119861903, 0.03323589854994358, 0.04552874624075609, 0.030035045087090095, 0.034656902121881994, 0.01990228579599329, 0.02437227400721187, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.075045755144316, 0.06925896487295724, 0.08191115837439844, 0.06652792328805712, 0.06674475634270471, 0.05060823353477695, 0.050043795929824775, 0.06716092314291489, 0.0493816280301691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007915604910518459, 0.005930676854912442, 0.006677156999659539, 0.0084547110902784, 0.007748769078579243, 0.008243092422096754, 0.0062297044635736265, 0.008173541204737345, 0.006676847091060645, 0.22344774405046597, 0.22686532582467878, 0.22113299038142686, 0.2215017285546974, 0.20632157888782554, 0.20632770461979166, 0.23157701847626067, 0.240008519487099, 0.23333126117838576, 0.05391585224719986, 0.061911276765697965, 0.04974342288958655, 0.05421525685222239, 0.046922892235375935, 0.05319858249031839, 0.05012882301296995, 0.058742922194753966, 0.061768231061755774, 0.13770214880771858, 0.1597249313290764, 0.13445467811414458, 0.138111795206177, 0.13844339996217658, 0.1250068552505128, 0.14963138758589234, 0.1359601794155143, 0.13715251761904934, 0.1713538327423152, 0.1729185611704841, 0.18191917019613713, 0.1650749044159836, 0.18068949720718097, 0.1780590958954653, 0.16663841184633943, 0.19410311736565955, 0.17201517421482426, 0.11410926674179611, 0.12163561424960556, 0.11893266751340759, 0.11153864165344674, 0.12489369033805175, 0.1150847378467601, 0.1269349808282173, 0.13204289365824773, 0.11954126403869736, 0.1797903706619991, 0.16560676688033704, 0.16107560593397208, 0.1703813224533276, 0.1589793901607709, 0.16737993804250673, 0.16496354366174126, 0.16256024183969708, 0.1675424452147949, 0.1453100202960288, 0.15714251483078678, 0.14937980048177812, 0.14871231450590094, 0.1644238796548556, 0.15930259873806696, 0.14539387153567318, 0.14838861694915484, 0.16366146191911535, 0.15739704126128495, 0.16826898537793966, 0.18227399884120266, 0.19618662771274709, 0.17901496616224233, 0.16523269942005614, 0.1949090862923858, 0.1835248320601358, 0.23068825048351116, 0.14899254829096586, 0.23233080119292848, 0.15423704141056171, 0.15538140754929175, 0.15588914633834883, 0.14253303438722942, 0.1713102483217177, 0.172009798880858, 0.1672579580441692, 0.17806412323091203, 0.19037378243135206, 0.18554810431195679, 0.18684229603765312, 0.2135749380374129, 0.1703245417078788, 0.17547970412954705, 0.18195991255450694, 0.20568880668582523, 0.05597678936887418, 0.05728295100095471, 0.06605631456526773, 0.05941475321462708, 0.061906638692572735, 0.05776744578191917, 0.07532529613519179, 0.06746298771408032, 0.05173614050981579]}, "mutation_prompt": null}
{"id": "2ed17edb-0d91-4d7e-8ef2-1662b7644403", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.gaussian_factor = 0.2\n        self.gaussian_scale = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Self-adaptive mutation factor\n                mutation_factor = self.mutation_factor * (1 - eval_count / self.budget)\n\n                mutant_vector = a + mutation_factor * (b - c)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Dynamic crossover rate decreasing over time\n                crossover_rate = self.crossover_rate * (1 - eval_count / self.budget)\n                trial_vector = np.where(np.random.rand(self.dim) < crossover_rate, mutant_vector, population[i])\n\n                # Apply dynamic Gaussian perturbation with adaptive scaling\n                trial_vector += self.gaussian_factor * np.random.normal(0, self.gaussian_scale, self.dim)\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "An enhanced differential evolution algorithm with an adaptive mutation factor and dynamic crossover rate to improve convergence speed.", "configspace": "", "generation": 4, "fitness": 0.10118212357393028, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "bf11419b-c430-4265-ad51-dc351baa7f23", "metadata": {"aucs": [0.18518566232442113, 0.19569862094386103, 0.2018322693526301, 0.18897398936125642, 0.17157460321797113, 0.18734772039374226, 0.19621237324211027, 0.17949050257374188, 0.16933837969177623, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0584994540938627, 0.0637676719896042, 0.056606835486960105, 0.052325449565146065, 0.05142341146495233, 0.051495035405535794, 0.05788664780936237, 0.060152869889796734, 0.06228437336688897, 0.03290535870960121, 0.03704774208326311, 0.0367274390773662, 0.03146615601196667, 0.03198203347596407, 0.03979367580393578, 0.0514932218615648, 0.033974088293797444, 0.041596797437419064, 0.20628851130118642, 0.2597164243737361, 0.1595139269020419, 0.23440968028425102, 0.17960042011259814, 0.31021243373355034, 0.18880152267827421, 0.17792829004646304, 0.4129886619788947, 0.08586048030877613, 0.10083372198184237, 0.10445316562568385, 0.05074996440223856, 0.0778097667696287, 0.0525054854204422, 0.1052360026441862, 0.07382386246592654, 0.09073074732565567, 0.1194453235950792, 0.19308637766117165, 0.1481850439168273, 0.12516779814073475, 0.11673080231849309, 0.13350541175064368, 0.14881430711489652, 0.13854600498644398, 0.15311070106288605, 0.012457519809402573, 0.012557088134496963, 0.011188812621892419, 0.01712558831727362, 0.008490962896720688, 0.015058208473008428, 0.03229200422099021, 0.016229107161581435, 0.00850712906335771, 0.007805270477800108, 0.005348044594934098, 0.0051224823831129696, 0.004194900288879033, 0.03579133660942224, 0.02083133744113641, 0.017993280776203546, 0.008421659853193653, 0.022128071720770803, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03685123615821595, 0.07816672069013753, 0.058736130969533784, 0.0478199696252023, 0.0465815414029217, 0.0476378102442615, 0.047260350542952634, 0.057923978230137396, 0.10883702348898716, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044271458034328415, 0.0023096751138440563, 0.0005627357118815901, 9.999999999998899e-05, 0.0002161953399321126, 0.002509456532128418, 0.20163005059465078, 0.22006315421730438, 0.24949910433553124, 0.20974180448093216, 0.19357246900380332, 0.20492043645555158, 0.21595947853339525, 0.19602675518605805, 0.20054808885883113, 0.0445331871296436, 0.050619119130566825, 0.048170199034429206, 0.048243482169974206, 0.046534850413284756, 0.04614379639147681, 0.04975624427652603, 0.03809516337592955, 0.05596414571789521, 0.13818389599457315, 0.1337255211270374, 0.12810901886070392, 0.1453609380121208, 0.1365660439621046, 0.14135536845982954, 0.14963138758589234, 0.14078708364606496, 0.14944889797479244, 0.16648160483617225, 0.17100528790402314, 0.1731970736789068, 0.16549217755941004, 0.17306763899220423, 0.1783096752252068, 0.172434030417981, 0.17666463405149446, 0.16079160347281418, 0.12735947561176597, 0.10250613509190754, 0.11606661960765263, 0.11325213285411484, 0.12121577016861962, 0.12596174602818233, 0.11540001434318015, 0.1282096867646505, 0.10736453766578014, 0.1649913910528219, 0.1704819505656502, 0.1603726540303545, 0.16716361435549842, 0.1705090185866055, 0.1706076094913418, 0.16631934101711832, 0.16580922978691837, 0.16667625438926936, 0.14679773886916847, 0.14751757876921, 0.15299025707159453, 0.14675896989823123, 0.15541110687724047, 0.15255502114570552, 0.15335433385358843, 0.14688534881113569, 0.1730146886297511, 0.14997014908716644, 0.16685725356451642, 0.16435652561872272, 0.16002414732755332, 0.2154943854761293, 0.16222413141701997, 0.1486977788818178, 0.15917693721046655, 0.1922769574180938, 0.1545256384721737, 0.15380548114931913, 0.15181969428805075, 0.22693356604990722, 0.15186936239712756, 0.14507148376761703, 0.16290815690427185, 0.19277566180042793, 0.16008783987116026, 0.19321472911612647, 0.19170940590214436, 0.17597048608417665, 0.18883583905636203, 0.2135749380374129, 0.19842075669333048, 0.19663149495698806, 0.17889127447851516, 0.20568880668582523, 0.053461986042837584, 0.0647534141184467, 0.06723995099672009, 0.061974646641314246, 0.06608789225602396, 0.058847950907599755, 0.07532529613519179, 0.06323689857763615, 0.05077657287086479]}, "mutation_prompt": null}
{"id": "8b1c76fb-fcaf-4808-a39b-8d46799a9cbc", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.gaussian_factor = 0.2\n        self.gaussian_scale = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # Dynamic population resizing\n            if eval_count > 0.5 * self.budget:\n                self.population_size = max(5, int(0.05 * self.budget))\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                mutation_factor = self.mutation_factor * (1 - eval_count / self.budget)\n\n                mutant_vector = a + mutation_factor * (b - c)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n\n                # Adaptive Gaussian perturbation\n                gaussian_scale = self.gaussian_scale * (1 - eval_count / self.budget)\n                trial_vector += self.gaussian_factor * np.random.normal(0, gaussian_scale, self.dim)\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "A refined differential evolution algorithm with a dynamic population resizing strategy and adaptive Gaussian noise to enhance convergence speed.", "configspace": "", "generation": 5, "fitness": 0.10897400914449873, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "bf11419b-c430-4265-ad51-dc351baa7f23", "metadata": {"aucs": [0.2203384830992331, 0.2094975027116439, 0.195463824886565, 0.20844976285100725, 0.2032626205072734, 0.21379695920695851, 0.21516625477007145, 0.19209764913576044, 0.2117515272304067, 0.0007341167306600394, 0.010800201668327514, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011756584212105903, 0.0013125035049288414, 9.999999999998899e-05, 0.0014099596709762352, 9.999999999998899e-05, 0.06051034113191123, 0.0570062904101567, 0.05054259438422526, 0.05424574307233543, 0.05960451892168661, 0.05901668697901319, 0.06400783414094002, 0.05520771635333588, 0.057966419259873114, 0.04358142576738866, 0.03438564329316707, 0.045555409223551946, 0.04161699465338642, 0.04252033671560551, 0.048131620253439866, 0.04926045556584158, 0.04667807134252977, 0.04180862666467544, 0.28184898820256954, 0.20436731683676768, 0.19288003788031305, 0.20975163698792454, 0.16039159930377223, 0.20872231122415874, 0.29245283325618054, 0.19802493861565273, 0.6343169905355581, 0.08574331608757313, 0.08313642520049747, 0.10391503934400315, 0.07686896324042103, 0.07889481561454792, 0.07906896931536955, 0.11264922296426083, 0.08172280840669477, 0.11654208463983773, 0.14091584924904255, 0.19663914196305365, 0.162052814417328, 0.157471897209582, 0.1573892125142775, 0.1365150326782385, 0.13034527129111428, 0.15686044826693635, 0.1422674315764363, 0.018084496886282997, 0.0325740656946093, 0.02388468434748703, 0.03908095488507446, 0.029878181735757625, 0.02261327520195633, 0.026831342246517287, 0.028927135966975936, 0.03251116354724959, 0.01827395029096146, 0.05846593848160142, 0.04086717499722459, 0.027520323836608962, 0.05097541193459909, 0.032031531629003296, 0.035243360091636866, 0.04699680974687004, 0.04198652896856725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06866951934533316, 0.07904416246553814, 0.07595404411937978, 0.06503728368629635, 0.07428290933416903, 0.04627686320687352, 0.0556100109703499, 0.0581568467122634, 0.10521266415593455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0046309816163071504, 0.0084030916541189, 0.015095169417715604, 0.006674999676869464, 0.004961994251438728, 0.008267424569011417, 0.009634948732597293, 0.007246644539528613, 0.006817029950677678, 0.2323325387307238, 0.22565351456514227, 0.21618044836833528, 0.22964062834319443, 0.21160391851234328, 0.21281078569135037, 0.2334583607280193, 0.21463069764412956, 0.230716738115196, 0.08170606510923517, 0.0537336550349482, 0.05127257976575961, 0.07342015382671618, 0.054469298400873, 0.056841257600089956, 0.05429652098387505, 0.05889390647849502, 0.05706396788694601, 0.14336798582955668, 0.13223284901241872, 0.16194901805212536, 0.13882726199112672, 0.139016602163754, 0.13916534391273017, 0.14980134491708774, 0.12991295684861126, 0.12602112912225816, 0.18518948237941502, 0.17568096066949623, 0.18405433556133455, 0.17449127963394417, 0.17364577866149722, 0.1825230972960149, 0.17824332076006089, 0.18868768262329982, 0.17501188074172003, 0.12063021595732859, 0.10790556035802656, 0.13201123967887474, 0.125658338515093, 0.13076490700459875, 0.12514921328535022, 0.13017472661761953, 0.13548313282909763, 0.12015168775818874, 0.1549646719049641, 0.15559955485653187, 0.17081357310155476, 0.15908956173445654, 0.15897195180222967, 0.16449082290633632, 0.18176855925302404, 0.16702613194580773, 0.1739972438599776, 0.14794898429638348, 0.15732769185279705, 0.1533338689400292, 0.15678389332990594, 0.1578640762057546, 0.16118231612294365, 0.14786436208339127, 0.1533444993232802, 0.16638684988351782, 0.18164824131622948, 0.18969343149608153, 0.17758002430370345, 0.1756069421245, 0.170681792325433, 0.17130957239092326, 0.17546905563704673, 0.16821419918801117, 0.17238083425992212, 0.15745481216492663, 0.16904030768793943, 0.16624261547714325, 0.23636368405405483, 0.16552221534968903, 0.15622786124102583, 0.1757516019234654, 0.1675019234713716, 0.16232676151512204, 0.18092451954528432, 0.18555463859913124, 0.17815864025531825, 0.18683568409856555, 0.2135749380374129, 0.18699092915182614, 0.19770948814565314, 0.17816840889990293, 0.20568880668582523, 0.050095101584599955, 0.05335721700194607, 0.06784853317313477, 0.06350349049815973, 0.0699029589778506, 0.056326248612019625, 0.07532529613519179, 0.05971493384639759, 0.058873216424442765]}, "mutation_prompt": null}
{"id": "1f3e7b52-d44c-4744-9084-6e573c63c443", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85  # Slightly increased for diversity\n        self.crossover_rate = 0.9\n        self.gaussian_factor = 0.2\n        self.gaussian_scale = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.5 * self.budget:\n                self.population_size = max(5, int(0.05 * self.budget))\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                mutation_factor = self.mutation_factor * (1 - eval_count / self.budget)\n\n                # Enhanced mutation: weighted difference strategy\n                mutant_vector = a + mutation_factor * (b - c) + 0.2 * (population[np.argmin(fitness)] - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n\n                gaussian_scale = self.gaussian_scale * (1 - eval_count / self.budget)\n                trial_vector += self.gaussian_factor * np.random.normal(0, gaussian_scale, self.dim)\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "A refined differential evolution algorithm with a dynamic population resizing strategy, adaptive Gaussian noise, and enhanced mutation strategy for faster convergence.", "configspace": "", "generation": 6, "fitness": 0.12639255227877538, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.09.", "error": "", "parent_id": "8b1c76fb-fcaf-4808-a39b-8d46799a9cbc", "metadata": {"aucs": [0.2602487414644372, 0.2627439179286676, 0.25595967843096146, 0.2578973912519207, 0.24732954804823137, 0.2614821863854109, 0.24682752233967098, 0.2378477134688486, 0.2515336047581498, 0.008961298297156861, 0.010799232881817389, 0.014289810334305875, 0.015853550925846505, 0.011055309848674422, 0.025361692556106763, 0.005665349154391652, 0.023326028031137813, 0.01298092863041389, 0.06820701121905437, 0.06991209770894224, 0.0660899266275754, 0.06213995991920296, 0.07022686576909232, 0.07349127242446707, 0.07554039026904169, 0.0685947759824248, 0.07367136148664444, 0.04564052089859194, 0.04471100977626086, 0.047782178765379824, 0.05579445699994945, 0.05786306353484083, 0.046876355701002126, 0.05491422196481632, 0.055800272572963494, 0.055294112337686996, 0.3631608946735986, 0.2756226508783719, 0.26224283528227077, 0.2919590037166604, 0.35085880221629706, 0.24370269440897951, 0.31941790520763913, 0.2684175767095267, 0.25264290300664827, 0.1010709272003194, 0.10095072710332387, 0.12461042708962855, 0.10463879710941415, 0.10173940864387476, 0.0952865449922361, 0.12472590161109165, 0.10733582320107327, 0.12683508300442903, 0.16867852923852533, 0.21977426631162866, 0.18838637036096295, 0.17662584041207352, 0.18892510972277166, 0.17693700645236354, 0.1874475717838483, 0.18462815669026988, 0.17784224304736995, 0.0648981535427563, 0.047964461261277624, 0.053675834250567434, 0.05014565227637391, 0.03820849057411346, 0.06113813699784765, 0.08362217189361254, 0.07027803144899858, 0.05323471519224454, 0.0472213376752838, 0.057849581589573984, 0.07820136167827318, 0.05553119653089267, 0.07504284123790161, 0.06372761180064135, 0.06856277765185603, 0.049045745476251956, 0.04788575986154697, 0.006951557573763756, 0.008017215625790941, 0.0001508041634328272, 0.007293744340532093, 0.004389826261879337, 0.003956359478901494, 0.002579571321202123, 0.003309640817418913, 0.013258081225806406, 0.09017350001642077, 0.1194778182740498, 0.09102338295382795, 0.10148257788764681, 0.10999040041427777, 0.08006806719151338, 0.08893497992698829, 0.10964068005613825, 0.08787990451532679, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024515365581523674, 0.0304951970257874, 0.028070524581669476, 0.03166371665845269, 0.0237340644974825, 0.023841190675883972, 0.02550965951485573, 0.02632039127671648, 0.0287586805432285, 0.26698233202089205, 0.25893062068291195, 0.2584025145551305, 0.258174936432945, 0.258296183572444, 0.2515477668813615, 0.2627272103957826, 0.2561744180286716, 0.2583463413971413, 0.0615379521092162, 0.06988795029934969, 0.07392356094355823, 0.06493918246421948, 0.06572346441175958, 0.06467495139590351, 0.06687430286809615, 0.05854383537501928, 0.06605908605257538, 0.1542102016314324, 0.14281602942660798, 0.1250913630756353, 0.15123926401484244, 0.16063666665924725, 0.1455638505841802, 0.1510586017552794, 0.14709363646055718, 0.13078705613181663, 0.2006312831975724, 0.18906833333815332, 0.235125596268693, 0.18511963385585617, 0.1933794725728729, 0.1927004943059989, 0.1939103291649953, 0.1986265815392605, 0.19810461695671233, 0.14356675933783247, 0.1297343995870942, 0.13987209396851008, 0.1370460291470006, 0.14356660505990426, 0.13122520528502424, 0.14264202219214384, 0.1492677117269513, 0.1307980033888011, 0.17001997727607943, 0.1631399631006798, 0.17361429407895212, 0.18345497034698244, 0.1755685086982709, 0.17527978331291905, 0.17886165015158983, 0.2016880145396973, 0.180005299963795, 0.15161058673503613, 0.16405853573971485, 0.15437052828431863, 0.15396869775727084, 0.1575773786922715, 0.16924956237486766, 0.153105869078348, 0.16412194059752905, 0.17212072868413852, 0.18387981670627573, 0.24206885123087318, 0.23118919912350033, 0.23604404900339537, 0.2032782628055847, 0.22297476183249565, 0.15339962564087928, 0.25901626557794366, 0.16249293768805562, 0.18539773265228676, 0.2013469639529668, 0.2070939330172632, 0.20390459955044304, 0.17398269657652765, 0.1966902693132181, 0.17386147218353942, 0.18042923868041538, 0.16895152427109572, 0.18858975457338234, 0.19098518594255043, 0.17839774392183205, 0.20969469230013815, 0.2135749380374129, 0.18043616118484918, 0.20019978662526938, 0.19677649289470167, 0.20568880668582523, 0.06552646283054075, 0.06579928117093081, 0.0724040522086905, 0.062197914284750966, 0.0718664138581886, 0.07037749052445363, 0.08027831789796824, 0.06659319776175265, 0.06315953766325033]}, "mutation_prompt": null}
{"id": "8216ccf1-48d5-43ed-96ea-076e78e72c43", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.gaussian_factor = 0.2\n        self.gaussian_scale = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.5 * self.budget:\n                self.population_size = max(5, int(0.05 * self.budget))\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                mutation_factor = self.mutation_factor * (1 - eval_count / self.budget)\n\n                # Enhanced mutation: weighted difference strategy\n                mutant_vector = a + mutation_factor * (b - c) + 0.2 * (population[np.argmin(fitness)] - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Dynamic crossover rate\n                self.crossover_rate = 0.8 + 0.2 * (1 - np.exp(-(eval_count / self.budget)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n\n                gaussian_scale = self.gaussian_scale * (1 - eval_count / self.budget)\n                trial_vector += self.gaussian_factor * np.random.normal(0, gaussian_scale, self.dim)\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Improved differential evolution with dynamic crossover strategy for better exploration-exploitation balance.", "configspace": "", "generation": 7, "fitness": 0.12688426700439467, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.09.", "error": "", "parent_id": "1f3e7b52-d44c-4744-9084-6e573c63c443", "metadata": {"aucs": [0.2534682141101845, 0.24973311123714237, 0.23812461031700516, 0.25838712805161235, 0.2523087380321153, 0.25374517382376216, 0.24888532366549554, 0.24158383427236996, 0.2496797564069536, 0.016603346164764443, 0.015788874374777495, 0.01710333428529487, 0.012285984386307791, 0.015355517858456347, 0.006080504439744061, 0.008225674584002585, 0.009454002108733928, 0.006558638207745937, 0.06324842688154553, 0.06921171912945157, 0.07847702952664659, 0.07201953631695357, 0.06639492274973857, 0.06938813718268444, 0.0700813299537596, 0.06618345348061061, 0.07196362273614598, 0.04567682590004951, 0.05160364681047869, 0.04794773321999968, 0.05489957298574866, 0.05061689480409293, 0.04459446518716559, 0.055700903618238096, 0.04926611619975796, 0.05399113011563772, 0.6682186258104463, 0.27201929107804856, 0.2544422012874217, 0.210233144212446, 0.28964039446764633, 0.3167827216426208, 0.250034901963081, 0.2943367584561626, 0.2800716902376764, 0.10784031386293702, 0.10738161298459237, 0.11341602025889919, 0.08964301180257095, 0.10795655348677813, 0.1113926209044157, 0.11517337702711661, 0.09477418290908612, 0.11339891272889036, 0.19630312239118985, 0.21494383633499292, 0.18708697129062735, 0.18035162337666244, 0.2036885916782798, 0.18263237654811582, 0.18048163944426232, 0.1808093777409806, 0.18964336409347748, 0.053258067729991865, 0.05108452363589022, 0.057254137867913446, 0.04719335839716987, 0.06105950332043519, 0.04388578232280782, 0.04967359664230009, 0.051608773098261174, 0.07099070519655615, 0.053797251888400344, 0.05246275076229667, 0.047849120775945275, 0.04647859327778403, 0.06633826357451034, 0.05738211286046502, 0.06274415483954454, 0.041858344379806844, 0.05292741898045039, 0.0041197783690888334, 0.0028583943398760026, 0.003028100796111932, 0.005137070024582524, 0.007393761286224931, 0.0029295949745242744, 0.002470460691152754, 0.007551025039449488, 0.0038427410976750176, 0.10410916662689329, 0.09231389071876017, 0.09765266973517006, 0.10835108726357845, 0.08255407483550936, 0.0956706864248581, 0.08127251513072564, 0.09251311285892372, 0.07959677750043703, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02788725325166741, 0.022926874332521052, 0.02964648450076879, 0.028515658498206142, 0.026503953780581124, 0.0326443011829608, 0.028899704895124834, 0.02967426556173125, 0.02901873913640285, 0.26935042528967124, 0.2679537791232425, 0.2475965946752664, 0.2671865343483112, 0.2520703691081896, 0.2652449381347983, 0.25516639301373767, 0.24990639384375057, 0.2600226662499239, 0.08287066826491629, 0.07770206129968815, 0.07194087414083639, 0.06216387409583224, 0.06689935370066724, 0.0650908768929861, 0.06467383448234854, 0.06287824975492495, 0.0682321474472114, 0.1371397050817792, 0.15577398295129297, 0.13324388397668285, 0.13888492101475258, 0.13511880823300437, 0.13477564435023648, 0.14963138758589234, 0.14004711028798178, 0.13512086605404783, 0.2075623424469184, 0.19755120733203524, 0.19761299375413788, 0.18836707051720458, 0.203203652225749, 0.18810773651698387, 0.18978785144153565, 0.22868837500096761, 0.19655782493062102, 0.1407675945225605, 0.13883587669114006, 0.14016628918174645, 0.14739418700701756, 0.14488290720187036, 0.1338960410384623, 0.13370361766766292, 0.13970731887006949, 0.14306762896467207, 0.16600090163178538, 0.19051033399499695, 0.1759516770876386, 0.18351569099796283, 0.17829743330400638, 0.17196201958616586, 0.17414225276535766, 0.1764324729434562, 0.1812961927672604, 0.15141610334703803, 0.17595756561979903, 0.15764577649480582, 0.1546630964112654, 0.15990781124178866, 0.15552527582690523, 0.15683208281512762, 0.153705378850856, 0.19095384620690592, 0.20477596505627937, 0.22080890936612463, 0.20428536184160861, 0.21320032154720203, 0.2197789370072828, 0.23831430392694952, 0.1895854095145264, 0.24297836936675754, 0.16068665630804557, 0.2025025885642483, 0.2305991955227722, 0.22525464392887806, 0.21810336387727514, 0.20747661498902337, 0.17775521867100852, 0.1872126551807859, 0.17905166973904396, 0.18690026695261897, 0.18041906495322324, 0.19491306695223665, 0.19047281988375087, 0.18937619380259907, 0.2135749380374129, 0.17983460799514428, 0.17306794378845303, 0.18562672143027537, 0.20568880668582523, 0.06612559411680519, 0.06303776000301864, 0.07039791888548175, 0.07091636047421712, 0.06571822688710294, 0.06438057768016459, 0.07558330601036611, 0.06632190492425494, 0.06584956492340666]}, "mutation_prompt": null}
{"id": "8125700d-ec59-4704-b135-cb876d0af3a1", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.gaussian_factor = 0.2\n        self.gaussian_scale = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # Adaptive population resizing\n            if eval_count > 0.5 * self.budget:\n                new_population_size = max(5, int(0.05 * self.budget) + int((self.budget - eval_count) / 10))\n                population = population[:new_population_size]\n                fitness = fitness[:new_population_size]\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                mutation_factor = self.mutation_factor * (1 - eval_count / self.budget)\n\n                # Enhanced mutation: weighted difference strategy\n                mutant_vector = a + mutation_factor * (b - c) + 0.2 * (population[np.argmin(fitness)] - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Dynamic crossover rate\n                self.crossover_rate = 0.8 + 0.2 * (1 - np.exp(-(eval_count / self.budget)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n\n                gaussian_scale = self.gaussian_scale * (1 - eval_count / self.budget)\n                trial_vector += self.gaussian_factor * np.random.normal(0, gaussian_scale, self.dim)\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced differential evolution with adaptive population resizing for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 906 is out of bounds for axis 0 with size 900').", "error": "IndexError('index 906 is out of bounds for axis 0 with size 900')", "parent_id": "8216ccf1-48d5-43ed-96ea-076e78e72c43", "metadata": {}, "mutation_prompt": null}
{"id": "67dba6ee-5426-4265-8f09-9ea683e945b8", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.5 * self.budget:\n                self.population_size = max(5, int(0.05 * self.budget))\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Adaptive mutation factor\n                mutation_factor = self.mutation_factor * (1 - np.tanh(eval_count / self.budget))\n\n                # Enhanced mutation: weighted difference strategy\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (population[np.argmin(fitness)] - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover rate\n                self.crossover_rate = 0.7 + 0.3 * (1 - np.log(1 + eval_count / self.budget))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Adaptive mutation and crossover strategy in differential evolution to enhance convergence speed.", "configspace": "", "generation": 9, "fitness": 0.13221627076314496, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.14.", "error": "", "parent_id": "8216ccf1-48d5-43ed-96ea-076e78e72c43", "metadata": {"aucs": [0.2329838387715678, 0.24251431092801645, 0.24049455416149035, 0.23559531883050522, 0.24930664627101062, 0.2497286375184834, 0.2423902314112083, 0.21841600039881925, 0.22424885876146938, 0.007425659623090497, 0.0035767658764223054, 0.0018281965635266184, 0.005117343420342202, 0.0014073176292729306, 0.003963976224304111, 0.008885574228068793, 0.007156407207898119, 0.0023575332051792852, 0.061068899251060405, 0.07037701878151659, 0.06126507648684132, 0.07027209920374011, 0.06269823174495126, 0.06278437121955027, 0.06521360779125296, 0.06120892665268618, 0.06739677831174251, 0.045482706412147356, 0.04850867232162148, 0.04188628712390585, 0.04288278662892242, 0.04625934438766521, 0.04776783680355201, 0.050975668602515345, 0.050071263221812656, 0.05087014310777738, 0.7511235721892777, 0.7666259697346023, 0.6662569352449166, 0.766492996251691, 0.7754878315476077, 0.5203337634578076, 0.8399748705361811, 0.6691014341516632, 0.5343786909342764, 0.10122398936304833, 0.09889559321902541, 0.11493495962124611, 0.09219736874363338, 0.09452512196429141, 0.09483245816008634, 0.1094198455672124, 0.08805173547231393, 0.11107495161489755, 0.15331454195864425, 0.19776049510987737, 0.1808557721828219, 0.15989705907652274, 0.16314699909380093, 0.14806263325690083, 0.15165818026346156, 0.1511450231236593, 0.14768358048789865, 0.045003585963726445, 0.02908894666618067, 0.062261561911471475, 0.04622044174576856, 0.040586355801222274, 0.040952484949471235, 0.04039416776563631, 0.06076125289553569, 0.041448527865637685, 0.03363632851202725, 0.038601758794023056, 0.033744270133172716, 0.048628082812265716, 0.04956841792380218, 0.03428250819202494, 0.06077592822184108, 0.034577585610561457, 0.0433476691511383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004776509767329129, 9.999999999998899e-05, 9.999999999998899e-05, 0.06467473440770932, 0.10339905916826608, 0.09204604622471269, 0.07009936615093215, 0.05735202181119203, 0.07757818716617182, 0.056952193635686155, 0.07595114001003278, 0.07097329671528918, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013413891813630285, 0.01966949712803967, 0.02505940367383286, 0.02289930441186805, 0.01866186996418784, 0.019666582480683092, 0.020082407738685304, 0.016384064436564594, 0.013777317273586998, 0.24473224325924592, 0.23814319013363938, 0.23446192929256493, 0.2459535607755241, 0.23299913480592882, 0.23676851963465584, 0.2408654778083703, 0.23550344362617082, 0.23567925494642428, 0.06564523900477393, 0.0632199857572554, 0.05858821724921692, 0.0615590919637492, 0.061005171287158766, 0.062283877896368356, 0.06681300970457993, 0.0603503883710218, 0.0620670642217136, 0.14026364258183965, 0.13187795009401926, 0.1493910404911738, 0.1422003032354895, 0.1458476033626943, 0.1264096159421373, 0.14963138758589234, 0.1286411058599637, 0.12531226063586742, 0.19969110344243468, 0.1792189024660198, 0.1893911279069901, 0.17494249498983339, 0.1889848831701323, 0.18961041683829716, 0.18017273628442676, 0.19800800009454622, 0.18643796845012373, 0.11904527460735337, 0.12679866270610596, 0.13649464376412468, 0.13052682740911514, 0.1352338190135559, 0.12396697907624532, 0.12219193487703195, 0.13706161102700842, 0.1245392055919623, 0.17817575736513735, 0.1814288616829306, 0.173864922151735, 0.18254816696104603, 0.16199497768529636, 0.17587773564181175, 0.17305497839083095, 0.17707797355957022, 0.16844758621041056, 0.1521258829214368, 0.1547883985574393, 0.1616162725809227, 0.15325712142565406, 0.15988898867476686, 0.15732427798333082, 0.1563613707230681, 0.164864963386407, 0.16799312470318095, 0.15207533812417784, 0.17938020422240264, 0.16976475756774712, 0.20513116878062831, 0.15654978375344997, 0.1444122616699911, 0.19945422479898323, 0.15102936315914994, 0.17406712116765244, 0.17214837567818808, 0.150856422941539, 0.1962866793537682, 0.16132695156296029, 0.16460097770801219, 0.15268824579467943, 0.1609143438768892, 0.17507816171067392, 0.15912041445455893, 0.18795941143215256, 0.18805785624126925, 0.18308694086990174, 0.1878370842381918, 0.2135749380374129, 0.17979199854025496, 0.17644177304005493, 0.1893797993206583, 0.20568880668582523, 0.0536031824074642, 0.0580054440604334, 0.07422101964791328, 0.06296898916871485, 0.06840414660273741, 0.06245460834050265, 0.07845943582746784, 0.0584962579535071, 0.05433630394646205]}, "mutation_prompt": null}
{"id": "c5b72c2b-cae2-4e81-88a7-9d62a943b669", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        gradient_weight = 0.05  # New parameter for gradient-inspired mutation\n\n        while eval_count < self.budget:\n            if eval_count > 0.5 * self.budget:\n                self.population_size = max(5, int(0.05 * self.budget))\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            # Calculate a pseudo-gradient\n            pseudo_gradient = np.zeros(self.dim)\n            for i in range(self.population_size):\n                pseudo_gradient += population[i] - population[np.argmin(fitness)]\n            pseudo_gradient /= self.population_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Adaptive mutation factor\n                mutation_factor = self.mutation_factor * (1 - np.tanh(eval_count / self.budget))\n\n                # Enhanced mutation: weighted difference with gradient-inspired component\n                mutant_vector = a + mutation_factor * (b - c) + gradient_weight * pseudo_gradient\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover rate\n                self.crossover_rate = 0.7 + 0.3 * (1 - np.log(1 + eval_count / self.budget))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Population and Gradient-Inspired Mutation for Faster Convergence.", "configspace": "", "generation": 10, "fitness": 0.10708212000715847, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.09.", "error": "", "parent_id": "67dba6ee-5426-4265-8f09-9ea683e945b8", "metadata": {"aucs": [0.21812433387826202, 0.21387354951140358, 0.20296580107587414, 0.1975470480570629, 0.20353093783107723, 0.19141582462175133, 0.2170862719993698, 0.1881556879397993, 0.19194098630623058, 9.999999999998899e-05, 0.0005548003880107011, 9.999999999998899e-05, 0.0011570169886343518, 9.999999999998899e-05, 0.0018171182168141842, 9.999999999998899e-05, 0.0005358461695356143, 9.999999999998899e-05, 0.05594618159022069, 0.05665814564085181, 0.056091794590243826, 0.0567322247699964, 0.05180310532872079, 0.05074045420916351, 0.05477661036664416, 0.05496859462735282, 0.05154789392072512, 0.03981449873260878, 0.038033264030378766, 0.04305870398832634, 0.037814691280276036, 0.04024390736261152, 0.0341936428065408, 0.043932703947068164, 0.045859231368789, 0.03653878650732245, 0.1637222966670312, 0.5923024420535066, 0.14256274224745136, 0.40883567197218373, 0.16261441393099885, 0.5472300330786015, 0.4010709543495241, 0.16201089953958803, 0.1761541801668698, 0.08124506005890375, 0.08347603606308363, 0.10428850127665579, 0.07792364586918643, 0.08714933567874528, 0.053626540602714545, 0.10595895962549129, 0.07333495716898797, 0.11153940021840225, 0.13703279608234242, 0.19308637766117165, 0.15209311801028047, 0.15753855116136217, 0.14809573521647468, 0.14693264468955491, 0.12048875180707941, 0.14678350994008438, 0.13765493239466597, 0.026853707871216104, 0.017971262085120343, 0.06512293209793063, 0.045629280263281724, 0.01780312283127483, 0.0305985409755527, 0.028080210777980064, 0.027384415331552336, 0.023866148748926896, 0.012105084235174424, 0.019633076373603897, 0.01130844970612066, 0.014647454823241257, 0.04064991134836782, 0.01119665663804048, 0.029973437788452628, 0.021774798612297475, 0.03480632378789472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05193679797985784, 0.07452556710794922, 0.05411619529661149, 0.06071188033028829, 0.04601404170735335, 0.04929433529389082, 0.08280650239642873, 0.1330893670777834, 0.06611388701524479, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006103178333655923, 0.003560018899740447, 0.003923278416575693, 0.005957058485082101, 0.0052965389429520116, 0.011483090447178657, 0.007479706397337527, 0.013659825475663134, 0.008405513722918423, 0.26081698119223107, 0.23055937983007968, 0.2163790840175639, 0.22068278881224968, 0.21309791900066655, 0.2153373500160196, 0.21694488988282723, 0.20850626779629922, 0.21125126934145133, 0.04942340588073946, 0.049649948617159656, 0.0528215165297512, 0.05363090660777958, 0.04953368711144579, 0.055228574218096016, 0.050304752837252664, 0.07504649869589297, 0.06841370401456348, 0.13709410100555053, 0.1286601126451924, 0.14312778221839695, 0.14119357397826227, 0.1356312451250713, 0.1756773817081121, 0.14963138758589234, 0.1320787869764205, 0.1325855617813071, 0.16675618264366399, 0.17754177601752796, 0.1728253055278257, 0.16746837782667567, 0.17647284465854973, 0.16841416424596267, 0.17109544161936352, 0.17850094551218865, 0.16239418967721408, 0.11163806473180615, 0.11281904090915418, 0.11642839048042353, 0.11302274758385233, 0.1278420424319383, 0.12344639475788843, 0.11349746266626515, 0.12911301128523978, 0.12297728032628019, 0.15186240010151375, 0.16377992089159066, 0.16452551314407537, 0.17106045064437037, 0.15971602793039563, 0.1683938823123311, 0.18331439973478647, 0.16976206860984966, 0.16113986842030303, 0.14852109123154533, 0.15158546407565188, 0.15323650258694765, 0.15456446487902342, 0.15261022680681258, 0.15573244476815107, 0.150624025857656, 0.1484220537005616, 0.16415027376340208, 0.15652058041247707, 0.2030571168037152, 0.16496502936332058, 0.16206890735951618, 0.14962760956364674, 0.1351422995889996, 0.14928106323694623, 0.14204776059118485, 0.1594422072595315, 0.19088551964863687, 0.18782867230552291, 0.1505776003414383, 0.16361865020624677, 0.15266900312233034, 0.127416207082797, 0.17758585328368703, 0.1652717265356809, 0.16053511166413792, 0.17850049001121204, 0.1840951386782479, 0.19553902011522806, 0.1884900225306858, 0.2135749380374129, 0.17506205955709297, 0.18140448468521786, 0.17850312428081616, 0.2083768185103212, 0.058666531708989944, 0.05767078381332724, 0.0669044286690087, 0.056046387437376666, 0.06433464056250593, 0.05383228976260379, 0.07532529613519179, 0.06646083049945606, 0.05145237518950907]}, "mutation_prompt": null}
{"id": "bad18256-1906-4e8c-a9f8-11452a12f56e", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.5 * self.budget:\n                self.population_size = max(5, int(0.05 * self.budget))\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n            population_mean = np.mean(population, axis=0)\n            diversity = np.mean(np.linalg.norm(population - population_mean, axis=1))\n            dynamic_mutation_factor = self.mutation_factor + 0.1 * diversity\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutant_vector = a + dynamic_mutation_factor * (b - c) + 0.15 * (population[np.argmin(fitness)] - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                self.crossover_rate = 0.7 + 0.3 * (1 - np.log(1 + eval_count / self.budget))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Integrate a dynamic adjustment of mutation factor and crossover rate based on population diversity to enhance convergence.", "configspace": "", "generation": 11, "fitness": 0.11669168474774769, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.17.", "error": "", "parent_id": "67dba6ee-5426-4265-8f09-9ea683e945b8", "metadata": {"aucs": [0.16924458138949228, 0.17726726267443715, 0.14585057116380507, 0.17271115616887545, 0.1792782392485418, 0.164260141439052, 0.17401499090519978, 0.15612064914320578, 0.17800456201814818, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03590484224774959, 0.05101229941853469, 0.03486398972425908, 0.03449583315180493, 0.044025641914283375, 0.03697788230551691, 0.039484563719150545, 0.04115109839674247, 0.039318873745223026, 0.023404467908213378, 0.01971679840103313, 0.028768542186533907, 0.02244845995570177, 0.01279545972207985, 0.01682583931673376, 0.03696417075239278, 0.014357626031805237, 0.029763828138413717, 0.901082580591844, 0.9058091022150344, 0.8519139308258994, 0.8508443129358906, 0.8638766030038084, 0.8951087589714374, 0.898703280387437, 0.8753264072427904, 0.883830806156208, 0.07511263165365967, 0.07510940173832203, 0.10921717574779155, 0.06982635771046664, 0.08705093039155987, 0.0463897687037923, 0.09472457566024695, 0.06353802991894153, 0.08919533621105913, 0.11547029897669658, 0.19308637766117165, 0.1481850439168273, 0.09102516335424227, 0.08744527801275981, 0.1058108274250048, 0.112702794549845, 0.1070724909726396, 0.10239867355929744, 9.999999999998899e-05, 9.999999999998899e-05, 0.00037451257753706724, 9.999999999998899e-05, 0.002483436907158243, 9.999999999998899e-05, 9.999999999998899e-05, 0.0028111494521178004, 9.999999999998899e-05, 0.007990352002493872, 0.008746090845098697, 0.028335185422357467, 9.999999999998899e-05, 0.035362057023575866, 0.020719533882599395, 0.017993280776203546, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.047700036849285254, 0.06535045920481664, 0.04490689360873623, 0.05175357493830779, 0.04065497748008384, 0.02931313263695412, 0.021453254217456585, 0.0395769247199218, 0.036037900893695185, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00020645675348318626, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004603621191490159, 0.0014056088507974351, 9.999999999998899e-05, 0.2003844423089155, 0.18487064596046288, 0.17783153199113855, 0.2055799784281095, 0.17403772026072928, 0.19226744717352073, 0.19726210125892918, 0.1579461784695173, 0.1891480374906228, 0.04543849940479394, 0.04031368233025301, 0.04080479699968853, 0.049440511170616985, 0.03310519123318734, 0.03547506917252852, 0.036585788746268944, 0.030803937208197518, 0.04639795618279985, 0.14538098878151196, 0.13797322748901975, 0.13649773102020935, 0.1407260942407531, 0.15379084492014095, 0.1354468678483035, 0.14963138758589234, 0.1473897804203883, 0.1264093266816444, 0.1602710620254989, 0.1572624034149689, 0.16814906059237933, 0.14861417032694657, 0.1515497148076549, 0.161856142914947, 0.14815387424156834, 0.18339018472704316, 0.1458786885420894, 0.09387828833418266, 0.08372356878379328, 0.11109491287868445, 0.09581796457008929, 0.12092313537362531, 0.10009679980249697, 0.09514877733001192, 0.1237427242099084, 0.0958185030746741, 0.15663743914005102, 0.1343407785539108, 0.1394860778378728, 0.14040474191590024, 0.13536808326635985, 0.14950702032209284, 0.14466922882037303, 0.14187582547175426, 0.1645820737134891, 0.14149802518428145, 0.1461235986362508, 0.14006577975982915, 0.13676508515206698, 0.13279773790427807, 0.14152725567514868, 0.13325636161381682, 0.1322631973657521, 0.16207881422481074, 0.1405545130344228, 0.16679477618376493, 0.1593083731255257, 0.155133632296938, 0.12578657517082525, 0.14357878107235322, 0.1517185852075319, 0.14287353575095152, 0.1614368110645884, 0.11787126229461642, 0.11829958490745507, 0.12489943867061737, 0.11932095526103692, 0.0993215553912109, 0.1173186546462004, 0.16518563215413418, 0.1649445058641673, 0.145945139641929, 0.1797932291031591, 0.1840951386782479, 0.1832185616814942, 0.18846027178360136, 0.2135749380374129, 0.1759653254302158, 0.1780178075528447, 0.17852656987722804, 0.20568880668582523, 0.038588128696308344, 0.0509774156488203, 0.06585155299632517, 0.0496458412526628, 0.058815507864153016, 0.04664249445781443, 0.07532529613519179, 0.05593665332742259, 0.03970669843632346]}, "mutation_prompt": null}
{"id": "329805b5-d555-4d6b-942a-322b33a7a594", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.4 * self.budget:  # Adjusted threshold for population resizing\n                new_size = max(5, int(self.population_size * 0.8))  # Dynamic population resizing\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Dynamic mutation factor based on fitness variance\n                mutation_factor = self.mutation_factor * (1 - np.std(fitness) / np.mean(fitness))\n\n                # Enhanced mutation: weighted difference strategy\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover rate\n                self.crossover_rate = 0.7 + 0.3 * (1 - np.log(1 + eval_count / self.budget))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with a self-adaptive population size and dynamic exploration strategy to improve convergence.", "configspace": "", "generation": 12, "fitness": 0.132785417623261, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.13.", "error": "", "parent_id": "67dba6ee-5426-4265-8f09-9ea683e945b8", "metadata": {"aucs": [0.23255427389227756, 0.24334905025488685, 0.22263279089254207, 0.2587204619125838, 0.2880939969260964, 0.22896494049236404, 0.19526907042215746, 0.1983626478889159, 0.22783504750789085, 0.03686891516595081, 0.03247049879318298, 0.029812002109692926, 0.03873797877477447, 0.022524183550066468, 0.03179810774513481, 0.02117130977807935, 0.015209807180154522, 0.02880793686309857, 0.04915778814200544, 0.04967438749587205, 0.044285962013744906, 0.06726344170690268, 0.07045552772265018, 0.06845690400706428, 0.06828514915915262, 0.06320864987143504, 0.06498803973395573, 0.033414135900348474, 0.015810292375898816, 0.035380200050510235, 0.06149975123146956, 0.05344145159594915, 0.05408845054541411, 0.06613558190450619, 0.05131722768699287, 0.05719758852897905, 0.4153183697619929, 0.5416020956932386, 0.4332188124313574, 0.7675166420250636, 0.7425154224150321, 0.8082787203833012, 0.8391735547331511, 0.7061060733883482, 0.596532996178635, 0.1218228199036212, 0.11941424834023906, 0.1278067633129596, 0.0902604259151496, 0.09966608798937271, 0.07441067565318626, 0.116096961249754, 0.13299066764839718, 0.14928032414131398, 0.16735438023980043, 0.19487298412420373, 0.1830103259764585, 0.19055541229014372, 0.18938258347458414, 0.19344221730731537, 0.21069722173907024, 0.21167537268206638, 0.1983141405813289, 0.06778035822184447, 0.060819130851590075, 0.0751725523728306, 0.058439099564757124, 0.029312881263074075, 0.023420033714249278, 0.071719235698388, 0.07799572368196384, 0.07159218559351688, 0.08642006882188902, 0.07241916393743997, 0.06744461563467552, 0.0903103923183246, 0.07879134350124295, 0.08760815116357878, 0.0835056748660602, 0.07811983881205398, 0.07872538527838047, 0.0013391108520827144, 0.01172283507652394, 0.0027990041493378692, 0.01031540223831251, 0.0015611465351197396, 0.0016235301119257306, 0.004982957674858568, 9.999999999998899e-05, 9.999999999998899e-05, 0.05200976133361601, 0.06761801265169876, 0.04873506658001314, 0.0728047652157231, 0.06349977647785776, 0.04931789033189471, 0.054492710517616616, 0.0807740066596302, 0.057047605585381134, 0.008013618310321768, 0.002071095439526438, 9.999999999998899e-05, 0.011969889699374847, 0.013396068319961207, 0.00021484939424809557, 0.01455816206846905, 0.006677058556399218, 0.010164340282622142, 0.03170760549504992, 0.04591512945369325, 0.028896211851679232, 0.022513072629472997, 0.01829761326475632, 0.0172166548506113, 0.013167368811298763, 0.016719297037996128, 0.014341803361544558, 0.21585013669764752, 0.2154073020388323, 0.20300426675777383, 0.22893242683523374, 0.20310285856503774, 0.21277367697067706, 0.233289492725416, 0.2226764507940735, 0.23217009217194728, 0.0597623092763051, 0.0539881561756842, 0.06028164599439356, 0.059490881087286285, 0.062392583978227, 0.056345606757741584, 0.06571234206484133, 0.0699701458435169, 0.06521396339908114, 0.14059508566223577, 0.12046838190039966, 0.13479452966880712, 0.1518777853249731, 0.13511880823300437, 0.15298453157058012, 0.14979137870529613, 0.13719116588477986, 0.13667727672208407, 0.1602710620254989, 0.16086668218375544, 0.17194045638989575, 0.17375559765234871, 0.18611009919609467, 0.1862137145348184, 0.164960520647368, 0.17979310802614512, 0.16595802138029736, 0.1594907934158042, 0.13117091180301432, 0.1368909168808624, 0.14668942951494868, 0.14070137854097087, 0.14373323359077717, 0.10810691222387303, 0.13493851049292338, 0.12391847563964675, 0.1626640598131791, 0.1559039450133236, 0.15449318106236787, 0.16405634056552731, 0.17498553604857026, 0.1662004891636809, 0.15609049045701195, 0.1588421653227835, 0.1639693606442839, 0.15611713464623356, 0.15524395215070474, 0.1609828398888925, 0.16477637148791568, 0.1788542099939494, 0.16295497996434882, 0.1608438031363667, 0.16832570558061344, 0.1728886201587646, 0.14929481700584424, 0.16842051473780995, 0.16420088751467066, 0.2089267778882271, 0.17710659694900355, 0.1699328784327092, 0.13451117015140313, 0.15220742257921915, 0.1649841212416504, 0.13634775453708137, 0.14362800318022473, 0.14007444746923414, 0.14827768961220733, 0.1349197732873758, 0.14183904009379678, 0.16410868491737418, 0.20368770712634, 0.1559331806014137, 0.1785541746889283, 0.18680392802981238, 0.18423897062525585, 0.18702225617821955, 0.2135749380374129, 0.17182232415925813, 0.1852710751412261, 0.1838509374677868, 0.20568880668582523, 0.05278255078281724, 0.05467730074332389, 0.0670681418385799, 0.06759610116620607, 0.06534062410647135, 0.060472659122047134, 0.07540961224102105, 0.06381860532956218, 0.06075033639533545]}, "mutation_prompt": null}
{"id": "18543b27-9df1-4d6f-88d5-8b9bdbfb771a", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.4 * self.budget:  # Adjusted threshold for population resizing\n                new_size = max(5, int(self.population_size * 0.8))  # Dynamic population resizing\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Adaptive mutation factor based on fitness variance\n                mutation_factor = self.mutation_factor * (1 - np.std(fitness) / np.mean(fitness + 1e-8))\n\n                # Enhanced mutation: weighted difference strategy\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover rate\n                self.crossover_rate = 0.7 + 0.3 * (1 - np.log(1 + eval_count / self.budget))\n\n                # Maintain diversity by probabilistically replacing a trial vector\n                if np.random.rand() < 0.05:\n                    trial_vector = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                else:\n                    trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with adaptive mutation strategy and population diversity preservation for improved convergence.", "configspace": "", "generation": 13, "fitness": 0.1315361533413072, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.13.", "error": "", "parent_id": "329805b5-d555-4d6b-942a-322b33a7a594", "metadata": {"aucs": [0.20756412853764883, 0.22685736927015154, 0.18619144906108775, 0.24081101821620354, 0.21817899049588074, 0.20993617847403945, 0.204814189508155, 0.18432921933777602, 0.181538458188522, 0.011266516832393214, 0.016801576998654477, 0.019745934962657308, 0.019083607433759253, 0.025802460810551375, 0.019193707576834695, 0.010118692943349772, 0.06038609117342619, 0.021391335074483875, 0.04370020088023485, 0.05555384787555373, 0.038599085749648654, 0.0819700013666097, 0.0655749376001511, 0.08034417431460383, 0.0786618296174525, 0.05898705820095851, 0.0641833243009221, 0.028865287081859425, 0.0206824794133057, 0.03522414566297283, 0.05785362712121056, 0.05682657661609736, 0.0708053490665983, 0.057998831625190705, 0.06138171983354079, 0.049925648224047325, 0.3657429764928666, 0.4169655346690604, 0.4407913583602834, 0.7561035031415235, 0.7705591204766082, 0.6773202681389423, 0.5224556591316171, 0.7668955217899596, 0.7996310638806219, 0.10272290109790361, 0.08639215839602443, 0.10857335619288166, 0.10300690696790493, 0.07275293748961198, 0.0952976944034486, 0.12619836113012206, 0.1462327235151326, 0.13788633556301122, 0.17178228025528608, 0.26672198770189304, 0.17024514216440334, 0.24564899652474548, 0.16475164863003033, 0.19906465324028622, 0.19578056421777323, 0.2019274972214654, 0.21294281207382781, 0.08587914363238325, 0.0608006063078157, 0.06650203194985083, 0.010605840379801723, 0.008963266570021888, 0.03436192500826707, 0.061076924837144, 0.06747637271337792, 0.05873639444845902, 0.0799737385717959, 0.07126324544175078, 0.07505367561077525, 0.0708072992507014, 0.0779652095311496, 0.09151056217940201, 0.0771998783592035, 0.07312471093361639, 0.08038948069471386, 0.006170133140295353, 0.0035142984329479265, 0.01332961883817807, 0.006302443332066088, 9.999999999998899e-05, 0.00391051846286572, 9.999999999998899e-05, 0.0002792130138928872, 9.999999999998899e-05, 0.03972747576420166, 0.08260044198319816, 0.068188063100723, 0.059318502454020705, 0.07910425910758312, 0.07648328070366683, 0.0463639893137352, 0.051509259379193595, 0.05433225662852004, 0.010358490449384972, 9.999999999998899e-05, 0.01955006054408892, 0.03323663514934472, 9.999999999998899e-05, 0.0005301316532102529, 0.014694679812589984, 0.02135955059481698, 0.015661815968116777, 0.023476191592026963, 0.021679370067761772, 0.01840882663842036, 0.017746486247507187, 0.015275167168215198, 0.019729461360302958, 0.022261382977303623, 0.0019492261310428693, 0.005891615933813821, 0.2125062037000428, 0.20477447363610868, 0.1981201730007388, 0.2445814878777962, 0.19730153602597844, 0.2101779573404272, 0.23606983890833522, 0.2546061443282994, 0.22638433560147142, 0.05839081748528785, 0.052660344254547686, 0.05622952735059539, 0.08045838724351584, 0.06313056013319696, 0.0553837216892189, 0.07112523166503704, 0.055747625844958404, 0.07135838741170575, 0.18891971307408972, 0.13005219420555458, 0.15029338839232165, 0.15828819760764656, 0.15722042627713217, 0.15311466982981403, 0.14963138758589234, 0.1442412584646705, 0.14657949757600341, 0.16780741723269565, 0.1554541696175793, 0.17684766051195333, 0.19102233133489654, 0.17805352669952101, 0.18973850540162107, 0.17347742799665888, 0.18208288788840699, 0.1618160663651642, 0.12944374921669022, 0.13687010189531812, 0.15038780465988344, 0.1287016528059658, 0.1397982527490923, 0.14623954901695246, 0.11596464339138035, 0.13010713062914825, 0.11986512592966503, 0.14341818038055276, 0.14545458882966322, 0.14360733763605715, 0.16212510452232087, 0.17036905064064323, 0.1564501918229123, 0.18192851765518758, 0.1653738766007602, 0.16175902829045097, 0.1563541050754328, 0.16695516927161103, 0.17217418969425458, 0.17444242107058505, 0.17154146230753198, 0.17080716476016966, 0.15935054014199923, 0.16654855724951834, 0.1711303043324851, 0.16930433747955598, 0.16679477618376493, 0.20130767944620098, 0.2308466239371414, 0.14723351398072315, 0.2546367216528277, 0.15253316196741185, 0.19388080213003145, 0.19568092301788087, 0.1466461698629068, 0.14841843521068132, 0.14376577638498633, 0.19027235861125058, 0.15369218638845084, 0.1263600062042115, 0.17155805615363806, 0.16625179207091823, 0.14020817227263527, 0.18007076142171696, 0.1860979185730397, 0.18113442593380213, 0.19301228924868352, 0.2135749380374129, 0.18032214575229844, 0.1921353846066426, 0.17890541231245694, 0.20568880668582523, 0.05132548745418808, 0.06471143231007459, 0.06812389615432224, 0.059501308662632035, 0.06571800699747288, 0.05465522578674731, 0.07532529613519179, 0.06031423769747002, 0.06030921018501345]}, "mutation_prompt": null}
{"id": "2286fdfd-70b2-48e9-a51a-1ff1edf992c1", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.4 * self.budget:\n                new_size = max(5, int(self.population_size * 0.85))  # Slightly different resizing factor\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Stochastic approximation for mutation factor\n                mutation_factor = self.mutation_factor * (1 - np.std(fitness) / (np.mean(fitness) + 1e-6)) + np.random.normal(0, 0.02)\n\n                # Enhanced mutation: weighted difference strategy\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover rate\n                self.crossover_rate = 0.7 + 0.3 * (1 - np.log(1 + eval_count / self.budget))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with stochastic approximation for mutation scaling and adaptive learning based on fitness diversity.", "configspace": "", "generation": 14, "fitness": 0.12509311879448035, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.13.", "error": "", "parent_id": "329805b5-d555-4d6b-942a-322b33a7a594", "metadata": {"aucs": [0.23270008363574524, 0.20137913845619781, 0.18674319041140452, 0.19838414801297388, 0.2001190131677949, 0.20068375143096195, 0.17979496468943945, 0.17562232716684645, 0.17242008549617205, 0.010926084229829214, 0.009346029814239265, 0.012144733289134124, 0.009884523457762362, 0.015272257450612003, 0.010741477409339839, 0.003562309676197084, 0.008838459922417718, 0.009243015008405742, 0.03712285460586917, 0.04552381682665929, 0.032069145163095114, 0.05814567039443208, 0.06404229377721427, 0.05712114411516811, 0.056984849831173245, 0.06017576136721159, 0.0668767358509953, 0.022932461233801216, 0.017455223644898044, 0.02918058365201681, 0.05508230469909703, 0.06362472962513532, 0.050857835991311884, 0.057581439879923146, 0.05367161557839428, 0.05811318804014809, 0.3537634530753483, 0.4747949467165298, 0.4314931096002621, 0.6410319207425303, 0.7279630661240429, 0.8717608682010403, 0.6477878477315118, 0.7616144353894293, 0.7007482516055262, 0.11312114709056786, 0.10323446282036841, 0.1089080529650257, 0.08003284796501464, 0.08090854190722896, 0.09513312262505291, 0.13645580981558925, 0.09133828385163656, 0.11961497532729648, 0.17795265394577287, 0.19467619780540213, 0.16589349922192465, 0.17248450892448997, 0.198726684085324, 0.1781418179024742, 0.17421896031426842, 0.21460454828594855, 0.17708600885712933, 0.0635863669235105, 0.07394537764850062, 0.07191453739650644, 0.047924495306299275, 0.0219249801532998, 0.034163584962424776, 0.07291455201682384, 0.05046551747977879, 0.052966354240758795, 0.07980691809712204, 0.06549044467377385, 0.06369447320872657, 0.06122388352726471, 0.07132374317064316, 0.0733895852988744, 0.08614401638664715, 0.0777887213660502, 0.06806133729588348, 9.999999999998899e-05, 0.00041174175317204575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001365492694257786, 0.0012302923547198308, 0.003324181088589784, 9.999999999998899e-05, 0.04136955038710988, 0.06877995013507465, 0.054025034317893406, 0.06345072621267278, 0.07051681224124462, 0.04558088684926975, 0.046472558140774556, 0.06370691548103768, 0.03924634160155316, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013429783801817585, 0.018137697448485368, 0.017078239613864787, 0.01937662110151195, 0.012090133158076388, 0.014002065025867205, 0.014636136738749195, 0.02414625763145939, 0.021997474224903835, 0.2003844423089155, 0.18724579229236227, 0.17956563224327582, 0.21025109307475742, 0.2079357251824957, 0.19499325134140366, 0.220613797517352, 0.19080118873222895, 0.20556630240696971, 0.054476849160535856, 0.05984147579632737, 0.06157192081505658, 0.0660156088973437, 0.05626724706593922, 0.05131918682104675, 0.06650113562291793, 0.05992227043013865, 0.08058074404928506, 0.13908344909317294, 0.12363999038016482, 0.15502258359882448, 0.1613246140656811, 0.14200879082096873, 0.12586784861543587, 0.14963138758589234, 0.16921300739085254, 0.12696116547146719, 0.1602710620254989, 0.15059180881326262, 0.16814906059237933, 0.17588174411442536, 0.17323584553509352, 0.1746007084209088, 0.16110839233412266, 0.17688420377742275, 0.1865718447191378, 0.14187290398271346, 0.13267977256753272, 0.14100599077534715, 0.11824698437082148, 0.12624604175325294, 0.12435361181762705, 0.10485936323867318, 0.13778615127635496, 0.13169616341597634, 0.13816324846732586, 0.15105250039140905, 0.14249695114384053, 0.15742261915457822, 0.18654687671830794, 0.1610317610233003, 0.15842135194304408, 0.15221162729223436, 0.16161759336265624, 0.14927510605146932, 0.15682933131020438, 0.16327198540850496, 0.16017005930657402, 0.1654820010778505, 0.1810833692204361, 0.16265928820282494, 0.1581742391876949, 0.17358004495725, 0.15592067040300717, 0.19374159435805993, 0.16129065902163076, 0.16753458361756035, 0.2133863920663861, 0.1611130088186712, 0.1358025117226318, 0.15314114386214928, 0.15960607695307027, 0.13576462326937822, 0.13020496244930324, 0.13976033108000518, 0.17831289040764353, 0.15257105520981296, 0.13126761998473435, 0.1609143438768892, 0.16713669844284273, 0.17064814216995872, 0.17417336984698284, 0.1845311761305224, 0.19150747797711465, 0.18855461155617625, 0.2135749380374129, 0.17730687649897192, 0.173986939601939, 0.1981165877906539, 0.20568880668582523, 0.0494449816434841, 0.052780486461791565, 0.06585155299632517, 0.05668445397194588, 0.059837884528427865, 0.052522600976621425, 0.07532529613519179, 0.057394879195763915, 0.05221427227424791]}, "mutation_prompt": null}
{"id": "3d27d4ad-3c2c-4aac-b320-7af6963b9823", "solution": "import numpy as np\n\nclass ImprovedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def levy_flight(self, lam=1.5):\n        sigma = (np.math.gamma(1 + lam) * np.sin(np.pi * lam / 2) / (np.math.gamma((1 + lam) / 2) * lam * 2 ** ((lam - 1) / 2))) ** (1 / lam)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / abs(v) ** (1 / lam)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.4 * self.budget:\n                new_size = max(5, int(self.population_size * 0.8))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor = self.mutation_factor * (1 - np.std(fitness) / np.mean(fitness))\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                if np.random.rand() < 0.5:  # Incorporate Lévy flights occasionally\n                    mutant_vector += self.levy_flight()\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                self.crossover_rate = 0.7 + 0.3 * (1 - np.log(1 + eval_count / self.budget))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "ImprovedDifferentialEvolution", "description": "Adaptive Enhanced Differential Evolution with Lévy Flight and Multi-Scale Mutation Strategies for improved exploration and convergence.", "configspace": "", "generation": 15, "fitness": 0.13233923078474372, "feedback": "The algorithm ImprovedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.14.", "error": "", "parent_id": "329805b5-d555-4d6b-942a-322b33a7a594", "metadata": {"aucs": [0.23745610218830226, 0.2046092394389022, 0.26403360025714595, 0.21408828745031616, 0.19989247264843568, 0.21180233435727192, 0.20841389084517437, 0.18572518608933009, 0.18802160733294804, 0.018618095348178376, 0.0010410552190350808, 0.02915174025424183, 0.016595604978909995, 0.0032128803333191236, 0.02237803456854126, 0.019237351526715463, 0.013983367504102562, 0.020014540133932335, 0.04648223299391263, 0.04933066519613294, 0.03899622642228373, 0.051583808171657974, 0.05968884552886444, 0.06743534463705858, 0.05621435724735968, 0.05740630246787659, 0.05961924221649928, 0.03127957283144445, 0.019353459447048804, 0.03236392597773663, 0.04959761056494427, 0.04048705955383103, 0.05421498460420371, 0.05595289549022475, 0.05848727265255094, 0.052597882990217615, 0.6431713289276628, 0.5579304685950676, 0.6761181043920461, 0.6833651254734978, 0.8487432587881947, 0.8103253609919115, 0.8012813336843899, 0.8229926118001817, 0.6996817096416726, 0.09525532592750408, 0.10525119573884512, 0.1187638138120517, 0.09878415536412777, 0.09156515396969411, 0.08630300048576212, 0.11943992228771949, 0.12196848609991684, 0.12454296429911793, 0.15453925648236055, 0.19308637766117165, 0.1702329558132829, 0.16368477764402978, 0.17865508355103998, 0.17266669187177996, 0.18284805781545188, 0.1874875282991073, 0.1828281211463647, 0.05748542466518336, 0.04909032569782068, 0.08380136810991112, 0.007207611443079132, 0.02118756432406932, 0.06307419275867321, 0.05390924388864382, 0.04520695212274983, 0.05043093280172217, 0.04940969837677456, 0.06340330479677414, 0.05827157119763082, 0.06198734427245878, 0.06695625867143717, 0.05456699768116524, 0.06861451495679372, 0.05559845780106698, 0.07094308733769361, 0.003515291221897865, 0.0001349352187699493, 9.999999999998899e-05, 9.999999999998899e-05, 0.011472441306286996, 0.0009171281967086387, 0.004106568516580089, 0.00020900627258446658, 0.006137156566296986, 0.049765393929761204, 0.1066282958383532, 0.06281300582566307, 0.08252013438240646, 0.06603697053244884, 0.03865287464631051, 0.060380205364705786, 0.04991591195385936, 0.047318473805926575, 9.999999999998899e-05, 9.999999999998899e-05, 0.00980198293271528, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001025504475778538, 0.012206192213902956, 0.022005493992505176, 0.018676826240631605, 0.014843314386207007, 0.010506614672395331, 0.01136400093672818, 0.020600766234332157, 0.021760678787990373, 0.01681516705788655, 0.01729254569141181, 0.22252722201789255, 0.2071784969594489, 0.19936235447167527, 0.2279115722127223, 0.20797679024554006, 0.20794646447168041, 0.2464615309126048, 0.21498566626822802, 0.22559183133494876, 0.04995607416863146, 0.050004113712003195, 0.04731198688114213, 0.05431600542955095, 0.053330867892954825, 0.05636847755475227, 0.0658890154863182, 0.07466029956978149, 0.06737985404268709, 0.13727203064625937, 0.13120164452782357, 0.13524996958670854, 0.15780064757054024, 0.1679498083005374, 0.136090101007717, 0.15021010748825425, 0.1768383009608837, 0.1408483860147488, 0.17654906340361465, 0.15378577005338956, 0.17209683179309665, 0.17319738252317451, 0.16951130073401632, 0.17381558131406816, 0.16702756440707867, 0.18066387248272076, 0.16533402500257832, 0.14020294595411853, 0.1306355098895816, 0.13318948284922993, 0.13445201412206664, 0.13542754856110584, 0.12487501971741743, 0.11704316484221111, 0.12791966143686573, 0.12883143814993836, 0.14507108671363345, 0.13788761354497603, 0.15692883875806563, 0.1679684501162717, 0.16245905625064427, 0.17194331785641948, 0.15770765645653861, 0.16337702072044136, 0.16354193551210006, 0.14919841610849238, 0.1585503079360766, 0.1700893290854265, 0.16059382275276024, 0.16092526175538535, 0.16142829960819782, 0.15464321740194942, 0.15994187318662734, 0.16730178645941796, 0.14026925537485202, 0.16917273625734142, 0.16619185397618108, 0.16961794121369733, 0.2221893641420949, 0.19210262013353163, 0.15338780032052513, 0.14583702466429527, 0.15760003272196832, 0.143014380967043, 0.1454982917147507, 0.27079356867552995, 0.21029588124935716, 0.19187580957045924, 0.1718296090912792, 0.16899329167424293, 0.16800424208171394, 0.1664160452487069, 0.17659351422757297, 0.18507370170192372, 0.19367434960532603, 0.194198942515991, 0.2135749380374129, 0.18476242058203107, 0.18634042371708637, 0.18097838567511426, 0.20568880668582523, 0.05779387506934941, 0.05165129023298609, 0.06959393390428814, 0.06726379342139122, 0.06410689671864, 0.052353336948110174, 0.07576452139661416, 0.05483930627478917, 0.050949594379594565]}, "mutation_prompt": null}
{"id": "dca95375-95d5-40e9-8c62-671545e055ec", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.4 * self.budget:\n                new_size = max(5, int(self.population_size * 0.8))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor = self.mutation_factor * (1 - np.std(fitness) / np.mean(fitness))\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Improved adaptive crossover strategy\n                self.crossover_rate = 0.7 + 0.3 * np.exp(-0.05 * eval_count / self.budget)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with an improved adaptive crossover strategy for faster convergence.", "configspace": "", "generation": 16, "fitness": 0.13192394393901438, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.13.", "error": "", "parent_id": "329805b5-d555-4d6b-942a-322b33a7a594", "metadata": {"aucs": [0.22326032215984637, 0.22772168404458804, 0.19211503480012804, 0.21829186614240337, 0.2043945851941067, 0.21212748389941916, 0.20157010528719344, 0.21587394367609536, 0.18032061305614666, 0.020111551250443505, 0.017132161949650393, 0.02217423892339887, 0.020996354053796296, 0.029972449753751795, 0.011699958025832902, 0.014933333392679327, 0.011619640244094231, 0.022060515050236984, 0.04559002651185351, 0.05099884619746953, 0.03368463541544553, 0.060122752007938485, 0.0658188501087803, 0.056893605579593, 0.07017782084590873, 0.0625962459302204, 0.06723426746424244, 0.022953427308511132, 0.015149668515456183, 0.028768542186533907, 0.0546856525803614, 0.046980884443248216, 0.04922760025731854, 0.058489556389907715, 0.05032335064407489, 0.05743441099354718, 0.4842667145120434, 0.5063059366807139, 0.3992010741044776, 0.7684507533698346, 0.8374328971984298, 0.812950692013759, 0.8384376269602164, 0.7230221690500079, 0.5374979243920034, 0.0930507653011331, 0.1086401704038148, 0.10349857719302835, 0.07076537786438952, 0.08630046833154192, 0.08522638454358733, 0.14340328327635776, 0.12029011535298284, 0.12142717338431863, 0.19393426745937936, 0.20707354808278877, 0.18795456941890032, 0.1720054264608134, 0.17438859790802685, 0.18360128537560738, 0.2053559558340483, 0.20021377841916121, 0.1956663252027242, 0.08797045376992174, 0.0720328759915062, 0.07657889317358602, 0.04075137467019774, 0.04422632982839225, 0.04609820757688654, 0.06712920725784821, 0.06773550665709505, 0.07233235751025235, 0.08216594842890756, 0.09643524852837859, 0.07979087847976529, 0.08874929138800602, 0.08385135551882872, 0.08857771164524697, 0.08278230557374466, 0.07857404584834515, 0.07038039970728571, 0.01941138032311296, 0.021869687427690798, 0.023638447042342192, 0.02647544789866696, 0.044713025227511416, 0.03901068128241225, 0.015188535665239367, 0.016429403201751125, 0.010353047668048232, 0.0822452613291309, 0.07585381563088944, 0.06343198047447207, 0.05037293088589445, 0.08472009097085231, 0.054752319074585776, 0.07178515665348384, 0.07583450647353729, 0.07250971669719386, 9.999999999998899e-05, 0.010539391843338297, 0.002341624155542399, 9.999999999998899e-05, 0.012404274845836283, 0.0014881629679617259, 9.999999999998899e-05, 0.020371055866913235, 0.007775134414121587, 0.017487447381557275, 0.01867475227937343, 0.01729031870914055, 0.027267103648892954, 0.018744547078486384, 0.0205350403309269, 0.016768346483661656, 0.01839194024308599, 0.027300774569978814, 0.2131257815207227, 0.1977610338920377, 0.18655410756770785, 0.22229095711588065, 0.19718424671052526, 0.2017321194567142, 0.22191443365625518, 0.19497284459795172, 0.21984190231450407, 0.051067720146861895, 0.05725180046546907, 0.06974080074400568, 0.06326407242316368, 0.05541683598122693, 0.06117884312791522, 0.07548344214103508, 0.07385396090714003, 0.07532425764061934, 0.13959981173802882, 0.12209369286665406, 0.13185133640678337, 0.17051531773323914, 0.14082030380225918, 0.13666257227878542, 0.14963138758589234, 0.12948172511124978, 0.15614833219336177, 0.1602710620254989, 0.1525299866038229, 0.16814906059237933, 0.184555899177542, 0.1959313437779997, 0.1760735412639033, 0.15735459466533663, 0.1770873291785351, 0.15771149460984257, 0.15246306550996158, 0.14663117118492341, 0.14252285529176412, 0.12286371651733463, 0.14402633794849096, 0.13636697559097788, 0.11113004311475327, 0.13469934097455438, 0.12193026652273342, 0.1466936131532116, 0.14696070157553554, 0.14118468780258497, 0.15991193635197343, 0.14476718205288508, 0.17987607740445766, 0.15374283331283956, 0.21093728583016724, 0.15804619537572562, 0.153941304863784, 0.16138351675705576, 0.15636751356327072, 0.17320803515806005, 0.1738377498677901, 0.16639469910525384, 0.1584336443518356, 0.16491079377736406, 0.16842294128205726, 0.13641497971227656, 0.20952302388272626, 0.16586483750339454, 0.18547799417543143, 0.2042442048447154, 0.17192722588109866, 0.1459936005048228, 0.14699799187449103, 0.16463086357205015, 0.18410555059586087, 0.14383489503949043, 0.15050821593711572, 0.1513927362904739, 0.13302628061092314, 0.13341965869906547, 0.1665833562169997, 0.1664545915164377, 0.1893680260466294, 0.17836462172042578, 0.19667140463868504, 0.17609851747031957, 0.2107041219537087, 0.2135749380374129, 0.1792175820508488, 0.17433463383446346, 0.18096734929672298, 0.20568880668582523, 0.06240945147111521, 0.05241760829799991, 0.06620072293735979, 0.05690272273573049, 0.06555117570492441, 0.051116738185177035, 0.07532529613519179, 0.05453602587683304, 0.053334121950020186]}, "mutation_prompt": null}
{"id": "80a883d6-71e3-4a32-8e2e-9db7d6ae999d", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.45 * self.budget:  # Adjusted threshold for population resizing\n                new_size = max(5, int(self.population_size * 0.75))  # Dynamic population resizing\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Enhanced mutation: dynamic factor based on diversity\n                diversity_factor = np.std(population) / np.mean(population)\n                mutation_factor = self.mutation_factor * (1 - diversity_factor)\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                self.crossover_rate = 0.7 + 0.3 * (1 - np.log(1 + eval_count / self.budget))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with adaptive mutation based on diversity and improved population resizing for better convergence.", "configspace": "", "generation": 17, "fitness": 0.11658749374014549, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "329805b5-d555-4d6b-942a-322b33a7a594", "metadata": {"aucs": [0.16834045273823017, 0.17678732104141304, 0.13347284088925937, 0.16462091782407262, 0.17126032839879213, 0.16253306018887903, 0.2315033627651213, 0.13733567521344814, 0.14878984631033965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038396378563625655, 0.04496310970400286, 0.030514424113925798, 0.02466262003992703, 0.03732066520661048, 0.03662342001376073, 0.039323021091705934, 0.03588651610472804, 0.03405517513607792, 0.022932461233801216, 0.015149668515456183, 0.028768542186533907, 0.01959972157639278, 0.01089740579551235, 0.0144346847797302, 0.03696417075239278, 0.013995737864724078, 0.029763828138413717, 0.9011037631889379, 0.901545512369827, 0.9052913448444037, 0.9046979287611618, 0.9057705279621495, 0.90218469860551, 0.9065108652831974, 0.9046048790464627, 0.9068306378817224, 0.06344281282558129, 0.07510940173832203, 0.10230989764161602, 0.052067424838013854, 0.06634163749781952, 0.03934596509779875, 0.09472457566024695, 0.052682181476422896, 0.08919533621105913, 0.11943061846237901, 0.19308637766117165, 0.1481850439168273, 0.07875439981616894, 0.08275626531536251, 0.08747239253350059, 0.07863895537483367, 0.11466285366481554, 0.1184282811445817, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026174016234413733, 9.999999999998899e-05, 0.014441083878865557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006526171681477733, 0.008028104616963128, 0.004139012375761197, 9.999999999998899e-05, 0.035362057023575866, 9.999999999998899e-05, 0.017993280776203546, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014918958768651791, 0.06535045920481664, 0.04490689360873623, 0.044669195072529644, 0.0234223620180537, 0.04469133800773706, 0.02545815389833972, 0.0339060597669375, 0.021772587117838915, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002539219412109217, 0.014843589207774843, 0.0004929715706289972, 0.008165961863018545, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003613853002291889, 0.0002248391361241442, 0.0031710321775688666, 0.2003844423089155, 0.18462911766473922, 0.186005807511461, 0.2055799784281095, 0.1776771365521368, 0.19226744717352073, 0.19726210125892918, 0.1548154236718794, 0.1891480374906228, 0.05400426538883729, 0.05821966579901561, 0.0501308415108872, 0.0338782750261738, 0.03398609462808322, 0.038317682108378937, 0.034547357403104995, 0.03120469247310753, 0.04683272553072526, 0.14948363626709849, 0.1331658892667501, 0.13212983230088926, 0.13766266535167793, 0.13886811994047443, 0.15042242711426257, 0.20570401717374587, 0.13783522521205616, 0.15097609099733034, 0.1707274896194032, 0.15059180881326262, 0.16814906059237933, 0.14217434856011568, 0.14857952897030824, 0.161856142914947, 0.16848638414478467, 0.18229007078478532, 0.16075981587429378, 0.09445724495899854, 0.09574879604014519, 0.11642567714002616, 0.09373791699045797, 0.12092313537362531, 0.10574625022466988, 0.11149672944210576, 0.13138950727398424, 0.10513093845869093, 0.13660975675650866, 0.13713559792232954, 0.1370036645952668, 0.14040474191590024, 0.13115840598582018, 0.14941079401652335, 0.14051810624462013, 0.1380410414912887, 0.15384279319850125, 0.1319193168884849, 0.14205085413662677, 0.14006577975982915, 0.13374366089686696, 0.1341421261535758, 0.13928752906414898, 0.1358893261205616, 0.13491564351385854, 0.16207881422481074, 0.1186220673767655, 0.16679477618376493, 0.16471027304002728, 0.15176503580803635, 0.1398880001482321, 0.12554785717242034, 0.12917674760088482, 0.1370094409671868, 0.15734365961366015, 0.12143021727895831, 0.10970974939691203, 0.12206946191677615, 0.12243568601980881, 0.10228518024506517, 0.10913184713065671, 0.1609143438768892, 0.1659930928253145, 0.131902487303451, 0.1672033181983903, 0.19818378399477454, 0.17025490104907637, 0.18683568409856555, 0.2135749380374129, 0.17163598010110526, 0.1780564984096552, 0.17996066980729408, 0.20568880668582523, 0.038285013558567726, 0.0476667368595004, 0.06585155299632517, 0.0496458412526628, 0.058815507864153016, 0.04631565748941047, 0.07532529613519179, 0.0518308563739136, 0.03968536562315572]}, "mutation_prompt": null}
{"id": "a7a4d8e1-bef5-4677-a319-ed355cbb5648", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.4 * self.budget:\n                new_size = max(5, int(self.population_size * 0.8))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor = self.mutation_factor * (1 - np.std(fitness) / np.mean(fitness))\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Fitness-based adaptive crossover rate\n                self.crossover_rate = 0.7 + 0.3 * (1 - (np.median(fitness) / np.max(fitness)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introduced a fitness-based adaptive crossover rate to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 18, "fitness": 0.1358664478666776, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.13.", "error": "", "parent_id": "329805b5-d555-4d6b-942a-322b33a7a594", "metadata": {"aucs": [0.23686571289920466, 0.24383314490072994, 0.2147488720019578, 0.2181802590846822, 0.2631294513431577, 0.24441131524142234, 0.23039692213795948, 0.1492404529913407, 0.18085249790046454, 0.013215427348285402, 0.019961710346490857, 0.024233917552941242, 0.03172700517463123, 0.02982039311468654, 0.027309255696291057, 0.011624544040068407, 0.025894457805364035, 0.012848762032036776, 0.05439021652201714, 0.049338700687344694, 0.03713368548855611, 0.07629133567883073, 0.06581916022323786, 0.07332706555464141, 0.10630149097832309, 0.07547177785853765, 0.0675583876773369, 0.022932461233801216, 0.015149668515456183, 0.034281486622759205, 0.0607999010871525, 0.060895404015689714, 0.053386095167124226, 0.058698114792485434, 0.056398081338739026, 0.06812106753573366, 0.47218735116306043, 0.43068944685965493, 0.5516234678787744, 0.7518381906807828, 0.7625863961900293, 0.6692907258176719, 0.8394119937211264, 0.7560681174933954, 0.618999276693174, 0.11352267956253459, 0.1253653623221871, 0.11559435732148615, 0.08355430495712646, 0.07866782769316283, 0.08654920858942372, 0.1244063914754957, 0.1307513157524901, 0.15832813145101898, 0.16036131028032918, 0.20531945248619776, 0.25078058861173314, 0.19261871029086342, 0.19933457630040463, 0.18757303844990703, 0.20412318096430881, 0.24032420335291393, 0.19607544804715615, 0.0958484669627373, 0.060784266098425355, 0.06569203068389706, 0.05059590422059024, 0.027442318938311616, 0.033119164426020475, 0.07943775374844864, 0.07195016913009422, 0.0675206636022041, 0.07499168530610045, 0.1008892431594719, 0.0664488527847581, 0.08541323401344925, 0.09589089922936578, 0.08755280344890981, 0.07904613033815244, 0.08132331475584831, 0.0763397122948456, 0.01884429878434346, 0.020499656520997944, 0.01868168165908568, 0.03047837661399866, 0.017777147326780707, 0.005463033308440002, 0.02365174769083045, 0.008047251314618697, 0.010383706275667981, 0.06685759937989133, 0.09118179678745597, 0.08825128562360407, 0.06718220835691957, 0.07733754081238275, 0.05443439691149177, 0.07609121009610154, 0.06101651845241629, 0.0578490474005362, 0.004964662214141935, 9.999999999998899e-05, 9.999999999998899e-05, 0.002986356633046472, 9.999999999998899e-05, 0.011707416403727633, 0.027308695642608294, 0.01736384542578595, 0.017211417444343513, 0.02429059456172722, 0.019839116878507035, 0.012417409335670926, 0.021391459533091073, 0.01643734264936214, 0.02601974502075277, 0.017901502274728975, 0.011015255078540731, 0.02619285638835933, 0.22063007691211345, 0.21816053921216094, 0.21177777447335, 0.22521982846179112, 0.19959423703270807, 0.2128707794272322, 0.2390891502463246, 0.2529836937967006, 0.2290445132219806, 0.05418346945003538, 0.05258015958565976, 0.05076976759035501, 0.060801349623810674, 0.05987974171083754, 0.055108350839973896, 0.06710846927042458, 0.08911981439179872, 0.0891258948260153, 0.15244851321918673, 0.14178581539364243, 0.14163896704775647, 0.13996474730055575, 0.13806106335733836, 0.1130594502439004, 0.14963138758589234, 0.14903167769387493, 0.17981408142966926, 0.16793333743786676, 0.15148658482101873, 0.1684951789554412, 0.17333392028152617, 0.19393589525130106, 0.18971182237734918, 0.16319533968762245, 0.18973537830775278, 0.17092310837636648, 0.12956747440746819, 0.14341944292827502, 0.1269817595327598, 0.13808266094873056, 0.13325250831792235, 0.14213951786858814, 0.11654274883458571, 0.12968275723854827, 0.12496887286454128, 0.13972923016099426, 0.14762421696742478, 0.1561288555949354, 0.16687279475614414, 0.1588331557058673, 0.15945747264866006, 0.15326927357707887, 0.1647920641034294, 0.1673809176209421, 0.15196351592260904, 0.15974285993511805, 0.15561025286701857, 0.16121210665031216, 0.17503569780983452, 0.17018175268503, 0.16134985728014706, 0.16525849260638603, 0.1722404325189163, 0.21729986020190561, 0.218358047000626, 0.1593083731255257, 0.1961601384696947, 0.17131505799318036, 0.22303903676518755, 0.19322368445134042, 0.21456072729432307, 0.15863113839672893, 0.1794101987438138, 0.16606506705344015, 0.16963224848095015, 0.12209493120332315, 0.14168810733546655, 0.12847669430842668, 0.1691188455783209, 0.2147917109335974, 0.19746057573695164, 0.1756503721630286, 0.1864577380186816, 0.1887420164172109, 0.18683568409856555, 0.2135749380374129, 0.17902507383609267, 0.19558603343916392, 0.19721842917478172, 0.20568880668582523, 0.055390526903800086, 0.0674245788433423, 0.06604188116969145, 0.07451103532209657, 0.0670869899025871, 0.0593198055283054, 0.07532529613519179, 0.05505922068438851, 0.051829249638314145]}, "mutation_prompt": null}
{"id": "3fcbee35-67cb-4a27-9814-033dc95ec00b", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.4 * self.budget:\n                new_size = max(5, int(self.population_size * 0.8))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Dynamic mutation factor based on population diversity\n                diversity = np.mean(np.std(population, axis=0))\n                mutation_factor = self.mutation_factor * (1 - np.std(fitness) / np.mean(fitness)) * (1 + 0.1 * diversity)\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Fitness-based adaptive crossover rate\n                self.crossover_rate = 0.7 + 0.3 * (1 - (np.median(fitness) / np.max(fitness)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introduced a dynamic mutation factor adjustment based on population diversity to improve convergence speed.", "configspace": "", "generation": 19, "fitness": 0.1296620240230319, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.13.", "error": "", "parent_id": "a7a4d8e1-bef5-4677-a319-ed355cbb5648", "metadata": {"aucs": [0.2512094097472508, 0.23982913159664299, 0.22772484298126594, 0.19445903734743986, 0.24108318876501522, 0.20982893481956744, 0.2393789897030807, 0.12676791299444923, 0.1544760314633704, 0.012391251536013947, 0.02016420946043962, 0.02746030264301358, 0.006245872964085408, 0.01600508790253885, 0.016473813886972333, 0.0057090925251163105, 0.028870582939611422, 0.02534225111487265, 0.0385997486506936, 0.05015443883803694, 0.03590695784814546, 0.05925895310605589, 0.0634160977078333, 0.07043946881368279, 0.06444987267000069, 0.06025494417921273, 0.05363675090075681, 0.022932461233801216, 0.015543647685896445, 0.03502941926781589, 0.07756395845925579, 0.056384182505579195, 0.05443569260664094, 0.06694510812466092, 0.051689911845165804, 0.056346993948863, 0.4847971993392409, 0.4591767228318073, 0.45709771341753236, 0.6640516383170683, 0.7620994868048516, 0.6641526066644992, 0.8612166080018384, 0.7559618678065013, 0.6654712768339004, 0.1092178007105471, 0.11692220772990491, 0.10662835541782878, 0.06434541990362574, 0.0811013984684078, 0.10175733281698718, 0.11137251300700413, 0.13579152134859118, 0.11116403582114998, 0.15094229341800525, 0.20296103378402208, 0.15847420577992166, 0.19854879809536974, 0.17920016260277438, 0.16476716553488735, 0.19142528189388475, 0.19620957042685783, 0.19130301883607026, 0.07257774136374828, 0.07264489303948374, 0.07703998757185104, 0.019782249493399795, 0.028394334001091703, 0.05184198554876707, 0.06677194616158066, 0.06072770903450764, 0.06873927748165898, 0.06454051303608088, 0.0861834389977737, 0.0693691180815853, 0.08912020981786573, 0.08830697173854873, 0.09393974259988569, 0.07378737686193304, 0.07242294337073019, 0.09395151901356225, 0.0008450905076042847, 0.024242541355792846, 0.0222085864505851, 0.01773261464446385, 0.025425708153348436, 0.032326460814317226, 0.014272149541381118, 0.013881827676216929, 0.007799774161822315, 0.07104698375918217, 0.07173483003478376, 0.09006794491796066, 0.05314036311389447, 0.06945189430531196, 0.04809566462465775, 0.10240317069046867, 0.06680609582194774, 0.06176283855161924, 0.0038195370458575795, 0.0068837810352117, 9.999999999998899e-05, 0.005846403559364832, 0.012120292173578351, 9.999999999998899e-05, 0.016635303705598736, 0.024106637437053324, 0.00673752048534515, 0.03194642043102791, 0.025165241373272362, 0.02070250607121249, 0.0111943315631019, 0.014842468672435105, 0.013188730857193742, 0.050459030356747814, 0.013585595311414678, 0.013539896599984225, 0.2182513993676809, 0.19964480218635594, 0.19812076062598005, 0.21642390622612406, 0.18981637973705845, 0.2186833179644211, 0.22679527197773952, 0.2374144328611557, 0.21700870158633712, 0.050497690091447334, 0.057116490546277654, 0.05685550187817212, 0.05188798323271859, 0.0534805510934393, 0.0545400846445413, 0.06303866579281514, 0.09082285617995345, 0.06728963476399297, 0.13709410100555053, 0.14416058118532782, 0.13305818821907978, 0.146671773334351, 0.13646215209043477, 0.11543614239672328, 0.16096953316378226, 0.12732594227386707, 0.13301851408412968, 0.1602710620254989, 0.15459944877305953, 0.16814906059237933, 0.1697461520692568, 0.18694542981061024, 0.17799439123826255, 0.16560126455431323, 0.17836006628278478, 0.15933432045555018, 0.14611555260969322, 0.13287652153894036, 0.1353041960431257, 0.13265348442569735, 0.12913079097983793, 0.13933256842824326, 0.10674369065851574, 0.12868951739553536, 0.11483376906912512, 0.13394394348349692, 0.13448311506996413, 0.13858818205244483, 0.16359236937550137, 0.15691173082234855, 0.16055874648118973, 0.1553598950769971, 0.1654614581035534, 0.16939913232139658, 0.15652182447838225, 0.15678820104322022, 0.15267035848108224, 0.16289491834116887, 0.16797205379984248, 0.16662223583928626, 0.16648443523291157, 0.16086433425495816, 0.17680296852675037, 0.1672291701904164, 0.16679605759685767, 0.1636082209731392, 0.18101345033883576, 0.2549824821273081, 0.15303795955098143, 0.15255051826349986, 0.1403733352078842, 0.1884075670833445, 0.1485426556190017, 0.12581673379390845, 0.12997956586545611, 0.12966142381256507, 0.13894450216287602, 0.12482867680971999, 0.1630619447948477, 0.16527833940859205, 0.21215231931290557, 0.18177282353529922, 0.1840951386782479, 0.18425726791035857, 0.1881751484390034, 0.2135749380374129, 0.18673955636232553, 0.18199938248118375, 0.1863392469255386, 0.20568880668582523, 0.053962518551357475, 0.054094120016522584, 0.06585155299632517, 0.05165315711421137, 0.06213198646854112, 0.049916766947832536, 0.07532529613519179, 0.0583614936935275, 0.045380535425924795]}, "mutation_prompt": null}
{"id": "283eedf9-5e1b-4aea-9efb-6277175f7210", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.4 * self.budget:\n                new_size = max(5, int(self.population_size * (1 - np.std(fitness)/np.mean(fitness))))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor = self.mutation_factor * (1 - np.std(fitness) / np.mean(fitness))\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                self.crossover_rate = 0.7 + 0.3 * (1 - (np.median(fitness) / np.max(fitness)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introduced a dynamic population resizing strategy to enhance adaptability and convergence speed in varying landscapes.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 1209 is out of bounds for axis 0 with size 1000').", "error": "IndexError('index 1209 is out of bounds for axis 0 with size 1000')", "parent_id": "a7a4d8e1-bef5-4677-a319-ed355cbb5648", "metadata": {}, "mutation_prompt": null}
{"id": "7232cb3b-806a-4627-99cb-3a9445b376ef", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # Dynamic population reduction based on fitness diversity\n            diversity = np.std(fitness) / (np.mean(fitness) + 1e-9)\n            if eval_count > 0.4 * self.budget and diversity < 0.1:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor = self.mutation_factor * (1 - np.std(fitness) / np.mean(fitness))\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                self.crossover_rate = 0.7 + 0.3 * (1 - (np.median(fitness) / np.max(fitness)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced exploitation by incorporating a dynamic population reduction strategy based on fitness diversity.", "configspace": "", "generation": 21, "fitness": 0.13337431546729775, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.13.", "error": "", "parent_id": "a7a4d8e1-bef5-4677-a319-ed355cbb5648", "metadata": {"aucs": [0.25700915801083646, 0.23841958519976425, 0.2475858952022424, 0.22890197921565536, 0.3404672166348097, 0.3199455705532317, 0.2733883632989127, 0.15693329158943603, 0.2793484749766296, 0.015252619430855874, 0.014598328699839125, 0.006692601988729452, 0.011332144264639132, 0.007977818402105208, 0.010537492901724566, 9.999999999998899e-05, 0.0022244984383360533, 0.00010931775968603397, 0.07288765779878936, 0.04734583165854678, 0.05520181994106954, 0.06635513404831161, 0.067672115045886, 0.06684631086934989, 0.10630111451488722, 0.0678110470898533, 0.06197128370640803, 0.022932461233801216, 0.015149668515456183, 0.028768542186533907, 0.053472752114058886, 0.05459723711184017, 0.05308951269206408, 0.054958158933111956, 0.050716911548963295, 0.06548208020913626, 0.39979861278553075, 0.4138740706450088, 0.29914399236554523, 0.7518381906807828, 0.7625863961900293, 0.6692907258176719, 0.8394119937211264, 0.7560681174933954, 0.618999276693174, 0.1028571369244844, 0.10528153319793543, 0.10810684130119463, 0.0828477859373199, 0.06644363163259259, 0.0804439259519526, 0.1244063914754957, 0.12746302468339232, 0.1581295673091676, 0.15186357599299938, 0.19308637766117165, 0.25078058861173314, 0.19164766544477596, 0.16664508504277398, 0.17468248684938137, 0.1832044503983853, 0.21234312481602424, 0.18892028572271724, 0.09418193914680795, 0.05527866355889688, 0.05242092705571355, 0.05059590422059024, 0.027442318938311616, 0.034005969845134265, 0.07737202085461015, 0.060948871978171115, 0.062226532963023384, 0.08923626629315773, 0.10119692789065104, 0.06307793795448813, 0.1044107541867767, 0.08929140355518217, 0.07723648959033813, 0.06767114599905, 0.09761211084844768, 0.07377696958272262, 0.004101098036665141, 0.004286514228240557, 0.0008122599849026413, 0.0067356264012538025, 0.00042907643884537716, 0.0063213739789469425, 0.008796762781388634, 0.009832090673405736, 0.004233672864103033, 0.04419969244511013, 0.08567570179223827, 0.07165564400993885, 0.062475718547662984, 0.06198075306507689, 0.03933058751759422, 0.07727473225384762, 0.05421564031161963, 0.05183490637964727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030259756953584516, 0.01059386542228058, 0.015025829671932667, 0.011224480709164375, 0.01873331313093418, 0.00697310352464553, 0.017901502274728975, 0.011492913829672768, 0.02619285638835933, 0.25076121682275, 0.23505570220896888, 0.2310009254346974, 0.2055799784281095, 0.24351890197516757, 0.24247909481052177, 0.23229587019029796, 0.26511725508313666, 0.24898731302388966, 0.055385154616008236, 0.06023018131262803, 0.05524597598915648, 0.056807654906991245, 0.05961354169370281, 0.05850053052610871, 0.07566008309502992, 0.08911981439179872, 0.06756389610382607, 0.15244851321918673, 0.14156548363735633, 0.13269053418449328, 0.1444015802522326, 0.14265424511801705, 0.11155928719120034, 0.14963138758589234, 0.14094308382593423, 0.17981408142966926, 0.1602710620254989, 0.15148658482101873, 0.16814906059237933, 0.16358433903724978, 0.18871161164308392, 0.17863901902782997, 0.17118896441937648, 0.2062793355117103, 0.17863916861083762, 0.12956747440746819, 0.14341944292827502, 0.1357391539277678, 0.128104880718667, 0.12742434487212628, 0.13282428715186612, 0.13918584710769333, 0.1493110055729172, 0.1359636248809427, 0.14093465726679222, 0.14508309967312039, 0.1561288555949354, 0.16951510679545767, 0.15814174980225892, 0.1781518371875549, 0.160765263738208, 0.16296222055357412, 0.1691546998839778, 0.15146343129705198, 0.15974285993511805, 0.15561025286701857, 0.16788797602226058, 0.17271703134461203, 0.1679959877485322, 0.1612071697571701, 0.16674562727708475, 0.17331113511562712, 0.19329893539144383, 0.218358047000626, 0.1664402026676789, 0.1940509682864523, 0.17131505799318036, 0.15483385873294353, 0.1467978807318432, 0.21456072729432307, 0.15796156227984826, 0.21103073524016214, 0.1725958935455838, 0.15189221076299653, 0.13023396012336563, 0.15543348535063994, 0.14888029763543253, 0.16461185115163246, 0.2147917109335974, 0.19746057573695164, 0.1765638602423114, 0.1879119045649721, 0.18717955771752326, 0.18683568409856555, 0.2135749380374129, 0.18873802362731096, 0.1957457620946842, 0.19721842917478172, 0.20568880668582523, 0.05430082433704697, 0.06666894702841386, 0.06585155299632517, 0.07451103532209657, 0.06648117261662922, 0.0656751208498747, 0.0753668887131762, 0.0548789063831735, 0.049685611462755186]}, "mutation_prompt": null}
{"id": "c18883ad-8d3e-43c7-8756-380ca73d6197", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolutionImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.initial_mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.4 * self.budget:\n                new_size = max(5, int(self.population_size * 0.8))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Dynamic mutation factor adjustment\n                mutation_factor = self.initial_mutation_factor * (1 - (eval_count / self.budget))\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Fitness-based adaptive crossover rate\n                self.crossover_rate = 0.7 + 0.3 * (1 - (np.median(fitness) / np.max(fitness)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolutionImproved", "description": "Introduced dynamic mutation factor adjustment based on iteration progress to enhance convergence and maintain population diversity.", "configspace": "", "generation": 22, "fitness": 0.13283078410401927, "feedback": "The algorithm EnhancedDifferentialEvolutionImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.12.", "error": "", "parent_id": "a7a4d8e1-bef5-4677-a319-ed355cbb5648", "metadata": {"aucs": [0.2500806829044746, 0.24582199015024142, 0.2497646316291794, 0.2718845551152044, 0.24969260330615028, 0.24172466019298766, 0.17620491874863398, 0.13454870531969898, 0.14097331335078267, 0.015914999443993327, 0.03995407745331181, 0.016554876580966216, 0.03684757571235353, 0.010594188744513344, 0.02995544703034103, 0.01429027457403298, 0.03473731531607005, 0.02284521825520147, 0.05339780550001383, 0.049967792055209403, 0.06630836116958594, 0.07121855960879764, 0.06369991797648888, 0.0719248955566858, 0.07633769232426058, 0.07347994582102024, 0.07222011019710595, 0.053255069599819405, 0.048241921418357925, 0.0485900919787855, 0.0512565987357162, 0.05085836902745555, 0.051702411886590194, 0.060360385690268026, 0.05675555788931341, 0.05661787471125357, 0.16891537700054526, 0.23267307268587434, 0.7035452625041448, 0.2117485517231028, 0.722665623453943, 0.40960239907678797, 0.8611508509255622, 0.758462510882081, 0.22022553293784908, 0.11471883150615536, 0.10132766461789311, 0.11390673160860265, 0.09351835419820187, 0.10415503519417002, 0.110346519708726, 0.10972087972865707, 0.09948799786236084, 0.10911750541178333, 0.17464420673818093, 0.21144435409822904, 0.17704842484819894, 0.17878352915999163, 0.17900494105077558, 0.17344740343435117, 0.17014504418937926, 0.20391367797785998, 0.19417700282144923, 0.06607948404789332, 0.05814741321533734, 0.07294878975253538, 0.05117127434960678, 0.046924861967375775, 0.041280463786683375, 0.048710700395067974, 0.06391214447642357, 0.055167173485783816, 0.051146852151483846, 0.04335751751917283, 0.046046443518928726, 0.05823274863944827, 0.06937474533515975, 0.04512714276091534, 0.06632790761363017, 0.04705433840704121, 0.04898814971109844, 0.010360392071563362, 0.015001645150653387, 0.02115308845328434, 0.016110083842304612, 0.027493206152927052, 0.01330802667224884, 0.01633080687716737, 0.021518747241861313, 0.018262150215760498, 0.09519245859297576, 0.11350795592382235, 0.0998927378417418, 0.10796455480099998, 0.09430675417461676, 0.0949728212888149, 0.12939591485328705, 0.10500162966528281, 0.10733654575072649, 0.007502639516238752, 9.999999999998899e-05, 9.999999999998899e-05, 0.00809693281847812, 9.999999999998899e-05, 0.001972147432719451, 0.0035011029170988195, 0.007151150313980392, 0.008350427825362439, 0.027185010536193266, 0.02658411151678719, 0.023922505759671364, 0.03342109715960628, 0.033975297472945365, 0.04257511419629045, 0.026618300144173213, 0.018146728923838618, 0.016616976348785784, 0.2484162166692423, 0.2354686052047119, 0.24146960724350974, 0.24435266619537221, 0.23394758965021634, 0.21810299952868362, 0.26373412009350705, 0.2625195247972325, 0.24905984585347496, 0.06720012947751053, 0.0832172805164868, 0.06425882359989321, 0.06365461098282144, 0.05777478274861536, 0.06140391045440852, 0.0596500284773821, 0.07298520173985468, 0.07632525670607992, 0.1563672522232198, 0.1490174265491061, 0.16155325240022722, 0.14028305870632396, 0.13511880823300437, 0.11439162855669982, 0.15664332898832856, 0.14600117190741602, 0.1388785021380381, 0.18747110203562178, 0.1770334774280018, 0.18384342866123948, 0.18358024642610693, 0.19300380600473055, 0.19555351479458716, 0.18551670006290777, 0.20204186949425107, 0.19430299543746554, 0.13809388787114818, 0.12754535825353464, 0.15416290230474916, 0.13774795349798719, 0.15204831634553595, 0.1335091434361224, 0.13143480841518995, 0.14029190108123546, 0.13032979277164103, 0.1593893120365918, 0.17968420346377678, 0.16332372264094241, 0.16712873857227128, 0.192984946613451, 0.17602652409323216, 0.1654347139699659, 0.17887113888639017, 0.18870422214272276, 0.14927259232394985, 0.15890982737247905, 0.16130636933901865, 0.15632532924811626, 0.15741873631999226, 0.16027769528779667, 0.16242193636537994, 0.1550712045312561, 0.17097008264753455, 0.22253991182788224, 0.2631825071162097, 0.2263380599461421, 0.2573969874667137, 0.1808145264577371, 0.25604496604853344, 0.159021013247022, 0.18708950354691556, 0.20531446902893746, 0.16428481648375404, 0.2010394962825982, 0.17407542336204318, 0.39698541584196656, 0.19112932268925975, 0.16778980499378415, 0.17315874736088444, 0.17993910961684267, 0.19404132973026023, 0.1796446400205095, 0.18492293681529148, 0.17484036611313258, 0.18692896418599225, 0.2135749380374129, 0.1796274042338769, 0.1828416773054613, 0.19039606302433754, 0.20568880668582523, 0.0597427898103986, 0.06476156977689784, 0.07262208403433457, 0.06379320650981612, 0.0743679349003531, 0.06433405890108335, 0.0768026588104842, 0.06467409690905679, 0.05936373562260577]}, "mutation_prompt": null}
{"id": "c61f29f9-f39e-40bd-90db-2d52f3562de2", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.4 * self.budget:\n                new_size = max(5, int(self.population_size * 0.8))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor = self.mutation_factor * (1 - np.std(fitness) / np.mean(fitness))\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Stochastic perturbation for increased diversity\n                if np.random.rand() < 0.05:\n                    mutant_vector += np.random.normal(0, 0.1, size=self.dim)\n\n                # Fitness-based adaptive crossover rate\n                self.crossover_rate = 0.7 + 0.3 * (1 - (np.median(fitness) / np.max(fitness)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced population diversity with stochastic perturbation for improved convergence.", "configspace": "", "generation": 23, "fitness": 0.13383653375860619, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.13.", "error": "", "parent_id": "a7a4d8e1-bef5-4677-a319-ed355cbb5648", "metadata": {"aucs": [0.2538017323592121, 0.23287403865741096, 0.2440558749135041, 0.238983949624326, 0.23049635440865635, 0.23248430714796886, 0.21621557626855137, 0.17034972838515183, 0.16405159122114488, 0.014874564311156191, 0.02651893843234976, 0.01122599332604679, 0.02513245317473156, 0.025932972957202538, 0.016827656917962175, 0.017709866389545414, 0.010361034780674183, 0.01053742720737827, 0.05528468101434081, 0.05180011448706989, 0.04630165142277598, 0.06872065684381201, 0.07575369742144411, 0.06637923492399755, 0.07019236601287415, 0.06467490462098724, 0.05979769014569902, 0.033712742821016994, 0.017453056949045975, 0.034612948941240784, 0.06685261198618031, 0.05542081579697966, 0.06002372766768871, 0.05573264826892077, 0.055063565214270915, 0.051251357105661755, 0.40899505331531605, 0.32785357962621087, 0.43280368935135627, 0.7395487443934203, 0.6311859577846173, 0.7882621553835415, 0.7615875515169711, 0.7021320889893443, 0.7441788098197863, 0.119566369323033, 0.11386980892464749, 0.11328937932981786, 0.11128801876761896, 0.10314356288834603, 0.09508182637088847, 0.12816665960292706, 0.10354907888410902, 0.1203063203144511, 0.16253927394077805, 0.20190716069637982, 0.18682676591223668, 0.19184102464821084, 0.18995252489074055, 0.2262720527136165, 0.19902632492433936, 0.2593137346890546, 0.247595754892588, 0.07658283254311427, 0.06413218405379162, 0.1027721512020966, 0.036237137412394094, 0.05748186324634441, 0.061630516274665426, 0.08590190679515075, 0.07784869298305674, 0.06768365609616844, 0.08177918293108455, 0.08712264243027368, 0.07596496198934832, 0.08069639066531331, 0.08101353253667554, 0.09853892545235465, 0.08944404980823961, 0.08596418632870295, 0.07740284824014143, 0.015886296088624685, 0.014891007001482826, 0.016247772027837337, 0.010494342188127836, 0.029480474913807897, 0.024454265749525583, 0.0046818862539595996, 0.005194894903088221, 0.005304753090519254, 0.06715150144001947, 0.0864049984047579, 0.09500184880642104, 0.1081400928854015, 0.10694096776056561, 0.08097586027340453, 0.06034405274300336, 0.06983900701538148, 0.07797298857508472, 9.999999999998899e-05, 0.00010270771372455911, 0.00028725044344135586, 9.999999999998899e-05, 0.01084399784131218, 0.0015806630204308059, 0.023877154563551106, 0.025899683013117847, 0.017671845086734916, 0.0236382934496987, 0.0318384215790396, 0.01860373773675361, 0.02000159252859779, 0.015197093568102171, 0.018371124299516817, 0.0038968291350085504, 0.019052567807271603, 0.014369470031589837, 0.22033173183063093, 0.19662649210199823, 0.2117788285719191, 0.23282809109539238, 0.20817599704329404, 0.2185597260867541, 0.23929365337070962, 0.21631475408849044, 0.22138873121410108, 0.055356508124671966, 0.05670101286194551, 0.05452951923539151, 0.06632616725762785, 0.06180681738829896, 0.05256828358454535, 0.07212397626602418, 0.06722983972135899, 0.07495454605218088, 0.13814110366465193, 0.14090389301970296, 0.1421925302737489, 0.15832427015114425, 0.13939741157850982, 0.11828014035989287, 0.14963138758589234, 0.1440387615610309, 0.14907595533218032, 0.1672743348687007, 0.15675335404722468, 0.16814906059237933, 0.18995472473665076, 0.17359016110721237, 0.18340665463175743, 0.1660187445286161, 0.19314311560316444, 0.18492922074139329, 0.13703973571452932, 0.12611676513874848, 0.1341056213985412, 0.13195635956534768, 0.1461768249708283, 0.1335608450929614, 0.1345342488019885, 0.1377985415909394, 0.11077709910341382, 0.13952423916693546, 0.14222433500395604, 0.16217438051469313, 0.1603104565503103, 0.1535871257019682, 0.16822552995877982, 0.15301923577421672, 0.17306027449528316, 0.17386275860527, 0.1612473546262747, 0.16713367013297242, 0.15440379078944155, 0.16375873202513846, 0.17009946077768545, 0.17351040035535115, 0.1575247819164297, 0.16305443636819805, 0.17262900156568717, 0.24784411513231575, 0.16967908104963658, 0.16654661740080523, 0.20115703845329624, 0.1563831080019492, 0.19799438650963253, 0.2443776357895654, 0.14410108361466578, 0.20451753672997963, 0.14088734752242493, 0.1552205866829076, 0.13595536130757668, 0.14046061528914566, 0.17116062148036415, 0.15835988006192092, 0.1609143438768892, 0.1708447318185321, 0.15250827232930697, 0.17719540669882694, 0.1840951386782479, 0.19046328616128694, 0.18861436548466493, 0.2135749380374129, 0.1786183728983256, 0.1758790963993937, 0.17743883405769612, 0.20568880668582523, 0.05750465709638197, 0.05483067680598086, 0.081789352392311, 0.05213154922019314, 0.06061977412329489, 0.057716916478395386, 0.07576019915522725, 0.05922057939770298, 0.05253856610262797]}, "mutation_prompt": null}
{"id": "1ec64cd4-53b6-480b-afc8-73075d8c5e25", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.4 * self.budget:\n                new_size = max(5, int(self.population_size * 0.8))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Introduced mutation factor decay\n                mutation_factor = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / np.mean(fitness))\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Fitness-based adaptive crossover rate\n                self.crossover_rate = 0.7 + 0.3 * (1 - (np.median(fitness) / np.max(fitness)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introduced mutation factor decay to gradually enhance exploitation over iterations for faster convergence.", "configspace": "", "generation": 24, "fitness": 0.13846581636891486, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.11.", "error": "", "parent_id": "a7a4d8e1-bef5-4677-a319-ed355cbb5648", "metadata": {"aucs": [0.26118109979385185, 0.26233429165936073, 0.26419314705034236, 0.25309963026431825, 0.25368169035860855, 0.23405361222908272, 0.18045197805942093, 0.13332561619471672, 0.14097331335078267, 0.017679272062378404, 0.02917865425752264, 0.022285540782261193, 0.038225924290475444, 0.01382519961336015, 0.019368064688161435, 0.00031455569607241607, 0.025103301587648952, 9.999999999998899e-05, 0.04221816144506574, 0.05543349606413761, 0.05156624927179676, 0.08373803391526746, 0.08089303546776339, 0.08540028609055228, 0.08198577218556713, 0.07869173357763959, 0.09193138619553798, 0.027798091730540375, 0.02016272291688659, 0.04183776563001762, 0.0692977513361458, 0.07176522195967427, 0.06435787165159579, 0.07080844198152936, 0.06568710099160235, 0.06730609998002579, 0.38306562115544784, 0.3923517470958725, 0.3619386143181508, 0.7081511602308969, 0.7185984416027927, 0.5135679444712679, 0.6861864051036783, 0.41225058806643133, 0.19768148962793353, 0.10630556354310061, 0.11617376010382008, 0.1286940927717305, 0.0961044027194835, 0.09644661689054923, 0.08963856859194053, 0.17283218774742803, 0.15150529262116652, 0.13379442593221214, 0.21521647103974773, 0.21827963567086806, 0.20408451294137775, 0.30523893725851325, 0.20377852450352785, 0.22268453508227237, 0.20727186823224986, 0.2212491872344765, 0.19385534718487263, 0.10291344786513978, 0.0666534921455062, 0.08439085254736889, 0.049626613153411214, 0.06399993617867206, 0.03920448398242771, 0.09105828311355857, 0.10302277304840501, 0.07287650253516853, 0.09298468247963065, 0.09772684034381052, 0.07921620045044564, 0.10695447739554498, 0.09621930628823161, 0.10298354363159146, 0.09626806149623168, 0.08205928685471753, 0.08923804228323606, 0.027673591562139888, 0.004487365852839376, 0.018109386299812624, 0.013573817554231038, 0.011791634360137304, 0.027361638860595616, 0.011034012041411745, 0.007575979293219293, 0.012930925274520777, 0.09441154939639795, 0.1234773872669237, 0.11330247307971097, 0.09648722142285437, 0.10361626344114427, 0.10667002524210079, 0.10251346079482915, 0.14109241139197326, 0.09232979904109473, 9.999999999998899e-05, 9.999999999998899e-05, 0.008738728545345631, 9.999999999998899e-05, 0.007332566266476381, 9.999999999998899e-05, 0.0014712946332366972, 0.0012260083703433677, 9.999999999998899e-05, 0.038576723549567205, 0.036863512935142895, 0.043959771071463316, 0.03068824523762126, 0.03174941311833368, 0.03906723288955105, 0.024625555032270707, 0.014894449127157539, 0.024795826959369105, 0.2113454084617018, 0.21379092526541488, 0.19858540678137016, 0.21711794759334524, 0.2177045446125605, 0.2229754865608734, 0.2629788577034229, 0.25533606641075446, 0.24761912848483236, 0.06875564939319267, 0.06956159268655338, 0.07048805766104138, 0.06995397352654564, 0.06030588314589591, 0.07161962912119002, 0.08660974626085294, 0.07295426256622284, 0.07752875654425428, 0.15450150763783455, 0.13352388904595425, 0.13772241366630988, 0.16031819451836093, 0.13864237750633746, 0.11248283810999127, 0.15464808175027034, 0.1346717135024612, 0.14510912801503395, 0.17524474420873526, 0.15548527113713884, 0.17144834991173208, 0.2055888131452962, 0.2054858307578753, 0.19773599670678532, 0.19347598877094452, 0.20321374458477248, 0.183552722763629, 0.14472228139889298, 0.13866591997561628, 0.13501683708475998, 0.14896111470252693, 0.1539727778576525, 0.14934500319892852, 0.1395321634946569, 0.1468470063988796, 0.13947109447441275, 0.1634874553775848, 0.18476842628126722, 0.16676760104605237, 0.1708861637845559, 0.18717292775207528, 0.17953436586289095, 0.16998052152087106, 0.1686034048675027, 0.173399971027279, 0.17059320687777124, 0.17014093821560605, 0.1600974402746368, 0.16764330863261545, 0.1780291965331322, 0.16943683633337436, 0.16776290112432013, 0.1766825321998502, 0.17640854804613004, 0.21278245959037723, 0.24503639804671729, 0.2233585875963825, 0.2506957722556291, 0.23330318276939865, 0.2409830331161955, 0.19759824855868668, 0.1970883628881458, 0.1792521871058167, 0.1644302184583032, 0.26842756287180414, 0.16011919807329955, 0.38001464241238136, 0.1853233065426162, 0.17575820318513447, 0.1732024494614156, 0.17019829818413057, 0.16876456374119875, 0.1850382673810267, 0.19610720557629957, 0.2022932733833539, 0.18802924210340155, 0.2135749380374129, 0.1774928316962201, 0.19175894784947278, 0.1802944476823577, 0.20568880668582523, 0.06502038117413644, 0.05771910763143662, 0.0722455068022062, 0.06522107004347855, 0.06919985670504025, 0.06152010772267835, 0.07884232586359263, 0.06565644286564054, 0.06303887698463218]}, "mutation_prompt": null}
{"id": "5a347f93-c663-4663-a3b6-d6caf6c9346d", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.4 * self.budget:\n                new_size = max(5, int(self.population_size * 0.8))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Introduced mutation factor decay\n                mutation_factor = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / np.mean(fitness))\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Slight dynamic adjustment to the crossover rate for enhanced exploration\n                self.crossover_rate = 0.7 + 0.3 * (1 - (np.median(fitness) / np.max(fitness))) + 0.05 * (np.random.rand() - 0.5)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introduced a small dynamic adjustment to the crossover rate to enhance exploration.", "configspace": "", "generation": 25, "fitness": 0.13665077788224395, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.11.", "error": "", "parent_id": "1ec64cd4-53b6-480b-afc8-73075d8c5e25", "metadata": {"aucs": [0.24721015099177635, 0.28284516168536955, 0.27384881943272643, 0.27117666993310297, 0.2486460935814162, 0.2318088762736178, 0.18650403317773, 0.12687096689454824, 0.14173611840872213, 0.018306089707705753, 0.035587227552464684, 0.013787350292095657, 0.04213007064513019, 0.02706857798595086, 0.02964594784370478, 0.0190711077132526, 0.020438237514970203, 0.006987355801513329, 0.04687725755607297, 0.05630885864816104, 0.043737268793216044, 0.07339528717699118, 0.0857152312407321, 0.07203639602756862, 0.08086592654970881, 0.07813909545432907, 0.08349445049840343, 0.02998220973849841, 0.019264436911796246, 0.029920147756885895, 0.07873163808063022, 0.07241578509459645, 0.07681770119886533, 0.07307326158234195, 0.062431452475995464, 0.060555893424808716, 0.3722009874676584, 0.3832494936101227, 0.39826271078682707, 0.540918270463357, 0.6797854054599988, 0.7147305239748727, 0.46707036902821253, 0.45472179411113445, 0.2967989225394413, 0.11572214507229439, 0.10771585427948283, 0.1315165375285573, 0.09268641180078863, 0.10560781871422675, 0.07417748251081124, 0.1461545942457958, 0.1462593888063064, 0.16129660083897723, 0.21816380554171233, 0.22771538130870328, 0.19295275444146254, 0.22149597200181226, 0.27138737852697914, 0.23241949307646803, 0.3157405902732138, 0.22690936790618488, 0.2422424872646416, 0.08291842077190703, 0.1033716040162479, 0.06475761875140873, 0.04179260030265919, 0.04911912792383499, 0.04743396594336269, 0.07486173715366662, 0.08704669547608901, 0.09586500299425937, 0.09565924430419814, 0.0823820791573493, 0.0850511685869948, 0.0760413173903014, 0.1254488177852474, 0.08004661319608108, 0.08462331422189395, 0.08449924581607571, 0.09870092831612509, 0.007552728042448109, 0.019444621178405952, 0.006591170328130502, 0.014459485309638698, 9.999999999998899e-05, 0.01964044996987757, 0.025901073474838943, 0.018904813207504367, 0.02248697698530322, 0.10485370277195305, 0.142271081980188, 0.10820673749312537, 0.09577716680930148, 0.10705603114830553, 0.09488548781097339, 0.09745606015844677, 0.10091820923704853, 0.11824018726453955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007384380226090892, 9.999999999998899e-05, 0.004976825137969487, 9.999999999998899e-05, 0.006466889300317025, 0.03817987867524841, 0.036231721786851634, 0.035828970280740724, 0.03599001505604282, 0.03520428461109171, 0.030108618567765144, 0.016400473527797832, 0.010320254715729837, 0.024263452384536865, 0.21526637410914273, 0.214378323515085, 0.2202190181864404, 0.21542479846107332, 0.24267451091798298, 0.20445665953767644, 0.2754022805304941, 0.2444847040609549, 0.27319879856404616, 0.06370625870460245, 0.06898571626845518, 0.06134735361829646, 0.0730534737042311, 0.06421516657585413, 0.07391008685008915, 0.07259139608709342, 0.0706181032043347, 0.07674943149918068, 0.14252197962379776, 0.12179379611597252, 0.14000574597252602, 0.15124304217552031, 0.1391125191710798, 0.11124607337876247, 0.1516985987256818, 0.14319152761185394, 0.14952375024029685, 0.16287724194299757, 0.1567430786883084, 0.17210173855143585, 0.2047453662246681, 0.20603052518448906, 0.1974604021820835, 0.19469135929191017, 0.20399189357700664, 0.18668952486895996, 0.15060920736642436, 0.1352241098620901, 0.15271913299004847, 0.130468013222366, 0.16407984797631636, 0.1474261228148287, 0.13572736816677133, 0.14318256476641655, 0.1380366621249144, 0.14816819305461248, 0.160267815557111, 0.1723962919604033, 0.19652133634544722, 0.18227941210586196, 0.1766113996180365, 0.17240335841128562, 0.18229342058693043, 0.17865989581264785, 0.16099943549162254, 0.1597841953964111, 0.16078173106406501, 0.1763470485447156, 0.17263868183275322, 0.1765900194935981, 0.1647054806288385, 0.17645248241020184, 0.17444853426793017, 0.16550113949249812, 0.23947421880609343, 0.25580793495905163, 0.2643734739734144, 0.264442833064621, 0.25704309184298335, 0.20819022757776606, 0.18678134043205352, 0.16072361658108691, 0.16739574625241205, 0.17581995037902853, 0.14547562718965767, 0.15983416133473727, 0.14014540136540632, 0.15147977601370477, 0.16597092809556202, 0.16731678004717998, 0.1515888436745667, 0.18522763316501611, 0.1883000662104587, 0.17168637351801586, 0.18978550804122074, 0.2135749380374129, 0.17016015438354426, 0.1782264524827597, 0.2005275420006577, 0.20568880668582523, 0.06402283853390345, 0.05776972065243369, 0.0710821097615777, 0.06309303368093655, 0.07829011567586674, 0.062340237013322475, 0.07652785002641072, 0.06895666853354032, 0.06276150071506092]}, "mutation_prompt": null}
{"id": "091eb6ee-4f51-433f-88c0-41e28aa34943", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.4 * self.budget:\n                new_size = max(5, int(self.population_size * (0.8 + 0.1 * np.random.rand())))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Introduced mutation factor decay\n                mutation_factor = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / np.mean(fitness))\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Self-adaptive crossover rate\n                self.crossover_rate = 0.7 + 0.3 * (1 - (np.median(fitness) / np.max(fitness))) * np.random.rand()\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced diversity and convergence through adaptive population resizing and self-adaptive crossover rate.", "configspace": "", "generation": 26, "fitness": 0.1280421019115535, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.10.", "error": "", "parent_id": "1ec64cd4-53b6-480b-afc8-73075d8c5e25", "metadata": {"aucs": [0.23624695090626568, 0.2495208671015866, 0.2225989786999888, 0.22515868711445497, 0.21738251549279475, 0.22503796570333412, 0.2240834044699468, 0.1877530125710175, 0.17678070151322423, 0.014209461014148328, 0.008217590810634778, 0.005452172205671735, 0.009436007507996669, 0.01468900595611633, 0.012615554603366608, 0.0014442888610890492, 0.006307981427218556, 0.0013596252697727351, 0.05064882496796985, 0.061334182968085016, 0.04180200022403735, 0.07585992071060466, 0.07373410272598835, 0.07360565930926455, 0.07730793773486744, 0.06510820165585518, 0.0717275763104821, 0.025514573702180465, 0.022755710687061392, 0.031617957552384945, 0.05976334007554962, 0.0659026738939279, 0.06428875768193887, 0.06256777688122639, 0.06658913931313548, 0.06495423063656058, 0.3356134523275971, 0.3461318217013897, 0.33313116453362257, 0.529739286993023, 0.36852981824732556, 0.8155385692297262, 0.1931276894346895, 0.37443517039218455, 0.607737487406571, 0.10683836599370333, 0.1101752389139099, 0.11445212129525284, 0.09048317497218816, 0.08831913473877595, 0.09820179199171775, 0.13043545112888077, 0.12424857456330296, 0.1368989363866263, 0.19308954269102485, 0.2130440314553812, 0.1812629930319657, 0.22592210961633663, 0.18840751632042652, 0.2039252437747885, 0.20492262509562253, 0.2072994999432617, 0.20110474603159445, 0.06857520594751898, 0.07769142287283648, 0.054822808304433646, 0.039458913639617954, 0.025521540738761672, 0.037768843324496815, 0.056501875613757524, 0.06074647786393128, 0.05399970719759972, 0.07528071637512601, 0.06160762604536063, 0.08346318542894826, 0.06637683220696255, 0.0837060411754934, 0.07989198237937123, 0.07495645549568786, 0.07967874007223585, 0.1112079669821, 0.003476437230638285, 0.0047647644852338855, 0.0049513681120076924, 0.00042540385517753077, 0.004430804491313611, 0.0034654967674297987, 0.00060381912938412, 0.001151862245994395, 9.999999999998899e-05, 0.0928165957635807, 0.07776880505332462, 0.08975854035872266, 0.0730551456252031, 0.07591883903097185, 0.06988046759205191, 0.054082403480080976, 0.08996287556552218, 0.07615952103696, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00030768931570490654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020535335272022004, 0.02139301967141638, 0.03106616991132105, 0.02055310171031377, 0.02163768135726918, 0.027328647420392427, 0.013667220695754101, 0.011567713316596562, 0.017869869428902008, 0.2148179883075212, 0.19810690618371796, 0.19666777424232829, 0.23496995866096837, 0.23759994430585019, 0.23235448399378167, 0.25895636698629365, 0.2574039821834039, 0.2433473568048825, 0.05922804670789317, 0.059784460377758974, 0.06689275704972097, 0.06392927054469366, 0.07176551641056572, 0.07295674244410222, 0.0811111560639367, 0.06866140734356119, 0.08199909189864263, 0.14126954071705, 0.13981820796912126, 0.1444281158295525, 0.14547805788833068, 0.1424922322151111, 0.14097306311723856, 0.14963138758589234, 0.14958038676396757, 0.14801048026796926, 0.16484149082827204, 0.16461938639407803, 0.17269234083162643, 0.197905303044298, 0.20041102299757885, 0.19154490743377806, 0.18983265428738938, 0.18799751173500856, 0.17524560785623267, 0.13523065663881062, 0.1381252046937369, 0.15264052336368916, 0.13838764564968864, 0.14123784830728714, 0.13737931552396, 0.12172366509101917, 0.1358008951339552, 0.12375428236333097, 0.13900392221312974, 0.1695855533778997, 0.1448894732755741, 0.1893605267328322, 0.188162622219607, 0.1787295988223182, 0.17057560474797007, 0.1823635754130113, 0.17043586914323638, 0.15944256260780953, 0.15690795974050087, 0.15854508939000056, 0.1736468479981471, 0.1678541683990732, 0.16240548139276356, 0.1598647737355412, 0.16355294867606485, 0.17012548026762142, 0.18278703442042155, 0.2060558219888209, 0.21416810808024, 0.23593227475109102, 0.23413432209313034, 0.26140926170457, 0.1832979567809241, 0.18173450132253133, 0.1680469234236236, 0.1872503087819023, 0.1575830079078685, 0.167874285101008, 0.1954632332431422, 0.24303187070877252, 0.17025717570457888, 0.1682503367566991, 0.1705670132967151, 0.2060828170275547, 0.18126430141610594, 0.19203779813809674, 0.19164055383802348, 0.19369246318242006, 0.2135749380374129, 0.1844791408101708, 0.1760255038986528, 0.1913729579058301, 0.20568880668582523, 0.0589074869917271, 0.06409863754126122, 0.06792246117064027, 0.0756943926954744, 0.06689468985031022, 0.06534693840833738, 0.07553874054586451, 0.06391230757983213, 0.060869801857113104]}, "mutation_prompt": null}
{"id": "8eb680d0-0a27-4ccd-b077-0871600012db", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.4 * self.budget:\n                # Adaptive population reduction\n                new_size = max(5, int(self.population_size * (0.8 - 0.1 * np.std(fitness))))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Introduced mutation factor decay with diversity preservation\n                diversity_factor = 1 - (np.std(population, axis=0).mean() / (self.upper_bound - self.lower_bound))\n                mutation_factor = self.mutation_factor * ((self.budget - eval_count) / self.budget) * diversity_factor\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c + 0.2 * (best_individual - a))  # Enhanced mutation strategy\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Fitness-based adaptive crossover rate\n                self.crossover_rate = 0.7 + 0.3 * (1 - (np.median(fitness) / np.max(fitness)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced multi-phase strategy with diversity preservation and adaptive population reduction to improve convergence speed.", "configspace": "", "generation": 27, "fitness": 0.11114658855769378, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "1ec64cd4-53b6-480b-afc8-73075d8c5e25", "metadata": {"aucs": [0.2188166541674712, 0.22812368659138327, 0.19899146095027664, 0.20186529179838286, 0.19430313907651464, 0.1986571331929814, 0.1739226485981391, 0.12131213164676025, 0.14097331335078267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07677903591714186, 0.07105142261824515, 0.07882931418384231, 0.08397233511053459, 0.06582554861265288, 0.0698090213176632, 0.08134150399354434, 0.08534558417619342, 0.0867198668098903, 0.062021563675686564, 0.04667902044529204, 0.05579660938991149, 0.07329535677877574, 0.046694009466229036, 0.05562377758616188, 0.05650403787214053, 0.040247455235204455, 0.04218122957890569, 0.13685906375069246, 0.1723997206472757, 0.1348981961526584, 0.18588107038187096, 0.14139523087030015, 0.5630787431750436, 0.18990232744568614, 0.17096437350958127, 0.1251564599887186, 0.09421786838707613, 0.10496854148349466, 0.10171882691615464, 0.09875407796876445, 0.10966850963285601, 0.05803846150518421, 0.09987778372226508, 0.10737877836129461, 0.10452453463167588, 0.14786736318478322, 0.19308637766117165, 0.18271827273961339, 0.14779476907535005, 0.13864493819269796, 0.17567507273958194, 0.17524945849818885, 0.13275622341315008, 0.13344507694436525, 0.012861751717376912, 0.008657988673212103, 0.12186987518243919, 0.009740586039133303, 0.011783067803489922, 0.023334104177544557, 0.055108782333064266, 0.014910095459766293, 0.02972517698743249, 0.035537329851137445, 0.012388913348102326, 0.04458218368919675, 0.011700154701916876, 0.04343297059937323, 0.03656486137250048, 0.05112335559227554, 0.03480722132035263, 0.02291036142287617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08178925412600835, 0.08978922511246601, 0.07217702442971963, 0.08868593531073221, 0.06073506956084562, 0.05908407528548232, 0.06937052858408754, 0.06324132751329248, 0.10592765308081198, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03886382570368041, 0.004539671273660506, 0.024341421722258616, 0.016599633153791205, 9.999999999998899e-05, 9.999999999998899e-05, 0.01542330905489575, 0.029731795883573442, 0.001195356826612981, 0.22838958281946875, 0.2216858200090972, 0.21647961837132257, 0.30028705394672184, 0.22670475223069686, 0.21366302313439134, 0.23144969228872114, 0.22252776684579845, 0.234423374631882, 0.07924183965682152, 0.053717076985859036, 0.09148942448429753, 0.057757303953858696, 0.09416254839921767, 0.08340067627275272, 0.04728991590540077, 0.0647337925399506, 0.05998601938964854, 0.13709410100555053, 0.18944649017107507, 0.163882934104286, 0.17769905094541394, 0.15271238579287638, 0.16395802858528974, 0.14963138758589234, 0.1907154724082607, 0.1551408393324678, 0.17599054948626092, 0.20376620125920963, 0.1802752396775823, 0.231173799169904, 0.18414859897382074, 0.1895537337033384, 0.1893156557029655, 0.20768673888392786, 0.17883222997070336, 0.15307230907615854, 0.11440250795331774, 0.11607390235572912, 0.14279691983091525, 0.13099107549899258, 0.11809694321234876, 0.11508117505168647, 0.15898349943576962, 0.12093899883226389, 0.16855034605729557, 0.16961666594396774, 0.18404638515337146, 0.19944972311086406, 0.2112121228525219, 0.18095614672208116, 0.17875145784052204, 0.17872333726498668, 0.16960168717788782, 0.1452779578060488, 0.15051148708335182, 0.1542865639880754, 0.15345247639641857, 0.1561582633339914, 0.15759149588660892, 0.14617303890609568, 0.15666841674686915, 0.17358749400995077, 0.15475610959986263, 0.1788904577886158, 0.17359206106664204, 0.16033208819916, 0.16700915282108275, 0.13361572922617382, 0.17720362160306813, 0.1597277796622948, 0.15728372346554131, 0.158050011382879, 0.15054062955545233, 0.223183260076799, 0.15391404012885979, 0.15671493473802056, 0.25426593382972174, 0.20525877971213957, 0.16448694155013566, 0.1919749716492648, 0.18221552398331498, 0.19758887832569483, 0.17386732772572921, 0.1951071206230347, 0.2135749380374129, 0.1847097991570016, 0.17349443646019158, 0.18402923075816213, 0.20568880668582523, 0.0737939481473946, 0.06202598005805671, 0.08003459864226081, 0.07694594025616408, 0.06352021075182424, 0.06431382997842305, 0.08047939591379238, 0.07647278409671676, 0.05749887663900788]}, "mutation_prompt": null}
{"id": "091ef4f9-7146-472e-9bc5-a66354d54273", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.4 * self.budget:\n                new_size = max(5, int(self.population_size * 0.8))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Introduced mutation factor decay\n                mutation_factor = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / np.mean(fitness))\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Dynamic crossover rate adjustment based on generation progress\n                gen_progress = eval_count / self.budget\n                crossover_rate = 0.9 - 0.2 * gen_progress\n\n                trial_vector = np.where(np.random.rand(self.dim) < crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Introduced dynamic crossover rate adjustment based on generation progress to enhance search balance between exploration and exploitation, improving convergence speed.", "configspace": "", "generation": 28, "fitness": 0.13630763627359502, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.12.", "error": "", "parent_id": "1ec64cd4-53b6-480b-afc8-73075d8c5e25", "metadata": {"aucs": [0.258228475127275, 0.27134621867410813, 0.25135427388896936, 0.2507973643511079, 0.253665275689258, 0.279164758676846, 0.24416193840712508, 0.2446271550999688, 0.24632804894994997, 0.025955302126376978, 0.013658608051695609, 0.013211273916849287, 0.028742299723796494, 0.038423370750243935, 0.016717365835116516, 0.026326795824762828, 0.029306759919633607, 0.01964044041194779, 0.061555991303713364, 0.06597916944267668, 0.05756506039700182, 0.07552909620501636, 0.08157165280426848, 0.07335500411410689, 0.07729601574053724, 0.08164115031657171, 0.0762942012335518, 0.03405514962847578, 0.029092130717343956, 0.04094358752200955, 0.06294195799723368, 0.060047102684145814, 0.06583545467950791, 0.06728994860408277, 0.06597391776241979, 0.06845955513431012, 0.3670468231923807, 0.41885954049286755, 0.3890155390364878, 0.42367162237325817, 0.540513822786373, 0.7991470037467083, 0.6613463093634492, 0.7528069151004682, 0.3178566154701753, 0.1053831988425723, 0.1256142916892059, 0.1068029805061036, 0.10314522056860476, 0.09397258644549988, 0.0848017903988324, 0.14021581771677716, 0.1085186968619879, 0.15630049496580434, 0.20282958094244707, 0.20481937961355112, 0.19115167767334773, 0.20694761079322121, 0.19949203638566393, 0.20842891816467024, 0.20645312712647623, 0.20559431933209882, 0.2008380892722067, 0.06215693568861658, 0.06424733447993636, 0.06240371111014542, 0.0636271087566691, 0.04559049275528182, 0.028788074447778533, 0.05763266511586862, 0.05891229016297983, 0.08317966467191673, 0.07516158793631111, 0.06903508486967169, 0.0709848486972865, 0.06696763883234691, 0.08942378041012522, 0.07776167662115496, 0.07448554328024748, 0.07506065514570603, 0.06263798778076213, 0.007272867511672998, 0.005917667731837328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019117330237214958, 0.003965247676319228, 9.999999999998899e-05, 0.07457662762183248, 0.07673351703425246, 0.11764875659950935, 0.07384557447559759, 0.055107237718794, 0.051349758850645966, 0.14130598689995, 0.0732006568055591, 0.06301337047429101, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026817517865456275, 0.03701965612984148, 0.036349222113681745, 0.03338304514139945, 0.03789636217313419, 0.03293192066823225, 0.014631991641982478, 0.021070208054713713, 0.02591786351105896, 0.22607281613950903, 0.23060362536530032, 0.22683261381608577, 0.24365099338624263, 0.23561831351576534, 0.2429824295424915, 0.26493007912742605, 0.26474344229869395, 0.25600242134023454, 0.07339314463868507, 0.07320678124299063, 0.06315271592847127, 0.06839780505340731, 0.07191086964754578, 0.07030683330664433, 0.07489534032468836, 0.06477056462970665, 0.07376582981290392, 0.17289056289133875, 0.1245731554282491, 0.12770774071284363, 0.16056552913200173, 0.1523824594668295, 0.12997021470077774, 0.15578208262020543, 0.13854805266432502, 0.1400918615038963, 0.17096816064686227, 0.16835448598952696, 0.18029579521894434, 0.20088149160628677, 0.19839518161112168, 0.199843118529203, 0.19241607897558433, 0.20148218557922104, 0.19178243339684897, 0.13051586815469052, 0.1459319310790692, 0.14383071244694967, 0.16532392831507137, 0.1615249293550245, 0.14315252210686014, 0.1343865792045813, 0.16147767582133143, 0.1369738699185622, 0.16897586255598107, 0.1562868744039717, 0.17757265718647142, 0.1710241708809621, 0.17320479707664782, 0.17337536667805364, 0.19291020736918119, 0.19486338534603087, 0.17065862918370878, 0.15801808138964046, 0.16414715364891475, 0.1615160547027693, 0.1640058049264086, 0.1725126706594039, 0.16372505034931695, 0.16446579695092456, 0.16738879974428622, 0.17801021433097652, 0.15905025376876836, 0.24412057227002637, 0.2387419087437167, 0.2520648812654823, 0.20906415400342437, 0.22652143989469065, 0.19233434878390165, 0.1884879776688111, 0.1931070923955054, 0.21344396328970838, 0.1628324378284749, 0.17820528798324797, 0.21463753515306594, 0.17684128604914873, 0.1604826834812969, 0.16616175730665472, 0.1716662034651717, 0.17261894966629387, 0.1819752172953455, 0.190584779834453, 0.1789709953959404, 0.18683568409856555, 0.2135749380374129, 0.1826950566001898, 0.17693351050292982, 0.18087537583090407, 0.20668824754282455, 0.06077127470031607, 0.07011965447446777, 0.07095517200405788, 0.06497234992530831, 0.07227737987496019, 0.0644161188643968, 0.07532529613519179, 0.06212882688664634, 0.07404026943904285]}, "mutation_prompt": null}
{"id": "92fba998-3a14-4277-ace4-1e37eeb852f8", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:  # Modified from 0.4 to 0.3 for earlier resizing\n                new_size = max(5, int(self.population_size * 0.75))  # Changed from 0.8 to 0.75\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Introduced mutation factor decay\n                mutation_factor = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))  # Added a small constant to avoid division issue\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Fitness-based adaptive crossover rate\n                self.crossover_rate = 0.7 + 0.3 * (1 - (np.median(fitness) / np.max(fitness)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with a novel mutation factor decay and adaptive resizing based on convergence.", "configspace": "", "generation": 29, "fitness": 0.14125298172362208, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.11.", "error": "", "parent_id": "1ec64cd4-53b6-480b-afc8-73075d8c5e25", "metadata": {"aucs": [0.2819301247972047, 0.2667752159032114, 0.27786145458394107, 0.2751854175764914, 0.25209249753045593, 0.26829073816516336, 0.2034543988492754, 0.13561830902797933, 0.14368255874629376, 0.011272679344660919, 0.033659065780172415, 0.03676579491730625, 0.026207632182995266, 0.0062110701559031645, 0.0005383525411665202, 0.02054306342282486, 9.999999999998899e-05, 9.999999999998899e-05, 0.057328734662816516, 0.05492073946518705, 0.06161110093368427, 0.07764547727428361, 0.08324840035263026, 0.09321619766197475, 0.14507935412789807, 0.1017579114470527, 0.08925869231516248, 0.032663724472889566, 0.03372962513217714, 0.05365682438384789, 0.07381543639144872, 0.06540190057795003, 0.0803752866511992, 0.06730121031168346, 0.07126097863670544, 0.07326470217317727, 0.44425106830725447, 0.4647375529695609, 0.13958950500931055, 0.7081511602308969, 0.7185984416027927, 0.554985651016747, 0.6861864051036783, 0.20482699063655418, 0.2064288564126494, 0.11228082922126836, 0.1304181506673645, 0.11480837910231434, 0.09334173778087784, 0.09595313974588204, 0.0982562489315002, 0.13767182641680809, 0.15150529262116652, 0.13952324586433784, 0.2095678629043496, 0.251265323499297, 0.20219839927497119, 0.24462489018761735, 0.23884704268865276, 0.20617326184086726, 0.23194058336487167, 0.23705270470129391, 0.17653689334488187, 0.12069819241584756, 0.07956879377652581, 0.08319651539128026, 0.04875507605911422, 0.05574038506426782, 0.02823102338085559, 0.10176898242600363, 0.0872102075037765, 0.08084601516465884, 0.09290966330762296, 0.0988787813785661, 0.06827520529517384, 0.08850557994413122, 0.13443864500168634, 0.14431464681520412, 0.09778792588238117, 0.09561768244825564, 0.08652731137487368, 0.06731089537357926, 0.004487488034566001, 0.03907904739484025, 9.999999999998899e-05, 0.032519819290664054, 0.06361968455552547, 0.030361105221064055, 0.027337359445221643, 0.03999330985363536, 0.1014646526345776, 0.11526250393626958, 0.12355909030588641, 0.10370645878310225, 0.09674867964958866, 0.1174015431711859, 0.12808578656341074, 0.13955893337368486, 0.0882224516655391, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005468296161574293, 0.008165264383667825, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04256318632998113, 0.0515585383124193, 0.0517924813495827, 0.04310862511867386, 0.04667862737817252, 0.02339410188080071, 0.0504608290413453, 0.048041597845574824, 0.03021071762456018, 0.2003844423089155, 0.22439598895427093, 0.22685209086869296, 0.20635733687287838, 0.22348098925605842, 0.21442345801608154, 0.27482094622495046, 0.2834675148153908, 0.2568243231925045, 0.07566335305257377, 0.06667003404772642, 0.08026489376908741, 0.07519321017789538, 0.061856370499055124, 0.07649784761391276, 0.06993405656626606, 0.06405996014517046, 0.08176483096035048, 0.15164596532466224, 0.12795443197862533, 0.13282961147971217, 0.14322166893578336, 0.14353729999323583, 0.11868257647059288, 0.15326317143060209, 0.13040016372384067, 0.13303026025944276, 0.1646048523453706, 0.16423494374772996, 0.16814906059237933, 0.20167825486035829, 0.22019665601057392, 0.1980818645869824, 0.19516950760393736, 0.2206498909901432, 0.19072333809557396, 0.14319642681956157, 0.1408982236102082, 0.13948988256064476, 0.1693940389889993, 0.16868128670987914, 0.1658063292471692, 0.13802126591063735, 0.1682053185195297, 0.14405324516107687, 0.1771212977272737, 0.18311091008789704, 0.1687142824912129, 0.17253530967021158, 0.2167533430498204, 0.18710516245988218, 0.17021555053755766, 0.17072055473716696, 0.17401001175679176, 0.17059320687777124, 0.17014093821560605, 0.1621060683724278, 0.17124116410404144, 0.19728254018782698, 0.16702604990599434, 0.16243476100006515, 0.17906670766446675, 0.17733890858109425, 0.2501030700052074, 0.18067317168958374, 0.2190798199986781, 0.2777222506596966, 0.18530305398894298, 0.23940579051695832, 0.1721971450339439, 0.22393165790117953, 0.20314125154001417, 0.1543942180572545, 0.26842756287180414, 0.15889401957923766, 0.38001464241238136, 0.19417465683174573, 0.16450839260909922, 0.1749563809831427, 0.1688566836339731, 0.17560694680498234, 0.18477497265362386, 0.1958433642088141, 0.2022932733833539, 0.18861320022111372, 0.2135749380374129, 0.18209729016397191, 0.18471876111549257, 0.18040804070576955, 0.20641883278210504, 0.06991193138927354, 0.06742337918952912, 0.07379657441282816, 0.0657050614245136, 0.07062230176515893, 0.0711230178648753, 0.08169280280712887, 0.06802285035468247, 0.06620697272525633]}, "mutation_prompt": null}
{"id": "442ad521-ed46-4834-8c91-738b01671207", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Adjusted crossover rate for exploration-exploitation balance\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with an adjusted crossover mechanism for better exploration-exploitation balance.", "configspace": "", "generation": 30, "fitness": 0.14216957567457256, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.11.", "error": "", "parent_id": "92fba998-3a14-4277-ace4-1e37eeb852f8", "metadata": {"aucs": [0.2760611267805948, 0.26248487125593023, 0.2836849515459038, 0.2835337692461709, 0.2615543837968002, 0.2496517266683792, 0.26121392079012284, 0.251092589273595, 0.2820052690605537, 0.008615410861052664, 0.010030229974770322, 0.009438742142762191, 9.999999999998899e-05, 0.006375110656654526, 0.04444660551666946, 9.999999999998899e-05, 0.003103255471934574, 0.016985358621980362, 0.04531400918875084, 0.074952034528466, 0.04516839346401025, 0.09250553323937072, 0.0745214744290068, 0.09199247094457863, 0.0954814090597712, 0.09642564440568169, 0.08836058469856256, 0.03812810589492188, 0.015149668515456183, 0.031197995385342292, 0.07211602844231524, 0.07359252169319785, 0.07821912842363798, 0.07005723055431701, 0.07004611887448209, 0.07262922281985107, 0.47922609369413816, 0.5727828342044896, 0.4544601506722554, 0.49807158642900695, 0.7142415540096012, 0.5152707826772388, 0.5815753992589732, 0.7032160580092182, 0.42574041400478757, 0.10674058928537378, 0.11729995007973415, 0.12504448859109907, 0.12323887758388608, 0.1104068495745485, 0.11125819678096782, 0.13345304139514924, 0.14220422440050584, 0.1331556733463689, 0.19305402959543905, 0.19961054759085295, 0.1916892081335808, 0.2573751546560705, 0.21962355819355595, 0.19908825149988163, 0.20407027060223448, 0.23384207096536747, 0.20536141966603338, 0.08731658830766009, 0.06926075222613959, 0.09990381197274911, 0.024277604480021364, 0.06813991643650585, 0.02741687945474025, 0.07774365041307352, 0.07856530230342829, 0.11099440583375564, 0.0837148724399649, 0.09808779856108507, 0.0848957100665364, 0.12036057858867366, 0.11137592400378471, 0.09352445043338997, 0.09194740046068695, 0.1012723669789346, 0.08555937558114424, 0.029375190687243258, 0.038411764379324476, 0.00412370799766737, 9.999999999998899e-05, 0.017967410138070017, 0.016225340049765724, 0.01805111644619717, 0.01630825421692572, 0.019715136828401203, 0.1142107832169228, 0.10005766915586478, 0.10292661054359287, 0.09585906805119104, 0.10662198064106743, 0.11180027550626326, 0.09561246424464132, 0.10849850750729184, 0.09605856209742158, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005580273948049386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05639118806960197, 0.03909546720569146, 0.04808989087658233, 0.0368114957613872, 0.03959912824071854, 0.03251962257605323, 0.014467334109971142, 0.009429657936046665, 0.008404306149626062, 0.2003844423089155, 0.1871710143165939, 0.1820210350527619, 0.2055799784281095, 0.19361270673363107, 0.19226744717352073, 0.26261551570920305, 0.2773955519753901, 0.2617748484285418, 0.08132652375449578, 0.07193618493259568, 0.07849422823846874, 0.07292002642742224, 0.07323145663686115, 0.06496929245344962, 0.08264277529164321, 0.1100419106319066, 0.08771414690383295, 0.14214731801307845, 0.14569343328220552, 0.1492531129263316, 0.17315104960349126, 0.15152162340611286, 0.1585034961328613, 0.16672072771399504, 0.16344635370155336, 0.143275773165088, 0.1602710620254989, 0.15059180881326262, 0.16814906059237933, 0.2251793982211927, 0.2086369897996364, 0.19553257714087435, 0.193823424594596, 0.20797591202506327, 0.19522323300411026, 0.13804698679377203, 0.13150122832360722, 0.13697982057427893, 0.16128440425429758, 0.1712680845272243, 0.15937913753527955, 0.14133103970248428, 0.1633857817134301, 0.1485052410495067, 0.1733676077206352, 0.16415777883743699, 0.18321481416338015, 0.16619991009534352, 0.17308489619571632, 0.1834427871217187, 0.1813717933537251, 0.1768719164147493, 0.18338562369702383, 0.157506134712448, 0.1661980558086943, 0.1539491782002127, 0.1748822659465784, 0.18191326999389357, 0.1688847955128564, 0.16062495204796634, 0.1680362487433391, 0.19602640821891815, 0.20022607136283466, 0.21691209459757588, 0.17655103907780667, 0.2638864924546712, 0.1544204804066971, 0.29205643670701065, 0.18053779018017246, 0.22519107111071024, 0.161723722499428, 0.18065082268311894, 0.18791694089754996, 0.15337980359126013, 0.2302326132116792, 0.19606913749796628, 0.1859085836241826, 0.17086295621403857, 0.17310056462572343, 0.16237205116605347, 0.19224371042490807, 0.19455229504151406, 0.18711748788871263, 0.18695905839007787, 0.2137935483563117, 0.188699157700703, 0.18528818893315113, 0.1825261211592759, 0.20568880668582523, 0.06380165362084556, 0.06439065645232767, 0.07663769338175386, 0.0663161230755892, 0.07317344223454236, 0.059098846848216424, 0.08308728565450307, 0.07097843791066338, 0.06737579297327068]}, "mutation_prompt": null}
{"id": "e0b4c484-a3bc-46f7-98bf-146613b9e8f0", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Adaptive mutation factor based on diversity\n                mutation_factor = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor *= 1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean()\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with adaptive mutation factor for improved convergence speed.", "configspace": "", "generation": 31, "fitness": 0.14634912383787435, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.15.", "error": "", "parent_id": "442ad521-ed46-4834-8c91-738b01671207", "metadata": {"aucs": [0.232069667462934, 0.276968331758802, 0.301564455665164, 0.24741343533646698, 0.2609857994330028, 0.2504892894756039, 0.2221932057519801, 0.25094404751665156, 0.23824132964572664, 9.999999999998899e-05, 0.02208043264260451, 9.999999999998899e-05, 0.011942028295557239, 0.011731090182572013, 0.01886699596547714, 0.03599886642425387, 9.999999999998899e-05, 0.010811239300143827, 0.0416715754326662, 0.06132908814729576, 0.04418338183215509, 0.0787259427942979, 0.0810789075576911, 0.07991119252341017, 0.0826669336537087, 0.07748795324525859, 0.07638319722225606, 0.03523570797489861, 0.028499231690840454, 0.040771554288347445, 0.0777144964251194, 0.05722331318698215, 0.05880019486841159, 0.07181978764281716, 0.0698401802359826, 0.08030899648972956, 0.9009431534381689, 0.9058091022150344, 0.9049160484613171, 0.6441077895735621, 0.5526681533254898, 0.7521553230758797, 0.5680405119015166, 0.8884904692595734, 0.9003899323158896, 0.11521027911682846, 0.11239951577032337, 0.12364376953839218, 0.07813714229856883, 0.13141389184436925, 0.09092249809095831, 0.16451793070568166, 0.09073073504076978, 0.12015910951929532, 0.21089045618562186, 0.20543099885999627, 0.16461088024554005, 0.20620645623630407, 0.20561483117977564, 0.19842060812890172, 0.20364515126543414, 0.22328474175823365, 0.20450221199755214, 0.08701329088884135, 0.10358559743391049, 0.07755441141435682, 0.043994232408176126, 0.0403998934259846, 0.02511017124896575, 0.08418153463591038, 0.10964907411565272, 0.09571661499164164, 0.08188302901286515, 0.08849150608517542, 0.08407072899859214, 0.06750424012101486, 0.07366654946301443, 0.08961117505636795, 0.07876451136153795, 0.09130171694481581, 0.0681561438972923, 0.04465339675442259, 0.02380340384829327, 0.004596354092296084, 0.006271085372307472, 0.005466552147813664, 0.031767302364619665, 9.999999999998899e-05, 0.019220652418012296, 0.026811208322737312, 0.07905572108632153, 0.12454138959100214, 0.11628950536198424, 0.08872920994764677, 0.06463663169444356, 0.09317646518418898, 0.12259031163993128, 0.09135538435352919, 0.060834833252385034, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03779769266993194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05077475865170633, 0.05306343623222387, 0.04453647015450879, 0.04218606716783979, 0.031184463115706995, 0.030833551107307344, 0.010948785285268992, 0.009456927893302436, 0.01159231670388472, 0.2003844423089155, 0.18462911766473922, 0.18365344224157765, 0.2055799784281095, 0.17610583723822004, 0.19226744717352073, 0.2676324939679534, 0.26638774781654306, 0.2581992564318675, 0.07615513240666716, 0.06876146009837336, 0.08879336315622821, 0.07314931367267197, 0.07941953450361183, 0.07922181050135657, 0.06050212383972775, 0.06160504556802482, 0.07534241535129271, 0.15878178938377097, 0.13540817451561704, 0.1337113709118567, 0.1836440450834892, 0.1474959468056548, 0.16090598793396294, 0.15498804969110624, 0.14416425653736897, 0.17398053200360442, 0.1604137259708086, 0.15059180881326262, 0.17465721232071196, 0.1972151944032633, 0.19414210409893207, 0.1989265245586449, 0.17412717987134185, 0.20008333441160486, 0.18584627977985624, 0.14610610050811124, 0.13679183761265357, 0.13380253938907571, 0.14841381318542335, 0.17778419689319547, 0.17036328430312186, 0.14916142616987216, 0.14363755646390242, 0.12572316672367034, 0.1571476590679971, 0.1504433740169976, 0.1649174264980604, 0.17808517287107517, 0.1708818431594905, 0.19627764881484389, 0.16847423364427783, 0.16233567135933213, 0.19180546263752296, 0.1510507705459111, 0.16404686729063578, 0.14992193494048767, 0.17347200033512833, 0.17773411902558978, 0.18403428427885282, 0.15985460658071948, 0.173131735860785, 0.16837221876817476, 0.21768653120017611, 0.20308076881293757, 0.1668451469458727, 0.2600035472632307, 0.20117671265172743, 0.14695389491967448, 0.14586808729919398, 0.14823827752521523, 0.1599093268729883, 0.14164208762155028, 0.19492653064024767, 0.16118857432482725, 0.1346970497494372, 0.19617182543868994, 0.12267873604860124, 0.17300668840343858, 0.16448694155013566, 0.1596214576108128, 0.17605807923960204, 0.19563479224689795, 0.19176442110998393, 0.19173247333353494, 0.2135749380374129, 0.17902304315908135, 0.19174790766038552, 0.18973849107102791, 0.20568880668582523, 0.06296941740267481, 0.07578599181359913, 0.07899375354214588, 0.06388686172528468, 0.07288709386693881, 0.07183369434901632, 0.08209430657173367, 0.06664572381088962, 0.0812824987313826]}, "mutation_prompt": null}
{"id": "6849eca9-9fae-4c6d-87de-f880f2ea763d", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Adaptive mutation factor with diversity consideration\n                diversity = np.std(population, axis=0).mean()\n                mutation_factor = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor *= 1 + 0.1 * (diversity / (np.mean(population, axis=0).mean() + 1e-30))\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with adaptive scaling factor based on population diversity for improved convergence.", "configspace": "", "generation": 32, "fitness": 0.14162735466988038, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.15.", "error": "", "parent_id": "e0b4c484-a3bc-46f7-98bf-146613b9e8f0", "metadata": {"aucs": [0.2896568294415772, 0.2915330601887386, 0.27874140652407065, 0.2920862470088026, 0.2936766546336905, 0.26607992282857773, 0.29644610082902045, 0.25070503388315857, 0.2631134932617474, 0.015295388542429511, 0.012936025312085597, 0.0026354273677541284, 0.010848606325578491, 0.001661578845031042, 9.999999999998899e-05, 0.00733803136479072, 9.999999999998899e-05, 0.005651582880862427, 0.0636446969498442, 0.06362866696155056, 0.03162471085292784, 0.09554696732002088, 0.09544790066390652, 0.06917117165659237, 0.08525302076958374, 0.0838358535912559, 0.09196843502115704, 0.03929712479530112, 0.037746927538821584, 0.028768542186533907, 0.06771521667434932, 0.07368781437321537, 0.045663114623430534, 0.06552115505581912, 0.057790160087361264, 0.06656028363305122, 0.8946910368452546, 0.9058091022150344, 0.8887906158586711, 0.28747016360307565, 0.9004385609934401, 0.4714192385450555, 0.7191419915208862, 0.8911610278168755, 0.4005005648488662, 0.120881559992708, 0.1369247885723084, 0.11320753572316722, 0.0953792027607826, 0.12878708412864703, 0.12124496184389633, 0.12217560886694467, 0.1033282056005963, 0.10886657748925443, 0.13506031527768758, 0.19308637766117165, 0.15133752624787944, 0.3861388327497749, 0.2056403851853803, 0.20222237244296426, 0.22296161089980837, 0.19640065543920715, 0.2032248182121842, 0.09660867099819648, 0.06028772568089025, 0.07964488142143378, 0.04030679016704575, 0.028803260142231335, 0.03813375668351582, 0.07634532562143881, 0.09016663253500878, 0.09328581512367329, 0.08419280088116443, 0.08175768009838191, 0.08324788815729867, 0.07229939556092868, 0.08270069352484066, 0.05350647547068188, 0.07796126508104662, 0.06018224448016862, 0.06344034288698697, 0.03336640653625067, 0.014792721784129714, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013158165675511757, 9.999999999998899e-05, 0.1153155813939466, 0.12758291425465396, 0.10065456279155294, 0.07043108249643593, 0.06957514376388285, 0.06673931994489724, 0.06996454176160116, 0.09140346381124387, 0.053611107984183226, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0033132839000201697, 0.005127050062784466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04466550056520957, 0.0953952984956461, 0.061699448048892935, 0.02527961345763652, 0.03349351057364347, 0.008991590604937816, 0.004414871324820324, 0.004254988072034616, 0.0628194140413687, 0.20832621277414232, 0.18462911766473922, 0.18590694907866223, 0.2055799784281095, 0.22917040459387017, 0.19226744717352073, 0.2789570167787899, 0.28343813368427806, 0.2667007299362948, 0.0627219733958927, 0.0722382655261461, 0.05987702427306618, 0.07519123925448201, 0.0734762528361993, 0.0848062509380596, 0.07127244434275293, 0.08519620632825242, 0.08902688139173842, 0.1382004927373477, 0.13085959556281979, 0.1440301235255267, 0.17327428467925, 0.1779504620294423, 0.14749010014293185, 0.15330867782599655, 0.13520838704504023, 0.1303271966665952, 0.1602710620254989, 0.15935935837143567, 0.16814906059237933, 0.17833350924880398, 0.21050752200086031, 0.18325583963919867, 0.17827602272642684, 0.20128271538666453, 0.16963965744163723, 0.14391195727658812, 0.1238921687159773, 0.15685282010540724, 0.13228718646199178, 0.14273257050565002, 0.13756953127371985, 0.14771461329377322, 0.14868910871464092, 0.14140346631200484, 0.1566471688661346, 0.143768417512686, 0.15301108279790587, 0.16182520002739398, 0.14836042943559336, 0.17575167780662648, 0.16210984603842937, 0.1463099977642338, 0.17587476704645089, 0.16969560980819265, 0.16800193665686836, 0.15959954389083764, 0.16867327590071013, 0.19072679641880286, 0.1705745014272041, 0.16774062683579827, 0.18105896735733118, 0.17457884232028809, 0.1459508439111774, 0.16679477618376493, 0.16080338534719207, 0.16314141037353658, 0.14727196099098872, 0.13549854063320366, 0.1907057597358628, 0.13656391611683194, 0.1598363265206897, 0.1492752212198062, 0.15712311535679058, 0.18013766879410653, 0.24435320974298724, 0.15175189179473925, 0.1271751545025731, 0.1709192896124092, 0.16448694155013566, 0.15477022705321886, 0.17991141005597366, 0.18921924205922558, 0.17475998508601842, 0.18798881408676293, 0.2135749380374129, 0.17688596522595978, 0.1826926442873481, 0.1807328919844673, 0.20568880668582523, 0.052299942087493, 0.060688661159359114, 0.07917884409021259, 0.05916857697194933, 0.06756419973635353, 0.05951013465669586, 0.08142841361679254, 0.08051876919658585, 0.06727892441724237]}, "mutation_prompt": null}
{"id": "8c56d45c-ba00-4349-93ff-093254cc57c7", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutation_factor = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor *= 1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean()\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Dynamic crossover adaptation\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.std(fitness) / (np.mean(fitness) + 1e-30)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with dynamic crossover adaptation based on fitness diversity for improved convergence.", "configspace": "", "generation": 33, "fitness": 0.13597454589981034, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.15.", "error": "", "parent_id": "e0b4c484-a3bc-46f7-98bf-146613b9e8f0", "metadata": {"aucs": [0.26781193224107447, 0.2556049101530419, 0.2480256700394441, 0.27198993502816937, 0.2780199934906247, 0.24688003088095944, 0.2655784107883181, 0.25157956349755517, 0.2751550272644073, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030086348019408016, 9.999999999998899e-05, 0.007879759623066307, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05488572732265529, 0.05221100008419344, 0.05626552287628528, 0.06224264908253663, 0.06944132805860559, 0.0688272638531724, 0.0687728652124937, 0.06608743292585528, 0.06025617693817098, 0.022932461233801216, 0.018602044662581085, 0.034643561518078014, 0.05538359391550962, 0.050643981998082066, 0.055026459376134707, 0.06345540256475446, 0.052720346842362376, 0.06035107605803025, 0.8909305586525853, 0.9058091022150344, 0.9049160484613171, 0.8720943331684146, 0.7035841533809943, 0.5489389563876073, 0.45086182997022883, 0.7205304230547576, 0.548332938092488, 0.08417704075490196, 0.1138171889394658, 0.10171882691615464, 0.10466997336474759, 0.10710613126274171, 0.07725210081264244, 0.11334183385206176, 0.10131666901082992, 0.10639776281733648, 0.19521724529823936, 0.2208951151479518, 0.17281121883890993, 0.18813818549968941, 0.2168403585632085, 0.21795221420134503, 0.1559404565087058, 0.2154924373593916, 0.1676091258532617, 0.05209179966409461, 0.024688334327249817, 0.013788006728814084, 0.004421972153588971, 0.025193692225538133, 9.999999999998899e-05, 0.04477595977751303, 0.03202897889568179, 0.026675036927665485, 0.054005656426184934, 0.03716063497189093, 0.03655734857261872, 0.055778298617238375, 0.07770276555854472, 0.07039693816558479, 0.06610654184090636, 0.05242612979108796, 0.03580818827699461, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04281494170462097, 0.06624031158298771, 0.09098389993315892, 0.0551003213514476, 0.08537380819124885, 0.04674121159604927, 0.0525615647731873, 0.0729553268429376, 0.04825579076022801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03053158200659034, 0.059005431095105254, 0.030265275431215155, 0.02685614860843566, 0.039951037513335175, 0.03156590639564416, 0.01329398684579608, 0.005943309576703526, 0.006165922858973327, 0.2003844423089155, 0.18462911766473922, 0.1799638106000897, 0.27393653516971495, 0.23812516391649108, 0.260752105794953, 0.26019549847808354, 0.24124097430647884, 0.2576848138841704, 0.0738570783991005, 0.07139563495829893, 0.07167633116929595, 0.06909649279404495, 0.0704544302409007, 0.08889891986891962, 0.06461388146172609, 0.057565737493086244, 0.0618330641616347, 0.13780547914096775, 0.1650685124621627, 0.1360949918658484, 0.13938881553502558, 0.1417135558757192, 0.134070249897418, 0.15892820203016234, 0.14531159941561178, 0.13582978470615814, 0.16116612263048846, 0.15170310690837252, 0.16814906059237933, 0.19211993194640087, 0.20812794828783088, 0.19203562186244205, 0.18786197682250028, 0.2168128259481139, 0.19106033724756877, 0.13042527298204454, 0.11778415744417892, 0.12444534990130818, 0.1602947496686884, 0.1663679027244256, 0.1482322615159164, 0.1407240898721931, 0.14892577386757333, 0.15644509823751052, 0.17143493354943584, 0.1498181054652179, 0.16029954895133924, 0.16582286479871944, 0.17417470970092852, 0.16456940721983626, 0.1736045086582908, 0.15285316824052442, 0.16686444743375284, 0.15712106772296142, 0.15539665542609815, 0.15072668251215304, 0.161892272174057, 0.16507330364322914, 0.1659672814443558, 0.15053974520323676, 0.1600108231195949, 0.1651725408204796, 0.17371613379020834, 0.20314198146933837, 0.19607397166484863, 0.15890900114309658, 0.1501421510654558, 0.15849317607077174, 0.23765013482069786, 0.13742192825735933, 0.15937565730680125, 0.1884307760717856, 0.14214561041719775, 0.15454456436073505, 0.1728819263785648, 0.15929567385756804, 0.13518600452995633, 0.18528143847687728, 0.16448694155013566, 0.18895339645418419, 0.1759471820410874, 0.1888621350563029, 0.1834470478547613, 0.18683568409856555, 0.2135749380374129, 0.18349907332670556, 0.18194466191874448, 0.18711651775088733, 0.20568880668582523, 0.06318160390845606, 0.066106351626389, 0.07336224089288212, 0.06352065534280393, 0.07604363163420202, 0.06812135583761991, 0.0801922638889715, 0.07154696609437283, 0.07305440182781475]}, "mutation_prompt": null}
{"id": "78d654a1-6ae8-43ca-a8c8-39f65118ba2c", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.35 * self.budget:  # Slightly altered threshold for resizing\n                new_size = max(5, int(self.population_size * 0.7))  # Adjust the scaling factor\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Adaptive mutation factor based on diversity\n                mutation_factor = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor *= 1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean()\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with adaptive mutation and dynamic population size adjustment for optimized convergence.", "configspace": "", "generation": 34, "fitness": 0.14264451762693883, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.15.", "error": "", "parent_id": "e0b4c484-a3bc-46f7-98bf-146613b9e8f0", "metadata": {"aucs": [0.25533627485974075, 0.24708248478070804, 0.25245297841865433, 0.2746555129915029, 0.2564415477101124, 0.21247359015872636, 0.24215976583968002, 0.19808980839848478, 0.2199091469519231, 9.999999999998899e-05, 9.999999999998899e-05, 0.024776308623495447, 9.999999999998899e-05, 0.010299602219357773, 0.03670999009266984, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03210685975987404, 0.0637903080843002, 0.05203900028071329, 0.08999513216692301, 0.081049483032691, 0.08827452126389401, 0.08532430338297359, 0.08918730464444125, 0.09233751677040603, 0.047228663517926206, 0.019900199875307223, 0.029667742129151686, 0.08187577021383263, 0.06683492441059025, 0.0625661589639338, 0.06679386529612408, 0.08045644106226935, 0.07530708923814322, 0.9009431534381689, 0.9058091022150344, 0.9049160484613171, 0.5042078519069353, 0.6384571592982624, 0.7521553230758797, 0.2145572658900483, 0.8884904692595734, 0.9003899323158896, 0.13414855810621662, 0.1030428192623416, 0.11828284976436465, 0.07640514763118322, 0.10446649360644766, 0.08652754382859607, 0.12827867327855325, 0.08822451732125647, 0.11715185562470976, 0.16554696936936486, 0.2002934859750901, 0.1711391225897212, 0.22091355706559213, 0.23221304011643062, 0.20784793085330688, 0.17937301637188519, 0.24266518384694202, 0.17306810650136517, 0.09124300503219784, 0.09626039795758223, 0.07975922371202981, 0.03295709938011826, 0.0403998934259846, 0.04190114415311896, 0.09681312484403859, 0.09869960465053229, 0.07397429002049538, 0.09085095631635831, 0.08651274878350212, 0.0793544423746756, 0.06994053332935624, 0.06885400466396152, 0.08403618142731484, 0.07488567801735135, 0.08516964309906416, 0.0709145801753821, 0.01718487829244364, 0.011182618812826006, 0.018027387194044397, 0.02172249564915052, 9.999999999998899e-05, 0.04547379736126711, 0.012934275487062274, 0.00841591959776311, 9.999999999998899e-05, 0.06333696830702595, 0.11311387352546265, 0.11917559208291517, 0.05035595245535174, 0.07057765105818559, 0.10504157249259827, 0.09831526487676878, 0.07227833755968882, 0.09185584046836115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041729537184549415, 0.04656074640496788, 0.04440338356110696, 0.03572833036970058, 0.05032379542926879, 0.030509083443246876, 0.009025845275217215, 0.007986640079853724, 0.004656149462500592, 0.2003844423089155, 0.18806149344437573, 0.2056990312164383, 0.2055799784281095, 0.1714511066506922, 0.208126192810553, 0.22387342769014063, 0.19273997337649174, 0.279336044667317, 0.07654705583323462, 0.08559408160024651, 0.07167009066766183, 0.07636611939459437, 0.09863135386382182, 0.0858280372260447, 0.05758106577367672, 0.06875124637484331, 0.07160147526525706, 0.14237865846385322, 0.15143125798215884, 0.1368282679413878, 0.1836440450834892, 0.14589345536809173, 0.1381822343478445, 0.14963138758589234, 0.16460470328142363, 0.1687798826303053, 0.1604137259708086, 0.15059180881326262, 0.16814906059237933, 0.1921188567412382, 0.186632044504369, 0.1772720223341726, 0.1903521522738275, 0.20874992943321824, 0.18971604854423163, 0.1378297931692627, 0.13679183761265357, 0.13499680717654106, 0.15426595231541285, 0.17268288576773594, 0.1892819524446333, 0.12451710757488199, 0.14292779269347355, 0.11904575591533717, 0.1806814643205662, 0.15591751049751035, 0.1683462237250598, 0.1841663559932859, 0.16717754661162476, 0.19925388945270428, 0.17913631188310297, 0.1721309196313241, 0.19667878229520175, 0.15610418023414785, 0.16404686729063578, 0.15382667914732773, 0.18124004103343594, 0.1711488120567929, 0.18382077217709458, 0.15828140651804823, 0.168354988558426, 0.1801620023833067, 0.21674369540994176, 0.21911799274886878, 0.18474793178000137, 0.1639616950706897, 0.1528328622564975, 0.14893002530048194, 0.16215744918477848, 0.15082938673723179, 0.1599502405931651, 0.14489770830857562, 0.24421402507308432, 0.15777614818627173, 0.1441444894488092, 0.19617182543868994, 0.12911574216316368, 0.16802372711069802, 0.16448694155013566, 0.1596214576108128, 0.18197160640468024, 0.19815569173800973, 0.1915308324987003, 0.19067538974524922, 0.2135749380374129, 0.17520720818330215, 0.18190064382421134, 0.1845763506241539, 0.20568880668582523, 0.07949404311248531, 0.0766097241488426, 0.06978615320426507, 0.06954373834756333, 0.07228202840400422, 0.07294464394344247, 0.08558820375294107, 0.06817359594717198, 0.07100250797331786]}, "mutation_prompt": null}
{"id": "3d12ffa7-fe4e-4ab6-8c37-3814e310327a", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.25 * self.budget:  # Changed from 0.3 to 0.25\n                new_size = max(5, int(self.population_size * 0.7))  # Changed from 0.75 to 0.7\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Adaptive mutation factor based on diversity\n                mutation_factor = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor *= 1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean()\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                self.crossover_rate = 0.6 + 0.4 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30)))  # Changed from 0.65 + 0.35 to 0.6 + 0.4\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with a strategic reduction in population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 35, "fitness": 0.14533702881855512, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.15.", "error": "", "parent_id": "e0b4c484-a3bc-46f7-98bf-146613b9e8f0", "metadata": {"aucs": [0.21360209709056643, 0.291839937012106, 0.2294255986355649, 0.2470761878874117, 0.24514173841562303, 0.2644837416545325, 0.23937464581048695, 0.20191663797170123, 0.215762688066511, 9.999999999998899e-05, 0.012166429385341515, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011640121091600841, 0.02056465702002186, 0.030232148380683443, 9.999999999998899e-05, 0.03210685975987404, 0.04496310970400286, 0.02494238013514405, 0.10415814775086729, 0.1005241179844304, 0.08118432795585617, 0.16259457853687742, 0.09258335299624121, 0.09460856404286655, 0.022932461233801216, 0.015149668515456183, 0.028768542186533907, 0.07342375310827465, 0.05450748460525445, 0.08424281956460378, 0.08938963564569369, 0.06996555956851858, 0.09866186154236634, 0.9009431534381689, 0.9058091022150344, 0.9049160484613171, 0.8266083340828851, 0.6522912224666408, 0.5443182946302383, 0.6159977116482176, 0.889171450187248, 0.5404622826620564, 0.1084714697384408, 0.13310930442548874, 0.13353925975078895, 0.07720079298552152, 0.0968125780568958, 0.0796251718449017, 0.11848809234556523, 0.11879878976526448, 0.13121119962891303, 0.2156127484742938, 0.21532100631648, 0.17605206621151848, 0.20526763003826065, 0.20414143413559915, 0.21238890488787243, 0.15312361227679216, 0.21294525722277402, 0.18155697525503012, 0.0992080733235089, 0.08153761380493574, 0.09281151351227168, 0.024921481009996027, 0.0403998934259846, 0.027205122227759282, 0.09867816797096873, 0.08367712139907524, 0.0794131457307502, 0.07744580032633452, 0.07115663047564103, 0.08870898248255765, 0.06685303313140067, 0.07270402283579369, 0.0997604718623144, 0.09927982027081583, 0.07461567530060509, 0.08460070901356354, 0.03313661228177622, 9.999999999998899e-05, 0.013639751679261458, 0.005929060869722558, 0.009792262560553544, 0.034085152193559454, 0.001141024325936768, 9.999999999998899e-05, 9.999999999998899e-05, 0.045420635265057574, 0.09313739332199344, 0.11776547487367184, 0.05949202165075895, 0.0687127404775878, 0.11287913039375708, 0.09359106714262633, 0.08047053473189048, 0.05341689511923797, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03013242461299137, 0.02873451629644974, 0.06289175281703085, 0.0740554987025136, 0.03333114130687098, 0.02974961896660533, 0.06613597670112281, 0.037845468327539655, 0.01583946091626731, 0.2003844423089155, 0.18462911766473922, 0.17965834533621294, 0.2055799784281095, 0.1714511066506922, 0.19226744717352073, 0.2553599771545604, 0.22644713034297237, 0.2084514566938841, 0.09233462463524489, 0.06790206473544791, 0.07999728865048705, 0.07635878993809475, 0.08696239424970953, 0.08720286833730095, 0.0625151941657014, 0.06627606864687074, 0.07498381814852506, 0.15059016271395287, 0.15809027054929414, 0.20318577236863944, 0.14516048714554108, 0.14391798399190026, 0.17282738723057411, 0.15984278661239437, 0.1598400822843833, 0.1644169591423995, 0.1604137259708086, 0.15059180881326262, 0.16814906059237933, 0.1821811956426248, 0.22518166888675017, 0.23647335019112203, 0.18388612729247633, 0.18817527410514623, 0.18279323645671075, 0.12559131404305446, 0.1185154263296645, 0.1345599766821297, 0.17227197076950018, 0.1508464737055052, 0.16859027673461746, 0.1454747625206937, 0.14869422752724182, 0.1338339895757028, 0.18596914956201516, 0.165611328782994, 0.1871912779867434, 0.20028027309869456, 0.15617515603489895, 0.183569628365015, 0.19427211121932186, 0.16816062547450406, 0.1754116052541531, 0.1678916069750367, 0.17036691452849895, 0.15009444259540683, 0.22985686987812637, 0.17316050131510452, 0.17145788349062008, 0.17889775319338563, 0.168849086910681, 0.18062034956592665, 0.19695460008235943, 0.19928777981858437, 0.17274125662833706, 0.27317852694775213, 0.14972110497393876, 0.14117364082351813, 0.13213354288926316, 0.16037423562580022, 0.16539518938999476, 0.13909163833992588, 0.2315793922171725, 0.13625359832497397, 0.24031386259109266, 0.12548899611147868, 0.263652916161637, 0.17186180435057652, 0.16448694155013566, 0.1596214576108128, 0.18293153490250713, 0.1959078366161825, 0.17160363134494638, 0.18773340467283184, 0.21359826062140586, 0.17871090409936574, 0.20217870811726502, 0.18868269819851002, 0.20568880668582523, 0.07119634513815454, 0.07203385042405896, 0.08166358013469399, 0.07466437167203965, 0.06762960588232148, 0.07227796472515635, 0.07788856933379107, 0.07883795550631512, 0.06744463687451097]}, "mutation_prompt": null}
{"id": "5fcc6529-8f25-4a01-ae0a-7be103f1bf0f", "solution": "import numpy as np\n\nclass MemeticDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.local_search_prob = 0.15\n\n    def local_search(self, individual, func):\n        # Local search using a simple gradient approximation\n        step_size = 0.01\n        trial = np.copy(individual)\n        for i in range(self.dim):\n            trial[i] += step_size\n            right = func(trial)\n            trial[i] -= 2 * step_size\n            left = func(trial)\n            trial[i] += step_size  # reset to original\n            if right < left:\n                trial[i] += step_size\n            elif left < right:\n                trial[i] -= step_size\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Adaptive mutation factor based on diversity\n                mutation_factor = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor *= 1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean()\n\n                mutant_vector = a + mutation_factor * (b - c)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.local_search_prob:\n                    trial_vector = self.local_search(trial_vector, func)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "MemeticDifferentialEvolution", "description": "Adaptive Memetic Differential Evolution integrates local search strategies with adaptive mutation and crossover to enhance convergence speed.", "configspace": "", "generation": 36, "fitness": 0.10738229031009378, "feedback": "The algorithm MemeticDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.14.", "error": "", "parent_id": "e0b4c484-a3bc-46f7-98bf-146613b9e8f0", "metadata": {"aucs": [0.16834045273823017, 0.17717609592104766, 0.15905745887908818, 0.16193287893964736, 0.16077847573788617, 0.16173893177844345, 0.1739226485981391, 0.14153762646057189, 0.22117665738163872, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03210685975987404, 0.04807181726610121, 0.026890704766927787, 0.04785583688092798, 0.0382145262355672, 0.04175424206584888, 0.04669437225964268, 0.03588651610472804, 0.06614281290199486, 0.022932461233801216, 0.016120475695539982, 0.028768542186533907, 0.03094447619260643, 0.024443487761251936, 0.024722249860686274, 0.04381692336215415, 0.01681014049016427, 0.033331334323986606, 0.8321847404333581, 0.8822360879426131, 0.8646133362609275, 0.5972817729127322, 0.11738785833779253, 0.847666186436213, 0.10186796261152509, 0.17551773193788978, 0.8806658894895316, 0.06949984127211306, 0.0818804052070482, 0.10171882691615464, 0.04752685190071915, 0.0701914176656182, 0.06596012100668436, 0.10873411537883315, 0.05790070648042578, 0.09836666620269374, 0.12002385599460796, 0.19308637766117165, 0.1603850003914049, 0.09898357197124863, 0.11060283530916681, 0.11793592250846419, 0.08826483685796416, 0.13356950589090089, 0.12005437120636431, 9.999999999998899e-05, 0.021561956509768554, 0.0013511559286667474, 9.999999999998899e-05, 9.999999999998899e-05, 0.010017898548655868, 9.999999999998899e-05, 0.007060511517140378, 0.010765175294588869, 0.005946399720480389, 0.024108524536175846, 0.0006190842955960951, 9.999999999998899e-05, 0.035362057023575866, 0.012559182843972172, 0.03252388938525941, 0.017415707732905905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04745005805939695, 0.06535045920481664, 0.04490689360873623, 0.07578423984715632, 0.056518099899280916, 0.03382257173159464, 0.057936805838045946, 0.0497211637865379, 0.048473098982758756, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011106578504442854, 9.999999999998899e-05, 0.0005272835516280105, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20067363143024364, 0.18462911766473922, 0.18354389317317987, 0.20569771892865374, 0.1714511066506922, 0.19294063505613335, 0.19878725587640278, 0.1583921086460306, 0.19007691539720828, 0.041383239751524026, 0.03758269238801515, 0.027162169800367342, 0.04852117856463933, 0.03407030522671861, 0.041175929318747695, 0.04397942692902601, 0.058275570841442303, 0.056199801617210166, 0.14800894184133961, 0.11183617176527638, 0.12759994004545605, 0.16470265329352385, 0.13511880823300437, 0.13429828005793276, 0.14963138758589234, 0.1419273868967199, 0.12613783019802416, 0.1602710620254989, 0.15059180881326262, 0.16814906059237933, 0.15256926594425346, 0.15412243821391025, 0.162718559808677, 0.14614590791628002, 0.17377774300845283, 0.1450897710833109, 0.11069112585936614, 0.10816084466295395, 0.11711502411817565, 0.10730183224575918, 0.12092313537362531, 0.10466438525210486, 0.12837191517305746, 0.1237427242099084, 0.09321422018317793, 0.1361042001207503, 0.1573880481833505, 0.15173643503771528, 0.1420499434696596, 0.1348712335057658, 0.16008896810226814, 0.13955449568712552, 0.13816422928230765, 0.17985617343156868, 0.13764664148547978, 0.15516209056398034, 0.15901777292936325, 0.1432475899433857, 0.15748346037311167, 0.14493275450512444, 0.14755146802967378, 0.14194783158853264, 0.16207881422481074, 0.12793710027700889, 0.16679477618376493, 0.1593083731255257, 0.15176503580803635, 0.1207914665021157, 0.11366881042480814, 0.1363978108184909, 0.13103481399402683, 0.15692009224327252, 0.1217206759065581, 0.11525834685803871, 0.1476174376136138, 0.12956126951579316, 0.12148707404315395, 0.1442047725128779, 0.1609143438768892, 0.1696885861487908, 0.15163446317533236, 0.17792571340641827, 0.19331201198505776, 0.1862626435079845, 0.19485148261044793, 0.2135749380374129, 0.18903846914722255, 0.2151686739697738, 0.18868719215845564, 0.20568880668582523, 0.04059870889754402, 0.058145903044643954, 0.06585155299632517, 0.054237544842520746, 0.05905261469169132, 0.05065975397331368, 0.07532529613519179, 0.055857000448143124, 0.05315540162353516]}, "mutation_prompt": null}
{"id": "57f71c85-43cd-4a68-9a90-71c9051ba8f4", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        successful_mutations = 0\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Dynamic mutation factor based on iteration and success rate\n                dynamic_factor = (1 - eval_count / self.budget) * (1 + successful_mutations / (eval_count + 1e-30))\n                mutation_factor = self.mutation_factor * dynamic_factor\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    successful_mutations += 1\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with dynamic mutation factor scaling based on iteration and success rate for improved convergence.", "configspace": "", "generation": 37, "fitness": 0.13712360271788046, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.14.", "error": "", "parent_id": "e0b4c484-a3bc-46f7-98bf-146613b9e8f0", "metadata": {"aucs": [0.2759184122141364, 0.258808388998531, 0.23473145874565904, 0.25134150893582397, 0.2680121514302649, 0.25327666397164894, 0.23350136352995143, 0.22563112623406345, 0.24223296408181616, 0.041081916282045494, 0.035842552245921255, 0.005323073509164944, 0.013843569366448372, 0.02037855664464039, 0.019575102521484755, 0.005643976802568229, 0.03536847252877129, 0.01622461175082457, 0.06838325090859287, 0.06432447255843687, 0.048933895735069344, 0.0752021938818338, 0.07936036566400906, 0.07147679500276627, 0.08657176289769886, 0.0628425143960698, 0.07178525827214288, 0.03942934523151165, 0.018402794120200072, 0.04167618205785917, 0.058291794073729974, 0.05677355690261521, 0.05623271075189673, 0.08182537506548049, 0.045816895397337465, 0.05806986827016858, 0.8303521851386263, 0.7672541632869238, 0.2433114543116499, 0.70714218260356, 0.6139219193612554, 0.6016428094342743, 0.8615997264961569, 0.7053123403515069, 0.6639561471768742, 0.09837601349656122, 0.09885317170095076, 0.10678695300511698, 0.09605960300741068, 0.08944025881023476, 0.10726520668807138, 0.1021307233278359, 0.10336143341292359, 0.08919533621105913, 0.16792263888319214, 0.2042474476549493, 0.16805114410563715, 0.18984882751128673, 0.14603774545295833, 0.17169677996728716, 0.17766797676895618, 0.19903465997445424, 0.23056150690353505, 0.08896917602321519, 0.027234959893752797, 0.05099698759856586, 0.041051863923937004, 0.040799449364910645, 0.05004269775006864, 0.06656702061837116, 0.054552580563342, 0.05139239421565711, 0.039903269531143426, 0.0505652984766668, 0.07115857539660353, 0.0571975210951845, 0.06800922069083737, 0.051044349909932674, 0.057392915624229546, 0.05354563455339889, 0.04496611224465685, 0.028989266368382394, 0.01602930799689095, 0.004908424987377313, 9.999999999998899e-05, 9.999999999998899e-05, 0.015410097246240761, 0.04714291184769104, 0.02954456339615741, 0.004784718858937387, 0.09086776078664571, 0.11159918184295492, 0.10146256485615379, 0.09539987962719876, 0.08701991760026773, 0.13390210391004898, 0.10077554445862602, 0.11367277100111917, 0.06797248918673138, 0.003965353446344633, 0.06031076660105772, 9.999999999998899e-05, 0.010711944768624693, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009537875221711678, 9.999999999998899e-05, 0.025982557177775978, 0.042669860078860644, 0.028580897217438728, 0.024799659847672184, 0.02242328239765612, 0.0194074584488253, 0.009157130441908023, 0.0138873987767405, 0.034055858103755554, 0.21632658809236993, 0.19804689729766944, 0.1922519458068528, 0.21438225454121618, 0.1800129537678642, 0.19226744717352073, 0.2592299132003051, 0.23466401585823105, 0.29609785628473806, 0.06616088040756818, 0.07700949160887827, 0.06373158154889402, 0.06729668093103625, 0.06908000639650946, 0.05987731417869213, 0.05491424969551695, 0.05556951227745088, 0.059183689302363396, 0.13763293800309107, 0.14083464385070477, 0.13516719265329558, 0.13934942359855462, 0.15673398099979463, 0.12887687039633589, 0.14963138758589234, 0.15833282652054625, 0.1477377111484539, 0.16828301155916758, 0.1718595344347017, 0.17567810162019815, 0.183089081067338, 0.1869699885960444, 0.1885589550122767, 0.19791501771429443, 0.19573047802504195, 0.1877133059301097, 0.11070335853638191, 0.12213475612649616, 0.1200830794098885, 0.13412348054695944, 0.14755850085891686, 0.13940189639381972, 0.13772294025124032, 0.14091330947851766, 0.13716686586378712, 0.15654787479583898, 0.18640209820466425, 0.1687057222626196, 0.16848248222838336, 0.16568020508987424, 0.17392192638124526, 0.18027046035574534, 0.17422159732000342, 0.18020498169876864, 0.14726680634379152, 0.15954302273236043, 0.15623200765519485, 0.15558571146315303, 0.17211834837423334, 0.15869708784735248, 0.14904659423584177, 0.18227466431491923, 0.17062491041953454, 0.18263861405563842, 0.18398214247010347, 0.2076657514181499, 0.16223337721884545, 0.19405776882975312, 0.1448252091771678, 0.1883819553813464, 0.22860110496815, 0.15692009224327252, 0.16355071328977866, 0.21161653818813253, 0.16278781803771558, 0.16812116406095667, 0.17241949770486442, 0.15286688574443674, 0.20014370651745061, 0.16448694155013566, 0.14783538892454473, 0.1906194703702807, 0.1943673607093046, 0.17575389879127779, 0.18728718511653775, 0.21535873956355922, 0.1838385853259955, 0.18351297982703396, 0.184777496820983, 0.2057967344326822, 0.06936351187575851, 0.06755773912863317, 0.07593701611885773, 0.0641993858147687, 0.07286580319304481, 0.06913781956994514, 0.07583500714221736, 0.06483246384293273, 0.05846307336417356]}, "mutation_prompt": null}
{"id": "20f95e89-21d7-4c16-994c-25c8b5e8f3c0", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(5, int(0.1 * budget))\n        self.mutation_factor = 0.85\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            if eval_count > 0.3 * self.budget:\n                new_size = max(5, int(self.population_size * 0.75))\n                population = population[:new_size]\n                fitness = fitness[:new_size]\n                self.population_size = new_size\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Dual adaptive mutation factors based on diversity and fitness spread\n                mutation_factor1 = self.mutation_factor * ((self.budget - eval_count) / self.budget) * (1 - np.std(fitness) / (np.mean(fitness) + 1e-30))\n                mutation_factor2 = self.mutation_factor * (1 - (np.var(fitness) / (np.mean(fitness**2) + 1e-30)))\n                mutation_factor = (mutation_factor1 + mutation_factor2) / 2 * (1 + 0.1 * (np.std(population, axis=0) / (np.mean(population, axis=0) + 1e-30)).mean())\n\n                best_individual = population[np.argmin(fitness)]\n                mutant_vector = a + mutation_factor * (b - c) + 0.15 * (best_individual - a)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                self.crossover_rate = 0.65 + 0.35 * (1 - (np.min(fitness) / (np.mean(fitness) + 1e-30)))\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n        return population[np.argmin(fitness)], np.min(fitness)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with dual adaptive mutation factors for diverse convergence adjustment.", "configspace": "", "generation": 38, "fitness": 0.1476505966076341, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.15.", "error": "", "parent_id": "e0b4c484-a3bc-46f7-98bf-146613b9e8f0", "metadata": {"aucs": [0.23115584562315206, 0.2536398693451023, 0.2040693377172802, 0.29691782126110133, 0.26140234213055, 0.21165000640946952, 0.22914414374753378, 0.25795974094094154, 0.2380840047774836, 0.019537286931653575, 0.020882254115608512, 0.14070620070734297, 0.001158337767595774, 0.011280515168901717, 0.03162048802007922, 0.014020410663575733, 0.012281275561796479, 0.019890185284362594, 0.053717842502089885, 0.08769950178155705, 0.0556386447890469, 0.07969040447322351, 0.07591890393953526, 0.08750871971065188, 0.09020791906348291, 0.08566550073388257, 0.1638619439250406, 0.03142681219069221, 0.015149668515456183, 0.033768121667710926, 0.06298839617128782, 0.06722234586776865, 0.06357516163744348, 0.06169433363622834, 0.0660462302679844, 0.08353779806382877, 0.9010011061940166, 0.9058091022150344, 0.9049160484613171, 0.6996642736163468, 0.629591522344688, 0.788641221188669, 0.695665611289739, 0.888558013214552, 0.5290717097619304, 0.13432482424135228, 0.1192901268206128, 0.14186283056785065, 0.12272841039831761, 0.12758345141333516, 0.11895621878897433, 0.14720485549135498, 0.10149567365050394, 0.13063624851619282, 0.15843914191477015, 0.23742661746208438, 0.15493310719665243, 0.2238808118746971, 0.20676511108397044, 0.1755673238355261, 0.2216631794797499, 0.22266982192587814, 0.24066888991123814, 0.06600229512164302, 0.07325446632219978, 0.13012247760453488, 0.06536482614691141, 0.05166163981228511, 0.052087901461043695, 0.09009154397417629, 0.09691120736811021, 0.08571310171758273, 0.06984460253367175, 0.07714109418957504, 0.0704389489531504, 0.05667803893906309, 0.07464018505286862, 0.07809140439881646, 0.05851721611244809, 0.07825732231052318, 0.08724275963073469, 0.03704261205386805, 0.04016980480862331, 0.043754370580115, 0.04365524750526861, 0.021923582036975642, 0.03215030914834538, 0.020977052098565818, 0.013213916906663292, 0.020258296233200745, 0.1340267460403366, 0.1520760306930644, 0.12473080816729365, 0.11126914802554055, 0.13418423476092012, 0.11279411677955031, 0.1177917196034679, 0.0940758092165892, 0.0881252068388867, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00045352386236696685, 9.999999999998899e-05, 9.999999999998899e-05, 0.032473293323360686, 0.03547983315148562, 0.06435520280429663, 0.0440044833863501, 0.014577502813630794, 0.02766107078772362, 0.09134191365334954, 0.025246845205340263, 0.028678765524454364, 0.022631479033869306, 0.022003928811985318, 0.004002874879465712, 0.20456210123307939, 0.1990799977865617, 0.21982858943259964, 0.21125752266623699, 0.19168673011882464, 0.23355699961080023, 0.2403814631794291, 0.2341171481726485, 0.22215483283933968, 0.06736716512222862, 0.07485938039385343, 0.057667161172052284, 0.07383765941632137, 0.07899362377956098, 0.06889090025711087, 0.07203923085927577, 0.0650822175991489, 0.0719881362745749, 0.14376109337993148, 0.1320816697234608, 0.17108194594119774, 0.14357781975573702, 0.1369579317452122, 0.1359588938494113, 0.1621791087297343, 0.13363088446535099, 0.1325124799486881, 0.1602710620254989, 0.1527735278847251, 0.22312195406651947, 0.1956085585700097, 0.1900220515075539, 0.18204482027162416, 0.19340973449091348, 0.20021926886327002, 0.17065726346990762, 0.1267321453206829, 0.1382136010982804, 0.13353962112012963, 0.1731978106515193, 0.17799378341787742, 0.1446540272854958, 0.1413391792660712, 0.17074158613114565, 0.13686089236398347, 0.17409833263249808, 0.14586166761222352, 0.1596172064649649, 0.1666290640917365, 0.1622305414819859, 0.1656298869038244, 0.1513140072276825, 0.15191531306729067, 0.1738360226363489, 0.15987020846987887, 0.15883596178878268, 0.1624149756129989, 0.17348587912861035, 0.1822770178348706, 0.1790105721419093, 0.16828178211062184, 0.1724013623302355, 0.17186054653879124, 0.15349548101890742, 0.1679550184511368, 0.1593083731255257, 0.20635975815951968, 0.1553745538079021, 0.16566238777541298, 0.12727563478002035, 0.14631509092634765, 0.15692009224327252, 0.15633877772023264, 0.15839995382661587, 0.13311994876583233, 0.24365218222226848, 0.12226889985468481, 0.14566609799193753, 0.17303660292946554, 0.17928982519816417, 0.17456012068540128, 0.18839599459679335, 0.1872519740887847, 0.17809836262780498, 0.1959206485073166, 0.2135749380374129, 0.1799613362212258, 0.18846179747611813, 0.18206273109408222, 0.20568880668582523, 0.06199351359971128, 0.0672756145312503, 0.07109016144466807, 0.06423335551374187, 0.06641324317564778, 0.06337259004398088, 0.07990698423775044, 0.06502186862878967, 0.071317895568492]}, "mutation_prompt": null}
