{"id": "ce57dfb7-3930-421c-bbbe-fc73897d252a", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.7\n        self.temperature = 100.0\n        self.cooling_rate = 0.99\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx].copy()\n        best_fitness = fitness[best_idx]\n        \n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution mutation and crossover\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.mutation_factor * (x1 - x2), self.lb, self.ub)\n                crossover = np.random.rand(self.dim) < self.crossover_probability\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                eval_count += 1\n                \n                # Simulated Annealing acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / self.temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n                \n                # Cooling down the temperature\n                self.temperature *= self.cooling_rate\n                \n                if eval_count >= self.budget:\n                    break\n\n        return best_solution", "name": "HybridDESA", "description": "A hybrid Differential Evolution and Simulated Annealing algorithm leveraging stochastic search and adaptive cooling for robust optimization.", "configspace": "", "generation": 0, "fitness": 0.30008009076304226, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8005170070418811, 0.7911503210766488, 0.7755140382049175, 0.7909416328019526, 0.7930984537464003, 0.8092071094177054, 0.7925922525406873, 0.8001325407728722, 0.7863526026412342, 0.6600794260477802, 0.6572294336617486, 0.6317868725546714, 0.637720011137281, 0.6501867152726432, 0.6336583496738908, 0.6377126169127748, 0.6405654238866993, 0.6511034712164593, 0.1685671197519738, 0.14467221854963408, 0.20435483421730405, 0.1472911321422753, 0.17908455565403436, 0.16637216023800483, 0.21580551011514937, 0.14318573186408234, 0.15873454399896614, 0.12304139256260083, 0.15185939904910306, 0.1296568682556012, 0.13006847795124143, 0.17917886916935366, 0.1338862748197004, 0.1364588215913103, 0.12562309001879712, 0.13087987486036967, 0.9125497326414377, 0.9184405225410666, 0.9432955182625624, 0.9360035950901425, 0.915420080903302, 0.9429154537568585, 0.898376582411576, 0.9394410131559796, 0.9307625874128584, 0.4041022322309735, 0.4021373858359012, 0.39338969161582715, 0.4370480773608062, 0.38405043329140376, 0.4166731473790587, 0.39699293269471325, 0.4021861981583724, 0.4026142490656446, 0.5649045448206484, 0.49589795838743644, 0.5381093914693968, 0.64177691318923, 0.6187090391025625, 0.6273541207046044, 0.5943124038387213, 0.6568812711971377, 0.5852456719666234, 0.1785539786893311, 0.15272901303907516, 0.22755193812882457, 0.17506477527244657, 0.16326545345782217, 0.1867034828391101, 0.18426148846548607, 0.18900138930865318, 0.18516639473276408, 0.14203961000121323, 0.17023232296948865, 0.16506641910611775, 0.15459985627405948, 0.1708341054949265, 0.18303063288267363, 0.1656522188949251, 0.16835984426041817, 0.17640911120495129, 0.05567603735456794, 0.054240243237927865, 0.0763116822397405, 0.04988701422303454, 0.0725878403704372, 0.048642503139397886, 0.09271848250793668, 0.04258786684607818, 0.07017177832720556, 0.19755618106643136, 0.18536855480431103, 0.20237157458700217, 0.17214930603306966, 0.20380321745901864, 0.14185318926230395, 0.2147654556121109, 0.21288482916157359, 0.22286242345707408, 0.055325547205218206, 0.03420057633233542, 0.033741753134310826, 0.06230880387907878, 0.08961835725536915, 0.014122946999470365, 0.08581068871088049, 0.06419837466808564, 0.08846252100858876, 0.16979522202979658, 0.15299292321477864, 0.16997612269982454, 0.1927630515665978, 0.1640394732217223, 0.17827717744591953, 0.1692836322125162, 0.16318329996793712, 0.16752425663357262, 0.535381728470161, 0.5288782397673402, 0.5421207673904114, 0.5518995973575955, 0.5438779747099188, 0.5349755830402085, 0.537385763865257, 0.5320267418565978, 0.5491269711563949, 0.12036108551645208, 0.10125759410701685, 0.10090539823588385, 0.09193125079222297, 0.09463499929925823, 0.09769767423993547, 0.09128027855266496, 0.1200108858076313, 0.08851240213245803, 0.13564693954399154, 0.17365943120748384, 0.15777665038996258, 0.1595659382362945, 0.14273710718340227, 0.14906964328676986, 0.19415403377200757, 0.16185033350325906, 0.11998842046373592, 0.3682466824113809, 0.3611411412396286, 0.3529541378717145, 0.33480059303896126, 0.35398962163400605, 0.3468495886594586, 0.3872693173559436, 0.3956334143997857, 0.3885283767027834, 0.2564503241234827, 0.2517669569891655, 0.23768363637962497, 0.22685107644242952, 0.241359621177069, 0.21366023671466405, 0.25199317354713, 0.29651194194006514, 0.2863337967670023, 0.20636440130546574, 0.18201967582290013, 0.18336904105938523, 0.21426031385792588, 0.20922341049365878, 0.1891431813273885, 0.19335590838424221, 0.17902117325852418, 0.19904544466345742, 0.19657273661347252, 0.19792037949443153, 0.1966944863591713, 0.214805819364423, 0.19744604562863366, 0.20406802829762272, 0.19561643231831327, 0.1944845006558268, 0.19560075280560663, 0.45044163018458294, 0.16931882095732798, 0.6387226125890371, 0.47139700080532376, 0.17506377866866007, 0.48443115524242497, 0.2211382516023328, 0.3589869016069952, 0.598481346883021, 0.19888451527707451, 0.19815145204271667, 0.19729037836611507, 0.3490034852302222, 0.20142573273983277, 0.16258795881102983, 0.41632619415151206, 0.19572402166869463, 0.2049688197894275, 0.1859088146588589, 0.17624811833927945, 0.19765028743351143, 0.20280732281576608, 0.17670533440174807, 0.18490643434068488, 0.17161778444048137, 0.16943022114034179, 0.18412559019614716, 0.07733557658741808, 0.07771466679367678, 0.07626495703833203, 0.07270359009349447, 0.0837693466412649, 0.07412080912606067, 0.07917578579501028, 0.07811808804290521, 0.08015917252664129]}, "mutation_prompt": null}
{"id": "cf04c3bb-b56a-4b28-a06e-cf41148fd739", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.7\n        self.temperature = 100.0\n        self.cooling_rate = 0.99\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx].copy()\n        best_fitness = fitness[best_idx]\n        \n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution mutation and crossover\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.mutation_factor * (x1 - x2), self.lb, self.ub)\n                crossover = np.random.rand(self.dim) < self.crossover_probability\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                eval_count += 1\n                \n                # Simulated Annealing acceptance\n                delta = trial_fitness - fitness[i]\n                if delta < 0 or np.random.rand() < np.exp(-delta / self.temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n                \n                # Cooling down the temperature\n                self.temperature *= self.cooling_rate\n                \n                if eval_count >= self.budget:\n                    break\n\n        return best_solution", "name": "HybridDESA", "description": "A hybrid Differential Evolution and Simulated Annealing algorithm leveraging stochastic search and adaptive cooling for robust optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ce57dfb7-3930-421c-bbbe-fc73897d252a", "metadata": {"aucs": [0.8005170070418811, 0.7911503210766488, 0.7755140382049175, 0.7909416328019526, 0.7930984537464003, 0.8092071094177054, 0.7925922525406873, 0.8001325407728722, 0.7863526026412342, 0.6600794260477802, 0.6572294336617486, 0.6317868725546714, 0.637720011137281, 0.6501867152726432, 0.6336583496738908, 0.6377126169127748, 0.6405654238866993, 0.6511034712164593, 0.1685671197519738, 0.14467221854963408, 0.20435483421730405, 0.1472911321422753, 0.17908455565403436, 0.16637216023800483, 0.21580551011514937, 0.14318573186408234, 0.15873454399896614, 0.12304139256260083, 0.15185939904910306, 0.1296568682556012, 0.13006847795124143, 0.17917886916935366, 0.1338862748197004, 0.1364588215913103, 0.12562309001879712, 0.13087987486036967, 0.9125497326414377, 0.9184405225410666, 0.9432955182625624, 0.9360035950901425, 0.915420080903302, 0.9429154537568585, 0.898376582411576, 0.9394410131559796, 0.9307625874128584, 0.4041022322309735, 0.4021373858359012, 0.39338969161582715, 0.4370480773608062, 0.38405043329140376, 0.4166731473790587, 0.39699293269471325, 0.4021861981583724, 0.4026142490656446, 0.5649045448206484, 0.49589795838743644, 0.5381093914693968, 0.64177691318923, 0.6187090391025625, 0.6273541207046044, 0.5943124038387213, 0.6568812711971377, 0.5852456719666234, 0.1785539786893311, 0.15272901303907516, 0.22755193812882457, 0.17506477527244657, 0.16326545345782217, 0.1867034828391101, 0.18426148846548607, 0.18900138930865318, 0.18516639473276408, 0.14203961000121323, 0.17023232296948865, 0.16506641910611775, 0.15459985627405948, 0.1708341054949265, 0.18303063288267363, 0.1656522188949251, 0.16835984426041817, 0.17640911120495129, 0.05567603735456794, 0.054240243237927865, 0.0763116822397405, 0.04988701422303454, 0.0725878403704372, 0.048642503139397886, 0.09271848250793668, 0.04258786684607818, 0.07017177832720556, 0.19755618106643136, 0.18536855480431103, 0.20237157458700217, 0.17214930603306966, 0.20380321745901864, 0.14185318926230395, 0.2147654556121109, 0.21288482916157359, 0.22286242345707408, 0.055325547205218206, 0.03420057633233542, 0.033741753134310826, 0.06230880387907878, 0.08961835725536915, 0.014122946999470365, 0.08581068871088049, 0.06419837466808564, 0.08846252100858876, 0.16979522202979658, 0.15299292321477864, 0.16997612269982454, 0.1927630515665978, 0.1640394732217223, 0.17827717744591953, 0.1692836322125162, 0.16318329996793712, 0.16752425663357262, 0.535381728470161, 0.5288782397673402, 0.5421207673904114, 0.5518995973575955, 0.5438779747099188, 0.5349755830402085, 0.537385763865257, 0.5320267418565978, 0.5491269711563949, 0.12036108551645208, 0.10125759410701685, 0.10090539823588385, 0.09193125079222297, 0.09463499929925823, 0.09769767423993547, 0.09128027855266496, 0.1200108858076313, 0.08851240213245803, 0.13564693954399154, 0.17365943120748384, 0.15777665038996258, 0.1595659382362945, 0.14273710718340227, 0.14906964328676986, 0.19415403377200757, 0.16185033350325906, 0.11998842046373592, 0.3682466824113809, 0.3611411412396286, 0.3529541378717145, 0.33480059303896126, 0.35398962163400605, 0.3468495886594586, 0.3872693173559436, 0.3956334143997857, 0.3885283767027834, 0.2564503241234827, 0.2517669569891655, 0.23768363637962497, 0.22685107644242952, 0.241359621177069, 0.21366023671466405, 0.25199317354713, 0.29651194194006514, 0.2863337967670023, 0.20636440130546574, 0.18201967582290013, 0.18336904105938523, 0.21426031385792588, 0.20922341049365878, 0.1891431813273885, 0.19335590838424221, 0.17902117325852418, 0.19904544466345742, 0.19657273661347252, 0.19792037949443153, 0.1966944863591713, 0.214805819364423, 0.19744604562863366, 0.20406802829762272, 0.19561643231831327, 0.1944845006558268, 0.19560075280560663, 0.45044163018458294, 0.16931882095732798, 0.6387226125890371, 0.47139700080532376, 0.17506377866866007, 0.48443115524242497, 0.2211382516023328, 0.3589869016069952, 0.598481346883021, 0.19888451527707451, 0.19815145204271667, 0.19729037836611507, 0.3490034852302222, 0.20142573273983277, 0.16258795881102983, 0.41632619415151206, 0.19572402166869463, 0.2049688197894275, 0.1859088146588589, 0.17624811833927945, 0.19765028743351143, 0.20280732281576608, 0.17670533440174807, 0.18490643434068488, 0.17161778444048137, 0.16943022114034179, 0.18412559019614716, 0.07733557658741808, 0.07771466679367678, 0.07626495703833203, 0.07270359009349447, 0.0837693466412649, 0.07412080912606067, 0.07917578579501028, 0.07811808804290521, 0.08015917252664129]}, "mutation_prompt": null}
