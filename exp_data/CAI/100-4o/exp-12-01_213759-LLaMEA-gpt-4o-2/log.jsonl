{"id": "ee598e32-b481-4f7a-9995-29e7710845bf", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n    \n    def __call__(self, func):\n        rng = np.random.default_rng()\n        pop = rng.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        evals = len(fitness)\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[rng.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = rng.random(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[rng.integers(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n                # Local search: Randomly perturb the best solution found so far\n                if evals < self.budget and rng.random() < 0.1:  # Introduce local search with probability\n                    best_idx = np.argmin(fitness)\n                    perturbed = pop[best_idx] + rng.normal(0, 0.1, self.dim)\n                    perturbed = np.clip(perturbed, self.lower_bound, self.upper_bound)\n                    f_perturbed = func(perturbed)\n                    evals += 1\n                    if f_perturbed < fitness[best_idx]:\n                        pop[best_idx] = perturbed\n                        fitness[best_idx] = f_perturbed\n\n        return pop[np.argmin(fitness)]", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS), combining differential evolution's global search with local search to enhance exploration and exploitation balance.", "configspace": "", "generation": 0, "fitness": 0.27935821511320524, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.603003951774532, 0.5985922861805228, 0.5990654345504485, 0.630560471134732, 0.646980125598339, 0.6567898965284382, 0.6564287476333396, 0.6472389351058869, 0.6601423778775557, 0.3674489586281634, 0.36707865789580474, 0.36955207720704475, 0.3596246486092517, 0.346660617740428, 0.3765131260036415, 0.36093948981596, 0.3280948875683307, 0.3405424527139356, 0.10072900450601396, 0.09420480338928827, 0.10718551600679971, 0.10632959245777762, 0.11629451502685006, 0.10315237824105339, 0.11189784174226847, 0.12837723742634843, 0.11216131188543643, 0.10198356118033913, 0.09003773135151527, 0.10847427942357768, 0.09617310561568537, 0.08908340232652956, 0.08957485724774705, 0.09334935418876644, 0.11076620907673662, 0.08915188584241096, 0.9549219943734147, 0.9163400166652952, 0.9113447103768672, 0.9468437876472465, 0.9220990630564232, 0.9033598119156302, 0.9305929560939746, 0.9645439464966292, 0.9504928540478234, 0.2683835765993814, 0.2875917527896026, 0.31329943294868867, 0.31507265655475103, 0.28752509602084075, 0.2783471729549478, 0.31433231344806667, 0.30612806284514904, 0.31553183920166716, 0.4390840312283214, 0.6969605139927857, 0.5201959889389642, 0.4965743275218628, 0.5548418558759574, 0.4278498601926134, 0.5039818980012676, 0.4590905259855136, 0.47832950842649136, 0.1893426514047496, 0.2306312000713735, 0.19831143265525952, 0.18559012000672115, 0.22756119566285926, 0.2060366103397363, 0.18724414412733037, 0.21705289437398312, 0.2335598414396557, 0.16519565353706744, 0.19629462721920277, 0.16708067953453976, 0.18535847751177137, 0.21274201658469305, 0.16896003575915097, 0.2143513252678465, 0.14723635281319525, 0.20261240825541127, 0.07206739002646045, 0.13612040421977178, 0.11219296364480946, 0.11770426937584, 0.13109433825717953, 0.12039320120438146, 0.11443659486836188, 0.11015902142713152, 0.122396759192691, 0.25691516242114665, 0.22380433619376905, 0.25667948006719565, 0.20170075603550153, 0.21186489583965118, 0.18683433024049856, 0.2662024329157049, 0.2609869509062692, 0.2661339757875121, 0.009380808506302518, 0.03507858030134281, 0.026201901704874242, 0.019660460915723488, 0.02457469589087613, 0.03824605900469036, 0.07836608431440184, 0.012986585894007252, 0.048296135965892995, 0.1614870639818109, 0.16081248801021863, 0.1583817947372177, 0.1539707823813582, 0.18092399146891158, 0.16937334472964372, 0.15810712520068337, 0.14146342970551196, 0.17030765160989159, 0.49470176860456094, 0.482308367456471, 0.49143137249767577, 0.4860219170635117, 0.4956431822870815, 0.5158888399272459, 0.49293387567193836, 0.4817206796343476, 0.4836710727500092, 0.10646162749403798, 0.11910824449324775, 0.0885383897768155, 0.10581722032915108, 0.0919784421054134, 0.07651866132583984, 0.08341820477825856, 0.11713482333725056, 0.08927315056776808, 0.20103592278079352, 0.24459237167559222, 0.3152088415871849, 0.22953868502710406, 0.3060971181456347, 0.16549748879969883, 0.1884276472647881, 0.26007812659216145, 0.29621602480309694, 0.2867754394361034, 0.2846062165438975, 0.2887427987332746, 0.2717056925812523, 0.2763258193495115, 0.2568848061505796, 0.2927148501918544, 0.2863070417684309, 0.2876822551843935, 0.2168296250266062, 0.23894408144102464, 0.21130815156678528, 0.22372175514873305, 0.220988387865229, 0.20310761747067096, 0.21973857943576847, 0.20910321294364664, 0.21379430055442106, 0.20873236447929455, 0.20223650224086553, 0.18384728787513271, 0.20086683712059306, 0.20329630914098307, 0.18659080261192984, 0.20038529846976239, 0.200670653786874, 0.20669391978249085, 0.2019541779391164, 0.19788161063168497, 0.18607253312111038, 0.19865380340957461, 0.1949290917872779, 0.2026543577664648, 0.185557786993079, 0.1965554133742221, 0.1920064283818811, 0.6793280993352122, 0.681980176628485, 0.6431038408373693, 0.7224592661218052, 0.6093193162539037, 0.4155550907143063, 0.27218685587158, 0.6152485714552944, 0.3585825451768565, 0.1671113353088387, 0.20785424163834298, 0.20586273586283155, 0.20304921706930545, 0.48244741295400895, 0.18693173723401024, 0.6997520086526583, 0.20953489724915897, 0.20969159184360986, 0.19567132851358382, 0.1753953527114661, 0.18936195754276108, 0.19885014589822347, 0.16985895633815085, 0.18192102066630123, 0.18726152877019175, 0.19151680268616056, 0.18096085208399004, 0.07669367958865803, 0.09202912241007, 0.0706072782179279, 0.07295310824166568, 0.07124937604798509, 0.06757548024213178, 0.07181969991897985, 0.07333545755192172, 0.0778753025199278]}, "mutation_prompt": null}
{"id": "7d711d4a-0f27-4474-ba2a-568f283e453e", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.85  # Slightly increased differential weight for broader mutation\n        self.CR = 0.9  # Crossover probability\n    \n    def __call__(self, func):\n        rng = np.random.default_rng()\n        pop = rng.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        evals = len(fitness)\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[rng.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = rng.random(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[rng.integers(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f_trial = func(trial)\n                evals += 1\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n                # Local search: Randomly perturb the best solution found so far\n                if evals < self.budget and rng.random() < 0.15:  # Increased local search probability for better exploitation\n                    best_idx = np.argmin(fitness)\n                    perturbed = pop[best_idx] + rng.normal(0, 0.1, self.dim)\n                    perturbed = np.clip(perturbed, self.lower_bound, self.upper_bound)\n                    f_perturbed = func(perturbed)\n                    evals += 1\n                    if f_perturbed < fitness[best_idx]:\n                        pop[best_idx] = perturbed\n                        fitness[best_idx] = f_perturbed\n\n        return pop[np.argmin(fitness)]", "name": "HADE_LS", "description": "Enhanced HADE-LS by tuning mutation strategy and local search probability to optimize solution diversity and exploitation.", "configspace": "", "generation": 1, "fitness": 0.2603819037613152, "feedback": "", "error": "", "parent_id": "ee598e32-b481-4f7a-9995-29e7710845bf", "metadata": {"aucs": [0.564652963638362, 0.5571042180298663, 0.5706198159878827, 0.5921540544897492, 0.5874215960193966, 0.6051056897252505, 0.5845936793397696, 0.5700889339513125, 0.5630091610102276, 0.2662767519713247, 0.27562032429792793, 0.3053667608475634, 0.29486066930978017, 0.27644605259956323, 0.2858561855745497, 0.30308284082613357, 0.3070653365133945, 0.3278624200406518, 0.09657728430565127, 0.1025552699953245, 0.10703413551861107, 0.11566010335668198, 0.11078604424944494, 0.10722495124641551, 0.10471540913167643, 0.10152449918471318, 0.1267723663997351, 0.09622021922010826, 0.09491023216298577, 0.09889898709605371, 0.10237010171548644, 0.08768762048537448, 0.10154997594968318, 0.08159576695997073, 0.09401308400205632, 0.1004836157634732, 0.9322130845031634, 0.9322397318650754, 0.9877564465486409, 0.9266043211683994, 0.9165784700261068, 0.9440773512481541, 0.9595122367293328, 0.9370611059434315, 0.962643420924479, 0.2851279695996065, 0.2941098114067626, 0.3107892312585301, 0.2874154403133442, 0.30274627123568554, 0.29882073259810316, 0.2992981683196405, 0.3084139215209044, 0.30030017774488815, 0.4479550944804618, 0.3751035304271907, 0.49273780838057724, 0.44037444717490204, 0.8182787827839688, 0.5200701871184972, 0.45188778010581476, 0.5433755063485488, 0.4759970881566823, 0.20145222223076498, 0.2073514415719977, 0.2239813048994611, 0.19064378815327954, 0.14599848359808565, 0.17097410664222956, 0.2070841797285038, 0.18054389874710663, 0.21194103881874782, 0.26886424240448203, 0.12313767356720218, 0.1167242984228164, 0.17544612856821618, 0.17667772666759096, 0.17746479525578018, 0.18306565417249532, 0.16126118945326617, 0.1502786776472531, 0.06248006716017607, 0.10030042029312247, 0.07085577236522733, 0.07392036240430355, 0.11909255011277309, 0.06415159127462156, 0.07485025225037223, 0.07963565409940476, 0.09856960897354616, 0.1761164701534308, 0.21214969485100887, 0.20098540057474157, 0.17370431284247534, 0.198745793431377, 0.18121177469073801, 0.2578777348001666, 0.21312591713712747, 0.2307510440023316, 0.002665549137370493, 0.002238984719388104, 0.012533401753857643, 0.017867359765425528, 0.010038138736105262, 0.0067701113704617955, 0.016538049275953925, 0.020440875155498528, 0.009604518470534229, 0.11362802082760393, 0.17094759604262855, 0.11746524078467557, 0.15162347688236055, 0.13457927163758998, 0.12952440796387543, 0.12455259461368806, 0.13033310434427736, 0.13147089870077833, 0.4744410288499583, 0.4593840255270246, 0.46071688164104185, 0.47431291077037796, 0.46203571497480445, 0.46719168664197275, 0.4751906778554549, 0.4526533150821984, 0.472826101479368, 0.10652687308133102, 0.10049328086381593, 0.09689507783471085, 0.09633684453308855, 0.0894459926182215, 0.10267304567933133, 0.10298371994056377, 0.1284988024728838, 0.09933473886390343, 0.16726468879498757, 0.16259342966563983, 0.14623470021918894, 0.2764724526920984, 0.17634152443408113, 0.1678795374173364, 0.17947396277052963, 0.17999333403668172, 0.16787444149294128, 0.28621814887220565, 0.2703726281618658, 0.2807886367905402, 0.24919428683877298, 0.2636573961428673, 0.21714906653243737, 0.2797616280125176, 0.27322100300537044, 0.2511536520884342, 0.20319685782692276, 0.20715436684087107, 0.22727495553923727, 0.18595068996230013, 0.21274259500898207, 0.19004475169593782, 0.20385022999872504, 0.20482695880858637, 0.19764118388332774, 0.17679156162589293, 0.18629959838297672, 0.18157281990081875, 0.18908489929705863, 0.17861830533223821, 0.18383666835520707, 0.2002956074968808, 0.18763095053006407, 0.1986703655237777, 0.19252421309983314, 0.1867495101625385, 0.1904869950571646, 0.18394446713654722, 0.2243376346808984, 0.1819679330477224, 0.19686592974610684, 0.19429625964120312, 0.1878248306761796, 0.6242267165423352, 0.7387868874343149, 0.19687566905082043, 0.5417611083472803, 0.5504298955091601, 0.18490836334957883, 0.2038452453552866, 0.36872087129840225, 0.1876728558575974, 0.35198419131700776, 0.44662688743112156, 0.41573937323530596, 0.48073304237138414, 0.2443787537197315, 0.42599383917730094, 0.21063838616782804, 0.587605487920317, 0.21201566406907524, 0.16978774642882144, 0.1720944260447974, 0.18500403208789507, 0.1829184111999037, 0.19021887516769664, 0.1936102765630877, 0.17213841436984278, 0.1914765306729027, 0.19127001427186896, 0.08490397740938405, 0.07396564321761612, 0.07841710454884976, 0.06958204917067523, 0.06386914533895138, 0.06825898181744139, 0.07659836277072085, 0.07601788435702961, 0.07385761192085882]}, "mutation_prompt": null}
