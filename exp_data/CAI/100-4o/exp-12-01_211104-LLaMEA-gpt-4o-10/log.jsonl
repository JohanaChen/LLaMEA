{"id": "c5923a9f-fbcc-45e5-ab8e-b39f533231f4", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim, pop_size=10):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        # Initialize control parameters\n        F = 0.5  # Mutation factor\n        CR = 0.7  # Crossover probability\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant = x1 + F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = (np.random.rand(self.dim) < CR)\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Evaluate trial vector\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptation of F and CR\n                if evaluations % (self.pop_size * 5) == 0:  # Adaptation every few generations\n                    successful_trials = fitness < trial_fitness\n                    if np.any(successful_trials):\n                        F = np.clip(F + 0.1 * (np.mean(successful_trials) - 0.5), 0.1, 0.9)\n                        CR = np.clip(CR + 0.1 * (np.mean(successful_trials) - 0.5), 0.1, 0.9)\n\n        return best_solution, best_fitness", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution (ADE) algorithm that dynamically adjusts mutation and crossover rates based on historical performance to efficiently explore the search space.", "configspace": "", "generation": 0, "fitness": 0.41016333351143525, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.9447598357475633, 0.8674614431625522, 0.9278010161052372, 0.8988378993618078, 0.9413074091051508, 0.9430548710613784, 0.7188165944018192, 0.948727595925027, 0.9396549376691772, 0.8660842836139238, 0.891558968541966, 0.8851326676269378, 0.8780900800721136, 0.8795910231927604, 0.8611367242675662, 0.8054570611206032, 0.8470884407771125, 0.8768492668466822, 0.14500876731905066, 0.16301616019329468, 0.18101780626699915, 0.18467435357239326, 0.160480037109196, 0.1843957428175279, 0.1178362521592835, 0.09593186925931929, 0.11466550093702921, 0.11118443176610238, 0.18080885958389725, 0.11049046754888991, 0.11157169863260585, 0.15293275942551832, 0.09690690266203872, 0.7104726268255475, 0.14358463328497273, 0.18405610344896417, 0.9890523419525578, 0.9799603264381229, 0.9811565414076221, 0.9793100581638442, 0.9877796951593641, 0.9783505567017136, 0.9563203170954804, 0.9698409102554276, 0.9229654987323181, 0.7353469914170352, 0.784639662026373, 0.7294447885569142, 0.8383991843038816, 0.7593033561218238, 0.7453148660988247, 0.8026503425182581, 0.791108704633033, 0.7414761666708096, 0.3575351112599867, 0.9141639816373606, 0.22831830937422104, 0.39016036934514065, 0.3885028441478122, 0.21110981623620295, 0.24259829473991412, 0.9039156727508151, 0.39564536864314936, 0.8373102423146678, 0.7619590393860007, 0.5871299350583736, 0.13528769603667168, 0.10974373845859775, 0.7085406559729865, 0.7939856847581352, 0.6723461278669605, 0.6883942920993605, 0.022234317761445133, 0.010102479959185118, 0.7008185611423787, 0.46944106658198115, 0.8129535802991501, 0.8484308539298536, 0.714757054729668, 0.6958178339626134, 0.6310993894778001, 0.20801573139724705, 0.11273439761293447, 0.043832090193772766, 0.5037520771710444, 0.1742628936431989, 0.04544359672599163, 0.07394959250931366, 0.23635644720142046, 0.37136687288315695, 0.205325492236199, 0.12182689548299364, 0.13139226474721677, 0.07072293068780944, 0.09423124789284398, 0.09362341805241015, 0.17296730727726894, 0.2077872258175979, 0.18315500342582858, 0.10233059141168377, 0.11791449385990471, 0.09911934282096957, 0.21366391276219687, 0.1755355505866799, 0.16649028880386485, 0.11559821825247418, 0.4886561846866857, 0.1141001827031971, 0.3350354468230282, 0.3760647321048307, 0.3693739417124352, 0.6321761269178359, 0.3796299554528041, 0.532098385570989, 0.42493438036428266, 0.3601748136346735, 0.08191406109229571, 0.7682209537030833, 0.7166575941236927, 0.6452429428297934, 0.6339804228233934, 0.7371127289164761, 0.7518624216695918, 0.7464210468483095, 0.6336289802176096, 0.7370851203089965, 0.11781379436734873, 0.15850458772956222, 0.12157753365709612, 0.08725248374713479, 0.12606134075862552, 0.16027249991572212, 0.1353470293702902, 0.15029187834293511, 0.13013490140969042, 0.1208014983328698, 0.22973700226657257, 0.27274025277594804, 0.1139385511511698, 0.12194993742848614, 0.19153289430448706, 0.2864621826039, 0.22995652280079615, 0.1585917449048958, 0.42535546180734785, 0.4293377851857314, 0.44602075429410093, 0.35092463767307314, 0.5818221508683851, 0.3146357798425251, 0.49967546703922405, 0.30471206359517633, 0.404153590894919, 0.37242898912673095, 0.28816498543579316, 0.3409300950493056, 0.4085767747525384, 0.2775086976436022, 0.38792591064325166, 0.2882644709918687, 0.2612126300420118, 0.2914166014827101, 0.1814330140586078, 0.20230379747299698, 0.16649318930141876, 0.17989257950853266, 0.16494696479363358, 0.206847655719132, 0.1659800839823754, 0.21885642076541112, 0.21897062579733484, 0.25370709045012185, 0.19740009487664978, 0.2405374945082691, 0.2499438485576453, 0.8368252258816791, 0.7686709993958396, 0.199606756635476, 0.21238312497674727, 0.2335895848050462, 0.1975684077077977, 0.18403983429391824, 0.9229962855833965, 0.9465165587863406, 0.20085399109164925, 0.21255716653282086, 0.9477679746685704, 0.17265838197585603, 0.1626275627116096, 0.8951446929480718, 0.16900313263156297, 0.8930178154097654, 0.8085415384722414, 0.1683377148359123, 0.21115500920238095, 0.11300391226835071, 0.2128338612901911, 0.9034065627159719, 0.18205630031538322, 0.16695993855482738, 0.18728141404760756, 0.19116572436402834, 0.17050154350738544, 0.1743802944024888, 0.16973730165687462, 0.17236305094698656, 0.1896389079766777, 0.07299528393616239, 0.09783379290425187, 0.06783222915594356, 0.0795919675644785, 0.06586364882415396, 0.0803852534959737, 0.07568745132725452, 0.09472239979591301, 0.06889507528859418]}, "mutation_prompt": null}
{"id": "498f2fe8-da78-40aa-b0ef-798cc1ee1884", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim, pop_size=10):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        # Initialize control parameters\n        F = 0.5  # Mutation factor\n        CR = 0.7  # Crossover probability\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant = x1 + F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = (np.random.rand(self.dim) < CR)\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Evaluate trial vector\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptation of F and CR\n                if evaluations % (self.pop_size * 5) == 0:  # Adaptation every few generations\n                    successful_trials = fitness < trial_fitness\n                    if np.any(successful_trials):\n                        F = np.clip(F + 0.1 * (np.mean(successful_trials) - 0.5), 0.1, 0.9)\n                        CR = np.clip(CR + 0.1 * (np.mean(successful_trials) - 0.5), 0.1, 0.9)\n\n        return best_solution, best_fitness", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution (ADE) algorithm that dynamically adjusts mutation and crossover rates based on historical performance to efficiently explore the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c5923a9f-fbcc-45e5-ab8e-b39f533231f4", "metadata": {"aucs": [0.9447598357475633, 0.8674614431625522, 0.9278010161052372, 0.8988378993618078, 0.9413074091051508, 0.9430548710613784, 0.7188165944018192, 0.948727595925027, 0.9396549376691772, 0.8660842836139238, 0.891558968541966, 0.8851326676269378, 0.8780900800721136, 0.8795910231927604, 0.8611367242675662, 0.8054570611206032, 0.8470884407771125, 0.8768492668466822, 0.14500876731905066, 0.16301616019329468, 0.18101780626699915, 0.18467435357239326, 0.160480037109196, 0.1843957428175279, 0.1178362521592835, 0.09593186925931929, 0.11466550093702921, 0.11118443176610238, 0.18080885958389725, 0.11049046754888991, 0.11157169863260585, 0.15293275942551832, 0.09690690266203872, 0.7104726268255475, 0.14358463328497273, 0.18405610344896417, 0.9890523419525578, 0.9799603264381229, 0.9811565414076221, 0.9793100581638442, 0.9877796951593641, 0.9783505567017136, 0.9563203170954804, 0.9698409102554276, 0.9229654987323181, 0.7353469914170352, 0.784639662026373, 0.7294447885569142, 0.8383991843038816, 0.7593033561218238, 0.7453148660988247, 0.8026503425182581, 0.791108704633033, 0.7414761666708096, 0.3575351112599867, 0.9141639816373606, 0.22831830937422104, 0.39016036934514065, 0.3885028441478122, 0.21110981623620295, 0.24259829473991412, 0.9039156727508151, 0.39564536864314936, 0.8373102423146678, 0.7619590393860007, 0.5871299350583736, 0.13528769603667168, 0.10974373845859775, 0.7085406559729865, 0.7939856847581352, 0.6723461278669605, 0.6883942920993605, 0.022234317761445133, 0.010102479959185118, 0.7008185611423787, 0.46944106658198115, 0.8129535802991501, 0.8484308539298536, 0.714757054729668, 0.6958178339626134, 0.6310993894778001, 0.20801573139724705, 0.11273439761293447, 0.043832090193772766, 0.5037520771710444, 0.1742628936431989, 0.04544359672599163, 0.07394959250931366, 0.23635644720142046, 0.37136687288315695, 0.205325492236199, 0.12182689548299364, 0.13139226474721677, 0.07072293068780944, 0.09423124789284398, 0.09362341805241015, 0.17296730727726894, 0.2077872258175979, 0.18315500342582858, 0.10233059141168377, 0.11791449385990471, 0.09911934282096957, 0.21366391276219687, 0.1755355505866799, 0.16649028880386485, 0.11559821825247418, 0.4886561846866857, 0.1141001827031971, 0.3350354468230282, 0.3760647321048307, 0.3693739417124352, 0.6321761269178359, 0.3796299554528041, 0.532098385570989, 0.42493438036428266, 0.3601748136346735, 0.08191406109229571, 0.7682209537030833, 0.7166575941236927, 0.6452429428297934, 0.6339804228233934, 0.7371127289164761, 0.7518624216695918, 0.7464210468483095, 0.6336289802176096, 0.7370851203089965, 0.11781379436734873, 0.15850458772956222, 0.12157753365709612, 0.08725248374713479, 0.12606134075862552, 0.16027249991572212, 0.1353470293702902, 0.15029187834293511, 0.13013490140969042, 0.1208014983328698, 0.22973700226657257, 0.27274025277594804, 0.1139385511511698, 0.12194993742848614, 0.19153289430448706, 0.2864621826039, 0.22995652280079615, 0.1585917449048958, 0.42535546180734785, 0.4293377851857314, 0.44602075429410093, 0.35092463767307314, 0.5818221508683851, 0.3146357798425251, 0.49967546703922405, 0.30471206359517633, 0.404153590894919, 0.37242898912673095, 0.28816498543579316, 0.3409300950493056, 0.4085767747525384, 0.2775086976436022, 0.38792591064325166, 0.2882644709918687, 0.2612126300420118, 0.2914166014827101, 0.1814330140586078, 0.20230379747299698, 0.16649318930141876, 0.17989257950853266, 0.16494696479363358, 0.206847655719132, 0.1659800839823754, 0.21885642076541112, 0.21897062579733484, 0.25370709045012185, 0.19740009487664978, 0.2405374945082691, 0.2499438485576453, 0.8368252258816791, 0.7686709993958396, 0.199606756635476, 0.21238312497674727, 0.2335895848050462, 0.1975684077077977, 0.18403983429391824, 0.9229962855833965, 0.9465165587863406, 0.20085399109164925, 0.21255716653282086, 0.9477679746685704, 0.17265838197585603, 0.1626275627116096, 0.8951446929480718, 0.16900313263156297, 0.8930178154097654, 0.8085415384722414, 0.1683377148359123, 0.21115500920238095, 0.11300391226835071, 0.2128338612901911, 0.9034065627159719, 0.18205630031538322, 0.16695993855482738, 0.18728141404760756, 0.19116572436402834, 0.17050154350738544, 0.1743802944024888, 0.16973730165687462, 0.17236305094698656, 0.1896389079766777, 0.07299528393616239, 0.09783379290425187, 0.06783222915594356, 0.0795919675644785, 0.06586364882415396, 0.0803852534959737, 0.07568745132725452, 0.09472239979591301, 0.06889507528859418]}, "mutation_prompt": null}
