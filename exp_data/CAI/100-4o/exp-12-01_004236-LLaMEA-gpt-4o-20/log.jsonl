{"id": "9d95e97a-f2ef-4cc1-85f9-553881418321", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v) ** (1 / beta)\n        return 0.01 * step\n\n    def __call__(self, func):\n        eval_count = 0\n        # Evaluate initial population\n        for i in range(self.pop_size):\n            self.fitness[i] = func(self.population[i])\n            eval_count += 1\n            if eval_count >= self.budget:\n                return self.population[np.argmin(self.fitness)]\n\n        while eval_count < self.budget:\n            for i in range(self.pop_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover = np.random.rand(self.dim) < self.CR\n                if not np.any(crossover):\n                    crossover[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover, mutant, self.population[i])\n\n                # Adaptive Lévy Flight\n                if np.random.rand() < 0.1:\n                    trial += self.levy_flight()\n\n                # Evaluation\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                # Selection\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]", "name": "HybridDELevy", "description": "A hybrid Differential Evolution with Adaptive Lévy Flight mechanism to explore and exploit the search space effectively.", "configspace": "", "generation": 0, "fitness": 0.45820282495789866, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8520266583413266, 0.8513333724854337, 0.8614666472073583, 0.863008137839245, 0.8570289543215227, 0.8579527145466828, 0.8560590985794817, 0.8361177933035668, 0.8600018702910213, 0.7591115016657879, 0.7803035059386026, 0.7409531547789834, 0.7397451328258917, 0.7492738781202084, 0.7332202204981901, 0.7381233265493887, 0.7590058205131701, 0.7470839822175565, 0.12457872492368638, 0.13413826596801004, 0.11132306187938901, 0.16136631342575714, 0.255291601849033, 0.24958845068834112, 0.25215550543348575, 0.12815150704987444, 0.14484349979992361, 0.14127019380951045, 0.13984332896204088, 0.13804175068931457, 0.13812063996232304, 0.24559161506597882, 0.2141720960416571, 0.1338495114341175, 0.29763419160008875, 0.3530917771747578, 0.9675443651269544, 0.9394281645950219, 0.9932874268718653, 0.8941349615981266, 0.9684592790940223, 0.9502238895610353, 0.9705985101292022, 0.9438250259224257, 0.9874009500076607, 0.6425891234830627, 0.6685613363905998, 0.6620767609387348, 0.5984605430983367, 0.6363681717578844, 0.6384624792234939, 0.6253009620955333, 0.6428449206116794, 0.6035703007378199, 0.8276066229471447, 0.8016579578793279, 0.7939069488740721, 0.8233054138682133, 0.8624508738034492, 0.8452758614970193, 0.836967290065593, 0.8040430379066099, 0.8196000546519542, 0.6179864265479544, 0.5951506926184673, 0.5559316766129775, 0.5822539059313229, 0.5646213786179097, 0.5850430567425638, 0.4963442349047881, 0.6189535273383344, 0.5548367342654292, 0.5847275379589636, 0.5770067993742463, 0.5840969194469883, 0.5952151246107847, 0.6235022670685837, 0.554010171735914, 0.5877426511185709, 0.5988464412246839, 0.5959474992555785, 0.5463024541468449, 0.5324510086444987, 0.42672402873965865, 0.5564277022553799, 0.5484629201887491, 0.5692103407949423, 0.5552908621555124, 0.6023716936277541, 0.5401309012205104, 0.6534060983797421, 0.6498243441971092, 0.5944707549830341, 0.6636574567452698, 0.6982448643132644, 0.7033821192410108, 0.6899261220346111, 0.6323928901418476, 0.6741208026865964, 0.21609026718229885, 0.26937741024406114, 0.1822868327743178, 0.25313742697207386, 0.41308426234984574, 0.41061460021339546, 0.311178651529461, 0.19194912886775806, 0.22911382346206421, 0.36693242269055126, 0.3883894139441413, 0.4035660520252975, 0.43991028070465477, 0.4753546172182346, 0.42794512418704556, 0.4793197981505807, 0.4227476151476198, 0.408627254876614, 0.7847990019963159, 0.7932546220670865, 0.7616651674679042, 0.7713739989065523, 0.8028860443562994, 0.7929896806321461, 0.778671729497342, 0.7595002393246335, 0.8149106376044326, 0.11674963034340868, 0.1536605176939021, 0.12526122242004034, 0.10635336350219127, 0.13506511552256872, 0.10123347815830908, 0.08222535158939859, 0.10631134520816266, 0.101781718806083, 0.19881821596848603, 0.14288828510107654, 0.20916242360205428, 0.13367243500397874, 0.2803591884454496, 0.22685480998195895, 0.20870807145944537, 0.24892251921011688, 0.1826103728823879, 0.4154668853236938, 0.4676659904801084, 0.4554349640622941, 0.45139247867476207, 0.40532227183136627, 0.41653414056991234, 0.4448678914408025, 0.4820177813600609, 0.4769527544520573, 0.3386118428178424, 0.3507906803062676, 0.30833306518090375, 0.34150614380833233, 0.37077040217461554, 0.3226963848399186, 0.341545671513234, 0.32213152510816023, 0.3264822369818917, 0.18989939964841263, 0.18312723220608962, 0.2207711246642481, 0.19599380469462768, 0.19517879676832461, 0.24568715984655276, 0.20026670379505884, 0.20435197588287057, 0.19304641358512142, 0.5302202722949879, 0.556985757690976, 0.28139315088841477, 0.42812308572191493, 0.5603644406986112, 0.20969080901352932, 0.5985607946981542, 0.487781088455184, 0.6983185501255442, 0.16988220627949702, 0.18658890272280615, 0.1536147225680181, 0.16486775933346254, 0.8586380639437698, 0.8765405660555134, 0.17825055091849884, 0.16435559445949188, 0.19208161456406792, 0.152385403012528, 0.20564703887077906, 0.16692196898401468, 0.7961441252838241, 0.7952754410299043, 0.20716894857956092, 0.21225467945606336, 0.21134070067510302, 0.12718880836887325, 0.2271631337037936, 0.22559572555728769, 0.22865265246016986, 0.19646377787534264, 0.18560787811193602, 0.1929370317109761, 0.2100604322251034, 0.45211813822950253, 0.21339931401511214, 0.06420829844186793, 0.08239537054998514, 0.07533391172775283, 0.07354764985349427, 0.0819429296523011, 0.07312679136449773, 0.08897199198740013, 0.09363732656428803, 0.09706945248499521]}, "mutation_prompt": null}
{"id": "9c8ad933-92f4-491c-b2ec-729f8cb97814", "solution": "import numpy as np\n\nclass HybridDELevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v) ** (1 / beta)\n        return 0.01 * step\n\n    def adaptive_mutation_rate(self, iteration):\n        return max(0.5, 1.0 - iteration / self.budget)\n\n    def __call__(self, func):\n        eval_count = 0\n        iteration = 0\n        # Evaluate initial population\n        for i in range(self.pop_size):\n            self.fitness[i] = func(self.population[i])\n            eval_count += 1\n            if eval_count >= self.budget:\n                return self.population[np.argmin(self.fitness)]\n\n        while eval_count < self.budget:\n            for i in range(self.pop_size):\n                # Mutation (Differential Evolution)\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                F_adaptive = self.adaptive_mutation_rate(iteration)\n                mutant = self.population[a] + F_adaptive * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Crossover\n                crossover = np.random.rand(self.dim) < self.CR\n                if not np.any(crossover):\n                    crossover[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover, mutant, self.population[i])\n\n                # Adaptive Lévy Flight\n                if np.random.rand() < 0.1:\n                    trial += self.levy_flight()\n\n                # Evaluation\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                # Selection\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n            iteration += 1\n\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]", "name": "HybridDELevy", "description": "Enhanced Hybrid Differential Evolution with Lévy Flight incorporating Adaptive Mutation Rate Strategy for improved exploration and convergence.", "configspace": "", "generation": 1, "fitness": 0.36734153354407056, "feedback": "", "error": "", "parent_id": "9d95e97a-f2ef-4cc1-85f9-553881418321", "metadata": {"aucs": [0.7254580421902879, 0.7474234430693536, 0.7720631519591759, 0.7684603587183052, 0.7840511312833821, 0.7645861566179131, 0.7306676175037345, 0.7863128493870383, 0.7696082806846293, 0.6036329773419578, 0.5636451112431784, 0.6277422024236272, 0.619930274377829, 0.6241190975743058, 0.582247367529366, 0.5714974233623149, 0.5935875241590897, 0.6126070217996067, 0.42439064514605385, 0.40182462304454225, 0.1720630447329311, 0.41878081727200656, 0.12542852196072507, 0.45673195659067534, 0.5056969418469206, 0.12856053001560142, 0.4558297545915545, 0.15457717917512293, 0.15149854101995264, 0.33289744040779945, 0.2505983891978425, 0.1603867047482923, 0.151516381510176, 0.14709979163109077, 0.14615380226906383, 0.1583237856316424, 0.9836160854460997, 0.9760131581723296, 0.9940460807854417, 0.9888824289921238, 0.9928696785305858, 0.9883539208649141, 0.9958417331543246, 0.9857423183749198, 0.9772433690857321, 0.4055865144182953, 0.44533753858117797, 0.3824208981780439, 0.45418957320787945, 0.4601789147227644, 0.48798515071486415, 0.39411348768779375, 0.4448506989725074, 0.37642257589009165, 0.3217875701158731, 0.6880025111810792, 0.6499119173415024, 0.704105953309918, 0.7687308085758139, 0.3309889970527954, 0.7184271912672493, 0.7051582846438429, 0.7166814044591783, 0.11836948031868666, 0.3815349842962824, 0.3188074219199526, 0.3665412431142975, 0.2978916844431154, 0.4581544872763118, 0.4038804120014142, 0.3489486550407408, 0.34273705115714137, 0.3365975730748948, 0.3743936880440428, 0.5355240893637725, 0.39390953824608144, 0.4133815350722396, 0.40322928682384007, 0.38657233715706174, 0.3494709079764283, 0.3831802454159461, 0.2917977616428513, 0.44819279128243916, 0.2698186635897676, 0.2699693203923421, 0.326083348600848, 0.30008252956320014, 0.38250453360564673, 0.32779285454150575, 0.2681568616167489, 0.33840384348709174, 0.31778377700251226, 0.4072948404817218, 0.44547393222648357, 0.41337755081440275, 0.43185677025590774, 0.5039314027689312, 0.4544976776049734, 0.43871216087195875, 0.0845477625135771, 0.09106824951224846, 0.08203060310523635, 0.13451374029586294, 0.14437490263443686, 0.0877079532481514, 0.11081757605782439, 0.12127151430590166, 0.16714257032119717, 0.2507032935459893, 0.26316509906670094, 0.23956695709606712, 0.2908260653040333, 0.26517571314060395, 0.290251415601263, 0.23080396566914807, 0.2568851543487488, 0.27294786411356975, 0.6381822874397373, 0.6562780973566575, 0.6764501166127345, 0.6502211765555461, 0.662511811885759, 0.5723181019575105, 0.6717853320806096, 0.6261443079546206, 0.6611328371390095, 0.10430270576715628, 0.12009774960437558, 0.1455803296617192, 0.12606174085469612, 0.1264796126692308, 0.12177008604215078, 0.11680813151839031, 0.11749657515112177, 0.12474812409354274, 0.5755802000432655, 0.26711508705639897, 0.1587466444142116, 0.4110032637650508, 0.4848767167266873, 0.18315968686882622, 0.5086612247929505, 0.26639173155996376, 0.22256579538819643, 0.29980951597879313, 0.31887061098458613, 0.31718953940031436, 0.3345483512177403, 0.3548912836642707, 0.3706883120096933, 0.372842787003109, 0.3697032202942424, 0.37403732413531987, 0.2674224804467996, 0.3069879847389795, 0.21640014132032126, 0.25029586808837034, 0.22607094021603624, 0.2537287326969213, 0.25228198120462586, 0.2853148011056452, 0.2743850142931489, 0.186037700526834, 0.214984311567743, 0.19494916706977694, 0.2048081803175087, 0.19256484754629888, 0.19158533519195708, 0.24138510986295925, 0.18571180195604264, 0.1818909444709622, 0.2112057905103787, 0.18560922555766846, 0.18985829537334564, 0.4318218876591896, 0.18567460697893423, 0.19691383478632873, 0.17724940341774786, 0.18944696648894643, 0.4396279948932229, 0.1958603021479659, 0.1521223589606443, 0.17128505411442296, 0.174238410340259, 0.19245504488229592, 0.8127503518631245, 0.18500081984071703, 0.18328072327225464, 0.20442083362747, 0.16594227001924333, 0.1669135501123714, 0.7696837123819869, 0.20239537766221893, 0.164096051308246, 0.15000513315657138, 0.21098047178633927, 0.209529705046391, 0.7960690133925321, 0.25030971368252963, 0.19314578479846345, 0.20874520392573181, 0.21127441855187157, 0.19449378140941675, 0.2157334026608677, 0.22036730504998692, 0.2522658517131222, 0.2992334274906827, 0.0816083415061466, 0.09408859701104555, 0.08175343210963404, 0.08587587961121412, 0.09524288830779226, 0.08519824308714108, 0.08379053720425067, 0.0860798232212463, 0.09612837561178966]}, "mutation_prompt": null}
