{"id": "c390df7f-b2a9-4b29-afda-7c0afdd10755", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.temperature = 1.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n\n    def __call__(self, func):\n        eval_count = 0\n        fitness = np.array([func(ind) for ind in self.population])\n        eval_count += self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                # Differential Evolution Mutation\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant = self.population[a] + self.mutation_factor * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n                \n                # Evaluate trial vector\n                trial_fitness = func(trial)\n                eval_count += 1\n                \n                # Selection and Simulated Annealing Acceptance\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / self.temperature):\n                    self.population[i] = trial\n                    fitness[i] = trial_fitness\n            \n            # Cooling schedule for Simulated Annealing\n            self.temperature *= 0.99\n        \n        best_index = np.argmin(fitness)\n        return self.population[best_index], fitness[best_index]", "name": "HybridDESA", "description": "Utilize a hybrid of Differential Evolution and Simulated Annealing to explore and exploit the search space efficiently.", "configspace": "", "generation": 0, "fitness": 0.2235023795142888, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.3454357981649778, 0.33104174896108984, 0.32909549873361543, 0.3233549338970433, 0.33655578350086457, 0.36154728926151114, 0.31462518723969435, 0.31916629015303055, 0.3581700958100752, 0.2764027993751601, 0.26200278120367015, 0.237208898150279, 0.25660208462529166, 0.25941876980831435, 0.24589981428849073, 0.2411819166502659, 0.2651495516051412, 0.25493633831601614, 0.0941092903237617, 0.10243568839716899, 0.08812139263001206, 0.1053146564192059, 0.09299220305424605, 0.09685517134891997, 0.09314768874370893, 0.08758784276237053, 0.09336502893068888, 0.08710139906321435, 0.08567535829497797, 0.10080197996848705, 0.09310043084561437, 0.08521772753317913, 0.08522925400412384, 0.08645401338239445, 0.09938435638702303, 0.08376897788697657, 0.9461314389977702, 0.9736131277702325, 0.9257645822376794, 0.9580727652028923, 0.9091074557020318, 0.9569242413162585, 0.9706320166675639, 0.955745796593485, 0.9400238444327873, 0.22971645753127912, 0.2224302919254606, 0.2426048570549909, 0.24306704567173032, 0.22038065786830163, 0.23615475262281138, 0.23197600511977, 0.25443539254869285, 0.25599570695538454, 0.2813667791365232, 0.2956611147074363, 0.31100017120812007, 0.2890870058609809, 0.308889640077355, 0.29270750703234605, 0.30977652957309987, 0.29233546730370796, 0.278872823341329, 0.20535694734732657, 0.16408841306793898, 0.17010038101917357, 0.1900764470820956, 0.20218108670588386, 0.1753748874862171, 0.19652322472054462, 0.201193537483069, 0.17754583811860825, 0.21587337088501457, 0.21436075688856804, 0.18504742687040265, 0.19478583942413574, 0.19112289580078068, 0.20220257715402545, 0.18602605664671046, 0.18316520932820757, 0.17894440622475483, 0.1381460824404448, 0.1342424473093884, 0.13882910815918548, 0.11400951841484852, 0.13059257474482788, 0.12903853406416055, 0.1273238816311012, 0.08925789686318164, 0.1109586356620963, 0.24166968408528933, 0.2493755403269271, 0.23340737855341853, 0.23471521550539687, 0.23616202906143546, 0.20865359546370388, 0.2507425159070461, 0.25201766487408583, 0.22862483871131667, 0.028971051803227788, 0.023078461897776514, 0.01778266307917098, 0.05670434455206885, 0.029314793840264253, 0.019887809180399896, 0.047507946258171785, 0.03525539693925761, 0.03898887713864274, 0.16765110379001524, 0.15059790799779627, 0.15644510003627454, 0.15569306376586134, 0.1513334412517503, 0.16555292499922636, 0.13899944380361118, 0.15674984644120815, 0.18258671784204494, 0.3065852492355571, 0.31377937899457586, 0.31023807368544287, 0.3074655909148293, 0.3035218540613194, 0.3086179031341718, 0.32697455556658084, 0.2986595608424555, 0.2937568445547982, 0.0877521489249915, 0.0951098000106011, 0.08670052223713265, 0.08912980168836349, 0.08659682990936435, 0.08939818671154076, 0.07725254431623929, 0.0890282425420903, 0.09041254800117371, 0.1434944008720489, 0.24390092208712466, 0.17724366270246772, 0.1530411899404438, 0.1652902880647289, 0.1511278587831213, 0.15595978469345662, 0.1430210147202794, 0.16224998288948578, 0.24063996830635725, 0.2281572513262906, 0.2417314103303887, 0.23922739974077345, 0.23358482292549643, 0.2331969320489824, 0.24339104149113522, 0.24578419105511407, 0.2411495968446843, 0.20663994826845478, 0.1898205354411613, 0.20133238171902468, 0.2056204624182859, 0.20260627216495797, 0.19646529486418862, 0.21698172989350795, 0.2055372652889853, 0.20296710712518917, 0.19792813861986935, 0.18869564660382088, 0.1686510105011082, 0.17186909051047927, 0.16691731937988374, 0.2002335850471454, 0.17587971896898702, 0.18040661674324765, 0.1828269787993666, 0.17083247686017078, 0.1764691934926399, 0.17359068669368571, 0.17898086318439366, 0.18567368733448375, 0.1752879985991601, 0.17491632686417202, 0.17440044554658785, 0.1734799115618123, 0.3342640867853861, 0.33434521815218965, 0.3388317605310953, 0.39451781060277036, 0.3208090240324355, 0.4118454360400058, 0.36232981508020135, 0.17457305565618586, 0.23681766459084674, 0.1878287405588822, 0.16205225144042745, 0.3155297416513344, 0.19149278087448074, 0.18644150926246972, 0.39771926216123976, 0.1994904504192918, 0.20317572874430812, 0.20530201185543606, 0.18349336797632132, 0.1968626251482658, 0.18501231694138898, 0.18823056692443874, 0.17427629474446438, 0.18462463706375398, 0.20264336334591615, 0.1989217236493196, 0.1962548474446023, 0.06820902901309578, 0.0737627007756344, 0.07284717697281684, 0.06914761418170878, 0.0702842246069707, 0.06749121851730056, 0.07820285127485582, 0.06840594686369061, 0.0765262217257654]}, "mutation_prompt": null}
{"id": "03304c2c-fe3b-47f3-ab81-5ec45887eb99", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.temperature = 1.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n\n    def __call__(self, func):\n        eval_count = 0\n        fitness = np.array([func(ind) for ind in self.population])\n        eval_count += self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                # Differential Evolution Mutation\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant = self.population[a] + self.mutation_factor * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Adjust crossover probability based on progress\n                progress_ratio = eval_count / self.budget\n                crossover_probability = self.crossover_probability * (1 - progress_ratio)\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n                \n                # Evaluate trial vector\n                trial_fitness = func(trial)\n                eval_count += 1\n                \n                # Selection and Simulated Annealing Acceptance\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / self.temperature):\n                    self.population[i] = trial\n                    fitness[i] = trial_fitness\n            \n            # Cooling schedule for Simulated Annealing\n            self.temperature *= 0.99\n        \n        best_index = np.argmin(fitness)\n        return self.population[best_index], fitness[best_index]", "name": "HybridDESA", "description": "Enhance exploration by adjusting crossover probability dynamically based on iteration progress.", "configspace": "", "generation": 1, "fitness": 0.2019554727568823, "feedback": "", "error": "", "parent_id": "c390df7f-b2a9-4b29-afda-7c0afdd10755", "metadata": {"aucs": [0.33699713868406944, 0.3362345253214549, 0.3375818277298913, 0.35732470754868095, 0.3433886392694103, 0.38349605073604165, 0.38340549394588486, 0.35034711335997537, 0.3422417413323784, 0.2602031800007407, 0.25909784491479115, 0.26519426466335894, 0.27894935287386047, 0.2624927647012455, 0.28503914619089477, 0.2611213082207703, 0.26473534864475157, 0.26968246833572185, 0.17219796687398792, 0.18478448139598402, 0.17436535002897113, 0.18432964135638885, 0.18418760244911214, 0.17182181157608412, 0.18957900821473705, 0.16552797240240014, 0.1770037162640774, 0.1855195914218455, 0.15519427918913675, 0.16062263196675963, 0.16685362668059645, 0.15916983169064802, 0.15448444033726083, 0.18216509353506805, 0.14733373915463055, 0.1590517606560934, 0.942509098489319, 0.9744303980330389, 0.9439911486714491, 0.9557119934551996, 0.9372428559864763, 0.9734578777380019, 0.9560928763973606, 0.951108212207688, 0.9756751200689601, 0.21644100510873698, 0.21299016604455923, 0.20911699319032084, 0.2189188784451277, 0.22174660930248768, 0.23273846841048762, 0.22181500888965, 0.22727330559469205, 0.223044020963724, 0.24488047105180233, 0.21840479327996098, 0.23761157471519412, 0.2810591360535364, 0.24324319684814655, 0.2393687316490687, 0.26431762847535467, 0.2392215696569051, 0.260953677493158, 0.12308775106257286, 0.15692126828216735, 0.13028636831440088, 0.12986178116206648, 0.1468098027734066, 0.12923157904554683, 0.1380032039293685, 0.14528717417934844, 0.14175490280867542, 0.09742894111221778, 0.11886903489331857, 0.09816873659193392, 0.13507965465745841, 0.12981312485395935, 0.1382499887934313, 0.1297000467136974, 0.1450129969311743, 0.1299237901369339, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007796346530514198, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1290251731239399, 0.051656272656361635, 0.10180153097192446, 0.07503448929330403, 0.04544831062394605, 0.09899280815257316, 0.10597413523466725, 0.07540787968394547, 0.09071327039421417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00032531514231415315, 9.999999999998899e-05, 0.0004338728604700304, 0.09910547896021438, 0.09703196715376272, 0.08927894277469017, 0.09471969016064397, 0.11739686135418725, 0.09510631511711565, 0.07934567349409716, 0.06917862237549721, 0.10346496854919873, 0.3231758264747938, 0.34915971065387497, 0.31271757704350844, 0.31548699039461825, 0.30641980082497056, 0.3064916879651147, 0.32437601975805797, 0.3199905588305202, 0.30892800779653884, 0.09283714797546838, 0.09414250153795456, 0.09068737244077352, 0.08637153961430832, 0.08991260540481705, 0.08420557316000754, 0.087087625937315, 0.07901786576618852, 0.10002089709528905, 0.14869346484554824, 0.14785959167688856, 0.15027470636383056, 0.12819546665371095, 0.14081360309919488, 0.14238618922672208, 0.1443172271395673, 0.14469910145841425, 0.14403894687569896, 0.24034568571890857, 0.23529589346797453, 0.24045576674732816, 0.22611703270374306, 0.21333499963336078, 0.23171197867903515, 0.25727170994847615, 0.248635090675142, 0.26122010320383704, 0.17930096312475363, 0.16367354986674032, 0.18893093451773735, 0.16485788944806845, 0.16443062786261164, 0.16370612128640005, 0.19929064785609985, 0.20979800847783658, 0.18688376095390447, 0.20093594101863654, 0.20246307124648333, 0.1816239944724326, 0.17407978184140316, 0.18025633777771055, 0.1764451201652999, 0.1822553354755787, 0.18391987615315553, 0.1914205538262339, 0.19441021688431726, 0.18897324981303676, 0.189032933225032, 0.2036050966463675, 0.18394200729303, 0.18701450860142954, 0.19516054978594066, 0.1888005901503117, 0.18674844060463558, 0.33334869335972983, 0.2348211388745587, 0.1816211412047546, 0.1739941081634624, 0.15925700909403584, 0.2640877876723451, 0.18110607725403538, 0.17960574783368888, 0.19716159902576713, 0.1721930794854667, 0.18110519695710559, 0.2086859778727046, 0.1871419423861853, 0.17135562197118248, 0.2224048551207688, 0.20434568269270137, 0.24673743320223152, 0.2011624606765845, 0.19160804548394594, 0.17273675060232185, 0.17316650122150312, 0.19050377864320145, 0.1910785867289605, 0.1818684993348576, 0.1951548836511774, 0.18201216105838136, 0.18333827441426542, 0.07574194942668777, 0.07847187088295271, 0.07773316176459943, 0.07424161457234857, 0.07804076052175701, 0.06963456277860292, 0.07367856267505812, 0.07034603104672676, 0.07393295580532577]}, "mutation_prompt": null}
