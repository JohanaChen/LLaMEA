{"id": "2a91206e-af3a-451c-acb4-8dfbd573e58b", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.F = 0.8  # differential weight\n        self.CR = 0.9  # crossover probability\n\n    def __call__(self, func):\n        # Initialize the swarm\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(pos) for pos in positions])\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # Particle Swarm Optimization step\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) + self.c2 * r2 * (global_best_position - positions)\n            positions = positions + velocities\n            positions = np.clip(positions, self.lower_bound, self.upper_bound)\n            \n            # Evaluate new positions\n            scores = np.array([func(pos) for pos in positions])\n            evaluations += self.population_size\n            \n            # Update personal bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                    \n            # Update global best\n            current_global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[current_global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[current_global_best_index]\n                global_best_position = personal_best_positions[current_global_best_index]\n            \n            # Differential Evolution step\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = personal_best_positions[a] + self.F * (personal_best_positions[b] - personal_best_positions[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(personal_best_positions[i])\n                crossover = np.random.rand(self.dim) < self.CR\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < personal_best_scores[i]:\n                    personal_best_scores[i] = trial_score\n                    personal_best_positions[i] = trial_vector\n                    \n                if trial_score < global_best_score:\n                    global_best_score = trial_score\n                    global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "HybridPSO_DE", "description": "Hybrid Particle Swarm Optimization with Differential Evolution for enhanced exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.3460633770728718, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7889978512559738, 0.7731114987677525, 0.7981091339177819, 0.7892200921232797, 0.7652693139803644, 0.7910167142063724, 0.7948134132649902, 0.7783994856195324, 0.8114873867387327, 0.5640068309979942, 0.5776899335759675, 0.5461629663610992, 0.534124754349008, 0.5755297917465341, 0.5315039912530166, 0.5266768707291455, 0.5595754510048232, 0.561276659227278, 0.38103414391158963, 0.14024469050506427, 0.14345093877864423, 0.16993618112140918, 0.45197164677172685, 0.5043976913041976, 0.42418715578655974, 0.2621238350429159, 0.31342289675462576, 0.1399054905694357, 0.12814856638830008, 0.12926315747325456, 0.1464448053070473, 0.13962893269987375, 0.1439262559746428, 0.13280022326819274, 0.1312983154557098, 0.14143137683066165, 0.9765260078573913, 0.9763084464984715, 0.9770932070474039, 0.9792527389871549, 0.9713307216739646, 0.9829120299025643, 0.9854310892497607, 0.9749036675027086, 0.9778238712257503, 0.6040143759204553, 0.5562393875616707, 0.4820118867354739, 0.5466913031272829, 0.5754551242368269, 0.5187327860357659, 0.5157391143032758, 0.49309261160393003, 0.34275852937922613, 0.7905441216287249, 0.22290749067243365, 0.6896038737792263, 0.2751023671309266, 0.6681943519998548, 0.7093299375371593, 0.7443305408038994, 0.7474972513215599, 0.6579032878827238, 0.23686514467558373, 0.16595735665683264, 0.12008608277996213, 0.11567509701471668, 0.22894290103886128, 0.2531841087944011, 0.25581846877168013, 0.2597956435657536, 0.2784151575013547, 0.2926239922077044, 0.2452149070334957, 0.2657985435181526, 0.2391473359209546, 0.2589780304786503, 0.23650107035051215, 0.2771052022435915, 0.09536881660518304, 0.28294962032141113, 0.10534445918096969, 0.060566457378101624, 0.07466913526330332, 0.07469562227546556, 0.07417610581513967, 0.0761596164338405, 0.08749637966231893, 0.0986375474460559, 0.07994885167566024, 0.16373387371858683, 0.15939066329931306, 0.18014419853482488, 0.17400817784328648, 0.18684116062778466, 0.16912257678479092, 0.19297945420351692, 0.17280120845109614, 0.2115588278482905, 0.04107231361848174, 0.03064237863103314, 0.23443175406609285, 0.07197744048520271, 0.1390754340133109, 0.050584239184790936, 0.23946376377473477, 0.12665694114449122, 0.06117959685071839, 0.18448331133368134, 0.1985961514234864, 0.17750589042746412, 0.15921682349108524, 0.15839524948184192, 0.1556941280166355, 0.1457004533890276, 0.2654553693697539, 0.19519668705266513, 0.5338507360861402, 0.5239802450752118, 0.5421610787004643, 0.5666247173549788, 0.5720524366668484, 0.5453249357148655, 0.5593730291280807, 0.5374480027565405, 0.5520043860980077, 0.16200323899693014, 0.13460720851863894, 0.12330186543136856, 0.16083161290439651, 0.14868700938129642, 0.14292482394729755, 0.13323044408998685, 0.11127635834782812, 0.13078052397868356, 0.21336586555452197, 0.204563951338381, 0.32860122525176827, 0.23872948185953702, 0.29176632850216455, 0.39919459417309666, 0.274074362511347, 0.162647210634156, 0.15424646698365463, 0.43084759751733226, 0.3640990616279143, 0.4016902463969263, 0.4560468908099584, 0.43812654943352514, 0.456407384566077, 0.4373526275264341, 0.46509000230805153, 0.47319880193989095, 0.262967601483565, 0.30603484663700997, 0.31583411258330785, 0.30109092204474497, 0.2713995049522987, 0.3442005670978757, 0.31838258134376607, 0.36780955315624475, 0.2609919897330023, 0.20680144424499403, 0.22475140790045667, 0.18240144502498168, 0.22274007643040605, 0.19892090878335955, 0.21382832330795987, 0.2126757179634826, 0.1942028586740958, 0.23416685405828186, 0.5943792433523584, 0.19082021580539277, 0.20325704297658875, 0.2312740711066703, 0.20265722290010868, 0.22933422227044287, 0.2181815809451414, 0.18967295064413925, 0.23466953366519483, 0.7656634269138529, 0.7746256096039473, 0.20975123187785116, 0.8681961498011709, 0.8025019410771872, 0.7525282513222453, 0.14256143343307326, 0.16074916684323148, 0.8673925335164091, 0.8038038538633603, 0.210409780223757, 0.20309191669606352, 0.2048032391860729, 0.16722326655670838, 0.16847838544616967, 0.7286546929499789, 0.2089839733764236, 0.7195164019200376, 0.20133989005689779, 0.19030192241954413, 0.1991480782194227, 0.18602534586405395, 0.17913564034273532, 0.20251917634057937, 0.18626379343420985, 0.18397997457079496, 0.18081040778007273, 0.08650033726607931, 0.10210491274142841, 0.10953328787685146, 0.08596167180212377, 0.08530958229538299, 0.08456033243609395, 0.12017587341567282, 0.0867582583925085, 0.09801932033541305]}, "mutation_prompt": null}
{"id": "f7ca50a3-723f-422d-8b91-ab6979d0fde0", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.5  # initial inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.F = 0.8  # differential weight\n        self.CR = 0.9  # crossover probability\n\n    def __call__(self, func):\n        # Initialize the swarm\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(pos) for pos in positions])\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # Adaptive inertia weight\n            self.w = 0.9 - (0.5 * evaluations / self.budget)\n            \n            # Particle Swarm Optimization step\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) + self.c2 * r2 * (global_best_position - positions)\n            positions = positions + velocities\n            positions = np.clip(positions, self.lower_bound, self.upper_bound)\n            \n            # Evaluate new positions\n            scores = np.array([func(pos) for pos in positions])\n            evaluations += self.population_size\n            \n            # Update personal bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                    \n            # Update global best\n            current_global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[current_global_best_index] < global_best_score:\n                global_best_score = personal_best_scores[current_global_best_index]\n                global_best_position = personal_best_positions[current_global_best_index]\n            \n            # Differential Evolution step\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = personal_best_positions[a] + self.F * (personal_best_positions[b] - personal_best_positions[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(personal_best_positions[i])\n                crossover = np.random.rand(self.dim) < self.CR\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < personal_best_scores[i]:\n                    personal_best_scores[i] = trial_score\n                    personal_best_positions[i] = trial_vector\n                    \n                if trial_score < global_best_score:\n                    global_best_score = trial_score\n                    global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "HybridPSO_DE", "description": "Enhanced Hybrid PSO-DE with adaptive inertia weight for improved convergence.", "configspace": "", "generation": 1, "fitness": 0.2495651915482039, "feedback": "", "error": "", "parent_id": "2a91206e-af3a-451c-acb4-8dfbd573e58b", "metadata": {"aucs": [0.5399766094827594, 0.5638099400466662, 0.5343021920217235, 0.5671888742866869, 0.5625549731697942, 0.5572834557667852, 0.5688361207036687, 0.553467737089759, 0.5572655729266439, 0.2380013678662748, 0.2716197924605621, 0.24149654815850452, 0.2201351666011171, 0.24547806369287783, 0.25112177305327876, 0.2506891508494212, 0.26580704701315605, 0.28708123004739483, 0.2016055768466607, 0.10119766363830529, 0.20539460218837025, 0.11681599988624125, 0.1201630491320137, 0.1158022393786392, 0.10231072993650125, 0.11556031615070061, 0.1349676121797544, 0.1053436910023764, 0.09940706436003854, 0.1329371620049684, 0.1092124479557991, 0.09708662332434792, 0.1058887307859443, 0.1109716894745254, 0.10909655598915435, 0.10851778878026941, 0.9771029410482742, 0.9767944662198061, 0.9834533483016741, 0.9792545269369531, 0.9733978238137069, 0.9829687969834319, 0.9854531941079264, 0.9771239508220348, 0.9780058137795606, 0.3120117295734496, 0.3150056716272306, 0.3169644696564, 0.29926227604206, 0.32777247721784486, 0.30908849150068174, 0.29208201399776157, 0.3024223847990962, 0.31290037817826544, 0.446520118871084, 0.45857925200387584, 0.4271514276903724, 0.5376588956516388, 0.44790894313495355, 0.4509357818607572, 0.43225784395624745, 0.450138105061471, 0.3741463315655559, 0.1535861131566193, 0.14069161395842733, 0.1506845627497656, 0.12760963486280819, 0.14761269805496435, 0.15088237406063654, 0.1788998180814333, 0.13783246734244148, 0.1669797957832192, 0.048400382859852153, 0.10407065570452978, 0.14777437376695524, 0.1549023569829504, 0.13649431928509115, 0.1946000211148512, 0.17397962299654846, 0.09930847105272156, 0.16404553831832214, 0.04041089122915309, 0.06479694641446909, 0.030856427566055555, 0.052938068230493296, 0.03786320951036215, 0.023056722497648674, 0.048374130082329936, 0.01653490143970393, 0.03177978456644759, 0.1681072033720109, 0.14467921179753485, 0.17163344073037357, 0.1420583735348242, 0.14237538119962811, 0.1304413976173986, 0.18299164640285448, 0.16886627977409663, 0.1523288474789326, 0.0013534675848921873, 0.011745880753754157, 0.0045488752841447155, 9.999999999998899e-05, 9.999999999998899e-05, 0.01023545643240964, 0.019127000231483504, 0.014430745600799155, 0.00015697092983169014, 0.10423649877615204, 0.09913657043997048, 0.11037005653419274, 0.12656288654573833, 0.10004502708995244, 0.12243560814276133, 0.10700642691624729, 0.10062595247954942, 0.1013983038164713, 0.4050671370322221, 0.42762146217178365, 0.4301576558488559, 0.43420468568028725, 0.410822416902512, 0.43678347580385823, 0.4419553814857935, 0.40835055639417484, 0.4442197990565244, 0.08665848647251262, 0.08912488435484955, 0.09264779752181529, 0.09444091785593356, 0.12258149042039712, 0.10714310306767638, 0.09199449134582394, 0.10523899151385918, 0.09265688408305683, 0.14835428021210084, 0.1950652813352085, 0.15498694891917097, 0.24224889725519028, 0.2085094050979467, 0.16486117604517825, 0.19481921186063522, 0.17819892699489248, 0.21750989782815833, 0.27326641593205847, 0.29473816083351834, 0.3141137653953112, 0.3162033058311846, 0.3045520896548155, 0.2997301417690009, 0.3242771788170319, 0.3208564053318782, 0.3228743310883099, 0.20800460913051477, 0.20865074510508008, 0.21626803774148895, 0.23818936621588915, 0.21636192870915538, 0.21441952187987723, 0.24008672517938634, 0.2662904193458385, 0.22442616077186683, 0.19803828236111043, 0.19953703115507937, 0.18800517581911358, 0.19822657275684985, 0.19476858749609538, 0.19330709107320887, 0.1924687949043089, 0.19682390157884277, 0.20769250764658764, 0.20286498072498682, 0.2036697101714664, 0.19408804841687854, 0.18835549752373826, 0.19386964870815127, 0.22800499862026424, 0.1877094444003493, 0.1835758645373584, 0.1852214086542847, 0.6088484636816321, 0.1615094458057138, 0.5390884950152477, 0.6561032223992247, 0.1965557308176713, 0.19520491881339452, 0.1710993245255661, 0.16878250761864633, 0.6760698046440732, 0.5663304424135367, 0.2075920087558688, 0.4713051820379076, 0.19722830268267166, 0.4124609432526629, 0.16636504602658464, 0.20006636555289004, 0.20230848903631082, 0.4510889502317642, 0.18658871708430314, 0.18657019413662057, 0.1725373157844612, 0.19877353938168374, 0.18163312758874284, 0.19476677140512189, 0.2051848149955542, 0.20899152196297754, 0.17761967663794875, 0.08268601699401001, 0.06732977156208486, 0.07833317874273693, 0.09033147656966034, 0.09604059732844927, 0.06704550292448352, 0.08469133083582892, 0.08123319935354101, 0.0751364561825607]}, "mutation_prompt": null}
