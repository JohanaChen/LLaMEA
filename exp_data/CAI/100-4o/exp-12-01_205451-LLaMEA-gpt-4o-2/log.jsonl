{"id": "3377fcf6-782b-4ca8-976b-34ac730e1b03", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 20\n        self.f = 0.7  # differential weight\n        self.cr = 0.9  # crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.population_size):\n                if self.eval_count >= self.budget:\n                    break\n                \n                # Mutation: select three distinct individuals\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n\n                # Generate mutant vector\n                mutant = np.clip(x1 + self.f * (x2 - x3), self.bounds[0], self.bounds[1])\n\n                # Crossover: create trial vector\n                cross_points = np.random.rand(self.dim) < self.cr\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection: greedy selection between trial and target vector\n                trial_fitness = func(trial)\n                self.eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n            self.population = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Step-size Control for Efficient Exploration and Exploitation.", "configspace": "", "generation": 0, "fitness": 0.4574432060253972, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8637470645804368, 0.8587676549155641, 0.8623545612104825, 0.8573093959400683, 0.8755466646966521, 0.870611581767516, 0.8574007327498717, 0.8655550880400615, 0.8673902418916084, 0.7799735061167363, 0.7709492072900671, 0.7439692679121066, 0.7711568590710562, 0.7662859096313505, 0.7550549809947136, 0.7769976505504322, 0.7582733472833152, 0.7544799092331317, 0.11992022695670201, 0.22671385194627514, 0.1322965586211169, 0.28599376017314027, 0.24284002059873844, 0.13908059037921194, 0.14514332899625593, 0.17815764734840778, 0.426151113123171, 0.1249229475615049, 0.11621599865534715, 0.1368502497370293, 0.12746154361044681, 0.13735891427977298, 0.13458293448798653, 0.1493364720302146, 0.11511647316565954, 0.2033765919592463, 0.9651260927209225, 0.9799618513418415, 0.9879090727532452, 0.9659213202332161, 0.9882197379190863, 0.9604913222313065, 0.9593439929817859, 0.9330845710475373, 0.9836867572073217, 0.6606586721943319, 0.6620434847716304, 0.6795137932079325, 0.6598884434877235, 0.6290604144796896, 0.6892307078734718, 0.6760260713892425, 0.6816941502905332, 0.6724890602401814, 0.8602787096211701, 0.8472359634853079, 0.8155884594257021, 0.8728822257957995, 0.8649268780148263, 0.8120718174978524, 0.22949296045904544, 0.8395022582012781, 0.8478922471685545, 0.6259323313174169, 0.6109075783253528, 0.5134234026193902, 0.3507722701399921, 0.5155551871617494, 0.18904940018245997, 0.2626180965688144, 0.5602459647586775, 0.5086063176409521, 0.12096629098724698, 0.726899476313011, 0.2128793168571581, 0.47659882838933476, 0.56980175051042, 0.5328414034297899, 0.5798608679254025, 0.6453067054415922, 0.43137101274467815, 0.6261671148684042, 0.5734275551697152, 0.5659472526346276, 0.6352926193489841, 0.5437132709968111, 0.6129076775916443, 0.6272865202120794, 0.6467943884816393, 0.5976626142132285, 0.6947090425254125, 0.7055696579721211, 0.692991018298136, 0.7232187215786579, 0.7038953052596343, 0.7065864953796104, 0.7292791238707621, 0.7188462693592241, 0.7109830788683761, 0.2003797867334719, 0.2584868272998453, 0.10992352620753587, 0.28855682529714044, 0.484525302754789, 0.1998514571488622, 0.3076357888260911, 0.15576339131782624, 0.11097485982130695, 0.551549286773094, 0.4864904121963076, 0.4654143624457133, 0.5380639973257594, 0.45552749375782275, 0.5052464429572243, 0.539123788464986, 0.4922207391120885, 0.4643995571820695, 0.8080382893693646, 0.8225703848948795, 0.805891429325635, 0.7977522908956366, 0.8171119328053853, 0.8073901615810469, 0.8051615394263927, 0.8090761347820883, 0.8308807991062295, 0.11833493034417175, 0.10081408892195398, 0.08770007160008042, 0.08402211034064788, 0.09731498279713413, 0.12775654304285455, 0.11281709418553276, 0.10653383800514238, 0.12216732146468934, 0.22822512055980526, 0.13828732782625408, 0.2072333915988469, 0.15605377712828317, 0.5348959315831399, 0.1402732759844315, 0.1511844155624047, 0.20888748085190922, 0.1361144042684378, 0.4969433203654854, 0.5101330415743353, 0.4313888950086261, 0.4559857408347824, 0.5072230880659808, 0.4447308589905046, 0.5518003243270291, 0.5104766539415009, 0.5940778207267674, 0.44598247251174294, 0.37636585942464373, 0.37252418662343156, 0.4038948228890056, 0.4108403394828548, 0.3865645702228949, 0.41607576549518643, 0.41271780779922396, 0.4198831470415999, 0.18654998663888323, 0.19391745183912779, 0.18653239794478882, 0.17862024132346965, 0.19822495951676788, 0.19085790693593518, 0.19826273373748027, 0.20505834496967001, 0.19098415778902533, 0.23869462624684679, 0.5909376932542816, 0.2367750108737594, 0.3576101684907028, 0.5711840084947943, 0.22241817313917578, 0.2019369631854373, 0.22715851533847276, 0.618075335922275, 0.17138520027157433, 0.16907339754962647, 0.15413026453764356, 0.17586813888338748, 0.18332549830275024, 0.7998287811500876, 0.18662647733523163, 0.1827791772738614, 0.19878944409231125, 0.8412136064425478, 0.809882866922583, 0.7704540459640881, 0.7143181342202978, 0.7601659588568942, 0.1503466777979715, 0.12718619070062542, 0.21214334934024004, 0.16450019379755254, 0.19968115159523936, 0.17600925120874977, 0.17868468215318134, 0.17469397190917368, 0.17764705330747144, 0.16874251418994013, 0.1829299622755015, 0.17619173469578875, 0.18742195052107513, 0.07315885866801541, 0.08109298082720073, 0.07553199102616093, 0.06638054744067035, 0.086715833277072, 0.07155134238366923, 0.09775740644632547, 0.08636648448655337, 0.08664926530548422]}, "mutation_prompt": null}
{"id": "20069dca-6ef5-4ade-958d-56495a3a62d8", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = min(20 + dim, 50)  # Changed to adapt based on dimension\n        self.f = 0.7  # differential weight\n        self.cr = 0.9  # crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.population_size):\n                if self.eval_count >= self.budget:\n                    break\n                \n                # Mutation: select three distinct individuals\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n\n                # Generate mutant vector\n                mutant = np.clip(x1 + self.f * (x2 - x3), self.bounds[0], self.bounds[1])\n\n                # Crossover: create trial vector\n                cross_points = np.random.rand(self.dim) < self.cr\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection: greedy selection between trial and target vector\n                trial_fitness = func(trial)\n                self.eval_count += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n            self.population = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "HybridDE", "description": "Improved HybridDE with Adaptive Population Size for Enhanced Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": 0.41898467550486984, "feedback": "", "error": "", "parent_id": "3377fcf6-782b-4ca8-976b-34ac730e1b03", "metadata": {"aucs": [0.8222560082103187, 0.8200173659166152, 0.8343716207317431, 0.8234109006778677, 0.8306586507123764, 0.830577729981228, 0.8297376387157887, 0.8277706266281796, 0.8156842441610175, 0.7223402318493788, 0.6926604925226275, 0.7238804176623116, 0.7164086955527253, 0.7285528946557132, 0.7383008278368933, 0.7470979402049607, 0.7044664366556276, 0.7058308763784926, 0.11722064097625029, 0.10530917156209174, 0.1230426492184703, 0.14307619704795338, 0.11488021384077807, 0.14041462325680876, 0.18390903759614974, 0.1772654564763576, 0.12639858699253614, 0.09730002670375526, 0.11892049025179752, 0.11938736179346365, 0.12526134124724353, 0.12751899861307925, 0.10692019856142343, 0.13278829039473095, 0.09834351691450116, 0.12321219531495808, 0.9504806411986758, 0.9742159467602668, 0.9588533492514677, 0.9511566190549433, 0.9636438161140403, 0.9341511389812964, 0.9758842087945822, 0.9495065631532851, 0.9197084282308831, 0.5741340476025163, 0.603451928331929, 0.6129619157640738, 0.6056816766435258, 0.5609035656136516, 0.5659886134822616, 0.5732851124509555, 0.5942390147205246, 0.5488642957248748, 0.8054185434247324, 0.7714836848385722, 0.7947882776376152, 0.772511126073032, 0.8042985830498368, 0.7776347442612354, 0.7993159119170423, 0.7991010931797179, 0.797464997096236, 0.5030311389175273, 0.3780253425110518, 0.12621514826100033, 0.24505663121245214, 0.4741250003317876, 0.5272620123206693, 0.4523884187527417, 0.4585858763406233, 0.5230740607377109, 0.5679877164890763, 0.5445251618357028, 0.28500176553323586, 0.3598180179336792, 0.3466272469015934, 0.1632263927580172, 0.4720228089422367, 0.5428107393120649, 0.5345303085479981, 0.469343052917254, 0.4920664288819978, 0.512049733465127, 0.4987606369026545, 0.49988194103318595, 0.5088794438821752, 0.5171655655598795, 0.5219842014140185, 0.5671764644166419, 0.5900202038900149, 0.614633129150985, 0.6324177279245924, 0.6251087173346405, 0.6434751552136246, 0.621881383720543, 0.6569057876944454, 0.690199155096466, 0.62317120419493, 0.18474372751642054, 0.22883304761408207, 0.1793879335069447, 0.3349270326859757, 0.36433195407959096, 0.391983714452272, 0.1862759219691451, 0.13647611048588737, 0.20042928934677473, 0.37085932539678435, 0.3833619931501382, 0.34403172229359447, 0.38596108721525213, 0.424711307616915, 0.4226630073165514, 0.4209931317613599, 0.4066291909022929, 0.38127748328429234, 0.7728234982003804, 0.7486920027898931, 0.738777799298981, 0.7578081171287926, 0.7686897357134969, 0.7536754610425785, 0.7665457688534727, 0.732898350038919, 0.7266572247558489, 0.09652180400203902, 0.10578040786441867, 0.09631237036412144, 0.11046969143807928, 0.10338150216964148, 0.11930132912908953, 0.09391978576014737, 0.08969966528883377, 0.10328124793166749, 0.14993570193642136, 0.18960241822435842, 0.3267673197289248, 0.09690757039975939, 0.16891977016618276, 0.17706943878382864, 0.13457877278747088, 0.22163147518674586, 0.18657080068513965, 0.41052487304049723, 0.4358063898902058, 0.4147380785522521, 0.42532780498502865, 0.41519567072359354, 0.46276117812672124, 0.4553362331318117, 0.47434277523236945, 0.46014229340508095, 0.3445425250890858, 0.3159715949185051, 0.3215408235335241, 0.3431214902521714, 0.32159553097430293, 0.3298833090116574, 0.36290861194325585, 0.3583527961107258, 0.329710567978872, 0.1825331053892867, 0.20194230747767294, 0.22034260750257317, 0.18431252959322386, 0.1935522917765723, 0.22014731646084096, 0.1860168058858792, 0.18713711907638697, 0.19028959450977023, 0.483883212691547, 0.19041657974567217, 0.22997767040315797, 0.19619801458507224, 0.46912080727336825, 0.4526211117379967, 0.18819371510388017, 0.2833651503291901, 0.40662981121280195, 0.18337553057925182, 0.8475356643374028, 0.17968838715522528, 0.1848364998911206, 0.1837834365895814, 0.19090391547050023, 0.8072102338830907, 0.16171974996466143, 0.800400822573155, 0.20752639938609418, 0.20559209759041785, 0.1538456931663723, 0.1946304727592576, 0.7861625656331788, 0.7673480403448455, 0.282828963392602, 0.12681326466655485, 0.20893183929257653, 0.1933835972549085, 0.1790657859351611, 0.17391944833105244, 0.19841775549564422, 0.16103403455903031, 0.18199613119819935, 0.18193423485282523, 0.2040907835064465, 0.19160168148448298, 0.08321631764522774, 0.08559158188185467, 0.0739514925800484, 0.07571722995967944, 0.08985550934620334, 0.07385562914431887, 0.07679983112158384, 0.0730857152533042, 0.07270710540762826]}, "mutation_prompt": null}
