{"id": "c4eb6b2f-728e-4b50-9fdd-1f7e85ff185c", "solution": "import numpy as np\n\nclass AdaptiveOBPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 5 + int(3 * np.log(dim))  # Adjusting population size based on dimensionality\n        self.w = 0.5  # Inertia weight\n        self.c1 = 1.5  # Cognitive parameter\n        self.c2 = 1.5  # Social parameter\n\n    def opposition_based_learning(self, position):\n        return -position\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        lower_bound = -5.0\n        upper_bound = 5.0\n\n        # Initialize the swarm\n        swarm = np.random.uniform(lower_bound, upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.array([func(ind) for ind in personal_best_positions])\n\n        # Determine the global best\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # Calculate new velocities and update positions\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                velocities[i] = (self.w * velocities[i] +\n                                 self.c1 * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 self.c2 * r2 * (global_best_position - swarm[i]))\n                \n                swarm[i] = swarm[i] + velocities[i]\n\n                # Clip the positions to the search space\n                swarm[i] = np.clip(swarm[i], lower_bound, upper_bound)\n\n                # Evaluate the new positions\n                current_score = func(swarm[i])\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n                # Opposition-based learning\n                opposition_position = self.opposition_based_learning(swarm[i])\n                opposition_position = np.clip(opposition_position, lower_bound, upper_bound)\n                opposition_score = func(opposition_position)\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n                # Update personal bests\n                if opposition_score < current_score:\n                    current_score = opposition_score\n                    swarm[i] = opposition_position\n\n                if current_score < personal_best_scores[i]:\n                    personal_best_scores[i] = current_score\n                    personal_best_positions[i] = swarm[i]\n\n                # Update the global best\n                if current_score < global_best_score:\n                    global_best_score = current_score\n                    global_best_position = swarm[i]\n\n        return global_best_position, global_best_score", "name": "AdaptiveOBPSO", "description": "Adaptive Opposition-Based Particle Swarm Optimization with Dimensional Rescaling for Improved Exploration and Exploitation.", "configspace": "", "generation": 0, "fitness": 0.23709737409362186, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.9228955661361659, 0.9228955661361659, 0.9228955661361659, 0.9319034693481185, 0.9319034693481185, 0.9319034693481185, 0.9445586561562409, 0.9445586561562409, 0.9445586561562409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7225736008670343, 0.7225736008670343, 0.7225736008670343, 0.7423121845097442, 0.7423121845097442, 0.7423121845097442, 0.1350176891554804, 0.1350176891554804, 0.1350176891554804, 0.05526483547542682, 0.05526483547542682, 0.05526483547542682, 0.06288865660173504, 0.06288865660173504, 0.06288865660173504, 0.03529228753231217, 0.03529228753231217, 0.03529228753231217, 0.02373684808263421, 0.02373684808263421, 0.02373684808263421, 0.14601059734975408, 0.14601059734975408, 0.14601059734975408, 0.9944757634178096, 0.9944757634178096, 0.9944757634178096, 0.9927384233931689, 0.9927384233931689, 0.9927384233931689, 0.9920220216351531, 0.9920220216351531, 0.9920220216351531, 0.4590561096662328, 0.4590561096662328, 0.4590561096662328, 0.40383098391986827, 0.40383098391986827, 0.40383098391986827, 0.08858315673363848, 0.08858315673363848, 0.08858315673363848, 0.2109388059744387, 0.2109388059744387, 0.2109388059744387, 0.1619959176948107, 0.1619959176948107, 0.1619959176948107, 0.11355421723749204, 0.11355421723749204, 0.11355421723749204, 0.13574963525450945, 0.13574963525450945, 0.13574963525450945, 0.1322531817952306, 0.1322531817952306, 0.1322531817952306, 0.2585834081022337, 0.2585834081022337, 0.2585834081022337, 0.1713727010371504, 0.1713727010371504, 0.1713727010371504, 0.15112142176781074, 0.15112142176781074, 0.15112142176781074, 0.1841469498037328, 0.1841469498037328, 0.1841469498037328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006619612910663597, 0.006619612910663597, 0.006619612910663597, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15362424480468284, 0.15362424480468284, 0.15362424480468284, 0.08984363012403662, 0.08984363012403662, 0.08984363012403662, 0.062052135632397754, 0.062052135632397754, 0.062052135632397754, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08861531458636585, 0.08861531458636585, 0.08861531458636585, 0.34973560999107156, 0.34973560999107156, 0.34973560999107156, 0.042633674425182844, 0.042633674425182844, 0.042633674425182844, 0.1511167843935758, 0.1511167843935758, 0.1511167843935758, 0.08629485900014056, 0.08629485900014056, 0.08629485900014056, 0.5313676649392924, 0.5313676649392924, 0.5313676649392924, 0.18262911210449007, 0.18262911210449007, 0.18262911210449007, 0.5667448553941996, 0.5667448553941996, 0.5667448553941996, 0.05212610298384568, 0.05212610298384568, 0.05212610298384568, 0.07158285417268562, 0.07158285417268562, 0.07158285417268562, 0.08123747750964794, 0.08123747750964794, 0.08123747750964794, 0.14014544985383803, 0.14014544985383803, 0.14014544985383803, 0.14745384589707178, 0.14745384589707178, 0.14745384589707178, 0.14327268928377512, 0.14327268928377512, 0.14327268928377512, 0.2151459885071434, 0.2151459885071434, 0.2151459885071434, 0.25757274575792066, 0.25757274575792066, 0.25757274575792066, 0.19126621138143607, 0.19126621138143607, 0.19126621138143607, 0.10427762068181712, 0.10427762068181712, 0.10427762068181712, 0.14654490941874132, 0.14654490941874132, 0.14654490941874132, 0.1853670437360041, 0.1853670437360041, 0.1853670437360041, 0.16233389848469215, 0.16233389848469215, 0.16233389848469215, 0.19809873470479678, 0.19809873470479678, 0.19809873470479678, 0.153057446951941, 0.153057446951941, 0.153057446951941, 0.19301815417570378, 0.19301815417570378, 0.19301815417570378, 0.18973833073530966, 0.18973833073530966, 0.18973833073530966, 0.19192161688825105, 0.19192161688825105, 0.19192161688825105, 0.16667840251781452, 0.16667840251781452, 0.16667840251781452, 0.18058886632058568, 0.18058886632058568, 0.18058886632058568, 0.1682085137481154, 0.1682085137481154, 0.1682085137481154, 0.09403696553356877, 0.09403696553356877, 0.09403696553356877, 0.21299919490388242, 0.21299919490388242, 0.21299919490388242, 0.20117896438699323, 0.20117896438699323, 0.20117896438699323, 0.1737396387480492, 0.1737396387480492, 0.1737396387480492, 0.18604364764872872, 0.18604364764872872, 0.18604364764872872, 0.18180294162126398, 0.18180294162126398, 0.18180294162126398, 0.07292210915150388, 0.07292210915150388, 0.07292210915150388, 0.06847495578420437, 0.06847495578420437, 0.06847495578420437, 0.05562102629741672, 0.05562102629741672, 0.05562102629741672]}, "mutation_prompt": null}
{"id": "621388c8-5a93-4877-a3ce-43afee38fd96", "solution": "import numpy as np\n\nclass AdaptiveOBPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 5 + int(3 * np.log(dim))  # Adjusting population size based on dimensionality\n        self.w = 0.9  # Inertia weight\n        self.c1 = 1.5  # Cognitive parameter\n        self.c2 = 1.5  # Social parameter\n\n    def opposition_based_learning(self, position):\n        return -position\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        lower_bound = -5.0\n        upper_bound = 5.0\n\n        # Initialize the swarm\n        swarm = np.random.uniform(lower_bound, upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(swarm)\n        personal_best_scores = np.array([func(ind) for ind in personal_best_positions])\n\n        # Determine the global best\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # Calculate new velocities and update positions\n            self.w = 0.4 + 0.5 * (self.budget - evaluations) / self.budget  # Dynamic inertia weight\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                velocities[i] = (self.w * velocities[i] +\n                                 self.c1 * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 self.c2 * r2 * (global_best_position - swarm[i]))\n                \n                swarm[i] = swarm[i] + velocities[i]\n\n                # Clip the positions to the search space\n                swarm[i] = np.clip(swarm[i], lower_bound, upper_bound)\n\n                # Evaluate the new positions\n                current_score = func(swarm[i])\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n                # Opposition-based learning\n                opposition_position = self.opposition_based_learning(swarm[i])\n                opposition_position = np.clip(opposition_position, lower_bound, upper_bound)\n                opposition_score = func(opposition_position)\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n                # Update personal bests\n                if opposition_score < current_score:\n                    current_score = opposition_score\n                    swarm[i] = opposition_position\n\n                if current_score < personal_best_scores[i]:\n                    personal_best_scores[i] = current_score\n                    personal_best_positions[i] = swarm[i]\n\n                # Update the global best\n                if current_score < global_best_score:\n                    global_best_score = current_score\n                    global_best_position = swarm[i]\n\n        return global_best_position, global_best_score", "name": "AdaptiveOBPSO", "description": "Enhanced AdaptiveOBPSO with dynamic adjustment of inertia weight for improved convergence.", "configspace": "", "generation": 1, "fitness": 0.17050057622589637, "feedback": "", "error": "", "parent_id": "c4eb6b2f-728e-4b50-9fdd-1f7e85ff185c", "metadata": {"aucs": [0.6578884456455318, 0.6578884456455318, 0.6578884456455318, 0.18833010871855427, 0.18833010871855427, 0.18833010871855427, 0.18067987803913999, 0.18067987803913999, 0.18067987803913999, 0.02628887579243766, 0.02628887579243766, 0.02628887579243766, 0.0016475060820099197, 0.0016475060820099197, 0.0016475060820099197, 0.003840369768485452, 0.003840369768485452, 0.003840369768485452, 0.09346809251790178, 0.09346809251790178, 0.09346809251790178, 0.06408152880255347, 0.06408152880255347, 0.06408152880255347, 0.5071599201954338, 0.5071599201954338, 0.5071599201954338, 0.012508408139260574, 0.012508408139260574, 0.012508408139260574, 0.023883410095584034, 0.023883410095584034, 0.023883410095584034, 0.03819180411223333, 0.03819180411223333, 0.03819180411223333, 0.9951891939900912, 0.9951891939900912, 0.9951891939900912, 0.9954442505842989, 0.9954442505842989, 0.9954442505842989, 0.9932090255997615, 0.9932090255997615, 0.9932090255997615, 0.4975623226130118, 0.4975623226130118, 0.4975623226130118, 0.20300504593154356, 0.20300504593154356, 0.20300504593154356, 0.08896646129052499, 0.08896646129052499, 0.08896646129052499, 0.10314642032520915, 0.10314642032520915, 0.10314642032520915, 0.25008037608250655, 0.25008037608250655, 0.25008037608250655, 0.22265927321770662, 0.22265927321770662, 0.22265927321770662, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1638418659434494, 0.1638418659434494, 0.1638418659434494, 0.15228398769002283, 0.15228398769002283, 0.15228398769002283, 0.020035370342544545, 0.020035370342544545, 0.020035370342544545, 0.006105036226448979, 0.006105036226448979, 0.006105036226448979, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005149766013949564, 0.005149766013949564, 0.005149766013949564, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028655190634000016, 0.028655190634000016, 0.028655190634000016, 0.06019391855428635, 0.06019391855428635, 0.06019391855428635, 0.007167208097305089, 0.007167208097305089, 0.007167208097305089, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09768721755581011, 0.09768721755581011, 0.09768721755581011, 0.1478240529334235, 0.1478240529334235, 0.1478240529334235, 0.03331610035902044, 0.03331610035902044, 0.03331610035902044, 0.005235572486237849, 0.005235572486237849, 0.005235572486237849, 0.07061899221045498, 0.07061899221045498, 0.07061899221045498, 0.43989561195485005, 0.43989561195485005, 0.43989561195485005, 0.18179573560540774, 0.18179573560540774, 0.18179573560540774, 0.4096813240642848, 0.4096813240642848, 0.4096813240642848, 0.06753878060610952, 0.06753878060610952, 0.06753878060610952, 0.14143611225130226, 0.14143611225130226, 0.14143611225130226, 0.07171583844373197, 0.07171583844373197, 0.07171583844373197, 0.13586258226091374, 0.13586258226091374, 0.13586258226091374, 0.13156955650090751, 0.13156955650090751, 0.13156955650090751, 0.14793411608616314, 0.14793411608616314, 0.14793411608616314, 0.27948251222188014, 0.27948251222188014, 0.27948251222188014, 0.16635779748974366, 0.16635779748974366, 0.16635779748974366, 0.2493018244202171, 0.2493018244202171, 0.2493018244202171, 0.17125622745816094, 0.17125622745816094, 0.17125622745816094, 0.11442994227191561, 0.11442994227191561, 0.11442994227191561, 0.12444449699107374, 0.12444449699107374, 0.12444449699107374, 0.17313416141816595, 0.17313416141816595, 0.17313416141816595, 0.1555993430798901, 0.1555993430798901, 0.1555993430798901, 0.16640123122941608, 0.16640123122941608, 0.16640123122941608, 0.1743317638891645, 0.1743317638891645, 0.1743317638891645, 0.18915167323272075, 0.18915167323272075, 0.18915167323272075, 0.16734443069825522, 0.16734443069825522, 0.16734443069825522, 0.125839149360778, 0.125839149360778, 0.125839149360778, 0.1640422964362106, 0.1640422964362106, 0.1640422964362106, 0.1805127021373104, 0.1805127021373104, 0.1805127021373104, 0.0657813835091059, 0.0657813835091059, 0.0657813835091059, 0.12952177326355307, 0.12952177326355307, 0.12952177326355307, 0.17176751668205525, 0.17176751668205525, 0.17176751668205525, 0.17099114703446394, 0.17099114703446394, 0.17099114703446394, 0.1638952021177531, 0.1638952021177531, 0.1638952021177531, 0.16933430827353146, 0.16933430827353146, 0.16933430827353146, 0.04895770870308025, 0.04895770870308025, 0.04895770870308025, 0.04841934825821537, 0.04841934825821537, 0.04841934825821537, 0.03246889372347339, 0.03246889372347339, 0.03246889372347339]}, "mutation_prompt": null}
