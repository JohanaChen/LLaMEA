{"id": "e2635ed7-15bd-463b-8a5f-61798b864a66", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 10 + 2 * self.dim\n        self.particles = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.f = 0.5  # Differential Evolution scaling factor\n        self.cr = 0.9  # Crossover probability\n        self.iteration = 0\n\n    def evaluate(self, func):\n        for i in range(self.pop_size):\n            score = func(self.particles[i])\n            if score < self.personal_best_scores[i]:\n                self.personal_best_scores[i] = score\n                self.personal_best_positions[i] = self.particles[i]\n            if score < self.global_best_score:\n                self.global_best_score = score\n                self.global_best_position = self.particles[i]\n\n    def update_particles(self):\n        inertia_weight = 0.7\n        cognitive_constant = 1.5\n        social_constant = 1.5\n        r1 = np.random.uniform(0, 1, (self.pop_size, self.dim))\n        r2 = np.random.uniform(0, 1, (self.pop_size, self.dim))\n        \n        # Velocity update\n        self.velocities = (inertia_weight * self.velocities +\n                           cognitive_constant * r1 * (self.personal_best_positions - self.particles) +\n                           social_constant * r2 * (self.global_best_position - self.particles))\n        \n        # Position update\n        self.particles += self.velocities\n        self.particles = np.clip(self.particles, self.bounds[0], self.bounds[1])\n\n    def differential_evolution(self):\n        for i in range(self.pop_size):\n            indices = [idx for idx in range(self.pop_size) if idx != i]\n            a, b, c = self.particles[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.f * (b - c), self.bounds[0], self.bounds[1])\n            crossover = np.random.rand(self.dim) < self.cr\n            trial = np.where(crossover, mutant, self.particles[i])\n\n            trial_score = func(trial)\n            if trial_score < self.personal_best_scores[i]:\n                self.personal_best_scores[i] = trial_score\n                self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            self.evaluate(func)\n            self.update_particles()\n            self.differential_evolution()\n            evaluations += self.pop_size\n        return self.global_best_position, self.global_best_score", "name": "HybridPSO_DE", "description": "Hybrid Particle Swarm with Differential Evolution for efficient search and exploration in BBOB test suite.", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "An exception occured: Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 66, in __call__\n  File \"<string>\", line 53, in differential_evolution\nNameError: name 'func' is not defined\n.", "error": "NameError(\"name 'func' is not defined\")Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 66, in __call__\n  File \"<string>\", line 53, in differential_evolution\nNameError: name 'func' is not defined\n", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "8b479030-480f-4ca6-a975-23a776e6a721", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 10 + 2 * self.dim\n        self.particles = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.f = 0.5  # Differential Evolution scaling factor\n        self.cr = 0.9  # Crossover probability\n        self.iteration = 0\n\n    def evaluate(self, func):\n        for i in range(self.pop_size):\n            score = func(self.particles[i])\n            if score < self.personal_best_scores[i]:\n                self.personal_best_scores[i] = score\n                self.personal_best_positions[i] = self.particles[i]\n            if score < self.global_best_score:\n                self.global_best_score = score\n                self.global_best_position = self.particles[i]\n\n    def update_particles(self):\n        inertia_weight = 0.7\n        cognitive_constant = 1.5\n        social_constant = 1.5\n        r1 = np.random.uniform(0, 1, (self.pop_size, self.dim))\n        r2 = np.random.uniform(0, 1, (self.pop_size, self.dim))\n        \n        # Velocity update\n        self.velocities = (inertia_weight * self.velocities +\n                           cognitive_constant * r1 * (self.personal_best_positions - self.particles) +\n                           social_constant * r2 * (self.global_best_position - self.particles))\n        \n        # Position update\n        self.particles += self.velocities\n        self.particles = np.clip(self.particles, self.bounds[0], self.bounds[1])\n\n    def differential_evolution(self, func):  # Added func parameter\n        for i in range(self.pop_size):\n            indices = [idx for idx in range(self.pop_size) if idx != i]\n            a, b, c = self.particles[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.f * (b - c), self.bounds[0], self.bounds[1])\n            crossover = np.random.rand(self.dim) < self.cr\n            trial = np.where(crossover, mutant, self.particles[i])\n\n            trial_score = func(trial)  # Corrected function call\n            if trial_score < self.personal_best_scores[i]:\n                self.personal_best_scores[i] = trial_score\n                self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            self.evaluate(func)\n            self.update_particles()\n            self.differential_evolution(func)  # Corrected function call\n            evaluations += self.pop_size\n        return self.global_best_position, self.global_best_score", "name": "HybridPSO_DE", "description": "An improved hybrid approach combining Particle Swarm Optimization and Differential Evolution, now with a correction for function evaluation in differential evolution.", "configspace": "", "generation": 1, "fitness": 0.21633773404084322, "feedback": "", "error": "", "parent_id": "e2635ed7-15bd-463b-8a5f-61798b864a66", "metadata": {"aucs": [0.5650464599363786, 0.7300647515704766, 0.4830297053224256, 0.19000716192710665, 0.19042018620938528, 0.19022161128033044, 0.7276635371671871, 0.7530055806416364, 0.7512392343765768, 0.058273498210990704, 0.20684802675212643, 0.3604595717454282, 0.05639547301333625, 0.037255897431391016, 0.37503048663949723, 0.3853593420162369, 0.4615085023699229, 0.013102526703294815, 0.05491485352435044, 0.12646287441414084, 0.14242089683447046, 0.11085941243212527, 0.13079147658161383, 0.15069550805261533, 0.13010686544756422, 0.10831093779811252, 0.10118669839249883, 0.09447942569357548, 0.09143172720137516, 0.10456414870801778, 0.1114381742526499, 0.07895837170835074, 0.11235151577270985, 0.11720604560125591, 0.03632525486010085, 0.09189204099407433, 0.9870805081966517, 0.9834509716512039, 0.9870833466802325, 0.9831641241538103, 0.9871417167967512, 0.9872810257396012, 0.9876073743570752, 0.9838813659863781, 0.9845998190623825, 0.0612572239429775, 0.29415747335349285, 0.49361438184044515, 0.4527633909399965, 0.1495909985409335, 0.151739972383792, 0.1254673637742415, 0.08885571470199116, 0.05100902073024849, 0.42567845242914304, 0.3584537427596943, 0.5206460315216199, 0.5568557279525213, 0.1911299790270149, 0.3439695103066376, 0.22491281132446206, 0.22142756063981994, 0.4377274421408026, 0.12456934576863621, 0.16434521453503437, 0.1878802651680891, 9.999999999998899e-05, 0.1463161448118614, 0.1725625952028157, 0.11194452581498737, 0.16863762835053098, 0.18315059392695143, 0.16586386095721917, 0.13332699759570077, 0.19498172594982677, 0.16688677689755083, 0.18967666955312312, 0.1640450037912864, 0.2133784251915699, 9.999999999998899e-05, 0.10496453759605717, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034417605731399625, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030539092631254317, 9.999999999998899e-05, 0.002484835231557181, 0.03950663234339247, 0.03857662546787455, 0.06914519181056944, 0.07947236859412155, 9.999999999998899e-05, 0.018567301078648235, 0.0446906850503499, 0.04404404438425624, 0.03511660085702861, 0.019147554712058312, 0.05978734191919444, 0.03655712893788021, 0.0507304919822551, 9.999999999998899e-05, 0.11866056325100416, 0.1309401913507221, 0.047254088247996484, 0.04550190188156089, 0.02845348792189306, 9.999999999998899e-05, 0.07441009734765014, 9.999999999998899e-05, 0.005489916742265066, 0.005330563631967378, 0.052951121687283886, 9.999999999998899e-05, 0.07717728961717296, 0.48514159091667264, 0.5070196123188668, 0.42214204445058134, 0.20886555796807083, 0.20808996180229034, 0.20829345708608327, 0.4143306695567599, 0.41605315836596757, 0.4923852785728302, 0.1048073909947842, 0.079533763586767, 0.09766278716256471, 0.09181990696941289, 0.09025957804516294, 0.07813813030656169, 0.12919242010858778, 0.10224140104241375, 0.08498422388492888, 0.11858798589510045, 0.16345963163864674, 0.1540319963098855, 0.22746945198662105, 0.2473465300093144, 0.1636188244813791, 0.17777701695671244, 0.14700881007405675, 0.23186227054156439, 0.21776445264183808, 0.22103335085669296, 0.3913999257103362, 0.2983099361158249, 0.25541462952648153, 0.3201879310133273, 0.3615115995649859, 0.3361194921540668, 0.26855457622489753, 0.211539307126008, 0.2504206959707985, 0.21763636280785847, 0.2346165820156627, 0.12745371181990472, 0.17044631383540276, 0.15544478463073574, 0.32328046601092175, 0.1877425752056181, 0.18917807485980065, 0.2281945193318874, 0.1851514564960699, 0.18286586223024137, 0.1657521099236956, 0.2004892812337984, 0.18392464781255935, 0.16811953611583452, 0.1951311559560347, 0.1856659503332284, 0.1790783287902925, 0.18966336679199458, 0.21043483961656106, 0.18799702213398528, 0.20302016242683063, 0.17500394107720496, 0.21023734967485563, 0.21489497810366465, 0.25894994024578877, 0.1561977320050435, 0.12424448554738299, 0.8025637079347588, 0.20082302540690455, 0.16930285975627124, 0.09971538013457704, 0.16952614601709715, 0.15710725937118353, 0.12560668389244933, 0.1604471065452695, 0.4150402170385159, 0.10835576407940406, 0.16873386398521328, 0.20640839066005, 0.10382638602646788, 0.6862564298241718, 0.10395640449625443, 0.2092958316757041, 0.19664070681602397, 0.1880374293996011, 0.18937349844099993, 0.22035064757394207, 0.19683537439104115, 0.18585646140450596, 0.18779533912574875, 0.1843872405590884, 0.08873634979104006, 0.07758316847220226, 0.09715319568209502, 0.08802248381539757, 0.056022414555198186, 0.08618738736055453, 0.06549696123806048, 0.07474944562136077, 0.058389424088562736]}, "mutation_prompt": null}
