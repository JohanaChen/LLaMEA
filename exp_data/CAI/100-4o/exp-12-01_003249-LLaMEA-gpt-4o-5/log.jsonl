{"id": "61a200d2-85e4-4800-9037-b7d9653a85bc", "solution": "import numpy as np\n\nclass PSO_ADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 40\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.w = 0.729\n        self.f = 0.5\n        self.cr = 0.9\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best = np.copy(X)\n        p_best_score = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_score)]\n        g_best_score = np.min(p_best_score)\n        \n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Update velocities and positions (PSO step)\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                V[i] = self.w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] += V[i]\n                X[i] = np.clip(X[i], self.lb, self.ub)\n\n                # Evaluate the function\n                score = func(X[i])\n                evals += 1\n\n                # Update personal bests\n                if score < p_best_score[i]:\n                    p_best[i] = X[i]\n                    p_best_score[i] = score\n\n            # Update global best\n            if evals < self.budget:\n                current_g_best = p_best[np.argmin(p_best_score)]\n                current_g_best_score = np.min(p_best_score)\n                if current_g_best_score < g_best_score:\n                    g_best = current_g_best\n                    g_best_score = current_g_best_score\n\n            # Adaptive Differential Evolution step\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(cross_points, mutant, X[i])\n                \n                # Evaluate the trial vector\n                trial_score = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_score < p_best_score[i]:\n                    X[i] = trial\n                    p_best[i] = trial\n                    p_best_score[i] = trial_score\n\n            # Update global best after the DE step\n            if evals < self.budget:\n                current_g_best = p_best[np.argmin(p_best_score)]\n                current_g_best_score = np.min(p_best_score)\n                if current_g_best_score < g_best_score:\n                    g_best = current_g_best\n                    g_best_score = current_g_best_score\n\n        return g_best", "name": "PSO_ADE", "description": "A hybrid Particle Swarm Optimization with Adaptive Differential Evolution (PSO-ADE), leveraging swarm intelligence and adaptive mutation to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.2653745661488366, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7186945555569932, 0.725609605333017, 0.7157509244344666, 0.7362127462905473, 0.7379962545691892, 0.7194034491767483, 0.7404680513347102, 0.7098838053936507, 0.6812584059993416, 0.3237414850832293, 0.4008967841136618, 0.0326299956770264, 0.3192112968976718, 0.039473224907739635, 0.3479851909468088, 0.37282807366760284, 0.38518696771238425, 0.041660393440721255, 0.12015458896775022, 0.1298131443931143, 0.15636848801915426, 0.14292320517405388, 0.1233418893926218, 0.0705710060220186, 0.157689292094365, 0.22237973734634942, 0.16185067295835853, 0.10402748211363, 0.10193510455937049, 0.1028905586831581, 0.13681104510187703, 0.09547953921370333, 0.0937309396385777, 0.1117828836561765, 0.10084788803162703, 0.11193013520115802, 0.9874542339435937, 0.9878090425508773, 0.985813084471578, 0.9794440720867743, 0.9680111768688863, 0.9823514084204611, 0.9750908598062581, 0.9816707942965675, 0.9810217769455827, 0.4038379623504851, 0.4143524166916993, 0.33329944135486234, 0.3773413379039906, 0.4083773850465259, 0.4178852014838931, 0.3810663919508491, 0.08740981703376749, 0.3595654133742253, 0.2254374343024047, 0.49509213464640456, 0.7602002866054589, 0.35907287743621985, 0.2095848865011518, 0.19214620443614594, 0.6233187108584906, 0.21535756602701295, 0.6843696711702368, 0.09163645392174313, 0.17210854622068306, 0.1589116251083842, 0.1565466606641419, 0.18147513152594952, 0.18350660786505435, 0.1976287891003936, 0.1066222951980359, 0.18175999634375184, 0.2046442678764322, 0.20491124806814998, 0.10330620245048794, 0.2003271905316627, 0.1906148409668562, 0.1899857585771041, 0.17541581567686004, 0.19326434958438543, 0.09326863545044539, 9.999999999998899e-05, 0.004207551217446093, 0.0050210745836629656, 0.000947241679632449, 0.009304873496101984, 0.008559786103746192, 9.999999999998899e-05, 9.999999999998899e-05, 0.021105540784066568, 0.04680947144059955, 0.02895776226021829, 0.08866874911754552, 0.08861155132050258, 0.06994848402007214, 0.04808389759768783, 0.054445331639084715, 0.06123541666806964, 0.023524483003902974, 0.03676355524496666, 0.1327852740603208, 0.059336455116865694, 0.06003099954259872, 0.07578854663334444, 0.06123898793001825, 0.10231143491431105, 0.08155462089170973, 0.0718724894238203, 0.12354035151161968, 0.04081929692644004, 0.20509247963399713, 0.05681684743797999, 0.11609994480595964, 0.24460008981308023, 0.05555007599642636, 0.052757619227484565, 0.0773706472443344, 0.502936855845779, 0.4857212325948528, 0.48788719487153354, 0.20807251328519283, 0.49221227989630945, 0.2084048289764855, 0.5068329696701441, 0.49330277285164226, 0.5177733187745632, 0.11257819190598062, 0.1356397817694971, 0.08467350496271742, 0.08915316260231065, 0.13293336565494052, 0.11368055364491736, 0.1117818487595541, 0.12645882282932397, 0.13071680530829854, 0.1661533825767647, 0.1940951214167973, 0.20903672080811975, 0.2467755637434561, 0.24006071738649726, 0.2827989350663006, 0.24819413455738404, 0.21332885644435695, 0.22627279161745395, 0.3907041272362112, 0.39319116137840204, 0.36188596092593706, 0.22569082139527863, 0.3511303064417586, 0.2976654526158298, 0.3784869183554296, 0.3980891553094461, 0.35218134225672937, 0.32200172459174103, 0.21558512401405927, 0.18552233739879864, 0.1918795622837115, 0.21154423892637975, 0.3182038933737569, 0.2537962229734261, 0.24017627948723497, 0.3085083889801875, 0.20185559543944465, 0.16781174506699004, 0.196854671638241, 0.16765727539702457, 0.19649800585547605, 0.20172850198916592, 0.22380176592267853, 0.18259451662758863, 0.20228829444877594, 0.22685829817617875, 0.43143583492502435, 0.18761779568707304, 0.2382856771302938, 0.21476560883384888, 0.20367933972347307, 0.44134724456941554, 0.18564819065736804, 0.18512926150286857, 0.641701891338867, 0.16738382665154639, 0.15181148863004168, 0.8415323487456488, 0.19883642543409374, 0.19894124542546654, 0.1415332321025955, 0.16901310366792277, 0.8131301390548702, 0.5712351966501352, 0.2081102124349795, 0.7039864364953221, 0.5632971554452159, 0.16867152323672585, 0.1509689216611516, 0.10476944299665847, 0.1040690053050668, 0.4954957943745222, 0.2357364605634258, 0.18583477280130078, 0.18567839106869388, 0.19498894557577073, 0.1817319326781559, 0.18940843903611226, 0.18092660960160745, 0.19355652797172684, 0.18886698825262205, 0.07932650768984151, 0.09352337944358768, 0.08805801262155855, 0.08789720444114735, 0.09037193259743381, 0.08163445013034942, 0.09481109889080963, 0.08936145598861134, 0.09533317370358452]}, "mutation_prompt": null}
{"id": "b205b720-1490-4168-ab12-ff2fb1bcc122", "solution": "import numpy as np\n\nclass PSO_ADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 40\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.w = 0.9  # Adjusted dynamic inertia weight\n        self.f = 0.5\n        self.cr = 0.9\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        p_best = np.copy(X)\n        p_best_score = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_score)]\n        g_best_score = np.min(p_best_score)\n        \n        evals = self.pop_size\n\n        while evals < self.budget:\n            self.w = 0.9 - (0.5 * (evals / self.budget))  # Dynamic inertia weight adjustment\n            for i in range(self.pop_size):\n                # Update velocities and positions (PSO step)\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                V[i] = self.w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] += V[i]\n                X[i] = np.clip(X[i], self.lb, self.ub)\n\n                # Evaluate the function\n                score = func(X[i])\n                evals += 1\n\n                # Update personal bests\n                if score < p_best_score[i]:\n                    p_best[i] = X[i]\n                    p_best_score[i] = score\n\n            # Update global best\n            if evals < self.budget:\n                current_g_best = p_best[np.argmin(p_best_score)]\n                current_g_best_score = np.min(p_best_score)\n                if current_g_best_score < g_best_score:\n                    g_best = current_g_best\n                    g_best_score = current_g_best_score\n\n            # Adaptive Differential Evolution step\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(cross_points, mutant, X[i])\n                \n                # Evaluate the trial vector\n                trial_score = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_score < p_best_score[i]:\n                    X[i] = trial\n                    p_best[i] = trial\n                    p_best_score[i] = trial_score\n\n            # Update global best after the DE step\n            if evals < self.budget:\n                current_g_best = p_best[np.argmin(p_best_score)]\n                current_g_best_score = np.min(p_best_score)\n                if current_g_best_score < g_best_score:\n                    g_best = current_g_best\n                    g_best_score = current_g_best_score\n\n        return g_best", "name": "PSO_ADE", "description": "Enhanced PSO-ADE by introducing a dynamic inertia factor in PSO to balance exploration and exploitation effectively.", "configspace": "", "generation": 1, "fitness": 0.24330715623247073, "feedback": "", "error": "", "parent_id": "61a200d2-85e4-4800-9037-b7d9653a85bc", "metadata": {"aucs": [0.6350391576457963, 0.6458393035040164, 0.6132772249413068, 0.6742486706893636, 0.6850982925121402, 0.6477548022666958, 0.6550516222574649, 0.6503004490295564, 0.6673158779616464, 9.999999999998899e-05, 0.347429512052436, 0.026505220468269752, 0.345404530097559, 0.03065244696585656, 0.3297484584438549, 0.011680861504437035, 0.0394888997573285, 0.3644874535206377, 0.14581412872373423, 0.15109809381466055, 0.12255043422978673, 0.06995783524751276, 0.12727487361847967, 0.3155696875957954, 0.13779606505159392, 0.146713914142923, 0.10528784057655172, 0.10998731713683862, 0.10586477635177594, 0.10011874820248445, 0.10661973509822964, 0.1163970074105628, 0.08573304304955631, 0.10606179885469558, 0.10798508373498772, 0.0962656861420843, 0.982120539028611, 0.9818000737038739, 0.9859051095543527, 0.9785772116073314, 0.9737257890073323, 0.9824593949422215, 0.9799473703883249, 0.9815720986976639, 0.98106876430997, 0.4032528326443938, 0.368033993395119, 0.37929352306696706, 0.410073012769953, 0.38667007865560676, 0.1472856284337315, 0.3978997271122584, 0.08588128544685514, 0.4096108163209079, 0.5519565121121354, 0.5691002515576725, 0.3273813922553198, 0.6668525734426565, 0.1993385090892511, 0.18840421619058068, 0.30937906378091995, 0.2187675680370389, 0.38134931839773567, 0.18280151867263061, 0.1414643492751929, 0.16254964184882537, 0.085034840492894, 0.10761506619086081, 0.17245658117803708, 0.16993192009955183, 0.10210524063596438, 0.15752056096020117, 0.11851752422251427, 0.17705388434263403, 0.16652354742309583, 0.17758962803969935, 0.18545276743349104, 0.1750114204395622, 0.09361167066406328, 0.09276335519302903, 0.1624938422196266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07111998427118438, 0.03162553119481637, 0.06546736108528861, 0.05498746757085504, 0.06692915238406216, 0.0640488911245507, 0.023954705341658666, 0.008248345429874293, 0.04013196615144554, 0.06523755156556377, 0.048058117433361414, 0.03169396857106388, 9.999999999998899e-05, 0.09436860193450469, 0.062269667997646105, 0.1693370756080501, 0.04237950722766104, 0.06057313898578087, 0.0656976348625492, 0.06195178173938143, 0.008565824766353924, 0.03657515481202467, 0.18798793955035176, 0.061698299186597305, 0.09247716071473788, 0.11753018646171953, 0.04289617716399885, 0.04770913285856326, 0.06825489667801288, 0.48088250439916114, 0.453803377570573, 0.4480245815697391, 0.20733086718827398, 0.454091435404274, 0.20726890181125124, 0.4586653360677746, 0.4594841486829233, 0.46176722531848247, 0.1169087004138688, 0.08702759145472139, 0.0921085195902549, 0.09936611355292646, 0.11500594376859041, 0.13415227712414002, 0.11598318545399766, 0.09355088845151927, 0.11555534301040649, 0.2562846441303388, 0.18841586094005935, 0.20705442521827266, 0.20054415044563056, 0.26675975231959215, 0.14508235937341774, 0.17687578287187933, 0.18428745473788255, 0.21229684594912468, 0.35293254025110754, 0.23958015850807113, 0.3505000722654903, 0.31733477560028456, 0.19817206101284457, 0.2263110168770166, 0.20750970933764334, 0.2740026250972384, 0.38212919733351935, 0.25145270607813797, 0.16306275709344775, 0.22527404943909435, 0.22830591444952386, 0.2768022677102444, 0.18013568651996792, 0.23753904038196816, 0.3282972725750273, 0.27952085120993053, 0.22446796040038097, 0.18160713784449445, 0.21923281923316573, 0.20137042559094354, 0.1990498836406508, 0.1906237085607584, 0.19490052758189746, 0.2028977176847373, 0.18785053237516558, 0.21120402347531975, 0.1889617380195927, 0.1963383345256985, 0.19630747207491683, 0.19677703862406692, 0.1842342074882939, 0.20038815913160501, 0.457045648090993, 0.20001700619171658, 0.2570663589030644, 0.15691898919615888, 0.1537345626357134, 0.7676764930246882, 0.7045901870089133, 0.1972438683247385, 0.139675424592982, 0.1699137386249009, 0.7826065002024379, 0.6009706944949641, 0.16882546016032196, 0.11992818694173113, 0.2057154942460614, 0.37569478527589695, 0.1503768770830073, 0.10355437404385104, 0.18997143222184332, 0.5402233508322132, 0.18203426314149196, 0.20128342940910815, 0.19794894801731389, 0.19076487160219635, 0.18640915615225928, 0.19719165280256823, 0.18015149722238277, 0.2071505351366637, 0.22039283822867717, 0.0840350247034719, 0.08214431482984086, 0.0753867711461822, 0.08055009808339963, 0.07553746814933915, 0.09271569174714822, 0.07964076870917525, 0.08817670673063205, 0.08013158494136774]}, "mutation_prompt": null}
