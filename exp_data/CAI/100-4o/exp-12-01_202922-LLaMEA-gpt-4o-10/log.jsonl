{"id": "5c03aeae-c490-4804-b56b-a75c04d0d6d4", "solution": "import numpy as np\n\nclass ASDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(5, 4 * self.dim)  # Heuristic for population size\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.evaluations = 0\n\n    def adapt_parameters(self):\n        mean_fitness = np.mean(self.fitness)\n        if mean_fitness < np.percentile(self.fitness, 25):\n            self.F = np.clip(self.F + 0.1 * (0.75 - self.F), 0.4, 1.0)\n            self.CR = np.clip(self.CR + 0.1 * (0.95 - self.CR), 0.6, 1.0)\n        elif mean_fitness > np.percentile(self.fitness, 75):\n            self.F = np.clip(self.F - 0.1 * (self.F - 0.2), 0.1, 0.9)\n            self.CR = np.clip(self.CR - 0.1 * (self.CR - 0.3), 0.1, 0.7)\n\n    def __call__(self, func):\n        self.fitness = np.array([func(ind) for ind in self.population])\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            self.adapt_parameters()\n            new_population = np.copy(self.population)\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n                f_trial = func(trial)\n                self.evaluations += 1\n                if f_trial < self.fitness[i]:\n                    new_population[i], self.fitness[i] = trial, f_trial\n            \n            self.population = new_population\n            if self.evaluations >= self.budget:\n                break\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "ASDE", "description": "An Adaptive Swarm Differential Evolution (ASDE) algorithm combines swarm intelligence and differential evolution with adaptive parameter control for efficient exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.366530802308952, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.905562918343906, 0.9137094331569987, 0.9151937059570363, 0.9088299721567554, 0.9050388459014036, 0.9195710672469488, 0.9003514109335577, 0.9105660066961959, 0.8920196965370221, 0.85673216945056, 0.8397063020531579, 0.827596626682568, 0.8383631923021954, 0.8500810716964404, 0.8344407357361385, 0.8580148593348902, 0.836260711986524, 0.8361226790088796, 0.7074426243779032, 0.19979278705521153, 0.7259926534003428, 0.17913130063122784, 0.35119652616745844, 0.7795588481185295, 0.7769775923007598, 0.6920379470613827, 0.7445667268448336, 0.1522566708790899, 0.17647780213976316, 0.129181905814303, 0.13211450710419592, 0.17364121297333968, 0.1223676362014039, 0.15288543003446953, 0.17359436887835622, 0.15163232278503325, 0.9336064578413942, 0.8818518495334844, 0.9134966930994011, 0.9331921732186093, 0.9229141055388267, 0.934383005391168, 0.9457907992892209, 0.9472855651033271, 0.9002438066100742, 0.1593289557200107, 0.11034424547558352, 0.1774233537307578, 0.15367403896126575, 0.06966397104294064, 0.3862182238103553, 0.20583975417589562, 0.059012752854437744, 0.12271353854018419, 0.8377055281715228, 0.7023489182361926, 0.8808440882800219, 0.8985533110183022, 0.9101372406944851, 0.9279617393080488, 0.17614209301623673, 0.39823121487387425, 0.3352584580009982, 0.14355365576028456, 0.15377806892933754, 0.14302183394262646, 0.2148677235764097, 0.14900156703864398, 0.19940210245675982, 0.18555771519559305, 0.23297400512821398, 0.15231014667209308, 0.15405866903592214, 0.15805250644598323, 0.13671343652994217, 0.7783371884676806, 0.166944112070458, 0.1554261694909026, 0.23594648268210017, 0.1327596290981462, 0.13261137124495204, 0.006023848563492029, 0.0677611922132757, 9.999999999998899e-05, 0.01048584078595416, 0.33938232547708724, 0.27330249171510757, 0.06975872337404221, 0.13316135081109692, 0.000493366623674607, 0.07994658001623378, 0.08750733825992252, 0.08499326057504952, 0.03443816657843779, 0.04065789699429734, 0.021808946923362993, 0.08382487216189316, 0.07273253849347783, 0.09158968595045391, 0.08387281704168892, 0.08466398191405533, 0.13614708400299946, 0.03240381540480464, 0.1247334338617313, 0.06180341441375259, 0.18349323524604144, 0.07179378894124233, 0.0847421646092702, 0.2243071445789545, 0.4228304493951063, 0.41016899491464565, 0.17900370455413117, 0.391590476741124, 0.44771365116816286, 0.1726648737887655, 0.20895011778136963, 0.22318273820945866, 0.6048154346247865, 0.5851362073033322, 0.6807057421607996, 0.6186970129045362, 0.8499911394963329, 0.7373947115427189, 0.6375681890777158, 0.6883930496668791, 0.8493469720023809, 0.15006402012856257, 0.11462058262180785, 0.13084046222052426, 0.16002299529616504, 0.1155560664319597, 0.12927949808139672, 0.1301422778779855, 0.16187165634136946, 0.13309891095905313, 0.16919718415044316, 0.19620049125743522, 0.27222547759497495, 0.29603677190289945, 0.20447863783342102, 0.14562987985590248, 0.6698391658274289, 0.16620434492872338, 0.21933507421838971, 0.6105612373555547, 0.6134169952588446, 0.4703633394115273, 0.7192603232232722, 0.6636801739938825, 0.7257211935075266, 0.7023702677297226, 0.6664133977552501, 0.5877985628801254, 0.3676157770985162, 0.5056355932113559, 0.2949323449602864, 0.5543113188684199, 0.5132680102621646, 0.3479691426104261, 0.23292329655480204, 0.6560338295820314, 0.09592824547473155, 0.228993643157552, 0.2374311407747961, 0.193357579074657, 0.19863002623456683, 0.2811506868730188, 0.20552378129018833, 0.24174395497263235, 0.22169068806575776, 0.20595007591326753, 0.21216115400968316, 0.7880946536022855, 0.2319468477021056, 0.6016252465919198, 0.2488238212724414, 0.536230911213641, 0.23978564134123348, 0.6623193703296462, 0.23890701184602103, 0.17048850553922512, 0.1709603163733997, 0.724601253360825, 0.17829110500040246, 0.18456564116249552, 0.17686825110902793, 0.12824863488026716, 0.4089019082542096, 0.16393317379222805, 0.1657916831009537, 0.2117976319378927, 0.16912911786873064, 0.2075432027966002, 0.6272461906650875, 0.629900190083907, 0.15345189001870863, 0.1556031349954352, 0.21187590951261526, 0.20906582360014003, 0.1881982412227926, 0.22598557412519826, 0.19633898956231277, 0.1865008820338966, 0.20956214784219396, 0.18889221353281593, 0.20723138617624015, 0.20974275923628882, 0.08600298544142337, 0.08999694876076447, 0.10054388540869819, 0.09626583176965031, 0.10228357870412619, 0.08255203910579911, 0.08367597619385303, 0.09142709043925279, 0.09740111947878016]}, "mutation_prompt": null}
{"id": "1296f0a5-6f02-4160-8fea-7db454eb4878", "solution": "import numpy as np\n\nclass ASDESP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(5, 4 * self.dim)  # Heuristic for population size\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.evaluations = 0\n        self.perturbation_probability = 0.05  # Probability of perturbation\n\n    def adapt_parameters(self):\n        mean_fitness = np.mean(self.fitness)\n        if mean_fitness < np.percentile(self.fitness, 25):\n            self.F = np.clip(self.F + 0.1 * (0.75 - self.F), 0.4, 1.0)\n            self.CR = np.clip(self.CR + 0.1 * (0.95 - self.CR), 0.6, 1.0)\n        elif mean_fitness > np.percentile(self.fitness, 75):\n            self.F = np.clip(self.F - 0.1 * (self.F - 0.2), 0.1, 0.9)\n            self.CR = np.clip(self.CR - 0.1 * (self.CR - 0.3), 0.1, 0.7)\n\n    def __call__(self, func):\n        self.fitness = np.array([func(ind) for ind in self.population])\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            self.adapt_parameters()\n            new_population = np.copy(self.population)\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n                \n                # Introduce stochastic perturbation\n                if np.random.rand() < self.perturbation_probability:\n                    trial += np.random.normal(0, 0.1, self.dim)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                self.evaluations += 1\n                if f_trial < self.fitness[i]:\n                    new_population[i], self.fitness[i] = trial, f_trial\n            \n            self.population = new_population\n            if self.evaluations >= self.budget:\n                break\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "ASDESP", "description": "An Adaptive Swarm Differential Evolution with Stochastic Perturbation (ASDESP) introduces random perturbations for enhanced exploration and convergence.", "configspace": "", "generation": 1, "fitness": 0.3758325296576519, "feedback": "", "error": "", "parent_id": "5c03aeae-c490-4804-b56b-a75c04d0d6d4", "metadata": {"aucs": [0.8963773565145368, 0.904767654093198, 0.9078889692547591, 0.8996362443024739, 0.9139740319007917, 0.908245080612097, 0.9164882347486158, 0.9091415702575895, 0.9115546267868491, 0.826217937000505, 0.8392460683259105, 0.8300172723620547, 0.8444889976379448, 0.8311067319980701, 0.8416217536658928, 0.8505502634783071, 0.8500986906624155, 0.8638943820267866, 0.14660347659787698, 0.1478088162822938, 0.5480993447607188, 0.6630271137732191, 0.1778278763591501, 0.23310445214412168, 0.15936923686436388, 0.6009000820535082, 0.7358773623853203, 0.12910210546395406, 0.16130082456980654, 0.14148050072057117, 0.17468026493779742, 0.15108719399057902, 0.7486740309486892, 0.5683294726633961, 0.13938557291732834, 0.1813666121712667, 0.9306305196605233, 0.8971957906140626, 0.9516737454972322, 0.9386354780929977, 0.9495609056269864, 0.9370617449479943, 0.926574279414328, 0.9035434290277672, 0.9094398070926443, 0.33637822155286234, 0.22781681750692784, 0.30012011497222657, 0.3201953001029846, 0.5465315987482877, 0.33178411658839735, 0.26295764244654696, 0.23705777991937682, 0.296406736426044, 0.3881658640016885, 0.9007903769065445, 0.22597058345442678, 0.8948789509428798, 0.8972761228008522, 0.8956072020616943, 0.2312482290867629, 0.8160417774614239, 0.8347258609983552, 0.21702289529516006, 0.16955400823584754, 0.2601731636356742, 0.1599814058817599, 0.1288543001311533, 0.17656003495947947, 0.2819683266172647, 0.20381224040666324, 0.29632784337000384, 0.19510842122846073, 0.1393050992280006, 0.1775178847841251, 0.1658470924755191, 0.12797426315628313, 0.29240708526049974, 0.21809232949786406, 0.20817019632858236, 0.1387333357976155, 0.0584706876475386, 0.1660724686321422, 0.12000668854141328, 0.01583661330813102, 0.09580213727137366, 0.041395000730574116, 0.0024243954514222565, 0.0198157524185677, 0.0030700725988619393, 0.07759374737476943, 0.07614327854763692, 0.10263059887930537, 0.06394928955190282, 0.015169813627696205, 0.021117663535360043, 0.11727255207297926, 0.07129538160165572, 0.08521606222025835, 0.06592497153638721, 0.05377249642300108, 0.08365062040944993, 0.07865528669153077, 0.11494284541410449, 0.1617409211766868, 0.11973223269592326, 0.12228497187341669, 0.07208064860929697, 0.2902075744093169, 0.4237761347793426, 0.27835845986582786, 0.45936261884015106, 0.3830696919541491, 0.19012227698785333, 0.33534911689854985, 0.34286340002185145, 0.4394938462873983, 0.5495754811515154, 0.6455458214444847, 0.7962279386610754, 0.5482633609653529, 0.8313567365695298, 0.8507548291426259, 0.6322205167097792, 0.6437183041778889, 0.5434294940994207, 0.1633326030002199, 0.12015824899691852, 0.11132056696871062, 0.1406506430075649, 0.12812138045272226, 0.2939004952416915, 0.1399915871849995, 0.10068830208755841, 0.12252555832517809, 0.2749091230120033, 0.14434119089035724, 0.22097138486575996, 0.38172977864996194, 0.3242361006889741, 0.20901920836759158, 0.5637899301161884, 0.25953736767794544, 0.28433148525381635, 0.6300476775750015, 0.5308689221167906, 0.5516067217540359, 0.44936019432146623, 0.7063771033465389, 0.6124056229449896, 0.5928416048346505, 0.6046731614713192, 0.6299066632384369, 0.4959774851899117, 0.4234265991250703, 0.2766812372246207, 0.5627294982487887, 0.5888909445330749, 0.28318730790313273, 0.42965609952189976, 0.49702842592540875, 0.30485688648329023, 0.21609976895988137, 0.22668726599841127, 0.1996456218663306, 0.21895708415744897, 0.21780471246456445, 0.2120459469598528, 0.21167386381381548, 0.19213123681827826, 0.20475524859743088, 0.5471002837245758, 0.24542596391838323, 0.20934644736671204, 0.627862136650867, 0.7684309057160928, 0.24538093299409547, 0.74530375400058, 0.2426814009342847, 0.24057523306976913, 0.1678957636114179, 0.1697867743350906, 0.8460088242654736, 0.17256611337990357, 0.1869178707057505, 0.6580083197906199, 0.14034946285136563, 0.6496763703235784, 0.1573970156247051, 0.26148781118991504, 0.21225499341199316, 0.3573936118344587, 0.21013211638374918, 0.6735770632724033, 0.19922107433687708, 0.2130900963776592, 0.4135691156718171, 0.2099847730933464, 0.2181449080198018, 0.20498295027622293, 0.21298256168311414, 0.1945692644501924, 0.2052626957935143, 0.1963244611011814, 0.19717558842780758, 0.2060768362184091, 0.2017526278975813, 0.10280574916819463, 0.0830411026263328, 0.13383596386771857, 0.09380275928339865, 0.09008778698533848, 0.11130990010299524, 0.1110771369805379, 0.09673809223720231, 0.08577200263214857]}, "mutation_prompt": null}
