{"id": "043bee20-ee3d-4c2e-957f-171a6e259877", "solution": "import numpy as np\n\nclass SwarmDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Empirical choice for population size\n        self.c1 = 1.5  # Cognitive coefficient\n        self.c2 = 1.5  # Social coefficient\n        self.f = 0.8   # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_fitness = np.array([func(ind) for ind in population])\n        global_best = personal_best[np.argmin(personal_best_fitness)]\n        global_best_fitness = np.min(personal_best_fitness)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Update velocity and position (PSO component)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = velocities[i] + self.c1 * r1 * (personal_best[i] - population[i]) + self.c2 * r2 * (global_best - population[i])\n                candidate_position = population[i] + velocities[i]\n\n                # Differential Evolution mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.f * (population[b] - population[c])\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, candidate_position)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Evaluate new candidate\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection and update personal best\n                if trial_fitness < personal_best_fitness[i]:\n                    personal_best[i] = trial\n                    personal_best_fitness[i] = trial_fitness\n\n                # Update global best\n                if trial_fitness < global_best_fitness:\n                    global_best = trial\n                    global_best_fitness = trial_fitness\n\n                # Update the population\n                population[i] = trial\n\n                # Break if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n        return global_best", "name": "SwarmDifferentialEvolution", "description": "A novel metaheuristic algorithm inspired by particle swarm optimization and differential evolution, combining social influence and mutation strategies for efficient exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.10877508817810298, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.11869729595922507, 0.1368440350866975, 0.18301445263111638, 0.14316688768508978, 0.15824108200237208, 0.15441716620387214, 0.14637490651189655, 0.13668430418782795, 0.1339852377222409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03795491192550038, 0.01985806304271065, 0.035069278067954346, 0.02598345683511527, 0.02837862919841405, 0.027389600540127512, 0.030526583573219024, 0.022529752527023827, 0.024489333071204045, 0.01033219771751026, 0.014355613994698091, 0.01092185626153519, 0.02082232158291497, 0.010807576404056052, 0.015683566337285626, 0.02206238223638224, 0.014192642254374332, 0.009590534196534661, 0.9691166171648431, 0.9727006601638599, 0.9176821787555741, 0.929747136399969, 0.9802582435690586, 0.9685710604480775, 0.928896816473235, 0.9490118290238044, 0.9548102915913599, 0.06547316682447968, 0.05961020604971523, 0.051509820895166425, 0.07739960097730458, 0.057215370752284445, 0.06106255848757447, 0.05378103574097515, 0.07104792945400151, 0.07848640301908816, 0.10858258190215164, 0.13191152711914766, 0.1163058674273858, 0.10558436393617598, 0.10375008992227253, 0.08136334582447102, 0.09091885065538374, 0.08304466662419341, 0.09611473730657039, 9.999999999998899e-05, 0.00027581029586509764, 9.999999999998899e-05, 0.017644590470538457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027801076342024444, 0.006233474247863358, 0.00538330367672224, 0.0045859727845909415, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02212276271918201, 0.03591540915016689, 0.037226083546002875, 0.020366785164137258, 0.01810659754777022, 0.04500938426594947, 0.015119632651436454, 0.035269018087207726, 0.04884869174820161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1718651151556222, 0.18469587836919532, 0.15131473862466427, 0.168968211557728, 0.16662399302156705, 0.1805836311088166, 0.16112956940342849, 0.1553669088780456, 0.15211969490313737, 0.04436704346458864, 0.035720759069739705, 0.037114228637442515, 0.05838043262281645, 0.030457159242402998, 0.0354292439061612, 0.020076228221781456, 0.046348598112257444, 0.0267656688986897, 0.1351962325298406, 0.15557545214569524, 0.14556974204154283, 0.14005259265614312, 0.1545178776389281, 0.15334445767023241, 0.15037053368104247, 0.15380223183595876, 0.13906464473659086, 0.14316707912728466, 0.14092932229366617, 0.16555519427867127, 0.15088353301678126, 0.14237021853938148, 0.14577029568526179, 0.13657273569161665, 0.17377774300845283, 0.15323776892994156, 0.10978737698791319, 0.0903068532058473, 0.09811712243400761, 0.08147667376400025, 0.08782338133058876, 0.08945046556412561, 0.09643088141077805, 0.0997711199450243, 0.09351933405380619, 0.15135497373455764, 0.13506692469577264, 0.13345086981233123, 0.13542616813493935, 0.13727609242195082, 0.1313817762598808, 0.1293989704557209, 0.12855580162924074, 0.14392679981883505, 0.08644064885043279, 0.0033375948216682882, 0.0794125440898501, 0.0029783403002151543, 0.014362434263821, 9.999999999998899e-05, 0.14263916383334885, 9.999999999998899e-05, 0.0566841378260633, 0.15208675156460616, 0.15519252268431227, 0.12017922936267622, 0.12698075908274697, 0.15362166165604707, 0.13016420226205483, 0.14599314172680478, 0.12903142702173953, 0.12773820087672227, 0.11050879157008242, 0.12296732480614103, 0.1092450967381643, 0.08959759118031174, 0.10764644567965409, 0.11370119557412728, 0.1646350451802875, 0.14767662139196613, 0.14591987589579003, 0.1945667025907324, 0.19735124439257767, 0.1986377422479353, 0.19389858809996519, 0.19768868721150834, 0.1999301346708683, 0.20896119913208866, 0.1921713931107223, 0.18543655247857804, 0.04535579510751453, 0.0339881820464476, 0.03535602818045824, 0.03878963880954922, 0.03869160663137794, 0.02545863531440573, 0.03664640232992156, 0.03803354422653826, 0.039891629030125664]}, "mutation_prompt": null}
{"id": "2334102e-b87a-4476-86e7-08221f523de1", "solution": "import numpy as np\n\nclass SwarmDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Empirical choice for population size\n        self.c1 = 1.5  # Cognitive coefficient\n        self.c2 = 1.5  # Social coefficient\n        self.f = 0.8   # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_fitness = np.array([func(ind) for ind in population])\n        global_best = personal_best[np.argmin(personal_best_fitness)]\n        global_best_fitness = np.min(personal_best_fitness)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Update velocity and position (PSO component)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = velocities[i] + self.c1 * r1 * (personal_best[i] - population[i]) + self.c2 * r2 * (global_best - population[i])\n                candidate_position = population[i] + velocities[i]\n\n                # Differential Evolution mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.f * (population[b] - population[c])\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, candidate_position)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Evaluate new candidate\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection and update personal best\n                if trial_fitness < personal_best_fitness[i]:\n                    personal_best[i] = trial\n                    personal_best_fitness[i] = trial_fitness\n\n                # Update global best\n                if trial_fitness < global_best_fitness:\n                    global_best = trial\n                    global_best_fitness = trial_fitness\n\n                # Update the population\n                population[i] = trial\n\n                # Break if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n        return global_best", "name": "SwarmDifferentialEvolution", "description": "A novel metaheuristic algorithm inspired by particle swarm optimization and differential evolution, combining social influence and mutation strategies for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "043bee20-ee3d-4c2e-957f-171a6e259877", "metadata": {"aucs": [0.11869729595922507, 0.1368440350866975, 0.18301445263111638, 0.14316688768508978, 0.15824108200237208, 0.15441716620387214, 0.14637490651189655, 0.13668430418782795, 0.1339852377222409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03795491192550038, 0.01985806304271065, 0.035069278067954346, 0.02598345683511527, 0.02837862919841405, 0.027389600540127512, 0.030526583573219024, 0.022529752527023827, 0.024489333071204045, 0.01033219771751026, 0.014355613994698091, 0.01092185626153519, 0.02082232158291497, 0.010807576404056052, 0.015683566337285626, 0.02206238223638224, 0.014192642254374332, 0.009590534196534661, 0.9691166171648431, 0.9727006601638599, 0.9176821787555741, 0.929747136399969, 0.9802582435690586, 0.9685710604480775, 0.928896816473235, 0.9490118290238044, 0.9548102915913599, 0.06547316682447968, 0.05961020604971523, 0.051509820895166425, 0.07739960097730458, 0.057215370752284445, 0.06106255848757447, 0.05378103574097515, 0.07104792945400151, 0.07848640301908816, 0.10858258190215164, 0.13191152711914766, 0.1163058674273858, 0.10558436393617598, 0.10375008992227253, 0.08136334582447102, 0.09091885065538374, 0.08304466662419341, 0.09611473730657039, 9.999999999998899e-05, 0.00027581029586509764, 9.999999999998899e-05, 0.017644590470538457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027801076342024444, 0.006233474247863358, 0.00538330367672224, 0.0045859727845909415, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02212276271918201, 0.03591540915016689, 0.037226083546002875, 0.020366785164137258, 0.01810659754777022, 0.04500938426594947, 0.015119632651436454, 0.035269018087207726, 0.04884869174820161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1718651151556222, 0.18469587836919532, 0.15131473862466427, 0.168968211557728, 0.16662399302156705, 0.1805836311088166, 0.16112956940342849, 0.1553669088780456, 0.15211969490313737, 0.04436704346458864, 0.035720759069739705, 0.037114228637442515, 0.05838043262281645, 0.030457159242402998, 0.0354292439061612, 0.020076228221781456, 0.046348598112257444, 0.0267656688986897, 0.1351962325298406, 0.15557545214569524, 0.14556974204154283, 0.14005259265614312, 0.1545178776389281, 0.15334445767023241, 0.15037053368104247, 0.15380223183595876, 0.13906464473659086, 0.14316707912728466, 0.14092932229366617, 0.16555519427867127, 0.15088353301678126, 0.14237021853938148, 0.14577029568526179, 0.13657273569161665, 0.17377774300845283, 0.15323776892994156, 0.10978737698791319, 0.0903068532058473, 0.09811712243400761, 0.08147667376400025, 0.08782338133058876, 0.08945046556412561, 0.09643088141077805, 0.0997711199450243, 0.09351933405380619, 0.15135497373455764, 0.13506692469577264, 0.13345086981233123, 0.13542616813493935, 0.13727609242195082, 0.1313817762598808, 0.1293989704557209, 0.12855580162924074, 0.14392679981883505, 0.08644064885043279, 0.0033375948216682882, 0.0794125440898501, 0.0029783403002151543, 0.014362434263821, 9.999999999998899e-05, 0.14263916383334885, 9.999999999998899e-05, 0.0566841378260633, 0.15208675156460616, 0.15519252268431227, 0.12017922936267622, 0.12698075908274697, 0.15362166165604707, 0.13016420226205483, 0.14599314172680478, 0.12903142702173953, 0.12773820087672227, 0.11050879157008242, 0.12296732480614103, 0.1092450967381643, 0.08959759118031174, 0.10764644567965409, 0.11370119557412728, 0.1646350451802875, 0.14767662139196613, 0.14591987589579003, 0.1945667025907324, 0.19735124439257767, 0.1986377422479353, 0.19389858809996519, 0.19768868721150834, 0.1999301346708683, 0.20896119913208866, 0.1921713931107223, 0.18543655247857804, 0.04535579510751453, 0.0339881820464476, 0.03535602818045824, 0.03878963880954922, 0.03869160663137794, 0.02545863531440573, 0.03664640232992156, 0.03803354422653826, 0.039891629030125664]}, "mutation_prompt": null}
