{"id": "43fd7673-fd10-4c02-80f9-0699ffffcff4", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.evaluations = 0\n\n    def evaluate(self, func, candidate):\n        fitness = func(candidate)\n        self.evaluations += 1\n        if fitness < self.best_fitness:\n            self.best_fitness = fitness\n            self.best_solution = candidate\n        return fitness\n\n    def mutate(self, target_idx):\n        indices = list(range(self.population_size))\n        indices.remove(target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        return self.population[a] + self.F * (self.population[b] - self.population[c])\n\n    def crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.CR\n        if not np.any(crossover_mask):\n            crossover_mask[np.random.randint(self.dim)] = True\n        return np.where(crossover_mask, mutant, target)\n\n    def __call__(self, func):\n        fitness = np.array([self.evaluate(func, ind) for ind in self.population])\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = self.crossover(self.population[i], mutant)\n                trial_fitness = self.evaluate(func, trial)\n\n                if trial_fitness < fitness[i]:\n                    self.population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return self.best_solution", "name": "AdaptiveDifferentialEvolution", "description": "A dynamic differential evolution algorithm enhanced with adaptive learning strategies and perturbation for diverse global exploration.", "configspace": "", "generation": 0, "fitness": 0.38961586939502635, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6374593667227992, 0.6889401945204383, 0.6840853480293522, 0.6967349454168776, 0.6836546441420059, 0.7013571449635906, 0.6666788686750416, 0.6770639713943923, 0.6863840800439489, 0.12406593503725594, 0.12297465129273255, 0.14058632370994584, 0.1052595427488272, 0.11167461882941265, 0.13007467230320757, 0.12365019145486145, 0.11918356450990464, 0.11488744604263235, 0.10535781951712397, 0.11481994548974239, 0.09822569063089581, 0.11315686760328558, 0.095718207154741, 0.1284589936656112, 0.11755130828269289, 0.12022350325463882, 0.11584820962019216, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.5245512181825833, 0.48590193773332546, 0.4726385713433626, 0.49755790842027525, 0.44050793004714717, 0.4860225812214042, 0.48923614479716393, 0.5626004529120301, 0.5661570195281409, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.49293502300884817, 0.271219826626266, 0.19525206862626898, 0.21208489548313536, 0.28795742039245853, 0.23712476040114228, 0.26456600091702454, 0.42421509633777477, 0.24608110188436494, 0.20232704007066327, 0.3997401225652686, 0.3946916881107272, 0.3321086903701219, 0.17433639000156165, 0.34057707605230425, 0.3185375665222645, 0.44875467299607996, 0.22345913743219759, 0.47817446858601365, 0.4614805127441417, 0.4102169989000195, 0.44686108002553415, 0.43915453207298905, 0.4440057175463302, 0.44242477992667906, 0.45027983433914365, 0.45654985092748845, 0.5447193995815659, 0.587850359461022, 0.5479286276366925, 0.5932712354594567, 0.5281597245465506, 0.576369408068012, 0.5895215243182369, 0.6533175907468016, 0.5580757098786728, 0.1820234248487943, 0.10042102185966051, 0.1094458063176349, 0.18975380863799762, 0.2616899769940645, 0.2704787827836086, 0.14806365752002526, 0.16644564002240947, 0.15630378745456364, 0.3522612834402613, 0.34558762409589794, 0.30832940654158036, 0.3548320422232081, 0.36776095379850093, 0.36386973613151785, 0.32759195569500954, 0.36128975575133904, 0.3295039643056106, 0.7251247130914591, 0.7421906635710509, 0.7496270213295275, 0.7230575132501221, 0.7251778593971584, 0.755831239590211, 0.7223247260970481, 0.7243412267015438, 0.7346211765929873, 0.09425026936346892, 0.10579369271440497, 0.09773862024513658, 0.09069026109797595, 0.09873614125013352, 0.11727414971731487, 0.11161073672894872, 0.1053016798615024, 0.10926195124569171, 0.1668445090052374, 0.13100362643348562, 0.14861021678460906, 0.1597184884703442, 0.1703972777954268, 0.1536571464041484, 0.21274717756607497, 0.1577126553447179, 0.17778289692217875, 0.41067801371860546, 0.43734698273738726, 0.46862066207838815, 0.39221448766203615, 0.41783463202763027, 0.4328395179856588, 0.4438323548298344, 0.4822833501481897, 0.4826278681932962, 0.3433992730587172, 0.3441615990342961, 0.33987749587443383, 0.3503815404539863, 0.32444776412018095, 0.3406782878289202, 0.35588497881207926, 0.35848157334592856, 0.32881957612434887, 0.20687612780704456, 0.21476317805421452, 0.19118188338739683, 0.20720838202013414, 0.22689532950204405, 0.19706522310943897, 0.2048548004556734, 0.2102999473590339, 0.2048058029438542, 0.19922743430889167, 0.2137604528357705, 0.1964308170507908, 0.18742924286984874, 0.25777128882776845, 0.18928562755462075, 0.2023242721488182, 0.21173853655341168, 0.24001795766827494, 0.6726255830604337, 0.19796955755725243, 0.19251605048532705, 0.6089964619245598, 0.7234653051791861, 0.1786098411700403, 0.565304270779537, 0.17117816801315844, 0.18106701919554602, 0.6868763099660992, 0.31772736525156975, 0.710391785663764, 0.1979188806567178, 0.2012540407726643, 0.70839429766416, 0.6418310694978038, 0.15061184268873962, 0.2104471192807641, 0.1938161867954813, 0.1886171753911593, 0.21371843256686773, 0.18694601503491992, 0.2054013654456397, 0.18033810841782072, 0.1958685708189951, 0.20650369436260085, 0.1886939359094303, 0.07497160228750599, 0.08931752520059522, 0.08148000773387032, 0.07270439939139905, 0.08257615351081926, 0.08619801121010329, 0.08427141040888397, 0.07555033649169784, 0.08109924643008071]}, "mutation_prompt": null}
{"id": "8938a04b-9dac-4224-92b6-0e2a815bd1f9", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.evaluations = 0\n\n    def evaluate(self, func, candidate):\n        fitness = func(candidate)\n        self.evaluations += 1\n        if fitness < self.best_fitness:\n            self.best_fitness = fitness\n            self.best_solution = candidate\n        return fitness\n\n    def mutate(self, target_idx):\n        indices = list(range(self.population_size))\n        indices.remove(target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        return self.population[a] + self.F * (self.population[b] - self.population[c])\n\n    def crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.CR\n        if not np.any(crossover_mask):\n            crossover_mask[np.random.randint(self.dim)] = True\n        return np.where(crossover_mask, mutant, target)\n\n    def __call__(self, func):\n        fitness = np.array([self.evaluate(func, ind) for ind in self.population])\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = self.crossover(self.population[i], mutant)\n                trial_fitness = self.evaluate(func, trial)\n\n                if trial_fitness < fitness[i]:\n                    self.population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return self.best_solution", "name": "AdaptiveDifferentialEvolution", "description": "A dynamic differential evolution algorithm enhanced with adaptive learning strategies and perturbation for diverse global exploration.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43fd7673-fd10-4c02-80f9-0699ffffcff4", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6374593667227992, 0.6889401945204383, 0.6840853480293522, 0.6967349454168776, 0.6836546441420059, 0.7013571449635906, 0.6666788686750416, 0.6770639713943923, 0.6863840800439489, 0.12406593503725594, 0.12297465129273255, 0.14058632370994584, 0.1052595427488272, 0.11167461882941265, 0.13007467230320757, 0.12365019145486145, 0.11918356450990464, 0.11488744604263235, 0.10535781951712397, 0.11481994548974239, 0.09822569063089581, 0.11315686760328558, 0.095718207154741, 0.1284589936656112, 0.11755130828269289, 0.12022350325463882, 0.11584820962019216, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.5245512181825833, 0.48590193773332546, 0.4726385713433626, 0.49755790842027525, 0.44050793004714717, 0.4860225812214042, 0.48923614479716393, 0.5626004529120301, 0.5661570195281409, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.49293502300884817, 0.271219826626266, 0.19525206862626898, 0.21208489548313536, 0.28795742039245853, 0.23712476040114228, 0.26456600091702454, 0.42421509633777477, 0.24608110188436494, 0.20232704007066327, 0.3997401225652686, 0.3946916881107272, 0.3321086903701219, 0.17433639000156165, 0.34057707605230425, 0.3185375665222645, 0.44875467299607996, 0.22345913743219759, 0.47817446858601365, 0.4614805127441417, 0.4102169989000195, 0.44686108002553415, 0.43915453207298905, 0.4440057175463302, 0.44242477992667906, 0.45027983433914365, 0.45654985092748845, 0.5447193995815659, 0.587850359461022, 0.5479286276366925, 0.5932712354594567, 0.5281597245465506, 0.576369408068012, 0.5895215243182369, 0.6533175907468016, 0.5580757098786728, 0.1820234248487943, 0.10042102185966051, 0.1094458063176349, 0.18975380863799762, 0.2616899769940645, 0.2704787827836086, 0.14806365752002526, 0.16644564002240947, 0.15630378745456364, 0.3522612834402613, 0.34558762409589794, 0.30832940654158036, 0.3548320422232081, 0.36776095379850093, 0.36386973613151785, 0.32759195569500954, 0.36128975575133904, 0.3295039643056106, 0.7251247130914591, 0.7421906635710509, 0.7496270213295275, 0.7230575132501221, 0.7251778593971584, 0.755831239590211, 0.7223247260970481, 0.7243412267015438, 0.7346211765929873, 0.09425026936346892, 0.10579369271440497, 0.09773862024513658, 0.09069026109797595, 0.09873614125013352, 0.11727414971731487, 0.11161073672894872, 0.1053016798615024, 0.10926195124569171, 0.1668445090052374, 0.13100362643348562, 0.14861021678460906, 0.1597184884703442, 0.1703972777954268, 0.1536571464041484, 0.21274717756607497, 0.1577126553447179, 0.17778289692217875, 0.41067801371860546, 0.43734698273738726, 0.46862066207838815, 0.39221448766203615, 0.41783463202763027, 0.4328395179856588, 0.4438323548298344, 0.4822833501481897, 0.4826278681932962, 0.3433992730587172, 0.3441615990342961, 0.33987749587443383, 0.3503815404539863, 0.32444776412018095, 0.3406782878289202, 0.35588497881207926, 0.35848157334592856, 0.32881957612434887, 0.20687612780704456, 0.21476317805421452, 0.19118188338739683, 0.20720838202013414, 0.22689532950204405, 0.19706522310943897, 0.2048548004556734, 0.2102999473590339, 0.2048058029438542, 0.19922743430889167, 0.2137604528357705, 0.1964308170507908, 0.18742924286984874, 0.25777128882776845, 0.18928562755462075, 0.2023242721488182, 0.21173853655341168, 0.24001795766827494, 0.6726255830604337, 0.19796955755725243, 0.19251605048532705, 0.6089964619245598, 0.7234653051791861, 0.1786098411700403, 0.565304270779537, 0.17117816801315844, 0.18106701919554602, 0.6868763099660992, 0.31772736525156975, 0.710391785663764, 0.1979188806567178, 0.2012540407726643, 0.70839429766416, 0.6418310694978038, 0.15061184268873962, 0.2104471192807641, 0.1938161867954813, 0.1886171753911593, 0.21371843256686773, 0.18694601503491992, 0.2054013654456397, 0.18033810841782072, 0.1958685708189951, 0.20650369436260085, 0.1886939359094303, 0.07497160228750599, 0.08931752520059522, 0.08148000773387032, 0.07270439939139905, 0.08257615351081926, 0.08619801121010329, 0.08427141040888397, 0.07555033649169784, 0.08109924643008071]}, "mutation_prompt": null}
