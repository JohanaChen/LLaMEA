{"id": "62a8ba50-af58-4731-9c02-51a0b810d0d2", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        # Initialize population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.population_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # Differential Evolution step\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adaptive Local Search step\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n            for _ in range(int(self.population_size / 2)):  # Perform local search on half of the population\n                neighbor = best_solution + np.random.normal(0, 0.1, self.dim)\n                neighbor = np.clip(neighbor, self.lower_bound, self.upper_bound)\n                neighbor_fitness = func(neighbor)\n                evaluations += 1\n\n                if neighbor_fitness < fitness[best_idx]:\n                    population[best_idx] = neighbor\n                    fitness[best_idx] = neighbor_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combining DE and adaptive local search for efficient global and local exploration.", "configspace": "", "generation": 0, "fitness": 0.398240857654944, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.9198347253529762, 0.9088786600421298, 0.9228273894675216, 0.9068605793684393, 0.9122836882324433, 0.9169418406477188, 0.9049318228809999, 0.9108098468338963, 0.9142623571512642, 0.8150340755947332, 0.794191095664138, 0.8524452928354719, 0.8017955370991869, 0.7790455789541036, 0.8158792597346866, 0.8019442324115302, 0.8251270155693569, 0.82161104710422, 0.38805790903995296, 0.1508851235462968, 0.16145706787219838, 0.1462090293528061, 0.16472994533724672, 0.13883814172055808, 0.6116779352998307, 0.12228552878110555, 0.1455844919944177, 0.1646379761942388, 0.12472625147312033, 0.13407576824127243, 0.13127320892113836, 0.09473887141967297, 0.14047643468451465, 0.12369382356702951, 0.11826947725071824, 0.1537783928483374, 0.9612680504942167, 0.9683400884054443, 0.9611241271102999, 0.9340199122322848, 0.9598021044801991, 0.9328983510360987, 0.9472272826923537, 0.9421543127000247, 0.9468705942323271, 0.37300745301965, 0.5524251274772062, 0.37156209177138744, 0.5248364671930339, 0.6319515075429016, 0.5042174842539019, 0.3563882309020405, 0.5122260818826598, 0.3656286440206804, 0.8922799741916344, 0.8912152101515681, 0.2131118082166723, 0.8804112099515133, 0.8714471488892607, 0.905328499189231, 0.8896499473193287, 0.24064296493859083, 0.8815487668898307, 0.16593754888952605, 0.26175262165476665, 0.29677632735114934, 0.27829948837046325, 0.558358080525422, 0.2256099953148225, 0.24437092814538863, 0.14690300025610215, 0.1753400634284169, 0.20422987168271, 0.23000957027897428, 0.21563976234760462, 0.20451679998546102, 0.19326634212766192, 0.1682722461306535, 0.17345564273818415, 0.14833308024364655, 0.19505045846174773, 0.016874067646259983, 0.17638691536478512, 0.1605396968378684, 0.03157906062639526, 0.5080835030906694, 0.09361799473474752, 0.04507858925188735, 0.14536416294170662, 0.29998346550789845, 0.3769654495878182, 0.2522805616206035, 0.2800596014016141, 0.29301056712861717, 0.17201280147087805, 0.11255070681129187, 0.20816015978578384, 0.26141622133046993, 0.3058290570026061, 0.06202842275685472, 0.07928312908031132, 0.0922296464643072, 0.19933625583923198, 0.16457245039695367, 0.10053542404335225, 0.1455671419863791, 0.2565769214278144, 0.13771275019591755, 0.3999836043696757, 0.3530575152537838, 0.30104699129992973, 0.5403570772912771, 0.1787253532558698, 0.38267953569967783, 0.18015006936700395, 0.23631782328247075, 0.31342164230970115, 0.6342027708046705, 0.7018918265075464, 0.7278968955000538, 0.8555847623107139, 0.6485285556532736, 0.6822683037203292, 0.6552159405244959, 0.7418174336476537, 0.8138843983073728, 0.1730863400047139, 0.1225837470279848, 0.14540536898084666, 0.1649060965345971, 0.13472743574227042, 0.14718462663363407, 0.10458500743910315, 0.1282960958753232, 0.1411018465527062, 0.5295983272015339, 0.30926992628662087, 0.29586211391556483, 0.5870417761380942, 0.5867821025905431, 0.28297625970605644, 0.3491279244256913, 0.6360704535104058, 0.20672034793370497, 0.6106770124433774, 0.6509875266860434, 0.26145869999653437, 0.5736254382532202, 0.6285237649617094, 0.41932693399868903, 0.6318067605113261, 0.5962929136888724, 0.6411176090650368, 0.48396276041713426, 0.37414388229239937, 0.26162519417939656, 0.30972033743494776, 0.4279093852974848, 0.420598677155931, 0.35912060928817424, 0.5193023471979341, 0.22407270775397592, 0.24286524572725698, 0.2514905879085516, 0.1949920422808059, 0.20744248923833208, 0.198534953455482, 0.23133976242658383, 0.23844367789947396, 0.1877609431957762, 0.21902995642597622, 0.2485792633895083, 0.23535683994041556, 0.19400177920390738, 0.2405349908562998, 0.22997839023758015, 0.19008599070816734, 0.6594371095325822, 0.6588470236304858, 0.19813569145825638, 0.16885299192150738, 0.9394986415525189, 0.15497825703853418, 0.9013616076898563, 0.9090044180539715, 0.20176417734452934, 0.8981487032895988, 0.17029907205885753, 0.16884236724494517, 0.8581306727678621, 0.21252517481281485, 0.6580882981602496, 0.16939982839451695, 0.5403946458813611, 0.21238235608544886, 0.5566066827378309, 0.6081467532460225, 0.21131038806890523, 0.1970078241652633, 0.20210676318844267, 0.20878422272849329, 0.20436500158173354, 0.21407012185525742, 0.19263267124635886, 0.19370798184522253, 0.22028588103365876, 0.21004010448730837, 0.09751873932911204, 0.08462821514669616, 0.08586635408323673, 0.08958085124848292, 0.08560262142146335, 0.08410676909026693, 0.094070402896968, 0.08378353230129831, 0.10320714978744838]}, "mutation_prompt": null}
{"id": "dbc6fd38-3f98-45b5-96c6-5b14a71f65d8", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        # Initialize population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.population_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # Differential Evolution step\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adaptive Local Search step\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n            for _ in range(int(self.population_size / 2)):  # Perform local search on half of the population\n                neighbor = best_solution + np.random.normal(0, 0.1, self.dim)\n                neighbor = np.clip(neighbor, self.lower_bound, self.upper_bound)\n                neighbor_fitness = func(neighbor)\n                evaluations += 1\n\n                if neighbor_fitness < fitness[best_idx]:\n                    population[best_idx] = neighbor\n                    fitness[best_idx] = neighbor_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combining DE and adaptive local search for efficient global and local exploration.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "62a8ba50-af58-4731-9c02-51a0b810d0d2", "metadata": {"aucs": [0.9198347253529762, 0.9088786600421298, 0.9228273894675216, 0.9068605793684393, 0.9122836882324433, 0.9169418406477188, 0.9049318228809999, 0.9108098468338963, 0.9142623571512642, 0.8150340755947332, 0.794191095664138, 0.8524452928354719, 0.8017955370991869, 0.7790455789541036, 0.8158792597346866, 0.8019442324115302, 0.8251270155693569, 0.82161104710422, 0.38805790903995296, 0.1508851235462968, 0.16145706787219838, 0.1462090293528061, 0.16472994533724672, 0.13883814172055808, 0.6116779352998307, 0.12228552878110555, 0.1455844919944177, 0.1646379761942388, 0.12472625147312033, 0.13407576824127243, 0.13127320892113836, 0.09473887141967297, 0.14047643468451465, 0.12369382356702951, 0.11826947725071824, 0.1537783928483374, 0.9612680504942167, 0.9683400884054443, 0.9611241271102999, 0.9340199122322848, 0.9598021044801991, 0.9328983510360987, 0.9472272826923537, 0.9421543127000247, 0.9468705942323271, 0.37300745301965, 0.5524251274772062, 0.37156209177138744, 0.5248364671930339, 0.6319515075429016, 0.5042174842539019, 0.3563882309020405, 0.5122260818826598, 0.3656286440206804, 0.8922799741916344, 0.8912152101515681, 0.2131118082166723, 0.8804112099515133, 0.8714471488892607, 0.905328499189231, 0.8896499473193287, 0.24064296493859083, 0.8815487668898307, 0.16593754888952605, 0.26175262165476665, 0.29677632735114934, 0.27829948837046325, 0.558358080525422, 0.2256099953148225, 0.24437092814538863, 0.14690300025610215, 0.1753400634284169, 0.20422987168271, 0.23000957027897428, 0.21563976234760462, 0.20451679998546102, 0.19326634212766192, 0.1682722461306535, 0.17345564273818415, 0.14833308024364655, 0.19505045846174773, 0.016874067646259983, 0.17638691536478512, 0.1605396968378684, 0.03157906062639526, 0.5080835030906694, 0.09361799473474752, 0.04507858925188735, 0.14536416294170662, 0.29998346550789845, 0.3769654495878182, 0.2522805616206035, 0.2800596014016141, 0.29301056712861717, 0.17201280147087805, 0.11255070681129187, 0.20816015978578384, 0.26141622133046993, 0.3058290570026061, 0.06202842275685472, 0.07928312908031132, 0.0922296464643072, 0.19933625583923198, 0.16457245039695367, 0.10053542404335225, 0.1455671419863791, 0.2565769214278144, 0.13771275019591755, 0.3999836043696757, 0.3530575152537838, 0.30104699129992973, 0.5403570772912771, 0.1787253532558698, 0.38267953569967783, 0.18015006936700395, 0.23631782328247075, 0.31342164230970115, 0.6342027708046705, 0.7018918265075464, 0.7278968955000538, 0.8555847623107139, 0.6485285556532736, 0.6822683037203292, 0.6552159405244959, 0.7418174336476537, 0.8138843983073728, 0.1730863400047139, 0.1225837470279848, 0.14540536898084666, 0.1649060965345971, 0.13472743574227042, 0.14718462663363407, 0.10458500743910315, 0.1282960958753232, 0.1411018465527062, 0.5295983272015339, 0.30926992628662087, 0.29586211391556483, 0.5870417761380942, 0.5867821025905431, 0.28297625970605644, 0.3491279244256913, 0.6360704535104058, 0.20672034793370497, 0.6106770124433774, 0.6509875266860434, 0.26145869999653437, 0.5736254382532202, 0.6285237649617094, 0.41932693399868903, 0.6318067605113261, 0.5962929136888724, 0.6411176090650368, 0.48396276041713426, 0.37414388229239937, 0.26162519417939656, 0.30972033743494776, 0.4279093852974848, 0.420598677155931, 0.35912060928817424, 0.5193023471979341, 0.22407270775397592, 0.24286524572725698, 0.2514905879085516, 0.1949920422808059, 0.20744248923833208, 0.198534953455482, 0.23133976242658383, 0.23844367789947396, 0.1877609431957762, 0.21902995642597622, 0.2485792633895083, 0.23535683994041556, 0.19400177920390738, 0.2405349908562998, 0.22997839023758015, 0.19008599070816734, 0.6594371095325822, 0.6588470236304858, 0.19813569145825638, 0.16885299192150738, 0.9394986415525189, 0.15497825703853418, 0.9013616076898563, 0.9090044180539715, 0.20176417734452934, 0.8981487032895988, 0.17029907205885753, 0.16884236724494517, 0.8581306727678621, 0.21252517481281485, 0.6580882981602496, 0.16939982839451695, 0.5403946458813611, 0.21238235608544886, 0.5566066827378309, 0.6081467532460225, 0.21131038806890523, 0.1970078241652633, 0.20210676318844267, 0.20878422272849329, 0.20436500158173354, 0.21407012185525742, 0.19263267124635886, 0.19370798184522253, 0.22028588103365876, 0.21004010448730837, 0.09751873932911204, 0.08462821514669616, 0.08586635408323673, 0.08958085124848292, 0.08560262142146335, 0.08410676909026693, 0.094070402896968, 0.08378353230129831, 0.10320714978744838]}, "mutation_prompt": null}
