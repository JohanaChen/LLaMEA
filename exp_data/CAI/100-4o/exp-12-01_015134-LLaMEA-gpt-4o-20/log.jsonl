{"id": "29a3528c-8a14-4e6b-ac27-8d54f47b0b94", "solution": "import numpy as np\n\nclass HybridDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size based on the dimension\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n    \n    def evaluate(self, func):\n        for i in range(self.pop_size):\n            if np.isinf(self.fitness[i]):\n                self.fitness[i] = func(self.population[i])\n\n    def select_best(self):\n        return np.argmin(self.fitness), np.min(self.fitness)\n\n    def mutation(self, target_idx):\n        indices = [i for i in range(self.pop_size) if i != target_idx]\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n        return np.clip(mutant, *self.bounds)\n\n    def crossover(self, target, mutant):\n        trial = np.array([mutant[j] if np.random.rand() < self.CR else target[j] for j in range(self.dim)])\n        return trial\n\n    def cauchy_mutation(self, best):\n        scale = 0.2\n        return best + scale * np.random.standard_cauchy(self.dim)\n\n    def __call__(self, func):\n        evaluations = 0\n        self.evaluate(func)\n        evaluations += self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                mutant = self.mutation(i)\n                target = self.population[i]\n                trial = self.crossover(target, mutant)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n            best_idx, _ = self.select_best()\n            if evaluations < self.budget:\n                cauchy_trial = self.cauchy_mutation(self.population[best_idx])\n                cauchy_fitness = func(cauchy_trial)\n                evaluations += 1\n\n                if cauchy_fitness < self.fitness[best_idx]:\n                    self.population[best_idx] = cauchy_trial\n                    self.fitness[best_idx] = cauchy_fitness\n\n        best_idx, best_fitness = self.select_best()\n        return self.population[best_idx], best_fitness", "name": "HybridDEOptimizer", "description": "Hybrid Differential Evolution with Adaptive Cauchy Mutation for enhanced exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 0, "fitness": 0.2654405843377449, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6205495576029867, 0.6068901870013722, 0.6395766618475874, 0.6370789410767536, 0.6306837283840923, 0.6552086560813795, 0.6009260061334932, 0.6248463919775112, 0.5902332904752396, 0.4019579633328988, 0.3876270012936437, 0.39575642407900646, 0.3549207920262297, 0.40773542910032323, 0.4146365270390622, 0.36647273105211076, 0.3916168980562911, 0.3922159291420899, 0.0980527010906268, 0.08871797124078662, 0.11002580038458398, 0.10092698732354222, 0.09058323250033973, 0.10496953772489359, 0.09874880443389611, 0.09725319402580057, 0.12216717277123645, 0.09638858867673661, 0.09407488741716774, 0.08952628451134914, 0.09533259255187909, 0.092484943069293, 0.08536079754682147, 0.09382665725109995, 0.08568493123144105, 0.08158059823559982, 0.9336351750463354, 0.9184738526756802, 0.9559848304049667, 0.9149280800307915, 0.9473688223082459, 0.9596219623755056, 0.9477145669364485, 0.9839573481096998, 0.9708412829054112, 0.27703973158534123, 0.27996819621224645, 0.26947289251294504, 0.2694461861284493, 0.28213020153948787, 0.29142094488557435, 0.30507583210162525, 0.3041622192366856, 0.30169779183763257, 0.4577162134098163, 0.5066140327558514, 0.44124442018958354, 0.6480679621461138, 0.5236554815842194, 0.44662303136970827, 0.47260454765048443, 0.571737686570285, 0.47089075684460613, 0.21219304311192644, 0.15315648927504044, 0.20890973729135698, 0.21451145483091727, 0.22049533879629757, 0.23815548301417222, 0.1968242512199423, 0.20289671033895007, 0.2066403841666905, 0.15280161829125805, 0.11578703683631608, 0.16982913152417345, 0.20115112733771645, 0.18017987663789026, 0.1981724690741068, 0.18287525360939583, 0.1688055883960745, 0.1998971764716927, 0.09064970257653837, 0.12580215155355823, 0.12384865249752597, 0.12094984587057811, 0.11764340978897014, 0.14999012184093985, 0.1378663757585884, 0.14601115658801211, 0.13616913539563724, 0.2044049900607926, 0.2422074115102142, 0.2296009460007622, 0.2148412457485448, 0.24527133174855487, 0.24328328242563857, 0.2576817348092454, 0.2836597197202525, 0.24789159934088179, 0.013430992898437966, 0.019048005458184525, 0.04037580662926188, 0.03425964107523738, 0.026402848304079796, 0.040855992107018624, 0.031709874708325314, 0.04295736314917342, 0.020790763524435762, 0.14816527033572124, 0.16420693121638197, 0.16047755299364086, 0.13782506632171154, 0.17053265825541253, 0.1570804589568714, 0.15214514755034847, 0.14566548576777127, 0.13816045160972135, 0.48121480506938485, 0.45205066476353617, 0.4898941365445604, 0.47518497371822077, 0.4970553171057588, 0.48859562661295175, 0.4851307593022872, 0.45409825717650343, 0.4649080641966732, 0.08486034625452377, 0.08422216627908752, 0.09056168610203708, 0.08643683932445978, 0.09237562647188313, 0.08378282093092804, 0.10181231007315694, 0.0829136464455088, 0.08499182921898096, 0.1824582903652615, 0.16491909871780486, 0.13816071138545194, 0.16021631384337265, 0.27078248843716224, 0.1828554097875088, 0.1581142081731941, 0.17854246477689595, 0.13730899316039502, 0.2628341645087716, 0.2562977048551809, 0.27146869933917483, 0.24373638832444777, 0.2634208094206453, 0.2457679997589829, 0.26263763418033437, 0.2951663669189176, 0.29320105460291934, 0.20172449435746564, 0.21346503930601302, 0.20930311738390317, 0.19944136907253274, 0.21106068458709693, 0.19347137325528407, 0.20888253908158516, 0.22936592351165497, 0.21773691305788978, 0.17900598564215886, 0.17133606829846193, 0.1684171378947119, 0.17998567844481606, 0.20204697384759052, 0.1854562926242801, 0.1715512249171829, 0.1774576327035624, 0.18050908832976398, 0.18200096899036633, 0.18536277522056943, 0.1859684900732893, 0.175234816439642, 0.17739279384383388, 0.1960946956703471, 0.18778999182048806, 0.18062130510816732, 0.17621385867874562, 0.6636180373276455, 0.14992453571297615, 0.16026245303961983, 0.17477302637473457, 0.17276362407215706, 0.192255713147499, 0.4188202899973217, 0.2928578082559531, 0.6057958490654443, 0.36191591549100066, 0.5254792632387346, 0.45326931747053945, 0.3159813737026066, 0.25705765039621453, 0.18099552964404642, 0.2066704849930484, 0.6041565815979805, 0.20220595722461432, 0.18782646646813073, 0.18158696415484232, 0.19960763618904187, 0.18015582797927343, 0.18600849741195802, 0.17940560899009128, 0.18258222492023213, 0.18923726623201764, 0.20378842807231834, 0.059597293606442725, 0.0690864578517536, 0.07007616842495623, 0.08170132120846352, 0.06647334970549945, 0.07071644106703456, 0.0684848725330921, 0.07181432626229856, 0.0714596054512564]}, "mutation_prompt": null}
{"id": "a74b1544-ad12-4f8e-8902-1714a9e1a26c", "solution": "import numpy as np\n\nclass HybridDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size based on the dimension\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n    \n    def evaluate(self, func):\n        for i in range(self.pop_size):\n            if np.isinf(self.fitness[i]):\n                self.fitness[i] = func(self.population[i])\n\n    def select_best(self):\n        return np.argmin(self.fitness), np.min(self.fitness)\n\n    def mutation(self, target_idx):\n        indices = [i for i in range(self.pop_size) if i != target_idx]\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n        return np.clip(mutant, *self.bounds)\n\n    def crossover(self, target, mutant):\n        trial = np.array([mutant[j] if np.random.rand() < self.CR else target[j] for j in range(self.dim)])\n        return trial\n\n    def cauchy_mutation(self, best):\n        scale = 0.2\n        return best + scale * np.random.standard_cauchy(self.dim)\n\n    def __call__(self, func):\n        evaluations = 0\n        self.evaluate(func)\n        evaluations += self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                mutant = self.mutation(i)\n                target = self.population[i]\n                trial = self.crossover(target, mutant)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n            best_idx, _ = self.select_best()\n            if evaluations < self.budget:\n                cauchy_trial = self.cauchy_mutation(self.population[best_idx])\n                cauchy_fitness = func(cauchy_trial)\n                evaluations += 1\n\n                if cauchy_fitness < self.fitness[best_idx]:\n                    self.population[best_idx] = cauchy_trial\n                    self.fitness[best_idx] = cauchy_fitness\n\n        best_idx, best_fitness = self.select_best()\n        return self.population[best_idx], best_fitness", "name": "HybridDEOptimizer", "description": "Hybrid Differential Evolution with Adaptive Cauchy Mutation for enhanced exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "29a3528c-8a14-4e6b-ac27-8d54f47b0b94", "metadata": {"aucs": [0.6205495576029867, 0.6068901870013722, 0.6395766618475874, 0.6370789410767536, 0.6306837283840923, 0.6552086560813795, 0.6009260061334932, 0.6248463919775112, 0.5902332904752396, 0.4019579633328988, 0.3876270012936437, 0.39575642407900646, 0.3549207920262297, 0.40773542910032323, 0.4146365270390622, 0.36647273105211076, 0.3916168980562911, 0.3922159291420899, 0.0980527010906268, 0.08871797124078662, 0.11002580038458398, 0.10092698732354222, 0.09058323250033973, 0.10496953772489359, 0.09874880443389611, 0.09725319402580057, 0.12216717277123645, 0.09638858867673661, 0.09407488741716774, 0.08952628451134914, 0.09533259255187909, 0.092484943069293, 0.08536079754682147, 0.09382665725109995, 0.08568493123144105, 0.08158059823559982, 0.9336351750463354, 0.9184738526756802, 0.9559848304049667, 0.9149280800307915, 0.9473688223082459, 0.9596219623755056, 0.9477145669364485, 0.9839573481096998, 0.9708412829054112, 0.27703973158534123, 0.27996819621224645, 0.26947289251294504, 0.2694461861284493, 0.28213020153948787, 0.29142094488557435, 0.30507583210162525, 0.3041622192366856, 0.30169779183763257, 0.4577162134098163, 0.5066140327558514, 0.44124442018958354, 0.6480679621461138, 0.5236554815842194, 0.44662303136970827, 0.47260454765048443, 0.571737686570285, 0.47089075684460613, 0.21219304311192644, 0.15315648927504044, 0.20890973729135698, 0.21451145483091727, 0.22049533879629757, 0.23815548301417222, 0.1968242512199423, 0.20289671033895007, 0.2066403841666905, 0.15280161829125805, 0.11578703683631608, 0.16982913152417345, 0.20115112733771645, 0.18017987663789026, 0.1981724690741068, 0.18287525360939583, 0.1688055883960745, 0.1998971764716927, 0.09064970257653837, 0.12580215155355823, 0.12384865249752597, 0.12094984587057811, 0.11764340978897014, 0.14999012184093985, 0.1378663757585884, 0.14601115658801211, 0.13616913539563724, 0.2044049900607926, 0.2422074115102142, 0.2296009460007622, 0.2148412457485448, 0.24527133174855487, 0.24328328242563857, 0.2576817348092454, 0.2836597197202525, 0.24789159934088179, 0.013430992898437966, 0.019048005458184525, 0.04037580662926188, 0.03425964107523738, 0.026402848304079796, 0.040855992107018624, 0.031709874708325314, 0.04295736314917342, 0.020790763524435762, 0.14816527033572124, 0.16420693121638197, 0.16047755299364086, 0.13782506632171154, 0.17053265825541253, 0.1570804589568714, 0.15214514755034847, 0.14566548576777127, 0.13816045160972135, 0.48121480506938485, 0.45205066476353617, 0.4898941365445604, 0.47518497371822077, 0.4970553171057588, 0.48859562661295175, 0.4851307593022872, 0.45409825717650343, 0.4649080641966732, 0.08486034625452377, 0.08422216627908752, 0.09056168610203708, 0.08643683932445978, 0.09237562647188313, 0.08378282093092804, 0.10181231007315694, 0.0829136464455088, 0.08499182921898096, 0.1824582903652615, 0.16491909871780486, 0.13816071138545194, 0.16021631384337265, 0.27078248843716224, 0.1828554097875088, 0.1581142081731941, 0.17854246477689595, 0.13730899316039502, 0.2628341645087716, 0.2562977048551809, 0.27146869933917483, 0.24373638832444777, 0.2634208094206453, 0.2457679997589829, 0.26263763418033437, 0.2951663669189176, 0.29320105460291934, 0.20172449435746564, 0.21346503930601302, 0.20930311738390317, 0.19944136907253274, 0.21106068458709693, 0.19347137325528407, 0.20888253908158516, 0.22936592351165497, 0.21773691305788978, 0.17900598564215886, 0.17133606829846193, 0.1684171378947119, 0.17998567844481606, 0.20204697384759052, 0.1854562926242801, 0.1715512249171829, 0.1774576327035624, 0.18050908832976398, 0.18200096899036633, 0.18536277522056943, 0.1859684900732893, 0.175234816439642, 0.17739279384383388, 0.1960946956703471, 0.18778999182048806, 0.18062130510816732, 0.17621385867874562, 0.6636180373276455, 0.14992453571297615, 0.16026245303961983, 0.17477302637473457, 0.17276362407215706, 0.192255713147499, 0.4188202899973217, 0.2928578082559531, 0.6057958490654443, 0.36191591549100066, 0.5254792632387346, 0.45326931747053945, 0.3159813737026066, 0.25705765039621453, 0.18099552964404642, 0.2066704849930484, 0.6041565815979805, 0.20220595722461432, 0.18782646646813073, 0.18158696415484232, 0.19960763618904187, 0.18015582797927343, 0.18600849741195802, 0.17940560899009128, 0.18258222492023213, 0.18923726623201764, 0.20378842807231834, 0.059597293606442725, 0.0690864578517536, 0.07007616842495623, 0.08170132120846352, 0.06647334970549945, 0.07071644106703456, 0.0684848725330921, 0.07181432626229856, 0.0714596054512564]}, "mutation_prompt": null}
