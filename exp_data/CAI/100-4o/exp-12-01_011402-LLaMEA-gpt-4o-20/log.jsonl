{"id": "f7bc90d3-c440-4aa1-99a0-a044ddb06f8d", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(self.dim))\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.8\n        self.CR = 0.9\n    \n    def __call__(self, func):\n        np.random.seed()\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        velocity = np.zeros((self.population_size, self.dim))\n        personal_best_positions = population.copy()\n        personal_best_scores = np.full(self.population_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n        \n        eval_count = 0\n        \n        while eval_count < self.budget:\n            scores = np.array([func(ind) for ind in population])\n            eval_count += self.population_size\n            \n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = population[i].copy()\n                    \n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = population[i].copy()\n            \n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                trial_vector = np.where(\n                    np.random.rand(self.dim) < self.CR,\n                    a + self.F * (b - c),\n                    population[i]\n                )\n                trial_vector = np.clip(trial_vector, self.lb, self.ub)\n                trial_score = func(trial_vector)\n                eval_count += 1\n                \n                if trial_score < scores[i]:\n                    population[i] = trial_vector\n                    scores[i] = trial_score\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.w * velocity[i] +\n                               self.c1 * r1 * (personal_best_positions[i] - population[i]) +\n                               self.c2 * r2 * (global_best_position - population[i]))\n                population[i] += velocity[i]\n                population[i] = np.clip(population[i], self.lb, self.ub)\n                \n        return global_best_position, global_best_score", "name": "HybridDEPSO", "description": "A hybrid metaheuristic that combines Differential Evolution with a self-adaptive Particle Swarm Optimization for enhanced exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.2963924489843646, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7893137645321553, 0.8187473725142691, 0.8513999549536365, 0.7725291740523847, 0.820405198035568, 0.4265236391677417, 0.8370236050510558, 0.8778942416852856, 0.8550643635935131, 0.04044294802912829, 0.02904502772419093, 0.6723067649097887, 0.7124528807604762, 0.3544467363568413, 0.6337204678554154, 9.999999999998899e-05, 0.06511704089890413, 0.6297664571058462, 0.10993580682382142, 0.10670436280364137, 0.08233067011086492, 0.11339631035985553, 0.09159187898162913, 0.0953756290774549, 0.1199237627801153, 0.12823143917732627, 0.034614840723457, 0.10667521722966034, 0.11304282271022925, 0.06966921983888585, 0.0961701511660984, 0.10427996448187626, 0.05195970409818074, 0.14138375515310675, 0.08155834863092837, 0.022721560736006174, 0.9823957109929841, 0.09948155159976191, 0.9851327894131423, 0.926780685267387, 0.9896159707072201, 0.9362047319136657, 0.9816349531180131, 0.9921520551026283, 0.9694450155366976, 0.3115492137269089, 0.05976246823831011, 0.37027148883478456, 0.3433285984737541, 0.14831398317524747, 0.18798576865131067, 0.4461962457962523, 0.08765132545919918, 9.999999999998899e-05, 0.3700955990062117, 0.7587449042120799, 0.1707570613931677, 0.2046327758224099, 0.15424690488432113, 0.21146560021916316, 0.4297737582907244, 0.1258002494963183, 0.13037234640565276, 0.5042189779456036, 0.2272728557997411, 0.6747953068602597, 0.5398072788586886, 0.5204903225240279, 0.5498671011601075, 0.2320894914076892, 0.2912745822600916, 0.5960771735093472, 0.12675147424840727, 0.40951797804110135, 0.02025213575880347, 0.10668373517122343, 0.38006727663609063, 0.32108654757443944, 0.568760356891078, 0.4230546237356282, 0.5977600772052782, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.30758757940593107, 0.10092410230868609, 9.999999999998899e-05, 0.441780840640547, 0.3298017306287051, 0.46380799448028776, 0.13497531334225843, 0.17417446472899423, 0.044864737566616686, 0.25548682809064416, 0.5918246385101495, 0.3639460248412373, 0.013492942692596599, 0.16204049208825677, 0.6427258545778536, 0.16358230506909188, 0.046880183669073094, 0.06580084169400036, 0.4207544227579799, 0.13839991326657908, 0.07239818349625216, 0.22355347059201858, 0.27860759947408364, 0.09142674901711212, 0.26199338700181607, 0.2945177356139256, 0.2648792811755529, 0.31280597421629286, 0.0061841215672493455, 0.34713934672249747, 9.999999999998899e-05, 0.08111923595515713, 0.08103270804688856, 0.7042312976079582, 0.6604470053500533, 0.700767603384439, 0.20919212861725234, 0.7544175393422018, 0.670557126372133, 0.6928008926627738, 0.6025571458798159, 0.7605719890033599, 0.07636849392552525, 0.0839857667971986, 0.09159502283465959, 0.09250160592100476, 0.10776340190623901, 0.122445211361777, 0.10407058347466669, 0.0963885537386101, 0.1002378843876266, 0.17774940963154062, 0.15335733217507663, 0.14648340215779476, 0.16056983085459142, 0.17552542816713979, 0.19769033246325918, 0.137679224025817, 0.16434315352510587, 0.20047274251330605, 0.2652504275708728, 0.461779882391384, 0.3007082029386242, 0.3233472634254342, 0.2458412452535783, 0.260281942327953, 0.3654860233558248, 0.4594545637535544, 0.3706711962905668, 0.1785215552893249, 0.36782939645646073, 0.2689404373997645, 0.21524624244784185, 0.24636134099053697, 0.13779213550615754, 0.253386038085601, 0.17403528127885715, 0.253171190197906, 0.2056913140546427, 0.19406571348955493, 0.19024298891477254, 0.19575738596124115, 0.18740157138089075, 0.19248208179448356, 0.21352676389088643, 0.24360311862907535, 0.19100116558315106, 0.179780185640246, 0.18050478750177879, 0.2091050613873573, 0.20823331601258377, 0.1928735557850666, 0.19812469154643753, 0.18481918863231117, 0.19091588110648605, 0.21934048938216077, 0.1458034120893864, 0.183645848753353, 0.169887156850419, 0.17524241375092164, 0.16067546000489674, 0.18429392537513245, 0.16336977711413547, 0.11995921550777944, 0.9119778067653835, 0.7683578150131556, 0.873101140247989, 0.11010322876536771, 0.15619485462450122, 0.7574472155848595, 0.16859120883978773, 0.29261793664020486, 0.12169710321835758, 0.781282289547252, 0.1836214129639201, 0.18519663404908093, 0.19514510600575963, 0.18881018446050646, 0.19721959875658912, 0.176752432052402, 0.18202378523360407, 0.17892895273376164, 0.18613930581536153, 0.07905458499830442, 0.0786774570305171, 0.07736761343545406, 0.0756782052362841, 0.08254696304462683, 0.08210714932502472, 0.06606825540926198, 0.12412850637728812, 0.0681181545952313]}, "mutation_prompt": null}
{"id": "d04577e3-144b-40c1-90c7-d5721eb6cbf2", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(self.dim))\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.8\n        self.CR = 0.9\n    \n    def __call__(self, func):\n        np.random.seed()\n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        velocity = np.zeros((self.population_size, self.dim))\n        personal_best_positions = population.copy()\n        personal_best_scores = np.full(self.population_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n        \n        eval_count = 0\n        \n        while eval_count < self.budget:\n            scores = np.array([func(ind) for ind in population])\n            eval_count += self.population_size\n            \n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = population[i].copy()\n                    \n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = population[i].copy()\n            \n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                trial_vector = np.where(\n                    np.random.rand(self.dim) < self.CR,\n                    a + self.F * (b - c),\n                    population[i]\n                )\n                trial_vector = np.clip(trial_vector, self.lb, self.ub)\n                trial_score = func(trial_vector)\n                eval_count += 1\n                \n                if trial_score < scores[i]:\n                    population[i] = trial_vector\n                    scores[i] = trial_score\n                    \n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.w * velocity[i] +\n                               self.c1 * r1 * (personal_best_positions[i] - population[i]) +\n                               self.c2 * r2 * (global_best_position - population[i]))\n                population[i] += velocity[i]\n                population[i] = np.clip(population[i], self.lb, self.ub)\n                \n        return global_best_position, global_best_score", "name": "HybridDEPSO", "description": "A hybrid metaheuristic that combines Differential Evolution with a self-adaptive Particle Swarm Optimization for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f7bc90d3-c440-4aa1-99a0-a044ddb06f8d", "metadata": {"aucs": [0.7893137645321553, 0.8187473725142691, 0.8513999549536365, 0.7725291740523847, 0.820405198035568, 0.4265236391677417, 0.8370236050510558, 0.8778942416852856, 0.8550643635935131, 0.04044294802912829, 0.02904502772419093, 0.6723067649097887, 0.7124528807604762, 0.3544467363568413, 0.6337204678554154, 9.999999999998899e-05, 0.06511704089890413, 0.6297664571058462, 0.10993580682382142, 0.10670436280364137, 0.08233067011086492, 0.11339631035985553, 0.09159187898162913, 0.0953756290774549, 0.1199237627801153, 0.12823143917732627, 0.034614840723457, 0.10667521722966034, 0.11304282271022925, 0.06966921983888585, 0.0961701511660984, 0.10427996448187626, 0.05195970409818074, 0.14138375515310675, 0.08155834863092837, 0.022721560736006174, 0.9823957109929841, 0.09948155159976191, 0.9851327894131423, 0.926780685267387, 0.9896159707072201, 0.9362047319136657, 0.9816349531180131, 0.9921520551026283, 0.9694450155366976, 0.3115492137269089, 0.05976246823831011, 0.37027148883478456, 0.3433285984737541, 0.14831398317524747, 0.18798576865131067, 0.4461962457962523, 0.08765132545919918, 9.999999999998899e-05, 0.3700955990062117, 0.7587449042120799, 0.1707570613931677, 0.2046327758224099, 0.15424690488432113, 0.21146560021916316, 0.4297737582907244, 0.1258002494963183, 0.13037234640565276, 0.5042189779456036, 0.2272728557997411, 0.6747953068602597, 0.5398072788586886, 0.5204903225240279, 0.5498671011601075, 0.2320894914076892, 0.2912745822600916, 0.5960771735093472, 0.12675147424840727, 0.40951797804110135, 0.02025213575880347, 0.10668373517122343, 0.38006727663609063, 0.32108654757443944, 0.568760356891078, 0.4230546237356282, 0.5977600772052782, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.30758757940593107, 0.10092410230868609, 9.999999999998899e-05, 0.441780840640547, 0.3298017306287051, 0.46380799448028776, 0.13497531334225843, 0.17417446472899423, 0.044864737566616686, 0.25548682809064416, 0.5918246385101495, 0.3639460248412373, 0.013492942692596599, 0.16204049208825677, 0.6427258545778536, 0.16358230506909188, 0.046880183669073094, 0.06580084169400036, 0.4207544227579799, 0.13839991326657908, 0.07239818349625216, 0.22355347059201858, 0.27860759947408364, 0.09142674901711212, 0.26199338700181607, 0.2945177356139256, 0.2648792811755529, 0.31280597421629286, 0.0061841215672493455, 0.34713934672249747, 9.999999999998899e-05, 0.08111923595515713, 0.08103270804688856, 0.7042312976079582, 0.6604470053500533, 0.700767603384439, 0.20919212861725234, 0.7544175393422018, 0.670557126372133, 0.6928008926627738, 0.6025571458798159, 0.7605719890033599, 0.07636849392552525, 0.0839857667971986, 0.09159502283465959, 0.09250160592100476, 0.10776340190623901, 0.122445211361777, 0.10407058347466669, 0.0963885537386101, 0.1002378843876266, 0.17774940963154062, 0.15335733217507663, 0.14648340215779476, 0.16056983085459142, 0.17552542816713979, 0.19769033246325918, 0.137679224025817, 0.16434315352510587, 0.20047274251330605, 0.2652504275708728, 0.461779882391384, 0.3007082029386242, 0.3233472634254342, 0.2458412452535783, 0.260281942327953, 0.3654860233558248, 0.4594545637535544, 0.3706711962905668, 0.1785215552893249, 0.36782939645646073, 0.2689404373997645, 0.21524624244784185, 0.24636134099053697, 0.13779213550615754, 0.253386038085601, 0.17403528127885715, 0.253171190197906, 0.2056913140546427, 0.19406571348955493, 0.19024298891477254, 0.19575738596124115, 0.18740157138089075, 0.19248208179448356, 0.21352676389088643, 0.24360311862907535, 0.19100116558315106, 0.179780185640246, 0.18050478750177879, 0.2091050613873573, 0.20823331601258377, 0.1928735557850666, 0.19812469154643753, 0.18481918863231117, 0.19091588110648605, 0.21934048938216077, 0.1458034120893864, 0.183645848753353, 0.169887156850419, 0.17524241375092164, 0.16067546000489674, 0.18429392537513245, 0.16336977711413547, 0.11995921550777944, 0.9119778067653835, 0.7683578150131556, 0.873101140247989, 0.11010322876536771, 0.15619485462450122, 0.7574472155848595, 0.16859120883978773, 0.29261793664020486, 0.12169710321835758, 0.781282289547252, 0.1836214129639201, 0.18519663404908093, 0.19514510600575963, 0.18881018446050646, 0.19721959875658912, 0.176752432052402, 0.18202378523360407, 0.17892895273376164, 0.18613930581536153, 0.07905458499830442, 0.0786774570305171, 0.07736761343545406, 0.0756782052362841, 0.08254696304462683, 0.08210714932502472, 0.06606825540926198, 0.12412850637728812, 0.0681181545952313]}, "mutation_prompt": null}
