{"id": "9a50c4b9-e11b-4b68-860e-d3d97639d019", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocity = np.random.uniform(-1, 1, self.population.shape)\n        self.best_positions = self.population.copy()\n        self.best_fitness = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_fitness = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        \n        while evaluations < self.budget:\n            # Evaluate fitness\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                fitness = func(self.population[i])\n                evaluations += 1\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.population[i].copy()\n                if fitness < self.global_best_fitness:\n                    self.global_best_fitness = fitness\n                    self.global_best_position = self.population[i].copy()\n\n            # Update velocities and positions using a DE/PSO hybrid approach\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                inertia_component = 0.5 * self.velocity[i]\n                cognitive_component = 1.5 * r1 * (self.best_positions[i] - self.population[i])\n                social_component = 1.5 * r2 * (self.global_best_position - self.population[i])\n                \n                # Differential evolution mutation step\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                while i in idxs:\n                    idxs = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = self.population[idxs[0]] + 0.8 * (self.population[idxs[1]] - self.population[idxs[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Combine DE mutant with PSO velocity update\n                if np.random.rand() < 0.5:\n                    self.velocity[i] = inertia_component + cognitive_component + social_component\n                else:\n                    self.velocity[i] = mutant_vector - self.population[i]\n                \n                self.population[i] = self.population[i] + self.velocity[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_fitness", "name": "HybridDEPSO", "description": "A hybrid differential evolution and particle swarm optimization algorithm leveraging exploration and exploitation balance for black box optimization.", "configspace": "", "generation": 0, "fitness": 0.18474722191363602, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.3488071643936794, 0.3817627049625979, 0.3650050231688561, 0.3758526126521119, 0.340978372477566, 0.37143713067779704, 0.3863386347116815, 0.37787457528077406, 0.35999682458317495, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002581455636825547, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01201461980612517, 0.07818888299364357, 0.07809598712858601, 0.08983312230248597, 0.09567952702735161, 0.08655424831961978, 0.10259714616465843, 0.0883816891853152, 0.09426195970973295, 0.0664107511973141, 0.07230890010417002, 0.06231155983703862, 0.0584715793857844, 0.07992504957277813, 0.05434479508117618, 0.07409145400668626, 0.07045360728119143, 0.07545595206795008, 0.08558145080938795, 0.9925712250574309, 0.9726503566182229, 0.9925401706574378, 0.9876492506867786, 0.9883081211646049, 0.9874174555421089, 0.9870249648182272, 0.9874512871734112, 0.9912455298852196, 0.05953588827006717, 0.19576263041467923, 0.18408888202954654, 0.19156458726092795, 0.21156745174735847, 0.18589639287004167, 0.1331164372005743, 0.18987549448615604, 0.18302141162817331, 0.21195909954086856, 0.3047541325213311, 0.30097121942823146, 0.18762315593535928, 0.2565899317601561, 0.20590595284187974, 0.2072928440287939, 0.2017286806742591, 0.16851295868882588, 0.08397270227258247, 0.10489330977117262, 0.17480548678568741, 0.11680261439881834, 0.13391030839947182, 0.08842869799508768, 0.1261021347826521, 0.1383967243730807, 0.13170528740923815, 0.12987613644471552, 0.10696061486739294, 0.11791336868763103, 0.11514060600130838, 0.12287782938820002, 0.11453528457463613, 0.11310840054261828, 0.12777663499820247, 0.10205232864841995, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00046341052552556494, 9.999999999998899e-05, 9.999999999998899e-05, 0.007669316879070909, 9.999999999998899e-05, 0.06893107624236805, 0.05103847331205802, 0.09571343580059055, 0.03925806293982226, 0.08193163632045164, 0.11733588287815488, 0.15454268447814734, 0.05883996481210252, 0.07027929314231185, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024237706000163617, 0.06960689115322694, 0.09588355265904613, 0.0054761539660881375, 0.09128789958755734, 0.002574338070509441, 0.03614309696219775, 0.041127895940131554, 0.04606817257540574, 0.34649347175157064, 0.34344903845053887, 0.34015427108572505, 0.36911141375577394, 0.34352421243466913, 0.3487472366209041, 0.3256508893625162, 0.32265512551991515, 0.34743377372031925, 0.0732613706630415, 0.10866759944231108, 0.09152225910805611, 0.07479707013875647, 0.09554717861295448, 0.10191424860950082, 0.0775882972364148, 0.08758365398080226, 0.07873502509746633, 0.19574186357631174, 0.17905902506161964, 0.15374325375803788, 0.15226084248961747, 0.17461932895377397, 0.12624965763232898, 0.14965950885767976, 0.17239712842371646, 0.15175722547513926, 0.229544284178832, 0.24227659031023374, 0.2572354293938639, 0.22180513599224505, 0.2532659491474154, 0.239364409118073, 0.21273689638049842, 0.23368405219398258, 0.24449885084187517, 0.1867402381076837, 0.17765446045994815, 0.12450224018591038, 0.17175888024119124, 0.1556243522272771, 0.15860707422815812, 0.1575200112812023, 0.20068188027074285, 0.1477247642918923, 0.20017606694332057, 0.18428227004558562, 0.19284386311579715, 0.22370603866236882, 0.17726777169380126, 0.2167519026367174, 0.19418942868602374, 0.19577750891234236, 0.17769972578482107, 0.17352366896658422, 0.19271861005222257, 0.17568535272842944, 0.17333093005068567, 0.17919985424041063, 0.17963512167241769, 0.16881942102610226, 0.1841687521164832, 0.17498336679370163, 0.5086905050802848, 0.16804227103136782, 0.11506618399678703, 0.4950183938925308, 0.19046630385687746, 0.19589416539352866, 0.3566360978836336, 0.16833729853561796, 0.15241722650300582, 0.42913715103082994, 0.1649469835161017, 0.3534948974049106, 0.2005511336793525, 0.16419581714617182, 0.3396224807517231, 0.2951300764611011, 0.2069108649722241, 0.20400637425172252, 0.21194669669126276, 0.1892628499114225, 0.18063064072353774, 0.19894684210653057, 0.1900816432706145, 0.1855363514414078, 0.18072323719106786, 0.1829976146440172, 0.1899800588435917, 0.07868709667194995, 0.0772598626455252, 0.0717854588525546, 0.07396720491905762, 0.08113287101259126, 0.062446231773183536, 0.06195858008778965, 0.06389228896512178, 0.09110134736550535]}, "mutation_prompt": null}
{"id": "b6d7bfe0-181c-444f-a5b6-e9a114d95822", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocity = np.random.uniform(-1, 1, self.population.shape)\n        self.best_positions = self.population.copy()\n        self.best_fitness = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_fitness = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        \n        while evaluations < self.budget:\n            # Evaluate fitness\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                fitness = func(self.population[i])\n                evaluations += 1\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.population[i].copy()\n                if fitness < self.global_best_fitness:\n                    self.global_best_fitness = fitness\n                    self.global_best_position = self.population[i].copy()\n\n            # Update velocities and positions using a DE/PSO hybrid approach\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                inertia_component = 0.5 * self.velocity[i]\n                cognitive_component = 1.5 * r1 * (self.best_positions[i] - self.population[i])\n                social_component = 1.5 * r2 * (self.global_best_position - self.population[i])\n                \n                # Differential evolution mutation step\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                while i in idxs:\n                    idxs = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = self.population[idxs[0]] + 0.8 * (self.population[idxs[1]] - self.population[idxs[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Combine DE mutant with PSO velocity update\n                if np.random.rand() < 0.5:\n                    self.velocity[i] = inertia_component + cognitive_component + social_component\n                else:\n                    self.velocity[i] = mutant_vector - self.population[i]\n                \n                self.population[i] = self.population[i] + self.velocity[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_fitness", "name": "HybridDEPSO", "description": "A hybrid differential evolution and particle swarm optimization algorithm leveraging exploration and exploitation balance for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9a50c4b9-e11b-4b68-860e-d3d97639d019", "metadata": {"aucs": [0.3488071643936794, 0.3817627049625979, 0.3650050231688561, 0.3758526126521119, 0.340978372477566, 0.37143713067779704, 0.3863386347116815, 0.37787457528077406, 0.35999682458317495, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002581455636825547, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01201461980612517, 0.07818888299364357, 0.07809598712858601, 0.08983312230248597, 0.09567952702735161, 0.08655424831961978, 0.10259714616465843, 0.0883816891853152, 0.09426195970973295, 0.0664107511973141, 0.07230890010417002, 0.06231155983703862, 0.0584715793857844, 0.07992504957277813, 0.05434479508117618, 0.07409145400668626, 0.07045360728119143, 0.07545595206795008, 0.08558145080938795, 0.9925712250574309, 0.9726503566182229, 0.9925401706574378, 0.9876492506867786, 0.9883081211646049, 0.9874174555421089, 0.9870249648182272, 0.9874512871734112, 0.9912455298852196, 0.05953588827006717, 0.19576263041467923, 0.18408888202954654, 0.19156458726092795, 0.21156745174735847, 0.18589639287004167, 0.1331164372005743, 0.18987549448615604, 0.18302141162817331, 0.21195909954086856, 0.3047541325213311, 0.30097121942823146, 0.18762315593535928, 0.2565899317601561, 0.20590595284187974, 0.2072928440287939, 0.2017286806742591, 0.16851295868882588, 0.08397270227258247, 0.10489330977117262, 0.17480548678568741, 0.11680261439881834, 0.13391030839947182, 0.08842869799508768, 0.1261021347826521, 0.1383967243730807, 0.13170528740923815, 0.12987613644471552, 0.10696061486739294, 0.11791336868763103, 0.11514060600130838, 0.12287782938820002, 0.11453528457463613, 0.11310840054261828, 0.12777663499820247, 0.10205232864841995, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00046341052552556494, 9.999999999998899e-05, 9.999999999998899e-05, 0.007669316879070909, 9.999999999998899e-05, 0.06893107624236805, 0.05103847331205802, 0.09571343580059055, 0.03925806293982226, 0.08193163632045164, 0.11733588287815488, 0.15454268447814734, 0.05883996481210252, 0.07027929314231185, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024237706000163617, 0.06960689115322694, 0.09588355265904613, 0.0054761539660881375, 0.09128789958755734, 0.002574338070509441, 0.03614309696219775, 0.041127895940131554, 0.04606817257540574, 0.34649347175157064, 0.34344903845053887, 0.34015427108572505, 0.36911141375577394, 0.34352421243466913, 0.3487472366209041, 0.3256508893625162, 0.32265512551991515, 0.34743377372031925, 0.0732613706630415, 0.10866759944231108, 0.09152225910805611, 0.07479707013875647, 0.09554717861295448, 0.10191424860950082, 0.0775882972364148, 0.08758365398080226, 0.07873502509746633, 0.19574186357631174, 0.17905902506161964, 0.15374325375803788, 0.15226084248961747, 0.17461932895377397, 0.12624965763232898, 0.14965950885767976, 0.17239712842371646, 0.15175722547513926, 0.229544284178832, 0.24227659031023374, 0.2572354293938639, 0.22180513599224505, 0.2532659491474154, 0.239364409118073, 0.21273689638049842, 0.23368405219398258, 0.24449885084187517, 0.1867402381076837, 0.17765446045994815, 0.12450224018591038, 0.17175888024119124, 0.1556243522272771, 0.15860707422815812, 0.1575200112812023, 0.20068188027074285, 0.1477247642918923, 0.20017606694332057, 0.18428227004558562, 0.19284386311579715, 0.22370603866236882, 0.17726777169380126, 0.2167519026367174, 0.19418942868602374, 0.19577750891234236, 0.17769972578482107, 0.17352366896658422, 0.19271861005222257, 0.17568535272842944, 0.17333093005068567, 0.17919985424041063, 0.17963512167241769, 0.16881942102610226, 0.1841687521164832, 0.17498336679370163, 0.5086905050802848, 0.16804227103136782, 0.11506618399678703, 0.4950183938925308, 0.19046630385687746, 0.19589416539352866, 0.3566360978836336, 0.16833729853561796, 0.15241722650300582, 0.42913715103082994, 0.1649469835161017, 0.3534948974049106, 0.2005511336793525, 0.16419581714617182, 0.3396224807517231, 0.2951300764611011, 0.2069108649722241, 0.20400637425172252, 0.21194669669126276, 0.1892628499114225, 0.18063064072353774, 0.19894684210653057, 0.1900816432706145, 0.1855363514414078, 0.18072323719106786, 0.1829976146440172, 0.1899800588435917, 0.07868709667194995, 0.0772598626455252, 0.0717854588525546, 0.07396720491905762, 0.08113287101259126, 0.062446231773183536, 0.06195858008778965, 0.06389228896512178, 0.09110134736550535]}, "mutation_prompt": null}
