{"id": "130565a8-01a1-4c47-b4d3-1c58c38d2947", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = max(5, 10 * dim)\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.8\n        self.CR = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, dim))\n        self.velocities = np.zeros((self.pop_size, dim))\n        self.best_positions = np.copy(self.population)\n        self.best_fitness = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_fitness = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.population[i])\n                eval_count += 1\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.population[i]\n                if fitness < self.global_best_fitness:\n                    self.global_best_fitness = fitness\n                    self.global_best_position = self.population[i]\n            \n            diversity = np.mean(np.std(self.population, axis=0))\n            if diversity < 1e-3:  # Switch to DE if diversity is too low\n                for i in range(self.pop_size):\n                    indices = list(range(self.pop_size))\n                    indices.remove(i)\n                    a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                    trial = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                    mask = np.random.rand(self.dim) < self.CR\n                    if not np.any(mask):\n                        mask[np.random.randint(0, self.dim)] = True\n                    self.population[i] = np.where(mask, trial, self.population[i])\n            else:  # Use PSO update\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                self.velocities = (self.w * self.velocities +\n                                   self.c1 * r1 * (self.best_positions - self.population) +\n                                   self.c2 * r2 * (self.global_best_position - self.population))\n                self.population = np.clip(self.population + self.velocities, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_position, self.global_best_fitness", "name": "HybridPSO_DE", "description": "A hybrid adaptive particle swarm optimization with differential evolution that dynamically adjusts its strategy based on population diversity.", "configspace": "", "generation": 0, "fitness": 0.2986149960775248, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8237119778529223, 0.8190071551131716, 0.8161486446969547, 0.813246517973468, 0.8206336450413332, 0.8394825469837809, 0.8097001221194469, 0.8138041204134596, 0.8088238282820258, 0.5849240897809865, 0.5688181493403056, 0.5103415323357922, 0.5748321345656167, 0.49113795153332307, 0.43622987435127203, 0.6100175259601868, 0.6013847470722546, 0.027359531847023888, 0.22470010910584692, 0.19680712791850852, 0.16928385359637144, 0.14800765618102196, 0.2928833329640306, 0.1587802342096709, 0.15246967568570036, 0.16727242371412254, 0.30829864276694574, 0.10911265725756225, 0.13899044283982498, 0.13996816817556734, 0.11888095812965005, 0.17142989946946785, 0.13251826447241888, 0.14150601805741714, 0.1363465557839536, 0.15745856635785527, 0.9815541643434469, 0.9816430030986963, 0.9858067766480593, 0.9732612785648711, 0.9836267393281303, 0.976853701857992, 0.9864939455692994, 0.98182361585878, 0.9798083782293097, 0.5565512101780105, 0.5560038067317918, 0.05843083643030844, 0.520809861736846, 0.5627946976477507, 0.31522390118256693, 0.5598017443734731, 0.5726276599983262, 0.5414576555248138, 0.21730863585497506, 0.23697794240102732, 0.21413097164269912, 0.2763461615614867, 0.21139535526947262, 0.37678275526822214, 0.12513949242398192, 0.23431258963324442, 0.347217139905452, 0.19792150321388458, 0.12357194340845434, 0.182617011032022, 0.10008768736461315, 0.20119494780069747, 0.12355700655470558, 0.22212035966981436, 0.1890493398645282, 0.22106928793235625, 0.20482119582009517, 0.20900461935099823, 0.203831848493514, 0.21267172546049806, 0.22508437117289737, 0.22090416163334736, 0.23912985211491644, 9.999999999998899e-05, 0.24514167629785122, 9.999999999998899e-05, 0.05055754484242936, 0.005403534174699964, 0.0002766117702769355, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04474679364633738, 0.06733198453823785, 0.1397007228602679, 0.03156379254397812, 0.06748381200436815, 0.10152324788613931, 0.002870287101407354, 0.02060600218970088, 0.06373579161932552, 0.09537469689941702, 0.05412660525857449, 0.04403766950875432, 0.035769924910425965, 0.17998809385989023, 0.07081160218460392, 0.08498554950391513, 0.09323925035426417, 0.09105910944355655, 0.08823881447108872, 0.09119124789447597, 0.14180586026361253, 0.04241099988449426, 0.19089706762902547, 0.15464244101276237, 0.06443709012322885, 0.02794511149072787, 0.19459868213887044, 0.06030915098228051, 0.0835283379415197, 0.5298975430845232, 0.5289732541783849, 0.5321241519090486, 0.5024897959484762, 0.5788153008730536, 0.20845567367848905, 0.5632116215558074, 0.5339627821585731, 0.5557662903225853, 0.09553920859899134, 0.08743832187322098, 0.1422802501040875, 0.08518018106414915, 0.0696319004245799, 0.1471267643501436, 0.07945806968850888, 0.16378054033373868, 0.13663920808872387, 0.17278629098908282, 0.23444689131663132, 0.23090155764742437, 0.2504803385741494, 0.16144367567163775, 0.4212306502719738, 0.2702820403054116, 0.47026630414135884, 0.23212693817212726, 0.4248751686423521, 0.41050978178628883, 0.2904155292526973, 0.4251094641079961, 0.3277579395922965, 0.27706348044825624, 0.4671308443494744, 0.4927532907144119, 0.4819599664574947, 0.234515247777638, 0.24215385786971844, 0.2480272986209182, 0.25860215472779646, 0.22090012426686234, 0.251451922510855, 0.2095378151957521, 0.2794127921250049, 0.22472231629083284, 0.21379168916839497, 0.15262098367389754, 0.20189379175917888, 0.2231267566584304, 0.1746354919803098, 0.2232449937005394, 0.5314849272712636, 0.17893859478672658, 0.2096831331930391, 0.23643458341182266, 0.21072712368934476, 0.24280815970524083, 0.2225033663828705, 0.21253698372507646, 0.24936142998658495, 0.5900414457999907, 0.19637787914527338, 0.18477052496055646, 0.8631652795961183, 0.16899845306351802, 0.15339730542478425, 0.8784322167490749, 0.20039228354765581, 0.16540027693011183, 0.14261778665070746, 0.17142312938923931, 0.9040069391756804, 0.7158577404561395, 0.2116992673795316, 0.41644386210250794, 0.5455304807147796, 0.4497689528665877, 0.153717603459673, 0.678951588333558, 0.15625805717891905, 0.6698371320566192, 0.21472450553186906, 0.18981199257287873, 0.20762584212599167, 0.18855828225052096, 0.21942894818459813, 0.21974311325656737, 0.18513895648836565, 0.19219810279764393, 0.20822995913606224, 0.10620362208395506, 0.0976178035603702, 0.09716736496117973, 0.08656722171173936, 0.10202608092235699, 0.08097821128018146, 0.10962486281959449, 0.08869656504496048, 0.09800429255110954]}, "mutation_prompt": null}
{"id": "a1834fff-601e-4950-97fb-72128a870e12", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = max(5, 10 * dim)\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.9  # Adaptive inertia weight starts from 0.9\n        self.F = 0.8\n        self.CR = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, dim))\n        self.velocities = np.zeros((self.pop_size, dim))\n        self.best_positions = np.copy(self.population)\n        self.best_fitness = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_fitness = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        improvement_counter = 0\n        while eval_count < self.budget:\n            previous_global_best_fitness = self.global_best_fitness\n            for i in range(self.pop_size):\n                fitness = func(self.population[i])\n                eval_count += 1\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.population[i]\n                if fitness < self.global_best_fitness:\n                    self.global_best_fitness = fitness\n                    self.global_best_position = self.population[i]\n            \n            # Adaptive parameters based on improvement rate\n            if self.global_best_fitness < previous_global_best_fitness:\n                improvement_counter += 1\n            self.w = 0.9 - (0.5 * (improvement_counter / (eval_count / self.pop_size + 1)))\n\n            diversity = np.mean(np.std(self.population, axis=0))\n            if diversity < 1e-3:  # Switch to DE if diversity is too low\n                adaptive_F = self.F + 0.1 * (improvement_counter / (eval_count / self.pop_size + 1))\n                adaptive_CR = self.CR - 0.1 * (improvement_counter / (eval_count / self.pop_size + 1))\n                for i in range(self.pop_size):\n                    indices = list(range(self.pop_size))\n                    indices.remove(i)\n                    a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                    trial = np.clip(a + adaptive_F * (b - c), self.lower_bound, self.upper_bound)\n                    mask = np.random.rand(self.dim) < adaptive_CR\n                    if not np.any(mask):\n                        mask[np.random.randint(0, self.dim)] = True\n                    self.population[i] = np.where(mask, trial, self.population[i])\n            else:  # Use PSO update\n                r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n                self.velocities = (self.w * self.velocities +\n                                   self.c1 * r1 * (self.best_positions - self.population) +\n                                   self.c2 * r2 * (self.global_best_position - self.population))\n                self.population = np.clip(self.population + self.velocities, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_position, self.global_best_fitness", "name": "HybridPSO_DE", "description": "Enhanced HybridPSO_DE with adaptive inertia weight and adaptive differential evolution parameters based on fitness improvement rate.", "configspace": "", "generation": 1, "fitness": 0.3091032007021596, "feedback": "", "error": "", "parent_id": "130565a8-01a1-4c47-b4d3-1c58c38d2947", "metadata": {"aucs": [0.8842057042301372, 0.8546610573562076, 0.8811926395197156, 0.8898153656457459, 0.8945264143774744, 0.8965978468796554, 0.8927306998517945, 0.8912026926667062, 0.9004236540535326, 0.632789414167328, 0.6011463837878044, 0.5893510973727301, 0.7427951791164906, 0.6586267163901014, 0.6430394987925698, 0.5623277026797497, 0.5710946920841337, 0.6416286042513337, 0.12756435691631574, 0.17102648135612686, 0.1614202208499108, 0.48482532287618074, 0.16845580082413703, 0.1487905083961215, 0.2940370394597752, 0.12562091786871354, 0.1420968271109626, 0.1460329304056167, 0.08868723180495086, 0.1280433649545214, 0.1021187674612758, 0.11390970541068235, 0.1645785834775022, 0.1305109820843554, 0.14690472719446646, 0.13106511702233403, 0.977345463882188, 0.981668293635957, 0.9855908010908108, 0.9733934186064469, 0.9816039539687509, 0.9686131811536385, 0.98645201597092, 0.9778584958788689, 0.9796783761264533, 0.6082100087450242, 0.6588048191558147, 0.3065434918233082, 0.6726161256927574, 0.15161578551595645, 0.15310155993258645, 0.12648274336372978, 0.7298595345888317, 0.772644669203254, 0.17244093496199275, 0.23076894662013026, 0.7405724125320012, 0.2141077563714051, 0.2791416306005329, 0.3422702809807947, 0.23368745133260294, 0.2385876726267272, 0.7165561285295692, 0.22271250685843236, 0.13972124878651482, 0.21984436103555105, 0.10126847577072784, 0.1939092055938848, 0.12615298924936102, 0.22288237427368918, 0.22839519011106657, 0.20147935467493105, 0.23297045433581431, 0.24204443025052003, 0.20911965412141453, 0.21653281960142945, 0.24485865974959065, 0.21244929010321534, 0.25723341038098657, 9.999999999998899e-05, 0.22855070297663915, 9.999999999998899e-05, 0.029009623935198348, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01559577331744133, 0.09053558165895315, 0.05500305836196262, 0.06758409336871396, 0.09230056869994618, 0.08245005218826806, 0.028278073620581434, 0.04282305493079075, 0.05201958388611094, 0.05646118387019594, 0.03716631668400516, 9.999999999998899e-05, 0.03509625350900203, 0.10829831957711034, 0.07838584127520787, 0.08576721750125216, 0.09311571722020195, 0.10387083759164184, 0.16383808184745363, 0.0743371759105883, 0.09041078057763685, 0.16373938426305157, 0.10191670948354425, 0.04139076853293011, 0.1401476976036793, 0.006099471117822719, 0.37826904275867, 0.20672895097976474, 0.08236706779334368, 0.5946816922271474, 0.572188474623577, 0.5665581324168151, 0.20904740428243207, 0.5878189516348926, 0.5392153912163196, 0.7091332228673337, 0.5671333376714301, 0.6083457271230389, 0.12500901294770228, 0.07381861135852164, 0.0822404903558529, 0.10430032650343424, 0.09015796876374294, 0.13862683223686922, 0.08433551230508218, 0.15087169892615548, 0.14622790493523774, 0.16319725546405606, 0.1855903403177923, 0.19721034114627534, 0.24197498059302347, 0.2602712410015101, 0.18513513809249293, 0.2701091572577863, 0.13968510433454306, 0.23388571437200967, 0.47087878168311004, 0.4723951336695952, 0.3146266486273481, 0.4744108107534595, 0.4785576618486094, 0.32530018465576427, 0.5230722968670909, 0.3773870545744654, 0.5044008716191277, 0.3604891280640964, 0.22237128644795412, 0.31421845355326594, 0.21811930988271244, 0.22823397840433413, 0.2854790820710461, 0.24815767789281085, 0.27830150484065486, 0.23839484575199843, 0.21154567324331897, 0.14949432428589626, 0.18872198182818034, 0.19391262095658557, 0.1901862252925839, 0.23230954193431552, 0.21498447477888338, 0.19859164417352304, 0.19386163562457237, 0.20493550207811218, 0.1921736598613164, 0.2380765806765608, 0.22518518081030348, 0.22189811076982724, 0.2259816476661245, 0.542151848342382, 0.2226021611562201, 0.19529873732978464, 0.18627687826710004, 0.15788196911286412, 0.1533357412633004, 0.9164004687868184, 0.20153656739293813, 0.2003974750148405, 0.14276128033589086, 0.16510627090649954, 0.921471041445608, 0.8018460851140402, 0.2107173760635359, 0.0735731693784959, 0.6501883669297613, 0.7122797409619125, 0.15362643293770084, 0.6817624482984403, 0.15663045893400995, 0.6553853777806495, 0.1716896917708356, 0.2108394222991431, 0.20956919813224628, 0.21226745716456374, 0.1920670142625004, 0.18604143174656707, 0.18061480189830925, 0.18072358648382747, 0.21492944508812584, 0.09309664527437167, 0.07531838054904494, 0.08933372531021211, 0.08171398768989369, 0.08276216509296552, 0.09257753215267184, 0.10641813273429912, 0.08150705129727609, 0.09217669527715422]}, "mutation_prompt": null}
