{"id": "fe5f9328-72c9-4fed-9574-1aeb8ff3de81", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.mutation_factor = 0.8\n        self.cross_over_rate = 0.9\n        self.eval_count = 0\n\n        # Initialize particles and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Evaluate fitness\n            for i in range(self.population_size):\n                if self.eval_count >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i]\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i]\n\n            # Update velocities and positions using PSO\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive = self.c1 * r1 * (self.pbest_positions[i] - self.positions[i])\n                social = self.c2 * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive + social\n                self.positions[i] = self.positions[i] + self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Apply Differential Evolution strategy\n            for i in range(self.population_size):\n                if self.eval_count >= self.budget:\n                    break\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.positions[a] + self.mutation_factor * (self.positions[b] - self.positions[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.cross_over_rate\n                trial_vector = np.where(crossover, mutant_vector, self.positions[i])\n                trial_fitness = func(trial_vector)\n                self.eval_count += 1\n                if trial_fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = trial_fitness\n                    self.pbest_positions[i] = trial_vector\n                    if trial_fitness < self.gbest_score:\n                        self.gbest_score = trial_fitness\n                        self.gbest_position = trial_vector\n\n        return self.gbest_position, self.gbest_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution adaptively balances exploration and exploitation for black box optimization.", "configspace": "", "generation": 0, "fitness": 0.24274522494096387, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7193924620289167, 0.6901066691249496, 0.7253831436903877, 0.7438713405305539, 0.6817135667032499, 0.1894836021421047, 0.658774259373365, 0.588141124276777, 0.6749757417207091, 0.24164650409373167, 0.31083521653631285, 9.999999999998899e-05, 0.29577930233766736, 0.03057956752433344, 0.052844783230659775, 0.430361684356937, 0.3608871263417849, 0.25013434153349, 0.13866616893565642, 0.11165807630604341, 0.12585095904169685, 0.13510569740991973, 0.13076687915217644, 0.25049628976646143, 0.1552318630977263, 0.11223180569767233, 0.13205962473619515, 0.11581270060411408, 0.12683206394726254, 0.09973483305855169, 0.18036424128831074, 0.1077830642493689, 0.1173695107573216, 0.12808571426386317, 0.12060079324620909, 0.11490610994231143, 0.988184842708277, 0.9856840184612612, 0.9940068796909616, 0.9892057054433347, 0.9896097260052061, 0.9908476255808248, 0.991288804624151, 0.9885321360132866, 0.9870819072790314, 0.41077168388561125, 0.35949116665326064, 0.3472719032153585, 0.14944364936317833, 0.4001173983632754, 0.3673448485861045, 0.4627700018301689, 0.08844617271439825, 0.4202021799554171, 0.6908695111362635, 0.5746080206760433, 0.46273403825149084, 0.2573363877698335, 0.20352664572669632, 0.2614474252498482, 0.21861974199881629, 0.13646374979533016, 0.21731347976615567, 0.1097070380606312, 0.18092910626276348, 0.16206127928484604, 0.15472184050125926, 0.18007035921071068, 0.1748082083309821, 0.17064386473666437, 0.16500155604727862, 0.1645851724748958, 0.1191014226080761, 0.05146128267756045, 0.1777430367900431, 0.1313291496995207, 0.11248811763171851, 0.11187674886007792, 0.12127591546668026, 0.11549528415846122, 0.09854843494275534, 9.999999999998899e-05, 0.034681375768392364, 0.0011233942949254727, 0.010900228230232956, 0.00044703315605509886, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10252145446479266, 0.028537196357176775, 0.07258805636463272, 0.05567704754763669, 0.01834686676156161, 0.010135300083677579, 0.12353406090379326, 0.007787272885513619, 0.035502630985048356, 9.999999999998899e-05, 0.03911468412134167, 0.032855622955974995, 0.05741591873480034, 0.05874827031157015, 0.08820107730251825, 0.07098572507090462, 0.09287630778872447, 0.06042422498926803, 0.08031550654363873, 0.151096624053903, 0.09104016958533867, 0.005172718300624712, 0.17851144900618365, 9.999999999998899e-05, 0.047485701950391146, 0.049419322032224766, 0.0762558271491871, 0.45792436233725575, 0.4961800833224378, 0.48868724684430875, 0.46413453598868915, 0.4754147272771302, 0.49742383045946204, 0.46788247623122337, 0.43077376543768575, 0.48603306572894267, 0.10086721989670877, 0.08680125345578615, 0.05358169355817677, 0.11234665786930331, 0.07403891687765152, 0.1096089282522893, 0.1317904327645234, 0.11815767959991896, 0.12981911539538182, 0.3718172504760412, 0.239684608537319, 0.23943743456101818, 0.46167587450711, 0.273620531366669, 0.34343206567965556, 0.19146980016785886, 0.30785338304972665, 0.2586152470765636, 0.25100679821174354, 0.2546087918117268, 0.3080704522720298, 0.25829687524106726, 0.23422376004407408, 0.33607944460840133, 0.3680223691542902, 0.3287885766494826, 0.17004544818904, 0.19298871259372263, 0.22342178551529746, 0.20555195912817326, 0.30029003951564515, 0.17732518299737998, 0.20779076030324017, 0.15776320015656997, 0.3326247064047798, 0.0902656955250104, 0.20566325964521726, 0.20290216217751267, 0.18668704939212932, 0.2017127326972301, 0.18899364153044684, 0.21480379287103468, 0.20016212284786195, 0.19724947986602404, 0.19657848301531577, 0.205766375415957, 0.31824159384540973, 0.20607173378074983, 0.19831389622567275, 0.45084749215545195, 0.22072154936234878, 0.19793001579546765, 0.20024394041746885, 0.2038888941742718, 0.8150139465641912, 0.12682321788180184, 0.15409888460947563, 0.16996995741699883, 0.19783213359509677, 0.19847319021856458, 0.09982738510490674, 0.16873643483961054, 0.1618616985890884, 0.3362992712128652, 0.2032396608772623, 0.12261000975650682, 0.20808944470480262, 0.3941349500499496, 0.20924865302258422, 0.10458170244033949, 0.6207430108066216, 0.19381946929468907, 0.21107225638233051, 0.1793306558218466, 0.2019719202509599, 0.18242534172007152, 0.197098073679415, 0.1977546395250851, 0.19630853347929744, 0.20265417505224104, 0.18902286088301146, 0.08362245123790413, 0.08480492941422413, 0.09466959763882643, 0.08614019451613053, 0.08803237596787261, 0.07297604810216984, 0.08357889609396485, 0.07809307029023171, 0.088959218715842]}, "mutation_prompt": null}
{"id": "e7deb3f7-ba76-45da-8eec-679e097fcdba", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.mutation_factor = 0.8\n        self.cross_over_rate = 0.9\n        self.eval_count = 0\n\n        # Initialize particles and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Evaluate fitness\n            for i in range(self.population_size):\n                if self.eval_count >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i]\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i]\n\n            # Update velocities and positions using PSO\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive = self.c1 * r1 * (self.pbest_positions[i] - self.positions[i])\n                social = self.c2 * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive + social\n                self.positions[i] = self.positions[i] + self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Apply Differential Evolution strategy\n            for i in range(self.population_size):\n                if self.eval_count >= self.budget:\n                    break\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.positions[a] + self.mutation_factor * (self.positions[b] - self.positions[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.cross_over_rate\n                trial_vector = np.where(crossover, mutant_vector, self.positions[i])\n                trial_fitness = func(trial_vector)\n                self.eval_count += 1\n                if trial_fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = trial_fitness\n                    self.pbest_positions[i] = trial_vector\n                    if trial_fitness < self.gbest_score:\n                        self.gbest_score = trial_fitness\n                        self.gbest_position = trial_vector\n\n        return self.gbest_position, self.gbest_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution adaptively balances exploration and exploitation for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fe5f9328-72c9-4fed-9574-1aeb8ff3de81", "metadata": {"aucs": [0.7193924620289167, 0.6901066691249496, 0.7253831436903877, 0.7438713405305539, 0.6817135667032499, 0.1894836021421047, 0.658774259373365, 0.588141124276777, 0.6749757417207091, 0.24164650409373167, 0.31083521653631285, 9.999999999998899e-05, 0.29577930233766736, 0.03057956752433344, 0.052844783230659775, 0.430361684356937, 0.3608871263417849, 0.25013434153349, 0.13866616893565642, 0.11165807630604341, 0.12585095904169685, 0.13510569740991973, 0.13076687915217644, 0.25049628976646143, 0.1552318630977263, 0.11223180569767233, 0.13205962473619515, 0.11581270060411408, 0.12683206394726254, 0.09973483305855169, 0.18036424128831074, 0.1077830642493689, 0.1173695107573216, 0.12808571426386317, 0.12060079324620909, 0.11490610994231143, 0.988184842708277, 0.9856840184612612, 0.9940068796909616, 0.9892057054433347, 0.9896097260052061, 0.9908476255808248, 0.991288804624151, 0.9885321360132866, 0.9870819072790314, 0.41077168388561125, 0.35949116665326064, 0.3472719032153585, 0.14944364936317833, 0.4001173983632754, 0.3673448485861045, 0.4627700018301689, 0.08844617271439825, 0.4202021799554171, 0.6908695111362635, 0.5746080206760433, 0.46273403825149084, 0.2573363877698335, 0.20352664572669632, 0.2614474252498482, 0.21861974199881629, 0.13646374979533016, 0.21731347976615567, 0.1097070380606312, 0.18092910626276348, 0.16206127928484604, 0.15472184050125926, 0.18007035921071068, 0.1748082083309821, 0.17064386473666437, 0.16500155604727862, 0.1645851724748958, 0.1191014226080761, 0.05146128267756045, 0.1777430367900431, 0.1313291496995207, 0.11248811763171851, 0.11187674886007792, 0.12127591546668026, 0.11549528415846122, 0.09854843494275534, 9.999999999998899e-05, 0.034681375768392364, 0.0011233942949254727, 0.010900228230232956, 0.00044703315605509886, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10252145446479266, 0.028537196357176775, 0.07258805636463272, 0.05567704754763669, 0.01834686676156161, 0.010135300083677579, 0.12353406090379326, 0.007787272885513619, 0.035502630985048356, 9.999999999998899e-05, 0.03911468412134167, 0.032855622955974995, 0.05741591873480034, 0.05874827031157015, 0.08820107730251825, 0.07098572507090462, 0.09287630778872447, 0.06042422498926803, 0.08031550654363873, 0.151096624053903, 0.09104016958533867, 0.005172718300624712, 0.17851144900618365, 9.999999999998899e-05, 0.047485701950391146, 0.049419322032224766, 0.0762558271491871, 0.45792436233725575, 0.4961800833224378, 0.48868724684430875, 0.46413453598868915, 0.4754147272771302, 0.49742383045946204, 0.46788247623122337, 0.43077376543768575, 0.48603306572894267, 0.10086721989670877, 0.08680125345578615, 0.05358169355817677, 0.11234665786930331, 0.07403891687765152, 0.1096089282522893, 0.1317904327645234, 0.11815767959991896, 0.12981911539538182, 0.3718172504760412, 0.239684608537319, 0.23943743456101818, 0.46167587450711, 0.273620531366669, 0.34343206567965556, 0.19146980016785886, 0.30785338304972665, 0.2586152470765636, 0.25100679821174354, 0.2546087918117268, 0.3080704522720298, 0.25829687524106726, 0.23422376004407408, 0.33607944460840133, 0.3680223691542902, 0.3287885766494826, 0.17004544818904, 0.19298871259372263, 0.22342178551529746, 0.20555195912817326, 0.30029003951564515, 0.17732518299737998, 0.20779076030324017, 0.15776320015656997, 0.3326247064047798, 0.0902656955250104, 0.20566325964521726, 0.20290216217751267, 0.18668704939212932, 0.2017127326972301, 0.18899364153044684, 0.21480379287103468, 0.20016212284786195, 0.19724947986602404, 0.19657848301531577, 0.205766375415957, 0.31824159384540973, 0.20607173378074983, 0.19831389622567275, 0.45084749215545195, 0.22072154936234878, 0.19793001579546765, 0.20024394041746885, 0.2038888941742718, 0.8150139465641912, 0.12682321788180184, 0.15409888460947563, 0.16996995741699883, 0.19783213359509677, 0.19847319021856458, 0.09982738510490674, 0.16873643483961054, 0.1618616985890884, 0.3362992712128652, 0.2032396608772623, 0.12261000975650682, 0.20808944470480262, 0.3941349500499496, 0.20924865302258422, 0.10458170244033949, 0.6207430108066216, 0.19381946929468907, 0.21107225638233051, 0.1793306558218466, 0.2019719202509599, 0.18242534172007152, 0.197098073679415, 0.1977546395250851, 0.19630853347929744, 0.20265417505224104, 0.18902286088301146, 0.08362245123790413, 0.08480492941422413, 0.09466959763882643, 0.08614019451613053, 0.08803237596787261, 0.07297604810216984, 0.08357889609396485, 0.07809307029023171, 0.088959218715842]}, "mutation_prompt": null}
