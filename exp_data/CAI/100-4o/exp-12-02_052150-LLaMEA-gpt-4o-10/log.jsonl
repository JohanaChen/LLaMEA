{"id": "7bf7c379-c99b-404e-bab6-9550ca69ea74", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 40\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.CR = 0.9  # Crossover probability for DE\n        self.F = 0.8   # Differential weight\n        self.c1 = 2.0  # Cognitive coefficient\n        self.c2 = 2.0  # Social coefficient\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Evaluate particle\n                if self.evaluations >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal bests\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions (PSO)\n            for i in range(self.pop_size):\n                inertia = self.velocities[i]\n                cognitive = self.c1 * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.particles[i])\n                social = self.c2 * np.random.rand(self.dim) * (self.global_best_position - self.particles[i])\n                self.velocities[i] = inertia + cognitive + social\n                self.particles[i] += self.velocities[i]\n                self.particles[i] = np.clip(self.particles[i], -5.0, 5.0)\n\n            # Differential Evolution Mutation and Crossover\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation: Choice of three distinct random particles\n                indices = np.arange(self.pop_size)\n                indices = indices[indices != i]\n                a, b, c = self.particles[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), -5.0, 5.0)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                if self.evaluations >= self.budget:\n                    break\n                trial_score = func(trial)\n                self.evaluations += 1\n\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                    self.particles[i] = trial\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSODE", "description": "A hybrid particle swarm and differential evolution algorithm that dynamically adjusts strategies based on performance, balancing exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.12345679650233697, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.18005524167806852, 0.15892893725644808, 0.15652025024437466, 0.1791829750572297, 0.18249448406796986, 0.20420750090955397, 0.17432877646952605, 0.19271216536478752, 0.16972741842792038, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0426991335575696, 0.06161900846932444, 0.05432378796631254, 0.054668587466956575, 0.041471669677915046, 0.04371373932000189, 0.060974393750725, 0.07371349633062652, 0.04665125141769333, 0.050284056143801936, 0.020830170619193233, 0.03863126223257807, 0.032416927974048826, 0.02577025266544042, 0.022441454082851253, 0.035923910182627194, 0.03238405514778675, 0.02222144666983472, 0.9887282823985256, 0.9808664067857339, 0.9790603637570486, 0.9745317044192398, 0.9802088187109648, 0.9817341165626282, 0.9870200364671101, 0.9811164883673468, 0.982335558932334, 0.11314628964908702, 0.11028918685094902, 0.05482916517581704, 0.03601511172599381, 0.07814826466056146, 0.0600444441747342, 0.07346814291668557, 0.04762865365868074, 0.0659876729958705, 0.13131428846881077, 0.0982081964730791, 0.13355145385599532, 0.13507688472335777, 0.14203565801476503, 0.16194609240234714, 0.1424888956477558, 0.10442420526578156, 0.09756473507111418, 0.0012729898918212301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028977705773747586, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011506793902574475, 0.007081759772027518, 0.023169856121315613, 0.005785141105387637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0213011350165343, 0.012802832590123048, 0.02125749573572211, 0.007703839307444782, 0.002265781076195683, 0.004277919603112967, 0.04522386532856215, 0.011970428945021538, 0.1154644823382931, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013160821216348095, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027184416154238944, 9.999999999998899e-05, 9.999999999998899e-05, 0.000961396673267001, 9.999999999998899e-05, 0.1814290522366433, 0.23373739924231896, 0.2164572091136996, 0.1872056678538373, 0.19977675886338542, 0.16966976702307546, 0.19354242311028502, 0.13590187304004575, 0.25273806826589673, 0.0742914230956967, 0.04494063215448185, 0.05563719634818698, 0.03831001338033091, 0.03895168476866584, 0.048979439882226306, 0.03746270997165835, 0.02658788943228374, 0.06554033269628856, 0.12748955026949083, 0.15112282060044924, 0.13173835002804513, 0.12170889821428121, 0.15041061396422684, 0.10299716517113322, 0.17509563730764, 0.15913315299930086, 0.1437260730735206, 0.15509241921510764, 0.1543324894546595, 0.170722006405721, 0.16727774141977914, 0.15417658647230037, 0.14775340922975755, 0.17119693660429347, 0.17691663293569238, 0.18331384906415138, 0.108278944486074, 0.10111955053308408, 0.11684311042931117, 0.12465616496226994, 0.08743307340333117, 0.10833688553433507, 0.09836284577448529, 0.1050875862908186, 0.12530094615514065, 0.15363802707681007, 0.14999693063369557, 0.16770804961700359, 0.13747312000724266, 0.1477629787256528, 0.13606152756918033, 0.20987556047275002, 0.17060573312845284, 0.15190690492248105, 0.1260758659843414, 0.037664095384853824, 0.15136282485969732, 0.14551298075905927, 0.1483982982908617, 0.13930832730627896, 0.1480176898168698, 0.14370200302553693, 0.13323518234627518, 0.16937835559756098, 0.13687260446731087, 0.10727939255715047, 0.145510493048701, 0.15787427352476147, 0.11276712869941952, 0.13755619273428987, 0.13054380800020948, 0.16651334641574123, 0.20474143392488486, 0.15834133724922173, 0.21895007076911, 0.14657729020630217, 0.11532849344177443, 0.12238757378825682, 0.18120683115315095, 0.18340016473550047, 0.1807497456315097, 0.18092038891522388, 0.17444458962936948, 0.17635973668570026, 0.167721936726545, 0.19531191620185018, 0.1818893367931298, 0.18540883315056267, 0.19131930581972367, 0.17303208450713303, 0.04203138305974985, 0.061346410906350846, 0.04507966580690059, 0.04180140954436373, 0.049809948389139214, 0.05475064512073513, 0.04357472770700732, 0.05047498650222182, 0.04609970448808054]}, "mutation_prompt": null}
{"id": "88674cd5-c5ae-485f-ac31-1ac6df14268b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 40\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.CR = 0.9  # Crossover probability for DE\n        self.F = 0.8   # Differential weight\n        self.c1 = 2.0  # Cognitive coefficient\n        self.c2 = 2.0  # Social coefficient\n        self.evaluations = 0\n        self.success_rate = 0.1  # Track success rate\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Evaluate particle\n                if self.evaluations >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal bests\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions (PSO)\n            for i in range(self.pop_size):\n                inertia = self.velocities[i]\n                cognitive = self.c1 * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.particles[i])\n                social = self.c2 * np.random.rand(self.dim) * (self.global_best_position - self.particles[i])\n                self.velocities[i] = inertia + cognitive + social\n                self.particles[i] += self.velocities[i]\n                self.particles[i] = np.clip(self.particles[i], -5.0, 5.0)\n\n            # Differential Evolution Mutation and Crossover\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation: Choice of three distinct random particles\n                indices = np.arange(self.pop_size)\n                indices = indices[indices != i]\n                a, b, c = self.particles[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), -5.0, 5.0)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                if self.evaluations >= self.budget:\n                    break\n                trial_score = func(trial)\n                self.evaluations += 1\n\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                    self.particles[i] = trial\n                    self.success_rate += 0.05  # Increase success rate on improvement\n                else:\n                    self.success_rate -= 0.05  # Decrease success rate if no improvement\n\n                # Adaptive F and CR\n                self.F = np.clip(0.5 + self.success_rate, 0.2, 1.0)  # Adaptive F\n                self.CR = np.clip(0.7 + self.success_rate, 0.1, 1.0)  # Adaptive CR\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSODE", "description": "Enhanced HybridPSODE by introducing an adaptive F and CR using success rates to balance exploration and exploitation dynamically.", "configspace": "", "generation": 1, "fitness": 0.12376948226865327, "feedback": "", "error": "", "parent_id": "7bf7c379-c99b-404e-bab6-9550ca69ea74", "metadata": {"aucs": [0.16909040416117838, 0.19285339382127764, 0.16290832424428048, 0.18079917526724953, 0.20565246201546183, 0.15862352624934117, 0.16694410758316958, 0.16034555447895804, 0.17725131155460516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.052545954232014136, 0.0552901918005938, 0.034390747479035366, 0.03792565302961415, 0.038327376408022196, 0.050133591385235876, 0.050174471607931426, 0.045149910701358986, 0.03739305196908249, 0.03426498565592795, 0.02978669694106595, 0.024013218612839227, 0.025130767743743454, 0.01980133100340009, 0.035063674042143944, 0.03209888371270431, 0.028043188064992175, 0.032727809512020034, 0.9887216965610959, 0.98197886962242, 0.9817800455594898, 0.9740733515626752, 0.98657240999262, 0.9787578644164701, 0.9885532265458792, 0.9781459495826902, 0.9899217836410923, 0.10972402538653891, 0.07098118825094502, 9.999999999998899e-05, 0.10416634633499067, 0.09263799910224646, 0.09442951849577552, 0.08514297141379479, 0.05515715430172019, 0.06106058626176658, 0.14291896071367904, 0.08470061505615267, 0.15138988730070446, 0.11269353762660284, 0.10704970749810783, 0.16204746296338635, 0.11389008847811621, 0.10427435912595706, 0.09458497468909388, 0.008861953516376864, 0.006112515812985109, 0.04573820128215633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0058839808639400415, 0.018447382845144467, 9.999999999998899e-05, 0.0029150891278267865, 9.999999999998899e-05, 0.036107899650298036, 9.999999999998899e-05, 9.999999999998899e-05, 0.04641476248289145, 9.999999999998899e-05, 9.999999999998899e-05, 0.007355568829871095, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030389831002026968, 0.01885647618400088, 0.041597161612046185, 9.999999999998899e-05, 0.0015748800356694126, 9.999999999998899e-05, 0.018839904456681822, 0.03061697968637922, 0.04127922063098399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023062581813680927, 9.999999999998899e-05, 0.008982311122075592, 9.999999999998899e-05, 0.0072363977354685804, 9.999999999998899e-05, 0.007883671584758112, 0.0007471851238890492, 9.999999999998899e-05, 0.1861296852355636, 0.2753539701018386, 0.20417345909187812, 0.1678529053786908, 0.20361509755882778, 0.19263326161071714, 0.20247244275230114, 0.22002801267811056, 0.1814055925453678, 0.051417715962979504, 0.046552728715639535, 0.04745348755572343, 0.051154497198892535, 0.03225356938290225, 0.059327708139631063, 0.04714872415310234, 0.04513797188654611, 0.04983696851621955, 0.16079576282353358, 0.15634403210427605, 0.12268974458283177, 0.17617342280517623, 0.12646024968369962, 0.15013757000670502, 0.13756894882881066, 0.15197465805701393, 0.16223788206221978, 0.15735765385694356, 0.15575080804196773, 0.184660187508347, 0.15912558600146098, 0.13632578876129664, 0.15961901598622885, 0.19571241346000068, 0.18178018135902219, 0.17173693303553306, 0.09190356753071482, 0.12792492304179526, 0.1241584347479684, 0.09777013887681829, 0.09168394803653124, 0.12202869791860971, 0.12243747004596894, 0.11113657270792121, 0.09883628433400915, 0.15508277070513177, 0.13819235839618182, 0.15954986709450003, 0.1494237163020472, 0.12651820311311512, 0.1340785423668749, 0.15113490172083477, 0.16322242347922056, 0.14574650334467731, 0.14210586393528735, 0.1402454304389381, 0.14115451201560902, 0.13942118153959815, 0.12403040894872297, 0.1410389933444549, 0.1373808271635948, 0.14968761452598267, 0.13685151980949373, 0.14093981174473902, 0.13339786890011074, 0.10593423405329161, 0.1645513082782496, 0.17081913429825457, 0.14061235931079574, 0.1186445386492273, 0.16707758010260243, 0.17045958582171516, 0.1567116730003565, 0.13518943250751014, 0.1934266225746213, 0.09482238433874468, 0.17038924097949215, 0.12294857386929292, 0.20084178987450152, 0.1815003299666781, 0.18324456080159013, 0.17502755994403485, 0.20039101552540373, 0.17212915585688193, 0.18284564206284837, 0.18720267329322637, 0.1837438665718245, 0.1906851957121617, 0.20038000900040287, 0.1792431074835209, 0.05029192167265628, 0.058277314139503655, 0.04968249498428945, 0.031527461516467126, 0.04991787443986395, 0.04818092274842145, 0.04055083689933692, 0.037544422992513704, 0.04739937767127489]}, "mutation_prompt": null}
