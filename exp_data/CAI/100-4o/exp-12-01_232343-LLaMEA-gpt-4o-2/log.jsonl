{"id": "cbdb1e87-1511-4eb3-a95c-64985ef68f92", "solution": "import numpy as np\n\nclass HybridDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.CR = 0.9  # Crossover probability\n        self.F = 0.5   # Differential weight\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.best = None\n        self.best_score = float('inf')\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            new_population = np.zeros_like(self.population)\n            for i in range(self.pop_size):\n                a, b, c = self.select_three_random_indices(i)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n                trial_score = func(trial)\n                self.eval_count += 1\n                new_population[i] = trial if trial_score < func(self.population[i]) else self.population[i]\n                \n                if trial_score < self.best_score:\n                    self.best_score = trial_score\n                    self.best = trial\n                if self.eval_count >= self.budget:\n                    break\n            self.population = new_population\n\n        return self.best\n\n    def select_three_random_indices(self, current_index):\n        indices = list(range(self.pop_size))\n        indices.remove(current_index)\n        return np.random.choice(indices, 3, replace=False)\n\n    def mutate(self, a, b, c):\n        mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n        mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n        return mutant\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return np.clip(trial, self.bounds[0], self.bounds[1])", "name": "HybridDEOptimizer", "description": "Hybrid Differential Evolution with Adaptive Crossover and Mutation Strategies for Efficient Global Search.", "configspace": "", "generation": 0, "fitness": 0.23967083797664565, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.5461305190574768, 0.5293669824360808, 0.5374534737880001, 0.5434001316248449, 0.5897269859033886, 0.5485603261360075, 0.5657426128395563, 0.5895320153224046, 0.5543523647618149, 0.27208260200292167, 0.26829920401244733, 0.2597560664843437, 0.2831504516125245, 0.2684951742916474, 0.2581332481305427, 0.27343343051575275, 0.2544155912900581, 0.28708047108065926, 0.09769406534937874, 0.11732722186545219, 0.08877249595349224, 0.09462768764232732, 0.11103106372866933, 0.0946051566641356, 0.10344210132031872, 0.09417087714023364, 0.08823978770698593, 0.08801559374946266, 0.08310631670759228, 0.07548665123843534, 0.07354422804913774, 0.07737676198460908, 0.08169493410895046, 0.08489962466201484, 0.08514969584092447, 0.08464267624106092, 0.6963261832687415, 0.8732278387653202, 0.8153092311992741, 0.6768093210048536, 0.8001424549999917, 0.5598796604352811, 0.676887024466152, 0.8628782237746218, 0.8445099786149476, 0.24897896577797407, 0.2524754216262347, 0.19609497413728882, 0.2047830127460859, 0.22631594278785128, 0.23579667299653106, 0.24379347789707395, 0.23467358403843674, 0.2181885243669095, 0.5482361238814188, 0.48817674702200964, 0.5091495196407668, 0.5367784317707929, 0.46807680545529673, 0.5162628407408545, 0.5084513446829834, 0.5260366879397051, 0.56098040760828, 0.14298684571775788, 0.15460307398436957, 0.170881603924539, 0.14583299884705936, 0.16417548703033813, 0.12327432273514527, 0.1695625035057614, 0.1584553478568741, 0.15789470536808892, 0.09662564387611294, 0.1593672032532073, 0.16154064299546333, 0.16124198822488667, 0.1361376962867642, 0.15205054374511362, 0.15178675735808633, 0.13634390047961276, 0.13199886030609365, 0.10968588853201278, 0.10616199093296141, 0.11856591333639555, 0.10623635615345661, 0.14111847740751304, 0.10328180190479141, 0.1014876682564051, 0.12106382059504339, 0.1367086617461568, 0.2292292220061728, 0.26740996390516936, 0.2407000455049002, 0.2499617314111764, 0.2298775100518874, 0.2612111382220813, 0.2775417058840691, 0.2812088467265065, 0.24975747702295326, 0.016575206290945776, 0.025705014297979334, 0.03612578326233251, 0.03052951347904287, 0.0348760028164834, 0.05652575364577661, 0.0477597690928766, 0.022222214903867665, 0.04130620497608506, 0.14589166325715508, 0.11806706891416596, 0.15159726843798982, 0.13953960523985587, 0.13421166126256334, 0.15255356462479608, 0.14758917071216116, 0.1448695231329271, 0.1488667926809274, 0.4730193492856246, 0.4424838814818147, 0.4711440803408875, 0.4684585672792083, 0.445170705306727, 0.472173294150794, 0.4605859312546179, 0.44256604041869074, 0.48989278980058415, 0.07608985594462614, 0.08909611502853565, 0.08587627652748064, 0.09689993639304373, 0.08755029149270466, 0.09388256579243648, 0.07738672799394586, 0.08772197552660888, 0.08050194737077832, 0.12203685246866447, 0.1314080996158402, 0.12878128236214215, 0.14463997149562713, 0.1719319800089263, 0.13810449309673545, 0.1323030381312601, 0.11138926500072666, 0.12582296242386715, 0.288236449632723, 0.27303340288198474, 0.30802527199797836, 0.27094922934830745, 0.27107712145855134, 0.2698413377464769, 0.27281246478929566, 0.2826441399324201, 0.2817198105190829, 0.19109543772656223, 0.21911076891930992, 0.22272407695979568, 0.21037554402498448, 0.18330088613272066, 0.22516287522836786, 0.23753512866808446, 0.20619332128326218, 0.22447912795999359, 0.17884979216216212, 0.17614203859112532, 0.1763500185876895, 0.17322995216276982, 0.18766623847036068, 0.1808470725821083, 0.159333871771006, 0.18092043760095933, 0.18723102277958703, 0.20232130946540172, 0.18309397293728136, 0.16824731358856404, 0.17291286293250163, 0.17097105967747084, 0.17084237792141355, 0.1776536582127325, 0.1748511990196714, 0.1751940522039337, 0.43987229041686815, 0.3512126708438186, 0.16657532624910087, 0.4747279928517705, 0.39584604772311593, 0.5301972632897233, 0.37464824187013457, 0.33634513016311984, 0.16647885392001116, 0.27788236299859737, 0.19508607348010343, 0.41620861624470007, 0.22450164434865805, 0.17931610514395746, 0.18628483092003356, 0.19530150392835466, 0.3989912974893641, 0.20562458939116723, 0.18246602027363568, 0.17094138667808545, 0.18549883357950303, 0.17903154288623868, 0.17242730620916225, 0.17159909722074662, 0.18264940671817465, 0.17160246031286208, 0.2296878090022888, 0.08579831250740122, 0.07348627783567263, 0.06837138243216867, 0.0647256210382271, 0.0659132911180752, 0.0672643183413616, 0.0678375160002761, 0.07623318161674053, 0.07343535703050752]}, "mutation_prompt": null}
{"id": "75870fa6-05f2-475c-83c9-a6ff4624c7ea", "solution": "import numpy as np\n\nclass HybridDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.CR = 0.9  # Crossover probability\n        self.F = 0.5   # Differential weight\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.best = None\n        self.best_score = float('inf')\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            new_population = np.zeros_like(self.population)\n            for i in range(self.pop_size):\n                a, b, c = self.select_three_random_indices(i)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(self.population[i], mutant)\n                trial_score = func(trial)\n                self.eval_count += 1\n                new_population[i] = trial if trial_score < func(self.population[i]) else self.population[i]\n                \n                if trial_score < self.best_score:\n                    self.best_score = trial_score\n                    self.best = trial\n                if self.eval_count >= self.budget:\n                    break\n            self.population = new_population\n\n        return self.best\n\n    def select_three_random_indices(self, current_index):\n        indices = list(range(self.pop_size))\n        indices.remove(current_index)\n        return np.random.choice(indices, 3, replace=False)\n\n    def mutate(self, a, b, c):\n        self.F = 0.4 + np.random.rand() * 0.6  # Line changed to introduce variability in F\n        mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n        mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n        return mutant\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return np.clip(trial, self.bounds[0], self.bounds[1])", "name": "HybridDEOptimizer", "description": "Enhanced Hybrid Differential Evolution with Variable Mutation Factor F for Improved Adaptation.", "configspace": "", "generation": 1, "fitness": 0.19591621347265864, "feedback": "", "error": "", "parent_id": "cbdb1e87-1511-4eb3-a95c-64985ef68f92", "metadata": {"aucs": [0.45853352828565985, 0.4366675726484964, 0.42355823654408165, 0.44249260517592026, 0.4420382801762922, 0.4515235434309445, 0.4716119154273145, 0.45197866299209233, 0.45739759606183106, 0.1623998192073436, 0.1546181613733939, 0.17571749571095274, 0.16188733979080627, 0.15643291215155786, 0.17029055769237, 0.16895204189126123, 0.18596963384454135, 0.16811162644176403, 0.10110280775646274, 0.0907546504600164, 0.08281806609172615, 0.08651353486111935, 0.08857158551723154, 0.08594005682380101, 0.08244128239625248, 0.08053205721142875, 0.08856469546346801, 0.08202450544684126, 0.06670912649638105, 0.0742810238898195, 0.0795175552066828, 0.08461928776691219, 0.06897333240112802, 0.06467842160737813, 0.0774238814692646, 0.07636146746964656, 0.8285373470152281, 0.8418337374223502, 0.8364896364520329, 0.8355104462006897, 0.8496245533111404, 0.8223669726970463, 0.9309796818677529, 0.8647232597985932, 0.8739129834286751, 0.17932636985602735, 0.18240062829667336, 0.1688306872141695, 0.16613911285442917, 0.18038906370507846, 0.19293715144304813, 0.18740758094106125, 0.2054077954076836, 0.20682921353017092, 0.26321913439017686, 0.32605356273570874, 0.29296330802470727, 0.26553370313197333, 0.2667098958737031, 0.31587868993514356, 0.26332385796917746, 0.29874379616046276, 0.38358252094842915, 0.11618219349923442, 0.1130602509109423, 0.11276348855007945, 0.1214868438150648, 0.12665097326380315, 0.12590678675023614, 0.13283039026982335, 0.11293964334012474, 0.11660908897601097, 0.09280748647463566, 0.08741918737176912, 0.03952805360828682, 0.13166024680876287, 0.12353430071492566, 0.11189955080423186, 0.09444663513142237, 0.1170606791367762, 0.11510957640472153, 0.041794204833174975, 0.05527749078288158, 0.03846850355013487, 0.04457605072238402, 0.044064178840906076, 0.03669184174094531, 0.045475023120562064, 0.041040136948534145, 0.03912201023129924, 0.1660855202446594, 0.15159303255257128, 0.15047857776130136, 0.17489285940567512, 0.15319750727178183, 0.17384450485697056, 0.18294169174318342, 0.17851815517267955, 0.17193842329279507, 9.999999999998899e-05, 0.00011925386365252422, 0.0024337825694216164, 0.0062470179426774575, 0.017089483612922285, 0.004583120855640277, 0.007924459176933296, 9.999999999998899e-05, 0.006895445927509902, 0.08928910494899123, 0.08384791190216678, 0.09795907224486256, 0.09510308955648072, 0.08815895262030737, 0.09855825509649707, 0.09295984696098114, 0.08727298816737672, 0.08943701268779403, 0.3741310745846729, 0.39776398480673825, 0.41044633885059134, 0.3829076667693261, 0.39324389303037943, 0.39059695348930135, 0.33758238325690504, 0.3883519256126794, 0.4024779750934765, 0.07605842178483091, 0.07910662677243219, 0.08625730395139475, 0.07404027031111382, 0.0756554985313469, 0.07894895621015241, 0.07037083176867764, 0.0784257849421427, 0.07819406172453813, 0.1235813153357943, 0.1446637950783488, 0.13662303248683472, 0.1318767314651793, 0.13390171171644671, 0.15454794518175674, 0.19374810648082486, 0.13879544598938376, 0.11919573384796622, 0.23210905878914767, 0.22915624199972018, 0.24583941342416338, 0.2515821178349178, 0.2347484551434209, 0.22651256177821666, 0.24456083844487675, 0.26513844753437865, 0.24203406851138765, 0.16785635674616461, 0.17546123510257783, 0.17249677015361609, 0.16796272199262496, 0.1714149474371568, 0.16588295968356848, 0.18868883853563811, 0.17931053051990242, 0.1829664275264331, 0.16905607587018712, 0.1811742404726795, 0.1805871979180529, 0.1764655491583066, 0.16281233923476102, 0.18234092026120985, 0.16584589462787624, 0.18213833552353842, 0.1737454842522591, 0.18241013385105354, 0.16157022912447794, 0.17352055325120253, 0.16535971898594304, 0.1659564177773305, 0.16685509304767876, 0.16351085220740658, 0.1620896383182584, 0.17760460740361306, 0.30816073226750484, 0.18766936415566693, 0.18371909122710584, 0.3231096734983713, 0.2912349671590727, 0.15728997228386543, 0.27738076006386614, 0.23954798352196616, 0.2394232831557771, 0.230336955086892, 0.18241392858870564, 0.1852336219060543, 0.17085726363147047, 0.1820678281035749, 0.2656556378282252, 0.19931114304916775, 0.18626970793803543, 0.2034616288690274, 0.18477423290371542, 0.18158430874009346, 0.191484909473281, 0.17357450900179006, 0.1786385904934381, 0.1839260304659962, 0.1731000273145883, 0.22144977599732085, 0.18196220604387714, 0.05753404078985802, 0.061392343933847626, 0.061057921627802325, 0.05676056059104306, 0.06889803892881718, 0.062803579194457, 0.06351565548937765, 0.07074142266081906, 0.06166392776178309]}, "mutation_prompt": null}
