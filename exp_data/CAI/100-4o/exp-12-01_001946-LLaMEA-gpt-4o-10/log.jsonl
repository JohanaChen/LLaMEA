{"id": "3bf2163e-57df-4c6b-b190-19f4ded8505f", "solution": "import numpy as np\n\nclass HybridDELocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(10 * dim, budget // 2)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n\n    def local_search(self, x, func, step_size=0.1):\n        best_x = np.copy(x)\n        best_f = func(best_x)\n        for d in range(self.dim):\n            x_new = np.copy(best_x)\n            x_new[d] += step_size\n            if x_new[d] > self.upper_bound:\n                x_new[d] = self.upper_bound\n            elif x_new[d] < self.lower_bound:\n                x_new[d] = self.lower_bound\n            f_new = func(x_new)\n            if f_new < best_f:\n                best_x, best_f = x_new, f_new\n        return best_x, best_f\n\n    def __call__(self, func):\n        # Initialize population\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n\n        eval_count = self.population_size\n        while eval_count < self.budget:\n            # Differential Evolution\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = pop[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                eval_count += 1\n\n                # Selection\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n            # Local Search\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                improved_x, improved_f = self.local_search(pop[i], func)\n                eval_count += self.dim  # Account for local search evaluations\n\n                if improved_f < fitness[i]:\n                    pop[i] = improved_x\n                    fitness[i] = improved_f\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDELocalSearch", "description": "A hybrid algorithm combining Differential Evolution and Local Search to explore globally and exploit locally within the search space.", "configspace": "", "generation": 0, "fitness": 0.14451308661009582, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.298374642997113, 0.26562282187239417, 0.26918367604741733, 0.298759931891203, 0.30459407832523744, 0.336233273513297, 0.3153899845578704, 0.3039893772475787, 0.3200427042576137, 0.019000844291467756, 0.0247004909987667, 0.030342318916501076, 0.02776385626409228, 0.013812712765890134, 0.016755216528002492, 0.011831155984254882, 0.02275529539311849, 0.029659372877005596, 0.0703099543051563, 0.05917443318229909, 0.06945024666481969, 0.05900814064289339, 0.06326912458202971, 0.08713799192133087, 0.0766326897795816, 0.09411967368188967, 0.09555198864728731, 0.05227406170000026, 0.053435782512621155, 0.06966450900890486, 0.055791411972960114, 0.04600052887449968, 0.062050816916249696, 0.0716967956188459, 0.08363902273651169, 0.05337073682731497, 0.7412365793990654, 0.7042930112931527, 0.6804008011026554, 0.7186371788493582, 0.8971062323193636, 0.8029797822297038, 0.579667245295417, 0.690779590596214, 0.6913670900601583, 0.14270795884703857, 0.07304272625044483, 0.09098811046631361, 0.10702550617577966, 0.07837754928163954, 0.1078598397324857, 0.07460760855607607, 0.15455481171477436, 0.11787957339408806, 0.1934193549404274, 0.1481854129462219, 0.17705008846912518, 0.15230859313957168, 0.16443287482059166, 0.14459213785792657, 0.15833882739220606, 0.14796553595990425, 0.1442278438227642, 0.054570332179596504, 0.05777571784401192, 0.117890922358316, 0.1139561431725411, 0.11522524314544969, 0.10033471027400642, 0.11686881186290121, 0.09712415556576748, 0.1030160042300513, 0.10129749606574334, 0.06279542063226495, 0.09797949625772906, 0.06278681556365551, 0.0592119469781337, 0.0510727759978834, 0.060295103882538226, 0.056357496158194076, 0.09067574979602055, 0.015532747621324061, 9.999999999998899e-05, 0.010105507815023285, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010499054569558242, 0.011937841284940132, 0.0002858830939279633, 0.10037105730213258, 0.1035998975447715, 0.10356366778633419, 0.1075963368468229, 0.07973133704926494, 0.0918766975241091, 0.1423158426010046, 0.09967110373382837, 0.10348065492738456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04283402971104611, 0.03629719673364529, 0.04792924121643394, 0.039050814744568396, 0.040275870579480566, 0.08540948582717589, 0.032512644800712365, 0.034092908053122706, 0.047826344519227515, 0.2562576568419661, 0.2862959097799096, 0.31875955983675874, 0.26005999735772223, 0.2447561621654437, 0.29263980550206725, 0.2784454732536188, 0.22480672264193535, 0.28998622398861784, 0.078061629718846, 0.0580371860551302, 0.07368497056774137, 0.07637550558078943, 0.06318202265077455, 0.06502240218080246, 0.06960989236246551, 0.0723875519880568, 0.06702023074033547, 0.17912251040979177, 0.15953829307232603, 0.18067472623194913, 0.1514098578052846, 0.1527968934454631, 0.13490468030631042, 0.15240272577652925, 0.1275913784617293, 0.14233216876375865, 0.1493970416159196, 0.16617092054263793, 0.17428200763388813, 0.17248321002131362, 0.1777840705723669, 0.17134237046368084, 0.1740329129096817, 0.18032140138527997, 0.1694866348339179, 0.09896862688296992, 0.11428061817878954, 0.10377598633625362, 0.11699365804638051, 0.13049239103929722, 0.10893631791711411, 0.11291343707783907, 0.12393688284769888, 0.10941836533057614, 0.15480239889237324, 0.13780117840647732, 0.15306625837791432, 0.16172621667384923, 0.14511145188025654, 0.1542857581664555, 0.16462668684398019, 0.14862054351035714, 0.1635681569487637, 0.14836963498903666, 0.14750737855249096, 0.16234828164694282, 0.15705223646206545, 0.14452481182315735, 0.17299853304530766, 0.16103909602494515, 0.1587327871406382, 0.17247698592792582, 0.20627083245093958, 0.20804353216710192, 0.2034450839596459, 0.21904067335448973, 0.1758373311598771, 0.16113029943931745, 0.1420476757514938, 0.15096366267044248, 0.1497699706388006, 0.35028185452344474, 0.202337064105927, 0.19536086545841802, 0.19144604941613397, 0.13213910189421407, 0.20678936033403383, 0.17096914504214056, 0.11513006590317143, 0.2717606534424961, 0.15770263084389557, 0.16957352098123535, 0.17192309372108994, 0.17851009332233703, 0.17620018408295635, 0.17937752349050973, 0.16338577209074323, 0.17136585660799397, 0.16175598618155673, 0.05614679532595834, 0.057672192138171874, 0.05475818566142365, 0.050974807330263716, 0.05369198259567598, 0.0525545094190476, 0.05687719032074123, 0.050518324856800745, 0.05648541359640824]}, "mutation_prompt": null}
{"id": "9e8a262e-8afa-4569-aad2-c51aaf470275", "solution": "import numpy as np\n\nclass HybridDELocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(10 * dim, budget // 2)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n\n    def local_search(self, x, func, step_size=0.1):\n        best_x = np.copy(x)\n        best_f = func(best_x)\n        for d in range(self.dim):\n            x_new = np.copy(best_x)\n            x_new[d] += step_size * np.random.uniform(-1, 1)  # Randomized step size\n            if x_new[d] > self.upper_bound:\n                x_new[d] = self.upper_bound\n            elif x_new[d] < self.lower_bound:\n                x_new[d] = self.lower_bound\n            f_new = func(x_new)\n            if f_new < best_f:\n                best_x, best_f = x_new, f_new\n        return best_x, best_f\n\n    def __call__(self, func):\n        # Initialize population\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n\n        eval_count = self.population_size\n        while eval_count < self.budget:\n            # Differential Evolution\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = pop[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, pop[i])\n                f_trial = func(trial)\n                eval_count += 1\n\n                # Improved Selection\n                if f_trial < fitness[i] or np.random.rand() < 0.1:  # Acceptance probability\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n            # Local Search\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                improved_x, improved_f = self.local_search(pop[i], func)\n                eval_count += self.dim  # Account for local search evaluations\n\n                if improved_f < fitness[i]:\n                    pop[i] = improved_x\n                    fitness[i] = improved_f\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridDELocalSearch", "description": "An enhanced hybrid algorithm integrating adaptive local search and improved selection mechanism with Differential Evolution for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": 0.1273047171485889, "feedback": "", "error": "", "parent_id": "3bf2163e-57df-4c6b-b190-19f4ded8505f", "metadata": {"aucs": [0.17497085333608542, 0.17620913722638742, 0.18946412613976993, 0.296792876284393, 0.21710321751143535, 0.2589189592849037, 0.23549257993290307, 0.21122490344190914, 0.25477601295280905, 0.01185101381481668, 0.010107790236010272, 0.024119213857240362, 0.012635488038998832, 0.012670373709371963, 0.017595790416556123, 0.03529043938745813, 0.005478563191834707, 0.052281322520242646, 0.0632922351761196, 0.08790727593036896, 0.07364881207306861, 0.07597819301428299, 0.08676618346902576, 0.09401943864917084, 0.06645571378483839, 0.07805146801560348, 0.07497613863903729, 0.03750862025805057, 0.04766735480826978, 0.04284994184398072, 0.045572998502091844, 0.06703279604682522, 0.04334469732246016, 0.04017293047189907, 0.02779204567627147, 0.0971640388485957, 0.7433792313247323, 0.4916562311216809, 0.7418069993187821, 0.7059381244404113, 0.8327704127488658, 0.8356461739747496, 0.6317716239963609, 0.7816295920730268, 0.7452013707526458, 0.0936884167147578, 0.06621683916659493, 0.08432911323078751, 0.04358711652819691, 0.057409426023056764, 0.06450177365933973, 0.07106954367614782, 0.09078749308329537, 0.08774202390606556, 0.1494326341028398, 0.12369984939378553, 0.11288381031570682, 0.13481479469863467, 0.1342553451683811, 0.13429855675538804, 0.11997522247301162, 0.11569634541185236, 0.12196749390533745, 0.007635399161340817, 0.011248600021781519, 0.027739499339701434, 0.015350114156826744, 0.052288476724911215, 0.0357471350947266, 0.03137655168196618, 0.024382664123923536, 0.016233868529523687, 0.041527849008735185, 0.0727906992801649, 0.0465021923032507, 0.03276305880221586, 0.0040929840320174105, 0.0247958993681352, 0.03987788679305959, 0.018041571795822664, 0.01596571114936729, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07280628385047161, 0.08176623517743753, 0.0771017287485336, 0.08332998160996719, 0.059214040513167476, 0.07022203003598992, 0.07643873850603577, 0.12421907566372081, 0.06372277542256655, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013106734795928054, 0.007221633099461222, 0.002421673261915558, 0.014357049455262727, 0.014538527925642253, 0.014473068153316282, 0.017850477017518962, 0.009631384924428499, 0.011029635259521053, 0.26115221483468665, 0.20324784805724816, 0.23935783708377278, 0.2339391113119672, 0.21851080990365057, 0.21707763136459912, 0.35058544394004143, 0.18289412702803187, 0.1887152994328002, 0.06087772975352912, 0.0642121606659608, 0.07354968086231128, 0.06575622815495086, 0.06287709212056891, 0.0601626476616397, 0.05655377821506791, 0.07588333787200008, 0.07640965502896602, 0.1397889992828777, 0.14706998012423778, 0.16647262327509194, 0.15283212986354322, 0.16603186514048507, 0.14200808475176618, 0.16736850434015593, 0.14386807108411992, 0.14312791533390878, 0.15114666985746572, 0.14983662055404112, 0.1699129969461739, 0.1590055811208384, 0.16288429856322106, 0.16448563350919265, 0.1634997306133682, 0.1823918184714245, 0.15832770296282106, 0.11469922890256601, 0.0946103608779445, 0.102057731844445, 0.1188058167520698, 0.10305520434411486, 0.08706817225158192, 0.09727909482967012, 0.139739440729174, 0.10503964605363203, 0.1925968612961857, 0.1887670669098569, 0.19719206750820062, 0.159607968885342, 0.15860105215891995, 0.17839271265279255, 0.1742847338810679, 0.17927662607781514, 0.1901004495190276, 0.18878399645366084, 0.1485321313763336, 0.15850871237024855, 0.13570915831944963, 0.11758186027969464, 0.1429750356480447, 0.14159896866227717, 0.12020103011834982, 0.16800622213693972, 0.16307141441182305, 0.12192150613919095, 0.13377570056413335, 0.1664014089385364, 0.12779530347378454, 0.14947223463233572, 0.12296054031534076, 0.13859760170266977, 0.1449553737278153, 0.20242595013135845, 0.16528513275660695, 0.14958484523664262, 0.115730864153475, 0.1348452458992102, 0.1190827217952607, 0.10924877423096147, 0.1841489786366568, 0.15331127365843744, 0.19382457546487475, 0.18492396435086367, 0.20619371550911636, 0.205856737493734, 0.20533052848302158, 0.21102194994429124, 0.20180262288311346, 0.2021367469281452, 0.2582568124787451, 0.07086769260087511, 0.06602359386944245, 0.07026453734788551, 0.05922672698045606, 0.07541350826987603, 0.06038331895774951, 0.07112110121872606, 0.06888829478125003, 0.061824059636993445]}, "mutation_prompt": null}
