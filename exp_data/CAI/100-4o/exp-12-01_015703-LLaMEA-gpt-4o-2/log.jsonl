{"id": "6598be0c-bafa-4f6b-a275-01fc6400149f", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.inf * np.ones(self.population_size)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.population = self.opposition_based_learning(self.population)\n            for i in range(self.population_size):\n                trial_vector = self.mutate_and_crossover(i)\n                trial_vector = np.clip(trial_vector, self.bounds[0], self.bounds[1])\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                    \n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial_vector\n                        self.best_fitness = trial_fitness\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return self.best_solution\n\n    def opposition_based_learning(self, population):\n        new_population = population.copy()\n        for i in range(self.population_size):\n            opposite = self.bounds[0] + self.bounds[1] - population[i]\n            if np.random.rand() < 0.5:\n                new_population[i] = opposite\n        return new_population\n\n    def mutate_and_crossover(self, idx):\n        indices = [i for i in range(self.population_size) if i != idx]\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = 0.8 if self.evaluations % 2 == 0 else 0.5  # Adaptive differential factor\n        mutant_vector = self.population[a] + F * (self.population[b] - self.population[c])\n        crossover_rate = 0.9\n        trial_vector = np.where(np.random.rand(self.dim) < crossover_rate, mutant_vector, self.population[idx])\n        return trial_vector", "name": "HybridDE", "description": "A hybrid Differential Evolution with Adaptive Differential Operator and Opposition-based Learning to balance exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.16990015971256867, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.32034306549287217, 0.32791911607598234, 0.3503114533306865, 0.3167893539700848, 0.34396978210781237, 0.31037560853701807, 0.3174331088254264, 0.3028811768859606, 0.3486568260294952, 0.0440597738568953, 0.042608708665530126, 0.05345570152307244, 0.06433278154755995, 0.055711292729139994, 0.07291444558047655, 0.04545646265867598, 0.050602988445477615, 0.04534479875613939, 0.078074923789196, 0.07245323896893618, 0.06944174967089145, 0.06724334589926007, 0.062127913486329844, 0.07555420952929526, 0.06948765263850942, 0.0780013449569622, 0.06263184528951915, 0.05662700843138879, 0.05902481620939348, 0.06322239554895093, 0.051772299145757095, 0.06565217235317033, 0.056031444761510785, 0.058581067235190076, 0.05342907124702401, 0.06725479477360163, 0.9733587905077496, 0.9667187224092835, 0.9445646352021753, 0.9124476565147929, 0.9552625876527593, 0.9602147523780875, 0.9405619332925379, 0.9396999451769948, 0.943042851798187, 0.12450896822621649, 0.154581416553497, 0.14889765120593978, 0.13708423794446878, 0.12159285486880511, 0.1476935568597192, 0.16011462341231475, 0.13669584790505418, 0.13439670153663685, 0.25701998280365856, 0.25441919912672206, 0.24531760568333094, 0.20158711860322998, 0.21341202809872206, 0.23446043777624648, 0.21094437271014477, 0.2039854662120637, 0.18028897786422748, 0.07131097988222879, 0.08399541560402324, 0.10763419290593024, 0.06512833813039964, 0.06847363621672176, 0.07190752764778552, 0.058230438147558794, 0.08061182724104765, 0.08379791075455545, 0.16866432881442384, 0.18865768381702108, 0.16993518743853597, 0.17212719280665711, 0.16697702365581257, 0.1713147196063325, 0.1855051011751837, 0.15363570462116372, 0.1806776566341347, 0.005551091149389675, 0.00505410896234193, 0.0006357347181626949, 0.014264718424249478, 0.010153801559419695, 9.999999999998899e-05, 0.01642126621601603, 0.018233608283769187, 0.05119634279422025, 0.1096541507939115, 0.1214985960680991, 0.07810118117585074, 0.09459634456623967, 0.10256121795821749, 0.09545373918321842, 0.0976238377103098, 0.1209609262092548, 0.10707427761169308, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05491102871123965, 0.04009528327739442, 0.0373737197507098, 0.04228087790731938, 0.050679264505127164, 0.058949067982995484, 0.03729568392305316, 0.049799983292649785, 0.051092179919478675, 0.2817655850839986, 0.2810448110480718, 0.25846313167414936, 0.29249390221571514, 0.2788198809133673, 0.29955593047520046, 0.3395626117869346, 0.2972410375843354, 0.3114912840470061, 0.0715190283567636, 0.07344083399018053, 0.05777496208824473, 0.07757761346362546, 0.05347235693708574, 0.07429280060673504, 0.0740034011562768, 0.05990537650798411, 0.0648863721627031, 0.13803165815386997, 0.13529916632538586, 0.1444688015716158, 0.15933627826240626, 0.1385553997904344, 0.13372218674494885, 0.1656486149879025, 0.12552094675703507, 0.13799355116114653, 0.20492723085927722, 0.20441280172689302, 0.19360851578955662, 0.21147873323618283, 0.2167106036605777, 0.19233679755800592, 0.19632529100456364, 0.1969493898352026, 0.21130906674632455, 0.15403372419572348, 0.14585607332122286, 0.1625146774033368, 0.1621511914575855, 0.15675610632293613, 0.16373603787197866, 0.15974100628603405, 0.14569058207546204, 0.12936335636002128, 0.20575741410743253, 0.18344795431236205, 0.1789001859580922, 0.18636665191625157, 0.17971534658064592, 0.19052550564504456, 0.2133129162390046, 0.19982848581430313, 0.18338647137649855, 0.1508701770426344, 0.16436721717544367, 0.1586232925037674, 0.15822982923875006, 0.15739352565080622, 0.16766645352923149, 0.1626119905605179, 0.16163968965079, 0.17834473633071102, 0.16882576172863883, 0.18096316483149844, 0.16460137720981693, 0.16134325390194648, 0.17710723579600995, 0.15972780874293002, 0.2894250364333447, 0.2279750395049711, 0.19216643722983062, 0.2528394444792931, 0.162353946110671, 0.1680104946538633, 0.1563876167478857, 0.20455842486074693, 0.18299658325108126, 0.13577123980883954, 0.1914048218593133, 0.18653564114681764, 0.19422264332585548, 0.18980160162572768, 0.18531586222142582, 0.1761682949035549, 0.1850851096934778, 0.17834876856600967, 0.18936034840336224, 0.19429883686981364, 0.18004568091514717, 0.08346112942979833, 0.06593796529303031, 0.07526363449713613, 0.0659168569927151, 0.06699418885755526, 0.06760768274885609, 0.07944484738598989, 0.0675975076083043, 0.07204609805266626]}, "mutation_prompt": null}
{"id": "8c018cb2-f14e-4314-9b71-82b0bff0aab8", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.inf * np.ones(self.population_size)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.population = self.opposition_based_learning(self.population)\n            for i in range(self.population_size):\n                trial_vector = self.mutate_and_crossover(i)\n                trial_vector = np.clip(trial_vector, self.bounds[0], self.bounds[1])\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                    \n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial_vector\n                        self.best_fitness = trial_fitness\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return self.best_solution\n\n    def opposition_based_learning(self, population):\n        new_population = population.copy()\n        for i in range(self.population_size):\n            opposite = self.bounds[0] + self.bounds[1] - population[i]\n            if np.random.rand() < 0.5:\n                new_population[i] = opposite\n        return new_population\n\n    def mutate_and_crossover(self, idx):\n        indices = [i for i in range(self.population_size) if i != idx]\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = 0.8 if self.evaluations % 2 == 0 else 0.5  # Adaptive differential factor\n        mutant_vector = self.population[a] + F * (self.population[b] - self.population[c])\n        crossover_rate = 0.9\n        trial_vector = np.where(np.random.rand(self.dim) < crossover_rate, mutant_vector, self.population[idx])\n        return trial_vector", "name": "HybridDE", "description": "A hybrid Differential Evolution with Adaptive Differential Operator and Opposition-based Learning to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6598be0c-bafa-4f6b-a275-01fc6400149f", "metadata": {"aucs": [0.32034306549287217, 0.32791911607598234, 0.3503114533306865, 0.3167893539700848, 0.34396978210781237, 0.31037560853701807, 0.3174331088254264, 0.3028811768859606, 0.3486568260294952, 0.0440597738568953, 0.042608708665530126, 0.05345570152307244, 0.06433278154755995, 0.055711292729139994, 0.07291444558047655, 0.04545646265867598, 0.050602988445477615, 0.04534479875613939, 0.078074923789196, 0.07245323896893618, 0.06944174967089145, 0.06724334589926007, 0.062127913486329844, 0.07555420952929526, 0.06948765263850942, 0.0780013449569622, 0.06263184528951915, 0.05662700843138879, 0.05902481620939348, 0.06322239554895093, 0.051772299145757095, 0.06565217235317033, 0.056031444761510785, 0.058581067235190076, 0.05342907124702401, 0.06725479477360163, 0.9733587905077496, 0.9667187224092835, 0.9445646352021753, 0.9124476565147929, 0.9552625876527593, 0.9602147523780875, 0.9405619332925379, 0.9396999451769948, 0.943042851798187, 0.12450896822621649, 0.154581416553497, 0.14889765120593978, 0.13708423794446878, 0.12159285486880511, 0.1476935568597192, 0.16011462341231475, 0.13669584790505418, 0.13439670153663685, 0.25701998280365856, 0.25441919912672206, 0.24531760568333094, 0.20158711860322998, 0.21341202809872206, 0.23446043777624648, 0.21094437271014477, 0.2039854662120637, 0.18028897786422748, 0.07131097988222879, 0.08399541560402324, 0.10763419290593024, 0.06512833813039964, 0.06847363621672176, 0.07190752764778552, 0.058230438147558794, 0.08061182724104765, 0.08379791075455545, 0.16866432881442384, 0.18865768381702108, 0.16993518743853597, 0.17212719280665711, 0.16697702365581257, 0.1713147196063325, 0.1855051011751837, 0.15363570462116372, 0.1806776566341347, 0.005551091149389675, 0.00505410896234193, 0.0006357347181626949, 0.014264718424249478, 0.010153801559419695, 9.999999999998899e-05, 0.01642126621601603, 0.018233608283769187, 0.05119634279422025, 0.1096541507939115, 0.1214985960680991, 0.07810118117585074, 0.09459634456623967, 0.10256121795821749, 0.09545373918321842, 0.0976238377103098, 0.1209609262092548, 0.10707427761169308, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05491102871123965, 0.04009528327739442, 0.0373737197507098, 0.04228087790731938, 0.050679264505127164, 0.058949067982995484, 0.03729568392305316, 0.049799983292649785, 0.051092179919478675, 0.2817655850839986, 0.2810448110480718, 0.25846313167414936, 0.29249390221571514, 0.2788198809133673, 0.29955593047520046, 0.3395626117869346, 0.2972410375843354, 0.3114912840470061, 0.0715190283567636, 0.07344083399018053, 0.05777496208824473, 0.07757761346362546, 0.05347235693708574, 0.07429280060673504, 0.0740034011562768, 0.05990537650798411, 0.0648863721627031, 0.13803165815386997, 0.13529916632538586, 0.1444688015716158, 0.15933627826240626, 0.1385553997904344, 0.13372218674494885, 0.1656486149879025, 0.12552094675703507, 0.13799355116114653, 0.20492723085927722, 0.20441280172689302, 0.19360851578955662, 0.21147873323618283, 0.2167106036605777, 0.19233679755800592, 0.19632529100456364, 0.1969493898352026, 0.21130906674632455, 0.15403372419572348, 0.14585607332122286, 0.1625146774033368, 0.1621511914575855, 0.15675610632293613, 0.16373603787197866, 0.15974100628603405, 0.14569058207546204, 0.12936335636002128, 0.20575741410743253, 0.18344795431236205, 0.1789001859580922, 0.18636665191625157, 0.17971534658064592, 0.19052550564504456, 0.2133129162390046, 0.19982848581430313, 0.18338647137649855, 0.1508701770426344, 0.16436721717544367, 0.1586232925037674, 0.15822982923875006, 0.15739352565080622, 0.16766645352923149, 0.1626119905605179, 0.16163968965079, 0.17834473633071102, 0.16882576172863883, 0.18096316483149844, 0.16460137720981693, 0.16134325390194648, 0.17710723579600995, 0.15972780874293002, 0.2894250364333447, 0.2279750395049711, 0.19216643722983062, 0.2528394444792931, 0.162353946110671, 0.1680104946538633, 0.1563876167478857, 0.20455842486074693, 0.18299658325108126, 0.13577123980883954, 0.1914048218593133, 0.18653564114681764, 0.19422264332585548, 0.18980160162572768, 0.18531586222142582, 0.1761682949035549, 0.1850851096934778, 0.17834876856600967, 0.18936034840336224, 0.19429883686981364, 0.18004568091514717, 0.08346112942979833, 0.06593796529303031, 0.07526363449713613, 0.0659168569927151, 0.06699418885755526, 0.06760768274885609, 0.07944484738598989, 0.0675975076083043, 0.07204609805266626]}, "mutation_prompt": null}
