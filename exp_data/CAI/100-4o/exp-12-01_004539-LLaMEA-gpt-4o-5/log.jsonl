{"id": "f1d659cf-b23a-497d-8b4e-04cf78d102d7", "solution": "import numpy as np\n\nclass AdaptiveHarmonyDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.harmony_memory_size = 20\n        self.hmcr = 0.9  # Harmony Memory Consideration Rate\n        self.par = 0.3   # Pitch Adjustment Rate\n        self.f_min, self.f_max = self.bounds\n        self.de_cr = 0.9  # Crossover rate for Differential Evolution\n        self.de_f = 0.8   # Differential mutation factor\n\n    def _initialize_harmony_memory(self):\n        return np.random.uniform(self.f_min, self.f_max, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        eval_count = 0\n        harmony_memory = self._initialize_harmony_memory()\n        harmony_fitness = np.array([func(hm) for hm in harmony_memory])\n        eval_count += self.harmony_memory_size\n\n        while eval_count < self.budget:\n            new_harmony = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.harmony_memory_size)]\n                    new_harmony[i] = selected_harmony[i]\n                    if np.random.rand() < self.par:\n                        new_harmony[i] += np.random.uniform(-1, 1)\n                        new_harmony[i] = np.clip(new_harmony[i], self.f_min, self.f_max)\n                else:\n                    new_harmony[i] = np.random.uniform(self.f_min, self.f_max)\n\n            new_fitness = func(new_harmony)\n            eval_count += 1\n\n            if new_fitness < np.max(harmony_fitness):\n                worst_index = np.argmax(harmony_fitness)\n                harmony_memory[worst_index] = new_harmony\n                harmony_fitness[worst_index] = new_fitness\n\n            # Differential Evolution Refinement\n            for i in range(self.harmony_memory_size):\n                if eval_count >= self.budget:\n                    break\n                indices = list(range(self.harmony_memory_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = harmony_memory[a] + self.de_f * (harmony_memory[b] - harmony_memory[c])\n                mutant = np.clip(mutant, self.f_min, self.f_max)\n                trial = np.where(np.random.rand(self.dim) < self.de_cr, mutant, harmony_memory[i])\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < harmony_fitness[i]:\n                    harmony_memory[i] = trial\n                    harmony_fitness[i] = trial_fitness\n\n        best_index = np.argmin(harmony_fitness)\n        return harmony_memory[best_index]", "name": "AdaptiveHarmonyDE", "description": "Introduce a metaheuristic algorithm called \"Adaptive Harmony Search with Differential Evolution Refinement\" which combines harmony memory consideration and pitch adjustment from Harmony Search with mutation and crossover strategies from Differential Evolution to adaptively explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.4653144605393637, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.855730881831934, 0.8620921426934129, 0.8812097445246323, 0.8560749449669562, 0.8769815252035255, 0.8848152409285777, 0.8643905890369508, 0.8591716017428069, 0.8623266657645975, 0.7761974143849715, 0.7789536798732186, 0.7588732384746849, 0.758717397274354, 0.7940664551940396, 0.7564156782510427, 0.7454525444325699, 0.7797197520578245, 0.7937123625345552, 0.6484308294031105, 0.17606613545985217, 0.3913182525502221, 0.47624777778868466, 0.43748433825208954, 0.5878303539255938, 0.14190732565269404, 0.3042593744801667, 0.3038324742664099, 0.3166194135847419, 0.28698801371513605, 0.26126374792994134, 0.5635844696531338, 0.15453097035034458, 0.33289308863529055, 0.15173560110196938, 0.16168081100695963, 0.22764336622049142, 0.9769020040940182, 0.973759162565716, 0.9716244357025828, 0.9745746646797472, 0.9491871254453604, 0.9686621994424698, 0.9749554591196155, 0.9703643471951822, 0.955254360041559, 0.6469094209823285, 0.6681507207044179, 0.634148412056516, 0.5777718221628039, 0.6261594079242332, 0.625653815506584, 0.6550561583281511, 0.6883491811131883, 0.6831052766889295, 0.8098756301944259, 0.8221310985544054, 0.798537868530389, 0.8448015612619457, 0.8164104005390359, 0.82645756417237, 0.8695212791693308, 0.8311700001226923, 0.8186491756739629, 0.48015704212237664, 0.5515260599424865, 0.5961586084057362, 0.597399805051093, 0.554476475421463, 0.631135939102309, 0.6040807496120795, 0.5926101300354631, 0.6124059529347975, 0.5362669884528306, 0.20142838384140804, 0.07180919897642235, 0.5005137661257943, 0.5229012524850611, 0.6253640010233159, 0.5418730390263594, 0.5019076590096692, 0.5575526071956696, 0.5876314022342265, 0.5082086571003244, 0.5515528303097528, 0.5190710276153769, 0.5078729632953436, 0.5258505318133031, 0.5223233134128975, 0.5886363703571895, 0.5768573059074225, 0.6272159335274763, 0.6260837079287223, 0.6833169839408736, 0.6800387849712126, 0.659061748194194, 0.6465044267981094, 0.6699106047640216, 0.6745195279693343, 0.7038393592308607, 0.14895993995974754, 0.10704240444511648, 0.11776525618106448, 0.34251568744758376, 0.41609469247281705, 0.4077275231789561, 0.2664542405033816, 0.15835908704790558, 0.3493068419294253, 0.4291498191431269, 0.4607962342948645, 0.41768875161868546, 0.4147655642434105, 0.4756597675740166, 0.4456248687941121, 0.4490842867961905, 0.40098694380152256, 0.39901313351163126, 0.7802087097472425, 0.7833456006895861, 0.7875319709209201, 0.7814272825379622, 0.7764764930860197, 0.7610780405166573, 0.7758545539519996, 0.7683520378945773, 0.7783793520719277, 0.09644448647856574, 0.10968359630165758, 0.10635302692070381, 0.11958728465194113, 0.11401644075937378, 0.09049280604113319, 0.11108764843391161, 0.11279531647054064, 0.11699223314786344, 0.14789952810512752, 0.1833058584273659, 0.20572220298913535, 0.16389303243411835, 0.47328539205881104, 0.3481055709304752, 0.1900239770030384, 0.19341730853083017, 0.1805745712337946, 0.43163574167270513, 0.4610320579154594, 0.4797340010792732, 0.43049982026834555, 0.4328651460033627, 0.3656512659907779, 0.46660797555031785, 0.4980652969871818, 0.4674489960066962, 0.3181105159582498, 0.3693165384232776, 0.3715034891439828, 0.29932143889096263, 0.3217920840025239, 0.3825650169297101, 0.39859162360713907, 0.35605715013797334, 0.3322743071935742, 0.21184083772237616, 0.16221988753141303, 0.19349131371229056, 0.17663094491545195, 0.212993175899014, 0.19030732306568665, 0.20409069730884, 0.19461300943906734, 0.18467886544795975, 0.5818453094984358, 0.19291854449169132, 0.6978850907556711, 0.2245622033646636, 0.6735608172943937, 0.19762705857544816, 0.44083282945513114, 0.5379948282387422, 0.6329275143310997, 0.1461080088811123, 0.18708804218391484, 0.15328950725163615, 0.17650999286196034, 0.18688103872688588, 0.17595808864575502, 0.890287839002136, 0.18189773836397027, 0.16689371900260108, 0.874645759558551, 0.2095935841943607, 0.8778546406631126, 0.19234715378824951, 0.16669532977094836, 0.7885091424484132, 0.21184114662708042, 0.21152586687633557, 0.20988449046053215, 0.18480819053723507, 0.1808070301582999, 0.17144243462707398, 0.18040706076555502, 0.1869332758150376, 0.1978718455280547, 0.18188357379997788, 0.18149186139793017, 0.19703751709151485, 0.07493798704936017, 0.08260746724910628, 0.08054681771166194, 0.08755038891745714, 0.07801293657770625, 0.07322998244933565, 0.0732986794603181, 0.08169668278821773, 0.08270267992900393]}, "mutation_prompt": null}
{"id": "97c811ad-6ebb-43da-b855-81d45761bb68", "solution": "import numpy as np\n\nclass AdaptiveHarmonyDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.harmony_memory_size = 20\n        self.hmcr_start = 0.9  # Starting Harmony Memory Consideration Rate\n        self.hmcr_end = 0.6    # Ending Harmony Memory Consideration Rate\n        self.par = 0.3         # Pitch Adjustment Rate\n        self.f_min, self.f_max = self.bounds\n        self.de_cr = 0.9  # Crossover rate for Differential Evolution\n        self.de_f = 0.8   # Differential mutation factor\n\n    def _initialize_harmony_memory(self):\n        return np.random.uniform(self.f_min, self.f_max, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        eval_count = 0\n        harmony_memory = self._initialize_harmony_memory()\n        harmony_fitness = np.array([func(hm) for hm in harmony_memory])\n        eval_count += self.harmony_memory_size\n\n        while eval_count < self.budget:\n            new_harmony = np.zeros(self.dim)\n            # Dynamically adjust HMCR\n            hmcr = self.hmcr_start + (self.hmcr_end - self.hmcr_start) * (eval_count / self.budget)\n            for i in range(self.dim):\n                if np.random.rand() < hmcr:  # Changed from self.hmcr to hmcr\n                    selected_harmony = harmony_memory[np.random.randint(self.harmony_memory_size)]\n                    new_harmony[i] = selected_harmony[i]\n                    if np.random.rand() < self.par:\n                        new_harmony[i] += np.random.uniform(-1, 1)\n                        new_harmony[i] = np.clip(new_harmony[i], self.f_min, self.f_max)\n                else:\n                    new_harmony[i] = np.random.uniform(self.f_min, self.f_max)\n\n            new_fitness = func(new_harmony)\n            eval_count += 1\n\n            if new_fitness < np.max(harmony_fitness):\n                worst_index = np.argmax(harmony_fitness)\n                harmony_memory[worst_index] = new_harmony\n                harmony_fitness[worst_index] = new_fitness\n\n            # Differential Evolution Refinement\n            for i in range(self.harmony_memory_size):\n                if eval_count >= self.budget:\n                    break\n                indices = list(range(self.harmony_memory_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = harmony_memory[a] + self.de_f * (harmony_memory[b] - harmony_memory[c])\n                mutant = np.clip(mutant, self.f_min, self.f_max)\n                trial = np.where(np.random.rand(self.dim) < self.de_cr, mutant, harmony_memory[i])\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < harmony_fitness[i]:\n                    harmony_memory[i] = trial\n                    harmony_fitness[i] = trial_fitness\n\n        best_index = np.argmin(harmony_fitness)\n        return harmony_memory[best_index]", "name": "AdaptiveHarmonyDE", "description": "Enhance the exploration phase by dynamically adjusting the Harmony Memory Consideration Rate (HMCR) based on a linear decay schedule to balance exploration and exploitation throughout the optimization process.", "configspace": "", "generation": 1, "fitness": 0.4475848462220945, "feedback": "", "error": "", "parent_id": "f1d659cf-b23a-497d-8b4e-04cf78d102d7", "metadata": {"aucs": [0.8589909856722023, 0.8678588772430881, 0.867252822789688, 0.8538399418888022, 0.8798742841137979, 0.8808774005421747, 0.8527197942493773, 0.8702496152502903, 0.8653014278475656, 0.7865118193895914, 0.7818008489797073, 0.7803458142908366, 0.750276070168304, 0.7961238742223709, 0.783911636686421, 0.7544588138275147, 0.7883462029289465, 0.7530444261478187, 0.21384314523383452, 0.1575493383519484, 0.17271977244997339, 0.21632472956782545, 0.12721151872402392, 0.16821490805468908, 0.1327730517431741, 0.15928041723659103, 0.16941583359849588, 0.1417451155611199, 0.14864653107305603, 0.45947252837560715, 0.15218417886089752, 0.13797814663826213, 0.15733183958225438, 0.15230230425105074, 0.15181289699754819, 0.1491224736024076, 0.9769020040940182, 0.973759162565716, 0.9716244357025828, 0.9745746646797472, 0.9491871254453604, 0.9686621994424698, 0.9749554591196155, 0.9703643471951822, 0.9616845205512019, 0.633679271692858, 0.7033418622722877, 0.6560430646623476, 0.6311178079250427, 0.6493461398247987, 0.6201028594777789, 0.6156289123016081, 0.65014396498389, 0.6647119575180971, 0.7987152886941078, 0.8483013475854306, 0.809928484833826, 0.8140339403184237, 0.8207362949685604, 0.804390782980162, 0.7928702195734647, 0.8446021453188675, 0.8220526606251064, 0.49710091881676144, 0.5597203815086768, 0.533431707809666, 0.45266272117030193, 0.5532074346908362, 0.5633331878124573, 0.5839998782671741, 0.6092096043073159, 0.60400812302934, 0.37868984962462704, 0.13909010524738374, 0.05379105506416049, 0.5464962085031593, 0.5179381234886196, 0.5763505565393846, 0.6275256400273463, 0.5678729923624884, 0.5898080315573455, 0.5520857467867094, 0.5189146202085135, 0.5837420984772946, 0.5513232183212194, 0.5512298120830363, 0.41595447483558323, 0.5155909891916677, 0.4903734154202938, 0.4629057373584836, 0.5915503637330585, 0.6073863695057532, 0.6464434765445113, 0.6950222201557088, 0.6898328103715642, 0.6251601159704803, 0.6697245171017869, 0.6589762920172607, 0.6868279849874332, 0.1024485227493993, 0.0835025576076529, 0.12275846375188071, 0.3787668804674621, 0.37347733287947993, 0.20674821482099326, 0.3424211921875103, 0.3684977145495655, 0.26398435105050266, 0.41460803026828186, 0.4402935544213862, 0.41339988987652077, 0.45122952851392195, 0.4413321343033514, 0.4486621557993896, 0.39795288717562016, 0.3995900090258617, 0.4017752136742002, 0.7917894256454452, 0.8184927055675151, 0.7910597334890898, 0.7717100218257624, 0.7817097391391848, 0.7676095490936075, 0.7919689632355563, 0.7556299462445808, 0.7850994999679555, 0.10005089714698079, 0.1596884642175337, 0.1074671796098644, 0.11656628191778651, 0.12451859835613355, 0.1176734888762907, 0.12703857584224976, 0.1173291369186813, 0.09651787909960963, 0.14147890439563093, 0.1837366847500903, 0.1860304871857773, 0.18011414511157142, 0.13814220646868092, 0.3192245751336251, 0.1374499811796004, 0.19305915605717172, 0.17360300321580813, 0.47205747468118453, 0.4384503144169978, 0.48128649473371, 0.49987555597851474, 0.46879554182918426, 0.4456945913226156, 0.5436245510438303, 0.5134984005166383, 0.48559260209249777, 0.3722507150800618, 0.40560040313473045, 0.3597744262508932, 0.33565922441519747, 0.3139554111777284, 0.30966930855407415, 0.3506594495546559, 0.365225455661792, 0.3180222519602458, 0.199801499939114, 0.18422761121664666, 0.18677561440659018, 0.223001419160053, 0.17181798894497147, 0.19072030417187802, 0.18137589881549954, 0.20356825562651837, 0.19107769916345207, 0.4916888723240087, 0.6023435726579303, 0.523574822283879, 0.22225184053177727, 0.6177886673453632, 0.19858678870108715, 0.19125348961350275, 0.5269085370685199, 0.6049958325213238, 0.1461171728557944, 0.1870971416099233, 0.1532360326782054, 0.18473216611829302, 0.18687671464250566, 0.175939596561848, 0.8815523742795737, 0.18191250380758783, 0.1668843289256925, 0.8524082555764432, 0.20980767583371773, 0.8603017745421517, 0.20366438260303898, 0.16668701191735746, 0.8014679209190863, 0.21200487465388418, 0.21153449419370296, 0.20434172176372223, 0.16609448916842307, 0.19835116105063755, 0.1791086618219797, 0.18068428836740635, 0.17891591908690263, 0.1978718455280547, 0.17685591989295568, 0.20236301892375064, 0.17619354554091282, 0.078838966121908, 0.08409234629681761, 0.07708777840215553, 0.08361460565343237, 0.07618370775278749, 0.06968262862232932, 0.08430959438328123, 0.07246978567346163, 0.08292853510003406]}, "mutation_prompt": null}
