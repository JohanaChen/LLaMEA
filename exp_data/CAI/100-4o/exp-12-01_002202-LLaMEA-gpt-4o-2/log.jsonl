{"id": "5f8d4e27-8def-4bad-9cef-1aafe479d916", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.F = 0.8  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.temperature = 1000  # SA initial temperature\n        self.cooling_rate = 0.95  # SA cooling rate\n    \n    def __call__(self, func):\n        remaining_budget = self.budget\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        remaining_budget -= self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        while remaining_budget > 0:\n            # Differential Evolution Process\n            for i in range(self.pop_size):\n                if remaining_budget <= 0:\n                    break\n                a, b, c = population[np.random.choice(range(self.pop_size), 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                trial_fitness = func(trial)\n                remaining_budget -= 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n            \n            # Simulated Annealing Process\n            for i in range(self.pop_size):\n                if remaining_budget <= 0:\n                    break\n                candidate = population[i] + np.random.normal(0, 1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                remaining_budget -= 1\n                delta_e = candidate_fitness - fitness[i]\n                if delta_e < 0 or np.random.rand() < np.exp(-delta_e / self.temperature):\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best_solution = candidate\n                        best_fitness = candidate_fitness\n            \n            # Cooling down the temperature\n            self.temperature *= self.cooling_rate\n        \n        return best_solution, best_fitness", "name": "HybridDESA", "description": "A novel hybrid metaheuristic algorithm combining Differential Evolution and Simulated Annealing to explore and exploit the search space effectively.", "configspace": "", "generation": 0, "fitness": 0.24359632127190498, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.3818760724567096, 0.34979388843626136, 0.377916468627825, 0.3794452917280735, 0.40238519396819816, 0.3596393904550246, 0.39041505535231524, 0.3588515306564173, 0.3515339171059786, 0.5049368144936178, 0.5676285124518282, 0.475532619579892, 0.5011966592386463, 0.5471988237770598, 0.5039918551033923, 0.5138816948844551, 0.5741589343969079, 0.5156137503815975, 0.08130829610923573, 0.08451841034482221, 0.08139933072421279, 0.08782059068549275, 0.09152837584960505, 0.08001425608655754, 0.0974907043404244, 0.0857343546792505, 0.08132700454628716, 0.06913051050350294, 0.07707854070486886, 0.07348712543812586, 0.08459282212401553, 0.0798970899416821, 0.07263647567669107, 0.0744397345558615, 0.08308722585891648, 0.08516111052396258, 0.8754587713402524, 0.9813595726266231, 0.8874013619139072, 0.9075138464060609, 0.7712248689627412, 0.9746591325633958, 0.9199032049263208, 0.9355078075145797, 0.9302865545610022, 0.2639214285061978, 0.23350400820291006, 0.2234640246951437, 0.23957100058099312, 0.23748524190903464, 0.23504314018617933, 0.2639225316796484, 0.2798055261655831, 0.22976748959138704, 0.4095292702030875, 0.3878180535409279, 0.28370600155310444, 0.35430851236926175, 0.3828095054720113, 0.3946484032707882, 0.36676388738276344, 0.295319042841359, 0.37811393615031397, 0.20230846828591476, 0.21895432769894185, 0.23241291981246137, 0.21801140660891638, 0.25822970044290194, 0.16507576624687115, 0.25034966557640637, 0.2249804361418566, 0.2203495981352921, 0.20321381437255848, 0.23344975722276662, 0.17649110451140604, 0.14774148962333855, 0.25109912025373327, 0.20798901942223658, 0.20587898658554737, 0.22022591531856583, 0.17591695745122105, 0.22151357488619783, 0.23383786345112156, 0.1906835666347544, 0.2429270305995347, 0.23226554049735126, 0.1996687121213231, 0.2659190112672565, 0.2157731838714786, 0.28294224489250497, 0.34691500304553824, 0.3490271214424855, 0.3479563485669711, 0.40213064815774124, 0.4192201766916296, 0.2928021704098056, 0.40180031841329333, 0.36371627639840987, 0.3748242741471919, 0.09992395014741795, 0.061464541752804136, 0.13232632689779, 0.09337971448695737, 0.13073327830323433, 0.0760768806649148, 0.0758115519801188, 0.09016255951051866, 0.08396857750621167, 0.1731469641550215, 0.13999240409656521, 0.14216334298997768, 0.18437264436299938, 0.16155492718190456, 0.1619350340196788, 0.16161322159593727, 0.131897830811596, 0.1688528006815293, 0.3274071255049502, 0.29091632115162736, 0.3115518811244289, 0.3012890481701581, 0.2946348111595144, 0.32078625438679687, 0.3032785681550255, 0.3248059952918829, 0.310421507709683, 0.08893935105010042, 0.07500521176821351, 0.07837658617882737, 0.07828108998425509, 0.06688017938798507, 0.07606400852670325, 0.08496102324117583, 0.0751657023068748, 0.07343576850874578, 0.15477440996416392, 0.14398029400900492, 0.1692887520199794, 0.15363455942793902, 0.17201545856280187, 0.13248209202698868, 0.13993761302743857, 0.17867737211668178, 0.15045707743202696, 0.2184323471855416, 0.22232688643909604, 0.2194973767392362, 0.20344805143167, 0.20192742861376212, 0.23320050929825853, 0.22838166953245875, 0.22146744231673154, 0.22347674056644162, 0.18174407300294493, 0.16571130567603254, 0.1619242257990421, 0.19901792507907468, 0.16323201743586102, 0.16514909566069547, 0.18097593081389796, 0.17456109782769214, 0.17942056156286357, 0.1891731964593174, 0.17597969619249088, 0.184419191503992, 0.18865517715339142, 0.16736183435733076, 0.17246196746256015, 0.17278304928016763, 0.17091670511321166, 0.1808380067808778, 0.17171281871760913, 0.17385794344632954, 0.18231640866818744, 0.18246348728461292, 0.17183004745037156, 0.17608969198287394, 0.17966417186994477, 0.1833436768025245, 0.18046143998579156, 0.16760885434551942, 0.17423885107766257, 0.17933541614760018, 0.17353847479324536, 0.35019465971689345, 0.2119067750374144, 0.1745553539414224, 0.17645387811685742, 0.1759289910459162, 0.42060335537638216, 0.16099153178946546, 0.16357075291609557, 0.18483917390798688, 0.3777305314165146, 0.4424487558659217, 0.14459031000136635, 0.17383715612658668, 0.15027401098461157, 0.19164134889120144, 0.18746979768057315, 0.2141432520630463, 0.17725885390469498, 0.21013506571625562, 0.1920638170584471, 0.19068038671049814, 0.1828978434580114, 0.18366452801075683, 0.06314405333415996, 0.0771635630984463, 0.07137451451307242, 0.07529822744951031, 0.060992155114565905, 0.06734189663966039, 0.0677059558135712, 0.07139744514817303, 0.06867197257850965]}, "mutation_prompt": null}
{"id": "0d9b3d53-488a-4054-9872-cd1cfdceeef9", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.F = 0.8  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.temperature = 1000  # SA initial temperature\n        self.cooling_rate = 0.95  # SA cooling rate\n    \n    def __call__(self, func):\n        remaining_budget = self.budget\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        remaining_budget -= self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        while remaining_budget > 0:\n            # Differential Evolution Process\n            for i in range(self.pop_size):\n                if remaining_budget <= 0:\n                    break\n                a, b, c = population[np.random.choice(range(self.pop_size), 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                trial_fitness = func(trial)\n                remaining_budget -= 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n            \n            # Simulated Annealing Process\n            for i in range(self.pop_size):\n                if remaining_budget <= 0:\n                    break\n                candidate = population[i] + np.random.normal(0, 1, self.dim)\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                remaining_budget -= 1\n                delta_e = candidate_fitness - fitness[i]\n                if delta_e < 0 or np.random.rand() < np.exp(-delta_e / self.temperature):\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best_solution = candidate\n                        best_fitness = candidate_fitness\n            \n            # Cooling down the temperature\n            self.temperature *= self.cooling_rate\n        \n        return best_solution, best_fitness", "name": "HybridDESA", "description": "A novel hybrid metaheuristic algorithm combining Differential Evolution and Simulated Annealing to explore and exploit the search space effectively.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5f8d4e27-8def-4bad-9cef-1aafe479d916", "metadata": {"aucs": [0.3818760724567096, 0.34979388843626136, 0.377916468627825, 0.3794452917280735, 0.40238519396819816, 0.3596393904550246, 0.39041505535231524, 0.3588515306564173, 0.3515339171059786, 0.5049368144936178, 0.5676285124518282, 0.475532619579892, 0.5011966592386463, 0.5471988237770598, 0.5039918551033923, 0.5138816948844551, 0.5741589343969079, 0.5156137503815975, 0.08130829610923573, 0.08451841034482221, 0.08139933072421279, 0.08782059068549275, 0.09152837584960505, 0.08001425608655754, 0.0974907043404244, 0.0857343546792505, 0.08132700454628716, 0.06913051050350294, 0.07707854070486886, 0.07348712543812586, 0.08459282212401553, 0.0798970899416821, 0.07263647567669107, 0.0744397345558615, 0.08308722585891648, 0.08516111052396258, 0.8754587713402524, 0.9813595726266231, 0.8874013619139072, 0.9075138464060609, 0.7712248689627412, 0.9746591325633958, 0.9199032049263208, 0.9355078075145797, 0.9302865545610022, 0.2639214285061978, 0.23350400820291006, 0.2234640246951437, 0.23957100058099312, 0.23748524190903464, 0.23504314018617933, 0.2639225316796484, 0.2798055261655831, 0.22976748959138704, 0.4095292702030875, 0.3878180535409279, 0.28370600155310444, 0.35430851236926175, 0.3828095054720113, 0.3946484032707882, 0.36676388738276344, 0.295319042841359, 0.37811393615031397, 0.20230846828591476, 0.21895432769894185, 0.23241291981246137, 0.21801140660891638, 0.25822970044290194, 0.16507576624687115, 0.25034966557640637, 0.2249804361418566, 0.2203495981352921, 0.20321381437255848, 0.23344975722276662, 0.17649110451140604, 0.14774148962333855, 0.25109912025373327, 0.20798901942223658, 0.20587898658554737, 0.22022591531856583, 0.17591695745122105, 0.22151357488619783, 0.23383786345112156, 0.1906835666347544, 0.2429270305995347, 0.23226554049735126, 0.1996687121213231, 0.2659190112672565, 0.2157731838714786, 0.28294224489250497, 0.34691500304553824, 0.3490271214424855, 0.3479563485669711, 0.40213064815774124, 0.4192201766916296, 0.2928021704098056, 0.40180031841329333, 0.36371627639840987, 0.3748242741471919, 0.09992395014741795, 0.061464541752804136, 0.13232632689779, 0.09337971448695737, 0.13073327830323433, 0.0760768806649148, 0.0758115519801188, 0.09016255951051866, 0.08396857750621167, 0.1731469641550215, 0.13999240409656521, 0.14216334298997768, 0.18437264436299938, 0.16155492718190456, 0.1619350340196788, 0.16161322159593727, 0.131897830811596, 0.1688528006815293, 0.3274071255049502, 0.29091632115162736, 0.3115518811244289, 0.3012890481701581, 0.2946348111595144, 0.32078625438679687, 0.3032785681550255, 0.3248059952918829, 0.310421507709683, 0.08893935105010042, 0.07500521176821351, 0.07837658617882737, 0.07828108998425509, 0.06688017938798507, 0.07606400852670325, 0.08496102324117583, 0.0751657023068748, 0.07343576850874578, 0.15477440996416392, 0.14398029400900492, 0.1692887520199794, 0.15363455942793902, 0.17201545856280187, 0.13248209202698868, 0.13993761302743857, 0.17867737211668178, 0.15045707743202696, 0.2184323471855416, 0.22232688643909604, 0.2194973767392362, 0.20344805143167, 0.20192742861376212, 0.23320050929825853, 0.22838166953245875, 0.22146744231673154, 0.22347674056644162, 0.18174407300294493, 0.16571130567603254, 0.1619242257990421, 0.19901792507907468, 0.16323201743586102, 0.16514909566069547, 0.18097593081389796, 0.17456109782769214, 0.17942056156286357, 0.1891731964593174, 0.17597969619249088, 0.184419191503992, 0.18865517715339142, 0.16736183435733076, 0.17246196746256015, 0.17278304928016763, 0.17091670511321166, 0.1808380067808778, 0.17171281871760913, 0.17385794344632954, 0.18231640866818744, 0.18246348728461292, 0.17183004745037156, 0.17608969198287394, 0.17966417186994477, 0.1833436768025245, 0.18046143998579156, 0.16760885434551942, 0.17423885107766257, 0.17933541614760018, 0.17353847479324536, 0.35019465971689345, 0.2119067750374144, 0.1745553539414224, 0.17645387811685742, 0.1759289910459162, 0.42060335537638216, 0.16099153178946546, 0.16357075291609557, 0.18483917390798688, 0.3777305314165146, 0.4424487558659217, 0.14459031000136635, 0.17383715612658668, 0.15027401098461157, 0.19164134889120144, 0.18746979768057315, 0.2141432520630463, 0.17725885390469498, 0.21013506571625562, 0.1920638170584471, 0.19068038671049814, 0.1828978434580114, 0.18366452801075683, 0.06314405333415996, 0.0771635630984463, 0.07137451451307242, 0.07529822744951031, 0.060992155114565905, 0.06734189663966039, 0.0677059558135712, 0.07139744514817303, 0.06867197257850965]}, "mutation_prompt": null}
