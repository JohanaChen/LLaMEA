{"id": "1d6d20db-1f18-46d8-a797-f725b7c196b5", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.temp_initial = 100.0\n        self.temp_min = 1.0\n        self.alpha = 0.9\n        self.eval_count = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.population_size, self.dim)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.eval_count += self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution found\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                # Simulated Annealing Local Refinement\n                if self.eval_count < self.budget:\n                    temp = max(self.temp_min, self.temp_initial * (self.alpha ** (self.eval_count / self.budget)))\n                    neighbor = trial + np.random.uniform(-0.5, 0.5, self.dim) * temp\n                    neighbor = np.clip(neighbor, self.lower_bound, self.upper_bound)\n                    neighbor_fitness = func(neighbor)\n                    self.eval_count += 1\n\n                    if neighbor_fitness < trial_fitness or np.random.rand() < np.exp((trial_fitness - neighbor_fitness) / temp):\n                        population[i] = neighbor\n                        fitness[i] = neighbor_fitness\n\n                        if neighbor_fitness < best_fitness:\n                            best_solution = neighbor\n                            best_fitness = neighbor_fitness\n\n        return best_solution, best_fitness", "name": "HybridDE_SA", "description": "A hybrid metaheuristic combining Differential Evolution with simulated annealing-inspired local refinement to effectively explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.1347286854097639, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.11869729595922507, 0.12265767254710302, 0.09728453378545054, 0.14539376441113838, 0.14829132559990776, 0.14608003228654065, 0.119401795816521, 0.12033326301289271, 0.12185092566424205, 0.1525773571739535, 0.15775414503061747, 0.1421874165387661, 0.11135793738193389, 0.14520373612853998, 0.1231573658257481, 0.14247242385952053, 0.12872679989131253, 0.1445487888621454, 0.0631967509137028, 0.07715790091649632, 0.06911533146323745, 0.07483811934620299, 0.07457467751576419, 0.060779039243016975, 0.06675343788810173, 0.05974284017924458, 0.06254718439048956, 0.02394545514849855, 0.021043410387573402, 0.035117817759751424, 0.03282248663325649, 0.040876185222233796, 0.029080171732945748, 0.05036547126620372, 0.05507056926076781, 0.0371088086386675, 0.9852428284390566, 0.9702195366183911, 0.9876755568642355, 0.9905038141552186, 0.977955759185154, 0.9830640748951271, 0.9911970593934839, 0.9851830395784283, 0.9837400092328046, 0.1111250651126573, 0.08428720878250662, 0.09017368461391251, 0.07171205456847729, 0.11377517430959982, 0.08069817386307965, 0.14594987515392277, 0.07985110824750385, 0.11984042877944945, 0.10625434221853325, 0.14935937928516707, 0.11350032382727204, 0.24133040448275533, 0.20101086091828313, 0.181614578413534, 0.15587202886363116, 0.1654491636122788, 0.1357821524313737, 0.08573329334736246, 0.09433860100909075, 0.08407476734437602, 0.09824359029530683, 0.10798576208451649, 0.10728673626746787, 0.11362353049297325, 0.07984031931960966, 0.09553223635283214, 0.11757398134815378, 0.11135214961534967, 0.12193545138219775, 0.08898636275459415, 0.09333682921156361, 0.08217427378022091, 0.08226064311239045, 0.0762775763571939, 0.08002211788930091, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009451811344612704, 0.0006789545215513115, 0.04623095796078436, 0.05819472061961917, 0.03746990545619078, 0.07059258132564306, 0.033942015383501944, 0.03156687663575486, 0.05183197099736736, 0.05802787207132165, 0.05766142232490579, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06888970465366506, 0.06061847167217693, 0.07291864962001204, 0.07480284130549186, 0.06120767038152575, 0.07277850323156965, 0.07827414006399158, 0.07350964820877837, 0.08407769220289085, 0.12793262356394464, 0.16123994341304715, 0.1536320631307495, 0.17219174794217418, 0.15131140200480075, 0.15568191839075285, 0.16112956940342849, 0.13407965253320797, 0.1351104571921804, 0.08569149016107225, 0.07236224121386914, 0.07257670136454364, 0.05882968674286371, 0.06764874206891547, 0.05460202250342716, 0.057085936786344216, 0.05188447463585033, 0.04067890815664488, 0.12914007027703678, 0.12946330338502232, 0.12636769127236624, 0.1276027131944375, 0.1384244957636167, 0.128803356677348, 0.1371843525951092, 0.16018165266673334, 0.12550547064348483, 0.12569078295861125, 0.12888791355688534, 0.1613932299901244, 0.13800672315110074, 0.13262323093744421, 0.12271214798894448, 0.1398015323750993, 0.17377774300845283, 0.14102468958387304, 0.0896521111438866, 0.07612894135041648, 0.09136350903282653, 0.08031327293547963, 0.07368368418502447, 0.0868875399624216, 0.09842877370829084, 0.0997711199450243, 0.0717548460905435, 0.14281873227582742, 0.14116201914450943, 0.14846779307164992, 0.1634071495056867, 0.1391800883079597, 0.13372762146287753, 0.13904230368609827, 0.13111973508303731, 0.14687379227188235, 0.15701549729035413, 0.1596241870148959, 0.15244334927288206, 0.16655207217689072, 0.1685506503236287, 0.16731195550515765, 0.146254526358497, 0.1587533156109947, 0.1650179159631887, 0.12745026536333703, 0.10758869412611372, 0.10690337462280497, 0.1109155217846266, 0.1207914665021157, 0.10724055581679692, 0.11072553296029841, 0.10946965820327592, 0.09944402076601677, 0.11040265245322212, 0.1037871329466179, 0.11319013175426684, 0.05078180959487222, 0.06613670690436524, 0.09406701472869938, 0.12704466694752792, 0.14610441972095978, 0.1519543563715784, 0.18157898492889013, 0.1737281760709598, 0.1876960636620798, 0.1839222630029982, 0.1683192747884168, 0.18797392769570465, 0.191577835900951, 0.17385137729316902, 0.17211664688237538, 0.023247760229651027, 0.04262975264705893, 0.031393493129599714, 0.03386081524798301, 0.03425093938292756, 0.027965395179979313, 0.030692883743026367, 0.03803354422653826, 0.029607193542352972]}, "mutation_prompt": null}
{"id": "20eec9dd-a65f-404c-8bff-d2d456cd92c7", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.temp_initial = 100.0\n        self.temp_min = 1.0\n        self.alpha = 0.9\n        self.eval_count = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.population_size, self.dim)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.eval_count += self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                adaptive_mutation = self.mutation_factor * (1 - self.eval_count / self.budget)\n                mutant = np.clip(x1 + adaptive_mutation * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                adaptive_crossover = self.crossover_rate * (1 - self.eval_count / (2 * self.budget))\n                crossover_mask = np.random.rand(self.dim) < adaptive_crossover\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution found\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                # Simulated Annealing Local Refinement\n                if self.eval_count < self.budget:\n                    temp = max(self.temp_min, self.temp_initial * (self.alpha ** (self.eval_count / self.budget)))\n                    neighbor = trial + np.random.uniform(-0.5, 0.5, self.dim) * temp\n                    neighbor = np.clip(neighbor, self.lower_bound, self.upper_bound)\n                    neighbor_fitness = func(neighbor)\n                    self.eval_count += 1\n\n                    if neighbor_fitness < trial_fitness or np.random.rand() < np.exp((trial_fitness - neighbor_fitness) / temp):\n                        population[i] = neighbor\n                        fitness[i] = neighbor_fitness\n\n                        if neighbor_fitness < best_fitness:\n                            best_solution = neighbor\n                            best_fitness = neighbor_fitness\n\n        return best_solution, best_fitness", "name": "HybridDE_SA", "description": "Enhanced HybridDE_SA using adaptive mutation and crossover rates for more dynamic search exploration and exploitation.", "configspace": "", "generation": 1, "fitness": 0.15190377518447284, "feedback": "", "error": "", "parent_id": "1d6d20db-1f18-46d8-a797-f725b7c196b5", "metadata": {"aucs": [0.12054134189030175, 0.10242770153043512, 0.1003973127102541, 0.17782957063684734, 0.17489645766627238, 0.14054038840545924, 0.13239077858121473, 0.14115313131116003, 0.1315367723989681, 0.3041079633314512, 0.28690058685262043, 0.2954556580612516, 0.33605009199874036, 0.392156729315873, 0.30263943642669755, 0.3523370453876845, 0.30164646483196655, 0.33981320992365605, 0.0994257543963245, 0.11008821508755406, 0.11862544993770718, 0.10156762089082894, 0.09680544367006028, 0.09839891853237093, 0.09236274737350414, 0.09192342490284044, 0.09573136478572675, 0.07945134658954789, 0.09122798871327853, 0.08469817760159726, 0.10247023328577365, 0.08366071502291594, 0.0880910931634662, 0.09794173716167642, 0.0905426580248826, 0.09341472802450246, 0.9852428284390566, 0.9702089533079447, 0.9876756373179086, 0.9905038141552186, 0.9780894247085887, 0.9830622879173591, 0.9911970593934839, 0.963037282979531, 0.9837451441578986, 0.16193825469656986, 0.14906119989798228, 0.14241249912101794, 0.14953086688557438, 0.10209358966545001, 0.10976707182697432, 0.1880143600730385, 0.16509892486122413, 0.14592516408038458, 0.1514906084670785, 0.11310266667806279, 0.12462870267996784, 0.20961904503490236, 0.19399944963759785, 0.18204965770509585, 0.1369844908814446, 0.17007769119045535, 0.16100233234680816, 0.10247743162273726, 0.12628604314169756, 0.16808153176989726, 0.1300526783128062, 0.12131661474334354, 0.1111990094623927, 0.11354668495128373, 0.11407235334636057, 0.11683452562344465, 0.04759636945699253, 0.04335277289635542, 0.10117012355982202, 0.12918713218959188, 0.09862439106826915, 0.10573850475456315, 0.1124577811017683, 0.1163897232066291, 0.12478211228516067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036422147762341095, 0.03512181637534251, 0.04028081612122192, 0.032758370217174315, 0.045542100738543145, 0.017275688258582833, 0.0382014182399536, 0.04370584491188689, 0.030737650612400302, 9.999999999998899e-05, 0.0011557001309474568, 9.999999999998899e-05, 0.0007620873080524948, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002320431460687944, 0.003205175792636461, 0.07548182652242685, 0.08468417537048556, 0.07635619784999925, 0.08242840517911298, 0.08977432720509149, 0.09012431551555311, 0.07692260523532335, 0.07601577328593101, 0.08751405784649702, 0.16551698070294496, 0.1623513790471628, 0.1659683775675861, 0.16167746574593678, 0.1713590224959327, 0.16410802515479372, 0.184581569709516, 0.1376438878004247, 0.13215047983816497, 0.07504959702178238, 0.07453831951812939, 0.07990843312874307, 0.07800273768047505, 0.07352840193960442, 0.07040836994266264, 0.0769079941145756, 0.08039231299902805, 0.07999953197270038, 0.1252451298288979, 0.17145392689407002, 0.1343689436593244, 0.12377579079117162, 0.1409267512657736, 0.13500780248057287, 0.14730759168519636, 0.13834177174309004, 0.12848220001463073, 0.13911848968146046, 0.14117938050192003, 0.1613932299901244, 0.13800672315110074, 0.12153516156912514, 0.13818255728286444, 0.1314937905531477, 0.17377774300845283, 0.12459028245551784, 0.08592533497729982, 0.07425051448744502, 0.08398582550377798, 0.08265201671587186, 0.08201653214429006, 0.09781142922285957, 0.11191058791565922, 0.10160438208745015, 0.08212329622241576, 0.13376919501276263, 0.14413786770905468, 0.15881182524999826, 0.15365033869333455, 0.1392591214111326, 0.13974580581582063, 0.16165162956591306, 0.1368518008009223, 0.14100124808730163, 0.16436896314873228, 0.168257696692781, 0.17367510018446464, 0.1801930462193453, 0.1809957251396842, 0.19390042449474953, 0.18997920071251484, 0.18029627819377547, 0.17346250722928203, 0.131060598259228, 0.12166702425523712, 0.12150040346688151, 0.11050913019962738, 0.12957269184025721, 0.09554251337827957, 0.13255226982977542, 0.1122748578706374, 0.09818000297265994, 0.11040265245322212, 0.10472176480634876, 0.11308622188247974, 0.060912967080903435, 0.08242445789766117, 0.06276767813026052, 0.10891794729608495, 0.11015544847190373, 0.14550274043931144, 0.17569712679704186, 0.1905159262792564, 0.16998813300343862, 0.1803140999604098, 0.1753878400694504, 0.19314062180283775, 0.17185167809009216, 0.1940467155666935, 0.1803380777123299, 0.04163604688408018, 0.0536833411582287, 0.034969380577945186, 0.04082344829933804, 0.04073991908846164, 0.037054570377989315, 0.05158920005959011, 0.03961636629752707, 0.03333974875008294]}, "mutation_prompt": null}
