{"id": "0cccf6d5-1713-4655-83d3-86dd075781a5", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        budget_used = self.pop_size\n\n        while budget_used < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best = trial\n                        best_idx = i\n\n                if budget_used >= self.budget:\n                    break\n\n            # Neighborhood Search\n            if budget_used < self.budget:\n                for neighbor in self._get_neighborhood(best):\n                    neighbor_fitness = func(neighbor)\n                    budget_used += 1\n                    if neighbor_fitness < fitness[best_idx]:\n                        best = neighbor\n                        best_idx = np.argmin(fitness)\n                        fitness[best_idx] = neighbor_fitness\n                        population[best_idx] = neighbor\n\n                    if budget_used >= self.budget:\n                        break\n\n        return best\n\n    def _get_neighborhood(self, best):\n        neighborhood_size = self.dim\n        for _ in range(neighborhood_size):\n            neighbor = best + np.random.normal(0, 0.1, self.dim)\n            yield np.clip(neighbor, self.lower_bound, self.upper_bound)", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Neighborhood Search - a hybrid algorithm combining adaptive parameter control and local search for efficient exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.38486310150685027, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8035783599308934, 0.8230311509932418, 0.8010837980742216, 0.8104386440057828, 0.8028812230406388, 0.8081764321832439, 0.8138267076973762, 0.8128555756896053, 0.8115891991638691, 0.6482107988285518, 0.6530099562589454, 0.643628567272603, 0.6230685421766647, 0.6599619242285899, 0.6258704562751842, 0.6132435205435985, 0.6529460575408019, 0.6534226886229704, 0.11484128654943793, 0.1269737833864889, 0.12275139823393832, 0.12277324324748207, 0.1373793146980029, 0.12836039320106007, 0.12264901161234143, 0.1129679237373542, 0.1287265909264308, 0.11235990408802732, 0.12002967326065284, 0.12463785025462693, 0.11285235674867566, 0.10759315025190264, 0.11991325361997951, 0.1011589762941918, 0.11130648095038509, 0.10669616701644447, 0.9473491183667582, 0.9565496317700022, 0.9427115123902101, 0.8948618894267806, 0.9493887427774764, 0.9017229732942722, 0.9127728969659251, 0.9444208499700212, 0.9235043707728424, 0.5256683923872718, 0.4835372942274674, 0.44206992271156276, 0.5346917433129332, 0.5012992092348807, 0.49291446108405923, 0.5214645052139373, 0.4840576431082929, 0.5128096778166591, 0.7037687090094014, 0.7847496897794211, 0.8037010543464005, 0.8004917936975764, 0.8070675634276212, 0.829457438776268, 0.7912658762905092, 0.7789256590241552, 0.7723861916187112, 0.17622948334795163, 0.30087119544631746, 0.1867613818256837, 0.19149215703742783, 0.1931799853634364, 0.27191069188017014, 0.270416482182699, 0.47952018852941425, 0.1975077262536622, 0.17156968342755485, 0.2883703415023837, 0.1472606038052996, 0.2498127890019799, 0.21122507904305754, 0.2839119380429871, 0.19459585638841814, 0.20766577059366942, 0.3317352173472743, 0.334468627450755, 0.4570828982338464, 0.3924119214568321, 0.45072675190822187, 0.403667237882428, 0.3679160183382053, 0.4108850566201273, 0.4286476867381399, 0.43632849325597467, 0.5424067250835742, 0.5422811121673565, 0.5503373154330906, 0.5340875020802581, 0.5341193644535583, 0.5196238258887166, 0.5551909514265039, 0.5705315476470152, 0.5790198354169991, 0.0644795953443349, 0.08231001301555607, 0.08917219716706404, 0.27992046368903356, 0.32748568106842924, 0.1873782526925889, 0.13459835953774635, 0.20992656997506642, 0.12960470443384198, 0.3255909658916567, 0.323789986723068, 0.30868879927361337, 0.3247822288374045, 0.32838312140903236, 0.33280283331263694, 0.32981369193936183, 0.30765927189810405, 0.3344895940911671, 0.6919748226323503, 0.7091949863878864, 0.7110858653901646, 0.7065154541265253, 0.720763942479763, 0.7379254680293728, 0.7246869531768899, 0.682640179589562, 0.7028798560929423, 0.11902901464580629, 0.12228423905484453, 0.12224207925088648, 0.1174959770037185, 0.11941803217671076, 0.10953640915368601, 0.11017121061971102, 0.11775850715866876, 0.12302984251351368, 0.24817441476849078, 0.21187594048125868, 0.18551124230900973, 0.1929997166790317, 0.2896468541463517, 0.18957504892655863, 0.27679075354370664, 0.23929658851432678, 0.1744919571540724, 0.39644642849249445, 0.39552377044127274, 0.4273318135872556, 0.37478099682680877, 0.4074838799538798, 0.45284225469803163, 0.4192486770847349, 0.4745971998525499, 0.3966669263084738, 0.3110872927626199, 0.3269359096041239, 0.2963842962646418, 0.30984653270592355, 0.3239987751582951, 0.31101042614136665, 0.34775827155515304, 0.3581041090017396, 0.32935283485689104, 0.2567859578434495, 0.21270237685227245, 0.1816799366436751, 0.2234928571483622, 0.22556849647968136, 0.1984914651469718, 0.2158333603930821, 0.23277942227135728, 0.21638405368243152, 0.24171677308802875, 0.2499599028825834, 0.19209786896687286, 0.21781697906096897, 0.23402604010050176, 0.1873979913894539, 0.3353031020048902, 0.20355051119760714, 0.18801735301159128, 0.8101003107718199, 0.16686821956139497, 0.1534885520699394, 0.6544514064698173, 0.7562340931942909, 0.1991876050434902, 0.6890346513952337, 0.1771030725351862, 0.16999082421186762, 0.794176234952207, 0.5470993087426059, 0.7059070222279432, 0.6990141964736896, 0.16573208184187627, 0.20228845287837116, 0.20653581854380687, 0.15345395122609173, 0.7511294440617193, 0.1925158850968528, 0.1899267335635091, 0.1793990318854125, 0.18821738231283336, 0.20616553148707417, 0.1963376432258609, 0.19141492040264518, 0.18791647916589227, 0.20668011594685798, 0.08505049748909355, 0.08136934555020614, 0.08312612922329776, 0.07678132040583419, 0.08311866314316485, 0.08287779217654456, 0.07612157597359182, 0.08522307987697986, 0.08334340868050127]}, "mutation_prompt": null}
{"id": "c43ca697-5b27-49a6-b285-6e8a3407614f", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 10 * dim\n        self.F = 0.5\n        self.CR = 0.9\n        self.adaptive_mutation = lambda x: 0.5 + 0.3 * np.sin(np.pi * x / self.budget)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        budget_used = self.pop_size\n\n        while budget_used < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F_dynamic = self.adaptive_mutation(budget_used)\n                mutant = np.clip(a + F_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best = trial\n                        best_idx = i\n\n                if budget_used >= self.budget:\n                    break\n\n            if budget_used < self.budget:\n                for neighbor in self._get_neighborhood(best):\n                    neighbor_fitness = func(neighbor)\n                    budget_used += 1\n                    if neighbor_fitness < fitness[best_idx]:\n                        best = neighbor\n                        best_idx = np.argmin(fitness)\n                        fitness[best_idx] = neighbor_fitness\n                        population[best_idx] = neighbor\n\n                    if budget_used >= self.budget:\n                        break\n\n        return best\n\n    def _get_neighborhood(self, best):\n        neighborhood_size = self.dim\n        for _ in range(neighborhood_size):\n            neighbor = best + np.random.normal(0, 0.1, self.dim)\n            yield np.clip(neighbor, self.lower_bound, self.upper_bound)", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with Adaptive Mutation Strategy - introduces a dynamic mutation factor for improved convergence and solution diversity.", "configspace": "", "generation": 1, "fitness": 0.31636069143697393, "feedback": "", "error": "", "parent_id": "0cccf6d5-1713-4655-83d3-86dd075781a5", "metadata": {"aucs": [0.6964532031438759, 0.7314020602463984, 0.7162385788189729, 0.7199690285911605, 0.71945339580305, 0.7228083555934769, 0.721625402213125, 0.7190084950744424, 0.7324126308199299, 0.48817629707448074, 0.44735773800827905, 0.45784170683031766, 0.4631186048163126, 0.4615141766249411, 0.42228258264844176, 0.438008943022005, 0.4713029908095623, 0.43190576386641655, 0.15393999883348675, 0.13653430509470255, 0.10731759829960663, 0.10918147102478526, 0.11854588095405394, 0.0980244936561927, 0.1274555400718147, 0.11455598195404493, 0.11693835213833859, 0.0934174795869076, 0.10796531546354382, 0.10108023637342234, 0.10616096003442921, 0.11511702544349467, 0.11604070471399608, 0.08431351338033888, 0.11564786795079873, 0.10593427745294248, 0.9516658441140625, 0.9359723359678758, 0.9328796152137296, 0.927464162559833, 0.9369215739408887, 0.9507204514754288, 0.9125290443937505, 0.9142330459259216, 0.9037562952425178, 0.36767899777777047, 0.34957222960091716, 0.3317343084658274, 0.32353730930449853, 0.3471724330233886, 0.3617430327741419, 0.37263019220045945, 0.316409532134702, 0.328908453206155, 0.6288023706422148, 0.6247854002387244, 0.5834211534760766, 0.6516599211310966, 0.6828074899110474, 0.7292823615193241, 0.6037168732438012, 0.6302826979793348, 0.6688168695031476, 0.27530720839577427, 0.25650204865943016, 0.27214329755493005, 0.29743271813301586, 0.26057432803886926, 0.26584625971503295, 0.2756082490460323, 0.2913741918946251, 0.25832510069928505, 0.21488223245285698, 0.2579262258330334, 0.28448975020433986, 0.28733077385137296, 0.2871346529564831, 0.2965201498618367, 0.2648719654279693, 0.3057653267963075, 0.2637656879544422, 0.18861007002243535, 0.20322836711009407, 0.14874513078277118, 0.19333632206475027, 0.19838011957332646, 0.1716600782376867, 0.18146545222009414, 0.19387291396418227, 0.18798738041586371, 0.34295988474795336, 0.34065502705821704, 0.3730081160729286, 0.31918353038737024, 0.2990866245092286, 0.2834535686700743, 0.35287641556473814, 0.38028846607926015, 0.37903516017612504, 0.06270187632257018, 0.060252848242189794, 0.05501309342511962, 0.0811179806183594, 0.09676213620053475, 0.07883726712686567, 0.07465339193501785, 0.10498062477779513, 0.06715249778875099, 0.20320162116593377, 0.19041717891642318, 0.19923776675749272, 0.19977570319854254, 0.22287223083115026, 0.20987006455376933, 0.19542191046679813, 0.19064647454297867, 0.21121250542910563, 0.5624564503885331, 0.5721628429187369, 0.5237510108805719, 0.5427136923910097, 0.5502514007623176, 0.5490401966025655, 0.5485146747485017, 0.5631592802829553, 0.5525111721901008, 0.09145444217282983, 0.10559751364874137, 0.12134048895182892, 0.1069555113968561, 0.10857476655389187, 0.10022070530539573, 0.10360432855226864, 0.12721306660054466, 0.10903195658922427, 0.1952201287482057, 0.15106537348507154, 0.20995728275105574, 0.1784207441775545, 0.2896468541463517, 0.1676088404515682, 0.18147896834642874, 0.20275543737439028, 0.25093965423781295, 0.3188872449029905, 0.3323387621399849, 0.29401296478015293, 0.3018231572997325, 0.30965883320112697, 0.3320992651519392, 0.3237602806029004, 0.3441337804043074, 0.3344088878744267, 0.24775547825828115, 0.2359099622097971, 0.23785535460458151, 0.2438280123645129, 0.2451510596510158, 0.23359940655408495, 0.2483812313946836, 0.260475147537529, 0.24546970461668016, 0.18867597146110948, 0.2176476086600404, 0.20856432567453698, 0.18441553319821047, 0.20613012250213014, 0.20612457256071326, 0.19183754611121162, 0.19286144052457765, 0.20741392322589458, 0.19168888278929275, 0.2147077595392809, 0.18644676930732196, 0.19833313191057234, 0.21703509441893587, 0.20446626326087924, 0.19474001016940734, 0.1970233857619692, 0.1904532750494985, 0.17945170869225857, 0.16286326784253946, 0.5769049894390146, 0.6205896311951387, 0.6084200660770255, 0.19911827811709237, 0.6652127435498991, 0.19104312078250507, 0.6195642919384259, 0.6449896126506084, 0.5132531956376993, 0.5656389532650481, 0.48247946396842667, 0.2050189086399874, 0.19824448263561056, 0.20652626444632838, 0.6603511269667628, 0.20582210494833275, 0.19913078295301956, 0.1876126661372125, 0.18922433272586248, 0.18367572529786613, 0.1959498770862137, 0.18785059727503617, 0.17626595535069223, 0.18065959699602097, 0.17589082739252604, 0.07303608993235178, 0.08157857711269767, 0.07494611714551325, 0.08117206777755748, 0.07372690694907491, 0.07013852092752859, 0.06725141614071051, 0.08605239697184808, 0.07457883226145312]}, "mutation_prompt": null}
