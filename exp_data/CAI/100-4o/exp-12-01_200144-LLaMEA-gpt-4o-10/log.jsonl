{"id": "ab811020-7bcd-415b-bf58-b919d10fd076", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.temperature = 1.0\n        self.cooling_rate = 0.995\n\n    def _initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def _mutate(self, population, target_idx):\n        indices = [idx for idx in range(self.pop_size) if idx != target_idx]\n        a, b, c = population[np.random.choice(indices, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), -5.0, 5.0)\n        return mutant\n\n    def _crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.crossover_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def _acceptance_probability(self, candidate_fitness, target_fitness):\n        if candidate_fitness < target_fitness:\n            return 1.0\n        else:\n            return np.exp((target_fitness - candidate_fitness) / self.temperature)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n                target = population[i]\n                mutant = self._mutate(population, i)\n                trial = self._crossover(target, mutant)\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < self._acceptance_probability(trial_fitness, fitness[i]):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            self.temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDE_SA", "description": "A metaheuristic combining Differential Evolution and Simulated Annealing to explore and exploit the search space efficiently.", "configspace": "", "generation": 0, "fitness": 0.21713415583099707, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.3284453372185987, 0.35661408114236315, 0.3261421163109455, 0.32082685522679744, 0.2985401606665611, 0.31693673818116674, 0.31144866564994156, 0.31268923624743206, 0.31479001349350755, 0.23826699535627927, 0.2363556949288308, 0.2442551994139991, 0.2426499772966304, 0.24632405022877013, 0.23892252389632906, 0.2508341728069572, 0.24782348347176442, 0.2358663855589661, 0.10374885852213589, 0.09580085024695728, 0.09008955201929292, 0.09949329859600531, 0.09262845731144864, 0.10224641034824311, 0.10499069214603407, 0.09923689659492119, 0.09371233430322023, 0.08754544977985246, 0.09463037333299185, 0.09122089644048825, 0.08781209560052428, 0.0921802106600238, 0.09331442575315463, 0.08836023479568134, 0.08613171175978174, 0.09868406213430514, 0.9461314389977702, 0.9736131277702325, 0.9183985224457072, 0.9580727652028923, 0.8991524178789838, 0.9569242413162585, 0.9706320166675639, 0.955745796593485, 0.9400238444327873, 0.21273290238960296, 0.22918539978053654, 0.22672835827944493, 0.22305381633187416, 0.213974786859086, 0.23180362223410478, 0.22275631830430132, 0.22874888380126246, 0.23199441838886148, 0.2560261539089961, 0.290570521999863, 0.26858167700672364, 0.3047057613267986, 0.2910087859110321, 0.32392527519856795, 0.3163617695955534, 0.2829048930167056, 0.2634073500091365, 0.1928344718730447, 0.16719171698322133, 0.17733176521258154, 0.18537281672354233, 0.18243443126189407, 0.17807156136928515, 0.1826553779592175, 0.17528516464614496, 0.17445332484772402, 0.19801808354991235, 0.20601362271386336, 0.18365144828737567, 0.1557213679916707, 0.1737801890719034, 0.18577061612752876, 0.1685029099523817, 0.1830059204127752, 0.18341034235704845, 0.13083235311933128, 0.12903216769746872, 0.13851890136893819, 0.12110529436128548, 0.11871686575553142, 0.12686287772895832, 0.12867571588024662, 0.09302288759558364, 0.1104312084132838, 0.23755443192421577, 0.2447210108373049, 0.22805821832792672, 0.22634753713280542, 0.2092933844107252, 0.1974310704435407, 0.2225338018721046, 0.23046590682152313, 0.2129511212510985, 0.03005907579355227, 0.023078461897776514, 0.01778266307917098, 0.06074952811045331, 0.029314793840264253, 0.019887809180399896, 0.04666381139891418, 0.03909362525378435, 0.03898887713864274, 0.14010836289076178, 0.1394743951861327, 0.14477034095115704, 0.1624523454432758, 0.1518392454092956, 0.15873680041428617, 0.15104467474408045, 0.1447882223178949, 0.16066026569000624, 0.2778516416101745, 0.2901879618447485, 0.2928735226298571, 0.29746227903191935, 0.28529165332479434, 0.3051425605247732, 0.3146447787736394, 0.29860964391743827, 0.2934012426237185, 0.0900228020222863, 0.1000930125831051, 0.09126743250030434, 0.08585691596433864, 0.08702111422047032, 0.08880448999703328, 0.08243113414194447, 0.08914953807287207, 0.11088759256891267, 0.14184270829986922, 0.2422132362200783, 0.18525468327953254, 0.1790433212438498, 0.16610665736284114, 0.1391286186269064, 0.15320824061564398, 0.13141278510281607, 0.14449407029518857, 0.24207285319511418, 0.22817026563909415, 0.22919682584609935, 0.2310067743928932, 0.22688689395246775, 0.22347274649440219, 0.22645176461680905, 0.244796386058183, 0.2401128907713489, 0.1916624016790357, 0.1934471392025272, 0.19528990307474625, 0.19811487970710684, 0.1915142430717548, 0.18568053679455077, 0.20707508544498476, 0.1985065337623525, 0.19358023665820656, 0.17106997472568397, 0.1749824508563328, 0.17116219691106638, 0.17990809096334848, 0.19715981255075343, 0.1718479532494397, 0.18834471891101612, 0.1878961698665862, 0.18230482189837915, 0.18349988352042734, 0.17220690492510893, 0.1714430500562214, 0.17533718547920396, 0.1776370708008178, 0.1733579199668337, 0.16796238731452318, 0.17061767405819706, 0.17623376106229494, 0.3250032145138141, 0.3554979045842869, 0.36581560631371235, 0.394512057809129, 0.15954220049128198, 0.3613630410486478, 0.32958976870039525, 0.1735119793039459, 0.2612928209111095, 0.1933850170915682, 0.16509673769793898, 0.160748074666325, 0.19031271016491935, 0.19252602789935158, 0.3946500048133119, 0.20154495546859985, 0.2029934320486293, 0.20421158170302145, 0.18310455528659775, 0.19636611348072364, 0.18026862916421815, 0.19074582145386998, 0.17426722072979994, 0.18565177705352454, 0.19848316627462537, 0.1989217236493196, 0.20070056260055713, 0.06836054069822206, 0.067374351331974, 0.06894591802226568, 0.07006522145208072, 0.0704637207502723, 0.0628680257651909, 0.07820285127485582, 0.06807353056267273, 0.0765262217257654]}, "mutation_prompt": null}
{"id": "9614ecec-97f2-4d72-81ff-27ef1059a0ed", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.temperature = 1.0\n        self.cooling_rate = 0.995\n\n    def _initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n    def _mutate(self, population, target_idx):\n        indices = [idx for idx in range(self.pop_size) if idx != target_idx]\n        a, b, c = population[np.random.choice(indices, 3, replace=False)]\n        # Adaptive mutation factor\n        adaptive_factor = self.mutation_factor + 0.1 * (np.random.rand() - 0.5)\n        mutant = np.clip(a + adaptive_factor * (b - c), -5.0, 5.0)\n        return mutant\n\n    def _crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.crossover_rate\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def _acceptance_probability(self, candidate_fitness, target_fitness):\n        if candidate_fitness < target_fitness:\n            return 1.0\n        else:\n            # Stochastic acceptance\n            return np.exp((target_fitness - candidate_fitness) / (self.temperature * (0.5 + 0.5 * np.random.rand())))\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n                target = population[i]\n                mutant = self._mutate(population, i)\n                trial = self._crossover(target, mutant)\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < self._acceptance_probability(trial_fitness, fitness[i]):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            self.temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDE_SA", "description": "Enhanced HybridDE_SA with adaptive mutation factor and stochastic acceptance to better balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": 0.22047052618643417, "feedback": "", "error": "", "parent_id": "ab811020-7bcd-415b-bf58-b919d10fd076", "metadata": {"aucs": [0.36130285548887087, 0.32002250869429105, 0.33368054694151683, 0.314159969228898, 0.3397813019766751, 0.36514407032553375, 0.3317189692876851, 0.32485519183408973, 0.34135234521441293, 0.23229491881702047, 0.26997758719926723, 0.25966915712158534, 0.2271880051595795, 0.2661136278014824, 0.2576353115747061, 0.2627349151583154, 0.2457602058831253, 0.24269331088238832, 0.09109474912340798, 0.10483951101225886, 0.09192079906200701, 0.09812920316746054, 0.1036530935020602, 0.11072447934892826, 0.10752768959878556, 0.09527947014730975, 0.0919857511739951, 0.09281300625618283, 0.08542459279385095, 0.09468355054785316, 0.10078698366028949, 0.09073835951798814, 0.08582637178473396, 0.09345093984506059, 0.08396744319590654, 0.09138331390310561, 0.9772580512710627, 0.9406003593418565, 0.9336818455286345, 0.9303933326466649, 0.9498959572399484, 0.9170064710547251, 0.9657458243409044, 0.9102929395933188, 0.9260134199246604, 0.23732659995420202, 0.22089006445485948, 0.20718403385113338, 0.24009829759749324, 0.24985466193626704, 0.22769424991873333, 0.23065191301592847, 0.23437853059451352, 0.22932421807615744, 0.2813129994361325, 0.2786893021513459, 0.2662133253659289, 0.2809587267044795, 0.29238505850577623, 0.30580460880750204, 0.30299362393593576, 0.2853390415989867, 0.3062176192036371, 0.20463866266042485, 0.1660118525216152, 0.16978291318461847, 0.19195597773957818, 0.18164598986643354, 0.19122528124563465, 0.15682017649954305, 0.17561757929669652, 0.19478749990969535, 0.23440769706152198, 0.00987639664497908, 0.22737140870312, 0.18168837434166074, 0.16802495556211794, 0.17912303011260244, 0.18308760368276444, 0.1781442155844274, 0.1636457462958193, 0.143289128252592, 0.13151320538259947, 0.09420386631090327, 0.17185891121712882, 0.12473102812844028, 0.1424044142191313, 0.11594350817458199, 0.13693387244259336, 0.12413085395196977, 0.25982839429107685, 0.22497777055157453, 0.2343214904931723, 0.21183324881138743, 0.2481260161773281, 0.21548090985860424, 0.24040104327377054, 0.22994646139069597, 0.23813606136935983, 0.05203015013640233, 0.017204761842918526, 0.01941521835701987, 0.03853298262241567, 0.03472435819004893, 0.03999381943902358, 0.03510053362722865, 0.02024936143113265, 0.04507845839012803, 0.1388434081080664, 0.14514044266177428, 0.140123365463377, 0.15835894362559388, 0.14527247812054644, 0.1495153258552513, 0.16830631173484234, 0.15032902348479016, 0.1589100213400314, 0.3084411864831682, 0.290588841071469, 0.28963323049594214, 0.29427445165927324, 0.296532667392456, 0.2933302218344854, 0.32505583714717534, 0.30326101653855686, 0.3028827067509948, 0.08261788514703716, 0.10058562068468979, 0.0874298065980571, 0.09381546994143153, 0.08092043495798862, 0.08983708356049447, 0.08011722246179342, 0.09706707471122533, 0.0877559127902412, 0.1502338722455595, 0.14351868548028035, 0.15387266066938354, 0.14626232601526679, 0.13580467949631403, 0.23364244447681592, 0.1512866071948662, 0.1498436497553297, 0.17204796284297097, 0.2383733683045931, 0.22878717360834866, 0.23411142244158123, 0.22252943074563447, 0.21810498688090862, 0.23245165400251133, 0.2537910615679301, 0.2457956086330868, 0.24989988757602055, 0.18860555721240635, 0.20199295631548952, 0.190400590568513, 0.198818192681266, 0.19764999722281773, 0.19099715287726327, 0.2060174596338168, 0.20570098818406202, 0.20057022387479495, 0.1860922637188439, 0.18355067350856757, 0.17291133976018358, 0.18044652594852995, 0.19333259572381745, 0.18239023430718448, 0.189350175671671, 0.17601956694623244, 0.20999213050589327, 0.17414624163019998, 0.17731344854273434, 0.1703768857351351, 0.1711274923432573, 0.17639303458709854, 0.17834761406830035, 0.17838300474224122, 0.17261058297510012, 0.17463723493663696, 0.1649430695136871, 0.3604496838162702, 0.14688770761989778, 0.29035016905973265, 0.3760408081424219, 0.3854389572646848, 0.18698360539651482, 0.44163182475888174, 0.311900524492155, 0.3276316694024961, 0.1724639661629659, 0.33311341702866903, 0.20421328563867525, 0.18483402084473832, 0.2875253870376149, 0.19641333005816197, 0.14419927447215775, 0.41760270020019374, 0.19463726282396232, 0.17726245973597576, 0.2142720738144408, 0.18746290249096287, 0.17898224585125244, 0.19094785523067126, 0.17007113054947276, 0.19265833407627264, 0.1850635201849442, 0.06883677732679849, 0.06176980636181084, 0.06304079978396349, 0.07648248001548785, 0.06332896296503787, 0.07327503631483268, 0.0708229476905301, 0.08143914305086242, 0.10441450878448]}, "mutation_prompt": null}
