{"id": "ad870084-99dd-4b6b-82fc-23eb16d3c940", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50\n        self.velocity = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        self.positions = np.random.uniform(-5, 5, (self.swarm_size, self.dim))\n        self.personal_best = np.copy(self.positions)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best = None\n        self.global_best_value = np.inf\n        self.func_evaluations = 0\n\n    def differential_evolution(self, target_idx):\n        indices = [i for i in range(self.swarm_size) if i != target_idx]\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = 0.8  # Differential weight\n        CR = 0.9  # Crossover probability\n        mutant_vector = self.positions[a] + F * (self.positions[b] - self.positions[c])\n        trial_vector = np.where(np.random.rand(self.dim) < CR, mutant_vector, self.positions[target_idx])\n        trial_vector = np.clip(trial_vector, -5, 5)\n        return trial_vector\n\n    def __call__(self, func):\n        inertia_weight = 0.7\n        cognitive_weight = 1.5\n        social_weight = 1.5\n\n        while self.func_evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.func_evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                current_value = func(self.positions[i])\n                self.func_evaluations += 1\n\n                # Update personal best\n                if current_value < self.personal_best_value[i]:\n                    self.personal_best_value[i] = current_value\n                    self.personal_best[i] = self.positions[i]\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_value = current_value\n                    self.global_best = self.positions[i]\n\n            for i in range(self.swarm_size):\n                if self.func_evaluations >= self.budget:\n                    break\n                \n                # Update velocity and position for PSO\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = (inertia_weight * self.velocity[i] +\n                                    cognitive_weight * r1 * (self.personal_best[i] - self.positions[i]) +\n                                    social_weight * r2 * (self.global_best - self.positions[i]))\n                self.positions[i] += self.velocity[i]\n                self.positions[i] = np.clip(self.positions[i], -5, 5)\n\n                # Apply DE mutation\n                trial_vector = self.differential_evolution(i)\n                trial_value = func(trial_vector)\n                self.func_evaluations += 1\n\n                # Greedy selection\n                if trial_value < current_value:\n                    self.positions[i] = trial_vector\n\n        return self.global_best, self.global_best_value", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for enhanced exploration and exploitation balance.", "configspace": "", "generation": 0, "fitness": 0.1343962607137607, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.18657612828024217, 0.1925944601520413, 0.22180846319664438, 0.24964351708137378, 0.2279043931221738, 0.2777434241098682, 0.26746588909792013, 0.22548028262873498, 0.21361318152445763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021170654718275728, 0.0015322927046254042, 9.999999999998899e-05, 0.0018827475246927516, 9.999999999998899e-05, 0.007255387888058462, 0.0487507788212832, 0.07084133618625432, 0.058147662077763784, 0.06724547773065948, 0.04881050644366336, 0.04980777275934123, 0.060153470810574095, 0.0837927297433565, 0.044163870198273836, 0.029264966087136468, 0.02379058714478799, 0.06624836545128532, 0.02574853727501214, 0.02504828363324285, 0.029829847998078418, 0.04800765469033863, 0.0314682108210369, 0.017539429158560438, 0.9653112619414519, 0.9748217680904989, 0.9730943880282609, 0.957523599353131, 0.9911271083750643, 0.9615135965860249, 0.9774324996001404, 0.9679733048309551, 0.9762185355378029, 0.08212492926655868, 0.11081684658130109, 0.09192927593972489, 0.08325571965013934, 0.09565179340884333, 0.08092062721128201, 0.10505228962402202, 0.09401288680423892, 0.11624038368784062, 0.10486666597106575, 0.1324784026045963, 0.17406327770078855, 0.14108032439892482, 0.21465967708447076, 0.1489144030450128, 0.12896962868487405, 0.12806598200757058, 0.15057918113538704, 0.0522147503552316, 9.999999999998899e-05, 0.006090354342338844, 9.999999999998899e-05, 9.999999999998899e-05, 0.037758331469875284, 0.04704995150546276, 0.02383659464163046, 0.07765850617593129, 0.029686117551031233, 0.07339025995723791, 0.032291616704940185, 0.010823187996781947, 0.018421902191725126, 0.0063478248403938675, 0.024671391875944804, 9.999999999998899e-05, 0.021232235975426228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.052376543495961214, 0.03814927357094344, 0.04505509202903035, 0.04806577355007391, 0.07715666606250782, 0.007883693322986662, 0.06228497752355344, 0.044689835592567895, 0.018167038047753103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002803670641314926, 0.009540412862044656, 0.00887107968379297, 0.009905568059946246, 0.002925540290476758, 9.999999999998899e-05, 0.016422965513393728, 0.01162815960553476, 0.03809788860771679, 0.27967299494856923, 0.22600430877839872, 0.2519716844355834, 0.2195251835249331, 0.21390101393891925, 0.24513333887322952, 0.20363493043171987, 0.20708954912073196, 0.19800637554842504, 0.06212792723770655, 0.06961391009160378, 0.06558964154683466, 0.06495169646011234, 0.03795570966833495, 0.05843754174068638, 0.06510071643532667, 0.05058512314780861, 0.06740796138792504, 0.12373923113705299, 0.12944262996552625, 0.13973303772455514, 0.1423578814757369, 0.135142880664053, 0.11530616408525096, 0.126649964940849, 0.1478115229859055, 0.12695850179181545, 0.183271350887091, 0.1807303409392902, 0.17567088179398493, 0.17656405968619915, 0.1838654655256653, 0.17546859877451693, 0.18743992907919715, 0.18404706399448723, 0.19301817486091655, 0.11306941916414304, 0.10129963588826363, 0.11014393775815445, 0.119420955890292, 0.1197493134709452, 0.1236419864449243, 0.13123277738729633, 0.1291784889348624, 0.12280794765124992, 0.16602888270602434, 0.1347923665534081, 0.15280188026973518, 0.17194248286664315, 0.15726915908360128, 0.14951124832458662, 0.146804387686577, 0.1511784401182591, 0.17039848945418345, 0.15281638277745602, 0.12384751119608717, 0.1795993088532576, 0.1441083570155024, 0.15105523284050926, 0.13669673889181377, 0.16162594062657276, 0.12734874581286693, 0.16903205143730715, 0.15870395495984846, 0.1638909262906183, 0.22187145711442546, 0.1385603099024646, 0.14046467250609607, 0.15080973653362106, 0.14520884733222084, 0.13902563265955126, 0.16223794066175157, 0.16763278863629016, 0.17463332243194996, 0.15316777261633852, 0.1598316881475077, 0.11047753535738625, 0.14666275089616698, 0.14480206294127984, 0.21633472593207914, 0.19254615702262023, 0.16726804881235835, 0.1740219078660219, 0.17374649977916323, 0.17768463909427668, 0.18131639698623647, 0.1850443810458171, 0.17903169412845854, 0.18942458365303605, 0.1827629731850987, 0.05434537145173457, 0.04820582831708764, 0.08186642949596157, 0.05197977853370561, 0.05053808124910175, 0.0557065605325604, 0.05781170286542603, 0.040170886039612164, 0.050149042207693895]}, "mutation_prompt": null}
{"id": "0142662d-68c4-4c40-9f65-9df1e99bd62f", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 50\n        self.velocity = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        self.positions = np.random.uniform(-5, 5, (self.swarm_size, self.dim))\n        self.personal_best = np.copy(self.positions)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best = None\n        self.global_best_value = np.inf\n        self.func_evaluations = 0\n\n    def differential_evolution(self, target_idx):\n        indices = [i for i in range(self.swarm_size) if i != target_idx]\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = 0.8  # Differential weight\n        CR = 0.9  # Crossover probability\n        mutant_vector = self.positions[a] + F * (self.positions[b] - self.positions[c])\n        trial_vector = np.where(np.random.rand(self.dim) < CR, mutant_vector, self.positions[target_idx])\n        trial_vector = np.clip(trial_vector, -5, 5)\n        return trial_vector\n\n    def __call__(self, func):\n        inertia_weight = 0.9  # Start with a higher inertia weight\n        cognitive_weight = 1.5\n        social_weight = 1.5\n        min_inertia_weight = 0.4  # Set a minimum inertia weight\n\n        while self.func_evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.func_evaluations >= self.budget:\n                    break\n\n                # Evaluate current position\n                current_value = func(self.positions[i])\n                self.func_evaluations += 1\n\n                # Update personal best\n                if current_value < self.personal_best_value[i]:\n                    self.personal_best_value[i] = current_value\n                    self.personal_best[i] = self.positions[i]\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_value = current_value\n                    self.global_best = self.positions[i]\n\n            for i in range(self.swarm_size):\n                if self.func_evaluations >= self.budget:\n                    break\n\n                # Update velocity and position for PSO with adaptive inertia weight\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = (inertia_weight * self.velocity[i] +\n                                    cognitive_weight * r1 * (self.personal_best[i] - self.positions[i]) +\n                                    social_weight * r2 * (self.global_best - self.positions[i]))\n                self.positions[i] += self.velocity[i]\n                self.positions[i] = np.clip(self.positions[i], -5, 5)\n\n                # Adaptive inertia weight adjustment\n                inertia_weight = max(min_inertia_weight, inertia_weight * 0.994)\n\n                # Apply DE mutation\n                trial_vector = self.differential_evolution(i)\n                trial_value = func(trial_vector)\n                self.func_evaluations += 1\n\n                # Greedy selection\n                if trial_value < current_value:\n                    self.positions[i] = trial_vector\n\n        return self.global_best, self.global_best_value", "name": "HybridPSO_DE", "description": "A refined Hybrid PSO-DE incorporating adaptive inertia weight for improved convergence and exploration.", "configspace": "", "generation": 1, "fitness": 0.21332119319418855, "feedback": "", "error": "", "parent_id": "ad870084-99dd-4b6b-82fc-23eb16d3c940", "metadata": {"aucs": [0.5946069980636082, 0.6685835010959221, 0.705551960977433, 0.6325935153274881, 0.47300700318274824, 0.6962286892697227, 0.6263788941981943, 0.4950494510872593, 0.6788401858015934, 0.27291544213412, 0.2724747780347415, 0.16142846435749159, 0.4336807984210006, 0.2527434234541863, 0.34785464856516823, 0.32830555012118556, 0.3357540230303373, 0.3662943748319064, 0.09366477199853762, 0.09726830374402418, 0.0847671278935006, 0.07852940898230809, 0.10399411793692726, 0.07834339064184714, 0.08960609772016992, 0.08099689554983447, 0.0820695493465351, 0.0650517688555603, 0.06763201509354133, 0.04988202437749567, 0.1612649986353888, 0.06355334218386799, 0.05571906755978273, 0.0937920413722193, 0.0848877764232997, 0.06822474710115278, 0.9672343201648691, 0.9757235935592665, 0.9721662902764026, 0.9552136160606972, 0.9911374799539846, 0.9552677433889649, 0.9773207676604216, 0.9760900715091693, 0.9759311981447598, 0.15404010956694636, 0.18395879872467635, 0.12576835971075384, 0.13524561148015768, 0.14602526892769618, 0.13609463555990098, 0.15015736662403034, 0.17568505404091206, 0.152805421590967, 0.16773840346341562, 0.16845115909088126, 0.2303719167238042, 0.22213639105988636, 0.5977925841111842, 0.28513682842347043, 0.19844144555195808, 0.17970806349820612, 0.21265491663885971, 0.19612767781755525, 0.12306490136948067, 0.11430909646870402, 0.06546331010358386, 0.1251228565871455, 0.16898289189737659, 0.1514901920095535, 0.09789599226300139, 0.15129889898202642, 0.15165531530201737, 0.09843137512708222, 0.15806373516395555, 0.16766766574487135, 0.17605450110104992, 0.16625540902761493, 0.1445715805794331, 0.10355644675189435, 0.15623638686037378, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024002365387877367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07011328747739043, 0.054892851148841904, 0.04987131972286918, 0.04620652511716705, 0.06816943582470392, 0.0368468299884962, 0.04900495106207381, 0.041796066051990044, 0.04800725335640177, 0.05760499059380475, 0.05254262596068693, 0.06270451199750915, 0.09985588058209882, 0.004916960647696977, 0.05376615343085245, 0.0724147762276991, 0.056794568159335035, 0.17122467697471733, 0.09967605016309755, 0.12052058406695998, 0.037968087596850775, 0.06628258517374508, 0.09935827595323699, 0.08783775383018455, 0.11249877484174597, 0.04662505856448729, 0.10906541552867655, 0.4368592060067794, 0.3243609784139406, 0.45125233988249525, 0.4182146681604436, 0.46616407854798125, 0.4017466926083154, 0.46012678803541995, 0.40924759775133956, 0.3926463252064264, 0.07983852573695438, 0.08997406885601611, 0.08400443057275697, 0.1282400928347397, 0.08147443392512976, 0.10259780260745843, 0.08177589631735249, 0.09588180212367792, 0.0835791541675509, 0.14505204242930958, 0.13579833878322278, 0.1279305230725135, 0.15657119160915933, 0.135142880664053, 0.1749246073707802, 0.16970583216145074, 0.14078256581730164, 0.1815872835959359, 0.2697077125738533, 0.258405770099436, 0.27361313075357174, 0.30085726045680183, 0.2673283053388692, 0.300424573832759, 0.24015993357341325, 0.2344990972247556, 0.35840103972909343, 0.13898583376280693, 0.15619828144250858, 0.25214994008501157, 0.15542402027428848, 0.21287121724567581, 0.16740152339614944, 0.16363495783558613, 0.15883018043648667, 0.1828153931738783, 0.17158615763241447, 0.18113105098741933, 0.172879617946331, 0.2020806925899018, 0.17533438312212712, 0.17451898243720165, 0.17489426692195298, 0.1620064894040104, 0.20470601147460543, 0.17995958962291803, 0.1946106433555358, 0.16842824967035774, 0.18979649346867355, 0.17990477538500038, 0.16276981735783613, 0.1692487077296997, 0.17288907288667887, 0.17375997998075055, 0.13735698296621324, 0.16794340210016467, 0.65599987941038, 0.1720452279940009, 0.1555961945270834, 0.19388379847139914, 0.12323631929487489, 0.15808368988125343, 0.3815636400696807, 0.19753535963808944, 0.2025622702247859, 0.1834178143795231, 0.26733372669082134, 0.1321332900764397, 0.24564120634675124, 0.16272443973145656, 0.20920618127587998, 0.13671567899702064, 0.17960284310393038, 0.19088232325258092, 0.18654006009577007, 0.17846444891970936, 0.1834445152173002, 0.17186658813398425, 0.17953563530947614, 0.18793456331334435, 0.18804666999121233, 0.06888372593170222, 0.08517535754295291, 0.07178132597050191, 0.06976803842461088, 0.06877878269681037, 0.07602989219052347, 0.08105915728561885, 0.07303766953355406, 0.06842031902420442]}, "mutation_prompt": null}
