{"id": "24b37779-3162-4657-829e-cf3145f5b4a3", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(5 * dim, 50)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(low=self.lower_bound, high=self.upper_bound,\n                                            size=(self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        fitness = np.array([func(ind) for ind in self.population])\n        evaluations = self.population_size\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, self.population[i])\n                \n                # Local search (adaptive)\n                if np.random.rand() < 0.2:\n                    jitter = np.random.normal(0, 0.1, self.dim)\n                    trial = np.clip(trial + jitter, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    self.population[i] = trial\n                    fitness[i] = trial_fitness\n                \n                # Update global best\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n        return self.best_solution, self.best_fitness", "name": "AdaptiveDifferentialEvolution", "description": "The algorithm leverages adaptive differential evolution with local search to efficiently explore and exploit the search space within given budget constraints.", "configspace": "", "generation": 0, "fitness": 0.375633462390899, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7887132658130696, 0.7819037748948745, 0.7854590457245163, 0.8038150949648988, 0.8015999663059026, 0.8082770428259496, 0.8005322891605564, 0.7946992931448814, 0.7934345215497796, 0.6089397084884518, 0.6299622555365186, 0.6231521274122456, 0.6075012590720336, 0.6317527990856678, 0.6152630651167772, 0.6470624882013822, 0.6225397801101872, 0.6078827694018736, 0.1069138729844974, 0.11683908697434786, 0.149538450135833, 0.14251038240641778, 0.10882062600027198, 0.12223944641147722, 0.11858938705163402, 0.102389714176644, 0.10465597259497139, 0.10936889552166962, 0.11218210967668418, 0.10067304217872697, 0.09799365388598691, 0.09614514472690294, 0.10812302919574612, 0.09133438709311104, 0.12465333255775568, 0.11461389374399966, 0.9641173469626679, 0.9487109414255397, 0.9573246280792814, 0.9397926276796478, 0.9727259383213258, 0.9670445330341053, 0.9459473172223828, 0.9765648056624997, 0.9276237787791064, 0.510194708834229, 0.48455231004618027, 0.4807988474990651, 0.475935494120204, 0.4700164928807722, 0.4420107487341265, 0.48344539560079536, 0.48712279327378694, 0.46701156663884047, 0.7223187286949335, 0.7359524005831135, 0.7094823493951357, 0.7832501781277348, 0.8131230146119167, 0.750976410990389, 0.7827121218008481, 0.6620746653486163, 0.7735419177606008, 0.38357672453729386, 0.35854097885255, 0.42386443651832995, 0.35753149296528985, 0.33038536757035397, 0.3477022687679394, 0.3787662148792411, 0.41294345126598286, 0.38959917795741816, 0.3289426542573842, 0.42886777084402194, 0.3509006097239531, 0.49396147743730445, 0.40425319649029223, 0.48113169444125203, 0.4512913370869974, 0.4159110134052525, 0.3519506540550793, 0.29900457381901335, 0.328311539548356, 0.32937014689760213, 0.35415423583992056, 0.279693807225733, 0.3098246014693793, 0.2630821252114529, 0.3025377200761492, 0.31292155651844, 0.4831961228843312, 0.4301137831143059, 0.4767673081448328, 0.47511062639665425, 0.3634411873466272, 0.384867705843023, 0.45812845984259476, 0.5033646012499473, 0.43854703814743046, 0.15738588044385982, 0.15612904857397847, 0.16077906904481587, 0.08345419541356203, 0.13911601522813655, 0.20891872134359601, 0.08335374051383948, 0.15185191454424296, 0.1396936253007427, 0.2670384721515344, 0.2623959257599935, 0.24678193833207662, 0.28050023404191793, 0.29400911876599534, 0.3077622138571091, 0.2373034422194642, 0.2667074158928663, 0.2798723209443976, 0.6368511493539568, 0.6439865044978234, 0.6921534193969826, 0.6643328823617031, 0.647343649103197, 0.6580086792618463, 0.6438996191673838, 0.6434406121151954, 0.6770337542348068, 0.08637551575207492, 0.08878791489313587, 0.09091446357964472, 0.09909665536260004, 0.09564344457095542, 0.10487497843912674, 0.09915235537614298, 0.09056926319175385, 0.10583839190433575, 0.19704030437521092, 0.2029405518279176, 0.14845260525405612, 0.45415856263592735, 0.1864401151179793, 0.1608617635055547, 0.3347040469287059, 0.15367146834871948, 0.18838013413732668, 0.3510207928417506, 0.33422605585204623, 0.34047872443219407, 0.354152064518386, 0.3486929241209745, 0.3426509551037009, 0.35557657955661026, 0.38678315595288826, 0.363728953053982, 0.26467297869472173, 0.26746356400617066, 0.27791995814521087, 0.25401237756524886, 0.24543611569513757, 0.2438371431169084, 0.29834577623236813, 0.29891055859136983, 0.29456044845059726, 0.18589650893277, 0.19525409397679083, 0.1894791146833401, 0.18383629048226724, 0.17916742831509602, 0.1924790894165661, 0.18472046160612188, 0.18975300006156925, 0.1892614511305556, 0.21091722792813739, 0.1825056775538929, 0.19001685792256684, 0.27634474224031, 0.21586370564434998, 0.23389773627493426, 0.3631386269472334, 0.2650442091319132, 0.19313068382995902, 0.759280573106902, 0.826348892208649, 0.18491183653540433, 0.6271477534894535, 0.194332877488823, 0.795613136165837, 0.6475472360985608, 0.8275257140078136, 0.7429655795219949, 0.2007371627594431, 0.20635282694818302, 0.7097859731200886, 0.20169331991549633, 0.2023039254855833, 0.19657112926181808, 0.21177798967347494, 0.8208357369657104, 0.12738839556607906, 0.1732011012550333, 0.17927568121495718, 0.1879733495160626, 0.18824638065877564, 0.19709094417285045, 0.18655088121653374, 0.188392008952732, 0.19529010595159668, 0.20254364767225796, 0.07727771457967503, 0.07641168719699276, 0.08278408551650063, 0.07434725126956454, 0.07327341009475952, 0.0727515971103827, 0.0773492503687987, 0.07794234603792505, 0.08481954938881375]}, "mutation_prompt": null}
{"id": "d6f9324a-8f13-43d3-b141-e96c0b61bdde", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(5 * dim, 50)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability (initial)\n        self.population = np.random.uniform(low=self.lower_bound, high=self.upper_bound,\n                                            size=(self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        fitness = np.array([func(ind) for ind in self.population])\n        evaluations = self.population_size\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n                \n                # Dynamic Crossover\n                self.CR = 0.5 + 0.4 * np.sin(3.14 * evaluations / self.budget)  # Change made here\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, self.population[i])\n                \n                # Local search (adaptive)\n                if np.random.rand() < 0.2:\n                    jitter = np.random.normal(0, 0.1, self.dim)\n                    trial = np.clip(trial + jitter, self.lower_bound, self.upper_bound)\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    self.population[i] = trial\n                    fitness[i] = trial_fitness\n                \n                # Update global best\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n        return self.best_solution, self.best_fitness", "name": "AdaptiveDifferentialEvolution", "description": "Introducing a dynamic crossover probability to enhance exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": 0.3350756795823101, "feedback": "", "error": "", "parent_id": "24b37779-3162-4657-829e-cf3145f5b4a3", "metadata": {"aucs": [0.7930045462869758, 0.7878634902138335, 0.8042237213265878, 0.8114286066266552, 0.7965806893647372, 0.8105937022450014, 0.8011159368196994, 0.8164272520506564, 0.8041239589768499, 0.639912457445661, 0.610650191087112, 0.6207228778069513, 0.6277834143061752, 0.617884884447813, 0.6198315135173037, 0.6286046254889179, 0.6395775558640306, 0.6064723700419106, 0.11606163801351399, 0.13752773184835276, 0.11908354834499701, 0.14558265228524747, 0.15394578040354423, 0.1688957319196872, 0.13472753070822419, 0.14987672703721078, 0.12544683251110655, 0.11503109410387191, 0.11702555678389415, 0.12281132615203205, 0.13165129229366834, 0.1282344369595898, 0.1298742437812831, 0.13352844060141256, 0.15331005215417304, 0.13948258557448168, 0.968845009495486, 0.9659780806563073, 0.9829385067033766, 0.9510981866358957, 0.9714077561564932, 0.9701677996529668, 0.9793158729831123, 0.9778445006633928, 0.9591190759502928, 0.4338799119301431, 0.40865426633232604, 0.4357166609179106, 0.4404029681954168, 0.4046001974263249, 0.44433254564364155, 0.438692167382562, 0.4307017035885907, 0.45490166945287414, 0.5802685717224768, 0.584829922505824, 0.6306210493802192, 0.7421251317647064, 0.6149898747009535, 0.695661574056829, 0.6278232472684123, 0.5887097295161321, 0.5722246011945302, 0.3100404670515515, 0.3177990516506062, 0.34392903471802105, 0.28709930745550327, 0.28632025853630216, 0.22893451174979296, 0.23520422885654224, 0.26588545328134505, 0.3309854971255288, 0.28643115467009117, 0.2557600812921035, 0.19243543189718548, 0.35132924558262724, 0.30836834181872996, 0.2938921507437291, 0.28413062468929007, 0.24278098776349522, 0.2617843667166849, 0.13692143231289278, 0.13851711927430566, 0.1819022209999812, 0.12258745892399059, 0.14284416392894805, 0.1780767080716289, 0.14160817808937987, 0.14608112063030998, 0.16248201741194912, 0.22680385872273534, 0.2462195787467597, 0.260335970843494, 0.23126836905651393, 0.2501987566256262, 0.24357645755263524, 0.34433649322258086, 0.2521802390377239, 0.3360899667075309, 0.06407098965822311, 0.07762819588075454, 0.04642361484359936, 0.10275264400317341, 0.04995132753689924, 0.060385322008050024, 0.1565304137604464, 0.06153341961007952, 0.08055039575916689, 0.17974375265773723, 0.17371854538633746, 0.21656018304590685, 0.19626100286279546, 0.21783420425480904, 0.21449134543563209, 0.22888815631249904, 0.16685420289600428, 0.200271226978065, 0.599596058080185, 0.6021379378449967, 0.6030788345237654, 0.6052077312468545, 0.5750902138217868, 0.6084431746054594, 0.6304578356582233, 0.5724603450796522, 0.6215597742280015, 0.08281355391455913, 0.08735363262434948, 0.08887105511451521, 0.09686486333878508, 0.10006418949584173, 0.10494495360953693, 0.08620881143313786, 0.09223900144481156, 0.09312734679660117, 0.20025639237298365, 0.14610911996856646, 0.13147590313688218, 0.18176206293661812, 0.21737458990470648, 0.14668421551287425, 0.19382574147628884, 0.15579382065125924, 0.14132363783065027, 0.33876494704434723, 0.30262212725960547, 0.3090512171034482, 0.3199293487369288, 0.3101669249820572, 0.2964321363530398, 0.35769955991912084, 0.35655859234239273, 0.3474325339972244, 0.2523431533764562, 0.2199810960363633, 0.2373390745806201, 0.20263245027810495, 0.22413654886318002, 0.23759966543600375, 0.24645257907310347, 0.2898411183706803, 0.2514551240064359, 0.20314636059055446, 0.1824907472762396, 0.19797135480686245, 0.1967255670412995, 0.1734669764755139, 0.22783333457244204, 0.18726255736390363, 0.20099976304124334, 0.20368692166246993, 0.20208909666947306, 0.1977920958559446, 0.27928065502020016, 0.21325064005105177, 0.21570717745893642, 0.2219193873027253, 0.19731154813381568, 0.18885154253711367, 0.20171939018973073, 0.6720831873038713, 0.6779876850157545, 0.1849938630883987, 0.5403848401443798, 0.6301306169461256, 0.5801927899578978, 0.18249826133666647, 0.6041006051147457, 0.6703167288862559, 0.1944931126405428, 0.2048825304617743, 0.5981332825106154, 0.5595834354703308, 0.1979893232573703, 0.6042174970891026, 0.6606806480222911, 0.688156035228695, 0.20837433516468307, 0.1863127100216312, 0.1750987457863442, 0.20332342910463164, 0.1890865180456478, 0.19263782283469555, 0.189449312267028, 0.18924845902268073, 0.1748647389746344, 0.17255630231924024, 0.07075447453872274, 0.06883077226671197, 0.08107312177323911, 0.07671399820650371, 0.0722070969493891, 0.06989145403578167, 0.07252881179519322, 0.07161034857682358, 0.06955295924138849]}, "mutation_prompt": null}
