{"id": "f6a97730-d1db-4c30-b8ba-bdea207a11fa", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(50, self.budget // 2)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n\n    def mutate(self, idx, F=0.5):\n        candidates = list(range(self.population_size))\n        candidates.remove(idx)\n        x1, x2, x3 = self.population[np.random.choice(candidates, 3, replace=False)]\n        mutant = x1 + F * (x2 - x3)\n        mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n        return mutant\n\n    def crossover(self, target, mutant, cr=0.7):\n        jrand = np.random.randint(self.dim)\n        trial = np.array([mutant[j] if np.random.rand() < cr or j == jrand else target[j] for j in range(self.dim)])\n        return trial\n\n    def simulated_annealing_acceptance(self, current_value, candidate_value, temperature):\n        if candidate_value < current_value:\n            return True\n        else:\n            return np.random.rand() < np.exp((current_value - candidate_value) / temperature)\n\n    def __call__(self, func):\n        evaluations = 0\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                target = self.population[i]\n                mutant = self.mutate(i)\n                trial = self.crossover(target, mutant)\n\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < self.best_value:\n                    self.best_solution = trial\n                    self.best_value = trial_value\n\n                if self.simulated_annealing_acceptance(func(target), trial_value, temperature):\n                    self.population[i] = trial\n\n            temperature *= cooling_rate\n\n        return self.best_solution", "name": "HybridDESA", "description": "A hybrid Differential Evolution and Simulated Annealing algorithm that balances exploration and exploitation by adapting mutation and annealing schedules.", "configspace": "", "generation": 0, "fitness": 0.19278550025309493, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.32131098851294515, 0.3202874425778528, 0.32115439606553176, 0.37766109555943406, 0.3308150989931925, 0.31835976552293155, 0.3464227539562096, 0.3301138673849622, 0.36330798191450986, 0.21793786241551205, 0.22452099228650957, 0.2575459960690286, 0.2328161571732581, 0.23684451821430785, 0.24595962011488348, 0.23247785576801872, 0.23422369055081915, 0.2276143941881157, 0.09896022005938887, 0.1088072666884875, 0.11719681604636911, 0.1267887772859313, 0.1110475070418333, 0.10997320637518715, 0.09600729002859865, 0.11112125989998711, 0.10808185243765345, 0.08746440982875281, 0.09804859162129687, 0.10033351775765964, 0.09813654933717697, 0.08647567120750499, 0.10199177377717117, 0.09932390610637598, 0.090023207038464, 0.09102641824345048, 0.8969347306836025, 0.9056300200425957, 0.9034137330595055, 0.8778522494496415, 0.9056445213468992, 0.890029016149186, 0.8109226324637554, 0.8982048143292817, 0.9037249106839662, 0.20778213226097098, 0.2126095842390856, 0.1857985396643137, 0.20176006687097303, 0.19584989818714527, 0.17957771279669144, 0.21099110289889345, 0.21092757733631262, 0.21558040065040096, 0.2628637666285436, 0.264775482063055, 0.259311670759352, 0.26065923772938926, 0.2670899503799332, 0.24529399626358261, 0.2616694298409993, 0.2865163654593762, 0.2663242688023112, 0.127574717619108, 0.11519834489882708, 0.1325310538547535, 0.14128584644721853, 0.1306596315252465, 0.13334740756961005, 0.1580486126170414, 0.14499719894801677, 0.14898625152769895, 0.13821748348369822, 0.15621722971533525, 0.1273879311264967, 0.14601319998806317, 0.14558021948985933, 0.13838994141670702, 0.13367270083123928, 0.13081342335428503, 0.1191879259378551, 0.023184645553779082, 0.020981729373785174, 0.018742183437250648, 0.020858312086745934, 0.008323324353665562, 0.018937757872533934, 0.02287862741461033, 0.028785099943494652, 0.01897458557160958, 0.11741757255337493, 0.1361867251949791, 0.19028748400154805, 0.1098659683200558, 0.09357847107161266, 0.10879578909834275, 0.15272839579808684, 0.16285156038233584, 0.16183778594917353, 0.006123220274413477, 0.0038932170994763204, 0.0006689408233480076, 0.0018511962806456728, 0.0005907142432824974, 0.010515025084064877, 0.017729726119635414, 0.005327767260156935, 0.0004051778025283559, 0.09259515022880382, 0.1027467898727118, 0.09770390836873233, 0.10673056038232842, 0.09457649108682564, 0.12427277983019192, 0.09148411247789523, 0.1101508543006059, 0.08621081095779737, 0.3069490118744348, 0.30572315643193404, 0.319389431252858, 0.3005391844428106, 0.356496511457588, 0.3107170665713005, 0.3534933391840872, 0.3068565778803859, 0.3096567933478963, 0.0951683334195339, 0.097230842943419, 0.0691814515126522, 0.1059423975975693, 0.07512963393106842, 0.07594527116992889, 0.09141160973322637, 0.079579290319997, 0.07849166711696509, 0.12309433587752006, 0.13859219447406446, 0.1267395063355249, 0.1573964069842292, 0.12407152508188335, 0.1166045059773293, 0.12674480271808242, 0.12546924214197097, 0.13039603614031148, 0.23255670963986608, 0.22761052220230382, 0.2455654834772355, 0.24904785171590837, 0.22465462271437575, 0.23737012579599281, 0.23499738625946498, 0.24826745082317114, 0.2508565654078919, 0.19049386304690585, 0.20828666224139036, 0.19170556058396637, 0.1969203650517054, 0.17535393774913466, 0.1892156364475306, 0.2058509248121393, 0.21807913930879708, 0.199499871298217, 0.17727713932401967, 0.17342277487772884, 0.1805899113462459, 0.20945009197950082, 0.18894660281113873, 0.19269208040687968, 0.19878442740122304, 0.18007576175375672, 0.1809864581342644, 0.1763896700988158, 0.17134024365283163, 0.1923252286732201, 0.1827613303587564, 0.17640853438487392, 0.17343688928939482, 0.1895533913872578, 0.17261427393224515, 0.16986354146956895, 0.16799551006596047, 0.2728959605442879, 0.22542783291511748, 0.16491931261352055, 0.19334884919267192, 0.1614995917513704, 0.15603195545704496, 0.1575229613348561, 0.2033304224909267, 0.17390294241179605, 0.15869006725349066, 0.16795561198466125, 0.17355373423583675, 0.1864943628268163, 0.1664868958726382, 0.19105504871941092, 0.18906016321713237, 0.19054714581157528, 0.1846720202499842, 0.19730633416707055, 0.17922097735778697, 0.19339672207287195, 0.1774677514146913, 0.18165682994546128, 0.19117118614890416, 0.16576601427649051, 0.18119593694207037, 0.06691967236429297, 0.06720885361957096, 0.07449278851094299, 0.08270800690890301, 0.0780635907515983, 0.07680376722406124, 0.06835162909107362, 0.08168845892304222, 0.06777588031371995]}, "mutation_prompt": null}
{"id": "e68449f8-b29f-4395-9644-addfcfabcfb7", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(50, self.budget // 2)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n\n    def mutate(self, idx, F):\n        candidates = list(range(self.population_size))\n        candidates.remove(idx)\n        x1, x2, x3 = self.population[np.random.choice(candidates, 3, replace=False)]\n        mutant = x1 + F * (x2 - x3)\n        mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n        return mutant\n\n    def crossover(self, target, mutant, cr=0.7):\n        jrand = np.random.randint(self.dim)\n        trial = np.array([mutant[j] if np.random.rand() < cr or j == jrand else target[j] for j in range(self.dim)])\n        return trial\n\n    def simulated_annealing_acceptance(self, current_value, candidate_value, temperature):\n        if candidate_value < current_value:\n            return True\n        else:\n            return np.random.rand() < np.exp((current_value - candidate_value) / temperature)\n\n    def __call__(self, func):\n        evaluations = 0\n        temperature = 1.0\n        cooling_rate = 0.99\n\n        while evaluations < self.budget:\n            F = 0.5 + 0.3 * np.cos(2 * np.pi * evaluations / self.budget)  # Dynamic mutation factor\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                target = self.population[i]\n                mutant = self.mutate(i, F)\n                trial = self.crossover(target, mutant)\n\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < self.best_value:\n                    self.best_solution = trial\n                    self.best_value = trial_value\n\n                if self.simulated_annealing_acceptance(func(target), trial_value, temperature):\n                    self.population[i] = trial\n\n            temperature *= cooling_rate\n\n        return self.best_solution", "name": "HybridDESA", "description": "Enhanced HybridDESA with dynamic mutation factor for improved adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": 0.18045536472931828, "feedback": "", "error": "", "parent_id": "f6a97730-d1db-4c30-b8ba-bdea207a11fa", "metadata": {"aucs": [0.3156987140671219, 0.3164385661061013, 0.3327810958862354, 0.3296515513776703, 0.324367388050248, 0.31518688685522134, 0.3286542244701023, 0.34169776608554137, 0.3494892101358896, 0.2051072623852742, 0.1981300973883785, 0.22476743834769197, 0.21284352675640628, 0.19496581863128082, 0.2084916179095836, 0.20428104994855445, 0.20783868121193438, 0.2061228713715766, 0.09872976967535885, 0.09592783594038667, 0.09314738140981715, 0.09774065294512524, 0.08960287618765994, 0.09624883955256158, 0.08904046201677063, 0.09981700446269792, 0.10485394473205434, 0.08127300212969235, 0.08512288361241171, 0.08810041882015207, 0.08632168297455278, 0.07945815990075511, 0.07947266288134558, 0.08745643975843997, 0.08654772305716829, 0.09130032884065353, 0.9268307221348376, 0.9272181698851174, 0.9132055844416952, 0.9241183627087524, 0.9558385175275773, 0.8917820583025294, 0.8711668994669336, 0.9229137959986624, 0.9397274947440929, 0.1702251908777922, 0.1658022441231235, 0.1727612444227179, 0.17969621509122458, 0.16944213588853418, 0.18852740989741634, 0.1635526644811256, 0.17248895591531332, 0.17192822147918396, 0.23744038566003323, 0.22295525699361718, 0.26367494177313155, 0.24817013994731985, 0.26926887026670654, 0.2420807650829674, 0.2322341639472717, 0.218695340455212, 0.21987701279717065, 0.10851719285349626, 0.10765007227133228, 0.11394525147150447, 0.1244012103759049, 0.1205522422678178, 0.11135627614236676, 0.10388245265133411, 0.10073859347387681, 0.10867682604907691, 0.07392294852498504, 0.0569302266580316, 0.11162494706658488, 0.11825852539157045, 0.11536729567266069, 0.12062629694707461, 0.0918121495101828, 0.08478240605217435, 0.08925247113288293, 0.01124600578801438, 0.012283853631024022, 0.018124116586459627, 0.01665002543162586, 0.011320838501772235, 0.019167980169438437, 0.014829771756603272, 0.01757113977802982, 0.011710908594828484, 0.07095433766709336, 0.10202563444976276, 0.13292519409852754, 0.07641200331557907, 0.09588055783786809, 0.10379229631084874, 0.13758571979313494, 0.11903749442049938, 0.1145856005978878, 0.0006671719271440502, 0.0006101203630587415, 0.0054475347407771935, 0.0004856226877287817, 0.0014438191542438528, 0.004026561592454847, 0.014126505170987236, 0.018548597369009046, 0.010087383524587712, 0.08192647942825171, 0.07543989597514122, 0.0724046868668542, 0.08378996727120325, 0.08646375481001212, 0.0899150626621329, 0.08625047586867185, 0.07638529493508939, 0.0863429087248454, 0.2994322932108303, 0.2983222559602543, 0.30606252042610615, 0.31125621707203477, 0.2963852732707324, 0.3029037944253611, 0.29454967804164633, 0.29750937437041813, 0.30318293729845214, 0.07933458287053285, 0.1056733368155226, 0.08048676977516189, 0.08209576414900677, 0.07079444806506785, 0.08651251762620737, 0.08102805300113902, 0.06547159040302741, 0.072073361454563, 0.13032659865946716, 0.12268906448010963, 0.13262472275478, 0.15765153466221293, 0.1278975391453041, 0.1242420207999183, 0.132387477859371, 0.12203625551313213, 0.12621095601095877, 0.2427854696757501, 0.2281388723205955, 0.22875582492621294, 0.2227505277227153, 0.2166812405874471, 0.22855836565006016, 0.24012065517045522, 0.2518208268638694, 0.24521886447876362, 0.16387750387018163, 0.16725186267951664, 0.16452642652892369, 0.16773829624511294, 0.173775335301526, 0.1614005747938565, 0.17426379526694002, 0.1797727589965823, 0.18626077764951576, 0.18512741687671497, 0.16920566720240426, 0.1637026405448918, 0.17678763610633852, 0.17327516635966222, 0.17990200779724297, 0.16748395013947115, 0.16113595566165984, 0.1728518125992632, 0.17595171620832284, 0.17699962368841593, 0.1741488491518629, 0.18271897195221276, 0.16471564652683046, 0.1763130873226295, 0.1796177140850077, 0.16318067207882936, 0.18095891192336022, 0.15542129460904253, 0.14872710651417398, 0.18405485937575927, 0.23616399210476635, 0.1537757782104623, 0.1267670349986023, 0.15944976381814957, 0.16707558209740347, 0.20800167181745033, 0.1735615829302275, 0.17216763547190872, 0.16395482972479092, 0.15637997204294274, 0.15675966625097804, 0.1764437808305731, 0.1806919793297247, 0.35328600011652034, 0.19598672280002327, 0.16137252171357463, 0.19279293068128456, 0.17893253088757688, 0.1789633168189313, 0.17534159474888744, 0.16932672301908447, 0.16720808317368463, 0.17245822428242663, 0.1698307993969036, 0.06168128896052072, 0.06011677692161588, 0.0667030107604516, 0.0709464679556353, 0.06635574877109707, 0.06738159038359248, 0.0656983572451818, 0.06578932353159217, 0.0708125696562183]}, "mutation_prompt": null}
