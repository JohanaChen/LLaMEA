{"id": "90dd1d42-36c2-46e8-bf81-c767d140834e", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 40\n        self.velocities = np.random.uniform(-1, 1, (self.num_particles, self.dim))\n        self.positions = np.random.uniform(-5, 5, (self.num_particles, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.global_best_position = np.copy(self.positions[0])\n        self.personal_best_scores = np.full(self.num_particles, np.inf)\n        self.global_best_score = np.inf\n        self.F = 0.8  # DE mutation factor\n        self.CR = 0.9  # DE crossover rate\n\n    def __call__(self, func):\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate current positions\n            for i in range(self.num_particles):\n                score = func(self.positions[i])\n                eval_count += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = np.copy(self.positions[i])\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = np.copy(self.positions[i])\n\n                if eval_count >= self.budget:\n                    break\n\n            # Update velocities and positions using PSO\n            w = 0.5 + np.random.rand() / 2\n            c1 = 1.5\n            c2 = 1.5\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, -5.0, 5.0)\n\n            # Differential Evolution step on best particles\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = list(range(self.num_particles))\n                    indices.remove(i)\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    mutant = np.clip(self.positions[a] + self.F * (self.positions[b] - self.positions[c]), -5.0, 5.0)\n                    \n                    trial = np.copy(self.positions[i])\n                    for d in range(self.dim):\n                        if np.random.rand() <= self.CR:\n                            trial[d] = mutant[d]\n\n                    trial_score = func(trial)\n                    eval_count += 1\n\n                    if trial_score < self.personal_best_scores[i]:\n                        self.personal_best_scores[i] = trial_score\n                        self.personal_best_positions[i] = trial\n\n                    if trial_score < self.global_best_score:\n                        self.global_best_score = trial_score\n                        self.global_best_position = trial\n\n                    if eval_count >= self.budget:\n                        break\n        return self.global_best_position, self.global_best_score", "name": "HybridPSO_DE", "description": "A hybrid Particle-Swarm and Differential-Evolution algorithm leveraging swarm intelligence and mutation strategies for effective global search.", "configspace": "", "generation": 0, "fitness": 0.22666762018571202, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6102651245421137, 0.6248571899422977, 0.5494221487636818, 0.5808611330450923, 0.6805345155056357, 0.5589288186646091, 0.6380624602952751, 0.6506231272189008, 0.584365744592612, 0.024978220504541016, 0.2262353593504719, 0.13115258671364427, 0.03863961631784241, 0.20341318548802134, 0.14074319340345898, 0.1795144540096809, 0.18999104679455103, 0.04861958477601569, 0.09854031143605557, 0.158349025040193, 0.08269784018632342, 0.10504471604556243, 0.1117854916540717, 0.07093105405719724, 0.10909168699206162, 0.16177777994333664, 0.11550282084331176, 0.08398322622238741, 0.17541732763878903, 0.11371079561361697, 0.08149871161377653, 0.12649855893035078, 0.09169927604877648, 0.1732799556026835, 0.11954078609312091, 0.11642942999494155, 0.981082519683755, 0.9863678843304983, 0.9753318573854375, 0.9817470506447745, 0.9883780051994062, 0.9822044004729407, 0.9822073098299213, 0.9884543907467656, 0.9841196981088762, 0.2620570418596818, 0.3375513177687822, 0.20712598961663176, 0.14293030341959345, 0.15020844402487232, 0.2568848420577102, 0.08418148322585783, 0.327775004742173, 0.27644232122143697, 0.3274128057322746, 0.5460186257703776, 0.22424128674865484, 0.18262031916606347, 0.33482008260575213, 0.19069607997296711, 0.272504631698255, 0.32047131104853366, 0.36158994869031724, 0.15099928748124836, 0.15782920711345183, 0.10770448811143851, 0.09461295956638238, 0.16676557155647664, 0.16770702340203913, 0.15101393454277878, 0.1848207781440766, 0.16696896464776367, 0.16456732555377185, 0.1144467074515132, 0.14106107125222556, 0.1578760222829385, 0.16032289959105905, 0.11416046879665975, 0.1451582941029821, 0.13858476276635467, 0.14037166026771375, 0.00012875678627355391, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042383758028853635, 9.999999999998899e-05, 0.00010226370238264337, 0.00041817485916928465, 9.999999999998899e-05, 0.06720582741944914, 0.03722953590526179, 0.07429125072321696, 0.06988263378282156, 0.06505270870784807, 0.06669041880906101, 0.05458179701105548, 0.07161521322609277, 0.028269432467000533, 9.999999999998899e-05, 0.023163016011144122, 0.022898818201963156, 0.054485958011954105, 0.04360342986308041, 0.09197654865381233, 0.0661811500304601, 0.06570345979407755, 0.06769311005958112, 0.1263054543933524, 0.20094422353872998, 0.12215938629036971, 0.12249772979856355, 0.15869794748066213, 0.10864477603995548, 0.07667276728632755, 0.0798350260425299, 0.09200756086729744, 0.462049383914935, 0.45913154213459373, 0.42992189992805785, 0.4501698521483466, 0.4390596996868392, 0.4148519620528931, 0.4320704931713917, 0.47347425575504853, 0.46450438181190734, 0.11992586521819082, 0.10722493620158058, 0.08768676885189253, 0.09633093086756161, 0.12753311004885604, 0.08440899884942288, 0.10283386146932971, 0.09349759015996328, 0.06998770958283662, 0.19404311334031776, 0.15690637374768135, 0.17817292054921707, 0.17586159365619847, 0.17543530825942233, 0.20203246103945172, 0.1665813226816084, 0.1982521631432922, 0.14087035624757138, 0.3199652046697268, 0.3390514789936314, 0.312087085533288, 0.3005017261422561, 0.26732574211421656, 0.28062069808561707, 0.26366967200352864, 0.336013300267507, 0.34066145753511246, 0.2221855715975325, 0.18578353734556008, 0.21361549236156585, 0.24772714964718412, 0.19439601625321268, 0.20254733512377732, 0.24152399246377432, 0.22784208300378372, 0.1607352881512979, 0.18931492135176864, 0.19385253811940717, 0.17893822081835165, 0.2021244307246941, 0.18444998695585113, 0.1917138029097435, 0.19409998805124173, 0.22110656054665934, 0.18523375432876732, 0.23360545522205134, 0.19742908794903813, 0.1989591590626466, 0.2247939860616175, 0.23751738211511497, 0.22324370845639407, 0.19601461567553913, 0.20087709483228944, 0.20859045890293915, 0.1518578264547985, 0.1855846588986284, 0.7449511620251734, 0.15865199174382472, 0.1577192434369512, 0.16766414190722911, 0.20733942146728046, 0.16482125368801004, 0.18288052881679784, 0.12706039408054604, 0.16437747452197382, 0.09840362168059658, 0.5573828125899931, 0.20582107553416917, 0.4833426909135853, 0.16716879890856384, 0.19577124713100558, 0.4436453255435767, 0.18613975272215844, 0.19994386625480942, 0.18174468926583343, 0.17655149772575718, 0.19932625447380592, 0.18610430949309298, 0.1960913194926751, 0.1857832844761731, 0.1924720081611455, 0.0772359685288897, 0.08001241407527104, 0.08485643660555575, 0.07738122631711397, 0.07431597264868273, 0.08325969419088541, 0.08922870121752058, 0.07947425066157632, 0.08559898648451347]}, "mutation_prompt": null}
{"id": "12844c6f-9833-443b-8d12-63d2a273f723", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 40\n        self.velocities = np.random.uniform(-1, 1, (self.num_particles, self.dim))\n        self.positions = np.random.uniform(-5, 5, (self.num_particles, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.global_best_position = np.copy(self.positions[0])\n        self.personal_best_scores = np.full(self.num_particles, np.inf)\n        self.global_best_score = np.inf\n        self.F = 0.8  # DE mutation factor\n        self.CR = 0.9  # DE crossover rate\n\n    def __call__(self, func):\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate current positions\n            for i in range(self.num_particles):\n                score = func(self.positions[i])\n                eval_count += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = np.copy(self.positions[i])\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = np.copy(self.positions[i])\n\n                if eval_count >= self.budget:\n                    break\n\n            # Update velocities and positions using PSO\n            w = 0.5 + np.random.rand() / 2\n            c1 = 2.0  # Increased cognitive coefficient\n            c2 = 2.0  # Increased social coefficient\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, -5.0, 5.0)\n\n            # Differential Evolution step on best particles\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = list(range(self.num_particles))\n                    indices.remove(i)\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    mutant = np.clip(self.positions[a] + self.F * (self.positions[b] - self.positions[c]), -5.0, 5.0)\n                    \n                    trial = np.copy(self.positions[i])\n                    for d in range(self.dim):\n                        if np.random.rand() <= self.CR:\n                            trial[d] = mutant[d]\n\n                    trial_score = func(trial)\n                    eval_count += 1\n\n                    if trial_score < self.personal_best_scores[i]:\n                        self.personal_best_scores[i] = trial_score\n                        self.personal_best_positions[i] = trial\n\n                    if trial_score < self.global_best_score:\n                        self.global_best_score = trial_score\n                        self.global_best_position = trial\n\n                    if eval_count >= self.budget:\n                        break\n        return self.global_best_position, self.global_best_score", "name": "HybridPSO_DE", "description": "Adjusted velocity update rule to enhance exploration by increasing cognitive and social coefficients.", "configspace": "", "generation": 1, "fitness": 0.17557886859181057, "feedback": "", "error": "", "parent_id": "90dd1d42-36c2-46e8-bf81-c767d140834e", "metadata": {"aucs": [0.3421008774383084, 0.3479583870742603, 0.34448833426487435, 0.3530381099574673, 0.42457733248482055, 0.3845541847133299, 0.37975759755359517, 0.39536434834057155, 0.36875286152613185, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026632628786558143, 0.01734257624925084, 0.0169637130724819, 0.005852921506628084, 0.029800816495968552, 0.014408182683399162, 0.07730384513463728, 0.07146777741942445, 0.08084631229145811, 0.0905627292093224, 0.08809493898300191, 0.06700925141992631, 0.09265348279262109, 0.0849105614820812, 0.08107737458230913, 0.06198979522503323, 0.08983006001330918, 0.08785203607656622, 0.06010869421330922, 0.10655829247682214, 0.07758466947051457, 0.10991788492005616, 0.08716040412152182, 0.05554562605135738, 0.9869677100863068, 0.989057473601292, 0.9823881985235621, 0.982361427250568, 0.9870832929570721, 0.9800043504093837, 0.9871586035340764, 0.987879378567821, 0.9854917342179982, 0.16537909733422418, 0.18644252606037826, 0.05749348330656412, 0.13232604115228808, 0.1377324884603871, 0.17060517654125196, 0.08755021337921187, 0.19701031733791896, 0.08792628420389537, 0.19072064436315428, 0.255214120720345, 0.22205013444466515, 0.1788766146359565, 0.18451744539074622, 0.1853941848786691, 0.24384475849267917, 0.2651039658385764, 0.21265746241306116, 0.13011356640346772, 0.08117486991894407, 0.08691817062332141, 0.09076570575168952, 0.12730165952536676, 0.13283034397814153, 0.11985477976373149, 0.1045058929480579, 0.07596189334066039, 0.10141272641533838, 0.11164474022171889, 0.08079219501171442, 0.10293539520301276, 0.07713196746786832, 0.0403678182186572, 0.11216963914108602, 0.09475372332141363, 0.08375678222763128, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005560947553340245, 0.054779733984826495, 0.027080320074461484, 0.04580944324621139, 0.10268132835744548, 0.03782587771268553, 0.012536112400735377, 0.03364007357015797, 0.03569070053185186, 0.050025981097768124, 9.999999999998899e-05, 0.009417129497618193, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002172427916590225, 9.999999999998899e-05, 0.046428701580287224, 0.004838402368332773, 0.051427878316958386, 0.06761712170502865, 0.0537054530910791, 0.053135481668405427, 0.050976884886536955, 0.058681215014027344, 0.04710575619171853, 0.31942091266895845, 0.3669145978237027, 0.39006536695253957, 0.327859933750392, 0.35042534759952315, 0.29230648617847776, 0.31468673445098627, 0.3346590174983203, 0.32009665816076915, 0.07793178566098391, 0.07567500251859272, 0.06899348462886645, 0.0760278996680116, 0.0830427790565913, 0.08222954075895705, 0.060762772707945056, 0.11021485745576498, 0.07323134012565313, 0.17589169689520545, 0.16476609528591601, 0.1948104660005734, 0.158995439894574, 0.22466149272133817, 0.17328060876256912, 0.1909911850180065, 0.15943103080041943, 0.1838187399525707, 0.24284542365234552, 0.23903541498297676, 0.21804314916576772, 0.24957390404125468, 0.24631634012657555, 0.20855723628721912, 0.2433535258815751, 0.2740704495782488, 0.23547389258893658, 0.1442521534682093, 0.21246414054239504, 0.15776277239548964, 0.15457217543086121, 0.18155908649732988, 0.161011687657742, 0.11374959800481188, 0.12491117661593176, 0.1358319666347112, 0.1917484202332077, 0.1988441212877642, 0.16077587015544192, 0.1666210120260777, 0.1701261784603586, 0.17302425795273924, 0.15816375375271707, 0.17643749371562922, 0.18323345390588053, 0.1704691346681242, 0.17943793333892244, 0.1617786397230082, 0.19246814165218618, 0.1833458620300431, 0.16590721711182865, 0.18064545153985434, 0.16443140722710436, 0.1642859231811753, 0.15344323654085001, 0.5245883966573037, 0.41869890814128785, 0.1786839645569127, 0.15895605751286712, 0.16524605698274775, 0.20022099416166694, 0.15509520174740288, 0.18205139898703004, 0.12350351329703357, 0.11217277895119371, 0.15838438332651672, 0.16565278192110233, 0.1910739341170561, 0.2858045309661662, 0.143516095690695, 0.3794319119436751, 0.26294170988879095, 0.20549625992040854, 0.1943733801228985, 0.21769361384089392, 0.20188259171227962, 0.18957316851906802, 0.17241537298542953, 0.19533772932071702, 0.19767005990414077, 0.19020582006646347, 0.06575229699227492, 0.07789756482564558, 0.0671203870664776, 0.07312749302678201, 0.07177232046968851, 0.06917919681365658, 0.07841244609376352, 0.06447710173082144, 0.06720496084377414]}, "mutation_prompt": null}
