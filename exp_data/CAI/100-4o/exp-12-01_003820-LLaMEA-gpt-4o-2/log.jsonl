{"id": "c1f79087-d911-49fd-b809-8b19aa1c8419", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.f = 0.8\n        self.cr = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n        # Initialize particles for PSO\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.pop_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n\n    def __call__(self, func):\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate the current population\n            scores = np.array([func(p) for p in self.positions])\n            eval_count += self.pop_size\n            \n            # Update personal and global bests\n            for i in range(self.pop_size):\n                if scores[i] < self.pbest_scores[i]:\n                    self.pbest_scores[i] = scores[i]\n                    self.pbest_positions[i] = self.positions[i]\n                if scores[i] < self.gbest_score:\n                    self.gbest_score = scores[i]\n                    self.gbest_position = self.positions[i]\n\n            # PSO velocity and position update\n            for i in range(self.pop_size):\n                rp = np.random.uniform(0, 1, self.dim)\n                rg = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * rp * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * rg * (self.gbest_position - self.positions[i]))\n                self.positions[i] = np.clip(self.positions[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n            # Apply DE operators on part of the swarm\n            if eval_count < self.budget:\n                for i in range(self.pop_size):\n                    indices = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    mutant = np.clip(self.positions[a] + self.f * (self.positions[b] - self.positions[c]), \n                                     self.lower_bound, self.upper_bound)\n                    trial = np.array([mutant[j] if np.random.rand() < self.cr else self.positions[i][j] for j in range(self.dim)])\n                    trial_score = func(trial)\n                    eval_count += 1\n                    if trial_score < scores[i]:\n                        self.positions[i] = trial\n                        scores[i] = trial_score\n                        if trial_score < self.pbest_scores[i]:\n                            self.pbest_scores[i] = trial_score\n                            self.pbest_positions[i] = trial\n                            if trial_score < self.gbest_score:\n                                self.gbest_score = trial_score\n                                self.gbest_position = trial\n                            if eval_count >= self.budget:\n                                break", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for global exploration and local exploitation, balancing convergence speed and solution diversity.", "configspace": "", "generation": 0, "fitness": 0.2739953074317342, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8649574184183342, 0.8646776454448353, 0.87283729388425, 0.8732824451805802, 0.18989005248835267, 0.8676319712414631, 0.864535725075113, 0.8586247523981632, 0.8818628883648343, 0.7280840094841454, 9.999999999998899e-05, 0.7393324895531509, 0.74909773616581, 0.7783309220744563, 0.7360319870742915, 0.7584953157813409, 0.7607435305809596, 0.6477948391041254, 0.12144445475379761, 0.11756864806406542, 0.1092771047377562, 0.12579420740236424, 0.0643681240460422, 0.16351946659073913, 0.13220600473730504, 0.0937208188643961, 0.1693081975035573, 0.11283637884354669, 0.11199349827323946, 0.10286720335862132, 0.11439253687619222, 0.09233783918348604, 0.13470995635535, 0.10160992519055811, 0.13291914761776857, 0.10256700544270592, 0.9856430851230448, 0.9806412561545806, 0.9904550353124356, 0.9910674904950547, 0.9836208207159056, 0.9841939351434684, 0.9913638141642228, 0.9876148696961845, 0.989171957928468, 0.4193081141160283, 0.41348597917129015, 0.29973784473323717, 0.4343157713601976, 0.32679579214229093, 0.14889693936675885, 0.052144153636686674, 0.0870011327591419, 0.5260209313778569, 0.2289286936623688, 0.8132532999464837, 0.8248850172400007, 0.18715427138653096, 0.19310745405081253, 0.11605736027531244, 0.20153286719909724, 0.12231611322449354, 0.11701175550398513, 0.22113229863730066, 0.13110660749216663, 0.34742527453959626, 9.999999999998899e-05, 0.12942369886343674, 0.12889951765369478, 0.23159393132107686, 9.999999999998899e-05, 0.23546337808155748, 0.25523173840247204, 0.022454835912792848, 0.11913389463568469, 0.26826368382548227, 0.2320646850041136, 0.25660062797030503, 0.25163885068087233, 0.2537131993855726, 0.2495601739674631, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00025562254229427595, 9.999999999998899e-05, 9.999999999998899e-05, 0.028259916733173518, 0.07616322935279041, 9.999999999998899e-05, 0.052755979169215594, 0.048527113389183585, 0.09415953160326118, 0.06747488619913333, 0.011956793544941502, 0.01955161220140489, 0.04111494277866623, 0.043647966670251837, 0.08258492774908077, 0.04916660670572115, 0.03536712026156674, 0.2349941967345982, 9.999999999998899e-05, 0.17319053859917766, 0.09372700985970661, 0.09840426850710227, 0.11070851948512594, 0.07123159299245141, 9.999999999998899e-05, 9.999999999998899e-05, 0.19665919864434922, 0.006218532233377649, 0.054084099683494036, 0.07928081189635994, 9.999999999998899e-05, 0.048249008629469015, 0.08000301063758508, 0.5318028576558922, 0.5576286021069015, 0.6133946943438553, 0.5525026409220555, 0.5709632736688288, 0.5140082515589321, 0.6214253391344878, 0.5799896116791037, 0.5713682886113789, 0.10388695997523978, 0.06863317674230784, 0.10727329007854913, 0.1002233414272099, 0.07897871371168219, 0.13873091649960823, 0.06549590970175811, 0.0895422485652202, 0.1064745395968224, 0.17439995989236756, 0.11919288455680177, 0.14330324917097315, 0.17946010305316262, 0.1614051821544885, 0.1872883654371691, 0.1991688740675167, 0.14297882850430743, 0.2234931168610097, 0.2804584960414218, 0.34772491673276396, 0.22824881607141456, 0.4900608470066671, 0.3574387709120205, 0.25180071090866685, 0.5622174836477707, 0.5503348244359794, 0.5637965745157731, 0.30790519470364563, 0.18021480820906177, 0.2662615394291682, 0.19889633576752508, 0.1887068223376397, 0.27076181320953363, 0.33158766367857273, 0.27085640659956156, 0.1985482794678014, 0.18645384114038033, 0.16107735458578953, 0.18132039064939576, 0.17059914188182734, 0.19834626574530334, 0.18273658953062122, 0.19992182094367816, 0.1910406344099861, 0.1940023785299546, 0.2127419232858, 0.21828341749169078, 0.41529415344016385, 0.20126046758887295, 0.20041623834385802, 0.17826300893837632, 0.2170115481051763, 0.17205132166829584, 0.5742274314922049, 0.7364317213366336, 0.16519111354775684, 0.15412409841230224, 0.1718632036865918, 0.19763168331158754, 0.19551188389177443, 0.13436986854567545, 0.1687864351703644, 0.16129334340943746, 0.12419654973342953, 0.20407131164586312, 0.07905182704744784, 0.20760514748674264, 0.27564732096767786, 0.6221821225951951, 0.2134419320223775, 0.6624631458307499, 0.16863644697090674, 0.18569717636348415, 0.17819882029538514, 0.18939007705044597, 0.16954986836276498, 0.1773930770938147, 0.19295931822280277, 0.19352245481149788, 0.17658349419256925, 0.1944415180174196, 0.07156602241824095, 0.08375446204186043, 0.07227450473629704, 0.0868630694583884, 0.06779943149519263, 0.07062264580301525, 0.07584443110051886, 0.09689172388759493, 0.0851329739480905]}, "mutation_prompt": null}
{"id": "98fdc3cc-a497-409c-82b5-edb15572ecae", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.9  # Initial inertia weight\n        self.f = 0.8\n        self.cr = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n        # Initialize particles for PSO\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.pop_size, float('inf'))\n        self.gbest_position = None\n        self.gbest_score = float('inf')\n\n    def __call__(self, func):\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate the current population\n            scores = np.array([func(p) for p in self.positions])\n            eval_count += self.pop_size\n            \n            # Update personal and global bests\n            for i in range(self.pop_size):\n                if scores[i] < self.pbest_scores[i]:\n                    self.pbest_scores[i] = scores[i]\n                    self.pbest_positions[i] = self.positions[i]\n                if scores[i] < self.gbest_score:\n                    self.gbest_score = scores[i]\n                    self.gbest_position = self.positions[i]\n\n            # PSO velocity and position update\n            for i in range(self.pop_size):\n                rp = np.random.uniform(0, 1, self.dim)\n                rg = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * rp * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * rg * (self.gbest_position - self.positions[i]))\n                self.positions[i] = np.clip(self.positions[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n            # Adapt inertia weight\n            self.w = 0.4 + 0.5 * (1 - eval_count / self.budget)\n\n            # Apply DE operators on part of the swarm\n            if eval_count < self.budget:\n                for i in range(self.pop_size):\n                    indices = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    mutant = np.clip(self.positions[a] + self.f * (self.positions[b] - self.positions[c]), \n                                     self.lower_bound, self.upper_bound)\n                    trial = np.array([mutant[j] if np.random.rand() < self.cr else self.positions[i][j] for j in range(self.dim)])\n                    trial_score = func(trial)\n                    eval_count += 1\n                    if trial_score < scores[i]:\n                        self.positions[i] = trial\n                        scores[i] = trial_score\n                        if trial_score < self.pbest_scores[i]:\n                            self.pbest_scores[i] = trial_score\n                            self.pbest_positions[i] = trial\n                            if trial_score < self.gbest_score:\n                                self.gbest_score = trial_score\n                                self.gbest_position = trial\n                            if eval_count >= self.budget:\n                                break", "name": "HybridPSO_DE", "description": "Enhance convergence by dynamically adjusting the inertia weight `w` in PSO for better balance between exploration and exploitation.", "configspace": "", "generation": 1, "fitness": 0.17748441289202307, "feedback": "", "error": "", "parent_id": "c1f79087-d911-49fd-b809-8b19aa1c8419", "metadata": {"aucs": [0.5934902729306931, 0.5180030678826014, 0.5706626820835521, 0.65734682334324, 0.18348660557199215, 0.18006619559734882, 0.5214705760319455, 0.6301082162900135, 0.5854942701557968, 9.999999999998899e-05, 0.3890249077327592, 9.999999999998899e-05, 0.36079357971460735, 0.2908956461968575, 0.017769901351105677, 9.999999999998899e-05, 0.34501722072693763, 0.038984071827000144, 0.08584993361843718, 0.08136064215253047, 0.11821655746086346, 0.06276424247862489, 0.10395091171893522, 0.09659493403763719, 0.08549978649308343, 0.07569504249945491, 0.04467583307005374, 0.09741738311919923, 0.08139772799186029, 0.11260384468577944, 0.07378119556166696, 0.09165789418495207, 0.07021901248281504, 0.0793760045561065, 0.07507534867801247, 0.08270633740914035, 0.9844144098715184, 0.9871532726904289, 0.9877824067881292, 0.9912319474679553, 0.990767363331513, 0.9896170173033274, 0.9936456216892178, 0.9868919943868397, 0.9911750637769708, 0.09227905407246528, 0.02711435528669226, 0.05352333243905627, 0.12121101221978514, 0.15227422772218302, 0.12802646548894503, 0.08606725631321532, 0.16445792488734756, 0.17940282243648342, 0.200512602403894, 0.14573849935006056, 0.13966112558874744, 0.19072053360308172, 0.144257034777168, 0.17267250486641128, 0.1202180709564089, 0.08880881621006609, 0.2891475622733054, 0.12670496885029792, 0.1566035915341374, 0.12052501224727108, 0.07572130992431325, 0.09035364244470168, 0.08155407564625838, 0.13801516294667326, 0.13256623665917466, 0.1733392485405164, 0.020868261398494514, 0.0100670272032779, 0.009949050628092815, 0.10140695293321045, 0.09735948614430323, 0.08771038855952829, 0.07586620616225703, 9.999999999998899e-05, 0.02239799787214647, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010876108817914343, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009802614820441091, 0.030647982106596805, 0.035465874892397165, 0.031861341788131714, 0.028680953444539248, 0.011369944589562642, 0.006591188107289647, 0.0490661527328663, 0.029058796780615515, 0.05248700068321921, 0.05608461330386094, 9.999999999998899e-05, 9.999999999998899e-05, 0.04451548651479498, 0.040418306424302664, 0.03795965205603191, 0.046216197939198955, 0.05215762205363084, 0.04932586489534552, 0.07930878013921105, 0.07345569295186416, 0.13014938078676752, 0.004060920567846238, 0.06851414457281735, 0.08382152335251813, 9.999999999998899e-05, 0.040813890086578986, 9.999999999998899e-05, 0.34011094639230177, 0.3876780136578978, 0.3610320320313807, 0.2066431127123104, 0.42486928963410453, 0.3786287863994394, 0.37104923424466707, 0.1376819242799453, 0.4038323563457785, 0.09150369309065465, 0.0561610396031329, 0.07389839512170693, 0.08930205153940662, 0.08121569014441121, 0.0877360239369045, 0.06291630963597505, 0.067500022752503, 0.06839225505573254, 0.1467648569497344, 0.1503674881970941, 0.14945559297945676, 0.11247841378263401, 0.18076348559117705, 0.15152805748415699, 0.17813119970037694, 0.1361501115960626, 0.15902738663353866, 0.2444629821951707, 0.26234755310325497, 0.22264971695181435, 0.2759090979156654, 0.18942447468789403, 0.17796422667897582, 0.279491286906261, 0.29131983679589113, 0.3031618029695322, 0.16765602762377252, 0.15228212149738263, 0.1381791178182188, 0.15405997630530488, 0.16738162618411156, 0.16741841864036866, 0.2772849482553448, 0.15900773931009204, 0.22390082636084385, 0.15340334792984178, 0.1519328482110146, 0.17502370558866698, 0.1674982521346008, 0.16768185542383562, 0.14925793923881847, 0.1671809213488088, 0.161904267438577, 0.15067549118327483, 0.18391442080550657, 0.17674937753408249, 0.16185993683673694, 0.18276809455728804, 0.16818277095725476, 0.15761220405576404, 0.15907084166590957, 0.18153866587628176, 0.19826969778882253, 0.22612265849563196, 0.14705603851058968, 0.12383941305903623, 0.1577420460777843, 0.16132178799345498, 0.1765053264738703, 0.161426983925419, 0.16784449125175815, 0.12905009666387812, 0.18885934246011926, 0.18510720859852892, 0.11328656014626226, 0.25673422268559687, 0.1821715035767073, 0.10601851091902281, 0.11073624961736062, 0.11161064448884062, 0.18105860016330189, 0.2020560127518467, 0.17564268954425566, 0.1754956552024658, 0.14995452162533163, 0.1859427842615613, 0.1874355564577601, 0.183797720720853, 0.17220721454897625, 0.1762665795195809, 0.05248816658387623, 0.0527076598795746, 0.05946375988814012, 0.05636686458996132, 0.06097909801726531, 0.06137642244171315, 0.05292759166434169, 0.05948074744294429, 0.05645034529021775]}, "mutation_prompt": null}
