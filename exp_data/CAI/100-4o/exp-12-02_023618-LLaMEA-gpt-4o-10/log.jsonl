{"id": "c897de23-8913-40ac-80cd-f887a17877a3", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.CR = 0.9\n        self.F = 0.8\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.func_evals += 1\n                if self.func_evals >= self.budget:\n                    break\n\n    def mutate(self, target_idx):\n        indices = [idx for idx in range(self.population_size) if idx != target_idx]\n        a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n        mutant = a + self.F * (b - c)\n        mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n        return mutant\n\n    def crossover(self, target, mutant):\n        mask = np.random.rand(self.dim) < self.CR\n        trial = np.where(mask, mutant, target)\n        return trial\n\n    def select(self, target_idx, trial, trial_fitness):\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def adaptive_control(self):\n        diversity = np.mean(np.std(self.population, axis=0))\n        self.F = 0.5 + 0.3 * np.tanh(8 * diversity - 2)\n        self.CR = 0.5 + 0.4 * np.tanh(6 * (1 - diversity) - 3)\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.func_evals < self.budget:\n            self.adaptive_control()\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial_fitness = func(trial)\n                self.func_evals += 1\n                self.select(i, trial, trial_fitness)\n                if self.func_evals >= self.budget:\n                    break\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Clustering for Dynamic Exploration and Exploitation Balance.", "configspace": "", "generation": 0, "fitness": 0.17899716503528118, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6390243982181513, 0.5592126034846203, 0.6583982483796935, 0.6561634591670076, 0.6522307241726266, 0.663040865592633, 0.6798762221216716, 0.4715802914347236, 0.48661706146631667, 0.3087282322849261, 0.31782628663774426, 0.31734647060631604, 0.32931445987060526, 0.33616533818227945, 0.34360633761405235, 0.2570081916286927, 0.336944675485526, 0.28797020108199345, 0.12244506959733137, 0.12353694989707453, 0.11462159714553166, 0.11166849993552674, 0.10064218377456635, 0.11139755343754698, 0.13030137987639046, 0.12712612958914382, 0.10906693617677088, 0.09785379914723202, 0.09967698330187358, 0.09940675917352582, 0.1010540416414848, 0.09774379022257762, 0.09208694644663262, 0.09689749330304476, 0.10526478856480903, 0.09601272613093803, 0.8825308618871148, 0.9120617875548073, 0.8581699168746603, 0.871124088457268, 0.8479150195919394, 0.8513987237769739, 0.8408549754141846, 0.9171823123761826, 0.8561529032158766, 0.12854565349348446, 0.08721620280479436, 0.10657881923279888, 0.11235367923307638, 0.09809674563189075, 0.08999144589750341, 0.09447538597459426, 0.09491010404581901, 0.10283056239404376, 0.12605588171572013, 0.16211720218262193, 0.15449067711404785, 0.1492439075848564, 0.15683835553020287, 0.14388845496944613, 0.1199442765318407, 0.1431870497155442, 0.16306114557746876, 0.08167797608663474, 0.06657771884233066, 0.06894296027090618, 0.07824902308596682, 0.07184694938699854, 0.06962379738862345, 0.05863694082873738, 0.07875214201247038, 0.11110979182429492, 0.054194040675884736, 0.03905597008856421, 0.07072462004271396, 0.06907711699073749, 0.07107565100186108, 0.10671220553947369, 0.08115846719571163, 0.06556467749557537, 0.062461932110712715, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07490661792794995, 0.0340560613932368, 0.04529313783995825, 0.041385219434244336, 0.05267119796550779, 0.04135672973971227, 0.044462786022135825, 0.04758081093006117, 0.06149357463594929, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016666265465176133, 0.014793366476240966, 0.05455030087085466, 0.02762970966668632, 0.02178854143119846, 0.03554103014408394, 0.028289333541665518, 0.03670536590872486, 0.02788289294049684, 0.4020059482555094, 0.3884036999931927, 0.37721726839926073, 0.36078338471228266, 0.3564826464546076, 0.37434977330072916, 0.3648406812762143, 0.35279290593209267, 0.37227861438685417, 0.06626370682283245, 0.06959328642580753, 0.06610196008641944, 0.06023957469613017, 0.0647408060839636, 0.0746307692743603, 0.0842432425721219, 0.06113340856077465, 0.07409819771566017, 0.13700348438832866, 0.12424337262816021, 0.14229190461918262, 0.1429569204126685, 0.16550117391431374, 0.13967820699342137, 0.13777717429648306, 0.14416225632580404, 0.1279559786733253, 0.1740138296235697, 0.17820189212781046, 0.19322234577556885, 0.17589356490566954, 0.17928361227735912, 0.19464354025491093, 0.18814107336227903, 0.2018391846355847, 0.1754580948037463, 0.12299879999998953, 0.10614132092321538, 0.1335840521935674, 0.14814523958236825, 0.12512332853167207, 0.12109395834244718, 0.1165085227083329, 0.12912712466888132, 0.12773822844819693, 0.16233280107292425, 0.15623676170044543, 0.17080477089337476, 0.1685338167627045, 0.17224129379507436, 0.16589637560373172, 0.17308189021376164, 0.1660976183332128, 0.16203761480082557, 0.18001445695083584, 0.1597828022243546, 0.16977039301400454, 0.17206756153627034, 0.16990332093661198, 0.17188561293235072, 0.1785908140780197, 0.21868399148208528, 0.1659470772417886, 0.16812882087354097, 0.20181152537811853, 0.15941911880848858, 0.1467832679643163, 0.17993467097507765, 0.16244950574337003, 0.14936452635425612, 0.1684391711954648, 0.17435631045185418, 0.23499063622263228, 0.1559849862749224, 0.1654614276603117, 0.158255417985943, 0.1367669528335731, 0.14315194872171655, 0.15208436495633082, 0.18549916709789271, 0.16833792578433004, 0.19107959016282838, 0.18163583027867403, 0.1659087187386069, 0.21687063797613448, 0.17131400062506563, 0.1871126854784686, 0.19135798693016082, 0.17050055938579478, 0.17461477930496128, 0.06849587403853619, 0.06579544261852499, 0.06776589668365773, 0.06494172368110684, 0.0565788249024326, 0.07048682499018655, 0.06249962465989034, 0.0621647609596494, 0.05283835021344807]}, "mutation_prompt": null}
{"id": "04638cf2-f3d5-40b7-8393-3feb89c9fa92", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.CR = 0.9\n        self.F = 0.8\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.func_evals = 0\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.func_evals += 1\n                if self.func_evals >= self.budget:\n                    break\n\n    def mutate(self, target_idx):\n        indices = [idx for idx in range(self.population_size) if idx != target_idx]\n        a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n        mutant = a + self.F * (b - c)\n        mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n        return mutant\n\n    def crossover(self, target, mutant):\n        mask = np.random.rand(self.dim) < self.CR\n        trial = np.where(mask, mutant, target)\n        return trial\n\n    def select(self, target_idx, trial, trial_fitness):\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial\n            self.fitness[target_idx] = trial_fitness\n\n    def adaptive_control(self):\n        diversity = np.mean(np.std(self.population, axis=0))\n        self.F = 0.5 + 0.3 * np.tanh(8 * diversity - 2)\n        self.CR = 0.5 + 0.4 * np.tanh(6 * (1 - diversity) - 3)\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.func_evals < self.budget:\n            self.adaptive_control()\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial_fitness = func(trial)\n                self.func_evals += 1\n                self.select(i, trial, trial_fitness)\n                if self.func_evals >= self.budget:\n                    break\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Clustering for Dynamic Exploration and Exploitation Balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c897de23-8913-40ac-80cd-f887a17877a3", "metadata": {"aucs": [0.6390243982181513, 0.5592126034846203, 0.6583982483796935, 0.6561634591670076, 0.6522307241726266, 0.663040865592633, 0.6798762221216716, 0.4715802914347236, 0.48661706146631667, 0.3087282322849261, 0.31782628663774426, 0.31734647060631604, 0.32931445987060526, 0.33616533818227945, 0.34360633761405235, 0.2570081916286927, 0.336944675485526, 0.28797020108199345, 0.12244506959733137, 0.12353694989707453, 0.11462159714553166, 0.11166849993552674, 0.10064218377456635, 0.11139755343754698, 0.13030137987639046, 0.12712612958914382, 0.10906693617677088, 0.09785379914723202, 0.09967698330187358, 0.09940675917352582, 0.1010540416414848, 0.09774379022257762, 0.09208694644663262, 0.09689749330304476, 0.10526478856480903, 0.09601272613093803, 0.8825308618871148, 0.9120617875548073, 0.8581699168746603, 0.871124088457268, 0.8479150195919394, 0.8513987237769739, 0.8408549754141846, 0.9171823123761826, 0.8561529032158766, 0.12854565349348446, 0.08721620280479436, 0.10657881923279888, 0.11235367923307638, 0.09809674563189075, 0.08999144589750341, 0.09447538597459426, 0.09491010404581901, 0.10283056239404376, 0.12605588171572013, 0.16211720218262193, 0.15449067711404785, 0.1492439075848564, 0.15683835553020287, 0.14388845496944613, 0.1199442765318407, 0.1431870497155442, 0.16306114557746876, 0.08167797608663474, 0.06657771884233066, 0.06894296027090618, 0.07824902308596682, 0.07184694938699854, 0.06962379738862345, 0.05863694082873738, 0.07875214201247038, 0.11110979182429492, 0.054194040675884736, 0.03905597008856421, 0.07072462004271396, 0.06907711699073749, 0.07107565100186108, 0.10671220553947369, 0.08115846719571163, 0.06556467749557537, 0.062461932110712715, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07490661792794995, 0.0340560613932368, 0.04529313783995825, 0.041385219434244336, 0.05267119796550779, 0.04135672973971227, 0.044462786022135825, 0.04758081093006117, 0.06149357463594929, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016666265465176133, 0.014793366476240966, 0.05455030087085466, 0.02762970966668632, 0.02178854143119846, 0.03554103014408394, 0.028289333541665518, 0.03670536590872486, 0.02788289294049684, 0.4020059482555094, 0.3884036999931927, 0.37721726839926073, 0.36078338471228266, 0.3564826464546076, 0.37434977330072916, 0.3648406812762143, 0.35279290593209267, 0.37227861438685417, 0.06626370682283245, 0.06959328642580753, 0.06610196008641944, 0.06023957469613017, 0.0647408060839636, 0.0746307692743603, 0.0842432425721219, 0.06113340856077465, 0.07409819771566017, 0.13700348438832866, 0.12424337262816021, 0.14229190461918262, 0.1429569204126685, 0.16550117391431374, 0.13967820699342137, 0.13777717429648306, 0.14416225632580404, 0.1279559786733253, 0.1740138296235697, 0.17820189212781046, 0.19322234577556885, 0.17589356490566954, 0.17928361227735912, 0.19464354025491093, 0.18814107336227903, 0.2018391846355847, 0.1754580948037463, 0.12299879999998953, 0.10614132092321538, 0.1335840521935674, 0.14814523958236825, 0.12512332853167207, 0.12109395834244718, 0.1165085227083329, 0.12912712466888132, 0.12773822844819693, 0.16233280107292425, 0.15623676170044543, 0.17080477089337476, 0.1685338167627045, 0.17224129379507436, 0.16589637560373172, 0.17308189021376164, 0.1660976183332128, 0.16203761480082557, 0.18001445695083584, 0.1597828022243546, 0.16977039301400454, 0.17206756153627034, 0.16990332093661198, 0.17188561293235072, 0.1785908140780197, 0.21868399148208528, 0.1659470772417886, 0.16812882087354097, 0.20181152537811853, 0.15941911880848858, 0.1467832679643163, 0.17993467097507765, 0.16244950574337003, 0.14936452635425612, 0.1684391711954648, 0.17435631045185418, 0.23499063622263228, 0.1559849862749224, 0.1654614276603117, 0.158255417985943, 0.1367669528335731, 0.14315194872171655, 0.15208436495633082, 0.18549916709789271, 0.16833792578433004, 0.19107959016282838, 0.18163583027867403, 0.1659087187386069, 0.21687063797613448, 0.17131400062506563, 0.1871126854784686, 0.19135798693016082, 0.17050055938579478, 0.17461477930496128, 0.06849587403853619, 0.06579544261852499, 0.06776589668365773, 0.06494172368110684, 0.0565788249024326, 0.07048682499018655, 0.06249962465989034, 0.0621647609596494, 0.05283835021344807]}, "mutation_prompt": null}
