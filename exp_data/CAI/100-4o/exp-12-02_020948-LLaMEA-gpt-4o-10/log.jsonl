{"id": "d352ef8b-2c63-4555-9fa4-28f822f6431b", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_positions = np.copy(self.population)\n        self.best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.f = 0.5  # DE mutation factor\n        self.cr = 0.9  # Crossover rate\n        self.c1 = 2.05  # PSO cognitive coefficient\n        self.c2 = 2.05  # PSO social coefficient\n        self.w = 0.9  # PSO inertia weight\n\n    def __call__(self, func):\n        evals = 0\n        \n        while evals < self.budget:\n            new_population = np.copy(self.population)\n            \n            # Differential Evolution step\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(self.population[a] + self.f * (self.population[b] - self.population[c]), self.lower_bound, self.upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = self.population[i, j]\n                \n                # Evaluate mutant\n                score = func(mutant)\n                evals += 1\n                \n                if score < self.best_scores[i]:\n                    self.best_scores[i] = score\n                    self.best_positions[i] = mutant\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = mutant\n                \n                if evals >= self.budget:\n                    break\n                \n                new_population[i] = mutant if score < func(self.population[i]) else self.population[i]\n            \n            self.population = new_population\n            \n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocity = self.w * self.velocity + self.c1 * r1 * (self.best_positions - self.population) + self.c2 * r2 * (self.global_best_position - self.population)\n            self.population = np.clip(self.population + self.velocity, self.lower_bound, self.upper_bound)\n            \n            for i in range(self.population_size):\n                score = func(self.population[i])\n                evals += 1\n                \n                if score < self.best_scores[i]:\n                    self.best_scores[i] = score\n                    self.best_positions[i] = self.population[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                \n                if evals >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "HybridDEPSO", "description": "A hybrid Differential Evolution and Particle Swarm Optimization with adaptive parameter tuning.", "configspace": "", "generation": 0, "fitness": 0.12699226003668496, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.26417241121432966, 0.18893177049548737, 0.2438611951505516, 0.16635376243665723, 0.1817970464871722, 0.21680353269567088, 0.17394329175410872, 0.20156830447156648, 0.22387421808124586, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04630887214085633, 0.04943252288745259, 0.056477237039171846, 0.03807413701291118, 0.049192354722151, 0.04804145515138403, 0.05330218440177492, 0.05443985637004389, 0.057770524647613786, 0.06458152134527684, 0.022147008919850664, 0.01841430722578752, 0.023181042780457628, 0.025015462354488593, 0.031327430058660344, 0.052160322950319804, 0.023773524727626172, 0.02010465985211396, 0.9634710325839265, 0.9609121905042775, 0.9767353554858312, 0.9624064831349802, 0.9373728575065831, 0.9751150779240177, 0.960570499706034, 0.9775757412515075, 0.9502353533165071, 0.08364565824809556, 0.04961935817103236, 0.10956044682480603, 0.07927111870950043, 0.09159157114716565, 0.07397396781740284, 0.08535327605123422, 0.0789310220728312, 0.07084152548642175, 0.13871833120862698, 0.08338422823516778, 0.13715739049321785, 0.10814924121800107, 0.15911483888928502, 0.14021254111862813, 0.10894905369613861, 0.1215340781504114, 0.14028779115157886, 0.04096574875209624, 9.999999999998899e-05, 9.999999999998899e-05, 0.03148299672869237, 0.021733910219644215, 0.017351719331691884, 0.002935118930706637, 9.999999999998899e-05, 9.999999999998899e-05, 0.009496166117987537, 0.04754634371698663, 0.00425735740774924, 0.0034898271957585214, 9.999999999998899e-05, 0.008592407718111872, 0.018386288234057746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034157296734732556, 0.015883494113751895, 0.017205118218010962, 0.024157500489629058, 0.01615929753099188, 0.05195201277833239, 0.023148733752348605, 0.03896413542444066, 0.007052163971596914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01733235962543822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010713414784033759, 0.01184743403985089, 0.00012570590596716613, 0.2839553419905281, 0.19751651189445152, 0.2029697911797077, 0.19919573799671597, 0.24189692449397426, 0.191711790378304, 0.2580563390902747, 0.2223450133093574, 0.2027922994988961, 0.05037718592234164, 0.04742910740506212, 0.05396104252690659, 0.044446804470853696, 0.056450323129414004, 0.04810163864447026, 0.04468588914892424, 0.03655230196241954, 0.04513927381726757, 0.1383247135370369, 0.1562380888596172, 0.1314577459162969, 0.13696228676386057, 0.17089405227656607, 0.1337053694757444, 0.15113027897644238, 0.11957061330191354, 0.14602387873040135, 0.1657870786210084, 0.1685334243886193, 0.16294248230423114, 0.14893590070259688, 0.14930273325281707, 0.15898635578325115, 0.17920232112364431, 0.17907058313564772, 0.18859233979940038, 0.10302633338263001, 0.08438746378548234, 0.1392791214442134, 0.12163410841873679, 0.09242617310325318, 0.0947320119459042, 0.12115140937175706, 0.12224768473221359, 0.1149872862114738, 0.15319132450367545, 0.1641342272299442, 0.16714414090496843, 0.1461771037514058, 0.15415013158151492, 0.13611517013814178, 0.14248126998022304, 0.1427400604899911, 0.14103531368661804, 0.17055991364032652, 0.1556819737320131, 0.15937124003668102, 0.14231665634894375, 0.14241537563662732, 0.16032356868483655, 0.1500068675458026, 0.14533487687726865, 0.14757707543421017, 0.1653162757652894, 0.17846853115076267, 0.1424797648875441, 0.12406138798327226, 0.12945428879777887, 0.16917797147436942, 0.19751098744230655, 0.17765025884603636, 0.17930272351912258, 0.1431243263158134, 0.14843275413715418, 0.10462564462161694, 0.16854992554128856, 0.16724829914872574, 0.11883669212306236, 0.1797928617706892, 0.17815713311430204, 0.18475083677853932, 0.20186616217908648, 0.19103645128576052, 0.1806223937557243, 0.17393096414470743, 0.1714886566594458, 0.17717308643984675, 0.18119154210526212, 0.19356325645904482, 0.17734430953133906, 0.034896937566504804, 0.037217016518259705, 0.037654159049346214, 0.06706906598675888, 0.04062830938286788, 0.040451870439301096, 0.04191167246684724, 0.054078613833946965, 0.04481505109385531]}, "mutation_prompt": null}
{"id": "46f21e73-fb88-4f7d-a169-59f9e87fb3e9", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_positions = np.copy(self.population)\n        self.best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.f = 0.5  # DE mutation factor\n        self.cr = 0.9  # Crossover rate\n        self.c1 = 2.05  # PSO cognitive coefficient\n        self.c2 = 2.05  # PSO social coefficient\n        self.w = 0.9  # PSO inertia weight\n\n    def __call__(self, func):\n        evals = 0\n        \n        while evals < self.budget:\n            new_population = np.copy(self.population)\n            \n            # Differential Evolution step\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(self.population[a] + self.f * (self.population[b] - self.population[c]), self.lower_bound, self.upper_bound)\n                \n                for j in range(self.dim):\n                    if np.random.rand() > self.cr:\n                        mutant[j] = self.population[i, j]\n                \n                # Evaluate mutant\n                score = func(mutant)\n                evals += 1\n                \n                if score < self.best_scores[i]:\n                    self.best_scores[i] = score\n                    self.best_positions[i] = mutant\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = mutant\n                \n                if evals >= self.budget:\n                    break\n                \n                new_population[i] = mutant if score < func(self.population[i]) else self.population[i]\n            \n            self.population = new_population\n            \n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocity = self.w * self.velocity + self.c1 * r1 * (self.best_positions - self.population) + self.c2 * r2 * (self.global_best_position - self.population)\n            self.population = np.clip(self.population + self.velocity, self.lower_bound, self.upper_bound)\n            \n            for i in range(self.population_size):\n                score = func(self.population[i])\n                evals += 1\n                \n                if score < self.best_scores[i]:\n                    self.best_scores[i] = score\n                    self.best_positions[i] = self.population[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                \n                if evals >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "HybridDEPSO", "description": "A hybrid Differential Evolution and Particle Swarm Optimization with adaptive parameter tuning.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d352ef8b-2c63-4555-9fa4-28f822f6431b", "metadata": {"aucs": [0.26417241121432966, 0.18893177049548737, 0.2438611951505516, 0.16635376243665723, 0.1817970464871722, 0.21680353269567088, 0.17394329175410872, 0.20156830447156648, 0.22387421808124586, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04630887214085633, 0.04943252288745259, 0.056477237039171846, 0.03807413701291118, 0.049192354722151, 0.04804145515138403, 0.05330218440177492, 0.05443985637004389, 0.057770524647613786, 0.06458152134527684, 0.022147008919850664, 0.01841430722578752, 0.023181042780457628, 0.025015462354488593, 0.031327430058660344, 0.052160322950319804, 0.023773524727626172, 0.02010465985211396, 0.9634710325839265, 0.9609121905042775, 0.9767353554858312, 0.9624064831349802, 0.9373728575065831, 0.9751150779240177, 0.960570499706034, 0.9775757412515075, 0.9502353533165071, 0.08364565824809556, 0.04961935817103236, 0.10956044682480603, 0.07927111870950043, 0.09159157114716565, 0.07397396781740284, 0.08535327605123422, 0.0789310220728312, 0.07084152548642175, 0.13871833120862698, 0.08338422823516778, 0.13715739049321785, 0.10814924121800107, 0.15911483888928502, 0.14021254111862813, 0.10894905369613861, 0.1215340781504114, 0.14028779115157886, 0.04096574875209624, 9.999999999998899e-05, 9.999999999998899e-05, 0.03148299672869237, 0.021733910219644215, 0.017351719331691884, 0.002935118930706637, 9.999999999998899e-05, 9.999999999998899e-05, 0.009496166117987537, 0.04754634371698663, 0.00425735740774924, 0.0034898271957585214, 9.999999999998899e-05, 0.008592407718111872, 0.018386288234057746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034157296734732556, 0.015883494113751895, 0.017205118218010962, 0.024157500489629058, 0.01615929753099188, 0.05195201277833239, 0.023148733752348605, 0.03896413542444066, 0.007052163971596914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01733235962543822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010713414784033759, 0.01184743403985089, 0.00012570590596716613, 0.2839553419905281, 0.19751651189445152, 0.2029697911797077, 0.19919573799671597, 0.24189692449397426, 0.191711790378304, 0.2580563390902747, 0.2223450133093574, 0.2027922994988961, 0.05037718592234164, 0.04742910740506212, 0.05396104252690659, 0.044446804470853696, 0.056450323129414004, 0.04810163864447026, 0.04468588914892424, 0.03655230196241954, 0.04513927381726757, 0.1383247135370369, 0.1562380888596172, 0.1314577459162969, 0.13696228676386057, 0.17089405227656607, 0.1337053694757444, 0.15113027897644238, 0.11957061330191354, 0.14602387873040135, 0.1657870786210084, 0.1685334243886193, 0.16294248230423114, 0.14893590070259688, 0.14930273325281707, 0.15898635578325115, 0.17920232112364431, 0.17907058313564772, 0.18859233979940038, 0.10302633338263001, 0.08438746378548234, 0.1392791214442134, 0.12163410841873679, 0.09242617310325318, 0.0947320119459042, 0.12115140937175706, 0.12224768473221359, 0.1149872862114738, 0.15319132450367545, 0.1641342272299442, 0.16714414090496843, 0.1461771037514058, 0.15415013158151492, 0.13611517013814178, 0.14248126998022304, 0.1427400604899911, 0.14103531368661804, 0.17055991364032652, 0.1556819737320131, 0.15937124003668102, 0.14231665634894375, 0.14241537563662732, 0.16032356868483655, 0.1500068675458026, 0.14533487687726865, 0.14757707543421017, 0.1653162757652894, 0.17846853115076267, 0.1424797648875441, 0.12406138798327226, 0.12945428879777887, 0.16917797147436942, 0.19751098744230655, 0.17765025884603636, 0.17930272351912258, 0.1431243263158134, 0.14843275413715418, 0.10462564462161694, 0.16854992554128856, 0.16724829914872574, 0.11883669212306236, 0.1797928617706892, 0.17815713311430204, 0.18475083677853932, 0.20186616217908648, 0.19103645128576052, 0.1806223937557243, 0.17393096414470743, 0.1714886566594458, 0.17717308643984675, 0.18119154210526212, 0.19356325645904482, 0.17734430953133906, 0.034896937566504804, 0.037217016518259705, 0.037654159049346214, 0.06706906598675888, 0.04062830938286788, 0.040451870439301096, 0.04191167246684724, 0.054078613833946965, 0.04481505109385531]}, "mutation_prompt": null}
