{"id": "6caa1a4b-4c07-4189-b055-e2d29c039e08", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.f_weight = 0.8  # Weight for differential evolution\n        self.c1 = 1.5  # Cognitive coefficient for PSO\n        self.c2 = 1.5  # Social coefficient for PSO\n        self.v_max = 0.2 * (self.upper_bound - self.lower_bound)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-self.v_max, self.v_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(pop)\n        personal_best_scores = np.array([func(ind) for ind in pop])\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        evals = self.population_size\n\n        while evals < self.budget:\n            # Differential Evolution\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = pop[a] + self.f_weight * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, pop[i])\n                trial_score = func(trial)\n                evals += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n\n                    if trial_score < global_best_score:\n                        global_best_position = trial\n                        global_best_score = trial_score\n\n            # Particle Swarm Optimization\n            r1, r2 = np.random.rand(2, self.population_size, self.dim)\n            velocities = (velocities + \n                          self.c1 * r1 * (personal_best_positions - pop) +\n                          self.c2 * r2 * (global_best_position - pop))\n            velocities = np.clip(velocities, -self.v_max, self.v_max)\n            pop = pop + velocities\n            pop = np.clip(pop, self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                score = func(pop[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_positions[i] = pop[i]\n                    personal_best_scores[i] = score\n\n                    if score < global_best_score:\n                        global_best_position = pop[i]\n                        global_best_score = score\n\n        return global_best_position, global_best_score", "name": "HybridDEPSO", "description": "A hybrid adaptive differential evolution and particle swarm optimization algorithm that dynamically balances exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.1685650310407425, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.2683385320293151, 0.2683385320293151, 0.2683385320293151, 0.3078148336445483, 0.3078148336445483, 0.3078148336445483, 0.3255109405490464, 0.3255109405490464, 0.3255109405490464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07440263694260829, 0.07440263694260829, 0.07440263694260829, 0.07983924623268557, 0.07983924623268557, 0.07983924623268557, 0.09226168627259235, 0.09226168627259235, 0.09226168627259235, 0.07196584446655563, 0.07196584446655563, 0.07196584446655563, 0.06773700647659986, 0.06773700647659986, 0.06773700647659986, 0.06239909829669599, 0.06239909829669599, 0.06239909829669599, 0.9748573784295695, 0.9748573784295695, 0.9748573784295695, 0.9635345036175501, 0.9635345036175501, 0.9635345036175501, 0.9778002517984222, 0.9778002517984222, 0.9778002517984222, 0.16378240019872214, 0.16378240019872214, 0.16378240019872214, 0.13820901918915318, 0.13820901918915318, 0.13820901918915318, 0.14860675862052142, 0.14860675862052142, 0.14860675862052142, 0.20316217234376377, 0.20316217234376377, 0.20316217234376377, 0.19346453013952836, 0.19346453013952836, 0.19346453013952836, 0.18301040047927242, 0.18301040047927242, 0.18301040047927242, 0.07817544737697024, 0.07817544737697024, 0.07817544737697024, 0.04972034866642716, 0.04972034866642716, 0.04972034866642716, 0.0776712080850519, 0.0776712080850519, 0.0776712080850519, 0.09670391986954752, 0.09670391986954752, 0.09670391986954752, 0.05374683282133552, 0.05374683282133552, 0.05374683282133552, 0.11481265581994426, 0.11481265581994426, 0.11481265581994426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04481223918719046, 0.04481223918719046, 0.04481223918719046, 0.012570613921490392, 0.012570613921490392, 0.012570613921490392, 0.07132778756773983, 0.07132778756773983, 0.07132778756773983, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02138638650585578, 0.02138638650585578, 0.02138638650585578, 0.017144437815076574, 0.017144437815076574, 0.017144437815076574, 0.032327677315187264, 0.032327677315187264, 0.032327677315187264, 0.31571361980314927, 0.31571361980314927, 0.31571361980314927, 0.25837993021807326, 0.25837993021807326, 0.25837993021807326, 0.28235285874768457, 0.28235285874768457, 0.28235285874768457, 0.08943029743380904, 0.08943029743380904, 0.08943029743380904, 0.08361305769033478, 0.08361305769033478, 0.08361305769033478, 0.093827175221886, 0.093827175221886, 0.093827175221886, 0.15232861712642043, 0.15232861712642043, 0.15232861712642043, 0.14742638498608007, 0.14742638498608007, 0.14742638498608007, 0.14522121649211872, 0.14522121649211872, 0.14522121649211872, 0.2163988594219397, 0.2163988594219397, 0.2163988594219397, 0.22082283373100076, 0.22082283373100076, 0.22082283373100076, 0.2046261285028549, 0.2046261285028549, 0.2046261285028549, 0.1471478490538246, 0.1471478490538246, 0.1471478490538246, 0.14794878324444494, 0.14794878324444494, 0.14794878324444494, 0.12385694650904755, 0.12385694650904755, 0.12385694650904755, 0.20802661921634957, 0.20802661921634957, 0.20802661921634957, 0.19553976549076713, 0.19553976549076713, 0.19553976549076713, 0.1881238374382277, 0.1881238374382277, 0.1881238374382277, 0.177594911979708, 0.177594911979708, 0.177594911979708, 0.16956721157517418, 0.16956721157517418, 0.16956721157517418, 0.17014413500984304, 0.17014413500984304, 0.17014413500984304, 0.3847127657248258, 0.3847127657248258, 0.3847127657248258, 0.15121923255539094, 0.15121923255539094, 0.15121923255539094, 0.3569042281243575, 0.3569042281243575, 0.3569042281243575, 0.17107713269584857, 0.17107713269584857, 0.17107713269584857, 0.28038515817531806, 0.28038515817531806, 0.28038515817531806, 0.2950726339723705, 0.2950726339723705, 0.2950726339723705, 0.20355028817776688, 0.20355028817776688, 0.20355028817776688, 0.18320565219162221, 0.18320565219162221, 0.18320565219162221, 0.1825858256757399, 0.1825858256757399, 0.1825858256757399, 0.07956833020054288, 0.07956833020054288, 0.07956833020054288, 0.06800068218347843, 0.06800068218347843, 0.06800068218347843, 0.07431247168449229, 0.07431247168449229, 0.07431247168449229]}, "mutation_prompt": null}
{"id": "65a99c2e-4af2-473a-95fc-1c308909f2d2", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.f_weight = 0.8  # Weight for differential evolution\n        self.c1 = 1.5  # Cognitive coefficient for PSO\n        self.c2 = 1.5  # Social coefficient for PSO\n        self.v_max = 0.2 * (self.upper_bound - self.lower_bound)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-self.v_max, self.v_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(pop)\n        personal_best_scores = np.array([func(ind) for ind in pop])\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        evals = self.population_size\n\n        while evals < self.budget:\n            # Differential Evolution\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = pop[a] + self.f_weight * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover = np.random.rand(self.dim) < 0.95  # Changed crossover probability from 0.9 to 0.95\n                trial = np.where(crossover, mutant, pop[i])\n                trial_score = func(trial)\n                evals += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n\n                    if trial_score < global_best_score:\n                        global_best_position = trial\n                        global_best_score = trial_score\n\n            # Particle Swarm Optimization\n            r1, r2 = np.random.rand(2, self.population_size, self.dim)\n            velocities = (velocities + \n                          self.c1 * r1 * (personal_best_positions - pop) +\n                          self.c2 * r2 * (global_best_position - pop))\n            velocities = np.clip(velocities, -self.v_max, self.v_max)\n            pop = pop + velocities\n            pop = np.clip(pop, self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                score = func(pop[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_positions[i] = pop[i]\n                    personal_best_scores[i] = score\n\n                    if score < global_best_score:\n                        global_best_position = pop[i]\n                        global_best_score = score\n\n        return global_best_position, global_best_score", "name": "HybridDEPSO", "description": "Adjust the crossover probability in Differential Evolution for better diversity and convergence.", "configspace": "", "generation": 1, "fitness": 0.17081649900951015, "feedback": "", "error": "", "parent_id": "6caa1a4b-4c07-4189-b055-e2d29c039e08", "metadata": {"aucs": [0.25160495411744077, 0.25160495411744077, 0.25160495411744077, 0.2760648727162699, 0.2760648727162699, 0.2760648727162699, 0.29086710093671364, 0.29086710093671364, 0.29086710093671364, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08132892308036577, 0.08132892308036577, 0.08132892308036577, 0.07839333861391784, 0.07839333861391784, 0.07839333861391784, 0.07291864592116415, 0.07291864592116415, 0.07291864592116415, 0.06324148716758304, 0.06324148716758304, 0.06324148716758304, 0.0678599612053915, 0.0678599612053915, 0.0678599612053915, 0.06897821096283208, 0.06897821096283208, 0.06897821096283208, 0.9742267664300427, 0.9742267664300427, 0.9742267664300427, 0.9674293829110479, 0.9674293829110479, 0.9674293829110479, 0.9778002517984222, 0.9778002517984222, 0.9778002517984222, 0.14111940447412397, 0.14111940447412397, 0.14111940447412397, 0.17588974567420612, 0.17588974567420612, 0.17588974567420612, 0.15044643784845135, 0.15044643784845135, 0.15044643784845135, 0.21174071795624505, 0.21174071795624505, 0.21174071795624505, 0.1609360810516346, 0.1609360810516346, 0.1609360810516346, 0.21862291259943134, 0.21862291259943134, 0.21862291259943134, 0.09407696382017072, 0.09407696382017072, 0.09407696382017072, 0.06814929555521954, 0.06814929555521954, 0.06814929555521954, 0.06874691198973015, 0.06874691198973015, 0.06874691198973015, 0.07041892278969886, 0.07041892278969886, 0.07041892278969886, 0.06758966468473004, 0.06758966468473004, 0.06758966468473004, 0.10003793863548671, 0.10003793863548671, 0.10003793863548671, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04515389588432972, 0.04515389588432972, 0.04515389588432972, 0.055499574910285454, 0.055499574910285454, 0.055499574910285454, 0.11587560054054669, 0.11587560054054669, 0.11587560054054669, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02461880297463248, 0.02461880297463248, 0.02461880297463248, 0.031081452554648004, 0.031081452554648004, 0.031081452554648004, 0.022125036654534247, 0.022125036654534247, 0.022125036654534247, 0.2929757500907676, 0.2929757500907676, 0.2929757500907676, 0.27064484817425183, 0.27064484817425183, 0.27064484817425183, 0.27244136271310604, 0.27244136271310604, 0.27244136271310604, 0.06926149045318875, 0.06926149045318875, 0.06926149045318875, 0.08923298040481054, 0.08923298040481054, 0.08923298040481054, 0.07829639868789329, 0.07829639868789329, 0.07829639868789329, 0.1444146231088178, 0.1444146231088178, 0.1444146231088178, 0.1404408350254367, 0.1404408350254367, 0.1404408350254367, 0.1500286443643365, 0.1500286443643365, 0.1500286443643365, 0.20320488254097935, 0.20320488254097935, 0.20320488254097935, 0.21191123260454547, 0.21191123260454547, 0.21191123260454547, 0.21836503207446645, 0.21836503207446645, 0.21836503207446645, 0.1695868953384534, 0.1695868953384534, 0.1695868953384534, 0.19304654496031903, 0.19304654496031903, 0.19304654496031903, 0.1349542591926598, 0.1349542591926598, 0.1349542591926598, 0.1847467917807578, 0.1847467917807578, 0.1847467917807578, 0.22058623759559737, 0.22058623759559737, 0.22058623759559737, 0.21835027899635773, 0.21835027899635773, 0.21835027899635773, 0.17362401445658948, 0.17362401445658948, 0.17362401445658948, 0.17082918501187272, 0.17082918501187272, 0.17082918501187272, 0.17757384379688268, 0.17757384379688268, 0.17757384379688268, 0.3654999696771405, 0.3654999696771405, 0.3654999696771405, 0.13593943332955627, 0.13593943332955627, 0.13593943332955627, 0.3018223128976232, 0.3018223128976232, 0.3018223128976232, 0.2879909560432541, 0.2879909560432541, 0.2879909560432541, 0.3318676759021921, 0.3318676759021921, 0.3318676759021921, 0.30113237165619056, 0.30113237165619056, 0.30113237165619056, 0.19029240028694672, 0.19029240028694672, 0.19029240028694672, 0.18337153355376357, 0.18337153355376357, 0.18337153355376357, 0.18923739042391974, 0.18923739042391974, 0.18923739042391974, 0.08360793252433762, 0.08360793252433762, 0.08360793252433762, 0.0700419166538, 0.0700419166538, 0.0700419166538, 0.07972464790462075, 0.07972464790462075, 0.07972464790462075]}, "mutation_prompt": null}
