{"id": "31a052cd-ea68-4339-a97b-8d3ffea22795", "solution": "import numpy as np\n\nclass HybridADE_SI:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = min(100, 4 + int(3 * np.log(self.dim)) * self.dim)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # Differential weight\n        self.cr = 0.9  # Crossover probability\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the current population\n            scores = np.apply_along_axis(func, 1, self.particles)\n            for i in range(self.population_size):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.particles[i]\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Differential Evolution with Swarm Intelligence\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.particles[indices]\n                mutant = a + self.f * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Swarm Intelligence inspired velocity update\n                inertia = 0.7 * self.velocities[i]\n                cognitive_component = 0.1 * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.particles[i])\n                social_component = 0.1 * np.random.rand(self.dim) * (self.global_best_position - self.particles[i])\n                self.velocities[i] = inertia + cognitive_component + social_component\n\n                # Crossover\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, self.particles[i] + self.velocities[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < scores[i]:\n                    self.particles[i] = trial\n                    scores[i] = trial_score\n\n        return self.global_best_position, self.global_best_score", "name": "HybridADE_SI", "description": "Hybrid Adaptive Differential Evolution with Swarm Intelligence for efficient exploration and exploitation in black box optimization.", "configspace": "", "generation": 0, "fitness": 0.35101764478888053, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8414535420024412, 0.8245160438849635, 0.828605425859467, 0.8147690792835673, 0.8216485892079798, 0.8297172101584611, 0.8053677792235908, 0.8315388728919391, 0.8216845536522219, 0.7089758089546123, 0.7178355865728322, 0.6423067788180226, 0.7249845990958516, 0.7109806739956808, 0.7036461196978594, 0.6723098467674803, 0.7017904136398725, 0.6740969701024748, 0.15675634022504636, 0.1252977988548204, 0.15122824230729037, 0.14613189244281055, 0.10165678466481876, 0.13108506135999398, 0.13360399536166756, 0.10392279304947682, 0.10458530110651953, 0.11789545299739479, 0.11510286805935244, 0.08900806766187452, 0.11836473026133554, 0.10822431723353731, 0.10295505778637326, 0.09865547136614405, 0.11960206913107396, 0.12688909893123546, 0.9652425534732869, 0.8888490355989607, 0.872141193965364, 0.9342646377886734, 0.9297442881162153, 0.8753032600816819, 0.9130417234077524, 0.8737010650569978, 0.9217223409112125, 0.31729842245935325, 0.38902701155276787, 0.3789366915543294, 0.16356543304552584, 0.5681250213403026, 0.23682189256445385, 0.2620177382847262, 0.31528776634508016, 0.23298640336074028, 0.8008309455702134, 0.7573549822982744, 0.802871922175624, 0.8124840376313777, 0.8166765168038795, 0.7839291560598161, 0.8048243029755207, 0.38246142792457016, 0.6850589422481972, 0.6329856487206714, 0.18801345191499153, 0.14111789199534508, 0.19236823455713148, 0.1265555094099171, 0.18143911355625753, 0.13778051629693322, 0.15396274443742097, 0.18760907589392173, 0.1635959077245901, 0.17175868350221513, 0.15840237353665287, 0.15491926299178815, 0.14259772055498088, 0.5486153918197612, 0.17636440888075144, 0.1641797233035801, 0.1773274729853056, 0.29220723496715717, 0.24665402412365633, 0.31165037739177737, 0.24581827687888613, 0.4770353161780837, 0.48973464735227645, 0.16841900781144925, 0.09065931617502498, 0.36808272577197476, 0.1184627190267814, 0.09316533893331658, 0.5991890001717608, 0.1801893621359848, 0.10260096824532394, 0.14020543851937328, 0.6347419158180742, 0.4320484240903084, 0.3593964355411883, 0.18476642740546956, 0.2063142237421317, 0.08418877852660822, 0.17543303161230028, 0.22180818879448927, 0.20977760372007093, 0.21160266713175369, 0.17474456701655272, 0.13105149901509472, 0.3243235506328349, 0.3523202587081322, 0.3658671764867302, 0.17733290270487634, 0.3156082329786093, 0.31656234438381337, 0.38742283089016527, 0.35957385377284645, 0.4226482878843013, 0.6566657800906659, 0.4920044063367487, 0.7481822273022698, 0.6600087505092718, 0.6131108502039748, 0.6638679483261316, 0.6574290788107237, 0.6119845282445735, 0.7647713966908019, 0.09265879048238235, 0.12377226440510736, 0.07415219334961876, 0.09900547173064389, 0.09900869640968357, 0.12235259591378178, 0.09131962191723031, 0.09523677198818203, 0.10579936802947032, 0.14090639910642988, 0.12163245590633254, 0.13678514704781186, 0.13327564308055295, 0.1356275888622358, 0.12429935723550622, 0.18264130074587093, 0.14258270953139274, 0.1465988720885376, 0.48797580698827436, 0.38195750822905983, 0.41458403157210777, 0.4434278393281563, 0.41991325147418623, 0.4583321118150193, 0.4911368140984308, 0.5056780855282207, 0.4431649492299309, 0.2648570815150906, 0.39047837325544765, 0.3806857081903251, 0.3372013891404523, 0.32906743263386073, 0.3468430137850561, 0.3293779800418226, 0.33971209021139925, 0.35750299963060816, 0.19697311488203162, 0.18233805106638257, 0.20639640737962472, 0.19152465116684503, 0.20513984514897332, 0.20290890690962993, 0.19760558317538368, 0.18534182828585022, 0.18463152520432347, 0.19206819745414738, 0.20876730719812397, 0.33474656707025685, 0.18520210096313428, 0.20116052873893409, 0.18699289321057477, 0.19983533837676482, 0.20011165663151642, 0.21366484499449656, 0.49499774779772676, 0.16351394523666318, 0.15941606187215496, 0.12178079778794182, 0.8128613700970234, 0.1774752302629462, 0.819000630500965, 0.6199279572805577, 0.6384829715698127, 0.8396313091963261, 0.16215954840471836, 0.7302783185675735, 0.6152328478937449, 0.20291290657875893, 0.16577840464320837, 0.19616061788563355, 0.1515212578240831, 0.20773420902825235, 0.1858120834073641, 0.18886980897386973, 0.1840880420340989, 0.19818328637684302, 0.19065943177560984, 0.17872330184044838, 0.19278477809413352, 0.19072108291560597, 0.18505474739170358, 0.07786851154786922, 0.07919450595209743, 0.07891169238173912, 0.08491940429651001, 0.07894437953427169, 0.08590829001817624, 0.07802675769078271, 0.08381261367800374, 0.0825143593642218]}, "mutation_prompt": null}
{"id": "950a9481-c741-49a2-9951-1f73a0f561f1", "solution": "import numpy as np\n\nclass HybridADE_SI:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = min(100, 4 + int(3 * np.log(self.dim)) * self.dim)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # Differential weight\n        self.cr = 0.9  # Initial crossover probability\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the current population\n            scores = np.apply_along_axis(func, 1, self.particles)\n            for i in range(self.population_size):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.particles[i]\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update crossover probability adaptively\n            self.cr = 0.8 + 0.2 * (self.global_best_score / (self.global_best_score + 1))\n\n            # Differential Evolution with Swarm Intelligence\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.particles[indices]\n                mutant = a + self.f * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Swarm Intelligence inspired velocity update\n                inertia = 0.7 * self.velocities[i]\n                cognitive_component = 0.1 * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.particles[i])\n                social_component = 0.1 * np.random.rand(self.dim) * (self.global_best_position - self.particles[i])\n                self.velocities[i] = inertia + cognitive_component + social_component\n\n                # Crossover\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, self.particles[i] + self.velocities[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < scores[i]:\n                    self.particles[i] = trial\n                    scores[i] = trial_score\n\n        return self.global_best_position, self.global_best_score", "name": "HybridADE_SI", "description": "Hybrid Adaptive Differential Evolution with Swarm Intelligence and Adaptive Crossover for enhanced convergence in black box optimization.", "configspace": "", "generation": 1, "fitness": 0.21903186881087292, "feedback": "", "error": "", "parent_id": "31a052cd-ea68-4339-a97b-8d3ffea22795", "metadata": {"aucs": [0.7103365145424261, 0.6193585647552566, 0.5397360971216015, 0.2802177866712935, 0.1473558342260941, 0.4036878146386391, 0.2283397314809108, 0.5508185605692976, 0.1925149979837808, 9.999999999998899e-05, 0.02307622579216262, 9.999999999998899e-05, 0.26283819559088484, 0.10388399611166332, 0.31781791878492927, 9.999999999998899e-05, 0.4103154955633017, 9.999999999998899e-05, 0.1104686111195966, 0.1198446181090127, 0.1727088969881987, 0.12776015484808323, 0.08954803354560903, 0.13202559646253487, 0.13389216086015898, 0.12518733044550567, 0.1273459705073241, 0.09061011402408548, 0.08792619752244824, 0.09065593190565158, 0.09656483421027517, 0.06450284447468113, 0.07229368193029184, 0.12083542474513687, 0.09147814819469913, 0.1269868226913139, 0.16377664038531492, 0.9591172574707857, 0.1395760344029191, 0.10840849255055818, 0.20637613424320833, 0.16500977905131353, 0.39518963084496206, 0.09158337483765777, 0.18589786416999943, 0.13887893046790345, 0.10942712580259262, 0.18033898573079188, 0.11060367669414795, 0.09084757065160842, 0.15181853389199618, 0.12903235761341036, 0.11439432776868075, 0.08773434197144214, 0.22323274488938694, 0.8680215728794298, 0.14930005378852496, 0.8517845473091374, 0.8935104626168568, 0.8627925443737442, 0.3873360010998631, 0.14422153812794547, 0.7924829163704856, 0.11815874969398465, 0.13871039436962584, 0.1483665493517088, 0.08717367132099951, 0.1609399725041325, 9.999999999998899e-05, 0.20640180545498965, 0.15578462496565249, 0.13063100732171606, 0.09303173575461443, 0.14773466864116802, 0.14633411503059923, 0.15116356257498775, 0.12350662163227322, 0.1226281199579109, 0.13188705783592736, 0.16966266038835165, 0.14556004535851919, 0.20517942418896695, 0.22758014644446334, 0.11765129370216132, 0.4011272547839315, 0.0891894514405367, 0.09665328323310207, 0.054323450620802016, 0.06488350314187796, 0.2051203162637214, 0.5127173875196747, 0.28184919967652045, 0.21497268744843012, 0.18929939634668536, 0.10015934846299857, 0.07184546127238067, 0.16862220239970316, 0.16047396307785078, 0.2256633393917613, 9.999999999998899e-05, 0.26142761686776905, 9.999999999998899e-05, 0.10027660543156347, 0.12616741284308752, 0.09228296573886907, 0.1303950496963906, 0.24415868587325218, 9.999999999998899e-05, 0.08957408937229905, 0.299033802521408, 0.1871505911596011, 0.13969735015704787, 0.046959610872455815, 0.3746653669247786, 0.23008385828067102, 0.10773505896574609, 0.028061240601366277, 0.3803820382525318, 0.2866871315555086, 0.36850115288386476, 0.2530356272998392, 0.2821734499382347, 0.3754220475065555, 0.6983835174205704, 0.7865344907215285, 0.32829686554730164, 0.11644477046300072, 0.0944155020952352, 0.067492032637678, 0.11910325424278168, 0.09266556610589016, 0.1103481424234034, 0.09608680326813579, 0.1061218151565636, 0.10427851644635666, 0.20325465033839296, 0.21872879928017064, 0.14466890324560677, 0.23961273348249834, 0.5106986278729855, 0.22866304148479188, 0.20030376331409994, 0.1579037293863761, 0.18688401264352272, 0.3694990293036903, 0.208950506387932, 0.5310308726938693, 0.5027387046103127, 0.44539415775112834, 0.2904786352052561, 0.520971171229114, 0.44548189207051514, 0.34647503770123234, 0.20071426933433523, 0.23702028420046106, 0.31978127837452675, 0.39767529989441563, 0.25629448776442176, 0.39471781948654094, 0.3344953018634782, 0.33613648307984134, 0.3609432000085394, 0.20067643076308783, 0.21783967561616813, 0.19332179637631086, 0.19597944958356106, 0.18118142711057994, 0.1980209021420527, 0.17971403256026608, 0.19353704241654957, 0.21072813648707656, 0.20549761890494256, 0.19944902877830206, 0.19841805707755988, 0.19503256539039826, 0.2235904686276744, 0.2289678365923763, 0.2345569216829484, 0.195008069398099, 0.1944981029819719, 0.1770223498417952, 0.17178796365350713, 0.1530812504633703, 0.48017383387695556, 0.3810899657819401, 0.2005986103206051, 0.15910897355592912, 0.16207852086246133, 0.20094191882603152, 0.5078558631269011, 0.16346184449295742, 0.21152429353332003, 0.16392446116835968, 0.2008007687975677, 0.34094798420191696, 0.21103398012007157, 0.11784535066650936, 0.19693143606733932, 0.20475577603537387, 0.20350144908946766, 0.2054268222155382, 0.19510751036904217, 0.19337330955165655, 0.17622504147256768, 0.2028736339841407, 0.20171456382680686, 0.18800974713190022, 0.08117891817494838, 0.08403127425814705, 0.08917007924235587, 0.08008357006648514, 0.08756593542958668, 0.07482370406778704, 0.08373219809709531, 0.08559341980495716, 0.07651803920964595]}, "mutation_prompt": null}
