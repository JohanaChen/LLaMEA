{"id": "d1eb6fa7-583a-4ae5-81b5-865841f1e470", "solution": "import numpy as np\n\nclass HybridPSOwithADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, 10 * dim)\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.differential_weight = 0.8\n        self.crossover_prob = 0.9\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate population\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(self.positions[i])\n                self.evaluations += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.positions[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.positions[i]\n\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            self.velocities = (self.inertia_weight * self.velocities +\n                               self.cognitive_coeff * r1 * (self.personal_best_positions - self.positions) +\n                               self.social_coeff * r2 * (self.global_best_position - self.positions))\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n            # ADE Update\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.personal_best_positions[a] + self.differential_weight * (self.personal_best_positions[b] - self.personal_best_positions[c])\n                trial_vector = np.copy(self.positions[i])\n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n                score = func(trial_vector)\n                self.evaluations += 1\n                if score < self.personal_best_scores[i]:\n                    self.positions[i] = trial_vector\n                    self.personal_best_scores[i] = score\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = trial_vector\n\n        return self.global_best_position", "name": "HybridPSOwithADE", "description": "A hybrid Particle Swarm Optimization with Adaptive Differential Evolution to balance exploration and exploitation in black-box optimization.", "configspace": "", "generation": 0, "fitness": 0.18963493573265827, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.4348449501908158, 0.31757106623323106, 0.40035987634784254, 0.4101254742544129, 0.42820112691447443, 0.45653270867878293, 0.38363585489543506, 0.44466355319391926, 0.335681074100488, 0.021369867654982277, 0.047384513174826726, 0.02154217018832094, 0.07920187192045014, 0.04676956246264308, 0.0009427182616338348, 0.02006741560028391, 0.015767505783344515, 0.027246842759500955, 0.0991714930068116, 0.10101216831427118, 0.0975401791512206, 0.07378473922121809, 0.06969571954359255, 0.08628812630846083, 0.09032678252560233, 0.08025735666028355, 0.08885689649310202, 0.102719885224407, 0.07708213368407413, 0.0718285216422011, 0.08289819743354021, 0.06927486847588749, 0.08959175017032261, 0.06343602878986876, 0.08083320449523779, 0.07119062331511106, 0.9726763132099058, 0.97699662119881, 0.9721552599892198, 0.9670702014952103, 0.971238914929093, 0.9649015698159595, 0.9696685435683685, 0.9643480587290651, 0.9637025078845685, 0.263475012245759, 0.229172010921617, 0.2504766381932647, 0.21065065649818748, 0.1756041542241119, 0.19616750031836527, 0.189228572916878, 0.24162560960653867, 0.17106203585380864, 0.20567365728552622, 0.1816423337529075, 0.16719447309272473, 0.18992472189807208, 0.19998983733412756, 0.19137324704636838, 0.19920507095759488, 0.23505648384382383, 0.23450979583586296, 0.08259976728950602, 0.08342605255564117, 0.1059552143666298, 0.11289350424828903, 0.07371488391758108, 0.09724583514066709, 0.1379612085024985, 0.14282598151451165, 0.1444237896746694, 0.09773894342837941, 0.1190623076122902, 0.08149552381874359, 0.1162456163358524, 0.04940542211175647, 0.09621680684360212, 0.17198558592866287, 0.05914761976662808, 0.10903075274552665, 9.999999999998899e-05, 0.010954328568926197, 9.999999999998899e-05, 0.006263265276188368, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07556704477722087, 0.04430301883450116, 0.08889997050896947, 0.07043752699154282, 0.07661449102439732, 0.07491951319862289, 0.07270267058518542, 0.09533612959064408, 0.08897450494901826, 0.012247191989429695, 0.0064965145751473274, 0.03563438735924285, 9.999999999998899e-05, 0.02455289940090155, 0.01962888773022098, 0.010800842165401447, 0.014372314020412502, 0.01901414000916357, 0.07093653534429833, 0.049664562529962875, 0.11385178637164772, 0.07468876076407682, 0.0705234181713027, 0.07684248166479868, 0.039163138140796194, 0.03898140608129741, 0.0695535125389053, 0.39491918021397165, 0.3527763101800836, 0.34650581087280163, 0.3740307780492592, 0.38375855505568923, 0.4189531405431376, 0.3745773210094965, 0.2798348354714022, 0.3084082691820743, 0.08542035885431032, 0.07903950974910734, 0.08969147882803741, 0.07586772924196994, 0.08818882114660753, 0.1136772195804524, 0.07954863607151108, 0.09525448893810662, 0.0791457176899184, 0.13462382675719642, 0.1635281405231892, 0.1533058938663262, 0.16522807043286591, 0.16085420659721605, 0.255160620831138, 0.16685611765295338, 0.16433368263055304, 0.1798972391866035, 0.23883783855176366, 0.2505042340191308, 0.26836797376456767, 0.253405313502131, 0.18655204651299573, 0.24055943869486351, 0.24403128556585707, 0.2706995599304266, 0.2589122013378288, 0.15953035701032825, 0.1502668145374555, 0.1623508554452091, 0.17292352767092356, 0.16835853809953938, 0.15426693063512753, 0.20017516147830405, 0.23278534437528586, 0.14448072701575876, 0.19064486884251397, 0.20400010314155503, 0.17972137522486586, 0.18876053320112884, 0.2039593137032396, 0.18958028136173755, 0.21460492893360683, 0.17236147198619933, 0.1756634651564395, 0.18006445962518192, 0.1785389369245438, 0.17996014594002463, 0.17731480006287237, 0.1665311072254564, 0.1716150707693025, 0.16591287427025958, 0.16414386045091833, 0.20067401990233957, 0.4605986792434753, 0.27683236703263037, 0.18764385135250783, 0.5170621060651176, 0.18634787751949766, 0.2784122727363194, 0.16705119973148375, 0.15951375158540326, 0.5005799332900389, 0.45914925946650464, 0.1673733451859396, 0.164576960646294, 0.19528025006561678, 0.31044961700995855, 0.18895575419611543, 0.20294171920767345, 0.20426124982277893, 0.19799464044008153, 0.19765760784558684, 0.17657382762169604, 0.17709415101413872, 0.18541332621893514, 0.19112338942924445, 0.18840786639909668, 0.17698238364962982, 0.20886034853408808, 0.1790247924035996, 0.07325312988903065, 0.0706958141068944, 0.07707121541008222, 0.06558148497765104, 0.07366904746366543, 0.08071465904506236, 0.07601139530670076, 0.06908334585480702, 0.06787108578117973]}, "mutation_prompt": null}
{"id": "1b32f53d-0644-4963-abb7-0aecc604e727", "solution": "import numpy as np\n\nclass HybridPSOwithADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, 10 * dim)\n        self.inertia_weight_initial = 0.9  # Changed to time-varying\n        self.inertia_weight_final = 0.4  # New parameter\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.differential_weight = 0.8\n        self.crossover_prob = 0.9\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate population\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(self.positions[i])\n                self.evaluations += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.positions[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.positions[i]\n\n            # PSO Update\n            current_inertia_weight = (self.inertia_weight_initial - (self.evaluations / self.budget) * (self.inertia_weight_initial - self.inertia_weight_final))  # Adjusted inertia weight\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            self.velocities = (current_inertia_weight * self.velocities +\n                               self.cognitive_coeff * r1 * (self.personal_best_positions - self.positions) +\n                               self.social_coeff * r2 * (self.global_best_position - self.positions))\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n            # ADE Update\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.personal_best_positions[a] + self.differential_weight * (self.personal_best_positions[b] - self.personal_best_positions[c])\n                trial_vector = np.copy(self.positions[i])\n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n                score = func(trial_vector)\n                self.evaluations += 1\n                if score < self.personal_best_scores[i]:\n                    self.positions[i] = trial_vector\n                    self.personal_best_scores[i] = score\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = trial_vector\n\n        return self.global_best_position", "name": "HybridPSOwithADE", "description": "Enhanced Hybrid PSO with a time-varying inertia weight to improve convergence and adaptability.", "configspace": "", "generation": 1, "fitness": 0.178979167543408, "feedback": "", "error": "", "parent_id": "d1eb6fa7-583a-4ae5-81b5-865841f1e470", "metadata": {"aucs": [0.437831132632036, 0.27849410167547384, 0.417161172220219, 0.3772911017103383, 0.4404320039989037, 0.371322272169628, 0.27668901831383563, 0.372886801263121, 0.3358377456661821, 0.03167085856346452, 0.07367693857118063, 0.06687288425234672, 0.090448939266362, 9.999999999998899e-05, 0.04928937239630904, 0.1402464399579505, 0.012353337354306548, 0.02097800948073869, 0.08050180961479547, 0.07945710303137055, 0.06927065772730878, 0.066207525903346, 0.07924691782074678, 0.05293699034330146, 0.07856518234907472, 0.062350894942456936, 0.08722504705624323, 0.056448935701552516, 0.06275654819835197, 0.08615002259141225, 0.05466546660724547, 0.057546257867070794, 0.0762569211146783, 0.06395554528951342, 0.08401831389326375, 0.06255376601270424, 0.972004820486655, 0.9770217721973071, 0.9721445249938874, 0.9683994312377446, 0.9715965324434119, 0.9652486990147815, 0.972172602793265, 0.9669562933606375, 0.9672859090353649, 0.2095791999668123, 0.20701404883655516, 0.1861671081746359, 0.17959017308083514, 0.13715925934183526, 0.12268370330780087, 0.1799296461451071, 0.2013522556963745, 0.1709929672876076, 0.24205122485121378, 0.3563142407351414, 0.14915491812288362, 0.1867150481202139, 0.212426452195297, 0.19059294445893116, 0.20540479559234404, 0.2023321434190397, 0.22147722172313455, 0.09902542874585563, 0.04779365200660668, 0.07701042014951798, 0.10941809368091049, 0.1240390645682532, 0.044909811138301836, 0.08054954156349792, 0.10113679839831968, 0.06476628315364885, 0.1046771168962457, 0.07331537726643, 0.01557419247866687, 0.1314417106960244, 0.10652334824256882, 0.08281234736674437, 0.0951110367851834, 0.024480068470789984, 0.12143918501814843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017744128841715723, 0.060856480773967214, 0.028290552768611477, 0.055347483897977834, 0.07796703277089112, 0.030193827268471085, 0.06871002072173593, 0.043215293242886754, 0.1019423240109989, 0.052183671591840564, 9.999999999998899e-05, 0.006480947841708606, 0.013570089402508478, 0.02701737911023372, 0.018007003443554437, 0.01737705117271049, 0.00011600692918234401, 9.999999999998899e-05, 9.999999999998899e-05, 0.0649529720337263, 0.04069328275968942, 0.0127381652560834, 0.009560524365739731, 0.07254538128861654, 0.09425656099864266, 0.03778852103781116, 0.04005237797874417, 0.04258473899077431, 0.3550267906816934, 0.28485230724546107, 0.3069107080526524, 0.311059952701242, 0.3401662252332718, 0.32312029040446444, 0.31730064250302303, 0.29597257475538497, 0.32412370853790184, 0.07195268531722254, 0.05949699101316441, 0.06588507787639941, 0.07505974653269509, 0.06882441728906363, 0.06658265896832072, 0.06952764134820322, 0.08044323957129307, 0.08750149827452369, 0.16448498956790591, 0.1817205940410367, 0.14635960316527852, 0.15808801810430617, 0.1468199732327352, 0.17061711486650621, 0.16242100496095646, 0.1950762961910888, 0.14024833087236244, 0.257199498665309, 0.17114251001883674, 0.2543920980022778, 0.22801537496630198, 0.1734168488671698, 0.21682435110472842, 0.23000609073149303, 0.2665497005427424, 0.22700199746271732, 0.1581222870724126, 0.19348516356107115, 0.17581750432347742, 0.15013633701566687, 0.15376125215085923, 0.16120518558350028, 0.19177410466165, 0.1582319566424052, 0.18071832259605436, 0.19325507018482813, 0.18564262984668822, 0.19566226142991527, 0.1723808715213334, 0.18706580613379553, 0.16057219344076712, 0.17758053272617713, 0.17472041653993242, 0.1839517523526628, 0.17396000246171028, 0.16772701748816377, 0.18394154898722825, 0.16677990419934208, 0.1586366458868217, 0.17170664253710022, 0.17969765262541293, 0.16781045777354742, 0.17634671685253456, 0.4645452353462366, 0.164508387598449, 0.17657983409042788, 0.46876970553549646, 0.44074527015322196, 0.3681391299258967, 0.13303339874873543, 0.40672639746669526, 0.3348342332713361, 0.2647204759189271, 0.3150698275295022, 0.20347555797631056, 0.17215183952622448, 0.21305781479192065, 0.1319693014947736, 0.18623331222250628, 0.1795193864177007, 0.19792906307460123, 0.17481823606004832, 0.1759759272036655, 0.18469984741261236, 0.18710713628201725, 0.19110799921568833, 0.18411110120405838, 0.19648986444625394, 0.19805506915599946, 0.1792229001833473, 0.06381807982908527, 0.053887540747480256, 0.06317160999216254, 0.07031936260789717, 0.08219598940850026, 0.06398506350663613, 0.07475722998664625, 0.060649297136885605, 0.06742842430074525]}, "mutation_prompt": null}
