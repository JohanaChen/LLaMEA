{"id": "f2622e1f-378d-4ed3-bb35-ef88d1688476", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(5, min(50, dim * 3))\n        self.velocities = np.zeros((self.population_size, dim))\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.population_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_score = float('inf')\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.inertia_weight = 0.9\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Evaluate current positions and update personal and global bests\n            for i in range(self.population_size):\n                if self.eval_count < self.budget:\n                    score = func(self.positions[i])\n                    self.eval_count += 1\n                    if score < self.personal_best_scores[i]:\n                        self.personal_best_scores[i] = score\n                        self.personal_best_positions[i] = self.positions[i]\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[i]\n\n            # Update velocities and positions\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            cognitive_velocity = self.c1 * r1 * (self.personal_best_positions - self.positions)\n            social_velocity = self.c2 * r2 * (self.global_best_position - self.positions)\n            self.velocities = self.inertia_weight * self.velocities + cognitive_velocity + social_velocity\n\n            # Clamp velocities to a reasonable range\n            v_max = 0.5 * (self.upper_bound - self.lower_bound)\n            self.velocities = np.clip(self.velocities, -v_max, v_max)\n\n            # Update positions and ensure they remain within bounds\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n            # Adjust inertia weight dynamically\n            self.inertia_weight = 0.9 - (0.5 * (self.eval_count / self.budget))\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveSwarmOptimizer", "description": "A dynamic adaptive swarm optimization algorithm with directionally-guided exploration and exploitation phases for efficient black-box function optimization within a constrained budget.", "configspace": "", "generation": 0, "fitness": 0.1647355536039885, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.26654337948343354, 0.3067802476059568, 0.2607878170996072, 0.19008392826642428, 0.14119397665405375, 0.1868681762470109, 0.17901034829230233, 0.5589281008720628, 0.1489958997778933, 0.44895523139785143, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12027573385181511, 0.002694132586976261, 0.08003815474930365, 0.12190342321724179, 0.1389413389391595, 0.06122421855639604, 0.06415869409549668, 0.05700496453911741, 0.0854661077356288, 0.03807347842550157, 0.04488702761770469, 0.07861857725513532, 0.11850027730530854, 0.12744434749879097, 0.10899399862564318, 0.07631080469701645, 0.04104268155427704, 0.11871163722858458, 0.037705245956432876, 0.03525316780151355, 0.9930714222575664, 0.990257339494216, 0.9953531675351973, 0.9913908881327679, 0.9931296661403705, 0.987423305584687, 0.9909752354843941, 0.9942808727092474, 0.09925395575053475, 0.06022768308237647, 0.0578273435243265, 0.05979282129913044, 0.13907334108783054, 0.14804616886568367, 0.14407866364383914, 0.07964842716366782, 0.08244252649865247, 0.05136274505643201, 0.1664988461844369, 0.1535979128488405, 0.18571917422823958, 0.1847479530897519, 0.11645614762517875, 0.23705008280142625, 0.12394458169021272, 0.11413358873321888, 0.12363240555989707, 0.14435997767461417, 0.11108409044935874, 0.07200674649146199, 0.07187602471012755, 0.04463667023263407, 0.08570384639240636, 0.1537220001334585, 0.20681126181464493, 0.1353675839769194, 0.11808010625483256, 0.11594521707631811, 0.14092898516518493, 0.1143240695534814, 0.10311857526284163, 0.11818640494549582, 0.18828389370393595, 0.1463707702932756, 0.19100696710644793, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014800254974108196, 9.999999999998899e-05, 0.02866314703616335, 0.007026563682569376, 0.017697155070760195, 0.032157920830052755, 0.07315275722194325, 9.999999999998899e-05, 0.010603362311579767, 0.1086057737251418, 0.03181039628409488, 0.026108331786462657, 0.02756705801202064, 9.999999999998899e-05, 9.999999999998899e-05, 0.0647009872854376, 0.07157786649644482, 0.051853974243281864, 0.0031902298055576095, 0.06760842922961596, 0.045628597037429275, 0.03777481002215921, 0.03410250178796437, 0.007244232793737315, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06552292072759158, 0.28311575173075954, 0.4470388251784412, 0.48878691067000035, 0.17748717972561479, 0.2076731248982423, 0.20527850283975746, 0.2757316323332706, 0.21878277624617903, 0.3913445305317408, 0.052792233604477046, 0.05023994579200297, 0.041355669320673805, 0.10792021139818786, 0.07305023707326563, 0.11988225916017725, 0.09104923686258592, 0.08644740338768475, 0.10503884472726877, 0.1219060418905834, 0.19564721313572786, 0.1599046133957137, 0.34096378912336944, 0.19333864843591764, 0.10434969047661213, 0.20908958639134756, 0.16330439107076944, 0.2294580917668665, 0.21678739162289018, 0.330250353718089, 0.17915600803220255, 0.3574509312093722, 0.31103383750725166, 0.2210048781881273, 0.20255216408428656, 0.17318251692030062, 0.12908970028894529, 0.1675077162670333, 0.2696042754826097, 0.08744366546913629, 0.16202610526425365, 0.21237850359467836, 0.17361598980818904, 0.2369430848315991, 0.15288442702645444, 0.08998152293227446, 0.14393144000024427, 0.1638657926216025, 0.17589199137638478, 0.18060402056435998, 0.18289282251299155, 0.18712434122816357, 0.19990885737369568, 0.18642348455404367, 0.18858520329107242, 0.42806352935153624, 0.16303910042472203, 0.503108666267608, 0.2140024746925424, 0.18080549558115622, 0.15993187164402423, 0.18641928248187345, 0.10121381395590034, 0.1743381670140869, 0.41002189188700555, 0.12796865738511498, 0.11485757058871382, 0.14643509849679537, 0.19938733351414473, 0.18658249916005298, 0.15478372799568751, 0.1071371912561222, 0.13079596498491497, 0.3145544537765831, 0.11029095921126297, 0.09427002371865278, 0.18317547882350305, 0.2208362491932797, 0.16582103748570642, 0.1037466418094607, 0.14901445837882876, 0.1858251719683507, 0.18271868226862886, 0.1941649159488006, 0.18885125850752194, 0.15842985105390928, 0.18161152613850007, 0.18408991790560603, 0.1915090641680557, 0.18795057335027288, 0.1867493340048988, 0.0658735788303989, 0.07576373091474342, 0.07748536886911295, 0.0920562462875345, 0.08063962940765945, 0.08456295643470113, 0.08036054055961539, 0.06936548066859793, 0.061049899550521536]}, "mutation_prompt": null}
{"id": "1a50c883-f885-49d0-b88b-29d90d883260", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(5, min(50, dim * 3))\n        self.velocities = np.zeros((self.population_size, dim))\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.population_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_score = float('inf')\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.inertia_weight = 0.9\n        self.eval_count = 0\n        self.f = 0.5  # differential weight\n        self.cr = 0.7  # crossover probability\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Evaluate current positions and update personal and global bests\n            for i in range(self.population_size):\n                if self.eval_count < self.budget:\n                    score = func(self.positions[i])\n                    self.eval_count += 1\n                    if score < self.personal_best_scores[i]:\n                        self.personal_best_scores[i] = score\n                        self.personal_best_positions[i] = self.positions[i]\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.positions[i]\n\n            # Differential Evolution Mutation for better exploration\n            for i in range(self.population_size):\n                if self.eval_count < self.budget:\n                    indices = [idx for idx in range(self.population_size) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    mutant = self.positions[a] + self.f * (self.positions[b] - self.positions[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                    crossover = np.random.rand(self.dim) < self.cr\n                    trial = np.where(crossover, mutant, self.positions[i])\n                    \n                    trial_score = func(trial)\n                    self.eval_count += 1\n                    \n                    if trial_score < self.personal_best_scores[i]:\n                        self.positions[i] = trial\n                        self.personal_best_scores[i] = trial_score\n                        self.personal_best_positions[i] = trial\n\n            # Update velocities and positions\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            cognitive_velocity = self.c1 * r1 * (self.personal_best_positions - self.positions)\n            social_velocity = self.c2 * r2 * (self.global_best_position - self.positions)\n            self.velocities = self.inertia_weight * self.velocities + cognitive_velocity + social_velocity\n\n            # Clamp velocities to a reasonable range\n            v_max = 0.5 * (self.upper_bound - self.lower_bound)\n            self.velocities = np.clip(self.velocities, -v_max, v_max)\n\n            # Update positions and ensure they remain within bounds\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n            # Adjust inertia weight dynamically\n            self.inertia_weight = 0.9 - (0.5 * (self.eval_count / self.budget))\n\n        return self.global_best_position, self.global_best_score", "name": "HybridSwarmOptimizer", "description": "A hybrid swarm optimizer combining differential evolution mutation with adaptive velocity updates to enhance exploration and exploitation balance within budget constraints.", "configspace": "", "generation": 1, "fitness": 0.17488304619909698, "feedback": "", "error": "", "parent_id": "f2622e1f-378d-4ed3-bb35-ef88d1688476", "metadata": {"aucs": [0.2632338601722638, 0.1259459191627751, 0.6566355522037687, 0.15696537589152015, 0.3062096141841635, 0.19020226172259425, 0.598747949036086, 0.6999870100155055, 0.4283076225161422, 0.023787491089799717, 9.999999999998899e-05, 9.999999999998899e-05, 0.09127465557676151, 0.025172727510922366, 0.03105717656758511, 0.039815353538384946, 9.999999999998899e-05, 0.18854616970647087, 0.0854709498119115, 0.04832841433775359, 0.1355866152347175, 0.0683718717982823, 0.06988430629651032, 0.06047945730733062, 0.050370703322127564, 0.02663905924986354, 0.1003374474533435, 0.074356862261298, 0.09081935696970667, 0.09317043756229593, 0.10615910289776531, 0.04100886823785932, 0.058713248167039045, 0.0016015152620751927, 0.09976070574357943, 0.09651686929988446, 0.9857495872976124, 0.9888835053298463, 0.9910207013794571, 0.9863148694317486, 0.9861056670323992, 0.9860739819729721, 0.9864258565028717, 0.9912848326984366, 0.9883123659821189, 0.0595193632084271, 0.058669165609853025, 0.07348034243968704, 0.38279129433813, 0.1355415166047942, 0.1366337035869657, 0.06410905482176399, 0.08256871890174611, 0.25059758056774417, 0.2181650702390241, 0.19662536329597147, 0.13422621784271416, 0.1912618464167496, 0.18876136407559763, 0.20272133897359668, 0.44073747413918063, 0.11427449262343203, 0.16442997258390246, 0.08607260632129854, 0.14773455247493583, 0.10184603275672344, 0.0787618441109822, 0.043029717431662395, 0.16031964349836703, 0.12176246978220984, 0.12648571990679935, 0.1471503989589502, 0.10489936686103918, 0.012675566935493543, 0.15080997890025916, 0.16382802098659832, 0.12536794385221783, 0.04521049756106388, 0.19918714682318828, 9.999999999998899e-05, 0.12935306223929077, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009630291283120318, 0.005194207530053396, 0.06465924062555128, 0.0819380095217801, 9.999999999998899e-05, 0.02436902499819993, 0.05663534761667344, 0.055826065298303695, 0.014502734473544443, 0.0312546157201532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05926775360207126, 0.05360987683000329, 0.02447585477308134, 9.999999999998899e-05, 0.0363260938232739, 9.999999999998899e-05, 0.004460860923815035, 0.005458445547485979, 9.999999999998899e-05, 0.11205832053965792, 9.999999999998899e-05, 0.05610454998151637, 0.02737164865113495, 0.24914108990091222, 0.33607649115971916, 0.4434216974275774, 0.20450621678620595, 0.33525766550338754, 0.1984854024625129, 0.3936617642129706, 0.4164052226208811, 0.4358398171075569, 0.07489548058893247, 0.059529325302749014, 0.051268983093106346, 0.0910200774437071, 0.08468118781498035, 0.08844151329302352, 0.04500097654113211, 0.07790268170162362, 0.05988965432993665, 0.15351987392292832, 0.14977341641114272, 0.15999946056224457, 0.20021981010146728, 0.1590408914102871, 0.17895337850484172, 0.14586650126710698, 0.13660947156221248, 0.18145721089725808, 0.21807125042009412, 0.19184438645140622, 0.28311196095012847, 0.29169650336785746, 0.36034980713242126, 0.27871353128887044, 0.26097306005809773, 0.14953957464762713, 0.15627538234166183, 0.16776439523409759, 0.20369919679029813, 0.11685376441902795, 0.18756067989998115, 0.17353124066224135, 0.23871140427638793, 0.20961204003438516, 0.11214492545613464, 0.14289575556437395, 0.18116611719330855, 0.16444500837805787, 0.1878969177350085, 0.20934075972522015, 0.1686903621177649, 0.19123743969251317, 0.18936462231942297, 0.18784244458957, 0.17704217017272295, 0.14055692203909587, 0.17592404751213286, 0.16743765452872017, 0.18791471448370645, 0.1944502986362937, 0.18054051504093271, 0.17905350619932092, 0.145548969853044, 0.4389658070397192, 0.13999940615148476, 0.17602680156725814, 0.1203723388016078, 0.12870990994723275, 0.198730659797984, 0.18182918382271696, 0.15961366438934232, 0.12111460764188375, 0.15446453990736086, 0.16492343361817408, 0.10609055582775195, 0.1612895415359219, 0.19844523382971468, 0.1587534739150036, 0.1958383990597944, 0.196373316156791, 0.16396095915496667, 0.5953973753390194, 0.18218172908339303, 0.19527690695982358, 0.19483798690227538, 0.1969299644010375, 0.17804563768179382, 0.1848873103556179, 0.20509147540019268, 0.18675471507744834, 0.19972403525046178, 0.07656908320165279, 0.06514574335533074, 0.07239345103049089, 0.09061130694014974, 0.047654166511591156, 0.08301661634986324, 0.06719671784680359, 0.052140737156268546, 0.06412730770936304]}, "mutation_prompt": null}
