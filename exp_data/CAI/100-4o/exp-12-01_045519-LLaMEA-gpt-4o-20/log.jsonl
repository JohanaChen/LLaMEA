{"id": "d3c34df7-6352-469f-8b12-eee626d5de9d", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9 # Crossover probability\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, \n                                       (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Randomly select three distinct vectors\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Mutation\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                # Evaluate trial vector\n                f_trial = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                \n                # Adaptive Local Search\n                if evaluations < self.budget and np.random.rand() < 0.1:\n                    local_search_vector = trial + np.random.normal(0, 0.1, self.dim)\n                    local_search_vector = np.clip(local_search_vector, self.lower_bound, self.upper_bound)\n                    f_local = func(local_search_vector)\n                    evaluations += 1\n                    if f_local < f_trial:\n                        population[i] = local_search_vector\n                        fitness[i] = f_local\n\n                if evaluations >= self.budget:\n                    break\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "AdaptiveDE", "description": "A novel metaheuristic combining Differential Evolution with Adaptive Local Search for enhanced convergence and diversity balance in black box optimization.", "configspace": "", "generation": 0, "fitness": 0.21596115799372756, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.5304306466799451, 0.5304306466799451, 0.5304306466799451, 0.5641640463393471, 0.5641640463393471, 0.5641640463393471, 0.5727761297731968, 0.5727761297731968, 0.5727761297731968, 0.3149825735421359, 0.3149825735421359, 0.3149825735421359, 0.3406448207403707, 0.3406448207403707, 0.3406448207403707, 0.3482852901663681, 0.3482852901663681, 0.3482852901663681, 0.08231325368310172, 0.08231325368310172, 0.08231325368310172, 0.08147707249001346, 0.08147707249001346, 0.08147707249001346, 0.07244978754710552, 0.07244978754710552, 0.07244978754710552, 0.07715125508810583, 0.07715125508810583, 0.07715125508810583, 0.06860173469717701, 0.06860173469717701, 0.06860173469717701, 0.08283027520007669, 0.08283027520007669, 0.08283027520007669, 0.9527773445524185, 0.9527773445524185, 0.9527773445524185, 0.9586854970479101, 0.9586854970479101, 0.9586854970479101, 0.979607646749162, 0.979607646749162, 0.979607646749162, 0.20041155640464192, 0.20041155640464192, 0.20041155640464192, 0.19114513680791778, 0.19114513680791778, 0.19114513680791778, 0.242035525269931, 0.242035525269931, 0.242035525269931, 0.2860827732756863, 0.2860827732756863, 0.2860827732756863, 0.3678939404909374, 0.3678939404909374, 0.3678939404909374, 0.37935756372192364, 0.37935756372192364, 0.37935756372192364, 0.14437028179176792, 0.14437028179176792, 0.14437028179176792, 0.14354149909842728, 0.14354149909842728, 0.14354149909842728, 0.13846052691829025, 0.13846052691829025, 0.13846052691829025, 0.17108252964758353, 0.17108252964758353, 0.17108252964758353, 0.12254484848473379, 0.12254484848473379, 0.12254484848473379, 0.1366004736908526, 0.1366004736908526, 0.1366004736908526, 0.04167917004834343, 0.04167917004834343, 0.04167917004834343, 0.025982404114519908, 0.025982404114519908, 0.025982404114519908, 0.0438383218059214, 0.0438383218059214, 0.0438383218059214, 0.08455406787968223, 0.08455406787968223, 0.08455406787968223, 0.10646862640078614, 0.10646862640078614, 0.10646862640078614, 0.14452739328262854, 0.14452739328262854, 0.14452739328262854, 0.0009505022531833829, 0.0009505022531833829, 0.0009505022531833829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005308676442847826, 0.0005308676442847826, 0.0005308676442847826, 0.12804531685829001, 0.12804531685829001, 0.12804531685829001, 0.12424015510708941, 0.12424015510708941, 0.12424015510708941, 0.13664030680048822, 0.13664030680048822, 0.13664030680048822, 0.4077561758128354, 0.4077561758128354, 0.4077561758128354, 0.4345497865350283, 0.4345497865350283, 0.4345497865350283, 0.4300724387858962, 0.4300724387858962, 0.4300724387858962, 0.07542078275551356, 0.07542078275551356, 0.07542078275551356, 0.07177322383296247, 0.07177322383296247, 0.07177322383296247, 0.06621861220844572, 0.06621861220844572, 0.06621861220844572, 0.13675404099473432, 0.13675404099473432, 0.13675404099473432, 0.1404387475766281, 0.1404387475766281, 0.1404387475766281, 0.17444427359392267, 0.17444427359392267, 0.17444427359392267, 0.2342416771425334, 0.2342416771425334, 0.2342416771425334, 0.22798799112372425, 0.22798799112372425, 0.22798799112372425, 0.23733653979872393, 0.23733653979872393, 0.23733653979872393, 0.17946169556199942, 0.17946169556199942, 0.17946169556199942, 0.16077086671150442, 0.16077086671150442, 0.16077086671150442, 0.16660358125542862, 0.16660358125542862, 0.16660358125542862, 0.18101537874436513, 0.18101537874436513, 0.18101537874436513, 0.17351337492665664, 0.17351337492665664, 0.17351337492665664, 0.18216404819189924, 0.18216404819189924, 0.18216404819189924, 0.16491706845088594, 0.16491706845088594, 0.16491706845088594, 0.17538338387225672, 0.17538338387225672, 0.17538338387225672, 0.16699319649113453, 0.16699319649113453, 0.16699319649113453, 0.16719625832313667, 0.16719625832313667, 0.16719625832313667, 0.147714225392793, 0.147714225392793, 0.147714225392793, 0.1591434362165559, 0.1591434362165559, 0.1591434362165559, 0.18966622165228175, 0.18966622165228175, 0.18966622165228175, 0.1538038698558568, 0.1538038698558568, 0.1538038698558568, 0.3955391489064538, 0.3955391489064538, 0.3955391489064538, 0.18265996874188328, 0.18265996874188328, 0.18265996874188328, 0.20426084374008113, 0.20426084374008113, 0.20426084374008113, 0.18549668525584917, 0.18549668525584917, 0.18549668525584917, 0.05943402209992987, 0.05943402209992987, 0.05943402209992987, 0.06583483900388676, 0.06583483900388676, 0.06583483900388676, 0.06237580989825253, 0.06237580989825253, 0.06237580989825253]}, "mutation_prompt": null}
{"id": "69cae6f6-48cf-45f1-b687-c3810cfe20a4", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9 # Crossover probability\n        self.local_search_rate = 0.15  # Increased local search rate\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initialize population with diversity\n        population = np.random.uniform(self.lower_bound, self.upper_bound, \n                                       (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        evaluations = self.population_size\n        historical_best = np.inf\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Randomly select three distinct vectors\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Mutation with diversity preservation\n                mutant = np.clip(a + self.F * (b - c) + self.F * (np.mean(population, axis=0) - population[i]),\n                                 self.lower_bound, self.upper_bound)\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                # Evaluate trial vector\n                f_trial = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                \n                # Adaptive Local Search\n                if evaluations < self.budget and np.random.rand() < self.local_search_rate:\n                    local_search_vector = trial + np.random.normal(0, 0.05, self.dim)\n                    local_search_vector = np.clip(local_search_vector, self.lower_bound, self.upper_bound)\n                    f_local = func(local_search_vector)\n                    evaluations += 1\n                    if f_local < f_trial:\n                        population[i] = local_search_vector\n                        fitness[i] = f_local\n\n                # Update historical best\n                if f_trial < historical_best:\n                    historical_best = f_trial\n\n                if evaluations >= self.budget:\n                    break\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "AdaptiveDE", "description": "A novel metaheuristic using reinforced Differential Evolution with enhanced adaptive local search and diversity-preserving techniques.", "configspace": "", "generation": 1, "fitness": 0.13588026882350138, "feedback": "", "error": "", "parent_id": "d3c34df7-6352-469f-8b12-eee626d5de9d", "metadata": {"aucs": [0.20113701305350018, 0.20113701305350018, 0.20113701305350018, 0.27006453960267507, 0.27006453960267507, 0.27006453960267507, 0.22903509925062726, 0.22903509925062726, 0.22903509925062726, 0.09432584479116701, 0.09432584479116701, 0.09432584479116701, 0.065811652688472, 0.065811652688472, 0.065811652688472, 0.07744267717542386, 0.07744267717542386, 0.07744267717542386, 0.07052076382306716, 0.07052076382306716, 0.07052076382306716, 0.05993922740140989, 0.05993922740140989, 0.05993922740140989, 0.07250281859869778, 0.07250281859869778, 0.07250281859869778, 0.023676263123907137, 0.023676263123907137, 0.023676263123907137, 0.04096754963702809, 0.04096754963702809, 0.04096754963702809, 0.05795244130961441, 0.05795244130961441, 0.05795244130961441, 0.9424158290081529, 0.9424158290081529, 0.9424158290081529, 0.9326183163146518, 0.9326183163146518, 0.9326183163146518, 0.8520314538614575, 0.8520314538614575, 0.8520314538614575, 0.09303153434526035, 0.09303153434526035, 0.09303153434526035, 0.10513310510309004, 0.10513310510309004, 0.10513310510309004, 0.08584027262087546, 0.08584027262087546, 0.08584027262087546, 0.17237216105553033, 0.17237216105553033, 0.17237216105553033, 0.1888084008551305, 0.1888084008551305, 0.1888084008551305, 0.1797742330351514, 0.1797742330351514, 0.1797742330351514, 0.010704172453941063, 0.010704172453941063, 0.010704172453941063, 0.002743415530756299, 0.002743415530756299, 0.002743415530756299, 0.06595759249163224, 0.06595759249163224, 0.06595759249163224, 0.05977271419732666, 0.05977271419732666, 0.05977271419732666, 0.012333186430772747, 0.012333186430772747, 0.012333186430772747, 0.00816753414203053, 0.00816753414203053, 0.00816753414203053, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04777770839513873, 0.04777770839513873, 0.04777770839513873, 0.032489508796209376, 0.032489508796209376, 0.032489508796209376, 0.08028050162795586, 0.08028050162795586, 0.08028050162795586, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012289730455975256, 0.012289730455975256, 0.012289730455975256, 0.0078011625362900405, 0.0078011625362900405, 0.0078011625362900405, 0.023117329492113314, 0.023117329492113314, 0.023117329492113314, 0.20082580768745528, 0.20082580768745528, 0.20082580768745528, 0.2268148612120604, 0.2268148612120604, 0.2268148612120604, 0.21806370617425563, 0.21806370617425563, 0.21806370617425563, 0.07625561230962119, 0.07625561230962119, 0.07625561230962119, 0.04822749993400033, 0.04822749993400033, 0.04822749993400033, 0.05600517796691984, 0.05600517796691984, 0.05600517796691984, 0.12857651486527988, 0.12857651486527988, 0.12857651486527988, 0.14517193201515233, 0.14517193201515233, 0.14517193201515233, 0.16369847801149173, 0.16369847801149173, 0.16369847801149173, 0.16840528396659227, 0.16840528396659227, 0.16840528396659227, 0.16940381149991757, 0.16940381149991757, 0.16940381149991757, 0.1736207439564963, 0.1736207439564963, 0.1736207439564963, 0.10453192432132874, 0.10453192432132874, 0.10453192432132874, 0.1233713033190319, 0.1233713033190319, 0.1233713033190319, 0.1278739805013256, 0.1278739805013256, 0.1278739805013256, 0.17074648679987026, 0.17074648679987026, 0.17074648679987026, 0.15671387376350354, 0.15671387376350354, 0.15671387376350354, 0.17270859442781983, 0.17270859442781983, 0.17270859442781983, 0.13553753931150458, 0.13553753931150458, 0.13553753931150458, 0.1326251462660073, 0.1326251462660073, 0.1326251462660073, 0.14180511349687208, 0.14180511349687208, 0.14180511349687208, 0.14478189307298994, 0.14478189307298994, 0.14478189307298994, 0.16111282206204502, 0.16111282206204502, 0.16111282206204502, 0.14154850768684102, 0.14154850768684102, 0.14154850768684102, 0.16347584846991614, 0.16347584846991614, 0.16347584846991614, 0.10079543072768049, 0.10079543072768049, 0.10079543072768049, 0.12718748118191092, 0.12718748118191092, 0.12718748118191092, 0.1784897023291121, 0.1784897023291121, 0.1784897023291121, 0.18204377326862498, 0.18204377326862498, 0.18204377326862498, 0.20530491922156824, 0.20530491922156824, 0.20530491922156824, 0.06110354112732497, 0.06110354112732497, 0.06110354112732497, 0.05159000898283883, 0.05159000898283883, 0.05159000898283883, 0.04552628214970811, 0.04552628214970811, 0.04552628214970811]}, "mutation_prompt": null}
