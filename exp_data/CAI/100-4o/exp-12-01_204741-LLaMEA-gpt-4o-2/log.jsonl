{"id": "324945c1-a9d6-43f2-980a-85d29673e129", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.inertia_weight = 0.7\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(self.population[i])\n                self.evaluations += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            for i in range(self.population_size):\n                cognitive_component = self.cognitive_coef * r1 * (self.personal_best_positions[i] - self.population[i])\n                social_component = self.social_coef * r2 * (self.global_best_position - self.population[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_component + social_component)\n                self.population[i] = np.clip(self.population[i] + self.velocities[i],\n                                             self.lower_bound, self.upper_bound)\n\n            # Apply DE mutation and crossover\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant = np.clip(self.population[a] + self.mutation_factor * \n                                 (self.population[b] - self.population[c]),\n                                 self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                for d in range(self.dim):\n                    if np.random.rand() < self.crossover_prob:\n                        trial[d] = mutant[d]\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    if trial_score < self.global_best_score:\n                        self.global_best_score = trial_score\n                        self.global_best_position = trial\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSO_DE", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Evolution for enhanced exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.208536490914554, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.44419188367894213, 0.4714264205988794, 0.522597840677312, 0.48934277757988953, 0.4545940600055033, 0.41431408835247396, 0.4395888278438439, 0.43480521802077965, 0.5656235922918931, 0.16000473961825012, 0.1338693330978582, 0.19237119945668368, 0.06722868234572854, 0.0774217514725064, 0.17005313376479647, 0.10859270476817817, 0.11506738409233808, 0.17865382115226713, 0.10070867611287337, 0.09438970930767987, 0.09466799018168004, 0.09193385884630823, 0.08748702422550847, 0.12175198614832283, 0.10705558628660494, 0.11992610654591862, 0.1337962408978456, 0.10742853085469306, 0.06980266517699618, 0.08796671787543708, 0.09896380760334322, 0.10054525200298192, 0.09242231610382146, 0.099929957251365, 0.10595269260294227, 0.10733802800271186, 0.9713651184021357, 0.9744930673036412, 0.9510708179171486, 0.9748764984851087, 0.9554323606618603, 0.973703924924108, 0.9666077634351998, 0.9526120834484402, 0.9671681547890045, 0.2625733924576099, 0.2395572132585697, 0.2502848840056938, 0.20541817902971693, 0.20350970310499683, 0.22789951149152576, 0.22434775418291142, 0.19462256700238034, 0.24446870998088155, 0.19168676456096634, 0.2378138907190287, 0.22584359760461592, 0.6744467864150969, 0.19738222204574463, 0.1928387715129023, 0.21763126551053813, 0.2307133753816868, 0.1691386863939437, 0.1111840265689027, 0.17759311459748206, 0.11842025076018725, 0.14368125203317816, 0.11353535546236193, 0.13041204284136587, 0.13274395370525638, 0.1447858402352864, 0.13722554728047054, 0.12378178406399187, 0.0917960320652984, 0.10526680811764288, 0.12993632895827645, 0.16482414026199566, 0.1342858417285221, 0.1212176750895726, 0.08428353800083699, 0.09589333734900096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0053394170097673666, 0.023396999889093828, 9.999999999998899e-05, 0.0005048027827657675, 9.999999999998899e-05, 9.999999999998899e-05, 0.1197738009329371, 0.03597176318056283, 0.06002149926783207, 0.048276719440786486, 0.01880084642624713, 0.009204228375426449, 0.0805167697680701, 0.08678483401647752, 0.04496002831853585, 0.00426124677998263, 0.03812073895757606, 0.0302832835161585, 0.020183417780182955, 0.03898006807964627, 0.04021184370609476, 0.02520707100108799, 0.0018898437035750337, 0.033472523382232944, 0.04824979438778065, 0.0748622669606539, 0.08613016465611145, 0.003913973785636737, 0.07481347911784086, 0.07920403280993016, 0.044989293897209404, 0.03923962650221202, 0.051115302045723676, 0.34323208759130197, 0.3660949228975151, 0.4141659230753961, 0.4180753786525303, 0.3231835197485945, 0.4040087597091633, 0.369896168900802, 0.3416096667382973, 0.45235836542046715, 0.06727462502993098, 0.09418660031378345, 0.11006305306007758, 0.07103344843253612, 0.08857501303242421, 0.10683021349062471, 0.09763799065608458, 0.11022655152450711, 0.10476489335615702, 0.18131280192850452, 0.17033601197527493, 0.25337894314626064, 0.14081125829248609, 0.19898736004774664, 0.1593359498532605, 0.23549070975312425, 0.14918523441227693, 0.20557306093303607, 0.26609442861354404, 0.20542434371247276, 0.29248579621209647, 0.24163360573018822, 0.2674766850036262, 0.239508941531557, 0.2919317538102668, 0.2926492744519815, 0.3167669870282568, 0.21604010219938374, 0.259726341539783, 0.18892933986838256, 0.18658777149554995, 0.18758065151192116, 0.2702089328911128, 0.1956356978650612, 0.23390615666539694, 0.21907833297249502, 0.2073026292829231, 0.19579540736490886, 0.17220642915422157, 0.19679729936126034, 0.20678531283447776, 0.18110887897010064, 0.17697236196081434, 0.186910560825426, 0.19763092025449502, 0.18021144253045007, 0.18520454354464022, 0.19331467094139554, 0.17765198896847634, 0.2061746629884429, 0.18298861871673344, 0.1788246700007814, 0.19881198797529864, 0.1869822636472137, 0.1829600342935731, 0.15021211465335382, 0.1472706031139034, 0.7796345554689919, 0.32471138092171403, 0.19753608564722813, 0.3051642571858608, 0.1913919290744106, 0.2038500400610196, 0.3963786144899416, 0.19423779447660738, 0.25757410734264685, 0.2865753217775133, 0.16674042680003331, 0.1462071623859692, 0.15702277809719234, 0.37423670133920184, 0.5355624510460535, 0.21600554629337443, 0.19967818016572825, 0.17241019899025867, 0.17903185899175678, 0.18005518409764276, 0.1873497561350871, 0.2137872745692042, 0.1859004265287474, 0.19396928307792427, 0.07833398592708074, 0.07340694592124941, 0.08251977629134144, 0.07601842032117823, 0.0695847473930793, 0.07350278902585339, 0.06995916191039209, 0.08729528296136901, 0.0773703379015016]}, "mutation_prompt": null}
{"id": "7f367902-526d-49c8-931d-b2797031110e", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.inertia_weight = 0.7\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(self.population[i])\n                self.evaluations += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            self.inertia_weight = 0.9 - 0.5 * (self.evaluations / self.budget)  # Dynamic inertia weight\n            for i in range(self.population_size):\n                cognitive_component = self.cognitive_coef * r1 * (self.personal_best_positions[i] - self.population[i])\n                social_component = self.social_coef * r2 * (self.global_best_position - self.population[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_component + social_component)\n                self.population[i] = np.clip(self.population[i] + self.velocities[i],\n                                             self.lower_bound, self.upper_bound)\n\n            # Apply DE mutation and crossover\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant = np.clip(self.population[a] + self.mutation_factor * \n                                 (self.population[b] - self.population[c]),\n                                 self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                for d in range(self.dim):\n                    if np.random.rand() < self.crossover_prob:\n                        trial[d] = mutant[d]\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    if trial_score < self.global_best_score:\n                        self.global_best_score = trial_score\n                        self.global_best_position = trial\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSO_DE", "description": "Improved exploration by adjusting the inertia weight dynamically for better convergence.", "configspace": "", "generation": 1, "fitness": 0.19965603678216193, "feedback": "", "error": "", "parent_id": "324945c1-a9d6-43f2-980a-85d29673e129", "metadata": {"aucs": [0.488943094785968, 0.42859251349522764, 0.4876505391902566, 0.45677722223091377, 0.42051796550486453, 0.44382016142776826, 0.47063265027327306, 0.5057054979441854, 0.4624519796651625, 0.08363857672816388, 0.12281611133274761, 0.15363250206404644, 0.10577980669510112, 0.09636404458165193, 0.1842372372591219, 0.13575227332127127, 0.1160625211958013, 0.1457308317622581, 0.10002459744947845, 0.10502534468199787, 0.09510872600940079, 0.11921374123234274, 0.1124336701081311, 0.08390138654892598, 0.10505775345476975, 0.17039873670801986, 0.11192700307738235, 0.09969104708394882, 0.07184055217512164, 0.08661408618245259, 0.09637236705655539, 0.0829654728644944, 0.09092050722669842, 0.06897498905537358, 0.07892111864517048, 0.0921176984773352, 0.9746381346245904, 0.9743676582893168, 0.9742048016387759, 0.9730730670722362, 0.9640263564627795, 0.9682538545500645, 0.981395982138444, 0.9580486356094221, 0.9752898757788981, 0.27828980362756606, 0.26722316428484305, 0.2399436750071684, 0.17531972038693855, 0.18518618259830477, 0.14568473090800949, 0.19283987412831793, 0.2237628711295503, 0.2506761601852959, 0.19061180456543003, 0.18375318422651232, 0.198384679808156, 0.2088376411728926, 0.17277534784922066, 0.1867835212338811, 0.21591124166869735, 0.20607351420260533, 0.238134700854014, 0.12523803287305924, 0.12812959177984162, 0.09787825282316787, 0.09504214918955545, 0.09472906333338138, 0.11873668676668114, 0.10260122636896407, 0.10505973124006307, 0.10537714217283523, 0.08275779039137965, 0.08871040949339204, 0.08020906434290576, 0.11716505035657954, 0.0733678127741163, 0.13556407984418495, 0.1398556322067721, 0.03421365607608495, 0.15249571368221182, 0.030778211035472625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017070429632319417, 0.0036109233006911268, 9.999999999998899e-05, 9.999999999998899e-05, 0.04059082663221203, 0.08341394236327704, 0.11510368456150322, 0.06937880313491118, 0.034281880142083665, 0.027758080826531528, 0.04026574379257741, 0.12721611848308023, 0.05035264212752155, 0.00943380887982026, 0.006437069026879683, 0.029899271519669535, 0.017554139764038856, 0.03954420388272606, 0.024680221586328432, 0.07520312013603903, 0.034678670105649734, 0.018621148701579493, 0.08345107238281346, 0.08160454300090547, 0.03300200603474823, 0.004029232846494812, 0.08278725749521143, 0.1042502719785221, 0.04530140830201945, 0.046657076910796014, 0.12822572047237069, 0.349149088834652, 0.3593361004922634, 0.39745230266358733, 0.39798530244235353, 0.35522499502787974, 0.35901374650858187, 0.3574803253852583, 0.39644454426311004, 0.35360986447777687, 0.09091402452953312, 0.09878698104011618, 0.08600304239447087, 0.06862295589333678, 0.12637809141089906, 0.09041377159027775, 0.09785301853147632, 0.0731038388551869, 0.07667832339608727, 0.15782565779645574, 0.2879828859282949, 0.14311834904493959, 0.17283525134066202, 0.13327289572200585, 0.22857851898004233, 0.16137613032157916, 0.2674354571239532, 0.17183072852790593, 0.20595652695884525, 0.21437239185320534, 0.2968086781009108, 0.25691935258126275, 0.2536961297165672, 0.23607729704291736, 0.2623821089594881, 0.3060644473418651, 0.30201451400354695, 0.1756184526112483, 0.19969087303693178, 0.2229512329678064, 0.18254770898522799, 0.15468392762510352, 0.18863005791608, 0.16647694486441067, 0.21585907409263405, 0.26415490315165, 0.1602974605410039, 0.17678309754221155, 0.1925488549577743, 0.1730662098122615, 0.17669917125875423, 0.17955304212759238, 0.18672818295009574, 0.19104250272721035, 0.18822856689949163, 0.16141308654745012, 0.19072986753260213, 0.1861069096286968, 0.18564900055249756, 0.20739660443686592, 0.19228586074036647, 0.16452177433309045, 0.17233822575424496, 0.17881175135277005, 0.17736818053793246, 0.1617403229516451, 0.1491141195154292, 0.5654906924284897, 0.19236768982694896, 0.39447153468052887, 0.15300365988573872, 0.16088989026559264, 0.5682339822799077, 0.22765785552742646, 0.16284572801854624, 0.26925070951291685, 0.1903083271922299, 0.36487978599602633, 0.17926000008010456, 0.20531440879434915, 0.27658537820095275, 0.20282090001949504, 0.18837995976346034, 0.1869121120472721, 0.1881227187827339, 0.186038037618513, 0.18930808109634656, 0.1759109585024382, 0.19471273037644565, 0.17124592435045694, 0.19770569531082471, 0.07493876489850149, 0.07767819438639922, 0.07729596051198628, 0.07110079488082721, 0.07342420522621163, 0.0784027112290645, 0.0683631776915612, 0.06722656944944505, 0.06250607281158027]}, "mutation_prompt": null}
