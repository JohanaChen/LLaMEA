{"id": "d33891dc-d20f-4d6c-a3e5-9f1d4af2af8c", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.velocity = np.random.uniform(-1.0, 1.0, (self.population_size, dim))\n        self.best_positions = np.copy(self.population)\n        self.best_fitness = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_fitness = np.inf\n        self.eval_count = 0\n    \n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                if self.eval_count >= self.budget:\n                    break\n                # Evaluate fitness\n                if self.fitness[i] == np.inf:\n                    self.fitness[i] = func(self.population[i])\n                    self.eval_count += 1\n\n                # Update personal best\n                if self.fitness[i] < self.best_fitness[i]:\n                    self.best_fitness[i] = self.fitness[i]\n                    self.best_positions[i] = self.population[i].copy()\n\n                # Update global best\n                if self.fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = self.fitness[i]\n                    self.global_best_position = self.population[i].copy()\n\n            # Hybrid DE/PSO update\n            for i in range(self.population_size):\n                if self.eval_count >= self.budget:\n                    break\n\n                # Differential Evolution (DE)\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant_vector = a + 0.8 * (b - c)\n                mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < 0.8, mutant_vector, self.population[i])\n                trial_fitness = func(trial_vector)\n                self.eval_count += 1\n\n                # Selection\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n\n                # Update personal and global bests\n                if self.fitness[i] < self.best_fitness[i]:\n                    self.best_fitness[i] = self.fitness[i]\n                    self.best_positions[i] = self.population[i].copy()\n\n                if self.fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = self.fitness[i]\n                    self.global_best_position = self.population[i].copy()\n\n            # Particle Swarm Optimization (PSO)\n            for i in range(self.population_size):\n                if self.eval_count >= self.budget:\n                    break\n\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                inertia_weight = 0.5 + np.random.rand() / 2\n\n                # Update velocity\n                self.velocity[i] = (inertia_weight * self.velocity[i] +\n                                    2.0 * r1 * (self.best_positions[i] - self.population[i]) +\n                                    2.0 * r2 * (self.global_best_position - self.population[i]))\n                \n                # Update position\n                self.population[i] += self.velocity[i]\n                self.population[i] = np.clip(self.population[i], -5.0, 5.0)\n\n                # Evaluate new position\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n                # Update personal and global bests\n                if self.fitness[i] < self.best_fitness[i]:\n                    self.best_fitness[i] = self.fitness[i]\n                    self.best_positions[i] = self.population[i].copy()\n\n                if self.fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = self.fitness[i]\n                    self.global_best_position = self.population[i].copy()\n\n        return self.global_best_position, self.global_best_fitness", "name": "HybridDEPSO", "description": "A hybrid Differential Evolution and Particle Swarm Optimization algorithm with adaptive parameter tuning for robust performance across diverse optimization landscapes.", "configspace": "", "generation": 0, "fitness": 0.16556389297794466, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.3675427481835193, 0.39319095465388954, 0.37240870574191576, 0.40152079245514005, 0.34467390498446426, 0.41187978843251205, 0.36241312766185385, 0.3599095070406685, 0.40406966160553726, 0.014236153744287772, 0.03458802935980676, 0.019874409595193487, 0.012829425488754764, 0.00964477170043343, 0.023906176334811402, 0.00682685154510998, 0.011356958949267804, 0.036144683907693764, 0.07165046174053513, 0.08041322519005556, 0.07031381248119506, 0.06805043891959106, 0.086930248436488, 0.09961508189489232, 0.07088756279301267, 0.07770688343154364, 0.07809657866884734, 0.04536495900363824, 0.05724869968421076, 0.08778960520209089, 0.05094377502823988, 0.06684349516764432, 0.0448391607965124, 0.06396782871128048, 0.04661868117163015, 0.05271221667314463, 0.9810284311662627, 0.981583662919895, 0.9810582331499813, 0.9809662238335329, 0.9811724502353181, 0.9817170168170462, 0.9821444429321463, 0.9804912445574541, 0.9814123239990518, 0.13970029482882396, 0.11209956263431609, 0.11338411026244088, 0.10284124618181634, 0.11616827182140099, 0.11055300829239045, 0.18776230223075652, 0.13125222390450175, 0.17791247275034117, 0.1362308987440931, 0.1946247006444526, 0.19447425579796407, 0.23531929562458176, 0.17306858637930111, 0.16643368574859474, 0.1435705665765976, 0.16669428214268722, 0.1605801846439081, 0.10685674531091793, 0.10258305285534064, 0.10480675522899507, 0.09300337161050065, 0.09513581621736178, 0.07227543372327205, 0.08922493685737432, 0.11648641758505363, 0.09665979131707358, 0.12309461527773113, 0.0771829644210078, 0.09989950045636564, 0.15128889922497146, 0.1090603188494379, 0.1299387633370236, 0.06375651234882607, 0.09282396333390575, 0.08753526892691843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03445721277330227, 0.04857666798290372, 0.05339835970398654, 0.04735816072344623, 0.04310233794309226, 0.009274774208505865, 0.05072987594323353, 0.029452552685405697, 0.031144742552957516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002896600879085387, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05262090263736685, 0.04709176723458497, 0.045083800973566235, 0.026720802548811706, 0.04094260756685564, 0.05033510036226818, 0.04382373021867003, 0.058661979931760255, 0.06381041787025588, 0.30693003662932905, 0.3292040895038686, 0.3092858763953944, 0.3291180280609186, 0.34159949330913075, 0.3121167752621592, 0.32590713208670474, 0.3130006478585867, 0.31959221244595715, 0.06962315716284118, 0.08513691665994227, 0.05739354089004012, 0.06643076271531101, 0.0622943918888188, 0.05802887543648305, 0.07026905688973784, 0.06132755269074819, 0.0729761751097312, 0.15296043758236377, 0.14776602744999923, 0.1386144734109388, 0.1459487371295407, 0.17979308151369477, 0.14636586410258912, 0.1981413470101534, 0.123369063531519, 0.16841043477967055, 0.239658183649054, 0.2053923403047645, 0.20579361538852703, 0.18369734850641206, 0.19369203241049804, 0.22824788909351212, 0.24191389812562614, 0.22019794118695013, 0.22234422879994342, 0.1651456034254425, 0.14603819359788195, 0.14303750680591842, 0.1310962972159525, 0.14287769500688086, 0.11320891767832852, 0.1872202872284241, 0.18755216300586341, 0.11940672336505864, 0.15711569299973593, 0.18129865855618343, 0.16693591643635786, 0.1725481500037076, 0.17687926149561295, 0.16477126945653997, 0.18123306190262434, 0.18401708643118575, 0.14654862077320285, 0.16477807516712184, 0.1594774383112706, 0.18431923484209833, 0.17509899860181866, 0.18608241233711176, 0.16150473251897968, 0.1729975847098929, 0.18293116060879544, 0.18747407530177695, 0.160138222343008, 0.288260390813432, 0.15332442041863992, 0.13908535357508767, 0.1996621198158628, 0.1688377469297977, 0.1379390435286315, 0.1662598715491307, 0.2541859360052189, 0.1725198181572306, 0.19726460941150747, 0.15785119621435173, 0.18280751462371414, 0.16344751265691904, 0.15966223796505852, 0.20492798668841483, 0.200741150673868, 0.1840983935940752, 0.17391032304384246, 0.21383018613071303, 0.18859906294412931, 0.1817803295292385, 0.18737959077797772, 0.17377811438476198, 0.18178223737654997, 0.1812524584366464, 0.18437830622730378, 0.056562871820913796, 0.08493328093080021, 0.055913543631508356, 0.054476892755375816, 0.06018525875344127, 0.05601236333667836, 0.05301587861908175, 0.05617321229924055, 0.06124503848864793]}, "mutation_prompt": null}
{"id": "0322b126-19da-4bd1-b344-e2b695ea8724", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.velocity = np.random.uniform(-1.0, 1.0, (self.population_size, dim))\n        self.best_positions = np.copy(self.population)\n        self.best_fitness = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_fitness = np.inf\n        self.eval_count = 0\n    \n    def __call__(self, func):\n        initial_crossover_rate = 0.8\n        initial_inertia_weight = 0.5\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                if self.eval_count >= self.budget:\n                    break\n                # Evaluate fitness\n                if self.fitness[i] == np.inf:\n                    self.fitness[i] = func(self.population[i])\n                    self.eval_count += 1\n\n                # Update personal best\n                if self.fitness[i] < self.best_fitness[i]:\n                    self.best_fitness[i] = self.fitness[i]\n                    self.best_positions[i] = self.population[i].copy()\n\n                # Update global best\n                if self.fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = self.fitness[i]\n                    self.global_best_position = self.population[i].copy()\n\n            # Hybrid DE/PSO update\n            for i in range(self.population_size):\n                if self.eval_count >= self.budget:\n                    break\n\n                # Differential Evolution (DE)\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant_vector = a + 0.8 * (b - c)\n                mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n\n                # Dynamic Crossover\n                crossover_rate = initial_crossover_rate + (1.0 - initial_crossover_rate) * (self.eval_count / self.budget)\n                trial_vector = np.where(np.random.rand(self.dim) < crossover_rate, mutant_vector, self.population[i])\n                trial_fitness = func(trial_vector)\n                self.eval_count += 1\n\n                # Selection\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n\n                # Update personal and global bests\n                if self.fitness[i] < self.best_fitness[i]:\n                    self.best_fitness[i] = self.fitness[i]\n                    self.best_positions[i] = self.population[i].copy()\n\n                if self.fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = self.fitness[i]\n                    self.global_best_position = self.population[i].copy()\n\n            # Particle Swarm Optimization (PSO)\n            for i in range(self.population_size):\n                if self.eval_count >= self.budget:\n                    break\n\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Dynamic Inertia Weight\n                inertia_weight = initial_inertia_weight + (1.0 - initial_inertia_weight) * (self.eval_count / self.budget)\n\n                # Update velocity\n                self.velocity[i] = (inertia_weight * self.velocity[i] +\n                                    2.0 * r1 * (self.best_positions[i] - self.population[i]) +\n                                    2.0 * r2 * (self.global_best_position - self.population[i]))\n                \n                # Update position\n                self.population[i] += self.velocity[i]\n                self.population[i] = np.clip(self.population[i], -5.0, 5.0)\n\n                # Evaluate new position\n                self.fitness[i] = func(self.population[i])\n                self.eval_count += 1\n\n                # Update personal and global bests\n                if self.fitness[i] < self.best_fitness[i]:\n                    self.best_fitness[i] = self.fitness[i]\n                    self.best_positions[i] = self.population[i].copy()\n\n                if self.fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = self.fitness[i]\n                    self.global_best_position = self.population[i].copy()\n\n        return self.global_best_position, self.global_best_fitness", "name": "HybridDEPSO", "description": "Enhanced the DE/PSO hybrid algorithm by introducing dynamic tuning for crossover rate and inertia weight to adaptively refine exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": 0.19007069141672378, "feedback": "", "error": "", "parent_id": "d33891dc-d20f-4d6c-a3e5-9f1d4af2af8c", "metadata": {"aucs": [0.5459261974021024, 0.4574238436637952, 0.5097849419479668, 0.5083293697143101, 0.5176067891063726, 0.4873745438368742, 0.5624855926906889, 0.5030707034843274, 0.4065993091331913, 0.1329892535664441, 0.034931551506039105, 0.16290501681564307, 0.08896430164956759, 0.14101108391839956, 0.054017138925849806, 0.004069741136860094, 0.014370553499843841, 0.010372953042912414, 0.08504805565281626, 0.08183359744645591, 0.08552338788360536, 0.07108817870432504, 0.07561580217555841, 0.0894569053893085, 0.09414627932931197, 0.06565130219398885, 0.10214794133172633, 0.07589635132517691, 0.07561702067444898, 0.07951038685539824, 0.07757266990462575, 0.06395796251571606, 0.0841196171900348, 0.061156738849055925, 0.07600565383591651, 0.08487577014656256, 0.9818967050573079, 0.9887962582225996, 0.9817839722601563, 0.9808969267004476, 0.9883129031634049, 0.9806529628729702, 0.9805662979479572, 0.9820078494154053, 0.9870371219322001, 0.12424240198960146, 0.16823347580873138, 0.10355827997233513, 0.14458957299339725, 0.13846000468500153, 0.13011561933708238, 0.20090444830262388, 0.16388797963556023, 0.192580413430805, 0.2192791869935884, 0.16670436310080572, 0.19417352464778426, 0.20111502967027772, 0.18990575273495147, 0.19013011769671306, 0.289527599498273, 0.1361165499235536, 0.2559618265286526, 0.1375634157387724, 0.16415359385161388, 0.13680920746640235, 0.07097616771961512, 0.15766025252539095, 0.11959385379139054, 0.14852281385662447, 0.09240503694842084, 0.12707773906395337, 0.14364528860113457, 0.13241149650630613, 0.09701653692197909, 0.14637872706770017, 0.12957843771839794, 0.11747913409124355, 0.1515243351971971, 0.14427040325564833, 0.13948138843203728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007344441756324871, 9.999999999998899e-05, 9.999999999998899e-05, 0.00041662780694751156, 9.999999999998899e-05, 9.999999999998899e-05, 0.04344873865751342, 0.030851810495876264, 0.06385266986665061, 0.05345017877756231, 0.0690070184396947, 0.011518742979291119, 0.05283804750745491, 0.0704893942409921, 0.032843456568627305, 9.999999999998899e-05, 0.019832610736101874, 0.00021838435963750236, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014889064103747796, 9.999999999998899e-05, 9.999999999998899e-05, 0.13535801017053095, 0.03430263696009006, 0.12840649680792082, 0.09585599254064359, 0.07234041685316372, 0.11022983757742733, 0.0699446353764468, 0.1276839693454811, 0.07401660184307746, 0.413726993627917, 0.3947663643587711, 0.40587309201596733, 0.3834994170282894, 0.4353985421059724, 0.3677373260120479, 0.3752266843306391, 0.4126862445035955, 0.35827465769510625, 0.0796452136542719, 0.09829609869378197, 0.08615730360301022, 0.07778150637462955, 0.0978902519478404, 0.07596061674666688, 0.09269151655978825, 0.07261152226201084, 0.06455299576149354, 0.13115425642025513, 0.15949672433862871, 0.154882437664705, 0.14574004987097156, 0.17141478149655975, 0.12122321615541098, 0.17668987175816453, 0.14759663649917243, 0.14877809203880843, 0.26377928245810567, 0.22411053595967145, 0.2528741277667267, 0.21107050235873892, 0.22522385243423748, 0.28057312963643855, 0.26191123487917023, 0.2647335741338058, 0.25122264485560064, 0.19616029962397552, 0.15715837737512994, 0.15815460188810593, 0.1618666292547819, 0.16683100960850095, 0.16313728214844558, 0.20142267407913172, 0.20867363215002055, 0.20295857431780928, 0.1791270250867043, 0.18778453293969366, 0.21142820186442168, 0.1577163717626039, 0.1754028225975406, 0.1716407767844116, 0.1806946017061457, 0.18642051461322418, 0.16213031807688172, 0.17647882671805815, 0.18963047861394622, 0.1731688974180985, 0.19304374921077616, 0.1785152319495834, 0.1947749288649948, 0.1769916255734283, 0.1808985326697885, 0.17616324014086782, 0.16383779684324384, 0.527360883587239, 0.15251026066329454, 0.20393278864474051, 0.19803360919292323, 0.1658833192637561, 0.14038016415341914, 0.159073195890721, 0.20214288058505825, 0.28337837687410183, 0.1690553197290785, 0.16278439711765536, 0.26288838235675793, 0.16630617626841881, 0.16932861203805527, 0.2066944265299463, 0.19797635525125812, 0.16611035845418431, 0.17604169939272618, 0.1758908330335831, 0.18873597177319668, 0.205886491381291, 0.21086818883528324, 0.19134555205356896, 0.17216093366605345, 0.19762663812003955, 0.18248673345451416, 0.061658115769546384, 0.06659304338872973, 0.07540448492163054, 0.052130013316740276, 0.0680996913320634, 0.07031731338325242, 0.06470591307302531, 0.06540874300102228, 0.06872536413573638]}, "mutation_prompt": null}
