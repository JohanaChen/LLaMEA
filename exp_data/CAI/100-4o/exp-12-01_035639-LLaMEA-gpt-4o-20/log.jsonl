{"id": "24a51e2a-cb3c-4713-bdab-7fc5f841ed2a", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particle_count = min(40, 2 * dim)\n        self.w = 0.5  # inertia weight\n        self.c1 = 2.0  # cognitive (particle) weight\n        self.c2 = 2.0  # social (swarm) weight\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lb, self.ub, (self.particle_count, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.particle_count, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([func(p) for p in particles])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.particle_count\n        annealing_factor = 0.95\n\n        while evaluations < self.budget:\n            for i in range(self.particle_count):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (\n                    self.w * velocities[i]\n                    + self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                    + self.c2 * r2 * (global_best_position - particles[i])\n                )\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lb, self.ub)\n\n                current_score = func(particles[i])\n                evaluations += 1\n\n                if current_score < personal_best_scores[i]:\n                    personal_best_scores[i] = current_score\n                    personal_best_positions[i] = particles[i].copy()\n\n                if current_score < global_best_score:\n                    global_best_score = current_score\n                    global_best_position = particles[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            # Simulated annealing on velocity to focus search\n            self.w *= annealing_factor\n\n        return global_best_position, global_best_score", "name": "AdaptivePSO", "description": "Adaptive Particle Swarm Optimization with Dimensional Annealing to dynamically focus on promising areas and gradually increase search precision.", "configspace": "", "generation": 0, "fitness": 0.23316715411545116, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.9646046493910505, 0.9702858541867727, 0.9691804898807818, 0.16133765820349888, 0.161494545675822, 0.19102725045993751, 0.18377237786004774, 0.9729044488588735, 0.9696913037745961, 0.9462989563734853, 9.999999999998899e-05, 0.9334211779919862, 0.9290013236569672, 0.9085144512307606, 0.9472223116885484, 0.06324280235703195, 0.9321488306913097, 9.999999999998899e-05, 0.16408548385744615, 0.4723671236046706, 0.05723994260728449, 0.04298692527197967, 0.08041856361884059, 0.07375807995483574, 0.5482623635456962, 0.05376938225925987, 0.14108250098009634, 0.04880547900271126, 0.12360010108269848, 0.09820025253170228, 0.14862017893429513, 0.14286734299578308, 0.15702316082039436, 0.08100007288985311, 0.14727744506927354, 0.11083534438021125, 0.996460200763633, 0.996690919788301, 0.9975746881819118, 0.995839048112274, 0.09994350712206579, 0.9980901687299897, 0.9906313687284474, 0.9968579580779915, 0.99372877925983, 0.060431395448405256, 0.05591918927440798, 0.05964914591533621, 0.1539137429255263, 0.15086255252484337, 0.36819249677679555, 0.08381465101478103, 0.08967838477115386, 0.08281133912217997, 0.3680822048849718, 0.20792378788436094, 0.23048939954906056, 0.21543977316115093, 0.06791767206506427, 0.22137496961494318, 0.0681809800303328, 0.030071487848403744, 0.23687993471033575, 0.26409202392619346, 0.1566729115095975, 0.17043840864435156, 9.999999999998899e-05, 9.999999999998899e-05, 0.08798027579344248, 0.17881220766731099, 0.1323550536053133, 0.17066441048545733, 0.13540511060065896, 0.022739060796649557, 0.13164037909081594, 0.14829730757571546, 0.13216302368762722, 0.193408127021509, 0.1991262321160241, 0.1442614142159495, 0.1346181268477612, 9.999999999998899e-05, 9.999999999998899e-05, 0.00920924779440735, 9.999999999998899e-05, 0.024730385260140375, 0.008451078329124728, 0.007520639794992734, 9.999999999998899e-05, 9.999999999998899e-05, 0.06794247750026572, 0.027617958213817073, 0.06286870789637633, 0.0917022009600974, 9.999999999998899e-05, 9.999999999998899e-05, 0.04225173910963531, 0.06068121811840066, 0.060054430606137243, 0.05530029663292302, 0.175046731498824, 0.06862008091144867, 0.1118690091158826, 0.08804221726077921, 0.1068671726437509, 0.11258627621312267, 0.11048713372975472, 0.0815223541159994, 0.07285418285687317, 0.011053761584902344, 0.04570884438333156, 9.999999999998899e-05, 0.007036544967876535, 0.006728185963819855, 0.0506307062114465, 0.08740167866308735, 0.08728186907425661, 0.5612066474399584, 0.5179598749744379, 0.535532584124149, 0.5078122747514742, 0.2097649033943112, 0.20989729585530825, 0.5418353295889198, 0.5570337497029793, 0.6537888093110493, 0.09027420283295595, 0.04244716200676302, 0.06465911529300905, 0.07852159744493326, 0.042558942309791736, 0.13071017755742942, 0.07863187078369815, 0.06537055618748999, 0.08442855429853935, 0.19045295061384526, 0.2006331556387696, 0.1582548877567539, 0.23091280580519458, 0.16946412790972354, 0.15692120435045875, 0.26453509958845445, 0.16358137791866978, 0.19655413860323956, 0.3404559764007692, 0.20935842808208704, 0.26480894326468485, 0.3040814945397826, 0.19463876552012016, 0.3474942857230191, 0.18671159004184623, 0.26326074840753455, 0.39402284841920887, 0.24485117444132953, 0.20108585702203718, 0.14790825205603564, 0.27327684117504214, 0.20510842696122922, 0.29812373477118914, 0.20927446534603367, 0.11619331930643162, 0.21715493460170132, 0.22530629840013394, 0.18960497689836453, 0.2058400272591252, 0.2057040172148048, 0.1438246641052987, 0.2001553673339994, 0.24421157399430127, 0.2050687744316524, 0.2357810527650217, 0.18621349094265993, 0.22927891165250147, 0.21582371781915577, 0.18607357478603048, 0.23320339527455536, 0.19569183306554416, 0.19121329427163059, 0.20840278800157475, 0.18352198317268542, 0.8339378335158558, 0.2139890134423985, 0.13369836982794436, 0.17397964989447223, 0.2027346691005517, 0.1321054138437121, 0.1513898053185876, 0.15206694902521267, 0.16597906880495683, 0.4009497601851457, 0.10917788024568686, 0.39395239915023716, 0.26837766789705253, 0.21463190330748616, 0.214937519455759, 0.09479522913491123, 0.11374800219742798, 0.30258443105501553, 0.18002307356548697, 0.17400256667785907, 0.20189741508886783, 0.1978040910606509, 0.19379536649179352, 0.18359217310746823, 0.18617573095309947, 0.1889228231922233, 0.18047651160099953, 0.05150619415899693, 0.04663904123218432, 0.07095090459411968, 0.07972956346329607, 0.11375703221363687, 0.07495410120769297, 0.12665946629209124, 0.07944738356515468, 0.09452393658713776]}, "mutation_prompt": null}
{"id": "55ff807c-0a5a-41ce-b92d-1fde0cdf88d1", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.particle_count = min(40, 2 * dim)\n        self.w = 0.5  # inertia weight\n        self.c1 = 2.0  # cognitive (particle) weight\n        self.c2 = 2.0  # social (swarm) weight\n        self.local_search_prob = 0.1  # Probability of local search\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lb, self.ub, (self.particle_count, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.particle_count, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([func(p) for p in particles])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.particle_count\n        annealing_factor = 0.95\n\n        while evaluations < self.budget:\n            for i in range(self.particle_count):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (\n                    self.w * velocities[i]\n                    + self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                    + self.c2 * r2 * (global_best_position - particles[i])\n                )\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lb, self.ub)\n\n                current_score = func(particles[i])\n                evaluations += 1\n\n                if current_score < personal_best_scores[i]:\n                    personal_best_scores[i] = current_score\n                    personal_best_positions[i] = particles[i].copy()\n\n                if current_score < global_best_score:\n                    global_best_score = current_score\n                    global_best_position = particles[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n                # Local search boost\n                if np.random.rand() < self.local_search_prob:\n                    step = np.random.uniform(-0.1, 0.1, self.dim)\n                    local_position = particles[i] + step\n                    local_position = np.clip(local_position, self.lb, self.ub)\n                    local_score = func(local_position)\n                    evaluations += 1\n                    if local_score < current_score:\n                        particles[i] = local_position\n                        current_score = local_score\n\n            # Simulated annealing on velocity to focus search\n            self.w *= annealing_factor\n\n        return global_best_position, global_best_score", "name": "AdaptivePSO", "description": "Enhanced Adaptive PSO with Local Search Boost to improve convergence by incorporating a gradient-like local search step.", "configspace": "", "generation": 1, "fitness": 0.24594056196031694, "feedback": "", "error": "", "parent_id": "24a51e2a-cb3c-4713-bdab-7fc5f841ed2a", "metadata": {"aucs": [0.9626853784598792, 0.9182899805990938, 0.9697801695411808, 0.9522606664291469, 0.9351706417857597, 0.9331117709622392, 0.9706374753346557, 0.9740335563231318, 0.9720129039454485, 0.036045964497769645, 9.999999999998899e-05, 0.9135864267528151, 9.999999999998899e-05, 0.9287246356378538, 9.999999999998899e-05, 0.007218573674907192, 0.9098170080136208, 9.999999999998899e-05, 0.1865896154898009, 0.12417137077762219, 0.6563058920009667, 0.18612916642308186, 0.16946686935301036, 0.0418192298801614, 0.10960944585839716, 0.05189151130685621, 0.16605760881969345, 0.14735267953106124, 0.09126896634708515, 0.17330031158047132, 0.11802226838625318, 0.11160807374657888, 0.04994505437691332, 0.1119686813525077, 0.12049219745911666, 0.1464823667747185, 0.992756651468854, 0.9942188011375387, 0.9960647528443028, 0.9972424846738767, 0.9968391681401307, 0.9969165818648431, 0.7674464310686202, 0.9964349747912765, 0.42117899896308664, 0.3498254721393713, 0.23956827828011285, 0.5104483093835832, 0.15726074348986707, 0.15694797288139084, 0.15562444476344794, 0.4971968986888422, 0.40578913265167615, 0.3814149460359916, 0.20435525413928435, 0.17595583270870974, 0.33221600123277784, 0.19608186948824258, 0.19357954615053963, 0.11787172615719921, 0.1693459743427198, 0.17449248695336106, 0.06607388393939195, 0.13262788157278882, 9.999999999998899e-05, 0.1705034736382951, 0.17046692811221398, 0.10467689803787994, 0.12765931750502169, 0.1754641941255699, 0.16845651392715644, 0.14519158447027114, 0.17819176334371545, 0.09272521694122338, 0.17057578861493516, 0.286058103534789, 0.13649363935301229, 0.1678113808480044, 0.17703763940309614, 9.999999999998899e-05, 0.18087722773616, 0.003808309708168034, 9.999999999998899e-05, 9.999999999998899e-05, 0.06606029031801808, 0.004107760242310188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03555067389643696, 0.030065443611208553, 0.08186336711882725, 0.08668658555710318, 0.0001331376052581268, 0.0036677672287778185, 0.08419146036278491, 0.06718120808296246, 0.024905912325243973, 0.2259191097251244, 0.03683924629917912, 0.05499328637330003, 0.202639432324622, 0.1260544989773309, 0.09933442027675154, 0.08202943150267583, 0.07975867888643462, 0.2185355659350504, 0.045359480273220454, 0.04455247389414474, 0.0463051209948484, 0.07562928697160443, 0.01692916043197168, 0.07522268569867196, 0.08693279282929811, 0.16728655119612446, 0.08701438440629738, 0.631882779481769, 0.5489688699238587, 0.5005110863631389, 0.518684706570375, 0.4527327845407574, 0.49119843570164434, 0.5478700163906124, 0.5385843279208417, 0.5525947724012724, 0.166463477409446, 0.05591188165439687, 0.09486218022275739, 0.1474891566937353, 0.08176385776973405, 0.09792507627412961, 0.09345758985842656, 0.08939522624614671, 0.08151642469104003, 0.16284114808582084, 0.2476433733659884, 0.19806323278789795, 0.18570814263246926, 0.14546792731157931, 0.16557743644768164, 0.167070476145893, 0.19884447324165444, 0.2727199679677339, 0.2475431474422316, 0.16951921937268633, 0.23307543891154314, 0.210393162216574, 0.23374787729107072, 0.3188496911859242, 0.3216242277687982, 0.38989141463381605, 0.2214801240991796, 0.21896758712445463, 0.321055568510072, 0.19633895406677515, 0.20515945535367586, 0.10974178909933385, 0.16609384995891519, 0.2795822833998597, 0.12603248018751656, 0.35681643998703527, 0.23862187175849225, 0.14316728195063966, 0.1977141309823094, 0.20348213008966054, 0.14806315300406292, 0.19588098760186945, 0.23150765127897655, 0.22930083539005008, 0.25416878687386457, 0.20596076010364717, 0.20027842488099135, 0.25061033421827295, 0.19990029919808772, 0.24823678131987592, 0.20153445989660512, 0.1871787577080024, 0.20061623614345703, 0.25780968484368894, 0.16908276329703353, 0.1590065433441632, 0.17260908021501054, 0.17385147613557161, 0.20186043994268998, 0.3842186212963784, 0.14856012221054882, 0.11505825383674328, 0.1682597052581445, 0.08345207920409536, 0.11323597423295884, 0.25866469823088845, 0.08304095906437925, 0.35775644490315905, 0.20863348300936868, 0.16897978333299357, 0.15628177689115996, 0.3266120598709741, 0.19036709420904707, 0.1864749555532842, 0.19061208916164663, 0.19243435999927572, 0.17492886501320648, 0.21094447800613547, 0.177314299467765, 0.19613540558000297, 0.18817791484787794, 0.09686678886374178, 0.06391230607956444, 0.09496782492747002, 0.10050322112453192, 0.09886387958710019, 0.0853171565159091, 0.0854308164923776, 0.07348350447121155, 0.07698889928051345]}, "mutation_prompt": null}
