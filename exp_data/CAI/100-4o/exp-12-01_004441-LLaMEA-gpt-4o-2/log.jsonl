{"id": "80bf2323-729a-4549-a9cd-25e2f211ab40", "solution": "import numpy as np\n\nclass AdaptiveQuantumEvolutionary:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evaluations = 0\n\n        def quantum_rotation_gate(x, best, worst, iter_max, iter_curr):\n            alpha = np.pi * (1 - iter_curr / iter_max)\n            new_x = x + np.sin(alpha) * (best - worst)\n            return np.clip(new_x, self.lower_bound, self.upper_bound)\n\n        max_iterations = self.budget // self.population_size\n        F = 0.5  # Differential evolution scaling factor\n        CR = 0.7  # Crossover probability\n\n        for iteration in range(max_iterations):\n            fitness = np.array([func(ind) for ind in self.population])\n            evaluations += self.population_size\n\n            if evaluations >= self.budget:\n                break\n\n            best_idx = np.argmin(fitness)\n            worst_idx = np.argmax(fitness)\n\n            if fitness[best_idx] < self.best_fitness:\n                self.best_fitness = fitness[best_idx]\n                self.best_solution = self.population[best_idx].copy()\n\n            new_population = []\n\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n\n                mutant_vector = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < CR, mutant_vector, self.population[i])\n\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    new_population.append(trial_vector)\n                else:\n                    new_population.append(self.population[i])\n\n                if evaluations >= self.budget:\n                    break\n\n            self.population = np.array(new_population)\n\n            # Apply quantum rotation gate for better exploration\n            self.population = np.array([\n                quantum_rotation_gate(ind, self.population[best_idx], self.population[worst_idx], max_iterations, iteration)\n                for ind in self.population\n            ])\n\n        return self.best_solution", "name": "AdaptiveQuantumEvolutionary", "description": "Adaptive Quantum-Inspired Evolutionary Algorithm combining quantum rotation gates and differential evolution for dynamic exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.1909207940058484, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.47728487831715993, 0.4634361995017471, 0.4553458725407028, 0.4650545481031788, 0.46190436238765054, 0.4504636253160733, 0.44276307832136375, 0.468393253819381, 0.4548037452352386, 0.10456341705229844, 0.14657692910970832, 0.1428436359783083, 0.13487944360330306, 0.12986501961707708, 0.0944129519499689, 0.16097688725414971, 0.16966865101708595, 0.15719135626743685, 0.09448677437443309, 0.09677726551337962, 0.10392340938680955, 0.09362900759148929, 0.08890061284667494, 0.08934755571528641, 0.09445995202170376, 0.08285563662262085, 0.08808178937414268, 0.08545380853879447, 0.08618204270103647, 0.08339579961346466, 0.0748597838593481, 0.0845393151018552, 0.07616451662276613, 0.08636302194814272, 0.0741457379892636, 0.08316182439052844, 0.9048651509101153, 0.9106916896083239, 0.9355795161842928, 0.8844983190131056, 0.9004763856082718, 0.92115720457553, 0.9092433453530534, 0.9187410451131225, 0.9293071134569154, 0.1920993588213603, 0.17888107749922255, 0.16932642291148137, 0.17963567836327288, 0.1615036515211905, 0.18803361458265166, 0.11467139461333187, 0.1947650359013765, 0.14997815425051508, 0.19648602105216606, 0.1900335045827375, 0.19323975504834845, 0.22523821443845793, 0.23269448408205362, 0.25226429628191704, 0.23856643179070347, 0.22421883865208214, 0.20244616063957188, 0.12174168188972467, 0.13028118158973845, 0.13231503868816163, 0.13390997527924864, 0.11702588136578873, 0.1186857948411647, 0.12439640230141336, 0.1223380165725706, 0.1398211614512429, 0.08714653246590365, 0.11127585802627304, 0.11917722803938091, 0.1376093659464186, 0.1098270747125698, 0.1321897064539138, 0.10562292653831118, 0.09657958268773092, 0.10202013534998755, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06974114142886356, 0.08391111311745902, 0.07393988651062677, 0.09834014184956619, 0.04679246940783033, 0.08287617249186519, 0.11412907663493987, 0.06702360901530213, 0.09512674280797895, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014853249994268847, 9.999999999998899e-05, 9.999999999998899e-05, 0.011931026972224257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0752851561740574, 0.05608524136607507, 0.07717325266656772, 0.09072210023041993, 0.07271186984994182, 0.07177028243346883, 0.04010824581842665, 0.09269571557459677, 0.07785970587715751, 0.38346778938955484, 0.37128464078708756, 0.38114057499938003, 0.36575731954737634, 0.38235109347448537, 0.357789149806398, 0.36500075117311337, 0.34703734934264563, 0.3643623799238749, 0.11971161779773842, 0.09906673282967482, 0.09531364803927067, 0.10639367957289703, 0.08481149057964499, 0.08921434539013884, 0.0873495446567486, 0.08091179715558205, 0.09806692145136053, 0.1404087565803659, 0.15057366798924432, 0.14990898583491363, 0.2033638800280977, 0.1549425444292537, 0.14161127315058386, 0.1519978465659988, 0.2164136516801074, 0.14686146870445516, 0.22403763752640504, 0.22283188942427423, 0.24356338605292627, 0.22279761839198708, 0.24638806225508836, 0.21053856074716482, 0.2338400190472335, 0.2532285841540679, 0.24274564252552489, 0.15200305540058157, 0.17391807517437285, 0.18178593794446696, 0.14379335694551887, 0.14428637452371185, 0.14030022165269618, 0.17000920265202435, 0.1943992641655965, 0.19043989599149358, 0.18601837544579802, 0.1848063678739581, 0.18644724462935514, 0.19129917240308858, 0.20159045949704746, 0.1874417611838528, 0.23020621894407323, 0.1916586748239696, 0.17483759595206305, 0.17229527741286332, 0.1678893985928548, 0.17100958483443085, 0.1813547730802868, 0.1731795202341263, 0.1817978249795582, 0.175838035195916, 0.17924425932041577, 0.18439621853629284, 0.5084947054011688, 0.4337536314259909, 0.18529435272712413, 0.3757151240276091, 0.29517525819491974, 0.19772331021746425, 0.14917938159973365, 0.16661175412133977, 0.22412774734432028, 0.19735367965735284, 0.1581848850508224, 0.1602456590702468, 0.17455070368604975, 0.15425759139782547, 0.2200854928004201, 0.1965455199687699, 0.14851504940251237, 0.20978689484254487, 0.17721252804168253, 0.195639946302002, 0.18753933973714298, 0.1837938041311752, 0.1867024329801764, 0.18252475670109392, 0.19798906965666307, 0.18616333978580424, 0.19776481229472875, 0.07363461814702821, 0.07444220054787765, 0.06992389765764617, 0.06284731804669863, 0.07937226221824711, 0.07357521378569487, 0.07311832586800904, 0.07212032635540622, 0.07252672978979613]}, "mutation_prompt": null}
{"id": "ba6bd501-a1cf-4fb7-afaa-92ece382e207", "solution": "import numpy as np\n\nclass AdaptiveQuantumEvolutionary:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evaluations = 0\n\n        def quantum_rotation_gate(x, best, worst, iter_max, iter_curr):\n            alpha = np.pi * (1 - iter_curr / iter_max)\n            new_x = x + np.sin(alpha) * (best - worst)\n            return np.clip(new_x, self.lower_bound, self.upper_bound)\n\n        max_iterations = self.budget // self.population_size\n        F = 0.5  # Differential evolution scaling factor\n        CR = 0.7  # Crossover probability\n\n        for iteration in range(max_iterations):\n            fitness = np.array([func(ind) for ind in self.population])\n            evaluations += self.population_size\n\n            if evaluations >= self.budget:\n                break\n\n            best_idx = np.argmin(fitness)\n            worst_idx = np.argmax(fitness)\n\n            if fitness[best_idx] < self.best_fitness:\n                self.best_fitness = fitness[best_idx]\n                self.best_solution = self.population[best_idx].copy()\n\n            new_population = []\n\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n\n                mutant_vector = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < CR, mutant_vector, self.population[i])\n\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    new_population.append(trial_vector)\n                else:\n                    new_population.append(self.population[i])\n\n                if evaluations >= self.budget:\n                    break\n\n            self.population = np.array(new_population)\n\n            # Apply quantum rotation gate for better exploration\n            self.population = np.array([\n                quantum_rotation_gate(ind, self.population[best_idx], self.population[worst_idx], max_iterations, iteration)\n                for ind in self.population\n            ])\n\n        return self.best_solution", "name": "AdaptiveQuantumEvolutionary", "description": "Adaptive Quantum-Inspired Evolutionary Algorithm combining quantum rotation gates and differential evolution for dynamic exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "80bf2323-729a-4549-a9cd-25e2f211ab40", "metadata": {"aucs": [0.47728487831715993, 0.4634361995017471, 0.4553458725407028, 0.4650545481031788, 0.46190436238765054, 0.4504636253160733, 0.44276307832136375, 0.468393253819381, 0.4548037452352386, 0.10456341705229844, 0.14657692910970832, 0.1428436359783083, 0.13487944360330306, 0.12986501961707708, 0.0944129519499689, 0.16097688725414971, 0.16966865101708595, 0.15719135626743685, 0.09448677437443309, 0.09677726551337962, 0.10392340938680955, 0.09362900759148929, 0.08890061284667494, 0.08934755571528641, 0.09445995202170376, 0.08285563662262085, 0.08808178937414268, 0.08545380853879447, 0.08618204270103647, 0.08339579961346466, 0.0748597838593481, 0.0845393151018552, 0.07616451662276613, 0.08636302194814272, 0.0741457379892636, 0.08316182439052844, 0.9048651509101153, 0.9106916896083239, 0.9355795161842928, 0.8844983190131056, 0.9004763856082718, 0.92115720457553, 0.9092433453530534, 0.9187410451131225, 0.9293071134569154, 0.1920993588213603, 0.17888107749922255, 0.16932642291148137, 0.17963567836327288, 0.1615036515211905, 0.18803361458265166, 0.11467139461333187, 0.1947650359013765, 0.14997815425051508, 0.19648602105216606, 0.1900335045827375, 0.19323975504834845, 0.22523821443845793, 0.23269448408205362, 0.25226429628191704, 0.23856643179070347, 0.22421883865208214, 0.20244616063957188, 0.12174168188972467, 0.13028118158973845, 0.13231503868816163, 0.13390997527924864, 0.11702588136578873, 0.1186857948411647, 0.12439640230141336, 0.1223380165725706, 0.1398211614512429, 0.08714653246590365, 0.11127585802627304, 0.11917722803938091, 0.1376093659464186, 0.1098270747125698, 0.1321897064539138, 0.10562292653831118, 0.09657958268773092, 0.10202013534998755, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06974114142886356, 0.08391111311745902, 0.07393988651062677, 0.09834014184956619, 0.04679246940783033, 0.08287617249186519, 0.11412907663493987, 0.06702360901530213, 0.09512674280797895, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014853249994268847, 9.999999999998899e-05, 9.999999999998899e-05, 0.011931026972224257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0752851561740574, 0.05608524136607507, 0.07717325266656772, 0.09072210023041993, 0.07271186984994182, 0.07177028243346883, 0.04010824581842665, 0.09269571557459677, 0.07785970587715751, 0.38346778938955484, 0.37128464078708756, 0.38114057499938003, 0.36575731954737634, 0.38235109347448537, 0.357789149806398, 0.36500075117311337, 0.34703734934264563, 0.3643623799238749, 0.11971161779773842, 0.09906673282967482, 0.09531364803927067, 0.10639367957289703, 0.08481149057964499, 0.08921434539013884, 0.0873495446567486, 0.08091179715558205, 0.09806692145136053, 0.1404087565803659, 0.15057366798924432, 0.14990898583491363, 0.2033638800280977, 0.1549425444292537, 0.14161127315058386, 0.1519978465659988, 0.2164136516801074, 0.14686146870445516, 0.22403763752640504, 0.22283188942427423, 0.24356338605292627, 0.22279761839198708, 0.24638806225508836, 0.21053856074716482, 0.2338400190472335, 0.2532285841540679, 0.24274564252552489, 0.15200305540058157, 0.17391807517437285, 0.18178593794446696, 0.14379335694551887, 0.14428637452371185, 0.14030022165269618, 0.17000920265202435, 0.1943992641655965, 0.19043989599149358, 0.18601837544579802, 0.1848063678739581, 0.18644724462935514, 0.19129917240308858, 0.20159045949704746, 0.1874417611838528, 0.23020621894407323, 0.1916586748239696, 0.17483759595206305, 0.17229527741286332, 0.1678893985928548, 0.17100958483443085, 0.1813547730802868, 0.1731795202341263, 0.1817978249795582, 0.175838035195916, 0.17924425932041577, 0.18439621853629284, 0.5084947054011688, 0.4337536314259909, 0.18529435272712413, 0.3757151240276091, 0.29517525819491974, 0.19772331021746425, 0.14917938159973365, 0.16661175412133977, 0.22412774734432028, 0.19735367965735284, 0.1581848850508224, 0.1602456590702468, 0.17455070368604975, 0.15425759139782547, 0.2200854928004201, 0.1965455199687699, 0.14851504940251237, 0.20978689484254487, 0.17721252804168253, 0.195639946302002, 0.18753933973714298, 0.1837938041311752, 0.1867024329801764, 0.18252475670109392, 0.19798906965666307, 0.18616333978580424, 0.19776481229472875, 0.07363461814702821, 0.07444220054787765, 0.06992389765764617, 0.06284731804669863, 0.07937226221824711, 0.07357521378569487, 0.07311832586800904, 0.07212032635540622, 0.07252672978979613]}, "mutation_prompt": null}
