{"id": "d1e1e22b-66e1-4e27-b0da-86002f28763b", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = min(40, budget // 2)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.num_particles, float('inf'))\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = float('inf')\n        self.c1 = 2.0  # cognitive component\n        self.c2 = 2.0  # social component\n        self.w_start = 0.9  # starting inertia weight\n        self.w_end = 0.4  # ending inertia weight\n\n    def __call__(self, func):\n        eval_count = 0\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                score = func(self.positions[i])\n                eval_count += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.positions[i]\n\n                if eval_count >= self.budget:\n                    break\n\n            w = self.w_start - ((self.w_start - self.w_end) * eval_count / self.budget)\n\n            for i in range(self.num_particles):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.c1 * r1 * (self.personal_best_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.global_best_position - self.positions[i])\n\n                self.velocities[i] = w * self.velocities[i] + cognitive_velocity + social_velocity\n                self.positions[i] += self.velocities[i] + 0.5 * (np.random.rand(self.dim) - 0.5) * (self.upper_bound - self.lower_bound) * 0.1\n\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Adaptive Particle Swarm Optimization with Dynamic Inertia and Differential Perturbation for Efficient Exploration and Exploitation.", "configspace": "", "generation": 0, "fitness": 0.15983696413324797, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.2877035838859442, 0.28458709866996135, 0.25522636808894894, 0.2865224106353811, 0.2787554627745522, 0.28478712217398894, 0.28705801067117975, 0.29153529365129194, 0.28974943461518154, 9.999999999998899e-05, 0.001667097092664327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07580947616700962, 0.06473431355603754, 0.05264784798549138, 0.07614036752790576, 0.054378526300554064, 0.0828099936089508, 0.0772685310859742, 0.07609381706908758, 0.0840036764218447, 0.04999944512601506, 0.05117405154138799, 0.05825468801554967, 0.06367223652497012, 0.040345185246533966, 0.05285776407834675, 0.05484761782710412, 0.060819669663571996, 0.05678143893896681, 0.9881041546970762, 0.991250873956015, 0.9896152367950051, 0.9817173753063465, 0.9852018530173446, 0.9855200258614616, 0.9892032431486492, 0.9866105208715207, 0.9888508810155124, 0.17013385199786168, 0.1254104442019316, 0.1689166368385695, 0.13920104203859285, 0.18101577859458362, 0.14046076613858094, 0.13046609473657989, 0.13834377028661127, 0.17356411933907057, 0.18627686608717353, 0.18366884846879006, 0.1761135004794302, 0.1869614033914221, 0.2137319458528636, 0.17908124884414278, 0.17445295051119136, 0.15379482731632976, 0.15886072485803615, 0.05140419090075843, 0.06653782437191769, 0.08665778233429211, 0.060824425748250865, 0.07187357168859032, 0.07680391465635805, 0.07665691458407731, 0.035356892409502905, 0.06846513950574262, 0.07359753311657335, 0.07073567048044027, 0.09099999263821812, 0.0988604011938713, 0.07699727744864959, 0.05887228912945197, 0.045751607078380996, 0.041964070822853916, 0.07881427670610375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06567128645602371, 0.029102068008828197, 0.09994955450600351, 0.04143129587830985, 9.999999999998899e-05, 0.021114360143748345, 0.0405119649822373, 0.04942799420682353, 0.022057836186600066, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02255825946187251, 0.011587592008988623, 0.034670167828422915, 0.016308442493241038, 0.03443945956544647, 0.039514158089509865, 0.03292343334264913, 0.026939363771736113, 0.029909163701342778, 0.2767227871250052, 0.29845245372849505, 0.27044808752099647, 0.29373065645486307, 0.2840433609508355, 0.28305148535975855, 0.2567004102494037, 0.2863884437990073, 0.26246877938735635, 0.056366624081485295, 0.057199265317239734, 0.06673228074210513, 0.06812092005422732, 0.0751053000841233, 0.08803403038192759, 0.061834536628598835, 0.07204497382607455, 0.08233730605300493, 0.16398268409849548, 0.14563205020347336, 0.13915755829168208, 0.18280136101122457, 0.15465408419894666, 0.14458826657718948, 0.15023736145385969, 0.18327535527780892, 0.17271887367986893, 0.19873908671761775, 0.18982671417347996, 0.2104789332117999, 0.2120087752369887, 0.18908787832465357, 0.1769931358405905, 0.2069013892994449, 0.24597503474989713, 0.2271737622992751, 0.13795872756422445, 0.1497517920648912, 0.16297606115806662, 0.14002869702893916, 0.14598712376147027, 0.14293473799431833, 0.15814532881794052, 0.1675054911110757, 0.15218162973632865, 0.17774109582952258, 0.15917245550857662, 0.16076813804347823, 0.16072317738330855, 0.13395409445843598, 0.1770344344079564, 0.16355207926282833, 0.17983184060987967, 0.17817731735839348, 0.16364680140813548, 0.16088501390813004, 0.16495600442344827, 0.16624260490967824, 0.1831810805463081, 0.16519040801503448, 0.1673164390030477, 0.14104046949835825, 0.179981352367092, 0.33942846685132044, 0.16049604727993605, 0.14767903746824618, 0.39356016793669246, 0.18781465426192212, 0.16639334323760901, 0.12902020229127809, 0.16194913310179293, 0.3474067718471636, 0.3068183426482157, 0.21149721473850835, 0.23387280569412228, 0.18941922127936095, 0.2690956206304722, 0.14233178281457315, 0.2054991008078355, 0.20162012117705996, 0.3172529247131821, 0.1781526576513628, 0.1756572630019938, 0.19353681508560883, 0.17717406233306743, 0.1750925963418225, 0.19165493331946326, 0.1967957710668491, 0.19216594524376907, 0.1942855479633555, 0.05170192409943741, 0.051360231823976754, 0.06394516679082352, 0.07182219719236205, 0.07032868753956123, 0.05563333285994454, 0.07100027159829059, 0.060808364916446256, 0.06888543356354693]}, "mutation_prompt": null}
{"id": "cdc6f325-830e-466c-8b06-215b0d038624", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = min(40, budget // 2)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.num_particles, float('inf'))\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = float('inf')\n        self.c1 = 2.0  # cognitive component\n        self.c2 = 2.0  # social component\n        self.w_start = 0.9  # starting inertia weight\n        self.w_end = 0.4  # ending inertia weight\n\n    def __call__(self, func):\n        eval_count = 0\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                score = func(self.positions[i])\n                eval_count += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.positions[i]\n\n                if eval_count >= self.budget:\n                    break\n\n            w = self.w_start - ((self.w_start - self.w_end) * eval_count / self.budget)\n\n            for i in range(self.num_particles):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.c1 * r1 * (self.personal_best_positions[i] - self.positions[i])\n                social_velocity = self.c2 * r2 * (self.global_best_position - self.positions[i])\n\n                self.velocities[i] = w * self.velocities[i] + cognitive_velocity + social_velocity\n                self.positions[i] += self.velocities[i] + 0.5 * (np.random.rand(self.dim) - 0.5) * (self.upper_bound - self.lower_bound) * 0.1\n\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Adaptive Particle Swarm Optimization with Dynamic Inertia and Differential Perturbation for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1e1e22b-66e1-4e27-b0da-86002f28763b", "metadata": {"aucs": [0.2877035838859442, 0.28458709866996135, 0.25522636808894894, 0.2865224106353811, 0.2787554627745522, 0.28478712217398894, 0.28705801067117975, 0.29153529365129194, 0.28974943461518154, 9.999999999998899e-05, 0.001667097092664327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07580947616700962, 0.06473431355603754, 0.05264784798549138, 0.07614036752790576, 0.054378526300554064, 0.0828099936089508, 0.0772685310859742, 0.07609381706908758, 0.0840036764218447, 0.04999944512601506, 0.05117405154138799, 0.05825468801554967, 0.06367223652497012, 0.040345185246533966, 0.05285776407834675, 0.05484761782710412, 0.060819669663571996, 0.05678143893896681, 0.9881041546970762, 0.991250873956015, 0.9896152367950051, 0.9817173753063465, 0.9852018530173446, 0.9855200258614616, 0.9892032431486492, 0.9866105208715207, 0.9888508810155124, 0.17013385199786168, 0.1254104442019316, 0.1689166368385695, 0.13920104203859285, 0.18101577859458362, 0.14046076613858094, 0.13046609473657989, 0.13834377028661127, 0.17356411933907057, 0.18627686608717353, 0.18366884846879006, 0.1761135004794302, 0.1869614033914221, 0.2137319458528636, 0.17908124884414278, 0.17445295051119136, 0.15379482731632976, 0.15886072485803615, 0.05140419090075843, 0.06653782437191769, 0.08665778233429211, 0.060824425748250865, 0.07187357168859032, 0.07680391465635805, 0.07665691458407731, 0.035356892409502905, 0.06846513950574262, 0.07359753311657335, 0.07073567048044027, 0.09099999263821812, 0.0988604011938713, 0.07699727744864959, 0.05887228912945197, 0.045751607078380996, 0.041964070822853916, 0.07881427670610375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06567128645602371, 0.029102068008828197, 0.09994955450600351, 0.04143129587830985, 9.999999999998899e-05, 0.021114360143748345, 0.0405119649822373, 0.04942799420682353, 0.022057836186600066, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02255825946187251, 0.011587592008988623, 0.034670167828422915, 0.016308442493241038, 0.03443945956544647, 0.039514158089509865, 0.03292343334264913, 0.026939363771736113, 0.029909163701342778, 0.2767227871250052, 0.29845245372849505, 0.27044808752099647, 0.29373065645486307, 0.2840433609508355, 0.28305148535975855, 0.2567004102494037, 0.2863884437990073, 0.26246877938735635, 0.056366624081485295, 0.057199265317239734, 0.06673228074210513, 0.06812092005422732, 0.0751053000841233, 0.08803403038192759, 0.061834536628598835, 0.07204497382607455, 0.08233730605300493, 0.16398268409849548, 0.14563205020347336, 0.13915755829168208, 0.18280136101122457, 0.15465408419894666, 0.14458826657718948, 0.15023736145385969, 0.18327535527780892, 0.17271887367986893, 0.19873908671761775, 0.18982671417347996, 0.2104789332117999, 0.2120087752369887, 0.18908787832465357, 0.1769931358405905, 0.2069013892994449, 0.24597503474989713, 0.2271737622992751, 0.13795872756422445, 0.1497517920648912, 0.16297606115806662, 0.14002869702893916, 0.14598712376147027, 0.14293473799431833, 0.15814532881794052, 0.1675054911110757, 0.15218162973632865, 0.17774109582952258, 0.15917245550857662, 0.16076813804347823, 0.16072317738330855, 0.13395409445843598, 0.1770344344079564, 0.16355207926282833, 0.17983184060987967, 0.17817731735839348, 0.16364680140813548, 0.16088501390813004, 0.16495600442344827, 0.16624260490967824, 0.1831810805463081, 0.16519040801503448, 0.1673164390030477, 0.14104046949835825, 0.179981352367092, 0.33942846685132044, 0.16049604727993605, 0.14767903746824618, 0.39356016793669246, 0.18781465426192212, 0.16639334323760901, 0.12902020229127809, 0.16194913310179293, 0.3474067718471636, 0.3068183426482157, 0.21149721473850835, 0.23387280569412228, 0.18941922127936095, 0.2690956206304722, 0.14233178281457315, 0.2054991008078355, 0.20162012117705996, 0.3172529247131821, 0.1781526576513628, 0.1756572630019938, 0.19353681508560883, 0.17717406233306743, 0.1750925963418225, 0.19165493331946326, 0.1967957710668491, 0.19216594524376907, 0.1942855479633555, 0.05170192409943741, 0.051360231823976754, 0.06394516679082352, 0.07182219719236205, 0.07032868753956123, 0.05563333285994454, 0.07100027159829059, 0.060808364916446256, 0.06888543356354693]}, "mutation_prompt": null}
