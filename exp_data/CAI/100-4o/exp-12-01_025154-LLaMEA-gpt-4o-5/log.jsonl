{"id": "7f78f442-632d-48ae-9746-a9f4d218b6fc", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.zeros((self.population_size, dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.w = 0.7  # Inertia weight\n        self.c1 = 1.5 # Cognitive coefficient\n        self.c2 = 1.5 # Social coefficient\n        self.de_f = 0.8  # Differential Evolution scaling factor\n        self.de_cr = 0.9 # Crossover probability\n\n    def __call__(self, func):\n        evals = 0\n        \n        while evals < self.budget:\n            # Differential Evolution step\n            for i in range(self.population_size):\n                if evals >= self.budget:\n                    break\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = self.particles[indices]\n                mutant_vector = np.clip(a + self.de_f * (b - c), self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(self.particles[i])\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.de_cr:\n                        trial_vector[j] = mutant_vector[j]\n                \n                trial_score = func(trial_vector)\n                evals += 1\n                \n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_positions[i] = trial_vector\n                    self.personal_best_scores[i] = trial_score\n\n            # Update global best\n            min_personal_best_score = np.min(self.personal_best_scores)\n            if min_personal_best_score < self.global_best_score:\n                self.global_best_score = min_personal_best_score\n                self.global_best_position = self.personal_best_positions[np.argmin(self.personal_best_scores)]\n\n            # Particle Swarm Optimization step, using personal and global bests\n            for i in range(self.population_size):\n                if evals >= self.budget:\n                    break\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.personal_best_positions[i] - self.particles[i]) +\n                                      self.c2 * r2 * (self.global_best_position - self.particles[i]))\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n                particle_score = func(self.particles[i])\n                evals += 1\n                \n                if particle_score < self.personal_best_scores[i]:\n                    self.personal_best_positions[i] = self.particles[i]\n                    self.personal_best_scores[i] = particle_score\n\n        return self.global_best_position, self.global_best_score", "name": "HybridDEPSO", "description": "A hybrid metaheuristic combining Differential Evolution with an adaptive variant of Particle Swarm Optimization to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.21702350674462673, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.5941437663364828, 0.6302808635868968, 0.6273562909847117, 0.6371304856488931, 0.6507707116296817, 0.6061643265886607, 0.6261098328166177, 0.5968614712080564, 0.586099602795592, 0.18930339682988329, 0.23396778149580733, 0.1925657599928028, 0.21393365312152002, 0.03544656782696198, 0.20043565572183997, 0.2559579766509904, 0.03733226651143562, 0.04045059317711619, 0.1250097947088198, 0.11860206421205566, 0.12066780990220283, 0.12041158538171914, 0.0881789241965436, 0.11287204284784436, 0.117159280559061, 0.12149612825926215, 0.12197134695188849, 0.1076851585630818, 0.10123457487314591, 0.07785538749539833, 0.10817059021388797, 0.0994975833028171, 0.12837476913274282, 0.09049159067123802, 0.12019875445055528, 0.09000527760295862, 0.9848535584893638, 0.9880178246376692, 0.9845577924867017, 0.9845069292981128, 0.9854105985350248, 0.9854717387417311, 0.9866107082014319, 0.9832442675433326, 0.985326369414688, 0.25831270104004567, 0.3043220765262824, 0.28514159398419325, 0.3250108401716504, 0.312328728006778, 0.14507884866892107, 0.08388045188932591, 0.08699755867751502, 0.30864816714834287, 0.3090278439658435, 0.2717999517305163, 0.21407315534374827, 0.4000637837118436, 0.15467571104254163, 0.1911919314417455, 0.2217456580660404, 0.33340454243758355, 0.2580022107231469, 0.16388798224437506, 0.10509326373928529, 0.13920289940372166, 0.09913356988259492, 0.09455039402294385, 0.1653683170112592, 0.1358690770230625, 0.1495798773562529, 0.14801155237986352, 0.1594808712734308, 0.02167069766328733, 0.12282892271487422, 0.11575789513952184, 0.15560194759885726, 0.1262028716308239, 0.1584890646543119, 0.16203370403388162, 0.09265157766430332, 0.02299097631654934, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006725530707060723, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006405861940226298, 0.05543797820084384, 0.028120571378615344, 0.08727093126385554, 0.08001500896466496, 0.025823525182076423, 0.06810584997961033, 0.06323894779734296, 0.06079603294588254, 0.0451688154314841, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05332953264627571, 0.04420214172597747, 0.04445924248680855, 0.05771235562639887, 0.05470837006864637, 0.058043903926574436, 0.06819924779880038, 0.14415120685152838, 0.11583077010870735, 0.08323064430586635, 0.0778613135459586, 0.15093355753808613, 0.04435687032407354, 0.04528316470580307, 0.043180588990440416, 0.44628175439411666, 0.44036894484915035, 0.43596236946321043, 0.47601429602868217, 0.46379073082985, 0.48201308417635746, 0.42869635438151077, 0.44634620122034807, 0.4200081228256175, 0.07615955226228821, 0.09072540445901156, 0.07655380230980302, 0.10754916135974579, 0.09971905178441698, 0.09974344503407906, 0.0933055310754416, 0.10071044562928799, 0.0904335655973093, 0.1937021080812017, 0.27407191259693897, 0.18489266112692204, 0.17926807702448333, 0.2060480434899271, 0.24230618292676287, 0.17991777135574516, 0.24056089690058013, 0.1974104656125394, 0.3209889355606331, 0.21985459743125535, 0.26234816252664617, 0.35536752419481166, 0.282503796866726, 0.29030678060134163, 0.28094735263776627, 0.2917808445824558, 0.24570043773863293, 0.24710745039778625, 0.2413202093873006, 0.19818417061292792, 0.16774572799953258, 0.18082815681958986, 0.17246370449048043, 0.118601387260726, 0.2255521401897861, 0.23221359340752556, 0.24509776615599022, 0.1856401503684707, 0.21125562752384563, 0.17124650302046462, 0.17933118438179663, 0.18969577819008354, 0.17736052917298017, 0.19307817730801102, 0.20313495365985312, 0.1898514573286869, 0.20798380919075898, 0.1980891982681886, 0.19899253810043727, 0.1862327193264638, 0.19043780147595135, 0.23682308210337089, 0.19509132713920474, 0.1810578565501959, 0.6694149897084729, 0.16284164524508737, 0.16080702681573422, 0.19500232059286526, 0.2053759010365549, 0.18104320383988548, 0.16407293713569848, 0.17446104311938693, 0.12168729104220533, 0.11111098100020778, 0.1739452289498148, 0.15070641975535526, 0.10918453514232696, 0.12297614759674269, 0.44684108671433076, 0.19921946104844268, 0.16091539157941115, 0.14922770247946704, 0.18118153266866543, 0.1816119257196711, 0.1742645446907234, 0.177706955055142, 0.18178583078663613, 0.18359239704885022, 0.19027263063167854, 0.19087938846319208, 0.18812581974321263, 0.08153970232515817, 0.060803817888475664, 0.10872935951786455, 0.0720977849105009, 0.07487555285625147, 0.08575654817106593, 0.07848541392972497, 0.07780959915966268, 0.0799186130830003]}, "mutation_prompt": null}
{"id": "cb7b1680-f289-4f63-a043-f1f58755385d", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.zeros((self.population_size, dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.w = 0.9  # Inertia weight, increased for better exploration initially\n        self.c1 = 1.5 # Cognitive coefficient\n        self.c2 = 1.5 # Social coefficient\n        self.de_f = 0.8  # Differential Evolution scaling factor\n        self.de_cr = 0.9 # Crossover probability\n\n    def __call__(self, func):\n        evals = 0\n        \n        while evals < self.budget:\n            # Differential Evolution step\n            for i in range(self.population_size):\n                if evals >= self.budget:\n                    break\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = self.particles[indices]\n                mutant_vector = np.clip(a + self.de_f * (b - c), self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(self.particles[i])\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.de_cr:\n                        trial_vector[j] = mutant_vector[j]\n                \n                trial_score = func(trial_vector)\n                evals += 1\n                \n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_positions[i] = trial_vector\n                    self.personal_best_scores[i] = trial_score\n\n            # Update global best\n            min_personal_best_score = np.min(self.personal_best_scores)\n            if min_personal_best_score < self.global_best_score:\n                self.global_best_score = min_personal_best_score\n                self.global_best_position = self.personal_best_positions[np.argmin(self.personal_best_scores)]\n\n            # Particle Swarm Optimization step, using personal and global bests\n            self.w = 0.9 - 0.5 * (evals / self.budget)  # Adaptive inertia weight\n            for i in range(self.population_size):\n                if evals >= self.budget:\n                    break\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.personal_best_positions[i] - self.particles[i]) +\n                                      self.c2 * r2 * (self.global_best_position - self.particles[i]))\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n                particle_score = func(self.particles[i])\n                evals += 1\n                \n                if particle_score < self.personal_best_scores[i]:\n                    self.personal_best_positions[i] = self.particles[i]\n                    self.personal_best_scores[i] = particle_score\n\n        return self.global_best_position, self.global_best_score", "name": "HybridDEPSO", "description": "An enhanced hybrid metaheuristic leveraging an adaptive inertia weight strategy in PSO to balance exploration and exploitation efficiently.", "configspace": "", "generation": 1, "fitness": 0.1973261126431432, "feedback": "", "error": "", "parent_id": "7f78f442-632d-48ae-9746-a9f4d218b6fc", "metadata": {"aucs": [0.5436432194238116, 0.5378563829691712, 0.5289538116489008, 0.5866259018470787, 0.5550428059365995, 0.5403978426128467, 0.5435539058404296, 0.5561466689985604, 0.5749402206299908, 0.2150160599526949, 0.19086424714421502, 0.04197516427813075, 9.999999999998899e-05, 0.027277700995894105, 0.19125964641059223, 0.2167856633056242, 0.02922952030250725, 0.03146783701977873, 0.1082888494944606, 0.09680778212638974, 0.09616472586341884, 0.10148333451200797, 0.08446033364404104, 0.07605286232576658, 0.1079125193875834, 0.10386883643178046, 0.10462415209766018, 0.10799216274081225, 0.07160631668562689, 0.08545827813559392, 0.10237477782507098, 0.10243075436962368, 0.08732414380669984, 0.09301262037592384, 0.1096200322809997, 0.09221948960380888, 0.984859104142022, 0.9880178246376692, 0.9845577924867017, 0.9845625772054223, 0.985433696383343, 0.9859449425185101, 0.9866107082014319, 0.9861321029464033, 0.9852974352452245, 0.21272933766984803, 0.2985413725310798, 0.057005161476948674, 0.25145833934730677, 0.04235891250711998, 0.1341824281909756, 0.0778807015703551, 0.08170060537923896, 0.08462224887228731, 0.28735867152609473, 0.2028974155419735, 0.43603937796339065, 0.18850351175612978, 0.1524240592616949, 0.17976906916135282, 0.15540223727798508, 0.12031003378155836, 0.325233536594529, 0.09677128853913852, 0.08761729908354332, 0.12672919579156838, 0.07422014371292551, 0.14140445618716024, 0.12426417098828224, 0.10998872363475132, 0.12638689221080535, 0.14559319239808322, 0.1005180472880185, 0.020624724681382545, 0.1543053893734062, 0.1422192618015211, 0.10929527029494479, 0.10157008519960331, 0.14337859988739488, 0.09265543142614519, 0.030850975431367944, 0.0014610687114514631, 0.0073296420195329, 0.002059198837228937, 0.00022524022117198506, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019759233562053335, 9.999999999998899e-05, 9.999999999998899e-05, 0.05830245814575885, 0.024315725261724985, 0.07448301476118613, 0.02569067022194338, 0.07852718476257647, 0.06822943045814356, 0.06843682671145712, 0.04107981607334443, 0.0489555324943991, 9.999999999998899e-05, 0.01878066756985719, 0.01515053978349079, 0.04811755271450824, 0.04227536525999365, 0.03273088755423015, 9.999999999998899e-05, 9.999999999998899e-05, 0.040760674188155654, 0.007434859765037438, 0.029738050636399005, 0.07897262742675215, 0.02949108113920318, 0.15810532661192878, 9.999999999998899e-05, 0.043276387933016136, 0.041014337874160645, 0.0394969213717794, 0.41592295016777137, 0.397303934145655, 0.4161720681057668, 0.40950492984327114, 0.41194484849341484, 0.4166958563690517, 0.39258557364482993, 0.3931364044992717, 0.4046336485000436, 0.05408628733884657, 0.09121780270282653, 0.07195320095118496, 0.1265053457421167, 0.07995805916631193, 0.10500779690147322, 0.0992367681283084, 0.08112168864222835, 0.0868803556191291, 0.17155416426468806, 0.13471974915135032, 0.28967823398740733, 0.17071333317966142, 0.31493176639128007, 0.14459396361977417, 0.21809181631616548, 0.19887268973454497, 0.1615865371178905, 0.27472093353435856, 0.21619809441897164, 0.2683041445350911, 0.22005114390339808, 0.3176764220993975, 0.25841602755808024, 0.2471073104425684, 0.2377500052021171, 0.17457933678296123, 0.21669762421370364, 0.20565346586947597, 0.20878168672096775, 0.16506955905267806, 0.20010198097808762, 0.16340327304681868, 0.21733931275099372, 0.14417065437471588, 0.13290840521579994, 0.1920169169782976, 0.20116767971451732, 0.17804798792916987, 0.18584461836383515, 0.1801050705334838, 0.16503599718080408, 0.1999280176006759, 0.1879625744486867, 0.17152560307638687, 0.17082533884324713, 0.18893530581623097, 0.17938313859648802, 0.18932732235595917, 0.2026197673906881, 0.21895493866680027, 0.19781637625951154, 0.18926377093867308, 0.18819661361831141, 0.622473958981177, 0.15381024867800586, 0.15748969320800132, 0.1905397084895576, 0.12653524971539631, 0.17783393492063482, 0.1498463875184448, 0.16997846665327776, 0.11980327243279976, 0.1598416038916195, 0.17568793787306913, 0.30829500775630836, 0.32581557711191755, 0.18816772821069616, 0.34472604138682184, 0.1929420156068269, 0.14376104871338125, 0.14406626810221657, 0.1797488983571338, 0.2072466293012183, 0.17796039202797997, 0.2087642630690909, 0.1769202792690574, 0.18307519286811436, 0.19702684140417037, 0.17986171524602834, 0.21603000858360688, 0.07112276436071019, 0.07647208306751796, 0.07385191495280541, 0.07013122013406059, 0.07233923730087066, 0.077314167905155, 0.08030530573471406, 0.06932888335281695, 0.08054825800214171]}, "mutation_prompt": null}
