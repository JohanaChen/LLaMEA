{"id": "1a6b3a1f-2006-49a4-8da2-2d3a07a4adc8", "solution": "import numpy as np\n\nclass QuantumDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20 + int(0.5 * dim)  # Adjust population size based on dimension\n        self.bounds = (-5.0, 5.0)\n        self.mutation_factor = 0.5\n        self.crossover_prob = 0.7\n\n    def opposition_based_initialization(self):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        opposition_population = self.bounds[0] + self.bounds[1] - population\n        return np.vstack((population, opposition_population))\n\n    def quantum_superposition(self, best, individual):\n        alpha = np.random.uniform(0, 1, self.dim)\n        return alpha * best + (1 - alpha) * individual\n\n    def differential_mutation(self, population, index, best_index):\n        indices = [i for i in range(population.shape[0]) if i != index and i != best_index]\n        a, b, c = population[np.random.choice(indices, 3, replace=False)]\n        return a + self.mutation_factor * (b - c)\n\n    def crossover(self, target, donor):\n        mask = np.random.rand(self.dim) < self.crossover_prob\n        return np.where(mask, donor, target)\n\n    def __call__(self, func):\n        population = self.opposition_based_initialization()\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = population.shape[0]\n        \n        best_index = np.argmin(fitness)\n        best = population[best_index]\n        best_fitness = fitness[best_index]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                donor = self.differential_mutation(population, i, best_index)\n                trial = self.crossover(population[i], donor)\n                trial = np.clip(trial, self.bounds[0], self.bounds[1])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n                        best_index = i\n\n                # Quantum superposition step\n                quantum_candidate = self.quantum_superposition(best, trial)\n                quantum_candidate = np.clip(quantum_candidate, self.bounds[0], self.bounds[1])\n                quantum_fitness = func(quantum_candidate)\n                evaluations += 1\n\n                if quantum_fitness < fitness[i]:\n                    population[i] = quantum_candidate\n                    fitness[i] = quantum_fitness\n\n                    if quantum_fitness < best_fitness:\n                        best = quantum_candidate\n                        best_fitness = quantum_fitness\n                        best_index = i\n\n        return best, best_fitness", "name": "QuantumDifferentialEvolution", "description": "Adaptive Quantum-inspired Differential Evolution with Opposition-based Learning for robust exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.25021866555850947, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6419459977136175, 0.46338775085882766, 0.5916263096116727, 0.5817299388035596, 0.5998479759467585, 0.5963589199054278, 0.718577553805755, 0.5347343074057143, 0.4726444573429517, 0.27472214751058144, 0.4647657291501428, 0.3198262823905078, 0.23231296431535065, 0.2938656483730563, 0.21554890923601577, 0.180340281622958, 0.38549373691847555, 0.27072130342581646, 0.12269351450058152, 0.13967386362223932, 0.11845107609259631, 0.1372541483148001, 0.13496229169718021, 0.1436064987767086, 0.12085876234311876, 0.1405209662840614, 0.11733026047849782, 0.11156967646552873, 0.11917695631340208, 0.13511415725512366, 0.11516596096689902, 0.11122017333184409, 0.1126538393233435, 0.13694095147683782, 0.14885275325592917, 0.11469909770740816, 0.9412116823592266, 0.9710992998769711, 0.9541047522436199, 0.9529939723605406, 0.9500251606719085, 0.9433401422113904, 0.9635794193091113, 0.9563998662898313, 0.937947371486714, 0.28529846254775915, 0.2989330025102467, 0.2127932289219019, 0.288357775197017, 0.2668099525924046, 0.26922605030298763, 0.2637386255166144, 0.3005273153292496, 0.24491443253971223, 0.6700230279163559, 0.2191592000350936, 0.3136602953263663, 0.3472002209600694, 0.2127101792202527, 0.2734610425064994, 0.16153530669913652, 0.20983034617229512, 0.23097133869800923, 0.14946891513798166, 0.14142591658964243, 0.14551547505964368, 0.16448976679051952, 0.16985698365937218, 0.14579084664514053, 0.1506708354359393, 0.21924597762808207, 0.13893078362099442, 0.1391601770784202, 0.14109396841566502, 0.15863131380192386, 0.14227986376008028, 0.39299210191251377, 0.1269548373433923, 0.13159790178291697, 0.16017833508673662, 0.1297647411246764, 0.00071573654926127, 0.03966796060159272, 0.05797837538719175, 0.01829921123364253, 0.026592796801481744, 0.0008818250913696923, 0.0023963328305106613, 0.04589109644501255, 0.13138530276769056, 0.1165154685870704, 0.06913413138669533, 0.11884129295527568, 0.0770355166348985, 0.07857073207807974, 0.07131528874081705, 0.09711598690816592, 0.10113959135485762, 0.14142996636665117, 0.08119674649008868, 0.014391574349887692, 0.03807580548146594, 0.06006978658462847, 0.08856983403629182, 0.061770752053542544, 0.2010591652379311, 0.07473730798168576, 0.05108567973505285, 0.15857187684979068, 0.07696862369994883, 0.09700425751019026, 0.2508118121749404, 0.09827031605657122, 0.06135946614529253, 0.1351178200567259, 0.08093492093146737, 0.08737190057339905, 0.502642359813977, 0.4043826652977517, 0.4811888166735423, 0.5009458214637594, 0.48524294520179034, 0.4682452254867009, 0.44690270674708465, 0.3885542212768798, 0.3933851689952972, 0.1235815809178723, 0.08374120149240316, 0.09518488050215324, 0.1004867617002515, 0.11967548226774705, 0.11265706620541638, 0.11512446545240274, 0.10148827801344473, 0.09116681974362617, 0.12362039367464517, 0.16304754445549574, 0.17323115217162666, 0.16216250576298863, 0.19095851019511856, 0.16592151613459993, 0.14888329547492707, 0.15382765627029804, 0.14916354625783845, 0.3502299439187272, 0.3368087232813718, 0.30434817874862063, 0.37165290920407645, 0.3155174668992249, 0.35442315392301105, 0.3155592004344149, 0.31875179149154553, 0.22904911862350896, 0.2006971239684633, 0.24123446580368024, 0.20042892775116972, 0.2924729160787053, 0.200061559250294, 0.29586972210550655, 0.2021931422658434, 0.20560121642055784, 0.21023625598143358, 0.22191184585740542, 0.18299203015699939, 0.19511655851754484, 0.2194896874809289, 0.2083135290892515, 0.18615475551366834, 0.19435892330521032, 0.2149924798945836, 0.1957959948227319, 0.1838149387082565, 0.1926544917749442, 0.19473094238823396, 0.23599606971134557, 0.27799205785904635, 0.2126730927937831, 0.18538637576050465, 0.21080030333519184, 0.21016876678221919, 0.5804830997132893, 0.3920844064931468, 0.17509563055483124, 0.20560704275407682, 0.19841319978683847, 0.8348054642252829, 0.28866566011504335, 0.756268874878844, 0.17422521846072048, 0.4850488300565937, 0.21108564058794455, 0.41761558424446377, 0.47297780689519886, 0.5129134664952504, 0.17516876372741974, 0.2731833893720933, 0.4047943214041899, 0.282723975541208, 0.184205895505958, 0.19472526692574332, 0.1847198901519862, 0.1965578199897824, 0.18094591987033692, 0.20022323687704624, 0.19246782569957366, 0.17954500591721811, 0.18676657698951127, 0.08590905066276266, 0.0772076272347545, 0.08992237933716785, 0.09738530911952026, 0.0804687509230243, 0.09087703078504639, 0.08304654382418086, 0.09160466617915786, 0.07623170989981776]}, "mutation_prompt": null}
{"id": "48390427-a119-465c-b7e2-3b75d7a422bc", "solution": "import numpy as np\n\nclass QuantumDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20 + int(0.5 * dim)  # Adjust population size based on dimension\n        self.bounds = (-5.0, 5.0)\n        self.mutation_factor = 0.5\n        self.crossover_prob = 0.7\n        self.shrink_factor = 0.9  # New variable to dynamically adjust mutation factor\n\n    def opposition_based_initialization(self):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        opposition_population = self.bounds[0] + self.bounds[1] - population\n        return np.vstack((population, opposition_population))\n\n    def quantum_superposition(self, best, individual):\n        alpha = np.random.uniform(0, 1, self.dim)\n        return alpha * best + (1 - alpha) * individual\n\n    def differential_mutation(self, population, index, best_index):\n        indices = [i for i in range(population.shape[0]) if i != index and i != best_index]\n        a, b, c = population[np.random.choice(indices, 3, replace=False)]\n        return a + self.mutation_factor * (b - c) * self.shrink_factor  # Adjust mutation factor\n\n    def crossover(self, target, donor):\n        mask = np.random.rand(self.dim) < self.crossover_prob\n        return np.where(mask, donor, target)\n\n    def adapt_population_size(self, evaluations):\n        if evaluations % (0.25 * self.budget) == 0:  # Reduce population size at intervals\n            self.population_size = max(10, int(self.population_size * 0.8))\n\n    def __call__(self, func):\n        population = self.opposition_based_initialization()\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = population.shape[0]\n        \n        best_index = np.argmin(fitness)\n        best = population[best_index]\n        best_fitness = fitness[best_index]\n\n        while evaluations < self.budget:\n            self.adapt_population_size(evaluations)  # Call adaptive population size\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                donor = self.differential_mutation(population, i, best_index)\n                trial = self.crossover(population[i], donor)\n                trial = np.clip(trial, self.bounds[0], self.bounds[1])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n                        best_index = i\n\n                # Quantum superposition step\n                quantum_candidate = self.quantum_superposition(best, trial)\n                quantum_candidate = np.clip(quantum_candidate, self.bounds[0], self.bounds[1])\n                quantum_fitness = func(quantum_candidate)\n                evaluations += 1\n\n                if quantum_fitness < fitness[i]:\n                    population[i] = quantum_candidate\n                    fitness[i] = quantum_fitness\n\n                    if quantum_fitness < best_fitness:\n                        best = quantum_candidate\n                        best_fitness = quantum_fitness\n                        best_index = i\n\n        return best, best_fitness", "name": "QuantumDifferentialEvolution", "description": "Enhanced Quantum Differential Evolution with Dynamic Population and Adaptive Mutation for improved exploration and convergence.", "configspace": "", "generation": 1, "fitness": 0.2524220896766638, "feedback": "", "error": "", "parent_id": "1a6b3a1f-2006-49a4-8da2-2d3a07a4adc8", "metadata": {"aucs": [0.4724083306029264, 0.5947181889840569, 0.6090253558091188, 0.5713805862739241, 0.5487214922058282, 0.7228507506591344, 0.7224795914032778, 0.6659965984505318, 0.6969837841227013, 0.23761277297041206, 0.2817138744042058, 0.2819249763256152, 0.2002418709738908, 0.3700631712175254, 0.2825297075956845, 0.2473493067432324, 0.34198259903001293, 0.3349776055435698, 0.11379578813151381, 0.13948689892930288, 0.12956206337547682, 0.14553103849855542, 0.12572930873325172, 0.12208921386589733, 0.142988945455087, 0.16713541262375697, 0.15482076418377289, 0.10690544047819439, 0.13656571466170986, 0.1106261262425764, 0.11015040006906807, 0.11902224816701323, 0.1307103208208349, 0.11747400019838439, 0.12339105844019427, 0.12813209203635512, 0.9356480840502301, 0.9710716346543327, 0.9540719006284633, 0.9139053027240983, 0.9442789271629956, 0.9427293075787682, 0.9690263570431077, 0.9441307621196781, 0.9218308286361792, 0.2470091854304184, 0.24812285469530648, 0.2824700003993068, 0.2149936314123868, 0.25284740995883015, 0.24955694489071423, 0.2102662758087872, 0.2664599619071458, 0.22544836231555598, 0.3081980573123626, 0.3477489961258564, 0.22910119837413678, 0.35137853735342983, 0.20763073089346296, 0.21558836729915043, 0.2148894845669067, 0.3037000783392627, 0.8073976942388024, 0.14944459350961037, 0.22915163748152378, 0.15817663267135962, 0.19126212701274636, 0.2632696234026225, 0.1563375755456453, 0.16117171623141535, 0.14423099505221804, 0.15094637559112323, 0.22850840795939498, 0.146133277515904, 0.24734697225015911, 0.3604743545859884, 0.13778524191956165, 0.13048885182376835, 0.14073103813901622, 0.1427540761259437, 0.12615742487814408, 9.999999999998899e-05, 0.05118969340643398, 0.00046308303884090574, 0.025563532848750903, 9.999999999998899e-05, 9.999999999998899e-05, 0.07230258521654065, 0.03983352450969746, 0.018670083087063527, 0.0881105293646991, 0.1217056286766478, 0.09781690696235745, 0.09021902790911063, 0.08291374735273893, 0.061901969949562985, 0.10090627773414307, 0.09890559206433713, 0.11736355939158727, 0.07542628223152026, 0.03654219582019236, 0.030380147008639558, 0.07952059096862851, 0.08412515007358712, 0.08658136559726959, 0.1680723098752207, 0.16446635759418426, 0.05314212837409471, 0.13644196213139115, 0.16038812000738, 0.10274493995761769, 0.10864661519862295, 0.06385536386263924, 0.06628841757248993, 0.07830187632402086, 0.11412694389467837, 0.12238022230865031, 0.5072163261993077, 0.4164781509023173, 0.45268033746404945, 0.4133640343015076, 0.45951932896909786, 0.4002186005981786, 0.4564000623761425, 0.4364955865510308, 0.413337193716675, 0.12379007189923108, 0.1294767165962497, 0.08874959040270791, 0.11249981025878619, 0.15121819006173287, 0.11521763988263412, 0.11296469132681364, 0.07737998537766833, 0.08288871965403954, 0.18461455973071617, 0.15658621485619828, 0.14788897761684672, 0.1682416222564148, 0.18104069702795256, 0.20915269090215693, 0.14866460561397776, 0.11851045579358288, 0.20380174096068981, 0.2479256264845352, 0.28872883648663217, 0.29661383491002125, 0.35833664819927213, 0.33092448905629923, 0.35932019623113853, 0.25708843595077635, 0.2802358996235713, 0.24069351569146602, 0.2401668915782751, 0.22218634764958112, 0.22604877224440711, 0.2667548253415045, 0.3044915539960844, 0.2398110216041348, 0.17676003094814496, 0.22165844433832904, 0.2203853816424478, 0.2298919134295816, 0.21134347293683808, 0.19232391891686196, 0.19358595605702644, 0.1850098835052434, 0.19305893131698215, 0.2816835568679934, 0.21933135304625162, 0.21604772917227888, 0.2275584487984299, 0.22187588929483182, 0.21117912358343738, 0.24401136375160148, 0.3429596115963579, 0.2038342426640939, 0.18865192627931093, 0.17919822016126763, 0.22807717975667507, 0.39024671811380207, 0.18558376471722848, 0.20758469204922403, 0.5875047814092529, 0.500545985342653, 0.5635475856714052, 0.3364639885756302, 0.8132212604389982, 0.17528584921292367, 0.25655148076218304, 0.20936724434514054, 0.3432218880073873, 0.39188348965948006, 0.16908903199518188, 0.39823789162116907, 0.36220685623582105, 0.31694148294940083, 0.3732597869660671, 0.20554371068358301, 0.18167755048755418, 0.18749128423598105, 0.18903618736304784, 0.19191575313665166, 0.1909698361925103, 0.1820302426739998, 0.1951697164892695, 0.19455820714439165, 0.07654035086722366, 0.07755951695841923, 0.08813925181142457, 0.1004438897292228, 0.08288547581111794, 0.08492807582424577, 0.08136460975636906, 0.08442100272266106, 0.08105692963461131]}, "mutation_prompt": null}
