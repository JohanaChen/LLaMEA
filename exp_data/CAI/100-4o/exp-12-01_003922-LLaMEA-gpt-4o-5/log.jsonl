{"id": "82e46c55-c5f0-4fa7-8522-84beef06bd57", "solution": "import numpy as np\n\nclass EnsembleOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.8\n        self.inertia_weight = 0.5\n        self.cognitive_coefficient = 2.0\n        self.social_coefficient = 2.0\n\n    def __call__(self, func):\n        # Initialize population for DE\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        # Initialize velocities and personal bests for PSO\n        velocities = np.random.uniform(-0.1, 0.1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        num_evaluations = self.population_size\n\n        while num_evaluations < self.budget:\n            # Differential Evolution strategy\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant_vector = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.crossover_rate\n                if not np.any(crossover):\n                    crossover[np.random.randint(0, self.dim)] = True\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < personal_best_scores[i]:\n                    personal_best_scores[i] = trial_score\n                    personal_best_positions[i] = trial_vector\n                    if trial_score < personal_best_scores[global_best_index]:\n                        global_best_index = i\n                        global_best_position = trial_vector\n\n            # Particle Swarm Optimization strategy\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                cognitive_velocity = self.cognitive_coefficient * r1 * (personal_best_positions[i] - population[i])\n                social_velocity = self.social_coefficient * r2 * (global_best_position - population[i])\n                velocities[i] = (self.inertia_weight * velocities[i] + cognitive_velocity + social_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.lower_bound, self.upper_bound)\n                score = func(population[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = population[i]\n                    if score < personal_best_scores[global_best_index]:\n                        global_best_index = i\n                        global_best_position = population[i]\n\n        return global_best_position\n\n# Example usage:\n# optimizer = EnsembleOptimizer(budget=1000, dim=10)\n# best_solution = optimizer(some_black_box_function)", "name": "EnsembleOptimizer", "description": "A multi-strategy ensemble optimizer that combines differential evolution and particle swarm optimization for robust performance across diverse problem landscapes.", "configspace": "", "generation": 0, "fitness": 0.2192222200944265, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6383408479209891, 0.5748629038679112, 0.5128575667100421, 0.5740699728601646, 0.5536880021915815, 0.5008453516591223, 0.46722683678280064, 0.5515407194871618, 0.5236440503613089, 0.19359016396814244, 0.24718684353745846, 0.03601744164948484, 0.1919142948798499, 0.21172367706662154, 0.04520249989958558, 0.11298292142018929, 0.012959959355710815, 0.1714589559076758, 0.10699253920575647, 0.1006066539274052, 0.10674036550407706, 0.12036290170347985, 0.08956031592254099, 0.11637953182999261, 0.1085144591791275, 0.09828356030462293, 0.17736708451439642, 0.13535098553953506, 0.12060857019840898, 0.12449648044010442, 0.1070081750251346, 0.08951595090260889, 0.10841173520078973, 0.0998131151237811, 0.07785584611068352, 0.07131880148177772, 0.9804959772878711, 0.9816432454801666, 0.9860747514825143, 0.9863998708784, 0.9820503440938744, 0.9883267498048735, 0.9795499258218031, 0.9811789185104586, 0.9815105200586449, 0.25405447629971456, 0.21840426410202352, 0.22383272302663482, 0.13765195184625567, 0.14227502876433995, 0.24944500101669287, 0.08708746406757528, 0.26596116431423744, 0.272893838383931, 0.16887406244369452, 0.20689663295390082, 0.16392683268494979, 0.20112445586785965, 0.25755699439765756, 0.18247763759352964, 0.2278936109414632, 0.21479566658752858, 0.20701603999522944, 0.19977668743583776, 0.15552471386757716, 0.18629652303309274, 0.10024451939695955, 0.10440495249938508, 0.2018768388007699, 0.12199218310694993, 0.17916031635141316, 0.19209392757220656, 0.14091130742316638, 0.009915905467232422, 0.15739032925617158, 0.1947240921154828, 0.11752712378742347, 0.15802112147686798, 0.15170277806843735, 0.08620984520127095, 0.09026262397256957, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00024917684325986844, 0.04107667536078263, 0.05852862219027899, 0.0618716333676983, 0.06731898344950282, 0.02607003429230559, 0.07011002067389294, 0.08124397626354496, 0.11928335149334435, 0.04935336052935324, 0.03508849789873725, 9.999999999998899e-05, 0.024357958563485438, 0.061719695092358196, 0.052190890019992775, 0.04858515913469075, 0.05559284662741615, 0.03872272635589813, 0.05704884976076596, 0.07002848504844716, 0.08428432019500254, 0.07557627393165711, 0.07040387122165159, 0.10995413831318623, 0.005433209330734989, 0.048025278706776975, 0.04652816407697724, 0.0658106327383311, 0.41138735509720936, 0.3944102659389386, 0.43078458719744006, 0.4054767347926004, 0.42818190212121365, 0.46179048562019265, 0.43449062487681855, 0.45680455041210943, 0.43410865280569355, 0.10436224853595155, 0.10349379600210373, 0.06802936711799779, 0.12087333029720937, 0.09049471739229376, 0.11249883920124071, 0.08987569363608106, 0.08571501747221322, 0.11924873700603145, 0.18498438267208517, 0.17547812948272257, 0.1772307895469024, 0.15136407386722972, 0.2756378767500456, 0.19419204650813116, 0.25162885591300765, 0.15107335481697026, 0.17441497366917735, 0.2676788060409524, 0.3135871516923253, 0.27814451250230954, 0.27181043131693106, 0.2677120768277407, 0.29739057023756743, 0.2841343095973696, 0.31976585378614497, 0.26903961195869686, 0.17521235291829984, 0.18980589181608698, 0.178363951538262, 0.14914527727027416, 0.17123314882936358, 0.138336512861447, 0.18773960711009463, 0.22188303415937094, 0.17338710083569153, 0.20579580918510132, 0.18347040895591182, 0.19666451609701885, 0.1759107778351161, 0.18575311301465114, 0.21940500533088458, 0.2030612196714764, 0.169009477848723, 0.2139573939400965, 0.21603112271051883, 0.20673805543575396, 0.18550769100903175, 0.18272161628376993, 0.33796703964067454, 0.18162331590713088, 0.2097020973280962, 0.19898160147762245, 0.20835702593319005, 0.7156942213099927, 0.20186936878091644, 0.1515433825146345, 0.774208362026342, 0.1966166183580692, 0.16214646022957735, 0.6308222103798181, 0.6545349083862501, 0.18564901252786437, 0.2528264556668086, 0.20491417118208233, 0.16847253376768678, 0.4919406515934235, 0.2740218403205755, 0.16239883217702733, 0.1959112513139758, 0.15251819005083667, 0.349318318198949, 0.18332040020706986, 0.20262810193284764, 0.21110993903234498, 0.184414493327979, 0.19261627957230698, 0.19659868983703577, 0.19214216989265953, 0.19518004719745208, 0.19864567032341496, 0.0721351271897116, 0.07175661702801028, 0.08336346916975668, 0.06439150121394155, 0.07248757537013262, 0.06785780373389227, 0.07584272238993017, 0.07844811141896224, 0.07850430446179868]}, "mutation_prompt": null}
{"id": "b97ee494-ca64-484f-bbc1-3d2d5895f3a2", "solution": "import numpy as np\n\nclass EnsembleOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.8\n        self.inertia_weight = 0.9  # Start with a higher inertia weight\n        self.cognitive_coefficient = 2.0\n        self.social_coefficient = 2.0\n        self.inertia_weight_decay = 0.99  # Added line\n\n    def __call__(self, func):\n        # Initialize population for DE\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        # Initialize velocities and personal bests for PSO\n        velocities = np.random.uniform(-0.1, 0.1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        num_evaluations = self.population_size\n\n        while num_evaluations < self.budget:\n            # Differential Evolution strategy\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant_vector = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.crossover_rate\n                if not np.any(crossover):\n                    crossover[np.random.randint(0, self.dim)] = True\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < personal_best_scores[i]:\n                    personal_best_scores[i] = trial_score\n                    personal_best_positions[i] = trial_vector\n                    if trial_score < personal_best_scores[global_best_index]:\n                        global_best_index = i\n                        global_best_position = trial_vector\n\n            # Particle Swarm Optimization strategy\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                cognitive_velocity = self.cognitive_coefficient * r1 * (personal_best_positions[i] - population[i])\n                social_velocity = self.social_coefficient * r2 * (global_best_position - population[i])\n                velocities[i] = (self.inertia_weight * velocities[i] + cognitive_velocity + social_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.lower_bound, self.upper_bound)\n                score = func(population[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = population[i]\n                    if score < personal_best_scores[global_best_index]:\n                        global_best_index = i\n                        global_best_position = population[i]\n\n            self.inertia_weight *= self.inertia_weight_decay  # Added line\n\n        return global_best_position\n\n# Example usage:\n# optimizer = EnsembleOptimizer(budget=1000, dim=10)\n# best_solution = optimizer(some_black_box_function)", "name": "EnsembleOptimizer", "description": "Improve exploration by dynamically adjusting the inertia weight and incorporating elitism to retain the best solution.", "configspace": "", "generation": 1, "fitness": 0.17879467538911623, "feedback": "", "error": "", "parent_id": "82e46c55-c5f0-4fa7-8522-84beef06bd57", "metadata": {"aucs": [0.3584255587728261, 0.40111270865434057, 0.39337339671072236, 0.4040403127472436, 0.4600818984194166, 0.38930804622661375, 0.400292140652711, 0.4205363223493622, 0.3247061314403322, 0.038236155905451374, 0.07032787654328965, 0.05699973880056475, 0.023161263985317926, 0.016665736673316167, 0.11870702660801347, 0.09415125840493999, 0.06601616498580132, 0.10212230499590036, 0.07762366977125712, 0.08742946630445181, 0.08356773203815226, 0.10066308844059424, 0.09280264888472889, 0.06493295603618554, 0.07020193251545492, 0.09870389988822859, 0.08649822832760912, 0.06542833528616387, 0.06967152557506961, 0.06556109668558807, 0.06817225221507328, 0.061282061592239034, 0.05946932760072554, 0.07669858978329225, 0.06109771409297904, 0.08121846793488663, 0.9806888770888527, 0.9816420958627272, 0.9860749248075708, 0.9864014428350381, 0.9824301822650904, 0.9883261453839746, 0.9807481411876361, 0.9822306010330272, 0.9802409931404712, 0.1797651324936962, 0.15788660813190547, 0.1983791677611625, 0.1300520901658785, 0.12265543290915504, 0.17067644015579464, 0.07685096519088819, 0.203624784286491, 0.07113896087948701, 0.17021759713900642, 0.19552239936273308, 0.13354060258775569, 0.1870917966268778, 0.16687335726804997, 0.16805445894608495, 0.19789851318979512, 0.176219285605953, 0.21405268471713845, 0.12437816079760744, 0.14969136673684258, 0.11304693552209433, 0.052543865174043636, 0.052216246791958465, 0.07561037777155233, 0.08675457134690079, 0.08324447557123604, 0.0969830824510387, 0.07736316509219976, 0.019375176506324143, 0.05287661022465362, 0.09804464612123753, 0.11980101125473808, 0.0900595171956422, 0.111472243908885, 0.09512709039081002, 0.06229445264217315, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001089122056042724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11539682055140421, 0.016603367519518186, 0.07760265572849434, 0.03075771939411276, 0.008625644091446283, 0.01741096946303533, 0.06456719787431775, 0.05631800770554396, 0.03444909523221373, 0.01289312832222822, 9.999999999998899e-05, 0.014572048994691778, 0.025081690596345463, 0.026659359404871297, 9.999999999998899e-05, 0.024280184361063273, 0.018140826910504226, 0.022009438466292885, 0.05561325187074928, 9.999999999998899e-05, 0.0209409887052876, 0.06367131187358499, 0.018871448573261618, 0.08990979528367848, 0.037482120078611514, 0.038352931169924664, 0.03634953000961705, 0.3132649260053021, 0.35361306175091145, 0.344486824841459, 0.3277239351512392, 0.33304958017982433, 0.319429437516045, 0.36541756374161427, 0.31790290048663894, 0.32071840554061193, 0.07088401498851848, 0.09947851479321668, 0.08948312389263136, 0.0826354178514419, 0.07938234898720242, 0.07223297810399854, 0.0740556371734552, 0.07946233437322558, 0.0706009635960212, 0.14931986224761817, 0.13315408499241455, 0.1642813955115887, 0.14725871384877132, 0.2003127187466045, 0.15975513643058326, 0.23685348906610182, 0.16516921628706183, 0.17264869492700274, 0.2032749605233798, 0.19325691486509333, 0.2513374149150871, 0.2380955800665503, 0.22504764692307755, 0.23117305300176505, 0.22487623499473075, 0.26195162746399736, 0.26137966526478595, 0.15838704706527784, 0.16197540158663304, 0.1637515841225584, 0.1723455676643214, 0.150056426622316, 0.21923871267247663, 0.19999155818756498, 0.15986846553401413, 0.15105285851506123, 0.17517562515868956, 0.18261120764493888, 0.19017178635796295, 0.17237975153876428, 0.18106823314062537, 0.1613289468060055, 0.21377132369029772, 0.1690024164896735, 0.1847209494060268, 0.17914244233482146, 0.1783557634283105, 0.18533169498417013, 0.17812050793508427, 0.16558468016096428, 0.17892589214118582, 0.17500537833866125, 0.17538496111582647, 0.19098333960154745, 0.45596520871333235, 0.15945713818591534, 0.14813721040277028, 0.5333241327662532, 0.18417091530666596, 0.16507081109106725, 0.4273936843900551, 0.15691163322508017, 0.17613310051595654, 0.31133167689771535, 0.17925935810931604, 0.1577236080741672, 0.3740483180436096, 0.2128346638800922, 0.15193165762810967, 0.19785407142844502, 0.13805994245625042, 0.29868388189254547, 0.17502581788803417, 0.1922536419797637, 0.1851694986707505, 0.18617837212277621, 0.20002653685778582, 0.2187243759597336, 0.18188140247864004, 0.18736407413542167, 0.18667322993456492, 0.07228465569506748, 0.05526865471262754, 0.06775821245592961, 0.06341238589260434, 0.07181469660785056, 0.06476775212239994, 0.07006776208868537, 0.06620770193141468, 0.07255704145692998]}, "mutation_prompt": null}
