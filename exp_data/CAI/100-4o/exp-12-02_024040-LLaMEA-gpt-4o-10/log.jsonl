{"id": "4a85165d-af24-4ed2-b50e-815ae54ccf4a", "solution": "import numpy as np\n\nclass HybridPSOLevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.alpha = 0.01  # Levy flight scaling factor\n\n    def levy_flight(self, scale=1.0):\n        u = np.random.normal(0, 1, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        return u / np.abs(v) ** (1 / scale)\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_values = np.array([float('inf')] * self.population_size)\n        global_best_position = None\n        global_best_value = float('inf')\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate current position\n                value = func(particles[i])\n                evaluations += 1\n                \n                # Update personal best\n                if value < personal_best_values[i]:\n                    personal_best_values[i] = value\n                    personal_best_positions[i] = particles[i]\n                    \n                # Update global best\n                if value < global_best_value:\n                    global_best_value = value\n                    global_best_position = particles[i]\n            \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                velocities[i] = (self.w * velocities[i] +\n                                 self.c1 * r1 * (personal_best_positions[i] - particles[i]) +\n                                 self.c2 * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                \n                # Apply Levy flight for enhanced exploration\n                if np.random.rand() < 0.1:  # 10% chance to apply Levy flight\n                    particles[i] += self.alpha * self.levy_flight()\n\n                # Ensure particles stay within bounds\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n        \n        return global_best_position, global_best_value", "name": "HybridPSOLevy", "description": "A hybrid metaheuristic combining Particle Swarm Optimization (PSO) with Levy Flights for enhanced exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.295892889468828, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8375195182228616, 0.8116154604110029, 0.8201531533456745, 0.762167660129381, 0.8250022913097613, 0.8132034546353832, 0.7697512840981122, 0.7923977152307355, 0.801730603938337, 0.31075980720222773, 0.2614166067373923, 0.24585387460817332, 0.40416916271893377, 0.30737471228816526, 0.3410014315790224, 0.23933515051008003, 0.41000237548915064, 0.05607461550876158, 0.1611907749129703, 0.1693901070505741, 0.171105171049606, 0.2419753906613188, 0.15503501633037176, 0.17745275158023066, 0.15386100346566167, 0.14825220369131653, 0.4551005183710336, 0.28919264702134206, 0.14390600745701376, 0.11619402499927478, 0.1298715846793066, 0.1448257619905884, 0.11956643953324053, 0.1295242529385865, 0.15190181766733624, 0.12221169549520561, 0.990184823923111, 0.9896229437358186, 0.9895775206507638, 0.9711619123091747, 0.985064647101956, 0.9840097964363108, 0.9885431355307268, 0.9861396582624566, 0.9859788069878331, 0.561566551768113, 0.4347278760276364, 0.5277915963110754, 0.4943740993023118, 0.45431259250499967, 0.5589898948895573, 0.4846827015383458, 0.5002226157238484, 0.5247340694678039, 0.8740666466796854, 0.13921349725680088, 0.2212613264322575, 0.2812936213048248, 0.8904425781452178, 0.27388530701949054, 0.23377336669402926, 0.2345017134636047, 0.3664191845743089, 0.19403298487271237, 0.19909285576368096, 0.17391993069327072, 0.13858553890211167, 0.12957571147451596, 0.16742206158020578, 0.20283880762581297, 0.20105600778245247, 0.20047286352082683, 0.13342015763800574, 0.12123479611556487, 0.20149028695736293, 0.20536906177521153, 0.12030723088110884, 0.13416989379872846, 0.10377932784190702, 0.04889567688762653, 0.2544631969849267, 9.999999999998899e-05, 9.999999999998899e-05, 0.031589255336755384, 0.0009784553059701828, 0.0012646564598555177, 0.042500207407566104, 0.010503410346876407, 9.999999999998899e-05, 9.999999999998899e-05, 0.09232560128343026, 0.048566230077678685, 0.09698371158118302, 0.11065088653308486, 0.0023949164013190583, 0.007430285097754452, 0.12181428703879904, 0.0936710686994967, 0.040864145739047286, 0.19211140950629835, 0.055014626450767934, 0.2087830208900585, 0.11640117835707042, 0.09727485845689188, 0.1258594884015558, 0.15370033562143814, 0.2517053529027684, 0.08804554625564709, 0.12271763838464755, 0.04338588738921756, 0.1444351629505205, 0.10136216440557488, 0.008870601144656431, 0.11542279169908232, 0.08494122238413782, 0.0883804502975587, 0.10488147738219755, 0.6156199600743659, 0.5527087034094567, 0.533396218953287, 0.5239211158667731, 0.5494794653294766, 0.5320596868179468, 0.5619956233530555, 0.5486404362227173, 0.5693869553735117, 0.09785886188316162, 0.08248354301610017, 0.09303911568136869, 0.14159015572354672, 0.0790977950976729, 0.11202191847512455, 0.14163947083855366, 0.11532379911845059, 0.09681992002062634, 0.20147525931644328, 0.3470867465581985, 0.17021440779099972, 0.2542354733616484, 0.2690590319500348, 0.16900704803605782, 0.2435680181914054, 0.17842345816941485, 0.41496064552070333, 0.28819423277369727, 0.4126841506110004, 0.2965749808556497, 0.2135726349423106, 0.4160347738717697, 0.28263446391320124, 0.4344911252604202, 0.4294174533392685, 0.2677835480533758, 0.2550623803000637, 0.22947025307126878, 0.29693551626118486, 0.2097422606252921, 0.23212073231281316, 0.20614835646855567, 0.2805725728196866, 0.3134156324331272, 0.32056112263751924, 0.20727929492782327, 0.2206626039882511, 0.23226747266010683, 0.22743971959569953, 0.20016070883221926, 0.2143859768616515, 0.24830328016415337, 0.197611781273917, 0.2574293616384098, 0.19918717263200736, 0.2481211815808282, 0.20330191904921346, 0.19958938647176128, 0.46686242759684615, 0.446857488253375, 0.2385683946178513, 0.25382551831622957, 0.2036762304146621, 0.8787463449233422, 0.12688766492461, 0.1531139284635017, 0.9254921115665822, 0.20153676709249435, 0.20089718167933723, 0.12294419102665144, 0.16985282509336053, 0.936053650224628, 0.5621667065052088, 0.4996639237955829, 0.11151670322193075, 0.6420471948861803, 0.625687119275054, 0.21342792352086004, 0.21266523608536392, 0.10543454428018939, 0.6930005138070516, 0.2291477878500653, 0.21116455777173893, 0.1945187529610919, 0.2022840117932505, 0.23352297533373556, 0.19232419433426196, 0.19398981224412826, 0.20571675212538443, 0.21523323812985629, 0.1398908443987078, 0.09685509003914483, 0.10876762008682672, 0.06611824177831149, 0.09372258375167786, 0.10855401693945699, 0.13441312942908312, 0.09456015283731034, 0.11290163733043734]}, "mutation_prompt": null}
{"id": "a529a6d4-bfa3-418e-af6a-4655f3181b75", "solution": "import numpy as np\n\nclass HybridPSOLevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 30\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.alpha = 0.01  # Levy flight scaling factor\n\n    def levy_flight(self, scale=1.0):\n        u = np.random.normal(0, 1, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        return u / np.abs(v) ** (1 / scale)\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_values = np.array([float('inf')] * self.population_size)\n        global_best_position = None\n        global_best_value = float('inf')\n\n        evaluations = 0\n        improvement_rate = 0.1  # Initialize improvement rate\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate current position\n                value = func(particles[i])\n                evaluations += 1\n                \n                # Update personal best\n                if value < personal_best_values[i]:\n                    improvement_rate = 0.9 * improvement_rate + 0.1  # Increase rate if improvement is made\n                    personal_best_values[i] = value\n                    personal_best_positions[i] = particles[i]\n                    \n                # Update global best\n                if value < global_best_value:\n                    global_best_value = value\n                    global_best_position = particles[i]\n            \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                velocities[i] = (self.w * velocities[i] +\n                                 self.c1 * r1 * (personal_best_positions[i] - particles[i]) +\n                                 self.c2 * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                \n                # Apply Adaptive Levy flight for enhanced exploration\n                if np.random.rand() < improvement_rate:  # Use improvement_rate to adjust Levy flight application\n                    particles[i] += self.alpha * self.levy_flight()\n\n                # Ensure particles stay within bounds\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n        \n        return global_best_position, global_best_value", "name": "HybridPSOLevy", "description": "An improved hybrid metaheuristic combining PSO with Adaptive Levy Flights, adjusting exploration based on improvement rate.", "configspace": "", "generation": 1, "fitness": 0.230140597597971, "feedback": "", "error": "", "parent_id": "4a85165d-af24-4ed2-b50e-815ae54ccf4a", "metadata": {"aucs": [0.4445244020378475, 0.4982497558288831, 0.4665526062640283, 0.482008246030461, 0.5006416524891686, 0.484224072844766, 0.5041763597060627, 0.4850576736798121, 0.4451289012603372, 0.07237234390231351, 0.08368450996784671, 0.02626605354051703, 0.04016233189779561, 0.02549861328306413, 0.07164765417661279, 0.11486420438511302, 0.05946625721610399, 0.08775661173414007, 0.1242404538664107, 0.17133551728287333, 0.10213783779361951, 0.13977802587124466, 0.10394881653952193, 0.14419915099000513, 0.11163483232973681, 0.12017215832934613, 0.14141842297814877, 0.10064040626877135, 0.12548491388902494, 0.08509397830759902, 0.10280392238833325, 0.10605107149050785, 0.10582836274302132, 0.11898288780665967, 0.10436103553813025, 0.1329807486441561, 0.9908531104696217, 0.9921152589424678, 0.9915654276182034, 0.9831133570692111, 0.9833732459991362, 0.9855178271280255, 0.9880847624383838, 0.9891344687952025, 0.9827366474550934, 0.3216215895880905, 0.3301428649880811, 0.2944275335334443, 0.30849060649173665, 0.33480399381210935, 0.3026303778930941, 0.31647160755419423, 0.296988971095582, 0.31133799984969013, 0.711826322734441, 0.19304198883939083, 0.22456865481909605, 0.21560355739713066, 0.3481424893500785, 0.27881998607545255, 0.8443565376492475, 0.21723666089936, 0.23456066462398006, 0.1483916301439251, 0.16332189615037274, 0.16076808841479884, 0.12079763358560536, 0.15210129782080517, 0.14932755876489867, 0.15863850836884907, 0.24972747087943958, 0.16246049777544014, 0.15664968646841593, 0.13308196677106676, 0.1806175948168186, 0.18239877508618552, 0.12759982782677293, 0.17928712425002324, 0.16198409954845827, 0.0913503424520391, 0.2024699692654357, 9.999999999998899e-05, 0.0001744327222032993, 0.032588312907928185, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00019753711671133267, 9.999999999998899e-05, 9.999999999998899e-05, 0.0916511958900923, 0.060573610565509584, 0.17205681276705054, 0.08959882623492121, 0.0016477988850946979, 0.006066314750860724, 0.11292152338380568, 0.05523147252569105, 0.050938978368391896, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10013157487595559, 0.053567422668997056, 0.1290080243377013, 0.14644182411927542, 0.12207427008415017, 0.030447997214066214, 0.1304582062640065, 0.11866565156018094, 0.1177131093676087, 0.4345316906238581, 0.4371701393500028, 0.4460297740522017, 0.41513457752318317, 0.43161615797655095, 0.4187191825200305, 0.48443783441365595, 0.4388220577495444, 0.4164837773435225, 0.08815650980561385, 0.08672606597004451, 0.07482996016793586, 0.13802100274488172, 0.1264234917412339, 0.07965776498071009, 0.07183661167295718, 0.10220158822725822, 0.09687852455222312, 0.1676484960709217, 0.18290799877528285, 0.1758121401995948, 0.29892543759037193, 0.2859451365650386, 0.27579434331670316, 0.31428906397214895, 0.14304638686271742, 0.26720670659456913, 0.2904872648492116, 0.28803977907233924, 0.3109852505551074, 0.253443497680662, 0.20303077805850134, 0.3209734485065042, 0.28908254598374417, 0.3174355618337926, 0.2487674513493584, 0.16953807782932895, 0.196145343706581, 0.24648675921297514, 0.17214564762944118, 0.2048832687433071, 0.23748846607764584, 0.26066039581624645, 0.25733964403761933, 0.24500495427463653, 0.20890732174387794, 0.20314398724809923, 0.21141497798081166, 0.1906124102780854, 0.2492208299549341, 0.2173382027927595, 0.22220992194208433, 0.20069685181211705, 0.2557394921224898, 0.2271830643816336, 0.24194144131722917, 0.1885923425102456, 0.23772747789250093, 0.2056736185570287, 0.20451536293864725, 0.3012711549114957, 0.3154578052698722, 0.19055192014135125, 0.6576904642263898, 0.2001595406403971, 0.1547095856968237, 0.6925579434549778, 0.20135198109570718, 0.16979336432997916, 0.12117427512862489, 0.1701374325718703, 0.15369877183882652, 0.4921148470129414, 0.15726888423659435, 0.53869007517006, 0.49287236258666545, 0.16930877709342107, 0.21171863659718593, 0.1051281629153118, 0.10466766350551238, 0.44739584005328303, 0.19706700908663144, 0.1892808875111638, 0.17298346697295786, 0.18197267532889871, 0.1938128482841437, 0.18176150868996488, 0.19273030915888745, 0.18691779735661906, 0.1822098484218142, 0.10240514804782996, 0.08628203926419009, 0.07840429906417012, 0.08573260378265457, 0.09186988854991107, 0.08257373734486828, 0.08238963007759026, 0.0981845465566834, 0.09039331772208203]}, "mutation_prompt": null}
