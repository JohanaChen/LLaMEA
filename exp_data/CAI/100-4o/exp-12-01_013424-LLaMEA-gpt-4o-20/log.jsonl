{"id": "3da0c24a-c067-4c36-a09b-96d94e0c660b", "solution": "import numpy as np\n\nclass SwarmBiogeographyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.migration_probability = 0.2\n        self.mutation_probability = 0.1\n        self.population = self.initialize_population()\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def __call__(self, func):\n        eval_count = 0\n        fitness = np.array([func(ind) for ind in self.population])\n        eval_count += self.population_size\n        \n        best_index = np.argmin(fitness)\n        best_solution = self.population[best_index]\n        best_fitness = fitness[best_index]\n\n        while eval_count < self.budget:\n            new_population = np.copy(self.population)\n\n            for i in range(self.population_size):\n                if np.random.rand() < self.migration_probability:\n                    migrants = np.random.permutation(self.population_size)\n                    donor = migrants[0] if migrants[0] != i else migrants[1]\n                    new_population[i] = self.migrate(self.population[i], self.population[donor])\n\n                if np.random.rand() < self.mutation_probability:\n                    new_population[i] = self.mutate(new_population[i])\n                \n            new_fitness = np.array([func(ind) for ind in new_population])\n            eval_count += self.population_size\n            combined = np.vstack((self.population, new_population))\n            combined_fitness = np.hstack((fitness, new_fitness))\n\n            selected_indices = np.argsort(combined_fitness)[:self.population_size]\n            self.population = combined[selected_indices]\n            fitness = combined_fitness[selected_indices]\n\n            current_best_index = np.argmin(fitness)\n            current_best_solution = self.population[current_best_index]\n            current_best_fitness = fitness[current_best_index]\n\n            if current_best_fitness < best_fitness:\n                best_solution = current_best_solution\n                best_fitness = current_best_fitness\n\n        return best_solution\n\n    def migrate(self, habitat, donor):\n        return habitat + np.random.rand(self.dim) * (donor - habitat)\n\n    def mutate(self, solution):\n        mutation_strength = 0.1\n        return solution + mutation_strength * np.random.normal(0, 1, self.dim)", "name": "SwarmBiogeographyOptimization", "description": "A swarm-based biogeography-inspired optimization algorithm leveraging migration and mutation to explore the search space efficiently.", "configspace": "", "generation": 0, "fitness": 0.14737120096846362, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.4725868762970362, 0.4632862657596738, 0.46012098608138396, 0.3703838549471661, 0.4078790730802887, 0.4837249572636104, 0.4419522464928578, 0.40036073832381036, 0.4460830095365954, 9.999999999998899e-05, 0.003640126630110485, 0.009142209834074877, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08448544035083583, 0.07343544221454945, 0.04390722451326712, 0.08246932286322406, 0.01912561509925892, 0.054224205698671035, 0.0651685997841871, 0.05860421665435156, 0.0590741312517461, 0.07170782345269489, 0.017080358177347987, 9.999999999998899e-05, 0.07344900100237972, 0.030558295103673694, 0.008415291999338104, 0.0051314755958251634, 0.005260076960053595, 0.011819875180869688, 0.5881314395733229, 0.533532479058505, 0.6309634277516476, 0.4782668482746405, 0.49099858769312454, 0.5045170805082091, 0.3641328940964793, 0.43804755501207426, 0.28252641636907727, 0.255908360762491, 0.20882408898568894, 0.2154662351441904, 0.1962845437287153, 0.246841273931232, 0.24447995386045052, 0.21367321484058277, 0.18378805845746982, 0.11508473539421715, 0.1737688481961328, 0.12544010185059729, 0.08094796624586198, 0.11702898320517652, 0.02256141548674584, 0.1601310829957021, 0.0991054159080772, 0.04238169991168417, 0.09104963115320641, 0.12857336473200087, 0.12277291152153502, 0.1170989528650227, 0.15252647636992678, 0.09525722344971033, 0.13508249319719268, 0.1908571334616478, 0.11576845143059, 0.16863140791065256, 0.13693510318608482, 0.115196797927823, 0.09590765382355115, 0.13251275019436326, 0.17142953655412896, 0.12013538804851887, 0.16021643742396574, 0.1364517529854511, 0.1440642324342316, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0641135085038701, 0.026299075878893352, 0.06868444638618731, 0.05139374934698848, 0.058460563485433714, 0.019573391113901217, 0.1322725140166927, 0.029046357110522836, 0.06173694168391375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0478393600103022, 0.05887745264187905, 0.05086284008999631, 0.056642584418993835, 0.06723853746587427, 0.08319033412600274, 0.07965893404317526, 0.1313197959574931, 0.033234069763738994, 0.41542348783800176, 0.4568043571114615, 0.37287623629091027, 0.3273690130651099, 0.3667077734577989, 0.34653993339885236, 0.3895248733076656, 0.3737902827555568, 0.35632470632889823, 0.038188439297639154, 0.02004746608679031, 0.004967906656673238, 0.09025900071883408, 0.03626832280705461, 0.05610610011374717, 0.04266434360644744, 0.07380474119958724, 0.07169297294752286, 0.15885645432933548, 0.22790752220439559, 0.2666722046771338, 0.2457844957431493, 0.20877406531976272, 0.1737111020215416, 0.2111408328057086, 0.20898500425677247, 0.12744547908876824, 0.1383225637270965, 0.1445215425330385, 0.11603891895075391, 0.1602243180614178, 0.18370175374211073, 0.11148226408514128, 0.13616686261581767, 0.14986890214030812, 0.12503448386449711, 0.0988376047681937, 0.09283365422831358, 0.12155869920224582, 0.10847511748084615, 0.0912546530375492, 0.141445835949359, 0.07376811839288167, 0.12879086927021632, 0.05048821556526695, 0.20510000615471824, 0.16041666078130334, 0.1959652395099426, 0.15299337273248925, 0.19804449594669127, 0.19012850760339073, 0.1542757658751197, 0.16057750301960483, 0.16156210170591623, 0.15920696115103894, 0.18168386384668067, 0.17131390148735004, 0.18398978190608262, 0.15865469438160418, 0.18633522950140025, 0.13755933789467711, 0.18129620428761528, 0.16458144851488488, 0.17924673359796817, 0.18807616057433352, 0.15210042641191923, 0.16731426425020368, 0.19932562996278536, 0.5863324453045524, 0.14952394476202313, 0.1124219372621772, 0.15039882969763496, 0.08156002624417957, 0.194800709453965, 0.353914482131241, 0.39987594870627163, 0.15982070872647347, 0.18843545067363898, 0.09342557904393156, 0.09335428461040463, 0.09351130721816048, 0.15714285582224907, 0.16330793486416517, 0.1657807565698427, 0.14960254481682644, 0.17283014116477058, 0.168990018045712, 0.19305585287595395, 0.17218218112345496, 0.15975750113154463, 0.06107182479218187, 0.03186703400129276, 0.06166999295203479, 0.04425977816374249, 0.0462995279746381, 0.04780825648922804, 0.0380570926303222, 0.05891357842062428, 0.061585495262571066]}, "mutation_prompt": null}
{"id": "fcd17f6a-dfc3-42c2-b40c-10ff6479a155", "solution": "import numpy as np\n\nclass SwarmBiogeographyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.migration_probability = 0.2\n        self.mutation_probability = 0.1\n        self.population = self.initialize_population()\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def __call__(self, func):\n        eval_count = 0\n        fitness = np.array([func(ind) for ind in self.population])\n        eval_count += self.population_size\n        \n        best_index = np.argmin(fitness)\n        best_solution = self.population[best_index]\n        best_fitness = fitness[best_index]\n\n        while eval_count < self.budget:\n            new_population = np.copy(self.population)\n\n            for i in range(self.population_size):\n                if np.random.rand() < self.migration_probability:\n                    migrants = np.random.permutation(self.population_size)\n                    donor = migrants[0] if migrants[0] != i else migrants[1]\n                    new_population[i] = self.migrate(self.population[i], self.population[donor])\n\n                if np.random.rand() < self.mutation_probability:\n                    new_population[i] = self.mutate(new_population[i])\n                \n            new_fitness = np.array([func(ind) for ind in new_population])\n            eval_count += self.population_size\n            combined = np.vstack((self.population, new_population))\n            combined_fitness = np.hstack((fitness, new_fitness))\n\n            selected_indices = np.argsort(combined_fitness)[:self.population_size]\n            self.population = combined[selected_indices]\n            fitness = combined_fitness[selected_indices]\n\n            current_best_index = np.argmin(fitness)\n            current_best_solution = self.population[current_best_index]\n            current_best_fitness = fitness[current_best_index]\n\n            if current_best_fitness < best_fitness:\n                best_solution = current_best_solution\n                best_fitness = current_best_fitness\n\n        return best_solution\n\n    def migrate(self, habitat, donor):\n        return habitat + np.random.rand(self.dim) * (donor - habitat)\n\n    def mutate(self, solution):\n        mutation_strength = 0.1\n        return solution + mutation_strength * np.random.normal(0, 1, self.dim)", "name": "SwarmBiogeographyOptimization", "description": "A swarm-based biogeography-inspired optimization algorithm leveraging migration and mutation to explore the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3da0c24a-c067-4c36-a09b-96d94e0c660b", "metadata": {"aucs": [0.4725868762970362, 0.4632862657596738, 0.46012098608138396, 0.3703838549471661, 0.4078790730802887, 0.4837249572636104, 0.4419522464928578, 0.40036073832381036, 0.4460830095365954, 9.999999999998899e-05, 0.003640126630110485, 0.009142209834074877, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08448544035083583, 0.07343544221454945, 0.04390722451326712, 0.08246932286322406, 0.01912561509925892, 0.054224205698671035, 0.0651685997841871, 0.05860421665435156, 0.0590741312517461, 0.07170782345269489, 0.017080358177347987, 9.999999999998899e-05, 0.07344900100237972, 0.030558295103673694, 0.008415291999338104, 0.0051314755958251634, 0.005260076960053595, 0.011819875180869688, 0.5881314395733229, 0.533532479058505, 0.6309634277516476, 0.4782668482746405, 0.49099858769312454, 0.5045170805082091, 0.3641328940964793, 0.43804755501207426, 0.28252641636907727, 0.255908360762491, 0.20882408898568894, 0.2154662351441904, 0.1962845437287153, 0.246841273931232, 0.24447995386045052, 0.21367321484058277, 0.18378805845746982, 0.11508473539421715, 0.1737688481961328, 0.12544010185059729, 0.08094796624586198, 0.11702898320517652, 0.02256141548674584, 0.1601310829957021, 0.0991054159080772, 0.04238169991168417, 0.09104963115320641, 0.12857336473200087, 0.12277291152153502, 0.1170989528650227, 0.15252647636992678, 0.09525722344971033, 0.13508249319719268, 0.1908571334616478, 0.11576845143059, 0.16863140791065256, 0.13693510318608482, 0.115196797927823, 0.09590765382355115, 0.13251275019436326, 0.17142953655412896, 0.12013538804851887, 0.16021643742396574, 0.1364517529854511, 0.1440642324342316, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0641135085038701, 0.026299075878893352, 0.06868444638618731, 0.05139374934698848, 0.058460563485433714, 0.019573391113901217, 0.1322725140166927, 0.029046357110522836, 0.06173694168391375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0478393600103022, 0.05887745264187905, 0.05086284008999631, 0.056642584418993835, 0.06723853746587427, 0.08319033412600274, 0.07965893404317526, 0.1313197959574931, 0.033234069763738994, 0.41542348783800176, 0.4568043571114615, 0.37287623629091027, 0.3273690130651099, 0.3667077734577989, 0.34653993339885236, 0.3895248733076656, 0.3737902827555568, 0.35632470632889823, 0.038188439297639154, 0.02004746608679031, 0.004967906656673238, 0.09025900071883408, 0.03626832280705461, 0.05610610011374717, 0.04266434360644744, 0.07380474119958724, 0.07169297294752286, 0.15885645432933548, 0.22790752220439559, 0.2666722046771338, 0.2457844957431493, 0.20877406531976272, 0.1737111020215416, 0.2111408328057086, 0.20898500425677247, 0.12744547908876824, 0.1383225637270965, 0.1445215425330385, 0.11603891895075391, 0.1602243180614178, 0.18370175374211073, 0.11148226408514128, 0.13616686261581767, 0.14986890214030812, 0.12503448386449711, 0.0988376047681937, 0.09283365422831358, 0.12155869920224582, 0.10847511748084615, 0.0912546530375492, 0.141445835949359, 0.07376811839288167, 0.12879086927021632, 0.05048821556526695, 0.20510000615471824, 0.16041666078130334, 0.1959652395099426, 0.15299337273248925, 0.19804449594669127, 0.19012850760339073, 0.1542757658751197, 0.16057750301960483, 0.16156210170591623, 0.15920696115103894, 0.18168386384668067, 0.17131390148735004, 0.18398978190608262, 0.15865469438160418, 0.18633522950140025, 0.13755933789467711, 0.18129620428761528, 0.16458144851488488, 0.17924673359796817, 0.18807616057433352, 0.15210042641191923, 0.16731426425020368, 0.19932562996278536, 0.5863324453045524, 0.14952394476202313, 0.1124219372621772, 0.15039882969763496, 0.08156002624417957, 0.194800709453965, 0.353914482131241, 0.39987594870627163, 0.15982070872647347, 0.18843545067363898, 0.09342557904393156, 0.09335428461040463, 0.09351130721816048, 0.15714285582224907, 0.16330793486416517, 0.1657807565698427, 0.14960254481682644, 0.17283014116477058, 0.168990018045712, 0.19305585287595395, 0.17218218112345496, 0.15975750113154463, 0.06107182479218187, 0.03186703400129276, 0.06166999295203479, 0.04425977816374249, 0.0462995279746381, 0.04780825648922804, 0.0380570926303222, 0.05891357842062428, 0.061585495262571066]}, "mutation_prompt": null}
