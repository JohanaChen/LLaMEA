{"id": "9e42f665-6186-45d0-aeb1-edb69d1eec72", "solution": "import numpy as np\n\nclass HybridPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia = 0.7\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.7\n\n    def __call__(self, func):\n        np.random.seed()\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[best_idx]\n        global_best_score = personal_best_scores[best_idx]\n\n        evaluations = self.population_size\n\n        def mutate(target_idx):\n            indexes = [idx for idx in range(self.population_size) if idx != target_idx]\n            a, b, c = np.random.choice(indexes, 3, replace=False)\n            mutant_vector = particles[a] + self.mutation_factor * (particles[b] - particles[c])\n            return np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Update velocity and position using PSO rules\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_component = self.cognitive_weight * r1 * (personal_best_positions[i] - particles[i])\n                social_component = self.social_weight * r2 * (global_best_position - particles[i])\n                velocities[i] = (self.inertia * velocities[i] +\n                                 cognitive_component +\n                                 social_component)\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                # Differential mutation\n                mutant_vector = mutate(i)\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, particles[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                # Evaluate the trial vector\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                # Replace if the trial vector is better\n                if trial_score < personal_best_scores[i]:\n                    personal_best_scores[i] = trial_score\n                    personal_best_positions[i] = trial_vector\n\n                    # Update global best if necessary\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSO", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation balancing exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.22070231844088237, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.47541149049873743, 0.5020280091280502, 0.5360762412879458, 0.5591571103861699, 0.5795581181370069, 0.5490608231376697, 0.5090865239271187, 0.5254704575620773, 0.5366264685786393, 0.17164962946100026, 0.20469694416179252, 0.19519308603414998, 0.2006890204876357, 0.19691987111304576, 0.18159070970385116, 0.19432989927978217, 0.20532845668670752, 0.20523387564885331, 0.08882422649301547, 0.10628904086488655, 0.10881046027142116, 0.11201945321109885, 0.09011284532403974, 0.10412297393182457, 0.08898176343648534, 0.1004669606349533, 0.10237118274566581, 0.09727621308692758, 0.10259330823827073, 0.10404370450462264, 0.10920280896124546, 0.10526691968685487, 0.08676338528989203, 0.09207179625253392, 0.11078765701096471, 0.09296689788411039, 0.982198506454353, 0.9811699237313569, 0.9843388202247916, 0.9862281014408275, 0.986003214181091, 0.9873708544809703, 0.9821172079140923, 0.987233414235299, 0.9851796808926302, 0.25375763211020175, 0.24436050222146566, 0.2335042432102883, 0.23980196497757733, 0.2723397406787199, 0.2689930533945487, 0.27944920880479307, 0.2747724546878276, 0.273811951054744, 0.28001705800096366, 0.36976406352138225, 0.27129963421343894, 0.2442001108978521, 0.25490880001187355, 0.2655916085357708, 0.2686842008222716, 0.2052568649915445, 0.5371576747622366, 0.1690324490211147, 0.1343330560040633, 0.1394599399654569, 0.14687834885283413, 0.13662415521623517, 0.13185610016722826, 0.14089258147204442, 0.13961381016534158, 0.1116064831816489, 0.10881201558958054, 0.1531891110016098, 0.1519783103454152, 0.12679954968584495, 0.13903501472696966, 0.11268271079189784, 0.08044298755599066, 0.16567226534138646, 0.14857382749194037, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026094073861829603, 9.999999999998899e-05, 0.0005368471148990972, 0.00034433974289682645, 0.039732593620357526, 0.04215334785757874, 0.06693960586713021, 0.0646696301666867, 0.10011157605485133, 0.032662784004728884, 0.06949194397586489, 0.04626727589222879, 0.051074385271491884, 0.017850404622909988, 0.024395586645695078, 0.020128288419477003, 0.02960304147530446, 0.0008014036610222153, 0.027057615319631023, 0.024212365059856134, 0.021747749420666707, 0.019117008434130334, 0.07041798962663015, 0.10809723906696267, 0.05606589004087059, 0.10712655978907337, 0.08372122526886328, 0.056181695559983424, 0.0754449568057034, 0.09430970178338027, 0.052604535568055555, 0.4202129251912725, 0.38299863881226026, 0.4038367048000665, 0.42883298212466125, 0.4161817372447534, 0.4230550210481824, 0.39546206423815355, 0.38749139641048547, 0.40370710366710405, 0.0915620418511669, 0.09059548444500265, 0.10536808330186032, 0.08251666092705146, 0.07987157291280977, 0.0802502089225271, 0.09778650396327304, 0.08484267744595331, 0.08251493644138808, 0.16941617757528127, 0.13532877192805937, 0.15027724063735182, 0.16514478315546333, 0.15744829133905391, 0.13024898108135363, 0.15157633760344524, 0.20988484419481535, 0.1475130773812069, 0.2529544977564361, 0.2752811467180487, 0.287174522980984, 0.2687870706838832, 0.24451583877817262, 0.27299041853876516, 0.30017644283485434, 0.3066408952006292, 0.292007128639992, 0.1985260923370218, 0.19260772843646579, 0.1953808023624437, 0.183339727767029, 0.19394125826192088, 0.2136574420777192, 0.21724802224360007, 0.22334723803851764, 0.2215284406214475, 0.18672753460671798, 0.17629052815902746, 0.19230040157980066, 0.22060228007831484, 0.19690984024895997, 0.17152970942353551, 0.1764831883963518, 0.1879324585891301, 0.18312577601114732, 0.1774852269784164, 0.19169508351324516, 0.18984999081991205, 0.1717818090052533, 0.1735451428094137, 0.1820417529509627, 0.18613377015413024, 0.19328922618787703, 0.17095720694497052, 0.5551730192238981, 0.18120322866013927, 0.18061246489122296, 0.18651905747262032, 0.5136101347544576, 0.32302134688735984, 0.19151702323550768, 0.16862458983941053, 0.6578321552928958, 0.16834837458319163, 0.19535353401682665, 0.34990247275054864, 0.352281791825932, 0.3028788776488529, 0.34574444021645045, 0.39833898786067445, 0.12169566233924345, 0.5094731445402214, 0.17843846608086078, 0.18306530536058585, 0.1761078141650776, 0.1847434620164714, 0.18319430634904832, 0.19374137736033326, 0.17389016450651162, 0.1969240101646591, 0.17410127942760156, 0.07097640925847881, 0.0727632523299373, 0.07581389244251846, 0.0779582030475805, 0.07828660292304246, 0.07815538854272586, 0.07912988534783871, 0.07492823923167047, 0.07700832917977551]}, "mutation_prompt": null}
{"id": "eb379692-be4d-4b72-9cb5-ee3f3513fd9f", "solution": "import numpy as np\n\nclass HybridPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia = 0.7\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.7\n\n    def __call__(self, func):\n        np.random.seed()\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[best_idx]\n        global_best_score = personal_best_scores[best_idx]\n\n        evaluations = self.population_size\n\n        def mutate(target_idx):\n            indexes = [idx for idx in range(self.population_size) if idx != target_idx]\n            a, b, c = np.random.choice(indexes, 3, replace=False)\n            mutant_vector = particles[a] + self.mutation_factor * (particles[b] - particles[c])\n            return np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Update velocity and position using PSO rules\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_component = self.cognitive_weight * r1 * (personal_best_positions[i] - particles[i])\n                social_component = self.social_weight * r2 * (global_best_position - particles[i])\n                velocities[i] = (self.inertia * velocities[i] +\n                                 cognitive_component +\n                                 social_component)\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                # Differential mutation\n                mutant_vector = mutate(i)\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, particles[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                # Evaluate the trial vector\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                # Replace if the trial vector is better\n                if trial_score < personal_best_scores[i]:\n                    personal_best_scores[i] = trial_score\n                    personal_best_positions[i] = trial_vector\n\n                    # Update global best if necessary\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSO", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation balancing exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e42f665-6186-45d0-aeb1-edb69d1eec72", "metadata": {"aucs": [0.47541149049873743, 0.5020280091280502, 0.5360762412879458, 0.5591571103861699, 0.5795581181370069, 0.5490608231376697, 0.5090865239271187, 0.5254704575620773, 0.5366264685786393, 0.17164962946100026, 0.20469694416179252, 0.19519308603414998, 0.2006890204876357, 0.19691987111304576, 0.18159070970385116, 0.19432989927978217, 0.20532845668670752, 0.20523387564885331, 0.08882422649301547, 0.10628904086488655, 0.10881046027142116, 0.11201945321109885, 0.09011284532403974, 0.10412297393182457, 0.08898176343648534, 0.1004669606349533, 0.10237118274566581, 0.09727621308692758, 0.10259330823827073, 0.10404370450462264, 0.10920280896124546, 0.10526691968685487, 0.08676338528989203, 0.09207179625253392, 0.11078765701096471, 0.09296689788411039, 0.982198506454353, 0.9811699237313569, 0.9843388202247916, 0.9862281014408275, 0.986003214181091, 0.9873708544809703, 0.9821172079140923, 0.987233414235299, 0.9851796808926302, 0.25375763211020175, 0.24436050222146566, 0.2335042432102883, 0.23980196497757733, 0.2723397406787199, 0.2689930533945487, 0.27944920880479307, 0.2747724546878276, 0.273811951054744, 0.28001705800096366, 0.36976406352138225, 0.27129963421343894, 0.2442001108978521, 0.25490880001187355, 0.2655916085357708, 0.2686842008222716, 0.2052568649915445, 0.5371576747622366, 0.1690324490211147, 0.1343330560040633, 0.1394599399654569, 0.14687834885283413, 0.13662415521623517, 0.13185610016722826, 0.14089258147204442, 0.13961381016534158, 0.1116064831816489, 0.10881201558958054, 0.1531891110016098, 0.1519783103454152, 0.12679954968584495, 0.13903501472696966, 0.11268271079189784, 0.08044298755599066, 0.16567226534138646, 0.14857382749194037, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026094073861829603, 9.999999999998899e-05, 0.0005368471148990972, 0.00034433974289682645, 0.039732593620357526, 0.04215334785757874, 0.06693960586713021, 0.0646696301666867, 0.10011157605485133, 0.032662784004728884, 0.06949194397586489, 0.04626727589222879, 0.051074385271491884, 0.017850404622909988, 0.024395586645695078, 0.020128288419477003, 0.02960304147530446, 0.0008014036610222153, 0.027057615319631023, 0.024212365059856134, 0.021747749420666707, 0.019117008434130334, 0.07041798962663015, 0.10809723906696267, 0.05606589004087059, 0.10712655978907337, 0.08372122526886328, 0.056181695559983424, 0.0754449568057034, 0.09430970178338027, 0.052604535568055555, 0.4202129251912725, 0.38299863881226026, 0.4038367048000665, 0.42883298212466125, 0.4161817372447534, 0.4230550210481824, 0.39546206423815355, 0.38749139641048547, 0.40370710366710405, 0.0915620418511669, 0.09059548444500265, 0.10536808330186032, 0.08251666092705146, 0.07987157291280977, 0.0802502089225271, 0.09778650396327304, 0.08484267744595331, 0.08251493644138808, 0.16941617757528127, 0.13532877192805937, 0.15027724063735182, 0.16514478315546333, 0.15744829133905391, 0.13024898108135363, 0.15157633760344524, 0.20988484419481535, 0.1475130773812069, 0.2529544977564361, 0.2752811467180487, 0.287174522980984, 0.2687870706838832, 0.24451583877817262, 0.27299041853876516, 0.30017644283485434, 0.3066408952006292, 0.292007128639992, 0.1985260923370218, 0.19260772843646579, 0.1953808023624437, 0.183339727767029, 0.19394125826192088, 0.2136574420777192, 0.21724802224360007, 0.22334723803851764, 0.2215284406214475, 0.18672753460671798, 0.17629052815902746, 0.19230040157980066, 0.22060228007831484, 0.19690984024895997, 0.17152970942353551, 0.1764831883963518, 0.1879324585891301, 0.18312577601114732, 0.1774852269784164, 0.19169508351324516, 0.18984999081991205, 0.1717818090052533, 0.1735451428094137, 0.1820417529509627, 0.18613377015413024, 0.19328922618787703, 0.17095720694497052, 0.5551730192238981, 0.18120322866013927, 0.18061246489122296, 0.18651905747262032, 0.5136101347544576, 0.32302134688735984, 0.19151702323550768, 0.16862458983941053, 0.6578321552928958, 0.16834837458319163, 0.19535353401682665, 0.34990247275054864, 0.352281791825932, 0.3028788776488529, 0.34574444021645045, 0.39833898786067445, 0.12169566233924345, 0.5094731445402214, 0.17843846608086078, 0.18306530536058585, 0.1761078141650776, 0.1847434620164714, 0.18319430634904832, 0.19374137736033326, 0.17389016450651162, 0.1969240101646591, 0.17410127942760156, 0.07097640925847881, 0.0727632523299373, 0.07581389244251846, 0.0779582030475805, 0.07828660292304246, 0.07815538854272586, 0.07912988534783871, 0.07492823923167047, 0.07700832917977551]}, "mutation_prompt": null}
