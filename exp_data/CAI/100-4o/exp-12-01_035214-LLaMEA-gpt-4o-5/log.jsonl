{"id": "a53d7bdc-31c9-4164-824c-df881e642145", "solution": "import numpy as np\n\nclass AdaptiveDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10\n        self.hmcr = 0.9  # Harmony Memory Consideration Rate\n        self.par = 0.3   # Pitch Adjustment Rate\n        self.delta = 0.1\n        self.f = 0.8     # Differential weight\n        self.cr = 0.9    # Crossover probability\n\n    def __call__(self, func):\n        # Initialize harmony memory\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, \n                                           (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        evaluations = self.harmony_memory_size\n\n        while evaluations < self.budget:\n            # Generate a new harmony\n            new_harmony = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    # Choose from harmony memory\n                    new_harmony[i] = harmony_memory[np.random.randint(0, self.harmony_memory_size), i]\n                    if np.random.rand() < self.par:\n                        # Pitch adjustment\n                        new_harmony[i] += np.random.uniform(-self.delta, self.delta)\n                        new_harmony[i] = np.clip(new_harmony[i], self.lower_bound, self.upper_bound)\n                else:\n                    # Random selection\n                    new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n            \n            # Differential mutation and crossover\n            if evaluations + 3 < self.budget and self.harmony_memory_size >= 3:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                a, b, c = harmony_memory[idxs]\n                mutant = np.clip(a + self.f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, new_harmony)\n                trial_score = func(trial)\n                evaluations += 1\n\n                # Decide whether to replace the new_harmony with trial\n                new_harmony = trial if trial_score < func(new_harmony) else new_harmony\n            \n            # Evaluate and potentially update harmony memory\n            new_score = func(new_harmony)\n            evaluations += 1\n\n            if new_score < np.max(harmony_scores):\n                # Update harmony memory\n                worst_idx = np.argmax(harmony_scores)\n                harmony_memory[worst_idx] = new_harmony\n                harmony_scores[worst_idx] = new_score\n\n        # Return the best found solution\n        best_idx = np.argmin(harmony_scores)\n        return harmony_memory[best_idx]", "name": "AdaptiveDifferentialHarmonySearch", "description": "Adaptive Differential Harmony Search combines Differential Evolution and Harmony Search to adaptively explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.31764623624102223, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.9113396710033415, 0.886267202173098, 0.9047268184092299, 0.8915909846225498, 0.8326282973006002, 0.895384808861585, 0.9177792285342794, 0.8170527888411848, 0.9208958845196998, 0.327997970112168, 0.8074299917783614, 0.6221686665579205, 0.572647929478146, 0.6524177055919664, 0.7242229752831765, 0.8152176236555176, 0.6686436559785571, 0.6457487992713198, 0.18069517093739673, 0.14869757886285973, 0.16784495422373324, 0.14407080077042433, 0.15552501278796826, 0.18733395942022912, 0.1482170417034715, 0.14482460548312392, 0.24111423793863584, 0.12993814375634305, 0.15517963256415368, 0.15465408338053932, 0.13814117208714638, 0.19139373235433865, 0.1219572477522528, 0.1805623721722257, 0.14645795458175048, 0.17860306059345132, 0.9802893579494312, 0.9344758955599896, 0.9548507233738474, 0.9764235912486249, 0.9605268497376737, 0.9481743456671858, 0.9580426483311844, 0.9464356055059168, 0.9508036901962781, 0.41670571309144866, 0.4387846804248279, 0.43863980201448327, 0.4646869593782821, 0.5505595319703298, 0.5801460703531748, 0.44697864774366114, 0.3182904581528091, 0.4450030523760967, 0.2548381474398127, 0.16864141986622394, 0.2261798985742599, 0.372131876289164, 0.17305333146871948, 0.8367803940033234, 0.8588384061461012, 0.24265928184577568, 0.8004509923068317, 0.15698259538189507, 0.16432161638195286, 0.1961761222674443, 0.18824236791465299, 0.18167863046260257, 0.13094665977019104, 0.3967744910326545, 0.24382716561747797, 0.2313109840738523, 0.20423617661285132, 0.11904437317183769, 0.1889381008146237, 0.20228956636046813, 0.18625429950991623, 0.32978339731221673, 0.1973308211815813, 0.13933704502740163, 9.999999999998899e-05, 0.2902911998312502, 0.12739432800770556, 9.999999999998899e-05, 0.09457885529034105, 0.043669707006794845, 0.04442960497375248, 0.07506243316771177, 0.042579228990909934, 0.07751017587952824, 0.04021129150991054, 0.09157894575543801, 0.1880046690781897, 0.11195519616035055, 0.03652022930727272, 0.11124417448483526, 0.21104571000184114, 0.28457081466199774, 0.15868387146600615, 0.10027838460066907, 0.22335663231885705, 0.05435090276096599, 0.09327105998883634, 0.13405517145283652, 0.18118653040815857, 0.10919480864359632, 0.16182486794699202, 0.15205151256199734, 0.15166941658537636, 0.315451020987764, 0.10752221543754881, 0.12449771362033135, 0.17877995437592964, 0.21606236804964518, 0.08420790655066102, 0.13424300183579396, 0.3005279381095083, 0.5981104370358206, 0.4623265708637928, 0.5472008885941009, 0.505110607675143, 0.5512076284163534, 0.5740370471090759, 0.7332826255959539, 0.5438053935454871, 0.6364045624510082, 0.08052164088954872, 0.07131702595414813, 0.18698126022572148, 0.11601470109956391, 0.08210849347065685, 0.08716229146538357, 0.10620263804852748, 0.13803902310573357, 0.0900080836292878, 0.3172283288144341, 0.18739684194902428, 0.6711866429716697, 0.4389663131823549, 0.14957437801341533, 0.22529199047486348, 0.1833479114540496, 0.16704847993127736, 0.14095611932901497, 0.3160185711768224, 0.3970734350770805, 0.2616688111696659, 0.34577703746951816, 0.4495749474424964, 0.2895607540538855, 0.5153077886376012, 0.24998629800712824, 0.1899407176780603, 0.32915997277786113, 0.1491742731467357, 0.3144477556263069, 0.28969095293273417, 0.18861398774558935, 0.37215033135235864, 0.22433735986794823, 0.41339796984440713, 0.2412884181030136, 0.1860679596678667, 0.20002669776841975, 0.21222262919766244, 0.23642038121312203, 0.2359688509264497, 0.2379098338166884, 0.218539921492246, 0.22516320069743911, 0.2534826607078903, 0.2270756357317042, 0.19908261784253778, 0.18780591455727413, 0.18661897048513154, 0.20927246987423997, 0.2336598855375075, 0.2265557414519379, 0.22706787973472986, 0.22858761265630168, 0.18726977954660107, 0.18840918176304888, 0.16456918261039466, 0.9290506534670252, 0.8399487817806738, 0.19761814627734908, 0.8801038839222521, 0.20961646280881363, 0.16074708713772923, 0.4476823491873929, 0.16943801226041744, 0.12759608653284937, 0.15791971709202102, 0.4360710463305789, 0.21170752785761204, 0.20836010631354795, 0.4682113093339041, 0.20688166196543212, 0.22488792006555436, 0.17325554989503344, 0.1875866082699844, 0.25383559012726487, 0.17866950110955682, 0.1798289401202906, 0.18990039258141156, 0.20514060996380046, 0.20271935637793215, 0.09963490312558676, 0.08287646880929644, 0.10315548397822127, 0.1164803008514127, 0.09314573355393152, 0.08560213009441009, 0.11675606272458572, 0.09562847805431596, 0.08944646234566989]}, "mutation_prompt": null}
{"id": "eed86938-1b5f-4564-8785-2edd56eb0eec", "solution": "import numpy as np\n\nclass AdaptiveDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10\n        self.hmcr = 0.9  # Harmony Memory Consideration Rate\n        self.par = 0.3   # Pitch Adjustment Rate\n        self.delta = 0.1\n        self.f = 0.8     # Differential weight\n        self.cr = 0.9    # Crossover probability\n\n    def __call__(self, func):\n        # Initialize harmony memory\n        harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, \n                                           (self.harmony_memory_size, self.dim))\n        harmony_scores = np.array([func(h) for h in harmony_memory])\n        evaluations = self.harmony_memory_size\n\n        while evaluations < self.budget:\n            # Generate a new harmony\n            new_harmony = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    # Choose from harmony memory\n                    new_harmony[i] = harmony_memory[np.random.randint(0, self.harmony_memory_size), i]\n                    if np.random.rand() < self.par:\n                        # Pitch adjustment\n                        new_harmony[i] += np.random.uniform(-self.delta, self.delta)\n                        new_harmony[i] = np.clip(new_harmony[i], self.lower_bound, self.upper_bound)\n                else:\n                    # Random selection\n                    new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n            \n            # Differential mutation and crossover\n            if evaluations + 3 < self.budget and self.harmony_memory_size >= 3:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                a, b, c = harmony_memory[idxs]\n                mutant = np.clip(a + self.f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, new_harmony)\n                trial_score = func(trial)\n                evaluations += 1\n\n                # Decide whether to replace the new_harmony with trial\n                new_harmony = trial if trial_score < func(new_harmony) else new_harmony\n            \n            # Evaluate and potentially update harmony memory\n            new_score = func(new_harmony)\n            evaluations += 1\n\n            if new_score < np.max(harmony_scores):\n                # Update harmony memory\n                worst_idx = np.argmax(harmony_scores)\n                harmony_memory[worst_idx] = new_harmony\n                harmony_scores[worst_idx] = new_score\n\n        # Return the best found solution\n        best_idx = np.argmin(harmony_scores)\n        return harmony_memory[best_idx]", "name": "AdaptiveDifferentialHarmonySearch", "description": "Adaptive Differential Harmony Search combines Differential Evolution and Harmony Search to adaptively explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a53d7bdc-31c9-4164-824c-df881e642145", "metadata": {"aucs": [0.9113396710033415, 0.886267202173098, 0.9047268184092299, 0.8915909846225498, 0.8326282973006002, 0.895384808861585, 0.9177792285342794, 0.8170527888411848, 0.9208958845196998, 0.327997970112168, 0.8074299917783614, 0.6221686665579205, 0.572647929478146, 0.6524177055919664, 0.7242229752831765, 0.8152176236555176, 0.6686436559785571, 0.6457487992713198, 0.18069517093739673, 0.14869757886285973, 0.16784495422373324, 0.14407080077042433, 0.15552501278796826, 0.18733395942022912, 0.1482170417034715, 0.14482460548312392, 0.24111423793863584, 0.12993814375634305, 0.15517963256415368, 0.15465408338053932, 0.13814117208714638, 0.19139373235433865, 0.1219572477522528, 0.1805623721722257, 0.14645795458175048, 0.17860306059345132, 0.9802893579494312, 0.9344758955599896, 0.9548507233738474, 0.9764235912486249, 0.9605268497376737, 0.9481743456671858, 0.9580426483311844, 0.9464356055059168, 0.9508036901962781, 0.41670571309144866, 0.4387846804248279, 0.43863980201448327, 0.4646869593782821, 0.5505595319703298, 0.5801460703531748, 0.44697864774366114, 0.3182904581528091, 0.4450030523760967, 0.2548381474398127, 0.16864141986622394, 0.2261798985742599, 0.372131876289164, 0.17305333146871948, 0.8367803940033234, 0.8588384061461012, 0.24265928184577568, 0.8004509923068317, 0.15698259538189507, 0.16432161638195286, 0.1961761222674443, 0.18824236791465299, 0.18167863046260257, 0.13094665977019104, 0.3967744910326545, 0.24382716561747797, 0.2313109840738523, 0.20423617661285132, 0.11904437317183769, 0.1889381008146237, 0.20228956636046813, 0.18625429950991623, 0.32978339731221673, 0.1973308211815813, 0.13933704502740163, 9.999999999998899e-05, 0.2902911998312502, 0.12739432800770556, 9.999999999998899e-05, 0.09457885529034105, 0.043669707006794845, 0.04442960497375248, 0.07506243316771177, 0.042579228990909934, 0.07751017587952824, 0.04021129150991054, 0.09157894575543801, 0.1880046690781897, 0.11195519616035055, 0.03652022930727272, 0.11124417448483526, 0.21104571000184114, 0.28457081466199774, 0.15868387146600615, 0.10027838460066907, 0.22335663231885705, 0.05435090276096599, 0.09327105998883634, 0.13405517145283652, 0.18118653040815857, 0.10919480864359632, 0.16182486794699202, 0.15205151256199734, 0.15166941658537636, 0.315451020987764, 0.10752221543754881, 0.12449771362033135, 0.17877995437592964, 0.21606236804964518, 0.08420790655066102, 0.13424300183579396, 0.3005279381095083, 0.5981104370358206, 0.4623265708637928, 0.5472008885941009, 0.505110607675143, 0.5512076284163534, 0.5740370471090759, 0.7332826255959539, 0.5438053935454871, 0.6364045624510082, 0.08052164088954872, 0.07131702595414813, 0.18698126022572148, 0.11601470109956391, 0.08210849347065685, 0.08716229146538357, 0.10620263804852748, 0.13803902310573357, 0.0900080836292878, 0.3172283288144341, 0.18739684194902428, 0.6711866429716697, 0.4389663131823549, 0.14957437801341533, 0.22529199047486348, 0.1833479114540496, 0.16704847993127736, 0.14095611932901497, 0.3160185711768224, 0.3970734350770805, 0.2616688111696659, 0.34577703746951816, 0.4495749474424964, 0.2895607540538855, 0.5153077886376012, 0.24998629800712824, 0.1899407176780603, 0.32915997277786113, 0.1491742731467357, 0.3144477556263069, 0.28969095293273417, 0.18861398774558935, 0.37215033135235864, 0.22433735986794823, 0.41339796984440713, 0.2412884181030136, 0.1860679596678667, 0.20002669776841975, 0.21222262919766244, 0.23642038121312203, 0.2359688509264497, 0.2379098338166884, 0.218539921492246, 0.22516320069743911, 0.2534826607078903, 0.2270756357317042, 0.19908261784253778, 0.18780591455727413, 0.18661897048513154, 0.20927246987423997, 0.2336598855375075, 0.2265557414519379, 0.22706787973472986, 0.22858761265630168, 0.18726977954660107, 0.18840918176304888, 0.16456918261039466, 0.9290506534670252, 0.8399487817806738, 0.19761814627734908, 0.8801038839222521, 0.20961646280881363, 0.16074708713772923, 0.4476823491873929, 0.16943801226041744, 0.12759608653284937, 0.15791971709202102, 0.4360710463305789, 0.21170752785761204, 0.20836010631354795, 0.4682113093339041, 0.20688166196543212, 0.22488792006555436, 0.17325554989503344, 0.1875866082699844, 0.25383559012726487, 0.17866950110955682, 0.1798289401202906, 0.18990039258141156, 0.20514060996380046, 0.20271935637793215, 0.09963490312558676, 0.08287646880929644, 0.10315548397822127, 0.1164803008514127, 0.09314573355393152, 0.08560213009441009, 0.11675606272458572, 0.09562847805431596, 0.08944646234566989]}, "mutation_prompt": null}
