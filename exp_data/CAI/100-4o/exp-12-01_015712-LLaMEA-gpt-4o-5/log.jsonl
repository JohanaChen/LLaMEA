{"id": "1879b60e-08eb-420f-a006-c27a07e7bb8e", "solution": "import numpy as np\n\nclass HybridDifferentialEvolutionLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20  # Population size for DE\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.bounds = (-5.0, 5.0)\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        self.budget -= self.population_size\n\n        while self.budget > 0:\n            for i in range(self.population_size):\n                if self.budget <= 0:\n                    break\n                \n                # Differential Evolution Mutation and Crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = pop[a] + self.F * (pop[b] - pop[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, pop[i])\n                \n                # Evaluate trial vector\n                trial_fitness = func(trial)\n                self.budget -= 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Local Search using a simple gradient approximation\n                if self.budget > 0:\n                    local_trial = trial + np.random.normal(0, 0.1, self.dim)\n                    local_trial = np.clip(local_trial, *self.bounds)\n                    local_fitness = func(local_trial)\n                    self.budget -= 1\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n\n        best_index = np.argmin(fitness)\n        return pop[best_index], fitness[best_index]", "name": "HybridDifferentialEvolutionLS", "description": "A hybrid algorithm combining Differential Evolution with Local Search to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.3706610711955672, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8728303405949999, 0.8728303405949999, 0.8728303405949999, 0.8535709755567102, 0.8535709755567102, 0.8535709755567102, 0.8707811877110783, 0.8707811877110783, 0.8707811877110783, 0.047996236351420474, 0.047996236351420474, 0.047996236351420474, 0.762489649895035, 0.762489649895035, 0.762489649895035, 0.7421339520955379, 0.7421339520955379, 0.7421339520955379, 0.2794340254449684, 0.2794340254449684, 0.2794340254449684, 0.14243659673695164, 0.14243659673695164, 0.14243659673695164, 0.4612320125856827, 0.4612320125856827, 0.4612320125856827, 0.1370313690477949, 0.1370313690477949, 0.1370313690477949, 0.1219303677203889, 0.1219303677203889, 0.1219303677203889, 0.1204263595689774, 0.1204263595689774, 0.1204263595689774, 0.8986558150430523, 0.8986558150430523, 0.8986558150430523, 0.9214005063219427, 0.9214005063219427, 0.9214005063219427, 0.9313611485951422, 0.9313611485951422, 0.9313611485951422, 0.41157788637231296, 0.41157788637231296, 0.41157788637231296, 0.5037244322684538, 0.5037244322684538, 0.5037244322684538, 0.3639878506410883, 0.3639878506410883, 0.3639878506410883, 0.7979349674091419, 0.7979349674091419, 0.7979349674091419, 0.8632624403309139, 0.8632624403309139, 0.8632624403309139, 0.8888188745759528, 0.8888188745759528, 0.8888188745759528, 0.20679701773886394, 0.20679701773886394, 0.20679701773886394, 0.20180214612910707, 0.20180214612910707, 0.20180214612910707, 0.23890734065517905, 0.23890734065517905, 0.23890734065517905, 0.3041252673726763, 0.3041252673726763, 0.3041252673726763, 0.17332229185665915, 0.17332229185665915, 0.17332229185665915, 0.1304499194544938, 0.1304499194544938, 0.1304499194544938, 0.060057531036803224, 0.060057531036803224, 0.060057531036803224, 0.23625064543394114, 0.23625064543394114, 0.23625064543394114, 0.12801782809134987, 0.12801782809134987, 0.12801782809134987, 0.3175494026718063, 0.3175494026718063, 0.3175494026718063, 0.3866141208806567, 0.3866141208806567, 0.3866141208806567, 0.15260989474722286, 0.15260989474722286, 0.15260989474722286, 0.09323592004455572, 0.09323592004455572, 0.09323592004455572, 0.11725642133354774, 0.11725642133354774, 0.11725642133354774, 0.23300161038911038, 0.23300161038911038, 0.23300161038911038, 0.13248957937352224, 0.13248957937352224, 0.13248957937352224, 0.32966485731933126, 0.32966485731933126, 0.32966485731933126, 0.34626966534375514, 0.34626966534375514, 0.34626966534375514, 0.5394377877112535, 0.5394377877112535, 0.5394377877112535, 0.587719097658266, 0.587719097658266, 0.587719097658266, 0.7847423584144735, 0.7847423584144735, 0.7847423584144735, 0.12436569578396961, 0.12436569578396961, 0.12436569578396961, 0.12575184280107354, 0.12575184280107354, 0.12575184280107354, 0.1500746320332078, 0.1500746320332078, 0.1500746320332078, 0.18381431280133564, 0.18381431280133564, 0.18381431280133564, 0.3439329352845413, 0.3439329352845413, 0.3439329352845413, 0.1898744333978325, 0.1898744333978325, 0.1898744333978325, 0.5325440488519743, 0.5325440488519743, 0.5325440488519743, 0.514716591988652, 0.514716591988652, 0.514716591988652, 0.5376294547611229, 0.5376294547611229, 0.5376294547611229, 0.4383825173426694, 0.4383825173426694, 0.4383825173426694, 0.34097522838564165, 0.34097522838564165, 0.34097522838564165, 0.4298858503995707, 0.4298858503995707, 0.4298858503995707, 0.2106987330235438, 0.2106987330235438, 0.2106987330235438, 0.18572690444973294, 0.18572690444973294, 0.18572690444973294, 0.21291102785083071, 0.21291102785083071, 0.21291102785083071, 0.20275400926417309, 0.20275400926417309, 0.20275400926417309, 0.17972401837626417, 0.17972401837626417, 0.17972401837626417, 0.23249972795997076, 0.23249972795997076, 0.23249972795997076, 0.8965558033290288, 0.8965558033290288, 0.8965558033290288, 0.8121160888098252, 0.8121160888098252, 0.8121160888098252, 0.15476524313986173, 0.15476524313986173, 0.15476524313986173, 0.7977590940782743, 0.7977590940782743, 0.7977590940782743, 0.20959497421062068, 0.20959497421062068, 0.20959497421062068, 0.1627238422303875, 0.1627238422303875, 0.1627238422303875, 0.18962623270512824, 0.18962623270512824, 0.18962623270512824, 0.1792004518502578, 0.1792004518502578, 0.1792004518502578, 0.19593829484873315, 0.19593829484873315, 0.19593829484873315, 0.08887188672103785, 0.08887188672103785, 0.08887188672103785, 0.07876221817828466, 0.07876221817828466, 0.07876221817828466, 0.09208333269916347, 0.09208333269916347, 0.09208333269916347]}, "mutation_prompt": null}
{"id": "6ee6b623-4d89-471f-b076-2cb98d23ad95", "solution": "import numpy as np\n\nclass HybridDifferentialEvolutionLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20  # Population size for DE\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.bounds = (-5.0, 5.0)\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        self.budget -= self.population_size\n\n        while self.budget > 0:\n            for i in range(self.population_size):\n                if self.budget <= 0:\n                    break\n                \n                # Differential Evolution Mutation and Crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                self.F = 0.5 + 0.1 * np.sin(self.budget / 100.0)  # Adaptive F strategy\n                mutant = pop[a] + self.F * (pop[b] - pop[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, pop[i])\n                \n                # Evaluate trial vector\n                trial_fitness = func(trial)\n                self.budget -= 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Local Search using a simple gradient approximation\n                if self.budget > 0:\n                    local_trial = trial + np.random.normal(0, 0.1, self.dim)\n                    local_trial = np.clip(local_trial, *self.bounds)\n                    local_fitness = func(local_trial)\n                    self.budget -= 1\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n\n        best_index = np.argmin(fitness)\n        return pop[best_index], fitness[best_index]", "name": "HybridDifferentialEvolutionLS", "description": "Enhanced Hybrid DE-LS Algorithm with adaptive parameters for improved exploration and exploitation.", "configspace": "", "generation": 1, "fitness": 0.36939980136371847, "feedback": "", "error": "", "parent_id": "1879b60e-08eb-420f-a006-c27a07e7bb8e", "metadata": {"aucs": [0.8608222244470326, 0.8608222244470326, 0.8608222244470326, 0.8685293451281472, 0.8685293451281472, 0.8685293451281472, 0.8783362959078742, 0.8783362959078742, 0.8783362959078742, 0.7571698155251833, 0.7571698155251833, 0.7571698155251833, 0.6944107470506499, 0.6944107470506499, 0.6944107470506499, 0.7493654817380091, 0.7493654817380091, 0.7493654817380091, 0.13454878073245669, 0.13454878073245669, 0.13454878073245669, 0.13569016369722653, 0.13569016369722653, 0.13569016369722653, 0.11238951889467719, 0.11238951889467719, 0.11238951889467719, 0.12785863339466463, 0.12785863339466463, 0.12785863339466463, 0.10567483137711475, 0.10567483137711475, 0.10567483137711475, 0.10742433508256544, 0.10742433508256544, 0.10742433508256544, 0.907468201000959, 0.907468201000959, 0.907468201000959, 0.9206350522032156, 0.9206350522032156, 0.9206350522032156, 0.9408977827183971, 0.9408977827183971, 0.9408977827183971, 0.43453476910180167, 0.43453476910180167, 0.43453476910180167, 0.4578667070168958, 0.4578667070168958, 0.4578667070168958, 0.37301572707417274, 0.37301572707417274, 0.37301572707417274, 0.20842849813825337, 0.20842849813825337, 0.20842849813825337, 0.8666035340214157, 0.8666035340214157, 0.8666035340214157, 0.8061306914721167, 0.8061306914721167, 0.8061306914721167, 0.1871334825133073, 0.1871334825133073, 0.1871334825133073, 0.1697698982554917, 0.1697698982554917, 0.1697698982554917, 0.19782635161731166, 0.19782635161731166, 0.19782635161731166, 0.1849737310100923, 0.1849737310100923, 0.1849737310100923, 0.5454692267674672, 0.5454692267674672, 0.5454692267674672, 0.18622668250355123, 0.18622668250355123, 0.18622668250355123, 0.012409297802828623, 0.012409297802828623, 0.012409297802828623, 0.1311337594261075, 0.1311337594261075, 0.1311337594261075, 0.3762310730311854, 0.3762310730311854, 0.3762310730311854, 0.2556369769399377, 0.2556369769399377, 0.2556369769399377, 0.17678271806679857, 0.17678271806679857, 0.17678271806679857, 0.20807889077420028, 0.20807889077420028, 0.20807889077420028, 0.1572254449037115, 0.1572254449037115, 0.1572254449037115, 0.10930549665715605, 0.10930549665715605, 0.10930549665715605, 0.26437930796536435, 0.26437930796536435, 0.26437930796536435, 0.20320396398195295, 0.20320396398195295, 0.20320396398195295, 0.24184553441486, 0.24184553441486, 0.24184553441486, 0.28454306130091156, 0.28454306130091156, 0.28454306130091156, 0.6257290673955325, 0.6257290673955325, 0.6257290673955325, 0.557860827799557, 0.557860827799557, 0.557860827799557, 0.6165818896086162, 0.6165818896086162, 0.6165818896086162, 0.13981868519111262, 0.13981868519111262, 0.13981868519111262, 0.10095926253802878, 0.10095926253802878, 0.10095926253802878, 0.1347848811495409, 0.1347848811495409, 0.1347848811495409, 0.20033867877323752, 0.20033867877323752, 0.20033867877323752, 0.26249976614177717, 0.26249976614177717, 0.26249976614177717, 0.31666804828757444, 0.31666804828757444, 0.31666804828757444, 0.5205584362423126, 0.5205584362423126, 0.5205584362423126, 0.5283635764713832, 0.5283635764713832, 0.5283635764713832, 0.5045325981401683, 0.5045325981401683, 0.5045325981401683, 0.24317019271512486, 0.24317019271512486, 0.24317019271512486, 0.3867079794290811, 0.3867079794290811, 0.3867079794290811, 0.32050137361343267, 0.32050137361343267, 0.32050137361343267, 0.21197105705729546, 0.21197105705729546, 0.21197105705729546, 0.20422109732681903, 0.20422109732681903, 0.20422109732681903, 0.19546889079497765, 0.19546889079497765, 0.19546889079497765, 0.5001589818854085, 0.5001589818854085, 0.5001589818854085, 0.23684215439900524, 0.23684215439900524, 0.23684215439900524, 0.22122209708035412, 0.22122209708035412, 0.22122209708035412, 0.819184580629446, 0.819184580629446, 0.819184580629446, 0.7089542151627364, 0.7089542151627364, 0.7089542151627364, 0.8515067312669305, 0.8515067312669305, 0.8515067312669305, 0.6066470531718993, 0.6066470531718993, 0.6066470531718993, 0.20952389770756108, 0.20952389770756108, 0.20952389770756108, 0.20703851958457542, 0.20703851958457542, 0.20703851958457542, 0.19041184974736958, 0.19041184974736958, 0.19041184974736958, 0.18439905294400183, 0.18439905294400183, 0.18439905294400183, 0.1836600409158914, 0.1836600409158914, 0.1836600409158914, 0.07580254417122068, 0.07580254417122068, 0.07580254417122068, 0.10977647642103383, 0.10977647642103383, 0.10977647642103383, 0.08094516076965719, 0.08094516076965719, 0.08094516076965719]}, "mutation_prompt": null}
