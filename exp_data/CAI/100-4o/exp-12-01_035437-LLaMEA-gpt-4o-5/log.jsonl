{"id": "3b8a2d7f-f729-4e81-9774-2876d72253cd", "solution": "import numpy as np\n\nclass HyDE_ART:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50  # Typical choice for DE\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:  # Evaluate only if not already evaluated\n                self.fitness[i] = func(self.population[i])\n                \n                if self.fitness[i] < self.best_fitness:\n                    self.best_fitness = self.fitness[i]\n                    self.best_solution = self.population[i].copy()\n\n    def mutate(self, idx, F=0.8):\n        indices = [i for i in range(self.population_size) if i != idx]\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        mutant_vector = self.population[a] + F * (self.population[b] - self.population[c])\n        mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n        return mutant_vector\n\n    def crossover(self, target, mutant, CR=0.9):\n        crossover_mask = np.random.rand(self.dim) < CR\n        trial = np.where(crossover_mask, mutant, target)\n        return trial\n\n    def run(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    \n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                \n                if evaluations >= self.budget:\n                    break\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        self.run(func)\n        return self.best_solution", "name": "HyDE_ART", "description": "Hybrid Differential Evolution with Adaptive Scaling and Random Topology (HyDE-ART) combines differential evolution and adaptive scaling with random topology exploration to efficiently navigate complex fitness landscapes.", "configspace": "", "generation": 0, "fitness": 0.2633496909375232, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6085051492144853, 0.6162565141798665, 0.6419726723946156, 0.6477860782039992, 0.6570749174967317, 0.6603989636425047, 0.6482058957232064, 0.6642943864896116, 0.6406191879879739, 0.3967970210119639, 0.3966066580148825, 0.41957623713616565, 0.418997132399916, 0.38975116568647494, 0.3494991472477257, 0.3917527025473978, 0.41285722360755706, 0.40922831980065566, 0.08946476887152477, 0.10934328602757781, 0.09402766049079492, 0.08277369343696805, 0.08979954467020557, 0.09324049100182474, 0.09177631224331528, 0.1119129721233183, 0.1005139830999322, 0.087875928785205, 0.08490438557059277, 0.08982772519456195, 0.08281536553662405, 0.08486870008544578, 0.0978483374914475, 0.08752627286148962, 0.09081685118705518, 0.08389526694909577, 0.9518291332223363, 0.9594377194623217, 0.948040739546329, 0.9230756530222763, 0.9782056184055499, 0.939692521209274, 0.9216358770308949, 0.9180377081208175, 0.947772278948537, 0.273803429069872, 0.2987903902860479, 0.29059248890482636, 0.27612679724777944, 0.27583852476446313, 0.27554351781742703, 0.31470550726402946, 0.2830414738733745, 0.29731455841125654, 0.44840824418965053, 0.4248128569449764, 0.5405584425555325, 0.5510617432433971, 0.5213553836771204, 0.5383080885239876, 0.6099985477960679, 0.6094858254097113, 0.48651254729363225, 0.21528901315585025, 0.2083288669724569, 0.18148106807301867, 0.2352063216011523, 0.1427828696007819, 0.21473612867563552, 0.21268113459000082, 0.1889933180683392, 0.17280590913582305, 0.24586394163657832, 0.020465142014785997, 0.1953091605347288, 0.19421800442004056, 0.19725663593751086, 0.192285317724042, 0.17520615311911514, 0.16019948550098617, 0.18612238104401513, 0.12306680557736094, 0.1254040164042577, 0.12276091987170679, 0.14982362507823688, 0.12645252808505048, 0.13710953315315833, 0.11918403924381149, 0.11492647305531623, 0.1382662857164818, 0.2630022185136861, 0.2781848236861689, 0.23437387860087033, 0.22145494718506042, 0.2522788566370253, 0.2731606833628646, 0.26874623883545057, 0.2670563412404695, 0.27945566851414383, 0.017648032426149207, 0.05320880217024171, 0.031173879131299542, 0.033456304643037726, 0.05020906182436724, 0.04456290843734623, 0.03880897299464814, 0.04356810014077417, 0.04706680577365818, 0.1510452189739554, 0.15077125770737243, 0.1450883120394072, 0.16908364218105998, 0.1761795167698459, 0.1645620755427173, 0.15108806188041013, 0.15426941004554906, 0.15856911361899662, 0.4734569121052816, 0.47482904322974084, 0.5007781327407874, 0.4771669508406322, 0.48916159426432937, 0.46707687789402696, 0.48642307522762585, 0.4747520922493773, 0.4764262876339691, 0.08047406847429861, 0.08508328461734493, 0.07079825135106055, 0.09481160157979607, 0.07964006860640382, 0.0846797222462008, 0.0775949942190911, 0.08433511736460475, 0.07793805929608422, 0.1519278721633589, 0.12744105177721998, 0.1814915457071956, 0.18554126733024956, 0.14051714585674058, 0.1385235557216138, 0.24152357802480262, 0.21904581605111628, 0.14017675155314246, 0.27279425599326135, 0.27053542571788347, 0.26693013956554157, 0.2336067783960316, 0.2774704881591946, 0.24667283296446096, 0.27173594987932437, 0.2953694921129346, 0.26338235821755684, 0.19473767269872078, 0.21317921681401608, 0.2049178650214991, 0.20501337371514416, 0.19481216371500532, 0.18986436670739903, 0.21452506517621694, 0.21031777663665485, 0.22652183119788827, 0.16838353882325696, 0.17192344671808846, 0.17502985896743428, 0.1856489512496834, 0.16746920869183846, 0.17917155171849974, 0.1947532708976576, 0.17418866847018422, 0.19427498458427128, 0.18175260802548643, 0.18166347988484988, 0.1911767394878502, 0.17578918787036524, 0.17081322689365663, 0.17683771124874037, 0.1798340340100103, 0.17375805576755987, 0.19433481669396602, 0.29687119999587386, 0.18272769903295505, 0.4649201591779877, 0.18034687444605257, 0.1919630418852727, 0.18506337832333097, 0.1858378495495545, 0.16154166950504456, 0.6348446312710126, 0.6030549787840663, 0.20146238296303076, 0.16046263040898723, 0.3743331617842738, 0.19238062063149253, 0.44310935391100115, 0.20293392812114575, 0.19260042214390571, 0.20613934935288236, 0.1782650809956161, 0.1757711737673171, 0.1846057352913688, 0.19276599508537073, 0.17750743121572665, 0.19096449454982312, 0.1879698192558883, 0.1898101387995822, 0.18843993800478465, 0.06697855271682984, 0.08047115112299219, 0.08559736270231966, 0.06802111336510186, 0.06644174853889451, 0.06737626369645677, 0.07065983986949576, 0.06923743654763548, 0.06955677935269178]}, "mutation_prompt": null}
{"id": "66ccd7bf-3784-4687-8471-d12d1924ab52", "solution": "import numpy as np\n\nclass HyDE_ART:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50  # Typical choice for DE\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:  # Evaluate only if not already evaluated\n                self.fitness[i] = func(self.population[i])\n                \n                if self.fitness[i] < self.best_fitness:\n                    self.best_fitness = self.fitness[i]\n                    self.best_solution = self.population[i].copy()\n\n    def mutate(self, idx, F=0.8):\n        indices = [i for i in range(self.population_size) if i != idx]\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        mutant_vector = self.population[a] + F * (self.population[b] - self.population[c])\n        mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n        return mutant_vector\n\n    def crossover(self, target, mutant, CR=0.9):\n        crossover_mask = np.random.rand(self.dim) < CR\n        trial = np.where(crossover_mask, mutant, target)\n        return trial\n\n    def run(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    \n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                \n                if evaluations >= self.budget:\n                    break\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        self.run(func)\n        return self.best_solution", "name": "HyDE_ART", "description": "Hybrid Differential Evolution with Adaptive Scaling and Random Topology (HyDE-ART) combines differential evolution and adaptive scaling with random topology exploration to efficiently navigate complex fitness landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3b8a2d7f-f729-4e81-9774-2876d72253cd", "metadata": {"aucs": [0.6085051492144853, 0.6162565141798665, 0.6419726723946156, 0.6477860782039992, 0.6570749174967317, 0.6603989636425047, 0.6482058957232064, 0.6642943864896116, 0.6406191879879739, 0.3967970210119639, 0.3966066580148825, 0.41957623713616565, 0.418997132399916, 0.38975116568647494, 0.3494991472477257, 0.3917527025473978, 0.41285722360755706, 0.40922831980065566, 0.08946476887152477, 0.10934328602757781, 0.09402766049079492, 0.08277369343696805, 0.08979954467020557, 0.09324049100182474, 0.09177631224331528, 0.1119129721233183, 0.1005139830999322, 0.087875928785205, 0.08490438557059277, 0.08982772519456195, 0.08281536553662405, 0.08486870008544578, 0.0978483374914475, 0.08752627286148962, 0.09081685118705518, 0.08389526694909577, 0.9518291332223363, 0.9594377194623217, 0.948040739546329, 0.9230756530222763, 0.9782056184055499, 0.939692521209274, 0.9216358770308949, 0.9180377081208175, 0.947772278948537, 0.273803429069872, 0.2987903902860479, 0.29059248890482636, 0.27612679724777944, 0.27583852476446313, 0.27554351781742703, 0.31470550726402946, 0.2830414738733745, 0.29731455841125654, 0.44840824418965053, 0.4248128569449764, 0.5405584425555325, 0.5510617432433971, 0.5213553836771204, 0.5383080885239876, 0.6099985477960679, 0.6094858254097113, 0.48651254729363225, 0.21528901315585025, 0.2083288669724569, 0.18148106807301867, 0.2352063216011523, 0.1427828696007819, 0.21473612867563552, 0.21268113459000082, 0.1889933180683392, 0.17280590913582305, 0.24586394163657832, 0.020465142014785997, 0.1953091605347288, 0.19421800442004056, 0.19725663593751086, 0.192285317724042, 0.17520615311911514, 0.16019948550098617, 0.18612238104401513, 0.12306680557736094, 0.1254040164042577, 0.12276091987170679, 0.14982362507823688, 0.12645252808505048, 0.13710953315315833, 0.11918403924381149, 0.11492647305531623, 0.1382662857164818, 0.2630022185136861, 0.2781848236861689, 0.23437387860087033, 0.22145494718506042, 0.2522788566370253, 0.2731606833628646, 0.26874623883545057, 0.2670563412404695, 0.27945566851414383, 0.017648032426149207, 0.05320880217024171, 0.031173879131299542, 0.033456304643037726, 0.05020906182436724, 0.04456290843734623, 0.03880897299464814, 0.04356810014077417, 0.04706680577365818, 0.1510452189739554, 0.15077125770737243, 0.1450883120394072, 0.16908364218105998, 0.1761795167698459, 0.1645620755427173, 0.15108806188041013, 0.15426941004554906, 0.15856911361899662, 0.4734569121052816, 0.47482904322974084, 0.5007781327407874, 0.4771669508406322, 0.48916159426432937, 0.46707687789402696, 0.48642307522762585, 0.4747520922493773, 0.4764262876339691, 0.08047406847429861, 0.08508328461734493, 0.07079825135106055, 0.09481160157979607, 0.07964006860640382, 0.0846797222462008, 0.0775949942190911, 0.08433511736460475, 0.07793805929608422, 0.1519278721633589, 0.12744105177721998, 0.1814915457071956, 0.18554126733024956, 0.14051714585674058, 0.1385235557216138, 0.24152357802480262, 0.21904581605111628, 0.14017675155314246, 0.27279425599326135, 0.27053542571788347, 0.26693013956554157, 0.2336067783960316, 0.2774704881591946, 0.24667283296446096, 0.27173594987932437, 0.2953694921129346, 0.26338235821755684, 0.19473767269872078, 0.21317921681401608, 0.2049178650214991, 0.20501337371514416, 0.19481216371500532, 0.18986436670739903, 0.21452506517621694, 0.21031777663665485, 0.22652183119788827, 0.16838353882325696, 0.17192344671808846, 0.17502985896743428, 0.1856489512496834, 0.16746920869183846, 0.17917155171849974, 0.1947532708976576, 0.17418866847018422, 0.19427498458427128, 0.18175260802548643, 0.18166347988484988, 0.1911767394878502, 0.17578918787036524, 0.17081322689365663, 0.17683771124874037, 0.1798340340100103, 0.17375805576755987, 0.19433481669396602, 0.29687119999587386, 0.18272769903295505, 0.4649201591779877, 0.18034687444605257, 0.1919630418852727, 0.18506337832333097, 0.1858378495495545, 0.16154166950504456, 0.6348446312710126, 0.6030549787840663, 0.20146238296303076, 0.16046263040898723, 0.3743331617842738, 0.19238062063149253, 0.44310935391100115, 0.20293392812114575, 0.19260042214390571, 0.20613934935288236, 0.1782650809956161, 0.1757711737673171, 0.1846057352913688, 0.19276599508537073, 0.17750743121572665, 0.19096449454982312, 0.1879698192558883, 0.1898101387995822, 0.18843993800478465, 0.06697855271682984, 0.08047115112299219, 0.08559736270231966, 0.06802111336510186, 0.06644174853889451, 0.06737626369645677, 0.07065983986949576, 0.06923743654763548, 0.06955677935269178]}, "mutation_prompt": null}
