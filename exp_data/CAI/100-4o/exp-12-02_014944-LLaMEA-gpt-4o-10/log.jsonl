{"id": "77ba946e-e1b6-4967-ac3b-c9e8a296e384", "solution": "import numpy as np\n\nclass HybridDELocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(100, self.budget // 10)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.1\n        \n    def __call__(self, func):\n        # Initialize population\n        pop = np.random.uniform(self.lower_bound, self.upper_bound,\n                                (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        self.budget -= self.pop_size\n        \n        while self.budget > 0:\n            for i in range(self.pop_size):\n                # Differential Evolution Mutation\n                candidates = list(range(self.pop_size))\n                candidates.remove(i)\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant = pop[a] + self.mutation_factor * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Crossover\n                trial = np.copy(pop[i])\n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial[crossover_mask] = mutant[crossover_mask]\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                self.budget -= 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                \n                # Local Search\n                if self.budget > 0 and np.random.rand() < self.local_search_prob:\n                    local_trial = pop[i] + np.random.normal(0, 0.1, self.dim)\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    self.budget -= 1\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            # Re-evaluate population fitness if needed\n            if self.budget > 0:\n                fitness = np.array([func(ind) for ind in pop])\n                self.budget -= self.pop_size\n        \n        # Return the best solution found\n        best_index = np.argmin(fitness)\n        return pop[best_index], fitness[best_index]", "name": "HybridDELocalSearch", "description": "A hybrid algorithm combining differential evolution and local search for efficient exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.14399517611521417, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.2643769720190239, 0.25990038796881476, 0.24053013618043728, 0.28927024513828337, 0.29895915223996916, 0.2826873112048778, 0.26904446465861376, 0.27764381977050645, 0.28999124572031265, 0.03833414199737617, 0.028666022822602777, 0.028024103012151858, 0.029254979145084903, 0.029253614068752487, 0.03489296390685026, 0.031211535723491557, 0.03225902053237606, 0.03859447865168042, 0.05863997270262011, 0.07872592252776289, 0.06413749415123349, 0.06451517619333025, 0.07235099629562924, 0.06271132517075184, 0.06297797176874897, 0.07460378859973038, 0.06630434245771233, 0.04622786223418207, 0.04883899948580217, 0.058635405733678314, 0.06449390611980121, 0.056824923278658734, 0.05525819195693216, 0.06957008194944969, 0.06265035281005438, 0.06694427655354807, 0.8319440165853361, 0.9466756416440858, 0.8446909876384665, 0.8385243176355212, 0.9098917103222752, 0.7741226601782165, 0.8409790509742231, 0.8413077234197437, 0.7358965842313094, 0.0940378504295113, 0.1145705080610876, 0.11526340761309695, 0.10824706757426084, 0.10329716027861235, 0.12843736706523412, 0.10292313550963861, 0.10600584871346996, 0.11129759722344401, 0.17470780354143922, 0.16273864411456052, 0.20019233529217817, 0.17898315436324286, 0.17964299019915675, 0.16214934194445574, 0.189879674238135, 0.17863656281902218, 0.18102983718094667, 0.043508081299024504, 0.04553982229788145, 0.06843446740294057, 0.06061343936832708, 0.07219711987203792, 0.06432627765418675, 0.045402976567712194, 0.07034622371625443, 0.0755681614192969, 0.08531417221100168, 0.06786116710408496, 0.10368272504690046, 0.034273595587285155, 0.07078928625284897, 0.05375729101205273, 0.052212615201587154, 0.046245489392236605, 0.046570879091888506, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006115629212063434, 0.00019564695802587462, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06341940301945559, 0.06386394228242787, 0.07561556160556315, 0.06040151781748704, 0.07089868901503482, 0.06443836185241558, 0.10082051918442358, 0.0891907049887748, 0.07743722741111381, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028642562824664486, 0.030938789244953524, 0.03456339774587269, 0.02631449367410732, 0.033688946924605445, 0.02515320151859346, 0.04362324491644198, 0.034130322963484616, 0.048103679874451855, 0.24417277143056448, 0.24492855723322593, 0.2653065570846205, 0.24744219584686922, 0.27301892795433313, 0.2619552987211722, 0.25325099975752674, 0.26057347030848643, 0.25783511063609443, 0.07762920798481499, 0.0627430181933174, 0.07488259770482908, 0.05323711395082642, 0.06234500187683878, 0.06558374742985307, 0.06215662464472915, 0.0624876668122184, 0.06001501106187401, 0.13818206821590773, 0.12970437765855602, 0.15552705172880799, 0.1500988816037807, 0.13830587805119354, 0.1613511110727468, 0.14866719800599948, 0.16818264410739936, 0.12735880101007935, 0.17457237713734575, 0.17731135454650526, 0.19886707856421282, 0.1747078574652685, 0.174344969361809, 0.1949299012174508, 0.18221798698359448, 0.19950449565470407, 0.1963656427961471, 0.1237078975202256, 0.11755871507876348, 0.11670760200074237, 0.11605287991161517, 0.11680370739224544, 0.1413326509340357, 0.14291382027424537, 0.12523599954170805, 0.1305923396383465, 0.18065256183816258, 0.20146758318916058, 0.16383240061353843, 0.15963276852715824, 0.16491132976582334, 0.16708444934652367, 0.17000141715764616, 0.1666613202531173, 0.16450655980884332, 0.14043794774489904, 0.1524831623126769, 0.1541065765420342, 0.1447574340695582, 0.16785270922607975, 0.16995329286619276, 0.17012301202747548, 0.1510738138562241, 0.16432929886950876, 0.1436803640855212, 0.14367302596276554, 0.15617002061802976, 0.16398224785461002, 0.21852300345268838, 0.13948583708293028, 0.12791195593178895, 0.16031420814743302, 0.15144722303826308, 0.1495592348631286, 0.17793148885821974, 0.1483534393260073, 0.12763610270557435, 0.1091689642554895, 0.12138330591772517, 0.1664884134429503, 0.22563357413067975, 0.2673249811780848, 0.18066995751924242, 0.16519933763999672, 0.1723197452222579, 0.18557563529084264, 0.1652847602896096, 0.19391929871167735, 0.17110955678340434, 0.1658004767334349, 0.18178849654465423, 0.04951609347300112, 0.05768266264229149, 0.06679086911736198, 0.06285632059528967, 0.0524305730260225, 0.061992474589565805, 0.054696168051795, 0.06039733582494555, 0.058049953076572236]}, "mutation_prompt": null}
{"id": "b49dbe54-17b5-408f-bbb9-fcb884128985", "solution": "import numpy as np\n\nclass HybridDELocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(100, self.budget // 10)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.1\n        \n    def __call__(self, func):\n        # Initialize population\n        pop = np.random.uniform(self.lower_bound, self.upper_bound,\n                                (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        self.budget -= self.pop_size\n        \n        while self.budget > 0:\n            for i in range(self.pop_size):\n                # Differential Evolution Mutation\n                candidates = list(range(self.pop_size))\n                candidates.remove(i)\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant = pop[a] + self.mutation_factor * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Crossover\n                trial = np.copy(pop[i])\n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial[crossover_mask] = mutant[crossover_mask]\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                self.budget -= 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                \n                # Local Search\n                if self.budget > 0 and np.random.rand() < self.local_search_prob:\n                    local_trial = pop[i] + np.random.normal(0, 0.1, self.dim)\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    self.budget -= 1\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            # Re-evaluate population fitness if needed\n            if self.budget > 0:\n                fitness = np.array([func(ind) for ind in pop])\n                self.budget -= self.pop_size\n        \n        # Return the best solution found\n        best_index = np.argmin(fitness)\n        return pop[best_index], fitness[best_index]", "name": "HybridDELocalSearch", "description": "A hybrid algorithm combining differential evolution and local search for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "77ba946e-e1b6-4967-ac3b-c9e8a296e384", "metadata": {"aucs": [0.2643769720190239, 0.25990038796881476, 0.24053013618043728, 0.28927024513828337, 0.29895915223996916, 0.2826873112048778, 0.26904446465861376, 0.27764381977050645, 0.28999124572031265, 0.03833414199737617, 0.028666022822602777, 0.028024103012151858, 0.029254979145084903, 0.029253614068752487, 0.03489296390685026, 0.031211535723491557, 0.03225902053237606, 0.03859447865168042, 0.05863997270262011, 0.07872592252776289, 0.06413749415123349, 0.06451517619333025, 0.07235099629562924, 0.06271132517075184, 0.06297797176874897, 0.07460378859973038, 0.06630434245771233, 0.04622786223418207, 0.04883899948580217, 0.058635405733678314, 0.06449390611980121, 0.056824923278658734, 0.05525819195693216, 0.06957008194944969, 0.06265035281005438, 0.06694427655354807, 0.8319440165853361, 0.9466756416440858, 0.8446909876384665, 0.8385243176355212, 0.9098917103222752, 0.7741226601782165, 0.8409790509742231, 0.8413077234197437, 0.7358965842313094, 0.0940378504295113, 0.1145705080610876, 0.11526340761309695, 0.10824706757426084, 0.10329716027861235, 0.12843736706523412, 0.10292313550963861, 0.10600584871346996, 0.11129759722344401, 0.17470780354143922, 0.16273864411456052, 0.20019233529217817, 0.17898315436324286, 0.17964299019915675, 0.16214934194445574, 0.189879674238135, 0.17863656281902218, 0.18102983718094667, 0.043508081299024504, 0.04553982229788145, 0.06843446740294057, 0.06061343936832708, 0.07219711987203792, 0.06432627765418675, 0.045402976567712194, 0.07034622371625443, 0.0755681614192969, 0.08531417221100168, 0.06786116710408496, 0.10368272504690046, 0.034273595587285155, 0.07078928625284897, 0.05375729101205273, 0.052212615201587154, 0.046245489392236605, 0.046570879091888506, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006115629212063434, 0.00019564695802587462, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06341940301945559, 0.06386394228242787, 0.07561556160556315, 0.06040151781748704, 0.07089868901503482, 0.06443836185241558, 0.10082051918442358, 0.0891907049887748, 0.07743722741111381, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028642562824664486, 0.030938789244953524, 0.03456339774587269, 0.02631449367410732, 0.033688946924605445, 0.02515320151859346, 0.04362324491644198, 0.034130322963484616, 0.048103679874451855, 0.24417277143056448, 0.24492855723322593, 0.2653065570846205, 0.24744219584686922, 0.27301892795433313, 0.2619552987211722, 0.25325099975752674, 0.26057347030848643, 0.25783511063609443, 0.07762920798481499, 0.0627430181933174, 0.07488259770482908, 0.05323711395082642, 0.06234500187683878, 0.06558374742985307, 0.06215662464472915, 0.0624876668122184, 0.06001501106187401, 0.13818206821590773, 0.12970437765855602, 0.15552705172880799, 0.1500988816037807, 0.13830587805119354, 0.1613511110727468, 0.14866719800599948, 0.16818264410739936, 0.12735880101007935, 0.17457237713734575, 0.17731135454650526, 0.19886707856421282, 0.1747078574652685, 0.174344969361809, 0.1949299012174508, 0.18221798698359448, 0.19950449565470407, 0.1963656427961471, 0.1237078975202256, 0.11755871507876348, 0.11670760200074237, 0.11605287991161517, 0.11680370739224544, 0.1413326509340357, 0.14291382027424537, 0.12523599954170805, 0.1305923396383465, 0.18065256183816258, 0.20146758318916058, 0.16383240061353843, 0.15963276852715824, 0.16491132976582334, 0.16708444934652367, 0.17000141715764616, 0.1666613202531173, 0.16450655980884332, 0.14043794774489904, 0.1524831623126769, 0.1541065765420342, 0.1447574340695582, 0.16785270922607975, 0.16995329286619276, 0.17012301202747548, 0.1510738138562241, 0.16432929886950876, 0.1436803640855212, 0.14367302596276554, 0.15617002061802976, 0.16398224785461002, 0.21852300345268838, 0.13948583708293028, 0.12791195593178895, 0.16031420814743302, 0.15144722303826308, 0.1495592348631286, 0.17793148885821974, 0.1483534393260073, 0.12763610270557435, 0.1091689642554895, 0.12138330591772517, 0.1664884134429503, 0.22563357413067975, 0.2673249811780848, 0.18066995751924242, 0.16519933763999672, 0.1723197452222579, 0.18557563529084264, 0.1652847602896096, 0.19391929871167735, 0.17110955678340434, 0.1658004767334349, 0.18178849654465423, 0.04951609347300112, 0.05768266264229149, 0.06679086911736198, 0.06285632059528967, 0.0524305730260225, 0.061992474589565805, 0.054696168051795, 0.06039733582494555, 0.058049953076572236]}, "mutation_prompt": null}
