{"id": "11a84914-2745-4419-a4b8-99a6c8bc23e9", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "4efb2f3d-74f3-4912-b5c9-1bbac89a2d0a", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(50, self.budget // 10)\n        self.inertia_weight = 0.5\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n        \n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                score = func(positions[i])\n                evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coefficient * r1 * (personal_best_positions - positions) +\n                          self.social_coefficient * r2 * (global_best_position - positions))\n            positions = positions + velocities\n            positions = np.clip(positions, self.lower_bound, self.upper_bound)\n\n            # Apply a differential evolution step\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = x1 + 0.8 * (x2 - x3)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                crossover_probability = 0.9\n                trial_vector = np.copy(positions[i])\n                for d in range(self.dim):\n                    if np.random.rand() < crossover_probability or d == np.random.randint(self.dim):\n                        trial_vector[d] = mutant_vector[d]\n                \n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < personal_best_scores[i]:\n                    personal_best_scores[i] = trial_score\n                    personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n        \n        return global_best_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic algorithm combining principles from particle swarm optimization and differential evolution to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": 0.2655523867601696, "feedback": "", "error": "", "parent_id": "11a84914-2745-4419-a4b8-99a6c8bc23e9", "metadata": {"aucs": [0.7955598954396164, 0.7955598954396164, 0.7955598954396164, 0.796572501280073, 0.796572501280073, 0.796572501280073, 0.8189237253745966, 0.8189237253745966, 0.8189237253745966, 0.03640993873560261, 0.03640993873560261, 0.03640993873560261, 0.5604182218605716, 0.5604182218605716, 0.5604182218605716, 0.015657272709960313, 0.015657272709960313, 0.015657272709960313, 0.16067157325527226, 0.16067157325527226, 0.16067157325527226, 0.1374354041210869, 0.1374354041210869, 0.1374354041210869, 0.1378019531727539, 0.1378019531727539, 0.1378019531727539, 0.127144297544449, 0.127144297544449, 0.127144297544449, 0.09020720245703473, 0.09020720245703473, 0.09020720245703473, 0.12555228836396926, 0.12555228836396926, 0.12555228836396926, 0.9772605930212767, 0.9772605930212767, 0.9772605930212767, 0.9777446610108893, 0.9777446610108893, 0.9777446610108893, 0.9774734478962597, 0.9774734478962597, 0.9774734478962597, 0.5111823824088888, 0.5111823824088888, 0.5111823824088888, 0.14854351349469486, 0.14854351349469486, 0.14854351349469486, 0.543246743852577, 0.543246743852577, 0.543246743852577, 0.718389091997813, 0.718389091997813, 0.718389091997813, 0.15988636489590713, 0.15988636489590713, 0.15988636489590713, 0.17018132980476075, 0.17018132980476075, 0.17018132980476075, 0.19457078100011538, 0.19457078100011538, 0.19457078100011538, 0.20732226449927593, 0.20732226449927593, 0.20732226449927593, 0.3540661379240244, 0.3540661379240244, 0.3540661379240244, 0.12515460820607516, 0.12515460820607516, 0.12515460820607516, 0.21622852243011093, 0.21622852243011093, 0.21622852243011093, 0.19130814402445673, 0.19130814402445673, 0.19130814402445673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06127525939534795, 0.06127525939534795, 0.06127525939534795, 0.02840200658368941, 0.02840200658368941, 0.02840200658368941, 0.08535407185892796, 0.08535407185892796, 0.08535407185892796, 0.044980688558074355, 0.044980688558074355, 0.044980688558074355, 0.07476969884845097, 0.07476969884845097, 0.07476969884845097, 0.08379195464794442, 0.08379195464794442, 0.08379195464794442, 0.044760059496045335, 0.044760059496045335, 0.044760059496045335, 0.03717158009500798, 0.03717158009500798, 0.03717158009500798, 0.07860287101847152, 0.07860287101847152, 0.07860287101847152, 0.5910340346052205, 0.5910340346052205, 0.5910340346052205, 0.5880511117554941, 0.5880511117554941, 0.5880511117554941, 0.5618064290082329, 0.5618064290082329, 0.5618064290082329, 0.139253648314416, 0.139253648314416, 0.139253648314416, 0.10069317544090206, 0.10069317544090206, 0.10069317544090206, 0.10787777409023513, 0.10787777409023513, 0.10787777409023513, 0.22997200470731138, 0.22997200470731138, 0.22997200470731138, 0.2243222516884389, 0.2243222516884389, 0.2243222516884389, 0.24838588874023182, 0.24838588874023182, 0.24838588874023182, 0.26610347313136595, 0.26610347313136595, 0.26610347313136595, 0.29973588294575115, 0.29973588294575115, 0.29973588294575115, 0.42296186742963715, 0.42296186742963715, 0.42296186742963715, 0.18195742593376163, 0.18195742593376163, 0.18195742593376163, 0.21253095453160686, 0.21253095453160686, 0.21253095453160686, 0.18811718011675216, 0.18811718011675216, 0.18811718011675216, 0.20734129508735488, 0.20734129508735488, 0.20734129508735488, 0.21768896180298747, 0.21768896180298747, 0.21768896180298747, 0.2378501267951446, 0.2378501267951446, 0.2378501267951446, 0.22096823230373097, 0.22096823230373097, 0.22096823230373097, 0.21559555204366154, 0.21559555204366154, 0.21559555204366154, 0.24065819076321338, 0.24065819076321338, 0.24065819076321338, 0.8708614382693252, 0.8708614382693252, 0.8708614382693252, 0.15700757458450065, 0.15700757458450065, 0.15700757458450065, 0.17031162373708464, 0.17031162373708464, 0.17031162373708464, 0.16723918110918834, 0.16723918110918834, 0.16723918110918834, 0.21051252307571244, 0.21051252307571244, 0.21051252307571244, 0.15560250224640915, 0.15560250224640915, 0.15560250224640915, 0.21678295766172728, 0.21678295766172728, 0.21678295766172728, 0.18027509365997252, 0.18027509365997252, 0.18027509365997252, 0.18946870750362965, 0.18946870750362965, 0.18946870750362965, 0.08082029557739756, 0.08082029557739756, 0.08082029557739756, 0.08975077993851432, 0.08975077993851432, 0.08975077993851432, 0.11391265684923146, 0.11391265684923146, 0.11391265684923146]}, "mutation_prompt": null}
