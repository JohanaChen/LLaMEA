{"id": "9462b06f-e47a-4ead-a14f-e3663cc1a68e", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20 + 2 * int(np.sqrt(dim))\n        self.c1 = 2.05  # cognitive coefficient\n        self.c2 = 2.05  # social coefficient\n        self.inertia_start = 0.9\n        self.inertia_end = 0.4\n\n    def __call__(self, func):\n        np.random.seed(42)\n\n        swarm_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        swarm_velocities = np.zeros((self.num_particles, self.dim))\n        personal_best_positions = np.copy(swarm_positions)\n        personal_best_scores = np.full(self.num_particles, np.inf)\n\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.num_particles):\n                if evaluations >= self.budget:\n                    break\n\n                score = func(swarm_positions[i])\n                evaluations += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm_positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm_positions[i]\n\n            inertia_weight = self.inertia_start - (self.inertia_start - self.inertia_end) * (evaluations / self.budget)\n\n            for i in range(self.num_particles):\n                r1 = np.random.uniform(size=self.dim)\n                r2 = np.random.uniform(size=self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (personal_best_positions[i] - swarm_positions[i])\n                social_velocity = self.c2 * r2 * (global_best_position - swarm_positions[i])\n\n                swarm_velocities[i] = inertia_weight * swarm_velocities[i] + cognitive_velocity + social_velocity\n                swarm_positions[i] += swarm_velocities[i]\n\n                # Enforce boundaries\n                swarm_positions[i] = np.clip(swarm_positions[i], self.lower_bound, self.upper_bound)\n\n            # Local restart for exploration\n            if evaluations < self.budget and evaluations % (self.budget // 5) == 0:\n                local_restart_index = np.random.choice(self.num_particles)\n                swarm_positions[local_restart_index] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        return global_best_position, global_best_score", "name": "AdaptivePSO", "description": "Adaptive Particle Swarm Optimization with Dynamic Inertia and Local Restart to explore diverse regions efficiently.", "configspace": "", "generation": 0, "fitness": 0.19053887571114833, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.5044695156683796, 0.5044695156683796, 0.5044695156683796, 0.559458083390871, 0.559458083390871, 0.559458083390871, 0.4980041105052546, 0.4980041105052546, 0.4980041105052546, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033813946097473346, 0.033813946097473346, 0.033813946097473346, 0.003122479059841643, 0.003122479059841643, 0.003122479059841643, 0.061975435570593485, 0.061975435570593485, 0.061975435570593485, 0.10624796296509831, 0.10624796296509831, 0.10624796296509831, 0.16861706647196184, 0.16861706647196184, 0.16861706647196184, 0.08840257887961744, 0.08840257887961744, 0.08840257887961744, 0.1099605274494797, 0.1099605274494797, 0.1099605274494797, 0.07705790214946862, 0.07705790214946862, 0.07705790214946862, 0.9886585085985227, 0.9886585085985227, 0.9886585085985227, 0.9938543820782858, 0.9938543820782858, 0.9938543820782858, 0.9924516394374303, 0.9924516394374303, 0.9924516394374303, 0.2264056140098577, 0.2264056140098577, 0.2264056140098577, 0.012050989570302817, 0.012050989570302817, 0.012050989570302817, 0.26980625624191634, 0.26980625624191634, 0.26980625624191634, 0.1781040853801623, 0.1781040853801623, 0.1781040853801623, 0.15505169930534435, 0.15505169930534435, 0.15505169930534435, 0.27101670574409653, 0.27101670574409653, 0.27101670574409653, 0.1451026788018116, 0.1451026788018116, 0.1451026788018116, 0.0932085861735108, 0.0932085861735108, 0.0932085861735108, 0.1060346113556212, 0.1060346113556212, 0.1060346113556212, 0.10245325554130158, 0.10245325554130158, 0.10245325554130158, 0.11627027289703218, 0.11627027289703218, 0.11627027289703218, 0.09546119301135281, 0.09546119301135281, 0.09546119301135281, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00011220624704733062, 0.00011220624704733062, 0.00011220624704733062, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04813032081717705, 0.04813032081717705, 0.04813032081717705, 0.007472938476571267, 0.007472938476571267, 0.007472938476571267, 0.031167090509972684, 0.031167090509972684, 0.031167090509972684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04079238154468279, 0.04079238154468279, 0.04079238154468279, 0.03227966844219243, 0.03227966844219243, 0.03227966844219243, 0.06932987642756738, 0.06932987642756738, 0.06932987642756738, 0.0557368271390265, 0.0557368271390265, 0.0557368271390265, 0.3922102459982598, 0.3922102459982598, 0.3922102459982598, 0.20195301267272703, 0.20195301267272703, 0.20195301267272703, 0.38442893365418107, 0.38442893365418107, 0.38442893365418107, 0.10636846312678772, 0.10636846312678772, 0.10636846312678772, 0.07670554053200307, 0.07670554053200307, 0.07670554053200307, 0.06754785334789726, 0.06754785334789726, 0.06754785334789726, 0.15836460601375457, 0.15836460601375457, 0.15836460601375457, 0.2151975982681047, 0.2151975982681047, 0.2151975982681047, 0.21248256505797614, 0.21248256505797614, 0.21248256505797614, 0.29169142376871404, 0.29169142376871404, 0.29169142376871404, 0.2882526887058322, 0.2882526887058322, 0.2882526887058322, 0.2398414736252117, 0.2398414736252117, 0.2398414736252117, 0.1506334902884875, 0.1506334902884875, 0.1506334902884875, 0.1642869487577986, 0.1642869487577986, 0.1642869487577986, 0.12553514276909294, 0.12553514276909294, 0.12553514276909294, 0.19134875414356323, 0.19134875414356323, 0.19134875414356323, 0.1712175148898195, 0.1712175148898195, 0.1712175148898195, 0.1692900107534937, 0.1692900107534937, 0.1692900107534937, 0.19054478305969846, 0.19054478305969846, 0.19054478305969846, 0.3345268798906602, 0.3345268798906602, 0.3345268798906602, 0.198317607880944, 0.198317607880944, 0.198317607880944, 0.6334611007688116, 0.6334611007688116, 0.6334611007688116, 0.14729717314563062, 0.14729717314563062, 0.14729717314563062, 0.18357054692021135, 0.18357054692021135, 0.18357054692021135, 0.14373294130800152, 0.14373294130800152, 0.14373294130800152, 0.1201368776609022, 0.1201368776609022, 0.1201368776609022, 0.15656004076374497, 0.15656004076374497, 0.15656004076374497, 0.19375072489319178, 0.19375072489319178, 0.19375072489319178, 0.18730626125667083, 0.18730626125667083, 0.18730626125667083, 0.17744639432827536, 0.17744639432827536, 0.17744639432827536, 0.07052209051613667, 0.07052209051613667, 0.07052209051613667, 0.047334675508725055, 0.047334675508725055, 0.047334675508725055, 0.08435329096854371, 0.08435329096854371, 0.08435329096854371]}, "mutation_prompt": null}
{"id": "9eb7ca53-8647-42f0-b6f0-83da24f0a93c", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 20 + 2 * int(np.sqrt(dim))\n        self.c1 = 2.05  # cognitive coefficient\n        self.c2 = 2.05  # social coefficient\n        self.inertia_start = 0.9\n        self.inertia_end = 0.4\n\n    def __call__(self, func):\n        np.random.seed(42)\n\n        swarm_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        swarm_velocities = np.zeros((self.num_particles, self.dim))\n        personal_best_positions = np.copy(swarm_positions)\n        personal_best_scores = np.full(self.num_particles, np.inf)\n\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.num_particles):\n                if evaluations >= self.budget:\n                    break\n\n                score = func(swarm_positions[i])\n                evaluations += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm_positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm_positions[i]\n\n            inertia_weight = self.inertia_start - (self.inertia_start - self.inertia_end) * (evaluations / self.budget)\n\n            for i in range(self.num_particles):\n                r1 = np.random.uniform(size=self.dim)\n                r2 = np.random.uniform(size=self.dim)\n\n                cognitive_velocity = self.c1 * r1 * (personal_best_positions[i] - swarm_positions[i])\n                social_velocity = self.c2 * r2 * (global_best_position - swarm_positions[i])\n\n                swarm_velocities[i] = inertia_weight * swarm_velocities[i] + cognitive_velocity + social_velocity\n                swarm_positions[i] += swarm_velocities[i]\n\n                # Enforce boundaries\n                swarm_positions[i] = np.clip(swarm_positions[i], self.lower_bound, self.upper_bound)\n\n            # Local restart for exploration\n            if evaluations < self.budget and evaluations % (self.budget // 5) == 0:\n                local_restart_index = np.random.choice(self.num_particles)\n                swarm_positions[local_restart_index] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        return global_best_position, global_best_score", "name": "AdaptivePSO", "description": "Adaptive Particle Swarm Optimization with Dynamic Inertia and Local Restart to explore diverse regions efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9462b06f-e47a-4ead-a14f-e3663cc1a68e", "metadata": {"aucs": [0.5044695156683796, 0.5044695156683796, 0.5044695156683796, 0.559458083390871, 0.559458083390871, 0.559458083390871, 0.4980041105052546, 0.4980041105052546, 0.4980041105052546, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033813946097473346, 0.033813946097473346, 0.033813946097473346, 0.003122479059841643, 0.003122479059841643, 0.003122479059841643, 0.061975435570593485, 0.061975435570593485, 0.061975435570593485, 0.10624796296509831, 0.10624796296509831, 0.10624796296509831, 0.16861706647196184, 0.16861706647196184, 0.16861706647196184, 0.08840257887961744, 0.08840257887961744, 0.08840257887961744, 0.1099605274494797, 0.1099605274494797, 0.1099605274494797, 0.07705790214946862, 0.07705790214946862, 0.07705790214946862, 0.9886585085985227, 0.9886585085985227, 0.9886585085985227, 0.9938543820782858, 0.9938543820782858, 0.9938543820782858, 0.9924516394374303, 0.9924516394374303, 0.9924516394374303, 0.2264056140098577, 0.2264056140098577, 0.2264056140098577, 0.012050989570302817, 0.012050989570302817, 0.012050989570302817, 0.26980625624191634, 0.26980625624191634, 0.26980625624191634, 0.1781040853801623, 0.1781040853801623, 0.1781040853801623, 0.15505169930534435, 0.15505169930534435, 0.15505169930534435, 0.27101670574409653, 0.27101670574409653, 0.27101670574409653, 0.1451026788018116, 0.1451026788018116, 0.1451026788018116, 0.0932085861735108, 0.0932085861735108, 0.0932085861735108, 0.1060346113556212, 0.1060346113556212, 0.1060346113556212, 0.10245325554130158, 0.10245325554130158, 0.10245325554130158, 0.11627027289703218, 0.11627027289703218, 0.11627027289703218, 0.09546119301135281, 0.09546119301135281, 0.09546119301135281, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00011220624704733062, 0.00011220624704733062, 0.00011220624704733062, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04813032081717705, 0.04813032081717705, 0.04813032081717705, 0.007472938476571267, 0.007472938476571267, 0.007472938476571267, 0.031167090509972684, 0.031167090509972684, 0.031167090509972684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04079238154468279, 0.04079238154468279, 0.04079238154468279, 0.03227966844219243, 0.03227966844219243, 0.03227966844219243, 0.06932987642756738, 0.06932987642756738, 0.06932987642756738, 0.0557368271390265, 0.0557368271390265, 0.0557368271390265, 0.3922102459982598, 0.3922102459982598, 0.3922102459982598, 0.20195301267272703, 0.20195301267272703, 0.20195301267272703, 0.38442893365418107, 0.38442893365418107, 0.38442893365418107, 0.10636846312678772, 0.10636846312678772, 0.10636846312678772, 0.07670554053200307, 0.07670554053200307, 0.07670554053200307, 0.06754785334789726, 0.06754785334789726, 0.06754785334789726, 0.15836460601375457, 0.15836460601375457, 0.15836460601375457, 0.2151975982681047, 0.2151975982681047, 0.2151975982681047, 0.21248256505797614, 0.21248256505797614, 0.21248256505797614, 0.29169142376871404, 0.29169142376871404, 0.29169142376871404, 0.2882526887058322, 0.2882526887058322, 0.2882526887058322, 0.2398414736252117, 0.2398414736252117, 0.2398414736252117, 0.1506334902884875, 0.1506334902884875, 0.1506334902884875, 0.1642869487577986, 0.1642869487577986, 0.1642869487577986, 0.12553514276909294, 0.12553514276909294, 0.12553514276909294, 0.19134875414356323, 0.19134875414356323, 0.19134875414356323, 0.1712175148898195, 0.1712175148898195, 0.1712175148898195, 0.1692900107534937, 0.1692900107534937, 0.1692900107534937, 0.19054478305969846, 0.19054478305969846, 0.19054478305969846, 0.3345268798906602, 0.3345268798906602, 0.3345268798906602, 0.198317607880944, 0.198317607880944, 0.198317607880944, 0.6334611007688116, 0.6334611007688116, 0.6334611007688116, 0.14729717314563062, 0.14729717314563062, 0.14729717314563062, 0.18357054692021135, 0.18357054692021135, 0.18357054692021135, 0.14373294130800152, 0.14373294130800152, 0.14373294130800152, 0.1201368776609022, 0.1201368776609022, 0.1201368776609022, 0.15656004076374497, 0.15656004076374497, 0.15656004076374497, 0.19375072489319178, 0.19375072489319178, 0.19375072489319178, 0.18730626125667083, 0.18730626125667083, 0.18730626125667083, 0.17744639432827536, 0.17744639432827536, 0.17744639432827536, 0.07052209051613667, 0.07052209051613667, 0.07052209051613667, 0.047334675508725055, 0.047334675508725055, 0.047334675508725055, 0.08435329096854371, 0.08435329096854371, 0.08435329096854371]}, "mutation_prompt": null}
