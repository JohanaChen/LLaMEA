{"id": "208ff4e9-1d52-4ecc-8d6d-0ec2af98f87f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 20\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n        self.f = 0.8  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Particle Swarm Optimization step\n            for i in range(self.population_size):\n                current_score = func(self.population[i])\n                evaluations += 1\n                if current_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = current_score\n                    self.personal_best_positions[i] = self.population[i]\n                if current_score < self.global_best_score:\n                    self.global_best_score = current_score\n                    self.global_best_position = self.population[i]\n\n            for i in range(self.population_size):\n                inertia = 0.5\n                cognitive = 2 * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.population[i])\n                social = 2 * np.random.rand(self.dim) * (self.global_best_position - self.population[i])\n                self.velocities[i] = inertia * self.velocities[i] + cognitive + social\n                self.population[i] = np.clip(self.population[i] + self.velocities[i], self.bounds[0], self.bounds[1])\n\n            if evaluations >= self.budget:\n                break\n\n            # Differential Evolution step\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant_vector = np.clip(a + self.f * (b - c), self.bounds[0], self.bounds[1])\n\n                trial_vector = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.cr\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if trial_score < func(self.population[i]):\n                    self.population[i] = trial_vector\n\n        return self.global_best_position", "name": "HybridPSODE", "description": "A hybrid swarm intelligence algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to balance exploration and exploitation efficiently.", "configspace": "", "generation": 0, "fitness": 0.20265174256859847, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6156560267344919, 0.6757629570958403, 0.6306455493585142, 0.7394820198924282, 0.7000684353804243, 0.18853184808507806, 0.6774377681995822, 0.6781931750961735, 0.6910025985355829, 0.33599945535317577, 9.999999999998899e-05, 0.4063284737910522, 0.37748379406872645, 0.36701219033724597, 0.3051057449836123, 9.999999999998899e-05, 0.3718578650165667, 0.43966562019149247, 0.10207568984686799, 0.09924820587430805, 0.10415358741424496, 0.0620714807687307, 0.12635545101048307, 0.07985697961483162, 0.15966443965634602, 0.09094539800616963, 0.12622189495858926, 0.0740733007629013, 0.10344777004671801, 0.08782060267615033, 0.10548341613490553, 0.12936271481862283, 0.11973635059197096, 0.08548731215580119, 0.11023434337224502, 0.07926537996983407, 0.9818678169817733, 0.9830686104236853, 0.9877137903827995, 0.9869497844893603, 0.9825848278386485, 0.9803293021838747, 0.9918635197581139, 0.987598583446309, 0.9820112018651689, 0.08130534982095272, 0.1547426636495164, 0.05804214162131027, 0.12636632735782372, 0.1268892669822651, 0.13358335312953096, 0.1266057020933209, 0.08837173184611513, 0.08147914046814042, 0.21511543307294478, 0.1424992609712351, 0.24644895915933251, 0.24816967359764097, 0.1155924939169668, 0.17599641370282515, 0.15080590482793887, 0.1256263473974767, 0.16354637298760022, 0.2222863461301473, 0.14565570200874167, 0.12342311572590081, 0.11480008888206217, 0.14371653970510911, 0.1252502492815334, 0.12071390310287822, 0.12392574577032389, 0.14389162486067397, 0.11590800640677479, 0.0524833304050506, 0.12058602430262766, 0.15248991215140761, 0.09094145773051154, 0.1845393275653996, 0.17613025513259506, 0.12297200587701551, 0.1405394718743349, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04426758458645075, 0.0015656357477462635, 0.03605039043975322, 0.06021067280549941, 9.999999999998899e-05, 0.020698367687520314, 0.09123063939692733, 0.02869714120489375, 0.05282773699503396, 0.11655204734458458, 9.999999999998899e-05, 0.041182382877549606, 0.06220940802845021, 0.07072524837091221, 0.05389225003896825, 0.07460696778585807, 0.059176006191548725, 0.06245431306770444, 0.14345886347070047, 0.03927866778011957, 0.10784666984910618, 0.02653512844272632, 0.005514122565931534, 0.019440158613427738, 0.052031746512588684, 9.999999999998899e-05, 0.04694045909003142, 0.4391691945680357, 0.40736996344828924, 0.42161433793498104, 0.43090585298254613, 0.4268687264251022, 0.20837525919988564, 0.4458871122976933, 0.4133929273446938, 0.46253825737404564, 0.07516048059359837, 0.06493352232191452, 0.08422795261608063, 0.09449246939392197, 0.0932886194868916, 0.08685459187452182, 0.10972711593257356, 0.09217496295797789, 0.08379963575363514, 0.16730905901742577, 0.15901037246843885, 0.16145081065835898, 0.1695011872284442, 0.1723616283847237, 0.16185297576148228, 0.14918786418108043, 0.158148259108709, 0.1605787594418674, 0.26634204516365234, 0.1941028028658125, 0.18601360509254639, 0.29516054226783417, 0.23285746638505578, 0.2360186300434055, 0.20464177217451973, 0.34961381159052296, 0.16835216778427897, 0.16898285886106423, 0.15686801824970864, 0.13123838691281686, 0.21668926653583664, 0.17032007889315026, 0.21807794692428817, 0.1381415151199008, 0.16657132165388955, 0.20132514129122658, 0.17280721795117804, 0.19776162510630024, 0.15781977041115447, 0.1513950963815054, 0.1429293599732535, 0.188447497523888, 0.17990243417065432, 0.1584904457552908, 0.1753653317604752, 0.18605415203596964, 0.17230911905348112, 0.17603398528542036, 0.21640031727036468, 0.19800086678807316, 0.18136301966175816, 0.18772728750384782, 0.20274784472469987, 0.19700664422262282, 0.26338852720119743, 0.16876809267401927, 0.15358680916118195, 0.4256308173134875, 0.19591618511337205, 0.18495574502494683, 0.09942327448189914, 0.1677554964932264, 0.15223806360079906, 0.14391301254881095, 0.19966057612771215, 0.10923566533279461, 0.24122169458616483, 0.16614427780274366, 0.1992959721163109, 0.19450719675379646, 0.1509146261132519, 0.19464871789460592, 0.16738353166332343, 0.18970713536318462, 0.16966569548192278, 0.17411010889902356, 0.18258003944874446, 0.17818897591336558, 0.185850514028434, 0.17849083796332665, 0.1944160893384027, 0.05772840637520782, 0.05976186201791245, 0.09330222608012806, 0.07569823257326758, 0.0633831966280397, 0.081164810043025, 0.07595906382807494, 0.09701760145310223, 0.08314449565260007]}, "mutation_prompt": null}
{"id": "8bb467e5-84d5-4742-8421-a3eeca3974a9", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 20\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n        self.f = 0.8  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Particle Swarm Optimization step\n            for i in range(self.population_size):\n                current_score = func(self.population[i])\n                evaluations += 1\n                if current_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = current_score\n                    self.personal_best_positions[i] = self.population[i]\n                if current_score < self.global_best_score:\n                    self.global_best_score = current_score\n                    self.global_best_position = self.population[i]\n\n            for i in range(self.population_size):\n                inertia = 0.5\n                cognitive = 2 * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.population[i])\n                social = 2 * np.random.rand(self.dim) * (self.global_best_position - self.population[i])\n                self.velocities[i] = inertia * self.velocities[i] + cognitive + social\n                self.population[i] = np.clip(self.population[i] + self.velocities[i], self.bounds[0], self.bounds[1])\n\n            if evaluations >= self.budget:\n                break\n\n            # Differential Evolution step\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant_vector = np.clip(a + self.f * (b - c), self.bounds[0], self.bounds[1])\n\n                trial_vector = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.cr\n                trial_vector[cross_points] = mutant_vector[cross_points]\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if trial_score < func(self.population[i]):\n                    self.population[i] = trial_vector\n\n        return self.global_best_position", "name": "HybridPSODE", "description": "A hybrid swarm intelligence algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to balance exploration and exploitation efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "208ff4e9-1d52-4ecc-8d6d-0ec2af98f87f", "metadata": {"aucs": [0.6156560267344919, 0.6757629570958403, 0.6306455493585142, 0.7394820198924282, 0.7000684353804243, 0.18853184808507806, 0.6774377681995822, 0.6781931750961735, 0.6910025985355829, 0.33599945535317577, 9.999999999998899e-05, 0.4063284737910522, 0.37748379406872645, 0.36701219033724597, 0.3051057449836123, 9.999999999998899e-05, 0.3718578650165667, 0.43966562019149247, 0.10207568984686799, 0.09924820587430805, 0.10415358741424496, 0.0620714807687307, 0.12635545101048307, 0.07985697961483162, 0.15966443965634602, 0.09094539800616963, 0.12622189495858926, 0.0740733007629013, 0.10344777004671801, 0.08782060267615033, 0.10548341613490553, 0.12936271481862283, 0.11973635059197096, 0.08548731215580119, 0.11023434337224502, 0.07926537996983407, 0.9818678169817733, 0.9830686104236853, 0.9877137903827995, 0.9869497844893603, 0.9825848278386485, 0.9803293021838747, 0.9918635197581139, 0.987598583446309, 0.9820112018651689, 0.08130534982095272, 0.1547426636495164, 0.05804214162131027, 0.12636632735782372, 0.1268892669822651, 0.13358335312953096, 0.1266057020933209, 0.08837173184611513, 0.08147914046814042, 0.21511543307294478, 0.1424992609712351, 0.24644895915933251, 0.24816967359764097, 0.1155924939169668, 0.17599641370282515, 0.15080590482793887, 0.1256263473974767, 0.16354637298760022, 0.2222863461301473, 0.14565570200874167, 0.12342311572590081, 0.11480008888206217, 0.14371653970510911, 0.1252502492815334, 0.12071390310287822, 0.12392574577032389, 0.14389162486067397, 0.11590800640677479, 0.0524833304050506, 0.12058602430262766, 0.15248991215140761, 0.09094145773051154, 0.1845393275653996, 0.17613025513259506, 0.12297200587701551, 0.1405394718743349, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04426758458645075, 0.0015656357477462635, 0.03605039043975322, 0.06021067280549941, 9.999999999998899e-05, 0.020698367687520314, 0.09123063939692733, 0.02869714120489375, 0.05282773699503396, 0.11655204734458458, 9.999999999998899e-05, 0.041182382877549606, 0.06220940802845021, 0.07072524837091221, 0.05389225003896825, 0.07460696778585807, 0.059176006191548725, 0.06245431306770444, 0.14345886347070047, 0.03927866778011957, 0.10784666984910618, 0.02653512844272632, 0.005514122565931534, 0.019440158613427738, 0.052031746512588684, 9.999999999998899e-05, 0.04694045909003142, 0.4391691945680357, 0.40736996344828924, 0.42161433793498104, 0.43090585298254613, 0.4268687264251022, 0.20837525919988564, 0.4458871122976933, 0.4133929273446938, 0.46253825737404564, 0.07516048059359837, 0.06493352232191452, 0.08422795261608063, 0.09449246939392197, 0.0932886194868916, 0.08685459187452182, 0.10972711593257356, 0.09217496295797789, 0.08379963575363514, 0.16730905901742577, 0.15901037246843885, 0.16145081065835898, 0.1695011872284442, 0.1723616283847237, 0.16185297576148228, 0.14918786418108043, 0.158148259108709, 0.1605787594418674, 0.26634204516365234, 0.1941028028658125, 0.18601360509254639, 0.29516054226783417, 0.23285746638505578, 0.2360186300434055, 0.20464177217451973, 0.34961381159052296, 0.16835216778427897, 0.16898285886106423, 0.15686801824970864, 0.13123838691281686, 0.21668926653583664, 0.17032007889315026, 0.21807794692428817, 0.1381415151199008, 0.16657132165388955, 0.20132514129122658, 0.17280721795117804, 0.19776162510630024, 0.15781977041115447, 0.1513950963815054, 0.1429293599732535, 0.188447497523888, 0.17990243417065432, 0.1584904457552908, 0.1753653317604752, 0.18605415203596964, 0.17230911905348112, 0.17603398528542036, 0.21640031727036468, 0.19800086678807316, 0.18136301966175816, 0.18772728750384782, 0.20274784472469987, 0.19700664422262282, 0.26338852720119743, 0.16876809267401927, 0.15358680916118195, 0.4256308173134875, 0.19591618511337205, 0.18495574502494683, 0.09942327448189914, 0.1677554964932264, 0.15223806360079906, 0.14391301254881095, 0.19966057612771215, 0.10923566533279461, 0.24122169458616483, 0.16614427780274366, 0.1992959721163109, 0.19450719675379646, 0.1509146261132519, 0.19464871789460592, 0.16738353166332343, 0.18970713536318462, 0.16966569548192278, 0.17411010889902356, 0.18258003944874446, 0.17818897591336558, 0.185850514028434, 0.17849083796332665, 0.1944160893384027, 0.05772840637520782, 0.05976186201791245, 0.09330222608012806, 0.07569823257326758, 0.0633831966280397, 0.081164810043025, 0.07595906382807494, 0.09701760145310223, 0.08314449565260007]}, "mutation_prompt": null}
