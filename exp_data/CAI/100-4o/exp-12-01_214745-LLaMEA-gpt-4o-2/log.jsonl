{"id": "c17f9a7e-41f6-49da-9108-37a0db6174a5", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temperature = 100.0  # Initial temperature for SA\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (DE)\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    \n                    # Simulated Annealing acceptance\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n                    else:\n                        if np.random.rand() < np.exp((best_fitness - trial_fitness) / self.temperature):\n                            best_solution = trial\n                            best_fitness = trial_fitness\n            \n            # Annealing schedule\n            self.temperature *= 0.99\n\n        return best_solution\n\n# Example usage:\n# optimizer = HybridDE_SA(budget=1000, dim=5)\n# func = lambda x: np.sum(x**2)\n# best_solution = optimizer(func)\n# print(\"Best solution found:\", best_solution)", "name": "HybridDE_SA", "description": "A hybrid Differential Evolution and Simulated Annealing algorithm for adaptive exploration and exploitation in black box optimization.", "configspace": "", "generation": 0, "fitness": 0.3860448624623976, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8133415334394372, 0.8067383798872021, 0.8049373942830731, 0.8179924801528475, 0.8225156023472652, 0.8094004086804037, 0.8100386208310936, 0.8128563983411351, 0.7995129953994459, 0.6967764348729635, 0.6752303994468618, 0.684974081221703, 0.6804519558442196, 0.673930919290505, 0.6953441214732433, 0.6574324467202299, 0.6778728465644075, 0.6739491599039877, 0.12248651638349706, 0.1144451047142615, 0.13710596819722798, 0.12461737631277647, 0.1087132762494275, 0.1177887061837859, 0.1152666823637839, 0.1223792301060801, 0.11772563317298956, 0.10289955849423182, 0.11452752587689996, 0.1209279080708986, 0.11361952877434145, 0.11788327083012229, 0.10409804052637772, 0.10744319741044817, 0.11269018804803177, 0.10851548514668996, 0.7735645763277852, 0.838342504220049, 0.9124077327665234, 0.9222007485111781, 0.9163137791771159, 0.9239655243737233, 0.8648102865496261, 0.8538155602995893, 0.87293559136158, 0.5335467512029408, 0.5165908954877128, 0.5193323355385189, 0.5054663597357067, 0.5042833931867798, 0.5185020447030115, 0.4820901864234234, 0.5141366641884704, 0.521485860413929, 0.8035796678456026, 0.7571919557321576, 0.7569395237821, 0.7713831735609123, 0.808473898833185, 0.8054852641399313, 0.7763106671726154, 0.8145891544221615, 0.8137376263851885, 0.320196689409012, 0.49231784224308117, 0.16581060604247, 0.21544059291454465, 0.2034396173785029, 0.22449713286994988, 0.32837985868073594, 0.4237287707883197, 0.20034710690413926, 0.19976634528989934, 0.32358879104080474, 0.20695287662272432, 0.4639592425244319, 0.5371659767660355, 0.270109463316876, 0.2319502324622289, 0.208519083653813, 0.20517656719847666, 0.4549927779775177, 0.44128569898355363, 0.4391428662231144, 0.4652531459200291, 0.4442755703777802, 0.4387993773937714, 0.4731705910081272, 0.49017838087556975, 0.47690405821247206, 0.5630203165938759, 0.6288244162563108, 0.5779379976690602, 0.5868542349020378, 0.5430747641724543, 0.5898659696812225, 0.5853808486366714, 0.6230888107258015, 0.5769463987015302, 0.07795543538210092, 0.15149384814144107, 0.1372351415044606, 0.2536730547347167, 0.2913585346890295, 0.3054811840949787, 0.1611350624050799, 0.2666978589858441, 0.19315937552895202, 0.31698503425665114, 0.3540899776965659, 0.3517685814752457, 0.3436753294696556, 0.36625042639739513, 0.3474943448367519, 0.33496722579677674, 0.37224658263769583, 0.34961341817474834, 0.735300771949644, 0.7473661744402126, 0.7144857829633154, 0.7377246014865989, 0.7308264727609972, 0.7173991394506637, 0.7281622703449535, 0.7087436400533773, 0.7381696845560188, 0.11297351018655277, 0.11469709711810194, 0.09101172295899651, 0.11633036695742027, 0.11243260907513741, 0.08920175681881815, 0.1019842615508062, 0.10588644460218255, 0.11379897509454151, 0.42590581207467715, 0.2214980362883734, 0.14018189245947976, 0.17240842454567118, 0.14261272358046484, 0.1898305154010126, 0.15941456467035675, 0.1446862271137812, 0.14820810422139274, 0.3993096224024555, 0.4472906002264395, 0.42032178397834397, 0.44152514400018206, 0.4360906275425568, 0.4223533644384976, 0.43041174629350054, 0.4655802355342322, 0.4659402135863736, 0.32046214996018096, 0.3259249263709296, 0.30601304626257797, 0.35091094128814926, 0.3077221497082896, 0.31046876749703956, 0.37328246461197845, 0.36315468981855625, 0.35254756430890166, 0.17970006830419805, 0.19539184970382628, 0.18841016887312634, 0.18794614724888048, 0.2055671163430285, 0.19580147176293272, 0.20678140030983672, 0.21532967574199202, 0.19555091667472024, 0.1908257453350608, 0.20501860241201986, 0.1918715514410848, 0.19210680058659968, 0.19935252260281788, 0.2017473249158619, 0.19231071136368938, 0.2134845972574394, 0.19525255970175082, 0.19507250762559747, 0.19443385087996856, 0.6207588932270146, 0.17714419438570184, 0.6455697387249687, 0.19303993655470142, 0.17379210607963558, 0.5379999059644568, 0.5144257269610946, 0.7009247827593791, 0.16688361268117902, 0.6566227295638378, 0.6603602254993959, 0.20243846685238864, 0.2020227878823483, 0.2096063226622753, 0.20426573793142033, 0.2068200953575572, 0.1846755972239884, 0.19921346649779803, 0.19791961406826997, 0.19062712843936958, 0.19183662775520094, 0.1884937922698552, 0.18690929258838662, 0.1870157124898003, 0.20646195787547383, 0.0799479096014507, 0.08270656279931077, 0.08230854438533208, 0.0841846536112052, 0.0856865654468385, 0.08222904153591515, 0.07551686254407519, 0.08602072085993617, 0.08521923063269499]}, "mutation_prompt": null}
{"id": "1611fcab-29fa-4b9c-9baf-45f64bb2e6bf", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temperature = 100.0  # Initial temperature for SA\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (DE)\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    \n                    # Simulated Annealing acceptance\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n                    else:\n                        if np.random.rand() < np.exp((best_fitness - trial_fitness) / self.temperature):\n                            best_solution = trial\n                            best_fitness = trial_fitness\n            \n            # Annealing schedule\n            self.temperature *= 0.99\n\n        return best_solution\n\n# Example usage:\n# optimizer = HybridDE_SA(budget=1000, dim=5)\n# func = lambda x: np.sum(x**2)\n# best_solution = optimizer(func)\n# print(\"Best solution found:\", best_solution)", "name": "HybridDE_SA", "description": "A hybrid Differential Evolution and Simulated Annealing algorithm for adaptive exploration and exploitation in black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c17f9a7e-41f6-49da-9108-37a0db6174a5", "metadata": {"aucs": [0.8133415334394372, 0.8067383798872021, 0.8049373942830731, 0.8179924801528475, 0.8225156023472652, 0.8094004086804037, 0.8100386208310936, 0.8128563983411351, 0.7995129953994459, 0.6967764348729635, 0.6752303994468618, 0.684974081221703, 0.6804519558442196, 0.673930919290505, 0.6953441214732433, 0.6574324467202299, 0.6778728465644075, 0.6739491599039877, 0.12248651638349706, 0.1144451047142615, 0.13710596819722798, 0.12461737631277647, 0.1087132762494275, 0.1177887061837859, 0.1152666823637839, 0.1223792301060801, 0.11772563317298956, 0.10289955849423182, 0.11452752587689996, 0.1209279080708986, 0.11361952877434145, 0.11788327083012229, 0.10409804052637772, 0.10744319741044817, 0.11269018804803177, 0.10851548514668996, 0.7735645763277852, 0.838342504220049, 0.9124077327665234, 0.9222007485111781, 0.9163137791771159, 0.9239655243737233, 0.8648102865496261, 0.8538155602995893, 0.87293559136158, 0.5335467512029408, 0.5165908954877128, 0.5193323355385189, 0.5054663597357067, 0.5042833931867798, 0.5185020447030115, 0.4820901864234234, 0.5141366641884704, 0.521485860413929, 0.8035796678456026, 0.7571919557321576, 0.7569395237821, 0.7713831735609123, 0.808473898833185, 0.8054852641399313, 0.7763106671726154, 0.8145891544221615, 0.8137376263851885, 0.320196689409012, 0.49231784224308117, 0.16581060604247, 0.21544059291454465, 0.2034396173785029, 0.22449713286994988, 0.32837985868073594, 0.4237287707883197, 0.20034710690413926, 0.19976634528989934, 0.32358879104080474, 0.20695287662272432, 0.4639592425244319, 0.5371659767660355, 0.270109463316876, 0.2319502324622289, 0.208519083653813, 0.20517656719847666, 0.4549927779775177, 0.44128569898355363, 0.4391428662231144, 0.4652531459200291, 0.4442755703777802, 0.4387993773937714, 0.4731705910081272, 0.49017838087556975, 0.47690405821247206, 0.5630203165938759, 0.6288244162563108, 0.5779379976690602, 0.5868542349020378, 0.5430747641724543, 0.5898659696812225, 0.5853808486366714, 0.6230888107258015, 0.5769463987015302, 0.07795543538210092, 0.15149384814144107, 0.1372351415044606, 0.2536730547347167, 0.2913585346890295, 0.3054811840949787, 0.1611350624050799, 0.2666978589858441, 0.19315937552895202, 0.31698503425665114, 0.3540899776965659, 0.3517685814752457, 0.3436753294696556, 0.36625042639739513, 0.3474943448367519, 0.33496722579677674, 0.37224658263769583, 0.34961341817474834, 0.735300771949644, 0.7473661744402126, 0.7144857829633154, 0.7377246014865989, 0.7308264727609972, 0.7173991394506637, 0.7281622703449535, 0.7087436400533773, 0.7381696845560188, 0.11297351018655277, 0.11469709711810194, 0.09101172295899651, 0.11633036695742027, 0.11243260907513741, 0.08920175681881815, 0.1019842615508062, 0.10588644460218255, 0.11379897509454151, 0.42590581207467715, 0.2214980362883734, 0.14018189245947976, 0.17240842454567118, 0.14261272358046484, 0.1898305154010126, 0.15941456467035675, 0.1446862271137812, 0.14820810422139274, 0.3993096224024555, 0.4472906002264395, 0.42032178397834397, 0.44152514400018206, 0.4360906275425568, 0.4223533644384976, 0.43041174629350054, 0.4655802355342322, 0.4659402135863736, 0.32046214996018096, 0.3259249263709296, 0.30601304626257797, 0.35091094128814926, 0.3077221497082896, 0.31046876749703956, 0.37328246461197845, 0.36315468981855625, 0.35254756430890166, 0.17970006830419805, 0.19539184970382628, 0.18841016887312634, 0.18794614724888048, 0.2055671163430285, 0.19580147176293272, 0.20678140030983672, 0.21532967574199202, 0.19555091667472024, 0.1908257453350608, 0.20501860241201986, 0.1918715514410848, 0.19210680058659968, 0.19935252260281788, 0.2017473249158619, 0.19231071136368938, 0.2134845972574394, 0.19525255970175082, 0.19507250762559747, 0.19443385087996856, 0.6207588932270146, 0.17714419438570184, 0.6455697387249687, 0.19303993655470142, 0.17379210607963558, 0.5379999059644568, 0.5144257269610946, 0.7009247827593791, 0.16688361268117902, 0.6566227295638378, 0.6603602254993959, 0.20243846685238864, 0.2020227878823483, 0.2096063226622753, 0.20426573793142033, 0.2068200953575572, 0.1846755972239884, 0.19921346649779803, 0.19791961406826997, 0.19062712843936958, 0.19183662775520094, 0.1884937922698552, 0.18690929258838662, 0.1870157124898003, 0.20646195787547383, 0.0799479096014507, 0.08270656279931077, 0.08230854438533208, 0.0841846536112052, 0.0856865654468385, 0.08222904153591515, 0.07551686254407519, 0.08602072085993617, 0.08521923063269499]}, "mutation_prompt": null}
