{"id": "f49070ee-0edb-4068-9f0e-9f05ee372b12", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.inertia_max = 0.9\n        self.inertia_min = 0.4\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.vel_max = (self.upper_bound - self.lower_bound) / 2.0\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        \n        # Initialize particle positions and velocities\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        \n        # Initialize personal best and global best\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n        \n        n_evaluations = 0\n        \n        while n_evaluations < self.budget:\n            # Evaluate each particle's fitness\n            for i in range(self.num_particles):\n                score = func(positions[i])\n                n_evaluations += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n                if n_evaluations >= self.budget:\n                    break\n            \n            # Dynamic adjustment of inertia weight\n            inertia = self.inertia_max - ((self.inertia_max - self.inertia_min) * (n_evaluations / self.budget))\n            \n            # Update velocities and positions\n            for i in range(self.num_particles):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                \n                cognitive_velocity = self.c1 * r1 * (personal_best_positions[i] - positions[i])\n                social_velocity = self.c2 * r2 * (global_best_position - positions[i])\n\n                velocities[i] = inertia * velocities[i] + cognitive_velocity + social_velocity\n                \n                # Clamp velocity\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n\n                # Update position\n                positions[i] += velocities[i]\n                \n                # Ensure positions are within bounds\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n        return global_best_position, global_best_score", "name": "NovelPSO", "description": "A novel Particle Swarm Optimization (PSO) variant with adaptive inertia and velocity clamping for balance between exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.18891616108893292, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.4114039742889778, 0.4114039742889778, 0.4114039742889778, 0.5039701365224449, 0.5039701365224449, 0.5039701365224449, 0.37086455727335055, 0.37086455727335055, 0.37086455727335055, 0.10552744619634946, 0.10552744619634946, 0.10552744619634946, 0.060364981736730994, 0.060364981736730994, 0.060364981736730994, 0.006522388988979166, 0.006522388988979166, 0.006522388988979166, 0.1028958074089169, 0.1028958074089169, 0.1028958074089169, 0.1101043024933237, 0.1101043024933237, 0.1101043024933237, 0.10577966700231933, 0.10577966700231933, 0.10577966700231933, 0.0838889828965248, 0.0838889828965248, 0.0838889828965248, 0.08697401844620212, 0.08697401844620212, 0.08697401844620212, 0.07921027180427076, 0.07921027180427076, 0.07921027180427076, 0.9773659020930261, 0.9773659020930261, 0.9773659020930261, 0.9855669984413659, 0.9855669984413659, 0.9855669984413659, 0.9898353286250147, 0.9898353286250147, 0.9898353286250147, 0.22493530960380725, 0.22493530960380725, 0.22493530960380725, 0.14951058371393688, 0.14951058371393688, 0.14951058371393688, 0.08600447644728171, 0.08600447644728171, 0.08600447644728171, 0.21871924489562244, 0.21871924489562244, 0.21871924489562244, 0.3784914931938377, 0.3784914931938377, 0.3784914931938377, 0.12223194252702396, 0.12223194252702396, 0.12223194252702396, 0.10920302203219834, 0.10920302203219834, 0.10920302203219834, 0.06987111788100353, 0.06987111788100353, 0.06987111788100353, 0.12128321087474958, 0.12128321087474958, 0.12128321087474958, 0.10673372605916065, 0.10673372605916065, 0.10673372605916065, 0.10636436129739646, 0.10636436129739646, 0.10636436129739646, 0.10918349979684294, 0.10918349979684294, 0.10918349979684294, 0.001013709038242827, 0.001013709038242827, 0.001013709038242827, 0.001063891843053666, 0.001063891843053666, 0.001063891843053666, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028271590125459767, 0.028271590125459767, 0.028271590125459767, 0.01609647837644168, 0.01609647837644168, 0.01609647837644168, 0.06035349571519488, 0.06035349571519488, 0.06035349571519488, 0.012261134685828567, 0.012261134685828567, 0.012261134685828567, 0.024110394789412903, 0.024110394789412903, 0.024110394789412903, 0.030407670393105768, 0.030407670393105768, 0.030407670393105768, 0.026681041904215275, 0.026681041904215275, 0.026681041904215275, 0.03904882177662239, 0.03904882177662239, 0.03904882177662239, 0.05438706926610026, 0.05438706926610026, 0.05438706926610026, 0.36254509920269573, 0.36254509920269573, 0.36254509920269573, 0.3483148762969075, 0.3483148762969075, 0.3483148762969075, 0.32623919200758134, 0.32623919200758134, 0.32623919200758134, 0.09196163877071561, 0.09196163877071561, 0.09196163877071561, 0.07695166000357478, 0.07695166000357478, 0.07695166000357478, 0.05796765634853707, 0.05796765634853707, 0.05796765634853707, 0.16983461790190646, 0.16983461790190646, 0.16983461790190646, 0.2181430352475201, 0.2181430352475201, 0.2181430352475201, 0.20893979826832687, 0.20893979826832687, 0.20893979826832687, 0.20449185545833803, 0.20449185545833803, 0.20449185545833803, 0.23166300311374133, 0.23166300311374133, 0.23166300311374133, 0.19033566500055532, 0.19033566500055532, 0.19033566500055532, 0.15312519384493695, 0.15312519384493695, 0.15312519384493695, 0.20298014777288698, 0.20298014777288698, 0.20298014777288698, 0.1815252008283107, 0.1815252008283107, 0.1815252008283107, 0.1798502659613257, 0.1798502659613257, 0.1798502659613257, 0.18350920214185373, 0.18350920214185373, 0.18350920214185373, 0.17995941458619746, 0.17995941458619746, 0.17995941458619746, 0.18173612450447363, 0.18173612450447363, 0.18173612450447363, 0.182977953741422, 0.182977953741422, 0.182977953741422, 0.21755745027688522, 0.21755745027688522, 0.21755745027688522, 0.14876910603363924, 0.14876910603363924, 0.14876910603363924, 0.419567247629704, 0.419567247629704, 0.419567247629704, 0.31567348851711363, 0.31567348851711363, 0.31567348851711363, 0.2118028181854642, 0.2118028181854642, 0.2118028181854642, 0.19407621813663656, 0.19407621813663656, 0.19407621813663656, 0.28181852015222575, 0.28181852015222575, 0.28181852015222575, 0.19627436273705168, 0.19627436273705168, 0.19627436273705168, 0.19951433374636973, 0.19951433374636973, 0.19951433374636973, 0.1837886414970078, 0.1837886414970078, 0.1837886414970078, 0.061885976125723774, 0.061885976125723774, 0.061885976125723774, 0.07530646509813288, 0.07530646509813288, 0.07530646509813288, 0.08627531881106898, 0.08627531881106898, 0.08627531881106898]}, "mutation_prompt": null}
{"id": "e8f0905c-c825-4e04-b300-78e5d9490261", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.inertia_max = 0.9\n        self.inertia_min = 0.4\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.vel_max = (self.upper_bound - self.lower_bound) / 2.0\n\n    def __call__(self, func):\n        np.random.seed(0)  # For reproducibility\n        \n        # Initialize particle positions and velocities\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        \n        # Initialize personal best and global best\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n        \n        n_evaluations = 0\n        \n        while n_evaluations < self.budget:\n            # Evaluate each particle's fitness\n            for i in range(self.num_particles):\n                score = func(positions[i])\n                n_evaluations += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n                if n_evaluations >= self.budget:\n                    break\n            \n            # Dynamic adjustment of inertia weight\n            inertia = self.inertia_max - ((self.inertia_max - self.inertia_min) * (n_evaluations / self.budget))\n            \n            # Update velocities and positions\n            for i in range(self.num_particles):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                \n                cognitive_velocity = self.c1 * r1 * (personal_best_positions[i] - positions[i])\n                social_velocity = self.c2 * r2 * (global_best_position - positions[i])\n\n                velocities[i] = inertia * velocities[i] + cognitive_velocity + social_velocity\n                \n                # Clamp velocity\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n\n                # Update position\n                positions[i] += velocities[i]\n                \n                # Ensure positions are within bounds\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n        return global_best_position, global_best_score", "name": "NovelPSO", "description": "A novel Particle Swarm Optimization (PSO) variant with adaptive inertia and velocity clamping for balance between exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f49070ee-0edb-4068-9f0e-9f05ee372b12", "metadata": {"aucs": [0.4114039742889778, 0.4114039742889778, 0.4114039742889778, 0.5039701365224449, 0.5039701365224449, 0.5039701365224449, 0.37086455727335055, 0.37086455727335055, 0.37086455727335055, 0.10552744619634946, 0.10552744619634946, 0.10552744619634946, 0.060364981736730994, 0.060364981736730994, 0.060364981736730994, 0.006522388988979166, 0.006522388988979166, 0.006522388988979166, 0.1028958074089169, 0.1028958074089169, 0.1028958074089169, 0.1101043024933237, 0.1101043024933237, 0.1101043024933237, 0.10577966700231933, 0.10577966700231933, 0.10577966700231933, 0.0838889828965248, 0.0838889828965248, 0.0838889828965248, 0.08697401844620212, 0.08697401844620212, 0.08697401844620212, 0.07921027180427076, 0.07921027180427076, 0.07921027180427076, 0.9773659020930261, 0.9773659020930261, 0.9773659020930261, 0.9855669984413659, 0.9855669984413659, 0.9855669984413659, 0.9898353286250147, 0.9898353286250147, 0.9898353286250147, 0.22493530960380725, 0.22493530960380725, 0.22493530960380725, 0.14951058371393688, 0.14951058371393688, 0.14951058371393688, 0.08600447644728171, 0.08600447644728171, 0.08600447644728171, 0.21871924489562244, 0.21871924489562244, 0.21871924489562244, 0.3784914931938377, 0.3784914931938377, 0.3784914931938377, 0.12223194252702396, 0.12223194252702396, 0.12223194252702396, 0.10920302203219834, 0.10920302203219834, 0.10920302203219834, 0.06987111788100353, 0.06987111788100353, 0.06987111788100353, 0.12128321087474958, 0.12128321087474958, 0.12128321087474958, 0.10673372605916065, 0.10673372605916065, 0.10673372605916065, 0.10636436129739646, 0.10636436129739646, 0.10636436129739646, 0.10918349979684294, 0.10918349979684294, 0.10918349979684294, 0.001013709038242827, 0.001013709038242827, 0.001013709038242827, 0.001063891843053666, 0.001063891843053666, 0.001063891843053666, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028271590125459767, 0.028271590125459767, 0.028271590125459767, 0.01609647837644168, 0.01609647837644168, 0.01609647837644168, 0.06035349571519488, 0.06035349571519488, 0.06035349571519488, 0.012261134685828567, 0.012261134685828567, 0.012261134685828567, 0.024110394789412903, 0.024110394789412903, 0.024110394789412903, 0.030407670393105768, 0.030407670393105768, 0.030407670393105768, 0.026681041904215275, 0.026681041904215275, 0.026681041904215275, 0.03904882177662239, 0.03904882177662239, 0.03904882177662239, 0.05438706926610026, 0.05438706926610026, 0.05438706926610026, 0.36254509920269573, 0.36254509920269573, 0.36254509920269573, 0.3483148762969075, 0.3483148762969075, 0.3483148762969075, 0.32623919200758134, 0.32623919200758134, 0.32623919200758134, 0.09196163877071561, 0.09196163877071561, 0.09196163877071561, 0.07695166000357478, 0.07695166000357478, 0.07695166000357478, 0.05796765634853707, 0.05796765634853707, 0.05796765634853707, 0.16983461790190646, 0.16983461790190646, 0.16983461790190646, 0.2181430352475201, 0.2181430352475201, 0.2181430352475201, 0.20893979826832687, 0.20893979826832687, 0.20893979826832687, 0.20449185545833803, 0.20449185545833803, 0.20449185545833803, 0.23166300311374133, 0.23166300311374133, 0.23166300311374133, 0.19033566500055532, 0.19033566500055532, 0.19033566500055532, 0.15312519384493695, 0.15312519384493695, 0.15312519384493695, 0.20298014777288698, 0.20298014777288698, 0.20298014777288698, 0.1815252008283107, 0.1815252008283107, 0.1815252008283107, 0.1798502659613257, 0.1798502659613257, 0.1798502659613257, 0.18350920214185373, 0.18350920214185373, 0.18350920214185373, 0.17995941458619746, 0.17995941458619746, 0.17995941458619746, 0.18173612450447363, 0.18173612450447363, 0.18173612450447363, 0.182977953741422, 0.182977953741422, 0.182977953741422, 0.21755745027688522, 0.21755745027688522, 0.21755745027688522, 0.14876910603363924, 0.14876910603363924, 0.14876910603363924, 0.419567247629704, 0.419567247629704, 0.419567247629704, 0.31567348851711363, 0.31567348851711363, 0.31567348851711363, 0.2118028181854642, 0.2118028181854642, 0.2118028181854642, 0.19407621813663656, 0.19407621813663656, 0.19407621813663656, 0.28181852015222575, 0.28181852015222575, 0.28181852015222575, 0.19627436273705168, 0.19627436273705168, 0.19627436273705168, 0.19951433374636973, 0.19951433374636973, 0.19951433374636973, 0.1837886414970078, 0.1837886414970078, 0.1837886414970078, 0.061885976125723774, 0.061885976125723774, 0.061885976125723774, 0.07530646509813288, 0.07530646509813288, 0.07530646509813288, 0.08627531881106898, 0.08627531881106898, 0.08627531881106898]}, "mutation_prompt": null}
