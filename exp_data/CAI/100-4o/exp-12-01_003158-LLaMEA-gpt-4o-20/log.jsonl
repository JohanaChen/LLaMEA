{"id": "93cd2139-3284-427b-b843-32b1e5c70ad7", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "5cd30a6b-76ab-4f45-8f34-e47e3839626a", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.pop = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.p_best = self.pop.copy()\n        self.g_best = self.pop[np.random.choice(self.population_size)]\n        self.fitness = np.full(self.population_size, np.inf)\n        self.fitness_p_best = np.full(self.population_size, np.inf)\n        self.fitness_g_best = np.inf\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Evaluate fitness\n                self.fitness[i] = func(self.pop[i])\n                evals += 1\n\n                # Update personal best\n                if self.fitness[i] < self.fitness_p_best[i]:\n                    self.p_best[i] = self.pop[i]\n                    self.fitness_p_best[i] = self.fitness[i]\n\n                # Update global best\n                if self.fitness[i] < self.fitness_g_best:\n                    self.g_best = self.pop[i]\n                    self.fitness_g_best = self.fitness[i]\n\n            # PSO Update - velocity and position\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive = self.c1 * r1 * (self.p_best[i] - self.pop[i])\n                social = self.c2 * r2 * (self.g_best - self.pop[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive + social\n                self.pop[i] += self.velocities[i]\n                self.pop[i] = np.clip(self.pop[i], -5, 5)\n\n            # DE Update - mutation and crossover\n            for i in range(self.population_size):\n                if evals >= self.budget:\n                    break\n\n                candidates = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.pop[np.random.choice(candidates, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), -5, 5)\n                cross_points = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(cross_points, mutant, self.pop[i])\n\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.pop[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.fitness_p_best[i]:\n                        self.p_best[i] = trial\n                        self.fitness_p_best[i] = trial_fitness\n                    if trial_fitness < self.fitness_g_best:\n                        self.g_best = trial\n                        self.fitness_g_best = trial_fitness", "name": "HybridPSO_DE", "description": "A hybrid particle swarm and differential evolution algorithm that adapts dynamically to balance exploration and exploitation throughout the optimization process.", "configspace": "", "generation": 1, "fitness": 0.2543245675383635, "feedback": "", "error": "", "parent_id": "93cd2139-3284-427b-b843-32b1e5c70ad7", "metadata": {"aucs": [0.6746903389158261, 0.6565510600318148, 0.7369266786326364, 0.7180162911120069, 0.708953129964788, 0.7204679173640534, 0.7122873639788426, 0.7197167211289499, 0.7054313137821568, 0.5424142092177112, 0.5211036203769799, 0.3367902655201086, 0.40910329863376504, 0.47387269318789593, 0.3884774613609808, 0.345894963112365, 0.46691211722980275, 0.43678090057507024, 0.1322162434541908, 0.10597019649804185, 0.12112810449609102, 0.1056505108795942, 0.11087924426445372, 0.1103344393048794, 0.053934873923993876, 0.1173229128746236, 0.11889158209580131, 0.10237939865183199, 0.10263115931656008, 0.10994599404778815, 0.10801257264201647, 0.1294471626837671, 0.11391912920196978, 0.12452320182968246, 0.10865249674473965, 0.1334041417556847, 0.9756214778659591, 0.9694604309409907, 0.9677305106157891, 0.96037045808079, 0.9609424720529197, 0.9776170252070054, 0.984335533298576, 0.9680315824002506, 0.9735866683181283, 0.16983369551310357, 0.2724303411469957, 0.3008750455101905, 0.18219138996637185, 0.17029273845195025, 0.23180909948934525, 0.087772187766886, 0.0869390032756161, 0.3494205711961845, 0.21715106495396308, 0.17022327860521147, 0.3960619907165901, 0.25852174765156777, 0.2645719824347076, 0.20584434825808406, 0.2587643375416645, 0.21007050033351338, 0.48980513917102675, 0.14105843737755752, 0.09106305735878117, 0.11225970901347304, 0.09797615044817753, 0.18484511214540433, 0.12681804382914563, 0.17577276601648695, 0.1787243275087298, 0.1956732815493224, 0.19703920903546246, 0.1879346164409007, 0.19160703632067366, 0.17470898400147294, 0.143787015842334, 0.1234103405700675, 0.23090734340948438, 0.032981629278806435, 0.12563823761099224, 9.999999999998899e-05, 0.0011491402177081778, 9.999999999998899e-05, 0.00010194826897225173, 9.999999999998899e-05, 9.999999999998899e-05, 0.08366305453063849, 9.999999999998899e-05, 0.01682361451200609, 0.018402157430505994, 0.0470916746638983, 0.044724818720753845, 0.01211171061126437, 0.08632850398532721, 0.04332767386818248, 0.04717532351063869, 0.06665890545915676, 0.08692337466752509, 9.999999999998899e-05, 0.025620361886949494, 0.03179453905892027, 0.06417745072899383, 0.0638083540714568, 0.0553469304669959, 0.06945555161452632, 0.09360259280099292, 0.06961185112145918, 0.17505189963732415, 0.07650787982254403, 0.10856522305780347, 0.1097067237413063, 0.17318461914205285, 0.12065102555103235, 0.10811103613778594, 0.07440388189480185, 0.07685410087593025, 0.4578031707478488, 0.4832163452691767, 0.4727059909293331, 0.4831289423223606, 0.47502477839409074, 0.20715242834734815, 0.4858417494930889, 0.4681814771669085, 0.4957557351333114, 0.08131871123822021, 0.09918305281306128, 0.10391436641045038, 0.09938494362663042, 0.0998404005640563, 0.1081851939744285, 0.10123010111460296, 0.08989741232228676, 0.07495221966824317, 0.15125996572652545, 0.16666887472214786, 0.18163315835428007, 0.1506021890295156, 0.24912078405372884, 0.15818841827323593, 0.2542017562470338, 0.13463732191125677, 0.23720421801951952, 0.3526598533945907, 0.3281641204491026, 0.40350104941883636, 0.43191401181361255, 0.27316090787055436, 0.35387253182857537, 0.26490032766034766, 0.3811268781796133, 0.4152112788827489, 0.3030741520186597, 0.16518495271185807, 0.2766953546960471, 0.18512927222910525, 0.20871652897415716, 0.25667413593723987, 0.19661206884932703, 0.27813081478415824, 0.23082866925206114, 0.19960524151194203, 0.1667412008914595, 0.1836417032272213, 0.19803487637230754, 0.19452800037877715, 0.1685231444328107, 0.2050412756013431, 0.1819938394398355, 0.21053517260127774, 0.20918156875769633, 0.2147030997563928, 0.22896514785569066, 0.33300651602936737, 0.22203080012856913, 0.17576690011683804, 0.21254467043081038, 0.20929111246679177, 0.21607206264097945, 0.7729419089419924, 0.16675281874489978, 0.153116053937025, 0.8247563235683145, 0.19750762136501432, 0.1650411963655053, 0.14145035768816638, 0.6102693953571624, 0.7935058441672844, 0.5114565742194555, 0.20573565574971153, 0.16496769509374265, 0.43799846492481287, 0.1661110489861558, 0.1477503459272248, 0.20036790180578645, 0.5135054192249426, 0.6917999097003087, 0.19108813674561675, 0.2099240855299338, 0.1897432386276532, 0.19041084287967924, 0.18032066867337493, 0.20651817644378756, 0.18174174283118416, 0.18344813547613736, 0.18286181533063883, 0.07686224515232132, 0.06741873477854277, 0.06538469158871796, 0.08125596709285199, 0.0700148736018924, 0.0653420015898839, 0.06437615606145541, 0.08029192278484298, 0.06842212049753549]}, "mutation_prompt": null}
