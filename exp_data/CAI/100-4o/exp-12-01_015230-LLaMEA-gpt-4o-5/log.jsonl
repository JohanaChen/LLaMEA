{"id": "bb833279-beaa-46b7-980d-42b86bb4fec6", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.c1 = 2.0  # cognitive parameter\n        self.c2 = 2.0  # social parameter\n        self.w = 0.7   # inertia weight\n        self.F = 0.5   # differential weight for DE\n        self.CR = 0.9  # crossover probability for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n\n        # Initialize particle positions and velocities\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = positions.copy()\n        personal_best_scores = np.array([func(p) for p in positions])\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        iterations = self.budget // self.swarm_size\n        for _ in range(iterations):\n            for i in range(self.swarm_size):\n                # Update velocity and position using PSO rules\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.w * velocities[i] +\n                                 self.c1 * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.c2 * r2 * (global_best_position - positions[i]))\n                positions[i] += velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n                # Differential Evolution Mutation and Crossover\n                indices = list(range(self.swarm_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = positions[a] + self.F * (positions[b] - positions[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, positions[i])\n\n                # Evaluate trial vector\n                trial_score = func(trial_vector)\n\n                # Select the better solution\n                current_score = func(positions[i])\n                if trial_score < current_score:\n                    positions[i] = trial_vector\n                    current_score = trial_score\n\n                # Update personal best\n                if current_score < personal_best_scores[i]:\n                    personal_best_scores[i] = current_score\n                    personal_best_positions[i] = positions[i]\n\n                # Update global best\n                if current_score < global_best_score:\n                    global_best_score = current_score\n                    global_best_position = positions[i]\n\n        return global_best_position, global_best_score", "name": "HybridPSO_DE", "description": "A hybrid swarm-based optimization algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to explore and exploit the search space effectively.", "configspace": "", "generation": 0, "fitness": 0.1953193873463919, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.4194988657354456, 0.4194988657354456, 0.4194988657354456, 0.4796623493813329, 0.4796623493813329, 0.4796623493813329, 0.5351204923100574, 0.5351204923100574, 0.5351204923100574, 0.16932030773721307, 0.16932030773721307, 0.16932030773721307, 0.10362507259667675, 0.10362507259667675, 0.10362507259667675, 0.09413501885901276, 0.09413501885901276, 0.09413501885901276, 0.06582868455784208, 0.06582868455784208, 0.06582868455784208, 0.0754554237170636, 0.0754554237170636, 0.0754554237170636, 0.08854225688161532, 0.08854225688161532, 0.08854225688161532, 0.07627248549013488, 0.07627248549013488, 0.07627248549013488, 0.041411311865150124, 0.041411311865150124, 0.041411311865150124, 0.04654299322719657, 0.04654299322719657, 0.04654299322719657, 0.9947863011394984, 0.9947863011394984, 0.9947863011394984, 0.9947366031010486, 0.9947366031010486, 0.9947366031010486, 0.9930124568523959, 0.9930124568523959, 0.9930124568523959, 0.12417724735305313, 0.12417724735305313, 0.12417724735305313, 0.10415354806518173, 0.10415354806518173, 0.10415354806518173, 0.1025642024027662, 0.1025642024027662, 0.1025642024027662, 0.28673476695811717, 0.28673476695811717, 0.28673476695811717, 0.18013854447318123, 0.18013854447318123, 0.18013854447318123, 0.2195319809474343, 0.2195319809474343, 0.2195319809474343, 0.13508396125533217, 0.13508396125533217, 0.13508396125533217, 0.0850283079504186, 0.0850283079504186, 0.0850283079504186, 0.1293869811293178, 0.1293869811293178, 0.1293869811293178, 0.13271346690023678, 0.13271346690023678, 0.13271346690023678, 0.11871465972470163, 0.11871465972470163, 0.11871465972470163, 0.12396691943277915, 0.12396691943277915, 0.12396691943277915, 0.030251797294352567, 0.030251797294352567, 0.030251797294352567, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09121965870102289, 0.09121965870102289, 0.09121965870102289, 0.07496972989536677, 0.07496972989536677, 0.07496972989536677, 0.07777602829892094, 0.07777602829892094, 0.07777602829892094, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038458985951252744, 0.038458985951252744, 0.038458985951252744, 0.009595266839661387, 0.009595266839661387, 0.009595266839661387, 0.12713101909859392, 0.12713101909859392, 0.12713101909859392, 0.08241125435531338, 0.08241125435531338, 0.08241125435531338, 0.06778271886990828, 0.06778271886990828, 0.06778271886990828, 0.3646572989868716, 0.3646572989868716, 0.3646572989868716, 0.4064563870234006, 0.4064563870234006, 0.4064563870234006, 0.35710139952757036, 0.35710139952757036, 0.35710139952757036, 0.08069167982382641, 0.08069167982382641, 0.08069167982382641, 0.07009335604432232, 0.07009335604432232, 0.07009335604432232, 0.07593474069386297, 0.07593474069386297, 0.07593474069386297, 0.14221808131497582, 0.14221808131497582, 0.14221808131497582, 0.1442971609963566, 0.1442971609963566, 0.1442971609963566, 0.179189458838929, 0.179189458838929, 0.179189458838929, 0.2608808252400572, 0.2608808252400572, 0.2608808252400572, 0.26488525858337897, 0.26488525858337897, 0.26488525858337897, 0.2511466603722531, 0.2511466603722531, 0.2511466603722531, 0.1468545827458685, 0.1468545827458685, 0.1468545827458685, 0.17411779291036344, 0.17411779291036344, 0.17411779291036344, 0.17120550021714387, 0.17120550021714387, 0.17120550021714387, 0.1872410092532094, 0.1872410092532094, 0.1872410092532094, 0.17799320983231615, 0.17799320983231615, 0.17799320983231615, 0.14092591982390945, 0.14092591982390945, 0.14092591982390945, 0.18129353022046202, 0.18129353022046202, 0.18129353022046202, 0.1739166805679273, 0.1739166805679273, 0.1739166805679273, 0.17886355114569052, 0.17886355114569052, 0.17886355114569052, 0.7911315961741939, 0.7911315961741939, 0.7911315961741939, 0.19372156635406346, 0.19372156635406346, 0.19372156635406346, 0.15276779353700365, 0.15276779353700365, 0.15276779353700365, 0.16745514343030987, 0.16745514343030987, 0.16745514343030987, 0.1932535116080979, 0.1932535116080979, 0.1932535116080979, 0.15339442922452162, 0.15339442922452162, 0.15339442922452162, 0.19859938226597473, 0.19859938226597473, 0.19859938226597473, 0.18122745860702094, 0.18122745860702094, 0.18122745860702094, 0.17895640197890494, 0.17895640197890494, 0.17895640197890494, 0.07938327721527183, 0.07938327721527183, 0.07938327721527183, 0.05801071916291933, 0.05801071916291933, 0.05801071916291933, 0.06508885587064472, 0.06508885587064472, 0.06508885587064472]}, "mutation_prompt": null}
{"id": "3c8abbc5-526e-4bab-a07d-88d83ced5db2", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.c1 = 2.0  # cognitive parameter\n        self.c2 = 2.0  # social parameter\n        self.w = 0.7   # inertia weight\n        self.F = 0.5   # differential weight for DE\n        self.CR = 0.9  # crossover probability for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n\n        # Initialize particle positions and velocities\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = positions.copy()\n        personal_best_scores = np.array([func(p) for p in positions])\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        iterations = self.budget // self.swarm_size\n        for it in range(iterations):\n            self.w = 0.9 - 0.5 * (it / iterations)  # Adaptive inertia weight\n            self.c1 = 2.5 - 1.5 * (it / iterations)  # Adaptive cognitive parameter\n            for i in range(self.swarm_size):\n                # Update velocity and position using PSO rules\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.w * velocities[i] +\n                                 self.c1 * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.c2 * r2 * (global_best_position - positions[i]))\n                positions[i] += velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n                # Differential Evolution Mutation and Crossover\n                indices = list(range(self.swarm_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = positions[a] + self.F * (positions[b] - positions[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, positions[i])\n\n                # Evaluate trial vector\n                trial_score = func(trial_vector)\n\n                # Select the better solution\n                current_score = func(positions[i])\n                if trial_score < current_score:\n                    positions[i] = trial_vector\n                    current_score = trial_score\n\n                # Update personal best\n                if current_score < personal_best_scores[i]:\n                    personal_best_scores[i] = current_score\n                    personal_best_positions[i] = positions[i]\n\n                # Update global best\n                if current_score < global_best_score:\n                    global_best_score = current_score\n                    global_best_position = positions[i]\n\n        return global_best_position, global_best_score", "name": "HybridPSO_DE", "description": "Introduce adaptive parameter tuning to the hybrid algorithm to enhance exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": 0.14935433624848998, "feedback": "", "error": "", "parent_id": "bb833279-beaa-46b7-980d-42b86bb4fec6", "metadata": {"aucs": [0.24405181499689887, 0.24405181499689887, 0.24405181499689887, 0.37977716911709225, 0.37977716911709225, 0.37977716911709225, 0.27172301178941605, 0.27172301178941605, 0.27172301178941605, 0.008174319974800559, 0.008174319974800559, 0.008174319974800559, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006743254207926319, 0.006743254207926319, 0.006743254207926319, 0.05868879691163109, 0.05868879691163109, 0.05868879691163109, 0.060125173330838666, 0.060125173330838666, 0.060125173330838666, 0.0601193113987345, 0.0601193113987345, 0.0601193113987345, 0.038056410499458404, 0.038056410499458404, 0.038056410499458404, 0.0441638562053247, 0.0441638562053247, 0.0441638562053247, 0.035584558297720115, 0.035584558297720115, 0.035584558297720115, 0.994875202805648, 0.994875202805648, 0.994875202805648, 0.9947361582720194, 0.9947361582720194, 0.9947361582720194, 0.9930134242240842, 0.9930134242240842, 0.9930134242240842, 0.0823885940799588, 0.0823885940799588, 0.0823885940799588, 0.11188012105959955, 0.11188012105959955, 0.11188012105959955, 0.08696004036397531, 0.08696004036397531, 0.08696004036397531, 0.17506696407424538, 0.17506696407424538, 0.17506696407424538, 0.16066931766704606, 0.16066931766704606, 0.16066931766704606, 0.18117032047711312, 0.18117032047711312, 0.18117032047711312, 0.0652810304042234, 0.0652810304042234, 0.0652810304042234, 0.06089853045096738, 0.06089853045096738, 0.06089853045096738, 0.05295909616646599, 0.05295909616646599, 0.05295909616646599, 0.05294926069303163, 0.05294926069303163, 0.05294926069303163, 0.04859920118247851, 0.04859920118247851, 0.04859920118247851, 0.0678694229936071, 0.0678694229936071, 0.0678694229936071, 0.006103319140774555, 0.006103319140774555, 0.006103319140774555, 0.011673909241382119, 0.011673909241382119, 0.011673909241382119, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03954500915611092, 0.03954500915611092, 0.03954500915611092, 0.05447947061769831, 0.05447947061769831, 0.05447947061769831, 0.05523592213631323, 0.05523592213631323, 0.05523592213631323, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002382833660987682, 0.0002382833660987682, 0.0002382833660987682, 0.00424901571138836, 0.00424901571138836, 0.00424901571138836, 0.010480387971840033, 0.010480387971840033, 0.010480387971840033, 0.03952340104874452, 0.03952340104874452, 0.03952340104874452, 0.0623144454815181, 0.0623144454815181, 0.0623144454815181, 0.28423928495336725, 0.28423928495336725, 0.28423928495336725, 0.27828500212382445, 0.27828500212382445, 0.27828500212382445, 0.2577948436633223, 0.2577948436633223, 0.2577948436633223, 0.0909500798457169, 0.0909500798457169, 0.0909500798457169, 0.058318781790217544, 0.058318781790217544, 0.058318781790217544, 0.054315819208373806, 0.054315819208373806, 0.054315819208373806, 0.14696851002848177, 0.14696851002848177, 0.14696851002848177, 0.1474086995232925, 0.1474086995232925, 0.1474086995232925, 0.1386274902557676, 0.1386274902557676, 0.1386274902557676, 0.1917426640058848, 0.1917426640058848, 0.1917426640058848, 0.17676985197018624, 0.17676985197018624, 0.17676985197018624, 0.18091066451322635, 0.18091066451322635, 0.18091066451322635, 0.1360957598072946, 0.1360957598072946, 0.1360957598072946, 0.13593618893239723, 0.13593618893239723, 0.13593618893239723, 0.15041877835660433, 0.15041877835660433, 0.15041877835660433, 0.17313480315821284, 0.17313480315821284, 0.17313480315821284, 0.1594733808278157, 0.1594733808278157, 0.1594733808278157, 0.18506063578420107, 0.18506063578420107, 0.18506063578420107, 0.16286968555470993, 0.16286968555470993, 0.16286968555470993, 0.16242600988781974, 0.16242600988781974, 0.16242600988781974, 0.1331384913494963, 0.1331384913494963, 0.1331384913494963, 0.27861506459763863, 0.27861506459763863, 0.27861506459763863, 0.15505398162738238, 0.15505398162738238, 0.15505398162738238, 0.12247522367210206, 0.12247522367210206, 0.12247522367210206, 0.16644133205236045, 0.16644133205236045, 0.16644133205236045, 0.17830852581158108, 0.17830852581158108, 0.17830852581158108, 0.13539310490010048, 0.13539310490010048, 0.13539310490010048, 0.18985660640057012, 0.18985660640057012, 0.18985660640057012, 0.14997642133480782, 0.14997642133480782, 0.14997642133480782, 0.18857995029423869, 0.18857995029423869, 0.18857995029423869, 0.054541164896655614, 0.054541164896655614, 0.054541164896655614, 0.04990026334330555, 0.04990026334330555, 0.04990026334330555, 0.0588176199041498, 0.0588176199041498, 0.0588176199041498]}, "mutation_prompt": null}
