{"id": "8f6f4be5-dc0d-4768-a0d2-6309a15f3cf8", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.w = 0.5   # Inertia weight\n        self.F = 0.8   # DE scaling factor\n        self.CR = 0.9  # DE crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.full(self.pop_size, np.inf)\n\n        # Initial evaluation\n        for i in range(self.pop_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        # Get global best\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index].copy()\n        \n        for iter in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity and position (PSO step)\n                velocities[i] = (self.w * velocities[i] +\n                                 self.c1 * np.random.rand() * (personal_best_positions[i] - particles[i]) +\n                                 self.c2 * np.random.rand() * (global_best_position - particles[i]))\n                particles[i] = particles[i] + velocities[i]\n                particles[i] = np.clip(particles[i], self.bounds[0], self.bounds[1])\n\n                # Mutate and crossover (DE step)\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = particles[idxs]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n\n                # Evaluate trial\n                trial_score = func(trial)\n                if trial_score < personal_best_scores[i]:\n                    personal_best_scores[i] = trial_score\n                    personal_best_positions[i] = trial\n\n                # Update global best\n                if trial_score < func(global_best_position):\n                    global_best_position = trial\n\n        return global_best_position\n\n# Example of usage:\n# optimizer = HybridPSO_DE(budget=1000, dim=10)\n# best_solution = optimizer(some_black_box_function)", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution crossover to balance exploration and exploitation in high-dimensional search spaces.", "configspace": "", "generation": 0, "fitness": 0.36970621672462184, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7689619974437801, 0.7614196037422549, 0.7573828976040885, 0.7913371327720202, 0.7581073738829306, 0.7451413850430498, 0.7722077171392642, 0.7832964383819796, 0.7593279676628333, 0.5484627877951667, 0.5594350844965186, 0.4579964350611644, 0.5645853643723311, 0.4519969632158648, 0.5423407921674309, 0.3523962577494595, 0.5301990169883839, 0.5417825776391588, 0.1296254565222421, 0.14463275235235962, 0.08459919035367858, 0.1357202704378513, 0.13776218621589942, 0.14272583433756048, 0.1516448594379206, 0.12118651330715968, 0.12297501694897417, 0.07905160813166545, 0.1039180045961029, 0.1250941212174974, 0.13827111653205193, 0.1315559340410204, 0.11677846169530204, 0.0951622525075334, 0.09482533037126017, 0.10596714345813629, 0.9891466905312549, 0.9821846448095753, 0.9876701560790244, 0.97470251345971, 0.981213393814033, 0.9682017214754437, 0.9784190829519351, 0.9751727458219411, 0.9799800222146475, 0.4901380383781109, 0.579589453382688, 0.5178854408126701, 0.5661567687112992, 0.47659234265623696, 0.5191402862510663, 0.5109529500636691, 0.0878934609184665, 0.29228483878420464, 0.7519704193258074, 0.7920144768507646, 0.7670853684640675, 0.7867253597236523, 0.8460843245479625, 0.1969700581890802, 0.7820834417150101, 0.7865241808240926, 0.14993363410027682, 0.12247986605700556, 0.37998231889188083, 0.501664662155413, 0.11644023520013091, 0.4277367293898784, 0.3921109281195527, 0.42921160889422016, 0.39525788502317205, 0.3568370690763979, 0.35297771137157485, 0.3319755980293887, 0.34517683740909333, 0.5540367999596734, 0.3551287398217451, 0.3500001579471467, 0.5325547037190868, 0.46927239116714814, 0.34399064047196537, 0.0499991031573922, 0.24107819986988066, 0.22854748148738546, 0.026232413828972456, 0.35027314674944876, 0.06683690395251218, 0.20848104991239802, 0.32211905843439903, 0.4256916390308805, 0.46389865752638515, 0.45253501135363206, 0.5127206627173482, 0.4867024907212434, 0.2800866270772142, 0.29107156846382864, 0.5309414230294229, 0.493149427782675, 0.44618025901953684, 0.05622265133290294, 0.025925648750425023, 0.11854729443091205, 0.34973361671027436, 0.18844337016167223, 0.22250291542853295, 0.08600379677188541, 0.14367211564579052, 0.07228485608819168, 0.2747412687476696, 0.2915258579488489, 0.3109720874385099, 0.31725406210208884, 0.3135985911415792, 0.3095255766771443, 0.2583368254472225, 0.3161015200095265, 0.33787137899319364, 0.7049036559343429, 0.6749376134447203, 0.6729593790308286, 0.686492773080165, 0.6734890899964516, 0.5826126750709701, 0.6794875843936596, 0.6484621624273784, 0.6875199615613954, 0.11780468949340595, 0.09357084229733337, 0.10477612970634731, 0.14950924194964177, 0.09003309712493102, 0.13167110820205563, 0.1069711007712667, 0.13131559445725893, 0.10794124877297184, 0.2837916928413481, 0.331499944672599, 0.14662209147129812, 0.4728982373020516, 0.4759379352020624, 0.1772651756923398, 0.260299268453166, 0.302394062487366, 0.2723032777494987, 0.4570198206591315, 0.4033102812275684, 0.4070518916131085, 0.3883316016187449, 0.44883014068414295, 0.425285254911525, 0.41108117852607406, 0.5256326524300379, 0.46189309389746924, 0.27276535727321716, 0.31920049965669783, 0.34516576701657875, 0.3632591600584837, 0.38463060325661047, 0.3152895699549402, 0.35458392033838004, 0.3856744477805132, 0.3585658099464041, 0.21978532654591998, 0.18859584838334242, 0.1792790371834364, 0.19321891800302493, 0.19466835271679606, 0.21696298811736192, 0.185236630004047, 0.18582347720891113, 0.18833979231292686, 0.19944248345571136, 0.2090207778013764, 0.19124936076317478, 0.18730886702665306, 0.19235141221769692, 0.21092534552671283, 0.19807013328771306, 0.2077934287651273, 0.17809972501364046, 0.8347751999679198, 0.18569072487782567, 0.15317179609348208, 0.85597158344985, 0.19695096857296268, 0.8452806705168004, 0.09967723974081089, 0.16853831495303528, 0.8202905052866427, 0.7543457546107215, 0.20634690847587966, 0.20413013485668985, 0.8012905068726225, 0.16550504900564433, 0.2035517234403228, 0.10356718539127163, 0.8233950552229657, 0.764955244944618, 0.18387064833407707, 0.17657656791254916, 0.1886321133867238, 0.17356008797381328, 0.18411184101478228, 0.18172360221121175, 0.1903632780143022, 0.17995432597850924, 0.17233232202681048, 0.09393770440486293, 0.08679200571350398, 0.08008574772089527, 0.0963434448662025, 0.08280130309838063, 0.08160384173383395, 0.08699197190844987, 0.07522891017564148, 0.08175283986964221]}, "mutation_prompt": null}
{"id": "e18b726b-26ab-41a0-bb76-190cced77232", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 20\n        self.max_iter = budget // self.pop_size\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.w = 0.5   # Inertia weight\n        self.F = 0.8   # DE scaling factor\n        self.CR = 0.9  # DE crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.full(self.pop_size, np.inf)\n\n        # Initial evaluation\n        for i in range(self.pop_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        # Get global best\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index].copy()\n        \n        for iter in range(self.max_iter):\n            for i in range(self.pop_size):\n                # Update velocity and position (PSO step)\n                velocities[i] = (self.w * velocities[i] +\n                                 self.c1 * np.random.rand() * (personal_best_positions[i] - particles[i]) +\n                                 self.c2 * np.random.rand() * (global_best_position - particles[i]))\n                particles[i] = particles[i] + velocities[i]\n                particles[i] = np.clip(particles[i], self.bounds[0], self.bounds[1])\n\n                # Mutate and crossover (DE step)\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = particles[idxs]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n\n                # Evaluate trial\n                trial_score = func(trial)\n                if trial_score < personal_best_scores[i]:\n                    personal_best_scores[i] = trial_score\n                    personal_best_positions[i] = trial\n\n                # Update global best\n                if trial_score < func(global_best_position):\n                    global_best_position = trial\n\n        return global_best_position\n\n# Example of usage:\n# optimizer = HybridPSO_DE(budget=1000, dim=10)\n# best_solution = optimizer(some_black_box_function)", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution crossover to balance exploration and exploitation in high-dimensional search spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8f6f4be5-dc0d-4768-a0d2-6309a15f3cf8", "metadata": {"aucs": [0.7689619974437801, 0.7614196037422549, 0.7573828976040885, 0.7913371327720202, 0.7581073738829306, 0.7451413850430498, 0.7722077171392642, 0.7832964383819796, 0.7593279676628333, 0.5484627877951667, 0.5594350844965186, 0.4579964350611644, 0.5645853643723311, 0.4519969632158648, 0.5423407921674309, 0.3523962577494595, 0.5301990169883839, 0.5417825776391588, 0.1296254565222421, 0.14463275235235962, 0.08459919035367858, 0.1357202704378513, 0.13776218621589942, 0.14272583433756048, 0.1516448594379206, 0.12118651330715968, 0.12297501694897417, 0.07905160813166545, 0.1039180045961029, 0.1250941212174974, 0.13827111653205193, 0.1315559340410204, 0.11677846169530204, 0.0951622525075334, 0.09482533037126017, 0.10596714345813629, 0.9891466905312549, 0.9821846448095753, 0.9876701560790244, 0.97470251345971, 0.981213393814033, 0.9682017214754437, 0.9784190829519351, 0.9751727458219411, 0.9799800222146475, 0.4901380383781109, 0.579589453382688, 0.5178854408126701, 0.5661567687112992, 0.47659234265623696, 0.5191402862510663, 0.5109529500636691, 0.0878934609184665, 0.29228483878420464, 0.7519704193258074, 0.7920144768507646, 0.7670853684640675, 0.7867253597236523, 0.8460843245479625, 0.1969700581890802, 0.7820834417150101, 0.7865241808240926, 0.14993363410027682, 0.12247986605700556, 0.37998231889188083, 0.501664662155413, 0.11644023520013091, 0.4277367293898784, 0.3921109281195527, 0.42921160889422016, 0.39525788502317205, 0.3568370690763979, 0.35297771137157485, 0.3319755980293887, 0.34517683740909333, 0.5540367999596734, 0.3551287398217451, 0.3500001579471467, 0.5325547037190868, 0.46927239116714814, 0.34399064047196537, 0.0499991031573922, 0.24107819986988066, 0.22854748148738546, 0.026232413828972456, 0.35027314674944876, 0.06683690395251218, 0.20848104991239802, 0.32211905843439903, 0.4256916390308805, 0.46389865752638515, 0.45253501135363206, 0.5127206627173482, 0.4867024907212434, 0.2800866270772142, 0.29107156846382864, 0.5309414230294229, 0.493149427782675, 0.44618025901953684, 0.05622265133290294, 0.025925648750425023, 0.11854729443091205, 0.34973361671027436, 0.18844337016167223, 0.22250291542853295, 0.08600379677188541, 0.14367211564579052, 0.07228485608819168, 0.2747412687476696, 0.2915258579488489, 0.3109720874385099, 0.31725406210208884, 0.3135985911415792, 0.3095255766771443, 0.2583368254472225, 0.3161015200095265, 0.33787137899319364, 0.7049036559343429, 0.6749376134447203, 0.6729593790308286, 0.686492773080165, 0.6734890899964516, 0.5826126750709701, 0.6794875843936596, 0.6484621624273784, 0.6875199615613954, 0.11780468949340595, 0.09357084229733337, 0.10477612970634731, 0.14950924194964177, 0.09003309712493102, 0.13167110820205563, 0.1069711007712667, 0.13131559445725893, 0.10794124877297184, 0.2837916928413481, 0.331499944672599, 0.14662209147129812, 0.4728982373020516, 0.4759379352020624, 0.1772651756923398, 0.260299268453166, 0.302394062487366, 0.2723032777494987, 0.4570198206591315, 0.4033102812275684, 0.4070518916131085, 0.3883316016187449, 0.44883014068414295, 0.425285254911525, 0.41108117852607406, 0.5256326524300379, 0.46189309389746924, 0.27276535727321716, 0.31920049965669783, 0.34516576701657875, 0.3632591600584837, 0.38463060325661047, 0.3152895699549402, 0.35458392033838004, 0.3856744477805132, 0.3585658099464041, 0.21978532654591998, 0.18859584838334242, 0.1792790371834364, 0.19321891800302493, 0.19466835271679606, 0.21696298811736192, 0.185236630004047, 0.18582347720891113, 0.18833979231292686, 0.19944248345571136, 0.2090207778013764, 0.19124936076317478, 0.18730886702665306, 0.19235141221769692, 0.21092534552671283, 0.19807013328771306, 0.2077934287651273, 0.17809972501364046, 0.8347751999679198, 0.18569072487782567, 0.15317179609348208, 0.85597158344985, 0.19695096857296268, 0.8452806705168004, 0.09967723974081089, 0.16853831495303528, 0.8202905052866427, 0.7543457546107215, 0.20634690847587966, 0.20413013485668985, 0.8012905068726225, 0.16550504900564433, 0.2035517234403228, 0.10356718539127163, 0.8233950552229657, 0.764955244944618, 0.18387064833407707, 0.17657656791254916, 0.1886321133867238, 0.17356008797381328, 0.18411184101478228, 0.18172360221121175, 0.1903632780143022, 0.17995432597850924, 0.17233232202681048, 0.09393770440486293, 0.08679200571350398, 0.08008574772089527, 0.0963434448662025, 0.08280130309838063, 0.08160384173383395, 0.08699197190844987, 0.07522891017564148, 0.08175283986964221]}, "mutation_prompt": null}
