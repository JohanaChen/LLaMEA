{"id": "4d742eed-b257-4f39-bea6-9569398b77ae", "solution": "import numpy as np\n\nclass HybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20 + 5 * np.log(self.dim)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (int(self.population_size), self.dim))\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        evaluations = 0\n        best_individual = None\n        best_fitness = float('inf')\n\n        while evaluations < self.budget:\n            for i in range(int(self.population_size)):\n                if evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(int(self.population_size)) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = a + self.F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < func(self.population[i]):\n                    self.population[i] = trial\n                    if f_trial < best_fitness:\n                        best_fitness = f_trial\n                        best_individual = trial\n\n                # Adaptive parameters\n                if evaluations % (self.budget // 10) == 0:\n                    self.F = np.random.uniform(0.4, 0.9)\n                    self.CR = np.random.uniform(0.1, 1.0)\n\n        return best_individual", "name": "HybridAdaptiveDE", "description": "A hybrid adaptive differential evolution algorithm combining DE with adaptive mutation and crossover strategies to explore diverse regions effectively.", "configspace": "", "generation": 0, "fitness": 0.29843353453428856, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7615908075300639, 0.7419359689736931, 0.7817025576366989, 0.750188482717346, 0.7484557129177762, 0.7577330854465061, 0.7309717107159086, 0.7768352359818411, 0.7857993822378145, 0.5227763352121568, 0.5682596802342234, 0.5860350480237995, 0.5763431755994038, 0.6017294264094479, 0.6075198003043776, 0.5478236893114115, 0.5765239583112094, 0.637038943896425, 0.11337513717978531, 0.2919151592164666, 0.26487490284021376, 0.12187440951930151, 0.3363421555555751, 0.2966046011017083, 0.1088608248022419, 0.28216340521513494, 0.262222383099581, 0.11439629323819211, 0.2500942177412727, 0.2081604072393991, 0.12200862365658616, 0.22536294121187905, 0.1780866981227286, 0.11831794525867367, 0.15394383272358825, 0.28692701463643266, 0.8305498327951802, 0.924943423784304, 0.8121037608910268, 0.8334447351449763, 0.8214596648737023, 0.8103208295375374, 0.8545950921202304, 0.8895138269070704, 0.9517252631852888, 0.35590603590353864, 0.24350112581756267, 0.27979468969062393, 0.3379245012186649, 0.1775938466057969, 0.37582572864981334, 0.34526475326486605, 0.2319515280050608, 0.28296570534666976, 0.6784031204512695, 0.2831695174774901, 0.31066055556304106, 0.8332511052624441, 0.7162436293347036, 0.6410589103815615, 0.7041705092981425, 0.7509367709963796, 0.7097544475214583, 0.18650465213289258, 0.14406106687478748, 0.14592385109941097, 0.19197995793005806, 0.17042811637307897, 0.1932964278841608, 0.21230925183434357, 0.15316170817622476, 0.1777240363834659, 0.14251333436640157, 0.1541412400321478, 0.12216788661501343, 0.23816315061356153, 0.14669021315753272, 0.26919416253427897, 0.1547614581784721, 0.13969347778665853, 0.12219614626275865, 0.18125716995159358, 9.999999999998899e-05, 0.06196698349023777, 0.21191394375118322, 0.0602507584634866, 0.0937902713082982, 0.22361974169718213, 0.0014995679932849892, 0.13758602570472866, 0.38412079162263757, 0.13559830438152132, 0.2711830480170826, 0.340085288290364, 0.09185828302658572, 0.15081354056870733, 0.379354553573778, 0.08928154205055083, 0.15996461338757695, 0.06658200707575257, 0.009004728928636352, 0.06919388335883636, 0.12715256515838136, 0.00221801541153277, 0.01510913177994333, 0.09617673448504083, 9.999999999998899e-05, 0.06775136161596551, 0.1771160583551895, 0.10965459711796344, 0.15082451146031128, 0.2256609163479607, 0.1570177386239182, 0.1521321161845246, 0.1971943226023425, 0.1422246748670164, 0.16269821489854475, 0.5597803742150529, 0.48958636710773484, 0.4971197527128963, 0.5973807630807608, 0.4498392700640458, 0.4961993001524597, 0.6223648275554374, 0.4517629825834707, 0.48065112445259583, 0.12058866298670878, 0.08740714456664989, 0.0979541322455012, 0.09865214496989283, 0.13185057210105045, 0.09650936084761541, 0.09745000113113833, 0.0813969353099232, 0.10117330728703111, 0.132758668149914, 0.14993735835635014, 0.13344957694917903, 0.1401637644723407, 0.16511430693931795, 0.13990966117511794, 0.16939382298180627, 0.1410834967286151, 0.13221528574598307, 0.3481035268054532, 0.2971106020660794, 0.3295176285779714, 0.3736546114658119, 0.30555767805992884, 0.3444510493158701, 0.36812254405402534, 0.32825354345170665, 0.35025576765199073, 0.29068182378562846, 0.23264627140834404, 0.20934078539950451, 0.25712843079885916, 0.2114548301057353, 0.2489303685553732, 0.28870852313187867, 0.19882708830939788, 0.24424673576894917, 0.1819504626700258, 0.17609798739613491, 0.19824138292772653, 0.20558582567796035, 0.20741156195867771, 0.1815556742951694, 0.167222060734865, 0.19937360152597206, 0.18740919112402932, 0.20167081762779093, 0.21173847088659214, 0.19351129431667757, 0.1858065606426379, 0.20496270178932718, 0.19566753738045162, 0.18077022578951496, 0.19709174343335034, 0.48071690138386247, 0.17997526797156227, 0.59677197617392, 0.12312515278137415, 0.707317039927944, 0.2780084412493099, 0.5726501505779422, 0.5751148607643419, 0.17283955691248576, 0.5012693527928498, 0.7099976681683012, 0.20347333509265653, 0.20538805461088838, 0.19877133813638304, 0.17640441271515317, 0.24342795466246625, 0.6243612364075379, 0.24253986001210182, 0.2105663394432541, 0.1864085850219679, 0.20321036249330604, 0.17000502392985728, 0.18172738303007974, 0.17909361125388645, 0.17236576057353137, 0.17735647425263723, 0.1788139496088279, 0.21159460181582623, 0.06742929693354949, 0.07306898950050345, 0.0799715068128819, 0.0799229336897661, 0.07621050879192626, 0.08378233448512507, 0.07902984165119853, 0.07251401355754172, 0.07287450082839808]}, "mutation_prompt": null}
{"id": "162b7684-ff17-4828-a987-dd3b6c882a16", "solution": "import numpy as np\n\nclass HybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20 + 5 * np.log(self.dim)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (int(self.population_size), self.dim))\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        evaluations = 0\n        best_individual = None\n        best_fitness = float('inf')\n\n        while evaluations < self.budget:\n            for i in range(int(self.population_size)):\n                if evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(int(self.population_size)) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = a + self.F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < func(self.population[i]):\n                    self.population[i] = trial\n                    if f_trial < best_fitness:\n                        best_fitness = f_trial\n                        best_individual = trial\n\n                # Adaptive parameters\n                if evaluations % (self.budget // 10) == 0:\n                    self.F = np.random.uniform(0.4, 0.9)\n                    self.CR = np.random.uniform(0.1, 1.0)\n\n        return best_individual", "name": "HybridAdaptiveDE", "description": "A hybrid adaptive differential evolution algorithm combining DE with adaptive mutation and crossover strategies to explore diverse regions effectively.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d742eed-b257-4f39-bea6-9569398b77ae", "metadata": {"aucs": [0.7615908075300639, 0.7419359689736931, 0.7817025576366989, 0.750188482717346, 0.7484557129177762, 0.7577330854465061, 0.7309717107159086, 0.7768352359818411, 0.7857993822378145, 0.5227763352121568, 0.5682596802342234, 0.5860350480237995, 0.5763431755994038, 0.6017294264094479, 0.6075198003043776, 0.5478236893114115, 0.5765239583112094, 0.637038943896425, 0.11337513717978531, 0.2919151592164666, 0.26487490284021376, 0.12187440951930151, 0.3363421555555751, 0.2966046011017083, 0.1088608248022419, 0.28216340521513494, 0.262222383099581, 0.11439629323819211, 0.2500942177412727, 0.2081604072393991, 0.12200862365658616, 0.22536294121187905, 0.1780866981227286, 0.11831794525867367, 0.15394383272358825, 0.28692701463643266, 0.8305498327951802, 0.924943423784304, 0.8121037608910268, 0.8334447351449763, 0.8214596648737023, 0.8103208295375374, 0.8545950921202304, 0.8895138269070704, 0.9517252631852888, 0.35590603590353864, 0.24350112581756267, 0.27979468969062393, 0.3379245012186649, 0.1775938466057969, 0.37582572864981334, 0.34526475326486605, 0.2319515280050608, 0.28296570534666976, 0.6784031204512695, 0.2831695174774901, 0.31066055556304106, 0.8332511052624441, 0.7162436293347036, 0.6410589103815615, 0.7041705092981425, 0.7509367709963796, 0.7097544475214583, 0.18650465213289258, 0.14406106687478748, 0.14592385109941097, 0.19197995793005806, 0.17042811637307897, 0.1932964278841608, 0.21230925183434357, 0.15316170817622476, 0.1777240363834659, 0.14251333436640157, 0.1541412400321478, 0.12216788661501343, 0.23816315061356153, 0.14669021315753272, 0.26919416253427897, 0.1547614581784721, 0.13969347778665853, 0.12219614626275865, 0.18125716995159358, 9.999999999998899e-05, 0.06196698349023777, 0.21191394375118322, 0.0602507584634866, 0.0937902713082982, 0.22361974169718213, 0.0014995679932849892, 0.13758602570472866, 0.38412079162263757, 0.13559830438152132, 0.2711830480170826, 0.340085288290364, 0.09185828302658572, 0.15081354056870733, 0.379354553573778, 0.08928154205055083, 0.15996461338757695, 0.06658200707575257, 0.009004728928636352, 0.06919388335883636, 0.12715256515838136, 0.00221801541153277, 0.01510913177994333, 0.09617673448504083, 9.999999999998899e-05, 0.06775136161596551, 0.1771160583551895, 0.10965459711796344, 0.15082451146031128, 0.2256609163479607, 0.1570177386239182, 0.1521321161845246, 0.1971943226023425, 0.1422246748670164, 0.16269821489854475, 0.5597803742150529, 0.48958636710773484, 0.4971197527128963, 0.5973807630807608, 0.4498392700640458, 0.4961993001524597, 0.6223648275554374, 0.4517629825834707, 0.48065112445259583, 0.12058866298670878, 0.08740714456664989, 0.0979541322455012, 0.09865214496989283, 0.13185057210105045, 0.09650936084761541, 0.09745000113113833, 0.0813969353099232, 0.10117330728703111, 0.132758668149914, 0.14993735835635014, 0.13344957694917903, 0.1401637644723407, 0.16511430693931795, 0.13990966117511794, 0.16939382298180627, 0.1410834967286151, 0.13221528574598307, 0.3481035268054532, 0.2971106020660794, 0.3295176285779714, 0.3736546114658119, 0.30555767805992884, 0.3444510493158701, 0.36812254405402534, 0.32825354345170665, 0.35025576765199073, 0.29068182378562846, 0.23264627140834404, 0.20934078539950451, 0.25712843079885916, 0.2114548301057353, 0.2489303685553732, 0.28870852313187867, 0.19882708830939788, 0.24424673576894917, 0.1819504626700258, 0.17609798739613491, 0.19824138292772653, 0.20558582567796035, 0.20741156195867771, 0.1815556742951694, 0.167222060734865, 0.19937360152597206, 0.18740919112402932, 0.20167081762779093, 0.21173847088659214, 0.19351129431667757, 0.1858065606426379, 0.20496270178932718, 0.19566753738045162, 0.18077022578951496, 0.19709174343335034, 0.48071690138386247, 0.17997526797156227, 0.59677197617392, 0.12312515278137415, 0.707317039927944, 0.2780084412493099, 0.5726501505779422, 0.5751148607643419, 0.17283955691248576, 0.5012693527928498, 0.7099976681683012, 0.20347333509265653, 0.20538805461088838, 0.19877133813638304, 0.17640441271515317, 0.24342795466246625, 0.6243612364075379, 0.24253986001210182, 0.2105663394432541, 0.1864085850219679, 0.20321036249330604, 0.17000502392985728, 0.18172738303007974, 0.17909361125388645, 0.17236576057353137, 0.17735647425263723, 0.1788139496088279, 0.21159460181582623, 0.06742929693354949, 0.07306898950050345, 0.0799715068128819, 0.0799229336897661, 0.07621050879192626, 0.08378233448512507, 0.07902984165119853, 0.07251401355754172, 0.07287450082839808]}, "mutation_prompt": null}
