{"id": "aa54416b-618e-43f9-9ca9-5358170f931c", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.temp_initial = 100.0\n        self.temp_final = 1.0\n        self.cooling_rate = 0.95\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        eval_count = self.population_size\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx].copy()\n        best_fitness = fitness[best_idx]\n\n        temperature = self.temp_initial\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                # Differential Evolution\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover = np.random.rand(self.dim) < self.crossover_rate\n                if not np.any(crossover):\n                    crossover[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(crossover, mutant, population[i])\n                \n                # Simulated Annealing acceptance\n                trial_fitness = func(trial)\n                eval_count += 1\n                \n                delta_fitness = trial_fitness - fitness[i]\n                if delta_fitness < 0 or np.exp(-delta_fitness / temperature) > np.random.rand():\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                \n                    if trial_fitness < best_fitness:\n                        best_individual = trial.copy()\n                        best_fitness = trial_fitness\n            \n            # Update temperature\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n\n        return best_individual, best_fitness", "name": "HybridDESA", "description": "A novel hybrid algorithm combining Differential Evolution and Simulated Annealing to balance exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.1948667274556848, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.2621101016843831, 0.260614835072854, 0.26121672565435894, 0.2864237356849385, 0.2475554090610227, 0.2648227857440708, 0.24565286605985137, 0.250330196060062, 0.2624945274526158, 0.20696901551235258, 0.2377038051741419, 0.22428498629052784, 0.23933251150539003, 0.22331823658600003, 0.2089032374921721, 0.22815798474419213, 0.21564961952050332, 0.20821346666738638, 0.08136811349871842, 0.08823043583300982, 0.07924137550366672, 0.08500675436838723, 0.08981258798956993, 0.09025339548149658, 0.08660823283092356, 0.09273052963945427, 0.08642897980044728, 0.08084554204571448, 0.08410184466168447, 0.09129920989037965, 0.0750007103031185, 0.07492213411207327, 0.0697934630580237, 0.07161265964733599, 0.09004469757318712, 0.0777547105499432, 0.8969340867296243, 0.8802475586720115, 0.9412668020134402, 0.9546288126112669, 0.9545172546397536, 0.9756552755278837, 0.9139645402499279, 0.9721985094533009, 0.9384336795659721, 0.1893135878344645, 0.19237024261754976, 0.18516278224132943, 0.20683978897682398, 0.18496518094363634, 0.19329566000600706, 0.19595780969455978, 0.19339846881516343, 0.1835346848434497, 0.23111383874030034, 0.22645778407682415, 0.22957260376641064, 0.24029185274498277, 0.21558291041731736, 0.2753805289234268, 0.25333817384946844, 0.22170248905472267, 0.25139593820712913, 0.15262574689612662, 0.16407914350202824, 0.15710900560215435, 0.17006760141297472, 0.16341787195367075, 0.16447501709247603, 0.16800526484142408, 0.17334586244558048, 0.17103208519516488, 0.20583959042588806, 0.16713787953669146, 0.16538284523205726, 0.14325663158782176, 0.14496965105992798, 0.1606391262250938, 0.1889878067286831, 0.15550171563433157, 0.16795921536679703, 0.12692081562965174, 0.12091913210495786, 0.11702717741968682, 0.10678683070535222, 0.11668056836013618, 0.11493104724609216, 0.12756671069019354, 0.0828213742303584, 0.10689231855186876, 0.19453942362760002, 0.23554230990004266, 0.19652117442770745, 0.20192947868308586, 0.20585837742380453, 0.17328052021772766, 0.20430067739498858, 0.2254896775352725, 0.18813109031964836, 0.030012388404382362, 0.04279202373600621, 0.01781160861647968, 0.057248965955217446, 0.03379627815676045, 0.019887809180399896, 0.04646621767610848, 0.05374706819646269, 0.038645584700189306, 0.12856579873369245, 0.12600832210598056, 0.12462684568966775, 0.13624904968008755, 0.1345803393477809, 0.12668797425194245, 0.128591188971225, 0.11362599049422983, 0.12704045258256813, 0.26816040073139846, 0.252074193074005, 0.24280400267494895, 0.23961968952415735, 0.2522296313353589, 0.24759612273258758, 0.24039666328067721, 0.23642992811969865, 0.2409137205863926, 0.07468079512891801, 0.08640811104057033, 0.07868795603680623, 0.07577619666714486, 0.06980801051440177, 0.09109230793826573, 0.08446130390760842, 0.07642290580693156, 0.06747173190915512, 0.12433284550179691, 0.15882504412260023, 0.13932650100769095, 0.18119350739410733, 0.13704199223115587, 0.14494484695887966, 0.14066434536199746, 0.15067884189459946, 0.1666329073906342, 0.19111442484969599, 0.19807348062535446, 0.20382978228175574, 0.19328608995859176, 0.18776880399740425, 0.18303183339010398, 0.2190882243681359, 0.20000662427317994, 0.1998649738416629, 0.1568062815051875, 0.15850840482332862, 0.16132838994916787, 0.15137141740571447, 0.15040470369866688, 0.16009875045344035, 0.16242810577249167, 0.16511505640849589, 0.15883424501943177, 0.170602507986522, 0.17518782309701242, 0.17273968057153688, 0.16843839039259434, 0.1747160292835237, 0.15912707476943455, 0.1640290299309085, 0.1562756875831186, 0.16964000705211058, 0.17767384860268087, 0.16619867202711125, 0.17312672444638377, 0.17662200312465937, 0.1720518187107496, 0.17297970546811126, 0.1706364201106213, 0.16507122109258798, 0.17350729692589772, 0.142576157373006, 0.32589942850567233, 0.14368141461684358, 0.31340999826489446, 0.16496890674373188, 0.1420780676354918, 0.2665371742534234, 0.27818414973201866, 0.29847746331217706, 0.17502113677285902, 0.2697464036088346, 0.160067771726908, 0.1567633406416613, 0.16437311059501047, 0.15454798844452833, 0.1855894395114459, 0.3078166141227825, 0.18842476086887094, 0.17728651604534973, 0.18196406867426973, 0.17503224159029673, 0.17956647726382602, 0.18062193833629936, 0.18761012313384173, 0.17506712104763433, 0.1788619889373826, 0.22604686086109937, 0.06030273996843227, 0.06186266629711423, 0.08152538955192845, 0.05990801439066984, 0.0709120809209518, 0.06763869529272837, 0.06287386068165213, 0.07766651966424998, 0.07735952471321539]}, "mutation_prompt": null}
{"id": "84e8c527-c776-4edd-b9e4-a01d16d210c0", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.temp_initial = 100.0\n        self.temp_final = 1.0\n        self.cooling_rate = 0.95\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        eval_count = self.population_size\n        \n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx].copy()\n        best_fitness = fitness[best_idx]\n\n        temperature = self.temp_initial\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                # Differential Evolution\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                dynamic_mutation_factor = self.mutation_factor * (1 - eval_count / self.budget)  # Change 1\n                mutant = np.clip(a + dynamic_mutation_factor * (b - c), self.lower_bound, self.upper_bound)  # Change 2\n                \n                crossover = np.random.rand(self.dim) < self.crossover_rate\n                if not np.any(crossover):\n                    crossover[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(crossover, mutant, population[i])\n                \n                # Simulated Annealing acceptance\n                trial_fitness = func(trial)\n                eval_count += 1\n                \n                delta_fitness = trial_fitness - fitness[i]\n                if delta_fitness < 0 or np.exp(-delta_fitness / temperature) > np.random.rand():\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                \n                    if trial_fitness < best_fitness:\n                        best_individual = trial.copy()\n                        best_fitness = trial_fitness\n            \n            # Update temperature\n            temperature = max(self.temp_final, temperature * self.cooling_rate)\n            self.population_size = int((self.budget - eval_count) / self.dim)  # Change 3\n\n        return best_individual, best_fitness", "name": "HybridDESA", "description": "Enhanced HybridDESA with dynamic mutation factor and population size adjustment for improved adaptability.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 934 is out of bounds for axis 0 with size 50').", "error": "IndexError('index 934 is out of bounds for axis 0 with size 50')", "parent_id": "aa54416b-618e-43f9-9ca9-5358170f931c", "metadata": {}, "mutation_prompt": null}
