{"id": "4d11860a-b404-4dc6-8182-4ef9bc17a9d6", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20 + int(2 * np.sqrt(dim))  # Dynamic swarm size based on dimension\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.random.uniform(-1.0, 1.0, (self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.inertia_weight = 0.7        # Inertia weight\n        self.cognitive_param = 1.5       # Cognitive parameter\n        self.social_param = 1.5          # Social parameter\n        self.mutation_prob = 0.1         # Mutation probability for diversification\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                current_value = func(self.position[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if current_value < self.personal_best_value[i]:\n                    self.personal_best_value[i] = current_value\n                    self.personal_best_position[i] = self.position[i].copy()\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_value = current_value\n                    self.global_best_position = self.position[i].copy()\n\n            # Update positions and velocities\n            for i in range(self.swarm_size):\n                if np.random.rand() < self.mutation_prob:\n                    # Mutation step for exploration\n                    self.position[i] = np.random.uniform(-5.0, 5.0, self.dim)\n                else:\n                    self.velocity[i] = (self.inertia_weight * self.velocity[i] +\n                                        self.cognitive_param * np.random.rand(self.dim) *\n                                        (self.personal_best_position[i] - self.position[i]) +\n                                        self.social_param * np.random.rand(self.dim) *\n                                        (self.global_best_position - self.position[i]))\n                    self.position[i] += self.velocity[i]\n                    self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "A dynamic, adaptive particle swarm optimization with elite particle preservation and mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.2060002781421425, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.49385442282289005, 0.42589742609962444, 0.5340829296363465, 0.529061390407829, 0.4594796267275585, 0.53952786523026, 0.5029677066546664, 0.18281079191343041, 0.4878032382520888, 0.010288691291584606, 0.041951900297395706, 0.018881543275723778, 0.05408249980588076, 0.030106804507564422, 9.999999999998899e-05, 0.011399330709249589, 0.031530550148327174, 0.04792434672403911, 0.09216867544471519, 0.12263578968005617, 0.14409747496023628, 0.1136048518907764, 0.10558337857265265, 0.11831529899466442, 0.12613026316913112, 0.10182296960434889, 0.09233766743259197, 0.11322225013616316, 0.10091419559043646, 0.09428921835554915, 0.09485227663342999, 0.08885842470739913, 0.10582868576077797, 0.0968280616331666, 0.11063605830339729, 0.09960362850130877, 0.9922177813050578, 0.9915951618840093, 0.9910564506432168, 0.981892771584064, 0.9909528588708251, 0.986507022434599, 0.9930400442544558, 0.9897196139892851, 0.9910214498250333, 0.23950865967551138, 0.08255023239306791, 0.2848188003725107, 0.1524927860788795, 0.16114757895794463, 0.149371019820131, 0.14954081057402313, 0.2742306521951944, 0.266585554173009, 0.16963746106058575, 0.28434244256924834, 0.20868176303077668, 0.20417126057183332, 0.19246983690941633, 0.3263199898433342, 0.18048428914423476, 0.23440839814593295, 0.24928906874706847, 0.11853239549849226, 0.1360993531336706, 0.1587387085809221, 0.1394205880702155, 0.13006764288343853, 0.17200088861836715, 0.15228645869562474, 0.14091577538476052, 0.1418008808882203, 0.13635382296392506, 0.1328033632328719, 0.13630702168169007, 0.19049844361776636, 0.12198873507261143, 0.12828313319287699, 0.15328500028222203, 0.034710702266492754, 0.12044937881340934, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03876167872479108, 0.06929121660103488, 0.015302700251209722, 0.06530983217158792, 0.06038680523819617, 0.012057338074005775, 0.007122445021182311, 0.016868008252148736, 0.05211368187723364, 0.050479244320738914, 9.999999999998899e-05, 0.004185907896410157, 0.0723652490602219, 0.0032469149306805223, 0.014888236170418567, 0.01292728611749594, 0.0014883039139145238, 0.011099657171461552, 0.0005994847507710954, 0.03697476070075245, 0.10488659814186918, 0.13619710741362812, 0.056022540291925216, 0.09438883579510715, 0.03527966176088393, 0.07952696436802142, 0.06745499941294997, 0.07553581951860122, 0.42321541926092376, 0.41069731391012154, 0.419780474553608, 0.3837262616745266, 0.41099004334470923, 0.2533371276320646, 0.40530162563821415, 0.4219472395590709, 0.4459639337870742, 0.0792983007830873, 0.06866989207108487, 0.08745121201021466, 0.08386715965224867, 0.12663220134880016, 0.0819156082850836, 0.06137765068224921, 0.0843830461999765, 0.066681767229409, 0.251334525725574, 0.21722341534386502, 0.17618745517978274, 0.19765485243687797, 0.20182880156666505, 0.18770326585647068, 0.29508631165711574, 0.17540424589727577, 0.24359378942367316, 0.208606907440828, 0.27822633144307773, 0.2671173087847377, 0.29495758390495785, 0.30054747541115845, 0.2608459557347732, 0.28954602840551513, 0.2594137189358663, 0.30685823857602623, 0.17879869169069829, 0.17261850310242532, 0.2040934445327317, 0.24368044921730536, 0.18163757050972296, 0.22740198171365167, 0.18987257985273742, 0.25057102405696796, 0.24165493720858844, 0.17864603967770276, 0.1842419811555146, 0.18219641902542116, 0.17265670657261512, 0.15246531430201227, 0.18797774830315772, 0.19210158509004527, 0.18009426758147307, 0.20248513829057935, 0.19984987082251704, 0.21759027566520495, 0.18186784466392558, 0.21775761502622104, 0.2171696076538545, 0.1891362397659202, 0.18123404659929288, 0.19293111037534705, 0.18467208084745246, 0.1869925748818818, 0.3616922620278066, 0.15433338909600347, 0.6219770718146505, 0.2001655345528598, 0.2012307329000943, 0.14577794171453784, 0.170614725030923, 0.6996987061781277, 0.45715760415950035, 0.1564556110298414, 0.446341274992044, 0.20860887855794186, 0.23086704906106248, 0.21161635156480485, 0.1908392752943625, 0.4450349632271141, 0.28680978780290867, 0.18180867398802225, 0.19592460456591176, 0.18768136148440095, 0.18755782898360318, 0.18985918253683387, 0.18574130751024265, 0.18432635896690186, 0.1769368270504449, 0.19339009412479347, 0.07702259717591808, 0.06976389161505414, 0.0953968414507328, 0.08250234630551745, 0.08429695948672311, 0.0756257544460841, 0.08860074694351538, 0.07415961361682488, 0.07473822816166886]}, "mutation_prompt": null}
{"id": "007990cb-0a4e-41ae-8fe5-f567d926ded4", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20 + int(2 * np.sqrt(dim))  # Dynamic swarm size based on dimension\n        self.position = np.random.uniform(-5.0, 5.0, (self.swarm_size, dim))\n        self.velocity = np.random.uniform(-1.0, 1.0, (self.swarm_size, dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_value = np.inf\n        self.inertia_weight = 0.7        # Inertia weight\n        self.cognitive_param = 1.5       # Cognitive parameter\n        self.social_param = 1.5          # Social parameter\n        self.mutation_prob = 0.1         # Mutation probability for diversification\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                current_value = func(self.position[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if current_value < self.personal_best_value[i]:\n                    self.personal_best_value[i] = current_value\n                    self.personal_best_position[i] = self.position[i].copy()\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_value = current_value\n                    self.global_best_position = self.position[i].copy()\n\n            # Update positions and velocities\n            for i in range(self.swarm_size):\n                if np.random.rand() < self.mutation_prob:\n                    # Mutation step for exploration\n                    self.position[i] = np.random.uniform(-5.0, 5.0, self.dim)\n                else:\n                    self.velocity[i] = (self.inertia_weight * self.velocity[i] +\n                                        self.cognitive_param * np.random.rand(self.dim) *\n                                        (self.personal_best_position[i] - self.position[i]) +\n                                        self.social_param * np.random.rand(self.dim) *\n                                        (self.global_best_position - self.position[i]))\n                    self.position[i] += self.velocity[i]\n                    self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "A dynamic, adaptive particle swarm optimization with elite particle preservation and mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d11860a-b404-4dc6-8182-4ef9bc17a9d6", "metadata": {"aucs": [0.49385442282289005, 0.42589742609962444, 0.5340829296363465, 0.529061390407829, 0.4594796267275585, 0.53952786523026, 0.5029677066546664, 0.18281079191343041, 0.4878032382520888, 0.010288691291584606, 0.041951900297395706, 0.018881543275723778, 0.05408249980588076, 0.030106804507564422, 9.999999999998899e-05, 0.011399330709249589, 0.031530550148327174, 0.04792434672403911, 0.09216867544471519, 0.12263578968005617, 0.14409747496023628, 0.1136048518907764, 0.10558337857265265, 0.11831529899466442, 0.12613026316913112, 0.10182296960434889, 0.09233766743259197, 0.11322225013616316, 0.10091419559043646, 0.09428921835554915, 0.09485227663342999, 0.08885842470739913, 0.10582868576077797, 0.0968280616331666, 0.11063605830339729, 0.09960362850130877, 0.9922177813050578, 0.9915951618840093, 0.9910564506432168, 0.981892771584064, 0.9909528588708251, 0.986507022434599, 0.9930400442544558, 0.9897196139892851, 0.9910214498250333, 0.23950865967551138, 0.08255023239306791, 0.2848188003725107, 0.1524927860788795, 0.16114757895794463, 0.149371019820131, 0.14954081057402313, 0.2742306521951944, 0.266585554173009, 0.16963746106058575, 0.28434244256924834, 0.20868176303077668, 0.20417126057183332, 0.19246983690941633, 0.3263199898433342, 0.18048428914423476, 0.23440839814593295, 0.24928906874706847, 0.11853239549849226, 0.1360993531336706, 0.1587387085809221, 0.1394205880702155, 0.13006764288343853, 0.17200088861836715, 0.15228645869562474, 0.14091577538476052, 0.1418008808882203, 0.13635382296392506, 0.1328033632328719, 0.13630702168169007, 0.19049844361776636, 0.12198873507261143, 0.12828313319287699, 0.15328500028222203, 0.034710702266492754, 0.12044937881340934, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03876167872479108, 0.06929121660103488, 0.015302700251209722, 0.06530983217158792, 0.06038680523819617, 0.012057338074005775, 0.007122445021182311, 0.016868008252148736, 0.05211368187723364, 0.050479244320738914, 9.999999999998899e-05, 0.004185907896410157, 0.0723652490602219, 0.0032469149306805223, 0.014888236170418567, 0.01292728611749594, 0.0014883039139145238, 0.011099657171461552, 0.0005994847507710954, 0.03697476070075245, 0.10488659814186918, 0.13619710741362812, 0.056022540291925216, 0.09438883579510715, 0.03527966176088393, 0.07952696436802142, 0.06745499941294997, 0.07553581951860122, 0.42321541926092376, 0.41069731391012154, 0.419780474553608, 0.3837262616745266, 0.41099004334470923, 0.2533371276320646, 0.40530162563821415, 0.4219472395590709, 0.4459639337870742, 0.0792983007830873, 0.06866989207108487, 0.08745121201021466, 0.08386715965224867, 0.12663220134880016, 0.0819156082850836, 0.06137765068224921, 0.0843830461999765, 0.066681767229409, 0.251334525725574, 0.21722341534386502, 0.17618745517978274, 0.19765485243687797, 0.20182880156666505, 0.18770326585647068, 0.29508631165711574, 0.17540424589727577, 0.24359378942367316, 0.208606907440828, 0.27822633144307773, 0.2671173087847377, 0.29495758390495785, 0.30054747541115845, 0.2608459557347732, 0.28954602840551513, 0.2594137189358663, 0.30685823857602623, 0.17879869169069829, 0.17261850310242532, 0.2040934445327317, 0.24368044921730536, 0.18163757050972296, 0.22740198171365167, 0.18987257985273742, 0.25057102405696796, 0.24165493720858844, 0.17864603967770276, 0.1842419811555146, 0.18219641902542116, 0.17265670657261512, 0.15246531430201227, 0.18797774830315772, 0.19210158509004527, 0.18009426758147307, 0.20248513829057935, 0.19984987082251704, 0.21759027566520495, 0.18186784466392558, 0.21775761502622104, 0.2171696076538545, 0.1891362397659202, 0.18123404659929288, 0.19293111037534705, 0.18467208084745246, 0.1869925748818818, 0.3616922620278066, 0.15433338909600347, 0.6219770718146505, 0.2001655345528598, 0.2012307329000943, 0.14577794171453784, 0.170614725030923, 0.6996987061781277, 0.45715760415950035, 0.1564556110298414, 0.446341274992044, 0.20860887855794186, 0.23086704906106248, 0.21161635156480485, 0.1908392752943625, 0.4450349632271141, 0.28680978780290867, 0.18180867398802225, 0.19592460456591176, 0.18768136148440095, 0.18755782898360318, 0.18985918253683387, 0.18574130751024265, 0.18432635896690186, 0.1769368270504449, 0.19339009412479347, 0.07702259717591808, 0.06976389161505414, 0.0953968414507328, 0.08250234630551745, 0.08429695948672311, 0.0756257544460841, 0.08860074694351538, 0.07415961361682488, 0.07473822816166886]}, "mutation_prompt": null}
