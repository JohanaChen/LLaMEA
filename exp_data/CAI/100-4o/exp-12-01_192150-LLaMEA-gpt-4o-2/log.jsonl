{"id": "9297a6c0-3986-44a9-becc-d97e1f582344", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Population size is set to 10 times the dimension\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.5  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (DE/rand/1)\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + self.F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True  # Ensure at least one dimension is selected\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                if self.evaluations >= self.budget:\n                    break\n\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "An adaptive differential evolution algorithm using neighborhood exploration and mutation strategies for enhanced global search.", "configspace": "", "generation": 0, "fitness": 0.3922456766654996, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.803992760551838, 0.7993309866109702, 0.8230034575675172, 0.7976743424849342, 0.8056468677309834, 0.8026913714998991, 0.8101229974264308, 0.8059422914515639, 0.8184727256449683, 0.6394996484020379, 0.6635392459065927, 0.6520154722513984, 0.6626650408522965, 0.6779660988579591, 0.6447222482269745, 0.662962588912775, 0.6666032922283666, 0.6748773668673838, 0.11731327842850137, 0.13193799540853346, 0.1153596091930924, 0.1267874635392372, 0.1322493224426049, 0.10858814322117927, 0.1228446850973145, 0.1305922796969351, 0.11175627058263293, 0.11262173659575114, 0.10937404211590385, 0.11407817677845578, 0.09962296950908534, 0.10480656276147915, 0.11244849590574046, 0.12091944602861171, 0.10832474520565816, 0.11033681206599344, 0.8164597068066245, 0.9522686241249233, 0.9142024870301578, 0.9464541168635431, 0.9063110084214205, 0.9640721376670278, 0.8573447698555259, 0.9650359441530505, 0.7695593643009263, 0.5328901090557727, 0.4875979738022036, 0.5192936449054656, 0.49786411846416323, 0.47683056115417455, 0.5433839523141322, 0.4335147147559538, 0.5003245459106049, 0.47922778778667907, 0.7535470167597238, 0.7583897582182042, 0.746650579180091, 0.7699878761200958, 0.8331574577395453, 0.7767972884751219, 0.7989795477431592, 0.7975205236816875, 0.776533977531757, 0.44564957663558047, 0.4022689851417588, 0.34798505577480454, 0.45941863565860264, 0.4388048089810417, 0.3145525857528517, 0.3115280835327453, 0.19844803536486855, 0.2850070167387755, 0.11767489859924662, 0.2853280285137091, 0.1867065279972996, 0.26305340598601357, 0.3393675640055326, 0.15340818245901644, 0.28275098485203065, 0.24335368773806354, 0.21714153243689716, 0.40344156026081013, 0.445243230373192, 0.44705196481314247, 0.475782994328387, 0.41993390638141526, 0.43261956898272413, 0.48515668504384923, 0.3837853778151984, 0.40317133118876025, 0.5471968519792136, 0.5809253482614787, 0.5588280133167252, 0.506554554672199, 0.5249102653860995, 0.5613897006261526, 0.5862160066489598, 0.5795464309409717, 0.5848796736552189, 0.1611300554603089, 0.1444465276670317, 0.14842848124302743, 0.16838425837368654, 0.29062156359004443, 0.30287435982865596, 0.17663256579057196, 0.14373794964404862, 0.1522266733331018, 0.32388742303932194, 0.33919395836509825, 0.32372332999010356, 0.3675319125602984, 0.3363725464630344, 0.3632995270944013, 0.3442630865567584, 0.2995389983905602, 0.33798986086453175, 0.7274774266914253, 0.7244483236186398, 0.7337913457713954, 0.7386378502211235, 0.7125935984470013, 0.7205349434068551, 0.718595273115548, 0.7162972464405599, 0.7237293720550881, 0.113755117269151, 0.10771367900308781, 0.10695910131459663, 0.09685706501584757, 0.10999908160377869, 0.08594163373225816, 0.10090646033770923, 0.11677332702086551, 0.09044271795943659, 0.12892689848752847, 0.14890630464038856, 0.13971968971462556, 0.13937074711705533, 0.20968657903846866, 0.16016147037728157, 0.15293120370598867, 0.18291517115898903, 0.1810292691994233, 0.4230610243994021, 0.4240093984703639, 0.4066425221017438, 0.4335736527360613, 0.4086257703629975, 0.43198417715359205, 0.4779905474395979, 0.43111538234320523, 0.44747144418713447, 0.3377219813571153, 0.29811265514325846, 0.3273935023977005, 0.33754387617576753, 0.3193000818767884, 0.2948792491953096, 0.3317913865717137, 0.3625983487667217, 0.341625991840409, 0.2039373744624957, 0.2157603832192767, 0.2058225126423494, 0.17434992617476597, 0.20095971930754153, 0.19923254372925248, 0.1914476977648336, 0.19325854116578134, 0.198872285282507, 0.22890513614022656, 0.18979281840082118, 0.27503891906851363, 0.26265436421829524, 0.2154115691131685, 0.19558045925795564, 0.19862861686890954, 0.18803569661596098, 0.22100680770388204, 0.7841396528034537, 0.766981445743772, 0.7446227497549693, 0.1808471526176847, 0.17936780812278907, 0.7223006898222446, 0.67176609264923, 0.17996053272145562, 0.6986728646759488, 0.5741454809981572, 0.5840216494508021, 0.2020331982259258, 0.6349018884320136, 0.19687192635290562, 0.645194525724113, 0.7831492169898606, 0.20760984665547444, 0.20458187070389378, 0.18714005631273045, 0.20368135742621185, 0.19096375097406748, 0.1779177482149522, 0.2005678584587809, 0.19174294092384014, 0.198867234819175, 0.19321743683528436, 0.19300182664058485, 0.08172662243495565, 0.09114380976899761, 0.08803753735687025, 0.08052105695409195, 0.07912433253054463, 0.07524927160869632, 0.08422314360956551, 0.07101764041540193, 0.07326211192766607]}, "mutation_prompt": null}
{"id": "8b3aac8b-ad1d-4eb0-946a-a52d3b61e83c", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Population size is set to 10 times the dimension\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.5  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation (DE/rand/1)\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + self.F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True  # Ensure at least one dimension is selected\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                if self.evaluations >= self.budget:\n                    break\n\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "An adaptive differential evolution algorithm using neighborhood exploration and mutation strategies for enhanced global search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9297a6c0-3986-44a9-becc-d97e1f582344", "metadata": {"aucs": [0.803992760551838, 0.7993309866109702, 0.8230034575675172, 0.7976743424849342, 0.8056468677309834, 0.8026913714998991, 0.8101229974264308, 0.8059422914515639, 0.8184727256449683, 0.6394996484020379, 0.6635392459065927, 0.6520154722513984, 0.6626650408522965, 0.6779660988579591, 0.6447222482269745, 0.662962588912775, 0.6666032922283666, 0.6748773668673838, 0.11731327842850137, 0.13193799540853346, 0.1153596091930924, 0.1267874635392372, 0.1322493224426049, 0.10858814322117927, 0.1228446850973145, 0.1305922796969351, 0.11175627058263293, 0.11262173659575114, 0.10937404211590385, 0.11407817677845578, 0.09962296950908534, 0.10480656276147915, 0.11244849590574046, 0.12091944602861171, 0.10832474520565816, 0.11033681206599344, 0.8164597068066245, 0.9522686241249233, 0.9142024870301578, 0.9464541168635431, 0.9063110084214205, 0.9640721376670278, 0.8573447698555259, 0.9650359441530505, 0.7695593643009263, 0.5328901090557727, 0.4875979738022036, 0.5192936449054656, 0.49786411846416323, 0.47683056115417455, 0.5433839523141322, 0.4335147147559538, 0.5003245459106049, 0.47922778778667907, 0.7535470167597238, 0.7583897582182042, 0.746650579180091, 0.7699878761200958, 0.8331574577395453, 0.7767972884751219, 0.7989795477431592, 0.7975205236816875, 0.776533977531757, 0.44564957663558047, 0.4022689851417588, 0.34798505577480454, 0.45941863565860264, 0.4388048089810417, 0.3145525857528517, 0.3115280835327453, 0.19844803536486855, 0.2850070167387755, 0.11767489859924662, 0.2853280285137091, 0.1867065279972996, 0.26305340598601357, 0.3393675640055326, 0.15340818245901644, 0.28275098485203065, 0.24335368773806354, 0.21714153243689716, 0.40344156026081013, 0.445243230373192, 0.44705196481314247, 0.475782994328387, 0.41993390638141526, 0.43261956898272413, 0.48515668504384923, 0.3837853778151984, 0.40317133118876025, 0.5471968519792136, 0.5809253482614787, 0.5588280133167252, 0.506554554672199, 0.5249102653860995, 0.5613897006261526, 0.5862160066489598, 0.5795464309409717, 0.5848796736552189, 0.1611300554603089, 0.1444465276670317, 0.14842848124302743, 0.16838425837368654, 0.29062156359004443, 0.30287435982865596, 0.17663256579057196, 0.14373794964404862, 0.1522266733331018, 0.32388742303932194, 0.33919395836509825, 0.32372332999010356, 0.3675319125602984, 0.3363725464630344, 0.3632995270944013, 0.3442630865567584, 0.2995389983905602, 0.33798986086453175, 0.7274774266914253, 0.7244483236186398, 0.7337913457713954, 0.7386378502211235, 0.7125935984470013, 0.7205349434068551, 0.718595273115548, 0.7162972464405599, 0.7237293720550881, 0.113755117269151, 0.10771367900308781, 0.10695910131459663, 0.09685706501584757, 0.10999908160377869, 0.08594163373225816, 0.10090646033770923, 0.11677332702086551, 0.09044271795943659, 0.12892689848752847, 0.14890630464038856, 0.13971968971462556, 0.13937074711705533, 0.20968657903846866, 0.16016147037728157, 0.15293120370598867, 0.18291517115898903, 0.1810292691994233, 0.4230610243994021, 0.4240093984703639, 0.4066425221017438, 0.4335736527360613, 0.4086257703629975, 0.43198417715359205, 0.4779905474395979, 0.43111538234320523, 0.44747144418713447, 0.3377219813571153, 0.29811265514325846, 0.3273935023977005, 0.33754387617576753, 0.3193000818767884, 0.2948792491953096, 0.3317913865717137, 0.3625983487667217, 0.341625991840409, 0.2039373744624957, 0.2157603832192767, 0.2058225126423494, 0.17434992617476597, 0.20095971930754153, 0.19923254372925248, 0.1914476977648336, 0.19325854116578134, 0.198872285282507, 0.22890513614022656, 0.18979281840082118, 0.27503891906851363, 0.26265436421829524, 0.2154115691131685, 0.19558045925795564, 0.19862861686890954, 0.18803569661596098, 0.22100680770388204, 0.7841396528034537, 0.766981445743772, 0.7446227497549693, 0.1808471526176847, 0.17936780812278907, 0.7223006898222446, 0.67176609264923, 0.17996053272145562, 0.6986728646759488, 0.5741454809981572, 0.5840216494508021, 0.2020331982259258, 0.6349018884320136, 0.19687192635290562, 0.645194525724113, 0.7831492169898606, 0.20760984665547444, 0.20458187070389378, 0.18714005631273045, 0.20368135742621185, 0.19096375097406748, 0.1779177482149522, 0.2005678584587809, 0.19174294092384014, 0.198867234819175, 0.19321743683528436, 0.19300182664058485, 0.08172662243495565, 0.09114380976899761, 0.08803753735687025, 0.08052105695409195, 0.07912433253054463, 0.07524927160869632, 0.08422314360956551, 0.07101764041540193, 0.07326211192766607]}, "mutation_prompt": null}
