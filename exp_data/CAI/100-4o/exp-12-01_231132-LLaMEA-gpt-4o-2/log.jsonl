{"id": "78714ac9-4ea7-4010-8dda-87276af9613c", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.c1 = 2.0  # cognitive parameter\n        self.c2 = 2.0  # social parameter\n        self.w = 0.7   # inertia weight\n        self.F = 0.5   # differential weight\n        self.CR = 0.9  # crossover probability\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n        \n        evals = self.population_size\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                donor_vector = (population[indices[0]]\n                                + self.F * (population[indices[1]] - population[indices[2]]))\n                trial_vector = np.where(np.random.rand(self.dim) < self.CR, donor_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n                \n                # Particle Swarm Update\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.w * velocities[i]\n                                 + self.c1 * r1 * (personal_best_positions[i] - population[i])\n                                 + self.c2 * r2 * (global_best_position - population[i]))\n                new_position = population[i] + velocities[i]\n                new_position = np.clip(new_position, self.lower_bound, self.upper_bound)\n                \n                trial_score = func(trial_vector)\n                new_score = func(new_position)\n                evals += 2\n\n                # Selection\n                if trial_score < personal_best_scores[i]:\n                    personal_best_scores[i] = trial_score\n                    personal_best_positions[i] = trial_vector\n                \n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = new_position\n                    population[i] = new_position\n                \n                if personal_best_scores[i] < global_best_score:\n                    global_best_score = personal_best_scores[i]\n                    global_best_position = personal_best_positions[i]\n\n                if evals >= self.budget:\n                    break\n                    \n        return global_best_position, global_best_score", "name": "HybridDEPSO", "description": "A hybrid metaheuristic combining Differential Evolution and Particle Swarm Optimization to balance exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.14283562702381628, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.31937192456029384, 0.2255876307497372, 0.2433624465476082, 0.2441727743895874, 0.2507855847627958, 0.3005347233664446, 0.2271936884097676, 0.2638019143808562, 0.24584450451792816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010538213867010704, 9.999999999998899e-05, 9.999999999998899e-05, 0.06074252040811001, 0.0500073225883263, 0.05175742363906943, 0.06440399803998464, 0.05051781406494116, 0.06359785448482147, 0.06075554897817581, 0.07067469722264741, 0.06622783152108513, 0.06218776678510218, 0.04108115187709027, 0.03375295979405235, 0.03906942799405699, 0.047899770370788075, 0.039681854670620686, 0.040146515304040675, 0.05026821826283123, 0.0504892162180538, 0.9834491884773647, 0.9851379983377486, 0.9841496727486044, 0.9827890261481008, 0.985779601651118, 0.9860138672177841, 0.9883808862413789, 0.9852703529698101, 0.9852607664771829, 0.10201458121776652, 0.06458299614187002, 0.08348796760444654, 0.12187457218620479, 0.10381452340159181, 0.1365898089631732, 0.10133596961592506, 0.11565444082267862, 0.1056549803775313, 0.15318595829718595, 0.17652928827620673, 0.17065842960278899, 0.17014292587548585, 0.15797578795038358, 0.1672211171323752, 0.13082727719204867, 0.14347620919354942, 0.1770422121588776, 0.08079255137715957, 0.013351264657563089, 0.05813739343560265, 0.03258451260022155, 0.08082512505852535, 0.05459534692217605, 9.999999999998899e-05, 0.0005967509897658596, 0.05038883134449479, 0.04941579512456051, 0.009243052633216786, 0.03156956961300861, 0.06266484002657235, 0.04769765104806334, 0.09090690381201838, 0.05979597402748038, 0.0019060792458586162, 0.10270470642678264, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06805133730994362, 0.0384577830912094, 0.06177476845049701, 0.03770229828735738, 0.03827657115356908, 0.02859174479221216, 0.0748821732852386, 0.05347240767637973, 0.0615262826462909, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010498065745703222, 0.014362650005014244, 0.0190496584818024, 0.03763894585891536, 0.003947377246342643, 9.999999999998899e-05, 0.03402680622709253, 0.02720370044440601, 0.008032710488111827, 0.23184788069179718, 0.2327874244320094, 0.25018170044894017, 0.2069520966732742, 0.2896915622842463, 0.19761804227764745, 0.22436036115729474, 0.18535990311005124, 0.24045098880139093, 0.05862636456632986, 0.082378031068012, 0.051390347692942484, 0.06694313576855238, 0.06816555226432008, 0.07071314052955191, 0.06056467714460778, 0.07678426127847693, 0.05130192988747806, 0.16811102869731642, 0.12858326827107536, 0.13873400520810752, 0.1316659521543333, 0.15473223651130097, 0.13624704371672447, 0.1379487533047803, 0.1271394420357843, 0.16896157430175573, 0.1950980330418205, 0.16507361701615209, 0.1757299292670368, 0.1871535887437632, 0.1558433706111011, 0.1648589232167751, 0.18651207541114, 0.20113954678195478, 0.17083783714276235, 0.11725838642308029, 0.13981758952145684, 0.13686477152010523, 0.13538461862898454, 0.12876724094929448, 0.12083204065378028, 0.11659876785653867, 0.13310923493711002, 0.13569367637437624, 0.1537668460297602, 0.1563811881695688, 0.17089034928079672, 0.1572556149599864, 0.1483451829115836, 0.17105601382940716, 0.16987987976194985, 0.1655336639556454, 0.16424389025771924, 0.1621135162605455, 0.15796639691646364, 0.16118784722383184, 0.16385994065216603, 0.14962860826008384, 0.1621364389613864, 0.1501206399488234, 0.1476528211078747, 0.15564111976544304, 0.1516455762406691, 0.19330000792010638, 0.1451070679965284, 0.16798535305032036, 0.16008186227183852, 0.1730167625938206, 0.16665173889478213, 0.15579912902257986, 0.15363043663995646, 0.1604755554934958, 0.19230296771556343, 0.1516159088601522, 0.13460530405119664, 0.1559027197216144, 0.20020080653525807, 0.17958844438224753, 0.1979947037667822, 0.18120414822604858, 0.19807899886339686, 0.21429216318133426, 0.1796912850235427, 0.17862720025998258, 0.19079572779037313, 0.217365930908462, 0.21267266283893127, 0.17526823109540235, 0.19244082145724628, 0.0680238084665854, 0.053764812671763695, 0.07147450782441278, 0.06115375841637649, 0.065448659319579, 0.05891904135690362, 0.048455074995690794, 0.04897137883958336, 0.06272602871556321]}, "mutation_prompt": null}
{"id": "1e4307d4-8e0d-467d-aa96-2a25eda3e053", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.c1 = 2.0  # cognitive parameter\n        self.c2 = 2.0  # social parameter\n        self.w = 0.7   # inertia weight\n        self.F = 0.5   # differential weight\n        self.CR = 0.9  # crossover probability\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n        \n        evals = self.population_size\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                donor_vector = (population[indices[0]]\n                                + self.F * (population[indices[1]] - population[indices[2]]))\n                trial_vector = np.where(np.random.rand(self.dim) < self.CR, donor_vector, population[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n                \n                # Particle Swarm Update\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.w * velocities[i]\n                                 + self.c1 * r1 * (personal_best_positions[i] - population[i])\n                                 + self.c2 * r2 * (global_best_position - population[i]))\n                new_position = population[i] + velocities[i]\n                new_position = np.clip(new_position, self.lower_bound, self.upper_bound)\n                \n                trial_score = func(trial_vector)\n                new_score = func(new_position)\n                evals += 2\n\n                # Selection\n                if trial_score < personal_best_scores[i]:\n                    personal_best_scores[i] = trial_score\n                    personal_best_positions[i] = trial_vector\n                \n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = new_position\n                    population[i] = new_position\n                \n                if personal_best_scores[i] < global_best_score:\n                    global_best_score = personal_best_scores[i]\n                    global_best_position = personal_best_positions[i]\n\n                if evals >= self.budget:\n                    break\n                    \n        return global_best_position, global_best_score", "name": "HybridDEPSO", "description": "A hybrid metaheuristic combining Differential Evolution and Particle Swarm Optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "78714ac9-4ea7-4010-8dda-87276af9613c", "metadata": {"aucs": [0.31937192456029384, 0.2255876307497372, 0.2433624465476082, 0.2441727743895874, 0.2507855847627958, 0.3005347233664446, 0.2271936884097676, 0.2638019143808562, 0.24584450451792816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010538213867010704, 9.999999999998899e-05, 9.999999999998899e-05, 0.06074252040811001, 0.0500073225883263, 0.05175742363906943, 0.06440399803998464, 0.05051781406494116, 0.06359785448482147, 0.06075554897817581, 0.07067469722264741, 0.06622783152108513, 0.06218776678510218, 0.04108115187709027, 0.03375295979405235, 0.03906942799405699, 0.047899770370788075, 0.039681854670620686, 0.040146515304040675, 0.05026821826283123, 0.0504892162180538, 0.9834491884773647, 0.9851379983377486, 0.9841496727486044, 0.9827890261481008, 0.985779601651118, 0.9860138672177841, 0.9883808862413789, 0.9852703529698101, 0.9852607664771829, 0.10201458121776652, 0.06458299614187002, 0.08348796760444654, 0.12187457218620479, 0.10381452340159181, 0.1365898089631732, 0.10133596961592506, 0.11565444082267862, 0.1056549803775313, 0.15318595829718595, 0.17652928827620673, 0.17065842960278899, 0.17014292587548585, 0.15797578795038358, 0.1672211171323752, 0.13082727719204867, 0.14347620919354942, 0.1770422121588776, 0.08079255137715957, 0.013351264657563089, 0.05813739343560265, 0.03258451260022155, 0.08082512505852535, 0.05459534692217605, 9.999999999998899e-05, 0.0005967509897658596, 0.05038883134449479, 0.04941579512456051, 0.009243052633216786, 0.03156956961300861, 0.06266484002657235, 0.04769765104806334, 0.09090690381201838, 0.05979597402748038, 0.0019060792458586162, 0.10270470642678264, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06805133730994362, 0.0384577830912094, 0.06177476845049701, 0.03770229828735738, 0.03827657115356908, 0.02859174479221216, 0.0748821732852386, 0.05347240767637973, 0.0615262826462909, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010498065745703222, 0.014362650005014244, 0.0190496584818024, 0.03763894585891536, 0.003947377246342643, 9.999999999998899e-05, 0.03402680622709253, 0.02720370044440601, 0.008032710488111827, 0.23184788069179718, 0.2327874244320094, 0.25018170044894017, 0.2069520966732742, 0.2896915622842463, 0.19761804227764745, 0.22436036115729474, 0.18535990311005124, 0.24045098880139093, 0.05862636456632986, 0.082378031068012, 0.051390347692942484, 0.06694313576855238, 0.06816555226432008, 0.07071314052955191, 0.06056467714460778, 0.07678426127847693, 0.05130192988747806, 0.16811102869731642, 0.12858326827107536, 0.13873400520810752, 0.1316659521543333, 0.15473223651130097, 0.13624704371672447, 0.1379487533047803, 0.1271394420357843, 0.16896157430175573, 0.1950980330418205, 0.16507361701615209, 0.1757299292670368, 0.1871535887437632, 0.1558433706111011, 0.1648589232167751, 0.18651207541114, 0.20113954678195478, 0.17083783714276235, 0.11725838642308029, 0.13981758952145684, 0.13686477152010523, 0.13538461862898454, 0.12876724094929448, 0.12083204065378028, 0.11659876785653867, 0.13310923493711002, 0.13569367637437624, 0.1537668460297602, 0.1563811881695688, 0.17089034928079672, 0.1572556149599864, 0.1483451829115836, 0.17105601382940716, 0.16987987976194985, 0.1655336639556454, 0.16424389025771924, 0.1621135162605455, 0.15796639691646364, 0.16118784722383184, 0.16385994065216603, 0.14962860826008384, 0.1621364389613864, 0.1501206399488234, 0.1476528211078747, 0.15564111976544304, 0.1516455762406691, 0.19330000792010638, 0.1451070679965284, 0.16798535305032036, 0.16008186227183852, 0.1730167625938206, 0.16665173889478213, 0.15579912902257986, 0.15363043663995646, 0.1604755554934958, 0.19230296771556343, 0.1516159088601522, 0.13460530405119664, 0.1559027197216144, 0.20020080653525807, 0.17958844438224753, 0.1979947037667822, 0.18120414822604858, 0.19807899886339686, 0.21429216318133426, 0.1796912850235427, 0.17862720025998258, 0.19079572779037313, 0.217365930908462, 0.21267266283893127, 0.17526823109540235, 0.19244082145724628, 0.0680238084665854, 0.053764812671763695, 0.07147450782441278, 0.06115375841637649, 0.065448659319579, 0.05891904135690362, 0.048455074995690794, 0.04897137883958336, 0.06272602871556321]}, "mutation_prompt": null}
