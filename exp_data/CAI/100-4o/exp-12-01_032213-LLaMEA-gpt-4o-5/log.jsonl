{"id": "371c8960-7a78-4965-8da6-182225a1815c", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.bounds = (-5.0, 5.0)\n        self.temperature = 1.0\n        self.temperature_decay = 0.99\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = a + np.random.rand(self.dim) * (b - c)\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < 0.9\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Acceptance based on Simulated Annealing\n                delta_f = trial_fitness - fitness[i]\n                if delta_f < 0 or np.exp(-delta_f / self.temperature) > np.random.rand():\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            self.temperature *= self.temperature_decay\n\n        return population[np.argmin(fitness)]\n\n# Example usage:\n# optimizer = HybridDESA(budget=1000, dim=10)\n# best_solution = optimizer(your_black_box_function_here)", "name": "HybridDESA", "description": "A hybrid of Differential Evolution and Simulated Annealing, using adaptive mutation strategies and temperature-based acceptance to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.23670065006246702, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.34737772220403285, 0.34737772220403285, 0.34737772220403285, 0.3802836130894036, 0.3802836130894036, 0.3802836130894036, 0.3737284896933003, 0.3737284896933003, 0.3737284896933003, 0.3120827372385081, 0.3120827372385081, 0.3120827372385081, 0.31768914359355094, 0.31768914359355094, 0.31768914359355094, 0.32261383298033086, 0.32261383298033086, 0.32261383298033086, 0.16215301287229145, 0.16215301287229145, 0.16215301287229145, 0.18734605788466385, 0.18734605788466385, 0.18734605788466385, 0.15270648629788353, 0.15270648629788353, 0.15270648629788353, 0.1335067475316637, 0.1335067475316637, 0.1335067475316637, 0.13640687151129438, 0.13640687151129438, 0.13640687151129438, 0.11574107533670086, 0.11574107533670086, 0.11574107533670086, 0.8280692375239548, 0.8280692375239548, 0.8280692375239548, 0.8516450354648288, 0.8516450354648288, 0.8516450354648288, 0.8691594554052753, 0.8691594554052753, 0.8691594554052753, 0.2826173932798224, 0.2826173932798224, 0.2826173932798224, 0.31506300100688733, 0.31506300100688733, 0.31506300100688733, 0.29017112617327034, 0.29017112617327034, 0.29017112617327034, 0.3256360281882441, 0.3256360281882441, 0.3256360281882441, 0.32131445016352234, 0.32131445016352234, 0.32131445016352234, 0.35208970282079843, 0.35208970282079843, 0.35208970282079843, 0.1772260580569126, 0.1772260580569126, 0.1772260580569126, 0.20254658601824138, 0.20254658601824138, 0.20254658601824138, 0.16957695676171547, 0.16957695676171547, 0.16957695676171547, 0.10020354789361774, 0.10020354789361774, 0.10020354789361774, 0.20467449399719095, 0.20467449399719095, 0.20467449399719095, 0.209414475276696, 0.209414475276696, 0.209414475276696, 0.006454929359245631, 0.006454929359245631, 0.006454929359245631, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016657353689663035, 0.0016657353689663035, 0.0016657353689663035, 0.07123835307962922, 0.07123835307962922, 0.07123835307962922, 0.03615555832615169, 0.03615555832615169, 0.03615555832615169, 0.07332237758777771, 0.07332237758777771, 0.07332237758777771, 0.04760531776407606, 0.04760531776407606, 0.04760531776407606, 0.021319390312859232, 0.021319390312859232, 0.021319390312859232, 0.043592028047259146, 0.043592028047259146, 0.043592028047259146, 0.15927620281989563, 0.15927620281989563, 0.15927620281989563, 0.18788163269124902, 0.18788163269124902, 0.18788163269124902, 0.17500899402380787, 0.17500899402380787, 0.17500899402380787, 0.3355958166184744, 0.3355958166184744, 0.3355958166184744, 0.36615687050840884, 0.36615687050840884, 0.36615687050840884, 0.3452558406494992, 0.3452558406494992, 0.3452558406494992, 0.09287762136592315, 0.09287762136592315, 0.09287762136592315, 0.10328533200516343, 0.10328533200516343, 0.10328533200516343, 0.11493613616687781, 0.11493613616687781, 0.11493613616687781, 0.18236470200396893, 0.18236470200396893, 0.18236470200396893, 0.2087863440949539, 0.2087863440949539, 0.2087863440949539, 0.1916275015701946, 0.1916275015701946, 0.1916275015701946, 0.2675234455599478, 0.2675234455599478, 0.2675234455599478, 0.2780006692709759, 0.2780006692709759, 0.2780006692709759, 0.27778986431372543, 0.27778986431372543, 0.27778986431372543, 0.22960623862543061, 0.22960623862543061, 0.22960623862543061, 0.2376209089722211, 0.2376209089722211, 0.2376209089722211, 0.24838431956000828, 0.24838431956000828, 0.24838431956000828, 0.18592503208773936, 0.18592503208773936, 0.18592503208773936, 0.21172252269634595, 0.21172252269634595, 0.21172252269634595, 0.21573507676478954, 0.21573507676478954, 0.21573507676478954, 0.2171348362056933, 0.2171348362056933, 0.2171348362056933, 0.25866708166911934, 0.25866708166911934, 0.25866708166911934, 0.233464195194919, 0.233464195194919, 0.233464195194919, 0.4717896996571451, 0.4717896996571451, 0.4717896996571451, 0.4621234101889041, 0.4621234101889041, 0.4621234101889041, 0.4521288036698714, 0.4521288036698714, 0.4521288036698714, 0.16279126677908384, 0.16279126677908384, 0.16279126677908384, 0.20447819608444917, 0.20447819608444917, 0.20447819608444917, 0.42395526006109363, 0.42395526006109363, 0.42395526006109363, 0.18022933872047742, 0.18022933872047742, 0.18022933872047742, 0.1856825685990754, 0.1856825685990754, 0.1856825685990754, 0.17702133683324373, 0.17702133683324373, 0.17702133683324373, 0.08148585335913339, 0.08148585335913339, 0.08148585335913339, 0.09138243085163067, 0.09138243085163067, 0.09138243085163067, 0.08225442614361889, 0.08225442614361889, 0.08225442614361889]}, "mutation_prompt": null}
{"id": "76b6d8c7-82ce-481e-96f5-80bcf53c3831", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.bounds = (-5.0, 5.0)\n        self.temperature = 1.0\n        self.temperature_decay = 0.99\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # Adjust population size dynamically\n            self.population_size = max(4, int(self.population_size * 0.99))\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = a + np.random.rand(self.dim) * (b - c)\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < 0.9\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Acceptance based on Simulated Annealing\n                delta_f = trial_fitness - fitness[i]\n                if delta_f < 0 or np.exp(-delta_f / self.temperature) > np.random.rand():\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            self.temperature *= self.temperature_decay\n\n        return population[np.argmin(fitness)]\n\n# Example usage:\n# optimizer = HybridDESA(budget=1000, dim=10)\n# best_solution = optimizer(your_black_box_function_here)", "name": "HybridDESA", "description": "Improved HybridDESA by introducing dynamic population size adjustment to enhance exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": 0.1783384844381548, "feedback": "", "error": "", "parent_id": "371c8960-7a78-4965-8da6-182225a1815c", "metadata": {"aucs": [0.2943837850852228, 0.2943837850852228, 0.2943837850852228, 0.3125335733924215, 0.3125335733924215, 0.3125335733924215, 0.3519480603358217, 0.3519480603358217, 0.3519480603358217, 0.2446665078848821, 0.2446665078848821, 0.2446665078848821, 0.2031127734613204, 0.2031127734613204, 0.2031127734613204, 0.17564236658415866, 0.17564236658415866, 0.17564236658415866, 0.15333774608081507, 0.15333774608081507, 0.15333774608081507, 0.14956647866176187, 0.14956647866176187, 0.14956647866176187, 0.12124750878942436, 0.12124750878942436, 0.12124750878942436, 0.09523992610733889, 0.09523992610733889, 0.09523992610733889, 0.1227833094699452, 0.1227833094699452, 0.1227833094699452, 0.08609413236750951, 0.08609413236750951, 0.08609413236750951, 0.2744558820020069, 0.2744558820020069, 0.2744558820020069, 0.5004077262985579, 0.5004077262985579, 0.5004077262985579, 0.9649254964141826, 0.9649254964141826, 0.9649254964141826, 0.17366615936393714, 0.17366615936393714, 0.17366615936393714, 0.1509731756890309, 0.1509731756890309, 0.1509731756890309, 0.1772957616239439, 0.1772957616239439, 0.1772957616239439, 0.20315535402518992, 0.20315535402518992, 0.20315535402518992, 0.2292436124354631, 0.2292436124354631, 0.2292436124354631, 0.22776276722216582, 0.22776276722216582, 0.22776276722216582, 0.14929999241030278, 0.14929999241030278, 0.14929999241030278, 0.12302132846967784, 0.12302132846967784, 0.12302132846967784, 0.15014096557151857, 0.15014096557151857, 0.15014096557151857, 0.1357302336399503, 0.1357302336399503, 0.1357302336399503, 0.14103822167378566, 0.14103822167378566, 0.14103822167378566, 0.12002995411439221, 0.12002995411439221, 0.12002995411439221, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08798273541323576, 0.08798273541323576, 0.08798273541323576, 0.06394402109454622, 0.06394402109454622, 0.06394402109454622, 0.06011800379416132, 0.06011800379416132, 0.06011800379416132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02884055145067055, 0.02884055145067055, 0.02884055145067055, 0.03985383068392878, 0.03985383068392878, 0.03985383068392878, 0.06838532239125195, 0.06838532239125195, 0.06838532239125195, 0.12483106044983938, 0.12483106044983938, 0.12483106044983938, 0.29512160607639526, 0.29512160607639526, 0.29512160607639526, 0.30925115781338786, 0.30925115781338786, 0.30925115781338786, 0.3353593596675337, 0.3353593596675337, 0.3353593596675337, 0.10341317539057271, 0.10341317539057271, 0.10341317539057271, 0.12144774734402186, 0.12144774734402186, 0.12144774734402186, 0.10274590562430042, 0.10274590562430042, 0.10274590562430042, 0.15346190886859, 0.15346190886859, 0.15346190886859, 0.10788765071083695, 0.10788765071083695, 0.10788765071083695, 0.18891922758250435, 0.18891922758250435, 0.18891922758250435, 0.2301226849854482, 0.2301226849854482, 0.2301226849854482, 0.3190656423865972, 0.3190656423865972, 0.3190656423865972, 0.2551235208918864, 0.2551235208918864, 0.2551235208918864, 0.16320532018004685, 0.16320532018004685, 0.16320532018004685, 0.19705256623763068, 0.19705256623763068, 0.19705256623763068, 0.18865852657744497, 0.18865852657744497, 0.18865852657744497, 0.22927642323314867, 0.22927642323314867, 0.22927642323314867, 0.21518288733784596, 0.21518288733784596, 0.21518288733784596, 0.29737236150047164, 0.29737236150047164, 0.29737236150047164, 0.19268571977772564, 0.19268571977772564, 0.19268571977772564, 0.16476290098908486, 0.16476290098908486, 0.16476290098908486, 0.1685628597046156, 0.1685628597046156, 0.1685628597046156, 0.3312509113697898, 0.3312509113697898, 0.3312509113697898, 0.16707709930661563, 0.16707709930661563, 0.16707709930661563, 0.20936066078818705, 0.20936066078818705, 0.20936066078818705, 0.16531865965644243, 0.16531865965644243, 0.16531865965644243, 0.15683470328621696, 0.15683470328621696, 0.15683470328621696, 0.16219285333374023, 0.16219285333374023, 0.16219285333374023, 0.18698242150613176, 0.18698242150613176, 0.18698242150613176, 0.17690204018313072, 0.17690204018313072, 0.17690204018313072, 0.18732418211189472, 0.18732418211189472, 0.18732418211189472, 0.08321363839427198, 0.08321363839427198, 0.08321363839427198, 0.08333407811743176, 0.08333407811743176, 0.08333407811743176, 0.08574215416084263, 0.08574215416084263, 0.08574215416084263]}, "mutation_prompt": null}
