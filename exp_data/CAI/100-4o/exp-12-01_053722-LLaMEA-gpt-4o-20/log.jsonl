{"id": "4ea1e1e9-67e9-4009-a379-df33361c0c64", "solution": "import numpy as np\n\nclass AdaptiveClusterDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(10 * dim, budget // 2)\n        self.f = 0.5\n        self.cr = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        evaluations = self.pop_size\n        \n        while evaluations < self.budget:\n            # Cluster and select leaders\n            cluster_indices = np.random.randint(0, 2, self.pop_size)\n            leaders = [population[cluster_indices == i][np.argmin(fitness[cluster_indices == i])] for i in range(2)]\n            \n            # Generate trial vectors\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                leader = leaders[cluster_indices[i]]\n                mutant = np.clip(a + self.f * (b - c + leader - population[i]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(cross_points, mutant, population[i])\n                \n                # Evaluate trial vector\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Select between trial and original\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                \n                if evaluations >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index]\n\n# Example of usage:\n# optimizer = AdaptiveClusterDE(budget=1000, dim=5)\n# result = optimizer(some_function)", "name": "AdaptiveClusterDE", "description": "Adaptive Clustered Differential Evolution with Random Sampling for Diverse Exploration and Focused Exploitation", "configspace": "", "generation": 0, "fitness": 0.2927393275292156, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7303263541688758, 0.6778766425461755, 0.7182813299697147, 0.7379640672430274, 0.7129039419126375, 0.752421374279947, 0.7354062622930628, 0.7208083813961503, 0.7213457189013693, 0.5173454514015638, 0.4843013164883475, 0.5446992970128979, 0.5191433577525404, 0.5437777600738212, 0.5424027061547041, 0.5324219916028858, 0.5189868333127958, 0.49547266245132704, 0.09554500684749367, 0.10034119985590517, 0.0977660170826502, 0.10377904477576794, 0.10063049248771672, 0.11539893795069589, 0.09899614074540808, 0.09935273471157247, 0.10702121628192074, 0.0897547461629905, 0.08860153030763562, 0.07904220751555913, 0.08516506186758033, 0.09157113972206787, 0.08649715250993573, 0.09127970608305391, 0.10618900554343125, 0.08876478762097817, 0.9807798069285663, 0.9738740670273821, 0.9899562392608537, 0.9899559140557672, 0.9898581361485893, 0.9734037429061814, 0.97877210183329, 0.9721291210176852, 0.9815274913844639, 0.22501089446058242, 0.24216766474398277, 0.23844957834906322, 0.23181496879408736, 0.25462300541807414, 0.2437588681963524, 0.25462936714727313, 0.23012023099394052, 0.2583141444182956, 0.5578200865580238, 0.6885831416418774, 0.6288309253362111, 0.6444486596360716, 0.6867876820993982, 0.6197125224230183, 0.6054562899356317, 0.6769007777409424, 0.6145526523596077, 0.2439929900465979, 0.2656277777565186, 0.1663995659487646, 0.17709200299741845, 0.22707673141097973, 0.17059020478864728, 0.2181872187375271, 0.2416880706995692, 0.19856407762326145, 0.05157018185002982, 0.2550948002015193, 0.1299827279399629, 0.16779697772329671, 0.2062843358273132, 0.1873902656942139, 0.2151511937402495, 0.176924834043362, 0.18787848670404517, 0.23178699044337048, 0.2415575311555319, 0.2133599520394277, 0.22476793241832815, 0.22819069048413232, 0.1721433049120742, 0.2150413016230286, 0.22674672472128954, 0.26617214710005055, 0.32797207302902465, 0.3747264357213359, 0.3480932499427932, 0.34753188910874744, 0.3415397091598076, 0.3399807014451609, 0.3993385093594598, 0.38914439836188164, 0.33904010732766654, 0.03286314602214191, 0.04062145101152059, 0.03421778345142101, 0.08312919766901994, 0.09080423417058114, 0.08412141275209872, 0.07362132945694522, 0.052737122936080794, 0.05361761659683506, 0.24226060443648867, 0.22230061010651148, 0.20968812343659582, 0.24540545670914704, 0.22949494866605025, 0.23022152714465716, 0.2221903391342297, 0.22011331609553542, 0.20365930512488328, 0.5869492564185971, 0.5888433334452975, 0.5926823496316322, 0.627247068349325, 0.5412790962338554, 0.5728751744042578, 0.5943321145139939, 0.5878860414195586, 0.5487012519885542, 0.09580806090257299, 0.1000833963556248, 0.08354653821087654, 0.08420421839403391, 0.09224345955793944, 0.09699613779701999, 0.10998169006846725, 0.08279160725019774, 0.08687434271568129, 0.16670777107447177, 0.15554773999242755, 0.13088724355273373, 0.14478470589975367, 0.1336287267955717, 0.16187259778015328, 0.16576393036021442, 0.1322660665269304, 0.1806230502204189, 0.3063601393056129, 0.2945759908606743, 0.3012033660770743, 0.29709918489090337, 0.29511684419151885, 0.30262995514747637, 0.32283368764075215, 0.31012028944480197, 0.32011496001098194, 0.23853278267312938, 0.2303690339781852, 0.2081359549061491, 0.22831519966927483, 0.22058788487701397, 0.20042352068378544, 0.234038970758627, 0.26229510108975795, 0.23164880538792332, 0.18666404341013554, 0.19993956520313572, 0.17676633447046974, 0.17576556139710842, 0.18060102962249802, 0.22078495246207863, 0.21995689649732464, 0.1854152096554219, 0.1916375432420876, 0.17482383173955818, 0.18427168789171222, 0.17827331691917148, 0.18025953316355448, 0.17993746002050937, 0.19018357682306175, 0.18186541588226013, 0.17995900273749632, 0.17823285891295904, 0.6994510259110718, 0.16213759155628926, 0.15910931933625894, 0.1819065075040346, 0.19887994460292102, 0.21418337710922375, 0.17773966996632096, 0.17513285338093243, 0.2235352143929581, 0.1763959847798302, 0.244101661949652, 0.20072417094256612, 0.30872600985712584, 0.1582288562342643, 0.38151010011405384, 0.21149381220951669, 0.21052332155156184, 0.20898228302723088, 0.18136826897799552, 0.18135630926238866, 0.1956170750203774, 0.183804845805686, 0.20998608671660313, 0.18385040745706338, 0.17573000095735336, 0.18274635305546194, 0.20093081893039755, 0.07181204142193931, 0.07098689403050717, 0.08925646315208247, 0.07057601852271511, 0.07903185244145428, 0.0726088186818461, 0.07177130475590165, 0.07014396565306491, 0.0828957806810171]}, "mutation_prompt": null}
{"id": "43418781-da1b-4eaa-99fd-abcc7343a687", "solution": "import numpy as np\n\nclass AdaptiveClusterDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(10 * dim, budget // 2)\n        self.f = 0.5\n        self.cr = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        evaluations = self.pop_size\n        \n        while evaluations < self.budget:\n            # Cluster and select leaders\n            cluster_indices = np.random.randint(0, 2, self.pop_size)\n            leaders = [population[cluster_indices == i][np.argmin(fitness[cluster_indices == i])] for i in range(2)]\n            \n            # Generate trial vectors\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                leader = leaders[cluster_indices[i]]\n                mutant = np.clip(a + self.f * (b - c + leader - population[i]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(cross_points, mutant, population[i])\n                \n                # Evaluate trial vector\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Select between trial and original\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                \n                if evaluations >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index]\n\n# Example of usage:\n# optimizer = AdaptiveClusterDE(budget=1000, dim=5)\n# result = optimizer(some_function)", "name": "AdaptiveClusterDE", "description": "Adaptive Clustered Differential Evolution with Random Sampling for Diverse Exploration and Focused Exploitation", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4ea1e1e9-67e9-4009-a379-df33361c0c64", "metadata": {"aucs": [0.7303263541688758, 0.6778766425461755, 0.7182813299697147, 0.7379640672430274, 0.7129039419126375, 0.752421374279947, 0.7354062622930628, 0.7208083813961503, 0.7213457189013693, 0.5173454514015638, 0.4843013164883475, 0.5446992970128979, 0.5191433577525404, 0.5437777600738212, 0.5424027061547041, 0.5324219916028858, 0.5189868333127958, 0.49547266245132704, 0.09554500684749367, 0.10034119985590517, 0.0977660170826502, 0.10377904477576794, 0.10063049248771672, 0.11539893795069589, 0.09899614074540808, 0.09935273471157247, 0.10702121628192074, 0.0897547461629905, 0.08860153030763562, 0.07904220751555913, 0.08516506186758033, 0.09157113972206787, 0.08649715250993573, 0.09127970608305391, 0.10618900554343125, 0.08876478762097817, 0.9807798069285663, 0.9738740670273821, 0.9899562392608537, 0.9899559140557672, 0.9898581361485893, 0.9734037429061814, 0.97877210183329, 0.9721291210176852, 0.9815274913844639, 0.22501089446058242, 0.24216766474398277, 0.23844957834906322, 0.23181496879408736, 0.25462300541807414, 0.2437588681963524, 0.25462936714727313, 0.23012023099394052, 0.2583141444182956, 0.5578200865580238, 0.6885831416418774, 0.6288309253362111, 0.6444486596360716, 0.6867876820993982, 0.6197125224230183, 0.6054562899356317, 0.6769007777409424, 0.6145526523596077, 0.2439929900465979, 0.2656277777565186, 0.1663995659487646, 0.17709200299741845, 0.22707673141097973, 0.17059020478864728, 0.2181872187375271, 0.2416880706995692, 0.19856407762326145, 0.05157018185002982, 0.2550948002015193, 0.1299827279399629, 0.16779697772329671, 0.2062843358273132, 0.1873902656942139, 0.2151511937402495, 0.176924834043362, 0.18787848670404517, 0.23178699044337048, 0.2415575311555319, 0.2133599520394277, 0.22476793241832815, 0.22819069048413232, 0.1721433049120742, 0.2150413016230286, 0.22674672472128954, 0.26617214710005055, 0.32797207302902465, 0.3747264357213359, 0.3480932499427932, 0.34753188910874744, 0.3415397091598076, 0.3399807014451609, 0.3993385093594598, 0.38914439836188164, 0.33904010732766654, 0.03286314602214191, 0.04062145101152059, 0.03421778345142101, 0.08312919766901994, 0.09080423417058114, 0.08412141275209872, 0.07362132945694522, 0.052737122936080794, 0.05361761659683506, 0.24226060443648867, 0.22230061010651148, 0.20968812343659582, 0.24540545670914704, 0.22949494866605025, 0.23022152714465716, 0.2221903391342297, 0.22011331609553542, 0.20365930512488328, 0.5869492564185971, 0.5888433334452975, 0.5926823496316322, 0.627247068349325, 0.5412790962338554, 0.5728751744042578, 0.5943321145139939, 0.5878860414195586, 0.5487012519885542, 0.09580806090257299, 0.1000833963556248, 0.08354653821087654, 0.08420421839403391, 0.09224345955793944, 0.09699613779701999, 0.10998169006846725, 0.08279160725019774, 0.08687434271568129, 0.16670777107447177, 0.15554773999242755, 0.13088724355273373, 0.14478470589975367, 0.1336287267955717, 0.16187259778015328, 0.16576393036021442, 0.1322660665269304, 0.1806230502204189, 0.3063601393056129, 0.2945759908606743, 0.3012033660770743, 0.29709918489090337, 0.29511684419151885, 0.30262995514747637, 0.32283368764075215, 0.31012028944480197, 0.32011496001098194, 0.23853278267312938, 0.2303690339781852, 0.2081359549061491, 0.22831519966927483, 0.22058788487701397, 0.20042352068378544, 0.234038970758627, 0.26229510108975795, 0.23164880538792332, 0.18666404341013554, 0.19993956520313572, 0.17676633447046974, 0.17576556139710842, 0.18060102962249802, 0.22078495246207863, 0.21995689649732464, 0.1854152096554219, 0.1916375432420876, 0.17482383173955818, 0.18427168789171222, 0.17827331691917148, 0.18025953316355448, 0.17993746002050937, 0.19018357682306175, 0.18186541588226013, 0.17995900273749632, 0.17823285891295904, 0.6994510259110718, 0.16213759155628926, 0.15910931933625894, 0.1819065075040346, 0.19887994460292102, 0.21418337710922375, 0.17773966996632096, 0.17513285338093243, 0.2235352143929581, 0.1763959847798302, 0.244101661949652, 0.20072417094256612, 0.30872600985712584, 0.1582288562342643, 0.38151010011405384, 0.21149381220951669, 0.21052332155156184, 0.20898228302723088, 0.18136826897799552, 0.18135630926238866, 0.1956170750203774, 0.183804845805686, 0.20998608671660313, 0.18385040745706338, 0.17573000095735336, 0.18274635305546194, 0.20093081893039755, 0.07181204142193931, 0.07098689403050717, 0.08925646315208247, 0.07057601852271511, 0.07903185244145428, 0.0726088186818461, 0.07177130475590165, 0.07014396565306491, 0.0828957806810171]}, "mutation_prompt": null}
