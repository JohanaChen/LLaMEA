{"id": "e74f6201-4cbd-4738-b26a-19d0d4c536e0", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * self.dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.T0 = 100  # Initial temperature for simulated annealing\n        self.alpha = 0.9  # Cooling rate\n\n    def __call__(self, func):\n        # Initialize population\n        pop = np.random.uniform(*self.bounds, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        eval_count = self.population_size\n\n        # Main optimization loop\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                # Mutation using DE/rand/1\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), *self.bounds)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, pop[i])\n\n                # Adaptation using Simulated Annealing\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                else:\n                    # Simulated annealing acceptance criterion\n                    T = self.T0 * (self.alpha ** (eval_count // self.population_size))\n                    prob = np.exp(-(trial_fitness - fitness[i]) / T)\n                    if np.random.rand() < prob:\n                        pop[i] = trial\n                        fitness[i] = trial_fitness\n\n        return pop[np.argmin(fitness)]", "name": "HybridDESA", "description": "A hybrid Differential Evolution and Simulated Annealing approach using adaptive selection strategies for efficient exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.2435013576983238, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.4862129714043055, 0.4887211877722196, 0.4940825744867584, 0.4899048200412697, 0.484464438962974, 0.4933373489546431, 0.4909250158328534, 0.4797190560749517, 0.48534705075820006, 0.3975516635102697, 0.41187852421409576, 0.4031501590340343, 0.42769413396220013, 0.41459806763116835, 0.4223047809723329, 0.3975043202363312, 0.3902068635942597, 0.41838539079684134, 0.09609345051071105, 0.10247683248325268, 0.08301254962206017, 0.08950241322265118, 0.08284820013693572, 0.08746177041054581, 0.11386455844121668, 0.0982024492543967, 0.08181338663776772, 0.0952738255588822, 0.09770032328950562, 0.07729759073364151, 0.08815927864967421, 0.10128895181994324, 0.09568146121239696, 0.09695757992621179, 0.0867329864576244, 0.08743345547581538, 0.961845561160314, 0.9556504851206442, 0.9767940667978912, 0.9471058260180065, 0.9660667182810396, 0.8607583596529546, 0.9150543626071622, 0.8902283546373104, 0.9566261813141832, 0.255742438712836, 0.2514396772460794, 0.26032112985701805, 0.2652869104455279, 0.25791640034971, 0.277032484922482, 0.2888384105182016, 0.279218518631301, 0.28804571597416495, 0.3376601382182133, 0.4329435217614057, 0.5230474888904098, 0.46402425776986544, 0.49194260844039317, 0.4995740404819746, 0.498462652939171, 0.5519154466389453, 0.5168579916992125, 0.1888267989477611, 0.21558738022773272, 0.20324378771240437, 0.20475296730593862, 0.1549410185546678, 0.22330717910615372, 0.22491440894193426, 0.17480709492127788, 0.21879893364456615, 0.27317764039124537, 0.01598239347312369, 0.16565771826639575, 0.22208116608605089, 0.21532837797515147, 0.21048190645318243, 0.19153328743010178, 0.2066698436120994, 0.1908625400043047, 0.1360792553459187, 0.137311387812588, 0.13842145324317845, 0.11310558399259751, 0.11950430764924203, 0.1285299280462887, 0.14220174019822462, 0.1070700646128866, 0.11068647814198718, 0.2851620203060453, 0.27615551104979286, 0.23975574713312775, 0.22734241339918215, 0.2405163086614427, 0.2398174165345559, 0.3059812089880204, 0.3086092194181681, 0.2626760403574422, 0.028971051803227788, 0.03439103092269469, 0.01778266307917098, 0.06169741254946293, 0.02823527087981037, 0.019887809180399896, 0.04537430577839585, 0.03525539693925761, 0.03898887713864274, 0.1485844645918647, 0.1529012755869289, 0.1510643154815321, 0.16269866935812038, 0.15477691597017418, 0.1533145733839094, 0.1389431577900625, 0.1554383843468813, 0.1911599520878483, 0.4181088402996115, 0.3989630713731682, 0.39119242989395686, 0.4062141986709574, 0.4072192336715448, 0.3997165331395781, 0.41187463949176384, 0.41465879980306763, 0.39833226401761235, 0.08065413571271984, 0.08171468738617971, 0.07944107233018183, 0.0831042314276983, 0.08413152624492504, 0.08705823110955813, 0.08430171088426008, 0.1055167900510573, 0.08314720602258707, 0.15207963081173526, 0.1514469249007332, 0.16071031264420343, 0.14353215367387273, 0.18320446353681918, 0.14031367605284828, 0.13520598447076138, 0.20875011135009203, 0.20127788372972855, 0.2404498776106574, 0.23500797880326796, 0.24614070568211532, 0.2257296502531505, 0.24089660812259395, 0.22456389492251938, 0.250483197369871, 0.2675098480457304, 0.2629890288518286, 0.18917963904943313, 0.18767751229993568, 0.18926742928981244, 0.1862370019185413, 0.17959656988207207, 0.17023260765724735, 0.1992089898413938, 0.18469443239919814, 0.19782400651414178, 0.18601159345692408, 0.18614088457621536, 0.1849026876369192, 0.1882262879387422, 0.15527151565550212, 0.17325340714180748, 0.18808480850840992, 0.17329226125053443, 0.16918038579047567, 0.17877268983197425, 0.17688877402460423, 0.17058383432901392, 0.17167367549036316, 0.1798742716529641, 0.17072838555428949, 0.18407486016940555, 0.17375649805222126, 0.18382321724923478, 0.15008325442512072, 0.18902578810242332, 0.1475173844516635, 0.1764266567272219, 0.17525290838743512, 0.18073404856065012, 0.1780713144975733, 0.15991976260462504, 0.43772792196619825, 0.1934294560505958, 0.1641874359684089, 0.1626986439979342, 0.15769217341319108, 0.184339241840764, 0.41415391331495843, 0.18663829896298367, 0.12186192331076051, 0.19993559617799594, 0.22117731536865803, 0.18752321738493094, 0.19860982190336263, 0.20213776655719795, 0.1993836321681104, 0.1915831372752096, 0.1786174380187635, 0.19888828732574215, 0.21303108049757802, 0.06454874334517702, 0.07435772096958193, 0.06441900766640352, 0.07252313978729219, 0.06450737324879408, 0.0642548202229748, 0.0720687905041073, 0.06880459226518165, 0.06852666006151298]}, "mutation_prompt": null}
{"id": "4115b5af-9ff3-4fe5-8e9c-1bef81bd871d", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * self.dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.T0 = 100  # Initial temperature for simulated annealing\n        self.alpha = 0.9  # Cooling rate\n\n    def __call__(self, func):\n        # Initialize population\n        pop = np.random.uniform(*self.bounds, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        eval_count = self.population_size\n\n        # Main optimization loop\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                # Dynamic adaptation of F based on evaluations left\n                self.F = 0.5 + 0.3 * np.random.rand() * (1 - eval_count / self.budget)\n\n                # Mutation using DE/rand/1\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), *self.bounds)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, pop[i])\n\n                # Adaptation using Simulated Annealing\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                else:\n                    # Simulated annealing acceptance criterion\n                    T = self.T0 * (self.alpha ** (eval_count // self.population_size))\n                    prob = np.exp(-(trial_fitness - fitness[i]) / T)\n                    if np.random.rand() < prob:\n                        pop[i] = trial\n                        fitness[i] = trial_fitness\n\n        return pop[np.argmin(fitness)]", "name": "HybridDESA", "description": "An improved Differential Evolution and Simulated Annealing hybrid with adaptive Differential weight for better convergence.", "configspace": "", "generation": 1, "fitness": 0.31830604393259326, "feedback": "", "error": "", "parent_id": "e74f6201-4cbd-4738-b26a-19d0d4c536e0", "metadata": {"aucs": [0.546190821104791, 0.5345808867651431, 0.5377326868323838, 0.5433916580063267, 0.5317139252824588, 0.5405892728829329, 0.5447881568201722, 0.5367119982680874, 0.5381764941453923, 0.49876105354812017, 0.5045748148947258, 0.4898495734496693, 0.5002307675862028, 0.4883535073934707, 0.5003657244810777, 0.4917320787909786, 0.4850370627936752, 0.4921818506425577, 0.09851510011981723, 0.10127595923588473, 0.11831419979434232, 0.1051297621908166, 0.09701095094953671, 0.11000473903936181, 0.10480512869041247, 0.11103888439498766, 0.10910766811236028, 0.0935751737820043, 0.08866198429077377, 0.09077493147645166, 0.09724924035692606, 0.09533596672266709, 0.09026889887611289, 0.09267770350095417, 0.09194794557319985, 0.09926181962053326, 0.968029456433009, 0.8015229239822852, 0.9009178022616058, 0.7300317635360107, 0.8978506616559058, 0.8146122903916794, 0.959729572677602, 0.9434327331205953, 0.9366979089341498, 0.40955060329218973, 0.37941633955392495, 0.40982480509495833, 0.38283788705476574, 0.3912141832850371, 0.4107779896109395, 0.3971643092852998, 0.3822144543913266, 0.3965149437417319, 0.6665609731902988, 0.6427056692915079, 0.6332875777102119, 0.6695631655398371, 0.6443382024842611, 0.6569556208301877, 0.6493185406702895, 0.6457293828212209, 0.6674004362944148, 0.307664143796747, 0.27536955136958985, 0.21048971799760108, 0.24302103265996622, 0.28635692678002467, 0.3562695683866751, 0.3181374763957542, 0.3533363803651015, 0.30671450104068076, 0.30497009335989167, 0.2709945111640668, 0.18193354838057185, 0.32695095781843886, 0.3973184656582367, 0.34226958073923375, 0.24522111145085368, 0.36010707810685694, 0.3756312489831244, 0.33004534892946313, 0.31231700618905345, 0.3392535452727393, 0.31215509596724056, 0.3439547362790629, 0.32592390403594185, 0.3461885494758494, 0.3203162373116806, 0.285073990475891, 0.4623682162096193, 0.47332153049375225, 0.45876516813145396, 0.40152948147173695, 0.3932292084700999, 0.4060044315868888, 0.4703627833882874, 0.4457117921839928, 0.4562189500707682, 0.11386456754288321, 0.1027656346782283, 0.13712143967098633, 0.17213592027832292, 0.20980766468068124, 0.2086642845244161, 0.10775054261109451, 0.15718646881456166, 0.10427844196871316, 0.25973238045365443, 0.2645802931348419, 0.25693770153606066, 0.2986673110272352, 0.28719574222399846, 0.27465519835125685, 0.2831878971869687, 0.28210585440639246, 0.261023229137621, 0.484276201038505, 0.4876557913821299, 0.5016540606258784, 0.4862680740703217, 0.48679979312346333, 0.4878856833345748, 0.493714206408033, 0.49296174904094003, 0.4895899020374802, 0.1027121015986584, 0.09234260415623208, 0.08993966995506197, 0.13554294276204237, 0.08956070294519125, 0.09561111045498183, 0.09960376344763477, 0.09153346962688447, 0.09361914775615532, 0.27642596989363644, 0.1433311728574025, 0.13766222862841604, 0.14653836611097837, 0.26597947091300256, 0.1449458024693533, 0.13568345498353485, 0.1493159112548892, 0.277755136324642, 0.3093240682260191, 0.3123700668571626, 0.32396784520274124, 0.3155277656152341, 0.3116078581597259, 0.3221162041763308, 0.3323184774884581, 0.34921779924278795, 0.36084715429061887, 0.2438446679788523, 0.2677275334575536, 0.2555863064524787, 0.26781138585602726, 0.24709267956660064, 0.2645861195834689, 0.29363273452795924, 0.27009617146552867, 0.2540380726123679, 0.16811616903580306, 0.19040483654832274, 0.19352680521984544, 0.1812586264190147, 0.1885149310944083, 0.18292347247649077, 0.19926185722726175, 0.20760174340581106, 0.18361476332407833, 0.18429224058259563, 0.18365993483947873, 0.1769594727105217, 0.17988340257645452, 0.18307107048194649, 0.19620250128292138, 0.20238366616960934, 0.1788514937777128, 0.17309525195936004, 0.1877613912985554, 0.6115291484540104, 0.20363674958740907, 0.17844121409191227, 0.6214624298011587, 0.1611226743193216, 0.5696697056902301, 0.6149371133161515, 0.43648807258599687, 0.16366343634415792, 0.5198236969205325, 0.1590059626689062, 0.49067602250392817, 0.37533680840243844, 0.18176296702054917, 0.20326223997636494, 0.2017826259091009, 0.2019054637740244, 0.17854925624141216, 0.19297208160312673, 0.2093965678123424, 0.1915770547446799, 0.1926173725092537, 0.1745903197377231, 0.1976804385389359, 0.1847077966529972, 0.20548418487257403, 0.07806287329450823, 0.08014921040565715, 0.08344196697236317, 0.07845964106234715, 0.07874279052507138, 0.07794197709951878, 0.06905516996966199, 0.07191346156268841, 0.07697693590354682]}, "mutation_prompt": null}
