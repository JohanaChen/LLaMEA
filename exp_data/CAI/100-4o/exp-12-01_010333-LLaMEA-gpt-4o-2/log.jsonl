{"id": "e211d2c5-70fe-4360-82b7-ecb3e848c909", "solution": "import numpy as np\n\nclass HybridPSO_ADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.mutation_factor = 0.8\n        self.best_pos = None\n        self.best_val = np.inf\n\n    def _initialize_particles(self):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_values = np.full(self.population_size, np.inf)\n        return particles, velocities, personal_best_positions, personal_best_values\n\n    def _update_velocity(self, velocity, position, personal_best_position, global_best_position):\n        r1 = np.random.rand(self.dim)\n        r2 = np.random.rand(self.dim)\n        cognitive_velocity = self.cognitive_coefficient * r1 * (personal_best_position - position)\n        social_velocity = self.social_coefficient * r2 * (global_best_position - position)\n        new_velocity = self.inertia * velocity + cognitive_velocity + social_velocity\n        return new_velocity\n\n    def _mutate(self, position):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n        return np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        particles, velocities, personal_best_positions, personal_best_values = self._initialize_particles()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                current_value = func(particles[i])\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = particles[i]\n\n                if current_value < self.best_val:\n                    self.best_val = current_value\n                    self.best_pos = particles[i]\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                velocities[i] = self._update_velocity(\n                    velocities[i], particles[i], personal_best_positions[i], self.best_pos\n                )\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                # Adaptive differential mutation\n                if np.random.rand() < 0.1:  # With a small probability, mutate\n                    particles[i] = self._mutate(particles)\n\n        return self.best_pos, self.best_val", "name": "HybridPSO_ADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for Enhanced Exploration and Exploitation.", "configspace": "", "generation": 0, "fitness": 0.17112605118845683, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.3006512193070773, 0.34652179462384525, 0.2915723412470961, 0.23910842228532958, 0.1894833817748831, 0.3332441471744354, 0.3515564628333878, 0.3381408886836935, 0.3905326119206406, 9.999999999998899e-05, 9.999999999998899e-05, 0.05504571994499308, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007336268513819633, 9.999999999998899e-05, 0.08541031189641857, 0.0851591661036184, 0.082969350257459, 0.08304689439462487, 0.059875784235100205, 0.061677326535421684, 0.11203858926658616, 0.09208014357571559, 0.08184809016219585, 0.06622059966221805, 0.07954882883062797, 0.09552349300349705, 0.05880272205384662, 0.09377644109879002, 0.09821351069704998, 0.06981676250546731, 0.059352701150948484, 0.06924027106155495, 0.9923662188315034, 0.9915423262834271, 0.9940138727588911, 0.9894408141215757, 0.9922667112917558, 0.9853420974031204, 0.9906727337675822, 0.9940191038452414, 0.9933310077747947, 0.1565647372883726, 0.05551939421201857, 0.13173065372099513, 0.2220269423712764, 0.1257954751361462, 0.17787130017578479, 0.0824983256355365, 0.2043197612375458, 9.999999999998899e-05, 0.21330564929223095, 0.18147374930180205, 0.2589158857981114, 0.18537085574317413, 0.18522472878412177, 0.22932153338785677, 0.17821115530151788, 0.19349923932484403, 0.1631600454290134, 0.09573240902666147, 0.11775828162632185, 0.11549292678974832, 0.06486533181570298, 0.12915041681587214, 0.11418771935997485, 0.1364023442306288, 0.13222269445083745, 0.11277071912877112, 0.08599933928350856, 0.022132680139066885, 0.06231824940588171, 0.11277782136657899, 0.10711014083613157, 0.10735127544420064, 0.11710625097814353, 0.10848330390846861, 0.096613764685899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01675308743535897, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325411474487342, 0.0411113325736, 0.04694938195781162, 0.02380711943838465, 9.999999999998899e-05, 0.010633669785805044, 0.05718152224700335, 0.021283625585870714, 0.04518054612753253, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08965029964684212, 0.04004467377955623, 0.047366913946786715, 9.999999999998899e-05, 9.999999999998899e-05, 0.06423968177033168, 9.999999999998899e-05, 0.05501820122165302, 0.286598794264463, 0.30780394995489757, 0.3732125248138093, 0.36293357107761337, 0.41150434122531376, 0.20770245021741685, 0.32539171197591077, 0.3629859562489052, 0.30526031257219755, 0.06790286426535463, 0.0720579647992754, 0.04782048084397761, 0.06765797412980934, 0.0734731447828263, 0.08990842942339128, 0.08014514014653706, 0.06889286868691269, 0.06361546765240056, 0.1425553416586699, 0.14583648709524955, 0.16008833876823358, 0.17586323434240347, 0.18393990792352566, 0.2523339288205474, 0.1579582241703964, 0.16865711320674326, 0.19209348491167422, 0.2017336611597299, 0.28040045265740143, 0.22704723060653464, 0.20307451136125698, 0.1988450752529326, 0.15978197042605846, 0.24718866846589715, 0.2598256036608444, 0.19658263314097246, 0.15211061767556244, 0.16351272240308556, 0.16770362668562244, 0.1458218952089948, 0.18921725096615738, 0.14594581718223, 0.12183927830260366, 0.1718773041715047, 0.18087578276210858, 0.18284797374799755, 0.17255868112642325, 0.17214157201684754, 0.1845110599661629, 0.1884927131424321, 0.18195360834970842, 0.20892609785456628, 0.18787406441650956, 0.2012511697958127, 0.17216423436138162, 0.16387018848057056, 0.17565554278223916, 0.1733971863317889, 0.21644206937978516, 0.18471906556593498, 0.1832401681590634, 0.1704494277928199, 0.18353828994743449, 0.19535499997325134, 0.15203549519779513, 0.15267476335475638, 0.428654026047825, 0.19728561619175045, 0.5290971513496052, 0.09966452187343533, 0.16918107181197717, 0.16172984223021736, 0.07897678032284694, 0.1657597792061981, 0.22400765124797073, 0.301467260557174, 0.21912023679727677, 0.20165193300217354, 0.1971657859798991, 0.502433280275848, 0.181788817893062, 0.1781002526435599, 0.18829197747841953, 0.1876181073343105, 0.19283258924288627, 0.17512179001917416, 0.186100046095814, 0.1751001319072093, 0.1914783022232288, 0.1908515652935635, 0.06628036660480208, 0.06895409175029021, 0.08265385245547974, 0.060966603086539894, 0.07790990569633227, 0.07202455340696468, 0.07789182257213922, 0.07122616661273495, 0.07061629311234774]}, "mutation_prompt": null}
{"id": "4d5fa37f-2fc5-4d0b-8a32-e29f9ab325f7", "solution": "import numpy as np\n\nclass HybridPSO_ADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.mutation_factor = 0.8\n        self.best_pos = None\n        self.best_val = np.inf\n\n    def _initialize_particles(self):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_values = np.full(self.population_size, np.inf)\n        return particles, velocities, personal_best_positions, personal_best_values\n\n    def _update_velocity(self, velocity, position, personal_best_position, global_best_position):\n        r1 = np.random.rand(self.dim)\n        r2 = np.random.rand(self.dim)\n        cognitive_velocity = self.cognitive_coefficient * r1 * (personal_best_position - position)\n        social_velocity = self.social_coefficient * r2 * (global_best_position - position)\n        new_velocity = self.inertia * velocity + cognitive_velocity + social_velocity\n        return new_velocity\n\n    def _mutate(self, position):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n        return np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        particles, velocities, personal_best_positions, personal_best_values = self._initialize_particles()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                current_value = func(particles[i])\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = particles[i]\n\n                if current_value < self.best_val:\n                    self.best_val = current_value\n                    self.best_pos = particles[i]\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                velocities[i] = self._update_velocity(\n                    velocities[i], particles[i], personal_best_positions[i], self.best_pos\n                )\n                particles[i] = np.clip(particles[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                # Adaptive differential mutation\n                if np.random.rand() < 0.1:  # With a small probability, mutate\n                    particles[i] = self._mutate(particles)\n\n        return self.best_pos, self.best_val", "name": "HybridPSO_ADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for Enhanced Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e211d2c5-70fe-4360-82b7-ecb3e848c909", "metadata": {"aucs": [0.3006512193070773, 0.34652179462384525, 0.2915723412470961, 0.23910842228532958, 0.1894833817748831, 0.3332441471744354, 0.3515564628333878, 0.3381408886836935, 0.3905326119206406, 9.999999999998899e-05, 9.999999999998899e-05, 0.05504571994499308, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007336268513819633, 9.999999999998899e-05, 0.08541031189641857, 0.0851591661036184, 0.082969350257459, 0.08304689439462487, 0.059875784235100205, 0.061677326535421684, 0.11203858926658616, 0.09208014357571559, 0.08184809016219585, 0.06622059966221805, 0.07954882883062797, 0.09552349300349705, 0.05880272205384662, 0.09377644109879002, 0.09821351069704998, 0.06981676250546731, 0.059352701150948484, 0.06924027106155495, 0.9923662188315034, 0.9915423262834271, 0.9940138727588911, 0.9894408141215757, 0.9922667112917558, 0.9853420974031204, 0.9906727337675822, 0.9940191038452414, 0.9933310077747947, 0.1565647372883726, 0.05551939421201857, 0.13173065372099513, 0.2220269423712764, 0.1257954751361462, 0.17787130017578479, 0.0824983256355365, 0.2043197612375458, 9.999999999998899e-05, 0.21330564929223095, 0.18147374930180205, 0.2589158857981114, 0.18537085574317413, 0.18522472878412177, 0.22932153338785677, 0.17821115530151788, 0.19349923932484403, 0.1631600454290134, 0.09573240902666147, 0.11775828162632185, 0.11549292678974832, 0.06486533181570298, 0.12915041681587214, 0.11418771935997485, 0.1364023442306288, 0.13222269445083745, 0.11277071912877112, 0.08599933928350856, 0.022132680139066885, 0.06231824940588171, 0.11277782136657899, 0.10711014083613157, 0.10735127544420064, 0.11710625097814353, 0.10848330390846861, 0.096613764685899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01675308743535897, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07325411474487342, 0.0411113325736, 0.04694938195781162, 0.02380711943838465, 9.999999999998899e-05, 0.010633669785805044, 0.05718152224700335, 0.021283625585870714, 0.04518054612753253, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08965029964684212, 0.04004467377955623, 0.047366913946786715, 9.999999999998899e-05, 9.999999999998899e-05, 0.06423968177033168, 9.999999999998899e-05, 0.05501820122165302, 0.286598794264463, 0.30780394995489757, 0.3732125248138093, 0.36293357107761337, 0.41150434122531376, 0.20770245021741685, 0.32539171197591077, 0.3629859562489052, 0.30526031257219755, 0.06790286426535463, 0.0720579647992754, 0.04782048084397761, 0.06765797412980934, 0.0734731447828263, 0.08990842942339128, 0.08014514014653706, 0.06889286868691269, 0.06361546765240056, 0.1425553416586699, 0.14583648709524955, 0.16008833876823358, 0.17586323434240347, 0.18393990792352566, 0.2523339288205474, 0.1579582241703964, 0.16865711320674326, 0.19209348491167422, 0.2017336611597299, 0.28040045265740143, 0.22704723060653464, 0.20307451136125698, 0.1988450752529326, 0.15978197042605846, 0.24718866846589715, 0.2598256036608444, 0.19658263314097246, 0.15211061767556244, 0.16351272240308556, 0.16770362668562244, 0.1458218952089948, 0.18921725096615738, 0.14594581718223, 0.12183927830260366, 0.1718773041715047, 0.18087578276210858, 0.18284797374799755, 0.17255868112642325, 0.17214157201684754, 0.1845110599661629, 0.1884927131424321, 0.18195360834970842, 0.20892609785456628, 0.18787406441650956, 0.2012511697958127, 0.17216423436138162, 0.16387018848057056, 0.17565554278223916, 0.1733971863317889, 0.21644206937978516, 0.18471906556593498, 0.1832401681590634, 0.1704494277928199, 0.18353828994743449, 0.19535499997325134, 0.15203549519779513, 0.15267476335475638, 0.428654026047825, 0.19728561619175045, 0.5290971513496052, 0.09966452187343533, 0.16918107181197717, 0.16172984223021736, 0.07897678032284694, 0.1657597792061981, 0.22400765124797073, 0.301467260557174, 0.21912023679727677, 0.20165193300217354, 0.1971657859798991, 0.502433280275848, 0.181788817893062, 0.1781002526435599, 0.18829197747841953, 0.1876181073343105, 0.19283258924288627, 0.17512179001917416, 0.186100046095814, 0.1751001319072093, 0.1914783022232288, 0.1908515652935635, 0.06628036660480208, 0.06895409175029021, 0.08265385245547974, 0.060966603086539894, 0.07790990569633227, 0.07202455340696468, 0.07789182257213922, 0.07122616661273495, 0.07061629311234774]}, "mutation_prompt": null}
