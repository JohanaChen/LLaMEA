{"id": "8b299b2f-ccba-4028-acc8-1f7219a5e028", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim, population_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Initial crossover probability\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.num_evals = 0\n    \n    def __call__(self, func):\n        best_score = np.inf\n        best_sol = None\n\n        while self.num_evals < self.budget:\n            new_pop = np.zeros_like(self.pop)\n            for i in range(self.population_size):\n                idxs = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                x1, x2, x3 = self.pop[idxs]\n\n                v = x1 + self.F * (x2 - x3)\n                v = np.clip(v, self.lower_bound, self.upper_bound)\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, v, self.pop[i])\n\n                score_trial = func(trial)\n                if score_trial < best_score:\n                    best_score = score_trial\n                    best_sol = trial\n\n                if score_trial < func(self.pop[i]):\n                    new_pop[i] = trial\n                else:\n                    new_pop[i] = self.pop[i]\n\n                self.num_evals += 1\n                if self.num_evals >= self.budget:\n                    break\n\n            self.pop = new_pop\n            # Adaptive control strategies\n            self.F = np.clip(self.F + 0.1 * np.random.normal(), 0.1, 1.0)\n            self.CR = np.clip(self.CR + 0.1 * np.random.normal(), 0.1, 1.0)\n\n        return best_sol", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Mutation and Crossover rates tuned for diverse landscapes.", "configspace": "", "generation": 0, "fitness": 0.20142309117738488, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.4144497596915646, 0.519570793388681, 0.6356867377707965, 0.4035874844674797, 0.5874724413336357, 0.5659448844746416, 0.42338724275731365, 0.5430780599832337, 0.45741836887336906, 0.13695665680233438, 0.23571612878303272, 0.15064070260107854, 0.14381651689896813, 0.24734752477981203, 0.12550853992426814, 0.15433447700795022, 0.23579479077668175, 0.12096208580876244, 0.11870426895900166, 0.12884962429130864, 0.12132282051317345, 0.1080187584726282, 0.12072396968806975, 0.13992311778036715, 0.11164766014461092, 0.13515273047868637, 0.11147181115570948, 0.0909928052811898, 0.10448934671613752, 0.11082303567563101, 0.10855421692716627, 0.1070997260135893, 0.10060722733566785, 0.0977830406279403, 0.1070464310641921, 0.10073663693199453, 0.8164343137758036, 0.8772586946784893, 0.34110969715446504, 0.8399439896520648, 0.8595370866772253, 0.6425793528701605, 0.8572332095149565, 0.904965652682598, 0.8648870734873351, 0.16525898295145036, 0.1428829434247555, 0.07068765945595878, 0.15540347495659512, 0.1687608979380526, 0.1949391029122226, 0.1878273500348555, 0.1727564367484944, 0.13757678338930035, 0.2146740745434048, 0.2228080430332181, 0.1992971413616068, 0.2232201478048006, 0.23945534678741798, 0.35319916674177443, 0.2152853131516237, 0.4082150383225781, 0.6223511219485767, 0.11210024058339918, 0.1031370379454134, 0.11352199884127367, 0.1068645887196189, 0.1239336253830221, 0.13911778103532013, 0.11626167841691526, 0.14346354366531544, 0.24651063241100912, 0.09762127340754667, 0.10053081386905283, 0.11077558411726351, 0.12282438872041135, 0.14227223483736284, 0.11716254544550753, 0.10779284403532563, 0.122228306074737, 0.11838264805188059, 9.999999999998899e-05, 0.012011986632783578, 0.07934805595122452, 9.999999999998899e-05, 9.999999999998899e-05, 0.037439885902738945, 0.0012086712001755373, 9.999999999998899e-05, 0.04116186516110343, 0.08932432402822887, 0.07570752561841199, 0.14923602206088804, 0.06878606211779092, 0.05890693219151266, 0.1762685791654539, 0.07235633566322963, 0.1399810309586188, 0.17649422908230883, 9.999999999998899e-05, 9.999999999998899e-05, 0.04799198235091173, 9.999999999998899e-05, 9.999999999998899e-05, 0.051255543255679936, 9.999999999998899e-05, 0.0033618903070958828, 0.03178403551425368, 0.04649872844599323, 0.08981610713861077, 0.11931328844207745, 0.04991417890472327, 0.07628531874630085, 0.15063385410451213, 0.07627642770627663, 0.09518238611764862, 0.14063362138899105, 0.3447236521537075, 0.38151255946394236, 0.4187809846372621, 0.340589714108792, 0.43125687222748454, 0.4718690968404322, 0.3771082556026196, 0.4052041502406616, 0.5176956956588974, 0.08806213967006749, 0.1053852222580155, 0.09571304852963203, 0.08093065228348462, 0.07860735800791974, 0.09483799812801186, 0.07716612168329007, 0.08065903366814053, 0.09192168493009778, 0.13605475598302896, 0.13926494517353982, 0.15383013822525315, 0.12709351146042558, 0.1327354462898913, 0.1498443040948103, 0.12056717339763767, 0.14990196275263368, 0.1733713202636571, 0.22024085240914126, 0.24316782804222825, 0.3424263444548197, 0.22632964541706702, 0.2419930227549949, 0.31163060943248677, 0.2161682643102979, 0.2757614953983263, 0.3430345267254882, 0.15691298591160407, 0.17557289058925418, 0.26184370159449144, 0.1610107723464934, 0.15156267830207726, 0.2121873346355243, 0.1845464837363906, 0.1875315978461155, 0.2082177456633234, 0.1706537502717118, 0.19151901841523322, 0.196270268535916, 0.18069093323631313, 0.17190278488333732, 0.17397822591469736, 0.1823450581584446, 0.19108028619104156, 0.22060072849936974, 0.18108691665288001, 0.1956278034310759, 0.2529038711127606, 0.1827826610604938, 0.19075332173784176, 0.1951972585034203, 0.1866625670136165, 0.22739018958585921, 0.2112407104676407, 0.237598785508898, 0.17579478286805883, 0.5546733048038013, 0.2434124782511955, 0.217672640442922, 0.5045289919492938, 0.15443591444478788, 0.22897367714230454, 0.197340678936611, 0.1655328151307438, 0.18696477421716018, 0.1887041724930295, 0.15179265521893504, 0.18298137439799356, 0.21196189387113873, 0.19598875650591452, 0.2306239033862224, 0.2023813303502794, 0.17881423097568094, 0.17448074134053115, 0.1902780708552635, 0.1635428794267777, 0.20188674049671929, 0.18150456055968212, 0.16988067050898192, 0.18008391742818497, 0.18075114701834483, 0.06252927308452294, 0.06965667057317537, 0.07403665466185061, 0.06113612018845527, 0.06784988900166622, 0.07846129182465333, 0.07289215652772396, 0.07392829027563297, 0.08004937477451257]}, "mutation_prompt": null}
{"id": "8eb56333-eb1a-45c8-b31d-ae5e51c1c43b", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim, population_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Initial crossover probability\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.num_evals = 0\n    \n    def __call__(self, func):\n        best_score = np.inf\n        best_sol = None\n\n        while self.num_evals < self.budget:\n            new_pop = np.zeros_like(self.pop)\n            for i in range(self.population_size):\n                idxs = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                x1, x2, x3 = self.pop[idxs]\n\n                v = x1 + self.F * (x2 - x3)\n                v = np.clip(v, self.lower_bound, self.upper_bound)\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, v, self.pop[i])\n\n                score_trial = func(trial)\n                if score_trial < best_score:\n                    best_score = score_trial\n                    best_sol = trial\n\n                if score_trial < func(self.pop[i]):\n                    new_pop[i] = trial\n                else:\n                    new_pop[i] = self.pop[i]\n\n                self.num_evals += 1\n                if self.num_evals >= self.budget:\n                    break\n\n            self.pop = new_pop\n            # Adaptive control strategies\n            self.F = np.clip(self.F + 0.1 * np.random.normal(), 0.1, 1.0)\n            self.CR = np.clip(self.CR + 0.1 * np.random.normal(), 0.1, 1.0)\n            \n            # Dynamic population resizing\n            if np.std([func(ind) for ind in self.pop]) < 1e-5:\n                self.population_size = max(10, self.population_size // 2)  # Reduce population size\n\n        return best_sol", "name": "HybridDifferentialEvolution", "description": "Enhance Hybrid Differential Evolution by introducing dynamic population resizing based on convergence.", "configspace": "", "generation": 1, "fitness": 0.16658226996892048, "feedback": "", "error": "", "parent_id": "8b299b2f-ccba-4028-acc8-1f7219a5e028", "metadata": {"aucs": [0.33289412382022665, 0.3815033908621456, 0.47905042830590927, 0.3232874243714102, 0.4461522390150603, 0.41020582980251186, 0.3456618324752604, 0.40101474743423315, 0.33654058946276677, 0.07163440292976742, 0.10825025525404341, 0.07082400632975827, 0.07205496936817357, 0.10046168131537503, 0.05749895068034527, 0.08145386178060143, 0.10882711166981884, 0.07889250837999606, 0.09360949243782779, 0.11102241178516092, 0.10063636422947553, 0.09288576680701444, 0.09551589201468325, 0.1129094004618233, 0.09440841809729994, 0.11026582384596673, 0.0993784380079451, 0.07586825631627381, 0.08520083059558947, 0.0919186597657512, 0.09215196018073435, 0.088755346264625, 0.07583710034391933, 0.07763694679712319, 0.08793050966609339, 0.09020712252886165, 0.72725684368391, 0.8164964780628643, 0.23095675637994195, 0.7609605874548393, 0.7913499899167188, 0.4665285144084753, 0.7872061633539928, 0.8604529402673995, 0.7985208362035132, 0.13876515601995087, 0.09354373248070802, 0.06289009634934861, 0.1399321214963567, 0.1163845143733443, 0.1647960975296544, 0.14480290176088007, 0.12542729852665602, 0.12096579231130067, 0.18451622575965032, 0.17156994592500774, 0.1874952889563266, 0.19964675539700538, 0.1868398542445321, 0.24446715255587392, 0.19700045763900564, 0.21535637454850698, 0.4359889156942739, 0.08541827241476163, 0.07617547050304296, 0.10302060820129832, 0.0854355350369217, 0.10289647134125357, 0.11207495748852847, 0.09321336985386786, 0.11114330207181133, 0.15777083687864724, 0.0754273314131162, 0.07281812123223497, 0.09509179248221555, 0.10652942593363512, 0.11353333008218547, 0.10472157926130798, 0.09317089560858216, 0.09745573965193943, 0.10437607239070168, 9.999999999998899e-05, 9.999999999998899e-05, 0.04670227702232277, 9.999999999998899e-05, 9.999999999998899e-05, 0.027554468782919894, 0.0003621419051013097, 9.999999999998899e-05, 0.018226727201185344, 0.08065984495365797, 0.03864321428704587, 0.1189294821457001, 0.06173445770163011, 0.04164131939247495, 0.15699000550996212, 0.0590404021114318, 0.08994485990883061, 0.13994146318729472, 9.999999999998899e-05, 9.999999999998899e-05, 0.006720337349904404, 9.999999999998899e-05, 9.999999999998899e-05, 0.018439658735035613, 9.999999999998899e-05, 0.00025332543756573234, 0.0013386648950259872, 0.0343687459346953, 0.05885246093649654, 0.07712751741711765, 0.030075895018759957, 0.04020537382144085, 0.09638805782110083, 0.0613412244114363, 0.06049547297457358, 0.08301789699488527, 0.3077329505857044, 0.3201179500565763, 0.34540138038293466, 0.3043009652994496, 0.3563511561607735, 0.375733061341343, 0.33326840305408834, 0.34622039393743, 0.43755814765077816, 0.08214127036364482, 0.0922177214292842, 0.0888578237559674, 0.07645025421199758, 0.06409243745477655, 0.08449900995880066, 0.07044980940250756, 0.07103495315215647, 0.08295203401770157, 0.13134381756083802, 0.12406588197107626, 0.1481754286365483, 0.12404308029407018, 0.13028130754137346, 0.13893967590388678, 0.11538600084577466, 0.14384529913302413, 0.1428257120144848, 0.19880662062040833, 0.20691638407875168, 0.2904608029120652, 0.2142012773477523, 0.20604343885228815, 0.2661372792288601, 0.20104859188132063, 0.23097510273497657, 0.2861005795299044, 0.14457080056156535, 0.14340802949546738, 0.2181382784685385, 0.1563241977743508, 0.1232446425273287, 0.17667594441425483, 0.17072989405953576, 0.16453241127679152, 0.18432188524234483, 0.16803720235965425, 0.1767580801741222, 0.18973537675163765, 0.17643670475360917, 0.16111965131728045, 0.17027730811428887, 0.17010400544402804, 0.17888703563014463, 0.2013083114771984, 0.16908293629055093, 0.1754931213879135, 0.20227213039056735, 0.1724578161428839, 0.18568321479288274, 0.18431747366907625, 0.17114716204558023, 0.1935945892870301, 0.1894312407941371, 0.20312003217749441, 0.168659271058344, 0.3479529200790291, 0.20360147085922986, 0.16985674893052605, 0.3288914917250919, 0.15040263347384097, 0.17192711759503632, 0.1885723003984242, 0.15682633772754562, 0.17310085238071715, 0.17761893838800147, 0.13822867335645295, 0.15762391082110438, 0.166627835394777, 0.18641448481262846, 0.17435105416159624, 0.1960567814041625, 0.17326524811122146, 0.16825575779731394, 0.18385653479009134, 0.15944441021535372, 0.19929852118086044, 0.17957546620840725, 0.16760560422156345, 0.1754871005961739, 0.17195759884281103, 0.05707842575054334, 0.06600173900336248, 0.06620184728099376, 0.05856452489039854, 0.065473214267591, 0.0710335001119009, 0.06975121732405898, 0.06676876210507032, 0.07251924549176425]}, "mutation_prompt": null}
