{"id": "91272b20-211f-421b-862b-46cfa923834d", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.inertia_weight = 0.729  # Commonly used inertia weight\n        self.cognitive_coeff = 1.4944  # Cognitive coefficient\n        self.social_coeff = 1.4944    # Social coefficient\n        self.bounds = (-5.0, 5.0)\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.array([func(p) for p in personal_best_position])\n        global_best_index = np.argmin(personal_best_value)\n        global_best_position = personal_best_position[global_best_index]\n        global_best_value = personal_best_value[global_best_index]\n        \n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            # Update velocities and positions\n            for i in range(self.swarm_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                velocity[i] = (self.inertia_weight * velocity[i] +\n                               self.cognitive_coeff * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coeff * r2 * (global_best_position - position[i]))\n                position[i] = position[i] + velocity[i]\n                position[i] = np.clip(position[i], self.bounds[0], self.bounds[1])\n\n            # Evaluate and update personal best\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                current_value = func(position[i])\n                evaluations += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n            # Update global best\n            current_global_best_index = np.argmin(personal_best_value)\n            if personal_best_value[current_global_best_index] < global_best_value:\n                global_best_value = personal_best_value[current_global_best_index]\n                global_best_position = personal_best_position[current_global_best_index]\n\n            # Differential Evolution mutation and crossover\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.swarm_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = personal_best_position[a] + self.mutation_factor * (personal_best_position[b] - personal_best_position[c])\n                mutant_vector = np.clip(mutant_vector, self.bounds[0], self.bounds[1])\n                \n                trial_vector = np.copy(position[i])\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n\n                trial_value = func(trial_vector)\n                evaluations += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n\n                    if trial_value < global_best_value:\n                        global_best_value = trial_value\n                        global_best_position = trial_vector\n\n        return global_best_value", "name": "HybridPSO_DE", "description": "Hybrid Particle Swarm Optimization with Differential Evolution mutation for adaptive exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.34709677586292426, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8057890472703895, 0.8057890472703895, 0.8057890472703895, 0.7842371436167004, 0.7842371436167004, 0.7842371436167004, 0.8046291747316202, 0.8046291747316202, 0.8046291747316202, 0.5778016893999958, 0.5778016893999958, 0.5778016893999958, 0.5544397784534009, 0.5544397784534009, 0.5544397784534009, 0.5710760103737075, 0.5710760103737075, 0.5710760103737075, 0.1352993362616457, 0.1352993362616457, 0.1352993362616457, 0.17632992529446567, 0.17632992529446567, 0.17632992529446567, 0.14533605815577522, 0.14533605815577522, 0.14533605815577522, 0.11703548501151584, 0.11703548501151584, 0.11703548501151584, 0.13098159065487802, 0.13098159065487802, 0.13098159065487802, 0.13405902807728776, 0.13405902807728776, 0.13405902807728776, 0.9907136659955039, 0.9907136659955039, 0.9907136659955039, 0.9907354531519121, 0.9907354531519121, 0.9907354531519121, 0.9911909329614309, 0.9911909329614309, 0.9911909329614309, 0.6118994035105598, 0.6118994035105598, 0.6118994035105598, 0.4828312395210749, 0.4828312395210749, 0.4828312395210749, 0.5365903817876629, 0.5365903817876629, 0.5365903817876629, 0.6871193534264057, 0.6871193534264057, 0.6871193534264057, 0.16205836785140126, 0.16205836785140126, 0.16205836785140126, 0.17401707142260636, 0.17401707142260636, 0.17401707142260636, 0.3548561162293965, 0.3548561162293965, 0.3548561162293965, 0.33900126887928017, 0.33900126887928017, 0.33900126887928017, 0.38852959353175653, 0.38852959353175653, 0.38852959353175653, 0.00975432469000348, 0.00975432469000348, 0.00975432469000348, 0.4076372581016495, 0.4076372581016495, 0.4076372581016495, 0.4810192826670254, 0.4810192826670254, 0.4810192826670254, 0.2406016282074115, 0.2406016282074115, 0.2406016282074115, 0.2691039246413428, 0.2691039246413428, 0.2691039246413428, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3816308790405456, 0.3816308790405456, 0.3816308790405456, 0.3164688926599031, 0.3164688926599031, 0.3164688926599031, 0.46975297526464055, 0.46975297526464055, 0.46975297526464055, 0.1569128801136025, 0.1569128801136025, 0.1569128801136025, 0.10562175309790278, 0.10562175309790278, 0.10562175309790278, 0.17609076192078432, 0.17609076192078432, 0.17609076192078432, 0.21658398329799755, 0.21658398329799755, 0.21658398329799755, 0.2686105421701347, 0.2686105421701347, 0.2686105421701347, 0.24932960620643407, 0.24932960620643407, 0.24932960620643407, 0.6589715010717265, 0.6589715010717265, 0.6589715010717265, 0.6306915536293963, 0.6306915536293963, 0.6306915536293963, 0.6167879907372017, 0.6167879907372017, 0.6167879907372017, 0.11660837421550874, 0.11660837421550874, 0.11660837421550874, 0.12839479176305757, 0.12839479176305757, 0.12839479176305757, 0.13787232400648042, 0.13787232400648042, 0.13787232400648042, 0.2075262209882056, 0.2075262209882056, 0.2075262209882056, 0.1997963835287363, 0.1997963835287363, 0.1997963835287363, 0.15558318737621302, 0.15558318737621302, 0.15558318737621302, 0.45014315592077314, 0.45014315592077314, 0.45014315592077314, 0.37843504596584143, 0.37843504596584143, 0.37843504596584143, 0.4702867793862371, 0.4702867793862371, 0.4702867793862371, 0.2986314692753034, 0.2986314692753034, 0.2986314692753034, 0.30577400359051854, 0.30577400359051854, 0.30577400359051854, 0.3056176856690501, 0.3056176856690501, 0.3056176856690501, 0.18111685604667804, 0.18111685604667804, 0.18111685604667804, 0.18223156612407054, 0.18223156612407054, 0.18223156612407054, 0.21343881688165078, 0.21343881688165078, 0.21343881688165078, 0.3339886708339401, 0.3339886708339401, 0.3339886708339401, 0.23973974974406365, 0.23973974974406365, 0.23973974974406365, 0.2212608139541572, 0.2212608139541572, 0.2212608139541572, 0.8769292293944834, 0.8769292293944834, 0.8769292293944834, 0.16521776446254166, 0.16521776446254166, 0.16521776446254166, 0.18578122911669748, 0.18578122911669748, 0.18578122911669748, 0.1690960110320231, 0.1690960110320231, 0.1690960110320231, 0.7851948657989278, 0.7851948657989278, 0.7851948657989278, 0.15635601466139903, 0.15635601466139903, 0.15635601466139903, 0.18746633457556816, 0.18746633457556816, 0.18746633457556816, 0.19889319480834156, 0.19889319480834156, 0.19889319480834156, 0.18488453818465855, 0.18488453818465855, 0.18488453818465855, 0.08440887091094451, 0.08440887091094451, 0.08440887091094451, 0.07491015086962416, 0.07491015086962416, 0.07491015086962416, 0.09315690995677506, 0.09315690995677506, 0.09315690995677506]}, "mutation_prompt": null}
{"id": "1015cde7-0a30-4139-98c0-fe03f71da91a", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.inertia_weight = 0.729  # Commonly used inertia weight\n        self.cognitive_coeff = 1.4944  # Cognitive coefficient\n        self.social_coeff = 1.4944    # Social coefficient\n        self.bounds = (-5.0, 5.0)\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.array([func(p) for p in personal_best_position])\n        global_best_index = np.argmin(personal_best_value)\n        global_best_position = personal_best_position[global_best_index]\n        global_best_value = personal_best_value[global_best_index]\n        \n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            # Update velocities and positions\n            for i in range(self.swarm_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                velocity[i] = (self.inertia_weight * velocity[i] +\n                               self.cognitive_coeff * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coeff * r2 * (global_best_position - position[i]))\n                position[i] = position[i] + velocity[i]\n                position[i] = np.clip(position[i], self.bounds[0], self.bounds[1])\n\n            # Evaluate and update personal best\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                current_value = func(position[i])\n                evaluations += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n            # Update global best\n            current_global_best_index = np.argmin(personal_best_value)\n            if personal_best_value[current_global_best_index] < global_best_value:\n                global_best_value = personal_best_value[current_global_best_index]\n                global_best_position = personal_best_position[current_global_best_index]\n\n            # Differential Evolution mutation and crossover\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.swarm_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = personal_best_position[a] + self.mutation_factor * (personal_best_position[b] - personal_best_position[c])\n                mutant_vector = np.clip(mutant_vector, self.bounds[0], self.bounds[1])\n                \n                trial_vector = np.copy(position[i])\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n\n                trial_value = func(trial_vector)\n                evaluations += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n\n                    if trial_value < global_best_value:\n                        global_best_value = trial_value\n                        global_best_position = trial_vector\n\n        return global_best_value", "name": "HybridPSO_DE", "description": "Hybrid Particle Swarm Optimization with Differential Evolution mutation for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "91272b20-211f-421b-862b-46cfa923834d", "metadata": {"aucs": [0.8057890472703895, 0.8057890472703895, 0.8057890472703895, 0.7842371436167004, 0.7842371436167004, 0.7842371436167004, 0.8046291747316202, 0.8046291747316202, 0.8046291747316202, 0.5778016893999958, 0.5778016893999958, 0.5778016893999958, 0.5544397784534009, 0.5544397784534009, 0.5544397784534009, 0.5710760103737075, 0.5710760103737075, 0.5710760103737075, 0.1352993362616457, 0.1352993362616457, 0.1352993362616457, 0.17632992529446567, 0.17632992529446567, 0.17632992529446567, 0.14533605815577522, 0.14533605815577522, 0.14533605815577522, 0.11703548501151584, 0.11703548501151584, 0.11703548501151584, 0.13098159065487802, 0.13098159065487802, 0.13098159065487802, 0.13405902807728776, 0.13405902807728776, 0.13405902807728776, 0.9907136659955039, 0.9907136659955039, 0.9907136659955039, 0.9907354531519121, 0.9907354531519121, 0.9907354531519121, 0.9911909329614309, 0.9911909329614309, 0.9911909329614309, 0.6118994035105598, 0.6118994035105598, 0.6118994035105598, 0.4828312395210749, 0.4828312395210749, 0.4828312395210749, 0.5365903817876629, 0.5365903817876629, 0.5365903817876629, 0.6871193534264057, 0.6871193534264057, 0.6871193534264057, 0.16205836785140126, 0.16205836785140126, 0.16205836785140126, 0.17401707142260636, 0.17401707142260636, 0.17401707142260636, 0.3548561162293965, 0.3548561162293965, 0.3548561162293965, 0.33900126887928017, 0.33900126887928017, 0.33900126887928017, 0.38852959353175653, 0.38852959353175653, 0.38852959353175653, 0.00975432469000348, 0.00975432469000348, 0.00975432469000348, 0.4076372581016495, 0.4076372581016495, 0.4076372581016495, 0.4810192826670254, 0.4810192826670254, 0.4810192826670254, 0.2406016282074115, 0.2406016282074115, 0.2406016282074115, 0.2691039246413428, 0.2691039246413428, 0.2691039246413428, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3816308790405456, 0.3816308790405456, 0.3816308790405456, 0.3164688926599031, 0.3164688926599031, 0.3164688926599031, 0.46975297526464055, 0.46975297526464055, 0.46975297526464055, 0.1569128801136025, 0.1569128801136025, 0.1569128801136025, 0.10562175309790278, 0.10562175309790278, 0.10562175309790278, 0.17609076192078432, 0.17609076192078432, 0.17609076192078432, 0.21658398329799755, 0.21658398329799755, 0.21658398329799755, 0.2686105421701347, 0.2686105421701347, 0.2686105421701347, 0.24932960620643407, 0.24932960620643407, 0.24932960620643407, 0.6589715010717265, 0.6589715010717265, 0.6589715010717265, 0.6306915536293963, 0.6306915536293963, 0.6306915536293963, 0.6167879907372017, 0.6167879907372017, 0.6167879907372017, 0.11660837421550874, 0.11660837421550874, 0.11660837421550874, 0.12839479176305757, 0.12839479176305757, 0.12839479176305757, 0.13787232400648042, 0.13787232400648042, 0.13787232400648042, 0.2075262209882056, 0.2075262209882056, 0.2075262209882056, 0.1997963835287363, 0.1997963835287363, 0.1997963835287363, 0.15558318737621302, 0.15558318737621302, 0.15558318737621302, 0.45014315592077314, 0.45014315592077314, 0.45014315592077314, 0.37843504596584143, 0.37843504596584143, 0.37843504596584143, 0.4702867793862371, 0.4702867793862371, 0.4702867793862371, 0.2986314692753034, 0.2986314692753034, 0.2986314692753034, 0.30577400359051854, 0.30577400359051854, 0.30577400359051854, 0.3056176856690501, 0.3056176856690501, 0.3056176856690501, 0.18111685604667804, 0.18111685604667804, 0.18111685604667804, 0.18223156612407054, 0.18223156612407054, 0.18223156612407054, 0.21343881688165078, 0.21343881688165078, 0.21343881688165078, 0.3339886708339401, 0.3339886708339401, 0.3339886708339401, 0.23973974974406365, 0.23973974974406365, 0.23973974974406365, 0.2212608139541572, 0.2212608139541572, 0.2212608139541572, 0.8769292293944834, 0.8769292293944834, 0.8769292293944834, 0.16521776446254166, 0.16521776446254166, 0.16521776446254166, 0.18578122911669748, 0.18578122911669748, 0.18578122911669748, 0.1690960110320231, 0.1690960110320231, 0.1690960110320231, 0.7851948657989278, 0.7851948657989278, 0.7851948657989278, 0.15635601466139903, 0.15635601466139903, 0.15635601466139903, 0.18746633457556816, 0.18746633457556816, 0.18746633457556816, 0.19889319480834156, 0.19889319480834156, 0.19889319480834156, 0.18488453818465855, 0.18488453818465855, 0.18488453818465855, 0.08440887091094451, 0.08440887091094451, 0.08440887091094451, 0.07491015086962416, 0.07491015086962416, 0.07491015086962416, 0.09315690995677506, 0.09315690995677506, 0.09315690995677506]}, "mutation_prompt": null}
