{"id": "3c0c9476-63cc-4bc8-99ff-a81e64845c57", "solution": "import numpy as np\n\nclass HybridPSO_ADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 10 + int(np.sqrt(self.dim))\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        particles = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.zeros((self.num_particles, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.num_particles, np.inf)\n        \n        global_best_position = None\n        global_best_score = np.inf\n        \n        eval_count = 0\n        \n        while eval_count < self.budget:\n            # Evaluate current particles\n            for i in range(self.num_particles):\n                score = func(particles[i])\n                eval_count += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = particles[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = particles[i]\n\n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.num_particles, self.dim))\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - particles) +\n                          self.c2 * r2 * (global_best_position - particles))\n            particles += velocities\n            \n            # Apply bounds\n            particles = np.clip(particles, self.lb, self.ub)\n            \n            # Adaptive Differential Mutation\n            for i in range(self.num_particles):\n                if eval_count >= self.budget:\n                    break\n                indices = np.random.choice(self.num_particles, 3, replace=False)\n                if i in indices:\n                    continue\n                a, b, c = personal_best_positions[indices]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, particles[i])\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < personal_best_scores[i]:\n                    personal_best_scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                if trial_score < global_best_score:\n                    global_best_score = trial_score\n                    global_best_position = trial\n                \n        return global_best_position, global_best_score", "name": "HybridPSO_ADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation to explore and exploit diverse areas of the search space efficiently.", "configspace": "", "generation": 0, "fitness": 0.35195409998451155, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.9218168920799484, 0.9218168920799484, 0.9218168920799484, 0.9307968998308853, 0.9307968998308853, 0.9307968998308853, 0.9261459226206086, 0.9261459226206086, 0.9261459226206086, 0.8539398036379152, 0.8539398036379152, 0.8539398036379152, 0.8403141974725528, 0.8403141974725528, 0.8403141974725528, 0.018725422039651995, 0.018725422039651995, 0.018725422039651995, 0.14456422054669715, 0.14456422054669715, 0.14456422054669715, 0.15902178490825936, 0.15902178490825936, 0.15902178490825936, 0.1435326629776289, 0.1435326629776289, 0.1435326629776289, 0.1104496100873208, 0.1104496100873208, 0.1104496100873208, 0.11376449789476306, 0.11376449789476306, 0.11376449789476306, 0.09570592800176769, 0.09570592800176769, 0.09570592800176769, 0.9875908423999351, 0.9875908423999351, 0.9875908423999351, 0.9920910940323256, 0.9920910940323256, 0.9920910940323256, 0.9914574045116882, 0.9914574045116882, 0.9914574045116882, 0.8483319708242689, 0.8483319708242689, 0.8483319708242689, 0.8480874896570081, 0.8480874896570081, 0.8480874896570081, 0.843665218560409, 0.843665218560409, 0.843665218560409, 0.9225554989228744, 0.9225554989228744, 0.9225554989228744, 0.887352891080419, 0.887352891080419, 0.887352891080419, 0.17471772653482553, 0.17471772653482553, 0.17471772653482553, 0.7093526383279529, 0.7093526383279529, 0.7093526383279529, 0.13279530810375728, 0.13279530810375728, 0.13279530810375728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4308512893557226, 0.4308512893557226, 0.4308512893557226, 0.6847958305436996, 0.6847958305436996, 0.6847958305436996, 0.2040635495066475, 0.2040635495066475, 0.2040635495066475, 0.09454670987194258, 0.09454670987194258, 0.09454670987194258, 0.08252922629152748, 0.08252922629152748, 0.08252922629152748, 0.04723303233142584, 0.04723303233142584, 0.04723303233142584, 0.1452421256259362, 0.1452421256259362, 0.1452421256259362, 0.1951367199012487, 0.1951367199012487, 0.1951367199012487, 0.3077901577359027, 0.3077901577359027, 0.3077901577359027, 0.2726679217583904, 0.2726679217583904, 0.2726679217583904, 0.231217403521083, 0.231217403521083, 0.231217403521083, 0.10776184349570739, 0.10776184349570739, 0.10776184349570739, 0.3806483733356978, 0.3806483733356978, 0.3806483733356978, 0.040239879305050796, 0.040239879305050796, 0.040239879305050796, 0.24308512607556598, 0.24308512607556598, 0.24308512607556598, 0.7498324459585985, 0.7498324459585985, 0.7498324459585985, 0.210064650053156, 0.210064650053156, 0.210064650053156, 0.7087617889642852, 0.7087617889642852, 0.7087617889642852, 0.08903071009641739, 0.08903071009641739, 0.08903071009641739, 0.10201151836213818, 0.10201151836213818, 0.10201151836213818, 0.11334756326147022, 0.11334756326147022, 0.11334756326147022, 0.10709654389765533, 0.10709654389765533, 0.10709654389765533, 0.579620100508919, 0.579620100508919, 0.579620100508919, 0.2511547881625211, 0.2511547881625211, 0.2511547881625211, 0.4173495118813435, 0.4173495118813435, 0.4173495118813435, 0.5239598893695387, 0.5239598893695387, 0.5239598893695387, 0.44087631831103824, 0.44087631831103824, 0.44087631831103824, 0.31853320836073884, 0.31853320836073884, 0.31853320836073884, 0.21783577621390415, 0.21783577621390415, 0.21783577621390415, 0.2403680316045569, 0.2403680316045569, 0.2403680316045569, 0.24189892213986808, 0.24189892213986808, 0.24189892213986808, 0.25695508611717166, 0.25695508611717166, 0.25695508611717166, 0.2300944753994837, 0.2300944753994837, 0.2300944753994837, 0.21574483436551184, 0.21574483436551184, 0.21574483436551184, 0.20857962943539932, 0.20857962943539932, 0.20857962943539932, 0.2025610543662848, 0.2025610543662848, 0.2025610543662848, 0.14161481397062758, 0.14161481397062758, 0.14161481397062758, 0.16625459950749932, 0.16625459950749932, 0.16625459950749932, 0.1544448650941218, 0.1544448650941218, 0.1544448650941218, 0.1672504604636983, 0.1672504604636983, 0.1672504604636983, 0.2133689132562937, 0.2133689132562937, 0.2133689132562937, 0.09460690029128616, 0.09460690029128616, 0.09460690029128616, 0.22574631973746873, 0.22574631973746873, 0.22574631973746873, 0.18638543822303633, 0.18638543822303633, 0.18638543822303633, 0.17747469817707684, 0.17747469817707684, 0.17747469817707684, 0.0804571517876137, 0.0804571517876137, 0.0804571517876137, 0.1421888194310984, 0.1421888194310984, 0.1421888194310984, 0.10054025840599512, 0.10054025840599512, 0.10054025840599512]}, "mutation_prompt": null}
{"id": "338e7a10-7e03-4022-b016-b968413f4a05", "solution": "import numpy as np\n\nclass HybridPSO_ADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 10 + int(np.sqrt(self.dim))\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        particles = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.zeros((self.num_particles, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.num_particles, np.inf)\n        \n        global_best_position = None\n        global_best_score = np.inf\n        \n        eval_count = 0\n        \n        while eval_count < self.budget:\n            # Evaluate current particles\n            for i in range(self.num_particles):\n                score = func(particles[i])\n                eval_count += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = particles[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = particles[i]\n\n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.num_particles, self.dim))\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - particles) +\n                          self.c2 * r2 * (global_best_position - particles))\n            particles += velocities\n            \n            # Apply bounds\n            particles = np.clip(particles, self.lb, self.ub)\n            \n            # Adaptive Differential Mutation\n            for i in range(self.num_particles):\n                if eval_count >= self.budget:\n                    break\n                indices = np.random.choice(self.num_particles, 3, replace=False)\n                if i in indices:\n                    continue\n                a, b, c = personal_best_positions[indices]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, particles[i])\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < personal_best_scores[i]:\n                    personal_best_scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                if trial_score < global_best_score:\n                    global_best_score = trial_score\n                    global_best_position = trial\n                \n        return global_best_position, global_best_score", "name": "HybridPSO_ADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation to explore and exploit diverse areas of the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3c0c9476-63cc-4bc8-99ff-a81e64845c57", "metadata": {"aucs": [0.9218168920799484, 0.9218168920799484, 0.9218168920799484, 0.9307968998308853, 0.9307968998308853, 0.9307968998308853, 0.9261459226206086, 0.9261459226206086, 0.9261459226206086, 0.8539398036379152, 0.8539398036379152, 0.8539398036379152, 0.8403141974725528, 0.8403141974725528, 0.8403141974725528, 0.018725422039651995, 0.018725422039651995, 0.018725422039651995, 0.14456422054669715, 0.14456422054669715, 0.14456422054669715, 0.15902178490825936, 0.15902178490825936, 0.15902178490825936, 0.1435326629776289, 0.1435326629776289, 0.1435326629776289, 0.1104496100873208, 0.1104496100873208, 0.1104496100873208, 0.11376449789476306, 0.11376449789476306, 0.11376449789476306, 0.09570592800176769, 0.09570592800176769, 0.09570592800176769, 0.9875908423999351, 0.9875908423999351, 0.9875908423999351, 0.9920910940323256, 0.9920910940323256, 0.9920910940323256, 0.9914574045116882, 0.9914574045116882, 0.9914574045116882, 0.8483319708242689, 0.8483319708242689, 0.8483319708242689, 0.8480874896570081, 0.8480874896570081, 0.8480874896570081, 0.843665218560409, 0.843665218560409, 0.843665218560409, 0.9225554989228744, 0.9225554989228744, 0.9225554989228744, 0.887352891080419, 0.887352891080419, 0.887352891080419, 0.17471772653482553, 0.17471772653482553, 0.17471772653482553, 0.7093526383279529, 0.7093526383279529, 0.7093526383279529, 0.13279530810375728, 0.13279530810375728, 0.13279530810375728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4308512893557226, 0.4308512893557226, 0.4308512893557226, 0.6847958305436996, 0.6847958305436996, 0.6847958305436996, 0.2040635495066475, 0.2040635495066475, 0.2040635495066475, 0.09454670987194258, 0.09454670987194258, 0.09454670987194258, 0.08252922629152748, 0.08252922629152748, 0.08252922629152748, 0.04723303233142584, 0.04723303233142584, 0.04723303233142584, 0.1452421256259362, 0.1452421256259362, 0.1452421256259362, 0.1951367199012487, 0.1951367199012487, 0.1951367199012487, 0.3077901577359027, 0.3077901577359027, 0.3077901577359027, 0.2726679217583904, 0.2726679217583904, 0.2726679217583904, 0.231217403521083, 0.231217403521083, 0.231217403521083, 0.10776184349570739, 0.10776184349570739, 0.10776184349570739, 0.3806483733356978, 0.3806483733356978, 0.3806483733356978, 0.040239879305050796, 0.040239879305050796, 0.040239879305050796, 0.24308512607556598, 0.24308512607556598, 0.24308512607556598, 0.7498324459585985, 0.7498324459585985, 0.7498324459585985, 0.210064650053156, 0.210064650053156, 0.210064650053156, 0.7087617889642852, 0.7087617889642852, 0.7087617889642852, 0.08903071009641739, 0.08903071009641739, 0.08903071009641739, 0.10201151836213818, 0.10201151836213818, 0.10201151836213818, 0.11334756326147022, 0.11334756326147022, 0.11334756326147022, 0.10709654389765533, 0.10709654389765533, 0.10709654389765533, 0.579620100508919, 0.579620100508919, 0.579620100508919, 0.2511547881625211, 0.2511547881625211, 0.2511547881625211, 0.4173495118813435, 0.4173495118813435, 0.4173495118813435, 0.5239598893695387, 0.5239598893695387, 0.5239598893695387, 0.44087631831103824, 0.44087631831103824, 0.44087631831103824, 0.31853320836073884, 0.31853320836073884, 0.31853320836073884, 0.21783577621390415, 0.21783577621390415, 0.21783577621390415, 0.2403680316045569, 0.2403680316045569, 0.2403680316045569, 0.24189892213986808, 0.24189892213986808, 0.24189892213986808, 0.25695508611717166, 0.25695508611717166, 0.25695508611717166, 0.2300944753994837, 0.2300944753994837, 0.2300944753994837, 0.21574483436551184, 0.21574483436551184, 0.21574483436551184, 0.20857962943539932, 0.20857962943539932, 0.20857962943539932, 0.2025610543662848, 0.2025610543662848, 0.2025610543662848, 0.14161481397062758, 0.14161481397062758, 0.14161481397062758, 0.16625459950749932, 0.16625459950749932, 0.16625459950749932, 0.1544448650941218, 0.1544448650941218, 0.1544448650941218, 0.1672504604636983, 0.1672504604636983, 0.1672504604636983, 0.2133689132562937, 0.2133689132562937, 0.2133689132562937, 0.09460690029128616, 0.09460690029128616, 0.09460690029128616, 0.22574631973746873, 0.22574631973746873, 0.22574631973746873, 0.18638543822303633, 0.18638543822303633, 0.18638543822303633, 0.17747469817707684, 0.17747469817707684, 0.17747469817707684, 0.0804571517876137, 0.0804571517876137, 0.0804571517876137, 0.1421888194310984, 0.1421888194310984, 0.1421888194310984, 0.10054025840599512, 0.10054025840599512, 0.10054025840599512]}, "mutation_prompt": null}
