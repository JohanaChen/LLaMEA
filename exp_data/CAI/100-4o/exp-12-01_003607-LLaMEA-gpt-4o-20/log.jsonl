{"id": "15b48278-9741-4ecc-a2e5-9a0e66b04c88", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(50, self.budget // 10)\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.num_evaluations = 0\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            if self.num_evaluations < self.budget:\n                self.fitness[i] = func(self.population[i])\n                self.num_evaluations += 1\n            else:\n                break\n\n        while self.num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.num_evaluations >= self.budget:\n                    break\n\n                # Mutation and Crossover (Differential Evolution)\n                a, b, c = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                mutant = self.population[a] + self.f * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, self.population[i])\n\n                # Evaluate Trial Vector\n                trial_fitness = func(trial)\n                self.num_evaluations += 1\n\n                # Adaptive Local Search\n                if trial_fitness < self.fitness[i]:\n                    step_size = 0.1 * (self.upper_bound - self.lower_bound)\n                    local_search_vector = trial + step_size * np.random.uniform(-1, 1, self.dim)\n                    local_search_vector = np.clip(local_search_vector, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_search_vector)\n                    self.num_evaluations += 1\n                    if local_fitness < trial_fitness:\n                        trial, trial_fitness = local_search_vector, local_fitness\n\n                # Selection\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]", "name": "HybridDEALS", "description": "A hybrid metaheuristic combining differential evolution and adaptive local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.2617931769541239, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.5815683447505503, 0.5537282689818804, 0.5523486415072725, 0.5636952316800652, 0.5825314814103699, 0.5805876658964819, 0.6241608985072429, 0.5781372425801146, 0.5912531797300702, 0.32237147667516, 0.31279449576119167, 0.3090698189131682, 0.298777520526573, 0.27941557412713036, 0.282283199435551, 0.30192260964035256, 0.28175933148644494, 0.3212747038911664, 0.10096623358261803, 0.10877591447416401, 0.08919580507491298, 0.09420152509113011, 0.09225948546788443, 0.09370220214557445, 0.10496765321353396, 0.08174703624005941, 0.08875660591928758, 0.07363301398927669, 0.09208916241688092, 0.09367035059627649, 0.09687379045113942, 0.08125427937023999, 0.09360478528824456, 0.08512373388927807, 0.0831642555721046, 0.08946512774661619, 0.9425915653747244, 0.9314183670584173, 0.9213686641386545, 0.9279481457699654, 0.9162526908805914, 0.9875432277877249, 0.8945880286226873, 0.9263580597442568, 0.9675360061258285, 0.256604499969475, 0.24047125502171773, 0.24434734532233837, 0.28080323039527, 0.25442352399355117, 0.2637479879150191, 0.24479869018558298, 0.2588490898047635, 0.2627787533408191, 0.36553431908155554, 0.5564167739988066, 0.4077497564487369, 0.541525959241824, 0.5715124056649988, 0.5361266688893256, 0.4542278851195144, 0.48014055225501606, 0.48747901432270524, 0.18533129291128803, 0.17147890673168076, 0.19459243616635025, 0.1674144735019123, 0.16860621694842703, 0.1854781021226708, 0.1753585011640567, 0.17102104048390387, 0.19345195176203656, 0.1375868561850503, 0.23458560301227693, 0.15883750558339094, 0.1787100182703374, 0.18337999599110388, 0.21143821595340617, 0.15940568071027061, 0.18869170799620516, 0.17224887077133477, 0.10002344618240677, 0.12331718824884097, 0.11667670025994681, 0.11369191271624546, 0.10614263166426541, 0.0980008613177652, 0.11101998290576831, 0.07351871648112795, 0.11571933067268403, 0.24127851706496428, 0.25300814730444954, 0.2617532917283013, 0.23370570362742205, 0.23415632149550214, 0.2220884057685033, 0.26757704584834296, 0.2523169062337346, 0.24872911266062459, 0.03125503955871045, 0.02766526884101239, 0.01315208148510083, 0.025291446873502377, 0.03573212100226597, 0.02096640912783554, 0.049603125973029294, 0.03301620919259407, 0.01565064702342789, 0.13728211077355168, 0.14162084339249992, 0.15030976575206967, 0.14281548803410538, 0.1434855999823409, 0.1466509168460539, 0.13732781073468536, 0.13822026505549057, 0.14014689516931123, 0.4483251952106332, 0.47125191164019065, 0.4575823126656796, 0.4618760848077733, 0.4422532259812769, 0.48461077415154385, 0.4471867084568265, 0.4445301457220723, 0.44060670208023056, 0.09476074443382654, 0.09517900562350312, 0.08320498536293675, 0.08530721002028108, 0.0692519058902975, 0.08757003651086703, 0.09135685583251396, 0.09385764635251903, 0.07770119695408062, 0.3046234064013196, 0.16449464378954803, 0.3171795428653732, 0.14998390550293583, 0.23491652500172167, 0.14041579384290015, 0.1414941970557626, 0.17178624950499488, 0.1420265172570231, 0.2660004757328851, 0.2538965081738467, 0.27573312732421795, 0.25716308760849804, 0.254507460315364, 0.25690449220247213, 0.28538261290691314, 0.27616146055593616, 0.2729564453579846, 0.21934855915155715, 0.2023082038359888, 0.1919480731365386, 0.1999579191698423, 0.18235955443258212, 0.1929634094367335, 0.22286390480141094, 0.2161069945626911, 0.2138338243760194, 0.19257890954455148, 0.22322784315238275, 0.1925409219652887, 0.19503381508076745, 0.18661118209820537, 0.17357914230887395, 0.18554441634037822, 0.18090951987612003, 0.18900236306424334, 0.17365831183185287, 0.17712698520639714, 0.17890442717285404, 0.1730896572334275, 0.188397544952426, 0.18598343029835018, 0.17101365158642678, 0.17784814189526166, 0.1917541416910028, 0.6222751680942558, 0.48444942402955915, 0.4261295074430004, 0.5202795938871477, 0.5845600972398612, 0.40143154342477605, 0.16214602914429632, 0.2818261513367256, 0.5409543900901908, 0.5160341524583293, 0.47569393214299693, 0.4458321563718296, 0.4738473596157089, 0.1785523068872824, 0.2475477682678583, 0.2082482988705756, 0.6451573748337344, 0.2018576880611136, 0.17876248417181884, 0.1814736109720746, 0.17957713188856128, 0.19293828680854308, 0.18965478058312524, 0.17708624962188313, 0.18383765743868963, 0.18926092800740457, 0.17143505999994557, 0.07279147923670504, 0.07059833634435986, 0.067166450088881, 0.0718958212049089, 0.06792852030020913, 0.06897101336105338, 0.07442293358631902, 0.07533861674822528, 0.07202321646182153]}, "mutation_prompt": null}
{"id": "3fccaeb0-1fce-408f-bb40-b1b22b8660c0", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(50, self.budget // 10)\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.num_evaluations = 0\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            if self.num_evaluations < self.budget:\n                self.fitness[i] = func(self.population[i])\n                self.num_evaluations += 1\n            else:\n                break\n\n        while self.num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.num_evaluations >= self.budget:\n                    break\n\n                # Mutation and Crossover (Differential Evolution)\n                a, b, c = np.random.choice([x for x in range(self.population_size) if x != i], 3, replace=False)\n                mutant = self.population[a] + self.f * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, self.population[i])\n\n                # Evaluate Trial Vector\n                trial_fitness = func(trial)\n                self.num_evaluations += 1\n\n                # Adaptive Local Search\n                if trial_fitness < self.fitness[i]:\n                    step_size = 0.1 * (self.upper_bound - self.lower_bound)\n                    local_search_vector = trial + step_size * np.random.uniform(-1, 1, self.dim)\n                    local_search_vector = np.clip(local_search_vector, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_search_vector)\n                    self.num_evaluations += 1\n                    if local_fitness < trial_fitness:\n                        trial, trial_fitness = local_search_vector, local_fitness\n\n                # Selection\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]", "name": "HybridDEALS", "description": "A hybrid metaheuristic combining differential evolution and adaptive local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15b48278-9741-4ecc-a2e5-9a0e66b04c88", "metadata": {"aucs": [0.5815683447505503, 0.5537282689818804, 0.5523486415072725, 0.5636952316800652, 0.5825314814103699, 0.5805876658964819, 0.6241608985072429, 0.5781372425801146, 0.5912531797300702, 0.32237147667516, 0.31279449576119167, 0.3090698189131682, 0.298777520526573, 0.27941557412713036, 0.282283199435551, 0.30192260964035256, 0.28175933148644494, 0.3212747038911664, 0.10096623358261803, 0.10877591447416401, 0.08919580507491298, 0.09420152509113011, 0.09225948546788443, 0.09370220214557445, 0.10496765321353396, 0.08174703624005941, 0.08875660591928758, 0.07363301398927669, 0.09208916241688092, 0.09367035059627649, 0.09687379045113942, 0.08125427937023999, 0.09360478528824456, 0.08512373388927807, 0.0831642555721046, 0.08946512774661619, 0.9425915653747244, 0.9314183670584173, 0.9213686641386545, 0.9279481457699654, 0.9162526908805914, 0.9875432277877249, 0.8945880286226873, 0.9263580597442568, 0.9675360061258285, 0.256604499969475, 0.24047125502171773, 0.24434734532233837, 0.28080323039527, 0.25442352399355117, 0.2637479879150191, 0.24479869018558298, 0.2588490898047635, 0.2627787533408191, 0.36553431908155554, 0.5564167739988066, 0.4077497564487369, 0.541525959241824, 0.5715124056649988, 0.5361266688893256, 0.4542278851195144, 0.48014055225501606, 0.48747901432270524, 0.18533129291128803, 0.17147890673168076, 0.19459243616635025, 0.1674144735019123, 0.16860621694842703, 0.1854781021226708, 0.1753585011640567, 0.17102104048390387, 0.19345195176203656, 0.1375868561850503, 0.23458560301227693, 0.15883750558339094, 0.1787100182703374, 0.18337999599110388, 0.21143821595340617, 0.15940568071027061, 0.18869170799620516, 0.17224887077133477, 0.10002344618240677, 0.12331718824884097, 0.11667670025994681, 0.11369191271624546, 0.10614263166426541, 0.0980008613177652, 0.11101998290576831, 0.07351871648112795, 0.11571933067268403, 0.24127851706496428, 0.25300814730444954, 0.2617532917283013, 0.23370570362742205, 0.23415632149550214, 0.2220884057685033, 0.26757704584834296, 0.2523169062337346, 0.24872911266062459, 0.03125503955871045, 0.02766526884101239, 0.01315208148510083, 0.025291446873502377, 0.03573212100226597, 0.02096640912783554, 0.049603125973029294, 0.03301620919259407, 0.01565064702342789, 0.13728211077355168, 0.14162084339249992, 0.15030976575206967, 0.14281548803410538, 0.1434855999823409, 0.1466509168460539, 0.13732781073468536, 0.13822026505549057, 0.14014689516931123, 0.4483251952106332, 0.47125191164019065, 0.4575823126656796, 0.4618760848077733, 0.4422532259812769, 0.48461077415154385, 0.4471867084568265, 0.4445301457220723, 0.44060670208023056, 0.09476074443382654, 0.09517900562350312, 0.08320498536293675, 0.08530721002028108, 0.0692519058902975, 0.08757003651086703, 0.09135685583251396, 0.09385764635251903, 0.07770119695408062, 0.3046234064013196, 0.16449464378954803, 0.3171795428653732, 0.14998390550293583, 0.23491652500172167, 0.14041579384290015, 0.1414941970557626, 0.17178624950499488, 0.1420265172570231, 0.2660004757328851, 0.2538965081738467, 0.27573312732421795, 0.25716308760849804, 0.254507460315364, 0.25690449220247213, 0.28538261290691314, 0.27616146055593616, 0.2729564453579846, 0.21934855915155715, 0.2023082038359888, 0.1919480731365386, 0.1999579191698423, 0.18235955443258212, 0.1929634094367335, 0.22286390480141094, 0.2161069945626911, 0.2138338243760194, 0.19257890954455148, 0.22322784315238275, 0.1925409219652887, 0.19503381508076745, 0.18661118209820537, 0.17357914230887395, 0.18554441634037822, 0.18090951987612003, 0.18900236306424334, 0.17365831183185287, 0.17712698520639714, 0.17890442717285404, 0.1730896572334275, 0.188397544952426, 0.18598343029835018, 0.17101365158642678, 0.17784814189526166, 0.1917541416910028, 0.6222751680942558, 0.48444942402955915, 0.4261295074430004, 0.5202795938871477, 0.5845600972398612, 0.40143154342477605, 0.16214602914429632, 0.2818261513367256, 0.5409543900901908, 0.5160341524583293, 0.47569393214299693, 0.4458321563718296, 0.4738473596157089, 0.1785523068872824, 0.2475477682678583, 0.2082482988705756, 0.6451573748337344, 0.2018576880611136, 0.17876248417181884, 0.1814736109720746, 0.17957713188856128, 0.19293828680854308, 0.18965478058312524, 0.17708624962188313, 0.18383765743868963, 0.18926092800740457, 0.17143505999994557, 0.07279147923670504, 0.07059833634435986, 0.067166450088881, 0.0718958212049089, 0.06792852030020913, 0.06897101336105338, 0.07442293358631902, 0.07533861674822528, 0.07202321646182153]}, "mutation_prompt": null}
