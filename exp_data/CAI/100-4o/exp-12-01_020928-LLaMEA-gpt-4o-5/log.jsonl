{"id": "7ff8c68d-d721-489b-97ca-682b28fbe505", "solution": "import numpy as np\n\nclass CoEvoSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.velocity = np.zeros((self.pop_size, dim))\n        self.personal_best = np.copy(self.population)\n        self.personal_best_value = np.full(self.pop_size, np.inf)\n        self.global_best = None\n        self.global_best_value = np.inf\n        self.f_evals = 0\n        self.f_weight = 0.8\n        self.c_cognitive = 2.0\n        self.c_social = 2.0\n        self.c_mutation = 0.9\n\n    def __call__(self, func):\n        while self.f_evals < self.budget:\n            # Evaluate population\n            for i in range(self.pop_size):\n                if self.f_evals >= self.budget:\n                    break\n                value = func(self.population[i])\n                self.f_evals += 1\n\n                # Update personal best\n                if value < self.personal_best_value[i]:\n                    self.personal_best_value[i] = value\n                    self.personal_best[i] = self.population[i]\n\n                # Update global best\n                if value < self.global_best_value:\n                    self.global_best_value = value\n                    self.global_best = self.population[i]\n\n            # Evolutionary strategy: Differential Mutation\n            indices = np.arange(self.pop_size)\n            for i in range(self.pop_size):\n                if self.f_evals >= self.budget:\n                    break\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = np.clip(self.population[a] + self.f_weight * (self.population[b] - self.population[c]), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.c_mutation\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n                value = func(trial)\n                self.f_evals += 1\n\n                if value < self.personal_best_value[i]:\n                    self.population[i] = trial\n                    self.personal_best_value[i] = value\n                    self.personal_best[i] = trial\n                    if value < self.global_best_value:\n                        self.global_best_value = value\n                        self.global_best = trial\n\n            # Swarm strategy: Update velocity and position\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            self.velocity = (self.velocity\n                             + self.c_cognitive * r1 * (self.personal_best - self.population)\n                             + self.c_social * r2 * (self.global_best - self.population))\n            self.population = np.clip(self.population + self.velocity, -5.0, 5.0)\n\n        return self.global_best\n\n# Example usage:\n# optimizer = CoEvoSwarmOptimizer(budget=1000, dim=10)\n# best_solution = optimizer(some_black_box_function)", "name": "CoEvoSwarmOptimizer", "description": "A co-evolutionary swarm-based metaheuristic algorithm combining differential evolution and particle swarm optimization for robust exploration and exploitation in black box optimization.", "configspace": "", "generation": 0, "fitness": 0.130889722070042, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.1741379954961949, 0.1797291279787725, 0.18020952005214552, 0.1835978665979754, 0.2523940582243225, 0.19501741409585516, 0.20549443690974856, 0.1874435003729441, 0.16666798947263195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045739077743994105, 0.0404405877056333, 0.05338221734104642, 0.058502600172875674, 0.053392792030327096, 0.04978191155369638, 0.05740708004176709, 0.050554098282081794, 0.042036705846241196, 0.03254558547017983, 0.03520271013557541, 0.02627227824394629, 0.04045752654407864, 0.037720159397682806, 0.04616971179311369, 0.030970479726819544, 0.03826151517817522, 0.04468014082751992, 0.9889352236561342, 0.9887586690709318, 0.9914914232669481, 0.9893516994244866, 0.9924077006766134, 0.9863353823634342, 0.9887038440900132, 0.9878514823350886, 0.991216135426688, 0.05406959904483433, 0.09398660357313071, 0.057975383879404374, 0.09230200419446077, 0.08683249208749133, 0.0991800441689813, 0.10747616627335121, 0.05144906573724184, 0.04888774567858467, 0.1484860083654116, 0.09892293739710545, 0.11640218169111427, 0.12577961410205374, 0.11309763421699137, 0.16284818375783416, 0.12197364029385394, 0.11955908203205168, 0.16477585456597732, 9.999999999998899e-05, 0.03515380723678174, 0.0038223777354214894, 0.01492726708713199, 0.027331211519986964, 0.027104538437625836, 0.003845853262967047, 0.017522021678733846, 0.03200794364556858, 0.01796947708589758, 0.008683346729660646, 0.009817481487285895, 9.999999999998899e-05, 9.999999999998899e-05, 0.006696108784991717, 9.999999999998899e-05, 9.999999999998899e-05, 0.06805210514504545, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03465333537795379, 0.010177005519916738, 0.057246689403814166, 0.04519634412962659, 9.999999999998899e-05, 0.037378925618911873, 0.051106844802895623, 0.01323989088000177, 0.0045454105031769165, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038411566568063993, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02066217638579093, 9.999999999998899e-05, 0.02383973126703476, 0.22754936498004785, 0.19765788646874316, 0.2241448328055532, 0.21207115378671249, 0.20692635307371265, 0.23882910324980855, 0.21106792104475414, 0.19208978823570666, 0.22446410706125974, 0.061915476070451, 0.08235289699944137, 0.06084442062847373, 0.04544758534944737, 0.05400255271631138, 0.05933574476326775, 0.04276558839692246, 0.03582586988899361, 0.05032664000446452, 0.14401379681031745, 0.14231585818892578, 0.13958584686445852, 0.14765187044449068, 0.18853185936374606, 0.1214401534298386, 0.16600801702386014, 0.1597907645006601, 0.1961894966888349, 0.17526608440903113, 0.15595348654887398, 0.18869647954619573, 0.147817391507703, 0.19146430637143885, 0.19466682410361213, 0.16704020698520272, 0.2201030422439133, 0.15941027084133164, 0.10955397580282966, 0.15534159862354213, 0.12499178148719226, 0.0971970186995521, 0.11627238206251478, 0.10538351686675396, 0.1013525648266641, 0.11849365205974716, 0.12172825991214087, 0.14400799928643393, 0.1645503416826397, 0.1696983345550208, 0.14915190127315314, 0.19668031858389823, 0.17502065189639238, 0.16431214696004048, 0.13823515799070518, 0.17477273695169337, 0.15774505913599657, 0.1383264020827044, 0.159702845113743, 0.14888582789466487, 0.16257100024766458, 0.1380370099050371, 0.13823955316634107, 0.1489659955863163, 0.14695202879624958, 0.1856528084824387, 0.16657072419509333, 0.34487725054317175, 0.1630423844620913, 0.12945542865582504, 0.16285294132781314, 0.10206932965272641, 0.1527311653551402, 0.2155832939349983, 0.0908024662687631, 0.16305288711013766, 0.11051300833244004, 0.13538371983052744, 0.1634620850063564, 0.16489484540017618, 0.12855742688161842, 0.184564818307432, 0.18818316348176523, 0.18249962446906443, 0.19681862749435763, 0.18663821535968705, 0.1813472770826028, 0.1896770838644214, 0.18956020199509427, 0.19078127369574172, 0.17726051357626182, 0.19420842947493655, 0.05720128615681497, 0.043971882871418844, 0.07350293921627582, 0.046527607098696744, 0.057600628053443126, 0.04486166623244714, 0.05257825309098807, 0.05394229780183046, 0.045233370531750694]}, "mutation_prompt": null}
{"id": "2ef882da-155f-40a0-bf0d-9a7af3597628", "solution": "import numpy as np\n\nclass CoEvoSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.velocity = np.zeros((self.pop_size, dim))\n        self.personal_best = np.copy(self.population)\n        self.personal_best_value = np.full(self.pop_size, np.inf)\n        self.global_best = None\n        self.global_best_value = np.inf\n        self.f_evals = 0\n        self.f_weight = 0.8\n        self.c_cognitive = 2.0\n        self.c_social = 2.0\n        self.c_mutation = 0.9\n\n    def __call__(self, func):\n        while self.f_evals < self.budget:\n            # Evaluate population\n            for i in range(self.pop_size):\n                if self.f_evals >= self.budget:\n                    break\n                value = func(self.population[i])\n                self.f_evals += 1\n\n                # Update personal best\n                if value < self.personal_best_value[i]:\n                    self.personal_best_value[i] = value\n                    self.personal_best[i] = self.population[i]\n\n                # Update global best\n                if value < self.global_best_value:\n                    self.global_best_value = value\n                    self.global_best = self.population[i]\n\n            # Evolutionary strategy: Differential Mutation\n            indices = np.arange(self.pop_size)\n            for i in range(self.pop_size):\n                if self.f_evals >= self.budget:\n                    break\n                a, b, c = np.random.choice(indices[indices != i], 3, replace=False)\n                mutant = np.clip(self.population[a] + self.f_weight * (self.population[b] - self.population[c]), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.c_mutation\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n                value = func(trial)\n                self.f_evals += 1\n\n                if value < self.personal_best_value[i]:\n                    self.population[i] = trial\n                    self.personal_best_value[i] = value\n                    self.personal_best[i] = trial\n                    if value < self.global_best_value:\n                        self.global_best_value = value\n                        self.global_best = trial\n\n            # Swarm strategy: Update velocity and position\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            self.velocity = (self.velocity\n                             + self.c_cognitive * r1 * (self.personal_best - self.population)\n                             + self.c_social * r2 * (self.global_best - self.population))\n            self.population = np.clip(self.population + self.velocity, -5.0, 5.0)\n\n        return self.global_best\n\n# Example usage:\n# optimizer = CoEvoSwarmOptimizer(budget=1000, dim=10)\n# best_solution = optimizer(some_black_box_function)", "name": "CoEvoSwarmOptimizer", "description": "A co-evolutionary swarm-based metaheuristic algorithm combining differential evolution and particle swarm optimization for robust exploration and exploitation in black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ff8c68d-d721-489b-97ca-682b28fbe505", "metadata": {"aucs": [0.1741379954961949, 0.1797291279787725, 0.18020952005214552, 0.1835978665979754, 0.2523940582243225, 0.19501741409585516, 0.20549443690974856, 0.1874435003729441, 0.16666798947263195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045739077743994105, 0.0404405877056333, 0.05338221734104642, 0.058502600172875674, 0.053392792030327096, 0.04978191155369638, 0.05740708004176709, 0.050554098282081794, 0.042036705846241196, 0.03254558547017983, 0.03520271013557541, 0.02627227824394629, 0.04045752654407864, 0.037720159397682806, 0.04616971179311369, 0.030970479726819544, 0.03826151517817522, 0.04468014082751992, 0.9889352236561342, 0.9887586690709318, 0.9914914232669481, 0.9893516994244866, 0.9924077006766134, 0.9863353823634342, 0.9887038440900132, 0.9878514823350886, 0.991216135426688, 0.05406959904483433, 0.09398660357313071, 0.057975383879404374, 0.09230200419446077, 0.08683249208749133, 0.0991800441689813, 0.10747616627335121, 0.05144906573724184, 0.04888774567858467, 0.1484860083654116, 0.09892293739710545, 0.11640218169111427, 0.12577961410205374, 0.11309763421699137, 0.16284818375783416, 0.12197364029385394, 0.11955908203205168, 0.16477585456597732, 9.999999999998899e-05, 0.03515380723678174, 0.0038223777354214894, 0.01492726708713199, 0.027331211519986964, 0.027104538437625836, 0.003845853262967047, 0.017522021678733846, 0.03200794364556858, 0.01796947708589758, 0.008683346729660646, 0.009817481487285895, 9.999999999998899e-05, 9.999999999998899e-05, 0.006696108784991717, 9.999999999998899e-05, 9.999999999998899e-05, 0.06805210514504545, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03465333537795379, 0.010177005519916738, 0.057246689403814166, 0.04519634412962659, 9.999999999998899e-05, 0.037378925618911873, 0.051106844802895623, 0.01323989088000177, 0.0045454105031769165, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038411566568063993, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02066217638579093, 9.999999999998899e-05, 0.02383973126703476, 0.22754936498004785, 0.19765788646874316, 0.2241448328055532, 0.21207115378671249, 0.20692635307371265, 0.23882910324980855, 0.21106792104475414, 0.19208978823570666, 0.22446410706125974, 0.061915476070451, 0.08235289699944137, 0.06084442062847373, 0.04544758534944737, 0.05400255271631138, 0.05933574476326775, 0.04276558839692246, 0.03582586988899361, 0.05032664000446452, 0.14401379681031745, 0.14231585818892578, 0.13958584686445852, 0.14765187044449068, 0.18853185936374606, 0.1214401534298386, 0.16600801702386014, 0.1597907645006601, 0.1961894966888349, 0.17526608440903113, 0.15595348654887398, 0.18869647954619573, 0.147817391507703, 0.19146430637143885, 0.19466682410361213, 0.16704020698520272, 0.2201030422439133, 0.15941027084133164, 0.10955397580282966, 0.15534159862354213, 0.12499178148719226, 0.0971970186995521, 0.11627238206251478, 0.10538351686675396, 0.1013525648266641, 0.11849365205974716, 0.12172825991214087, 0.14400799928643393, 0.1645503416826397, 0.1696983345550208, 0.14915190127315314, 0.19668031858389823, 0.17502065189639238, 0.16431214696004048, 0.13823515799070518, 0.17477273695169337, 0.15774505913599657, 0.1383264020827044, 0.159702845113743, 0.14888582789466487, 0.16257100024766458, 0.1380370099050371, 0.13823955316634107, 0.1489659955863163, 0.14695202879624958, 0.1856528084824387, 0.16657072419509333, 0.34487725054317175, 0.1630423844620913, 0.12945542865582504, 0.16285294132781314, 0.10206932965272641, 0.1527311653551402, 0.2155832939349983, 0.0908024662687631, 0.16305288711013766, 0.11051300833244004, 0.13538371983052744, 0.1634620850063564, 0.16489484540017618, 0.12855742688161842, 0.184564818307432, 0.18818316348176523, 0.18249962446906443, 0.19681862749435763, 0.18663821535968705, 0.1813472770826028, 0.1896770838644214, 0.18956020199509427, 0.19078127369574172, 0.17726051357626182, 0.19420842947493655, 0.05720128615681497, 0.043971882871418844, 0.07350293921627582, 0.046527607098696744, 0.057600628053443126, 0.04486166623244714, 0.05257825309098807, 0.05394229780183046, 0.045233370531750694]}, "mutation_prompt": null}
