{"id": "8463e841-280d-454d-b3b8-ec372b080b45", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 10 * dim\n        self.mutation_factor = 0.5  # Adaptively adjusted\n        self.crossover_rate = 0.9   # Adaptively adjusted\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.pop_size, dim)\n        )\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.evaluations = 0\n\n    def chaos_local_search(self, solution):\n        # Introduce chaotic sequence for local perturbation\n        chaotic_seq = np.sin(np.linspace(0, np.pi, self.dim))\n        perturbation = chaotic_seq * (self.upper_bound - self.lower_bound) * 0.01\n        return np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        # Initial fitness evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < self.best_fitness:\n                self.best_fitness = self.fitness[i]\n                self.best_solution = self.population[i].copy()\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                # DE/rand/1/bin mutation strategy\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Binomial crossover\n                trial = np.where(\n                    np.random.rand(self.dim) < self.crossover_rate,\n                    mutant,\n                    self.population[i]\n                )\n\n                # Evaluate trial vector and apply chaos-based local search if beneficial\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                else:\n                    # Chaotic local search\n                    local_trial = self.chaos_local_search(trial)\n                    local_fitness = func(local_trial)\n                    self.evaluations += 1\n                    if local_fitness < self.fitness[i]:\n                        self.population[i] = local_trial\n                        self.fitness[i] = local_fitness\n                        if local_fitness < self.best_fitness:\n                            self.best_fitness = local_fitness\n                            self.best_solution = local_trial\n\n                # Adaptively adjust mutation factor and crossover rate\n                self.mutation_factor = 0.5 + 0.3 * np.random.rand()\n                self.crossover_rate = 0.9 * (1 - self.evaluations / self.budget)\n\n        return self.best_solution", "name": "AdaptiveDE", "description": "A multi-strategy adaptive differential evolution with chaotic local search for enhanced exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.20462381669882176, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.5891457415994386, 0.5774528881507708, 0.5731098945415118, 0.5821872248755997, 0.5911952913485754, 0.6073728638795461, 0.6147164304558526, 0.5201531139827915, 0.6071343880543807, 0.3100822473258814, 0.30222132840716864, 0.3049545550008499, 0.3068908555543868, 0.3138775153676596, 0.2943790237901369, 0.3083269623256285, 0.3080208017728767, 0.32275043705413964, 0.1198477921914699, 0.1343700487894206, 0.11878619730302165, 0.12825927343938803, 0.12048460480003453, 0.13333554116874524, 0.10356617692892145, 0.13691196867254296, 0.14599592749997714, 0.09607741802728864, 0.1079771646748462, 0.1087892168982082, 0.12128557655004346, 0.12234116530289973, 0.10277009016497818, 0.0992058719931268, 0.10159474631531762, 0.11381854128913271, 0.9070561439188141, 0.9098217009021258, 0.8597758046505564, 0.9134728582924184, 0.9473804911605785, 0.967290203504376, 0.9221684745427866, 0.9338936065521253, 0.9318065507054877, 0.1816070534393447, 0.17950055303771628, 0.18652104263955493, 0.19233336461915929, 0.19937488291188954, 0.1941727575175941, 0.19572941109982944, 0.20474623810964832, 0.20077914786331807, 0.23439792445258223, 0.2094763356381224, 0.18897522299781266, 0.22895629472747603, 0.25061658428368094, 0.28652815507387, 0.23936514730280656, 0.20121210012799318, 0.24841363884396828, 0.17556116237282948, 0.13850652397457675, 0.11115765779725062, 0.12938549538859512, 0.1440978766380394, 0.13856886035404803, 0.11263145451243761, 0.12086170419858777, 0.12627655044856656, 0.13625136199718013, 0.076569773595066, 0.12802118020631592, 0.12629978588111113, 0.12122200730207855, 0.11819303310887552, 0.1109677174639121, 0.0961286809720372, 0.1383464390317547, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08184126261263991, 0.07219341287471892, 0.09971692418593991, 0.07275783882853315, 0.0816778673912193, 0.05481916796595376, 0.1188666350142672, 0.07465655028763207, 0.07152430698946122, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08351471801487165, 0.0695955257989046, 0.055744751051410635, 0.06421637710591055, 0.08287843231060255, 0.08185055188511392, 0.07274467107878901, 0.06948755619356439, 0.07038645298551272, 0.40069976487706405, 0.40333774862497673, 0.40119204156126087, 0.4175744917089893, 0.397088967321247, 0.39087044659337467, 0.39342814197054143, 0.38758576601120853, 0.390897610206689, 0.09098289781434032, 0.08781681784578488, 0.09521979527967828, 0.08732052652360378, 0.09242001185198312, 0.09352661875886004, 0.07569579244772517, 0.0861839452362545, 0.08250495509693356, 0.13608684697183415, 0.15138254560618847, 0.15865841899065147, 0.12580955708644925, 0.15848219515725726, 0.1495074491157955, 0.13674251219170674, 0.13035270792594889, 0.12357980105413624, 0.24948034560659804, 0.22555656387081857, 0.22402631815829332, 0.22384004226487764, 0.22105391671646524, 0.22624845131295557, 0.2684555346820856, 0.279281445284954, 0.26811464131642504, 0.16925157613675978, 0.191688526309861, 0.1831068045935519, 0.16342525076660408, 0.15379660082091728, 0.15293453218052344, 0.17400565896756326, 0.20182140642769186, 0.185599919775574, 0.18956514888853182, 0.18409131654596422, 0.17013691118290264, 0.17520763929246264, 0.18161456225546635, 0.18881076012579356, 0.23155547295626255, 0.18781341332218404, 0.1832442953015726, 0.17785396121210306, 0.18739509880336802, 0.1854812153612273, 0.1729944611731029, 0.17921994265671037, 0.1890447990061882, 0.1767697670656988, 0.17837494932699227, 0.20647386490688702, 0.19233105675036954, 0.18149585058195694, 0.16217389186381936, 0.1518187626970553, 0.16553385155151612, 0.22821156917325525, 0.1474932155330656, 0.16643710385789023, 0.16970856066922024, 0.17196821129576634, 0.17839668704322653, 0.16711773411746655, 0.14036494499858365, 0.15466353038339364, 0.21748858332352816, 0.18938699139554716, 0.20410915868559976, 0.19966388476486585, 0.17984580668725447, 0.18498864740012877, 0.18074405030871188, 0.18072025626860344, 0.19232129200107762, 0.18564863758428207, 0.19930713028419345, 0.18930824114816258, 0.19672188318830297, 0.07466486994440491, 0.07765601342819195, 0.07417284642073008, 0.07826365497668009, 0.07582949694475649, 0.07015213040964063, 0.0778462969068553, 0.0707354636887838, 0.07508977003169381]}, "mutation_prompt": null}
{"id": "291ae118-bef0-4897-abd2-e8229bf64aec", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 10 * dim\n        self.mutation_factor = 0.5  # Adaptively adjusted\n        self.crossover_rate = 0.9   # Adaptively adjusted\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.pop_size, dim)\n        )\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.evaluations = 0\n\n    def chaos_local_search(self, solution):\n        # Introduce chaotic sequence for local perturbation\n        chaotic_seq = np.sin(np.linspace(0, np.pi, self.dim))\n        perturbation = chaotic_seq * (self.upper_bound - self.lower_bound) * 0.01\n        return np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        # Initial fitness evaluation\n        for i in range(self.pop_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < self.best_fitness:\n                self.best_fitness = self.fitness[i]\n                self.best_solution = self.population[i].copy()\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                # DE/rand/1/bin mutation strategy\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Binomial crossover\n                trial = np.where(\n                    np.random.rand(self.dim) < self.crossover_rate,\n                    mutant,\n                    self.population[i]\n                )\n\n                # Evaluate trial vector and apply chaos-based local search if beneficial\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                else:\n                    # Chaotic local search\n                    local_trial = self.chaos_local_search(trial)\n                    local_fitness = func(local_trial)\n                    self.evaluations += 1\n                    if local_fitness < self.fitness[i]:\n                        self.population[i] = local_trial\n                        self.fitness[i] = local_fitness\n                        if local_fitness < self.best_fitness:\n                            self.best_fitness = local_fitness\n                            self.best_solution = local_trial\n\n                # Adaptively adjust mutation factor and crossover rate\n                self.mutation_factor = 0.5 + 0.3 * np.random.rand()\n                self.crossover_rate = 0.9 * (1 - self.evaluations / self.budget)\n\n        return self.best_solution", "name": "AdaptiveDE", "description": "A multi-strategy adaptive differential evolution with chaotic local search for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8463e841-280d-454d-b3b8-ec372b080b45", "metadata": {"aucs": [0.5891457415994386, 0.5774528881507708, 0.5731098945415118, 0.5821872248755997, 0.5911952913485754, 0.6073728638795461, 0.6147164304558526, 0.5201531139827915, 0.6071343880543807, 0.3100822473258814, 0.30222132840716864, 0.3049545550008499, 0.3068908555543868, 0.3138775153676596, 0.2943790237901369, 0.3083269623256285, 0.3080208017728767, 0.32275043705413964, 0.1198477921914699, 0.1343700487894206, 0.11878619730302165, 0.12825927343938803, 0.12048460480003453, 0.13333554116874524, 0.10356617692892145, 0.13691196867254296, 0.14599592749997714, 0.09607741802728864, 0.1079771646748462, 0.1087892168982082, 0.12128557655004346, 0.12234116530289973, 0.10277009016497818, 0.0992058719931268, 0.10159474631531762, 0.11381854128913271, 0.9070561439188141, 0.9098217009021258, 0.8597758046505564, 0.9134728582924184, 0.9473804911605785, 0.967290203504376, 0.9221684745427866, 0.9338936065521253, 0.9318065507054877, 0.1816070534393447, 0.17950055303771628, 0.18652104263955493, 0.19233336461915929, 0.19937488291188954, 0.1941727575175941, 0.19572941109982944, 0.20474623810964832, 0.20077914786331807, 0.23439792445258223, 0.2094763356381224, 0.18897522299781266, 0.22895629472747603, 0.25061658428368094, 0.28652815507387, 0.23936514730280656, 0.20121210012799318, 0.24841363884396828, 0.17556116237282948, 0.13850652397457675, 0.11115765779725062, 0.12938549538859512, 0.1440978766380394, 0.13856886035404803, 0.11263145451243761, 0.12086170419858777, 0.12627655044856656, 0.13625136199718013, 0.076569773595066, 0.12802118020631592, 0.12629978588111113, 0.12122200730207855, 0.11819303310887552, 0.1109677174639121, 0.0961286809720372, 0.1383464390317547, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08184126261263991, 0.07219341287471892, 0.09971692418593991, 0.07275783882853315, 0.0816778673912193, 0.05481916796595376, 0.1188666350142672, 0.07465655028763207, 0.07152430698946122, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08351471801487165, 0.0695955257989046, 0.055744751051410635, 0.06421637710591055, 0.08287843231060255, 0.08185055188511392, 0.07274467107878901, 0.06948755619356439, 0.07038645298551272, 0.40069976487706405, 0.40333774862497673, 0.40119204156126087, 0.4175744917089893, 0.397088967321247, 0.39087044659337467, 0.39342814197054143, 0.38758576601120853, 0.390897610206689, 0.09098289781434032, 0.08781681784578488, 0.09521979527967828, 0.08732052652360378, 0.09242001185198312, 0.09352661875886004, 0.07569579244772517, 0.0861839452362545, 0.08250495509693356, 0.13608684697183415, 0.15138254560618847, 0.15865841899065147, 0.12580955708644925, 0.15848219515725726, 0.1495074491157955, 0.13674251219170674, 0.13035270792594889, 0.12357980105413624, 0.24948034560659804, 0.22555656387081857, 0.22402631815829332, 0.22384004226487764, 0.22105391671646524, 0.22624845131295557, 0.2684555346820856, 0.279281445284954, 0.26811464131642504, 0.16925157613675978, 0.191688526309861, 0.1831068045935519, 0.16342525076660408, 0.15379660082091728, 0.15293453218052344, 0.17400565896756326, 0.20182140642769186, 0.185599919775574, 0.18956514888853182, 0.18409131654596422, 0.17013691118290264, 0.17520763929246264, 0.18161456225546635, 0.18881076012579356, 0.23155547295626255, 0.18781341332218404, 0.1832442953015726, 0.17785396121210306, 0.18739509880336802, 0.1854812153612273, 0.1729944611731029, 0.17921994265671037, 0.1890447990061882, 0.1767697670656988, 0.17837494932699227, 0.20647386490688702, 0.19233105675036954, 0.18149585058195694, 0.16217389186381936, 0.1518187626970553, 0.16553385155151612, 0.22821156917325525, 0.1474932155330656, 0.16643710385789023, 0.16970856066922024, 0.17196821129576634, 0.17839668704322653, 0.16711773411746655, 0.14036494499858365, 0.15466353038339364, 0.21748858332352816, 0.18938699139554716, 0.20410915868559976, 0.19966388476486585, 0.17984580668725447, 0.18498864740012877, 0.18074405030871188, 0.18072025626860344, 0.19232129200107762, 0.18564863758428207, 0.19930713028419345, 0.18930824114816258, 0.19672188318830297, 0.07466486994440491, 0.07765601342819195, 0.07417284642073008, 0.07826365497668009, 0.07582949694475649, 0.07015213040964063, 0.0778462969068553, 0.0707354636887838, 0.07508977003169381]}, "mutation_prompt": null}
