{"id": "65268bc2-5dcd-4266-ba30-2e7210eb3f2f", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # Cognitive parameter\n        self.c2 = 1.5  # Social parameter\n        self.w = 0.7   # Inertia weight\n        self.F = 0.5   # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.pop = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.vel = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.pbest = np.copy(self.pop)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest = None\n        self.gbest_score = np.inf\n        self.eval_count = 0\n\n    def evaluate(self, func, individual):\n        if self.eval_count < self.budget:\n            score = func(individual)\n            self.eval_count += 1\n            return score\n        else:\n            return np.inf\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Particle Swarm Optimization component\n            for i in range(self.population_size):\n                score = self.evaluate(func, self.pop[i])\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.pop[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.pop[i]\n\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.vel = (self.w * self.vel + \n                        self.c1 * r1 * (self.pbest - self.pop) + \n                        self.c2 * r2 * (self.gbest - self.pop))\n            self.pop = np.clip(self.pop + self.vel, self.lb, self.ub)\n\n            # Differential Evolution component\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.pop[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, self.pop[i])\n                trial_score = self.evaluate(func, trial)\n                if trial_score < self.pbest_scores[i]:\n                    self.pop[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest = trial\n\n        return self.gbest", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization and Differential Evolution algorithm that adaptively balances exploration and exploitation in dynamic multi-dimensional search spaces.", "configspace": "", "generation": 0, "fitness": 0.29196997216602133, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.810547410847485, 0.7416262106559334, 0.8288065988177933, 0.7911705249546128, 0.7724568559682642, 0.817827063476189, 0.7966474285432933, 0.8095959857592573, 0.7667009408238687, 0.5876955117702173, 0.36951450006734377, 0.4532673009466822, 0.5608139608970092, 0.5329912582798272, 0.5030541700853333, 0.5524675951766231, 0.6227597792701688, 0.6029294402874417, 0.14078470405328702, 0.1733335142566872, 0.13696793830920195, 0.1004164032155308, 0.1499857895864639, 0.17216472613933542, 0.13804697134582333, 0.12173008055390988, 0.17271098274335783, 0.1238023234272616, 0.14015952167186496, 0.11035062472290702, 0.10138289602931982, 0.10022824398627272, 0.11701010904665654, 0.12344992459439164, 0.12948803403705456, 0.13761419295739596, 0.9722453617629802, 0.977391410004407, 0.9848565009527253, 0.9801364862545213, 0.9860464402965895, 0.9776010144465087, 0.9795989766183135, 0.9805171653293892, 0.9857333426853796, 0.482190698486643, 0.5049565551303796, 0.38198867059243413, 0.4286013368481838, 0.5411706555722106, 0.5117248338835636, 0.3655453238828221, 0.4248684409263064, 0.26129395897710805, 0.4720875764635726, 0.2131462570777658, 0.366258155668296, 0.27338581704052867, 0.2714491606336432, 0.5839231491029402, 0.5337613172222533, 0.17304542561066905, 0.22703141332582044, 0.12412222728473354, 0.1624346931027849, 0.16726877856998312, 0.11710640305854081, 0.19105352453863644, 0.18289303002948287, 0.1260202683176207, 0.1659302208992578, 0.17318347043441695, 0.13126173126816298, 0.1017006639151008, 0.15634339291636878, 0.13983107298213815, 0.1396785720103484, 0.2155347511723682, 0.15654094313207156, 0.1358435833849091, 0.13166490936722508, 9.999999999998899e-05, 9.999999999998899e-05, 0.010771238634787572, 9.999999999998899e-05, 9.999999999998899e-05, 0.04703251925183283, 0.034961915340955385, 9.999999999998899e-05, 0.00015975806943657744, 0.04952798274653525, 0.10140282603673001, 0.1073189386843254, 0.09222604290702874, 0.018640977156607952, 0.051552352942337176, 0.05074598297411448, 0.09727375527447879, 0.06450355443432432, 0.1143602937951127, 0.032883904306133305, 0.04165673584397733, 0.08237643236634651, 0.22019921091157557, 0.1474328463845126, 0.0870292962149688, 0.06011586949140679, 0.08240971309294765, 0.13430933192168504, 0.16150223215406845, 0.07790127247678957, 0.05686396323144838, 0.009699081190648773, 0.052481715337697965, 0.07910614004627914, 0.09100324703116058, 0.23058526124960377, 0.4990526445853336, 0.4722134609256544, 0.4588812202745135, 0.5083684981440812, 0.46689605709175486, 0.4388117244553166, 0.5014936855006625, 0.4781773081437083, 0.5098777874825121, 0.12162041942134016, 0.08991026807152724, 0.08726466914664432, 0.09644935235768481, 0.11965441704648838, 0.10836810394351926, 0.11164999423971678, 0.13847454299120054, 0.1336639892339535, 0.21543423722437283, 0.18029198468903473, 0.21212520382672773, 0.2439336941785496, 0.19540586020911255, 0.2534453063712916, 0.22174285149572093, 0.22807376917382594, 0.24897481311343894, 0.2889453941130248, 0.39213580088859745, 0.3999110666674912, 0.2504177579749097, 0.2973143041862535, 0.41033358872304593, 0.3618274777783701, 0.36568063954315866, 0.28391002699034273, 0.2892852563513755, 0.28435493719838645, 0.18786038309488973, 0.25386778138271915, 0.2870125130815321, 0.24369505281557313, 0.13553094450400782, 0.26573623547460656, 0.1964812645283177, 0.22789520096661586, 0.2192533537942939, 0.25577092107785715, 0.18105289959466297, 0.2076797986515565, 0.2077108910248735, 0.2518758685060284, 0.2010158449906756, 0.2348661024117511, 0.337816262574271, 0.20326382200410786, 0.6821245692869167, 0.17950803470174836, 0.2147177563062752, 0.19768476376368516, 0.5790573419338074, 0.21265570761795227, 0.20727281379621076, 0.8700432899780934, 0.18405316441217356, 0.15465449162897327, 0.8544294398267155, 0.2007522777431754, 0.8141529690060035, 0.7551225668355713, 0.16919954435976392, 0.1579606044480414, 0.1511512333920222, 0.20998507252001852, 0.5944844681464614, 0.5290156537377515, 0.3580498522511889, 0.209571844551378, 0.4118148759596695, 0.7322564641103755, 0.37678401527550964, 0.19609410442545572, 0.19026538650327973, 0.17998281967624719, 0.18386745143831174, 0.19765306801617166, 0.22178082098333518, 0.200333245977234, 0.17401510819797272, 0.18371728187573633, 0.10096855007074979, 0.17159038492557488, 0.0857539325001031, 0.10491421603573559, 0.08193590952290086, 0.1115564204806373, 0.07631413773756734, 0.0951316944314089, 0.08237779525769695]}, "mutation_prompt": null}
{"id": "a98122a2-3cca-49ca-80dd-0c7472b1b6aa", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # Cognitive parameter\n        self.c2 = 1.5  # Social parameter\n        self.w = 0.7   # Inertia weight\n        self.F = 0.5   # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.pop = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.vel = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.pbest = np.copy(self.pop)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest = None\n        self.gbest_score = np.inf\n        self.eval_count = 0\n\n    def evaluate(self, func, individual):\n        if self.eval_count < self.budget:\n            score = func(individual)\n            self.eval_count += 1\n            return score\n        else:\n            return np.inf\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Particle Swarm Optimization component\n            for i in range(self.population_size):\n                score = self.evaluate(func, self.pop[i])\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest[i] = self.pop[i]\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest = self.pop[i]\n\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.vel = (self.w * self.vel + \n                        self.c1 * r1 * (self.pbest - self.pop) + \n                        self.c2 * r2 * (self.gbest - self.pop))\n            self.pop = np.clip(self.pop + self.vel, self.lb, self.ub)\n\n            # Differential Evolution component\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.pop[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, self.pop[i])\n                trial_score = self.evaluate(func, trial)\n                if trial_score < self.pbest_scores[i]:\n                    self.pop[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest = trial\n\n        return self.gbest", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization and Differential Evolution algorithm that adaptively balances exploration and exploitation in dynamic multi-dimensional search spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65268bc2-5dcd-4266-ba30-2e7210eb3f2f", "metadata": {"aucs": [0.810547410847485, 0.7416262106559334, 0.8288065988177933, 0.7911705249546128, 0.7724568559682642, 0.817827063476189, 0.7966474285432933, 0.8095959857592573, 0.7667009408238687, 0.5876955117702173, 0.36951450006734377, 0.4532673009466822, 0.5608139608970092, 0.5329912582798272, 0.5030541700853333, 0.5524675951766231, 0.6227597792701688, 0.6029294402874417, 0.14078470405328702, 0.1733335142566872, 0.13696793830920195, 0.1004164032155308, 0.1499857895864639, 0.17216472613933542, 0.13804697134582333, 0.12173008055390988, 0.17271098274335783, 0.1238023234272616, 0.14015952167186496, 0.11035062472290702, 0.10138289602931982, 0.10022824398627272, 0.11701010904665654, 0.12344992459439164, 0.12948803403705456, 0.13761419295739596, 0.9722453617629802, 0.977391410004407, 0.9848565009527253, 0.9801364862545213, 0.9860464402965895, 0.9776010144465087, 0.9795989766183135, 0.9805171653293892, 0.9857333426853796, 0.482190698486643, 0.5049565551303796, 0.38198867059243413, 0.4286013368481838, 0.5411706555722106, 0.5117248338835636, 0.3655453238828221, 0.4248684409263064, 0.26129395897710805, 0.4720875764635726, 0.2131462570777658, 0.366258155668296, 0.27338581704052867, 0.2714491606336432, 0.5839231491029402, 0.5337613172222533, 0.17304542561066905, 0.22703141332582044, 0.12412222728473354, 0.1624346931027849, 0.16726877856998312, 0.11710640305854081, 0.19105352453863644, 0.18289303002948287, 0.1260202683176207, 0.1659302208992578, 0.17318347043441695, 0.13126173126816298, 0.1017006639151008, 0.15634339291636878, 0.13983107298213815, 0.1396785720103484, 0.2155347511723682, 0.15654094313207156, 0.1358435833849091, 0.13166490936722508, 9.999999999998899e-05, 9.999999999998899e-05, 0.010771238634787572, 9.999999999998899e-05, 9.999999999998899e-05, 0.04703251925183283, 0.034961915340955385, 9.999999999998899e-05, 0.00015975806943657744, 0.04952798274653525, 0.10140282603673001, 0.1073189386843254, 0.09222604290702874, 0.018640977156607952, 0.051552352942337176, 0.05074598297411448, 0.09727375527447879, 0.06450355443432432, 0.1143602937951127, 0.032883904306133305, 0.04165673584397733, 0.08237643236634651, 0.22019921091157557, 0.1474328463845126, 0.0870292962149688, 0.06011586949140679, 0.08240971309294765, 0.13430933192168504, 0.16150223215406845, 0.07790127247678957, 0.05686396323144838, 0.009699081190648773, 0.052481715337697965, 0.07910614004627914, 0.09100324703116058, 0.23058526124960377, 0.4990526445853336, 0.4722134609256544, 0.4588812202745135, 0.5083684981440812, 0.46689605709175486, 0.4388117244553166, 0.5014936855006625, 0.4781773081437083, 0.5098777874825121, 0.12162041942134016, 0.08991026807152724, 0.08726466914664432, 0.09644935235768481, 0.11965441704648838, 0.10836810394351926, 0.11164999423971678, 0.13847454299120054, 0.1336639892339535, 0.21543423722437283, 0.18029198468903473, 0.21212520382672773, 0.2439336941785496, 0.19540586020911255, 0.2534453063712916, 0.22174285149572093, 0.22807376917382594, 0.24897481311343894, 0.2889453941130248, 0.39213580088859745, 0.3999110666674912, 0.2504177579749097, 0.2973143041862535, 0.41033358872304593, 0.3618274777783701, 0.36568063954315866, 0.28391002699034273, 0.2892852563513755, 0.28435493719838645, 0.18786038309488973, 0.25386778138271915, 0.2870125130815321, 0.24369505281557313, 0.13553094450400782, 0.26573623547460656, 0.1964812645283177, 0.22789520096661586, 0.2192533537942939, 0.25577092107785715, 0.18105289959466297, 0.2076797986515565, 0.2077108910248735, 0.2518758685060284, 0.2010158449906756, 0.2348661024117511, 0.337816262574271, 0.20326382200410786, 0.6821245692869167, 0.17950803470174836, 0.2147177563062752, 0.19768476376368516, 0.5790573419338074, 0.21265570761795227, 0.20727281379621076, 0.8700432899780934, 0.18405316441217356, 0.15465449162897327, 0.8544294398267155, 0.2007522777431754, 0.8141529690060035, 0.7551225668355713, 0.16919954435976392, 0.1579606044480414, 0.1511512333920222, 0.20998507252001852, 0.5944844681464614, 0.5290156537377515, 0.3580498522511889, 0.209571844551378, 0.4118148759596695, 0.7322564641103755, 0.37678401527550964, 0.19609410442545572, 0.19026538650327973, 0.17998281967624719, 0.18386745143831174, 0.19765306801617166, 0.22178082098333518, 0.200333245977234, 0.17401510819797272, 0.18371728187573633, 0.10096855007074979, 0.17159038492557488, 0.0857539325001031, 0.10491421603573559, 0.08193590952290086, 0.1115564204806373, 0.07631413773756734, 0.0951316944314089, 0.08237779525769695]}, "mutation_prompt": null}
