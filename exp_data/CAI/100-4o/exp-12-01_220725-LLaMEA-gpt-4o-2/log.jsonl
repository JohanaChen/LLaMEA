{"id": "7115186c-bbfd-4991-b877-ab7e5a123e89", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim, pop_size=20, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.bounds = (-5.0, 5.0)\n        self.eval_count = 0\n        \n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.bounds[0], self.bounds[1])\n\n        def adaptive_mutation(pop, best_idx):\n            # Adaptive scaling factor based on population diversity\n            diversity = np.mean(np.std(pop, axis=0))\n            F_adaptive = self.F * (1 + diversity / self.dim)\n            F_adaptive = min(max(F_adaptive, 0.1), 0.9)\n            idxs = np.arange(self.pop_size)\n            trial_vectors = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(idxs[idxs != i], 3, replace=False)\n                mutant = pop[a] + F_adaptive * (pop[b] - pop[c])\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial_vectors[i] = np.where(cross_points, mutant, pop[i])\n                trial_vectors[i] = clip(trial_vectors[i])\n            return trial_vectors\n\n        # Initialize population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        self.eval_count += self.pop_size\n\n        while self.eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            trial_pop = adaptive_mutation(pop, best_idx)\n            trial_fitness = np.array([func(ind) for ind in trial_pop])\n            self.eval_count += self.pop_size\n\n            # Selection\n            for i in range(self.pop_size):\n                if trial_fitness[i] < fitness[i]:\n                    fitness[i] = trial_fitness[i]\n                    pop[i] = trial_pop[i]\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "This algorithm blends differential evolution with adaptive mutation strategies to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.40678762366620913, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.908447179691824, 0.8994605539418717, 0.908846377951116, 0.9149593203998715, 0.9047823108635026, 0.4364601541844839, 0.8953951875951421, 0.9086786004018356, 0.8957163191144834, 0.8500167917087076, 0.8306692295824051, 0.8390670750559374, 0.8229599013744544, 0.10374386955014903, 0.8202181824234194, 0.8240293400081439, 0.8293770818428006, 0.253489521932332, 0.35032242592862517, 0.15874495065708083, 0.4982094485104389, 0.3781405857814669, 0.17235296468049943, 0.44315104691176566, 0.6176352334674885, 0.15840757390113247, 0.18353552844351617, 0.14988735623561333, 0.14544313087249905, 0.13205198760825498, 0.13663587663311116, 0.13673134603316617, 0.16700213779157402, 0.23358101593962788, 0.13931703890588454, 0.13322006706449752, 0.9514851397890814, 0.9784085362192405, 0.9428089373056487, 0.9205052872837697, 0.9674435723634774, 0.9652149316932631, 0.972389484189878, 0.911993816016577, 0.9682458662502554, 0.30310557889006473, 0.14197247954099856, 0.5352639833310239, 0.48416167352768946, 0.14867505063506647, 0.33450172892427865, 0.5057811421387276, 0.32421305862081307, 0.22611367514347525, 0.8859612200104412, 0.878055663613506, 0.33329720376392225, 0.9039811476009254, 0.8622886548508253, 0.9059529159886021, 0.23406877728631648, 0.8826438943953723, 0.8895825369656929, 0.1661468406035066, 0.17079225748579574, 0.15355380131225704, 0.2262256789188195, 0.2462902569915083, 0.15749989388166463, 0.16020996528886644, 0.18988748692200208, 0.17144786631494313, 0.027197862866168876, 0.12092275791270202, 0.13830230251176967, 0.1578786761124118, 0.15372593387406908, 0.1542092953016061, 0.19213497127253398, 0.15117524231674706, 0.16633068294938735, 0.20712483030617845, 0.434370183012488, 0.7050920969094556, 0.34358144427470483, 0.024218921935993287, 0.46299528629080644, 0.6606733496984103, 0.6691484967592715, 0.4411000315259612, 0.20037989404294554, 0.49039955021086623, 0.47588046235577264, 0.5276010776596565, 0.509695665923511, 0.33495339094856924, 0.7844265109827704, 0.7970116363388318, 0.7308557373100757, 0.12906765589501423, 0.14062661605470717, 0.14473212405169178, 0.09855073631472133, 0.3545174635114112, 0.11862257103239504, 0.17752961735244588, 0.23145441877993578, 0.34124286762835665, 0.1365433686017694, 0.39610952976978153, 0.22731116837173526, 0.3851797500203358, 0.3900905433801848, 0.5465640217823483, 0.40257204630531773, 0.26110715174025034, 0.23548145611039617, 0.577547672573144, 0.7097874064920464, 0.8620567066445446, 0.7266437711317438, 0.7578680622745586, 0.6632239441904494, 0.8372561626499342, 0.6587639965271559, 0.7837959022842824, 0.11067286007075505, 0.10717753169213595, 0.130860224304586, 0.12541710040199794, 0.12298945990803367, 0.0958396642998035, 0.36228444706361174, 0.10528535506106906, 0.10568972719692482, 0.2488405259435318, 0.15914094272051293, 0.3701850048964086, 0.21760643805903146, 0.19304137179237546, 0.16789185743889556, 0.13483592283262824, 0.10253674199346574, 0.2059534023637113, 0.5795515731016618, 0.41820556081925975, 0.7009419974417835, 0.6775901005189844, 0.6702174500797875, 0.6854713769305165, 0.6164056493794221, 0.6761193816681711, 0.5975500181183835, 0.4284855741052742, 0.5282172801472855, 0.4556297676652361, 0.5234512725342446, 0.597602795737742, 0.3487146011640947, 0.4087054363539473, 0.46731287339093674, 0.5533694783053997, 0.1950338002546378, 0.20364976798873136, 0.2241417800510056, 0.19137599427605378, 0.19701140808029272, 0.19931979501805464, 0.22136314366420784, 0.18158173382696507, 0.19627279318522028, 0.23867085992128445, 0.2008311658106695, 0.31836889009436387, 0.20319432179151664, 0.21552188627731006, 0.21112614689673914, 0.2113456336559758, 0.23912133385987788, 0.6888314132033342, 0.1949527405838999, 0.8786420108910054, 0.9118264379516028, 0.17413707711825555, 0.8372126996788452, 0.8549043069957192, 0.4522083398583253, 0.3892742478521667, 0.16794568267390364, 0.9127176777668333, 0.1922795048991367, 0.16707944461128332, 0.6987652772322209, 0.8541544397419121, 0.16746014768195527, 0.20905091110998641, 0.20388991198313156, 0.19754923397964208, 0.21068981337687132, 0.19492619992647653, 0.1956596371093754, 0.19695759108333633, 0.1835390794676831, 0.19370885349901967, 0.18309886021348765, 0.18243217302613945, 0.20565345400496504, 0.08645519668183732, 0.09791532670886083, 0.08331447845991402, 0.07954849027837174, 0.08209309115922714, 0.08855271166704026, 0.08732376892143057, 0.09018972351950127, 0.08697579670862232]}, "mutation_prompt": null}
{"id": "363b82a5-0fd7-4f64-9130-59e16c16bec0", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim, pop_size=20, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.bounds = (-5.0, 5.0)\n        self.eval_count = 0\n        \n    def __call__(self, func):\n        def clip(x):\n            return np.clip(x, self.bounds[0], self.bounds[1])\n\n        def adaptive_mutation(pop, best_idx):\n            # Adaptive scaling factor based on population diversity\n            diversity = np.mean(np.std(pop, axis=0))\n            F_adaptive = self.F * (1 + diversity / self.dim)\n            F_adaptive = min(max(F_adaptive, 0.1), 0.9)\n            idxs = np.arange(self.pop_size)\n            trial_vectors = np.zeros_like(pop)\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(idxs[idxs != i], 3, replace=False)\n                mutant = pop[a] + F_adaptive * (pop[b] - pop[c])\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial_vectors[i] = np.where(cross_points, mutant, pop[i])\n                trial_vectors[i] = clip(trial_vectors[i])\n            return trial_vectors\n\n        # Initialize population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        self.eval_count += self.pop_size\n\n        while self.eval_count < self.budget:\n            best_idx = np.argmin(fitness)\n            trial_pop = adaptive_mutation(pop, best_idx)\n            trial_fitness = np.array([func(ind) for ind in trial_pop])\n            self.eval_count += self.pop_size\n\n            # Selection\n            for i in range(self.pop_size):\n                if trial_fitness[i] < fitness[i]:\n                    fitness[i] = trial_fitness[i]\n                    pop[i] = trial_pop[i]\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "This algorithm blends differential evolution with adaptive mutation strategies to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7115186c-bbfd-4991-b877-ab7e5a123e89", "metadata": {"aucs": [0.908447179691824, 0.8994605539418717, 0.908846377951116, 0.9149593203998715, 0.9047823108635026, 0.4364601541844839, 0.8953951875951421, 0.9086786004018356, 0.8957163191144834, 0.8500167917087076, 0.8306692295824051, 0.8390670750559374, 0.8229599013744544, 0.10374386955014903, 0.8202181824234194, 0.8240293400081439, 0.8293770818428006, 0.253489521932332, 0.35032242592862517, 0.15874495065708083, 0.4982094485104389, 0.3781405857814669, 0.17235296468049943, 0.44315104691176566, 0.6176352334674885, 0.15840757390113247, 0.18353552844351617, 0.14988735623561333, 0.14544313087249905, 0.13205198760825498, 0.13663587663311116, 0.13673134603316617, 0.16700213779157402, 0.23358101593962788, 0.13931703890588454, 0.13322006706449752, 0.9514851397890814, 0.9784085362192405, 0.9428089373056487, 0.9205052872837697, 0.9674435723634774, 0.9652149316932631, 0.972389484189878, 0.911993816016577, 0.9682458662502554, 0.30310557889006473, 0.14197247954099856, 0.5352639833310239, 0.48416167352768946, 0.14867505063506647, 0.33450172892427865, 0.5057811421387276, 0.32421305862081307, 0.22611367514347525, 0.8859612200104412, 0.878055663613506, 0.33329720376392225, 0.9039811476009254, 0.8622886548508253, 0.9059529159886021, 0.23406877728631648, 0.8826438943953723, 0.8895825369656929, 0.1661468406035066, 0.17079225748579574, 0.15355380131225704, 0.2262256789188195, 0.2462902569915083, 0.15749989388166463, 0.16020996528886644, 0.18988748692200208, 0.17144786631494313, 0.027197862866168876, 0.12092275791270202, 0.13830230251176967, 0.1578786761124118, 0.15372593387406908, 0.1542092953016061, 0.19213497127253398, 0.15117524231674706, 0.16633068294938735, 0.20712483030617845, 0.434370183012488, 0.7050920969094556, 0.34358144427470483, 0.024218921935993287, 0.46299528629080644, 0.6606733496984103, 0.6691484967592715, 0.4411000315259612, 0.20037989404294554, 0.49039955021086623, 0.47588046235577264, 0.5276010776596565, 0.509695665923511, 0.33495339094856924, 0.7844265109827704, 0.7970116363388318, 0.7308557373100757, 0.12906765589501423, 0.14062661605470717, 0.14473212405169178, 0.09855073631472133, 0.3545174635114112, 0.11862257103239504, 0.17752961735244588, 0.23145441877993578, 0.34124286762835665, 0.1365433686017694, 0.39610952976978153, 0.22731116837173526, 0.3851797500203358, 0.3900905433801848, 0.5465640217823483, 0.40257204630531773, 0.26110715174025034, 0.23548145611039617, 0.577547672573144, 0.7097874064920464, 0.8620567066445446, 0.7266437711317438, 0.7578680622745586, 0.6632239441904494, 0.8372561626499342, 0.6587639965271559, 0.7837959022842824, 0.11067286007075505, 0.10717753169213595, 0.130860224304586, 0.12541710040199794, 0.12298945990803367, 0.0958396642998035, 0.36228444706361174, 0.10528535506106906, 0.10568972719692482, 0.2488405259435318, 0.15914094272051293, 0.3701850048964086, 0.21760643805903146, 0.19304137179237546, 0.16789185743889556, 0.13483592283262824, 0.10253674199346574, 0.2059534023637113, 0.5795515731016618, 0.41820556081925975, 0.7009419974417835, 0.6775901005189844, 0.6702174500797875, 0.6854713769305165, 0.6164056493794221, 0.6761193816681711, 0.5975500181183835, 0.4284855741052742, 0.5282172801472855, 0.4556297676652361, 0.5234512725342446, 0.597602795737742, 0.3487146011640947, 0.4087054363539473, 0.46731287339093674, 0.5533694783053997, 0.1950338002546378, 0.20364976798873136, 0.2241417800510056, 0.19137599427605378, 0.19701140808029272, 0.19931979501805464, 0.22136314366420784, 0.18158173382696507, 0.19627279318522028, 0.23867085992128445, 0.2008311658106695, 0.31836889009436387, 0.20319432179151664, 0.21552188627731006, 0.21112614689673914, 0.2113456336559758, 0.23912133385987788, 0.6888314132033342, 0.1949527405838999, 0.8786420108910054, 0.9118264379516028, 0.17413707711825555, 0.8372126996788452, 0.8549043069957192, 0.4522083398583253, 0.3892742478521667, 0.16794568267390364, 0.9127176777668333, 0.1922795048991367, 0.16707944461128332, 0.6987652772322209, 0.8541544397419121, 0.16746014768195527, 0.20905091110998641, 0.20388991198313156, 0.19754923397964208, 0.21068981337687132, 0.19492619992647653, 0.1956596371093754, 0.19695759108333633, 0.1835390794676831, 0.19370885349901967, 0.18309886021348765, 0.18243217302613945, 0.20565345400496504, 0.08645519668183732, 0.09791532670886083, 0.08331447845991402, 0.07954849027837174, 0.08209309115922714, 0.08855271166704026, 0.08732376892143057, 0.09018972351950127, 0.08697579670862232]}, "mutation_prompt": null}
