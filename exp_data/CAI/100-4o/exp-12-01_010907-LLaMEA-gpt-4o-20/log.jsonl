{"id": "85288d40-b899-4dd5-8d00-f166d9053a80", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.global_best = self.particles[np.random.randint(self.pop_size)]\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_score = np.inf\n        self.eval_count = 0\n    \n    def __call__(self, func):\n        def evaluate(particle):\n            score = func(particle)\n            return score\n        \n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                if self.eval_count >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = evaluate(self.particles[i])\n                self.eval_count += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best[i] = self.particles[i].copy()\n                \n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best = self.particles[i].copy()\n\n            # Update velocities and positions using PSO\n            inertia_weight = 0.5\n            cognitive_comp = 1.5\n            social_comp = 1.5\n            r1, r2 = np.random.random(self.dim), np.random.random(self.dim)\n            for i in range(self.pop_size):\n                self.velocities[i] = (inertia_weight * self.velocities[i] + \n                                      cognitive_comp * r1 * (self.personal_best[i] - self.particles[i]) +\n                                      social_comp * r2 * (self.global_best - self.particles[i]))\n                self.particles[i] += self.velocities[i]\n                self.particles[i] = np.clip(self.particles[i], -5.0, 5.0)\n\n            # Perform DE mutation and crossover\n            F = 0.8\n            CR = 0.9\n            for i in range(self.pop_size):\n                if self.eval_count >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.particles[i])\n                \n                # Evaluate trial vector\n                trial_score = evaluate(trial)\n                self.eval_count += 1\n\n                # Selection\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.particles[i] = trial\n                    if trial_score < self.global_best_score:\n                        self.global_best_score = trial_score\n                        self.global_best = trial\n\n        return self.global_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to leverage swarm intelligence and mutation strategies for effective exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.2624502316830701, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8752118467203271, 0.8291804410645008, 0.8734377382309861, 0.584309474029657, 0.6118356747611786, 0.8525810134118212, 0.8667395867284882, 0.823487521124138, 0.7339287957075383, 0.2525535911799066, 0.13582084081519952, 0.5980384272849434, 0.6616111922521732, 0.6787631852197203, 0.39881347897531594, 0.7088813696426635, 0.29558037204132714, 0.36797127813367436, 0.4515395463898544, 0.11741508113040455, 0.13119881615856543, 0.1618269146303254, 0.14093456124185344, 0.1475435277619268, 0.11765601390226677, 0.1560473300869104, 0.14501407502979857, 0.13231707994959163, 0.15429801807370913, 0.14472688468323447, 0.10283195636427134, 0.10589614026178318, 0.09431210687292091, 0.09550692808906991, 0.09525796678217835, 0.1009321662194449, 0.9752406815824863, 0.9678726244914704, 0.9724739053355638, 0.9731328242401186, 0.9809240520502692, 0.9640357284109314, 0.9802688231422032, 0.9715004387085501, 0.9757876910785065, 0.22386169099230502, 0.2268440726516553, 0.29192731051749443, 0.20219075340238646, 0.22257571213987182, 0.1534934629170397, 0.32037714729549693, 0.2971300331838347, 0.11789172261942571, 0.20283053496404613, 0.17957138534957062, 0.22395107576647966, 0.20243391518039966, 0.208742075378055, 0.2057032086107874, 0.14790447956251085, 0.2537187599964613, 0.22430807043500922, 0.13413603278682762, 0.21093144710059109, 0.13376968581013204, 0.17833132735438995, 0.15203981339871664, 0.16759123053577551, 0.12671476292179162, 0.1439477045697306, 0.23876417038210962, 0.19180167640442147, 0.09841641861144923, 0.1993743702361822, 0.1523800783103033, 0.18193477327286567, 0.15593567458822677, 0.20912065373897215, 0.107644322451098, 0.18624106324967915, 9.999999999998899e-05, 0.022775171456089982, 0.004037316086501264, 9.999999999998899e-05, 9.999999999998899e-05, 0.03680025442939583, 9.999999999998899e-05, 0.02411371223754799, 9.999999999998899e-05, 0.11930164660712539, 0.04355667739392777, 0.07134788896911126, 0.14201228199183513, 0.07153320063451551, 0.034546428296707954, 0.13939862622779675, 0.09477588739647014, 0.050296348167138016, 9.999999999998899e-05, 0.13985677820664355, 0.06622213919493047, 0.14263279823443076, 0.07622099683417072, 0.0725134456589982, 0.08952559986143116, 0.06679281364064027, 0.16371748962471921, 0.010069726830330583, 0.09955424986235006, 0.12848652186746623, 0.03873894553006574, 0.23822406193373025, 0.007187013512982454, 0.0784205763808008, 0.230805737580154, 0.05576426731298323, 0.47808495169378606, 0.4852341364409133, 0.4500038727272958, 0.46099044457887695, 0.4764368366650946, 0.49780874558667776, 0.466984035691031, 0.5173323570000488, 0.4950666028915457, 0.09614755449706003, 0.10258294190113759, 0.09145325001976357, 0.12076858187137418, 0.14834073763587252, 0.09046475994406533, 0.08875378147287205, 0.07567243943888513, 0.08763421532276405, 0.20807929086743648, 0.1927360583543366, 0.17603667294969205, 0.21609752731351095, 0.17540795831709854, 0.185073309957011, 0.16828368955918482, 0.16456414348478499, 0.17684550312224423, 0.31164269717774273, 0.3037148837443868, 0.24077364271056256, 0.37722049787815704, 0.24677800257232918, 0.23735745376047201, 0.26448311436091687, 0.27332718007676615, 0.3873720586193359, 0.20739421680573955, 0.25665023133502485, 0.16268841219370334, 0.2342707346831594, 0.15616616442441922, 0.26242135567715574, 0.20026941086470662, 0.24986049038491542, 0.19100349468868905, 0.24313678101456448, 0.19806962936923256, 0.18377740094205808, 0.21510849186079217, 0.2353585135981704, 0.20956025556406943, 0.24477561434632278, 0.20533948939370894, 0.23340536886811514, 0.2144243223785709, 0.24335555278431042, 0.27673606564858055, 0.18419130100649939, 0.1912464877209883, 0.2051489090382954, 0.20068480112307174, 0.23442970568613497, 0.19437091242980697, 0.8995438031285506, 0.16378126839036378, 0.19154834389747455, 0.8966506602369235, 0.20038421936642858, 0.8817465955065191, 0.24214785678890527, 0.1682744242363744, 0.1518144891133456, 0.45818412510455275, 0.24770254698577887, 0.2609726686795206, 0.3030969797280283, 0.40465818401257225, 0.4520464264469767, 0.13320436991743012, 0.5566736617389036, 0.266582085849029, 0.17760649033966147, 0.20345787141229932, 0.20745751105948418, 0.1716368360771523, 0.18180966969569845, 0.19882074117824844, 0.18988609307865545, 0.18872169111956416, 0.1789321275605471, 0.09221089811485672, 0.10800404669228869, 0.08467413714566496, 0.07451513677572352, 0.07851272976276447, 0.08158824648829499, 0.1056257590828571, 0.08463338800511133, 0.09314898815189121]}, "mutation_prompt": null}
{"id": "af13abe9-1179-46f4-9f27-392834ecef5e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.global_best = self.particles[np.random.randint(self.pop_size)]\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_score = np.inf\n        self.eval_count = 0\n    \n    def __call__(self, func):\n        def evaluate(particle):\n            score = func(particle)\n            return score\n        \n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                if self.eval_count >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = evaluate(self.particles[i])\n                self.eval_count += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best[i] = self.particles[i].copy()\n                \n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best = self.particles[i].copy()\n\n            # Update velocities and positions using PSO\n            inertia_weight = 0.5\n            cognitive_comp = 1.5\n            social_comp = 1.5\n            r1, r2 = np.random.random(self.dim), np.random.random(self.dim)\n            for i in range(self.pop_size):\n                self.velocities[i] = (inertia_weight * self.velocities[i] + \n                                      cognitive_comp * r1 * (self.personal_best[i] - self.particles[i]) +\n                                      social_comp * r2 * (self.global_best - self.particles[i]))\n                self.particles[i] += self.velocities[i]\n                self.particles[i] = np.clip(self.particles[i], -5.0, 5.0)\n\n            # Perform DE mutation and crossover\n            F = 0.8\n            CR = 0.9\n            for i in range(self.pop_size):\n                if self.eval_count >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.particles[i])\n                \n                # Evaluate trial vector\n                trial_score = evaluate(trial)\n                self.eval_count += 1\n\n                # Selection\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.particles[i] = trial\n                    if trial_score < self.global_best_score:\n                        self.global_best_score = trial_score\n                        self.global_best = trial\n\n        return self.global_best", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to leverage swarm intelligence and mutation strategies for effective exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "85288d40-b899-4dd5-8d00-f166d9053a80", "metadata": {"aucs": [0.8752118467203271, 0.8291804410645008, 0.8734377382309861, 0.584309474029657, 0.6118356747611786, 0.8525810134118212, 0.8667395867284882, 0.823487521124138, 0.7339287957075383, 0.2525535911799066, 0.13582084081519952, 0.5980384272849434, 0.6616111922521732, 0.6787631852197203, 0.39881347897531594, 0.7088813696426635, 0.29558037204132714, 0.36797127813367436, 0.4515395463898544, 0.11741508113040455, 0.13119881615856543, 0.1618269146303254, 0.14093456124185344, 0.1475435277619268, 0.11765601390226677, 0.1560473300869104, 0.14501407502979857, 0.13231707994959163, 0.15429801807370913, 0.14472688468323447, 0.10283195636427134, 0.10589614026178318, 0.09431210687292091, 0.09550692808906991, 0.09525796678217835, 0.1009321662194449, 0.9752406815824863, 0.9678726244914704, 0.9724739053355638, 0.9731328242401186, 0.9809240520502692, 0.9640357284109314, 0.9802688231422032, 0.9715004387085501, 0.9757876910785065, 0.22386169099230502, 0.2268440726516553, 0.29192731051749443, 0.20219075340238646, 0.22257571213987182, 0.1534934629170397, 0.32037714729549693, 0.2971300331838347, 0.11789172261942571, 0.20283053496404613, 0.17957138534957062, 0.22395107576647966, 0.20243391518039966, 0.208742075378055, 0.2057032086107874, 0.14790447956251085, 0.2537187599964613, 0.22430807043500922, 0.13413603278682762, 0.21093144710059109, 0.13376968581013204, 0.17833132735438995, 0.15203981339871664, 0.16759123053577551, 0.12671476292179162, 0.1439477045697306, 0.23876417038210962, 0.19180167640442147, 0.09841641861144923, 0.1993743702361822, 0.1523800783103033, 0.18193477327286567, 0.15593567458822677, 0.20912065373897215, 0.107644322451098, 0.18624106324967915, 9.999999999998899e-05, 0.022775171456089982, 0.004037316086501264, 9.999999999998899e-05, 9.999999999998899e-05, 0.03680025442939583, 9.999999999998899e-05, 0.02411371223754799, 9.999999999998899e-05, 0.11930164660712539, 0.04355667739392777, 0.07134788896911126, 0.14201228199183513, 0.07153320063451551, 0.034546428296707954, 0.13939862622779675, 0.09477588739647014, 0.050296348167138016, 9.999999999998899e-05, 0.13985677820664355, 0.06622213919493047, 0.14263279823443076, 0.07622099683417072, 0.0725134456589982, 0.08952559986143116, 0.06679281364064027, 0.16371748962471921, 0.010069726830330583, 0.09955424986235006, 0.12848652186746623, 0.03873894553006574, 0.23822406193373025, 0.007187013512982454, 0.0784205763808008, 0.230805737580154, 0.05576426731298323, 0.47808495169378606, 0.4852341364409133, 0.4500038727272958, 0.46099044457887695, 0.4764368366650946, 0.49780874558667776, 0.466984035691031, 0.5173323570000488, 0.4950666028915457, 0.09614755449706003, 0.10258294190113759, 0.09145325001976357, 0.12076858187137418, 0.14834073763587252, 0.09046475994406533, 0.08875378147287205, 0.07567243943888513, 0.08763421532276405, 0.20807929086743648, 0.1927360583543366, 0.17603667294969205, 0.21609752731351095, 0.17540795831709854, 0.185073309957011, 0.16828368955918482, 0.16456414348478499, 0.17684550312224423, 0.31164269717774273, 0.3037148837443868, 0.24077364271056256, 0.37722049787815704, 0.24677800257232918, 0.23735745376047201, 0.26448311436091687, 0.27332718007676615, 0.3873720586193359, 0.20739421680573955, 0.25665023133502485, 0.16268841219370334, 0.2342707346831594, 0.15616616442441922, 0.26242135567715574, 0.20026941086470662, 0.24986049038491542, 0.19100349468868905, 0.24313678101456448, 0.19806962936923256, 0.18377740094205808, 0.21510849186079217, 0.2353585135981704, 0.20956025556406943, 0.24477561434632278, 0.20533948939370894, 0.23340536886811514, 0.2144243223785709, 0.24335555278431042, 0.27673606564858055, 0.18419130100649939, 0.1912464877209883, 0.2051489090382954, 0.20068480112307174, 0.23442970568613497, 0.19437091242980697, 0.8995438031285506, 0.16378126839036378, 0.19154834389747455, 0.8966506602369235, 0.20038421936642858, 0.8817465955065191, 0.24214785678890527, 0.1682744242363744, 0.1518144891133456, 0.45818412510455275, 0.24770254698577887, 0.2609726686795206, 0.3030969797280283, 0.40465818401257225, 0.4520464264469767, 0.13320436991743012, 0.5566736617389036, 0.266582085849029, 0.17760649033966147, 0.20345787141229932, 0.20745751105948418, 0.1716368360771523, 0.18180966969569845, 0.19882074117824844, 0.18988609307865545, 0.18872169111956416, 0.1789321275605471, 0.09221089811485672, 0.10800404669228869, 0.08467413714566496, 0.07451513677572352, 0.07851272976276447, 0.08158824648829499, 0.1056257590828571, 0.08463338800511133, 0.09314898815189121]}, "mutation_prompt": null}
