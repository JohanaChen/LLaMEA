{"id": "c5569381-8366-4d6c-b5d9-85f0a261ae4f", "solution": "import numpy as np\n\nclass MemeticDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.Cr = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.apply_along_axis(func, 1, self.population)\n        self.best_solution = self.population[np.argmin(fitness)]\n        self.best_value = np.min(fitness)\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.Cr\n                trial = np.where(crossover_mask, mutant, self.population[i])\n                \n                # Local Search (Hill Climbing)\n                trial_improved = trial.copy()\n                for j in range(self.dim):\n                    perturb = np.zeros(self.dim)\n                    perturb[j] = (np.random.rand() - 0.5) / 10.0\n                    candidate = np.clip(trial + perturb, self.lower_bound, self.upper_bound)\n                    candidate_value = func(candidate)\n                    evaluations += 1\n                    if candidate_value < func(trial_improved):\n                        trial_improved = candidate\n                        if candidate_value < self.best_value:\n                            self.best_solution = candidate\n                            self.best_value = candidate_value\n                    if evaluations >= self.budget:\n                        break\n\n                trial_value = func(trial_improved)\n                evaluations += 1\n                if trial_value < fitness[i]:\n                    self.population[i] = trial_improved\n                    fitness[i] = trial_value\n                    if trial_value < self.best_value:\n                        self.best_solution = trial_improved\n                        self.best_value = trial_value\n\n        return self.best_solution, self.best_value", "name": "MemeticDifferentialEvolution", "description": "Novel Memetic Differential Evolution with Adaptive Local Search for Efficient Black Box Optimization", "configspace": "", "generation": 0, "fitness": 0.10067853039672066, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.2096295289753396, 0.198194974652661, 0.2122847295639253, 0.21182887572786868, 0.20819474023308104, 0.20329714950251465, 0.24373185772393746, 0.19684133261378323, 0.19311772705550978, 0.016806020519612552, 0.012624095637418176, 0.005707718019561048, 0.003371925980058532, 0.00033202604973991967, 0.00737080414581015, 0.007784859235250741, 0.00017897631798990954, 0.013466257984706909, 0.04833007172415582, 0.05475859474564426, 0.041905689738108376, 0.06188749359513035, 0.03650282562551055, 0.04472550602034231, 0.05208090386270359, 0.05107861168793004, 0.0584691800120114, 0.03867879395439888, 0.04165557330908465, 0.03910385691233209, 0.06432903966989001, 0.033283529487304286, 0.04522782609054188, 0.04582246840454607, 0.02484122881568951, 0.037192687457409224, 0.12717380337136297, 0.1342820011424124, 0.10158066279714728, 0.21251538094998246, 0.1394829148459361, 0.35432029062541937, 0.4860483824755826, 0.4368149893502119, 0.4214875544900125, 0.07330359853871737, 0.108419999866742, 0.04635614069560812, 0.06024123190701336, 0.07255452746414282, 0.0787805456167816, 0.07719516419428496, 0.07074258225032404, 0.05777972245431506, 0.14052455482415716, 0.13356022384996247, 0.14683017903321904, 0.14020573928766666, 0.1416931784485871, 0.1431762585067723, 0.14577117462051536, 0.12818953148881151, 0.1388870921238191, 0.025745159717422084, 0.0374709242666319, 0.020772823815252917, 0.02058081374463072, 0.018247032942484864, 0.028245505847767527, 0.04378351484561149, 0.040660811819397735, 0.028876902536213334, 0.024582675797126474, 0.030568284929714196, 0.03828802925072372, 0.029435310877556575, 0.0314666575571797, 0.01624527069901638, 0.06019387879766347, 0.014850276153392183, 0.04203153602755394, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07051714779811447, 0.050388568316825366, 0.06657530212180829, 0.07610647863965947, 0.07910191086982066, 0.07421167697826492, 0.0802247596442508, 0.06594521682532939, 0.1188659440834815, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012936802589496477, 0.008986734935528373, 0.0037489754161104116, 0.01719769321273512, 0.006443897039890567, 0.00867050431656513, 0.016327738041443052, 0.012152685111393335, 0.04025255363603375, 0.23986037543203909, 0.22384106601867249, 0.22230251605311346, 0.24392405082062074, 0.18590348077321228, 0.21778672475501104, 0.23272407629553904, 0.2160570517304916, 0.2023861145718614, 0.06009104262112963, 0.04647092602458147, 0.046735293376154785, 0.07272831046764316, 0.05458011565127685, 0.04933506581586333, 0.04913208408192682, 0.04933456068139952, 0.05319607668185067, 0.15983418983433206, 0.14140502611938577, 0.11875638179781822, 0.09881093741311309, 0.11442465678976732, 0.1096811590441128, 0.1362596175665649, 0.11720718901117455, 0.11298050037292573, 0.1886924383222076, 0.15536304045774307, 0.19145603503316577, 0.16553413333921818, 0.18528261688004588, 0.17486472004538378, 0.17157293179261557, 0.18780326591336305, 0.16638530356052594, 0.1211667052530716, 0.09741448533595287, 0.11377932975701899, 0.09319207394988194, 0.12475899623195452, 0.12427702502269511, 0.11680412126437145, 0.13395860892571565, 0.1199675229190379, 0.1784636468271732, 0.1796409911050736, 0.18968308042968884, 0.16625386787634455, 0.17066850750821283, 0.17172969317379883, 0.16189128943714237, 0.16570647391315052, 0.1823322601577454, 0.11135576590307006, 0.10953001172676635, 0.12721028385784938, 0.1538885401041683, 0.12234249195781244, 0.11183030756171208, 0.11100873606125383, 0.1438503639764469, 0.13741511467001633, 0.13177548435282083, 0.15827902977578578, 0.10177175805175598, 0.12359661739129602, 0.13497999432412489, 0.14639653104516182, 0.1210421154436182, 0.1425495612231853, 0.12768900154499785, 0.12031104420593108, 0.12403639526496757, 0.13101454589236472, 0.10901186389757966, 0.0917859163526964, 0.10352996443442475, 0.15141593514848029, 0.1343010269246141, 0.09543179777226507, 0.18153654293022203, 0.19060303476111362, 0.17304432306225304, 0.17735321035044238, 0.1749203898227295, 0.18094925858463506, 0.1886890476917743, 0.17817367709158172, 0.17520084861502006, 0.05510943682899616, 0.04775136839348182, 0.05602972725983235, 0.053721898125060785, 0.06068258320029596, 0.06442359748792714, 0.06790032119923817, 0.06844617089218097, 0.055230270822729466]}, "mutation_prompt": null}
{"id": "92c2aacb-3e78-4a05-a499-1c6291a446f5", "solution": "import numpy as np\n\nclass MemeticDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.Cr = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.apply_along_axis(func, 1, self.population)\n        self.best_solution = self.population[np.argmin(fitness)]\n        self.best_value = np.min(fitness)\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.Cr\n                trial = np.where(crossover_mask, mutant, self.population[i])\n                \n                # Local Search (Hill Climbing)\n                trial_improved = trial.copy()\n                for j in range(self.dim):\n                    perturb = np.zeros(self.dim)\n                    perturb[j] = (np.random.rand() - 0.5) / 10.0\n                    candidate = np.clip(trial + perturb, self.lower_bound, self.upper_bound)\n                    candidate_value = func(candidate)\n                    evaluations += 1\n                    if candidate_value < func(trial_improved):\n                        trial_improved = candidate\n                        if candidate_value < self.best_value:\n                            self.best_solution = candidate\n                            self.best_value = candidate_value\n                    if evaluations >= self.budget:\n                        break\n\n                trial_value = func(trial_improved)\n                evaluations += 1\n                if trial_value < fitness[i]:\n                    self.population[i] = trial_improved\n                    fitness[i] = trial_value\n                    if trial_value < self.best_value:\n                        self.best_solution = trial_improved\n                        self.best_value = trial_value\n\n        return self.best_solution, self.best_value", "name": "MemeticDifferentialEvolution", "description": "Novel Memetic Differential Evolution with Adaptive Local Search for Efficient Black Box Optimization", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c5569381-8366-4d6c-b5d9-85f0a261ae4f", "metadata": {"aucs": [0.2096295289753396, 0.198194974652661, 0.2122847295639253, 0.21182887572786868, 0.20819474023308104, 0.20329714950251465, 0.24373185772393746, 0.19684133261378323, 0.19311772705550978, 0.016806020519612552, 0.012624095637418176, 0.005707718019561048, 0.003371925980058532, 0.00033202604973991967, 0.00737080414581015, 0.007784859235250741, 0.00017897631798990954, 0.013466257984706909, 0.04833007172415582, 0.05475859474564426, 0.041905689738108376, 0.06188749359513035, 0.03650282562551055, 0.04472550602034231, 0.05208090386270359, 0.05107861168793004, 0.0584691800120114, 0.03867879395439888, 0.04165557330908465, 0.03910385691233209, 0.06432903966989001, 0.033283529487304286, 0.04522782609054188, 0.04582246840454607, 0.02484122881568951, 0.037192687457409224, 0.12717380337136297, 0.1342820011424124, 0.10158066279714728, 0.21251538094998246, 0.1394829148459361, 0.35432029062541937, 0.4860483824755826, 0.4368149893502119, 0.4214875544900125, 0.07330359853871737, 0.108419999866742, 0.04635614069560812, 0.06024123190701336, 0.07255452746414282, 0.0787805456167816, 0.07719516419428496, 0.07074258225032404, 0.05777972245431506, 0.14052455482415716, 0.13356022384996247, 0.14683017903321904, 0.14020573928766666, 0.1416931784485871, 0.1431762585067723, 0.14577117462051536, 0.12818953148881151, 0.1388870921238191, 0.025745159717422084, 0.0374709242666319, 0.020772823815252917, 0.02058081374463072, 0.018247032942484864, 0.028245505847767527, 0.04378351484561149, 0.040660811819397735, 0.028876902536213334, 0.024582675797126474, 0.030568284929714196, 0.03828802925072372, 0.029435310877556575, 0.0314666575571797, 0.01624527069901638, 0.06019387879766347, 0.014850276153392183, 0.04203153602755394, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07051714779811447, 0.050388568316825366, 0.06657530212180829, 0.07610647863965947, 0.07910191086982066, 0.07421167697826492, 0.0802247596442508, 0.06594521682532939, 0.1188659440834815, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012936802589496477, 0.008986734935528373, 0.0037489754161104116, 0.01719769321273512, 0.006443897039890567, 0.00867050431656513, 0.016327738041443052, 0.012152685111393335, 0.04025255363603375, 0.23986037543203909, 0.22384106601867249, 0.22230251605311346, 0.24392405082062074, 0.18590348077321228, 0.21778672475501104, 0.23272407629553904, 0.2160570517304916, 0.2023861145718614, 0.06009104262112963, 0.04647092602458147, 0.046735293376154785, 0.07272831046764316, 0.05458011565127685, 0.04933506581586333, 0.04913208408192682, 0.04933456068139952, 0.05319607668185067, 0.15983418983433206, 0.14140502611938577, 0.11875638179781822, 0.09881093741311309, 0.11442465678976732, 0.1096811590441128, 0.1362596175665649, 0.11720718901117455, 0.11298050037292573, 0.1886924383222076, 0.15536304045774307, 0.19145603503316577, 0.16553413333921818, 0.18528261688004588, 0.17486472004538378, 0.17157293179261557, 0.18780326591336305, 0.16638530356052594, 0.1211667052530716, 0.09741448533595287, 0.11377932975701899, 0.09319207394988194, 0.12475899623195452, 0.12427702502269511, 0.11680412126437145, 0.13395860892571565, 0.1199675229190379, 0.1784636468271732, 0.1796409911050736, 0.18968308042968884, 0.16625386787634455, 0.17066850750821283, 0.17172969317379883, 0.16189128943714237, 0.16570647391315052, 0.1823322601577454, 0.11135576590307006, 0.10953001172676635, 0.12721028385784938, 0.1538885401041683, 0.12234249195781244, 0.11183030756171208, 0.11100873606125383, 0.1438503639764469, 0.13741511467001633, 0.13177548435282083, 0.15827902977578578, 0.10177175805175598, 0.12359661739129602, 0.13497999432412489, 0.14639653104516182, 0.1210421154436182, 0.1425495612231853, 0.12768900154499785, 0.12031104420593108, 0.12403639526496757, 0.13101454589236472, 0.10901186389757966, 0.0917859163526964, 0.10352996443442475, 0.15141593514848029, 0.1343010269246141, 0.09543179777226507, 0.18153654293022203, 0.19060303476111362, 0.17304432306225304, 0.17735321035044238, 0.1749203898227295, 0.18094925858463506, 0.1886890476917743, 0.17817367709158172, 0.17520084861502006, 0.05510943682899616, 0.04775136839348182, 0.05602972725983235, 0.053721898125060785, 0.06068258320029596, 0.06442359748792714, 0.06790032119923817, 0.06844617089218097, 0.055230270822729466]}, "mutation_prompt": null}
