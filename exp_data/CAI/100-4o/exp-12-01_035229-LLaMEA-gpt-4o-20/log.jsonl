{"id": "8dd329ea-c95e-4a26-b804-fc1b241df6c0", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = min(100, budget // 10)\n        self.inertia_weight = 0.7\n        self.cognitive_const = 1.5\n        self.social_const = 1.5\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.num_particles, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_values = np.full(self.num_particles, float('inf'))\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = float('inf')\n        self.eval_count = 0\n\n    def mutation(self, donor, target):\n        return np.clip(target + np.random.uniform(0.5, 1.0) * (donor - target), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.num_particles):\n                if self.eval_count >= self.budget:\n                    break\n                \n                value = func(self.particles[i])\n                self.eval_count += 1\n\n                if value < self.personal_best_values[i]:\n                    self.personal_best_values[i] = value\n                    self.personal_best_positions[i] = self.particles[i]\n\n                if value < self.global_best_value:\n                    self.global_best_value = value\n                    self.global_best_position = self.particles[i]\n\n            for i in range(self.num_particles):\n                donor_idx = np.random.choice(self.num_particles)\n                if donor_idx != i:\n                    donor = self.particles[donor_idx]\n                    target = self.particles[i]\n                    trial = self.mutation(donor, target)\n\n                    trial_value = func(trial)\n                    self.eval_count += 1\n\n                    if trial_value < self.personal_best_values[i]:\n                        self.particles[i] = trial\n                        self.personal_best_values[i] = trial_value\n                        self.personal_best_positions[i] = trial\n\n                        if trial_value < self.global_best_value:\n                            self.global_best_value = trial_value\n                            self.global_best_position = trial\n\n            for i in range(self.num_particles):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_const * r1 * (self.personal_best_positions[i] - self.particles[i])\n                social_velocity = self.social_const * r2 * (self.global_best_position - self.particles[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position", "name": "AdaptivePSO", "description": "The algorithm combines particle swarm optimization with adaptive differential mutation to explore and exploit the search space efficiently.", "configspace": "", "generation": 0, "fitness": 0.2239183386998716, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.42775554664621007, 0.4058902399693626, 0.4647590135621854, 0.5455803306220899, 0.42991156935404884, 0.4765635037453195, 0.5977680346552239, 0.533292226850482, 0.5142053473019471, 0.1276711238201348, 0.05890174218713162, 0.12648485146195398, 0.040199232965665965, 0.09947859613826693, 0.1854040573079151, 0.09343762606418127, 0.18780141465734446, 0.046272292364452405, 0.11788392097793077, 0.12517827525723046, 0.10249912782826809, 0.10431628071403465, 0.14692358204245592, 0.1229123324667114, 0.1280529113568324, 0.12754784031721444, 0.1564661242833748, 0.10256267312621481, 0.10405367678172384, 0.11630968466230296, 0.10158230613351038, 0.08461993821283853, 0.10929811707359571, 0.11258001734939993, 0.09785627859971535, 0.09397147632874092, 0.944064530190757, 0.9632258293996201, 0.9302093720699366, 0.9603552038493913, 0.9454681701576619, 0.9094923445980866, 0.9623297417563169, 0.9611968058012546, 0.9452593275228424, 0.29632183134720236, 0.2739291052197649, 0.28421997002995436, 0.2716349297257358, 0.263587330369646, 0.24143573556951492, 0.2629291193665463, 0.28038551822485314, 0.26628254394679696, 0.5122241918200652, 0.33503925641858145, 0.3401664688007522, 0.2598204071927407, 0.2200485530342099, 0.18923063915589333, 0.21688382495048064, 0.37610480568208526, 0.4267946982330718, 0.24786236517825622, 0.15752990258866617, 0.12833307315801756, 0.14453575250283324, 0.11614487185826361, 0.1194289207325262, 0.11158248920308289, 0.1404434383834996, 0.15269153906743982, 0.0925881815665689, 0.16891885423169184, 0.1734121609247462, 0.18531018971474778, 0.17072203145674647, 0.12220310041735394, 0.16881147192334534, 0.15499863687557758, 0.21116828769635954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02031894609578122, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05670381641839706, 0.05454630652223458, 0.07121116664433758, 0.12399111074766367, 0.07528104369972022, 0.08347090851897176, 0.026043757969214543, 0.08380922749855946, 0.1037018554705712, 0.058959158285567304, 0.0046734148512463936, 0.035003164826374444, 0.08402929868995324, 0.014582133903264571, 0.007604188236023601, 0.004259394729431376, 0.038012640218528904, 0.022717396640217324, 0.020445212307925842, 0.10856382234625017, 0.08814242424777352, 0.09572200028185385, 0.05965000613836058, 0.11608755212286448, 0.13427718032658909, 0.06566005618286219, 0.06992602758960276, 0.10210199007691312, 0.4192387867247057, 0.4523497519203383, 0.44033296573789793, 0.4134365751409038, 0.46831818183418894, 0.43110210658687476, 0.4053212429042038, 0.42907113757813375, 0.43032277147926923, 0.09736097964235157, 0.10129327656611453, 0.12213722675817584, 0.0828590961846376, 0.08287264295321184, 0.09755497512944655, 0.10393597122458409, 0.08650527063454283, 0.08540328634935979, 0.1632426699330497, 0.21220255245720265, 0.16522111463982836, 0.1894947685446009, 0.19841067852909544, 0.1850721701133441, 0.19581958952091005, 0.16326801336809316, 0.14996515462393256, 0.2939488534466128, 0.2603964410384958, 0.27541513256834294, 0.29992518540113733, 0.32447665000487635, 0.2657276686595441, 0.24967312311718637, 0.25977945799915125, 0.29845254288746814, 0.24673505120378614, 0.1900263219110353, 0.22939773898657045, 0.2019486835606995, 0.17877551831337546, 0.24491972612740787, 0.18664084683573157, 0.22066609073443733, 0.255177709350605, 0.2463904162511772, 0.19634514199787367, 0.21707204332569574, 0.19314135845564706, 0.22576388911063294, 0.20772263178212624, 0.2244236245421073, 0.19312010876588215, 0.211430904642686, 0.19682876476527122, 0.19503848826741532, 0.18402698706637255, 0.18703903673597133, 0.2097562648829927, 0.20203424816376514, 0.1819230250442233, 0.21003995330446656, 0.19070661055732252, 0.17999355669963113, 0.18323474625889102, 0.1862570189270356, 0.5741000519561442, 0.19718473653975, 0.1510316431755545, 0.14047286700161565, 0.4522904204494317, 0.5953249895486612, 0.49940238170444995, 0.16688805401101414, 0.3072811118919371, 0.2052331492580004, 0.20577794111782377, 0.3968474557837858, 0.1656894161938175, 0.3924176764324224, 0.5691215520039316, 0.17669498542612017, 0.19684080329407383, 0.19764512139597123, 0.17242175652949032, 0.1869370640977278, 0.18177315422812035, 0.19118178066369884, 0.18326450457038868, 0.19517905717097894, 0.08019330109667477, 0.0925899098588947, 0.0796621984285224, 0.08050518298866849, 0.08909290026782546, 0.07850028635445183, 0.07738189526072148, 0.07954969286340585, 0.07988756214899018]}, "mutation_prompt": null}
{"id": "c259f851-e139-459c-908f-ec193a525dea", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = min(100, budget // 10)\n        self.inertia_weight = 0.7\n        self.cognitive_const = 1.5\n        self.social_const = 1.5\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.num_particles, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_values = np.full(self.num_particles, float('inf'))\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = float('inf')\n        self.eval_count = 0\n\n    def mutation(self, donor, target):\n        return np.clip(target + np.random.uniform(0.5, 1.0) * (donor - target), self.lower_bound, self.upper_bound)\n\n    def levy_flight(self, step_size=0.01, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v) ** (1 / beta)\n        return step_size * step\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.num_particles):\n                if self.eval_count >= self.budget:\n                    break\n                \n                value = func(self.particles[i])\n                self.eval_count += 1\n\n                if value < self.personal_best_values[i]:\n                    self.personal_best_values[i] = value\n                    self.personal_best_positions[i] = self.particles[i]\n\n                if value < self.global_best_value:\n                    self.global_best_value = value\n                    self.global_best_position = self.particles[i]\n\n            for i in range(self.num_particles):\n                donor_idx = np.random.choice(self.num_particles)\n                if donor_idx != i:\n                    donor = self.particles[donor_idx]\n                    target = self.particles[i]\n                    trial = self.mutation(donor, target)\n\n                    trial_value = func(trial)\n                    self.eval_count += 1\n\n                    if trial_value < self.personal_best_values[i]:\n                        self.particles[i] = trial\n                        self.personal_best_values[i] = trial_value\n                        self.personal_best_positions[i] = trial\n\n                        if trial_value < self.global_best_value:\n                            self.global_best_value = trial_value\n                            self.global_best_position = trial\n\n            for i in range(self.num_particles):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_const * r1 * (self.personal_best_positions[i] - self.particles[i])\n                social_velocity = self.social_const * r2 * (self.global_best_position - self.particles[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n                levy_step = self.levy_flight()\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] + levy_step, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position", "name": "AdaptivePSO", "description": "Improved Adaptive PSO with Levy Flight for enhanced exploration and convergence in optimization tasks.", "configspace": "", "generation": 1, "fitness": 0.21234503547580577, "feedback": "", "error": "", "parent_id": "8dd329ea-c95e-4a26-b804-fc1b241df6c0", "metadata": {"aucs": [0.4760640002640546, 0.42563788569637273, 0.4980728856082912, 0.4812121837421015, 0.44070857409511144, 0.42895058472906, 0.46241901245488515, 0.4291553405828339, 0.4474609263240926, 0.03501592436395862, 0.06083652929457728, 9.999999999998899e-05, 0.02374319631226185, 0.024759682842018682, 0.04040775145502995, 0.02214124717150645, 0.057030756235266766, 0.01371464892268448, 0.1332931347881724, 0.10732509230942544, 0.08684078280276775, 0.10809474078815184, 0.09206649970256153, 0.10694214874694041, 0.1047800612582972, 0.11198543614360312, 0.11991593206767015, 0.0808590333585304, 0.09283187622254951, 0.09025182781346353, 0.0971047518824496, 0.07809522729953444, 0.11508213393090283, 0.09743224240427173, 0.09316965041367564, 0.08453715592755284, 0.941595158289494, 0.9613210669433097, 0.9428516199481031, 0.9057636008687101, 0.9461324009990365, 0.9314254663617794, 0.9640077855057365, 0.9619971341706314, 0.9551760044790203, 0.19493201843792451, 0.28238727103391226, 0.20292821608383338, 0.2778628092289719, 0.2733301552650107, 0.24667210646845772, 0.21151839639602388, 0.24786748484926469, 0.25937411823531986, 0.6297016330419192, 0.20006714649126878, 0.3276509058871302, 0.20371925488084552, 0.20781905559507063, 0.18616115686294754, 0.3113700325712735, 0.35529384174882783, 0.34610165998538656, 0.13971022296592295, 0.14833198922053503, 0.18451361645099518, 0.10610312398771171, 0.14239197758395095, 0.11856399743097079, 0.11705801177305619, 0.15240656053642576, 0.16020406803623755, 0.14071370870571687, 0.1305037588405077, 0.17898893134027383, 0.13789985697200868, 0.16071462415568372, 0.1927155829981857, 0.15894452775010637, 0.11882294441423868, 0.17716307519638763, 0.01037770960321327, 0.00710489694899008, 0.01306481625800282, 0.038869018168664615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035860768366338114, 0.030263734496519867, 0.060534853848524306, 0.054921155490083806, 0.06716939440980219, 0.11517966094183807, 0.15709846714205633, 0.03122856670510099, 0.11904928135435022, 0.10192797915252927, 0.04421984198848039, 0.008584569619167648, 0.00795872802888975, 0.0014065761859203274, 9.999999999998899e-05, 9.999999999998899e-05, 0.014146251798647591, 9.999999999998899e-05, 0.0055053148086881, 0.015582022063983625, 0.10475571299513431, 0.09000450770332313, 0.07914165923903405, 0.032044724408973546, 0.09384575784370242, 0.06960495288632595, 0.09088959874063873, 0.06464655215564052, 0.07962290747887468, 0.39687859953535287, 0.45938281604121445, 0.36182730030427535, 0.4033112432588879, 0.3633254425647394, 0.36976315249484204, 0.4054708808605063, 0.3755003380099724, 0.40126090344089704, 0.13286112654620397, 0.08069501565247317, 0.08242753976979711, 0.08672566302570062, 0.1126155515178291, 0.10784092957651048, 0.11543584203183277, 0.08411392426733488, 0.10141667611650829, 0.19275874628990608, 0.19529025399635724, 0.18783843808066136, 0.20811180725107803, 0.22938978654677133, 0.18869300218607055, 0.19742170597841124, 0.17925554653493514, 0.20812283871678006, 0.287353525422121, 0.3037593213067189, 0.25793677122759395, 0.29912102401771457, 0.2938807905813212, 0.2575297469136776, 0.2838999588370713, 0.29104771036832167, 0.24944218965820242, 0.17217125056559235, 0.20419778808751143, 0.2448438425624263, 0.17988625605601305, 0.2057945593070415, 0.1679785638370762, 0.18595660498617905, 0.21117889343078666, 0.19816806683121813, 0.20681417511677136, 0.22105486223819715, 0.21402329841258727, 0.22321401182212142, 0.20939957200334358, 0.20831889148030602, 0.21084828340018924, 0.20609867685495942, 0.21923387246414427, 0.177060956364398, 0.1848538150997142, 0.2227339673414902, 0.17735065609470202, 0.1940838961931769, 0.18526855142368226, 0.23551574145958742, 0.20610574685964, 0.18003372868091772, 0.12862171941275957, 0.18602961406730179, 0.18552476740660484, 0.5362339465866283, 0.19821466207980676, 0.14978585748161644, 0.5329109441405318, 0.1951764996496962, 0.6446954699355718, 0.39836213172901314, 0.1681133983845794, 0.07296192202865293, 0.20846436929498613, 0.2058641701790056, 0.4281797828156312, 0.16311245333326263, 0.36063190221704966, 0.5655682074105276, 0.1680413916659782, 0.19464566713986664, 0.1818829067847505, 0.2002030448341856, 0.17807486825295216, 0.17931833984151058, 0.18848376469180805, 0.18534771674049833, 0.18063147512052946, 0.07551727454368284, 0.09146055396787522, 0.08454041003100976, 0.0868047727030351, 0.0882719017268222, 0.08763177542969203, 0.08142048725627027, 0.08478300945509831, 0.07536962028840188]}, "mutation_prompt": null}
