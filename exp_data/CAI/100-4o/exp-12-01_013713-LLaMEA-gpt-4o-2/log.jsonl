{"id": "f5a06136-73bd-4eb0-a753-0a10c6733e33", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 30\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            fitness = np.apply_along_axis(func, 1, positions)\n            \n            # Update personal and global bests\n            better_mask = fitness < personal_best_scores\n            personal_best_scores[better_mask] = fitness[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_index = np.argmin(personal_best_scores)\n            if personal_best_scores[min_index] < global_best_score:\n                global_best_score = personal_best_scores[min_index]\n                global_best_position = personal_best_positions[min_index]\n\n            # Update velocities and positions (PSO)\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities \n                          + self.c1 * r1 * (personal_best_positions - positions)\n                          + self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution (DE) Mutation\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(cross_points, mutant, positions[i])\n\n                # Evaluate trial vector\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < personal_best_scores[i]:\n                    personal_best_scores[i] = trial_fitness\n                    personal_best_positions[i] = trial\n\n            evaluations += self.population_size  # Add population size evaluations for PSO\n\n        return global_best_position, global_best_score", "name": "HybridPSO_DE", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Evolution to balance exploration and exploitation dynamically.", "configspace": "", "generation": 0, "fitness": 0.24675647668528672, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7805300072631322, 0.7805300072631322, 0.7805300072631322, 0.19027852344972596, 0.19027852344972596, 0.19027852344972596, 0.8051287422285617, 0.8051287422285617, 0.8051287422285617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.5186988230610633, 0.5186988230610633, 0.5186988230610633, 0.04859864930222613, 0.04859864930222613, 0.04859864930222613, 0.1509573829495654, 0.1509573829495654, 0.1509573829495654, 0.13912228360047707, 0.13912228360047707, 0.13912228360047707, 0.15192659953656007, 0.15192659953656007, 0.15192659953656007, 0.12108240390565717, 0.12108240390565717, 0.12108240390565717, 0.13181416211234487, 0.13181416211234487, 0.13181416211234487, 0.12192874059035563, 0.12192874059035563, 0.12192874059035563, 0.9869605206436097, 0.9869605206436097, 0.9869605206436097, 0.9896671252319512, 0.9896671252319512, 0.9896671252319512, 0.9886980763203368, 0.9886980763203368, 0.9886980763203368, 0.36651205520599406, 0.36651205520599406, 0.36651205520599406, 0.3338021094064558, 0.3338021094064558, 0.3338021094064558, 0.3642839013765572, 0.3642839013765572, 0.3642839013765572, 0.24506689010774196, 0.24506689010774196, 0.24506689010774196, 0.15957023922220304, 0.15957023922220304, 0.15957023922220304, 0.1158938068527321, 0.1158938068527321, 0.1158938068527321, 0.18559880066603573, 0.18559880066603573, 0.18559880066603573, 0.12601986231490225, 0.12601986231490225, 0.12601986231490225, 0.16292085468175665, 0.16292085468175665, 0.16292085468175665, 0.17494891443046579, 0.17494891443046579, 0.17494891443046579, 0.16829278921139756, 0.16829278921139756, 0.16829278921139756, 0.2088579012013343, 0.2088579012013343, 0.2088579012013343, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03540585829921872, 0.03540585829921872, 0.03540585829921872, 0.014936845071681248, 0.014936845071681248, 0.014936845071681248, 0.04296727038902004, 0.04296727038902004, 0.04296727038902004, 0.0766944729812783, 0.0766944729812783, 0.0766944729812783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.23236019452373302, 0.23236019452373302, 0.23236019452373302, 0.03655979583483915, 0.03655979583483915, 0.03655979583483915, 0.07912406228085234, 0.07912406228085234, 0.07912406228085234, 0.5262704349604774, 0.5262704349604774, 0.5262704349604774, 0.49371169917821145, 0.49371169917821145, 0.49371169917821145, 0.491748459148417, 0.491748459148417, 0.491748459148417, 0.09856195884362673, 0.09856195884362673, 0.09856195884362673, 0.08141898877879672, 0.08141898877879672, 0.08141898877879672, 0.08040124599867815, 0.08040124599867815, 0.08040124599867815, 0.22724438284167803, 0.22724438284167803, 0.22724438284167803, 0.2800224573111776, 0.2800224573111776, 0.2800224573111776, 0.19149239814816443, 0.19149239814816443, 0.19149239814816443, 0.3973437682775103, 0.3973437682775103, 0.3973437682775103, 0.2892324776426545, 0.2892324776426545, 0.2892324776426545, 0.3837368367086138, 0.3837368367086138, 0.3837368367086138, 0.270610594418743, 0.270610594418743, 0.270610594418743, 0.24474244911663168, 0.24474244911663168, 0.24474244911663168, 0.12039831497820286, 0.12039831497820286, 0.12039831497820286, 0.18338393963416533, 0.18338393963416533, 0.18338393963416533, 0.1866529143162463, 0.1866529143162463, 0.1866529143162463, 0.1837638773905007, 0.1837638773905007, 0.1837638773905007, 0.5508502548226537, 0.5508502548226537, 0.5508502548226537, 0.19741769216971305, 0.19741769216971305, 0.19741769216971305, 0.4260661099280979, 0.4260661099280979, 0.4260661099280979, 0.8812468566017362, 0.8812468566017362, 0.8812468566017362, 0.15711568235426254, 0.15711568235426254, 0.15711568235426254, 0.19561267909304414, 0.19561267909304414, 0.19561267909304414, 0.16902352718423486, 0.16902352718423486, 0.16902352718423486, 0.20774316898012635, 0.20774316898012635, 0.20774316898012635, 0.15565866112386717, 0.15565866112386717, 0.15565866112386717, 0.2006608209227443, 0.2006608209227443, 0.2006608209227443, 0.1991699154552713, 0.1991699154552713, 0.1991699154552713, 0.19282025227077737, 0.19282025227077737, 0.19282025227077737, 0.08640422869495634, 0.08640422869495634, 0.08640422869495634, 0.07058252434308976, 0.07058252434308976, 0.07058252434308976, 0.08954808544980752, 0.08954808544980752, 0.08954808544980752]}, "mutation_prompt": null}
{"id": "fab932f4-d6ea-4fef-afe9-c53e5fed6d48", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 30\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            fitness = np.apply_along_axis(func, 1, positions)\n            \n            # Update personal and global bests\n            better_mask = fitness < personal_best_scores\n            personal_best_scores[better_mask] = fitness[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_index = np.argmin(personal_best_scores)\n            if personal_best_scores[min_index] < global_best_score:\n                global_best_score = personal_best_scores[min_index]\n                global_best_position = personal_best_positions[min_index]\n\n            # Update velocities and positions (PSO)\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities \n                          + self.c1 * r1 * (personal_best_positions - positions)\n                          + self.c2 * r2 * (global_best_position - positions)) * (0.5 + np.random.rand(self.population_size, self.dim)) # Enhanced\n\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution (DE) Mutation\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(cross_points, mutant, positions[i])\n\n                # Evaluate trial vector\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < personal_best_scores[i]:\n                    personal_best_scores[i] = trial_fitness\n                    personal_best_positions[i] = trial\n\n            evaluations += self.population_size  # Add population size evaluations for PSO\n\n        return global_best_position, global_best_score", "name": "HybridPSO_DE", "description": "Enhanced velocity update rule in PSO component to improve convergence speed and solution quality.", "configspace": "", "generation": 1, "fitness": 0.2333793448917463, "feedback": "", "error": "", "parent_id": "f5a06136-73bd-4eb0-a753-0a10c6733e33", "metadata": {"aucs": [0.7677072133048694, 0.7677072133048694, 0.7677072133048694, 0.18935952329832273, 0.18935952329832273, 0.18935952329832273, 0.8016304841101753, 0.8016304841101753, 0.8016304841101753, 0.038798012801486426, 0.038798012801486426, 0.038798012801486426, 0.5239418008076571, 0.5239418008076571, 0.5239418008076571, 0.004659140177097676, 0.004659140177097676, 0.004659140177097676, 0.11161230722966176, 0.11161230722966176, 0.11161230722966176, 0.16777177681496158, 0.16777177681496158, 0.16777177681496158, 0.1414401208403906, 0.1414401208403906, 0.1414401208403906, 0.13603679699100635, 0.13603679699100635, 0.13603679699100635, 0.12279076635157926, 0.12279076635157926, 0.12279076635157926, 0.11481002938316198, 0.11481002938316198, 0.11481002938316198, 0.9900624948977914, 0.9900624948977914, 0.9900624948977914, 0.9855784799318854, 0.9855784799318854, 0.9855784799318854, 0.9823992908493873, 0.9823992908493873, 0.9823992908493873, 0.2812694070048477, 0.2812694070048477, 0.2812694070048477, 0.3107320582744333, 0.3107320582744333, 0.3107320582744333, 0.08921071356030463, 0.08921071356030463, 0.08921071356030463, 0.06072868845948909, 0.06072868845948909, 0.06072868845948909, 0.2038337640632778, 0.2038337640632778, 0.2038337640632778, 0.11705646917510981, 0.11705646917510981, 0.11705646917510981, 0.15740302411729612, 0.15740302411729612, 0.15740302411729612, 0.16168733272036373, 0.16168733272036373, 0.16168733272036373, 0.16303039604948222, 0.16303039604948222, 0.16303039604948222, 0.12001328210261075, 0.12001328210261075, 0.12001328210261075, 0.17711338475452598, 0.17711338475452598, 0.17711338475452598, 0.199893924800145, 0.199893924800145, 0.199893924800145, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.057669978101486, 0.057669978101486, 0.057669978101486, 0.05561930561365791, 0.05561930561365791, 0.05561930561365791, 0.04839725719925392, 0.04839725719925392, 0.04839725719925392, 0.04306850839516996, 0.04306850839516996, 0.04306850839516996, 0.11555640723862193, 0.11555640723862193, 0.11555640723862193, 0.07478864741867997, 0.07478864741867997, 0.07478864741867997, 0.11302071005210368, 0.11302071005210368, 0.11302071005210368, 0.034981429593756164, 0.034981429593756164, 0.034981429593756164, 0.07568679361074537, 0.07568679361074537, 0.07568679361074537, 0.5048437074429651, 0.5048437074429651, 0.5048437074429651, 0.4669677220099525, 0.4669677220099525, 0.4669677220099525, 0.5203094998751377, 0.5203094998751377, 0.5203094998751377, 0.08771176513754964, 0.08771176513754964, 0.08771176513754964, 0.13785913129064953, 0.13785913129064953, 0.13785913129064953, 0.09257195945951702, 0.09257195945951702, 0.09257195945951702, 0.2183251099923713, 0.2183251099923713, 0.2183251099923713, 0.1561586186952567, 0.1561586186952567, 0.1561586186952567, 0.1327377941649025, 0.1327377941649025, 0.1327377941649025, 0.3379070363576874, 0.3379070363576874, 0.3379070363576874, 0.23736256608519124, 0.23736256608519124, 0.23736256608519124, 0.2852375239373808, 0.2852375239373808, 0.2852375239373808, 0.28682456445984095, 0.28682456445984095, 0.28682456445984095, 0.1777134013773568, 0.1777134013773568, 0.1777134013773568, 0.12195977284718684, 0.12195977284718684, 0.12195977284718684, 0.20393698132923077, 0.20393698132923077, 0.20393698132923077, 0.20105880076266802, 0.20105880076266802, 0.20105880076266802, 0.18504735941603767, 0.18504735941603767, 0.18504735941603767, 0.20003207346213658, 0.20003207346213658, 0.20003207346213658, 0.1789167247714626, 0.1789167247714626, 0.1789167247714626, 0.20522178917458755, 0.20522178917458755, 0.20522178917458755, 0.8445857063894223, 0.8445857063894223, 0.8445857063894223, 0.15804276625127, 0.15804276625127, 0.15804276625127, 0.4528537683644064, 0.4528537683644064, 0.4528537683644064, 0.20754155783430062, 0.20754155783430062, 0.20754155783430062, 0.4752813990796515, 0.4752813990796515, 0.4752813990796515, 0.15493962247125814, 0.15493962247125814, 0.15493962247125814, 0.1894287661860059, 0.1894287661860059, 0.1894287661860059, 0.18926152392108275, 0.18926152392108275, 0.18926152392108275, 0.19312289808339023, 0.19312289808339023, 0.19312289808339023, 0.08087710931529424, 0.08087710931529424, 0.08087710931529424, 0.08515733592894381, 0.08515733592894381, 0.08515733592894381, 0.09385675623684442, 0.09385675623684442, 0.09385675623684442]}, "mutation_prompt": null}
