{"id": "4fa61f35-2b08-4863-b42a-745e18bb1c19", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(10, budget // (dim * 10))\n        self.mutation_factor = 0.5\n        self.crossover_rate = 0.7\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation strategy: choose 3 random individuals\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                mutant_vector = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover strategy\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection strategy\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "The algorithm uses differential evolution with adaptive population size and mutation strategies to effectively explore and exploit the search space within a limited budget.", "configspace": "", "generation": 0, "fitness": 0.17043620249947763, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.39994945975084706, 0.37001974954884476, 0.3669012517206113, 0.390646594553671, 0.38446063937980546, 0.39338585399468484, 0.3941911067829773, 0.39404385607410075, 0.37555380889086765, 0.09530978181164051, 0.10328552462048102, 0.09523887264906716, 0.09783497009212827, 0.10847313309172346, 0.09280120709406725, 0.08272607219696038, 0.10368902200407681, 0.10500436321008422, 0.09480292679623203, 0.08852620049984017, 0.09542833485116475, 0.09116789067853293, 0.10086378417661324, 0.09765522904880586, 0.10145767578496179, 0.09775086259685772, 0.0906118735934831, 0.08438642665680052, 0.08269390397849419, 0.07431726752036649, 0.07927056072428074, 0.08601557159574191, 0.08793803079863849, 0.07313009083760591, 0.07415951118975339, 0.07489913274203297, 0.8440463015577915, 0.7945677566356282, 0.8556982992283855, 0.8004172870479195, 0.8857741059595023, 0.8688460413457835, 0.7359000807175229, 0.8569633210090276, 0.8578463281493498, 0.1346601942400788, 0.1429222750859681, 0.14477620557254212, 0.14337779384548088, 0.14365925272166824, 0.1435411100250532, 0.14268698589717732, 0.1605266920529973, 0.14706221705003408, 0.20297137600359838, 0.17710633943098242, 0.1934981227859356, 0.2053200846347235, 0.20421480562955618, 0.2167488239224924, 0.22771995559357872, 0.24298818786117504, 0.2042394409391486, 0.0984821835564319, 0.08335701809495966, 0.0975326102422106, 0.08758156705417586, 0.10267026333901996, 0.10467541139858016, 0.10140346860448024, 0.11603804105290927, 0.09420154288367955, 0.08499072551783737, 0.08833856379243044, 0.09039767378904728, 0.11725333924251757, 0.10522695348588529, 0.09857476208954974, 0.07785117474060665, 0.08033783347617995, 0.109240971174411, 9.999999999998899e-05, 0.003023266190023577, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07392297975508122, 0.0651179333422005, 0.08852667091760558, 0.09215281696078725, 0.08658752175362383, 0.07530049599824762, 0.07625514395305577, 0.07595690767448615, 0.06797027981501036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04133479675872409, 0.05947571781977368, 0.044127411115246096, 0.04610298601168583, 0.051197884488016876, 0.054777489840895255, 0.04535588214391206, 0.04679124656253264, 0.05351806538066717, 0.3435030127717227, 0.32529184925227717, 0.32177549286652907, 0.33998140895020557, 0.32678773980546816, 0.3473340286495904, 0.3422145307083614, 0.32161703397399966, 0.33895846637380955, 0.08036074587325837, 0.07612243527619289, 0.08365183672960119, 0.08030360252672486, 0.08124302920406012, 0.07748528015707346, 0.08157191451938939, 0.0879489569329257, 0.07742318897674572, 0.15009893606506397, 0.15120025659827585, 0.13636593652666285, 0.16568339630600726, 0.13682926056754696, 0.13872826623599033, 0.14850826791942306, 0.1323719726351783, 0.12885643666071123, 0.2139036714769429, 0.2171011041537214, 0.21231001444563768, 0.21333181852094996, 0.21777828828067514, 0.22160595126374116, 0.21990741769260846, 0.22950030751991835, 0.21273529266489355, 0.15361327071388964, 0.15150799893917577, 0.16033551054382844, 0.1494669797324214, 0.15560305373917194, 0.14425463666979754, 0.15650583440546284, 0.16285578901326248, 0.1489105230530644, 0.222925344776031, 0.18502756874579362, 0.18652135200078013, 0.17713742620453354, 0.18575142032070413, 0.1739023315817374, 0.17373945058460372, 0.19554555749386515, 0.18645341848949948, 0.17266183417340053, 0.174777042332802, 0.17010883358920492, 0.1725277326284942, 0.18041635478002904, 0.1803307771146252, 0.1855442973765561, 0.16850477937812214, 0.17766018502286263, 0.1808046678450833, 0.1683368658704707, 0.18586556034671742, 0.16217189497367213, 0.1720678035433506, 0.18924762624125258, 0.25917478480547307, 0.22674962179681213, 0.15926025245625952, 0.19384452122950635, 0.1721690865587372, 0.15526293459821483, 0.20220024293868977, 0.15527801450946987, 0.2053662875854253, 0.1931725773253965, 0.18141475501576065, 0.18402241151563703, 0.1909512946493762, 0.18769766489353112, 0.18531693027087437, 0.1989591033613347, 0.19141437767592584, 0.1874863254074648, 0.18669358289878357, 0.1831272619212735, 0.1959579670602437, 0.06936978606566613, 0.06776395947377278, 0.06419304726457908, 0.08021001288215035, 0.07932909508901687, 0.0676673152394136, 0.06603889445078226, 0.07168141281041207, 0.0669518203346019]}, "mutation_prompt": null}
{"id": "2ca1ee94-6f78-46a6-9666-d12c28429459", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(10, budget // (dim * 10))\n        self.mutation_factor = 0.5\n        self.crossover_rate = 0.7\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation strategy: choose 3 random individuals\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                mutant_vector = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover strategy\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Selection strategy\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "The algorithm uses differential evolution with adaptive population size and mutation strategies to effectively explore and exploit the search space within a limited budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fa61f35-2b08-4863-b42a-745e18bb1c19", "metadata": {"aucs": [0.39994945975084706, 0.37001974954884476, 0.3669012517206113, 0.390646594553671, 0.38446063937980546, 0.39338585399468484, 0.3941911067829773, 0.39404385607410075, 0.37555380889086765, 0.09530978181164051, 0.10328552462048102, 0.09523887264906716, 0.09783497009212827, 0.10847313309172346, 0.09280120709406725, 0.08272607219696038, 0.10368902200407681, 0.10500436321008422, 0.09480292679623203, 0.08852620049984017, 0.09542833485116475, 0.09116789067853293, 0.10086378417661324, 0.09765522904880586, 0.10145767578496179, 0.09775086259685772, 0.0906118735934831, 0.08438642665680052, 0.08269390397849419, 0.07431726752036649, 0.07927056072428074, 0.08601557159574191, 0.08793803079863849, 0.07313009083760591, 0.07415951118975339, 0.07489913274203297, 0.8440463015577915, 0.7945677566356282, 0.8556982992283855, 0.8004172870479195, 0.8857741059595023, 0.8688460413457835, 0.7359000807175229, 0.8569633210090276, 0.8578463281493498, 0.1346601942400788, 0.1429222750859681, 0.14477620557254212, 0.14337779384548088, 0.14365925272166824, 0.1435411100250532, 0.14268698589717732, 0.1605266920529973, 0.14706221705003408, 0.20297137600359838, 0.17710633943098242, 0.1934981227859356, 0.2053200846347235, 0.20421480562955618, 0.2167488239224924, 0.22771995559357872, 0.24298818786117504, 0.2042394409391486, 0.0984821835564319, 0.08335701809495966, 0.0975326102422106, 0.08758156705417586, 0.10267026333901996, 0.10467541139858016, 0.10140346860448024, 0.11603804105290927, 0.09420154288367955, 0.08499072551783737, 0.08833856379243044, 0.09039767378904728, 0.11725333924251757, 0.10522695348588529, 0.09857476208954974, 0.07785117474060665, 0.08033783347617995, 0.109240971174411, 9.999999999998899e-05, 0.003023266190023577, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07392297975508122, 0.0651179333422005, 0.08852667091760558, 0.09215281696078725, 0.08658752175362383, 0.07530049599824762, 0.07625514395305577, 0.07595690767448615, 0.06797027981501036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04133479675872409, 0.05947571781977368, 0.044127411115246096, 0.04610298601168583, 0.051197884488016876, 0.054777489840895255, 0.04535588214391206, 0.04679124656253264, 0.05351806538066717, 0.3435030127717227, 0.32529184925227717, 0.32177549286652907, 0.33998140895020557, 0.32678773980546816, 0.3473340286495904, 0.3422145307083614, 0.32161703397399966, 0.33895846637380955, 0.08036074587325837, 0.07612243527619289, 0.08365183672960119, 0.08030360252672486, 0.08124302920406012, 0.07748528015707346, 0.08157191451938939, 0.0879489569329257, 0.07742318897674572, 0.15009893606506397, 0.15120025659827585, 0.13636593652666285, 0.16568339630600726, 0.13682926056754696, 0.13872826623599033, 0.14850826791942306, 0.1323719726351783, 0.12885643666071123, 0.2139036714769429, 0.2171011041537214, 0.21231001444563768, 0.21333181852094996, 0.21777828828067514, 0.22160595126374116, 0.21990741769260846, 0.22950030751991835, 0.21273529266489355, 0.15361327071388964, 0.15150799893917577, 0.16033551054382844, 0.1494669797324214, 0.15560305373917194, 0.14425463666979754, 0.15650583440546284, 0.16285578901326248, 0.1489105230530644, 0.222925344776031, 0.18502756874579362, 0.18652135200078013, 0.17713742620453354, 0.18575142032070413, 0.1739023315817374, 0.17373945058460372, 0.19554555749386515, 0.18645341848949948, 0.17266183417340053, 0.174777042332802, 0.17010883358920492, 0.1725277326284942, 0.18041635478002904, 0.1803307771146252, 0.1855442973765561, 0.16850477937812214, 0.17766018502286263, 0.1808046678450833, 0.1683368658704707, 0.18586556034671742, 0.16217189497367213, 0.1720678035433506, 0.18924762624125258, 0.25917478480547307, 0.22674962179681213, 0.15926025245625952, 0.19384452122950635, 0.1721690865587372, 0.15526293459821483, 0.20220024293868977, 0.15527801450946987, 0.2053662875854253, 0.1931725773253965, 0.18141475501576065, 0.18402241151563703, 0.1909512946493762, 0.18769766489353112, 0.18531693027087437, 0.1989591033613347, 0.19141437767592584, 0.1874863254074648, 0.18669358289878357, 0.1831272619212735, 0.1959579670602437, 0.06936978606566613, 0.06776395947377278, 0.06419304726457908, 0.08021001288215035, 0.07932909508901687, 0.0676673152394136, 0.06603889445078226, 0.07168141281041207, 0.0669518203346019]}, "mutation_prompt": null}
