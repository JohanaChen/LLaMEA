{"id": "63b28130-cf16-4422-8e7b-34d5d7c095c1", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        \n        # Evaluate initial positions\n        scores = np.array([func(pos) for pos in positions])\n        self.func_evals += self.swarm_size\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = scores\n        \n        # Find the global best\n        g_best_pos = personal_best_positions[np.argmin(personal_best_scores)]\n        g_best_score = np.min(personal_best_scores)\n        \n        # PSO and DE parameters\n        inertia_weight = 0.7\n        cognitive_param = 1.5\n        social_param = 1.5\n        F = 0.8  # Differential weight\n        CR = 0.9  # Crossover probability\n        \n        while self.func_evals < self.budget:\n            # Update velocities and positions for PSO\n            r1, r2 = np.random.rand(self.swarm_size, self.dim), np.random.rand(self.swarm_size, self.dim)\n            velocities = (inertia_weight * velocities + \n                          cognitive_param * r1 * (personal_best_positions - positions) +\n                          social_param * r2 * (g_best_pos - positions))\n            velocities = np.clip(velocities, -self.vel_max, self.vel_max)\n            positions = positions + velocities\n            positions = np.clip(positions, self.lower_bound, self.upper_bound)\n            \n            # DE mutation and crossover\n            for i in range(self.swarm_size):\n                candidates = list(range(self.swarm_size))\n                candidates.remove(i)\n                a, b, c = positions[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, positions[i])\n                \n                trial_score = func(trial)\n                self.func_evals += 1\n                \n                if trial_score < scores[i]:\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    positions[i] = trial\n                    scores[i] = trial_score\n                    \n                    if trial_score < g_best_score:\n                        g_best_pos = trial\n                        g_best_score = trial_score\n\n        return g_best_pos, g_best_score", "name": "HybridPSODE", "description": "A hybrid particle swarm and differential evolution algorithm that adaptively balances exploration and exploitation for efficient convergence in diverse optimization landscapes.", "configspace": "", "generation": 0, "fitness": 0.3019691725529942, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.795848510592283, 0.7989837068448961, 0.7954661412456008, 0.8194982171506854, 0.7974182025818438, 0.8064583934840148, 0.8294408663218479, 0.8162544177328063, 0.7907945905418712, 0.5892294894989125, 0.580038996098043, 0.6223480400007138, 0.63805866141263, 0.5060629174221984, 0.5735358732369852, 0.6092422781744893, 0.615360402951523, 0.6209581298395345, 0.11712812694468033, 0.14478149525598505, 0.10706795721081563, 0.11767780302750108, 0.1366945964889812, 0.10328024301325334, 0.12683019191701494, 0.3371683739105906, 0.13392444554069405, 0.10756535912683574, 0.1216701972517289, 0.11261953869227603, 0.13342080293934666, 0.11005466672847874, 0.1369918737973923, 0.1051130533489617, 0.11170450778721952, 0.09873176214379886, 0.9794826336395402, 0.9785006637733696, 0.9721257215728629, 0.9768100733446954, 0.9697477629617205, 0.9759622331481106, 0.9845021850262762, 0.9774213945737026, 0.9784056728862192, 0.42737908171948824, 0.443561478353649, 0.41432596461147786, 0.41885215198799586, 0.48482751587318695, 0.4816207824974029, 0.4701351116539465, 0.4321847256414343, 0.4290935796716788, 0.7184529310149192, 0.7786294172332691, 0.2245727741551795, 0.21291295353005313, 0.2084652874166082, 0.7158426738619506, 0.6096409137325072, 0.7788605723710524, 0.7626745196124034, 0.19053354188755223, 0.18539295596399685, 0.18802773621296487, 0.2133203624819312, 0.18618966396989423, 0.1855008506347049, 0.2271086066347121, 0.2001480618857262, 0.21633652511010415, 0.1914031566059472, 0.2169572766824669, 0.2187511447753805, 0.24181998427629803, 0.19661021696917091, 0.20779509163781795, 0.19135396917782088, 0.21004541769486673, 0.23482703679320438, 0.05399621906907104, 0.009456177854646364, 0.013482953503444306, 0.052156194177338744, 0.028160005675826327, 0.02456118218190384, 0.026503920393500247, 0.0014970493687381792, 9.999999999998899e-05, 0.08381124135033968, 0.09079603588722385, 0.07192313333229772, 0.057120266296143196, 0.02903140916350222, 0.0554504710950241, 0.1734176555353597, 0.13560902985685408, 0.08761435491859271, 0.09403806356953537, 0.11358455268479084, 0.07018482397865433, 0.06794204866992293, 0.12115718803071507, 0.08954144226953775, 0.04760034556334136, 0.08629595377521149, 0.10010781846117989, 0.1572669797644337, 0.20376316817896978, 0.2110189340147013, 0.20142597287324737, 0.22439842436452595, 0.12676513465580208, 0.1462379858985774, 0.06445856532566652, 0.09927692560897361, 0.5055683854473394, 0.5260272937122599, 0.5009380296165818, 0.5394469490059043, 0.5341953421965575, 0.5121093237023979, 0.5224948089931087, 0.5104931813630986, 0.5315702589296512, 0.10637528156719511, 0.12008940288719061, 0.11029660679101949, 0.13417717321123723, 0.13719988274109696, 0.12030248024542856, 0.11707125044329592, 0.1450511626899561, 0.10098713004782567, 0.15328661312857295, 0.13658421136031962, 0.27455299168480884, 0.15481975304017703, 0.16487074360027532, 0.1862273431813144, 0.28419239302921295, 0.2683553364591196, 0.1332944633180737, 0.34600932682064045, 0.3370703336679457, 0.42165654881493697, 0.4244271153547152, 0.42843256014157716, 0.39446256048744, 0.4145032361305324, 0.4359774379914396, 0.4375294185018477, 0.2095612361817003, 0.2652180651937134, 0.2374693556280847, 0.22186774772527418, 0.2919600954381153, 0.26520676178868174, 0.24786189554129934, 0.2649566922326938, 0.20807165451897258, 0.2188885465902387, 0.2188587561998061, 0.21017228353631068, 0.23742742177728393, 0.23114487541222928, 0.2167602755786816, 0.20768112252777748, 0.2033731671396859, 0.21364614023068373, 0.2048939837130137, 0.6027845360063127, 0.20482930515258813, 0.22108629303342864, 0.2317726794093662, 0.22123543411608826, 0.24240740970312158, 0.4263554271163704, 0.5377128955267964, 0.17124894122167167, 0.19680357197162723, 0.18746339885669527, 0.8688190196497994, 0.1980669527519463, 0.19904979202159767, 0.14096602683580417, 0.17353469940592203, 0.16232310746991918, 0.6284626070787762, 0.2070911962191292, 0.5622564067491925, 0.21128836489556257, 0.16692127072654006, 0.2096219932542298, 0.15555924618184724, 0.21235110619783704, 0.21245450935165444, 0.18212273120403277, 0.18061773607945997, 0.18002835835480524, 0.18235941609389716, 0.1787176283489944, 0.1815674403166253, 0.18892242257407554, 0.18761558298588366, 0.18831670623052155, 0.08268482619475814, 0.08482283666141088, 0.09372643813502435, 0.0822912043890065, 0.09052402067077947, 0.08660835594712646, 0.08710386388786939, 0.09031972796815424, 0.08457254437886208]}, "mutation_prompt": null}
{"id": "0372609d-0bfb-468e-96ec-a22b8f92f853", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        \n        # Evaluate initial positions\n        scores = np.array([func(pos) for pos in positions])\n        self.func_evals += self.swarm_size\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = scores\n        \n        # Find the global best\n        g_best_pos = personal_best_positions[np.argmin(personal_best_scores)]\n        g_best_score = np.min(personal_best_scores)\n        \n        # PSO and DE parameters\n        inertia_weight = 0.7\n        cognitive_param = 1.5\n        social_param = 1.5\n        F = 0.8  # Differential weight\n        CR = 0.9  # Crossover probability\n        \n        while self.func_evals < self.budget:\n            # Update velocities and positions for PSO\n            r1, r2 = np.random.rand(self.swarm_size, self.dim), np.random.rand(self.swarm_size, self.dim)\n            velocities = (inertia_weight * velocities + \n                          cognitive_param * r1 * (personal_best_positions - positions) +\n                          social_param * r2 * (g_best_pos - positions))\n            velocities = np.clip(velocities, -self.vel_max, self.vel_max)\n            positions = positions + velocities\n            positions = np.clip(positions, self.lower_bound, self.upper_bound)\n            \n            # DE mutation and crossover\n            for i in range(self.swarm_size):\n                candidates = list(range(self.swarm_size))\n                candidates.remove(i)\n                a, b, c = positions[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, positions[i])\n                \n                trial_score = func(trial)\n                self.func_evals += 1\n                \n                if trial_score < scores[i]:\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    positions[i] = trial\n                    scores[i] = trial_score\n                    \n                    if trial_score < g_best_score:\n                        g_best_pos = trial\n                        g_best_score = trial_score\n\n        return g_best_pos, g_best_score", "name": "HybridPSODE", "description": "A hybrid particle swarm and differential evolution algorithm that adaptively balances exploration and exploitation for efficient convergence in diverse optimization landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "63b28130-cf16-4422-8e7b-34d5d7c095c1", "metadata": {"aucs": [0.795848510592283, 0.7989837068448961, 0.7954661412456008, 0.8194982171506854, 0.7974182025818438, 0.8064583934840148, 0.8294408663218479, 0.8162544177328063, 0.7907945905418712, 0.5892294894989125, 0.580038996098043, 0.6223480400007138, 0.63805866141263, 0.5060629174221984, 0.5735358732369852, 0.6092422781744893, 0.615360402951523, 0.6209581298395345, 0.11712812694468033, 0.14478149525598505, 0.10706795721081563, 0.11767780302750108, 0.1366945964889812, 0.10328024301325334, 0.12683019191701494, 0.3371683739105906, 0.13392444554069405, 0.10756535912683574, 0.1216701972517289, 0.11261953869227603, 0.13342080293934666, 0.11005466672847874, 0.1369918737973923, 0.1051130533489617, 0.11170450778721952, 0.09873176214379886, 0.9794826336395402, 0.9785006637733696, 0.9721257215728629, 0.9768100733446954, 0.9697477629617205, 0.9759622331481106, 0.9845021850262762, 0.9774213945737026, 0.9784056728862192, 0.42737908171948824, 0.443561478353649, 0.41432596461147786, 0.41885215198799586, 0.48482751587318695, 0.4816207824974029, 0.4701351116539465, 0.4321847256414343, 0.4290935796716788, 0.7184529310149192, 0.7786294172332691, 0.2245727741551795, 0.21291295353005313, 0.2084652874166082, 0.7158426738619506, 0.6096409137325072, 0.7788605723710524, 0.7626745196124034, 0.19053354188755223, 0.18539295596399685, 0.18802773621296487, 0.2133203624819312, 0.18618966396989423, 0.1855008506347049, 0.2271086066347121, 0.2001480618857262, 0.21633652511010415, 0.1914031566059472, 0.2169572766824669, 0.2187511447753805, 0.24181998427629803, 0.19661021696917091, 0.20779509163781795, 0.19135396917782088, 0.21004541769486673, 0.23482703679320438, 0.05399621906907104, 0.009456177854646364, 0.013482953503444306, 0.052156194177338744, 0.028160005675826327, 0.02456118218190384, 0.026503920393500247, 0.0014970493687381792, 9.999999999998899e-05, 0.08381124135033968, 0.09079603588722385, 0.07192313333229772, 0.057120266296143196, 0.02903140916350222, 0.0554504710950241, 0.1734176555353597, 0.13560902985685408, 0.08761435491859271, 0.09403806356953537, 0.11358455268479084, 0.07018482397865433, 0.06794204866992293, 0.12115718803071507, 0.08954144226953775, 0.04760034556334136, 0.08629595377521149, 0.10010781846117989, 0.1572669797644337, 0.20376316817896978, 0.2110189340147013, 0.20142597287324737, 0.22439842436452595, 0.12676513465580208, 0.1462379858985774, 0.06445856532566652, 0.09927692560897361, 0.5055683854473394, 0.5260272937122599, 0.5009380296165818, 0.5394469490059043, 0.5341953421965575, 0.5121093237023979, 0.5224948089931087, 0.5104931813630986, 0.5315702589296512, 0.10637528156719511, 0.12008940288719061, 0.11029660679101949, 0.13417717321123723, 0.13719988274109696, 0.12030248024542856, 0.11707125044329592, 0.1450511626899561, 0.10098713004782567, 0.15328661312857295, 0.13658421136031962, 0.27455299168480884, 0.15481975304017703, 0.16487074360027532, 0.1862273431813144, 0.28419239302921295, 0.2683553364591196, 0.1332944633180737, 0.34600932682064045, 0.3370703336679457, 0.42165654881493697, 0.4244271153547152, 0.42843256014157716, 0.39446256048744, 0.4145032361305324, 0.4359774379914396, 0.4375294185018477, 0.2095612361817003, 0.2652180651937134, 0.2374693556280847, 0.22186774772527418, 0.2919600954381153, 0.26520676178868174, 0.24786189554129934, 0.2649566922326938, 0.20807165451897258, 0.2188885465902387, 0.2188587561998061, 0.21017228353631068, 0.23742742177728393, 0.23114487541222928, 0.2167602755786816, 0.20768112252777748, 0.2033731671396859, 0.21364614023068373, 0.2048939837130137, 0.6027845360063127, 0.20482930515258813, 0.22108629303342864, 0.2317726794093662, 0.22123543411608826, 0.24240740970312158, 0.4263554271163704, 0.5377128955267964, 0.17124894122167167, 0.19680357197162723, 0.18746339885669527, 0.8688190196497994, 0.1980669527519463, 0.19904979202159767, 0.14096602683580417, 0.17353469940592203, 0.16232310746991918, 0.6284626070787762, 0.2070911962191292, 0.5622564067491925, 0.21128836489556257, 0.16692127072654006, 0.2096219932542298, 0.15555924618184724, 0.21235110619783704, 0.21245450935165444, 0.18212273120403277, 0.18061773607945997, 0.18002835835480524, 0.18235941609389716, 0.1787176283489944, 0.1815674403166253, 0.18892242257407554, 0.18761558298588366, 0.18831670623052155, 0.08268482619475814, 0.08482283666141088, 0.09372643813502435, 0.0822912043890065, 0.09052402067077947, 0.08660835594712646, 0.08710386388786939, 0.09031972796815424, 0.08457254437886208]}, "mutation_prompt": null}
