{"id": "aa11e341-4e2b-48e2-b225-c87e2ea4c570", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=40):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.7  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive coefficient for PSO\n        self.c2 = 1.5  # social coefficient for PSO\n        self.mutation_factor = 0.5  # differential weight for DE\n        self.crossover_prob = 0.7  # crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(0)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO Update\n            r1 = np.random.uniform(0, 1, (self.population_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.population_size, self.dim))\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - population) +\n                          self.c2 * r2 * (global_best_position - population))\n            population += velocities\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = np.clip(population[a] + self.mutation_factor * (population[b] - population[c]),\n                                        self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(crossover):\n                    crossover[np.random.randint(0, self.dim)] = True\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                    if trial_score < global_best_score:\n                        global_best_position = trial_vector\n                        global_best_score = trial_score\n\n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution crossover for enhanced exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.25085488196371786, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6796563241894679, 0.6796563241894679, 0.6796563241894679, 0.6823569846386379, 0.6823569846386379, 0.6823569846386379, 0.6773104508891967, 0.6773104508891967, 0.6773104508891967, 0.39092200589240544, 0.39092200589240544, 0.39092200589240544, 0.3168144651039876, 0.3168144651039876, 0.3168144651039876, 0.362339125351975, 0.362339125351975, 0.362339125351975, 0.10216021103182937, 0.10216021103182937, 0.10216021103182937, 0.1281781686418988, 0.1281781686418988, 0.1281781686418988, 0.1533768522316764, 0.1533768522316764, 0.1533768522316764, 0.11600350411735383, 0.11600350411735383, 0.11600350411735383, 0.10253678509852104, 0.10253678509852104, 0.10253678509852104, 0.12746209228719885, 0.12746209228719885, 0.12746209228719885, 0.9889276728220192, 0.9889276728220192, 0.9889276728220192, 0.9815711453851471, 0.9815711453851471, 0.9815711453851471, 0.9855144372903292, 0.9855144372903292, 0.9855144372903292, 0.36211175029088005, 0.36211175029088005, 0.36211175029088005, 0.37316622985908476, 0.37316622985908476, 0.37316622985908476, 0.3817962249697342, 0.3817962249697342, 0.3817962249697342, 0.2210231664782606, 0.2210231664782606, 0.2210231664782606, 0.2655452612302034, 0.2655452612302034, 0.2655452612302034, 0.47219525761580994, 0.47219525761580994, 0.47219525761580994, 0.16204597005455113, 0.16204597005455113, 0.16204597005455113, 0.15959890292370382, 0.15959890292370382, 0.15959890292370382, 0.15905186459963117, 0.15905186459963117, 0.15905186459963117, 0.11836384527254995, 0.11836384527254995, 0.11836384527254995, 0.15653904162794785, 0.15653904162794785, 0.15653904162794785, 0.10371576366973168, 0.10371576366973168, 0.10371576366973168, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00715662480065582, 0.00715662480065582, 0.00715662480065582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07063375380561143, 0.07063375380561143, 0.07063375380561143, 0.09122331082728519, 0.09122331082728519, 0.09122331082728519, 0.05562774862567621, 0.05562774862567621, 0.05562774862567621, 0.08832110974735119, 0.08832110974735119, 0.08832110974735119, 0.0470323166629647, 0.0470323166629647, 0.0470323166629647, 0.07316708714908815, 0.07316708714908815, 0.07316708714908815, 0.15744584148412355, 0.15744584148412355, 0.15744584148412355, 0.0056904459925617434, 0.0056904459925617434, 0.0056904459925617434, 0.05683953133499331, 0.05683953133499331, 0.05683953133499331, 0.4722044154825936, 0.4722044154825936, 0.4722044154825936, 0.4961670938548294, 0.4961670938548294, 0.4961670938548294, 0.5053231718278398, 0.5053231718278398, 0.5053231718278398, 0.09653313296906418, 0.09653313296906418, 0.09653313296906418, 0.09156997224599672, 0.09156997224599672, 0.09156997224599672, 0.11969175891278405, 0.11969175891278405, 0.11969175891278405, 0.2466767872185993, 0.2466767872185993, 0.2466767872185993, 0.15271348349300262, 0.15271348349300262, 0.15271348349300262, 0.15429138918336616, 0.15429138918336616, 0.15429138918336616, 0.3295753397762873, 0.3295753397762873, 0.3295753397762873, 0.3872318064669976, 0.3872318064669976, 0.3872318064669976, 0.35814122873375953, 0.35814122873375953, 0.35814122873375953, 0.22623430778889952, 0.22623430778889952, 0.22623430778889952, 0.26677860790602115, 0.26677860790602115, 0.26677860790602115, 0.2809335357583814, 0.2809335357583814, 0.2809335357583814, 0.20473821211055643, 0.20473821211055643, 0.20473821211055643, 0.2061410275190616, 0.2061410275190616, 0.2061410275190616, 0.1886772457822029, 0.1886772457822029, 0.1886772457822029, 0.35916360975758865, 0.35916360975758865, 0.35916360975758865, 0.19675544744393292, 0.19675544744393292, 0.19675544744393292, 0.2294980125516809, 0.2294980125516809, 0.2294980125516809, 0.16530351633085116, 0.16530351633085116, 0.16530351633085116, 0.12997961224491406, 0.12997961224491406, 0.12997961224491406, 0.16802823852545024, 0.16802823852545024, 0.16802823852545024, 0.5272118873759941, 0.5272118873759941, 0.5272118873759941, 0.20837934956468318, 0.20837934956468318, 0.20837934956468318, 0.10400116995112607, 0.10400116995112607, 0.10400116995112607, 0.17912262479460006, 0.17912262479460006, 0.17912262479460006, 0.1809266903161395, 0.1809266903161395, 0.1809266903161395, 0.19786834564067401, 0.19786834564067401, 0.19786834564067401, 0.07983164788274211, 0.07983164788274211, 0.07983164788274211, 0.07917138745010122, 0.07917138745010122, 0.07917138745010122, 0.0890661705329201, 0.0890661705329201, 0.0890661705329201]}, "mutation_prompt": null}
{"id": "821489ff-b6b5-4a61-9cdb-e912a919f961", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, population_size=40):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.w = 0.7  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive coefficient for PSO\n        self.c2 = 1.5  # social coefficient for PSO\n        self.mutation_factor = 0.5  # differential weight for DE\n        self.crossover_prob = 0.7  # crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(0)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO Update\n            r1 = np.random.uniform(0, 1, (self.population_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.population_size, self.dim))\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - population) +\n                          self.c2 * r2 * (global_best_position - population))\n            population += velocities\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = np.clip(population[a] + self.mutation_factor * (population[b] - population[c]),\n                                        self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(crossover):\n                    crossover[np.random.randint(0, self.dim)] = True\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                    if trial_score < global_best_score:\n                        global_best_position = trial_vector\n                        global_best_score = trial_score\n\n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution crossover for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "aa11e341-4e2b-48e2-b225-c87e2ea4c570", "metadata": {"aucs": [0.6796563241894679, 0.6796563241894679, 0.6796563241894679, 0.6823569846386379, 0.6823569846386379, 0.6823569846386379, 0.6773104508891967, 0.6773104508891967, 0.6773104508891967, 0.39092200589240544, 0.39092200589240544, 0.39092200589240544, 0.3168144651039876, 0.3168144651039876, 0.3168144651039876, 0.362339125351975, 0.362339125351975, 0.362339125351975, 0.10216021103182937, 0.10216021103182937, 0.10216021103182937, 0.1281781686418988, 0.1281781686418988, 0.1281781686418988, 0.1533768522316764, 0.1533768522316764, 0.1533768522316764, 0.11600350411735383, 0.11600350411735383, 0.11600350411735383, 0.10253678509852104, 0.10253678509852104, 0.10253678509852104, 0.12746209228719885, 0.12746209228719885, 0.12746209228719885, 0.9889276728220192, 0.9889276728220192, 0.9889276728220192, 0.9815711453851471, 0.9815711453851471, 0.9815711453851471, 0.9855144372903292, 0.9855144372903292, 0.9855144372903292, 0.36211175029088005, 0.36211175029088005, 0.36211175029088005, 0.37316622985908476, 0.37316622985908476, 0.37316622985908476, 0.3817962249697342, 0.3817962249697342, 0.3817962249697342, 0.2210231664782606, 0.2210231664782606, 0.2210231664782606, 0.2655452612302034, 0.2655452612302034, 0.2655452612302034, 0.47219525761580994, 0.47219525761580994, 0.47219525761580994, 0.16204597005455113, 0.16204597005455113, 0.16204597005455113, 0.15959890292370382, 0.15959890292370382, 0.15959890292370382, 0.15905186459963117, 0.15905186459963117, 0.15905186459963117, 0.11836384527254995, 0.11836384527254995, 0.11836384527254995, 0.15653904162794785, 0.15653904162794785, 0.15653904162794785, 0.10371576366973168, 0.10371576366973168, 0.10371576366973168, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00715662480065582, 0.00715662480065582, 0.00715662480065582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07063375380561143, 0.07063375380561143, 0.07063375380561143, 0.09122331082728519, 0.09122331082728519, 0.09122331082728519, 0.05562774862567621, 0.05562774862567621, 0.05562774862567621, 0.08832110974735119, 0.08832110974735119, 0.08832110974735119, 0.0470323166629647, 0.0470323166629647, 0.0470323166629647, 0.07316708714908815, 0.07316708714908815, 0.07316708714908815, 0.15744584148412355, 0.15744584148412355, 0.15744584148412355, 0.0056904459925617434, 0.0056904459925617434, 0.0056904459925617434, 0.05683953133499331, 0.05683953133499331, 0.05683953133499331, 0.4722044154825936, 0.4722044154825936, 0.4722044154825936, 0.4961670938548294, 0.4961670938548294, 0.4961670938548294, 0.5053231718278398, 0.5053231718278398, 0.5053231718278398, 0.09653313296906418, 0.09653313296906418, 0.09653313296906418, 0.09156997224599672, 0.09156997224599672, 0.09156997224599672, 0.11969175891278405, 0.11969175891278405, 0.11969175891278405, 0.2466767872185993, 0.2466767872185993, 0.2466767872185993, 0.15271348349300262, 0.15271348349300262, 0.15271348349300262, 0.15429138918336616, 0.15429138918336616, 0.15429138918336616, 0.3295753397762873, 0.3295753397762873, 0.3295753397762873, 0.3872318064669976, 0.3872318064669976, 0.3872318064669976, 0.35814122873375953, 0.35814122873375953, 0.35814122873375953, 0.22623430778889952, 0.22623430778889952, 0.22623430778889952, 0.26677860790602115, 0.26677860790602115, 0.26677860790602115, 0.2809335357583814, 0.2809335357583814, 0.2809335357583814, 0.20473821211055643, 0.20473821211055643, 0.20473821211055643, 0.2061410275190616, 0.2061410275190616, 0.2061410275190616, 0.1886772457822029, 0.1886772457822029, 0.1886772457822029, 0.35916360975758865, 0.35916360975758865, 0.35916360975758865, 0.19675544744393292, 0.19675544744393292, 0.19675544744393292, 0.2294980125516809, 0.2294980125516809, 0.2294980125516809, 0.16530351633085116, 0.16530351633085116, 0.16530351633085116, 0.12997961224491406, 0.12997961224491406, 0.12997961224491406, 0.16802823852545024, 0.16802823852545024, 0.16802823852545024, 0.5272118873759941, 0.5272118873759941, 0.5272118873759941, 0.20837934956468318, 0.20837934956468318, 0.20837934956468318, 0.10400116995112607, 0.10400116995112607, 0.10400116995112607, 0.17912262479460006, 0.17912262479460006, 0.17912262479460006, 0.1809266903161395, 0.1809266903161395, 0.1809266903161395, 0.19786834564067401, 0.19786834564067401, 0.19786834564067401, 0.07983164788274211, 0.07983164788274211, 0.07983164788274211, 0.07917138745010122, 0.07917138745010122, 0.07917138745010122, 0.0890661705329201, 0.0890661705329201, 0.0890661705329201]}, "mutation_prompt": null}
