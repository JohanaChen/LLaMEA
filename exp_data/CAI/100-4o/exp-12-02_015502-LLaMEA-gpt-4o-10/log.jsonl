{"id": "c66be57e-a425-4149-83a0-15968001b7bb", "solution": "import numpy as np\n\nclass AdaptiveEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(5 * np.log(dim))\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.population = None\n    \n    def initialize_population(self):\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        \n    def differential_mutation(self, target_idx):\n        indices = list(range(self.population_size))\n        indices.remove(target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        mutant = self.population[a] + self.mutation_factor * (self.population[b] - self.population[c])\n        mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n        return mutant\n    \n    def recombine(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.recombination_rate\n        trial = np.where(crossover_mask, mutant, target)\n        return trial\n\n    def select(self, trial, target, func):\n        if func(trial) < func(target):\n            return trial\n        else:\n            return target\n    \n    def __call__(self, func):\n        self.initialize_population()\n        evaluations = 0\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                target = self.population[i]\n                mutant = self.differential_mutation(i)\n                trial = self.recombine(target, mutant)\n                \n                target_fitness = func(target)\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n                self.population[i] = self.select(trial, target, lambda x: (trial_fitness if np.array_equal(x, trial) else target_fitness))\n        \n        best_idx = np.argmin([func(ind) for ind in self.population])\n        return self.population[best_idx]", "name": "AdaptiveEvolution", "description": "The algorithm combines evolutionary strategies with adaptive differential mutation to explore and exploit the search space effectively within the given budget.", "configspace": "", "generation": 0, "fitness": 0.3273179967823665, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7624131997438506, 0.7491139947133512, 0.7659627443842628, 0.7418993623032757, 0.7613636260929537, 0.7745878733397703, 0.7485351072907267, 0.725425555168704, 0.7177166203179777, 0.5492401251579664, 0.6030143755152617, 0.5699800714006322, 0.6028676627468725, 0.5910574153785182, 0.5627008449357639, 0.5762747480263775, 0.5236018715035968, 0.5963377182188213, 0.10817633446691177, 0.1213507778716667, 0.2905523430605502, 0.10470426009235156, 0.10392443653074368, 0.11982021853464597, 0.1177009818241781, 0.1065359980268007, 0.14854796408958315, 0.07793951124992093, 0.09469220666073541, 0.09942206085702054, 0.09824507865953869, 0.11134342122913099, 0.12352713326195897, 0.11461146789356647, 0.10023150331363706, 0.13409085112625052, 0.9300599466468593, 0.9442365745918035, 0.8941788788107363, 0.9751665402095283, 0.956209605069616, 0.8899230684580005, 0.9413806541305338, 0.9319046823124328, 0.9261032519521571, 0.41370000751088054, 0.40042778715113714, 0.41975897122711725, 0.4124595860598337, 0.4393125248269796, 0.36640372930547993, 0.418901854423647, 0.39775561769080636, 0.43664402165540417, 0.6227259375896328, 0.7000790754781967, 0.6243271231557261, 0.770504683567147, 0.7417686293134935, 0.7372904219906083, 0.7342136450413365, 0.6948128218805874, 0.6695800539199998, 0.32273778666364394, 0.21367669656033728, 0.2879726774294692, 0.12173943123819986, 0.28984131123284884, 0.37132999093890107, 0.22523720740451636, 0.26914113509392956, 0.1990111669467558, 0.02160319118733789, 0.016289099572475596, 0.009372282257932185, 0.2585104382336, 0.28598387790782687, 0.40306780858509395, 0.36866610156246016, 0.3180421889884888, 0.22129888841143586, 0.29347331619452666, 0.2996558550132793, 0.3481575989529351, 0.2095590053719839, 0.30652806612653016, 0.26828562143464074, 0.2568857678573083, 0.260804985253007, 0.2304891738267958, 0.42991677895948255, 0.36297909941907824, 0.40200734291005114, 0.4715230013254309, 0.4020591266613954, 0.31536762344719893, 0.4445814585207759, 0.5382484141202308, 0.44058812233892497, 0.14251706384887552, 0.17323283282535396, 0.09937306053730777, 0.11131021195127755, 0.1618959271030399, 0.09695963216276993, 0.10226615922809956, 0.1426911155404057, 0.0882282390203667, 0.23337496434719096, 0.2958670796365477, 0.24656160256516013, 0.2738606870563337, 0.2534720857492314, 0.2745225661685551, 0.2520073921503342, 0.288548240154224, 0.22653240107772932, 0.632515712058052, 0.6025222083706745, 0.638272482227632, 0.5892782277537021, 0.5726352534255628, 0.6121339871433151, 0.6201367284927599, 0.6266046775196702, 0.5262154539026616, 0.08488558972418692, 0.08540633643811124, 0.08979138469201775, 0.07671995795425468, 0.06886196002258749, 0.08766200260677248, 0.08207130401464124, 0.07807700836388154, 0.07879978991717018, 0.1347232318081869, 0.14957201758073313, 0.2989422961474084, 0.14393090588278157, 0.12899787182288092, 0.13554670552282, 0.15520217076548415, 0.13212722267988286, 0.14174657132301327, 0.2926078915258561, 0.3512488877115758, 0.3454125064353778, 0.3217500066150234, 0.31400186137891717, 0.30497524553272903, 0.36283911425973503, 0.3737799970131189, 0.3409344547247536, 0.23136894086270832, 0.245453319015966, 0.23324359487939028, 0.2391386784106987, 0.2534751847755008, 0.24372638873097185, 0.2683292410707667, 0.2810435931352082, 0.24578217880646525, 0.17835050249861428, 0.1624733639945667, 0.2144130941277762, 0.22180660933227714, 0.1775278398087372, 0.16819333717921015, 0.16936643307110766, 0.20723633431291477, 0.20017076524518984, 0.17204124540331123, 0.20241155490222917, 0.18493761299609246, 0.17695611749265172, 0.19802077022925813, 0.19438692156589787, 0.240245813659257, 0.3875297690902699, 0.18129695957266645, 0.18988033593641873, 0.1494521596193421, 0.18641087524602562, 0.18794090248168804, 0.17821322060132283, 0.7997884883920643, 0.7739617137486006, 0.1646436916530598, 0.7574301175238118, 0.6510892447635632, 0.20687000586564497, 0.16427562935706064, 0.19660853901533204, 0.19876595582825507, 0.12215638080254743, 0.20362582169586307, 0.2110067563510536, 0.2039702461027525, 0.19053386849524567, 0.19638581494602225, 0.18595262948786084, 0.1648869518378775, 0.1728016789759489, 0.17749270318858812, 0.17928263652886967, 0.17668378863991185, 0.17025955581888286, 0.0656177777066752, 0.06553511263484213, 0.07567219723186458, 0.08176137483716062, 0.07273464655316675, 0.07398917546231054, 0.06737428815316948, 0.0777616905836962, 0.06482408336784629]}, "mutation_prompt": null}
{"id": "2d50ba8c-32f4-4fd3-9b4e-9bd7a06a8e7b", "solution": "import numpy as np\n\nclass AdaptiveEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(5 * np.log(dim))\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.population = None\n    \n    def initialize_population(self):\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        \n    def differential_mutation(self, target_idx):\n        indices = list(range(self.population_size))\n        indices.remove(target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        mutant = self.population[a] + self.mutation_factor * (self.population[b] - self.population[c])\n        mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n        return mutant\n    \n    def recombine(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.recombination_rate\n        trial = np.where(crossover_mask, mutant, target)\n        return trial\n\n    def select(self, trial, target, func):\n        if func(trial) < func(target):\n            return trial\n        else:\n            return target\n    \n    def __call__(self, func):\n        self.initialize_population()\n        evaluations = 0\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                target = self.population[i]\n                mutant = self.differential_mutation(i)\n                trial = self.recombine(target, mutant)\n                \n                target_fitness = func(target)\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n                self.population[i] = self.select(trial, target, lambda x: (trial_fitness if np.array_equal(x, trial) else target_fitness))\n        \n        best_idx = np.argmin([func(ind) for ind in self.population])\n        return self.population[best_idx]", "name": "AdaptiveEvolution", "description": "The algorithm combines evolutionary strategies with adaptive differential mutation to explore and exploit the search space effectively within the given budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c66be57e-a425-4149-83a0-15968001b7bb", "metadata": {"aucs": [0.7624131997438506, 0.7491139947133512, 0.7659627443842628, 0.7418993623032757, 0.7613636260929537, 0.7745878733397703, 0.7485351072907267, 0.725425555168704, 0.7177166203179777, 0.5492401251579664, 0.6030143755152617, 0.5699800714006322, 0.6028676627468725, 0.5910574153785182, 0.5627008449357639, 0.5762747480263775, 0.5236018715035968, 0.5963377182188213, 0.10817633446691177, 0.1213507778716667, 0.2905523430605502, 0.10470426009235156, 0.10392443653074368, 0.11982021853464597, 0.1177009818241781, 0.1065359980268007, 0.14854796408958315, 0.07793951124992093, 0.09469220666073541, 0.09942206085702054, 0.09824507865953869, 0.11134342122913099, 0.12352713326195897, 0.11461146789356647, 0.10023150331363706, 0.13409085112625052, 0.9300599466468593, 0.9442365745918035, 0.8941788788107363, 0.9751665402095283, 0.956209605069616, 0.8899230684580005, 0.9413806541305338, 0.9319046823124328, 0.9261032519521571, 0.41370000751088054, 0.40042778715113714, 0.41975897122711725, 0.4124595860598337, 0.4393125248269796, 0.36640372930547993, 0.418901854423647, 0.39775561769080636, 0.43664402165540417, 0.6227259375896328, 0.7000790754781967, 0.6243271231557261, 0.770504683567147, 0.7417686293134935, 0.7372904219906083, 0.7342136450413365, 0.6948128218805874, 0.6695800539199998, 0.32273778666364394, 0.21367669656033728, 0.2879726774294692, 0.12173943123819986, 0.28984131123284884, 0.37132999093890107, 0.22523720740451636, 0.26914113509392956, 0.1990111669467558, 0.02160319118733789, 0.016289099572475596, 0.009372282257932185, 0.2585104382336, 0.28598387790782687, 0.40306780858509395, 0.36866610156246016, 0.3180421889884888, 0.22129888841143586, 0.29347331619452666, 0.2996558550132793, 0.3481575989529351, 0.2095590053719839, 0.30652806612653016, 0.26828562143464074, 0.2568857678573083, 0.260804985253007, 0.2304891738267958, 0.42991677895948255, 0.36297909941907824, 0.40200734291005114, 0.4715230013254309, 0.4020591266613954, 0.31536762344719893, 0.4445814585207759, 0.5382484141202308, 0.44058812233892497, 0.14251706384887552, 0.17323283282535396, 0.09937306053730777, 0.11131021195127755, 0.1618959271030399, 0.09695963216276993, 0.10226615922809956, 0.1426911155404057, 0.0882282390203667, 0.23337496434719096, 0.2958670796365477, 0.24656160256516013, 0.2738606870563337, 0.2534720857492314, 0.2745225661685551, 0.2520073921503342, 0.288548240154224, 0.22653240107772932, 0.632515712058052, 0.6025222083706745, 0.638272482227632, 0.5892782277537021, 0.5726352534255628, 0.6121339871433151, 0.6201367284927599, 0.6266046775196702, 0.5262154539026616, 0.08488558972418692, 0.08540633643811124, 0.08979138469201775, 0.07671995795425468, 0.06886196002258749, 0.08766200260677248, 0.08207130401464124, 0.07807700836388154, 0.07879978991717018, 0.1347232318081869, 0.14957201758073313, 0.2989422961474084, 0.14393090588278157, 0.12899787182288092, 0.13554670552282, 0.15520217076548415, 0.13212722267988286, 0.14174657132301327, 0.2926078915258561, 0.3512488877115758, 0.3454125064353778, 0.3217500066150234, 0.31400186137891717, 0.30497524553272903, 0.36283911425973503, 0.3737799970131189, 0.3409344547247536, 0.23136894086270832, 0.245453319015966, 0.23324359487939028, 0.2391386784106987, 0.2534751847755008, 0.24372638873097185, 0.2683292410707667, 0.2810435931352082, 0.24578217880646525, 0.17835050249861428, 0.1624733639945667, 0.2144130941277762, 0.22180660933227714, 0.1775278398087372, 0.16819333717921015, 0.16936643307110766, 0.20723633431291477, 0.20017076524518984, 0.17204124540331123, 0.20241155490222917, 0.18493761299609246, 0.17695611749265172, 0.19802077022925813, 0.19438692156589787, 0.240245813659257, 0.3875297690902699, 0.18129695957266645, 0.18988033593641873, 0.1494521596193421, 0.18641087524602562, 0.18794090248168804, 0.17821322060132283, 0.7997884883920643, 0.7739617137486006, 0.1646436916530598, 0.7574301175238118, 0.6510892447635632, 0.20687000586564497, 0.16427562935706064, 0.19660853901533204, 0.19876595582825507, 0.12215638080254743, 0.20362582169586307, 0.2110067563510536, 0.2039702461027525, 0.19053386849524567, 0.19638581494602225, 0.18595262948786084, 0.1648869518378775, 0.1728016789759489, 0.17749270318858812, 0.17928263652886967, 0.17668378863991185, 0.17025955581888286, 0.0656177777066752, 0.06553511263484213, 0.07567219723186458, 0.08176137483716062, 0.07273464655316675, 0.07398917546231054, 0.06737428815316948, 0.0777616905836962, 0.06482408336784629]}, "mutation_prompt": null}
