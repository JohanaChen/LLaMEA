{"id": "cee1ff04-415d-454a-b9b9-dd145a827d6a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 30\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.pop_size, float('inf'))\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_score = float('inf')\n        self.f = 0.5 # DE mutation factor\n        self.cr = 0.9 # DE crossover rate\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                evaluations += 1\n\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.particles[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions using PSO mechanism\n            inertia_weight = 0.7\n            cognitive_component = 1.5\n            social_component = 1.5\n            \n            r1, r2 = np.random.rand(2)\n            self.velocities = (inertia_weight * self.velocities +\n                               cognitive_component * r1 * (self.pbest_positions - self.particles) +\n                               social_component * r2 * (self.gbest_position - self.particles))\n            self.particles = self.particles + self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n\n            # Differential Evolution operators\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(self.particles[a] + self.f * (self.particles[b] - self.particles[c]), \n                                 self.lower_bound, self.upper_bound)\n                trial = np.copy(self.particles[i])\n                jrand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == jrand:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                evaluations += 1\n\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    self.pbest_positions[i] = trial\n\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = trial.copy()\n\n                if evaluations >= self.budget:\n                    break\n\n        return self.gbest_position, self.gbest_score", "name": "HybridPSODE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation in black box optimization.", "configspace": "", "generation": 0, "fitness": 0.2887999447672401, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7810269592144582, 0.8100267854132323, 0.818573673827677, 0.18267785978829165, 0.8342676501882719, 0.8162467044763718, 0.7982324920599133, 0.8309934361059149, 0.8229373931264552, 0.4920507182137046, 9.999999999998899e-05, 0.5247124831292969, 0.49262433781965886, 0.0453327737187168, 0.5366382902911615, 0.04680427986004054, 0.5763817223440162, 0.5261774153179191, 0.1493971976248868, 0.037819518472376745, 0.09113729773817014, 0.1091721353774201, 0.02809649014448301, 0.08666898578520998, 0.11316585651123678, 0.030247049031176143, 0.1608412661640648, 0.07083047850737745, 0.12181488645157956, 0.08872873563969386, 0.09764960160804625, 0.11021705566395723, 0.07702030194066878, 0.005322555239591575, 0.08892040229125286, 0.07627752503064744, 0.9804217283134523, 0.991749532276512, 0.9819680804592941, 0.8801644593689045, 0.9898633897023214, 0.9604023338983341, 0.9811520355267793, 0.9757796204548205, 0.979887197085339, 0.05343021281062099, 0.05866456160728106, 0.6405124733217245, 0.6046166201105805, 0.14901489414568736, 0.14916378502199823, 0.1260407901927456, 0.20983255993723238, 0.632212487981392, 0.22766027106261622, 0.2396016525396023, 0.8680706696517655, 0.2785910793823366, 0.11663692261759973, 0.20065186648836475, 0.13030461962534956, 0.12602983852957927, 0.2329220736658386, 0.12877804250524894, 0.5554858284127007, 0.3764368467799053, 9.999999999998899e-05, 9.999999999998899e-05, 0.4813748635614077, 0.5167768339647781, 0.15333503158511974, 0.6271179992468054, 0.5287214625487024, 0.042458808784547, 0.12475641595256459, 0.42775054407234714, 0.610640445014607, 0.6482224510522345, 0.5464063217870605, 9.999999999998899e-05, 0.6133541089505048, 9.999999999998899e-05, 9.999999999998899e-05, 0.18975301999890515, 9.999999999998899e-05, 9.999999999998899e-05, 0.015196012540250159, 0.45736847954700666, 0.14742433772213004, 0.13847682794355787, 0.046344059471756016, 0.09262221791212999, 0.08137531175486168, 0.09883702637391723, 0.007691894346498529, 0.07970985917331841, 0.06810552003657355, 0.04105732301435017, 0.609351615072111, 9.999999999998899e-05, 0.08499425405409289, 0.20083997453950486, 0.07120305160264218, 0.12881551784926693, 0.09057619646526804, 0.08971801721993256, 0.06693330809900877, 0.1050038175460839, 0.3107998696686842, 0.041977307881488235, 0.32044483252687306, 0.006145069126356817, 9.999999999998899e-05, 0.2808200060293681, 0.04914983914668669, 9.999999999998899e-05, 0.08786452847466575, 0.4610363510230555, 0.7213394346835721, 0.7574151949443981, 0.6727571989019316, 0.13785403953003406, 0.747324176990708, 0.6403663853279653, 0.12119402136006707, 0.7273588830757707, 0.09066825401502066, 0.05234972893322998, 0.11276455919968831, 0.11282495584332608, 0.0403951791638143, 0.09249875571315969, 0.12147539536689489, 0.06466181115717151, 0.11173600144341711, 0.27454387038677075, 0.27826991448676464, 0.2621186091546345, 0.48375219101868094, 0.30983407729233814, 0.1794666320472459, 0.4254190939048682, 0.19909608617411478, 0.7304477256286873, 0.49403683366964857, 0.5019838947059148, 0.32501084779027156, 0.3553246955960623, 0.18510619125803396, 0.33186017421462444, 0.46023555165535457, 0.38795597355901135, 0.37605388573935383, 0.33256718951511366, 0.19223253635103332, 0.3237696712790553, 0.31199843705621766, 0.1528119864691143, 0.2508519550735472, 0.17412545749047237, 0.2936177437865398, 0.39313003214614284, 0.21161604612597829, 0.14064691044263322, 0.21856321287266378, 0.20867023341498225, 0.16607729993907194, 0.19911030284213815, 0.2133216289177743, 0.2289589071012914, 0.25014681892654445, 0.231176627475131, 0.23402671428141641, 0.19838351857382774, 0.19504132752707037, 0.18826513357123553, 0.17554410418469357, 0.245888302333922, 0.18752686796822338, 0.1794722486833007, 0.16829727229247815, 0.16728555660308264, 0.15374878245656876, 0.1292956904600564, 0.19992900458431972, 0.19689210031013138, 0.09998186161914369, 0.16994480903923992, 0.894956029280047, 0.8705419537351188, 0.8161436195260179, 0.20392089154658466, 0.873121479090098, 0.22503170763698277, 0.21248751734730198, 0.18492363684536117, 0.10357635672445631, 0.10392517113585487, 0.21195978812693617, 0.21042713436866245, 0.21265969263271212, 0.19227489373736628, 0.17484156678906748, 0.19164312462050825, 0.19625535450363596, 0.2015571468455628, 0.21278054941657243, 0.09009739750269075, 0.08614756156697512, 0.07277134346233272, 0.0529649402624236, 0.08272760502709775, 0.0848062384060102, 0.07508383298546739, 0.07697071428851976, 0.10104478639290282]}, "mutation_prompt": null}
{"id": "9f96d7c3-bbac-4db1-b0df-21862860d44c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 30\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.pop_size, float('inf'))\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_score = float('inf')\n        self.f = 0.5 # DE mutation factor\n        self.cr = 0.9 # DE crossover rate\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                evaluations += 1\n\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.particles[i].copy()\n                \n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.particles[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions using PSO mechanism\n            inertia_weight = 0.7\n            cognitive_component = 1.5\n            social_component = 1.5\n            \n            r1, r2 = np.random.rand(2)\n            self.velocities = (inertia_weight * self.velocities +\n                               cognitive_component * r1 * (self.pbest_positions - self.particles) +\n                               social_component * r2 * (self.gbest_position - self.particles))\n            self.particles = self.particles + self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n\n            # Differential Evolution operators\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(self.particles[a] + self.f * (self.particles[b] - self.particles[c]), \n                                 self.lower_bound, self.upper_bound)\n                trial = np.copy(self.particles[i])\n                jrand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == jrand:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                evaluations += 1\n\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    self.pbest_positions[i] = trial\n\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = trial.copy()\n\n                if evaluations >= self.budget:\n                    break\n\n        return self.gbest_position, self.gbest_score", "name": "HybridPSODE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation in black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cee1ff04-415d-454a-b9b9-dd145a827d6a", "metadata": {"aucs": [0.7810269592144582, 0.8100267854132323, 0.818573673827677, 0.18267785978829165, 0.8342676501882719, 0.8162467044763718, 0.7982324920599133, 0.8309934361059149, 0.8229373931264552, 0.4920507182137046, 9.999999999998899e-05, 0.5247124831292969, 0.49262433781965886, 0.0453327737187168, 0.5366382902911615, 0.04680427986004054, 0.5763817223440162, 0.5261774153179191, 0.1493971976248868, 0.037819518472376745, 0.09113729773817014, 0.1091721353774201, 0.02809649014448301, 0.08666898578520998, 0.11316585651123678, 0.030247049031176143, 0.1608412661640648, 0.07083047850737745, 0.12181488645157956, 0.08872873563969386, 0.09764960160804625, 0.11021705566395723, 0.07702030194066878, 0.005322555239591575, 0.08892040229125286, 0.07627752503064744, 0.9804217283134523, 0.991749532276512, 0.9819680804592941, 0.8801644593689045, 0.9898633897023214, 0.9604023338983341, 0.9811520355267793, 0.9757796204548205, 0.979887197085339, 0.05343021281062099, 0.05866456160728106, 0.6405124733217245, 0.6046166201105805, 0.14901489414568736, 0.14916378502199823, 0.1260407901927456, 0.20983255993723238, 0.632212487981392, 0.22766027106261622, 0.2396016525396023, 0.8680706696517655, 0.2785910793823366, 0.11663692261759973, 0.20065186648836475, 0.13030461962534956, 0.12602983852957927, 0.2329220736658386, 0.12877804250524894, 0.5554858284127007, 0.3764368467799053, 9.999999999998899e-05, 9.999999999998899e-05, 0.4813748635614077, 0.5167768339647781, 0.15333503158511974, 0.6271179992468054, 0.5287214625487024, 0.042458808784547, 0.12475641595256459, 0.42775054407234714, 0.610640445014607, 0.6482224510522345, 0.5464063217870605, 9.999999999998899e-05, 0.6133541089505048, 9.999999999998899e-05, 9.999999999998899e-05, 0.18975301999890515, 9.999999999998899e-05, 9.999999999998899e-05, 0.015196012540250159, 0.45736847954700666, 0.14742433772213004, 0.13847682794355787, 0.046344059471756016, 0.09262221791212999, 0.08137531175486168, 0.09883702637391723, 0.007691894346498529, 0.07970985917331841, 0.06810552003657355, 0.04105732301435017, 0.609351615072111, 9.999999999998899e-05, 0.08499425405409289, 0.20083997453950486, 0.07120305160264218, 0.12881551784926693, 0.09057619646526804, 0.08971801721993256, 0.06693330809900877, 0.1050038175460839, 0.3107998696686842, 0.041977307881488235, 0.32044483252687306, 0.006145069126356817, 9.999999999998899e-05, 0.2808200060293681, 0.04914983914668669, 9.999999999998899e-05, 0.08786452847466575, 0.4610363510230555, 0.7213394346835721, 0.7574151949443981, 0.6727571989019316, 0.13785403953003406, 0.747324176990708, 0.6403663853279653, 0.12119402136006707, 0.7273588830757707, 0.09066825401502066, 0.05234972893322998, 0.11276455919968831, 0.11282495584332608, 0.0403951791638143, 0.09249875571315969, 0.12147539536689489, 0.06466181115717151, 0.11173600144341711, 0.27454387038677075, 0.27826991448676464, 0.2621186091546345, 0.48375219101868094, 0.30983407729233814, 0.1794666320472459, 0.4254190939048682, 0.19909608617411478, 0.7304477256286873, 0.49403683366964857, 0.5019838947059148, 0.32501084779027156, 0.3553246955960623, 0.18510619125803396, 0.33186017421462444, 0.46023555165535457, 0.38795597355901135, 0.37605388573935383, 0.33256718951511366, 0.19223253635103332, 0.3237696712790553, 0.31199843705621766, 0.1528119864691143, 0.2508519550735472, 0.17412545749047237, 0.2936177437865398, 0.39313003214614284, 0.21161604612597829, 0.14064691044263322, 0.21856321287266378, 0.20867023341498225, 0.16607729993907194, 0.19911030284213815, 0.2133216289177743, 0.2289589071012914, 0.25014681892654445, 0.231176627475131, 0.23402671428141641, 0.19838351857382774, 0.19504132752707037, 0.18826513357123553, 0.17554410418469357, 0.245888302333922, 0.18752686796822338, 0.1794722486833007, 0.16829727229247815, 0.16728555660308264, 0.15374878245656876, 0.1292956904600564, 0.19992900458431972, 0.19689210031013138, 0.09998186161914369, 0.16994480903923992, 0.894956029280047, 0.8705419537351188, 0.8161436195260179, 0.20392089154658466, 0.873121479090098, 0.22503170763698277, 0.21248751734730198, 0.18492363684536117, 0.10357635672445631, 0.10392517113585487, 0.21195978812693617, 0.21042713436866245, 0.21265969263271212, 0.19227489373736628, 0.17484156678906748, 0.19164312462050825, 0.19625535450363596, 0.2015571468455628, 0.21278054941657243, 0.09009739750269075, 0.08614756156697512, 0.07277134346233272, 0.0529649402624236, 0.08272760502709775, 0.0848062384060102, 0.07508383298546739, 0.07697071428851976, 0.10104478639290282]}, "mutation_prompt": null}
