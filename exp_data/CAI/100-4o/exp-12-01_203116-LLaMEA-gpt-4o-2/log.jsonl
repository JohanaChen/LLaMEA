{"id": "7b0fe650-9a5c-4090-bcf2-7caad73661eb", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        eval_count = self.pop_size\n\n        while eval_count < self.budget:\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), *self.bounds)\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n            # Adaptive Local Search\n            local_search_radius = (self.bounds[1] - self.bounds[0]) * 0.05\n            if eval_count + self.dim <= self.budget:\n                for j in range(self.dim):\n                    if eval_count >= self.budget:\n                        break\n                    perturbed = best.copy()\n                    perturbed[j] += np.random.uniform(-local_search_radius, local_search_radius)\n                    perturbed = np.clip(perturbed, *self.bounds)\n                    perturbed_fitness = func(perturbed)\n                    eval_count += 1\n                    if perturbed_fitness < fitness[best_idx]:\n                        best[j] = perturbed[j]\n                        fitness[best_idx] = perturbed_fitness\n\n        return best", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Local Search for balanced global and local exploration.", "configspace": "", "generation": 0, "fitness": 0.27925224813017663, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6217124931472178, 0.6217124931472178, 0.6217124931472178, 0.6419625249755759, 0.6419625249755759, 0.6419625249755759, 0.6644906872816913, 0.6644906872816913, 0.6644906872816913, 0.36178130679494347, 0.36178130679494347, 0.36178130679494347, 0.33156274986055245, 0.33156274986055245, 0.33156274986055245, 0.371351568136571, 0.371351568136571, 0.371351568136571, 0.12337916209470856, 0.12337916209470856, 0.12337916209470856, 0.11557940312234438, 0.11557940312234438, 0.11557940312234438, 0.1335284689407017, 0.1335284689407017, 0.1335284689407017, 0.10908409826431997, 0.10908409826431997, 0.10908409826431997, 0.1316104785231721, 0.1316104785231721, 0.1316104785231721, 0.10224877192359327, 0.10224877192359327, 0.10224877192359327, 0.9583151548662702, 0.9583151548662702, 0.9583151548662702, 0.9689072118135132, 0.9689072118135132, 0.9689072118135132, 0.9514264264793563, 0.9514264264793563, 0.9514264264793563, 0.2752191546480852, 0.2752191546480852, 0.2752191546480852, 0.2753014801126077, 0.2753014801126077, 0.2753014801126077, 0.3253075972613506, 0.3253075972613506, 0.3253075972613506, 0.5509206739354928, 0.5509206739354928, 0.5509206739354928, 0.5282844639827587, 0.5282844639827587, 0.5282844639827587, 0.5768237087906534, 0.5768237087906534, 0.5768237087906534, 0.17912559173366027, 0.17912559173366027, 0.17912559173366027, 0.1805965932071666, 0.1805965932071666, 0.1805965932071666, 0.196220004750856, 0.196220004750856, 0.196220004750856, 0.1288860258436132, 0.1288860258436132, 0.1288860258436132, 0.17116287717315648, 0.17116287717315648, 0.17116287717315648, 0.16367806452836575, 0.16367806452836575, 0.16367806452836575, 0.13113363246657206, 0.13113363246657206, 0.13113363246657206, 0.10452784096588452, 0.10452784096588452, 0.10452784096588452, 0.12681170218348525, 0.12681170218348525, 0.12681170218348525, 0.2260912555144018, 0.2260912555144018, 0.2260912555144018, 0.2158133188755723, 0.2158133188755723, 0.2158133188755723, 0.24192395010255208, 0.24192395010255208, 0.24192395010255208, 0.011821569324071413, 0.011821569324071413, 0.011821569324071413, 0.02785211917804442, 0.02785211917804442, 0.02785211917804442, 0.03999956892066259, 0.03999956892066259, 0.03999956892066259, 0.15447943624774851, 0.15447943624774851, 0.15447943624774851, 0.15309498759605344, 0.15309498759605344, 0.15309498759605344, 0.14805309409601852, 0.14805309409601852, 0.14805309409601852, 0.5443110781923308, 0.5443110781923308, 0.5443110781923308, 0.47461168371014595, 0.47461168371014595, 0.47461168371014595, 0.509930748235067, 0.509930748235067, 0.509930748235067, 0.10566078160342929, 0.10566078160342929, 0.10566078160342929, 0.08179944837883724, 0.08179944837883724, 0.08179944837883724, 0.09607749954876743, 0.09607749954876743, 0.09607749954876743, 0.15534598493225804, 0.15534598493225804, 0.15534598493225804, 0.17926230600051296, 0.17926230600051296, 0.17926230600051296, 0.16629954044184891, 0.16629954044184891, 0.16629954044184891, 0.25290961440611237, 0.25290961440611237, 0.25290961440611237, 0.2628808784778267, 0.2628808784778267, 0.2628808784778267, 0.2746201742970851, 0.2746201742970851, 0.2746201742970851, 0.20520611365987118, 0.20520611365987118, 0.20520611365987118, 0.20394920385155635, 0.20394920385155635, 0.20394920385155635, 0.21092186039595917, 0.21092186039595917, 0.21092186039595917, 0.18003939375665123, 0.18003939375665123, 0.18003939375665123, 0.2261489048387495, 0.2261489048387495, 0.2261489048387495, 0.18511235254001956, 0.18511235254001956, 0.18511235254001956, 0.21669739464853732, 0.21669739464853732, 0.21669739464853732, 0.1978909438425278, 0.1978909438425278, 0.1978909438425278, 0.21679233926270325, 0.21679233926270325, 0.21679233926270325, 0.7191557168856344, 0.7191557168856344, 0.7191557168856344, 0.7062555905678303, 0.7062555905678303, 0.7062555905678303, 0.1789716462614912, 0.1789716462614912, 0.1789716462614912, 0.2009727327656765, 0.2009727327656765, 0.2009727327656765, 0.19792798764862474, 0.19792798764862474, 0.19792798764862474, 0.6099609924368004, 0.6099609924368004, 0.6099609924368004, 0.18225512200854876, 0.18225512200854876, 0.18225512200854876, 0.22288377067938747, 0.22288377067938747, 0.22288377067938747, 0.18854750751010863, 0.18854750751010863, 0.18854750751010863, 0.08610664778005284, 0.08610664778005284, 0.08610664778005284, 0.070855521958481, 0.070855521958481, 0.070855521958481, 0.07573116618591835, 0.07573116618591835, 0.07573116618591835]}, "mutation_prompt": null}
{"id": "45273e0d-0682-441e-9526-462c1edaf21a", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        eval_count = self.pop_size\n\n        while eval_count < self.budget:\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), *self.bounds)\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n            # Adaptive Local Search\n            local_search_radius = (self.bounds[1] - self.bounds[0]) * 0.05\n            if eval_count + self.dim <= self.budget:\n                for j in range(self.dim):\n                    if eval_count >= self.budget:\n                        break\n                    perturbed = best.copy()\n                    perturbed[j] += np.random.uniform(-local_search_radius, local_search_radius)\n                    perturbed = np.clip(perturbed, *self.bounds)\n                    perturbed_fitness = func(perturbed)\n                    eval_count += 1\n                    if perturbed_fitness < fitness[best_idx]:\n                        best[j] = perturbed[j]\n                        fitness[best_idx] = perturbed_fitness\n\n        return best", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Local Search for balanced global and local exploration.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7b0fe650-9a5c-4090-bcf2-7caad73661eb", "metadata": {"aucs": [0.6217124931472178, 0.6217124931472178, 0.6217124931472178, 0.6419625249755759, 0.6419625249755759, 0.6419625249755759, 0.6644906872816913, 0.6644906872816913, 0.6644906872816913, 0.36178130679494347, 0.36178130679494347, 0.36178130679494347, 0.33156274986055245, 0.33156274986055245, 0.33156274986055245, 0.371351568136571, 0.371351568136571, 0.371351568136571, 0.12337916209470856, 0.12337916209470856, 0.12337916209470856, 0.11557940312234438, 0.11557940312234438, 0.11557940312234438, 0.1335284689407017, 0.1335284689407017, 0.1335284689407017, 0.10908409826431997, 0.10908409826431997, 0.10908409826431997, 0.1316104785231721, 0.1316104785231721, 0.1316104785231721, 0.10224877192359327, 0.10224877192359327, 0.10224877192359327, 0.9583151548662702, 0.9583151548662702, 0.9583151548662702, 0.9689072118135132, 0.9689072118135132, 0.9689072118135132, 0.9514264264793563, 0.9514264264793563, 0.9514264264793563, 0.2752191546480852, 0.2752191546480852, 0.2752191546480852, 0.2753014801126077, 0.2753014801126077, 0.2753014801126077, 0.3253075972613506, 0.3253075972613506, 0.3253075972613506, 0.5509206739354928, 0.5509206739354928, 0.5509206739354928, 0.5282844639827587, 0.5282844639827587, 0.5282844639827587, 0.5768237087906534, 0.5768237087906534, 0.5768237087906534, 0.17912559173366027, 0.17912559173366027, 0.17912559173366027, 0.1805965932071666, 0.1805965932071666, 0.1805965932071666, 0.196220004750856, 0.196220004750856, 0.196220004750856, 0.1288860258436132, 0.1288860258436132, 0.1288860258436132, 0.17116287717315648, 0.17116287717315648, 0.17116287717315648, 0.16367806452836575, 0.16367806452836575, 0.16367806452836575, 0.13113363246657206, 0.13113363246657206, 0.13113363246657206, 0.10452784096588452, 0.10452784096588452, 0.10452784096588452, 0.12681170218348525, 0.12681170218348525, 0.12681170218348525, 0.2260912555144018, 0.2260912555144018, 0.2260912555144018, 0.2158133188755723, 0.2158133188755723, 0.2158133188755723, 0.24192395010255208, 0.24192395010255208, 0.24192395010255208, 0.011821569324071413, 0.011821569324071413, 0.011821569324071413, 0.02785211917804442, 0.02785211917804442, 0.02785211917804442, 0.03999956892066259, 0.03999956892066259, 0.03999956892066259, 0.15447943624774851, 0.15447943624774851, 0.15447943624774851, 0.15309498759605344, 0.15309498759605344, 0.15309498759605344, 0.14805309409601852, 0.14805309409601852, 0.14805309409601852, 0.5443110781923308, 0.5443110781923308, 0.5443110781923308, 0.47461168371014595, 0.47461168371014595, 0.47461168371014595, 0.509930748235067, 0.509930748235067, 0.509930748235067, 0.10566078160342929, 0.10566078160342929, 0.10566078160342929, 0.08179944837883724, 0.08179944837883724, 0.08179944837883724, 0.09607749954876743, 0.09607749954876743, 0.09607749954876743, 0.15534598493225804, 0.15534598493225804, 0.15534598493225804, 0.17926230600051296, 0.17926230600051296, 0.17926230600051296, 0.16629954044184891, 0.16629954044184891, 0.16629954044184891, 0.25290961440611237, 0.25290961440611237, 0.25290961440611237, 0.2628808784778267, 0.2628808784778267, 0.2628808784778267, 0.2746201742970851, 0.2746201742970851, 0.2746201742970851, 0.20520611365987118, 0.20520611365987118, 0.20520611365987118, 0.20394920385155635, 0.20394920385155635, 0.20394920385155635, 0.21092186039595917, 0.21092186039595917, 0.21092186039595917, 0.18003939375665123, 0.18003939375665123, 0.18003939375665123, 0.2261489048387495, 0.2261489048387495, 0.2261489048387495, 0.18511235254001956, 0.18511235254001956, 0.18511235254001956, 0.21669739464853732, 0.21669739464853732, 0.21669739464853732, 0.1978909438425278, 0.1978909438425278, 0.1978909438425278, 0.21679233926270325, 0.21679233926270325, 0.21679233926270325, 0.7191557168856344, 0.7191557168856344, 0.7191557168856344, 0.7062555905678303, 0.7062555905678303, 0.7062555905678303, 0.1789716462614912, 0.1789716462614912, 0.1789716462614912, 0.2009727327656765, 0.2009727327656765, 0.2009727327656765, 0.19792798764862474, 0.19792798764862474, 0.19792798764862474, 0.6099609924368004, 0.6099609924368004, 0.6099609924368004, 0.18225512200854876, 0.18225512200854876, 0.18225512200854876, 0.22288377067938747, 0.22288377067938747, 0.22288377067938747, 0.18854750751010863, 0.18854750751010863, 0.18854750751010863, 0.08610664778005284, 0.08610664778005284, 0.08610664778005284, 0.070855521958481, 0.070855521958481, 0.070855521958481, 0.07573116618591835, 0.07573116618591835, 0.07573116618591835]}, "mutation_prompt": null}
