{"id": "36891086-cc7a-4573-9bb3-0cc17005f88c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, self.budget // 2)\n        self.c1 = 1.5  # cognitive parameter\n        self.c2 = 1.5  # social parameter\n        self.w = 0.7   # inertia weight\n        self.F = 0.5   # differential weight\n        self.CR = 0.9  # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([func(p) for p in particles])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO phase\n            r1, r2 = np.random.rand(2)\n            velocities = self.w * velocities + self.c1 * r1 * (personal_best_positions - particles) + self.c2 * r2 * (global_best_position - particles)\n            particles = np.clip(particles + velocities, self.lower_bound, self.upper_bound)\n\n            # DE phase\n            new_population = np.copy(particles)\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(list(range(self.population_size)), 3, replace=False)\n                a, b, c = particles[indices]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_indices = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_indices, mutant, particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < personal_best_scores[i]:\n                    personal_best_scores[i] = trial_score\n                    personal_best_positions[i] = trial\n\n                if trial_score < global_best_score:\n                    global_best_score = trial_score\n                    global_best_position = trial\n\n            if evaluations >= self.budget:\n                break\n\n            particles = np.copy(personal_best_positions)\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Adaptive Differential Evolution (DE) that dynamically balances exploration and exploitation using swarm intelligence and adaptive mutation strategies.", "configspace": "", "generation": 0, "fitness": 0.18761930413135264, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.30710984932104124, 0.39809360410427364, 0.43606342126942743, 0.37689916712695304, 0.42319373072715327, 0.4870433189148773, 0.3461479522859626, 0.4014044125703933, 0.47242693940772784, 9.999999999998899e-05, 0.04790745106417471, 9.999999999998899e-05, 0.06511991780807658, 0.050176461163629615, 0.04821191831524063, 0.0197392127136653, 0.0041448760662397, 0.03531744972245976, 0.054370698493404035, 0.06086685391899227, 0.08693156590889795, 0.056539047637942486, 0.06346482669466369, 0.0755842722766702, 0.06129098960732482, 0.04634434125891218, 0.08019845456951358, 0.04408964220082778, 0.0775998110504017, 0.07596587481571515, 0.0768787006293884, 0.038314680121310785, 0.09510808889486166, 0.05120777092640949, 0.07055742086633332, 0.07590599783532959, 0.963139182410658, 0.9570674078057384, 0.9519874224930274, 0.9531869153637424, 0.9371282469898373, 0.9632498287860639, 0.9640795052144117, 0.9461616423757029, 0.9640127183481967, 0.21104541752534656, 0.1064912053671846, 0.2444142904922928, 0.12510853187151993, 0.13557370440296512, 0.14332235310329766, 0.11328506090395363, 0.22058971077750378, 0.08786372194681702, 0.19784151021419938, 0.1674367086376255, 0.1631863089819099, 0.1872427696063902, 0.30234183035482476, 0.18974133918884117, 0.23739528662589482, 0.23694438344586777, 0.5318934003540972, 0.10875413005565204, 0.16291571822284312, 0.22171054401689694, 0.08332627845231277, 0.11490680596455838, 0.18240375518027663, 0.09566099639889958, 0.10825798006658538, 0.19891778278392236, 0.07533134627724869, 0.16942585986954928, 0.18535704171449008, 0.10241403352772793, 0.13237868789636564, 0.2196689901300798, 0.05463783089737795, 0.13478954346376582, 0.21710557277204678, 0.0065654975325932785, 0.014070569393831112, 0.09430816598525471, 0.0014255782776970705, 0.014028084930977625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014502628202013312, 0.062468216180334823, 0.13490935260192982, 0.17940202587847165, 0.11070854780450501, 0.0840871320474349, 0.16296278390131447, 0.04669761664228622, 0.034575136920769856, 0.020096330474691282, 9.999999999998899e-05, 0.00841470791890575, 0.00998916729060273, 0.0009791191042106684, 0.015150939107532402, 0.025181482517008025, 0.0001703767594415373, 0.007386963646372369, 0.027352004243739292, 0.06173506617471214, 0.08983465689966486, 0.12442067453884798, 0.026322365746032306, 0.10907596840438927, 0.03147136151811902, 0.06499509263365177, 0.10346439547584374, 0.04613992620706431, 0.34847244477992967, 0.37842194682080177, 0.4135651382952944, 0.29819743564980883, 0.33105787188677593, 0.4411901590858912, 0.3110116796042386, 0.3714144034000979, 0.4207244949144553, 0.06801709596726646, 0.07323036885917922, 0.07220693338055151, 0.054592919608128954, 0.05977275232917001, 0.07988247800462034, 0.05019515906693195, 0.09044375656060388, 0.07890205582672116, 0.14714777663633194, 0.13073309631017527, 0.1592595801252079, 0.1482524538123291, 0.15347767941950408, 0.1538354036140852, 0.14747852236544534, 0.15585862121086125, 0.12776153921044497, 0.23364091819511768, 0.24722048944393782, 0.23759511199210992, 0.19272866737591343, 0.21741791643748498, 0.29356085514857766, 0.23190635121197012, 0.25607593715906163, 0.19214893448862436, 0.15294818680073818, 0.19061021195416084, 0.20477136920257932, 0.1548704021631826, 0.1846193269787394, 0.21215871289715227, 0.14185269562083358, 0.21674794226707506, 0.12107944261330972, 0.17547504558153393, 0.17053212802155338, 0.1963261588299703, 0.17950329594711512, 0.18582569156593576, 0.1716906909136391, 0.1668090223955403, 0.17742483237343876, 0.1997582177527073, 0.17056258345985376, 0.18128363358721922, 0.22995627674763885, 0.172742062998403, 0.1877433617271247, 0.18580084801653685, 0.17419200529932855, 0.1769021719463575, 0.17209685636430172, 0.12511372906187812, 0.18166054860459568, 0.16272479358495473, 0.14658765911981242, 0.19243176362198633, 0.16113955894507648, 0.14049894621878645, 0.5440392301320107, 0.16396968355828945, 0.36397503189726865, 0.20332866605237065, 0.07181373091371279, 0.351989804206998, 0.202765940709558, 0.5269860537118718, 0.13085148006165914, 0.4965632806586776, 0.21860998021832034, 0.19010997683438058, 0.21103043655565634, 0.18781368535253917, 0.19345146907202782, 0.17161126093383083, 0.19384355615557824, 0.19245998797530972, 0.19915073269578454, 0.17743814366162203, 0.06789716439884486, 0.06978608173794187, 0.06654798970225984, 0.06969586782910997, 0.05542958806375209, 0.070373803431236, 0.06974568919787272, 0.06744345740786284, 0.06485720671997985]}, "mutation_prompt": null}
{"id": "9a1f2726-215c-448a-8856-3cb375517e9e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, self.budget // 2)\n        self.c1 = 1.5  # cognitive parameter\n        self.c2 = 1.5  # social parameter\n        self.w = 0.7   # inertia weight\n        self.F = 0.5   # differential weight\n        self.CR = 0.9  # crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([func(p) for p in particles])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO phase\n            r1, r2 = np.random.rand(2)\n            velocities = self.w * velocities + self.c1 * r1 * (personal_best_positions - particles) + self.c2 * r2 * (global_best_position - particles)\n            particles = np.clip(particles + velocities, self.lower_bound, self.upper_bound)\n\n            # DE phase\n            new_population = np.copy(particles)\n            for i in range(self.population_size):\n                # Mutation with adaptive scaling factor\n                indices = np.random.choice(list(range(self.population_size)), 3, replace=False)\n                a, b, c = particles[indices]\n                F_adaptive = self.F + (np.random.rand() - 0.5) * 0.2  # Adjust F randomly within a range\n                mutant = np.clip(a + F_adaptive * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover and heuristic local search\n                crossover_indices = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_indices, mutant, particles[i])\n                heuristic_trial = trial + 0.1 * (global_best_position - trial)\n                heuristic_trial = np.clip(heuristic_trial, self.lower_bound, self.upper_bound)\n\n                # Selection with adaptive choice\n                trial_score = func(trial)\n                heuristic_score = func(heuristic_trial)\n                evaluations += 2  # Two function evaluations\n\n                if heuristic_score < trial_score:\n                    trial_score = heuristic_score\n                    trial = heuristic_trial\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_scores[i] = trial_score\n                    personal_best_positions[i] = trial\n\n                if trial_score < global_best_score:\n                    global_best_score = trial_score\n                    global_best_position = trial\n\n            if evaluations >= self.budget:\n                break\n\n            particles = np.copy(personal_best_positions)\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Adaptive Differential Evolution and adaptive selection that dynamically balances exploration and exploitation using swarm intelligence, adaptive mutation, and heuristic local search strategies.", "configspace": "", "generation": 1, "fitness": 0.18971211488034515, "feedback": "", "error": "", "parent_id": "36891086-cc7a-4573-9bb3-0cc17005f88c", "metadata": {"aucs": [0.3682940066886141, 0.441730429475636, 0.3776645050747701, 0.32757086830651283, 0.42290416396844444, 0.36436422921239886, 0.3459047437872964, 0.42346546363834137, 0.3604133654555022, 0.043888822340791056, 0.08799158066624657, 9.999999999998899e-05, 0.0194180158058207, 0.06468358709131172, 0.023034353259867246, 0.019643030542917606, 0.1007871717319766, 0.019447281623689916, 0.0660576337813944, 0.09369651943026036, 0.09867934854747562, 0.09376306381531485, 0.09378147498744638, 0.09419107331972287, 0.08742969284386815, 0.08693982710143244, 0.074086349369066, 0.052104682901289556, 0.07638176660329266, 0.07304392606574839, 0.06848756656924437, 0.06397048190225318, 0.06987800783433673, 0.07120862482782464, 0.07026958640726078, 0.08292122169806604, 0.9501429376831114, 0.9552654874066868, 0.9372420248668746, 0.8671372967911114, 0.9199043947315878, 0.9266041882260908, 0.9556584668048205, 0.9390712335772629, 0.9181200147095426, 0.15235765036270588, 0.10030670409940978, 0.092999789457195, 0.12937498575947026, 0.17660754432335635, 0.1361330290911994, 0.18581631741813087, 0.18660415829307886, 0.1597903689517336, 0.277997459691813, 0.29614924366567175, 0.2218991094769851, 0.2780281916108067, 0.3276738456694309, 0.1160701913454486, 0.16539549092467698, 0.2792778114124178, 0.22172274725030638, 0.11392107006832353, 0.15928316244940866, 0.13321023358575712, 0.045316060639835065, 0.19597522700801284, 0.09432419883789933, 0.11087678960489034, 0.12052944567642576, 0.13474602204253983, 0.12236281436112206, 0.20004953333169428, 0.12254046521886719, 0.10665085434942267, 0.16061962786369421, 0.1289023535149818, 0.10874662297909932, 0.16747390122192285, 0.10940652406309381, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017477420204619953, 0.03459847387970827, 0.000789192017086715, 0.013069700460333844, 0.025515163207249114, 0.0015558089384721807, 0.13146202210267077, 0.127284328057224, 0.020423335572845147, 0.05145581692713763, 0.1324174299845241, 0.06732428020402259, 0.09764538609253581, 0.16413142302982664, 0.07112378476466397, 9.999999999998899e-05, 0.0006325214161388981, 9.999999999998899e-05, 9.999999999998899e-05, 0.031546777087082645, 9.999999999998899e-05, 0.0010589632040619579, 9.999999999998899e-05, 9.999999999998899e-05, 0.06626846189274072, 0.007459619999886091, 0.07741906704820378, 0.06917541697922192, 0.0967121501501117, 0.08318480884611379, 0.05153521067332045, 0.061560433319810204, 0.054415453239228584, 0.34289247111388965, 0.3629025990606074, 0.33989230502847945, 0.31498962636697125, 0.38120076210117493, 0.357319660486771, 0.3096304889490604, 0.37634705172224026, 0.3156714692159732, 0.061764398856734126, 0.0696562920975401, 0.07523584444942066, 0.07956626078493734, 0.07642957095501857, 0.07685315330560938, 0.06529888328746236, 0.05902781131278534, 0.05893485903549822, 0.14715281856550444, 0.15819569151345536, 0.15628909875813302, 0.15479043225789924, 0.19570339405211334, 0.14301372885794894, 0.14776430176878697, 0.14904939156004582, 0.18204684128277981, 0.2512074655974268, 0.27137129732328946, 0.24449243891152517, 0.21510656578975162, 0.2631913024507173, 0.2181783011260099, 0.2255037698626644, 0.2657369434752026, 0.22189585835263037, 0.17450869885822118, 0.20523460710159924, 0.20472613753067448, 0.1571622995401789, 0.19207724154587857, 0.17431686691964332, 0.18081411067190867, 0.19069368101214568, 0.15050724065097698, 0.172358423260344, 0.196007889765345, 0.19290169397674106, 0.235453521276221, 0.16898560681998387, 0.18344866783427005, 0.1853676562043236, 0.20421587772862337, 0.18327401136314614, 0.17330977199652875, 0.1791770221649014, 0.17246428159916283, 0.1745475506647619, 0.16852872238682703, 0.179324454001905, 0.17787849701378966, 0.18975785255771338, 0.18006249184606582, 0.11397442150526116, 0.5774732539820802, 0.5253452983267661, 0.18864346248479236, 0.19318615979149878, 0.3763755473317437, 0.1387515130674647, 0.5755308009679121, 0.4174717599570388, 0.41799729143851183, 0.1682898775387368, 0.16613077501818496, 0.44382770271754235, 0.1645380900339658, 0.16700323209213253, 0.15908158610650358, 0.1509741238474922, 0.4091766022919262, 0.20221001518110948, 0.1705765530065524, 0.20149631753387132, 0.18080229399929393, 0.187089309018022, 0.19473766090558353, 0.1927680913472326, 0.1748499067088013, 0.17640310943526294, 0.07520858864269919, 0.07939799087745891, 0.07733176268118624, 0.07974837747387242, 0.07293908880132527, 0.07166887286298429, 0.053042906756726405, 0.07348546473153894, 0.08425647337134434]}, "mutation_prompt": null}
