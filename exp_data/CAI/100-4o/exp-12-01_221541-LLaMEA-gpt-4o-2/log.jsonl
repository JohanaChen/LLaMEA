{"id": "f9e902e6-d44e-4e64-9be6-c5f257c78f5c", "solution": "import numpy as np\n\nclass HybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.elite_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            new_population = np.zeros_like(population)\n            elite_count = int(self.elite_rate * self.population_size)\n            sorted_indices = np.argsort(fitness)\n            for i in range(self.population_size):\n                if i < elite_count:\n                    new_population[i] = population[sorted_indices[i]]\n                    continue\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = population[indices]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.copy(population[i])\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial[crossover_mask] = mutant[crossover_mask]\n\n                if func(trial) < fitness[i]:\n                    new_population[i] = trial\n                else:\n                    new_population[i] = population[i]\n\n                eval_count += 1\n\n                if eval_count >= self.budget:\n                    break\n\n            population = new_population\n            fitness = np.array([func(ind) for ind in population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridOptimizer", "description": "A hybrid genetic algorithm with adaptive mutation and differential evolution crossover to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.19178162511911412, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.4325290987087792, 0.41217944024194597, 0.43074580185807376, 0.43039165619728637, 0.43719346038592943, 0.46536376014949776, 0.4445503336427341, 0.42818664107528204, 0.4327276603546376, 0.1378308069414772, 0.15222424856262473, 0.1781125602912894, 0.1365505147742555, 0.16341977161416377, 0.15982647631191105, 0.1678676930055253, 0.16557342499456185, 0.17308838389451797, 0.08485981025347811, 0.07617520434091662, 0.09003887688354284, 0.09131960394262628, 0.06854402808773208, 0.09237309787694126, 0.0732574574638063, 0.0831620622033612, 0.06803540298834343, 0.06713013678771862, 0.06999594440902379, 0.08657309577014638, 0.07014154686695329, 0.06956474085690101, 0.06146622178899486, 0.07264103496209029, 0.07750146647215173, 0.07093925267413326, 0.9337356591487437, 0.9343785483082367, 0.9225419151024489, 0.9149994544637249, 0.871467819083463, 0.8961363013571892, 0.9100202132857744, 0.8798890811226947, 0.9615076807598207, 0.17923772497484025, 0.16763265348927925, 0.1752971443924376, 0.1953879497901747, 0.17439773172501316, 0.18294408953921892, 0.1954058202935418, 0.19669271766094976, 0.18828245755852813, 0.2711640779878641, 0.2372605910137603, 0.24144452902502023, 0.327788522574059, 0.276328496223629, 0.29021612622662474, 0.2503594540352788, 0.27926104480701586, 0.24711308969285262, 0.10998978983111662, 0.11399142990111355, 0.10667172302643446, 0.12074796913829522, 0.13633918314318338, 0.1200647175603512, 0.1134937980131635, 0.11504285409059589, 0.11538638773792409, 0.142671969128646, 0.019580013569480803, 0.15735522078837316, 0.12576029319948334, 0.11573161616231609, 0.11107336208806773, 0.10099694922942382, 0.10474869191070468, 0.12707408276136267, 0.034555348510883266, 0.052137589479976265, 0.03260068391444726, 0.0576466030787407, 0.0239536643466578, 0.035922740595478175, 0.030172539241769658, 0.059331654227238184, 0.041082435682412544, 0.15248816820430333, 0.17190576789110912, 0.13520791378842312, 0.12165158504392493, 0.16897993966414393, 0.12983867435048946, 0.13981195760069987, 0.14197087584051404, 0.17584428855213352, 0.0004982861317847087, 0.012118557293928856, 0.0030954451187693577, 9.999999999998899e-05, 0.00024254159357772753, 0.0001110189514732518, 0.000748378101384839, 0.003560080102510632, 0.004523898841864327, 0.07142547617341766, 0.09427483374077528, 0.08887725164803995, 0.09417635396363, 0.08881625682215, 0.08762932994538442, 0.08750500297945751, 0.0727842549398956, 0.08479114539529142, 0.3719966720576324, 0.36931688723900524, 0.35744242046249, 0.38381087550938164, 0.36664820800326825, 0.3716108061059855, 0.369343140212511, 0.3494785000121766, 0.36288315328265075, 0.0752136375301421, 0.0732061316508602, 0.06730711023883029, 0.07271183799958347, 0.07230254885691334, 0.06918038131692006, 0.07244437541009174, 0.06520173926561079, 0.09972854844487133, 0.14299844003579765, 0.1430351732297378, 0.13338645893375034, 0.1409603738793529, 0.1528855451381922, 0.28101004218295167, 0.141975933423927, 0.11863944102327606, 0.12108857569692844, 0.2371141673703634, 0.23947741172064096, 0.2281227447478188, 0.23013876400860234, 0.22145305599582488, 0.21079852485534079, 0.2399802288972911, 0.22538476254710715, 0.23136191268989237, 0.15638512577841923, 0.17058027109498397, 0.17543299222833098, 0.15765808068683362, 0.15636818701674604, 0.17462092916291772, 0.18408952402865664, 0.19162346075774994, 0.1863193278902321, 0.1766966973706794, 0.15887809776480444, 0.17089377847528264, 0.16835728218333734, 0.16859153985682174, 0.17124117909235026, 0.15781796092662081, 0.20868561849193767, 0.16068744483582997, 0.1738477548643328, 0.1597588560205615, 0.16691890525482844, 0.17306662375870396, 0.16001295187755626, 0.16506922662812595, 0.15690929761407535, 0.16181360858068294, 0.16986336030057703, 0.159454867273369, 0.1621015725658359, 0.17526177726562997, 0.16981591152014475, 0.1551428529120198, 0.15274745240710252, 0.16718976048607015, 0.21271181833193598, 0.1606591011069639, 0.32417180570133763, 0.186177199758514, 0.16012381699442635, 0.29830053323463357, 0.26996177300834456, 0.16177427839958636, 0.3788590693367885, 0.1907460119831721, 0.1960368351938988, 0.18599919741627968, 0.18247348948119457, 0.18411051019052127, 0.17028897114999564, 0.20063501803186123, 0.16746776527724427, 0.17727019786878206, 0.17032355147785672, 0.1625590636444365, 0.07482189071552914, 0.057594099670722265, 0.06060114794286764, 0.05912319653936993, 0.07411784235653507, 0.053845325266372535, 0.06332329744339293, 0.06609535237226938, 0.06104585457369116]}, "mutation_prompt": null}
{"id": "5cef181e-ab1e-40bf-81cb-c91e85cd01ad", "solution": "import numpy as np\n\nclass HybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_factor = 0.85  # Slightly increased mutation factor to enhance exploration\n        self.crossover_rate = 0.9\n        self.elite_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            new_population = np.zeros_like(population)\n            elite_count = int(self.elite_rate * self.population_size)\n            sorted_indices = np.argsort(fitness)\n            for i in range(self.population_size):\n                if i < elite_count:\n                    new_population[i] = population[sorted_indices[i]]\n                    continue\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = population[indices]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.copy(population[i])\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial[crossover_mask] = mutant[crossover_mask]\n\n                if func(trial) < fitness[i]:\n                    new_population[i] = trial\n                else:\n                    new_population[i] = population[i]\n\n                eval_count += 1\n\n                if eval_count >= self.budget:\n                    break\n\n            population = new_population\n            fitness = np.array([func(ind) for ind in population])\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "HybridOptimizer", "description": "Enhanced exploration by increasing mutation factor to improve diversity in the search space.", "configspace": "", "generation": 1, "fitness": 0.18224833174377983, "feedback": "", "error": "", "parent_id": "f9e902e6-d44e-4e64-9be6-c5f257c78f5c", "metadata": {"aucs": [0.4232640605209391, 0.39445406257488624, 0.370978204594257, 0.3851626357245198, 0.40636375524923196, 0.4376625770330722, 0.4126075600110374, 0.41362191923735503, 0.3692431547855085, 0.13640076014014213, 0.1309966253359819, 0.15325011930200072, 0.10966366120664206, 0.14055827467989057, 0.13847133165962022, 0.13647678142014796, 0.12605016029604343, 0.14728091928224818, 0.07813910197221086, 0.06872701142041882, 0.07615871661313633, 0.07828496884121983, 0.07582892120979778, 0.07590078826335556, 0.09581861652704105, 0.0776192812689771, 0.08248860929969448, 0.0819774955281477, 0.07466308955174294, 0.061495549518938986, 0.06987662245709303, 0.07491602493247318, 0.06928392237356329, 0.08183487009261914, 0.06592796930148237, 0.05666330614525783, 0.9451410972810111, 0.927871221861344, 0.8927243237781959, 0.9147443572051988, 0.9197099288962594, 0.8641366986420667, 0.9175892893572344, 0.8767709401062106, 0.961686998137807, 0.1700003497160908, 0.15112139339986153, 0.14915008331666268, 0.15398231170022614, 0.17043857100865878, 0.1714421314004625, 0.17108887497416658, 0.16036180729257243, 0.16716917763345918, 0.23244249579965814, 0.3048542310880399, 0.20448437019712806, 0.31488900757517535, 0.28211062942260046, 0.25290735717772683, 0.26280137616410093, 0.23414197808056558, 0.2180293552776308, 0.0961714502459401, 0.09896584038882816, 0.10042219930469853, 0.09726891523876624, 0.10940733466479347, 0.0956387039821136, 0.09935249390668943, 0.10215081353790212, 0.12789341814779343, 0.15823104397765253, 0.07294309234963803, 0.01953939655299275, 0.11089322275053437, 0.10414213377013493, 0.12053366189862025, 0.09994130683055813, 0.09840284230483576, 0.10598748594977536, 0.026151024087178065, 0.047071882563244793, 0.018305458541801767, 0.028992721639529373, 0.016392019235405453, 0.037948953181138445, 0.049327668560978366, 0.017168465846814418, 0.016976206353306766, 0.09062345181601761, 0.15154940167857167, 0.13718637897088537, 0.08668487795426949, 0.14193735301742727, 0.1640783706467328, 0.12177826354825971, 0.10527035700437304, 0.11452840663407438, 9.999999999998899e-05, 9.999999999998899e-05, 0.00047691117958670315, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001314423427087874, 9.999999999998899e-05, 0.0735479641036142, 0.08998318750888179, 0.06412423406014045, 0.07541198550761108, 0.09038858893946067, 0.0828758745979834, 0.07819568156669687, 0.08987166811913194, 0.06656590742152202, 0.3182529927548118, 0.3308929983748281, 0.3282516283839916, 0.357955065593644, 0.32744463195580553, 0.3380314738825635, 0.3431186150029296, 0.3570348776247785, 0.330509215843231, 0.07033456500478674, 0.09620428857771857, 0.08227008550541504, 0.08115938163213487, 0.06544857865280229, 0.07026342067688496, 0.07500795580114794, 0.06611594118676367, 0.062597860477416, 0.13106493106491945, 0.13395376547245819, 0.1780582120622377, 0.1443124577571765, 0.14656229255418363, 0.12830115828723188, 0.12713215097060437, 0.14774942393779456, 0.13133911206183568, 0.21590548903873674, 0.2172924503186291, 0.22566246338608476, 0.21523757092240614, 0.20524099559844322, 0.22049697492980813, 0.2307255515526102, 0.24112197638331057, 0.22615345517868457, 0.14778891798983618, 0.1576362566660986, 0.16244366108906105, 0.16421906221933547, 0.16221763217753382, 0.1498022833665602, 0.16747480513245938, 0.16429072833789082, 0.174329553488471, 0.16571528034203165, 0.1674917977664805, 0.15408808862439727, 0.15914129915806208, 0.17751494811304036, 0.1671335318514222, 0.17249481418578738, 0.15340275170586815, 0.1772414709014316, 0.16668294288854946, 0.16482694635685036, 0.17048227951649753, 0.1662368997789292, 0.15818382305896617, 0.15637858539385485, 0.16867087374884993, 0.15201499890212256, 0.15432342809555177, 0.4401895174524936, 0.30603312145005845, 0.16810500700679198, 0.20265177298511405, 0.15024297277905208, 0.1406596711559358, 0.12904161773592182, 0.1415494419114477, 0.14473031889195498, 0.1932616902495944, 0.1880197592618792, 0.17033288869222885, 0.16547481805626707, 0.3363171776537922, 0.14076299355348398, 0.20112544395346255, 0.18853484352308236, 0.3241276093631462, 0.17829943342780696, 0.17278510120872392, 0.1621905942247609, 0.17340104470888507, 0.1964497565376231, 0.17531383268362422, 0.19345940392978422, 0.1814405615656176, 0.1805418627396761, 0.06591231392603636, 0.08564394401179798, 0.05992743047205773, 0.06597493614622585, 0.0646871776314949, 0.05835451146456794, 0.06326705946540456, 0.06176555614347157, 0.053600954138009915]}, "mutation_prompt": null}
