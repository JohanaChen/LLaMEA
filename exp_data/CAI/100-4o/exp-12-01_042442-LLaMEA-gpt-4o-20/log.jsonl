{"id": "ea8ed0fd-0471-44d3-9fc4-30b858d5134d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.particles = np.random.uniform(*self.bounds, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                score = func(self.particles[i])\n                self.eval_count += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            w = 0.5  # inertia weight\n            c1, c2 = 1.5, 1.5  # cognitive and social coefficients\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = c1 * r1 * (self.personal_best_positions[i] - self.particles[i])\n                social_component = c2 * r2 * (self.global_best_position - self.particles[i])\n                self.velocities[i] = w * self.velocities[i] + cognitive_component + social_component\n\n                # Differential Evolution crossover\n                if np.random.rand() < 0.5:\n                    idxs = np.random.choice(np.delete(np.arange(self.population_size), i), 2, replace=False)\n                    donor_vector = self.personal_best_positions[idxs[0]] + 0.5 * (self.personal_best_positions[idxs[1]] - self.personal_best_positions[i])\n                    trial_vector = np.copy(self.particles[i])\n                    jrand = np.random.randint(self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < 0.9 or j == jrand:\n                            trial_vector[j] = donor_vector[j]\n\n                    trial_vector = np.clip(trial_vector, *self.bounds)\n                    trial_score = func(trial_vector)\n                    self.eval_count += 1\n\n                    if trial_score < score:\n                        self.particles[i] = trial_vector\n                        self.personal_best_scores[i] = trial_score\n                        self.personal_best_positions[i] = trial_vector\n\n                        if trial_score < self.global_best_score:\n                            self.global_best_score = trial_score\n                            self.global_best_position = trial_vector\n                else:\n                    self.particles[i] += self.velocities[i]\n                    self.particles[i] = np.clip(self.particles[i], *self.bounds)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution crossover for diverse exploration and exploitation balance.", "configspace": "", "generation": 0, "fitness": 0.2082152022294648, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6156051947025176, 0.46160296408881063, 0.44516993672374827, 0.5294746395956973, 0.5398274333954656, 0.6408154515363622, 0.51589947138064, 0.5356450823972667, 0.6765014147594806, 0.20463491833985248, 0.2561657960218444, 0.2518632499326092, 0.2305630044995154, 0.27477774573553293, 0.23179581406146033, 0.1338383036881925, 0.2403919147407675, 0.2456873701823059, 0.09555936745894344, 0.10791396993473246, 0.09290231298836693, 0.08540816737730661, 0.10382396833322216, 0.09662215298653687, 0.07527609074710839, 0.11238771338965703, 0.09436620624203718, 0.07146439487507794, 0.07672305218598319, 0.08578100857486148, 0.09802278909192774, 0.08773404736515622, 0.10684601498315405, 0.09685930004457854, 0.06601688497200975, 0.06660123728364975, 0.9727269169639443, 0.9768980498919237, 0.9822200463124129, 0.965131786724911, 0.9720688781292046, 0.9751583562912449, 0.9685512367380745, 0.9714809258349361, 0.9698497504166428, 0.17011864504766816, 0.14382403267865118, 0.1520756662672369, 0.22130459089822074, 0.11252001987518578, 0.1412698892616956, 0.19186945553209733, 0.1696158017339956, 0.1602250246141237, 0.24153440505564283, 0.27068942758394066, 0.3256901276435248, 0.2206301540569343, 0.29788803421734533, 0.2638410442825566, 0.30954506428947337, 0.23682181930686164, 0.20113429741154487, 0.15007962646346007, 0.10180775772894668, 0.12200383153768313, 0.10208978148871106, 0.12283848195303304, 0.12974849017087364, 0.15301143103985015, 0.1404047911996804, 0.1541026927617739, 0.07263407883360906, 0.11816004432536553, 0.08008724701909176, 0.13686579622277728, 0.11941583196226602, 0.1807786176804066, 0.13906085453372985, 0.0836029961814303, 0.10097572693460277, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004367949094972179, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06793537711675923, 0.07040600833438548, 0.048498040014583244, 0.05082106251015572, 0.08378081422756967, 0.06826166790171662, 0.06772797646160567, 0.061149776358875196, 0.05358864077840575, 0.025954094890855206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05756552085910627, 9.999999999998899e-05, 0.06499078891112164, 0.08819988009996682, 0.06881838469407975, 0.07552526406400573, 0.08996600000688482, 0.045332922872770576, 0.08994340097439568, 0.07582230287730818, 0.06283802406862538, 0.43581482693456297, 0.42876670445749243, 0.4028463194284121, 0.4574024703984433, 0.3760453341272769, 0.4362714941102861, 0.4099512091427665, 0.40541068599449204, 0.350865189851702, 0.08432328557151048, 0.08179999326234833, 0.08028789260060099, 0.10610345668167354, 0.10675647114097342, 0.09346170347357352, 0.10008754632880812, 0.10299230217343125, 0.07303022516255919, 0.17166692718079335, 0.1365722743745249, 0.149583809754819, 0.15535717849706687, 0.15063135681978967, 0.1464189432264198, 0.14070958996855898, 0.16693090850440218, 0.12621588476949364, 0.25051968133650604, 0.2506632116042322, 0.25343025347238124, 0.25926770035785707, 0.3132835618684541, 0.31093546923462434, 0.3107620782965964, 0.3063642074157161, 0.34372464823629145, 0.15591318463201365, 0.1685720905329794, 0.2072996350199885, 0.18120103518538266, 0.16859483789254337, 0.19571227555430792, 0.2254572122973011, 0.22970390078222758, 0.21351156309356367, 0.1952348112595721, 0.17863525123217283, 0.17734955252365947, 0.18249344105227205, 0.20313007276680406, 0.1772185844919546, 0.1714200288881964, 0.1805341235347716, 0.18450003725100173, 0.17799300530448348, 0.1734012380595088, 0.16877134396106908, 0.18947605500568976, 0.1732305865660777, 0.20074647521754263, 0.17170675090894016, 0.17225348862754164, 0.16948715129510294, 0.16067247396729434, 0.1664079103166629, 0.30357169084820024, 0.40530317168598007, 0.5879379814078936, 0.19777241343980034, 0.27844494614446946, 0.27270935306219635, 0.16632415530057876, 0.22810679625564567, 0.19847654453641084, 0.18520252188937159, 0.2401962666840194, 0.2899810255928973, 0.13911540449793425, 0.111861321854135, 0.24184309914242752, 0.2065174555200151, 0.1673994779231469, 0.1899237038675594, 0.17216688118650125, 0.17500952591797636, 0.2010274878255769, 0.19373891927941955, 0.17326556855973285, 0.1852339996172111, 0.2113087531270037, 0.08268840428094903, 0.0710211265562326, 0.06927241207507195, 0.08122117284751385, 0.0762792188617557, 0.07279041321286861, 0.07673734392762, 0.0801654378972253, 0.0840041211126491]}, "mutation_prompt": null}
{"id": "8f47dfd2-3efa-48ce-a6a9-621da2e7f4b9", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.particles = np.random.uniform(*self.bounds, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                score = func(self.particles[i])\n                self.eval_count += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            w = 0.5  # inertia weight\n            c1, c2 = 1.5, 1.5  # cognitive and social coefficients\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = c1 * r1 * (self.personal_best_positions[i] - self.particles[i])\n                social_component = c2 * r2 * (self.global_best_position - self.particles[i])\n                self.velocities[i] = w * self.velocities[i] + cognitive_component + social_component\n\n                # Differential Evolution crossover\n                if np.random.rand() < 0.5:\n                    idxs = np.random.choice(np.delete(np.arange(self.population_size), i), 2, replace=False)\n                    donor_vector = self.personal_best_positions[idxs[0]] + 0.5 * (self.personal_best_positions[idxs[1]] - self.personal_best_positions[i])\n                    trial_vector = np.copy(self.particles[i])\n                    jrand = np.random.randint(self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < 0.9 or j == jrand:\n                            trial_vector[j] = donor_vector[j]\n\n                    trial_vector = np.clip(trial_vector, *self.bounds)\n                    trial_score = func(trial_vector)\n                    self.eval_count += 1\n\n                    if trial_score < score:\n                        self.particles[i] = trial_vector\n                        self.personal_best_scores[i] = trial_score\n                        self.personal_best_positions[i] = trial_vector\n\n                        if trial_score < self.global_best_score:\n                            self.global_best_score = trial_score\n                            self.global_best_position = trial_vector\n                else:\n                    self.particles[i] += self.velocities[i]\n                    self.particles[i] = np.clip(self.particles[i], *self.bounds)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution crossover for diverse exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea8ed0fd-0471-44d3-9fc4-30b858d5134d", "metadata": {"aucs": [0.6156051947025176, 0.46160296408881063, 0.44516993672374827, 0.5294746395956973, 0.5398274333954656, 0.6408154515363622, 0.51589947138064, 0.5356450823972667, 0.6765014147594806, 0.20463491833985248, 0.2561657960218444, 0.2518632499326092, 0.2305630044995154, 0.27477774573553293, 0.23179581406146033, 0.1338383036881925, 0.2403919147407675, 0.2456873701823059, 0.09555936745894344, 0.10791396993473246, 0.09290231298836693, 0.08540816737730661, 0.10382396833322216, 0.09662215298653687, 0.07527609074710839, 0.11238771338965703, 0.09436620624203718, 0.07146439487507794, 0.07672305218598319, 0.08578100857486148, 0.09802278909192774, 0.08773404736515622, 0.10684601498315405, 0.09685930004457854, 0.06601688497200975, 0.06660123728364975, 0.9727269169639443, 0.9768980498919237, 0.9822200463124129, 0.965131786724911, 0.9720688781292046, 0.9751583562912449, 0.9685512367380745, 0.9714809258349361, 0.9698497504166428, 0.17011864504766816, 0.14382403267865118, 0.1520756662672369, 0.22130459089822074, 0.11252001987518578, 0.1412698892616956, 0.19186945553209733, 0.1696158017339956, 0.1602250246141237, 0.24153440505564283, 0.27068942758394066, 0.3256901276435248, 0.2206301540569343, 0.29788803421734533, 0.2638410442825566, 0.30954506428947337, 0.23682181930686164, 0.20113429741154487, 0.15007962646346007, 0.10180775772894668, 0.12200383153768313, 0.10208978148871106, 0.12283848195303304, 0.12974849017087364, 0.15301143103985015, 0.1404047911996804, 0.1541026927617739, 0.07263407883360906, 0.11816004432536553, 0.08008724701909176, 0.13686579622277728, 0.11941583196226602, 0.1807786176804066, 0.13906085453372985, 0.0836029961814303, 0.10097572693460277, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004367949094972179, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06793537711675923, 0.07040600833438548, 0.048498040014583244, 0.05082106251015572, 0.08378081422756967, 0.06826166790171662, 0.06772797646160567, 0.061149776358875196, 0.05358864077840575, 0.025954094890855206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05756552085910627, 9.999999999998899e-05, 0.06499078891112164, 0.08819988009996682, 0.06881838469407975, 0.07552526406400573, 0.08996600000688482, 0.045332922872770576, 0.08994340097439568, 0.07582230287730818, 0.06283802406862538, 0.43581482693456297, 0.42876670445749243, 0.4028463194284121, 0.4574024703984433, 0.3760453341272769, 0.4362714941102861, 0.4099512091427665, 0.40541068599449204, 0.350865189851702, 0.08432328557151048, 0.08179999326234833, 0.08028789260060099, 0.10610345668167354, 0.10675647114097342, 0.09346170347357352, 0.10008754632880812, 0.10299230217343125, 0.07303022516255919, 0.17166692718079335, 0.1365722743745249, 0.149583809754819, 0.15535717849706687, 0.15063135681978967, 0.1464189432264198, 0.14070958996855898, 0.16693090850440218, 0.12621588476949364, 0.25051968133650604, 0.2506632116042322, 0.25343025347238124, 0.25926770035785707, 0.3132835618684541, 0.31093546923462434, 0.3107620782965964, 0.3063642074157161, 0.34372464823629145, 0.15591318463201365, 0.1685720905329794, 0.2072996350199885, 0.18120103518538266, 0.16859483789254337, 0.19571227555430792, 0.2254572122973011, 0.22970390078222758, 0.21351156309356367, 0.1952348112595721, 0.17863525123217283, 0.17734955252365947, 0.18249344105227205, 0.20313007276680406, 0.1772185844919546, 0.1714200288881964, 0.1805341235347716, 0.18450003725100173, 0.17799300530448348, 0.1734012380595088, 0.16877134396106908, 0.18947605500568976, 0.1732305865660777, 0.20074647521754263, 0.17170675090894016, 0.17225348862754164, 0.16948715129510294, 0.16067247396729434, 0.1664079103166629, 0.30357169084820024, 0.40530317168598007, 0.5879379814078936, 0.19777241343980034, 0.27844494614446946, 0.27270935306219635, 0.16632415530057876, 0.22810679625564567, 0.19847654453641084, 0.18520252188937159, 0.2401962666840194, 0.2899810255928973, 0.13911540449793425, 0.111861321854135, 0.24184309914242752, 0.2065174555200151, 0.1673994779231469, 0.1899237038675594, 0.17216688118650125, 0.17500952591797636, 0.2010274878255769, 0.19373891927941955, 0.17326556855973285, 0.1852339996172111, 0.2113087531270037, 0.08268840428094903, 0.0710211265562326, 0.06927241207507195, 0.08122117284751385, 0.0762792188617557, 0.07279041321286861, 0.07673734392762, 0.0801654378972253, 0.0840041211126491]}, "mutation_prompt": null}
