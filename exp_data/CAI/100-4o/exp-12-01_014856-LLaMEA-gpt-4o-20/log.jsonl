{"id": "b2b18a7e-471a-4fe4-88a1-306f4bb98b51", "solution": "import numpy as np\n\nclass NovelOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(np.sqrt(self.budget))  # Adaptive population size\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current candidate\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal and global bests\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best[i] = self.population[i].copy()\n\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best = self.population[i].copy()\n\n            # Adaptive randomness control (influence of differential evolution)\n            F = np.random.uniform(0.5, 1.0)\n            CR = np.random.uniform(0.1, 0.3)\n\n            # Update particles using DE and PSO concepts\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Differential Evolution\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.population[a] + F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.population[i])\n\n                # Particle Swarm Optimization velocity update\n                inertia = 0.5\n                cognitive = 2.0 * np.random.rand(self.dim) * (self.personal_best[i] - self.population[i])\n                social = 2.0 * np.random.rand(self.dim) * (self.global_best - self.population[i])\n                self.velocities[i] = inertia * self.velocities[i] + cognitive + social\n\n                # Position update\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate new candidate\n                fitness = func(trial)\n                self.evaluations += 1\n\n                # Selection\n                if fitness < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best[i] = trial.copy()\n\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best = trial.copy()\n\n        return self.global_best", "name": "NovelOptimizer", "description": "Hybrid adaptive randomness-controlled algorithm combining differential evolution and particle swarm concepts for efficient global optimization.", "configspace": "", "generation": 0, "fitness": 0.20024893457041312, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.4777078235204789, 0.45748896189620336, 0.4275425167547052, 0.4711848330205418, 0.4831560365337956, 0.4887379338535772, 0.4502880715585007, 0.4530790484540991, 0.47660412494539683, 0.12206427851441148, 0.13197109257387274, 0.12300902708934225, 0.11218742387460856, 0.09366092495219636, 0.12027930246211105, 0.12035467284068713, 0.050262165468823006, 0.10808740161265484, 0.10792039864980163, 0.1607664419872713, 0.10780018436288197, 0.09794304557350464, 0.09947752148087019, 0.09724602108762614, 0.10676824463182799, 0.07825099573885075, 0.13195764160447032, 0.08945194915887933, 0.09642044393259819, 0.08450604372058246, 0.11057538762046737, 0.08832279823418487, 0.0923521821094564, 0.09906088489282738, 0.10058941357829188, 0.10637027640683994, 0.9579045125001439, 0.9661927032350336, 0.9512690032947546, 0.9390651333058964, 0.9403364964493273, 0.9413497044868274, 0.9604446999267724, 0.9589507114561041, 0.9587350574379792, 0.22752501686683269, 0.1893463653605012, 0.20646034901448929, 0.18489822124269917, 0.21262493727964238, 0.13728928105304583, 0.1818676667837289, 0.2049960874525869, 0.21680978521282246, 0.2157580563417668, 0.25451513178494556, 0.15907695357735863, 0.38157691811511507, 0.18492117218357162, 0.22819960865916744, 0.17711951506120038, 0.45630840384764293, 0.2274271900611503, 0.138688107438655, 0.1188584864542157, 0.13000029340239294, 0.11378330769824985, 0.14641498795795216, 0.11292617220717327, 0.11640203564402929, 0.09599028138333232, 0.0934037546212223, 0.12400475777398079, 0.10160326932136199, 0.08990840095580732, 0.16341668063890702, 0.10382927066396663, 0.124304955201337, 0.11450988742910939, 0.10200163355648761, 0.09805333099624314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00012109358298151296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005359780459282093, 0.07791567212984041, 0.019705195368007522, 0.06906546365778465, 0.08454583924395842, 0.05965480616637464, 0.05906623264427524, 0.07127853390393679, 0.033347625946416715, 0.03368534383945987, 0.017888405555039344, 0.036025962242895226, 0.01583639683654059, 0.02386408605854795, 0.015474536461769106, 0.030108379076471792, 0.017659634757474674, 0.027445461453515785, 0.02596328023613137, 0.11238655241347262, 0.06801925635413841, 0.07365572930329567, 0.030947895923003843, 0.05151492749249664, 0.09923144238002901, 0.06132865211389493, 0.04013071811335489, 0.06887085657323277, 0.3662373578987802, 0.3702743350298906, 0.37397362397156, 0.3811769525621618, 0.411925339805014, 0.38326412662015263, 0.39251039163749224, 0.3438000286315389, 0.37504831082600754, 0.07873152058522193, 0.08411051960807636, 0.06567716461061923, 0.13604255580152036, 0.08392511017936977, 0.0815611672915646, 0.08287431767786746, 0.078543347177915, 0.07866051236909555, 0.14033543384888414, 0.1542812699888193, 0.17487584503401554, 0.15577848788640802, 0.19078145845086136, 0.1361184662648609, 0.21555654813120495, 0.16678601674654492, 0.2108324364945282, 0.266398688233608, 0.2564984637543659, 0.24697299620938273, 0.27480344739082807, 0.25038885472749584, 0.24892400432021156, 0.282286352070952, 0.3159548183260722, 0.27359160543696415, 0.14791934944033913, 0.17105979633622503, 0.21823496640522766, 0.18683117315439812, 0.19518526417656779, 0.17443175067168726, 0.1978127762392472, 0.22474313516785882, 0.15921324112688073, 0.19592851623167995, 0.19823491529649495, 0.1942552919127133, 0.19598011156872175, 0.18863739436946458, 0.16901822852041348, 0.19915873656690097, 0.2017848117627734, 0.1869552402451976, 0.17388391438937, 0.1809444948746941, 0.19135788788947627, 0.18889784106717233, 0.2208848382470382, 0.20811275049205147, 0.1832299680070706, 0.186020258067629, 0.18583524800361417, 0.1314245710061639, 0.20596411068605525, 0.18136283050575697, 0.15863899373081625, 0.19310152045789541, 0.194565082382391, 0.49749014332931873, 0.16202050530977685, 0.626374017297052, 0.41618946073488716, 0.16734778230626068, 0.3103923313428979, 0.28436096566847313, 0.32949033768513525, 0.16339493311667663, 0.15459409051194195, 0.14241593373516515, 0.2871897253219807, 0.18794584778085233, 0.18771815916513035, 0.18857514129265396, 0.17781285270513014, 0.19572680833550038, 0.17424556231083133, 0.17425040474589082, 0.18784854570051468, 0.1742244671334343, 0.07048861823403152, 0.08945091986565545, 0.07589820136993353, 0.07206710118100579, 0.08239194553478013, 0.0649180756472928, 0.07359509704785994, 0.08430715967514824, 0.06862227820379407]}, "mutation_prompt": null}
{"id": "133b4d99-b723-42d3-b6f6-33991fc66061", "solution": "import numpy as np\n\nclass NovelOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(np.sqrt(self.budget))  # Adaptive population size\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current candidate\n                fitness = func(self.population[i])\n                self.evaluations += 1\n\n                # Update personal and global bests\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best[i] = self.population[i].copy()\n\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best = self.population[i].copy()\n\n            # Adaptive randomness control (influence of differential evolution)\n            F = np.random.uniform(0.5, 1.0)\n            CR = np.random.uniform(0.1, 0.3)\n\n            # Update particles using DE and PSO concepts\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Differential Evolution\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.population[a] + F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, self.population[i])\n\n                # Particle Swarm Optimization velocity update\n                inertia = 0.5\n                cognitive = 2.0 * np.random.rand(self.dim) * (self.personal_best[i] - self.population[i])\n                social = 2.0 * np.random.rand(self.dim) * (self.global_best - self.population[i])\n                self.velocities[i] = inertia * self.velocities[i] + cognitive + social\n\n                # Position update\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate new candidate\n                fitness = func(trial)\n                self.evaluations += 1\n\n                # Selection\n                if fitness < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best[i] = trial.copy()\n\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best = trial.copy()\n\n        return self.global_best", "name": "NovelOptimizer", "description": "Hybrid adaptive randomness-controlled algorithm combining differential evolution and particle swarm concepts for efficient global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b2b18a7e-471a-4fe4-88a1-306f4bb98b51", "metadata": {"aucs": [0.4777078235204789, 0.45748896189620336, 0.4275425167547052, 0.4711848330205418, 0.4831560365337956, 0.4887379338535772, 0.4502880715585007, 0.4530790484540991, 0.47660412494539683, 0.12206427851441148, 0.13197109257387274, 0.12300902708934225, 0.11218742387460856, 0.09366092495219636, 0.12027930246211105, 0.12035467284068713, 0.050262165468823006, 0.10808740161265484, 0.10792039864980163, 0.1607664419872713, 0.10780018436288197, 0.09794304557350464, 0.09947752148087019, 0.09724602108762614, 0.10676824463182799, 0.07825099573885075, 0.13195764160447032, 0.08945194915887933, 0.09642044393259819, 0.08450604372058246, 0.11057538762046737, 0.08832279823418487, 0.0923521821094564, 0.09906088489282738, 0.10058941357829188, 0.10637027640683994, 0.9579045125001439, 0.9661927032350336, 0.9512690032947546, 0.9390651333058964, 0.9403364964493273, 0.9413497044868274, 0.9604446999267724, 0.9589507114561041, 0.9587350574379792, 0.22752501686683269, 0.1893463653605012, 0.20646034901448929, 0.18489822124269917, 0.21262493727964238, 0.13728928105304583, 0.1818676667837289, 0.2049960874525869, 0.21680978521282246, 0.2157580563417668, 0.25451513178494556, 0.15907695357735863, 0.38157691811511507, 0.18492117218357162, 0.22819960865916744, 0.17711951506120038, 0.45630840384764293, 0.2274271900611503, 0.138688107438655, 0.1188584864542157, 0.13000029340239294, 0.11378330769824985, 0.14641498795795216, 0.11292617220717327, 0.11640203564402929, 0.09599028138333232, 0.0934037546212223, 0.12400475777398079, 0.10160326932136199, 0.08990840095580732, 0.16341668063890702, 0.10382927066396663, 0.124304955201337, 0.11450988742910939, 0.10200163355648761, 0.09805333099624314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00012109358298151296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005359780459282093, 0.07791567212984041, 0.019705195368007522, 0.06906546365778465, 0.08454583924395842, 0.05965480616637464, 0.05906623264427524, 0.07127853390393679, 0.033347625946416715, 0.03368534383945987, 0.017888405555039344, 0.036025962242895226, 0.01583639683654059, 0.02386408605854795, 0.015474536461769106, 0.030108379076471792, 0.017659634757474674, 0.027445461453515785, 0.02596328023613137, 0.11238655241347262, 0.06801925635413841, 0.07365572930329567, 0.030947895923003843, 0.05151492749249664, 0.09923144238002901, 0.06132865211389493, 0.04013071811335489, 0.06887085657323277, 0.3662373578987802, 0.3702743350298906, 0.37397362397156, 0.3811769525621618, 0.411925339805014, 0.38326412662015263, 0.39251039163749224, 0.3438000286315389, 0.37504831082600754, 0.07873152058522193, 0.08411051960807636, 0.06567716461061923, 0.13604255580152036, 0.08392511017936977, 0.0815611672915646, 0.08287431767786746, 0.078543347177915, 0.07866051236909555, 0.14033543384888414, 0.1542812699888193, 0.17487584503401554, 0.15577848788640802, 0.19078145845086136, 0.1361184662648609, 0.21555654813120495, 0.16678601674654492, 0.2108324364945282, 0.266398688233608, 0.2564984637543659, 0.24697299620938273, 0.27480344739082807, 0.25038885472749584, 0.24892400432021156, 0.282286352070952, 0.3159548183260722, 0.27359160543696415, 0.14791934944033913, 0.17105979633622503, 0.21823496640522766, 0.18683117315439812, 0.19518526417656779, 0.17443175067168726, 0.1978127762392472, 0.22474313516785882, 0.15921324112688073, 0.19592851623167995, 0.19823491529649495, 0.1942552919127133, 0.19598011156872175, 0.18863739436946458, 0.16901822852041348, 0.19915873656690097, 0.2017848117627734, 0.1869552402451976, 0.17388391438937, 0.1809444948746941, 0.19135788788947627, 0.18889784106717233, 0.2208848382470382, 0.20811275049205147, 0.1832299680070706, 0.186020258067629, 0.18583524800361417, 0.1314245710061639, 0.20596411068605525, 0.18136283050575697, 0.15863899373081625, 0.19310152045789541, 0.194565082382391, 0.49749014332931873, 0.16202050530977685, 0.626374017297052, 0.41618946073488716, 0.16734778230626068, 0.3103923313428979, 0.28436096566847313, 0.32949033768513525, 0.16339493311667663, 0.15459409051194195, 0.14241593373516515, 0.2871897253219807, 0.18794584778085233, 0.18771815916513035, 0.18857514129265396, 0.17781285270513014, 0.19572680833550038, 0.17424556231083133, 0.17425040474589082, 0.18784854570051468, 0.1742244671334343, 0.07048861823403152, 0.08945091986565545, 0.07589820136993353, 0.07206710118100579, 0.08239194553478013, 0.0649180756472928, 0.07359509704785994, 0.08430715967514824, 0.06862227820379407]}, "mutation_prompt": null}
