{"id": "6955e7ff-8c77-47ef-9422-98d5a8c9ee49", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.8\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate fitness\n            for i in range(self.population_size):\n                if self.fitness[i] == np.inf:\n                    self.fitness[i] = func(self.population[i])\n                    self.evaluations += 1\n                    if self.evaluations >= self.budget:\n                        break\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Differential Evolution with Adaptive Gaussian Mutation\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = a + self.scaling_factor * (b - c)\n\n                # Crossover\n                crossover = np.random.rand(self.dim) < self.crossover_rate\n                if not np.any(crossover):\n                    crossover[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover, mutant, self.population[i])\n\n                # Adaptive Gaussian Mutation\n                mutation_strength = np.random.normal(0, 0.1, self.dim) * (self.upper_bound - self.lower_bound)\n                trial = np.clip(trial + mutation_strength, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]", "name": "AdaptiveDE", "description": "This algorithm combines Differential Evolution with Adaptive Gaussian Mutation to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.15390205198192247, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.25940838116339826, 0.25476068560283527, 0.26286397556410246, 0.26614450191749617, 0.2560732958192177, 0.2940931336166147, 0.25683315909125504, 0.24532778463932858, 0.2555779593790274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0702014400563794, 0.07197567417798001, 0.06845038601654341, 0.0624837355862462, 0.07088725186163969, 0.0641436899022021, 0.06547770160004496, 0.07533864962753378, 0.06791740345608199, 0.05967674589463512, 0.06988665352591539, 0.05962901420899436, 0.056981307854336416, 0.05341483169741845, 0.06414390830621564, 0.05414573514487442, 0.05652598983766399, 0.059035360318892005, 0.9465463779791201, 0.9130614870120239, 0.957505461622386, 0.945250826376606, 0.9513613546939519, 0.960315670057063, 0.9436779506134415, 0.9537629486318786, 0.9656845884646265, 0.13099930974816487, 0.1531886341352331, 0.1299382147925633, 0.1236676736012392, 0.1354774112847732, 0.13604765155592868, 0.15309956213178944, 0.1321343968522336, 0.1510161028950352, 0.1807383306668764, 0.1940584247031426, 0.16924344311707773, 0.1837047166696496, 0.17524556806052627, 0.1919787381524204, 0.1834990852407501, 0.1860055027843055, 0.1900741928998163, 0.05491692659409164, 0.06015791854503183, 0.06937017303608173, 0.05336852057358388, 0.0538407256294946, 0.06575754622318108, 0.05358347670800445, 0.06925488498381638, 0.057331049116666866, 0.062177589164383984, 0.06658684248528357, 0.05633831148466384, 0.07647234582388174, 0.06096102107821222, 0.08117869464216343, 0.05406275512426961, 0.05570671077800904, 0.05333180683087957, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058585300609707125, 0.08087715745751756, 0.052506005133134415, 0.06649311309025963, 0.09356235916448519, 0.04826324136601834, 0.059998347895869664, 0.0868886344375418, 0.0642924910135938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023002454231162095, 0.011709457353849984, 0.01884985161481889, 0.021430875929692395, 0.028299829770409235, 0.01698562204050924, 0.04442449834988349, 0.03147775778049544, 0.01962118665237489, 0.26325467776316336, 0.2659564296413379, 0.26833805968459745, 0.2701207075125973, 0.2771139329987725, 0.2949408662343641, 0.2855884700239909, 0.24562314839075117, 0.26465724646940103, 0.07713502647374737, 0.08141750466978215, 0.08796245145692316, 0.08482100862570818, 0.07851288055436945, 0.06254985530989943, 0.06789999900355181, 0.06284873385823708, 0.06740803610799218, 0.11913101876706877, 0.12777848383636248, 0.1392338770174414, 0.1333935919099105, 0.14334379494109017, 0.1486457862522842, 0.15919961634697488, 0.14353168893518375, 0.1322866632694133, 0.19138138236588953, 0.21078024638395865, 0.20674909809652786, 0.19253857231533877, 0.20542942399325304, 0.1961976708157146, 0.21671424199438716, 0.2027448215580694, 0.20777302283717347, 0.1445892738318908, 0.1461473195862667, 0.13989494642708122, 0.13347984848584837, 0.12162838121171826, 0.14145553092540764, 0.15161995551193463, 0.14557314159186863, 0.12997009954226213, 0.1850215249052528, 0.1679684186445738, 0.18059225504700493, 0.17882227514028037, 0.16081693225901794, 0.17490540566227175, 0.17505013935486857, 0.17770543858583665, 0.1727877466740032, 0.1581475862451509, 0.1715010634068096, 0.16342222177646326, 0.1627140489470703, 0.1653788352758938, 0.15175022937359228, 0.16498954225121198, 0.16220968405759373, 0.17213340733322402, 0.17393368260347775, 0.240126268343979, 0.21945323610200385, 0.19779297407398722, 0.20859357473530415, 0.2191068635432688, 0.20506904272546667, 0.1780261467688926, 0.15373078721310196, 0.19569550323094131, 0.19012816746282468, 0.22657198208136864, 0.16965744530060334, 0.24060846377631373, 0.16130304331302037, 0.19622037234232725, 0.19614258347273816, 0.19571751487662692, 0.1716727051548731, 0.1825686825324293, 0.18254256367697985, 0.1892852673418448, 0.2017219655554522, 0.19613905868237336, 0.18286299428224229, 0.19216864314283488, 0.20349980702112558, 0.07170942799091118, 0.07752196900243924, 0.06495699140465827, 0.0772761081620873, 0.07234413181674737, 0.05875737472407838, 0.07187430763266733, 0.0614298815457458, 0.06030894466736758]}, "mutation_prompt": null}
{"id": "cf7d3c11-9ad0-4a16-b712-6b52e3e67121", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.8\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate fitness\n            for i in range(self.population_size):\n                if self.fitness[i] == np.inf:\n                    self.fitness[i] = func(self.population[i])\n                    self.evaluations += 1\n                    if self.evaluations >= self.budget:\n                        break\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Differential Evolution with Adaptive Gaussian Mutation\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = a + self.scaling_factor * (b - c)\n\n                # Crossover\n                crossover = np.random.rand(self.dim) < self.crossover_rate\n                if not np.any(crossover):\n                    crossover[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover, mutant, self.population[i])\n\n                # Adaptive Gaussian Mutation\n                mutation_strength = np.random.normal(0, 0.1, self.dim) * (self.upper_bound - self.lower_bound)\n                trial = np.clip(trial + mutation_strength, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]", "name": "AdaptiveDE", "description": "This algorithm combines Differential Evolution with Adaptive Gaussian Mutation to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6955e7ff-8c77-47ef-9422-98d5a8c9ee49", "metadata": {"aucs": [0.25940838116339826, 0.25476068560283527, 0.26286397556410246, 0.26614450191749617, 0.2560732958192177, 0.2940931336166147, 0.25683315909125504, 0.24532778463932858, 0.2555779593790274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0702014400563794, 0.07197567417798001, 0.06845038601654341, 0.0624837355862462, 0.07088725186163969, 0.0641436899022021, 0.06547770160004496, 0.07533864962753378, 0.06791740345608199, 0.05967674589463512, 0.06988665352591539, 0.05962901420899436, 0.056981307854336416, 0.05341483169741845, 0.06414390830621564, 0.05414573514487442, 0.05652598983766399, 0.059035360318892005, 0.9465463779791201, 0.9130614870120239, 0.957505461622386, 0.945250826376606, 0.9513613546939519, 0.960315670057063, 0.9436779506134415, 0.9537629486318786, 0.9656845884646265, 0.13099930974816487, 0.1531886341352331, 0.1299382147925633, 0.1236676736012392, 0.1354774112847732, 0.13604765155592868, 0.15309956213178944, 0.1321343968522336, 0.1510161028950352, 0.1807383306668764, 0.1940584247031426, 0.16924344311707773, 0.1837047166696496, 0.17524556806052627, 0.1919787381524204, 0.1834990852407501, 0.1860055027843055, 0.1900741928998163, 0.05491692659409164, 0.06015791854503183, 0.06937017303608173, 0.05336852057358388, 0.0538407256294946, 0.06575754622318108, 0.05358347670800445, 0.06925488498381638, 0.057331049116666866, 0.062177589164383984, 0.06658684248528357, 0.05633831148466384, 0.07647234582388174, 0.06096102107821222, 0.08117869464216343, 0.05406275512426961, 0.05570671077800904, 0.05333180683087957, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058585300609707125, 0.08087715745751756, 0.052506005133134415, 0.06649311309025963, 0.09356235916448519, 0.04826324136601834, 0.059998347895869664, 0.0868886344375418, 0.0642924910135938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023002454231162095, 0.011709457353849984, 0.01884985161481889, 0.021430875929692395, 0.028299829770409235, 0.01698562204050924, 0.04442449834988349, 0.03147775778049544, 0.01962118665237489, 0.26325467776316336, 0.2659564296413379, 0.26833805968459745, 0.2701207075125973, 0.2771139329987725, 0.2949408662343641, 0.2855884700239909, 0.24562314839075117, 0.26465724646940103, 0.07713502647374737, 0.08141750466978215, 0.08796245145692316, 0.08482100862570818, 0.07851288055436945, 0.06254985530989943, 0.06789999900355181, 0.06284873385823708, 0.06740803610799218, 0.11913101876706877, 0.12777848383636248, 0.1392338770174414, 0.1333935919099105, 0.14334379494109017, 0.1486457862522842, 0.15919961634697488, 0.14353168893518375, 0.1322866632694133, 0.19138138236588953, 0.21078024638395865, 0.20674909809652786, 0.19253857231533877, 0.20542942399325304, 0.1961976708157146, 0.21671424199438716, 0.2027448215580694, 0.20777302283717347, 0.1445892738318908, 0.1461473195862667, 0.13989494642708122, 0.13347984848584837, 0.12162838121171826, 0.14145553092540764, 0.15161995551193463, 0.14557314159186863, 0.12997009954226213, 0.1850215249052528, 0.1679684186445738, 0.18059225504700493, 0.17882227514028037, 0.16081693225901794, 0.17490540566227175, 0.17505013935486857, 0.17770543858583665, 0.1727877466740032, 0.1581475862451509, 0.1715010634068096, 0.16342222177646326, 0.1627140489470703, 0.1653788352758938, 0.15175022937359228, 0.16498954225121198, 0.16220968405759373, 0.17213340733322402, 0.17393368260347775, 0.240126268343979, 0.21945323610200385, 0.19779297407398722, 0.20859357473530415, 0.2191068635432688, 0.20506904272546667, 0.1780261467688926, 0.15373078721310196, 0.19569550323094131, 0.19012816746282468, 0.22657198208136864, 0.16965744530060334, 0.24060846377631373, 0.16130304331302037, 0.19622037234232725, 0.19614258347273816, 0.19571751487662692, 0.1716727051548731, 0.1825686825324293, 0.18254256367697985, 0.1892852673418448, 0.2017219655554522, 0.19613905868237336, 0.18286299428224229, 0.19216864314283488, 0.20349980702112558, 0.07170942799091118, 0.07752196900243924, 0.06495699140465827, 0.0772761081620873, 0.07234413181674737, 0.05875737472407838, 0.07187430763266733, 0.0614298815457458, 0.06030894466736758]}, "mutation_prompt": null}
