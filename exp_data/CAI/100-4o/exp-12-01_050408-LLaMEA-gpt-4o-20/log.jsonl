{"id": "e3b1e760-ca37-4772-876d-138bb1c0bc7d", "solution": "import numpy as np\n\nclass AdaptiveDiffEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5  # scaling factor\n        self.CR = 0.9  # crossover probability\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                if self.eval_count >= self.budget:\n                    break\n\n                # Mutation and recombination\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, self.population[i])\n\n                # Evaluation\n                trial_fitness = func(trial)\n                self.eval_count += 1\n\n                # Selection\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                elif np.random.rand() < 0.1:  # Random walk exploration with a small probability\n                    self.population[i] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    self.fitness[i] = func(self.population[i])\n                    self.eval_count += 1\n\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]\n\n# Example usage:\n# optimizer = AdaptiveDiffEvolution(budget=1000, dim=10)\n# best_solution = optimizer(some_black_box_function)", "name": "AdaptiveDiffEvolution", "description": "The algorithm combines adaptive differential evolution with random walk exploration to efficiently search the solution space and escape local optima.", "configspace": "", "generation": 0, "fitness": 0.23592101956584347, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.613981067257716, 0.6400357372809644, 0.6563877074353626, 0.5446001185199221, 0.6613633698698396, 0.633440444347894, 0.6564584506751084, 0.6307562948295976, 0.6940043663316458, 0.3192359899398616, 0.2829405325520734, 0.40995393072777575, 0.3614065416240555, 0.33821679812939165, 0.2981503845751601, 0.3982698712737558, 0.38602512772824094, 0.39848660275525616, 0.08708207405969892, 0.11139631773270608, 0.09318119119712087, 0.08450631567889855, 0.09237117732772171, 0.08719167827453989, 0.08583701223049667, 0.07931851127864897, 0.0953853122545637, 0.08637252916384586, 0.08016926443951922, 0.07569040504918467, 0.08500903990354602, 0.09307337242462976, 0.0772246519053067, 0.09179890134996316, 0.08447559942584482, 0.07677936828074439, 0.9439745173333483, 0.9431952181092776, 0.9523560262902914, 0.9416792426326085, 0.9435592510863066, 0.9415389677686102, 0.9363292216790049, 0.9434448568910461, 0.9312757242208991, 0.24040694251871442, 0.20156413055786004, 0.19128599808850244, 0.19771297890848138, 0.23420210673258612, 0.2181453498528938, 0.30570803351592424, 0.18373619741296143, 0.2292414524294647, 0.4691713091908737, 0.2469828903728013, 0.48451436659240965, 0.4934216954241527, 0.4587128315780693, 0.5345971993893246, 0.5031436519231125, 0.5449594091322643, 0.49271995890954134, 0.17404587269234162, 0.14747661376995458, 0.14620881018102883, 0.1489976865739121, 0.155422676106176, 0.17649347328381337, 0.1797723091217398, 0.15070811300071707, 0.17250150241814044, 0.1503845754834069, 0.15576437759104556, 0.10353924507401002, 0.13136046284551972, 0.16562753927088159, 0.15081708948800787, 0.17728744264141494, 0.17896565866644154, 0.15675933444840962, 0.026333625235664515, 0.0023029357674467787, 0.03226986047578195, 0.004370794102522835, 0.002818346899920665, 0.022264739246436127, 0.04726128173533506, 0.003287394225642837, 0.06783929103314545, 0.10728638895687548, 0.10682983165405002, 0.16899621192323977, 0.1458772224188558, 0.1287203417229097, 0.10440646526298902, 0.16787566732220005, 0.1139418026145741, 0.15946342849489048, 0.01613878471914032, 0.016050467978148686, 9.999999999998899e-05, 0.012317316414825252, 0.009457225409408743, 0.010315032125410628, 0.011339870848119382, 0.00013960799205992025, 0.007606374801638394, 0.14864191955396489, 0.10332746562893591, 0.13207983173938065, 0.13981302446782506, 0.10625126370962135, 0.17209908471384783, 0.1484277593900175, 0.12348573163278631, 0.15879867438680817, 0.512954243243306, 0.43735872446831003, 0.47776956424160166, 0.48946587387989016, 0.472587663499036, 0.4530615890868622, 0.5078258112778367, 0.46909523224757843, 0.4584030039285546, 0.0855436093467401, 0.07796087897997828, 0.09389690873349044, 0.08170137761913743, 0.08267573132410089, 0.09436024810282073, 0.08757540412902887, 0.09958670870644071, 0.07639873730880353, 0.1336038381366208, 0.13937485410975148, 0.13757735169270613, 0.15257996074729485, 0.1304380790316183, 0.19032263381005998, 0.14389234260331885, 0.14202919383447066, 0.1452117800783539, 0.27948969699486614, 0.24557013727932886, 0.2726609100841286, 0.2633240417167255, 0.2706853899910536, 0.2661070722248554, 0.2832087825148307, 0.2935118476075733, 0.29881721180719656, 0.17792358802885466, 0.19222607772369416, 0.22907419638856985, 0.1906133773287807, 0.1844995038727465, 0.21208601415961903, 0.19420825280877252, 0.19277781435708674, 0.20864922978425282, 0.18699175776862687, 0.18757168454594664, 0.17553376557452305, 0.1809574843647591, 0.17571087041292632, 0.18200179101920355, 0.20538540143837303, 0.18164713468745342, 0.193151959280481, 0.18529860689775812, 0.17872821454880738, 0.17770931594310113, 0.17295086530353676, 0.17056031594437704, 0.18485253159534154, 0.16880316826841213, 0.18724347042613276, 0.1870718828371012, 0.14511341363232788, 0.22921558045698553, 0.20951212136181074, 0.20921234974086944, 0.18174206510614344, 0.27735030960220886, 0.30351390903452313, 0.18072116789153736, 0.20430421263086374, 0.23417401588446807, 0.1707972065573976, 0.19958267432991228, 0.2023842077310647, 0.18501231503852955, 0.2080146637790724, 0.2081118354429181, 0.3246730762792428, 0.20204195565196115, 0.18640345732786778, 0.2107029306624384, 0.19722927205046503, 0.2113246862496284, 0.18957528902948484, 0.20979158373827123, 0.18270702295385854, 0.18090255942402111, 0.19207438162661472, 0.06973629796885106, 0.07503231386969078, 0.06976010025069079, 0.0677990579361607, 0.08436808355472636, 0.0816505927169936, 0.07234057544260253, 0.07594537200453755, 0.06644142593262459]}, "mutation_prompt": null}
{"id": "7183151d-7e9e-4f05-9bdc-73df763ea43e", "solution": "import numpy as np\n\nclass AdaptiveDiffEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5  # initial scaling factor\n        self.CR = 0.9  # initial crossover probability\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                if self.eval_count >= self.budget:\n                    break\n\n                # Adaptive Mutation and recombination\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                F_adaptive = np.random.uniform(0.4, 0.9)  # Adaptive scaling\n                mutant = self.population[a] + F_adaptive * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                CR_adaptive = np.random.uniform(0.8, 1.0)  # Adaptive crossover probability\n                crossover = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(crossover, mutant, self.population[i])\n\n                # Evaluation\n                trial_fitness = func(trial)\n                self.eval_count += 1\n\n                # Selection\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                elif np.random.rand() < 0.1:  # Random walk exploration with a small probability\n                    self.population[i] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    self.fitness[i] = func(self.population[i])\n                    self.eval_count += 1\n\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]", "name": "AdaptiveDiffEvolution", "description": "Introduce adaptive mutation scaling and adaptive crossover probability to enhance exploration and convergence rates.", "configspace": "", "generation": 1, "fitness": 0.19072814214767675, "feedback": "", "error": "", "parent_id": "e3b1e760-ca37-4772-876d-138bb1c0bc7d", "metadata": {"aucs": [0.38865139660204406, 0.4311668567510598, 0.39870916468060724, 0.4462393483572047, 0.47305673522740055, 0.5346032398417011, 0.43136401017604764, 0.4899442789263626, 0.5209314587831368, 0.19467370546243568, 0.21199384125613918, 0.21606855115319346, 0.15959139042933224, 0.18490277766142804, 0.17266088484471986, 0.1456288162242363, 0.254489834114792, 0.22002747268757405, 0.07115442901827695, 0.0851540437822147, 0.0867557188398097, 0.09777041568452438, 0.0814787772664155, 0.07684626998900856, 0.07996033235438971, 0.07604482358477926, 0.07847761524753571, 0.06738132774925198, 0.07692453604844307, 0.07522028863684882, 0.06394948663443578, 0.07304148059211568, 0.07348949768151447, 0.07438123939249686, 0.07058907523424585, 0.0783414748449619, 0.9518320367041354, 0.9545665411191507, 0.9601376927058478, 0.9577375500170133, 0.9822037161066053, 0.9344466483557471, 0.9690947788934229, 0.9775560731686872, 0.9149117414143495, 0.17789704559366604, 0.16110791266745095, 0.15153681905292526, 0.1491544951505842, 0.1590556769427962, 0.16941398864757307, 0.17597440902286487, 0.17125437212273698, 0.17983332961323395, 0.2306019614860475, 0.22735601592157495, 0.25788187338346513, 0.23154433257741935, 0.2724346945053838, 0.23750824136830628, 0.2893587363140365, 0.2803072663930175, 0.2807647062248735, 0.08823982566821575, 0.09304440447762208, 0.1332482275790109, 0.11021716022997186, 0.12192515249758051, 0.09890951517280677, 0.09268531906082444, 0.12140407625921468, 0.08906047307966436, 0.08864096901826246, 0.12916806816617066, 0.08266678275188188, 0.1297018735190424, 0.09714233484393009, 0.10995513136252721, 0.08573039843284458, 0.11227951511793921, 0.07863239549348522, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0028706924682512236, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09061163831779906, 0.07510471249955131, 0.14374655374332612, 0.044966071713354316, 0.08563517312288405, 0.10747014223493656, 0.09043251277908693, 0.10790013378672869, 0.10962807160992238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05983778430813269, 0.0880518863253017, 0.09191967644398247, 0.10320381175737658, 0.09675834614627732, 0.09523273072290817, 0.07031400259180431, 0.0766707597288101, 0.07911898170021647, 0.36828571164021573, 0.3512663507898671, 0.36856376795769996, 0.3631332197332232, 0.4051910502546524, 0.3659072725911914, 0.3325123805926782, 0.390547246751594, 0.3728103634070906, 0.09597118171970231, 0.08073231208743525, 0.09730996158836136, 0.08405838105150065, 0.09701745668795847, 0.0678575132165179, 0.07727053649083337, 0.09540839229711018, 0.06341378557134214, 0.124572254493026, 0.1348899912810232, 0.14016449165669842, 0.1300607233136729, 0.1418159316834694, 0.18634998483366516, 0.13619679976514887, 0.1446232119175913, 0.142626852065861, 0.22322844741579217, 0.22493316126423202, 0.21507721871064733, 0.22138986674139183, 0.2433658496087534, 0.23873028534572216, 0.23222072829635787, 0.2488789121665098, 0.24582150665352343, 0.17194513430323055, 0.16523461100143777, 0.147448200955693, 0.14910650998600083, 0.15613670757606635, 0.1452936601289948, 0.17014291475085952, 0.16570191569839277, 0.1640584722267373, 0.18217505293813396, 0.18384170979562742, 0.20610025351188188, 0.17096429345741804, 0.17905526307988506, 0.1952087254726882, 0.19834999030164013, 0.1868501906158222, 0.1817200469222897, 0.17187313642948387, 0.16758886389761596, 0.1754998554021866, 0.17552291318399216, 0.1809199337085673, 0.1777553992448273, 0.17778269213193543, 0.17436862616926008, 0.16710740689876835, 0.1570456060433194, 0.17011019939693328, 0.4066232351358322, 0.1732427965497636, 0.2534687760877917, 0.16737773730783378, 0.1566954539121047, 0.15773561106468237, 0.15751337976836333, 0.18539179393373928, 0.22185715870970557, 0.19063730870583429, 0.1663215126413632, 0.22407697968269313, 0.1730729374581058, 0.20195912791682524, 0.2034613233749798, 0.2765943431635416, 0.180733179182194, 0.19510100229012417, 0.17480265131100337, 0.19455636061196369, 0.17270022002369312, 0.18549684416863843, 0.18427082901889824, 0.1856753754464595, 0.17943839542181728, 0.08185256150064413, 0.06561472377111599, 0.06330879573686865, 0.06698699451142676, 0.06259849597171285, 0.0643596842105002, 0.07169190024375915, 0.06552839997155568, 0.06845887225565017]}, "mutation_prompt": null}
