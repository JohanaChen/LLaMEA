{"id": "b50cfbde-c35e-4ae9-9a14-5e9e758b9e7e", "solution": "import numpy as np\n\nclass HybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def evolve_population(self, func):\n        F = 0.8  # Differential evolution step size\n        CR = 0.9  # Crossover rate\n        new_population = np.empty_like(self.population)\n\n        for i in range(self.population_size):\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            x1, x2, x3 = self.population[indices]\n            mutant_vector = np.clip(x1 + F * (x2 - x3), self.lower_bound, self.upper_bound)\n            crossover_mask = np.random.rand(self.dim) < CR\n            trial_vector = np.where(crossover_mask, mutant_vector, self.population[i])\n            new_population[i] = trial_vector\n\n            if self.used_budget < self.budget:\n                trial_fitness = func(trial_vector)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial_vector\n\n        return new_population\n\n    def local_search(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            current_solution = self.population[i]\n            perturbation = np.random.uniform(-0.1, 0.1, self.dim)\n            new_solution = np.clip(current_solution + perturbation, self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n            self.used_budget += 1\n            if new_fitness < self.fitness[i]:\n                self.fitness[i] = new_fitness\n                self.population[i] = new_solution\n\n    def __call__(self, func):\n        for _ in range(self.budget // self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.population = self.evolve_population(func)\n            self.local_search(func)\n\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index], self.fitness[best_index]", "name": "HybridOptimizer", "description": "A hybrid metaheuristic combining differential evolution with adaptive local search to efficiently explore and exploit the search space within a limited budget.", "configspace": "", "generation": 0, "fitness": 0.09906633402166716, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.13159044700852196, 0.1539105100216842, 0.15318649730106737, 0.1387626967913238, 0.13620998017532038, 0.13547280713811072, 0.19373741596081562, 0.13156733536280207, 0.13975904104356562, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019988854919496202, 0.025477195383242, 0.0221762637250964, 0.041268062896452684, 0.027941633641498043, 0.05147623848551286, 0.04631585467308197, 0.02891819290980424, 0.03001365847349169, 0.048195676454102054, 0.0068811690616590315, 0.012274800181467649, 0.031804830603265666, 0.022125068023153616, 0.014670913796946627, 0.013336806946890878, 0.010480773406307375, 0.0044909335149632135, 0.9662362597235357, 0.6338852112421819, 0.229999454586708, 0.8617910119534383, 0.6992179328831127, 0.9436524624626664, 0.8902537601426943, 0.8922583058501503, 0.8360206351091275, 0.042131213422587965, 0.04812462400166728, 0.09353066800732546, 0.05559491710230269, 0.06362853591326512, 0.01623355474400401, 0.0633280576163261, 0.05333156526372751, 0.03626850358636602, 0.11260867242236638, 0.09161046520895832, 0.06445531232117896, 0.0675186702731484, 0.08263395462329148, 0.09452189609880657, 0.11207429637832589, 0.08527276159422759, 0.09503862528401619, 9.999999999998899e-05, 0.004719012143648449, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0040938209341656595, 0.0001527019676829111, 9.999999999998899e-05, 0.0007958937062195748, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032683200883404595, 0.011592014153007035, 0.03672011579978518, 0.009899273037200507, 0.08055304797141893, 0.0076611419774386125, 0.034125885312778714, 0.029979059255639706, 0.026972622619715225, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16013104389388044, 0.14732880549067318, 0.1751930839165301, 0.1643371629440742, 0.15831380489923164, 0.1605008897916561, 0.17208168689028425, 0.1461910057773863, 0.15443556729211083, 0.04439148438644702, 0.028361869462742995, 0.033883096747387764, 0.03245561943009856, 0.028038899054418143, 0.03534997554780095, 0.04042798109211798, 0.03055562232110165, 0.03747704223739745, 0.12420739727674845, 0.14562585346922297, 0.15220343274102943, 0.11562300736580677, 0.13731363580542477, 0.11958051498580535, 0.12842214817679432, 0.1362211147146769, 0.1310955453785445, 0.14784701220615248, 0.14399138348425644, 0.13725539783681184, 0.14676387490376597, 0.13521481819356962, 0.1465906607994515, 0.14379399039122454, 0.13944230868961327, 0.14898866273354672, 0.09724283318425808, 0.0857779961562195, 0.09532310993955195, 0.09775345189096929, 0.07854086212632316, 0.08707386988170307, 0.08932521428741858, 0.10902560351104817, 0.07843830143669017, 0.1186416075477057, 0.1318246832686094, 0.14074359242766565, 0.14117236659617827, 0.1240538695834148, 0.13866526742556162, 0.12516456294923406, 0.12165814284505683, 0.12454050955561757, 0.10093260241242863, 0.06860106320027592, 9.999999999998899e-05, 0.12642637256478007, 0.11675371305495341, 0.12258574580682091, 0.01159528648194208, 9.999999999998899e-05, 9.999999999998899e-05, 0.13955447311774627, 0.1357332616818867, 0.11987072912348484, 0.12375828739204531, 0.12471056483238441, 0.1230270589533935, 0.11976916178087427, 0.1608508277271451, 0.12213527049576878, 0.10849431941348464, 0.09906419647527487, 0.08999714946609605, 0.08630004244502365, 0.10779940406760358, 0.0924898835973077, 0.28374523366290094, 0.12581297844984307, 0.15110958152535747, 0.19535278909277043, 0.17797093570903455, 0.18124998930500458, 0.18642655910223294, 0.18311422322729864, 0.1999579693350545, 0.1997076725829977, 0.18430246992010124, 0.16976146801598846, 0.06384454130620543, 0.042250047035713445, 0.03277064715032629, 0.03556161417130266, 0.03624388138741974, 0.04450999043985593, 0.029779503249539263, 0.036812606242698664, 0.03449001325947376]}, "mutation_prompt": null}
{"id": "25722174-3ae8-4c47-8df8-85a4d566c992", "solution": "import numpy as np\n\nclass HybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def evolve_population(self, func):\n        F = 0.8  # Differential evolution step size\n        CR = 0.9  # Crossover rate\n        new_population = np.empty_like(self.population)\n\n        for i in range(self.population_size):\n            indices = np.random.choice(self.population_size, 3, replace=False)\n            x1, x2, x3 = self.population[indices]\n            mutant_vector = np.clip(x1 + F * (x2 - x3), self.lower_bound, self.upper_bound)\n            crossover_mask = np.random.rand(self.dim) < CR\n            trial_vector = np.where(crossover_mask, mutant_vector, self.population[i])\n            new_population[i] = trial_vector\n\n            if self.used_budget < self.budget:\n                trial_fitness = func(trial_vector)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial_vector\n\n        return new_population\n\n    def local_search(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            current_solution = self.population[i]\n            perturbation = np.random.uniform(-0.1, 0.1, self.dim)\n            new_solution = np.clip(current_solution + perturbation, self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n            self.used_budget += 1\n            if new_fitness < self.fitness[i]:\n                self.fitness[i] = new_fitness\n                self.population[i] = new_solution\n\n    def __call__(self, func):\n        for _ in range(self.budget // self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.population = self.evolve_population(func)\n            self.local_search(func)\n\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index], self.fitness[best_index]", "name": "HybridOptimizer", "description": "A hybrid metaheuristic combining differential evolution with adaptive local search to efficiently explore and exploit the search space within a limited budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b50cfbde-c35e-4ae9-9a14-5e9e758b9e7e", "metadata": {"aucs": [0.13159044700852196, 0.1539105100216842, 0.15318649730106737, 0.1387626967913238, 0.13620998017532038, 0.13547280713811072, 0.19373741596081562, 0.13156733536280207, 0.13975904104356562, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019988854919496202, 0.025477195383242, 0.0221762637250964, 0.041268062896452684, 0.027941633641498043, 0.05147623848551286, 0.04631585467308197, 0.02891819290980424, 0.03001365847349169, 0.048195676454102054, 0.0068811690616590315, 0.012274800181467649, 0.031804830603265666, 0.022125068023153616, 0.014670913796946627, 0.013336806946890878, 0.010480773406307375, 0.0044909335149632135, 0.9662362597235357, 0.6338852112421819, 0.229999454586708, 0.8617910119534383, 0.6992179328831127, 0.9436524624626664, 0.8902537601426943, 0.8922583058501503, 0.8360206351091275, 0.042131213422587965, 0.04812462400166728, 0.09353066800732546, 0.05559491710230269, 0.06362853591326512, 0.01623355474400401, 0.0633280576163261, 0.05333156526372751, 0.03626850358636602, 0.11260867242236638, 0.09161046520895832, 0.06445531232117896, 0.0675186702731484, 0.08263395462329148, 0.09452189609880657, 0.11207429637832589, 0.08527276159422759, 0.09503862528401619, 9.999999999998899e-05, 0.004719012143648449, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0040938209341656595, 0.0001527019676829111, 9.999999999998899e-05, 0.0007958937062195748, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032683200883404595, 0.011592014153007035, 0.03672011579978518, 0.009899273037200507, 0.08055304797141893, 0.0076611419774386125, 0.034125885312778714, 0.029979059255639706, 0.026972622619715225, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16013104389388044, 0.14732880549067318, 0.1751930839165301, 0.1643371629440742, 0.15831380489923164, 0.1605008897916561, 0.17208168689028425, 0.1461910057773863, 0.15443556729211083, 0.04439148438644702, 0.028361869462742995, 0.033883096747387764, 0.03245561943009856, 0.028038899054418143, 0.03534997554780095, 0.04042798109211798, 0.03055562232110165, 0.03747704223739745, 0.12420739727674845, 0.14562585346922297, 0.15220343274102943, 0.11562300736580677, 0.13731363580542477, 0.11958051498580535, 0.12842214817679432, 0.1362211147146769, 0.1310955453785445, 0.14784701220615248, 0.14399138348425644, 0.13725539783681184, 0.14676387490376597, 0.13521481819356962, 0.1465906607994515, 0.14379399039122454, 0.13944230868961327, 0.14898866273354672, 0.09724283318425808, 0.0857779961562195, 0.09532310993955195, 0.09775345189096929, 0.07854086212632316, 0.08707386988170307, 0.08932521428741858, 0.10902560351104817, 0.07843830143669017, 0.1186416075477057, 0.1318246832686094, 0.14074359242766565, 0.14117236659617827, 0.1240538695834148, 0.13866526742556162, 0.12516456294923406, 0.12165814284505683, 0.12454050955561757, 0.10093260241242863, 0.06860106320027592, 9.999999999998899e-05, 0.12642637256478007, 0.11675371305495341, 0.12258574580682091, 0.01159528648194208, 9.999999999998899e-05, 9.999999999998899e-05, 0.13955447311774627, 0.1357332616818867, 0.11987072912348484, 0.12375828739204531, 0.12471056483238441, 0.1230270589533935, 0.11976916178087427, 0.1608508277271451, 0.12213527049576878, 0.10849431941348464, 0.09906419647527487, 0.08999714946609605, 0.08630004244502365, 0.10779940406760358, 0.0924898835973077, 0.28374523366290094, 0.12581297844984307, 0.15110958152535747, 0.19535278909277043, 0.17797093570903455, 0.18124998930500458, 0.18642655910223294, 0.18311422322729864, 0.1999579693350545, 0.1997076725829977, 0.18430246992010124, 0.16976146801598846, 0.06384454130620543, 0.042250047035713445, 0.03277064715032629, 0.03556161417130266, 0.03624388138741974, 0.04450999043985593, 0.029779503249539263, 0.036812606242698664, 0.03449001325947376]}, "mutation_prompt": null}
