{"id": "86174feb-8e54-4316-9b08-cf3a68260b19", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(10 * dim, budget // 2)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE mutation factor\n        self.CR = 0.9  # DE crossover rate\n        self.initial_temp = 1.0\n        self.final_temp = 0.01\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                # DE Mutation and Crossover\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                # Simulated Annealing\n                trial_fitness = func(trial)\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n                \n                temp = self.initial_temp * ((self.final_temp / self.initial_temp) ** (evaluations / self.budget))\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temp):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "HybridDE_SA", "description": "A hybrid metaheuristic combining Differential Evolution and Simulated Annealing to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.2364308362018589, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.3637499230822969, 0.3637499230822969, 0.3637499230822969, 0.37292318413903935, 0.37292318413903935, 0.37292318413903935, 0.3728939868059049, 0.3728939868059049, 0.3728939868059049, 0.2888760958706529, 0.2888760958706529, 0.2888760958706529, 0.2903599026843965, 0.2903599026843965, 0.2903599026843965, 0.28003019457358025, 0.28003019457358025, 0.28003019457358025, 0.10824349146941459, 0.10824349146941459, 0.10824349146941459, 0.08216274656087574, 0.08216274656087574, 0.08216274656087574, 0.1009403978722323, 0.1009403978722323, 0.1009403978722323, 0.07700162637278685, 0.07700162637278685, 0.07700162637278685, 0.0923306024375381, 0.0923306024375381, 0.0923306024375381, 0.08654448758130762, 0.08654448758130762, 0.08654448758130762, 0.9493962712009235, 0.9493962712009235, 0.9493962712009235, 0.9726173702896107, 0.9726173702896107, 0.9726173702896107, 0.9460675867436883, 0.9460675867436883, 0.9460675867436883, 0.2759543844648057, 0.2759543844648057, 0.2759543844648057, 0.2439631057350411, 0.2439631057350411, 0.2439631057350411, 0.2561933669863806, 0.2561933669863806, 0.2561933669863806, 0.3971987507770931, 0.3971987507770931, 0.3971987507770931, 0.3784164158547796, 0.3784164158547796, 0.3784164158547796, 0.480321035327111, 0.480321035327111, 0.480321035327111, 0.18823531163749807, 0.18823531163749807, 0.18823531163749807, 0.19534628750786132, 0.19534628750786132, 0.19534628750786132, 0.1941892257782134, 0.1941892257782134, 0.1941892257782134, 0.25159388369018254, 0.25159388369018254, 0.25159388369018254, 0.19543299487366672, 0.19543299487366672, 0.19543299487366672, 0.18562003746871703, 0.18562003746871703, 0.18562003746871703, 0.13599247660950076, 0.13599247660950076, 0.13599247660950076, 0.13654895914506937, 0.13654895914506937, 0.13654895914506937, 0.14609666403783517, 0.14609666403783517, 0.14609666403783517, 0.21961132987929566, 0.21961132987929566, 0.21961132987929566, 0.23237239756967676, 0.23237239756967676, 0.23237239756967676, 0.26232478240120327, 0.26232478240120327, 0.26232478240120327, 0.029489417290453512, 0.029489417290453512, 0.029489417290453512, 0.03001051829809598, 0.03001051829809598, 0.03001051829809598, 0.03882477090142422, 0.03882477090142422, 0.03882477090142422, 0.15678086156423998, 0.15678086156423998, 0.15678086156423998, 0.17560167109994473, 0.17560167109994473, 0.17560167109994473, 0.14773052608684412, 0.14773052608684412, 0.14773052608684412, 0.3484986757335937, 0.3484986757335937, 0.3484986757335937, 0.3641471029858513, 0.3641471029858513, 0.3641471029858513, 0.35900816260526824, 0.35900816260526824, 0.35900816260526824, 0.08427521435170493, 0.08427521435170493, 0.08427521435170493, 0.0956283662337788, 0.0956283662337788, 0.0956283662337788, 0.10463162258143799, 0.10463162258143799, 0.10463162258143799, 0.16013070254918693, 0.16013070254918693, 0.16013070254918693, 0.1412751480443094, 0.1412751480443094, 0.1412751480443094, 0.1434922194832785, 0.1434922194832785, 0.1434922194832785, 0.26719483329417537, 0.26719483329417537, 0.26719483329417537, 0.25869626242046306, 0.25869626242046306, 0.25869626242046306, 0.278697176657989, 0.278697176657989, 0.278697176657989, 0.2095544881689132, 0.2095544881689132, 0.2095544881689132, 0.20784805858657385, 0.20784805858657385, 0.20784805858657385, 0.22647475384578042, 0.22647475384578042, 0.22647475384578042, 0.19643563362212235, 0.19643563362212235, 0.19643563362212235, 0.175402808084834, 0.175402808084834, 0.175402808084834, 0.17319707885268676, 0.17319707885268676, 0.17319707885268676, 0.1822815655253166, 0.1822815655253166, 0.1822815655253166, 0.16344637665391115, 0.16344637665391115, 0.16344637665391115, 0.1739294678522879, 0.1739294678522879, 0.1739294678522879, 0.18875205380628812, 0.18875205380628812, 0.18875205380628812, 0.18073121828916228, 0.18073121828916228, 0.18073121828916228, 0.18218228092426525, 0.18218228092426525, 0.18218228092426525, 0.4584286078596982, 0.4584286078596982, 0.4584286078596982, 0.1911693207328663, 0.1911693207328663, 0.1911693207328663, 0.4102900089678294, 0.4102900089678294, 0.4102900089678294, 0.1756798452409135, 0.1756798452409135, 0.1756798452409135, 0.17751505402972412, 0.17751505402972412, 0.17751505402972412, 0.19806572156576552, 0.19806572156576552, 0.19806572156576552, 0.06825771469879982, 0.06825771469879982, 0.06825771469879982, 0.06631020479141447, 0.06631020479141447, 0.06631020479141447, 0.07340541482446683, 0.07340541482446683, 0.07340541482446683]}, "mutation_prompt": null}
{"id": "15ef46a3-38fd-4440-a819-83c6ddd6999e", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(10 * dim, budget // 2)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # DE mutation factor\n        self.CR = 0.9  # DE crossover rate\n        self.initial_temp = 1.0\n        self.final_temp = 0.01\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                # DE Mutation and Crossover\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                # Simulated Annealing\n                trial_fitness = func(trial)\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n                \n                temp = self.initial_temp * ((self.final_temp / self.initial_temp) ** (evaluations / self.budget))\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temp):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "HybridDE_SA", "description": "A hybrid metaheuristic combining Differential Evolution and Simulated Annealing to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86174feb-8e54-4316-9b08-cf3a68260b19", "metadata": {"aucs": [0.3637499230822969, 0.3637499230822969, 0.3637499230822969, 0.37292318413903935, 0.37292318413903935, 0.37292318413903935, 0.3728939868059049, 0.3728939868059049, 0.3728939868059049, 0.2888760958706529, 0.2888760958706529, 0.2888760958706529, 0.2903599026843965, 0.2903599026843965, 0.2903599026843965, 0.28003019457358025, 0.28003019457358025, 0.28003019457358025, 0.10824349146941459, 0.10824349146941459, 0.10824349146941459, 0.08216274656087574, 0.08216274656087574, 0.08216274656087574, 0.1009403978722323, 0.1009403978722323, 0.1009403978722323, 0.07700162637278685, 0.07700162637278685, 0.07700162637278685, 0.0923306024375381, 0.0923306024375381, 0.0923306024375381, 0.08654448758130762, 0.08654448758130762, 0.08654448758130762, 0.9493962712009235, 0.9493962712009235, 0.9493962712009235, 0.9726173702896107, 0.9726173702896107, 0.9726173702896107, 0.9460675867436883, 0.9460675867436883, 0.9460675867436883, 0.2759543844648057, 0.2759543844648057, 0.2759543844648057, 0.2439631057350411, 0.2439631057350411, 0.2439631057350411, 0.2561933669863806, 0.2561933669863806, 0.2561933669863806, 0.3971987507770931, 0.3971987507770931, 0.3971987507770931, 0.3784164158547796, 0.3784164158547796, 0.3784164158547796, 0.480321035327111, 0.480321035327111, 0.480321035327111, 0.18823531163749807, 0.18823531163749807, 0.18823531163749807, 0.19534628750786132, 0.19534628750786132, 0.19534628750786132, 0.1941892257782134, 0.1941892257782134, 0.1941892257782134, 0.25159388369018254, 0.25159388369018254, 0.25159388369018254, 0.19543299487366672, 0.19543299487366672, 0.19543299487366672, 0.18562003746871703, 0.18562003746871703, 0.18562003746871703, 0.13599247660950076, 0.13599247660950076, 0.13599247660950076, 0.13654895914506937, 0.13654895914506937, 0.13654895914506937, 0.14609666403783517, 0.14609666403783517, 0.14609666403783517, 0.21961132987929566, 0.21961132987929566, 0.21961132987929566, 0.23237239756967676, 0.23237239756967676, 0.23237239756967676, 0.26232478240120327, 0.26232478240120327, 0.26232478240120327, 0.029489417290453512, 0.029489417290453512, 0.029489417290453512, 0.03001051829809598, 0.03001051829809598, 0.03001051829809598, 0.03882477090142422, 0.03882477090142422, 0.03882477090142422, 0.15678086156423998, 0.15678086156423998, 0.15678086156423998, 0.17560167109994473, 0.17560167109994473, 0.17560167109994473, 0.14773052608684412, 0.14773052608684412, 0.14773052608684412, 0.3484986757335937, 0.3484986757335937, 0.3484986757335937, 0.3641471029858513, 0.3641471029858513, 0.3641471029858513, 0.35900816260526824, 0.35900816260526824, 0.35900816260526824, 0.08427521435170493, 0.08427521435170493, 0.08427521435170493, 0.0956283662337788, 0.0956283662337788, 0.0956283662337788, 0.10463162258143799, 0.10463162258143799, 0.10463162258143799, 0.16013070254918693, 0.16013070254918693, 0.16013070254918693, 0.1412751480443094, 0.1412751480443094, 0.1412751480443094, 0.1434922194832785, 0.1434922194832785, 0.1434922194832785, 0.26719483329417537, 0.26719483329417537, 0.26719483329417537, 0.25869626242046306, 0.25869626242046306, 0.25869626242046306, 0.278697176657989, 0.278697176657989, 0.278697176657989, 0.2095544881689132, 0.2095544881689132, 0.2095544881689132, 0.20784805858657385, 0.20784805858657385, 0.20784805858657385, 0.22647475384578042, 0.22647475384578042, 0.22647475384578042, 0.19643563362212235, 0.19643563362212235, 0.19643563362212235, 0.175402808084834, 0.175402808084834, 0.175402808084834, 0.17319707885268676, 0.17319707885268676, 0.17319707885268676, 0.1822815655253166, 0.1822815655253166, 0.1822815655253166, 0.16344637665391115, 0.16344637665391115, 0.16344637665391115, 0.1739294678522879, 0.1739294678522879, 0.1739294678522879, 0.18875205380628812, 0.18875205380628812, 0.18875205380628812, 0.18073121828916228, 0.18073121828916228, 0.18073121828916228, 0.18218228092426525, 0.18218228092426525, 0.18218228092426525, 0.4584286078596982, 0.4584286078596982, 0.4584286078596982, 0.1911693207328663, 0.1911693207328663, 0.1911693207328663, 0.4102900089678294, 0.4102900089678294, 0.4102900089678294, 0.1756798452409135, 0.1756798452409135, 0.1756798452409135, 0.17751505402972412, 0.17751505402972412, 0.17751505402972412, 0.19806572156576552, 0.19806572156576552, 0.19806572156576552, 0.06825771469879982, 0.06825771469879982, 0.06825771469879982, 0.06631020479141447, 0.06631020479141447, 0.06631020479141447, 0.07340541482446683, 0.07340541482446683, 0.07340541482446683]}, "mutation_prompt": null}
