{"id": "731754b9-5768-48b4-ba01-8179dc19078a", "solution": "import numpy as np\n\nclass HDEALS:\n    def __init__(self, budget, dim, pop_size=20, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        \n    def __call__(self, func):\n        func_evals = 0\n        \n        # Evaluate initial population\n        fitness = np.array([func(ind) for ind in self.population])\n        func_evals += self.pop_size\n        \n        while func_evals < self.budget:\n            new_population = np.copy(self.population)\n            \n            for i in range(self.pop_size):\n                # Mutation\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                \n                # Crossover\n                crossover = np.random.rand(self.dim) < self.CR\n                if not np.any(crossover):\n                    crossover[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover, mutant, self.population[i])\n                \n                # Selection\n                trial_fitness = func(trial)\n                func_evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    new_population[i] = trial\n                    fitness[i] = trial_fitness\n            \n            self.population = new_population\n            \n            # Adaptive Local Search\n            if func_evals < self.budget:\n                best_idx = np.argmin(fitness)\n                local_search_solution = self.local_search(self.population[best_idx], func)\n                local_search_fitness = func(local_search_solution)\n                func_evals += 1\n                \n                if local_search_fitness < fitness[best_idx]:\n                    self.population[best_idx] = local_search_solution\n                    fitness[best_idx] = local_search_fitness\n            \n            # Update best solution\n            current_best_idx = np.argmin(fitness)\n            if fitness[current_best_idx] < self.best_fitness:\n                self.best_fitness = fitness[current_best_idx]\n                self.best_solution = self.population[current_best_idx]\n                \n        return self.best_solution\n    \n    def local_search(self, solution, func):\n        step_size = (self.ub - self.lb) * 0.05\n        for _ in range(10):  # Local search iterations\n            neighbor = solution + np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(neighbor, self.lb, self.ub)\n            if func(neighbor) < func(solution):\n                solution = neighbor\n        return solution", "name": "HDEALS", "description": "Hybrid Differential Evolution with Adaptive Local Search (HDEALS) that combines differential evolution for global exploration and adaptive local search for fine-tuning.", "configspace": "", "generation": 0, "fitness": 0.31378492651899664, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6956458013626103, 0.6864611840502853, 0.6812865272236681, 0.7268899396335955, 0.6795350048694293, 0.7115362066392086, 0.7016111128993187, 0.6967466259227035, 0.6758460288839371, 0.4287613038570188, 0.37773491414059224, 0.44911033152955715, 0.4376755597761226, 0.4421691681171641, 0.4587120022745126, 0.46933746077983485, 0.4905257008046384, 0.42141396749546456, 0.13791599155447842, 0.10294622485587057, 0.11115277916752098, 0.10335411659614291, 0.10223239205849555, 0.1089591273058037, 0.10708893101444228, 0.09896940619857197, 0.11323493864783829, 0.09255647849038484, 0.07509061129533656, 0.09852269348500764, 0.10392063901166693, 0.1006964395116855, 0.1105950056214231, 0.1219116210338711, 0.09628234014019521, 0.10382037622684581, 0.9703698134481367, 0.927811046823168, 0.9651828744721099, 0.945576956736781, 0.9482262528758613, 0.9614155936532808, 0.9549924174522022, 0.9594959015800386, 0.9480379070553007, 0.35079945388863076, 0.335051707736269, 0.391029946721832, 0.33384022047737094, 0.36984903225707844, 0.36534582178968045, 0.3394512921226214, 0.40418722800854034, 0.3582219129593426, 0.608951515957141, 0.6069939475319404, 0.5059378524369758, 0.6059890273112398, 0.6961884686375159, 0.6460091776637997, 0.6137109489494657, 0.6644608488995052, 0.6075795604929398, 0.2092131729814256, 0.3226217559004423, 0.21681992289468888, 0.22204969684889397, 0.2644367933272511, 0.29234325948435824, 0.3218217813912313, 0.256509723802697, 0.26380743162970866, 0.305271984756028, 0.1876963914435824, 0.12340285539877283, 0.26124393203518403, 0.22907026719620394, 0.2608093943901486, 0.2475283353351332, 0.23456157295749624, 0.24990840786113055, 0.19466659775482853, 0.25236750745908687, 0.19179971771403093, 0.19332990603174027, 0.1999121771643283, 0.20405742567047336, 0.1816062350487494, 0.2264321358854572, 0.21106478380597749, 0.3846612952622699, 0.35421819920832254, 0.35036468527800035, 0.33974884080313095, 0.31778338835925346, 0.3076021497693088, 0.41137600950190656, 0.36768134000249253, 0.3185849475253233, 0.08973982511867784, 0.0643193317875248, 0.07227402201935385, 0.11058272405957892, 0.1143930297621586, 0.0661916615040824, 0.0909069786684622, 0.11862839536813585, 0.07734190849795197, 0.19224757349458588, 0.19820691625795228, 0.19028004575709156, 0.18733312363998478, 0.2373966921237104, 0.2080502633225244, 0.21482935195759367, 0.19706329081914986, 0.22762907238557828, 0.541959664960672, 0.5854893874659342, 0.5875560173798513, 0.5842763914701234, 0.5405958480934694, 0.555122451505914, 0.59803724211713, 0.5338080902152098, 0.5793641545266326, 0.096077684715557, 0.08126537241650289, 0.0923781727116344, 0.1008402616787375, 0.0954794696036333, 0.09756728914319246, 0.0872395899630537, 0.10567626211482362, 0.08318768280769218, 0.24595528136594746, 0.3255376356975256, 0.21990853386254883, 0.17140077587747582, 0.18884416798305048, 0.18792960016085225, 0.20626185342492587, 0.1468977412208765, 0.29773503683263347, 0.33132754357567795, 0.3029179794516824, 0.28631252142206476, 0.27797840986718025, 0.30231829444099123, 0.27806351768077897, 0.3239325598579402, 0.30676157354253686, 0.3245756383121392, 0.22999355964218815, 0.23737686631106292, 0.21567024002340374, 0.24611235078162075, 0.2347511258666346, 0.23068860665293578, 0.2387828047127245, 0.2538881525268283, 0.23303786073859045, 0.19175833612280413, 0.16955663257409692, 0.19750121314494118, 0.1845619688991713, 0.2057572373918085, 0.1793795291602226, 0.19167883089866744, 0.1857597600768589, 0.1986941743054873, 0.2048316531645039, 0.20166737247302557, 0.19844381509538334, 0.19974346373310514, 0.22013436315578072, 0.1951795829466405, 0.2553263654484669, 0.20151102740167826, 0.17607307983221476, 0.20116201322479432, 0.19319179145019272, 0.7545590123521534, 0.7598393895428692, 0.20037479512140743, 0.18579360160815173, 0.6007715561759325, 0.7101685467509035, 0.1821637278820828, 0.16056627823067215, 0.21185713652139537, 0.70952168356616, 0.21164833555381735, 0.6284502144641579, 0.210472414249397, 0.7032727175551654, 0.12776065382411672, 0.6414212192678381, 0.1835815005319691, 0.18419967209710097, 0.19903459555095038, 0.1826238167865465, 0.17298285160684412, 0.19442583169573724, 0.1706548352952143, 0.19114502567572733, 0.18922593516482633, 0.07643671656085371, 0.06983888766989588, 0.0742533345375419, 0.06898440192554955, 0.07167783059491539, 0.09706736838926122, 0.08075183332870861, 0.11309551122778372, 0.07738551273803274]}, "mutation_prompt": null}
{"id": "bbbdeed3-1d5a-4c02-8ea0-29adf6a0e185", "solution": "import numpy as np\n\nclass HDEALS:\n    def __init__(self, budget, dim, pop_size=20, F=0.8, CR=0.95):  # Increased CR from 0.9 to 0.95\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        \n    def __call__(self, func):\n        func_evals = 0\n        \n        # Evaluate initial population\n        fitness = np.array([func(ind) for ind in self.population])\n        func_evals += self.pop_size\n        \n        while func_evals < self.budget:\n            new_population = np.copy(self.population)\n            \n            for i in range(self.pop_size):\n                # Mutation\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                \n                # Crossover\n                crossover = np.random.rand(self.dim) < self.CR\n                if not np.any(crossover):\n                    crossover[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover, mutant, self.population[i])\n                \n                # Selection\n                trial_fitness = func(trial)\n                func_evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    new_population[i] = trial\n                    fitness[i] = trial_fitness\n            \n            self.population = new_population\n            \n            # Adaptive Local Search\n            if func_evals < self.budget:\n                best_idx = np.argmin(fitness)\n                local_search_solution = self.local_search(self.population[best_idx], func)\n                local_search_fitness = func(local_search_solution)\n                func_evals += 1\n                \n                if local_search_fitness < fitness[best_idx]:\n                    self.population[best_idx] = local_search_solution\n                    fitness[best_idx] = local_search_fitness\n            \n            # Update best solution\n            current_best_idx = np.argmin(fitness)\n            if fitness[current_best_idx] < self.best_fitness:\n                self.best_fitness = fitness[current_best_idx]\n                self.best_solution = self.population[current_best_idx]\n                \n        return self.best_solution\n    \n    def local_search(self, solution, func):\n        step_size = (self.ub - self.lb) * 0.05\n        for _ in range(10):  # Local search iterations\n            neighbor = solution + np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(neighbor, self.lb, self.ub)\n            if func(neighbor) < func(solution):\n                solution = neighbor\n        return solution", "name": "HDEALS", "description": "Hybrid Differential Evolution with Adaptive Local Search (HDEALS) enhanced by increasing the probability of crossover for more diverse exploration.", "configspace": "", "generation": 1, "fitness": 0.33722370646822836, "feedback": "", "error": "", "parent_id": "731754b9-5768-48b4-ba01-8179dc19078a", "metadata": {"aucs": [0.6692675485679571, 0.6809642874247385, 0.6798462309619375, 0.6870048144863894, 0.7164840261546805, 0.7183934237388032, 0.7212758110025881, 0.7002535740486017, 0.6895595159480736, 0.47106316371390444, 0.42895825171441815, 0.467770910330388, 0.37841701823005336, 0.43731237332744366, 0.49389342382309465, 0.3961689259990857, 0.47738594203704454, 0.46566530464460065, 0.09075426923950947, 0.10666172287325093, 0.09944330143917546, 0.12120325375147023, 0.09127240085881672, 0.10722777808306871, 0.10542581486492397, 0.11101840349675163, 0.08617695463721609, 0.10631616028472912, 0.09024182104397382, 0.09745867064831526, 0.12491946785484576, 0.11121559186288754, 0.0938061468411725, 0.07873420561047573, 0.1143455753686401, 0.11054240363157586, 0.9553169270379802, 0.9250514458322182, 0.9634549381331546, 0.960664599567423, 0.9358151233303744, 0.9681643549383349, 0.9684947741874479, 0.9617270213987356, 0.9671969923387916, 0.3737594260240781, 0.35284606137386276, 0.347873443671985, 0.35822288787273626, 0.3394177636822313, 0.38992669478635833, 0.38158024092875, 0.37272725376642857, 0.3640019753092514, 0.5734600367446963, 0.6171574335366328, 0.6602236380477469, 0.6919748893996642, 0.6923855515853521, 0.7748802104570526, 0.6211751091160276, 0.6287146609029592, 0.6578085400102811, 0.26544331961200684, 0.30092815319295585, 0.3743213847799378, 0.27970065313169723, 0.35590107514902636, 0.25034206116551816, 0.3296839771904675, 0.39551524034528285, 0.2685558330886474, 0.3590402721900201, 0.33354882630688876, 0.12361419694428455, 0.2611862879054895, 0.16969813218079777, 0.2708761113681122, 0.3075743129189964, 0.2076955509241175, 0.26567896339247776, 0.3261592540156848, 0.2528720315582377, 0.28280256578564267, 0.30452403229554226, 0.3183311913425092, 0.2948139708405173, 0.3122312767551104, 0.2739690601507926, 0.32241393146136776, 0.4606895047797902, 0.3863274793812711, 0.4240576174119356, 0.4790711229516824, 0.3707401821238525, 0.4445474572946795, 0.44583057980189367, 0.5255922907412517, 0.41116650894726214, 0.09453730147553674, 0.03188640683015087, 0.13802163600794937, 0.14287938996557636, 0.15170213640255292, 0.1225945616470655, 0.10174165596105322, 0.09043558222697334, 0.19509870560616538, 0.2595860941553889, 0.23563004558745193, 0.2451462936470835, 0.24112460491723164, 0.24199356988642007, 0.22439083955141326, 0.2806812069821415, 0.22953450946436216, 0.27349561018842006, 0.6033493601723307, 0.5929398365526015, 0.5905767173247296, 0.6713290790396074, 0.5555686070227788, 0.5897725155119411, 0.6496114740151648, 0.5796043904716892, 0.5926835499234131, 0.10057299790309338, 0.09450926894908185, 0.09734983306623068, 0.08841681849284522, 0.0925339184656705, 0.09071781520431033, 0.09025504113300664, 0.09653230024143356, 0.10288632074310611, 0.23629904444715888, 0.14907503642191333, 0.1404211098207626, 0.3052322203589759, 0.20689603512590427, 0.17103186518912084, 0.2170622967876098, 0.1660433440996789, 0.280737322837614, 0.3327368157647502, 0.34028414918283945, 0.35806158385765485, 0.29965244965833115, 0.3342032972530019, 0.29466131935663364, 0.29119088148382133, 0.31717511446161295, 0.2979935937358351, 0.22257586275354602, 0.2509752944382191, 0.21853404958701994, 0.2682255621700773, 0.28168212135382165, 0.2466438618802823, 0.262382150567429, 0.24035820563516774, 0.21123839362440866, 0.17840578020938447, 0.18387163191586064, 0.197281901820479, 0.19744934551318005, 0.20442132299229365, 0.20151021968209526, 0.19505524489236215, 0.18427086860113573, 0.19651854484763276, 0.17874086877739026, 0.17820216965804214, 0.18263451176444356, 0.19753200887335154, 0.21508202843031732, 0.18223891607818543, 0.21202052038180308, 0.3816669432644847, 0.20258230849455316, 0.7176930037262577, 0.16393871690600914, 0.8770298693378692, 0.17273423888424622, 0.20048535544496437, 0.18499027228892706, 0.7907325302603494, 0.18139512643198719, 0.642914146696242, 0.6420934072643661, 0.21193553057870929, 0.8074849768067657, 0.7323139646519214, 0.6589651092243959, 0.609634260552943, 0.21208875500761237, 0.1277516725083513, 0.6153928761932586, 0.1937626185852077, 0.18266467264086927, 0.18907795457129062, 0.1898755522548642, 0.1740228167410509, 0.18031797071296873, 0.20986357091645258, 0.1901880173671504, 0.18390111429899947, 0.0770931720086181, 0.10160063481204995, 0.07061868560756246, 0.07228101004243204, 0.07503149560130318, 0.09706736838926122, 0.07909708567150942, 0.07588325442033728, 0.07193678499316103]}, "mutation_prompt": null}
