{"id": "3721fba4-e5fa-4b47-859b-c7a57efd9879", "solution": "import numpy as np\n\nclass HPSO_ADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.8   # differential weight\n        self.CR = 0.9  # crossover probability\n        self.position = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.pbest_position = self.position.copy()\n        self.pbest_value = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_value = np.inf\n        self.eval_count = 0\n    \n    def evaluate(self, func, position):\n        if self.eval_count < self.budget:\n            value = func(position)\n            self.eval_count += 1\n            return value\n        else:\n            raise Exception(\"Budget exceeded\")\n        \n    def __call__(self, func):\n        for i in range(self.population_size):\n            fitness = self.evaluate(func, self.position[i])\n            if fitness < self.pbest_value[i]:\n                self.pbest_value[i] = fitness\n                self.pbest_position[i] = self.position[i].copy()\n            if fitness < self.gbest_value:\n                self.gbest_value = fitness\n                self.gbest_position = self.position[i].copy()\n        \n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                # PSO Update\n                r1, r2 = np.random.rand(2)\n                self.velocity[i] = (\n                    self.w * self.velocity[i] +\n                    self.c1 * r1 * (self.pbest_position[i] - self.position[i]) +\n                    self.c2 * r2 * (self.gbest_position - self.position[i])\n                )\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.position[a] + self.F * (self.position[b] - self.position[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # DE Crossover\n                trial = np.copy(self.position[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR:\n                        trial[j] = mutant[j]\n                \n                # Evaluate trial\n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.pbest_value[i]:\n                    self.pbest_value[i] = trial_fitness\n                    self.pbest_position[i] = trial.copy()\n                    \n                # Update global best if improved\n                if trial_fitness < self.gbest_value:\n                    self.gbest_value = trial_fitness\n                    self.gbest_position = trial.copy()\n                    \n        return self.gbest_position, self.gbest_value", "name": "HPSO_ADE", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Evolution (HPSO-ADE) combines PSO's exploration with ADE's exploitation for dynamic optimization.", "configspace": "", "generation": 0, "fitness": 0.2418678170807594, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.46927508174887933, 0.5090224071307583, 0.46977260412327815, 0.502163753423646, 0.5293712570042415, 0.49562615241316366, 0.4889579135945834, 0.503837571452423, 0.49432854218763855, 0.16091836553534233, 0.16689908108111873, 0.16424610743836476, 0.16707790985908977, 0.18376899680409764, 0.1566097822422733, 0.17086438561573503, 0.18570120125245426, 0.17398672044525743, 0.09910698601919321, 0.13539541969711333, 0.10038070248134323, 0.08627894012682102, 0.09921754656863235, 0.10808801636777077, 0.09030557044765519, 0.09517724582186238, 0.14479347363966277, 0.08896686083782224, 0.09965961826886705, 0.08946265924669972, 0.07813766336723293, 0.0970577510943762, 0.08707175349090046, 0.07452302963221336, 0.09131073676320645, 0.07887863063295497, 0.9866976345453734, 0.9821456322177868, 0.9888798775807224, 0.9803519984443143, 0.9925570438173091, 0.9877570291132218, 0.9876820586671144, 0.9888555921236305, 0.9896383908898613, 0.25684042444407884, 0.29737865813425146, 0.26723269439723685, 0.2700229577961146, 0.21115939025221364, 0.2588269714500192, 0.28347107729753984, 0.3255888176187818, 0.2914326230751978, 0.6281687457332966, 0.5104972587131857, 0.5566759250517723, 0.5877692879696573, 0.6269138304701001, 0.4006925617661914, 0.46491712487816106, 0.5071629061139297, 0.4810664967392341, 0.1806215226923532, 0.17202722360001588, 0.20478505459215834, 0.15754553862127285, 0.1598634990189961, 0.15343549481291463, 0.18633306385809723, 0.1814646707069585, 0.2062325374127154, 0.17524633128957356, 0.18574837855080772, 0.15418508182445878, 0.1734565630005016, 0.173133368060437, 0.18211250700869908, 0.16286100075400123, 0.15278184395539174, 0.20541118006555315, 0.049983065982583175, 0.0749130863362254, 0.08586544084361591, 0.010557017594686857, 9.999999999998899e-05, 0.009593902126861065, 0.03752012501854152, 0.05723904186208617, 0.02710414351438417, 0.1381689826479775, 0.033643358806558554, 0.13289853955923991, 0.034810940429382375, 0.05498055865088003, 0.09029542953642578, 0.045511148746008034, 0.14653532457430063, 0.1378781553567815, 0.04322185746588969, 0.0368432074605598, 0.020633082270298697, 0.0235454253371008, 0.020612681892694162, 0.0020297833450140246, 0.04333110270314555, 0.013110478853339047, 0.03531690490278616, 0.1269536668236706, 0.12546083144451625, 0.11560870624873909, 0.14048913139014096, 0.1519052370398165, 0.13800411258976197, 0.14647577401767176, 0.14066213403702565, 0.1256080842820716, 0.42869069969790297, 0.4089298610737093, 0.4309049878401243, 0.4189735136760604, 0.43968267769246916, 0.4191701672836875, 0.4195655520898617, 0.44037520179282397, 0.40541615321430524, 0.09649327819294873, 0.08862448241119214, 0.10097326087375402, 0.099192600557227, 0.09616513331161147, 0.08527417762250333, 0.11129196863972923, 0.0843681502536614, 0.10068345013552948, 0.1709763974168178, 0.14257039253250137, 0.15883228383902548, 0.1327283517244665, 0.14555321877500738, 0.19065615659522972, 0.2090924295712091, 0.16391174064012792, 0.17821478399536095, 0.2835411174352035, 0.28565302457072217, 0.2993312858580046, 0.2808241200818101, 0.292663815307152, 0.27739579855943164, 0.2939796605992163, 0.31546886273678243, 0.3012073075348548, 0.2200857073103053, 0.20295186286356726, 0.21896915311098497, 0.23327599031135393, 0.2183495359140999, 0.21425991997279648, 0.21224852743932754, 0.2655627066489282, 0.23903713258045223, 0.20282764360257766, 0.19925890109130417, 0.18633706010594975, 0.17754475158418337, 0.19367351523966891, 0.18313978575804024, 0.2003340719479716, 0.1919561533531774, 0.22596428604831276, 0.1774849758868806, 0.2079537886887527, 0.19999252238419163, 0.19197383010694802, 0.2296360606502179, 0.1896504728935231, 0.1769292102702713, 0.17940785930644454, 0.17290372663917786, 0.6135350416142799, 0.1507867720450078, 0.15356773715172745, 0.682992147789472, 0.19153326493158984, 0.6265070529113579, 0.1651977688789681, 0.15862101955703967, 0.15956013795877966, 0.5668196557086893, 0.20516931859457743, 0.16612538821901512, 0.1631445491027531, 0.2021034361823707, 0.5610177719168288, 0.20955614258570232, 0.39420664643158065, 0.5579851351352827, 0.18512399485999154, 0.19174088634963404, 0.17982940991005092, 0.17173688894588945, 0.17496084977155457, 0.18444171028254996, 0.18211252652058874, 0.18753594577621402, 0.1784941369540064, 0.08414518136966853, 0.07560962492144097, 0.07955371398017919, 0.09207160598744835, 0.0793410239497312, 0.08762423059774815, 0.07879810655937913, 0.08577906108441224, 0.07575661839443038]}, "mutation_prompt": null}
{"id": "be269fe2-e96b-4dc9-afa8-9c3589f2b9a9", "solution": "import numpy as np\n\nclass Enhanced_HPSO_ADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w_initial = 0.9\n        self.w_final = 0.4\n        self.F = 0.8   # differential weight\n        self.CR = 0.9  # crossover probability\n        self.position = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.pbest_position = self.position.copy()\n        self.pbest_value = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_value = np.inf\n        self.eval_count = 0\n    \n    def evaluate(self, func, position):\n        if self.eval_count < self.budget:\n            value = func(position)\n            self.eval_count += 1\n            return value\n        else:\n            raise Exception(\"Budget exceeded\")\n        \n    def __call__(self, func):\n        for i in range(self.population_size):\n            fitness = self.evaluate(func, self.position[i])\n            if fitness < self.pbest_value[i]:\n                self.pbest_value[i] = fitness\n                self.pbest_position[i] = self.position[i].copy()\n            if fitness < self.gbest_value:\n                self.gbest_value = fitness\n                self.gbest_position = self.position[i].copy()\n        \n        while self.eval_count < self.budget:\n            w = self.w_initial - (self.w_initial - self.w_final) * (self.eval_count / self.budget)\n            for i in range(self.population_size):\n                # PSO Update\n                r1, r2 = np.random.rand(2)\n                self.velocity[i] = (\n                    w * self.velocity[i] +\n                    self.c1 * r1 * (self.pbest_position[i] - self.position[i]) +\n                    self.c2 * r2 * (self.gbest_position - self.position[i])\n                )\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.position[a] + self.F * (self.position[b] - self.position[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # DE Crossover\n                trial = np.copy(self.position[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR:\n                        trial[j] = mutant[j]\n                \n                # Evaluate trial\n                trial_fitness = self.evaluate(func, trial)\n                if trial_fitness < self.pbest_value[i]:\n                    if trial_fitness < self.evaluate(func, self.position[i]):  # selective update\n                        self.pbest_value[i] = trial_fitness\n                        self.pbest_position[i] = trial.copy()\n                    \n                # Update global best if improved\n                if trial_fitness < self.gbest_value:\n                    self.gbest_value = trial_fitness\n                    self.gbest_position = trial.copy()\n                    \n        return self.gbest_position, self.gbest_value", "name": "Enhanced_HPSO_ADE", "description": "Enhanced HPSO-ADE integrates a dynamic inertia weight and a selection mechanism for better balance between exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: Exception('Budget exceeded').", "error": "Exception('Budget exceeded')", "parent_id": "3721fba4-e5fa-4b47-859b-c7a57efd9879", "metadata": {}, "mutation_prompt": null}
