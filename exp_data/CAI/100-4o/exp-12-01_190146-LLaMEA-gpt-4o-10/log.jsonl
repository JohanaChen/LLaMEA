{"id": "857f30bb-a69b-45b6-8772-81099a4043aa", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5  # Cognitive coefficient\n        self.c2 = 1.5  # Social coefficient\n        self.w = 0.5   # Inertia weight\n        self.F = 0.8   # Differential weight\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        # Initialize the population and velocities for PSO\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        \n        # Evaluate initial population\n        fitness = np.apply_along_axis(func, 1, population)\n        budget_used = self.population_size\n        \n        # Initialize personal bests and global best\n        p_best_positions = np.copy(population)\n        p_best_fitness = np.copy(fitness)\n        g_best_position = p_best_positions[np.argmin(p_best_fitness)]\n        g_best_fitness = np.min(p_best_fitness)\n        \n        while budget_used < self.budget:\n            # Update velocities and positions for PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (p_best_positions - population) +\n                          self.c2 * r2 * (g_best_position - population))\n            population = np.clip(population + velocities, self.lower_bound, self.upper_bound)\n\n            # Differential Evolution Mutation and Crossover\n            for i in range(self.population_size):\n                if budget_used >= self.budget:\n                    break\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                candidate = np.where(crossover, mutant, population[i])\n                \n                # Evaluate candidate solution\n                candidate_fitness = func(candidate)\n                budget_used += 1\n\n                # Select the better solution\n                if candidate_fitness < fitness[i]:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < p_best_fitness[i]:\n                        p_best_positions[i] = candidate\n                        p_best_fitness[i] = candidate_fitness\n            \n            # Update global best\n            current_g_best_index = np.argmin(p_best_fitness)\n            if p_best_fitness[current_g_best_index] < g_best_fitness:\n                g_best_position = p_best_positions[current_g_best_index]\n                g_best_fitness = p_best_fitness[current_g_best_index]\n\n        return g_best_position, g_best_fitness", "name": "HybridSwarmOptimizer", "description": "A hybrid swarm-based optimization algorithm combining particle swarm dynamics with differential evolution for enhanced global search.", "configspace": "", "generation": 0, "fitness": 0.30421068857114947, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8296628033648825, 0.8070176664617421, 0.8301124696331388, 0.8305904585204116, 0.8179753383825533, 0.8130281110271682, 0.8324748017021093, 0.8273925469464034, 0.8259787383466178, 0.6523142257004786, 0.6475997660116688, 0.6720462743201951, 0.6432604893841299, 0.6758498551310308, 0.6577019889782206, 0.6623826232039323, 0.631982423861285, 0.636475245895602, 0.1323130633164421, 0.13226254879554522, 0.11068051702097403, 0.11394452839404312, 0.11293752674399116, 0.13811533117653763, 0.15520636273662025, 0.14779316150916288, 0.1534471009348619, 0.10060437558101876, 0.10827684185383024, 0.11229205755162386, 0.11865699098580662, 0.12571143658805306, 0.0982615095046292, 0.13500456052442056, 0.12974075378144556, 0.1281445520575446, 0.9875866695174242, 0.9832096754381473, 0.9898953773571472, 0.980560449572664, 0.981208052912721, 0.9797244324098429, 0.984543644290009, 0.9781166940067827, 0.987630145746943, 0.4926017764131768, 0.5045040448677199, 0.4528248455383892, 0.535060497019094, 0.4706183525887443, 0.5516486807957834, 0.1223088718425317, 0.4924342726008033, 0.506125928523857, 0.8185024849071618, 0.22485351260885877, 0.6808282770662497, 0.21195045498094955, 0.26685086074568476, 0.20802226769498955, 0.6210453617817326, 0.7471610749741217, 0.2229762932470608, 0.22193072068736752, 0.18253088614947133, 0.21113330334689506, 0.1252326002750198, 0.1901071945220747, 0.21227956153957794, 0.20465915099123877, 0.2144947479133703, 0.21893226200979565, 0.20300838014154698, 0.21382677009855144, 0.21617359684298088, 0.20350337927372386, 0.1532371134485342, 0.2179009191234047, 0.2169533761967265, 0.24916879823853078, 0.2231611785077685, 0.0007669838795615336, 0.04812205865482533, 0.014155953076831596, 0.03984008264501826, 9.999999999998899e-05, 0.0006776782976519735, 0.0008383195826346945, 9.999999999998899e-05, 0.04011684882421218, 0.09897189408068863, 0.05048355257877324, 0.0414675037212775, 0.07996194879114826, 0.00974174857418364, 0.05217469559696475, 0.07137545485197339, 0.0805887330134043, 0.07038635039927144, 0.12938597267465157, 0.03286532309897083, 0.03309822540316332, 0.07321889907786605, 0.0721659227530086, 0.07020951146195131, 0.09162530878427355, 0.06734178597897222, 0.08853307708470326, 0.17016809278027778, 0.09626780785114808, 0.0457236535888047, 0.09765326606058278, 0.12982172591779273, 0.1813491062951833, 0.05993715631353602, 0.16341140016159916, 0.13015628006042368, 0.5348553122391748, 0.5125375868322117, 0.5081672004496093, 0.5665375566547166, 0.5610662850244496, 0.5580498207977673, 0.5527932877007682, 0.556936451823163, 0.5573855624468302, 0.12488760403907473, 0.3206156053932866, 0.10502134359019055, 0.11835631864812857, 0.10986959158382192, 0.10510614851504119, 0.12124846701560532, 0.1124018384190778, 0.108535827501124, 0.14570609302911286, 0.3255227445101989, 0.18305707741053756, 0.25325536234978185, 0.1522866815942613, 0.19279019572017164, 0.17376020674766024, 0.13386237711637716, 0.1978465534161955, 0.5132532777671869, 0.4545226642084451, 0.44773633987201655, 0.43926962832410543, 0.45333543920425656, 0.3487859558809989, 0.48903991010521297, 0.42440838774767475, 0.4803360587983124, 0.2514983260315894, 0.29964202607617174, 0.3220997957428894, 0.2352279913071862, 0.20106020767953636, 0.2578517813046467, 0.31820882756946645, 0.40312801368739815, 0.37227316737726357, 0.2007098333902111, 0.20046821545777382, 0.20320440947252671, 0.21156216743729794, 0.21551209830883777, 0.18828609857846113, 0.2091969817883531, 0.19855286082000267, 0.1959490478924606, 0.1997443045106967, 0.2284385912031146, 0.19643925563893871, 0.20816813832804093, 0.23317355851080057, 0.23244574941452556, 0.530236576591391, 0.20124172011461627, 0.20860150270310873, 0.858040802216014, 0.16978397072012608, 0.15341623658380743, 0.8739188956178513, 0.20008873433783114, 0.14707398439128339, 0.18196508869521066, 0.19012278072727962, 0.8149090071396737, 0.5984765865485928, 0.16860435280163133, 0.07343681902590993, 0.2089030852577919, 0.16820880967309715, 0.1517331202631218, 0.2072381416555752, 0.10454727516371254, 0.7002761988421575, 0.19842689332491903, 0.17664218627484696, 0.1813463259381317, 0.17370346796895464, 0.17764619147363214, 0.17393839293801938, 0.1896720583561825, 0.1842327842225644, 0.19191231692661126, 0.09308314323243849, 0.08462689919963196, 0.08913508942500781, 0.07564189764098028, 0.09242195493149463, 0.09900377044144115, 0.08792224681342764, 0.08047226701111321, 0.081800639575756]}, "mutation_prompt": null}
{"id": "c0d0eb64-bf6a-48ec-8648-505580949152", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5  # Cognitive coefficient\n        self.c2 = 1.5  # Social coefficient\n        self.w = 0.5   # Inertia weight\n        self.F = 0.8   # Differential weight\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        # Initialize the population and velocities for PSO\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        \n        # Evaluate initial population\n        fitness = np.apply_along_axis(func, 1, population)\n        budget_used = self.population_size\n        \n        # Initialize personal bests and global best\n        p_best_positions = np.copy(population)\n        p_best_fitness = np.copy(fitness)\n        g_best_position = p_best_positions[np.argmin(p_best_fitness)]\n        g_best_fitness = np.min(p_best_fitness)\n        \n        while budget_used < self.budget:\n            # Update velocities and positions for PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.w = 0.9 - (0.5 * budget_used / self.budget)  # Adaptive inertia weight\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (p_best_positions - population) +\n                          self.c2 * r2 * (g_best_position - population))\n            population = np.clip(population + velocities, self.lower_bound, self.upper_bound)\n\n            # Differential Evolution Mutation and Crossover\n            for i in range(self.population_size):\n                if budget_used >= self.budget:\n                    break\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                candidate = np.where(crossover, mutant, population[i])\n                \n                # Evaluate candidate solution\n                candidate_fitness = func(candidate)\n                budget_used += 1\n\n                # Select the better solution\n                if candidate_fitness < fitness[i]:\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < p_best_fitness[i]:\n                        p_best_positions[i] = candidate\n                        p_best_fitness[i] = candidate_fitness\n            \n            # Update global best\n            current_g_best_index = np.argmin(p_best_fitness)\n            if p_best_fitness[current_g_best_index] < g_best_fitness:\n                g_best_position = p_best_positions[current_g_best_index]\n                g_best_fitness = p_best_fitness[current_g_best_index]\n\n        return g_best_position, g_best_fitness", "name": "HybridSwarmOptimizer", "description": "Improved Hybrid Swarm Optimizer with adaptive parameters for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": 0.21233601133683255, "feedback": "", "error": "", "parent_id": "857f30bb-a69b-45b6-8772-81099a4043aa", "metadata": {"aucs": [0.5547608320498141, 0.5298064122521564, 0.5453025780763022, 0.5631393048233698, 0.5732922539298133, 0.5715027707535104, 0.5326867566463769, 0.5526426705102376, 0.5416105740965638, 0.29357161452070224, 0.28566782305778327, 0.10371290137998257, 0.29942126587552387, 0.28770274711439947, 0.27315595802713266, 0.30945907912594417, 0.2931454124856949, 0.2841540403310311, 0.07398778879063028, 0.10122984768903076, 0.11458739566149889, 0.0836462059371803, 0.10486463237038646, 0.09497757757342662, 0.07745175495116674, 0.08388939330312684, 0.10981805184050741, 0.07706888523803757, 0.08250590919974587, 0.08547218829747816, 0.07860486065255157, 0.06624452914136036, 0.08498492632211074, 0.08477593307434594, 0.07138853926590705, 0.06541454710263461, 0.9863835431316264, 0.9905044739620719, 0.9899744829169955, 0.9861044633468791, 0.9851219721969184, 0.9804056371643436, 0.9844784365122349, 0.9825730877305878, 0.9856546508342777, 0.24031134106315843, 0.2695676608439116, 0.25564035802575014, 0.24366065988582952, 0.24126845094019134, 0.2799988052844212, 0.08395458392322253, 0.08665034178778552, 0.24567743881478044, 0.3503059491354946, 0.20013327415184712, 0.47625446887048584, 0.21624711029217458, 0.1862094243915533, 0.30340591242823134, 0.27169971730474796, 0.3807821893456791, 0.37649563875521885, 0.13480214868302043, 0.14392866097669144, 0.13027150216746164, 0.0693040616743088, 0.12608528401881247, 0.12786590315169488, 0.13203786729530242, 0.1294273358629553, 0.18194287823743893, 0.09568281632440867, 0.12507581058908146, 0.09353982464354538, 0.1137942299568464, 0.13267356781597572, 0.11594491080433778, 0.12603421549442062, 0.06479067937915228, 0.12844781851982967, 9.999999999998899e-05, 0.0010414913021151717, 9.999999999998899e-05, 0.02717522311971221, 0.0017793799820464695, 0.0001208236096416071, 0.0003936786570062356, 0.013405495885516538, 0.003117953236779103, 0.04162510960488108, 0.05302170883219404, 0.07763523521832905, 0.056260359701282514, 0.039395316799661684, 0.027891357280617535, 0.045278523337024645, 0.029369352873769072, 0.041096722160022026, 0.022605466636739457, 0.019246093288012855, 0.024285983428832147, 0.03389378126503184, 0.04050006995032618, 0.02445779605913323, 0.03098907465546019, 0.04827471453205889, 0.042020201820629155, 0.07880089175031535, 0.06132349323186359, 0.057875277952824544, 0.08774975931671669, 0.11199646527487239, 0.12738753938589775, 0.07951655374553734, 9.999999999998899e-05, 0.10379646985897584, 0.3847398124266024, 0.3928665891541163, 0.38321618121333645, 0.396496607871189, 0.38589191440336934, 0.41523511298994464, 0.38338943221039445, 0.4100295583084811, 0.3832537325893951, 0.09011146690994343, 0.08737527422032909, 0.08162062147295623, 0.09172827298988828, 0.10128237149617048, 0.09021015139379795, 0.09856467227198173, 0.07899939063554506, 0.09237727375006521, 0.2007963968683022, 0.1477848998208865, 0.13419918248717955, 0.19044480480798232, 0.17274543800908926, 0.2215525532585666, 0.23386774988512404, 0.2034448714324002, 0.15617214331414053, 0.3011140952378255, 0.28705136740065185, 0.2890742100766036, 0.24557747291896936, 0.275380600770166, 0.22070862573809902, 0.3083157491219446, 0.3149268244913176, 0.3276301528357719, 0.2072282607261895, 0.22876249403247406, 0.20415031879973344, 0.20481837273464276, 0.17774763066226318, 0.19654683937545725, 0.21104223277194456, 0.23787773386630073, 0.22596084628068125, 0.1549649485489304, 0.18945681577347706, 0.19768450302107188, 0.18743168922459075, 0.1712968876402472, 0.19779906344709652, 0.16754983816078217, 0.1757084354499362, 0.20616989826491328, 0.1863609192589465, 0.18606461002396413, 0.17433091306300963, 0.17998046840537751, 0.17156909439168033, 0.16736330686861678, 0.18631287776539052, 0.18112153499887151, 0.1754497542098119, 0.25263477308121973, 0.16678079829384185, 0.15128936384971126, 0.18574616682853706, 0.19216043888090584, 0.16334490460619855, 0.13765061709399173, 0.18330408769723472, 0.1881704799984767, 0.19055080400408964, 0.19776927789466958, 0.1605944983470401, 0.1845700585469322, 0.31432985505970623, 0.15480681395347418, 0.19818682206794824, 0.20782491926554736, 0.4251902683838429, 0.18376099283914415, 0.2080790534132293, 0.19258505566456763, 0.192974028550136, 0.17395228162450183, 0.20797316767636032, 0.1802035197891826, 0.17750510667588604, 0.18605587899006049, 0.06926157273196676, 0.0699478396435479, 0.07018661046977381, 0.07176388356970442, 0.07588203775296265, 0.07059576944902313, 0.06203458918615923, 0.07571722402905268, 0.07188011244127923]}, "mutation_prompt": null}
