{"id": "c4845427-7400-4fa3-8331-657333dd9869", "solution": "import numpy as np\n\nclass AdaptiveLevyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 30\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1 = 2\n        self.c2 = 2\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                score = func(self.positions[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.positions[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.positions[i]\n\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.c1 * r1 * (self.personal_best_positions[i] - self.positions[i])\n                social_component = self.c2 * r2 * (self.global_best_position - self.positions[i])\n                self.velocities[i] = w * self.velocities[i] + cognitive_component + social_component\n\n                levy_step = self.levy_flight(self.dim)\n                self.positions[i] += self.velocities[i] + levy_step\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / np.abs(v) ** (1 / beta)\n        return step", "name": "AdaptiveLevyPSO", "description": "An adaptive levy flight-based particle swarm optimization that balances exploration and exploitation using adaptive inertia weights and levy flights.", "configspace": "", "generation": 0, "fitness": 0.12319600452169954, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.17670494621102284, 0.1774243890729693, 0.16276338086623454, 0.18047154619493888, 0.1833502282408136, 0.20668949018412508, 0.18603996003127465, 0.17108334660382896, 0.17831978501044254, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05384535001571644, 0.03763124216759206, 0.043346772869320205, 0.04224586937319286, 0.03878517831383921, 0.04296655148453132, 0.049464933112812415, 0.04124738271573425, 0.05239431295212471, 0.03509593870095995, 0.0354903712253305, 0.021323564995625377, 0.02646434686033039, 0.01904999399608276, 0.026112518953841257, 0.02366316448877992, 0.023232046095206682, 0.02585468316534023, 0.9943139467419165, 0.9950128774351176, 0.9943949481029807, 0.981033678395028, 0.9896409326648665, 0.9866472025172057, 0.9927439704110629, 0.9938147916718907, 0.9916723182922564, 0.0669865109022596, 0.07979078238550041, 0.08411513155019035, 0.0756884188125525, 0.10728630272743644, 0.06793082087794278, 0.08234233304576632, 0.0757383915031713, 0.07344026573106532, 0.1402023161645033, 0.11733084637422031, 0.10554908256056117, 0.13101086697187547, 0.12127253150461659, 0.11391084837907506, 0.1210721454854029, 0.12614293999475445, 0.1284969608765406, 0.002109801694065716, 9.999999999998899e-05, 0.008439027892508388, 0.002098482956692127, 0.0016436703594714386, 9.999999999998899e-05, 0.02100159396585133, 0.007457786645045594, 0.014343201060577848, 0.02118707573951706, 0.023895076528327674, 0.021350567815476285, 0.007391637615271396, 0.00449891926754642, 0.0009988932123804473, 9.999999999998899e-05, 0.018489495172138937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024510818742173757, 0.03317335866861504, 0.04030747796293799, 0.05789756364491172, 0.0074116338170684415, 0.003030691587047163, 0.041842681230179535, 0.0253270603386212, 0.029769640434311073, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030237196119740073, 0.00011229326713912968, 0.01928576113067737, 0.0020850058002064298, 0.007610625507557978, 0.18803270665458827, 0.18114395485006207, 0.19054256192941443, 0.19300687109049008, 0.19816040720554717, 0.1980685931100371, 0.217873318810069, 0.18142164750708534, 0.20222599059749613, 0.050463207493736784, 0.05142906900064648, 0.05300594906748335, 0.04888700050937078, 0.04394501628696468, 0.050190659485091826, 0.06425826905824794, 0.03942232441583016, 0.040341733969853744, 0.13011405576536128, 0.14718092971250774, 0.1512962826758505, 0.12951380036662363, 0.12802143866841365, 0.1283254719603627, 0.14325745973713833, 0.12707342073064143, 0.13706965373206603, 0.16910225401739043, 0.15641933469447544, 0.17417988356344505, 0.15868317232375106, 0.15369299719492568, 0.1614619223649728, 0.1593108456387241, 0.17939578122867184, 0.1623449727183015, 0.10585305623871333, 0.11162659848221612, 0.11512803848913078, 0.1031536984290713, 0.10397118593783894, 0.11725439187881037, 0.11869539271147533, 0.12314515679549931, 0.10920915829977551, 0.14256096282310204, 0.1918501481750301, 0.19807632512696172, 0.1355616536092582, 0.14513088451112, 0.14356610486186072, 0.17594445311006401, 0.14177424869614208, 0.1545876958613026, 0.11666271262124062, 0.1440355934971309, 0.11182845949734632, 0.11395903336497737, 0.09645126790007541, 0.10327348126833114, 0.1561138541996504, 0.10508089728163472, 0.1313481709732136, 0.15151810849669511, 0.17326598530974768, 0.12235112311488061, 0.15044093058301955, 0.14726834018031587, 0.16231817494708012, 0.11331020991910923, 0.1314914189038605, 0.14992773758138023, 0.1305590934024109, 0.15319712182411205, 0.13898295036532948, 0.1276447557730297, 0.14122246189547727, 0.13078016127657988, 0.17997902830627066, 0.19066444723995202, 0.18369535601633313, 0.21105713973777684, 0.17706272867982176, 0.17250964358396537, 0.18080119335942568, 0.1800834087044263, 0.17937280871482986, 0.17409362325456335, 0.18946697041338334, 0.1955581376512694, 0.042164125358963744, 0.044543481493805714, 0.04886822232093013, 0.04042258264525822, 0.051337317781929404, 0.04926927004827508, 0.0465814764082394, 0.04077003104551802, 0.05061480992246048]}, "mutation_prompt": null}
