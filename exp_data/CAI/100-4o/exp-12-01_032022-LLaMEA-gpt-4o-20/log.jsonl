{"id": "77159f13-b9f4-4932-8a52-fc868e6a4f26", "solution": "import numpy as np\n\nclass HybridDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.c1 = 1.5  # PSO cognitive coefficient\n        self.c2 = 1.5  # PSO social coefficient\n        self.w = 0.7   # Inertia weight for PSO\n        self.func_eval = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, \n                                       (self.population_size, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        while self.func_eval < self.budget:\n            for i in range(self.population_size):\n                if self.func_eval >= self.budget:\n                    break\n                \n                # Evaluate the objective function\n                fitness = func(population[i])\n                self.func_eval += 1\n\n                # Update personal best\n                if fitness < personal_best_scores[i]:\n                    personal_best_scores[i] = fitness\n                    personal_best_positions[i] = population[i]\n\n                # Update global best\n                if fitness < global_best_score:\n                    global_best_score = fitness\n                    global_best_position = population[i]\n\n            # Hybrid: Differential Evolution Mutation and Crossover\n            for i in range(self.population_size):\n                if self.func_eval >= self.budget:\n                    break\n\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                trial = np.copy(population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_rate\n                trial[crossover] = mutant[crossover]\n                \n                trial_fitness = func(trial)\n                self.func_eval += 1\n\n                if trial_fitness < fitness:\n                    population[i] = trial\n                    fitness = trial_fitness\n\n            # Adaptive PSO velocity and position update\n            for i in range(self.population_size):\n                if self.func_eval >= self.budget:\n                    break\n\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.w * velocities[i] +\n                                 self.c1 * r1 * (personal_best_positions[i] - population[i]) +\n                                 self.c2 * r2 * (global_best_position - population[i]))\n                \n                population[i] = population[i] + velocities[i]\n                population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n\n        return global_best_position, global_best_score", "name": "HybridDEAPSO", "description": "Hybrid Differential Evolution with Adaptive Particle Swarm Optimization for efficient exploration and exploitation in high-dimensional search spaces.", "configspace": "", "generation": 0, "fitness": 0.17674261020520637, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.32586576513506527, 0.4673398681580323, 0.40360135610758674, 0.33069480844356614, 0.4254000850251376, 0.42860314769582564, 0.3920898632254637, 0.3597075823704434, 0.36901794377247865, 0.030079682024469756, 0.016580304693641246, 0.0021203304956068925, 0.010225414055622828, 0.014427667783955989, 0.10925800065842173, 0.027079509883943476, 0.053959565125943465, 0.0053300686715880286, 0.07526825331981268, 0.07114101560925334, 0.07599208076193686, 0.13012798147028826, 0.08727119399253447, 0.07040720907788633, 0.09727526275487886, 0.09950164609580969, 0.11489855290584527, 0.08082730678070382, 0.06075898891711984, 0.08154677777335706, 0.06596102775994273, 0.07218429438333018, 0.07747077171565564, 0.07353499886166537, 0.09440045983123924, 0.05308603261536138, 0.9663901186303205, 0.9704294768707611, 0.9656200409153282, 0.9636407837156425, 0.9681061860734231, 0.9599848884201186, 0.964587893905949, 0.9696121571929263, 0.9717297179426703, 0.1769512958499354, 0.16046686103277885, 0.05741348387684686, 0.18036508115623273, 0.13255601397267947, 0.20714565205326496, 0.18575997302528235, 0.16404514606437148, 0.21767033613101971, 0.20924802285052824, 0.16869062086215292, 0.16087280610162213, 0.2157527614346716, 0.1926248015914277, 0.23968576477808012, 0.1734938161342061, 0.22875421056974632, 0.23303933598709126, 0.10932204247369115, 0.055944035971872696, 0.030657429295581795, 0.08458941433800504, 0.16427991715558254, 0.08477687204581175, 0.10402748775367199, 0.10010582223553499, 0.12625147860452257, 0.1133911722644485, 0.016201159007641186, 0.0811237178402966, 0.09755992174362271, 0.07560383331306908, 0.07052592309977646, 0.058621721801136895, 9.999999999998899e-05, 0.06446721920363596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017299534441474806, 9.999999999998899e-05, 0.002791348017603723, 9.999999999998899e-05, 9.999999999998899e-05, 0.08071696206641121, 0.031579206584308794, 0.08593569008741431, 0.08677090937142218, 0.012212641945528624, 0.0034418366579158644, 0.03060673563153271, 0.0370829353594343, 0.03526658394979609, 0.0023640804480477007, 0.011724277817012463, 9.999999999998899e-05, 0.0029500422985182517, 0.003786694801118262, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007755854317125221, 0.00021070370215492407, 0.0699733184543273, 0.02166730597485389, 0.10215978848180618, 0.006421665518358544, 0.04583721770931093, 0.0417379870659772, 0.04917687733544229, 0.03619394600952641, 0.044801289262388466, 0.2951858144033277, 0.2881920592964873, 0.38628650437295253, 0.31327212161889795, 0.3458890471387541, 0.23717194381432438, 0.3871131485625201, 0.353174521954133, 0.3403973216282953, 0.069703383871914, 0.06894891714630436, 0.0830099205950584, 0.0775088866724638, 0.09114397390533924, 0.07772491751207067, 0.06499873032790493, 0.09792177158995696, 0.08589014642663129, 0.14779847375621424, 0.14120991795603932, 0.1578113921229033, 0.2068656163523508, 0.14016335779269606, 0.15656209675225652, 0.15983405096767345, 0.14797598899712627, 0.16505173974899678, 0.23344436850638117, 0.21790879785271178, 0.25274655179260874, 0.2183404499305328, 0.25420059516686255, 0.2266541570492664, 0.23155961738545316, 0.26379593453829275, 0.22523836361792737, 0.14165838969303646, 0.176837803192038, 0.2025443069445989, 0.13518454547340752, 0.15265171135609967, 0.1451485308705065, 0.1676966700786373, 0.23306172193661745, 0.15929015954131553, 0.19489648830847361, 0.1598546759091365, 0.18709569826941297, 0.17951570868679423, 0.20481084838576358, 0.17616042341598603, 0.21034149868203134, 0.16570813166285903, 0.1654388822278524, 0.18386154868918803, 0.1777435914330977, 0.17261573492283766, 0.18797051112565144, 0.17950445478383004, 0.17383951105556095, 0.16251169398715104, 0.16163198864043749, 0.1760334718201675, 0.377313257610398, 0.15399233327625894, 0.15075413413564742, 0.5077315920298089, 0.18718696052932626, 0.1664472718262614, 0.1452548734490623, 0.40952365222788256, 0.35654579015416676, 0.38420196285163255, 0.20223696723806428, 0.17810135795364224, 0.2217737077218117, 0.1659303467440184, 0.1588010050819385, 0.19167289513341734, 0.201702436192278, 0.17793473672161075, 0.18522507626450446, 0.17218765761267352, 0.17695905513693544, 0.19685225303700116, 0.1792528318716703, 0.18013049420046123, 0.1804101362253805, 0.17529092599063312, 0.1917884074392917, 0.0796443943461167, 0.07210388130327572, 0.08924541861468993, 0.07975442971962143, 0.07109475567974499, 0.07274270998926946, 0.08855005458902232, 0.07683495811758878, 0.06722138342956263]}, "mutation_prompt": null}
{"id": "1183cf51-c6d8-49d2-bffb-3201af3ac8b1", "solution": "import numpy as np\n\nclass HybridDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.c1 = 1.5  # PSO cognitive coefficient\n        self.c2 = 1.5  # PSO social coefficient\n        self.w = 0.7   # Inertia weight for PSO\n        self.func_eval = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, \n                                       (self.population_size, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        while self.func_eval < self.budget:\n            for i in range(self.population_size):\n                if self.func_eval >= self.budget:\n                    break\n                \n                # Evaluate the objective function\n                fitness = func(population[i])\n                self.func_eval += 1\n\n                # Update personal best\n                if fitness < personal_best_scores[i]:\n                    personal_best_scores[i] = fitness\n                    personal_best_positions[i] = population[i]\n\n                # Update global best\n                if fitness < global_best_score:\n                    global_best_score = fitness\n                    global_best_position = population[i]\n\n            # Hybrid: Differential Evolution Mutation and Crossover\n            for i in range(self.population_size):\n                if self.func_eval >= self.budget:\n                    break\n\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                trial = np.copy(population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_rate\n                trial[crossover] = mutant[crossover]\n                \n                trial_fitness = func(trial)\n                self.func_eval += 1\n\n                if trial_fitness < fitness:\n                    population[i] = trial\n                    fitness = trial_fitness\n\n            # Adaptive PSO velocity and position update\n            for i in range(self.population_size):\n                if self.func_eval >= self.budget:\n                    break\n\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.w * velocities[i] +\n                                 self.c1 * r1 * (personal_best_positions[i] - population[i]) +\n                                 self.c2 * r2 * (global_best_position - population[i]))\n                \n                population[i] = population[i] + velocities[i]\n                population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n\n        return global_best_position, global_best_score", "name": "HybridDEAPSO", "description": "Hybrid Differential Evolution with Adaptive Particle Swarm Optimization for efficient exploration and exploitation in high-dimensional search spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "77159f13-b9f4-4932-8a52-fc868e6a4f26", "metadata": {"aucs": [0.32586576513506527, 0.4673398681580323, 0.40360135610758674, 0.33069480844356614, 0.4254000850251376, 0.42860314769582564, 0.3920898632254637, 0.3597075823704434, 0.36901794377247865, 0.030079682024469756, 0.016580304693641246, 0.0021203304956068925, 0.010225414055622828, 0.014427667783955989, 0.10925800065842173, 0.027079509883943476, 0.053959565125943465, 0.0053300686715880286, 0.07526825331981268, 0.07114101560925334, 0.07599208076193686, 0.13012798147028826, 0.08727119399253447, 0.07040720907788633, 0.09727526275487886, 0.09950164609580969, 0.11489855290584527, 0.08082730678070382, 0.06075898891711984, 0.08154677777335706, 0.06596102775994273, 0.07218429438333018, 0.07747077171565564, 0.07353499886166537, 0.09440045983123924, 0.05308603261536138, 0.9663901186303205, 0.9704294768707611, 0.9656200409153282, 0.9636407837156425, 0.9681061860734231, 0.9599848884201186, 0.964587893905949, 0.9696121571929263, 0.9717297179426703, 0.1769512958499354, 0.16046686103277885, 0.05741348387684686, 0.18036508115623273, 0.13255601397267947, 0.20714565205326496, 0.18575997302528235, 0.16404514606437148, 0.21767033613101971, 0.20924802285052824, 0.16869062086215292, 0.16087280610162213, 0.2157527614346716, 0.1926248015914277, 0.23968576477808012, 0.1734938161342061, 0.22875421056974632, 0.23303933598709126, 0.10932204247369115, 0.055944035971872696, 0.030657429295581795, 0.08458941433800504, 0.16427991715558254, 0.08477687204581175, 0.10402748775367199, 0.10010582223553499, 0.12625147860452257, 0.1133911722644485, 0.016201159007641186, 0.0811237178402966, 0.09755992174362271, 0.07560383331306908, 0.07052592309977646, 0.058621721801136895, 9.999999999998899e-05, 0.06446721920363596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017299534441474806, 9.999999999998899e-05, 0.002791348017603723, 9.999999999998899e-05, 9.999999999998899e-05, 0.08071696206641121, 0.031579206584308794, 0.08593569008741431, 0.08677090937142218, 0.012212641945528624, 0.0034418366579158644, 0.03060673563153271, 0.0370829353594343, 0.03526658394979609, 0.0023640804480477007, 0.011724277817012463, 9.999999999998899e-05, 0.0029500422985182517, 0.003786694801118262, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007755854317125221, 0.00021070370215492407, 0.0699733184543273, 0.02166730597485389, 0.10215978848180618, 0.006421665518358544, 0.04583721770931093, 0.0417379870659772, 0.04917687733544229, 0.03619394600952641, 0.044801289262388466, 0.2951858144033277, 0.2881920592964873, 0.38628650437295253, 0.31327212161889795, 0.3458890471387541, 0.23717194381432438, 0.3871131485625201, 0.353174521954133, 0.3403973216282953, 0.069703383871914, 0.06894891714630436, 0.0830099205950584, 0.0775088866724638, 0.09114397390533924, 0.07772491751207067, 0.06499873032790493, 0.09792177158995696, 0.08589014642663129, 0.14779847375621424, 0.14120991795603932, 0.1578113921229033, 0.2068656163523508, 0.14016335779269606, 0.15656209675225652, 0.15983405096767345, 0.14797598899712627, 0.16505173974899678, 0.23344436850638117, 0.21790879785271178, 0.25274655179260874, 0.2183404499305328, 0.25420059516686255, 0.2266541570492664, 0.23155961738545316, 0.26379593453829275, 0.22523836361792737, 0.14165838969303646, 0.176837803192038, 0.2025443069445989, 0.13518454547340752, 0.15265171135609967, 0.1451485308705065, 0.1676966700786373, 0.23306172193661745, 0.15929015954131553, 0.19489648830847361, 0.1598546759091365, 0.18709569826941297, 0.17951570868679423, 0.20481084838576358, 0.17616042341598603, 0.21034149868203134, 0.16570813166285903, 0.1654388822278524, 0.18386154868918803, 0.1777435914330977, 0.17261573492283766, 0.18797051112565144, 0.17950445478383004, 0.17383951105556095, 0.16251169398715104, 0.16163198864043749, 0.1760334718201675, 0.377313257610398, 0.15399233327625894, 0.15075413413564742, 0.5077315920298089, 0.18718696052932626, 0.1664472718262614, 0.1452548734490623, 0.40952365222788256, 0.35654579015416676, 0.38420196285163255, 0.20223696723806428, 0.17810135795364224, 0.2217737077218117, 0.1659303467440184, 0.1588010050819385, 0.19167289513341734, 0.201702436192278, 0.17793473672161075, 0.18522507626450446, 0.17218765761267352, 0.17695905513693544, 0.19685225303700116, 0.1792528318716703, 0.18013049420046123, 0.1804101362253805, 0.17529092599063312, 0.1917884074392917, 0.0796443943461167, 0.07210388130327572, 0.08924541861468993, 0.07975442971962143, 0.07109475567974499, 0.07274270998926946, 0.08855005458902232, 0.07683495811758878, 0.06722138342956263]}, "mutation_prompt": null}
