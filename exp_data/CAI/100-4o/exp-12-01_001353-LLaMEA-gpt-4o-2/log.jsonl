{"id": "9954ebf4-5e4e-41ec-8670-8a8118c0c624", "solution": "import numpy as np\n\nclass HybridGeneticDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.inf * np.ones(self.pop_size)\n        self.used_budget = 0\n\n    def select_parents(self):\n        selected_indices = np.random.choice(self.pop_size, 2, replace=False)\n        return self.population[selected_indices]\n\n    def differential_evolution_step(self, target_idx):\n        indices = [i for i in range(self.pop_size) if i != target_idx]\n        a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), -5.0, 5.0)\n        return mutant\n    \n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.crossover_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        offspring = np.where(cross_points, mutant, target)\n        return offspring\n\n    def __call__(self, func):\n        self.fitness = np.array([func(ind) for ind in self.population])\n        self.used_budget += self.pop_size\n\n        while self.used_budget < self.budget:\n            for i in range(self.pop_size):\n                target = self.population[i]\n                mutant = self.differential_evolution_step(i)\n                offspring = self.crossover(target, mutant)\n                \n                offspring_fitness = func(offspring)\n                self.used_budget += 1\n\n                if offspring_fitness < self.fitness[i]:\n                    self.population[i] = offspring\n                    self.fitness[i] = offspring_fitness\n\n                if self.used_budget >= self.budget:\n                    break\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "HybridGeneticDifferentialEvolution", "description": "A hybrid genetic algorithm with differential evolution to balance exploration and exploitation in continuous optimization.", "configspace": "", "generation": 0, "fitness": 0.22498307462623796, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6794104523559785, 0.6607116954541636, 0.6533259801401556, 0.6743476327704891, 0.70015974633827, 0.685925816095301, 0.6827192367236953, 0.6571044861821962, 0.638817738613922, 0.42780360153409924, 0.3921221663337271, 0.43318407552795146, 0.4244223429772471, 0.42494558730293785, 0.4279755085337915, 0.4002458154159192, 0.42816807993730177, 0.43830860777176894, 0.1314578844793941, 0.11643726591575798, 0.12152391264371398, 0.11841549406417218, 0.11344124308827208, 0.11765174484404817, 0.11063523425588517, 0.10748317272349373, 0.12283327379655107, 0.11430961813391927, 0.11055930093197242, 0.10578129037534223, 0.11484939789110538, 0.10801867817895094, 0.11466473558458368, 0.11758886403722135, 0.11029124713256133, 0.11049555399546429, 0.9323574947027575, 0.9600468380308839, 0.952680406763562, 0.9554419985870249, 0.9755690236236215, 0.9721031877146543, 0.9536600497375782, 0.9659894091840614, 0.975946603126642, 0.2339439878919629, 0.23119573935082804, 0.25136086262956725, 0.2597192881254572, 0.24025721321923055, 0.23049364956134066, 0.2443640970105153, 0.23050577195728728, 0.24551148302618508, 0.2523891140455867, 0.24514905822516886, 0.23832591594988506, 0.27246304153081335, 0.3672718874149494, 0.30496744985924484, 0.2337816105879248, 0.338116782025936, 0.2576867965078695, 0.154646533144016, 0.1480659143352372, 0.14822174330583415, 0.17138288046226857, 0.14946095390712655, 0.1332076719533618, 0.15054049700534655, 0.15341986240217376, 0.1455323683556784, 0.13382358265837324, 0.04596211906210579, 0.17370793621337866, 0.12131080115638304, 0.15392258645501478, 0.14397079595341, 0.12817682392304308, 0.14852002734648706, 0.1331681217436631, 0.004114871295178624, 0.017356630635041448, 0.0014091154377975368, 0.030192076634477094, 0.001190048350327877, 0.004261534591678884, 0.0025185456606379164, 0.00436957292321094, 0.0015413386942291218, 0.07486152269119595, 0.10890613401825144, 0.08925921182174557, 0.06103082317565045, 0.081443095976931, 0.0715179849116756, 0.10336417710453882, 0.1330228515368984, 0.0968808740491457, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006602906584929347, 0.0002032864565135739, 0.00010946505519171534, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005313307028951275, 0.02568202562241928, 0.09815648933194465, 0.0901694069743908, 0.07515363218499749, 0.11431482758235956, 0.10687191256223783, 0.11719517235310994, 0.0874349016169148, 0.09135081013582125, 0.09926350514367499, 0.4478367890851529, 0.45680728720999364, 0.44079094464154556, 0.4512757158915318, 0.4364809995267692, 0.4562957526343111, 0.4315770847866315, 0.4236015648266336, 0.44353516077155497, 0.08005455060107958, 0.09412144103293407, 0.09608953732103653, 0.09296152057890028, 0.07936449586794514, 0.09050006515331699, 0.09743455241040178, 0.07256297498651765, 0.07886588054953059, 0.1293100855305509, 0.13043574755986864, 0.13554012284920336, 0.12551970489818232, 0.12548608212560552, 0.1395796758677772, 0.1421029563116024, 0.18739761740669592, 0.12654001846085938, 0.262690130782382, 0.2605155555763058, 0.26232075477833483, 0.2603811126678609, 0.22606461439519565, 0.2538263907191356, 0.277746240296157, 0.29495858159022914, 0.2732527608910391, 0.1670147310668011, 0.1900873686297121, 0.1835812130035731, 0.16253925599271601, 0.1633310702271359, 0.14990511777550075, 0.2084100359537745, 0.19348750190176645, 0.20706585384883336, 0.1670624110963832, 0.1771528801724791, 0.1675904724551549, 0.18708280376338293, 0.18413979479316778, 0.18123881730526614, 0.17317826146028603, 0.17556991192407478, 0.16375232467758016, 0.18777931264797154, 0.1914881986751379, 0.18886756093181412, 0.17884298068922222, 0.18340937701004822, 0.17800543928141765, 0.20052331407255486, 0.17951618586254314, 0.1851899133567484, 0.29139883511533937, 0.16597256268923843, 0.1644518418219888, 0.17043688838447268, 0.17438028897364022, 0.16561282882475004, 0.1608538546295315, 0.1591387054812049, 0.1699209766180978, 0.19876965715799866, 0.16004618645741464, 0.1772478138612198, 0.21213974837706606, 0.18572618183521805, 0.20901666101741545, 0.2057144552882313, 0.30851732962398526, 0.2060131406723632, 0.18062987427841604, 0.17469600433568944, 0.1721705258393189, 0.1863984305640567, 0.19142796828147712, 0.194635171041474, 0.17598890977408232, 0.18828280823075483, 0.19632179615787826, 0.08533129357076197, 0.08122388987051576, 0.06976647231762179, 0.06684523600479064, 0.06493892459166128, 0.06467024680457978, 0.06514014189305561, 0.07292165893495117, 0.0707463030449842]}, "mutation_prompt": null}
{"id": "a7d61325-dc9d-4ef5-b6f7-66b21277e0e6", "solution": "import numpy as np\n\nclass HybridGeneticDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.inf * np.ones(self.pop_size)\n        self.used_budget = 0\n\n    def select_parents(self):\n        selected_indices = np.random.choice(self.pop_size, 2, replace=False)\n        return self.population[selected_indices]\n\n    def differential_evolution_step(self, target_idx):\n        indices = [i for i in range(self.pop_size) if i != target_idx]\n        a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), -5.0, 5.0)\n        return mutant\n    \n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.crossover_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        offspring = np.where(cross_points, mutant, target)\n        return offspring\n\n    def __call__(self, func):\n        self.fitness = np.array([func(ind) for ind in self.population])\n        self.used_budget += self.pop_size\n\n        while self.used_budget < self.budget:\n            for i in range(self.pop_size):\n                target = self.population[i]\n                mutant = self.differential_evolution_step(i)\n                offspring = self.crossover(target, mutant)\n                \n                offspring_fitness = func(offspring)\n                self.used_budget += 1\n\n                if offspring_fitness < self.fitness[i]:\n                    self.population[i] = offspring\n                    self.fitness[i] = offspring_fitness\n\n                if self.used_budget >= self.budget:\n                    break\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "HybridGeneticDifferentialEvolution", "description": "A hybrid genetic algorithm with differential evolution to balance exploration and exploitation in continuous optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9954ebf4-5e4e-41ec-8670-8a8118c0c624", "metadata": {"aucs": [0.6794104523559785, 0.6607116954541636, 0.6533259801401556, 0.6743476327704891, 0.70015974633827, 0.685925816095301, 0.6827192367236953, 0.6571044861821962, 0.638817738613922, 0.42780360153409924, 0.3921221663337271, 0.43318407552795146, 0.4244223429772471, 0.42494558730293785, 0.4279755085337915, 0.4002458154159192, 0.42816807993730177, 0.43830860777176894, 0.1314578844793941, 0.11643726591575798, 0.12152391264371398, 0.11841549406417218, 0.11344124308827208, 0.11765174484404817, 0.11063523425588517, 0.10748317272349373, 0.12283327379655107, 0.11430961813391927, 0.11055930093197242, 0.10578129037534223, 0.11484939789110538, 0.10801867817895094, 0.11466473558458368, 0.11758886403722135, 0.11029124713256133, 0.11049555399546429, 0.9323574947027575, 0.9600468380308839, 0.952680406763562, 0.9554419985870249, 0.9755690236236215, 0.9721031877146543, 0.9536600497375782, 0.9659894091840614, 0.975946603126642, 0.2339439878919629, 0.23119573935082804, 0.25136086262956725, 0.2597192881254572, 0.24025721321923055, 0.23049364956134066, 0.2443640970105153, 0.23050577195728728, 0.24551148302618508, 0.2523891140455867, 0.24514905822516886, 0.23832591594988506, 0.27246304153081335, 0.3672718874149494, 0.30496744985924484, 0.2337816105879248, 0.338116782025936, 0.2576867965078695, 0.154646533144016, 0.1480659143352372, 0.14822174330583415, 0.17138288046226857, 0.14946095390712655, 0.1332076719533618, 0.15054049700534655, 0.15341986240217376, 0.1455323683556784, 0.13382358265837324, 0.04596211906210579, 0.17370793621337866, 0.12131080115638304, 0.15392258645501478, 0.14397079595341, 0.12817682392304308, 0.14852002734648706, 0.1331681217436631, 0.004114871295178624, 0.017356630635041448, 0.0014091154377975368, 0.030192076634477094, 0.001190048350327877, 0.004261534591678884, 0.0025185456606379164, 0.00436957292321094, 0.0015413386942291218, 0.07486152269119595, 0.10890613401825144, 0.08925921182174557, 0.06103082317565045, 0.081443095976931, 0.0715179849116756, 0.10336417710453882, 0.1330228515368984, 0.0968808740491457, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006602906584929347, 0.0002032864565135739, 0.00010946505519171534, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005313307028951275, 0.02568202562241928, 0.09815648933194465, 0.0901694069743908, 0.07515363218499749, 0.11431482758235956, 0.10687191256223783, 0.11719517235310994, 0.0874349016169148, 0.09135081013582125, 0.09926350514367499, 0.4478367890851529, 0.45680728720999364, 0.44079094464154556, 0.4512757158915318, 0.4364809995267692, 0.4562957526343111, 0.4315770847866315, 0.4236015648266336, 0.44353516077155497, 0.08005455060107958, 0.09412144103293407, 0.09608953732103653, 0.09296152057890028, 0.07936449586794514, 0.09050006515331699, 0.09743455241040178, 0.07256297498651765, 0.07886588054953059, 0.1293100855305509, 0.13043574755986864, 0.13554012284920336, 0.12551970489818232, 0.12548608212560552, 0.1395796758677772, 0.1421029563116024, 0.18739761740669592, 0.12654001846085938, 0.262690130782382, 0.2605155555763058, 0.26232075477833483, 0.2603811126678609, 0.22606461439519565, 0.2538263907191356, 0.277746240296157, 0.29495858159022914, 0.2732527608910391, 0.1670147310668011, 0.1900873686297121, 0.1835812130035731, 0.16253925599271601, 0.1633310702271359, 0.14990511777550075, 0.2084100359537745, 0.19348750190176645, 0.20706585384883336, 0.1670624110963832, 0.1771528801724791, 0.1675904724551549, 0.18708280376338293, 0.18413979479316778, 0.18123881730526614, 0.17317826146028603, 0.17556991192407478, 0.16375232467758016, 0.18777931264797154, 0.1914881986751379, 0.18886756093181412, 0.17884298068922222, 0.18340937701004822, 0.17800543928141765, 0.20052331407255486, 0.17951618586254314, 0.1851899133567484, 0.29139883511533937, 0.16597256268923843, 0.1644518418219888, 0.17043688838447268, 0.17438028897364022, 0.16561282882475004, 0.1608538546295315, 0.1591387054812049, 0.1699209766180978, 0.19876965715799866, 0.16004618645741464, 0.1772478138612198, 0.21213974837706606, 0.18572618183521805, 0.20901666101741545, 0.2057144552882313, 0.30851732962398526, 0.2060131406723632, 0.18062987427841604, 0.17469600433568944, 0.1721705258393189, 0.1863984305640567, 0.19142796828147712, 0.194635171041474, 0.17598890977408232, 0.18828280823075483, 0.19632179615787826, 0.08533129357076197, 0.08122388987051576, 0.06976647231762179, 0.06684523600479064, 0.06493892459166128, 0.06467024680457978, 0.06514014189305561, 0.07292165893495117, 0.0707463030449842]}, "mutation_prompt": null}
