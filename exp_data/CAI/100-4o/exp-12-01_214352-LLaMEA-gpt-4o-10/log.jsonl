{"id": "5cbf26e3-0aa5-4b26-8ee0-27548e744e33", "solution": "import numpy as np\n\nclass DEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best = self.population.copy()\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best = None\n        self.global_best_score = np.inf\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # DE crossover probability\n        self.c1 = 2.0  # PSO cognitive component\n        self.c2 = 2.0  # PSO social component\n        self.w = 0.7  # PSO inertia weight\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Differential Evolution mutation and crossover\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial vector\n                trial_score = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    if trial_score < self.global_best_score:\n                        self.global_best = trial\n                        self.global_best_score = trial_score\n\n                # Particle Swarm Optimization velocity and position update\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.personal_best[i] - self.population[i]) +\n                                      self.c2 * r2 * (self.global_best - self.population[i]))\n                self.population[i] = np.clip(self.population[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n                if evaluations >= self.budget:\n                    break\n\n        return self.global_best, self.global_best_score", "name": "DEPSO", "description": "A hybrid metaheuristic combining Differential Evolution (DE) and Particle Swarm Optimization (PSO) for adaptive exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.16314557959588605, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.35775023293406216, 0.3393489635272462, 0.35901873001096796, 0.1571435545386779, 0.15657098786294155, 0.15726963996640864, 0.3931352426586434, 0.14946701940332074, 0.14272383309317827, 0.10839432643044533, 0.11075729158914072, 0.051586138733948794, 0.041565410440394746, 0.035889728122242004, 0.024984664423289393, 0.04026716019371379, 0.12412858965147167, 0.10024548614620066, 0.08954322005066839, 0.07867472125338315, 0.07292443917176605, 0.0770815731625295, 0.07893595903398909, 0.07568234603032598, 0.07858026837512311, 0.08560612277047241, 0.04784211614496292, 0.06150604970783935, 0.06579049337475085, 0.06563228192226378, 0.0717019879889409, 0.08134165875528632, 0.06562927990676559, 0.07480696314641466, 0.07055958417753516, 0.061666670289420855, 0.9968932632489861, 0.992402168033562, 0.9948138314639228, 0.9870914319674313, 0.9953216724224203, 0.9931464189810079, 0.9936371003952109, 0.9961069177649478, 0.9925198795187472, 0.20557686535655517, 0.19269624848232048, 0.22623580372327434, 0.1882827553960107, 0.16921055217916015, 0.17934891773375516, 0.03097932144139881, 0.0870658457616903, 0.051125498839856065, 0.2003808958993254, 0.2275939699346179, 0.25444154048261514, 0.15803810112822048, 0.15571409784432821, 0.18572260464917023, 0.0643825603409447, 0.20991938103212904, 0.23329355780820815, 0.11982747306261976, 0.11903139197834478, 0.09457965881914165, 0.12813572488652303, 0.0823759708810663, 0.07378289597433851, 9.999999999998899e-05, 0.07072740904244734, 0.12618495470600732, 0.10492022316969629, 0.06267885485525837, 0.14438757126012058, 0.056864586641580894, 0.09610233365486476, 0.08534598823879169, 0.09573387553994439, 0.12238229006607948, 0.0549518190551207, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0899294281999159, 0.10317443451332708, 0.01979737718954544, 9.999999999998899e-05, 9.999999999998899e-05, 0.07063617199289529, 0.01852801443234764, 0.03982119743053192, 0.042260157641495266, 0.008122351762071767, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0045344709640072756, 9.999999999998899e-05, 0.0059288967900517076, 0.05444119812702486, 9.999999999998899e-05, 0.03809065142698276, 0.003745399166325991, 0.027016175280597965, 0.04896570818095114, 0.053441040420245, 9.999999999998899e-05, 0.06441914513019487, 0.38831098416210197, 0.1325266452598849, 0.33024658065059176, 0.32909608830117265, 0.3458875689912748, 0.3898578377806087, 0.3252175858248506, 0.29711343348895425, 0.3456861077769483, 0.08114575628708842, 0.08741788174210163, 0.055704551783424594, 0.07360084167597547, 0.07588621729983225, 0.07725130143820735, 0.09010160516685717, 0.08540118766258953, 0.07227968400546125, 0.1309359021986496, 0.13725128190638447, 0.1440031574889008, 0.16297000215630364, 0.14376737732770895, 0.25322705735625095, 0.15049682606712123, 0.21356447016220925, 0.17451149087749906, 0.23260471122154847, 0.21621445758989633, 0.22420369960668918, 0.19120943327461082, 0.2376793705321506, 0.2328430609156168, 0.24551828092637396, 0.24222374594558693, 0.25124403904593395, 0.10046530158783695, 0.1385158626155082, 0.17557586025518923, 0.17893701541619633, 0.15852739005964211, 0.17181198986213908, 0.18032935466996336, 0.18371270863074385, 0.18956946927583995, 0.20527235187813908, 0.17889549424437845, 0.18252811477645414, 0.19785364416725137, 0.1872415163309593, 0.16382068075244005, 0.18298336459773734, 0.17575314566891498, 0.16821085292776627, 0.16578614137416958, 0.15405661539137694, 0.17426817957522867, 0.17016798897639096, 0.17120784498088581, 0.15811157334323722, 0.16239253939888731, 0.1699078529771466, 0.18055826840981848, 0.17045742904728467, 0.16884387245814447, 0.1796956215285339, 0.16266937062126707, 0.12977017107643718, 0.15505400992946394, 0.12289784591244501, 0.17909040149821853, 0.1391048136891988, 0.11268855154583579, 0.16198767318681262, 0.15043750998018823, 0.11132708072674491, 0.16563094011628454, 0.12297393814528623, 0.12717013688056245, 0.1617116365943797, 0.18772167283528596, 0.18617146713306743, 0.19127156674407497, 0.18105718753145006, 0.18564439060230142, 0.17524528744583445, 0.1812374463380827, 0.1795052649239457, 0.18194888153758004, 0.18090148001051742, 0.07031956662189676, 0.07636412122457992, 0.07480407174911852, 0.06349818434050047, 0.06493509995009594, 0.07332121186878415, 0.09603351483775568, 0.058985226660219436, 0.0667484240785976]}, "mutation_prompt": null}
{"id": "e5d9b23c-a229-4fc1-a624-29a29f71ad10", "solution": "import numpy as np\n\nclass DEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best = self.population.copy()\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best = None\n        self.global_best_score = np.inf\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9  # DE crossover probability\n        self.c1 = 2.0  # PSO cognitive component\n        self.c2 = 2.0  # PSO social component\n        self.w = 0.7  # PSO inertia weight\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Differential Evolution mutation and crossover\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial vector\n                trial_score = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    if trial_score < self.global_best_score:\n                        self.global_best = trial\n                        self.global_best_score = trial_score\n\n                # Particle Swarm Optimization velocity and position update\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.personal_best[i] - self.population[i]) +\n                                      self.c2 * r2 * (self.global_best - self.population[i]))\n                self.population[i] = np.clip(self.population[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n                if evaluations >= self.budget:\n                    break\n\n        return self.global_best, self.global_best_score", "name": "DEPSO", "description": "A hybrid metaheuristic combining Differential Evolution (DE) and Particle Swarm Optimization (PSO) for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5cbf26e3-0aa5-4b26-8ee0-27548e744e33", "metadata": {"aucs": [0.35775023293406216, 0.3393489635272462, 0.35901873001096796, 0.1571435545386779, 0.15657098786294155, 0.15726963996640864, 0.3931352426586434, 0.14946701940332074, 0.14272383309317827, 0.10839432643044533, 0.11075729158914072, 0.051586138733948794, 0.041565410440394746, 0.035889728122242004, 0.024984664423289393, 0.04026716019371379, 0.12412858965147167, 0.10024548614620066, 0.08954322005066839, 0.07867472125338315, 0.07292443917176605, 0.0770815731625295, 0.07893595903398909, 0.07568234603032598, 0.07858026837512311, 0.08560612277047241, 0.04784211614496292, 0.06150604970783935, 0.06579049337475085, 0.06563228192226378, 0.0717019879889409, 0.08134165875528632, 0.06562927990676559, 0.07480696314641466, 0.07055958417753516, 0.061666670289420855, 0.9968932632489861, 0.992402168033562, 0.9948138314639228, 0.9870914319674313, 0.9953216724224203, 0.9931464189810079, 0.9936371003952109, 0.9961069177649478, 0.9925198795187472, 0.20557686535655517, 0.19269624848232048, 0.22623580372327434, 0.1882827553960107, 0.16921055217916015, 0.17934891773375516, 0.03097932144139881, 0.0870658457616903, 0.051125498839856065, 0.2003808958993254, 0.2275939699346179, 0.25444154048261514, 0.15803810112822048, 0.15571409784432821, 0.18572260464917023, 0.0643825603409447, 0.20991938103212904, 0.23329355780820815, 0.11982747306261976, 0.11903139197834478, 0.09457965881914165, 0.12813572488652303, 0.0823759708810663, 0.07378289597433851, 9.999999999998899e-05, 0.07072740904244734, 0.12618495470600732, 0.10492022316969629, 0.06267885485525837, 0.14438757126012058, 0.056864586641580894, 0.09610233365486476, 0.08534598823879169, 0.09573387553994439, 0.12238229006607948, 0.0549518190551207, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0899294281999159, 0.10317443451332708, 0.01979737718954544, 9.999999999998899e-05, 9.999999999998899e-05, 0.07063617199289529, 0.01852801443234764, 0.03982119743053192, 0.042260157641495266, 0.008122351762071767, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0045344709640072756, 9.999999999998899e-05, 0.0059288967900517076, 0.05444119812702486, 9.999999999998899e-05, 0.03809065142698276, 0.003745399166325991, 0.027016175280597965, 0.04896570818095114, 0.053441040420245, 9.999999999998899e-05, 0.06441914513019487, 0.38831098416210197, 0.1325266452598849, 0.33024658065059176, 0.32909608830117265, 0.3458875689912748, 0.3898578377806087, 0.3252175858248506, 0.29711343348895425, 0.3456861077769483, 0.08114575628708842, 0.08741788174210163, 0.055704551783424594, 0.07360084167597547, 0.07588621729983225, 0.07725130143820735, 0.09010160516685717, 0.08540118766258953, 0.07227968400546125, 0.1309359021986496, 0.13725128190638447, 0.1440031574889008, 0.16297000215630364, 0.14376737732770895, 0.25322705735625095, 0.15049682606712123, 0.21356447016220925, 0.17451149087749906, 0.23260471122154847, 0.21621445758989633, 0.22420369960668918, 0.19120943327461082, 0.2376793705321506, 0.2328430609156168, 0.24551828092637396, 0.24222374594558693, 0.25124403904593395, 0.10046530158783695, 0.1385158626155082, 0.17557586025518923, 0.17893701541619633, 0.15852739005964211, 0.17181198986213908, 0.18032935466996336, 0.18371270863074385, 0.18956946927583995, 0.20527235187813908, 0.17889549424437845, 0.18252811477645414, 0.19785364416725137, 0.1872415163309593, 0.16382068075244005, 0.18298336459773734, 0.17575314566891498, 0.16821085292776627, 0.16578614137416958, 0.15405661539137694, 0.17426817957522867, 0.17016798897639096, 0.17120784498088581, 0.15811157334323722, 0.16239253939888731, 0.1699078529771466, 0.18055826840981848, 0.17045742904728467, 0.16884387245814447, 0.1796956215285339, 0.16266937062126707, 0.12977017107643718, 0.15505400992946394, 0.12289784591244501, 0.17909040149821853, 0.1391048136891988, 0.11268855154583579, 0.16198767318681262, 0.15043750998018823, 0.11132708072674491, 0.16563094011628454, 0.12297393814528623, 0.12717013688056245, 0.1617116365943797, 0.18772167283528596, 0.18617146713306743, 0.19127156674407497, 0.18105718753145006, 0.18564439060230142, 0.17524528744583445, 0.1812374463380827, 0.1795052649239457, 0.18194888153758004, 0.18090148001051742, 0.07031956662189676, 0.07636412122457992, 0.07480407174911852, 0.06349818434050047, 0.06493509995009594, 0.07332121186878415, 0.09603351483775568, 0.058985226660219436, 0.0667484240785976]}, "mutation_prompt": null}
