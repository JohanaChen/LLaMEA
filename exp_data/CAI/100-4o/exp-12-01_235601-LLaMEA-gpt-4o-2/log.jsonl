{"id": "9513925a-005b-418f-900e-e297910b141b", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.global_best_position = self.population[0]\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_score = np.inf\n        self.f_evals = 0\n\n    def __call__(self, func):\n        while self.f_evals < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                score = func(self.population[i])\n                self.f_evals += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n            # Update velocities and positions using PSO\n            inertia_weight = 0.5 + np.random.rand() / 2.0\n            personal_acceleration = 1.5 * np.random.rand()\n            global_acceleration = 1.5 * np.random.rand()\n            for i in range(self.population_size):\n                self.velocities[i] = (\n                    inertia_weight * self.velocities[i] +\n                    personal_acceleration * np.random.rand() * \n                    (self.personal_best_positions[i] - self.population[i]) +\n                    global_acceleration * np.random.rand() * \n                    (self.global_best_position - self.population[i])\n                )\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], -5.0, 5.0)\n\n            # Apply mutation and crossover from DE\n            for i in range(self.population_size):\n                if np.random.rand() < 0.9:\n                    candidates = list(range(self.population_size))\n                    candidates.remove(i)\n                    a, b, c = np.random.choice(candidates, 3, replace=False)\n                    mutant = self.population[a] + 0.8 * (self.population[b] - self.population[c])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.copy(self.population[i])\n                    j_rand = np.random.randint(self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < 0.9 or j == j_rand:\n                            trial[j] = mutant[j]\n                    if func(trial) < func(self.population[i]):\n                        self.population[i] = trial\n\n        return self.global_best_position, self.global_best_score", "name": "HybridDEPSO", "description": "A hybrid evolutionary and swarm-based algorithm that combines Differential Evolution and Particle Swarm Optimization for enhanced exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.24093195927931485, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.5716058568004124, 0.6170132029146891, 0.4672204532212807, 0.5843499937975678, 0.7294778599204614, 0.4206082240941754, 0.4833994161993814, 0.6372818190986533, 0.40706032605618325, 0.24540457971052843, 0.16272369730502556, 0.011644671118508976, 0.19663134010161287, 0.039360763107231245, 0.17221829208310158, 0.25591391857777634, 0.21365041896490988, 0.01928652740206893, 0.08379037366573305, 0.0820665367150838, 0.08400292288387756, 0.08475152780395834, 0.11959986515875609, 0.07716391522874821, 0.10301364922169853, 0.10771694291279088, 0.07702729527237662, 0.07541002721749934, 0.0868045132520836, 0.05799294534094512, 0.08239933825289758, 0.09885352285492321, 0.05779829817334525, 0.07203484895273593, 0.08072050364803218, 0.07633129439652242, 0.9651900853018083, 0.9819292440592712, 0.974726525890273, 0.8641502502882252, 0.9660548020148636, 0.8616387682625141, 0.9625044434224916, 0.9810264911733066, 0.9809346002792257, 0.18863092722489216, 0.058598680534278524, 0.14819528596904274, 0.2002921517865477, 0.22643632074420783, 0.1306636446749455, 0.20145414332369804, 0.2619366938442349, 0.12082432656354558, 0.39089489997323235, 0.4745800429582959, 0.33455646611999634, 0.5340554964628457, 0.7533558751215725, 0.22163821352453783, 0.5891995716657554, 0.6714493023026018, 0.5548770278606195, 0.12105807053071493, 0.19614159516146312, 0.15888463155383092, 0.11697611073606662, 0.18730692803288407, 0.12212837307458158, 0.1505291186577442, 0.3950628624726398, 0.1679502617473021, 0.20789059353713923, 0.10259977603098358, 0.12121159792096114, 0.13661983243077935, 0.1509605787112832, 0.15134087577426014, 0.2310353223090078, 0.15694051334516912, 0.08769024301139694, 0.025785716445289708, 9.999999999998899e-05, 0.047454606907547214, 0.01397262495239393, 0.012595903544435183, 0.040426788689261195, 0.04268696079560663, 0.3137611363627695, 0.16453188819915154, 0.19458795832892561, 0.23446645353846685, 0.054685228651920825, 0.10704138889277981, 0.011881344456926457, 0.1031551151293052, 0.2747022451915906, 0.18581374856523147, 0.10514130613662998, 0.032154297536369225, 0.18669313562630097, 0.01118688396721268, 0.030540136422339437, 0.1840432400394988, 0.013162037828640338, 0.026848170398310556, 0.07392899223257787, 0.0019221325656726407, 0.15290837031598492, 0.20635214998120577, 0.10975615934341931, 0.08948209446192101, 0.005642143433222002, 0.09056303676652555, 0.16239864025264505, 0.17248055629652426, 0.06034657718946923, 0.3921548037176652, 0.4797263823033302, 0.445812591467573, 0.44388573927513186, 0.5572787918615683, 0.4286957164055025, 0.48045331278448977, 0.5313618574795425, 0.42998469798750816, 0.10862728913193165, 0.07517083374703581, 0.08694053881719666, 0.1002438334305421, 0.09796637276669318, 0.08519650887276253, 0.0768506625049129, 0.0760616915325063, 0.0797763363777334, 0.1984844923357234, 0.17639593215590943, 0.1843636593686646, 0.13535932489679003, 0.14312765218993884, 0.15434830736046912, 0.14628009965428046, 0.1432495749571353, 0.17752903043883195, 0.3294618545272707, 0.2969342230542771, 0.27150655268434554, 0.2923825286038457, 0.31473500822396394, 0.22076500873157123, 0.2884160265302843, 0.2982716155820745, 0.24447278616871349, 0.2013509694752148, 0.285235464218234, 0.216819533117942, 0.24090123444568667, 0.20752837101197763, 0.21576569791512046, 0.2314918174406394, 0.28418569123581916, 0.18033122531871015, 0.25023920971455416, 0.18251247302889073, 0.1898187442076824, 0.17141321242423013, 0.16148862004807485, 0.1761481567199149, 0.19009509207371844, 0.20335688126296514, 0.2094296573275235, 0.18746385432054014, 0.33791720415853255, 0.18911033938584765, 0.1706727323164674, 0.21210707854810718, 0.1798777578039653, 0.1859200551170196, 0.19932167878408769, 0.16175188874569213, 0.6699024380330432, 0.16603799918760997, 0.15186088936269226, 0.681265733163756, 0.1969473059671698, 0.8069413856227337, 0.14988621343026498, 0.16837871149970596, 0.32303721739624325, 0.7146776159281594, 0.15503650722815332, 0.08268743122229638, 0.19536193321085782, 0.4713669240026447, 0.34564897740045464, 0.20221860169994343, 0.20746428658227478, 0.5802884407146116, 0.18730918498674354, 0.17107218300380778, 0.19380941565066245, 0.19300108477799416, 0.1728101804444766, 0.18198106198022657, 0.17945140389306746, 0.19395951513294385, 0.16777095106631912, 0.07274649358835161, 0.07571413012002592, 0.08232759022136849, 0.06906099862296067, 0.07636575500479592, 0.06663359430255167, 0.07452800681082061, 0.08698146602526124, 0.06459488169545624]}, "mutation_prompt": null}
{"id": "64d068ff-45f2-4518-9ece-749fc21c1c77", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.global_best_position = self.population[0]\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_score = np.inf\n        self.f_evals = 0\n\n    def __call__(self, func):\n        while self.f_evals < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                score = func(self.population[i])\n                self.f_evals += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n            # Update velocities and positions using PSO\n            inertia_weight = 0.5 + np.random.rand() / 2.0\n            personal_acceleration = 1.5 * np.random.rand()\n            global_acceleration = 1.5 * np.random.rand()\n            for i in range(self.population_size):\n                self.velocities[i] = (\n                    inertia_weight * self.velocities[i] +\n                    personal_acceleration * np.random.rand() * \n                    (self.personal_best_positions[i] - self.population[i]) +\n                    global_acceleration * np.random.rand() * \n                    (self.global_best_position - self.population[i])\n                )\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], -5.0, 5.0)\n\n            # Apply mutation and crossover from DE\n            for i in range(self.population_size):\n                if np.random.rand() < 0.8:  # Reduced crossover probability for better balance\n                    candidates = list(range(self.population_size))\n                    candidates.remove(i)\n                    a, b, c = np.random.choice(candidates, 3, replace=False)\n                    mutant = self.population[a] + 0.8 * (self.population[b] - self.population[c])\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                    trial = np.copy(self.population[i])\n                    j_rand = np.random.randint(self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < 0.9 or j == j_rand:\n                            trial[j] = mutant[j]\n                    if func(trial) < func(self.population[i]):\n                        self.population[i] = trial\n\n        return self.global_best_position, self.global_best_score", "name": "HybridDEPSO", "description": "Improved balance between exploration and exploitation by adjusting crossover probability.", "configspace": "", "generation": 1, "fitness": 0.24257388414946307, "feedback": "", "error": "", "parent_id": "9513925a-005b-418f-900e-e297910b141b", "metadata": {"aucs": [0.5481429874614376, 0.6469401321919946, 0.5144894432587721, 0.48877577539976746, 0.5683363306421826, 0.49089451347816326, 0.18104371444306022, 0.5771194651163276, 0.6128466055691031, 0.12278619394589185, 0.0979273249829945, 0.27916893256952857, 9.999999999998899e-05, 0.04010889761146863, 0.03690061196244532, 0.18747428839133295, 0.3052793024616769, 9.999999999998899e-05, 0.08401673943642984, 0.09605398490790307, 0.08171138029117497, 0.09487823219740399, 0.08308060974741516, 0.10571929730115448, 0.10515045222530517, 0.08729815579609845, 0.08357109955420294, 0.06617055981966025, 0.08003631755840468, 0.09278389224626282, 0.07090078071167738, 0.08251571212362852, 0.07099225924559616, 0.06151448378050395, 0.07549193919753527, 0.0827151737015589, 0.9822929985888343, 0.983173845455171, 0.9738881189205548, 0.9336882033741559, 0.9652924685626411, 0.9542234496112547, 0.967877031028641, 0.9687733059922872, 0.9545380074216119, 0.1961373302413547, 0.17324072356493203, 0.21533387368298174, 0.17557100164753814, 0.17122114774165098, 0.1774629592209458, 0.0863732726434695, 0.2538931281404593, 0.2155618936584398, 0.2095824188884181, 0.7040213469875618, 0.28154745266297554, 0.7023773924652279, 0.18806368641933002, 0.18820176769813768, 0.4481608795788333, 0.4872108740104317, 0.5991953054234704, 0.16949326326719472, 0.21508621408359252, 0.2316846286075448, 0.12197254098946775, 0.2153497712092004, 0.18053903474436228, 0.3073399742321462, 0.29224412808962796, 0.200768890570441, 0.14845882673864363, 0.3725420605876484, 0.15846689053411778, 0.19955110667078912, 0.23268489861057007, 0.12129837293684509, 0.1691576671236258, 0.1271497775341892, 0.1850151397131028, 9.999999999998899e-05, 0.03378261096500301, 9.999999999998899e-05, 0.00036363702505004536, 0.18579442892917863, 0.1219051142001254, 0.053746452852313054, 0.1651684807935997, 0.018883947122388278, 0.13895966966411688, 0.08749131854115566, 0.3676244568634187, 0.14899495139184749, 0.14430758756177475, 0.14708335994308785, 0.1262936783119032, 0.33885985773940985, 0.10364441835177518, 0.023511602941054255, 0.12166241753327389, 0.10766361633552501, 0.02959168599581241, 0.08671598579651107, 0.04496383136206228, 0.09278859417063179, 0.1347040503355592, 0.03790669540917457, 0.19603672003553851, 0.22905820303722824, 0.14838685054774436, 0.14933015710835496, 0.23558779216961834, 0.19817279261576615, 0.19481622480215588, 0.2329245939997292, 0.07637011673953531, 0.36814522527951354, 0.5450313414538298, 0.5029860208042252, 0.4961866087451827, 0.478988215692556, 0.5286099010221956, 0.4172104199890999, 0.4652097211197588, 0.49268818860529806, 0.06247863586144853, 0.0935143753982236, 0.07844850789740998, 0.10057757905554787, 0.07059524863676692, 0.08482672515088363, 0.07673283614614301, 0.09595610750495032, 0.0969193467511763, 0.14454826995324566, 0.19028356138485703, 0.1358080194390292, 0.16406647182732015, 0.2122339694890616, 0.1245915296581388, 0.18487659858160166, 0.17473703152329068, 0.13587351189345787, 0.23763193081638423, 0.31715665456460107, 0.26522555942911585, 0.28689224728292206, 0.3240396860355158, 0.26223256812616114, 0.2857400190877265, 0.3351881159874639, 0.29176757149400434, 0.1647881693761628, 0.274689622144517, 0.21167222073276437, 0.26054005034612615, 0.1858980145564284, 0.18136436103095377, 0.19149178918941623, 0.2734655001098112, 0.23540372364763262, 0.17097056948736222, 0.17402436513600716, 0.1751611955822111, 0.21428122778864456, 0.1876862812004747, 0.2066558884091545, 0.17890901385865488, 0.1868855440947097, 0.16664300863980697, 0.19306399482277248, 0.18877943414911014, 0.17520231080938353, 0.17264170405060364, 0.20975880076696696, 0.17608011417074776, 0.17781572029253312, 0.18196960744225077, 0.17859187685796007, 0.5992444848997314, 0.1614372302490119, 0.15200184125176075, 0.7095706369452273, 0.19770787518451693, 0.641867836647954, 0.1525543108563343, 0.16804514076145027, 0.1715455562343614, 0.5573166065960309, 0.15469582146729022, 0.6740109240400175, 0.19899734931662105, 0.16744310032326448, 0.5545540020969213, 0.19782541479260685, 0.10339727542293453, 0.5423567528792931, 0.19239404127587145, 0.18059388468109483, 0.19494523117226992, 0.1901281005806137, 0.18778906246715033, 0.17546152940239712, 0.19088505923818488, 0.19228847663927173, 0.18590939736535783, 0.06591588186220654, 0.06779186312077656, 0.0711169436419481, 0.07675147034905916, 0.08229055030789334, 0.07139925892459376, 0.07058917441159096, 0.07731659385860568, 0.06334930624462776]}, "mutation_prompt": null}
