{"id": "3f42f58a-0281-4a3c-bec2-09702d393b3b", "solution": "import numpy as np\n\nclass DynamicMultiSwarmPSO:\n    def __init__(self, budget, dim, swarm_size=20, num_swarms=3):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.num_swarms = num_swarms\n        self.global_best_pos = np.random.uniform(-5.0, 5.0, dim)\n        self.global_best_val = np.inf\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n\n    def __call__(self, func):\n        # Initialize swarms\n        swarms = [self.initialize_swarm() for _ in range(self.num_swarms)]\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for swarm in swarms:\n                for particle in swarm:\n                    if evaluations >= self.budget:\n                        break\n                    # Update particle velocity\n                    inertia = self.inertia_weight * particle['velocity']\n                    cognitive_component = self.cognitive_coeff * np.random.rand(self.dim) * (particle['best_pos'] - particle['position'])\n                    social_component = self.social_coeff * np.random.rand(self.dim) * (self.global_best_pos - particle['position'])\n                    particle['velocity'] = inertia + cognitive_component + social_component\n                    \n                    # Update particle position\n                    particle['position'] += particle['velocity']\n                    particle['position'] = np.clip(particle['position'], -5.0, 5.0)\n                    \n                    # Evaluate particle\n                    particle_val = func(particle['position'])\n                    evaluations += 1\n                    \n                    # Update personal best\n                    if particle_val < particle['best_val']:\n                        particle['best_val'] = particle_val\n                        particle['best_pos'] = particle['position'].copy()\n                    \n                    # Update global best\n                    if particle_val < self.global_best_val:\n                        self.global_best_val = particle_val\n                        self.global_best_pos = particle['position'].copy()\n            \n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - 0.5 * (evaluations / self.budget)\n        \n        return self.global_best_pos, self.global_best_val\n\n    def initialize_swarm(self):\n        swarm = []\n        for _ in range(self.swarm_size):\n            position = np.random.uniform(-5.0, 5.0, self.dim)\n            velocity = np.random.uniform(-1.0, 1.0, self.dim)\n            best_pos = position.copy()\n            best_val = np.inf\n            swarm.append({'position': position, 'velocity': velocity, 'best_pos': best_pos, 'best_val': best_val})\n        return swarm", "name": "DynamicMultiSwarmPSO", "description": "A dynamic multi-swarm particle swarm optimization with adaptive inertia to explore and exploit the search space efficiently.", "configspace": "", "generation": 0, "fitness": 0.18870057818497668, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.4887852174793058, 0.5002070260330322, 0.5160772247517842, 0.5637272283675876, 0.18323865633124814, 0.5565996782278595, 0.5051060839681609, 0.4596619168979055, 0.5206013585820938, 0.044641548743089565, 9.999999999998899e-05, 9.999999999998899e-05, 0.033344732809592825, 9.999999999998899e-05, 0.23286116462045725, 0.09209097803614952, 0.010492475511535537, 0.19134630172014855, 0.09511568146258964, 0.10908515425617715, 0.1340908109081258, 0.12975958778937435, 0.06720037837931869, 0.06328228871984642, 0.09067987163916691, 0.10665825952130581, 0.09939655758455934, 0.11180077574296499, 0.07474548626147348, 0.09290089578842486, 0.10537850417402128, 0.08581486418398909, 0.08422569017682113, 0.08371761475480799, 0.0904664485581318, 0.10835712475581405, 0.9944731809341499, 0.9920738040827302, 0.992696506870304, 0.9924259220176923, 0.9915886605767378, 0.9971283503199839, 0.9913605373439258, 0.9930656908385554, 0.9938268969222384, 0.1666739407976333, 0.21099253852051192, 0.23398376086595596, 0.13581475806875076, 0.22287679646519143, 0.24912481626007843, 0.08666517747408142, 0.08744790446708939, 0.240805413499374, 0.17653600132586378, 0.35768388618844826, 0.20342637765239646, 0.16736484816252672, 0.15469734821855075, 0.17432826893968867, 0.12613906244320827, 0.38236776110451576, 0.12511659938069353, 0.13817765757784384, 0.1380299966175107, 0.1267580303504845, 0.0985799620333413, 0.09565717636087834, 0.07429702159125517, 0.13942365727794948, 0.1284758818785411, 0.11463589947748021, 0.11409748210570436, 0.09806020301960472, 0.1219232655341348, 0.11635593548974432, 9.999999999998899e-05, 0.10612251125736605, 0.11036035711606385, 0.10839362252976548, 0.09146409121384436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00037200630448774863, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002655257703797931, 0.04280522459234293, 0.015308266812235738, 0.04035063926409588, 0.0005482005640268239, 0.03436326674624557, 0.0071545879933399, 0.029658078938586407, 0.06432819521142319, 0.04732841227687934, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03283350273061114, 0.06471411332881183, 0.036723500215175786, 0.0491414049616109, 0.04039803730917757, 0.04817430663479538, 0.07411266724312282, 0.011892106525739465, 0.02586975251426815, 0.12157933637250662, 0.029753055816939766, 0.004053893891392324, 0.07116540570148644, 0.041744220535701926, 0.04343553871368344, 0.39986080491430787, 0.37700077012726096, 0.38586203976359157, 0.4232365979349044, 0.29161031289933736, 0.3995424537734581, 0.367084337532946, 0.39484784635516823, 0.40210096358148106, 0.08306838072661726, 0.07194663310570981, 0.0564165907824552, 0.10495580712125974, 0.04860512976113729, 0.10280102871304608, 0.10997156999682633, 0.07896155858772558, 0.07932419324190376, 0.15619342203310793, 0.1526886221768634, 0.13560747642119753, 0.1387893710631095, 0.14670362551612248, 0.15071195652564218, 0.1996039376697667, 0.1734654473629218, 0.2815738796914138, 0.2852685768733296, 0.2771196619208226, 0.2972871733372062, 0.24850643701949615, 0.2854994831011196, 0.28048214246450975, 0.2718637094224877, 0.3068173012648556, 0.2863359350706042, 0.14717743996510835, 0.15721879770491742, 0.1590767833735195, 0.16407472435234927, 0.16859483881552229, 0.20206244070598922, 0.1649478040493494, 0.13390552313425852, 0.12544964569909445, 0.2100460879163396, 0.21845663013260663, 0.17290869960591104, 0.18224777431690864, 0.18285388540647185, 0.19539045433487745, 0.21069644787056607, 0.17886611499181615, 0.20875825607785814, 0.24408700070724176, 0.206079146424068, 0.1966052013500149, 0.19903908497440204, 0.1769785548644881, 0.17656844588433818, 0.19165920948343695, 0.1810924695446815, 0.17919110006758654, 0.17002062923183403, 0.1282540940648107, 0.14452998056950506, 0.17575755478428057, 0.16099311461671628, 0.5576316472089518, 0.13476788759597802, 0.19951690784780607, 0.1784120407496963, 0.15791875975014313, 0.1622454933401778, 0.0709693408562373, 0.2110744631242676, 0.07878993920379873, 0.19233772563338214, 0.16039847643665306, 0.11819726916750894, 0.19460048557325127, 0.19194188676235358, 0.1840768187795545, 0.19287449512884325, 0.2079814235934826, 0.18976305885294154, 0.18719134291847805, 0.1850038481727485, 0.1916757237377027, 0.19328081907925942, 0.08673939532207187, 0.08093504141613228, 0.07580803642378053, 0.07495160569664627, 0.07057857833790071, 0.07395616833386942, 0.0751360989496146, 0.06922232628101643, 0.07122654399439887]}, "mutation_prompt": null}
{"id": "34001b32-fc29-44fe-b14d-e487d8492f7d", "solution": "import numpy as np\n\nclass DynamicMultiSwarmPSO:\n    def __init__(self, budget, dim, swarm_size=20, num_swarms=3):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.num_swarms = num_swarms\n        self.global_best_pos = np.random.uniform(-5.0, 5.0, dim)\n        self.global_best_val = np.inf\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.mutation_rate = 0.1  # Added mutation rate\n\n    def __call__(self, func):\n        # Initialize swarms\n        swarms = [self.initialize_swarm() for _ in range(self.num_swarms)]\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for swarm in swarms:\n                for particle in swarm:\n                    if evaluations >= self.budget:\n                        break\n                    # Update particle velocity\n                    inertia = self.inertia_weight * particle['velocity']\n                    cognitive_component = self.cognitive_coeff * np.random.rand(self.dim) * (particle['best_pos'] - particle['position'])\n                    social_component = self.social_coeff * np.random.rand(self.dim) * (self.global_best_pos - particle['position'])\n                    particle['velocity'] = inertia + cognitive_component + social_component\n                    \n                    # Update particle position\n                    particle['position'] += particle['velocity']\n                    particle['position'] = np.clip(particle['position'], -5.0, 5.0)\n                    \n                    # Apply mutation operation\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_vector = np.random.uniform(-1.0, 1.0, self.dim)\n                        particle['position'] += mutation_vector\n                        particle['position'] = np.clip(particle['position'], -5.0, 5.0)\n\n                    # Evaluate particle\n                    particle_val = func(particle['position'])\n                    evaluations += 1\n                    \n                    # Update personal best\n                    if particle_val < particle['best_val']:\n                        particle['best_val'] = particle_val\n                        particle['best_pos'] = particle['position'].copy()\n                    \n                    # Update global best\n                    if particle_val < self.global_best_val:\n                        self.global_best_val = particle_val\n                        self.global_best_pos = particle['position'].copy()\n            \n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - 0.5 * (evaluations / self.budget)\n        \n        return self.global_best_pos, self.global_best_val\n\n    def initialize_swarm(self):\n        swarm = []\n        for _ in range(self.swarm_size):\n            position = np.random.uniform(-5.0, 5.0, self.dim)\n            velocity = np.random.uniform(-1.0, 1.0, self.dim)\n            best_pos = position.copy()\n            best_val = np.inf\n            swarm.append({'position': position, 'velocity': velocity, 'best_pos': best_pos, 'best_val': best_val})\n        return swarm", "name": "DynamicMultiSwarmPSO", "description": "An enhanced dynamic multi-swarm PSO with an adaptive mutation operator for improved exploration.", "configspace": "", "generation": 1, "fitness": 0.17991202965723774, "feedback": "", "error": "", "parent_id": "3f42f58a-0281-4a3c-bec2-09702d393b3b", "metadata": {"aucs": [0.3574964766557388, 0.36849154273847096, 0.37876761596308495, 0.42803776158718276, 0.420346524875443, 0.4025802621455521, 0.4181518031308469, 0.3741183284807921, 0.3782500256450213, 0.03155837697000008, 0.023170516967632504, 0.016171470448158476, 0.021167125372824502, 0.018668040185808477, 0.010646448902591144, 0.034865080305809704, 0.018391807996208764, 0.01949132741823778, 0.08265729326655746, 0.08847064518094339, 0.10115301666470711, 0.08379481937681044, 0.07921306518411098, 0.07977407911739687, 0.09696258075118636, 0.07402046647155747, 0.09733741401604634, 0.06987392774301315, 0.07701408744742644, 0.08851960287242944, 0.084078201464033, 0.07157217216833578, 0.0732352941195108, 0.07216166869634721, 0.07935847672424334, 0.062280284722421086, 0.9939571177900426, 0.9920301244819011, 0.9926621475878875, 0.9940099651558565, 0.9835806277102358, 0.9932714733476662, 0.9930592085922935, 0.9941229099406547, 0.9944313517460323, 0.23352210745092283, 0.1744571746793061, 0.18547841012181043, 0.21115636978270302, 0.1730040262276742, 0.19822871361005556, 0.20285558948963311, 0.1637565781057959, 0.1959965176464893, 0.17678782165701779, 0.23986810328772779, 0.19555536214812863, 0.15418323261765143, 0.20334379308214734, 0.19732578568394077, 0.19586265462330898, 0.1647169862419523, 0.1842696758523159, 0.08584919499293664, 0.09828102778040926, 0.08838346721107881, 0.10922779034152064, 0.08811179697446714, 0.0899899482873665, 0.0960371507095158, 0.1120516666073772, 0.07524894849741504, 0.13122573166369622, 0.12056076850177855, 0.10250219022287455, 0.14681950294150903, 0.06517646493833984, 0.09595510127745166, 0.06575741042196492, 0.11034463660650473, 0.12535123204262744, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051113663958804345, 0.036063150252615195, 0.0687544769287386, 0.02877805355807872, 0.023215646888539387, 0.013877087862189774, 0.014531943147376158, 0.06381370258193764, 0.055754740838641736, 9.999999999998899e-05, 0.01118401135262137, 0.008549613523921251, 0.004945867725679953, 0.006318673387959106, 0.0054219232315249055, 0.008127132386310798, 0.012553244817185116, 0.002974922152748305, 0.03465364947150118, 0.02997616155948457, 0.026830330692676707, 0.06351494811860503, 0.05741208649972651, 0.06152147615546566, 0.07658350864402241, 0.04421349206861158, 0.04986248859487552, 0.3510131652066495, 0.3351645564317658, 0.33426106846649595, 0.3645101372559506, 0.3423789576964483, 0.3380181381804933, 0.3463877163695316, 0.34985109393263825, 0.3407424543397639, 0.0719370026433106, 0.09136907772753222, 0.060711069478831425, 0.09063160869067766, 0.08977740004380086, 0.08486641056323463, 0.0604867003071895, 0.08956257808860169, 0.08437313579931383, 0.2439315639700822, 0.18861060009491293, 0.1550821652221106, 0.18734854570184845, 0.19572156355787118, 0.18727945256719558, 0.1928363025157781, 0.19648339213522914, 0.1807168340216727, 0.15142200456322663, 0.2120005952354812, 0.21100770613311903, 0.26369055042645095, 0.2535938810193975, 0.2389751237434582, 0.22672671893703567, 0.2207764405310746, 0.21591528292282758, 0.10326315957311039, 0.170895856765522, 0.1583017149248166, 0.17455000661371411, 0.1677746872558602, 0.1614466196224068, 0.09015219790904505, 0.14452541839436506, 0.14042256045650225, 0.16984733150581854, 0.14882318217761292, 0.21903567302988014, 0.18544174068645036, 0.182088282082714, 0.1754121423615328, 0.15200976020239754, 0.18832177620509583, 0.2144231157034111, 0.2067573291097512, 0.19580124842733826, 0.20156729851765653, 0.16090951036278134, 0.1822347471135929, 0.21927492258535752, 0.2226736632055164, 0.17663923592217634, 0.1800783002956441, 0.17227164806947182, 0.39556310863287714, 0.44407135090680494, 0.18287725408898858, 0.19296074215822623, 0.4406435934536733, 0.18128934803471575, 0.14260199590153355, 0.18152480482964295, 0.21733391722067952, 0.11012218027883625, 0.23367110314499262, 0.2221193258518429, 0.1893232677130533, 0.2915002335949206, 0.15416539310381105, 0.1519575764654728, 0.14607043134539222, 0.19108460465727561, 0.18871054296387568, 0.18477616237848216, 0.2014624789761369, 0.18530016427077323, 0.1911507001378876, 0.18765828723840072, 0.18060482020233026, 0.20396485749055304, 0.07036875673531018, 0.06872021503058456, 0.068176845050404, 0.073164403120353, 0.06634709461678845, 0.07696461990212689, 0.07890185339761269, 0.06183597638244043, 0.059144786229696766]}, "mutation_prompt": null}
