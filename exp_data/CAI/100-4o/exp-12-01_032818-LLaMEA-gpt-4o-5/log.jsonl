{"id": "f2857dc5-6525-4515-99c0-ab5dc2e52b17", "solution": "import numpy as np\n\nclass CMAESWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 4 + int(3 * np.log(dim))\n        self.sigma = 0.3  # Initial step-size\n        self.mean = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n        self.cov = np.eye(dim)\n        self.evaluations = 0\n\n    def _clamp(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        best_solution = None\n        best_value = float('inf')\n\n        while self.evaluations < self.budget:\n            # Generate offspring from current mean and covariance\n            offspring = np.random.multivariate_normal(self.mean, self.cov, self.population_size)\n            offspring = np.array([self._clamp(individual) for individual in offspring])\n            \n            # Evaluate offspring\n            values = np.array([func(ind) for ind in offspring])\n            self.evaluations += self.population_size\n\n            # Select the best individual\n            indices = np.argsort(values)\n            offspring = offspring[indices]\n            values = values[indices]\n\n            # Update best found solution\n            if values[0] < best_value:\n                best_value = values[0]\n                best_solution = offspring[0]\n\n            # Adapt mean and covariance matrix\n            self.mean = np.mean(offspring[:self.population_size//2], axis=0)\n            centered_offspring = offspring[:self.population_size//2] - self.mean\n            self.cov = (1/self.population_size) * np.dot(centered_offspring.T, centered_offspring)\n\n            # Perform a local search mutation on the best found solution\n            for _ in range(3):  # Try 3 local mutations\n                if self.evaluations >= self.budget:\n                    break\n                local_step = np.random.normal(0, self.sigma / 2, self.dim)\n                local_candidate = self._clamp(best_solution + local_step)\n                local_value = func(local_candidate)\n                self.evaluations += 1\n                if local_value < best_value:\n                    best_value = local_value\n                    best_solution = local_candidate\n\n        return best_solution", "name": "CMAESWithLocalSearch", "description": "Adaptive Covariance Matrix Evolution Strategy (CMA-ES) with local search mutation for enhanced exploration-exploitation balance.", "configspace": "", "generation": 0, "fitness": 0.16175212995018806, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.4631366887180478, 0.41825909878028633, 0.42805867214840687, 0.4203487176404006, 0.42550652765185315, 0.43328769750236007, 0.44264521930475065, 0.4278242610067531, 0.4358591707958309, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002401623463318403, 0.0013897614313671536, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07354580411681888, 0.01874623819402821, 0.0043491189056518165, 0.01208719811578396, 0.01749736042103489, 0.03029350572889511, 0.05549778341519973, 0.010497164638550549, 0.03248336713861788, 0.0854447151020058, 0.004814441706730954, 0.004045357019160978, 0.04267741159449123, 9.999999999998899e-05, 0.0196882516559288, 0.07642575114108507, 0.015909418324494995, 0.017935295009824048, 0.8724875329530847, 0.8424445931456024, 0.760950801961214, 0.856786395356968, 0.6226604736705832, 0.6925261393404254, 0.8282475567768406, 0.8085251457773344, 0.9269256361678876, 0.2949859920100978, 0.27712326010284993, 0.27623928302637846, 0.29415499996757344, 0.28706985054605594, 0.2704237271133987, 0.29534409538662576, 0.2610921724980292, 0.27249835581000337, 0.13504006615871877, 0.08287815835171519, 0.038862884352383276, 0.19602728874998188, 0.1445644151326484, 0.18357977547002646, 0.06776060651641636, 0.033345926483495325, 0.0950171504054651, 0.14539215961109642, 0.19773923306683439, 0.13518388952420501, 0.1720797627089825, 0.15709726088271891, 9.999999999998899e-05, 0.1788277763509808, 0.1505153217970142, 0.15175112578186323, 0.16737368048494372, 0.12644071401989043, 0.12028944044968193, 0.17153908920081218, 0.20059822016997553, 0.12657578430948357, 0.1612894438839665, 0.20809072803665296, 0.16956691387000955, 9.999999999998899e-05, 9.999999999998899e-05, 0.016794427413721502, 0.02904591939233092, 0.004422272174821051, 9.999999999998899e-05, 0.012842243754277116, 9.999999999998899e-05, 0.05493117004045833, 0.08549257708075308, 0.05951184112777541, 0.12613968068620685, 0.07193723328333923, 0.01431327016011219, 0.02511423715924721, 0.15947191570393315, 0.023452702882998944, 0.018683611965459535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06238950039052249, 0.07274598353244288, 0.06494023795571957, 0.08511506858706219, 0.07552701929427863, 0.04234648457252732, 0.09462173606701674, 0.07059383197576741, 0.07037087571620193, 0.41401484738915806, 0.3840314601924544, 0.4020173233056338, 0.38579341886786966, 0.4095299619545275, 0.39544082121421065, 0.3943865272534697, 0.3941308524300856, 0.4036154316580204, 0.024339243664090793, 0.0016419830456759765, 0.026552561744616288, 9.999999999998899e-05, 0.052767608920124776, 0.04812919946664895, 0.024403684882586263, 0.03522381681924325, 0.025371907307164987, 0.1756673368340842, 0.1596767833820233, 0.24524708359236913, 0.12768425184868648, 0.17920331230795805, 0.16387678875763556, 0.15176626022436157, 0.17368790918136945, 0.0969652816481128, 0.12257168161183907, 0.10657689071685361, 0.10851311345077952, 0.1733736989602931, 0.11088675865803654, 0.12558546936375736, 0.15115141517022912, 0.0957669406680619, 0.09683130034159881, 0.06698251497591556, 0.03058609218529096, 0.038040706800345436, 0.14671830906856942, 0.12966366193632128, 0.08984704695043388, 0.1286611316346583, 0.034710309220802094, 0.02812528736816744, 0.18900883984950156, 0.12495076926107507, 0.17348808125280335, 0.19205366035288185, 0.13361954802378062, 0.14419486337215093, 0.2485484102365555, 0.10685881474963332, 0.13795524978825613, 0.18775390722952057, 0.1851923397818659, 0.17660018023010693, 0.17989643587492687, 0.2029832160426035, 0.18984491290755534, 0.18604335632406832, 0.16892180752802, 0.1827636856648962, 0.12364146780483354, 0.13736430126740629, 0.07119504877439087, 0.17326819720394793, 0.11145640579267291, 0.061903318099989835, 0.10860135611369837, 0.11515988114426179, 0.09544285535049635, 0.5917605607191612, 0.11313752943942379, 0.0820964258321144, 0.15372290265539812, 0.20603489266750763, 0.5738217055461915, 0.44570230722916016, 0.05883838996274082, 0.3597105092282401, 0.1969511143424677, 0.18605209266995082, 0.17791911344921152, 0.16703188091245535, 0.18592794435395632, 0.17119864871846624, 0.18855655108755853, 0.1690217737931753, 0.1693756066794625, 0.051436929952708654, 0.030313818626622524, 0.03064594916617347, 0.044224158878087505, 0.011151586562143323, 0.028318928175080194, 0.051557112699838425, 0.020821090085220595, 0.06515082095948621]}, "mutation_prompt": null}
{"id": "5f61605c-5809-41eb-85c9-d83baeb34234", "solution": "import numpy as np\n\nclass CMAESWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 4 + int(3 * np.log(dim))\n        self.sigma = 0.3  # Initial step-size\n        self.mean = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n        self.cov = np.eye(dim)\n        self.evaluations = 0\n\n    def _clamp(self, x):\n        return np.clip(x, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        best_solution = None\n        best_value = float('inf')\n\n        while self.evaluations < self.budget:\n            # Generate offspring from current mean and covariance\n            offspring = np.random.multivariate_normal(self.mean, self.cov, self.population_size)\n            offspring = np.array([self._clamp(individual) for individual in offspring])\n            \n            # Evaluate offspring\n            values = np.array([func(ind) for ind in offspring])\n            self.evaluations += self.population_size\n\n            # Select the best individual\n            indices = np.argsort(values)\n            offspring = offspring[indices]\n            values = values[indices]\n\n            # Update best found solution\n            if values[0] < best_value:\n                best_value = values[0]\n                best_solution = offspring[0]\n\n            # Adapt mean and covariance matrix\n            self.mean = np.mean(offspring[:self.population_size//2], axis=0)\n            centered_offspring = offspring[:self.population_size//2] - self.mean\n            self.cov = (1/self.population_size) * np.dot(centered_offspring.T, centered_offspring)\n\n            # Perform a local search mutation on the best found solution\n            for _ in range(3):  # Try 3 local mutations\n                if self.evaluations >= self.budget:\n                    break\n                local_step = np.random.normal(0, self.sigma / 2, self.dim)\n                local_candidate = self._clamp(best_solution + local_step)\n                local_value = func(local_candidate)\n                self.evaluations += 1\n                if local_value < best_value:\n                    best_value = local_value\n                    best_solution = local_candidate\n            \n            # Dynamic population adjustment\n            self.population_size = 4 + int(3 * np.log(self.dim)) + (self.budget - self.evaluations) // (10 * self.dim)\n\n        return best_solution", "name": "CMAESWithLocalSearch", "description": "Enhancing CMA-ES with a dynamic population strategy that adapts based on optimization progress.", "configspace": "", "generation": 1, "fitness": 0.0805562046782857, "feedback": "", "error": "", "parent_id": "f2857dc5-6525-4515-99c0-ab5dc2e52b17", "metadata": {"aucs": [0.2854897387280575, 0.2305558473703706, 0.27787292232232685, 0.1868523104349179, 0.19860780888358687, 0.2881042407059492, 0.2067363707001184, 0.2871758083664372, 0.25952972265316243, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06309846405820374, 9.999999999998899e-05, 9.999999999998899e-05, 0.013708847925551493, 0.0010887483843311507, 0.002579344993545285, 0.029316181816583242, 9.999999999998899e-05, 0.0062735820764584505, 0.06359748946632338, 9.999999999998899e-05, 9.999999999998899e-05, 0.01724949814999055, 9.999999999998899e-05, 0.0004886679845917952, 0.016247199673316226, 9.999999999998899e-05, 9.999999999998899e-05, 0.09022508368915749, 0.04510803911287875, 0.047146238459608636, 0.10094807014897145, 0.06242721089567527, 0.06321656496237515, 0.0540822935953047, 0.07508931843787559, 0.17810958477706373, 0.0981514383348393, 0.03600750761266425, 0.055552226252032044, 0.12345472143795055, 0.15331171712019098, 0.06304898365207556, 0.05945021735558653, 0.024727920926301494, 0.06303089739312362, 0.12612114309233113, 0.07527084377130233, 0.01807422105438783, 0.2101647666988583, 9.999999999998899e-05, 0.004082735831872353, 0.043263635295495595, 0.005866581307285346, 0.018073522300566913, 0.08367984332302547, 0.05339546756803559, 0.03179374612983776, 0.06548680613549662, 0.06291319930584449, 9.999999999998899e-05, 0.06936252321614844, 0.04911179282889866, 0.09402940915618352, 0.10796489349812577, 0.07202047048784499, 0.06603666503367445, 0.10655595254297734, 0.0900215464020776, 0.07396801544899279, 0.11460994483341314, 0.06309145941567129, 0.08528063348883985, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04342397288809208, 0.04504763165111669, 0.07878927402275748, 0.06250519484062789, 0.0010352199100072124, 0.020469495217892986, 0.14154252634859643, 0.02395281666691429, 0.007621196201028746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007417644700433601, 0.020575084898761475, 0.03285310460373603, 0.029257503055385548, 0.03314687139799133, 0.018316852548242224, 0.02433388592115937, 0.00783916717435118, 0.022212545477214962, 0.219776214142958, 0.1820906394801527, 0.2796070382617175, 0.23623729879142286, 0.16170120010644773, 0.18706399325728285, 0.2571599106284851, 0.24225291655015002, 0.2529227032354143, 0.0017348603407039143, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05681534110896136, 0.0011745175501201022, 0.013695887282477948, 0.033161572522553806, 0.11353112938824761, 0.10146925134056273, 0.15844398614451893, 0.10175407095238953, 0.15396251319319743, 0.12264849365938213, 0.09573779355229617, 0.14625216425444565, 0.14811832319639728, 0.12163594893810226, 0.10164981941402307, 0.10165616727800719, 0.16866112432171154, 0.08587637685858096, 0.11592598189394032, 0.14942078344212173, 0.08446802616305071, 0.09537288082383055, 0.057285685118694474, 0.04333646705900773, 0.03643870853646636, 0.13565630998833678, 0.014749965441253843, 0.07662638261239096, 0.0841556778894672, 0.025736413578528627, 0.02998172252078002, 0.18867233433695751, 0.07606761438112952, 0.1294596590033794, 0.17828491865477158, 0.09191505260001576, 0.10860523245709741, 0.20041774897435016, 0.09378119504509708, 0.12598876983446594, 0.17256911540801267, 0.10101868564785477, 0.11213448238246926, 0.13851067196654276, 0.1303866966431484, 0.131821573692819, 0.17162823129537375, 0.07234155217045368, 0.10036351847920688, 0.12079384659619863, 0.13079619531192344, 0.0805684359164277, 0.16888905989827163, 0.08617314465117709, 0.058640577296690255, 0.10320770347760366, 0.11802278071842442, 0.12923628392430186, 0.31529642138934055, 0.09956481139950701, 0.061907660173490364, 0.10450765825805797, 0.1182421665345913, 0.23664812688928727, 0.037326912692802194, 0.05120827745520384, 0.10978161041765, 0.16983431698604057, 0.19387618035406673, 0.15740211101797252, 0.16947889840120967, 0.19040363520474202, 0.18011436167088613, 0.176542932549014, 0.1831237181172859, 0.18610877244035118, 0.03512637994058099, 0.023917837402906872, 0.039947864230873154, 0.04749004844903193, 0.004688552239617061, 0.017987392641933164, 0.06384244941209549, 0.01787601472874989, 0.04931312338068239]}, "mutation_prompt": null}
