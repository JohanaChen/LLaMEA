{"id": "0710bc04-664f-4daf-9adc-662ec17190e4", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.num_particles, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.array([float('inf')] * self.num_particles)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.num_particles):\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i].copy()\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i].copy()\n\n                if self.evaluations >= self.budget:\n                    break\n\n            # Quantum-inspired superposition principle for dynamic velocity update\n            w = 0.5 + (np.random.rand() / 2)  # inertia weight\n            c1 = 2.0  # cognitive component\n            c2 = 2.0  # social component\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = c1 * r1 * (self.personal_best_positions[i] - self.particles[i])\n                social_velocity = c2 * r2 * (self.global_best_position - self.particles[i])\n                self.velocities[i] = w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Update particle position with superposition principle\n                self.particles[i] += self.velocities[i]\n                self.particles[i] = np.clip(self.particles[i], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumInspiredPSO", "description": "Quantum-inspired Particle Swarm Optimization using superposition principles for diverse exploration and dynamic exploitation balance.", "configspace": "", "generation": 0, "fitness": 0.21437071868934635, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.566463959677077, 0.5825700979502633, 0.5380576728906302, 0.6107696242877076, 0.189157526086835, 0.6970701324706448, 0.565827386880583, 0.49778790725050037, 0.5847249375335546, 0.2714594584340594, 0.03677425797163214, 9.999999999998899e-05, 0.2551738597512758, 0.03971342698197311, 0.20427506283853136, 0.24374453726288514, 0.034904908552535585, 0.21253536370196258, 0.13077248170274747, 0.10957206907556205, 0.10513706508457432, 0.10376638247069059, 0.0705939445617274, 0.12870342086830533, 0.13346829462110832, 0.11596983064209077, 0.10946171197424304, 0.07430514258816823, 0.09890237274932046, 0.09002279462428886, 0.09688070087246992, 0.12336602826851273, 0.09308959876041167, 0.11778626873636544, 0.1107535243345994, 0.09415143990523289, 0.991759444414628, 0.9944525600820544, 0.9933480011151252, 0.9862956236071314, 0.9890993593575614, 0.9838071943343599, 0.9926112709827272, 0.9905557311854462, 0.9890560841885869, 0.24020226810720247, 0.055250073202170125, 0.1132534803464228, 0.1801157352768521, 0.1440766942960645, 0.1482193702780099, 0.08321850022383992, 0.0891849312687697, 0.08525702686948444, 0.2217360428418833, 0.26714151974543343, 0.18175918284913006, 0.27966936137170595, 0.1914311581564888, 0.20244291497707712, 0.12566619221275055, 0.12595833081283325, 0.23217715030063513, 0.22807674351988438, 0.15231795962597228, 0.1258294263338181, 0.09486330179689995, 0.14902870808439417, 0.13428734966166378, 0.14587049463404655, 0.1101550524723407, 0.15069866647638297, 0.19619359267398018, 0.010074016233961425, 0.14103660655640593, 0.09062824326460994, 0.14094233895520503, 0.13120302052408328, 0.11262216716080475, 0.05079042833913683, 0.11910491125372313, 0.001339534514959051, 9.999999999998899e-05, 0.04515369683424775, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12012882090867028, 0.042675069765079066, 0.07225540146161968, 0.05957964123900039, 0.010767165232650422, 0.07327056990864, 0.08835345546472906, 0.07129721278858792, 0.03597561653619452, 0.039346021065502335, 0.015768393180107698, 0.04246631791714972, 0.05543969691228723, 0.04175340530062899, 0.032878240971362716, 0.05985814722341731, 0.06404059254963412, 0.04313294042307336, 0.040953822393376305, 0.10479919499425938, 0.03806188694074586, 0.13084510301715924, 0.08686143680245118, 0.03267230779313102, 0.15908372380911184, 0.0744955653490289, 0.07694186252648794, 0.5219189280286874, 0.4497711747336097, 0.4671255026806489, 0.20876473616463342, 0.4119166517081745, 0.4229237556867159, 0.4322619718834547, 0.41064341108678315, 0.4263337310066997, 0.06701505597548563, 0.07120797347400509, 0.062048311550177426, 0.1033827176751071, 0.09684528647351742, 0.11139035164820665, 0.09681851201325464, 0.09971014136967404, 0.10932157264476117, 0.1650227885055452, 0.37026862731717325, 0.21689057567176406, 0.157424537429396, 0.25807941537580403, 0.1491730253130612, 0.18931906269287302, 0.21908483214419527, 0.15327289665481325, 0.22124984730210484, 0.21806611194711045, 0.2626898331916283, 0.20209064129333787, 0.2023510495911307, 0.2554759161828901, 0.2544706802336666, 0.31848929940162396, 0.27986479330958214, 0.21547767406407414, 0.18773548784623784, 0.21245088843847093, 0.2305124766358565, 0.1549097105984627, 0.18426661954042256, 0.1709698133006865, 0.21986504950841135, 0.13456805510196335, 0.19397606308163617, 0.14813375737793955, 0.1754033354592457, 0.20160793478906003, 0.21092252917799337, 0.17236193490581353, 0.17231259553418699, 0.19194689570967183, 0.2126845273276199, 0.22800987616176982, 0.18084297532008553, 0.31490802612732527, 0.20783665023526576, 0.2188628493881063, 0.2091868719072998, 0.19134226935348764, 0.2208975271824215, 0.1846926079817668, 0.6973630418143462, 0.16197149780527276, 0.15243684768735255, 0.6078603635271234, 0.200059361935517, 0.7139385463918579, 0.18056986054638946, 0.16903535872370323, 0.7415517563799248, 0.43043871584178317, 0.15652354346008301, 0.22311782901083255, 0.3402486817258238, 0.2142398369930132, 0.20962198595244463, 0.1670990995351871, 0.1974947882554713, 0.29133665239907736, 0.19106113497524368, 0.22826825804392825, 0.20193885200808692, 0.2113841151005621, 0.210895559747317, 0.19216812125444116, 0.18327970705610452, 0.17734234078817568, 0.20894148512768718, 0.072653022685498, 0.0636147226206345, 0.07483773629886348, 0.08206119427796998, 0.07328382020721658, 0.06532063400842925, 0.07374784115725419, 0.09167009453935626, 0.0771538414422055]}, "mutation_prompt": null}
{"id": "0f6543e1-8a18-4183-ab4b-461903f76054", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.num_particles, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.array([float('inf')] * self.num_particles)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.num_particles):\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i].copy()\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i].copy()\n\n                if self.evaluations >= self.budget:\n                    break\n\n            # Quantum-inspired superposition principle for dynamic velocity update\n            w = 0.5 + (np.random.rand() / 2)  # inertia weight\n            c1 = 2.0  # cognitive component\n            c2 = 2.0  # social component\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = c1 * r1 * (self.personal_best_positions[i] - self.particles[i])\n                social_velocity = c2 * r2 * (self.global_best_position - self.particles[i])\n                self.velocities[i] = w * self.velocities[i] + cognitive_velocity + social_velocity\n\n                # Update particle position with superposition principle\n                self.particles[i] += self.velocities[i]\n                self.particles[i] = np.clip(self.particles[i], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumInspiredPSO", "description": "Quantum-inspired Particle Swarm Optimization using superposition principles for diverse exploration and dynamic exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0710bc04-664f-4daf-9adc-662ec17190e4", "metadata": {"aucs": [0.566463959677077, 0.5825700979502633, 0.5380576728906302, 0.6107696242877076, 0.189157526086835, 0.6970701324706448, 0.565827386880583, 0.49778790725050037, 0.5847249375335546, 0.2714594584340594, 0.03677425797163214, 9.999999999998899e-05, 0.2551738597512758, 0.03971342698197311, 0.20427506283853136, 0.24374453726288514, 0.034904908552535585, 0.21253536370196258, 0.13077248170274747, 0.10957206907556205, 0.10513706508457432, 0.10376638247069059, 0.0705939445617274, 0.12870342086830533, 0.13346829462110832, 0.11596983064209077, 0.10946171197424304, 0.07430514258816823, 0.09890237274932046, 0.09002279462428886, 0.09688070087246992, 0.12336602826851273, 0.09308959876041167, 0.11778626873636544, 0.1107535243345994, 0.09415143990523289, 0.991759444414628, 0.9944525600820544, 0.9933480011151252, 0.9862956236071314, 0.9890993593575614, 0.9838071943343599, 0.9926112709827272, 0.9905557311854462, 0.9890560841885869, 0.24020226810720247, 0.055250073202170125, 0.1132534803464228, 0.1801157352768521, 0.1440766942960645, 0.1482193702780099, 0.08321850022383992, 0.0891849312687697, 0.08525702686948444, 0.2217360428418833, 0.26714151974543343, 0.18175918284913006, 0.27966936137170595, 0.1914311581564888, 0.20244291497707712, 0.12566619221275055, 0.12595833081283325, 0.23217715030063513, 0.22807674351988438, 0.15231795962597228, 0.1258294263338181, 0.09486330179689995, 0.14902870808439417, 0.13428734966166378, 0.14587049463404655, 0.1101550524723407, 0.15069866647638297, 0.19619359267398018, 0.010074016233961425, 0.14103660655640593, 0.09062824326460994, 0.14094233895520503, 0.13120302052408328, 0.11262216716080475, 0.05079042833913683, 0.11910491125372313, 0.001339534514959051, 9.999999999998899e-05, 0.04515369683424775, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12012882090867028, 0.042675069765079066, 0.07225540146161968, 0.05957964123900039, 0.010767165232650422, 0.07327056990864, 0.08835345546472906, 0.07129721278858792, 0.03597561653619452, 0.039346021065502335, 0.015768393180107698, 0.04246631791714972, 0.05543969691228723, 0.04175340530062899, 0.032878240971362716, 0.05985814722341731, 0.06404059254963412, 0.04313294042307336, 0.040953822393376305, 0.10479919499425938, 0.03806188694074586, 0.13084510301715924, 0.08686143680245118, 0.03267230779313102, 0.15908372380911184, 0.0744955653490289, 0.07694186252648794, 0.5219189280286874, 0.4497711747336097, 0.4671255026806489, 0.20876473616463342, 0.4119166517081745, 0.4229237556867159, 0.4322619718834547, 0.41064341108678315, 0.4263337310066997, 0.06701505597548563, 0.07120797347400509, 0.062048311550177426, 0.1033827176751071, 0.09684528647351742, 0.11139035164820665, 0.09681851201325464, 0.09971014136967404, 0.10932157264476117, 0.1650227885055452, 0.37026862731717325, 0.21689057567176406, 0.157424537429396, 0.25807941537580403, 0.1491730253130612, 0.18931906269287302, 0.21908483214419527, 0.15327289665481325, 0.22124984730210484, 0.21806611194711045, 0.2626898331916283, 0.20209064129333787, 0.2023510495911307, 0.2554759161828901, 0.2544706802336666, 0.31848929940162396, 0.27986479330958214, 0.21547767406407414, 0.18773548784623784, 0.21245088843847093, 0.2305124766358565, 0.1549097105984627, 0.18426661954042256, 0.1709698133006865, 0.21986504950841135, 0.13456805510196335, 0.19397606308163617, 0.14813375737793955, 0.1754033354592457, 0.20160793478906003, 0.21092252917799337, 0.17236193490581353, 0.17231259553418699, 0.19194689570967183, 0.2126845273276199, 0.22800987616176982, 0.18084297532008553, 0.31490802612732527, 0.20783665023526576, 0.2188628493881063, 0.2091868719072998, 0.19134226935348764, 0.2208975271824215, 0.1846926079817668, 0.6973630418143462, 0.16197149780527276, 0.15243684768735255, 0.6078603635271234, 0.200059361935517, 0.7139385463918579, 0.18056986054638946, 0.16903535872370323, 0.7415517563799248, 0.43043871584178317, 0.15652354346008301, 0.22311782901083255, 0.3402486817258238, 0.2142398369930132, 0.20962198595244463, 0.1670990995351871, 0.1974947882554713, 0.29133665239907736, 0.19106113497524368, 0.22826825804392825, 0.20193885200808692, 0.2113841151005621, 0.210895559747317, 0.19216812125444116, 0.18327970705610452, 0.17734234078817568, 0.20894148512768718, 0.072653022685498, 0.0636147226206345, 0.07483773629886348, 0.08206119427796998, 0.07328382020721658, 0.06532063400842925, 0.07374784115725419, 0.09167009453935626, 0.0771538414422055]}, "mutation_prompt": null}
