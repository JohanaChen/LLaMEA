{"id": "6b420bf3-e72d-4080-80e3-121a38b080e3", "solution": "import numpy as np\n\nclass AdaptiveHybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.mutation_factor = 0.5\n        self.crossover_rate = 0.9\n        self.eval_count = 0\n\n    def evaluate(self, func, candidate):\n        fitness = func(candidate)\n        self.eval_count += 1\n        return fitness\n\n    def __call__(self, func):\n        self.fitness = np.array([self.evaluate(func, ind) for ind in self.population])\n        best_index = np.argmin(self.fitness)\n        best_individual = self.population[best_index]\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                if self.eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.crossover_rate\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = self.evaluate(func, trial)\n\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n                    if trial_fitness < self.fitness[best_index]:\n                        best_index = i\n                        best_individual = trial\n            \n            # Local search on best individual\n            if self.eval_count + self.dim <= self.budget:\n                local_neighbors = best_individual + np.random.uniform(-0.1, 0.1, (self.dim, self.dim))\n                local_neighbors = np.clip(local_neighbors, -5.0, 5.0)\n                for neighbor in local_neighbors:\n                    local_fitness = self.evaluate(func, neighbor)\n                    if local_fitness < self.fitness[best_index]:\n                        best_index = np.argmin(local_fitness)\n                        best_individual = neighbor\n\n        return best_individual", "name": "AdaptiveHybridDifferentialEvolution", "description": "Adaptive Hybrid Differential Evolution combines differential evolution and local search with an adaptive strategy for robust exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.384333828914007, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8019103240246769, 0.8028825740503407, 0.7916592294311763, 0.8062504014697223, 0.803060100722442, 0.8175132317076352, 0.8190493557327644, 0.8149408610753273, 0.8022082208745712, 0.639618740109983, 0.6613769041203311, 0.6326501199270634, 0.6217397793905441, 0.6392603108356097, 0.6500744928499054, 0.667292601016445, 0.6258507919112812, 0.6413218611802013, 0.13799682417854564, 0.13695904303157114, 0.12699335243783338, 0.16203322077040594, 0.12530738457159463, 0.13540459859016685, 0.14641223219645927, 0.12482700189291773, 0.12514289847228788, 0.11851877289938006, 0.12767730240297004, 0.10847874905003241, 0.10307585434546729, 0.0993742851765681, 0.10825057826349294, 0.12020870753142932, 0.1160721157416369, 0.10956383275413739, 0.8924958103988093, 0.929170363576324, 0.9182974308253464, 0.911731312563608, 0.9009290790964287, 0.8585110006291334, 0.8839255596650655, 0.9143922357811259, 0.9104025214358406, 0.4113888087992267, 0.44847957861479215, 0.4832422595176551, 0.4846720164235603, 0.4340718582438726, 0.47554469907030483, 0.5096342242999087, 0.49815318420928856, 0.4868968836356352, 0.7780304582119721, 0.7467971907367165, 0.7561487571268286, 0.7998417696174585, 0.7678744115120013, 0.8120415923961473, 0.7802768022067066, 0.747663677383283, 0.7783729422846155, 0.22692779689672926, 0.17638671970306585, 0.18936359913008394, 0.22488611576537731, 0.2369100954015435, 0.17826154074171796, 0.2603515419562471, 0.22312271778783244, 0.49406788467545826, 0.22331315551199216, 0.17910769466916354, 0.30960658253859275, 0.2213859345707041, 0.2134824989170171, 0.49015995277694313, 0.25610674689644575, 0.1771495128793884, 0.378208846512777, 0.409289410867688, 0.38420503425346775, 0.40254465847166987, 0.414938826585428, 0.43155799744649725, 0.35225789437076105, 0.39039280200925763, 0.36784742134782833, 0.43426169956230987, 0.5093335618824961, 0.5300228557177851, 0.47015221561056886, 0.5432956263307764, 0.5187416663973732, 0.5351464001682742, 0.5438120172867941, 0.537473502038659, 0.5513898281768063, 0.12461582130330318, 0.13281826621359927, 0.17423454545017336, 0.31834996646256386, 0.28826222611008134, 0.281479590317379, 0.1776881442144389, 0.21398204949361643, 0.16024565020492443, 0.31716864690518864, 0.32933470644970175, 0.30445616974703704, 0.30778381825411394, 0.3186974880955902, 0.3170919978076242, 0.32109994620750604, 0.30475255347422525, 0.29958443068240126, 0.7092121648673109, 0.71382616665203, 0.7023785269682388, 0.7099983187209924, 0.6937716122467229, 0.7138611920389981, 0.7204182221257784, 0.6841485885659396, 0.7094770496978533, 0.1309270140212606, 0.12401287856012799, 0.10672464112408742, 0.11932813664934605, 0.1347396677148478, 0.12773757942660235, 0.13007914617144944, 0.11825556406555715, 0.11574076531359057, 0.14778425744208257, 0.16307705273072826, 0.16658663780033478, 0.1649963972527616, 0.1710962377038182, 0.17330474483789093, 0.19799668587666408, 0.17524097982642994, 0.15848280864614894, 0.42619134328797814, 0.4207681280716862, 0.43186439299600465, 0.4261999589928157, 0.4006966996084912, 0.40291149003771765, 0.4506969318299835, 0.438341692895029, 0.42985644822661295, 0.3281103606205159, 0.30773701772926687, 0.30852469311639474, 0.31900729480371215, 0.29950226877624875, 0.2840540273048586, 0.35095681051046335, 0.337588548020636, 0.33463931895183563, 0.2307470244204588, 0.2051501592915943, 0.2094885221626397, 0.19636534708914544, 0.18880901297762898, 0.19995412321753625, 0.21287263481325935, 0.20346960537742653, 0.20598496214484208, 0.2053056340125391, 0.2384897583490988, 0.2065668810769622, 0.21791744295844795, 0.20061945802612824, 0.21767032148416432, 0.24454583789859885, 0.21576208854164314, 0.21291988881557478, 0.6563856682230536, 0.19916512948503795, 0.7944613305578901, 0.6889537163681292, 0.1798054149569458, 0.5814533591390225, 0.3827095614457443, 0.5392850565341312, 0.7620167749563904, 0.7686112148975455, 0.7117941980915408, 0.19877824368268415, 0.667076538784849, 0.28212637500560467, 0.19646945767380364, 0.20508621103764302, 0.7301826418189135, 0.23474576187289153, 0.19460160096837853, 0.1982760715771298, 0.19595153534151255, 0.17914854514981493, 0.19298848688218395, 0.18354536585782955, 0.19430131672099438, 0.19622524990730372, 0.18188723957513897, 0.0935696751501569, 0.09492088384913333, 0.08875282075675428, 0.07943789554931224, 0.08129662490675982, 0.0772325282030859, 0.0878287911395097, 0.07778799556585891, 0.07870714205974727]}, "mutation_prompt": null}
{"id": "155f2819-ce72-4941-9d5e-aedd2aa36969", "solution": "import numpy as np\n\nclass AdaptiveHybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.mutation_factor = 0.5\n        self.crossover_rate = 0.9\n        self.eval_count = 0\n\n    def evaluate(self, func, candidate):\n        fitness = func(candidate)\n        self.eval_count += 1\n        return fitness\n\n    def __call__(self, func):\n        self.fitness = np.array([self.evaluate(func, ind) for ind in self.population])\n        best_index = np.argmin(self.fitness)\n        best_individual = self.population[best_index]\n\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                if self.eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.crossover_rate\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = self.evaluate(func, trial)\n\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n                    if trial_fitness < self.fitness[best_index]:\n                        best_index = i\n                        best_individual = trial\n            \n            # Local search on best individual\n            if self.eval_count + self.dim <= self.budget:\n                local_neighbors = best_individual + np.random.uniform(-0.1, 0.1, (self.dim, self.dim))\n                local_neighbors = np.clip(local_neighbors, -5.0, 5.0)\n                for neighbor in local_neighbors:\n                    local_fitness = self.evaluate(func, neighbor)\n                    if local_fitness < self.fitness[best_index]:\n                        best_index = np.argmin(local_fitness)\n                        best_individual = neighbor\n\n        return best_individual", "name": "AdaptiveHybridDifferentialEvolution", "description": "Adaptive Hybrid Differential Evolution combines differential evolution and local search with an adaptive strategy for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6b420bf3-e72d-4080-80e3-121a38b080e3", "metadata": {"aucs": [0.8019103240246769, 0.8028825740503407, 0.7916592294311763, 0.8062504014697223, 0.803060100722442, 0.8175132317076352, 0.8190493557327644, 0.8149408610753273, 0.8022082208745712, 0.639618740109983, 0.6613769041203311, 0.6326501199270634, 0.6217397793905441, 0.6392603108356097, 0.6500744928499054, 0.667292601016445, 0.6258507919112812, 0.6413218611802013, 0.13799682417854564, 0.13695904303157114, 0.12699335243783338, 0.16203322077040594, 0.12530738457159463, 0.13540459859016685, 0.14641223219645927, 0.12482700189291773, 0.12514289847228788, 0.11851877289938006, 0.12767730240297004, 0.10847874905003241, 0.10307585434546729, 0.0993742851765681, 0.10825057826349294, 0.12020870753142932, 0.1160721157416369, 0.10956383275413739, 0.8924958103988093, 0.929170363576324, 0.9182974308253464, 0.911731312563608, 0.9009290790964287, 0.8585110006291334, 0.8839255596650655, 0.9143922357811259, 0.9104025214358406, 0.4113888087992267, 0.44847957861479215, 0.4832422595176551, 0.4846720164235603, 0.4340718582438726, 0.47554469907030483, 0.5096342242999087, 0.49815318420928856, 0.4868968836356352, 0.7780304582119721, 0.7467971907367165, 0.7561487571268286, 0.7998417696174585, 0.7678744115120013, 0.8120415923961473, 0.7802768022067066, 0.747663677383283, 0.7783729422846155, 0.22692779689672926, 0.17638671970306585, 0.18936359913008394, 0.22488611576537731, 0.2369100954015435, 0.17826154074171796, 0.2603515419562471, 0.22312271778783244, 0.49406788467545826, 0.22331315551199216, 0.17910769466916354, 0.30960658253859275, 0.2213859345707041, 0.2134824989170171, 0.49015995277694313, 0.25610674689644575, 0.1771495128793884, 0.378208846512777, 0.409289410867688, 0.38420503425346775, 0.40254465847166987, 0.414938826585428, 0.43155799744649725, 0.35225789437076105, 0.39039280200925763, 0.36784742134782833, 0.43426169956230987, 0.5093335618824961, 0.5300228557177851, 0.47015221561056886, 0.5432956263307764, 0.5187416663973732, 0.5351464001682742, 0.5438120172867941, 0.537473502038659, 0.5513898281768063, 0.12461582130330318, 0.13281826621359927, 0.17423454545017336, 0.31834996646256386, 0.28826222611008134, 0.281479590317379, 0.1776881442144389, 0.21398204949361643, 0.16024565020492443, 0.31716864690518864, 0.32933470644970175, 0.30445616974703704, 0.30778381825411394, 0.3186974880955902, 0.3170919978076242, 0.32109994620750604, 0.30475255347422525, 0.29958443068240126, 0.7092121648673109, 0.71382616665203, 0.7023785269682388, 0.7099983187209924, 0.6937716122467229, 0.7138611920389981, 0.7204182221257784, 0.6841485885659396, 0.7094770496978533, 0.1309270140212606, 0.12401287856012799, 0.10672464112408742, 0.11932813664934605, 0.1347396677148478, 0.12773757942660235, 0.13007914617144944, 0.11825556406555715, 0.11574076531359057, 0.14778425744208257, 0.16307705273072826, 0.16658663780033478, 0.1649963972527616, 0.1710962377038182, 0.17330474483789093, 0.19799668587666408, 0.17524097982642994, 0.15848280864614894, 0.42619134328797814, 0.4207681280716862, 0.43186439299600465, 0.4261999589928157, 0.4006966996084912, 0.40291149003771765, 0.4506969318299835, 0.438341692895029, 0.42985644822661295, 0.3281103606205159, 0.30773701772926687, 0.30852469311639474, 0.31900729480371215, 0.29950226877624875, 0.2840540273048586, 0.35095681051046335, 0.337588548020636, 0.33463931895183563, 0.2307470244204588, 0.2051501592915943, 0.2094885221626397, 0.19636534708914544, 0.18880901297762898, 0.19995412321753625, 0.21287263481325935, 0.20346960537742653, 0.20598496214484208, 0.2053056340125391, 0.2384897583490988, 0.2065668810769622, 0.21791744295844795, 0.20061945802612824, 0.21767032148416432, 0.24454583789859885, 0.21576208854164314, 0.21291988881557478, 0.6563856682230536, 0.19916512948503795, 0.7944613305578901, 0.6889537163681292, 0.1798054149569458, 0.5814533591390225, 0.3827095614457443, 0.5392850565341312, 0.7620167749563904, 0.7686112148975455, 0.7117941980915408, 0.19877824368268415, 0.667076538784849, 0.28212637500560467, 0.19646945767380364, 0.20508621103764302, 0.7301826418189135, 0.23474576187289153, 0.19460160096837853, 0.1982760715771298, 0.19595153534151255, 0.17914854514981493, 0.19298848688218395, 0.18354536585782955, 0.19430131672099438, 0.19622524990730372, 0.18188723957513897, 0.0935696751501569, 0.09492088384913333, 0.08875282075675428, 0.07943789554931224, 0.08129662490675982, 0.0772325282030859, 0.0878287911395097, 0.07778799556585891, 0.07870714205974727]}, "mutation_prompt": null}
