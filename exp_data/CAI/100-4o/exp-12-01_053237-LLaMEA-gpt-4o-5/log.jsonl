{"id": "dabb8a62-069a-42ce-823e-e4defd78099a", "solution": "import numpy as np\n\nclass HybridDELocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = min(5 * dim, budget // 2)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.best_solution = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        self.budget -= self.population_size\n        \n        while self.budget > 0:\n            for i in range(self.population_size):\n                # Mutation and Crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                # Local Search: Small perturbation\n                if np.random.rand() < 0.2:\n                    trial = self.local_search(trial, func)\n                \n                # Selection\n                trial_fitness = func(trial)\n                self.budget -= 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < self.best_value:\n                        self.best_value = trial_fitness\n                        self.best_solution = trial\n                \n                if self.budget <= 0:\n                    break\n\n        return self.best_solution\n\n    def local_search(self, solution, func):\n        perturbation = np.random.normal(0, 0.1, size=self.dim)\n        perturbed_solution = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        if func(perturbed_solution) < func(solution):\n            return perturbed_solution\n        return solution", "name": "HybridDELocalSearch", "description": "A hybrid algorithm combining Differential Evolution and Local Search to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.33548498096897, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7410979145903352, 0.7589260442471798, 0.7670757608985664, 0.7562485400154184, 0.7686549154200096, 0.7746919302416733, 0.7728114856181261, 0.7810950063848577, 0.7408323192295438, 0.5769822006236962, 0.6081874634471771, 0.5869707176170047, 0.5252379639016614, 0.5875893975081796, 0.561946928532716, 0.5604746759747267, 0.6052279134429096, 0.528950988002492, 0.09721153906129587, 0.09885317431005736, 0.10304305342458997, 0.09556730847964978, 0.10637829591911963, 0.14562538047371654, 0.12390659088302003, 0.09853393480717965, 0.10075392312566378, 0.09304764801692655, 0.10401780214210521, 0.09923560601973602, 0.1038931504156726, 0.11518141732306575, 0.11514498782735938, 0.09761633543456316, 0.10873186773454913, 0.12133650763262616, 0.9441862232224327, 0.9682056339611924, 0.9668759204793886, 0.9711129172000516, 0.9528728012810312, 0.9487655532528833, 0.9851568339845929, 0.9383397693270115, 0.9586140399369883, 0.36997139703235327, 0.4434196246269895, 0.35705272587778436, 0.4010158724904601, 0.38374438358417906, 0.39131965309155003, 0.4013682461089968, 0.42396633597177624, 0.344732872783552, 0.6352741538516251, 0.683711401204826, 0.6146256997129818, 0.679606062678163, 0.6913710589237356, 0.5949455641456161, 0.701590435764073, 0.664446038273063, 0.7120202279165558, 0.2962138377377499, 0.3512064943171259, 0.28131314596490054, 0.3678617211244193, 0.33813298263940994, 0.34015375117851077, 0.3443009321331435, 0.3223631175779236, 0.31919935943138344, 0.2302651383920401, 0.2934872191532476, 0.11385897632592201, 0.30603887659744067, 0.3274064727991173, 0.2319521932913794, 0.3061037964064147, 0.27843707916352867, 0.3361394534899472, 0.2649701853511117, 0.26063034313144595, 0.2666641007282826, 0.2871803757699748, 0.25469889538494106, 0.21402408937218054, 0.24001818765603344, 0.2316501654062295, 0.22382820328618158, 0.4187488413960725, 0.4078075401955443, 0.37314663521177005, 0.3974987856806108, 0.44289147512819016, 0.3948840780134618, 0.45876364619912624, 0.46074369774017154, 0.44235010557709475, 0.10274204102973528, 0.10353093597931207, 0.07738051435407411, 0.13359062147206147, 0.13495330381375592, 0.14828368717629403, 0.07779481746585293, 0.1058383304818572, 0.1856957210379041, 0.23273644196558774, 0.22576881295434414, 0.23479281639275684, 0.2222675074310969, 0.25008488206950785, 0.26001439954006345, 0.24600871146615522, 0.283574650975301, 0.23501299751150395, 0.6027035423275751, 0.6162482667458447, 0.614431437992865, 0.5930621451431108, 0.6056820496746818, 0.6260216529756788, 0.6132288548535565, 0.6364655454162622, 0.6253619241784766, 0.09068221976112967, 0.08034475049499612, 0.09281673661816403, 0.08348050533050022, 0.09671115559519772, 0.08888920973478198, 0.07444343794181263, 0.08820586938909725, 0.07823799293551259, 0.16731291355168976, 0.17042321117031967, 0.45991465074653726, 0.19917899545879514, 0.15660987821078876, 0.15564908532855426, 0.18425098790533634, 0.25783085145896234, 0.1820568326185138, 0.3158154614309967, 0.33579745408681594, 0.3192038548942806, 0.3183421080286496, 0.29902311041740015, 0.2919471747764273, 0.3562309843725322, 0.3534644707042469, 0.3365439070685031, 0.24028641164317344, 0.261782355320454, 0.23890529907389835, 0.21763863694266372, 0.22867441741661176, 0.26291965078721846, 0.2649568928627515, 0.262957432504494, 0.2711896508849765, 0.20046738439046596, 0.1978752937233349, 0.19744971988361226, 0.1819123591242443, 0.1819631686490033, 0.19174350535109363, 0.19862175259268844, 0.1824061614798017, 0.19339570322916966, 0.19200100946026855, 0.32325337271140153, 0.17606598141566754, 0.21873023045941797, 0.18469166096496015, 0.18000643952137907, 0.18535812141427366, 0.1991888700542409, 0.1730577806226754, 0.1733353970533994, 0.17009368045062878, 0.7301455238389074, 0.7136444391790534, 0.18129471199359593, 0.5957698052652691, 0.6898177869014019, 0.3792244402639049, 0.15976246800407212, 0.2056208227881524, 0.16636686201141515, 0.12232195274129554, 0.5579461643098897, 0.6776757692828164, 0.20357579508905144, 0.20970833069801142, 0.20811844285548453, 0.20383861113016377, 0.1958887894386524, 0.19039326061354978, 0.18567866565783597, 0.1832058168584616, 0.2432183637107418, 0.17596003810974858, 0.1863636164538669, 0.18347405261845406, 0.19074817225070495, 0.07098753512196121, 0.06650504472474872, 0.07547801375997387, 0.07947673713423553, 0.07646498132429458, 0.07332542752395821, 0.0687932507921285, 0.07733595518840342, 0.07468744485654899]}, "mutation_prompt": null}
{"id": "4efb322f-22a4-4696-b903-17e72f591abf", "solution": "import numpy as np\n\nclass HybridDELocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = min(5 * dim, budget // 2)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.best_solution = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        self.budget -= self.population_size\n        \n        while self.budget > 0:\n            for i in range(self.population_size):\n                # Mutation and Crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                # Local Search: Small perturbation\n                if np.random.rand() < 0.2:\n                    trial = self.local_search(trial, func)\n                \n                # Selection\n                trial_fitness = func(trial)\n                self.budget -= 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < self.best_value:\n                        self.best_value = trial_fitness\n                        self.best_solution = trial\n                \n                if self.budget <= 0:\n                    break\n\n        return self.best_solution\n\n    def local_search(self, solution, func):\n        perturbation = np.random.normal(0, 0.1, size=self.dim)\n        perturbed_solution = np.clip(solution + perturbation, self.lower_bound, self.upper_bound)\n        if func(perturbed_solution) < func(solution):\n            return perturbed_solution\n        return solution", "name": "HybridDELocalSearch", "description": "A hybrid algorithm combining Differential Evolution and Local Search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dabb8a62-069a-42ce-823e-e4defd78099a", "metadata": {"aucs": [0.7410979145903352, 0.7589260442471798, 0.7670757608985664, 0.7562485400154184, 0.7686549154200096, 0.7746919302416733, 0.7728114856181261, 0.7810950063848577, 0.7408323192295438, 0.5769822006236962, 0.6081874634471771, 0.5869707176170047, 0.5252379639016614, 0.5875893975081796, 0.561946928532716, 0.5604746759747267, 0.6052279134429096, 0.528950988002492, 0.09721153906129587, 0.09885317431005736, 0.10304305342458997, 0.09556730847964978, 0.10637829591911963, 0.14562538047371654, 0.12390659088302003, 0.09853393480717965, 0.10075392312566378, 0.09304764801692655, 0.10401780214210521, 0.09923560601973602, 0.1038931504156726, 0.11518141732306575, 0.11514498782735938, 0.09761633543456316, 0.10873186773454913, 0.12133650763262616, 0.9441862232224327, 0.9682056339611924, 0.9668759204793886, 0.9711129172000516, 0.9528728012810312, 0.9487655532528833, 0.9851568339845929, 0.9383397693270115, 0.9586140399369883, 0.36997139703235327, 0.4434196246269895, 0.35705272587778436, 0.4010158724904601, 0.38374438358417906, 0.39131965309155003, 0.4013682461089968, 0.42396633597177624, 0.344732872783552, 0.6352741538516251, 0.683711401204826, 0.6146256997129818, 0.679606062678163, 0.6913710589237356, 0.5949455641456161, 0.701590435764073, 0.664446038273063, 0.7120202279165558, 0.2962138377377499, 0.3512064943171259, 0.28131314596490054, 0.3678617211244193, 0.33813298263940994, 0.34015375117851077, 0.3443009321331435, 0.3223631175779236, 0.31919935943138344, 0.2302651383920401, 0.2934872191532476, 0.11385897632592201, 0.30603887659744067, 0.3274064727991173, 0.2319521932913794, 0.3061037964064147, 0.27843707916352867, 0.3361394534899472, 0.2649701853511117, 0.26063034313144595, 0.2666641007282826, 0.2871803757699748, 0.25469889538494106, 0.21402408937218054, 0.24001818765603344, 0.2316501654062295, 0.22382820328618158, 0.4187488413960725, 0.4078075401955443, 0.37314663521177005, 0.3974987856806108, 0.44289147512819016, 0.3948840780134618, 0.45876364619912624, 0.46074369774017154, 0.44235010557709475, 0.10274204102973528, 0.10353093597931207, 0.07738051435407411, 0.13359062147206147, 0.13495330381375592, 0.14828368717629403, 0.07779481746585293, 0.1058383304818572, 0.1856957210379041, 0.23273644196558774, 0.22576881295434414, 0.23479281639275684, 0.2222675074310969, 0.25008488206950785, 0.26001439954006345, 0.24600871146615522, 0.283574650975301, 0.23501299751150395, 0.6027035423275751, 0.6162482667458447, 0.614431437992865, 0.5930621451431108, 0.6056820496746818, 0.6260216529756788, 0.6132288548535565, 0.6364655454162622, 0.6253619241784766, 0.09068221976112967, 0.08034475049499612, 0.09281673661816403, 0.08348050533050022, 0.09671115559519772, 0.08888920973478198, 0.07444343794181263, 0.08820586938909725, 0.07823799293551259, 0.16731291355168976, 0.17042321117031967, 0.45991465074653726, 0.19917899545879514, 0.15660987821078876, 0.15564908532855426, 0.18425098790533634, 0.25783085145896234, 0.1820568326185138, 0.3158154614309967, 0.33579745408681594, 0.3192038548942806, 0.3183421080286496, 0.29902311041740015, 0.2919471747764273, 0.3562309843725322, 0.3534644707042469, 0.3365439070685031, 0.24028641164317344, 0.261782355320454, 0.23890529907389835, 0.21763863694266372, 0.22867441741661176, 0.26291965078721846, 0.2649568928627515, 0.262957432504494, 0.2711896508849765, 0.20046738439046596, 0.1978752937233349, 0.19744971988361226, 0.1819123591242443, 0.1819631686490033, 0.19174350535109363, 0.19862175259268844, 0.1824061614798017, 0.19339570322916966, 0.19200100946026855, 0.32325337271140153, 0.17606598141566754, 0.21873023045941797, 0.18469166096496015, 0.18000643952137907, 0.18535812141427366, 0.1991888700542409, 0.1730577806226754, 0.1733353970533994, 0.17009368045062878, 0.7301455238389074, 0.7136444391790534, 0.18129471199359593, 0.5957698052652691, 0.6898177869014019, 0.3792244402639049, 0.15976246800407212, 0.2056208227881524, 0.16636686201141515, 0.12232195274129554, 0.5579461643098897, 0.6776757692828164, 0.20357579508905144, 0.20970833069801142, 0.20811844285548453, 0.20383861113016377, 0.1958887894386524, 0.19039326061354978, 0.18567866565783597, 0.1832058168584616, 0.2432183637107418, 0.17596003810974858, 0.1863636164538669, 0.18347405261845406, 0.19074817225070495, 0.07098753512196121, 0.06650504472474872, 0.07547801375997387, 0.07947673713423553, 0.07646498132429458, 0.07332542752395821, 0.0687932507921285, 0.07733595518840342, 0.07468744485654899]}, "mutation_prompt": null}
