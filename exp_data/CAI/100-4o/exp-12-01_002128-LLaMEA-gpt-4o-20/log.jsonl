{"id": "856813fd-edbf-4a52-a8d5-c01fc879f7cc", "solution": "import numpy as np\n\nclass HybridPSO_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30  # Number of particles in the swarm\n        self.c1 = 2.0  # Cognitive component\n        self.c2 = 2.0  # Social component\n        self.w = 0.7   # Inertia weight\n        self.temperature = 100.0\n        self.cooling_rate = 0.99\n\n    def __call__(self, func):\n        # Initialize particles' positions and velocities\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.zeros((self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Evaluation count\n        eval_count = 0\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Evaluate fitness\n                score = func(positions[i])\n                eval_count += 1\n\n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            for i in range(self.num_particles):\n                # Update velocity and position\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.w * velocities[i] +\n                                 self.c1 * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.c2 * r2 * (global_best_position - positions[i]))\n                positions[i] += velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n                # Simulated Annealing perturbation\n                if eval_count < self.budget:\n                    new_position = positions[i] + np.random.normal(0, self.temperature, self.dim)\n                    new_position = np.clip(new_position, self.lower_bound, self.upper_bound)\n                    new_score = func(new_position)\n                    eval_count += 1\n                    if new_score < personal_best_scores[i] or np.exp((personal_best_scores[i] - new_score) / self.temperature) > np.random.rand():\n                        positions[i] = new_position\n                        personal_best_scores[i] = new_score\n                        personal_best_positions[i] = new_position\n                        if new_score < global_best_score:\n                            global_best_score = new_score\n                            global_best_position = new_position\n\n            # Cool down temperature\n            self.temperature *= self.cooling_rate\n\n        return global_best_position, global_best_score", "name": "HybridPSO_SA", "description": "A hybrid Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for enhanced exploration and exploitation in high-dimensional search spaces.", "configspace": "", "generation": 0, "fitness": 0.14017128984128235, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.1371922504121318, 0.1240957259296116, 0.1738953576629667, 0.18182765146092061, 0.1523454651938302, 0.16371822926413082, 0.16186621434725934, 0.1559339330946221, 0.14230972424647548, 9.999999999998899e-05, 9.999999999998899e-05, 0.027006025985912285, 9.999999999998899e-05, 0.029000970292658912, 0.05043384084517799, 0.0301485670063939, 0.00227131137946035, 0.008025906487573065, 0.08672232726539697, 0.06965744250966832, 0.08380791831726142, 0.07657061650069663, 0.07249793810795613, 0.08361244451691241, 0.08574355607841877, 0.06786054760568838, 0.05307361547822165, 0.0676070958823155, 0.08908091989300415, 0.051756822296602834, 0.09367185551122859, 0.08586811508221304, 0.056049723004085394, 0.08313694545232397, 0.03514014265831733, 0.07555485479567325, 0.9905991205159803, 0.9966279667310897, 0.9765815488268769, 0.9911217926312168, 0.9913903259141829, 0.9969012566322196, 0.9955488525340963, 0.9913113201539826, 0.9931277790723528, 0.25615615602770225, 0.0808929610688025, 0.07357932793471522, 0.25514708528221275, 0.15858061708988336, 0.12703577976095692, 0.10370035424944413, 0.08614718913926389, 0.07240500086321722, 0.1990237796915767, 0.24227837539743746, 0.1767593938849188, 0.19421257306650874, 0.3574962305380065, 0.18565907657920333, 0.12136855484370312, 0.12068156177455258, 0.16351860375832583, 0.07327955937982078, 0.07397588158878021, 0.07591371084001552, 0.07224746213729727, 0.10690678215719762, 0.09934880590200879, 0.09499402373739341, 0.1260061813875596, 0.14226248087074655, 0.11623239854294476, 0.01508654364832418, 0.09820810707018968, 0.1432992970875635, 0.07081723769170456, 0.1128833607373777, 0.03780934873444308, 0.10320227435661178, 0.06332847111377793, 9.999999999998899e-05, 0.003960407711567138, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02456519377519184, 9.999999999998899e-05, 0.0008368779936006598, 0.07651389925695062, 0.05239747474006051, 0.09881409462532043, 0.07223944057251064, 0.03788485988233292, 0.02669812791718429, 0.1191300112070951, 0.03348613696009872, 0.051003212464097336, 0.024997279000506967, 0.0007348916679437156, 9.999999999998899e-05, 0.009370151967208251, 0.0021791320537711822, 0.007645629222721828, 0.058213551950701325, 0.009082268599076793, 0.018778285438983966, 0.04269127297679465, 0.06675887363580002, 0.06701728628110792, 0.09298028000600389, 0.04681813508501942, 0.10153178616712444, 0.0690887064924598, 9.999999999998899e-05, 0.05499690359280285, 0.13806862729903846, 0.15487388039695182, 0.20990019889666367, 0.15395167153928802, 0.1725006849308709, 0.1664769626485455, 0.24079299115089248, 0.18764830303874036, 0.24525210570092226, 0.06601047752114841, 0.07043541386972518, 0.06991518819291465, 0.07250446833656332, 0.08538390387536055, 0.11977457455065377, 0.06304511076524799, 0.1188595377963999, 0.06706489232928192, 0.12715598322562038, 0.14464608970634396, 0.1388678724527348, 0.12926090259581235, 0.13523649141642802, 0.12129534359014105, 0.10728914222233688, 0.11420006026172957, 0.12363254275422497, 0.1299779100277143, 0.11593016739427764, 0.14352810184653642, 0.14731410007027823, 0.12816285284801765, 0.1401514781240376, 0.15221877321416066, 0.17377774300845283, 0.14091936961572793, 0.09613922418337373, 0.10312963206509262, 0.12570073379129676, 0.11643335914916186, 0.0857284776911128, 0.09403103605283047, 0.10308608896895788, 0.12545730922285725, 0.0846405933186799, 0.155053968440368, 0.17054136722947422, 0.1525566123806642, 0.1933880572115717, 0.15223183879396496, 0.14715207076104997, 0.21485238625864933, 0.1497725617980723, 0.16197830165446025, 0.17928281639192023, 0.17957881946645227, 0.17909331457844946, 0.19245261142859327, 0.17391963487705164, 0.16237427760747158, 0.17959475905059152, 0.1723372013824579, 0.1794727497872577, 0.11011916284906131, 0.09551038506152087, 0.1631369442766476, 0.10596226910541318, 0.1207914665021157, 0.09534017568354358, 0.08281407083037406, 0.09913059440008942, 0.10034700310951283, 0.11040265245322212, 0.1019396946591078, 0.10079500144216069, 0.060853281548087224, 0.05777917069613869, 0.045511073114331335, 0.12259414532790702, 0.10049382034819698, 0.1264086393246182, 0.1552598175023282, 0.16823407779507782, 0.15674233702807483, 0.17217417988670114, 0.17925647301363057, 0.1528736574862456, 0.17433182319140583, 0.1622148805160032, 0.17257395219991944, 0.06525912685106372, 0.038805885921194605, 0.05090435701079221, 0.0435983481712896, 0.07207120641039166, 0.051250990634867266, 0.06209205436454868, 0.043388673133709754, 0.057380756356693374]}, "mutation_prompt": null}
{"id": "367ce176-898a-4688-bdcf-26bb1c7f1533", "solution": "import numpy as np\n\nclass HybridPSO_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30  # Number of particles in the swarm\n        self.c1 = 2.0  # Cognitive component\n        self.c2 = 2.0  # Social component\n        self.w = 0.7   # Inertia weight\n        self.temperature = 100.0\n        self.cooling_rate = 0.99\n\n    def __call__(self, func):\n        # Initialize particles' positions and velocities\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.zeros((self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Evaluation count\n        eval_count = 0\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Evaluate fitness\n                score = func(positions[i])\n                eval_count += 1\n\n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            for i in range(self.num_particles):\n                # Update velocity and position\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.w * velocities[i] +\n                                 self.c1 * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.c2 * r2 * (global_best_position - positions[i]))\n                positions[i] += velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n                # Simulated Annealing perturbation\n                if eval_count < self.budget:\n                    new_position = positions[i] + np.random.normal(0, self.temperature, self.dim)\n                    new_position = np.clip(new_position, self.lower_bound, self.upper_bound)\n                    new_score = func(new_position)\n                    eval_count += 1\n                    if new_score < personal_best_scores[i] or np.exp((personal_best_scores[i] - new_score) / self.temperature) > np.random.rand():\n                        positions[i] = new_position\n                        personal_best_scores[i] = new_score\n                        personal_best_positions[i] = new_position\n                        if new_score < global_best_score:\n                            global_best_score = new_score\n                            global_best_position = new_position\n\n            # Cool down temperature\n            self.temperature *= self.cooling_rate\n\n        return global_best_position, global_best_score", "name": "HybridPSO_SA", "description": "A hybrid Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for enhanced exploration and exploitation in high-dimensional search spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "856813fd-edbf-4a52-a8d5-c01fc879f7cc", "metadata": {"aucs": [0.1371922504121318, 0.1240957259296116, 0.1738953576629667, 0.18182765146092061, 0.1523454651938302, 0.16371822926413082, 0.16186621434725934, 0.1559339330946221, 0.14230972424647548, 9.999999999998899e-05, 9.999999999998899e-05, 0.027006025985912285, 9.999999999998899e-05, 0.029000970292658912, 0.05043384084517799, 0.0301485670063939, 0.00227131137946035, 0.008025906487573065, 0.08672232726539697, 0.06965744250966832, 0.08380791831726142, 0.07657061650069663, 0.07249793810795613, 0.08361244451691241, 0.08574355607841877, 0.06786054760568838, 0.05307361547822165, 0.0676070958823155, 0.08908091989300415, 0.051756822296602834, 0.09367185551122859, 0.08586811508221304, 0.056049723004085394, 0.08313694545232397, 0.03514014265831733, 0.07555485479567325, 0.9905991205159803, 0.9966279667310897, 0.9765815488268769, 0.9911217926312168, 0.9913903259141829, 0.9969012566322196, 0.9955488525340963, 0.9913113201539826, 0.9931277790723528, 0.25615615602770225, 0.0808929610688025, 0.07357932793471522, 0.25514708528221275, 0.15858061708988336, 0.12703577976095692, 0.10370035424944413, 0.08614718913926389, 0.07240500086321722, 0.1990237796915767, 0.24227837539743746, 0.1767593938849188, 0.19421257306650874, 0.3574962305380065, 0.18565907657920333, 0.12136855484370312, 0.12068156177455258, 0.16351860375832583, 0.07327955937982078, 0.07397588158878021, 0.07591371084001552, 0.07224746213729727, 0.10690678215719762, 0.09934880590200879, 0.09499402373739341, 0.1260061813875596, 0.14226248087074655, 0.11623239854294476, 0.01508654364832418, 0.09820810707018968, 0.1432992970875635, 0.07081723769170456, 0.1128833607373777, 0.03780934873444308, 0.10320227435661178, 0.06332847111377793, 9.999999999998899e-05, 0.003960407711567138, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02456519377519184, 9.999999999998899e-05, 0.0008368779936006598, 0.07651389925695062, 0.05239747474006051, 0.09881409462532043, 0.07223944057251064, 0.03788485988233292, 0.02669812791718429, 0.1191300112070951, 0.03348613696009872, 0.051003212464097336, 0.024997279000506967, 0.0007348916679437156, 9.999999999998899e-05, 0.009370151967208251, 0.0021791320537711822, 0.007645629222721828, 0.058213551950701325, 0.009082268599076793, 0.018778285438983966, 0.04269127297679465, 0.06675887363580002, 0.06701728628110792, 0.09298028000600389, 0.04681813508501942, 0.10153178616712444, 0.0690887064924598, 9.999999999998899e-05, 0.05499690359280285, 0.13806862729903846, 0.15487388039695182, 0.20990019889666367, 0.15395167153928802, 0.1725006849308709, 0.1664769626485455, 0.24079299115089248, 0.18764830303874036, 0.24525210570092226, 0.06601047752114841, 0.07043541386972518, 0.06991518819291465, 0.07250446833656332, 0.08538390387536055, 0.11977457455065377, 0.06304511076524799, 0.1188595377963999, 0.06706489232928192, 0.12715598322562038, 0.14464608970634396, 0.1388678724527348, 0.12926090259581235, 0.13523649141642802, 0.12129534359014105, 0.10728914222233688, 0.11420006026172957, 0.12363254275422497, 0.1299779100277143, 0.11593016739427764, 0.14352810184653642, 0.14731410007027823, 0.12816285284801765, 0.1401514781240376, 0.15221877321416066, 0.17377774300845283, 0.14091936961572793, 0.09613922418337373, 0.10312963206509262, 0.12570073379129676, 0.11643335914916186, 0.0857284776911128, 0.09403103605283047, 0.10308608896895788, 0.12545730922285725, 0.0846405933186799, 0.155053968440368, 0.17054136722947422, 0.1525566123806642, 0.1933880572115717, 0.15223183879396496, 0.14715207076104997, 0.21485238625864933, 0.1497725617980723, 0.16197830165446025, 0.17928281639192023, 0.17957881946645227, 0.17909331457844946, 0.19245261142859327, 0.17391963487705164, 0.16237427760747158, 0.17959475905059152, 0.1723372013824579, 0.1794727497872577, 0.11011916284906131, 0.09551038506152087, 0.1631369442766476, 0.10596226910541318, 0.1207914665021157, 0.09534017568354358, 0.08281407083037406, 0.09913059440008942, 0.10034700310951283, 0.11040265245322212, 0.1019396946591078, 0.10079500144216069, 0.060853281548087224, 0.05777917069613869, 0.045511073114331335, 0.12259414532790702, 0.10049382034819698, 0.1264086393246182, 0.1552598175023282, 0.16823407779507782, 0.15674233702807483, 0.17217417988670114, 0.17925647301363057, 0.1528736574862456, 0.17433182319140583, 0.1622148805160032, 0.17257395219991944, 0.06525912685106372, 0.038805885921194605, 0.05090435701079221, 0.0435983481712896, 0.07207120641039166, 0.051250990634867266, 0.06209205436454868, 0.043388673133709754, 0.057380756356693374]}, "mutation_prompt": null}
