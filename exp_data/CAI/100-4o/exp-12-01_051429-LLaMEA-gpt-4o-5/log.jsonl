{"id": "66fc3af1-880a-402e-90db-6877d4889f0f", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 30\n        self.de_cross_prob = 0.9\n        self.gbest_position = None\n        self.gbest_value = float('inf')\n\n    def initialize_population(self):\n        self.population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.pbest_positions = np.copy(self.population)\n        self.pbest_values = np.array([float('inf')] * self.population_size)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            value = func(self.population[i])\n            if value < self.pbest_values[i]:\n                self.pbest_values[i] = value\n                self.pbest_positions[i] = self.population[i]\n            if value < self.gbest_value:\n                self.gbest_value = value\n                self.gbest_position = self.population[i]\n\n    def update_particles(self):\n        w = 0.5  # inertia weight\n        c1 = 1.5  # cognitive component\n        c2 = 1.5  # social component\n        for i in range(self.population_size):\n            r1 = np.random.rand(self.dim)\n            r2 = np.random.rand(self.dim)\n            cognitive_velocity = c1 * r1 * (self.pbest_positions[i] - self.population[i])\n            social_velocity = c2 * r2 * (self.gbest_position - self.population[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive_velocity + social_velocity\n            self.population[i] = self.population[i] + self.velocities[i]\n            self.population[i] = np.clip(self.population[i], self.lb, self.ub)\n\n    def differential_evolution_crossover(self):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n            mutant_vector = np.clip(a + 0.8 * (b - c), self.lb, self.ub)\n            rand_idx = np.random.randint(self.dim)\n            trial_vector = np.array([mutant_vector[j] if np.random.rand() < self.de_cross_prob or j == rand_idx else self.population[i][j] for j in range(self.dim)])\n            self.population[i] = trial_vector\n\n    def __call__(self, func):\n        self.initialize_population()\n        evaluations = 0\n        while evaluations < self.budget:\n            self.evaluate_population(func)\n            evaluations += self.population_size\n            self.differential_evolution_crossover()\n            self.update_particles()\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution crossover for global exploration and local exploitation.", "configspace": "", "generation": 0, "fitness": 0.1206864516540948, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.15769356420698588, 0.15237427360718536, 0.15311193517805244, 0.19897187757979007, 0.19883520686486278, 0.19848279732755658, 0.1711694545616823, 0.17968724909147882, 0.2361132329027864, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041330610593351746, 0.03306625718792344, 0.03283148679940329, 0.03677862776265206, 0.0351961036623587, 0.04051344984264482, 0.033091528908200774, 0.0661576181253708, 0.038845995929175814, 0.018492977056991045, 0.020104614630979123, 0.015561781112656492, 0.028709754601875304, 0.013197110721766547, 0.018621586512129973, 0.024348871943344452, 0.01868412520119711, 0.02374499170889921, 0.9896752248086185, 0.9822484514619179, 0.9857638525549071, 0.9798685469948535, 0.9765497910440344, 0.9868748445087757, 0.9895894346018969, 0.9790378459571183, 0.9930209200286814, 0.07664904295092945, 0.1033188661095592, 0.07641641691378265, 0.10671282520546743, 0.050195143701915135, 0.08017293577702989, 0.08726362710692248, 0.07793528700287877, 0.07463726534958659, 0.13374929760860355, 0.11421122595974575, 0.12185634068422768, 0.1623488836290491, 0.12479544354201366, 0.11392443508198324, 0.11133566443174148, 0.11676230131730514, 0.11650323678587571, 0.0013108821301984763, 9.999999999998899e-05, 9.999999999998899e-05, 0.005962009312903693, 0.0002537992825687452, 9.999999999998899e-05, 9.999999999998899e-05, 0.008828039645147556, 9.999999999998899e-05, 0.011274281934238961, 0.011539234979791257, 0.017723078788927205, 0.00011903513518485287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04997928714827371, 0.05357747761831655, 0.04193227598787275, 0.01769251607623279, 0.02800205523247079, 0.03151603063374442, 0.035445760995569287, 0.026705842859653606, 0.0046999657816620966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007958520521307633, 0.0049384432076731155, 0.006707462250391871, 0.16404321123382593, 0.18856209523116407, 0.2009771089568383, 0.1960555241453935, 0.23835254395681071, 0.1970473053351629, 0.19042923936844414, 0.16100088507438304, 0.15294205031271757, 0.05416132276501684, 0.0467749236921452, 0.05453454260674884, 0.0611367687285258, 0.04286805304040098, 0.03853147904647869, 0.04192512547234584, 0.038067515886833325, 0.03938768153868166, 0.14318671553895435, 0.14058086464533992, 0.14321634331616184, 0.13249729961875623, 0.13655452298420023, 0.14525139029825185, 0.13232365072632368, 0.1298675964571102, 0.14207408925160014, 0.16655070836638675, 0.15575135071460666, 0.15781343978231466, 0.14459064345677908, 0.14085078923214878, 0.15635168059984372, 0.17456807840811672, 0.17464888320321093, 0.1674805120550742, 0.1125810281087759, 0.1080924139934979, 0.10705974166217547, 0.08862787794657145, 0.10030742309281382, 0.11489310376110573, 0.11861228062408768, 0.11374958078401776, 0.0980766104191414, 0.13069319377658994, 0.15458968594743272, 0.14481814609129018, 0.15182275064084372, 0.1475098448051796, 0.1525004878256917, 0.15538501336591581, 0.13829531659644256, 0.13649714135126634, 0.033261322825792194, 0.13022984993293685, 0.13027818709284256, 0.14896657408998648, 0.13603184139979807, 0.13966291927245933, 0.09214759465048261, 0.1217586632480192, 0.14859670670641867, 0.1426377701416257, 0.14547410004907046, 0.1495442516729827, 0.12758695919561558, 0.15166291554523448, 0.16278554681698698, 0.1472403688297108, 0.14781674048904858, 0.1617376921611805, 0.13966869602215481, 0.14642084383913156, 0.13243446218445498, 0.13775155770683867, 0.10416184540347717, 0.10496291708318295, 0.17267244238298496, 0.18191842224580557, 0.19175181031228927, 0.1770699820751368, 0.18122087066654136, 0.1769393137511912, 0.19310093741358614, 0.18106850981675293, 0.16726888187545919, 0.17198885980610323, 0.18846178770084276, 0.18646488798375782, 0.04268594253237312, 0.04982281811430278, 0.03679972603402326, 0.03919420465029111, 0.05063765848537638, 0.04805388300996161, 0.037582528201524856, 0.035490051898676156, 0.042591901865276505]}, "mutation_prompt": null}
{"id": "10afcaf4-bf1d-4bb7-98b8-344798ca2e85", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 30\n        self.de_cross_prob = 0.9\n        self.gbest_position = None\n        self.gbest_value = float('inf')\n\n    def initialize_population(self):\n        self.population = self.lb + (self.ub - self.lb) * np.random.rand(self.population_size, self.dim)\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.pbest_positions = np.copy(self.population)\n        self.pbest_values = np.array([float('inf')] * self.population_size)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            value = func(self.population[i])\n            if value < self.pbest_values[i]:\n                self.pbest_values[i] = value\n                self.pbest_positions[i] = self.population[i]\n            if value < self.gbest_value:\n                self.gbest_value = value\n                self.gbest_position = self.population[i]\n\n    def update_particles(self):\n        w_max = 0.9  # maximum inertia weight\n        w_min = 0.4  # minimum inertia weight\n        w = w_max - ((w_max - w_min) * (self.gbest_value / self.budget))  # adaptive inertia weight\n        c1 = 1.5  # cognitive component\n        c2 = 1.5  # social component\n        for i in range(self.population_size):\n            r1 = np.random.rand(self.dim)\n            r2 = np.random.rand(self.dim)\n            cognitive_velocity = c1 * r1 * (self.pbest_positions[i] - self.population[i])\n            social_velocity = c2 * r2 * (self.gbest_position - self.population[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive_velocity + social_velocity\n            self.population[i] = self.population[i] + self.velocities[i]\n            self.population[i] = np.clip(self.population[i], self.lb, self.ub)\n            if np.random.rand() < 0.1:  # random perturbation\n                self.population[i] += np.random.uniform(-0.1, 0.1, self.dim)\n\n    def differential_evolution_crossover(self):\n        for i in range(self.population_size):\n            idxs = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n            mutant_vector = np.clip(a + 0.8 * (b - c), self.lb, self.ub)\n            rand_idx = np.random.randint(self.dim)\n            trial_vector = np.array([mutant_vector[j] if np.random.rand() < self.de_cross_prob or j == rand_idx else self.population[i][j] for j in range(self.dim)])\n            self.population[i] = trial_vector\n\n    def __call__(self, func):\n        self.initialize_population()\n        evaluations = 0\n        while evaluations < self.budget:\n            self.evaluate_population(func)\n            evaluations += self.population_size\n            self.differential_evolution_crossover()\n            self.update_particles()\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid PSO-DE with adaptive inertia weight and random perturbation for improved convergence and diversity.", "configspace": "", "generation": 1, "fitness": 0.09658184317139477, "feedback": "", "error": "", "parent_id": "66fc3af1-880a-402e-90db-6877d4889f0f", "metadata": {"aucs": [0.0934173927111317, 0.07405887827577184, 0.11741572565042102, 0.13483738551606073, 0.14360829424420352, 0.13771792389631632, 0.1076547024188399, 0.11754165708695674, 0.11396995331559123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 0.010082704724290625, 0.017154438220163826, 0.026310304280383612, 0.011055341277439013, 0.039882371627538715, 0.015851713178926197, 0.030379603959518997, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 0.0004952459975243739, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9934575832094582, 0.9917347065332349, 0.9813324879578358, 0.9834185298511325, 0.9848765014079528, 0.9876673425176211, 0.986703420626805, 0.9853653451662262, 0.9921378430466282, 0.023297178324868217, 0.026845422346040704, 0.028910571609952473, 0.02058360240108248, 0.049532114804138105, 0.005942044000668334, 0.027659520793338888, 0.03597019460164497, 9.999999999998899e-05, 0.10027683525177622, 0.05313950245750787, 0.0525024652425482, 0.0782216919119374, 0.07981098010038057, 0.09308780912620984, 0.05377294721665671, 0.05931056463008866, 0.06996353519386089, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013109261918822113, 0.018211177184927707, 0.010692275257556005, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018278800771833636, 0.014732175527018776, 0.02965384933148585, 0.03409506330375767, 9.999999999998899e-05, 0.029725502894825895, 0.0032536641789531195, 9.999999999998899e-05, 0.0013723076328092665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1515283039677512, 0.13879659513922615, 0.14838054695461433, 0.112965310550595, 0.13849705416540836, 0.10450543865056938, 0.16866025019977093, 0.12883250743883945, 0.209618887120115, 0.03482218562368089, 0.03289914331092658, 0.03207048900895515, 0.0442088678149386, 0.009491884351982671, 0.018446163905014856, 0.010357015183768081, 0.02797481696974935, 0.02883543305798486, 0.19466617492823213, 0.1523885871314331, 0.15145868715440924, 0.17598084591150387, 0.1312228108170539, 0.14379885477821586, 0.13082622128090038, 0.12282755993815297, 0.13157910819387164, 0.1170361718199916, 0.12965285599414023, 0.14352810184653642, 0.13800672315110074, 0.1254621853066763, 0.11358424952663515, 0.13005630962503223, 0.17377774300845283, 0.12788107560826045, 0.05840910592184423, 0.05597059733961507, 0.05976142062822232, 0.07331437885681369, 0.0645190709639657, 0.08453997405420155, 0.0837317855149382, 0.0997711199450243, 0.0689921354878712, 0.11943364695601921, 0.10566594196392676, 0.1371530844514498, 0.11567011186867349, 0.12126268029950005, 0.12169189987161821, 0.12245976138762271, 0.09903795660385473, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015251920561685228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09278928711965295, 0.13202557988188857, 0.09929464698356771, 0.11311183709927086, 0.1207914665021157, 0.09975223996001426, 0.10518677330595205, 0.09643604708838482, 0.16657478629922917, 0.11040265245322212, 0.10051730792859848, 0.0585452403690937, 0.10253388189071044, 0.06166956646149324, 0.05950420137188461, 0.14126812316136805, 0.1728241127884812, 0.16403713573630396, 0.19386796150818475, 0.1724882329900853, 0.16869466434890368, 0.1819913304106885, 0.1855502066310335, 0.1828142098561477, 0.17128562683401438, 0.18334636215796174, 0.19989289502432073, 0.04615889531952233, 0.017291610158118087, 0.031393493129599714, 0.027015293023570086, 0.03425093938292756, 0.020045516730027746, 0.03698839647609253, 0.024244866581885405, 0.028285651594957884]}, "mutation_prompt": null}
