{"id": "78cd316c-bf86-41dc-aa7a-d5a112ed70b2", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def __call__(self, func):\n        # Evaluate the initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.eval_count += 1\n            if self.eval_count >= self.budget:\n                return self._best_solution()\n        \n        # Main optimization loop\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                # Mutation and Crossover\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                mutant_vector = x1 + self.mutation_factor * (x2 - x3)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover\n                crossover_prob = np.random.rand(self.dim) < self.crossover_rate\n                if not np.any(crossover_prob):\n                    crossover_prob[np.random.randint(0, self.dim)] = True\n                trial_vector = np.where(crossover_prob, mutant_vector, self.population[i])\n                \n                # Local Search Mechanism\n                if np.random.rand() < 0.5:\n                    trial_vector += np.random.normal(0, 0.1, self.dim)\n                    trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                self.eval_count += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n\n                if self.eval_count >= self.budget:\n                    return self._best_solution()\n        \n        return self._best_solution()\n\n    def _best_solution(self):\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "A Hybrid Differential Evolution with Adaptive Parameter Control and Local Search to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.31613950245437505, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7335258488835225, 0.7328665494619915, 0.738609261941982, 0.7454018089286775, 0.721160827034407, 0.7370767202507837, 0.7281197893895068, 0.7401781377586303, 0.7189546767021784, 0.43069714970659523, 0.40237865569300446, 0.4037928022498387, 0.44571136870665196, 0.3848728623555444, 0.41601819939557694, 0.44925123142799883, 0.40880968164941256, 0.35912899347145166, 0.12987352407336128, 0.11245721547323173, 0.11718790639228793, 0.10597721046018216, 0.15027163119282927, 0.10780241276580693, 0.10946803611743583, 0.10075219834280602, 0.10976131199629713, 0.09149400847825329, 0.09755977371816515, 0.10425273314167027, 0.10398549040057437, 0.10732237488306817, 0.10128634729152985, 0.09939374035777859, 0.11442868891717861, 0.10341009862401174, 0.9135540221141865, 0.9285320974380564, 0.8708123694653352, 0.9103420905271489, 0.9206696071928078, 0.8838987124555862, 0.8921320537427424, 0.8999956146029349, 0.9007268712451675, 0.3875489245168181, 0.3607788240516736, 0.3739637942908707, 0.3826502139659952, 0.3364880217744126, 0.4121009036580152, 0.37292481286099943, 0.3497550879982132, 0.398972021010756, 0.722942930693601, 0.7628349598188229, 0.7333882619014999, 0.7393975092539402, 0.7889947081160039, 0.6863699143146995, 0.7366229044764661, 0.7102839116575816, 0.7094423490551569, 0.20959138427958168, 0.22510561117901384, 0.1952547709436636, 0.21183330324755778, 0.14708219720448612, 0.26737085596882526, 0.21027459853519403, 0.2082067317118892, 0.2421698740892938, 0.1994858192120894, 0.24678866393754895, 0.19017121427570105, 0.1951127772778466, 0.17012065559167167, 0.21375732472501885, 0.19946277099276244, 0.20261380618503655, 0.20242497350139554, 0.2340908581604506, 0.22275160656451654, 0.20795541573040577, 0.2051408928187186, 0.20493410651929134, 0.21227056974657288, 0.18314092328468567, 0.1984680797334153, 0.23828962086511352, 0.30100135938727723, 0.2878965981515277, 0.3080546333848927, 0.30477664684995776, 0.31387247974035526, 0.35600168505985097, 0.37437803955910287, 0.35623679268415676, 0.3372933782834632, 0.07806696625527143, 0.07356135798549623, 0.06509286270477821, 0.10979226193552405, 0.14807002863597918, 0.07944965261977865, 0.10726196603898841, 0.11691806554017858, 0.0896999598775925, 0.2099581653307364, 0.19848615228422428, 0.2277212796505842, 0.22270899387247023, 0.22753835607769346, 0.2343848581791822, 0.2125342482854059, 0.22500364989729837, 0.20720495179581044, 0.5761006225316162, 0.5848906119991837, 0.602494623598639, 0.5884322597609513, 0.5887617101898627, 0.5970273100750044, 0.5870659886138248, 0.5827555062159462, 0.5832374609658284, 0.09265587026609723, 0.09845295350367944, 0.11659653440163875, 0.09441869378082024, 0.10160506226712496, 0.10001161508522871, 0.09059925280496517, 0.12674531412124757, 0.09628723025279906, 0.15008544344226848, 0.23085837904874473, 0.14012646140444374, 0.13601937074761994, 0.15124135715902898, 0.15079079395806216, 0.14204450321188267, 0.1536672319118132, 0.1452879919277522, 0.3642357092500036, 0.3618623799527526, 0.36024926825639425, 0.3370816526543663, 0.33173110936696737, 0.3329805633642954, 0.3371479819833235, 0.36019014571548924, 0.3697273183086197, 0.2612167684575978, 0.2718290502730478, 0.2835493295038003, 0.28905940382754847, 0.2604217882377351, 0.28667376576573944, 0.2760636934812237, 0.30088609150084666, 0.26851893360568835, 0.19692420434759939, 0.18476231401030396, 0.2258261405230546, 0.20850993073803004, 0.19872746591001678, 0.19332068783644563, 0.21622560182309702, 0.20009069258204426, 0.21500176128471815, 0.19716929156130525, 0.2009828942069256, 0.1982220131211102, 0.18791618813197497, 0.19373113636072703, 0.1883101196690199, 0.22101662739480477, 0.18889208130464674, 0.1941621727792986, 0.5982990238592235, 0.6426456386993703, 0.1692226853311306, 0.7740911989674466, 0.6640318034685453, 0.2004635160287931, 0.1771206159619796, 0.6762012601665943, 0.6043251855961271, 0.7099967885811092, 0.2072991432999659, 0.19410097894608458, 0.6013967553482721, 0.2043444314557169, 0.16294362621774705, 0.21016814728017352, 0.1539155769594145, 0.20872953527831528, 0.19521154604450464, 0.19027837638148226, 0.1951595973198781, 0.21008232682560324, 0.18309538443228657, 0.20615675109975096, 0.18322037856937934, 0.189691030509764, 0.1960823506181517, 0.07607738303599576, 0.08102363224073728, 0.08652231096230589, 0.08464402256999004, 0.08508944956472986, 0.07889803734050005, 0.08374501155767156, 0.0832146435786637, 0.08097039952793617]}, "mutation_prompt": null}
{"id": "0d66bd5d-6ffc-4101-bf85-3648247216b6", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def __call__(self, func):\n        # Evaluate the initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.eval_count += 1\n            if self.eval_count >= self.budget:\n                return self._best_solution()\n        \n        # Main optimization loop\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                # Mutation and Crossover\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                random_factor = np.random.uniform(0.4, 0.6)\n                mutant_vector = x1 + random_factor * (x2 - x3)  # Modified line with random scaling factor\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover\n                crossover_prob = np.random.rand(self.dim) < self.crossover_rate\n                if not np.any(crossover_prob):\n                    crossover_prob[np.random.randint(0, self.dim)] = True\n                trial_vector = np.where(crossover_prob, mutant_vector, self.population[i])\n                \n                # Local Search Mechanism\n                if np.random.rand() < 0.5:\n                    trial_vector += np.random.normal(0, 0.1, self.dim)\n                    trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                self.eval_count += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n\n                if self.eval_count >= self.budget:\n                    return self._best_solution()\n        \n        return self._best_solution()\n\n    def _best_solution(self):\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "HybridDifferentialEvolution", "description": "Enhanced mutation strategy by incorporating a random scaling factor to improve diversity and convergence.", "configspace": "", "generation": 1, "fitness": 0.3177404654365982, "feedback": "", "error": "", "parent_id": "78cd316c-bf86-41dc-aa7a-d5a112ed70b2", "metadata": {"aucs": [0.7317622388947083, 0.749699242467193, 0.7369206251928362, 0.7437168467622148, 0.7115006583242433, 0.740337950713171, 0.7069315386863237, 0.7332959388034127, 0.7524334187650756, 0.42018804224771444, 0.42212266849022717, 0.41846098141198196, 0.38413501422158614, 0.41905678694200466, 0.4329373689609082, 0.4182677083071694, 0.3749533313074165, 0.44140659948591066, 0.11239397453477618, 0.10926999898034995, 0.10310921322373867, 0.10476168466411073, 0.11759039788844894, 0.11471432470379439, 0.12066150901452455, 0.11421196572263381, 0.11750671724804174, 0.10510391888968729, 0.10083077669612373, 0.08644683696855338, 0.11049686209135712, 0.10025373646367375, 0.0992883728490378, 0.09688674684028176, 0.0919666711153303, 0.12345543252081992, 0.8893908150277756, 0.8725896892259775, 0.8997041778361546, 0.8791293702978905, 0.9564240457859023, 0.8621006906746909, 0.8950702615198836, 0.8707304248060901, 0.9008658322982278, 0.36621698103968414, 0.3656919126036151, 0.38707694929414105, 0.3730223311192834, 0.3702427132227384, 0.37042847492172515, 0.371153316513427, 0.3703241101318384, 0.3721710925645415, 0.7307985154872709, 0.7408213859982714, 0.7289552197816938, 0.7767177970845611, 0.7352446737639482, 0.7423036325403651, 0.7256426174049222, 0.7690964749863467, 0.7370722683062824, 0.18920939189937758, 0.21182018789196488, 0.19705574759153743, 0.23547886120800354, 0.19106509690884133, 0.19716021565506447, 0.17299812860383168, 0.20066823692560543, 0.24274680430585516, 0.23343085842346922, 0.19570964302682003, 0.20415082679263874, 0.23383138569904405, 0.18292626008884683, 0.17549095908553025, 0.19007807355152728, 0.20686693280473945, 0.30243141928846395, 0.22870759421874964, 0.23229747835267722, 0.18846677786508326, 0.19952686560312227, 0.18836743641200993, 0.19699225944542775, 0.18172434088677558, 0.16213328882015443, 0.19506096700373343, 0.2970353224137938, 0.30607469679204846, 0.3528070443083957, 0.30407651070038677, 0.29168847048181246, 0.3205651934880338, 0.37597471395619964, 0.30908455993208483, 0.3284179923780246, 0.0655796440874461, 0.07622628181866653, 0.08587288353438416, 0.11775801080818615, 0.10091333067213726, 0.06243371109874518, 0.04828328342279731, 0.09142411693297015, 0.08710478507302888, 0.20077856407337946, 0.21221819926992613, 0.21522331260561756, 0.23424452897499803, 0.21603475339712863, 0.2187086801191983, 0.20464603064764497, 0.20547084909585356, 0.21489653608659842, 0.5604713244303947, 0.5892757241715942, 0.5955157004600958, 0.5798492919574598, 0.5728361222052547, 0.5957310924168773, 0.5617597604326736, 0.5814151166860957, 0.5804506002118699, 0.10033931179041611, 0.0854212285488446, 0.09260260344110027, 0.11914199186443852, 0.09689364323921001, 0.09390011503455875, 0.10809589852426704, 0.08932262700837656, 0.09181856456239801, 0.17766106254960323, 0.15317386132220767, 0.1485307270605627, 0.14006513827835787, 0.15264423068767097, 0.12430820223294736, 0.18759102524957227, 0.1467813378080658, 0.15407989362192875, 0.3498608504598113, 0.35519110323240055, 0.35126538246654204, 0.34282801749232217, 0.3411909948117482, 0.34005304206449016, 0.3855793144606925, 0.37566587779692506, 0.3690151586008692, 0.2755320933265202, 0.2595448785832696, 0.2732792820840011, 0.28160317661298273, 0.2636872871658795, 0.26092550546498317, 0.2872868549486589, 0.2622820534594966, 0.31130742902656017, 0.205439653597269, 0.20118790440886858, 0.1911316308986285, 0.18741025939779088, 0.1859616638428897, 0.2335361640957453, 0.19834961116779226, 0.20017342828040197, 0.22717610420762202, 0.20262534811295152, 0.1876606977462535, 0.19390242593186247, 0.18847730851529332, 0.20285872110587244, 0.2070452663341673, 0.18720115714829255, 0.22173042660861753, 0.2149380147694303, 0.181410783732172, 0.1621421367220175, 0.6701414744911416, 0.6754231207661886, 0.18747052884880855, 0.6422265481718519, 0.5580898254974431, 0.6395197476759663, 0.7667186298576388, 0.7008190112679435, 0.5303941501362128, 0.20403536150784574, 0.20428732741107603, 0.19919758168820534, 0.5437678660662992, 0.714407397725213, 0.20527353312964736, 0.20764651234541143, 0.18082908659475994, 0.17944141823044923, 0.19607448327082344, 0.19220201911052015, 0.18361950104164448, 0.18030973405516382, 0.19162415318686066, 0.17393754526029004, 0.17859665864181085, 0.08411057698837454, 0.07688146247922067, 0.08440056365579551, 0.08948303268848834, 0.08436033926995601, 0.09254642029298721, 0.10146707922624232, 0.08118096420969445, 0.07932375587128138]}, "mutation_prompt": null}
