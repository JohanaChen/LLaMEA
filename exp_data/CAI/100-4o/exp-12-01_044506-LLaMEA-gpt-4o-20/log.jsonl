{"id": "2cded0ab-c9a2-4264-bbac-190c4f7df700", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_individuals = 10\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.num_particles, self.dim))\n        self.best_particle_positions = np.copy(self.particles)\n        self.best_global_position = np.copy(self.particles[0])\n        self.best_particle_costs = np.full(self.num_particles, np.inf)\n        self.best_global_cost = np.inf\n        self.individuals = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_individuals, self.dim))\n        self.CR = 0.9\n        self.F = 0.8\n\n    def __call__(self, func):\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.num_particles):\n                cost = func(self.particles[i])\n                eval_count += 1\n                if cost < self.best_particle_costs[i]:\n                    self.best_particle_costs[i] = cost\n                    self.best_particle_positions[i] = np.copy(self.particles[i])\n                if cost < self.best_global_cost:\n                    self.best_global_cost = cost\n                    self.best_global_position = np.copy(self.particles[i])\n\n            if eval_count >= self.budget:\n                break\n\n            # PSO update\n            inertia_weight = 0.5 + np.random.rand() / 2\n            cognitive_component = np.random.rand(self.num_particles, self.dim)\n            social_component = np.random.rand(self.num_particles, self.dim)\n\n            self.velocities = (inertia_weight * self.velocities\n                               + cognitive_component * (self.best_particle_positions - self.particles)\n                               + social_component * (self.best_global_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n\n            # DE Mutation and Crossover\n            for j in range(self.num_individuals):\n                indices = list(range(self.num_individuals))\n                indices.remove(j)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.individuals[a] + self.F * (self.individuals[b] - self.individuals[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, self.individuals[j])\n                trial_cost = func(trial)\n                eval_count += 1\n                if trial_cost < func(self.individuals[j]):\n                    self.individuals[j] = trial\n\n            # Adaptive DE adjustment\n            if eval_count % (self.budget // 10) == 0:\n                self.CR = np.clip(self.CR + 0.1 * (np.random.rand() - 0.5), 0, 1)\n                self.F = np.clip(self.F + 0.1 * (np.random.rand() - 0.5), 0.5, 1.0)\n\n        return self.best_global_position, self.best_global_cost", "name": "HybridPSO_DE", "description": "Hybrid Particle Swarm Optimizer with Adaptive Differential Evolution for global exploration and local exploitation balancing.", "configspace": "", "generation": 0, "fitness": 0.2892514345246242, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7580614068916229, 0.7836795792050731, 0.7823523818040802, 0.7862556681336876, 0.8115102636670771, 0.7797576983170118, 0.7787486284482877, 0.7871222665962618, 0.7703498160598337, 0.4437939044686484, 0.027240790356986455, 0.4056369577814426, 0.3537937435827758, 0.452304990578973, 0.4020324526948008, 0.4485505214091047, 0.39942501135110975, 0.4191010559004852, 0.11359657380520205, 0.11009946443176122, 0.16731029052485114, 0.43027517285740724, 0.12920994085684356, 0.13897356462944244, 0.1471809003148481, 0.1674134094789118, 0.16451311130555024, 0.14910603226583785, 0.12223351934505211, 0.13799070797154456, 0.11515140321366457, 0.12925573785321542, 0.12384886788860983, 0.14205955092556033, 0.1365848250791587, 0.11849330884255194, 0.9689667084199955, 0.9734233017216473, 0.9739780960917893, 0.958156107994838, 0.9621971217109644, 0.943004417018202, 0.9749021845207654, 0.961574825790455, 0.9676059670924657, 0.5556771101621283, 0.5336616800536309, 0.5136359379932778, 0.5073154410496651, 0.4658067944092009, 0.5125033361269391, 0.5123141240428215, 0.18497337025475213, 0.5541895167002633, 0.3028962892754734, 0.3871577656218931, 0.2923208809038531, 0.258460958694511, 0.2712964254425375, 0.21302228229857834, 0.21799064165608428, 0.44472937895739517, 0.22120803038302883, 0.17260816045535265, 0.13282054874514415, 0.19442533692704067, 0.12044506451862713, 0.14858192387760316, 0.20752032693853506, 0.20203989109320153, 0.2860536459076507, 0.19653213129605185, 0.27453034257186804, 0.21734354282604684, 0.22341094584786902, 0.20179698389294543, 0.18473882609943804, 0.1870812592187262, 0.2241515938783738, 0.12574828013549, 0.23189395306771887, 0.09855872264546273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04031708424180158, 0.007018091037993335, 0.01503037186630174, 0.0599565942205913, 0.05887397339973899, 0.08172898388867611, 0.059157700962509496, 0.11724395556229261, 0.14193227259729224, 0.05960844986027203, 0.07645764820514522, 0.105389739780546, 0.1811577401254565, 0.07371583075104804, 0.09199790649352346, 0.029157671684940767, 0.04225307067354911, 0.09402309674353759, 0.2564927435487252, 0.07726087185973007, 0.08206338840571681, 0.0963791040687112, 0.12118570365816028, 0.19059984883686654, 0.12117061401628126, 0.10832042951245768, 0.14292570347544675, 0.14949278317815895, 0.14791235236188693, 0.075516656577297, 0.12968035719455184, 0.07909430350638724, 0.4723334632402423, 0.4988690897010106, 0.5348409213987299, 0.5569863403464259, 0.5133055787741707, 0.5397326347965099, 0.5304916403939621, 0.5420870132737896, 0.541295956877071, 0.07760516886604951, 0.1126588507066022, 0.06902841745698718, 0.09147638191490737, 0.08146516170696905, 0.12479468354910583, 0.10700906284697431, 0.09663445001115067, 0.11509453471003073, 0.183948420010286, 0.22872851801745797, 0.2177521657226814, 0.24419828382986375, 0.27193574591923464, 0.19142135677415417, 0.2539251918588231, 0.2594851101766458, 0.2543833254314716, 0.29386818982229246, 0.35957848567289163, 0.4045551600503505, 0.2793887542642869, 0.2744510608686149, 0.46428706012474197, 0.32809535058282624, 0.467072712028039, 0.37581827427526804, 0.22773114727860788, 0.2090892375264719, 0.24803426313090537, 0.2350033450514365, 0.25347530130701856, 0.33457648240715443, 0.3418199501724135, 0.3274959130751145, 0.16406621699716561, 0.19538732814989435, 0.19952979425251216, 0.19998863018799795, 0.24707482130778646, 0.2053781011189868, 0.23102479543627874, 0.20268556201981924, 0.19172363573696205, 0.22939548046885405, 0.19099833529332533, 0.5903005190469437, 0.18677713091736992, 0.19106039425676336, 0.37288888087680283, 0.22973499631311778, 0.22338312094631896, 0.19736387178077763, 0.2091980022395672, 0.8284798204335598, 0.1739737287633878, 0.1529292119273512, 0.3928617412256543, 0.6840105434562305, 0.1985749202658028, 0.14183473849049566, 0.5150597337838574, 0.8680358927493339, 0.6758707014598392, 0.20993180563768332, 0.10303928441777266, 0.20690501185208454, 0.47177925892604766, 0.18260745778514298, 0.137827089831842, 0.13509988852977917, 0.6941108583116913, 0.18203323572573682, 0.1761066586925144, 0.19638133829798676, 0.180147977634603, 0.18886590197843212, 0.18583539506509483, 0.1972024852419949, 0.19920701640953709, 0.19883248132774745, 0.13720231849508346, 0.08421730134710614, 0.0914533988462497, 0.10281849575244739, 0.09443247383626752, 0.0942232464101811, 0.11434010768270852, 0.09512495226860551, 0.08348687569882218]}, "mutation_prompt": null}
{"id": "5144291d-f17b-45ff-a04e-76d9c9331cbf", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_individuals = 10\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.num_particles, self.dim))\n        self.best_particle_positions = np.copy(self.particles)\n        self.best_global_position = np.copy(self.particles[0])\n        self.best_particle_costs = np.full(self.num_particles, np.inf)\n        self.best_global_cost = np.inf\n        self.individuals = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_individuals, self.dim))\n        self.CR = 0.9\n        self.F = 0.8\n\n    def __call__(self, func):\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.num_particles):\n                cost = func(self.particles[i])\n                eval_count += 1\n                if cost < self.best_particle_costs[i]:\n                    self.best_particle_costs[i] = cost\n                    self.best_particle_positions[i] = np.copy(self.particles[i])\n                if cost < self.best_global_cost:\n                    self.best_global_cost = cost\n                    self.best_global_position = np.copy(self.particles[i])\n\n            if eval_count >= self.budget:\n                break\n\n            # Dynamic Inertia PSO update\n            inertia_weight = 0.4 + 0.1 * (1 - eval_count / self.budget)\n            cognitive_component = np.random.rand(self.num_particles, self.dim)\n            social_component = np.random.rand(self.num_particles, self.dim)\n\n            self.velocities = (inertia_weight * self.velocities\n                               + cognitive_component * (self.best_particle_positions - self.particles)\n                               + social_component * (self.best_global_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n\n            # Targeted DE Mutation and Crossover\n            for j in range(self.num_individuals):\n                if eval_count >= self.budget:\n                    break\n                indices = list(range(self.num_individuals))\n                indices.remove(j)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.individuals[a] + self.F * (self.individuals[b] - self.individuals[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, self.individuals[j])\n                trial_cost = func(trial)\n                eval_count += 1\n                if trial_cost < func(self.individuals[j]):\n                    self.individuals[j] = trial\n\n            # Adaptive DE adjustment\n            if eval_count % (self.budget // 10) == 0:\n                self.CR = np.clip(self.CR + 0.1 * (np.random.rand() - 0.5), 0, 1)\n                self.F = np.clip(self.F + 0.1 * (np.random.rand() - 0.5), 0.5, 1.0)\n\n        return self.best_global_position, self.best_global_cost", "name": "HybridPSO_DE", "description": "A refined Hybrid PSO-DE algorithm introduces dynamic inertia weight adjustment and targeted DE exploration to enhance search efficiency.", "configspace": "", "generation": 1, "fitness": 0.2893162538410231, "feedback": "", "error": "", "parent_id": "2cded0ab-c9a2-4264-bbac-190c4f7df700", "metadata": {"aucs": [0.8918521661055897, 0.8913210788392574, 0.8913157545115502, 0.8935721762150745, 0.8665760364990712, 0.9022375871110913, 0.8871290138640435, 0.8934992350637496, 0.8906254329404344, 0.30964800994507624, 0.24402415703126568, 0.19128328923652993, 0.26179333903005464, 0.13298560060282993, 0.3126644240245733, 0.25192136671545495, 0.3116334170613658, 0.2822293848789862, 0.10183469207173479, 0.11351239471524421, 0.09208568122756611, 0.10893567779892621, 0.11846354494584665, 0.14494266595964678, 0.11798047066915429, 0.17973896385683308, 0.14448995806970344, 0.08536148336601568, 0.10764933890738826, 0.11372212735684861, 0.11542175103751584, 0.13888831633770238, 0.09671289177581999, 0.09136229424013709, 0.10506207106686705, 0.09265078850034714, 0.9507196764856909, 0.9576028947310253, 0.9617504057875623, 0.9709332417929006, 0.9442885186236, 0.9615317647034498, 0.9781146718978646, 0.9433098123634782, 0.9555078486375118, 0.5591616835602937, 0.4022899066733898, 0.35335450181213957, 0.755357566330243, 0.22810683509262863, 0.7736046963483355, 0.5447783036785889, 0.2397031747879409, 0.6776492847126157, 0.38102597351231293, 0.8668482765094981, 0.43292795722508004, 0.23804295807819165, 0.27778118301461996, 0.33716220677795194, 0.3384351000660232, 0.21828983279191738, 0.3304328965110218, 0.2099617945436667, 0.15917345697595608, 0.1469992477567199, 0.12922301002680636, 0.17742973046208577, 0.15045503199034937, 0.1313256397873469, 0.19154897471710486, 0.22869134104828281, 0.15797402687472573, 0.12617583283055478, 0.11362383131931797, 0.1374157632935361, 0.13382542574811718, 0.17695997260265028, 0.28458061802386025, 0.10467343023053122, 0.2098193940491636, 0.0059025975882366355, 0.007417215164478019, 0.05173016495278904, 0.01699697365884989, 0.014478361968108922, 0.04509181609484314, 0.03947933133615755, 9.999999999998899e-05, 0.12346363710584973, 0.17948802680756903, 0.19297312569823266, 0.1320936410529977, 0.05425804285433167, 0.042474750164160135, 0.02960249387586611, 0.12209295226651717, 0.12346099329727944, 0.10434788360838354, 0.12214504850264019, 0.042976684178935964, 0.0533812042620766, 0.17381231875239866, 0.13852491081441276, 0.12329382453679205, 0.17274830161444676, 0.14617278073751605, 0.2675187676221391, 0.22781748507346422, 0.16816104837415846, 0.1438310096377956, 0.18769505621033455, 0.0735455043708515, 0.17569705006690362, 0.11229538566455644, 0.10449964536930878, 0.11617454994618515, 0.5632315313056788, 0.5172482012606123, 0.5463406913835686, 0.5134791205706664, 0.6562045237402991, 0.4851925028764269, 0.5798999933879567, 0.5477285153688174, 0.5929840093089045, 0.09608708093511997, 0.12097886138896718, 0.0716468660262346, 0.17873664421975832, 0.10745569532544452, 0.15783524974841168, 0.09992747745700103, 0.08417738607055347, 0.1087395921273916, 0.16622221694966177, 0.28095701033758935, 0.20329252766538464, 0.19035144935427528, 0.2679992610187668, 0.18209032270625103, 0.19357985936662092, 0.326646675460615, 0.21201116262723374, 0.31831798679966783, 0.3489922084692898, 0.33233645761269437, 0.2578128133267009, 0.27734716776600643, 0.2538520730698761, 0.38704083913650134, 0.4233508948835695, 0.29182339185851636, 0.27865361782211684, 0.30854542107758387, 0.33226533119757584, 0.24519729862994177, 0.3190174853564799, 0.21253380860361804, 0.2395711781757215, 0.34853373008804134, 0.31185925552563, 0.2497580391299431, 0.180860747136793, 0.1874078509733913, 0.2548058907186421, 0.19233629053148826, 0.1867025934262685, 0.19329370553717895, 0.24221862263072036, 0.2580142978922312, 0.20932182732829507, 0.20391949796110098, 0.2249931947519147, 0.18489481063833657, 0.19941781008674975, 0.18653444512978623, 0.20284300000486533, 0.2532672721288052, 0.1782182096830187, 0.1879592884940684, 0.1647601749150186, 0.17916132730464684, 0.9280405582386129, 0.2006392428704028, 0.20041237430213232, 0.4033541323889088, 0.1642950886980803, 0.9093081684959202, 0.7066286409584035, 0.3979626807756298, 0.5112351525745608, 0.3794171415877776, 0.3771426043640488, 0.18359806609338347, 0.14698011013097056, 0.2998563828283928, 0.3632993643098521, 0.20045022849866978, 0.25714188824166573, 0.21435190986922936, 0.1984715641212219, 0.21858845869912968, 0.19761184302873702, 0.19640397255995812, 0.18390940157118418, 0.21351487661156987, 0.0971618370003765, 0.08786231647205078, 0.08975060092487142, 0.10043245598136652, 0.07501753983633275, 0.09302902430431537, 0.10837859368517311, 0.0942894193162741, 0.07555404693526668]}, "mutation_prompt": null}
