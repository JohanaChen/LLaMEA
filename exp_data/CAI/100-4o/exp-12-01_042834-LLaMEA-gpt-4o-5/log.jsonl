{"id": "4e4cd95b-5dbe-4285-a39b-336142724842", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.num_particles, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.num_particles, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.f = 0.5\n        self.cr = 0.9\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.num_particles):\n                score = func(self.particles[i])\n                evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = np.copy(self.particles[i])\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = np.copy(self.particles[i])\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.personal_best_positions[i] - self.particles[i]) +\n                                      self.c2 * r2 * (self.global_best_position - self.particles[i]))\n                self.particles[i] += self.velocities[i]\n                self.particles[i] = np.clip(self.particles[i], self.lower_bound, self.upper_bound)\n\n                # Differential Evolution Mutation (DE)\n                indices = [idx for idx in range(self.num_particles) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.personal_best_positions[a] + self.f * (self.personal_best_positions[b] - self.personal_best_positions[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                j_rand = np.random.randint(self.dim)\n                trial_vector = np.copy(self.particles[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == j_rand:\n                        trial_vector[j] = mutant_vector[j]\n\n                # Selection\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < score:\n                    self.particles[i] = trial_vector\n                    self.personal_best_positions[i] = trial_vector\n                    self.personal_best_scores[i] = trial_score\n                    if trial_score < self.global_best_score:\n                        self.global_best_score = trial_score\n                        self.global_best_position = trial_vector\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSODE", "description": "Hybrid particle swarm and differential evolution algorithm using adaptive mutation to explore and exploit search space efficiently.", "configspace": "", "generation": 0, "fitness": 0.37039550728211157, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7535605924988737, 0.7291770919777215, 0.7938931382499825, 0.774373358806476, 0.8123913085076703, 0.7753639470233105, 0.777973365389124, 0.7495613314348517, 0.7909582592603991, 0.5835040126929674, 0.5402950830817683, 0.5414926079092501, 0.5322644175050298, 0.47971972576132293, 0.5591936580761937, 0.4841399003286284, 0.41564957466057373, 0.5899048144074535, 0.14216062163612586, 0.11605626275604974, 0.13042683791024245, 0.14232633000053607, 0.13462935927238762, 0.13464620934849936, 0.15764703237988364, 0.11906843263999545, 0.12001682086562382, 0.09223707865683195, 0.10998964676500944, 0.14374384753184677, 0.11353377206443749, 0.08770234140603228, 0.10045962367947847, 0.12408695160815586, 0.13087783245732176, 0.09589528312773221, 0.9709649397411557, 0.9731225860831544, 0.9564070050508866, 0.9703594509760649, 0.9824158240849962, 0.9443575243084029, 0.9555378579828285, 0.9735333124472536, 0.9723051766365863, 0.28632528333268115, 0.2606627427576925, 0.06478715666080348, 0.3974910564196682, 0.25416454695970536, 0.23557909598493654, 0.3319529266563872, 0.37138250791493266, 0.42639714404397056, 0.789441632805395, 0.7955586903527849, 0.814683045420841, 0.8799021638233807, 0.2044845157684081, 0.18678179980250054, 0.8128946066676479, 0.1449225314564303, 0.7016142303648495, 0.5828652089167734, 0.4539091034002447, 0.4969740982888239, 0.3804419100642985, 0.1252769323042343, 0.4594632705598729, 0.5402669489872663, 0.5468663843053116, 0.44414130601965585, 0.46576684306877236, 0.44419294113865937, 0.5160679294694986, 0.39276715417593044, 0.4265575671506363, 0.5186183893747377, 0.13050333284354165, 0.12263932592148197, 0.5833926164018497, 0.21056007814161726, 0.473021927731771, 0.47810245258442274, 0.2962519547408943, 0.03204110046046704, 0.4653502784369339, 0.4883129169886874, 0.41749466911148037, 0.4004696141744549, 0.6709081632990251, 0.40891238458618306, 0.5679167929014978, 0.6630146483260917, 0.5421936201871741, 0.47832979569076217, 0.6616584987228994, 0.4812255524480574, 0.5559130265726744, 0.08350229328884051, 0.029116327441556678, 0.11074140315694947, 0.19320101808468637, 0.05837371755435361, 0.2677407287743968, 0.08163053372617013, 0.180329971103786, 0.06248414438323302, 0.40158786047832307, 0.38465292087117475, 0.4308219696824023, 0.38854761312684527, 0.42292668354206076, 0.40243988378078954, 0.3942617337423281, 0.28312402465347575, 0.3670982713369786, 0.7357627765967412, 0.6965701710476062, 0.715223259368968, 0.7197005291118598, 0.7312438091384073, 0.614823347437045, 0.7276769011183984, 0.7460183445572932, 0.7398358597083855, 0.13244564157304994, 0.14996094512391522, 0.11758568722258256, 0.1406460039245785, 0.12074202349638796, 0.1492362243217129, 0.11067697270381871, 0.10088120185987448, 0.11312501826968868, 0.3794552317573071, 0.3574618374724985, 0.19611499419306966, 0.24715676497336925, 0.2840221973815905, 0.21185110014380204, 0.16678949946092858, 0.2864944387802356, 0.2207055566824626, 0.4132660671453997, 0.4367394573073712, 0.45057677975421395, 0.46902387939129153, 0.2117388452234671, 0.46126454597034827, 0.27818369239244733, 0.5081128047748098, 0.4478198923745108, 0.2917581585051253, 0.34860089960318186, 0.27071912125151165, 0.3633643863177315, 0.31643340136927545, 0.3299611064847481, 0.22536979893959452, 0.42974178096001114, 0.18701679916763825, 0.19752468457775763, 0.18621398057955685, 0.21672284638108197, 0.2107306175103869, 0.22200974340855917, 0.20575336853192616, 0.2233535881706834, 0.20567503347631444, 0.20661100206328686, 0.2505049295937175, 0.2211962931529442, 0.21828273278625732, 0.2427880568408426, 0.18144692848673716, 0.21693662420160942, 0.19032423368714413, 0.17596369501131814, 0.190351735950681, 0.8574690919568401, 0.16430342051073, 0.15157301957091074, 0.8695356364327782, 0.19895080556647105, 0.19850153894102796, 0.14120448027398325, 0.16321901338128186, 0.1857511929355108, 0.8762715272300986, 0.21006063153761356, 0.20511859106082952, 0.7990527206334244, 0.1118105783907265, 0.20074973060601742, 0.7813000418508064, 0.1269111452568028, 0.21013680991281225, 0.18171020875790656, 0.19673503654990532, 0.18999491691839532, 0.1867287365910547, 0.18369790375350692, 0.1825409356217157, 0.17385234974435648, 0.18359514140457744, 0.20132112426202453, 0.08074278862082884, 0.0848818129885982, 0.086130968738525, 0.0837422223415124, 0.07711437649835684, 0.08413159744069088, 0.09070499222110684, 0.08637498972388602, 0.08330198353426244]}, "mutation_prompt": null}
{"id": "3eb9136c-d550-4bfe-895a-5725fc1db66f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.num_particles, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.num_particles, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.f = 0.5\n        self.cr = 0.9\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.num_particles):\n                score = func(self.particles[i])\n                evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = np.copy(self.particles[i])\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = np.copy(self.particles[i])\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.personal_best_positions[i] - self.particles[i]) +\n                                      self.c2 * r2 * (self.global_best_position - self.particles[i])) \n                # Adaptive velocity adjustment based on proximity to global_best_position\n                self.velocities[i] *= (1 - 0.5 * (np.linalg.norm(self.particles[i] - self.global_best_position) / (self.upper_bound - self.lower_bound)))\n                self.particles[i] += self.velocities[i]\n                self.particles[i] = np.clip(self.particles[i], self.lower_bound, self.upper_bound)\n\n                # Differential Evolution Mutation (DE)\n                indices = [idx for idx in range(self.num_particles) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.personal_best_positions[a] + self.f * (self.personal_best_positions[b] - self.personal_best_positions[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                j_rand = np.random.randint(self.dim)\n                trial_vector = np.copy(self.particles[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == j_rand:\n                        trial_vector[j] = mutant_vector[j]\n\n                # Selection\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < score:\n                    self.particles[i] = trial_vector\n                    self.personal_best_positions[i] = trial_vector\n                    self.personal_best_scores[i] = trial_score\n                    if trial_score < self.global_best_score:\n                        self.global_best_score = trial_score\n                        self.global_best_position = trial_vector\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSODE", "description": "Hybrid particle swarm optimization and differential evolution with adaptive velocity adjustment to enhance convergence speed and solution quality.", "configspace": "", "generation": 1, "fitness": 0.4067854217612944, "feedback": "", "error": "", "parent_id": "4e4cd95b-5dbe-4285-a39b-336142724842", "metadata": {"aucs": [0.8179221538719001, 0.7980411777890564, 0.7913003086193788, 0.7930467938191441, 0.8459535059926201, 0.8388572674437609, 0.8267954717245497, 0.8085951445285725, 0.7877171970474, 0.6438701262780141, 0.6270466719029071, 0.5839990276644779, 0.579064503252976, 0.5277571067223645, 0.5563362267106955, 0.5671608301829147, 0.3851990928421978, 0.5337456550296491, 0.110853553842996, 0.13596490794474392, 0.1388594316055931, 0.10296649420542547, 0.12758043518295759, 0.1112244062240888, 0.1282065557196287, 0.10263504486177266, 0.13674068486649282, 0.11298902329594296, 0.1063440670663216, 0.0898765844239311, 0.10753546605597952, 0.12605174493081595, 0.08684610855131558, 0.1561064883408395, 0.13060231704257763, 0.10609029282912164, 0.9613954754444646, 0.9530938884790556, 0.9369080643607391, 0.9446679611556869, 0.9612456117478239, 0.9275870205019836, 0.936660653394992, 0.9549532126493113, 0.9467197208482434, 0.40017512775586195, 0.40650781259988866, 0.38054349285002353, 0.37765224373212514, 0.4057065285466529, 0.35201513758218617, 0.38867263784694317, 0.3734198770716285, 0.4309403027828852, 0.8776656008241701, 0.22746640670479845, 0.8868890468587659, 0.27389687870802926, 0.8656451878989779, 0.8327254617869329, 0.774477665798535, 0.7960204146671797, 0.22460969882193527, 0.5895918910942637, 0.5477938148643887, 0.5579713089475191, 0.12161029547871072, 0.12834790710447452, 0.5658744357853673, 0.5261491793225808, 0.4506936038405198, 0.5636249047597999, 0.6049318224694048, 0.5737394421266693, 0.687228763304379, 0.4115476073196337, 0.5122705358675832, 0.5387720096809232, 0.557073508359489, 0.6616791820784984, 0.12539902525337, 0.6034549048627471, 0.5755658247201022, 0.4407504489766688, 0.028311730697814896, 0.11501392415933753, 0.2077153253877524, 0.6144251504341778, 0.5537878664171276, 0.6553753814350926, 0.6523651068537032, 0.6265774203102448, 0.6796404153233837, 0.6890397676381754, 0.6336218145246248, 0.6214183617809668, 0.6896453893808162, 0.6985929571381159, 0.7031002964043536, 0.3172848744578628, 0.35676432828553617, 0.16050756791452092, 0.09150875836076333, 0.32324114001068915, 0.19185504356748018, 0.18382508679372322, 0.21910106256049444, 0.0911758894251048, 0.44944115869986623, 0.3897135520591183, 0.41749130937861223, 0.3665343494823605, 0.4170659573349319, 0.4641223021465869, 0.4157302639638911, 0.07737304065356942, 0.4391610746212501, 0.7494142907878505, 0.7771751765669467, 0.7354398208034364, 0.7216426943837728, 0.7487724431668412, 0.7237734870824486, 0.7540528005344181, 0.7519726499540953, 0.7398167273441977, 0.094013461491113, 0.1305646994336861, 0.09302362847248968, 0.12771123962112874, 0.1294022395771388, 0.13763774913196758, 0.17763509482220885, 0.1102704445450936, 0.11346369410130663, 0.2290681801408203, 0.3329987732156413, 0.25756536258705587, 0.20092324084168878, 0.26588091485209486, 0.19197235919301125, 0.23185097496723062, 0.4845636426171871, 0.5236713089831577, 0.27652988382187205, 0.5194139546631531, 0.49431504134692406, 0.42168033120981974, 0.3480047452832643, 0.43326815152718867, 0.26568705181616004, 0.541220412975983, 0.25377405797308106, 0.3936659377463013, 0.4378663333929509, 0.4396676368812399, 0.4809300894825924, 0.2518631999707609, 0.5024626952270096, 0.42240201775097597, 0.31357295748267955, 0.25495655427455555, 0.23305402042554568, 0.21810646278567425, 0.19934972868284873, 0.21410208100098482, 0.19744921575240304, 0.211227167339598, 0.25114987228454844, 0.22277076013971486, 0.23231602944263463, 0.20261210908136384, 0.1894118667282254, 0.19556223848869347, 0.1873402155192192, 0.22043939071979557, 0.20060097181909842, 0.23695025440795425, 0.2036232043958235, 0.1947723305298602, 0.18649227835261628, 0.17476296229553867, 0.15223258149846497, 0.8849896943323416, 0.1986170278103745, 0.1991996029861932, 0.14167463067743247, 0.166598665697115, 0.879455751101361, 0.8713941994793608, 0.21010370391790145, 0.12612799043881917, 0.7856750116015911, 0.20148004909142447, 0.16732733592305793, 0.8444396895710113, 0.8876260697006002, 0.8137975210970477, 0.18609332275140922, 0.1734663783327196, 0.19310236295416694, 0.1725820584136767, 0.17875721421446, 0.1873358183589242, 0.18691408431784684, 0.1832821541394739, 0.2124990110635242, 0.11617096515111958, 0.08999527489533155, 0.08523055855333173, 0.08349081214221732, 0.07558822476437488, 0.0776429354675251, 0.08122855719596223, 0.08552045866962199, 0.09561898824104842]}, "mutation_prompt": null}
