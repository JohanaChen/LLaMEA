{"id": "af52b7df-4d6d-44d1-9db2-f5b0484d6a0b", "solution": "import numpy as np\n\nclass DE_AdaptiveSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.bounds = (-5.0, 5.0)\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.7\n        self.init_temp = 100  # Initial temperature for simulated annealing\n        self.cooling_rate = 0.95  # Cooling rate for simulated annealing\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx].copy()\n        best_fitness = fitness[best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, *self.bounds)\n                \n                # Crossover\n                trial = np.copy(population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_rate\n                trial[cross_points] = mutant[cross_points]\n                \n                # Evaluate the trial individual\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                # Adaptive Simulated Annealing\n                temperature = self.init_temp * np.power(self.cooling_rate, evaluations // self.pop_size)\n                if np.exp((fitness[i] - trial_fitness) / temperature) > np.random.rand():\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Check budget\n                if evaluations >= self.budget:\n                    break\n\n        return best_solution, best_fitness", "name": "DE_AdaptiveSA", "description": "A blend of Differential Evolution and Adaptive Simulated Annealing that dynamically adjusts mutation and crossover rates for efficient exploration and exploitation within the set budget.", "configspace": "", "generation": 0, "fitness": 0.18666821906185896, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.2958742053040413, 0.3020430044158532, 0.3049030228799954, 0.30379188324894646, 0.30164771692166337, 0.311851006605416, 0.3091558863974364, 0.3105260907530224, 0.3020804478710579, 0.26379639595150717, 0.26631164670565455, 0.2639214441642903, 0.2660178890860987, 0.26412809500612233, 0.27391728840994656, 0.261106921579618, 0.2658626041653206, 0.2757143365374204, 0.1087886702438533, 0.11133007943997508, 0.09942969863205742, 0.10574521471375864, 0.11557028782342527, 0.11134387967464787, 0.10388433981345713, 0.09548312391802372, 0.11348621602381204, 0.09893668022448943, 0.10105694468441784, 0.09703489478999527, 0.1025230612328929, 0.0978826587894277, 0.10033788643629671, 0.10009754149186223, 0.09948716134959212, 0.10863949796868766, 0.8806459063556675, 0.9675366781861293, 0.9429534617332228, 0.9504125133428986, 0.9604680452558919, 0.9317810607316561, 0.9417262466242715, 0.9506108967209956, 0.9858445849018749, 0.21594516481426995, 0.19125919650212186, 0.19475722309330934, 0.21912225362606197, 0.2142250755752816, 0.20438444300320713, 0.2187529918573613, 0.20755540208674872, 0.2144892414404247, 0.20875655249830694, 0.2168530577858968, 0.208908588003197, 0.223476324984342, 0.20920500363739136, 0.222647801127957, 0.21282334753072896, 0.2269448467472256, 0.23467016004321262, 0.14574073126230136, 0.14758274626741152, 0.15569166162139514, 0.14786465431405416, 0.15661008957812628, 0.14487830230583643, 0.1563731272096247, 0.1426853226349717, 0.16034461664674415, 0.10478130639266325, 0.1005027287313367, 0.12850593813532674, 0.1452628903100862, 0.12090296754986174, 0.15042268558298544, 0.16858356799738772, 0.11921248072544599, 0.12966086395301246, 0.014873614463396412, 0.0025557353332807953, 0.005435817437210777, 0.005426018693408863, 0.0025721709642073654, 0.007917068705684094, 0.0015978062792373349, 0.004173855004331761, 0.000497883889425843, 0.10020023143624346, 0.09304773047413395, 0.1023816459238811, 0.10194546598439702, 0.08059060933624007, 0.08760997380865154, 0.1105009962020318, 0.1191695590727, 0.13328135971049582, 9.999999999998899e-05, 9.999999999998899e-05, 0.00020438720157689438, 0.010396955084313042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012270348571136624, 9.999999999998899e-05, 0.10029573280941861, 0.10192098735360178, 0.09078141918524796, 0.09714185158500699, 0.10943322772963893, 0.09334070251552984, 0.09285215516700807, 0.09756065284485727, 0.09100466207562097, 0.278580073669325, 0.28239514824016476, 0.2823911089019764, 0.2864832880843342, 0.2851320296622708, 0.28056762537661506, 0.295950577317621, 0.2748013837446919, 0.27787117767809355, 0.07945212021380177, 0.07848687593206338, 0.08675711328185931, 0.08100165592229025, 0.08285651948321426, 0.08636282626717873, 0.07178701691097777, 0.07643270479684783, 0.0810129167802437, 0.1698863823488238, 0.14410942079276878, 0.14543139361973934, 0.14603968862898842, 0.14220550926240572, 0.13730287861143387, 0.14899426285062878, 0.14136031219721734, 0.14081432640518887, 0.20613125706104984, 0.2002822125680791, 0.2115743007121268, 0.19869487903274008, 0.18541432811143777, 0.19122708475922878, 0.20739459396652682, 0.22504274826633708, 0.21179389548145322, 0.15972116781706014, 0.13969325381193654, 0.1635381872944367, 0.15139965440369874, 0.13895001755737835, 0.1410963658700073, 0.15928600446391972, 0.1688949836656093, 0.17961250800163453, 0.18490364828491834, 0.1714686234718361, 0.1653501292626126, 0.19253933157343273, 0.1677202817550647, 0.19255907601285038, 0.17013649604761938, 0.17409003636848008, 0.17718187964298215, 0.17591047432522333, 0.18570905882110833, 0.1791905271305615, 0.18028036052420504, 0.16677725762625528, 0.17102209324469952, 0.171269409852442, 0.1811129579682622, 0.18206851140556646, 0.15860026903453361, 0.2746265709574053, 0.271136278725427, 0.17866444994273423, 0.18861485735082317, 0.13888451052674022, 0.1795343863312706, 0.1946143389061128, 0.18816488847186352, 0.15965607598025888, 0.1570229721395774, 0.15114112727267326, 0.1674417244753047, 0.12666646972063933, 0.14422970855274542, 0.19690123444054475, 0.27413623476908155, 0.11671568720117342, 0.18784523357177907, 0.19571592029071194, 0.17445410235001235, 0.1907039566026537, 0.18007922718270097, 0.1749296983822991, 0.19460235615385657, 0.17444071530494798, 0.17208255109408532, 0.0649293932663002, 0.07980295989608077, 0.07045463968367072, 0.07438104037143112, 0.07030397057143523, 0.061661656371586604, 0.07183149269588407, 0.0679848949435451, 0.06622469316187418]}, "mutation_prompt": null}
{"id": "a2aec2bc-0c5c-413e-90c3-05e7489cfa76", "solution": "import numpy as np\n\nclass DE_AdaptiveSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.bounds = (-5.0, 5.0)\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.7\n        self.init_temp = 100  # Initial temperature for simulated annealing\n        self.cooling_rate = 0.95  # Cooling rate for simulated annealing\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx].copy()\n        best_fitness = fitness[best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, *self.bounds)\n                \n                # Crossover\n                trial = np.copy(population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_rate\n                trial[cross_points] = mutant[cross_points]\n                \n                # Evaluate the trial individual\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                # Adaptive Simulated Annealing\n                temperature = self.init_temp * np.power(self.cooling_rate, evaluations // self.pop_size)\n                if np.exp((fitness[i] - trial_fitness) / temperature) > np.random.rand():\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Check budget\n                if evaluations >= self.budget:\n                    break\n\n        return best_solution, best_fitness", "name": "DE_AdaptiveSA", "description": "A blend of Differential Evolution and Adaptive Simulated Annealing that dynamically adjusts mutation and crossover rates for efficient exploration and exploitation within the set budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af52b7df-4d6d-44d1-9db2-f5b0484d6a0b", "metadata": {"aucs": [0.2958742053040413, 0.3020430044158532, 0.3049030228799954, 0.30379188324894646, 0.30164771692166337, 0.311851006605416, 0.3091558863974364, 0.3105260907530224, 0.3020804478710579, 0.26379639595150717, 0.26631164670565455, 0.2639214441642903, 0.2660178890860987, 0.26412809500612233, 0.27391728840994656, 0.261106921579618, 0.2658626041653206, 0.2757143365374204, 0.1087886702438533, 0.11133007943997508, 0.09942969863205742, 0.10574521471375864, 0.11557028782342527, 0.11134387967464787, 0.10388433981345713, 0.09548312391802372, 0.11348621602381204, 0.09893668022448943, 0.10105694468441784, 0.09703489478999527, 0.1025230612328929, 0.0978826587894277, 0.10033788643629671, 0.10009754149186223, 0.09948716134959212, 0.10863949796868766, 0.8806459063556675, 0.9675366781861293, 0.9429534617332228, 0.9504125133428986, 0.9604680452558919, 0.9317810607316561, 0.9417262466242715, 0.9506108967209956, 0.9858445849018749, 0.21594516481426995, 0.19125919650212186, 0.19475722309330934, 0.21912225362606197, 0.2142250755752816, 0.20438444300320713, 0.2187529918573613, 0.20755540208674872, 0.2144892414404247, 0.20875655249830694, 0.2168530577858968, 0.208908588003197, 0.223476324984342, 0.20920500363739136, 0.222647801127957, 0.21282334753072896, 0.2269448467472256, 0.23467016004321262, 0.14574073126230136, 0.14758274626741152, 0.15569166162139514, 0.14786465431405416, 0.15661008957812628, 0.14487830230583643, 0.1563731272096247, 0.1426853226349717, 0.16034461664674415, 0.10478130639266325, 0.1005027287313367, 0.12850593813532674, 0.1452628903100862, 0.12090296754986174, 0.15042268558298544, 0.16858356799738772, 0.11921248072544599, 0.12966086395301246, 0.014873614463396412, 0.0025557353332807953, 0.005435817437210777, 0.005426018693408863, 0.0025721709642073654, 0.007917068705684094, 0.0015978062792373349, 0.004173855004331761, 0.000497883889425843, 0.10020023143624346, 0.09304773047413395, 0.1023816459238811, 0.10194546598439702, 0.08059060933624007, 0.08760997380865154, 0.1105009962020318, 0.1191695590727, 0.13328135971049582, 9.999999999998899e-05, 9.999999999998899e-05, 0.00020438720157689438, 0.010396955084313042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012270348571136624, 9.999999999998899e-05, 0.10029573280941861, 0.10192098735360178, 0.09078141918524796, 0.09714185158500699, 0.10943322772963893, 0.09334070251552984, 0.09285215516700807, 0.09756065284485727, 0.09100466207562097, 0.278580073669325, 0.28239514824016476, 0.2823911089019764, 0.2864832880843342, 0.2851320296622708, 0.28056762537661506, 0.295950577317621, 0.2748013837446919, 0.27787117767809355, 0.07945212021380177, 0.07848687593206338, 0.08675711328185931, 0.08100165592229025, 0.08285651948321426, 0.08636282626717873, 0.07178701691097777, 0.07643270479684783, 0.0810129167802437, 0.1698863823488238, 0.14410942079276878, 0.14543139361973934, 0.14603968862898842, 0.14220550926240572, 0.13730287861143387, 0.14899426285062878, 0.14136031219721734, 0.14081432640518887, 0.20613125706104984, 0.2002822125680791, 0.2115743007121268, 0.19869487903274008, 0.18541432811143777, 0.19122708475922878, 0.20739459396652682, 0.22504274826633708, 0.21179389548145322, 0.15972116781706014, 0.13969325381193654, 0.1635381872944367, 0.15139965440369874, 0.13895001755737835, 0.1410963658700073, 0.15928600446391972, 0.1688949836656093, 0.17961250800163453, 0.18490364828491834, 0.1714686234718361, 0.1653501292626126, 0.19253933157343273, 0.1677202817550647, 0.19255907601285038, 0.17013649604761938, 0.17409003636848008, 0.17718187964298215, 0.17591047432522333, 0.18570905882110833, 0.1791905271305615, 0.18028036052420504, 0.16677725762625528, 0.17102209324469952, 0.171269409852442, 0.1811129579682622, 0.18206851140556646, 0.15860026903453361, 0.2746265709574053, 0.271136278725427, 0.17866444994273423, 0.18861485735082317, 0.13888451052674022, 0.1795343863312706, 0.1946143389061128, 0.18816488847186352, 0.15965607598025888, 0.1570229721395774, 0.15114112727267326, 0.1674417244753047, 0.12666646972063933, 0.14422970855274542, 0.19690123444054475, 0.27413623476908155, 0.11671568720117342, 0.18784523357177907, 0.19571592029071194, 0.17445410235001235, 0.1907039566026537, 0.18007922718270097, 0.1749296983822991, 0.19460235615385657, 0.17444071530494798, 0.17208255109408532, 0.0649293932663002, 0.07980295989608077, 0.07045463968367072, 0.07438104037143112, 0.07030397057143523, 0.061661656371586604, 0.07183149269588407, 0.0679848949435451, 0.06622469316187418]}, "mutation_prompt": null}
