{"id": "93eeac93-70c9-4f8f-bb93-80677bafab68", "solution": "import numpy as np\n\nclass HPSO_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.w = 0.5  # Inertia weight\n        self.c1 = 1.5  # Cognitive (particle) weight\n        self.c2 = 1.5  # Social (swarm) weight\n        self.T_init = 1.0  # Initial temperature for SA\n        self.T_min = 0.001  # Minimum temperature for SA\n        self.alpha = 0.9  # Cooling rate for SA\n\n    def __call__(self, func):\n        # Initialize particle positions and velocities\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-1.0, 1.0, (self.num_particles, self.dim))\n        personal_best_positions = positions.copy()\n        personal_best_scores = np.full(self.num_particles, np.inf)\n\n        # Evaluate the initial population\n        evaluations = 0\n        for i in range(self.num_particles):\n            score = func(positions[i])\n            evaluations += 1\n            personal_best_scores[i] = score\n\n        # Find global best\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index].copy()\n        global_best_score = personal_best_scores[global_best_index]\n\n        # Main optimization loop\n        T = self.T_init\n        while evaluations < self.budget:\n            for i in range(self.num_particles):\n                # Update velocities and positions\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.w * velocities[i] +\n                                 self.c1 * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.c2 * r2 * (global_best_position - positions[i]))\n                positions[i] += velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate the new position\n                score = func(positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i].copy()\n\n                # Simulated Annealing step\n                if score < global_best_score or np.exp((global_best_score - score) / T) > np.random.rand():\n                    global_best_score = score\n                    global_best_position = positions[i].copy()\n\n            # Update temperature\n            T = max(self.T_min, self.alpha * T)\n\n        return global_best_position", "name": "HPSO_SA", "description": "Hybrid Particle Swarm Optimization with Simulated Annealing (HPSO-SA) combines the global exploration of PSO with local refinement using SA for improved convergence.", "configspace": "", "generation": 0, "fitness": 0.33300502694908146, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.5947108733270711, 0.5839003838094923, 0.595531948205019, 0.5707682533203742, 0.5889900904724777, 0.5982461419045548, 0.6039065509454077, 0.6002003865529354, 0.5897297025022925, 0.12795930616813944, 0.2842791066778202, 9.999999999998899e-05, 0.15506369522714702, 0.11907321412840988, 0.042244444929853464, 0.3970554291976842, 0.42500620424585467, 9.999999999998899e-05, 0.13451000084718145, 0.07226153559937742, 0.1909357126409965, 0.08938226059387111, 0.09756638360801995, 0.13551379338998215, 0.1207944839385231, 0.1265231310409901, 0.07474806772091436, 0.10182392644401694, 0.11106226085595572, 0.07025979680468786, 0.12438909639732632, 0.06556209351523523, 0.03294125046358498, 0.09709879619449124, 0.09735661770797255, 0.1115545864067855, 0.991131472328236, 0.9654580449724246, 0.9921607110536085, 0.9550552264668662, 0.9590493053602601, 0.9269584318090162, 0.9796845590454751, 0.9775014335282131, 0.9872567002927205, 0.5443038832570332, 0.5355230578536463, 0.3746438102236018, 0.5210020990527946, 0.5074577555241354, 0.5195340734041229, 0.5319377119626791, 0.5349575680795928, 0.5354051137292349, 0.8031620696816225, 0.8984385844670792, 0.8252099152557051, 0.8742056305638354, 0.6056293629850604, 0.19348763841453553, 0.7088489783890881, 0.2216904159415083, 0.869735673701769, 0.29927140686557463, 0.22373185484985914, 0.1284325461216297, 0.280477127673303, 0.5454439421474406, 0.13527086049618897, 0.5522592647054214, 0.1358563797593232, 0.13634487477168555, 0.5326991425739103, 0.5487125504894736, 0.5827290667331311, 0.5307191739149137, 0.13727363733789677, 0.1366458929969051, 0.5103500367790832, 0.14060998367739352, 0.5199673742227933, 0.15333444875836377, 0.08716124541574832, 0.29263698046920206, 0.04117337457611281, 0.06568727472298774, 0.23059998688038297, 0.34598455310059073, 0.37268729962052605, 0.4961255154420554, 0.3740887129035918, 0.29629155489142256, 0.33759705163572185, 0.4304946691553053, 0.2740544246248269, 0.21680931194523378, 0.1436699915680414, 0.17756570716670828, 0.20891675681485034, 0.07151325012428567, 0.11390865402279737, 0.05239351105839707, 0.21178006246617564, 0.36892245515640165, 0.4764439810524955, 0.10434449783224897, 0.17393580204356462, 0.10205485101644807, 0.4414082114702891, 0.40716859087429946, 0.406498197485586, 0.044358880391319855, 0.44769756271232564, 0.3396970510782962, 0.12964917525566377, 0.4624329146252528, 0.08496547186922421, 0.5635250282278976, 0.5490596263759514, 0.5488798741950329, 0.569499203491219, 0.565003509280075, 0.5706741330011944, 0.565857057009109, 0.5608639862776355, 0.5831013405698008, 0.06280312743221128, 0.0483859875487338, 0.13287916635465158, 0.10659329835795983, 0.07909193343807652, 0.09692055437807556, 0.09725559507463555, 0.09331214033734325, 0.10158441290985998, 0.1974440473224407, 0.1882517456306686, 0.20815771569535513, 0.2595679889150274, 0.5861749990640819, 0.5623030902431754, 0.5355067146063477, 0.2828398053774115, 0.289619348908549, 0.47038474383301687, 0.4818127620529885, 0.4755230080885874, 0.4663822260424417, 0.49435204216770745, 0.4757204045203395, 0.4781776373613452, 0.4776223917582898, 0.46867807924873706, 0.21254218133190617, 0.4602038563476972, 0.2120203318283702, 0.472455641686611, 0.25260101887662345, 0.4792788646110976, 0.2536946264003862, 0.28619794449099467, 0.4735239028727146, 0.2604115267584537, 0.20674073676677285, 0.19192398200519434, 0.2617233080158199, 0.2089388951755644, 0.2817388843302361, 0.24499466642475476, 0.2773480333708761, 0.25098686700228, 0.18940543996900794, 0.18753538400986458, 0.17947510850370219, 0.21065448940154496, 0.1983971991329837, 0.2216156774896223, 0.20433291023825328, 0.19359291164693615, 0.21009715484974012, 0.8430767158065618, 0.1889328908627116, 0.15465298883278078, 0.17336853492779536, 0.20145047875698252, 0.17016927652549207, 0.1430451785800031, 0.1626112426683618, 0.8151221819745325, 0.8077952641426984, 0.21344502336094362, 0.07362828230108609, 0.21020237759495153, 0.16957403744799426, 0.15645947849021868, 0.20736847234170386, 0.7582023143036962, 0.16855188966141943, 0.24651045186286524, 0.24483938965365004, 0.20762953607201284, 0.20628610789241064, 0.22247108039024455, 0.19602750975258743, 0.20021676321536663, 0.1856271446802905, 0.23620460736293036, 0.08924724769857673, 0.08690264069930886, 0.09984402793909175, 0.09962272762444102, 0.08591825629379968, 0.10346767361343823, 0.10647203635470082, 0.0894566373496789, 0.09701923586129946]}, "mutation_prompt": null}
{"id": "7e8af610-6fe3-4a4b-99ee-0b68e651cb94", "solution": "import numpy as np\n\nclass HPSO_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.w = 0.5  # Inertia weight\n        self.c1 = 1.5  # Cognitive (particle) weight\n        self.c2 = 1.5  # Social (swarm) weight\n        self.T_init = 1.0  # Initial temperature for SA\n        self.T_min = 0.001  # Minimum temperature for SA\n        self.alpha = 0.9  # Cooling rate for SA\n\n    def __call__(self, func):\n        # Initialize particle positions and velocities\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-1.0, 1.0, (self.num_particles, self.dim))\n        personal_best_positions = positions.copy()\n        personal_best_scores = np.full(self.num_particles, np.inf)\n\n        # Evaluate the initial population\n        evaluations = 0\n        for i in range(self.num_particles):\n            score = func(positions[i])\n            evaluations += 1\n            personal_best_scores[i] = score\n\n        # Find global best\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index].copy()\n        global_best_score = personal_best_scores[global_best_index]\n\n        # Main optimization loop\n        T = self.T_init\n        while evaluations < self.budget:\n            for i in range(self.num_particles):\n                # Update velocities and positions\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.w * velocities[i] +\n                                 self.c1 * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.c2 * r2 * (global_best_position - positions[i]))\n                positions[i] += velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate the new position\n                score = func(positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i].copy()\n\n                # Simulated Annealing step\n                if score < global_best_score or np.exp((global_best_score - score) / T) > np.random.rand():\n                    global_best_score = score\n                    global_best_position = positions[i].copy()\n\n            # Update temperature\n            T = max(self.T_min, self.alpha * T)\n            \n            # Adaptive inertia weight\n            self.w = 0.4 + 0.5 * (self.budget - evaluations) / self.budget\n\n        return global_best_position", "name": "HPSO_SA", "description": "Enhanced PSO-SA with adaptive w to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": 0.2693842077310954, "feedback": "", "error": "", "parent_id": "93eeac93-70c9-4f8f-bb93-80677bafab68", "metadata": {"aucs": [0.522001193201038, 0.5487903519235162, 0.5311415173509948, 0.5309415995235309, 0.5290532421079748, 0.5360127972594484, 0.5381782267387727, 0.5152386233518742, 0.4745871691451691, 0.25719687577134076, 0.24829181638154318, 0.032628268186007836, 0.21866845629981557, 0.21459218356041698, 0.28092321943725307, 0.29486694295627347, 0.31632172104645295, 0.29832121337382445, 0.10453739318904154, 0.1727386990181713, 0.13071323865419004, 0.09788552894408842, 0.11468089904437617, 0.12309941567871485, 0.10920196193486531, 0.09710022511154426, 0.07751174164867025, 0.07786778853973919, 0.12709534455973603, 0.10196045131793052, 0.12571817681605568, 0.08979095797860359, 0.0804205288966574, 0.1078041965934865, 0.10378795844890831, 0.10467410589628146, 0.991131472328236, 0.9472883052514964, 0.9921607110536085, 0.09950678762112752, 0.9397542206132556, 0.9670058521323135, 0.9844510970392916, 0.7973025056171916, 0.9866928534369226, 0.45181312107778726, 0.4375647024792063, 0.36666780057337023, 0.43423888221691975, 0.4285546530751616, 0.3937699985326947, 0.40141881687348646, 0.4436749647625119, 0.4525090512183838, 0.16595832413291522, 0.23628118610054583, 0.266731073856353, 0.19407672346913474, 0.7179121790973004, 0.19351228545025267, 0.06816911901073996, 0.21612937178177316, 0.1704198675121099, 0.36365065533513363, 0.4446622373307223, 0.3841893454912322, 0.10449692413732703, 0.13202550287536363, 0.12569680363547375, 0.35946001180090204, 0.3811151307295747, 0.3746097753299982, 0.42667872490987124, 0.38743116009587864, 0.12924684272724585, 0.3947161627551491, 0.2507209176691023, 0.1318534086744807, 0.3208233666835607, 0.26583663555084724, 0.388880840245008, 0.031596135285466564, 9.999999999998899e-05, 0.07439131370106211, 0.04801140869066889, 0.2207692748830974, 0.014514222443999136, 0.1746436737904229, 0.1708367465450168, 0.29287452696512506, 0.34532623035563503, 0.21677531022037644, 0.2762130023232475, 0.26114813572260553, 0.1031787950964983, 0.020498040271229923, 0.3483032147590779, 0.22530879418844774, 0.26768129592027023, 9.999999999998899e-05, 0.07646924493728324, 0.03935235343213772, 0.20605933820097067, 0.2191283578775869, 0.25939688697707863, 0.0743476228534391, 0.1302391154954865, 0.06742491133281614, 0.29935290706530526, 0.14360158042175553, 0.10670666541772278, 0.00624232636851807, 0.2456225034037317, 0.1022132856862229, 0.1699050431923732, 0.1728984046856893, 0.07968079817882867, 0.5143044159032808, 0.5150061528846179, 0.5131219514282146, 0.5011508721444189, 0.48576640199241705, 0.4898853826095063, 0.49874768039566497, 0.5011063798785156, 0.5113869420976753, 0.10309739115945993, 0.06318370002973295, 0.11554852633853208, 0.11099137102674106, 0.09171961880754531, 0.11492891615323098, 0.12001971856365068, 0.09233365462849163, 0.11214705241449752, 0.19901716607972886, 0.25504195102592986, 0.16734282271116574, 0.23674763441604285, 0.22694179889350052, 0.2838594003372912, 0.1925981450989046, 0.17867412783153236, 0.20010857171425722, 0.37174550445764276, 0.35642917069405733, 0.25759288012665504, 0.34342296183750387, 0.4083052948097944, 0.32204663840675896, 0.25381613806463177, 0.4343665894652514, 0.2441830648430101, 0.2730083099949072, 0.28574095381223497, 0.24395598613517488, 0.39720746615491076, 0.22143958020414534, 0.24250601333842792, 0.23430072181731998, 0.2546363995799872, 0.19198880022753406, 0.2269814631646927, 0.1823376366896472, 0.20371570153203622, 0.23238254010598436, 0.3027769436118739, 0.21988192693723085, 0.21098662612500163, 0.2197807308172901, 0.23358568563147186, 0.19595153663768738, 0.1779073187355782, 0.17766499379381917, 0.18247175059385634, 0.21340728699992995, 0.18968411310214783, 0.1891570001023889, 0.20061749495968306, 0.20635714670755023, 0.716878358632944, 0.18835379032567523, 0.1546837505723725, 0.6856142146120934, 0.19995667172612563, 0.1702029755511687, 0.1409599041471059, 0.1611974419540636, 0.6672005759708872, 0.6653610847565912, 0.1696561306136105, 0.07362407573813745, 0.20986083463807637, 0.16833345920155807, 0.1561733069424739, 0.1970081334954965, 0.6659833558360109, 0.16197692686046228, 0.21266001358596243, 0.22280314454283578, 0.19972317318035815, 0.19196732137549766, 0.21577767958708605, 0.20805632200965907, 0.19540404203195605, 0.20624476554366322, 0.1840838306846867, 0.10357577540824825, 0.09979671519058086, 0.10161092759622514, 0.09646862132012679, 0.08602824278713417, 0.09606921687323122, 0.0788095526074234, 0.10999838280961449, 0.09172216555863599]}, "mutation_prompt": null}
