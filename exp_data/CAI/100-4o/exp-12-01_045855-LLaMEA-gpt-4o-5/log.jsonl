{"id": "44652a41-77b5-4a9c-be4a-6ac3cb4c7af9", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.c1 = 1.49445  # Cognitive component\n        self.c2 = 1.49445  # Social component\n        self.w = 0.729  # Inertia weight\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        np.random.seed(0)\n        bounds = (-5.0, 5.0)\n        # Initialize particle swarm\n        positions = np.random.uniform(bounds[0], bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-abs(bounds[1] - bounds[0]), abs(bounds[1] - bounds[0]), (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        # Main optimization loop\n        eval_count = self.population_size\n        while eval_count < self.budget:\n            # Differential Evolution mutation and crossover\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), bounds[0], bounds[1])\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, positions[i])\n                \n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    if trial_score < global_best_score:\n                        global_best_position = trial\n                        global_best_score = trial_score\n                if eval_count >= self.budget:\n                    break\n            \n            # Particle Swarm update\n            if eval_count < self.budget:\n                r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n                velocities = (self.w * velocities \n                              + self.c1 * r1 * (personal_best_positions - positions)\n                              + self.c2 * r2 * (global_best_position - positions))\n                positions = np.clip(positions + velocities, bounds[0], bounds[1])\n\n                for i in range(self.population_size):\n                    score = func(positions[i])\n                    eval_count += 1\n                    if score < personal_best_scores[i]:\n                        personal_best_positions[i] = positions[i]\n                        personal_best_scores[i] = score\n                        if score < global_best_score:\n                            global_best_position = positions[i]\n                            global_best_score = score\n                    if eval_count >= self.budget:\n                        break\n\n        return global_best_position", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm and Differential Evolution algorithm that balances exploration and exploitation to efficiently optimize black box functions.", "configspace": "", "generation": 0, "fitness": 0.24356131296439254, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8203466623543086, 0.8203466623543086, 0.8203466623543086, 0.18995366865697516, 0.18995366865697516, 0.18995366865697516, 0.8526893009393555, 0.8526893009393555, 0.8526893009393555, 0.07150463592623924, 0.07150463592623924, 0.07150463592623924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16472128827383625, 0.16472128827383625, 0.16472128827383625, 0.07579699528831751, 0.07579699528831751, 0.07579699528831751, 0.05465149429153948, 0.05465149429153948, 0.05465149429153948, 0.02800512150149459, 0.02800512150149459, 0.02800512150149459, 0.15449092384782415, 0.15449092384782415, 0.15449092384782415, 0.03932756442976515, 0.03932756442976515, 0.03932756442976515, 0.9937595780154086, 0.9937595780154086, 0.9937595780154086, 0.9926573334546479, 0.9926573334546479, 0.9926573334546479, 0.9919585191318208, 0.9919585191318208, 0.9919585191318208, 0.05930145079681948, 0.05930145079681948, 0.05930145079681948, 0.15144714022373806, 0.15144714022373806, 0.15144714022373806, 0.08837209961777603, 0.08837209961777603, 0.08837209961777603, 0.2263704595525704, 0.2263704595525704, 0.2263704595525704, 0.1576442461494869, 0.1576442461494869, 0.1576442461494869, 0.7621082823127725, 0.7621082823127725, 0.7621082823127725, 0.20914502278777014, 0.20914502278777014, 0.20914502278777014, 0.185304591494738, 0.185304591494738, 0.185304591494738, 0.21895058882499052, 0.21895058882499052, 0.21895058882499052, 0.4033435608033382, 0.4033435608033382, 0.4033435608033382, 0.21509478746081023, 0.21509478746081023, 0.21509478746081023, 0.20498658250052348, 0.20498658250052348, 0.20498658250052348, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007922383000316446, 0.007922383000316446, 0.007922383000316446, 0.05865861648272652, 0.05865861648272652, 0.05865861648272652, 0.10415749996321988, 0.10415749996321988, 0.10415749996321988, 0.007890128253959627, 0.007890128253959627, 0.007890128253959627, 0.045187402998728476, 0.045187402998728476, 0.045187402998728476, 0.09769588777104132, 0.09769588777104132, 0.09769588777104132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20845092326549886, 0.20845092326549886, 0.20845092326549886, 0.006154309829723981, 0.006154309829723981, 0.006154309829723981, 0.04896764699787526, 0.04896764699787526, 0.04896764699787526, 0.5388110805675947, 0.5388110805675947, 0.5388110805675947, 0.5601829318899039, 0.5601829318899039, 0.5601829318899039, 0.543303798337397, 0.543303798337397, 0.543303798337397, 0.027821063692246906, 0.027821063692246906, 0.027821063692246906, 0.1026435132099126, 0.1026435132099126, 0.1026435132099126, 0.13909186967790466, 0.13909186967790466, 0.13909186967790466, 0.1634784891881651, 0.1634784891881651, 0.1634784891881651, 0.296734890784047, 0.296734890784047, 0.296734890784047, 0.17920850704739533, 0.17920850704739533, 0.17920850704739533, 0.3400077466156679, 0.3400077466156679, 0.3400077466156679, 0.3758976848272635, 0.3758976848272635, 0.3758976848272635, 0.45999264230072945, 0.45999264230072945, 0.45999264230072945, 0.2322361083932728, 0.2322361083932728, 0.2322361083932728, 0.1900707650793796, 0.1900707650793796, 0.1900707650793796, 0.3758561806661491, 0.3758561806661491, 0.3758561806661491, 0.1961109717962275, 0.1961109717962275, 0.1961109717962275, 0.2377657158355948, 0.2377657158355948, 0.2377657158355948, 0.23918132704848238, 0.23918132704848238, 0.23918132704848238, 0.7147515048424309, 0.7147515048424309, 0.7147515048424309, 0.1918284062872, 0.1918284062872, 0.1918284062872, 0.22538666342845415, 0.22538666342845415, 0.22538666342845415, 0.17078007061086442, 0.17078007061086442, 0.17078007061086442, 0.19573158071530838, 0.19573158071530838, 0.19573158071530838, 0.16591598857517498, 0.16591598857517498, 0.16591598857517498, 0.07806149080324976, 0.07806149080324976, 0.07806149080324976, 0.679489137500624, 0.679489137500624, 0.679489137500624, 0.19925836661247465, 0.19925836661247465, 0.19925836661247465, 0.17023004204190506, 0.17023004204190506, 0.17023004204190506, 0.18441054825984038, 0.18441054825984038, 0.18441054825984038, 0.20496198912236674, 0.20496198912236674, 0.20496198912236674, 0.08767723845791975, 0.08767723845791975, 0.08767723845791975, 0.09043967726460889, 0.09043967726460889, 0.09043967726460889, 0.081579844756547, 0.081579844756547, 0.081579844756547]}, "mutation_prompt": null}
{"id": "82849e33-6009-463e-8d93-62a0286af611", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * int(np.sqrt(dim))\n        self.c1 = 1.49445  # Cognitive component\n        self.c2 = 1.49445  # Social component\n        self.w = 0.729  # Inertia weight\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        np.random.seed(0)\n        bounds = (-5.0, 5.0)\n        # Initialize particle swarm\n        positions = np.random.uniform(bounds[0], bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-abs(bounds[1] - bounds[0]), abs(bounds[1] - bounds[0]), (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        # Main optimization loop\n        eval_count = self.population_size\n        while eval_count < self.budget:\n            # Differential Evolution mutation and crossover\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), bounds[0], bounds[1])\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, positions[i])\n                \n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    if trial_score < global_best_score:\n                        global_best_position = trial\n                        global_best_score = trial_score\n                if eval_count >= self.budget:\n                    break\n            \n            # Particle Swarm update\n            if eval_count < self.budget:\n                r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n                velocities = (self.w * velocities \n                              + self.c1 * r1 * (personal_best_positions - positions)\n                              + self.c2 * r2 * (global_best_position - positions))\n                positions = np.clip(positions + velocities, bounds[0], bounds[1])\n\n                for i in range(self.population_size):\n                    score = func(positions[i])\n                    eval_count += 1\n                    if score < personal_best_scores[i]:\n                        personal_best_positions[i] = positions[i]\n                        personal_best_scores[i] = score\n                        if score < global_best_score:\n                            global_best_position = positions[i]\n                            global_best_score = score\n                    if eval_count >= self.budget:\n                        break\n\n        return global_best_position", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm and Differential Evolution algorithm that balances exploration and exploitation to efficiently optimize black box functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "44652a41-77b5-4a9c-be4a-6ac3cb4c7af9", "metadata": {"aucs": [0.8203466623543086, 0.8203466623543086, 0.8203466623543086, 0.18995366865697516, 0.18995366865697516, 0.18995366865697516, 0.8526893009393555, 0.8526893009393555, 0.8526893009393555, 0.07150463592623924, 0.07150463592623924, 0.07150463592623924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16472128827383625, 0.16472128827383625, 0.16472128827383625, 0.07579699528831751, 0.07579699528831751, 0.07579699528831751, 0.05465149429153948, 0.05465149429153948, 0.05465149429153948, 0.02800512150149459, 0.02800512150149459, 0.02800512150149459, 0.15449092384782415, 0.15449092384782415, 0.15449092384782415, 0.03932756442976515, 0.03932756442976515, 0.03932756442976515, 0.9937595780154086, 0.9937595780154086, 0.9937595780154086, 0.9926573334546479, 0.9926573334546479, 0.9926573334546479, 0.9919585191318208, 0.9919585191318208, 0.9919585191318208, 0.05930145079681948, 0.05930145079681948, 0.05930145079681948, 0.15144714022373806, 0.15144714022373806, 0.15144714022373806, 0.08837209961777603, 0.08837209961777603, 0.08837209961777603, 0.2263704595525704, 0.2263704595525704, 0.2263704595525704, 0.1576442461494869, 0.1576442461494869, 0.1576442461494869, 0.7621082823127725, 0.7621082823127725, 0.7621082823127725, 0.20914502278777014, 0.20914502278777014, 0.20914502278777014, 0.185304591494738, 0.185304591494738, 0.185304591494738, 0.21895058882499052, 0.21895058882499052, 0.21895058882499052, 0.4033435608033382, 0.4033435608033382, 0.4033435608033382, 0.21509478746081023, 0.21509478746081023, 0.21509478746081023, 0.20498658250052348, 0.20498658250052348, 0.20498658250052348, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007922383000316446, 0.007922383000316446, 0.007922383000316446, 0.05865861648272652, 0.05865861648272652, 0.05865861648272652, 0.10415749996321988, 0.10415749996321988, 0.10415749996321988, 0.007890128253959627, 0.007890128253959627, 0.007890128253959627, 0.045187402998728476, 0.045187402998728476, 0.045187402998728476, 0.09769588777104132, 0.09769588777104132, 0.09769588777104132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20845092326549886, 0.20845092326549886, 0.20845092326549886, 0.006154309829723981, 0.006154309829723981, 0.006154309829723981, 0.04896764699787526, 0.04896764699787526, 0.04896764699787526, 0.5388110805675947, 0.5388110805675947, 0.5388110805675947, 0.5601829318899039, 0.5601829318899039, 0.5601829318899039, 0.543303798337397, 0.543303798337397, 0.543303798337397, 0.027821063692246906, 0.027821063692246906, 0.027821063692246906, 0.1026435132099126, 0.1026435132099126, 0.1026435132099126, 0.13909186967790466, 0.13909186967790466, 0.13909186967790466, 0.1634784891881651, 0.1634784891881651, 0.1634784891881651, 0.296734890784047, 0.296734890784047, 0.296734890784047, 0.17920850704739533, 0.17920850704739533, 0.17920850704739533, 0.3400077466156679, 0.3400077466156679, 0.3400077466156679, 0.3758976848272635, 0.3758976848272635, 0.3758976848272635, 0.45999264230072945, 0.45999264230072945, 0.45999264230072945, 0.2322361083932728, 0.2322361083932728, 0.2322361083932728, 0.1900707650793796, 0.1900707650793796, 0.1900707650793796, 0.3758561806661491, 0.3758561806661491, 0.3758561806661491, 0.1961109717962275, 0.1961109717962275, 0.1961109717962275, 0.2377657158355948, 0.2377657158355948, 0.2377657158355948, 0.23918132704848238, 0.23918132704848238, 0.23918132704848238, 0.7147515048424309, 0.7147515048424309, 0.7147515048424309, 0.1918284062872, 0.1918284062872, 0.1918284062872, 0.22538666342845415, 0.22538666342845415, 0.22538666342845415, 0.17078007061086442, 0.17078007061086442, 0.17078007061086442, 0.19573158071530838, 0.19573158071530838, 0.19573158071530838, 0.16591598857517498, 0.16591598857517498, 0.16591598857517498, 0.07806149080324976, 0.07806149080324976, 0.07806149080324976, 0.679489137500624, 0.679489137500624, 0.679489137500624, 0.19925836661247465, 0.19925836661247465, 0.19925836661247465, 0.17023004204190506, 0.17023004204190506, 0.17023004204190506, 0.18441054825984038, 0.18441054825984038, 0.18441054825984038, 0.20496198912236674, 0.20496198912236674, 0.20496198912236674, 0.08767723845791975, 0.08767723845791975, 0.08767723845791975, 0.09043967726460889, 0.09043967726460889, 0.09043967726460889, 0.081579844756547, 0.081579844756547, 0.081579844756547]}, "mutation_prompt": null}
