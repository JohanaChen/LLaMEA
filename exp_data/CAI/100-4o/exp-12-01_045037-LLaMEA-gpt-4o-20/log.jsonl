{"id": "d7e1e5a1-ab96-4633-864e-10971065cc64", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.c1 = 2.0  # cognitive component\n        self.c2 = 2.0  # social component\n        self.w = 0.7   # inertia weight\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best = self.population.copy()\n        self.personal_best_scores = np.full(self.pop_size, float('inf'))\n        self.global_best = None\n        self.global_best_score = float('inf')\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            # Evaluate current population\n            for i in range(self.pop_size):\n                score = func(self.population[i])\n                evaluations += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best = self.population[i]\n            \n            # PSO update\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            cognitive_component = self.c1 * r1 * (self.personal_best - self.population)\n            social_component = self.c2 * r2 * (self.global_best - self.population)\n            self.velocities = self.w * self.velocities + cognitive_component + social_component\n            self.population += self.velocities\n            self.population = np.clip(self.population, self.bounds[0], self.bounds[1])\n\n            # DE mutation and crossover\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                donor_vector = self.population[a] + self.mutation_factor * (self.population[b] - self.population[c])\n                donor_vector = np.clip(donor_vector, self.bounds[0], self.bounds[1])\n                \n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, \n                                        donor_vector, \n                                        self.population[i])\n                \n                trial_score = func(trial_vector)\n                evaluations += 1\n                \n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best[i] = trial_vector\n                    self.personal_best_scores[i] = trial_score\n                    self.population[i] = trial_vector  # Accept trial vector\n                    if trial_score < self.global_best_score:\n                        self.global_best_score = trial_score\n                        self.global_best = trial_vector\n\n        return self.global_best", "name": "HybridPSODE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) for adaptive exploration and exploitation in black-box optimization.", "configspace": "", "generation": 0, "fitness": 0.14925935768724377, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.2544709957212866, 0.27420292665910406, 0.3900654226025446, 0.18146753924350933, 0.15663698260724446, 0.18164812008718922, 0.17434636637012613, 0.32666039490805665, 0.34233232185220086, 9.999999999998899e-05, 9.999999999998899e-05, 0.005266367828389407, 9.999999999998899e-05, 0.0016409340908482006, 9.999999999998899e-05, 0.04649915971335883, 9.999999999998899e-05, 9.999999999998899e-05, 0.06346913533074516, 0.06289773322197667, 0.06467116667865613, 0.06674423498593218, 0.05514887654025458, 0.06730443589753432, 0.07309388805171713, 0.035220291608460186, 0.0926395066587864, 0.07739456516952015, 0.052109986872351466, 0.04070167038427974, 0.042083237904487425, 0.06664670077519719, 0.06784458808211025, 0.07117389931924734, 0.04814531849156134, 0.060345774491747606, 0.9858911479337762, 0.9858070602014765, 0.9915340993277273, 0.9807831077484985, 0.9806395291605262, 0.9839863785159049, 0.9858705679349227, 0.9914582952370552, 0.9837314558478872, 0.05432852522444953, 0.058033540161446906, 0.19840326268692976, 0.1305497566288495, 0.12251621730745099, 0.13118833948103725, 0.08769758216852519, 0.08840173895506853, 0.08708779901844066, 0.1701745702195956, 0.12759996492122772, 0.13904893321813072, 0.22823819282908364, 0.11555692978845278, 0.11578543288436072, 0.16355830391026194, 0.1660278422050404, 0.1599649033364865, 0.047361571913495215, 0.04846147428330183, 0.042749254290622596, 0.02713449345068597, 0.08433516117914497, 0.033471679984526825, 0.09386729927166848, 0.060653159523033406, 0.08520974473937282, 0.054887546606606885, 0.021734116339130694, 0.009533345390885017, 0.09225049805256225, 0.007509708248751523, 0.09603521711471674, 0.029959584970248088, 0.026372581757608482, 0.05346585375943613, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04112271938765444, 0.023450970365207824, 0.0570509127383384, 0.06362618678839649, 9.999999999998899e-05, 0.03697009609428392, 0.023191549949786006, 0.013205803230377011, 0.025990644597115864, 9.999999999998899e-05, 0.008174607259241351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019003618630429875, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05326996386808969, 9.999999999998899e-05, 9.999999999998899e-05, 0.034338231180410905, 0.042182539322197066, 9.999999999998899e-05, 0.06233681275707659, 0.3239873935844082, 0.3123242373241958, 0.3350954371176764, 0.18234639769268923, 0.2915773045125226, 0.20404165995274115, 0.3635954493431438, 0.27699135628055027, 0.33861804994781686, 0.07457088158454395, 0.05139547534122435, 0.07833544806894477, 0.07532006909805533, 0.08805603615020663, 0.06273200038650995, 0.07904011939882516, 0.0908973223301176, 0.07686870462831108, 0.14148897323744514, 0.14428270256276832, 0.16188990561033512, 0.16073688754698434, 0.17468676721325316, 0.13078082648040035, 0.1564939976554588, 0.15601230235193542, 0.152057750722701, 0.1729059534051759, 0.2230583399582844, 0.2309334862478729, 0.19737311590061346, 0.17568384586511054, 0.23142979910272776, 0.19392123880906897, 0.22240643234085078, 0.2528999072009278, 0.14112846553511393, 0.13536854775173757, 0.1275639662245085, 0.1326292242149144, 0.16289560661215963, 0.12683691062807834, 0.13634697661567463, 0.1529035281604063, 0.17281290251510895, 0.1565866102349337, 0.13330605397801987, 0.17637956270329247, 0.17251416758175941, 0.14452716001520838, 0.17260741820700987, 0.16975763221113116, 0.16503686079584534, 0.19829131323571692, 0.17974517796626255, 0.16573058684529174, 0.16691756173615757, 0.17622489415491693, 0.16279592103509044, 0.16123327698002066, 0.1694521494219463, 0.18437831813398853, 0.15503976434284217, 0.1775744796564861, 0.16452661105742572, 0.11082800750912081, 0.34168226820795666, 0.1827928124008772, 0.11021426708066995, 0.0992566158640007, 0.16877606754273078, 0.17868754091695627, 0.16595884239427594, 0.1388125900657886, 0.15797672868653623, 0.1064672717148365, 0.20577908862227534, 0.16182632451008228, 0.17742036637700187, 0.19879945864273807, 0.19827421217804508, 0.19132901110632627, 0.17986227824711765, 0.18744516564723113, 0.19499916090067249, 0.16825400090621, 0.1785684958532855, 0.18686424381447786, 0.19241044703753885, 0.21514220822615393, 0.05163180878535645, 0.06901945569919932, 0.05842152172759141, 0.06879606242020331, 0.07110406474043907, 0.0626240496506123, 0.05858791200657942, 0.05050657025429317, 0.06361540792398268]}, "mutation_prompt": null}
{"id": "ac246108-af56-4cd5-a48a-689763446553", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 30\n        self.c1 = 2.0  # cognitive component\n        self.c2 = 2.0  # social component\n        self.w = 0.7   # inertia weight\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best = self.population.copy()\n        self.personal_best_scores = np.full(self.pop_size, float('inf'))\n        self.global_best = None\n        self.global_best_score = float('inf')\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            # Evaluate current population\n            for i in range(self.pop_size):\n                score = func(self.population[i])\n                evaluations += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best = self.population[i]\n            \n            # PSO update\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            cognitive_component = self.c1 * r1 * (self.personal_best - self.population)\n            social_component = self.c2 * r2 * (self.global_best - self.population)\n            self.velocities = self.w * self.velocities + cognitive_component + social_component\n            self.population += self.velocities\n            self.population = np.clip(self.population, self.bounds[0], self.bounds[1])\n\n            # DE mutation and crossover\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                donor_vector = self.population[a] + self.mutation_factor * (self.population[b] - self.population[c])\n                donor_vector = np.clip(donor_vector, self.bounds[0], self.bounds[1])\n                \n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, \n                                        donor_vector, \n                                        self.population[i])\n                \n                trial_score = func(trial_vector)\n                evaluations += 1\n                \n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best[i] = trial_vector\n                    self.personal_best_scores[i] = trial_score\n                    self.population[i] = trial_vector  # Accept trial vector\n                    if trial_score < self.global_best_score:\n                        self.global_best_score = trial_score\n                        self.global_best = trial_vector\n\n        return self.global_best", "name": "HybridPSODE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) for adaptive exploration and exploitation in black-box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7e1e5a1-ab96-4633-864e-10971065cc64", "metadata": {"aucs": [0.2544709957212866, 0.27420292665910406, 0.3900654226025446, 0.18146753924350933, 0.15663698260724446, 0.18164812008718922, 0.17434636637012613, 0.32666039490805665, 0.34233232185220086, 9.999999999998899e-05, 9.999999999998899e-05, 0.005266367828389407, 9.999999999998899e-05, 0.0016409340908482006, 9.999999999998899e-05, 0.04649915971335883, 9.999999999998899e-05, 9.999999999998899e-05, 0.06346913533074516, 0.06289773322197667, 0.06467116667865613, 0.06674423498593218, 0.05514887654025458, 0.06730443589753432, 0.07309388805171713, 0.035220291608460186, 0.0926395066587864, 0.07739456516952015, 0.052109986872351466, 0.04070167038427974, 0.042083237904487425, 0.06664670077519719, 0.06784458808211025, 0.07117389931924734, 0.04814531849156134, 0.060345774491747606, 0.9858911479337762, 0.9858070602014765, 0.9915340993277273, 0.9807831077484985, 0.9806395291605262, 0.9839863785159049, 0.9858705679349227, 0.9914582952370552, 0.9837314558478872, 0.05432852522444953, 0.058033540161446906, 0.19840326268692976, 0.1305497566288495, 0.12251621730745099, 0.13118833948103725, 0.08769758216852519, 0.08840173895506853, 0.08708779901844066, 0.1701745702195956, 0.12759996492122772, 0.13904893321813072, 0.22823819282908364, 0.11555692978845278, 0.11578543288436072, 0.16355830391026194, 0.1660278422050404, 0.1599649033364865, 0.047361571913495215, 0.04846147428330183, 0.042749254290622596, 0.02713449345068597, 0.08433516117914497, 0.033471679984526825, 0.09386729927166848, 0.060653159523033406, 0.08520974473937282, 0.054887546606606885, 0.021734116339130694, 0.009533345390885017, 0.09225049805256225, 0.007509708248751523, 0.09603521711471674, 0.029959584970248088, 0.026372581757608482, 0.05346585375943613, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04112271938765444, 0.023450970365207824, 0.0570509127383384, 0.06362618678839649, 9.999999999998899e-05, 0.03697009609428392, 0.023191549949786006, 0.013205803230377011, 0.025990644597115864, 9.999999999998899e-05, 0.008174607259241351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019003618630429875, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05326996386808969, 9.999999999998899e-05, 9.999999999998899e-05, 0.034338231180410905, 0.042182539322197066, 9.999999999998899e-05, 0.06233681275707659, 0.3239873935844082, 0.3123242373241958, 0.3350954371176764, 0.18234639769268923, 0.2915773045125226, 0.20404165995274115, 0.3635954493431438, 0.27699135628055027, 0.33861804994781686, 0.07457088158454395, 0.05139547534122435, 0.07833544806894477, 0.07532006909805533, 0.08805603615020663, 0.06273200038650995, 0.07904011939882516, 0.0908973223301176, 0.07686870462831108, 0.14148897323744514, 0.14428270256276832, 0.16188990561033512, 0.16073688754698434, 0.17468676721325316, 0.13078082648040035, 0.1564939976554588, 0.15601230235193542, 0.152057750722701, 0.1729059534051759, 0.2230583399582844, 0.2309334862478729, 0.19737311590061346, 0.17568384586511054, 0.23142979910272776, 0.19392123880906897, 0.22240643234085078, 0.2528999072009278, 0.14112846553511393, 0.13536854775173757, 0.1275639662245085, 0.1326292242149144, 0.16289560661215963, 0.12683691062807834, 0.13634697661567463, 0.1529035281604063, 0.17281290251510895, 0.1565866102349337, 0.13330605397801987, 0.17637956270329247, 0.17251416758175941, 0.14452716001520838, 0.17260741820700987, 0.16975763221113116, 0.16503686079584534, 0.19829131323571692, 0.17974517796626255, 0.16573058684529174, 0.16691756173615757, 0.17622489415491693, 0.16279592103509044, 0.16123327698002066, 0.1694521494219463, 0.18437831813398853, 0.15503976434284217, 0.1775744796564861, 0.16452661105742572, 0.11082800750912081, 0.34168226820795666, 0.1827928124008772, 0.11021426708066995, 0.0992566158640007, 0.16877606754273078, 0.17868754091695627, 0.16595884239427594, 0.1388125900657886, 0.15797672868653623, 0.1064672717148365, 0.20577908862227534, 0.16182632451008228, 0.17742036637700187, 0.19879945864273807, 0.19827421217804508, 0.19132901110632627, 0.17986227824711765, 0.18744516564723113, 0.19499916090067249, 0.16825400090621, 0.1785684958532855, 0.18686424381447786, 0.19241044703753885, 0.21514220822615393, 0.05163180878535645, 0.06901945569919932, 0.05842152172759141, 0.06879606242020331, 0.07110406474043907, 0.0626240496506123, 0.05858791200657942, 0.05050657025429317, 0.06361540792398268]}, "mutation_prompt": null}
