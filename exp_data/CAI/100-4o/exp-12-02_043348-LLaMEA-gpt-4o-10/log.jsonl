{"id": "4f452200-e3cf-4ed0-8014-e40a597f0c70", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "fd379ed8-b39e-4531-96a3-f14d4e9b97f8", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 15 * dim\n        self.population = np.random.uniform(-5, 5, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.evaluations = 0\n\n    def _mutate(self, idx):\n        candidates = list(range(0, idx)) + list(range(idx + 1, self.population_size))\n        a, b, c = np.random.choice(candidates, 3, replace=False)\n        mutant = self.population[a] + self.mutation_factor * (self.population[b] - self.population[c])\n        mutant = np.clip(mutant, -5, 5)\n        return mutant\n\n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_probability\n        if not np.any(crossover_mask):\n            crossover_mask[np.random.randint(0, self.dim)] = True\n        trial = np.where(crossover_mask, mutant, target)\n        return trial\n\n    def _select(self, idx, trial, trial_fitness):\n        if trial_fitness < self.fitness[idx]:\n            self.population[idx] = trial\n            self.fitness[idx] = trial_fitness\n\n    def __call__(self, func):\n        self.fitness = np.array([func(individual) for individual in self.population])\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                mutant = self._mutate(i)\n                trial = self._crossover(self.population[i], mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                self._select(i, trial, trial_fitness)\n\n                if self.evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with a refined mutation strategy to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": 0.20890026392568353, "feedback": "", "error": "", "parent_id": "4f452200-e3cf-4ed0-8014-e40a597f0c70", "metadata": {"aucs": [0.48997628506597823, 0.49284059286737125, 0.46339783556368175, 0.4694433913545317, 0.4989395845703546, 0.4829080422377209, 0.4849040012495115, 0.5093913497431325, 0.4753689260429802, 0.23313539567181196, 0.22481675622058706, 0.2165440699578699, 0.2004130781030531, 0.20705226114498831, 0.2300016945316492, 0.2075633213581588, 0.23639960197202425, 0.2409381110636445, 0.09715894247882373, 0.09320743329246817, 0.08212686599630925, 0.08883585401411909, 0.09503022494454105, 0.08380296366382756, 0.0780445433444733, 0.08251830806523974, 0.0842759294550528, 0.09178909917037181, 0.08614581737708527, 0.07108017623678442, 0.08654107585898141, 0.07634912693959339, 0.07169023387214823, 0.08368035232759763, 0.07977906258560508, 0.07268330107192011, 0.9040026385641234, 0.9340692771610345, 0.9597041942012795, 0.9417019393690725, 0.9226583400678647, 0.9050371620369485, 0.9586672817818483, 0.9429988732910337, 0.9003457885574588, 0.1903420612147565, 0.2086605690257588, 0.2040876293620123, 0.20556602957411263, 0.2126668827307241, 0.19574030135744958, 0.23123352405867892, 0.2320878291477554, 0.22087331932783172, 0.3010208649762288, 0.26264875456354186, 0.40846893530313333, 0.5022240862813705, 0.27993188234933175, 0.3286814764502294, 0.2641402631855393, 0.25341788067105286, 0.3536731953675757, 0.1388722320194844, 0.13577529702069713, 0.1291378759688152, 0.1344032499148219, 0.13004690491617965, 0.11597494134382447, 0.14042630475965323, 0.12073459660816876, 0.1305791149486386, 0.04907741744461436, 0.0742991985951198, 0.12974586334472915, 0.12660435942665904, 0.127954025468625, 0.13654891548369852, 0.12957069687027256, 0.14827633433482057, 0.11984581116751036, 0.06821412911925495, 0.06518676927273137, 0.060124600170192055, 0.04383973611723291, 0.06227159366367463, 0.05034617681134079, 0.05896127810307772, 0.055131965872712185, 0.06513293160158751, 0.14575940449753821, 0.1566275531612742, 0.17945095537798894, 0.1560131520008663, 0.14758591066778515, 0.1629473532003014, 0.17249996944334345, 0.20215470742821773, 0.17985745182784407, 0.00014175865097787455, 0.005695696385367377, 0.0013294256809207594, 0.007254589453464133, 0.011079669221377153, 9.999999999998899e-05, 0.004081498326239719, 0.003395665277031168, 0.003641233299776281, 0.09315280519349911, 0.10103885589863038, 0.10278473941104516, 0.10205091301886715, 0.11085754001684023, 0.11649201275682775, 0.11184666775972596, 0.10518837166058059, 0.11686307305499599, 0.39453357539571343, 0.37896070583094355, 0.4096242745080598, 0.3938581753056416, 0.41182179817941955, 0.4037616089932152, 0.39471016076672627, 0.39997619005350815, 0.4000641447326251, 0.08266727384745731, 0.07612492378314695, 0.08276998767745736, 0.08116244463456823, 0.08356252033081546, 0.07386427337696622, 0.07100237951542099, 0.09213810903080144, 0.07944537882461733, 0.1353616201821658, 0.13276241081307638, 0.15762054460188502, 0.18384314688724168, 0.1831415421795648, 0.12670478023625875, 0.1260153970545318, 0.13824209910845986, 0.1505932326472159, 0.22987812221277448, 0.23496989499886778, 0.24211282285317304, 0.21626430609251246, 0.23236173570202912, 0.22315044825543795, 0.24999214911582635, 0.24601108592056364, 0.24532248900003784, 0.17420753107344622, 0.17832282999477733, 0.17157652942475454, 0.1753487503744433, 0.1712184525850542, 0.17135803912684555, 0.19057795830193625, 0.19395009937499952, 0.1775969976649462, 0.17770248727781435, 0.16944091331549294, 0.19064191451600643, 0.16774249581302958, 0.18375138939922786, 0.18650438764696842, 0.19101625865777783, 0.17331335482505805, 0.1790897562265401, 0.16949046002268442, 0.17404151734982298, 0.17450691207711966, 0.1777688216756229, 0.1714665619691268, 0.18453150506843952, 0.16205324450196057, 0.16381168549913294, 0.16590734544842634, 0.1541710383000302, 0.2247665557579347, 0.4634751113952075, 0.16916566470006622, 0.19728545788017493, 0.20195059175719632, 0.23224218823838427, 0.16396179582171078, 0.1726156011529023, 0.19067829738385822, 0.39165142259033414, 0.2755651024828414, 0.18114856713799843, 0.2132539978785989, 0.17114621828682175, 0.202643708526012, 0.19439189140476332, 0.1993750523766561, 0.18418784400229737, 0.1873287118713599, 0.19065849544478053, 0.18460573325265728, 0.1868811669003554, 0.1737415976055261, 0.18053678165797993, 0.18199038849759586, 0.17595041785072552, 0.08019069753411079, 0.06874490269222788, 0.05667836397482884, 0.06277360940576926, 0.06616295446867149, 0.06894859090927363, 0.06252802664745849, 0.06780874742968279, 0.071519880439466]}, "mutation_prompt": null}
