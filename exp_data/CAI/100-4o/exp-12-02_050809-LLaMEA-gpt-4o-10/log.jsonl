{"id": "221675d3-fb68-4a41-b163-ca67cc7a7286", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.population_size = 10 + int(0.1 * dim)\n        self.step_size = 0.1  # Initial step size for mutations\n\n    def levy_flight(self, size):\n        # Generate Levy flight steps\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / np.abs(v) ** (1 / beta)\n        return 0.01 * step\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        # Evaluate initial solutions\n        for i in range(self.population_size):\n            if fitness[i] < self.best_value:\n                self.best_value = fitness[i]\n                self.best_solution = population[i]\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Lévy flight\n                step = self.levy_flight(self.dim)\n                candidate = population[i] + self.step_size * step\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                \n                # Evaluate candidate\n                candidate_value = func(candidate)\n                evaluations += 1\n                \n                # Adaptive step size adjustment\n                if candidate_value < fitness[i]:\n                    fitness[i] = candidate_value\n                    population[i] = candidate\n                    if candidate_value < self.best_value:\n                        self.best_value = candidate_value\n                        self.best_solution = candidate\n                else:\n                    # Reduce step size to exploit local region\n                    self.step_size *= 0.99\n\n            # Gradually increase the step size to enhance exploration\n            self.step_size = min(self.step_size * 1.01, 0.1)\n        \n        return self.best_solution, self.best_value", "name": "AdaptiveLevyFlightOptimizer", "description": "Adaptive Lévy Flight Optimization employs Lévy flight behavior in exploration combined with adaptive mutation for exploitation to balance exploration and exploitation dynamically.", "configspace": "", "generation": 0, "fitness": 0.03524552128565805, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.07247519009924708, 0.06516625874012938, 0.0827267223299537, 0.020055844020699043, 0.05291943668610788, 0.025452545210184918, 0.051579566862302584, 0.051942970420460144, 0.06765800638474428, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019228245895901996, 9.999999999998899e-05, 0.0003316601375674688, 0.0027996480455163564, 9.999999999998899e-05, 0.020023583824345548, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023380202361967695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04546409505993454, 0.03390392120743746, 0.043054534642234965, 0.03957011026185231, 0.04713097096248453, 0.03070564182475899, 0.03367948293437817, 0.049260368736559035, 0.02595863806337495, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010234269827542608, 9.999999999998899e-05, 9.999999999998899e-05, 0.011587027902434266, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006487473152022916, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023354529351761077, 9.999999999998899e-05, 0.06210665035374152, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07873647916796145, 0.10752526784422278, 0.1488082521525792, 0.09473334777004183, 0.08080059927178174, 0.09596305713686815, 0.12426571230077565, 0.09782809146500748, 0.12132021645337587, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009690924809685586, 9.999999999998899e-05, 0.018752536129987285, 9.999999999998899e-05, 9.999999999998899e-05, 0.029288667638133536, 0.07360705001169066, 0.07817707258363193, 0.06050620675755858, 0.10296664918045595, 0.073731748847648, 0.06342779877777738, 0.0563262393740408, 0.051136925437612835, 0.08315660209452436, 0.09790754697872706, 0.09959974378996961, 0.10541243166539493, 0.10933286604304282, 0.08535155680378426, 0.08499080356595623, 0.11944568968387825, 0.1046542516646336, 0.08003649522506384, 0.036686021772330935, 0.041050152272667395, 0.036092725075254184, 0.05052595965779505, 0.029357160434324236, 0.04137210347423004, 0.06135741659822891, 0.040640318782981244, 0.013561373904355634, 0.1413975130223729, 0.07793578800477119, 0.16129918586289893, 0.12174014658902665, 0.09994308821018827, 0.15448376682251164, 0.12703104297876522, 0.11012868734210146, 0.15129319257141594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04442006366145346, 0.0567601902198156, 0.057309529375126345, 0.06780545187525899, 0.12231382758596865, 0.06264241876391063, 0.061698637312464055, 0.057456643073209634, 0.05454410871709248, 0.038890618427747214, 0.04336927236653643, 0.01659227834461563, 0.01893301115375834, 0.021833048203540928, 0.04656278851017537, 0.01929031744997356, 0.016058447039420165, 0.043439998044312644, 0.12943861524395783, 0.1684344919448968, 0.1789517157634546, 0.13773724068041682, 0.1321842316660703, 0.16515009248450774, 0.1376091628129461, 0.1182438428082565, 0.1666697205278459, 0.0101586338410532, 0.035139983118855134, 0.04557075046522441, 0.0062051683112007705, 0.012925982480323728, 0.014136445629216676, 0.017146211357083163, 0.02828827262713507, 0.02803538880631129]}, "mutation_prompt": null}
{"id": "34ce60df-2f7b-45e7-9bdd-f8ab25eebe36", "solution": "import numpy as np\n\nclass AdaptiveLevyFlightOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.population_size = 10 + int(0.1 * dim)\n        self.step_size = 0.1  # Initial step size for mutations\n\n    def levy_flight(self, size):\n        # Generate Levy flight steps\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / np.abs(v) ** (1 / beta)\n        return 0.01 * step\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        # Evaluate initial solutions\n        for i in range(self.population_size):\n            if fitness[i] < self.best_value:\n                self.best_value = fitness[i]\n                self.best_solution = population[i]\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Lévy flight\n                step = self.levy_flight(self.dim)\n                candidate = population[i] + self.step_size * step\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                \n                # Evaluate candidate\n                candidate_value = func(candidate)\n                evaluations += 1\n                \n                # Adaptive step size adjustment\n                if candidate_value < fitness[i]:\n                    fitness[i] = candidate_value\n                    population[i] = candidate\n                    if candidate_value < self.best_value:\n                        self.best_value = candidate_value\n                        self.best_solution = candidate\n                else:\n                    # Reduce step size to exploit local region\n                    self.step_size *= 0.99\n\n            # Gradually increase the step size to enhance exploration\n            self.step_size = min(self.step_size * 1.01, 0.1)\n        \n        return self.best_solution, self.best_value", "name": "AdaptiveLevyFlightOptimizer", "description": "Adaptive Lévy Flight Optimization employs Lévy flight behavior in exploration combined with adaptive mutation for exploitation to balance exploration and exploitation dynamically.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "221675d3-fb68-4a41-b163-ca67cc7a7286", "metadata": {"aucs": [0.07247519009924708, 0.06516625874012938, 0.0827267223299537, 0.020055844020699043, 0.05291943668610788, 0.025452545210184918, 0.051579566862302584, 0.051942970420460144, 0.06765800638474428, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019228245895901996, 9.999999999998899e-05, 0.0003316601375674688, 0.0027996480455163564, 9.999999999998899e-05, 0.020023583824345548, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023380202361967695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04546409505993454, 0.03390392120743746, 0.043054534642234965, 0.03957011026185231, 0.04713097096248453, 0.03070564182475899, 0.03367948293437817, 0.049260368736559035, 0.02595863806337495, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010234269827542608, 9.999999999998899e-05, 9.999999999998899e-05, 0.011587027902434266, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006487473152022916, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023354529351761077, 9.999999999998899e-05, 0.06210665035374152, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07873647916796145, 0.10752526784422278, 0.1488082521525792, 0.09473334777004183, 0.08080059927178174, 0.09596305713686815, 0.12426571230077565, 0.09782809146500748, 0.12132021645337587, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009690924809685586, 9.999999999998899e-05, 0.018752536129987285, 9.999999999998899e-05, 9.999999999998899e-05, 0.029288667638133536, 0.07360705001169066, 0.07817707258363193, 0.06050620675755858, 0.10296664918045595, 0.073731748847648, 0.06342779877777738, 0.0563262393740408, 0.051136925437612835, 0.08315660209452436, 0.09790754697872706, 0.09959974378996961, 0.10541243166539493, 0.10933286604304282, 0.08535155680378426, 0.08499080356595623, 0.11944568968387825, 0.1046542516646336, 0.08003649522506384, 0.036686021772330935, 0.041050152272667395, 0.036092725075254184, 0.05052595965779505, 0.029357160434324236, 0.04137210347423004, 0.06135741659822891, 0.040640318782981244, 0.013561373904355634, 0.1413975130223729, 0.07793578800477119, 0.16129918586289893, 0.12174014658902665, 0.09994308821018827, 0.15448376682251164, 0.12703104297876522, 0.11012868734210146, 0.15129319257141594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04442006366145346, 0.0567601902198156, 0.057309529375126345, 0.06780545187525899, 0.12231382758596865, 0.06264241876391063, 0.061698637312464055, 0.057456643073209634, 0.05454410871709248, 0.038890618427747214, 0.04336927236653643, 0.01659227834461563, 0.01893301115375834, 0.021833048203540928, 0.04656278851017537, 0.01929031744997356, 0.016058447039420165, 0.043439998044312644, 0.12943861524395783, 0.1684344919448968, 0.1789517157634546, 0.13773724068041682, 0.1321842316660703, 0.16515009248450774, 0.1376091628129461, 0.1182438428082565, 0.1666697205278459, 0.0101586338410532, 0.035139983118855134, 0.04557075046522441, 0.0062051683112007705, 0.012925982480323728, 0.014136445629216676, 0.017146211357083163, 0.02828827262713507, 0.02803538880631129]}, "mutation_prompt": null}
