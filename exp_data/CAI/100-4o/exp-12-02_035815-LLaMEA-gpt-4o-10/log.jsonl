{"id": "2c04dd9b-5bd3-4542-a798-ab3e712b58d2", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.population_size = 50\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best = None\n        self.global_best_value = np.inf\n        self.alpha = 0.5\n        self.beta = 0.5\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.f = 0.5\n        self.cr = 0.9\n    \n    def __call__(self, func):\n        evaluations = 0\n        \n        while evaluations < self.budget:\n            # Evaluate the swarm\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                fitness = func(self.particles[i])\n                evaluations += 1\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best = self.particles[i].copy()\n            \n            # PSO Update\n            for i in range(self.swarm_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive = self.c1 * r1 * (self.personal_best[i] - self.particles[i])\n                social = self.c2 * r2 * (self.global_best - self.particles[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive + social\n                self.particles[i] = self.particles[i] + self.velocities[i]\n                self.particles[i] = np.clip(self.particles[i], -5.0, 5.0)\n            \n            # Evaluate the population\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                fitness = func(self.population[i])\n                evaluations += 1\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best = self.population[i].copy()\n            \n            # DE Update\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                candidates = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                x1, x2, x3 = self.population[candidates]\n                mutant = x1 + self.f * (x2 - x3)\n                mutant = np.clip(mutant, -5.0, 5.0)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, self.population[i])\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness:\n                    self.population[i] = trial\n        \n        return self.global_best, self.global_best_value", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to adaptively balance exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.24533809342709176, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7460841577443842, 0.7351281898984384, 0.7133172147443002, 0.7111226686542418, 0.7382522952401374, 0.6839124941159509, 0.7406287588081244, 0.7383582724030466, 0.7117639067307058, 0.3106107168575948, 0.1792205993165188, 0.2932519607615357, 0.24818743559569345, 0.12497427203055578, 0.2440435562106511, 0.21384952521304368, 0.2571598479336338, 0.33724954020960884, 0.10386259496469297, 0.14480122110393479, 0.132051493649049, 0.11165362121155209, 0.12903112238975778, 0.11377384704836424, 0.09040095919049673, 0.13285439865220983, 0.10770359630885196, 0.13355996430895922, 0.12875337278207866, 0.10288687565281929, 0.10679700655759972, 0.06749250500761095, 0.10235781326394355, 0.12392553278036722, 0.12222393570064649, 0.12151090363322725, 0.9424522867737479, 0.9625317491720574, 0.9418242789131539, 0.9109955297581611, 0.9186238658190664, 0.9188010284467174, 0.9629539321065346, 0.9410063741201016, 0.9518823146805251, 0.4061376754345931, 0.29206421017007356, 0.34046067437506977, 0.1744004253917366, 0.15052809932674505, 0.2811748532589168, 0.31215260504426645, 0.24815165028486197, 0.3301291829150538, 0.2108308114797821, 0.2315617008098737, 0.5910249874374969, 0.2285419798139553, 0.21664854682662205, 0.19831520259204194, 0.35212768295785724, 0.3155757191971854, 0.3217269728869476, 0.13153072159476198, 0.1504673121843605, 0.1674358059542188, 0.1496390316761006, 0.10065659686004169, 0.1438933739606607, 0.1141084497908409, 0.14696591811881576, 0.2437947561389816, 0.14330707362735373, 0.0895494434115659, 0.1810355065216528, 0.13026876588838254, 0.14140128161356091, 0.2133936206950081, 0.14082996473197595, 0.16894913804740885, 0.10462275372079277, 0.01408645974287448, 0.031160156116164184, 0.01715795089259886, 0.007903300595388463, 0.01716046741788957, 0.01484902167870683, 0.007873814354861675, 0.014363188680837413, 0.03867101168472031, 0.09282229103225914, 0.11328758975324804, 0.10317637043762329, 0.09457931660660435, 0.02639119931129863, 0.025150547534497858, 0.11150002366685441, 0.10228675149368316, 0.06225387951210526, 0.07843824549107448, 0.017568296754064017, 0.22126741527532745, 0.07135686075435566, 0.14581526593374006, 0.07634395951825823, 0.07396464743199627, 0.07975551275200565, 0.055318156477184854, 0.0988732612007932, 0.24661130585356428, 0.09284403771838556, 0.03481412390114491, 0.21685322351339198, 0.08413916784197317, 0.07563629231393298, 0.07101117856485795, 0.07645415304661785, 0.5003168105235043, 0.47423337708360114, 0.4958185389083103, 0.43568233390646605, 0.4667593528144576, 0.46429560324638075, 0.47921000015949544, 0.47059624190669214, 0.47003370074306694, 0.11671490857908084, 0.0839489497378576, 0.07571697512213049, 0.12153608203656874, 0.15209804247650194, 0.09817971471932074, 0.0794978433052369, 0.11732346641125191, 0.10368034762205347, 0.2189976993933962, 0.17927839175277915, 0.21317769232708894, 0.23129227036019728, 0.25492906523567704, 0.1432507475195829, 0.19113850480328898, 0.21232735650291856, 0.22282240014841515, 0.2757188654628878, 0.27993508726366667, 0.3786666631434389, 0.2709631368753511, 0.2457260182843065, 0.25883599310328376, 0.30667483244270743, 0.3742242605115256, 0.2552630430074757, 0.15288254893896847, 0.20268245493178472, 0.18580438697300183, 0.265601348614649, 0.21207470211997803, 0.17853596386289006, 0.2069115167022395, 0.3211676934470802, 0.12821732253745577, 0.19336944387721777, 0.20422565227543188, 0.18863921498532332, 0.25594845424293977, 0.16254167571355216, 0.17177465274108727, 0.20721481103735084, 0.1952134503851749, 0.2167738512829155, 0.19263331313155319, 0.19122391172885977, 0.18165938401511295, 0.1954004316911302, 0.2084515477408252, 0.20632719746035222, 0.18809069645985255, 0.19997445701208294, 0.1942396260365422, 0.22052266717075786, 0.1926729892533735, 0.4097223607214565, 0.17031590285787557, 0.31801155721575236, 0.23810258594972933, 0.6269012763090411, 0.23972862633448733, 0.20542923230360866, 0.5360570495347178, 0.16549984729912082, 0.4300795883404246, 0.5846816375065016, 0.2793420956585997, 0.22667765044376909, 0.15951178417021783, 0.39602476870948344, 0.24961660354772008, 0.18884390407085372, 0.18238373392167118, 0.17785446652931647, 0.17933321146566505, 0.18019950532860018, 0.20046319105410626, 0.17170190796293994, 0.19072788686072673, 0.19759636911113643, 0.07626340513925212, 0.08936395954644882, 0.08055324237389427, 0.07862538703180466, 0.08826597846378625, 0.08706749458182805, 0.06462389581187855, 0.07442168248466263, 0.08042823174245373]}, "mutation_prompt": null}
{"id": "c4a7387b-8967-4de9-9994-8781c6b191ef", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.population_size = 50\n        self.particles = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best = None\n        self.global_best_value = np.inf\n        self.alpha = 0.5\n        self.beta = 0.5\n        self.w = 0.9  # Updated initial inertia weight\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.f = 0.5\n        self.cr = 0.9\n    \n    def __call__(self, func):\n        evaluations = 0\n        \n        while evaluations < self.budget:\n            # Evaluate the swarm\n            elite_threshold = self.swarm_size // 4  # Added elite selection threshold\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                fitness = func(self.particles[i])\n                evaluations += 1\n                if fitness < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness\n                    self.personal_best[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best = self.particles[i].copy()\n            \n            # Adaptive inertia weight update\n            self.w = 0.4 + 0.5 * (1 - evaluations / self.budget)  # Line modified for adaptive inertia\n\n            # PSO Update\n            for i in range(self.swarm_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive = self.c1 * r1 * (self.personal_best[i] - self.particles[i])\n                social = self.c2 * r2 * (self.global_best - self.particles[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive + social\n                self.particles[i] = self.particles[i] + self.velocities[i]\n                self.particles[i] = np.clip(self.particles[i], -5.0, 5.0)\n            \n            # Evaluate the population\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                fitness = func(self.population[i])\n                evaluations += 1\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best = self.population[i].copy()\n            \n            # DE Update with elite selection\n            elite_indices = np.argsort([func(ind) for ind in self.population])[:elite_threshold]\n            for i in range(self.population_size):\n                if evaluations >= self.budget or i in elite_indices:  # Skip update for elite individuals\n                    break\n                candidates = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                x1, x2, x3 = self.population[candidates]\n                mutant = x1 + self.f * (x2 - x3)\n                mutant = np.clip(mutant, -5.0, 5.0)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, self.population[i])\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness:\n                    self.population[i] = trial\n        \n        return self.global_best, self.global_best_value", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive inertia weight and elite selection to improve convergence speed and solution quality.", "configspace": "", "generation": 1, "fitness": 0.16807084653017532, "feedback": "", "error": "", "parent_id": "2c04dd9b-5bd3-4542-a798-ab3e712b58d2", "metadata": {"aucs": [0.36129597760473664, 0.3738783374645047, 0.39172495736171964, 0.3378874360191456, 0.37949578006610796, 0.3894353639891416, 0.39082420642805193, 0.1730366369625379, 0.17835872547728904, 0.04205120422562081, 0.009595400040181112, 0.002489702335910282, 0.030890062712962796, 0.011188244810646064, 0.008122812839787885, 0.013736992858164876, 0.036060821266728604, 0.01445842762253946, 0.08958267382617546, 0.09403280785743573, 0.08219048695864462, 0.07396440758988687, 0.08823008155030188, 0.054606483884462986, 0.08405425646654896, 0.043454477362196986, 0.06396210684974668, 0.07621056625882994, 0.07983759344211816, 0.08132217025825195, 0.08105490782466573, 0.05581524482891076, 0.07707820049814051, 0.06970192272515052, 0.06557963311921033, 0.07546058019831803, 0.964126042541538, 0.9652110046360983, 0.9518446157768493, 0.92875214587011, 0.9498492634874804, 0.9508429405662611, 0.9527164607762725, 0.9623872821958781, 0.9610277708951687, 0.09346100331859486, 0.09491176997703665, 0.09750832843016666, 0.18953386827790608, 0.19297620120601622, 0.13399207282665226, 0.08359274078474443, 0.08702397035231024, 0.08300845779140942, 0.20668743237452514, 0.14836083912683806, 0.18393224496852423, 0.27989854640296963, 0.15950246143781988, 0.14420443694914808, 0.17613864782409494, 0.20625228684032315, 0.16410728174868894, 0.08979010810860455, 0.10133400027518569, 0.09697608663170865, 0.04982838356439201, 0.09055692210800248, 0.10412006743093949, 0.10368547709104681, 0.107794618072233, 0.07949139374266745, 0.13858929513736762, 0.02932280527590625, 0.09176327479054203, 0.09853653659806572, 0.1489011910896877, 0.09846940425360917, 0.0291400508447327, 0.08176784763082412, 0.023785196402719477, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004895813422210238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04971590215730026, 0.026384474608627584, 0.03573562663544416, 0.06073733233567835, 0.011254923782991533, 0.007866856576991044, 0.06310006447944727, 0.04963440000343522, 0.004214506259092365, 0.003691244396110238, 0.0041452199309433, 0.00825120193894524, 0.0025626984754322235, 0.011974240442994444, 0.009289231843350954, 0.011734940289946483, 0.014660901700048634, 0.021213737937554655, 0.060514829916921364, 0.05786476052803613, 0.07533861119468133, 0.024827574842410827, 0.077315753906683, 0.039961079366417795, 0.058139691502820834, 0.030681316951310378, 0.044037431829577534, 0.3516810273773372, 0.3690610031475998, 0.35771669742117207, 0.2782924494909971, 0.34240621842816277, 0.34995458757461306, 0.35666507786102153, 0.316510301150435, 0.3331375013754756, 0.05316746982798248, 0.057840092030053136, 0.0547879022991552, 0.07739035514872317, 0.07494282195761737, 0.09131915514374067, 0.07288877424951157, 0.08105311176528718, 0.08115661165976162, 0.13476291545879193, 0.1467787925465236, 0.17459338474663633, 0.1916813279777443, 0.20150269212770966, 0.1659532149305294, 0.19181288057365886, 0.17732142065541845, 0.14482411726429367, 0.20043948264544353, 0.26107521626088315, 0.26738669722395403, 0.2031422010406242, 0.23566490095131143, 0.23755692815440488, 0.190354819869628, 0.26434407045716857, 0.17359882043558317, 0.18151955970926814, 0.172687941293849, 0.20391852701199775, 0.17283658086894793, 0.16843909142634605, 0.197154494854603, 0.1517340732574266, 0.2043902493706391, 0.12446871164860274, 0.19508291432216351, 0.16556920228801097, 0.1563584701347952, 0.1632635082162971, 0.18320554879328654, 0.19553854009456717, 0.17948546702567214, 0.16353464387713246, 0.1661775742242455, 0.1666638958869786, 0.18373562186217773, 0.18238528547508603, 0.18485516306179128, 0.17858223741861567, 0.16802071261002838, 0.19126883063130895, 0.17968462273773933, 0.17539516392963506, 0.12422612919813658, 0.1401808902374747, 0.19191989332657478, 0.5363064802676683, 0.18723059373385498, 0.179129782738914, 0.11961741860439834, 0.1658478730833034, 0.20232319245982067, 0.34089962107622007, 0.1637307623165951, 0.29653036895347895, 0.2656525993823683, 0.1415795468085851, 0.16371797470209004, 0.1763346200852446, 0.19198084380355862, 0.31307307264478035, 0.16831247162369256, 0.16988191177448786, 0.16721166434960688, 0.17241894635449384, 0.16505393423196524, 0.17480706978815885, 0.17617892203439456, 0.20364282239551457, 0.19437125722103943, 0.06555634134762789, 0.06700029560826404, 0.0634094893627305, 0.06326022923406494, 0.06580933509280518, 0.05615686021562083, 0.05826771661863117, 0.06466788640115506, 0.06137552490853937]}, "mutation_prompt": null}
