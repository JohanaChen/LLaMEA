{"id": "96d39f6b-8565-4f39-99d1-1f2dba59243b", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridDE_NM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.num_evaluations = 0\n\n    def differential_evolution(self, func):\n        fitness = np.array([func(ind) for ind in self.population])\n        self.num_evaluations += self.population_size\n\n        for i in range(self.population_size):\n            if self.num_evaluations >= self.budget:\n                break\n            candidates = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n            a, b, c = self.population[candidates]\n            mutant = a + self.mutation_factor * (b - c)\n            mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n            crossover = np.random.rand(self.dim) < self.crossover_rate\n            if not np.any(crossover):\n                crossover[np.random.randint(0, self.dim)] = True\n\n            trial = np.where(crossover, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.num_evaluations += 1\n\n            if trial_fitness < fitness[i]:\n                fitness[i] = trial_fitness\n                self.population[i] = trial\n        return fitness\n\n    def nelder_mead(self, func, best_individual):\n        if self.num_evaluations >= self.budget:\n            return best_individual\n        res = minimize(\n            func, best_individual, method='Nelder-Mead', \n            bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n            options={'maxfev': self.budget - self.num_evaluations, 'disp': False}\n        )\n        self.num_evaluations += res.nfev\n        return res.x\n\n    def __call__(self, func):\n        while self.num_evaluations < self.budget:\n            fitness = self.differential_evolution(func)\n            best_idx = np.argmin(fitness)\n            best_individual = self.population[best_idx]\n            best_individual = self.nelder_mead(func, best_individual)\n            self.population[best_idx] = best_individual\n        return self.population[np.argmin([func(ind) for ind in self.population])]", "name": "HybridDE_NM", "description": "A hybrid algorithm combining Differential Evolution and Nelder-Mead simplex to balance exploration and exploitation for efficient convergence in black box optimization.", "configspace": "", "generation": 0, "fitness": 0.4225969775997285, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.9710701588970913, 0.9651911285191095, 0.9595082318358101, 0.9777442364819866, 0.9777225107194355, 0.9765303468871754, 0.9773742178530586, 0.9742576158134674, 0.9722140049628457, 0.9147809233659999, 0.9100816817405089, 0.9201376606674696, 0.9192746107166306, 0.9368801136749483, 0.9034745115363554, 0.28935490113420315, 0.07581403223923322, 0.1977831875372612, 0.08077282971356547, 0.08648292256164336, 0.08078890933998883, 0.08459575122178487, 0.09453479700149525, 0.08493285966860098, 0.08826289665132903, 0.12069146989284363, 0.09875632716727156, 0.07360930766493534, 0.05000615424133559, 0.06996963706167303, 0.09510897653639694, 0.05553446212456037, 0.06721658732626679, 0.09982266614743307, 0.08106727660973923, 0.059575287110737785, 0.9842700401365694, 0.9785866257069198, 0.9720653761891195, 0.9814721059349772, 0.9843487559040929, 0.9800323793056678, 0.9331995696973985, 0.9846175562660032, 0.9869394432925613, 0.5159993558977156, 0.44805163753094723, 0.4486019296683009, 0.45115738207772915, 0.15359606881499144, 0.21478179135211328, 0.7536332260138991, 0.5628896953746846, 0.12722885321254085, 0.18037697808289033, 0.19575561183144785, 0.1522908326307465, 0.2159822799595842, 0.16776015279054535, 0.21273719676349356, 0.17911567707967258, 0.16580826793481285, 0.17091878444143582, 0.9642439907846606, 0.13732125853606358, 0.938635376546444, 0.9176724513590785, 0.940214915679086, 0.9421688932308322, 0.9617418512068351, 0.9126545901893961, 0.9356983953707202, 0.9124863752154404, 0.9382147127403324, 0.646941235617464, 0.9377137882805137, 0.945272327922048, 0.9412514030433774, 0.13684326550853654, 0.9335038137404466, 0.1328183223871633, 0.8397030958670765, 0.7463399244725725, 0.7067150779341299, 0.9250165356488034, 0.8044101008672059, 0.01955245734319, 0.9057875868461276, 0.898523805906369, 0.8978072899413458, 0.871193249478584, 0.9050517936939795, 0.8914702137012009, 0.8950209499315098, 0.07876622165265346, 0.8332983474938749, 0.061556290755350185, 0.8966325666661236, 0.336820218479995, 0.7967237048509341, 0.838195559348909, 0.7738310290612802, 0.8734196982489532, 0.05872783117190139, 0.08702326042115527, 0.6426190789002225, 0.717577151997079, 0.0871252686223648, 0.7524506593598369, 0.04499768712421537, 0.7745212571308953, 0.598487975277028, 0.7642005469006579, 0.7955717887829041, 0.7735823461943578, 0.08642394535370568, 0.08707463967215756, 0.9104758335945008, 0.9512561136423888, 0.96732335989023, 0.7028621218126425, 0.5757838166307241, 0.6418925926524737, 0.9685166968212385, 0.8685102495651738, 0.9559849018379902, 0.07669453407598081, 0.06599648185876139, 0.06926602638953738, 0.06111274313859394, 0.09443193879389344, 0.08199149644733883, 0.08552231114853825, 0.07600194509202485, 0.07397505761580592, 0.11640943550384986, 0.136984526362663, 0.13838141846229723, 0.22484801090650053, 0.15439192723356698, 0.1598281485667692, 0.16185074541090816, 0.1868799555408417, 0.1310929620684912, 0.16904744264330895, 0.16864303872158548, 0.20002695455820962, 0.19954559290933216, 0.147381648779896, 0.16458460590071644, 0.21851236076744562, 0.20611904283410476, 0.18654704157481738, 0.10816167354832829, 0.13633691673967274, 0.1392190944806554, 0.13151524735833153, 0.10324527704615505, 0.1344432264496518, 0.12257840797624231, 0.11305305405866706, 0.1302484188502876, 0.21370614514774566, 0.15024873240962222, 0.1805107225222502, 0.1772325245859212, 0.1795517396769013, 0.21530023336317972, 0.18968579303753408, 0.20742181128731385, 0.1967306580250422, 0.18136295574502515, 0.19482751877112903, 0.16448636607731804, 0.25791727031710543, 0.1835974581074039, 0.18514103663053327, 0.16547356042843564, 0.17387311811215223, 0.17474876655280513, 0.978510625761606, 0.20419236146856734, 0.20304842220517616, 0.15717660415443369, 0.20202459609668344, 0.14772041350752319, 0.1641594087139483, 0.1663731122648976, 0.21319632533481858, 0.9749189516419139, 0.21406083490197203, 0.15953558847609983, 0.5526195031547438, 0.15645090279107665, 0.2266314864185981, 0.19005297939113974, 0.13010997780757483, 0.964167299914821, 0.2214968105204479, 0.26322806258391884, 0.19977888812203104, 0.5225775348452352, 0.2164939325124151, 0.1761510650905984, 0.19069081566496127, 0.20386540278606002, 0.1862857842565011, 0.06486874638173379, 0.08176671259406176, 0.06337398552588636, 0.06473595813701527, 0.07333177415255576, 0.06809960396163828, 0.07916609886809478, 0.0710067659969924, 0.08503212950490446]}, "mutation_prompt": null}
{"id": "8dca7319-a2df-4ba8-a5ea-4d5f7dc6252c", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridDE_NM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.num_evaluations = 0\n\n    def differential_evolution(self, func):\n        fitness = np.array([func(ind) for ind in self.population])\n        self.num_evaluations += self.population_size\n\n        for i in range(self.population_size):\n            if self.num_evaluations >= self.budget:\n                break\n            candidates = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n            a, b, c = self.population[candidates]\n            # Dynamic mutation factor update based on diversity\n            self.mutation_factor = 0.5 + np.std(self.population) / self.dim\n            mutant = a + self.mutation_factor * (b - c)\n            mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n            crossover = np.random.rand(self.dim) < self.crossover_rate\n            if not np.any(crossover):\n                crossover[np.random.randint(0, self.dim)] = True\n\n            trial = np.where(crossover, mutant, self.population[i])\n            trial_fitness = func(trial)\n            self.num_evaluations += 1\n\n            if trial_fitness < fitness[i]:\n                fitness[i] = trial_fitness\n                self.population[i] = trial\n        return fitness\n\n    def nelder_mead(self, func, best_individual):\n        if self.num_evaluations >= self.budget:\n            return best_individual\n        res = minimize(\n            func, best_individual, method='Nelder-Mead', \n            bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n            options={'maxfev': self.budget - self.num_evaluations, 'disp': False}\n        )\n        self.num_evaluations += res.nfev\n        return res.x\n\n    def __call__(self, func):\n        while self.num_evaluations < self.budget:\n            fitness = self.differential_evolution(func)\n            best_idx = np.argmin(fitness)\n            best_individual = self.population[best_idx]\n            best_individual = self.nelder_mead(func, best_individual)\n            self.population[best_idx] = best_individual\n        return self.population[np.argmin([func(ind) for ind in self.population])]", "name": "HybridDE_NM", "description": "Introduce a dynamic mutation factor in Differential Evolution that adapts based on the diversity of the population to improve convergence efficiency.", "configspace": "", "generation": 1, "fitness": 0.37087266118896944, "feedback": "", "error": "", "parent_id": "96d39f6b-8565-4f39-99d1-1f2dba59243b", "metadata": {"aucs": [0.9710701588970913, 0.9651911285191095, 0.970724391476661, 0.9777442364819866, 0.9777225107194355, 0.9765303468871754, 0.9352889291753981, 0.9656211309311484, 0.9600987364926398, 0.9263222004088207, 0.9100816817405089, 0.9201376606674696, 0.9275701004599997, 0.9368801136749483, 0.049948930584925444, 0.06289033218765383, 0.06180695424399141, 0.0199704883607581, 0.0615426695531065, 0.07030178392387265, 0.05475689053584554, 0.0836984082591884, 0.07517824581446808, 0.07758708598294428, 0.07076819763373643, 0.12069146989284363, 0.07139843230910214, 0.07051035673057826, 0.06535211657181295, 0.05239682916847488, 0.0740421218601427, 0.056731705704441415, 0.1140161435313265, 0.06895943057751397, 0.06560505587455878, 0.04850639228682907, 0.9726933453545468, 0.9785866257069198, 0.976288568506466, 0.9812804605953958, 0.9858345355809416, 0.9863953878626143, 0.9862947035967063, 0.9834358074072428, 0.9783945157422258, 0.5159993558977156, 0.44805163753094723, 0.4486019296683009, 0.45115738207772915, 0.15359606881499144, 0.21478179135211328, 0.07836574790121376, 0.5628896953746846, 0.08859035027287154, 0.12945040589313506, 0.18475754595601834, 0.13342540867979902, 0.18609474027889605, 0.1733243812579125, 0.1425434335978103, 0.12268148767503384, 0.12175043492490878, 0.10809497456957451, 0.9642439907846606, 0.13208883620905632, 0.938635376546444, 0.08979436613567682, 0.9279308061823589, 0.9371724348005777, 0.9617418512068351, 0.7723610961230922, 0.9356983953707202, 0.9124863752154404, 0.9329986583595749, 0.10892599953090298, 0.9102991771919617, 0.9239235168243127, 0.9412514030433774, 0.13684326550853654, 0.13415577014302782, 0.1328183223871633, 0.8397030958670765, 0.7463399244725725, 0.09567070203068684, 0.9250165356488034, 9.999999999998899e-05, 0.8283492359676724, 0.9057875868461276, 0.8637156514763732, 9.999999999998899e-05, 0.04882410844336482, 0.9050517936939795, 0.04438788817308981, 0.8950209499315098, 0.01668366301838864, 0.08312094674544734, 0.7331548988876107, 0.08097591842220464, 0.8719502537123698, 0.6746081257544957, 0.838195559348909, 0.7738310290612802, 0.8734196982489532, 0.05432210338296206, 0.08702326042115527, 0.083094718720783, 0.717577151997079, 0.6295121544019802, 0.7524506593598369, 0.318651338682013, 0.7745212571308953, 0.06579129568193698, 0.7642005469006579, 0.7955717887829041, 0.03150444987612355, 0.0864237731685209, 0.08707463967215756, 0.8010733365937758, 0.9512561136423888, 0.96732335989023, 0.5261829389924249, 0.5046641235743166, 0.9386880261310767, 0.9685166968212385, 0.8685102495651738, 0.9559849018379902, 0.09158830087181924, 0.09446867589092056, 0.05614247792849636, 0.06403007033308694, 0.047351644584133656, 0.07375776237251053, 0.08365176778728733, 0.07338735615004499, 0.07397505761580592, 0.1331642016366268, 0.12718564400237897, 0.13838141846229723, 0.22484801090650053, 0.15439192723356698, 0.1598281485667692, 0.16185074541090816, 0.1251612410092584, 0.1452522362494556, 0.16361974319577277, 0.17093868949880398, 0.16729222419729617, 0.15760577052282276, 0.17115136383568808, 0.15923289467383261, 0.17443445294282411, 0.18526575227338615, 0.1684832576810955, 0.10495709224850358, 0.17480314340537428, 0.11334840543797364, 0.10558939723145244, 0.07796280159112301, 0.10052590320678678, 0.10459970969315369, 0.11069158016701708, 0.12437394343500086, 0.21370614514774566, 0.13662036684100454, 0.1573812675120707, 0.25604951728143843, 0.20193845799388177, 0.15467233858605745, 0.18968579303753408, 0.2726301483195993, 0.1907189994036138, 0.17317078341474823, 0.19482751877112903, 0.18252450506708728, 0.25791727031710543, 0.16540333644202032, 0.18514103663053327, 0.1894170972176511, 0.1699953806755652, 0.18854241221506263, 0.1838805889979399, 0.1772007088034081, 0.16395408305120707, 0.13214668057105106, 0.20202459609668344, 0.12958072417205635, 0.1432401336138348, 0.35354705751877036, 0.21319632533481858, 0.9749189516419139, 0.21406083490197203, 0.2129174425266086, 0.1695334607821385, 0.12830950615498804, 0.22763966792770962, 0.15195042217320098, 0.18959728312670032, 0.964167299914821, 0.22704979390760138, 0.20049564731376557, 0.19977888812203104, 0.22413042559151342, 0.22375462855422845, 0.24764094690965088, 0.19756848133817984, 0.19203704955494882, 0.2773523412050368, 0.08975427748467413, 0.06146082040887357, 0.06392040871123172, 0.08412855904325389, 0.07333177415255576, 0.06809960396163828, 0.08442723630060012, 0.07598207203500629, 0.06378072504967436]}, "mutation_prompt": null}
