{"id": "ba094512-8003-4249-b4d2-7051498b6802", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = min(50, self.budget)  # Number of particles in the swarm\n        self.particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.num_particles, self.dim))\n        self.personal_bests = self.particles.copy()\n        self.personal_best_scores = np.full(self.num_particles, np.inf)\n        self.global_best = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        inertia_weight = 0.7\n        cognitive_weight = 1.5\n        social_weight = 1.5\n\n        while self.evaluations < self.budget:\n            # Evaluate all particles\n            for i in range(self.num_particles):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal bests\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_bests[i] = self.particles[i].copy()\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best = self.particles[i].copy()\n\n            # Update velocities and positions\n            for i in range(self.num_particles):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                cognitive_component = cognitive_weight * r1 * (self.personal_bests[i] - self.particles[i])\n                social_component = social_weight * r2 * (self.global_best - self.particles[i])\n\n                self.velocities[i] = (\n                    inertia_weight * self.velocities[i] + cognitive_component + social_component\n                )\n\n                self.particles[i] += self.velocities[i]\n                self.particles[i] = np.clip(self.particles[i], -5.0, 5.0)\n\n            # Apply adaptive differential evolution\n            for i in range(self.num_particles):\n                if self.evaluations >= self.budget:\n                    break\n                # Select three random indices different from i\n                indices = np.random.choice(list(set(range(self.num_particles)) - {i}), 3, replace=False)\n                a, b, c = self.particles[indices]\n                F = 0.5 + np.random.rand() * 0.5  # Differential weight\n\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, -5.0, 5.0)\n\n                crossover_rate = 0.9\n                crossover = np.random.rand(self.dim) < crossover_rate\n                trial = np.where(crossover, mutant, self.particles[i])\n\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_bests[i] = trial.copy()\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best = trial.copy()\n\n        return self.global_best, self.global_best_score", "name": "HybridSwarmOptimizer", "description": "A hybrid swarm-based algorithm combining particle swarm optimization with adaptive differential evolution to balance exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.23767918137737645, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6424098358722025, 0.61428652186684, 0.6151627654038891, 0.6576045961729393, 0.6627401446137888, 0.6076728484669167, 0.6557772740832424, 0.6323406630957029, 0.6334602489954728, 0.1330870988162577, 0.2258352674754902, 0.03407396150857844, 0.23274433084492452, 0.21201476169115763, 0.17603492015317246, 0.18796400733494134, 0.18699727633272345, 0.20273621819965182, 0.11078962771957135, 0.1302516347042918, 0.12034861165301258, 0.14901547432389883, 0.12323084040278431, 0.11827190281121769, 0.12429825231181835, 0.12650414280619482, 0.13747657627953247, 0.10250645815026183, 0.10814594257849475, 0.12193897207350679, 0.09627298265144146, 0.12770086626422494, 0.09199889975499431, 0.0982743293363626, 0.14006609730486597, 0.10793232028638555, 0.9764287702415646, 0.9761136436693497, 0.9774658422987479, 0.976375672591404, 0.9769461546525384, 0.9745312838423139, 0.976303689627835, 0.9765401358035747, 0.9773574936931654, 0.3856692996547385, 0.2983768801604767, 0.30914159309991185, 0.2626367051481019, 0.28732030089484584, 0.3000746031587186, 0.08283033559102426, 0.08733655716575195, 0.08826427914402935, 0.211275457545406, 0.35196529441531543, 0.30412421375120535, 0.19175491582912219, 0.5823936763731572, 0.19711632590881234, 0.2258892191788947, 0.1258905006737867, 0.5962812789089715, 0.11978437059096014, 0.11832010677372529, 0.1456423949803609, 0.09264740465921073, 0.21860290929347725, 0.14716829330568304, 0.1532752228940797, 0.14880261500760594, 0.1541273160859995, 0.17147617399531323, 0.15937661932322478, 0.11645261223242542, 0.12675148784420454, 0.12104522886642277, 0.15419567389453437, 0.1344310574942723, 0.12365446761575427, 0.18407013031047192, 9.999999999998899e-05, 9.999999999998899e-05, 0.01937629879278957, 0.00011672666798623332, 9.999999999998899e-05, 9.999999999998899e-05, 0.010162081455181382, 0.02569561817231658, 0.008538216351994365, 0.07242926289386831, 0.05065264957581894, 0.05569795438043834, 0.10304899103327714, 0.038422009830559545, 0.02278404881759777, 0.04718603468055427, 0.04810380719856333, 0.06626217065417017, 9.999999999998899e-05, 0.021351822146573274, 0.08334394086808994, 0.0571391532044252, 0.09038907985330791, 0.07397797978107212, 0.06155157261750832, 0.0557046305861304, 0.06810021271745559, 0.06641317158873294, 0.031212845010938683, 0.12243828274442459, 0.05107369551016294, 0.1415807417792152, 0.104311065347783, 0.05128253316916975, 0.044675635886007536, 0.07498779934145716, 0.43465788690046314, 0.45694156325640345, 0.46440854839239887, 0.20863789728121807, 0.4400629827735594, 0.4125037486885378, 0.45447897837814266, 0.4327432653379011, 0.4532490727943237, 0.10346259714687489, 0.08028377667340791, 0.06587466710573209, 0.10293157822703813, 0.10083837093329351, 0.10889243212310518, 0.11045931268113396, 0.08160299420121864, 0.12307336307212702, 0.19768990214086313, 0.16835613355962542, 0.17624672116022067, 0.23859017385304992, 0.2730807441870049, 0.2534151052209326, 0.32399982468454025, 0.17114128127206407, 0.18880639315056813, 0.3004910283687634, 0.22025476753223094, 0.2878271440524721, 0.2951795199312537, 0.3226218559527744, 0.30437634759571885, 0.3227552241121201, 0.3532904752935839, 0.3518824944980542, 0.2579203969423399, 0.18752477473151563, 0.21498252636999915, 0.18882324559214125, 0.23658390709613364, 0.18553358369100703, 0.22789061001859745, 0.21087375520996476, 0.2238447768788021, 0.23628560755326056, 0.16908168878871133, 0.19707901063378253, 0.2156132322914407, 0.19170679204321295, 0.20185744127548422, 0.21993735962295102, 0.1896435824742393, 0.2086746104522481, 0.20722337690970338, 0.19903075707903428, 0.20365170599820537, 0.23099407299884145, 0.19531526309670977, 0.29890903260371926, 0.2502766649075474, 0.21656984732981388, 0.20192775803185548, 0.7725084818382012, 0.12639207360957772, 0.15194501223124246, 0.7596378437317509, 0.19715923852721107, 0.19704681066288277, 0.7003086745015079, 0.16013411592973514, 0.4860213843351505, 0.5236748826952627, 0.20669554457718287, 0.2866730536198415, 0.44375643681310706, 0.16680230302324328, 0.482289130047162, 0.20671472428822513, 0.20822183694327268, 0.19839903859650465, 0.20783536422746474, 0.184877086522238, 0.17798972786717693, 0.18474122854575015, 0.19307409166556688, 0.18233038936341406, 0.20403919352957223, 0.18653198420522765, 0.17917490906489053, 0.09032579000487662, 0.08946277114865919, 0.08306172908303144, 0.08082499524961839, 0.07456206944909194, 0.07975616681902797, 0.07605385282603949, 0.0768420138085617, 0.07727076181925208]}, "mutation_prompt": null}
{"id": "c84e9b8e-9e16-41f4-ae80-58d7100ba86b", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = min(50, self.budget)  # Number of particles in the swarm\n        self.particles = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.num_particles, self.dim))\n        self.personal_bests = self.particles.copy()\n        self.personal_best_scores = np.full(self.num_particles, np.inf)\n        self.global_best = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        cognitive_weight = 1.5\n        social_weight = 1.5\n\n        while self.evaluations < self.budget:\n            # Evaluate all particles\n            for i in range(self.num_particles):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal bests\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_bests[i] = self.particles[i].copy()\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best = self.particles[i].copy()\n\n            # Dynamic inertia weight\n            inertia_weight = 0.9 - 0.5 * (self.evaluations / self.budget)\n\n            # Update velocities and positions\n            for i in range(self.num_particles):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                cognitive_component = cognitive_weight * r1 * (self.personal_bests[i] - self.particles[i])\n                social_component = social_weight * r2 * (self.global_best - self.particles[i])\n\n                self.velocities[i] = (\n                    inertia_weight * self.velocities[i] + cognitive_component + social_component\n                )\n\n                self.particles[i] += self.velocities[i]\n                self.particles[i] = np.clip(self.particles[i], -5.0, 5.0)\n\n            # Apply adaptive differential evolution\n            for i in range(self.num_particles):\n                if self.evaluations >= self.budget:\n                    break\n                # Select three random indices different from i\n                indices = np.random.choice(list(set(range(self.num_particles)) - {i}), 3, replace=False)\n                a, b, c = self.particles[indices]\n                F = 0.5 + np.random.rand() * 0.5  # Differential weight\n\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, -5.0, 5.0)\n\n                crossover_rate = 0.9\n                crossover = np.random.rand(self.dim) < crossover_rate\n                trial = np.where(crossover, mutant, self.particles[i])\n\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_bests[i] = trial.copy()\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best = trial.copy()\n\n        return self.global_best, self.global_best_score", "name": "HybridSwarmOptimizer", "description": "Improved the balance between exploration and exploitation by adjusting inertia_weight based on function evaluations.", "configspace": "", "generation": 1, "fitness": 0.21425655662207144, "feedback": "", "error": "", "parent_id": "ba094512-8003-4249-b4d2-7051498b6802", "metadata": {"aucs": [0.5464164300379302, 0.5448876080315241, 0.5285902129786789, 0.5957976874962259, 0.568270277344052, 0.5638587600903802, 0.5447566613652512, 0.5653042961432821, 0.6102869297170987, 0.18811826103815887, 0.02299734465911174, 0.20803920924720054, 0.15282009682609765, 0.03951596200893548, 0.15964753826060174, 0.16361934213922869, 0.03399218594789022, 9.999999999998899e-05, 0.10043454784812567, 0.1290075881704621, 0.25025350658873546, 0.11738808118387101, 0.10005614126253115, 0.12952596969429309, 0.12597514586172398, 0.14679683125907272, 0.11705841988168153, 0.0914787355839971, 0.1031191124159474, 0.08069185795561551, 0.08989731590267347, 0.10386388264200486, 0.08039509025518987, 0.09930743368800143, 0.10366332512775156, 0.10861727041443736, 0.9766662288906879, 0.9758553895153678, 0.9777420262786592, 0.9762738323454427, 0.977065660815723, 0.9772315567962366, 0.9762452998028749, 0.9766059570691883, 0.9778873859999522, 0.2966919276580158, 0.3302015186093781, 0.05791065512651039, 0.22154668495719942, 0.13512612262499957, 0.3348239741042429, 0.12060964847969591, 0.2897976110607192, 0.08659347778346838, 0.17044632439981922, 0.20915605278864724, 0.19444584388811392, 0.19673992349557834, 0.19034887860555882, 0.25177034192174774, 0.12316926296845598, 0.12492034205434244, 0.15580108368244383, 0.15348435309011654, 0.10206409491853141, 0.08196846834640314, 0.10196177751862501, 0.09972172224732312, 0.0965007187271103, 0.13903161924635876, 0.23127770254651558, 0.13798483306495868, 0.10975955427543627, 0.1070057179157291, 0.15959025688824002, 0.13951423514403138, 0.2246415352366391, 0.13304576883157349, 0.12436676410875314, 0.030328544120492906, 0.14964116638065972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04226761080159669, 9.999999999998899e-05, 9.999999999998899e-05, 0.039203292940370504, 0.05789364842698974, 0.08500771056794687, 0.05600428401677637, 0.034760824280439695, 0.0134457232427323, 0.040005833519996314, 0.029048170107424998, 0.03127501938159827, 9.999999999998899e-05, 0.05123005480436882, 0.01840249149882134, 0.0459754494385477, 0.043859411844919705, 0.039602555188821276, 0.04978226410869624, 0.020336294219140072, 0.03728054423230731, 0.14323937783203422, 9.999999999998899e-05, 0.14945592348103764, 0.004600957177375076, 0.08956563683833096, 0.10451190824970458, 0.065162478062475, 0.04242945797628439, 0.062465566464674493, 0.4056965672886541, 0.39863625565404814, 0.4484280360125249, 0.42586807795524095, 0.4149377866348063, 0.2050663542939999, 0.43109335410521454, 0.42920533237714675, 0.419345965259761, 0.07703503080091756, 0.11624490365355344, 0.08998567583724415, 0.10875790282217546, 0.07923627001009881, 0.1137094536238934, 0.08896962114474061, 0.08992073965614689, 0.10759619499249418, 0.21165488197196825, 0.20363645822340715, 0.14955661734500514, 0.22409301511691115, 0.1541308229248629, 0.16993855619350995, 0.35233486917190915, 0.19371756239391902, 0.197159306858401, 0.3066831127206314, 0.326504539430711, 0.30775919188130285, 0.3144155724984301, 0.30379875870475637, 0.27848959512275273, 0.32243067143547155, 0.28785841775988386, 0.3022903904531278, 0.20339267168979147, 0.2126135182845894, 0.2215230255396664, 0.18134182986350966, 0.1669937697756272, 0.1701612930376718, 0.22240171234834283, 0.24071356567992697, 0.22925756040014333, 0.19450605434038748, 0.18902891940621425, 0.1999013573353572, 0.20217885176846473, 0.20559689093586087, 0.1819936240679344, 0.22517515872879124, 0.1975369656599194, 0.1926211844668102, 0.33581088895689337, 0.18156730054691272, 0.1816802142087558, 0.3162979437043759, 0.18534432068987938, 0.19552632647566448, 0.2125367319713919, 0.20074706708899248, 0.2097026308552915, 0.24329181339357553, 0.17374580151684826, 0.15037834042127618, 0.607045298714818, 0.19614867144283565, 0.1953567445161667, 0.18937682713202808, 0.1539304520164002, 0.6758873781498447, 0.32034944480311656, 0.20541630673442235, 0.47250707816276927, 0.3577228312417927, 0.3794907852676085, 0.14219236996554885, 0.1946713857530965, 0.20472019374905603, 0.18381040024173678, 0.17908608576732, 0.20460519984709413, 0.17619987186994657, 0.19287120523718904, 0.18789450238099115, 0.19451808171335983, 0.192277620060348, 0.1884469848005934, 0.19940126925663404, 0.09176287361179625, 0.07377644939227013, 0.0731936759288987, 0.07262782366921472, 0.07604089896211752, 0.08203463171845815, 0.07710414536389876, 0.06945058576457519, 0.07382156954125896]}, "mutation_prompt": null}
