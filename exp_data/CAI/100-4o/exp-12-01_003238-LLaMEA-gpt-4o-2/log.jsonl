{"id": "0f698a21-bc4a-4fa3-bf1d-e7128791ab01", "solution": "import numpy as np\n\nclass AdaptiveRandomWalkOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_step_size = 0.1\n        self.step_size_decay = 0.99\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        current_solution = best_solution\n        current_value = best_value\n        current_step_size = self.initial_step_size\n        evals = 1\n\n        while evals < self.budget:\n            direction = np.random.normal(size=self.dim)\n            direction /= np.linalg.norm(direction)\n            candidate_solution = current_solution + current_step_size * direction\n            candidate_solution = np.clip(candidate_solution, self.lower_bound, self.upper_bound)\n            candidate_value = func(candidate_solution)\n\n            evals += 1\n\n            if candidate_value < current_value:\n                current_solution = candidate_solution\n                current_value = candidate_value\n                current_step_size *= 1.02  # Slightly increase step size on improvement\n            else:\n                current_step_size *= self.step_size_decay  # Decay step size on no improvement\n\n            if current_value < best_value:\n                best_solution = current_solution\n                best_value = current_value\n\n        return best_solution, best_value", "name": "AdaptiveRandomWalkOptimizer", "description": "Adaptive Random Walks with Dynamic Step Size for Efficient Exploration and Exploitation in Black Box Optimization.", "configspace": "", "generation": 0, "fitness": 0.18324428931115377, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.9642991835798024, 0.9555141478738322, 0.9542091610942076, 0.9499910738228813, 0.9501874123725788, 0.9524730349025181, 0.9501456572336031, 0.9530446445374314, 0.9514599357563887, 0.04931343374284791, 0.0025598765207889285, 9.999999999998899e-05, 0.014150574433104524, 0.022105024797057782, 9.999999999998899e-05, 9.999999999998899e-05, 0.005254854862114744, 9.999999999998899e-05, 0.0025253339764803595, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004880601797028983, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13146347009661075, 0.07517530188230281, 0.075165447807517, 0.2023830344076364, 0.08382422451794969, 0.14253638004122626, 0.12533404189063968, 0.0909865871819251, 0.17714203987817512, 0.9359681053657056, 0.9023463394843206, 0.13532027304658167, 0.9316899335540162, 0.938500353159225, 0.9001738723624517, 0.9302365637308734, 0.919305952219871, 0.3796727194441819, 0.032420390398068766, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3365983890786354, 0.26269962320793105, 0.24708135640217, 0.24510150715084766, 0.25890239440985774, 0.2315323755247134, 0.25608677528031343, 0.2587877796805933, 0.24153045572642118, 0.26384265766598436, 0.2579053823909868, 0.13357361203259766, 0.2774756036435173, 0.6001323962516547, 0.13650327459784528, 0.28175481687275705, 0.25629524256428826, 0.23956372105095047, 0.0390452025543071, 9.999999999998899e-05, 0.02410793903652264, 0.0019044895315198929, 0.002996118627165978, 0.01009401597707349, 0.0001267305777274963, 9.999999999998899e-05, 0.04636443635461496, 0.08805076215145768, 0.053048283252529305, 0.1364083632936094, 0.06525830448361591, 0.00789656565520891, 0.013047854331975195, 0.12862051748593695, 0.020371428747551046, 0.03602782097053603, 0.2524359649190203, 0.04028452663848325, 0.36873668056777176, 0.13011312759422544, 0.21930827532789565, 0.12570914852439163, 0.09536265796288668, 0.2545115292723552, 0.09415392776872777, 0.14048216225044652, 0.18675177469137993, 0.07490083438245532, 0.24572053340586997, 0.11919184979613417, 0.0601083401640351, 0.09153277081109468, 0.09745617058762146, 0.08723082688982653, 0.5471105746734181, 0.5173572051882585, 0.5541025279998685, 0.5377273646365353, 0.5187738750285446, 0.5801683498588837, 0.5317494712205311, 0.7357194430593171, 0.5633509679446893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04611159255668096, 0.12530072378749701, 0.1143390587499038, 0.03591037927362539, 0.07338163714167678, 0.07660734187498797, 0.04981356693647687, 0.050285633350887426, 0.09763507175837693, 0.11509616521485133, 0.09965388647272244, 0.10347681916662654, 0.14635778225640772, 0.06643621553407797, 0.12172113726377431, 0.13916327454351973, 0.07793942129895515, 0.09340641642554548, 0.04936305681783559, 0.03703499538521282, 0.03436337385029986, 0.08325524425173936, 0.002899726688744164, 0.0688843894646538, 0.07087607679680208, 0.011202697864848954, 0.026751549047799195, 0.1747558529646709, 0.03185052288887258, 0.10442076192386307, 0.19681367042552678, 0.027633348333065855, 0.06024706990733519, 0.18575156547054927, 0.040877716414670195, 0.09195937510551389, 0.150297606100663, 0.1719556095630289, 0.17209123906750778, 0.16913164426408933, 0.16394698399336227, 0.17205922712360067, 0.15796336099830965, 0.1572316497444214, 0.1811924720968151, 0.12298828337550971, 0.1370519944263897, 0.959158661089603, 0.07666187311180805, 0.06563581348231728, 0.06190316148148345, 0.10859011776376737, 0.12721482423497987, 0.16793686386116857, 0.10515353842180608, 0.11334273543184559, 0.0822818589119777, 0.01587231366676478, 0.21137495775131865, 0.21141640298551512, 0.051205143820699406, 0.05901309615370631, 0.051623745956149825, 0.21266464497050863, 0.19639010249204103, 0.27717940167346444, 0.26507459972242675, 0.21074691578447757, 0.21132202749823592, 0.21480396971033555, 0.30670267825493047, 0.27496587236395, 0.043071680941374924, 0.001046879255977684, 0.03245785126192535, 0.04138987429412788, 0.0018613726502935135, 0.015399240857599028, 0.051483217296423356, 0.009021228325157837, 0.034866578268724746]}, "mutation_prompt": null}
{"id": "f3e3e4ba-4321-4906-8ef9-9b59ec50b484", "solution": "import numpy as np\n\nclass AdaptiveRandomWalkOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_step_size = 0.1\n        self.step_size_decay = 0.99\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        current_solution = best_solution\n        current_value = best_value\n        current_step_size = self.initial_step_size\n        evals = 1\n\n        while evals < self.budget:\n            direction = np.random.normal(size=self.dim)\n            direction /= np.linalg.norm(direction)\n            candidate_solution = current_solution + current_step_size * direction\n            candidate_solution = np.clip(candidate_solution, self.lower_bound, self.upper_bound)\n            candidate_value = func(candidate_solution)\n\n            evals += 1\n\n            if candidate_value < current_value:\n                current_solution = candidate_solution\n                current_value = candidate_value\n                current_step_size *= 1.02  # Slightly increase step size on improvement\n            else:\n                current_step_size *= self.step_size_decay  # Decay step size on no improvement\n\n            if current_value < best_value:\n                best_solution = current_solution\n                best_value = current_value\n\n        return best_solution, best_value", "name": "AdaptiveRandomWalkOptimizer", "description": "Adaptive Random Walks with Dynamic Step Size for Efficient Exploration and Exploitation in Black Box Optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0f698a21-bc4a-4fa3-bf1d-e7128791ab01", "metadata": {"aucs": [0.9642991835798024, 0.9555141478738322, 0.9542091610942076, 0.9499910738228813, 0.9501874123725788, 0.9524730349025181, 0.9501456572336031, 0.9530446445374314, 0.9514599357563887, 0.04931343374284791, 0.0025598765207889285, 9.999999999998899e-05, 0.014150574433104524, 0.022105024797057782, 9.999999999998899e-05, 9.999999999998899e-05, 0.005254854862114744, 9.999999999998899e-05, 0.0025253339764803595, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004880601797028983, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13146347009661075, 0.07517530188230281, 0.075165447807517, 0.2023830344076364, 0.08382422451794969, 0.14253638004122626, 0.12533404189063968, 0.0909865871819251, 0.17714203987817512, 0.9359681053657056, 0.9023463394843206, 0.13532027304658167, 0.9316899335540162, 0.938500353159225, 0.9001738723624517, 0.9302365637308734, 0.919305952219871, 0.3796727194441819, 0.032420390398068766, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3365983890786354, 0.26269962320793105, 0.24708135640217, 0.24510150715084766, 0.25890239440985774, 0.2315323755247134, 0.25608677528031343, 0.2587877796805933, 0.24153045572642118, 0.26384265766598436, 0.2579053823909868, 0.13357361203259766, 0.2774756036435173, 0.6001323962516547, 0.13650327459784528, 0.28175481687275705, 0.25629524256428826, 0.23956372105095047, 0.0390452025543071, 9.999999999998899e-05, 0.02410793903652264, 0.0019044895315198929, 0.002996118627165978, 0.01009401597707349, 0.0001267305777274963, 9.999999999998899e-05, 0.04636443635461496, 0.08805076215145768, 0.053048283252529305, 0.1364083632936094, 0.06525830448361591, 0.00789656565520891, 0.013047854331975195, 0.12862051748593695, 0.020371428747551046, 0.03602782097053603, 0.2524359649190203, 0.04028452663848325, 0.36873668056777176, 0.13011312759422544, 0.21930827532789565, 0.12570914852439163, 0.09536265796288668, 0.2545115292723552, 0.09415392776872777, 0.14048216225044652, 0.18675177469137993, 0.07490083438245532, 0.24572053340586997, 0.11919184979613417, 0.0601083401640351, 0.09153277081109468, 0.09745617058762146, 0.08723082688982653, 0.5471105746734181, 0.5173572051882585, 0.5541025279998685, 0.5377273646365353, 0.5187738750285446, 0.5801683498588837, 0.5317494712205311, 0.7357194430593171, 0.5633509679446893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04611159255668096, 0.12530072378749701, 0.1143390587499038, 0.03591037927362539, 0.07338163714167678, 0.07660734187498797, 0.04981356693647687, 0.050285633350887426, 0.09763507175837693, 0.11509616521485133, 0.09965388647272244, 0.10347681916662654, 0.14635778225640772, 0.06643621553407797, 0.12172113726377431, 0.13916327454351973, 0.07793942129895515, 0.09340641642554548, 0.04936305681783559, 0.03703499538521282, 0.03436337385029986, 0.08325524425173936, 0.002899726688744164, 0.0688843894646538, 0.07087607679680208, 0.011202697864848954, 0.026751549047799195, 0.1747558529646709, 0.03185052288887258, 0.10442076192386307, 0.19681367042552678, 0.027633348333065855, 0.06024706990733519, 0.18575156547054927, 0.040877716414670195, 0.09195937510551389, 0.150297606100663, 0.1719556095630289, 0.17209123906750778, 0.16913164426408933, 0.16394698399336227, 0.17205922712360067, 0.15796336099830965, 0.1572316497444214, 0.1811924720968151, 0.12298828337550971, 0.1370519944263897, 0.959158661089603, 0.07666187311180805, 0.06563581348231728, 0.06190316148148345, 0.10859011776376737, 0.12721482423497987, 0.16793686386116857, 0.10515353842180608, 0.11334273543184559, 0.0822818589119777, 0.01587231366676478, 0.21137495775131865, 0.21141640298551512, 0.051205143820699406, 0.05901309615370631, 0.051623745956149825, 0.21266464497050863, 0.19639010249204103, 0.27717940167346444, 0.26507459972242675, 0.21074691578447757, 0.21132202749823592, 0.21480396971033555, 0.30670267825493047, 0.27496587236395, 0.043071680941374924, 0.001046879255977684, 0.03245785126192535, 0.04138987429412788, 0.0018613726502935135, 0.015399240857599028, 0.051483217296423356, 0.009021228325157837, 0.034866578268724746]}, "mutation_prompt": null}
