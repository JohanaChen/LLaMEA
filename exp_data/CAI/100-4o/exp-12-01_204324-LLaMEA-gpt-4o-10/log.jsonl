{"id": "84274ca0-d44d-4ff7-ad32-2eedd50833e6", "solution": "import numpy as np\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.cooling_rate = 0.99\n        self.initial_temperature = 100\n        self.temperature = self.initial_temperature\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def differential_evolution(self, population, func):\n        F = 0.8\n        CR = 0.9\n        new_population = np.copy(population)\n        for i in range(self.population_size):\n            a, b, c = population[np.random.choice(self.population_size, 3, replace=False)]\n            mutant_vector = a + F * (b - c)\n            trial_vector = np.where(np.random.rand(self.dim) < CR, mutant_vector, population[i])\n            trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n            if func(trial_vector) < func(population[i]):\n                new_population[i] = trial_vector\n        return new_population\n\n    def simulated_annealing(self, candidate, func):\n        new_candidate = candidate + np.random.normal(0, 1, self.dim)\n        new_candidate = np.clip(new_candidate, self.lower_bound, self.upper_bound)\n        if np.random.rand() < np.exp((func(candidate) - func(new_candidate)) / self.temperature):\n            return new_candidate\n        return candidate\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        best_solution = None\n        best_score = float('inf')\n        evaluations = 0\n\n        while evaluations < self.budget:\n            population = self.differential_evolution(population, func)\n            for i in range(self.population_size):\n                candidate = population[i]\n                candidate = self.simulated_annealing(candidate, func)\n                population[i] = candidate\n                score = func(candidate)\n                evaluations += 1\n                if score < best_score:\n                    best_score = score\n                    best_solution = candidate\n                if evaluations >= self.budget:\n                    break\n            self.temperature *= self.cooling_rate\n\n        return best_solution, best_score", "name": "HybridOptimization", "description": "A hybrid metaheuristic combining Differential Evolution and Simulated Annealing for efficient exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.1226510550967947, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.19512922576558, 0.17318020907803622, 0.18176724778678333, 0.20040624065705503, 0.2053716125041114, 0.22237492848535179, 0.20992562352740374, 0.19597794140773317, 0.229252105839576, 0.009111349538289515, 0.025330513176200165, 0.007096549789530782, 0.00902404768398224, 0.014387497122050119, 0.00824405273299944, 0.007475900689117632, 0.011073914877242741, 0.003910055002761648, 0.05902341838745506, 0.048077866362956745, 0.04857325770693477, 0.07789766118842434, 0.07980323583819737, 0.06638090834562282, 0.04926724394870674, 0.06348157134486954, 0.0514586176289511, 0.03628280556415153, 0.037348244725193935, 0.031578611674973, 0.036820962465661244, 0.03151943134702906, 0.036008957279142106, 0.03571655643516369, 0.040868199917070025, 0.03617617512251958, 0.7909096551763751, 0.8181429693870665, 0.6036017365951087, 0.7307261794393807, 0.6304655484528048, 0.7260632244343335, 0.844567321262673, 0.22123664981165725, 0.2178987139180094, 0.11768287206129113, 0.09094936590188518, 0.08153237700086247, 0.09139437717168963, 0.07315512415945558, 0.08965257615547706, 0.09304055963796565, 0.10740883747085683, 0.09282745381635849, 0.15797767688126296, 0.1378495461204302, 0.13607664217593463, 0.14101366209636812, 0.14279988384538078, 0.15329080687829277, 0.12245039364924015, 0.16543454671231317, 0.16062750069161413, 0.06278144756324022, 0.04921639568727165, 0.05707396069011761, 0.07938534666875008, 0.06133894047579502, 0.08448868546850463, 0.07799665791916377, 0.050975598382823395, 0.030507517510754978, 0.05500303814205332, 0.04569087323917398, 0.0662890275882928, 0.03524256815629323, 0.01958673047495918, 0.05177314036034042, 0.04544371185969209, 0.05712365303456479, 0.05312183168345597, 9.999999999998899e-05, 9.999999999998899e-05, 0.016232709636571085, 0.0029590972308778385, 9.999999999998899e-05, 0.010447001042582227, 0.001602048021041802, 9.999999999998899e-05, 9.999999999998899e-05, 0.05472613805051674, 0.11611496508444252, 0.06835041454295165, 0.058461675898367704, 0.10706893916042359, 0.07674201359549548, 0.058976428195749886, 0.08647489468477976, 0.06332179512919123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019058851870269566, 0.015215258442227375, 0.017779079990527635, 0.017959051834315454, 0.014050863072559872, 0.016278969288546108, 0.0324204087899399, 0.01305700063556614, 0.02053177851221477, 0.22130194986830443, 0.20193609735819074, 0.1837678547918844, 0.21548414814722683, 0.22364238126542935, 0.18625796785717075, 0.2150131021974656, 0.22798810458009122, 0.21596399649025821, 0.05662624739599964, 0.0562696609840897, 0.056817309568756524, 0.06247207713131009, 0.054167771975205725, 0.05823202694017693, 0.04852085510279358, 0.04675901235639812, 0.05909645532338159, 0.1348386669126952, 0.14369738061134707, 0.1297999107007043, 0.15794267043703836, 0.13714467449095025, 0.1245679574163725, 0.11510832218982525, 0.12886775338831524, 0.14585043757622174, 0.1654892044391576, 0.17082286895394372, 0.1631566829901172, 0.17659685408713754, 0.1735961701128763, 0.16479353169225064, 0.15996370270526383, 0.18731183042275723, 0.16389880137619184, 0.11675561735967455, 0.12017356719663908, 0.09881687492864133, 0.10314260394045993, 0.11404453361967115, 0.10662691292100135, 0.10750385443126398, 0.1239897078607819, 0.11841279946881389, 0.1595605780804744, 0.15328329609378544, 0.1506206577303687, 0.1581401712456596, 0.16827379514110252, 0.15136552542432125, 0.14982393063138866, 0.14838806525806325, 0.1509823900798889, 0.1466705069544465, 0.16584908792412256, 0.15549813177251048, 0.15991807324567164, 0.1568465169114316, 0.1580168033598589, 0.16069481933569751, 0.15873286101420214, 0.1520409479274515, 0.1616210975348924, 0.13740616483174362, 0.1966377227902475, 0.16101227131447793, 0.1447515819684213, 0.15682371597647304, 0.14015686599033683, 0.15826699663291133, 0.2905561553929821, 0.1744508311415317, 0.17395694529182604, 0.13227885964978692, 0.17642288217448399, 0.18101131896694078, 0.2043556971867867, 0.1749800621653097, 0.17123785663026847, 0.16927054056981883, 0.1817856130408141, 0.1743757019091845, 0.1930149733495704, 0.1644419391494495, 0.17305642237695995, 0.16540059630165926, 0.1693574974134272, 0.17465211253913315, 0.16696000325022053, 0.04840640602928126, 0.062191063014777836, 0.057213977749071776, 0.043259847302975496, 0.04568485856022164, 0.04762413941569499, 0.06656266903638475, 0.05471305803550952, 0.06442493706406693]}, "mutation_prompt": null}
{"id": "b6e3bdea-b3a2-484b-aad2-af37e18b1018", "solution": "import numpy as np\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.cooling_rate = 0.99\n        self.initial_temperature = 100\n        self.temperature = self.initial_temperature\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def differential_evolution(self, population, func):\n        F = 0.8\n        CR = 0.9\n        new_population = np.copy(population)\n        for i in range(self.population_size):\n            a, b, c = population[np.random.choice(self.population_size, 3, replace=False)]\n            mutant_vector = a + F * (b - c)\n            trial_vector = np.where(np.random.rand(self.dim) < CR, mutant_vector, population[i])\n            trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n            if func(trial_vector) < func(population[i]):\n                new_population[i] = trial_vector\n        return new_population\n\n    def simulated_annealing(self, candidate, func):\n        new_candidate = candidate + np.random.normal(0, 1, self.dim)\n        new_candidate = np.clip(new_candidate, self.lower_bound, self.upper_bound)\n        if np.random.rand() < np.exp((func(candidate) - func(new_candidate)) / self.temperature):\n            return new_candidate\n        return candidate\n\n    def __call__(self, func):\n        population = self.initialize_population()\n        best_solution = None\n        best_score = float('inf')\n        evaluations = 0\n\n        while evaluations < self.budget:\n            population = self.differential_evolution(population, func)\n            for i in range(self.population_size):\n                candidate = population[i]\n                candidate = self.simulated_annealing(candidate, func)\n                population[i] = candidate\n                score = func(candidate)\n                evaluations += 1\n                if score < best_score:\n                    best_score = score\n                    best_solution = candidate\n                if evaluations >= self.budget:\n                    break\n            self.temperature *= self.cooling_rate\n\n        return best_solution, best_score", "name": "HybridOptimization", "description": "A hybrid metaheuristic combining Differential Evolution and Simulated Annealing for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "84274ca0-d44d-4ff7-ad32-2eedd50833e6", "metadata": {"aucs": [0.19512922576558, 0.17318020907803622, 0.18176724778678333, 0.20040624065705503, 0.2053716125041114, 0.22237492848535179, 0.20992562352740374, 0.19597794140773317, 0.229252105839576, 0.009111349538289515, 0.025330513176200165, 0.007096549789530782, 0.00902404768398224, 0.014387497122050119, 0.00824405273299944, 0.007475900689117632, 0.011073914877242741, 0.003910055002761648, 0.05902341838745506, 0.048077866362956745, 0.04857325770693477, 0.07789766118842434, 0.07980323583819737, 0.06638090834562282, 0.04926724394870674, 0.06348157134486954, 0.0514586176289511, 0.03628280556415153, 0.037348244725193935, 0.031578611674973, 0.036820962465661244, 0.03151943134702906, 0.036008957279142106, 0.03571655643516369, 0.040868199917070025, 0.03617617512251958, 0.7909096551763751, 0.8181429693870665, 0.6036017365951087, 0.7307261794393807, 0.6304655484528048, 0.7260632244343335, 0.844567321262673, 0.22123664981165725, 0.2178987139180094, 0.11768287206129113, 0.09094936590188518, 0.08153237700086247, 0.09139437717168963, 0.07315512415945558, 0.08965257615547706, 0.09304055963796565, 0.10740883747085683, 0.09282745381635849, 0.15797767688126296, 0.1378495461204302, 0.13607664217593463, 0.14101366209636812, 0.14279988384538078, 0.15329080687829277, 0.12245039364924015, 0.16543454671231317, 0.16062750069161413, 0.06278144756324022, 0.04921639568727165, 0.05707396069011761, 0.07938534666875008, 0.06133894047579502, 0.08448868546850463, 0.07799665791916377, 0.050975598382823395, 0.030507517510754978, 0.05500303814205332, 0.04569087323917398, 0.0662890275882928, 0.03524256815629323, 0.01958673047495918, 0.05177314036034042, 0.04544371185969209, 0.05712365303456479, 0.05312183168345597, 9.999999999998899e-05, 9.999999999998899e-05, 0.016232709636571085, 0.0029590972308778385, 9.999999999998899e-05, 0.010447001042582227, 0.001602048021041802, 9.999999999998899e-05, 9.999999999998899e-05, 0.05472613805051674, 0.11611496508444252, 0.06835041454295165, 0.058461675898367704, 0.10706893916042359, 0.07674201359549548, 0.058976428195749886, 0.08647489468477976, 0.06332179512919123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019058851870269566, 0.015215258442227375, 0.017779079990527635, 0.017959051834315454, 0.014050863072559872, 0.016278969288546108, 0.0324204087899399, 0.01305700063556614, 0.02053177851221477, 0.22130194986830443, 0.20193609735819074, 0.1837678547918844, 0.21548414814722683, 0.22364238126542935, 0.18625796785717075, 0.2150131021974656, 0.22798810458009122, 0.21596399649025821, 0.05662624739599964, 0.0562696609840897, 0.056817309568756524, 0.06247207713131009, 0.054167771975205725, 0.05823202694017693, 0.04852085510279358, 0.04675901235639812, 0.05909645532338159, 0.1348386669126952, 0.14369738061134707, 0.1297999107007043, 0.15794267043703836, 0.13714467449095025, 0.1245679574163725, 0.11510832218982525, 0.12886775338831524, 0.14585043757622174, 0.1654892044391576, 0.17082286895394372, 0.1631566829901172, 0.17659685408713754, 0.1735961701128763, 0.16479353169225064, 0.15996370270526383, 0.18731183042275723, 0.16389880137619184, 0.11675561735967455, 0.12017356719663908, 0.09881687492864133, 0.10314260394045993, 0.11404453361967115, 0.10662691292100135, 0.10750385443126398, 0.1239897078607819, 0.11841279946881389, 0.1595605780804744, 0.15328329609378544, 0.1506206577303687, 0.1581401712456596, 0.16827379514110252, 0.15136552542432125, 0.14982393063138866, 0.14838806525806325, 0.1509823900798889, 0.1466705069544465, 0.16584908792412256, 0.15549813177251048, 0.15991807324567164, 0.1568465169114316, 0.1580168033598589, 0.16069481933569751, 0.15873286101420214, 0.1520409479274515, 0.1616210975348924, 0.13740616483174362, 0.1966377227902475, 0.16101227131447793, 0.1447515819684213, 0.15682371597647304, 0.14015686599033683, 0.15826699663291133, 0.2905561553929821, 0.1744508311415317, 0.17395694529182604, 0.13227885964978692, 0.17642288217448399, 0.18101131896694078, 0.2043556971867867, 0.1749800621653097, 0.17123785663026847, 0.16927054056981883, 0.1817856130408141, 0.1743757019091845, 0.1930149733495704, 0.1644419391494495, 0.17305642237695995, 0.16540059630165926, 0.1693574974134272, 0.17465211253913315, 0.16696000325022053, 0.04840640602928126, 0.062191063014777836, 0.057213977749071776, 0.043259847302975496, 0.04568485856022164, 0.04762413941569499, 0.06656266903638475, 0.05471305803550952, 0.06442493706406693]}, "mutation_prompt": null}
