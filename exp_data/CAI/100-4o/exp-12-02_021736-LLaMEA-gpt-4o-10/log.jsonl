{"id": "e2303333-7c51-4cf7-862d-1c09b8d9c632", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.49  # cognitive component\n        self.c2 = 1.49  # social component\n        self.w = 0.72  # inertia weight\n        self.f = 0.8  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best = self.population.copy()\n        self.global_best = self.population[np.argmin([float('inf')] * self.population_size)]\n        self.personal_best_scores = np.full(self.population_size, float('inf'))\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            # Evaluate current population\n            fitness = np.array([func(ind) for ind in self.population])\n            evaluations += self.population_size\n            \n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness[i]\n                    self.personal_best[i] = self.population[i]\n            self.global_best = self.population[np.argmin(fitness)]\n\n            # PSO - Update velocities and positions\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            for i in range(self.population_size):\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.personal_best[i] - self.population[i]) +\n                                      self.c2 * r2 * (self.global_best - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n            # DE - Create new agents using DE strategy\n            new_population = self.population.copy()\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.cr\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n                if func(trial) < func(self.population[i]):\n                    new_population[i] = trial\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n            self.population = new_population\n        \n        return self.global_best", "name": "HybridPSO_DE", "description": "A hybrid algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to leverage both exploration and exploitation capabilities for efficient black box optimization.", "configspace": "", "generation": 0, "fitness": 0.14479039923420314, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.22181534870819075, 0.12592978461958027, 0.40753924771533157, 0.2643321563807003, 0.18981592972073913, 0.18716642301364894, 0.36273968642985654, 0.34003385587834545, 0.32083329018971507, 0.14290663508204526, 0.16051789747240697, 0.02545854991061225, 9.999999999998899e-05, 0.053607132759992404, 9.999999999998899e-05, 0.025570908498712352, 0.1624661357340248, 0.0034944145255380032, 0.05729677408109968, 0.05323725739646956, 0.05748856709857442, 0.052335746966824304, 0.05122990572205399, 0.09286104119144423, 0.05395084993808663, 0.02424570316602226, 0.05911433774592134, 0.035331082124552826, 0.044591593812159824, 0.04788966399331129, 0.047683138074975595, 0.048431399376921536, 0.03473509549561071, 0.04718976680279685, 0.031264010102670325, 0.047815884659187624, 0.9815128729636812, 0.9786426308758389, 0.9877146863627182, 0.98002924191877, 0.9820266659606486, 0.9743204349698218, 0.9858446730010356, 0.9826289206523573, 0.9795523594052308, 0.028098034162572505, 0.057283671917293444, 0.08985819708913168, 0.10498654540016483, 0.0916914837071765, 0.08827254526448325, 0.11496758542859464, 0.11763774121206494, 9.999999999998899e-05, 0.1651546965192502, 0.11529928113117527, 0.1650692203218599, 0.20698707470905986, 0.16458612232662384, 0.17423500056296348, 0.14007317061513058, 0.12665421583000402, 0.17127284137331678, 0.0010717163692970377, 0.06315602275492838, 0.0005968142996382042, 0.019781258121362222, 0.1900437819017068, 0.05313399948060593, 0.046527925860673336, 9.999999999998899e-05, 0.032921207090886306, 0.01723639464718074, 0.021785354390554845, 0.009817288014301262, 0.08820602328514338, 0.01653667887478205, 0.10225708276433065, 0.09860140555174601, 0.03092627046308949, 0.02552647679434117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08074296231542177, 0.027684370229038135, 0.03325015525427566, 0.019301786785301367, 9.999999999998899e-05, 0.002268424247718004, 0.01954682149604381, 0.045051500954495505, 0.026003240975330133, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010821577397834847, 0.03788104290939098, 9.999999999998899e-05, 0.02566113287377214, 9.999999999998899e-05, 0.03155515754031024, 9.999999999998899e-05, 0.04563197368330807, 9.999999999998899e-05, 0.04329302430464921, 9.999999999998899e-05, 0.05208480844958163, 0.20996969874017035, 0.2521456652375067, 0.229393729004699, 0.3356009003416086, 0.21687614883470652, 0.20691141699491078, 0.2563893978574322, 0.3668665350010718, 0.30503960829391974, 0.057786252811790506, 0.0703420585996728, 0.041679382317055924, 0.05931027819440293, 0.05789675011119322, 0.05905694718980958, 0.06081566147712181, 0.060926342267414335, 0.06770433539778875, 0.13818358833596245, 0.13641773567848647, 0.15249919899015962, 0.15861012175479905, 0.13889567569087502, 0.15090028040345682, 0.13030193421854452, 0.14910611660700235, 0.1545250569205927, 0.1809615404731395, 0.17620086343606234, 0.18468437362821621, 0.14740046060508394, 0.1601944267213543, 0.16778441883195716, 0.19078370479131268, 0.2056144996194197, 0.16717931101477967, 0.11953980620361959, 0.12326018616246182, 0.08837063679727597, 0.12583136898301805, 0.12793013113009766, 0.11776618570352493, 0.13442322398392448, 0.16926616503340097, 0.11995271962902565, 0.15615395132441245, 0.1489542264278202, 0.15904396649038066, 0.17818175331082797, 0.14571886583558769, 0.1634220477066396, 0.19254620766718622, 0.16845971881955102, 0.1532306195891321, 0.1488999129724745, 0.1584348831764315, 0.1498687532347882, 0.1574668299750026, 0.1530222979109509, 0.1468901843679865, 0.15823167089293821, 0.16443016101719699, 0.1578832565014161, 0.2403294808955586, 0.22775345379713585, 0.15268769330218324, 0.1670836498114886, 0.18598417734865935, 0.12700717824737462, 0.09761817249734972, 0.16861404973177818, 0.12481794904148669, 0.1335760320644811, 0.16456421853105507, 0.15161836516461002, 0.20136194867514678, 0.22437180654032252, 0.1911334466672352, 0.19475862361035023, 0.19366426830184613, 0.18729371312903254, 0.19826289807867936, 0.18424440277122256, 0.19266243089856505, 0.1813439214865491, 0.17729509740177984, 0.19507254877086688, 0.19171495207974243, 0.18209165688599305, 0.19065096931964487, 0.047916239491435975, 0.04972773669433628, 0.06283476469377314, 0.05107979458063927, 0.05920793964238524, 0.05697030136248338, 0.06076961532793412, 0.06205770424025925, 0.0584414397376688]}, "mutation_prompt": null}
{"id": "3263dad3-e8ac-4154-90bf-b0cbed9354c7", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.49  # cognitive component\n        self.c2 = 1.49  # social component\n        self.w = 0.72  # inertia weight\n        self.f = 0.8  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best = self.population.copy()\n        self.global_best = self.population[np.argmin([float('inf')] * self.population_size)]\n        self.personal_best_scores = np.full(self.population_size, float('inf'))\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            # Evaluate current population\n            fitness = np.array([func(ind) for ind in self.population])\n            evaluations += self.population_size\n            \n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness[i]\n                    self.personal_best[i] = self.population[i]\n            self.global_best = self.population[np.argmin(fitness)]\n\n            # PSO - Update velocities and positions\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            for i in range(self.population_size):\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.personal_best[i] - self.population[i]) +\n                                      self.c2 * r2 * (self.global_best - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n            # DE - Create new agents using DE strategy\n            new_population = self.population.copy()\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.cr\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n                if func(trial) < func(self.population[i]):\n                    new_population[i] = trial\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n            self.population = new_population\n        \n        return self.global_best", "name": "HybridPSO_DE", "description": "A hybrid algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to leverage both exploration and exploitation capabilities for efficient black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2303333-7c51-4cf7-862d-1c09b8d9c632", "metadata": {"aucs": [0.22181534870819075, 0.12592978461958027, 0.40753924771533157, 0.2643321563807003, 0.18981592972073913, 0.18716642301364894, 0.36273968642985654, 0.34003385587834545, 0.32083329018971507, 0.14290663508204526, 0.16051789747240697, 0.02545854991061225, 9.999999999998899e-05, 0.053607132759992404, 9.999999999998899e-05, 0.025570908498712352, 0.1624661357340248, 0.0034944145255380032, 0.05729677408109968, 0.05323725739646956, 0.05748856709857442, 0.052335746966824304, 0.05122990572205399, 0.09286104119144423, 0.05395084993808663, 0.02424570316602226, 0.05911433774592134, 0.035331082124552826, 0.044591593812159824, 0.04788966399331129, 0.047683138074975595, 0.048431399376921536, 0.03473509549561071, 0.04718976680279685, 0.031264010102670325, 0.047815884659187624, 0.9815128729636812, 0.9786426308758389, 0.9877146863627182, 0.98002924191877, 0.9820266659606486, 0.9743204349698218, 0.9858446730010356, 0.9826289206523573, 0.9795523594052308, 0.028098034162572505, 0.057283671917293444, 0.08985819708913168, 0.10498654540016483, 0.0916914837071765, 0.08827254526448325, 0.11496758542859464, 0.11763774121206494, 9.999999999998899e-05, 0.1651546965192502, 0.11529928113117527, 0.1650692203218599, 0.20698707470905986, 0.16458612232662384, 0.17423500056296348, 0.14007317061513058, 0.12665421583000402, 0.17127284137331678, 0.0010717163692970377, 0.06315602275492838, 0.0005968142996382042, 0.019781258121362222, 0.1900437819017068, 0.05313399948060593, 0.046527925860673336, 9.999999999998899e-05, 0.032921207090886306, 0.01723639464718074, 0.021785354390554845, 0.009817288014301262, 0.08820602328514338, 0.01653667887478205, 0.10225708276433065, 0.09860140555174601, 0.03092627046308949, 0.02552647679434117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08074296231542177, 0.027684370229038135, 0.03325015525427566, 0.019301786785301367, 9.999999999998899e-05, 0.002268424247718004, 0.01954682149604381, 0.045051500954495505, 0.026003240975330133, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010821577397834847, 0.03788104290939098, 9.999999999998899e-05, 0.02566113287377214, 9.999999999998899e-05, 0.03155515754031024, 9.999999999998899e-05, 0.04563197368330807, 9.999999999998899e-05, 0.04329302430464921, 9.999999999998899e-05, 0.05208480844958163, 0.20996969874017035, 0.2521456652375067, 0.229393729004699, 0.3356009003416086, 0.21687614883470652, 0.20691141699491078, 0.2563893978574322, 0.3668665350010718, 0.30503960829391974, 0.057786252811790506, 0.0703420585996728, 0.041679382317055924, 0.05931027819440293, 0.05789675011119322, 0.05905694718980958, 0.06081566147712181, 0.060926342267414335, 0.06770433539778875, 0.13818358833596245, 0.13641773567848647, 0.15249919899015962, 0.15861012175479905, 0.13889567569087502, 0.15090028040345682, 0.13030193421854452, 0.14910611660700235, 0.1545250569205927, 0.1809615404731395, 0.17620086343606234, 0.18468437362821621, 0.14740046060508394, 0.1601944267213543, 0.16778441883195716, 0.19078370479131268, 0.2056144996194197, 0.16717931101477967, 0.11953980620361959, 0.12326018616246182, 0.08837063679727597, 0.12583136898301805, 0.12793013113009766, 0.11776618570352493, 0.13442322398392448, 0.16926616503340097, 0.11995271962902565, 0.15615395132441245, 0.1489542264278202, 0.15904396649038066, 0.17818175331082797, 0.14571886583558769, 0.1634220477066396, 0.19254620766718622, 0.16845971881955102, 0.1532306195891321, 0.1488999129724745, 0.1584348831764315, 0.1498687532347882, 0.1574668299750026, 0.1530222979109509, 0.1468901843679865, 0.15823167089293821, 0.16443016101719699, 0.1578832565014161, 0.2403294808955586, 0.22775345379713585, 0.15268769330218324, 0.1670836498114886, 0.18598417734865935, 0.12700717824737462, 0.09761817249734972, 0.16861404973177818, 0.12481794904148669, 0.1335760320644811, 0.16456421853105507, 0.15161836516461002, 0.20136194867514678, 0.22437180654032252, 0.1911334466672352, 0.19475862361035023, 0.19366426830184613, 0.18729371312903254, 0.19826289807867936, 0.18424440277122256, 0.19266243089856505, 0.1813439214865491, 0.17729509740177984, 0.19507254877086688, 0.19171495207974243, 0.18209165688599305, 0.19065096931964487, 0.047916239491435975, 0.04972773669433628, 0.06283476469377314, 0.05107979458063927, 0.05920793964238524, 0.05697030136248338, 0.06076961532793412, 0.06205770424025925, 0.0584414397376688]}, "mutation_prompt": null}
