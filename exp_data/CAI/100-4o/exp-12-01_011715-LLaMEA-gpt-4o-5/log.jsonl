{"id": "438b5244-dfe4-41ff-bd10-228be82e401d", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(40, 4 + int(3 * np.log(dim)))  # Rule-of-thumb for PSO population size\n        self.de_cr = 0.9  # Crossover probability for DE\n        self.de_f = 0.8  # Differential weight for DE\n        self.c1 = 2.05  # Cognitive coefficient for PSO\n        self.c2 = 2.05  # Social coefficient for PSO\n        self.w = 0.7  # Inertia weight for PSO\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initialize particles and velocities for PSO\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_values = np.full(self.population_size, np.inf)\n\n        # Initialize the global best\n        global_best_position = None\n        global_best_value = np.inf\n\n        # Main loop of the hybrid algorithm\n        evaluations = 0\n        while evaluations < self.budget:\n            # Evaluate current solutions\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                current_value = func(particles[i])\n                evaluations += 1\n                \n                # Update personal bests\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = particles[i]\n                \n                # Update global best\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = particles[i]\n\n            # PSO update: Update velocities and positions\n            r1, r2 = np.random.rand(2)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - particles) +\n                          self.c2 * r2 * (global_best_position - particles))\n            particles = particles + velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            # DE update: Apply differential evolution strategy\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = particles[indices[0]], particles[indices[1]], particles[indices[2]]\n                trial_vector = np.clip(a + self.de_f * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.de_cr\n                trial_vector = np.where(crossover_mask, trial_vector, particles[i])\n\n                # Evaluate trial vector\n                trial_value = func(trial_vector)\n                evaluations += 1\n\n                # Selection\n                if trial_value < personal_best_values[i]:\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n\n        return global_best_position, global_best_value", "name": "HybridPSO_DE", "description": "A hybrid evolutionary algorithm that combines particle swarm optimization with differential evolution to balance exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.20033263394746023, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8789874636565176, 0.8789874636565176, 0.8789874636565176, 0.18955123017271602, 0.18955123017271602, 0.18955123017271602, 0.8238355914572949, 0.8238355914572949, 0.8238355914572949, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04369298940319388, 0.04369298940319388, 0.04369298940319388, 0.015893299177324294, 0.015893299177324294, 0.015893299177324294, 0.006274678466796413, 0.006274678466796413, 0.006274678466796413, 0.10823007725790734, 0.10823007725790734, 0.10823007725790734, 0.12102535535555525, 0.12102535535555525, 0.12102535535555525, 0.006022987818845471, 0.006022987818845471, 0.006022987818845471, 0.027090841958509748, 0.027090841958509748, 0.027090841958509748, 0.04599421303423079, 0.04599421303423079, 0.04599421303423079, 0.9935637618352591, 0.9935637618352591, 0.9935637618352591, 0.9963186007039598, 0.9963186007039598, 0.9963186007039598, 0.09988131759063978, 0.09988131759063978, 0.09988131759063978, 0.5486618630101002, 0.5486618630101002, 0.5486618630101002, 0.5679169824996559, 0.5679169824996559, 0.5679169824996559, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2072171499145774, 0.2072171499145774, 0.2072171499145774, 0.16293518874110635, 0.16293518874110635, 0.16293518874110635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4710090013030178, 0.4710090013030178, 0.4710090013030178, 0.6425352199861649, 0.6425352199861649, 0.6425352199861649, 0.13482685082542034, 0.13482685082542034, 0.13482685082542034, 0.13007690127237437, 0.13007690127237437, 0.13007690127237437, 0.2996308546390536, 0.2996308546390536, 0.2996308546390536, 0.3239254379778006, 0.3239254379778006, 0.3239254379778006, 0.048033667281903725, 0.048033667281903725, 0.048033667281903725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0878325557997669, 0.0878325557997669, 0.0878325557997669, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020900573988517857, 0.020900573988517857, 0.020900573988517857, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07113351557462788, 0.07113351557462788, 0.07113351557462788, 0.04275929410457979, 0.04275929410457979, 0.04275929410457979, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08304748897028824, 0.08304748897028824, 0.08304748897028824, 0.6645556324364751, 0.6645556324364751, 0.6645556324364751, 0.20954449031588762, 0.20954449031588762, 0.20954449031588762, 0.5755412242198896, 0.5755412242198896, 0.5755412242198896, 0.05203813461025697, 0.05203813461025697, 0.05203813461025697, 0.13325874838972684, 0.13325874838972684, 0.13325874838972684, 0.07734369588290935, 0.07734369588290935, 0.07734369588290935, 0.11334835786487185, 0.11334835786487185, 0.11334835786487185, 0.24282354992066957, 0.24282354992066957, 0.24282354992066957, 0.08299411142993418, 0.08299411142993418, 0.08299411142993418, 0.22672666709607936, 0.22672666709607936, 0.22672666709607936, 0.13883805205824595, 0.13883805205824595, 0.13883805205824595, 0.16333795341183455, 0.16333795341183455, 0.16333795341183455, 0.101524272567176, 0.101524272567176, 0.101524272567176, 0.2669430069087556, 0.2669430069087556, 0.2669430069087556, 0.04269985958000744, 0.04269985958000744, 0.04269985958000744, 0.22234516171043617, 0.22234516171043617, 0.22234516171043617, 0.2121228951750589, 0.2121228951750589, 0.2121228951750589, 0.22501238527718692, 0.22501238527718692, 0.22501238527718692, 0.20047654872239162, 0.20047654872239162, 0.20047654872239162, 0.21130944870591872, 0.21130944870591872, 0.21130944870591872, 0.1889442330586395, 0.1889442330586395, 0.1889442330586395, 0.15416306906809607, 0.15416306906809607, 0.15416306906809607, 0.1658553857822208, 0.1658553857822208, 0.1658553857822208, 0.166321869961658, 0.166321869961658, 0.166321869961658, 0.1613055390669511, 0.1613055390669511, 0.1613055390669511, 0.2137922579311219, 0.2137922579311219, 0.2137922579311219, 0.20041228421230206, 0.20041228421230206, 0.20041228421230206, 0.19403901236203047, 0.19403901236203047, 0.19403901236203047, 0.19023778327962604, 0.19023778327962604, 0.19023778327962604, 0.19451036637610564, 0.19451036637610564, 0.19451036637610564, 0.05278230038180465, 0.05278230038180465, 0.05278230038180465, 0.1160249347746205, 0.1160249347746205, 0.1160249347746205, 0.06307145790053836, 0.06307145790053836, 0.06307145790053836]}, "mutation_prompt": null}
{"id": "71c15afe-2987-4079-97cb-251fe286a1b9", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(40, 4 + int(3 * np.log(dim)))  # Rule-of-thumb for PSO population size\n        self.de_cr = 0.9  # Crossover probability for DE\n        self.de_f = 0.8  # Differential weight for DE\n        self.c1 = 2.05  # Cognitive coefficient for PSO\n        self.c2 = 2.05  # Social coefficient for PSO\n        self.w = 0.7  # Initial inertia weight for PSO\n\n    def __call__(self, func):\n        np.random.seed(42)\n        \n        # Initialize particles and velocities for PSO\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_values = np.full(self.population_size, np.inf)\n\n        # Initialize the global best\n        global_best_position = None\n        global_best_value = np.inf\n\n        # Main loop of the hybrid algorithm\n        evaluations = 0\n        while evaluations < self.budget:\n            # Dynamically adjust inertia weight\n            self.w = 0.9 - ((0.9 - 0.4) * (evaluations / self.budget))\n            \n            # Evaluate current solutions\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                current_value = func(particles[i])\n                evaluations += 1\n                \n                # Update personal bests\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = particles[i]\n                \n                # Update global best\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = particles[i]\n\n            # PSO update: Update velocities and positions\n            r1, r2 = np.random.rand(2)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - particles) +\n                          self.c2 * r2 * (global_best_position - particles))\n            particles = particles + velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            # DE update: Apply differential evolution strategy\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = particles[indices[0]], particles[indices[1]], particles[indices[2]]\n                trial_vector = np.clip(a + self.de_f * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.de_cr\n                trial_vector = np.where(crossover_mask, trial_vector, particles[i])\n\n                # Random walk mutation for diversity\n                if np.random.rand() < 0.1:\n                    trial_vector += np.random.normal(0, 0.1, self.dim)\n                \n                # Evaluate trial vector\n                trial_value = func(trial_vector)\n                evaluations += 1\n\n                # Selection\n                if trial_value < personal_best_values[i]:\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n\n        return global_best_position, global_best_value", "name": "HybridPSO_DE", "description": "Enhance exploration by adjusting inertia weight dynamically and increase diversity through random walk mutation.", "configspace": "", "generation": 1, "fitness": 0.23929436310307733, "feedback": "", "error": "", "parent_id": "438b5244-dfe4-41ff-bd10-228be82e401d", "metadata": {"aucs": [0.7309593192428223, 0.7309593192428223, 0.7309593192428223, 0.6956868732947334, 0.6956868732947334, 0.6956868732947334, 0.6772451196522519, 0.6772451196522519, 0.6772451196522519, 0.3766682588634822, 0.3766682588634822, 0.3766682588634822, 0.4760659234278183, 0.4760659234278183, 0.4760659234278183, 0.004018047020294069, 0.004018047020294069, 0.004018047020294069, 0.006275508595006474, 0.006275508595006474, 0.006275508595006474, 0.12838027110082717, 0.12838027110082717, 0.12838027110082717, 0.07037016656940265, 0.07037016656940265, 0.07037016656940265, 0.020309908992384718, 0.020309908992384718, 0.020309908992384718, 0.08586505890860185, 0.08586505890860185, 0.08586505890860185, 0.05752076108191029, 0.05752076108191029, 0.05752076108191029, 0.9949272026380515, 0.9949272026380515, 0.9949272026380515, 0.9963196888827099, 0.9963196888827099, 0.9963196888827099, 0.9388407331732014, 0.9388407331732014, 0.9388407331732014, 0.5344395451218231, 0.5344395451218231, 0.5344395451218231, 0.46480293777667425, 0.46480293777667425, 0.46480293777667425, 0.5121292287182753, 0.5121292287182753, 0.5121292287182753, 0.16353580078039542, 0.16353580078039542, 0.16353580078039542, 0.2224318275251823, 0.2224318275251823, 0.2224318275251823, 0.04577644172966466, 0.04577644172966466, 0.04577644172966466, 0.41019036216742033, 0.41019036216742033, 0.41019036216742033, 0.11095128764415862, 0.11095128764415862, 0.11095128764415862, 0.33918047606397217, 0.33918047606397217, 0.33918047606397217, 0.17071790747626003, 0.17071790747626003, 0.17071790747626003, 0.3980388437779311, 0.3980388437779311, 0.3980388437779311, 0.5263900566403472, 0.5263900566403472, 0.5263900566403472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002247004709643674, 0.002247004709643674, 0.002247004709643674, 0.01688979545317748, 0.01688979545317748, 0.01688979545317748, 0.007163502156110169, 0.007163502156110169, 0.007163502156110169, 0.013340369985140432, 0.013340369985140432, 0.013340369985140432, 0.0369154388091969, 0.0369154388091969, 0.0369154388091969, 0.058807023504195644, 0.058807023504195644, 0.058807023504195644, 0.05992179714713841, 0.05992179714713841, 0.05992179714713841, 0.19177679663339364, 0.19177679663339364, 0.19177679663339364, 0.005104251748189181, 0.005104251748189181, 0.005104251748189181, 0.19392815737906954, 0.19392815737906954, 0.19392815737906954, 0.6341268759448413, 0.6341268759448413, 0.6341268759448413, 0.5079098039680602, 0.5079098039680602, 0.5079098039680602, 0.5849875766551865, 0.5849875766551865, 0.5849875766551865, 0.05302159284382146, 0.05302159284382146, 0.05302159284382146, 0.1263631385956916, 0.1263631385956916, 0.1263631385956916, 0.07730377219596518, 0.07730377219596518, 0.07730377219596518, 0.13640562755386032, 0.13640562755386032, 0.13640562755386032, 0.15058208784361393, 0.15058208784361393, 0.15058208784361393, 0.11879170864486877, 0.11879170864486877, 0.11879170864486877, 0.23931947703374734, 0.23931947703374734, 0.23931947703374734, 0.2124189484082889, 0.2124189484082889, 0.2124189484082889, 0.119865447438398, 0.119865447438398, 0.119865447438398, 0.09917231449073738, 0.09917231449073738, 0.09917231449073738, 0.2376639135845866, 0.2376639135845866, 0.2376639135845866, 0.04348356115288021, 0.04348356115288021, 0.04348356115288021, 0.20475961116251018, 0.20475961116251018, 0.20475961116251018, 0.2100325158943791, 0.2100325158943791, 0.2100325158943791, 0.20145860607137456, 0.20145860607137456, 0.20145860607137456, 0.17219833320397537, 0.17219833320397537, 0.17219833320397537, 0.22426099170922154, 0.22426099170922154, 0.22426099170922154, 0.1947444616327917, 0.1947444616327917, 0.1947444616327917, 0.1492452390467277, 0.1492452390467277, 0.1492452390467277, 0.16422713388662047, 0.16422713388662047, 0.16422713388662047, 0.15489594387797256, 0.15489594387797256, 0.15489594387797256, 0.18298757383287523, 0.18298757383287523, 0.18298757383287523, 0.2084834140361842, 0.2084834140361842, 0.2084834140361842, 0.20390070357026624, 0.20390070357026624, 0.20390070357026624, 0.23372512959388503, 0.23372512959388503, 0.23372512959388503, 0.18483437135536318, 0.18483437135536318, 0.18483437135536318, 0.21101834257825636, 0.21101834257825636, 0.21101834257825636, 0.06855991722631893, 0.06855991722631893, 0.06855991722631893, 0.09047150675477622, 0.09047150675477622, 0.09047150675477622, 0.08364280724266482, 0.08364280724266482, 0.08364280724266482]}, "mutation_prompt": null}
