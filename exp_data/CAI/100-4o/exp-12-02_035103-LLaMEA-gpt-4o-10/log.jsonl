{"id": "0c6322de-8cdb-4366-aff2-c4d639efa614", "solution": "import numpy as np\n\nclass HPEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.f = 0.8  # differential weight\n        self.cr = 0.9  # crossover probability\n\n    def __call__(self, func):\n        np.random.seed(42)\n\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        pbest_positions = np.copy(positions)\n        pbest_scores = np.array([func(ind) for ind in positions])\n        gbest_index = np.argmin(pbest_scores)\n        gbest_position = pbest_positions[gbest_index]\n        \n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest_positions - positions) +\n                          self.c2 * r2 * (gbest_position - positions))\n            positions = positions + velocities\n            positions = np.clip(positions, self.lower_bound, self.upper_bound)\n            \n            # Evaluate\n            scores = np.array([func(ind) for ind in positions])\n            eval_count += self.population_size\n\n            # Update personal bests\n            better_idxs = scores < pbest_scores\n            pbest_scores[better_idxs] = scores[better_idxs]\n            pbest_positions[better_idxs] = positions[better_idxs]\n            \n            # Update global best\n            gbest_index = np.argmin(pbest_scores)\n            gbest_position = pbest_positions[gbest_index]\n\n            # DE Update\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.cr\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, positions[i])\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial\n                    scores[i] = trial_score\n\n            # Update global best from DE\n            min_score_index = np.argmin(scores)\n            min_score = scores[min_score_index]\n            if min_score < pbest_scores[gbest_index]:\n                gbest_position = positions[min_score_index]\n                pbest_scores[gbest_index] = min_score\n\n        return gbest_position", "name": "HPEA", "description": "Hybrid Particle Evolutionary Algorithm (HPEA) combines Particle Swarm Optimization with Differential Evolution for enhanced exploration and exploitation in black box optimization.", "configspace": "", "generation": 0, "fitness": 0.26442969051081905, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7965108137529696, 0.7965108137529696, 0.7965108137529696, 0.8084295494944411, 0.8084295494944411, 0.8084295494944411, 0.8131497766831257, 0.8131497766831257, 0.8131497766831257, 0.5370284327226287, 0.5370284327226287, 0.5370284327226287, 0.5594213193439682, 0.5594213193439682, 0.5594213193439682, 0.5144832543900987, 0.5144832543900987, 0.5144832543900987, 0.1106273030444318, 0.1106273030444318, 0.1106273030444318, 0.14370710485469917, 0.14370710485469917, 0.14370710485469917, 0.1322438838668739, 0.1322438838668739, 0.1322438838668739, 0.10928559684576444, 0.10928559684576444, 0.10928559684576444, 0.12391492846265284, 0.12391492846265284, 0.12391492846265284, 0.10725073848952849, 0.10725073848952849, 0.10725073848952849, 0.9769553231571779, 0.9769553231571779, 0.9769553231571779, 0.976304435223957, 0.976304435223957, 0.976304435223957, 0.97728387583824, 0.97728387583824, 0.97728387583824, 0.4185378426624782, 0.4185378426624782, 0.4185378426624782, 0.24129153375507562, 0.24129153375507562, 0.24129153375507562, 0.41118556865991485, 0.41118556865991485, 0.41118556865991485, 0.2795803445267966, 0.2795803445267966, 0.2795803445267966, 0.3419808618731358, 0.3419808618731358, 0.3419808618731358, 0.15980467106235063, 0.15980467106235063, 0.15980467106235063, 0.19708483345668715, 0.19708483345668715, 0.19708483345668715, 0.17406346434370756, 0.17406346434370756, 0.17406346434370756, 0.18651967397502345, 0.18651967397502345, 0.18651967397502345, 0.18769724266216925, 0.18769724266216925, 0.18769724266216925, 0.1940485517906574, 0.1940485517906574, 0.1940485517906574, 0.28384767101195163, 0.28384767101195163, 0.28384767101195163, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0034333519504591292, 0.0034333519504591292, 0.0034333519504591292, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02880175194233503, 0.02880175194233503, 0.02880175194233503, 0.031042390835210654, 0.031042390835210654, 0.031042390835210654, 0.05549272131597505, 0.05549272131597505, 0.05549272131597505, 0.04216852866319909, 0.04216852866319909, 0.04216852866319909, 0.10917717297244667, 0.10917717297244667, 0.10917717297244667, 0.0852902088969848, 0.0852902088969848, 0.0852902088969848, 0.23552054084573615, 0.23552054084573615, 0.23552054084573615, 0.0955379744008713, 0.0955379744008713, 0.0955379744008713, 0.07741477213438375, 0.07741477213438375, 0.07741477213438375, 0.530316790508931, 0.530316790508931, 0.530316790508931, 0.5207133406852612, 0.5207133406852612, 0.5207133406852612, 0.5620970152455305, 0.5620970152455305, 0.5620970152455305, 0.09896098700867662, 0.09896098700867662, 0.09896098700867662, 0.09763690363056443, 0.09763690363056443, 0.09763690363056443, 0.08667027743882516, 0.08667027743882516, 0.08667027743882516, 0.1833859533897566, 0.1833859533897566, 0.1833859533897566, 0.1521006613896212, 0.1521006613896212, 0.1521006613896212, 0.16608342955891586, 0.16608342955891586, 0.16608342955891586, 0.2411002787158658, 0.2411002787158658, 0.2411002787158658, 0.21132026383696723, 0.21132026383696723, 0.21132026383696723, 0.33927555466565174, 0.33927555466565174, 0.33927555466565174, 0.14078188183730422, 0.14078188183730422, 0.14078188183730422, 0.18681712821914176, 0.18681712821914176, 0.18681712821914176, 0.16434267512466227, 0.16434267512466227, 0.16434267512466227, 0.20059054845102464, 0.20059054845102464, 0.20059054845102464, 0.18794684058841626, 0.18794684058841626, 0.18794684058841626, 0.20909627616237325, 0.20909627616237325, 0.20909627616237325, 0.22738146752893595, 0.22738146752893595, 0.22738146752893595, 0.2152239561355771, 0.2152239561355771, 0.2152239561355771, 0.21018193916642147, 0.21018193916642147, 0.21018193916642147, 0.8892877861122337, 0.8892877861122337, 0.8892877861122337, 0.1634908776798124, 0.1634908776798124, 0.1634908776798124, 0.16879091400163448, 0.16879091400163448, 0.16879091400163448, 0.20516409328026053, 0.20516409328026053, 0.20516409328026053, 0.2106940401167794, 0.2106940401167794, 0.2106940401167794, 0.166175462636301, 0.166175462636301, 0.166175462636301, 0.1861909429267291, 0.1861909429267291, 0.1861909429267291, 0.17585340741100441, 0.17585340741100441, 0.17585340741100441, 0.17954292954576356, 0.17954292954576356, 0.17954292954576356, 0.06542148619173438, 0.06542148619173438, 0.06542148619173438, 0.07500822753344616, 0.07500822753344616, 0.07500822753344616, 0.09497537014674107, 0.09497537014674107, 0.09497537014674107]}, "mutation_prompt": null}
{"id": "73c154d1-a9ce-422a-a287-4593e67cd059", "solution": "import numpy as np\n\nclass HPEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.f = 0.8  # differential weight\n        self.cr = 0.9  # crossover probability\n\n    def __call__(self, func):\n        np.random.seed(42)\n\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        pbest_positions = np.copy(positions)\n        pbest_scores = np.array([func(ind) for ind in positions])\n        gbest_index = np.argmin(pbest_scores)\n        gbest_position = pbest_positions[gbest_index]\n        \n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest_positions - positions) +\n                          self.c2 * r2 * (gbest_position - positions))\n            positions = positions + velocities\n            positions = np.clip(positions, self.lower_bound, self.upper_bound)\n            \n            # Evaluate\n            scores = np.array([func(ind) for ind in positions])\n            eval_count += self.population_size\n\n            # Update personal bests\n            better_idxs = scores < pbest_scores\n            pbest_scores[better_idxs] = scores[better_idxs]\n            pbest_positions[better_idxs] = positions[better_idxs]\n            \n            # Update global best\n            gbest_index = np.argmin(pbest_scores)\n            gbest_position = pbest_positions[gbest_index]\n\n            # DE Update\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = positions[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.cr\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, positions[i])\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < scores[i]:\n                    positions[i] = trial\n                    scores[i] = trial_score\n\n            # Update global best from DE\n            min_score_index = np.argmin(scores)\n            min_score = scores[min_score_index]\n            if min_score < pbest_scores[gbest_index]:\n                gbest_position = positions[min_score_index]\n                pbest_scores[gbest_index] = min_score\n\n        return gbest_position", "name": "HPEA", "description": "Hybrid Particle Evolutionary Algorithm (HPEA) combines Particle Swarm Optimization with Differential Evolution for enhanced exploration and exploitation in black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0c6322de-8cdb-4366-aff2-c4d639efa614", "metadata": {"aucs": [0.7965108137529696, 0.7965108137529696, 0.7965108137529696, 0.8084295494944411, 0.8084295494944411, 0.8084295494944411, 0.8131497766831257, 0.8131497766831257, 0.8131497766831257, 0.5370284327226287, 0.5370284327226287, 0.5370284327226287, 0.5594213193439682, 0.5594213193439682, 0.5594213193439682, 0.5144832543900987, 0.5144832543900987, 0.5144832543900987, 0.1106273030444318, 0.1106273030444318, 0.1106273030444318, 0.14370710485469917, 0.14370710485469917, 0.14370710485469917, 0.1322438838668739, 0.1322438838668739, 0.1322438838668739, 0.10928559684576444, 0.10928559684576444, 0.10928559684576444, 0.12391492846265284, 0.12391492846265284, 0.12391492846265284, 0.10725073848952849, 0.10725073848952849, 0.10725073848952849, 0.9769553231571779, 0.9769553231571779, 0.9769553231571779, 0.976304435223957, 0.976304435223957, 0.976304435223957, 0.97728387583824, 0.97728387583824, 0.97728387583824, 0.4185378426624782, 0.4185378426624782, 0.4185378426624782, 0.24129153375507562, 0.24129153375507562, 0.24129153375507562, 0.41118556865991485, 0.41118556865991485, 0.41118556865991485, 0.2795803445267966, 0.2795803445267966, 0.2795803445267966, 0.3419808618731358, 0.3419808618731358, 0.3419808618731358, 0.15980467106235063, 0.15980467106235063, 0.15980467106235063, 0.19708483345668715, 0.19708483345668715, 0.19708483345668715, 0.17406346434370756, 0.17406346434370756, 0.17406346434370756, 0.18651967397502345, 0.18651967397502345, 0.18651967397502345, 0.18769724266216925, 0.18769724266216925, 0.18769724266216925, 0.1940485517906574, 0.1940485517906574, 0.1940485517906574, 0.28384767101195163, 0.28384767101195163, 0.28384767101195163, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0034333519504591292, 0.0034333519504591292, 0.0034333519504591292, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02880175194233503, 0.02880175194233503, 0.02880175194233503, 0.031042390835210654, 0.031042390835210654, 0.031042390835210654, 0.05549272131597505, 0.05549272131597505, 0.05549272131597505, 0.04216852866319909, 0.04216852866319909, 0.04216852866319909, 0.10917717297244667, 0.10917717297244667, 0.10917717297244667, 0.0852902088969848, 0.0852902088969848, 0.0852902088969848, 0.23552054084573615, 0.23552054084573615, 0.23552054084573615, 0.0955379744008713, 0.0955379744008713, 0.0955379744008713, 0.07741477213438375, 0.07741477213438375, 0.07741477213438375, 0.530316790508931, 0.530316790508931, 0.530316790508931, 0.5207133406852612, 0.5207133406852612, 0.5207133406852612, 0.5620970152455305, 0.5620970152455305, 0.5620970152455305, 0.09896098700867662, 0.09896098700867662, 0.09896098700867662, 0.09763690363056443, 0.09763690363056443, 0.09763690363056443, 0.08667027743882516, 0.08667027743882516, 0.08667027743882516, 0.1833859533897566, 0.1833859533897566, 0.1833859533897566, 0.1521006613896212, 0.1521006613896212, 0.1521006613896212, 0.16608342955891586, 0.16608342955891586, 0.16608342955891586, 0.2411002787158658, 0.2411002787158658, 0.2411002787158658, 0.21132026383696723, 0.21132026383696723, 0.21132026383696723, 0.33927555466565174, 0.33927555466565174, 0.33927555466565174, 0.14078188183730422, 0.14078188183730422, 0.14078188183730422, 0.18681712821914176, 0.18681712821914176, 0.18681712821914176, 0.16434267512466227, 0.16434267512466227, 0.16434267512466227, 0.20059054845102464, 0.20059054845102464, 0.20059054845102464, 0.18794684058841626, 0.18794684058841626, 0.18794684058841626, 0.20909627616237325, 0.20909627616237325, 0.20909627616237325, 0.22738146752893595, 0.22738146752893595, 0.22738146752893595, 0.2152239561355771, 0.2152239561355771, 0.2152239561355771, 0.21018193916642147, 0.21018193916642147, 0.21018193916642147, 0.8892877861122337, 0.8892877861122337, 0.8892877861122337, 0.1634908776798124, 0.1634908776798124, 0.1634908776798124, 0.16879091400163448, 0.16879091400163448, 0.16879091400163448, 0.20516409328026053, 0.20516409328026053, 0.20516409328026053, 0.2106940401167794, 0.2106940401167794, 0.2106940401167794, 0.166175462636301, 0.166175462636301, 0.166175462636301, 0.1861909429267291, 0.1861909429267291, 0.1861909429267291, 0.17585340741100441, 0.17585340741100441, 0.17585340741100441, 0.17954292954576356, 0.17954292954576356, 0.17954292954576356, 0.06542148619173438, 0.06542148619173438, 0.06542148619173438, 0.07500822753344616, 0.07500822753344616, 0.07500822753344616, 0.09497537014674107, 0.09497537014674107, 0.09497537014674107]}, "mutation_prompt": null}
