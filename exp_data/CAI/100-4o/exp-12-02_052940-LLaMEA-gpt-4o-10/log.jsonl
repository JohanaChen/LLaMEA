{"id": "c24f0b5b-94b0-4a62-bdfc-6f196aa94a3d", "solution": "import numpy as np\n\nclass ChaoticDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5  # differential weight\n        self.CR = 0.9  # crossover probability\n        self.chaotic_map = self.logistic_map\n        self.num_evaluations = 0\n\n    def logistic_map(self, x):\n        return 4.0 * x * (1.0 - x)\n\n    def chaotic_sequence(self, length):\n        x = 0.7  # initial value\n        seq = []\n        for _ in range(length):\n            x = self.chaotic_map(x)\n            seq.append(x)\n        return seq\n\n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        self.num_evaluations += self.population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n\n        chaotic_seq = self.chaotic_sequence(self.budget)\n\n        while self.num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.num_evaluations >= self.budget:\n                    break\n\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = pop[np.random.choice(indices, 3, replace=False)]\n\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, pop[i])\n\n                f_trial = func(trial)\n                self.num_evaluations += 1\n\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n                # Adapt parameters using chaotic sequence\n                self.F = 0.5 + 0.3 * chaotic_seq[self.num_evaluations % len(chaotic_seq)]\n                self.CR = 0.8 + 0.2 * chaotic_seq[self.num_evaluations % len(chaotic_seq)]\n\n        return best", "name": "ChaoticDifferentialEvolution", "description": "A hybrid differential evolution algorithm integrated with a chaotic map for adaptive parameter tuning to enhance exploration and exploitation balance in optimization.", "configspace": "", "generation": 0, "fitness": 0.3372086944192212, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7429006588557788, 0.737045382124357, 0.7282801727380545, 0.7489781700182228, 0.7682127055109329, 0.7653116724338559, 0.7508534402468807, 0.7572261704500045, 0.7345224501267389, 0.559163147865293, 0.5421350239245222, 0.5868404438798712, 0.5289974798925017, 0.5287146775249604, 0.5703232484976588, 0.5491170240465677, 0.5449442324680502, 0.5624478420186019, 0.10715086536920504, 0.10538492810654809, 0.10349128445258537, 0.10521158555859655, 0.09732888918855187, 0.10248925161243627, 0.10720533409188593, 0.11894361632520045, 0.11157533815304754, 0.09124925947582219, 0.09976202605076545, 0.1020154141548395, 0.1030955659071493, 0.09374963516001922, 0.09141209120804106, 0.09610562344913054, 0.10708784571604935, 0.11817135548548008, 0.9056912194255934, 0.9032813138697038, 0.9175292377912854, 0.9512113670407035, 0.849374748129933, 0.9044296662348048, 0.9838872111730509, 0.9636722942322881, 0.9801052168900893, 0.40346875151464345, 0.3547581224567766, 0.34918371262024306, 0.3919619846987502, 0.3724729322790383, 0.39917355311811786, 0.4312968063854654, 0.4098832144089185, 0.3743809035901353, 0.6516949497043854, 0.6734120004417604, 0.6484512086591504, 0.7650250693572407, 0.7251498525571048, 0.6272099074823423, 0.7170266664733196, 0.6817433505170676, 0.6942896496297362, 0.31925471902012215, 0.2933982544739474, 0.3229305946335459, 0.2998631470025548, 0.31851361589549854, 0.26604555462736434, 0.2684187121319793, 0.29006474059106957, 0.2815318129729065, 0.23855566798554906, 0.020380967764299762, 0.22468180104758828, 0.3246330144458939, 0.33538210883347463, 0.3027091062513193, 0.34506992162560646, 0.29918485982174925, 0.244419434749647, 0.23979284362201747, 0.2881860998814173, 0.24170543940772427, 0.2547160023655247, 0.27463311561600645, 0.2013717497627776, 0.2705388499992307, 0.28028885482923693, 0.23449582146755177, 0.3950918938262906, 0.3980550819819443, 0.3977508652926167, 0.37735572822744234, 0.36012193816239557, 0.3881383047463487, 0.4387103222861052, 0.413068757208065, 0.4448410399350683, 0.045618600395579745, 0.12226001599308423, 0.09190169345266408, 0.1311170149631733, 0.08713215362292648, 0.08243917726316141, 0.11138589276881683, 0.10614509435982544, 0.07827944466014358, 0.24714531184984068, 0.23501741190404457, 0.21866010837915384, 0.23824347022677872, 0.24490627900849204, 0.25068336272970027, 0.23900300680086495, 0.2447055828625586, 0.22559204486098183, 0.6578150684359543, 0.5898357406169293, 0.6160361040244442, 0.613704877229341, 0.597493790417696, 0.6039642942125462, 0.596440600837862, 0.5800709939501794, 0.6085419612011737, 0.09804089045740094, 0.10559950593917944, 0.09264677257988174, 0.10131707728534933, 0.08656571857933426, 0.08642833247067516, 0.09656563991423994, 0.09493940240667631, 0.08147472505762943, 0.12623368987385453, 0.12690009044733075, 0.1556030322416322, 0.1785287073801295, 0.15390928171738127, 0.1991724841458311, 0.13711384954622297, 0.12839510369896356, 0.12912246418885276, 0.32492577365918673, 0.3257141544299177, 0.31741393515919947, 0.34798087808372025, 0.3115607106037913, 0.3481747259469177, 0.3597902046508892, 0.3702065993779875, 0.35878838980081795, 0.2536328652375114, 0.256163827401371, 0.2625586200117067, 0.23871522868608297, 0.25940852239035483, 0.25360830891766284, 0.27756178014488764, 0.2857267041799826, 0.2710428505510445, 0.19919474824312655, 0.18577571237398993, 0.1957938125024602, 0.2124741289679749, 0.19513883457210524, 0.18811532770474992, 0.1972269175115744, 0.18709140193382212, 0.18655850914615124, 0.18459453473656273, 0.17919072995718743, 0.19053726407057392, 0.180089614029318, 0.187936984803725, 0.18583344985504657, 0.18407965013754823, 0.18598626576793997, 0.17844485656674336, 0.14854859411459986, 0.6729517588764189, 0.640010525081089, 0.17620003205394896, 0.6639151501433509, 0.6933106162106444, 0.4930938298012456, 0.5747082226498718, 0.4743235654398832, 0.6639133415839649, 0.7231820980277341, 0.5389892461833983, 0.4839443717180807, 0.19752141958991565, 0.7116071808049831, 0.20478450899783307, 0.2082445142360272, 0.20602329300261946, 0.20492139376667906, 0.18700093309655308, 0.18588653466555527, 0.17843971130322478, 0.1885701683473222, 0.1838612214655937, 0.18833584465660624, 0.1814284511269516, 0.1835160681362068, 0.08082260470677705, 0.07167326660567197, 0.08458528230730566, 0.08467919538538282, 0.07971637438879531, 0.07799692126940494, 0.07932284754392915, 0.0761209656759343, 0.08408574925442114]}, "mutation_prompt": null}
{"id": "6b49fa0a-7f9f-4e29-9107-4f9348761c47", "solution": "import numpy as np\n\nclass ChaoticDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5  # differential weight\n        self.CR = 0.9  # crossover probability\n        self.chaotic_map = self.logistic_map\n        self.num_evaluations = 0\n\n    def logistic_map(self, x):\n        return 4.0 * x * (1.0 - x)\n\n    def chaotic_sequence(self, length):\n        x = 0.7  # initial value\n        seq = []\n        for _ in range(length):\n            x = self.chaotic_map(x)\n            seq.append(x)\n        return seq\n\n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        self.num_evaluations += self.population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n\n        chaotic_seq = self.chaotic_sequence(self.budget)\n\n        while self.num_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.num_evaluations >= self.budget:\n                    break\n\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = pop[np.random.choice(indices, 3, replace=False)]\n\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, pop[i])\n\n                f_trial = func(trial)\n                self.num_evaluations += 1\n\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n                # Adapt parameters using chaotic sequence\n                self.F = 0.5 + 0.3 * chaotic_seq[self.num_evaluations % len(chaotic_seq)]\n                self.CR = 0.8 + 0.2 * chaotic_seq[self.num_evaluations % len(chaotic_seq)]\n\n        return best", "name": "ChaoticDifferentialEvolution", "description": "A hybrid differential evolution algorithm integrated with a chaotic map for adaptive parameter tuning to enhance exploration and exploitation balance in optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c24f0b5b-94b0-4a62-bdfc-6f196aa94a3d", "metadata": {"aucs": [0.7429006588557788, 0.737045382124357, 0.7282801727380545, 0.7489781700182228, 0.7682127055109329, 0.7653116724338559, 0.7508534402468807, 0.7572261704500045, 0.7345224501267389, 0.559163147865293, 0.5421350239245222, 0.5868404438798712, 0.5289974798925017, 0.5287146775249604, 0.5703232484976588, 0.5491170240465677, 0.5449442324680502, 0.5624478420186019, 0.10715086536920504, 0.10538492810654809, 0.10349128445258537, 0.10521158555859655, 0.09732888918855187, 0.10248925161243627, 0.10720533409188593, 0.11894361632520045, 0.11157533815304754, 0.09124925947582219, 0.09976202605076545, 0.1020154141548395, 0.1030955659071493, 0.09374963516001922, 0.09141209120804106, 0.09610562344913054, 0.10708784571604935, 0.11817135548548008, 0.9056912194255934, 0.9032813138697038, 0.9175292377912854, 0.9512113670407035, 0.849374748129933, 0.9044296662348048, 0.9838872111730509, 0.9636722942322881, 0.9801052168900893, 0.40346875151464345, 0.3547581224567766, 0.34918371262024306, 0.3919619846987502, 0.3724729322790383, 0.39917355311811786, 0.4312968063854654, 0.4098832144089185, 0.3743809035901353, 0.6516949497043854, 0.6734120004417604, 0.6484512086591504, 0.7650250693572407, 0.7251498525571048, 0.6272099074823423, 0.7170266664733196, 0.6817433505170676, 0.6942896496297362, 0.31925471902012215, 0.2933982544739474, 0.3229305946335459, 0.2998631470025548, 0.31851361589549854, 0.26604555462736434, 0.2684187121319793, 0.29006474059106957, 0.2815318129729065, 0.23855566798554906, 0.020380967764299762, 0.22468180104758828, 0.3246330144458939, 0.33538210883347463, 0.3027091062513193, 0.34506992162560646, 0.29918485982174925, 0.244419434749647, 0.23979284362201747, 0.2881860998814173, 0.24170543940772427, 0.2547160023655247, 0.27463311561600645, 0.2013717497627776, 0.2705388499992307, 0.28028885482923693, 0.23449582146755177, 0.3950918938262906, 0.3980550819819443, 0.3977508652926167, 0.37735572822744234, 0.36012193816239557, 0.3881383047463487, 0.4387103222861052, 0.413068757208065, 0.4448410399350683, 0.045618600395579745, 0.12226001599308423, 0.09190169345266408, 0.1311170149631733, 0.08713215362292648, 0.08243917726316141, 0.11138589276881683, 0.10614509435982544, 0.07827944466014358, 0.24714531184984068, 0.23501741190404457, 0.21866010837915384, 0.23824347022677872, 0.24490627900849204, 0.25068336272970027, 0.23900300680086495, 0.2447055828625586, 0.22559204486098183, 0.6578150684359543, 0.5898357406169293, 0.6160361040244442, 0.613704877229341, 0.597493790417696, 0.6039642942125462, 0.596440600837862, 0.5800709939501794, 0.6085419612011737, 0.09804089045740094, 0.10559950593917944, 0.09264677257988174, 0.10131707728534933, 0.08656571857933426, 0.08642833247067516, 0.09656563991423994, 0.09493940240667631, 0.08147472505762943, 0.12623368987385453, 0.12690009044733075, 0.1556030322416322, 0.1785287073801295, 0.15390928171738127, 0.1991724841458311, 0.13711384954622297, 0.12839510369896356, 0.12912246418885276, 0.32492577365918673, 0.3257141544299177, 0.31741393515919947, 0.34798087808372025, 0.3115607106037913, 0.3481747259469177, 0.3597902046508892, 0.3702065993779875, 0.35878838980081795, 0.2536328652375114, 0.256163827401371, 0.2625586200117067, 0.23871522868608297, 0.25940852239035483, 0.25360830891766284, 0.27756178014488764, 0.2857267041799826, 0.2710428505510445, 0.19919474824312655, 0.18577571237398993, 0.1957938125024602, 0.2124741289679749, 0.19513883457210524, 0.18811532770474992, 0.1972269175115744, 0.18709140193382212, 0.18655850914615124, 0.18459453473656273, 0.17919072995718743, 0.19053726407057392, 0.180089614029318, 0.187936984803725, 0.18583344985504657, 0.18407965013754823, 0.18598626576793997, 0.17844485656674336, 0.14854859411459986, 0.6729517588764189, 0.640010525081089, 0.17620003205394896, 0.6639151501433509, 0.6933106162106444, 0.4930938298012456, 0.5747082226498718, 0.4743235654398832, 0.6639133415839649, 0.7231820980277341, 0.5389892461833983, 0.4839443717180807, 0.19752141958991565, 0.7116071808049831, 0.20478450899783307, 0.2082445142360272, 0.20602329300261946, 0.20492139376667906, 0.18700093309655308, 0.18588653466555527, 0.17843971130322478, 0.1885701683473222, 0.1838612214655937, 0.18833584465660624, 0.1814284511269516, 0.1835160681362068, 0.08082260470677705, 0.07167326660567197, 0.08458528230730566, 0.08467919538538282, 0.07971637438879531, 0.07799692126940494, 0.07932284754392915, 0.0761209656759343, 0.08408574925442114]}, "mutation_prompt": null}
