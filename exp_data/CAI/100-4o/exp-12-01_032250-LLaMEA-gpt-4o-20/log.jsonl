{"id": "2978404d-4d8f-484e-94f1-57989e4f3810", "solution": "import numpy as np\n\nclass HEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50  # You can adjust this based on budget\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, \n                                           (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        inertia_weight = 0.7\n        cognitive_weight = 1.5\n        social_weight = 1.5\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Evaluate current particle\n                score = func(self.particles[i])\n                evaluations += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n                # Stop if budget is exhausted\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            r1 = np.random.uniform(0, 1, (self.population_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.population_size, self.dim))\n\n            self.velocities = (inertia_weight * self.velocities +\n                               cognitive_weight * r1 * (self.personal_best_positions - self.particles) +\n                               social_weight * r2 * (self.global_best_position - self.particles))\n\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n\n            # Evolutionary strategy: select top half particles and mutate\n            top_half_indices = np.argsort(self.personal_best_scores)[:self.population_size // 2]\n            for i in range(self.population_size // 2, self.population_size):\n                parent_index = np.random.choice(top_half_indices)\n                self.particles[i] = self.personal_best_positions[parent_index] + \\\n                                    np.random.normal(0, 0.1, self.dim)\n                self.particles[i] = np.clip(self.particles[i], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "HEPSO", "description": "Hybrid Evolutionary Particle Swarm Optimization (HEPSO), blending evolutionary strategies and particle swarm dynamics for efficient search within budget constraints across diverse landscapes.", "configspace": "", "generation": 0, "fitness": 0.2106636941856342, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.42983010908819774, 0.44156307015303775, 0.43102660893121814, 0.44461585282467053, 0.44345042541504565, 0.44173296494926295, 0.4336726736329656, 0.44311293448061073, 0.6433913463266085, 0.03694629926418369, 9.999999999998899e-05, 9.999999999998899e-05, 0.24421895089329193, 0.015166031854352502, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024620769096321826, 9.999999999998899e-05, 0.1036523061060236, 0.09135236611357855, 0.11281750915746835, 0.09771070156126849, 0.06664062728852427, 0.12824425345664336, 0.09534693639276626, 0.1235425400326371, 0.1014257092114198, 0.08684988794993187, 0.0512102813543488, 0.09263397919598959, 0.12450795106475288, 0.08226448822948218, 0.10467449805292894, 0.11947545134799475, 0.052327832096912386, 0.0787426508599034, 0.9847266417789421, 0.9717744791812349, 0.9820103107301746, 0.9731623458641142, 0.9806298172843537, 0.9767245229130064, 0.9864355378555663, 0.981449374252493, 0.9800772901092587, 0.2884649786115929, 0.28089238440496467, 0.26434409249959046, 0.2825966104558384, 0.29596768913636673, 0.2981163065415875, 0.27512819018765644, 0.27650931509356946, 0.3018699557084972, 0.22604645173634885, 0.22619798393101742, 0.21357956998579297, 0.2792753751002258, 0.21408643638871605, 0.21198571096832297, 0.16677173037971438, 0.16722219837722574, 0.21602117542977062, 0.12896287359274206, 0.11910427080742081, 0.17615179404776082, 0.13457490129960947, 0.155979299530571, 0.1567190739172618, 0.19794694541591795, 0.21343472528379004, 0.15973383485772175, 0.19572607258746322, 0.17376789436721973, 0.20208842458725973, 0.1699560511150361, 0.1869198669693245, 0.14510664769202264, 0.12449948315790893, 0.1277350263821343, 0.1053707528100194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017762555660134405, 0.022297379910068194, 9.999999999998899e-05, 0.014538918364941145, 9.999999999998899e-05, 0.12241755451794578, 0.055565031309366186, 0.03714592332561639, 0.08200107659951605, 0.06287169010386429, 0.003299736346607629, 0.017079309987548363, 0.03805108689007142, 0.08328389129757341, 0.0342592872704055, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10535944874185721, 0.06125735818552969, 0.11410266177597517, 0.07307306041960149, 0.10200841138919436, 0.07889420399964442, 0.07324310886755248, 0.05418157782897581, 0.10373040744124795, 0.4087360244732693, 0.4143239954737984, 0.40921724612767874, 0.43603594146405045, 0.42161772029875166, 0.4065180307050418, 0.4152432095983778, 0.4186280712427908, 0.42116535249747933, 0.07889087577184895, 0.09606359465660064, 0.08992896429600494, 0.09706193560724818, 0.10571611153942084, 0.1270358354746255, 0.07186806471557572, 0.03979567930961825, 0.07430444910350109, 0.2155896216017783, 0.2087100758416669, 0.18612715006946257, 0.27851185156135794, 0.28289199093771544, 0.3316698563826399, 0.2181857233867861, 0.18348431031784362, 0.2720329047019272, 0.2801602038034676, 0.2984719576486111, 0.2958555379948603, 0.2073832267288449, 0.2940136767173712, 0.2876903033844497, 0.24754298441759892, 0.3048487162032968, 0.21823267843107375, 0.18904342048313616, 0.18997845218757525, 0.21987777788055995, 0.17518501547631626, 0.1741036147774384, 0.23653001679872587, 0.21661699905967835, 0.23391900511920072, 0.23863307660449762, 0.20163370771291322, 0.1942919525726282, 0.19125969326772252, 0.211990642257601, 0.18712538171027304, 0.1901174974725781, 0.20832199834036913, 0.21732644329596218, 0.19459867037666934, 0.18089493598101158, 0.2065999198618944, 0.19633103199030488, 0.20134155680520516, 0.22251870765859905, 0.20051892672901162, 0.19087031634771134, 0.19368650589577951, 0.2008325058695246, 0.18420723574177644, 0.16775843193078, 0.1527458009317787, 0.6355721886972864, 0.1998358051533784, 0.16819229549973935, 0.14245118845572602, 0.14936069968576338, 0.7375542514311489, 0.6748768094296356, 0.16705156019048517, 0.16095702509873866, 0.40229620190009585, 0.16811107088227129, 0.20196980977680357, 0.10467745349309321, 0.10449347134764952, 0.2591825967304294, 0.178435393848011, 0.19400786543917947, 0.19239375894730093, 0.17278117954414063, 0.18807745054143266, 0.17758639596365555, 0.1737937255205967, 0.20256948702472222, 0.20171324938506519, 0.08203253088604345, 0.08106186351510514, 0.07933739565536213, 0.08604347556478786, 0.06914765539855328, 0.0784233004573196, 0.0837224558495191, 0.09683476172482242, 0.07762304967945088]}, "mutation_prompt": null}
{"id": "e877662c-23b1-4ce6-a7d0-37a98a3c6d01", "solution": "import numpy as np\n\nclass EnhancedHEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, \n                                           (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        inertia_weight = 0.9  # Adjusted for more exploration\n        cognitive_weight = 1.4\n        social_weight = 1.4\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                score = func(self.particles[i])\n                evaluations += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n                if evaluations >= self.budget:\n                    break\n\n            r1 = np.random.uniform(0, 1, (self.population_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.population_size, self.dim))\n\n            self.velocities = (inertia_weight * self.velocities +\n                               cognitive_weight * r1 * (self.personal_best_positions - self.particles) +\n                               social_weight * r2 * (self.global_best_position - self.particles))\n            \n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n\n            # Evolutionary strategy: dynamically mutate with adaptive noise\n            top_half_indices = np.argsort(self.personal_best_scores)[:self.population_size // 2]\n            mutation_strength = 0.1 * (1 - evaluations / self.budget)  # Adaptive mutation\n            for i in range(self.population_size // 2, self.population_size):\n                parent_index = np.random.choice(top_half_indices)\n                self.particles[i] = self.personal_best_positions[parent_index] + \\\n                                    np.random.normal(0, mutation_strength, self.dim)\n                self.particles[i] = np.clip(self.particles[i], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHEPSO", "description": "Enhanced HEPSO with adaptive learning rates and dynamic mutation to improve exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": 0.21258898542429042, "feedback": "", "error": "", "parent_id": "2978404d-4d8f-484e-94f1-57989e4f3810", "metadata": {"aucs": [0.4924966761401741, 0.4968465552089909, 0.4863189841834553, 0.46731882381512835, 0.4931670665904587, 0.4756703351870035, 0.4589138042192893, 0.4810908096166432, 0.4760796515157486, 0.048147907429397896, 0.0017189370715430252, 9.999999999998899e-05, 0.005505943294114357, 9.999999999998899e-05, 0.019717612271109464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11199405419308384, 0.09298688443988323, 0.11537032939659875, 0.06234985290734274, 0.06209584550754643, 0.06424932252345572, 0.09249196536650539, 0.11731201020821169, 0.09416624179652666, 0.05975234674421648, 0.08246235650994693, 0.11872908242105518, 0.10365545533049592, 0.042623694253523525, 0.07522612928461636, 0.07987737370799719, 0.10403674954766773, 0.1046878185421396, 0.9847667843465194, 0.9726010089652986, 0.9854386427157539, 0.972898062954213, 0.9817362620151526, 0.977561318922406, 0.9863925460191172, 0.982490304234724, 0.9796617525622521, 0.2960592087828978, 0.31510747305557607, 0.2354064744194686, 0.32496608948630346, 0.32077620694017117, 0.3198036599625168, 0.306437000520287, 0.25379657079035756, 0.29869700203482785, 0.6999137049591242, 0.16902879114384428, 0.6029145263473568, 0.2777701748469915, 0.15575907146235057, 0.513771283609219, 0.06961289024759698, 0.16246264374248387, 0.05993497175876705, 0.13024738956239235, 0.11396965447030472, 0.10754817555001805, 0.12370179051046903, 0.11587477964254844, 0.0013051134238859508, 0.17553310415521373, 0.1230836906557703, 0.16109593022280755, 0.12844395495032934, 0.11931967307919655, 0.16224878330851966, 0.13294434829822, 0.15474034718825946, 0.15976435142267476, 0.12972363179944202, 0.1465678257305968, 0.26389454036867754, 9.999999999998899e-05, 0.009921343358807788, 9.999999999998899e-05, 0.013879038532498611, 0.049425764090456514, 0.041134311692915815, 9.999999999998899e-05, 9.999999999998899e-05, 0.020217828778580027, 0.06503206784430915, 0.03651180378963914, 0.06699404424447108, 0.09349840867764247, 0.005300703401467599, 0.016817651972147685, 0.0907691047936583, 0.09128886582777673, 0.032876916165935466, 0.00402452975336387, 0.008682482263052793, 0.01492217210311897, 0.019997734970069736, 0.010707187287459008, 0.008845294504639778, 0.014853315489776309, 0.0383768832161937, 0.020469505906637653, 0.05423037702785072, 0.06479190250952072, 0.06010223185047159, 0.054932016491142543, 0.14576769025752123, 0.08549654858025735, 0.06551908183902344, 0.07368830688736394, 0.12032766142952844, 0.43065062385931563, 0.44154197372529724, 0.4539715603125186, 0.43706690419292993, 0.43943992018510125, 0.4240986029825674, 0.44536519630309246, 0.4221930264259025, 0.4432586678195255, 0.06190046072291733, 0.057818565964943947, 0.07069603922133627, 0.10152933875195702, 0.04732787291388718, 0.07544439406270831, 0.07239041805974777, 0.07374403949761599, 0.08013470945249757, 0.20288330953129508, 0.20066820137236707, 0.19973808577468477, 0.328741037577013, 0.32225132256043043, 0.292434499687488, 0.3339515832429535, 0.26307113162483164, 0.1997274823209778, 0.3180852917601563, 0.3055532016434014, 0.32006243614348673, 0.2310872621461164, 0.18027750503609474, 0.13635098332278417, 0.23720436317651217, 0.23820076136408874, 0.21442778958497644, 0.2086727928413442, 0.18234319683069888, 0.22162745143695983, 0.16762831807133882, 0.17998210383010393, 0.14247011502999174, 0.21987724378103657, 0.2730265422997188, 0.261965905147706, 0.24534789706027682, 0.14337257601616527, 0.17526107314143224, 0.2316269085994399, 0.17749274312910457, 0.157820637279245, 0.20664930288982408, 0.1726352496128607, 0.2142986333242668, 0.1898423057041907, 0.1780461934435683, 0.1823835861329044, 0.17527753851695416, 0.23753411096091814, 0.17472425246020662, 0.18981628552093754, 0.19322601119167326, 0.19998262774579278, 0.1603228432244348, 0.12662708956369184, 0.15104776203557557, 0.6419992422225028, 0.19855527190670041, 0.16733072973662055, 0.1415130866495623, 0.16322950159283878, 0.7704174722259156, 0.6344026079900538, 0.1654546305508089, 0.07351055686133456, 0.24867487847246172, 0.3809153656688986, 0.19388684885062257, 0.21083524838960543, 0.20645663406207226, 0.2718456786739153, 0.19831749976215884, 0.18339457654409275, 0.19409924094428743, 0.1953789102718404, 0.18075453054272983, 0.18547596670321387, 0.205554643308815, 0.18728966863648366, 0.1863571133654751, 0.07107391604806967, 0.05743072581439379, 0.07769552733673812, 0.08492591014985051, 0.062196490135307037, 0.08882650280649906, 0.1313335233407965, 0.08645819866621751, 0.08627738832388909]}, "mutation_prompt": null}
