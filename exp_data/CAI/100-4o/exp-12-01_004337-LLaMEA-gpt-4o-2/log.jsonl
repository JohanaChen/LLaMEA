{"id": "27b66e79-1179-48e1-9356-608a2c702648", "solution": "import numpy as np\n\nclass HybridSADEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.temp_initial = 1000\n        self.temp_final = 1\n        self.cooling_rate = 0.95\n        self.pop_size = 10\n\n    def __call__(self, func):\n        # Initialize population\n        population = self.lower_bound + np.random.rand(self.pop_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        evaluations = self.pop_size\n        temperature = self.temp_initial\n        \n        while evaluations < self.budget and temperature > self.temp_final:\n            # Simulated Annealing Step\n            for i in range(self.pop_size):\n                candidate = population[i] + np.random.normal(0, 1, self.dim) * temperature\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n                if candidate_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - candidate_fitness) / temperature):\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best_solution = candidate\n                        best_fitness = candidate_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            temperature *= self.cooling_rate\n\n            # Differential Evolution Step\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < 0.9\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n        \n        return best_solution, best_fitness", "name": "HybridSADEOptimizer", "description": "A hybrid Simulated Annealing and Differential Evolution algorithm that balances exploration and exploitation to efficiently navigate the search space.", "configspace": "", "generation": 0, "fitness": 0.200117233326624, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.523725627282192, 0.3013057787452954, 0.3917739235623503, 0.38115531298700567, 0.3874511216394856, 0.2668481820529137, 0.48140527377450526, 0.2725900615776494, 0.2710078328014368, 0.549171687909886, 0.43346796611667926, 0.04201704111807558, 0.571410383333048, 0.3999442969107082, 0.6425177785905589, 0.0, 0.6447337210855874, 0.6119990233490654, 0.06779301385265424, 0.08111696434031623, 0.09825501665295633, 0.040188290988041664, 0.07061343408850129, 0.06513114859711511, 0.08367820362023615, 0.1118869494794359, 0.04052663093150499, 0.10832462902474693, 0.06362079553994793, 0.1006463160582407, 0.07807932580476407, 0.08535938060599146, 0.0816330022829076, 0.12159295763797873, 0.13212522567773433, 0.07846868040727784, 0.9878721794404575, 0.9972930442757821, 0.9969453634413533, 0.9837268722086955, 0.9928060264535247, 0.9978397295078111, 0.9963639163770864, 0.9963946834208285, 0.998825519794962, 0.180928829644719, 0.3188098273155001, 0.10218150719087293, 0.054192796108328944, 0.1013467807856323, 0.330681177884107, 0.20489671783059926, 0.26532776509342415, 0.11766509397803093, 0.19037960567856727, 0.3689376263071368, 0.12757839395067005, 0.15333814936559442, 0.1830513248400938, 0.18722419037989602, 0.12710828666950802, 0.22674744992206075, 0.1359668182008279, 0.19642431248116732, 0.12566502244962285, 0.16170448030082496, 0.1332632491466177, 0.14294653603033258, 0.17438302023090868, 0.22221989658438557, 0.026407564790462468, 0.19734087782912413, 0.13573556587467794, 0.14378222378419925, 0.1320443088625649, 0.17463824386851867, 0.24727213427393713, 0.19832820059185452, 0.12793292371403764, 0.17044512081585816, 0.21218480715107357, 0.09303624462849314, 0.0, 0.0, 0.025200106337400885, 0.0, 0.11025766039414997, 0.041887808810805116, 0.18641910463305522, 0.09507185856596656, 0.13641723296380404, 0.06640570663048218, 0.11575983772708331, 0.06952059568539659, 0.03827749399284697, 0.027373715128895526, 0.32338168146313195, 0.0757873205802918, 0.2385271034955253, 0.0, 0.09472525163805146, 0.10364209951633818, 0.07827108665413618, 0.11215502502158703, 0.1435051642031322, 0.20840118892806692, 0.0, 0.06867508815758228, 0.0011933209992406324, 0.04122264614283444, 0.1171732781139383, 0.2230883899929249, 0.032205224880877514, 0.0111660229145788, 0.02501297351034626, 0.04854884131108228, 0.16785139248401482, 0.33008162377001393, 0.32552421550432076, 0.3153736850862917, 0.4108047488112384, 0.406396666142266, 0.4278286769978391, 0.20133432495448, 0.24575294654140245, 0.38548267517942625, 0.06259330464653123, 0.0885969105488904, 0.04137084325637519, 0.10310001207707387, 0.04438999643441133, 0.0380975204874443, 0.08604561906555142, 0.08429008937213, 0.057206609021662747, 0.1406858557692794, 0.1302750570551705, 0.12746588913470225, 0.11887744768736797, 0.14262173008105306, 0.12701018366257, 0.14459838061965113, 0.12904545576338455, 0.1431322356846031, 0.16609863527686353, 0.18112404087115253, 0.1485890611175007, 0.14933628729424075, 0.17771097136133762, 0.19572961341341077, 0.18576236843853022, 0.171903301942964, 0.18179240356702853, 0.15311115836623757, 0.1702811629573462, 0.16353322521676983, 0.14638918866724693, 0.17983729684386274, 0.15258872158589565, 0.12610687067328996, 0.1444356249553148, 0.10447025772973106, 0.16134147687526312, 0.1695581061220064, 0.1812091024724347, 0.1781655267827702, 0.1493884088978097, 0.17728219516282206, 0.15826912446814734, 0.21042280853264217, 0.172871349043221, 0.23666891076024832, 0.20041830969286734, 0.18467801443941168, 0.1799620557085163, 0.20359018123617778, 0.20137495673199501, 0.2468369381097315, 0.21488007021791566, 0.1813900719859015, 0.1478135031775608, 0.14058351402719804, 0.14427639493333555, 0.15510400645713285, 0.15835838302953764, 0.16831063896613319, 0.14400408361240458, 0.16979957012004454, 0.14968025135226437, 0.14708331243190464, 0.18377864478753492, 0.15013291357969993, 0.13364588722236082, 0.14901310640001397, 0.32380099376750116, 0.18570103673942484, 0.1774764764786083, 0.1819312297919955, 0.1658493916729381, 0.16424920183725444, 0.17995007784705153, 0.1679162776708385, 0.1702130489763285, 0.16467512918615013, 0.16810056815529972, 0.17441993719406423, 0.16957973142741178, 0.04982280707334941, 0.0534006209570318, 0.04147348659257788, 0.04297534402632208, 0.055533029194424155, 0.05801196159075428, 0.046870498768497804, 0.05696447611735944, 0.07085875373564798]}, "mutation_prompt": null}
{"id": "de1b711e-b99d-439b-a076-d287fafdaa29", "solution": "import numpy as np\n\nclass HybridSADEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.temp_initial = 1000\n        self.temp_final = 1\n        self.cooling_rate = 0.95\n        self.pop_size = 10\n\n    def __call__(self, func):\n        # Initialize population\n        population = self.lower_bound + np.random.rand(self.pop_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        evaluations = self.pop_size\n        temperature = self.temp_initial\n        \n        while evaluations < self.budget and temperature > self.temp_final:\n            # Simulated Annealing Step\n            for i in range(self.pop_size):\n                candidate = population[i] + np.random.normal(0, 1, self.dim) * temperature\n                candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n                if candidate_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - candidate_fitness) / temperature):\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n                    if candidate_fitness < best_fitness:\n                        best_solution = candidate\n                        best_fitness = candidate_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            temperature *= self.cooling_rate\n\n            # Differential Evolution Step\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < 0.9\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n        \n        return best_solution, best_fitness", "name": "HybridSADEOptimizer", "description": "A hybrid Simulated Annealing and Differential Evolution algorithm that balances exploration and exploitation to efficiently navigate the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "27b66e79-1179-48e1-9356-608a2c702648", "metadata": {"aucs": [0.523725627282192, 0.3013057787452954, 0.3917739235623503, 0.38115531298700567, 0.3874511216394856, 0.2668481820529137, 0.48140527377450526, 0.2725900615776494, 0.2710078328014368, 0.549171687909886, 0.43346796611667926, 0.04201704111807558, 0.571410383333048, 0.3999442969107082, 0.6425177785905589, 0.0, 0.6447337210855874, 0.6119990233490654, 0.06779301385265424, 0.08111696434031623, 0.09825501665295633, 0.040188290988041664, 0.07061343408850129, 0.06513114859711511, 0.08367820362023615, 0.1118869494794359, 0.04052663093150499, 0.10832462902474693, 0.06362079553994793, 0.1006463160582407, 0.07807932580476407, 0.08535938060599146, 0.0816330022829076, 0.12159295763797873, 0.13212522567773433, 0.07846868040727784, 0.9878721794404575, 0.9972930442757821, 0.9969453634413533, 0.9837268722086955, 0.9928060264535247, 0.9978397295078111, 0.9963639163770864, 0.9963946834208285, 0.998825519794962, 0.180928829644719, 0.3188098273155001, 0.10218150719087293, 0.054192796108328944, 0.1013467807856323, 0.330681177884107, 0.20489671783059926, 0.26532776509342415, 0.11766509397803093, 0.19037960567856727, 0.3689376263071368, 0.12757839395067005, 0.15333814936559442, 0.1830513248400938, 0.18722419037989602, 0.12710828666950802, 0.22674744992206075, 0.1359668182008279, 0.19642431248116732, 0.12566502244962285, 0.16170448030082496, 0.1332632491466177, 0.14294653603033258, 0.17438302023090868, 0.22221989658438557, 0.026407564790462468, 0.19734087782912413, 0.13573556587467794, 0.14378222378419925, 0.1320443088625649, 0.17463824386851867, 0.24727213427393713, 0.19832820059185452, 0.12793292371403764, 0.17044512081585816, 0.21218480715107357, 0.09303624462849314, 0.0, 0.0, 0.025200106337400885, 0.0, 0.11025766039414997, 0.041887808810805116, 0.18641910463305522, 0.09507185856596656, 0.13641723296380404, 0.06640570663048218, 0.11575983772708331, 0.06952059568539659, 0.03827749399284697, 0.027373715128895526, 0.32338168146313195, 0.0757873205802918, 0.2385271034955253, 0.0, 0.09472525163805146, 0.10364209951633818, 0.07827108665413618, 0.11215502502158703, 0.1435051642031322, 0.20840118892806692, 0.0, 0.06867508815758228, 0.0011933209992406324, 0.04122264614283444, 0.1171732781139383, 0.2230883899929249, 0.032205224880877514, 0.0111660229145788, 0.02501297351034626, 0.04854884131108228, 0.16785139248401482, 0.33008162377001393, 0.32552421550432076, 0.3153736850862917, 0.4108047488112384, 0.406396666142266, 0.4278286769978391, 0.20133432495448, 0.24575294654140245, 0.38548267517942625, 0.06259330464653123, 0.0885969105488904, 0.04137084325637519, 0.10310001207707387, 0.04438999643441133, 0.0380975204874443, 0.08604561906555142, 0.08429008937213, 0.057206609021662747, 0.1406858557692794, 0.1302750570551705, 0.12746588913470225, 0.11887744768736797, 0.14262173008105306, 0.12701018366257, 0.14459838061965113, 0.12904545576338455, 0.1431322356846031, 0.16609863527686353, 0.18112404087115253, 0.1485890611175007, 0.14933628729424075, 0.17771097136133762, 0.19572961341341077, 0.18576236843853022, 0.171903301942964, 0.18179240356702853, 0.15311115836623757, 0.1702811629573462, 0.16353322521676983, 0.14638918866724693, 0.17983729684386274, 0.15258872158589565, 0.12610687067328996, 0.1444356249553148, 0.10447025772973106, 0.16134147687526312, 0.1695581061220064, 0.1812091024724347, 0.1781655267827702, 0.1493884088978097, 0.17728219516282206, 0.15826912446814734, 0.21042280853264217, 0.172871349043221, 0.23666891076024832, 0.20041830969286734, 0.18467801443941168, 0.1799620557085163, 0.20359018123617778, 0.20137495673199501, 0.2468369381097315, 0.21488007021791566, 0.1813900719859015, 0.1478135031775608, 0.14058351402719804, 0.14427639493333555, 0.15510400645713285, 0.15835838302953764, 0.16831063896613319, 0.14400408361240458, 0.16979957012004454, 0.14968025135226437, 0.14708331243190464, 0.18377864478753492, 0.15013291357969993, 0.13364588722236082, 0.14901310640001397, 0.32380099376750116, 0.18570103673942484, 0.1774764764786083, 0.1819312297919955, 0.1658493916729381, 0.16424920183725444, 0.17995007784705153, 0.1679162776708385, 0.1702130489763285, 0.16467512918615013, 0.16810056815529972, 0.17441993719406423, 0.16957973142741178, 0.04982280707334941, 0.0534006209570318, 0.04147348659257788, 0.04297534402632208, 0.055533029194424155, 0.05801196159075428, 0.046870498768497804, 0.05696447611735944, 0.07085875373564798]}, "mutation_prompt": null}
