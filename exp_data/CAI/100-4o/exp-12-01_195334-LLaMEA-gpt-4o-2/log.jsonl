{"id": "07023120-713a-40e3-9e4f-b141e79d3f0c", "solution": "import numpy as np\n\nclass APSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.swarm_size = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.vel_max = (self.ub - self.lb) * 0.1\n        self.vel_min = -(self.ub - self.lb) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        swarm_pos = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        swarm_vel = np.random.uniform(self.vel_min, self.vel_max, (self.swarm_size, self.dim))\n        p_best_pos = np.copy(swarm_pos)\n        p_best_val = np.full(self.swarm_size, np.inf)\n        g_best_pos = None\n        g_best_val = np.inf\n\n        evals = 0\n\n        while evals < self.budget:\n            # Evaluate swarm\n            for i in range(self.swarm_size):\n                if evals >= self.budget:\n                    break\n                val = func(swarm_pos[i])\n                evals += 1\n\n                # Update personal best\n                if val < p_best_val[i]:\n                    p_best_val[i] = val\n                    p_best_pos[i] = swarm_pos[i]\n\n                # Update global best\n                if val < g_best_val:\n                    g_best_val = val\n                    g_best_pos = swarm_pos[i]\n\n            # Adaptive inertia weight\n            w = self.w_max - (self.w_max - self.w_min) * evals / self.budget\n\n            # Update velocities and positions\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                swarm_vel[i] = (w * swarm_vel[i] +\n                                self.c1 * r1 * (p_best_pos[i] - swarm_pos[i]) +\n                                self.c2 * r2 * (g_best_pos - swarm_pos[i]))\n\n                # Apply velocity constraints\n                swarm_vel[i] = np.clip(swarm_vel[i], self.vel_min, self.vel_max)\n\n                # Update position\n                swarm_pos[i] += swarm_vel[i]\n\n                # Apply position constraints\n                swarm_pos[i] = np.clip(swarm_pos[i], self.lb, self.ub)\n\n                # Velocity re-initialization to prevent stagnation\n                if np.random.rand() < 0.1:  # 10% chance to reinitialize\n                    swarm_vel[i] = np.random.uniform(self.vel_min, self.vel_max, self.dim)\n\n        return g_best_pos, g_best_val", "name": "APSO", "description": "Adaptive Particle Swarm Optimization (APSO) with Velocity Re-initialization to prevent stagnation and enhance exploration.", "configspace": "", "generation": 0, "fitness": 0.24984356563230714, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.46725645353450096, 0.47974344085195963, 0.48593462459803094, 0.5124965492992692, 0.5567365862405099, 0.4879025723531616, 0.4886988985318792, 0.5196391312305346, 0.4750507776582804, 0.02600795759720076, 0.03185556132951728, 9.999999999998899e-05, 0.008492584424248717, 0.018086767419629668, 0.06251294478232827, 9.999999999998899e-05, 0.014115237104457501, 0.014275491926622252, 0.11200155130348832, 0.13087524813108553, 0.14926007490214543, 0.09972177353779244, 0.0995637859805032, 0.13258237079290924, 0.09457866374725199, 0.10466221129729436, 0.12824582659333827, 0.09774589383349319, 0.07887949307509823, 0.10129102862899331, 0.1026129940558701, 0.09921614181369476, 0.11633704998554184, 0.12013795464966404, 0.1229017212755773, 0.11725739023707649, 0.9671123270666763, 0.9572418607577207, 0.9735150419949711, 0.9646785612551265, 0.9721563554844183, 0.9664860728737121, 0.9594890987750121, 0.9650007123431167, 0.9539653002998001, 0.30482000160415923, 0.3061985851661092, 0.3142505175017549, 0.3194758642657405, 0.32731849785056455, 0.31070595576802573, 0.28202545575021254, 0.3061802177896138, 0.3303946859475986, 0.5247203915374965, 0.5219913884606009, 0.41302624175812597, 0.5713966262218031, 0.58674500733599, 0.266515287431613, 0.44488222197093774, 0.3098636552383274, 0.593192391620456, 0.15215770328053568, 0.12138883828299984, 0.14872501920508507, 0.20010117991540088, 0.17972040938232547, 0.19897597693289515, 0.23396492141052994, 0.15753735308662165, 0.1431006570920308, 0.16457631213290425, 0.18733337482804924, 0.1258106164457229, 0.15931026978060492, 0.1856432268120617, 0.18309074964733696, 0.1425532948745204, 0.10394766987589288, 0.11489800000533668, 0.016138955325635473, 0.028239604662759432, 0.03041116941478228, 0.04608886093424769, 0.038443809601928614, 0.017612766105832622, 0.049299097597087504, 0.01657781404284031, 0.003312847539649555, 0.08649876159850522, 0.06859263394424053, 0.12022451705977144, 0.14224122820219742, 0.02774994003303033, 0.050288004023796073, 0.181616316276076, 0.12134603840458658, 0.11060821914278207, 0.02107714230477631, 0.05005455763452482, 0.00858594396447443, 0.036877396722469924, 0.023824004258322762, 0.0383441484740471, 0.04673830714720484, 0.04254428868737381, 0.018413019738100278, 0.12459005587232985, 0.11785471124999802, 0.07288091358018045, 0.11586839097441448, 0.13441666668657448, 0.13379162345266227, 0.06758327647040874, 0.1073276217023782, 0.12814527745181403, 0.42153359597658835, 0.4221263308029358, 0.4255890440169443, 0.45372480760043976, 0.39214793469802833, 0.40785800745131906, 0.4120609224730981, 0.4121324919519954, 0.42182904788576825, 0.12484666153608304, 0.09609967777211936, 0.1406172582701838, 0.12115767309616188, 0.12083624229568235, 0.14624083390514675, 0.09351546829551094, 0.1294234404030392, 0.1414404299305737, 0.1941554954868372, 0.20901257173617926, 0.2559913652665391, 0.161555004545757, 0.2787865022802032, 0.2835033731315568, 0.26477870547713567, 0.2590920577640876, 0.3127775329994037, 0.28833788659403103, 0.27713766386783956, 0.3064049976959131, 0.3060163302991158, 0.22802065056462562, 0.2985793498441498, 0.23010012618880626, 0.3140529797216204, 0.3025192477290488, 0.22951489891141585, 0.268996594371112, 0.23590526703845427, 0.2657108289417408, 0.19309358735402782, 0.24329452218019565, 0.2337616439647794, 0.2562034992237372, 0.21824421118935078, 0.2153108922447824, 0.24180930187588578, 0.18644777454643469, 0.227484929364557, 0.2251947732081815, 0.2420179613868274, 0.24039892010356456, 0.20344995609485572, 0.21938016669703364, 0.18506013580029457, 0.21383480214701545, 0.18818232420259762, 0.22003950535553685, 0.19302580598161556, 0.1821080817152675, 0.23101528263848936, 0.2149740440300849, 0.1996225732596426, 0.6702681551695822, 0.12540315276737524, 0.18580743296727498, 0.17293741122139095, 0.20072054116924032, 0.7222261752902819, 0.65568174715035, 0.7110927638892821, 0.6880274735895049, 0.4819251063180865, 0.15664808194778512, 0.5838490794182741, 0.6157444067312697, 0.15235536621793233, 0.21192198077995117, 0.5592972404350058, 0.6170976820993537, 0.500499798457327, 0.2013900579527672, 0.19138578681856477, 0.1854818265483127, 0.18038303362394914, 0.18999369544414835, 0.1898828006653459, 0.20335246730153722, 0.17652893389358992, 0.188275560810918, 0.09561065627964449, 0.08844502296149626, 0.08246526423076261, 0.08976470335350628, 0.0854888650557859, 0.09160360931560463, 0.13061314490397236, 0.0908869785817924, 0.14780159977013185]}, "mutation_prompt": null}
{"id": "760f1630-2e71-4fde-a740-f1a24596bac8", "solution": "import numpy as np\n\nclass APSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.swarm_size = 30\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.vel_max = (self.ub - self.lb) * 0.1\n        self.vel_min = -(self.ub - self.lb) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        swarm_pos = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        swarm_vel = np.random.uniform(self.vel_min, self.vel_max, (self.swarm_size, self.dim))\n        p_best_pos = np.copy(swarm_pos)\n        p_best_val = np.full(self.swarm_size, np.inf)\n        g_best_pos = None\n        g_best_val = np.inf\n\n        evals = 0\n\n        while evals < self.budget:\n            # Evaluate swarm\n            for i in range(self.swarm_size):\n                if evals >= self.budget:\n                    break\n                val = func(swarm_pos[i])\n                evals += 1\n\n                # Update personal best\n                if val < p_best_val[i]:\n                    p_best_val[i] = val\n                    p_best_pos[i] = swarm_pos[i]\n\n                # Update global best\n                if val < g_best_val:\n                    g_best_val = val\n                    g_best_pos = swarm_pos[i]\n\n            # Adaptive inertia weight\n            w = self.w_max - (self.w_max - self.w_min) * evals / self.budget\n\n            # Update velocities and positions\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                swarm_vel[i] = (w * swarm_vel[i] +\n                                self.c1 * r1 * (p_best_pos[i] - swarm_pos[i]) +\n                                self.c2 * r2 * (g_best_pos - swarm_pos[i]))\n\n                # Apply velocity constraints\n                swarm_vel[i] = np.clip(swarm_vel[i], self.vel_min, self.vel_max)\n\n                # Update position\n                swarm_pos[i] += swarm_vel[i]\n\n                # Apply position constraints\n                swarm_pos[i] = np.clip(swarm_pos[i], self.lb, self.ub)\n\n                # Velocity re-initialization to prevent stagnation\n                if np.random.rand() < 0.1:  # 10% chance to reinitialize\n                    swarm_vel[i] = np.random.uniform(self.vel_min, self.vel_max, self.dim)\n\n        return g_best_pos, g_best_val", "name": "APSO", "description": "Adaptive Particle Swarm Optimization (APSO) with Velocity Re-initialization to prevent stagnation and enhance exploration.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "07023120-713a-40e3-9e4f-b141e79d3f0c", "metadata": {"aucs": [0.46725645353450096, 0.47974344085195963, 0.48593462459803094, 0.5124965492992692, 0.5567365862405099, 0.4879025723531616, 0.4886988985318792, 0.5196391312305346, 0.4750507776582804, 0.02600795759720076, 0.03185556132951728, 9.999999999998899e-05, 0.008492584424248717, 0.018086767419629668, 0.06251294478232827, 9.999999999998899e-05, 0.014115237104457501, 0.014275491926622252, 0.11200155130348832, 0.13087524813108553, 0.14926007490214543, 0.09972177353779244, 0.0995637859805032, 0.13258237079290924, 0.09457866374725199, 0.10466221129729436, 0.12824582659333827, 0.09774589383349319, 0.07887949307509823, 0.10129102862899331, 0.1026129940558701, 0.09921614181369476, 0.11633704998554184, 0.12013795464966404, 0.1229017212755773, 0.11725739023707649, 0.9671123270666763, 0.9572418607577207, 0.9735150419949711, 0.9646785612551265, 0.9721563554844183, 0.9664860728737121, 0.9594890987750121, 0.9650007123431167, 0.9539653002998001, 0.30482000160415923, 0.3061985851661092, 0.3142505175017549, 0.3194758642657405, 0.32731849785056455, 0.31070595576802573, 0.28202545575021254, 0.3061802177896138, 0.3303946859475986, 0.5247203915374965, 0.5219913884606009, 0.41302624175812597, 0.5713966262218031, 0.58674500733599, 0.266515287431613, 0.44488222197093774, 0.3098636552383274, 0.593192391620456, 0.15215770328053568, 0.12138883828299984, 0.14872501920508507, 0.20010117991540088, 0.17972040938232547, 0.19897597693289515, 0.23396492141052994, 0.15753735308662165, 0.1431006570920308, 0.16457631213290425, 0.18733337482804924, 0.1258106164457229, 0.15931026978060492, 0.1856432268120617, 0.18309074964733696, 0.1425532948745204, 0.10394766987589288, 0.11489800000533668, 0.016138955325635473, 0.028239604662759432, 0.03041116941478228, 0.04608886093424769, 0.038443809601928614, 0.017612766105832622, 0.049299097597087504, 0.01657781404284031, 0.003312847539649555, 0.08649876159850522, 0.06859263394424053, 0.12022451705977144, 0.14224122820219742, 0.02774994003303033, 0.050288004023796073, 0.181616316276076, 0.12134603840458658, 0.11060821914278207, 0.02107714230477631, 0.05005455763452482, 0.00858594396447443, 0.036877396722469924, 0.023824004258322762, 0.0383441484740471, 0.04673830714720484, 0.04254428868737381, 0.018413019738100278, 0.12459005587232985, 0.11785471124999802, 0.07288091358018045, 0.11586839097441448, 0.13441666668657448, 0.13379162345266227, 0.06758327647040874, 0.1073276217023782, 0.12814527745181403, 0.42153359597658835, 0.4221263308029358, 0.4255890440169443, 0.45372480760043976, 0.39214793469802833, 0.40785800745131906, 0.4120609224730981, 0.4121324919519954, 0.42182904788576825, 0.12484666153608304, 0.09609967777211936, 0.1406172582701838, 0.12115767309616188, 0.12083624229568235, 0.14624083390514675, 0.09351546829551094, 0.1294234404030392, 0.1414404299305737, 0.1941554954868372, 0.20901257173617926, 0.2559913652665391, 0.161555004545757, 0.2787865022802032, 0.2835033731315568, 0.26477870547713567, 0.2590920577640876, 0.3127775329994037, 0.28833788659403103, 0.27713766386783956, 0.3064049976959131, 0.3060163302991158, 0.22802065056462562, 0.2985793498441498, 0.23010012618880626, 0.3140529797216204, 0.3025192477290488, 0.22951489891141585, 0.268996594371112, 0.23590526703845427, 0.2657108289417408, 0.19309358735402782, 0.24329452218019565, 0.2337616439647794, 0.2562034992237372, 0.21824421118935078, 0.2153108922447824, 0.24180930187588578, 0.18644777454643469, 0.227484929364557, 0.2251947732081815, 0.2420179613868274, 0.24039892010356456, 0.20344995609485572, 0.21938016669703364, 0.18506013580029457, 0.21383480214701545, 0.18818232420259762, 0.22003950535553685, 0.19302580598161556, 0.1821080817152675, 0.23101528263848936, 0.2149740440300849, 0.1996225732596426, 0.6702681551695822, 0.12540315276737524, 0.18580743296727498, 0.17293741122139095, 0.20072054116924032, 0.7222261752902819, 0.65568174715035, 0.7110927638892821, 0.6880274735895049, 0.4819251063180865, 0.15664808194778512, 0.5838490794182741, 0.6157444067312697, 0.15235536621793233, 0.21192198077995117, 0.5592972404350058, 0.6170976820993537, 0.500499798457327, 0.2013900579527672, 0.19138578681856477, 0.1854818265483127, 0.18038303362394914, 0.18999369544414835, 0.1898828006653459, 0.20335246730153722, 0.17652893389358992, 0.188275560810918, 0.09561065627964449, 0.08844502296149626, 0.08246526423076261, 0.08976470335350628, 0.0854888650557859, 0.09160360931560463, 0.13061314490397236, 0.0908869785817924, 0.14780159977013185]}, "mutation_prompt": null}
