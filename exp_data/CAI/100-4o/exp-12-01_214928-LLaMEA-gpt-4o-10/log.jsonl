{"id": "48d43a87-64ed-4dfc-a988-4e78e057d705", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(1.5 * dim)  # typically a larger population for DE\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.temp = 100.0  # initial temperature for SA\n        self.cooling_rate = 0.99\n        self.evals = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        self.evals += self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx].copy()\n        best_fitness = fitness[best_idx]\n\n        while self.evals < self.budget:\n            for i in range(self.population_size):\n                # Differential evolution mutation\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover = np.random.rand(self.dim) < self.crossover_probability\n                trial = np.where(crossover, mutant, population[i])\n\n                # Simulated annealing acceptance\n                trial_fitness = func(trial)\n                self.evals += 1\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / self.temp):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Update best solution\n                if trial_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = trial_fitness\n\n            # Cooling schedule\n            self.temp *= self.cooling_rate\n\n        return best_solution, best_fitness", "name": "HybridDE_SA", "description": "A hybrid differential evolution and simulated annealing algorithm using adaptive strategies to balance exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.19958959185716799, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.14165641122095018, 0.24886916949672944, 0.2477861051592144, 0.26157003753158603, 0.2462168890923292, 0.19286832403889198, 0.23885258628272732, 0.17143369105637962, 0.18702978114281033, 0.2214144325219024, 0.23728886495773227, 0.2275272159600854, 0.21975757329849332, 0.21349127742285168, 0.22552424783950709, 0.22338126884186182, 0.21138753848853642, 0.24220037564466967, 0.1103389898175332, 0.09696006217324826, 0.1226482699092396, 0.1019128177130697, 0.14209920039268253, 0.12304628006293206, 0.15964077092586682, 0.1190692540850492, 0.1350896402945415, 0.09154755189481967, 0.100513843786178, 0.10176139662213868, 0.10178920579686679, 0.10383640376457859, 0.092738006305502, 0.1064561037322388, 0.09155496140898978, 0.10591206658548258, 0.9765507771959787, 0.9271913635679884, 0.9889618105459399, 0.9845117162363013, 0.95153957042715, 0.896229905730101, 0.9069725054948311, 0.9780355934995207, 0.8749546906417841, 0.1912862735294728, 0.18070770750372545, 0.05745254904442698, 0.18021399472577648, 0.18761360264865834, 0.1945385828616093, 0.18695751154287543, 0.18672019395760886, 0.17621249700330988, 0.2379168445381491, 0.21864091070183345, 0.22842160692378355, 0.23176476961025394, 0.22863144416779202, 0.3315026094658938, 0.23171315507172086, 0.12991529876601438, 0.21971681896779882, 0.17827629479024887, 0.16761800220917522, 0.16682561252764827, 0.18647317479323144, 0.18457408060162828, 0.1743709141494315, 0.1807947895823454, 0.16364498721819387, 0.16398220536310915, 0.1721067563747487, 0.22086491104675532, 0.20589172667663203, 0.1574902076711605, 0.17049336193389952, 0.18036701576919334, 0.16921349255048612, 0.19282194100105676, 0.18073473765343118, 0.1977267221101301, 0.2096689854284508, 0.21772618000465238, 0.1959971610967366, 0.21279807782816307, 0.1971521689563921, 0.2208462358952742, 0.22775566919858525, 0.23610980712032736, 0.2271440866963873, 0.22421316830349436, 0.251732180400449, 0.22962134000822443, 0.2200690088272379, 0.21026515865138617, 0.22193778306076817, 0.22492386773452921, 0.21520566312951783, 0.16697953366147922, 0.09398888780134607, 0.10104689575500703, 0.1949729834418552, 0.17562638633310634, 0.1918852386373724, 0.14360065077364803, 0.18057240428102284, 0.14727100490626366, 0.1401834704687912, 0.03658115797128536, 0.1482222906451901, 0.14290625948585822, 0.13695401855468536, 0.1346688170026662, 0.14490260068379524, 0.13433349781059334, 0.15206808741103683, 0.2400105989993947, 0.1902988671564525, 0.173778946999121, 0.18949930818233984, 0.21919614554735012, 0.23958409643100909, 0.22528174710066207, 0.13904645567278406, 0.13857338050900692, 0.08368790292701522, 0.09014214513490149, 0.08650049259545667, 0.07989046731805372, 0.08051822219541194, 0.09798645801246952, 0.10162766483558039, 0.09018582192581959, 0.08728235266392437, 0.13695902002869242, 0.14132189227825398, 0.2185500219738591, 0.16232338359153686, 0.1665425085902147, 0.16309144822026478, 0.15763269480190045, 0.11316734130674411, 0.23053875605763274, 0.18696518867170142, 0.17658355999885444, 0.1865043444344997, 0.16502588829277642, 0.17955984995870644, 0.17813457484565165, 0.18863678868126255, 0.19581112223487906, 0.19035583161042147, 0.1647486573701844, 0.14698741923951508, 0.17058117284444507, 0.08078857585160659, 0.15115050306626676, 0.16080715267487355, 0.15708519143573163, 0.15804680983061392, 0.1603426412991037, 0.1800170539680752, 0.17216193116925538, 0.1642511822373377, 0.1923541989694857, 0.1889238371988875, 0.16335975848312645, 0.17892575792433285, 0.1800229204932693, 0.17229005885677107, 0.18275570380652717, 0.1769077136424939, 0.1802089297721936, 0.17719242225647847, 0.18068814546847822, 0.1818252794152948, 0.1782069841705295, 0.22001723402673035, 0.17165715429063744, 0.10964927236701405, 0.16462313715224242, 0.20444961763672875, 0.17256080075581537, 0.14542805773819378, 0.16308312628841415, 0.136448299503528, 0.1601086288521668, 0.169259494220242, 0.15955020467638825, 0.1318328949119021, 0.147429706619838, 0.20130226480339442, 0.1465425043849018, 0.07558455723709134, 0.13118606154628265, 0.1893881472342236, 0.18027495114485415, 0.19138956042668487, 0.19632658122972246, 0.18147245428876058, 0.17348994473703938, 0.1828295000884771, 0.1676036624978653, 0.18232157891361245, 0.20679432095925188, 0.17463729696086705, 0.06446744422642914, 0.07079416255017623, 0.0671492093448367, 0.06853532571623833, 0.06366887665293375, 0.07330086034930772, 0.06471544917755345, 0.06768498483915175, 0.06812263994270784]}, "mutation_prompt": null}
{"id": "e1f59995-79eb-4588-8a0a-5da362e91fad", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(1.5 * dim)  # typically a larger population for DE\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.temp = 100.0  # initial temperature for SA\n        self.cooling_rate = 0.99\n        self.evals = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        self.evals += self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx].copy()\n        best_fitness = fitness[best_idx]\n\n        while self.evals < self.budget:\n            for i in range(self.population_size):\n                # Differential evolution mutation\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover = np.random.rand(self.dim) < self.crossover_probability\n                trial = np.where(crossover, mutant, population[i])\n\n                # Simulated annealing acceptance\n                trial_fitness = func(trial)\n                self.evals += 1\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / self.temp):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Update best solution\n                if trial_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = trial_fitness\n\n            # Cooling schedule\n            self.temp *= self.cooling_rate\n\n        return best_solution, best_fitness", "name": "HybridDE_SA", "description": "A hybrid differential evolution and simulated annealing algorithm using adaptive strategies to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "48d43a87-64ed-4dfc-a988-4e78e057d705", "metadata": {"aucs": [0.14165641122095018, 0.24886916949672944, 0.2477861051592144, 0.26157003753158603, 0.2462168890923292, 0.19286832403889198, 0.23885258628272732, 0.17143369105637962, 0.18702978114281033, 0.2214144325219024, 0.23728886495773227, 0.2275272159600854, 0.21975757329849332, 0.21349127742285168, 0.22552424783950709, 0.22338126884186182, 0.21138753848853642, 0.24220037564466967, 0.1103389898175332, 0.09696006217324826, 0.1226482699092396, 0.1019128177130697, 0.14209920039268253, 0.12304628006293206, 0.15964077092586682, 0.1190692540850492, 0.1350896402945415, 0.09154755189481967, 0.100513843786178, 0.10176139662213868, 0.10178920579686679, 0.10383640376457859, 0.092738006305502, 0.1064561037322388, 0.09155496140898978, 0.10591206658548258, 0.9765507771959787, 0.9271913635679884, 0.9889618105459399, 0.9845117162363013, 0.95153957042715, 0.896229905730101, 0.9069725054948311, 0.9780355934995207, 0.8749546906417841, 0.1912862735294728, 0.18070770750372545, 0.05745254904442698, 0.18021399472577648, 0.18761360264865834, 0.1945385828616093, 0.18695751154287543, 0.18672019395760886, 0.17621249700330988, 0.2379168445381491, 0.21864091070183345, 0.22842160692378355, 0.23176476961025394, 0.22863144416779202, 0.3315026094658938, 0.23171315507172086, 0.12991529876601438, 0.21971681896779882, 0.17827629479024887, 0.16761800220917522, 0.16682561252764827, 0.18647317479323144, 0.18457408060162828, 0.1743709141494315, 0.1807947895823454, 0.16364498721819387, 0.16398220536310915, 0.1721067563747487, 0.22086491104675532, 0.20589172667663203, 0.1574902076711605, 0.17049336193389952, 0.18036701576919334, 0.16921349255048612, 0.19282194100105676, 0.18073473765343118, 0.1977267221101301, 0.2096689854284508, 0.21772618000465238, 0.1959971610967366, 0.21279807782816307, 0.1971521689563921, 0.2208462358952742, 0.22775566919858525, 0.23610980712032736, 0.2271440866963873, 0.22421316830349436, 0.251732180400449, 0.22962134000822443, 0.2200690088272379, 0.21026515865138617, 0.22193778306076817, 0.22492386773452921, 0.21520566312951783, 0.16697953366147922, 0.09398888780134607, 0.10104689575500703, 0.1949729834418552, 0.17562638633310634, 0.1918852386373724, 0.14360065077364803, 0.18057240428102284, 0.14727100490626366, 0.1401834704687912, 0.03658115797128536, 0.1482222906451901, 0.14290625948585822, 0.13695401855468536, 0.1346688170026662, 0.14490260068379524, 0.13433349781059334, 0.15206808741103683, 0.2400105989993947, 0.1902988671564525, 0.173778946999121, 0.18949930818233984, 0.21919614554735012, 0.23958409643100909, 0.22528174710066207, 0.13904645567278406, 0.13857338050900692, 0.08368790292701522, 0.09014214513490149, 0.08650049259545667, 0.07989046731805372, 0.08051822219541194, 0.09798645801246952, 0.10162766483558039, 0.09018582192581959, 0.08728235266392437, 0.13695902002869242, 0.14132189227825398, 0.2185500219738591, 0.16232338359153686, 0.1665425085902147, 0.16309144822026478, 0.15763269480190045, 0.11316734130674411, 0.23053875605763274, 0.18696518867170142, 0.17658355999885444, 0.1865043444344997, 0.16502588829277642, 0.17955984995870644, 0.17813457484565165, 0.18863678868126255, 0.19581112223487906, 0.19035583161042147, 0.1647486573701844, 0.14698741923951508, 0.17058117284444507, 0.08078857585160659, 0.15115050306626676, 0.16080715267487355, 0.15708519143573163, 0.15804680983061392, 0.1603426412991037, 0.1800170539680752, 0.17216193116925538, 0.1642511822373377, 0.1923541989694857, 0.1889238371988875, 0.16335975848312645, 0.17892575792433285, 0.1800229204932693, 0.17229005885677107, 0.18275570380652717, 0.1769077136424939, 0.1802089297721936, 0.17719242225647847, 0.18068814546847822, 0.1818252794152948, 0.1782069841705295, 0.22001723402673035, 0.17165715429063744, 0.10964927236701405, 0.16462313715224242, 0.20444961763672875, 0.17256080075581537, 0.14542805773819378, 0.16308312628841415, 0.136448299503528, 0.1601086288521668, 0.169259494220242, 0.15955020467638825, 0.1318328949119021, 0.147429706619838, 0.20130226480339442, 0.1465425043849018, 0.07558455723709134, 0.13118606154628265, 0.1893881472342236, 0.18027495114485415, 0.19138956042668487, 0.19632658122972246, 0.18147245428876058, 0.17348994473703938, 0.1828295000884771, 0.1676036624978653, 0.18232157891361245, 0.20679432095925188, 0.17463729696086705, 0.06446744422642914, 0.07079416255017623, 0.0671492093448367, 0.06853532571623833, 0.06366887665293375, 0.07330086034930772, 0.06471544917755345, 0.06768498483915175, 0.06812263994270784]}, "mutation_prompt": null}
