{"id": "578131ac-aec4-49dc-84bf-e3364ba10286", "solution": "import numpy as np\n\nclass HybridDEAGM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.population])\n        evaluations += self.pop_size\n        \n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[idxs]\n                mutant = np.clip(a + self.mutation_factor * (b - c), -5, 5)\n\n                # Crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(crossover):\n                    crossover[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover, mutant, self.population[i])\n\n                # Fitness Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    self.population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive Gaussian Mutation\n                if np.random.rand() < 0.1:\n                    std_dev = 0.1 * (evaluations / self.budget)\n                    gaussian_mutant = np.clip(trial + np.random.normal(0, std_dev, self.dim), -5, 5)\n                    gm_fitness = func(gaussian_mutant)\n                    evaluations += 1\n                    if gm_fitness < fitness[i]:\n                        self.population[i] = gaussian_mutant\n                        fitness[i] = gm_fitness\n\n            # Update best solution\n            best_idx = np.argmin(fitness)\n            if fitness[best_idx] < self.best_value:\n                self.best_value = fitness[best_idx]\n                self.best_solution = self.population[best_idx]\n\n        return self.best_solution", "name": "HybridDEAGM", "description": "A hybrid optimization algorithm combining Differential Evolution and Adaptive Gaussian Mutation for robustly exploring and exploiting the search space.", "configspace": "", "generation": 0, "fitness": 0.25253830035629793, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.5651058518215799, 0.5700318998930358, 0.5836997962254068, 0.5993260146890338, 0.5820346096500633, 0.6414442349870735, 0.590931928350044, 0.6153117704961364, 0.5847315703885864, 0.3552723710590239, 0.3604325080171401, 0.32018789311251306, 0.32673209022459304, 0.33435804651379497, 0.3054990108850393, 0.34212684586160835, 0.34548040243918554, 0.39701221464611947, 0.09448566932349545, 0.10954181235105498, 0.11546089963577433, 0.09717531805182245, 0.09536313666875962, 0.08914337623796587, 0.09155175914628488, 0.0963947753152985, 0.09070445441024022, 0.09477115614850062, 0.0873486747576282, 0.08983816601246031, 0.07722076546583434, 0.0818819771000624, 0.08349344956696969, 0.09039006683825845, 0.07921938701755915, 0.08877570899821441, 0.9570865241619989, 0.9425510554784211, 0.9081445175072701, 0.9394956441688608, 0.9342957577230975, 0.9260755731507156, 0.9520794009617202, 0.9619737061805549, 0.9680913382592333, 0.2659356318147269, 0.24479382557019758, 0.25239842857053074, 0.25698307629705, 0.24717949775510428, 0.2743739265790419, 0.2942840162297975, 0.2533767165729971, 0.2975305875562253, 0.4629710223933191, 0.41282710778897425, 0.3187601793573397, 0.4899304394888997, 0.5209582410501379, 0.5398039572620439, 0.551962252665213, 0.501216548722795, 0.530117996259465, 0.2064807794824074, 0.15931247738802945, 0.16127762296661952, 0.18675381049033712, 0.17848818980100756, 0.16781015328440918, 0.18775876457427854, 0.17295855150230333, 0.1537030949233016, 0.1335371587135804, 0.1376589915517128, 0.23524413845347203, 0.1876667596116054, 0.16346020863981703, 0.17464633001767538, 0.15060911662844623, 0.13522137253842337, 0.16888707938876746, 0.1275618379344411, 0.10356064371440188, 0.07790199071854786, 0.10192110479727812, 0.1005085593124615, 0.09839484726394443, 0.09825935712898826, 0.09481186935805141, 0.08618055498452981, 0.25787403447909096, 0.252644342760435, 0.228509332331562, 0.21674348321349102, 0.1969704456998561, 0.19419423635974875, 0.24563644708438437, 0.26266633856978383, 0.2608285240313394, 0.03630856448424635, 0.01735771859515156, 0.011654811014201405, 0.0015220187859078527, 0.019533349148902923, 0.009990532764685311, 0.04604812868597874, 0.050862179471619084, 0.012705615486132915, 0.14606866384995232, 0.13254652620949114, 0.13047999656043108, 0.14248686357764495, 0.15934548473540744, 0.13339811385024603, 0.14069372540819225, 0.14624487665213182, 0.1457975572711524, 0.4482965944143126, 0.4511550692371826, 0.45122956253907787, 0.45049562012364364, 0.45128324340671366, 0.4587360937528514, 0.4729780168537633, 0.4351129077400214, 0.4672692680017647, 0.07287315682598405, 0.08416034842554254, 0.07572036869353704, 0.08040320744953211, 0.08349710152834777, 0.0876865569425388, 0.09154080981154744, 0.08439458362327679, 0.0879807067213062, 0.15042783783321634, 0.13044842107830423, 0.25548737409409594, 0.13423415914279868, 0.13726629266830181, 0.17764785824662244, 0.1511177216144286, 0.11583132483334813, 0.15194234882024305, 0.25889013635623237, 0.2585111761237242, 0.25650442043028765, 0.26480010013501554, 0.2287628784112511, 0.24936898934408036, 0.2700129601182304, 0.2781750688147132, 0.27604047924248065, 0.19699622365059555, 0.193969550092275, 0.20746349630570926, 0.18496681583810637, 0.17263486904329606, 0.19455942225548584, 0.1948141367439522, 0.20158761241040135, 0.19431167246238001, 0.17340581302338853, 0.17764489389875837, 0.19703013029107308, 0.1754248123916865, 0.18885065994036787, 0.1849757577727984, 0.18321808063449074, 0.1950855263706135, 0.17297308815180734, 0.17723097378666441, 0.1721505237784169, 0.17724317183843463, 0.1781031387181713, 0.1723652598770251, 0.1740284675292556, 0.17783177417938079, 0.17279202914947822, 0.173182970687775, 0.5215064199892875, 0.43671659357043113, 0.5326267612518619, 0.44591254919908696, 0.40530399480302026, 0.3758456157121193, 0.18349430288760527, 0.32292347455813675, 0.46344642418442006, 0.1414930326558479, 0.49034037045960566, 0.1960455076208747, 0.18243604051308748, 0.18545468358675787, 0.42194035004530006, 0.1424173150871979, 0.20378241325126278, 0.20667800634861633, 0.1804267910338403, 0.18260195236064203, 0.18318447976444985, 0.19093731290514393, 0.18085930008468376, 0.20131543529055274, 0.17730927503336336, 0.17961647655284285, 0.1921539511218031, 0.06937169648133967, 0.06818406021378065, 0.0735417888928892, 0.08260010456365252, 0.0794412684465109, 0.06761443930823152, 0.06742250162777341, 0.07024953511872734, 0.07059116013360067]}, "mutation_prompt": null}
{"id": "6c00931d-928c-4f7a-bb6a-31aadae01be4", "solution": "import numpy as np\n\nclass HybridDEAGM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.population = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n\n    def __call__(self, func):\n        evaluations = 0\n        fitness = np.array([func(ind) for ind in self.population])\n        evaluations += self.pop_size\n        \n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[idxs]\n                mutant = np.clip(a + self.mutation_factor * (b - c), -5, 5)\n\n                # Crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(crossover):\n                    crossover[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover, mutant, self.population[i])\n\n                # Fitness Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    self.population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive Gaussian Mutation\n                if np.random.rand() < 0.1:\n                    std_dev = 0.1 * (evaluations / self.budget)\n                    gaussian_mutant = np.clip(trial + np.random.normal(0, std_dev, self.dim), -5, 5)\n                    gm_fitness = func(gaussian_mutant)\n                    evaluations += 1\n                    if gm_fitness < fitness[i]:\n                        self.population[i] = gaussian_mutant\n                        fitness[i] = gm_fitness\n\n            # Update best solution\n            best_idx = np.argmin(fitness)\n            if fitness[best_idx] < self.best_value:\n                self.best_value = fitness[best_idx]\n                self.best_solution = self.population[best_idx]\n\n        return self.best_solution", "name": "HybridDEAGM", "description": "A hybrid optimization algorithm combining Differential Evolution and Adaptive Gaussian Mutation for robustly exploring and exploiting the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "578131ac-aec4-49dc-84bf-e3364ba10286", "metadata": {"aucs": [0.5651058518215799, 0.5700318998930358, 0.5836997962254068, 0.5993260146890338, 0.5820346096500633, 0.6414442349870735, 0.590931928350044, 0.6153117704961364, 0.5847315703885864, 0.3552723710590239, 0.3604325080171401, 0.32018789311251306, 0.32673209022459304, 0.33435804651379497, 0.3054990108850393, 0.34212684586160835, 0.34548040243918554, 0.39701221464611947, 0.09448566932349545, 0.10954181235105498, 0.11546089963577433, 0.09717531805182245, 0.09536313666875962, 0.08914337623796587, 0.09155175914628488, 0.0963947753152985, 0.09070445441024022, 0.09477115614850062, 0.0873486747576282, 0.08983816601246031, 0.07722076546583434, 0.0818819771000624, 0.08349344956696969, 0.09039006683825845, 0.07921938701755915, 0.08877570899821441, 0.9570865241619989, 0.9425510554784211, 0.9081445175072701, 0.9394956441688608, 0.9342957577230975, 0.9260755731507156, 0.9520794009617202, 0.9619737061805549, 0.9680913382592333, 0.2659356318147269, 0.24479382557019758, 0.25239842857053074, 0.25698307629705, 0.24717949775510428, 0.2743739265790419, 0.2942840162297975, 0.2533767165729971, 0.2975305875562253, 0.4629710223933191, 0.41282710778897425, 0.3187601793573397, 0.4899304394888997, 0.5209582410501379, 0.5398039572620439, 0.551962252665213, 0.501216548722795, 0.530117996259465, 0.2064807794824074, 0.15931247738802945, 0.16127762296661952, 0.18675381049033712, 0.17848818980100756, 0.16781015328440918, 0.18775876457427854, 0.17295855150230333, 0.1537030949233016, 0.1335371587135804, 0.1376589915517128, 0.23524413845347203, 0.1876667596116054, 0.16346020863981703, 0.17464633001767538, 0.15060911662844623, 0.13522137253842337, 0.16888707938876746, 0.1275618379344411, 0.10356064371440188, 0.07790199071854786, 0.10192110479727812, 0.1005085593124615, 0.09839484726394443, 0.09825935712898826, 0.09481186935805141, 0.08618055498452981, 0.25787403447909096, 0.252644342760435, 0.228509332331562, 0.21674348321349102, 0.1969704456998561, 0.19419423635974875, 0.24563644708438437, 0.26266633856978383, 0.2608285240313394, 0.03630856448424635, 0.01735771859515156, 0.011654811014201405, 0.0015220187859078527, 0.019533349148902923, 0.009990532764685311, 0.04604812868597874, 0.050862179471619084, 0.012705615486132915, 0.14606866384995232, 0.13254652620949114, 0.13047999656043108, 0.14248686357764495, 0.15934548473540744, 0.13339811385024603, 0.14069372540819225, 0.14624487665213182, 0.1457975572711524, 0.4482965944143126, 0.4511550692371826, 0.45122956253907787, 0.45049562012364364, 0.45128324340671366, 0.4587360937528514, 0.4729780168537633, 0.4351129077400214, 0.4672692680017647, 0.07287315682598405, 0.08416034842554254, 0.07572036869353704, 0.08040320744953211, 0.08349710152834777, 0.0876865569425388, 0.09154080981154744, 0.08439458362327679, 0.0879807067213062, 0.15042783783321634, 0.13044842107830423, 0.25548737409409594, 0.13423415914279868, 0.13726629266830181, 0.17764785824662244, 0.1511177216144286, 0.11583132483334813, 0.15194234882024305, 0.25889013635623237, 0.2585111761237242, 0.25650442043028765, 0.26480010013501554, 0.2287628784112511, 0.24936898934408036, 0.2700129601182304, 0.2781750688147132, 0.27604047924248065, 0.19699622365059555, 0.193969550092275, 0.20746349630570926, 0.18496681583810637, 0.17263486904329606, 0.19455942225548584, 0.1948141367439522, 0.20158761241040135, 0.19431167246238001, 0.17340581302338853, 0.17764489389875837, 0.19703013029107308, 0.1754248123916865, 0.18885065994036787, 0.1849757577727984, 0.18321808063449074, 0.1950855263706135, 0.17297308815180734, 0.17723097378666441, 0.1721505237784169, 0.17724317183843463, 0.1781031387181713, 0.1723652598770251, 0.1740284675292556, 0.17783177417938079, 0.17279202914947822, 0.173182970687775, 0.5215064199892875, 0.43671659357043113, 0.5326267612518619, 0.44591254919908696, 0.40530399480302026, 0.3758456157121193, 0.18349430288760527, 0.32292347455813675, 0.46344642418442006, 0.1414930326558479, 0.49034037045960566, 0.1960455076208747, 0.18243604051308748, 0.18545468358675787, 0.42194035004530006, 0.1424173150871979, 0.20378241325126278, 0.20667800634861633, 0.1804267910338403, 0.18260195236064203, 0.18318447976444985, 0.19093731290514393, 0.18085930008468376, 0.20131543529055274, 0.17730927503336336, 0.17961647655284285, 0.1921539511218031, 0.06937169648133967, 0.06818406021378065, 0.0735417888928892, 0.08260010456365252, 0.0794412684465109, 0.06761443930823152, 0.06742250162777341, 0.07024953511872734, 0.07059116013360067]}, "mutation_prompt": null}
