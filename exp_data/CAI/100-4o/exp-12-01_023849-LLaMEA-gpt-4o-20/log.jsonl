{"id": "19c2b4b9-c2cb-4579-8349-901d372fe314", "solution": "import numpy as np\n\nclass HybridParticleEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.mutation_factor = 0.5\n        self.crossover_rate = 0.7\n        self.inertia_weight = 0.7\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n\n    def __call__(self, func):\n        np.random.seed(42)\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_values = np.array([func(p) for p in particles])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        \n        # Initialize evolutionary strategy\n        generation = 0\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            new_particles = np.copy(particles)\n            for i in range(self.population_size):\n                # DE mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = particles[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                \n                # DE crossover\n                trial_vector = np.copy(particles[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial_vector[j] = mutant_vector[j]\n\n                # PSO update\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i] +\n                                self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i]) +\n                                self.social_coef * r2 * (global_best_position - particles[i]))\n                new_particles[i] = np.clip(trial_vector + velocities[i], self.lower_bound, self.upper_bound)\n\n            # Evaluate new particles\n            new_particle_values = np.array([func(p) for p in new_particles])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if new_particle_values[i] < personal_best_values[i]:\n                    personal_best_values[i] = new_particle_values[i]\n                    personal_best_positions[i] = new_particles[i]\n            if np.min(new_particle_values) < np.min(personal_best_values):\n                global_best_position = new_particles[np.argmin(new_particle_values)]\n\n            # Update particles\n            particles = new_particles\n            generation += 1\n\n        return global_best_position", "name": "HybridParticleEvolution", "description": "Hybrid Particle-Evolution Strategy with Adaptive Scaling for efficient exploration and exploitation in black box optimization.", "configspace": "", "generation": 0, "fitness": 0.1259243302524803, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.18077166454366012, 0.18077166454366012, 0.18077166454366012, 0.20006973923257942, 0.20006973923257942, 0.20006973923257942, 0.19267874669088025, 0.19267874669088025, 0.19267874669088025, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04152115632127551, 0.04152115632127551, 0.04152115632127551, 0.05085958855217665, 0.05085958855217665, 0.05085958855217665, 0.05598949935875386, 0.05598949935875386, 0.05598949935875386, 0.026024948281760607, 0.026024948281760607, 0.026024948281760607, 0.02508882994463546, 0.02508882994463546, 0.02508882994463546, 0.033122309123385985, 0.033122309123385985, 0.033122309123385985, 0.9946874984536404, 0.9946874984536404, 0.9946874984536404, 0.9958031694568736, 0.9958031694568736, 0.9958031694568736, 0.9948021382683291, 0.9948021382683291, 0.9948021382683291, 0.07789726414320941, 0.07789726414320941, 0.07789726414320941, 0.08191152211833941, 0.08191152211833941, 0.08191152211833941, 0.0836904808903911, 0.0836904808903911, 0.0836904808903911, 0.1257199536809157, 0.1257199536809157, 0.1257199536809157, 0.15379597933785372, 0.15379597933785372, 0.15379597933785372, 0.1186704718796957, 0.1186704718796957, 0.1186704718796957, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02208115698062374, 0.02208115698062374, 0.02208115698062374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022261538006440817, 0.022261538006440817, 0.022261538006440817, 0.0693597930749964, 0.0693597930749964, 0.0693597930749964, 0.032988540160787894, 0.032988540160787894, 0.032988540160787894, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004175537261962958, 0.004175537261962958, 0.004175537261962958, 0.19079245257166866, 0.19079245257166866, 0.19079245257166866, 0.2021784789982609, 0.2021784789982609, 0.2021784789982609, 0.16278747449518027, 0.16278747449518027, 0.16278747449518027, 0.057531928757585615, 0.057531928757585615, 0.057531928757585615, 0.04964749063388063, 0.04964749063388063, 0.04964749063388063, 0.04779616356803251, 0.04779616356803251, 0.04779616356803251, 0.13683043523380034, 0.13683043523380034, 0.13683043523380034, 0.12063570639470922, 0.12063570639470922, 0.12063570639470922, 0.14006549464443085, 0.14006549464443085, 0.14006549464443085, 0.1602970245251576, 0.1602970245251576, 0.1602970245251576, 0.16626488680399654, 0.16626488680399654, 0.16626488680399654, 0.1634747311197161, 0.1634747311197161, 0.1634747311197161, 0.1011054568512545, 0.1011054568512545, 0.1011054568512545, 0.12279910862730992, 0.12279910862730992, 0.12279910862730992, 0.0975505172609401, 0.0975505172609401, 0.0975505172609401, 0.14620569877623002, 0.14620569877623002, 0.14620569877623002, 0.16218726423101193, 0.16218726423101193, 0.16218726423101193, 0.15276009285445957, 0.15276009285445957, 0.15276009285445957, 0.13437310629468213, 0.13437310629468213, 0.13437310629468213, 0.15167446896790826, 0.15167446896790826, 0.15167446896790826, 0.13581461003619677, 0.13581461003619677, 0.13581461003619677, 0.20938014964501395, 0.20938014964501395, 0.20938014964501395, 0.1437474096165613, 0.1437474096165613, 0.1437474096165613, 0.15961156476859684, 0.15961156476859684, 0.15961156476859684, 0.14842869148611826, 0.14842869148611826, 0.14842869148611826, 0.1152318594010876, 0.1152318594010876, 0.1152318594010876, 0.18558757142775917, 0.18558757142775917, 0.18558757142775917, 0.20226629090426296, 0.20226629090426296, 0.20226629090426296, 0.18526800126887433, 0.18526800126887433, 0.18526800126887433, 0.18646288712034453, 0.18646288712034453, 0.18646288712034453, 0.04777348060347886, 0.04777348060347886, 0.04777348060347886, 0.04543143508092984, 0.04543143508092984, 0.04543143508092984, 0.04901831944597257, 0.04901831944597257, 0.04901831944597257]}, "mutation_prompt": null}
{"id": "6e7b769d-59e7-4c97-a763-429f2ba7c429", "solution": "import numpy as np\n\nclass HybridParticleEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.mutation_factor = 0.5\n        self.crossover_rate = 0.7\n        self.inertia_weight = 0.7\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n\n    def __call__(self, func):\n        np.random.seed(42)\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_values = np.array([func(p) for p in particles])\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        \n        # Initialize evolutionary strategy\n        generation = 0\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            new_particles = np.copy(particles)\n            for i in range(self.population_size):\n                # DE mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = particles[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                \n                # DE crossover\n                trial_vector = np.copy(particles[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial_vector[j] = mutant_vector[j]\n\n                # PSO update\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i] +\n                                self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i]) +\n                                self.social_coef * r2 * (global_best_position - particles[i]))\n                new_particles[i] = np.clip(trial_vector + velocities[i], self.lower_bound, self.upper_bound)\n\n            # Evaluate new particles\n            new_particle_values = np.array([func(p) for p in new_particles])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if new_particle_values[i] < personal_best_values[i]:\n                    personal_best_values[i] = new_particle_values[i]\n                    personal_best_positions[i] = new_particles[i]\n            if np.min(new_particle_values) < np.min(personal_best_values):\n                global_best_position = new_particles[np.argmin(new_particle_values)]\n\n            # Update particles\n            particles = new_particles\n            generation += 1\n\n        return global_best_position", "name": "HybridParticleEvolution", "description": "Hybrid Particle-Evolution Strategy with Adaptive Scaling for efficient exploration and exploitation in black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "19c2b4b9-c2cb-4579-8349-901d372fe314", "metadata": {"aucs": [0.18077166454366012, 0.18077166454366012, 0.18077166454366012, 0.20006973923257942, 0.20006973923257942, 0.20006973923257942, 0.19267874669088025, 0.19267874669088025, 0.19267874669088025, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04152115632127551, 0.04152115632127551, 0.04152115632127551, 0.05085958855217665, 0.05085958855217665, 0.05085958855217665, 0.05598949935875386, 0.05598949935875386, 0.05598949935875386, 0.026024948281760607, 0.026024948281760607, 0.026024948281760607, 0.02508882994463546, 0.02508882994463546, 0.02508882994463546, 0.033122309123385985, 0.033122309123385985, 0.033122309123385985, 0.9946874984536404, 0.9946874984536404, 0.9946874984536404, 0.9958031694568736, 0.9958031694568736, 0.9958031694568736, 0.9948021382683291, 0.9948021382683291, 0.9948021382683291, 0.07789726414320941, 0.07789726414320941, 0.07789726414320941, 0.08191152211833941, 0.08191152211833941, 0.08191152211833941, 0.0836904808903911, 0.0836904808903911, 0.0836904808903911, 0.1257199536809157, 0.1257199536809157, 0.1257199536809157, 0.15379597933785372, 0.15379597933785372, 0.15379597933785372, 0.1186704718796957, 0.1186704718796957, 0.1186704718796957, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02208115698062374, 0.02208115698062374, 0.02208115698062374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022261538006440817, 0.022261538006440817, 0.022261538006440817, 0.0693597930749964, 0.0693597930749964, 0.0693597930749964, 0.032988540160787894, 0.032988540160787894, 0.032988540160787894, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004175537261962958, 0.004175537261962958, 0.004175537261962958, 0.19079245257166866, 0.19079245257166866, 0.19079245257166866, 0.2021784789982609, 0.2021784789982609, 0.2021784789982609, 0.16278747449518027, 0.16278747449518027, 0.16278747449518027, 0.057531928757585615, 0.057531928757585615, 0.057531928757585615, 0.04964749063388063, 0.04964749063388063, 0.04964749063388063, 0.04779616356803251, 0.04779616356803251, 0.04779616356803251, 0.13683043523380034, 0.13683043523380034, 0.13683043523380034, 0.12063570639470922, 0.12063570639470922, 0.12063570639470922, 0.14006549464443085, 0.14006549464443085, 0.14006549464443085, 0.1602970245251576, 0.1602970245251576, 0.1602970245251576, 0.16626488680399654, 0.16626488680399654, 0.16626488680399654, 0.1634747311197161, 0.1634747311197161, 0.1634747311197161, 0.1011054568512545, 0.1011054568512545, 0.1011054568512545, 0.12279910862730992, 0.12279910862730992, 0.12279910862730992, 0.0975505172609401, 0.0975505172609401, 0.0975505172609401, 0.14620569877623002, 0.14620569877623002, 0.14620569877623002, 0.16218726423101193, 0.16218726423101193, 0.16218726423101193, 0.15276009285445957, 0.15276009285445957, 0.15276009285445957, 0.13437310629468213, 0.13437310629468213, 0.13437310629468213, 0.15167446896790826, 0.15167446896790826, 0.15167446896790826, 0.13581461003619677, 0.13581461003619677, 0.13581461003619677, 0.20938014964501395, 0.20938014964501395, 0.20938014964501395, 0.1437474096165613, 0.1437474096165613, 0.1437474096165613, 0.15961156476859684, 0.15961156476859684, 0.15961156476859684, 0.14842869148611826, 0.14842869148611826, 0.14842869148611826, 0.1152318594010876, 0.1152318594010876, 0.1152318594010876, 0.18558757142775917, 0.18558757142775917, 0.18558757142775917, 0.20226629090426296, 0.20226629090426296, 0.20226629090426296, 0.18526800126887433, 0.18526800126887433, 0.18526800126887433, 0.18646288712034453, 0.18646288712034453, 0.18646288712034453, 0.04777348060347886, 0.04777348060347886, 0.04777348060347886, 0.04543143508092984, 0.04543143508092984, 0.04543143508092984, 0.04901831944597257, 0.04901831944597257, 0.04901831944597257]}, "mutation_prompt": null}
