{"id": "a2b22d73-29a8-4147-be2e-97e996fc98aa", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.global_best = None\n        self.global_best_score = float('inf')\n\n    def __call__(self, func):\n        # Initialize the particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.pop_size, float('inf'))\n        func_evals = 0\n\n        def evaluate(particle):\n            nonlocal func_evals\n            if func_evals < self.budget:\n                func_evals += 1\n                return func(particle)\n            return float('inf')\n\n        while func_evals < self.budget:\n            # Update personal bests and global best\n            for i in range(self.pop_size):\n                score = evaluate(particles[i])\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = particles[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best = particles[i]\n\n            # PSO update\n            inertia = 0.5 + np.random.rand() / 2\n            cognitive_coeff = 1.5\n            social_coeff = 1.5\n            for i in range(self.pop_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                velocities[i] = (\n                    inertia * velocities[i] +\n                    cognitive_coeff * r1 * (personal_best_positions[i] - particles[i]) +\n                    social_coeff * r2 * (self.global_best - particles[i])\n                )\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # DE mutation and crossover\n            for i in range(self.pop_size):\n                if func_evals >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < 0.9\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, particles[i])\n                trial_score = evaluate(trial)\n                if trial_score < personal_best_scores[i]:\n                    personal_best_scores[i] = trial_score\n                    personal_best_positions[i] = trial\n\n        return self.global_best", "name": "HybridPSODE", "description": "A dynamic hybrid algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to balance exploration and exploitation effectively.", "configspace": "", "generation": 0, "fitness": 0.17973923919842644, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.3304747566354158, 0.36693189296114503, 0.35460168770413725, 0.36417634905261576, 0.4263447776600535, 0.3769453151826979, 0.3785034687130088, 0.37286164949719625, 0.35007201831296264, 0.010609641295578842, 0.01688832129472373, 0.015385224093965366, 0.04960802366314654, 0.041322212635518385, 9.999999999998899e-05, 9.999999999998899e-05, 0.018838648508089473, 0.03338598034699358, 0.08103595261079521, 0.09411403402895191, 0.1144324098205749, 0.06662014656746795, 0.09452884825394126, 0.0836429136649256, 0.09034810737343724, 0.07474957803612181, 0.1019958088375954, 0.08397934402654283, 0.06226263657055675, 0.09062748036669377, 0.08884255719339473, 0.06550125990557443, 0.087070272021747, 0.09189975976558251, 0.08179955312828535, 0.08019992362800643, 0.9684899653414941, 0.9705549874885313, 0.9771955758939896, 0.9604606792341372, 0.9774198341581706, 0.9768240757205353, 0.9836354667491235, 0.9767983334532734, 0.9768538974323522, 0.17862925428980803, 0.18827356580244303, 0.17240768408744223, 0.14019222521047037, 0.27296847644074573, 0.1915615683120817, 0.23272555354276614, 0.08543689479074257, 0.14399769294396736, 0.2656276367993309, 0.23102309627056938, 0.21165108274923738, 0.18762551783572234, 0.20923555037438946, 0.2420428026949557, 0.138559527051069, 0.178153992622746, 0.2608953934503798, 0.1104046194269015, 0.06620286316526858, 0.1444845552940658, 0.10329114981421916, 0.12668946517032076, 0.09043977723063212, 0.13265169030452484, 0.10954968957991262, 0.11174397294031857, 0.08511240504059792, 0.09618181335997611, 0.1089133774846226, 0.09327491362486184, 0.1233723085997841, 0.12180529251346561, 0.09163385377513, 0.06979486579077498, 0.10375149881483126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002590899265698665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038861504712446204, 0.06468399552084847, 0.10569727628407488, 0.019317513018843435, 0.011544282322281663, 0.007506515759082677, 0.02990801159565948, 0.049124028223341165, 0.007250162238424118, 9.999999999998899e-05, 9.999999999998899e-05, 0.006218913452572417, 0.0009735957239866977, 9.999999999998899e-05, 0.005951074533929179, 9.999999999998899e-05, 9.999999999998899e-05, 0.002759030576064858, 0.07661403988991478, 0.09226763958369666, 0.02283892319788139, 0.042524337972467796, 0.05165813023710142, 0.10712242913405667, 0.057624251299094986, 0.07330282093363205, 0.03817101242018184, 0.33992420731616824, 0.3386418314111028, 0.34859962536794975, 0.2996811541308716, 0.3125388093776401, 0.3181889841862524, 0.3476809959420961, 0.2916386323296071, 0.34213030021735924, 0.1083176493423672, 0.14300107396505024, 0.09795629649528115, 0.08631283399619516, 0.07521779844529264, 0.09290257562072834, 0.08054874087994324, 0.07164482283718676, 0.08702474390309689, 0.14620376892651565, 0.18103198415974753, 0.17613150580212933, 0.1897005646383637, 0.14431464808912875, 0.19251343274287036, 0.1850072957105272, 0.16742970105093424, 0.15835215822297688, 0.24405108121290975, 0.2273918612833672, 0.2948755971925213, 0.2106059618146533, 0.20741257301265603, 0.24424761476714696, 0.2354753413202394, 0.29022218459371607, 0.25650852309583183, 0.18101334934297275, 0.1552666137006734, 0.17525870243854857, 0.15611029763920536, 0.1692079766029848, 0.14763954679606373, 0.18779040548092685, 0.20132247400628622, 0.15519188680464036, 0.18310572554357818, 0.16986198079615455, 0.183790915499359, 0.20145543896263196, 0.1793007707329296, 0.17916344575548449, 0.1707428372614448, 0.19855331743094906, 0.22276385552967015, 0.18427728156249956, 0.1811731058913334, 0.16591819264153673, 0.1675485941933419, 0.20205694568136878, 0.1744618924080703, 0.19055706736498146, 0.19268420657208318, 0.1773219502876111, 0.4586496487849314, 0.16472069523212685, 0.14690076105261418, 0.479680288137209, 0.19449531912232587, 0.1678747258696952, 0.1388918350504964, 0.15146442260095505, 0.20749229228869748, 0.3384284637557866, 0.19519546490039563, 0.16241871856461187, 0.2576167457080122, 0.20472467943618777, 0.12689401015173318, 0.1928429765282056, 0.19650138998023603, 0.2026453688686245, 0.18466166170018183, 0.19681291572462, 0.1991022444076812, 0.19550992522652033, 0.1909145770464563, 0.17711819221233327, 0.18031603610492442, 0.17030301369860645, 0.17425918458249978, 0.07247215775174609, 0.07633052298432741, 0.0754759026180345, 0.07783896532082923, 0.07100824200190003, 0.0681000438966668, 0.06571410174110948, 0.06445567690942133, 0.06606127198737144]}, "mutation_prompt": null}
{"id": "40cd7a12-904d-484c-a46d-2b08c350633f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.global_best = None\n        self.global_best_score = float('inf')\n\n    def __call__(self, func):\n        # Initialize the particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.pop_size, float('inf'))\n        func_evals = 0\n\n        def evaluate(particle):\n            nonlocal func_evals\n            if func_evals < self.budget:\n                func_evals += 1\n                return func(particle)\n            return float('inf')\n\n        while func_evals < self.budget:\n            # Update personal bests and global best\n            for i in range(self.pop_size):\n                score = evaluate(particles[i])\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = particles[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best = particles[i]\n\n            # PSO update\n            inertia = 0.5 + np.random.rand() / 2\n            cognitive_coeff = 1.5\n            social_coeff = 1.5\n            for i in range(self.pop_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                velocities[i] = (\n                    inertia * velocities[i] +\n                    cognitive_coeff * r1 * (personal_best_positions[i] - particles[i]) +\n                    social_coeff * r2 * (self.global_best - particles[i])\n                )\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # DE mutation and crossover\n            for i in range(self.pop_size):\n                if func_evals >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < 0.9\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, particles[i])\n                trial_score = evaluate(trial)\n                if trial_score < personal_best_scores[i]:\n                    personal_best_scores[i] = trial_score\n                    personal_best_positions[i] = trial\n\n        return self.global_best", "name": "HybridPSODE", "description": "A dynamic hybrid algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to balance exploration and exploitation effectively.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a2b22d73-29a8-4147-be2e-97e996fc98aa", "metadata": {"aucs": [0.3304747566354158, 0.36693189296114503, 0.35460168770413725, 0.36417634905261576, 0.4263447776600535, 0.3769453151826979, 0.3785034687130088, 0.37286164949719625, 0.35007201831296264, 0.010609641295578842, 0.01688832129472373, 0.015385224093965366, 0.04960802366314654, 0.041322212635518385, 9.999999999998899e-05, 9.999999999998899e-05, 0.018838648508089473, 0.03338598034699358, 0.08103595261079521, 0.09411403402895191, 0.1144324098205749, 0.06662014656746795, 0.09452884825394126, 0.0836429136649256, 0.09034810737343724, 0.07474957803612181, 0.1019958088375954, 0.08397934402654283, 0.06226263657055675, 0.09062748036669377, 0.08884255719339473, 0.06550125990557443, 0.087070272021747, 0.09189975976558251, 0.08179955312828535, 0.08019992362800643, 0.9684899653414941, 0.9705549874885313, 0.9771955758939896, 0.9604606792341372, 0.9774198341581706, 0.9768240757205353, 0.9836354667491235, 0.9767983334532734, 0.9768538974323522, 0.17862925428980803, 0.18827356580244303, 0.17240768408744223, 0.14019222521047037, 0.27296847644074573, 0.1915615683120817, 0.23272555354276614, 0.08543689479074257, 0.14399769294396736, 0.2656276367993309, 0.23102309627056938, 0.21165108274923738, 0.18762551783572234, 0.20923555037438946, 0.2420428026949557, 0.138559527051069, 0.178153992622746, 0.2608953934503798, 0.1104046194269015, 0.06620286316526858, 0.1444845552940658, 0.10329114981421916, 0.12668946517032076, 0.09043977723063212, 0.13265169030452484, 0.10954968957991262, 0.11174397294031857, 0.08511240504059792, 0.09618181335997611, 0.1089133774846226, 0.09327491362486184, 0.1233723085997841, 0.12180529251346561, 0.09163385377513, 0.06979486579077498, 0.10375149881483126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002590899265698665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038861504712446204, 0.06468399552084847, 0.10569727628407488, 0.019317513018843435, 0.011544282322281663, 0.007506515759082677, 0.02990801159565948, 0.049124028223341165, 0.007250162238424118, 9.999999999998899e-05, 9.999999999998899e-05, 0.006218913452572417, 0.0009735957239866977, 9.999999999998899e-05, 0.005951074533929179, 9.999999999998899e-05, 9.999999999998899e-05, 0.002759030576064858, 0.07661403988991478, 0.09226763958369666, 0.02283892319788139, 0.042524337972467796, 0.05165813023710142, 0.10712242913405667, 0.057624251299094986, 0.07330282093363205, 0.03817101242018184, 0.33992420731616824, 0.3386418314111028, 0.34859962536794975, 0.2996811541308716, 0.3125388093776401, 0.3181889841862524, 0.3476809959420961, 0.2916386323296071, 0.34213030021735924, 0.1083176493423672, 0.14300107396505024, 0.09795629649528115, 0.08631283399619516, 0.07521779844529264, 0.09290257562072834, 0.08054874087994324, 0.07164482283718676, 0.08702474390309689, 0.14620376892651565, 0.18103198415974753, 0.17613150580212933, 0.1897005646383637, 0.14431464808912875, 0.19251343274287036, 0.1850072957105272, 0.16742970105093424, 0.15835215822297688, 0.24405108121290975, 0.2273918612833672, 0.2948755971925213, 0.2106059618146533, 0.20741257301265603, 0.24424761476714696, 0.2354753413202394, 0.29022218459371607, 0.25650852309583183, 0.18101334934297275, 0.1552666137006734, 0.17525870243854857, 0.15611029763920536, 0.1692079766029848, 0.14763954679606373, 0.18779040548092685, 0.20132247400628622, 0.15519188680464036, 0.18310572554357818, 0.16986198079615455, 0.183790915499359, 0.20145543896263196, 0.1793007707329296, 0.17916344575548449, 0.1707428372614448, 0.19855331743094906, 0.22276385552967015, 0.18427728156249956, 0.1811731058913334, 0.16591819264153673, 0.1675485941933419, 0.20205694568136878, 0.1744618924080703, 0.19055706736498146, 0.19268420657208318, 0.1773219502876111, 0.4586496487849314, 0.16472069523212685, 0.14690076105261418, 0.479680288137209, 0.19449531912232587, 0.1678747258696952, 0.1388918350504964, 0.15146442260095505, 0.20749229228869748, 0.3384284637557866, 0.19519546490039563, 0.16241871856461187, 0.2576167457080122, 0.20472467943618777, 0.12689401015173318, 0.1928429765282056, 0.19650138998023603, 0.2026453688686245, 0.18466166170018183, 0.19681291572462, 0.1991022444076812, 0.19550992522652033, 0.1909145770464563, 0.17711819221233327, 0.18031603610492442, 0.17030301369860645, 0.17425918458249978, 0.07247215775174609, 0.07633052298432741, 0.0754759026180345, 0.07783896532082923, 0.07100824200190003, 0.0681000438966668, 0.06571410174110948, 0.06445567690942133, 0.06606127198737144]}, "mutation_prompt": null}
