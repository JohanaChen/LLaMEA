{"id": "f9c1cb32-f80f-432c-ae35-818196b84a36", "solution": "import numpy as np\n\nclass HybridDESAOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(5 * np.sqrt(dim))\n        self.temperature = 100.0\n        self.cooling_rate = 0.95\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _mutate(self, target_idx, population):\n        indices = [idx for idx in range(self.population_size) if idx != target_idx]\n        a, b, c = population[np.random.choice(indices, 3, replace=False)]\n        F = 0.8  # Differential weight\n        mutant = a + F * (b - c)\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def _crossover(self, target, mutant):\n        crossover_rate = 0.9\n        crossover_mask = np.random.rand(self.dim) < crossover_rate\n        offspring = np.where(crossover_mask, mutant, target)\n        return offspring\n\n    def _acceptance_probability(self, current_cost, new_cost):\n        if new_cost < current_cost:\n            return 1.0\n        else:\n            return np.exp((current_cost - new_cost) / self.temperature)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = self._evaluate_population(population, func)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for target_idx in range(self.population_size):\n                mutant = self._mutate(target_idx, population)\n                offspring = self._crossover(population[target_idx], mutant)\n                off_fitness = func(offspring)\n                evaluations += 1\n\n                if off_fitness < fitness[target_idx]:\n                    population[target_idx] = offspring\n                    fitness[target_idx] = off_fitness\n                else:\n                    ap = self._acceptance_probability(fitness[target_idx], off_fitness)\n                    if np.random.rand() < ap:\n                        population[target_idx] = offspring\n                        fitness[target_idx] = off_fitness\n\n                if off_fitness < best_fitness:\n                    best_solution = offspring\n                    best_fitness = off_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            self.temperature *= self.cooling_rate\n\n        return best_solution", "name": "HybridDESAOptimizer", "description": "A hybrid metaheuristic algorithm combining differential evolution and simulated annealing for efficient exploration and exploitation in black box optimization.", "configspace": "", "generation": 0, "fitness": 0.37504637237921756, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.5713740017923471, 0.5842308177035804, 0.5800515411519926, 0.5869435963012247, 0.5909175104108508, 0.5764692473129889, 0.5895181080201901, 0.5907292872627852, 0.5861967342869654, 0.5751706690019209, 0.577980430454869, 0.5707463624650679, 0.572398232566427, 0.5818172687112781, 0.568317012318102, 0.5742221516709918, 0.5770479160144653, 0.5750161135709865, 0.10637069411096967, 0.13115803250367042, 0.12705830815085772, 0.2427806919515374, 0.13401392582286464, 0.15938770551386283, 0.1272174214671964, 0.4003845295773516, 0.11986941240510807, 0.11761503064634327, 0.12481965879781143, 0.1167618319019077, 0.11421421170706159, 0.11729814393820837, 0.12780005056344745, 0.10845568480205348, 0.12443840392200323, 0.13682265406349559, 0.932996755723078, 0.9830774560943392, 0.9481251120631871, 0.9188512386170261, 0.9895178212414684, 0.9277360002335874, 0.9914026416646362, 0.9354881708706961, 0.9833653205696096, 0.4899774095281454, 0.5067538784849157, 0.48773068358344585, 0.5350305432089159, 0.5109399399469124, 0.504286568240427, 0.5148423056611331, 0.5195162698779388, 0.5067226095315979, 0.7105580944372105, 0.7035822435855172, 0.7102094512690069, 0.6993303725183495, 0.7232072308307791, 0.700916433752479, 0.7341331755394962, 0.7099450218136134, 0.7329282229177401, 0.5300678455330998, 0.5093057636147003, 0.5044408721027691, 0.5417278296836574, 0.4963164505620634, 0.510473697953322, 0.5189524332894306, 0.5387675147805653, 0.5238689081735814, 0.5450946761404591, 0.4902074543062166, 0.056356920734557225, 0.49223773392327097, 0.5227555608180094, 0.5247914670679182, 0.513596086030202, 0.5083931062273072, 0.5437691388852384, 0.46096963663580204, 0.5003944923867258, 0.4846540623114661, 0.5160582348540012, 0.49800964668968395, 0.4464601538849109, 0.4722525547115074, 0.5276212560045872, 0.5167352429742119, 0.5333113470462674, 0.5629825496096108, 0.5581913073250786, 0.5401795561351315, 0.5619761263406764, 0.5613481570877306, 0.559140046196708, 0.5620007963849067, 0.5550613910282695, 0.03518616806534425, 0.19811421182786548, 0.21694025253649485, 0.3726891590116377, 0.3518978509248163, 0.42122570292816786, 0.1530619539193876, 0.24403217833043012, 0.25971204708499984, 0.4134176358418459, 0.42096140428175144, 0.37132513769202236, 0.3919569882788484, 0.41138354666839727, 0.4225464600837635, 0.44433332821043103, 0.38820865274967364, 0.4117788681689969, 0.5545495877054836, 0.5589026852798586, 0.5439196765338725, 0.550724297527406, 0.552882733664391, 0.5537131753310705, 0.5603921171305962, 0.17797774482285766, 0.5496006161761292, 0.12585858507264458, 0.11567976810067704, 0.09219322750824976, 0.08556309723678257, 0.08994930928722278, 0.09939636576431787, 0.09776490253159664, 0.11454780112599072, 0.08585436730373364, 0.14094391678772367, 0.14140935619283368, 0.19723465466343193, 0.15326059324050834, 0.12336441356091832, 0.2844295989453238, 0.19523596996639947, 0.09868047617641373, 0.15443996457675202, 0.3695507842311573, 0.35911574843439575, 0.37452157610516257, 0.3406633131773028, 0.3606065117796018, 0.3237470977203244, 0.42439590541474237, 0.39402278824466686, 0.36650227633869426, 0.32024061485007804, 0.2784125006310012, 0.3295114703833314, 0.31139510242609225, 0.28397052594349936, 0.29341125722637273, 0.3327673508202602, 0.3131816559723437, 0.32850688644774906, 0.17922581619077116, 0.19497143653671367, 0.19279181696228098, 0.18183188783613113, 0.172791665253628, 0.18630650529971893, 0.19241686374789746, 0.17258369813566987, 0.2199206763146191, 0.3361629255087297, 0.2793279474175271, 0.18263865902966825, 0.31585809155322675, 0.23573102377179334, 0.37560020601695965, 0.30092017315066366, 0.20749825329160654, 0.21581459024629301, 0.6660593263936101, 0.162996161469803, 0.19236429010516343, 0.15543892325100173, 0.1634632618695554, 0.16345453708354052, 0.1666693214602959, 0.17766146188007548, 0.6239277153779723, 0.14790422923199154, 0.16267243906164908, 0.19914104554065915, 0.6128333648554873, 0.09617657096377918, 0.19313891800874206, 0.2033065643008084, 0.2121726239308297, 0.20734894157249817, 0.1868206044394335, 0.17869798485697463, 0.19619084480100746, 0.173531097184361, 0.18384502473156594, 0.19871555604627733, 0.2015683421859027, 0.20391775376910337, 0.17742896402119734, 0.06889093992696149, 0.07522706490491926, 0.07289063640401672, 0.07888807145867505, 0.07676561629249301, 0.07539046756474621, 0.06777231074777701, 0.07009874541967909, 0.07723617946801442]}, "mutation_prompt": null}
{"id": "bc47a145-6658-4922-955a-d36461995346", "solution": "import numpy as np\n\nclass HybridDESAOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(5 * np.sqrt(dim))\n        self.temperature = 100.0\n        self.cooling_rate = 0.95\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _mutate(self, target_idx, population):\n        indices = [idx for idx in range(self.population_size) if idx != target_idx]\n        a, b, c = population[np.random.choice(indices, 3, replace=False)]\n        F = 0.8  # Differential weight\n        mutant = a + F * (b - c)\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def _crossover(self, target, mutant):\n        crossover_rate = 0.9\n        crossover_mask = np.random.rand(self.dim) < crossover_rate\n        offspring = np.where(crossover_mask, mutant, target)\n        return offspring\n\n    def _acceptance_probability(self, current_cost, new_cost):\n        if new_cost < current_cost:\n            return 1.0\n        else:\n            return np.exp((current_cost - new_cost) / self.temperature)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = self._evaluate_population(population, func)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for target_idx in range(self.population_size):\n                mutant = self._mutate(target_idx, population)\n                offspring = self._crossover(population[target_idx], mutant)\n                off_fitness = func(offspring)\n                evaluations += 1\n\n                if off_fitness < fitness[target_idx]:\n                    population[target_idx] = offspring\n                    fitness[target_idx] = off_fitness\n                else:\n                    ap = self._acceptance_probability(fitness[target_idx], off_fitness)\n                    if np.random.rand() < ap:\n                        population[target_idx] = offspring\n                        fitness[target_idx] = off_fitness\n\n                if off_fitness < best_fitness:\n                    best_solution = offspring\n                    best_fitness = off_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            self.temperature *= self.cooling_rate\n\n        return best_solution", "name": "HybridDESAOptimizer", "description": "A hybrid metaheuristic algorithm combining differential evolution and simulated annealing for efficient exploration and exploitation in black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f9c1cb32-f80f-432c-ae35-818196b84a36", "metadata": {"aucs": [0.5713740017923471, 0.5842308177035804, 0.5800515411519926, 0.5869435963012247, 0.5909175104108508, 0.5764692473129889, 0.5895181080201901, 0.5907292872627852, 0.5861967342869654, 0.5751706690019209, 0.577980430454869, 0.5707463624650679, 0.572398232566427, 0.5818172687112781, 0.568317012318102, 0.5742221516709918, 0.5770479160144653, 0.5750161135709865, 0.10637069411096967, 0.13115803250367042, 0.12705830815085772, 0.2427806919515374, 0.13401392582286464, 0.15938770551386283, 0.1272174214671964, 0.4003845295773516, 0.11986941240510807, 0.11761503064634327, 0.12481965879781143, 0.1167618319019077, 0.11421421170706159, 0.11729814393820837, 0.12780005056344745, 0.10845568480205348, 0.12443840392200323, 0.13682265406349559, 0.932996755723078, 0.9830774560943392, 0.9481251120631871, 0.9188512386170261, 0.9895178212414684, 0.9277360002335874, 0.9914026416646362, 0.9354881708706961, 0.9833653205696096, 0.4899774095281454, 0.5067538784849157, 0.48773068358344585, 0.5350305432089159, 0.5109399399469124, 0.504286568240427, 0.5148423056611331, 0.5195162698779388, 0.5067226095315979, 0.7105580944372105, 0.7035822435855172, 0.7102094512690069, 0.6993303725183495, 0.7232072308307791, 0.700916433752479, 0.7341331755394962, 0.7099450218136134, 0.7329282229177401, 0.5300678455330998, 0.5093057636147003, 0.5044408721027691, 0.5417278296836574, 0.4963164505620634, 0.510473697953322, 0.5189524332894306, 0.5387675147805653, 0.5238689081735814, 0.5450946761404591, 0.4902074543062166, 0.056356920734557225, 0.49223773392327097, 0.5227555608180094, 0.5247914670679182, 0.513596086030202, 0.5083931062273072, 0.5437691388852384, 0.46096963663580204, 0.5003944923867258, 0.4846540623114661, 0.5160582348540012, 0.49800964668968395, 0.4464601538849109, 0.4722525547115074, 0.5276212560045872, 0.5167352429742119, 0.5333113470462674, 0.5629825496096108, 0.5581913073250786, 0.5401795561351315, 0.5619761263406764, 0.5613481570877306, 0.559140046196708, 0.5620007963849067, 0.5550613910282695, 0.03518616806534425, 0.19811421182786548, 0.21694025253649485, 0.3726891590116377, 0.3518978509248163, 0.42122570292816786, 0.1530619539193876, 0.24403217833043012, 0.25971204708499984, 0.4134176358418459, 0.42096140428175144, 0.37132513769202236, 0.3919569882788484, 0.41138354666839727, 0.4225464600837635, 0.44433332821043103, 0.38820865274967364, 0.4117788681689969, 0.5545495877054836, 0.5589026852798586, 0.5439196765338725, 0.550724297527406, 0.552882733664391, 0.5537131753310705, 0.5603921171305962, 0.17797774482285766, 0.5496006161761292, 0.12585858507264458, 0.11567976810067704, 0.09219322750824976, 0.08556309723678257, 0.08994930928722278, 0.09939636576431787, 0.09776490253159664, 0.11454780112599072, 0.08585436730373364, 0.14094391678772367, 0.14140935619283368, 0.19723465466343193, 0.15326059324050834, 0.12336441356091832, 0.2844295989453238, 0.19523596996639947, 0.09868047617641373, 0.15443996457675202, 0.3695507842311573, 0.35911574843439575, 0.37452157610516257, 0.3406633131773028, 0.3606065117796018, 0.3237470977203244, 0.42439590541474237, 0.39402278824466686, 0.36650227633869426, 0.32024061485007804, 0.2784125006310012, 0.3295114703833314, 0.31139510242609225, 0.28397052594349936, 0.29341125722637273, 0.3327673508202602, 0.3131816559723437, 0.32850688644774906, 0.17922581619077116, 0.19497143653671367, 0.19279181696228098, 0.18183188783613113, 0.172791665253628, 0.18630650529971893, 0.19241686374789746, 0.17258369813566987, 0.2199206763146191, 0.3361629255087297, 0.2793279474175271, 0.18263865902966825, 0.31585809155322675, 0.23573102377179334, 0.37560020601695965, 0.30092017315066366, 0.20749825329160654, 0.21581459024629301, 0.6660593263936101, 0.162996161469803, 0.19236429010516343, 0.15543892325100173, 0.1634632618695554, 0.16345453708354052, 0.1666693214602959, 0.17766146188007548, 0.6239277153779723, 0.14790422923199154, 0.16267243906164908, 0.19914104554065915, 0.6128333648554873, 0.09617657096377918, 0.19313891800874206, 0.2033065643008084, 0.2121726239308297, 0.20734894157249817, 0.1868206044394335, 0.17869798485697463, 0.19619084480100746, 0.173531097184361, 0.18384502473156594, 0.19871555604627733, 0.2015683421859027, 0.20391775376910337, 0.17742896402119734, 0.06889093992696149, 0.07522706490491926, 0.07289063640401672, 0.07888807145867505, 0.07676561629249301, 0.07539046756474621, 0.06777231074777701, 0.07009874541967909, 0.07723617946801442]}, "mutation_prompt": null}
