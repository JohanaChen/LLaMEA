{"id": "1c91ffa6-c680-4bff-974e-4a24e1bcdc9b", "solution": "import numpy as np\n\nclass HybridPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(self.population[i])\n                self.evaluations += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n            \n            # Update velocities and positions (PSO)\n            w = 0.5\n            c1 = 1.5\n            c2 = 1.5\n            r1, r2 = np.random.rand(2)\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.population) +\n                               c2 * r2 * (self.global_best_position - self.population))\n            self.population += self.velocities\n            self.population = np.clip(self.population, self.lower_bound, self.upper_bound)\n\n            # Differential Evolution mutation\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < 0.7, mutant, self.population[i])\n                score = func(trial)\n                self.evaluations += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.population[i] = trial\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = trial\n        return self.global_best_position", "name": "HybridPSODEOptimizer", "description": "A hybrid metaheuristic combining particle swarm optimization (PSO) and differential evolution (DE) to balance exploration and exploitation in optimization.", "configspace": "", "generation": 0, "fitness": 0.2978140487649674, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8162019198621527, 0.8052390412596931, 0.8671499017887855, 0.7406576454835629, 0.8349462244331937, 0.7978801588473722, 0.8160385380909698, 0.7937027647740104, 0.8484803630528075, 0.3175475070830729, 0.5677434469751342, 0.6006132072599175, 0.37511189904213016, 0.47850287750723985, 0.5789179719010848, 0.345820498938753, 0.197868159603792, 0.5855510287614245, 0.14290933412969353, 0.10285343066318842, 0.08617347126606734, 0.16344825738954294, 0.11426111016624163, 0.17154030244503082, 0.1500545195909595, 0.09615660573273344, 0.12095345880480912, 0.14326007526296036, 0.10326850190804215, 0.10485843432943598, 0.09958016663283054, 0.10122479697758191, 0.11279878431785728, 0.1108552058831036, 0.19642001662564246, 0.1468716684066016, 0.9824311797268734, 0.9559061173869314, 0.9665998858461141, 0.9631960205083535, 0.9623836992634622, 0.9787830750980967, 0.9804584007559933, 0.9615248309310185, 0.9408593753186969, 0.5457306420981212, 0.5724277435587176, 0.6942186298932171, 0.508077167687921, 0.39507693782381537, 0.6862945927832107, 0.3034528014724375, 0.5468792574572825, 0.2890564922408715, 0.2280323488607886, 0.20655302749833993, 0.841984164196956, 0.2673040303750498, 0.27888373092793384, 0.17183292066378797, 0.12366800396522415, 0.14726325231830995, 0.2348932462189306, 0.23926242870721348, 0.20558806077644187, 0.4379335666339189, 0.10829717854301102, 0.13780066055502616, 0.39459728317969167, 0.12863084926402713, 0.3959646510608341, 0.2069090145948418, 0.2225607029120522, 0.38931761426468026, 0.2100665688550284, 0.21101245162019178, 0.2181672397075609, 0.1244273853677823, 0.22675205464168335, 0.2886021349086161, 0.2429224757829752, 0.0012966363828090799, 9.999999999998899e-05, 0.00441137066691577, 0.04298544459160025, 0.054492427941785215, 9.999999999998899e-05, 0.09150074058111535, 0.04505995935936025, 0.0972148650707566, 0.0965284466620635, 0.04857650627137522, 0.14511958378275447, 0.2244870697339204, 0.0809863911014218, 0.07881983254889469, 0.23208230392135043, 0.2312589542025275, 0.05801237300654882, 0.05284438400803515, 0.03140898423593297, 0.16031280146116622, 0.1763980684364591, 0.2307059711395023, 0.3633014934258332, 0.09141743686107817, 0.09694375366861918, 0.06450877569953772, 0.04260158163195571, 0.18827201682179162, 0.08291815889236553, 0.0437154956600736, 0.107852962488593, 0.16994684228447365, 0.10628252054768528, 0.1085589171088559, 0.12772711764272138, 0.6013497685363532, 0.5238784709673732, 0.6247943387513308, 0.387030189771127, 0.5248942249965769, 0.5738370703947666, 0.5492282794835959, 0.6327165870521959, 0.5929914707454615, 0.05581057991264138, 0.11048539871218366, 0.10800134970814346, 0.06687560587514474, 0.06294329822129296, 0.06420151385215744, 0.11805875057300397, 0.10911556825220903, 0.08333775213899719, 0.23693123969670193, 0.2607987182722996, 0.1685093498527418, 0.30675438714865033, 0.2738145450415391, 0.2855012194207608, 0.2869392704650886, 0.18336937319016355, 0.1724326181086281, 0.27464322619658255, 0.4115482753668337, 0.19562594208215012, 0.3138676473667361, 0.20918758759255252, 0.24532315796839943, 0.22822038040097326, 0.3340879846647987, 0.2445860137360838, 0.1680274194193715, 0.18520567244459762, 0.181867808501591, 0.2499867297045042, 0.20741363230290943, 0.23950828513975841, 0.19173676113627824, 0.2335123674069044, 0.18685577106771079, 0.24166003954460014, 0.30432916373848606, 0.18896755128981013, 0.22320698285558416, 0.2051474184230606, 0.1940353846599, 0.21781404425639106, 0.22369892339750308, 0.17531050122612601, 0.19279523286645783, 0.21530007143039442, 0.18961031657852268, 0.22845773841113193, 0.18194943813768527, 0.19059390660669617, 0.6135187040111152, 0.18981486143786663, 0.23957685819450592, 0.7175821659794881, 0.12730098650748045, 0.15462989211565326, 0.8801682748648546, 0.20029772420347847, 0.40860609594563524, 0.09976866129890327, 0.17030174378449703, 0.16141156084679764, 0.1517992594778631, 0.21203849772171035, 0.8690144140140584, 0.6803167932456393, 0.8251270901260329, 0.2091632278852782, 0.20507146780992802, 0.8448683931709664, 0.8012409148618413, 0.18892131999178385, 0.20932892304704775, 0.1778394222608678, 0.21508486307425412, 0.21451084557148714, 0.23844679201784713, 0.185962438950239, 0.1873546768462474, 0.18849384592152763, 0.07685600209725507, 0.07537951420565736, 0.09814764886212757, 0.09376773115577908, 0.10071065587223638, 0.07854984662459463, 0.0881127138446911, 0.10003458391535347, 0.07323742711882242]}, "mutation_prompt": null}
{"id": "439aa7d6-ec77-468d-87ae-533fce427254", "solution": "import numpy as np\n\nclass HybridPSODEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(self.population[i])\n                self.evaluations += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n            \n            # Update velocities and positions (PSO)\n            w = 0.5\n            c1 = 1.5\n            c2 = 1.5\n            r1, r2 = np.random.rand(2)\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.population) +\n                               c2 * r2 * (self.global_best_position - self.population))\n            self.population += self.velocities\n            self.population = np.clip(self.population, self.lower_bound, self.upper_bound)\n\n            # Differential Evolution mutation\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < 0.7, mutant, self.population[i])\n                score = func(trial)\n                self.evaluations += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.population[i] = trial\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = trial\n        return self.global_best_position", "name": "HybridPSODEOptimizer", "description": "A hybrid metaheuristic combining particle swarm optimization (PSO) and differential evolution (DE) to balance exploration and exploitation in optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c91ffa6-c680-4bff-974e-4a24e1bcdc9b", "metadata": {"aucs": [0.8162019198621527, 0.8052390412596931, 0.8671499017887855, 0.7406576454835629, 0.8349462244331937, 0.7978801588473722, 0.8160385380909698, 0.7937027647740104, 0.8484803630528075, 0.3175475070830729, 0.5677434469751342, 0.6006132072599175, 0.37511189904213016, 0.47850287750723985, 0.5789179719010848, 0.345820498938753, 0.197868159603792, 0.5855510287614245, 0.14290933412969353, 0.10285343066318842, 0.08617347126606734, 0.16344825738954294, 0.11426111016624163, 0.17154030244503082, 0.1500545195909595, 0.09615660573273344, 0.12095345880480912, 0.14326007526296036, 0.10326850190804215, 0.10485843432943598, 0.09958016663283054, 0.10122479697758191, 0.11279878431785728, 0.1108552058831036, 0.19642001662564246, 0.1468716684066016, 0.9824311797268734, 0.9559061173869314, 0.9665998858461141, 0.9631960205083535, 0.9623836992634622, 0.9787830750980967, 0.9804584007559933, 0.9615248309310185, 0.9408593753186969, 0.5457306420981212, 0.5724277435587176, 0.6942186298932171, 0.508077167687921, 0.39507693782381537, 0.6862945927832107, 0.3034528014724375, 0.5468792574572825, 0.2890564922408715, 0.2280323488607886, 0.20655302749833993, 0.841984164196956, 0.2673040303750498, 0.27888373092793384, 0.17183292066378797, 0.12366800396522415, 0.14726325231830995, 0.2348932462189306, 0.23926242870721348, 0.20558806077644187, 0.4379335666339189, 0.10829717854301102, 0.13780066055502616, 0.39459728317969167, 0.12863084926402713, 0.3959646510608341, 0.2069090145948418, 0.2225607029120522, 0.38931761426468026, 0.2100665688550284, 0.21101245162019178, 0.2181672397075609, 0.1244273853677823, 0.22675205464168335, 0.2886021349086161, 0.2429224757829752, 0.0012966363828090799, 9.999999999998899e-05, 0.00441137066691577, 0.04298544459160025, 0.054492427941785215, 9.999999999998899e-05, 0.09150074058111535, 0.04505995935936025, 0.0972148650707566, 0.0965284466620635, 0.04857650627137522, 0.14511958378275447, 0.2244870697339204, 0.0809863911014218, 0.07881983254889469, 0.23208230392135043, 0.2312589542025275, 0.05801237300654882, 0.05284438400803515, 0.03140898423593297, 0.16031280146116622, 0.1763980684364591, 0.2307059711395023, 0.3633014934258332, 0.09141743686107817, 0.09694375366861918, 0.06450877569953772, 0.04260158163195571, 0.18827201682179162, 0.08291815889236553, 0.0437154956600736, 0.107852962488593, 0.16994684228447365, 0.10628252054768528, 0.1085589171088559, 0.12772711764272138, 0.6013497685363532, 0.5238784709673732, 0.6247943387513308, 0.387030189771127, 0.5248942249965769, 0.5738370703947666, 0.5492282794835959, 0.6327165870521959, 0.5929914707454615, 0.05581057991264138, 0.11048539871218366, 0.10800134970814346, 0.06687560587514474, 0.06294329822129296, 0.06420151385215744, 0.11805875057300397, 0.10911556825220903, 0.08333775213899719, 0.23693123969670193, 0.2607987182722996, 0.1685093498527418, 0.30675438714865033, 0.2738145450415391, 0.2855012194207608, 0.2869392704650886, 0.18336937319016355, 0.1724326181086281, 0.27464322619658255, 0.4115482753668337, 0.19562594208215012, 0.3138676473667361, 0.20918758759255252, 0.24532315796839943, 0.22822038040097326, 0.3340879846647987, 0.2445860137360838, 0.1680274194193715, 0.18520567244459762, 0.181867808501591, 0.2499867297045042, 0.20741363230290943, 0.23950828513975841, 0.19173676113627824, 0.2335123674069044, 0.18685577106771079, 0.24166003954460014, 0.30432916373848606, 0.18896755128981013, 0.22320698285558416, 0.2051474184230606, 0.1940353846599, 0.21781404425639106, 0.22369892339750308, 0.17531050122612601, 0.19279523286645783, 0.21530007143039442, 0.18961031657852268, 0.22845773841113193, 0.18194943813768527, 0.19059390660669617, 0.6135187040111152, 0.18981486143786663, 0.23957685819450592, 0.7175821659794881, 0.12730098650748045, 0.15462989211565326, 0.8801682748648546, 0.20029772420347847, 0.40860609594563524, 0.09976866129890327, 0.17030174378449703, 0.16141156084679764, 0.1517992594778631, 0.21203849772171035, 0.8690144140140584, 0.6803167932456393, 0.8251270901260329, 0.2091632278852782, 0.20507146780992802, 0.8448683931709664, 0.8012409148618413, 0.18892131999178385, 0.20932892304704775, 0.1778394222608678, 0.21508486307425412, 0.21451084557148714, 0.23844679201784713, 0.185962438950239, 0.1873546768462474, 0.18849384592152763, 0.07685600209725507, 0.07537951420565736, 0.09814764886212757, 0.09376773115577908, 0.10071065587223638, 0.07854984662459463, 0.0881127138446911, 0.10003458391535347, 0.07323742711882242]}, "mutation_prompt": null}
