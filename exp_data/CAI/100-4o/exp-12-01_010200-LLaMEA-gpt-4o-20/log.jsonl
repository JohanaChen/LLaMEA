{"id": "18a8b6fe-f287-4bd2-9800-7875259228f6", "solution": "import numpy as np\n\nclass HybridPSO_ADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.inertia_weight = 0.5\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.vel_limit = (self.upper_bound - self.lower_bound) / 2\n    \n    def __call__(self, func):\n        np.random.seed(0)\n        # Initialize swarm\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-self.vel_limit, self.vel_limit, (self.population_size, self.dim))\n        \n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        \n        evals = self.population_size\n        \n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i] +\n                                 self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.social_coeff * r2 * (global_best_position - positions[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_limit, self.vel_limit)\n\n                # Update position\n                positions[i] += velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                current_score = func(positions[i])\n                evals += 1\n                \n                # Update personal and global bests\n                if current_score < personal_best_scores[i]:\n                    personal_best_positions[i] = positions[i]\n                    personal_best_scores[i] = current_score\n\n                if current_score < global_best_score:\n                    global_best_position = positions[i]\n                    global_best_score = current_score\n\n                if evals >= self.budget:\n                    break\n            \n            # Adaptive Differential Mutation\n            for i in range(self.population_size):\n                if np.random.rand() < self.crossover_prob:\n                    idxs = np.random.choice(self.population_size, 3, replace=False)\n                    a, b, c = personal_best_positions[idxs[0]], personal_best_positions[idxs[1]], personal_best_positions[idxs[2]]\n                    mutant_vector = a + self.mutation_factor * (b - c)\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    \n                    trial_vector = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant_vector, positions[i])\n                    trial_score = func(trial_vector)\n                    evals += 1\n                    \n                    if trial_score < personal_best_scores[i]:\n                        personal_best_positions[i] = trial_vector\n                        personal_best_scores[i] = trial_score\n                        \n                    if trial_score < global_best_score:\n                        global_best_position = trial_vector\n                        global_best_score = trial_score\n                        \n                    if evals >= self.budget:\n                        break\n\n        return global_best_position, global_best_score", "name": "HybridPSO_ADM", "description": "A hybrid Particle Swarm Optimization with Adaptive Differential Mutation to balance exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.29092520194380417, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6709815553125347, 0.6709815553125347, 0.6709815553125347, 0.6298685792747996, 0.6298685792747996, 0.6298685792747996, 0.67636378712352, 0.67636378712352, 0.67636378712352, 0.32145255439747267, 0.32145255439747267, 0.32145255439747267, 0.3443292962827724, 0.3443292962827724, 0.3443292962827724, 0.3239143562924912, 0.3239143562924912, 0.3239143562924912, 0.21964516182032656, 0.21964516182032656, 0.21964516182032656, 0.12664967752185352, 0.12664967752185352, 0.12664967752185352, 0.13855867710161474, 0.13855867710161474, 0.13855867710161474, 0.11349552247549421, 0.11349552247549421, 0.11349552247549421, 0.1116666102659627, 0.1116666102659627, 0.1116666102659627, 0.0989882341347118, 0.0989882341347118, 0.0989882341347118, 0.9872270230501288, 0.9872270230501288, 0.9872270230501288, 0.9847891058138534, 0.9847891058138534, 0.9847891058138534, 0.986630624373701, 0.986630624373701, 0.986630624373701, 0.33248273244738413, 0.33248273244738413, 0.33248273244738413, 0.30956263389485383, 0.30956263389485383, 0.30956263389485383, 0.34448329876526795, 0.34448329876526795, 0.34448329876526795, 0.6331908021402559, 0.6331908021402559, 0.6331908021402559, 0.6165175257539905, 0.6165175257539905, 0.6165175257539905, 0.6171144698793469, 0.6171144698793469, 0.6171144698793469, 0.20065144559795112, 0.20065144559795112, 0.20065144559795112, 0.1205560554302616, 0.1205560554302616, 0.1205560554302616, 0.19190410947494352, 0.19190410947494352, 0.19190410947494352, 0.19820508027891204, 0.19820508027891204, 0.19820508027891204, 0.21815929255966193, 0.21815929255966193, 0.21815929255966193, 0.20471031934095285, 0.20471031934095285, 0.20471031934095285, 0.07243342841507017, 0.07243342841507017, 0.07243342841507017, 0.04687048471076993, 0.04687048471076993, 0.04687048471076993, 0.04404385491785012, 0.04404385491785012, 0.04404385491785012, 0.1875053295892064, 0.1875053295892064, 0.1875053295892064, 0.18509016585674032, 0.18509016585674032, 0.18509016585674032, 0.20244728135451273, 0.20244728135451273, 0.20244728135451273, 0.042030276563321034, 0.042030276563321034, 0.042030276563321034, 0.04141704605428731, 0.04141704605428731, 0.04141704605428731, 0.005558734151636768, 0.005558734151636768, 0.005558734151636768, 0.17695479102373135, 0.17695479102373135, 0.17695479102373135, 0.1192649712245909, 0.1192649712245909, 0.1192649712245909, 0.14050149360823694, 0.14050149360823694, 0.14050149360823694, 0.45875100815372194, 0.45875100815372194, 0.45875100815372194, 0.4584630498914525, 0.4584630498914525, 0.4584630498914525, 0.4555184905859596, 0.4555184905859596, 0.4555184905859596, 0.09108804610180976, 0.09108804610180976, 0.09108804610180976, 0.1246719570145457, 0.1246719570145457, 0.1246719570145457, 0.11657081357441312, 0.11657081357441312, 0.11657081357441312, 0.22936980522351968, 0.22936980522351968, 0.22936980522351968, 0.24248115989240038, 0.24248115989240038, 0.24248115989240038, 0.20961456494789976, 0.20961456494789976, 0.20961456494789976, 0.3306397402735902, 0.3306397402735902, 0.3306397402735902, 0.32447401262632614, 0.32447401262632614, 0.32447401262632614, 0.32727519717144793, 0.32727519717144793, 0.32727519717144793, 0.2096853651114966, 0.2096853651114966, 0.2096853651114966, 0.22203232460735156, 0.22203232460735156, 0.22203232460735156, 0.25904117574873564, 0.25904117574873564, 0.25904117574873564, 0.1931460273733171, 0.1931460273733171, 0.1931460273733171, 0.18212633257124455, 0.18212633257124455, 0.18212633257124455, 0.18838022487007944, 0.18838022487007944, 0.18838022487007944, 0.2049703099688669, 0.2049703099688669, 0.2049703099688669, 0.21170517896025987, 0.21170517896025987, 0.21170517896025987, 0.22502340381972186, 0.22502340381972186, 0.22502340381972186, 0.7565255293798454, 0.7565255293798454, 0.7565255293798454, 0.5360162493309986, 0.5360162493309986, 0.5360162493309986, 0.732138644496765, 0.732138644496765, 0.732138644496765, 0.4418153656887216, 0.4418153656887216, 0.4418153656887216, 0.20581802652959036, 0.20581802652959036, 0.20581802652959036, 0.21242107685914458, 0.21242107685914458, 0.21242107685914458, 0.1847278774147466, 0.1847278774147466, 0.1847278774147466, 0.18258659506792763, 0.18258659506792763, 0.18258659506792763, 0.19258072017909367, 0.19258072017909367, 0.19258072017909367, 0.08344520613293693, 0.08344520613293693, 0.08344520613293693, 0.09167743224156821, 0.09167743224156821, 0.09167743224156821, 0.07561723986942848, 0.07561723986942848, 0.07561723986942848]}, "mutation_prompt": null}
{"id": "7369b69f-a73b-4000-9f82-3f295d6e60a3", "solution": "import numpy as np\n\nclass HybridPSO_ADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.inertia_weight = 0.5\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.vel_limit = (self.upper_bound - self.lower_bound) / 2\n    \n    def __call__(self, func):\n        np.random.seed(0)\n        # Initialize swarm\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-self.vel_limit, self.vel_limit, (self.population_size, self.dim))\n        \n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        \n        evals = self.population_size\n        \n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i] +\n                                 self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.social_coeff * r2 * (global_best_position - positions[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_limit, self.vel_limit)\n\n                # Update position\n                positions[i] += velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                current_score = func(positions[i])\n                evals += 1\n                \n                # Update personal and global bests\n                if current_score < personal_best_scores[i]:\n                    personal_best_positions[i] = positions[i]\n                    personal_best_scores[i] = current_score\n\n                if current_score < global_best_score:\n                    global_best_position = positions[i]\n                    global_best_score = current_score\n\n                if evals >= self.budget:\n                    break\n            \n            # Adaptive Differential Mutation\n            for i in range(self.population_size):\n                if np.random.rand() < self.crossover_prob:\n                    idxs = np.random.choice(self.population_size, 3, replace=False)\n                    a, b, c = personal_best_positions[idxs[0]], personal_best_positions[idxs[1]], personal_best_positions[idxs[2]]\n                    mutant_vector = a + self.mutation_factor * (b - c)\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    \n                    trial_vector = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant_vector, positions[i])\n                    trial_score = func(trial_vector)\n                    evals += 1\n                    \n                    if trial_score < personal_best_scores[i]:\n                        personal_best_positions[i] = trial_vector\n                        personal_best_scores[i] = trial_score\n                        \n                    if trial_score < global_best_score:\n                        global_best_position = trial_vector\n                        global_best_score = trial_score\n                        \n                    if evals >= self.budget:\n                        break\n\n        return global_best_position, global_best_score", "name": "HybridPSO_ADM", "description": "A hybrid Particle Swarm Optimization with Adaptive Differential Mutation to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "18a8b6fe-f287-4bd2-9800-7875259228f6", "metadata": {"aucs": [0.6709815553125347, 0.6709815553125347, 0.6709815553125347, 0.6298685792747996, 0.6298685792747996, 0.6298685792747996, 0.67636378712352, 0.67636378712352, 0.67636378712352, 0.32145255439747267, 0.32145255439747267, 0.32145255439747267, 0.3443292962827724, 0.3443292962827724, 0.3443292962827724, 0.3239143562924912, 0.3239143562924912, 0.3239143562924912, 0.21964516182032656, 0.21964516182032656, 0.21964516182032656, 0.12664967752185352, 0.12664967752185352, 0.12664967752185352, 0.13855867710161474, 0.13855867710161474, 0.13855867710161474, 0.11349552247549421, 0.11349552247549421, 0.11349552247549421, 0.1116666102659627, 0.1116666102659627, 0.1116666102659627, 0.0989882341347118, 0.0989882341347118, 0.0989882341347118, 0.9872270230501288, 0.9872270230501288, 0.9872270230501288, 0.9847891058138534, 0.9847891058138534, 0.9847891058138534, 0.986630624373701, 0.986630624373701, 0.986630624373701, 0.33248273244738413, 0.33248273244738413, 0.33248273244738413, 0.30956263389485383, 0.30956263389485383, 0.30956263389485383, 0.34448329876526795, 0.34448329876526795, 0.34448329876526795, 0.6331908021402559, 0.6331908021402559, 0.6331908021402559, 0.6165175257539905, 0.6165175257539905, 0.6165175257539905, 0.6171144698793469, 0.6171144698793469, 0.6171144698793469, 0.20065144559795112, 0.20065144559795112, 0.20065144559795112, 0.1205560554302616, 0.1205560554302616, 0.1205560554302616, 0.19190410947494352, 0.19190410947494352, 0.19190410947494352, 0.19820508027891204, 0.19820508027891204, 0.19820508027891204, 0.21815929255966193, 0.21815929255966193, 0.21815929255966193, 0.20471031934095285, 0.20471031934095285, 0.20471031934095285, 0.07243342841507017, 0.07243342841507017, 0.07243342841507017, 0.04687048471076993, 0.04687048471076993, 0.04687048471076993, 0.04404385491785012, 0.04404385491785012, 0.04404385491785012, 0.1875053295892064, 0.1875053295892064, 0.1875053295892064, 0.18509016585674032, 0.18509016585674032, 0.18509016585674032, 0.20244728135451273, 0.20244728135451273, 0.20244728135451273, 0.042030276563321034, 0.042030276563321034, 0.042030276563321034, 0.04141704605428731, 0.04141704605428731, 0.04141704605428731, 0.005558734151636768, 0.005558734151636768, 0.005558734151636768, 0.17695479102373135, 0.17695479102373135, 0.17695479102373135, 0.1192649712245909, 0.1192649712245909, 0.1192649712245909, 0.14050149360823694, 0.14050149360823694, 0.14050149360823694, 0.45875100815372194, 0.45875100815372194, 0.45875100815372194, 0.4584630498914525, 0.4584630498914525, 0.4584630498914525, 0.4555184905859596, 0.4555184905859596, 0.4555184905859596, 0.09108804610180976, 0.09108804610180976, 0.09108804610180976, 0.1246719570145457, 0.1246719570145457, 0.1246719570145457, 0.11657081357441312, 0.11657081357441312, 0.11657081357441312, 0.22936980522351968, 0.22936980522351968, 0.22936980522351968, 0.24248115989240038, 0.24248115989240038, 0.24248115989240038, 0.20961456494789976, 0.20961456494789976, 0.20961456494789976, 0.3306397402735902, 0.3306397402735902, 0.3306397402735902, 0.32447401262632614, 0.32447401262632614, 0.32447401262632614, 0.32727519717144793, 0.32727519717144793, 0.32727519717144793, 0.2096853651114966, 0.2096853651114966, 0.2096853651114966, 0.22203232460735156, 0.22203232460735156, 0.22203232460735156, 0.25904117574873564, 0.25904117574873564, 0.25904117574873564, 0.1931460273733171, 0.1931460273733171, 0.1931460273733171, 0.18212633257124455, 0.18212633257124455, 0.18212633257124455, 0.18838022487007944, 0.18838022487007944, 0.18838022487007944, 0.2049703099688669, 0.2049703099688669, 0.2049703099688669, 0.21170517896025987, 0.21170517896025987, 0.21170517896025987, 0.22502340381972186, 0.22502340381972186, 0.22502340381972186, 0.7565255293798454, 0.7565255293798454, 0.7565255293798454, 0.5360162493309986, 0.5360162493309986, 0.5360162493309986, 0.732138644496765, 0.732138644496765, 0.732138644496765, 0.4418153656887216, 0.4418153656887216, 0.4418153656887216, 0.20581802652959036, 0.20581802652959036, 0.20581802652959036, 0.21242107685914458, 0.21242107685914458, 0.21242107685914458, 0.1847278774147466, 0.1847278774147466, 0.1847278774147466, 0.18258659506792763, 0.18258659506792763, 0.18258659506792763, 0.19258072017909367, 0.19258072017909367, 0.19258072017909367, 0.08344520613293693, 0.08344520613293693, 0.08344520613293693, 0.09167743224156821, 0.09167743224156821, 0.09167743224156821, 0.07561723986942848, 0.07561723986942848, 0.07561723986942848]}, "mutation_prompt": null}
