{"id": "48161a52-68f1-4699-8caf-aff2ba837352", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temperature = 100.0\n        self.cooling_rate = 0.95\n\n    def __call__(self, func):\n        eval_count = 0\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        eval_count += self.population_size\n\n        while eval_count < self.budget:\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                x_r1, x_r2, x_r3 = population[indices]\n                donor_vector = x_r1 + self.F * (x_r2 - x_r3)\n                donor_vector = np.clip(donor_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.copy(population[i])\n                crossover_points = np.random.rand(self.dim) < self.CR\n                trial_vector[crossover_points] = donor_vector[crossover_points]\n\n                # Simulated Annealing Acceptance\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    new_population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                else:\n                    acceptance_probability = np.exp((fitness[i] - trial_fitness) / self.temperature)\n                    if np.random.rand() < acceptance_probability:\n                        new_population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            population = new_population\n            self.temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        return best_solution, best_fitness", "name": "HybridDE_SA", "description": "A hybrid metaheuristic combining differential evolution and simulated annealing to efficiently explore and exploit diverse solution spaces in black-box optimization.", "configspace": "", "generation": 0, "fitness": 0.3520024035333452, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6405846993765452, 0.6354241121004836, 0.6352340469815574, 0.6400640799673214, 0.6404935174191801, 0.6357236073197827, 0.6458617093140345, 0.6372172801680072, 0.6340788557843224, 0.619952565954523, 0.6310649025379191, 0.6293369016602972, 0.6163642328998931, 0.6259219236703597, 0.6212141277632219, 0.625341475437702, 0.6314470323424912, 0.6352610997699268, 0.5066643021535135, 0.17110642516142838, 0.1703886756425994, 0.17002982729101657, 0.1575635337226573, 0.17677816245784883, 0.16391138652456316, 0.46580133452782835, 0.15737597212201504, 0.1451482211605607, 0.13593604035024487, 0.14002912498216025, 0.13967806775457814, 0.14954635191711163, 0.13265523045584782, 0.440750756842761, 0.15879778529131583, 0.10941037777801466, 0.9760163062690218, 0.8722430356103439, 0.8455730228131432, 0.9637264735577236, 0.9379327153854214, 0.7830885804569868, 0.9171411030839858, 0.7553438637897071, 0.910439727720025, 0.5589097157465892, 0.12321836065682235, 0.5479921788533946, 0.5621282008824033, 0.5529607007204411, 0.5585749111059104, 0.22962488543073756, 0.44545609590949864, 0.5579602515841677, 0.765605625485343, 0.7993187279363634, 0.7752689571846947, 0.21545430515384933, 0.8005339275436475, 0.7859500033881348, 0.7853895541264535, 0.7636811843399315, 0.7732897302237203, 0.15608417162410715, 0.17295171676070842, 0.1305497510105995, 0.17833774293793847, 0.1448998306360585, 0.39934425975879284, 0.16756066437721495, 0.18234721572279888, 0.18931712933267364, 0.15057352636472154, 0.1427830185789184, 0.1573479841220493, 0.23669630548269827, 0.17899844391385666, 0.2090600543745329, 0.2299781136639889, 0.1783079135908272, 0.6029769249437105, 0.17150821807733996, 0.28918621361323626, 0.2210579989108944, 0.34128787028685936, 0.0831071834792243, 0.20419312213206253, 0.2102345900025402, 0.4857345203571759, 0.1048247283301511, 0.3844936039155272, 0.118040538691909, 0.5106515910638261, 0.23258956739561054, 0.17795279329178504, 0.07328137675594515, 0.37352138399765, 0.2713209949206271, 0.6340091699517583, 0.10952853586771183, 0.2656177537735793, 0.06212344337561282, 0.1234514892559786, 0.511636493266767, 0.3392435972399839, 0.32737698257464987, 0.19960801646645743, 0.10514898899007075, 0.4247992477255589, 0.32780712383420374, 0.3608022772286428, 0.4858485793658982, 0.5156736102081372, 0.4199124401563483, 0.39828375336025423, 0.4279663022789294, 0.12101123447235096, 0.5442157134448236, 0.6095440229558482, 0.5849912088853861, 0.5622602939488506, 0.6009011833449196, 0.5578408323257116, 0.5671141353062618, 0.5810115941979275, 0.5760326718845494, 0.12029250901764577, 0.12228644419168211, 0.4667354249561805, 0.13220195687521097, 0.1364174377570504, 0.15129157184858033, 0.1362327929173478, 0.16136188253143413, 0.10591483823319503, 0.14838245043989462, 0.12558335245511243, 0.19109773517472017, 0.1816494196932944, 0.13800790193491153, 0.1748995836766084, 0.1969814288724936, 0.18270719718674067, 0.22389428868334604, 0.5303555727248019, 0.5039342203296814, 0.27133752836160385, 0.42756567683461466, 0.47818814935243337, 0.4750532118164579, 0.5457406788393111, 0.5522338445640169, 0.5517158805040939, 0.38690914863800874, 0.29221241681827737, 0.47489882259551797, 0.3593955642272779, 0.5330471487924004, 0.48533603296170436, 0.5116388671700485, 0.29973024963598716, 0.40448811104985893, 0.20111044360699604, 0.20283373744528677, 0.1989348199846196, 0.2306101474749267, 0.20039290061913195, 0.19189077617562467, 0.19922204433227408, 0.1901431885553283, 0.21092723104563527, 0.5420993746475237, 0.5480798489599811, 0.5658155596491132, 0.2301403183103613, 0.5357376329141503, 0.2030286468028789, 0.22908925546013648, 0.23249083297926088, 0.2067248857203744, 0.14706962042121774, 0.16817421611650973, 0.16466343425874852, 0.16822916453824488, 0.18381519024943305, 0.7252169928236567, 0.16447714496333443, 0.16140656877576642, 0.7369791480558632, 0.1259487965567363, 0.11266801400253457, 0.18155831958864788, 0.183927689215457, 0.20397573072347464, 0.16118065710657503, 0.12614266163519283, 0.20511571627029201, 0.15273180626309735, 0.1972081876612607, 0.19311979526727885, 0.19881616284549053, 0.21716150899914033, 0.18792951449098927, 0.19247672366781232, 0.20297999930769672, 0.2076290231497866, 0.18582311146046138, 0.09966107753568154, 0.09121266316443488, 0.09384087829761234, 0.08968371821763343, 0.08964423828421109, 0.08314700813001852, 0.09210951147551039, 0.1037384619199696, 0.09422407174982383]}, "mutation_prompt": null}
{"id": "8f35a3cb-fb9b-4bb1-a998-2a9f7726b677", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temperature = 100.0\n        self.cooling_rate = 0.95\n\n    def __call__(self, func):\n        eval_count = 0\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        eval_count += self.population_size\n\n        while eval_count < self.budget:\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                x_r1, x_r2, x_r3 = population[indices]\n                donor_vector = x_r1 + self.F * (x_r2 - x_r3)\n                donor_vector = np.clip(donor_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.copy(population[i])\n                crossover_points = np.random.rand(self.dim) < self.CR\n                trial_vector[crossover_points] = donor_vector[crossover_points]\n\n                # Simulated Annealing Acceptance\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    new_population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                else:\n                    acceptance_probability = np.exp((fitness[i] - trial_fitness) / self.temperature)\n                    if np.random.rand() < acceptance_probability:\n                        new_population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            population = new_population\n            self.temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        return best_solution, best_fitness", "name": "HybridDE_SA", "description": "A hybrid metaheuristic combining differential evolution and simulated annealing to efficiently explore and exploit diverse solution spaces in black-box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "48161a52-68f1-4699-8caf-aff2ba837352", "metadata": {"aucs": [0.6405846993765452, 0.6354241121004836, 0.6352340469815574, 0.6400640799673214, 0.6404935174191801, 0.6357236073197827, 0.6458617093140345, 0.6372172801680072, 0.6340788557843224, 0.619952565954523, 0.6310649025379191, 0.6293369016602972, 0.6163642328998931, 0.6259219236703597, 0.6212141277632219, 0.625341475437702, 0.6314470323424912, 0.6352610997699268, 0.5066643021535135, 0.17110642516142838, 0.1703886756425994, 0.17002982729101657, 0.1575635337226573, 0.17677816245784883, 0.16391138652456316, 0.46580133452782835, 0.15737597212201504, 0.1451482211605607, 0.13593604035024487, 0.14002912498216025, 0.13967806775457814, 0.14954635191711163, 0.13265523045584782, 0.440750756842761, 0.15879778529131583, 0.10941037777801466, 0.9760163062690218, 0.8722430356103439, 0.8455730228131432, 0.9637264735577236, 0.9379327153854214, 0.7830885804569868, 0.9171411030839858, 0.7553438637897071, 0.910439727720025, 0.5589097157465892, 0.12321836065682235, 0.5479921788533946, 0.5621282008824033, 0.5529607007204411, 0.5585749111059104, 0.22962488543073756, 0.44545609590949864, 0.5579602515841677, 0.765605625485343, 0.7993187279363634, 0.7752689571846947, 0.21545430515384933, 0.8005339275436475, 0.7859500033881348, 0.7853895541264535, 0.7636811843399315, 0.7732897302237203, 0.15608417162410715, 0.17295171676070842, 0.1305497510105995, 0.17833774293793847, 0.1448998306360585, 0.39934425975879284, 0.16756066437721495, 0.18234721572279888, 0.18931712933267364, 0.15057352636472154, 0.1427830185789184, 0.1573479841220493, 0.23669630548269827, 0.17899844391385666, 0.2090600543745329, 0.2299781136639889, 0.1783079135908272, 0.6029769249437105, 0.17150821807733996, 0.28918621361323626, 0.2210579989108944, 0.34128787028685936, 0.0831071834792243, 0.20419312213206253, 0.2102345900025402, 0.4857345203571759, 0.1048247283301511, 0.3844936039155272, 0.118040538691909, 0.5106515910638261, 0.23258956739561054, 0.17795279329178504, 0.07328137675594515, 0.37352138399765, 0.2713209949206271, 0.6340091699517583, 0.10952853586771183, 0.2656177537735793, 0.06212344337561282, 0.1234514892559786, 0.511636493266767, 0.3392435972399839, 0.32737698257464987, 0.19960801646645743, 0.10514898899007075, 0.4247992477255589, 0.32780712383420374, 0.3608022772286428, 0.4858485793658982, 0.5156736102081372, 0.4199124401563483, 0.39828375336025423, 0.4279663022789294, 0.12101123447235096, 0.5442157134448236, 0.6095440229558482, 0.5849912088853861, 0.5622602939488506, 0.6009011833449196, 0.5578408323257116, 0.5671141353062618, 0.5810115941979275, 0.5760326718845494, 0.12029250901764577, 0.12228644419168211, 0.4667354249561805, 0.13220195687521097, 0.1364174377570504, 0.15129157184858033, 0.1362327929173478, 0.16136188253143413, 0.10591483823319503, 0.14838245043989462, 0.12558335245511243, 0.19109773517472017, 0.1816494196932944, 0.13800790193491153, 0.1748995836766084, 0.1969814288724936, 0.18270719718674067, 0.22389428868334604, 0.5303555727248019, 0.5039342203296814, 0.27133752836160385, 0.42756567683461466, 0.47818814935243337, 0.4750532118164579, 0.5457406788393111, 0.5522338445640169, 0.5517158805040939, 0.38690914863800874, 0.29221241681827737, 0.47489882259551797, 0.3593955642272779, 0.5330471487924004, 0.48533603296170436, 0.5116388671700485, 0.29973024963598716, 0.40448811104985893, 0.20111044360699604, 0.20283373744528677, 0.1989348199846196, 0.2306101474749267, 0.20039290061913195, 0.19189077617562467, 0.19922204433227408, 0.1901431885553283, 0.21092723104563527, 0.5420993746475237, 0.5480798489599811, 0.5658155596491132, 0.2301403183103613, 0.5357376329141503, 0.2030286468028789, 0.22908925546013648, 0.23249083297926088, 0.2067248857203744, 0.14706962042121774, 0.16817421611650973, 0.16466343425874852, 0.16822916453824488, 0.18381519024943305, 0.7252169928236567, 0.16447714496333443, 0.16140656877576642, 0.7369791480558632, 0.1259487965567363, 0.11266801400253457, 0.18155831958864788, 0.183927689215457, 0.20397573072347464, 0.16118065710657503, 0.12614266163519283, 0.20511571627029201, 0.15273180626309735, 0.1972081876612607, 0.19311979526727885, 0.19881616284549053, 0.21716150899914033, 0.18792951449098927, 0.19247672366781232, 0.20297999930769672, 0.2076290231497866, 0.18582311146046138, 0.09966107753568154, 0.09121266316443488, 0.09384087829761234, 0.08968371821763343, 0.08964423828421109, 0.08314700813001852, 0.09210951147551039, 0.1037384619199696, 0.09422407174982383]}, "mutation_prompt": null}
