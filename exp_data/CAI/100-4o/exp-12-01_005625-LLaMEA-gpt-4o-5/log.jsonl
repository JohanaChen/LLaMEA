{"id": "d32a3227-71eb-4766-89dc-4adb37f033e7", "solution": "import numpy as np\n\nclass HybridDELocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lb = -5.0  # Lower bound\n        self.ub = 5.0  # Upper bound\n        self.local_search_iters = 5  # Local Search Iterations\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Differential Evolution Mutation\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lb, self.ub)\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n                \n                # Local Search - Simple Hill Climbing\n                trial = self.local_search(func, trial, evals)\n                evals += self.local_search_iters\n\n                # Selection\n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]\n\n    def local_search(self, func, candidate, current_evals):\n        step_size = 0.1\n        for _ in range(self.local_search_iters):\n            if current_evals >= self.budget:\n                break\n            candidate_eval = func(candidate)\n            for j in range(self.dim):\n                if current_evals >= self.budget:\n                    break\n                perturbed_candidate = np.copy(candidate)\n                perturbed_candidate[j] += step_size * (np.random.rand() - 0.5) * 2\n                perturbed_candidate = np.clip(perturbed_candidate, self.lb, self.ub)\n                new_eval = func(perturbed_candidate)\n                current_evals += 1\n                if new_eval < candidate_eval:\n                    candidate = perturbed_candidate\n                    candidate_eval = new_eval\n        return candidate", "name": "HybridDELocalSearch", "description": "A hybrid metaheuristic combining Differential Evolution and Local Search to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.07655693618133272, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.1303705489828102, 0.16940337462526622, 0.1482183294218521, 0.13210795013862386, 0.16540566195137107, 0.2085885294299067, 0.13285411866273988, 0.11429408178674183, 0.12177643291556106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034093057735659404, 0.049658117360900755, 0.03499857820358143, 0.029748553182448623, 0.026806833056787216, 0.05032148679315762, 0.0676682130430245, 0.026265336980570653, 0.04932250973299046, 0.017674767425538307, 0.020407614839930255, 0.010690041707513753, 0.01959972157639278, 0.0034242303079740077, 0.016740813991925618, 0.018519906040897482, 0.018199881633131576, 0.01420576991926048, 0.10593371069245006, 0.06734324007411363, 0.13285192402704904, 0.5366809098411802, 0.27027836043558084, 0.11024224148209583, 0.12203893853605075, 0.0868107632143521, 0.2838292842752749, 0.06274794416174423, 0.010715905543951187, 0.02748550052792398, 0.026647314013664936, 0.04230983296201307, 0.03846564049637635, 0.04651242549681156, 0.032188968789045425, 0.047859483588913454, 0.1051088712022562, 0.08826745783330403, 0.0704442683754527, 0.08155987811749421, 0.08777079389431564, 0.08388368919694855, 0.09458850728966539, 0.11048976888547912, 0.07857377473944904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00548472150791568, 0.010935820228860083, 0.0007465557032412251, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07865610497911946, 0.051964638457658974, 0.05167193029377726, 0.05791795951547052, 0.04251471331795875, 0.05994002122571296, 0.07380491298089786, 0.0357462613328573, 0.052321184634603, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13837155795157285, 0.16640479603340586, 0.15371790904934202, 0.17611543329407375, 0.15329565061296158, 0.14475690369114524, 0.16194973284926328, 0.13834584272125572, 0.13049078931659552, 0.04037209963685795, 0.0538042405861896, 0.051320629388045935, 0.06588024505205448, 0.0473220545521319, 0.02579161612158587, 0.0351820971447121, 0.030764807232459113, 0.054633178613262, 0.11000312354118758, 0.1179541367499376, 0.12589198247118616, 0.10580263387734068, 0.1300265721722086, 0.13122591025169206, 0.14769020142853861, 0.1200758300802558, 0.13672794542125943, 0.1765744175724383, 0.15127761326614053, 0.1613932299901244, 0.1791257441043761, 0.12556588920188516, 0.13511419779862222, 0.14476878026644868, 0.17715345166184093, 0.14680774520146256, 0.11515177859902015, 0.11373623032223934, 0.08405323226901706, 0.08989893936251392, 0.08192725888450803, 0.0841465570519202, 0.09332320605005295, 0.0997711199450243, 0.08933942641572634, 0.152287348496718, 0.15299141767569235, 0.16493275395974794, 0.1514777351039147, 0.13698418695635806, 0.1360837838524791, 0.15674427587306727, 0.1447405739738955, 0.1655810985006788, 0.03910683171251206, 0.09068832471594268, 0.05501358585626803, 0.07783165545511672, 0.014533410298044003, 9.999999999998899e-05, 0.11637606808400447, 0.01736400104275304, 0.04860109454146222, 0.13187057020147985, 0.12951645976797588, 0.16922370980009616, 0.11157930022328655, 0.14942675146257411, 0.1438695209271722, 0.1070176662487543, 0.10654490305405018, 0.11027352966273207, 0.1398170740957887, 0.10267165755511809, 0.0982943910080919, 0.13245657710419878, 0.05980537656699403, 0.06390745451963598, 0.10356701743106678, 0.12139382824444622, 0.13209465809213505, 0.17495872699105308, 0.18888730520985797, 0.1952870428675102, 0.20888071995346869, 0.18601002798963617, 0.20776252091701786, 0.1961065979107499, 0.21262286656866214, 0.2019333980069007, 0.055292568353055294, 0.05449307670365655, 0.04891432536456053, 0.049844234008665445, 0.05870837093251302, 0.04520244258255357, 0.0551260563725009, 0.04528994724716284, 0.06336397400262228]}, "mutation_prompt": null}
{"id": "5c1ca008-c056-4195-8c95-b49da487b34b", "solution": "import numpy as np\n\nclass HybridDELocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lb = -5.0  # Lower bound\n        self.ub = 5.0  # Upper bound\n        self.local_search_iters = 5  # Local Search Iterations\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Differential Evolution Mutation\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lb, self.ub)\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n                \n                # Local Search - Simple Hill Climbing\n                trial = self.local_search(func, trial, evals)\n                evals += self.local_search_iters\n\n                # Selection\n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]\n\n    def local_search(self, func, candidate, current_evals):\n        step_size = 0.1\n        for _ in range(self.local_search_iters):\n            if current_evals >= self.budget:\n                break\n            candidate_eval = func(candidate)\n            for j in range(self.dim):\n                if current_evals >= self.budget:\n                    break\n                perturbed_candidate = np.copy(candidate)\n                perturbed_candidate[j] += step_size * (np.random.rand() - 0.5) * 2\n                perturbed_candidate = np.clip(perturbed_candidate, self.lb, self.ub)\n                new_eval = func(perturbed_candidate)\n                current_evals += 1\n                if new_eval < candidate_eval:\n                    candidate = perturbed_candidate\n                    candidate_eval = new_eval\n        return candidate", "name": "HybridDELocalSearch", "description": "A hybrid metaheuristic combining Differential Evolution and Local Search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d32a3227-71eb-4766-89dc-4adb37f033e7", "metadata": {"aucs": [0.1303705489828102, 0.16940337462526622, 0.1482183294218521, 0.13210795013862386, 0.16540566195137107, 0.2085885294299067, 0.13285411866273988, 0.11429408178674183, 0.12177643291556106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034093057735659404, 0.049658117360900755, 0.03499857820358143, 0.029748553182448623, 0.026806833056787216, 0.05032148679315762, 0.0676682130430245, 0.026265336980570653, 0.04932250973299046, 0.017674767425538307, 0.020407614839930255, 0.010690041707513753, 0.01959972157639278, 0.0034242303079740077, 0.016740813991925618, 0.018519906040897482, 0.018199881633131576, 0.01420576991926048, 0.10593371069245006, 0.06734324007411363, 0.13285192402704904, 0.5366809098411802, 0.27027836043558084, 0.11024224148209583, 0.12203893853605075, 0.0868107632143521, 0.2838292842752749, 0.06274794416174423, 0.010715905543951187, 0.02748550052792398, 0.026647314013664936, 0.04230983296201307, 0.03846564049637635, 0.04651242549681156, 0.032188968789045425, 0.047859483588913454, 0.1051088712022562, 0.08826745783330403, 0.0704442683754527, 0.08155987811749421, 0.08777079389431564, 0.08388368919694855, 0.09458850728966539, 0.11048976888547912, 0.07857377473944904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00548472150791568, 0.010935820228860083, 0.0007465557032412251, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07865610497911946, 0.051964638457658974, 0.05167193029377726, 0.05791795951547052, 0.04251471331795875, 0.05994002122571296, 0.07380491298089786, 0.0357462613328573, 0.052321184634603, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13837155795157285, 0.16640479603340586, 0.15371790904934202, 0.17611543329407375, 0.15329565061296158, 0.14475690369114524, 0.16194973284926328, 0.13834584272125572, 0.13049078931659552, 0.04037209963685795, 0.0538042405861896, 0.051320629388045935, 0.06588024505205448, 0.0473220545521319, 0.02579161612158587, 0.0351820971447121, 0.030764807232459113, 0.054633178613262, 0.11000312354118758, 0.1179541367499376, 0.12589198247118616, 0.10580263387734068, 0.1300265721722086, 0.13122591025169206, 0.14769020142853861, 0.1200758300802558, 0.13672794542125943, 0.1765744175724383, 0.15127761326614053, 0.1613932299901244, 0.1791257441043761, 0.12556588920188516, 0.13511419779862222, 0.14476878026644868, 0.17715345166184093, 0.14680774520146256, 0.11515177859902015, 0.11373623032223934, 0.08405323226901706, 0.08989893936251392, 0.08192725888450803, 0.0841465570519202, 0.09332320605005295, 0.0997711199450243, 0.08933942641572634, 0.152287348496718, 0.15299141767569235, 0.16493275395974794, 0.1514777351039147, 0.13698418695635806, 0.1360837838524791, 0.15674427587306727, 0.1447405739738955, 0.1655810985006788, 0.03910683171251206, 0.09068832471594268, 0.05501358585626803, 0.07783165545511672, 0.014533410298044003, 9.999999999998899e-05, 0.11637606808400447, 0.01736400104275304, 0.04860109454146222, 0.13187057020147985, 0.12951645976797588, 0.16922370980009616, 0.11157930022328655, 0.14942675146257411, 0.1438695209271722, 0.1070176662487543, 0.10654490305405018, 0.11027352966273207, 0.1398170740957887, 0.10267165755511809, 0.0982943910080919, 0.13245657710419878, 0.05980537656699403, 0.06390745451963598, 0.10356701743106678, 0.12139382824444622, 0.13209465809213505, 0.17495872699105308, 0.18888730520985797, 0.1952870428675102, 0.20888071995346869, 0.18601002798963617, 0.20776252091701786, 0.1961065979107499, 0.21262286656866214, 0.2019333980069007, 0.055292568353055294, 0.05449307670365655, 0.04891432536456053, 0.049844234008665445, 0.05870837093251302, 0.04520244258255357, 0.0551260563725009, 0.04528994724716284, 0.06336397400262228]}, "mutation_prompt": null}
