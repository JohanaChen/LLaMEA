{"id": "ed091e48-6ec3-4b33-a5b0-a41e397a6197", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # differential weight\n        self.CR = 0.9  # crossover probability\n    \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                \n                if evals >= self.budget:\n                    break\n            \n            # Local search phase\n            best_idx = np.argmin(fitness)\n            best_ind = population[best_idx]\n            step_size = (self.upper_bound - self.lower_bound) * 0.1\n            for _ in range(5):  # Attempt 5 local refinements\n                perturbation = np.random.uniform(-step_size, step_size, self.dim)\n                candidate = np.clip(best_ind + perturbation, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evals += 1\n                \n                if candidate_fitness < fitness[best_idx]:\n                    population[best_idx] = candidate\n                    fitness[best_idx] = candidate_fitness\n                \n                if evals >= self.budget:\n                    break\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Population Size and Local Search Refinement for Balanced Exploration and Exploitation.", "configspace": "", "generation": 0, "fitness": 0.38440446645661136, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7938119716043734, 0.7527897735124858, 0.7796227930523095, 0.7909854693324714, 0.8084843663109087, 0.8079324417572995, 0.8076057559897325, 0.8026817959262674, 0.8059129669246492, 0.6399435555157338, 0.6710683407453639, 0.644903443685153, 0.6435104101468223, 0.6733922690065692, 0.6370154446345494, 0.6424519951590933, 0.6593306435526871, 0.6577045868971076, 0.13702678208410435, 0.1109963870457501, 0.14336090922681055, 0.1396135029279909, 0.10392411915594746, 0.12624960433026322, 0.12935088200740041, 0.13095892692816125, 0.11751478107547242, 0.10258703605444497, 0.10929062514733301, 0.10919230381673861, 0.11988056083306076, 0.09924963289537114, 0.10785861076023051, 0.10766501208547019, 0.11657527566501302, 0.10898673737940301, 0.9763639614653694, 0.9582254818559809, 0.9560387503317106, 0.951476593301396, 0.9727219777806373, 0.9354574618858205, 0.9651299231544277, 0.9664048655763947, 0.9891464746550492, 0.5108435182721573, 0.4689351792579096, 0.4818597849389872, 0.46124418870439654, 0.4623090577003429, 0.48944558697242235, 0.5260611533799031, 0.5010462689422082, 0.5114835129004363, 0.7837970882013524, 0.7257829482932021, 0.7377856630582038, 0.7303858390912753, 0.7767603222741863, 0.772366756485363, 0.7019448844999157, 0.7915822364032499, 0.7015667749214026, 0.46169207522289857, 0.46025298491482536, 0.3540606078123808, 0.3768322515503737, 0.5134536900360254, 0.40181077042158553, 0.44531284506894697, 0.41214675572759374, 0.4428637718117371, 0.3736701484450804, 0.3485912948322891, 0.4281006523233022, 0.4015671581021246, 0.32400106704454534, 0.4703545105350586, 0.38571713854104706, 0.36923499652819514, 0.43095735931699386, 0.35065311097839735, 0.3251246697306144, 0.2942345145608397, 0.3761880807079183, 0.38210609540311924, 0.3397221752476123, 0.29801972942088406, 0.3138838744711967, 0.4627210086302621, 0.4631949084496466, 0.4671083293291768, 0.5259846205737296, 0.4794704607777569, 0.5160468027742764, 0.4274840758275993, 0.46658842843581894, 0.5324315945131284, 0.5513518222033574, 0.1626567709492318, 0.06059454096522654, 0.12884151514936837, 0.2418487834557459, 0.1540499759738757, 0.22566275151804682, 0.11517198302994325, 0.12142223433268629, 0.1149869572724116, 0.33186195996567436, 0.2940227284481681, 0.2861755293793271, 0.31901309334051153, 0.31803747159852425, 0.3087317333551427, 0.290936882029614, 0.33483724093129086, 0.2911424128615495, 0.7023596245074344, 0.684087599143661, 0.6896204562415614, 0.670360866050582, 0.7056125887910611, 0.6833349993444094, 0.6680307072024569, 0.6854141631726987, 0.7241438571093006, 0.11048057832281688, 0.10189337918586228, 0.08561518342920826, 0.11016213407536146, 0.11679927389915845, 0.10281889260827792, 0.08970537557459135, 0.09288743185435144, 0.09954100799271204, 0.1959774946356332, 0.24340632730549938, 0.23433449145289575, 0.26242927086164414, 0.21525209179933813, 0.16928706112607883, 0.3926561429000166, 0.21379339411988008, 0.17942194195481243, 0.3673661477975658, 0.3341784039366843, 0.35363286348299106, 0.3435633580430304, 0.3976679226620028, 0.33508511032202304, 0.39966849787866354, 0.41181343031665874, 0.413995602341101, 0.29657169628374036, 0.27340423886842413, 0.25500490335973924, 0.2893035954227833, 0.2566563918028113, 0.2786116194699175, 0.29890778950749963, 0.3255544475168236, 0.28156911351277936, 0.19110107035295898, 0.19947841963687274, 0.1735457596102955, 0.20999146903217114, 0.17637975797411198, 0.22425144315651446, 0.2014362782892808, 0.18176070219707008, 0.18783882288049658, 0.2521163664580345, 0.21343228395795544, 0.18088061154780366, 0.21488313633880785, 0.20214104180107428, 0.22067686467721837, 0.21238009404234803, 0.1853357893012355, 0.2038521933297508, 0.17229084495117308, 0.16521591449789552, 0.1918668056370436, 0.707825850161935, 0.19574972480809916, 0.779780984902168, 0.18755233425676776, 0.18635996048549053, 0.8121944447576539, 0.7687274906147935, 0.16686263018034364, 0.20473698087922254, 0.6819395210461474, 0.2077036234805716, 0.7407044530412685, 0.15478035870103868, 0.7483044675258279, 0.8007628932180417, 0.18643223793461772, 0.18091583990893556, 0.18164408419715705, 0.1792649823685757, 0.18485618232792755, 0.16956190336779164, 0.19543300777815753, 0.20447272833924435, 0.1965080641758319, 0.08526122104376677, 0.08660100824923922, 0.06678459428385686, 0.07069991824439747, 0.06201013596648497, 0.07728911317546794, 0.07514790524501513, 0.07799595774230161, 0.08513810306035607]}, "mutation_prompt": null}
{"id": "aea99c8d-d925-496f-b5a0-1f06059318d3", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # differential weight\n        self.CR = 0.9  # crossover probability\n        self.adapt_rate = 0.1  # adaptation rate for F and CR\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F_adapt = self.F + self.adapt_rate * np.random.uniform(-0.5, 0.5)\n                mutant = np.clip(a + F_adapt * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    self.CR = max(0.1, self.CR - self.adapt_rate)  # Adapt CR\n                else:\n                    self.CR = min(0.9, self.CR + self.adapt_rate)  # Adapt CR\n                \n                if evals >= self.budget:\n                    break\n            \n            # Local search phase\n            best_idx = np.argmin(fitness)\n            best_ind = population[best_idx]\n            step_size = (self.upper_bound - self.lower_bound) * 0.1\n            for _ in range(5):  # Attempt 5 local refinements\n                perturbation = np.random.uniform(-step_size, step_size, self.dim)\n                candidate = np.clip(best_ind + perturbation, self.lower_bound, self.upper_bound)\n                candidate_fitness = func(candidate)\n                evals += 1\n                \n                if candidate_fitness < fitness[best_idx]:\n                    population[best_idx] = candidate\n                    fitness[best_idx] = candidate_fitness\n                \n                if evals >= self.budget:\n                    break\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDE", "description": "Enhanced Hybrid Differential Evolution with Self-Adaptive Mutation and Crossover Strategies for Improved Diversity and Convergence.", "configspace": "", "generation": 1, "fitness": 0.38088791600283806, "feedback": "", "error": "", "parent_id": "ed091e48-6ec3-4b33-a5b0-a41e397a6197", "metadata": {"aucs": [0.793841286233173, 0.7840924504725999, 0.8055179632031361, 0.8120975556819315, 0.791535480065988, 0.7907577554494233, 0.7974811227287387, 0.8405078483487165, 0.784881821196086, 0.6713779443919295, 0.6569227243671543, 0.6607328118908531, 0.6077364842673602, 0.6746861214519331, 0.6586979127012089, 0.6768276297996182, 0.6544951794112648, 0.6051114353622391, 0.11948572030290472, 0.11681585084090751, 0.10495535139834389, 0.11995402514812792, 0.15957870657492768, 0.11824391233433129, 0.1434278419249655, 0.1343363600554085, 0.16333133379996345, 0.1114180137280717, 0.12784996210685262, 0.10878781381731117, 0.11246635025688934, 0.15063103658618615, 0.10859398963204692, 0.11652988424098076, 0.1091766476510827, 0.12464370262407898, 0.974412944076467, 0.9582108759135956, 0.9656526005551009, 0.9629358576756478, 0.9805716963898581, 0.9850494209271357, 0.9885344418747619, 0.9719305038752141, 0.9877140359702254, 0.5023855599359797, 0.4825983044924953, 0.4262301107428037, 0.4403017221075898, 0.5060556762609447, 0.5055559365364705, 0.4895956855165896, 0.45387186011992076, 0.5059890517824639, 0.7268135615383711, 0.7404586859337754, 0.6804986532709854, 0.7499610834828365, 0.7513658253588646, 0.7621939011154173, 0.7519002404792211, 0.7299473923041118, 0.6939626452358618, 0.4675033470157386, 0.4106428990218398, 0.4381124671717995, 0.4552238956933041, 0.38843308316922787, 0.352824372972499, 0.45062052080632353, 0.3551221025127457, 0.4077530462761406, 0.0876588322780204, 0.3610772023412876, 0.4297618350428143, 0.41179005208077313, 0.45621665896254493, 0.4175724579978639, 0.39389159690217823, 0.2793090703765596, 0.42766596196874473, 0.3523626714488346, 0.3218460609112729, 0.3117958684787163, 0.35293545616580135, 0.3622554170958311, 0.3631973883404167, 0.3408455349722035, 0.38404150925639646, 0.3151876812489671, 0.4714901818815407, 0.4686677374725545, 0.4404900375568951, 0.43980006461433596, 0.4653673031389769, 0.43885494132561587, 0.5999583787557773, 0.4954838349469505, 0.49364019716056595, 0.11469980200724861, 0.0673965437576669, 0.1723040623112545, 0.15481010280459595, 0.20541180723532904, 0.21354553618307814, 0.0946794406905066, 0.17358296680562013, 0.15054347602246887, 0.2631462958123346, 0.259036897641284, 0.30152852667291963, 0.286559337644841, 0.29823549332537225, 0.2698300093706545, 0.2846781482624746, 0.26093474515194237, 0.2937180535949835, 0.671564193302209, 0.6816595309303191, 0.6735767805652764, 0.6544278293928687, 0.6774425722497002, 0.6487943187121767, 0.6792948664588123, 0.6598036423625913, 0.683750505634234, 0.08330211348461691, 0.0898575854883511, 0.08237898675423261, 0.08637336793206996, 0.09536405431763928, 0.10997023439547537, 0.09203342496401712, 0.08148493144283364, 0.09605334286174838, 0.1378370874710163, 0.14441544484622004, 0.26320179967810176, 0.1668305940974234, 0.25566459296695976, 0.14644960210344138, 0.1493433548353088, 0.2505822492813733, 0.18939132020440796, 0.3608752114936593, 0.354824039604556, 0.3519598745743481, 0.3430983127602957, 0.33288896947111635, 0.34770074679088037, 0.3776462679558493, 0.42438839383460214, 0.37488495824007284, 0.24334779354399283, 0.2951489260689707, 0.2874857418887531, 0.2784752191387613, 0.23973064633910057, 0.24543576578831539, 0.3366260500077195, 0.3492577906497031, 0.3058496539821778, 0.18639835139189254, 0.19311317248319926, 0.19567507281859375, 0.19337025318823764, 0.1753162102777004, 0.18452036096098345, 0.20227948201179913, 0.2175238072047001, 0.2351268261327265, 0.3019798023672472, 0.2625866718837797, 0.3352940822680883, 0.3386644176996435, 0.20168015745860812, 0.4231410095440309, 0.1928935807816703, 0.19450740823734292, 0.37702935460406595, 0.1631145230173261, 0.8206560235125766, 0.19812661153209776, 0.769815785254893, 0.19589024807767141, 0.19435836993083278, 0.7265394409566435, 0.1684515346591886, 0.20642844676426764, 0.20830943307017313, 0.16772774710216287, 0.7090029562597825, 0.7304209482808448, 0.7443682924648587, 0.5956007912649155, 0.21117173923573396, 0.8157784064009614, 0.2116227581750011, 0.17396793213231954, 0.17184864225108354, 0.17889899875616833, 0.18066240012107315, 0.1859510665542352, 0.1860255477704793, 0.1956567540573083, 0.17508254977348825, 0.18044847581479007, 0.0919654285763174, 0.08159795525374558, 0.07646606980837078, 0.09329948423342538, 0.08580561499137207, 0.07763706912201473, 0.07233024954426182, 0.07316305945361679, 0.07575857608233671]}, "mutation_prompt": null}
