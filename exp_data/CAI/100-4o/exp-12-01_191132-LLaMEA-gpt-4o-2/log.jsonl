{"id": "07ba85f2-4041-4540-b71f-d88f8010d8e7", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 20\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best = np.copy(self.population)\n        self.personal_best_values = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_value = np.inf\n        self.f = 0.5  # Differential evolution scaling factor\n        self.cr = 0.9 # Crossover probability\n        self.w = 0.5  # Inertia weight\n        self.c1 = 1.5 # Cognitive parameter\n        self.c2 = 1.5 # Social parameter\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Evaluate current position\n                current_value = func(self.population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < self.personal_best_values[i]:\n                    self.personal_best_values[i] = current_value\n                    self.personal_best[i] = self.population[i].copy()\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_value = current_value\n                    self.global_best = self.population[i].copy()\n                \n                if evaluations >= self.budget:\n                    break\n\n                # Hybrid PSO-DE update\n                # Differential Evolution like mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.cr\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Trial evaluation\n                trial_value = func(trial)\n                evaluations += 1\n\n                # Select between trial and current\n                if trial_value < current_value:\n                    self.population[i] = trial\n                    current_value = trial_value\n\n                # Update velocities and positions for PSO\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.personal_best[i] - self.population[i]) +\n                                      self.c2 * r2 * (self.global_best - self.population[i]))\n                self.population[i] = np.clip(self.population[i] + self.velocities[i], self.bounds[0], self.bounds[1])\n\n        return self.global_best, self.global_best_value", "name": "HybridPSODE", "description": "A hybrid particle swarm and differential evolution algorithm leveraging adaptive mutation and crossover for robust exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.29277251618342426, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8875260000684967, 0.8660121667786264, 0.8857911150807238, 0.8774411772138536, 0.8853843654464882, 0.838668977773717, 0.8851835133219763, 0.85408090779115, 0.884188229892689, 0.761037707752767, 0.7331359883493028, 0.7703869212793125, 0.7509162313248026, 0.4481100252856478, 0.5325113473010573, 0.7608552600074148, 0.6531860339229114, 0.747243355944836, 0.14128573224805496, 0.14327215052960396, 0.16876001567621024, 0.12216876048303893, 0.14760485023852565, 0.1686863433802066, 0.12059804996605294, 0.15102805430382327, 0.13933409070272118, 0.12231150150623449, 0.11337436565024095, 0.16401658240969597, 0.11087532810831258, 0.13695689387618526, 0.15784385445673865, 0.10919588614724907, 0.1268540220301846, 0.10169632090287684, 0.9897090852191531, 0.9742828897531285, 0.9798761926911933, 0.979254260819291, 0.9834112176037064, 0.9807381175575061, 0.9728078300142793, 0.9803145277192113, 0.9706722101097993, 0.5358225265979719, 0.3853877469431355, 0.5427699422402587, 0.5207958529378924, 0.5049103103811885, 0.46410614343198253, 0.6013694214222063, 0.5403206207051389, 0.08753407788706313, 0.22042521917655156, 0.1615856924095409, 0.7242536071528081, 0.3577305607982584, 0.34558808206944736, 0.2668006460008989, 0.13030794493276443, 0.27526043618421825, 0.22895948101442842, 0.1279802557443369, 0.1741792370985984, 0.20486486798439285, 0.18934472238093947, 0.0993945370245678, 0.17195236004542735, 0.18833089493533584, 0.25505311030545175, 0.1438831077493571, 0.13459366963003072, 0.01879082315386804, 0.2201393582729313, 0.2667479848419927, 0.19391802875371245, 0.1348147634374336, 0.23297328397405137, 0.17171396678640072, 0.6525680324528271, 0.03385158428257351, 9.999999999998899e-05, 0.021179884784793268, 0.04440553398943681, 0.0006998280301951931, 0.03143229670286585, 0.009593574785762615, 9.999999999998899e-05, 0.023491897137584927, 0.06487989946718153, 0.057793527949984824, 0.11418498925395237, 0.1223891772146044, 0.0234422190149296, 0.04785638751143728, 0.10520510034081632, 0.05675918491163845, 0.04853477428656172, 0.04898778886359523, 0.037446321605792976, 0.096868617308415, 0.09622691181489496, 0.09590948581645409, 0.14616256135641925, 0.19882643808321754, 0.11477093232637348, 0.07186818895374747, 0.06875734167807401, 0.11712763062560771, 0.055961878601906156, 0.04930249141857035, 0.20887795690085664, 0.3980792215072072, 0.09595039951288276, 0.04772052327388554, 0.08313124104367653, 0.5205200230227469, 0.5191999437690749, 0.48905829991378036, 0.56701118371188, 0.5005275810799313, 0.4953598660194891, 0.5964910372028418, 0.5472578518491655, 0.5346991825467471, 0.08117532307811393, 0.11299110365613874, 0.08471304939080915, 0.0863140805995406, 0.07225106346044963, 0.09888654594804469, 0.06851433331608792, 0.10102343189771401, 0.0882070454647812, 0.19038197891071174, 0.17744901109446565, 0.14093544077328202, 0.2428720902815782, 0.2296239161351109, 0.15079660609443013, 0.21659285093086333, 0.20495226820907975, 0.16849189384459629, 0.3736017482214926, 0.3878984088896459, 0.28201376763293806, 0.23349159726993884, 0.3498730999057238, 0.2977712446005273, 0.22467359054021763, 0.4302289015024555, 0.21577496607417168, 0.23725258767328894, 0.24638784170337258, 0.3053153049595212, 0.2251061047856543, 0.20426040831497538, 0.261340353814434, 0.1442319844228246, 0.27388555433350104, 0.18124620109622025, 0.19724054226397436, 0.17542882946310112, 0.2138417848772597, 0.1853473840618518, 0.20866352692157353, 0.21883603757536407, 0.21765967306194045, 0.20113932739080898, 0.2020220332340411, 0.19330496006047337, 0.19155414795490655, 0.20453973404394032, 0.20971244741660566, 0.19201576802902653, 0.2249856034377744, 0.2119888780146456, 0.18914727670117804, 0.22583791124802743, 0.829465270778907, 0.3695123166697628, 0.900580871391123, 0.17810898142827425, 0.19983512119467872, 0.197158447590705, 0.20842436176729429, 0.16843062075588022, 0.16158033909047154, 0.14294495523558637, 0.22964004856102804, 0.6920180217597014, 0.4765473466937211, 0.4100725103662496, 0.2108827855325519, 0.43104609031486574, 0.20562379951992726, 0.39818480925329924, 0.1756222396421243, 0.1727290472084857, 0.1814206393357466, 0.18970301429437963, 0.18835956968957934, 0.1739046091476606, 0.17686541243230425, 0.23452307015701568, 0.1813716105042088, 0.08710039995622987, 0.08139826933449912, 0.08826767699721294, 0.07133738843646642, 0.07877926860080753, 0.07142329984911411, 0.0892474438418891, 0.09470092846257339, 0.07650081027416167]}, "mutation_prompt": null}
{"id": "c7f5b0dd-3573-40cb-adba-9139194941ce", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 20\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best = np.copy(self.population)\n        self.personal_best_values = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_value = np.inf\n        self.f = 0.8  # Differential evolution scaling factor\n        self.cr = 0.9 # Crossover probability\n        self.w = 0.5  # Inertia weight\n        self.c1 = 1.5 # Cognitive parameter\n        self.c2 = 1.5 # Social parameter\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Evaluate current position\n                current_value = func(self.population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < self.personal_best_values[i]:\n                    self.personal_best_values[i] = current_value\n                    self.personal_best[i] = self.population[i].copy()\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_value = current_value\n                    self.global_best = self.population[i].copy()\n                \n                if evaluations >= self.budget:\n                    break\n\n                # Hybrid PSO-DE update\n                # Differential Evolution like mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.cr\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Trial evaluation\n                trial_value = func(trial)\n                evaluations += 1\n\n                # Select between trial and current\n                if trial_value < current_value:\n                    self.population[i] = trial\n                    current_value = trial_value\n\n                # Update velocities and positions for PSO\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.personal_best[i] - self.population[i]) +\n                                      self.c2 * r2 * (self.global_best - self.population[i]))\n                self.population[i] = np.clip(self.population[i] + self.velocities[i], self.bounds[0], self.bounds[1])\n\n        return self.global_best, self.global_best_value", "name": "HybridPSODE", "description": "Enhanced exploration by increasing differential evolution scaling factor to improve convergence speed.", "configspace": "", "generation": 1, "fitness": 0.2785171812102244, "feedback": "", "error": "", "parent_id": "07ba85f2-4041-4540-b71f-d88f8010d8e7", "metadata": {"aucs": [0.8640523555611529, 0.8864559772773327, 0.8984316843243119, 0.8198707077923, 0.8818002876682467, 0.7219074926910398, 0.8957436079413924, 0.7551981023118778, 0.8843154407506453, 0.7841032117296407, 0.04134203438772732, 0.8029816994077239, 0.13705956885615522, 0.7306003649607594, 0.73055913086461, 0.7747528428478817, 0.7728044547143315, 0.7750029530814385, 0.11844068124186613, 0.1289658677109946, 0.16291003535994641, 0.10137482111121665, 0.12893367633168906, 0.13895354422003658, 0.1527912881847011, 0.14752883162845642, 0.10656578335011402, 0.15231363034614864, 0.12456993802523575, 0.0961123877557416, 0.13549452204678092, 0.12579777784153723, 0.10316098324546874, 0.1240223419358859, 0.14417462031429062, 0.11232942973052995, 0.9833862185774493, 0.9792241621316624, 0.9854140554174525, 0.9739241018947961, 0.9715833883616628, 0.9819175831296058, 0.9754202226274751, 0.9765095637986997, 0.9751239347144955, 0.4630277775369699, 0.05883170508748825, 0.43637945573299053, 0.26957838052454375, 0.6117503791090391, 0.5102905532174855, 0.29956114462971295, 0.5043785953631179, 0.4015162829412531, 0.5858163301964298, 0.7265066007093834, 0.3102072382026334, 0.35401943976733463, 0.3288479467780304, 0.26821084910416004, 0.11551701727995145, 0.252814761956921, 0.23236178756178916, 0.2978215828876779, 0.18005261941387363, 0.275323534599172, 0.175478764703641, 0.09428965900750685, 0.13263374201477596, 0.19384145861121937, 0.27140962694071324, 0.18847539272819203, 0.22357319019148858, 0.05319547288169246, 0.1317535956614374, 0.17458131837178426, 0.2124176221427817, 0.19615686026724222, 0.13192305431069762, 0.03318547334700961, 0.1640764062723289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06475472246258163, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04214928125732553, 0.043555903430384624, 0.07036999958015111, 0.1608713054328902, 0.0012484025861296821, 0.05232284137311416, 0.06291444132418778, 0.10772231581850467, 0.03576519045677995, 0.04801918920705539, 0.05247177143016901, 0.12847021398392755, 0.13779015952492624, 0.2758234560541597, 0.13134652344882158, 0.24396951197242545, 0.21870775655551355, 0.07244828932255765, 0.04744471458091415, 0.18694650702267657, 0.17675971410079605, 0.06215558366371188, 0.1528106363474857, 0.12609181891659338, 0.1478262833284083, 0.10116059008321787, 0.10081610573178801, 0.49298414402048396, 0.49068674498432696, 0.5083893265801798, 0.5522291690720749, 0.5526641189856476, 0.5134111628905181, 0.5543645362177986, 0.5344267716369294, 0.5527103535818111, 0.08013770713133195, 0.09159578683802827, 0.1047565584404132, 0.11446139146269563, 0.07941330336622088, 0.10722773273919195, 0.08722190449547129, 0.14960506110667027, 0.07267847615842205, 0.1793000913451318, 0.1714565043809846, 0.2241090260070775, 0.21501486990392482, 0.1767553128609427, 0.15220986932470548, 0.1499298982798728, 0.20077946459945928, 0.20025256509737788, 0.3607875134917109, 0.3607960928066609, 0.3493144125387968, 0.4220458665206961, 0.2598042336264965, 0.4159685048142103, 0.1735369665812927, 0.2817488708266762, 0.29372684228009016, 0.2036079843774633, 0.16564246230693458, 0.18876465102154782, 0.18562248657385794, 0.2487160174248756, 0.20994727711878136, 0.20518487440505373, 0.36466689088174264, 0.18500989007557245, 0.23877093691049756, 0.21337602199998607, 0.18078266812465627, 0.2192598425589296, 0.18483962254484942, 0.18505984245116358, 0.21280838159201976, 0.1792783868882658, 0.20641099182452793, 0.21543436589698162, 0.652125825497912, 0.18138693462697997, 0.19215458044460432, 0.1861374000645798, 0.18137324763863738, 0.3566945671998242, 0.2143876666696919, 0.19518353287721324, 0.16627345226427892, 0.15327381677082563, 0.14986819436994903, 0.7150989670978829, 0.20008274608136256, 0.2115536511892907, 0.16724514901378773, 0.1689252430322209, 0.15408343750257736, 0.237416572185974, 0.16206076830737437, 0.20410608761133175, 0.28462147742925903, 0.21145149557379883, 0.2112032429602405, 0.10549625981682931, 0.2074879115263184, 0.46736678919027497, 0.17863098905446773, 0.18997461622997847, 0.19892567023491092, 0.18530447871298827, 0.19778515285196707, 0.17448366412086902, 0.17784723140499414, 0.18317493586203704, 0.20147229574929248, 0.0637640837849267, 0.08596126483368138, 0.06980878293809689, 0.07338935160039273, 0.08102754340544016, 0.11119597862596597, 0.09138644380330274, 0.08418222859796787, 0.07738850542996645]}, "mutation_prompt": null}
