{"id": "a35d1049-8a25-4bfe-bed4-f6a0d6772162", "solution": "import numpy as np\n\nclass MemeticDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim  # A reasonable population size\n        self.CR = 0.9  # Crossover probability\n        self.F = 0.8   # Differential weight\n        self.local_search_prob = 0.2  # Probability of conducting local search\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                # Mutation\n                indices = np.random.choice([j for j in range(self.population_size) if j != i], 3, replace=False)\n                a, b, c = pop[indices]\n                mutant = np.clip(a + self.F * (b - c), *self.bounds)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    pop[i], fitness[i] = trial, trial_fitness\n\n                # Local search occasionally\n                if np.random.rand() < self.local_search_prob:\n                    trial = self.local_search(trial, func)\n                    trial_fitness = func(trial)\n                    eval_count += 1\n                    if trial_fitness < fitness[i]:\n                        pop[i], fitness[i] = trial, trial_fitness\n\n        return pop[np.argmin(fitness)]\n\n    def local_search(self, solution, func):\n        best = solution\n        best_fitness = func(best)\n        step_size = 0.1  # Small step size for local search\n        for i in range(self.dim):\n            for direction in [-1, 1]:\n                candidate = np.clip(best.copy(), *self.bounds)\n                candidate[i] += direction * step_size\n                candidate_fitness = func(candidate)\n                if candidate_fitness < best_fitness:\n                    best = candidate\n                    best_fitness = candidate_fitness\n        return best", "name": "MemeticDifferentialEvolution", "description": "A memetic algorithm combining Differential Evolution and Local Search to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.16207740512191662, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.3515579901076916, 0.3515579901076916, 0.3515579901076916, 0.3513664239397888, 0.3513664239397888, 0.3513664239397888, 0.36952543462939935, 0.36952543462939935, 0.36952543462939935, 0.07710502255782681, 0.07710502255782681, 0.07710502255782681, 0.0961817750296392, 0.0961817750296392, 0.0961817750296392, 0.08705539745403135, 0.08705539745403135, 0.08705539745403135, 0.08684258272802436, 0.08684258272802436, 0.08684258272802436, 0.08761306560508075, 0.08761306560508075, 0.08761306560508075, 0.08868795281989861, 0.08868795281989861, 0.08868795281989861, 0.0669324433350883, 0.0669324433350883, 0.0669324433350883, 0.06355446544883836, 0.06355446544883836, 0.06355446544883836, 0.07627629249926171, 0.07627629249926171, 0.07627629249926171, 0.7919460919553709, 0.7919460919553709, 0.7919460919553709, 0.8489938844323434, 0.8489938844323434, 0.8489938844323434, 0.7714159959450159, 0.7714159959450159, 0.7714159959450159, 0.13783587908160666, 0.13783587908160666, 0.13783587908160666, 0.13164958723117648, 0.13164958723117648, 0.13164958723117648, 0.1347256024286254, 0.1347256024286254, 0.1347256024286254, 0.17817194637866163, 0.17817194637866163, 0.17817194637866163, 0.17504616683857543, 0.17504616683857543, 0.17504616683857543, 0.19450291711401224, 0.19450291711401224, 0.19450291711401224, 0.07829862929850129, 0.07829862929850129, 0.07829862929850129, 0.11031977675369087, 0.11031977675369087, 0.11031977675369087, 0.0859159866620226, 0.0859159866620226, 0.0859159866620226, 0.08078667624223368, 0.08078667624223368, 0.08078667624223368, 0.06165257205004071, 0.06165257205004071, 0.06165257205004071, 0.06352292876400001, 0.06352292876400001, 0.06352292876400001, 0.022661380667886255, 0.022661380667886255, 0.022661380667886255, 0.002348103240308097, 0.002348103240308097, 0.002348103240308097, 0.016110792916588568, 0.016110792916588568, 0.016110792916588568, 0.13553166268230488, 0.13553166268230488, 0.13553166268230488, 0.08536777209342672, 0.08536777209342672, 0.08536777209342672, 0.1370850036250456, 0.1370850036250456, 0.1370850036250456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053387688580127324, 0.053387688580127324, 0.053387688580127324, 0.05344953565529231, 0.05344953565529231, 0.05344953565529231, 0.08654718085745694, 0.08654718085745694, 0.08654718085745694, 0.2941028599782981, 0.2941028599782981, 0.2941028599782981, 0.31589630654417833, 0.31589630654417833, 0.31589630654417833, 0.3011549210615585, 0.3011549210615585, 0.3011549210615585, 0.07752769333556897, 0.07752769333556897, 0.07752769333556897, 0.07221632024835056, 0.07221632024835056, 0.07221632024835056, 0.0748145956749533, 0.0748145956749533, 0.0748145956749533, 0.12920791309914115, 0.12920791309914115, 0.12920791309914115, 0.1357232814223286, 0.1357232814223286, 0.1357232814223286, 0.15349068383066478, 0.15349068383066478, 0.15349068383066478, 0.17488384927874012, 0.17488384927874012, 0.17488384927874012, 0.17705412848577962, 0.17705412848577962, 0.17705412848577962, 0.19989252605490804, 0.19989252605490804, 0.19989252605490804, 0.145044195596994, 0.145044195596994, 0.145044195596994, 0.15785352139719822, 0.15785352139719822, 0.15785352139719822, 0.14225081860127498, 0.14225081860127498, 0.14225081860127498, 0.2184829331777226, 0.2184829331777226, 0.2184829331777226, 0.1588381892754045, 0.1588381892754045, 0.1588381892754045, 0.19490964243605446, 0.19490964243605446, 0.19490964243605446, 0.1684074204271303, 0.1684074204271303, 0.1684074204271303, 0.15009512450576645, 0.15009512450576645, 0.15009512450576645, 0.1624846729205971, 0.1624846729205971, 0.1624846729205971, 0.2531118506086787, 0.2531118506086787, 0.2531118506086787, 0.16496194519007024, 0.16496194519007024, 0.16496194519007024, 0.16452877023278634, 0.16452877023278634, 0.16452877023278634, 0.17581679310032783, 0.17581679310032783, 0.17581679310032783, 0.15681604218654466, 0.15681604218654466, 0.15681604218654466, 0.1643564943329875, 0.1643564943329875, 0.1643564943329875, 0.18253645109773864, 0.18253645109773864, 0.18253645109773864, 0.18097040928454367, 0.18097040928454367, 0.18097040928454367, 0.2027705288200402, 0.2027705288200402, 0.2027705288200402, 0.062474866796969786, 0.062474866796969786, 0.062474866796969786, 0.059615853612582925, 0.059615853612582925, 0.059615853612582925, 0.057008958513229846, 0.057008958513229846, 0.057008958513229846]}, "mutation_prompt": null}
{"id": "46d34b34-18ac-4d19-b872-8862ec1bfa31", "solution": "import numpy as np\n\nclass MemeticDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim  # A reasonable population size\n        self.CR = 0.9  # Crossover probability\n        self.F = 0.8   # Differential weight\n        self.local_search_prob = 0.2  # Probability of conducting local search\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                # Mutation\n                indices = np.random.choice([j for j in range(self.population_size) if j != i], 3, replace=False)\n                a, b, c = pop[indices]\n                mutant = np.clip(a + self.F * (b - c), *self.bounds)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    pop[i], fitness[i] = trial, trial_fitness\n\n                # Local search occasionally\n                if np.random.rand() < self.local_search_prob:\n                    trial = self.local_search(trial, func)\n                    trial_fitness = func(trial)\n                    eval_count += 1\n                    if trial_fitness < fitness[i]:\n                        pop[i], fitness[i] = trial, trial_fitness\n\n        return pop[np.argmin(fitness)]\n\n    def local_search(self, solution, func):\n        best = solution\n        best_fitness = func(best)\n        step_size = 0.1  # Small step size for local search\n        for i in range(self.dim):\n            for direction in [-1, 1]:\n                candidate = np.clip(best.copy(), *self.bounds)\n                candidate[i] += direction * step_size\n                candidate_fitness = func(candidate)\n                if candidate_fitness < best_fitness:\n                    best = candidate\n                    best_fitness = candidate_fitness\n        return best", "name": "MemeticDifferentialEvolution", "description": "A memetic algorithm combining Differential Evolution and Local Search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a35d1049-8a25-4bfe-bed4-f6a0d6772162", "metadata": {"aucs": [0.3515579901076916, 0.3515579901076916, 0.3515579901076916, 0.3513664239397888, 0.3513664239397888, 0.3513664239397888, 0.36952543462939935, 0.36952543462939935, 0.36952543462939935, 0.07710502255782681, 0.07710502255782681, 0.07710502255782681, 0.0961817750296392, 0.0961817750296392, 0.0961817750296392, 0.08705539745403135, 0.08705539745403135, 0.08705539745403135, 0.08684258272802436, 0.08684258272802436, 0.08684258272802436, 0.08761306560508075, 0.08761306560508075, 0.08761306560508075, 0.08868795281989861, 0.08868795281989861, 0.08868795281989861, 0.0669324433350883, 0.0669324433350883, 0.0669324433350883, 0.06355446544883836, 0.06355446544883836, 0.06355446544883836, 0.07627629249926171, 0.07627629249926171, 0.07627629249926171, 0.7919460919553709, 0.7919460919553709, 0.7919460919553709, 0.8489938844323434, 0.8489938844323434, 0.8489938844323434, 0.7714159959450159, 0.7714159959450159, 0.7714159959450159, 0.13783587908160666, 0.13783587908160666, 0.13783587908160666, 0.13164958723117648, 0.13164958723117648, 0.13164958723117648, 0.1347256024286254, 0.1347256024286254, 0.1347256024286254, 0.17817194637866163, 0.17817194637866163, 0.17817194637866163, 0.17504616683857543, 0.17504616683857543, 0.17504616683857543, 0.19450291711401224, 0.19450291711401224, 0.19450291711401224, 0.07829862929850129, 0.07829862929850129, 0.07829862929850129, 0.11031977675369087, 0.11031977675369087, 0.11031977675369087, 0.0859159866620226, 0.0859159866620226, 0.0859159866620226, 0.08078667624223368, 0.08078667624223368, 0.08078667624223368, 0.06165257205004071, 0.06165257205004071, 0.06165257205004071, 0.06352292876400001, 0.06352292876400001, 0.06352292876400001, 0.022661380667886255, 0.022661380667886255, 0.022661380667886255, 0.002348103240308097, 0.002348103240308097, 0.002348103240308097, 0.016110792916588568, 0.016110792916588568, 0.016110792916588568, 0.13553166268230488, 0.13553166268230488, 0.13553166268230488, 0.08536777209342672, 0.08536777209342672, 0.08536777209342672, 0.1370850036250456, 0.1370850036250456, 0.1370850036250456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053387688580127324, 0.053387688580127324, 0.053387688580127324, 0.05344953565529231, 0.05344953565529231, 0.05344953565529231, 0.08654718085745694, 0.08654718085745694, 0.08654718085745694, 0.2941028599782981, 0.2941028599782981, 0.2941028599782981, 0.31589630654417833, 0.31589630654417833, 0.31589630654417833, 0.3011549210615585, 0.3011549210615585, 0.3011549210615585, 0.07752769333556897, 0.07752769333556897, 0.07752769333556897, 0.07221632024835056, 0.07221632024835056, 0.07221632024835056, 0.0748145956749533, 0.0748145956749533, 0.0748145956749533, 0.12920791309914115, 0.12920791309914115, 0.12920791309914115, 0.1357232814223286, 0.1357232814223286, 0.1357232814223286, 0.15349068383066478, 0.15349068383066478, 0.15349068383066478, 0.17488384927874012, 0.17488384927874012, 0.17488384927874012, 0.17705412848577962, 0.17705412848577962, 0.17705412848577962, 0.19989252605490804, 0.19989252605490804, 0.19989252605490804, 0.145044195596994, 0.145044195596994, 0.145044195596994, 0.15785352139719822, 0.15785352139719822, 0.15785352139719822, 0.14225081860127498, 0.14225081860127498, 0.14225081860127498, 0.2184829331777226, 0.2184829331777226, 0.2184829331777226, 0.1588381892754045, 0.1588381892754045, 0.1588381892754045, 0.19490964243605446, 0.19490964243605446, 0.19490964243605446, 0.1684074204271303, 0.1684074204271303, 0.1684074204271303, 0.15009512450576645, 0.15009512450576645, 0.15009512450576645, 0.1624846729205971, 0.1624846729205971, 0.1624846729205971, 0.2531118506086787, 0.2531118506086787, 0.2531118506086787, 0.16496194519007024, 0.16496194519007024, 0.16496194519007024, 0.16452877023278634, 0.16452877023278634, 0.16452877023278634, 0.17581679310032783, 0.17581679310032783, 0.17581679310032783, 0.15681604218654466, 0.15681604218654466, 0.15681604218654466, 0.1643564943329875, 0.1643564943329875, 0.1643564943329875, 0.18253645109773864, 0.18253645109773864, 0.18253645109773864, 0.18097040928454367, 0.18097040928454367, 0.18097040928454367, 0.2027705288200402, 0.2027705288200402, 0.2027705288200402, 0.062474866796969786, 0.062474866796969786, 0.062474866796969786, 0.059615853612582925, 0.059615853612582925, 0.059615853612582925, 0.057008958513229846, 0.057008958513229846, 0.057008958513229846]}, "mutation_prompt": null}
