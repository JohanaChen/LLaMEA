{"id": "02a58925-f4c9-4906-93c8-52428bb176f1", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.crossover_prob = 0.9\n        self.mutation_factor = 0.8\n        self.initial_temp = 1.0\n        self.cooling_rate = 0.99\n\n    def __call__(self, func):\n        num_evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, \n                                       (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = []\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                # Calculation of trial fitness\n                trial_fitness = func(trial)\n                num_evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    new_population.append(trial)\n                    fitness[i] = trial_fitness\n                else:\n                    acceptance_prob = np.exp((fitness[i] - trial_fitness) / self.initial_temp)\n                    if np.random.rand() < acceptance_prob:\n                        new_population.append(trial)\n                        fitness[i] = trial_fitness\n                    else:\n                        new_population.append(population[i])\n            \n            population = np.array(new_population)\n            self.initial_temp *= self.cooling_rate\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "HybridDE_SA", "description": "A hybrid metaheuristic combining Differential Evolution and Simulated Annealing for robust exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.3019693437915152, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.40291979435363834, 0.3956810128804418, 0.3879472263179188, 0.40770600029141524, 0.41132315108734185, 0.3998900653303906, 0.39583757131015895, 0.4074619599398418, 0.422830113829305, 0.3523300320033056, 0.3605718934169343, 0.370612474043296, 0.35680061466069013, 0.3738906703975081, 0.36653362081196805, 0.36570623412048586, 0.3709889728872465, 0.35285144932021406, 0.1229844939373308, 0.23644748356261225, 0.2724144237523395, 0.15759579146708236, 0.1987700206716292, 0.20969570680051242, 0.21128781927984863, 0.15491793820837885, 0.16760383304186566, 0.14169892190488953, 0.13219399833580214, 0.13762642619920173, 0.10754084452188506, 0.16998930083743913, 0.13788163726859726, 0.13990940151468112, 0.1516953586614469, 0.12410329818728782, 0.9538358088101077, 0.9553438940931971, 0.9716999268155677, 0.9622744189345065, 0.961764845699673, 0.9792580387473815, 0.9682819653503205, 0.9510439905807662, 0.9648948437141636, 0.3463936367827687, 0.323765084995576, 0.31869153660450045, 0.3229692927169183, 0.3230087766905376, 0.31865012771138645, 0.3470391749106567, 0.3283406562396016, 0.3305288324413558, 0.4700171780463803, 0.7433202102960972, 0.5733052017253211, 0.579331162527478, 0.5180871153626971, 0.641840518396122, 0.6064144434033303, 0.4558778904218961, 0.5353221774433932, 0.33883430444137164, 0.3213872772069978, 0.3339019109110549, 0.3606858112833281, 0.3238671267189701, 0.33854357822819536, 0.3184262724215253, 0.32709239390710776, 0.3456674340900028, 0.350408752636471, 0.12125764427367791, 0.289622140765024, 0.34551200537151494, 0.32973609106210466, 0.3122335776608872, 0.33205442156151876, 0.3258894284989108, 0.32658688186461027, 0.32392729438387946, 0.31927673657013733, 0.3316489607414469, 0.321573681588899, 0.30854482938808336, 0.31708331491475605, 0.31672583463041615, 0.32284747993742136, 0.30733200071386646, 0.34476055455444043, 0.3462102413363759, 0.37253400923243285, 0.35381610875783165, 0.3551567039110639, 0.35571614839932786, 0.37437788606059963, 0.3884895123383184, 0.3715889904058789, 0.24257629449719575, 0.1883934308962757, 0.23653164389191284, 0.2408038343628155, 0.2675041779249512, 0.23336897414750002, 0.21606988031090757, 0.17559461392698028, 0.24949181260274733, 0.28076403635138814, 0.29047962288620033, 0.28421180657380174, 0.27893949547997265, 0.2824262497821052, 0.28344790155717126, 0.289369738722011, 0.2748024006862383, 0.2716746750493324, 0.3680501452754744, 0.3781284180322845, 0.38042808169453635, 0.3665446126908106, 0.3957815711215239, 0.37970079285137304, 0.3705150114750613, 0.37659411534606246, 0.39019134063741046, 0.09439260903192592, 0.10809311168226954, 0.14827071057088181, 0.10397711849958724, 0.08063390801455539, 0.08269266763245364, 0.09194396452088949, 0.10471481741730748, 0.11207829741605124, 0.1665094934044966, 0.18179959926829747, 0.13580757879915473, 0.23523119794698377, 0.17064689615825734, 0.13885982492616056, 0.1311987863742322, 0.3004021404846723, 0.18423605049873015, 0.30925614889135955, 0.3054777537462132, 0.3020803224433991, 0.30565056563399295, 0.3082024569965912, 0.2989493963418851, 0.30635651275509035, 0.3057091503474586, 0.3063213527284716, 0.27969676948511746, 0.2890775134592678, 0.2824709614508404, 0.2773943689545405, 0.28808437691525357, 0.303817609559473, 0.28406461752910395, 0.2908856032982572, 0.29246433950481365, 0.1883495188829981, 0.1757851782918357, 0.17896349193515249, 0.18388400510278724, 0.18769962116419603, 0.19549864390983307, 0.1971532056772477, 0.19376329997703046, 0.1709154432499772, 0.2524964901713944, 0.22410070631491708, 0.22360687515551092, 0.2862994819769512, 0.3151719971927994, 0.2817504419651906, 0.21052021505547847, 0.28020110907959483, 0.2802878837821938, 0.15021961674591822, 0.4881174294730257, 0.1524577246938854, 0.16332012135185336, 0.18578102673868313, 0.5342641057486941, 0.1654779765819725, 0.18201435547479317, 0.16904447921113097, 0.20648083989199084, 0.16784179882025552, 0.20738893526175783, 0.5009641766746785, 0.16018733630093374, 0.5017948534760708, 0.19833635198617128, 0.15314251983563099, 0.1546071831478295, 0.16261823011566356, 0.21018115427385387, 0.17521927683774152, 0.1713156781079841, 0.18568271589923702, 0.1783675413435969, 0.1650838573626353, 0.1982408034939137, 0.19283006761797405, 0.08590352095495435, 0.0786563638259331, 0.07484495123038792, 0.0822868231556142, 0.06834980923313394, 0.08426912450341806, 0.08081334712373578, 0.08630433100396973, 0.07583130573600616]}, "mutation_prompt": null}
{"id": "3166806c-0648-4c80-897c-408dca15148c", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.crossover_prob = 0.9\n        self.mutation_factor = 0.8\n        self.initial_temp = 1.0\n        self.cooling_rate = 0.99\n\n    def __call__(self, func):\n        num_evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, \n                                       (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = []\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                # Calculation of trial fitness\n                trial_fitness = func(trial)\n                num_evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    new_population.append(trial)\n                    fitness[i] = trial_fitness\n                else:\n                    acceptance_prob = np.exp((fitness[i] - trial_fitness) / self.initial_temp)\n                    if np.random.rand() < acceptance_prob:\n                        new_population.append(trial)\n                        fitness[i] = trial_fitness\n                    else:\n                        new_population.append(population[i])\n            \n            population = np.array(new_population)\n            self.initial_temp *= self.cooling_rate\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "HybridDE_SA", "description": "A hybrid metaheuristic combining Differential Evolution and Simulated Annealing for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "02a58925-f4c9-4906-93c8-52428bb176f1", "metadata": {"aucs": [0.40291979435363834, 0.3956810128804418, 0.3879472263179188, 0.40770600029141524, 0.41132315108734185, 0.3998900653303906, 0.39583757131015895, 0.4074619599398418, 0.422830113829305, 0.3523300320033056, 0.3605718934169343, 0.370612474043296, 0.35680061466069013, 0.3738906703975081, 0.36653362081196805, 0.36570623412048586, 0.3709889728872465, 0.35285144932021406, 0.1229844939373308, 0.23644748356261225, 0.2724144237523395, 0.15759579146708236, 0.1987700206716292, 0.20969570680051242, 0.21128781927984863, 0.15491793820837885, 0.16760383304186566, 0.14169892190488953, 0.13219399833580214, 0.13762642619920173, 0.10754084452188506, 0.16998930083743913, 0.13788163726859726, 0.13990940151468112, 0.1516953586614469, 0.12410329818728782, 0.9538358088101077, 0.9553438940931971, 0.9716999268155677, 0.9622744189345065, 0.961764845699673, 0.9792580387473815, 0.9682819653503205, 0.9510439905807662, 0.9648948437141636, 0.3463936367827687, 0.323765084995576, 0.31869153660450045, 0.3229692927169183, 0.3230087766905376, 0.31865012771138645, 0.3470391749106567, 0.3283406562396016, 0.3305288324413558, 0.4700171780463803, 0.7433202102960972, 0.5733052017253211, 0.579331162527478, 0.5180871153626971, 0.641840518396122, 0.6064144434033303, 0.4558778904218961, 0.5353221774433932, 0.33883430444137164, 0.3213872772069978, 0.3339019109110549, 0.3606858112833281, 0.3238671267189701, 0.33854357822819536, 0.3184262724215253, 0.32709239390710776, 0.3456674340900028, 0.350408752636471, 0.12125764427367791, 0.289622140765024, 0.34551200537151494, 0.32973609106210466, 0.3122335776608872, 0.33205442156151876, 0.3258894284989108, 0.32658688186461027, 0.32392729438387946, 0.31927673657013733, 0.3316489607414469, 0.321573681588899, 0.30854482938808336, 0.31708331491475605, 0.31672583463041615, 0.32284747993742136, 0.30733200071386646, 0.34476055455444043, 0.3462102413363759, 0.37253400923243285, 0.35381610875783165, 0.3551567039110639, 0.35571614839932786, 0.37437788606059963, 0.3884895123383184, 0.3715889904058789, 0.24257629449719575, 0.1883934308962757, 0.23653164389191284, 0.2408038343628155, 0.2675041779249512, 0.23336897414750002, 0.21606988031090757, 0.17559461392698028, 0.24949181260274733, 0.28076403635138814, 0.29047962288620033, 0.28421180657380174, 0.27893949547997265, 0.2824262497821052, 0.28344790155717126, 0.289369738722011, 0.2748024006862383, 0.2716746750493324, 0.3680501452754744, 0.3781284180322845, 0.38042808169453635, 0.3665446126908106, 0.3957815711215239, 0.37970079285137304, 0.3705150114750613, 0.37659411534606246, 0.39019134063741046, 0.09439260903192592, 0.10809311168226954, 0.14827071057088181, 0.10397711849958724, 0.08063390801455539, 0.08269266763245364, 0.09194396452088949, 0.10471481741730748, 0.11207829741605124, 0.1665094934044966, 0.18179959926829747, 0.13580757879915473, 0.23523119794698377, 0.17064689615825734, 0.13885982492616056, 0.1311987863742322, 0.3004021404846723, 0.18423605049873015, 0.30925614889135955, 0.3054777537462132, 0.3020803224433991, 0.30565056563399295, 0.3082024569965912, 0.2989493963418851, 0.30635651275509035, 0.3057091503474586, 0.3063213527284716, 0.27969676948511746, 0.2890775134592678, 0.2824709614508404, 0.2773943689545405, 0.28808437691525357, 0.303817609559473, 0.28406461752910395, 0.2908856032982572, 0.29246433950481365, 0.1883495188829981, 0.1757851782918357, 0.17896349193515249, 0.18388400510278724, 0.18769962116419603, 0.19549864390983307, 0.1971532056772477, 0.19376329997703046, 0.1709154432499772, 0.2524964901713944, 0.22410070631491708, 0.22360687515551092, 0.2862994819769512, 0.3151719971927994, 0.2817504419651906, 0.21052021505547847, 0.28020110907959483, 0.2802878837821938, 0.15021961674591822, 0.4881174294730257, 0.1524577246938854, 0.16332012135185336, 0.18578102673868313, 0.5342641057486941, 0.1654779765819725, 0.18201435547479317, 0.16904447921113097, 0.20648083989199084, 0.16784179882025552, 0.20738893526175783, 0.5009641766746785, 0.16018733630093374, 0.5017948534760708, 0.19833635198617128, 0.15314251983563099, 0.1546071831478295, 0.16261823011566356, 0.21018115427385387, 0.17521927683774152, 0.1713156781079841, 0.18568271589923702, 0.1783675413435969, 0.1650838573626353, 0.1982408034939137, 0.19283006761797405, 0.08590352095495435, 0.0786563638259331, 0.07484495123038792, 0.0822868231556142, 0.06834980923313394, 0.08426912450341806, 0.08081334712373578, 0.08630433100396973, 0.07583130573600616]}, "mutation_prompt": null}
