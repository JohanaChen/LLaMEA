{"id": "8406ceba-1f2d-49eb-8262-217ac2002626", "solution": "import numpy as np\n\nclass DE_APSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover rate\n        self.w = 0.5  # PSO inertia weight\n        self.c1 = 1.5  # PSO cognitive coefficient\n        self.c2 = 1.5  # PSO social coefficient\n        self.bounds = (-5.0, 5.0)\n        \n    def __call__(self, func):\n        np.random.seed(42)\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        pbest = pop.copy()\n        gbest = pop[np.argmin(fitness)]\n        pbest_fitness = fitness.copy()\n        velocity = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        \n        eval_count = self.pop_size\n        \n        while eval_count < self.budget:\n            for i in range(self.pop_size):\n                # Differential Evolution/Montage\n                candidates = list(range(self.pop_size))\n                candidates.remove(i)\n                a, b, c = pop[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.cr\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                \n                # Evaluate\n                f_trial = func(trial)\n                eval_count += 1\n                \n                # Selection\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < pbest_fitness[i]:\n                        pbest[i] = trial\n                        pbest_fitness[i] = f_trial\n                        if f_trial < func(gbest):\n                            gbest = trial\n                \n                # Particle Swarm Optimization\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocity[i] = self.w * velocity[i] + self.c1 * r1 * (pbest[i] - pop[i]) + self.c2 * r2 * (gbest - pop[i])\n                pop[i] = np.clip(pop[i] + velocity[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate updated position\n                f_particles = func(pop[i])\n                eval_count += 1\n                \n                if f_particles < fitness[i]:\n                    fitness[i] = f_particles\n                    if f_particles < pbest_fitness[i]:\n                        pbest[i] = pop[i]\n                        pbest_fitness[i] = f_particles\n                        if f_particles < func(gbest):\n                            gbest = pop[i]\n            \n            if eval_count >= self.budget:\n                break\n        \n        return gbest", "name": "DE_APSO", "description": "A hybrid Differential Evolution with Adaptive Particle Swarm Optimization (DE-APSO) that dynamically combines exploration and exploitation strategies.", "configspace": "", "generation": 0, "fitness": 0.29102946134148083, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7817587757599112, 0.7817587757599112, 0.7817587757599112, 0.7894599188486074, 0.7894599188486074, 0.7894599188486074, 0.7949511632540247, 0.7949511632540247, 0.7949511632540247, 0.5378516577960601, 0.5378516577960601, 0.5378516577960601, 0.5208202496728098, 0.5208202496728098, 0.5208202496728098, 0.5359061613602525, 0.5359061613602525, 0.5359061613602525, 0.10161592579258905, 0.10161592579258905, 0.10161592579258905, 0.14005456626494583, 0.14005456626494583, 0.14005456626494583, 0.14374844010103793, 0.14374844010103793, 0.14374844010103793, 0.11988463229283786, 0.11988463229283786, 0.11988463229283786, 0.11071180595948205, 0.11071180595948205, 0.11071180595948205, 0.1170483128503842, 0.1170483128503842, 0.1170483128503842, 0.9857691428071074, 0.9857691428071074, 0.9857691428071074, 0.9785235140424716, 0.9785235140424716, 0.9785235140424716, 0.963700380913503, 0.963700380913503, 0.963700380913503, 0.48057655263402077, 0.48057655263402077, 0.48057655263402077, 0.5381033307686622, 0.5381033307686622, 0.5381033307686622, 0.5345390058036867, 0.5345390058036867, 0.5345390058036867, 0.6659306623028273, 0.6659306623028273, 0.6659306623028273, 0.16017550070115416, 0.16017550070115416, 0.16017550070115416, 0.2080221268022936, 0.2080221268022936, 0.2080221268022936, 0.22728818690096508, 0.22728818690096508, 0.22728818690096508, 0.23303044347797175, 0.23303044347797175, 0.23303044347797175, 0.21050207647610475, 0.21050207647610475, 0.21050207647610475, 0.21567453978811968, 0.21567453978811968, 0.21567453978811968, 0.25437317843490803, 0.25437317843490803, 0.25437317843490803, 0.22448444115568722, 0.22448444115568722, 0.22448444115568722, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1731882460684958, 0.1731882460684958, 0.1731882460684958, 0.03275484925823713, 0.03275484925823713, 0.03275484925823713, 0.0766365047307962, 0.0766365047307962, 0.0766365047307962, 0.03530985451812685, 0.03530985451812685, 0.03530985451812685, 0.0610011744685085, 0.0610011744685085, 0.0610011744685085, 0.0813694393737433, 0.0813694393737433, 0.0813694393737433, 0.15881359348749158, 0.15881359348749158, 0.15881359348749158, 0.19841176916981584, 0.19841176916981584, 0.19841176916981584, 0.0803862432477388, 0.0803862432477388, 0.0803862432477388, 0.5035366112868165, 0.5035366112868165, 0.5035366112868165, 0.512446043036592, 0.512446043036592, 0.512446043036592, 0.5118681698307094, 0.5118681698307094, 0.5118681698307094, 0.1268252643482436, 0.1268252643482436, 0.1268252643482436, 0.16193878814621798, 0.16193878814621798, 0.16193878814621798, 0.14653033642393198, 0.14653033642393198, 0.14653033642393198, 0.25714578802931964, 0.25714578802931964, 0.25714578802931964, 0.29714292085913396, 0.29714292085913396, 0.29714292085913396, 0.16424679318937319, 0.16424679318937319, 0.16424679318937319, 0.4445783683579715, 0.4445783683579715, 0.4445783683579715, 0.43846261305772705, 0.43846261305772705, 0.43846261305772705, 0.45436861667943373, 0.45436861667943373, 0.45436861667943373, 0.2559291697526046, 0.2559291697526046, 0.2559291697526046, 0.1988756022928, 0.1988756022928, 0.1988756022928, 0.1349727222084408, 0.1349727222084408, 0.1349727222084408, 0.22455027692578422, 0.22455027692578422, 0.22455027692578422, 0.23709610572015694, 0.23709610572015694, 0.23709610572015694, 0.195887048528681, 0.195887048528681, 0.195887048528681, 0.21133514606621295, 0.21133514606621295, 0.21133514606621295, 0.20836426435507072, 0.20836426435507072, 0.20836426435507072, 0.2023660131960422, 0.2023660131960422, 0.2023660131960422, 0.849187604476887, 0.849187604476887, 0.849187604476887, 0.15758595275136178, 0.15758595275136178, 0.15758595275136178, 0.16640601489025997, 0.16640601489025997, 0.16640601489025997, 0.20729323589366144, 0.20729323589366144, 0.20729323589366144, 0.21006372544266272, 0.21006372544266272, 0.21006372544266272, 0.1560214463455446, 0.1560214463455446, 0.1560214463455446, 0.18317502520680184, 0.18317502520680184, 0.18317502520680184, 0.17703956403727583, 0.17703956403727583, 0.17703956403727583, 0.19754681727140355, 0.19754681727140355, 0.19754681727140355, 0.09537422853156063, 0.09537422853156063, 0.09537422853156063, 0.09355413880180274, 0.09355413880180274, 0.09355413880180274, 0.09973043336075338, 0.09973043336075338, 0.09973043336075338]}, "mutation_prompt": null}
{"id": "338a296a-dabf-4e25-88fb-ae7615c5a70b", "solution": "import numpy as np\n\nclass DE_APSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover rate\n        self.w = 0.5  # PSO inertia weight\n        self.c1 = 1.5  # PSO cognitive coefficient\n        self.c2 = 1.5  # PSO social coefficient\n        self.bounds = (-5.0, 5.0)\n        \n    def __call__(self, func):\n        np.random.seed(42)\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        pbest = pop.copy()\n        gbest = pop[np.argmin(fitness)]\n        pbest_fitness = fitness.copy()\n        velocity = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        \n        eval_count = self.pop_size\n        \n        while eval_count < self.budget:\n            for i in range(self.pop_size):\n                # Differential Evolution/Montage\n                candidates = list(range(self.pop_size))\n                candidates.remove(i)\n                a, b, c = pop[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.cr\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                \n                # Evaluate\n                f_trial = func(trial)\n                eval_count += 1\n                \n                # Selection\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < pbest_fitness[i]:\n                        pbest[i] = trial\n                        pbest_fitness[i] = f_trial\n                        if f_trial < func(gbest):\n                            gbest = trial\n                \n                # Particle Swarm Optimization\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocity[i] = self.w * velocity[i] + self.c1 * r1 * (pbest[i] - pop[i]) + self.c2 * r2 * (gbest - pop[i])\n                pop[i] = np.clip(pop[i] + velocity[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate updated position\n                f_particles = func(pop[i])\n                eval_count += 1\n                \n                if f_particles < fitness[i]:\n                    fitness[i] = f_particles\n                    if f_particles < pbest_fitness[i]:\n                        pbest[i] = pop[i]\n                        pbest_fitness[i] = f_particles\n                        if f_particles < func(gbest):\n                            gbest = pop[i]\n            \n            if eval_count >= self.budget:\n                break\n        \n        return gbest", "name": "DE_APSO", "description": "A hybrid Differential Evolution with Adaptive Particle Swarm Optimization (DE-APSO) that dynamically combines exploration and exploitation strategies.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8406ceba-1f2d-49eb-8262-217ac2002626", "metadata": {"aucs": [0.7817587757599112, 0.7817587757599112, 0.7817587757599112, 0.7894599188486074, 0.7894599188486074, 0.7894599188486074, 0.7949511632540247, 0.7949511632540247, 0.7949511632540247, 0.5378516577960601, 0.5378516577960601, 0.5378516577960601, 0.5208202496728098, 0.5208202496728098, 0.5208202496728098, 0.5359061613602525, 0.5359061613602525, 0.5359061613602525, 0.10161592579258905, 0.10161592579258905, 0.10161592579258905, 0.14005456626494583, 0.14005456626494583, 0.14005456626494583, 0.14374844010103793, 0.14374844010103793, 0.14374844010103793, 0.11988463229283786, 0.11988463229283786, 0.11988463229283786, 0.11071180595948205, 0.11071180595948205, 0.11071180595948205, 0.1170483128503842, 0.1170483128503842, 0.1170483128503842, 0.9857691428071074, 0.9857691428071074, 0.9857691428071074, 0.9785235140424716, 0.9785235140424716, 0.9785235140424716, 0.963700380913503, 0.963700380913503, 0.963700380913503, 0.48057655263402077, 0.48057655263402077, 0.48057655263402077, 0.5381033307686622, 0.5381033307686622, 0.5381033307686622, 0.5345390058036867, 0.5345390058036867, 0.5345390058036867, 0.6659306623028273, 0.6659306623028273, 0.6659306623028273, 0.16017550070115416, 0.16017550070115416, 0.16017550070115416, 0.2080221268022936, 0.2080221268022936, 0.2080221268022936, 0.22728818690096508, 0.22728818690096508, 0.22728818690096508, 0.23303044347797175, 0.23303044347797175, 0.23303044347797175, 0.21050207647610475, 0.21050207647610475, 0.21050207647610475, 0.21567453978811968, 0.21567453978811968, 0.21567453978811968, 0.25437317843490803, 0.25437317843490803, 0.25437317843490803, 0.22448444115568722, 0.22448444115568722, 0.22448444115568722, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1731882460684958, 0.1731882460684958, 0.1731882460684958, 0.03275484925823713, 0.03275484925823713, 0.03275484925823713, 0.0766365047307962, 0.0766365047307962, 0.0766365047307962, 0.03530985451812685, 0.03530985451812685, 0.03530985451812685, 0.0610011744685085, 0.0610011744685085, 0.0610011744685085, 0.0813694393737433, 0.0813694393737433, 0.0813694393737433, 0.15881359348749158, 0.15881359348749158, 0.15881359348749158, 0.19841176916981584, 0.19841176916981584, 0.19841176916981584, 0.0803862432477388, 0.0803862432477388, 0.0803862432477388, 0.5035366112868165, 0.5035366112868165, 0.5035366112868165, 0.512446043036592, 0.512446043036592, 0.512446043036592, 0.5118681698307094, 0.5118681698307094, 0.5118681698307094, 0.1268252643482436, 0.1268252643482436, 0.1268252643482436, 0.16193878814621798, 0.16193878814621798, 0.16193878814621798, 0.14653033642393198, 0.14653033642393198, 0.14653033642393198, 0.25714578802931964, 0.25714578802931964, 0.25714578802931964, 0.29714292085913396, 0.29714292085913396, 0.29714292085913396, 0.16424679318937319, 0.16424679318937319, 0.16424679318937319, 0.4445783683579715, 0.4445783683579715, 0.4445783683579715, 0.43846261305772705, 0.43846261305772705, 0.43846261305772705, 0.45436861667943373, 0.45436861667943373, 0.45436861667943373, 0.2559291697526046, 0.2559291697526046, 0.2559291697526046, 0.1988756022928, 0.1988756022928, 0.1988756022928, 0.1349727222084408, 0.1349727222084408, 0.1349727222084408, 0.22455027692578422, 0.22455027692578422, 0.22455027692578422, 0.23709610572015694, 0.23709610572015694, 0.23709610572015694, 0.195887048528681, 0.195887048528681, 0.195887048528681, 0.21133514606621295, 0.21133514606621295, 0.21133514606621295, 0.20836426435507072, 0.20836426435507072, 0.20836426435507072, 0.2023660131960422, 0.2023660131960422, 0.2023660131960422, 0.849187604476887, 0.849187604476887, 0.849187604476887, 0.15758595275136178, 0.15758595275136178, 0.15758595275136178, 0.16640601489025997, 0.16640601489025997, 0.16640601489025997, 0.20729323589366144, 0.20729323589366144, 0.20729323589366144, 0.21006372544266272, 0.21006372544266272, 0.21006372544266272, 0.1560214463455446, 0.1560214463455446, 0.1560214463455446, 0.18317502520680184, 0.18317502520680184, 0.18317502520680184, 0.17703956403727583, 0.17703956403727583, 0.17703956403727583, 0.19754681727140355, 0.19754681727140355, 0.19754681727140355, 0.09537422853156063, 0.09537422853156063, 0.09537422853156063, 0.09355413880180274, 0.09355413880180274, 0.09355413880180274, 0.09973043336075338, 0.09973043336075338, 0.09973043336075338]}, "mutation_prompt": null}
