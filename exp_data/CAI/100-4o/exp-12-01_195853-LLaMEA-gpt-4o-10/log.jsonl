{"id": "2df6f581-896e-439c-8ba2-617226f3b829", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 2.0  # Cognitive coefficient\n        self.c2 = 2.0  # Social coefficient\n        self.inertia = 0.9  # Inertia weight factor\n        self.evals = 0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(pos) for pos in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        \n        self.evals = self.swarm_size\n        \n        while self.evals < self.budget:\n            for i in range(self.swarm_size):\n                if self.evals >= self.budget:\n                    break\n                \n                # Update velocities\n                velocities[i] = (self.inertia * velocities[i] + \n                                 self.c1 * np.random.rand() * (personal_best_positions[i] - positions[i]) +\n                                 self.c2 * np.random.rand() * (global_best_position - positions[i]))\n\n                # Update positions\n                positions[i] += velocities[i]\n                \n                # Ensure within bounds\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate new position\n                score = func(positions[i])\n                self.evals += 1\n\n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Adapt inertia weight\n            self.inertia = 0.4 + 0.5 * ((self.budget - self.evals) / self.budget)\n        \n        return global_best_position, global_best_score", "name": "AdaptivePSO", "description": "An adaptive particle swarm optimization (APSO) algorithm that dynamically adjusts its parameters based on swarm performance to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.21964510407597015, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.5290732567190182, 0.5023319486974835, 0.5582610896775158, 0.5773015770356595, 0.5501546276700411, 0.5789316245278023, 0.5253011701366853, 0.5641903702794735, 0.5098133496958817, 0.039346975673837936, 9.999999999998899e-05, 9.999999999998899e-05, 0.02959016647385504, 9.999999999998899e-05, 0.03555622127418445, 0.08314960255680637, 0.05961728940787381, 0.022905997417949964, 0.09360602853061151, 0.14891407065509754, 0.12021858013643427, 0.06603288592727752, 0.15044271257409914, 0.11940226960599831, 0.09595388916316683, 0.07864390519129738, 0.41961799713750403, 0.089730715052318, 0.0691555863352904, 0.06168528491958969, 0.10596790489664087, 0.08938910369251385, 0.09540403074117298, 0.0900513664157504, 0.09100843502984624, 0.09665092201532222, 0.9944967258496595, 0.9962937665521862, 0.9949113079001253, 0.973522014090954, 0.9950205292127674, 0.09978922765920906, 0.9947596365978109, 0.99504267534608, 0.9948931833102204, 0.3124943312693883, 0.24723564985765545, 0.19227942454014368, 0.33461577433006373, 0.23912276343061523, 0.23492967915365992, 0.08263576748432533, 0.2118045872885581, 0.048758814783797066, 0.16988931768383986, 0.4782687386797386, 0.20711629590992275, 0.20189314429855687, 0.11444923694847897, 0.5629302831633065, 0.12437388113009218, 0.2086618942007954, 0.1376520664023574, 0.18282377788867, 0.09296549099358176, 0.1759384097752088, 0.10477091268647387, 0.1021528021753495, 0.15935724066250845, 0.2185521218361719, 0.11139153660259782, 0.1888759202694782, 0.23061707390245123, 0.01936588484107926, 0.17624611730496031, 0.12181201670596642, 0.30256528155561246, 0.12233822074792478, 0.14903668658131497, 0.09763863362377578, 0.1658420208780974, 0.052661198074482996, 9.999999999998899e-05, 0.03403837038751334, 0.004754990687693916, 0.09613536609153073, 9.999999999998899e-05, 0.06732092293990521, 0.025300726974241683, 0.10813521749963095, 0.07148220748756162, 0.11090872360356552, 0.10025761722021687, 0.178348872690678, 0.0454154066492829, 0.06663155180204539, 0.03578814793688723, 0.0589561955886142, 0.02600165550043143, 9.999999999998899e-05, 0.03746119359611966, 0.028240326627603674, 0.038601982889759356, 0.02969612562262469, 0.1100653105566014, 0.04068588748393909, 0.08322074904434262, 0.03580801972071679, 0.06646642988065743, 0.10798041024647331, 0.15569377033217457, 0.07691307175352413, 0.1468136892247458, 0.08935639758797664, 0.059201099935388135, 0.05638959482278483, 0.06743092689301833, 0.47481230463022905, 0.4749346431723219, 0.49974032980396654, 0.4861606043186113, 0.454315160544443, 0.41986817868606763, 0.4461454032672242, 0.4676831604503504, 0.49065107189661195, 0.09245705338571586, 0.08089214334819539, 0.08171543329847686, 0.08780932886966875, 0.10137256381708049, 0.11835667557491036, 0.08424552637895144, 0.07832973604785343, 0.11573626439659945, 0.2528962051962911, 0.24409430303696344, 0.22568585192766, 0.2177474924446139, 0.23940024359643852, 0.2245532405848324, 0.26772298755487534, 0.16210622796660468, 0.2079406833153994, 0.21068406105500903, 0.24916191961564838, 0.27725828232854677, 0.2424276844516533, 0.2502244626230482, 0.24372147612320583, 0.2522820059849289, 0.2794097706784945, 0.25198878097179345, 0.19491685386660584, 0.17158645884770818, 0.17540323212964581, 0.22850872240245157, 0.1695048988257396, 0.18610227595169349, 0.16743781125222668, 0.22623913466747736, 0.24149567821845597, 0.225547811174991, 0.21864633337368178, 0.21869842314989396, 0.2034176736992055, 0.2404204205901488, 0.2019996953827402, 0.22485580434405195, 0.18644651900102038, 0.18411604460760067, 0.19487982531428105, 0.20490061059025555, 0.1749116921862427, 0.19669501894877583, 0.21612133207672546, 0.19720329768559275, 0.17386595726425658, 0.17325765640062019, 0.17507885846099525, 0.2304049838020542, 0.16434800593799426, 0.12436196250113551, 0.18141628404309385, 0.19656623833589582, 0.622082760357983, 0.09736493889819342, 0.16672697558605254, 0.5130833360161384, 0.5740181058911782, 0.53479862613131, 0.4714414303256117, 0.4164306019172892, 0.41976248006157735, 0.5440006900641297, 0.19652668884350466, 0.1960159811301041, 0.18668250298818778, 0.2115163765625272, 0.1994574424751414, 0.2009875277741351, 0.21840246827222698, 0.18776587388706767, 0.17930011418772251, 0.1909612855828403, 0.1839126721861336, 0.1826251231236845, 0.07549074519103327, 0.08126167159781816, 0.07526518513460523, 0.06993030155404378, 0.0719378217167459, 0.08614954415782627, 0.07970801896011903, 0.0787478739098999, 0.07680656082592119]}, "mutation_prompt": null}
{"id": "20d04bdf-f9a3-4e21-902d-0345576bbb68", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 2.0  # Cognitive coefficient\n        self.c2 = 2.0  # Social coefficient\n        self.inertia = 0.9  # Inertia weight factor\n        self.evals = 0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(pos) for pos in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        \n        self.evals = self.swarm_size\n        \n        while self.evals < self.budget:\n            for i in range(self.swarm_size):\n                if self.evals >= self.budget:\n                    break\n                \n                # Update velocities\n                velocities[i] = (self.inertia * velocities[i] + \n                                 self.c1 * np.random.rand() * (personal_best_positions[i] - positions[i]) +\n                                 self.c2 * np.random.rand() * (global_best_position - positions[i]))\n\n                # Update positions\n                positions[i] += velocities[i]\n                \n                # Ensure within bounds\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate new position\n                score = func(positions[i])\n                self.evals += 1\n\n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Adapt inertia weight\n            self.inertia = 0.4 + 0.5 * ((self.budget - self.evals) / self.budget)\n        \n        return global_best_position, global_best_score", "name": "AdaptivePSO", "description": "An adaptive particle swarm optimization (APSO) algorithm that dynamically adjusts its parameters based on swarm performance to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2df6f581-896e-439c-8ba2-617226f3b829", "metadata": {"aucs": [0.5290732567190182, 0.5023319486974835, 0.5582610896775158, 0.5773015770356595, 0.5501546276700411, 0.5789316245278023, 0.5253011701366853, 0.5641903702794735, 0.5098133496958817, 0.039346975673837936, 9.999999999998899e-05, 9.999999999998899e-05, 0.02959016647385504, 9.999999999998899e-05, 0.03555622127418445, 0.08314960255680637, 0.05961728940787381, 0.022905997417949964, 0.09360602853061151, 0.14891407065509754, 0.12021858013643427, 0.06603288592727752, 0.15044271257409914, 0.11940226960599831, 0.09595388916316683, 0.07864390519129738, 0.41961799713750403, 0.089730715052318, 0.0691555863352904, 0.06168528491958969, 0.10596790489664087, 0.08938910369251385, 0.09540403074117298, 0.0900513664157504, 0.09100843502984624, 0.09665092201532222, 0.9944967258496595, 0.9962937665521862, 0.9949113079001253, 0.973522014090954, 0.9950205292127674, 0.09978922765920906, 0.9947596365978109, 0.99504267534608, 0.9948931833102204, 0.3124943312693883, 0.24723564985765545, 0.19227942454014368, 0.33461577433006373, 0.23912276343061523, 0.23492967915365992, 0.08263576748432533, 0.2118045872885581, 0.048758814783797066, 0.16988931768383986, 0.4782687386797386, 0.20711629590992275, 0.20189314429855687, 0.11444923694847897, 0.5629302831633065, 0.12437388113009218, 0.2086618942007954, 0.1376520664023574, 0.18282377788867, 0.09296549099358176, 0.1759384097752088, 0.10477091268647387, 0.1021528021753495, 0.15935724066250845, 0.2185521218361719, 0.11139153660259782, 0.1888759202694782, 0.23061707390245123, 0.01936588484107926, 0.17624611730496031, 0.12181201670596642, 0.30256528155561246, 0.12233822074792478, 0.14903668658131497, 0.09763863362377578, 0.1658420208780974, 0.052661198074482996, 9.999999999998899e-05, 0.03403837038751334, 0.004754990687693916, 0.09613536609153073, 9.999999999998899e-05, 0.06732092293990521, 0.025300726974241683, 0.10813521749963095, 0.07148220748756162, 0.11090872360356552, 0.10025761722021687, 0.178348872690678, 0.0454154066492829, 0.06663155180204539, 0.03578814793688723, 0.0589561955886142, 0.02600165550043143, 9.999999999998899e-05, 0.03746119359611966, 0.028240326627603674, 0.038601982889759356, 0.02969612562262469, 0.1100653105566014, 0.04068588748393909, 0.08322074904434262, 0.03580801972071679, 0.06646642988065743, 0.10798041024647331, 0.15569377033217457, 0.07691307175352413, 0.1468136892247458, 0.08935639758797664, 0.059201099935388135, 0.05638959482278483, 0.06743092689301833, 0.47481230463022905, 0.4749346431723219, 0.49974032980396654, 0.4861606043186113, 0.454315160544443, 0.41986817868606763, 0.4461454032672242, 0.4676831604503504, 0.49065107189661195, 0.09245705338571586, 0.08089214334819539, 0.08171543329847686, 0.08780932886966875, 0.10137256381708049, 0.11835667557491036, 0.08424552637895144, 0.07832973604785343, 0.11573626439659945, 0.2528962051962911, 0.24409430303696344, 0.22568585192766, 0.2177474924446139, 0.23940024359643852, 0.2245532405848324, 0.26772298755487534, 0.16210622796660468, 0.2079406833153994, 0.21068406105500903, 0.24916191961564838, 0.27725828232854677, 0.2424276844516533, 0.2502244626230482, 0.24372147612320583, 0.2522820059849289, 0.2794097706784945, 0.25198878097179345, 0.19491685386660584, 0.17158645884770818, 0.17540323212964581, 0.22850872240245157, 0.1695048988257396, 0.18610227595169349, 0.16743781125222668, 0.22623913466747736, 0.24149567821845597, 0.225547811174991, 0.21864633337368178, 0.21869842314989396, 0.2034176736992055, 0.2404204205901488, 0.2019996953827402, 0.22485580434405195, 0.18644651900102038, 0.18411604460760067, 0.19487982531428105, 0.20490061059025555, 0.1749116921862427, 0.19669501894877583, 0.21612133207672546, 0.19720329768559275, 0.17386595726425658, 0.17325765640062019, 0.17507885846099525, 0.2304049838020542, 0.16434800593799426, 0.12436196250113551, 0.18141628404309385, 0.19656623833589582, 0.622082760357983, 0.09736493889819342, 0.16672697558605254, 0.5130833360161384, 0.5740181058911782, 0.53479862613131, 0.4714414303256117, 0.4164306019172892, 0.41976248006157735, 0.5440006900641297, 0.19652668884350466, 0.1960159811301041, 0.18668250298818778, 0.2115163765625272, 0.1994574424751414, 0.2009875277741351, 0.21840246827222698, 0.18776587388706767, 0.17930011418772251, 0.1909612855828403, 0.1839126721861336, 0.1826251231236845, 0.07549074519103327, 0.08126167159781816, 0.07526518513460523, 0.06993030155404378, 0.0719378217167459, 0.08614954415782627, 0.07970801896011903, 0.0787478739098999, 0.07680656082592119]}, "mutation_prompt": null}
