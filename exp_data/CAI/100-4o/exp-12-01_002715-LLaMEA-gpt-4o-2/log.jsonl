{"id": "3a298dc7-188b-4c0f-9733-6d81ed2d8580", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n        # Initialize particle positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        \n        # Initialize personal and global bests\n        self.personal_best_positions = self.positions.copy()\n        self.personal_best_scores = np.full(self.pop_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_score = float('inf')\n        \n        self.iterations = self.budget // self.pop_size\n        \n    def __call__(self, func):\n        evaluations = 0\n        w_max = 0.9\n        w_min = 0.4\n        c1 = c2 = 2.0\n        \n        for i in range(self.iterations):\n            # Adaptive inertia weight\n            w = w_max - ((w_max - w_min) * i / self.iterations)\n            \n            # Evaluate fitness\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.pop_size\n            \n            # Update personal and global bests\n            better_mask = scores < self.personal_best_scores\n            self.personal_best_scores[better_mask] = scores[better_mask]\n            self.personal_best_positions[better_mask] = self.positions[better_mask]\n            \n            global_best_candidate = np.min(scores)\n            if global_best_candidate < self.global_best_score:\n                self.global_best_score = global_best_candidate\n                self.global_best_position = self.positions[np.argmin(scores)]\n                \n            # Update velocities and positions\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            self.velocities = (w * self.velocities \n                               + c1 * r1 * (self.personal_best_positions - self.positions) \n                               + c2 * r2 * (self.global_best_position - self.positions))\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n            \n            if evaluations >= self.budget:\n                break\n        \n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "A Particle Swarm Optimization (PSO) variant with adaptive inertia weight and dynamic topology for enhanced exploration and exploitation balance.", "configspace": "", "generation": 0, "fitness": 0.14188535756433945, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.33680983562803835, 0.35074445260907383, 0.20654204479778882, 0.32245883724834823, 0.18169948109580014, 0.1893012839782493, 0.4080898529948832, 0.2773287347623712, 0.17008044206812922, 0.009024070987417865, 9.999999999998899e-05, 9.999999999998899e-05, 0.016771604783959226, 9.999999999998899e-05, 0.03221191538777202, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04146123390636425, 0.04724311620427635, 0.03213956056582645, 0.04071868627053121, 0.05046894691647963, 0.04138827777669962, 0.07472500270935911, 0.05059236020536739, 0.046337057071906385, 0.07839488541461159, 0.028406736383358333, 0.03367349011303089, 0.05529741921948916, 0.03590555306193677, 0.03588546470662057, 0.03813172490146355, 0.04494315818941996, 0.057420533077317315, 0.9895205950757306, 0.9862106794875435, 0.9900949633822808, 0.9817381779046097, 0.9855956660837235, 0.9842585526479605, 0.9863232123300806, 0.9902111368223847, 0.9850582589186199, 0.0892722339262858, 0.1396887192041728, 0.0536413694426785, 0.10594557765410628, 0.11820376372823671, 0.12802036019927143, 0.08039905864891639, 0.050540469717708536, 0.0760071155512807, 0.12995267129847776, 0.15414249544566738, 0.13541815042320615, 0.1491943023700485, 0.16836452154516734, 0.1663624713944689, 0.10662132733695506, 0.16041949257300459, 0.09914860770167089, 0.04320543285902678, 0.06191576572562063, 0.020916744667895948, 0.03554719230288206, 0.010997027046258934, 9.999999999998899e-05, 0.07947208970565267, 0.06112042288866326, 9.999999999998899e-05, 0.05788487717714852, 0.04362855285942113, 0.07303104458769305, 0.03379224309044315, 0.018319160901235754, 0.058363261511675035, 0.08549635967566716, 0.03238173051408244, 0.027188934986658975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009587674143242797, 9.999999999998899e-05, 0.04719203357302848, 0.06979758556588134, 0.045240023512709504, 9.999999999998899e-05, 0.02322496534662255, 0.03672684774957269, 0.03207619747361712, 0.006549255275116073, 9.999999999998899e-05, 9.999999999998899e-05, 0.005710054803676257, 9.999999999998899e-05, 0.007656994846781173, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01898676283638001, 9.999999999998899e-05, 9.999999999998899e-05, 0.0015320378985006489, 9.999999999998899e-05, 0.04036388277796599, 9.999999999998899e-05, 9.999999999998899e-05, 0.027579037927144556, 0.24844306491428092, 0.30411941209737103, 0.19256959491017278, 0.20198429525798778, 0.2521313463262186, 0.19120964699491128, 0.27789811505731155, 0.3104978300539869, 0.2554894899248079, 0.04984527280525475, 0.04872167656875204, 0.05011278359851912, 0.06257472129788333, 0.05583072588455995, 0.06500448980118001, 0.05057915171329219, 0.03708216083645288, 0.07283479329667786, 0.12414367798518611, 0.1424534325521568, 0.17701260925756868, 0.13717708594487044, 0.14565916015267555, 0.1455644993133055, 0.14493405416929395, 0.1255520646902054, 0.15919937633947734, 0.18731080092368213, 0.19259945377957532, 0.17275766190663377, 0.21367040326313358, 0.1790894642662645, 0.15456535751663902, 0.1608149425621065, 0.23169710710896496, 0.13339857763302387, 0.13763467263207896, 0.12700838974618323, 0.13823273203030206, 0.1134733902869417, 0.10964019330360009, 0.11393701445332749, 0.16208195567470862, 0.12798503132353722, 0.11060202829944099, 0.15611896044082274, 0.11799155671178885, 0.16047904466999685, 0.15476872107395523, 0.1844659097426109, 0.15326108792705906, 0.17262301622442688, 0.1542315133255614, 0.1805028203282194, 0.1623604605495491, 0.15524539832241657, 0.16260083005011916, 0.16447079524091857, 0.14304746266061297, 0.1614465822359369, 0.1544810712390916, 0.1600081007633729, 0.17255128737757963, 0.10983792045742247, 0.1386348464477305, 0.13475416264756024, 0.2739637579512251, 0.37673091070658027, 0.15347356847730576, 0.15324522940628504, 0.1687064375740701, 0.3186216404152439, 0.2530868588331757, 0.20887671018332854, 0.14440453211550552, 0.10971252953781219, 0.18375606226700258, 0.08937011890834434, 0.18612829367941897, 0.1832253733615059, 0.1841139603054659, 0.19399237108278233, 0.18821296621543537, 0.17095367610419032, 0.17275532164515517, 0.19229572622934266, 0.17297046198385213, 0.18721421938544713, 0.19136593759213805, 0.1878071214824799, 0.07284363842411656, 0.04379548515326692, 0.05853290508344211, 0.07416942988376252, 0.03685613424866474, 0.0459293659314266, 0.067969425326035, 0.05757548107510069, 0.052542418356747445]}, "mutation_prompt": null}
{"id": "85ddb8b0-a390-475a-838a-d553b58032a7", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n        # Initialize particle positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        \n        # Initialize personal and global bests\n        self.personal_best_positions = self.positions.copy()\n        self.personal_best_scores = np.full(self.pop_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_score = float('inf')\n        \n        self.iterations = self.budget // self.pop_size\n        \n    def __call__(self, func):\n        evaluations = 0\n        w_max = 0.9\n        w_min = 0.4\n        c1 = c2 = 2.0\n        \n        for i in range(self.iterations):\n            # Adaptive inertia weight\n            w = w_max - ((w_max - w_min) * i / self.iterations)\n            \n            # Evaluate fitness\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.pop_size\n            \n            # Update personal and global bests\n            better_mask = scores < self.personal_best_scores\n            self.personal_best_scores[better_mask] = scores[better_mask]\n            self.personal_best_positions[better_mask] = self.positions[better_mask]\n            \n            global_best_candidate = np.min(scores)\n            if global_best_candidate < self.global_best_score:\n                self.global_best_score = global_best_candidate\n                self.global_best_position = self.positions[np.argmin(scores)]\n                \n            # Update velocities and positions\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            self.velocities = (w * self.velocities \n                               + c1 * r1 * (self.personal_best_positions - self.positions) \n                               + c2 * r2 * (self.global_best_position - self.positions))\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n            \n            if evaluations >= self.budget:\n                break\n        \n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "A Particle Swarm Optimization (PSO) variant with adaptive inertia weight and dynamic topology for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3a298dc7-188b-4c0f-9733-6d81ed2d8580", "metadata": {"aucs": [0.33680983562803835, 0.35074445260907383, 0.20654204479778882, 0.32245883724834823, 0.18169948109580014, 0.1893012839782493, 0.4080898529948832, 0.2773287347623712, 0.17008044206812922, 0.009024070987417865, 9.999999999998899e-05, 9.999999999998899e-05, 0.016771604783959226, 9.999999999998899e-05, 0.03221191538777202, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04146123390636425, 0.04724311620427635, 0.03213956056582645, 0.04071868627053121, 0.05046894691647963, 0.04138827777669962, 0.07472500270935911, 0.05059236020536739, 0.046337057071906385, 0.07839488541461159, 0.028406736383358333, 0.03367349011303089, 0.05529741921948916, 0.03590555306193677, 0.03588546470662057, 0.03813172490146355, 0.04494315818941996, 0.057420533077317315, 0.9895205950757306, 0.9862106794875435, 0.9900949633822808, 0.9817381779046097, 0.9855956660837235, 0.9842585526479605, 0.9863232123300806, 0.9902111368223847, 0.9850582589186199, 0.0892722339262858, 0.1396887192041728, 0.0536413694426785, 0.10594557765410628, 0.11820376372823671, 0.12802036019927143, 0.08039905864891639, 0.050540469717708536, 0.0760071155512807, 0.12995267129847776, 0.15414249544566738, 0.13541815042320615, 0.1491943023700485, 0.16836452154516734, 0.1663624713944689, 0.10662132733695506, 0.16041949257300459, 0.09914860770167089, 0.04320543285902678, 0.06191576572562063, 0.020916744667895948, 0.03554719230288206, 0.010997027046258934, 9.999999999998899e-05, 0.07947208970565267, 0.06112042288866326, 9.999999999998899e-05, 0.05788487717714852, 0.04362855285942113, 0.07303104458769305, 0.03379224309044315, 0.018319160901235754, 0.058363261511675035, 0.08549635967566716, 0.03238173051408244, 0.027188934986658975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009587674143242797, 9.999999999998899e-05, 0.04719203357302848, 0.06979758556588134, 0.045240023512709504, 9.999999999998899e-05, 0.02322496534662255, 0.03672684774957269, 0.03207619747361712, 0.006549255275116073, 9.999999999998899e-05, 9.999999999998899e-05, 0.005710054803676257, 9.999999999998899e-05, 0.007656994846781173, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01898676283638001, 9.999999999998899e-05, 9.999999999998899e-05, 0.0015320378985006489, 9.999999999998899e-05, 0.04036388277796599, 9.999999999998899e-05, 9.999999999998899e-05, 0.027579037927144556, 0.24844306491428092, 0.30411941209737103, 0.19256959491017278, 0.20198429525798778, 0.2521313463262186, 0.19120964699491128, 0.27789811505731155, 0.3104978300539869, 0.2554894899248079, 0.04984527280525475, 0.04872167656875204, 0.05011278359851912, 0.06257472129788333, 0.05583072588455995, 0.06500448980118001, 0.05057915171329219, 0.03708216083645288, 0.07283479329667786, 0.12414367798518611, 0.1424534325521568, 0.17701260925756868, 0.13717708594487044, 0.14565916015267555, 0.1455644993133055, 0.14493405416929395, 0.1255520646902054, 0.15919937633947734, 0.18731080092368213, 0.19259945377957532, 0.17275766190663377, 0.21367040326313358, 0.1790894642662645, 0.15456535751663902, 0.1608149425621065, 0.23169710710896496, 0.13339857763302387, 0.13763467263207896, 0.12700838974618323, 0.13823273203030206, 0.1134733902869417, 0.10964019330360009, 0.11393701445332749, 0.16208195567470862, 0.12798503132353722, 0.11060202829944099, 0.15611896044082274, 0.11799155671178885, 0.16047904466999685, 0.15476872107395523, 0.1844659097426109, 0.15326108792705906, 0.17262301622442688, 0.1542315133255614, 0.1805028203282194, 0.1623604605495491, 0.15524539832241657, 0.16260083005011916, 0.16447079524091857, 0.14304746266061297, 0.1614465822359369, 0.1544810712390916, 0.1600081007633729, 0.17255128737757963, 0.10983792045742247, 0.1386348464477305, 0.13475416264756024, 0.2739637579512251, 0.37673091070658027, 0.15347356847730576, 0.15324522940628504, 0.1687064375740701, 0.3186216404152439, 0.2530868588331757, 0.20887671018332854, 0.14440453211550552, 0.10971252953781219, 0.18375606226700258, 0.08937011890834434, 0.18612829367941897, 0.1832253733615059, 0.1841139603054659, 0.19399237108278233, 0.18821296621543537, 0.17095367610419032, 0.17275532164515517, 0.19229572622934266, 0.17297046198385213, 0.18721421938544713, 0.19136593759213805, 0.1878071214824799, 0.07284363842411656, 0.04379548515326692, 0.05853290508344211, 0.07416942988376252, 0.03685613424866474, 0.0459293659314266, 0.067969425326035, 0.05757548107510069, 0.052542418356747445]}, "mutation_prompt": null}
