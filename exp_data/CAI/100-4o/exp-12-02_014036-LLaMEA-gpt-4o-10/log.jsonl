{"id": "f77559af-b142-4569-b55b-6c2bc7985718", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20  # population size\n        self.inertia = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.8  # differential evolution parameter\n        self.CR = 0.9  # crossover probability\n        \n    def __call__(self, func):\n        # Initialize population of particles and velocities\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.pop_size, float('inf'))\n        \n        # Evaluate initial population\n        scores = np.apply_along_axis(func, 1, particles)\n        self.budget -= self.pop_size\n        \n        # Update personal bests\n        better_mask = scores < personal_best_scores\n        personal_best_scores[better_mask] = scores[better_mask]\n        personal_best_positions[better_mask] = particles[better_mask]\n        \n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        \n        while self.budget > 0:\n            # Particle Swarm Optimization step\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.c1 * r1 * (personal_best_positions - particles) +\n                          self.c2 * r2 * (global_best_position - particles))\n            particles = np.clip(particles + velocities, self.lower_bound, self.upper_bound)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if self.budget <= 0:\n                    break\n                # Mutate\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = particles[a] + self.F * (particles[b] - particles[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, particles[i])\n                \n                # Selection\n                trial_score = func(trial)\n                self.budget -= 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    particles[i] = trial\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial\n                        if trial_score < personal_best_scores[global_best_index]:\n                            global_best_index = i\n                            global_best_position = trial\n        \n        return global_best_position, personal_best_scores[global_best_index]", "name": "HybridPSO_DE", "description": "A hybrid algorithm combining Particle Swarm Optimization and Differential Evolution for robust global search in diverse optimization landscapes.", "configspace": "", "generation": 0, "fitness": 0.30082388865640497, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8250963368002675, 0.8290436601056876, 0.8456410036801598, 0.8523202468540139, 0.8697424040940369, 0.15699125826799065, 0.8479642442257228, 0.8149005710641726, 0.847412539157233, 0.5648093800065538, 0.6628900180664483, 0.6891916613178146, 0.6829043766243467, 0.6999218513473201, 0.624107510813187, 0.7164488747784885, 0.6661151389661859, 0.7194659366005627, 0.10970815360976216, 0.1435252437363872, 0.13103985345967228, 0.08966135002136266, 0.12451005405490156, 0.11705305095127061, 0.12695617970772366, 0.12967454021063007, 0.053564450331849534, 0.1192268371457107, 0.13053976168312276, 0.11400078373876932, 0.11731330198765721, 0.11751944070091558, 0.1228929100632391, 0.12083572694272648, 0.12600804181792158, 0.12316605186496532, 0.9940971074831809, 0.9852663606406665, 0.992448564362602, 0.9890073060073342, 0.9929561647427562, 0.9893205619329171, 0.994058553032984, 0.9923736100191072, 0.9929309272848474, 0.542340972929147, 0.5502701313480653, 0.5686766422594993, 0.5507570616302927, 0.5643996863418594, 0.5272025132160867, 0.126876516031463, 0.6040295162692619, 0.08866786589921416, 0.22691385268942443, 0.7660869705975709, 0.2190033692106148, 0.7207512908183156, 0.33979195305384013, 0.6921605847199811, 0.798599095441335, 0.6801544302927804, 0.5586890790649592, 0.19460099493355965, 0.21570980740100598, 0.2061948327315325, 0.11349090148659746, 0.20948782098717833, 0.19977117911129294, 0.1960124110249305, 0.20835511268557627, 0.21045344120261233, 0.24045445784497665, 0.054159592893629815, 0.2015314794200117, 0.21246175891210672, 0.19940038530929471, 0.23239671484136748, 0.23593752214838692, 0.03277273224903454, 0.21935926610952117, 0.045515381387529086, 0.043006930467323734, 0.0020480111664683553, 9.999999999998899e-05, 0.00024301220144695712, 9.999999999998899e-05, 0.015548521318243913, 9.999999999998899e-05, 0.003434172404093272, 0.04733855467487669, 0.061578048786036566, 0.08870552091937622, 0.10606100933858487, 0.003431235251678655, 0.03530544110628364, 0.027513192962325794, 0.027633207195385534, 0.03232016141224048, 0.04894490917025507, 0.10477203778229649, 0.031160061583473952, 0.07485429676593447, 0.15408922443522532, 0.0778695694674596, 0.11197908227847997, 0.07319594041132627, 0.06898421081880146, 0.2077474958988107, 0.18064870697898716, 0.09104119134642419, 0.053530908872341576, 0.18718973697495966, 0.10917467762177746, 0.08802693342213641, 0.15682862130124453, 0.08485107383648771, 0.5123777615937941, 0.5504157971588226, 0.5314798969087353, 0.5158609388392164, 0.5163678793333133, 0.5323320251822209, 0.5528493610285067, 0.5192814588583159, 0.5374357295618709, 0.09727326896408905, 0.11414634390590783, 0.08954729089717617, 0.10569946585057588, 0.10381373558906382, 0.09072935790739578, 0.11448221109824552, 0.08572675380796413, 0.12523031822540054, 0.16278667750113163, 0.18952002127323786, 0.14515416321815988, 0.2179802794956498, 0.3250388055678256, 0.1743901197235327, 0.17548389784015894, 0.18739975364522587, 0.23081722699883045, 0.4155945548894112, 0.45102349680937825, 0.3550903829230311, 0.4478737252123812, 0.4383195452360492, 0.462364986806877, 0.46939313809466254, 0.451686908629642, 0.499671092947491, 0.18987781466819553, 0.2349447179572265, 0.2213889224199821, 0.357224427940953, 0.19262769537446123, 0.20875810513877124, 0.27304545761733134, 0.34404071731422337, 0.31934233280230395, 0.19985977340269478, 0.19880182840743588, 0.19845742179750492, 0.1921201653161625, 0.19673362889894674, 0.18942405433117804, 0.20213706169789725, 0.19855927821993058, 0.2159681673900865, 0.17891585782814978, 0.233057051087197, 0.18316170168085844, 0.20639613204676588, 0.20010788560939718, 0.2234724748391156, 0.1985530830731197, 0.20497451571201186, 0.2286032817337209, 0.8661187424908746, 0.1994020917806958, 0.15415463087012016, 0.8666652189304427, 0.878757140999089, 0.19722989715826456, 0.09977941139507185, 0.16851997596437285, 0.850706825708616, 0.12578797388502205, 0.16905311135906265, 0.11261823390785664, 0.6408433301673279, 0.16771700442672677, 0.20959674060277078, 0.11282375791906762, 0.15563354514336936, 0.20145890726798243, 0.18197749410973407, 0.18491865038614497, 0.18712264974688664, 0.18193327931130354, 0.14983632590665852, 0.1856631346180585, 0.2005295967795463, 0.20407801072225307, 0.2034472731953504, 0.07867176214232985, 0.07190822112219342, 0.07802899771601424, 0.0828400321328947, 0.08298259273888675, 0.08676145582594841, 0.06942001902583539, 0.08580867449965701, 0.09255839102831054]}, "mutation_prompt": null}
{"id": "22be13d6-745a-4cad-a5f4-a79467f5863d", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20  # population size\n        self.inertia = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.8  # differential evolution parameter\n        self.CR = 0.9  # crossover probability\n\n    def __call__(self, func):\n        # Initialize population of particles and velocities\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.pop_size, float('inf'))\n\n        # Evaluate initial population\n        scores = np.apply_along_axis(func, 1, particles)\n        self.budget -= self.pop_size\n\n        # Update personal bests\n        better_mask = scores < personal_best_scores\n        personal_best_scores[better_mask] = scores[better_mask]\n        personal_best_positions[better_mask] = particles[better_mask]\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        while self.budget > 0:\n            # Particle Swarm Optimization step with adaptive parameters\n            self.inertia = 0.9 - 0.5 * (self.budget/self.budget)  # Adaptive inertia\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.c1 * r1 * (personal_best_positions - particles) +\n                          self.c2 * r2 * (global_best_position - particles))\n            particles = np.clip(particles + velocities, self.lower_bound, self.upper_bound)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if self.budget <= 0:\n                    break\n                # Mutate\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = particles[a] + self.F * (particles[b] - particles[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.budget -= 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    particles[i] = trial\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial\n                        if trial_score < personal_best_scores[global_best_index]:\n                            global_best_index = i\n                            global_best_position = trial\n\n        return global_best_position, personal_best_scores[global_best_index]", "name": "HybridPSO_DE", "description": "A refined hybrid algorithm integrating Particle Swarm Optimization and Differential Evolution with adaptive parameters for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": 0.33691821311604886, "feedback": "", "error": "", "parent_id": "f77559af-b142-4569-b55b-6c2bc7985718", "metadata": {"aucs": [0.9271579897374136, 0.9285608655265121, 0.9451248036816987, 0.9430788747057083, 0.19138078340584985, 0.9283502756569703, 0.940772870678622, 0.9315871327923532, 0.9302956894241875, 0.8447197564073469, 0.8715071390458409, 0.8699391493953327, 0.8518886293141947, 0.05073715912202259, 0.8485267384393074, 0.8833607993601645, 0.8542112053773094, 0.8767002363768223, 0.07273936611730147, 0.1323973634682628, 0.15216031676154818, 0.14333229688718585, 0.11598798978376856, 0.1572514758656891, 0.1473248945340474, 0.1842296890164734, 0.18031138061289276, 0.10887271626619877, 0.12369412461509233, 0.13764802123674957, 0.14113689423578213, 0.11158713219001315, 0.11011515181178533, 0.13321967449637362, 0.1137555263830684, 0.13270126413871275, 0.992222295444815, 0.9656896412758689, 0.9924893925590985, 0.9858620281912561, 0.9802434483884297, 0.9902259719961571, 0.9907378272805798, 0.9920612935985793, 0.99224821680474, 0.835774992876698, 0.8492891253685297, 0.8278682145408931, 0.8114731358326454, 0.8160933142186373, 0.8440741536687295, 0.8149770940419756, 0.8069524426070968, 0.08958685829201218, 0.8914315575521017, 0.9163682622881747, 0.391940395964375, 0.2136023751582008, 0.9460954376506666, 0.2805043313728516, 0.17785232589739808, 0.23067249580659166, 0.400815754718326, 0.25759664741135313, 0.24567488838765716, 0.26430795069281354, 0.13687460462610856, 0.28078698606597796, 0.2276629977900757, 0.2510576850236953, 0.13391275574702777, 0.24463275134674856, 0.24574479478240607, 0.12098570515671381, 0.2533155313395854, 0.29289352835701365, 0.2982204420977176, 0.2507396088444783, 0.29487204552994095, 0.292130707571547, 0.27797885288721247, 0.035822350574580386, 0.008397132066852109, 9.999999999998899e-05, 0.005698747439909502, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018047316006155611, 0.028347178996061095, 9.999999999998899e-05, 0.10620139109036697, 0.019862688383788685, 0.1879691621139835, 0.0835417457014409, 0.0031003978769975626, 0.01972684568269012, 0.14941406490420484, 0.05754817390079192, 0.02368014086955461, 0.05314431361932692, 0.03887783696150271, 0.2520303827786545, 0.24312028494275895, 0.08481082862468903, 0.09964026712745322, 0.11362592282913098, 0.11182666632099258, 0.07998969107210774, 0.19513125251029584, 0.05443209067720878, 0.2140139831308645, 0.24650070268453994, 0.11375079518637854, 0.06805986984370771, 0.0764209977207545, 0.1472741324644825, 0.09073811563073109, 0.6400637453980484, 0.5890011231742204, 0.588555055284764, 0.5719247599996247, 0.5731979375120317, 0.6272197798389583, 0.6756379371062449, 0.6336175248244915, 0.6015470164842832, 0.11996025729783755, 0.11114191166330478, 0.13570103232791697, 0.09228670739763079, 0.11719554248408426, 0.11670964406417805, 0.11481929770099397, 0.14582663640716909, 0.1372139470209358, 0.2662715138342554, 0.22460365018306816, 0.2869853981063535, 0.2927400517255485, 0.2014889393009034, 0.2527113264017694, 0.2060127544507856, 0.7743686791323079, 0.18646150680375673, 0.8101869118000287, 0.3772787659120872, 0.6001931748923597, 0.34148744926845154, 0.258150359317468, 0.5661545936433895, 0.3416774466071082, 0.6781770998303618, 0.5628078608266209, 0.1927347555465232, 0.21997325059607042, 0.16562476703909068, 0.4017002949026711, 0.3742577546782837, 0.21908584635347184, 0.19851687811731988, 0.35642617434401624, 0.3388822270016705, 0.20920122927463325, 0.19081740397809044, 0.1942775285257632, 0.20764508239289148, 0.1999073634393873, 0.21509648805343207, 0.20454357391893352, 0.20828132067651595, 0.2296172376004041, 0.19266584687307942, 0.19824578019866235, 0.22606393963822502, 0.22658594824373746, 0.22446258835051025, 0.20091437261483558, 0.25111619352956016, 0.25212619330793584, 0.2513993888951256, 0.9311667885897398, 0.12272835537250504, 0.1548254480945045, 0.1730472797996241, 0.20135320586546546, 0.17813561149314538, 0.12219540699471021, 0.17037245819352886, 0.16679209178146115, 0.1272945325489231, 0.21285389530094356, 0.8611167520745204, 0.9004563484427236, 0.17003528273169777, 0.8646451680091154, 0.10519174719436652, 0.09472115495647448, 0.10554062396728658, 0.19229358743586933, 0.1869837510498985, 0.18971627754670306, 0.19385418316938208, 0.1930319002769405, 0.18838429160043146, 0.19493770186721826, 0.1873425822674798, 0.17951040819549546, 0.09644548188914559, 0.08439556795093817, 0.08468654457214653, 0.09669403468558724, 0.09194100708840491, 0.09061195864592464, 0.09349145183113361, 0.08535436666100171, 0.08483088955841189]}, "mutation_prompt": null}
