{"id": "03b6ecc6-ce25-499e-91da-4f802df63c64", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim, pop_size=20, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evaluations = 0\n\n        def select_parents():\n            return np.random.choice(self.pop_size, 3, replace=False)\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                a, b, c = select_parents()\n                x_i = self.population[i]\n                x_a, x_b, x_c = self.population[a], self.population[b], self.population[c]\n\n                mutant_vector = x_a + self.F * (x_b - x_c)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.copy(x_i)\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR or j == np.random.randint(0, self.dim):\n                        trial_vector[j] = mutant_vector[j]\n\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial_vector\n\n                if trial_fitness < func(x_i):\n                    self.population[i] = trial_vector\n\n        return self.best_solution", "name": "AdaptiveDifferentialEvolution", "description": "An adaptive differential evolution algorithm that dynamically adjusts its mutation and crossover strategies to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.3045211988610745, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8570931825087074, 0.8373779200912956, 0.5472379233405673, 0.8601007170108101, 0.8546303675977291, 0.8588277702632647, 0.8633345921467243, 0.8424115822920885, 0.8472382512767234, 0.7351290504276007, 0.5271569512764922, 0.7168430992223722, 0.08756652389542907, 0.7311355173610518, 9.999999999998899e-05, 0.10636086062502836, 0.18448631193386722, 9.999999999998899e-05, 0.14041727258421366, 0.16437953892694768, 0.15339833015566395, 0.1117206854472299, 0.10696969591950112, 0.11651729019104118, 0.13305712859920427, 0.13685755318873583, 0.1398720138270162, 0.1007676124454503, 0.1030474847705447, 0.1303332875948381, 0.1385025436633156, 0.10388980684433757, 0.15030828452392198, 0.14476196917840223, 0.1160655275022453, 0.13147056025466552, 0.9075312793661457, 0.8073438081146825, 0.8890578063736289, 0.15084657580441185, 0.9519674489572902, 0.8232281472342339, 0.7852979628819003, 0.8311559569111859, 0.9212165161547009, 0.43960783259497316, 0.24271178265211724, 0.1583097055847309, 0.5017456557352781, 0.26905020565621063, 0.441867328945839, 0.08837539428931307, 0.22775549995184774, 0.189863242582331, 0.23459989283398608, 0.8181405963148185, 0.17088606140918494, 0.8562158910439455, 0.8236169127512969, 0.2750705594339119, 0.17637843112660812, 0.8528159343414154, 0.8302432097702925, 0.6979853412641153, 0.13989512120236391, 0.4137806213005817, 0.03770004348130296, 0.12804397603042017, 0.17916635855572627, 0.17276601376201162, 0.20516448655451835, 0.18480903931263415, 0.1393203834525224, 0.05815607841574788, 0.1386299280457708, 0.19205089787290863, 0.13593233865532606, 0.1346629199839079, 0.1575474708206659, 0.15080522455375378, 0.12485787093045386, 0.10180360614103989, 0.014179028720208597, 0.15365406296542883, 0.26272072971827387, 0.45043484966674463, 0.08279881923061971, 0.2953797751018604, 0.14016189513792465, 0.05457437073723592, 0.43375972640186966, 0.16151975516880834, 0.16847867380003534, 0.36121051192040754, 0.11262308766629991, 0.0382610416709116, 0.32552530339006447, 0.33836810231006675, 0.5544586829336894, 0.053535464067141714, 0.3623133944291933, 0.15974068309494593, 0.1560927354858963, 0.20079021612641768, 0.1729617189135988, 0.18521085290864192, 0.10433791814418636, 9.999999999998899e-05, 0.30288427697644393, 0.15764741520595693, 0.2326097936665894, 0.14569478383644585, 0.02105738557480108, 0.20040268074328338, 0.15798896077253832, 0.06811062597575124, 0.23896547362178133, 0.5627517147203047, 0.5564890895860527, 0.663455831531359, 0.6389630164769899, 0.45184387869281617, 0.46979572852044205, 0.35134263009886013, 0.6673119308738658, 0.458499499519878, 0.08525845571849244, 0.12391089266788624, 0.09411854757521365, 0.12868945594640113, 0.11368377565467003, 0.10705247217778813, 0.09261030737413256, 0.13087284688594913, 0.1326452174479753, 0.23088709322788536, 0.16989770710598318, 0.12312420891427811, 0.12822447219131572, 0.1802334900960566, 0.14806168989500712, 0.1569157484001984, 0.24408025919294862, 0.15520568234828003, 0.5330929440893282, 0.49936291832230884, 0.45622181497876757, 0.42116695704002505, 0.5109036175430512, 0.4754638433729286, 0.5818132572006731, 0.5767318767547363, 0.44426176201275147, 0.2724354688055911, 0.3791209376744158, 0.2012044873521711, 0.37192832275434473, 0.2968045256423817, 0.38855184585695524, 0.4551016690551245, 0.4712998783657677, 0.43742397048201, 0.18825579781038104, 0.20967124642519708, 0.23527860112277954, 0.2143131857202517, 0.2022855192762706, 0.20160130009584332, 0.19784130301856973, 0.21378714099082918, 0.1994899807526318, 0.2022555782060198, 0.20091341043467448, 0.2000925058328401, 0.2587342108678332, 0.18989770193112288, 0.20336332601024865, 0.20628522946212047, 0.23271448159721764, 0.4887468880346345, 0.1839452335391406, 0.15182052229177911, 0.15335176452223676, 0.8670182001517817, 0.1907709020549252, 0.8197831652623018, 0.8141727093773697, 0.18687084014457578, 0.7986935858320279, 0.24826682007314982, 0.20836721922854462, 0.15512924751012636, 0.46473981009237164, 0.1665268464601688, 0.4034817815062639, 0.15775661896237125, 0.15534974878163688, 0.1545084943709074, 0.1905867467957667, 0.19185290027383284, 0.19344387065751556, 0.19848347547322198, 0.18116784279916565, 0.18859267701884563, 0.20086192984096274, 0.19568368612369635, 0.19957827787341753, 0.08364055500341805, 0.0874751948290835, 0.09173139314273981, 0.08529666065504038, 0.07450359214641267, 0.07876625233702417, 0.09317713835932862, 0.08612417926624238, 0.08471856137771161]}, "mutation_prompt": null}
{"id": "b4bafa65-5315-40e7-a4f6-3c7daf69421e", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim, pop_size=20, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evaluations = 0\n\n        def select_parents():\n            return np.random.choice(self.pop_size, 3, replace=False)\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                a, b, c = select_parents()\n                x_i = self.population[i]\n                x_a, x_b, x_c = self.population[a], self.population[b], self.population[c]\n\n                mutant_vector = x_a + self.F * (x_b - x_c)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.copy(x_i)\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR or j == np.random.randint(0, self.dim):\n                        trial_vector[j] = mutant_vector[j]\n\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial_vector\n\n                if trial_fitness < func(x_i):\n                    self.population[i] = trial_vector\n\n        return self.best_solution", "name": "AdaptiveDifferentialEvolution", "description": "An adaptive differential evolution algorithm that dynamically adjusts its mutation and crossover strategies to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "03b6ecc6-ce25-499e-91da-4f802df63c64", "metadata": {"aucs": [0.8570931825087074, 0.8373779200912956, 0.5472379233405673, 0.8601007170108101, 0.8546303675977291, 0.8588277702632647, 0.8633345921467243, 0.8424115822920885, 0.8472382512767234, 0.7351290504276007, 0.5271569512764922, 0.7168430992223722, 0.08756652389542907, 0.7311355173610518, 9.999999999998899e-05, 0.10636086062502836, 0.18448631193386722, 9.999999999998899e-05, 0.14041727258421366, 0.16437953892694768, 0.15339833015566395, 0.1117206854472299, 0.10696969591950112, 0.11651729019104118, 0.13305712859920427, 0.13685755318873583, 0.1398720138270162, 0.1007676124454503, 0.1030474847705447, 0.1303332875948381, 0.1385025436633156, 0.10388980684433757, 0.15030828452392198, 0.14476196917840223, 0.1160655275022453, 0.13147056025466552, 0.9075312793661457, 0.8073438081146825, 0.8890578063736289, 0.15084657580441185, 0.9519674489572902, 0.8232281472342339, 0.7852979628819003, 0.8311559569111859, 0.9212165161547009, 0.43960783259497316, 0.24271178265211724, 0.1583097055847309, 0.5017456557352781, 0.26905020565621063, 0.441867328945839, 0.08837539428931307, 0.22775549995184774, 0.189863242582331, 0.23459989283398608, 0.8181405963148185, 0.17088606140918494, 0.8562158910439455, 0.8236169127512969, 0.2750705594339119, 0.17637843112660812, 0.8528159343414154, 0.8302432097702925, 0.6979853412641153, 0.13989512120236391, 0.4137806213005817, 0.03770004348130296, 0.12804397603042017, 0.17916635855572627, 0.17276601376201162, 0.20516448655451835, 0.18480903931263415, 0.1393203834525224, 0.05815607841574788, 0.1386299280457708, 0.19205089787290863, 0.13593233865532606, 0.1346629199839079, 0.1575474708206659, 0.15080522455375378, 0.12485787093045386, 0.10180360614103989, 0.014179028720208597, 0.15365406296542883, 0.26272072971827387, 0.45043484966674463, 0.08279881923061971, 0.2953797751018604, 0.14016189513792465, 0.05457437073723592, 0.43375972640186966, 0.16151975516880834, 0.16847867380003534, 0.36121051192040754, 0.11262308766629991, 0.0382610416709116, 0.32552530339006447, 0.33836810231006675, 0.5544586829336894, 0.053535464067141714, 0.3623133944291933, 0.15974068309494593, 0.1560927354858963, 0.20079021612641768, 0.1729617189135988, 0.18521085290864192, 0.10433791814418636, 9.999999999998899e-05, 0.30288427697644393, 0.15764741520595693, 0.2326097936665894, 0.14569478383644585, 0.02105738557480108, 0.20040268074328338, 0.15798896077253832, 0.06811062597575124, 0.23896547362178133, 0.5627517147203047, 0.5564890895860527, 0.663455831531359, 0.6389630164769899, 0.45184387869281617, 0.46979572852044205, 0.35134263009886013, 0.6673119308738658, 0.458499499519878, 0.08525845571849244, 0.12391089266788624, 0.09411854757521365, 0.12868945594640113, 0.11368377565467003, 0.10705247217778813, 0.09261030737413256, 0.13087284688594913, 0.1326452174479753, 0.23088709322788536, 0.16989770710598318, 0.12312420891427811, 0.12822447219131572, 0.1802334900960566, 0.14806168989500712, 0.1569157484001984, 0.24408025919294862, 0.15520568234828003, 0.5330929440893282, 0.49936291832230884, 0.45622181497876757, 0.42116695704002505, 0.5109036175430512, 0.4754638433729286, 0.5818132572006731, 0.5767318767547363, 0.44426176201275147, 0.2724354688055911, 0.3791209376744158, 0.2012044873521711, 0.37192832275434473, 0.2968045256423817, 0.38855184585695524, 0.4551016690551245, 0.4712998783657677, 0.43742397048201, 0.18825579781038104, 0.20967124642519708, 0.23527860112277954, 0.2143131857202517, 0.2022855192762706, 0.20160130009584332, 0.19784130301856973, 0.21378714099082918, 0.1994899807526318, 0.2022555782060198, 0.20091341043467448, 0.2000925058328401, 0.2587342108678332, 0.18989770193112288, 0.20336332601024865, 0.20628522946212047, 0.23271448159721764, 0.4887468880346345, 0.1839452335391406, 0.15182052229177911, 0.15335176452223676, 0.8670182001517817, 0.1907709020549252, 0.8197831652623018, 0.8141727093773697, 0.18687084014457578, 0.7986935858320279, 0.24826682007314982, 0.20836721922854462, 0.15512924751012636, 0.46473981009237164, 0.1665268464601688, 0.4034817815062639, 0.15775661896237125, 0.15534974878163688, 0.1545084943709074, 0.1905867467957667, 0.19185290027383284, 0.19344387065751556, 0.19848347547322198, 0.18116784279916565, 0.18859267701884563, 0.20086192984096274, 0.19568368612369635, 0.19957827787341753, 0.08364055500341805, 0.0874751948290835, 0.09173139314273981, 0.08529666065504038, 0.07450359214641267, 0.07876625233702417, 0.09317713835932862, 0.08612417926624238, 0.08471856137771161]}, "mutation_prompt": null}
