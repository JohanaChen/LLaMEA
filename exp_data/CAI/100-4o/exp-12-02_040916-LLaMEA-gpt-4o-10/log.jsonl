{"id": "0b79e7da-f4a7-4c9b-8573-3e0370414a7d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.num_particles, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.num_particles, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def evaluate(self, func):\n        scores = np.array([func(p) for p in self.particles])\n        self.evaluations += self.num_particles\n        for i in range(self.num_particles):\n            if scores[i] < self.personal_best_scores[i]:\n                self.personal_best_scores[i] = scores[i]\n                self.personal_best_positions[i] = self.particles[i]\n            if scores[i] < self.global_best_score:\n                self.global_best_score = scores[i]\n                self.global_best_position = self.particles[i]\n    \n    def update_particles(self):\n        for i in range(self.num_particles):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = (self.w * self.velocities[i] \n                                  + self.c1 * r1 * (self.personal_best_positions[i] - self.particles[i]) \n                                  + self.c2 * r2 * (self.global_best_position - self.particles[i]))\n            self.particles[i] += self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lower_bound, self.upper_bound)\n\n    def differential_evolution(self, i):\n        indices = [idx for idx in range(self.num_particles) if idx != i]\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        mutant_vector = self.particles[a] + self.F * (self.particles[b] - self.particles[c])\n        trial_vector = np.copy(self.particles[i])\n        for j in range(self.dim):\n            if np.random.rand() < self.CR:\n                trial_vector[j] = mutant_vector[j]\n        return np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.evaluate(func)\n            if self.evaluations >= self.budget:\n                break\n            self.update_particles()\n            for i in range(self.num_particles):\n                if self.evaluations >= self.budget:\n                    break\n                trial_vector = self.differential_evolution(i)\n                trial_score = func(trial_vector)\n                self.evaluations += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n                    if trial_score < self.global_best_score:\n                        self.global_best_score = trial_score\n                        self.global_best_position = trial_vector\n        return self.global_best_position, self.global_best_score", "name": "HybridPSODE", "description": "A hybridized Particle Swarm Optimization (PSO) with Differential Evolution (DE) incorporating adaptive velocity and mutation strategies for improved exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.18512015040906668, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.387113017517671, 0.3911547710405844, 0.3166335648835764, 0.3834306740285165, 0.36546801764674264, 0.4461925986051618, 0.4585948069957213, 0.3216434375833188, 0.34412640854467114, 0.03149826057744809, 0.001957622864271258, 0.03196475862960069, 0.011154096882625919, 0.024720721700851045, 0.0019295625448255693, 9.999999999998899e-05, 0.031027561153020744, 0.03309573757355555, 0.09847550835660857, 0.0843101703841812, 0.059949015422557594, 0.09118304915369058, 0.06126871111785481, 0.08251970494477223, 0.11241199837030869, 0.09079470343544704, 0.09548479611096294, 0.11249059488068436, 0.08625388601536088, 0.06499222667693261, 0.10324912308922995, 0.07332609460463013, 0.08257660319186721, 0.11359751112035754, 0.10906108205754694, 0.06516281109869015, 0.9851980200063066, 0.9680078897980512, 0.9921020555023751, 0.09965984343372547, 0.9766660273730796, 0.9749407423280756, 0.9862975754142106, 0.9685954629824819, 0.9776153596269344, 0.2003580341300012, 0.1523616678513774, 0.1996025252321728, 0.15418764556354414, 0.17177375755151025, 0.20557969757973926, 0.08124486257529207, 0.14469546156135693, 0.16273207004647106, 0.16963414085311357, 0.16978758752171375, 0.28444118519317885, 0.21521077018114199, 0.5154932975080402, 0.1845154794791305, 0.17659661882819833, 0.17161710307693157, 0.21095140575826676, 0.10992034310400267, 0.08245698319926664, 0.06710263331326116, 0.07962613556667042, 0.10644332940038914, 0.10111814326406199, 0.10723932016040183, 0.12587274996018605, 0.06031104021826217, 0.1039992616494475, 0.0816224346695833, 0.1141412029472536, 0.1153759129943226, 0.0950711079271872, 0.12176532348013758, 0.11783129904341916, 0.09923267583009932, 0.06454968259648264, 9.999999999998899e-05, 0.0005498097120136825, 0.03115438124722003, 0.000367427352209182, 9.999999999998899e-05, 0.00013529036299009256, 0.01901259577420955, 0.003164518019556417, 0.01503420470879413, 0.09081510525057634, 0.02521475610205892, 0.06178946476292313, 0.0523257611925938, 0.025122830424722853, 0.10437289414977224, 0.0588877551134277, 0.10769711314308406, 0.08012413155059095, 9.999999999998899e-05, 0.008986604897382344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013428424378536308, 9.999999999998899e-05, 0.0015682970172270494, 0.03063712317327061, 0.07223432614098224, 0.06342990559459272, 0.023833482961860164, 0.04330789069021246, 0.05805411324151866, 0.04197065475966788, 0.05860751177549772, 0.0724189445087583, 0.29596520589249975, 0.3606788208973255, 0.36170586540621463, 0.41589298042847755, 0.3209149743704004, 0.33347805507245, 0.3879040024517635, 0.392891103656428, 0.349098969384551, 0.10077366252389042, 0.08241184446740535, 0.0825388849806653, 0.07638809699428928, 0.0947603086289569, 0.08183774847419845, 0.07299239327113305, 0.10867445047523983, 0.08538525692832377, 0.14976917731334138, 0.1845167489765619, 0.17150335443769094, 0.14086002346495552, 0.2181065005316951, 0.20704720403920396, 0.24649537018561418, 0.176495957941885, 0.1993604540764895, 0.2383189922108211, 0.26827713900741057, 0.2311474416386312, 0.2356622869772491, 0.23585670588953045, 0.2734846611583627, 0.23763234510252096, 0.23991029707916756, 0.2444525392987671, 0.200913837529193, 0.20764558108121056, 0.18755903690166265, 0.203180784221193, 0.1943242837219452, 0.1999272725548632, 0.18293184853572397, 0.21543215118218118, 0.18084089534447334, 0.23209613729321676, 0.153901301200438, 0.1992093734060979, 0.18813499471367967, 0.18466815511800516, 0.20297796354653042, 0.16927916801988063, 0.23965281795663396, 0.22445868924781287, 0.17870652675648258, 0.18260790980803077, 0.18462466718430315, 0.17959370181823708, 0.18270858484873775, 0.19035895145812987, 0.1771537898849449, 0.17384925491480774, 0.18645106799678712, 0.5247019998140349, 0.16429669856368478, 0.18220441936721588, 0.4167380625447591, 0.19049414485093463, 0.18469236567998115, 0.13978629274406795, 0.15515937336719654, 0.5599079936720266, 0.5386356827702978, 0.2045914454043758, 0.1599376254078385, 0.47149339143483227, 0.17724860519226038, 0.13235525109918345, 0.1967112410527977, 0.20439290853951753, 0.2686158656969423, 0.22597007285426884, 0.18476667279791947, 0.17660761316551743, 0.18506066442588365, 0.19022578950494295, 0.1982838614269945, 0.19205449503707595, 0.18776990899727386, 0.19279161919265386, 0.0769211948673919, 0.08096288825712905, 0.07026213233671574, 0.07897326586603559, 0.07610727345050672, 0.07560584464403997, 0.07551313275777427, 0.07324804744486668, 0.07898168115920146]}, "mutation_prompt": null}
{"id": "9aa0525c-6063-45ee-946d-7d072ebdd397", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.num_particles, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.num_particles, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def evaluate(self, func):\n        scores = np.array([func(p) for p in self.particles])\n        self.evaluations += self.num_particles\n        for i in range(self.num_particles):\n            if scores[i] < self.personal_best_scores[i]:\n                self.personal_best_scores[i] = scores[i]\n                self.personal_best_positions[i] = self.particles[i]\n            if scores[i] < self.global_best_score:\n                self.global_best_score = scores[i]\n                self.global_best_position = self.particles[i]\n    \n    def update_particles(self):\n        for i in range(self.num_particles):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = (self.w * self.velocities[i] \n                                  + self.c1 * r1 * (self.personal_best_positions[i] - self.particles[i]) \n                                  + self.c2 * r2 * (self.global_best_position - self.particles[i]))\n            self.particles[i] += self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], self.lower_bound, self.upper_bound)\n        if self.evaluations > self.budget // 2:  # Dynamic resizing\n            self.num_particles = max(20, self.num_particles - 5)\n\n    def differential_evolution(self, i):\n        indices = [idx for idx in range(self.num_particles) if idx != i]\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        self.F = 0.5 + 0.3 * np.random.rand()  # Adaptive mutation scaling\n        mutant_vector = self.particles[a] + self.F * (self.particles[b] - self.particles[c])\n        trial_vector = np.copy(self.particles[i])\n        for j in range(self.dim):\n            if np.random.rand() < self.CR:\n                trial_vector[j] = mutant_vector[j]\n        return np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.evaluate(func)\n            if self.evaluations >= self.budget:\n                break\n            self.update_particles()\n            for i in range(self.num_particles):\n                if self.evaluations >= self.budget:\n                    break\n                trial_vector = self.differential_evolution(i)\n                trial_score = func(trial_vector)\n                self.evaluations += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n                    if trial_score < self.global_best_score:\n                        self.global_best_score = trial_score\n                        self.global_best_position = trial_vector\n        return self.global_best_position, self.global_best_score", "name": "HybridPSODE", "description": "An enhanced HybridPSODE with dynamic population resizing and adaptive mutation scaling for better convergence and exploration.", "configspace": "", "generation": 1, "fitness": 0.17952724921060362, "feedback": "", "error": "", "parent_id": "0b79e7da-f4a7-4c9b-8573-3e0370414a7d", "metadata": {"aucs": [0.3288674326326676, 0.3698522872315808, 0.32418594671305834, 0.42976350001035113, 0.35091451662607864, 0.40499790707841743, 0.41156865794416986, 0.3595176705360199, 0.4131257084055604, 0.0032873802441565347, 0.009789396241331683, 0.00012378626231657197, 0.009542959967298481, 0.016571867033372656, 0.022171233077938446, 0.012478267864563852, 0.016256606676029906, 9.999999999998899e-05, 0.09554083089239829, 0.10538144026304086, 0.06856910973589092, 0.10899333510265985, 0.08122980729843787, 0.07957935222457924, 0.0878953031190498, 0.10714270217587951, 0.1064742601350166, 0.07639529524180166, 0.0832513576621231, 0.07376818596190227, 0.08459627675569337, 0.057381408330179906, 0.08330886872316301, 0.0771337426146349, 0.06945466761583208, 0.06820180812675114, 0.9854766102479307, 0.9593886393768958, 0.9922271664001932, 0.9766227614679199, 0.9792120462601407, 0.9772965750004453, 0.9851616509758856, 0.9845227925097201, 0.9807784142798344, 0.19453113409385592, 0.14160975315278845, 0.05880107882016905, 0.1408293192675426, 0.13741820672045302, 0.13914599112555281, 0.11849994122140783, 0.08805908314243294, 0.20171791388357774, 0.3008204096707765, 0.31773309632352675, 0.20204770231831337, 0.2278143446431251, 0.18463676704291643, 0.1815668261565605, 0.2978138704457549, 0.12427366982206711, 0.2328346581010966, 0.08113811618327382, 0.04184329146701893, 0.02332044002616951, 0.05843386634166714, 0.11714108221588826, 0.10674871095115068, 0.11458338679576396, 0.11217597640160837, 0.11072168792001269, 0.09234628583832327, 0.17762923751875914, 0.09466683662637443, 0.1058864517676571, 0.15439510055327077, 0.10126144708798746, 0.10517397890327407, 0.07283691584638674, 0.08250778393381386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006784377894678562, 0.10246295811867423, 0.06993030401697364, 0.0726404626003232, 0.07856257284344614, 0.011541364129876275, 9.999999999998899e-05, 0.0455904264714736, 0.07972117126522826, 0.020440206203930722, 0.0029710680368792985, 9.999999999998899e-05, 0.016004552310695863, 0.004373442991214338, 9.999999999998899e-05, 0.0037071771125116726, 9.999999999998899e-05, 0.0007983717307441518, 9.999999999998899e-05, 0.015041558635208063, 0.06730810489490646, 0.07970179776941733, 0.0523557311657199, 0.00646523995737458, 0.07120930367671374, 0.041945177824242785, 0.04204665136466845, 0.06579612469447926, 0.3161918948392859, 0.3374327927738, 0.306795580906003, 0.3179665781988802, 0.34322658919992965, 0.20647382303837325, 0.3485127038909609, 0.33672345725154074, 0.32253987121042926, 0.07902993688774984, 0.0867980695846583, 0.06999439669883833, 0.06600181173119013, 0.11333791246415514, 0.08017525837654049, 0.08296924750730827, 0.09446568945840317, 0.07490521058952948, 0.16124356394210282, 0.16780341169777124, 0.2057199969311091, 0.16799103051417008, 0.23945185682973436, 0.20128022366793197, 0.28344930248879574, 0.18223789285915792, 0.206441885822638, 0.21390186715966797, 0.255442628555108, 0.26049871790198154, 0.23466216273018803, 0.22076094207065122, 0.28208496907136804, 0.2589857175378859, 0.2516437454133552, 0.2411576455713833, 0.19337297741589687, 0.15277095215214853, 0.1567583346011261, 0.17558966982138102, 0.14259371290513123, 0.175990740766662, 0.2101082287943693, 0.18771911935086116, 0.18887103567933838, 0.17993834949915544, 0.16940798633228382, 0.1945022303421139, 0.2159582321281387, 0.1806093905751902, 0.19457209468162096, 0.2005853097225695, 0.1854822893914515, 0.18522604651062158, 0.1940418256829941, 0.18188229765063657, 0.1963176686492344, 0.17423402365088914, 0.1850761818785278, 0.17690914116077805, 0.19076401405490917, 0.15922769130664693, 0.1707400812101203, 0.16323913143223345, 0.1463149318551079, 0.18195865904961417, 0.49560226425602105, 0.18828288978459629, 0.17692711302569353, 0.13884294435511002, 0.15457221747126404, 0.40237958223247583, 0.38076371286294275, 0.2009320315945048, 0.1619031720697569, 0.20077915067588048, 0.2142420335297338, 0.16061405924040661, 0.18445111994376173, 0.2054385584626135, 0.3712402258523584, 0.20338437821770428, 0.19181195494147474, 0.1709867966604779, 0.1736798162804033, 0.17987450513841963, 0.1817829554717152, 0.18452287847501014, 0.17786907089326687, 0.18360064873152027, 0.06837733825003978, 0.06789277833307206, 0.07166545470588481, 0.0781165941065397, 0.07545125627042948, 0.06627488829004846, 0.07283009363155923, 0.08257770727945413, 0.0674988038545149]}, "mutation_prompt": null}
