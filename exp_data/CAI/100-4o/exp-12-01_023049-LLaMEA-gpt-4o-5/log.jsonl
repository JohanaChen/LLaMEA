{"id": "e05b11d5-ce21-4216-a4a4-c30002858e0b", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.mutation_factor = 0.5\n        self.crossover_rate = 0.9\n        self.pa = 0.25  # Probability for Cuckoo Search\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # Differential Evolution Step\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(self.population_size, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Cuckoo Search Step\n            for i in range(self.population_size):\n                if np.random.rand() < self.pa:\n                    levy_flight = np.random.standard_normal(self.dim) * 0.01\n                    cuckoo = population[i] + levy_flight * (population[i] - self.best_solution)\n                    cuckoo = np.clip(cuckoo, self.lower_bound, self.upper_bound)\n\n                    cuckoo_fitness = func(cuckoo)\n                    evaluations += 1\n\n                    if cuckoo_fitness < fitness[i]:\n                        population[i] = cuckoo\n                        fitness[i] = cuckoo_fitness\n\n                        if cuckoo_fitness < self.best_fitness:\n                            self.best_solution = cuckoo\n                            self.best_fitness = cuckoo_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        return self.best_solution", "name": "HybridSwarmOptimizer", "description": "A hybrid swarm-based algorithm combining Differential Evolution and Cuckoo Search to explore and exploit diverse regions of the search space efficiently.", "configspace": "", "generation": 0, "fitness": 0.39844001217149655, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8203265171525719, 0.8203265171525719, 0.8203265171525719, 0.8392170652379182, 0.8392170652379182, 0.8392170652379182, 0.8101444083167431, 0.8101444083167431, 0.8101444083167431, 0.7153879573881534, 0.7153879573881534, 0.7153879573881534, 0.6544543733885049, 0.6544543733885049, 0.6544543733885049, 0.6711171049184083, 0.6711171049184083, 0.6711171049184083, 0.13876740878406912, 0.13876740878406912, 0.13876740878406912, 0.14296613571235306, 0.14296613571235306, 0.14296613571235306, 0.1334067021720433, 0.1334067021720433, 0.1334067021720433, 0.12584626243337826, 0.12584626243337826, 0.12584626243337826, 0.10231258020380007, 0.10231258020380007, 0.10231258020380007, 0.10925841061785724, 0.10925841061785724, 0.10925841061785724, 0.8581838198092461, 0.8581838198092461, 0.8581838198092461, 0.9242844527296225, 0.9242844527296225, 0.9242844527296225, 0.8087085852619761, 0.8087085852619761, 0.8087085852619761, 0.5080860305102016, 0.5080860305102016, 0.5080860305102016, 0.5102080565455902, 0.5102080565455902, 0.5102080565455902, 0.38592191026612277, 0.38592191026612277, 0.38592191026612277, 0.7755351302531499, 0.7755351302531499, 0.7755351302531499, 0.7732714924077546, 0.7732714924077546, 0.7732714924077546, 0.825036463566092, 0.825036463566092, 0.825036463566092, 0.24853240114871367, 0.24853240114871367, 0.24853240114871367, 0.24929873330708519, 0.24929873330708519, 0.24929873330708519, 0.260280260998063, 0.260280260998063, 0.260280260998063, 0.12408118451328665, 0.12408118451328665, 0.12408118451328665, 0.20264223976600126, 0.20264223976600126, 0.20264223976600126, 0.18566456009057453, 0.18566456009057453, 0.18566456009057453, 0.5082015681079833, 0.5082015681079833, 0.5082015681079833, 0.4831746354894745, 0.4831746354894745, 0.4831746354894745, 0.505852150897125, 0.505852150897125, 0.505852150897125, 0.6096850697335561, 0.6096850697335561, 0.6096850697335561, 0.584551702939347, 0.584551702939347, 0.584551702939347, 0.6448306400839814, 0.6448306400839814, 0.6448306400839814, 0.11806044174088459, 0.11806044174088459, 0.11806044174088459, 0.3596250195589318, 0.3596250195589318, 0.3596250195589318, 0.19535217383894166, 0.19535217383894166, 0.19535217383894166, 0.3651350083139506, 0.3651350083139506, 0.3651350083139506, 0.37668006428854495, 0.37668006428854495, 0.37668006428854495, 0.35942815818923424, 0.35942815818923424, 0.35942815818923424, 0.7419933666712486, 0.7419933666712486, 0.7419933666712486, 0.7389605100477452, 0.7389605100477452, 0.7389605100477452, 0.7702502394968622, 0.7702502394968622, 0.7702502394968622, 0.09495528538428166, 0.09495528538428166, 0.09495528538428166, 0.10710004921634353, 0.10710004921634353, 0.10710004921634353, 0.10034728771020296, 0.10034728771020296, 0.10034728771020296, 0.18226086561350408, 0.18226086561350408, 0.18226086561350408, 0.19049098199995196, 0.19049098199995196, 0.19049098199995196, 0.18529212621655766, 0.18529212621655766, 0.18529212621655766, 0.41099918451214357, 0.41099918451214357, 0.41099918451214357, 0.411755787254224, 0.411755787254224, 0.411755787254224, 0.45417077187127575, 0.45417077187127575, 0.45417077187127575, 0.35498098406479317, 0.35498098406479317, 0.35498098406479317, 0.31945121491607775, 0.31945121491607775, 0.31945121491607775, 0.3564040590333577, 0.3564040590333577, 0.3564040590333577, 0.21889815906178434, 0.21889815906178434, 0.21889815906178434, 0.20769468242475553, 0.20769468242475553, 0.20769468242475553, 0.20072981968220938, 0.20072981968220938, 0.20072981968220938, 0.19255039193168, 0.19255039193168, 0.19255039193168, 0.1984428171020014, 0.1984428171020014, 0.1984428171020014, 0.19214794624362264, 0.19214794624362264, 0.19214794624362264, 0.1724729570822766, 0.1724729570822766, 0.1724729570822766, 0.8300031118903899, 0.8300031118903899, 0.8300031118903899, 0.6479922658248121, 0.6479922658248121, 0.6479922658248121, 0.7686362731098685, 0.7686362731098685, 0.7686362731098685, 0.16143292204120951, 0.16143292204120951, 0.16143292204120951, 0.5808935267916371, 0.5808935267916371, 0.5808935267916371, 0.19831153775543053, 0.19831153775543053, 0.19831153775543053, 0.21185263055762593, 0.21185263055762593, 0.21185263055762593, 0.19778461845330197, 0.19778461845330197, 0.19778461845330197, 0.0920456292895846, 0.0920456292895846, 0.0920456292895846, 0.0864346474918033, 0.0864346474918033, 0.0864346474918033, 0.09642734492395233, 0.09642734492395233, 0.09642734492395233]}, "mutation_prompt": null}
{"id": "d24987b4-0e01-426b-abe6-85684875b4cc", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.mutation_factor = 0.5\n        self.crossover_rate = 0.9\n        self.pa = 0.25  # Probability for Cuckoo Search\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # Differential Evolution Step\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(self.population_size, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Cuckoo Search Step\n            for i in range(self.population_size):\n                if np.random.rand() < self.pa:\n                    levy_flight = np.random.standard_normal(self.dim) * 0.01\n                    cuckoo = population[i] + levy_flight * (population[i] - self.best_solution)\n                    cuckoo = np.clip(cuckoo, self.lower_bound, self.upper_bound)\n\n                    cuckoo_fitness = func(cuckoo)\n                    evaluations += 1\n\n                    if cuckoo_fitness < fitness[i]:\n                        population[i] = cuckoo\n                        fitness[i] = cuckoo_fitness\n\n                        if cuckoo_fitness < self.best_fitness:\n                            self.best_solution = cuckoo\n                            self.best_fitness = cuckoo_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        return self.best_solution", "name": "HybridSwarmOptimizer", "description": "A hybrid swarm-based algorithm combining Differential Evolution and Cuckoo Search to explore and exploit diverse regions of the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e05b11d5-ce21-4216-a4a4-c30002858e0b", "metadata": {"aucs": [0.8203265171525719, 0.8203265171525719, 0.8203265171525719, 0.8392170652379182, 0.8392170652379182, 0.8392170652379182, 0.8101444083167431, 0.8101444083167431, 0.8101444083167431, 0.7153879573881534, 0.7153879573881534, 0.7153879573881534, 0.6544543733885049, 0.6544543733885049, 0.6544543733885049, 0.6711171049184083, 0.6711171049184083, 0.6711171049184083, 0.13876740878406912, 0.13876740878406912, 0.13876740878406912, 0.14296613571235306, 0.14296613571235306, 0.14296613571235306, 0.1334067021720433, 0.1334067021720433, 0.1334067021720433, 0.12584626243337826, 0.12584626243337826, 0.12584626243337826, 0.10231258020380007, 0.10231258020380007, 0.10231258020380007, 0.10925841061785724, 0.10925841061785724, 0.10925841061785724, 0.8581838198092461, 0.8581838198092461, 0.8581838198092461, 0.9242844527296225, 0.9242844527296225, 0.9242844527296225, 0.8087085852619761, 0.8087085852619761, 0.8087085852619761, 0.5080860305102016, 0.5080860305102016, 0.5080860305102016, 0.5102080565455902, 0.5102080565455902, 0.5102080565455902, 0.38592191026612277, 0.38592191026612277, 0.38592191026612277, 0.7755351302531499, 0.7755351302531499, 0.7755351302531499, 0.7732714924077546, 0.7732714924077546, 0.7732714924077546, 0.825036463566092, 0.825036463566092, 0.825036463566092, 0.24853240114871367, 0.24853240114871367, 0.24853240114871367, 0.24929873330708519, 0.24929873330708519, 0.24929873330708519, 0.260280260998063, 0.260280260998063, 0.260280260998063, 0.12408118451328665, 0.12408118451328665, 0.12408118451328665, 0.20264223976600126, 0.20264223976600126, 0.20264223976600126, 0.18566456009057453, 0.18566456009057453, 0.18566456009057453, 0.5082015681079833, 0.5082015681079833, 0.5082015681079833, 0.4831746354894745, 0.4831746354894745, 0.4831746354894745, 0.505852150897125, 0.505852150897125, 0.505852150897125, 0.6096850697335561, 0.6096850697335561, 0.6096850697335561, 0.584551702939347, 0.584551702939347, 0.584551702939347, 0.6448306400839814, 0.6448306400839814, 0.6448306400839814, 0.11806044174088459, 0.11806044174088459, 0.11806044174088459, 0.3596250195589318, 0.3596250195589318, 0.3596250195589318, 0.19535217383894166, 0.19535217383894166, 0.19535217383894166, 0.3651350083139506, 0.3651350083139506, 0.3651350083139506, 0.37668006428854495, 0.37668006428854495, 0.37668006428854495, 0.35942815818923424, 0.35942815818923424, 0.35942815818923424, 0.7419933666712486, 0.7419933666712486, 0.7419933666712486, 0.7389605100477452, 0.7389605100477452, 0.7389605100477452, 0.7702502394968622, 0.7702502394968622, 0.7702502394968622, 0.09495528538428166, 0.09495528538428166, 0.09495528538428166, 0.10710004921634353, 0.10710004921634353, 0.10710004921634353, 0.10034728771020296, 0.10034728771020296, 0.10034728771020296, 0.18226086561350408, 0.18226086561350408, 0.18226086561350408, 0.19049098199995196, 0.19049098199995196, 0.19049098199995196, 0.18529212621655766, 0.18529212621655766, 0.18529212621655766, 0.41099918451214357, 0.41099918451214357, 0.41099918451214357, 0.411755787254224, 0.411755787254224, 0.411755787254224, 0.45417077187127575, 0.45417077187127575, 0.45417077187127575, 0.35498098406479317, 0.35498098406479317, 0.35498098406479317, 0.31945121491607775, 0.31945121491607775, 0.31945121491607775, 0.3564040590333577, 0.3564040590333577, 0.3564040590333577, 0.21889815906178434, 0.21889815906178434, 0.21889815906178434, 0.20769468242475553, 0.20769468242475553, 0.20769468242475553, 0.20072981968220938, 0.20072981968220938, 0.20072981968220938, 0.19255039193168, 0.19255039193168, 0.19255039193168, 0.1984428171020014, 0.1984428171020014, 0.1984428171020014, 0.19214794624362264, 0.19214794624362264, 0.19214794624362264, 0.1724729570822766, 0.1724729570822766, 0.1724729570822766, 0.8300031118903899, 0.8300031118903899, 0.8300031118903899, 0.6479922658248121, 0.6479922658248121, 0.6479922658248121, 0.7686362731098685, 0.7686362731098685, 0.7686362731098685, 0.16143292204120951, 0.16143292204120951, 0.16143292204120951, 0.5808935267916371, 0.5808935267916371, 0.5808935267916371, 0.19831153775543053, 0.19831153775543053, 0.19831153775543053, 0.21185263055762593, 0.21185263055762593, 0.21185263055762593, 0.19778461845330197, 0.19778461845330197, 0.19778461845330197, 0.0920456292895846, 0.0920456292895846, 0.0920456292895846, 0.0864346474918033, 0.0864346474918033, 0.0864346474918033, 0.09642734492395233, 0.09642734492395233, 0.09642734492395233]}, "mutation_prompt": null}
