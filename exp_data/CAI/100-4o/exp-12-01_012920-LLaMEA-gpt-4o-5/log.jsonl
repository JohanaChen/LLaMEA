{"id": "05ac3973-e5c5-4995-9a1d-cf8e9f2b9779", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.inertia_weight = 0.7\n        self.cognitive_const = 1.5\n        self.social_const = 1.5\n        self.de_scale_factor = 0.8\n        self.de_crossover_rate = 0.9\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            if evaluations < self.budget:\n                r1 = np.random.rand(self.pop_size, self.dim)\n                r2 = np.random.rand(self.pop_size, self.dim)\n                self.velocities = (\n                    self.inertia_weight * self.velocities\n                    + self.cognitive_const * r1 * (self.personal_best_positions - self.particles)\n                    + self.social_const * r2 * (self.global_best_position - self.particles)\n                )\n                self.particles += self.velocities\n                self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x0, x1, x2 = self.particles[indices]\n                mutant_vector = np.clip(x0 + self.de_scale_factor * (x1 - x2), self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.de_crossover_rate, mutant_vector, self.particles[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < self.personal_best_values[i]:\n                    self.particles[i] = trial_vector\n                    self.personal_best_values[i] = trial_fitness\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_fitness < self.global_best_value:\n                    self.global_best_value = trial_fitness\n                    self.global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_value", "name": "HybridPSO_DE", "description": "A hybrid cooperative particle swarm optimization (PSO) with differential evolution (DE) for adaptive exploration and exploitation in diverse landscapes.", "configspace": "", "generation": 0, "fitness": 0.27191134973227354, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8729889209025044, 0.8769143479702202, 0.8671787519980815, 0.8850848754611835, 0.1903475583064025, 0.8881252621312026, 0.8744086468808159, 0.896571701159503, 0.8778069358706838, 0.07300415355629464, 0.041534741088983695, 0.7567024695135779, 0.7105665465029407, 0.0483407499069175, 9.999999999998899e-05, 0.05787158403611703, 0.7883191005374579, 0.05916750118974723, 0.17933112651677985, 0.10849459436332587, 0.09482069307922725, 0.15880939158031493, 0.1290241271579825, 0.14866671410767318, 0.13709055568332262, 0.16383537855341113, 0.053737043255678296, 0.12215221936429876, 0.11412239725955753, 0.1123789024742089, 0.14315465883720968, 0.11483673090690627, 0.09833639801921168, 0.11323858721701241, 0.14035320427711773, 0.099223752071536, 0.9912227375738693, 0.988537538882611, 0.9917469393605303, 0.9884246054760162, 0.9905650974840685, 0.9906509621524919, 0.9857480964053574, 0.9884674311306721, 0.9904511724487364, 0.1154526730731732, 0.0601218202372491, 0.4517865211937234, 0.7414498100859767, 0.691277745195166, 0.1528721735484483, 0.08418893559381235, 0.08368286616126808, 0.08840941879249353, 0.3634421867836559, 0.2271747634465563, 0.17127480274184947, 0.8673517264137232, 0.19235870633092256, 0.2102206337825322, 0.08144682768952716, 0.11913702177867946, 0.2101483292137798, 0.16833526303813728, 0.23687126102357947, 0.2604408582875124, 0.10558653145286134, 0.1319982701796767, 0.24001333127926672, 0.26388872316929124, 0.26108266367071575, 0.2650752758989392, 0.2611954191027164, 0.022079265451696695, 0.2569556642837244, 0.3208522799860207, 0.2679046797038236, 0.2955387461640553, 0.28509207939418035, 0.1369821613132095, 0.2664372456085128, 9.999999999998899e-05, 0.0006842439596114192, 9.999999999998899e-05, 0.0017640577383104539, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17003084569292737, 0.11135203792025772, 0.09089727914151136, 0.13482121770764166, 0.008933373564638192, 0.04829641303542809, 0.05707405034813906, 0.044819905953186745, 0.05611476859414366, 0.05028439667066942, 0.036554166771204155, 0.27503712082572385, 0.07858445161579852, 9.999999999998899e-05, 9.999999999998899e-05, 0.28600682406893996, 0.10279107907056528, 0.07185132661770643, 0.12899621182614884, 0.04396008647961425, 0.04277915867901849, 0.038813261118742726, 0.045155531892226874, 0.10824491243328282, 0.08319569092042456, 9.999999999998899e-05, 0.09352301576980226, 0.6196010678873183, 0.5921960621929635, 0.5973319227355347, 0.5500792545685231, 0.5845347161954806, 0.6426349496115761, 0.5631109098770931, 0.5686801343908289, 0.5863203285046121, 0.1137980021056817, 0.07920661793152717, 0.06063466987034316, 0.09231707517301402, 0.14892078895584704, 0.10198190598083567, 0.07742587652446908, 0.09971721257560495, 0.11152824609701384, 0.1559020658696516, 0.23148460832976991, 0.27128924534019705, 0.16587776148897448, 0.20724035724172996, 0.21105213946893453, 0.19045711385154362, 0.3625561561113979, 0.22612295490302092, 0.5897185116165745, 0.2889706887559459, 0.41894481289979435, 0.2889067618297888, 0.39230475123008, 0.4429725114071401, 0.2105383692413304, 0.5949683899798679, 0.17405594160638305, 0.17250918771939616, 0.17754168219390776, 0.2317110993075847, 0.38185343221645984, 0.2352635779208918, 0.3297754086104232, 0.17529116929340183, 0.14996664419642125, 0.27638417870833387, 0.18232703698140218, 0.24541488777457088, 0.2108328746588074, 0.19553626298185078, 0.2477285471488907, 0.3432109073234926, 0.1996534878544709, 0.2057059265652318, 0.22514590986302963, 0.20466509234321983, 0.21627508608603396, 0.24212129951761108, 0.24747417904370983, 0.1989742638247206, 0.24982420376253867, 0.22172021967610767, 0.24940618949367077, 0.18264682595666737, 0.8814495702959523, 0.9114277700384044, 0.12466527889445911, 0.9052124577028461, 0.2008374671103098, 0.2013173958828649, 0.15874615212632193, 0.11456522571206829, 0.15439677784008798, 0.07927970786476923, 0.10899509828368614, 0.8002298575611901, 0.2107067877779616, 0.16958647481865485, 0.21252122580568944, 0.12797816376337978, 0.1669443876141813, 0.7230681310951467, 0.1819410146401802, 0.2024721452843914, 0.19801972423585168, 0.21921530468088535, 0.20434858185849247, 0.19355496335720157, 0.18416776383862754, 0.20235465523567553, 0.2014917255535592, 0.09098458858157332, 0.09291349695458306, 0.08981886358185165, 0.09756338511051632, 0.08369003425747978, 0.0827201150654231, 0.07717712279171085, 0.0949654283156911, 0.09903522312830226]}, "mutation_prompt": null}
{"id": "95cd7a0d-b8a5-47cf-b390-508ebeb3d4b7", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + int(2 * np.sqrt(dim))\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.inertia_weight = 0.9  # Initial inertia weight\n        self.cognitive_const = 1.5\n        self.social_const = 1.5\n        self.de_scale_factor = 0.8\n        self.de_crossover_rate = 0.9\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                fitness = func(self.particles[i])\n                evaluations += 1\n\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            if evaluations < self.budget:\n                # Adaptively update inertia weight\n                self.inertia_weight = 0.4 + 0.5 * (1 - evaluations / self.budget)\n                r1 = np.random.rand(self.pop_size, self.dim)\n                r2 = np.random.rand(self.pop_size, self.dim)\n                self.velocities = (\n                    self.inertia_weight * self.velocities\n                    + self.cognitive_const * r1 * (self.personal_best_positions - self.particles)\n                    + self.social_const * r2 * (self.global_best_position - self.particles)\n                )\n                self.particles += self.velocities\n                self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x0, x1, x2 = self.particles[indices]\n                mutant_vector = np.clip(x0 + self.de_scale_factor * (x1 - x2), self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.de_crossover_rate, mutant_vector, self.particles[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < self.personal_best_values[i]:\n                    self.particles[i] = trial_vector\n                    self.personal_best_values[i] = trial_fitness\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_fitness < self.global_best_value:\n                    self.global_best_value = trial_fitness\n                    self.global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_value", "name": "HybridPSO_DE", "description": "Introduce adaptive inertia weight in PSO to dynamically balance exploration and exploitation during optimization.", "configspace": "", "generation": 1, "fitness": 0.2141808015398198, "feedback": "", "error": "", "parent_id": "05ac3973-e5c5-4995-9a1d-cf8e9f2b9779", "metadata": {"aucs": [0.7686179642217467, 0.1263096726539783, 0.7655765524982469, 0.1571995692626531, 0.1898761466617218, 0.1897416005536109, 0.7585150510692671, 0.7833336776863215, 0.760779987863559, 0.03778839605302187, 9.999999999998899e-05, 0.0639792961550214, 0.05532421251559205, 9.999999999998899e-05, 9.999999999998899e-05, 0.5785868237116351, 9.999999999998899e-05, 0.005467338495610652, 0.13694599175727218, 0.1373217141612455, 0.13192124866749055, 0.07115341515836093, 0.06462313199215808, 0.123680125240198, 0.10193546608430337, 0.03113152023270993, 0.1677576975676791, 0.12028138083271822, 0.14193863704556642, 0.12687769062184884, 0.1311992007629348, 0.09247153533400465, 0.1528198753664608, 0.12918933712626202, 0.12681193425490334, 0.09460310034289976, 0.9912046750876573, 0.9886807337582032, 0.9939873918456755, 0.9882950430794075, 0.9887253769320288, 0.9875668875564959, 0.9698127946921631, 0.990633740532118, 0.990688416483791, 0.5824052198421733, 0.05963975007298794, 0.058957379324519055, 0.14412827900725367, 0.1470685088157334, 0.14935567244041958, 0.08733751727514372, 0.0883598654965394, 0.08480926596045224, 0.22130629690932713, 0.2097261629082382, 0.33473072102302615, 0.33909205453206637, 0.1930717911570775, 0.18754140281271925, 0.06823032470694346, 0.11638566604088751, 0.23139273103750235, 0.08723431630398804, 0.19131272576783387, 0.18537913310201126, 0.1002724608073482, 0.12285249013949073, 0.12562791849871624, 9.999999999998899e-05, 0.20223852598069514, 0.20196308357582815, 0.22456654228632578, 0.015831213502230823, 0.21327808960992, 0.12823717987101213, 0.2120849611483352, 0.1200276061276474, 0.16916040507716446, 0.03211285357788074, 0.22531207383395868, 0.00175357782660579, 9.999999999998899e-05, 0.02871637138676686, 9.999999999998899e-05, 0.03451549966877121, 9.999999999998899e-05, 0.0002879646815568959, 9.999999999998899e-05, 0.018663928634413574, 0.0696103612129817, 0.0408055755620409, 0.03879080437116866, 0.1351415867803487, 9.999999999998899e-05, 0.00957974483820112, 0.08335853693976747, 0.03345004093486792, 0.023888381814951565, 9.999999999998899e-05, 9.999999999998899e-05, 0.03988997124961313, 9.999999999998899e-05, 0.060896434964403334, 0.06187169646530588, 0.07791690464864509, 0.14827458161541618, 0.06657546819528848, 0.03967672711119663, 0.03912432739702276, 0.03858671273549985, 9.999999999998899e-05, 0.005746366861677621, 0.035448450095156625, 0.08329002767806326, 0.05400699555092292, 0.07724610912979257, 0.4792707071562128, 0.4898438541580342, 0.50329958454214, 0.4980178680428251, 0.13775573937227859, 0.48476863963062367, 0.5235028228491554, 0.1370008159668441, 0.5285041056912512, 0.06762214072753703, 0.112343366917523, 0.05080750988240501, 0.10184634292979611, 0.13579814360938458, 0.10323806200090857, 0.12762421052887696, 0.11376865069712716, 0.14057151997462025, 0.19520187020972402, 0.20158404931719598, 0.19904834356740675, 0.18086532935394606, 0.3523557189796126, 0.20229742171454912, 0.17545380184477266, 0.1360771088433288, 0.1878697991154369, 0.3773944936973185, 0.2967148650733188, 0.3470022080281929, 0.41293953458769794, 0.35550652587824005, 0.301886963827534, 0.4686266195809071, 0.20603226579799316, 0.26699817770598533, 0.15369536736714284, 0.23087537263506097, 0.14182724717520323, 0.18452023950872176, 0.19544436476917004, 0.1055066447249634, 0.13939550304455406, 0.11882797510873422, 0.39823509365690446, 0.2024582822499279, 0.2066781617112794, 0.22466754948169632, 0.21063046211862024, 0.21833963739677031, 0.19396216071987493, 0.20538726527943008, 0.1946626683953706, 0.1847245256893072, 0.18036426363954527, 0.225788806912675, 0.22194135885135347, 0.1978246438646839, 0.22787810397365715, 0.20758671200061785, 0.18292866835730737, 0.22714125485287917, 0.20718365000667793, 0.8622037194328136, 0.139310167692416, 0.12451435320966153, 0.7625305880426606, 0.19773041730657426, 0.20026707868109117, 0.1569505145561918, 0.16290310857214352, 0.1918316757899532, 0.07896767014735051, 0.20568814735097407, 0.1686311763244296, 0.6302007087841808, 0.21001735258493248, 0.2054936857619769, 0.18609490957215358, 0.1644371425096799, 0.6870284767056072, 0.1959931416605849, 0.18822181098266044, 0.19715305453986254, 0.18790642585081674, 0.20493296471244826, 0.19296494951737186, 0.18703563631965148, 0.18882211166202, 0.20417815106684678, 0.08767541521348654, 0.08829065787238399, 0.08337105371698494, 0.08447043763646356, 0.06935569718333023, 0.08987217100703382, 0.0900261644381628, 0.08823677370540195, 0.08893276835556463]}, "mutation_prompt": null}
