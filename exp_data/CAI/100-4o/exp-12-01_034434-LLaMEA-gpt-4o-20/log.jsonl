{"id": "33d11172-4bcd-4e63-a883-2653e0b01781", "solution": "import numpy as np\n\nclass AMSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_swarms = 3  # Number of swarms\n        self.swarm_size = 10  # Number of particles in each swarm\n        self.num_particles = self.num_swarms * self.swarm_size\n        self.c1 = 2.0  # Cognitive coefficient\n        self.c2 = 2.0  # Social coefficient\n        self.w = 0.5   # Inertia weight\n        self.positions = np.random.uniform(self.lb, self.ub, (self.num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n        self.current_evaluations = 0\n\n    def __call__(self, func):\n        while self.current_evaluations < self.budget:\n            for i in range(self.num_particles):\n                score = func(self.positions[i])\n                self.current_evaluations += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.positions[i]\n\n            self.adaptive_control()\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.c1 * r1 * (self.personal_best_positions[i] - self.positions[i])\n                social_component = self.c2 * r2 * (self.global_best_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_component + social_component\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score\n\n    def adaptive_control(self):\n        # Dynamically adjust inertia weight and learning factors based on performance\n        if self.current_evaluations % (self.budget // 10) == 0:\n            progress = self.global_best_score / np.min(self.personal_best_scores)\n            self.w = 0.9 - progress * 0.4\n            self.c1 = 2.5 - progress * 0.5\n            self.c2 = 1.5 + progress * 0.5", "name": "AMSO", "description": "Adaptive Multi-Swarm Optimization (AMSO) combines multiple swarm intelligence techniques with adaptive control to explore and exploit the search space efficiently.", "configspace": "", "generation": 0, "fitness": 0.2898926868864369, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8162362803550134, 0.8284241244601016, 0.8649502820616045, 0.8393902305505505, 0.1606931288120781, 0.8242826617508544, 0.8144274973902624, 0.8184027431547398, 0.8925539631277106, 0.47958455637205566, 0.0679483251184525, 9.999999999998899e-05, 0.5038991807342311, 0.6084901427251259, 0.22023370373010964, 0.5918575091236242, 0.4065287626831966, 0.5155264792886662, 0.10331350106917947, 0.11388322171235432, 0.14375503020058045, 0.11575849344056877, 0.14505543135628618, 0.11221123768064789, 0.07093854207828498, 0.10631577287036853, 0.13771327626001528, 0.11602198057229307, 0.08458604927190627, 0.09066424414326868, 0.14747993596491282, 0.12808460161442703, 0.04263212753512147, 0.11664778234299067, 0.08797265596705961, 0.08415104344909541, 0.9917310871397241, 0.9944599490017351, 0.9934971670394683, 0.09973563430816645, 0.9914641718683175, 0.9833934035059804, 0.9904968348264853, 0.9875285867603937, 0.9935578421837531, 0.35254947845426965, 0.05818689831988266, 0.22530101524121926, 0.19781738448805963, 0.19718256354269825, 0.31510674305094566, 0.12485935021343064, 0.0882790734304022, 0.29142348165424037, 0.16721639852521475, 0.3901003450278634, 0.8419178576698942, 0.28267112317448906, 0.11741578342880277, 0.1928388618295881, 0.13148243488342526, 0.34930051102693604, 0.1475648603405445, 0.24450007028744947, 0.23175755860861436, 0.12310294490188822, 0.200221450953601, 0.28521674848419687, 0.12556343161526007, 0.49769128560187614, 0.5052562913665264, 0.6905256481128736, 0.38521583864625486, 0.5883552341754296, 0.13077478463532388, 0.1307039322860255, 0.4785217039259426, 0.33794073543734526, 0.1261881345958642, 0.11579266756500095, 0.23390012280777506, 9.999999999998899e-05, 0.08561977467050697, 0.006833139596645554, 9.999999999998899e-05, 0.1940416788944197, 9.999999999998899e-05, 0.04208231008982799, 0.0042630667138091605, 0.5201592371711868, 0.4370772298928536, 0.059212425339336905, 0.4305441234219738, 0.3452652028523202, 0.08478543133180716, 0.06698999612808643, 0.6102527101003898, 0.05999981077875527, 0.05199725163536473, 0.1146717388404157, 9.999999999998899e-05, 0.08013705558076056, 0.17684590518552956, 0.16663061331259055, 0.4523238763752957, 0.2394954014818692, 0.07265399216965507, 0.07260584154392635, 0.46687585327282655, 0.19673368001100922, 0.29476857252147615, 0.006216120922276747, 0.06783558111205401, 0.1996422583372821, 0.09639265139675224, 0.1476624370265739, 0.08403767524463024, 0.7542345211800604, 0.6294104531428915, 0.5548558883166277, 0.7331562840231729, 0.6539464702898273, 0.6929833157999757, 0.6136153335154686, 0.7935266851051496, 0.6349962241439623, 0.09918042178396258, 0.07938068272017917, 0.05547421297464172, 0.12524243403388768, 0.10021735148882194, 0.08849140160320312, 0.06351163185827025, 0.05699456253645108, 0.0951041669249505, 0.2768949962466162, 0.21581827732412817, 0.20821290302013884, 0.32326807516305267, 0.316624094965159, 0.19892636945352893, 0.25649593318911523, 0.2137794878037551, 0.17161668278004238, 0.22963792500829672, 0.2803486494257834, 0.25699782424106166, 0.27001759647289814, 0.2779281527223676, 0.3331920088031809, 0.4760039080012771, 0.3932561579251095, 0.2787681837448729, 0.21599208570597783, 0.21039100115748655, 0.19323948571352056, 0.27189720608977785, 0.19983557313639289, 0.24855969074852435, 0.18392310670907197, 0.3209226156286561, 0.14451845183378886, 0.266261179048351, 0.17147620878271153, 0.19816505480047486, 0.23713307264044314, 0.22797102979787132, 0.21884145219819906, 0.25363519662966205, 0.27396676674940745, 0.21470704588175837, 0.19942292117461946, 0.224527507814671, 0.2280846594659668, 0.1940650576170605, 0.20015330532274878, 0.1871010233562932, 0.20646216534264028, 0.24729398911466183, 0.18990031510781946, 0.8566493729840137, 0.18653130264995643, 0.1246974740961796, 0.17282459965045216, 0.20114633146448246, 0.2009740088682247, 0.09944372799904577, 0.1697299311714472, 0.8557338168384782, 0.8533579833776388, 0.1774901179252094, 0.11134858488430022, 0.8401563947684791, 0.16890809714772148, 0.21267779644167506, 0.19953146444027225, 0.1995899645010174, 0.5841847289388852, 0.1850528182352673, 0.1883583817530855, 0.21370117781623799, 0.1628590180742474, 0.2667072151797871, 0.21739749524740637, 0.18981062778563018, 0.1942844383686132, 0.2140772410916808, 0.08398420946965268, 0.08385975444524507, 0.07159172866478825, 0.09970671768346895, 0.0877014170518674, 0.10477150396520463, 0.06257293430525168, 0.09344787598387061, 0.08732911203801175]}, "mutation_prompt": null}
{"id": "2031ab22-531e-490f-be4d-25067720d664", "solution": "import numpy as np\n\nclass AMSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_swarms = 3  # Number of swarms\n        self.swarm_size = 10  # Number of particles in each swarm\n        self.num_particles = self.num_swarms * self.swarm_size\n        self.c1 = 2.0  # Cognitive coefficient\n        self.c2 = 2.0  # Social coefficient\n        self.w = 0.5   # Inertia weight\n        self.positions = np.random.uniform(self.lb, self.ub, (self.num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n        self.current_evaluations = 0\n\n    def __call__(self, func):\n        while self.current_evaluations < self.budget:\n            for i in range(self.num_particles):\n                score = func(self.positions[i])\n                self.current_evaluations += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.positions[i]\n\n            self.adaptive_control()\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.c1 * r1 * (self.personal_best_positions[i] - self.positions[i])\n                social_component = self.c2 * r2 * (self.global_best_position - self.positions[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_component + social_component\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score\n\n    def adaptive_control(self):\n        # Dynamically adjust inertia weight and learning factors based on performance\n        if self.current_evaluations % (self.budget // 10) == 0:\n            progress = self.global_best_score / np.min(self.personal_best_scores)\n            self.w = 0.9 - progress * 0.4\n            self.c1 = 2.5 - progress * 0.5\n            self.c2 = 1.5 + progress * 0.5", "name": "AMSO", "description": "Adaptive Multi-Swarm Optimization (AMSO) combines multiple swarm intelligence techniques with adaptive control to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "33d11172-4bcd-4e63-a883-2653e0b01781", "metadata": {"aucs": [0.8162362803550134, 0.8284241244601016, 0.8649502820616045, 0.8393902305505505, 0.1606931288120781, 0.8242826617508544, 0.8144274973902624, 0.8184027431547398, 0.8925539631277106, 0.47958455637205566, 0.0679483251184525, 9.999999999998899e-05, 0.5038991807342311, 0.6084901427251259, 0.22023370373010964, 0.5918575091236242, 0.4065287626831966, 0.5155264792886662, 0.10331350106917947, 0.11388322171235432, 0.14375503020058045, 0.11575849344056877, 0.14505543135628618, 0.11221123768064789, 0.07093854207828498, 0.10631577287036853, 0.13771327626001528, 0.11602198057229307, 0.08458604927190627, 0.09066424414326868, 0.14747993596491282, 0.12808460161442703, 0.04263212753512147, 0.11664778234299067, 0.08797265596705961, 0.08415104344909541, 0.9917310871397241, 0.9944599490017351, 0.9934971670394683, 0.09973563430816645, 0.9914641718683175, 0.9833934035059804, 0.9904968348264853, 0.9875285867603937, 0.9935578421837531, 0.35254947845426965, 0.05818689831988266, 0.22530101524121926, 0.19781738448805963, 0.19718256354269825, 0.31510674305094566, 0.12485935021343064, 0.0882790734304022, 0.29142348165424037, 0.16721639852521475, 0.3901003450278634, 0.8419178576698942, 0.28267112317448906, 0.11741578342880277, 0.1928388618295881, 0.13148243488342526, 0.34930051102693604, 0.1475648603405445, 0.24450007028744947, 0.23175755860861436, 0.12310294490188822, 0.200221450953601, 0.28521674848419687, 0.12556343161526007, 0.49769128560187614, 0.5052562913665264, 0.6905256481128736, 0.38521583864625486, 0.5883552341754296, 0.13077478463532388, 0.1307039322860255, 0.4785217039259426, 0.33794073543734526, 0.1261881345958642, 0.11579266756500095, 0.23390012280777506, 9.999999999998899e-05, 0.08561977467050697, 0.006833139596645554, 9.999999999998899e-05, 0.1940416788944197, 9.999999999998899e-05, 0.04208231008982799, 0.0042630667138091605, 0.5201592371711868, 0.4370772298928536, 0.059212425339336905, 0.4305441234219738, 0.3452652028523202, 0.08478543133180716, 0.06698999612808643, 0.6102527101003898, 0.05999981077875527, 0.05199725163536473, 0.1146717388404157, 9.999999999998899e-05, 0.08013705558076056, 0.17684590518552956, 0.16663061331259055, 0.4523238763752957, 0.2394954014818692, 0.07265399216965507, 0.07260584154392635, 0.46687585327282655, 0.19673368001100922, 0.29476857252147615, 0.006216120922276747, 0.06783558111205401, 0.1996422583372821, 0.09639265139675224, 0.1476624370265739, 0.08403767524463024, 0.7542345211800604, 0.6294104531428915, 0.5548558883166277, 0.7331562840231729, 0.6539464702898273, 0.6929833157999757, 0.6136153335154686, 0.7935266851051496, 0.6349962241439623, 0.09918042178396258, 0.07938068272017917, 0.05547421297464172, 0.12524243403388768, 0.10021735148882194, 0.08849140160320312, 0.06351163185827025, 0.05699456253645108, 0.0951041669249505, 0.2768949962466162, 0.21581827732412817, 0.20821290302013884, 0.32326807516305267, 0.316624094965159, 0.19892636945352893, 0.25649593318911523, 0.2137794878037551, 0.17161668278004238, 0.22963792500829672, 0.2803486494257834, 0.25699782424106166, 0.27001759647289814, 0.2779281527223676, 0.3331920088031809, 0.4760039080012771, 0.3932561579251095, 0.2787681837448729, 0.21599208570597783, 0.21039100115748655, 0.19323948571352056, 0.27189720608977785, 0.19983557313639289, 0.24855969074852435, 0.18392310670907197, 0.3209226156286561, 0.14451845183378886, 0.266261179048351, 0.17147620878271153, 0.19816505480047486, 0.23713307264044314, 0.22797102979787132, 0.21884145219819906, 0.25363519662966205, 0.27396676674940745, 0.21470704588175837, 0.19942292117461946, 0.224527507814671, 0.2280846594659668, 0.1940650576170605, 0.20015330532274878, 0.1871010233562932, 0.20646216534264028, 0.24729398911466183, 0.18990031510781946, 0.8566493729840137, 0.18653130264995643, 0.1246974740961796, 0.17282459965045216, 0.20114633146448246, 0.2009740088682247, 0.09944372799904577, 0.1697299311714472, 0.8557338168384782, 0.8533579833776388, 0.1774901179252094, 0.11134858488430022, 0.8401563947684791, 0.16890809714772148, 0.21267779644167506, 0.19953146444027225, 0.1995899645010174, 0.5841847289388852, 0.1850528182352673, 0.1883583817530855, 0.21370117781623799, 0.1628590180742474, 0.2667072151797871, 0.21739749524740637, 0.18981062778563018, 0.1942844383686132, 0.2140772410916808, 0.08398420946965268, 0.08385975444524507, 0.07159172866478825, 0.09970671768346895, 0.0877014170518674, 0.10477150396520463, 0.06257293430525168, 0.09344787598387061, 0.08732911203801175]}, "mutation_prompt": null}
