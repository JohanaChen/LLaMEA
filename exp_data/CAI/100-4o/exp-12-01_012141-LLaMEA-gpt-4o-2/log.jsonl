{"id": "5640d3b3-d2f7-41ee-a3ea-7d5f5cadff9b", "solution": "import numpy as np\n\nclass HybridDE_NM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def differential_evolution_step(self, func):\n        for i in range(self.population_size):\n            if self.evaluations >= self.budget:\n                break\n            indices = list(range(self.population_size))\n            indices.remove(i)\n            a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.CR\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            score = func(trial)\n            self.evaluations += 1\n            if score < self.scores[i]:\n                self.scores[i] = score\n                self.population[i] = trial\n\n    def nelder_mead_step(self, func):\n        if self.evaluations >= self.budget:\n            return\n        indices = np.argsort(self.scores)\n        best, worst = self.population[indices[0]], self.population[indices[-1]]\n        centroid = np.mean(self.population[indices[:-1]], axis=0)\n        reflection = np.clip(centroid + (centroid - worst), self.lower_bound, self.upper_bound)\n        reflection_score = func(reflection)\n        self.evaluations += 1\n        if reflection_score < self.scores[indices[-2]]:\n            if reflection_score < self.scores[indices[0]]:\n                expansion = np.clip(centroid + 2 * (reflection - centroid), self.lower_bound, self.upper_bound)\n                expansion_score = func(expansion)\n                self.evaluations += 1\n                if expansion_score < reflection_score:\n                    self.population[indices[-1]] = expansion\n                    self.scores[indices[-1]] = expansion_score\n                else:\n                    self.population[indices[-1]] = reflection\n                    self.scores[indices[-1]] = reflection_score\n            else:\n                self.population[indices[-1]] = reflection\n                self.scores[indices[-1]] = reflection_score\n        else:\n            contraction = np.clip(centroid + 0.5 * (worst - centroid), self.lower_bound, self.upper_bound)\n            contraction_score = func(contraction)\n            self.evaluations += 1\n            if contraction_score < self.scores[indices[-1]]:\n                self.population[indices[-1]] = contraction\n                self.scores[indices[-1]] = contraction_score\n            else:\n                for j in range(1, self.population_size):\n                    self.population[indices[j]] = best + 0.5 * (self.population[indices[j]] - best)\n                    self.scores[indices[j]] = func(self.population[indices[j]])\n                    self.evaluations += 1\n                    if self.evaluations >= self.budget:\n                        break\n\n    def __call__(self, func):\n        self.scores = np.array([func(ind) for ind in self.population])\n        self.evaluations = self.population_size\n        while self.evaluations < self.budget:\n            self.differential_evolution_step(func)\n            self.nelder_mead_step(func)\n        best_index = np.argmin(self.scores)\n        return self.population[best_index], self.scores[best_index]", "name": "HybridDE_NM", "description": "A hybrid metaheuristic combining Differential Evolution and Adaptive Nelder-Mead for efficient exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.3300297188470093, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6578779442275482, 0.6352829952559078, 0.6392469607939129, 0.6511239220831473, 0.6846285923038445, 0.6749896564471864, 0.6637571107579258, 0.6750697230633699, 0.6579982634400032, 0.4188515936181162, 0.41454863540008435, 0.3881295537925833, 0.4341923739378378, 0.4114852306233032, 0.4057988807007581, 0.4328453084317624, 0.42383306279965105, 0.43673364756473054, 0.169393830788656, 0.13666518402806505, 0.14492261467620393, 0.12701718285313912, 0.14679317306940398, 0.14721747718446299, 0.16263519206166488, 0.11075307441561999, 0.10521739103589567, 0.10889943185691864, 0.12692386832071245, 0.11656772664581405, 0.1310071357643725, 0.09764728343478057, 0.10499401503757722, 0.12456703710577643, 0.12444653204247702, 0.0758923509794589, 0.9282376822422264, 0.9903330152469096, 0.9437063760519753, 0.9383547713574568, 0.9779351486492454, 0.960879500336563, 0.9590987489557664, 0.9617878592842306, 0.9584393931854281, 0.32697474593408205, 0.3037792614920024, 0.3055800905423133, 0.3136807961295829, 0.29098495967096216, 0.31974851580791985, 0.31568415236605984, 0.32768546393009323, 0.33449764806413296, 0.6681283347226656, 0.745831533509036, 0.6774738441598069, 0.7501107170942972, 0.7331229332621721, 0.7520433701663062, 0.7214259676047173, 0.7580370279484651, 0.6844536348608843, 0.25091643409185815, 0.28375479801589065, 0.24180827093786206, 0.40816575350393913, 0.25846448377714515, 0.22700587941477735, 0.2517260434444981, 0.2450838437656604, 0.27741464933229176, 0.3580292907351521, 0.24844687699874501, 0.24401498840328317, 0.23340908111178904, 0.25075505780710106, 0.3390287473695065, 0.2887283171675097, 0.25581621783794484, 0.2940587649169294, 0.17707600778062238, 0.17579360859472293, 0.16402573246856222, 0.1939023063370081, 0.18232002076953968, 0.17923239655572887, 0.17411118870647024, 0.17693510387750955, 0.15495165331864047, 0.34492720409448885, 0.31161595954519106, 0.33906912835804515, 0.30699397546583584, 0.30369196951720856, 0.27964018200595053, 0.33739743369026376, 0.32114972869610114, 0.33980882274045454, 0.07971630837668331, 0.07002077577504151, 0.07108475740576081, 0.10218902377500239, 0.13236774501185067, 0.12467474948495239, 0.09899216933159283, 0.11925991675363401, 0.12931279322694245, 0.1679129870689725, 0.173032463524473, 0.17494379209539979, 0.1810832229220769, 0.1714838186008426, 0.17347191862722244, 0.18685352633452934, 0.18914974245920457, 0.18815742679762937, 0.500135249677242, 0.5354859480714484, 0.5151761543634172, 0.5076006416984127, 0.5122623816939926, 0.5391273154720293, 0.521515082710241, 0.47314939846454585, 0.5381239028842688, 0.15268580130607046, 0.15958101567891425, 0.13270805483293058, 0.11641852790095142, 0.11717761442634, 0.13861314200848573, 0.0907279574097909, 0.3753607232231039, 0.3786613050788996, 0.185620219002551, 0.17053714298715417, 0.1482787571064137, 0.40643886767709125, 0.4041248522540568, 0.21286591775436647, 0.30634007882198666, 0.4212279255070769, 0.3301110527172393, 0.36353312580073394, 0.3926074441897981, 0.4069362314962207, 0.40990221110854685, 0.37412335621335824, 0.44758758406319343, 0.43924753812215644, 0.4298833799722064, 0.4325348444920225, 0.3254948110726965, 0.30335852524996976, 0.3136482360507544, 0.32881587294735626, 0.32162675182771394, 0.32157356497701983, 0.35950140863198, 0.34373958890066414, 0.3383387343663925, 0.22889652050329046, 0.20560567298687482, 0.24357253918483668, 0.23786088493153557, 0.19959968358850033, 0.23909284259772323, 0.22811825895697369, 0.20176160685999234, 0.2408946212677704, 0.20601314659342018, 0.1767448337660027, 0.20992428780624106, 0.19840376441842944, 0.20146742310525056, 0.20875451490036567, 0.2284981884331223, 0.22392023283235707, 0.19722954225306577, 0.7493000669991514, 0.14558937837816432, 0.1796552375449263, 0.19932726711556392, 0.1864381593683644, 0.17118356466874907, 0.8276425210054343, 0.7664502094434593, 0.7839701054629895, 0.7486951425654438, 0.20564643912327263, 0.1637020088050546, 0.2043842331196266, 0.20359160144863386, 0.19895274102753024, 0.7413128759507552, 0.15107895712032204, 0.2080445044328899, 0.2031951930173792, 0.2558039621414906, 0.26691394489344733, 0.2719350636319302, 0.2848321292501238, 0.2379691970242237, 0.259682433829146, 0.2580246495390135, 0.2829558362232174, 0.10459985125161386, 0.08579496952534371, 0.09423475801915937, 0.10027315875002574, 0.0883683018689333, 0.10131418151162142, 0.08997602551666017, 0.08870986628561128, 0.08905742205316114]}, "mutation_prompt": null}
{"id": "3dac3c58-6839-4acb-8045-4818c49a774b", "solution": "import numpy as np\n\nclass HybridDE_NM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.9  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def differential_evolution_step(self, func):\n        for i in range(self.population_size):\n            if self.evaluations >= self.budget:\n                break\n            indices = list(range(self.population_size))\n            indices.remove(i)\n            a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.CR\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, self.population[i])\n            score = func(trial)\n            self.evaluations += 1\n            if score < self.scores[i]:\n                self.scores[i] = score\n                self.population[i] = trial\n\n    def nelder_mead_step(self, func):\n        if self.evaluations >= self.budget:\n            return\n        indices = np.argsort(self.scores)\n        best, worst = self.population[indices[0]], self.population[indices[-1]]\n        centroid = np.mean(self.population[indices[:-1]], axis=0)\n        reflection = np.clip(centroid + (centroid - worst), self.lower_bound, self.upper_bound)\n        reflection_score = func(reflection)\n        self.evaluations += 1\n        if reflection_score < self.scores[indices[-2]]:\n            if reflection_score < self.scores[indices[0]]:\n                expansion = np.clip(centroid + 2 * (reflection - centroid), self.lower_bound, self.upper_bound)\n                expansion_score = func(expansion)\n                self.evaluations += 1\n                if expansion_score < reflection_score:\n                    self.population[indices[-1]] = expansion\n                    self.scores[indices[-1]] = expansion_score\n                else:\n                    self.population[indices[-1]] = reflection\n                    self.scores[indices[-1]] = reflection_score\n            else:\n                self.population[indices[-1]] = reflection\n                self.scores[indices[-1]] = reflection_score\n        else:\n            contraction = np.clip(centroid + 0.5 * (worst - centroid), self.lower_bound, self.upper_bound)\n            contraction_score = func(contraction)\n            self.evaluations += 1\n            if contraction_score < self.scores[indices[-1]]:\n                self.population[indices[-1]] = contraction\n                self.scores[indices[-1]] = contraction_score\n            else:\n                for j in range(1, self.population_size):\n                    self.population[indices[j]] = best + 0.5 * (self.population[indices[j]] - best)\n                    self.scores[indices[j]] = func(self.population[indices[j]])\n                    self.evaluations += 1\n                    if self.evaluations >= self.budget:\n                        break\n\n    def __call__(self, func):\n        self.scores = np.array([func(ind) for ind in self.population])\n        self.evaluations = self.population_size\n        while self.evaluations < self.budget:\n            self.differential_evolution_step(func)\n            self.nelder_mead_step(func)\n        best_index = np.argmin(self.scores)\n        return self.population[best_index], self.scores[best_index]", "name": "HybridDE_NM", "description": "Enhance exploration by increasing differential weight for improved diversity.", "configspace": "", "generation": 1, "fitness": 0.3022656830565977, "feedback": "", "error": "", "parent_id": "5640d3b3-d2f7-41ee-a3ea-7d5f5cadff9b", "metadata": {"aucs": [0.5543045868132807, 0.5254626074992028, 0.5821602144557054, 0.6135472886501516, 0.5933979832306687, 0.6001805110085581, 0.6175396266824609, 0.6043796434140749, 0.5923294683603081, 0.3270514152407016, 0.3524413069498793, 0.3228304062859907, 0.30609423441683925, 0.29932651720110437, 0.33050613575724797, 0.2925577042527472, 0.3465514298356829, 0.33785113745366335, 0.1572102119126153, 0.11070365010015903, 0.14245069428885615, 0.2908441838458983, 0.139904779272624, 0.12794890603080367, 0.160194318310921, 0.12029584191102771, 0.15812623184210683, 0.10927601997254388, 0.12032638011452923, 0.1266139767189568, 0.10471710628070507, 0.11738456242373996, 0.10322680804906703, 0.11740654101827641, 0.09864644413695967, 0.09743516261582919, 0.940303707284591, 0.8856070945859016, 0.9191704525593466, 0.9363600320070584, 0.9524682880122936, 0.9610086293304136, 0.9516639942675423, 0.961743192322725, 0.9722320688741638, 0.2656309282148013, 0.25212822278851055, 0.24739025317387564, 0.26778970665774116, 0.2855310000669432, 0.2747526342210942, 0.29746304330773277, 0.2766093272838751, 0.2753268335934749, 0.6148406462682285, 0.6797800968811847, 0.6351125015701804, 0.7240784609710396, 0.6289114265839324, 0.6523057646109405, 0.7357412342863006, 0.6359417208248948, 0.7005330908364885, 0.17087896203467356, 0.15943445059014394, 0.19437878052387536, 0.2356984179328887, 0.26018670748252093, 0.25085019834426225, 0.23466960931683956, 0.2159183541022851, 0.19767833315826833, 0.10926923726354287, 0.2324201840860769, 0.30277166322263116, 0.19625235679340192, 0.1949222351224349, 0.1840641049124041, 0.24675115058141772, 0.18580197905129614, 0.21087496637524938, 0.1191865617205623, 0.09990626206298803, 0.1028979760391614, 0.12763644300892352, 0.12948553404068008, 0.11614288933339545, 0.09952450712768879, 0.12654504953187118, 0.1031199904014728, 0.2513746382902452, 0.25769173826445935, 0.20948237582316764, 0.24807415609454098, 0.24385884694797155, 0.19194647470286053, 0.227336300258563, 0.26402031535279047, 0.24238876660392894, 0.06674716486138643, 0.03212318855459073, 0.06088162446088241, 0.03841859274457837, 0.06785036016222479, 0.049684557935502194, 0.051401687568324306, 0.06648575796618517, 0.09069534123465806, 0.13918252555655508, 0.1405180557794502, 0.14394154339673315, 0.1417324301518723, 0.14209836818638322, 0.15968731709302897, 0.13936744051226868, 0.13643270217644898, 0.15969176369008964, 0.4569893157699302, 0.4671294049533934, 0.46586481910619737, 0.45774345213235945, 0.4508538130298796, 0.442742249160858, 0.4599649191923437, 0.4497655362660906, 0.4470569495932266, 0.33626223159412016, 0.1399544409926723, 0.10517940361491818, 0.08935745350638824, 0.11844587836778664, 0.10955167212589767, 0.13645718454010491, 0.2893037822767428, 0.13741233887232662, 0.28008451411427215, 0.20565070312766642, 0.20441522834573378, 0.4192119554667162, 0.3920045900532506, 0.3759226749351202, 0.24160374703205179, 0.373557848717047, 0.17461009890977297, 0.33357132501760633, 0.3704743836974048, 0.3608316031542641, 0.3936218571114849, 0.38490688923718486, 0.37858885906731043, 0.3562133347848019, 0.3448228593460312, 0.47039971301922856, 0.3007116306287959, 0.2911962322902264, 0.3309450049765956, 0.325530840443495, 0.30686801887288406, 0.29655605872514723, 0.29744002584602547, 0.33187798897468546, 0.3218392713724817, 0.20046392639527066, 0.21778861478614076, 0.20005894505179245, 0.21710731875315248, 0.22979771905150914, 0.22301348377207486, 0.20709891983845496, 0.22040058748824454, 0.20098021149131284, 0.21151713405242833, 0.20280676202431336, 0.20683285884928237, 0.19429950657924033, 0.36981627288533137, 0.21215177482185232, 0.21729353866541024, 0.21894630448526953, 0.22828591905667017, 0.18053736645707963, 0.14974650353599517, 0.6913062804620422, 0.2090911012913741, 0.706338977238091, 0.17439506000782534, 0.7706765616852168, 0.7534459012468667, 0.18159525146405375, 0.7291957255596015, 0.6800542025660585, 0.7242525350982131, 0.19914785220707854, 0.19737741122884878, 0.1516581153496429, 0.20781269902272392, 0.6287760127504143, 0.20924605553962328, 0.26962934616705947, 0.24123303798156281, 0.23208084915632476, 0.2351278064557245, 0.25805333222074334, 0.24720292463958382, 0.23652914746677145, 0.2459253557246065, 0.23310263174648338, 0.10161034575948125, 0.09113787933462969, 0.08341653714980601, 0.09619666344102917, 0.08596982284254484, 0.10583375985386578, 0.08735238850977223, 0.0898444683621128, 0.10030640402216762]}, "mutation_prompt": null}
