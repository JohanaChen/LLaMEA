{"id": "1852a630-1155-44c0-b213-8dbd057ba256", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n        self.mutation_factor = 0.5\n        self.crossover_prob = 0.7\n\n    def __call__(self, func):\n        # Evaluate initial population\n        self.evaluate_population(func)\n        \n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                if self.eval_count >= self.budget:\n                    break\n\n                # Select mutation strategy based on diversity\n                diversity = np.std(self.population)\n                if diversity < 1e-5:\n                    self.mutation_factor = 0.9\n                else:\n                    self.mutation_factor = 0.5\n\n                # Mutation\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = self.mutate(a, b, c)\n\n                # Crossover\n                trial = self.crossover(self.population[i], mutant)\n\n                # Selection\n                trial_fitness = func(trial)\n                self.eval_count += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.eval_count >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.eval_count += 1\n\n    def mutate(self, a, b, c):\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n        return mutant\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.crossover_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "A dynamically adaptive differential evolution algorithm that adjusts mutation strategies based on population diversity to optimize a wide range of functions.", "configspace": "", "generation": 0, "fitness": 0.30299381564090705, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8093559473083768, 0.7875341707195412, 0.8030072877733586, 0.8003515834904086, 0.807640355908372, 0.8156721376175642, 0.8289171211580014, 0.7970210905654469, 0.8032177647874019, 0.6507190191340214, 0.6485493564398426, 0.6503105441988852, 0.6563098421536256, 0.6464338453367373, 0.6190972522441262, 0.6481920377490755, 0.6449152856341474, 0.6652593578252286, 0.15059299768975398, 0.14401663171074885, 0.1636365115752325, 0.21746283860502247, 0.20551815881095714, 0.17267552681424292, 0.14495449939882943, 0.15310048885458982, 0.1961520745089148, 0.1773258705567501, 0.1225637956068496, 0.12789582566693547, 0.1698396041185326, 0.12547911524213218, 0.12857251560092497, 0.14389674944002095, 0.13461766235436667, 0.15912484562917129, 0.9257453743988555, 0.9528036319853995, 0.924005372666836, 0.9499248052966944, 0.9440955322042504, 0.925806982574842, 0.9592603210781062, 0.9451929175373566, 0.9244364549883919, 0.4152042074433623, 0.4104021224534474, 0.3835814156534444, 0.40936704506084054, 0.4381233875358038, 0.3890396487922376, 0.4061021653930815, 0.4064489498646662, 0.41315273931580376, 0.6089430181046929, 0.6153421744044346, 0.5626538846727531, 0.6163442966518781, 0.5772951113626739, 0.5907855289205719, 0.6489580779627693, 0.5998088312450447, 0.641952426985704, 0.18409210169485257, 0.17145325035439163, 0.20409454164800167, 0.1773586322105326, 0.18346861728186326, 0.15209178692888237, 0.2114266652129081, 0.2049138727940416, 0.17971707698781592, 0.20282084853844307, 0.17035503552012177, 0.16198221477421326, 0.15499297932859424, 0.1358687490283048, 0.1853640952587049, 0.18253800858267577, 0.19605255907112218, 0.22847876147705992, 0.0696918356410644, 0.0683610945769898, 0.06323312672930936, 0.09213849168680877, 0.07733761110455184, 0.0651299088611409, 0.05523588294058501, 0.06286992448753448, 0.040495396492669755, 0.1611225396986481, 0.1942936928983141, 0.21399237580744213, 0.1636661066179459, 0.16659323667194226, 0.13473523528865317, 0.22178331045713306, 0.24361438639046473, 0.20763241197455284, 0.018753285770903183, 0.013703976613857916, 0.04298982254829642, 0.05629000529887229, 0.03921840984490044, 0.03510629189362591, 0.056127498326000724, 0.06702841088434175, 0.04906371553700484, 0.14846124162599172, 0.17121673100692825, 0.15728765201103267, 0.18234218861679952, 0.17110014883979108, 0.18682590784267927, 0.14648909237571062, 0.16248980808510882, 0.16354285835159044, 0.5553234930722746, 0.5410588128869886, 0.5514995191104395, 0.5153699773278657, 0.5538453651118056, 0.5409248152916188, 0.5443730569954188, 0.5344037807348175, 0.5504364872401779, 0.10099421062080238, 0.08803495963983055, 0.09890147395864024, 0.1169181948025747, 0.08907812284785754, 0.09406302075893347, 0.10332949990877693, 0.10757419096038323, 0.0930265051132727, 0.1298807328860423, 0.1393300686248209, 0.15956523513788257, 0.1751997537003972, 0.14491055494667848, 0.15020603126554288, 0.149317699157975, 0.1475584444912842, 0.13625844016662192, 0.3557765455684224, 0.3238461643784434, 0.34655109620275726, 0.3512345601573543, 0.3239488925523699, 0.34817297972619976, 0.39231644249205033, 0.4031099121584265, 0.4004812414011192, 0.23657702683515047, 0.2594085434827058, 0.24053135349657573, 0.25585114509146756, 0.22420403049791682, 0.2456378947580229, 0.2622790980487699, 0.2775995057034435, 0.2721214728147161, 0.20532127223139007, 0.1824093405729721, 0.19373416889698947, 0.19981371984544116, 0.1976249629696193, 0.20524843661409664, 0.1968821214312435, 0.19707976457334342, 0.2025500329776413, 0.222421670649124, 0.20495329272227614, 0.19065856114761692, 0.1887953052542376, 0.19148954965270581, 0.1933748576041846, 0.20532266657969456, 0.1950447449190864, 0.20255006181466528, 0.24572691976445715, 0.5873662481191487, 0.4724417912080662, 0.519243642431391, 0.17954055762458954, 0.5599355011667664, 0.22978340771958883, 0.16391983738436633, 0.614037043992588, 0.1948890236981622, 0.19754505075673068, 0.2670619177395088, 0.17558670823770772, 0.18792235274093982, 0.26185788779836483, 0.20043078187282048, 0.5993723372477692, 0.2041907204843053, 0.17608013777191622, 0.20875313315834298, 0.18753706188131813, 0.18472059277350938, 0.18325453490255028, 0.17970968849211877, 0.18346694818233888, 0.20569269754088582, 0.18948241988151437, 0.08438958742068958, 0.07885059593832044, 0.08069738891183409, 0.07374178561935674, 0.08102990739927685, 0.08861058439005343, 0.0758343770245079, 0.08149512259804104, 0.07442145470631856]}, "mutation_prompt": null}
{"id": "53aece40-65fa-49db-83d2-f4a79996a14e", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n        self.mutation_factor = 0.5\n        self.crossover_prob = 0.7\n\n    def __call__(self, func):\n        # Evaluate initial population\n        self.evaluate_population(func)\n        \n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                if self.eval_count >= self.budget:\n                    break\n\n                # Select mutation strategy based on diversity\n                diversity = np.std(self.population)\n                if diversity < 1e-5:\n                    self.mutation_factor = 0.9\n                else:\n                    self.mutation_factor = 0.5\n\n                # Mutation\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = self.mutate(a, b, c)\n\n                # Crossover\n                trial = self.crossover(self.population[i], mutant)\n\n                # Selection\n                trial_fitness = func(trial)\n                self.eval_count += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.eval_count >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.eval_count += 1\n\n    def mutate(self, a, b, c):\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n        return mutant\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.crossover_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "A dynamically adaptive differential evolution algorithm that adjusts mutation strategies based on population diversity to optimize a wide range of functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1852a630-1155-44c0-b213-8dbd057ba256", "metadata": {"aucs": [0.8093559473083768, 0.7875341707195412, 0.8030072877733586, 0.8003515834904086, 0.807640355908372, 0.8156721376175642, 0.8289171211580014, 0.7970210905654469, 0.8032177647874019, 0.6507190191340214, 0.6485493564398426, 0.6503105441988852, 0.6563098421536256, 0.6464338453367373, 0.6190972522441262, 0.6481920377490755, 0.6449152856341474, 0.6652593578252286, 0.15059299768975398, 0.14401663171074885, 0.1636365115752325, 0.21746283860502247, 0.20551815881095714, 0.17267552681424292, 0.14495449939882943, 0.15310048885458982, 0.1961520745089148, 0.1773258705567501, 0.1225637956068496, 0.12789582566693547, 0.1698396041185326, 0.12547911524213218, 0.12857251560092497, 0.14389674944002095, 0.13461766235436667, 0.15912484562917129, 0.9257453743988555, 0.9528036319853995, 0.924005372666836, 0.9499248052966944, 0.9440955322042504, 0.925806982574842, 0.9592603210781062, 0.9451929175373566, 0.9244364549883919, 0.4152042074433623, 0.4104021224534474, 0.3835814156534444, 0.40936704506084054, 0.4381233875358038, 0.3890396487922376, 0.4061021653930815, 0.4064489498646662, 0.41315273931580376, 0.6089430181046929, 0.6153421744044346, 0.5626538846727531, 0.6163442966518781, 0.5772951113626739, 0.5907855289205719, 0.6489580779627693, 0.5998088312450447, 0.641952426985704, 0.18409210169485257, 0.17145325035439163, 0.20409454164800167, 0.1773586322105326, 0.18346861728186326, 0.15209178692888237, 0.2114266652129081, 0.2049138727940416, 0.17971707698781592, 0.20282084853844307, 0.17035503552012177, 0.16198221477421326, 0.15499297932859424, 0.1358687490283048, 0.1853640952587049, 0.18253800858267577, 0.19605255907112218, 0.22847876147705992, 0.0696918356410644, 0.0683610945769898, 0.06323312672930936, 0.09213849168680877, 0.07733761110455184, 0.0651299088611409, 0.05523588294058501, 0.06286992448753448, 0.040495396492669755, 0.1611225396986481, 0.1942936928983141, 0.21399237580744213, 0.1636661066179459, 0.16659323667194226, 0.13473523528865317, 0.22178331045713306, 0.24361438639046473, 0.20763241197455284, 0.018753285770903183, 0.013703976613857916, 0.04298982254829642, 0.05629000529887229, 0.03921840984490044, 0.03510629189362591, 0.056127498326000724, 0.06702841088434175, 0.04906371553700484, 0.14846124162599172, 0.17121673100692825, 0.15728765201103267, 0.18234218861679952, 0.17110014883979108, 0.18682590784267927, 0.14648909237571062, 0.16248980808510882, 0.16354285835159044, 0.5553234930722746, 0.5410588128869886, 0.5514995191104395, 0.5153699773278657, 0.5538453651118056, 0.5409248152916188, 0.5443730569954188, 0.5344037807348175, 0.5504364872401779, 0.10099421062080238, 0.08803495963983055, 0.09890147395864024, 0.1169181948025747, 0.08907812284785754, 0.09406302075893347, 0.10332949990877693, 0.10757419096038323, 0.0930265051132727, 0.1298807328860423, 0.1393300686248209, 0.15956523513788257, 0.1751997537003972, 0.14491055494667848, 0.15020603126554288, 0.149317699157975, 0.1475584444912842, 0.13625844016662192, 0.3557765455684224, 0.3238461643784434, 0.34655109620275726, 0.3512345601573543, 0.3239488925523699, 0.34817297972619976, 0.39231644249205033, 0.4031099121584265, 0.4004812414011192, 0.23657702683515047, 0.2594085434827058, 0.24053135349657573, 0.25585114509146756, 0.22420403049791682, 0.2456378947580229, 0.2622790980487699, 0.2775995057034435, 0.2721214728147161, 0.20532127223139007, 0.1824093405729721, 0.19373416889698947, 0.19981371984544116, 0.1976249629696193, 0.20524843661409664, 0.1968821214312435, 0.19707976457334342, 0.2025500329776413, 0.222421670649124, 0.20495329272227614, 0.19065856114761692, 0.1887953052542376, 0.19148954965270581, 0.1933748576041846, 0.20532266657969456, 0.1950447449190864, 0.20255006181466528, 0.24572691976445715, 0.5873662481191487, 0.4724417912080662, 0.519243642431391, 0.17954055762458954, 0.5599355011667664, 0.22978340771958883, 0.16391983738436633, 0.614037043992588, 0.1948890236981622, 0.19754505075673068, 0.2670619177395088, 0.17558670823770772, 0.18792235274093982, 0.26185788779836483, 0.20043078187282048, 0.5993723372477692, 0.2041907204843053, 0.17608013777191622, 0.20875313315834298, 0.18753706188131813, 0.18472059277350938, 0.18325453490255028, 0.17970968849211877, 0.18346694818233888, 0.20569269754088582, 0.18948241988151437, 0.08438958742068958, 0.07885059593832044, 0.08069738891183409, 0.07374178561935674, 0.08102990739927685, 0.08861058439005343, 0.0758343770245079, 0.08149512259804104, 0.07442145470631856]}, "mutation_prompt": null}
