{"id": "ce2b6e52-5f62-4dde-a14d-308a5713f249", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.pop)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n    \n    def __call__(self, func):\n        evals = 0\n        F = 0.5  # DE scaling factor\n        CR = 0.9 # DE crossover probability\n        inertia_weight = 0.7\n        cognitive_coefficient = 1.5\n        social_coefficient = 1.5\n\n        while evals < self.budget:\n            # Evaluate population\n            for i in range(self.population_size):\n                if evals < self.budget:\n                    score = func(self.pop[i])\n                    evals += 1\n                    if score < self.personal_best_scores[i]:\n                        self.personal_best_scores[i] = score\n                        self.personal_best_positions[i] = self.pop[i]\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.pop[i]\n\n            # PSO update\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = cognitive_coefficient * r1 * (self.personal_best_positions[i] - self.pop[i])\n                social_velocity = social_coefficient * r2 * (self.global_best_position - self.pop[i])\n                self.velocities[i] = (inertia_weight * self.velocities[i] \n                                      + cognitive_velocity + social_velocity)\n                self.pop[i] += self.velocities[i]\n                self.pop[i] = np.clip(self.pop[i], self.lower_bound, self.upper_bound)\n\n            # DE mutation and crossover\n            for i in range(self.population_size):\n                if evals >= self.budget:\n                    break\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.pop[indices]\n                mutant = x1 + F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.pop[i])\n                crossover_mask = np.random.rand(self.dim) < CR\n                trial[crossover_mask] = mutant[crossover_mask]\n                trial_score = func(trial)\n                evals += 1\n                if trial_score < func(self.pop[i]):\n                    self.pop[i] = trial\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSODE", "description": "A hybrid swarm-based optimization algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) for efficient exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.1810999604870226, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.43908733707248493, 0.44247756908216473, 0.3721567575763104, 0.4114863646856427, 0.4608063531005957, 0.3548215181832215, 0.5013978311358595, 0.39433430142231296, 0.38135634749772884, 0.07118325946190418, 0.061065129911782035, 0.09022341960200952, 0.08486516374814745, 0.1753883507382088, 0.0961010419964341, 0.02534481209941164, 0.14835366225843116, 0.03522298872266294, 0.11049321110729582, 0.0908108635271343, 0.060543397402103794, 0.07564118891035088, 0.056347662460352166, 0.06719679607920714, 0.0651486917597498, 0.10461337336917587, 0.101091177369381, 0.06660784935196007, 0.05449115561598683, 0.08226769356029195, 0.06748961148439425, 0.06733844130578359, 0.05882537014591782, 0.041061591960161015, 0.06922795303249074, 0.06571984838408318, 0.9788447819578237, 0.9866641452789784, 0.9810260876676249, 0.9723626310058533, 0.9784541995359942, 0.9679435727049758, 0.9728556460470823, 0.9728235094226847, 0.9792773781564088, 0.11959979799461706, 0.05359113729749465, 0.13159588773230313, 0.2464547604711892, 0.1382346477085844, 0.10947504043987033, 0.12892386580320858, 0.08328796668233829, 0.07722391250259952, 0.2310305118159779, 0.15491193651406088, 0.16310140072249546, 0.20340198589019065, 0.2667245490385488, 0.1805568533437597, 0.1705028696844465, 0.20887435294949996, 0.17296538948608053, 0.09795943376717386, 0.09133661084984179, 0.09392016100668321, 0.0708350089718569, 0.12401609772115885, 0.1233571829197706, 0.08027685859163591, 0.10876954262451544, 0.13412498526272643, 0.09765063444848654, 0.050284999023084476, 0.009164937571197851, 0.0780086341712447, 0.0987554199276166, 0.12428195044898971, 0.11766688826965332, 0.08342214411868176, 0.11120707689336107, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013184596845480234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04732678700152315, 0.06064760716527906, 0.058652549214701866, 0.038922403310098, 0.05358977837245438, 0.02434590910517509, 0.030886802155810855, 0.05349166033015351, 0.03519726723015315, 9.999999999998899e-05, 0.008239176506704804, 0.020039249401358594, 0.04765743450358584, 0.010945742159322758, 0.0012999019625385966, 0.027523159589111112, 0.001630579192787307, 0.0019670142641512456, 0.015891053947701628, 0.044265684122920534, 0.04069316909980081, 0.001208665229775585, 0.08845859468622297, 0.10235141887508692, 0.13930214404352415, 0.05971406474890095, 0.06116808870169388, 0.34593372607522077, 0.34808785128723774, 0.3446147002520916, 0.3684348203434099, 0.35154549003646995, 0.3386530694840758, 0.26853267604142084, 0.3507595963056095, 0.377657960012758, 0.06322887916810138, 0.06056311612070697, 0.04330063188826516, 0.07961324411250603, 0.07049948775640569, 0.08808298974264739, 0.07198858959117915, 0.07230907944967568, 0.07879916219055472, 0.15222750247442796, 0.13703585138641916, 0.18114459359660695, 0.13292756607919964, 0.1403811802381959, 0.19992301728418937, 0.15386849002535508, 0.15643348961612502, 0.2022376531243263, 0.14664174613982428, 0.1919457110192494, 0.2035343438670829, 0.24192854827933374, 0.2199075898953613, 0.23048119093800112, 0.2335197605819319, 0.2759632765775838, 0.2705391659527352, 0.20507827351980346, 0.14954695560978748, 0.19829688111358967, 0.1445205532792253, 0.1573180225274209, 0.19170290025636694, 0.19352704593828052, 0.16780484422768172, 0.191503912710296, 0.1621303401388644, 0.13654729145253164, 0.16489466171699074, 0.2037300819598259, 0.1501283397754154, 0.1782241880839427, 0.15677809219336958, 0.15956833269134207, 0.1746948018170671, 0.25490076304362463, 0.20721313158733534, 0.16795770401189458, 0.1998050157300123, 0.17633440681010892, 0.18535481754349348, 0.174711299181462, 0.1971331780285539, 0.17592256110197868, 0.4870213073701656, 0.1573310563042194, 0.1518219452290055, 0.5192772483594119, 0.1930607430295731, 0.19106608166944694, 0.09894569569490008, 0.16122145236295615, 0.642041014129106, 0.36828085812396516, 0.18444163097554223, 0.16413785306380346, 0.1936443461225139, 0.2079276562542045, 0.33616111942476923, 0.20675672921361765, 0.20218131921839788, 0.19696527399330122, 0.17564582411703267, 0.1765736705411216, 0.174240474911885, 0.18963083163323458, 0.20194736900438515, 0.17250260454384791, 0.18385685311143274, 0.18525391376174427, 0.19399562238811108, 0.05468859337053178, 0.05100560394701603, 0.0694347351500928, 0.057833437448025826, 0.06719131812357915, 0.05803718778274092, 0.06693206848265965, 0.05312766183781226, 0.050866387349593256]}, "mutation_prompt": null}
{"id": "76989d50-1596-49f3-8c44-9a3eba1e851d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.pop)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n    \n    def __call__(self, func):\n        evals = 0\n        F = 0.5  # DE scaling factor\n        CR = 0.9 # DE crossover probability\n        inertia_weight = 0.9 # Updated line\n        cognitive_coefficient = 1.5\n        social_coefficient = 1.8 # Updated line\n\n        while evals < self.budget:\n            # Evaluate population\n            for i in range(self.population_size):\n                if evals < self.budget:\n                    score = func(self.pop[i])\n                    evals += 1\n                    if score < self.personal_best_scores[i]:\n                        self.personal_best_scores[i] = score\n                        self.personal_best_positions[i] = self.pop[i]\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.pop[i]\n\n            # PSO update\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = cognitive_coefficient * r1 * (self.personal_best_positions[i] - self.pop[i])\n                social_velocity = social_coefficient * r2 * (self.global_best_position - self.pop[i])\n                self.velocities[i] = (inertia_weight * self.velocities[i] \n                                      + cognitive_velocity + social_velocity)\n                self.pop[i] += self.velocities[i]\n                self.pop[i] = np.clip(self.pop[i], self.lower_bound, self.upper_bound)\n\n            # DE mutation and crossover\n            for i in range(self.population_size):\n                if evals >= self.budget:\n                    break\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.pop[indices]\n                mutant = x1 + F * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.pop[i])\n                crossover_mask = np.random.rand(self.dim) < CR\n                trial[crossover_mask] = mutant[crossover_mask]\n                trial_score = func(trial)\n                evals += 1\n                if trial_score < func(self.pop[i]):\n                    self.pop[i] = trial\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSODE", "description": "A refined hybrid optimization approach utilizing adaptive parameters in the Particle Swarm Optimization (PSO) for improved convergence efficiency.", "configspace": "", "generation": 1, "fitness": 0.12469256338550988, "feedback": "", "error": "", "parent_id": "ce2b6e52-5f62-4dde-a14d-308a5713f249", "metadata": {"aucs": [0.19411937373972354, 0.19938751765272522, 0.1603572345894867, 0.22096364529487855, 0.17208251874515734, 0.19095010263620038, 0.1912348377996852, 0.20146106069646408, 0.1940880755172103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04325740761820085, 0.06722313414701442, 0.038379988360420114, 0.04006202004698878, 0.035891414132481425, 0.04619561431779151, 0.050182408410730184, 0.03570938824989012, 0.06707815499158554, 0.03815575366206081, 0.02386536371323633, 0.02376990220286912, 0.037205400034111547, 0.024286359854918893, 0.018303135436200324, 0.025281955330455963, 0.031353720127987095, 0.0246909494234111, 0.9866677685062043, 0.9885104455979647, 0.98875293399049, 0.9732484464436013, 0.9792867688125607, 0.9716582251783327, 0.9884614101927289, 0.9792312643281375, 0.980781524590758, 0.0587083536521501, 0.05572598861810252, 0.05486097179833649, 0.04855407668329348, 0.09863805702752926, 0.09780193426657502, 0.06793955864560963, 0.07370492808065088, 0.07963076179272888, 0.17338762797968144, 0.11016837269460689, 0.11936041576093737, 0.1626749423390207, 0.12759162122922207, 0.1530300471083903, 0.16359163418795053, 0.12425810851282781, 0.1207604183723332, 0.012580384851287651, 9.999999999998899e-05, 9.999999999998899e-05, 0.028694579989694824, 0.019075158631412514, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013731538906748275, 0.01180188062319154, 0.008627627551486716, 0.015188638064873472, 0.013414315830429069, 9.999999999998899e-05, 9.999999999998899e-05, 0.01049572930733389, 0.02770906415786789, 0.0030703220464025627, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0242967248485233, 0.016713801077550494, 0.026221974027687445, 0.00974391695573884, 0.0022984668861126822, 0.0017403996839601144, 0.02909971133723832, 0.03907306284236478, 0.02383698631870934, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026299900544876076, 9.999999999998899e-05, 0.01848617253119178, 9.999999999998899e-05, 9.999999999998899e-05, 0.005676149031946798, 0.003332297466956846, 9.999999999998899e-05, 0.2049250007352187, 0.18049330181494627, 0.2248054433395823, 0.19832810543098145, 0.18943057117471385, 0.2139924129832922, 0.2013165112911185, 0.1716603166092685, 0.2119122316175428, 0.04939557709412312, 0.0538893329769462, 0.0643869636970843, 0.0592812063262379, 0.05854228020301977, 0.0686926824414893, 0.03791696301859915, 0.03431447217457828, 0.03507158795220855, 0.13723860305340985, 0.13476580815726102, 0.14152016414698831, 0.16064172213836903, 0.14663032664069742, 0.12660171376406704, 0.16011353278144558, 0.11755392392553554, 0.12647507017911086, 0.14859897963263535, 0.15293809868282793, 0.17256712064613422, 0.1558332621943861, 0.1451136324554756, 0.1675228497655169, 0.193370412915138, 0.19726005111954992, 0.17912572403035343, 0.09473148284142319, 0.1157723545992112, 0.11745182387001418, 0.0924613014942115, 0.08484008365899665, 0.12305292202286255, 0.11390310975831563, 0.14529614416010317, 0.1068209899852316, 0.13642847026773086, 0.1259989100680663, 0.14139914229279293, 0.15074913599886075, 0.1448494170110476, 0.17565832096463585, 0.1537332128994281, 0.18187114500829582, 0.15173384589511807, 0.1436777078477669, 0.15079190849552782, 0.167822654490706, 0.14712522852088317, 0.12621874408480394, 0.1524078756700865, 0.1060724925368215, 0.13486436750737707, 0.14112601763729726, 0.17564081518662555, 0.1290218793174348, 0.13704272126965045, 0.1758808489664211, 0.12416014303657852, 0.15213314757871632, 0.13354511773276367, 0.15258725742315615, 0.17039201672782134, 0.19207807522401488, 0.14700065463842038, 0.10443724251875208, 0.13771775827193777, 0.1511660404290156, 0.12585701830552154, 0.210855690332713, 0.193634256876013, 0.19084392905156689, 0.18005874397335409, 0.1856621066562848, 0.17549349415903637, 0.17787679239002552, 0.1747422558245244, 0.17449081279865675, 0.1804229001271005, 0.17544662917191745, 0.18304142802589818, 0.036445615254214636, 0.05149783567448052, 0.04173091972669263, 0.036270555701619966, 0.04356906021198992, 0.05141443367262544, 0.04580185272428339, 0.03788069278981998, 0.047064631673285895]}, "mutation_prompt": null}
