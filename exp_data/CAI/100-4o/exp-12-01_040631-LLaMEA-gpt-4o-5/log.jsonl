{"id": "ed0573fc-52a5-4518-8cd3-5b61876283b9", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Mutation factor\n        self.CR = 0.7  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n\n                # Mutation\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.copy(population[i])\n                crossover_points = np.random.rand(self.dim) < self.CR\n                trial_vector[crossover_points] = mutant_vector[crossover_points]\n\n                # Evaluate the trial vector\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adaptive random search phase\n            if evaluations < self.budget:\n                best_idx = np.argmin(fitness)\n                best_individual = population[best_idx]\n                for _ in range(self.population_size):\n                    perturbation = np.random.randn(self.dim) * (self.upper_bound - self.lower_bound) / np.sqrt(evaluations)\n                    candidate = np.clip(best_individual + perturbation, self.lower_bound, self.upper_bound)\n                    candidate_fitness = func(candidate)\n                    evaluations += 1\n\n                    if candidate_fitness < fitness[best_idx]:\n                        population[best_idx] = candidate\n                        fitness[best_idx] = candidate_fitness\n                        best_individual = candidate\n                        if evaluations >= self.budget:\n                            break\n\n        return population[np.argmin(fitness)]", "name": "HybridDE", "description": "Hybrid differential evolution with adaptive random search for efficient exploration and exploitation in continuous domains.", "configspace": "", "generation": 0, "fitness": 0.26679095945959613, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6596634613733257, 0.6593514424940649, 0.6595837373042309, 0.6598745911582427, 0.6198275261553433, 0.6431555507726932, 0.6543806941984449, 0.6417738716433498, 0.644897928400898, 0.3229111459879126, 0.36104081537106125, 0.3500736186939287, 0.34982543609987726, 0.37783333592373314, 0.37369590003526254, 0.3307117899053039, 0.3238545242019225, 0.32748625427219547, 0.1293148284190907, 0.11953710227761061, 0.12870244132190478, 0.12664009747321525, 0.11863664309325272, 0.12041344045490188, 0.13035320649166093, 0.12948290007082464, 0.12452859301082952, 0.1118068701310263, 0.12233721227743011, 0.10513607641350586, 0.11217204453185681, 0.10374929118179621, 0.10210041801140401, 0.107817334890836, 0.12318173466240856, 0.10002413797026, 0.9704539073679495, 0.9638846112468926, 0.9727310507600001, 0.9604419018211947, 0.9570202919907497, 0.9545348660521993, 0.9807568628975571, 0.9668510763095807, 0.9723739901428659, 0.29945480893881604, 0.30097905858900864, 0.29328767338785433, 0.3013549926482664, 0.3001094719283135, 0.29574848588013203, 0.2882413873481664, 0.29665045382042166, 0.3311068679704162, 0.29085475447906006, 0.3334632323721861, 0.35563178722204114, 0.5284649245743398, 0.5277959637156168, 0.3566657586055345, 0.4736790372359132, 0.4522873072210706, 0.3573190957032699, 0.16449615469866985, 0.19366356810402363, 0.19131549865592068, 0.2340258930681809, 0.16719751286189932, 0.1783356802671553, 0.19172190429857006, 0.1872570662798535, 0.19326297400035353, 0.1608264083052603, 0.17216982724026386, 0.15707976881955055, 0.1599092011410561, 0.1692722899217748, 0.1915259382743839, 0.15899089491098184, 0.16740861516203331, 0.21143805899297996, 0.016258535270843866, 0.01965721904596207, 0.015171237613581745, 0.003867032729365727, 0.032207992748427894, 0.011037669707979925, 0.0013138271817501046, 0.01772816118679088, 0.04317578400287114, 0.11816146041258069, 0.08671742592428855, 0.11276585026673969, 0.12698125040608887, 0.07342925310036319, 0.04864528548473768, 0.13572407730007618, 0.11110388997216636, 0.14991170063559223, 0.01788793813445444, 0.0008016132608201776, 0.010453879107451436, 0.00026960429027533817, 0.012869238401814087, 9.999999999998899e-05, 0.008092839623184744, 0.0023846709490149554, 9.999999999998899e-05, 0.10590114645489868, 0.0906719931933927, 0.11084417165074922, 0.11851932909826723, 0.1108812414070911, 0.11973337316576393, 0.09302838541254954, 0.11918349177024667, 0.12402411907657773, 0.4542495955391439, 0.44565910990804636, 0.4678781741073381, 0.4519165372472318, 0.4717500090934019, 0.4646615583576549, 0.46683603880682834, 0.47387890541322863, 0.4548708026871916, 0.12630002938003781, 0.13027401960447282, 0.11444195213102026, 0.12796311417941286, 0.09931337833139664, 0.1031199081938865, 0.10545842413719642, 0.11328769132835514, 0.11499823290506883, 0.18148877279330133, 0.2589732529553247, 0.1787206835729097, 0.2541387031707537, 0.2532420954610156, 0.25248896792765796, 0.2556776452081243, 0.2545343592713504, 0.2245640822732501, 0.2982596427202464, 0.2817521475201865, 0.30658183590056487, 0.2888487258717801, 0.26220426963887644, 0.2963865886934992, 0.32029449046501013, 0.3183502219245845, 0.2851050053343567, 0.23198394740697947, 0.2242279003523613, 0.2304210494853044, 0.18386334813529082, 0.21664317493965324, 0.2222731987736285, 0.2218244796010327, 0.23275098317159204, 0.21932697698247217, 0.20962378709001483, 0.2322218969924288, 0.197327409387983, 0.21704732669616655, 0.19113543352976614, 0.19676912469563035, 0.1978834121832761, 0.2292207150040958, 0.18530142983413178, 0.21187719011984318, 0.20145847944724493, 0.21456896655628166, 0.2794030910685923, 0.23238814623987814, 0.20574857282868708, 0.22244374859286709, 0.22477270927647808, 0.2187993110508062, 0.6101763317137288, 0.187836438943916, 0.33856534325567456, 0.5453581520392528, 0.41595359198023174, 0.616997139389575, 0.2612861039071639, 0.49189569452175086, 0.6114934139382433, 0.5819604081747614, 0.4055991594063769, 0.39991892767603376, 0.42810632323615294, 0.4695273029568777, 0.605140945923043, 0.4430119009233622, 0.20064014613873804, 0.20336214061918156, 0.18734348127006528, 0.18304481894080016, 0.17787360489021553, 0.1760718626451082, 0.1739581397365888, 0.19160698473143212, 0.18231052813587456, 0.1906554946461444, 0.18355938429502805, 0.08559438669151465, 0.07665708244072522, 0.09871281887027439, 0.08018140647449434, 0.08882884619215126, 0.07265454408061889, 0.09678265992408619, 0.09090944148032054, 0.08597595169237704]}, "mutation_prompt": null}
{"id": "7811bc83-b5e9-4c90-b442-c0cd6850419b", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Mutation factor\n        self.CR = 0.7  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n\n                # Mutation\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.copy(population[i])\n                crossover_points = np.random.rand(self.dim) < self.CR\n                trial_vector[crossover_points] = mutant_vector[crossover_points]\n\n                # Evaluate the trial vector\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adaptive random search phase\n            if evaluations < self.budget:\n                best_idx = np.argmin(fitness)\n                best_individual = population[best_idx]\n                for _ in range(self.population_size):\n                    perturbation = np.random.randn(self.dim) * (self.upper_bound - self.lower_bound) / np.sqrt(evaluations)\n                    candidate = np.clip(best_individual + perturbation, self.lower_bound, self.upper_bound)\n                    candidate_fitness = func(candidate)\n                    evaluations += 1\n\n                    if candidate_fitness < fitness[best_idx]:\n                        population[best_idx] = candidate\n                        fitness[best_idx] = candidate_fitness\n                        best_individual = candidate\n                        if evaluations >= self.budget:\n                            break\n\n        return population[np.argmin(fitness)]", "name": "HybridDE", "description": "Hybrid differential evolution with adaptive random search for efficient exploration and exploitation in continuous domains.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ed0573fc-52a5-4518-8cd3-5b61876283b9", "metadata": {"aucs": [0.6596634613733257, 0.6593514424940649, 0.6595837373042309, 0.6598745911582427, 0.6198275261553433, 0.6431555507726932, 0.6543806941984449, 0.6417738716433498, 0.644897928400898, 0.3229111459879126, 0.36104081537106125, 0.3500736186939287, 0.34982543609987726, 0.37783333592373314, 0.37369590003526254, 0.3307117899053039, 0.3238545242019225, 0.32748625427219547, 0.1293148284190907, 0.11953710227761061, 0.12870244132190478, 0.12664009747321525, 0.11863664309325272, 0.12041344045490188, 0.13035320649166093, 0.12948290007082464, 0.12452859301082952, 0.1118068701310263, 0.12233721227743011, 0.10513607641350586, 0.11217204453185681, 0.10374929118179621, 0.10210041801140401, 0.107817334890836, 0.12318173466240856, 0.10002413797026, 0.9704539073679495, 0.9638846112468926, 0.9727310507600001, 0.9604419018211947, 0.9570202919907497, 0.9545348660521993, 0.9807568628975571, 0.9668510763095807, 0.9723739901428659, 0.29945480893881604, 0.30097905858900864, 0.29328767338785433, 0.3013549926482664, 0.3001094719283135, 0.29574848588013203, 0.2882413873481664, 0.29665045382042166, 0.3311068679704162, 0.29085475447906006, 0.3334632323721861, 0.35563178722204114, 0.5284649245743398, 0.5277959637156168, 0.3566657586055345, 0.4736790372359132, 0.4522873072210706, 0.3573190957032699, 0.16449615469866985, 0.19366356810402363, 0.19131549865592068, 0.2340258930681809, 0.16719751286189932, 0.1783356802671553, 0.19172190429857006, 0.1872570662798535, 0.19326297400035353, 0.1608264083052603, 0.17216982724026386, 0.15707976881955055, 0.1599092011410561, 0.1692722899217748, 0.1915259382743839, 0.15899089491098184, 0.16740861516203331, 0.21143805899297996, 0.016258535270843866, 0.01965721904596207, 0.015171237613581745, 0.003867032729365727, 0.032207992748427894, 0.011037669707979925, 0.0013138271817501046, 0.01772816118679088, 0.04317578400287114, 0.11816146041258069, 0.08671742592428855, 0.11276585026673969, 0.12698125040608887, 0.07342925310036319, 0.04864528548473768, 0.13572407730007618, 0.11110388997216636, 0.14991170063559223, 0.01788793813445444, 0.0008016132608201776, 0.010453879107451436, 0.00026960429027533817, 0.012869238401814087, 9.999999999998899e-05, 0.008092839623184744, 0.0023846709490149554, 9.999999999998899e-05, 0.10590114645489868, 0.0906719931933927, 0.11084417165074922, 0.11851932909826723, 0.1108812414070911, 0.11973337316576393, 0.09302838541254954, 0.11918349177024667, 0.12402411907657773, 0.4542495955391439, 0.44565910990804636, 0.4678781741073381, 0.4519165372472318, 0.4717500090934019, 0.4646615583576549, 0.46683603880682834, 0.47387890541322863, 0.4548708026871916, 0.12630002938003781, 0.13027401960447282, 0.11444195213102026, 0.12796311417941286, 0.09931337833139664, 0.1031199081938865, 0.10545842413719642, 0.11328769132835514, 0.11499823290506883, 0.18148877279330133, 0.2589732529553247, 0.1787206835729097, 0.2541387031707537, 0.2532420954610156, 0.25248896792765796, 0.2556776452081243, 0.2545343592713504, 0.2245640822732501, 0.2982596427202464, 0.2817521475201865, 0.30658183590056487, 0.2888487258717801, 0.26220426963887644, 0.2963865886934992, 0.32029449046501013, 0.3183502219245845, 0.2851050053343567, 0.23198394740697947, 0.2242279003523613, 0.2304210494853044, 0.18386334813529082, 0.21664317493965324, 0.2222731987736285, 0.2218244796010327, 0.23275098317159204, 0.21932697698247217, 0.20962378709001483, 0.2322218969924288, 0.197327409387983, 0.21704732669616655, 0.19113543352976614, 0.19676912469563035, 0.1978834121832761, 0.2292207150040958, 0.18530142983413178, 0.21187719011984318, 0.20145847944724493, 0.21456896655628166, 0.2794030910685923, 0.23238814623987814, 0.20574857282868708, 0.22244374859286709, 0.22477270927647808, 0.2187993110508062, 0.6101763317137288, 0.187836438943916, 0.33856534325567456, 0.5453581520392528, 0.41595359198023174, 0.616997139389575, 0.2612861039071639, 0.49189569452175086, 0.6114934139382433, 0.5819604081747614, 0.4055991594063769, 0.39991892767603376, 0.42810632323615294, 0.4695273029568777, 0.605140945923043, 0.4430119009233622, 0.20064014613873804, 0.20336214061918156, 0.18734348127006528, 0.18304481894080016, 0.17787360489021553, 0.1760718626451082, 0.1739581397365888, 0.19160698473143212, 0.18231052813587456, 0.1906554946461444, 0.18355938429502805, 0.08559438669151465, 0.07665708244072522, 0.09871281887027439, 0.08018140647449434, 0.08882884619215126, 0.07265454408061889, 0.09678265992408619, 0.09090944148032054, 0.08597595169237704]}, "mutation_prompt": null}
