{"id": "5c53a867-a84b-4300-8a28-9e0bad07c7b9", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.evaluations += 1\n\n    def mutate(self, idx):\n        indices = [i for i in range(self.population_size) if i != idx]\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        mutant_vector = self.population[a] + self.F * (self.population[b] - self.population[c])\n        mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n        return mutant_vector\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial_vector = np.where(cross_points, mutant, target)\n        return trial_vector\n\n    def local_search(self, candidate, func):\n        step_size = 0.1\n        perturbation = np.random.uniform(-step_size, step_size, self.dim)\n        trial = candidate + perturbation\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        trial_fitness = func(trial)\n        self.evaluations += 1\n        if trial_fitness < func(candidate):\n            return trial, trial_fitness\n        return candidate, func(candidate)\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Perform adaptive local search\n                    if np.random.rand() < 0.2:  # With some probability, apply local search\n                        self.population[i], self.fitness[i] = self.local_search(self.population[i], func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "The algorithm combines differential evolution and adaptive local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.3678051460372142, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7906883168963382, 0.7760771378425517, 0.7789154295520249, 0.7731527247512423, 0.7933903424535529, 0.7658503956972212, 0.7862514840168201, 0.7610344506476783, 0.7840013837898914, 0.5925601777670311, 0.5974328392952797, 0.6284374372885588, 0.5560464900292023, 0.6033530876810718, 0.5934974487184614, 0.590896842042697, 0.6072888540254175, 0.6061247718520464, 0.11910291834678188, 0.1289915390868016, 0.12741465121934303, 0.12597318991649953, 0.12710378487097385, 0.11380132404745114, 0.12593225026662935, 0.12449311494682658, 0.1240023555343549, 0.11953317483973291, 0.10511641865604471, 0.11859330948043356, 0.10546745556241055, 0.10849822214685523, 0.11577714001935979, 0.10183421752695432, 0.10345433742731425, 0.09044834249441114, 0.9290738066688518, 0.8211036041658781, 0.8055443078480906, 0.8664841526441103, 0.8716062442281431, 0.8583955353772013, 0.8989000223870361, 0.8869721418598309, 0.896113794166701, 0.4334466858278354, 0.45849129044474835, 0.39441881857973693, 0.4359187143121279, 0.4268990094258662, 0.43031605836214026, 0.473197158833767, 0.4529104986268886, 0.42405311073484286, 0.7530681448090231, 0.7195452874179649, 0.7903920937303218, 0.7700172569055762, 0.7495983787903918, 0.7283074083107677, 0.7490557485453052, 0.761573566733492, 0.7453397607229764, 0.22397071007970382, 0.2177696449949551, 0.4623339289001347, 0.3551776697870127, 0.22987836706866116, 0.15961828025435354, 0.19947107493576088, 0.18869469424650864, 0.30151682415476466, 0.32643771181832104, 0.17193960465500713, 0.274325973870298, 0.20839560499364507, 0.2796884426626308, 0.15904777959230265, 0.44480441653758185, 0.1851935026238527, 0.19187085435872997, 0.3664115522231607, 0.40622413508271715, 0.3801903647925359, 0.3443022146286997, 0.39073014093567515, 0.3775773130366692, 0.3885586731119476, 0.38560647016056326, 0.3677087370475105, 0.4924475512848052, 0.5176775832754812, 0.5429703434156321, 0.4574980129270675, 0.55485348418968, 0.4886639906038319, 0.5540357880337146, 0.5200341449191213, 0.5485812379626045, 0.15909629151001714, 0.12232930370447725, 0.14630496783499225, 0.25670996713818284, 0.2679286685013893, 0.25702007095423307, 0.13712443368625593, 0.17690333906126854, 0.16100221096906697, 0.28795534696295066, 0.2866807130872081, 0.3019301942774134, 0.3106760895128359, 0.31975922927513867, 0.31151175250324026, 0.2777955050610835, 0.2753492200646931, 0.3109866804077941, 0.7165516420806521, 0.6739659463097005, 0.6848297807585684, 0.6628754867603828, 0.6923605879060237, 0.6943138808814098, 0.6908152282644575, 0.7164698972671416, 0.6903602731402347, 0.09699350610548174, 0.11138771298164885, 0.09571055997448241, 0.1039453002250833, 0.09633226473074519, 0.09858049403939473, 0.09482173648564263, 0.1132576944189877, 0.10487231866651203, 0.13748835609319465, 0.1787382872894574, 0.1433964954701743, 0.1627807106525202, 0.12958765628403668, 0.15138835433312525, 0.14005537712410188, 0.16661369189564834, 0.1589490460526698, 0.4026395952439832, 0.41104057291542817, 0.40657725438096626, 0.4071097443808692, 0.41255032012123083, 0.4055423477461907, 0.42677105084701084, 0.4229574914654086, 0.4207594486694879, 0.33211216719752357, 0.3047034251411098, 0.3068095158793549, 0.3498881897827054, 0.2962112767154347, 0.2897394731995423, 0.3377516508601027, 0.3596687755344252, 0.36903519084909986, 0.18675443320661267, 0.22102758215605833, 0.1965710092087154, 0.19560012108126112, 0.1934799483604156, 0.19411260041063894, 0.20512000977818323, 0.20986841871969486, 0.18479323781229418, 0.27784038197855065, 0.21500627300478004, 0.28869252299036285, 0.2061586684702723, 0.19880156887735867, 0.20304993268982863, 0.19592493448966997, 0.18642906099973566, 0.22971038987036685, 0.18012668509393936, 0.17721037127524142, 0.7903922908350902, 0.6770479170034063, 0.18431269500964254, 0.17946957701720745, 0.5698823830728015, 0.7836744501517223, 0.7228259209604975, 0.680852300612367, 0.20414293519807203, 0.6802838713185717, 0.1957458857700144, 0.6641005360143682, 0.6890852954266766, 0.2084689547478994, 0.1262571748073431, 0.20195694654391994, 0.19091527964509958, 0.19118710346859402, 0.21377530420841417, 0.18955648580125406, 0.19450864780479948, 0.2005490501595767, 0.19421943432227562, 0.20123170792855893, 0.18567012441777409, 0.08729515858602643, 0.08100955887172445, 0.07764031954159001, 0.08193326923687749, 0.09712280137540674, 0.09697421378197235, 0.07402102486940343, 0.08841863788151605, 0.09324559117872178]}, "mutation_prompt": null}
{"id": "daeb78ef-dcb7-477f-b02a-7a5d2165985b", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F_min = 0.2  # Min mutation factor\n        self.F_max = 0.8  # Max mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.evaluations += 1\n\n    def mutate(self, idx):\n        indices = [i for i in range(self.population_size) if i != idx]\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F_dynamic = np.random.uniform(self.F_min, self.F_max)  # Dynamic mutation factor\n        mutant_vector = self.population[a] + F_dynamic * (self.population[b] - self.population[c])\n        mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n        return mutant_vector\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial_vector = np.where(cross_points, mutant, target)\n        return trial_vector\n\n    def local_search(self, candidate, func):\n        step_size = 0.1\n        perturbation = np.random.uniform(-step_size, step_size, self.dim)\n        trial = candidate + perturbation\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        trial_fitness = func(trial)\n        self.evaluations += 1\n        if trial_fitness < func(candidate):\n            return trial, trial_fitness\n        return candidate, func(candidate)\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        best_idx = np.argmin(self.fitness)\n        best_solution = self.population[best_idx]\n        best_fitness = self.fitness[best_idx]\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n                    if np.random.rand() < 0.2:\n                        self.population[i], self.fitness[i] = self.local_search(self.population[i], func)\n        \n        return best_solution, best_fitness", "name": "AdaptiveDifferentialEvolution", "description": "The algorithm fuses dynamic control of mutation factors with focused exploitation through adaptive local search and consideration of best-known solutions.", "configspace": "", "generation": 1, "fitness": 0.37495903763279165, "feedback": "", "error": "", "parent_id": "5c53a867-a84b-4300-8a28-9e0bad07c7b9", "metadata": {"aucs": [0.7773563464425408, 0.785342322210691, 0.7696641380910669, 0.7755602392720995, 0.7971798559130645, 0.7727669240234621, 0.7671420617103554, 0.7852331969701718, 0.7692150910228402, 0.5860750679319541, 0.5982701951435729, 0.6428052893489378, 0.573951285497682, 0.6147948903191716, 0.5745522904505906, 0.598339203805663, 0.5766326731226641, 0.6302409863190626, 0.10787470665402832, 0.12655413956642825, 0.11794639510230831, 0.12948279286073516, 0.10965238694811164, 0.11502815293666502, 0.11302538824808162, 0.12745099684783512, 0.10866214368756355, 0.1152049536368338, 0.11318280316489182, 0.11559168950157894, 0.11465249855011139, 0.12274210720978429, 0.11560980007531851, 0.10713560720128101, 0.10688682814194961, 0.12375077907043286, 0.8228217003238479, 0.9242005164712527, 0.8139292125553309, 0.9414954891448737, 0.8662218523597854, 0.8914348610741158, 0.8705986572093192, 0.8917073308429008, 0.8198343586670562, 0.44189446003800226, 0.4344205553999969, 0.419564706357597, 0.4533307789591312, 0.44184275335784196, 0.42292253146176373, 0.4355541040307539, 0.42938582758785515, 0.497816827180519, 0.7779051761920255, 0.7648053045914938, 0.7610727705003302, 0.780733971121133, 0.7723964593610518, 0.7924601996478056, 0.7974712821476114, 0.7722483066978486, 0.8151759623127434, 0.5167211200752126, 0.22384320287222126, 0.1787844311543102, 0.32137001455299896, 0.19839589345017794, 0.16694508544272335, 0.2524898144103942, 0.38403762202022185, 0.2889048307991253, 0.19753163469693513, 0.15138083794665413, 0.24117331751060334, 0.3133702520303139, 0.17645776123659873, 0.19640343907403113, 0.3270622325017266, 0.15774693202298073, 0.4998488254179593, 0.45242233998348014, 0.3664511083245443, 0.40929775687431935, 0.45202278269516505, 0.37927078725341423, 0.3641224462121043, 0.44644489029958245, 0.37799364926225887, 0.42835824671652023, 0.5551579637271209, 0.5507937092910145, 0.47043228394882575, 0.5386342877004786, 0.5250889949445889, 0.5586825998876326, 0.539908812465578, 0.5710734013252194, 0.5850484467745273, 0.18920716133179605, 0.12489099970904227, 0.16252950587909287, 0.228059836908156, 0.286161932042148, 0.18689935564171034, 0.23327581342225645, 0.15253234564301332, 0.1890185387107426, 0.30671681786771354, 0.2834521632815602, 0.2665569526150755, 0.29704752453327277, 0.3275033071109432, 0.3527180221055064, 0.301913827241164, 0.32612457326797517, 0.29927324728645377, 0.6696881207461084, 0.697806381081479, 0.6837885010085996, 0.6768740523805286, 0.6580067399536598, 0.6795967750774268, 0.717993069698358, 0.6912201058689769, 0.7094733150871326, 0.09150772186154077, 0.10896661472963065, 0.10804427214171775, 0.11092188221695198, 0.09373898222664323, 0.09400783187956063, 0.09489828152173563, 0.11333054438695067, 0.13780465236963824, 0.13794053663999783, 0.13516198798834544, 0.13933874803728574, 0.15126223815830653, 0.1686464713533603, 0.18704595980559968, 0.146640984490632, 0.1423530697469616, 0.13263806791765087, 0.4222938585574477, 0.4007152514132577, 0.44174607863620907, 0.41367737138215566, 0.4488522626542879, 0.4185215975376293, 0.4282278539919876, 0.45441384995433354, 0.42724318602005584, 0.3583893170372041, 0.3230231213526046, 0.32825955909558024, 0.34792327195174744, 0.3049892052168426, 0.3333324045363749, 0.3587075425942057, 0.36199653883513816, 0.3536112844949447, 0.19033992486603757, 0.20863178850116915, 0.1864993371203837, 0.22513072576920812, 0.19568316254092566, 0.223609432863085, 0.20447454782119456, 0.2140694950942006, 0.19598216192237627, 0.22033564493557545, 0.2210491290388994, 0.26172116706028814, 0.1972418045916251, 0.29750350199256115, 0.20982719953739248, 0.2186223982335631, 0.20860911119618775, 0.20974032357970862, 0.18961925468745822, 0.7657184353788572, 0.19414398984414605, 0.7999470658648586, 0.18318108019216783, 0.7752545645379727, 0.6651109178205452, 0.6888288189650668, 0.7326871257534227, 0.792321555031259, 0.16646245955393024, 0.19861421391133105, 0.5262541834075359, 0.16348636508523762, 0.6572585122696826, 0.20723862791431635, 0.2060345531513641, 0.20051434937462964, 0.17269025883810774, 0.1787135739097474, 0.18900668020905365, 0.18335255546761875, 0.1902789689607941, 0.17866763193016233, 0.18792337906280532, 0.1752067487531931, 0.18580689289572172, 0.08289726921862894, 0.0810992382315664, 0.07989341937088812, 0.07751404124416672, 0.087737887672654, 0.08004488827746303, 0.08495059818765094, 0.06904964575536743, 0.0835961955597595]}, "mutation_prompt": null}
