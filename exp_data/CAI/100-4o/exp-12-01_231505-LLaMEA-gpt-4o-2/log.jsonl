{"id": "cf04ae5e-d8bd-4c15-8595-80a77319dd59", "solution": "import numpy as np\n\nclass HybridPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, int(budget / 10))\n        self.inertia = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.mutation_prob = 0.1\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(pos) for pos in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cognitive_coefficient * r1 * (personal_best_positions - positions) +\n                          self.social_coefficient * r2 * (global_best_position - positions))\n            velocities = np.clip(velocities, -self.vel_max, self.vel_max)\n            positions += velocities\n            positions = np.clip(positions, self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                if np.random.rand() < self.mutation_prob:\n                    mutation_strength = 0.1 * (self.upper_bound - self.lower_bound)\n                    mutation = np.random.normal(0, mutation_strength, self.dim)\n                    positions[i] = np.clip(positions[i] + mutation, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(pos) for pos in positions])\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = positions[np.argmin(scores)]\n\n        return global_best_position", "name": "HybridPSO", "description": "A hybrid metaheuristic combining Particle Swarm Optimization (PSO) with a Genetic Algorithm-inspired mutation step for enhanced exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.2061325188601842, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.3879141228570424, 0.3879141228570424, 0.3879141228570424, 0.4307602154761361, 0.4307602154761361, 0.4307602154761361, 0.37783181070234517, 0.37783181070234517, 0.37783181070234517, 0.05164776801452098, 0.05164776801452098, 0.05164776801452098, 0.009918663489626889, 0.009918663489626889, 0.009918663489626889, 0.08960379802543761, 0.08960379802543761, 0.08960379802543761, 0.10500456651581813, 0.10500456651581813, 0.10500456651581813, 0.10159114108994727, 0.10159114108994727, 0.10159114108994727, 0.11430085971692772, 0.11430085971692772, 0.11430085971692772, 0.09655127077255987, 0.09655127077255987, 0.09655127077255987, 0.09114097528663856, 0.09114097528663856, 0.09114097528663856, 0.08624763636029542, 0.08624763636029542, 0.08624763636029542, 0.9063315582099868, 0.9063315582099868, 0.9063315582099868, 0.9289802695635045, 0.9289802695635045, 0.9289802695635045, 0.9182702594065653, 0.9182702594065653, 0.9182702594065653, 0.2511272464007739, 0.2511272464007739, 0.2511272464007739, 0.25006339477432493, 0.25006339477432493, 0.25006339477432493, 0.25835582682519376, 0.25835582682519376, 0.25835582682519376, 0.2060961687529479, 0.2060961687529479, 0.2060961687529479, 0.24131598283575295, 0.24131598283575295, 0.24131598283575295, 0.2962585144110709, 0.2962585144110709, 0.2962585144110709, 0.17894647035082112, 0.17894647035082112, 0.17894647035082112, 0.09458782802571264, 0.09458782802571264, 0.09458782802571264, 0.1363571056775309, 0.1363571056775309, 0.1363571056775309, 0.1325129048938306, 0.1325129048938306, 0.1325129048938306, 0.13507301330508248, 0.13507301330508248, 0.13507301330508248, 0.1846554228037095, 0.1846554228037095, 0.1846554228037095, 0.009640838718562916, 0.009640838718562916, 0.009640838718562916, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002810449547432814, 0.002810449547432814, 0.002810449547432814, 0.11367103208985285, 0.11367103208985285, 0.11367103208985285, 0.04722060650100779, 0.04722060650100779, 0.04722060650100779, 0.09636595792280422, 0.09636595792280422, 0.09636595792280422, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10272228094073377, 0.10272228094073377, 0.10272228094073377, 0.07926093842118354, 0.07926093842118354, 0.07926093842118354, 0.041090826671928204, 0.041090826671928204, 0.041090826671928204, 0.4108859265977234, 0.4108859265977234, 0.4108859265977234, 0.37187937767002444, 0.37187937767002444, 0.37187937767002444, 0.34004976418488164, 0.34004976418488164, 0.34004976418488164, 0.08332915504928728, 0.08332915504928728, 0.08332915504928728, 0.1016964239162329, 0.1016964239162329, 0.1016964239162329, 0.10664400546419495, 0.10664400546419495, 0.10664400546419495, 0.15236021680631273, 0.15236021680631273, 0.15236021680631273, 0.18112447324814973, 0.18112447324814973, 0.18112447324814973, 0.1816301207401234, 0.1816301207401234, 0.1816301207401234, 0.27175879074285536, 0.27175879074285536, 0.27175879074285536, 0.2636365049321313, 0.2636365049321313, 0.2636365049321313, 0.26781059338306434, 0.26781059338306434, 0.26781059338306434, 0.18003561892183972, 0.18003561892183972, 0.18003561892183972, 0.20316697616799917, 0.20316697616799917, 0.20316697616799917, 0.167892533990726, 0.167892533990726, 0.167892533990726, 0.20888775500426482, 0.20888775500426482, 0.20888775500426482, 0.2562260671697787, 0.2562260671697787, 0.2562260671697787, 0.19877573015838668, 0.19877573015838668, 0.19877573015838668, 0.2154127460320785, 0.2154127460320785, 0.2154127460320785, 0.17709825787716804, 0.17709825787716804, 0.17709825787716804, 0.18629859609738664, 0.18629859609738664, 0.18629859609738664, 0.6330981324725806, 0.6330981324725806, 0.6330981324725806, 0.15702676553350214, 0.15702676553350214, 0.15702676553350214, 0.4010545436806424, 0.4010545436806424, 0.4010545436806424, 0.4230719290853473, 0.4230719290853473, 0.4230719290853473, 0.2094540405190779, 0.2094540405190779, 0.2094540405190779, 0.12739868188880576, 0.12739868188880576, 0.12739868188880576, 0.18905100375832695, 0.18905100375832695, 0.18905100375832695, 0.17816220930723192, 0.17816220930723192, 0.17816220930723192, 0.16999284159328476, 0.16999284159328476, 0.16999284159328476, 0.08053403808352433, 0.08053403808352433, 0.08053403808352433, 0.09194244253427697, 0.09194244253427697, 0.09194244253427697, 0.099527369964438, 0.099527369964438, 0.099527369964438]}, "mutation_prompt": null}
{"id": "5f86d555-d170-4d42-be19-4e19989984cf", "solution": "import numpy as np\n\nclass HybridPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, int(budget / 10))\n        self.inertia = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.mutation_prob = 0.1\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(pos) for pos in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cognitive_coefficient * r1 * (personal_best_positions - positions) +\n                          self.social_coefficient * r2 * (global_best_position - positions))\n            velocities = np.clip(velocities, -self.vel_max, self.vel_max)\n            positions += velocities\n            positions = np.clip(positions, self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                if np.random.rand() < self.mutation_prob:\n                    mutation_strength = 0.1 * (self.upper_bound - self.lower_bound)\n                    mutation = np.random.normal(0, mutation_strength, self.dim)\n                    positions[i] = np.clip(positions[i] + mutation, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(pos) for pos in positions])\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = positions[np.argmin(scores)]\n\n        return global_best_position", "name": "HybridPSO", "description": "A hybrid metaheuristic combining Particle Swarm Optimization (PSO) with a Genetic Algorithm-inspired mutation step for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cf04ae5e-d8bd-4c15-8595-80a77319dd59", "metadata": {"aucs": [0.3879141228570424, 0.3879141228570424, 0.3879141228570424, 0.4307602154761361, 0.4307602154761361, 0.4307602154761361, 0.37783181070234517, 0.37783181070234517, 0.37783181070234517, 0.05164776801452098, 0.05164776801452098, 0.05164776801452098, 0.009918663489626889, 0.009918663489626889, 0.009918663489626889, 0.08960379802543761, 0.08960379802543761, 0.08960379802543761, 0.10500456651581813, 0.10500456651581813, 0.10500456651581813, 0.10159114108994727, 0.10159114108994727, 0.10159114108994727, 0.11430085971692772, 0.11430085971692772, 0.11430085971692772, 0.09655127077255987, 0.09655127077255987, 0.09655127077255987, 0.09114097528663856, 0.09114097528663856, 0.09114097528663856, 0.08624763636029542, 0.08624763636029542, 0.08624763636029542, 0.9063315582099868, 0.9063315582099868, 0.9063315582099868, 0.9289802695635045, 0.9289802695635045, 0.9289802695635045, 0.9182702594065653, 0.9182702594065653, 0.9182702594065653, 0.2511272464007739, 0.2511272464007739, 0.2511272464007739, 0.25006339477432493, 0.25006339477432493, 0.25006339477432493, 0.25835582682519376, 0.25835582682519376, 0.25835582682519376, 0.2060961687529479, 0.2060961687529479, 0.2060961687529479, 0.24131598283575295, 0.24131598283575295, 0.24131598283575295, 0.2962585144110709, 0.2962585144110709, 0.2962585144110709, 0.17894647035082112, 0.17894647035082112, 0.17894647035082112, 0.09458782802571264, 0.09458782802571264, 0.09458782802571264, 0.1363571056775309, 0.1363571056775309, 0.1363571056775309, 0.1325129048938306, 0.1325129048938306, 0.1325129048938306, 0.13507301330508248, 0.13507301330508248, 0.13507301330508248, 0.1846554228037095, 0.1846554228037095, 0.1846554228037095, 0.009640838718562916, 0.009640838718562916, 0.009640838718562916, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002810449547432814, 0.002810449547432814, 0.002810449547432814, 0.11367103208985285, 0.11367103208985285, 0.11367103208985285, 0.04722060650100779, 0.04722060650100779, 0.04722060650100779, 0.09636595792280422, 0.09636595792280422, 0.09636595792280422, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10272228094073377, 0.10272228094073377, 0.10272228094073377, 0.07926093842118354, 0.07926093842118354, 0.07926093842118354, 0.041090826671928204, 0.041090826671928204, 0.041090826671928204, 0.4108859265977234, 0.4108859265977234, 0.4108859265977234, 0.37187937767002444, 0.37187937767002444, 0.37187937767002444, 0.34004976418488164, 0.34004976418488164, 0.34004976418488164, 0.08332915504928728, 0.08332915504928728, 0.08332915504928728, 0.1016964239162329, 0.1016964239162329, 0.1016964239162329, 0.10664400546419495, 0.10664400546419495, 0.10664400546419495, 0.15236021680631273, 0.15236021680631273, 0.15236021680631273, 0.18112447324814973, 0.18112447324814973, 0.18112447324814973, 0.1816301207401234, 0.1816301207401234, 0.1816301207401234, 0.27175879074285536, 0.27175879074285536, 0.27175879074285536, 0.2636365049321313, 0.2636365049321313, 0.2636365049321313, 0.26781059338306434, 0.26781059338306434, 0.26781059338306434, 0.18003561892183972, 0.18003561892183972, 0.18003561892183972, 0.20316697616799917, 0.20316697616799917, 0.20316697616799917, 0.167892533990726, 0.167892533990726, 0.167892533990726, 0.20888775500426482, 0.20888775500426482, 0.20888775500426482, 0.2562260671697787, 0.2562260671697787, 0.2562260671697787, 0.19877573015838668, 0.19877573015838668, 0.19877573015838668, 0.2154127460320785, 0.2154127460320785, 0.2154127460320785, 0.17709825787716804, 0.17709825787716804, 0.17709825787716804, 0.18629859609738664, 0.18629859609738664, 0.18629859609738664, 0.6330981324725806, 0.6330981324725806, 0.6330981324725806, 0.15702676553350214, 0.15702676553350214, 0.15702676553350214, 0.4010545436806424, 0.4010545436806424, 0.4010545436806424, 0.4230719290853473, 0.4230719290853473, 0.4230719290853473, 0.2094540405190779, 0.2094540405190779, 0.2094540405190779, 0.12739868188880576, 0.12739868188880576, 0.12739868188880576, 0.18905100375832695, 0.18905100375832695, 0.18905100375832695, 0.17816220930723192, 0.17816220930723192, 0.17816220930723192, 0.16999284159328476, 0.16999284159328476, 0.16999284159328476, 0.08053403808352433, 0.08053403808352433, 0.08053403808352433, 0.09194244253427697, 0.09194244253427697, 0.09194244253427697, 0.099527369964438, 0.099527369964438, 0.099527369964438]}, "mutation_prompt": null}
