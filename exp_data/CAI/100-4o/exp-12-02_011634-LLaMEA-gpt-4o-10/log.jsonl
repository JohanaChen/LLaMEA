{"id": "f624fe72-72dd-4c87-a763-7ae8ebc516b4", "solution": "import numpy as np\n\nclass HybridDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.evaluations = 0\n\n    def evaluate(self, func, candidate):\n        if self.evaluations < self.budget:\n            fitness = func(candidate)\n            self.evaluations += 1\n            return fitness\n        else:\n            return np.inf\n\n    def adapt_opposition(self, candidate):\n        return self.lower_bound + self.upper_bound - candidate\n\n    def __call__(self, func):\n        # Initial evaluation of the population\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover = np.random.rand(self.dim) < self.CR\n                if not np.any(crossover):\n                    crossover[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = self.evaluate(func, trial)\n\n                # Replacement\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive opposition-based learning\n                opposition = self.adapt_opposition(self.population[i])\n                opposition_fitness = self.evaluate(func, opposition)\n                if opposition_fitness < self.fitness[i]:\n                    self.population[i] = opposition\n                    self.fitness[i] = opposition_fitness\n            \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "HybridDEOptimizer", "description": "Hybrid Differential Evolution with Adaptive Opposition-Based Learning for enhanced exploration and exploitation balance.", "configspace": "", "generation": 0, "fitness": 0.1788768799466773, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.38402409019366734, 0.39214302830290115, 0.39404050800480084, 0.4010980682185231, 0.4076694317615245, 0.38927061129169527, 0.3799921938502, 0.3696531533543016, 0.4231619808458422, 0.15512323646031145, 0.14728809296769718, 0.19179844786106004, 0.12805632864502314, 0.1250114381232017, 0.13274781627493626, 0.16022584185191646, 0.1360542590571756, 0.16337001888046576, 0.07705629128137392, 0.08690489248915145, 0.08962050946058808, 0.07345406010644762, 0.0837760678979601, 0.07449633644958353, 0.09656607981441834, 0.07475278533209473, 0.08486806181846518, 0.06710008026707859, 0.07691359252615004, 0.08031379000632044, 0.07123616280803635, 0.0764441841826099, 0.06539722251573854, 0.06033105027780161, 0.07013710596027867, 0.07115920700568734, 0.8047679120752979, 0.8712251308777919, 0.8544725203711101, 0.9366899466940817, 0.9220333343836342, 0.7882549686709484, 0.835456324128386, 0.9091108562354272, 0.836823792268361, 0.16572440514408937, 0.1538055723804358, 0.15431947432376814, 0.14473466930621748, 0.1596274855919675, 0.19503524763741698, 0.16205544244967574, 0.156455931346417, 0.1674352152716485, 0.2456525493208086, 0.21773915804435806, 0.218495854635139, 0.24853557479284782, 0.24261775472127678, 0.24235885118601264, 0.23836145828540556, 0.23202626187585962, 0.2247899107150605, 0.09007491612215146, 0.09103587759967835, 0.10891816323559378, 0.10194435977292216, 0.11741041640076799, 0.09731958463554569, 0.11569259740990256, 0.09172760405830249, 0.12658576482367212, 0.0969827019381233, 0.1305559848963227, 0.14314227629139464, 0.11712988998539497, 0.12628127033682646, 0.16161754643347215, 0.12319816671747996, 0.1094985525858212, 0.0710884498969816, 0.014677932751902656, 0.024002619831339667, 0.025514672659798454, 0.025109151681139474, 0.013936841116682253, 0.006094051028798231, 0.00898166961592739, 0.03371894792219665, 0.030646737845912653, 0.12543943398518187, 0.13407588109710045, 0.12481918401949765, 0.13739446828953517, 0.13042476809566228, 0.09419244572058016, 0.1520282515302248, 0.13258433690273974, 0.13234905720761636, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025698663769336827, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004016002588780321, 9.999999999998899e-05, 0.0017300928503239943, 0.07011029210635045, 0.08627188185638768, 0.07207919825810916, 0.07166853496807035, 0.06743270718453098, 0.07025676115795054, 0.08154830129675317, 0.07339260841046202, 0.08608227813770952, 0.3305584205325657, 0.3560538819209008, 0.3610108209173838, 0.34824303997235984, 0.35480441390084383, 0.3365716112817426, 0.36171472674562666, 0.3466435940672308, 0.3481008045259528, 0.07745173489115509, 0.08417613825726711, 0.0820998247954865, 0.07054579646834191, 0.08360149632338476, 0.06863239557201728, 0.07811179064133489, 0.07934048650187397, 0.07427413527699445, 0.12618867232346187, 0.1459106686038043, 0.13773914346676808, 0.1313661943295923, 0.13878864667072288, 0.1307774786914977, 0.1366908847171059, 0.13481364016993014, 0.12154726646270342, 0.20847203393607383, 0.20819827607751584, 0.2119903686842305, 0.19185639608082639, 0.21655725101457168, 0.1978829782688799, 0.21314108672229592, 0.23834044359829687, 0.24333288976294942, 0.15452054133601212, 0.1411867796074019, 0.15099598579185436, 0.1484001357080562, 0.1622021418091466, 0.1638744019274362, 0.16083313024485102, 0.16253033876067602, 0.16945143598039236, 0.1649066817343241, 0.16708060745646092, 0.16384388422578522, 0.14731669295686334, 0.15858285204273048, 0.16670368973115945, 0.17141663611058944, 0.17777420665989407, 0.165885115984864, 0.162517296847987, 0.1654243694215788, 0.17428227315012168, 0.17242311379329744, 0.1728988597195621, 0.1723396952549141, 0.16768917680294437, 0.15831207758602273, 0.1778579801172162, 0.30988674924976634, 0.22293247284006645, 0.2041842753969264, 0.17119959482162717, 0.13939978652205642, 0.27126194848739427, 0.16588487563075793, 0.15789934923338733, 0.16734599711507558, 0.22470378512679456, 0.18498962992348356, 0.16390618364598308, 0.15153598729065743, 0.2035714073518048, 0.1581546731823068, 0.19667054526529204, 0.19158101928316407, 0.19736430824580486, 0.17189741513855494, 0.18937107016868293, 0.17981420183396402, 0.17280485717488758, 0.17692644459806728, 0.16527832874621307, 0.17918689734419146, 0.1835186420954602, 0.18063631043473682, 0.055003333404982535, 0.059825495696923636, 0.05632747202552468, 0.061870069075095624, 0.05354019283897993, 0.05431015938987349, 0.05938635057889008, 0.05532180083516758, 0.06293457937080515]}, "mutation_prompt": null}
{"id": "7ca6ec2a-ff68-41ca-96be-edd4c445586b", "solution": "import numpy as np\n\nclass HybridDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.evaluations = 0\n\n    def evaluate(self, func, candidate):\n        if self.evaluations < self.budget:\n            fitness = func(candidate)\n            self.evaluations += 1\n            return fitness\n        else:\n            return np.inf\n\n    def adapt_opposition(self, candidate):\n        return self.lower_bound + self.upper_bound - candidate\n\n    def __call__(self, func):\n        # Initial evaluation of the population\n        for i in range(self.pop_size):\n            self.fitness[i] = self.evaluate(func, self.population[i])\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover = np.random.rand(self.dim) < self.CR\n                if not np.any(crossover):\n                    crossover[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = self.evaluate(func, trial)\n\n                # Replacement\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive opposition-based learning\n                opposition = self.adapt_opposition(self.population[i])\n                opposition_fitness = self.evaluate(func, opposition)\n                if opposition_fitness < self.fitness[i]:\n                    self.population[i] = opposition\n                    self.fitness[i] = opposition_fitness\n            \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "HybridDEOptimizer", "description": "Hybrid Differential Evolution with Adaptive Opposition-Based Learning for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f624fe72-72dd-4c87-a763-7ae8ebc516b4", "metadata": {"aucs": [0.38402409019366734, 0.39214302830290115, 0.39404050800480084, 0.4010980682185231, 0.4076694317615245, 0.38927061129169527, 0.3799921938502, 0.3696531533543016, 0.4231619808458422, 0.15512323646031145, 0.14728809296769718, 0.19179844786106004, 0.12805632864502314, 0.1250114381232017, 0.13274781627493626, 0.16022584185191646, 0.1360542590571756, 0.16337001888046576, 0.07705629128137392, 0.08690489248915145, 0.08962050946058808, 0.07345406010644762, 0.0837760678979601, 0.07449633644958353, 0.09656607981441834, 0.07475278533209473, 0.08486806181846518, 0.06710008026707859, 0.07691359252615004, 0.08031379000632044, 0.07123616280803635, 0.0764441841826099, 0.06539722251573854, 0.06033105027780161, 0.07013710596027867, 0.07115920700568734, 0.8047679120752979, 0.8712251308777919, 0.8544725203711101, 0.9366899466940817, 0.9220333343836342, 0.7882549686709484, 0.835456324128386, 0.9091108562354272, 0.836823792268361, 0.16572440514408937, 0.1538055723804358, 0.15431947432376814, 0.14473466930621748, 0.1596274855919675, 0.19503524763741698, 0.16205544244967574, 0.156455931346417, 0.1674352152716485, 0.2456525493208086, 0.21773915804435806, 0.218495854635139, 0.24853557479284782, 0.24261775472127678, 0.24235885118601264, 0.23836145828540556, 0.23202626187585962, 0.2247899107150605, 0.09007491612215146, 0.09103587759967835, 0.10891816323559378, 0.10194435977292216, 0.11741041640076799, 0.09731958463554569, 0.11569259740990256, 0.09172760405830249, 0.12658576482367212, 0.0969827019381233, 0.1305559848963227, 0.14314227629139464, 0.11712988998539497, 0.12628127033682646, 0.16161754643347215, 0.12319816671747996, 0.1094985525858212, 0.0710884498969816, 0.014677932751902656, 0.024002619831339667, 0.025514672659798454, 0.025109151681139474, 0.013936841116682253, 0.006094051028798231, 0.00898166961592739, 0.03371894792219665, 0.030646737845912653, 0.12543943398518187, 0.13407588109710045, 0.12481918401949765, 0.13739446828953517, 0.13042476809566228, 0.09419244572058016, 0.1520282515302248, 0.13258433690273974, 0.13234905720761636, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025698663769336827, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004016002588780321, 9.999999999998899e-05, 0.0017300928503239943, 0.07011029210635045, 0.08627188185638768, 0.07207919825810916, 0.07166853496807035, 0.06743270718453098, 0.07025676115795054, 0.08154830129675317, 0.07339260841046202, 0.08608227813770952, 0.3305584205325657, 0.3560538819209008, 0.3610108209173838, 0.34824303997235984, 0.35480441390084383, 0.3365716112817426, 0.36171472674562666, 0.3466435940672308, 0.3481008045259528, 0.07745173489115509, 0.08417613825726711, 0.0820998247954865, 0.07054579646834191, 0.08360149632338476, 0.06863239557201728, 0.07811179064133489, 0.07934048650187397, 0.07427413527699445, 0.12618867232346187, 0.1459106686038043, 0.13773914346676808, 0.1313661943295923, 0.13878864667072288, 0.1307774786914977, 0.1366908847171059, 0.13481364016993014, 0.12154726646270342, 0.20847203393607383, 0.20819827607751584, 0.2119903686842305, 0.19185639608082639, 0.21655725101457168, 0.1978829782688799, 0.21314108672229592, 0.23834044359829687, 0.24333288976294942, 0.15452054133601212, 0.1411867796074019, 0.15099598579185436, 0.1484001357080562, 0.1622021418091466, 0.1638744019274362, 0.16083313024485102, 0.16253033876067602, 0.16945143598039236, 0.1649066817343241, 0.16708060745646092, 0.16384388422578522, 0.14731669295686334, 0.15858285204273048, 0.16670368973115945, 0.17141663611058944, 0.17777420665989407, 0.165885115984864, 0.162517296847987, 0.1654243694215788, 0.17428227315012168, 0.17242311379329744, 0.1728988597195621, 0.1723396952549141, 0.16768917680294437, 0.15831207758602273, 0.1778579801172162, 0.30988674924976634, 0.22293247284006645, 0.2041842753969264, 0.17119959482162717, 0.13939978652205642, 0.27126194848739427, 0.16588487563075793, 0.15789934923338733, 0.16734599711507558, 0.22470378512679456, 0.18498962992348356, 0.16390618364598308, 0.15153598729065743, 0.2035714073518048, 0.1581546731823068, 0.19667054526529204, 0.19158101928316407, 0.19736430824580486, 0.17189741513855494, 0.18937107016868293, 0.17981420183396402, 0.17280485717488758, 0.17692644459806728, 0.16527832874621307, 0.17918689734419146, 0.1835186420954602, 0.18063631043473682, 0.055003333404982535, 0.059825495696923636, 0.05632747202552468, 0.061870069075095624, 0.05354019283897993, 0.05431015938987349, 0.05938635057889008, 0.05532180083516758, 0.06293457937080515]}, "mutation_prompt": null}
