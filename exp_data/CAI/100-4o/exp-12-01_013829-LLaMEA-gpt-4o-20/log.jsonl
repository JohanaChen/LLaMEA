{"id": "06230136-18bd-4919-9dd3-c2b3c91a31a9", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(5, 10 * dim)\n        self.F_min, self.F_max = 0.4, 0.9\n        self.CR_min, self.CR_max = 0.1, 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n\n    def evaluate(self, func, individual):\n        if self.eval_count < self.budget:\n            self.eval_count += 1\n            return func(individual)\n        else:\n            return np.inf\n\n    def adapt_parameters(self, generation):\n        return (\n            self.F_min + (self.F_max - self.F_min) * np.sin(generation * np.pi / (2 * self.budget)),\n            self.CR_min + (self.CR_max - self.CR_min) * np.cos(generation * np.pi / (2 * self.budget))\n        )\n\n    def __call__(self, func):\n        generation = 0\n        while self.eval_count < self.budget:\n            if generation == 0:\n                for i in range(self.population_size):\n                    self.fitness[i] = self.evaluate(func, self.population[i])\n            new_population = np.copy(self.population)\n            F, CR = self.adapt_parameters(generation)\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant_vector = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < CR\n                if not np.any(crossover):\n                    crossover[np.random.randint(0, self.dim)] = True\n                trial_vector = np.where(crossover, mutant_vector, self.population[i])\n                trial_fitness = self.evaluate(func, trial_vector)\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n            self.population = new_population\n            generation += 1\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive Crossover and Mutation Rates for Efficient Exploration-Exploitation Balance.", "configspace": "", "generation": 0, "fitness": 0.37390244333853284, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8145616382198243, 0.7927907789137204, 0.8180693269304513, 0.8048896406493351, 0.8193368381171846, 0.8038479008030972, 0.8161731084134604, 0.7986410381892228, 0.7943210535918845, 0.6559376752435804, 0.6389847544841246, 0.6444029881852917, 0.6556557087861173, 0.6768862294686542, 0.6582839495509972, 0.6370769602440813, 0.6418207863596479, 0.6548594316024967, 0.12720114981291608, 0.12472499250488911, 0.142814500300802, 0.12380562774713, 0.10515400233872019, 0.12501144595817382, 0.12106423969518143, 0.11775755218407158, 0.14422809158685446, 0.11108318254773164, 0.10681611796834112, 0.11336379507442729, 0.11814367225210876, 0.14018531050520833, 0.11388687827430499, 0.10446347223560426, 0.11208601100273641, 0.11005513943964829, 0.7349228305762991, 0.9129544162685361, 0.9190365337483187, 0.9014819234978632, 0.8175698388358944, 0.8822064083761769, 0.8459477264390396, 0.7784469641574803, 0.8288885303318794, 0.28779527714333386, 0.3396716797441707, 0.3891460579217749, 0.43369108322819305, 0.1320017754699374, 0.200230725996291, 0.374993289859329, 0.21972570632473432, 0.24822860148080728, 0.7957065742766762, 0.7842005579712734, 0.7873011984107365, 0.8128158386782897, 0.7841972043448988, 0.7982137383282987, 0.7501557915101764, 0.7742702448104521, 0.794459387519435, 0.16105404606250373, 0.16610130982445337, 0.15362405719424643, 0.1952074966074301, 0.17221294577686097, 0.22794511636330794, 0.19882475743843575, 0.1965592704585719, 0.19975659968542692, 0.1446006111958199, 0.15710721845112896, 0.1691345796347179, 0.2026006715437818, 0.14897434102462825, 0.23619480145783422, 0.15078377565171963, 0.17705746512033949, 0.20085275654596702, 0.24521265118801883, 0.47165368554945575, 0.5089477203910805, 0.4656178222333692, 0.39628917439197653, 0.38838342751697463, 0.4870382026641983, 0.17438907210329802, 0.48706247430812233, 0.6134096435243293, 0.6027047826745775, 0.5977817808193062, 0.5291028495631412, 0.5818202428464266, 0.641575990740946, 0.5657652021677656, 0.6413396886267251, 0.6293516564984472, 0.08873418370205799, 0.11152151878703298, 0.17033344105382953, 0.2626182468924342, 0.20368452138871052, 0.17107655911561492, 0.17096539046835857, 0.16454594454679006, 0.16530325989583694, 0.35417286596938324, 0.35699948280555993, 0.36052983160155694, 0.3754280712149939, 0.3362667896549151, 0.33979342997853557, 0.3762608639255055, 0.32755968835095495, 0.3266122299042524, 0.7132629952218422, 0.7515539447722152, 0.7146764840200306, 0.7064251912382149, 0.7206845285332997, 0.7628126004379832, 0.6959603875633043, 0.7149970381549695, 0.7001580612458405, 0.11670644433416166, 0.10021177078301857, 0.09500626571126958, 0.1090033861387274, 0.09945764909015742, 0.11478436050574514, 0.09788315107219481, 0.09769031561778774, 0.11270975485235557, 0.20811305567367244, 0.14416471471213754, 0.1292134973677599, 0.42215649802049215, 0.15687618848449003, 0.15400273346084392, 0.1348843994763974, 0.14103268761596788, 0.17635823153365127, 0.4484713199250061, 0.4613571476702738, 0.48000380932322373, 0.4389437925172509, 0.4639326116467021, 0.45286610603054855, 0.4665961583023913, 0.4854345989257085, 0.4810781888754181, 0.3535114918396913, 0.3696404004349151, 0.39058000857028485, 0.36862883202038366, 0.33260784009296207, 0.3738873508392593, 0.3861329249096277, 0.38711268862539006, 0.42248208803887743, 0.19662952923942567, 0.23108221244298532, 0.19595324257193014, 0.20184691809157285, 0.2048097671793747, 0.1945314409088308, 0.19316935302150506, 0.20153057699052468, 0.19956256179000997, 0.1875951307107554, 0.2647344917446467, 0.22113791028515029, 0.21620326114888921, 0.1940871392011655, 0.26814957794469385, 0.19755445308152975, 0.44519149645539124, 0.23484167702982872, 0.8266454277346609, 0.17585780615987756, 0.7757236907633427, 0.779242210061934, 0.1962724719868134, 0.7851153512388269, 0.6692299460298664, 0.16462872232916415, 0.1819751126522534, 0.759171241741122, 0.734283841929071, 0.20400603164641629, 0.2500493434969404, 0.2846034699387956, 0.663164476582463, 0.20577843454577627, 0.2010606302011121, 0.20873855915901118, 0.1945682494253399, 0.1916899289687939, 0.2069418257108946, 0.17225537251984768, 0.17440709302575141, 0.17718238215642013, 0.18162843314493016, 0.1817535689830544, 0.19121074790281334, 0.08483815248858695, 0.09021994801620081, 0.08298032967001667, 0.07956260045159647, 0.08040936538999177, 0.08276685714495047, 0.09182915753413967, 0.08338036910377322, 0.08200307568991361]}, "mutation_prompt": null}
{"id": "c3300b72-0e26-490f-9d9c-3feee7b3d09a", "solution": "import numpy as np\n\nclass EnhancedHybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(5, 10 * dim)\n        self.F_min, self.F_max = 0.4, 0.9\n        self.CR_min, self.CR_max = 0.1, 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.eval_count = 0\n        self.memory = np.copy(self.population)  # Initialize memory for learning\n\n    def evaluate(self, func, individual):\n        if self.eval_count < self.budget:\n            self.eval_count += 1\n            return func(individual)\n        else:\n            return np.inf\n\n    def adapt_parameters(self, generation):\n        learning_factor = np.exp(-generation / (0.5 * self.budget))  # Decay factor\n        return (\n            self.F_min + learning_factor * (self.F_max - self.F_min),\n            self.CR_min + (self.CR_max - self.CR_min) * np.cos(generation * np.pi / (2 * self.budget))\n        )\n\n    def __call__(self, func):\n        generation = 0\n        while self.eval_count < self.budget:\n            if generation == 0:\n                for i in range(self.population_size):\n                    self.fitness[i] = self.evaluate(func, self.population[i])\n            new_population = np.copy(self.population)\n            F, CR = self.adapt_parameters(generation)\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant_vector = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < CR\n                if not np.any(crossover):\n                    crossover[np.random.randint(0, self.dim)] = True\n                trial_vector = np.where(crossover, mutant_vector, self.population[i])\n                trial_fitness = self.evaluate(func, trial_vector)\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                    self.memory[i] = trial_vector  # Update memory with successful trial\n                else:\n                    trial_vector = self.memory[i]  # Use memory to guide search if trial fails\n                    trial_fitness = self.evaluate(func, trial_vector)\n                    if trial_fitness < self.fitness[i]:\n                        new_population[i] = trial_vector\n                        self.fitness[i] = trial_fitness\n            self.population = new_population\n            generation += 1\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "EnhancedHybridDifferentialEvolution", "description": "Enhanced Hybrid Differential Evolution with Memory-based Learning and Adaptive Mutation Scaling for Improved Convergence.", "configspace": "", "generation": 1, "fitness": 0.165364586359393, "feedback": "", "error": "", "parent_id": "06230136-18bd-4919-9dd3-c2b3c91a31a9", "metadata": {"aucs": [0.3190292431786276, 0.3018474740919336, 0.3169828206085141, 0.37575845765043836, 0.36598858931367495, 0.36788939755082206, 0.3748337654288171, 0.36167737197459715, 0.35435073835679387, 0.10708249036248141, 0.11323574226961586, 0.10978983090306516, 0.09183859957553797, 0.10791713771465239, 0.09318754576521338, 0.09768097536041187, 0.10629135561776348, 0.10532600992187457, 0.0775348536798639, 0.07329004430562969, 0.09403936659177614, 0.0840234678852112, 0.06951855858558975, 0.06675177165612334, 0.07104452777512393, 0.07581529102884488, 0.08588477971039032, 0.05714957593434444, 0.055389193174120166, 0.057014394928944556, 0.07793193882166904, 0.06431521870063284, 0.08228867949656982, 0.06125771020933912, 0.05786377687505684, 0.057823431083030674, 0.9224837780047737, 0.958653954250896, 0.9514514911742681, 0.8783678169444591, 0.9266163493866175, 0.9360102225359757, 0.8934384373352158, 0.9545829616992059, 0.8982938515697683, 0.15185711701111593, 0.1411830241585168, 0.15598039122064034, 0.16867271023322772, 0.14146642380784125, 0.13829483306264534, 0.15532235666623107, 0.14303333022061837, 0.15090663877583632, 0.19158625061615586, 0.22532424460399048, 0.19137840801257378, 0.19603858074565128, 0.2161821971600666, 0.1797349518306628, 0.2430756528145257, 0.1887864937515985, 0.199702469991195, 0.07531873224231767, 0.07394280884522797, 0.072380853964641, 0.08750243302448601, 0.0759805258006423, 0.07140405139455308, 0.07534818107397545, 0.09641700743168224, 0.08634042355150373, 0.09685787261174938, 0.10391583196556908, 0.09928130862013751, 0.0639661986000799, 0.05412505139080004, 0.06331565785685489, 0.0924062501942462, 0.06922099027481021, 0.08072434167252762, 0.004928327489472806, 0.003020767437779237, 0.0028213814104159907, 0.01537147466525024, 0.0019105887109420738, 9.999999999998899e-05, 0.034625669663311265, 0.0022307297126681336, 0.01215029692910452, 0.1140408575319325, 0.08489021035908395, 0.09704678914169695, 0.07838043287965335, 0.07584502346355004, 0.06561424274023941, 0.10071981871859337, 0.14093187613525204, 0.11626528647965428, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04475379141707303, 0.046610049295445766, 0.06607018258622388, 0.05214668999782157, 0.051714306841481594, 0.06685838822472634, 0.06400136553638336, 0.06336226823694979, 0.08032995181267966, 0.2979353550395971, 0.2896610604973795, 0.29320137612431585, 0.30070292652765673, 0.29436132497578305, 0.3222950799596095, 0.31824967453825626, 0.329545465196428, 0.2844582707257697, 0.06555793697615242, 0.06819302530108284, 0.07703503838797865, 0.0703213718303265, 0.06958601589026825, 0.061064509462639416, 0.05957080042428786, 0.06140173620304157, 0.06243596976161048, 0.15143664099993914, 0.13500064847627513, 0.14840107610779618, 0.12740607357961398, 0.14122078507887403, 0.14021255813289646, 0.13251625876864292, 0.12280596819672951, 0.14089339677964163, 0.1966841639723319, 0.19593653404369316, 0.20004294689234026, 0.1847369449683378, 0.185961834506844, 0.18071954820017544, 0.20256356400122466, 0.20896194833031878, 0.22570293409733033, 0.12541788386847352, 0.1380303970986272, 0.15487949837669535, 0.14023744654373327, 0.1304341979873045, 0.12681460930180422, 0.14466564944023774, 0.16224057390386426, 0.13466308724631748, 0.1603006294413888, 0.18135908228944153, 0.1608667649714216, 0.15989229069193078, 0.18049841873422223, 0.17084619771537168, 0.1709211551926606, 0.15645668421419556, 0.16556876487340466, 0.1556495674585613, 0.15629586488784375, 0.16269109807157112, 0.1598049653949869, 0.15299423590912575, 0.16504134476149468, 0.1610979547044894, 0.15205644105226035, 0.15963196644780242, 0.1550340487429812, 0.3711075748536691, 0.1595360547903043, 0.15721595778074238, 0.15695164282267782, 0.20579906474870102, 0.12595691810644605, 0.13609904907723835, 0.14451633109832895, 0.19689271132656427, 0.1788999123414542, 0.16538660829275997, 0.20134031646276573, 0.17454843828422506, 0.1387970732548689, 0.17769454662007322, 0.2263972278501276, 0.19781546215810075, 0.18694646243825697, 0.17329788135709223, 0.1722692805877054, 0.17328623026698808, 0.192365250036036, 0.1742984685903095, 0.16693793209790186, 0.17518742373318785, 0.1767613959000719, 0.06309368052281894, 0.06205094194120686, 0.060373750267571635, 0.05623034362333057, 0.07294075611018436, 0.0544797557105039, 0.06601573414685846, 0.05449298651536194, 0.06743755603249335]}, "mutation_prompt": null}
