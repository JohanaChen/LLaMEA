{"id": "f7d39e39-cf67-461b-8550-798495412485", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 40\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5  # inertia weight\n        self.f = 0.5  # differential weight\n        self.cr = 0.9 # crossover probability\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def logistic_map(self, x):\n        return 4 * x * (1 - x)\n\n    def chaotic_sequence(self, length, seed):\n        x = seed\n        sequence = []\n        for _ in range(length):\n            x = self.logistic_map(x)\n            sequence.append(x)\n        return np.array(sequence)\n\n    def __call__(self, func):\n        chaotic_sequence = self.chaotic_sequence(self.swarm_size * self.dim, seed=0.7).reshape(self.swarm_size, self.dim)\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                score = func(self.positions[i])\n                self.evaluations += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.positions[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.positions[i]\n\n            for i in range(self.swarm_size):\n                r1 = chaotic_sequence[i]\n                r2 = chaotic_sequence[(i + 1) % self.swarm_size]\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.personal_best_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.global_best_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            if self.evaluations < self.budget:\n                for i in range(self.swarm_size):\n                    a, b, c = np.random.choice(self.swarm_size, 3, replace=False)\n                    mutant = self.positions[a] + self.f * (self.positions[b] - self.positions[c])\n                    trial = np.where(np.random.rand(self.dim) < self.cr, mutant, self.positions[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < self.personal_best_scores[i]:\n                        self.positions[i] = trial\n                        self.personal_best_scores[i] = trial_score\n                        if trial_score < self.global_best_score:\n                            self.global_best_score = trial_score\n                            self.global_best_position = trial\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSO_DE", "description": "Hybrid Particle Swarm with Differential Evolution integrating chaotic maps for effective exploration and exploitation balance.", "configspace": "", "generation": 0, "fitness": 0.23971219950455513, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7496913797420357, 0.7069964248478979, 0.7861469463921688, 0.6874619984066792, 0.7871571143487853, 0.6872826524081148, 0.7686856760034412, 0.7535795799702039, 0.37968017188417, 0.4855531967261465, 0.2347618791026611, 0.2985835928376831, 0.3674086920868175, 0.04173322586165762, 0.47052373122837865, 0.35577855185065643, 0.4260712384708013, 0.26449750158091845, 0.10646228419206871, 0.11487110028515857, 0.07550984904505498, 0.10823325648279203, 0.13228410550852387, 0.14421555870054004, 0.10795864700665248, 0.10860226656187244, 0.1086566232984747, 0.10339863955415307, 0.11878727717436521, 0.10878223070632087, 0.1195000346496341, 0.094488055114477, 0.09677060305243335, 0.12903365070464912, 0.08809126871860662, 0.09385707654044906, 0.9745310263870925, 0.979143087703491, 0.9614958411544481, 0.9813364400303975, 0.9821057840430417, 0.9606215161130031, 0.9735117005927251, 0.9744849772718346, 0.9672753395682467, 0.44480301587432325, 0.19662235795596916, 0.25552624794041834, 0.19006752201913024, 0.21398007229023686, 0.2652189025999203, 0.27198068288826593, 0.27767789551603483, 0.1955480921070003, 0.22386331351836908, 0.30013409613256015, 0.2197562287154099, 0.35156882706327364, 0.3120731173960083, 0.1791423059052547, 0.2307251671480126, 0.23476217272983002, 0.2299110837178121, 0.14409243320318077, 0.14649253157784137, 0.17565523413295325, 0.1022997138149756, 0.14150126319637113, 0.15855631948949245, 0.16747767111419853, 0.25359489159166393, 0.27765983714303, 0.14904636881970423, 0.14162677464593687, 0.13381410585711873, 0.10857830463007245, 0.1569226839825535, 0.12683730548513705, 0.14567896969207883, 0.13349598849941247, 0.18700498183450165, 9.999999999998899e-05, 0.06843907621338385, 0.000661176427706911, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08917371396155305, 9.999999999998899e-05, 0.04797753386361581, 0.05003111469976507, 0.06333302579442679, 0.07642673988271964, 0.05759026782839427, 0.07777495144908442, 0.04204220912850609, 0.0813206864425241, 0.029443545983593333, 0.08570735882909297, 0.1138899000910234, 0.056923626240465874, 0.02571827089167833, 0.09608419782041633, 0.06694773791350728, 0.11210802971387124, 0.08238488215024975, 0.05518141119633113, 0.13519681395533567, 0.054942089294737206, 0.0894349567487589, 0.12161260579022015, 0.1399470001474512, 0.0871195351856926, 0.10082688454152189, 0.07398617829309095, 0.12546274791613976, 0.04502987832798644, 0.4308185598379749, 0.3114438103933237, 0.4455127669458281, 0.4136568147528247, 0.424892441373974, 0.493333071518689, 0.49301397073981856, 0.43843862545744616, 0.4860705871939074, 0.0757928382917411, 0.10003411720293776, 0.08291994558602345, 0.096348902829414, 0.08427841480458043, 0.10423461976266113, 0.08937292944807929, 0.11395925295113107, 0.1340509774426144, 0.18650702191714785, 0.15619781941390376, 0.1378580599080249, 0.11713145113953782, 0.11935044072038781, 0.1658464171859403, 0.1660132670385368, 0.1460521207273736, 0.22392652198838847, 0.21345100661579275, 0.23378122371987797, 0.28308863714996424, 0.3075890557160259, 0.2692172111743951, 0.3652457997487285, 0.2789000347937449, 0.3082808378736225, 0.233155843954597, 0.21322345599891313, 0.1687382823165835, 0.29258068491023737, 0.2711024880161248, 0.25353789632416035, 0.22072009763920686, 0.18099552660547225, 0.24655974063886477, 0.17115106542715042, 0.19666677611195194, 0.1939732906869971, 0.18837864897832024, 0.19065898659054215, 0.20554306085384855, 0.21166444873232704, 0.20119396424495994, 0.24350202988112146, 0.19505034777356245, 0.18029045918975517, 0.18656824745726397, 0.18805996457881247, 0.18348474495524947, 0.18789030256196315, 0.17842901009099732, 0.19348370963174422, 0.21195351981631894, 0.17831414587076633, 0.5512876842859749, 0.16492870031345996, 0.2505395400621252, 0.7916305879573651, 0.19780347170917756, 0.16673042395186255, 0.3071846618933902, 0.1861086216927068, 0.20499062141831004, 0.4933638395244542, 0.2100275979095504, 0.48327458488498165, 0.20366433470139989, 0.16703023826033792, 0.267643956595788, 0.10414669087672568, 0.15827545567136125, 0.44272423415120243, 0.18730408597722215, 0.18697179815161957, 0.18629770135711743, 0.18516649123847329, 0.18356216715007156, 0.171987638615546, 0.19045777462874014, 0.17673660429908034, 0.2215211766321099, 0.07653377875359979, 0.08779239223204949, 0.0777170293548346, 0.0743298810177716, 0.08279521892060371, 0.0772455953143828, 0.06074455917925203, 0.08702072937784922, 0.08629849086061259]}, "mutation_prompt": null}
{"id": "ff0f09e0-1572-411f-bc31-e31a7c7c531b", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 40\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.9  # adaptive inertia weight\n        self.f = 0.5  # differential weight\n        self.cr = 0.9  # crossover probability\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def logistic_map(self, x):\n        return 4 * x * (1 - x)\n\n    def chaotic_sequence(self, length, seed):\n        x = seed\n        sequence = []\n        for _ in range(length):\n            x = self.logistic_map(x)\n            sequence.append(x)\n        return np.array(sequence)\n\n    def __call__(self, func):\n        chaotic_sequence = self.chaotic_sequence(self.swarm_size * self.dim, seed=0.7).reshape(self.swarm_size, self.dim)\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                score = func(self.positions[i])\n                self.evaluations += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.positions[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.positions[i]\n\n            for i in range(self.swarm_size):\n                r1 = chaotic_sequence[i]\n                r2 = chaotic_sequence[(i + 1) % self.swarm_size]\n                self.w = 0.9 - (0.5 * (self.evaluations / self.budget))  # Adaptive inertia\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.personal_best_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.global_best_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            if self.evaluations < self.budget:\n                for i in range(self.swarm_size):\n                    if self.evaluations % (self.budget // 4) == 0:  # Chaotic sequence reinitialization\n                        chaotic_sequence = self.chaotic_sequence(self.swarm_size * self.dim, seed=np.random.rand()).reshape(self.swarm_size, self.dim)\n                    a, b, c = np.random.choice(self.swarm_size, 3, replace=False)\n                    mutant = self.positions[a] + self.f * (self.positions[b] - self.positions[c])\n                    trial = np.where(np.random.rand(self.dim) < self.cr, mutant, self.positions[i])\n                    trial_score = func(trial)\n                    self.evaluations += 1\n                    if trial_score < self.personal_best_scores[i]:\n                        self.positions[i] = trial\n                        self.personal_best_scores[i] = trial_score\n                        if trial_score < self.global_best_score:\n                            self.global_best_score = trial_score\n                            self.global_best_position = trial\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSO_DE", "description": "Enhanced Hybrid PSO-DE with adaptive inertia weight and chaotic sequence reinitialization for improved convergence.", "configspace": "", "generation": 1, "fitness": 0.2100858646593566, "feedback": "", "error": "", "parent_id": "f7d39e39-cf67-461b-8550-798495412485", "metadata": {"aucs": [0.49336200227223104, 0.4635248193611391, 0.4101459649542235, 0.3645992031987777, 0.5404956408706041, 0.4831589763195552, 0.5042828017628052, 0.5474848558239996, 0.4920646031666741, 0.2006479934735218, 0.19950865407892715, 0.2169106803520947, 0.17335271973970923, 0.15979541117684493, 0.13847525040944453, 0.1352503048401542, 0.15091201853582448, 0.1983773853291425, 0.08307057707758903, 0.110996384847172, 0.08638228039283857, 0.10774756115787298, 0.09138070232180184, 0.0869325900920358, 0.19442302371339604, 0.09226008365756244, 0.10842876966827464, 0.11100837951354459, 0.08039968105084738, 0.08113950792193159, 0.11520051715492086, 0.07490900126588618, 0.06779862339802822, 0.11660379108098873, 0.09187930402235778, 0.07852513556366558, 0.9803356343295164, 0.9802121919449815, 0.9798448495415989, 0.9698584666304568, 0.9817848283479772, 0.9645905943709592, 0.9703612336974902, 0.967998751613443, 0.9810905739659693, 0.29300507144052423, 0.21689200173618117, 0.20020455182008667, 0.28281273881770874, 0.18147418413235483, 0.3013530944784436, 0.22313691981357264, 0.20794473113515222, 0.25570131314947386, 0.20789486799343027, 0.2032104439749084, 0.2756227607246634, 0.20301102088969303, 0.5762187398339795, 0.17672565418287545, 0.20942527902756747, 0.21350249979978186, 0.22087525793428897, 0.12861722235597284, 0.12686190313027979, 0.09425438884070703, 0.17573984962177547, 0.09081549557207724, 0.0821927169805684, 0.11572642717658632, 0.12545613760621532, 0.10867789465023503, 0.13353449077866775, 0.060816840546737305, 0.07402611056052533, 0.10196464886145806, 0.07549850161044447, 0.11824154305506285, 0.13057033776054983, 0.07683407105988627, 0.09271964793358656, 9.999999999998899e-05, 9.999999999998899e-05, 0.030245785875829045, 0.007273841569596207, 0.016310657094039782, 0.007958563405576546, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1176410181800418, 0.056124464480111436, 0.060610826455387956, 0.08880847495056698, 0.07615629165701598, 0.06771588896150516, 0.07927452965914872, 0.09407318880951865, 0.11213275757559948, 0.007705413231756553, 0.005538576810948159, 0.02754121512264629, 0.0602631050447926, 0.030175162754231155, 0.053951736508410564, 0.040745621712404145, 0.061886770534982705, 0.020002044084944437, 0.030171726477176364, 0.11989854958142021, 0.041935069333901454, 0.0941207195552266, 0.10314520521718618, 0.09261787814025624, 0.05146485509625631, 0.04527125225290696, 0.05576584364104853, 0.3630936324858107, 0.3641729906003095, 0.4110544342194873, 0.4421301452471651, 0.38400030200882085, 0.41094103912323954, 0.44599983546580646, 0.3468465866104655, 0.3541737700781922, 0.08485154935837258, 0.09258380699126811, 0.09779729662711234, 0.09729902732244577, 0.11679428643798984, 0.09945251410468847, 0.09075761095972301, 0.0839149700828351, 0.07943031527063871, 0.14185438839890763, 0.17515503815844036, 0.19127231951615697, 0.1385762270112888, 0.15718118684855054, 0.15770721267815202, 0.1807503247671821, 0.18372228642712507, 0.1829252593815771, 0.22681563795096948, 0.24905387911789612, 0.25410071522405375, 0.2554960296865565, 0.270115432422247, 0.28784968470640127, 0.3058176128850476, 0.22719808151309084, 0.26644665396311085, 0.23856475940768418, 0.19588378568706177, 0.2187104615419384, 0.1591176389116552, 0.17419700318507325, 0.20028537864312135, 0.2441102584029221, 0.21429811868606752, 0.19419519511868122, 0.188719602151329, 0.1861144288765062, 0.2040579019383164, 0.19169405778487558, 0.18166215180646117, 0.18002509897395635, 0.18184766112739603, 0.207039715396781, 0.1834116258389744, 0.17684310463418607, 0.1921165289680551, 0.18331790912118073, 0.17772103869739841, 0.17611707493955964, 0.18450920534662352, 0.19823279544878636, 0.17240788601160262, 0.16724502713061762, 0.15638132818515005, 0.49963926126885894, 0.14798847693648387, 0.5286169441542974, 0.19272781947335726, 0.1808970979885015, 0.16555111062681083, 0.16674152153927824, 0.6187817170796464, 0.5840963526121368, 0.16526836171547998, 0.31888043679431466, 0.19054807314115962, 0.1557790015746343, 0.16622717826228695, 0.2031041850199765, 0.2034144608887999, 0.35414077014208956, 0.1962840281741951, 0.1923084516748219, 0.21600860245035747, 0.1996626270057119, 0.19009314911067854, 0.19593744406460423, 0.17553211314446693, 0.1853397893369927, 0.18714039163966012, 0.0931257624179892, 0.08160390191066258, 0.07670083356077206, 0.07560693555279596, 0.06661328351382823, 0.08155748891394343, 0.09220817846842966, 0.06956204178184366, 0.06860143209883174]}, "mutation_prompt": null}
