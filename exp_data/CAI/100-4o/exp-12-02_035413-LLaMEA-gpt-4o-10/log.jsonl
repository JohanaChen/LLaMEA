{"id": "7d0b6e80-7830-410c-851a-e8d0cc6b0306", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(4 + int(3 * np.log(dim)), budget)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def __call__(self, func):\n        evaluations = 0\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            if evaluations < self.budget:\n                self.fitness[i] = func(self.population[i])\n                evaluations += 1\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Mutation\n                indices = [index for index in range(self.population_size) if index != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial_vector = np.where(crossover_mask, mutant_vector, self.population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n\n        # Return the best solution found\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index], self.fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Dynamic Population Size for Efficient Black Box Optimization", "configspace": "", "generation": 0, "fitness": 0.26228425265949146, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6914870521716243, 0.9329016183419243, 0.9336044340135519, 0.9230528264965719, 0.22085283142799295, 0.7830117808051558, 0.9414850098282403, 0.9511876831174408, 0.9214018647229764, 0.8932115944281486, 9.999999999998899e-05, 9.999999999998899e-05, 0.03058775344378406, 0.7556803082715359, 0.884055772047265, 0.6495970408506164, 9.999999999998899e-05, 0.854689053730084, 0.159925243362396, 0.14738686728697614, 0.11847522577482328, 0.06918626443058451, 0.187670349167665, 0.06668889465987027, 0.12398131855820427, 0.10822007740858686, 0.09557625079466603, 0.08681170621309542, 0.13303153571848758, 0.07782338784187981, 0.11249906125560971, 0.16310761498937154, 0.11791363648225617, 0.15617789869163257, 0.08255519975294012, 0.07471444174420971, 0.9638625572929089, 0.09939673304780039, 0.9652392484554184, 0.9867216653414345, 0.9792876189347306, 0.9927516839340887, 0.9753624211732596, 0.9906187691957701, 0.9839766458601398, 0.6608674342144922, 0.36592778722821395, 0.5909651418838116, 0.04443797581046671, 0.15376495927254274, 0.15056211177190038, 0.4730411752081751, 0.2630804757520617, 0.06449097381626323, 0.3630567934157314, 0.23973235160621875, 0.12627486953056688, 0.3881689855677821, 0.09029771311255386, 0.24190064422323299, 0.11025069005465116, 0.08152527608681759, 0.17575797080452704, 0.1353330840198982, 0.1930855866907626, 0.16339341882692393, 0.39839335758796457, 0.1299580525759515, 9.999999999998899e-05, 9.999999999998899e-05, 0.1815764275674776, 0.14995696412809034, 0.19030246053382271, 0.010170033834285053, 0.1581504148625843, 0.14434998984276803, 0.13215458677552794, 0.1358485652218322, 0.18132994080756304, 0.17708905580131473, 0.14625384141378706, 9.999999999998899e-05, 0.011434591824942997, 9.999999999998899e-05, 0.002476917896963471, 9.999999999998899e-05, 0.03992623805828621, 0.02425736941692902, 0.011452594065731736, 0.13648459004624947, 0.17138295467706488, 0.0403639138219285, 0.30547190293843474, 0.10060675784991091, 0.03533928075831172, 0.02209693256638079, 0.16663258703099204, 0.10312823766411472, 0.196789689328716, 0.23099097175831462, 0.035171893074227634, 0.1300315992482196, 0.0853228566688713, 0.11437310257518751, 0.0855617738484139, 0.1425344373854327, 0.21788266411534218, 0.11238592419581528, 0.3050252608399604, 0.1227289076882222, 0.2081011656044951, 0.15842467191966914, 0.26951526347127386, 0.2578289913363724, 0.06127347627382673, 0.17625313158877565, 0.08600215110796638, 0.5525796860530159, 0.5628027971235132, 0.5344575022113632, 0.4543089926958973, 0.5313552104649197, 0.544053641479729, 0.5173548128928988, 0.5598296331566752, 0.62163487829099, 0.1034716898921264, 0.13825432392896253, 0.11060849937318651, 0.09287334595196028, 0.0871839869016161, 0.08860415173282343, 0.05617731583184027, 0.11556339955722883, 0.07405682862758967, 0.1655641682612914, 0.1533430094176672, 0.2951934267153914, 0.14951923957968427, 0.1390698086293798, 0.517800298711749, 0.24128057410690384, 0.14829704075609385, 0.10158346905368087, 0.1586738237779033, 0.3467853691183199, 0.4307897572601178, 0.4073615237726448, 0.30115813593527085, 0.30503297507522864, 0.565304552956612, 0.2509617652562566, 0.1928641963406621, 0.2703994919830569, 0.45147758852725683, 0.3132319679847606, 0.2706923927040783, 0.3181217518530769, 0.12954050968084863, 0.13132747704075953, 0.23792124547614657, 0.2385139213193066, 0.17686316819640546, 0.16299045292942482, 0.14509731242357904, 0.19777254958758994, 0.18705238839515015, 0.20552644130948217, 0.18777507667248416, 0.180823042478518, 0.1707714838437101, 0.18860186565033166, 0.20009921958964316, 0.1860979078110928, 0.2275802493581126, 0.18132388978791558, 0.2570984717033007, 0.2349917881254031, 0.041163192961431005, 0.22351148405645882, 0.9677460401770872, 0.1660818814284346, 0.37404224040319134, 0.17293621686002902, 0.2012452744198393, 0.6603646091434909, 0.6318484482030745, 0.1543676802146562, 0.16961604677897468, 0.11709692951809081, 0.28044803840169064, 0.6991905112640675, 0.22330745385267292, 0.12625819157336848, 0.09811909685344322, 0.15714219885984437, 0.0828937075948546, 0.11627796211499863, 0.15559602746946255, 0.17546040540459384, 0.16604994499562786, 0.17137209855525193, 0.13710704000835816, 0.16742301663607817, 0.18689563415854638, 0.17219476933092415, 0.16103059022423571, 0.09810433005984509, 0.08119373023986587, 0.057966076848071646, 0.07556593778616427, 0.08747307134338078, 0.05610562307693834, 0.07475584118834233, 0.054077152294390696, 0.07865374326611674]}, "mutation_prompt": null}
{"id": "e650e523-7a4b-460a-9565-0387e7505587", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(4 + int(3 * np.log(dim)), budget)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def __call__(self, func):\n        evaluations = 0\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            if evaluations < self.budget:\n                self.fitness[i] = func(self.population[i])\n                evaluations += 1\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Mutation\n                indices = [index for index in range(self.population_size) if index != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial_vector = np.where(crossover_mask, mutant_vector, self.population[i])\n\n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n\n        # Return the best solution found\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index], self.fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Dynamic Population Size for Efficient Black Box Optimization", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d0b6e80-7830-410c-851a-e8d0cc6b0306", "metadata": {"aucs": [0.6914870521716243, 0.9329016183419243, 0.9336044340135519, 0.9230528264965719, 0.22085283142799295, 0.7830117808051558, 0.9414850098282403, 0.9511876831174408, 0.9214018647229764, 0.8932115944281486, 9.999999999998899e-05, 9.999999999998899e-05, 0.03058775344378406, 0.7556803082715359, 0.884055772047265, 0.6495970408506164, 9.999999999998899e-05, 0.854689053730084, 0.159925243362396, 0.14738686728697614, 0.11847522577482328, 0.06918626443058451, 0.187670349167665, 0.06668889465987027, 0.12398131855820427, 0.10822007740858686, 0.09557625079466603, 0.08681170621309542, 0.13303153571848758, 0.07782338784187981, 0.11249906125560971, 0.16310761498937154, 0.11791363648225617, 0.15617789869163257, 0.08255519975294012, 0.07471444174420971, 0.9638625572929089, 0.09939673304780039, 0.9652392484554184, 0.9867216653414345, 0.9792876189347306, 0.9927516839340887, 0.9753624211732596, 0.9906187691957701, 0.9839766458601398, 0.6608674342144922, 0.36592778722821395, 0.5909651418838116, 0.04443797581046671, 0.15376495927254274, 0.15056211177190038, 0.4730411752081751, 0.2630804757520617, 0.06449097381626323, 0.3630567934157314, 0.23973235160621875, 0.12627486953056688, 0.3881689855677821, 0.09029771311255386, 0.24190064422323299, 0.11025069005465116, 0.08152527608681759, 0.17575797080452704, 0.1353330840198982, 0.1930855866907626, 0.16339341882692393, 0.39839335758796457, 0.1299580525759515, 9.999999999998899e-05, 9.999999999998899e-05, 0.1815764275674776, 0.14995696412809034, 0.19030246053382271, 0.010170033834285053, 0.1581504148625843, 0.14434998984276803, 0.13215458677552794, 0.1358485652218322, 0.18132994080756304, 0.17708905580131473, 0.14625384141378706, 9.999999999998899e-05, 0.011434591824942997, 9.999999999998899e-05, 0.002476917896963471, 9.999999999998899e-05, 0.03992623805828621, 0.02425736941692902, 0.011452594065731736, 0.13648459004624947, 0.17138295467706488, 0.0403639138219285, 0.30547190293843474, 0.10060675784991091, 0.03533928075831172, 0.02209693256638079, 0.16663258703099204, 0.10312823766411472, 0.196789689328716, 0.23099097175831462, 0.035171893074227634, 0.1300315992482196, 0.0853228566688713, 0.11437310257518751, 0.0855617738484139, 0.1425344373854327, 0.21788266411534218, 0.11238592419581528, 0.3050252608399604, 0.1227289076882222, 0.2081011656044951, 0.15842467191966914, 0.26951526347127386, 0.2578289913363724, 0.06127347627382673, 0.17625313158877565, 0.08600215110796638, 0.5525796860530159, 0.5628027971235132, 0.5344575022113632, 0.4543089926958973, 0.5313552104649197, 0.544053641479729, 0.5173548128928988, 0.5598296331566752, 0.62163487829099, 0.1034716898921264, 0.13825432392896253, 0.11060849937318651, 0.09287334595196028, 0.0871839869016161, 0.08860415173282343, 0.05617731583184027, 0.11556339955722883, 0.07405682862758967, 0.1655641682612914, 0.1533430094176672, 0.2951934267153914, 0.14951923957968427, 0.1390698086293798, 0.517800298711749, 0.24128057410690384, 0.14829704075609385, 0.10158346905368087, 0.1586738237779033, 0.3467853691183199, 0.4307897572601178, 0.4073615237726448, 0.30115813593527085, 0.30503297507522864, 0.565304552956612, 0.2509617652562566, 0.1928641963406621, 0.2703994919830569, 0.45147758852725683, 0.3132319679847606, 0.2706923927040783, 0.3181217518530769, 0.12954050968084863, 0.13132747704075953, 0.23792124547614657, 0.2385139213193066, 0.17686316819640546, 0.16299045292942482, 0.14509731242357904, 0.19777254958758994, 0.18705238839515015, 0.20552644130948217, 0.18777507667248416, 0.180823042478518, 0.1707714838437101, 0.18860186565033166, 0.20009921958964316, 0.1860979078110928, 0.2275802493581126, 0.18132388978791558, 0.2570984717033007, 0.2349917881254031, 0.041163192961431005, 0.22351148405645882, 0.9677460401770872, 0.1660818814284346, 0.37404224040319134, 0.17293621686002902, 0.2012452744198393, 0.6603646091434909, 0.6318484482030745, 0.1543676802146562, 0.16961604677897468, 0.11709692951809081, 0.28044803840169064, 0.6991905112640675, 0.22330745385267292, 0.12625819157336848, 0.09811909685344322, 0.15714219885984437, 0.0828937075948546, 0.11627796211499863, 0.15559602746946255, 0.17546040540459384, 0.16604994499562786, 0.17137209855525193, 0.13710704000835816, 0.16742301663607817, 0.18689563415854638, 0.17219476933092415, 0.16103059022423571, 0.09810433005984509, 0.08119373023986587, 0.057966076848071646, 0.07556593778616427, 0.08747307134338078, 0.05610562307693834, 0.07475584118834233, 0.054077152294390696, 0.07865374326611674]}, "mutation_prompt": null}
