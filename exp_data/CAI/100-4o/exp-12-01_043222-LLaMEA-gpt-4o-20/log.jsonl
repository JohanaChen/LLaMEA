{"id": "8aeb3656-0aa9-4b00-91ca-5f0009fc4389", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.fitness = np.inf * np.ones(self.population_size)\n        self.func_evals = 0\n        self.F = 0.5\n        self.CR = 0.9\n\n    def _evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.func_evals += 1\n\n    def _mutate(self, target_idx):\n        idxs = [idx for idx in range(self.population_size) if idx != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant_vector = self.population[a] + self.F * (self.population[b] - self.population[c])\n        mutant_vector = np.clip(mutant_vector, -5, 5)\n        return mutant_vector\n\n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.CR\n        trial_vector = np.where(crossover_mask, mutant, target)\n        return trial_vector\n\n    def _select(self, target_idx, trial_vector, trial_fitness):\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial_vector\n            self.fitness[target_idx] = trial_fitness\n\n    def _dynamic_fuzzy_clustering(self):\n        centers = self.population[np.argsort(self.fitness)[:self.dim]]\n        return centers\n\n    def __call__(self, func):\n        self._evaluate_population(func)\n        \n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                if self.func_evals >= self.budget:\n                    break\n\n                mutant = self._mutate(i)\n                trial = self._crossover(self.population[i], mutant)\n                trial_fitness = func(trial)\n                self.func_evals += 1\n\n                self._select(i, trial, trial_fitness)\n            \n            cluster_centers = self._dynamic_fuzzy_clustering()\n            for center in cluster_centers:\n                perturbation = np.random.uniform(-0.1, 0.1, self.dim)\n                new_point = np.clip(center + perturbation, -5, 5)\n                new_fitness = func(new_point)\n                self.func_evals += 1\n\n                if new_fitness < np.max(self.fitness):\n                    worst_idx = np.argmax(self.fitness)\n                    self.population[worst_idx] = new_point\n                    self.fitness[worst_idx] = new_fitness\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDE", "description": "Adaptive Differential Evolution with Dynamic Fuzzy Clustering for Efficient Search Space Exploration.", "configspace": "", "generation": 0, "fitness": 0.41624749029480096, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8581900161101101, 0.8455930373093259, 0.8385635699711833, 0.854635951602773, 0.8509176221635998, 0.8465686680952789, 0.8463723921371509, 0.8501396492755342, 0.8517068716057102, 0.6965909443855092, 0.6603997175468885, 0.6635933678571488, 0.6519135425698769, 0.6897065657535062, 0.6969992688910958, 0.6750113360953258, 0.6749539589094545, 0.6879915921022762, 0.1406536935646624, 0.181556625901948, 0.15730391686931455, 0.18021071914987863, 0.1800408762397221, 0.15492259033992883, 0.6253749072818402, 0.17304031981792345, 0.18977824302047197, 0.15479470145227225, 0.09400960918912493, 0.17021551321737405, 0.12879728409858604, 0.11806837211329546, 0.13662573538467282, 0.14057425412288704, 0.14918335203867905, 0.13034397142993237, 0.9289957629025339, 0.9241331916550913, 0.9608791403715433, 0.927128987584837, 0.9003412240385135, 0.9383216484023523, 0.8839808850218043, 0.9286244059752818, 0.9583067217155818, 0.553599902228362, 0.563304697031253, 0.42480211484822106, 0.49300018427472336, 0.5706446318727396, 0.6030147817510702, 0.59035514970726, 0.5826481720144492, 0.5466918556983362, 0.8676226109269417, 0.8919021478336402, 0.8824762669824494, 0.8973146477698335, 0.2755896948437958, 0.8763472589137133, 0.8760223380040171, 0.8749129143622725, 0.878265394975975, 0.1327356409051056, 0.21620460915694162, 0.309895824543973, 0.3786796219600608, 0.13042663715724134, 0.3556394196909164, 0.2115335582599348, 0.5465359482134162, 0.20759453142485085, 0.13103237029778336, 0.5616584694131924, 0.4122467090016918, 0.21737170821052676, 0.2212758150928491, 0.3110543221988914, 0.2284484677547487, 0.26313160249863055, 0.24431980154506872, 0.3965201088309148, 0.4862107280814144, 0.5369256356122936, 0.547558849521263, 0.47792844790617917, 0.030100566191818334, 0.45767015386539345, 0.45165127371788816, 0.4974914533323327, 0.5343814624963742, 0.5509453219049634, 0.579192756750166, 0.5706876621208503, 0.49853583608094043, 0.5804802509506652, 0.2497530227238859, 0.6154662688035767, 0.5517364934711253, 0.2201227727973415, 0.10997967243968143, 0.07720091522506778, 0.37861682198132884, 0.34857268544366526, 0.3553555013127242, 0.12752025073667062, 0.17611701867898433, 0.23012753659280272, 0.38120066842005773, 0.3425058807947142, 0.40685949187984527, 0.34997177999315954, 0.38033834397203437, 0.3941782856186893, 0.38658074324825153, 0.35124615638160317, 0.12583906474303275, 0.7531361901230762, 0.7643934818425668, 0.7628172002080049, 0.7548512803643821, 0.7604297239612007, 0.7826468563362599, 0.7803013845462814, 0.7399812012592863, 0.7651202018295875, 0.11531514555869293, 0.12910161209514281, 0.10501403430156009, 0.12356139118441056, 0.1521146531540507, 0.11475649486165873, 0.18422474830201985, 0.14203095998413406, 0.10916004199676588, 0.22749319600553886, 0.6923537787871135, 0.23826522203536882, 0.24023894054600758, 0.5898211787673528, 0.6439377486833691, 0.7342632061396652, 0.22781644195173034, 0.21139786750487055, 0.4675976626693771, 0.46226119545048927, 0.481137722599723, 0.49441330806474837, 0.48394176456666094, 0.49576684759147904, 0.5209870964738633, 0.49736235243280524, 0.51252023637346, 0.3562693720130621, 0.35659715036366446, 0.38707373188867056, 0.3799195816813522, 0.34700674379302654, 0.35544550851893164, 0.21930055694374617, 0.4247278337924235, 0.4015901180452701, 0.2003317220310804, 0.2117639124630235, 0.2473374673198866, 0.2250165638622812, 0.2045786310960659, 0.22185547242598436, 0.22189202307444345, 0.23016504859455722, 0.21476479774651092, 0.22312845813617077, 0.19870343826872572, 0.21743904946628845, 0.1830194266756029, 0.22218679083041049, 0.7441717013473054, 0.198945249223486, 0.21878222368402012, 0.20875253589025544, 0.1681802589892153, 0.18628414736671006, 0.1480092807011406, 0.8972016205066401, 0.8957116395649496, 0.19696302501777796, 0.16772203296089372, 0.1626132543371387, 0.8902845159795574, 0.8491343695177678, 0.4084430204888876, 0.5660357142642551, 0.20618662826077438, 0.5232195680652154, 0.20802989024599872, 0.2082024120611785, 0.16758114231670296, 0.1543405811643188, 0.212081344871221, 0.2198699752181249, 0.19753173225561182, 0.19532262619412322, 0.18615302607165352, 0.1999927767598848, 0.19857521220242846, 0.18926009297342272, 0.1854506879870138, 0.0881342238789119, 0.0933512869142098, 0.0950179470088981, 0.09835564902556582, 0.09290145571853536, 0.08450847059094102, 0.09182652147083203, 0.12963584632309866, 0.08612401940608383]}, "mutation_prompt": null}
{"id": "50c31dda-ea47-4ba3-82a0-8492ba5947e8", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.fitness = np.inf * np.ones(self.population_size)\n        self.func_evals = 0\n        self.F = 0.5\n        self.CR = 0.9\n\n    def _evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                self.func_evals += 1\n\n    def _mutate(self, target_idx):\n        idxs = [idx for idx in range(self.population_size) if idx != target_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant_vector = self.population[a] + self.F * (self.population[b] - self.population[c])\n        mutant_vector = np.clip(mutant_vector, -5, 5)\n        return mutant_vector\n\n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.CR\n        trial_vector = np.where(crossover_mask, mutant, target)\n        return trial_vector\n\n    def _select(self, target_idx, trial_vector, trial_fitness):\n        if trial_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = trial_vector\n            self.fitness[target_idx] = trial_fitness\n\n    def _dynamic_fuzzy_clustering(self):\n        centers = self.population[np.argsort(self.fitness)[:self.dim]]\n        return centers\n\n    def __call__(self, func):\n        self._evaluate_population(func)\n        \n        while self.func_evals < self.budget:\n            for i in range(self.population_size):\n                if self.func_evals >= self.budget:\n                    break\n\n                mutant = self._mutate(i)\n                trial = self._crossover(self.population[i], mutant)\n                trial_fitness = func(trial)\n                self.func_evals += 1\n\n                self._select(i, trial, trial_fitness)\n            \n            cluster_centers = self._dynamic_fuzzy_clustering()\n            for center in cluster_centers:\n                perturbation = np.random.uniform(-0.1, 0.1, self.dim)\n                new_point = np.clip(center + perturbation, -5, 5)\n                new_fitness = func(new_point)\n                self.func_evals += 1\n\n                if new_fitness < np.max(self.fitness):\n                    worst_idx = np.argmax(self.fitness)\n                    self.population[worst_idx] = new_point\n                    self.fitness[worst_idx] = new_fitness\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDE", "description": "Adaptive Differential Evolution with Dynamic Fuzzy Clustering for Efficient Search Space Exploration.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8aeb3656-0aa9-4b00-91ca-5f0009fc4389", "metadata": {"aucs": [0.8581900161101101, 0.8455930373093259, 0.8385635699711833, 0.854635951602773, 0.8509176221635998, 0.8465686680952789, 0.8463723921371509, 0.8501396492755342, 0.8517068716057102, 0.6965909443855092, 0.6603997175468885, 0.6635933678571488, 0.6519135425698769, 0.6897065657535062, 0.6969992688910958, 0.6750113360953258, 0.6749539589094545, 0.6879915921022762, 0.1406536935646624, 0.181556625901948, 0.15730391686931455, 0.18021071914987863, 0.1800408762397221, 0.15492259033992883, 0.6253749072818402, 0.17304031981792345, 0.18977824302047197, 0.15479470145227225, 0.09400960918912493, 0.17021551321737405, 0.12879728409858604, 0.11806837211329546, 0.13662573538467282, 0.14057425412288704, 0.14918335203867905, 0.13034397142993237, 0.9289957629025339, 0.9241331916550913, 0.9608791403715433, 0.927128987584837, 0.9003412240385135, 0.9383216484023523, 0.8839808850218043, 0.9286244059752818, 0.9583067217155818, 0.553599902228362, 0.563304697031253, 0.42480211484822106, 0.49300018427472336, 0.5706446318727396, 0.6030147817510702, 0.59035514970726, 0.5826481720144492, 0.5466918556983362, 0.8676226109269417, 0.8919021478336402, 0.8824762669824494, 0.8973146477698335, 0.2755896948437958, 0.8763472589137133, 0.8760223380040171, 0.8749129143622725, 0.878265394975975, 0.1327356409051056, 0.21620460915694162, 0.309895824543973, 0.3786796219600608, 0.13042663715724134, 0.3556394196909164, 0.2115335582599348, 0.5465359482134162, 0.20759453142485085, 0.13103237029778336, 0.5616584694131924, 0.4122467090016918, 0.21737170821052676, 0.2212758150928491, 0.3110543221988914, 0.2284484677547487, 0.26313160249863055, 0.24431980154506872, 0.3965201088309148, 0.4862107280814144, 0.5369256356122936, 0.547558849521263, 0.47792844790617917, 0.030100566191818334, 0.45767015386539345, 0.45165127371788816, 0.4974914533323327, 0.5343814624963742, 0.5509453219049634, 0.579192756750166, 0.5706876621208503, 0.49853583608094043, 0.5804802509506652, 0.2497530227238859, 0.6154662688035767, 0.5517364934711253, 0.2201227727973415, 0.10997967243968143, 0.07720091522506778, 0.37861682198132884, 0.34857268544366526, 0.3553555013127242, 0.12752025073667062, 0.17611701867898433, 0.23012753659280272, 0.38120066842005773, 0.3425058807947142, 0.40685949187984527, 0.34997177999315954, 0.38033834397203437, 0.3941782856186893, 0.38658074324825153, 0.35124615638160317, 0.12583906474303275, 0.7531361901230762, 0.7643934818425668, 0.7628172002080049, 0.7548512803643821, 0.7604297239612007, 0.7826468563362599, 0.7803013845462814, 0.7399812012592863, 0.7651202018295875, 0.11531514555869293, 0.12910161209514281, 0.10501403430156009, 0.12356139118441056, 0.1521146531540507, 0.11475649486165873, 0.18422474830201985, 0.14203095998413406, 0.10916004199676588, 0.22749319600553886, 0.6923537787871135, 0.23826522203536882, 0.24023894054600758, 0.5898211787673528, 0.6439377486833691, 0.7342632061396652, 0.22781644195173034, 0.21139786750487055, 0.4675976626693771, 0.46226119545048927, 0.481137722599723, 0.49441330806474837, 0.48394176456666094, 0.49576684759147904, 0.5209870964738633, 0.49736235243280524, 0.51252023637346, 0.3562693720130621, 0.35659715036366446, 0.38707373188867056, 0.3799195816813522, 0.34700674379302654, 0.35544550851893164, 0.21930055694374617, 0.4247278337924235, 0.4015901180452701, 0.2003317220310804, 0.2117639124630235, 0.2473374673198866, 0.2250165638622812, 0.2045786310960659, 0.22185547242598436, 0.22189202307444345, 0.23016504859455722, 0.21476479774651092, 0.22312845813617077, 0.19870343826872572, 0.21743904946628845, 0.1830194266756029, 0.22218679083041049, 0.7441717013473054, 0.198945249223486, 0.21878222368402012, 0.20875253589025544, 0.1681802589892153, 0.18628414736671006, 0.1480092807011406, 0.8972016205066401, 0.8957116395649496, 0.19696302501777796, 0.16772203296089372, 0.1626132543371387, 0.8902845159795574, 0.8491343695177678, 0.4084430204888876, 0.5660357142642551, 0.20618662826077438, 0.5232195680652154, 0.20802989024599872, 0.2082024120611785, 0.16758114231670296, 0.1543405811643188, 0.212081344871221, 0.2198699752181249, 0.19753173225561182, 0.19532262619412322, 0.18615302607165352, 0.1999927767598848, 0.19857521220242846, 0.18926009297342272, 0.1854506879870138, 0.0881342238789119, 0.0933512869142098, 0.0950179470088981, 0.09835564902556582, 0.09290145571853536, 0.08450847059094102, 0.09182652147083203, 0.12963584632309866, 0.08612401940608383]}, "mutation_prompt": null}
