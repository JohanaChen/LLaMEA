{"id": "d773018c-6a0e-41c3-8e5e-133c5b33bd1a", "solution": "import numpy as np\n\nclass HybridParticleSwarmDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            # Evaluate the fitness of each particle\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evals += self.population_size\n\n            # Update personal bests and global best\n            for i in range(self.population_size):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            # Update velocities and positions\n            r1, r2 = np.random.rand(2)\n            self.velocities = (self.w * self.velocities +\n                               self.c1 * r1 * (self.personal_best_positions - self.positions) +\n                               self.c2 * r2 * (self.global_best_position - self.positions))\n            self.positions = self.positions + self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n            # Apply differential evolution strategy\n            if evals < self.budget:\n                for i in range(self.population_size):\n                    idxs = [idx for idx in range(self.population_size) if idx != i]\n                    a, b, c = self.positions[np.random.choice(idxs, 3, replace=False)]\n                    mutant_vector = a + self.F * (b - c)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n                    if func(trial_vector) < scores[i]:\n                        self.positions[i] = trial_vector\n                        scores[i] = func(trial_vector)\n                    evals += 1\n\n        return self.global_best_position, self.global_best_score", "name": "HybridParticleSwarmDE", "description": "A hybrid adaptive particle swarm optimization with differential evolution for dynamic exploration and exploitation balance in optimization.", "configspace": "", "generation": 0, "fitness": 0.283322150032863, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7818361119943871, 0.7392251510768322, 0.7394491929612523, 0.7500606447507091, 0.766913885962539, 0.14087110965604266, 0.7835249595436191, 0.7541585940541389, 0.734768642982764, 0.07687576657695028, 0.16011388008747673, 0.0674870236684092, 0.5214220160914877, 0.04177335890540257, 0.05073941164214868, 9.999999999998899e-05, 0.4884821610660366, 9.999999999998899e-05, 0.1752946859816571, 0.12853038147166607, 0.14609652392094374, 0.11918207706916095, 0.0864723394767587, 0.10521987865572136, 0.07928780322813822, 0.11544650915043353, 0.11948917869731834, 0.10143000331995156, 0.08980184218659437, 0.09167267991394945, 0.1189500642644784, 0.12053489405356377, 0.08375851705553372, 0.09157036997050816, 0.1080212993659252, 0.2534416784176242, 0.9496918420645207, 0.9570876312306845, 0.9686121716564268, 0.203242639286479, 0.9573156860856876, 0.9561767625278851, 0.20250380473211738, 0.9702622463152176, 0.9559267689723567, 0.44612663869740066, 0.38382400002768646, 0.10379747910000403, 0.3877523408268848, 0.42006389371468666, 0.15464306465325606, 0.5177276787001387, 0.38488646413356986, 0.08175479702269317, 0.807160363027949, 0.8490672162953417, 0.29507962411536204, 0.19205936936177903, 0.19046109697996672, 0.11504908006228165, 0.7864841222612706, 0.7454051542482305, 0.1266920819003432, 0.526416369992015, 0.1692466507806264, 0.09071221070022861, 0.09692367920637812, 0.1948510587357889, 0.0899589580715956, 0.19352429335856858, 0.24325243581485845, 0.14176668920541435, 0.12922291725497648, 0.33272292825896743, 0.3853722769665242, 0.264101579319843, 0.21792051201025064, 0.19911209671448304, 0.23068383595227837, 0.4781243658172609, 0.2264522233713302, 9.999999999998899e-05, 0.12991852357772404, 0.08693948886529834, 9.999999999998899e-05, 0.1685160389167487, 0.008980652486769047, 0.09269930694839712, 0.12461260614571856, 0.3582059288504136, 0.1211968482230974, 0.1370078090589668, 0.480070389628413, 0.5640062614427194, 0.3832885652756508, 0.12601811322045886, 0.5085738220642321, 0.4166323545108591, 0.5038546018240971, 0.06517660313515394, 0.053448004917994285, 0.040008029269104184, 0.07408793095860744, 0.1361332892375725, 0.10344657503601207, 0.08683258745322708, 0.07757788182724834, 9.999999999998899e-05, 0.13925015511214645, 0.29891811524591416, 0.2670269301710122, 0.0058675246229984435, 0.19662653851223633, 0.2055207443514201, 0.07640835443343663, 0.10407050858060118, 0.07661888439805642, 0.6698989680299584, 0.6680967660398633, 0.5818166825725164, 0.6862352959297505, 0.7050290838645663, 0.1817633804214417, 0.6992040934127794, 0.670929905164847, 0.6637040558090005, 0.07474454170077027, 0.06014654966426802, 0.0883310536648707, 0.14049548380801624, 0.09737284339398244, 0.11399059570169323, 0.0657008129597787, 0.14077368529466405, 0.07820000929243509, 0.13550074933094913, 0.32280774614230767, 0.18941728397861723, 0.18109071660773435, 0.3693197601912267, 0.15627311721861314, 0.37413541546931406, 0.1645613595860166, 0.2000356972056262, 0.2693663888041681, 0.3752565113951065, 0.24901619898240157, 0.4221864970243633, 0.38747886787830943, 0.3586600893602785, 0.4481537422782266, 0.417012605743472, 0.26806979770441663, 0.26292246529139607, 0.07695290419398171, 0.27264981394880894, 0.2906031558049922, 0.2608239915076188, 0.32463469040770765, 0.41076729114734734, 0.35566712561073854, 0.22921167440823575, 0.20135464751800392, 0.19594561747376538, 0.2006045983061151, 0.21237657336316995, 0.20846131772540577, 0.2121663198645245, 0.19585849369725405, 0.20277713692652566, 0.19739861060354047, 0.19634861083495214, 0.21312847471291296, 0.19886045690783816, 0.20529131722160332, 0.19332080015159547, 0.19690503600812448, 0.19316394848765372, 0.21511490889737583, 0.19374670053801768, 0.8627968970743048, 0.18541723428940604, 0.13120298265774744, 0.8642133651089792, 0.1982861914287425, 0.14452173249742517, 0.1411318682974384, 0.16142452147016173, 0.8400404436188832, 0.8574314425811005, 0.2116847906158349, 0.09739630026557555, 0.8222208274671867, 0.1452833796360561, 0.1413233623680622, 0.10369440921586504, 0.7909744481474779, 0.11284089084615823, 0.17640600228412973, 0.17535698233045005, 0.17111001444755858, 0.19300077408517213, 0.20407336843541712, 0.17383340395771973, 0.17718791575512516, 0.18006206643656641, 0.18480074583733197, 0.0896159780565946, 0.07829491544272493, 0.07265124378944343, 0.07295359486238262, 0.07722037537799864, 0.07200279054160341, 0.07284032780169325, 0.08071458254478092, 0.07257949928572105]}, "mutation_prompt": null}
{"id": "e7abdb30-d884-466c-a487-c3fde616103d", "solution": "import numpy as np\n\nclass HybridParticleSwarmDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            # Evaluate the fitness of each particle\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evals += self.population_size\n\n            # Update personal bests and global best\n            for i in range(self.population_size):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            # Dynamic inertia weight adjustment\n            self.w = self.w_max - (self.w_max - self.w_min) * (evals / self.budget)\n\n            # Update velocities and positions\n            r1, r2 = np.random.rand(2)\n            self.velocities = (self.w * self.velocities +\n                               self.c1 * r1 * (self.personal_best_positions - self.positions) +\n                               self.c2 * r2 * (self.global_best_position - self.positions))\n            self.positions = self.positions + self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n            # Apply differential evolution strategy\n            if evals < self.budget:\n                for i in range(self.population_size):\n                    idxs = [idx for idx in range(self.population_size) if idx != i]\n                    a, b, c = self.positions[np.random.choice(idxs, 3, replace=False)]\n                    mutant_vector = a + self.F * (b - c)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n                    if func(trial_vector) < scores[i]:\n                        self.positions[i] = trial_vector\n                        scores[i] = func(trial_vector)\n                    evals += 1\n\n        return self.global_best_position, self.global_best_score", "name": "HybridParticleSwarmDE", "description": "An improved hybrid algorithm with dynamic inertia weight adjustment for better convergence in particle swarm optimization.", "configspace": "", "generation": 1, "fitness": 0.21126917882812976, "feedback": "", "error": "", "parent_id": "d773018c-6a0e-41c3-8e5e-133c5b33bd1a", "metadata": {"aucs": [0.5500946076454893, 0.5059391235168686, 0.46772113904336665, 0.5534071213124155, 0.5263068018433958, 0.16013120723657503, 0.5072578617969168, 0.5953332916107321, 0.42272017588008226, 0.19721515910067278, 0.14428574693086593, 0.0001392932175054984, 0.1194064683009648, 9.999999999998899e-05, 0.11228608404727747, 9.999999999998899e-05, 0.027680149010900656, 9.999999999998899e-05, 0.09475242132925343, 0.07290886867176216, 0.09457990055168797, 0.06107121012213279, 0.11663816172509889, 0.08837200571852499, 0.0799041262384198, 0.10679141355687283, 0.09410634926631578, 0.07560527010445672, 0.08339506959772025, 0.07540227846986836, 0.08846790454895015, 0.0744013158419008, 0.08308372918285023, 0.08563227918146454, 0.07693433373234615, 0.07101662211848037, 0.9671357007360013, 0.9570695134972943, 0.9681492281976543, 0.9549949559566392, 0.9587986795330457, 0.9515675950071052, 0.9674083363744201, 0.9712112438147109, 0.9656953168791627, 0.2178479028710394, 0.19712991389726853, 0.05353433594602319, 0.1341798548314428, 0.19839051809365627, 0.12904017318930927, 0.21717133470488315, 0.1240703744379058, 0.07963097821376885, 0.5242085564360146, 0.16492572162965957, 0.19542281979176368, 0.1963092498634582, 0.5057443285278496, 0.435486515160988, 0.6793416069054429, 0.3764071095964653, 0.17792917813379683, 0.16638565267765715, 0.15520123139202946, 0.08220899986706132, 0.12073121319524338, 0.09100884178901503, 0.08938114197071334, 0.3123733585748838, 0.13773030676637954, 0.1252598253937227, 0.2111418068678136, 0.10922535136316491, 0.11724722060383441, 0.13901034305944926, 0.2407440933807211, 0.16045193058977947, 0.14569494777145942, 0.1835456587754749, 0.09043254506402376, 9.999999999998899e-05, 0.018909558318934927, 0.028323169426990202, 0.0005132158253902119, 9.999999999998899e-05, 9.999999999998899e-05, 0.07790115997988212, 0.07190862535607012, 0.001377361548136502, 0.054897464312163025, 0.12791335049026897, 0.05083797673526025, 0.09247354553286935, 0.044960088850639846, 0.027046203364489485, 0.15455515354670046, 0.1777437809438197, 0.14426091884717374, 0.0757215873246252, 0.0462124194935708, 0.04523675014816486, 0.053422784116265, 0.02971882847384788, 0.02789903036650576, 0.060624817537094144, 0.029871581704231764, 0.0457903198078391, 0.030094727131622534, 0.14119799743437, 0.09486143661461299, 0.00457769937048047, 0.030447477364346942, 0.07813904045692177, 0.07100115785582295, 0.06319911598885464, 0.053132811089182, 0.42644167047648607, 0.4051433310003395, 0.3550809288016883, 0.20645706999393332, 0.4408168360923417, 0.1805392170047333, 0.43485197027732736, 0.4435283933491887, 0.3969504086083627, 0.07531646100698819, 0.05912691090979494, 0.07950320198208971, 0.0931059406534066, 0.07127143461799046, 0.10081769220517056, 0.11096570489029056, 0.07747787591829747, 0.07416266846854236, 0.1567524155794301, 0.12959943390348128, 0.13223443557750558, 0.352558075404493, 0.13973574826147273, 0.1550189393368997, 0.1446018350498831, 0.14180717221525596, 0.177694232969266, 0.30075360239417026, 0.21722695410043757, 0.24757598924529323, 0.2777361800658167, 0.27236643040286657, 0.24521748737092652, 0.30813006726265, 0.2784750582471537, 0.22781237700124268, 0.23823003905876639, 0.20644985287496853, 0.17264508697541625, 0.221930711515002, 0.23348587415020838, 0.2499364092551788, 0.21489364172080117, 0.22352218867781182, 0.22321884114329327, 0.19007244194832584, 0.16524441021800507, 0.1779574703087219, 0.18411759420685903, 0.19264002026493054, 0.159503916490504, 0.1922878182845229, 0.17641284441406002, 0.16717250133472283, 0.172576993530682, 0.20041413203377756, 0.17656919878899535, 0.18982914137917983, 0.24087629888277795, 0.18022945202526752, 0.17428406801254515, 0.1946109701809955, 0.23379003609427784, 0.6241482182297953, 0.19424590110958573, 0.12439486227611174, 0.5574979097102855, 0.19755470487955695, 0.38775509669337416, 0.5570916704196724, 0.1620070409704365, 0.19320965547483804, 0.6168392593095064, 0.201889509690384, 0.2687735315442644, 0.4930273512683301, 0.4123091023362734, 0.10551675580346653, 0.18267543909395123, 0.18165445080727238, 0.19215971783888564, 0.16213598479152347, 0.18750563970587208, 0.18046405716694458, 0.20136048666982864, 0.17481848410877687, 0.1733122597128891, 0.19428410051863199, 0.17706186388797363, 0.18819907875716968, 0.06491136980363243, 0.07796093343268273, 0.07694838198655252, 0.06986899243855627, 0.07097188454270786, 0.08095502744305905, 0.06014064270964514, 0.06260070267082396, 0.07320229751847984]}, "mutation_prompt": null}
