{"id": "c0e0d9b7-5771-47d4-8235-d5bcebfd5411", "solution": "import numpy as np\n\nclass HybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + 5 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.temperature = 1.0\n\n    def __call__(self, func):\n        evals = 0\n\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            evals += 1\n            if self.fitness[i] < self.best_fitness:\n                self.best_fitness = self.fitness[i]\n                self.best_solution = self.population[i]\n        \n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Evaluation and Selection\n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n                # Adaptive Simulated Annealing\n                perturbation = np.random.uniform(-0.1, 0.1, self.dim)\n                perturbed_solution = np.clip(self.best_solution + perturbation, self.lower_bound, self.upper_bound)\n                perturbed_fitness = func(perturbed_solution)\n                evals += 1\n                if perturbed_fitness < self.best_fitness or \\\n                   np.exp((self.best_fitness - perturbed_fitness) / self.temperature) > np.random.rand():\n                    self.best_solution = perturbed_solution\n                    self.best_fitness = perturbed_fitness\n\n            self.temperature *= 0.99  # Cooling schedule\n\n        return self.best_solution, self.best_fitness", "name": "HybridOptimizer", "description": "A hybrid metaheuristic algorithm that combines Differential Evolution and Adaptive Simulated Annealing to balance exploration and exploitation efficiently.", "configspace": "", "generation": 0, "fitness": 0.24596167753179873, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.5087879227118066, 0.4887768404131543, 0.48722981908029084, 0.5458866048533491, 0.5333027267618394, 0.5680536375917784, 0.5081545742371185, 0.533030529944523, 0.5019625014497906, 0.24970964897027204, 0.23877966515109073, 0.23607953030818551, 0.2509216197735238, 0.25881567357923607, 0.2526431326701307, 0.2198125767364011, 0.22639864096712703, 0.24879941000744443, 0.10563423408802552, 0.1035556283882535, 0.10039300158876208, 0.12012914112891171, 0.09520049798821184, 0.15064190004969646, 0.10800560950064064, 0.11550843768373342, 0.10798459028097696, 0.09633060839614027, 0.0917801749306063, 0.10829585022921473, 0.11373289107599427, 0.12315848818634967, 0.09401249579146265, 0.09488813205331847, 0.09571108908061654, 0.09749202189197914, 0.949305581817978, 0.9381067744287921, 0.9356199250177811, 0.8887263692275955, 0.8946323480585482, 0.9233040632208224, 0.9307417830928533, 0.8687678867038325, 0.8771262383803962, 0.26669572232760586, 0.26856813369452426, 0.26706930037013366, 0.2927203681913375, 0.2559626318402404, 0.2709137268738, 0.279091136262835, 0.2820925675458468, 0.2931196129201239, 0.6112314591914676, 0.36683225419038124, 0.3395928345412518, 0.3152581487120958, 0.37538465297277723, 0.41550880630544074, 0.40382541824634866, 0.5290244792624936, 0.4131180583877345, 0.19111820121777234, 0.17613384955230593, 0.21020638951823112, 0.18077810868424382, 0.22827774120049116, 0.21507469129627466, 0.19180656355407177, 0.16897787244299234, 0.2245920220190688, 0.23991474382387545, 0.18926554818801822, 0.24293662677828365, 0.19587232477023608, 0.1800221687451753, 0.1686826460197246, 0.18615298872765507, 0.19330513381399494, 0.15363086252371339, 0.08569841330710515, 0.04738463681454774, 0.09050304301363354, 0.07294575985354346, 0.08066711937116033, 0.07838282694639509, 0.07717653464135421, 0.059358314660221234, 0.08640424824775472, 0.2264520507282164, 0.18815812398968612, 0.18538787547323787, 0.17436502508125307, 0.16977183628371273, 0.15853486972836872, 0.2521770957236915, 0.22764600597165507, 0.19452063636504902, 0.014230238181726751, 0.004041582550821432, 0.0026332305221272723, 0.009287204235471247, 0.004381665366454013, 0.00932538380978909, 9.999999999998899e-05, 0.00914306452668845, 0.004190612683833916, 0.1506369209850914, 0.1332039315947703, 0.16327939344262088, 0.12161445707211438, 0.12307027868314158, 0.14227921444281455, 0.14315590930474842, 0.16473879737285446, 0.1515998750041312, 0.42159564446919284, 0.4181804078361252, 0.42538071841854297, 0.41753522289219647, 0.4498180578089933, 0.4355470472439652, 0.4481285304961692, 0.4454434303060222, 0.43409984843513494, 0.11754894879166222, 0.12558995102327575, 0.08461137653585826, 0.11051293802323503, 0.13108536022679196, 0.11938542580702305, 0.0957486412247468, 0.09845276377179346, 0.10557588741957757, 0.2330380127318208, 0.19104300782006578, 0.21390183270711927, 0.31842417307472104, 0.2710375289100043, 0.2338833198276371, 0.29014501689226624, 0.17639570557250994, 0.28821584552913604, 0.25749614858943826, 0.2418173967867917, 0.26169521621050784, 0.2608270290122723, 0.24290031732916684, 0.2505106411977688, 0.275862079048544, 0.2749269146977764, 0.2713741365607705, 0.2199264828946127, 0.2053032645671039, 0.21171335024202487, 0.19867083048979084, 0.19154652679281048, 0.20782055562137525, 0.21131461666683504, 0.23261333692640085, 0.22850322732373463, 0.19381868407065783, 0.2084442024502121, 0.1912639416090618, 0.22953811150452197, 0.19556637322136472, 0.21473516942395554, 0.21163178822215978, 0.187512817714385, 0.19969365135344053, 0.23356140744238862, 0.19587730875800458, 0.1996839396736214, 0.20706112696187717, 0.20795212603399582, 0.20143686487724455, 0.2172957670320177, 0.22382278929995525, 0.20570174838961341, 0.20352115431292772, 0.19695958321309504, 0.4632372518688834, 0.5611003119453128, 0.19579393024055014, 0.18386506111765744, 0.19058604998811457, 0.18888490582180206, 0.4639598364918758, 0.5603555411512616, 0.2096652602036314, 0.23316403201622593, 0.24722468599303093, 0.20543383291122863, 0.2668646689169992, 0.4357854494142064, 0.1255959539985695, 0.21036832825118446, 0.17996908455063443, 0.18997884659840703, 0.1789933069852221, 0.17842472198047632, 0.19179997807192617, 0.18130158075530622, 0.18601456083050427, 0.1880917118278006, 0.18128257006716808, 0.07017332372025031, 0.07904753154470112, 0.06217817917174273, 0.07046796608458894, 0.07534187925830793, 0.0930661036179572, 0.08758760126411069, 0.07022575108594575, 0.07653249062421896]}, "mutation_prompt": null}
{"id": "fdcd4fb6-20a1-4406-bab0-e6bf1ef6e554", "solution": "import numpy as np\n\nclass HybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + 5 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.temperature = 1.0\n\n    def __call__(self, func):\n        evals = 0\n\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            evals += 1\n            if self.fitness[i] < self.best_fitness:\n                self.best_fitness = self.fitness[i]\n                self.best_solution = self.population[i]\n        \n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                # Evaluation and Selection\n                trial_fitness = func(trial)\n                evals += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n                # Adaptive Simulated Annealing\n                perturbation = np.random.uniform(-0.1, 0.1, self.dim)\n                perturbed_solution = np.clip(self.best_solution + perturbation, self.lower_bound, self.upper_bound)\n                perturbed_fitness = func(perturbed_solution)\n                evals += 1\n                if perturbed_fitness < self.best_fitness or \\\n                   np.exp((self.best_fitness - perturbed_fitness) / self.temperature) > np.random.rand():\n                    self.best_solution = perturbed_solution\n                    self.best_fitness = perturbed_fitness\n\n            self.temperature *= 0.99  # Cooling schedule\n\n        return self.best_solution, self.best_fitness", "name": "HybridOptimizer", "description": "A hybrid metaheuristic algorithm that combines Differential Evolution and Adaptive Simulated Annealing to balance exploration and exploitation efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c0e0d9b7-5771-47d4-8235-d5bcebfd5411", "metadata": {"aucs": [0.5087879227118066, 0.4887768404131543, 0.48722981908029084, 0.5458866048533491, 0.5333027267618394, 0.5680536375917784, 0.5081545742371185, 0.533030529944523, 0.5019625014497906, 0.24970964897027204, 0.23877966515109073, 0.23607953030818551, 0.2509216197735238, 0.25881567357923607, 0.2526431326701307, 0.2198125767364011, 0.22639864096712703, 0.24879941000744443, 0.10563423408802552, 0.1035556283882535, 0.10039300158876208, 0.12012914112891171, 0.09520049798821184, 0.15064190004969646, 0.10800560950064064, 0.11550843768373342, 0.10798459028097696, 0.09633060839614027, 0.0917801749306063, 0.10829585022921473, 0.11373289107599427, 0.12315848818634967, 0.09401249579146265, 0.09488813205331847, 0.09571108908061654, 0.09749202189197914, 0.949305581817978, 0.9381067744287921, 0.9356199250177811, 0.8887263692275955, 0.8946323480585482, 0.9233040632208224, 0.9307417830928533, 0.8687678867038325, 0.8771262383803962, 0.26669572232760586, 0.26856813369452426, 0.26706930037013366, 0.2927203681913375, 0.2559626318402404, 0.2709137268738, 0.279091136262835, 0.2820925675458468, 0.2931196129201239, 0.6112314591914676, 0.36683225419038124, 0.3395928345412518, 0.3152581487120958, 0.37538465297277723, 0.41550880630544074, 0.40382541824634866, 0.5290244792624936, 0.4131180583877345, 0.19111820121777234, 0.17613384955230593, 0.21020638951823112, 0.18077810868424382, 0.22827774120049116, 0.21507469129627466, 0.19180656355407177, 0.16897787244299234, 0.2245920220190688, 0.23991474382387545, 0.18926554818801822, 0.24293662677828365, 0.19587232477023608, 0.1800221687451753, 0.1686826460197246, 0.18615298872765507, 0.19330513381399494, 0.15363086252371339, 0.08569841330710515, 0.04738463681454774, 0.09050304301363354, 0.07294575985354346, 0.08066711937116033, 0.07838282694639509, 0.07717653464135421, 0.059358314660221234, 0.08640424824775472, 0.2264520507282164, 0.18815812398968612, 0.18538787547323787, 0.17436502508125307, 0.16977183628371273, 0.15853486972836872, 0.2521770957236915, 0.22764600597165507, 0.19452063636504902, 0.014230238181726751, 0.004041582550821432, 0.0026332305221272723, 0.009287204235471247, 0.004381665366454013, 0.00932538380978909, 9.999999999998899e-05, 0.00914306452668845, 0.004190612683833916, 0.1506369209850914, 0.1332039315947703, 0.16327939344262088, 0.12161445707211438, 0.12307027868314158, 0.14227921444281455, 0.14315590930474842, 0.16473879737285446, 0.1515998750041312, 0.42159564446919284, 0.4181804078361252, 0.42538071841854297, 0.41753522289219647, 0.4498180578089933, 0.4355470472439652, 0.4481285304961692, 0.4454434303060222, 0.43409984843513494, 0.11754894879166222, 0.12558995102327575, 0.08461137653585826, 0.11051293802323503, 0.13108536022679196, 0.11938542580702305, 0.0957486412247468, 0.09845276377179346, 0.10557588741957757, 0.2330380127318208, 0.19104300782006578, 0.21390183270711927, 0.31842417307472104, 0.2710375289100043, 0.2338833198276371, 0.29014501689226624, 0.17639570557250994, 0.28821584552913604, 0.25749614858943826, 0.2418173967867917, 0.26169521621050784, 0.2608270290122723, 0.24290031732916684, 0.2505106411977688, 0.275862079048544, 0.2749269146977764, 0.2713741365607705, 0.2199264828946127, 0.2053032645671039, 0.21171335024202487, 0.19867083048979084, 0.19154652679281048, 0.20782055562137525, 0.21131461666683504, 0.23261333692640085, 0.22850322732373463, 0.19381868407065783, 0.2084442024502121, 0.1912639416090618, 0.22953811150452197, 0.19556637322136472, 0.21473516942395554, 0.21163178822215978, 0.187512817714385, 0.19969365135344053, 0.23356140744238862, 0.19587730875800458, 0.1996839396736214, 0.20706112696187717, 0.20795212603399582, 0.20143686487724455, 0.2172957670320177, 0.22382278929995525, 0.20570174838961341, 0.20352115431292772, 0.19695958321309504, 0.4632372518688834, 0.5611003119453128, 0.19579393024055014, 0.18386506111765744, 0.19058604998811457, 0.18888490582180206, 0.4639598364918758, 0.5603555411512616, 0.2096652602036314, 0.23316403201622593, 0.24722468599303093, 0.20543383291122863, 0.2668646689169992, 0.4357854494142064, 0.1255959539985695, 0.21036832825118446, 0.17996908455063443, 0.18997884659840703, 0.1789933069852221, 0.17842472198047632, 0.19179997807192617, 0.18130158075530622, 0.18601456083050427, 0.1880917118278006, 0.18128257006716808, 0.07017332372025031, 0.07904753154470112, 0.06217817917174273, 0.07046796608458894, 0.07534187925830793, 0.0930661036179572, 0.08758760126411069, 0.07022575108594575, 0.07653249062421896]}, "mutation_prompt": null}
