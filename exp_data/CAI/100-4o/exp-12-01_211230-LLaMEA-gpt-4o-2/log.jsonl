{"id": "35f4b274-877a-4da2-a7df-c71f455175f4", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.population = None\n        self.fitness = None\n\n    def initialize_population(self):\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, \n                                            (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def differential_evolution(self, func):\n        for i in range(self.population_size):\n            indices = np.random.choice(range(self.population_size), 3, replace=False)\n            x0, x1, x2 = self.population[indices]\n            mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.CR\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n\n            if trial_fitness < self.fitness[i]:\n                self.population[i] = trial\n                self.fitness[i] = trial_fitness\n\n    def local_search(self, func, best_idx):\n        step_size = 0.1\n        for _ in range(5):  # Perform a fixed number of local steps\n            candidate = self.population[best_idx] + np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            if candidate_fitness < self.fitness[best_idx]:\n                self.population[best_idx] = candidate\n                self.fitness[best_idx] = candidate_fitness\n\n    def __call__(self, func):\n        self.initialize_population()\n        evaluations = 0\n        while evaluations < self.budget:\n            self.differential_evolution(func)\n            evaluations += self.population_size\n            best_idx = np.argmin(self.fitness)\n            self.local_search(func, best_idx)\n            evaluations += 5  # Local search evaluations\n            if evaluations >= self.budget:\n                break\n        best_solution_idx = np.argmin(self.fitness)\n        return self.population[best_solution_idx], self.fitness[best_solution_idx]", "name": "HybridDEALS", "description": "A hybrid algorithm combining Differential Evolution and Adaptive Local Search to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.3852220097483296, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8025173783467907, 0.8179595605047828, 0.7940215404005122, 0.80838988274147, 0.8105757146750643, 0.8276551946787366, 0.7912654580366427, 0.7917283303359957, 0.8128243394541165, 0.6473780446664748, 0.6179834185518893, 0.6482387761287696, 0.6425955696919787, 0.6546203524827775, 0.6265561206798921, 0.6320019324514243, 0.6350108806870384, 0.6497003255537299, 0.12658363169129627, 0.1428801586714521, 0.13300137144626312, 0.11238901713400429, 0.1253543634112766, 0.12435640592904051, 0.13633678359287138, 0.11267264996022752, 0.14135791006713094, 0.14461883746857807, 0.10867797080883268, 0.12362584969542423, 0.12006727669595296, 0.11255353427482728, 0.11937208258559617, 0.10817231012938922, 0.11938705810678696, 0.1317160939144666, 0.9217077887568362, 0.9289475040925642, 0.9094905417580165, 0.9278290455340849, 0.9199506534561748, 0.886802966590506, 0.9352474854697347, 0.9393940928987938, 0.950399710689498, 0.5481217570039497, 0.47675367473361907, 0.5145731024695686, 0.47967971693437106, 0.5005126959445386, 0.5055063963611, 0.4785695225366352, 0.5112658010323149, 0.47407856364702783, 0.7316583123588931, 0.7830980390374893, 0.7687509127424429, 0.7444125335785224, 0.8077679678823745, 0.8329982379539799, 0.8418724090468384, 0.8113879469749363, 0.775681874534385, 0.19408149350451642, 0.276826892573953, 0.30008445547833695, 0.3294749168799369, 0.2361102855940116, 0.3676886681801912, 0.24415455479745296, 0.221765798812122, 0.4244793169954574, 0.3200215408630004, 0.26484362850776944, 0.15242417497633232, 0.46025095418311757, 0.25592532466195583, 0.2924814352711227, 0.1755973701083745, 0.4505046329682444, 0.26752805914976163, 0.3911426852414127, 0.38648119712022855, 0.3790075562040437, 0.3902369217982664, 0.36707895805923574, 0.3951833248280341, 0.42169542966467144, 0.34995758345627714, 0.41075464793537875, 0.5145569780534986, 0.4874811292440794, 0.5292167049825072, 0.5030034678912019, 0.5031670800332559, 0.5285581474558272, 0.5374017173350861, 0.547570446932151, 0.569616685403789, 0.15038102181185753, 0.06590133415219446, 0.15195277277161334, 0.1698646539976073, 0.2141810517574093, 0.260402526873064, 0.16690184373735806, 0.14553451011420437, 0.14479887470126673, 0.3342784165128474, 0.3200676562740665, 0.3140913611937761, 0.3280055538019555, 0.3372692505995447, 0.32224847463257056, 0.33217957117000796, 0.3031549260629225, 0.3083146214548388, 0.7062188267008613, 0.7049541307846284, 0.7050092294757235, 0.7231038258763407, 0.7354427924058895, 0.6983217430376267, 0.7070329410515893, 0.7148333917012583, 0.6782504879615613, 0.11171254539174391, 0.09714181319268078, 0.10987114312074742, 0.12997799895142814, 0.1364654280445884, 0.10270181598675387, 0.12746964864704657, 0.1285295919384114, 0.1435203196676419, 0.1748626237780343, 0.15601408780969028, 0.17597333285534078, 0.33005782285343566, 0.1821174325460484, 0.30684689176816327, 0.2583571584166018, 0.26572935403266496, 0.22440551807204367, 0.42075418935141384, 0.3876138021770714, 0.40964757563745735, 0.43268079383895164, 0.4422280720085269, 0.4011322645792079, 0.44801785375199266, 0.4439924328478656, 0.42362392830697293, 0.30680852230191735, 0.28701680755925263, 0.3044896105952897, 0.3124379268360975, 0.29527219677116956, 0.30704133016569324, 0.35048225303674985, 0.33069762468902664, 0.3502284587956005, 0.1945384318533031, 0.222547886265694, 0.21091626964169252, 0.19698912853605743, 0.20143888350718453, 0.200629147551462, 0.20569519917219892, 0.22357519934990489, 0.1982528542932438, 0.23603972900647163, 0.19321440782301658, 0.2158465437326157, 0.1921065491774654, 0.21822234573808108, 0.2217066217025968, 0.2218060081289993, 0.23185313089803372, 0.2053059614867373, 0.195576950863391, 0.16748791493144288, 0.20609209068871504, 0.17837544781331904, 0.8792166931669333, 0.1766347321573749, 0.1831204946531899, 0.6674551988959837, 0.6917938085396326, 0.6915785185949133, 0.6734283995781758, 0.21017253669837166, 0.7536645681282178, 0.20038263920021304, 0.6890233133992705, 0.768921131902008, 0.21140903400026312, 0.20714189596085741, 0.19662359190558887, 0.18967636535623544, 0.18737347943680616, 0.1956926706919282, 0.19814087447224327, 0.20254605131685832, 0.18797908122453266, 0.1964673079982615, 0.18556751217420842, 0.08863833793858322, 0.08338134836698063, 0.08403957776936444, 0.09361562016241409, 0.08116702271490572, 0.07923965143375955, 0.08549442071314328, 0.07939272084649018, 0.08518329832664895]}, "mutation_prompt": null}
{"id": "dd2c93c5-8255-4c07-b658-f0941cef38c2", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.population = None\n        self.fitness = None\n\n    def initialize_population(self):\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, \n                                            (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def differential_evolution(self, func):\n        for i in range(self.population_size):\n            indices = np.random.choice(range(self.population_size), 3, replace=False)\n            x0, x1, x2 = self.population[indices]\n            mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.CR\n            trial = np.where(cross_points, mutant, self.population[i])\n            trial_fitness = func(trial)\n\n            if trial_fitness < self.fitness[i]:\n                self.population[i] = trial\n                self.fitness[i] = trial_fitness\n\n    def local_search(self, func, best_idx):\n        step_size = 0.1\n        for _ in range(5):  # Perform a fixed number of local steps\n            candidate = self.population[best_idx] + np.random.uniform(-step_size, step_size, self.dim)\n            candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            if candidate_fitness < self.fitness[best_idx]:\n                self.population[best_idx] = candidate\n                self.fitness[best_idx] = candidate_fitness\n\n    def __call__(self, func):\n        self.initialize_population()\n        evaluations = 0\n        while evaluations < self.budget:\n            self.differential_evolution(func)\n            evaluations += self.population_size\n            best_idx = np.argmin(self.fitness)\n            self.local_search(func, best_idx)\n            evaluations += 5  # Local search evaluations\n            if evaluations >= self.budget:\n                break\n        best_solution_idx = np.argmin(self.fitness)\n        return self.population[best_solution_idx], self.fitness[best_solution_idx]", "name": "HybridDEALS", "description": "A hybrid algorithm combining Differential Evolution and Adaptive Local Search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "35f4b274-877a-4da2-a7df-c71f455175f4", "metadata": {"aucs": [0.8025173783467907, 0.8179595605047828, 0.7940215404005122, 0.80838988274147, 0.8105757146750643, 0.8276551946787366, 0.7912654580366427, 0.7917283303359957, 0.8128243394541165, 0.6473780446664748, 0.6179834185518893, 0.6482387761287696, 0.6425955696919787, 0.6546203524827775, 0.6265561206798921, 0.6320019324514243, 0.6350108806870384, 0.6497003255537299, 0.12658363169129627, 0.1428801586714521, 0.13300137144626312, 0.11238901713400429, 0.1253543634112766, 0.12435640592904051, 0.13633678359287138, 0.11267264996022752, 0.14135791006713094, 0.14461883746857807, 0.10867797080883268, 0.12362584969542423, 0.12006727669595296, 0.11255353427482728, 0.11937208258559617, 0.10817231012938922, 0.11938705810678696, 0.1317160939144666, 0.9217077887568362, 0.9289475040925642, 0.9094905417580165, 0.9278290455340849, 0.9199506534561748, 0.886802966590506, 0.9352474854697347, 0.9393940928987938, 0.950399710689498, 0.5481217570039497, 0.47675367473361907, 0.5145731024695686, 0.47967971693437106, 0.5005126959445386, 0.5055063963611, 0.4785695225366352, 0.5112658010323149, 0.47407856364702783, 0.7316583123588931, 0.7830980390374893, 0.7687509127424429, 0.7444125335785224, 0.8077679678823745, 0.8329982379539799, 0.8418724090468384, 0.8113879469749363, 0.775681874534385, 0.19408149350451642, 0.276826892573953, 0.30008445547833695, 0.3294749168799369, 0.2361102855940116, 0.3676886681801912, 0.24415455479745296, 0.221765798812122, 0.4244793169954574, 0.3200215408630004, 0.26484362850776944, 0.15242417497633232, 0.46025095418311757, 0.25592532466195583, 0.2924814352711227, 0.1755973701083745, 0.4505046329682444, 0.26752805914976163, 0.3911426852414127, 0.38648119712022855, 0.3790075562040437, 0.3902369217982664, 0.36707895805923574, 0.3951833248280341, 0.42169542966467144, 0.34995758345627714, 0.41075464793537875, 0.5145569780534986, 0.4874811292440794, 0.5292167049825072, 0.5030034678912019, 0.5031670800332559, 0.5285581474558272, 0.5374017173350861, 0.547570446932151, 0.569616685403789, 0.15038102181185753, 0.06590133415219446, 0.15195277277161334, 0.1698646539976073, 0.2141810517574093, 0.260402526873064, 0.16690184373735806, 0.14553451011420437, 0.14479887470126673, 0.3342784165128474, 0.3200676562740665, 0.3140913611937761, 0.3280055538019555, 0.3372692505995447, 0.32224847463257056, 0.33217957117000796, 0.3031549260629225, 0.3083146214548388, 0.7062188267008613, 0.7049541307846284, 0.7050092294757235, 0.7231038258763407, 0.7354427924058895, 0.6983217430376267, 0.7070329410515893, 0.7148333917012583, 0.6782504879615613, 0.11171254539174391, 0.09714181319268078, 0.10987114312074742, 0.12997799895142814, 0.1364654280445884, 0.10270181598675387, 0.12746964864704657, 0.1285295919384114, 0.1435203196676419, 0.1748626237780343, 0.15601408780969028, 0.17597333285534078, 0.33005782285343566, 0.1821174325460484, 0.30684689176816327, 0.2583571584166018, 0.26572935403266496, 0.22440551807204367, 0.42075418935141384, 0.3876138021770714, 0.40964757563745735, 0.43268079383895164, 0.4422280720085269, 0.4011322645792079, 0.44801785375199266, 0.4439924328478656, 0.42362392830697293, 0.30680852230191735, 0.28701680755925263, 0.3044896105952897, 0.3124379268360975, 0.29527219677116956, 0.30704133016569324, 0.35048225303674985, 0.33069762468902664, 0.3502284587956005, 0.1945384318533031, 0.222547886265694, 0.21091626964169252, 0.19698912853605743, 0.20143888350718453, 0.200629147551462, 0.20569519917219892, 0.22357519934990489, 0.1982528542932438, 0.23603972900647163, 0.19321440782301658, 0.2158465437326157, 0.1921065491774654, 0.21822234573808108, 0.2217066217025968, 0.2218060081289993, 0.23185313089803372, 0.2053059614867373, 0.195576950863391, 0.16748791493144288, 0.20609209068871504, 0.17837544781331904, 0.8792166931669333, 0.1766347321573749, 0.1831204946531899, 0.6674551988959837, 0.6917938085396326, 0.6915785185949133, 0.6734283995781758, 0.21017253669837166, 0.7536645681282178, 0.20038263920021304, 0.6890233133992705, 0.768921131902008, 0.21140903400026312, 0.20714189596085741, 0.19662359190558887, 0.18967636535623544, 0.18737347943680616, 0.1956926706919282, 0.19814087447224327, 0.20254605131685832, 0.18797908122453266, 0.1964673079982615, 0.18556751217420842, 0.08863833793858322, 0.08338134836698063, 0.08403957776936444, 0.09361562016241409, 0.08116702271490572, 0.07923965143375955, 0.08549442071314328, 0.07939272084649018, 0.08518329832664895]}, "mutation_prompt": null}
