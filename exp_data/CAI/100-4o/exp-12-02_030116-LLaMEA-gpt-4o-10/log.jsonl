{"id": "bcf42b75-1231-4250-a5af-87e04c8ebc15", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20 + dim * 5  # Population size\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.history = []\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n    def _mutate(self, idx, population):\n        indices = [i for i in range(self.pop_size) if i != idx]\n        a, b, c = population[np.random.choice(indices, 3, replace=False)]\n        mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n        return mutant\n\n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.CR\n        return np.where(crossover_mask, mutant, target)\n\n    def _select(self, target, trial, func):\n        if func(trial) < func(target):\n            return trial\n        return target\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.apply_along_axis(func, 1, population)\n        eval_count = self.pop_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while eval_count < self.budget:\n            for i in range(self.pop_size):\n                mutant = self._mutate(i, population)\n                trial = self._crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n\n            # Adapt F and CR based on past success (optional improvement)\n            self.history.append(best_fitness)\n\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Fitness-Based Mutation Strategy for Efficient Optimization.", "configspace": "", "generation": 0, "fitness": 0.4145012697599667, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8359323783753244, 0.819708492307736, 0.8219418814162134, 0.830443289597373, 0.8373345802512344, 0.852825672313666, 0.8344023069132367, 0.8400972555538251, 0.8226700429835716, 0.7211810105246854, 0.7006280642482118, 0.7318719509095508, 0.7148658567752054, 0.7082434588128315, 0.7219208976021151, 0.6861662163774718, 0.7087060504321526, 0.7091871037631821, 0.1353032516410263, 0.11175722856506565, 0.12371790717194875, 0.13433453759635194, 0.11834305971695525, 0.12703512444585485, 0.12653721041898147, 0.12636832652230345, 0.12390695702070809, 0.10905212806871256, 0.10804379365044514, 0.10873842453299398, 0.11547540256921107, 0.11919117409161595, 0.10396412561078505, 0.10101066703976125, 0.09669197226876836, 0.10670296028146276, 0.9241681233347403, 0.8477415535186508, 0.9063993428027981, 0.919554679181525, 0.9466645327706028, 0.8654997590402045, 0.9159373336216792, 0.9418619185344963, 0.9258345273828692, 0.5840773226761242, 0.5729120739768087, 0.5537249111291562, 0.5464573656287495, 0.5529322646059933, 0.5542955361931192, 0.5577367992649787, 0.5731325468249948, 0.5482297636218143, 0.7842289105610969, 0.8175003324063658, 0.7731866517148452, 0.8361620717831058, 0.8167147791575451, 0.8125838301998825, 0.8306515913769454, 0.8040754115925572, 0.8117551637727365, 0.2759173991541577, 0.1577476595814753, 0.16653795901487267, 0.24419844073278785, 0.20283739309496818, 0.38293495604711136, 0.23806787144785768, 0.1615181810313665, 0.3170446763719307, 0.22302942074960352, 0.5030951833298158, 0.1462773006408652, 0.32295388740031716, 0.5505313719361422, 0.4631364416815743, 0.23115466988459188, 0.33771557542324504, 0.18365936554773932, 0.5330139147738665, 0.5420150150023524, 0.11465337057245784, 0.5027044660828235, 0.5071687000290414, 0.45856080154303613, 0.5276230844993013, 0.45262157448845564, 0.47028504368140833, 0.6370561293229589, 0.6721932873692866, 0.6102371268783843, 0.6815954560585081, 0.5589305547461603, 0.6024770768380132, 0.6581233826905308, 0.615164039974311, 0.648387992292954, 0.26670352629237126, 0.1615853640639744, 0.07647597087472258, 0.38557666687788306, 0.32352826907432775, 0.3560561175671936, 0.15851883723025295, 0.15103941401019816, 0.28278927038823, 0.3922452758178462, 0.3687376528347426, 0.36479678639418023, 0.4116407125501219, 0.3705419241329557, 0.4140264329883364, 0.35919700916166597, 0.3906967489892288, 0.4154697175469533, 0.740968651654127, 0.7649423303126384, 0.7729288297331629, 0.7474871800467516, 0.7482064780868689, 0.755112562432084, 0.768405996681239, 0.7413349975071132, 0.7408940372814838, 0.12039257723265329, 0.11095411820372936, 0.11641563430207735, 0.09770214438107283, 0.11066699691884407, 0.11772262691553625, 0.11595193188779362, 0.11063261196421792, 0.12352717314469863, 0.16287246966807234, 0.1494094482537388, 0.14133136357972598, 0.175457666463541, 0.14806409856201808, 0.19660005272263847, 0.1301863195738826, 0.14568576840994918, 0.14757621545010113, 0.48992027131554183, 0.4814711808073662, 0.4623361752117434, 0.4515488002661282, 0.43853018973448643, 0.4564593622557843, 0.48895725422815517, 0.5098655424009961, 0.4950089149844188, 0.3737323010261424, 0.3150032718582343, 0.39797338203059496, 0.3506797578491948, 0.37569484097226724, 0.3667445737623831, 0.362880198729739, 0.3758921555613123, 0.35489003366664873, 0.2534675427496388, 0.20878015190380395, 0.19279426652929244, 0.2023554226794959, 0.2053972698430726, 0.19809166432907088, 0.19235151407507367, 0.19976913884845393, 0.19291610563970152, 0.3030762406105417, 0.20395850430316909, 0.19406454560149766, 0.1956496867196621, 0.2127167737190072, 0.2049200055962821, 0.21643363576196628, 0.33805245316923593, 0.2645172618316134, 0.7871433380447141, 0.19211811666211154, 0.18937135520194082, 0.6488806847980905, 0.6741695667162171, 0.20064030866192095, 0.7511580538148943, 0.535890006897832, 0.6681607778780378, 0.7647505908779346, 0.7636068846887795, 0.7848551086230247, 0.7114449058227279, 0.1969148948484608, 0.19687463919153947, 0.2015261206353367, 0.7379728891389409, 0.2108029657903997, 0.1970629942509099, 0.18810089824897125, 0.19334519213920986, 0.21315703744037273, 0.1880258745548341, 0.19463917124187313, 0.1923857366188505, 0.19158142060585048, 0.2063347411620502, 0.08537502196193614, 0.08435178987818692, 0.07856797222361345, 0.08270417239737382, 0.07889590790557066, 0.07984071545991178, 0.08668431090528428, 0.08901492829386004, 0.08848017887538118]}, "mutation_prompt": null}
{"id": "88926746-6f80-4d92-bfa4-6f9fda331ac3", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20 + dim * 5  # Population size\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.history = []\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n    def _mutate(self, idx, population):\n        indices = [i for i in range(self.pop_size) if i != idx]\n        a, b, c = population[np.random.choice(indices, 3, replace=False)]\n        mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n        return mutant\n\n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.CR\n        return np.where(crossover_mask, mutant, target)\n\n    def _select(self, target, trial, func):\n        if func(trial) < func(target):\n            return trial\n        return target\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.apply_along_axis(func, 1, population)\n        eval_count = self.pop_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while eval_count < self.budget:\n            for i in range(self.pop_size):\n                mutant = self._mutate(i, population)\n                trial = self._crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n\n            # Adapt F and CR based on past success (optional improvement)\n            self.history.append(best_fitness)\n\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Fitness-Based Mutation Strategy for Efficient Optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bcf42b75-1231-4250-a5af-87e04c8ebc15", "metadata": {"aucs": [0.8359323783753244, 0.819708492307736, 0.8219418814162134, 0.830443289597373, 0.8373345802512344, 0.852825672313666, 0.8344023069132367, 0.8400972555538251, 0.8226700429835716, 0.7211810105246854, 0.7006280642482118, 0.7318719509095508, 0.7148658567752054, 0.7082434588128315, 0.7219208976021151, 0.6861662163774718, 0.7087060504321526, 0.7091871037631821, 0.1353032516410263, 0.11175722856506565, 0.12371790717194875, 0.13433453759635194, 0.11834305971695525, 0.12703512444585485, 0.12653721041898147, 0.12636832652230345, 0.12390695702070809, 0.10905212806871256, 0.10804379365044514, 0.10873842453299398, 0.11547540256921107, 0.11919117409161595, 0.10396412561078505, 0.10101066703976125, 0.09669197226876836, 0.10670296028146276, 0.9241681233347403, 0.8477415535186508, 0.9063993428027981, 0.919554679181525, 0.9466645327706028, 0.8654997590402045, 0.9159373336216792, 0.9418619185344963, 0.9258345273828692, 0.5840773226761242, 0.5729120739768087, 0.5537249111291562, 0.5464573656287495, 0.5529322646059933, 0.5542955361931192, 0.5577367992649787, 0.5731325468249948, 0.5482297636218143, 0.7842289105610969, 0.8175003324063658, 0.7731866517148452, 0.8361620717831058, 0.8167147791575451, 0.8125838301998825, 0.8306515913769454, 0.8040754115925572, 0.8117551637727365, 0.2759173991541577, 0.1577476595814753, 0.16653795901487267, 0.24419844073278785, 0.20283739309496818, 0.38293495604711136, 0.23806787144785768, 0.1615181810313665, 0.3170446763719307, 0.22302942074960352, 0.5030951833298158, 0.1462773006408652, 0.32295388740031716, 0.5505313719361422, 0.4631364416815743, 0.23115466988459188, 0.33771557542324504, 0.18365936554773932, 0.5330139147738665, 0.5420150150023524, 0.11465337057245784, 0.5027044660828235, 0.5071687000290414, 0.45856080154303613, 0.5276230844993013, 0.45262157448845564, 0.47028504368140833, 0.6370561293229589, 0.6721932873692866, 0.6102371268783843, 0.6815954560585081, 0.5589305547461603, 0.6024770768380132, 0.6581233826905308, 0.615164039974311, 0.648387992292954, 0.26670352629237126, 0.1615853640639744, 0.07647597087472258, 0.38557666687788306, 0.32352826907432775, 0.3560561175671936, 0.15851883723025295, 0.15103941401019816, 0.28278927038823, 0.3922452758178462, 0.3687376528347426, 0.36479678639418023, 0.4116407125501219, 0.3705419241329557, 0.4140264329883364, 0.35919700916166597, 0.3906967489892288, 0.4154697175469533, 0.740968651654127, 0.7649423303126384, 0.7729288297331629, 0.7474871800467516, 0.7482064780868689, 0.755112562432084, 0.768405996681239, 0.7413349975071132, 0.7408940372814838, 0.12039257723265329, 0.11095411820372936, 0.11641563430207735, 0.09770214438107283, 0.11066699691884407, 0.11772262691553625, 0.11595193188779362, 0.11063261196421792, 0.12352717314469863, 0.16287246966807234, 0.1494094482537388, 0.14133136357972598, 0.175457666463541, 0.14806409856201808, 0.19660005272263847, 0.1301863195738826, 0.14568576840994918, 0.14757621545010113, 0.48992027131554183, 0.4814711808073662, 0.4623361752117434, 0.4515488002661282, 0.43853018973448643, 0.4564593622557843, 0.48895725422815517, 0.5098655424009961, 0.4950089149844188, 0.3737323010261424, 0.3150032718582343, 0.39797338203059496, 0.3506797578491948, 0.37569484097226724, 0.3667445737623831, 0.362880198729739, 0.3758921555613123, 0.35489003366664873, 0.2534675427496388, 0.20878015190380395, 0.19279426652929244, 0.2023554226794959, 0.2053972698430726, 0.19809166432907088, 0.19235151407507367, 0.19976913884845393, 0.19291610563970152, 0.3030762406105417, 0.20395850430316909, 0.19406454560149766, 0.1956496867196621, 0.2127167737190072, 0.2049200055962821, 0.21643363576196628, 0.33805245316923593, 0.2645172618316134, 0.7871433380447141, 0.19211811666211154, 0.18937135520194082, 0.6488806847980905, 0.6741695667162171, 0.20064030866192095, 0.7511580538148943, 0.535890006897832, 0.6681607778780378, 0.7647505908779346, 0.7636068846887795, 0.7848551086230247, 0.7114449058227279, 0.1969148948484608, 0.19687463919153947, 0.2015261206353367, 0.7379728891389409, 0.2108029657903997, 0.1970629942509099, 0.18810089824897125, 0.19334519213920986, 0.21315703744037273, 0.1880258745548341, 0.19463917124187313, 0.1923857366188505, 0.19158142060585048, 0.2063347411620502, 0.08537502196193614, 0.08435178987818692, 0.07856797222361345, 0.08270417239737382, 0.07889590790557066, 0.07984071545991178, 0.08668431090528428, 0.08901492829386004, 0.08848017887538118]}, "mutation_prompt": null}
