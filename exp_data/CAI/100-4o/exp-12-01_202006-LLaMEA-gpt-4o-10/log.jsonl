{"id": "e7368e13-9d5d-49e0-bf75-971031c28f56", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(20, self.budget // 10)\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.f_values = np.full(self.pop_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        F = 0.8  # differential weight\n        CR = 0.9  # crossover probability\n\n        # Evaluate initial population\n        for i in range(self.pop_size):\n            self.f_values[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.f_values[i]:\n                    self.population[i] = trial\n                    self.f_values[i] = f_trial\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return self.population[np.argmin(self.f_values)]\n\n# Example usage:\n# optimizer = AdaptiveDifferentialEvolution(budget=1000, dim=10)\n# best_solution = optimizer(some_function)", "name": "AdaptiveDifferentialEvolution", "description": "The algorithm leverages a combination of differential evolution and adaptive step size adjustments to explore and exploit the search space efficiently.", "configspace": "", "generation": 0, "fitness": 0.4583978058100617, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8413431626710931, 0.8596580867034261, 0.8453494525120553, 0.885282174230823, 0.8535880648771809, 0.8664038840236892, 0.8490602217014683, 0.8595799573947531, 0.8679065903994478, 0.7655367296488191, 0.7673431909699244, 0.7616787478346672, 0.7511979278568548, 0.7515576993747852, 0.7705772166337624, 0.7782850390295968, 0.7685058992668643, 0.753060501166608, 0.1523855509863612, 0.16583864953404115, 0.30683972629230394, 0.15013092583345422, 0.15237085034164832, 0.2972018637279148, 0.12736378827224892, 0.13943834988778947, 0.14809701306381762, 0.1423025923021547, 0.11560795481246677, 0.10754240959015637, 0.11903555257776066, 0.13564046430298837, 0.14501467046551875, 0.23035941700894869, 0.14417193181055066, 0.13227131876186482, 0.9726087485849771, 0.9494032539047192, 0.9723165571954294, 0.9772168582812182, 0.9776575051997848, 0.9709891137007339, 0.9805655680294705, 0.9360922417659354, 0.9879076368713773, 0.6321160314142913, 0.6180780652612201, 0.6140475569607222, 0.6276047097632305, 0.6339335611494734, 0.6525702480754367, 0.6310415412765007, 0.6635575443253745, 0.6410813147274828, 0.8396358545514612, 0.8433552790213514, 0.8142049072331952, 0.8263179190369292, 0.8229955357765344, 0.807226211015195, 0.8483886405302533, 0.7989336027387031, 0.791229582396689, 0.6778958714030483, 0.5849613997104894, 0.5389578828379419, 0.5898265416848364, 0.5182498442885659, 0.5916597615402499, 0.6277252891560562, 0.640718984607916, 0.5756712930127309, 0.5235488007072643, 0.12913532422164065, 0.6333999601096287, 0.6099553738286824, 0.5016274358997242, 0.5736426938002432, 0.5855570056687238, 0.5581814323857874, 0.5750645509285619, 0.5284742702658727, 0.5976527763101759, 0.5242491249283263, 0.5994071417974083, 0.5756724912333087, 0.5237251767965537, 0.5670312583812469, 0.5330999094740638, 0.5851706825359191, 0.629259166090832, 0.640814059509955, 0.6769105130996789, 0.6852309729419592, 0.6451455861049264, 0.6551590741695915, 0.7001637589214049, 0.7001705906186542, 0.6409766006317019, 0.14460169369949094, 0.22460188879802567, 0.3618331477519684, 0.3192561681731262, 0.4250301218098984, 0.2872606405871512, 0.2150767874535603, 0.12818896669004187, 0.2950175531176943, 0.4258936030789481, 0.4453987587965901, 0.4024209192111218, 0.43958897109310624, 0.44409594295363675, 0.43550469385926427, 0.4691178207510145, 0.454881169767398, 0.4427287251713615, 0.7817295771722623, 0.7742357693648148, 0.7835721227588146, 0.7878678742160972, 0.7915017137818395, 0.7844087492536431, 0.7677852157307723, 0.7716060625796086, 0.7797534658896886, 0.10187606946017236, 0.11072299374360905, 0.12180117422790249, 0.13174120933771483, 0.10799082925408565, 0.14692057902734945, 0.13326421038214498, 0.10772099046728378, 0.14796037889357927, 0.1609217658229425, 0.12104526103179836, 0.17651206945794817, 0.12059668798919487, 0.15371911728259624, 0.13113924176030267, 0.15985418693671238, 0.13983885642726868, 0.22949633734816344, 0.47790640723421596, 0.42338377112865744, 0.441645542937382, 0.4209154538940906, 0.49059124129873466, 0.43661598462059803, 0.4790507875149247, 0.49521960199634774, 0.4667661443153053, 0.314422362594444, 0.3479722553420276, 0.413547671000717, 0.3528602194476037, 0.326069122729563, 0.3143208694728825, 0.4014422580908674, 0.39429944508548165, 0.3964110823240642, 0.18488311602953733, 0.19806908047987515, 0.2040586895424129, 0.19629361371483445, 0.21929363266594892, 0.17931239002057464, 0.1891217343617635, 0.18941523492278678, 0.200493320931311, 0.21145643691733107, 0.20537852987672345, 0.7058280424024853, 0.6034854838434572, 0.5192054222818179, 0.5309029474118752, 0.6431643308606274, 0.5653483402732232, 0.6010538359172211, 0.15492393430092322, 0.16916874458724074, 0.9107848617676835, 0.7966826139226143, 0.18368414863903326, 0.1753617585225422, 0.864832435122389, 0.8476382444236097, 0.1896275890618625, 0.1720697518835339, 0.1948069433265086, 0.16694837481246305, 0.8254243200976621, 0.16373681978764365, 0.20387745987413697, 0.21174611671545418, 0.2107655036233046, 0.2125022148244441, 0.16627558085526872, 0.17100532889689946, 0.17727635273275244, 0.1957711316351366, 0.18954190387839298, 0.2070819576465115, 0.18344214273670612, 0.17703964433809838, 0.1873889877155126, 0.08060998402894182, 0.0715544588568584, 0.07739859893850953, 0.079246975629916, 0.07154537972045094, 0.07971958089752729, 0.08354256193435428, 0.07523877906825327, 0.0766846200675887]}, "mutation_prompt": null}
{"id": "bd65c1b4-0f95-4887-bb6d-ae591d7a895f", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(20, self.budget // 10)\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        self.f_values = np.full(self.pop_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        F = 0.8  # differential weight\n        CR = 0.9  # crossover probability\n\n        # Evaluate initial population\n        for i in range(self.pop_size):\n            self.f_values[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.f_values[i]:\n                    self.population[i] = trial\n                    self.f_values[i] = f_trial\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return self.population[np.argmin(self.f_values)]\n\n# Example usage:\n# optimizer = AdaptiveDifferentialEvolution(budget=1000, dim=10)\n# best_solution = optimizer(some_function)", "name": "AdaptiveDifferentialEvolution", "description": "The algorithm leverages a combination of differential evolution and adaptive step size adjustments to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e7368e13-9d5d-49e0-bf75-971031c28f56", "metadata": {"aucs": [0.8413431626710931, 0.8596580867034261, 0.8453494525120553, 0.885282174230823, 0.8535880648771809, 0.8664038840236892, 0.8490602217014683, 0.8595799573947531, 0.8679065903994478, 0.7655367296488191, 0.7673431909699244, 0.7616787478346672, 0.7511979278568548, 0.7515576993747852, 0.7705772166337624, 0.7782850390295968, 0.7685058992668643, 0.753060501166608, 0.1523855509863612, 0.16583864953404115, 0.30683972629230394, 0.15013092583345422, 0.15237085034164832, 0.2972018637279148, 0.12736378827224892, 0.13943834988778947, 0.14809701306381762, 0.1423025923021547, 0.11560795481246677, 0.10754240959015637, 0.11903555257776066, 0.13564046430298837, 0.14501467046551875, 0.23035941700894869, 0.14417193181055066, 0.13227131876186482, 0.9726087485849771, 0.9494032539047192, 0.9723165571954294, 0.9772168582812182, 0.9776575051997848, 0.9709891137007339, 0.9805655680294705, 0.9360922417659354, 0.9879076368713773, 0.6321160314142913, 0.6180780652612201, 0.6140475569607222, 0.6276047097632305, 0.6339335611494734, 0.6525702480754367, 0.6310415412765007, 0.6635575443253745, 0.6410813147274828, 0.8396358545514612, 0.8433552790213514, 0.8142049072331952, 0.8263179190369292, 0.8229955357765344, 0.807226211015195, 0.8483886405302533, 0.7989336027387031, 0.791229582396689, 0.6778958714030483, 0.5849613997104894, 0.5389578828379419, 0.5898265416848364, 0.5182498442885659, 0.5916597615402499, 0.6277252891560562, 0.640718984607916, 0.5756712930127309, 0.5235488007072643, 0.12913532422164065, 0.6333999601096287, 0.6099553738286824, 0.5016274358997242, 0.5736426938002432, 0.5855570056687238, 0.5581814323857874, 0.5750645509285619, 0.5284742702658727, 0.5976527763101759, 0.5242491249283263, 0.5994071417974083, 0.5756724912333087, 0.5237251767965537, 0.5670312583812469, 0.5330999094740638, 0.5851706825359191, 0.629259166090832, 0.640814059509955, 0.6769105130996789, 0.6852309729419592, 0.6451455861049264, 0.6551590741695915, 0.7001637589214049, 0.7001705906186542, 0.6409766006317019, 0.14460169369949094, 0.22460188879802567, 0.3618331477519684, 0.3192561681731262, 0.4250301218098984, 0.2872606405871512, 0.2150767874535603, 0.12818896669004187, 0.2950175531176943, 0.4258936030789481, 0.4453987587965901, 0.4024209192111218, 0.43958897109310624, 0.44409594295363675, 0.43550469385926427, 0.4691178207510145, 0.454881169767398, 0.4427287251713615, 0.7817295771722623, 0.7742357693648148, 0.7835721227588146, 0.7878678742160972, 0.7915017137818395, 0.7844087492536431, 0.7677852157307723, 0.7716060625796086, 0.7797534658896886, 0.10187606946017236, 0.11072299374360905, 0.12180117422790249, 0.13174120933771483, 0.10799082925408565, 0.14692057902734945, 0.13326421038214498, 0.10772099046728378, 0.14796037889357927, 0.1609217658229425, 0.12104526103179836, 0.17651206945794817, 0.12059668798919487, 0.15371911728259624, 0.13113924176030267, 0.15985418693671238, 0.13983885642726868, 0.22949633734816344, 0.47790640723421596, 0.42338377112865744, 0.441645542937382, 0.4209154538940906, 0.49059124129873466, 0.43661598462059803, 0.4790507875149247, 0.49521960199634774, 0.4667661443153053, 0.314422362594444, 0.3479722553420276, 0.413547671000717, 0.3528602194476037, 0.326069122729563, 0.3143208694728825, 0.4014422580908674, 0.39429944508548165, 0.3964110823240642, 0.18488311602953733, 0.19806908047987515, 0.2040586895424129, 0.19629361371483445, 0.21929363266594892, 0.17931239002057464, 0.1891217343617635, 0.18941523492278678, 0.200493320931311, 0.21145643691733107, 0.20537852987672345, 0.7058280424024853, 0.6034854838434572, 0.5192054222818179, 0.5309029474118752, 0.6431643308606274, 0.5653483402732232, 0.6010538359172211, 0.15492393430092322, 0.16916874458724074, 0.9107848617676835, 0.7966826139226143, 0.18368414863903326, 0.1753617585225422, 0.864832435122389, 0.8476382444236097, 0.1896275890618625, 0.1720697518835339, 0.1948069433265086, 0.16694837481246305, 0.8254243200976621, 0.16373681978764365, 0.20387745987413697, 0.21174611671545418, 0.2107655036233046, 0.2125022148244441, 0.16627558085526872, 0.17100532889689946, 0.17727635273275244, 0.1957711316351366, 0.18954190387839298, 0.2070819576465115, 0.18344214273670612, 0.17703964433809838, 0.1873889877155126, 0.08060998402894182, 0.0715544588568584, 0.07739859893850953, 0.079246975629916, 0.07154537972045094, 0.07971958089752729, 0.08354256193435428, 0.07523877906825327, 0.0766846200675887]}, "mutation_prompt": null}
