{"id": "6569c863-04a7-4c3d-b1f7-1557d692c6e9", "solution": "import numpy as np\n\nclass AdaptiveMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 5\n        self.max_iter = self.budget // self.num_particles\n        self.inertia_weight = 0.7\n        self.cognitive_param = 1.5\n        self.social_param = 1.5\n\n    def __call__(self, func):\n        particles = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        velocities = [np.random.uniform(-1, 1, (self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        personal_best_positions = [p.copy() for p in particles]\n        personal_best_scores = [np.inf * np.ones(self.num_particles) for _ in range(self.num_swarms)]\n        global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        global_best_score = np.inf\n\n        eval_count = 0\n\n        for iteration in range(self.max_iter):\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    if eval_count >= self.budget:\n                        break\n\n                    fitness = func(particles[swarm_index][i])\n                    eval_count += 1\n\n                    if fitness < personal_best_scores[swarm_index][i]:\n                        personal_best_scores[swarm_index][i] = fitness\n                        personal_best_positions[swarm_index][i] = particles[swarm_index][i].copy()\n\n                    if fitness < global_best_score:\n                        global_best_score = fitness\n                        global_best_position = particles[swarm_index][i].copy()\n\n                r1, r2 = np.random.rand(2)\n                velocities[swarm_index] = (self.inertia_weight * velocities[swarm_index] +\n                                           self.cognitive_param * r1 * (personal_best_positions[swarm_index] - particles[swarm_index]) +\n                                           self.social_param * r2 * (global_best_position - particles[swarm_index]))\n                \n                particles[swarm_index] += velocities[swarm_index]\n                particles[swarm_index] = np.clip(particles[swarm_index], self.lower_bound, self.upper_bound)\n\n                if eval_count >= self.budget:\n                    break\n\n            # Adaptive behavior: reinitialize swarms periodically\n            if iteration % (self.max_iter // 10) == 0:\n                for swarm_index in range(self.num_swarms):\n                    if np.random.rand() < 0.3:  # Reinitialize with 30% probability\n                        particles[swarm_index] = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        return global_best_position, global_best_score", "name": "AdaptiveMultiSwarmOptimizer", "description": "Adaptive Multi-Swarm Optimization inspired by biological swarm intelligence that dynamically updates based on fitness landscape.", "configspace": "", "generation": 0, "fitness": 0.24105885551471318, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.4862322803710355, 0.6582290832784772, 0.5407572849044093, 0.5055057034111472, 0.6183781883170291, 0.5512612764117153, 0.48064110045188757, 0.5831390960298023, 0.6152071653755766, 0.0020011082753582654, 0.05867656416442513, 0.019601371712092752, 9.999999999998899e-05, 0.04496366129369345, 9.999999999998899e-05, 9.999999999998899e-05, 0.05954965357752495, 0.0330302421786306, 0.14002420196052767, 0.08528383941896067, 0.09087848069850957, 0.09677894555124911, 0.1138804342001688, 0.10250300346533381, 0.10821039604840366, 0.10447468569920204, 0.1231589732888444, 0.09354199276129149, 0.08957525373586228, 0.08724352612557429, 0.12470025320764433, 0.04951597841207389, 0.09076752634938057, 0.09847960135269018, 0.09585198566799913, 0.09102839748180125, 0.9689761325520265, 0.9765171762030597, 0.946481724080039, 0.9191188443163193, 0.9621309707596356, 0.9588204681947742, 0.9632836411303316, 0.9646953043190667, 0.9555146686760347, 0.2973329509445677, 0.22056678563417653, 0.3203957402218125, 0.28027227223980433, 0.3404320201248866, 0.2078798507610351, 0.16526294734739166, 0.21436526605094364, 0.35206680107554944, 0.17047927894921577, 0.5357178469857142, 0.40808094104273973, 0.25875137592730924, 0.25992119683124715, 0.18844552702508177, 0.18597038572768432, 0.22176945135821025, 0.3568153949936632, 0.18308797556219958, 0.18402289251888515, 0.12698329682104303, 0.15378824094682408, 0.11808836970703229, 0.2786495425752231, 0.14363551619880277, 0.19031904887019213, 0.12524418545261273, 0.11731296213491349, 0.10623758530607719, 0.12408372977566073, 0.17523587844977606, 0.16750796436062299, 0.2371097384248887, 0.12113212499849435, 0.21100643028193555, 0.10723547703822156, 0.08012199334122838, 0.05612386747338294, 9.999999999998899e-05, 9.999999999998899e-05, 0.020224478247846345, 0.06639555056272695, 0.013752865352778088, 0.016366790019254007, 0.05026982364813104, 0.09005001813186242, 0.05659143557984114, 0.14615268246983992, 0.13482983186063358, 0.20507677416988213, 0.08579148050646546, 0.1512919273499076, 0.19350188942044744, 0.05289321117578094, 0.054127389337528475, 0.080430722635492, 0.025238178809726564, 0.040257281837767556, 0.06087653901881662, 0.04719719041344084, 0.05270401729835428, 0.10152376721186307, 0.07196571867246004, 0.08363650581620674, 0.046089570959738424, 0.08182515518723432, 0.13337748872983834, 0.11725898527734713, 0.07750089657010117, 0.038453760040997764, 0.07105397810882386, 0.07158701379989996, 0.4359744316720937, 0.4969244616834978, 0.48128161308604234, 0.43554500495316983, 0.4580200960091583, 0.5057659886247146, 0.41671335068753546, 0.45674719511913486, 0.4950677918429386, 0.09842862509466499, 0.09842364103052659, 0.11914588113592794, 0.10198236290991192, 0.11265722205055206, 0.10746381986481557, 0.10784291784470845, 0.12042093854002744, 0.08836444547007738, 0.23092646372053416, 0.2767058715639761, 0.17150730172502915, 0.19072995299325302, 0.2422011362985419, 0.19835705058189657, 0.1919823166769583, 0.14779236923449024, 0.20454349175784026, 0.29727462591730547, 0.32317233800009326, 0.3395860571730921, 0.27541291441718974, 0.3455872309045753, 0.2742681691427973, 0.250883465035854, 0.29247190216701124, 0.3193989639579292, 0.1736461087058344, 0.2283001390502193, 0.2625182723795414, 0.19057210399995628, 0.2443149121119802, 0.21965772899496483, 0.2100807483813587, 0.3012142451735398, 0.18156962921711428, 0.2316421665899583, 0.19902684062428, 0.2088449793563113, 0.20928552094034103, 0.19904992595311244, 0.224734952506774, 0.19941457477167301, 0.21871075008061247, 0.23231563575773917, 0.1866274851319577, 0.18097266600691753, 0.20120782328830722, 0.21165073840785587, 0.24100860372880428, 0.1838369861765743, 0.18868679031519664, 0.19529860216051742, 0.1824443611714136, 0.26775595786664097, 0.1962571578616097, 0.8417173137726355, 0.7094140267113145, 0.19843113439208138, 0.1605848190239365, 0.14009429202440893, 0.7710847580263054, 0.7307964077530444, 0.46482107892213176, 0.16844216568632053, 0.8405259830024405, 0.6002598882241025, 0.6855497306789688, 0.1676138839947383, 0.16852994837607727, 0.1492443739431788, 0.6494820333814406, 0.18564834749017156, 0.21872304873322157, 0.2039352181354147, 0.19737477955279703, 0.19534281661105846, 0.1867516515994847, 0.18991928117450607, 0.21033158032374, 0.19764541244847533, 0.07947965413099622, 0.07690066795461903, 0.07594410864975476, 0.08571620203223718, 0.09121398245821566, 0.08848637502690215, 0.08806355362737761, 0.08292702413869124, 0.09864347646859317]}, "mutation_prompt": null}
{"id": "02682250-ce3e-477e-b404-e79944d46036", "solution": "import numpy as np\n\nclass AdaptiveMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.num_swarms = 5\n        self.max_iter = self.budget // self.num_particles\n        self.inertia_weight = 0.7\n        self.cognitive_param = 1.5\n        self.social_param = 1.5\n\n    def __call__(self, func):\n        particles = [np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        velocities = [np.random.uniform(-1, 1, (self.num_particles, self.dim)) for _ in range(self.num_swarms)]\n        personal_best_positions = [p.copy() for p in particles]\n        personal_best_scores = [np.inf * np.ones(self.num_particles) for _ in range(self.num_swarms)]\n        global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        global_best_score = np.inf\n\n        eval_count = 0\n\n        for iteration in range(self.max_iter):\n            for swarm_index in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    if eval_count >= self.budget:\n                        break\n\n                    fitness = func(particles[swarm_index][i])\n                    eval_count += 1\n\n                    if fitness < personal_best_scores[swarm_index][i]:\n                        personal_best_scores[swarm_index][i] = fitness\n                        personal_best_positions[swarm_index][i] = particles[swarm_index][i].copy()\n\n                    if fitness < global_best_score:\n                        global_best_score = fitness\n                        global_best_position = particles[swarm_index][i].copy()\n\n                r1, r2 = np.random.rand(2)\n                velocities[swarm_index] = (self.inertia_weight * velocities[swarm_index] +\n                                           self.cognitive_param * r1 * (personal_best_positions[swarm_index] - particles[swarm_index]) +\n                                           self.social_param * r2 * (global_best_position - particles[swarm_index]))\n                \n                particles[swarm_index] += velocities[swarm_index]\n                particles[swarm_index] = np.clip(particles[swarm_index], self.lower_bound, self.upper_bound)\n\n                if eval_count >= self.budget:\n                    break\n\n            # Adaptive behavior: reinitialize swarms periodically\n            if iteration % (self.max_iter // 10) == 0:\n                for swarm_index in range(self.num_swarms):\n                    if np.random.rand() < 0.3:  # Reinitialize with 30% probability\n                        particles[swarm_index] = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n\n        return global_best_position, global_best_score", "name": "AdaptiveMultiSwarmOptimizer", "description": "Adaptive Multi-Swarm Optimization inspired by biological swarm intelligence that dynamically updates based on fitness landscape.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6569c863-04a7-4c3d-b1f7-1557d692c6e9", "metadata": {"aucs": [0.4862322803710355, 0.6582290832784772, 0.5407572849044093, 0.5055057034111472, 0.6183781883170291, 0.5512612764117153, 0.48064110045188757, 0.5831390960298023, 0.6152071653755766, 0.0020011082753582654, 0.05867656416442513, 0.019601371712092752, 9.999999999998899e-05, 0.04496366129369345, 9.999999999998899e-05, 9.999999999998899e-05, 0.05954965357752495, 0.0330302421786306, 0.14002420196052767, 0.08528383941896067, 0.09087848069850957, 0.09677894555124911, 0.1138804342001688, 0.10250300346533381, 0.10821039604840366, 0.10447468569920204, 0.1231589732888444, 0.09354199276129149, 0.08957525373586228, 0.08724352612557429, 0.12470025320764433, 0.04951597841207389, 0.09076752634938057, 0.09847960135269018, 0.09585198566799913, 0.09102839748180125, 0.9689761325520265, 0.9765171762030597, 0.946481724080039, 0.9191188443163193, 0.9621309707596356, 0.9588204681947742, 0.9632836411303316, 0.9646953043190667, 0.9555146686760347, 0.2973329509445677, 0.22056678563417653, 0.3203957402218125, 0.28027227223980433, 0.3404320201248866, 0.2078798507610351, 0.16526294734739166, 0.21436526605094364, 0.35206680107554944, 0.17047927894921577, 0.5357178469857142, 0.40808094104273973, 0.25875137592730924, 0.25992119683124715, 0.18844552702508177, 0.18597038572768432, 0.22176945135821025, 0.3568153949936632, 0.18308797556219958, 0.18402289251888515, 0.12698329682104303, 0.15378824094682408, 0.11808836970703229, 0.2786495425752231, 0.14363551619880277, 0.19031904887019213, 0.12524418545261273, 0.11731296213491349, 0.10623758530607719, 0.12408372977566073, 0.17523587844977606, 0.16750796436062299, 0.2371097384248887, 0.12113212499849435, 0.21100643028193555, 0.10723547703822156, 0.08012199334122838, 0.05612386747338294, 9.999999999998899e-05, 9.999999999998899e-05, 0.020224478247846345, 0.06639555056272695, 0.013752865352778088, 0.016366790019254007, 0.05026982364813104, 0.09005001813186242, 0.05659143557984114, 0.14615268246983992, 0.13482983186063358, 0.20507677416988213, 0.08579148050646546, 0.1512919273499076, 0.19350188942044744, 0.05289321117578094, 0.054127389337528475, 0.080430722635492, 0.025238178809726564, 0.040257281837767556, 0.06087653901881662, 0.04719719041344084, 0.05270401729835428, 0.10152376721186307, 0.07196571867246004, 0.08363650581620674, 0.046089570959738424, 0.08182515518723432, 0.13337748872983834, 0.11725898527734713, 0.07750089657010117, 0.038453760040997764, 0.07105397810882386, 0.07158701379989996, 0.4359744316720937, 0.4969244616834978, 0.48128161308604234, 0.43554500495316983, 0.4580200960091583, 0.5057659886247146, 0.41671335068753546, 0.45674719511913486, 0.4950677918429386, 0.09842862509466499, 0.09842364103052659, 0.11914588113592794, 0.10198236290991192, 0.11265722205055206, 0.10746381986481557, 0.10784291784470845, 0.12042093854002744, 0.08836444547007738, 0.23092646372053416, 0.2767058715639761, 0.17150730172502915, 0.19072995299325302, 0.2422011362985419, 0.19835705058189657, 0.1919823166769583, 0.14779236923449024, 0.20454349175784026, 0.29727462591730547, 0.32317233800009326, 0.3395860571730921, 0.27541291441718974, 0.3455872309045753, 0.2742681691427973, 0.250883465035854, 0.29247190216701124, 0.3193989639579292, 0.1736461087058344, 0.2283001390502193, 0.2625182723795414, 0.19057210399995628, 0.2443149121119802, 0.21965772899496483, 0.2100807483813587, 0.3012142451735398, 0.18156962921711428, 0.2316421665899583, 0.19902684062428, 0.2088449793563113, 0.20928552094034103, 0.19904992595311244, 0.224734952506774, 0.19941457477167301, 0.21871075008061247, 0.23231563575773917, 0.1866274851319577, 0.18097266600691753, 0.20120782328830722, 0.21165073840785587, 0.24100860372880428, 0.1838369861765743, 0.18868679031519664, 0.19529860216051742, 0.1824443611714136, 0.26775595786664097, 0.1962571578616097, 0.8417173137726355, 0.7094140267113145, 0.19843113439208138, 0.1605848190239365, 0.14009429202440893, 0.7710847580263054, 0.7307964077530444, 0.46482107892213176, 0.16844216568632053, 0.8405259830024405, 0.6002598882241025, 0.6855497306789688, 0.1676138839947383, 0.16852994837607727, 0.1492443739431788, 0.6494820333814406, 0.18564834749017156, 0.21872304873322157, 0.2039352181354147, 0.19737477955279703, 0.19534281661105846, 0.1867516515994847, 0.18991928117450607, 0.21033158032374, 0.19764541244847533, 0.07947965413099622, 0.07690066795461903, 0.07594410864975476, 0.08571620203223718, 0.09121398245821566, 0.08848637502690215, 0.08806355362737761, 0.08292702413869124, 0.09864347646859317]}, "mutation_prompt": null}
