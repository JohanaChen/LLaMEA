{"id": "815e7610-3841-4111-94cc-7375a53e4b83", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 10 * dim\n        self.mutation_factor = 0.5\n        self.crossover_prob = 0.9\n        \n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.eval_count = 0\n    \n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                if self.eval_count >= self.budget:\n                    break\n                \n                # Select three random indices different from current index i\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Generate mutant vector\n                mutant_vector = self.population[a] + \\\n                                self.mutation_factor * (self.population[b] - self.population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                # Crossover\n                trial_vector = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_prob:\n                        trial_vector[j] = mutant_vector[j]\n                \n                # Evaluate trial vector\n                trial_fitness = func(trial_vector)\n                self.eval_count += 1\n                \n                # Selection\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n            \n            # Adaptive strategy adjustment\n            self._adapt_strategy()\n        \n        best_index = np.argmin(self.fitness)\n        return self.population[best_index], self.fitness[best_index]\n    \n    def _adapt_strategy(self):\n        # Adapt mutation factor and crossover probability based on success rate\n        success_rate = np.mean(self.fitness < np.median(self.fitness))  # Simple heuristic\n        self.mutation_factor = 0.5 + 0.2 * (1 - success_rate)  # Adjust mutation factor\n        self.crossover_prob = 0.9 - 0.2 * (1 - success_rate)  # Adjust crossover probability", "name": "AdaptiveDifferentialEvolution", "description": "An adaptive differential evolution algorithm with self-tuning mutation and crossover strategies to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.31061764372732825, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7752612654643634, 0.7634953934046956, 0.7611017016342475, 0.7736160517161998, 0.7804948662741275, 0.7632130357256214, 0.7808091208775165, 0.7737278733104092, 0.778500811051439, 0.5894902413523568, 0.5770525597829377, 0.61911335013381, 0.5720741343152753, 0.5987920766844874, 0.5905725520062148, 0.6134312056421376, 0.6117859801589158, 0.5700281628679307, 0.11875538871404334, 0.12157990573678668, 0.10945502980746946, 0.11815726392684467, 0.11757248998759018, 0.11313252409626418, 0.11524985519817199, 0.12983449925967694, 0.1105701054445013, 0.10582475439476258, 0.10498362437339814, 0.11103389505424255, 0.11033260812524182, 0.11218304420876901, 0.11091822687594699, 0.11363241386007672, 0.10479396688918474, 0.11124212179629978, 0.9801668711448244, 0.918763547025506, 0.9330704650383383, 0.9311737473985713, 0.9319418689731404, 0.9551278302117683, 0.931508784229596, 0.9553504321193333, 0.953945529170405, 0.38966600757229775, 0.3993232523217727, 0.3716103593344908, 0.37183669830638266, 0.4064533372895125, 0.4179003066454857, 0.3991985516638318, 0.41873876218294237, 0.3924365883630364, 0.5609832145663991, 0.5949057560653661, 0.6186424007707733, 0.6521149535137898, 0.6649580507461612, 0.680965748136902, 0.6292554245844193, 0.6875975815957727, 0.6919159699410868, 0.2041500269343831, 0.17801817352365656, 0.25627606691201954, 0.21787898726430854, 0.25513992576463607, 0.21512087857265838, 0.3035630997290387, 0.24846557452808915, 0.2669293678181571, 0.22110307460359724, 0.18389338796686394, 0.1038968222490948, 0.21006454450149126, 0.1976887171730758, 0.2334759909672135, 0.2829920763346455, 0.26265819424068604, 0.1849084267526534, 0.1043581191132138, 0.13219328467798475, 0.144249354511375, 0.12620277877404185, 0.1554989117826202, 0.09612541378772455, 0.11007943005015663, 0.14291636607098712, 0.13830282112116932, 0.2705938739293643, 0.23860342475888185, 0.25015181003613607, 0.2682522639081165, 0.230876884000363, 0.24049819747974133, 0.28479541717481693, 0.2879264670275197, 0.3168096755754214, 0.0680606699261862, 0.02453796805958841, 0.06603428374327613, 0.05401532101070439, 0.051686854192455, 0.03866961732908436, 0.07630107329518354, 0.06507434722691574, 0.05512318060398558, 0.18970334511109577, 0.17118606311363416, 0.19065264499616474, 0.20707793465692093, 0.2119965523024092, 0.22351002211908577, 0.18584171734236032, 0.17471525848866187, 0.1776500819100042, 0.5885669187135234, 0.5607072834492232, 0.5690550560321255, 0.5821639170369394, 0.5580294778487234, 0.5750095073856891, 0.5830128827749725, 0.5693057805695676, 0.5385174584112901, 0.10183412053774243, 0.08725484320324484, 0.09672078007924534, 0.13153699227643323, 0.09095463551995053, 0.0924548389372607, 0.08924737853757692, 0.0883625976068626, 0.0757466537413326, 0.12802652491988942, 0.15137548173111315, 0.15169649116281247, 0.15773602172227785, 0.14883816278980266, 0.14863950672897785, 0.15917917840928097, 0.14587621956461172, 0.13377140788411512, 0.32794700509225727, 0.3454125037607356, 0.3383922480593732, 0.31921659130867375, 0.3243670016908522, 0.3308618730053423, 0.3552103619510061, 0.3738282834450959, 0.3628950957381617, 0.24864508289669096, 0.25621272749495516, 0.23660358503124213, 0.2263826377267686, 0.24063567615913717, 0.22736472508791372, 0.24126616611806107, 0.2679209409974238, 0.2558083381223053, 0.1782579180693985, 0.1772491558948477, 0.17577244176052553, 0.19623417644655605, 0.17562540628749979, 0.18764452954689803, 0.19492512681621021, 0.21410558070201458, 0.19567762215330153, 0.21237872807524927, 0.18695681329618974, 0.1805590866189909, 0.1922977075504716, 0.18749003544128495, 0.18735763365748415, 0.20360921053087444, 0.18734009243385652, 0.18584785540190174, 0.7059537046450869, 0.5946113952349623, 0.5664697273475905, 0.24825671230529267, 0.3115184084863456, 0.1983418566773253, 0.16153825019852752, 0.37758362022000314, 0.553558925423917, 0.19875919486590754, 0.196395357208194, 0.49210571228525524, 0.26010679226169964, 0.18659904342361466, 0.4609259232797135, 0.2083343002949749, 0.4586933921646873, 0.5711997967881794, 0.18534315887497477, 0.17684484976141246, 0.17402841841110184, 0.1862201906795744, 0.1783320032197815, 0.20979158373827123, 0.1800193925296939, 0.17713521042929026, 0.17858251900129762, 0.07743014810344995, 0.07769817070671559, 0.07087089514773093, 0.07225160759210081, 0.08195763255818656, 0.09202473679949941, 0.08800999606052151, 0.0883600880978187, 0.07777934422857802]}, "mutation_prompt": null}
{"id": "31fbad53-e9e5-4754-bfbc-1718a65ee85a", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 10 * dim\n        self.mutation_factor = 0.5\n        self.crossover_prob = 0.9\n        \n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.eval_count = 0\n    \n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                if self.eval_count >= self.budget:\n                    break\n                \n                # Select three random indices different from current index i\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Generate mutant vector\n                mutant_vector = self.population[a] + \\\n                                self.mutation_factor * (self.population[b] - self.population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                # Crossover\n                trial_vector = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_prob:\n                        trial_vector[j] = mutant_vector[j]\n                \n                # Evaluate trial vector\n                trial_fitness = func(trial_vector)\n                self.eval_count += 1\n                \n                # Selection\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n            \n            # Adaptive strategy adjustment\n            self._adapt_strategy()\n            if self.eval_count % (self.budget // 10) == 0:  # Dynamic population resizing\n                self.pop_size = max(5, int(self.pop_size * 0.9))\n        \n        best_index = np.argmin(self.fitness)\n        return self.population[best_index], self.fitness[best_index]\n    \n    def _adapt_strategy(self):\n        # Adapt mutation factor and crossover probability based on success rate\n        success_rate = np.mean(self.fitness < np.median(self.fitness))  # Simple heuristic\n        self.mutation_factor = 0.5 + 0.2 * (1 - success_rate)  # Adjust mutation factor\n        self.crossover_prob = 0.9 - 0.2 * (1 - success_rate)  # Adjust crossover probability", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced adaptive differential evolution with dynamic population resizing to improve exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": 0.32602794162784376, "feedback": "", "error": "", "parent_id": "815e7610-3841-4111-94cc-7375a53e4b83", "metadata": {"aucs": [0.7991505864956046, 0.7818913153767372, 0.7739449394611813, 0.7963899169033222, 0.7872681704559549, 0.7902101916845152, 0.7779922979302382, 0.785141865933533, 0.7920643177987909, 0.6410104211660521, 0.603958523417875, 0.6167558364870356, 0.6007621244408954, 0.6300202990038528, 0.6494519611735777, 0.6513953111823361, 0.6263427906652226, 0.6116256230961133, 0.13541951504388494, 0.12279178601032958, 0.10564570365896231, 0.11081815304909592, 0.12981259306774462, 0.14325891927671286, 0.12912062208047137, 0.13751770567462773, 0.10861834524682168, 0.11774984841466807, 0.12406819381398926, 0.105633127303017, 0.1060173191391417, 0.1013178838468306, 0.11400472813959972, 0.10845331923555457, 0.10619425999903997, 0.10233861627576912, 0.9801668711448244, 0.9150970865035293, 0.9330704650383383, 0.9311737473985713, 0.9319418689731404, 0.9551278302117683, 0.931508784229596, 0.9553504321193333, 0.953945529170405, 0.4156593662738757, 0.4075273976977568, 0.4063461200483103, 0.4070380286242301, 0.42213683979513117, 0.4340018097002132, 0.42988754570124565, 0.4418585079107392, 0.4196076960864624, 0.6686302242996405, 0.6311969959595467, 0.6092845361408821, 0.6835902542274714, 0.7302178953833107, 0.6579312941914448, 0.6756272661851693, 0.6839658109793891, 0.6927685718914034, 0.20263710433677506, 0.2683299147303162, 0.22743311062629468, 0.27106829961983403, 0.27803928636785513, 0.26930226511897626, 0.2378687407794443, 0.20278126902876148, 0.2367209814038701, 0.23309990216617327, 0.19376719667979136, 0.16133884038305135, 0.2746619196889194, 0.2728338990407717, 0.22693902380012354, 0.21516729657617628, 0.1927329118452944, 0.2493778186359652, 0.14813240141029105, 0.16273062384035586, 0.15981048437336065, 0.11491117464701806, 0.11804848189146944, 0.14181619379530364, 0.120380992262618, 0.12067067909071816, 0.13301306660306578, 0.2892109566536063, 0.2642422927924727, 0.2935638044347918, 0.27445812563355, 0.25930569330134834, 0.28434143309395155, 0.34730200767520214, 0.30923347478424323, 0.3438345422894079, 0.06315201251273506, 0.068171323011459, 0.07200679989332015, 0.08573038306704495, 0.07539996608975341, 0.06293013386430191, 0.058641750226192, 0.06965761258524616, 0.09651510726446777, 0.18958731323175637, 0.20856994505759885, 0.19264021131285247, 0.22955343813532592, 0.22682215816786, 0.20306307826136316, 0.21157761055641366, 0.1992857586230573, 0.17452027430301753, 0.5652515950295698, 0.5849164234499896, 0.5618575105684629, 0.5905019080205718, 0.5596403728432215, 0.5799550725431726, 0.6262969856080846, 0.5918310773396427, 0.575314851021461, 0.09164184188520008, 0.09011927499747052, 0.09260223082859975, 0.09485958452758059, 0.1024458462728639, 0.08490368034966744, 0.09086239466193968, 0.09471385211349748, 0.14193952997556025, 0.14151659066065603, 0.13058862226050638, 0.17153522470473237, 0.13666568789484046, 0.13537706625445622, 0.14031845153974498, 0.13965966469923752, 0.14393865087330726, 0.15784339220408583, 0.3432234965795856, 0.34379842771429714, 0.33387451321857275, 0.3602659674824841, 0.33438142249399816, 0.33999642180047385, 0.3918815435746231, 0.3825886217631397, 0.4029796549192508, 0.2603720018557476, 0.2575261630972858, 0.2492037961369472, 0.23103743018410172, 0.25104742560021465, 0.2255626010296392, 0.2650512162323301, 0.2758082097424941, 0.2802604706117898, 0.1849510685408563, 0.20454701821684773, 0.21031178962099017, 0.21399274747476416, 0.18341574859850795, 0.19096375166019408, 0.18852113728369224, 0.21291119702331662, 0.19696249428253576, 0.20506725890521882, 0.19270043385189506, 0.1875219803410706, 0.20236778663092692, 0.19086389178346286, 0.20494634452117078, 0.1812240942454919, 0.18908626270093665, 0.1894146253129657, 0.6928858670692384, 0.49255244732436354, 0.6772518571960786, 0.5104846702771763, 0.4281858007885959, 0.5112107794354964, 0.45783933474946015, 0.4395893799836441, 0.19981634563356632, 0.5173586748216266, 0.45316552625229856, 0.494942534453385, 0.19850001701526399, 0.19503733316813432, 0.19542129450045276, 0.20834229024388196, 0.5422892584960692, 0.6473647064470075, 0.18455365178454408, 0.17975886685576492, 0.17273117600225574, 0.1939339499757433, 0.18085395528713144, 0.20979158373827123, 0.19717232596618273, 0.18001074991694388, 0.18011110859358892, 0.0737055090141926, 0.07352870216446716, 0.07334598892896937, 0.06816468311407642, 0.08320469476652237, 0.0911883417794026, 0.07155498182836795, 0.08092255329408093, 0.07379105918830686]}, "mutation_prompt": null}
