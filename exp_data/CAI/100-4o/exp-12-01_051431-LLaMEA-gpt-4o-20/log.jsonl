{"id": "a16ce4e9-b6cc-400a-aa66-c084cba465d0", "solution": "import numpy as np\n\nclass CPSO_AL:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = min(40, budget // dim)\n        self.low_bound = -5.0\n        self.up_bound = 5.0\n        self.w = 0.7  # inertia weight\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.adaptive_lr_min = 0.4\n        self.adaptive_lr_max = 0.9\n\n    def _initialize_swarm(self):\n        positions = np.random.uniform(self.low_bound, self.up_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        return positions, velocities, personal_best_positions, personal_best_scores\n\n    def _update_velocity(self, velocities, positions, personal_best_positions, global_best_position):\n        r1, r2 = np.random.uniform(0, 1, (2, self.swarm_size, self.dim))\n        cognitive_component = self.c1 * r1 * (personal_best_positions - positions)\n        social_component = self.c2 * r2 * (global_best_position - positions)\n        velocities = self.w * velocities + cognitive_component + social_component\n        return velocities\n\n    def __call__(self, func):\n        positions, velocities, personal_best_positions, personal_best_scores = self._initialize_swarm()\n        global_best_position = np.zeros(self.dim)\n        global_best_score = np.inf\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if eval_count >= self.budget:\n                    break\n                score = func(positions[i])\n                eval_count += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions\n            velocities = self._update_velocity(velocities, positions, personal_best_positions, global_best_position)\n            adaptive_lr = np.linspace(self.adaptive_lr_max, self.adaptive_lr_min, self.budget)\n            adaptive_w = adaptive_lr[min(eval_count, self.budget - 1)]\n            positions = np.clip(positions + adaptive_w * velocities, self.low_bound, self.up_bound)\n\n        return global_best_position", "name": "CPSO_AL", "description": "Cooperative Particle Swarm Optimization with Adaptive Learning (CPSO-AL), which combines cooperative swarming with adaptive learning rates for enhanced exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.30369350652054394, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.876362749346649, 0.8665878543587546, 0.86611427012141, 0.8731535109293322, 0.8807496025597281, 0.8776110124403085, 0.8808584392083146, 0.8881115341126786, 0.18297683442777601, 0.6624285811878445, 0.7090694587673269, 0.4180539446524344, 0.7105700269639955, 0.04494866350486881, 0.6859047879924456, 0.6341936095422209, 0.7214935319197133, 0.6533989784795566, 0.14246139601903107, 0.11623902711143652, 0.1564374592096609, 0.17841696379996752, 0.5769889721508055, 0.17886694214760102, 0.11679785638509599, 0.15286971965228735, 0.17582191663749314, 0.11645693924644751, 0.11906093582563482, 0.10424691708314116, 0.12264347111509433, 0.11017087663276748, 0.12575475270567227, 0.14796876937704906, 0.10709920301083053, 0.18074875352411213, 0.9875245145190902, 0.988992571798841, 0.985460186259808, 0.9718340448331437, 0.9821684192131016, 0.9712001417654144, 0.9857739183275754, 0.9874789081095107, 0.9819074643294671, 0.6779908959263472, 0.7502483438346612, 0.710338104103317, 0.7512198636715888, 0.5403487978998656, 0.15373545767155916, 0.12651862626798116, 0.7246021142623197, 0.7538001420577629, 0.21279889796127704, 0.1379278415011217, 0.17247006825285538, 0.21480098202981157, 0.8869283439040619, 0.19408633064482927, 0.16588184548703033, 0.1258491963898174, 0.22367540615985382, 0.23925512500411028, 0.2557919555448155, 0.11825059495207169, 0.13034708106573856, 0.24648827120283634, 0.22683974365410475, 0.21640503869846894, 0.20666641778902284, 0.24493525060883736, 0.24353392121772743, 0.23587209798441422, 0.24262960681193058, 0.20096590660519853, 0.2914568477463323, 0.2698464921915864, 0.2514918359552375, 0.1113717372418036, 0.2526163738592989, 0.009365554234607276, 0.08443529893824231, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006854019186332105, 9.999999999998899e-05, 0.2968593831080194, 0.09644664393619118, 0.09414073413277035, 0.06730354135902994, 0.04796853526610789, 0.0340531516129573, 0.06530704418216815, 0.05961607100378019, 0.08634289128110273, 0.04484677057601205, 0.04858990596906021, 0.035172103596625814, 0.17961834501742702, 0.07589600752822256, 0.179896028680121, 0.0779399715882737, 0.26302658092665665, 0.12406341059743986, 0.0705740928071118, 0.1091872290584841, 0.19038311991732926, 0.07839984358182317, 0.08296228568867192, 9.999999999998899e-05, 0.10091737549073809, 0.04849987437614167, 0.08241205117982586, 0.08287487013184691, 0.5440297882000387, 0.578374183718507, 0.5624711102891888, 0.5393554875757791, 0.5432027052167965, 0.5262754923422162, 0.600889874628939, 0.5732230799911882, 0.5751214376339441, 0.08044745628563632, 0.1208801364640858, 0.09424034185077523, 0.1320415295537476, 0.15651263064422527, 0.10500049520196575, 0.13851247610069128, 0.09519735574606836, 0.11500690969130445, 0.20435762125337265, 0.30305660004109625, 0.1683103554792611, 0.24712982676489947, 0.2949898248740427, 0.26497426028395044, 0.25453320911638844, 0.19875618713525522, 0.23298931399913114, 0.3450520687948335, 0.24037138560052496, 0.42415005340104683, 0.3098125553796949, 0.2876021135858774, 0.26591537190668924, 0.44527270681278386, 0.43530985725463045, 0.2075418280721989, 0.146194856309534, 0.18230043187781853, 0.25615455572331214, 0.17006634723856262, 0.31683938748047835, 0.273550611485319, 0.27592582687347966, 0.4182406223954036, 0.197414808751456, 0.28714810222250187, 0.15383774988698318, 0.25942030644296243, 0.25274756377829677, 0.19792613833252393, 0.21072174467974547, 0.2566345088798756, 0.2083219303717001, 0.2046698108770052, 0.22564779057783757, 0.18676843133259247, 0.20958674017283174, 0.22685146314716853, 0.22144111792830368, 0.18971289633544286, 0.22459439387647562, 0.2521846001712683, 0.19645519589486704, 0.919055951864627, 0.16921977031692692, 0.15417237990625599, 0.9254300305578497, 0.20117725453728663, 0.17040550474174943, 0.14195727454647655, 0.17058700946781769, 0.9024482832928267, 0.7020006831968633, 0.2141213553270368, 0.7605616854222437, 0.10498008316302987, 0.1691375461865673, 0.15568914650584686, 0.10378332925314626, 0.10456871695630021, 0.774045060833412, 0.21473006521917914, 0.20923647161242376, 0.2118116269711917, 0.1971114995548754, 0.21663199458450022, 0.2168715816179746, 0.21455566231208645, 0.18311561471498994, 0.23666224142422754, 0.10914215684943884, 0.10353480196785736, 0.09794241755234379, 0.09580388286936736, 0.08814344052032708, 0.09101158167806256, 0.11477187205880979, 0.10438104043701801, 0.10021610406388848]}, "mutation_prompt": null}
{"id": "fec347cf-c6ba-42f8-b5ae-94932078400b", "solution": "import numpy as np\n\nclass CPSO_AL:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = min(40, budget // dim)\n        self.low_bound = -5.0\n        self.up_bound = 5.0\n        self.w_max = 0.9  # dynamic inertia weight max\n        self.w_min = 0.4  # dynamic inertia weight min\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.adaptive_lr_min = 0.4\n        self.adaptive_lr_max = 0.9\n\n    def _initialize_swarm(self):\n        # Quantum-inspired initialization\n        positions = np.random.normal(0, 1, (self.swarm_size, self.dim)) * (self.up_bound - self.low_bound) / 2\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        return positions, velocities, personal_best_positions, personal_best_scores\n\n    def _update_velocity(self, velocities, positions, personal_best_positions, global_best_position, eval_count):\n        r1, r2 = np.random.uniform(0, 1, (2, self.swarm_size, self.dim))\n        cognitive_component = self.c1 * r1 * (personal_best_positions - positions)\n        social_component = self.c2 * r2 * (global_best_position - positions)\n        # Dynamic inertia weight\n        w = self.w_max - (eval_count / self.budget) * (self.w_max - self.w_min)\n        velocities = w * velocities + cognitive_component + social_component\n        return velocities\n\n    def __call__(self, func):\n        positions, velocities, personal_best_positions, personal_best_scores = self._initialize_swarm()\n        global_best_position = np.zeros(self.dim)\n        global_best_score = np.inf\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if eval_count >= self.budget:\n                    break\n                score = func(positions[i])\n                eval_count += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions\n            velocities = self._update_velocity(velocities, positions, personal_best_positions, global_best_position, eval_count)\n            adaptive_lr = np.linspace(self.adaptive_lr_max, self.adaptive_lr_min, self.budget)\n            adaptive_w = adaptive_lr[min(eval_count, self.budget - 1)]\n            positions = np.clip(positions + adaptive_w * velocities, self.low_bound, self.up_bound)\n\n        return global_best_position", "name": "CPSO_AL", "description": "Enhanced CPSO with Dynamic Inertia and Quantum Particle Initialization for faster convergence and better exploration-exploitation balance.", "configspace": "", "generation": 1, "fitness": 0.2355511351429343, "feedback": "", "error": "", "parent_id": "a16ce4e9-b6cc-400a-aa66-c084cba465d0", "metadata": {"aucs": [0.7828232470633079, 0.7807130109726484, 0.7735460055408305, 0.7870395828432379, 0.7925668582618579, 0.7634718021500942, 0.7773772236063182, 0.7603980315110895, 0.7820785286870333, 9.999999999998899e-05, 9.999999999998899e-05, 0.5575744739463202, 0.06850757493003201, 0.5526649446729122, 0.04024543792339086, 0.046225733957124926, 0.587845633428904, 0.01604791637850922, 0.09827013787771444, 0.5304484850392134, 0.1563488262637417, 0.07275832947978556, 0.12970525977773573, 0.13992001713023106, 0.13688533725661056, 0.11328076089579098, 0.12424148754866549, 0.122240872283916, 0.12741365221336476, 0.10290324857969169, 0.12045388772854926, 0.12369831779004303, 0.15520219377474676, 0.1374541471991666, 0.12019587519695196, 0.10570046069242889, 0.9913589291620521, 0.9927102887543148, 0.9903617157550834, 0.9948906348362024, 0.9848330905337825, 0.9917223308752586, 0.9821888134649468, 0.9864976544641992, 0.9921323459872504, 0.058366196951673, 0.5221507609599616, 0.6191596064037157, 0.14645193408474078, 0.15743380169618426, 0.39365414246286834, 0.0511202752924762, 0.05141374236286156, 0.08837254456636578, 0.22383858285938263, 0.21672124722762076, 0.7243583396217412, 0.1198556015538792, 0.15970919526780525, 0.11588155336978001, 0.2128177526513556, 0.12721299818477383, 0.35827418409713596, 0.19562467405670936, 0.22404753834217428, 0.18439855892021295, 0.14972405300258074, 0.09213352226590887, 0.1838411722914156, 0.1807166205697739, 0.1869317441611258, 0.1734848630697241, 0.01565358778895931, 0.20231524208827478, 0.04972582571818529, 0.11797172955530111, 0.1582403208223928, 0.11991005076810779, 0.207357678103398, 0.16767809628343489, 0.13846364007785827, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0370296041859719, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05023820229536846, 0.021998790143876623, 0.16219316395658512, 0.06897511557888558, 0.007094167284699471, 0.00500007456186391, 0.016290070535330048, 0.004323736054523075, 0.022803390573843507, 0.04316971407028869, 9.999999999998899e-05, 0.04071476271646568, 0.06349908879412047, 0.061519814061059885, 0.06333829668441371, 0.13582896953423185, 0.06808728907983552, 0.05664999144609262, 0.10746902214409415, 0.038656279675076566, 0.0363501900176707, 0.036514040432971906, 0.2739594798494006, 0.005748171035706906, 9.999999999998899e-05, 0.07521319877231547, 0.046719034779379776, 0.46419059173572796, 0.499030091210398, 0.5095950165308081, 0.5098738506156906, 0.4785020310898054, 0.1824631441415837, 0.5089454979820731, 0.5411029050169304, 0.5506853346080356, 0.08735971891373462, 0.08269047130794549, 0.07235146499474954, 0.1305841612853197, 0.10937551192069639, 0.12625461389883108, 0.09839368723266106, 0.06470932802929596, 0.10530533076455906, 0.15349020535736468, 0.17612153387580842, 0.16320521091952123, 0.24724019923011953, 0.1754715680233554, 0.1991769454471346, 0.14119815569503336, 0.19323847404516914, 0.2292965565564652, 0.17252339793639027, 0.20586780413523675, 0.32059066454666896, 0.4473687692770012, 0.3717120038231576, 0.3516833705970366, 0.4487840759981162, 0.2798486025252418, 0.27771409000699665, 0.2801265480406371, 0.24671756796669364, 0.14434858810288975, 0.14727966094848288, 0.19347058418386864, 0.14606368736728126, 0.13506073124604612, 0.14082821380436295, 0.25626867432784484, 0.2026271756958079, 0.19260513770244947, 0.16544324931881949, 0.1721712169169587, 0.20659603917493463, 0.22308589670295076, 0.17871404289502713, 0.19563439785370618, 0.21932238379628666, 0.18671710691726418, 0.21044830652319246, 0.1916568534477322, 0.21230889184132584, 0.22215949794955636, 0.1987839651606047, 0.6544284905486379, 0.2147451003612455, 0.24347210764691662, 0.19935361904761373, 0.149391193072689, 0.16563778285915398, 0.19893504071086587, 0.16185376812430474, 0.17408519888621088, 0.7480244000453544, 0.17511517552717648, 0.1616191448916543, 0.16606678588321977, 0.16030178584007804, 0.12512005880361265, 0.12407709362402675, 0.4604764867304425, 0.20827912764803946, 0.1948896805453041, 0.1553054533221384, 0.10341491506231526, 0.18969526532360037, 0.2038099727667846, 0.1822078531539999, 0.18575899332926027, 0.18669510989187177, 0.20411828353786432, 0.17687133339300598, 0.1958411170791612, 0.1921185664924122, 0.12290832716725908, 0.09448478288059647, 0.084434735948416, 0.11662246656514308, 0.09480343486670739, 0.08137662397535461, 0.09011837305049941, 0.0748951830416068, 0.07477141987090796]}, "mutation_prompt": null}
