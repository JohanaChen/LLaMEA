{"id": "e0f40c85-8e4c-4856-ac11-a53062a58bcc", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 30\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temperature = 1.0  # Initial temperature for Simulated Annealing\n        self.cooling_rate = 0.95  # Cooling rate for temperature\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitnesses = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # Differential Evolution\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                x = population[i]\n                a, b, c = population[np.random.choice(self.population_size, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, x)\n                \n                # Evaluate new trial individual\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitnesses[i]:\n                    population[i] = trial\n                    fitnesses[i] = trial_fitness\n\n            # Simulated Annealing refinement\n            best_idx = np.argmin(fitnesses)\n            best_solution = population[best_idx]\n            best_fitness = fitnesses[best_idx]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                candidate = population[i]\n                # Perturb solution\n                perturbation = np.random.normal(0, 1, self.dim) * self.temperature\n                new_candidate = np.clip(candidate + perturbation, self.lower_bound, self.upper_bound)\n                \n                # Evaluate new candidate\n                new_fitness = func(new_candidate)\n                evaluations += 1\n\n                # Accept new candidate with Metropolis criterion\n                if new_fitness < fitnesses[i] or np.random.rand() < np.exp((fitnesses[i] - new_fitness) / self.temperature):\n                    population[i] = new_candidate\n                    fitnesses[i] = new_fitness\n\n            # Reduce temperature\n            self.temperature *= self.cooling_rate\n\n        return best_solution, best_fitness", "name": "HybridDESA", "description": "Hybrid Differential Evolution and Simulated Annealing algorithm that combines population-based search with local refinement via temperature-based perturbations.", "configspace": "", "generation": 0, "fitness": 0.30154461347087275, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.49681566967638335, 0.5063345048451429, 0.4906362227986385, 0.5258029194119257, 0.5007123367445312, 0.49933544260212703, 0.48734793754217376, 0.5171750873801266, 0.49126571847337996, 0.33175952568146183, 0.31400354423276056, 0.3277744207295885, 0.32614795205696245, 0.3408472201505366, 0.29907852935952717, 0.31003565683103806, 0.32653496283368866, 0.3532734139624134, 0.12849590346515127, 0.1516670499290298, 0.12131895550136562, 0.13424175682322403, 0.1288584819223939, 0.13482218646369526, 0.12352790541741032, 0.12482879953631831, 0.1297648903234565, 0.12153922602805067, 0.10184466477696952, 0.11546650195192121, 0.11811783839486323, 0.1255816401517712, 0.11184015425787697, 0.1179948480016858, 0.10648105262315277, 0.12715215872210628, 0.9389802516609135, 0.9585515459149205, 0.933547310704926, 0.9430146719405155, 0.9373336472157126, 0.9228267253770669, 0.9434724800982067, 0.9425232011119616, 0.9373540870542563, 0.34112037698028885, 0.33211425117425586, 0.3529156036404012, 0.35431178857221757, 0.32784105925132434, 0.3541070119027401, 0.33285314907120167, 0.33433304929923857, 0.3367181887594255, 0.6209169062811928, 0.5936986846059567, 0.6097002262667658, 0.6560429813052101, 0.6306412091343387, 0.6359135116425548, 0.48722192476179893, 0.6346598107781761, 0.6401328563927171, 0.2769516844777512, 0.312094519071071, 0.28443325745482506, 0.23448826809710943, 0.24923467336979144, 0.2851554029511173, 0.30953341728792116, 0.28702346805960244, 0.3272091081712528, 0.32243159461947113, 0.34758797653739093, 0.32985456405931013, 0.32240687719616035, 0.2992110737408915, 0.2602121763086307, 0.2977323714752199, 0.2718366611572749, 0.2850968798442084, 0.17799912453201872, 0.19344955993564772, 0.19517236433216512, 0.1768332683773326, 0.16639063047052438, 0.1688989089298566, 0.17928209087329505, 0.1815222817697505, 0.16172443191605035, 0.24648167344043204, 0.29823174231016847, 0.22020044510870151, 0.26637900042721496, 0.23788800976223656, 0.25282258233013066, 0.29118679585064533, 0.263785937599858, 0.31327917159213925, 0.08153042045677172, 0.06384580635556614, 0.08483833756324843, 0.10593845233720134, 0.10577404877980356, 0.10005739357702792, 0.08867829820355178, 0.09178655668279967, 0.09887962285901719, 0.18097853463091718, 0.184326510878285, 0.18273953821286748, 0.20052495141485305, 0.19201807266220328, 0.20537863109209376, 0.19215442484887324, 0.18602357950556347, 0.1930317749955307, 0.45521078522113023, 0.4356387447473481, 0.4404192935819913, 0.4455035347195171, 0.43824225419921103, 0.4314936952297994, 0.43591029135713943, 0.4298047942922597, 0.4340622403754474, 0.14660644450395688, 0.12329187195035995, 0.13096385508143282, 0.1465086860883017, 0.11497281136229354, 0.12589007381022221, 0.11683001416845817, 0.10470214374162301, 0.1004108357176674, 0.24586091981461355, 0.28493916845248346, 0.19369884449737917, 0.1981391552432601, 0.22583233808506997, 0.1960414400724413, 0.2334426482358276, 0.20288542380124408, 0.3176759418198064, 0.27161443294947585, 0.30041433216198943, 0.288016696763429, 0.2960287298504112, 0.23794323007307816, 0.2499641288108042, 0.3134646721424409, 0.2935558246985247, 0.31763958751358246, 0.20267583738945405, 0.2651886168815384, 0.21745575617193302, 0.23929418857076168, 0.2395557777929982, 0.24960418162936626, 0.2787312432704646, 0.2537776074799909, 0.26587560582718206, 0.2028010325508509, 0.19862432790660722, 0.2208505939715586, 0.22662892771176613, 0.21263016195411133, 0.21157487807493813, 0.22525791976643428, 0.2099682743290786, 0.18397039319533803, 0.25806089581757574, 0.20632926503366844, 0.20731679775974365, 0.19854862834177134, 0.28308305444985904, 0.20320319948162313, 0.1938064220659501, 0.2095887834827579, 0.1893515253004865, 0.6753027708500354, 0.6519187063732979, 0.18252200257087492, 0.5449574177413063, 0.5223272570501925, 0.6499811341799425, 0.5441708214702446, 0.6326171210793483, 0.5839588646100491, 0.593842163661437, 0.20478617537870591, 0.20257049772116698, 0.5051328721378466, 0.401953226002594, 0.19614892319969934, 0.20509337501439628, 0.6620150286168152, 0.20631602631469592, 0.20608337447398695, 0.20799239893393184, 0.20072348459101863, 0.19573469393031673, 0.19985262095828393, 0.22383472153318773, 0.2158824571787301, 0.20742079258891322, 0.22075297884325562, 0.08047445138545539, 0.09701424397003755, 0.0847358734592506, 0.07971944946216114, 0.08629553365221165, 0.09056116812769, 0.09252821021273827, 0.07968054192135299, 0.08756281017703238]}, "mutation_prompt": null}
{"id": "592ced1a-7662-4b07-903e-d95e4dbcda71", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 30\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.temperature = 1.0  # Initial temperature for Simulated Annealing\n        self.cooling_rate = 0.95  # Cooling rate for temperature\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitnesses = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # Differential Evolution\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                x = population[i]\n                a, b, c = population[np.random.choice(self.population_size, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, x)\n                \n                # Evaluate new trial individual\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitnesses[i]:\n                    population[i] = trial\n                    fitnesses[i] = trial_fitness\n\n            # Simulated Annealing refinement\n            best_idx = np.argmin(fitnesses)\n            best_solution = population[best_idx]\n            best_fitness = fitnesses[best_idx]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                candidate = population[i]\n                # Perturb solution\n                perturbation = np.random.normal(0, 1, self.dim) * self.temperature\n                new_candidate = np.clip(candidate + perturbation, self.lower_bound, self.upper_bound)\n                \n                # Evaluate new candidate\n                new_fitness = func(new_candidate)\n                evaluations += 1\n\n                # Accept new candidate with Metropolis criterion\n                if new_fitness < fitnesses[i] or np.random.rand() < np.exp((fitnesses[i] - new_fitness) / self.temperature):\n                    population[i] = new_candidate\n                    fitnesses[i] = new_fitness\n\n            # Reduce temperature\n            self.temperature *= self.cooling_rate\n\n        return best_solution, best_fitness", "name": "HybridDESA", "description": "Hybrid Differential Evolution and Simulated Annealing algorithm that combines population-based search with local refinement via temperature-based perturbations.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e0f40c85-8e4c-4856-ac11-a53062a58bcc", "metadata": {"aucs": [0.49681566967638335, 0.5063345048451429, 0.4906362227986385, 0.5258029194119257, 0.5007123367445312, 0.49933544260212703, 0.48734793754217376, 0.5171750873801266, 0.49126571847337996, 0.33175952568146183, 0.31400354423276056, 0.3277744207295885, 0.32614795205696245, 0.3408472201505366, 0.29907852935952717, 0.31003565683103806, 0.32653496283368866, 0.3532734139624134, 0.12849590346515127, 0.1516670499290298, 0.12131895550136562, 0.13424175682322403, 0.1288584819223939, 0.13482218646369526, 0.12352790541741032, 0.12482879953631831, 0.1297648903234565, 0.12153922602805067, 0.10184466477696952, 0.11546650195192121, 0.11811783839486323, 0.1255816401517712, 0.11184015425787697, 0.1179948480016858, 0.10648105262315277, 0.12715215872210628, 0.9389802516609135, 0.9585515459149205, 0.933547310704926, 0.9430146719405155, 0.9373336472157126, 0.9228267253770669, 0.9434724800982067, 0.9425232011119616, 0.9373540870542563, 0.34112037698028885, 0.33211425117425586, 0.3529156036404012, 0.35431178857221757, 0.32784105925132434, 0.3541070119027401, 0.33285314907120167, 0.33433304929923857, 0.3367181887594255, 0.6209169062811928, 0.5936986846059567, 0.6097002262667658, 0.6560429813052101, 0.6306412091343387, 0.6359135116425548, 0.48722192476179893, 0.6346598107781761, 0.6401328563927171, 0.2769516844777512, 0.312094519071071, 0.28443325745482506, 0.23448826809710943, 0.24923467336979144, 0.2851554029511173, 0.30953341728792116, 0.28702346805960244, 0.3272091081712528, 0.32243159461947113, 0.34758797653739093, 0.32985456405931013, 0.32240687719616035, 0.2992110737408915, 0.2602121763086307, 0.2977323714752199, 0.2718366611572749, 0.2850968798442084, 0.17799912453201872, 0.19344955993564772, 0.19517236433216512, 0.1768332683773326, 0.16639063047052438, 0.1688989089298566, 0.17928209087329505, 0.1815222817697505, 0.16172443191605035, 0.24648167344043204, 0.29823174231016847, 0.22020044510870151, 0.26637900042721496, 0.23788800976223656, 0.25282258233013066, 0.29118679585064533, 0.263785937599858, 0.31327917159213925, 0.08153042045677172, 0.06384580635556614, 0.08483833756324843, 0.10593845233720134, 0.10577404877980356, 0.10005739357702792, 0.08867829820355178, 0.09178655668279967, 0.09887962285901719, 0.18097853463091718, 0.184326510878285, 0.18273953821286748, 0.20052495141485305, 0.19201807266220328, 0.20537863109209376, 0.19215442484887324, 0.18602357950556347, 0.1930317749955307, 0.45521078522113023, 0.4356387447473481, 0.4404192935819913, 0.4455035347195171, 0.43824225419921103, 0.4314936952297994, 0.43591029135713943, 0.4298047942922597, 0.4340622403754474, 0.14660644450395688, 0.12329187195035995, 0.13096385508143282, 0.1465086860883017, 0.11497281136229354, 0.12589007381022221, 0.11683001416845817, 0.10470214374162301, 0.1004108357176674, 0.24586091981461355, 0.28493916845248346, 0.19369884449737917, 0.1981391552432601, 0.22583233808506997, 0.1960414400724413, 0.2334426482358276, 0.20288542380124408, 0.3176759418198064, 0.27161443294947585, 0.30041433216198943, 0.288016696763429, 0.2960287298504112, 0.23794323007307816, 0.2499641288108042, 0.3134646721424409, 0.2935558246985247, 0.31763958751358246, 0.20267583738945405, 0.2651886168815384, 0.21745575617193302, 0.23929418857076168, 0.2395557777929982, 0.24960418162936626, 0.2787312432704646, 0.2537776074799909, 0.26587560582718206, 0.2028010325508509, 0.19862432790660722, 0.2208505939715586, 0.22662892771176613, 0.21263016195411133, 0.21157487807493813, 0.22525791976643428, 0.2099682743290786, 0.18397039319533803, 0.25806089581757574, 0.20632926503366844, 0.20731679775974365, 0.19854862834177134, 0.28308305444985904, 0.20320319948162313, 0.1938064220659501, 0.2095887834827579, 0.1893515253004865, 0.6753027708500354, 0.6519187063732979, 0.18252200257087492, 0.5449574177413063, 0.5223272570501925, 0.6499811341799425, 0.5441708214702446, 0.6326171210793483, 0.5839588646100491, 0.593842163661437, 0.20478617537870591, 0.20257049772116698, 0.5051328721378466, 0.401953226002594, 0.19614892319969934, 0.20509337501439628, 0.6620150286168152, 0.20631602631469592, 0.20608337447398695, 0.20799239893393184, 0.20072348459101863, 0.19573469393031673, 0.19985262095828393, 0.22383472153318773, 0.2158824571787301, 0.20742079258891322, 0.22075297884325562, 0.08047445138545539, 0.09701424397003755, 0.0847358734592506, 0.07971944946216114, 0.08629553365221165, 0.09056116812769, 0.09252821021273827, 0.07968054192135299, 0.08756281017703238]}, "mutation_prompt": null}
