{"id": "1ed55a7e-35f0-41f5-ab29-8e217477b6bd", "solution": "import numpy as np\n\nclass DynamicSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30  # Number of particles in the swarm\n        self.c1 = 2.0  # Cognitive coefficient\n        self.c2 = 2.0  # Social coefficient\n        self.w = 0.7   # Inertia weight\n        self.bounds = (-5.0, 5.0)\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        # Initialize particle positions and velocities\n        positions = np.random.uniform(self.bounds[0], self.bounds[1], (self.num_particles, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, np.inf)\n        \n        # Evaluate initial positions\n        for i in range(self.num_particles):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = np.copy(personal_best_positions[global_best_idx])\n\n        evaluations = self.num_particles\n        \n        while evaluations < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive = self.c1 * r1 * (personal_best_positions[i] - positions[i])\n                social = self.c2 * r2 * (global_best_position - positions[i])\n                velocities[i] = self.w * velocities[i] + cognitive + social\n                \n                # Update position\n                positions[i] += velocities[i]\n                positions[i] = np.clip(positions[i], self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                score = func(positions[i])\n                evaluations += 1\n\n                # Check for personal best update\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = np.copy(positions[i])\n                \n                # Check for global best update\n                if score < personal_best_scores[global_best_idx]:\n                    global_best_idx = i\n                    global_best_position = np.copy(personal_best_positions[global_best_idx])\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position", "name": "DynamicSwarmOptimizer", "description": "A dynamic swarm-based algorithm that adaptively balances exploration and exploitation using particle velocity adjustments in high-dimensional spaces.", "configspace": "", "generation": 0, "fitness": 0.242700115914627, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7003438428408619, 0.7003438428408619, 0.7003438428408619, 0.6895940739326196, 0.6895940739326196, 0.6895940739326196, 0.7079074907000206, 0.7079074907000206, 0.7079074907000206, 0.2689669812189255, 0.2689669812189255, 0.2689669812189255, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.43179597856855145, 0.43179597856855145, 0.43179597856855145, 0.13486180925700897, 0.13486180925700897, 0.13486180925700897, 0.13799008224639897, 0.13799008224639897, 0.13799008224639897, 0.13270110428890025, 0.13270110428890025, 0.13270110428890025, 0.10857751191808929, 0.10857751191808929, 0.10857751191808929, 0.10447464722046262, 0.10447464722046262, 0.10447464722046262, 0.09546702803840712, 0.09546702803840712, 0.09546702803840712, 0.9925978935727064, 0.9925978935727064, 0.9925978935727064, 0.993004420317547, 0.993004420317547, 0.993004420317547, 0.9944209347057231, 0.9944209347057231, 0.9944209347057231, 0.41740011545532785, 0.41740011545532785, 0.41740011545532785, 0.2845643723250758, 0.2845643723250758, 0.2845643723250758, 0.3350072216425507, 0.3350072216425507, 0.3350072216425507, 0.15308229814827679, 0.15308229814827679, 0.15308229814827679, 0.1612414490737215, 0.1612414490737215, 0.1612414490737215, 0.1505612773282744, 0.1505612773282744, 0.1505612773282744, 0.1181703604329527, 0.1181703604329527, 0.1181703604329527, 0.14959304807497498, 0.14959304807497498, 0.14959304807497498, 0.14991519720167779, 0.14991519720167779, 0.14991519720167779, 0.1723178849589707, 0.1723178849589707, 0.1723178849589707, 0.11525251182153007, 0.11525251182153007, 0.11525251182153007, 0.18661462064670253, 0.18661462064670253, 0.18661462064670253, 0.007839957997928804, 0.007839957997928804, 0.007839957997928804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007926385836416694, 0.007926385836416694, 0.007926385836416694, 0.0412032903271653, 0.0412032903271653, 0.0412032903271653, 0.0619336672779629, 0.0619336672779629, 0.0619336672779629, 0.03058195828907373, 0.03058195828907373, 0.03058195828907373, 0.042612669800219605, 0.042612669800219605, 0.042612669800219605, 0.07167937340281882, 0.07167937340281882, 0.07167937340281882, 0.06825542412150098, 0.06825542412150098, 0.06825542412150098, 0.07923329968643122, 0.07923329968643122, 0.07923329968643122, 0.036312272767712095, 0.036312272767712095, 0.036312272767712095, 0.07722889377675002, 0.07722889377675002, 0.07722889377675002, 0.48039110043294675, 0.48039110043294675, 0.48039110043294675, 0.46116640369149575, 0.46116640369149575, 0.46116640369149575, 0.5029056965249438, 0.5029056965249438, 0.5029056965249438, 0.07682788607496283, 0.07682788607496283, 0.07682788607496283, 0.08584889688420771, 0.08584889688420771, 0.08584889688420771, 0.105840017835242, 0.105840017835242, 0.105840017835242, 0.1764294347225971, 0.1764294347225971, 0.1764294347225971, 0.22133741424909537, 0.22133741424909537, 0.22133741424909537, 0.18599086668455467, 0.18599086668455467, 0.18599086668455467, 0.3109826563545235, 0.3109826563545235, 0.3109826563545235, 0.2978289877663828, 0.2978289877663828, 0.2978289877663828, 0.3794195497253833, 0.3794195497253833, 0.3794195497253833, 0.19613152988011284, 0.19613152988011284, 0.19613152988011284, 0.20945488762775077, 0.20945488762775077, 0.20945488762775077, 0.12672681647477857, 0.12672681647477857, 0.12672681647477857, 0.19721329595646853, 0.19721329595646853, 0.19721329595646853, 0.1864950193129623, 0.1864950193129623, 0.1864950193129623, 0.20062737953431375, 0.20062737953431375, 0.20062737953431375, 0.1989190131322921, 0.1989190131322921, 0.1989190131322921, 0.35182648626177127, 0.35182648626177127, 0.35182648626177127, 0.2614085410060448, 0.2614085410060448, 0.2614085410060448, 0.8303612726308023, 0.8303612726308023, 0.8303612726308023, 0.15807309734429642, 0.15807309734429642, 0.15807309734429642, 0.5001236226338586, 0.5001236226338586, 0.5001236226338586, 0.16239990480238464, 0.16239990480238464, 0.16239990480238464, 0.2073530649075327, 0.2073530649075327, 0.2073530649075327, 0.15575193626801098, 0.15575193626801098, 0.15575193626801098, 0.1873553612741694, 0.1873553612741694, 0.1873553612741694, 0.19879547059116232, 0.19879547059116232, 0.19879547059116232, 0.21865495441342242, 0.21865495441342242, 0.21865495441342242, 0.07841805055418483, 0.07841805055418483, 0.07841805055418483, 0.07678442923654927, 0.07678442923654927, 0.07678442923654927, 0.07513395184370186, 0.07513395184370186, 0.07513395184370186]}, "mutation_prompt": null}
{"id": "dfe38e67-e531-44b4-9fdc-f8e4e4710964", "solution": "import numpy as np\n\nclass DynamicSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30  # Number of particles in the swarm\n        self.c1 = 2.0  # Cognitive coefficient\n        self.c2 = 2.0  # Social coefficient\n        self.w = 0.7   # Inertia weight\n        self.bounds = (-5.0, 5.0)\n    \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        # Initialize particle positions and velocities\n        positions = np.random.uniform(self.bounds[0], self.bounds[1], (self.num_particles, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, np.inf)\n        \n        # Evaluate initial positions\n        for i in range(self.num_particles):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = np.copy(personal_best_positions[global_best_idx])\n\n        evaluations = self.num_particles\n        \n        while evaluations < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive = self.c1 * r1 * (personal_best_positions[i] - positions[i])\n                social = self.c2 * r2 * (global_best_position - positions[i])\n                velocities[i] = self.w * velocities[i] + cognitive + social\n                \n                # Update position\n                positions[i] += velocities[i]\n                positions[i] = np.clip(positions[i], self.bounds[0], self.bounds[1])\n\n                # Evaluate new position\n                score = func(positions[i])\n                evaluations += 1\n\n                # Check for personal best update\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = np.copy(positions[i])\n                \n                # Check for global best update\n                if score < personal_best_scores[global_best_idx]:\n                    global_best_idx = i\n                    global_best_position = np.copy(personal_best_positions[global_best_idx])\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position", "name": "DynamicSwarmOptimizer", "description": "A dynamic swarm-based algorithm that adaptively balances exploration and exploitation using particle velocity adjustments in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ed55a7e-35f0-41f5-ab29-8e217477b6bd", "metadata": {"aucs": [0.7003438428408619, 0.7003438428408619, 0.7003438428408619, 0.6895940739326196, 0.6895940739326196, 0.6895940739326196, 0.7079074907000206, 0.7079074907000206, 0.7079074907000206, 0.2689669812189255, 0.2689669812189255, 0.2689669812189255, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.43179597856855145, 0.43179597856855145, 0.43179597856855145, 0.13486180925700897, 0.13486180925700897, 0.13486180925700897, 0.13799008224639897, 0.13799008224639897, 0.13799008224639897, 0.13270110428890025, 0.13270110428890025, 0.13270110428890025, 0.10857751191808929, 0.10857751191808929, 0.10857751191808929, 0.10447464722046262, 0.10447464722046262, 0.10447464722046262, 0.09546702803840712, 0.09546702803840712, 0.09546702803840712, 0.9925978935727064, 0.9925978935727064, 0.9925978935727064, 0.993004420317547, 0.993004420317547, 0.993004420317547, 0.9944209347057231, 0.9944209347057231, 0.9944209347057231, 0.41740011545532785, 0.41740011545532785, 0.41740011545532785, 0.2845643723250758, 0.2845643723250758, 0.2845643723250758, 0.3350072216425507, 0.3350072216425507, 0.3350072216425507, 0.15308229814827679, 0.15308229814827679, 0.15308229814827679, 0.1612414490737215, 0.1612414490737215, 0.1612414490737215, 0.1505612773282744, 0.1505612773282744, 0.1505612773282744, 0.1181703604329527, 0.1181703604329527, 0.1181703604329527, 0.14959304807497498, 0.14959304807497498, 0.14959304807497498, 0.14991519720167779, 0.14991519720167779, 0.14991519720167779, 0.1723178849589707, 0.1723178849589707, 0.1723178849589707, 0.11525251182153007, 0.11525251182153007, 0.11525251182153007, 0.18661462064670253, 0.18661462064670253, 0.18661462064670253, 0.007839957997928804, 0.007839957997928804, 0.007839957997928804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007926385836416694, 0.007926385836416694, 0.007926385836416694, 0.0412032903271653, 0.0412032903271653, 0.0412032903271653, 0.0619336672779629, 0.0619336672779629, 0.0619336672779629, 0.03058195828907373, 0.03058195828907373, 0.03058195828907373, 0.042612669800219605, 0.042612669800219605, 0.042612669800219605, 0.07167937340281882, 0.07167937340281882, 0.07167937340281882, 0.06825542412150098, 0.06825542412150098, 0.06825542412150098, 0.07923329968643122, 0.07923329968643122, 0.07923329968643122, 0.036312272767712095, 0.036312272767712095, 0.036312272767712095, 0.07722889377675002, 0.07722889377675002, 0.07722889377675002, 0.48039110043294675, 0.48039110043294675, 0.48039110043294675, 0.46116640369149575, 0.46116640369149575, 0.46116640369149575, 0.5029056965249438, 0.5029056965249438, 0.5029056965249438, 0.07682788607496283, 0.07682788607496283, 0.07682788607496283, 0.08584889688420771, 0.08584889688420771, 0.08584889688420771, 0.105840017835242, 0.105840017835242, 0.105840017835242, 0.1764294347225971, 0.1764294347225971, 0.1764294347225971, 0.22133741424909537, 0.22133741424909537, 0.22133741424909537, 0.18599086668455467, 0.18599086668455467, 0.18599086668455467, 0.3109826563545235, 0.3109826563545235, 0.3109826563545235, 0.2978289877663828, 0.2978289877663828, 0.2978289877663828, 0.3794195497253833, 0.3794195497253833, 0.3794195497253833, 0.19613152988011284, 0.19613152988011284, 0.19613152988011284, 0.20945488762775077, 0.20945488762775077, 0.20945488762775077, 0.12672681647477857, 0.12672681647477857, 0.12672681647477857, 0.19721329595646853, 0.19721329595646853, 0.19721329595646853, 0.1864950193129623, 0.1864950193129623, 0.1864950193129623, 0.20062737953431375, 0.20062737953431375, 0.20062737953431375, 0.1989190131322921, 0.1989190131322921, 0.1989190131322921, 0.35182648626177127, 0.35182648626177127, 0.35182648626177127, 0.2614085410060448, 0.2614085410060448, 0.2614085410060448, 0.8303612726308023, 0.8303612726308023, 0.8303612726308023, 0.15807309734429642, 0.15807309734429642, 0.15807309734429642, 0.5001236226338586, 0.5001236226338586, 0.5001236226338586, 0.16239990480238464, 0.16239990480238464, 0.16239990480238464, 0.2073530649075327, 0.2073530649075327, 0.2073530649075327, 0.15575193626801098, 0.15575193626801098, 0.15575193626801098, 0.1873553612741694, 0.1873553612741694, 0.1873553612741694, 0.19879547059116232, 0.19879547059116232, 0.19879547059116232, 0.21865495441342242, 0.21865495441342242, 0.21865495441342242, 0.07841805055418483, 0.07841805055418483, 0.07841805055418483, 0.07678442923654927, 0.07678442923654927, 0.07678442923654927, 0.07513395184370186, 0.07513395184370186, 0.07513395184370186]}, "mutation_prompt": null}
