{"id": "8f4f1de2-db32-4d94-8d53-817eb2929f68", "solution": "import numpy as np\n\nclass DEPSO:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, w=0.5, c1=2.0, c2=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F  # Differential evolution scaling factor\n        self.CR = CR  # Crossover rate\n        self.w = w  # Inertia weight for PSO\n        self.c1 = c1  # Cognitive coefficient for PSO\n        self.c2 = c2  # Social coefficient for PSO\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in pop])\n        global_best = personal_best[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        eval_count = self.pop_size\n\n        while eval_count < self.budget:\n            for i in range(self.pop_size):\n                # Differential evolution mutation\n                idxs = np.random.choice(np.delete(np.arange(self.pop_size), i), 3, replace=False)\n                mutant = pop[idxs[0]] + self.F * (pop[idxs[1]] - pop[idxs[2]])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n\n                # Selection\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < personal_best_scores[i]:\n                    personal_best[i] = trial\n                    personal_best_scores[i] = trial_score\n                    if trial_score < global_best_score:\n                        global_best = trial\n                        global_best_score = trial_score\n\n            # Particle swarm optimization update\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.w * velocities + \n                          self.c1 * r1 * (personal_best - pop) + \n                          self.c2 * r2 * (global_best - pop))\n            pop = np.clip(pop + velocities, self.lower_bound, self.upper_bound)\n\n        return global_best, global_best_score", "name": "DEPSO", "description": "A Hybrid Differential Evolution and Particle Swarm Optimization (DE-PSO) algorithm that combines exploration and exploitation strategies for effective search across diverse functions.", "configspace": "", "generation": 0, "fitness": 0.20571411151863242, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.45691414231764627, 0.4322640598001425, 0.44027210930041205, 0.4901943476577928, 0.476054140296463, 0.4857874078388136, 0.46587018402715075, 0.4482477176233227, 0.4717716067096883, 0.17817860004250452, 0.15113652930809562, 0.17271138537825959, 0.1759606452476251, 0.14546079958396807, 0.16140787771873943, 0.15835277423673666, 0.19141683992929537, 0.16438756222222872, 0.08516128695672409, 0.09545875576120466, 0.08955579147579484, 0.10889414745199177, 0.08629119015741493, 0.0843027470923664, 0.09862906328955745, 0.08591618425233993, 0.08976125241045907, 0.07591165003115707, 0.08470067620188315, 0.07455140646215419, 0.06632178365304575, 0.07688380433455222, 0.0752285497420544, 0.08046615516049693, 0.08186215420023513, 0.07424677239722588, 0.9853348123300337, 0.979855234528013, 0.9842907452328341, 0.981650673696953, 0.9818705575559652, 0.9769854919310123, 0.9817793533337523, 0.9840048154514525, 0.9838268074205965, 0.21698546257080287, 0.20049286361069518, 0.2227347991267904, 0.19272853582042393, 0.21837568128966722, 0.22811833227559442, 0.20004092413106478, 0.21360697396884365, 0.22543528449025707, 0.16946308460704218, 0.21409530777027685, 0.2589024783414431, 0.24612367631565735, 0.24542197168430524, 0.20211336792515122, 0.2530437670623531, 0.34814716764050346, 0.27067723722731507, 0.1324865125909217, 0.1250685224541911, 0.11865184383493144, 0.12954110556755627, 0.11277060126646488, 0.12779525119920077, 0.1261325346302078, 0.11172183076028164, 0.14112355735269033, 0.08027297124458965, 0.12478987335613201, 0.11588589988284459, 0.1221021578500715, 0.08441517284912936, 0.13810037793025054, 0.12359065082136989, 0.13530683132255183, 0.0981598295807733, 9.999999999998899e-05, 9.999999999998899e-05, 0.000968485957066556, 0.014583240140853548, 0.0179015866127602, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04573707218199019, 0.0390598115525268, 0.13182904021312092, 0.05140663647702037, 0.040079490985505783, 0.030593392475254055, 0.09009553154314198, 0.05059507184085654, 0.03649407730897869, 0.017454734937438654, 0.005018490449742008, 0.018338556169792186, 9.999999999998899e-05, 0.0011192939441563299, 0.010775292740937803, 9.999999999998899e-05, 0.0006013841888722338, 0.03525575808617509, 0.09560099479869444, 0.06587134497327896, 0.06936563556197162, 0.09040509529016905, 0.06566203041841834, 0.060543296692312065, 0.049756033836140134, 0.0670137047846383, 0.065215097042295, 0.3973141362885454, 0.3705568547771131, 0.409231932959052, 0.3830181544101051, 0.39116860417838417, 0.4211083901695959, 0.36108913374224816, 0.38319617402309736, 0.3970603222811431, 0.08546322874462786, 0.09425916122265443, 0.08331964536565684, 0.08579154249536391, 0.07833399686242937, 0.08955562425860808, 0.07937823762713836, 0.09417546916328301, 0.09161630074299631, 0.15281254598031868, 0.15155746200226727, 0.18676837288698012, 0.15108736880586948, 0.1650811740331528, 0.1354094177904568, 0.1811056755369137, 0.23159614332921463, 0.14504539755312507, 0.23745973162833378, 0.23290282035289, 0.2865713093036968, 0.25348283088910173, 0.2588537899040372, 0.2367302572364638, 0.32301812525117735, 0.2711237501205862, 0.273931197225631, 0.2012662068466209, 0.17682943482296398, 0.19359634627342426, 0.15464599065542317, 0.14961481205673954, 0.16214379854791516, 0.2031187018515016, 0.23291776202159176, 0.2026004596975015, 0.1937671870601898, 0.213713896283246, 0.1805116080206597, 0.17455913887255103, 0.18044666375514384, 0.16953215180950176, 0.1932613497333746, 0.18776387827981433, 0.16842397755296767, 0.17040878091497047, 0.17618709220849849, 0.1700465256962882, 0.1728370939011198, 0.16583762957363635, 0.21911292774967495, 0.184001314454189, 0.1733028748116312, 0.17065356599923942, 0.17632143414277857, 0.5740822518889522, 0.15245994052701262, 0.5060458838268059, 0.1883816218954314, 0.5238791749582684, 0.39619133287326747, 0.49542312118348, 0.15914702395059666, 0.2961381334653004, 0.20274823196291059, 0.3286069284892946, 0.1874293826423673, 0.11148233654884565, 0.2777840915780907, 0.2100798866564454, 0.4349741339919232, 0.2095276701119244, 0.18441492201310783, 0.1790301272811501, 0.18318680943689292, 0.18416474974045183, 0.1742057177593488, 0.19175013288310294, 0.1980008954996859, 0.17229952152529948, 0.18690355531569147, 0.0772133133025058, 0.07232610138589057, 0.08195827086155749, 0.07245523384470398, 0.08080336784386433, 0.07398796250122108, 0.0808729453653475, 0.06634895439554822, 0.06965426447629075]}, "mutation_prompt": null}
{"id": "9141d933-0a72-4f26-bec2-ad2ce5eb4a9f", "solution": "import numpy as np\n\nclass DEPSO:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, w=0.9, c1=2.0, c2=2.0):  # Change 1: w initial to 0.9 for better exploration\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F  # Differential evolution scaling factor\n        self.CR = CR  # Crossover rate\n        self.w = w  # Inertia weight for PSO\n        self.c1 = c1  # Cognitive coefficient for PSO\n        self.c2 = c2  # Social coefficient for PSO\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in pop])\n        global_best = personal_best[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        eval_count = self.pop_size\n\n        while eval_count < self.budget:\n            for i in range(self.pop_size):\n                # Differential evolution mutation\n                idxs = np.random.choice(np.delete(np.arange(self.pop_size), i), 3, replace=False)\n                mutant = pop[idxs[0]] + self.F * (pop[idxs[1]] - pop[idxs[2]])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n\n                # Selection\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < personal_best_scores[i]:\n                    personal_best[i] = trial\n                    personal_best_scores[i] = trial_score\n                    if trial_score < global_best_score:\n                        global_best = trial\n                        global_best_score = trial_score\n\n            # Particle swarm optimization update\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.w * velocities + \n                          self.c1 * r1 * (personal_best - pop) + \n                          self.c2 * r2 * (global_best - pop))\n            pop = np.clip(pop + velocities, self.lower_bound, self.upper_bound)\n            \n            self.w = 0.9 - (0.5 * (eval_count / self.budget))  # Change 2: Adaptive inertia weight decreasing over time\n\n        return global_best, global_best_score", "name": "DEPSO", "description": "A modified DE-PSO algorithm with adaptive inertia weight and enhanced exploration-exploitation balance for improved convergence.", "configspace": "", "generation": 1, "fitness": 0.16016444041905856, "feedback": "", "error": "", "parent_id": "8f4f1de2-db32-4d94-8d53-817eb2929f68", "metadata": {"aucs": [0.26533657703347135, 0.30060679102280474, 0.270803231608419, 0.3334502604904831, 0.3383910939987115, 0.3351129434663419, 0.31518193962009833, 0.34147561395233383, 0.3143599710810475, 0.04132878100925741, 0.028825872372473027, 0.04352887060207955, 0.03930475016656332, 0.026068217560712093, 0.03632692567139051, 0.030309819076657862, 0.038680969932410325, 0.036933637872593295, 0.0795364286655924, 0.06527663382060911, 0.06627840336911395, 0.06383372381264996, 0.06217664712947768, 0.06390385389916942, 0.06836394048507977, 0.07434429269704945, 0.07940777268132948, 0.0564937994047936, 0.06646278512829884, 0.04877269879826962, 0.05162932963232847, 0.06410083222088236, 0.054596554725730995, 0.07439833631744663, 0.06721279818733872, 0.05561471507406368, 0.9853547883184255, 0.981187394376694, 0.9842928109223382, 0.9816921399732712, 0.984321120848685, 0.9775021998219914, 0.9822384126010107, 0.9843967622973959, 0.982470154358268, 0.14107836102819926, 0.15879035537559016, 0.15717414707322697, 0.1422472995155194, 0.11812782456409965, 0.17195190352570755, 0.08285190366864048, 0.17248865235579813, 0.1396390604576696, 0.1723227154385697, 0.17453214488856905, 0.16929335896477715, 0.18702920238527787, 0.20848533219006626, 0.17866310841841226, 0.17741459356886713, 0.19242486448779184, 0.19773944946282995, 0.05493463728595693, 0.07484697181124156, 0.03955099859812161, 0.06732324695860903, 0.07874051528276194, 0.09078943802091, 0.06613600820640442, 0.0718315090150865, 0.07977613186817656, 0.0740357310965335, 0.06570218700630481, 0.041184602840249496, 0.05704399274329208, 0.008186579601483945, 0.04107291009072034, 0.04671593289965692, 0.05905297091764716, 0.04590504217045677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053727446022789116, 0.11763115214352815, 0.07537362106082457, 0.035056141134545915, 0.02983137216846321, 0.08044638865800702, 0.04769889735575439, 0.04210880248515825, 0.047917379456644316, 0.0005505197300601505, 9.999999999998899e-05, 0.00015719332211661108, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003352919459841397, 0.0431715619669758, 0.01967276167582399, 0.03231588691491638, 0.03524922385910145, 0.041076625939585165, 0.037318712211536154, 0.0381994005930959, 0.03444938138545861, 0.04644944127232031, 0.28270093775007477, 0.2716245481874122, 0.29028292833663594, 0.28810272664083836, 0.31133804585705094, 0.2823445288189603, 0.2618970784328931, 0.29109113027659184, 0.26273994850902493, 0.06807481479417021, 0.06743622823585826, 0.07804763920908697, 0.07091968051713671, 0.07690275817891357, 0.07573210778157868, 0.06769524152632289, 0.0639466142622761, 0.0749570367091783, 0.1600553275994665, 0.13126155739000223, 0.13228876020623104, 0.13974899812177577, 0.142376256055332, 0.13771854871812483, 0.17480917394317674, 0.13528676173046938, 0.15677555156724443, 0.22042277653949915, 0.19669262281757127, 0.21119658332184887, 0.19367828851953783, 0.2030030429445372, 0.1934140488388585, 0.2283664792868415, 0.22940338194857746, 0.22722276176870992, 0.1514273893959286, 0.1534258063116406, 0.15077818068287596, 0.1497152259754374, 0.14386499402679187, 0.14347720405983933, 0.1543398141909802, 0.1608106372486865, 0.16437717888171977, 0.19288911981455714, 0.21505010140268876, 0.17942225526843136, 0.17141256807524607, 0.1756566901555816, 0.16809350664952472, 0.16811750880079668, 0.1679592814531734, 0.15362508963715082, 0.16327897795913637, 0.1744849476914323, 0.16354596643252894, 0.16239939528911107, 0.16539095648486457, 0.15810537763385257, 0.16520891000061655, 0.16137513395487546, 0.16922650404357376, 0.19721105536190264, 0.1878360284238505, 0.15161958679107734, 0.17141802000299144, 0.16926781200550522, 0.324856889578345, 0.24058389346741982, 0.17915242355917804, 0.19506837803942845, 0.1920565215792278, 0.1600779863489673, 0.15165549699799663, 0.17736746052763808, 0.10925330827221347, 0.12049436858616136, 0.19639829369287776, 0.2692312592214926, 0.30684318151473067, 0.1776766835009974, 0.17523951044897912, 0.18877037805258112, 0.19128376361656296, 0.18577767219175523, 0.1817446686392089, 0.19870232119248354, 0.18416962981578622, 0.18276617943579343, 0.05928892731237434, 0.059757430190819694, 0.0597810719030798, 0.06797092272934846, 0.07249686368079422, 0.06203088019235037, 0.061306113329066325, 0.065660376947686, 0.06648365531205747]}, "mutation_prompt": null}
