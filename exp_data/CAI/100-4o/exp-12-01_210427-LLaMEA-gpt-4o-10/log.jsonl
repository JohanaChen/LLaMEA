{"id": "ae6f49c4-400f-40b3-b79d-fcc08861e987", "solution": "import numpy as np\n\nclass HybridDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(20, self.budget // 5)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, \n                                       (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.population_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i, j] for j in range(self.dim)])\n                \n                # Apply a local random search to the trial vector\n                local_search = trial + np.random.uniform(-0.1, 0.1, self.dim)\n                local_search = np.clip(local_search, self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search)\n                num_evaluations += 1\n\n                # Selection\n                trial_fitness = func(trial)\n                num_evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                \n                # Adaptive learning using local search results\n                if local_fitness < fitness[i]:\n                    population[i] = local_search\n                    fitness[i] = local_fitness\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDEOptimizer", "description": "Hybrid Differential Evolution with Adaptive Learning for Diverse Problem Landscapes.", "configspace": "", "generation": 0, "fitness": 0.3292547610117917, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7353149240941813, 0.7294962687295481, 0.747264935575616, 0.7371089017931971, 0.7600392340161889, 0.749382570399356, 0.7400631135919, 0.6964572881420399, 0.752375898532432, 0.5738607782505695, 0.5753213834566757, 0.6336300372699475, 0.5624281941167834, 0.47526582084935576, 0.5273694920988222, 0.5277836986210198, 0.5297171637215333, 0.5420356364922034, 0.11220294410636811, 0.0993025312216993, 0.12913700126467498, 0.10464938837381055, 0.10068530880839521, 0.10991780839975329, 0.135232181554373, 0.12846234128998368, 0.12492372057381784, 0.09980428172881861, 0.11371410295813589, 0.1184271204537597, 0.09643865353212111, 0.11043800229819867, 0.11665568405032223, 0.1200219728860702, 0.11127146917871322, 0.11960470200239037, 0.9407948307720059, 0.9062314231043506, 0.947559283768708, 0.9428958825221617, 0.9174729489550612, 0.9082707772149128, 0.9186642081995705, 0.94554552891791, 0.9430475114510539, 0.3881636617558837, 0.4246806582773832, 0.40359826443958746, 0.417277789796098, 0.4277517937890325, 0.3823290756857666, 0.39429090210752316, 0.4012345870042435, 0.40305087221275127, 0.6636868728432566, 0.5908280173754223, 0.6394193042671121, 0.7514593594142651, 0.6896280319622815, 0.7144305328200731, 0.7318862167024014, 0.7191172253117895, 0.6144512044643597, 0.38924228347408374, 0.3092581472739575, 0.35724156231411996, 0.2783744471796681, 0.2763735602247812, 0.31640524570374706, 0.25789691755596766, 0.34536582198539945, 0.29830881565287404, 0.19400600717263472, 0.1503904795191109, 0.22726396783253688, 0.2577160597261803, 0.3376757142258774, 0.26201259279454914, 0.16890878903954032, 0.31587490999882484, 0.26140702902087365, 0.22623629589027705, 0.20437837514953294, 0.22475254861789895, 0.243014864870286, 0.2980596417794872, 0.2703124524594873, 0.2829118612167727, 0.24658448752753226, 0.24317369666194621, 0.36490140292414197, 0.43919207630017676, 0.3631881617820355, 0.42450394287759663, 0.38360280275386627, 0.35045666835790246, 0.42723644940363226, 0.45484776800302285, 0.2645945531096213, 0.07110276604067112, 0.1180003290021372, 0.0782223000262866, 0.14388471552862725, 0.09992914998045743, 0.09103163301427375, 0.09560954181358339, 0.12491759725112428, 0.0871698554988718, 0.24322062559227375, 0.20925380746139421, 0.2438631853769313, 0.26054973640844414, 0.2522536040438884, 0.22170433038152837, 0.23971095788519214, 0.24409998051281112, 0.2064833945847283, 0.597303825136061, 0.5795463529738154, 0.6000184532862428, 0.5892800115070953, 0.5424171033847855, 0.5912549419050859, 0.5465821971090834, 0.6059419151792507, 0.6240626768436326, 0.10214832856749767, 0.11053769258200696, 0.11596002493704549, 0.09038976985560132, 0.10838142703281517, 0.10060731439203996, 0.0876019751010706, 0.10345812333587923, 0.10166853614020366, 0.187643057322066, 0.15498328002069106, 0.1513465670260934, 0.18058715588249374, 0.21112353126414218, 0.16336244038099723, 0.31924147707148487, 0.2860492273597143, 0.25098946481042583, 0.3279776948683387, 0.3241844428019529, 0.28125867930412374, 0.29138583647063965, 0.2997538969094363, 0.2910893094988529, 0.36277414000467956, 0.3443905351307657, 0.3440568738208454, 0.23614891481367228, 0.22628050280540046, 0.25187178652775155, 0.23129347829304792, 0.24899897769764556, 0.23719238755106975, 0.2510828504065866, 0.2687518840394668, 0.2712225486676816, 0.18007281230817662, 0.19091513122587644, 0.16981576208928728, 0.20412606948035805, 0.18110190711270557, 0.18245158636197178, 0.1901175700953106, 0.18788243129636484, 0.19764460808092377, 0.21352068956514847, 0.1731432264876015, 0.18628745132047686, 0.1973090138505169, 0.35546153099330946, 0.18944001953549672, 0.18327314332851696, 0.18681375734964623, 0.24975356604833632, 0.15876280592681236, 0.7290581327017894, 0.16546710965841516, 0.7772880201705368, 0.18922918284586598, 0.1742806894997695, 0.16976954043649917, 0.7284508654759587, 0.1720234947078001, 0.6109536779362544, 0.19699172057004033, 0.6278341858854168, 0.18416873648007215, 0.19172006634055738, 0.1985544549963726, 0.7690393700586254, 0.12225681408774802, 0.20031116064419607, 0.18575523620943368, 0.1793420597827855, 0.17996105217861824, 0.1934855864810595, 0.2504365223562308, 0.17026115405507103, 0.18380000350814907, 0.19664227619541008, 0.19448227999484147, 0.0794164975486461, 0.08430362468112984, 0.07301716453485418, 0.08181279272209574, 0.062082491626005876, 0.064352455900749, 0.07510887369596986, 0.07053650067396577, 0.0964906610790407]}, "mutation_prompt": null}
{"id": "b7e0a43e-b934-4936-b80a-29efeab63b16", "solution": "import numpy as np\n\nclass HybridDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(20, self.budget // 5)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, \n                                       (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        num_evaluations = self.population_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else population[i, j] for j in range(self.dim)])\n                \n                # Apply a local random search to the trial vector\n                local_search = trial + np.random.uniform(-0.1, 0.1, self.dim)\n                local_search = np.clip(local_search, self.lower_bound, self.upper_bound)\n                local_fitness = func(local_search)\n                num_evaluations += 1\n\n                # Selection\n                trial_fitness = func(trial)\n                num_evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                \n                # Adaptive learning using local search results\n                if local_fitness < fitness[i]:\n                    population[i] = local_search\n                    fitness[i] = local_fitness\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDEOptimizer", "description": "Hybrid Differential Evolution with Adaptive Learning for Diverse Problem Landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ae6f49c4-400f-40b3-b79d-fcc08861e987", "metadata": {"aucs": [0.7353149240941813, 0.7294962687295481, 0.747264935575616, 0.7371089017931971, 0.7600392340161889, 0.749382570399356, 0.7400631135919, 0.6964572881420399, 0.752375898532432, 0.5738607782505695, 0.5753213834566757, 0.6336300372699475, 0.5624281941167834, 0.47526582084935576, 0.5273694920988222, 0.5277836986210198, 0.5297171637215333, 0.5420356364922034, 0.11220294410636811, 0.0993025312216993, 0.12913700126467498, 0.10464938837381055, 0.10068530880839521, 0.10991780839975329, 0.135232181554373, 0.12846234128998368, 0.12492372057381784, 0.09980428172881861, 0.11371410295813589, 0.1184271204537597, 0.09643865353212111, 0.11043800229819867, 0.11665568405032223, 0.1200219728860702, 0.11127146917871322, 0.11960470200239037, 0.9407948307720059, 0.9062314231043506, 0.947559283768708, 0.9428958825221617, 0.9174729489550612, 0.9082707772149128, 0.9186642081995705, 0.94554552891791, 0.9430475114510539, 0.3881636617558837, 0.4246806582773832, 0.40359826443958746, 0.417277789796098, 0.4277517937890325, 0.3823290756857666, 0.39429090210752316, 0.4012345870042435, 0.40305087221275127, 0.6636868728432566, 0.5908280173754223, 0.6394193042671121, 0.7514593594142651, 0.6896280319622815, 0.7144305328200731, 0.7318862167024014, 0.7191172253117895, 0.6144512044643597, 0.38924228347408374, 0.3092581472739575, 0.35724156231411996, 0.2783744471796681, 0.2763735602247812, 0.31640524570374706, 0.25789691755596766, 0.34536582198539945, 0.29830881565287404, 0.19400600717263472, 0.1503904795191109, 0.22726396783253688, 0.2577160597261803, 0.3376757142258774, 0.26201259279454914, 0.16890878903954032, 0.31587490999882484, 0.26140702902087365, 0.22623629589027705, 0.20437837514953294, 0.22475254861789895, 0.243014864870286, 0.2980596417794872, 0.2703124524594873, 0.2829118612167727, 0.24658448752753226, 0.24317369666194621, 0.36490140292414197, 0.43919207630017676, 0.3631881617820355, 0.42450394287759663, 0.38360280275386627, 0.35045666835790246, 0.42723644940363226, 0.45484776800302285, 0.2645945531096213, 0.07110276604067112, 0.1180003290021372, 0.0782223000262866, 0.14388471552862725, 0.09992914998045743, 0.09103163301427375, 0.09560954181358339, 0.12491759725112428, 0.0871698554988718, 0.24322062559227375, 0.20925380746139421, 0.2438631853769313, 0.26054973640844414, 0.2522536040438884, 0.22170433038152837, 0.23971095788519214, 0.24409998051281112, 0.2064833945847283, 0.597303825136061, 0.5795463529738154, 0.6000184532862428, 0.5892800115070953, 0.5424171033847855, 0.5912549419050859, 0.5465821971090834, 0.6059419151792507, 0.6240626768436326, 0.10214832856749767, 0.11053769258200696, 0.11596002493704549, 0.09038976985560132, 0.10838142703281517, 0.10060731439203996, 0.0876019751010706, 0.10345812333587923, 0.10166853614020366, 0.187643057322066, 0.15498328002069106, 0.1513465670260934, 0.18058715588249374, 0.21112353126414218, 0.16336244038099723, 0.31924147707148487, 0.2860492273597143, 0.25098946481042583, 0.3279776948683387, 0.3241844428019529, 0.28125867930412374, 0.29138583647063965, 0.2997538969094363, 0.2910893094988529, 0.36277414000467956, 0.3443905351307657, 0.3440568738208454, 0.23614891481367228, 0.22628050280540046, 0.25187178652775155, 0.23129347829304792, 0.24899897769764556, 0.23719238755106975, 0.2510828504065866, 0.2687518840394668, 0.2712225486676816, 0.18007281230817662, 0.19091513122587644, 0.16981576208928728, 0.20412606948035805, 0.18110190711270557, 0.18245158636197178, 0.1901175700953106, 0.18788243129636484, 0.19764460808092377, 0.21352068956514847, 0.1731432264876015, 0.18628745132047686, 0.1973090138505169, 0.35546153099330946, 0.18944001953549672, 0.18327314332851696, 0.18681375734964623, 0.24975356604833632, 0.15876280592681236, 0.7290581327017894, 0.16546710965841516, 0.7772880201705368, 0.18922918284586598, 0.1742806894997695, 0.16976954043649917, 0.7284508654759587, 0.1720234947078001, 0.6109536779362544, 0.19699172057004033, 0.6278341858854168, 0.18416873648007215, 0.19172006634055738, 0.1985544549963726, 0.7690393700586254, 0.12225681408774802, 0.20031116064419607, 0.18575523620943368, 0.1793420597827855, 0.17996105217861824, 0.1934855864810595, 0.2504365223562308, 0.17026115405507103, 0.18380000350814907, 0.19664227619541008, 0.19448227999484147, 0.0794164975486461, 0.08430362468112984, 0.07301716453485418, 0.08181279272209574, 0.062082491626005876, 0.064352455900749, 0.07510887369596986, 0.07053650067396577, 0.0964906610790407]}, "mutation_prompt": null}
