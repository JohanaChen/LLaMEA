{"id": "1b77d230-a8f9-4dc7-91ec-72c6b773dd0a", "solution": "import numpy as np\n\nclass DESAOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20  # Population size for differential evolution\n        self.mutation_factor = 0.8  # Mutation factor for differential evolution\n        self.crossover_rate = 0.9  # Crossover rate for differential evolution\n        self.initial_temperature = 10.0  # Initial temperature for simulated annealing\n        self.cooling_rate = 0.99  # Cooling rate for simulated annealing\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, \n                                       (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        best_index = np.argmin(scores)\n        best_solution = population[best_index]\n        best_score = scores[best_index]\n        evaluations = self.population_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution mutation and crossover\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), \n                                 self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.crossover_rate\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                # Evaluate trial solution\n                trial_score = func(trial)\n                evaluations += 1\n                \n                # Selection and simulated annealing-based acceptance\n                if trial_score < scores[i] or np.random.rand() < np.exp((scores[i] - trial_score) / temperature):\n                    population[i] = trial\n                    scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_solution = trial\n                        best_score = trial_score\n\n            # Cooling the temperature\n            temperature *= self.cooling_rate\n\n        return best_solution, best_score", "name": "DESAOptimizer", "description": "A hybrid Differential Evolution and Simulated Annealing algorithm (DESA) that combines stochastic search with temperature-driven exploration to efficiently navigate complex landscapes.", "configspace": "", "generation": 0, "fitness": 0.2457586078825965, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.3054355024716455, 0.3037982160285263, 0.31750741773620716, 0.30699849335523166, 0.31540025508976055, 0.3020270372982119, 0.3229563694577038, 0.33202813506754925, 0.3071150169573299, 0.2861295713559544, 9.999999999998899e-05, 0.2920655357185613, 0.290617934782913, 0.28946427497757254, 0.2926164737500845, 0.2999929093430206, 0.29497371135147055, 0.2841401138713331, 0.22046118233775502, 0.17164129958916796, 0.11339206873074092, 0.1418434869996903, 0.20335542181603827, 0.1992733319554132, 0.142846155578911, 0.13521362459339803, 0.18419602685430647, 0.12629600151258968, 0.11270641420066008, 0.12420470500826686, 0.1272066947530247, 0.19777604759212852, 0.12974969502576428, 0.12216494839962255, 0.16761525641791364, 0.13268451955071536, 0.9664745761832546, 0.9637637698850094, 0.9592530088712423, 0.9823943777959578, 0.9444251466892621, 0.9783144566125337, 0.9788366654342916, 0.9487147948895669, 0.9843433792626538, 0.24057606774241524, 0.25793957988384275, 0.2427688376989009, 0.2546656318160838, 0.24586311839381936, 0.26780251636181984, 0.252668272445729, 0.25389093947880015, 0.2612280496892503, 0.3226193325696607, 0.2930775067240552, 0.2953591068923108, 0.31842543752091546, 0.2969268386408127, 0.2961702939531412, 0.283727605973526, 0.33403559707758457, 0.29040565627768944, 0.2524284182738047, 0.2874030524546545, 0.25992527355210326, 0.27322825274748286, 0.24976458713435767, 0.236805289185689, 0.2623114293936196, 0.2743397390382929, 0.2557454588516773, 0.009648113836602024, 0.12067359091911944, 0.2617550495357256, 0.23856577130980716, 0.27065229518969536, 0.24347562159592595, 0.23325710084035378, 0.25972239206930503, 0.24718814241610487, 0.26160192789172654, 0.26690571484795056, 0.26186241748265715, 0.26937734108485867, 0.26479074003458214, 0.26543766388706813, 0.2548771914362258, 0.28152816090519406, 0.2589553267047331, 0.2787299368597944, 0.3087938451636988, 0.2938772490344189, 0.2889490402110728, 0.29119144412328835, 0.28417030832123724, 0.2828158840147824, 0.29051587655993993, 0.3089129124790916, 0.2301922382726017, 0.19897868999575175, 0.21181311297177452, 0.24199927002419885, 0.1854911814709388, 0.22403424182888898, 0.19536791648863427, 0.21139657540930923, 0.22878450192472488, 0.20519211794930658, 0.21655117769109555, 0.210448800728547, 0.20105557906502092, 0.21287658334455806, 0.20544127866614603, 0.20915988584807088, 0.2197981908386034, 0.21182116487990166, 0.29155839232061664, 0.2956158855074609, 0.2761201036719574, 0.28308856828400364, 0.29993837851518224, 0.2971611280006662, 0.29071543572629055, 0.2813444358743974, 0.2863283242882422, 0.1371089350304865, 0.09291583610729248, 0.10332216178558451, 0.09710120451421445, 0.1315069448950893, 0.10990957412677393, 0.11296212703317965, 0.1010496743290239, 0.1080653351386116, 0.14685722916675992, 0.16015433197742002, 0.18036060247086083, 0.1472211868213511, 0.15282271414821458, 0.156500987199372, 0.12051583178303316, 0.1983994897555761, 0.21113045197535507, 0.2318121621011041, 0.2171017520283416, 0.22605412449317908, 0.22125558873198592, 0.23021338275023195, 0.22232429785268937, 0.23773363216442567, 0.23174966436440603, 0.23214936334525904, 0.20866383617464024, 0.22352678008771476, 0.22613144428100118, 0.20780082226482932, 0.20695815605821266, 0.20745154795400633, 0.21405601645816508, 0.2181459590060203, 0.14605730782822068, 0.18651636633402835, 0.17806203461789538, 0.17055874769382295, 0.17663910122270265, 0.16691422052415417, 0.17807738405112816, 0.18149795110796463, 0.18987973501654143, 0.19374862776033708, 0.17913714027561023, 0.17436232830155873, 0.2011628173655977, 0.20515931958215194, 0.19256623827953723, 0.17391212013716795, 0.18750264615336176, 0.2137496109959781, 0.18177119421628563, 0.16384112443194676, 0.14870017674569458, 0.14639228558707307, 0.1802225862284106, 0.37695639180601925, 0.17268458759586192, 0.1947235188502413, 0.18053044866504275, 0.41972475665892606, 0.11109261815987925, 0.16744090008887502, 0.1678278542874415, 0.19339865261317457, 0.19742574780023991, 0.43998771740868137, 0.20886110210609954, 0.12162278301036367, 0.1542483246109979, 0.18403716554777894, 0.20570153332739993, 0.19657138224954995, 0.16153028212323606, 0.17947272044756157, 0.19080346127281134, 0.17188187318951953, 0.17760735247473258, 0.19007948436281696, 0.07758732165497462, 0.06929123749710031, 0.07140580758563464, 0.08015027895748295, 0.08106416872869582, 0.08307639845994086, 0.08097064464812886, 0.07140862353432853, 0.07410981681888917]}, "mutation_prompt": null}
{"id": "4122b2ae-d3fa-4855-82b3-4e5f8be28928", "solution": "import numpy as np\n\nclass DESAOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20  # Population size for differential evolution\n        self.mutation_factor = 0.8  # Mutation factor for differential evolution\n        self.crossover_rate = 0.9  # Crossover rate for differential evolution\n        self.initial_temperature = 10.0  # Initial temperature for simulated annealing\n        self.cooling_rate = 0.99  # Cooling rate for simulated annealing\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, \n                                       (self.population_size, self.dim))\n        scores = np.array([func(ind) for ind in population])\n        best_index = np.argmin(scores)\n        best_solution = population[best_index]\n        best_score = scores[best_index]\n        evaluations = self.population_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution mutation and crossover\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), \n                                 self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.crossover_rate\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                # Evaluate trial solution\n                trial_score = func(trial)\n                evaluations += 1\n                \n                # Selection and simulated annealing-based acceptance\n                if trial_score < scores[i] or np.random.rand() < np.exp((scores[i] - trial_score) / temperature):\n                    population[i] = trial\n                    scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_solution = trial\n                        best_score = trial_score\n\n            # Cooling the temperature\n            temperature *= self.cooling_rate\n\n        return best_solution, best_score", "name": "DESAOptimizer", "description": "A hybrid Differential Evolution and Simulated Annealing algorithm (DESA) that combines stochastic search with temperature-driven exploration to efficiently navigate complex landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b77d230-a8f9-4dc7-91ec-72c6b773dd0a", "metadata": {"aucs": [0.3054355024716455, 0.3037982160285263, 0.31750741773620716, 0.30699849335523166, 0.31540025508976055, 0.3020270372982119, 0.3229563694577038, 0.33202813506754925, 0.3071150169573299, 0.2861295713559544, 9.999999999998899e-05, 0.2920655357185613, 0.290617934782913, 0.28946427497757254, 0.2926164737500845, 0.2999929093430206, 0.29497371135147055, 0.2841401138713331, 0.22046118233775502, 0.17164129958916796, 0.11339206873074092, 0.1418434869996903, 0.20335542181603827, 0.1992733319554132, 0.142846155578911, 0.13521362459339803, 0.18419602685430647, 0.12629600151258968, 0.11270641420066008, 0.12420470500826686, 0.1272066947530247, 0.19777604759212852, 0.12974969502576428, 0.12216494839962255, 0.16761525641791364, 0.13268451955071536, 0.9664745761832546, 0.9637637698850094, 0.9592530088712423, 0.9823943777959578, 0.9444251466892621, 0.9783144566125337, 0.9788366654342916, 0.9487147948895669, 0.9843433792626538, 0.24057606774241524, 0.25793957988384275, 0.2427688376989009, 0.2546656318160838, 0.24586311839381936, 0.26780251636181984, 0.252668272445729, 0.25389093947880015, 0.2612280496892503, 0.3226193325696607, 0.2930775067240552, 0.2953591068923108, 0.31842543752091546, 0.2969268386408127, 0.2961702939531412, 0.283727605973526, 0.33403559707758457, 0.29040565627768944, 0.2524284182738047, 0.2874030524546545, 0.25992527355210326, 0.27322825274748286, 0.24976458713435767, 0.236805289185689, 0.2623114293936196, 0.2743397390382929, 0.2557454588516773, 0.009648113836602024, 0.12067359091911944, 0.2617550495357256, 0.23856577130980716, 0.27065229518969536, 0.24347562159592595, 0.23325710084035378, 0.25972239206930503, 0.24718814241610487, 0.26160192789172654, 0.26690571484795056, 0.26186241748265715, 0.26937734108485867, 0.26479074003458214, 0.26543766388706813, 0.2548771914362258, 0.28152816090519406, 0.2589553267047331, 0.2787299368597944, 0.3087938451636988, 0.2938772490344189, 0.2889490402110728, 0.29119144412328835, 0.28417030832123724, 0.2828158840147824, 0.29051587655993993, 0.3089129124790916, 0.2301922382726017, 0.19897868999575175, 0.21181311297177452, 0.24199927002419885, 0.1854911814709388, 0.22403424182888898, 0.19536791648863427, 0.21139657540930923, 0.22878450192472488, 0.20519211794930658, 0.21655117769109555, 0.210448800728547, 0.20105557906502092, 0.21287658334455806, 0.20544127866614603, 0.20915988584807088, 0.2197981908386034, 0.21182116487990166, 0.29155839232061664, 0.2956158855074609, 0.2761201036719574, 0.28308856828400364, 0.29993837851518224, 0.2971611280006662, 0.29071543572629055, 0.2813444358743974, 0.2863283242882422, 0.1371089350304865, 0.09291583610729248, 0.10332216178558451, 0.09710120451421445, 0.1315069448950893, 0.10990957412677393, 0.11296212703317965, 0.1010496743290239, 0.1080653351386116, 0.14685722916675992, 0.16015433197742002, 0.18036060247086083, 0.1472211868213511, 0.15282271414821458, 0.156500987199372, 0.12051583178303316, 0.1983994897555761, 0.21113045197535507, 0.2318121621011041, 0.2171017520283416, 0.22605412449317908, 0.22125558873198592, 0.23021338275023195, 0.22232429785268937, 0.23773363216442567, 0.23174966436440603, 0.23214936334525904, 0.20866383617464024, 0.22352678008771476, 0.22613144428100118, 0.20780082226482932, 0.20695815605821266, 0.20745154795400633, 0.21405601645816508, 0.2181459590060203, 0.14605730782822068, 0.18651636633402835, 0.17806203461789538, 0.17055874769382295, 0.17663910122270265, 0.16691422052415417, 0.17807738405112816, 0.18149795110796463, 0.18987973501654143, 0.19374862776033708, 0.17913714027561023, 0.17436232830155873, 0.2011628173655977, 0.20515931958215194, 0.19256623827953723, 0.17391212013716795, 0.18750264615336176, 0.2137496109959781, 0.18177119421628563, 0.16384112443194676, 0.14870017674569458, 0.14639228558707307, 0.1802225862284106, 0.37695639180601925, 0.17268458759586192, 0.1947235188502413, 0.18053044866504275, 0.41972475665892606, 0.11109261815987925, 0.16744090008887502, 0.1678278542874415, 0.19339865261317457, 0.19742574780023991, 0.43998771740868137, 0.20886110210609954, 0.12162278301036367, 0.1542483246109979, 0.18403716554777894, 0.20570153332739993, 0.19657138224954995, 0.16153028212323606, 0.17947272044756157, 0.19080346127281134, 0.17188187318951953, 0.17760735247473258, 0.19007948436281696, 0.07758732165497462, 0.06929123749710031, 0.07140580758563464, 0.08015027895748295, 0.08106416872869582, 0.08307639845994086, 0.08097064464812886, 0.07140862353432853, 0.07410981681888917]}, "mutation_prompt": null}
