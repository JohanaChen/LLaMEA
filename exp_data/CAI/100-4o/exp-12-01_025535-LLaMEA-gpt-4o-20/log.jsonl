{"id": "e6d9abee-bdb2-46bf-95b0-7a3b043248e5", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, dim * 10)\n        self.scaling_factor = 0.8\n        self.crossover_rate = 0.9\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.population = self._initialize_population()\n        self.evaluations = 0\n\n    def _initialize_population(self):\n        return np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n\n    def _mutate(self, idx):\n        indices = [i for i in range(self.population_size) if i != idx]\n        r1, r2, r3 = np.random.choice(indices, 3, replace=False)\n        mutant = self.population[r1] + self.scaling_factor * (self.population[r2] - self.population[r3])\n        return np.clip(mutant, self.bounds[0], self.bounds[1])\n\n    def _crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.crossover_rate\n        offspring = np.where(cross_points, mutant, target)\n        return offspring\n\n    def _select(self, target, trial, func):\n        target_fitness = func(target)\n        trial_fitness = func(trial)\n        self.evaluations += 2\n        if trial_fitness < target_fitness:\n            return trial, trial_fitness\n        return target, target_fitness\n\n    def _adaptive_parameter_control(self):\n        self.scaling_factor = np.random.uniform(0.6, 0.9)\n        self.crossover_rate = np.random.uniform(0.8, 1.0)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                mutant = self._mutate(i)\n                trial = self._crossover(self.population[i], mutant)\n                self.population[i], fitness = self._select(self.population[i], trial, func)\n\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = self.population[i]\n\n            self._adaptive_parameter_control()\n\n        return self.best_solution, self.best_fitness", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Learning for Dynamic Parameter Adjustment to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.19292460485427265, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.44990698359696923, 0.4033027127396477, 0.4372289276501099, 0.435442231782444, 0.4445801329070431, 0.4344302639248937, 0.4186928540521784, 0.432233599936962, 0.42988168363063106, 0.17245158270308436, 0.15619483872037765, 0.16036180195516403, 0.1527468021006967, 0.16836243328997658, 0.1783002976319551, 0.16791772997993903, 0.17393205016033375, 0.2073406511897895, 0.12077272741576184, 0.08850350664891082, 0.07992989660710281, 0.10292759602667756, 0.07403332006399066, 0.08258134598231259, 0.09079083777407526, 0.09185288081363907, 0.08175125799252325, 0.07706022909865151, 0.06764541278350866, 0.06386049247155956, 0.0775907802239082, 0.07490563151939367, 0.07790578458889608, 0.09033514975216672, 0.07552120499232606, 0.07250360847550397, 0.920417113738083, 0.9294193031626297, 0.919146413958187, 0.881365826727192, 0.8137373377365374, 0.8026086559526887, 0.9793108860274656, 0.7948824020932105, 0.889240065400877, 0.2247449571841219, 0.1779998284756752, 0.16885895531725892, 0.19614375208952062, 0.17736415066417888, 0.1790688281296834, 0.1975698231069961, 0.19528234730906302, 0.17275055200342193, 0.25088847577328255, 0.22687310950317252, 0.23775925653139351, 0.2595491562429737, 0.26155629989999885, 0.35024975218569465, 0.45193150423032613, 0.2460614136178081, 0.3906677014761881, 0.10380495109710663, 0.09799027259154569, 0.12864676315034085, 0.1303306451826307, 0.09866588347953553, 0.10155824810455782, 0.1332060221998852, 0.12028206396722985, 0.11651870426986988, 0.03965489949834222, 0.12302083090939053, 0.14551432698900957, 0.11351097602499138, 0.09918822303769426, 0.10377144849276088, 0.12189301027432342, 0.0859900733506167, 0.09316899321527594, 0.07345291500279838, 0.03330556147649055, 0.05911490277706721, 0.038666525452636824, 0.03676057245188824, 0.03037295002800766, 0.05174649157863065, 0.0390704622934549, 0.05566731305441175, 0.16558073961527842, 0.15389841892424794, 0.1294414306577717, 0.12145141218003186, 0.15040677340958486, 0.16050859234509518, 0.1652601786839255, 0.1602084819111067, 0.17426283054063807, 9.999999999998899e-05, 0.004703289790423892, 0.0002148342371892653, 0.0010766593135136393, 9.999999999998899e-05, 0.0007749898482565243, 9.999999999998899e-05, 0.0008891352197876179, 0.0003675267591483067, 0.09559851958036847, 0.08491581566185646, 0.0996792017938275, 0.08685937393061283, 0.09800412280985982, 0.10488622534657899, 0.10902113362511168, 0.10516192322744977, 0.1009134366341341, 0.35032456768240317, 0.3579613850375224, 0.37553587514407705, 0.3806206806330801, 0.39236120023472854, 0.3724691809412417, 0.37627924170005034, 0.35565722692110535, 0.36998034399462054, 0.07691963637923727, 0.07942404198334185, 0.08079548466028041, 0.06900619698544574, 0.08060881622421312, 0.07206931602189415, 0.08007340677826247, 0.06590239163913192, 0.07068046665706151, 0.14871135699285443, 0.12206082975772425, 0.14310654688469826, 0.13077481429002213, 0.12142708072673936, 0.1535687295399486, 0.1326980233209879, 0.12521011698196038, 0.14247229740475464, 0.2274786658622694, 0.21766121685158513, 0.22842915566790967, 0.22942499587149012, 0.2062693729108348, 0.20887051031943282, 0.2335717828814643, 0.2517599910980284, 0.2231734890531245, 0.17091638127201114, 0.17049917522503877, 0.14601507675620673, 0.1679737005188554, 0.17711858694860771, 0.17959293401476917, 0.17854071599761334, 0.17707869806441234, 0.1632729341371938, 0.17167428196335455, 0.16791082376080357, 0.19042616107226307, 0.16687483331418684, 0.15745915754728979, 0.16402077734831166, 0.17548079068821731, 0.1686996549459856, 0.1709861094713233, 0.16357084518989906, 0.16573850511770394, 0.17483038528916806, 0.1719711302210266, 0.17185490698883332, 0.1706525580729492, 0.18140972999068805, 0.1705346757394557, 0.16967014321332918, 0.1857429103961019, 0.15033724433625062, 0.15561368767078143, 0.18237566083281265, 0.21766635499058684, 0.21770177050002915, 0.19506135326734186, 0.14855156392643476, 0.15213456003629022, 0.30512254813179207, 0.3132209567757781, 0.2863909907196289, 0.16797133260477093, 0.18067712935328362, 0.1560541860339557, 0.2799519560195979, 0.19385291303109942, 0.20367649092280105, 0.1861436848213054, 0.19428992731882444, 0.17221520190163808, 0.19237541030627947, 0.16759403000205297, 0.17873222933008015, 0.1921037307974921, 0.18272566200745055, 0.1787866227103716, 0.07145510483809381, 0.056228768255054073, 0.06874683194322662, 0.09424849519938527, 0.0711705814192437, 0.05886003760352465, 0.059263356556406466, 0.07415138377653785, 0.06392168556653544]}, "mutation_prompt": null}
{"id": "e374dc2f-b891-4874-979e-180464805924", "solution": "import numpy as np\n\nclass EnhancedDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = max(5, dim * 10)\n        self.scaling_factor = 0.8\n        self.crossover_rate = 0.9\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.population = self._initialize_population(self.initial_population_size)\n        self.evaluations = 0\n\n    def _initialize_population(self, size):\n        return np.random.uniform(self.bounds[0], self.bounds[1], (size, self.dim))\n\n    def _mutate(self, idx):\n        indices = [i for i in range(len(self.population)) if i != idx]\n        r1, r2, r3 = np.random.choice(indices, 3, replace=False)\n        mutant = self.population[r1] + self.scaling_factor * (self.population[r2] - self.population[r3])\n        return np.clip(mutant, self.bounds[0], self.bounds[1])\n\n    def _crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.crossover_rate\n        offspring = np.where(cross_points, mutant, target)\n        return offspring\n\n    def _select(self, target, trial, func):\n        target_fitness = func(target)\n        trial_fitness = func(trial)\n        self.evaluations += 2\n        if trial_fitness < target_fitness:\n            return trial, trial_fitness\n        return target, target_fitness\n\n    def _adaptive_parameter_control(self):\n        self.scaling_factor = np.random.uniform(0.5, 1.0)  # Adjusted range\n        self.crossover_rate = np.random.uniform(0.7, 1.0)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            population_size = len(self.population)  # Dynamic population size\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n                mutant = self._mutate(i)\n                trial = self._crossover(self.population[i], mutant)\n                self.population[i], fitness = self._select(self.population[i], trial, func)\n\n                if fitness < self.best_fitness:\n                    self.best_fitness = fitness\n                    self.best_solution = self.population[i]\n\n            # Reduce population size over time\n            if self.evaluations < self.budget // 2:\n                self.population = self.population[:population_size - 1]\n\n            self._adaptive_parameter_control()\n\n        return self.best_solution, self.best_fitness", "name": "EnhancedDE", "description": "Enhanced Differential Evolution with Dynamic Population and Adaptive Scaling for improved exploration-exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: ValueError(\"Cannot take a larger sample than population when 'replace=False'\").", "error": "ValueError(\"Cannot take a larger sample than population when 'replace=False'\")", "parent_id": "e6d9abee-bdb2-46bf-95b0-7a3b043248e5", "metadata": {}, "mutation_prompt": null}
