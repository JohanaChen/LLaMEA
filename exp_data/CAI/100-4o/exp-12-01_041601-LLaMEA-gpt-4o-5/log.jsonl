{"id": "0cff9d3d-40aa-4e61-8489-76a8c2ab0260", "solution": "import numpy as np\n\nclass HybridDELocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scale_factor = 0.8\n        self.crossover_prob = 0.7\n        self.local_search_steps = 5\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize the population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            new_population = np.copy(population)\n\n            # Differential Evolution Mutation and Crossover\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(population[a] + self.scale_factor * (population[b] - population[c]), \n                                 self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate trial vector\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    new_population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Check budget\n                if budget_used >= self.budget:\n                    break\n\n            population = new_population\n\n            # Local Search Phase\n            for i in range(self.population_size):\n                if budget_used >= self.budget:\n                    break\n                current = population[i]\n                current_fitness = fitness[i]\n\n                for _ in range(self.local_search_steps):\n                    if budget_used >= self.budget:\n                        break\n                    step_size = np.random.uniform(-0.1, 0.1, self.dim)\n                    neighbor = np.clip(current + step_size, self.lower_bound, self.upper_bound)\n                    neighbor_fitness = func(neighbor)\n                    budget_used += 1\n\n                    if neighbor_fitness < current_fitness:\n                        current = neighbor\n                        current_fitness = neighbor_fitness\n\n                population[i] = current\n                fitness[i] = current_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "HybridDELocalSearch", "description": "A hybrid algorithm combining differential evolution for exploration and local search for exploitation to efficiently optimize black box functions.", "configspace": "", "generation": 0, "fitness": 0.16757110602579933, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.35802390081422986, 0.35802390081422986, 0.35802390081422986, 0.32490413612238767, 0.32490413612238767, 0.32490413612238767, 0.3481616522733293, 0.3481616522733293, 0.3481616522733293, 0.03825047161225137, 0.03825047161225137, 0.03825047161225137, 0.03574834393603121, 0.03574834393603121, 0.03574834393603121, 0.04278962462439251, 0.04278962462439251, 0.04278962462439251, 0.11313689886889311, 0.11313689886889311, 0.11313689886889311, 0.09788554651977466, 0.09788554651977466, 0.09788554651977466, 0.09940564203666147, 0.09940564203666147, 0.09940564203666147, 0.07304624865229636, 0.07304624865229636, 0.07304624865229636, 0.06634614190733423, 0.06634614190733423, 0.06634614190733423, 0.0616391124839325, 0.0616391124839325, 0.0616391124839325, 0.7479230605056282, 0.7479230605056282, 0.7479230605056282, 0.7573246418533262, 0.7573246418533262, 0.7573246418533262, 0.7192749135121145, 0.7192749135121145, 0.7192749135121145, 0.09785941564066636, 0.09785941564066636, 0.09785941564066636, 0.1923383129377514, 0.1923383129377514, 0.1923383129377514, 0.12889168875800694, 0.12889168875800694, 0.12889168875800694, 0.1158850497538424, 0.1158850497538424, 0.1158850497538424, 0.15074579154759105, 0.15074579154759105, 0.15074579154759105, 0.147840744085054, 0.147840744085054, 0.147840744085054, 0.10507520504471335, 0.10507520504471335, 0.10507520504471335, 0.11732776275815904, 0.11732776275815904, 0.11732776275815904, 0.11439066250121177, 0.11439066250121177, 0.11439066250121177, 0.08812017873567435, 0.08812017873567435, 0.08812017873567435, 0.10171785334948291, 0.10171785334948291, 0.10171785334948291, 0.11705774077649622, 0.11705774077649622, 0.11705774077649622, 0.003087596814688509, 0.003087596814688509, 0.003087596814688509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014060249743080844, 0.0014060249743080844, 0.0014060249743080844, 0.09710435001515705, 0.09710435001515705, 0.09710435001515705, 0.0804976117388645, 0.0804976117388645, 0.0804976117388645, 0.13853367873367328, 0.13853367873367328, 0.13853367873367328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05791454652386274, 0.05791454652386274, 0.05791454652386274, 0.051455050149237125, 0.051455050149237125, 0.051455050149237125, 0.06483980060325445, 0.06483980060325445, 0.06483980060325445, 0.32674244260180396, 0.32674244260180396, 0.32674244260180396, 0.29140176620979974, 0.29140176620979974, 0.29140176620979974, 0.2737697525607786, 0.2737697525607786, 0.2737697525607786, 0.10719134003825637, 0.10719134003825637, 0.10719134003825637, 0.07410193272562027, 0.07410193272562027, 0.07410193272562027, 0.07026221045700642, 0.07026221045700642, 0.07026221045700642, 0.18164349961586312, 0.18164349961586312, 0.18164349961586312, 0.16590536738545814, 0.16590536738545814, 0.16590536738545814, 0.20462097022494696, 0.20462097022494696, 0.20462097022494696, 0.17154698252719824, 0.17154698252719824, 0.17154698252719824, 0.1627677040947545, 0.1627677040947545, 0.1627677040947545, 0.16238068190808774, 0.16238068190808774, 0.16238068190808774, 0.12580346261779163, 0.12580346261779163, 0.12580346261779163, 0.12172965619336751, 0.12172965619336751, 0.12172965619336751, 0.1395724547673064, 0.1395724547673064, 0.1395724547673064, 0.1760000343827729, 0.1760000343827729, 0.1760000343827729, 0.15705810879610305, 0.15705810879610305, 0.15705810879610305, 0.18370538845777395, 0.18370538845777395, 0.18370538845777395, 0.17248773957165175, 0.17248773957165175, 0.17248773957165175, 0.16322684902817997, 0.16322684902817997, 0.16322684902817997, 0.15850782188019297, 0.15850782188019297, 0.15850782188019297, 0.4180882063847463, 0.4180882063847463, 0.4180882063847463, 0.4317998517136803, 0.4317998517136803, 0.4317998517136803, 0.18895916943808766, 0.18895916943808766, 0.18895916943808766, 0.19799896509971038, 0.19799896509971038, 0.19799896509971038, 0.2869623293692608, 0.2869623293692608, 0.2869623293692608, 0.33109884230569375, 0.33109884230569375, 0.33109884230569375, 0.18200878309433566, 0.18200878309433566, 0.18200878309433566, 0.1908154869138392, 0.1908154869138392, 0.1908154869138392, 0.19210708239582042, 0.19210708239582042, 0.19210708239582042, 0.06608921200006679, 0.06608921200006679, 0.06608921200006679, 0.07220569250700448, 0.07220569250700448, 0.07220569250700448, 0.0602104454263126, 0.0602104454263126, 0.0602104454263126]}, "mutation_prompt": null}
{"id": "297a3b36-3d36-48e6-92c3-bb5de63e1c61", "solution": "import numpy as np\n\nclass HybridDELocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scale_factor = 0.8\n        self.crossover_prob = 0.7\n        self.local_search_steps = 5\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize the population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            new_population = np.copy(population)\n\n            # Differential Evolution Mutation and Crossover\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(population[a] + self.scale_factor * (population[b] - population[c]), \n                                 self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate trial vector\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    new_population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Check budget\n                if budget_used >= self.budget:\n                    break\n\n            population = new_population\n\n            # Local Search Phase\n            for i in range(self.population_size):\n                if budget_used >= self.budget:\n                    break\n                current = population[i]\n                current_fitness = fitness[i]\n\n                for _ in range(self.local_search_steps):\n                    if budget_used >= self.budget:\n                        break\n                    step_size = np.random.uniform(-0.1, 0.1, self.dim)\n                    neighbor = np.clip(current + step_size, self.lower_bound, self.upper_bound)\n                    neighbor_fitness = func(neighbor)\n                    budget_used += 1\n\n                    if neighbor_fitness < current_fitness:\n                        current = neighbor\n                        current_fitness = neighbor_fitness\n\n                population[i] = current\n                fitness[i] = current_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "HybridDELocalSearch", "description": "A hybrid algorithm combining differential evolution for exploration and local search for exploitation to efficiently optimize black box functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cff9d3d-40aa-4e61-8489-76a8c2ab0260", "metadata": {"aucs": [0.35802390081422986, 0.35802390081422986, 0.35802390081422986, 0.32490413612238767, 0.32490413612238767, 0.32490413612238767, 0.3481616522733293, 0.3481616522733293, 0.3481616522733293, 0.03825047161225137, 0.03825047161225137, 0.03825047161225137, 0.03574834393603121, 0.03574834393603121, 0.03574834393603121, 0.04278962462439251, 0.04278962462439251, 0.04278962462439251, 0.11313689886889311, 0.11313689886889311, 0.11313689886889311, 0.09788554651977466, 0.09788554651977466, 0.09788554651977466, 0.09940564203666147, 0.09940564203666147, 0.09940564203666147, 0.07304624865229636, 0.07304624865229636, 0.07304624865229636, 0.06634614190733423, 0.06634614190733423, 0.06634614190733423, 0.0616391124839325, 0.0616391124839325, 0.0616391124839325, 0.7479230605056282, 0.7479230605056282, 0.7479230605056282, 0.7573246418533262, 0.7573246418533262, 0.7573246418533262, 0.7192749135121145, 0.7192749135121145, 0.7192749135121145, 0.09785941564066636, 0.09785941564066636, 0.09785941564066636, 0.1923383129377514, 0.1923383129377514, 0.1923383129377514, 0.12889168875800694, 0.12889168875800694, 0.12889168875800694, 0.1158850497538424, 0.1158850497538424, 0.1158850497538424, 0.15074579154759105, 0.15074579154759105, 0.15074579154759105, 0.147840744085054, 0.147840744085054, 0.147840744085054, 0.10507520504471335, 0.10507520504471335, 0.10507520504471335, 0.11732776275815904, 0.11732776275815904, 0.11732776275815904, 0.11439066250121177, 0.11439066250121177, 0.11439066250121177, 0.08812017873567435, 0.08812017873567435, 0.08812017873567435, 0.10171785334948291, 0.10171785334948291, 0.10171785334948291, 0.11705774077649622, 0.11705774077649622, 0.11705774077649622, 0.003087596814688509, 0.003087596814688509, 0.003087596814688509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014060249743080844, 0.0014060249743080844, 0.0014060249743080844, 0.09710435001515705, 0.09710435001515705, 0.09710435001515705, 0.0804976117388645, 0.0804976117388645, 0.0804976117388645, 0.13853367873367328, 0.13853367873367328, 0.13853367873367328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05791454652386274, 0.05791454652386274, 0.05791454652386274, 0.051455050149237125, 0.051455050149237125, 0.051455050149237125, 0.06483980060325445, 0.06483980060325445, 0.06483980060325445, 0.32674244260180396, 0.32674244260180396, 0.32674244260180396, 0.29140176620979974, 0.29140176620979974, 0.29140176620979974, 0.2737697525607786, 0.2737697525607786, 0.2737697525607786, 0.10719134003825637, 0.10719134003825637, 0.10719134003825637, 0.07410193272562027, 0.07410193272562027, 0.07410193272562027, 0.07026221045700642, 0.07026221045700642, 0.07026221045700642, 0.18164349961586312, 0.18164349961586312, 0.18164349961586312, 0.16590536738545814, 0.16590536738545814, 0.16590536738545814, 0.20462097022494696, 0.20462097022494696, 0.20462097022494696, 0.17154698252719824, 0.17154698252719824, 0.17154698252719824, 0.1627677040947545, 0.1627677040947545, 0.1627677040947545, 0.16238068190808774, 0.16238068190808774, 0.16238068190808774, 0.12580346261779163, 0.12580346261779163, 0.12580346261779163, 0.12172965619336751, 0.12172965619336751, 0.12172965619336751, 0.1395724547673064, 0.1395724547673064, 0.1395724547673064, 0.1760000343827729, 0.1760000343827729, 0.1760000343827729, 0.15705810879610305, 0.15705810879610305, 0.15705810879610305, 0.18370538845777395, 0.18370538845777395, 0.18370538845777395, 0.17248773957165175, 0.17248773957165175, 0.17248773957165175, 0.16322684902817997, 0.16322684902817997, 0.16322684902817997, 0.15850782188019297, 0.15850782188019297, 0.15850782188019297, 0.4180882063847463, 0.4180882063847463, 0.4180882063847463, 0.4317998517136803, 0.4317998517136803, 0.4317998517136803, 0.18895916943808766, 0.18895916943808766, 0.18895916943808766, 0.19799896509971038, 0.19799896509971038, 0.19799896509971038, 0.2869623293692608, 0.2869623293692608, 0.2869623293692608, 0.33109884230569375, 0.33109884230569375, 0.33109884230569375, 0.18200878309433566, 0.18200878309433566, 0.18200878309433566, 0.1908154869138392, 0.1908154869138392, 0.1908154869138392, 0.19210708239582042, 0.19210708239582042, 0.19210708239582042, 0.06608921200006679, 0.06608921200006679, 0.06608921200006679, 0.07220569250700448, 0.07220569250700448, 0.07220569250700448, 0.0602104454263126, 0.0602104454263126, 0.0602104454263126]}, "mutation_prompt": null}
