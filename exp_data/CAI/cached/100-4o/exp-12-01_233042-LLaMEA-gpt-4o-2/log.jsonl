{"id": "f346f749-a37f-40ce-956b-01ff114c74e1", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(max(int(budget / 100), 10), 100)  # Adaptive population size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5  # Differential evolution scaling factor\n        self.CR = 0.9  # Crossover probability\n        self.c1 = 1.5  # PSO cognitive coefficient\n        self.c2 = 2.0  # PSO social coefficient\n        self.w = 0.7   # PSO inertia weight\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current positions\n            for i in range(self.pop_size):\n                score = func(positions[i])\n                evaluations += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions (PSO component)\n            if evaluations < self.budget:\n                r1 = np.random.rand(self.pop_size, self.dim)\n                r2 = np.random.rand(self.pop_size, self.dim)\n                velocities = (self.w * velocities + \n                             self.c1 * r1 * (personal_best_positions - positions) +\n                             self.c2 * r2 * (global_best_position - positions))\n                positions += velocities\n                positions = np.clip(positions, self.lower_bound, self.upper_bound)\n\n            # Differential Evolution Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = np.arange(self.pop_size)\n                idxs = np.delete(idxs, i)\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant_vector = positions[a] + self.F * (positions[b] - positions[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.copy(positions[i])\n                crossover_points = np.random.rand(self.dim) < self.CR\n                trial_vector[crossover_points] = mutant_vector[crossover_points]\n\n                # Selection\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < personal_best_scores[i]:\n                    personal_best_scores[i] = trial_score\n                    personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_score = trial_score\n                    global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "HybridPSO_DE", "description": "A hybrid particle swarm optimization and differential evolution algorithm for efficient exploration and exploitation in black box optimization.", "configspace": "", "generation": 0, "fitness": 0.1559142715255771, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.31220848106107524, 0.3748729705484335, 0.2972467759131213, 0.33659078983505053, 0.3309636200828401, 0.3500810285129141, 0.2737658008647871, 0.29983184132170804, 0.15911466623769555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000515591211770472, 0.004354048203065952, 0.000812686388055095, 0.08465161860373827, 0.06287981457191016, 0.05480127051549155, 0.0702253093580979, 0.0729887662070654, 0.06282175538404644, 0.08271394597040271, 0.059713799668258294, 0.09515910095445301, 0.07034419361585242, 0.06891780068194597, 0.05045274434207314, 0.08592726429461162, 0.04133807712351445, 0.06504585535718743, 0.06301322536654663, 0.06871586097169657, 0.04914130255848481, 0.9668327893056562, 0.9812558913976231, 0.9564405341822187, 0.955467148143527, 0.9649330833438823, 0.9694996814747112, 0.9733804681193224, 0.9690129361899154, 0.9707302177401484, 0.1444211959906947, 0.13432475800508115, 0.12470439370705844, 0.13333721981092295, 0.13268088171183812, 0.13688701115716284, 0.10297866912997755, 0.16043703669066522, 0.08734061285008343, 0.19376215467529623, 0.15816801541169734, 0.13369844950502285, 0.20303407355576597, 0.18976797443437932, 0.1695625833405502, 0.11086331146168849, 0.12269713955875394, 0.26276557203945217, 0.09110118503491083, 0.043693817867122564, 0.06355714826068615, 0.0686818226971142, 0.041108102561368653, 0.07059999695665009, 0.035439705733239846, 0.030807837947740113, 0.05008087477293244, 0.08388012643098497, 0.04415468049188842, 0.06394121503705685, 0.11170831619182608, 0.08427235331111227, 0.05244265365213063, 0.11507352704324625, 0.06651729861875522, 0.013944872880453874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007401331341538975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0424640513757677, 0.04732434172680644, 0.03760033972944543, 0.08680676735546622, 0.05627768596950322, 9.999999999998899e-05, 0.05674009440013561, 0.04082328881508368, 0.04579064509759334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023296572248172387, 0.0002648775269966652, 9.999999999998899e-05, 0.04237258171778757, 0.022046020039174108, 9.999999999998899e-05, 0.03972488334588853, 0.03844561884901543, 0.03554863894914484, 0.30080336064601865, 0.29715822225711075, 0.2863649271445218, 0.2850222694049742, 0.2913692816154806, 0.3003660413354785, 0.2581543033466457, 0.23729848080311378, 0.2275779378643077, 0.07527401936988787, 0.048308505484477404, 0.06039176888828768, 0.06520413577572237, 0.07736837122949569, 0.08334210954118682, 0.08436468559181098, 0.09582472047259138, 0.07333765781488855, 0.1603963278889733, 0.1638009390275602, 0.13552735565119023, 0.1641591975024077, 0.18485378156317045, 0.15211141865790445, 0.14383350928942196, 0.14127221688974645, 0.1467082650827024, 0.20053754561295922, 0.20896543934238931, 0.20339891382404274, 0.19494416545888005, 0.19603450638705544, 0.2108578343735169, 0.21759353406413062, 0.22533339007826747, 0.20497983017894084, 0.14167744556772088, 0.12904413185267094, 0.17226567736000398, 0.15000928788446433, 0.14493310033975104, 0.1467835818149108, 0.14147785002512758, 0.1765659581437914, 0.15015486731962702, 0.16171170535223012, 0.17168212859960696, 0.16536310410870225, 0.19087990661982657, 0.19080476026041937, 0.19602990746368587, 0.17965288616547292, 0.1966079179925958, 0.18749177509629766, 0.17045163887510462, 0.16843387684663025, 0.167502322872908, 0.16234076908041428, 0.16416619159112378, 0.17286228699577655, 0.17982004459801504, 0.1499661392122773, 0.1802298743494326, 0.13828417850425356, 0.23928044657537562, 0.2252996924404711, 0.15787886364990578, 0.18018341848912645, 0.15028680294241126, 0.3035809373371704, 0.1320313247392192, 0.3046474927720877, 0.1646759261488231, 0.1678011332669681, 0.10955720070747754, 0.23945334690192344, 0.13630331847188304, 0.19357428659114417, 0.15087974903441426, 0.1191298782198894, 0.244258254629507, 0.18645738745458806, 0.18837125952162903, 0.18011385370774857, 0.1944980520085604, 0.17722320979696482, 0.17876637380905736, 0.21043692002869763, 0.18780859356254376, 0.18841671192726772, 0.06220935128380811, 0.06445727499150655, 0.060555527503547424, 0.06743527901809698, 0.057303024015396664, 0.07767553078686074, 0.0654440951690558, 0.06775686828270078, 0.07897189675100236]}, "mutation_prompt": null}
{"id": "dada88d0-0973-43cd-87be-126a1735c540", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(max(int(budget / 100), 10), 100)  # Adaptive population size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5  # Differential evolution scaling factor\n        self.CR = 0.9  # Crossover probability\n        self.c1 = 1.5  # PSO cognitive coefficient\n        self.c2 = 2.0  # PSO social coefficient\n        self.w = 0.7   # PSO inertia weight\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current positions\n            for i in range(self.pop_size):\n                score = func(positions[i])\n                evaluations += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions (PSO component)\n            if evaluations < self.budget:\n                r1 = np.random.rand(self.pop_size, self.dim)\n                r2 = np.random.rand(self.pop_size, self.dim)\n                velocities = (self.w * velocities + \n                             self.c1 * r1 * (personal_best_positions - positions) +\n                             self.c2 * r2 * (global_best_position - positions))\n                positions += velocities\n                positions = np.clip(positions, self.lower_bound, self.upper_bound)\n\n            # Differential Evolution Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = np.arange(self.pop_size)\n                idxs = np.delete(idxs, i)\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant_vector = positions[a] + self.F * (positions[b] - positions[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.copy(positions[i])\n                crossover_points = np.random.rand(self.dim) < self.CR\n                trial_vector[crossover_points] = mutant_vector[crossover_points]\n\n                # Selection\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < personal_best_scores[i]:\n                    personal_best_scores[i] = trial_score\n                    personal_best_positions[i] = trial_vector\n\n                if trial_score < global_best_score:\n                    global_best_score = trial_score\n                    global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "HybridPSO_DE", "description": "A hybrid particle swarm optimization and differential evolution algorithm for efficient exploration and exploitation in black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f346f749-a37f-40ce-956b-01ff114c74e1", "metadata": {"aucs": [0.31220848106107524, 0.3748729705484335, 0.2972467759131213, 0.33659078983505053, 0.3309636200828401, 0.3500810285129141, 0.2737658008647871, 0.29983184132170804, 0.15911466623769555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000515591211770472, 0.004354048203065952, 0.000812686388055095, 0.08465161860373827, 0.06287981457191016, 0.05480127051549155, 0.0702253093580979, 0.0729887662070654, 0.06282175538404644, 0.08271394597040271, 0.059713799668258294, 0.09515910095445301, 0.07034419361585242, 0.06891780068194597, 0.05045274434207314, 0.08592726429461162, 0.04133807712351445, 0.06504585535718743, 0.06301322536654663, 0.06871586097169657, 0.04914130255848481, 0.9668327893056562, 0.9812558913976231, 0.9564405341822187, 0.955467148143527, 0.9649330833438823, 0.9694996814747112, 0.9733804681193224, 0.9690129361899154, 0.9707302177401484, 0.1444211959906947, 0.13432475800508115, 0.12470439370705844, 0.13333721981092295, 0.13268088171183812, 0.13688701115716284, 0.10297866912997755, 0.16043703669066522, 0.08734061285008343, 0.19376215467529623, 0.15816801541169734, 0.13369844950502285, 0.20303407355576597, 0.18976797443437932, 0.1695625833405502, 0.11086331146168849, 0.12269713955875394, 0.26276557203945217, 0.09110118503491083, 0.043693817867122564, 0.06355714826068615, 0.0686818226971142, 0.041108102561368653, 0.07059999695665009, 0.035439705733239846, 0.030807837947740113, 0.05008087477293244, 0.08388012643098497, 0.04415468049188842, 0.06394121503705685, 0.11170831619182608, 0.08427235331111227, 0.05244265365213063, 0.11507352704324625, 0.06651729861875522, 0.013944872880453874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007401331341538975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0424640513757677, 0.04732434172680644, 0.03760033972944543, 0.08680676735546622, 0.05627768596950322, 9.999999999998899e-05, 0.05674009440013561, 0.04082328881508368, 0.04579064509759334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023296572248172387, 0.0002648775269966652, 9.999999999998899e-05, 0.04237258171778757, 0.022046020039174108, 9.999999999998899e-05, 0.03972488334588853, 0.03844561884901543, 0.03554863894914484, 0.30080336064601865, 0.29715822225711075, 0.2863649271445218, 0.2850222694049742, 0.2913692816154806, 0.3003660413354785, 0.2581543033466457, 0.23729848080311378, 0.2275779378643077, 0.07527401936988787, 0.048308505484477404, 0.06039176888828768, 0.06520413577572237, 0.07736837122949569, 0.08334210954118682, 0.08436468559181098, 0.09582472047259138, 0.07333765781488855, 0.1603963278889733, 0.1638009390275602, 0.13552735565119023, 0.1641591975024077, 0.18485378156317045, 0.15211141865790445, 0.14383350928942196, 0.14127221688974645, 0.1467082650827024, 0.20053754561295922, 0.20896543934238931, 0.20339891382404274, 0.19494416545888005, 0.19603450638705544, 0.2108578343735169, 0.21759353406413062, 0.22533339007826747, 0.20497983017894084, 0.14167744556772088, 0.12904413185267094, 0.17226567736000398, 0.15000928788446433, 0.14493310033975104, 0.1467835818149108, 0.14147785002512758, 0.1765659581437914, 0.15015486731962702, 0.16171170535223012, 0.17168212859960696, 0.16536310410870225, 0.19087990661982657, 0.19080476026041937, 0.19602990746368587, 0.17965288616547292, 0.1966079179925958, 0.18749177509629766, 0.17045163887510462, 0.16843387684663025, 0.167502322872908, 0.16234076908041428, 0.16416619159112378, 0.17286228699577655, 0.17982004459801504, 0.1499661392122773, 0.1802298743494326, 0.13828417850425356, 0.23928044657537562, 0.2252996924404711, 0.15787886364990578, 0.18018341848912645, 0.15028680294241126, 0.3035809373371704, 0.1320313247392192, 0.3046474927720877, 0.1646759261488231, 0.1678011332669681, 0.10955720070747754, 0.23945334690192344, 0.13630331847188304, 0.19357428659114417, 0.15087974903441426, 0.1191298782198894, 0.244258254629507, 0.18645738745458806, 0.18837125952162903, 0.18011385370774857, 0.1944980520085604, 0.17722320979696482, 0.17876637380905736, 0.21043692002869763, 0.18780859356254376, 0.18841671192726772, 0.06220935128380811, 0.06445727499150655, 0.060555527503547424, 0.06743527901809698, 0.057303024015396664, 0.07767553078686074, 0.0654440951690558, 0.06775686828270078, 0.07897189675100236]}, "mutation_prompt": null}
