{"id": "bb0b29ba-b0e6-44bf-9bed-adc5ac4fa27e", "solution": "import numpy as np\n\nclass ADEBanditOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        # Initialize population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.population_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.scaling_factor * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.crossover_rate\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Early stopping if budget is exhausted\n                if eval_count >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "ADEBanditOptimizer", "description": "Adaptive Differential Evolution with Bandit Strategy for dynamic exploration-exploitation balance in high-dimensional spaces.", "configspace": "", "generation": 0, "fitness": 0.3843416942123081, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8220657623457011, 0.8104062729652128, 0.807613205041134, 0.8159278620142811, 0.8124829953944976, 0.8095859323304011, 0.8061102590161185, 0.8146898693458796, 0.8140031492345604, 0.6709342831777464, 0.6860520324386088, 0.6691837207632285, 0.656624659218827, 0.6711986997363012, 0.6776004932817015, 0.6510811880222321, 0.6692067695199341, 0.6723858166949276, 0.11245605290320781, 0.11041760539357526, 0.12266444072339322, 0.12598935942284661, 0.12074139039275911, 0.11543320939370938, 0.11697361981524479, 0.14307019495754758, 0.11074366012504522, 0.10944636771301663, 0.11268626755116784, 0.11060705046438257, 0.1164650984095913, 0.11486592691865172, 0.10568691699461996, 0.14378060524952818, 0.11111973460838453, 0.1134956266027588, 0.9650798579244725, 0.899472831468793, 0.9134154854589903, 0.9073024990428861, 0.9246995930758926, 0.8499581540193565, 0.9188760504262588, 0.9697307889032634, 0.9136179514735643, 0.475662312734057, 0.5113324074265724, 0.5199221235838067, 0.4863929242779246, 0.5176283839244256, 0.4795101551950496, 0.5165345183238566, 0.5045149249723726, 0.5080006784946527, 0.7819116011013642, 0.7435490978730492, 0.7467293168032298, 0.7999880551632378, 0.836190400418288, 0.7756920549301463, 0.7833367166856167, 0.7693348403793199, 0.7847894720528137, 0.4046768781635228, 0.15469078014346505, 0.19402869419972668, 0.17362057975768386, 0.39566491805570425, 0.23293558801471592, 0.32942975351633663, 0.1807295708115727, 0.17901292376044187, 0.4449706477266495, 0.48972807736005775, 0.20876383429038758, 0.3391764549942877, 0.1901186987936151, 0.18560046732493873, 0.2527139502100304, 0.18128948612746387, 0.4191708783018927, 0.42376740612708363, 0.4261703593922149, 0.45330079110215304, 0.4893000289802413, 0.4203148354215924, 0.4056153200882683, 0.46110654437151466, 0.4511292291122879, 0.46881478254359477, 0.5404420936893164, 0.5418328902667529, 0.5605456306698313, 0.5494589878423537, 0.5363935948699506, 0.585861094194912, 0.5814413615541095, 0.6021683060310341, 0.6001234689274229, 0.12092432365743555, 0.16848015443227682, 0.13721619548369968, 0.2547184263290774, 0.2876789833519615, 0.18197694068359793, 0.15558494914530963, 0.1987248774721425, 0.13871867870058563, 0.3152995485714408, 0.34914146981593985, 0.34218616824965065, 0.3503712501030024, 0.34462565302992465, 0.3829327485052295, 0.3266357241167578, 0.3331991171418044, 0.3207788452666337, 0.7127821620652297, 0.7324942983274287, 0.725269640715688, 0.7210083814724171, 0.7140000317530585, 0.715244746033739, 0.7155152133701821, 0.7136160102115048, 0.7332165541736441, 0.10083005259161859, 0.1039522518711734, 0.11120762274627394, 0.09883701107451548, 0.10002240048728106, 0.12612846193959304, 0.0958068298325061, 0.09193894700551741, 0.09897263164866399, 0.1337950891169032, 0.21376630627748283, 0.13946141799850265, 0.13626736609301315, 0.15769678407211907, 0.14228977105791585, 0.15655205680495232, 0.14418107607536002, 0.16359399978607359, 0.3874306867584856, 0.4200526836058911, 0.43926111857977235, 0.43107595527264153, 0.4478406081923322, 0.4461952239281872, 0.46288861994761, 0.44420549145066446, 0.4661711409952056, 0.32110778573535703, 0.33120500343542314, 0.328291302403783, 0.31632088140893133, 0.34415946939840236, 0.33436626195396657, 0.3553968554685051, 0.3230086395159142, 0.3206624376647156, 0.22395180568317186, 0.19411121595639735, 0.21538618189289938, 0.1891439334627566, 0.1999695299582771, 0.21094980802372765, 0.19910438519182339, 0.18222103382060273, 0.19827358370701742, 0.2306671925646362, 0.1948601106750909, 0.2000810567062672, 0.20712546261688902, 0.1786158748914468, 0.19306379725115275, 0.18470551226455678, 0.1941888618138108, 0.2014255971871124, 0.751790758554567, 0.163494695337992, 0.7759337324115934, 0.18234689968776485, 0.19255619605330399, 0.1737732218471858, 0.17962409940560864, 0.33946164666672396, 0.734714355542389, 0.7006381890054909, 0.20469733541678348, 0.5617035045086209, 0.5051071148311616, 0.16402482571467958, 0.44446462038082046, 0.713039831730921, 0.20659877620214007, 0.20934399066999754, 0.19359291951051272, 0.19362932348843698, 0.19455263691367053, 0.19237020458768028, 0.19143441309573528, 0.18779734537959136, 0.1870034062837903, 0.1779696715386323, 0.19023283668851387, 0.08607384351120395, 0.0972733826423906, 0.08304538977056164, 0.08014132974532617, 0.09113592259743963, 0.08078223603296031, 0.07717333876678345, 0.09126027246337598, 0.08281920378084762]}, "mutation_prompt": null}
{"id": "20af6333-a270-4b53-becc-635af9dd09af", "solution": "import numpy as np\n\nclass ADEBanditOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.5\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        # Initialize population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.population_size, self.dim)\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                # Mutation with dynamic scaling factor adjustment\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                dynamic_scaling_factor = self.scaling_factor + np.random.uniform(-0.1, 0.1)\n                mutant = np.clip(x0 + dynamic_scaling_factor * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.crossover_rate\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Early stopping if budget is exhausted\n                if eval_count >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "ADEBanditOptimizer", "description": "Enhanced ADEBanditOptimizer with dynamic scaling factor adjustment to improve convergence speed and solution quality.", "configspace": "", "generation": 1, "fitness": 0.3947352949880085, "feedback": "", "error": "", "parent_id": "bb0b29ba-b0e6-44bf-9bed-adc5ac4fa27e", "metadata": {"aucs": [0.8079166111923047, 0.8144505786717887, 0.7996235047946089, 0.8108509318723087, 0.804151399419968, 0.8165722532926307, 0.8092674377606867, 0.8216160009820777, 0.7805683462233145, 0.6667677879161374, 0.6606353467911653, 0.6481640003367054, 0.6534115164796424, 0.6905194332296436, 0.669664750140571, 0.6442145842635889, 0.6839850081155414, 0.6750127104499568, 0.11175976425446821, 0.11420916200238185, 0.106373895076183, 0.11901487229606844, 0.10930692177256873, 0.12709594562460624, 0.12177960676761668, 0.11981683324642722, 0.13503436124902524, 0.10345801720561976, 0.11258014998764265, 0.11027236763582982, 0.10720108238051052, 0.09878121084806446, 0.11059939951938447, 0.12554523237479698, 0.10406987089550235, 0.1077863183676846, 0.9439505233227896, 0.9662727263550623, 0.9291756877738214, 0.8595571400274555, 0.8719519894936325, 0.9035747181672984, 0.941621015725818, 0.8250852359762729, 0.9575822748396151, 0.5140742220580394, 0.5001468430140107, 0.5020157522895639, 0.47536149260067073, 0.45878705420866595, 0.4832136254157672, 0.48444054395924596, 0.5488530165615467, 0.4806472859355696, 0.7840672622036142, 0.7541905988668041, 0.7507072625667522, 0.7913944671821111, 0.7962084121376611, 0.7874727959129221, 0.7739470994853637, 0.8038289173879285, 0.8074049078050306, 0.328329004164562, 0.3982449499239543, 0.23383536867498012, 0.5334501469931663, 0.2952092492310304, 0.2427205608785653, 0.3532492293037265, 0.3591641793765272, 0.2257098833881429, 0.169278385673596, 0.20067370193523038, 0.22309254828372826, 0.15235130338547698, 0.16489984114544765, 0.2394532584084602, 0.1792370378525464, 0.18733815623938654, 0.23088269070264922, 0.42982058877615725, 0.4506933795942506, 0.327512326956631, 0.42277994937886154, 0.4422952958924057, 0.43493796990907607, 0.4203225996513984, 0.42034500795526697, 0.4383573668378038, 0.5496192747508184, 0.5451164322580153, 0.5690139438079165, 0.4965338902939751, 0.49980984738644774, 0.5706353331460999, 0.6063453638199163, 0.5717472846288932, 0.6097556505304818, 0.1695039090523951, 0.24094064268791948, 0.15640481292544117, 0.3131220562953875, 0.28876864443498584, 0.2633318642894107, 0.18240141966321544, 0.15720618120758878, 0.23128040854893983, 0.3410433147637796, 0.3438311600974011, 0.3172336209849099, 0.32415179010206063, 0.37346585651788133, 0.35555610237923196, 0.34891578916438426, 0.351060921453171, 0.35857233219479545, 0.7192040070135599, 0.7100253626196851, 0.702626559735414, 0.7299643644992062, 0.7279737378154079, 0.7102529763647508, 0.7300982591248811, 0.7237982790323985, 0.728568083170864, 0.10048885941565311, 0.11302300240381935, 0.11134078122143187, 0.1046961122297434, 0.1312265638825858, 0.1046041467881359, 0.1126473476075347, 0.09541039380762684, 0.09960922139970985, 0.17216540477006204, 0.14903121138116127, 0.14647137327445503, 0.17910107337910508, 0.14352846548861597, 0.14574874419614714, 0.2318455243044093, 0.15171780063960416, 0.13540160511014887, 0.4118489894383063, 0.42632369614677657, 0.4311629421449513, 0.4391267777430934, 0.4681923876857341, 0.43527299360468785, 0.47359508512213433, 0.4511545794377535, 0.4688003400680575, 0.3386853387395443, 0.34179067026839116, 0.3245365869676943, 0.32919337242543156, 0.3327099761223852, 0.3570674600708974, 0.3268820038780953, 0.3521870380551594, 0.3604951938816834, 0.20444190541893492, 0.21654358613720237, 0.1952908683539517, 0.20504510439555057, 0.19561882610944736, 0.1984973583338807, 0.19458638163840447, 0.18418779032665644, 0.19121511105803835, 0.1884096020520606, 0.19516191510353675, 0.20262401846166278, 0.3326757061732959, 0.17890627963417993, 0.20072216945169863, 0.2289138127707726, 0.22819125372093452, 0.21044287232643033, 0.6632881051436654, 0.7237137647871124, 0.6860065646900446, 0.6981858175550055, 0.17885391295966824, 0.6953083785825392, 0.6775118669356122, 0.6262686393519628, 0.6324298987269489, 0.6394004445061016, 0.5280461551969707, 0.628674549287363, 0.6762132560923939, 0.192417801657776, 0.6806158796397923, 0.15174618599414447, 0.20210583693876383, 0.20015207145026293, 0.18250744052061618, 0.18302779372885458, 0.18929597783612118, 0.18507315953053738, 0.1840089062142053, 0.17677764300309118, 0.19722769294341602, 0.2040186560995526, 0.18671764932265933, 0.0853865345147733, 0.07593770695184199, 0.08001398296783369, 0.08065464967776548, 0.08566240160362137, 0.0834171350752525, 0.0714975667270783, 0.0734607289711412, 0.08896779567328228]}, "mutation_prompt": null}
