{"id": "92052a09-3865-44aa-b0b7-4e3dcadfb3ff", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.array([func(ind) for ind in self.population])\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Randomly select three distinct individuals\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n\n                # Perform mutation\n                mutant = np.clip(self.population[a] + self.mutation_factor * (self.population[b] - self.population[c]), -5.0, 5.0)\n\n                # Perform crossover\n                trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                # Selection\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n            # Adaptive mutation and crossover\n            self.mutation_factor = np.clip(self.mutation_factor + np.random.uniform(-0.1, 0.1), 0.5, 1.0)\n            self.crossover_prob = np.clip(self.crossover_prob + np.random.uniform(-0.1, 0.1), 0.7, 1.0)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "HybridDifferentialEvolution", "description": "A hybrid evolutionary algorithm combining differential evolution with adaptive mutation and crossover to efficiently explore and exploit the search space within the given budget.", "configspace": "", "generation": 0, "fitness": 0.30529316906777226, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7167951136585051, 0.7278000416624331, 0.7070222397432795, 0.719626998099822, 0.7591358042688231, 0.680037694904326, 0.6884105709176465, 0.7414342522990169, 0.755881365855909, 0.4735616109712706, 0.5627219419684533, 0.4955912127390383, 0.4555350641780669, 0.544599272127746, 0.47997420969671367, 0.4939254284677209, 0.5582437166711793, 0.4928137492018234, 0.09882135296107353, 0.11991733307328267, 0.12001333326670172, 0.10663206381175827, 0.10849766819922879, 0.11506757373326493, 0.10808884657829165, 0.10510610807426168, 0.12305267550347199, 0.09033037317535142, 0.09677280323484028, 0.11086144375173868, 0.11067590502112057, 0.09314776541270253, 0.10782373687132751, 0.09358920486414446, 0.1033722959049912, 0.10501825490981409, 0.9616047911565233, 0.9582049611251667, 0.8674147728604965, 0.9329173709947509, 0.9698808113200342, 0.8612734874060054, 0.9772920839924912, 0.9367057111929183, 0.9571799597219973, 0.3106343023247057, 0.3462779430503481, 0.36629807116272306, 0.32061181604049604, 0.3889937180213855, 0.3187396606590941, 0.35275157462323115, 0.3676622808863743, 0.35444086935319097, 0.5031243796553704, 0.6633399180585007, 0.5838947843525893, 0.6747162558131053, 0.7208100603803046, 0.5989376928723554, 0.610907037431298, 0.7173691374254687, 0.6310323678775336, 0.28112709704863104, 0.3275517477411004, 0.3019916378830283, 0.2848941795321974, 0.31212641559196774, 0.2381536037058728, 0.30137491868179933, 0.29237618784011143, 0.26523002839107634, 0.24347273969386085, 0.27243713303488026, 0.29284656381170693, 0.2972068249059334, 0.2659886936771402, 0.25689034882245376, 0.257662929883827, 0.3472155227241708, 0.2606779865963531, 0.1509786015434914, 0.22968034173747187, 0.14661468925476018, 0.19406507651831184, 0.18292573902695397, 0.1904385216400597, 0.20180185532424566, 0.2298886522352589, 0.17954128027912652, 0.3361640954233549, 0.3572466048595161, 0.26557727732905245, 0.27881614930132814, 0.3799891319600557, 0.3102458997176455, 0.31456410315125927, 0.4050699344576395, 0.32725775536689905, 0.03930116609240253, 0.09218156133328126, 0.061852028676990134, 0.12088635437469442, 0.06525689825579761, 0.06259909923786977, 0.07907575915238196, 0.10656187267799855, 0.0362844707440827, 0.18838306805042804, 0.2289356450802843, 0.18149321216708436, 0.20705955191103997, 0.22489072142193556, 0.21197361457675468, 0.19627050740034468, 0.2595564371956438, 0.19095922740032012, 0.5716907882155261, 0.5903422527852118, 0.5639784004984998, 0.6021209484836112, 0.62266192530032, 0.5417449028617771, 0.5705825539539949, 0.5853977258594861, 0.548896382436907, 0.08505022632221315, 0.09816748719908353, 0.09212695796505954, 0.09871299669967415, 0.09109055262605414, 0.10506735600168848, 0.07644371544519402, 0.08752556669890799, 0.08806331359849229, 0.13694006787729063, 0.16012255263434805, 0.12880279622733637, 0.14589671722128317, 0.15141024657192248, 0.24928847034632662, 0.15269660643953498, 0.14014709194099706, 0.16564700755961492, 0.31023127554375274, 0.31845548002577995, 0.32355556329896484, 0.3211185834658763, 0.3463753940591908, 0.28758483983953687, 0.309418012327641, 0.35155363191196387, 0.3455239869549539, 0.21783613631010212, 0.2322668992440753, 0.24354949246006585, 0.22111308932988827, 0.23951466224391182, 0.2323049535175119, 0.2267868813107642, 0.2870920092515882, 0.2356427554156003, 0.19257382291200287, 0.17579667792622877, 0.18876476452428648, 0.19952457928357192, 0.18493955860762312, 0.18758049890541084, 0.17645649577402345, 0.18051589386515898, 0.18398208601858046, 0.19597262511286373, 0.18836192934886897, 0.18322521733564046, 0.17997542370562514, 0.17328035366315986, 0.18947688406207364, 0.1852959628502735, 0.1780362552242395, 0.17908250787731428, 0.5208416914287393, 0.1797266760563262, 0.15165922085254802, 0.6348538259041419, 0.19380412877906117, 0.17783655655205566, 0.3634911353817135, 0.5070396997865476, 0.1710495156632884, 0.45015870709356964, 0.1652010080001366, 0.2974649598283451, 0.1953196372719822, 0.20241479128970463, 0.34278468239406934, 0.20739870547162875, 0.20289551368030512, 0.20928583809884382, 0.1879691183122466, 0.19384990205226216, 0.19393878438357504, 0.1818173970969923, 0.18720254862750307, 0.21276163815372784, 0.18535118619524238, 0.1875454009101727, 0.1944366906528855, 0.07753591816836014, 0.06859487956354748, 0.07126240991121613, 0.08499516708399513, 0.06422558645474785, 0.07065586315871952, 0.07462927360728067, 0.08136535697206504, 0.07205400054332056]}, "mutation_prompt": null}
{"id": "31d34045-66fd-4fa7-a126-85cbddac3c3d", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.array([func(ind) for ind in self.population])\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Randomly select three distinct individuals\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n\n                # Perform mutation\n                mutant = np.clip(self.population[a] + self.mutation_factor * (self.population[b] - self.population[c]), -5.0, 5.0)\n\n                # Perform crossover\n                trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                # Selection\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n            # Adaptive mutation and crossover\n            self.mutation_factor = np.clip(self.mutation_factor + np.random.uniform(-0.1, 0.1), 0.5, 1.0)\n            self.crossover_prob = np.clip(self.crossover_prob + np.random.uniform(-0.1, 0.1), 0.7, 1.0)\n            self.pop_size = max(4, int((self.budget - self.evaluations) / (self.budget / self.pop_size)))  # New line for dynamic adjustment\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "HybridDifferentialEvolution", "description": "Introducing a dynamic population size adjustment based on the remaining budget to enhance exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": 0.19561795474281765, "feedback": "", "error": "", "parent_id": "92052a09-3865-44aa-b0b7-4e3dcadfb3ff", "metadata": {"aucs": [0.25506863833844984, 0.5189306017026923, 0.33616903241108886, 0.29372979442819946, 0.3952008718634129, 0.4171076104071081, 0.3581750530576463, 0.3475105044397767, 0.43830205001872047, 9.999999999998899e-05, 0.03673971564433198, 0.10962358076759815, 9.999999999998899e-05, 0.11614747433919015, 0.18041101192909914, 0.03217657489813597, 0.3318425734692698, 0.05922395639926459, 0.12634150060318294, 0.12517948274208446, 0.1403403260261059, 0.1160042919612464, 0.21541675072790445, 0.12086855334793578, 0.1256067880545183, 0.16267725236456732, 0.1387284738195509, 0.05941761251075406, 0.12403135740519922, 0.11407693922988438, 0.10844473941691635, 0.08843739420362784, 0.09435592207561216, 0.08616761451725219, 0.13536070374795617, 0.11151724843509037, 0.9449239583009568, 0.9633350257043352, 0.9799948734223018, 0.9253511418169398, 0.9302651766014475, 0.9602017468170371, 0.9311224252909969, 0.9633629636035118, 0.9456341765669243, 0.06274794416174423, 0.19319202341513497, 0.10832407612272621, 0.1360328728522081, 0.11142675805201085, 0.1690172401843676, 0.12709935432444086, 0.21080536102027225, 0.09048077254308062, 0.20393064727618515, 0.903850420667057, 0.17071325034460205, 0.3619290283624558, 0.27023881646120995, 0.2703784667106238, 0.17291222765187764, 0.3294562813825125, 0.21641138367076906, 0.11685152171778668, 0.14640824092931637, 0.11937756410273437, 0.048573609862753275, 0.10046378235878417, 0.07207985146090745, 0.1005784995973441, 0.18648555784179555, 0.13366145994452638, 0.09011915257596903, 0.021586914297090698, 0.10239119212802594, 0.09722416562979219, 0.14768885163657397, 0.21413121810571778, 0.02549625713361181, 0.11175334515245527, 0.1260732809174615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049755717247883524, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036344993032747186, 0.1308034895364788, 0.08569262618754925, 0.10309649379214703, 0.14262072680916715, 0.08168290324882632, 0.050678294007880376, 0.21864888974211427, 0.08895348716233165, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1004229408685473, 9.999999999998899e-05, 9.999999999998899e-05, 0.05635319719840004, 9.999999999998899e-05, 0.014911017868728282, 0.11188533613273233, 0.07168233110073852, 0.0009185084455093362, 0.20033862610004272, 0.11130042419497677, 0.013863170741255981, 0.14216118304438163, 0.1246716946087576, 0.3234264045022851, 0.39497238450422834, 0.43255993050809805, 0.2781891965257989, 0.35515700351585455, 0.23855948574412378, 0.27400374943134986, 0.36017700586972023, 0.28327432840048994, 0.10889894437949754, 0.12515426066109958, 0.10694621087299616, 0.09891653749558305, 0.1326001488759041, 0.1095041878133225, 0.09382301977026186, 0.09697441038470023, 0.09864129763944096, 0.14020040416311108, 0.1545602403881018, 0.12947766450794174, 0.17888466209482723, 0.18463367968375766, 0.1426466775974763, 0.25087090492482267, 0.1294327467179639, 0.16430934634979455, 0.275548901062022, 0.22912341138479442, 0.30344192451252616, 0.2623948111560489, 0.2557012355910352, 0.38999205982971274, 0.1672647721242414, 0.25697924449410126, 0.3446275069979341, 0.15341015152270465, 0.29031301964793155, 0.30383950243944746, 0.21928455344233022, 0.18487218505873337, 0.1821562355895432, 0.11244667422544385, 0.2229095426315566, 0.22396565120741574, 0.2068251729295123, 0.19287719487663857, 0.2158781533751284, 0.20235917989734975, 0.23083253720143948, 0.1991552341013405, 0.21126742170713686, 0.2059098930333274, 0.20727781168884762, 0.16246558712253478, 0.19872327692052105, 0.2092084448073721, 0.1527558077272113, 0.21256361413020464, 0.21570195631465572, 0.20127382925949533, 0.18700255794823284, 0.1787884019360667, 0.16132519722645777, 0.14914605901056366, 0.192880361627494, 0.13584592331842382, 0.1995176276892917, 0.2130247649624224, 0.15098701758943422, 0.23080430948901987, 0.2432580752746284, 0.14983416059471133, 0.16560038847376668, 0.16206738568442947, 0.21228351929876532, 0.31912508376214643, 0.19598120137655783, 0.1805289115426958, 0.1525990453399334, 0.19627872364893906, 0.1774400507385714, 0.18632670113254812, 0.1729477125663894, 0.192863882224232, 0.18544251807078138, 0.17261998229537057, 0.21389400207228804, 0.1952609797218272, 0.18616297106610125, 0.09490429076712958, 0.0864129150225299, 0.1055792424098807, 0.1117096496506147, 0.07960112080536441, 0.08565831866999629, 0.08667649776564323, 0.09340275165603251, 0.0876536655915996]}, "mutation_prompt": null}
