{"id": "30030326-054c-4f6e-90cc-c7d477c0a13d", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.array([float('inf')] * self.pop_size)\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        eval_count = 0\n\n        # Evaluate initial population\n        for i in range(self.pop_size):\n            self.fitness[i] = func(self.population[i])\n            eval_count += 1\n            if self.fitness[i] < self.best_fitness:\n                self.best_fitness = self.fitness[i]\n                self.best_solution = self.population[i].copy()\n\n        while eval_count < self.budget:\n            for i in range(self.pop_size):\n                # Mutation\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_vector = np.where(\n                    np.random.rand(self.dim) < self.CR, \n                    mutant_vector, \n                    self.population[i]\n                )\n\n                # Simulated Annealing acceptance\n                new_fitness = func(crossover_vector)\n                eval_count += 1\n                if eval_count >= self.budget:\n                    break\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp(-(new_fitness - self.fitness[i]) / (1 + eval_count / self.budget)):\n                    self.population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n                    if new_fitness < self.best_fitness:\n                        self.best_fitness = new_fitness\n                        self.best_solution = crossover_vector.copy()\n\n        return self.best_solution", "name": "HybridDE_SA", "description": "A hybrid differential evolution algorithm integrating simulated annealing for enhanced exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.2422241495912035, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.3071912309705106, 0.3614069823257873, 0.30670868368347215, 0.3057082787611718, 0.30070753685347984, 0.3220892681451092, 0.34791022613687705, 0.3517657176104504, 0.29199763272382795, 0.28594355882812983, 9.999999999998899e-05, 0.2992780541869787, 0.28513243352795214, 0.29050387863511273, 0.29255189379894264, 0.2718160360565466, 0.2737952045157658, 0.2822176798742393, 0.11996880429069334, 0.1919757306353992, 0.12223701162235812, 0.12985683676071802, 0.16399586708419045, 0.19905709900822643, 0.1617210157213096, 0.17350160059811237, 0.21948213344718004, 0.13911687053972055, 0.1804942514792598, 0.12381433660895003, 0.12222015115338292, 0.13276373030867727, 0.13200638266121045, 0.13311051298206822, 0.13088698742325577, 0.12868277775031878, 0.968852148800295, 0.9665862854651828, 0.979651533252509, 0.9791519636066706, 0.9744056051786669, 0.9738861531469554, 0.9682528601668611, 0.97054748127765, 0.9633468663674781, 0.2763056251509649, 0.24937368425536877, 0.23850452518573328, 0.22801236227699895, 0.2458847516586804, 0.2504730152349939, 0.2346540699858497, 0.2351801015293019, 0.2288377407076252, 0.2873184127139178, 0.2907347910103064, 0.298282800374868, 0.2889538564874852, 0.3381859514657073, 0.30407225439816643, 0.2829015518938588, 0.3036131373548354, 0.2902010561890903, 0.19953434009767557, 0.23391683373815064, 0.21667791649239798, 0.25856945629747574, 0.20545321445780362, 0.19461473034062016, 0.23972181766895695, 0.22084084626585376, 0.2163020650121169, 0.009647591933087063, 0.02183521290828916, 0.23906875392255378, 0.26237628603702323, 0.2536458692673741, 0.25474026930373517, 0.20869405464586865, 0.2438222318432196, 0.21900396732584038, 0.23308738394058304, 0.2436548689411684, 0.23646395376994922, 0.23740520714674962, 0.22743004257475463, 0.2563905322729464, 0.21830060161986553, 0.240731614487659, 0.244831831253442, 0.3207038858419893, 0.2971491935838809, 0.26658312604391954, 0.2772544655879339, 0.294575926592182, 0.2636575048765857, 0.28004734376335627, 0.26243656937802695, 0.2560279477588655, 0.22902430679588093, 0.1737681896287564, 0.17256425654434682, 0.19658454174908524, 0.19180757692772543, 0.1998588619880738, 0.20523996605932304, 0.18389049933914425, 0.21033422464943718, 0.18087890448422728, 0.18258178575258166, 0.19544477195760868, 0.20263544831085178, 0.19762307943797264, 0.20070650003640245, 0.1754469031789314, 0.1910666265682096, 0.19678366428334526, 0.3008413633838859, 0.28699875929256846, 0.3183685449170335, 0.29034247592999674, 0.3100397791785888, 0.298307831681243, 0.2773524277147533, 0.2928185584930657, 0.30456651552195024, 0.11694022733639664, 0.09264141022039962, 0.11685090414042121, 0.11414679396386018, 0.12697348339797332, 0.10708979964243115, 0.09015896919350574, 0.10086244326822091, 0.12922548369091513, 0.13406278979388186, 0.1337122499195511, 0.1596376784350999, 0.1820607036912839, 0.1433823965988349, 0.13343028751381658, 0.18276658839188742, 0.1892836743270001, 0.16758394032731072, 0.22430707204928702, 0.2270152477737727, 0.21694332299982466, 0.23293971527791268, 0.21896965836363558, 0.222032940834612, 0.22780565054995483, 0.23475842941531044, 0.2367296351498066, 0.22444394222100206, 0.2037860016290055, 0.19161495122837457, 0.21307546793757615, 0.21082913486966703, 0.19900071216546977, 0.21054346829617565, 0.21939345869109061, 0.2207722433295909, 0.18669155981102714, 0.17291723241035228, 0.18434047773368722, 0.19542883879206419, 0.19793215346543513, 0.1919091754885036, 0.1895445321233541, 0.17763546895530957, 0.17654091343297862, 0.18146636681132622, 0.17744744864682838, 0.18499338632709827, 0.17611892654070416, 0.16884168637526165, 0.18496431564760596, 0.18004616861228073, 0.17532973376578664, 0.1759457564340673, 0.16593386786734976, 0.46043631451159617, 0.48479871386092455, 0.15999406222353685, 0.17885976057134179, 0.19119550831264553, 0.43956107740357053, 0.18308841930256126, 0.1761448171690252, 0.34723862879729506, 0.16833992423348842, 0.1670944548669131, 0.20080129808370395, 0.24371592383995244, 0.20347001688717792, 0.16334219674627315, 0.19590779589991691, 0.1256250182157972, 0.17604802536677522, 0.18905228210726022, 0.1869420231326151, 0.1899637498447132, 0.20487044163084678, 0.16494665322864444, 0.2006445970062859, 0.1689696998561141, 0.21248927822254138, 0.07678482391267338, 0.0763585533383162, 0.07916493635417521, 0.08614842205346118, 0.08107294535849197, 0.07835567810059962, 0.08532221544178242, 0.07560838988831597, 0.0792999774124421]}, "mutation_prompt": null}
{"id": "e2458215-40d3-4208-a884-f53f8a29f35b", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.fitness = np.array([float('inf')] * self.pop_size)\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        eval_count = 0\n\n        # Evaluate initial population\n        for i in range(self.pop_size):\n            self.fitness[i] = func(self.population[i])\n            eval_count += 1\n            if self.fitness[i] < self.best_fitness:\n                self.best_fitness = self.fitness[i]\n                self.best_solution = self.population[i].copy()\n\n        while eval_count < self.budget:\n            for i in range(self.pop_size):\n                # Mutation\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_vector = np.where(\n                    np.random.rand(self.dim) < self.CR, \n                    mutant_vector, \n                    self.population[i]\n                )\n\n                # Simulated Annealing acceptance\n                new_fitness = func(crossover_vector)\n                eval_count += 1\n                if eval_count >= self.budget:\n                    break\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp(-(new_fitness - self.fitness[i]) / (1 + eval_count / self.budget)):\n                    self.population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n                    if new_fitness < self.best_fitness:\n                        self.best_fitness = new_fitness\n                        self.best_solution = crossover_vector.copy()\n\n        return self.best_solution", "name": "HybridDE_SA", "description": "A hybrid differential evolution algorithm integrating simulated annealing for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "30030326-054c-4f6e-90cc-c7d477c0a13d", "metadata": {"aucs": [0.3071912309705106, 0.3614069823257873, 0.30670868368347215, 0.3057082787611718, 0.30070753685347984, 0.3220892681451092, 0.34791022613687705, 0.3517657176104504, 0.29199763272382795, 0.28594355882812983, 9.999999999998899e-05, 0.2992780541869787, 0.28513243352795214, 0.29050387863511273, 0.29255189379894264, 0.2718160360565466, 0.2737952045157658, 0.2822176798742393, 0.11996880429069334, 0.1919757306353992, 0.12223701162235812, 0.12985683676071802, 0.16399586708419045, 0.19905709900822643, 0.1617210157213096, 0.17350160059811237, 0.21948213344718004, 0.13911687053972055, 0.1804942514792598, 0.12381433660895003, 0.12222015115338292, 0.13276373030867727, 0.13200638266121045, 0.13311051298206822, 0.13088698742325577, 0.12868277775031878, 0.968852148800295, 0.9665862854651828, 0.979651533252509, 0.9791519636066706, 0.9744056051786669, 0.9738861531469554, 0.9682528601668611, 0.97054748127765, 0.9633468663674781, 0.2763056251509649, 0.24937368425536877, 0.23850452518573328, 0.22801236227699895, 0.2458847516586804, 0.2504730152349939, 0.2346540699858497, 0.2351801015293019, 0.2288377407076252, 0.2873184127139178, 0.2907347910103064, 0.298282800374868, 0.2889538564874852, 0.3381859514657073, 0.30407225439816643, 0.2829015518938588, 0.3036131373548354, 0.2902010561890903, 0.19953434009767557, 0.23391683373815064, 0.21667791649239798, 0.25856945629747574, 0.20545321445780362, 0.19461473034062016, 0.23972181766895695, 0.22084084626585376, 0.2163020650121169, 0.009647591933087063, 0.02183521290828916, 0.23906875392255378, 0.26237628603702323, 0.2536458692673741, 0.25474026930373517, 0.20869405464586865, 0.2438222318432196, 0.21900396732584038, 0.23308738394058304, 0.2436548689411684, 0.23646395376994922, 0.23740520714674962, 0.22743004257475463, 0.2563905322729464, 0.21830060161986553, 0.240731614487659, 0.244831831253442, 0.3207038858419893, 0.2971491935838809, 0.26658312604391954, 0.2772544655879339, 0.294575926592182, 0.2636575048765857, 0.28004734376335627, 0.26243656937802695, 0.2560279477588655, 0.22902430679588093, 0.1737681896287564, 0.17256425654434682, 0.19658454174908524, 0.19180757692772543, 0.1998588619880738, 0.20523996605932304, 0.18389049933914425, 0.21033422464943718, 0.18087890448422728, 0.18258178575258166, 0.19544477195760868, 0.20263544831085178, 0.19762307943797264, 0.20070650003640245, 0.1754469031789314, 0.1910666265682096, 0.19678366428334526, 0.3008413633838859, 0.28699875929256846, 0.3183685449170335, 0.29034247592999674, 0.3100397791785888, 0.298307831681243, 0.2773524277147533, 0.2928185584930657, 0.30456651552195024, 0.11694022733639664, 0.09264141022039962, 0.11685090414042121, 0.11414679396386018, 0.12697348339797332, 0.10708979964243115, 0.09015896919350574, 0.10086244326822091, 0.12922548369091513, 0.13406278979388186, 0.1337122499195511, 0.1596376784350999, 0.1820607036912839, 0.1433823965988349, 0.13343028751381658, 0.18276658839188742, 0.1892836743270001, 0.16758394032731072, 0.22430707204928702, 0.2270152477737727, 0.21694332299982466, 0.23293971527791268, 0.21896965836363558, 0.222032940834612, 0.22780565054995483, 0.23475842941531044, 0.2367296351498066, 0.22444394222100206, 0.2037860016290055, 0.19161495122837457, 0.21307546793757615, 0.21082913486966703, 0.19900071216546977, 0.21054346829617565, 0.21939345869109061, 0.2207722433295909, 0.18669155981102714, 0.17291723241035228, 0.18434047773368722, 0.19542883879206419, 0.19793215346543513, 0.1919091754885036, 0.1895445321233541, 0.17763546895530957, 0.17654091343297862, 0.18146636681132622, 0.17744744864682838, 0.18499338632709827, 0.17611892654070416, 0.16884168637526165, 0.18496431564760596, 0.18004616861228073, 0.17532973376578664, 0.1759457564340673, 0.16593386786734976, 0.46043631451159617, 0.48479871386092455, 0.15999406222353685, 0.17885976057134179, 0.19119550831264553, 0.43956107740357053, 0.18308841930256126, 0.1761448171690252, 0.34723862879729506, 0.16833992423348842, 0.1670944548669131, 0.20080129808370395, 0.24371592383995244, 0.20347001688717792, 0.16334219674627315, 0.19590779589991691, 0.1256250182157972, 0.17604802536677522, 0.18905228210726022, 0.1869420231326151, 0.1899637498447132, 0.20487044163084678, 0.16494665322864444, 0.2006445970062859, 0.1689696998561141, 0.21248927822254138, 0.07678482391267338, 0.0763585533383162, 0.07916493635417521, 0.08614842205346118, 0.08107294535849197, 0.07835567810059962, 0.08532221544178242, 0.07560838988831597, 0.0792999774124421]}, "mutation_prompt": null}
