{"id": "44858d9c-2d3e-48df-bec0-5580723c542e", "solution": "import numpy as np\n\nclass HybridPSOwithADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.7\n        self.F = 0.8\n        self.CR = 0.9\n        self.bounds = (-5.0, 5.0)\n        \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        \n        # Initialize particle positions and velocities\n        positions = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(pos) for pos in personal_best_positions])\n        \n        # Global best position\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        \n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            # Particle Swarm Optimization update\n            r1, r2 = np.random.rand(2)\n            velocities = (self.w * velocities \n                          + self.c1 * r1 * (personal_best_positions - positions) \n                          + self.c2 * r2 * (global_best_position - positions))\n            \n            # Update positions\n            positions = np.clip(positions + velocities, *self.bounds)\n            \n            # Differential Evolution mutation and crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                # Select three random indices not equal to i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = np.clip(positions[a] + self.F * (positions[b] - positions[c]), *self.bounds)\n                trial_vector = np.copy(positions[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR or j == self.dim - 1:\n                        trial_vector[j] = mutant_vector[j]\n                \n                # Evaluate trial vector\n                trial_score = func(trial_vector)\n                eval_count += 1\n                \n                # Select the better position between current and trial\n                if trial_score < personal_best_scores[i]:\n                    personal_best_scores[i] = trial_score\n                    personal_best_positions[i] = trial_vector\n                    # Update global best if needed\n                    if trial_score < personal_best_scores[global_best_idx]:\n                        global_best_idx = i\n                        global_best_position = trial_vector\n        \n        return global_best_position\n\n# Example usage:\n# optimizer = HybridPSOwithADE(budget=1000, dim=10)\n# best_position = optimizer(some_black_box_function)", "name": "HybridPSOwithADE", "description": "A hybrid Particle Swarm Optimization with Adaptive Differential Evolution augmentation to balance exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.33804030364452614, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8270157699778871, 0.8270157699778871, 0.8270157699778871, 0.8035453817525244, 0.8035453817525244, 0.8035453817525244, 0.8157889583620236, 0.8157889583620236, 0.8157889583620236, 0.6009934832721544, 0.6009934832721544, 0.6009934832721544, 0.06149887159172007, 0.06149887159172007, 0.06149887159172007, 0.5534941252608094, 0.5534941252608094, 0.5534941252608094, 0.11492605052842897, 0.11492605052842897, 0.11492605052842897, 0.11409739210124459, 0.11409739210124459, 0.11409739210124459, 0.10555978128405663, 0.10555978128405663, 0.10555978128405663, 0.0955272266436803, 0.0955272266436803, 0.0955272266436803, 0.13196101391493098, 0.13196101391493098, 0.13196101391493098, 0.06093794025000332, 0.06093794025000332, 0.06093794025000332, 0.9926541133224952, 0.9926541133224952, 0.9926541133224952, 0.9920657351650913, 0.9920657351650913, 0.9920657351650913, 0.9944530534181204, 0.9944530534181204, 0.9944530534181204, 0.062225388592238584, 0.062225388592238584, 0.062225388592238584, 0.14952186088809194, 0.14952186088809194, 0.14952186088809194, 0.581706248379199, 0.581706248379199, 0.581706248379199, 0.7572076713137856, 0.7572076713137856, 0.7572076713137856, 0.2751496216524656, 0.2751496216524656, 0.2751496216524656, 0.8025634833789577, 0.8025634833789577, 0.8025634833789577, 0.5301516397379582, 0.5301516397379582, 0.5301516397379582, 0.5128824889787047, 0.5128824889787047, 0.5128824889787047, 0.5174818962662849, 0.5174818962662849, 0.5174818962662849, 0.4967374034561529, 0.4967374034561529, 0.4967374034561529, 0.48775314203100995, 0.48775314203100995, 0.48775314203100995, 0.42178007629557146, 0.42178007629557146, 0.42178007629557146, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002335494777062963, 0.002335494777062963, 0.002335494777062963, 0.004669157719255246, 0.004669157719255246, 0.004669157719255246, 0.1390552293203171, 0.1390552293203171, 0.1390552293203171, 0.09142836586591196, 0.09142836586591196, 0.09142836586591196, 0.061539535264091505, 0.061539535264091505, 0.061539535264091505, 0.09330162762497018, 0.09330162762497018, 0.09330162762497018, 0.35111445622646553, 0.35111445622646553, 0.35111445622646553, 0.15812351231783195, 0.15812351231783195, 0.15812351231783195, 0.34621839348070516, 0.34621839348070516, 0.34621839348070516, 0.41642442169639804, 0.41642442169639804, 0.41642442169639804, 0.3026649804002862, 0.3026649804002862, 0.3026649804002862, 0.755728830540571, 0.755728830540571, 0.755728830540571, 0.7468023627865931, 0.7468023627865931, 0.7468023627865931, 0.7362548238192472, 0.7362548238192472, 0.7362548238192472, 0.12658254835216032, 0.12658254835216032, 0.12658254835216032, 0.1562019242481727, 0.1562019242481727, 0.1562019242481727, 0.12644411168346492, 0.12644411168346492, 0.12644411168346492, 0.6502834126110351, 0.6502834126110351, 0.6502834126110351, 0.17622144663638883, 0.17622144663638883, 0.17622144663638883, 0.13184913793792852, 0.13184913793792852, 0.13184913793792852, 0.4423929906398626, 0.4423929906398626, 0.4423929906398626, 0.4982200436888212, 0.4982200436888212, 0.4982200436888212, 0.4423588368764083, 0.4423588368764083, 0.4423588368764083, 0.2286036012750451, 0.2286036012750451, 0.2286036012750451, 0.19915183923138025, 0.19915183923138025, 0.19915183923138025, 0.20544564853617875, 0.20544564853617875, 0.20544564853617875, 0.21578557597562265, 0.21578557597562265, 0.21578557597562265, 0.19503783380768458, 0.19503783380768458, 0.19503783380768458, 0.18289031055168703, 0.18289031055168703, 0.18289031055168703, 0.2087096784457647, 0.2087096784457647, 0.2087096784457647, 0.23709793498386522, 0.23709793498386522, 0.23709793498386522, 0.21621743469125554, 0.21621743469125554, 0.21621743469125554, 0.883508875105436, 0.883508875105436, 0.883508875105436, 0.1628915080637493, 0.1628915080637493, 0.1628915080637493, 0.15218638825670805, 0.15218638825670805, 0.15218638825670805, 0.1678544612389149, 0.1678544612389149, 0.1678544612389149, 0.21201907465323389, 0.21201907465323389, 0.21201907465323389, 0.21197387772927045, 0.21197387772927045, 0.21197387772927045, 0.18492439968544383, 0.18492439968544383, 0.18492439968544383, 0.20571608190515056, 0.20571608190515056, 0.20571608190515056, 0.1864443655357011, 0.1864443655357011, 0.1864443655357011, 0.08712912238658077, 0.08712912238658077, 0.08712912238658077, 0.10402768953730357, 0.10402768953730357, 0.10402768953730357, 0.07529069848036707, 0.07529069848036707, 0.07529069848036707]}, "mutation_prompt": null}
{"id": "cc8a7b5c-5428-4352-9a03-7ffe84f97217", "solution": "import numpy as np\n\nclass HybridPSOwithADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.7\n        self.F = 0.8\n        self.CR = 0.9\n        self.bounds = (-5.0, 5.0)\n        \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        \n        # Initialize particle positions and velocities\n        positions = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(pos) for pos in personal_best_positions])\n        \n        # Global best position\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        \n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            # Particle Swarm Optimization update\n            r1, r2 = np.random.rand(2)\n            velocities = (self.w * velocities \n                          + self.c1 * r1 * (personal_best_positions - positions) \n                          + self.c2 * r2 * (global_best_position - positions))\n            \n            # Update positions\n            positions = np.clip(positions + velocities, *self.bounds)\n            \n            # Differential Evolution mutation and crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                # Select three random indices not equal to i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = np.clip(positions[a] + self.F * (positions[b] - positions[c]), *self.bounds)\n                trial_vector = np.copy(positions[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR or j == self.dim - 1:\n                        trial_vector[j] = mutant_vector[j]\n                \n                # Evaluate trial vector\n                trial_score = func(trial_vector)\n                eval_count += 1\n                \n                # Select the better position between current and trial\n                if trial_score < personal_best_scores[i]:\n                    personal_best_scores[i] = trial_score\n                    personal_best_positions[i] = trial_vector\n                    # Update global best if needed\n                    if trial_score < personal_best_scores[global_best_idx]:\n                        global_best_idx = i\n                        global_best_position = trial_vector\n        \n        return global_best_position\n\n# Example usage:\n# optimizer = HybridPSOwithADE(budget=1000, dim=10)\n# best_position = optimizer(some_black_box_function)", "name": "HybridPSOwithADE", "description": "A hybrid Particle Swarm Optimization with Adaptive Differential Evolution augmentation to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "44858d9c-2d3e-48df-bec0-5580723c542e", "metadata": {"aucs": [0.8270157699778871, 0.8270157699778871, 0.8270157699778871, 0.8035453817525244, 0.8035453817525244, 0.8035453817525244, 0.8157889583620236, 0.8157889583620236, 0.8157889583620236, 0.6009934832721544, 0.6009934832721544, 0.6009934832721544, 0.06149887159172007, 0.06149887159172007, 0.06149887159172007, 0.5534941252608094, 0.5534941252608094, 0.5534941252608094, 0.11492605052842897, 0.11492605052842897, 0.11492605052842897, 0.11409739210124459, 0.11409739210124459, 0.11409739210124459, 0.10555978128405663, 0.10555978128405663, 0.10555978128405663, 0.0955272266436803, 0.0955272266436803, 0.0955272266436803, 0.13196101391493098, 0.13196101391493098, 0.13196101391493098, 0.06093794025000332, 0.06093794025000332, 0.06093794025000332, 0.9926541133224952, 0.9926541133224952, 0.9926541133224952, 0.9920657351650913, 0.9920657351650913, 0.9920657351650913, 0.9944530534181204, 0.9944530534181204, 0.9944530534181204, 0.062225388592238584, 0.062225388592238584, 0.062225388592238584, 0.14952186088809194, 0.14952186088809194, 0.14952186088809194, 0.581706248379199, 0.581706248379199, 0.581706248379199, 0.7572076713137856, 0.7572076713137856, 0.7572076713137856, 0.2751496216524656, 0.2751496216524656, 0.2751496216524656, 0.8025634833789577, 0.8025634833789577, 0.8025634833789577, 0.5301516397379582, 0.5301516397379582, 0.5301516397379582, 0.5128824889787047, 0.5128824889787047, 0.5128824889787047, 0.5174818962662849, 0.5174818962662849, 0.5174818962662849, 0.4967374034561529, 0.4967374034561529, 0.4967374034561529, 0.48775314203100995, 0.48775314203100995, 0.48775314203100995, 0.42178007629557146, 0.42178007629557146, 0.42178007629557146, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002335494777062963, 0.002335494777062963, 0.002335494777062963, 0.004669157719255246, 0.004669157719255246, 0.004669157719255246, 0.1390552293203171, 0.1390552293203171, 0.1390552293203171, 0.09142836586591196, 0.09142836586591196, 0.09142836586591196, 0.061539535264091505, 0.061539535264091505, 0.061539535264091505, 0.09330162762497018, 0.09330162762497018, 0.09330162762497018, 0.35111445622646553, 0.35111445622646553, 0.35111445622646553, 0.15812351231783195, 0.15812351231783195, 0.15812351231783195, 0.34621839348070516, 0.34621839348070516, 0.34621839348070516, 0.41642442169639804, 0.41642442169639804, 0.41642442169639804, 0.3026649804002862, 0.3026649804002862, 0.3026649804002862, 0.755728830540571, 0.755728830540571, 0.755728830540571, 0.7468023627865931, 0.7468023627865931, 0.7468023627865931, 0.7362548238192472, 0.7362548238192472, 0.7362548238192472, 0.12658254835216032, 0.12658254835216032, 0.12658254835216032, 0.1562019242481727, 0.1562019242481727, 0.1562019242481727, 0.12644411168346492, 0.12644411168346492, 0.12644411168346492, 0.6502834126110351, 0.6502834126110351, 0.6502834126110351, 0.17622144663638883, 0.17622144663638883, 0.17622144663638883, 0.13184913793792852, 0.13184913793792852, 0.13184913793792852, 0.4423929906398626, 0.4423929906398626, 0.4423929906398626, 0.4982200436888212, 0.4982200436888212, 0.4982200436888212, 0.4423588368764083, 0.4423588368764083, 0.4423588368764083, 0.2286036012750451, 0.2286036012750451, 0.2286036012750451, 0.19915183923138025, 0.19915183923138025, 0.19915183923138025, 0.20544564853617875, 0.20544564853617875, 0.20544564853617875, 0.21578557597562265, 0.21578557597562265, 0.21578557597562265, 0.19503783380768458, 0.19503783380768458, 0.19503783380768458, 0.18289031055168703, 0.18289031055168703, 0.18289031055168703, 0.2087096784457647, 0.2087096784457647, 0.2087096784457647, 0.23709793498386522, 0.23709793498386522, 0.23709793498386522, 0.21621743469125554, 0.21621743469125554, 0.21621743469125554, 0.883508875105436, 0.883508875105436, 0.883508875105436, 0.1628915080637493, 0.1628915080637493, 0.1628915080637493, 0.15218638825670805, 0.15218638825670805, 0.15218638825670805, 0.1678544612389149, 0.1678544612389149, 0.1678544612389149, 0.21201907465323389, 0.21201907465323389, 0.21201907465323389, 0.21197387772927045, 0.21197387772927045, 0.21197387772927045, 0.18492439968544383, 0.18492439968544383, 0.18492439968544383, 0.20571608190515056, 0.20571608190515056, 0.20571608190515056, 0.1864443655357011, 0.1864443655357011, 0.1864443655357011, 0.08712912238658077, 0.08712912238658077, 0.08712912238658077, 0.10402768953730357, 0.10402768953730357, 0.10402768953730357, 0.07529069848036707, 0.07529069848036707, 0.07529069848036707]}, "mutation_prompt": null}
