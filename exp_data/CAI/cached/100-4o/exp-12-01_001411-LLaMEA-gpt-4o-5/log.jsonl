{"id": "76751db8-2c44-46f9-85f4-58bd84e4b4c9", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-abs(self.upper_bound - self.lower_bound), abs(self.upper_bound - self.lower_bound), (self.population_size, self.dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n        self.cr = 0.9  # Crossover rate for DE\n        self.f = 0.8   # Differential weight for DE\n\n    def __call__(self, func):\n        evaluations = 0\n        \n        def update_velocities_and_positions():\n            nonlocal evaluations\n            inertia_weight = 0.5 + np.random.rand() / 2\n            cognitive_component = 2.05 * np.random.rand(self.population_size, self.dim)\n            social_component = 2.05 * np.random.rand(self.population_size, self.dim)\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                cognitive_velocity = cognitive_component[i] * (self.pbest_positions[i] - self.particles[i])\n                social_velocity = social_component[i] * (self.gbest_position - self.particles[i])\n                self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_velocity + social_velocity\n                self.particles[i] += self.velocities[i]\n\n                self.particles[i] = np.clip(self.particles[i], self.lower_bound, self.upper_bound)\n                score = func(self.particles[i])\n                evaluations += 1\n\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.particles[i]\n\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.particles[i]\n        \n        def differential_evolution():\n            nonlocal evaluations\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.particles[a] + self.f * (self.particles[b] - self.particles[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.copy(self.particles[i])\n                crossover_points = np.random.rand(self.dim) < self.cr\n                trial_vector[crossover_points] = mutant_vector[crossover_points]\n\n                score = func(trial_vector)\n                evaluations += 1\n\n                if score < func(self.particles[i]):\n                    self.particles[i] = trial_vector\n                    if score < self.pbest_scores[i]:\n                        self.pbest_scores[i] = score\n                        self.pbest_positions[i] = trial_vector\n                    if score < self.gbest_score:\n                        self.gbest_score = score\n                        self.gbest_position = trial_vector\n\n        while evaluations < self.budget:\n            update_velocities_and_positions()\n            differential_evolution()\n\n        return self.gbest_position, self.gbest_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm Optimization combined with Differential Evolution to balance exploration and exploitation.", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "An exception occured: Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 72, in __call__\n  File \"<string>\", line 31, in update_velocities_and_positions\nTypeError: unsupported operand type(s) for -: 'NoneType' and 'float'\n.", "error": "TypeError(\"unsupported operand type(s) for -: 'NoneType' and 'float'\")Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 72, in __call__\n  File \"<string>\", line 31, in update_velocities_and_positions\nTypeError: unsupported operand type(s) for -: 'NoneType' and 'float'\n", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "8cd61ef7-45a6-49c8-9046-64473a272289", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-abs(self.upper_bound - self.lower_bound), abs(self.upper_bound - self.lower_bound), (self.population_size, self.dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n        self.cr = 0.9  # Crossover rate for DE\n        self.f = 0.8   # Differential weight for DE\n\n    def __call__(self, func):\n        evaluations = 0\n        \n        def update_velocities_and_positions():\n            nonlocal evaluations\n            inertia_weight = 0.5 + np.random.rand() / 2\n            cognitive_component = 2.05 * np.random.rand(self.population_size, self.dim)\n            social_component = 2.05 * np.random.rand(self.population_size, self.dim)\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                cognitive_velocity = cognitive_component[i] * (self.pbest_positions[i] - self.particles[i])\n                social_velocity = social_component[i] * (self.gbest_position - self.particles[i] if self.gbest_position is not None else 0)\n                self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_velocity + social_velocity\n                self.particles[i] += self.velocities[i]\n\n                self.particles[i] = np.clip(self.particles[i], self.lower_bound, self.upper_bound)\n                score = func(self.particles[i])\n                evaluations += 1\n\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.particles[i]\n\n                if self.gbest_position is None or score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.particles[i]\n        \n        def differential_evolution():\n            nonlocal evaluations\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.particles[a] + self.f * (self.particles[b] - self.particles[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.copy(self.particles[i])\n                crossover_points = np.random.rand(self.dim) < self.cr\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(0, self.dim)] = True\n                trial_vector[crossover_points] = mutant_vector[crossover_points]\n\n                score = func(trial_vector)\n                evaluations += 1\n\n                if score < func(self.particles[i]):\n                    self.particles[i] = trial_vector\n                    if score < self.pbest_scores[i]:\n                        self.pbest_scores[i] = score\n                        self.pbest_positions[i] = trial_vector\n                    if score < self.gbest_score:\n                        self.gbest_score = score\n                        self.gbest_position = trial_vector\n\n        while evaluations < self.budget:\n            update_velocities_and_positions()\n            differential_evolution()\n\n        return self.gbest_position, self.gbest_score", "name": "PSO_DE_Optimizer", "description": "Refined hybrid PSO-DE optimizer with corrected particle swarm logic and improved DE trial vector handling.", "configspace": "", "generation": 1, "fitness": 0.1263332401650654, "feedback": "", "error": "", "parent_id": "76751db8-2c44-46f9-85f4-58bd84e4b4c9", "metadata": {"aucs": [0.187742673569948, 0.19046303442900914, 0.2124827078793744, 0.30877397277566665, 0.25660821021440994, 0.1761531442999763, 0.2666071251772657, 0.16735328747317713, 0.19164692342869039, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010145715602993821, 0.051315831498662035, 0.05641060114652663, 0.03480846789951686, 0.044987363197401486, 0.05049093334750909, 0.055145723452787565, 0.05280307527016559, 0.06767490330058024, 0.04569923023348965, 0.06180518641564903, 0.045865835758435836, 0.025086650159956703, 0.05186422333001628, 0.016898845368163662, 0.02876016217077426, 0.04577745345571471, 0.022640370755664496, 0.028356886754576593, 0.9960065557939235, 0.9904727856410838, 0.9877714344688875, 0.9980854346821791, 0.9831096823072182, 0.9928493129624125, 0.995721847330097, 0.9860261502449115, 0.9974821001868072, 0.04917215073501646, 0.08469904065424383, 0.09060062393517454, 0.09064410064090533, 0.08491344707185089, 0.10813615352526229, 9.999999999998899e-05, 0.09571303786037666, 0.07502465400388703, 0.12393531261537516, 0.10287935360352818, 0.1532230119271739, 0.11631209830096145, 0.17381359365344273, 0.14516765906357632, 0.1332919719034198, 0.10571334019937362, 0.11641254509022658, 0.02686998825541609, 0.04617966806786167, 0.022708081145433767, 0.04164037394979969, 9.999999999998899e-05, 0.023056009893510976, 0.03997285594698463, 9.999999999998899e-05, 0.03754737822745924, 0.039224708520659846, 0.01687005764903393, 0.02042502569840432, 0.06888723890711013, 0.006509342088577785, 0.011967781294102475, 0.014522901037674618, 0.025570824849380336, 0.023535639341282333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029171508370129384, 0.047440773285800986, 0.04443252813479448, 0.004254861209060601, 0.003972878534342805, 9.999999999998899e-05, 0.01266360394449606, 0.03281721349652489, 0.04253694054691459, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010296153622108006, 9.999999999998899e-05, 0.004738807919871024, 0.0007851424482653302, 0.0038311877022316754, 0.0035320745451669078, 0.024051233141761608, 0.013645091977215862, 0.030918884028810156, 0.19391327514677803, 0.23871611632486678, 0.21533315231411942, 0.21342937679915464, 0.19636416989022187, 0.19669107322933477, 0.18500124409313734, 0.18806615541340332, 0.22167506258088343, 0.05955432012946771, 0.054213901412552334, 0.05184710481503485, 0.042291945360607874, 0.04622694926217774, 0.03662040546851586, 0.04309290463497617, 0.05005398913742043, 0.06387909801724911, 0.12699059927747458, 0.13521415906085954, 0.1503894587885185, 0.17829660890007903, 0.13824315063761528, 0.12521046595454777, 0.15411206524780396, 0.13840370104259292, 0.12412015457280434, 0.17360437001672124, 0.13662396600242188, 0.15955634433754207, 0.14600165181670854, 0.1495812350772705, 0.1571056033927153, 0.18030503656036823, 0.17123533604474217, 0.14145747649810458, 0.11466172204854153, 0.10199011639327005, 0.0638218539407095, 0.12253286196768842, 0.14290849633701985, 0.09709814792211569, 0.09967307742879694, 0.13870928051537335, 0.08988378012277898, 0.15256387951629735, 0.14919538889836026, 0.14626665671546457, 0.13853512038678306, 0.1335758852323592, 0.1666445385587162, 0.12541672397149506, 0.17911826784631035, 0.17264816197902888, 0.14544866929857958, 0.0390786195048175, 0.15457397611485924, 0.14429742037235993, 0.09925936683793113, 0.1158593368288866, 0.15357207627489555, 0.11623055925677617, 0.153200266527311, 0.15362429214431927, 0.14503637394334312, 0.14833069891927753, 0.10257728204946193, 0.17146380180540544, 0.14032892803246666, 0.17245431484930618, 0.15765902218889571, 0.13487627810825564, 0.1582826291020537, 0.1415111373130581, 0.1444059898786214, 0.10156827962958304, 0.14604942509807517, 0.10235676799181714, 0.11884565165695693, 0.17678052568337244, 0.11420698157087339, 0.1841002960321917, 0.1739033926750988, 0.16825561166241532, 0.17015830300247303, 0.18026477984095068, 0.17046800545864027, 0.1811322499653043, 0.181368525086254, 0.19451674548874243, 0.04907071569734289, 0.04689816351015197, 0.04421144274246347, 0.03807021123825782, 0.04099192439702981, 0.055516863600865496, 0.04898167026298439, 0.04494878300515415, 0.054666036125602835]}, "mutation_prompt": null}
