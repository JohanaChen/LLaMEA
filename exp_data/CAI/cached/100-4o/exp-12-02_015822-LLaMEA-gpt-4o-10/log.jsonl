{"id": "785d357b-f00b-456d-97d6-12c8c8a66867", "solution": "import numpy as np\n\nclass HybridES_ADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 4 + int(3 * np.log(self.dim))\n        self.mutation_factor = 0.5\n        self.crossover_prob = 0.9\n        self.global_best = None\n        self.best_fitness = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation using DE/rand/1/bin strategy\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Update global best\n                if trial_fitness < self.best_fitness:\n                    self.global_best = trial\n                    self.best_fitness = trial_fitness\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return self.global_best", "name": "HybridES_ADM", "description": "Hybrid Evolutionary Strategy with Adaptive Differential Mutation for diverse and efficient exploration-exploitation balance.", "configspace": "", "generation": 0, "fitness": 0.10667438037503514, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.4513394083937734, 0.23223833892467938, 0.30957508289914026, 0.2940428060084207, 0.10069077442834773, 0.06579884699790017, 0.11546472850449485, 0.23078484237709496, 0.09447847497640582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07140489160501007, 0.12035524257812302, 0.08355622613070901, 0.08916683062851627, 0.09410877829877151, 0.1332847724586148, 0.13632752752299626, 0.09424701918965439, 0.0945739723699136, 0.04766181188111074, 0.007502657708845839, 0.04796894301073684, 0.1027724144733797, 0.015096359182798724, 0.0046323760423576665, 0.13194032464889915, 0.06394219470963158, 9.999999999998899e-05, 0.22995782415458443, 0.12312826885574035, 0.10357504807173701, 0.13709583294907735, 0.11785702805372333, 0.1222733667150977, 0.07580306944322368, 0.13736912418876257, 0.16906704602800604, 0.05359582097600524, 0.02842738804272993, 0.03750583213803116, 0.023217508868694003, 0.04369141105580143, 0.03167594756318304, 0.0322429078453742, 0.03874209725946254, 9.999999999998899e-05, 0.1585281095758504, 0.1122978474862002, 0.11412431610263063, 0.1507609626575298, 0.09692791853438554, 0.10279810878224105, 0.0777037726163542, 0.10852914652363377, 0.16947772914168235, 0.11387621302982665, 9.999999999998899e-05, 0.14604118894819207, 9.999999999998899e-05, 0.0004888637867367374, 9.999999999998899e-05, 0.03125596430758415, 0.1580048018326361, 9.999999999998899e-05, 0.030559695332652903, 0.0944162904439041, 0.08252075173592766, 0.08304617601779751, 0.1796962325128545, 0.03584984472123598, 0.029111406311315702, 9.999999999998899e-05, 0.12312930775639941, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04316057405322771, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14112993187457212, 0.09998448426748852, 0.11894008086065622, 0.06908501224575048, 0.011160880982421406, 0.0036854169541647996, 0.062071883791516846, 0.09107403020158711, 0.055194616153312226, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011305028891456681, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005336516381954093, 9.999999999998899e-05, 0.06222530085797884, 9.999999999998899e-05, 0.1395014816618867, 0.2560173339656123, 0.20228982392353811, 0.15538240742129783, 0.13142192005395315, 0.17809350165050852, 0.12794393099248447, 0.26318652748528504, 0.313137228162635, 0.06907765429946999, 0.06880687117896467, 9.999999999998899e-05, 0.04146280409306213, 0.07797383953286441, 0.10124900351975752, 0.09525442872417966, 0.10053109346231759, 0.09253525654222938, 0.1908300128039564, 0.16110967393677034, 0.14293200185832555, 0.1349523624404363, 0.190590827230397, 0.14639695179228818, 0.12772681583071321, 0.16513512304390565, 0.20121756282380054, 0.26229914035227997, 0.25127868514197904, 0.19702868529051476, 0.2110901913483253, 0.19744044714984643, 0.18241008291849714, 0.20535496478919024, 0.18695087985449077, 0.16268120250297236, 0.09204816194118737, 0.20604227654819152, 0.23515609507665836, 0.1919692798862198, 0.2162698156204077, 0.11669985587682208, 0.1839086535351092, 0.14651610514278524, 0.16576055829526337, 0.1730550872732325, 0.20083874592379836, 0.17807308196703853, 0.1605058126024249, 0.1601531388752504, 0.16930469508541024, 0.169092744566968, 0.17353262042289075, 0.18140581554168933, 9.999999999998899e-05, 0.18750539193888405, 0.18039587615022978, 0.1900053046633744, 0.22387514274860976, 0.18091116938600027, 0.1899161331318513, 0.1750931647793097, 0.18119886458090273, 0.17252202101064396, 0.43846459617188616, 0.12189299978979873, 0.17189493716656667, 0.16787087352622532, 0.136343362978247, 0.1237755776193259, 0.1554908891009691, 0.11622028783749061, 0.08037242247450871, 0.21648663263581436, 0.06383593505770535, 0.10192015658402509, 0.15186412255579906, 0.06820605363001253, 0.12522755307113254, 0.10831516436582156, 0.08138559725894123, 0.18666273710317305, 0.16645047631416876, 0.19887733033411126, 0.21789177834468576, 0.14971432957444142, 0.16689034192489693, 0.16604498371674214, 0.1973743462822416, 0.15933654912309814, 0.07380618012952911, 0.07760454090192181, 0.11229335297415832, 0.078247989263311, 0.09637786573673113, 0.09447994635211776, 0.09222223420889464, 0.07531390379161218, 0.05368420892437675]}, "mutation_prompt": null}
{"id": "dae296ae-3163-4199-9c9d-539906ad7331", "solution": "import numpy as np\n\nclass HybridES_ADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 4 + int(3 * np.log(self.dim))\n        self.mutation_factor = 0.5\n        self.crossover_prob = 0.9\n        self.global_best = None\n        self.best_fitness = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations += population_size\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                # Mutation using DE/rand/1/bin strategy\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Update global best\n                if trial_fitness < self.best_fitness:\n                    self.global_best = trial\n                    self.best_fitness = trial_fitness\n\n                if self.evaluations >= self.budget:\n                    break\n\n            # Dynamic resizing of population\n            population_size = max(4, int(self.initial_population_size - self.evaluations / self.budget * self.initial_population_size))\n            population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n\n        return self.global_best", "name": "HybridES_ADM", "description": "Refined HybridES_ADM with Dynamic Population Resizing for enhanced adaptability and resource allocation.", "configspace": "", "generation": 1, "fitness": 0.09108352592907874, "feedback": "", "error": "", "parent_id": "785d357b-f00b-456d-97d6-12c8c8a66867", "metadata": {"aucs": [0.1724808913757222, 0.16957120029492323, 0.15306287941858732, 0.14880908133403392, 0.14684801771853073, 0.1671993161408344, 0.18009333297718422, 0.14862412591018204, 0.146289554579202, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05458526789602469, 0.0739088843011495, 0.0632788856183204, 0.05986539315612138, 0.034206950023319194, 0.04302925343273123, 0.04341177177258071, 0.03775979485593284, 0.04648622434132266, 0.03120094408345353, 0.025478072334509716, 0.03019996196612751, 0.022281727551983765, 0.027755377189088493, 0.04491298633601459, 0.026673448848403725, 0.02678577241750446, 0.03113348392125792, 0.14281935723424088, 0.11001859533457647, 0.17355896382296032, 0.13481258619830028, 0.10775573070608424, 0.14591904474717632, 0.14087256176859464, 0.2699739846451015, 0.13512573811538586, 0.08254197979572075, 0.07019727539080345, 0.07613867562383059, 0.07694766033058453, 0.046643453263447765, 0.08028986259218274, 0.09810904086905503, 0.08340785527753414, 0.09298057870282028, 0.14073790949214926, 0.13180110811525225, 0.11947469480959938, 0.12688696860689286, 0.10975705740917552, 0.11242230152792021, 0.08832182942665623, 0.12258935731951492, 0.13078801105599125, 9.999999999998899e-05, 0.0015539343202817246, 0.004519865157615266, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008255060060984309, 9.999999999998899e-05, 0.0011313076940386857, 9.999999999998899e-05, 9.999999999998899e-05, 0.034103213980836156, 0.0024759554658648764, 0.011419706902113136, 0.044538560334086985, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008295824274237029, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1112214150375499, 0.07234830863799546, 0.07255965906860495, 0.038439753807382515, 0.038316032126078814, 0.05082144841555836, 0.04320801805089136, 0.06629835475977108, 0.07092406468962376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012271114337374378, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20683300547924133, 0.2197353198063855, 0.2424450549877153, 0.19457263971217065, 0.18574577494162514, 0.177152719059962, 0.19071608393603945, 0.19375395656340466, 0.18643344289646402, 0.043176651415823275, 0.03787030186819684, 0.03695255238705197, 0.041743787454857184, 0.04236037497288003, 0.04603684239035266, 0.045520631442938275, 0.04540286373895708, 0.046746108434802425, 0.1222808918104551, 0.13702188377546387, 0.1331765914108457, 0.1383973054153046, 0.14571110484302696, 0.12971843667003413, 0.12939338857423188, 0.1288046648798883, 0.14800716520774038, 0.16115084700816928, 0.15258127649815834, 0.1553074729463868, 0.17267254149756572, 0.16724798123553264, 0.15791165719861278, 0.15693416015197414, 0.16079556322818334, 0.1611203787420845, 0.10635903208492725, 0.1076227152885032, 0.09970986751455435, 0.11193612950464527, 0.1306804255703602, 0.12149748711916997, 0.10597959053201667, 0.10716916908016028, 0.10079607517259703, 0.1575307151659896, 0.15030084459091175, 0.1703999880503041, 0.16083852986750813, 0.14638162725610837, 0.16765389126469732, 0.1508583706177442, 0.15698544192074748, 0.16446868485977484, 0.1486928842342239, 0.14918086145671838, 0.14794886162865672, 0.14450369304611432, 0.1422213905065891, 0.13411190345558932, 0.15054294030146376, 0.14793480401279124, 0.14259957715183902, 0.17264719598356537, 0.16688785789126692, 0.16740904943001755, 0.27342160221921563, 0.1622573933221345, 0.16108039002787478, 0.15247122713525096, 0.16157816095786603, 0.13908372064547925, 0.18279263716446026, 0.13935044108951422, 0.19849958909300613, 0.16898368286323184, 0.13851054823167086, 0.12394448467617025, 0.1868404108533247, 0.14730836714539441, 0.13499808001266778, 0.19366275513478004, 0.177585991637503, 0.18070715686163474, 0.17884430130739126, 0.19003613156055732, 0.19150262999069512, 0.194474556777264, 0.18048329903374738, 0.1828457706991501, 0.05316057698738519, 0.052786991140050255, 0.05398402315425299, 0.044662087965277486, 0.06148301840714443, 0.05466601648116487, 0.05330426243882247, 0.05716170779127827, 0.050301980441416316]}, "mutation_prompt": null}
