{"id": "6e476699-c3d2-4f20-81d7-2395b6f128cc", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + 2 * int(np.sqrt(self.dim))\n        self.c1 = 1.49445  # cognitive coefficient\n        self.c2 = 1.49445  # social coefficient\n        self.inertia_max = 0.9\n        self.inertia_min = 0.4\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound,\n                                           (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evals = 0\n\n    def __call__(self, func):\n        while self.evals < self.budget:\n            for i in range(self.population_size):\n                if self.evals >= self.budget:\n                    break\n\n                current_score = func(self.positions[i])\n                self.evals += 1\n\n                if current_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = current_score\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if current_score < self.global_best_score:\n                    self.global_best_score = current_score\n                    self.global_best_position = self.positions[i]\n\n            inertia_weight = self.inertia_max - (self.inertia_max - self.inertia_min) * (self.evals / self.budget)\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_component = self.c1 * r1 * (self.personal_best_positions[i] - self.positions[i])\n                social_component = self.c2 * r2 * (self.global_best_position - self.positions[i])\n                self.velocities[i] = (inertia_weight * self.velocities[i] + cognitive_component + social_component)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "An adaptive particle swarm optimization algorithm enhanced with a dynamic inertia weight and diversity-promoting mechanisms for efficient exploration and exploitation within the search space.", "configspace": "", "generation": 0, "fitness": 0.23443838081388566, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7336657956999263, 0.6814536236597013, 0.7511079469072547, 0.19004137970684465, 0.19013481532153265, 0.18855031238634667, 0.18163210620876313, 0.7418779039973877, 0.733932538832787, 0.5191071419684021, 0.42267725269664436, 9.999999999998899e-05, 0.5742552461341428, 0.4944330004476999, 0.5216273389849296, 9.999999999998899e-05, 0.5323443430283605, 0.5629896023962344, 0.16454250001379844, 0.09847679599815073, 0.14742849035534145, 0.5577229869886415, 0.5482861637384795, 0.15415860340418353, 0.05253400103706696, 0.06239385750402815, 0.144502370496693, 0.1330262576858564, 0.13342301250738964, 0.12101651672447733, 0.09533925051454994, 0.10156613933380954, 0.11290199128052592, 0.09824465031843843, 0.11340167386256528, 0.11846387010721815, 0.9956973470597917, 0.989750243205702, 0.9962357678933244, 0.9936114926500167, 0.9948454855461957, 0.9801004338605781, 0.9926228153771375, 0.9948751311960805, 0.07486803675677833, 0.5760969364853767, 0.058951521051517575, 0.05786075793389078, 0.14722520892989455, 0.14285197438572328, 0.6488630642410932, 0.5432719928757168, 0.05165064800145991, 9.999999999998899e-05, 0.21588036364138774, 0.13514713532631162, 0.2074856791236892, 0.1827588586502128, 0.7306887276201768, 0.2029776436641193, 0.18843325385227594, 0.6358461252149101, 0.11426588463080711, 0.09913336958234398, 0.17062167718178212, 0.17010781311860423, 0.16956771020213424, 0.12228153614673376, 0.1739812142521019, 0.16527571573363842, 0.1741927996520748, 0.18328338573112013, 0.10865055952787062, 0.01597873603393296, 0.17017206190085776, 0.15880738564953067, 0.10667534720720395, 0.18798395466590345, 0.17867599308270787, 0.11644450880200363, 0.11827332052176043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07993472612915953, 9.999999999998899e-05, 0.006915770211754935, 9.999999999998899e-05, 9.999999999998899e-05, 0.043250460643380007, 0.02221228470819081, 0.037785723690032524, 0.08574307097139666, 9.999999999998899e-05, 9.999999999998899e-05, 0.04623669985956136, 0.03732096287207953, 0.0175467886672086, 0.06352498914515037, 9.999999999998899e-05, 0.09288237785164799, 0.061116937954465156, 0.059410774356163154, 0.06071443543635191, 0.077190328922359, 9.999999999998899e-05, 0.05367172604781789, 0.034963727956478396, 0.008533327471758834, 9.999999999998899e-05, 9.999999999998899e-05, 0.005689412445942454, 0.031540834946616636, 0.06371419982083093, 9.999999999998899e-05, 0.04879898479084588, 0.45625586783636085, 0.5109599919321631, 0.46787755471629544, 0.48807153283702664, 0.5563058256662305, 0.20879447301325915, 0.47586890333139265, 0.47489107457539104, 0.46756986550745616, 0.14200752717132348, 0.07193236451547924, 0.04299021467557251, 0.10210385977612857, 0.13114558267613907, 0.12275889881981328, 0.09546680482671144, 0.14212879441563286, 0.11428360642105129, 0.147969069026766, 0.2127334435110445, 0.197973164340135, 0.25921108098148027, 0.1523197941966037, 0.15849891971196106, 0.26875407807382967, 0.18166282784451038, 0.21686334119333195, 0.2886946389973841, 0.26803892522965467, 0.293654120356469, 0.33075009694187907, 0.317239467204531, 0.2509840933518003, 0.2643755602895689, 0.19346082956634603, 0.31021043746174637, 0.2128017879443298, 0.16180199198797507, 0.18339643844549613, 0.17735485545348673, 0.1820140539540539, 0.2486365529294352, 0.1562063942491022, 0.2901934420522695, 0.09036564113461243, 0.2135195824870203, 0.1568171166455712, 0.2125430047130933, 0.22890115708700998, 0.2075893683954565, 0.19954564299965905, 0.236136565406188, 0.2116113843867896, 0.24054046315909172, 0.1921103123061586, 0.5812921275141262, 0.2257493341358392, 0.41067099116351813, 0.19060485765114032, 0.22933384320124872, 0.19916423351521673, 0.19166842830808983, 0.22195874319076525, 0.7136967670764995, 0.16416164352419182, 0.15422505478319704, 0.7862985017911202, 0.19623878000996953, 0.19928848575774194, 0.7351796852251192, 0.12405238812456465, 0.14722473839480477, 0.17176601160634675, 0.1666073685059235, 0.12664856574335315, 0.11232761386005752, 0.35987453527089, 0.48466462161535584, 0.20453499246306894, 0.1085782049367795, 0.19784338589665385, 0.251628853958602, 0.21023390799527264, 0.1837460448769267, 0.1906411930452947, 0.1990324671719058, 0.18416643902831553, 0.18901423858650734, 0.2014384027095315, 0.1948454653656756, 0.09244797884207823, 0.08036671791969563, 0.08614243277456224, 0.15005185783559594, 0.06648456049126128, 0.056339294054600586, 0.08914247805972808, 0.07454082601647127, 0.08725316375859349]}, "mutation_prompt": null}
{"id": "7670f78b-d4d4-4e2b-a9d2-ae112f5f5e66", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + 2 * int(np.sqrt(self.dim))\n        self.c1 = 1.49445  # cognitive coefficient\n        self.c2 = 1.49445  # social coefficient\n        self.inertia_max = 0.9\n        self.inertia_min = 0.4\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound,\n                                           (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evals = 0\n\n    def __call__(self, func):\n        while self.evals < self.budget:\n            for i in range(self.population_size):\n                if self.evals >= self.budget:\n                    break\n\n                current_score = func(self.positions[i])\n                self.evals += 1\n\n                if current_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = current_score\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if current_score < self.global_best_score:\n                    self.global_best_score = current_score\n                    self.global_best_position = self.positions[i]\n\n            inertia_weight = self.inertia_max - (self.inertia_max - self.inertia_min) * (self.evals / self.budget)\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_component = self.c1 * r1 * (self.personal_best_positions[i] - self.positions[i])\n                social_component = self.c2 * r2 * (self.global_best_position - self.positions[i])\n                self.velocities[i] = (inertia_weight * self.velocities[i] + cognitive_component + social_component)\n\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "An adaptive particle swarm optimization algorithm enhanced with a dynamic inertia weight and diversity-promoting mechanisms for efficient exploration and exploitation within the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6e476699-c3d2-4f20-81d7-2395b6f128cc", "metadata": {"aucs": [0.7336657956999263, 0.6814536236597013, 0.7511079469072547, 0.19004137970684465, 0.19013481532153265, 0.18855031238634667, 0.18163210620876313, 0.7418779039973877, 0.733932538832787, 0.5191071419684021, 0.42267725269664436, 9.999999999998899e-05, 0.5742552461341428, 0.4944330004476999, 0.5216273389849296, 9.999999999998899e-05, 0.5323443430283605, 0.5629896023962344, 0.16454250001379844, 0.09847679599815073, 0.14742849035534145, 0.5577229869886415, 0.5482861637384795, 0.15415860340418353, 0.05253400103706696, 0.06239385750402815, 0.144502370496693, 0.1330262576858564, 0.13342301250738964, 0.12101651672447733, 0.09533925051454994, 0.10156613933380954, 0.11290199128052592, 0.09824465031843843, 0.11340167386256528, 0.11846387010721815, 0.9956973470597917, 0.989750243205702, 0.9962357678933244, 0.9936114926500167, 0.9948454855461957, 0.9801004338605781, 0.9926228153771375, 0.9948751311960805, 0.07486803675677833, 0.5760969364853767, 0.058951521051517575, 0.05786075793389078, 0.14722520892989455, 0.14285197438572328, 0.6488630642410932, 0.5432719928757168, 0.05165064800145991, 9.999999999998899e-05, 0.21588036364138774, 0.13514713532631162, 0.2074856791236892, 0.1827588586502128, 0.7306887276201768, 0.2029776436641193, 0.18843325385227594, 0.6358461252149101, 0.11426588463080711, 0.09913336958234398, 0.17062167718178212, 0.17010781311860423, 0.16956771020213424, 0.12228153614673376, 0.1739812142521019, 0.16527571573363842, 0.1741927996520748, 0.18328338573112013, 0.10865055952787062, 0.01597873603393296, 0.17017206190085776, 0.15880738564953067, 0.10667534720720395, 0.18798395466590345, 0.17867599308270787, 0.11644450880200363, 0.11827332052176043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07993472612915953, 9.999999999998899e-05, 0.006915770211754935, 9.999999999998899e-05, 9.999999999998899e-05, 0.043250460643380007, 0.02221228470819081, 0.037785723690032524, 0.08574307097139666, 9.999999999998899e-05, 9.999999999998899e-05, 0.04623669985956136, 0.03732096287207953, 0.0175467886672086, 0.06352498914515037, 9.999999999998899e-05, 0.09288237785164799, 0.061116937954465156, 0.059410774356163154, 0.06071443543635191, 0.077190328922359, 9.999999999998899e-05, 0.05367172604781789, 0.034963727956478396, 0.008533327471758834, 9.999999999998899e-05, 9.999999999998899e-05, 0.005689412445942454, 0.031540834946616636, 0.06371419982083093, 9.999999999998899e-05, 0.04879898479084588, 0.45625586783636085, 0.5109599919321631, 0.46787755471629544, 0.48807153283702664, 0.5563058256662305, 0.20879447301325915, 0.47586890333139265, 0.47489107457539104, 0.46756986550745616, 0.14200752717132348, 0.07193236451547924, 0.04299021467557251, 0.10210385977612857, 0.13114558267613907, 0.12275889881981328, 0.09546680482671144, 0.14212879441563286, 0.11428360642105129, 0.147969069026766, 0.2127334435110445, 0.197973164340135, 0.25921108098148027, 0.1523197941966037, 0.15849891971196106, 0.26875407807382967, 0.18166282784451038, 0.21686334119333195, 0.2886946389973841, 0.26803892522965467, 0.293654120356469, 0.33075009694187907, 0.317239467204531, 0.2509840933518003, 0.2643755602895689, 0.19346082956634603, 0.31021043746174637, 0.2128017879443298, 0.16180199198797507, 0.18339643844549613, 0.17735485545348673, 0.1820140539540539, 0.2486365529294352, 0.1562063942491022, 0.2901934420522695, 0.09036564113461243, 0.2135195824870203, 0.1568171166455712, 0.2125430047130933, 0.22890115708700998, 0.2075893683954565, 0.19954564299965905, 0.236136565406188, 0.2116113843867896, 0.24054046315909172, 0.1921103123061586, 0.5812921275141262, 0.2257493341358392, 0.41067099116351813, 0.19060485765114032, 0.22933384320124872, 0.19916423351521673, 0.19166842830808983, 0.22195874319076525, 0.7136967670764995, 0.16416164352419182, 0.15422505478319704, 0.7862985017911202, 0.19623878000996953, 0.19928848575774194, 0.7351796852251192, 0.12405238812456465, 0.14722473839480477, 0.17176601160634675, 0.1666073685059235, 0.12664856574335315, 0.11232761386005752, 0.35987453527089, 0.48466462161535584, 0.20453499246306894, 0.1085782049367795, 0.19784338589665385, 0.251628853958602, 0.21023390799527264, 0.1837460448769267, 0.1906411930452947, 0.1990324671719058, 0.18416643902831553, 0.18901423858650734, 0.2014384027095315, 0.1948454653656756, 0.09244797884207823, 0.08036671791969563, 0.08614243277456224, 0.15005185783559594, 0.06648456049126128, 0.056339294054600586, 0.08914247805972808, 0.07454082601647127, 0.08725316375859349]}, "mutation_prompt": null}
