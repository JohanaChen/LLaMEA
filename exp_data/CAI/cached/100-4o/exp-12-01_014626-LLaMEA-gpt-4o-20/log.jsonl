{"id": "e3e00bb0-ae3a-4203-9a7f-4274b8008450", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(max(4, dim * 10), budget // 10)\n        self.F = 0.8  # Scaling factor for mutation\n        self.CR = 0.9 # Crossover probability\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Step 1: Differential Evolution - Mutation and Crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                np.random.shuffle(indices)\n                a, b, c = population[indices[:3]]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                # Step 2: Evaluate trial vector\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Step 3: Selection\n                if trial_fitness < fitness[i]: \n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Step 4: Local Search\n                if evaluations < self.budget:\n                    local_point = population[i] + np.random.normal(0, 0.1, self.dim)\n                    local_point = np.clip(local_point, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_point)\n                    evaluations += 1\n                    if local_fitness < fitness[i]:\n                        population[i] = local_point\n                        fitness[i] = local_fitness\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDE", "description": "A hybrid algorithm combining Differential Evolution and Local Search for effective exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 0, "fitness": 0.2240936429610393, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.47174922731829916, 0.47174922731829916, 0.47174922731829916, 0.4636159364614959, 0.4636159364614959, 0.4636159364614959, 0.5043225647076746, 0.5043225647076746, 0.5043225647076746, 0.1681775941852618, 0.1681775941852618, 0.1681775941852618, 0.18157800557212977, 0.18157800557212977, 0.18157800557212977, 0.1953106604120619, 0.1953106604120619, 0.1953106604120619, 0.10604582255801165, 0.10604582255801165, 0.10604582255801165, 0.11037662689688132, 0.11037662689688132, 0.11037662689688132, 0.10359618232473145, 0.10359618232473145, 0.10359618232473145, 0.08248069636548339, 0.08248069636548339, 0.08248069636548339, 0.102314374940766, 0.102314374940766, 0.102314374940766, 0.1058920628799358, 0.1058920628799358, 0.1058920628799358, 0.8702054115186012, 0.8702054115186012, 0.8702054115186012, 0.8404678623785318, 0.8404678623785318, 0.8404678623785318, 0.9405358634058048, 0.9405358634058048, 0.9405358634058048, 0.21184973052389833, 0.21184973052389833, 0.21184973052389833, 0.20966439351651722, 0.20966439351651722, 0.20966439351651722, 0.21987804773162145, 0.21987804773162145, 0.21987804773162145, 0.4617932198206117, 0.4617932198206117, 0.4617932198206117, 0.3304743090547799, 0.3304743090547799, 0.3304743090547799, 0.2961278218985116, 0.2961278218985116, 0.2961278218985116, 0.16562980256856186, 0.16562980256856186, 0.16562980256856186, 0.16719526917608074, 0.16719526917608074, 0.16719526917608074, 0.16330195096263056, 0.16330195096263056, 0.16330195096263056, 0.20557514885374428, 0.20557514885374428, 0.20557514885374428, 0.14067297417846913, 0.14067297417846913, 0.14067297417846913, 0.14184453422614152, 0.14184453422614152, 0.14184453422614152, 0.07332545166967996, 0.07332545166967996, 0.07332545166967996, 0.07379720675903567, 0.07379720675903567, 0.07379720675903567, 0.05184942315809671, 0.05184942315809671, 0.05184942315809671, 0.1906504682749406, 0.1906504682749406, 0.1906504682749406, 0.16745341270036407, 0.16745341270036407, 0.16745341270036407, 0.1946367226079989, 0.1946367226079989, 0.1946367226079989, 0.00047430887929766907, 0.00047430887929766907, 0.00047430887929766907, 0.0039812222958819365, 0.0039812222958819365, 0.0039812222958819365, 0.017214765278899757, 0.017214765278899757, 0.017214765278899757, 0.11351307202352123, 0.11351307202352123, 0.11351307202352123, 0.11300146453913129, 0.11300146453913129, 0.11300146453913129, 0.1191906431169436, 0.1191906431169436, 0.1191906431169436, 0.38298873679226175, 0.38298873679226175, 0.38298873679226175, 0.4064516149074263, 0.4064516149074263, 0.4064516149074263, 0.41076695529993557, 0.41076695529993557, 0.41076695529993557, 0.10599321101518311, 0.10599321101518311, 0.10599321101518311, 0.09715612224526482, 0.09715612224526482, 0.09715612224526482, 0.09357667984030282, 0.09357667984030282, 0.09357667984030282, 0.18469469620317558, 0.18469469620317558, 0.18469469620317558, 0.1912362247768956, 0.1912362247768956, 0.1912362247768956, 0.20182816320997587, 0.20182816320997587, 0.20182816320997587, 0.21859881235971712, 0.21859881235971712, 0.21859881235971712, 0.21060613845668885, 0.21060613845668885, 0.21060613845668885, 0.2465436330754126, 0.2465436330754126, 0.2465436330754126, 0.16130783327908216, 0.16130783327908216, 0.16130783327908216, 0.16371107041491673, 0.16371107041491673, 0.16371107041491673, 0.1539587840163944, 0.1539587840163944, 0.1539587840163944, 0.19182357254913163, 0.19182357254913163, 0.19182357254913163, 0.17836393773651327, 0.17836393773651327, 0.17836393773651327, 0.17387896959067495, 0.17387896959067495, 0.17387896959067495, 0.18698649898032005, 0.18698649898032005, 0.18698649898032005, 0.18909459854800015, 0.18909459854800015, 0.18909459854800015, 0.17701198314088817, 0.17701198314088817, 0.17701198314088817, 0.3452553330507506, 0.3452553330507506, 0.3452553330507506, 0.39611761625303754, 0.39611761625303754, 0.39611761625303754, 0.3148131091946884, 0.3148131091946884, 0.3148131091946884, 0.3855940272168795, 0.3855940272168795, 0.3855940272168795, 0.30078836082315163, 0.30078836082315163, 0.30078836082315163, 0.20727329218634172, 0.20727329218634172, 0.20727329218634172, 0.18010715938093724, 0.18010715938093724, 0.18010715938093724, 0.2157306916207684, 0.2157306916207684, 0.2157306916207684, 0.17096947000750407, 0.17096947000750407, 0.17096947000750407, 0.07140378109780088, 0.07140378109780088, 0.07140378109780088, 0.06837222578696367, 0.06837222578696367, 0.06837222578696367, 0.07197473439681668, 0.07197473439681668, 0.07197473439681668]}, "mutation_prompt": null}
{"id": "0613c890-9695-48e0-abcd-1a0104e43013", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(max(4, dim * 10), budget // 10)\n        self.F = 0.8  # Scaling factor for mutation\n        self.CR = 0.9 # Crossover probability\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Step 1: Differential Evolution - Mutation and Crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                np.random.shuffle(indices)\n                a, b, c = population[indices[:3]]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                # Step 2: Evaluate trial vector\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Step 3: Selection\n                if trial_fitness < fitness[i]: \n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Step 4: Local Search\n                if evaluations < self.budget:\n                    local_point = population[i] + np.random.normal(0, 0.1, self.dim)\n                    local_point = np.clip(local_point, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_point)\n                    evaluations += 1\n                    if local_fitness < fitness[i]:\n                        population[i] = local_point\n                        fitness[i] = local_fitness\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDE", "description": "A hybrid algorithm combining Differential Evolution and Local Search for effective exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e3e00bb0-ae3a-4203-9a7f-4274b8008450", "metadata": {"aucs": [0.47174922731829916, 0.47174922731829916, 0.47174922731829916, 0.4636159364614959, 0.4636159364614959, 0.4636159364614959, 0.5043225647076746, 0.5043225647076746, 0.5043225647076746, 0.1681775941852618, 0.1681775941852618, 0.1681775941852618, 0.18157800557212977, 0.18157800557212977, 0.18157800557212977, 0.1953106604120619, 0.1953106604120619, 0.1953106604120619, 0.10604582255801165, 0.10604582255801165, 0.10604582255801165, 0.11037662689688132, 0.11037662689688132, 0.11037662689688132, 0.10359618232473145, 0.10359618232473145, 0.10359618232473145, 0.08248069636548339, 0.08248069636548339, 0.08248069636548339, 0.102314374940766, 0.102314374940766, 0.102314374940766, 0.1058920628799358, 0.1058920628799358, 0.1058920628799358, 0.8702054115186012, 0.8702054115186012, 0.8702054115186012, 0.8404678623785318, 0.8404678623785318, 0.8404678623785318, 0.9405358634058048, 0.9405358634058048, 0.9405358634058048, 0.21184973052389833, 0.21184973052389833, 0.21184973052389833, 0.20966439351651722, 0.20966439351651722, 0.20966439351651722, 0.21987804773162145, 0.21987804773162145, 0.21987804773162145, 0.4617932198206117, 0.4617932198206117, 0.4617932198206117, 0.3304743090547799, 0.3304743090547799, 0.3304743090547799, 0.2961278218985116, 0.2961278218985116, 0.2961278218985116, 0.16562980256856186, 0.16562980256856186, 0.16562980256856186, 0.16719526917608074, 0.16719526917608074, 0.16719526917608074, 0.16330195096263056, 0.16330195096263056, 0.16330195096263056, 0.20557514885374428, 0.20557514885374428, 0.20557514885374428, 0.14067297417846913, 0.14067297417846913, 0.14067297417846913, 0.14184453422614152, 0.14184453422614152, 0.14184453422614152, 0.07332545166967996, 0.07332545166967996, 0.07332545166967996, 0.07379720675903567, 0.07379720675903567, 0.07379720675903567, 0.05184942315809671, 0.05184942315809671, 0.05184942315809671, 0.1906504682749406, 0.1906504682749406, 0.1906504682749406, 0.16745341270036407, 0.16745341270036407, 0.16745341270036407, 0.1946367226079989, 0.1946367226079989, 0.1946367226079989, 0.00047430887929766907, 0.00047430887929766907, 0.00047430887929766907, 0.0039812222958819365, 0.0039812222958819365, 0.0039812222958819365, 0.017214765278899757, 0.017214765278899757, 0.017214765278899757, 0.11351307202352123, 0.11351307202352123, 0.11351307202352123, 0.11300146453913129, 0.11300146453913129, 0.11300146453913129, 0.1191906431169436, 0.1191906431169436, 0.1191906431169436, 0.38298873679226175, 0.38298873679226175, 0.38298873679226175, 0.4064516149074263, 0.4064516149074263, 0.4064516149074263, 0.41076695529993557, 0.41076695529993557, 0.41076695529993557, 0.10599321101518311, 0.10599321101518311, 0.10599321101518311, 0.09715612224526482, 0.09715612224526482, 0.09715612224526482, 0.09357667984030282, 0.09357667984030282, 0.09357667984030282, 0.18469469620317558, 0.18469469620317558, 0.18469469620317558, 0.1912362247768956, 0.1912362247768956, 0.1912362247768956, 0.20182816320997587, 0.20182816320997587, 0.20182816320997587, 0.21859881235971712, 0.21859881235971712, 0.21859881235971712, 0.21060613845668885, 0.21060613845668885, 0.21060613845668885, 0.2465436330754126, 0.2465436330754126, 0.2465436330754126, 0.16130783327908216, 0.16130783327908216, 0.16130783327908216, 0.16371107041491673, 0.16371107041491673, 0.16371107041491673, 0.1539587840163944, 0.1539587840163944, 0.1539587840163944, 0.19182357254913163, 0.19182357254913163, 0.19182357254913163, 0.17836393773651327, 0.17836393773651327, 0.17836393773651327, 0.17387896959067495, 0.17387896959067495, 0.17387896959067495, 0.18698649898032005, 0.18698649898032005, 0.18698649898032005, 0.18909459854800015, 0.18909459854800015, 0.18909459854800015, 0.17701198314088817, 0.17701198314088817, 0.17701198314088817, 0.3452553330507506, 0.3452553330507506, 0.3452553330507506, 0.39611761625303754, 0.39611761625303754, 0.39611761625303754, 0.3148131091946884, 0.3148131091946884, 0.3148131091946884, 0.3855940272168795, 0.3855940272168795, 0.3855940272168795, 0.30078836082315163, 0.30078836082315163, 0.30078836082315163, 0.20727329218634172, 0.20727329218634172, 0.20727329218634172, 0.18010715938093724, 0.18010715938093724, 0.18010715938093724, 0.2157306916207684, 0.2157306916207684, 0.2157306916207684, 0.17096947000750407, 0.17096947000750407, 0.17096947000750407, 0.07140378109780088, 0.07140378109780088, 0.07140378109780088, 0.06837222578696367, 0.06837222578696367, 0.06837222578696367, 0.07197473439681668, 0.07197473439681668, 0.07197473439681668]}, "mutation_prompt": null}
