{"id": "b222771b-3551-460d-a394-d196d069fb5e", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # standard population size for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.population = None\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def initialize_population(self):\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.pop_size, self.dim)\n        )\n\n    def evaluate_population(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        return fitness\n\n    def select_parents(self, index):\n        indices = list(range(self.pop_size))\n        indices.remove(index)\n        np.random.shuffle(indices)\n        return indices[:3]\n\n    def mutate(self, target_idx):\n        a, b, c = self.select_parents(target_idx)\n        mutant_vector = (\n            self.population[a] + self.mutation_factor * (self.population[b] - self.population[c])\n        )\n        mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n        return mutant_vector\n\n    def crossover(self, target_idx, mutant_vector):\n        trial_vector = np.copy(self.population[target_idx])\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        if not np.any(crossover_points):\n            crossover_points[np.random.randint(0, self.dim)] = True\n        trial_vector[crossover_points] = mutant_vector[crossover_points]\n        return trial_vector\n\n    def adapt_parameters(self, fitness_history):\n        if len(fitness_history) > 0:\n            success_rate = len([f for f in fitness_history if f < 0]) / len(fitness_history)\n            self.mutation_factor = 0.5 + 0.5 * success_rate\n            self.crossover_rate = 0.6 + 0.3 * success_rate\n\n    def __call__(self, func):\n        self.initialize_population()\n        num_evaluations = 0\n        fitness_history = []\n        \n        while num_evaluations < self.budget:\n            fitness = self.evaluate_population(func)\n            for i in range(self.pop_size):\n                if num_evaluations >= self.budget:\n                    break\n\n                mutant_vector = self.mutate(i)\n                trial_vector = self.crossover(i, mutant_vector)\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    self.population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    fitness_history.append(trial_fitness - fitness[i])\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n            self.adapt_parameters(fitness_history)\n            fitness_history.clear()\n\n        return self.best_solution, self.best_fitness", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm that dynamically adjusts mutation and crossover rates based on historical success to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.20262014744499404, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.5957111125303685, 0.6029962144491119, 0.6001396308774162, 0.5946993878195451, 0.5962024688571406, 0.6387994474112217, 0.5961791902404998, 0.5674023296463807, 0.5734600232725735, 0.3042076078758267, 0.2747373801916675, 0.3009305009659121, 0.3261079964009438, 0.30802788840175677, 0.2937131802933649, 0.3085373867839305, 0.2721828638530912, 0.29729571790834974, 0.10612221736226635, 0.10832369404959497, 0.11861663881505013, 0.12656287871514882, 0.12725425747794483, 0.13153974234574417, 0.11549094727226605, 0.11110727436579837, 0.11828659128906871, 0.1004473533551471, 0.10208564038249912, 0.10244644869472486, 0.10027143026297558, 0.11693839251983429, 0.10448047493859614, 0.10513859253954505, 0.09949941907689885, 0.10428552189571005, 0.9135251052697633, 0.9227419758000718, 0.8872350991170047, 0.8853807973478427, 0.8492122353929494, 0.9292062364727183, 0.8688423692332267, 0.8576651942035226, 0.9069659783675722, 0.19305005479691595, 0.18453503819543293, 0.1857620097869399, 0.22421750958019548, 0.17245541487068872, 0.1793537804063391, 0.22161210485522764, 0.1912902301346764, 0.20729928249732565, 0.2187001600557391, 0.2035236285343609, 0.22710162168505466, 0.2909862918699069, 0.22983768382250291, 0.2443143555721322, 0.22298788252055224, 0.22279912956404357, 0.2407059228087688, 0.11210069376023457, 0.1468778238161631, 0.1141791728900362, 0.13446039438035873, 0.13171815249772678, 0.1224276521050841, 0.11894984399366726, 0.11622092842172715, 0.1339357941530498, 0.09730692287279508, 0.1099973805325064, 0.10502167552521391, 0.12297879630778519, 0.12807154059389247, 0.143564400304933, 0.11302574468860171, 0.1190564440711892, 0.11531871111533232, 9.999999999998899e-05, 0.00014899430202441888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002195616694654623, 9.999999999998899e-05, 9.999999999998899e-05, 0.07323445457439415, 0.06282305813552502, 0.05647619199948373, 0.04650248348096886, 0.052068206714090626, 0.04615645392610346, 0.09814652264083612, 0.0803319274046429, 0.07661102730987368, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004563687020394669, 9.999999999998899e-05, 9.999999999998899e-05, 0.010173937592393711, 0.06540076887156632, 0.056519781221137766, 0.05945681029783845, 0.08008771727876651, 0.07991395232039322, 0.08061798943607879, 0.08526976402436992, 0.08071788004141012, 0.07251157072614223, 0.3928881301371916, 0.40405043914106487, 0.41086845881477707, 0.40198721838756535, 0.40759044677636325, 0.40395305242323887, 0.40879290805157675, 0.38332608023588954, 0.41140900577215755, 0.08224577404563027, 0.09083273974409789, 0.08536357568792863, 0.08320130806704806, 0.08472274424311432, 0.08700085211786823, 0.07737957959395281, 0.0849229546841459, 0.0780405648394038, 0.14514811275195172, 0.11852167932957114, 0.13130489626064623, 0.1302624249332981, 0.14846242348015626, 0.14951069127845296, 0.11830749666451335, 0.12368732182815712, 0.12414352039090026, 0.23320941013955865, 0.23642283640013195, 0.2566063628230788, 0.2402014852758766, 0.2626725929512037, 0.23909430812612886, 0.26774688286241677, 0.27676717314414057, 0.27599985163303, 0.18457578258181406, 0.16533120287004444, 0.180228601283292, 0.1718165594462624, 0.1616047851042849, 0.14733033427656994, 0.1762806753760111, 0.18851875469921286, 0.18950600901268266, 0.19283372859025505, 0.1719930078942803, 0.1737108273791509, 0.18319712707648828, 0.17096367224036058, 0.19540361800225325, 0.18411819909275662, 0.17571771853821916, 0.19545187455173807, 0.1790098886691487, 0.1843334283608239, 0.1760834173115733, 0.18115736415042993, 0.1825961665022362, 0.18788885663165822, 0.18276149504628936, 0.18543299825420845, 0.17864217973763208, 0.2482795780728938, 0.1632638446222121, 0.15975226266971698, 0.18180399865975527, 0.19529043968888438, 0.22745847893695248, 0.22537121548349448, 0.15310505273145392, 0.17722595619109383, 0.22735994677014804, 0.16984835739709303, 0.2549232019718136, 0.1660407345540934, 0.1724330683640174, 0.1573236785190245, 0.17761702807147828, 0.2231823032882262, 0.1907529582632438, 0.18789035882736138, 0.17941157070470815, 0.17493450859907533, 0.17108477456777815, 0.16917543322865336, 0.1766035254418843, 0.17680493536885789, 0.1898590223707871, 0.17970290714943016, 0.07301920153509112, 0.06530692532908655, 0.07244434162045821, 0.06938772483324596, 0.06583172437715401, 0.06146106234631554, 0.07262114957828303, 0.0612289694320709, 0.06302560223774112]}, "mutation_prompt": null}
{"id": "77d7df31-1c41-4935-9f6a-62b8d439a045", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # standard population size for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.population = None\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def initialize_population(self):\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.pop_size, self.dim)\n        )\n\n    def evaluate_population(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        return fitness\n\n    def select_parents(self, index):\n        indices = list(range(self.pop_size))\n        indices.remove(index)\n        np.random.shuffle(indices)\n        return indices[:3]\n\n    def mutate(self, target_idx):\n        a, b, c = self.select_parents(target_idx)\n        mutant_vector = (\n            self.population[a] + self.mutation_factor * (self.population[b] - self.population[c])\n        )\n        mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n        return mutant_vector\n\n    def crossover(self, target_idx, mutant_vector):\n        trial_vector = np.copy(self.population[target_idx])\n        crossover_points = np.random.rand(self.dim) < self.crossover_rate\n        if not np.any(crossover_points):\n            crossover_points[np.random.randint(0, self.dim)] = True\n        trial_vector[crossover_points] = mutant_vector[crossover_points]\n        return trial_vector\n\n    def adapt_parameters(self, fitness_history):\n        if len(fitness_history) > 0:\n            success_rate = len([f for f in fitness_history if f < 0]) / len(fitness_history)\n            self.mutation_factor = 0.5 + 0.5 * success_rate\n            self.crossover_rate = 0.6 + 0.3 * success_rate\n\n    def __call__(self, func):\n        self.initialize_population()\n        num_evaluations = 0\n        fitness_history = []\n        \n        while num_evaluations < self.budget:\n            fitness = self.evaluate_population(func)\n            for i in range(self.pop_size):\n                if num_evaluations >= self.budget:\n                    break\n\n                mutant_vector = self.mutate(i)\n                trial_vector = self.crossover(i, mutant_vector)\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    self.population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    fitness_history.append(trial_fitness - fitness[i])\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial_vector\n\n            self.adapt_parameters(fitness_history)\n            fitness_history.clear()\n\n        return self.best_solution, self.best_fitness", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm that dynamically adjusts mutation and crossover rates based on historical success to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b222771b-3551-460d-a394-d196d069fb5e", "metadata": {"aucs": [0.5957111125303685, 0.6029962144491119, 0.6001396308774162, 0.5946993878195451, 0.5962024688571406, 0.6387994474112217, 0.5961791902404998, 0.5674023296463807, 0.5734600232725735, 0.3042076078758267, 0.2747373801916675, 0.3009305009659121, 0.3261079964009438, 0.30802788840175677, 0.2937131802933649, 0.3085373867839305, 0.2721828638530912, 0.29729571790834974, 0.10612221736226635, 0.10832369404959497, 0.11861663881505013, 0.12656287871514882, 0.12725425747794483, 0.13153974234574417, 0.11549094727226605, 0.11110727436579837, 0.11828659128906871, 0.1004473533551471, 0.10208564038249912, 0.10244644869472486, 0.10027143026297558, 0.11693839251983429, 0.10448047493859614, 0.10513859253954505, 0.09949941907689885, 0.10428552189571005, 0.9135251052697633, 0.9227419758000718, 0.8872350991170047, 0.8853807973478427, 0.8492122353929494, 0.9292062364727183, 0.8688423692332267, 0.8576651942035226, 0.9069659783675722, 0.19305005479691595, 0.18453503819543293, 0.1857620097869399, 0.22421750958019548, 0.17245541487068872, 0.1793537804063391, 0.22161210485522764, 0.1912902301346764, 0.20729928249732565, 0.2187001600557391, 0.2035236285343609, 0.22710162168505466, 0.2909862918699069, 0.22983768382250291, 0.2443143555721322, 0.22298788252055224, 0.22279912956404357, 0.2407059228087688, 0.11210069376023457, 0.1468778238161631, 0.1141791728900362, 0.13446039438035873, 0.13171815249772678, 0.1224276521050841, 0.11894984399366726, 0.11622092842172715, 0.1339357941530498, 0.09730692287279508, 0.1099973805325064, 0.10502167552521391, 0.12297879630778519, 0.12807154059389247, 0.143564400304933, 0.11302574468860171, 0.1190564440711892, 0.11531871111533232, 9.999999999998899e-05, 0.00014899430202441888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002195616694654623, 9.999999999998899e-05, 9.999999999998899e-05, 0.07323445457439415, 0.06282305813552502, 0.05647619199948373, 0.04650248348096886, 0.052068206714090626, 0.04615645392610346, 0.09814652264083612, 0.0803319274046429, 0.07661102730987368, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004563687020394669, 9.999999999998899e-05, 9.999999999998899e-05, 0.010173937592393711, 0.06540076887156632, 0.056519781221137766, 0.05945681029783845, 0.08008771727876651, 0.07991395232039322, 0.08061798943607879, 0.08526976402436992, 0.08071788004141012, 0.07251157072614223, 0.3928881301371916, 0.40405043914106487, 0.41086845881477707, 0.40198721838756535, 0.40759044677636325, 0.40395305242323887, 0.40879290805157675, 0.38332608023588954, 0.41140900577215755, 0.08224577404563027, 0.09083273974409789, 0.08536357568792863, 0.08320130806704806, 0.08472274424311432, 0.08700085211786823, 0.07737957959395281, 0.0849229546841459, 0.0780405648394038, 0.14514811275195172, 0.11852167932957114, 0.13130489626064623, 0.1302624249332981, 0.14846242348015626, 0.14951069127845296, 0.11830749666451335, 0.12368732182815712, 0.12414352039090026, 0.23320941013955865, 0.23642283640013195, 0.2566063628230788, 0.2402014852758766, 0.2626725929512037, 0.23909430812612886, 0.26774688286241677, 0.27676717314414057, 0.27599985163303, 0.18457578258181406, 0.16533120287004444, 0.180228601283292, 0.1718165594462624, 0.1616047851042849, 0.14733033427656994, 0.1762806753760111, 0.18851875469921286, 0.18950600901268266, 0.19283372859025505, 0.1719930078942803, 0.1737108273791509, 0.18319712707648828, 0.17096367224036058, 0.19540361800225325, 0.18411819909275662, 0.17571771853821916, 0.19545187455173807, 0.1790098886691487, 0.1843334283608239, 0.1760834173115733, 0.18115736415042993, 0.1825961665022362, 0.18788885663165822, 0.18276149504628936, 0.18543299825420845, 0.17864217973763208, 0.2482795780728938, 0.1632638446222121, 0.15975226266971698, 0.18180399865975527, 0.19529043968888438, 0.22745847893695248, 0.22537121548349448, 0.15310505273145392, 0.17722595619109383, 0.22735994677014804, 0.16984835739709303, 0.2549232019718136, 0.1660407345540934, 0.1724330683640174, 0.1573236785190245, 0.17761702807147828, 0.2231823032882262, 0.1907529582632438, 0.18789035882736138, 0.17941157070470815, 0.17493450859907533, 0.17108477456777815, 0.16917543322865336, 0.1766035254418843, 0.17680493536885789, 0.1898590223707871, 0.17970290714943016, 0.07301920153509112, 0.06530692532908655, 0.07244434162045821, 0.06938772483324596, 0.06583172437715401, 0.06146106234631554, 0.07262114957828303, 0.0612289694320709, 0.06302560223774112]}, "mutation_prompt": null}
