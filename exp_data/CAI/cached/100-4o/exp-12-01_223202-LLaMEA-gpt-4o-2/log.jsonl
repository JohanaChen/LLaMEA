{"id": "629e75a4-b98f-4f3d-a996-684504dc7065", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.mutation_factor = 0.5  # Initial mutation factor\n        self.crossover_rate = 0.7  # Initial crossover rate\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.pop_size  # Initial evaluations\n        \n        while eval_count < self.budget:\n            for i in range(self.pop_size):\n                # Mutation\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True  # Ensure at least one parameter is crossed\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover rate\n            self.mutation_factor = np.clip(self.mutation_factor + np.random.normal(0, 0.1), 0.1, 1.0)\n            self.crossover_rate = np.clip(self.crossover_rate + np.random.normal(0, 0.1), 0.1, 0.9)\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "An adaptive differential evolution algorithm with self-adjusting mutation and crossover rates tailored for efficient exploration and exploitation across diverse optimization landscapes.", "configspace": "", "generation": 0, "fitness": 0.3138130329668488, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7413618277729357, 0.7774551198177866, 0.8550535019811012, 0.7555828494401268, 0.7932830630122638, 0.8310318977035143, 0.7559426508039411, 0.7704539473926042, 0.8303143614207918, 0.5605147624702125, 0.6183462505767698, 0.7376848697737092, 0.5812945433143584, 0.6149944659261488, 0.7234222010915492, 0.5550883027084725, 0.600913228983261, 0.7332908433124867, 0.36572454530163445, 0.5021186164401745, 0.17703105143493525, 0.36910205467724544, 0.5033818741900651, 0.584928968254872, 0.3519999337592207, 0.4720767569454001, 0.17103178815949416, 0.3090643778187907, 0.3932200178707361, 0.4935228037461613, 0.3500275637887297, 0.40209789121741346, 0.165197741087865, 0.32640819135139765, 0.43629737061059004, 0.16360603672949714, 0.9305022838560296, 0.9277723434140479, 0.9438758518184426, 0.9381622348011186, 0.9254337269732346, 0.9434388951825798, 0.9388998644289515, 0.948122175283967, 0.9311205477062854, 0.2569902161214461, 0.22456610038350888, 0.2731911987302438, 0.27459311686384213, 0.273208842731281, 0.3866545173120214, 0.25770842397187554, 0.2375148155050486, 0.21873326262957438, 0.252950616317698, 0.4104453177978138, 0.7218969872405652, 0.3317574520637354, 0.5219303565792083, 0.7723309069410891, 0.3449365602770734, 0.565165870715171, 0.7783561978738025, 0.16546330042562585, 0.19730518325308644, 0.14137449846154837, 0.15717452699701007, 0.16616613192342722, 0.12603745691619606, 0.14888458744483446, 0.1949647689988787, 0.12203610429358414, 0.13538468334517506, 0.1506715971431939, 0.20366111767457262, 0.17624150969647068, 0.14222246120204185, 0.2392578306373878, 0.15721803844132942, 0.14830983226609207, 0.229461797641778, 0.011869222074597396, 0.03860630869619841, 0.09689443901379069, 0.011992755544639633, 0.02250781756020026, 0.05820733338581263, 0.01693667148922451, 0.03069713519184425, 0.002050413685638741, 0.11676117127808971, 0.11080028137257014, 0.12491873189066283, 0.07244809115073425, 0.10100483138437644, 0.0804735494218165, 0.13507648170294362, 0.17573773376459467, 0.3616476564045018, 0.010308580282661572, 0.04918332924457336, 0.11555722691357206, 0.0018266248170930588, 0.0485731041881976, 0.13185023091627335, 0.007518503814979649, 0.07144689541641092, 0.0878491217214259, 0.10251244509152124, 0.1154344731453022, 0.1920387630975554, 0.13598062148835288, 0.1720583396380727, 0.23494962914549844, 0.10937575266048627, 0.15613175936791102, 0.2720422335091117, 0.4486159895062751, 0.5340563074510796, 0.426451020148098, 0.4473782069764505, 0.5105905074507135, 0.4319099474234025, 0.4569620814210531, 0.4856534360303606, 0.6480449760085107, 0.11127591779640711, 0.11196432550572011, 0.10897233421712904, 0.10463044329294446, 0.10877343451965604, 0.12356574616143445, 0.10070577907931144, 0.11187662203575233, 0.1074631836910126, 0.13303488358132176, 0.16051220359525664, 0.1523652727199316, 0.1470067626321263, 0.14891964088402743, 0.18308411990849827, 0.16297999864131452, 0.15950482679956335, 0.1638317093965086, 0.25837639389381073, 0.2802235294210085, 0.41836120338487537, 0.27773344206871375, 0.29419904683793285, 0.3415187311873259, 0.2998891583824047, 0.34367013505873545, 0.4715738288053225, 0.18996526990050244, 0.2533826531969824, 0.2735537330243759, 0.2141423497831717, 0.2090473246707092, 0.2893890862035142, 0.20093574495399724, 0.25713832402825776, 0.30218710283096806, 0.1955068630480551, 0.18170891731460292, 0.20551185798894445, 0.2110845056891033, 0.1951153388661, 0.22151774755713038, 0.1980088052459147, 0.20330795652214506, 0.19530281577876185, 0.24238830699608072, 0.37832994647196716, 0.4713163964462116, 0.22198285423802733, 0.40770910592087595, 0.22701458790277407, 0.2749862673817606, 0.34553112732316416, 0.6294239394239545, 0.3670087817712864, 0.4543215290717397, 0.6635655429240959, 0.40635869930652624, 0.4937691255432274, 0.7889523211879452, 0.20653265679252542, 0.48628684340915207, 0.8006309962432088, 0.2648928513224844, 0.19191574115330412, 0.32374792559042964, 0.2345414484262517, 0.19019505714908325, 0.32352463132920284, 0.20483643273214325, 0.336213453941556, 0.20616062307651495, 0.19509117936493292, 0.1725847807632256, 0.1835627418002186, 0.18835633164716115, 0.1785444400009255, 0.18793580284307054, 0.17973453032515085, 0.17562260139552932, 0.1861275250255171, 0.07868367222901829, 0.08249299308260105, 0.07615554582358508, 0.08205093153252219, 0.08117946877778959, 0.08182979143750913, 0.07350732284911332, 0.0851009479658349, 0.09220713774354483]}, "mutation_prompt": null}
{"id": "b06aca70-e65f-4f14-8491-1478975ed34b", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.mutation_factor = 0.5  # Initial mutation factor\n        self.crossover_rate = 0.7  # Initial crossover rate\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.pop_size  # Initial evaluations\n        \n        while eval_count < self.budget:\n            for i in range(self.pop_size):\n                # Mutation\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True  # Ensure at least one parameter is crossed\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover rate\n            self.mutation_factor = np.clip(self.mutation_factor + np.random.normal(0, 0.1), 0.1, 1.0)\n            self.crossover_rate = np.clip(self.crossover_rate + np.random.normal(0, 0.1), 0.1, 0.9)\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "An adaptive differential evolution algorithm with self-adjusting mutation and crossover rates tailored for efficient exploration and exploitation across diverse optimization landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "629e75a4-b98f-4f3d-a996-684504dc7065", "metadata": {"aucs": [0.7413618277729357, 0.7774551198177866, 0.8550535019811012, 0.7555828494401268, 0.7932830630122638, 0.8310318977035143, 0.7559426508039411, 0.7704539473926042, 0.8303143614207918, 0.5605147624702125, 0.6183462505767698, 0.7376848697737092, 0.5812945433143584, 0.6149944659261488, 0.7234222010915492, 0.5550883027084725, 0.600913228983261, 0.7332908433124867, 0.36572454530163445, 0.5021186164401745, 0.17703105143493525, 0.36910205467724544, 0.5033818741900651, 0.584928968254872, 0.3519999337592207, 0.4720767569454001, 0.17103178815949416, 0.3090643778187907, 0.3932200178707361, 0.4935228037461613, 0.3500275637887297, 0.40209789121741346, 0.165197741087865, 0.32640819135139765, 0.43629737061059004, 0.16360603672949714, 0.9305022838560296, 0.9277723434140479, 0.9438758518184426, 0.9381622348011186, 0.9254337269732346, 0.9434388951825798, 0.9388998644289515, 0.948122175283967, 0.9311205477062854, 0.2569902161214461, 0.22456610038350888, 0.2731911987302438, 0.27459311686384213, 0.273208842731281, 0.3866545173120214, 0.25770842397187554, 0.2375148155050486, 0.21873326262957438, 0.252950616317698, 0.4104453177978138, 0.7218969872405652, 0.3317574520637354, 0.5219303565792083, 0.7723309069410891, 0.3449365602770734, 0.565165870715171, 0.7783561978738025, 0.16546330042562585, 0.19730518325308644, 0.14137449846154837, 0.15717452699701007, 0.16616613192342722, 0.12603745691619606, 0.14888458744483446, 0.1949647689988787, 0.12203610429358414, 0.13538468334517506, 0.1506715971431939, 0.20366111767457262, 0.17624150969647068, 0.14222246120204185, 0.2392578306373878, 0.15721803844132942, 0.14830983226609207, 0.229461797641778, 0.011869222074597396, 0.03860630869619841, 0.09689443901379069, 0.011992755544639633, 0.02250781756020026, 0.05820733338581263, 0.01693667148922451, 0.03069713519184425, 0.002050413685638741, 0.11676117127808971, 0.11080028137257014, 0.12491873189066283, 0.07244809115073425, 0.10100483138437644, 0.0804735494218165, 0.13507648170294362, 0.17573773376459467, 0.3616476564045018, 0.010308580282661572, 0.04918332924457336, 0.11555722691357206, 0.0018266248170930588, 0.0485731041881976, 0.13185023091627335, 0.007518503814979649, 0.07144689541641092, 0.0878491217214259, 0.10251244509152124, 0.1154344731453022, 0.1920387630975554, 0.13598062148835288, 0.1720583396380727, 0.23494962914549844, 0.10937575266048627, 0.15613175936791102, 0.2720422335091117, 0.4486159895062751, 0.5340563074510796, 0.426451020148098, 0.4473782069764505, 0.5105905074507135, 0.4319099474234025, 0.4569620814210531, 0.4856534360303606, 0.6480449760085107, 0.11127591779640711, 0.11196432550572011, 0.10897233421712904, 0.10463044329294446, 0.10877343451965604, 0.12356574616143445, 0.10070577907931144, 0.11187662203575233, 0.1074631836910126, 0.13303488358132176, 0.16051220359525664, 0.1523652727199316, 0.1470067626321263, 0.14891964088402743, 0.18308411990849827, 0.16297999864131452, 0.15950482679956335, 0.1638317093965086, 0.25837639389381073, 0.2802235294210085, 0.41836120338487537, 0.27773344206871375, 0.29419904683793285, 0.3415187311873259, 0.2998891583824047, 0.34367013505873545, 0.4715738288053225, 0.18996526990050244, 0.2533826531969824, 0.2735537330243759, 0.2141423497831717, 0.2090473246707092, 0.2893890862035142, 0.20093574495399724, 0.25713832402825776, 0.30218710283096806, 0.1955068630480551, 0.18170891731460292, 0.20551185798894445, 0.2110845056891033, 0.1951153388661, 0.22151774755713038, 0.1980088052459147, 0.20330795652214506, 0.19530281577876185, 0.24238830699608072, 0.37832994647196716, 0.4713163964462116, 0.22198285423802733, 0.40770910592087595, 0.22701458790277407, 0.2749862673817606, 0.34553112732316416, 0.6294239394239545, 0.3670087817712864, 0.4543215290717397, 0.6635655429240959, 0.40635869930652624, 0.4937691255432274, 0.7889523211879452, 0.20653265679252542, 0.48628684340915207, 0.8006309962432088, 0.2648928513224844, 0.19191574115330412, 0.32374792559042964, 0.2345414484262517, 0.19019505714908325, 0.32352463132920284, 0.20483643273214325, 0.336213453941556, 0.20616062307651495, 0.19509117936493292, 0.1725847807632256, 0.1835627418002186, 0.18835633164716115, 0.1785444400009255, 0.18793580284307054, 0.17973453032515085, 0.17562260139552932, 0.1861275250255171, 0.07868367222901829, 0.08249299308260105, 0.07615554582358508, 0.08205093153252219, 0.08117946877778959, 0.08182979143750913, 0.07350732284911332, 0.0851009479658349, 0.09220713774354483]}, "mutation_prompt": null}
