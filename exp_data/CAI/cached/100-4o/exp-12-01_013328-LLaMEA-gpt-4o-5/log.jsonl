{"id": "6147058f-3d0b-45f5-8493-094212e6a6ba", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.fitness_evaluations = 0\n\n    def __call__(self, func):\n        omega = 0.5\n        phi_p = 0.5\n        phi_g = 0.9\n        F = 0.5\n        CR = 0.9\n        \n        while self.fitness_evaluations < self.budget:\n            for i in range(self.population_size):\n                # Evaluate the fitness of each particle\n                score = func(self.particles[i])\n                self.fitness_evaluations += 1\n                \n                # Update personal and global bests\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                    \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i].copy()\n            \n            # Apply Particle Swarm Optimization update\n            for i in range(self.population_size):\n                r_p = np.random.rand(self.dim)\n                r_g = np.random.rand(self.dim)\n                cognitive = phi_p * r_p * (self.personal_best_positions[i] - self.particles[i])\n                social = phi_g * r_g * (self.global_best_position - self.particles[i])\n                self.velocities[i] = omega * self.velocities[i] + cognitive + social\n                self.particles[i] += self.velocities[i]\n                self.particles[i] = np.clip(self.particles[i], self.lower_bound, self.upper_bound)\n            \n            # Apply Differential Evolution mutation\n            for i in range(self.population_size):\n                if self.fitness_evaluations >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                x1, x2, x3 = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = self.particles[x1] + F * (self.particles[x2] - self.particles[x3])\n                trial_vector = np.where(np.random.rand(self.dim) < CR, mutant_vector, self.particles[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n                trial_score = func(trial_vector)\n                self.fitness_evaluations += 1\n                \n                if trial_score < self.personal_best_scores[i]:\n                    self.particles[i] = trial_vector\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector.copy()\n                    \n                    if trial_score < self.global_best_score:\n                        self.global_best_score = trial_score\n                        self.global_best_position = trial_vector.copy()\n        \n        return self.global_best_position, self.global_best_score", "name": "HybridPSO_DE", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Evolution mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.21612694363279028, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.9317427260597114, 0.29500443359235395, 0.9396146253997976, 0.7641951367477218, 0.935888002136312, 0.9391223212883043, 0.9315355946367574, 0.9357279070127731, 0.9141290241478498, 0.027765730823025803, 0.061330911654533304, 9.999999999998899e-05, 9.999999999998899e-05, 0.045647569167613256, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1260581557534013, 0.11304455165732274, 0.06049314889922386, 0.14739737004027464, 0.07120759951380062, 0.11923569508271781, 0.09739970322230906, 0.06572893105692434, 0.07603372925581242, 0.11287228135230942, 0.08453199584739324, 0.05546778769267202, 0.1023960754026515, 0.07315843281379497, 0.06270256066294022, 0.1125370097487044, 0.04491970944076307, 0.08643292637234667, 0.9797742695805288, 0.9170201210907949, 0.9846162223212416, 0.9808927094872879, 0.9019759457784786, 0.96354848472717, 0.9731637253874372, 0.9732460485095438, 0.9573904543214152, 0.25773626760523627, 0.05938817725183709, 0.1243865746582109, 0.17778730263374765, 0.1511308074110126, 0.13491474306448326, 0.08347890006404246, 0.08808169632111207, 0.08811566444025243, 0.17238795707177956, 0.14054606947045778, 0.18288405938851549, 0.15710241079164078, 0.1171592951304008, 0.19198394295962007, 0.12657989283907267, 0.12684649656697888, 0.15199898601087958, 0.15006103077665067, 0.059219855731090454, 0.03752453771556519, 0.04218578096997372, 0.15996979363531194, 0.10556996964494703, 0.13473937847784057, 0.1681990388982747, 0.15513095063675586, 0.1411442893730449, 0.13773717361350468, 0.13573433945128366, 0.20677076603566458, 0.1319008017054195, 0.15343011418503305, 0.23007375740943203, 9.999999999998899e-05, 0.13932664088123603, 9.999999999998899e-05, 0.10505764832161457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04162096924998038, 0.01544474296603604, 0.05632383810479713, 0.07866322525369196, 0.016633339852666684, 0.005043619793331122, 0.24947367347750316, 0.056308235481122404, 0.03361294104481927, 0.15086373276069986, 0.4413258863847809, 0.0720057779854818, 0.08487164635829192, 0.2603623343292846, 0.12246372628968549, 0.10530116947181467, 0.12541606055058874, 0.07862526170461259, 0.06973288013135459, 0.1396263383748576, 0.2934380464366113, 9.999999999998899e-05, 0.02423828975761322, 0.019539718377471593, 0.2874595238280946, 0.08417019096659628, 0.08583056319649951, 0.438833262426067, 0.426386020834448, 0.5844734666025144, 0.5297679399516149, 0.41236170509779324, 0.21257677632111083, 0.45805290577773317, 0.48356513292938075, 0.43891790403442554, 0.05760608165465764, 0.05884725138563318, 0.06825845410189157, 0.0769618908419063, 0.07060314350511177, 0.07357584122172922, 0.06460154167850196, 0.06635613356794001, 0.07789805309350084, 0.26807343815895723, 0.2667601537972204, 0.13835397823838724, 0.2808666243585918, 0.42112396607068747, 0.23281159886440805, 0.2882803486647829, 0.18695910128417814, 0.3616080319916931, 0.2402451366012669, 0.26338267327597065, 0.16257645780569108, 0.31954781623294826, 0.24044275237804302, 0.1977581614144679, 0.22946614250185438, 0.46737344976652695, 0.11469175329426617, 0.08925616259559754, 0.13414123800939382, 0.1617810490334206, 0.2564084081841467, 0.22731862512752454, 0.143922422279397, 0.18268889401170807, 0.1704278109043178, 0.09521721410182948, 0.1922560434731777, 0.15489982577310635, 0.1666580061616758, 0.20375630894493313, 0.2521587619744804, 0.20767581931710422, 0.23252567703335936, 0.21535789626000146, 0.22184152650470956, 0.1729088127132249, 0.2313424385109374, 0.19404447585759677, 0.18221125658772785, 0.18318329328105187, 0.21180079684430386, 0.1877953537207797, 0.2274850297749036, 0.19349392617882288, 0.10540631020373725, 0.12728496560097535, 0.15469038811855462, 0.17943187152736118, 0.20170526810431422, 0.20101215775768444, 0.10004694306440887, 0.17018405682920512, 0.15407453689514172, 0.08294563762900431, 0.16542297512315784, 0.1087496623806925, 0.41597002753790535, 0.5331812080963388, 0.48993412761441046, 0.10488962040047023, 0.32704995580370355, 0.1343636008931971, 0.22027731968781727, 0.1921682648851012, 0.2017324763918369, 0.1969362554220152, 0.207986220219483, 0.19076155089432478, 0.2517150367638976, 0.2565459625867441, 0.2829462440169066, 0.06361219743494184, 0.1055689293480262, 0.05743870936646778, 0.07142527738143323, 0.05077635694940108, 0.05958348499838029, 0.07374257724811739, 0.10194562883266134, 0.07816138483352575]}, "mutation_prompt": null}
{"id": "012d181e-3469-41e5-a484-d5912c5c30a7", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.fitness_evaluations = 0\n\n    def __call__(self, func):\n        omega = 0.5\n        phi_p = 0.5\n        phi_g = 0.9\n        F = 0.5\n        CR = 0.9\n        \n        while self.fitness_evaluations < self.budget:\n            for i in range(self.population_size):\n                # Evaluate the fitness of each particle\n                score = func(self.particles[i])\n                self.fitness_evaluations += 1\n                \n                # Update personal and global bests\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                    \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i].copy()\n            \n            # Apply Particle Swarm Optimization update\n            for i in range(self.population_size):\n                r_p = np.random.rand(self.dim)\n                r_g = np.random.rand(self.dim)\n                cognitive = phi_p * r_p * (self.personal_best_positions[i] - self.particles[i])\n                social = phi_g * r_g * (self.global_best_position - self.particles[i])\n                self.velocities[i] = omega * self.velocities[i] + cognitive + social\n                self.particles[i] += self.velocities[i]\n                self.particles[i] = np.clip(self.particles[i], self.lower_bound, self.upper_bound)\n            \n            # Apply Differential Evolution mutation\n            for i in range(self.population_size):\n                if self.fitness_evaluations >= self.budget:\n                    break\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                x1, x2, x3 = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = self.particles[x1] + F * (self.particles[x2] - self.particles[x3])\n                trial_vector = np.where(np.random.rand(self.dim) < CR, mutant_vector, self.particles[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n                trial_score = func(trial_vector)\n                self.fitness_evaluations += 1\n                \n                if trial_score < self.personal_best_scores[i]:\n                    self.particles[i] = trial_vector\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector.copy()\n                    \n                    if trial_score < self.global_best_score:\n                        self.global_best_score = trial_score\n                        self.global_best_position = trial_vector.copy()\n        \n        return self.global_best_position, self.global_best_score", "name": "HybridPSO_DE", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Evolution mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6147058f-3d0b-45f5-8493-094212e6a6ba", "metadata": {"aucs": [0.9317427260597114, 0.29500443359235395, 0.9396146253997976, 0.7641951367477218, 0.935888002136312, 0.9391223212883043, 0.9315355946367574, 0.9357279070127731, 0.9141290241478498, 0.027765730823025803, 0.061330911654533304, 9.999999999998899e-05, 9.999999999998899e-05, 0.045647569167613256, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1260581557534013, 0.11304455165732274, 0.06049314889922386, 0.14739737004027464, 0.07120759951380062, 0.11923569508271781, 0.09739970322230906, 0.06572893105692434, 0.07603372925581242, 0.11287228135230942, 0.08453199584739324, 0.05546778769267202, 0.1023960754026515, 0.07315843281379497, 0.06270256066294022, 0.1125370097487044, 0.04491970944076307, 0.08643292637234667, 0.9797742695805288, 0.9170201210907949, 0.9846162223212416, 0.9808927094872879, 0.9019759457784786, 0.96354848472717, 0.9731637253874372, 0.9732460485095438, 0.9573904543214152, 0.25773626760523627, 0.05938817725183709, 0.1243865746582109, 0.17778730263374765, 0.1511308074110126, 0.13491474306448326, 0.08347890006404246, 0.08808169632111207, 0.08811566444025243, 0.17238795707177956, 0.14054606947045778, 0.18288405938851549, 0.15710241079164078, 0.1171592951304008, 0.19198394295962007, 0.12657989283907267, 0.12684649656697888, 0.15199898601087958, 0.15006103077665067, 0.059219855731090454, 0.03752453771556519, 0.04218578096997372, 0.15996979363531194, 0.10556996964494703, 0.13473937847784057, 0.1681990388982747, 0.15513095063675586, 0.1411442893730449, 0.13773717361350468, 0.13573433945128366, 0.20677076603566458, 0.1319008017054195, 0.15343011418503305, 0.23007375740943203, 9.999999999998899e-05, 0.13932664088123603, 9.999999999998899e-05, 0.10505764832161457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04162096924998038, 0.01544474296603604, 0.05632383810479713, 0.07866322525369196, 0.016633339852666684, 0.005043619793331122, 0.24947367347750316, 0.056308235481122404, 0.03361294104481927, 0.15086373276069986, 0.4413258863847809, 0.0720057779854818, 0.08487164635829192, 0.2603623343292846, 0.12246372628968549, 0.10530116947181467, 0.12541606055058874, 0.07862526170461259, 0.06973288013135459, 0.1396263383748576, 0.2934380464366113, 9.999999999998899e-05, 0.02423828975761322, 0.019539718377471593, 0.2874595238280946, 0.08417019096659628, 0.08583056319649951, 0.438833262426067, 0.426386020834448, 0.5844734666025144, 0.5297679399516149, 0.41236170509779324, 0.21257677632111083, 0.45805290577773317, 0.48356513292938075, 0.43891790403442554, 0.05760608165465764, 0.05884725138563318, 0.06825845410189157, 0.0769618908419063, 0.07060314350511177, 0.07357584122172922, 0.06460154167850196, 0.06635613356794001, 0.07789805309350084, 0.26807343815895723, 0.2667601537972204, 0.13835397823838724, 0.2808666243585918, 0.42112396607068747, 0.23281159886440805, 0.2882803486647829, 0.18695910128417814, 0.3616080319916931, 0.2402451366012669, 0.26338267327597065, 0.16257645780569108, 0.31954781623294826, 0.24044275237804302, 0.1977581614144679, 0.22946614250185438, 0.46737344976652695, 0.11469175329426617, 0.08925616259559754, 0.13414123800939382, 0.1617810490334206, 0.2564084081841467, 0.22731862512752454, 0.143922422279397, 0.18268889401170807, 0.1704278109043178, 0.09521721410182948, 0.1922560434731777, 0.15489982577310635, 0.1666580061616758, 0.20375630894493313, 0.2521587619744804, 0.20767581931710422, 0.23252567703335936, 0.21535789626000146, 0.22184152650470956, 0.1729088127132249, 0.2313424385109374, 0.19404447585759677, 0.18221125658772785, 0.18318329328105187, 0.21180079684430386, 0.1877953537207797, 0.2274850297749036, 0.19349392617882288, 0.10540631020373725, 0.12728496560097535, 0.15469038811855462, 0.17943187152736118, 0.20170526810431422, 0.20101215775768444, 0.10004694306440887, 0.17018405682920512, 0.15407453689514172, 0.08294563762900431, 0.16542297512315784, 0.1087496623806925, 0.41597002753790535, 0.5331812080963388, 0.48993412761441046, 0.10488962040047023, 0.32704995580370355, 0.1343636008931971, 0.22027731968781727, 0.1921682648851012, 0.2017324763918369, 0.1969362554220152, 0.207986220219483, 0.19076155089432478, 0.2517150367638976, 0.2565459625867441, 0.2829462440169066, 0.06361219743494184, 0.1055689293480262, 0.05743870936646778, 0.07142527738143323, 0.05077635694940108, 0.05958348499838029, 0.07374257724811739, 0.10194562883266134, 0.07816138483352575]}, "mutation_prompt": null}
