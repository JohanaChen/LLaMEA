{"id": "f1cccb63-86ee-4a83-af7a-9b413dfd5249", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 20\n        self.cr = 0.9  # Crossover probability for DE\n        self.f = 0.8   # Differential weight for DE\n        self.w = 0.5   # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive coefficient for PSO\n        self.c2 = 1.5  # Social coefficient for PSO\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.global_best_position = None\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n        self.personal_best_fitness = np.copy(fitness)\n        self.global_best_position = self.population[np.argmin(fitness)]\n        \n        while self.evaluations < self.budget:\n            # Differential Evolution (DE) step\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + self.f * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.population[i] = trial\n                    if trial_fitness < self.personal_best_fitness[i]:\n                        self.personal_best_fitness[i] = trial_fitness\n                        self.personal_best_positions[i] = trial\n                        if trial_fitness < func(self.global_best_position):\n                            self.global_best_position = trial\n\n            # Particle Swarm Optimization (PSO) step\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                new_position = np.clip(self.population[i] + self.velocities[i], self.bounds[0], self.bounds[1])\n                new_fitness = func(new_position)\n                self.evaluations += 1\n\n                if new_fitness < fitness[i]:\n                    fitness[i] = new_fitness\n                    self.population[i] = new_position\n                    if new_fitness < self.personal_best_fitness[i]:\n                        self.personal_best_fitness[i] = new_fitness\n                        self.personal_best_positions[i] = new_position\n                        if new_fitness < func(self.global_best_position):\n                            self.global_best_position = new_position\n\n        return self.global_best_position", "name": "HybridDEPSO", "description": "A hybrid optimization algorithm combining Differential Evolution and Particle Swarm Optimization for effective exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.34971618456067005, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8896083506351186, 0.9004156516841628, 0.9112321222951805, 0.9039525259329888, 0.9082843179721454, 0.8963040635417754, 0.9165285732532191, 0.8851095621615411, 0.9040059329080129, 0.8107216450424691, 9.999999999998899e-05, 9.999999999998899e-05, 0.8146542106173181, 0.04837651373621721, 0.7991349261716887, 0.05281291329364579, 0.8066314277254194, 0.8145382679527932, 0.12185605919125386, 0.14887912687431726, 0.13314094081405858, 0.11916342275663794, 0.11850617690129917, 0.1501235721455061, 0.09875912225206451, 0.12241486020057801, 0.1413303549446362, 0.15735314445267234, 0.11791212714048083, 0.1298424220545903, 0.6611519841195473, 0.11787354809102757, 0.12933440541818475, 0.11147977761645456, 0.16493312054012899, 0.1571060720214693, 0.9815060813423271, 0.9866938741423384, 0.9762797733403638, 0.987614519253223, 0.9820420340319329, 0.9826733115035048, 0.981586735525134, 0.9794847766362842, 0.9848584056482967, 0.6222863016806058, 0.49733285167157515, 0.615859005117947, 0.5696432196090664, 0.3679267399472633, 0.6640030782583688, 0.5251435249766022, 0.27472183199942757, 0.08700840546182587, 0.22838214753605945, 0.8743719779856494, 0.39138454855449123, 0.19300208260201435, 0.842742970240606, 0.1924560242457224, 0.8075376966373282, 0.8238234599740026, 0.2462242215508853, 0.13375151824890907, 0.5802167997730311, 0.5651354006170051, 0.6404418318860717, 0.543639370422586, 0.12809197086704083, 0.6223942552117576, 0.5493558930728416, 0.5607871345574766, 0.47275190265306555, 0.563451405653647, 0.5906289165984244, 0.1327801579113964, 0.1138448214496901, 0.6008656461117937, 0.6188053973865691, 0.5517336234389896, 0.1344931235257194, 9.999999999998899e-05, 0.2166995020901602, 0.08506965896993879, 9.999999999998899e-05, 0.29332357401977205, 0.2653915345877774, 0.2847733822060945, 0.2749504001949761, 0.27304581859110155, 0.420213982810261, 0.4278306442408223, 0.19935039321275294, 0.3775586716029887, 0.3156321676579592, 0.3602152462272715, 0.39323022171563105, 0.4103668578907175, 0.43263921806201067, 0.0514140951310208, 0.1398076532598299, 0.052041427203105006, 0.09739342072404689, 0.07967236945165335, 0.08025896781032893, 0.1096091614809217, 0.10299043357663706, 0.10390144540319401, 0.043185413792446115, 0.3127063487772378, 0.043603277086720515, 0.31518457403606803, 0.2891487584408947, 0.32275488878828096, 0.05617945098245569, 0.08379462948580896, 0.08449346637674682, 0.7565319901386931, 0.7239910445785691, 0.7703887949549377, 0.778276689262281, 0.7836251765982205, 0.7177657803747098, 0.7523719618304956, 0.7244206521767571, 0.741449335312288, 0.13659364085336734, 0.10301042706335284, 0.17804038249131604, 0.11680527347527092, 0.13822508531336097, 0.09095235996628304, 0.10630918924051236, 0.11055052973936741, 0.11007231383448157, 0.15789937694253908, 0.19392903470050238, 0.1701469206513302, 0.17175089734564442, 0.7123012826047004, 0.19226805780028533, 0.2990661130836445, 0.2060312574826344, 0.3127128452554574, 0.48165764257981325, 0.3665740137050798, 0.29838536324324927, 0.5428986976384157, 0.5597516215845091, 0.5381728209402095, 0.5863231387670862, 0.4876918391413356, 0.6267793018554364, 0.3182220330770562, 0.3182393575522664, 0.2808664967851825, 0.37290099319420855, 0.28981945634256645, 0.27240426676921947, 0.4357972598306671, 0.4066375096078615, 0.36035941140844396, 0.23953869702618558, 0.20073656738430745, 0.20351956659649706, 0.19146054667434242, 0.18738585401241648, 0.20713544277150386, 0.1971968385707431, 0.18697384006899198, 0.1884759455271946, 0.2355064897625735, 0.24070112351190098, 0.22709685302840188, 0.19921302351853898, 0.24899455725491715, 0.2056785065880241, 0.2414322876751902, 0.20412967607917587, 0.24469123091800338, 0.16398139463428651, 0.15311451214344285, 0.18848264387312919, 0.17876222918979578, 0.2011540179581217, 0.20030018277661288, 0.15047800282985757, 0.17075709660028715, 0.19929352541199563, 0.08296871653901494, 0.20953160840490248, 0.1544349904139859, 0.21052275467353454, 0.1677090201151481, 0.11145762205501875, 0.21134880018384106, 0.12951650541636095, 0.15481276598415095, 0.2212229288818841, 0.19115305255525783, 0.1831925824513213, 0.19913246820277952, 0.18429800498113214, 0.20525360907255974, 0.18141085729374562, 0.19103782982346473, 0.20261206198390969, 0.07923132844492009, 0.09184168826173389, 0.0834712918690047, 0.04866158054487679, 0.10695330135541004, 0.08329546116095077, 0.08991817170195993, 0.08556682380994829, 0.09092068223876537]}, "mutation_prompt": null}
{"id": "c4a85bcf-42d5-4254-8f9c-2e2c1c3379bf", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 20\n        self.cr = 0.9\n        self.f = 0.8\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.global_best_position = None\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n        self.personal_best_fitness = np.copy(fitness)\n        self.global_best_position = self.population[np.argmin(fitness)]\n        \n        while self.evaluations < self.budget:\n            # Adaptive Differential Evolution (DE) step\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                self.f = np.random.uniform(0.5, 1.0)  # Adaptive differential weight\n                mutant = np.clip(a + self.f * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.cr\n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    self.population[i] = trial\n                    if trial_fitness < self.personal_best_fitness[i]:\n                        self.personal_best_fitness[i] = trial_fitness\n                        self.personal_best_positions[i] = trial\n                        if trial_fitness < func(self.global_best_position):\n                            self.global_best_position = trial\n\n            # Particle Swarm Optimization (PSO) step\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                if np.random.rand() < 0.1:  # Introduce probabilistic perturbation\n                    self.w = 0.1  # Dynamic inertia weight\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                new_position = np.clip(self.population[i] + self.velocities[i], self.bounds[0], self.bounds[1])\n                new_fitness = func(new_position)\n                self.evaluations += 1\n\n                if new_fitness < fitness[i]:\n                    fitness[i] = new_fitness\n                    self.population[i] = new_position\n                    if new_fitness < self.personal_best_fitness[i]:\n                        self.personal_best_fitness[i] = new_fitness\n                        self.personal_best_positions[i] = new_position\n                        if new_fitness < func(self.global_best_position):\n                            self.global_best_position = new_position\n\n        return self.global_best_position", "name": "HybridDEPSO", "description": "Enhanced HybridDEPSO by introducing adaptive parameters with a probabilistic mechanism for better convergence.", "configspace": "", "generation": 1, "fitness": 0.32847385761855474, "feedback": "", "error": "", "parent_id": "f1cccb63-86ee-4a83-af7a-9b413dfd5249", "metadata": {"aucs": [0.9464997323775524, 0.9393166790816827, 0.9416883700564691, 0.9382369919170643, 0.9407980206789711, 0.9393852481742728, 0.9488953540002217, 0.9413561987741306, 0.9390588135439705, 0.8681067623630472, 0.8839306263964087, 0.8797790830939544, 0.8169649363986635, 0.8917337145720524, 0.8537429108646801, 0.8831721890670935, 0.8910649405344261, 0.019556061949499437, 0.11782330500735116, 0.14604218630932686, 0.08256171599072315, 0.07233255070931466, 0.10208268186780445, 0.19228958011624242, 0.10112812641930757, 0.10692818790785874, 0.164598858315817, 0.1190485063416149, 0.09677823606516667, 0.11810887546490012, 0.09418488209846743, 0.03741839196429542, 0.10031289600199234, 0.10700947788130766, 0.09014928412350887, 0.06694070803233132, 0.9746818985164036, 0.9769307799738038, 0.9651790002755141, 0.979348935280042, 0.9814048279831287, 0.9831400057997833, 0.9747513789744295, 0.9548758250938616, 0.9813308351798647, 0.29378672945295026, 0.7268031274493157, 0.46295137405038844, 0.42146675651760757, 0.38792156846389225, 0.15315494974116772, 0.2786758080242233, 0.8077549311516043, 0.08812862516276132, 0.22977482010634398, 0.21510153361108175, 0.28993587563842316, 0.21047720058267427, 0.21495522393734123, 0.19149974889844712, 0.15193796224937783, 0.14930548118584408, 0.12564958523020398, 0.1665882173878639, 0.733651814844597, 0.5737128667050622, 0.21444660362919643, 0.7219277850458645, 0.6220802907838687, 0.26673418793171255, 0.13258643712134321, 0.13260084125346916, 0.19650559003551582, 0.13049160260046233, 0.13321323265140894, 0.2352750681104956, 0.13191342298517228, 0.13496915520640418, 0.1619400757186279, 0.13998849106591893, 0.1312933200472851, 0.3704773337790961, 0.058325544020779496, 0.21398791888119473, 0.062595581314708, 9.999999999998899e-05, 0.3221808052287851, 0.2788206724049963, 0.38716485102019715, 0.34590131749632547, 0.409706887773287, 0.4782170313859937, 0.4016971860584537, 0.5826624101946865, 0.38071046692915333, 0.2480402397820456, 0.27921832441490946, 0.525493087544932, 0.45315939154373086, 0.07397487616799658, 0.0533003712090665, 0.059532945728760334, 0.08470038440307215, 0.08419334517837085, 0.14135310850209626, 0.2306931354180739, 0.18552980666633778, 0.2504234794268444, 0.35311683075114575, 0.15454129450276866, 0.3951848200481384, 0.10560920912272997, 0.205479116869, 0.24868633498439918, 0.08550769535199121, 0.05815836115831552, 0.08496328101280415, 0.7993902066108318, 0.6737658444601065, 0.8143337493003698, 0.8137643933070985, 0.6709503278305575, 0.7645515788503857, 0.680864025195058, 0.6304624508192382, 0.8197649653417675, 0.09290482214887652, 0.07828612288585424, 0.0853304180562442, 0.11301356436788068, 0.07223015772351205, 0.09819891390984425, 0.07274424160345372, 0.15089237028390912, 0.09626477779434717, 0.12725771798934582, 0.31750856544961903, 0.24905759536175276, 0.1786727141942973, 0.40962498381455936, 0.19245792592548439, 0.22659347990192202, 0.1480438290358096, 0.1986837806545967, 0.26313185471570366, 0.23117173027222193, 0.356883272556204, 0.24801089400275556, 0.22983622682568372, 0.29558344013976334, 0.21424771533343145, 0.40041516132629174, 0.3821924718462332, 0.2908062333476784, 0.21235627777420651, 0.21348502768604305, 0.19666666975979474, 0.223022912316987, 0.23169231157109427, 0.1624692230351269, 0.2894770990906007, 0.28267412751699184, 0.1981615353854974, 0.20288298026705187, 0.23395463589836185, 0.2434685764945007, 0.27513509680543424, 0.31679418089711253, 0.2493778829241976, 0.24041801070398228, 0.2347022961215478, 0.2135175168975162, 0.1826202738200826, 0.18317582080984307, 0.20557944622795865, 0.18597222886719278, 0.18254226101022397, 0.2012478628978498, 0.1874674406435055, 0.18472605266269748, 0.13697132657811417, 0.18657764465050752, 0.18191568556052629, 0.17325104259188373, 0.8840580135887305, 0.1698642887884405, 0.09991727586462462, 0.17007732927435937, 0.16176431035587302, 0.5857448131831025, 0.2115245882187915, 0.2625985721130042, 0.8018572326945044, 0.12845340643274905, 0.21202416920101863, 0.10526494047674095, 0.15688283124424884, 0.1570094677302466, 0.224496885286944, 0.1866957152526355, 0.2163458316325928, 0.21874164040417987, 0.1883331406842066, 0.19014451266987098, 0.17186515105114197, 0.19927252268663975, 0.20826592779764241, 0.08292219074831486, 0.09233140699862175, 0.11637322185036214, 0.11104724019508072, 0.08590972917762552, 0.17487334881661498, 0.10850953825937304, 0.10123957737864053, 0.10247213251036136]}, "mutation_prompt": null}
