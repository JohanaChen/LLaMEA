{"id": "745abd02-21b4-47fe-beaa-e6c0ecbdcec0", "solution": "import numpy as np\n\nclass HybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(self.dim))\n        self.scale_factor = 0.8\n        self.crossover_rate = 0.9\n        self.best_solution = None\n        self.best_fitness = float('inf')\n    \n    def __call__(self, func):\n        # Initialize population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.population_size, self.dim)\n        fitness = np.apply_along_axis(func, 1, population)\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            # Differential Evolution Step\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scale_factor * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.crossover_rate\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                # Greedy Selection\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                    # Update best solution\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n                if eval_count >= self.budget:\n                    break\n            \n            # Adaptive Local Search\n            if eval_count < self.budget:\n                for i in range(self.population_size):\n                    if eval_count >= self.budget:\n                        break\n                    # Simple local search move\n                    candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                    candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                    candidate_fitness = func(candidate)\n                    eval_count += 1\n\n                    if candidate_fitness < fitness[i]:\n                        fitness[i] = candidate_fitness\n                        population[i] = candidate\n\n                        if candidate_fitness < self.best_fitness:\n                            self.best_fitness = candidate_fitness\n                            self.best_solution = candidate\n\n        return self.best_solution", "name": "HybridMetaheuristic", "description": "A hybrid metaheuristic combining differential evolution and adaptive local search to efficiently explore and exploit diverse search spaces.", "configspace": "", "generation": 0, "fitness": 0.4197395354924221, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8371847298824171, 0.8516266870612529, 0.8409846184041349, 0.8508977319993699, 0.8756221651901607, 0.8449887795718285, 0.8444175075648782, 0.8466501803076097, 0.8342422464736858, 0.7003986274972819, 0.7493611555382798, 0.7006641429729079, 0.7240415493870249, 0.7217751817272061, 0.7300861299819468, 0.701361207072002, 0.7320755116274149, 0.6937000715562691, 0.12420966139279355, 0.1682496711061805, 0.17961277293886502, 0.13308401109983148, 0.14024105419032606, 0.1416020021658818, 0.13399799419527458, 0.2731554823545168, 0.15188954186750847, 0.12986313446571673, 0.13410221479127393, 0.1407621321306315, 0.12278866519603215, 0.12811455958163354, 0.1258645315625394, 0.11367760948354189, 0.14026436634603756, 0.1421115642935734, 0.9488802196989733, 0.9545352352516873, 0.966665021316779, 0.9653996976606865, 0.9230285609840053, 0.9654655494086029, 0.9604277355992933, 0.9676513497497429, 0.9529602850854891, 0.5748777842565556, 0.5125607993997721, 0.608569391513536, 0.5938597890996179, 0.5936835435583135, 0.5920504916793932, 0.6160168925821098, 0.5808958429227404, 0.5751246748564562, 0.8683082231445112, 0.8101110719779413, 0.7800571823420132, 0.8572456400296213, 0.790975494024373, 0.8060229155290359, 0.8117440539912688, 0.8132419417095396, 0.8364914413750184, 0.6095735374573026, 0.254824528485714, 0.24333053882509925, 0.5889217814523484, 0.4976876798786317, 0.512656970495623, 0.5809548130252082, 0.24529179618714758, 0.29500425862429014, 0.3424947218271386, 0.353643398013919, 0.3892401238036004, 0.5207579990248479, 0.46229552779009253, 0.3450402056745384, 0.4060673589751014, 0.44953997806007606, 0.4118242708387455, 0.33615308438777614, 0.3441556992910779, 0.5099201335757382, 0.33204029204057484, 0.20951568813820376, 0.27305250133675396, 0.3361063173795087, 0.1962199912620931, 0.3767034944247346, 0.6190154880727065, 0.2370775765043316, 0.49773411552464986, 0.4930172336167662, 0.33355298920617116, 0.5360955614284229, 0.46484310433269715, 0.5448416193047452, 0.595710029356513, 0.06259229010479372, 0.10394664937240194, 0.09733738398592162, 0.2683931051086378, 0.15994747528285336, 0.12797948433026018, 0.1477860736684259, 0.2846414894064129, 0.159845717243698, 0.316245445227501, 0.29043746246507873, 0.3546575350416864, 0.3581667070647869, 0.35749867304769456, 0.31901235980737574, 0.293977850900098, 0.3062951314990353, 0.24677692036579335, 0.7187176766004477, 0.6997541316313336, 0.5972139078879176, 0.6284362241961214, 0.6651952071067474, 0.6912347439267327, 0.6271209898095575, 0.7385062780078526, 0.7678360223413208, 0.10539971858277564, 0.13956313658505493, 0.11605143160937625, 0.12654228923133382, 0.12466838085071719, 0.09655349194463092, 0.09890234969126321, 0.10589473215698308, 0.11769548365147364, 0.23862222981366765, 0.24686307612548075, 0.5187626491338192, 0.23990261163770943, 0.379086115855673, 0.2586736114047664, 0.29312618671440704, 0.37659392380944, 0.30971866106114265, 0.35118140874306114, 0.429399431172689, 0.4379489503478373, 0.46309070048638235, 0.3407854515511324, 0.356845843876758, 0.4193664097562946, 0.4835077598808356, 0.4401484570242217, 0.3366578370848463, 0.3217888078730058, 0.28773054754529503, 0.26916516169019133, 0.2528808730941864, 0.2775764620764536, 0.31122193713950774, 0.3786682190615235, 0.338251391274102, 0.20017817903496837, 0.1899046583548768, 0.19913674526062897, 0.19172909238666191, 0.1960293133085803, 0.19891629966282276, 0.18683303353439895, 0.20508984073779746, 0.21681022110806436, 0.21856770833439798, 0.22785478232276235, 0.4497797819074353, 0.568036907054701, 0.4504484462628269, 0.21799997036911123, 0.40227308711483734, 0.34259878170231184, 0.1901461520725407, 0.8755771190206066, 0.9066633981154028, 0.1704406244608241, 0.8902124632451949, 0.19712803614708896, 0.8645961066452901, 0.18171319324839885, 0.2086909560705461, 0.1615237836292518, 0.8212161290253527, 0.7828925394530736, 0.20677777006929732, 0.2059434073337274, 0.7737556906479599, 0.8181327028114775, 0.21004646543292005, 0.8512544176287071, 0.8205490599694607, 0.17592258207289946, 0.1927908452056304, 0.18816730920595337, 0.18102554092079814, 0.18111417074636116, 0.1888437681596673, 0.1760783147670456, 0.18282854287075645, 0.19660379927945515, 0.08317929617388797, 0.07920617282047893, 0.0918801695754019, 0.07876752607190596, 0.08119512246391514, 0.09218646237527262, 0.08534235183398908, 0.08197453967788537, 0.07337319434124745]}, "mutation_prompt": null}
{"id": "f3a83d1e-677d-42cb-8b9f-e26511d436af", "solution": "import numpy as np\n\nclass HybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(self.dim))\n        self.scale_factor = 0.8\n        self.crossover_rate = 0.9\n        self.best_solution = None\n        self.best_fitness = float('inf')\n    \n    def __call__(self, func):\n        # Initialize population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.population_size, self.dim)\n        fitness = np.apply_along_axis(func, 1, population)\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            # Differential Evolution Step\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                # Adaptive scale factor\n                adaptive_scale_factor = self.scale_factor * np.random.uniform(0.5, 1.5)\n                mutant = np.clip(a + adaptive_scale_factor * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.crossover_rate\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                # Greedy Selection\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                    # Update best solution\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n                if eval_count >= self.budget:\n                    break\n            \n            # Adaptive Local Search\n            if eval_count < self.budget:\n                for i in range(self.population_size):\n                    if eval_count >= self.budget:\n                        break\n                    # Simple local search move\n                    candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                    candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                    candidate_fitness = func(candidate)\n                    eval_count += 1\n\n                    if candidate_fitness < fitness[i]:\n                        fitness[i] = candidate_fitness\n                        population[i] = candidate\n\n                        if candidate_fitness < self.best_fitness:\n                            self.best_fitness = candidate_fitness\n                            self.best_solution = candidate\n\n        return self.best_solution", "name": "HybridMetaheuristic", "description": "Enhanced hybrid metaheuristic integrating a probabilistic mutation scaling factor to adaptively balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": 0.40260093050875817, "feedback": "", "error": "", "parent_id": "745abd02-21b4-47fe-beaa-e6c0ecbdcec0", "metadata": {"aucs": [0.8518804865247932, 0.8448892276001355, 0.862033722034747, 0.835701161307199, 0.8518161168391811, 0.8854844357029972, 0.8675075064839426, 0.8536533796401602, 0.8679078900422852, 0.7585117664901239, 0.6656146491648809, 0.7341746963103097, 0.6967576526217922, 0.7452650167367509, 0.7261753138503735, 0.7416141130121472, 0.7505152164753699, 0.7464899302046596, 0.3455031058922705, 0.233510698301457, 0.15745849897797304, 0.46154498001713695, 0.17206351487704286, 0.2618414709160386, 0.3041602587341221, 0.38175496939263465, 0.23401292185385403, 0.13009366811779932, 0.1488173570668232, 0.1325187670474408, 0.13157927911924727, 0.13939381341312473, 0.28125337513901183, 0.26989004780103387, 0.13398316832635848, 0.1200854889386157, 0.9352392037123913, 0.9509910190875825, 0.9533029285544978, 0.9394215256251942, 0.9485465329544549, 0.9638272516623659, 0.94227235297406, 0.9481517170078751, 0.9648479288426919, 0.6443082862148403, 0.5861381672537496, 0.611928121381076, 0.6308866697093409, 0.5764385998700964, 0.5581644856201531, 0.6621493029549388, 0.5845004220868817, 0.5562521820434112, 0.8291989480643317, 0.7229140594456526, 0.7831014684339436, 0.7976023238696673, 0.8149758444566622, 0.21304574286129052, 0.8181640347426022, 0.7759063453700397, 0.7860960582258614, 0.47243594553156676, 0.3991969688178325, 0.39471175131384695, 0.4549678265860837, 0.2949089498698475, 0.6073168341245594, 0.5908710802321853, 0.3492121032688835, 0.4836701819060426, 0.5443125325670688, 0.20536987668991358, 0.22909368136884445, 0.32249849364106253, 0.5527034593999156, 0.43951053077617175, 0.35546862505336607, 0.2446927946484292, 0.2169376974061441, 0.2595742145997656, 0.08264662716396454, 0.19965348401017913, 0.13217847685981998, 0.28826569712933414, 0.17395955280329012, 0.3430327761315016, 0.12409277959658083, 0.24159055767936766, 0.29040978355998703, 0.22292084205224094, 0.2797681678525703, 0.39861199981703677, 0.19806264967276288, 0.3418563908354252, 0.5034404686834163, 0.543208210403059, 0.5239152938064728, 0.1345655225704684, 0.13453730235473016, 0.1111851009289927, 0.18237099599747175, 0.1372811611974557, 0.18618651977538836, 0.17167370464703202, 0.2356112166264014, 0.21072160123451866, 0.32138744798742913, 0.37526877229930666, 0.2943536927789818, 0.4073906637983893, 0.3562546250990576, 0.3430396588724345, 0.2452571893647929, 0.2706279199925451, 0.2936821406462351, 0.7322345537464794, 0.6158438201098599, 0.8023567876859393, 0.5608706847639966, 0.6617796212264633, 0.6261218887626596, 0.7018483893005869, 0.6327371570481697, 0.7144775861519357, 0.1246666544015338, 0.1386923962470521, 0.15186866482129935, 0.1968578612920432, 0.11572059612235042, 0.1393121118200764, 0.1730591035454625, 0.12098833980323143, 0.1358903473939519, 0.18637771485450616, 0.21535357854970394, 0.3246548602327085, 0.23776746333342103, 0.47704364454713355, 0.26826569398032873, 0.6029922125440207, 0.31600947375103783, 0.5790791006826534, 0.376850075573647, 0.4073945781107208, 0.43791708302637644, 0.42530795056667436, 0.4505120528630503, 0.4725800916300529, 0.4450582671901361, 0.5231541815216902, 0.5370215527665478, 0.311147571738012, 0.29290125386186006, 0.4172077464150906, 0.3971552745239382, 0.3032299058040593, 0.28442288236396396, 0.35480640997095536, 0.38940343844387704, 0.2609965621007764, 0.23661169789838554, 0.20303466233490175, 0.19389722479217564, 0.19406007962609506, 0.2061189302148635, 0.21390193039073357, 0.22144997396297617, 0.1921596517905143, 0.196373584016999, 0.236521626081723, 0.23227113216757478, 0.24102343239262047, 0.20096226806182094, 0.2457852231659391, 0.209296825634379, 0.23208409163750165, 0.2157846458419248, 0.2292325611771222, 0.1648217715012399, 0.1651117582680517, 0.1865738138707106, 0.20073264029139815, 0.867387025696174, 0.8388204592201584, 0.8689595485454379, 0.17455381891077082, 0.1465539682035356, 0.20469574784890332, 0.21039286599044615, 0.20844936017345972, 0.8615713622082697, 0.8231955110258817, 0.2004502797608423, 0.21338094573870903, 0.21122186823837819, 0.861856969604832, 0.18433138026670504, 0.19586132552646518, 0.19720159285224648, 0.19041691125407034, 0.18920744445720727, 0.1873625827767894, 0.18616909796353598, 0.1934898983839567, 0.21557974786444112, 0.07096715356387817, 0.08854385038316925, 0.08339126524684104, 0.07712826572601594, 0.07457662078520644, 0.08795722629821467, 0.07693216428222527, 0.07726910447614732, 0.09588718627950454]}, "mutation_prompt": null}
