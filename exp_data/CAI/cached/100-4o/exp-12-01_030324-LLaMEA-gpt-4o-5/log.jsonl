{"id": "aaa67eb3-6cd7-4e1b-9477-9c34220af47f", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.temperature = 1.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def differential_evolution_crossover(self, target, donor):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.rand() < self.crossover_probability:\n                trial[i] = donor[i]\n        return trial\n\n    def simulated_annealing_mutation(self, solution):\n        mutated = np.copy(solution)\n        for i in range(self.dim):\n            if np.random.rand() < np.exp(-1.0 / self.temperature):\n                mutated[i] += np.random.normal(0, 1)\n                mutated[i] = np.clip(mutated[i], self.lower_bound, self.upper_bound)\n        return mutated\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        # Main optimization loop\n        while evaluations < self.budget:\n            new_population = []\n            for i in range(self.population_size):\n                # Select individuals for crossover\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = population[candidates]\n                donor = a + self.mutation_factor * (b - c)\n                donor = np.clip(donor, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = self.differential_evolution_crossover(population[i], donor)\n\n                # Mutation\n                trial = self.simulated_annealing_mutation(trial)\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    new_population.append(trial)\n                    fitness[i] = trial_fitness\n                else:\n                    new_population.append(population[i])\n\n                if evaluations >= self.budget:\n                    break\n\n            population = np.array(new_population)\n\n        # Return the best solution found\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "HybridGADE", "description": "A hybrid genetic algorithm with differential evolution crossover and simulated annealing-inspired mutation for improved exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.21870681062214029, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.4225416073100712, 0.4636109045839335, 0.43290692081590953, 0.43938256432440304, 0.44128362350839034, 0.4681022242521281, 0.4434122688360904, 0.43837319994828916, 0.4323283429593886, 0.20609605411043597, 0.19710364418694415, 0.23278804288333654, 0.23664466942666895, 0.1977712014654901, 0.20219215646249356, 0.21198300421668304, 0.21440289518414557, 0.2119177158015736, 0.09730243680848816, 0.0941388683749319, 0.10145061110700848, 0.09520703791174123, 0.0853548363727763, 0.09340019429096336, 0.0942825357289444, 0.11119090979602819, 0.11148920281518981, 0.08287395039761436, 0.07697923524626493, 0.08616993652973848, 0.08652965298287985, 0.08323385279491413, 0.08528652294761263, 0.09693176327877118, 0.08948659772899903, 0.08843903611546178, 0.9770144388272018, 0.9796488994698924, 0.9486088598803899, 0.9672751121476358, 0.9753667672289325, 0.9714742496720511, 0.9721961227956261, 0.9819810960964194, 0.9699608924251594, 0.23290455277119737, 0.24947722267795924, 0.22940855017103712, 0.23189645459279218, 0.22732014085884378, 0.23386733997071474, 0.2317012796232626, 0.22079637861005275, 0.22392316366191567, 0.2927046631155442, 0.2929013478238518, 0.25889759320871353, 0.2838176305117093, 0.285084045939183, 0.3076461311540173, 0.2886876794892286, 0.2646024972339386, 0.2788964089686279, 0.15969083543673546, 0.14134785477066492, 0.15189653731017405, 0.15130161575802015, 0.15534364405183765, 0.1410341566410478, 0.1601273618358604, 0.13217216965838985, 0.1614497834144708, 0.10692815365809238, 0.10869845371405285, 0.10143320351969398, 0.13899311899966127, 0.13184001629733633, 0.15356797719863846, 0.13209952584468976, 0.13152167476089693, 0.14703024094429784, 0.021619048924313433, 0.004314641708851208, 0.046074932317852646, 0.007930648914535432, 0.0018449670189194523, 0.009103620550581781, 0.025282649826084302, 0.011794685309788888, 0.031573420522159945, 0.10882958698872647, 0.12285915504538514, 0.15880912045642837, 0.09240054461750136, 0.09526401075431057, 0.1212925126941673, 0.16238005521124177, 0.12233106045549558, 0.14070779517814558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000746304051759239, 9.999999999998899e-05, 0.000534827906260027, 9.999999999998899e-05, 0.015293555156043803, 0.10348447903867852, 0.0920005960817305, 0.08098676348931677, 0.10655398746788791, 0.10133104009803062, 0.10170660467720005, 0.10876489615217055, 0.08898747471174606, 0.08763293825365359, 0.3972541116290328, 0.4131929377354935, 0.39680043614228866, 0.38572014341455985, 0.37398400238403795, 0.3841884427857315, 0.4275474985854131, 0.4021939549136079, 0.4030859774173813, 0.0919740905352402, 0.0984386531335838, 0.08573449378258158, 0.09895143819876362, 0.10124318740022087, 0.07238810003527762, 0.09420167167258409, 0.08780476708885743, 0.09611098492302894, 0.1394130886303897, 0.21252825531350716, 0.18980101996863807, 0.13953506967461438, 0.15404023468378114, 0.13218290028876223, 0.15351242879284377, 0.15072084585975631, 0.16476541501948982, 0.26420009535957856, 0.26407621612740284, 0.25743830676332713, 0.2746008068066629, 0.2533757866763372, 0.24978485296707553, 0.2581294036522448, 0.26136146590475273, 0.26872130249626547, 0.19661631434941473, 0.18586748179889256, 0.19258678659969597, 0.19213621788103108, 0.1906262382372349, 0.19857365515147363, 0.19118875067493157, 0.21155240154375698, 0.1972600783693984, 0.21644169944503788, 0.1644211054243877, 0.18679695680646313, 0.18537546778280578, 0.1771354690886756, 0.1817715975787959, 0.1997656808263738, 0.1764253349462157, 0.19415807555710984, 0.18731167729656395, 0.19489377683583953, 0.17512466325269704, 0.18246133927638375, 0.17595698121724945, 0.17366803476260606, 0.17780740953346408, 0.17636308901208309, 0.17663497175840837, 0.5246910804794797, 0.17190663170093923, 0.15104720103883007, 0.5421336730423918, 0.19145911523844095, 0.5387325979204649, 0.17645558004090578, 0.1816315515662389, 0.47172023284675024, 0.357490980132367, 0.20233334507544853, 0.42046613727460314, 0.1980010574385308, 0.4662816797729761, 0.20310922939408294, 0.20820818551264642, 0.4742634319999297, 0.5109475053913263, 0.17800239705739296, 0.1860201160790853, 0.1952044292831956, 0.19523416392630877, 0.18351550094756242, 0.19353387523903098, 0.17164508830615288, 0.1934417205460952, 0.18819474980080597, 0.06639010957014857, 0.07805123122553725, 0.08223556642115781, 0.082888515073406, 0.07341017547023843, 0.07269865010202903, 0.09448824513194432, 0.07751065964996173, 0.06924305509165674]}, "mutation_prompt": null}
{"id": "63aa782c-4b24-411a-903f-44c925b1f7b0", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.temperature = 1.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def differential_evolution_crossover(self, target, donor):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.rand() < self.crossover_probability:\n                trial[i] = donor[i]\n        return trial\n\n    def simulated_annealing_mutation(self, solution):\n        mutated = np.copy(solution)\n        for i in range(self.dim):\n            if np.random.rand() < np.exp(-1.0 / self.temperature):\n                mutated[i] += np.random.normal(0, 1)\n                mutated[i] = np.clip(mutated[i], self.lower_bound, self.upper_bound)\n        return mutated\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        # Main optimization loop\n        while evaluations < self.budget:\n            new_population = []\n            for i in range(self.population_size):\n                # Select individuals for crossover\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = population[candidates]\n                # Adaptive mutation factor based on remaining budget\n                adaptive_mutation_factor = self.mutation_factor * (1 - evaluations / self.budget)\n                donor = a + adaptive_mutation_factor * (b - c)\n                donor = np.clip(donor, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = self.differential_evolution_crossover(population[i], donor)\n\n                # Mutation\n                trial = self.simulated_annealing_mutation(trial)\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    new_population.append(trial)\n                    fitness[i] = trial_fitness\n                else:\n                    new_population.append(population[i])\n\n                if evaluations >= self.budget:\n                    break\n\n            population = np.array(new_population)\n\n        # Return the best solution found\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "HybridGADE", "description": "Enhanced HybridGADE with adaptive mutation factor for improved convergence speed and solution quality.", "configspace": "", "generation": 1, "fitness": 0.2530979352067075, "feedback": "", "error": "", "parent_id": "aaa67eb3-6cd7-4e1b-9477-9c34220af47f", "metadata": {"aucs": [0.5427284004214926, 0.5034249839171505, 0.5014752013674701, 0.5473433812158786, 0.5171920609621767, 0.49267530770575263, 0.48636417804645393, 0.5529423008459421, 0.5676635120391866, 0.31590002490912095, 0.26752544839081727, 0.26614789896695223, 0.309712691221779, 0.28194372017746927, 0.3286191556348792, 0.30820499520346434, 0.3427369795511471, 0.30642874799877706, 0.10000085825876881, 0.1159716960500673, 0.10419163530394449, 0.10648634482542418, 0.0959764942456961, 0.10980538038891341, 0.10170462711598793, 0.1016882393006896, 0.12124433644334498, 0.09701410118105891, 0.09592714469744168, 0.09730781494075069, 0.09650521796292322, 0.08856906176730239, 0.11378939053413395, 0.09848922876026622, 0.0978325411584241, 0.09798387594390534, 0.9769425232465745, 0.9577601933975055, 0.9419347828110736, 0.9672651325425016, 0.9752646290020531, 0.9719601154359528, 0.9695925081605077, 0.9819655746366106, 0.9752314830659903, 0.28106041492737854, 0.2745640924849819, 0.2705826153950489, 0.30118993904385594, 0.26644822333194373, 0.27088743507924173, 0.2550765993686487, 0.2514388575098081, 0.2558017086125738, 0.5346156100340467, 0.5565245923954694, 0.30996788122624463, 0.4771524473879467, 0.5037847421946486, 0.5537125194498351, 0.5142736562847486, 0.3237394714736621, 0.5724962648404901, 0.14339021562511733, 0.15769226586997376, 0.1460973075509422, 0.12976697256920378, 0.1579341973750914, 0.14573431407420434, 0.14897457821333504, 0.18004860966896452, 0.1691451895611379, 0.08366820473210734, 0.10740510429591721, 0.14857186418156254, 0.14141661887729184, 0.1548375790922879, 0.13622760471581874, 0.13553463441259372, 0.13934227694780676, 0.1671774104504753, 0.0647972979935385, 0.05452180686243524, 0.031929018091677475, 0.06494548597155536, 0.028580811091794223, 0.07995794327879435, 0.062031077794398315, 0.05704154264354688, 0.11616839784860089, 0.19567029220163734, 0.19059173686972775, 0.1666392471296151, 0.2303271749700383, 0.06332563774542921, 0.15226651504774835, 0.23390680117002882, 0.16679992081252581, 0.2008687862927171, 0.045422320352653145, 0.016837426988041804, 0.004468730931489473, 0.0571265873421698, 0.03043736022798127, 0.015092122738251001, 0.017626371340033975, 0.006793516683892498, 0.0362090826703918, 0.1444813968806007, 0.13503434157050254, 0.12843805534476904, 0.14611654739764146, 0.1285260917627804, 0.14751970240864698, 0.13991331709692334, 0.121807251948715, 0.125565283077109, 0.48192441591923396, 0.4271450608242976, 0.40037805557021955, 0.43556290835176126, 0.4586033811462895, 0.4201572696239405, 0.4840246608559945, 0.4743698659887319, 0.4405308883559981, 0.0850469089389575, 0.10362430762521069, 0.09682057219508844, 0.09548089311990571, 0.08838516265783003, 0.10119999991569673, 0.1016431012893021, 0.0940803559402088, 0.10559073320514689, 0.1861056286549012, 0.1408587471611119, 0.15692821621011876, 0.12869202186170337, 0.20951272788280595, 0.15347488643495322, 0.2049024635983273, 0.15417468173022242, 0.15269111795966706, 0.3054550169072694, 0.27375534399892465, 0.30542792672343777, 0.27116139210168044, 0.2872733476048961, 0.297710765059657, 0.31192859711518783, 0.31876527574467506, 0.3026722066967792, 0.211446944109405, 0.22270005449162567, 0.21390611287876038, 0.21923203818357617, 0.22710287005215546, 0.21530439148866143, 0.21908307280153905, 0.2544142933620094, 0.2552045532909206, 0.1982636259325573, 0.1950737420025307, 0.1915138250563424, 0.22803974033352725, 0.1962286336044191, 0.18661917039706255, 0.21652669684246362, 0.17851661924605855, 0.20291804912407974, 0.187196899643562, 0.20415349020388218, 0.19501164909945046, 0.19020200475302995, 0.18621578932921834, 0.1915251341049139, 0.19683334932655594, 0.18461131269110365, 0.2092267017501065, 0.7143901806960613, 0.18303318411234515, 0.152161360334788, 0.6305577982829802, 0.20204672611152696, 0.626330812520932, 0.1821669737517868, 0.19343892757313097, 0.7427126694306755, 0.33818487120895147, 0.16750703889047558, 0.20258681626074704, 0.5756678717556631, 0.5950214916666925, 0.2006340864751861, 0.20880177358063157, 0.6070856358126877, 0.15470138581036663, 0.17967296629465057, 0.19035896208224445, 0.20879296777987388, 0.17647685028744364, 0.18092737627004163, 0.18623475818472512, 0.2001080265382722, 0.18327259036617316, 0.19363439319451414, 0.08360539931294919, 0.07572685892975783, 0.07506648705989605, 0.07411772978430231, 0.07564781085925931, 0.07652489941120344, 0.07922321182783232, 0.06974884164615447, 0.07835366188771753]}, "mutation_prompt": null}
