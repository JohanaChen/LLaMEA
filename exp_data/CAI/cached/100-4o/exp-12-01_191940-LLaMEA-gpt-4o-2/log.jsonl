{"id": "988c3e17-fab5-4263-9197-77904b41ec6f", "solution": "import numpy as np\n\nclass HybridDELS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.pop_size, self.dim)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # Differential Evolution Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = population[indices]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Local Search: Hill Climbing Step\n                for _ in range(5):  # Attempt a few local steps\n                    perturbation = np.random.normal(0, 0.1, self.dim)\n                    candidate = np.clip(trial + perturbation, self.lower_bound, self.upper_bound)\n                    candidate_fitness = func(candidate)\n                    evaluations += 1\n                    if candidate_fitness < func(trial):\n                        trial = candidate\n                    if evaluations >= self.budget:\n                        break\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        # Return the best found solution\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "HybridDELS", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Local Search to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.12865557085968718, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.2766833726772311, 0.26385665438026595, 0.2773261646255216, 0.2482379771926646, 0.25127537363648866, 0.27667697474541086, 0.28587073563372123, 0.2656328635904842, 0.23425430009371917, 0.027387439675377045, 0.0247157243988535, 0.01858277790655083, 0.02731853159117892, 0.019777423446097786, 0.023435077074529187, 0.030677198315538057, 0.020079939083311737, 0.019475508833035726, 0.056444367222554304, 0.06092884980145041, 0.07357590495432487, 0.07271745767607041, 0.05584339546439865, 0.08791870947021996, 0.08350132321199466, 0.06735779711904832, 0.07130638033085379, 0.04189216473911672, 0.03745464043251523, 0.05295645909523916, 0.05867910703439971, 0.04410651148902156, 0.05884229020887177, 0.0548337837541254, 0.0473539680210604, 0.050093945523547734, 0.6419882089739466, 0.7338026732351763, 0.28343203524230587, 0.5145485230254869, 0.23236843246724248, 0.6706210404903514, 0.5873797950761444, 0.5008879759400864, 0.4020131903489842, 0.10739967234362535, 0.10175778772901634, 0.08762045344251923, 0.0904777718559282, 0.07278283366765159, 0.09863532155261656, 0.11523863054730465, 0.12135078733779447, 0.11388998220436974, 0.18506150744917582, 0.1537121849624835, 0.20220907955624456, 0.16492671137456616, 0.16932131770826964, 0.15115647032036472, 0.1706759012737088, 0.16832935344193178, 0.1969816483616924, 0.0815487320901781, 0.03156558569126833, 0.05745182981367203, 0.07543777278772379, 0.05880217513190078, 0.07754478321806746, 0.06320518003437225, 0.030970880687916758, 0.05537872535841781, 0.05157255639482594, 0.01653135245814663, 0.050673647687434875, 0.07184757819882648, 0.0385287528891709, 0.08316773167277347, 0.04187069563467116, 0.04637561673312285, 0.06631560669142111, 0.0038957161494085346, 9.999999999998899e-05, 9.999999999998899e-05, 0.009068107293145444, 9.999999999998899e-05, 0.0011722285050951298, 0.0002488725741613962, 9.999999999998899e-05, 0.003028391884208781, 0.07708315489260453, 0.09341966711808036, 0.09155078977287834, 0.0942891356310438, 0.09281904878725888, 0.0666321557639793, 0.10525305849450228, 0.10024537073921069, 0.0805258390472996, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03379183187136059, 0.05282259411991108, 0.04395118200108172, 0.03075833506417147, 0.03791782494434415, 0.04486408389840013, 0.03663767469311585, 0.02908847535190029, 0.025155566717172007, 0.21844259098699226, 0.27463235065581426, 0.2686860444364998, 0.2567914699763645, 0.24888279826267712, 0.2598149184345765, 0.27228985646933024, 0.23499752239691774, 0.25816716588363764, 0.0752121767565348, 0.06435320588469928, 0.0719590636226185, 0.07160322200563063, 0.06034147405065937, 0.062262616194381226, 0.06701561595224681, 0.06719961983578104, 0.06758682306931496, 0.12386162843066162, 0.16550195345542984, 0.13454005213959286, 0.12433970467842903, 0.14765352178217184, 0.12155840411624164, 0.1422013315298658, 0.11560603886488574, 0.11785652862307505, 0.19042372155765253, 0.17924148856257838, 0.20977191543084173, 0.17560704917789915, 0.1796056045484502, 0.1676100760535847, 0.1879156801358064, 0.1900578131047409, 0.17492700426138275, 0.11591716388166518, 0.13033329528667403, 0.13062492676205273, 0.1300381970011134, 0.12112081558580834, 0.10965359814819786, 0.12910258268060293, 0.1280574556237709, 0.14546601159761652, 0.16492023718664628, 0.16481371139322876, 0.16222095089660415, 0.16853726245628609, 0.20611108252173194, 0.16405133529660376, 0.1726105613846306, 0.1740550303676036, 0.18080181694829156, 0.15128349667394958, 0.15080492366544473, 0.14596865533298564, 0.15722464713151207, 0.12492626994403944, 0.1604715039679837, 0.15270204194455161, 0.15452700249819373, 0.1584584046639178, 0.16922754493240844, 0.1411065038413235, 0.18009943919546367, 0.1367223971290672, 0.16614845982349402, 0.1465863565737653, 0.16238113048796332, 0.16454529400464346, 0.17592069111845687, 0.18579438695760342, 0.1700190767783235, 0.13346938698842692, 0.15330478786544333, 0.12121219473820344, 0.1798274528306869, 0.16118021069994415, 0.1375036427770716, 0.2620669423282498, 0.178323581868288, 0.17999313569940334, 0.18950200028284758, 0.18476976555082125, 0.18261922614770798, 0.19058376741987293, 0.17637899338952523, 0.16552183033829715, 0.18997644756433096, 0.06057950110092791, 0.05835422449889882, 0.0675055082770597, 0.06176901439014093, 0.05530844489867537, 0.05910091391069583, 0.055005073365890556, 0.06581707678496973, 0.058109178097841]}, "mutation_prompt": null}
{"id": "91a7b7d9-50ce-4818-b349-86eea856c8d5", "solution": "import numpy as np\n\nclass HybridDELS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.pop_size, self.dim)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # Differential Evolution Mutation and Crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = population[indices]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Local Search: Hill Climbing Step\n                for _ in range(5):  # Attempt a few local steps\n                    perturbation = np.random.normal(0, 0.1, self.dim)\n                    candidate = np.clip(trial + perturbation, self.lower_bound, self.upper_bound)\n                    candidate_fitness = func(candidate)\n                    evaluations += 1\n                    if candidate_fitness < func(trial):\n                        trial = candidate\n                    if evaluations >= self.budget:\n                        break\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        # Return the best found solution\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "HybridDELS", "description": "A novel hybrid optimization algorithm combining Differential Evolution and Local Search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "988c3e17-fab5-4263-9197-77904b41ec6f", "metadata": {"aucs": [0.2766833726772311, 0.26385665438026595, 0.2773261646255216, 0.2482379771926646, 0.25127537363648866, 0.27667697474541086, 0.28587073563372123, 0.2656328635904842, 0.23425430009371917, 0.027387439675377045, 0.0247157243988535, 0.01858277790655083, 0.02731853159117892, 0.019777423446097786, 0.023435077074529187, 0.030677198315538057, 0.020079939083311737, 0.019475508833035726, 0.056444367222554304, 0.06092884980145041, 0.07357590495432487, 0.07271745767607041, 0.05584339546439865, 0.08791870947021996, 0.08350132321199466, 0.06735779711904832, 0.07130638033085379, 0.04189216473911672, 0.03745464043251523, 0.05295645909523916, 0.05867910703439971, 0.04410651148902156, 0.05884229020887177, 0.0548337837541254, 0.0473539680210604, 0.050093945523547734, 0.6419882089739466, 0.7338026732351763, 0.28343203524230587, 0.5145485230254869, 0.23236843246724248, 0.6706210404903514, 0.5873797950761444, 0.5008879759400864, 0.4020131903489842, 0.10739967234362535, 0.10175778772901634, 0.08762045344251923, 0.0904777718559282, 0.07278283366765159, 0.09863532155261656, 0.11523863054730465, 0.12135078733779447, 0.11388998220436974, 0.18506150744917582, 0.1537121849624835, 0.20220907955624456, 0.16492671137456616, 0.16932131770826964, 0.15115647032036472, 0.1706759012737088, 0.16832935344193178, 0.1969816483616924, 0.0815487320901781, 0.03156558569126833, 0.05745182981367203, 0.07543777278772379, 0.05880217513190078, 0.07754478321806746, 0.06320518003437225, 0.030970880687916758, 0.05537872535841781, 0.05157255639482594, 0.01653135245814663, 0.050673647687434875, 0.07184757819882648, 0.0385287528891709, 0.08316773167277347, 0.04187069563467116, 0.04637561673312285, 0.06631560669142111, 0.0038957161494085346, 9.999999999998899e-05, 9.999999999998899e-05, 0.009068107293145444, 9.999999999998899e-05, 0.0011722285050951298, 0.0002488725741613962, 9.999999999998899e-05, 0.003028391884208781, 0.07708315489260453, 0.09341966711808036, 0.09155078977287834, 0.0942891356310438, 0.09281904878725888, 0.0666321557639793, 0.10525305849450228, 0.10024537073921069, 0.0805258390472996, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03379183187136059, 0.05282259411991108, 0.04395118200108172, 0.03075833506417147, 0.03791782494434415, 0.04486408389840013, 0.03663767469311585, 0.02908847535190029, 0.025155566717172007, 0.21844259098699226, 0.27463235065581426, 0.2686860444364998, 0.2567914699763645, 0.24888279826267712, 0.2598149184345765, 0.27228985646933024, 0.23499752239691774, 0.25816716588363764, 0.0752121767565348, 0.06435320588469928, 0.0719590636226185, 0.07160322200563063, 0.06034147405065937, 0.062262616194381226, 0.06701561595224681, 0.06719961983578104, 0.06758682306931496, 0.12386162843066162, 0.16550195345542984, 0.13454005213959286, 0.12433970467842903, 0.14765352178217184, 0.12155840411624164, 0.1422013315298658, 0.11560603886488574, 0.11785652862307505, 0.19042372155765253, 0.17924148856257838, 0.20977191543084173, 0.17560704917789915, 0.1796056045484502, 0.1676100760535847, 0.1879156801358064, 0.1900578131047409, 0.17492700426138275, 0.11591716388166518, 0.13033329528667403, 0.13062492676205273, 0.1300381970011134, 0.12112081558580834, 0.10965359814819786, 0.12910258268060293, 0.1280574556237709, 0.14546601159761652, 0.16492023718664628, 0.16481371139322876, 0.16222095089660415, 0.16853726245628609, 0.20611108252173194, 0.16405133529660376, 0.1726105613846306, 0.1740550303676036, 0.18080181694829156, 0.15128349667394958, 0.15080492366544473, 0.14596865533298564, 0.15722464713151207, 0.12492626994403944, 0.1604715039679837, 0.15270204194455161, 0.15452700249819373, 0.1584584046639178, 0.16922754493240844, 0.1411065038413235, 0.18009943919546367, 0.1367223971290672, 0.16614845982349402, 0.1465863565737653, 0.16238113048796332, 0.16454529400464346, 0.17592069111845687, 0.18579438695760342, 0.1700190767783235, 0.13346938698842692, 0.15330478786544333, 0.12121219473820344, 0.1798274528306869, 0.16118021069994415, 0.1375036427770716, 0.2620669423282498, 0.178323581868288, 0.17999313569940334, 0.18950200028284758, 0.18476976555082125, 0.18261922614770798, 0.19058376741987293, 0.17637899338952523, 0.16552183033829715, 0.18997644756433096, 0.06057950110092791, 0.05835422449889882, 0.0675055082770597, 0.06176901439014093, 0.05530844489867537, 0.05910091391069583, 0.055005073365890556, 0.06581707678496973, 0.058109178097841]}, "mutation_prompt": null}
