{"id": "c7a00b3a-a7bb-4faa-bc66-7fd1052d41de", "solution": "import numpy as np\n\nclass DynamicSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_bound = (self.upper_bound - self.lower_bound) / 10.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-self.vel_bound, self.vel_bound, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations < self.budget:\n                    score = func(self.population[i])\n                    self.evaluations += 1\n\n                    if score < self.personal_best_scores[i]:\n                        self.personal_best_scores[i] = score\n                        self.personal_best_positions[i] = self.population[i]\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.population[i]\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                social_velocity = self.c2 * r2 * (self.global_best_position - self.population[i])\n                new_velocity = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n                self.velocities[i] = np.clip(new_velocity, -self.vel_bound, self.vel_bound)\n                new_position = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position", "name": "DynamicSwarmOptimizer", "description": "A dynamic swarm-based optimizer that adaptively adjusts exploration and exploitation using a blend of particle swarm intelligence and evolutionary strategies.", "configspace": "", "generation": 0, "fitness": 0.33694890103166, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.900153933211779, 0.8891378502923846, 0.9117076874429484, 0.8749997983769018, 0.8888474535731141, 0.8921614778654154, 0.8920586916083748, 0.8839193004516288, 0.9025540851936226, 0.7732320319180569, 0.7771652268571605, 0.7547162488958605, 0.7601658172702694, 0.7566822544200323, 0.7008576507607965, 0.7531030262952182, 0.7475036007800746, 0.7648356962449453, 0.18576662903770325, 0.11567549143124967, 0.1444160191862266, 0.12345370170597658, 0.15617660272804113, 0.1145948759344978, 0.11762076720502612, 0.16141777306713323, 0.14339212726496642, 0.130697937761882, 0.110247682151705, 0.14137315928237526, 0.11134795472174641, 0.10811680569737725, 0.11229783022362283, 0.09076186661143948, 0.11967921795793113, 0.0700316759373798, 0.9548431739771751, 0.9553977948210916, 0.9550929249716711, 0.9533187521015821, 0.9385332141582423, 0.9430477834650087, 0.9597193406628112, 0.9150247582463621, 0.943338976335585, 0.7260181522020539, 0.7649888558652264, 0.756363705956328, 0.7915892220429888, 0.7561026956062578, 0.7918580951847256, 0.7605927190061722, 0.6797627302325087, 0.77852091355646, 0.1710022992560638, 0.1712003613307025, 0.20983888793896832, 0.21402544138962643, 0.18110229674160638, 0.2212497950519371, 0.15235907613084965, 0.15033682636378365, 0.19539375090452482, 0.17139430678159484, 0.1941630504385925, 0.2669162085497554, 0.22997246138876926, 0.33526087896484347, 0.20553410331850142, 0.19696180711878708, 0.27350577394591913, 0.2188338059558782, 0.26042749923417563, 0.2360693207500817, 0.12813726547553506, 0.23439311551314845, 0.24790414203382694, 0.13489915689325405, 0.26365428035455885, 0.2479476666479854, 0.2559044681162739, 0.05321060283975931, 0.06314498181253858, 0.00014509959876418677, 0.06514182503800914, 0.0013401532944513628, 9.999999999998899e-05, 0.04938515622124906, 0.06935796868105137, 9.999999999998899e-05, 0.1146658815090823, 0.04244235914045025, 0.08305180010160873, 0.06220921138248925, 0.032133858755769906, 0.03681962773034286, 0.0956195153877476, 0.11191548848107291, 0.061758979411217885, 0.29657153179868856, 0.22388337869303276, 0.21161134706626827, 0.36763075738548723, 0.11894179697626428, 0.08666416310324532, 0.10172070387078769, 0.1747665238765076, 0.08523374171445142, 0.15471012030087383, 0.06390408447642149, 0.3391883931433075, 0.07136963210620584, 0.26426349454207676, 0.09281082548065611, 0.19197064894249283, 0.18583884241934412, 0.08466213634536357, 0.5643386256779899, 0.5615015587763197, 0.6000344666325625, 0.5342229619408934, 0.5901708032143049, 0.6551174529952926, 0.5878422946308253, 0.5713719154123107, 0.585914117994472, 0.07399502560535709, 0.096276725314702, 0.07676951951100675, 0.13064766496865432, 0.07111650112354162, 0.12616177633926873, 0.11156727172456649, 0.09634632487914208, 0.09012398321404058, 0.3997807016010928, 0.2611647367616293, 0.1927720483924028, 0.22142399734771423, 0.33261797838751617, 0.6588484492956342, 0.3733604246010934, 0.21071293667688318, 0.20750721008003659, 0.4690440914435402, 0.4591157704415576, 0.449126793088243, 0.23466050579686903, 0.2504221721742226, 0.2319649519947352, 0.27323164424267354, 0.6843465733189349, 0.27162971473392217, 0.2425646937604623, 0.4020134816423483, 0.21118658495307052, 0.24729437264524512, 0.22736236685817068, 0.31254760249037616, 0.3383291546438577, 0.3582622508053952, 0.20034428238469748, 0.22953936469561564, 0.2427457429283656, 0.22574482933509188, 0.23590316150209079, 0.3276407965832482, 0.2643475960226691, 0.25124737587164614, 0.28361723821949003, 0.238492983795198, 0.21078216998421273, 0.25095771474752127, 0.19444042798739924, 0.18706625303687452, 0.21722877777525829, 0.1994994323509811, 0.1867647775625031, 0.22661084559493838, 0.18898780200890208, 0.1878444122367554, 0.17770544431981272, 0.18753345322327064, 0.9396839876956974, 0.201167764132976, 0.9329868845780566, 0.9226244391132905, 0.9560835657185285, 0.9223658335481005, 0.875513498200755, 0.213779310730424, 0.6385615331370622, 0.21124186773718856, 0.168444543659645, 0.1543708583901211, 0.10483972330920444, 0.16769764422787647, 0.7949722496670178, 0.2047613798581005, 0.1982536120267524, 0.2107411182083342, 0.19014796788538801, 0.21558401162520835, 0.20777130004452227, 0.21680696356895024, 0.22376624802215883, 0.20202216748370472, 0.10920386410344085, 0.16334304092328733, 0.08526720739141713, 0.10400383336426278, 0.09518022169852502, 0.09530316668557881, 0.08292393746457749, 0.0971229737256899, 0.08291438863954903]}, "mutation_prompt": null}
{"id": "45d7a23b-2d01-4aeb-9617-7680c2b3750e", "solution": "import numpy as np\n\nclass DynamicSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_bound = (self.upper_bound - self.lower_bound) / 10.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-self.vel_bound, self.vel_bound, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations < self.budget:\n                    score = func(self.population[i])\n                    self.evaluations += 1\n\n                    if score < self.personal_best_scores[i]:\n                        self.personal_best_scores[i] = score\n                        self.personal_best_positions[i] = self.population[i]\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = self.population[i]\n\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                social_velocity = self.c2 * r2 * (self.global_best_position - self.population[i])\n                new_velocity = self.w * self.velocities[i] + cognitive_velocity + social_velocity\n                self.velocities[i] = np.clip(new_velocity, -self.vel_bound, self.vel_bound)\n                new_position = self.population[i] + self.velocities[i]\n                self.population[i] = np.clip(new_position, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position", "name": "DynamicSwarmOptimizer", "description": "A dynamic swarm-based optimizer that adaptively adjusts exploration and exploitation using a blend of particle swarm intelligence and evolutionary strategies.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7a00b3a-a7bb-4faa-bc66-7fd1052d41de", "metadata": {"aucs": [0.900153933211779, 0.8891378502923846, 0.9117076874429484, 0.8749997983769018, 0.8888474535731141, 0.8921614778654154, 0.8920586916083748, 0.8839193004516288, 0.9025540851936226, 0.7732320319180569, 0.7771652268571605, 0.7547162488958605, 0.7601658172702694, 0.7566822544200323, 0.7008576507607965, 0.7531030262952182, 0.7475036007800746, 0.7648356962449453, 0.18576662903770325, 0.11567549143124967, 0.1444160191862266, 0.12345370170597658, 0.15617660272804113, 0.1145948759344978, 0.11762076720502612, 0.16141777306713323, 0.14339212726496642, 0.130697937761882, 0.110247682151705, 0.14137315928237526, 0.11134795472174641, 0.10811680569737725, 0.11229783022362283, 0.09076186661143948, 0.11967921795793113, 0.0700316759373798, 0.9548431739771751, 0.9553977948210916, 0.9550929249716711, 0.9533187521015821, 0.9385332141582423, 0.9430477834650087, 0.9597193406628112, 0.9150247582463621, 0.943338976335585, 0.7260181522020539, 0.7649888558652264, 0.756363705956328, 0.7915892220429888, 0.7561026956062578, 0.7918580951847256, 0.7605927190061722, 0.6797627302325087, 0.77852091355646, 0.1710022992560638, 0.1712003613307025, 0.20983888793896832, 0.21402544138962643, 0.18110229674160638, 0.2212497950519371, 0.15235907613084965, 0.15033682636378365, 0.19539375090452482, 0.17139430678159484, 0.1941630504385925, 0.2669162085497554, 0.22997246138876926, 0.33526087896484347, 0.20553410331850142, 0.19696180711878708, 0.27350577394591913, 0.2188338059558782, 0.26042749923417563, 0.2360693207500817, 0.12813726547553506, 0.23439311551314845, 0.24790414203382694, 0.13489915689325405, 0.26365428035455885, 0.2479476666479854, 0.2559044681162739, 0.05321060283975931, 0.06314498181253858, 0.00014509959876418677, 0.06514182503800914, 0.0013401532944513628, 9.999999999998899e-05, 0.04938515622124906, 0.06935796868105137, 9.999999999998899e-05, 0.1146658815090823, 0.04244235914045025, 0.08305180010160873, 0.06220921138248925, 0.032133858755769906, 0.03681962773034286, 0.0956195153877476, 0.11191548848107291, 0.061758979411217885, 0.29657153179868856, 0.22388337869303276, 0.21161134706626827, 0.36763075738548723, 0.11894179697626428, 0.08666416310324532, 0.10172070387078769, 0.1747665238765076, 0.08523374171445142, 0.15471012030087383, 0.06390408447642149, 0.3391883931433075, 0.07136963210620584, 0.26426349454207676, 0.09281082548065611, 0.19197064894249283, 0.18583884241934412, 0.08466213634536357, 0.5643386256779899, 0.5615015587763197, 0.6000344666325625, 0.5342229619408934, 0.5901708032143049, 0.6551174529952926, 0.5878422946308253, 0.5713719154123107, 0.585914117994472, 0.07399502560535709, 0.096276725314702, 0.07676951951100675, 0.13064766496865432, 0.07111650112354162, 0.12616177633926873, 0.11156727172456649, 0.09634632487914208, 0.09012398321404058, 0.3997807016010928, 0.2611647367616293, 0.1927720483924028, 0.22142399734771423, 0.33261797838751617, 0.6588484492956342, 0.3733604246010934, 0.21071293667688318, 0.20750721008003659, 0.4690440914435402, 0.4591157704415576, 0.449126793088243, 0.23466050579686903, 0.2504221721742226, 0.2319649519947352, 0.27323164424267354, 0.6843465733189349, 0.27162971473392217, 0.2425646937604623, 0.4020134816423483, 0.21118658495307052, 0.24729437264524512, 0.22736236685817068, 0.31254760249037616, 0.3383291546438577, 0.3582622508053952, 0.20034428238469748, 0.22953936469561564, 0.2427457429283656, 0.22574482933509188, 0.23590316150209079, 0.3276407965832482, 0.2643475960226691, 0.25124737587164614, 0.28361723821949003, 0.238492983795198, 0.21078216998421273, 0.25095771474752127, 0.19444042798739924, 0.18706625303687452, 0.21722877777525829, 0.1994994323509811, 0.1867647775625031, 0.22661084559493838, 0.18898780200890208, 0.1878444122367554, 0.17770544431981272, 0.18753345322327064, 0.9396839876956974, 0.201167764132976, 0.9329868845780566, 0.9226244391132905, 0.9560835657185285, 0.9223658335481005, 0.875513498200755, 0.213779310730424, 0.6385615331370622, 0.21124186773718856, 0.168444543659645, 0.1543708583901211, 0.10483972330920444, 0.16769764422787647, 0.7949722496670178, 0.2047613798581005, 0.1982536120267524, 0.2107411182083342, 0.19014796788538801, 0.21558401162520835, 0.20777130004452227, 0.21680696356895024, 0.22376624802215883, 0.20202216748370472, 0.10920386410344085, 0.16334304092328733, 0.08526720739141713, 0.10400383336426278, 0.09518022169852502, 0.09530316668557881, 0.08292393746457749, 0.0971229737256899, 0.08291438863954903]}, "mutation_prompt": null}
