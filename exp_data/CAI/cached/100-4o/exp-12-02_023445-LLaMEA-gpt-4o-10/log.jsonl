{"id": "e94b75bc-3176-476a-b31b-74f9e4da4714", "solution": "import numpy as np\n\nclass APSO:\n    def __init__(self, budget, dim, lower_bound=-5.0, upper_bound=5.0, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = lower_bound\n        self.upper_bound = upper_bound\n        self.swarm_size = swarm_size\n        self.c1 = 2.0  # cognitive component\n        self.c2 = 2.0  # social component\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.v_max = (upper_bound - lower_bound) * 0.2\n        self.iterations = budget // swarm_size\n\n    def __call__(self, func):\n        # Initialize swarm\n        positions = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.swarm_size, self.dim)\n        velocities = np.random.uniform(-self.v_max, self.v_max, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        evals = self.swarm_size\n\n        for i in range(self.iterations):\n            w = self.w_max - (self.w_max - self.w_min) * (i / self.iterations)\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n\n            velocities = (w * velocities +\n                self.c1 * r1 * (personal_best_positions - positions) +\n                self.c2 * r2 * (global_best_position - positions))\n\n            # Ensuring velocities are within limits\n            np.clip(velocities, -self.v_max, self.v_max, out=velocities)\n\n            # Update positions\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new solutions\n            scores = np.array([func(p) for p in positions])\n            evals += self.swarm_size\n\n            # Update personal bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores = np.where(better_mask, scores, personal_best_scores)\n            personal_best_positions = np.where(better_mask[:, np.newaxis], positions, personal_best_positions)\n\n            # Update global best\n            current_best_index = np.argmin(personal_best_scores)\n            current_best_score = personal_best_scores[current_best_index]\n            if current_best_score < global_best_score:\n                global_best_score = current_best_score\n                global_best_position = personal_best_positions[current_best_index]\n\n            if evals >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "APSO", "description": "An Adaptive Particle Swarm Optimization (APSO) with dynamic parameter adjustment for efficient exploration and exploitation in black box optimization.", "configspace": "", "generation": 0, "fitness": 0.27889088168654413, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6477125550462287, 0.6563365110987681, 0.648357198084996, 0.6782355556224902, 0.7021263159389217, 0.6611879254944073, 0.6598903963351119, 0.6513607389692002, 0.664990752404591, 0.38651914699462986, 0.40165548808420726, 0.3843347994160158, 0.42876096511626105, 0.31274727134751124, 0.4015865203331457, 0.39281099024412447, 0.377896654334563, 0.410314579186727, 0.15333393506547321, 0.23655379394611298, 0.149242711057889, 0.1515385938756768, 0.14215275784317294, 0.14974141975920496, 0.13259896071657162, 0.13145198256921353, 0.11146966492360677, 0.1259462821268026, 0.13724504192332188, 0.128322158546324, 0.14435872067907018, 0.1324808709224935, 0.13834377519484642, 0.13582281391510387, 0.1178814402853442, 0.13002246371999204, 0.9857128214016956, 0.9789660232333868, 0.9859870665120288, 0.9836762982703856, 0.9826298855526772, 0.9725254181320364, 0.9860543251280967, 0.9782845310376657, 0.9833504697908219, 0.39897276883660604, 0.3820067975687116, 0.3750053407182877, 0.3752333718154237, 0.3561413150286651, 0.34883054721955775, 0.3181208846203428, 0.3938427791311724, 0.3639196704400942, 0.34361884712080715, 0.5337544578546556, 0.5448464814938332, 0.26927736534645275, 0.19266795622232735, 0.19426364860399048, 0.23307514431699428, 0.35266378623620354, 0.35945102239247795, 0.14998998730248492, 0.16259090566130585, 0.22286544890183635, 0.15741004650803947, 0.19048407664213596, 0.10908066169414599, 0.16941088952138483, 0.3307610579388437, 0.16413084842771009, 0.15823425141838, 0.1788169964857811, 0.12062429639248806, 0.13094435352979328, 0.20003442380379954, 0.17291185789759966, 0.17554827051095856, 0.15267372410509872, 0.18746180140938773, 0.028746640475865393, 0.03182241941377595, 9.999999999998899e-05, 0.005439882524539641, 9.999999999998899e-05, 9.999999999998899e-05, 0.00011262327080152623, 9.999999999998899e-05, 9.999999999998899e-05, 0.10791630385235873, 0.04415710776883952, 0.11999266692069255, 0.12459114315496267, 0.06410028860726347, 0.08398661975582289, 0.11016810475086658, 0.15357689400443686, 0.0675517577275172, 9.999999999998899e-05, 9.999999999998899e-05, 0.1010417755100389, 0.052436809828565134, 0.05229046636037127, 0.0952635278056636, 0.10868600095334346, 0.0885244190006308, 0.04199574457447419, 0.1739090551416106, 0.09572770044494516, 0.16520585059159987, 0.06491069348243184, 0.11528055073442234, 0.26433242136203516, 0.052564654959669666, 0.04837858653820348, 0.073108886132628, 0.4601756141792668, 0.4404074886473538, 0.48624975082807564, 0.4576614098708798, 0.4686007426399118, 0.43631627595465383, 0.4623673262058533, 0.4624104205632733, 0.4584538735444481, 0.12449089808123603, 0.11449211810635973, 0.15632301672757654, 0.1009266952842599, 0.11402870938222553, 0.2818029644154223, 0.10651333787194273, 0.1156406274022429, 0.10114348585092414, 0.2801330420499849, 0.1958526857811299, 0.29307681974182564, 0.22368365792880196, 0.2515340102762449, 0.23376979148045107, 0.17585836886371375, 0.17791007845393247, 0.26962879661754846, 0.34427489000754474, 0.33164606610170144, 0.38414461625647944, 0.33741326166666596, 0.36994605944813697, 0.34404142620909384, 0.35578049529911693, 0.36004724924775333, 0.33930185981003314, 0.25780496003791464, 0.22829980609431544, 0.2451195573663516, 0.21806431269430537, 0.18130565293150291, 0.26169703666508326, 0.29005275361261895, 0.24273432412725393, 0.20494133671161863, 0.21615897042758514, 0.20874661139919737, 0.23686483307555983, 0.22316585067472594, 0.22248404351660178, 0.19153574257078676, 0.205689289643046, 0.19738546551172076, 0.22389797979677162, 0.2137388005472387, 0.2338132033381466, 0.4881055065264289, 0.21756025052251682, 0.3788281460318871, 0.20093797430173865, 0.19703587379109477, 0.21712329487252224, 0.2238568106060701, 0.1782072486242985, 0.17673729941147742, 0.15334527893052563, 0.7523561403680182, 0.6663145274252318, 0.720048044753197, 0.7361549062387216, 0.16950592780641127, 0.7681337067945005, 0.5259523767637516, 0.1563998014954554, 0.11254310722212124, 0.21038371537542955, 0.16842199372210231, 0.5283364495528291, 0.4767174155285946, 0.6785707795289265, 0.6039937079775135, 0.19524247407905038, 0.1832749103422341, 0.20244999065281766, 0.20820210506928716, 0.19920460672075468, 0.18407181067801526, 0.19151272865347035, 0.1979133090479458, 0.19214247356317515, 0.08119772481490195, 0.09316749564272964, 0.0792046511688439, 0.09596345145742546, 0.09304842801118174, 0.08508506388008141, 0.0852120283622797, 0.08820596952067461, 0.10150820797182747]}, "mutation_prompt": null}
{"id": "892f9081-b805-44ef-9de2-78e747644459", "solution": "import numpy as np\n\nclass APSO:\n    def __init__(self, budget, dim, lower_bound=-5.0, upper_bound=5.0, swarm_size=30):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = lower_bound\n        self.upper_bound = upper_bound\n        self.swarm_size = swarm_size\n        self.c1 = 2.0  # cognitive component\n        self.c2 = 2.0  # social component\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.v_max = (upper_bound - lower_bound) * 0.2\n        self.iterations = budget // swarm_size\n\n    def __call__(self, func):\n        # Initialize swarm\n        positions = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.swarm_size, self.dim)\n        velocities = np.random.uniform(-self.v_max, self.v_max, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        evals = self.swarm_size\n\n        for i in range(self.iterations):\n            w = self.w_max - (self.w_max - self.w_min) * (i / self.iterations)\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n\n            velocities = (w * velocities +\n                self.c1 * r1 * (personal_best_positions - positions) +\n                self.c2 * r2 * (global_best_position - positions))\n\n            # Ensuring velocities are within limits\n            np.clip(velocities, -self.v_max, self.v_max, out=velocities)\n\n            # Update positions\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new solutions\n            scores = np.array([func(p) for p in positions])\n            evals += self.swarm_size\n\n            # Update personal bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores = np.where(better_mask, scores, personal_best_scores)\n            personal_best_positions = np.where(better_mask[:, np.newaxis], positions, personal_best_positions)\n\n            # Update global best\n            current_best_index = np.argmin(personal_best_scores)\n            current_best_score = personal_best_scores[current_best_index]\n            if current_best_score < global_best_score:\n                global_best_score = current_best_score\n                global_best_position = personal_best_positions[current_best_index]\n\n            if evals >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "APSO", "description": "An Adaptive Particle Swarm Optimization (APSO) with dynamic parameter adjustment for efficient exploration and exploitation in black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e94b75bc-3176-476a-b31b-74f9e4da4714", "metadata": {"aucs": [0.6477125550462287, 0.6563365110987681, 0.648357198084996, 0.6782355556224902, 0.7021263159389217, 0.6611879254944073, 0.6598903963351119, 0.6513607389692002, 0.664990752404591, 0.38651914699462986, 0.40165548808420726, 0.3843347994160158, 0.42876096511626105, 0.31274727134751124, 0.4015865203331457, 0.39281099024412447, 0.377896654334563, 0.410314579186727, 0.15333393506547321, 0.23655379394611298, 0.149242711057889, 0.1515385938756768, 0.14215275784317294, 0.14974141975920496, 0.13259896071657162, 0.13145198256921353, 0.11146966492360677, 0.1259462821268026, 0.13724504192332188, 0.128322158546324, 0.14435872067907018, 0.1324808709224935, 0.13834377519484642, 0.13582281391510387, 0.1178814402853442, 0.13002246371999204, 0.9857128214016956, 0.9789660232333868, 0.9859870665120288, 0.9836762982703856, 0.9826298855526772, 0.9725254181320364, 0.9860543251280967, 0.9782845310376657, 0.9833504697908219, 0.39897276883660604, 0.3820067975687116, 0.3750053407182877, 0.3752333718154237, 0.3561413150286651, 0.34883054721955775, 0.3181208846203428, 0.3938427791311724, 0.3639196704400942, 0.34361884712080715, 0.5337544578546556, 0.5448464814938332, 0.26927736534645275, 0.19266795622232735, 0.19426364860399048, 0.23307514431699428, 0.35266378623620354, 0.35945102239247795, 0.14998998730248492, 0.16259090566130585, 0.22286544890183635, 0.15741004650803947, 0.19048407664213596, 0.10908066169414599, 0.16941088952138483, 0.3307610579388437, 0.16413084842771009, 0.15823425141838, 0.1788169964857811, 0.12062429639248806, 0.13094435352979328, 0.20003442380379954, 0.17291185789759966, 0.17554827051095856, 0.15267372410509872, 0.18746180140938773, 0.028746640475865393, 0.03182241941377595, 9.999999999998899e-05, 0.005439882524539641, 9.999999999998899e-05, 9.999999999998899e-05, 0.00011262327080152623, 9.999999999998899e-05, 9.999999999998899e-05, 0.10791630385235873, 0.04415710776883952, 0.11999266692069255, 0.12459114315496267, 0.06410028860726347, 0.08398661975582289, 0.11016810475086658, 0.15357689400443686, 0.0675517577275172, 9.999999999998899e-05, 9.999999999998899e-05, 0.1010417755100389, 0.052436809828565134, 0.05229046636037127, 0.0952635278056636, 0.10868600095334346, 0.0885244190006308, 0.04199574457447419, 0.1739090551416106, 0.09572770044494516, 0.16520585059159987, 0.06491069348243184, 0.11528055073442234, 0.26433242136203516, 0.052564654959669666, 0.04837858653820348, 0.073108886132628, 0.4601756141792668, 0.4404074886473538, 0.48624975082807564, 0.4576614098708798, 0.4686007426399118, 0.43631627595465383, 0.4623673262058533, 0.4624104205632733, 0.4584538735444481, 0.12449089808123603, 0.11449211810635973, 0.15632301672757654, 0.1009266952842599, 0.11402870938222553, 0.2818029644154223, 0.10651333787194273, 0.1156406274022429, 0.10114348585092414, 0.2801330420499849, 0.1958526857811299, 0.29307681974182564, 0.22368365792880196, 0.2515340102762449, 0.23376979148045107, 0.17585836886371375, 0.17791007845393247, 0.26962879661754846, 0.34427489000754474, 0.33164606610170144, 0.38414461625647944, 0.33741326166666596, 0.36994605944813697, 0.34404142620909384, 0.35578049529911693, 0.36004724924775333, 0.33930185981003314, 0.25780496003791464, 0.22829980609431544, 0.2451195573663516, 0.21806431269430537, 0.18130565293150291, 0.26169703666508326, 0.29005275361261895, 0.24273432412725393, 0.20494133671161863, 0.21615897042758514, 0.20874661139919737, 0.23686483307555983, 0.22316585067472594, 0.22248404351660178, 0.19153574257078676, 0.205689289643046, 0.19738546551172076, 0.22389797979677162, 0.2137388005472387, 0.2338132033381466, 0.4881055065264289, 0.21756025052251682, 0.3788281460318871, 0.20093797430173865, 0.19703587379109477, 0.21712329487252224, 0.2238568106060701, 0.1782072486242985, 0.17673729941147742, 0.15334527893052563, 0.7523561403680182, 0.6663145274252318, 0.720048044753197, 0.7361549062387216, 0.16950592780641127, 0.7681337067945005, 0.5259523767637516, 0.1563998014954554, 0.11254310722212124, 0.21038371537542955, 0.16842199372210231, 0.5283364495528291, 0.4767174155285946, 0.6785707795289265, 0.6039937079775135, 0.19524247407905038, 0.1832749103422341, 0.20244999065281766, 0.20820210506928716, 0.19920460672075468, 0.18407181067801526, 0.19151272865347035, 0.1979133090479458, 0.19214247356317515, 0.08119772481490195, 0.09316749564272964, 0.0792046511688439, 0.09596345145742546, 0.09304842801118174, 0.08508506388008141, 0.0852120283622797, 0.08820596952067461, 0.10150820797182747]}, "mutation_prompt": null}
