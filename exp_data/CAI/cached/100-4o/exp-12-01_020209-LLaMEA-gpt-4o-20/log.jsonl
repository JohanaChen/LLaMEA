{"id": "c996ceb7-63bb-423e-af6f-252c0be60c27", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLearning:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # Differential weight\n        self.cr = 0.9 # Crossover probability\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.evaluations = 0\n\n    def mutate(self, idx):\n        indices = [i for i in range(self.population_size) if i != idx]\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        mutant = self.population[a] + self.f * (self.population[b] - self.population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.cr\n        offspring = np.where(crossover_mask, mutant, target)\n        return offspring\n\n    def select(self, target_idx, offspring, func):\n        target = self.population[target_idx]\n        offspring_fitness = func(offspring)\n        self.evaluations += 1\n        if offspring_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = offspring\n            self.fitness[target_idx] = offspring_fitness\n            if offspring_fitness < self.best_fitness:\n                self.best_fitness = offspring_fitness\n                self.best_solution = offspring\n\n    def adaptive_learning(self):\n        center = np.mean(self.population, axis=0)\n        for i in range(self.population_size):\n            diff = self.population[i] - center\n            self.population[i] += np.random.uniform(-0.1, 0.1, self.dim) * diff\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < self.best_fitness:\n                self.best_fitness = self.fitness[i]\n                self.best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                offspring = self.crossover(self.population[i], mutant)\n                self.select(i, offspring, func)\n            self.adaptive_learning()\n\n        return self.best_solution, self.best_fitness", "name": "HybridDEAdaptiveLearning", "description": "Hybrid Differential Evolution with Adaptive Learning incorporates differential mutation, crossover, and adaptive learning to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.3094636433975133, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7971610365885413, 0.8037003087353377, 0.801261111444757, 0.8174354185769366, 0.8096561771348139, 0.8092251663720375, 0.8180357892665798, 0.8100132754898609, 0.8102291335739391, 0.688001831240104, 0.6698998544626937, 0.6942402492118699, 0.672827016657187, 0.6707356135851867, 0.6834656092464488, 0.6643687838427741, 0.6932616762362092, 0.6710238174829638, 0.1091737043446177, 0.09855312550968898, 0.09831689849642966, 0.09579728727097003, 0.1077740338809825, 0.12001084388691707, 0.10705127026150463, 0.09227323579270852, 0.12146332369469748, 0.10592041683897657, 0.10050422959372685, 0.10450057196163709, 0.10084507586296187, 0.0882442703982873, 0.12308021806477887, 0.09918285550147521, 0.1006012575871379, 0.0907529593199572, 0.8022676778710964, 0.8907191903417307, 0.90724132685254, 0.8727643560592471, 0.898573545468889, 0.8402996413590289, 0.8357204112743973, 0.8013293561655045, 0.8663758276409698, 0.5342972755987816, 0.4987660228914179, 0.5755543910100609, 0.4906421747623232, 0.49852517897916515, 0.5109123187181586, 0.5412121455205456, 0.519070168724648, 0.4724153663192301, 0.7383536579500988, 0.7952291815170869, 0.774532360394574, 0.7942276968010029, 0.8403421625242681, 0.794679929174461, 0.8077737795410734, 0.7614481814402523, 0.7747405501053815, 0.22876740563979447, 0.24158994014655732, 0.1900862759490758, 0.23001488834285033, 0.22062022701276318, 0.2824793633013213, 0.21777457962810587, 0.18177833862963255, 0.3153696371022542, 0.1978355738390032, 0.18271142457522838, 0.18082867266246583, 0.16539963041392824, 0.3139570890795813, 0.18794533777523093, 0.19571822794373428, 0.14321555359017346, 0.22420114980015526, 0.023971779472230614, 0.012037475496155303, 0.0110855978769554, 0.005275158716173456, 0.0023346188623593056, 9.999999999998899e-05, 0.01070149259001063, 9.999999999998899e-05, 9.999999999998899e-05, 0.09063679560024862, 0.12128173559984479, 0.056422368092420405, 0.08337349664436355, 0.038413496360162225, 0.05043025995715866, 0.07019730632337651, 0.07822220736538821, 0.10572583175511463, 0.04984027746917696, 0.09568930663185016, 0.09420922339814042, 0.044702715025223716, 0.04956014217380966, 0.11317544959183545, 0.09619203531584608, 0.13023959794396056, 0.091433146686279, 0.23177741223750759, 0.20608783468772507, 0.2289273174185299, 0.20783162028814528, 0.21926642490727122, 0.20011599222355658, 0.20592334728670703, 0.18122646319625602, 0.19608900424998565, 0.5461901695907102, 0.5601623710063184, 0.558733328165084, 0.5495519030078964, 0.5800002813263523, 0.5695589675349009, 0.5748520712183981, 0.5749406588135413, 0.5654652142524745, 0.10506430632968444, 0.09611495797792302, 0.10397468983431901, 0.10568456682192207, 0.11247753820323125, 0.08575181084809469, 0.10474507380186426, 0.10928963894756982, 0.10448978190394986, 0.12333440609186896, 0.17077544274877032, 0.16469177222914655, 0.13141025063073053, 0.12841884429866857, 0.13570663876911293, 0.13022274413300106, 0.1355724079555063, 0.14029247784729937, 0.471552069084079, 0.4139738773186782, 0.42449292048122567, 0.43394439613684477, 0.4379265048994134, 0.4005688571082926, 0.4547576127121489, 0.4704371413966525, 0.4669231929382538, 0.3280382941068578, 0.31174491425460416, 0.3168142123094084, 0.3077609248601081, 0.32206643241180155, 0.3441529491405898, 0.3620472838983465, 0.343490771562719, 0.35527909735821706, 0.1952533423579047, 0.18485803899290654, 0.19434308770727127, 0.20909605363553352, 0.19392965539181783, 0.18888692920589978, 0.24598709298083699, 0.21027368839145888, 0.2238496266808706, 0.19068177978273493, 0.1747034758087067, 0.18413319187684352, 0.2155978893113536, 0.18083029707915543, 0.17099914853551978, 0.18461153530635965, 0.17922504785209692, 0.179920294220956, 0.24083642730461352, 0.16258472421683223, 0.15225941742981564, 0.19305292511949435, 0.5249132210286584, 0.18193275367307682, 0.5549217663504132, 0.1681642164297371, 0.18427673469278139, 0.697042087221691, 0.20582009584645833, 0.1957841545605894, 0.2020899239172036, 0.21034686587137075, 0.22877425970708531, 0.20631519451862446, 0.15301298816877662, 0.20945371057167417, 0.18164537118088842, 0.19456513804963083, 0.18425733999167604, 0.1809448720929866, 0.17791625095928776, 0.184452997708765, 0.18628129675943128, 0.20439766631331835, 0.20970751376000862, 0.08592284483097357, 0.08455889750362056, 0.08057658645244814, 0.08005869878526484, 0.074834744227253, 0.0992547987761474, 0.07719384454807643, 0.0770634240138186, 0.07871771059833021]}, "mutation_prompt": null}
{"id": "84c4f199-c043-4661-99c6-f9c4d908fbc3", "solution": "import numpy as np\n\nclass HybridDEAdaptiveLearning:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.f = 0.5  # Differential weight\n        self.cr = 0.9 # Crossover probability\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.evaluations = 0\n\n    def mutate(self, idx):\n        indices = [i for i in range(self.population_size) if i != idx]\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        mutant = self.population[a] + self.f * (self.population[b] - self.population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.cr\n        offspring = np.where(crossover_mask, mutant, target)\n        return offspring\n\n    def select(self, target_idx, offspring, func):\n        target = self.population[target_idx]\n        offspring_fitness = func(offspring)\n        self.evaluations += 1\n        if offspring_fitness < self.fitness[target_idx]:\n            self.population[target_idx] = offspring\n            self.fitness[target_idx] = offspring_fitness\n            if offspring_fitness < self.best_fitness:\n                self.best_fitness = offspring_fitness\n                self.best_solution = offspring\n\n    def adaptive_learning(self):\n        center = np.mean(self.population, axis=0)\n        for i in range(self.population_size):\n            diff = self.population[i] - center\n            self.population[i] += np.random.uniform(-0.1, 0.1, self.dim) * diff\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n            if self.fitness[i] < self.best_fitness:\n                self.best_fitness = self.fitness[i]\n                self.best_solution = self.population[i]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                offspring = self.crossover(self.population[i], mutant)\n                self.select(i, offspring, func)\n            self.adaptive_learning()\n\n        return self.best_solution, self.best_fitness", "name": "HybridDEAdaptiveLearning", "description": "Hybrid Differential Evolution with Adaptive Learning incorporates differential mutation, crossover, and adaptive learning to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c996ceb7-63bb-423e-af6f-252c0be60c27", "metadata": {"aucs": [0.7971610365885413, 0.8037003087353377, 0.801261111444757, 0.8174354185769366, 0.8096561771348139, 0.8092251663720375, 0.8180357892665798, 0.8100132754898609, 0.8102291335739391, 0.688001831240104, 0.6698998544626937, 0.6942402492118699, 0.672827016657187, 0.6707356135851867, 0.6834656092464488, 0.6643687838427741, 0.6932616762362092, 0.6710238174829638, 0.1091737043446177, 0.09855312550968898, 0.09831689849642966, 0.09579728727097003, 0.1077740338809825, 0.12001084388691707, 0.10705127026150463, 0.09227323579270852, 0.12146332369469748, 0.10592041683897657, 0.10050422959372685, 0.10450057196163709, 0.10084507586296187, 0.0882442703982873, 0.12308021806477887, 0.09918285550147521, 0.1006012575871379, 0.0907529593199572, 0.8022676778710964, 0.8907191903417307, 0.90724132685254, 0.8727643560592471, 0.898573545468889, 0.8402996413590289, 0.8357204112743973, 0.8013293561655045, 0.8663758276409698, 0.5342972755987816, 0.4987660228914179, 0.5755543910100609, 0.4906421747623232, 0.49852517897916515, 0.5109123187181586, 0.5412121455205456, 0.519070168724648, 0.4724153663192301, 0.7383536579500988, 0.7952291815170869, 0.774532360394574, 0.7942276968010029, 0.8403421625242681, 0.794679929174461, 0.8077737795410734, 0.7614481814402523, 0.7747405501053815, 0.22876740563979447, 0.24158994014655732, 0.1900862759490758, 0.23001488834285033, 0.22062022701276318, 0.2824793633013213, 0.21777457962810587, 0.18177833862963255, 0.3153696371022542, 0.1978355738390032, 0.18271142457522838, 0.18082867266246583, 0.16539963041392824, 0.3139570890795813, 0.18794533777523093, 0.19571822794373428, 0.14321555359017346, 0.22420114980015526, 0.023971779472230614, 0.012037475496155303, 0.0110855978769554, 0.005275158716173456, 0.0023346188623593056, 9.999999999998899e-05, 0.01070149259001063, 9.999999999998899e-05, 9.999999999998899e-05, 0.09063679560024862, 0.12128173559984479, 0.056422368092420405, 0.08337349664436355, 0.038413496360162225, 0.05043025995715866, 0.07019730632337651, 0.07822220736538821, 0.10572583175511463, 0.04984027746917696, 0.09568930663185016, 0.09420922339814042, 0.044702715025223716, 0.04956014217380966, 0.11317544959183545, 0.09619203531584608, 0.13023959794396056, 0.091433146686279, 0.23177741223750759, 0.20608783468772507, 0.2289273174185299, 0.20783162028814528, 0.21926642490727122, 0.20011599222355658, 0.20592334728670703, 0.18122646319625602, 0.19608900424998565, 0.5461901695907102, 0.5601623710063184, 0.558733328165084, 0.5495519030078964, 0.5800002813263523, 0.5695589675349009, 0.5748520712183981, 0.5749406588135413, 0.5654652142524745, 0.10506430632968444, 0.09611495797792302, 0.10397468983431901, 0.10568456682192207, 0.11247753820323125, 0.08575181084809469, 0.10474507380186426, 0.10928963894756982, 0.10448978190394986, 0.12333440609186896, 0.17077544274877032, 0.16469177222914655, 0.13141025063073053, 0.12841884429866857, 0.13570663876911293, 0.13022274413300106, 0.1355724079555063, 0.14029247784729937, 0.471552069084079, 0.4139738773186782, 0.42449292048122567, 0.43394439613684477, 0.4379265048994134, 0.4005688571082926, 0.4547576127121489, 0.4704371413966525, 0.4669231929382538, 0.3280382941068578, 0.31174491425460416, 0.3168142123094084, 0.3077609248601081, 0.32206643241180155, 0.3441529491405898, 0.3620472838983465, 0.343490771562719, 0.35527909735821706, 0.1952533423579047, 0.18485803899290654, 0.19434308770727127, 0.20909605363553352, 0.19392965539181783, 0.18888692920589978, 0.24598709298083699, 0.21027368839145888, 0.2238496266808706, 0.19068177978273493, 0.1747034758087067, 0.18413319187684352, 0.2155978893113536, 0.18083029707915543, 0.17099914853551978, 0.18461153530635965, 0.17922504785209692, 0.179920294220956, 0.24083642730461352, 0.16258472421683223, 0.15225941742981564, 0.19305292511949435, 0.5249132210286584, 0.18193275367307682, 0.5549217663504132, 0.1681642164297371, 0.18427673469278139, 0.697042087221691, 0.20582009584645833, 0.1957841545605894, 0.2020899239172036, 0.21034686587137075, 0.22877425970708531, 0.20631519451862446, 0.15301298816877662, 0.20945371057167417, 0.18164537118088842, 0.19456513804963083, 0.18425733999167604, 0.1809448720929866, 0.17791625095928776, 0.184452997708765, 0.18628129675943128, 0.20439766631331835, 0.20970751376000862, 0.08592284483097357, 0.08455889750362056, 0.08057658645244814, 0.08005869878526484, 0.074834744227253, 0.0992547987761474, 0.07719384454807643, 0.0770634240138186, 0.07871771059833021]}, "mutation_prompt": null}
