{"id": "1e3c1933-b4fc-485c-8b1c-390837bcbf44", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.local_best_pos = np.copy(self.swarm)\n        self.global_best_pos = None\n        self.local_best_val = np.full(self.population_size, np.inf)\n        self.global_best_val = np.inf\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n    \n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            # Evaluate fitness\n            for i in range(self.population_size):\n                fitness = func(self.swarm[i])\n                evaluations += 1\n                if fitness < self.local_best_val[i]:\n                    self.local_best_val[i] = fitness\n                    self.local_best_pos[i] = self.swarm[i].copy()\n                if fitness < self.global_best_val:\n                    self.global_best_val = fitness\n                    self.global_best_pos = self.swarm[i].copy()\n                    \n                if evaluations >= self.budget:\n                    break\n            \n            # Update velocities and positions (PSO)\n            inertia_weight = 0.7\n            cognitive_const = 1.5\n            social_const = 1.5\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (inertia_weight * self.velocities +\n                               cognitive_const * r1 * (self.local_best_pos - self.swarm) +\n                               social_const * r2 * (self.global_best_pos - self.swarm))\n            self.swarm += self.velocities\n            self.swarm = np.clip(self.swarm, self.lower_bound, self.upper_bound)\n            \n            # Differential Evolution Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.swarm[indices[0]], self.swarm[indices[1]], self.swarm[indices[2]]\n                mutant_vector = x1 + self.mutation_factor * (x2 - x3)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.swarm[i])\n                crossover_indices = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_indices] = mutant_vector[crossover_indices]\n                \n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < self.local_best_val[i]:\n                    self.swarm[i] = trial_vector\n                    self.local_best_val[i] = trial_fitness\n                    if trial_fitness < self.global_best_val:\n                        self.global_best_val = trial_fitness\n                        self.global_best_pos = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n        return self.global_best_pos, self.global_best_val", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm and Differential Evolution algorithm with adaptive mutation and crossover strategies for robust exploration and exploitation across diverse optimization landscapes.", "configspace": "", "generation": 0, "fitness": 0.23920941742538585, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.5835634120815358, 0.6198191387696259, 0.5761019197492814, 0.6265251261669342, 0.5421240353425096, 0.5591851781647318, 0.5955384170192285, 0.6281486100177283, 0.5901385453279419, 0.21992027837712824, 0.192723198241449, 0.15570771449692433, 0.22335304714090032, 0.2286503615805615, 0.19908550305049166, 0.16961461485525542, 0.19308103288969414, 0.1494659787913506, 0.1437389285825892, 0.1355122330894204, 0.12805486640235508, 0.12999519125682912, 0.13299393569305662, 0.12547545969213425, 0.16600342826031178, 0.12867608254873253, 0.11831718687665649, 0.08992017210944125, 0.10187534320979319, 0.09887123766620753, 0.09887822766731658, 0.11403079640183877, 0.11714795486176321, 0.10027032985860151, 0.08939788376215985, 0.12184511805530895, 0.9757530453254522, 0.9749052114161092, 0.9731238934439457, 0.9306535948909542, 0.9525806080365812, 0.9764660821040262, 0.9744997879079116, 0.9688598723456633, 0.9716932802170029, 0.3243751810524659, 0.27231008107317856, 0.24883420297333025, 0.25594624809381494, 0.2310062898262195, 0.3205955136819195, 0.25332223172504753, 0.2923669378987277, 0.30940904467751884, 0.2123153662511703, 0.3244101973067425, 0.6367668958358832, 0.19156479967091544, 0.29728829284940594, 0.3051567591736509, 0.24197831024384864, 0.2355851683128084, 0.21871195826999557, 0.15292580367473896, 0.10960189147327659, 0.14629050346794903, 0.12304014722129342, 0.14195151930713723, 0.15426495639591264, 0.18639575665030195, 0.14286624765712275, 0.18644670530383478, 0.1535649569754134, 0.04040932901416561, 0.19680733550539808, 0.11791430338125852, 0.1304896645299588, 0.17216026548358454, 0.1788269473707803, 0.11910594382237427, 0.14902926667212746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03172654550986265, 0.01923624040400229, 9.999999999998899e-05, 0.006049118867919812, 0.012981528063442105, 0.01964912077246095, 0.06970547675975669, 0.04754949260680752, 0.0810786349646192, 0.08977454710265609, 0.06386429519710823, 0.05526849191320182, 0.07294248165551964, 0.04674005226329658, 0.07649287602825006, 0.02919391568110752, 0.020869594979020634, 0.03440875381989539, 0.07267394178214492, 0.043951082400273345, 0.044960728932840754, 0.055326204250270905, 0.05474002909031972, 0.05342572967868253, 0.07309445018996452, 0.03431939439205034, 0.06481120931853968, 0.1423708188984132, 0.17893833162359873, 0.0836433976304134, 0.07350265134622647, 0.04557676277558731, 0.06859698596300534, 0.4522518969200674, 0.42371951211084646, 0.43393661656490035, 0.43106700698993416, 0.42674649347308813, 0.4253511187085993, 0.4753186423233319, 0.4164711135830812, 0.43946573393360444, 0.15209465684272072, 0.09390895017889611, 0.0939025373185185, 0.11856636433336354, 0.09114527215254498, 0.1253267007724388, 0.11120447943711365, 0.09363312740286278, 0.08770393601995297, 0.22215045218198826, 0.14646063039124912, 0.25380578808250875, 0.16476548452039042, 0.18132180227448635, 0.16627497231054167, 0.2437768750646231, 0.18138285133478615, 0.18529401159410064, 0.2348508585468616, 0.29306654374247587, 0.3317646553975654, 0.33431434764757173, 0.24645310223367423, 0.2752853401168912, 0.32020314299224806, 0.35168882058684214, 0.35756318240235885, 0.2108467381471707, 0.22249676301338905, 0.23078597927467603, 0.2097693662990484, 0.23737575957831003, 0.22206264049676994, 0.20449803622186136, 0.24180861639130846, 0.2121079248623845, 0.18460183021734733, 0.19312930665415162, 0.18497322536848493, 0.1962289572264767, 0.1940879479708978, 0.1934153943589767, 0.2080094765419731, 0.21208625957043636, 0.19866535541980979, 0.19861593930634247, 0.19921162781322588, 0.22966409579792757, 0.22957842809514828, 0.18092794671290946, 0.19172570775328523, 0.20928415255237365, 0.18764737501619355, 0.20492102752176744, 0.5466948278376594, 0.16642251392450091, 0.15237631673588659, 0.6891122229603902, 0.33433376372044243, 0.24737638779612736, 0.6572751699501501, 0.15535584997464158, 0.6953380974719654, 0.39447772082299837, 0.20662706473461223, 0.4347718163163806, 0.31502026966369745, 0.4529290559048954, 0.4069033452827263, 0.20157218838651236, 0.2492737785966378, 0.4230946659758571, 0.17071318940053648, 0.1805025522032513, 0.18716125082824087, 0.21921218418138655, 0.19098066636043698, 0.1772372382568721, 0.2079840345662255, 0.17476001952060138, 0.18059166533577087, 0.09101065582814905, 0.07719925556246854, 0.06999959243179132, 0.08095381957685077, 0.07363098499708653, 0.06605811251759897, 0.09837156620672982, 0.08625708990021974, 0.10270856005340179]}, "mutation_prompt": null}
{"id": "f1580f23-2dab-4fbc-9708-d27d4bf04e7d", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.local_best_pos = np.copy(self.swarm)\n        self.global_best_pos = None\n        self.local_best_val = np.full(self.population_size, np.inf)\n        self.global_best_val = np.inf\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n    \n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            # Evaluate fitness\n            for i in range(self.population_size):\n                fitness = func(self.swarm[i])\n                evaluations += 1\n                if fitness < self.local_best_val[i]:\n                    self.local_best_val[i] = fitness\n                    self.local_best_pos[i] = self.swarm[i].copy()\n                if fitness < self.global_best_val:\n                    self.global_best_val = fitness\n                    self.global_best_pos = self.swarm[i].copy()\n                    \n                if evaluations >= self.budget:\n                    break\n            \n            # Update velocities and positions (PSO)\n            inertia_weight = 0.7\n            cognitive_const = 1.5\n            social_const = 1.5\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (inertia_weight * self.velocities +\n                               cognitive_const * r1 * (self.local_best_pos - self.swarm) +\n                               social_const * r2 * (self.global_best_pos - self.swarm))\n            self.swarm += self.velocities\n            self.swarm = np.clip(self.swarm, self.lower_bound, self.upper_bound)\n            \n            # Differential Evolution Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.swarm[indices[0]], self.swarm[indices[1]], self.swarm[indices[2]]\n                mutant_vector = x1 + self.mutation_factor * (x2 - x3)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.swarm[i])\n                crossover_indices = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_indices] = mutant_vector[crossover_indices]\n                \n                # Selection\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < self.local_best_val[i]:\n                    self.swarm[i] = trial_vector\n                    self.local_best_val[i] = trial_fitness\n                    if trial_fitness < self.global_best_val:\n                        self.global_best_val = trial_fitness\n                        self.global_best_pos = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n        return self.global_best_pos, self.global_best_val", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm and Differential Evolution algorithm with adaptive mutation and crossover strategies for robust exploration and exploitation across diverse optimization landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1e3c1933-b4fc-485c-8b1c-390837bcbf44", "metadata": {"aucs": [0.5835634120815358, 0.6198191387696259, 0.5761019197492814, 0.6265251261669342, 0.5421240353425096, 0.5591851781647318, 0.5955384170192285, 0.6281486100177283, 0.5901385453279419, 0.21992027837712824, 0.192723198241449, 0.15570771449692433, 0.22335304714090032, 0.2286503615805615, 0.19908550305049166, 0.16961461485525542, 0.19308103288969414, 0.1494659787913506, 0.1437389285825892, 0.1355122330894204, 0.12805486640235508, 0.12999519125682912, 0.13299393569305662, 0.12547545969213425, 0.16600342826031178, 0.12867608254873253, 0.11831718687665649, 0.08992017210944125, 0.10187534320979319, 0.09887123766620753, 0.09887822766731658, 0.11403079640183877, 0.11714795486176321, 0.10027032985860151, 0.08939788376215985, 0.12184511805530895, 0.9757530453254522, 0.9749052114161092, 0.9731238934439457, 0.9306535948909542, 0.9525806080365812, 0.9764660821040262, 0.9744997879079116, 0.9688598723456633, 0.9716932802170029, 0.3243751810524659, 0.27231008107317856, 0.24883420297333025, 0.25594624809381494, 0.2310062898262195, 0.3205955136819195, 0.25332223172504753, 0.2923669378987277, 0.30940904467751884, 0.2123153662511703, 0.3244101973067425, 0.6367668958358832, 0.19156479967091544, 0.29728829284940594, 0.3051567591736509, 0.24197831024384864, 0.2355851683128084, 0.21871195826999557, 0.15292580367473896, 0.10960189147327659, 0.14629050346794903, 0.12304014722129342, 0.14195151930713723, 0.15426495639591264, 0.18639575665030195, 0.14286624765712275, 0.18644670530383478, 0.1535649569754134, 0.04040932901416561, 0.19680733550539808, 0.11791430338125852, 0.1304896645299588, 0.17216026548358454, 0.1788269473707803, 0.11910594382237427, 0.14902926667212746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03172654550986265, 0.01923624040400229, 9.999999999998899e-05, 0.006049118867919812, 0.012981528063442105, 0.01964912077246095, 0.06970547675975669, 0.04754949260680752, 0.0810786349646192, 0.08977454710265609, 0.06386429519710823, 0.05526849191320182, 0.07294248165551964, 0.04674005226329658, 0.07649287602825006, 0.02919391568110752, 0.020869594979020634, 0.03440875381989539, 0.07267394178214492, 0.043951082400273345, 0.044960728932840754, 0.055326204250270905, 0.05474002909031972, 0.05342572967868253, 0.07309445018996452, 0.03431939439205034, 0.06481120931853968, 0.1423708188984132, 0.17893833162359873, 0.0836433976304134, 0.07350265134622647, 0.04557676277558731, 0.06859698596300534, 0.4522518969200674, 0.42371951211084646, 0.43393661656490035, 0.43106700698993416, 0.42674649347308813, 0.4253511187085993, 0.4753186423233319, 0.4164711135830812, 0.43946573393360444, 0.15209465684272072, 0.09390895017889611, 0.0939025373185185, 0.11856636433336354, 0.09114527215254498, 0.1253267007724388, 0.11120447943711365, 0.09363312740286278, 0.08770393601995297, 0.22215045218198826, 0.14646063039124912, 0.25380578808250875, 0.16476548452039042, 0.18132180227448635, 0.16627497231054167, 0.2437768750646231, 0.18138285133478615, 0.18529401159410064, 0.2348508585468616, 0.29306654374247587, 0.3317646553975654, 0.33431434764757173, 0.24645310223367423, 0.2752853401168912, 0.32020314299224806, 0.35168882058684214, 0.35756318240235885, 0.2108467381471707, 0.22249676301338905, 0.23078597927467603, 0.2097693662990484, 0.23737575957831003, 0.22206264049676994, 0.20449803622186136, 0.24180861639130846, 0.2121079248623845, 0.18460183021734733, 0.19312930665415162, 0.18497322536848493, 0.1962289572264767, 0.1940879479708978, 0.1934153943589767, 0.2080094765419731, 0.21208625957043636, 0.19866535541980979, 0.19861593930634247, 0.19921162781322588, 0.22966409579792757, 0.22957842809514828, 0.18092794671290946, 0.19172570775328523, 0.20928415255237365, 0.18764737501619355, 0.20492102752176744, 0.5466948278376594, 0.16642251392450091, 0.15237631673588659, 0.6891122229603902, 0.33433376372044243, 0.24737638779612736, 0.6572751699501501, 0.15535584997464158, 0.6953380974719654, 0.39447772082299837, 0.20662706473461223, 0.4347718163163806, 0.31502026966369745, 0.4529290559048954, 0.4069033452827263, 0.20157218838651236, 0.2492737785966378, 0.4230946659758571, 0.17071318940053648, 0.1805025522032513, 0.18716125082824087, 0.21921218418138655, 0.19098066636043698, 0.1772372382568721, 0.2079840345662255, 0.17476001952060138, 0.18059166533577087, 0.09101065582814905, 0.07719925556246854, 0.06999959243179132, 0.08095381957685077, 0.07363098499708653, 0.06605811251759897, 0.09837156620672982, 0.08625708990021974, 0.10270856005340179]}, "mutation_prompt": null}
