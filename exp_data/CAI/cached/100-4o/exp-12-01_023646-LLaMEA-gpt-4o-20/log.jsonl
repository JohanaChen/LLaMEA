{"id": "6c868775-42c5-48ca-81f1-5aa611279ddc", "solution": "import numpy as np\n\nclass AdaptiveDEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Typical choice is 10 times the dimension\n        self.crossover_probability = 0.5\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n\n    def __call__(self, func):\n        evaluations = 0\n        best_solution = None\n        best_fitness = float('inf')\n\n        while evaluations < self.budget:\n            new_population = np.copy(self.population)\n\n            for i in range(self.population_size):\n                # Mutation and crossover\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant_vector = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(crossover):\n                    crossover[np.random.randint(0, self.dim)] = True  # Ensure at least one dimension is crossed\n                \n                trial_vector = np.where(crossover, mutant_vector, self.population[i])\n                \n                # Local search using a simulated annealing-inspired approach\n                accept_prob = np.random.rand()\n                temperature = 1.0 - evaluations / self.budget\n                local_search_vector = np.clip(trial_vector + np.random.normal(0, 0.1 * temperature, self.dim), self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                local_search_fitness = func(local_search_vector)\n                evaluations += 2\n\n                if local_search_fitness < trial_fitness and accept_prob < np.exp((trial_fitness - local_search_fitness) / temperature):\n                    trial_vector = local_search_vector\n                    trial_fitness = local_search_fitness\n\n                # Selection\n                if trial_fitness < func(self.population[i]):\n                    new_population[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial_vector\n\n                # Update adaptive parameters\n                self.crossover_probability = 0.9 - 0.4 * (evaluations / self.budget)\n                self.mutation_factor = 0.5 + 0.3 * np.sin(np.pi * evaluations / self.budget)\n\n            self.population = new_population\n\n        return best_solution", "name": "AdaptiveDEWithLocalSearch", "description": "A blend of differential evolution with adaptive crossover probability and mutation factor, enhanced by a local search phase inspired by simulated annealing.", "configspace": "", "generation": 0, "fitness": 0.1633242431244381, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.3706068631444047, 0.3222244983411847, 0.37365226447978506, 0.3631877315842006, 0.3676872184240594, 0.42299562925849654, 0.3718332431754574, 0.3555762766451539, 0.37467732913068663, 0.08093866746301848, 0.10987749404781721, 0.08728814204987523, 0.08298562036639578, 0.08940402220053312, 0.11923970939148398, 0.10370298221491725, 0.11616120162626653, 0.10643024686668157, 0.10170571399986694, 0.10075220756791337, 0.08370159998631244, 0.09172375502690666, 0.08113869018098407, 0.08695046372182913, 0.09439657134644897, 0.0951372378667491, 0.08778099992615784, 0.07370418821563818, 0.07094331568820966, 0.08902990370598085, 0.0727703954066452, 0.07367233193998579, 0.07383196450880347, 0.07850633725140366, 0.08209000481558326, 0.06866935173007127, 0.7100108137851326, 0.7998569018117313, 0.7463947092222487, 0.8396450762036803, 0.7554146716153358, 0.792331230583705, 0.7037713775611405, 0.7345523040849384, 0.8345040888588158, 0.15423269963933728, 0.13605165012442177, 0.14666270223642408, 0.13399796285856214, 0.13673656450614724, 0.14696028656708626, 0.1396644127109672, 0.14026755073809216, 0.14799852698830496, 0.20972835438879733, 0.1884443792615157, 0.19817903552612592, 0.22705095332939573, 0.22472147785444507, 0.22844971138236236, 0.20547257695554477, 0.1943997871907056, 0.1985270880735972, 0.07003781238052054, 0.08187840496720511, 0.09998468992876519, 0.10317218596184374, 0.09016683979931972, 0.10269737295566594, 0.08165787223510701, 0.09939336050714698, 0.10440467053838343, 0.07142255970191569, 0.06824769527630759, 0.07731999240552778, 0.09276815905345304, 0.08057142082056323, 0.08843166319855622, 0.06947068756920127, 0.08301468991822525, 0.10110811479971449, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011911233205098015, 9.999999999998899e-05, 0.08555097623843089, 0.058629425020672365, 0.09163857721535873, 0.0899625691701158, 0.06118692632647438, 0.1037732405756191, 0.11156669319459922, 0.10416226187257904, 0.0947830501650031, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06085889312851578, 0.042617006745741315, 0.048125219652969786, 0.041243424757940406, 0.0396796710082612, 0.04528716644231101, 0.05175923853205655, 0.05981192073716879, 0.061700660014425424, 0.32295096108386656, 0.3186035156664516, 0.34445201701680894, 0.34514203765986906, 0.3510716446233958, 0.33011828070335114, 0.35870793048159244, 0.3062161885563477, 0.33074881576142834, 0.09571850544880511, 0.08813700599950769, 0.07289064578343663, 0.06762976316012703, 0.08422230999007174, 0.07065895858283477, 0.09235041711032876, 0.06142165991219539, 0.0739418268672376, 0.12220722605972989, 0.17695803669139643, 0.11846170011887602, 0.12447800301697787, 0.1493806711364286, 0.1461283065031077, 0.16561742199750895, 0.17562914704982557, 0.12838987284047398, 0.20233110686825362, 0.20248032609739386, 0.22568116927282322, 0.20556949534204239, 0.1943515648756231, 0.1872965117466736, 0.22007816203011943, 0.2293394355431312, 0.21461778520535224, 0.1373586808553675, 0.14697382184184282, 0.1546968692337497, 0.1636952950666255, 0.14015465786150016, 0.14766158447821676, 0.16220091114822333, 0.16353150580250986, 0.1526656985592988, 0.16213371144163735, 0.2025607636863328, 0.19841593946479252, 0.16802210327386324, 0.16988951460464252, 0.17682848423013908, 0.17228683127242217, 0.17861614849639662, 0.17876158748095272, 0.16696607199452596, 0.16836062104242988, 0.16182590097006144, 0.1655004359969804, 0.1540620740423645, 0.17240125040507648, 0.17524636607500343, 0.16717220521285103, 0.1684479113385582, 0.1415830238743876, 0.155501430383978, 0.14238954217272182, 0.19528100118531277, 0.1562599788462269, 0.14661408863706293, 0.14660989922522827, 0.15002503773660447, 0.16371427456070708, 0.21337720130946247, 0.17313476670793715, 0.21009834352412704, 0.1484894408701508, 0.1256437489713167, 0.17423117965133317, 0.17225954575604852, 0.18303258120692756, 0.1844457938957612, 0.17976387898251, 0.20003129544257103, 0.17476949232766947, 0.18270494141348304, 0.19238053610620176, 0.18067276274789934, 0.17418013532460008, 0.20944310451722525, 0.1753367097664844, 0.06548968385030307, 0.06425455699745108, 0.07569032015371235, 0.06601677886334945, 0.0802421781167384, 0.06608726242840712, 0.06625495395944159, 0.06469905577597568, 0.06621520353431876]}, "mutation_prompt": null}
{"id": "e8fb7519-2824-4de3-90d9-3f56db194548", "solution": "import numpy as np\n\nclass AdaptiveDEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Typical choice is 10 times the dimension\n        self.crossover_probability = 0.5\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n\n    def __call__(self, func):\n        evaluations = 0\n        best_solution = None\n        best_fitness = float('inf')\n\n        while evaluations < self.budget:\n            new_population = np.copy(self.population)\n\n            for i in range(self.population_size):\n                # Mutation and crossover\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant_vector = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(crossover):\n                    crossover[np.random.randint(0, self.dim)] = True  # Ensure at least one dimension is crossed\n                \n                trial_vector = np.where(crossover, mutant_vector, self.population[i])\n                \n                # Local search using a simulated annealing-inspired approach\n                accept_prob = np.random.rand()\n                temperature = 1.0 - evaluations / self.budget\n                local_search_vector = np.clip(trial_vector + np.random.normal(0, 0.1 * temperature, self.dim), self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial_vector)\n                local_search_fitness = func(local_search_vector)\n                evaluations += 2\n\n                if local_search_fitness < trial_fitness and accept_prob < np.exp((trial_fitness - local_search_fitness) / temperature):\n                    trial_vector = local_search_vector\n                    trial_fitness = local_search_fitness\n\n                # Selection\n                if trial_fitness < func(self.population[i]):\n                    new_population[i] = trial_vector\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial_vector\n\n                # Update adaptive parameters\n                self.crossover_probability = 0.9 - 0.4 * (evaluations / self.budget)\n                self.mutation_factor = 0.5 + 0.3 * np.sin(np.pi * evaluations / self.budget)\n\n            self.population = new_population\n\n        return best_solution", "name": "AdaptiveDEWithLocalSearch", "description": "A blend of differential evolution with adaptive crossover probability and mutation factor, enhanced by a local search phase inspired by simulated annealing.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c868775-42c5-48ca-81f1-5aa611279ddc", "metadata": {"aucs": [0.3706068631444047, 0.3222244983411847, 0.37365226447978506, 0.3631877315842006, 0.3676872184240594, 0.42299562925849654, 0.3718332431754574, 0.3555762766451539, 0.37467732913068663, 0.08093866746301848, 0.10987749404781721, 0.08728814204987523, 0.08298562036639578, 0.08940402220053312, 0.11923970939148398, 0.10370298221491725, 0.11616120162626653, 0.10643024686668157, 0.10170571399986694, 0.10075220756791337, 0.08370159998631244, 0.09172375502690666, 0.08113869018098407, 0.08695046372182913, 0.09439657134644897, 0.0951372378667491, 0.08778099992615784, 0.07370418821563818, 0.07094331568820966, 0.08902990370598085, 0.0727703954066452, 0.07367233193998579, 0.07383196450880347, 0.07850633725140366, 0.08209000481558326, 0.06866935173007127, 0.7100108137851326, 0.7998569018117313, 0.7463947092222487, 0.8396450762036803, 0.7554146716153358, 0.792331230583705, 0.7037713775611405, 0.7345523040849384, 0.8345040888588158, 0.15423269963933728, 0.13605165012442177, 0.14666270223642408, 0.13399796285856214, 0.13673656450614724, 0.14696028656708626, 0.1396644127109672, 0.14026755073809216, 0.14799852698830496, 0.20972835438879733, 0.1884443792615157, 0.19817903552612592, 0.22705095332939573, 0.22472147785444507, 0.22844971138236236, 0.20547257695554477, 0.1943997871907056, 0.1985270880735972, 0.07003781238052054, 0.08187840496720511, 0.09998468992876519, 0.10317218596184374, 0.09016683979931972, 0.10269737295566594, 0.08165787223510701, 0.09939336050714698, 0.10440467053838343, 0.07142255970191569, 0.06824769527630759, 0.07731999240552778, 0.09276815905345304, 0.08057142082056323, 0.08843166319855622, 0.06947068756920127, 0.08301468991822525, 0.10110811479971449, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011911233205098015, 9.999999999998899e-05, 0.08555097623843089, 0.058629425020672365, 0.09163857721535873, 0.0899625691701158, 0.06118692632647438, 0.1037732405756191, 0.11156669319459922, 0.10416226187257904, 0.0947830501650031, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06085889312851578, 0.042617006745741315, 0.048125219652969786, 0.041243424757940406, 0.0396796710082612, 0.04528716644231101, 0.05175923853205655, 0.05981192073716879, 0.061700660014425424, 0.32295096108386656, 0.3186035156664516, 0.34445201701680894, 0.34514203765986906, 0.3510716446233958, 0.33011828070335114, 0.35870793048159244, 0.3062161885563477, 0.33074881576142834, 0.09571850544880511, 0.08813700599950769, 0.07289064578343663, 0.06762976316012703, 0.08422230999007174, 0.07065895858283477, 0.09235041711032876, 0.06142165991219539, 0.0739418268672376, 0.12220722605972989, 0.17695803669139643, 0.11846170011887602, 0.12447800301697787, 0.1493806711364286, 0.1461283065031077, 0.16561742199750895, 0.17562914704982557, 0.12838987284047398, 0.20233110686825362, 0.20248032609739386, 0.22568116927282322, 0.20556949534204239, 0.1943515648756231, 0.1872965117466736, 0.22007816203011943, 0.2293394355431312, 0.21461778520535224, 0.1373586808553675, 0.14697382184184282, 0.1546968692337497, 0.1636952950666255, 0.14015465786150016, 0.14766158447821676, 0.16220091114822333, 0.16353150580250986, 0.1526656985592988, 0.16213371144163735, 0.2025607636863328, 0.19841593946479252, 0.16802210327386324, 0.16988951460464252, 0.17682848423013908, 0.17228683127242217, 0.17861614849639662, 0.17876158748095272, 0.16696607199452596, 0.16836062104242988, 0.16182590097006144, 0.1655004359969804, 0.1540620740423645, 0.17240125040507648, 0.17524636607500343, 0.16717220521285103, 0.1684479113385582, 0.1415830238743876, 0.155501430383978, 0.14238954217272182, 0.19528100118531277, 0.1562599788462269, 0.14661408863706293, 0.14660989922522827, 0.15002503773660447, 0.16371427456070708, 0.21337720130946247, 0.17313476670793715, 0.21009834352412704, 0.1484894408701508, 0.1256437489713167, 0.17423117965133317, 0.17225954575604852, 0.18303258120692756, 0.1844457938957612, 0.17976387898251, 0.20003129544257103, 0.17476949232766947, 0.18270494141348304, 0.19238053610620176, 0.18067276274789934, 0.17418013532460008, 0.20944310451722525, 0.1753367097664844, 0.06548968385030307, 0.06425455699745108, 0.07569032015371235, 0.06601677886334945, 0.0802421781167384, 0.06608726242840712, 0.06625495395944159, 0.06469905577597568, 0.06621520353431876]}, "mutation_prompt": null}
