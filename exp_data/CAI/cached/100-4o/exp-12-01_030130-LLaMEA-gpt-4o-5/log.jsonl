{"id": "baa4f801-1cb4-47ee-8aee-c9ee12945212", "solution": "import numpy as np\n\nclass HybridDEARW:\n    def __init__(self, budget, dim, pop_size=20, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Differential Evolution mutation\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, self.population[i])\n\n                # Adaptive Random Walk for exploration\n                if np.random.rand() < 0.1:  # 10% chance to perform a random walk\n                    step_size = np.random.rand() * (self.upper_bound - self.lower_bound) * 0.1\n                    trial += np.random.uniform(-step_size, step_size, self.dim)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < func(self.population[i]):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n                \n                if evaluations >= self.budget:\n                    break\n\n        return self.best_solution", "name": "HybridDEARW", "description": "Hybrid Differential Evolution with Adaptive Random Walk for enhanced exploration and exploitation in constrained search spaces.", "configspace": "", "generation": 0, "fitness": 0.32579004934746947, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.847763134927341, 0.8412744423483656, 0.8343276821867949, 0.8308338653527252, 0.8283407296709999, 0.8605961824216072, 0.8358617834359272, 0.843087182904185, 0.8304661728350647, 0.7039300354648192, 0.7170011529962892, 0.6990761947607758, 0.6755305750880771, 0.6187284394077621, 0.6954946294448693, 0.6927377331352953, 0.7183552499493806, 0.7046232257431709, 0.12763057418674884, 0.25074182611621376, 0.18096769932893353, 0.12000987206149694, 0.29605277809852093, 0.15575978470908758, 0.2296570875129409, 0.19904987181910927, 0.11191649403618031, 0.09821553148682216, 0.11012952566411205, 0.1265993974544023, 0.11104899650677469, 0.1117291670967745, 0.11720386923162318, 0.11967908066066268, 0.13136347517792324, 0.09792772856692589, 0.922283476928988, 0.8924455483854883, 0.8856316062295579, 0.8321492719952598, 0.9396125588976288, 0.8996394604191955, 0.9185148613574382, 0.9291297938142066, 0.7514855063498255, 0.4198232067550721, 0.3164389655128095, 0.3449268354722641, 0.31484662138378894, 0.36825580843513983, 0.29864028344489046, 0.421794234463694, 0.2625002995796988, 0.26792037806924596, 0.726252207150043, 0.3597869912675523, 0.8188168169891026, 0.8482798654502036, 0.2672567835865318, 0.35076318348106983, 0.820222870841694, 0.3490582232978633, 0.8437908721381497, 0.1574248394936889, 0.16477794529858403, 0.1410725621090516, 0.16393548423522386, 0.13530592306966627, 0.24044359420417327, 0.15625613169734975, 0.18717472556021464, 0.16441237240401096, 0.6083201356852876, 0.22220212990382104, 0.1840168074061902, 0.20121167869548073, 0.15845398755518492, 0.29705061391015875, 0.1703773986548256, 0.1804308308345708, 0.13071757102385073, 0.07092532806264484, 0.20978890114669868, 0.06116643679646172, 0.05998539472842801, 0.11153101495227236, 0.01943626869315007, 0.030087051725134706, 0.10138801948107534, 0.27975096587009474, 0.44692896235535684, 0.17305733645335275, 0.2723327324714213, 0.11339190336111438, 0.30660006153720765, 0.059096463822559064, 0.16943984913674937, 0.18888122734318624, 0.5384127473767126, 0.20214372806391, 0.12220760501441619, 0.14935665274800336, 0.25285173135093975, 0.11245139104332624, 0.18046793079387535, 0.17107743836050504, 0.22094922040948184, 0.10397326347049507, 0.23602667346877637, 0.33436979521913357, 0.2355937731245321, 0.26556776853419484, 0.24547679431873093, 0.22547329837080854, 0.2821417160649953, 0.13478939994905215, 0.25825015188237366, 0.5575124465854844, 0.6046946198599107, 0.5848460104098161, 0.4875307093204354, 0.7438248745192868, 0.6530370566602939, 0.758720301146231, 0.6679140031756422, 0.5424851991112092, 0.1171603961828458, 0.10369196490650956, 0.09793142476006145, 0.106990157877485, 0.11285590862981498, 0.10174542483329552, 0.08905847360534702, 0.10938099657395339, 0.10816950907241629, 0.15248314439374555, 0.14596937668132504, 0.1646439686577813, 0.15408584484156596, 0.17175804854295695, 0.11858085775193872, 0.22118239974541143, 0.12980596065861283, 0.18102291245340008, 0.41172024071153823, 0.4133789510353869, 0.46202764074712255, 0.44058863190287867, 0.45481073167645325, 0.4557582975187615, 0.4439898665978257, 0.5646762893451541, 0.4496275320953552, 0.3022092403361808, 0.38704358661513993, 0.21487953224869982, 0.4029774464582757, 0.2765110614730185, 0.3394683698959441, 0.35049674285673715, 0.4090127178359909, 0.3211902281064968, 0.19366673519051836, 0.2034369592312637, 0.18167497517490405, 0.19315976244355904, 0.18513126549131254, 0.1806052616101148, 0.19176157574418307, 0.1727123277168563, 0.19898061633565922, 0.22182210762939014, 0.44526938541200567, 0.20526405583809226, 0.23010533152236345, 0.20922735644616575, 0.5684646098271848, 0.2070599014227893, 0.19931398204292983, 0.20342580756878603, 0.7841119114928707, 0.16224020385078897, 0.151455602001907, 0.18611974348652616, 0.17631258097808933, 0.13035442183499912, 0.1325121340881913, 0.16656802360567713, 0.6890461609582894, 0.16577216582048093, 0.2100314498800595, 0.19485337800373648, 0.19651258136646765, 0.20219403055362895, 0.4556149528909105, 0.2896298121605245, 0.7608086508400249, 0.15349493438716832, 0.1860128464122176, 0.1956307805175287, 0.19371052419518053, 0.18461268797755248, 0.1886681091010851, 0.18105935060218403, 0.18299852933154326, 0.19561420345739, 0.19217666691164248, 0.07954790237956932, 0.0793631158239193, 0.08116056650878944, 0.07740890105654163, 0.08235594266915691, 0.07978240558651928, 0.08805216834107144, 0.0770933486716684, 0.08630732352007253]}, "mutation_prompt": null}
{"id": "ba06adae-b981-4d1e-ad48-506fd72b6821", "solution": "import numpy as np\n\nclass HybridDEARW:\n    def __init__(self, budget, dim, pop_size=20, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Differential Evolution mutation\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, self.population[i])\n\n                # Adaptive Random Walk for exploration\n                if np.random.rand() < 0.1:  # 10% chance to perform a random walk\n                    step_size = np.random.rand() * (self.upper_bound - self.lower_bound) * 0.1\n                    trial += np.random.uniform(-step_size, step_size, self.dim)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < func(self.population[i]):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n                \n                if evaluations >= self.budget:\n                    break\n\n        return self.best_solution", "name": "HybridDEARW", "description": "Hybrid Differential Evolution with Adaptive Random Walk for enhanced exploration and exploitation in constrained search spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa4f801-1cb4-47ee-8aee-c9ee12945212", "metadata": {"aucs": [0.847763134927341, 0.8412744423483656, 0.8343276821867949, 0.8308338653527252, 0.8283407296709999, 0.8605961824216072, 0.8358617834359272, 0.843087182904185, 0.8304661728350647, 0.7039300354648192, 0.7170011529962892, 0.6990761947607758, 0.6755305750880771, 0.6187284394077621, 0.6954946294448693, 0.6927377331352953, 0.7183552499493806, 0.7046232257431709, 0.12763057418674884, 0.25074182611621376, 0.18096769932893353, 0.12000987206149694, 0.29605277809852093, 0.15575978470908758, 0.2296570875129409, 0.19904987181910927, 0.11191649403618031, 0.09821553148682216, 0.11012952566411205, 0.1265993974544023, 0.11104899650677469, 0.1117291670967745, 0.11720386923162318, 0.11967908066066268, 0.13136347517792324, 0.09792772856692589, 0.922283476928988, 0.8924455483854883, 0.8856316062295579, 0.8321492719952598, 0.9396125588976288, 0.8996394604191955, 0.9185148613574382, 0.9291297938142066, 0.7514855063498255, 0.4198232067550721, 0.3164389655128095, 0.3449268354722641, 0.31484662138378894, 0.36825580843513983, 0.29864028344489046, 0.421794234463694, 0.2625002995796988, 0.26792037806924596, 0.726252207150043, 0.3597869912675523, 0.8188168169891026, 0.8482798654502036, 0.2672567835865318, 0.35076318348106983, 0.820222870841694, 0.3490582232978633, 0.8437908721381497, 0.1574248394936889, 0.16477794529858403, 0.1410725621090516, 0.16393548423522386, 0.13530592306966627, 0.24044359420417327, 0.15625613169734975, 0.18717472556021464, 0.16441237240401096, 0.6083201356852876, 0.22220212990382104, 0.1840168074061902, 0.20121167869548073, 0.15845398755518492, 0.29705061391015875, 0.1703773986548256, 0.1804308308345708, 0.13071757102385073, 0.07092532806264484, 0.20978890114669868, 0.06116643679646172, 0.05998539472842801, 0.11153101495227236, 0.01943626869315007, 0.030087051725134706, 0.10138801948107534, 0.27975096587009474, 0.44692896235535684, 0.17305733645335275, 0.2723327324714213, 0.11339190336111438, 0.30660006153720765, 0.059096463822559064, 0.16943984913674937, 0.18888122734318624, 0.5384127473767126, 0.20214372806391, 0.12220760501441619, 0.14935665274800336, 0.25285173135093975, 0.11245139104332624, 0.18046793079387535, 0.17107743836050504, 0.22094922040948184, 0.10397326347049507, 0.23602667346877637, 0.33436979521913357, 0.2355937731245321, 0.26556776853419484, 0.24547679431873093, 0.22547329837080854, 0.2821417160649953, 0.13478939994905215, 0.25825015188237366, 0.5575124465854844, 0.6046946198599107, 0.5848460104098161, 0.4875307093204354, 0.7438248745192868, 0.6530370566602939, 0.758720301146231, 0.6679140031756422, 0.5424851991112092, 0.1171603961828458, 0.10369196490650956, 0.09793142476006145, 0.106990157877485, 0.11285590862981498, 0.10174542483329552, 0.08905847360534702, 0.10938099657395339, 0.10816950907241629, 0.15248314439374555, 0.14596937668132504, 0.1646439686577813, 0.15408584484156596, 0.17175804854295695, 0.11858085775193872, 0.22118239974541143, 0.12980596065861283, 0.18102291245340008, 0.41172024071153823, 0.4133789510353869, 0.46202764074712255, 0.44058863190287867, 0.45481073167645325, 0.4557582975187615, 0.4439898665978257, 0.5646762893451541, 0.4496275320953552, 0.3022092403361808, 0.38704358661513993, 0.21487953224869982, 0.4029774464582757, 0.2765110614730185, 0.3394683698959441, 0.35049674285673715, 0.4090127178359909, 0.3211902281064968, 0.19366673519051836, 0.2034369592312637, 0.18167497517490405, 0.19315976244355904, 0.18513126549131254, 0.1806052616101148, 0.19176157574418307, 0.1727123277168563, 0.19898061633565922, 0.22182210762939014, 0.44526938541200567, 0.20526405583809226, 0.23010533152236345, 0.20922735644616575, 0.5684646098271848, 0.2070599014227893, 0.19931398204292983, 0.20342580756878603, 0.7841119114928707, 0.16224020385078897, 0.151455602001907, 0.18611974348652616, 0.17631258097808933, 0.13035442183499912, 0.1325121340881913, 0.16656802360567713, 0.6890461609582894, 0.16577216582048093, 0.2100314498800595, 0.19485337800373648, 0.19651258136646765, 0.20219403055362895, 0.4556149528909105, 0.2896298121605245, 0.7608086508400249, 0.15349493438716832, 0.1860128464122176, 0.1956307805175287, 0.19371052419518053, 0.18461268797755248, 0.1886681091010851, 0.18105935060218403, 0.18299852933154326, 0.19561420345739, 0.19217666691164248, 0.07954790237956932, 0.0793631158239193, 0.08116056650878944, 0.07740890105654163, 0.08235594266915691, 0.07978240558651928, 0.08805216834107144, 0.0770933486716684, 0.08630732352007253]}, "mutation_prompt": null}
