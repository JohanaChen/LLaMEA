{"id": "c61e4f35-49de-4cab-9c0b-0103d6b280f6", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.inertia_weight = 0.7\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(42)\n        num_particles = self.population_size\n        num_dimensions = self.dim\n        budget = self.budget\n\n        # Initialize particle positions and velocities\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, num_dimensions))\n        particle_velocities = np.random.uniform(-1, 1, (num_particles, num_dimensions))\n        personal_best_positions = particle_positions.copy()\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = num_particles\n\n        while evaluations < budget:\n            # Update particles\n            for i in range(num_particles):\n                r1, r2 = np.random.rand(), np.random.rand()\n                particle_velocities[i] = (self.inertia_weight * particle_velocities[i] +\n                                          self.cognitive_weight * r1 * (personal_best_positions[i] - particle_positions[i]) +\n                                          self.social_weight * r2 * (global_best_position - particle_positions[i]))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                score = func(particle_positions[i])\n                evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_positions[i] = particle_positions[i]\n                    personal_best_scores[i] = score\n                    if score < global_best_score:\n                        global_best_score = score\n                        global_best_position = particle_positions[i]\n\n            # Apply Differential Evolution\n            for i in range(num_particles):\n                if evaluations >= budget:\n                    break\n                idxs = [idx for idx in range(num_particles) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant_vector = personal_best_positions[a] + self.F * (personal_best_positions[b] - personal_best_positions[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(personal_best_positions[i])\n                for d in range(num_dimensions):\n                    if np.random.rand() < self.CR or d == np.random.randint(num_dimensions):\n                        trial_vector[d] = mutant_vector[d]\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n            # Local Search (Optional, improve intensification)\n            if evaluations < budget:\n                local_search_idx = np.random.randint(num_particles)\n                local_search_vector = global_best_position + np.random.normal(0, 0.1, num_dimensions)\n                local_search_vector = np.clip(local_search_vector, self.lower_bound, self.upper_bound)\n                local_search_score = func(local_search_vector)\n                evaluations += 1\n                if local_search_score < global_best_score:\n                    global_best_score = local_search_score\n                    global_best_position = local_search_vector\n\n        return global_best_position", "name": "HybridPSO_DE", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Evolution and Local Search to balance exploration and exploitation across diverse optimization landscapes.", "configspace": "", "generation": 0, "fitness": 0.3942378561512085, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8030709307566368, 0.8030709307566368, 0.8030709307566368, 0.7848515114812666, 0.7848515114812666, 0.7848515114812666, 0.7766972508483689, 0.7766972508483689, 0.7766972508483689, 0.5431872267803484, 0.5431872267803484, 0.5431872267803484, 0.5590534633475992, 0.5590534633475992, 0.5590534633475992, 0.5336915058889339, 0.5336915058889339, 0.5336915058889339, 0.1410107299404877, 0.1410107299404877, 0.1410107299404877, 0.2823773675461544, 0.2823773675461544, 0.2823773675461544, 0.1543172205149187, 0.1543172205149187, 0.1543172205149187, 0.23169182760935714, 0.23169182760935714, 0.23169182760935714, 0.1283449619436431, 0.1283449619436431, 0.1283449619436431, 0.128824554731635, 0.128824554731635, 0.128824554731635, 0.7252714360204878, 0.7252714360204878, 0.7252714360204878, 0.9949149826626624, 0.9949149826626624, 0.9949149826626624, 0.9949327603333545, 0.9949327603333545, 0.9949327603333545, 0.5071434706790696, 0.5071434706790696, 0.5071434706790696, 0.5372296245210126, 0.5372296245210126, 0.5372296245210126, 0.4971288984700125, 0.4971288984700125, 0.4971288984700125, 0.7785723200241054, 0.7785723200241054, 0.7785723200241054, 0.7701968706469003, 0.7701968706469003, 0.7701968706469003, 0.7609205649993078, 0.7609205649993078, 0.7609205649993078, 0.38248049539238005, 0.38248049539238005, 0.38248049539238005, 0.3995613764095668, 0.3995613764095668, 0.3995613764095668, 0.33003217812459096, 0.33003217812459096, 0.33003217812459096, 0.40272671976588925, 0.40272671976588925, 0.40272671976588925, 0.3459543976131363, 0.3459543976131363, 0.3459543976131363, 0.41410306083489745, 0.41410306083489745, 0.41410306083489745, 0.33686099442899153, 0.33686099442899153, 0.33686099442899153, 0.39255458183006153, 0.39255458183006153, 0.39255458183006153, 0.401527377489711, 0.401527377489711, 0.401527377489711, 0.4715900450570736, 0.4715900450570736, 0.4715900450570736, 0.38081769010077404, 0.38081769010077404, 0.38081769010077404, 0.46559816484905836, 0.46559816484905836, 0.46559816484905836, 0.10693052356148824, 0.10693052356148824, 0.10693052356148824, 0.24226326199626635, 0.24226326199626635, 0.24226326199626635, 0.14148495591328591, 0.14148495591328591, 0.14148495591328591, 0.3115118427837492, 0.3115118427837492, 0.3115118427837492, 0.3016201101774484, 0.3016201101774484, 0.3016201101774484, 0.2877143833622485, 0.2877143833622485, 0.2877143833622485, 0.7075226889132558, 0.7075226889132558, 0.7075226889132558, 0.6943785639902964, 0.6943785639902964, 0.6943785639902964, 0.7120453037898113, 0.7120453037898113, 0.7120453037898113, 0.13194235515014552, 0.13194235515014552, 0.13194235515014552, 0.13380162435261622, 0.13380162435261622, 0.13380162435261622, 0.16314136124953693, 0.16314136124953693, 0.16314136124953693, 0.5454616136137691, 0.5454616136137691, 0.5454616136137691, 0.4717640976032823, 0.4717640976032823, 0.4717640976032823, 0.19213880025773866, 0.19213880025773866, 0.19213880025773866, 0.4371222146614576, 0.4371222146614576, 0.4371222146614576, 0.40344358862989416, 0.40344358862989416, 0.40344358862989416, 0.42411676116685004, 0.42411676116685004, 0.42411676116685004, 0.3487353602403991, 0.3487353602403991, 0.3487353602403991, 0.3454889650304517, 0.3454889650304517, 0.3454889650304517, 0.19828589950240094, 0.19828589950240094, 0.19828589950240094, 0.2688756032746289, 0.2688756032746289, 0.2688756032746289, 0.20377907865242062, 0.20377907865242062, 0.20377907865242062, 0.21813431426747998, 0.21813431426747998, 0.21813431426747998, 0.4500736546554185, 0.4500736546554185, 0.4500736546554185, 0.21081256289518724, 0.21081256289518724, 0.21081256289518724, 0.19303013588051365, 0.19303013588051365, 0.19303013588051365, 0.8875064140726838, 0.8875064140726838, 0.8875064140726838, 0.15810922178190467, 0.15810922178190467, 0.15810922178190467, 0.19855204708761887, 0.19855204708761887, 0.19855204708761887, 0.16882625032649445, 0.16882625032649445, 0.16882625032649445, 0.7434010364282235, 0.7434010364282235, 0.7434010364282235, 0.16886706790421702, 0.16886706790421702, 0.16886706790421702, 0.19249082519425598, 0.19249082519425598, 0.19249082519425598, 0.1959644403710803, 0.1959644403710803, 0.1959644403710803, 0.2004806239883038, 0.2004806239883038, 0.2004806239883038, 0.09374706300759994, 0.09374706300759994, 0.09374706300759994, 0.08745176841758551, 0.08745176841758551, 0.08745176841758551, 0.08687269709261014, 0.08687269709261014, 0.08687269709261014]}, "mutation_prompt": null}
{"id": "36288082-cd3c-4255-a057-bacbe6cf5673", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.inertia_weight = 0.7\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(42)\n        num_particles = self.population_size\n        num_dimensions = self.dim\n        budget = self.budget\n\n        # Initialize particle positions and velocities\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, num_dimensions))\n        particle_velocities = np.random.uniform(-1, 1, (num_particles, num_dimensions))\n        personal_best_positions = particle_positions.copy()\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_indices = np.argsort(personal_best_scores)[:3]\n        global_best_positions = personal_best_positions[global_best_indices]\n        global_best_scores = personal_best_scores[global_best_indices]\n\n        evaluations = num_particles\n\n        while evaluations < budget:\n            # Update particles\n            for i in range(num_particles):\n                r1, r2 = np.random.rand(), np.random.rand()\n                social_component = sum((self.social_weight / 3) * r2 * (gbp - particle_positions[i]) for gbp in global_best_positions)\n                particle_velocities[i] = (self.inertia_weight * particle_velocities[i] +\n                                          self.cognitive_weight * r1 * (personal_best_positions[i] - particle_positions[i]) +\n                                          social_component)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                score = func(particle_positions[i])\n                evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_positions[i] = particle_positions[i]\n                    personal_best_scores[i] = score\n                    if score < global_best_scores[-1]:\n                        global_best_scores[-1] = score\n                        global_best_positions[-1] = particle_positions[i]\n                        sort_idx = np.argsort(global_best_scores)\n                        global_best_scores, global_best_positions = global_best_scores[sort_idx], global_best_positions[sort_idx]\n\n            # Apply Differential Evolution\n            for i in range(num_particles):\n                if evaluations >= budget:\n                    break\n                idxs = [idx for idx in range(num_particles) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant_vector = personal_best_positions[a] + self.F * (personal_best_positions[b] - personal_best_positions[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(personal_best_positions[i])\n                for d in range(num_dimensions):\n                    if np.random.rand() < self.CR or d == np.random.randint(num_dimensions):\n                        trial_vector[d] = mutant_vector[d]\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n                    if trial_score < global_best_scores[-1]:\n                        global_best_scores[-1] = trial_score\n                        global_best_positions[-1] = trial_vector\n                        sort_idx = np.argsort(global_best_scores)\n                        global_best_scores, global_best_positions = global_best_scores[sort_idx], global_best_positions[sort_idx]\n\n            # Local Search (Optional, improve intensification)\n            if evaluations < budget:\n                local_search_idx = np.random.randint(num_particles)\n                local_search_vector = global_best_positions[0] + np.random.normal(0, 0.1, num_dimensions)\n                local_search_vector = np.clip(local_search_vector, self.lower_bound, self.upper_bound)\n                local_search_score = func(local_search_vector)\n                evaluations += 1\n                if local_search_score < global_best_scores[0]:\n                    global_best_scores[0] = local_search_score\n                    global_best_positions[0] = local_search_vector\n\n        return global_best_positions[0]", "name": "HybridPSO_DE", "description": "Enhanced Hybrid PSO-DE with Dynamic Parameters and Multi-Leader Cooperation for accelerated convergence and diversity retention.", "configspace": "", "generation": 1, "fitness": 0.4020727254532411, "feedback": "", "error": "", "parent_id": "c61e4f35-49de-4cab-9c0b-0103d6b280f6", "metadata": {"aucs": [0.825119060326571, 0.825119060326571, 0.825119060326571, 0.8130143710012168, 0.8130143710012168, 0.8130143710012168, 0.7865059008857636, 0.7865059008857636, 0.7865059008857636, 0.4729847032661666, 0.4729847032661666, 0.4729847032661666, 0.5663221076486663, 0.5663221076486663, 0.5663221076486663, 0.5183452252056938, 0.5183452252056938, 0.5183452252056938, 0.3014181366042401, 0.3014181366042401, 0.3014181366042401, 0.12022817693795096, 0.12022817693795096, 0.12022817693795096, 0.13491733234143433, 0.13491733234143433, 0.13491733234143433, 0.12633519834884333, 0.12633519834884333, 0.12633519834884333, 0.11110832040399454, 0.11110832040399454, 0.11110832040399454, 0.10784099061368069, 0.10784099061368069, 0.10784099061368069, 0.971248167290619, 0.971248167290619, 0.971248167290619, 0.9905833580621564, 0.9905833580621564, 0.9905833580621564, 0.9929066881973868, 0.9929066881973868, 0.9929066881973868, 0.5833552586631335, 0.5833552586631335, 0.5833552586631335, 0.5946135295410119, 0.5946135295410119, 0.5946135295410119, 0.5997359069245345, 0.5997359069245345, 0.5997359069245345, 0.827112296188068, 0.827112296188068, 0.827112296188068, 0.2141057347175932, 0.2141057347175932, 0.2141057347175932, 0.8166972789523704, 0.8166972789523704, 0.8166972789523704, 0.4735352265617776, 0.4735352265617776, 0.4735352265617776, 0.4743204029024958, 0.4743204029024958, 0.4743204029024958, 0.45237017757408426, 0.45237017757408426, 0.45237017757408426, 0.48553343643913305, 0.48553343643913305, 0.48553343643913305, 0.13101179146212016, 0.13101179146212016, 0.13101179146212016, 0.5208993704100215, 0.5208993704100215, 0.5208993704100215, 0.42607050210306985, 0.42607050210306985, 0.42607050210306985, 0.4564262383066523, 0.4564262383066523, 0.4564262383066523, 0.4712419479043648, 0.4712419479043648, 0.4712419479043648, 0.47863983375133357, 0.47863983375133357, 0.47863983375133357, 0.4600728025464398, 0.4600728025464398, 0.4600728025464398, 0.5800132654285006, 0.5800132654285006, 0.5800132654285006, 0.08191269425138725, 0.08191269425138725, 0.08191269425138725, 0.3311968955350256, 0.3311968955350256, 0.3311968955350256, 0.13076388367192526, 0.13076388367192526, 0.13076388367192526, 0.3606838552336692, 0.3606838552336692, 0.3606838552336692, 0.36267337314468795, 0.36267337314468795, 0.36267337314468795, 0.29779703359529175, 0.29779703359529175, 0.29779703359529175, 0.7382371414318295, 0.7382371414318295, 0.7382371414318295, 0.7008432752367162, 0.7008432752367162, 0.7008432752367162, 0.7113675577311922, 0.7113675577311922, 0.7113675577311922, 0.13541361093333237, 0.13541361093333237, 0.13541361093333237, 0.16021015628641888, 0.16021015628641888, 0.16021015628641888, 0.12808811522835672, 0.12808811522835672, 0.12808811522835672, 0.18688477270323323, 0.18688477270323323, 0.18688477270323323, 0.18207194570829066, 0.18207194570829066, 0.18207194570829066, 0.17004082781798735, 0.17004082781798735, 0.17004082781798735, 0.48786993756539565, 0.48786993756539565, 0.48786993756539565, 0.471748367832726, 0.471748367832726, 0.471748367832726, 0.48360659215878854, 0.48360659215878854, 0.48360659215878854, 0.29850221807774047, 0.29850221807774047, 0.29850221807774047, 0.4174772541792494, 0.4174772541792494, 0.4174772541792494, 0.39985511131840235, 0.39985511131840235, 0.39985511131840235, 0.22682151014415408, 0.22682151014415408, 0.22682151014415408, 0.22810253589503138, 0.22810253589503138, 0.22810253589503138, 0.21847198235745713, 0.21847198235745713, 0.21847198235745713, 0.24062245729833942, 0.24062245729833942, 0.24062245729833942, 0.21633535581579133, 0.21633535581579133, 0.21633535581579133, 0.45874562272953445, 0.45874562272953445, 0.45874562272953445, 0.8739120880624565, 0.8739120880624565, 0.8739120880624565, 0.19558676062792268, 0.19558676062792268, 0.19558676062792268, 0.8175569961455811, 0.8175569961455811, 0.8175569961455811, 0.16811562439713468, 0.16811562439713468, 0.16811562439713468, 0.16590990171166942, 0.16590990171166942, 0.16590990171166942, 0.16663955379570894, 0.16663955379570894, 0.16663955379570894, 0.18597631244172685, 0.18597631244172685, 0.18597631244172685, 0.19699852217648617, 0.19699852217648617, 0.19699852217648617, 0.19240127578564747, 0.19240127578564747, 0.19240127578564747, 0.0945778252913142, 0.0945778252913142, 0.0945778252913142, 0.09042127377415021, 0.09042127377415021, 0.09042127377415021, 0.09016327703051707, 0.09016327703051707, 0.09016327703051707]}, "mutation_prompt": null}
