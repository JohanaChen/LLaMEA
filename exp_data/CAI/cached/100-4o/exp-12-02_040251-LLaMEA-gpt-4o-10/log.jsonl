{"id": "358e5b35-6d50-4afe-a723-fafafa8a2a1c", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 2.0  # Cognitive component\n        self.c2 = 2.0  # Social component\n        self.w = 0.7   # Inertia weight\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.population)\n        self.pbest_scores = np.full(self.pop_size, float('inf'))\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_score = float('inf')\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                # Evaluate current population\n                if self.eval_count < self.budget:\n                    fitness = func(self.population[i])\n                    self.eval_count += 1\n                    if fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = fitness\n                        self.pbest_positions[i] = self.population[i]\n                        if fitness < self.gbest_score:\n                            self.gbest_score = fitness\n                            self.gbest_position = self.population[i]\n\n            # Differential Evolution strategy\n            for i in range(self.pop_size):\n                if self.eval_count >= self.budget:\n                    break\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(self.population[a] + self.mutation_factor * (self.population[b] - self.population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.eval_count += 1\n                if trial_fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = trial_fitness\n                    self.pbest_positions[i] = trial\n                    if trial_fitness < self.gbest_score:\n                        self.gbest_score = trial_fitness\n                        self.gbest_position = trial\n\n            # Particle Swarm Optimization strategy\n            for i in range(self.pop_size):\n                if self.eval_count >= self.budget:\n                    break\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_component = self.c1 * r1 * (self.pbest_positions[i] - self.population[i])\n                social_component = self.c2 * r2 * (self.gbest_position - self.population[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_component + social_component\n                self.population[i] = np.clip(self.population[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n        \n        return self.gbest_position, self.gbest_score", "name": "HybridDEPSO", "description": "A hybrid Differential Evolution and Particle Swarm Optimization algorithm that dynamically adjusts exploration and exploitation using self-adaptive strategies to efficiently utilize the evaluation budget.", "configspace": "", "generation": 0, "fitness": 0.17185319205905397, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.4453366133360991, 0.39887945672807823, 0.41518430454286603, 0.43273815978357466, 0.18177117699631717, 0.16070033589155375, 0.17973418636527294, 0.4769710651343193, 0.5101511036621442, 9.999999999998899e-05, 0.017149351649410005, 0.049418302328015806, 9.999999999998899e-05, 0.027968671143959956, 0.018872246376333335, 0.015279131003050672, 0.03880632607850443, 0.12829596147687938, 0.10487660848429314, 0.11125488229517921, 0.11314822296725702, 0.08565509223595913, 0.0659123503524186, 0.12493263238123276, 0.08705655066681395, 0.045037789284887, 0.11238628027299202, 0.11875129532771667, 0.0835205785799159, 0.09039252271502407, 0.09575101511818518, 0.10674479156957217, 0.08147000343084931, 0.09262943456940975, 0.10368342218766935, 0.080501677359052, 0.9886156350434412, 0.9894836082021488, 0.9923234767761397, 0.09984419305339709, 0.9909132038105146, 0.9904753973243384, 0.9939377626990572, 0.9919081554686132, 0.992678118227863, 0.058407549372375245, 0.1606166709551844, 0.1080199269778841, 0.20097163068439117, 0.1478233642995863, 0.20773649059353816, 0.08795772892632647, 0.08269581066112863, 0.0871029574725597, 0.191099274208124, 0.18876778570852648, 0.19014033375364536, 0.18960780205840988, 0.1829109517930989, 0.15057316468079696, 0.12612196945319443, 0.20528978390097996, 0.13897125611910632, 0.15619278762445898, 0.11666556085179158, 0.1460722436303067, 0.11945004764075706, 0.15632104110511735, 0.1342995424643555, 0.11023718682550077, 0.13149760038528369, 0.14551971318230605, 0.12178287819929756, 0.022109353385573405, 0.12453252918463309, 0.09952719478580163, 0.11294748972137625, 0.11544842735359684, 0.10529736695611425, 0.02480255047861979, 0.16209782771096126, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012456963568961976, 0.03254535030714156, 0.0008133164056053355, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03154672720952545, 0.046229418704974656, 0.05919447637230646, 0.05797998104451274, 0.028552416059451247, 0.04661371069017184, 0.06428371285805912, 0.00901731499701508, 0.04627320049237915, 0.0409841439128128, 0.00960189569097225, 0.04691559164909287, 9.999999999998899e-05, 0.02959466614477191, 0.027449264908524285, 0.052043306221716046, 0.030013787119043456, 0.040042000398238464, 0.06840920756462487, 0.029764563979246317, 0.06507647007269446, 9.999999999998899e-05, 0.004901859621755822, 0.0032265075279427347, 9.999999999998899e-05, 0.04917073450066256, 0.05539137486686374, 0.38301456421785696, 0.4014270252238582, 0.38078608217764487, 0.18168821338051733, 0.3573217595452842, 0.349360327259837, 0.3873125018665208, 0.3023428653926813, 0.3391058532429949, 0.10253945239251283, 0.08005649708814366, 0.07645428323883519, 0.08510146387613582, 0.10043748743451031, 0.09839093236912944, 0.07974673539331545, 0.08673412148739335, 0.09467990657094105, 0.15930201389046472, 0.17604400699731015, 0.15323954198871437, 0.23039025834525906, 0.2064766671456465, 0.15671199380485124, 0.2421518131596998, 0.2309305320619408, 0.18565648156175618, 0.19971294274646811, 0.2642084245868518, 0.22890977861676243, 0.24885122391475212, 0.22906724917465304, 0.20747846074508702, 0.29601698468837234, 0.29317328237569185, 0.182656892976076, 0.1847870241212335, 0.17711535457409044, 0.19026065655776148, 0.17753910184730926, 0.16690594369215273, 0.17759928223116783, 0.16610030558669697, 0.201708625275563, 0.18912437292648743, 0.19086674107854018, 0.17400899985651963, 0.18982690132597924, 0.17063746407866454, 0.19672163651777774, 0.17605548304420315, 0.19065037316040168, 0.16898475164139815, 0.18807086666336592, 0.18393859974607185, 0.16110468073041606, 0.1683308846896383, 0.18115990901764223, 0.18769579835390782, 0.2012048955731377, 0.17866701479731362, 0.17935818881662036, 0.16899102773193153, 0.18152045736420408, 0.16552097709212799, 0.12422473081540342, 0.18737150821992343, 0.1926322464034369, 0.19276435676996284, 0.10849041818744898, 0.1685054311720392, 0.18193334146444573, 0.14814239455437206, 0.1118642109198178, 0.1620779317011729, 0.10904896122579155, 0.2105898268009122, 0.19418401626023574, 0.1971071244760979, 0.1840295525866944, 0.15980795228156586, 0.18352718025205228, 0.19671510084029986, 0.2113717264933903, 0.1832344317229455, 0.198354622889928, 0.18401875084111785, 0.27271279680754146, 0.19108276920683165, 0.18928293545696984, 0.07164315941192911, 0.08079780357489386, 0.0755006163427957, 0.0731002606239497, 0.07524004427720121, 0.062244657951231463, 0.06896201777920541, 0.0738028285158735, 0.0652512572153564]}, "mutation_prompt": null}
{"id": "b56a2693-c03a-4893-bf2d-0c609a9fd769", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 2.0  # Cognitive component\n        self.c2 = 2.0  # Social component\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.population)\n        self.pbest_scores = np.full(self.pop_size, float('inf'))\n        self.gbest_position = np.zeros(self.dim)\n        self.gbest_score = float('inf')\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            w = self.w_max - ((self.w_max - self.w_min) * (self.eval_count / self.budget))  # Adaptive inertia weight\n            for i in range(self.pop_size):\n                if self.eval_count < self.budget:\n                    fitness = func(self.population[i])\n                    self.eval_count += 1\n                    if fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = fitness\n                        self.pbest_positions[i] = self.population[i]\n                        if fitness < self.gbest_score:\n                            self.gbest_score = fitness\n                            self.gbest_position = self.population[i]\n\n            # Differential Evolution strategy\n            for i in range(self.pop_size):\n                if self.eval_count >= self.budget:\n                    break\n                adapt_mutation_factor = self.mutation_factor * (1 - (self.eval_count / self.budget))\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(self.population[a] + adapt_mutation_factor * (self.population[b] - self.population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.eval_count += 1\n                if trial_fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = trial_fitness\n                    self.pbest_positions[i] = trial\n                    if trial_fitness < self.gbest_score:\n                        self.gbest_score = trial_fitness\n                        self.gbest_position = trial\n\n            # Particle Swarm Optimization strategy\n            for i in range(self.pop_size):\n                if self.eval_count >= self.budget:\n                    break\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_component = self.c1 * r1 * (self.pbest_positions[i] - self.population[i])\n                social_component = self.c2 * r2 * (self.gbest_position - self.population[i])\n                self.velocities[i] = w * self.velocities[i] + cognitive_component + social_component\n                self.population[i] = np.clip(self.population[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n        \n        return self.gbest_position, self.gbest_score", "name": "HybridDEPSO", "description": "An enhanced HybridDEPSO algorithm incorporating adaptive weights and mutation factor adjustments to improve convergence and solution diversity.", "configspace": "", "generation": 1, "fitness": 0.16671469625168564, "feedback": "", "error": "", "parent_id": "358e5b35-6d50-4afe-a723-fafafa8a2a1c", "metadata": {"aucs": [0.46867840891756973, 0.3958041535757729, 0.40948646305756675, 0.48536882661719827, 0.18060807205025198, 0.18049770507798457, 0.17556535706747567, 0.1709200512273482, 0.4796938627594187, 0.036520447644066145, 9.999999999998899e-05, 9.999999999998899e-05, 0.026607266573637545, 0.019391982455361556, 0.020229740158496656, 0.15351844740252873, 0.02727460056981068, 0.09457847375733686, 0.08145415957935442, 0.10230079976142492, 0.08562374536486128, 0.08133171791612581, 0.07954467139490351, 0.09931974217123918, 0.0890549187322609, 0.04201409887825269, 0.09452729814745875, 0.07430241623070177, 0.07033758617520092, 0.0914358619829545, 0.08353849315170359, 0.0405262713843807, 0.08756096493423904, 0.09529186567921932, 0.096356479269744, 0.0713440751716049, 0.9917512026227846, 0.9887646280724756, 0.9923204025032856, 0.09985053997377158, 0.9909333641902355, 0.9904840614850138, 0.993983522136573, 0.9925849089282445, 0.9926028410555238, 0.05822707446794395, 0.21372470268645904, 0.2858256528726152, 0.15852871000850954, 0.1963664918694944, 0.13726116262208465, 0.2102144721594874, 0.086610149723923, 9.999999999998899e-05, 0.1691837020713165, 0.16072723720552873, 0.41735917172615045, 0.22590361204122145, 0.17607512853399898, 0.18104875047039182, 0.12320464273806686, 0.12017436815776417, 0.1423019452016988, 0.10890880567387973, 0.07656786004985783, 0.11303882759362205, 0.09581312845094492, 0.07808103278919554, 0.06412046132143134, 0.09061542218102792, 9.999999999998899e-05, 0.09905907507640355, 0.0961554424122405, 0.010134555610670004, 0.12246408711635837, 0.07510493751523295, 0.053472935413876765, 0.09422404606181312, 0.10638947486513373, 0.026113198036820218, 0.12614212623476195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003024807905384064, 0.03197053286121576, 9.999999999998899e-05, 0.009909232792079226, 9.999999999998899e-05, 9.999999999998899e-05, 0.04934458701629518, 0.01422933063849574, 0.05175067949470069, 0.022546578862765787, 9.999999999998899e-05, 0.007568550345571801, 0.009442897008658857, 0.036087879581216065, 0.07068218313280228, 0.010152069108916084, 9.999999999998899e-05, 0.020374072435956236, 0.03742096704393394, 0.02529644252851726, 0.031587633619571176, 0.03824222463256888, 9.999999999998899e-05, 0.03214652950924324, 0.005785881617537791, 9.999999999998899e-05, 0.078901682037404, 9.999999999998899e-05, 0.0032662420208584564, 0.003051971515431573, 0.07697746544841033, 0.03804908544953867, 0.0465458490360241, 0.34797059072331493, 0.3517575040234622, 0.34238419090608196, 0.36180202054553945, 0.37410375602734347, 0.3539727901596865, 0.3763708643819952, 0.34221510532355204, 0.34567436278605335, 0.0973922989454854, 0.09214957635657572, 0.048466898597602115, 0.08265557976780857, 0.0891056842569784, 0.10080469990325092, 0.1016550239410402, 0.05541296719759625, 0.09254961516077287, 0.18976059393008737, 0.1424216747626701, 0.12592166310853758, 0.15285311126351664, 0.141221626090684, 0.15238873271554731, 0.13905659636908108, 0.13630713781683568, 0.22099170020554382, 0.20037112797802714, 0.2502145352252484, 0.21076968062068013, 0.22718693859143013, 0.255950620150905, 0.1907411301981473, 0.2232718591226338, 0.23618201566876018, 0.26482604067305315, 0.18411163658087082, 0.19108225576775628, 0.15398031144013224, 0.16424242455662985, 0.11300913886207253, 0.14164217346957197, 0.204443569896808, 0.20522263462873924, 0.1479229780136868, 0.20610478171965219, 0.16083085153021381, 0.1768664367982281, 0.17343725103460494, 0.1700511683718774, 0.1703938884147287, 0.19977021239497306, 0.17398159861011153, 0.1857887778853623, 0.19381381233486006, 0.1745158825016644, 0.17815987426858937, 0.16379191361123469, 0.2393068294049555, 0.16874605981705793, 0.19405562658125264, 0.18112394065242865, 0.23304477465256235, 0.451154060320327, 0.16184874001345084, 0.15053460801307206, 0.17488095624023048, 0.18670946121137755, 0.20482794164199358, 0.15312383559766407, 0.18400943204669307, 0.14467101735958499, 0.15760849536719757, 0.1459415528421366, 0.15918235102656986, 0.10809809670799442, 0.23310270256699472, 0.17698369440469763, 0.1947920975200087, 0.18518819137150844, 0.19293778468230494, 0.18118052107631, 0.18611161759297157, 0.210302555185232, 0.1719960068075267, 0.1991357456208207, 0.1840261761942048, 0.17439440127455907, 0.19778327842284993, 0.1786781315703656, 0.07229916052158691, 0.07280688645178579, 0.07811292911049239, 0.07028607735252901, 0.07954954177811435, 0.06504100974840854, 0.056673518754772556, 0.0627317397447632, 0.06118902163330053]}, "mutation_prompt": null}
