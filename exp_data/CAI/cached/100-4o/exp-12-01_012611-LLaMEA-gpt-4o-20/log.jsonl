{"id": "87195c0e-f308-4390-b491-dc247b246dbe", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.positions = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.mutation_factor = 0.8  # DE mutation factor\n        self.crossover_rate = 0.7  # DE crossover probability\n        \n    def __call__(self, func):\n        evaluations = 0\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Evaluate the particle\n                score = func(self.positions[i])\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.positions[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.positions[i]\n                    \n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            for i in range(self.population_size):\n                inertia = self.w * self.velocity[i]\n                cognitive = self.c1 * r1 * (self.personal_best_positions[i] - self.positions[i])\n                social = self.c2 * r2 * (self.global_best_position - self.positions[i])\n                self.velocity[i] = inertia + cognitive + social\n                self.positions[i] = np.clip(self.positions[i] + self.velocity[i], -5, 5)\n\n            # Apply DE mutation and crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.positions[indices]\n                mutant = np.clip(a + self.mutation_factor * (b - c), -5, 5)\n                trial = np.array([\n                    mutant[j] if np.random.rand() < self.crossover_rate else self.positions[i][j]\n                    for j in range(self.dim)\n                ])\n                \n                # Evaluate the trial vector\n                trial_score = func(trial)\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n                # Selection\n                if trial_score < self.personal_best_scores[i]:\n                    self.positions[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    if trial_score < self.global_best_score:\n                        self.global_best_score = trial_score\n                        self.global_best_position = trial\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSODE", "description": "Hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for adaptive exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.26131901796726115, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6709103878102407, 0.7721650895203822, 0.7563829638984045, 0.7408100407992589, 0.7530524648355528, 0.6820024495893022, 0.6823366814397752, 0.6956282295486116, 0.7259461445221884, 0.3856366319549931, 0.5115851453274484, 0.3856450267501492, 0.45262053602366936, 0.4603833555287865, 0.5114842042038927, 0.42267163735841917, 0.4222242594603135, 0.4451999281711744, 0.13783319549975315, 0.13306130833108132, 0.1389143381219965, 0.18063555005333165, 0.1374930804323139, 0.13870513263497486, 0.1199706584409882, 0.14229013940577262, 0.13958493949808903, 0.099370054242916, 0.10762737873539541, 0.0943543843706629, 0.09334585343837665, 0.11887459800989342, 0.10561773823945508, 0.1262440981247146, 0.11864088392562666, 0.13424357308975865, 0.9448612292468207, 0.979107575906695, 0.9436843061554041, 0.9508763210915016, 0.9741890830779882, 0.9484028665119091, 0.9522797815869679, 0.9519621467774848, 0.9496573225058169, 0.31257400401381763, 0.37776496142108473, 0.3343976901903668, 0.3220582214748059, 0.3820043687704676, 0.19547101282103196, 0.44618352962313956, 0.36252885961430004, 0.3925343692561135, 0.5058718491386618, 0.21921437850848569, 0.21536168440640546, 0.5838257703457053, 0.20058079546325103, 0.1698903439874737, 0.22117309651204853, 0.5922682633996024, 0.31084061116166206, 0.12089416910345319, 0.17362875851528492, 0.13568954967480584, 0.1497970583729955, 0.1945091219876367, 0.10486327371961701, 0.16052112424459297, 0.169950150681758, 0.1378375879447492, 0.18355860151116854, 0.17618684457233413, 0.06502097886612468, 0.11299103441436886, 0.1495064647684674, 0.11799977822954677, 0.12222889934584258, 0.17782981224486716, 0.1392436535442877, 0.030451716226610137, 0.0516848768117637, 0.0037652676190380596, 0.060402115183726734, 0.02267944031123026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08865338287011915, 0.1435550194939038, 0.11719110223314566, 0.1035213003558243, 0.0734782334757953, 0.021007446312180433, 0.07220434940844334, 0.09245711160424219, 0.07832730497884532, 0.19552892597104854, 0.009177010133341934, 0.1142655942820382, 0.06609562957307813, 0.06992681838496717, 0.06747016566511554, 0.07215544801134144, 0.17107581339889288, 0.1859135400561548, 0.07063046845332488, 0.08973648173392179, 0.16569292009407166, 0.0450519162925459, 0.09061335475808752, 0.11942762542869456, 0.07605177954644637, 0.07451924326925563, 0.087921511724114, 0.4600268206217897, 0.5020717796570939, 0.4732761527591538, 0.5126623304894724, 0.4648363944760462, 0.4360475876671056, 0.4361043511376538, 0.5057087242290621, 0.5146261216429485, 0.1217571865600281, 0.07338975117817703, 0.11053063139667407, 0.09506493333927213, 0.11375890862764193, 0.11960372519795925, 0.10421071378033009, 0.1384014395061165, 0.10446963856413927, 0.1705912011380034, 0.15625472449642308, 0.2075000417414381, 0.1735430518794312, 0.1737359678073377, 0.19490989960094163, 0.18257622171220456, 0.1633799890488643, 0.1818426577600516, 0.3256507520088532, 0.32044753093119893, 0.3795084391034069, 0.28989453906032103, 0.4010399279395461, 0.23018522371681582, 0.3105084230425731, 0.3535000241522067, 0.23968670529144775, 0.25248164762882686, 0.24400740216820582, 0.23365577572127338, 0.28010457022698754, 0.18857902999967668, 0.24711243866678667, 0.272762741852695, 0.2780459541616631, 0.18731440890287632, 0.20136233670747816, 0.20097835686055487, 0.20667752702629327, 0.20818225051914518, 0.21079160289001753, 0.18406803395166216, 0.215232566591546, 0.18334076408074085, 0.22922466066936398, 0.18420747609901555, 0.20122805972885593, 0.1943004180026926, 0.1886152407027234, 0.19286066989008266, 0.2049003086247183, 0.2041886919415652, 0.18541513265711307, 0.2067189759818152, 0.16471534149447364, 0.19382585020386045, 0.8383697031309243, 0.15698704205209812, 0.2096855687961614, 0.16787572272586293, 0.8309439760434378, 0.15547053650880993, 0.3140867426506485, 0.4006343874707572, 0.2056340269921768, 0.4093550860408003, 0.24279391608101974, 0.20692963842832302, 0.16661866864643016, 0.16657208596503847, 0.14081873808432666, 0.7149025107244384, 0.18476036989860345, 0.1971745101667809, 0.19119456688971936, 0.18262763202037946, 0.17570505220235588, 0.18429333587269714, 0.19001131252531678, 0.2069859554432062, 0.17993876549231214, 0.07427434922716769, 0.08253572106374396, 0.09159178391319733, 0.07567845657326011, 0.08204594548280164, 0.0893124081254908, 0.07463156631627788, 0.07685949801212733, 0.08506125643739704]}, "mutation_prompt": null}
{"id": "8d74e9ac-d277-405c-b874-ad25097b5b4f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.positions = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.w = 0.9  # inertia weight, increased for exploration\n        self.c1 = 2.0  # cognitive coefficient, increased for personal influence\n        self.c2 = 2.0  # social coefficient, increased for global influence\n        self.mutation_factor = 0.9  # DE mutation factor, increased for diversity\n        self.crossover_rate = 0.8  # DE crossover probability, slightly increased\n        \n    def __call__(self, func):\n        evaluations = 0\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                score = func(self.positions[i])\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.positions[i]\n\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            for i in range(self.population_size):\n                inertia = self.w * self.velocity[i]\n                cognitive = self.c1 * r1 * (self.personal_best_positions[i] - self.positions[i])\n                social = self.c2 * r2 * (self.global_best_position - self.positions[i])\n                self.velocity[i] = inertia + cognitive + social\n                self.positions[i] = np.clip(self.positions[i] + self.velocity[i], -5, 5)\n\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.positions[indices]\n                mutant = np.clip(a + self.mutation_factor * (b - c), -5, 5)\n                trial = np.array([\n                    mutant[j] if np.random.rand() < self.crossover_rate else self.positions[i][j]\n                    for j in range(self.dim)\n                ])\n                \n                trial_score = func(trial)\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n                if trial_score < self.personal_best_scores[i]:\n                    self.positions[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    if trial_score < self.global_best_score:\n                        self.global_best_score = trial_score\n                        self.global_best_position = trial\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSODE", "description": "Enhanced Hybrid PSO-DE with dynamic parameters and elitism for improved convergence.", "configspace": "", "generation": 1, "fitness": 0.13285915083804542, "feedback": "", "error": "", "parent_id": "87195c0e-f308-4390-b491-dc247b246dbe", "metadata": {"aucs": [0.19095223468106903, 0.20142764635773325, 0.2658710136703327, 0.25546928617019216, 0.22341227726721702, 0.27859447060197673, 0.16880897889976787, 0.17835113429825744, 0.22468350211746202, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062444560599177246, 0.055335201293356895, 0.03463967118135425, 0.06976028564522019, 0.052205209644348494, 0.044597486877351766, 0.047444470937974104, 0.056684874511977124, 0.05473475045963172, 0.02505490184687309, 0.02495683515685143, 0.05079589189632583, 0.034710523280226724, 0.060009060253787716, 0.04105769080401078, 0.03406614035654765, 0.029624717923829702, 0.042970950441585054, 0.9715469093182825, 0.9820947137010273, 0.9650742199096731, 0.9670705938115882, 0.9809395896789352, 0.9656149870096394, 0.9730817492089578, 0.981519193707064, 0.9664683478249941, 0.11199768391561027, 0.10329969651849513, 0.11130968071583014, 0.09966568933260855, 0.08785387615010387, 0.07536235036806227, 0.08914436186066754, 0.10988168829964984, 0.08154208686138464, 0.10697637825001871, 0.16294020217233884, 0.08121130304811652, 0.15123361541958602, 0.1442397025209875, 0.14765730943436084, 0.15693533714009522, 0.1717097293074743, 0.1808903574798768, 9.999999999998899e-05, 0.0008219203270135589, 0.001860365539663733, 0.019266462134729267, 0.005499234925414931, 0.0013834901397407062, 0.038948700515318735, 9.999999999998899e-05, 0.073641831535046, 0.01188377809087926, 0.021831655064078914, 0.010090190177106106, 0.0001963109340885616, 0.01656483638275863, 0.008235866375472134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033483164270081245, 0.036849918610945, 0.03790274842240271, 0.08199367008899883, 0.031950266330382004, 0.04934289403410619, 0.04361993227068672, 0.030169058244208458, 0.03846031251356219, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006832019949495338, 9.999999999998899e-05, 0.009881929786980215, 0.00012613866037880506, 9.999999999998899e-05, 0.00020765053193283478, 0.007447281941733164, 0.01053270074105328, 0.005860433951551336, 0.2487075796028716, 0.23860036713134736, 0.25905714669196755, 0.19616725240221144, 0.21052798954788898, 0.19228296732823769, 0.21374534238925258, 0.2036096325480775, 0.19699158376112202, 0.06361375010348891, 0.06796813686720393, 0.05530347335753627, 0.07308643030826589, 0.04907751463950916, 0.060719229589912715, 0.05733161303191281, 0.0427081615399989, 0.04413434619997114, 0.13232384441061673, 0.12942418822935908, 0.16329859239027644, 0.16433630780306352, 0.1396131108398424, 0.1632813219528616, 0.13418717070268538, 0.14057668865088147, 0.13989542356105833, 0.15782142642214236, 0.15984809814850465, 0.20012128956057673, 0.18735512118990516, 0.18480756361060924, 0.19249142465796298, 0.18141788653497093, 0.19580135184042313, 0.17186763625082424, 0.12074672708394041, 0.11936993844081267, 0.13726193361320516, 0.09784919942541781, 0.11601457602013943, 0.09726938520758499, 0.13548869721097123, 0.12425968931929221, 0.09343828868915294, 0.16100782926118085, 0.16360369483902104, 0.17572685324725668, 0.13994539015317764, 0.1577639937136711, 0.16833782595261038, 0.13333994048764986, 0.1843869967615518, 0.14291300558420117, 0.14754383703440066, 0.14926305388783423, 0.1426062875920595, 0.15433133336292448, 0.15337988597757524, 0.1518138162387862, 0.15767533433360514, 0.15291382681377885, 0.1424718494320132, 0.14421233355614682, 0.15016769442405953, 0.30968844234647364, 0.12963196412092437, 0.17861992272599714, 0.11962373030614859, 0.17345527872587918, 0.13696730213028263, 0.1671813147212532, 0.1163762609069019, 0.14125003746405562, 0.15913161548298427, 0.1338672990205425, 0.13433791821027863, 0.17577930827847754, 0.18525496501706262, 0.18452314384960833, 0.23937097278203778, 0.20663179619643302, 0.16808944695837158, 0.18329730359082674, 0.19118499329112437, 0.19130800623771393, 0.18006153859366147, 0.1717293219236692, 0.17215854508143025, 0.18751200656294975, 0.04762285047191506, 0.04123310307576844, 0.04761083544068101, 0.05180336731204571, 0.04893034640395166, 0.05442080700469265, 0.07089505460109413, 0.05398116861971469, 0.04878136742637029]}, "mutation_prompt": null}
