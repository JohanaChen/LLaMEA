{"id": "5eefc734-9fa1-4d2c-b1c2-948191f9ee26", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + int(2 * np.sqrt(dim))\n        self.c1 = 1.49  # cognitive coefficient\n        self.c2 = 1.49  # social coefficient\n        self.w = 0.72   # inertia weight\n        self.F = 0.8    # DE mutation factor\n        self.CR = 0.9   # DE crossover rate\n        self.bounds = (-5.0, 5.0)\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        \n        personal_best_positions = np.copy(pop)\n        personal_best_scores = np.array([func(ind) for ind in pop])\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        \n        evaluations = self.pop_size\n        \n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                # PSO Update\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.w * velocities[i] +\n                                 self.c1 * r1 * (personal_best_positions[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best_position - pop[i]))\n                pop[i] = np.clip(pop[i] + velocities[i], self.bounds[0], self.bounds[1])\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                score_trial = func(trial)\n                evaluations += 1\n                if score_trial < personal_best_scores[i]:\n                    personal_best_scores[i] = score_trial\n                    personal_best_positions[i] = trial\n                    if score_trial < personal_best_scores[global_best_index]:\n                        global_best_index = i\n                        global_best_position = trial\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best_position, personal_best_scores[global_best_index]", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for dynamic exploration and exploitation balance in black-box optimization.", "configspace": "", "generation": 0, "fitness": 0.35794229368336417, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8024084374589784, 0.8024084374589784, 0.8024084374589784, 0.8244502261956211, 0.8244502261956211, 0.8244502261956211, 0.18276710300073717, 0.18276710300073717, 0.18276710300073717, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.6724173837803393, 0.6724173837803393, 0.6724173837803393, 0.5756741799759513, 0.5756741799759513, 0.5756741799759513, 0.1354452005636767, 0.1354452005636767, 0.1354452005636767, 0.0723897989842397, 0.0723897989842397, 0.0723897989842397, 0.1436039154107177, 0.1436039154107177, 0.1436039154107177, 0.10808228562569033, 0.10808228562569033, 0.10808228562569033, 0.1045726713828411, 0.1045726713828411, 0.1045726713828411, 0.12844107678015404, 0.12844107678015404, 0.12844107678015404, 0.9947867392447555, 0.9947867392447555, 0.9947867392447555, 0.9958348640972887, 0.9958348640972887, 0.9958348640972887, 0.07502294396385534, 0.07502294396385534, 0.07502294396385534, 0.6456115121362492, 0.6456115121362492, 0.6456115121362492, 0.1513869375046486, 0.1513869375046486, 0.1513869375046486, 0.6355322410148405, 0.6355322410148405, 0.6355322410148405, 0.8287716015089701, 0.8287716015089701, 0.8287716015089701, 0.8220799751084783, 0.8220799751084783, 0.8220799751084783, 0.8266394729367637, 0.8266394729367637, 0.8266394729367637, 0.5267404568222847, 0.5267404568222847, 0.5267404568222847, 0.5682340193496762, 0.5682340193496762, 0.5682340193496762, 0.5988253845839682, 0.5988253845839682, 0.5988253845839682, 0.44819211514210433, 0.44819211514210433, 0.44819211514210433, 0.6179570620849562, 0.6179570620849562, 0.6179570620849562, 0.6551595485936863, 0.6551595485936863, 0.6551595485936863, 0.4546607957797453, 0.4546607957797453, 0.4546607957797453, 0.018115012897464977, 0.018115012897464977, 0.018115012897464977, 0.30135189668219975, 0.30135189668219975, 0.30135189668219975, 0.29455481477942624, 0.29455481477942624, 0.29455481477942624, 0.30212992028503427, 0.30212992028503427, 0.30212992028503427, 0.273365855482112, 0.273365855482112, 0.273365855482112, 0.04493432108551332, 0.04493432108551332, 0.04493432108551332, 0.31242999398469196, 0.31242999398469196, 0.31242999398469196, 0.13561781281876772, 0.13561781281876772, 0.13561781281876772, 0.3312835775938082, 0.3312835775938082, 0.3312835775938082, 0.45679145186029446, 0.45679145186029446, 0.45679145186029446, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7573131692861569, 0.7573131692861569, 0.7573131692861569, 0.7705757905420383, 0.7705757905420383, 0.7705757905420383, 0.7331005129961943, 0.7331005129961943, 0.7331005129961943, 0.08321770948032792, 0.08321770948032792, 0.08321770948032792, 0.14427094905698434, 0.14427094905698434, 0.14427094905698434, 0.16517377029258928, 0.16517377029258928, 0.16517377029258928, 0.17697499387960192, 0.17697499387960192, 0.17697499387960192, 0.13883116743882506, 0.13883116743882506, 0.13883116743882506, 0.21959072097301324, 0.21959072097301324, 0.21959072097301324, 0.5072000729741102, 0.5072000729741102, 0.5072000729741102, 0.5146318153869123, 0.5146318153869123, 0.5146318153869123, 0.5123959252475462, 0.5123959252475462, 0.5123959252475462, 0.22791360723242837, 0.22791360723242837, 0.22791360723242837, 0.4290123019624499, 0.4290123019624499, 0.4290123019624499, 0.4160523978931523, 0.4160523978931523, 0.4160523978931523, 0.2011695014763114, 0.2011695014763114, 0.2011695014763114, 0.19630181286905646, 0.19630181286905646, 0.19630181286905646, 0.19998068533492996, 0.19998068533492996, 0.19998068533492996, 0.2147168035790492, 0.2147168035790492, 0.2147168035790492, 0.24185998981302137, 0.24185998981302137, 0.24185998981302137, 0.2474906501944456, 0.2474906501944456, 0.2474906501944456, 0.8893274002954135, 0.8893274002954135, 0.8893274002954135, 0.17125127589405398, 0.17125127589405398, 0.17125127589405398, 0.1573243316690488, 0.1573243316690488, 0.1573243316690488, 0.15365947191744544, 0.15365947191744544, 0.15365947191744544, 0.2090961265627178, 0.2090961265627178, 0.2090961265627178, 0.20141759798389214, 0.20141759798389214, 0.20141759798389214, 0.17869306477411773, 0.17869306477411773, 0.17869306477411773, 0.18986740792552814, 0.18986740792552814, 0.18986740792552814, 0.1980573706739419, 0.1980573706739419, 0.1980573706739419, 0.1018314666170772, 0.1018314666170772, 0.1018314666170772, 0.07122597220474458, 0.07122597220474458, 0.07122597220474458, 0.08585670427456549, 0.08585670427456549, 0.08585670427456549]}, "mutation_prompt": null}
{"id": "68858f78-1259-4bb9-a34a-7fe1d86a2a05", "solution": "import numpy as np\n\nclass HybridPSO_ADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + int(2 * np.sqrt(dim))\n        self.c1 = 1.49  # cognitive coefficient\n        self.c2 = 1.49  # social coefficient\n        self.w = 0.72   # inertia weight\n        self.F = 0.8    # DE mutation factor\n        self.CR = 0.9   # DE crossover rate\n        self.bounds = (-5.0, 5.0)\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        \n        personal_best_positions = np.copy(pop)\n        personal_best_scores = np.array([func(ind) for ind in pop])\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        \n        evaluations = self.pop_size\n        \n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.w * velocities[i] +\n                                 self.c1 * r1 * (personal_best_positions[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best_position - pop[i]))\n                pop[i] = np.clip(pop[i] + velocities[i], self.bounds[0], self.bounds[1])\n            \n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(indices, 3, replace=False)]\n                F_adapt = self.F + 0.2 * np.random.rand()  # Adaptive F\n                mutant = np.clip(a + F_adapt * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                score_trial = func(trial)\n                evaluations += 1\n                if score_trial < personal_best_scores[i]:\n                    personal_best_scores[i] = score_trial\n                    personal_best_positions[i] = trial\n                    if score_trial < personal_best_scores[global_best_index]:\n                        global_best_index = i\n                        global_best_position = trial\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best_position, personal_best_scores[global_best_index]", "name": "HybridPSO_ADE", "description": "A hybrid Particle Swarm Optimization with Adaptive Differential Evolution that balances exploration and exploitation dynamically for robust black-box optimization.", "configspace": "", "generation": 1, "fitness": 0.3868837693171096, "feedback": "", "error": "", "parent_id": "5eefc734-9fa1-4d2c-b1c2-948191f9ee26", "metadata": {"aucs": [0.799533238026948, 0.799533238026948, 0.799533238026948, 0.7811469097340497, 0.7811469097340497, 0.7811469097340497, 0.793895853903502, 0.793895853903502, 0.793895853903502, 0.5946460271541761, 0.5946460271541761, 0.5946460271541761, 0.6143831721458972, 0.6143831721458972, 0.6143831721458972, 0.6228997901549886, 0.6228997901549886, 0.6228997901549886, 0.14862108197722323, 0.14862108197722323, 0.14862108197722323, 0.14790284112548047, 0.14790284112548047, 0.14790284112548047, 0.13517333078355787, 0.13517333078355787, 0.13517333078355787, 0.10685478820711325, 0.10685478820711325, 0.10685478820711325, 0.12702793519703248, 0.12702793519703248, 0.12702793519703248, 0.10900394141405523, 0.10900394141405523, 0.10900394141405523, 0.9960857873624285, 0.9960857873624285, 0.9960857873624285, 0.9947568549259913, 0.9947568549259913, 0.9947568549259913, 0.07499792125708338, 0.07499792125708338, 0.07499792125708338, 0.6051320618222926, 0.6051320618222926, 0.6051320618222926, 0.5870943741168804, 0.5870943741168804, 0.5870943741168804, 0.6404875102877797, 0.6404875102877797, 0.6404875102877797, 0.7728240207591408, 0.7728240207591408, 0.7728240207591408, 0.8417096667751394, 0.8417096667751394, 0.8417096667751394, 0.7425440048227463, 0.7425440048227463, 0.7425440048227463, 0.5308467016274225, 0.5308467016274225, 0.5308467016274225, 0.40188572204666806, 0.40188572204666806, 0.40188572204666806, 0.5247562627853006, 0.5247562627853006, 0.5247562627853006, 0.49170146416026905, 0.49170146416026905, 0.49170146416026905, 0.4290203833743118, 0.4290203833743118, 0.4290203833743118, 0.5355327228164344, 0.5355327228164344, 0.5355327228164344, 0.2488711163327848, 0.2488711163327848, 0.2488711163327848, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13181462575980618, 0.13181462575980618, 0.13181462575980618, 0.4563950874548941, 0.4563950874548941, 0.4563950874548941, 0.3129607837909487, 0.3129607837909487, 0.3129607837909487, 0.38233730416649014, 0.38233730416649014, 0.38233730416649014, 0.029548235403858647, 0.029548235403858647, 0.029548235403858647, 0.37150728709160763, 0.37150728709160763, 0.37150728709160763, 0.30782489580391725, 0.30782489580391725, 0.30782489580391725, 0.3988912384331412, 0.3988912384331412, 0.3988912384331412, 0.353017959503365, 0.353017959503365, 0.353017959503365, 0.36649430477877143, 0.36649430477877143, 0.36649430477877143, 0.7075049191768188, 0.7075049191768188, 0.7075049191768188, 0.7236505324582517, 0.7236505324582517, 0.7236505324582517, 0.7342689211212327, 0.7342689211212327, 0.7342689211212327, 0.1322773810657062, 0.1322773810657062, 0.1322773810657062, 0.15541386815503433, 0.15541386815503433, 0.15541386815503433, 0.11665780252540603, 0.11665780252540603, 0.11665780252540603, 0.6721329588477936, 0.6721329588477936, 0.6721329588477936, 0.22337732001421062, 0.22337732001421062, 0.22337732001421062, 0.21855145542481502, 0.21855145542481502, 0.21855145542481502, 0.4592275941569457, 0.4592275941569457, 0.4592275941569457, 0.45115979594882794, 0.45115979594882794, 0.45115979594882794, 0.5235419011544566, 0.5235419011544566, 0.5235419011544566, 0.18818837625305174, 0.18818837625305174, 0.18818837625305174, 0.2404719751985429, 0.2404719751985429, 0.2404719751985429, 0.34612514380128145, 0.34612514380128145, 0.34612514380128145, 0.18087664736616782, 0.18087664736616782, 0.18087664736616782, 0.2148599019759183, 0.2148599019759183, 0.2148599019759183, 0.17221000988950674, 0.17221000988950674, 0.17221000988950674, 0.19517309269660377, 0.19517309269660377, 0.19517309269660377, 0.23269882609822357, 0.23269882609822357, 0.23269882609822357, 0.22951033028998458, 0.22951033028998458, 0.22951033028998458, 0.16552380990090954, 0.16552380990090954, 0.16552380990090954, 0.8380425382413558, 0.8380425382413558, 0.8380425382413558, 0.1655945938929655, 0.1655945938929655, 0.1655945938929655, 0.8493640533968914, 0.8493640533968914, 0.8493640533968914, 0.20667140959103247, 0.20667140959103247, 0.20667140959103247, 0.2103917906917926, 0.2103917906917926, 0.2103917906917926, 0.19485163576458087, 0.19485163576458087, 0.19485163576458087, 0.1820048559536397, 0.1820048559536397, 0.1820048559536397, 0.18411467369695123, 0.18411467369695123, 0.18411467369695123, 0.07470507193187714, 0.07470507193187714, 0.07470507193187714, 0.0788222956228839, 0.0788222956228839, 0.0788222956228839, 0.07743870124473828, 0.07743870124473828, 0.07743870124473828]}, "mutation_prompt": null}
