{"id": "5effd6d9-548e-464f-85b8-901719a10bb8", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.best_personal_positions = np.copy(self.particles)\n        self.best_personal_scores = np.full(self.population_size, np.inf)\n        self.best_global_position = None\n        self.best_global_score = np.inf\n        self.inertia_weight = 0.7\n        self.cognitive_constant = 1.5\n        self.social_constant = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate fitness\n            for i in range(self.population_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                if score < self.best_personal_scores[i]:\n                    self.best_personal_scores[i] = score\n                    self.best_personal_positions[i] = self.particles[i]\n                if score < self.best_global_score:\n                    self.best_global_score = score\n                    self.best_global_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and position\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_constant * r1 * (self.best_personal_positions[i] - self.particles[i])\n                social_velocity = self.social_constant * r2 * (self.best_global_position - self.particles[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n                self.particles[i] += self.velocities[i]\n                self.particles[i] = np.clip(self.particles[i], self.lower_bound, self.upper_bound)\n\n            # Apply Differential Evolution strategy\n            for i in range(self.population_size):\n                if np.random.rand() < self.crossover_probability:\n                    indices = [idx for idx in range(self.population_size) if idx != i]\n                    a, b, c = self.particles[np.random.choice(indices, 3, replace=False)]\n                    trial_vector = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                    # Evaluate trial vector\n                    trial_score = func(trial_vector)\n                    self.evaluations += 1\n                    if trial_score < self.best_personal_scores[i]:\n                        self.best_personal_scores[i] = trial_score\n                        self.best_personal_positions[i] = trial_vector\n                        self.particles[i] = trial_vector\n                        if trial_score < self.best_global_score:\n                            self.best_global_score = trial_score\n                            self.best_global_position = trial_vector\n\n                    if self.evaluations >= self.budget:\n                        break\n\n        return self.best_global_score, self.best_global_position", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution strategy for global search and local exploitation.", "configspace": "", "generation": 0, "fitness": 0.23709174164713004, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7030840933398681, 0.7735525255375852, 0.7423342653578298, 0.18278902773933148, 0.7014434104485979, 0.7609971317110896, 0.7196441254516674, 0.18239817981416195, 0.7536967637524601, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.38258725230031165, 0.04408810928918172, 9.999999999998899e-05, 0.4057446529370723, 0.04434782620624411, 0.046817451218103434, 0.15809912951935423, 0.09950201560166227, 0.23831103589366964, 0.1493802596100935, 0.07202130776692661, 0.13912996268210553, 0.11970815807778945, 0.13705420422541392, 0.1285553789447862, 0.11791137454629297, 0.13371678435086176, 0.10979580426665048, 0.12406366803417046, 0.10590263188798821, 0.10886214022561957, 0.10073849526323742, 0.09090303667600563, 0.1280328959447815, 0.9880172843404919, 0.9847083147239983, 0.990980670257047, 0.9871945193811114, 0.9843453073426254, 0.9862611613385658, 0.987451521931691, 0.9878428235818556, 0.9881263473760065, 0.4273283554357712, 0.37737923967589326, 0.05970781917927126, 0.4565098881679571, 0.148085052384624, 0.316391486697307, 0.08764439884029396, 0.08795377050031417, 9.999999999998899e-05, 0.6536353371533061, 0.7132548331501845, 0.8362379833375482, 0.20926423939089334, 0.18982801785495074, 0.20580271630111646, 0.22773802122021647, 0.21687579011690572, 0.21399234203203332, 0.18455056334424158, 0.1297794920336639, 0.11575070829929679, 0.22509328986028332, 0.10072370401214537, 9.999999999998899e-05, 0.1842408223130576, 0.18377993151469285, 0.15857449969288095, 0.2055315454717347, 0.1563337367409624, 0.1954077245578486, 0.18789150628826223, 0.36094358903628243, 0.23397159104224685, 0.1890555895367818, 0.03339273634790685, 0.10346660882558734, 0.005282407942018619, 9.999999999998899e-05, 9.999999999998899e-05, 0.004096819639484606, 9.999999999998899e-05, 9.999999999998899e-05, 0.00907080797606341, 9.999999999998899e-05, 0.06352695602615621, 0.09427798939180831, 0.037348923135566814, 0.10334401173442787, 0.08549338281956931, 0.006352948070517561, 0.03837605727964544, 0.04927435934593427, 0.0741740181712014, 0.04431108432598152, 0.029656771019591188, 9.999999999998899e-05, 0.03848639174427826, 0.08258961110706864, 0.058224551325668505, 0.06343819733174405, 0.08037950681169714, 0.08728775688311252, 0.0659139398226184, 0.19690361334419648, 0.010475036021120099, 0.20632877369311386, 9.999999999998899e-05, 0.11341428082586846, 0.005448713020482998, 0.09833220403308218, 9.999999999998899e-05, 0.0774612558661758, 0.451044237836252, 0.4758934726541666, 0.4810779401182037, 0.4787608112108426, 0.5361515683819393, 0.49511380214199374, 0.5180424682706706, 0.5217667721445973, 0.5285655896691654, 0.12916860352066672, 0.09470797462901881, 0.11530279744296035, 0.12892666970719824, 0.12157946026550581, 0.09608689791235336, 0.10782266081364211, 0.08990720400129082, 0.10610067577926696, 0.23057082293102482, 0.23626333521175535, 0.20549394462115034, 0.3814542318554016, 0.3866425725951358, 0.17572873756087792, 0.23852072831800997, 0.16700603161454186, 0.16872545769234215, 0.3891358692655369, 0.25389621542881247, 0.28746754640787253, 0.3618583535130758, 0.2933466682960508, 0.3508645490932871, 0.4088379318651839, 0.3705056177987449, 0.17154624635097848, 0.21323190423727445, 0.14197172921303824, 0.14032025647783652, 0.2346953554072666, 0.188940814754061, 0.29301811386570575, 0.26094968488394354, 0.24764796609252349, 0.2746874082738616, 0.21382631163813415, 0.1881673816366689, 0.19320778821006535, 0.1995282743387239, 0.17074635042480057, 0.18520366087765983, 0.20998945451219886, 0.19517372685236656, 0.2112038123389942, 0.22051016638986798, 0.40127460800566683, 0.23004277619719138, 0.23444201199421166, 0.20451670465109728, 0.2082538158220646, 0.22791658864125652, 0.19316962389160908, 0.21747249914398625, 0.8255411625985405, 0.1695244083132944, 0.12481182777566069, 0.19522850467799602, 0.19831932699344568, 0.7969370921192402, 0.09996118365849382, 0.16935742505762263, 0.1522447576106557, 0.08214044736667925, 0.20748274317145488, 0.14324512875132756, 0.47812943658763984, 0.16732992985369233, 0.160160140063769, 0.1048793816245237, 0.18623187083189996, 0.20721728899195846, 0.1936731449005521, 0.19062327086412456, 0.19328095614485163, 0.17918702513774332, 0.1953843217335146, 0.2094741856466591, 0.18633229562404208, 0.19310639641320126, 0.19659962346589277, 0.08156816576350012, 0.0920307168960095, 0.08337484364739756, 0.07588064539608275, 0.0746714985873923, 0.08792173916064416, 0.08355854503634053, 0.09634390707605611, 0.07914125458763033]}, "mutation_prompt": null}
{"id": "e1048f58-c3ab-4703-b354-bad43bba6a9d", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.best_personal_positions = np.copy(self.particles)\n        self.best_personal_scores = np.full(self.population_size, np.inf)\n        self.best_global_position = None\n        self.best_global_score = np.inf\n        self.inertia_weight = 0.7\n        self.cognitive_constant = 1.5\n        self.social_constant = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate fitness\n            for i in range(self.population_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                if score < self.best_personal_scores[i]:\n                    self.best_personal_scores[i] = score\n                    self.best_personal_positions[i] = self.particles[i]\n                if score < self.best_global_score:\n                    self.best_global_score = score\n                    self.best_global_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Update velocity and position\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_constant * r1 * (self.best_personal_positions[i] - self.particles[i])\n                social_velocity = self.social_constant * r2 * (self.best_global_position - self.particles[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n                self.particles[i] += self.velocities[i]\n                self.particles[i] = np.clip(self.particles[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive inertia weight update\n            self.inertia_weight = 0.9 - 0.5 * (self.evaluations / self.budget)\n\n            # Apply Differential Evolution strategy\n            for i in range(self.population_size):\n                if np.random.rand() < self.crossover_probability:\n                    indices = [idx for idx in range(self.population_size) if idx != i]\n                    a, b, c = self.particles[np.random.choice(indices, 3, replace=False)]\n                    trial_vector = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                    # Evaluate trial vector\n                    trial_score = func(trial_vector)\n                    self.evaluations += 1\n                    if trial_score < self.best_personal_scores[i]:\n                        self.best_personal_scores[i] = trial_score\n                        self.best_personal_positions[i] = trial_vector\n                        self.particles[i] = trial_vector\n                        if trial_score < self.best_global_score:\n                            self.best_global_score = trial_score\n                            self.best_global_position = trial_vector\n\n                    if self.evaluations >= self.budget:\n                        break\n\n        return self.best_global_score, self.best_global_position", "name": "HybridPSO_DE", "description": "Improved hybrid PSO-DE with adaptive inertia weight for better exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": 0.2103468629424181, "feedback": "", "error": "", "parent_id": "5effd6d9-548e-464f-85b8-901719a10bb8", "metadata": {"aucs": [0.5530232898527054, 0.6559929038948276, 0.612007794286681, 0.17904867701064286, 0.5877657810138672, 0.6443515517663709, 0.5720862463743008, 0.17982036680498548, 0.650953264799685, 9.999999999998899e-05, 0.02635423793149927, 9.999999999998899e-05, 0.3514698621057094, 0.025750518321161153, 9.999999999998899e-05, 0.30047376274116255, 0.012923255209926543, 0.26071830433628385, 0.12591377851117236, 0.10572537295908091, 0.14913760559981126, 0.10660965227383346, 0.09484390559680755, 0.12619187094653184, 0.10504331353566665, 0.08148929087995349, 0.1299516414024996, 0.10707257633736322, 0.025438328015124023, 0.09895336940334021, 0.10747411384432493, 0.10506108645721557, 0.10001636611793019, 0.1077788344838696, 0.08920163847964835, 0.11102467844877373, 0.9900713952745769, 0.9843860608194179, 0.9910307431616575, 0.9868821683225285, 0.9876370119271357, 0.9835155916360164, 0.9878609568190692, 0.9846898861754256, 0.9913355598899627, 0.05861885771023023, 0.39737877948501865, 0.057734755984991004, 0.4624061175036265, 0.40500801102238493, 0.14489020459412805, 0.08207066321222989, 0.08701951423510779, 9.999999999998899e-05, 0.2947768812011554, 0.19513169204905823, 0.13691237972314307, 0.23371877906586624, 0.18302575369880003, 0.24321787653131355, 0.20058206505607623, 0.13731136427872992, 0.196266455581244, 0.14591699528630087, 0.16714473985281164, 0.08746847140534697, 0.09316913148300277, 0.08942347326641686, 9.999999999998899e-05, 0.14012023168144838, 0.16172053606507797, 0.153669515454115, 0.1341818280440037, 0.11434801685421336, 0.13014056569402888, 0.1016874274090882, 0.07168186295895806, 0.15709202679355094, 0.12554752817317627, 0.031957933914955494, 0.08173021990410267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028302457264398617, 9.999999999998899e-05, 9.999999999998899e-05, 0.005458289547925044, 9.999999999998899e-05, 9.999999999998899e-05, 0.04586105081351921, 0.01752322465125289, 0.1426634002711369, 0.052006857345970325, 0.0029461373135971636, 0.00802355066404703, 0.07885626770595322, 0.022448370675695384, 0.03575256661254511, 9.999999999998899e-05, 0.0491600704850893, 0.03170260457768859, 0.07103674070288912, 0.06467681801717029, 0.04480951781257758, 0.062670062261163, 0.06375695882296895, 0.04023750046562835, 0.08445382718893746, 0.009456473324159553, 0.21700548640421524, 9.999999999998899e-05, 0.10003905642904898, 0.004128041380185299, 0.06118127980151822, 9.999999999998899e-05, 0.19154698113038626, 0.47031477794044396, 0.44697503927973403, 0.4960479936197175, 0.42443574362840075, 0.4365197585003624, 0.4271665377928694, 0.4393213224482174, 0.439295164704114, 0.48493968580259483, 0.06441339184519579, 0.10000279411987611, 0.09271770858196049, 0.10540821780696985, 0.09165982317943966, 0.08255763501840407, 0.11404895127766446, 0.08127145234703526, 0.09272975070997613, 0.17087085121248435, 0.1767295181555426, 0.17105875230630496, 0.22555012231032356, 0.23508725832103505, 0.18876259631105718, 0.20931298581060853, 0.17371036004643314, 0.1937328116874898, 0.2772862045565955, 0.2019102683638313, 0.1887768404270871, 0.292165812502176, 0.19079481231930573, 0.2508363979313253, 0.3264836866075258, 0.38589572290065755, 0.15540918815704496, 0.20659908110960412, 0.19060505109857995, 0.14691981047090708, 0.20129658509195048, 0.17757046454223624, 0.22054357663653823, 0.22119266954082772, 0.22050102870137267, 0.21761227361127589, 0.16897983736608457, 0.2019414823243637, 0.1956459306716729, 0.17117009104991576, 0.15283149071569146, 0.18302583829826857, 0.20337360064361487, 0.19977528417240087, 0.1817924507814518, 0.16586274191635098, 0.4134897422299517, 0.2048801934890171, 0.1925930510445516, 0.18627785907075212, 0.22589747097872437, 0.425164089005042, 0.18974267945203738, 0.18547539639155552, 0.6309081080993251, 0.16912991327426719, 0.1247535626450379, 0.622531868850603, 0.1960014260174462, 0.19018422578954775, 0.0988747915183047, 0.16837937539682535, 0.16089602405206316, 0.5425445201479793, 0.16064447230585033, 0.1633117230437252, 0.4711877280845914, 0.5393781598607651, 0.19298575842983956, 0.19323150150289925, 0.18545259059092167, 0.1813244179965552, 0.17907124150202003, 0.18374137796174772, 0.20001280499231722, 0.19732454839563296, 0.18182855508208473, 0.1921291466824101, 0.20670971459997045, 0.19165317297843798, 0.20311136081523717, 0.0705898120503019, 0.08205162312243286, 0.07793136388700972, 0.08730301386429018, 0.08751773942445418, 0.08435019193950155, 0.08157903007027523, 0.08253757664333838, 0.08144938439784566]}, "mutation_prompt": null}
