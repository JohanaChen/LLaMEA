{"id": "eb15088d-7701-461a-bade-86ab876a555c", "solution": "import numpy as np\n\nclass HybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        \n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Simulated Annealing-inspired Crossover\n                trial = np.copy(population[i])\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial[crossover_mask] = mutant[crossover_mask]\n                \n                # Evaluate Trial Solution\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Acceptance Criterion\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / (1 + i)):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "HybridMetaheuristic", "description": "A hybrid metaheuristic combining differential evolution and simulated annealing for robust black-box optimization.", "configspace": "", "generation": 0, "fitness": 0.16493488427851719, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.1811862598789391, 0.18865139989623814, 0.19088457783781332, 0.2184555632542875, 0.23931979687434535, 0.21666786220056333, 0.2179844582528373, 0.19187312149348268, 0.18577844672116706, 0.14883810319642687, 0.1603020572418764, 0.14385495098918655, 0.14103644881681232, 0.14247522148717473, 0.13780219148982709, 0.14795009304097784, 0.13179248753432216, 0.144485400850364, 0.0592840014774636, 0.0641457224033094, 0.07802010025734418, 0.07996750466859048, 0.09104754243458124, 0.08106159133283031, 0.09043274721714556, 0.07514536218110679, 0.06939196539608894, 0.0639849821096724, 0.0650374469420898, 0.06592462205641714, 0.0667773467154813, 0.07167789816999537, 0.09133468419091928, 0.07432519537171034, 0.06953284380398161, 0.08343598641655425, 0.9189452359714607, 0.9675114443679156, 0.9366256511670604, 0.930370804471718, 0.9371760589202212, 0.9387551868816865, 0.9766821133160314, 0.8760256716045999, 0.9726997750757612, 0.13516670085331495, 0.13824651926785936, 0.15149689182721127, 0.13532170623305317, 0.1338222560741853, 0.14092420368919445, 0.15286207084573666, 0.13793984062235465, 0.1501932197853565, 0.17539929907075835, 0.17430519572001035, 0.18493369049482367, 0.17522091750116342, 0.2003903036905298, 0.1777392728662096, 0.19535692011739825, 0.20118965733780547, 0.18087329354357795, 0.11197082509270972, 0.12044710001878556, 0.11098315277914916, 0.11325095341244762, 0.1316260519336514, 0.12257369187357958, 0.12086317758857257, 0.13478257990093656, 0.1203208091698611, 0.050667109260885246, 0.015866146567486417, 0.13625789672061694, 0.10872375245348664, 0.12527013082330485, 0.12205335386456717, 0.12020624476744124, 0.10220953463250548, 0.12387092605233951, 0.08508385535486429, 0.10725262286312687, 0.10446345091812403, 0.08295297406758384, 0.09065247207252525, 0.08682017861466551, 0.09127716418197085, 0.0846969796957936, 0.10744337660340442, 0.1724157679641628, 0.1427077689775884, 0.15361773216690033, 0.15976426544089894, 0.14238676223124735, 0.1539993585741215, 0.1682391266309734, 0.1452514438693988, 0.14407348635910744, 0.012704083040632197, 0.03214285665899008, 0.02248513589640011, 0.02391126384365938, 0.017418401164335573, 0.02413367669353106, 0.023418339733768168, 0.041412268011816744, 0.042847361098814485, 0.07682835776240804, 0.07382910713114255, 0.07825086862583741, 0.06407873672484599, 0.09013225914257961, 0.07834291445821617, 0.0829531595769728, 0.07560487024730445, 0.08326664124478533, 0.20698223360518164, 0.1981240203313872, 0.19489154417811794, 0.21240306281862031, 0.2112802648877138, 0.19998552029450078, 0.18400899598838028, 0.19529390430119187, 0.19683818133850284, 0.06852665351395604, 0.07286119753993314, 0.0736632777634173, 0.08672756196825526, 0.08291864017912143, 0.07289392617279178, 0.06881958348429584, 0.07960093913917132, 0.07168009995418523, 0.15131080701139854, 0.13758597718318177, 0.13887913341142244, 0.1411171380353844, 0.15340468467170543, 0.13845987746508903, 0.15202895395027116, 0.15098528135677314, 0.16761263715347252, 0.15682712621892347, 0.15032653041798094, 0.16431368257467183, 0.16288594999217498, 0.16306014865157636, 0.16937698222988806, 0.16276554024688017, 0.18104206333440953, 0.15633901169824405, 0.12050151342776572, 0.1115431389533853, 0.12270410611027804, 0.10613209070242502, 0.12584289798093418, 0.1186433926387197, 0.12703997472290796, 0.13044121975957446, 0.12333009519294025, 0.1621596079979929, 0.18859107423008525, 0.17386729418225189, 0.174198052577218, 0.17570238418249684, 0.1552589014272613, 0.15913243177848202, 0.15903421932189832, 0.17716655756652433, 0.16686203587845472, 0.17362049212799358, 0.18957438006869176, 0.17591745206745324, 0.16996571323450949, 0.17419167140187342, 0.17538834696775518, 0.1700835768638439, 0.16636503162154226, 0.22488461198993182, 0.15210129668712158, 0.14621447671893673, 0.15330715705316866, 0.16779124719909, 0.16267223058282543, 0.1626569458263879, 0.17565102486239614, 0.1448752726582816, 0.1560997804653229, 0.15600887358809046, 0.1548800205244374, 0.1215102374223217, 0.1420445427395307, 0.1292729369785891, 0.18516529726330522, 0.1902754211977663, 0.19336923226540392, 0.190494359056826, 0.17842248089475177, 0.1751524840813572, 0.17681191600544732, 0.20400609516404755, 0.1870692530136765, 0.17831356598180048, 0.19019956140693517, 0.18366364715339145, 0.07340059823965694, 0.06511199912045706, 0.056791494400289744, 0.06182907402241322, 0.05618191106778836, 0.08016488571477953, 0.05245666549932648, 0.056550784573507706, 0.06661242661918254]}, "mutation_prompt": null}
{"id": "f48bed46-89fc-4999-8d7b-79f796cf5a93", "solution": "import numpy as np\n\nclass HybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        \n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adaptive Differential Evolution Mutation\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                F_adaptive = self.mutation_factor * (1 - evaluations / self.budget)\n                mutant = population[a] + F_adaptive * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Simulated Annealing-inspired Crossover\n                trial = np.copy(population[i])\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial[crossover_mask] = mutant[crossover_mask]\n                \n                # Evaluate Trial Solution\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Acceptance Criterion with annealing schedule\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / (evaluations / self.budget + 1)):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "HybridMetaheuristic", "description": "A refined hybrid metaheuristic combining differential evolution, adaptive mutation, and simulated annealing for enhanced black-box optimization.", "configspace": "", "generation": 1, "fitness": 0.24275659861844634, "feedback": "", "error": "", "parent_id": "eb15088d-7701-461a-bade-86ab876a555c", "metadata": {"aucs": [0.35523587493973885, 0.32055172191274506, 0.31726001194039577, 0.31849925605694107, 0.34405849311731596, 0.35202465504755587, 0.3376157382155516, 0.3493961992247224, 0.3169151903149855, 0.2751706713192481, 0.29480108032012287, 0.28970589111912926, 0.28938474894180877, 0.27643022063810596, 0.29501534799914175, 0.2839873766028902, 0.28298402672451084, 0.2753510001638094, 0.11920598944310512, 0.13023356246078766, 0.12950388730936047, 0.12509847642869176, 0.11405748389897397, 0.1345446907213914, 0.1185351313819496, 0.1212464324371042, 0.11290948488751895, 0.11705405252705037, 0.1018844940043071, 0.10324891559346472, 0.11580608096986711, 0.10514004637271568, 0.10994193601576385, 0.10512430883401924, 0.10295611855340703, 0.11457271291943738, 0.9545324610393858, 0.9426090816749926, 0.8232443220156276, 0.929537619301451, 0.9192588061833147, 0.967052076485704, 0.9338678601052517, 0.9596609138952572, 0.9737863939566087, 0.22280393024988232, 0.22394599368487955, 0.22164410231107134, 0.23566064540216358, 0.23747225939568006, 0.23403201996457446, 0.26554299828677963, 0.25694837679861826, 0.2496056011926424, 0.3170859251851238, 0.3128349881737674, 0.30031409532306874, 0.3189514613347397, 0.3136980383758253, 0.3300421004304763, 0.5536131063314668, 0.5363331069900008, 0.40205502488878053, 0.16552243924751253, 0.15484802241469475, 0.18780776903643714, 0.16206874682815708, 0.19397161050146694, 0.16273566871245038, 0.17270516883421982, 0.17904560332448294, 0.18343738429655443, 0.20772359263733653, 0.009822727778695639, 0.23838415365340593, 0.17407926656726536, 0.1949959469335968, 0.1683874175434008, 0.20614883038323517, 0.17270389713545098, 0.20822946383561525, 0.22042653689898872, 0.1873213433703197, 0.19985497600982305, 0.22117133577645753, 0.22597618597689206, 0.19238881337605973, 0.22391520545090682, 0.20372456377530057, 0.19846400956565236, 0.24725619068299154, 0.28889888405644637, 0.2713638888712748, 0.29092919818754504, 0.2594427888169144, 0.2544964728861162, 0.2907312756828603, 0.262742441429496, 0.272834411188006, 0.06896776361456092, 0.08754564889991323, 0.12951730510375326, 0.11042592898665682, 0.1481655143095797, 0.16670173003294186, 0.12109087313556788, 0.09629915673750489, 0.13698903901801718, 0.18258044612146607, 0.18212011634107284, 0.18346785087044604, 0.18715647319276418, 0.1942825399076089, 0.1893163418582685, 0.1816425859050762, 0.1686042395750521, 0.18290335211129083, 0.31178105788783306, 0.3083939059583336, 0.31993950060736953, 0.3185352467278991, 0.31529218292218497, 0.3039749154430299, 0.31196003902333025, 0.29534585666756197, 0.32729708160970994, 0.11812661847764105, 0.11411939741154731, 0.0947234087039307, 0.10707128599808402, 0.10233981002613979, 0.1038807182296847, 0.09914064276075496, 0.11691284098148991, 0.10927971574810513, 0.17726743257639177, 0.15337234204437777, 0.15104264942069234, 0.1787225968678613, 0.2075405283340157, 0.18454152146120473, 0.19084388597506818, 0.13890277996463007, 0.16024029596960299, 0.2506044264183973, 0.24401507302588465, 0.2547709442014713, 0.24557931708099434, 0.24683172019331012, 0.24565832444796654, 0.25686139777021577, 0.2575040674099701, 0.25177901460269037, 0.21784838456632838, 0.21776388200452057, 0.2244784913211264, 0.2247593207807701, 0.21757579527371806, 0.2264742247689232, 0.22735100709385125, 0.21997429249503708, 0.23781393447160903, 0.19452037476105788, 0.1991750413031299, 0.19469046917798116, 0.19325697695957456, 0.1900622220137721, 0.18207571950361057, 0.2092881960684726, 0.22563163209317127, 0.20805946784888885, 0.17309637901901564, 0.17639270937878937, 0.18887477519171958, 0.1811599398747903, 0.1725166832275058, 0.18181594224337083, 0.19196784125627686, 0.17861431661872362, 0.1641831139417591, 0.46205132185392517, 0.3742817837586885, 0.4683825306897522, 0.1706298785247642, 0.18095118547900657, 0.23035860320967116, 0.4590281540218527, 0.18680938787062873, 0.3914283709180447, 0.1664648107553992, 0.19665591102524138, 0.19359878269559339, 0.37345888322110454, 0.4045029284167815, 0.43675816235580467, 0.19009796290490344, 0.20296057947989143, 0.20522788047381735, 0.1911432918481335, 0.18722165696922943, 0.1932203582826597, 0.19116822847873682, 0.1843525442634204, 0.18893287442727058, 0.18086374504617064, 0.18902316325673651, 0.18565340336404934, 0.07765620427554565, 0.08039133673844501, 0.07620942785776841, 0.07164285270157922, 0.0741006684551967, 0.07943970258410571, 0.07455371889278084, 0.07477410498454229, 0.08389946957395733]}, "mutation_prompt": null}
