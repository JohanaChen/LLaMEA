{"id": "4918defb-64e9-4148-b847-a70d0358178c", "solution": "import numpy as np\n\nclass NovelDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        \n    def __call__(self, func):\n        function_calls = 0\n        fitness = np.apply_along_axis(func, 1, self.population)\n        function_calls += self.population_size\n        \n        while function_calls < self.budget:\n            for i in range(self.population_size):\n                if function_calls >= self.budget:\n                    break\n\n                idxs = np.random.choice(range(self.population_size), 3, replace=False)\n                x0, x1, x2 = self.population[idxs]\n                mutant = x0 + self.mutation_factor * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, self.population[i])\n                \n                trial_value = func(trial)\n                function_calls += 1\n                \n                if trial_value < fitness[i]:\n                    fitness[i] = trial_value\n                    self.population[i] = trial\n\n                if trial_value < self.best_value:\n                    self.best_value = trial_value\n                    self.best_solution = trial\n\n        return self.best_solution", "name": "NovelDEOptimizer", "description": "A hybrid differential evolution with adaptive crossover and mutation rates guided by a local search mechanism.", "configspace": "", "generation": 0, "fitness": 0.261332256345072, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6303508354012273, 0.5881740726649367, 0.5891367376365919, 0.6568358532205242, 0.6555401612365537, 0.65296100072555, 0.6637250105621948, 0.6265200288477026, 0.6187073213074975, 0.37439341304077844, 0.3800832742909276, 0.40121637057003157, 0.36186636213755163, 0.39349809186942775, 0.37504237839940546, 0.3676173354635739, 0.4193998164447448, 0.37875790113541397, 0.08457234728953755, 0.09768538036614738, 0.09939994212135517, 0.09869526375611914, 0.10221110508964115, 0.09338603933660983, 0.09402119400699771, 0.08731927456072386, 0.0975070629226138, 0.0846779025785136, 0.08475860204237373, 0.10875946924860236, 0.08593690562373735, 0.09274532457230034, 0.08477075380675247, 0.08852976634851817, 0.08869646286835409, 0.09196649997552997, 0.9806164642140757, 0.9131818418276485, 0.9674545387139455, 0.9574454447453314, 0.9162789564746359, 0.937231638163827, 0.9708179656152067, 0.9572804101259852, 0.9689147118055341, 0.28767841534904903, 0.27664866878666927, 0.2767787090641307, 0.2923089614211929, 0.2936114022452716, 0.2978810074614271, 0.3049580789019337, 0.2947505647469819, 0.3244318716073322, 0.4526956263143981, 0.5248197934116622, 0.41221304718668095, 0.5446581167637885, 0.5107403124377873, 0.5252956318567661, 0.48803742374257464, 0.5922773014258165, 0.505131848408342, 0.18994771786815068, 0.17033309018921095, 0.18962320003970023, 0.1910976729789471, 0.20456379799817226, 0.2070114110775435, 0.20124931116062617, 0.15631712961686228, 0.1529920834026519, 0.3055112677980847, 0.1845900816905398, 0.2276708148330614, 0.18309171089383114, 0.1441194727355769, 0.1969768063407772, 0.14134762277706048, 0.1792125223003732, 0.19596984723449518, 0.10801259564742283, 0.10967396084522951, 0.13301285818910424, 0.12525735077891154, 0.12275425545154262, 0.11890239086965615, 0.133685315045173, 0.11501453728025224, 0.11283451563224478, 0.2539429787238767, 0.25896604227405284, 0.25913870931783944, 0.24087463892121008, 0.2149830053963011, 0.2187834475285385, 0.27922647490104313, 0.2924978657640861, 0.28086858341926335, 0.028143112581165197, 0.039852708190292296, 0.017294577783444454, 0.043772841013424824, 0.02461714117929914, 0.04127468037370052, 0.04327819683910983, 0.04587756189208636, 0.05844591588151238, 0.16455666449639217, 0.15526429165349842, 0.15266820615463972, 0.16384632922330133, 0.15995796486835245, 0.16239319887670844, 0.15369415611647597, 0.15767720857427558, 0.16742728621304837, 0.45465858219947897, 0.47302634420768974, 0.48483373588285883, 0.5086286141823626, 0.4832328721843345, 0.4946498136198044, 0.4602369260347182, 0.48678270611797436, 0.48532356754305794, 0.0844803077644134, 0.08415303633101867, 0.10025593786815001, 0.08432894306818195, 0.09502256669064424, 0.08987697026955177, 0.08039373434577479, 0.07934987507880142, 0.09686658210897281, 0.16801503062757928, 0.17302141451976039, 0.15502553429251453, 0.16352084702203262, 0.13602443403332198, 0.13638572837206264, 0.16024913837653498, 0.12693231315176212, 0.16391225786162578, 0.2874423904336383, 0.25031984715689437, 0.2840692816521003, 0.24230536005838954, 0.23905103299313368, 0.2594671564596721, 0.27418700571780275, 0.294969186889666, 0.28426947115397716, 0.21751662185266252, 0.19659104531943938, 0.1939266368330259, 0.19054678573538264, 0.190122406672665, 0.20111429963049443, 0.19993247051676832, 0.2110290629383278, 0.21386775057452556, 0.18996915365687672, 0.1663641699353139, 0.19324255631970033, 0.17364760462161344, 0.1870411048485292, 0.19408361306047373, 0.19284687291941127, 0.17892342692630614, 0.20398711381524892, 0.17165340471788326, 0.1967187745695591, 0.18302442806360586, 0.17590332188346436, 0.1765885235593807, 0.17347456612798162, 0.1776861424187095, 0.17522357168451674, 0.18793134262210875, 0.15921784572767506, 0.6129508645813364, 0.6642467290753948, 0.1786883177057873, 0.18378424769521984, 0.18073628786737195, 0.15403689036891155, 0.20886084501698632, 0.342656479443594, 0.18670770639170065, 0.19405961062195598, 0.18446824984255095, 0.35460133867526933, 0.2680880141132066, 0.18146512164890416, 0.20313234900068633, 0.4998942066599751, 0.20536619896909192, 0.18783732924635088, 0.18023815829916234, 0.20220339461419934, 0.18749187771032993, 0.16688167222158756, 0.19104640338469214, 0.1754204263818494, 0.18923353842363744, 0.17298381898649295, 0.06350994990888392, 0.07711820996947749, 0.06395195290550271, 0.07669306676589549, 0.07181442078783418, 0.06805418663340457, 0.07552370055913327, 0.06568610617668169, 0.07719139294140276]}, "mutation_prompt": null}
{"id": "64769152-eca8-4148-bc8c-042674b073db", "solution": "import numpy as np\n\nclass NovelDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        \n    def __call__(self, func):\n        function_calls = 0\n        fitness = np.apply_along_axis(func, 1, self.population)\n        function_calls += self.population_size\n        \n        while function_calls < self.budget:\n            for i in range(self.population_size):\n                if function_calls >= self.budget:\n                    break\n\n                idxs = np.random.choice(range(self.population_size), 3, replace=False)\n                x0, x1, x2 = self.population[idxs]\n                diversity = np.std(self.population, axis=0).mean()  # Added line for diversity-based mutation\n                mutant = x0 + diversity * (x1 - x2)  # Changed line to use diversity\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, self.population[i])\n                \n                trial_value = func(trial)\n                function_calls += 1\n                \n                if trial_value < fitness[i]:\n                    fitness[i] = trial_value\n                    self.population[i] = trial\n\n                if trial_value < self.best_value:\n                    self.best_value = trial_value\n                    self.best_solution = trial\n\n        return self.best_solution", "name": "NovelDEOptimizer", "description": "A hybrid differential evolution with adaptive mutation factor based on the diversity of the population.", "configspace": "", "generation": 1, "fitness": 0.14031244939473153, "feedback": "", "error": "", "parent_id": "4918defb-64e9-4148-b847-a70d0358178c", "metadata": {"aucs": [0.28083669531746613, 0.27597753727599716, 0.33114327951066813, 0.4042752507562759, 0.41374668286712346, 0.4558723171148693, 0.3941885953646508, 0.36973608424791804, 0.33611832310971435, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0044668398187628355, 0.00047449181255432293, 0.007641461636872959, 0.002873224863122248, 0.005295083971142978, 0.010130451428285281, 0.05389527081757173, 0.0576433250817463, 0.05362353819147303, 0.08158850673191465, 0.06165420787584064, 0.05780534911446633, 0.06374144958756656, 0.07263383391217781, 0.07483246010753042, 0.03380959944751227, 0.02962813505951367, 0.018903448933411338, 0.05155263799398768, 0.057661476875271345, 0.044496042480222764, 0.04386298188800353, 0.039558845623448025, 0.042629566075520375, 0.9753630305897845, 0.982149872386771, 0.9788783709115402, 0.9894687390568204, 0.9908158116457987, 0.9690167766769204, 0.9876263460157967, 0.9935932138201713, 0.988509915992449, 0.1305381836933961, 0.1742137189918681, 0.04281921522521903, 0.1424287576054235, 0.14063017024532332, 0.14703639074658026, 0.15202014058571334, 0.16683307181278229, 0.07680339904547306, 0.10209761057155953, 0.22320826159232587, 0.12732314343742568, 0.1664752481313595, 0.18249738234709845, 0.14603533000305036, 0.18738484606446804, 0.13695156027566413, 0.23565503900875406, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025707391947839775, 0.09865288225477031, 0.06298309160053528, 0.05972331723681512, 0.045314629533823925, 0.04407477704664964, 0.01313479214832347, 0.09189504047799457, 0.00958762523278378, 0.020710363802829534, 0.0025169707621047754, 0.004193353095583885, 0.01496316904238737, 0.044234678096863767, 0.0334550926161965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032258595600408224, 0.03499021360117438, 0.015548792043418302, 9.999999999998899e-05, 9.999999999998899e-05, 0.018462954666603637, 9.999999999998899e-05, 0.05377668330198537, 0.010987092482852345, 0.02577860456124692, 9.999999999998899e-05, 9.999999999998899e-05, 0.006372650827415782, 0.005964915289027206, 0.00301356558823318, 0.03574110173568423, 0.07351550241037963, 0.07471311396466318, 0.07907603522571693, 0.11065375110172959, 0.05683523627408127, 0.06919295849352225, 0.07411966165476258, 0.07240909868834333, 0.08265478589987252, 0.1463302990424734, 0.15471418744916576, 0.20622995110868725, 0.3246259457647992, 0.22242910103196611, 0.29788280753295726, 0.17362664881403178, 0.3136982271319825, 0.27530568856935544, 0.30545938526771965, 0.30877323623633757, 0.07321306050223453, 0.06975603634312388, 0.0656750058421447, 0.04846179515575788, 0.03369373515081553, 0.047851284962743934, 0.032379717440293665, 0.04119495632972503, 0.05367908620625861, 0.09786129124448728, 0.09335601262763771, 0.14463000935980164, 0.1332130657937468, 0.1410396750066082, 0.15012180825157762, 0.1149766958328915, 0.10663160971946273, 0.1386060358665343, 0.1351917259043912, 0.14816502092356765, 0.1659164147094382, 0.15164184182123608, 0.13669905230437818, 0.15275759163666225, 0.2066824192817156, 0.18657698504948006, 0.14851955237166314, 0.08847112258070722, 0.137310993943091, 0.09752705893116453, 0.09538886750052755, 0.09064687059825449, 0.12996933058094784, 0.0946140515518531, 0.10825484621210235, 0.10136631852586564, 0.13704290769023286, 0.15050853659694785, 0.13521087628523343, 0.15330700108398865, 0.16572205790112016, 0.14264858878936137, 0.1529183279065237, 0.13417773703200508, 0.1409854952298778, 0.059575501425896626, 0.03281992388046295, 0.036690625039712876, 0.0650054896557909, 0.042880316862060175, 0.08097401026592455, 0.035081360878879586, 0.09225140781124896, 0.11886218491864531, 0.07622122869427261, 0.11042277132612033, 0.1648662300712127, 0.15356553870284695, 0.15958951046075487, 0.11280931198195776, 0.12413445724077488, 0.14990867308313227, 0.13376729561181078, 0.12458500804750583, 0.15461747823168293, 0.22255009484716615, 0.08690080919569987, 0.17503242110944228, 0.1458536224221907, 0.1914149014351324, 0.22548768462199043, 0.1774386728876165, 0.163321536990634, 0.1642783985638414, 0.16419236615703525, 0.14968929238267958, 0.14996266150317783, 0.15641386012312564, 0.1525316559515173, 0.170262597620353, 0.15191592864860703, 0.038815812855271026, 0.05002496885039942, 0.03919546680320729, 0.03703387247405954, 0.03969111207995524, 0.0343297724784577, 0.03971684524991248, 0.04406137735645821, 0.02722403025696729]}, "mutation_prompt": null}
