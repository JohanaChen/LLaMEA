{"id": "130215ea-3625-49a9-9630-2a9d7fc09aab", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, \n                                            (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            for i in range(self.population_size):\n                if evals >= self.budget:\n                    break\n\n                # Mutation and crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evals += 1\n\n                # Greedy selection\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            # Dynamic adjustment of F and CR\n            self.F = np.clip(np.random.normal(0.5, 0.1), 0, 1)\n            self.CR = np.clip(np.random.normal(0.9, 0.1), 0, 1)\n\n        return self.best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Greedy Selection and Dynamic Scaling to effectively explore and exploit the search space within budget constraints.", "configspace": "", "generation": 0, "fitness": 0.3870118425608748, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8006146492935099, 0.8207477062067546, 0.8081406209930085, 0.8137398109088709, 0.8153731219483921, 0.8005182647602871, 0.8013938489942765, 0.8134227521823872, 0.8267343252251107, 0.6876660393144975, 0.6709546658616506, 0.684509507642953, 0.6652017241722218, 0.6844016871137926, 0.6845318408281895, 0.6874059556570733, 0.6692384137446776, 0.6945091734811475, 0.11375315646864037, 0.13141858616189817, 0.12998297369114475, 0.10964726464243835, 0.12176040038959346, 0.1196021712944596, 0.13719299760007486, 0.12018900404531918, 0.1215788916247873, 0.11187615768974446, 0.10071870140856776, 0.12709537477817034, 0.09973291777333215, 0.11182322715719906, 0.1269143217850568, 0.10529050365639936, 0.11497510097339214, 0.1205654173324785, 0.8743558524870501, 0.8723537826987507, 0.863184452150085, 0.8819594972098825, 0.9064498476838528, 0.8105701478363524, 0.9361121213860334, 0.9220964634521814, 0.9224499669113377, 0.4592577882382106, 0.44043404472526426, 0.5172134643690468, 0.5331352557290928, 0.48829286437314146, 0.5385595699426944, 0.5008790580551572, 0.5084210150735753, 0.49981180465507036, 0.7692590070461713, 0.7726342861069222, 0.7648544238960713, 0.8137026494749624, 0.8114946258679855, 0.8185281924557856, 0.779920591134184, 0.7536675009131611, 0.8023741411248607, 0.1725818198055744, 0.20743227420389754, 0.19107999589335134, 0.19080600790856017, 0.2516437192094998, 0.2090905392366652, 0.19521400620475504, 0.24048517507655498, 0.18839407437704003, 0.264811129497615, 0.3478439947777603, 0.09902756462627116, 0.27145279005959233, 0.1787335301747589, 0.20243997914075862, 0.4354519594530851, 0.20183834208677354, 0.17745915560814352, 0.4645705043381957, 0.41830793897313423, 0.4814750350111393, 0.41907797661147483, 0.4414037280380635, 0.5244260440950586, 0.4641562038008916, 0.4782692353839817, 0.5294529524733163, 0.5711747740252302, 0.5653842911802199, 0.6258404342185873, 0.5402989817558017, 0.5789945870375377, 0.6179153539064368, 0.5586280070293823, 0.6000645137283576, 0.6124222211506541, 0.11601821543641655, 0.14478580674753339, 0.149795685646108, 0.32704299768533374, 0.2954920099064492, 0.39873364386698695, 0.24751914914447348, 0.15070352968594092, 0.14125418462429806, 0.30860471405081624, 0.3562418508581695, 0.3681661960405822, 0.3820265087525805, 0.3982343259430866, 0.3922440681058933, 0.3455340649426698, 0.3338860191055655, 0.36838273315489756, 0.7205843482577527, 0.7321624948691074, 0.7540976548405154, 0.7020834520465805, 0.7455401023983597, 0.7665966677416183, 0.7335759847156638, 0.732742944629341, 0.7398804730273454, 0.10836449670782844, 0.10362216240382405, 0.10730715257202084, 0.09519794250080194, 0.10577775516086585, 0.10276737027354432, 0.10124922169346395, 0.1092894958435976, 0.10021611815985831, 0.19381820616190515, 0.21113964751572212, 0.1334791094377037, 0.2185343391951664, 0.14130023558437166, 0.14177889307718816, 0.15020576633563176, 0.16474935930792745, 0.1818134053849676, 0.42831799217134303, 0.4225462154264744, 0.44667154497962414, 0.4237838440314182, 0.4313094028227641, 0.41057165349962765, 0.4076690012589498, 0.4705257459022322, 0.4450565051830988, 0.3281935674035191, 0.34040123606323447, 0.33531766458467516, 0.30263852717065964, 0.3306903344437989, 0.3727430446443747, 0.3155645997663864, 0.3491148936397753, 0.3861783601872205, 0.2242508293623625, 0.20707415079395264, 0.19710489570158118, 0.1989952525485167, 0.20872538059848944, 0.18454535711117992, 0.18962829423683936, 0.2086260900878536, 0.20864768736175443, 0.3116352816730643, 0.2726012257579501, 0.1968954510093459, 0.3383939450957457, 0.3025867419431977, 0.19003643233695144, 0.33262835454522677, 0.21459502763446836, 0.2688105176160529, 0.6818349816708189, 0.16555148409102172, 0.17017329214041765, 0.5773470942357728, 0.6244609450382337, 0.18751683243934314, 0.5980285777951331, 0.5191304551167283, 0.17835271385730378, 0.6880606696825804, 0.19461922022454914, 0.6996656699728747, 0.20549281756023585, 0.1952093364967703, 0.19572364724508384, 0.20759786310639505, 0.7488590667301736, 0.21103168328603428, 0.1782114776079945, 0.18162625194938886, 0.19248181740612125, 0.17454486045367013, 0.18795567882857067, 0.20979158373827123, 0.19712822021518883, 0.1770633042484394, 0.17741227917960478, 0.07498976016031722, 0.08899185058559433, 0.07039806777272517, 0.08795885069271825, 0.07873463150345994, 0.07380934365137892, 0.07781506412318573, 0.07959875007185946, 0.07893176624030984]}, "mutation_prompt": null}
{"id": "a95dd3a9-c63b-4caa-9c13-215a411abab9", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, \n                                            (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            for i in range(self.population_size):\n                if evals >= self.budget:\n                    break\n\n                # Mutation and crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evals += 1\n\n                # Greedy selection\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n            # Dynamic adjustment of F and CR\n            self.F = np.clip(np.random.normal(0.5, 0.1), 0, 1)\n            self.CR = np.clip(np.random.normal(0.9, 0.1), 0, 1)\n\n        return self.best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Greedy Selection and Dynamic Scaling to effectively explore and exploit the search space within budget constraints.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "130215ea-3625-49a9-9630-2a9d7fc09aab", "metadata": {"aucs": [0.8006146492935099, 0.8207477062067546, 0.8081406209930085, 0.8137398109088709, 0.8153731219483921, 0.8005182647602871, 0.8013938489942765, 0.8134227521823872, 0.8267343252251107, 0.6876660393144975, 0.6709546658616506, 0.684509507642953, 0.6652017241722218, 0.6844016871137926, 0.6845318408281895, 0.6874059556570733, 0.6692384137446776, 0.6945091734811475, 0.11375315646864037, 0.13141858616189817, 0.12998297369114475, 0.10964726464243835, 0.12176040038959346, 0.1196021712944596, 0.13719299760007486, 0.12018900404531918, 0.1215788916247873, 0.11187615768974446, 0.10071870140856776, 0.12709537477817034, 0.09973291777333215, 0.11182322715719906, 0.1269143217850568, 0.10529050365639936, 0.11497510097339214, 0.1205654173324785, 0.8743558524870501, 0.8723537826987507, 0.863184452150085, 0.8819594972098825, 0.9064498476838528, 0.8105701478363524, 0.9361121213860334, 0.9220964634521814, 0.9224499669113377, 0.4592577882382106, 0.44043404472526426, 0.5172134643690468, 0.5331352557290928, 0.48829286437314146, 0.5385595699426944, 0.5008790580551572, 0.5084210150735753, 0.49981180465507036, 0.7692590070461713, 0.7726342861069222, 0.7648544238960713, 0.8137026494749624, 0.8114946258679855, 0.8185281924557856, 0.779920591134184, 0.7536675009131611, 0.8023741411248607, 0.1725818198055744, 0.20743227420389754, 0.19107999589335134, 0.19080600790856017, 0.2516437192094998, 0.2090905392366652, 0.19521400620475504, 0.24048517507655498, 0.18839407437704003, 0.264811129497615, 0.3478439947777603, 0.09902756462627116, 0.27145279005959233, 0.1787335301747589, 0.20243997914075862, 0.4354519594530851, 0.20183834208677354, 0.17745915560814352, 0.4645705043381957, 0.41830793897313423, 0.4814750350111393, 0.41907797661147483, 0.4414037280380635, 0.5244260440950586, 0.4641562038008916, 0.4782692353839817, 0.5294529524733163, 0.5711747740252302, 0.5653842911802199, 0.6258404342185873, 0.5402989817558017, 0.5789945870375377, 0.6179153539064368, 0.5586280070293823, 0.6000645137283576, 0.6124222211506541, 0.11601821543641655, 0.14478580674753339, 0.149795685646108, 0.32704299768533374, 0.2954920099064492, 0.39873364386698695, 0.24751914914447348, 0.15070352968594092, 0.14125418462429806, 0.30860471405081624, 0.3562418508581695, 0.3681661960405822, 0.3820265087525805, 0.3982343259430866, 0.3922440681058933, 0.3455340649426698, 0.3338860191055655, 0.36838273315489756, 0.7205843482577527, 0.7321624948691074, 0.7540976548405154, 0.7020834520465805, 0.7455401023983597, 0.7665966677416183, 0.7335759847156638, 0.732742944629341, 0.7398804730273454, 0.10836449670782844, 0.10362216240382405, 0.10730715257202084, 0.09519794250080194, 0.10577775516086585, 0.10276737027354432, 0.10124922169346395, 0.1092894958435976, 0.10021611815985831, 0.19381820616190515, 0.21113964751572212, 0.1334791094377037, 0.2185343391951664, 0.14130023558437166, 0.14177889307718816, 0.15020576633563176, 0.16474935930792745, 0.1818134053849676, 0.42831799217134303, 0.4225462154264744, 0.44667154497962414, 0.4237838440314182, 0.4313094028227641, 0.41057165349962765, 0.4076690012589498, 0.4705257459022322, 0.4450565051830988, 0.3281935674035191, 0.34040123606323447, 0.33531766458467516, 0.30263852717065964, 0.3306903344437989, 0.3727430446443747, 0.3155645997663864, 0.3491148936397753, 0.3861783601872205, 0.2242508293623625, 0.20707415079395264, 0.19710489570158118, 0.1989952525485167, 0.20872538059848944, 0.18454535711117992, 0.18962829423683936, 0.2086260900878536, 0.20864768736175443, 0.3116352816730643, 0.2726012257579501, 0.1968954510093459, 0.3383939450957457, 0.3025867419431977, 0.19003643233695144, 0.33262835454522677, 0.21459502763446836, 0.2688105176160529, 0.6818349816708189, 0.16555148409102172, 0.17017329214041765, 0.5773470942357728, 0.6244609450382337, 0.18751683243934314, 0.5980285777951331, 0.5191304551167283, 0.17835271385730378, 0.6880606696825804, 0.19461922022454914, 0.6996656699728747, 0.20549281756023585, 0.1952093364967703, 0.19572364724508384, 0.20759786310639505, 0.7488590667301736, 0.21103168328603428, 0.1782114776079945, 0.18162625194938886, 0.19248181740612125, 0.17454486045367013, 0.18795567882857067, 0.20979158373827123, 0.19712822021518883, 0.1770633042484394, 0.17741227917960478, 0.07498976016031722, 0.08899185058559433, 0.07039806777272517, 0.08795885069271825, 0.07873463150345994, 0.07380934365137892, 0.07781506412318573, 0.07959875007185946, 0.07893176624030984]}, "mutation_prompt": null}
