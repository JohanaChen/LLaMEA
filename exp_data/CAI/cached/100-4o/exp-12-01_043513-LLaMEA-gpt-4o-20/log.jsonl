{"id": "0f773b81-836c-4505-80ae-f26cc1fc4da6", "solution": "import numpy as np\n\nclass HybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3 * np.log(dim))  # Empirical choice for population size\n        self.F = 0.5  # Mutation factor\n        self.CR = 0.9  # Crossover rate\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.adaptive_factor = 0.1  # Factor for hybridization of strategies\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            new_population = []\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                # Mutation\n                mutant = a + self.F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)  # Ensure bounds\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                \n                # Fitness evaluation\n                f_trial = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if f_trial < func(self.population[i]):\n                    new_population.append(trial)\n                    if f_trial < self.best_fitness:\n                        self.best_fitness = f_trial\n                        self.best_solution = trial\n                else:\n                    new_population.append(self.population[i])\n\n            # Adaptive strategy with swarm behavior\n            if np.random.rand() < self.adaptive_factor:\n                swarm_center = np.mean(new_population, axis=0)\n                for j in range(self.population_size):\n                    perturbation = np.random.normal(0, 1, self.dim)\n                    candidate = swarm_center + perturbation * (self.upper_bound - self.lower_bound) * 0.1\n                    candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                    f_candidate = func(candidate)\n                    evaluations += 1\n                    if f_candidate < self.best_fitness:\n                        self.best_fitness = f_candidate\n                        self.best_solution = candidate\n                    if f_candidate < func(new_population[j]):\n                        new_population[j] = candidate\n\n            self.population = np.array(new_population)\n\n        return self.best_solution, self.best_fitness", "name": "HybridAdaptiveDE", "description": "A hybrid adaptive differential evolution algorithm combining exploration and exploitation using swarm intelligence principles for robust black box optimization.", "configspace": "", "generation": 0, "fitness": 0.3212861567444713, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.783651538624761, 0.7934388841445807, 0.7987720459442107, 0.7467694627682607, 0.7824567511694593, 0.7787006079586786, 0.7730074118789669, 0.7866576433546213, 0.7374163921453509, 0.5961303437976229, 0.6029231213720401, 0.5965774906404255, 0.5549654068112502, 0.6518992475619213, 0.6031528324395085, 0.5386356834977865, 0.6359016840632057, 0.5706394834480406, 0.11079366966455761, 0.14003149467778586, 0.10220917498630877, 0.12583327374861109, 0.11777910556418136, 0.09179310030336307, 0.11145186418577635, 0.11121559778478318, 0.11113370649400911, 0.11948878814341768, 0.09256985748944135, 0.1035058184683958, 0.10726293970408152, 0.11745706623123042, 0.12808889679756308, 0.09928512981797843, 0.11184573186483826, 0.10413510217330457, 0.9109995510225031, 0.8960473629276093, 0.9278683536790329, 0.9053976053340914, 0.7866949143660631, 0.8993589662662048, 0.903829548829351, 0.7740723782723482, 0.8630739739440116, 0.26961367463201036, 0.2703466259705841, 0.23036092221097226, 0.22644861474919054, 0.3140737994150816, 0.2910784294288016, 0.3386210663845821, 0.17901042216685148, 0.19326896632637358, 0.7933948881249404, 0.7659430304943896, 0.22249083220528, 0.7549036901615154, 0.8223609909892708, 0.768994507052421, 0.8111839878085142, 0.7040634598214892, 0.7625061047024083, 0.1677439023051469, 0.20587803758206624, 0.1844758155400804, 0.1431314631052223, 0.22027126580042622, 0.13780337356357863, 0.32487338060355564, 0.19877267495242246, 0.24313159346768665, 0.16731254885933777, 0.13677118347381934, 0.13068705917849854, 0.16266023794134798, 0.1873490434803552, 0.12605667268906962, 0.13573931445921494, 0.17928132749498837, 0.13191459087990665, 0.11028373130523783, 0.4193147721984195, 0.1651496077296637, 0.3852058924820637, 0.1892564717817754, 0.003394681676210931, 0.19874344679991385, 0.011968985219989903, 0.4431264255588906, 0.3182155833987863, 0.3690675826243187, 0.30020598479864025, 0.43325549570994104, 0.4905722081049293, 0.20834540602255036, 0.44981531139523945, 0.6006893517102878, 0.312029743259289, 0.19206717495494763, 0.20597659408199975, 0.17286280982470326, 0.06630438251805482, 0.09138897756626996, 0.1520681755064568, 0.2166585871997686, 0.14729139449716078, 0.15167105898994238, 0.26914094453666537, 0.25750454872961714, 0.3015791241465978, 0.3078184718636473, 0.298241020926838, 0.2737244914464302, 0.26010096059518295, 0.24387789233778367, 0.25095036739210275, 0.45136445944591774, 0.5227512429121008, 0.717573400554646, 0.5386674917837224, 0.603899495609165, 0.6655946636363552, 0.6462357357484338, 0.6817464734411143, 0.6346099384535226, 0.09546644683884864, 0.10346086466410576, 0.09018058036170007, 0.09479755824858183, 0.12473953101274071, 0.08824686521921743, 0.10636855048260785, 0.12385518582165622, 0.0990594574052639, 0.14553546303191778, 0.15691976011176845, 0.13976557361120412, 0.14640909119965195, 0.15827403136725027, 0.2224162085522462, 0.13150746637290445, 0.145662452023532, 0.14584011092834792, 0.37311596721568285, 0.40816051718138313, 0.39533002942003237, 0.40409325489937387, 0.39799358987910183, 0.4012938943256892, 0.4069180931461127, 0.4107521077376197, 0.40547057802254427, 0.28415868349784346, 0.3343264619536527, 0.32455363280474736, 0.2513303707387614, 0.30308324738914405, 0.3429533762372724, 0.3226557299039249, 0.3212300495396123, 0.2946156825801812, 0.19595488943487893, 0.18153152982501242, 0.18884216158993217, 0.18796515287554338, 0.18754640414358326, 0.19674717159802602, 0.18536370380303646, 0.18012380293222563, 0.1952436918495779, 0.6030628263507953, 0.17703471417896366, 0.19755102440859085, 0.17485315367609056, 0.29809410226194133, 0.2714591310989731, 0.25518560579170557, 0.19953743844788374, 0.3269758245177051, 0.17094459277483853, 0.15367416463822559, 0.16751147277724043, 0.17222289450497608, 0.19908596299954107, 0.19037835301110995, 0.17027050632671603, 0.16689313438810682, 0.7571991370271637, 0.7656615944136281, 0.2126056930003739, 0.6568289839956849, 0.16060553297779612, 0.727247353833358, 0.20053384649960837, 0.15942614959281598, 0.12649530889660743, 0.1541958787587122, 0.17291641388154655, 0.1755062687256097, 0.1921211615146794, 0.17860739868676423, 0.1811288651745011, 0.18602297522153954, 0.17662927103987824, 0.17985149423733893, 0.1931600245273727, 0.0735217385501108, 0.0796976670695051, 0.0781925640017973, 0.08657070343466111, 0.07706253781229588, 0.08282373113502361, 0.08346557163886104, 0.06881955324362188, 0.07857150112527556]}, "mutation_prompt": null}
{"id": "df743dca-8a16-4f71-a930-2a3b1773362c", "solution": "import numpy as np\n\nclass EnhancedHybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3 * np.log(dim))  # Empirical choice for population size\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.adaptive_factor = 0.1  # Factor for hybridization of strategies\n        self.initial_F = 0.5  # Initial mutation factor\n        self.initial_CR = 0.9  # Initial crossover rate\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            new_population = []\n            F = self.initial_F * (1 - evaluations / self.budget)  # Dynamic mutation factor\n            CR = self.initial_CR * (1 - evaluations / self.budget)  # Dynamic crossover rate\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                # Mutation\n                mutant = a + F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)  # Ensure bounds\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                \n                # Fitness evaluation\n                f_trial = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if f_trial < func(self.population[i]):\n                    new_population.append(trial)\n                    if f_trial < self.best_fitness:\n                        self.best_fitness = f_trial\n                        self.best_solution = trial\n                else:\n                    new_population.append(self.population[i])\n\n            # Adaptive strategy with swarm behavior\n            if np.random.rand() < self.adaptive_factor:\n                swarm_center = np.mean(new_population, axis=0)\n                for j in range(self.population_size):\n                    perturbation = np.random.normal(0, 1, self.dim)\n                    candidate = swarm_center + perturbation * (self.upper_bound - self.lower_bound) * 0.1\n                    candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                    f_candidate = func(candidate)\n                    evaluations += 1\n                    if f_candidate < self.best_fitness:\n                        self.best_fitness = f_candidate\n                        self.best_solution = candidate\n                    if f_candidate < func(new_population[j]):\n                        new_population[j] = candidate\n\n            self.population = np.array(new_population)\n\n        return self.best_solution, self.best_fitness", "name": "EnhancedHybridAdaptiveDE", "description": "An enhanced hybrid adaptive differential evolution with dynamic mutation and crossover rates for improved convergence and robustness in black box optimization.", "configspace": "", "generation": 1, "fitness": 0.30768213113326187, "feedback": "", "error": "", "parent_id": "0f773b81-836c-4505-80ae-f26cc1fc4da6", "metadata": {"aucs": [0.777933491031551, 0.7745025792709189, 0.7872560651228206, 0.7796183040634741, 0.8003651492701962, 0.7773904005109402, 0.8016219508424866, 0.7981851031869746, 0.7638464727068655, 0.6199924543362403, 0.6656002014673827, 0.6094709060113368, 0.6132491729787445, 0.61061721362621, 0.6498398395016043, 0.6378284605128859, 0.644336527546183, 0.6086280769400734, 0.1603564863302117, 0.13592336987688758, 0.18275779380151314, 0.23938339248634766, 0.19100481292643334, 0.1413658218454309, 0.1678382912634474, 0.12213039026116113, 0.18412594634295876, 0.13205286349097112, 0.12212576364679084, 0.12257673431678306, 0.10700109372621869, 0.11310507474476639, 0.16387144917371876, 0.13193068823756693, 0.12351909773483238, 0.1203699763142515, 0.9079111797497447, 0.8799649931264627, 0.9107256175681588, 0.9011455234970017, 0.9254436946370385, 0.9204117821199942, 0.9016764752071444, 0.7928991900305122, 0.861364181254815, 0.2727183965598742, 0.29334350734009174, 0.2798442609438212, 0.2508285898360867, 0.22827544218098783, 0.37540071825858523, 0.29669902460804864, 0.30287234774539806, 0.162638266172749, 0.7776822426207026, 0.6764722116177315, 0.3482068048210668, 0.7098998315055403, 0.728108253869417, 0.6272266062272431, 0.8030843382555284, 0.7002578910598134, 0.7380660604107311, 0.1313495779477153, 0.11741534689560484, 0.13634820622800436, 0.16127047741841993, 0.14110186605054986, 0.13778615334896782, 0.2203083690229729, 0.19954183179847518, 0.15656474775752016, 0.1337875489088115, 0.14419522546475727, 0.13442673437570662, 0.14113385964867664, 0.24472718867172893, 0.16188664568929323, 0.10647429582173773, 0.2009792906432193, 0.13027262715969823, 0.12286711795167926, 0.07869501506819854, 0.15211721859306304, 0.057459410788962995, 0.14983219511617807, 0.040014175682769215, 0.0462855947214279, 0.04092982513112953, 0.13631043203929805, 0.1652310332378646, 0.1794858619841323, 0.24415574516035277, 0.276829587572333, 0.11113962479328854, 0.10566861551850759, 0.19808723226705371, 0.32516713765788163, 0.32398812987073733, 0.03090540576232237, 0.07457209780457974, 0.06902312996301552, 0.07867012211148117, 0.0896236637221618, 0.05274615001951277, 0.05627320332410657, 0.10134152245965355, 0.08214070646582572, 0.16736214003743355, 0.16724651147121716, 0.2064682476673848, 0.19761482059305158, 0.17975788130509596, 0.19401565330713644, 0.17503751952671698, 0.18652064796673384, 0.18201215966263806, 0.5897864490020902, 0.5019541504466125, 0.611944536123821, 0.5231198177442916, 0.560191444655775, 0.5227350126104733, 0.565513274199662, 0.49776986173417803, 0.5744580262294493, 0.09619029884588104, 0.10825317904020815, 0.09346573448031958, 0.1104994853042246, 0.08901239741676636, 0.09389655387405493, 0.09568311596807655, 0.09073607558356267, 0.08071465050576987, 0.14121979766574022, 0.1335647863793007, 0.1370273534634987, 0.1426152255406754, 0.1300423673490877, 0.1503542642506711, 0.15782213040499715, 0.13706557759443116, 0.14431057429304017, 0.3818920407217872, 0.36157684620969666, 0.3469914101227053, 0.3543816378535526, 0.40004495569012966, 0.4008986170728642, 0.41441388964218673, 0.40315421378372396, 0.40325895715760796, 0.25642888785854934, 0.2456793409850787, 0.24972401169172787, 0.245613744338263, 0.25595045938524885, 0.24233011027352813, 0.292333342111485, 0.32224906313837576, 0.21362904167897723, 0.20950758428922778, 0.18694382043990443, 0.2246353335787682, 0.2018784812893255, 0.20554632161745778, 0.19047245718996442, 0.18263071267552966, 0.1991285077184498, 0.17573651718659822, 0.2794000126837093, 0.3497721146343541, 0.2025561957795895, 0.21366265391382644, 0.24772624941984245, 0.20580332122026512, 0.2622181191474823, 0.18202338980293964, 0.1906553918983721, 0.6779946354170158, 0.6985838751904843, 0.1874574941493714, 0.17797963901497638, 0.42033808686614726, 0.6464294811341018, 0.16381793545369205, 0.15191824793530817, 0.6945232514029298, 0.6534616751854468, 0.4018274484859118, 0.6946680617011749, 0.5216396520733576, 0.2663579623068122, 0.19466474736274564, 0.16214926658886852, 0.6739697437721663, 0.19029910405129313, 0.17307659193247948, 0.17468298311487174, 0.19240705924822055, 0.16931925406125758, 0.17336889829092306, 0.16869141086403472, 0.17679721759541023, 0.1755554398073249, 0.17355636195070567, 0.08519611893290635, 0.07680911461312012, 0.08104873089917697, 0.07812995414690371, 0.08188094613371066, 0.08377828776736951, 0.07495257638655095, 0.08634697257745738, 0.07481382761433486]}, "mutation_prompt": null}
