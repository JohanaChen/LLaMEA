{"id": "56d56ab2-f06a-460d-8f1c-bbf806b34a0e", "solution": "import numpy as np\n\nclass SpiralOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def compute_spiral_trajectory(self, center, radius, theta, scale_factor=0.9):\n        delta = radius * np.sin(theta)\n        direction = np.random.uniform(-1, 1, self.dim)\n        direction /= np.linalg.norm(direction)\n        return np.clip(center + delta * direction, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        center = self.random_solution()\n        best_solution = center\n        best_value = func(center)\n        \n        radius = (self.upper_bound - self.lower_bound) / 2\n        theta = np.pi / 4\n        \n        while self.evaluations < self.budget:\n            next_solution = self.compute_spiral_trajectory(center, radius, theta)\n            self.evaluations += 1\n            current_value = func(next_solution)\n            \n            if current_value < best_value:\n                best_value = current_value\n                best_solution = next_solution\n                center = next_solution\n                radius *= 0.95  # Reduce radius to exploit\n            else:\n                theta += np.pi / 12  # Increment angle to explore\n                \n            if self.evaluations % (self.budget / 10) == 0:\n                radius = max(radius, 0.1)  # Reset radius periodically to ensure exploration\n        \n        return best_solution", "name": "SpiralOptimizer", "description": "Adaptive Spiral Search utilizing non-linear dynamic trajectories for efficient exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.24634309056327586, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6544567425784698, 0.6441915638574295, 0.6527800821375948, 0.6003636927419848, 0.6009825265310155, 0.6000458301647271, 0.6285928265070151, 0.6244420026572122, 0.6332601568196905, 0.06439076627400209, 9.999999999998899e-05, 9.999999999998899e-05, 0.04439594870509922, 0.0021481772408705746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09294048292027057, 0.08369951507675455, 0.08317929190686313, 0.1115435473459323, 0.07087853612517392, 0.13570588278975426, 0.08365652695332615, 0.0983944488938121, 0.0799155127013993, 0.06990211097296073, 0.04752418285587845, 0.057357299877235035, 0.03309524721671664, 0.08411331344846984, 0.11318114995723116, 0.07297454357491828, 0.08360796832067441, 0.16378392350452808, 0.9959282769958571, 0.9812344991932639, 0.6582239886069811, 0.9938617032763637, 0.9751268552228071, 0.9803546433506123, 0.9327955741157594, 0.9869052483030539, 0.9698194141064199, 0.5464467226721947, 0.5803326850483895, 0.6077776565127193, 0.6848870889315762, 0.6196029368171991, 0.6043252716651807, 0.5058179790251778, 0.5303718894705977, 0.5050599075003355, 0.2755304388120081, 0.22909336324639928, 0.26100683745527287, 0.21884369865887998, 0.33662760157091065, 0.29602015600407916, 0.2423152102585181, 0.21843080754925293, 0.25583330017055306, 0.24926266245612427, 0.23392051865448538, 0.18821297329092734, 0.2185981720893806, 0.26533125115285894, 0.24754388573679276, 0.2077866350766091, 0.19968692668368238, 0.20040111794099913, 0.13617346128601016, 0.03544669144032431, 0.1969364863355053, 0.2573229104160778, 0.15896732622259935, 0.2105662736790691, 0.192693830707798, 0.1551875960400112, 0.20492680843387812, 9.999999999998899e-05, 9.999999999998899e-05, 0.10317186277253199, 0.06969261351881251, 9.999999999998899e-05, 0.01177599437723642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03977113914496222, 0.05365746041709185, 0.039936390478924166, 0.0349493259676632, 0.0324539399855448, 0.007026463124295335, 0.08229413064135138, 0.04899952954183395, 0.04728692200930584, 0.23541567711192235, 0.0640059938178672, 0.19079757455451396, 0.1473639661911511, 0.14819308982814416, 0.13515599269278533, 0.23511408793165445, 0.19355717141789852, 0.08138544729263941, 0.15304978111445255, 0.10510394454275718, 0.05238368506498703, 0.13340102732282777, 0.19390871733144688, 0.11486657140927947, 0.11136179170058402, 0.11180579270375035, 0.1058399780079331, 0.5867364455732889, 0.5723342661223476, 0.5674711484203547, 0.5907445160058542, 0.5418291392044301, 0.5497666865125463, 0.5661279523262679, 0.5934947672622501, 0.5609321938288518, 0.0763424549363586, 0.07113700336512663, 0.1018601194207357, 0.10615829445998937, 0.14727394170269048, 0.05119560535408041, 0.0651436577163702, 0.0981382187498091, 0.06481291864134986, 0.13542926378663522, 0.1693177323012689, 0.47036326711014154, 0.20616241980014804, 0.1590289950095879, 0.26681303230234876, 0.26431366427560266, 0.27833964973969005, 0.17874145791583307, 0.12285601508280275, 0.2675090152760726, 0.21911480410370487, 0.2772860009747785, 0.4775139962944821, 0.48281713934002646, 0.41939383110948114, 0.20162209280635057, 0.1196177144108127, 0.09669729060399845, 0.1366988952614141, 0.2808701262750225, 0.211481113730277, 0.2922188034550861, 0.1399806428719519, 0.28565752444826675, 0.12201037750908361, 0.088714519594284, 0.1545168261198523, 0.14207904409169003, 0.20749544531635666, 0.24170087509382876, 0.26326225154111715, 0.20757948071665178, 0.18863061062476805, 0.17082361361679155, 0.22491164738423175, 0.1717154083266852, 0.18421377082443713, 0.19655620267843366, 0.19670224119081636, 0.180388752281873, 0.22923217376963678, 0.22824615907771117, 0.18023650077956188, 0.19060511217655574, 0.1707437874035017, 0.13730105778503332, 0.8306973841489453, 0.17383882312809384, 0.1898507528396639, 0.1232008522205047, 0.09793517119689765, 0.12725624552086867, 0.16362632643377417, 0.7673293407087569, 0.11352646303425573, 0.6978788177548974, 0.08336331482971404, 0.10517797764383774, 0.21214601705715996, 0.11364676819215824, 0.1686057280477229, 0.20938576532448228, 0.2475489747418721, 0.259415110168281, 0.2586812829619114, 0.21722296143220643, 0.23870378944652504, 0.2113983244604889, 0.2998647790693446, 0.17414796801970822, 0.24016578830458302, 0.037148988691941165, 0.10673225225157146, 0.07379979307671947, 0.15000712847913567, 0.08773139022323573, 0.09187163668427856, 0.09863264289464513, 0.08970714068340635, 0.04888304134795163]}, "mutation_prompt": null}
{"id": "7da6a9af-b5ad-409a-b428-2a67f4a88192", "solution": "import numpy as np\n\nclass SpiralOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def compute_spiral_trajectory(self, center, radius, theta, scale_factor=0.9):\n        delta = radius * np.sin(theta)\n        direction = np.random.uniform(-1, 1, self.dim)\n        direction /= np.linalg.norm(direction)\n        return np.clip(center + delta * direction, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        center = self.random_solution()\n        best_solution = center\n        best_value = func(center)\n        \n        radius = (self.upper_bound - self.lower_bound) / 2\n        theta = np.pi / 4\n        prev_best_value = best_value\n        \n        while self.evaluations < self.budget:\n            next_solution = self.compute_spiral_trajectory(center, radius, theta)\n            self.evaluations += 1\n            current_value = func(next_solution)\n            \n            if current_value < best_value:\n                best_value = current_value\n                best_solution = next_solution\n                center = next_solution\n                radius *= 0.95  # Reduce radius to exploit\n                theta += max(0.01, 0.1 * abs(current_value - prev_best_value))  # Adaptive theta adjustment\n            else:\n                theta += np.pi / 12  # Increment angle to explore\n            \n            prev_best_value = best_value\n                \n            if self.evaluations % (self.budget / 10) == 0:\n                radius = max(radius, 0.1)  # Reset radius periodically to ensure exploration\n        \n        return best_solution", "name": "SpiralOptimizer", "description": "Enhanced Adaptive Spiral Search with dynamic theta adjustment based on improvement velocity for improved exploration.", "configspace": "", "generation": 1, "fitness": 0.22205631992079694, "feedback": "", "error": "", "parent_id": "56d56ab2-f06a-460d-8f1c-bbf806b34a0e", "metadata": {"aucs": [0.5135125613881008, 0.5864868477009002, 0.4735940982552789, 0.5019854636580217, 0.572020383102642, 0.5946542108584613, 0.40288503506818496, 0.6448587679457187, 0.5995795864467393, 0.03535594993937996, 9.999999999998899e-05, 0.0029628067274792835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10868527459867217, 0.10814729968278902, 0.09558097544190336, 0.08628790609049775, 0.10669949668782552, 0.16257723423273185, 0.14145316478755432, 0.10555647518823774, 0.0960461109201568, 0.08894389972051064, 0.10226813472461527, 0.06913667945022173, 0.06106097359372509, 0.0959891946207857, 0.07011337577601173, 0.08324008997269772, 0.07302422984469836, 0.11039389662497867, 0.9957150939964386, 0.9831743903313797, 0.9337375287789854, 0.9830163970350074, 0.992176238945816, 0.9767746069813646, 0.5284720389534843, 0.9864317391080609, 0.9851415036196435, 0.5209566577289884, 0.4664175069396165, 0.60322937052174, 0.6249675787942613, 0.5374412196307632, 0.48830631960240467, 0.5150693932727848, 0.5185904205705005, 0.5229481377615206, 0.36321916943595944, 0.30362365336803543, 0.34311742617053975, 0.27934414009746467, 0.21465724955909304, 0.28055387272312804, 0.24110988295912272, 0.2478321884632796, 0.3165172069133573, 0.1454109217907913, 0.12593199949259648, 0.006837030188851401, 0.10209991961397502, 0.13088145305544863, 0.13321125750202412, 0.15832757684414522, 0.23241891277562732, 0.23204993951551212, 0.15776186789595836, 0.12043281562825192, 0.1629213450227882, 0.12701168828191256, 0.11642915344629035, 0.20971018799089192, 0.13375286143565535, 0.20860692670564063, 0.22112914813960505, 0.03453881289248839, 0.03456598569400793, 0.07631130297013133, 0.11381196786220038, 0.06771773594648567, 0.000553361826865717, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09634544058606498, 0.11664749211766035, 0.08586367524223537, 0.14875568878207357, 0.0758189733550344, 0.051398196736187174, 0.0903540634856217, 0.06074166048405749, 0.1340800224652845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032066491523451424, 0.002444527166633681, 9.999999999998899e-05, 9.999999999998899e-05, 0.14834160818728304, 0.1275229387054102, 0.108949787059896, 0.13046176248684405, 0.05165811314228741, 0.08558094688116857, 0.12136389420453031, 0.14994510396001992, 0.1336468154954451, 0.4775733290353533, 0.4293549032848426, 0.4056736909984169, 0.5104021530470376, 0.46295634707683453, 0.5459844453650033, 0.43658545520497005, 0.4934231442605832, 0.45052869821438957, 0.09833915635306545, 0.05477621851301551, 0.09225129566037682, 0.09289129726803691, 0.11348857219874098, 0.10577483306205016, 0.09332885645022893, 0.07889914417324739, 0.12751684649873263, 0.22920542454359039, 0.14603256948053056, 0.17320328103990124, 0.287574873657356, 0.1915982053843398, 0.16780573869289617, 0.17820468042224724, 0.17822690701435617, 0.30171355922135334, 0.31663266185129646, 0.25389364772930845, 0.13624005441281328, 0.30864476441300626, 0.3019556224579002, 0.2190749748546843, 0.27402042832666307, 0.27288658518155307, 0.2109528311696034, 0.16944312533537886, 0.19489155878253772, 0.21529153664789458, 0.18496097531416755, 0.182063561952009, 0.1987155359587327, 0.12369906197632097, 0.11618523192401131, 0.19741251529647774, 0.21386488190120811, 0.21465786092255845, 0.19555428694123422, 0.2109600475198815, 0.21030472938412836, 0.2107469359279096, 0.1856110610001761, 0.22016398361584455, 0.23148222330907486, 0.18874788838658174, 0.18587586360755093, 0.20847060355180402, 0.20152104645808466, 0.17926091698980984, 0.19899059879633996, 0.1978810437452998, 0.2263574381864184, 0.1918113540791625, 0.1596270806628376, 0.13729678444274718, 0.1895107930895148, 0.17372062589802195, 0.19004078389710288, 0.20172028612820314, 0.09770686037903675, 0.12673585971847445, 0.16363934757752963, 0.5932774010253878, 0.2140887194397847, 0.5043683501402558, 0.08344429403268261, 0.1051640661843185, 0.21383602248245492, 0.11357690732391768, 0.16972607295567355, 0.09453806029071543, 0.18241091552388267, 0.20462235202780754, 0.1925603702800497, 0.18411364726646717, 0.18344808305911742, 0.20139840423703737, 0.17901432252679084, 0.18616717022981266, 0.19435319702032827, 0.08919595894122101, 0.12652829665667908, 0.09173988475743444, 0.08114672655824029, 0.09504929820041108, 0.07805102039630696, 0.07370911525926893, 0.08021982860726695, 0.08412470174884745]}, "mutation_prompt": null}
