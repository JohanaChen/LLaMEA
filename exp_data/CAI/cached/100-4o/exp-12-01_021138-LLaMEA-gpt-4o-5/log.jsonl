{"id": "8bb7f729-5cd7-42f9-a5ea-340c3f346666", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.num_particles, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_value = np.full(self.num_particles, np.inf)\n        self.global_best = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.num_particles):\n                if self.evaluations >= self.budget:\n                    break\n                value = func(self.particles[i])\n                self.evaluations += 1\n\n                if value < self.personal_best_value[i]:\n                    self.personal_best_value[i] = value\n                    self.personal_best[i] = self.particles[i].copy()\n\n                if value < self.global_best_value:\n                    self.global_best_value = value\n                    self.global_best = self.particles[i].copy()\n\n            if self.global_best is not None:\n                neighborhood_range = np.clip(self.global_best_value, 1e-3, 5.0) / 5.0\n                neighbors = self.particles + np.random.uniform(-neighborhood_range, neighborhood_range, self.particles.shape)\n                neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n\n                for i in range(self.num_particles):\n                    if self.evaluations >= self.budget:\n                        break\n                    value = func(neighbors[i])\n                    self.evaluations += 1\n\n                    if value < self.personal_best_value[i]:\n                        self.personal_best_value[i] = value\n                        self.personal_best[i] = neighbors[i].copy()\n\n                    if value < self.global_best_value:\n                        self.global_best_value = value\n                        self.global_best = neighbors[i].copy()\n\n            w = self.w_max - (self.w_max - self.w_min) * (self.evaluations / self.budget)\n\n            for i in range(self.num_particles):\n                cognitive_component = self.c1 * np.random.rand(self.dim) * (self.personal_best[i] - self.particles[i])\n                social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                self.velocities[i] = w * self.velocities[i] + cognitive_component + social_component\n                self.particles[i] += self.velocities[i]\n                self.particles[i] = np.clip(self.particles[i], self.lower_bound, self.upper_bound)\n\n        return self.global_best", "name": "AdaptiveNeighborhoodPSO", "description": "A hybrid particle swarm optimization algorithm with adaptive neighborhood search for enhanced convergence in varied landscapes.", "configspace": "", "generation": 0, "fitness": 0.19418202134303877, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.44463126792372076, 0.4671961560147285, 0.4948439072715193, 0.5001483366936111, 0.5545289450694096, 0.5029010356953204, 0.34750590395636793, 0.47580052609141343, 0.5051741290238938, 0.035948963145309265, 0.022706633714425495, 0.05832316367667589, 0.14608741022815352, 9.999999999998899e-05, 0.10171135191943559, 0.10008821362724152, 0.15438243695763754, 0.02727990083885945, 0.05884948334970941, 0.09060800366672117, 0.10495835471292281, 0.09354317167977244, 0.08077636712319891, 0.09386635961912726, 0.09644706229314703, 0.08448093214121077, 0.09696718785328662, 0.07962002246067257, 0.08656275130390056, 0.09960617739057875, 0.06873890394318805, 0.08166672840371014, 0.07885217096106112, 0.07592830552259366, 0.09107438854704686, 0.07069160868164004, 0.9835182646221824, 0.9886168636304781, 0.9883967448415124, 0.9677661464390935, 0.9831273460921088, 0.9776407235136502, 0.9822856120111796, 0.9829688576342024, 0.9829330171190722, 0.22031269042881518, 0.2637099906859156, 0.23750363833163013, 0.23584332185998602, 0.2051220567352373, 0.20033003397095706, 0.2522767887289463, 0.11834815788870912, 0.10837152397377703, 0.2794909740599282, 0.19445470127601294, 0.22607469923018286, 0.1970798446779436, 0.20235235602823898, 0.3032023445059324, 0.2071189364599919, 0.20870761932885518, 0.2774517580744702, 0.1171209439772396, 0.08923243029825567, 0.07069858755704483, 0.03252771538227517, 0.10425365858641289, 0.08484707540741188, 0.12354811260372867, 0.12591809825380862, 0.12979657713177728, 0.09876940869957929, 0.10330897124243876, 0.0907295680041631, 0.08404805663817627, 0.16214847060316295, 0.14476564284145899, 0.09626940844615506, 0.08906545546402178, 0.10598845761658338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00020454979797523976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04123753074701986, 0.05373204299256917, 0.057291598894915086, 0.06264671642331288, 0.02008184194984819, 0.019052690000182504, 0.060979266114074004, 0.050168706687704234, 0.0510524852705555, 0.03145770245541735, 0.0157255947026268, 0.02135806103975224, 0.027527932654545118, 0.04463581282354667, 0.04399897565307187, 0.034185013953649146, 0.023346841677954977, 0.02762177593850179, 0.0907716435060727, 0.04280848698588835, 0.1305415814312888, 0.07523839367182594, 0.029363972001674066, 0.06722460650363571, 0.03538502549072686, 0.04399850057333954, 0.05193708248460149, 0.3759577412919314, 0.36846762611819517, 0.36699471283709406, 0.3625882561510414, 0.39574967662180516, 0.35237296702762433, 0.38218971711071326, 0.3484977662747153, 0.36274390296616155, 0.11174631985485506, 0.10522963692953602, 0.10680506089423247, 0.0891440468193716, 0.09698000224928927, 0.09843403855413779, 0.07356277245172316, 0.0629839039014134, 0.06319507929477108, 0.1929391429574301, 0.13991144280357604, 0.15921786312443986, 0.2119442125602522, 0.22540430237026388, 0.15038747965386978, 0.1493196033261487, 0.16352348634775593, 0.18198422206387288, 0.2530355006767079, 0.2942553944843056, 0.205161156266504, 0.2523009013886073, 0.18390148616776192, 0.2659728800861527, 0.27234570414526704, 0.27516683502121575, 0.28100456777049465, 0.17696993164359465, 0.2265043929904499, 0.18000075184577669, 0.17627893674924544, 0.15685641546878282, 0.1632857710907698, 0.18527231821897872, 0.19780491939588896, 0.2151279316233986, 0.17612424803719873, 0.13522006058650693, 0.16287775620341127, 0.17616312361391828, 0.1681060193240308, 0.19203245549738057, 0.20605309191627252, 0.19466047672275466, 0.18881626656750738, 0.19943315468047706, 0.18836954755055235, 0.19609207061517842, 0.18205543618191755, 0.20514253318620557, 0.18136402418620068, 0.17774351941423827, 0.1780508582990895, 0.17568234368765412, 0.6026627787249621, 0.16329736041934517, 0.15186619288782988, 0.5385062785140688, 0.1891069346911538, 0.16070690705574542, 0.11670853191651254, 0.16934085772071283, 0.1558227670992246, 0.3091513781072769, 0.1513060627104258, 0.28573035484954534, 0.33039245404895023, 0.24939156201895174, 0.19038802127926646, 0.20104117808396826, 0.1944567944226836, 0.1930672477397748, 0.1900931716540799, 0.1814296405018927, 0.18769991212236048, 0.1830236937788996, 0.19347247103910292, 0.1909644843328775, 0.17241656483909884, 0.1693183277404049, 0.1941410755095886, 0.07359782776328427, 0.062013529489508445, 0.0751890263079189, 0.07209262201250566, 0.06731662361290236, 0.0798056757029808, 0.06491702715273417, 0.06943579676169742, 0.06492536879333588]}, "mutation_prompt": null}
{"id": "544f9192-9ea9-43dc-a59e-85c9ef35e8e5", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.num_particles, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_value = np.full(self.num_particles, np.inf)\n        self.global_best = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.num_particles):\n                if self.evaluations >= self.budget:\n                    break\n                value = func(self.particles[i])\n                self.evaluations += 1\n\n                if value < self.personal_best_value[i]:\n                    self.personal_best_value[i] = value\n                    self.personal_best[i] = self.particles[i].copy()\n\n                if value < self.global_best_value:\n                    self.global_best_value = value\n                    self.global_best = self.particles[i].copy()\n\n            if self.global_best is not None:\n                neighborhood_range = np.clip(self.global_best_value, 1e-3, 5.0) / 5.0\n                neighbors = self.particles + np.random.uniform(-neighborhood_range, neighborhood_range, self.particles.shape)\n                neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n\n                for i in range(self.num_particles):\n                    if self.evaluations >= self.budget:\n                        break\n                    value = func(neighbors[i])\n                    self.evaluations += 1\n\n                    if value < self.personal_best_value[i]:\n                        self.personal_best_value[i] = value\n                        self.personal_best[i] = neighbors[i].copy()\n\n                    if value < self.global_best_value:\n                        self.global_best_value = value\n                        self.global_best = neighbors[i].copy()\n\n            w = self.w_max - (self.w_max - self.w_min) * (self.evaluations / self.budget)\n\n            for i in range(self.num_particles):\n                cognitive_component = self.c1 * np.random.rand(self.dim) * (self.personal_best[i] - self.particles[i])\n                social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                self.velocities[i] = w * self.velocities[i] + cognitive_component + social_component\n                self.particles[i] += self.velocities[i]\n                self.particles[i] = np.clip(self.particles[i], self.lower_bound, self.upper_bound)\n\n        return self.global_best", "name": "AdaptiveNeighborhoodPSO", "description": "A hybrid particle swarm optimization algorithm with adaptive neighborhood search for enhanced convergence in varied landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8bb7f729-5cd7-42f9-a5ea-340c3f346666", "metadata": {"aucs": [0.44463126792372076, 0.4671961560147285, 0.4948439072715193, 0.5001483366936111, 0.5545289450694096, 0.5029010356953204, 0.34750590395636793, 0.47580052609141343, 0.5051741290238938, 0.035948963145309265, 0.022706633714425495, 0.05832316367667589, 0.14608741022815352, 9.999999999998899e-05, 0.10171135191943559, 0.10008821362724152, 0.15438243695763754, 0.02727990083885945, 0.05884948334970941, 0.09060800366672117, 0.10495835471292281, 0.09354317167977244, 0.08077636712319891, 0.09386635961912726, 0.09644706229314703, 0.08448093214121077, 0.09696718785328662, 0.07962002246067257, 0.08656275130390056, 0.09960617739057875, 0.06873890394318805, 0.08166672840371014, 0.07885217096106112, 0.07592830552259366, 0.09107438854704686, 0.07069160868164004, 0.9835182646221824, 0.9886168636304781, 0.9883967448415124, 0.9677661464390935, 0.9831273460921088, 0.9776407235136502, 0.9822856120111796, 0.9829688576342024, 0.9829330171190722, 0.22031269042881518, 0.2637099906859156, 0.23750363833163013, 0.23584332185998602, 0.2051220567352373, 0.20033003397095706, 0.2522767887289463, 0.11834815788870912, 0.10837152397377703, 0.2794909740599282, 0.19445470127601294, 0.22607469923018286, 0.1970798446779436, 0.20235235602823898, 0.3032023445059324, 0.2071189364599919, 0.20870761932885518, 0.2774517580744702, 0.1171209439772396, 0.08923243029825567, 0.07069858755704483, 0.03252771538227517, 0.10425365858641289, 0.08484707540741188, 0.12354811260372867, 0.12591809825380862, 0.12979657713177728, 0.09876940869957929, 0.10330897124243876, 0.0907295680041631, 0.08404805663817627, 0.16214847060316295, 0.14476564284145899, 0.09626940844615506, 0.08906545546402178, 0.10598845761658338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00020454979797523976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04123753074701986, 0.05373204299256917, 0.057291598894915086, 0.06264671642331288, 0.02008184194984819, 0.019052690000182504, 0.060979266114074004, 0.050168706687704234, 0.0510524852705555, 0.03145770245541735, 0.0157255947026268, 0.02135806103975224, 0.027527932654545118, 0.04463581282354667, 0.04399897565307187, 0.034185013953649146, 0.023346841677954977, 0.02762177593850179, 0.0907716435060727, 0.04280848698588835, 0.1305415814312888, 0.07523839367182594, 0.029363972001674066, 0.06722460650363571, 0.03538502549072686, 0.04399850057333954, 0.05193708248460149, 0.3759577412919314, 0.36846762611819517, 0.36699471283709406, 0.3625882561510414, 0.39574967662180516, 0.35237296702762433, 0.38218971711071326, 0.3484977662747153, 0.36274390296616155, 0.11174631985485506, 0.10522963692953602, 0.10680506089423247, 0.0891440468193716, 0.09698000224928927, 0.09843403855413779, 0.07356277245172316, 0.0629839039014134, 0.06319507929477108, 0.1929391429574301, 0.13991144280357604, 0.15921786312443986, 0.2119442125602522, 0.22540430237026388, 0.15038747965386978, 0.1493196033261487, 0.16352348634775593, 0.18198422206387288, 0.2530355006767079, 0.2942553944843056, 0.205161156266504, 0.2523009013886073, 0.18390148616776192, 0.2659728800861527, 0.27234570414526704, 0.27516683502121575, 0.28100456777049465, 0.17696993164359465, 0.2265043929904499, 0.18000075184577669, 0.17627893674924544, 0.15685641546878282, 0.1632857710907698, 0.18527231821897872, 0.19780491939588896, 0.2151279316233986, 0.17612424803719873, 0.13522006058650693, 0.16287775620341127, 0.17616312361391828, 0.1681060193240308, 0.19203245549738057, 0.20605309191627252, 0.19466047672275466, 0.18881626656750738, 0.19943315468047706, 0.18836954755055235, 0.19609207061517842, 0.18205543618191755, 0.20514253318620557, 0.18136402418620068, 0.17774351941423827, 0.1780508582990895, 0.17568234368765412, 0.6026627787249621, 0.16329736041934517, 0.15186619288782988, 0.5385062785140688, 0.1891069346911538, 0.16070690705574542, 0.11670853191651254, 0.16934085772071283, 0.1558227670992246, 0.3091513781072769, 0.1513060627104258, 0.28573035484954534, 0.33039245404895023, 0.24939156201895174, 0.19038802127926646, 0.20104117808396826, 0.1944567944226836, 0.1930672477397748, 0.1900931716540799, 0.1814296405018927, 0.18769991212236048, 0.1830236937788996, 0.19347247103910292, 0.1909644843328775, 0.17241656483909884, 0.1693183277404049, 0.1941410755095886, 0.07359782776328427, 0.062013529489508445, 0.0751890263079189, 0.07209262201250566, 0.06731662361290236, 0.0798056757029808, 0.06491702715273417, 0.06943579676169742, 0.06492536879333588]}, "mutation_prompt": null}
