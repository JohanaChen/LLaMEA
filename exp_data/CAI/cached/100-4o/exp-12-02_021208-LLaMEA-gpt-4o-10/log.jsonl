{"id": "da910eed-0d3e-401a-958f-3030c2ff4389", "solution": "import numpy as np\n\nclass AdaptiveMultiSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, num_swarms=5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.num_swarms = num_swarms\n        self.bounds = (-5.0, 5.0)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n\n    def levy_flight(self, lam=1.5, size=1):\n        sigma1 = np.power((np.math.gamma(1 + lam) * np.sin(np.pi * lam / 2)) /\n                          (np.math.gamma((1 + lam) / 2) * lam * np.power(2, (lam - 1) / 2)), 1/lam)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / np.power(np.abs(v), 1/lam)\n        return step\n\n    def initialize_particles(self):\n        self.particles = [\n            {\n                'position': np.random.uniform(*self.bounds, self.dim),\n                'velocity': np.random.uniform(-1, 1, self.dim),\n                'best_position': None,\n                'best_value': np.inf\n            } for _ in range(self.num_particles)\n        ]\n\n    def update_particle(self, particle, swarm_best_position):\n        inertia = 0.5\n        local_attraction = 1.5\n        global_attraction = 1.5\n\n        r1, r2 = np.random.rand(), np.random.rand()\n        cognitive_component = local_attraction * r1 * (particle['best_position'] - particle['position'])\n        social_component = global_attraction * r2 * (swarm_best_position - particle['position'])\n        \n        particle['velocity'] = inertia * particle['velocity'] + cognitive_component + social_component\n        particle['position'] += particle['velocity']\n\n        # Apply Levy flights for better exploration\n        if np.random.rand() < 0.2:\n            particle['position'] += self.levy_flight(size=self.dim)\n\n        # Ensure the new position is within bounds\n        particle['position'] = np.clip(particle['position'], *self.bounds)\n\n    def __call__(self, func):\n        evaluations = 0\n        self.initialize_particles()\n\n        while evaluations < self.budget:\n            for swarm_idx in range(self.num_swarms):\n                swarm_particles = self.particles[swarm_idx::self.num_swarms]\n                swarm_best_value = np.inf\n                swarm_best_position = None\n\n                for particle in swarm_particles:\n                    if particle['best_position'] is None:\n                        particle['best_position'] = particle['position'].copy()\n\n                    fitness_value = func(particle['position'])\n                    evaluations += 1\n\n                    if fitness_value < particle['best_value']:\n                        particle['best_value'] = fitness_value\n                        particle['best_position'] = particle['position'].copy()\n\n                    if fitness_value < swarm_best_value:\n                        swarm_best_value = fitness_value\n                        swarm_best_position = particle['position'].copy()\n\n                    if fitness_value < self.global_best_value:\n                        self.global_best_value = fitness_value\n                        self.global_best_position = particle['position'].copy()\n\n                    if evaluations >= self.budget:\n                        break\n\n                for particle in swarm_particles:\n                    self.update_particle(particle, swarm_best_position)\n\n        return self.global_best_position, self.global_best_value", "name": "AdaptiveMultiSwarmOptimization", "description": "An adaptive multi-swarm particle evolution algorithm integrating Levy flights and local attraction for efficient exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.2133184509700288, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.45173730950425295, 0.45976357290981684, 0.4603491246145457, 0.44982349834487056, 0.4506560133114631, 0.4743288686193107, 0.48557554821443827, 0.45344253639575105, 0.5126297140779352, 0.03690329936926606, 0.005388246301311295, 9.999999999998899e-05, 0.0003579409820279045, 0.01222387060722363, 0.0007519441154126838, 0.024797635519348105, 0.022062232228084566, 9.999999999998899e-05, 0.08883718822718534, 0.11911546958004349, 0.08634919500262639, 0.10384845698453704, 0.10206400595660037, 0.1022689793742535, 0.11346214731768012, 0.09330740946191496, 0.11656458341786524, 0.08672914095681894, 0.0841645616695681, 0.12159502714949488, 0.09861516473133747, 0.09778178867086573, 0.0959355050666294, 0.08503152984180906, 0.09076497238637926, 0.07853583940200148, 0.9881128164591034, 0.9780449299105479, 0.9797945004924206, 0.9858638565438208, 0.9927433091209253, 0.9727530499948202, 0.9855582874797899, 0.99071814324935, 0.9887266150392348, 0.237886352553057, 0.26835210874705295, 0.22942476205271933, 0.21149263884621827, 0.21142738761073865, 0.21415051237887917, 0.22609460929843128, 0.19437943706801675, 0.22460654405205227, 0.24682946805389205, 0.4888323391762144, 0.22470631108703354, 0.22283762526945883, 0.33408093313171516, 0.3472987707261339, 0.24229380504947262, 0.25382008075964757, 0.3285767875311263, 0.16973900808665043, 0.15852323571089377, 0.15327157640770894, 0.14076469135983283, 0.12131187261330834, 0.1686166282733248, 0.14575446944268877, 0.12408208552869515, 0.13807253841786749, 0.15449132298627866, 0.15408065511759705, 0.18025382773578735, 0.1426087728920018, 0.1890580061496654, 0.13482464646698278, 0.14963725785329063, 0.13418270368641028, 0.17318478284939065, 0.0017719914298504058, 0.0011776968310422964, 9.999999999998899e-05, 0.008986251395620815, 0.005684351847832891, 0.025711967755622345, 0.008393785955144284, 0.008087975033419625, 0.019440912528353893, 0.05111226772783817, 0.08869823331945659, 0.09664623040638143, 0.0869754327271014, 0.10345950821241479, 0.061687350096826576, 0.14749026628645812, 0.12671588484307084, 0.047595981398848575, 0.007659452192959715, 9.999999999998899e-05, 0.0032767187494379124, 0.01119490374407528, 0.001608962474072162, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006850343539168691, 9.999999999998899e-05, 0.12211877588524789, 0.02665134708122774, 0.097005350157507, 0.10291497680779504, 0.07351538353126708, 0.10566106075403026, 0.0863244242708443, 0.06812818470714754, 0.06861837720577368, 0.40249461725906666, 0.40484943736147994, 0.3844687507797775, 0.41460350529730317, 0.35728384971953364, 0.41274813514750663, 0.4068323477000143, 0.4056206923354484, 0.4086074922581945, 0.08685970855675318, 0.10199867216698655, 0.10727114025570694, 0.10438301181476384, 0.08205900931999877, 0.0912575441224257, 0.09399088918540532, 0.08889133710614638, 0.09887770843459343, 0.25175952540441804, 0.16898201578366912, 0.24517359178479747, 0.20679261174834096, 0.2460394461851474, 0.18377897339762406, 0.24584837112537739, 0.24336455660019118, 0.1777240764374617, 0.267906638449405, 0.24121485194539172, 0.2761134038853842, 0.2607591988928436, 0.26562612814592124, 0.2478788254323454, 0.2851465958916337, 0.28183454195458113, 0.2607118293576878, 0.20617065920104116, 0.1969704352389321, 0.21964017297344918, 0.21419242006471118, 0.18448644531030867, 0.21962448896929476, 0.205263429028116, 0.2542372366390907, 0.20820659374353068, 0.21012474086329114, 0.2022731112988554, 0.19007804312103693, 0.20810803584449855, 0.18756293228968712, 0.22372613272603326, 0.20497982409552518, 0.21081479053731178, 0.21190405073375929, 0.2157028720901235, 0.1924391875897027, 0.1877360983116907, 0.18569561279261504, 0.197785651605197, 0.1937646327244904, 0.18882045369066502, 0.19448051882649675, 0.19396237483303935, 0.2975467074609809, 0.1934338600594605, 0.6524918359925971, 0.5348160822234591, 0.18046100006256494, 0.1703067228537244, 0.5085143487646733, 0.17537052811143317, 0.16996903985924894, 0.20428292693669414, 0.21049130289218798, 0.3622515345678987, 0.19463666471366137, 0.16563990622789881, 0.3699092292791243, 0.4231920726229935, 0.17194306369951917, 0.2739625153953458, 0.19231003143623926, 0.1777498163943947, 0.17860754167944137, 0.1901601138801352, 0.18524438242935648, 0.18934716583900812, 0.20017819344004006, 0.17652641983759954, 0.19881424339295117, 0.0716889697387112, 0.0914532167875044, 0.08553469657859791, 0.09631778124466106, 0.08015641189177625, 0.09008204714818147, 0.08630059125600453, 0.09624749553673206, 0.07901754962210283]}, "mutation_prompt": null}
{"id": "61ee04dc-e81b-41a1-b69f-a1c2e31df1bf", "solution": "import numpy as np\n\nclass AdaptiveMultiSwarmOptimization:\n    def __init__(self, budget, dim, num_particles=30, num_swarms=5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.num_swarms = num_swarms\n        self.bounds = (-5.0, 5.0)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n\n    def levy_flight(self, lam=1.5, size=1):\n        sigma1 = np.power((np.math.gamma(1 + lam) * np.sin(np.pi * lam / 2)) /\n                          (np.math.gamma((1 + lam) / 2) * lam * np.power(2, (lam - 1) / 2)), 1/lam)\n        u = np.random.normal(0, sigma1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / np.power(np.abs(v), 1/lam)\n        return step\n\n    def initialize_particles(self):\n        self.particles = [\n            {\n                'position': np.random.uniform(*self.bounds, self.dim),\n                'velocity': np.random.uniform(-1, 1, self.dim),\n                'best_position': None,\n                'best_value': np.inf\n            } for _ in range(self.num_particles)\n        ]\n\n    def update_particle(self, particle, swarm_best_position):\n        inertia = 0.5\n        local_attraction = 1.5\n        global_attraction = 1.5\n\n        r1, r2 = np.random.rand(), np.random.rand()\n        cognitive_component = local_attraction * r1 * (particle['best_position'] - particle['position'])\n        social_component = global_attraction * r2 * (swarm_best_position - particle['position'])\n        \n        particle['velocity'] = inertia * particle['velocity'] + cognitive_component + social_component\n        particle['position'] += particle['velocity']\n\n        if np.random.rand() < 0.2:\n            particle['position'] += self.levy_flight(size=self.dim)\n\n        particle['position'] = np.clip(particle['position'], *self.bounds)\n\n    def dynamic_swarm_strategy(self, evaluations):\n        if evaluations % (self.budget // 10) == 0:  # Checkpoints to adjust swarms\n            # Merge swarms with similar best positions\n            if self.num_swarms > 2:\n                self.num_swarms -= 1\n            # Split swarms to enhance exploration\n            else:\n                self.num_swarms += 1\n\n    def __call__(self, func):\n        evaluations = 0\n        self.initialize_particles()\n\n        while evaluations < self.budget:\n            self.dynamic_swarm_strategy(evaluations)  # Adjust swarms dynamically\n            for swarm_idx in range(self.num_swarms):\n                swarm_particles = self.particles[swarm_idx::self.num_swarms]\n                swarm_best_value = np.inf\n                swarm_best_position = None\n\n                for particle in swarm_particles:\n                    if particle['best_position'] is None:\n                        particle['best_position'] = particle['position'].copy()\n\n                    fitness_value = func(particle['position'])\n                    evaluations += 1\n\n                    if fitness_value < particle['best_value']:\n                        particle['best_value'] = fitness_value\n                        particle['best_position'] = particle['position'].copy()\n\n                    if fitness_value < swarm_best_value:\n                        swarm_best_value = fitness_value\n                        swarm_best_position = particle['position'].copy()\n\n                    if fitness_value < self.global_best_value:\n                        self.global_best_value = fitness_value\n                        self.global_best_position = particle['position'].copy()\n\n                    if evaluations >= self.budget:\n                        break\n\n                for particle in swarm_particles:\n                    self.update_particle(particle, swarm_best_position)\n\n        return self.global_best_position, self.global_best_value", "name": "AdaptiveMultiSwarmOptimization", "description": "An enhanced multi-swarm particle evolution algorithm with dynamic swarm merge and split strategy for optimized exploration and exploitation.", "configspace": "", "generation": 1, "fitness": 0.22289733886949503, "feedback": "", "error": "", "parent_id": "da910eed-0d3e-401a-958f-3030c2ff4389", "metadata": {"aucs": [0.471136218664719, 0.437901437812134, 0.46970741027195684, 0.4966290085876227, 0.4937767734968913, 0.44710278228078315, 0.4794448935741038, 0.4687418517323676, 0.49336613341987245, 0.055155548228648654, 0.06587343013114699, 0.041044038935390326, 0.050706705988248335, 0.051279004401850625, 0.004604758523450436, 0.02217559786964607, 0.03563240282107216, 0.032795482318585534, 0.1269285735273601, 0.0975819422736266, 0.11710037948235064, 0.11793055263653818, 0.08326409567558768, 0.11072310132815688, 0.1027540515786779, 0.11567719053165038, 0.11948105554045474, 0.08288728456118388, 0.08869126945762651, 0.07650175778280777, 0.09956700538432028, 0.07464217598636658, 0.09076440623653415, 0.08922824209937241, 0.09138944333123344, 0.09849999314312285, 0.9866023809016582, 0.9858780432499312, 0.9821565526447921, 0.9651703311074442, 0.9916822133932252, 0.9796830311046557, 0.9645758908140916, 0.987208426295617, 0.9786580455185306, 0.25691517657589813, 0.24190431639495724, 0.25318220624407795, 0.27688550395735634, 0.22639011070196402, 0.2679799739695419, 0.22065619084539434, 0.2562572674221253, 0.2362560855035879, 0.3960262028625131, 0.24901612405534046, 0.2567956405297943, 0.40819163317088414, 0.31582944422025216, 0.4482185154947922, 0.47262072597098437, 0.3808670971661954, 0.5389173213864706, 0.15227054204551382, 0.13897721499683813, 0.1659373451581958, 0.1452198559637583, 0.14132085138610495, 0.13293061579492627, 0.17502626826718426, 0.199699755021995, 0.17218670039961548, 0.139094017684804, 0.19329926588904323, 0.17307218322461937, 0.16429911369110373, 0.13802909324688295, 0.1314923657020558, 0.15715706250326367, 0.14015716118451838, 0.15097830766290066, 9.999999999998899e-05, 0.02898179806736101, 0.002203239093954479, 0.022346798307473215, 0.037862669439810315, 0.07668847468428464, 0.0037578507270104033, 0.006948623167175372, 0.05239640791457112, 0.040527854310129396, 0.08726783912895231, 0.1088059331827782, 0.06392882738722439, 0.12773674786960854, 0.04764959560934856, 0.23282176321572068, 0.11762280124612012, 0.09545966863489208, 0.018803632542100934, 9.999999999998899e-05, 9.999999999998899e-05, 0.01609297886624117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1197252012209008, 0.1125986269694762, 0.12219346061868641, 0.11846675468809642, 0.11772616190408047, 0.13395061666708885, 0.10654120084179775, 0.11462640118082945, 0.10812053616726425, 0.45889322408371547, 0.42370658899502556, 0.40393393051075477, 0.40853516367495835, 0.4129550498646243, 0.4231184526315709, 0.44861546294779586, 0.4347870850158584, 0.45233461365509897, 0.09267462719503561, 0.09335140996248015, 0.09374672457463729, 0.10395700851971001, 0.09008038812814123, 0.09596708819120836, 0.08280985615647496, 0.10258590812342883, 0.09907751724246139, 0.23689583527642966, 0.16612724991092143, 0.14972206689597511, 0.15929078955135356, 0.21224563687666476, 0.17095505667668132, 0.1785411910704202, 0.29806694370414544, 0.1748455252081007, 0.29578688476708737, 0.29832826640429944, 0.2716336465000466, 0.23902417223799088, 0.2891344256896654, 0.2941994716105265, 0.29975603378369575, 0.2921153793111515, 0.2875530536557305, 0.2292269390294277, 0.21963981235733132, 0.19439966619109572, 0.23937140816380376, 0.21678384905334247, 0.23177052538514975, 0.23801732061688374, 0.2337274657438274, 0.22371661821610256, 0.19388291577711148, 0.20261913599053227, 0.18635732354972223, 0.19736452288914275, 0.1793913933849295, 0.18400445019908784, 0.20931322145477038, 0.24727766598918055, 0.19298429722759058, 0.20764752041059853, 0.18095033845791786, 0.18354683147532957, 0.17664992004437519, 0.1880108540717076, 0.184144483434306, 0.1759587328429365, 0.18338482970736747, 0.1833359563188789, 0.1842214307299187, 0.1761182446261662, 0.19744564871140324, 0.3290591457451354, 0.19900638616774335, 0.5651209656177983, 0.16348167244892442, 0.17118920912063407, 0.17263098600518167, 0.6120302326276965, 0.21499517230246556, 0.5450336261959712, 0.34015645058042243, 0.2057021179701033, 0.20505346346898423, 0.20821516057825096, 0.2003525020441851, 0.4842204620544093, 0.2026763752108348, 0.1754436427669429, 0.1827954142749849, 0.21324585207520907, 0.18377506962357415, 0.194960198859224, 0.18649504454834676, 0.18396428590512037, 0.1834168649295117, 0.08901153499872594, 0.09733054894924675, 0.08165174395498764, 0.07507865655206747, 0.0736851681112094, 0.09972222162329558, 0.07727052011088431, 0.08667468323430783, 0.08675413190690484]}, "mutation_prompt": null}
