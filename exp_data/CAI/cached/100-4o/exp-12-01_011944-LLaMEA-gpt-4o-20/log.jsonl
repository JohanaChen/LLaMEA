{"id": "05906d57-420e-4f28-ab5b-735b51baac92", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.evaluate_population()\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=(self.dim,))\n        v = np.random.normal(0, 1, size=(self.dim,))\n        step = u / np.abs(v) ** (1 / beta)\n        return step\n\n    def evaluate_population(self):\n        self.fitness = np.array([np.inf] * self.population_size)\n\n    def __call__(self, func):\n        evals = 0\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            evals += 1\n            if evals >= self.budget:\n                return self.best_solution()\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + self.mutation_factor * (b - c)\n\n                for d in range(self.dim):\n                    if np.random.rand() > self.crossover_rate:\n                        mutant[d] = self.population[i][d]\n\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                mutant += self.levy_flight() * (self.bounds[1] - self.bounds[0]) * 0.01\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                mutant_fitness = func(mutant)\n                evals += 1\n\n                if mutant_fitness < self.fitness[i]:\n                    self.population[i] = mutant\n                    self.fitness[i] = mutant_fitness\n\n                if evals >= self.budget:\n                    return self.best_solution()\n\n        return self.best_solution()\n\n    def best_solution(self):\n        idx = np.argmin(self.fitness)\n        return self.population[idx], self.fitness[idx]", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight Mutation for global exploration and local exploitation.", "configspace": "", "generation": 0, "fitness": 0.22388212521799936, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.4509475995969263, 0.4884819959480319, 0.4592306929482586, 0.43224193113118103, 0.44302069319690995, 0.44014221858473423, 0.4540262643645796, 0.46564589858001426, 0.4295722886390634, 0.042296876002126504, 0.0492384188274938, 0.051733170444605237, 0.04831400666078611, 0.036623647586220276, 0.06846329165829523, 0.04803268871106592, 0.05128504740650264, 0.042668257620191774, 0.10256160054779861, 0.09688503236482171, 0.10511022918186186, 0.09900461971940999, 0.10634774794217705, 0.10347856862518234, 0.1121067112753188, 0.09725594142269034, 0.11017979391786825, 0.10330701803814102, 0.10459748860044515, 0.09867434672151554, 0.10082046946070711, 0.09898999462667812, 0.0899330397886533, 0.09508019972655257, 0.09012865426388139, 0.08981587533706992, 0.9438160138752263, 0.9523688998055967, 0.9419640036763504, 0.9483311507420202, 0.9590039205149268, 0.9327380338489382, 0.9452090548248582, 0.9364492363803575, 0.9799472873088997, 0.29965204600403417, 0.2910399904770139, 0.26882692542203235, 0.2742282432348141, 0.28947068964250633, 0.2852431369975922, 0.28509770253270594, 0.2878497418429514, 0.31319864427220856, 0.6318527685308568, 0.34515796237639773, 0.3481119682055759, 0.3494746356919073, 0.6916801808372788, 0.42531181095578185, 0.35128493204297184, 0.3305698361321513, 0.3390618924126234, 0.1642966342725567, 0.17704597048109694, 0.18305826245611356, 0.17473686067166705, 0.17992153156018942, 0.19129802880092206, 0.16054148167744675, 0.1657834397194904, 0.15332485426980635, 0.16983721569563437, 0.19874631791910902, 0.12316501283462788, 0.17966468151741333, 0.16729571231098994, 0.18455758085659046, 0.1680933507228214, 0.1697619709430126, 0.1721435037360558, 0.02862119642988603, 0.026004628910269667, 0.018740657103556102, 0.03555698502413762, 0.03129858145413833, 0.011993921772267435, 0.02942877787193643, 0.006169144650661873, 0.017599673540484195, 0.09375592967122504, 0.1321373629752286, 0.11093009076993565, 0.1017811606608593, 0.09697415734242187, 0.11371719881422393, 0.08319870773329219, 0.1226556107186485, 0.10483920886221054, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13170744745780316, 0.10778836965367267, 0.1052055803264419, 0.10644921951835262, 0.11361126242000696, 0.12157658658597392, 0.12139810343174318, 0.10543012543091446, 0.1095707444758176, 0.4009111959698056, 0.406759543693025, 0.394718444591209, 0.4047426956662258, 0.4006018583625378, 0.45330175685033636, 0.3875016941932973, 0.4182425200388916, 0.3992976001195807, 0.09506314619277689, 0.08217440712720259, 0.09344207729765641, 0.11085627602141068, 0.09099503883350757, 0.09095976404772277, 0.10495769638574237, 0.0805189271032154, 0.10942896385061851, 0.14318199918138674, 0.13246662711059476, 0.2512947054487319, 0.1985864140795277, 0.1227581472898952, 0.3025955812582679, 0.25086836300707815, 0.20792463186515564, 0.21577321155017448, 0.27780082688330965, 0.2915062499013895, 0.27863539146708294, 0.2694849311636647, 0.27987691703517836, 0.2748973748159851, 0.30587927464850295, 0.29210185386432974, 0.2895823308744975, 0.24748079961867053, 0.21832029095138927, 0.2331016225788216, 0.21444110163871177, 0.21849625173628273, 0.22163294047714033, 0.21594423103950378, 0.2255440287336743, 0.21287792457801358, 0.18705829379418593, 0.1862802184004989, 0.1839925254294883, 0.21072751568171555, 0.1964094673118869, 0.1989430703618431, 0.18368760514157412, 0.1830214026681971, 0.18616287577636437, 0.2048110622512146, 0.20336880304565286, 0.17823358113748833, 0.1879287667858136, 0.19866512833664862, 0.21109037082460558, 0.18154708086366267, 0.18778772270305988, 0.17744834277056087, 0.5875540648044368, 0.19332887656724684, 0.17150700175047073, 0.1949248858375019, 0.5813840159746406, 0.18611519873647475, 0.2036827170357629, 0.16636961497764513, 0.16952550612914197, 0.20648273425718722, 0.11213892899285915, 0.1655960459431084, 0.5100676376250745, 0.5357891005542383, 0.2050222316024125, 0.21209873300362703, 0.569550969303136, 0.2099812195969495, 0.18246178223407716, 0.18137658643597399, 0.1903679840974135, 0.1726505634994484, 0.17654817337034, 0.1806070064950529, 0.18094216978851396, 0.1755653563105476, 0.18767295129417239, 0.07308104191780496, 0.07281938369879537, 0.0826958412721881, 0.06297073101505757, 0.06961023939425504, 0.07460487245705993, 0.08235936403958255, 0.07054070098370324, 0.07035748155777377]}, "mutation_prompt": null}
{"id": "91a2e65f-a462-4a56-a9fb-3bb5fa374ebf", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.evaluate_population()\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=(self.dim,))\n        v = np.random.normal(0, 1, size=(self.dim,))\n        step = u / np.abs(v) ** (1 / beta)\n        return step\n\n    def evaluate_population(self):\n        self.fitness = np.array([np.inf] * self.population_size)\n\n    def __call__(self, func):\n        evals = 0\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            evals += 1\n            if evals >= self.budget:\n                return self.best_solution()\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + self.mutation_factor * (b - c)\n\n                for d in range(self.dim):\n                    if np.random.rand() > self.crossover_rate:\n                        mutant[d] = self.population[i][d]\n\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                mutant += self.levy_flight() * (self.bounds[1] - self.bounds[0]) * 0.01\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                mutant_fitness = func(mutant)\n                evals += 1\n\n                if mutant_fitness < self.fitness[i]:\n                    self.population[i] = mutant\n                    self.fitness[i] = mutant_fitness\n\n                if evals >= self.budget:\n                    return self.best_solution()\n\n        return self.best_solution()\n\n    def best_solution(self):\n        idx = np.argmin(self.fitness)\n        return self.population[idx], self.fitness[idx]", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Lévy Flight Mutation for global exploration and local exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "05906d57-420e-4f28-ab5b-735b51baac92", "metadata": {"aucs": [0.4509475995969263, 0.4884819959480319, 0.4592306929482586, 0.43224193113118103, 0.44302069319690995, 0.44014221858473423, 0.4540262643645796, 0.46564589858001426, 0.4295722886390634, 0.042296876002126504, 0.0492384188274938, 0.051733170444605237, 0.04831400666078611, 0.036623647586220276, 0.06846329165829523, 0.04803268871106592, 0.05128504740650264, 0.042668257620191774, 0.10256160054779861, 0.09688503236482171, 0.10511022918186186, 0.09900461971940999, 0.10634774794217705, 0.10347856862518234, 0.1121067112753188, 0.09725594142269034, 0.11017979391786825, 0.10330701803814102, 0.10459748860044515, 0.09867434672151554, 0.10082046946070711, 0.09898999462667812, 0.0899330397886533, 0.09508019972655257, 0.09012865426388139, 0.08981587533706992, 0.9438160138752263, 0.9523688998055967, 0.9419640036763504, 0.9483311507420202, 0.9590039205149268, 0.9327380338489382, 0.9452090548248582, 0.9364492363803575, 0.9799472873088997, 0.29965204600403417, 0.2910399904770139, 0.26882692542203235, 0.2742282432348141, 0.28947068964250633, 0.2852431369975922, 0.28509770253270594, 0.2878497418429514, 0.31319864427220856, 0.6318527685308568, 0.34515796237639773, 0.3481119682055759, 0.3494746356919073, 0.6916801808372788, 0.42531181095578185, 0.35128493204297184, 0.3305698361321513, 0.3390618924126234, 0.1642966342725567, 0.17704597048109694, 0.18305826245611356, 0.17473686067166705, 0.17992153156018942, 0.19129802880092206, 0.16054148167744675, 0.1657834397194904, 0.15332485426980635, 0.16983721569563437, 0.19874631791910902, 0.12316501283462788, 0.17966468151741333, 0.16729571231098994, 0.18455758085659046, 0.1680933507228214, 0.1697619709430126, 0.1721435037360558, 0.02862119642988603, 0.026004628910269667, 0.018740657103556102, 0.03555698502413762, 0.03129858145413833, 0.011993921772267435, 0.02942877787193643, 0.006169144650661873, 0.017599673540484195, 0.09375592967122504, 0.1321373629752286, 0.11093009076993565, 0.1017811606608593, 0.09697415734242187, 0.11371719881422393, 0.08319870773329219, 0.1226556107186485, 0.10483920886221054, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13170744745780316, 0.10778836965367267, 0.1052055803264419, 0.10644921951835262, 0.11361126242000696, 0.12157658658597392, 0.12139810343174318, 0.10543012543091446, 0.1095707444758176, 0.4009111959698056, 0.406759543693025, 0.394718444591209, 0.4047426956662258, 0.4006018583625378, 0.45330175685033636, 0.3875016941932973, 0.4182425200388916, 0.3992976001195807, 0.09506314619277689, 0.08217440712720259, 0.09344207729765641, 0.11085627602141068, 0.09099503883350757, 0.09095976404772277, 0.10495769638574237, 0.0805189271032154, 0.10942896385061851, 0.14318199918138674, 0.13246662711059476, 0.2512947054487319, 0.1985864140795277, 0.1227581472898952, 0.3025955812582679, 0.25086836300707815, 0.20792463186515564, 0.21577321155017448, 0.27780082688330965, 0.2915062499013895, 0.27863539146708294, 0.2694849311636647, 0.27987691703517836, 0.2748973748159851, 0.30587927464850295, 0.29210185386432974, 0.2895823308744975, 0.24748079961867053, 0.21832029095138927, 0.2331016225788216, 0.21444110163871177, 0.21849625173628273, 0.22163294047714033, 0.21594423103950378, 0.2255440287336743, 0.21287792457801358, 0.18705829379418593, 0.1862802184004989, 0.1839925254294883, 0.21072751568171555, 0.1964094673118869, 0.1989430703618431, 0.18368760514157412, 0.1830214026681971, 0.18616287577636437, 0.2048110622512146, 0.20336880304565286, 0.17823358113748833, 0.1879287667858136, 0.19866512833664862, 0.21109037082460558, 0.18154708086366267, 0.18778772270305988, 0.17744834277056087, 0.5875540648044368, 0.19332887656724684, 0.17150700175047073, 0.1949248858375019, 0.5813840159746406, 0.18611519873647475, 0.2036827170357629, 0.16636961497764513, 0.16952550612914197, 0.20648273425718722, 0.11213892899285915, 0.1655960459431084, 0.5100676376250745, 0.5357891005542383, 0.2050222316024125, 0.21209873300362703, 0.569550969303136, 0.2099812195969495, 0.18246178223407716, 0.18137658643597399, 0.1903679840974135, 0.1726505634994484, 0.17654817337034, 0.1806070064950529, 0.18094216978851396, 0.1755653563105476, 0.18767295129417239, 0.07308104191780496, 0.07281938369879537, 0.0826958412721881, 0.06297073101505757, 0.06961023939425504, 0.07460487245705993, 0.08235936403958255, 0.07054070098370324, 0.07035748155777377]}, "mutation_prompt": null}
