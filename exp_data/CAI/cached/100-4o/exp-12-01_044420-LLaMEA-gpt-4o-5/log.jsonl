{"id": "b7793d24-6b36-4506-8ef1-f92fcd8259ec", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.w = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.8\n        self.CR = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate fitness of the population\n            scores = np.apply_along_axis(func, 1, self.population)\n            eval_count += self.pop_size\n\n            # Update personal bests\n            better_mask = scores < self.personal_best_scores\n            self.personal_best_scores[better_mask] = scores[better_mask]\n            self.personal_best_positions[better_mask] = self.population[better_mask]\n\n            # Update global best\n            min_score_idx = np.argmin(self.personal_best_scores)\n            if self.personal_best_scores[min_score_idx] < self.global_best_score:\n                self.global_best_score = self.personal_best_scores[min_score_idx]\n                self.global_best_position = self.personal_best_positions[min_score_idx]\n\n            # Update velocities and positions using PSO\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            self.velocities = (self.w * self.velocities +\n                               self.c1 * r1 * (self.personal_best_positions - self.population) +\n                               self.c2 * r2 * (self.global_best_position - self.population))\n            self.population += self.velocities\n            self.population = np.clip(self.population, self.lb, self.ub)\n\n            # Apply Differential Evolution crossover\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.F * (b - c)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover, mutant_vector, self.population[i])\n                trial_vector = np.clip(trial_vector, self.lb, self.ub)\n                trial_score = func(trial_vector)\n                eval_count += 1\n                if trial_score < scores[i]:\n                    self.population[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < self.personal_best_scores[i]:\n                        self.personal_best_scores[i] = trial_score\n                        self.personal_best_positions[i] = trial_vector\n                        if trial_score < self.global_best_score:\n                            self.global_best_score = trial_score\n                            self.global_best_position = trial_vector\n                if eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSO_DE", "description": "A hybrid particle swarm optimization with adaptive differential evolution crossover to balance exploration and exploitation dynamically.", "configspace": "", "generation": 0, "fitness": 0.21341988453052085, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.5997245863456513, 0.5859980068986725, 0.608118533820676, 0.6180444623811466, 0.6590028454000856, 0.6381063076930287, 0.6215987215603999, 0.6099563492212629, 0.6041040657289617, 0.03433316465181668, 0.09180634342284777, 0.10654963085998648, 9.999999999998899e-05, 0.23927563780975136, 0.21653518128278704, 0.04104312824942513, 0.015173698194569596, 0.22926073655141876, 0.14352048345203972, 0.0869847913444104, 0.08154792174380343, 0.09350733259215194, 0.088217523414312, 0.06746566403436549, 0.095120081542727, 0.08233776774916735, 0.1289023947691832, 0.09728323958388352, 0.08877458875277877, 0.09263480150657544, 0.1270674722353008, 0.09555249050245784, 0.09717409656356502, 0.08880923431525423, 0.09452593840651258, 0.10592314429830008, 0.9829901628905116, 0.975258155507998, 0.9760726699203192, 0.9764579113397713, 0.9758666801215881, 0.9680214128320647, 0.9776446632332942, 0.9677169476729892, 0.9767208318672219, 0.22127885921285761, 0.10500182940257707, 0.16318577332801254, 0.27986828902350047, 0.14381460148061997, 0.22246436331220698, 0.08005325767258342, 0.10673509334514764, 0.17692274598748425, 0.22149155599466908, 0.27572243057634316, 0.16518400681481815, 0.5368625854253184, 0.2044413490139374, 0.19502138934765156, 0.06845310532573201, 0.18516900580501583, 0.2069685195837917, 0.1460740414661874, 0.08709304900896131, 0.17294045623646448, 0.09569398885562819, 0.15224038090425307, 0.0927357376014144, 0.13403004112089878, 0.11539441198355749, 0.17854088671682644, 0.1398204041003277, 0.15387284115017008, 0.13680475200723252, 0.11995479711804724, 0.15237112348685788, 0.13868754555743612, 0.17803331288081714, 0.12484308282564704, 0.1354455923411988, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06275454932048508, 0.03248927286466663, 0.05036651678063031, 0.04735247947131915, 0.031908523374758024, 0.018510513920208305, 0.02862089124160916, 0.05705017983979965, 0.05131848324731758, 0.05006759952421325, 9.999999999998899e-05, 0.07691881015853108, 0.09507691856706957, 0.07447668803390439, 0.05760704196451183, 0.06141887697525039, 0.05472868258521757, 0.04612570422358697, 0.16933954207896473, 0.07115350668223452, 0.16338455849607925, 0.005399350122207047, 0.18280760223659487, 0.09910699700375447, 0.04475512432659634, 0.17971516107395458, 0.06773587878886012, 0.46727837068156597, 0.4352478783467778, 0.4320020193673564, 0.4497647345488721, 0.4855114122843648, 0.4423355881803308, 0.4313665999979478, 0.43911063043362386, 0.432475615709104, 0.0856911042111107, 0.09120623425994379, 0.0801938215639888, 0.1102259793457333, 0.09761446137253893, 0.10668520147577998, 0.06346200245024625, 0.06165375020587671, 0.08400279869770189, 0.18609347772596896, 0.15533954913109937, 0.1651755232335056, 0.18297679347935647, 0.16297560985835458, 0.15107405280020958, 0.1545563270207294, 0.13187675966278545, 0.2184797030874801, 0.3231828143059583, 0.23578975226481025, 0.32287969494769686, 0.28122450886607253, 0.27459687273606104, 0.31326469529247414, 0.3071255174215357, 0.26427949054085575, 0.28139136838794054, 0.20866608097716866, 0.19893977544312058, 0.22584398480212453, 0.1451312742413704, 0.18160594478978476, 0.21708156059785533, 0.2321608398039502, 0.2701865301767922, 0.24634870624663896, 0.18250441517342997, 0.16965201622346793, 0.1697394289812575, 0.18868442671964547, 0.20541259796980904, 0.18251897875917977, 0.21525786782826584, 0.18481625845974126, 0.20275251506484804, 0.1792146409763019, 0.1778126606266125, 0.22652496539805633, 0.2135364760846794, 0.22865325189037777, 0.1883387908897719, 0.19566443847618842, 0.21340722150995706, 0.20829732306614557, 0.16367275291092942, 0.18411679824242966, 0.15406444711797196, 0.7386258764645357, 0.19583335088075304, 0.158685335568172, 0.14071123248312378, 0.1595904525053573, 0.20394078439508945, 0.30332233437214484, 0.21075387444666294, 0.3106298756237529, 0.38868685119240887, 0.2863764504347428, 0.1481184737797021, 0.19124019944269677, 0.19144458190011315, 0.378434902861176, 0.19814975328289908, 0.20219273808178828, 0.17998360285163018, 0.1861093937135142, 0.18566003140210485, 0.17737260285255396, 0.18129733748207777, 0.1820330822716314, 0.17558693764666766, 0.06809903762195246, 0.06620619098776137, 0.06522957988501954, 0.06201975466411658, 0.0635608448676106, 0.06254228514559323, 0.08119841894127167, 0.08013038618521273, 0.06097635983348959]}, "mutation_prompt": null}
{"id": "13959eda-d65a-47a2-b278-127a76f6aaaa", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.initial_w = 0.9  # Changed start value of inertia weight\n        self.final_w = 0.4    # Changed end value of inertia weight\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.8\n        self.CR = 0.9\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate fitness of the population\n            scores = np.apply_along_axis(func, 1, self.population)\n            eval_count += self.pop_size\n\n            # Update personal bests\n            better_mask = scores < self.personal_best_scores\n            self.personal_best_scores[better_mask] = scores[better_mask]\n            self.personal_best_positions[better_mask] = self.population[better_mask]\n\n            # Update global best\n            min_score_idx = np.argmin(self.personal_best_scores)\n            if self.personal_best_scores[min_score_idx] < self.global_best_score:\n                self.global_best_score = self.personal_best_scores[min_score_idx]\n                self.global_best_position = self.personal_best_positions[min_score_idx]\n\n            # Adaptive inertia weight\n            self.w = self.final_w + (self.initial_w - self.final_w) * (1 - eval_count / self.budget)\n\n            # Update velocities and positions using PSO\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            self.velocities = (self.w * self.velocities +\n                               self.c1 * r1 * (self.personal_best_positions - self.population) +\n                               self.c2 * r2 * (self.global_best_position - self.population))\n            self.population += self.velocities\n            self.population = np.clip(self.population, self.lb, self.ub)\n\n            # Apply Differential Evolution crossover\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.F * (b - c)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover, mutant_vector, self.population[i])\n                trial_vector = np.clip(trial_vector, self.lb, self.ub)\n                trial_score = func(trial_vector)\n                eval_count += 1\n                if trial_score < scores[i]:\n                    self.population[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < self.personal_best_scores[i]:\n                        self.personal_best_scores[i] = trial_score\n                        self.personal_best_positions[i] = trial_vector\n                        if trial_score < self.global_best_score:\n                            self.global_best_score = trial_score\n                            self.global_best_position = trial_vector\n                if eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSO_DE", "description": "A refined Hybrid PSO-DE algorithm with adaptive parameters for inertia weight, enhancing convergence speed and precision.", "configspace": "", "generation": 1, "fitness": 0.19828725626382274, "feedback": "", "error": "", "parent_id": "b7793d24-6b36-4506-8ef1-f92fcd8259ec", "metadata": {"aucs": [0.5510446072310572, 0.5603350738224226, 0.5328261691661623, 0.5838869599276271, 0.5555246996218379, 0.5610664250335147, 0.5729846079835775, 0.5327001439813477, 0.5413455398506808, 0.20200500544261135, 0.01668854252538221, 0.20064233980301094, 0.027471825929311855, 0.25674872983657593, 0.1948277883998507, 0.03311000470251024, 0.004077681666081134, 0.29042046899373763, 0.09884267784816492, 0.07815135616130409, 0.06993744459026019, 0.10417901864998891, 0.1055140391635776, 0.06043874433984309, 0.0776965659915928, 0.09000365914039443, 0.09304179234283128, 0.0838723990553275, 0.08802932593551649, 0.08324522419783187, 0.10590436700699102, 0.08915212706539788, 0.08017427898572116, 0.07074735730579307, 0.0968649212773216, 0.096535639790443, 0.9781035002133461, 0.9859399122563863, 0.976595466820546, 0.9743770558683253, 0.9761654744088656, 0.9669400191127085, 0.9779342166885951, 0.9685304539949325, 0.9768767718534657, 0.21486808625393128, 0.1600310885035653, 0.18383898194308967, 0.1916027610834291, 0.13122420033469484, 0.1483778620627958, 0.07980634672406217, 0.21409371621099638, 0.10430509099796414, 0.19249797929654788, 0.16437239481394317, 0.19101854458487366, 0.19144563865816033, 0.25799622858713855, 0.17328228785989763, 0.19863037938737904, 0.12167735123592971, 0.18742229064299165, 0.12920676183088275, 0.09978243655370644, 0.1115474871191825, 0.0885084952222307, 0.115149724755918, 0.06647244602366487, 0.13675030040563274, 0.1088138868328784, 0.11414647535821132, 0.0426245729275575, 0.1225568439953002, 0.09037620006409375, 0.12905009366254183, 0.11757466843611597, 0.1411534634990541, 0.10321720633208442, 0.02901223819105203, 0.13083322988921942, 9.999999999998899e-05, 0.0023766685325025128, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0015010665249938215, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06207743324934367, 0.023111340522874557, 0.03687090445898333, 0.060991583775415914, 0.054645489043746553, 0.017922483172450154, 0.05362841439563859, 0.02784980614509136, 0.0463638836744511, 0.01687238548263592, 0.016702980668727996, 0.019977522836124972, 0.0598291986093793, 0.0905477464122727, 0.03656789750974021, 0.050967885665866186, 0.05346349914680926, 0.04411637147038383, 0.031165148570176826, 0.03033816324127836, 0.11857441417057324, 0.051999075948008566, 0.028052087399586867, 0.07871453544958729, 0.04590122847129374, 9.999999999998899e-05, 0.11196327058424305, 0.3815964771858308, 0.3987379947328221, 0.3998520113076879, 0.4065674170095195, 0.42674245004693223, 0.4305992767299365, 0.41291957385608846, 0.4069528077496891, 0.41075919198063926, 0.09957513084291802, 0.09361749458404611, 0.06926352771312827, 0.0735566354472017, 0.09678634815314036, 0.08796937262382887, 0.06112854401066703, 0.09812804498377503, 0.07948885492210289, 0.15353938821142676, 0.18211548031355984, 0.19093233502830176, 0.15607663591742416, 0.16656747470176236, 0.16056306421650623, 0.17831576643898117, 0.1399158958118718, 0.14353797378589028, 0.22649286088344467, 0.2810454584923442, 0.27848705934670137, 0.29459302356509487, 0.2509415472614732, 0.25190259539075166, 0.3224480726554999, 0.2560677676342632, 0.24393965484282631, 0.2158014398612984, 0.19365118099350354, 0.19424082510726004, 0.13649404307066615, 0.17177142618515628, 0.18136384238895287, 0.230431500685505, 0.20966416387908793, 0.15160030153215487, 0.19462223820429458, 0.17154620347410476, 0.17214795028546415, 0.16631528564348952, 0.18376696208999033, 0.1651509292834027, 0.2135122564065456, 0.17177420766060936, 0.18848297014464754, 0.173924761115694, 0.19937120291495036, 0.18705769301816966, 0.18359053108490675, 0.18731583357604942, 0.1778949000219936, 0.18388293870427752, 0.17988723967575426, 0.19701314858416952, 0.6213108127429046, 0.16570025893502438, 0.1524977825542705, 0.5384229874084967, 0.1826373211281932, 0.15821897282204078, 0.13584931664062405, 0.16268805272559972, 0.1457057709798708, 0.29010940045466216, 0.20149601726539312, 0.3632570366293212, 0.23255925507768693, 0.2119829115234233, 0.21643533033953588, 0.1794766987332319, 0.20078847947576728, 0.2545336502391471, 0.20323390664165064, 0.17769355100829598, 0.18480674959488808, 0.17239165580047733, 0.17444906130706728, 0.18273297141263023, 0.1868533206456091, 0.2097382809143089, 0.17268514620624298, 0.07293919255553705, 0.06550955909135958, 0.0709884587136621, 0.06396084848840256, 0.08528796649212922, 0.06637883155516977, 0.07561128611193213, 0.0665064733742936, 0.061950184031014266]}, "mutation_prompt": null}
