{"id": "a94d9b4c-5072-4ec8-9614-913ecbdc829d", "solution": "import numpy as np\n\nclass HybridDESAOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 + self.dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.T0 = 100  # Initial temperature for SA\n        self.alpha = 0.99  # Cooling rate\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.current_budget = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        self.current_budget += self.pop_size\n\n        best_idx = np.argmin(fitness)\n        self.best_solution = self.population[best_idx].copy()\n        self.best_fitness = fitness[best_idx]\n\n        while self.current_budget < self.budget:\n            new_population = np.zeros_like(self.population)\n            temperature = self.T0\n\n            for i in range(self.pop_size):\n                # Differential Evolution mutation\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Apply Simulated Annealing acceptance criterion\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    new_population[i], fitness[i] = trial, trial_fitness\n                else:\n                    delta = trial_fitness - fitness[i]\n                    if np.random.rand() < np.exp(-delta / temperature):\n                        new_population[i], fitness[i] = trial, trial_fitness\n\n                # Update global best\n                if fitness[i] < self.best_fitness:\n                    self.best_solution = new_population[i].copy()\n                    self.best_fitness = fitness[i]\n\n                # Cooling\n                temperature *= self.alpha\n\n                if self.current_budget >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.best_solution", "name": "HybridDESAOptimizer", "description": "A hybrid evolutionary algorithm combining Differential Evolution (DE) and Simulated Annealing (SA) for efficient exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.11713239587224643, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.17393062512331448, 0.15670626194086745, 0.18561507501905072, 0.17885316943103535, 0.16134521099889443, 0.16850253716196062, 0.17337462768367218, 0.17533414387820156, 0.17486884992289708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422074644634889, 0.04645845551435546, 0.046224265003759535, 0.04907307689268514, 0.060802753149893585, 0.04123872062521927, 0.03737152838365143, 0.0576800992484241, 0.028345796540483525, 0.039057075025203614, 0.058694895281587334, 0.0414888033482963, 0.047911024486528175, 0.052996298008126, 0.043569251947947474, 0.0332121669397355, 0.035131381815069807, 0.04636485449173555, 0.31164622026759226, 0.8951917481812077, 0.9687097955137803, 0.845134565554077, 0.8283417897825134, 0.681455898541757, 0.9276333792134444, 0.7395891960215047, 0.7406105904920687, 0.014109785307704459, 0.02508162867184416, 0.0034093936647459078, 0.019466127605875405, 0.028137099658001152, 0.04600629910574894, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.17294221669857301, 0.19784493039989925, 0.1716645949995116, 0.0667108215001172, 0.11651548909635034, 0.12724922897410873, 0.08231314930298017, 0.09652139348865951, 0.07183276498020008, 0.06640718648948207, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02574980758837242, 9.999999999998899e-05, 0.12247322913503234, 0.17458124632016914, 0.15121851917092932, 0.11047005053418324, 0.058292601077090334, 0.0625078119217074, 0.07452881231803998, 0.16176424721963867, 0.06264989309017088, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027355312162010703, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19064385578267107, 0.1746459840161162, 0.18698093414642647, 0.18150204773670953, 0.18936274468373737, 0.17132492787634512, 0.21091154398681589, 0.17698174182968762, 0.19224410001410952, 0.012308479869461153, 0.018651643927024675, 0.021454631347997744, 0.04206867676871129, 0.05663394423996049, 0.057544819482915566, 0.054951561174814145, 0.0695836694360833, 0.05530637297900198, 0.15311947559598105, 0.15981953017129436, 0.13066401479210255, 0.13141135436454165, 0.15005415213143514, 0.13016705423483688, 0.15146664220233363, 0.1440940552837605, 0.12068627815834865, 0.15926843835782833, 0.1639805124077478, 0.15778810087023354, 0.17952523858260028, 0.14969862668959466, 0.15880834094770635, 0.15255109369619146, 0.17377774300845283, 0.1606209355998952, 0.10776561036773513, 0.10399970435476047, 0.09282085908385196, 0.1258177305487297, 0.11070240134076881, 0.12472493054910772, 0.10434136612907297, 0.11674882498153238, 0.10124256424358313, 0.2589696266054402, 0.2569617587203965, 0.25936027947101914, 0.2580189278494446, 0.25924993883430614, 0.25851197334163833, 0.2591971180328322, 0.2589744222545838, 0.2580205039459782, 0.15080171786671126, 0.1386100549467505, 0.12675523991628956, 9.999999999998899e-05, 0.16678536673868605, 9.999999999998899e-05, 0.13525185902335812, 0.04414998020394667, 0.13882130404752457, 0.13661034145596718, 0.15150822097748895, 0.1561635665489559, 0.11866514526428473, 0.14113279517378974, 0.12453192474170538, 0.14267464492043325, 0.1418991594307205, 0.13109383810385844, 0.15078523838384117, 0.12092154104869501, 0.11294163304154081, 0.09591538712042291, 0.14737630883737274, 0.13375532100143206, 0.1527966782440533, 0.15765702644575796, 0.10672464018697536, 0.17301459968745436, 0.19411902275224957, 0.1846545557717224, 0.17923268709164586, 0.17600084792426374, 0.18624060895555417, 0.19981735682223845, 0.17506349967196655, 0.21614144417256653, 0.0556550191130718, 0.0468928423138939, 0.04823687058368975, 0.06633458131337744, 0.06041550032224219, 0.06015930408700565, 0.07995422582108969, 0.0560761085162822, 0.050945840713534696]}, "mutation_prompt": null}
{"id": "8eb4c570-68cf-490d-b1de-031c90e24baf", "solution": "import numpy as np\n\nclass HybridDESAOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 + self.dim\n        self.F = 0.9  # Differential weight increased for diversity\n        self.CR = 0.9  # Crossover probability\n        self.T0 = 100  # Initial temperature for SA\n        self.alpha = 0.98  # Adjusted cooling rate for faster convergence\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.current_budget = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        self.current_budget += self.pop_size\n\n        best_idx = np.argmin(fitness)\n        self.best_solution = self.population[best_idx].copy()\n        self.best_fitness = fitness[best_idx]\n\n        while self.current_budget < self.budget:\n            new_population = np.zeros_like(self.population)\n            temperature = self.T0\n\n            for i in range(self.pop_size):\n                # Differential Evolution mutation\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n\n                # Adaptive Crossover\n                self.CR = 0.7 + 0.3 * (self.best_fitness / (self.best_fitness + fitness[i]))\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Apply Simulated Annealing acceptance criterion\n                trial_fitness = func(trial)\n                self.current_budget += 1\n\n                if trial_fitness < fitness[i]:\n                    new_population[i], fitness[i] = trial, trial_fitness\n                else:\n                    delta = trial_fitness - fitness[i]\n                    if np.random.rand() < np.exp(-delta / temperature):\n                        new_population[i], fitness[i] = trial, trial_fitness\n\n                # Update global best\n                if fitness[i] < self.best_fitness:\n                    self.best_solution = new_population[i].copy()\n                    self.best_fitness = fitness[i]\n\n                # Cooling\n                temperature *= self.alpha\n\n                if self.current_budget >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.best_solution", "name": "HybridDESAOptimizer", "description": "Improved parameter tuning and adaptive crossover rate for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": 0.10843883752656017, "feedback": "", "error": "", "parent_id": "a94d9b4c-5072-4ec8-9614-913ecbdc829d", "metadata": {"aucs": [0.16510057984004056, 0.16016088997917066, 0.1665333150623206, 0.1623359316103763, 0.1593631574484662, 0.1642609607104497, 0.17678369415034645, 0.1650202186023746, 0.1570874072382782, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060976981276458675, 0.05026477420708031, 0.048293040522680575, 0.03909036768296448, 0.04329096490863504, 0.044896374414963636, 0.018248263482334326, 0.017132045687392794, 0.030790176667969904, 0.03853188633349092, 0.03835694973921999, 0.04426495290702137, 0.0375598464595609, 0.0655991948336816, 0.04368898391358522, 0.024583822886094286, 0.03316038063130655, 0.023966184521729716, 0.8546938721210395, 0.6434774223823005, 0.9863654387890133, 0.3147094685103744, 0.7728864800858437, 0.42377684947113503, 0.4703425682789363, 0.2629342229901066, 0.752357945969944, 9.999999999998899e-05, 0.036345592116791, 0.026745281064290194, 0.00799772030041035, 0.022631550887546648, 0.0320953173389773, 0.015763387009399277, 0.011293333694524565, 9.999999999998899e-05, 0.21066498479670892, 0.21300050818069982, 0.20466358978275534, 0.0667108215001172, 0.040911565726932, 0.14455506645973604, 0.11456964953844995, 0.10053472303960131, 0.0707297691025649, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05825164921144821, 0.0752164172170009, 0.10771788100573665, 0.0605074973420795, 0.12973757792139318, 0.06200639977547251, 0.213809078950435, 0.07418525575984936, 0.06240701312178465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053525550603258476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18368393821496543, 0.1647591112126131, 0.17408584519879855, 0.18524744857597308, 0.18441020647835338, 0.17399347871197202, 0.19898786137547975, 0.1996035762835372, 0.20051367569421685, 0.016676605347192397, 0.015175721060093239, 0.028726184125887677, 0.059402857164293166, 0.04698440554273897, 0.03377552069439693, 0.05685338963050601, 0.07443622264523142, 0.06082645106213491, 0.1466058810113765, 0.12732871866423412, 0.14505037784742125, 0.14320005286121174, 0.1337619577980398, 0.1360221327865987, 0.14560625183414655, 0.13948395622586196, 0.15472380762386295, 0.15604973349227858, 0.14628834959121795, 0.1613322663224106, 0.168910987902823, 0.1780690358002397, 0.14352155877110995, 0.14173011845221206, 0.17377774300845283, 0.14168933093183278, 0.10530956613389264, 0.08877799012437226, 0.09787038192047437, 0.12193513628022501, 0.1204033521267236, 0.11195979212589868, 0.1039279534160682, 0.11134235904456691, 0.10239365895356733, 0.25880993646887807, 0.2559489598271286, 0.25622554000731557, 0.2618464306727938, 0.261593580134555, 0.2582334917117318, 0.25538706916276044, 0.2563871469044612, 0.25944099384197494, 0.13278559223070374, 0.12879305805914898, 0.12258533194193, 9.999999999998899e-05, 0.13650084990142464, 0.13342683157113733, 0.05810872046062543, 9.999999999998899e-05, 0.1330251486070687, 0.1380246417307246, 0.12669974257762606, 0.14339547540068776, 0.16650434245442558, 0.13113617076045558, 0.12796718459664513, 0.15818362953992182, 0.1370105066841374, 0.163674883122643, 0.11884125175996219, 0.15420010749579938, 0.1241043558030075, 0.17319031712590094, 0.15953996125491154, 0.14308764954858777, 0.10655720534292323, 0.16547763811826932, 0.08328396841683094, 0.17180440378734219, 0.17481880523802595, 0.18485987536103643, 0.19051265756286406, 0.20304836146017058, 0.18925244620639536, 0.18780313542546145, 0.17948200056291685, 0.18438650385870647, 0.04887535839314128, 0.054197460589496815, 0.06827574503607103, 0.04297243817204821, 0.04885690406590815, 0.06436843309878892, 0.05052783200034516, 0.04736540004784351, 0.05302568579918332]}, "mutation_prompt": null}
