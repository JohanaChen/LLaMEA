{"id": "9b07e533-0c80-4d50-9748-3c734d063384", "solution": "import numpy as np\n\nclass ADEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.7\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                a, b, c = self._select_parents(i)\n                mutant = self._mutate(a, b, c)\n                trial = self._crossover(self.population[i], mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n                if evaluations >= self.budget:\n                    break\n\n            self._adapt_mutation_strategy()\n\n        return self.best_solution\n\n    def _select_parents(self, idx):\n        candidates = list(range(self.population_size))\n        candidates.remove(idx)\n        selected = np.random.choice(candidates, 3, replace=False)\n        return self.population[selected[0]], self.population[selected[1]], self.population[selected[2]]\n\n    def _mutate(self, a, b, c):\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n        return mutant\n\n    def _crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.crossover_probability\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def _adapt_mutation_strategy(self):\n        success_rate = np.mean(self.fitness < np.min(self.fitness) + (np.max(self.fitness) - np.min(self.fitness)) / 5.0)\n        if success_rate < 0.2:\n            self.mutation_factor *= 0.9\n        elif success_rate > 0.5:\n            self.mutation_factor *= 1.1\n        self.mutation_factor = np.clip(self.mutation_factor, 0.1, 0.9)", "name": "ADEOptimizer", "description": "An Adaptive Differential Evolution (ADE) algorithm with a self-tuning mutation strategy to efficiently explore and exploit diverse search landscapes.", "configspace": "", "generation": 0, "fitness": 0.29651007695944487, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7902281699652272, 0.7916332560769711, 0.8106110715832267, 0.7882913767677944, 0.72276975774919, 0.796063452927122, 0.778304139672975, 0.7573723672519755, 0.8100103023155276, 0.4205569292683845, 0.4550546640995049, 0.5037592074975553, 0.394532453631134, 0.43446332485796935, 0.5036174715785591, 0.47342591049790195, 0.3874418279990878, 0.4394297353975486, 0.6753509471872866, 0.1747145775084471, 0.7168521435178477, 0.35144600593246644, 0.16734950890604083, 0.17130632914719024, 0.42133371532870123, 0.3401804484253279, 0.6321956099441739, 0.23422836888243048, 0.169919369572607, 0.5137948775133614, 0.21995982305520934, 0.17131233671351442, 0.4044015146953087, 0.15778478642408866, 0.16436684322658746, 0.15476086669568834, 0.930147401527096, 0.9167538506115742, 0.9273625392253326, 0.9476164373543527, 0.9410995281738656, 0.9408144002058455, 0.9191525790172252, 0.9339747630238279, 0.9120973065101219, 0.2770547440622767, 0.2280839168798825, 0.23682609971395074, 0.21289162259967565, 0.15063587145102886, 0.17708581930362488, 0.1786784392667491, 0.18320825096029691, 0.2519759029204244, 0.5056905150346138, 0.4432910984109858, 0.5254044284460115, 0.48074948173514287, 0.41727026288524416, 0.25824881375824715, 0.3838338808816849, 0.39608721179503836, 0.3305393536819935, 0.1514998569326521, 0.13697699727201884, 0.1389801641604359, 0.13060918227071505, 0.12281737283035232, 0.11725008775369983, 0.15237856592557564, 0.13491813354997884, 0.14775363136274866, 0.11924408558097388, 0.14997186855706623, 0.13099861990756656, 0.1376831197470456, 0.1418178017295073, 0.12192849004436668, 0.09680456421786243, 0.11335746241183609, 0.10765804521200517, 0.0021982998633347517, 0.0007024470255165838, 0.003628767247846887, 0.004423286520407466, 0.013330638817162233, 9.999999999998899e-05, 0.005784812208524226, 0.003228185366917047, 9.999999999998899e-05, 0.08543473196225004, 0.10279777348274854, 0.0765724156739217, 0.05875627848574516, 0.08707997567193992, 0.10071596128155891, 0.0821209392582809, 0.1450302274314298, 0.11032299494548281, 9.999999999998899e-05, 0.0031592317286064375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19806375456663972, 0.06353692000473077, 0.1558612492061069, 0.18698533612111812, 0.15430828581383216, 0.10408588313234646, 0.1071372032633855, 0.22664703536373665, 0.20621005566104333, 0.5414806482439743, 0.5293862696895424, 0.5531157711756691, 0.5333983098563926, 0.5293276694647895, 0.5296640677790287, 0.5335462246682239, 0.5745193963857692, 0.5557222184804025, 0.15979446979746537, 0.15983750649273465, 0.1470069027877582, 0.1379035868126648, 0.15544453313434803, 0.10881159554953623, 0.13082992495265677, 0.15891115827569502, 0.1405827444350758, 0.16193995370495318, 0.1921661719286415, 0.15753702063863662, 0.1698771925578345, 0.177037973127129, 0.15590102066528166, 0.15395787392915317, 0.17813657634433144, 0.21335707285006433, 0.379055553999456, 0.4724452523850673, 0.3320765330877622, 0.4616860906959501, 0.33843436244540415, 0.40554448173974267, 0.4450783331045747, 0.44577906815525603, 0.40801739028460127, 0.2923329169594415, 0.2844497632399059, 0.280282883603722, 0.27282988819471743, 0.22007608081214625, 0.3137379804037467, 0.3195504461345062, 0.33584502600336186, 0.35925636181626786, 0.2421976042626477, 0.1853215659152676, 0.2004385752597122, 0.20589043212649571, 0.1983761176147978, 0.1950000363282458, 0.20322713768412337, 0.20690939007514242, 0.21185905183087061, 0.30368041716401517, 0.5047530491657974, 0.21399112631053652, 0.2197235254896136, 0.2917492900065738, 0.5461261358361174, 0.4307820104523956, 0.32512749379106465, 0.21959981307848997, 0.6398350774320205, 0.17728219583880034, 0.18485353845401387, 0.192435824539255, 0.6546518742122671, 0.8203921872297124, 0.5813606742966646, 0.1797191026836965, 0.4664597570081692, 0.4431199959973606, 0.34956913155265923, 0.42740826605308035, 0.20255799963353227, 0.31878508579473286, 0.4460101140197319, 0.19527331043001994, 0.48751166091055453, 0.2041451767395156, 0.1903277369563482, 0.18218402987122595, 0.17906533693255644, 0.2076016010267574, 0.1727093281558142, 0.19074238701192003, 0.2177646760630486, 0.1871378830164374, 0.1787427334528402, 0.08082452085890668, 0.09584650952262452, 0.09821255032699794, 0.08513359068252246, 0.0839912267133961, 0.08873786413747498, 0.09751724703376263, 0.09270957066805618, 0.08796306797726161]}, "mutation_prompt": null}
{"id": "9644c9f4-2e9c-4ab7-a664-d4d44fd5c5bb", "solution": "import numpy as np\n\nclass ADEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.7\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                a, b, c = self._select_parents(i)\n                mutant = self._mutate(a, b, c)\n                trial = self._crossover(self.population[i], mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n                if evaluations >= self.budget:\n                    break\n\n            self._adapt_mutation_strategy()\n\n        return self.best_solution\n\n    def _select_parents(self, idx):\n        candidates = list(range(self.population_size))\n        candidates.remove(idx)\n        selected = np.random.choice(candidates, 3, replace=False)\n        return self.population[selected[0]], self.population[selected[1]], self.population[selected[2]]\n\n    def _mutate(self, a, b, c):\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n        return mutant\n\n    def _crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.crossover_probability\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def _adapt_mutation_strategy(self):\n        success_rate = np.mean(self.fitness < np.min(self.fitness) + (np.max(self.fitness) - np.min(self.fitness)) / 5.0)\n        if success_rate < 0.2:\n            self.mutation_factor *= 0.9\n        elif success_rate > 0.5:\n            self.mutation_factor *= 1.1\n        self.mutation_factor = np.clip(self.mutation_factor, 0.1, 0.9)", "name": "ADEOptimizer", "description": "An Adaptive Differential Evolution (ADE) algorithm with a self-tuning mutation strategy to efficiently explore and exploit diverse search landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b07e533-0c80-4d50-9748-3c734d063384", "metadata": {"aucs": [0.7902281699652272, 0.7916332560769711, 0.8106110715832267, 0.7882913767677944, 0.72276975774919, 0.796063452927122, 0.778304139672975, 0.7573723672519755, 0.8100103023155276, 0.4205569292683845, 0.4550546640995049, 0.5037592074975553, 0.394532453631134, 0.43446332485796935, 0.5036174715785591, 0.47342591049790195, 0.3874418279990878, 0.4394297353975486, 0.6753509471872866, 0.1747145775084471, 0.7168521435178477, 0.35144600593246644, 0.16734950890604083, 0.17130632914719024, 0.42133371532870123, 0.3401804484253279, 0.6321956099441739, 0.23422836888243048, 0.169919369572607, 0.5137948775133614, 0.21995982305520934, 0.17131233671351442, 0.4044015146953087, 0.15778478642408866, 0.16436684322658746, 0.15476086669568834, 0.930147401527096, 0.9167538506115742, 0.9273625392253326, 0.9476164373543527, 0.9410995281738656, 0.9408144002058455, 0.9191525790172252, 0.9339747630238279, 0.9120973065101219, 0.2770547440622767, 0.2280839168798825, 0.23682609971395074, 0.21289162259967565, 0.15063587145102886, 0.17708581930362488, 0.1786784392667491, 0.18320825096029691, 0.2519759029204244, 0.5056905150346138, 0.4432910984109858, 0.5254044284460115, 0.48074948173514287, 0.41727026288524416, 0.25824881375824715, 0.3838338808816849, 0.39608721179503836, 0.3305393536819935, 0.1514998569326521, 0.13697699727201884, 0.1389801641604359, 0.13060918227071505, 0.12281737283035232, 0.11725008775369983, 0.15237856592557564, 0.13491813354997884, 0.14775363136274866, 0.11924408558097388, 0.14997186855706623, 0.13099861990756656, 0.1376831197470456, 0.1418178017295073, 0.12192849004436668, 0.09680456421786243, 0.11335746241183609, 0.10765804521200517, 0.0021982998633347517, 0.0007024470255165838, 0.003628767247846887, 0.004423286520407466, 0.013330638817162233, 9.999999999998899e-05, 0.005784812208524226, 0.003228185366917047, 9.999999999998899e-05, 0.08543473196225004, 0.10279777348274854, 0.0765724156739217, 0.05875627848574516, 0.08707997567193992, 0.10071596128155891, 0.0821209392582809, 0.1450302274314298, 0.11032299494548281, 9.999999999998899e-05, 0.0031592317286064375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19806375456663972, 0.06353692000473077, 0.1558612492061069, 0.18698533612111812, 0.15430828581383216, 0.10408588313234646, 0.1071372032633855, 0.22664703536373665, 0.20621005566104333, 0.5414806482439743, 0.5293862696895424, 0.5531157711756691, 0.5333983098563926, 0.5293276694647895, 0.5296640677790287, 0.5335462246682239, 0.5745193963857692, 0.5557222184804025, 0.15979446979746537, 0.15983750649273465, 0.1470069027877582, 0.1379035868126648, 0.15544453313434803, 0.10881159554953623, 0.13082992495265677, 0.15891115827569502, 0.1405827444350758, 0.16193995370495318, 0.1921661719286415, 0.15753702063863662, 0.1698771925578345, 0.177037973127129, 0.15590102066528166, 0.15395787392915317, 0.17813657634433144, 0.21335707285006433, 0.379055553999456, 0.4724452523850673, 0.3320765330877622, 0.4616860906959501, 0.33843436244540415, 0.40554448173974267, 0.4450783331045747, 0.44577906815525603, 0.40801739028460127, 0.2923329169594415, 0.2844497632399059, 0.280282883603722, 0.27282988819471743, 0.22007608081214625, 0.3137379804037467, 0.3195504461345062, 0.33584502600336186, 0.35925636181626786, 0.2421976042626477, 0.1853215659152676, 0.2004385752597122, 0.20589043212649571, 0.1983761176147978, 0.1950000363282458, 0.20322713768412337, 0.20690939007514242, 0.21185905183087061, 0.30368041716401517, 0.5047530491657974, 0.21399112631053652, 0.2197235254896136, 0.2917492900065738, 0.5461261358361174, 0.4307820104523956, 0.32512749379106465, 0.21959981307848997, 0.6398350774320205, 0.17728219583880034, 0.18485353845401387, 0.192435824539255, 0.6546518742122671, 0.8203921872297124, 0.5813606742966646, 0.1797191026836965, 0.4664597570081692, 0.4431199959973606, 0.34956913155265923, 0.42740826605308035, 0.20255799963353227, 0.31878508579473286, 0.4460101140197319, 0.19527331043001994, 0.48751166091055453, 0.2041451767395156, 0.1903277369563482, 0.18218402987122595, 0.17906533693255644, 0.2076016010267574, 0.1727093281558142, 0.19074238701192003, 0.2177646760630486, 0.1871378830164374, 0.1787427334528402, 0.08082452085890668, 0.09584650952262452, 0.09821255032699794, 0.08513359068252246, 0.0839912267133961, 0.08873786413747498, 0.09751724703376263, 0.09270957066805618, 0.08796306797726161]}, "mutation_prompt": null}
