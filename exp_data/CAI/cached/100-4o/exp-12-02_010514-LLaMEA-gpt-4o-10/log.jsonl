{"id": "16fa32c1-a2ef-4c96-afd6-06e813fc2dd1", "solution": "import numpy as np\n\nclass HybridDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 10 + int(2 * np.sqrt(self.dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best = self.population.copy()\n        self.global_best = None\n        self.global_best_value = np.inf\n        self.cr = 0.9  # Crossover probability for DE\n        self.f = 0.8   # Scaling factor for DE\n        self.w = 0.7   # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component for PSO\n        self.c2 = 1.5  # Social component for PSO\n\n    def __call__(self, func):\n        evaluations = 0\n\n        # Initialize personal bests\n        personal_best_values = np.array([func(ind) for ind in self.population])\n        evaluations += self.pop_size\n        self.global_best_value = np.min(personal_best_values)\n        self.global_best = self.population[np.argmin(personal_best_values)].copy()\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Differential Evolution mutation\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant_vector = np.clip(a + self.f * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(cross_points, mutant_vector, self.population[i])\n\n                # Evaluate trial vector\n                trial_value = func(trial_vector)\n                evaluations += 1\n\n                # Selection\n                if trial_value < personal_best_values[i]:\n                    self.population[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    self.personal_best[i] = trial_vector\n\n                    # Update global best\n                    if trial_value < self.global_best_value:\n                        self.global_best_value = trial_value\n                        self.global_best = trial_vector\n\n                # Particle Swarm Optimization update\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocities[i] = (\n                    self.w * self.velocities[i]\n                    + self.c1 * r1 * (self.personal_best[i] - self.population[i])\n                    + self.c2 * r2 * (self.global_best - self.population[i])\n                )\n                self.population[i] = np.clip(self.population[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n            # Adjust parameters dynamically (optional, could be implemented for adaptive behavior)\n            # self.w = max(0.4, self.w * 0.995)  # Example: decay inertia weight\n\n        return self.global_best, self.global_best_value", "name": "HybridDEAPSO", "description": "A hybrid algorithm combining Differential Evolution with Adaptive Particle Swarm Optimization to dynamically balance exploration and exploitation for enhanced convergence in black box optimization.", "configspace": "", "generation": 0, "fitness": 0.30098118093851056, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8808515895445986, 0.8716241040068967, 0.8544016861556034, 0.19074857368602605, 0.19069160803449214, 0.1903296132068374, 0.859764601320179, 0.9119510141831753, 0.8905832356513749, 0.7709140094198708, 0.7993012897359075, 0.7698276486595319, 0.7683673849861326, 0.7388845444273857, 0.7317914250954844, 0.05443909601872787, 0.7672763860344674, 0.7878727426853928, 0.14991672870681527, 0.17702032939498202, 0.13151301621306133, 0.13848760144925032, 0.1501245480735257, 0.12421065071998638, 0.1498916005590869, 0.14069414572963468, 0.12083856673771554, 0.14499729240302262, 0.14206311360001478, 0.1319241395698627, 0.14877651385261326, 0.10584693359126252, 0.13313563079759771, 0.11045184119968943, 0.1465004605290482, 0.1261393500727641, 0.9956913876295452, 0.9942156309035165, 0.9949868009749534, 0.9887225686364345, 0.9895794732994134, 0.9930348810171924, 0.9947860202722478, 0.9908505591474629, 0.9944136906343344, 0.6745925622066753, 0.6631203823269489, 0.623313849908337, 0.6624771239649696, 0.699963045245237, 0.6379002463921593, 0.6363982593697703, 0.08876707056600297, 0.6913956044319166, 0.85040470873801, 0.36533016303155563, 0.3638239919984875, 0.3716785984153126, 0.27270225976977835, 0.266082370493553, 0.2345861000337618, 0.2315109310422243, 0.8659907365258621, 0.11638820963536622, 0.22023610362696822, 0.24261814420393335, 0.20358261603645256, 0.22339015752213598, 0.1291937619791288, 0.23156751034779288, 0.22023157829701745, 0.22127665046644784, 0.2451945182141878, 0.053863642832153724, 0.2295616677205755, 0.2745065925008202, 9.999999999998899e-05, 0.24912226302222062, 0.2635293920952888, 9.999999999998899e-05, 0.25033206635588845, 9.999999999998899e-05, 0.026337538579750963, 0.023944025941299518, 9.999999999998899e-05, 9.999999999998899e-05, 0.00012515405148350034, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020520059501419885, 0.09016088238066056, 0.031555229058583656, 0.05604378264517185, 0.041547274366584674, 0.016851631829464142, 0.016835365083295306, 0.048207310821098526, 0.12392326534558884, 0.11272310498693128, 0.03460426662406224, 0.18746915585314583, 0.48702754698601536, 0.17724009075491398, 0.28494933507858755, 0.18288759964407342, 0.07315099090510646, 0.19120646329000657, 0.23940364593182706, 0.0570924671018882, 0.17843806771476178, 0.11719337414904907, 0.09083349482866065, 0.05630441786818696, 0.03821852517265978, 0.058708629860025785, 0.08314388911248538, 0.08358957339401785, 0.5362407726121208, 0.5337585587787147, 0.5432559473096672, 0.5826982599914815, 0.5356617537843058, 0.599360256339972, 0.5587122554068069, 0.5305419218861195, 0.5489933830911711, 0.11132607635447145, 0.10913803020026402, 0.11212431589844452, 0.32943507957090457, 0.11396960941479028, 0.10057864061321253, 0.1627918697094698, 0.10716254119602997, 0.13257408077653687, 0.13721646468350113, 0.2023830813459806, 0.4623580818620937, 0.14968579278552374, 0.18481391851839124, 0.22969411763280434, 0.13630400407364052, 0.2170881042464362, 0.2070449642508635, 0.3508264319028013, 0.23717691419921916, 0.44718806859589266, 0.3438222030709319, 0.22395612796563014, 0.4047345027126098, 0.5992754927678791, 0.58250167298301, 0.5804567385829805, 0.30769636429055824, 0.30714164083813533, 0.14331457013810833, 0.17744328296332534, 0.20971312276363763, 0.34948287906788467, 0.2736468253448412, 0.16720969479309644, 0.24692517398799008, 0.21293177366896487, 0.18607193685320222, 0.2125459540679362, 0.19771338699351038, 0.1884528704331817, 0.1989672832395566, 0.20663003850555584, 0.18510341025680943, 0.2024885689072573, 0.2101353556276605, 0.2387848098642844, 0.2475131285419947, 0.21087905174708943, 0.187983471093073, 0.6461572050139283, 0.24253214813936275, 0.23035144575306354, 0.2328334258424929, 0.9107197595642238, 0.17015895424854788, 0.1543399711776483, 0.9104270215184169, 0.2009761589066803, 0.19756738851727595, 0.21135177968879482, 0.18423653337451074, 0.14255836150154755, 0.08319559681676725, 0.20928400689197157, 0.6222848906084539, 0.2117192214164635, 0.16761132429741687, 0.212406826005327, 0.10479651825814418, 0.1678880494357392, 0.16838059581184373, 0.18122333758249043, 0.18346282014896953, 0.19573651565425798, 0.18600168947257611, 0.1883372165747128, 0.20512642891838728, 0.17448211297904215, 0.1826630932455391, 0.17375763610260875, 0.08060866553295387, 0.08437584877182958, 0.08739757978965068, 0.07393567307612325, 0.0837333446727202, 0.08237767072048141, 0.08267487105814375, 0.06547459915575926, 0.07962915417750316]}, "mutation_prompt": null}
{"id": "9da837dc-614c-48dd-ae1d-6eefabc9ca60", "solution": "import numpy as np\n\nclass HybridDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 10 + int(2 * np.sqrt(self.dim))\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best = self.population.copy()\n        self.global_best = None\n        self.global_best_value = np.inf\n        self.cr = 0.9  # Crossover probability for DE\n        self.f = 0.8   # Scaling factor for DE\n        self.w = 0.7   # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component for PSO\n        self.c2 = 1.5  # Social component for PSO\n\n    def __call__(self, func):\n        evaluations = 0\n\n        # Initialize personal bests\n        personal_best_values = np.array([func(ind) for ind in self.population])\n        evaluations += self.pop_size\n        self.global_best_value = np.min(personal_best_values)\n        self.global_best = self.population[np.argmin(personal_best_values)].copy()\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Differential Evolution mutation\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                self.f = 0.5 + 0.3 * np.random.rand()  # Dynamic scaling factor\n                mutant_vector = np.clip(a + self.f * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < (self.cr + 0.1 * np.random.rand())  # Adaptive crossover\n                trial_vector = np.where(cross_points, mutant_vector, self.population[i])\n\n                # Evaluate trial vector\n                trial_value = func(trial_vector)\n                evaluations += 1\n\n                # Selection\n                if trial_value < personal_best_values[i]:\n                    self.population[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    self.personal_best[i] = trial_vector\n\n                    # Update global best\n                    if trial_value < self.global_best_value:\n                        self.global_best_value = trial_value\n                        self.global_best = trial_vector\n\n                # Particle Swarm Optimization update\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocities[i] = (\n                    self.w * self.velocities[i]\n                    + self.c1 * r1 * (self.personal_best[i] - self.population[i])\n                    + self.c2 * r2 * (self.global_best - self.population[i])\n                )\n                self.population[i] = np.clip(self.population[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n            # Adjust parameters dynamically (optional, could be implemented for adaptive behavior)\n            # self.w = max(0.4, self.w * 0.995)  # Example: decay inertia weight\n\n        return self.global_best, self.global_best_value", "name": "HybridDEAPSO", "description": "An enhanced hybrid algorithm that incorporates a dynamic scaling factor and adaptive crossover for improved convergence in black box optimization.", "configspace": "", "generation": 1, "fitness": 0.3104513921614784, "feedback": "", "error": "", "parent_id": "16fa32c1-a2ef-4c96-afd6-06e813fc2dd1", "metadata": {"aucs": [0.8929722075484994, 0.8848007532114217, 0.9084564441607318, 0.9064160332629079, 0.9168764339527152, 0.8947436947091219, 0.9228702371055195, 0.9011245487003385, 0.8969470333494455, 0.07527763867349346, 0.0433453806727222, 9.999999999998899e-05, 0.8041070893601188, 0.7888467690236669, 0.7630205820803095, 0.8062024393603204, 0.8203295751495845, 0.7865446129015574, 0.17087209817562576, 0.11739495507799314, 0.16145785001205637, 0.1172269586119955, 0.11130857649834724, 0.141783386725431, 0.12459797071043177, 0.0659562661289188, 0.12340521147513484, 0.1267685062215147, 0.13581632730197357, 0.1146440204979422, 0.11829394745562127, 0.13394257288210887, 0.14095145094460515, 0.03584570359498118, 0.09664700624587041, 0.06037458485737812, 0.9960740678431066, 0.9902547784404224, 0.9933568744172064, 0.9882382753768783, 0.9950225667076537, 0.9918999134826597, 0.0750032893769137, 0.9944088756546979, 0.9886736105133361, 0.7213948231411209, 0.060057735890242436, 0.7237319595331839, 0.7274591858034445, 0.7329602234638448, 0.15251986688445507, 0.08937274505817272, 0.7380511808669623, 0.7425092850777517, 0.22684600129052912, 0.22400245008113784, 0.2298781713008069, 0.1939637986499011, 0.8927565602121373, 0.19468432397788715, 0.7871744435772903, 0.7824681778026007, 0.18180793454851374, 0.2774132102347808, 0.2511757359806721, 0.28177557896328354, 0.24522651716210242, 0.13578111867390852, 0.25044252128425737, 0.24646674732239915, 0.13088446850246493, 0.2444620944954622, 0.23769332124217524, 0.10327456750619335, 0.25085493735340303, 0.12303341778569232, 0.1318097769737906, 0.27633085858576556, 0.32410756987321465, 0.13705734748170506, 0.12825984360702747, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024927853572313308, 9.999999999998899e-05, 9.999999999998899e-05, 0.00012796396004211008, 9.999999999998899e-05, 9.999999999998899e-05, 0.024196967319426776, 0.061084185583032746, 0.04327781066278635, 0.10191742080903443, 0.03469968456690786, 0.06563272710079149, 0.09288045864812355, 0.051170952875776665, 0.018418275441057674, 0.08286246442301859, 0.03681023453890253, 0.09902214290349731, 0.12859528077949256, 0.09489076998048718, 0.10429509437848772, 0.09804851601945153, 0.24912019544017594, 0.1232742069083177, 0.04418196822602716, 9.999999999998899e-05, 0.04357705911991838, 0.03838275967583904, 0.1372118723449436, 9.999999999998899e-05, 0.28550150938692287, 0.05883101497581489, 0.08409701639095746, 0.6126736854454184, 0.5449392267292802, 0.5854437331614188, 0.5611945018111166, 0.5834102823887793, 0.5739276113651397, 0.5511547207207168, 0.5719708625986514, 0.6067147758599323, 0.5329959427485687, 0.09194091294313655, 0.08423588405260185, 0.1341539009269953, 0.1440670266291978, 0.10213736949883079, 0.12400636243914998, 0.10396921059746256, 0.08527006915229907, 0.18958146860207636, 0.5951187325118827, 0.7032004100554491, 0.34302435209787496, 0.18914771444993328, 0.22671471280042865, 0.20311421343057856, 0.16848877537417206, 0.18562247681737487, 0.31507619855294144, 0.21212906897864536, 0.6444906341987884, 0.5407818232103946, 0.213520168265243, 0.5285986653542297, 0.5438736126766606, 0.6974020948444899, 0.6125885157333051, 0.2753729209433269, 0.3057313409707543, 0.38306478601190597, 0.303715231565475, 0.2100998572247923, 0.44578465727138517, 0.15876126314812677, 0.2658225065166715, 0.2671668782317489, 0.19694588344655395, 0.18590342104273216, 0.20779020739173926, 0.21072368035790057, 0.1609494390245203, 0.20777085563027442, 0.1871790140796673, 0.20727286638441766, 0.17783470315551564, 0.7411687102474143, 0.24717147209182477, 0.2040758234079565, 0.2425380631590266, 0.19859939643342805, 0.2065404373983536, 0.21437094117847633, 0.22129910470190828, 0.4455964022250828, 0.1881326037616433, 0.18650021508322934, 0.1547137020347703, 0.9315591553152657, 0.20025773767707855, 0.925375674732958, 0.8842139356273602, 0.1504453043810885, 0.1625389912915156, 0.083228453066023, 0.21350419709472912, 0.7558214780578449, 0.21232409837173982, 0.6446942467657921, 0.2125764028196816, 0.10519382757076201, 0.16791975458246866, 0.10486517937020456, 0.1782782234878567, 0.1947099363264445, 0.1842066645530489, 0.18636685895974092, 0.1903378912548268, 0.18526704180910403, 0.17886628625150247, 0.18526672519208964, 0.1728876306478856, 0.06732914149136282, 0.11942841931592207, 0.08818609443780956, 0.08317693444152718, 0.08966679245053277, 0.09346589701614083, 0.08374522482303726, 0.0894256580710644, 0.08826872380802486]}, "mutation_prompt": null}
