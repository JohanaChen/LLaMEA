{"id": "b79f2560-7a8b-4a55-bcbb-95608a01e3d4", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))  # Adaptive population size\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.w = 0.5   # Inertia weight\n        self.CR = 0.9  # Crossover rate for DE\n        self.F = 0.8   # Differential weight for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.full(self.population_size, np.inf)\n        \n        # Evaluate initial particles\n        current_scores = np.array([func(p) for p in particles])\n        num_evals = self.population_size\n        \n        # Update personal bests\n        better_mask = current_scores < personal_best_scores\n        personal_best_scores = np.where(better_mask, current_scores, personal_best_scores)\n        personal_best_positions = np.where(better_mask[:, np.newaxis], particles, personal_best_positions)\n        \n        # Global best initialization\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n        \n        # Main optimization loop\n        while num_evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - particles) +\n                          self.c2 * r2 * (global_best_position - particles))\n            particles = np.clip(particles + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate the particles\n            current_scores = np.array([func(p) for p in particles])\n            num_evals += self.population_size\n\n            # Update personal bests\n            better_mask = current_scores < personal_best_scores\n            personal_best_scores = np.where(better_mask, current_scores, personal_best_scores)\n            personal_best_positions = np.where(better_mask[:, np.newaxis], particles, personal_best_positions)\n\n            # Update global best\n            current_global_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_global_best_idx] < global_best_score:\n                global_best_position = personal_best_positions[current_global_best_idx]\n                global_best_score = personal_best_scores[current_global_best_idx]\n\n            if num_evals >= self.budget:\n                break\n\n            # Differential Evolution step\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = particles[a] + self.F * (particles[b] - particles[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, particles[i])\n                trial_score = func(trial_vector)\n                num_evals += 1\n                \n                if trial_score < current_scores[i]:\n                    particles[i] = trial_vector\n                    current_scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_positions[i] = trial_vector\n                        personal_best_scores[i] = trial_score\n                        if trial_score < global_best_score:\n                            global_best_position = trial_vector\n                            global_best_score = trial_score\n\n                if num_evals >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSO_DE", "description": "A hybridized Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that adaptively balances exploration and exploitation based on the dimensionality and complexity of the problem landscape.", "configspace": "", "generation": 0, "fitness": 0.2866760123673857, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.9369173762631343, 0.9205098544612982, 0.935695907902725, 0.1905222917718572, 0.19091549449337042, 0.9362464115440887, 0.18324884945778752, 0.9387283238552809, 0.9344461420295691, 0.8715848358396244, 0.7362411998275513, 0.043563925881191845, 0.8830477353423727, 0.5241989329731898, 0.88398957137876, 0.05483429584027122, 0.8683976630931052, 0.8806964202590783, 0.08846459250194216, 0.12685046699223312, 0.14794972480422053, 0.07270716456511894, 0.07497348923146074, 0.1097547792266581, 0.12525258296047592, 0.050999940813065914, 0.1197233381337135, 0.11355104191547216, 0.1228420171619462, 0.12142260353034084, 0.14509360158535078, 0.1325804093049101, 0.1335710472891054, 0.1095434558967483, 0.11147212640696125, 0.15322121652147003, 0.992589141010963, 0.9823257958256486, 0.9918915695161896, 0.9858614909517515, 0.9858056897511344, 0.9902469800643967, 0.9884820277963142, 0.9894254325186943, 0.9808993348897228, 0.8035387888921531, 0.7877281171879482, 0.7638550452541457, 0.7446826540477219, 0.7351581278545752, 0.1528311225863319, 0.7745830187784174, 0.08937927496688314, 0.7956827516522809, 0.22868282391895955, 0.5834722618260345, 0.2260322034867599, 0.21446527319171937, 0.2784976713949001, 0.2060692751669626, 0.12564336883027938, 0.23208123001636227, 0.12569985787167937, 0.12556163698428913, 0.18483029721137623, 0.17506713153073672, 0.18654711688445635, 0.19582017251269768, 0.1631566596692846, 0.12947173427218273, 0.12998753143618413, 0.1737539823940375, 0.1885166835464558, 0.054543595661009414, 0.26268817702974234, 0.24476364121239724, 0.22768350231419465, 0.20839042662035923, 0.2226432438482442, 9.999999999998899e-05, 0.23463978766191462, 0.05562695502615367, 9.999999999998899e-05, 0.02153185910658595, 0.048837506644779594, 0.04278836755143656, 9.999999999998899e-05, 0.010204666295589915, 9.999999999998899e-05, 9.999999999998899e-05, 0.094971197350604, 0.05550801594663912, 0.033628239675000615, 0.045349363034046686, 0.012614386090587515, 0.11641793544630241, 0.05035994426751389, 0.05585768587329565, 0.05967494848140065, 0.05374507592328104, 0.16337066477698514, 0.21142516088545693, 0.2511405544203368, 0.08393274144623686, 0.08349955846332646, 0.07819573398378799, 0.07768326827440486, 0.07790841712691121, 0.04432285594460539, 0.19608315867543047, 0.1285762169713618, 0.03987380326429224, 0.00684790787972378, 0.03994295959930516, 0.06486245383268507, 0.060429892827329246, 0.10455181773650124, 0.5533606521113319, 0.5506637355434192, 0.5885524309594059, 0.5849069919640942, 0.6096777088107714, 0.20936540726587816, 0.6039358720990492, 0.644018975894951, 0.5836120211962008, 0.07037054368694773, 0.10166171508437816, 0.12226084331136555, 0.16120405608558175, 0.15755445087848252, 0.16706088686922738, 0.06461151537178977, 0.11534811100216902, 0.11342887624227604, 0.18685191506879528, 0.1638774544365702, 0.2840807029359881, 0.25619463227004735, 0.2755641562870763, 0.21686944102041283, 0.1820789768345792, 0.12946918390998086, 0.19634872088663802, 0.45657216808692147, 0.3630504696995488, 0.2359196789600062, 0.3123108430478134, 0.3972752035948024, 0.34024533457266404, 0.4438829943947302, 0.5165635557068333, 0.34374138790513376, 0.24084522547568832, 0.22326186058577513, 0.22012816168002303, 0.2510820432626709, 0.30692356880211547, 0.2743357297018473, 0.21825365363365523, 0.2901290507598221, 0.08141989952979134, 0.21790139540447373, 0.19606967353916205, 0.18451572663417415, 0.20252415446339056, 0.20315760800177785, 0.20430451619374612, 0.19844960220143426, 0.19530573000883422, 0.22711757003521948, 0.22754669035043085, 0.2307994392791185, 0.22489034544841857, 0.17803915198588116, 0.2106845764165879, 0.2113588207982089, 0.1877308764606015, 0.24934786287251443, 0.2524875378585376, 0.9570031013761289, 0.1659051299679415, 0.15474415916509643, 0.9434670843546062, 0.20159130692571547, 0.2013457944790592, 0.15819852554437808, 0.11510795279690866, 0.15448359915508392, 0.785174779946084, 0.21298001604718675, 0.08299200331262269, 0.21243672695602367, 0.22695140324766683, 0.21324273696558316, 0.10446740056838755, 0.16909070691217798, 0.8054304137698389, 0.21056087433635118, 0.18057291432534983, 0.1866640841401448, 0.2008240280208251, 0.19257136825688748, 0.17619381873334972, 0.18598482810842532, 0.1870674441118807, 0.18907058062007331, 0.09504971625452563, 0.09088754508739871, 0.08258891482697583, 0.11250251214961315, 0.0884242941839215, 0.10583807399272116, 0.08800994365126447, 0.08105283080392545, 0.08474217896559366]}, "mutation_prompt": null}
{"id": "7e8e5bdf-3532-411c-a53c-f43f5cf2c6c8", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.5\n        self.CR = 0.9\n        self.F = 0.8\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evals = 0  # Track number of evaluations\n\n    def adaptive_parameters(self):\n        progress = self.evals / self.budget\n        self.w = 0.4 + 0.1 * np.cos(progress * np.pi)  # Dynamic inertia weight\n        self.F = 0.6 + 0.4 * progress  # Dynamic differential weight\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.full(self.population_size, np.inf)\n        \n        current_scores = np.array([func(p) for p in particles])\n        num_evals = self.population_size\n        self.evals = num_evals  # Initial evaluations count\n        \n        better_mask = current_scores < personal_best_scores\n        personal_best_scores = np.where(better_mask, current_scores, personal_best_scores)\n        personal_best_positions = np.where(better_mask[:, np.newaxis], particles, personal_best_positions)\n        \n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n        \n        while num_evals < self.budget:\n            self.adaptive_parameters()  # Update adaptive parameters\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - particles) +\n                          self.c2 * r2 * (global_best_position - particles))\n            particles = np.clip(particles + velocities, self.lower_bound, self.upper_bound)\n\n            current_scores = np.array([func(p) for p in particles])\n            num_evals += self.population_size\n            self.evals = num_evals\n            \n            better_mask = current_scores < personal_best_scores\n            personal_best_scores = np.where(better_mask, current_scores, personal_best_scores)\n            personal_best_positions = np.where(better_mask[:, np.newaxis], particles, personal_best_positions)\n\n            current_global_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_global_best_idx] < global_best_score:\n                global_best_position = personal_best_positions[current_global_best_idx]\n                global_best_score = personal_best_scores[current_global_best_idx]\n\n            if num_evals >= self.budget:\n                break\n\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = particles[a] + self.F * (particles[b] - particles[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, particles[i])\n                trial_score = func(trial_vector)\n                num_evals += 1\n                self.evals = num_evals\n                \n                if trial_score < current_scores[i]:\n                    particles[i] = trial_vector\n                    current_scores[i] = trial_score\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_positions[i] = trial_vector\n                        personal_best_scores[i] = trial_score\n                        if trial_score < global_best_score:\n                            global_best_position = trial_vector\n                            global_best_score = trial_score\n\n                if num_evals >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "EnhancedHybridPSO_DE", "description": "Enhanced HybridPSO_DE by incorporating adaptive learning rates for PSO and DE steps to dynamically scale according to optimization progress.", "configspace": "", "generation": 1, "fitness": 0.2844716662013321, "feedback": "", "error": "", "parent_id": "b79f2560-7a8b-4a55-bcbb-95608a01e3d4", "metadata": {"aucs": [0.9371922225606469, 0.3088674009364658, 0.9391020673156312, 0.19022163127659186, 0.9338979404154335, 0.9383917062971432, 0.9447638444631087, 0.14376515376673338, 0.9371225309636325, 0.8420927167254575, 9.999999999998899e-05, 0.8487967413888585, 0.8769881855801671, 0.30409947260847425, 0.8763254298877295, 0.07008993360041604, 0.8772767110902769, 0.8945507698126512, 0.09607497974640522, 0.11683618360120618, 0.1478585306100022, 0.0687177954171384, 0.07086029573157016, 0.16379571301391793, 0.0587241708503865, 0.12255662407697931, 0.0918809918685598, 0.1173378448846144, 0.09704629042261836, 0.1284916950593109, 0.11871235994757368, 0.09330800286805174, 0.11772608013362318, 0.1517502506790137, 0.07299316576261083, 0.028020064637063635, 0.9912838851396885, 0.9812254217871645, 0.9909364947048519, 0.9851235977861698, 0.9883885772597962, 0.988669917287926, 0.07493538609552708, 0.9841905523043598, 0.971003127112045, 0.8042373296434706, 0.7783630009228014, 0.7624510899126046, 0.7394929343761867, 0.15286772647574942, 0.154381649559876, 0.7825805082332259, 0.7878229610193006, 0.7886758640540373, 0.1724517651238926, 0.2273290156885075, 0.902097176279321, 0.3817758314951373, 0.21162639866073418, 0.2824194826766656, 0.150111034323968, 0.21751453326500492, 0.23303052380730638, 0.2179563177183026, 0.17142387735405717, 0.15790267645794864, 0.21527108826709485, 0.16905410268402288, 0.13962279019680102, 0.1837867145773041, 0.1666356569802041, 0.1727691940356736, 0.19632417138896463, 0.054941040089798276, 0.2118122592483893, 0.16234393122791058, 0.16225403720180342, 0.13449238273033248, 0.14189076258273348, 0.1407524700663897, 0.14397263499835244, 0.00898790067198696, 9.999999999998899e-05, 0.005771826703763305, 0.01843778862143386, 0.024762893860530544, 0.009583640876956845, 0.08155045160219054, 9.999999999998899e-05, 9.999999999998899e-05, 0.15390358458635944, 0.03079964747938979, 0.13015776802355428, 0.08322501159562812, 0.016302488600751674, 0.061150117752445166, 0.056296440730424724, 0.07785168798353348, 0.07743239143301783, 0.05421624469259345, 0.038546792017681075, 0.15466297912572247, 0.10310217494634633, 0.11882530245132128, 0.09559892319340979, 0.07882906579216598, 0.07890132665629823, 0.07758022810551013, 0.0976639970444152, 0.05227502853946098, 0.2266277296295871, 0.039457592259101726, 0.006827581818950823, 9.999999999998899e-05, 0.13628400145864306, 0.11859600953247174, 0.08612618143513062, 0.5624512415603318, 0.6008676156116444, 0.594414822577177, 0.6011450145983648, 0.5929774490157391, 0.20943977999459507, 0.625393055062141, 0.6047099983596083, 0.628243335339993, 0.07695713658631664, 0.08428034419308406, 0.10960871055976984, 0.11398237185839422, 0.14315112212437908, 0.1188650823712063, 0.16255465169161476, 0.10457597803900376, 0.09362415849920724, 0.2064989113519743, 0.1417524261623625, 0.23634924213699826, 0.2562209658475757, 0.27588413741784656, 0.14100152533086763, 0.13961163832863843, 0.19941747771590257, 0.1986611738880657, 0.33760979284735326, 0.5422484673499145, 0.4047676162699617, 0.1831629846552707, 0.3762122906011437, 0.27874783872715503, 0.26696448971762976, 0.4554984478363189, 0.15302279076511716, 0.18133942078085263, 0.2341973854015864, 0.18832724487562247, 0.32687950500141216, 0.24224732386055914, 0.2811769492683953, 0.2677543021105727, 0.1611988970959234, 0.09856529102924472, 0.22454365694140543, 0.1737976132559934, 0.2351860255291104, 0.2332643134290987, 0.23400396379394384, 0.2066385297617268, 0.19703969358772033, 0.22804036018313123, 0.19250706589915012, 0.2545595349517509, 0.20694194065658578, 0.8646657256322599, 0.22628697588711177, 0.21094580225507775, 0.21174800886524114, 0.22775000140239277, 0.20122682065018482, 0.19018215664651117, 0.9583961936534708, 0.9555567227473706, 0.1774785101622225, 0.9586305605706325, 0.2014521847188635, 0.20163703875138095, 0.15452693944472062, 0.1272200319788026, 0.15453238537686864, 0.5848242421421015, 0.20927738374535187, 0.0829939019946433, 0.21204353489791572, 0.28465991859704853, 0.2127804345894876, 0.10446151738598763, 0.1693864372077586, 0.31566644978383807, 0.20532678194895815, 0.18237260596878135, 0.1934900755181248, 0.17969755248161823, 0.17313697615739965, 0.19125151284645336, 0.18413055856117666, 0.20786025044116596, 0.18978277421634115, 0.08402868512016703, 0.09319755153124332, 0.076104400409291, 0.10168130729193636, 0.07665005191208307, 0.10071725391642194, 0.0941684087857031, 0.09610148027832022, 0.07350650058659958]}, "mutation_prompt": null}
