{"id": "708e1c8d-31c8-4052-9869-0f6b727eb9a0", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim, pop_size=None):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size if pop_size is not None else 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.scaling_factor_bounds = (0.5, 1.0)\n        self.crossover_prob_bounds = (0.1, 0.9)\n        self.population = None\n        self.func_evals = 0\n\n    def __call__(self, func):\n        self.population = self.initialize_population()\n        self.evaluate_population(func)\n        \n        while self.func_evals < self.budget:\n            for i in range(self.pop_size):\n                donor_vector = self.mutation(i)\n                trial_vector = self.crossover(self.population[i], donor_vector)\n                self.selection(func, i, trial_vector)\n\n        best_idx = np.argmin(self.population[:, -1])\n        return self.population[best_idx, :-1]\n\n    def initialize_population(self):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        return np.hstack((pop, np.zeros((self.pop_size, 1))))  # Last column for fitness\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.func_evals < self.budget:\n                self.population[i, -1] = func(self.population[i, :-1])\n                self.func_evals += 1\n\n    def mutation(self, target_idx):\n        indices = list(range(self.pop_size))\n        indices.remove(target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(*self.scaling_factor_bounds)\n        donor_vector = self.population[a, :-1] + F * (self.population[b, :-1] - self.population[c, :-1])\n        donor_vector = np.clip(donor_vector, self.lower_bound, self.upper_bound)\n        return donor_vector\n\n    def crossover(self, target_vector, donor_vector):\n        crossover_prob = np.random.uniform(*self.crossover_prob_bounds)\n        crossover_mask = np.random.rand(self.dim) < crossover_prob\n        trial_vector = np.where(crossover_mask, donor_vector, target_vector[:-1])\n        return trial_vector\n\n    def selection(self, func, target_idx, trial_vector):\n        if self.func_evals < self.budget:\n            trial_fitness = func(trial_vector)\n            self.func_evals += 1\n            if trial_fitness < self.population[target_idx, -1]:\n                self.population[target_idx, :-1] = trial_vector\n                self.population[target_idx, -1] = trial_fitness", "name": "AdaptiveDifferentialEvolution", "description": "An adaptive Differential Evolution algorithm with self-adaptive mutation and crossover strategies to explore and exploit the search space effectively.", "configspace": "", "generation": 0, "fitness": 0.2261091887336961, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6741334734251345, 0.6620711171648024, 0.6595062937706633, 0.6614344965179304, 0.6584436454144863, 0.6620355585341458, 0.6567116100525323, 0.675206553635991, 0.6705031700179109, 0.39942525048386535, 0.3951938629308104, 0.38224893385630043, 0.4073325693845311, 0.3718302999355484, 0.4172853611004853, 0.43090346559826165, 0.4093806466720913, 0.41506384939660435, 0.17601394718497665, 0.1578817905003771, 0.15219069773485194, 0.1583032377798671, 0.1494757916976579, 0.1814379986377841, 0.18827382411697613, 0.14918255638840294, 0.22160623158977022, 0.12866551221037315, 0.12261313009178354, 0.1312704713479521, 0.1624539043852974, 0.1327242649329804, 0.12854356906822617, 0.12287235763001458, 0.14720083475243884, 0.13823861460036546, 0.956747977195947, 0.9633357911150653, 0.941713461400459, 0.952234589507572, 0.9325266685935855, 0.9740452098845009, 0.9462402057446292, 0.9572207208304299, 0.9572887712594498, 0.24884861596470398, 0.2189969422085184, 0.21642851830275223, 0.22477207626997675, 0.2439637047488602, 0.21306295683336995, 0.23756892165172427, 0.2320686735418087, 0.2064655645391541, 0.2258487038282767, 0.21931921726282122, 0.22440210456479837, 0.2537843566014695, 0.2573718560452214, 0.23658415997419835, 0.24938938820068612, 0.322668775466168, 0.28207063723333237, 0.1340367643778423, 0.14262547083441046, 0.1542571648062041, 0.12989461805447156, 0.1496756511987416, 0.1089482586222974, 0.14493522494146727, 0.14881089893445898, 0.1556966403649891, 0.09723734299396325, 0.10591305279435181, 0.1076022446693713, 0.12832463206628275, 0.13634871546091998, 0.1300334315585786, 0.14132866846721426, 0.11119487843629483, 0.1329021832327587, 0.0022202432373378267, 9.999999999998899e-05, 0.014544462057708762, 9.999999999998899e-05, 0.014936501061450724, 9.999999999998899e-05, 0.0008371919424876584, 0.008694931179185739, 0.0003713139660050935, 0.08653713001901453, 0.10609380316108963, 0.08436681399094048, 0.12642271539738792, 0.05333687248805674, 0.0835174307940535, 0.12251948415041847, 0.12440821757362741, 0.11615772612779507, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011661037630043003, 9.999999999998899e-05, 0.004516112265623762, 0.10193417034155083, 0.07887446115592922, 0.09250220453908242, 0.10194499670327839, 0.09413968337104639, 0.10246605811802767, 0.09051579212637995, 0.08532820222376158, 0.0804820463670134, 0.4086113136574293, 0.4260259410178926, 0.4297894401709266, 0.4328525918896958, 0.41749003802673657, 0.42623073484948437, 0.44635268385666194, 0.4133003693053925, 0.44496446503871934, 0.09220936083525122, 0.09309444450244697, 0.0857893348899792, 0.07990304360909628, 0.09400092495829504, 0.09650586006125927, 0.0845555136081868, 0.0886380569230254, 0.08185662973666641, 0.2012937443259868, 0.22230685105594994, 0.140571026061876, 0.12215602388235969, 0.13393054250733616, 0.14187936013680902, 0.1803120490676905, 0.1315175219309589, 0.1376977843823315, 0.2402023402003629, 0.25323993163723724, 0.25179940496620334, 0.25200814188850496, 0.23975539872491747, 0.24051425807530735, 0.2733107006668657, 0.2892487966054941, 0.26146217400616134, 0.17107123416268588, 0.17113708728178567, 0.1764327331614126, 0.16859066467131179, 0.17147172719300274, 0.18064709961033054, 0.18456795604724063, 0.20299010866982103, 0.16816520174394867, 0.22520770304415294, 0.20091111456067368, 0.1999495339892403, 0.1905547844980029, 0.18532164291033892, 0.17723350972938645, 0.1723055438894875, 0.17982499910220107, 0.18255090978824084, 0.19492443345117916, 0.18501969636808968, 0.1978149956254176, 0.20113320646285893, 0.18895870023230654, 0.18591131990318865, 0.18535857353803176, 0.18226064985687795, 0.18873139726862997, 0.14681263750381546, 0.1770255809503497, 0.24615234127429708, 0.18249986318686062, 0.18930681094501545, 0.1654840910889277, 0.2402557822177397, 0.20141968737881744, 0.1773041974531454, 0.2326004551112555, 0.188206624569492, 0.23761591274466887, 0.21024669457546963, 0.29592891766204343, 0.19117856829934177, 0.28074070854764266, 0.21820697541916456, 0.2020714558365888, 0.17421194787435856, 0.18560333447896415, 0.18425654449168283, 0.19005664020756408, 0.18368639020113287, 0.17015069122111492, 0.1797880461465574, 0.1718444139028723, 0.18063913223760297, 0.08395875310947742, 0.07354593130685483, 0.0759181391672148, 0.0713881621079967, 0.06975264877632703, 0.07124737651722557, 0.07053525188788556, 0.07260914153101405, 0.0806836214809884]}, "mutation_prompt": null}
{"id": "d1265530-1535-41cc-a042-b22f2a595b50", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim, pop_size=None):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size if pop_size is not None else 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.scaling_factor_bounds = (0.5, 1.0)\n        self.crossover_prob_bounds = (0.1, 0.9)\n        self.population = None\n        self.func_evals = 0\n\n    def __call__(self, func):\n        self.population = self.initialize_population()\n        self.evaluate_population(func)\n        \n        while self.func_evals < self.budget:\n            for i in range(self.pop_size):\n                donor_vector = self.mutation(i)\n                trial_vector = self.crossover(self.population[i], donor_vector)\n                self.selection(func, i, trial_vector)\n\n        best_idx = np.argmin(self.population[:, -1])\n        return self.population[best_idx, :-1]\n\n    def initialize_population(self):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        return np.hstack((pop, np.zeros((self.pop_size, 1))))  # Last column for fitness\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.func_evals < self.budget:\n                self.population[i, -1] = func(self.population[i, :-1])\n                self.func_evals += 1\n\n    def mutation(self, target_idx):\n        indices = list(range(self.pop_size))\n        indices.remove(target_idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(*self.scaling_factor_bounds)\n        donor_vector = self.population[a, :-1] + F * (self.population[b, :-1] - self.population[c, :-1])\n        donor_vector = np.clip(donor_vector, self.lower_bound, self.upper_bound)\n        return donor_vector\n\n    def crossover(self, target_vector, donor_vector):\n        crossover_prob = np.random.uniform(*self.crossover_prob_bounds)\n        crossover_mask = np.random.rand(self.dim) < crossover_prob\n        trial_vector = np.where(crossover_mask, donor_vector, target_vector[:-1])\n        return trial_vector\n\n    def selection(self, func, target_idx, trial_vector):\n        if self.func_evals < self.budget:\n            trial_fitness = func(trial_vector)\n            self.func_evals += 1\n            if trial_fitness < self.population[target_idx, -1]:\n                self.population[target_idx, :-1] = trial_vector\n                self.population[target_idx, -1] = trial_fitness", "name": "AdaptiveDifferentialEvolution", "description": "An adaptive Differential Evolution algorithm with self-adaptive mutation and crossover strategies to explore and exploit the search space effectively.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "708e1c8d-31c8-4052-9869-0f6b727eb9a0", "metadata": {"aucs": [0.6741334734251345, 0.6620711171648024, 0.6595062937706633, 0.6614344965179304, 0.6584436454144863, 0.6620355585341458, 0.6567116100525323, 0.675206553635991, 0.6705031700179109, 0.39942525048386535, 0.3951938629308104, 0.38224893385630043, 0.4073325693845311, 0.3718302999355484, 0.4172853611004853, 0.43090346559826165, 0.4093806466720913, 0.41506384939660435, 0.17601394718497665, 0.1578817905003771, 0.15219069773485194, 0.1583032377798671, 0.1494757916976579, 0.1814379986377841, 0.18827382411697613, 0.14918255638840294, 0.22160623158977022, 0.12866551221037315, 0.12261313009178354, 0.1312704713479521, 0.1624539043852974, 0.1327242649329804, 0.12854356906822617, 0.12287235763001458, 0.14720083475243884, 0.13823861460036546, 0.956747977195947, 0.9633357911150653, 0.941713461400459, 0.952234589507572, 0.9325266685935855, 0.9740452098845009, 0.9462402057446292, 0.9572207208304299, 0.9572887712594498, 0.24884861596470398, 0.2189969422085184, 0.21642851830275223, 0.22477207626997675, 0.2439637047488602, 0.21306295683336995, 0.23756892165172427, 0.2320686735418087, 0.2064655645391541, 0.2258487038282767, 0.21931921726282122, 0.22440210456479837, 0.2537843566014695, 0.2573718560452214, 0.23658415997419835, 0.24938938820068612, 0.322668775466168, 0.28207063723333237, 0.1340367643778423, 0.14262547083441046, 0.1542571648062041, 0.12989461805447156, 0.1496756511987416, 0.1089482586222974, 0.14493522494146727, 0.14881089893445898, 0.1556966403649891, 0.09723734299396325, 0.10591305279435181, 0.1076022446693713, 0.12832463206628275, 0.13634871546091998, 0.1300334315585786, 0.14132866846721426, 0.11119487843629483, 0.1329021832327587, 0.0022202432373378267, 9.999999999998899e-05, 0.014544462057708762, 9.999999999998899e-05, 0.014936501061450724, 9.999999999998899e-05, 0.0008371919424876584, 0.008694931179185739, 0.0003713139660050935, 0.08653713001901453, 0.10609380316108963, 0.08436681399094048, 0.12642271539738792, 0.05333687248805674, 0.0835174307940535, 0.12251948415041847, 0.12440821757362741, 0.11615772612779507, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011661037630043003, 9.999999999998899e-05, 0.004516112265623762, 0.10193417034155083, 0.07887446115592922, 0.09250220453908242, 0.10194499670327839, 0.09413968337104639, 0.10246605811802767, 0.09051579212637995, 0.08532820222376158, 0.0804820463670134, 0.4086113136574293, 0.4260259410178926, 0.4297894401709266, 0.4328525918896958, 0.41749003802673657, 0.42623073484948437, 0.44635268385666194, 0.4133003693053925, 0.44496446503871934, 0.09220936083525122, 0.09309444450244697, 0.0857893348899792, 0.07990304360909628, 0.09400092495829504, 0.09650586006125927, 0.0845555136081868, 0.0886380569230254, 0.08185662973666641, 0.2012937443259868, 0.22230685105594994, 0.140571026061876, 0.12215602388235969, 0.13393054250733616, 0.14187936013680902, 0.1803120490676905, 0.1315175219309589, 0.1376977843823315, 0.2402023402003629, 0.25323993163723724, 0.25179940496620334, 0.25200814188850496, 0.23975539872491747, 0.24051425807530735, 0.2733107006668657, 0.2892487966054941, 0.26146217400616134, 0.17107123416268588, 0.17113708728178567, 0.1764327331614126, 0.16859066467131179, 0.17147172719300274, 0.18064709961033054, 0.18456795604724063, 0.20299010866982103, 0.16816520174394867, 0.22520770304415294, 0.20091111456067368, 0.1999495339892403, 0.1905547844980029, 0.18532164291033892, 0.17723350972938645, 0.1723055438894875, 0.17982499910220107, 0.18255090978824084, 0.19492443345117916, 0.18501969636808968, 0.1978149956254176, 0.20113320646285893, 0.18895870023230654, 0.18591131990318865, 0.18535857353803176, 0.18226064985687795, 0.18873139726862997, 0.14681263750381546, 0.1770255809503497, 0.24615234127429708, 0.18249986318686062, 0.18930681094501545, 0.1654840910889277, 0.2402557822177397, 0.20141968737881744, 0.1773041974531454, 0.2326004551112555, 0.188206624569492, 0.23761591274466887, 0.21024669457546963, 0.29592891766204343, 0.19117856829934177, 0.28074070854764266, 0.21820697541916456, 0.2020714558365888, 0.17421194787435856, 0.18560333447896415, 0.18425654449168283, 0.19005664020756408, 0.18368639020113287, 0.17015069122111492, 0.1797880461465574, 0.1718444139028723, 0.18063913223760297, 0.08395875310947742, 0.07354593130685483, 0.0759181391672148, 0.0713881621079967, 0.06975264877632703, 0.07124737651722557, 0.07053525188788556, 0.07260914153101405, 0.0806836214809884]}, "mutation_prompt": null}
