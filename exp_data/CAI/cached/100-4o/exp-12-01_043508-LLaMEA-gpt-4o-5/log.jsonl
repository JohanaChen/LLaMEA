{"id": "3ddd634a-73ac-41ef-8e3e-43cda01b37b6", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(10, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n    \n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Select three distinct individuals\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Differential evolution mutation\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive local search with a random walk\n                if np.random.rand() < 0.05:\n                    walk = np.random.uniform(-0.1, 0.1, self.dim)\n                    local_trial = np.clip(population[i] + walk, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evaluations += 1\n                    if local_fitness < fitness[i]:\n                        population[i] = local_trial\n                        fitness[i] = local_fitness\n        \n        # Return the best solution\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "The algorithm combines differential evolution with adaptive local search to effectively explore and exploit the search space within the given budget.", "configspace": "", "generation": 0, "fitness": 0.4063222784719382, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8166459273763921, 0.801543635579223, 0.8463088982771234, 0.8081732770108041, 0.8102599293260608, 0.8198153332719482, 0.7958373824707136, 0.8089807545312373, 0.8254330665905422, 0.6748963650749163, 0.7102498957859529, 0.6748498946644491, 0.6927494387750994, 0.6633817440604644, 0.6829088012807147, 0.6850590681823545, 0.6897423581520968, 0.6740995382287494, 0.31175133549486633, 0.13697255093865424, 0.10814796727763609, 0.13885410302222867, 0.1147500333847411, 0.1661795606864922, 0.14075493137076223, 0.19175786455370458, 0.13693279356534915, 0.136289623290901, 0.11604977872785671, 0.11829861595701818, 0.12505968729072048, 0.13297348243531992, 0.10474955190359048, 0.12305219684827129, 0.11311956976300408, 0.1402012326735652, 0.9179769487282535, 0.9528361354642073, 0.956349595976692, 0.9745742218981138, 0.9732506863513629, 0.9702372036425632, 0.9780303460774316, 0.9225304487201482, 0.974796462918628, 0.49100889198559516, 0.5300496140375383, 0.5240049275525105, 0.5599290395023485, 0.48968341533785453, 0.5698956944294247, 0.5419034551777551, 0.5868098677489484, 0.52011887150755, 0.7724982099063539, 0.7493306678067385, 0.7197827486495059, 0.7130939485734599, 0.771629297685878, 0.7922157410698506, 0.7935162968782147, 0.7118879118225586, 0.7843007316146879, 0.5228143351517216, 0.41371678509762044, 0.5142019631074151, 0.5540934630317057, 0.4500869330174573, 0.41299282279671, 0.44911280701485323, 0.564152773372822, 0.47985269754194015, 0.2821686877542172, 0.3646862738410327, 0.5154233355799991, 0.40963636445692886, 0.4169111441596598, 0.4030618780368964, 0.467337222947788, 0.45798631476164364, 0.48397954984881175, 0.43674526123288604, 0.3832821226596823, 0.4755588409895334, 0.4294582364699736, 0.4088548445165656, 0.4248862350595146, 0.38860805104888196, 0.38780486903442757, 0.40742889049190467, 0.5676108917102304, 0.4781559258303044, 0.5471148800290835, 0.5115893682470067, 0.5425640355752241, 0.5502827692938703, 0.5213876120542041, 0.5725418052597037, 0.5513125542520372, 0.0934912099505616, 0.11476065817540526, 0.13570319880577886, 0.23798590822420196, 0.18899567734992528, 0.30097105178657513, 0.1935228124720516, 0.26760542718268854, 0.23387407414792338, 0.34320910293500917, 0.28962170284972977, 0.2924519791588276, 0.33388313184610485, 0.3716716680185955, 0.3513977914790958, 0.2889678756862806, 0.32539283521828755, 0.32808360860537, 0.7234504671154514, 0.7085819978220198, 0.7219644788644004, 0.7072911577559778, 0.7107759772626318, 0.7203718768952314, 0.7107628748136835, 0.7007392396306695, 0.6944854683004384, 0.11731994758452713, 0.09680219962486358, 0.11360475152109717, 0.09189321256740024, 0.1092280647970536, 0.10217161115679607, 0.08966521815743544, 0.11074044875640643, 0.11252141392427872, 0.19272806341952164, 0.23507552173449664, 0.1730650276121587, 0.3250300993916364, 0.48986265185677214, 0.4793558259067412, 0.21025224900813932, 0.20951637690913127, 0.16762600352394352, 0.37300799622168923, 0.3955220911910239, 0.36205456991908025, 0.3663284506280541, 0.35424152335695624, 0.35890904774613763, 0.42444401600710024, 0.4196471252819094, 0.4175052087882052, 0.2767410667578182, 0.2877248010037239, 0.2756176299133013, 0.3117104020844317, 0.2744999963138157, 0.2796154560027059, 0.3126603495733943, 0.3479542436213505, 0.30626354846002013, 0.19333292481125963, 0.18354179751179778, 0.18102725294558053, 0.177013650311856, 0.1943193767396847, 0.19166008439421334, 0.18685563590944854, 0.1792879187216544, 0.19374818795063997, 0.22255910749288654, 0.2996032874886708, 0.22054799907179456, 0.3310829379235106, 0.21080503017895713, 0.19220401724610592, 0.20997471157062508, 0.22117226137827672, 0.2257067501889365, 0.1700963077552593, 0.829722320758042, 0.14971260995052904, 0.7993381406373006, 0.18943441648998283, 0.19181412334330428, 0.7577002841305118, 0.6605123551865639, 0.16603507128601702, 0.8214308434763296, 0.20743716812208213, 0.7580485275780415, 0.7588403934635786, 0.20494113578624407, 0.6738819244664073, 0.21070467616643151, 0.21287363810223492, 0.1622574410683777, 0.20410341565770096, 0.18204927825470862, 0.17297742131474936, 0.17298120580349918, 0.19463614059550172, 0.18085239651881357, 0.19467364293137757, 0.18902801270995884, 0.17402125784634903, 0.07734456442168425, 0.07019019968829143, 0.07541816133728751, 0.08113790698961365, 0.07545629954158517, 0.08028338928851886, 0.07112021285352477, 0.07117095480146529, 0.0715498029428987]}, "mutation_prompt": null}
{"id": "cccde9fb-4110-44b3-8c95-488c28055b81", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(10, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n    \n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Select three distinct individuals\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Differential evolution mutation\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Adaptive local search with a random walk\n                if np.random.rand() < 0.05:\n                    walk = np.random.uniform(-0.1, 0.1, self.dim)\n                    local_trial = np.clip(population[i] + walk, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evaluations += 1\n                    if local_fitness < fitness[i]:\n                        population[i] = local_trial\n                        fitness[i] = local_fitness\n        \n        # Return the best solution\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "The algorithm combines differential evolution with adaptive local search to effectively explore and exploit the search space within the given budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ddd634a-73ac-41ef-8e3e-43cda01b37b6", "metadata": {"aucs": [0.8166459273763921, 0.801543635579223, 0.8463088982771234, 0.8081732770108041, 0.8102599293260608, 0.8198153332719482, 0.7958373824707136, 0.8089807545312373, 0.8254330665905422, 0.6748963650749163, 0.7102498957859529, 0.6748498946644491, 0.6927494387750994, 0.6633817440604644, 0.6829088012807147, 0.6850590681823545, 0.6897423581520968, 0.6740995382287494, 0.31175133549486633, 0.13697255093865424, 0.10814796727763609, 0.13885410302222867, 0.1147500333847411, 0.1661795606864922, 0.14075493137076223, 0.19175786455370458, 0.13693279356534915, 0.136289623290901, 0.11604977872785671, 0.11829861595701818, 0.12505968729072048, 0.13297348243531992, 0.10474955190359048, 0.12305219684827129, 0.11311956976300408, 0.1402012326735652, 0.9179769487282535, 0.9528361354642073, 0.956349595976692, 0.9745742218981138, 0.9732506863513629, 0.9702372036425632, 0.9780303460774316, 0.9225304487201482, 0.974796462918628, 0.49100889198559516, 0.5300496140375383, 0.5240049275525105, 0.5599290395023485, 0.48968341533785453, 0.5698956944294247, 0.5419034551777551, 0.5868098677489484, 0.52011887150755, 0.7724982099063539, 0.7493306678067385, 0.7197827486495059, 0.7130939485734599, 0.771629297685878, 0.7922157410698506, 0.7935162968782147, 0.7118879118225586, 0.7843007316146879, 0.5228143351517216, 0.41371678509762044, 0.5142019631074151, 0.5540934630317057, 0.4500869330174573, 0.41299282279671, 0.44911280701485323, 0.564152773372822, 0.47985269754194015, 0.2821686877542172, 0.3646862738410327, 0.5154233355799991, 0.40963636445692886, 0.4169111441596598, 0.4030618780368964, 0.467337222947788, 0.45798631476164364, 0.48397954984881175, 0.43674526123288604, 0.3832821226596823, 0.4755588409895334, 0.4294582364699736, 0.4088548445165656, 0.4248862350595146, 0.38860805104888196, 0.38780486903442757, 0.40742889049190467, 0.5676108917102304, 0.4781559258303044, 0.5471148800290835, 0.5115893682470067, 0.5425640355752241, 0.5502827692938703, 0.5213876120542041, 0.5725418052597037, 0.5513125542520372, 0.0934912099505616, 0.11476065817540526, 0.13570319880577886, 0.23798590822420196, 0.18899567734992528, 0.30097105178657513, 0.1935228124720516, 0.26760542718268854, 0.23387407414792338, 0.34320910293500917, 0.28962170284972977, 0.2924519791588276, 0.33388313184610485, 0.3716716680185955, 0.3513977914790958, 0.2889678756862806, 0.32539283521828755, 0.32808360860537, 0.7234504671154514, 0.7085819978220198, 0.7219644788644004, 0.7072911577559778, 0.7107759772626318, 0.7203718768952314, 0.7107628748136835, 0.7007392396306695, 0.6944854683004384, 0.11731994758452713, 0.09680219962486358, 0.11360475152109717, 0.09189321256740024, 0.1092280647970536, 0.10217161115679607, 0.08966521815743544, 0.11074044875640643, 0.11252141392427872, 0.19272806341952164, 0.23507552173449664, 0.1730650276121587, 0.3250300993916364, 0.48986265185677214, 0.4793558259067412, 0.21025224900813932, 0.20951637690913127, 0.16762600352394352, 0.37300799622168923, 0.3955220911910239, 0.36205456991908025, 0.3663284506280541, 0.35424152335695624, 0.35890904774613763, 0.42444401600710024, 0.4196471252819094, 0.4175052087882052, 0.2767410667578182, 0.2877248010037239, 0.2756176299133013, 0.3117104020844317, 0.2744999963138157, 0.2796154560027059, 0.3126603495733943, 0.3479542436213505, 0.30626354846002013, 0.19333292481125963, 0.18354179751179778, 0.18102725294558053, 0.177013650311856, 0.1943193767396847, 0.19166008439421334, 0.18685563590944854, 0.1792879187216544, 0.19374818795063997, 0.22255910749288654, 0.2996032874886708, 0.22054799907179456, 0.3310829379235106, 0.21080503017895713, 0.19220401724610592, 0.20997471157062508, 0.22117226137827672, 0.2257067501889365, 0.1700963077552593, 0.829722320758042, 0.14971260995052904, 0.7993381406373006, 0.18943441648998283, 0.19181412334330428, 0.7577002841305118, 0.6605123551865639, 0.16603507128601702, 0.8214308434763296, 0.20743716812208213, 0.7580485275780415, 0.7588403934635786, 0.20494113578624407, 0.6738819244664073, 0.21070467616643151, 0.21287363810223492, 0.1622574410683777, 0.20410341565770096, 0.18204927825470862, 0.17297742131474936, 0.17298120580349918, 0.19463614059550172, 0.18085239651881357, 0.19467364293137757, 0.18902801270995884, 0.17402125784634903, 0.07734456442168425, 0.07019019968829143, 0.07541816133728751, 0.08113790698961365, 0.07545629954158517, 0.08028338928851886, 0.07112021285352477, 0.07117095480146529, 0.0715498029428987]}, "mutation_prompt": null}
