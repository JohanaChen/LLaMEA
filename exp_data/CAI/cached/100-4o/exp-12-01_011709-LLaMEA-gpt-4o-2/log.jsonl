{"id": "46ac0923-2077-4fee-9017-2c497b7311d4", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.w = 0.5  # Inertia weight\n        self.c1 = 1.5 # Cognitive coefficient\n        self.c2 = 1.5 # Social coefficient\n        self.CR = 0.9 # Crossover rate for DE\n        self.F = 0.8  # Differential weight for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        num_evaluations = 0\n\n        # Initialize the swarm\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([func(p) for p in particles])\n        num_evaluations += self.population_size\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        while num_evaluations < self.budget:\n            # PSO Step\n            r1, r2 = np.random.rand(2)\n            velocities = self.w * velocities + \\\n                         self.c1 * r1 * (personal_best_positions - particles) + \\\n                         self.c2 * r2 * (global_best_position - particles)\n            particles = np.clip(particles + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate the particles\n            scores = np.array([func(p) for p in particles])\n            num_evaluations += self.population_size\n\n            # Update personal bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            # Update global best\n            current_best_idx = np.argmin(personal_best_scores)\n            current_best_score = personal_best_scores[current_best_idx]\n            if current_best_score < global_best_score:\n                global_best_score = current_best_score\n                global_best_position = personal_best_positions[current_best_idx]\n\n            # DE Step\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, particles[i])\n                f_trial = func(trial)\n                num_evaluations += 1\n                if f_trial < scores[i]:\n                    particles[i] = trial\n                    scores[i] = f_trial\n                    if f_trial < global_best_score:\n                        global_best_score = f_trial\n                        global_best_position = trial\n\n            if num_evaluations >= self.budget:\n                break\n        \n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Hybrid Particle Swarm and Differential Evolution algorithm that adaptively balances exploration and exploitation for efficient search.", "configspace": "", "generation": 0, "fitness": 0.2844051782363355, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8331437918667058, 0.8331437918667058, 0.8331437918667058, 0.6511531581994486, 0.6511531581994486, 0.6511531581994486, 0.7376430613386622, 0.7376430613386622, 0.7376430613386622, 0.19567894658127205, 0.19567894658127205, 0.19567894658127205, 0.051844551248232396, 0.051844551248232396, 0.051844551248232396, 0.004687314299281153, 0.004687314299281153, 0.004687314299281153, 0.13299090142021008, 0.13299090142021008, 0.13299090142021008, 0.11390804009568112, 0.11390804009568112, 0.11390804009568112, 0.13746529132071317, 0.13746529132071317, 0.13746529132071317, 0.10531015869068994, 0.10531015869068994, 0.10531015869068994, 0.10542165348984223, 0.10542165348984223, 0.10542165348984223, 0.06459081396901367, 0.06459081396901367, 0.06459081396901367, 0.9137751402811921, 0.9137751402811921, 0.9137751402811921, 0.9865120728536092, 0.9865120728536092, 0.9865120728536092, 0.9824787781329174, 0.9824787781329174, 0.9824787781329174, 0.529297118361248, 0.529297118361248, 0.529297118361248, 0.49062934754061005, 0.49062934754061005, 0.49062934754061005, 0.40800885169232093, 0.40800885169232093, 0.40800885169232093, 0.059762091964330244, 0.059762091964330244, 0.059762091964330244, 0.1602736699754581, 0.1602736699754581, 0.1602736699754581, 0.173540681572528, 0.173540681572528, 0.173540681572528, 0.25914111320693345, 0.25914111320693345, 0.25914111320693345, 0.1683672917951008, 0.1683672917951008, 0.1683672917951008, 0.5128824925686791, 0.5128824925686791, 0.5128824925686791, 0.6651504606908376, 0.6651504606908376, 0.6651504606908376, 0.5757240221062881, 0.5757240221062881, 0.5757240221062881, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3300356225581783, 0.3300356225581783, 0.3300356225581783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.5091501396685754, 0.5091501396685754, 0.5091501396685754, 0.08799581278901536, 0.08799581278901536, 0.08799581278901536, 0.33983114603641296, 0.33983114603641296, 0.33983114603641296, 0.046332004315077224, 0.046332004315077224, 0.046332004315077224, 0.1603501221600071, 0.1603501221600071, 0.1603501221600071, 0.12580843239554884, 0.12580843239554884, 0.12580843239554884, 0.20820202113902186, 0.20820202113902186, 0.20820202113902186, 0.3035305555700316, 0.3035305555700316, 0.3035305555700316, 0.08019729671148268, 0.08019729671148268, 0.08019729671148268, 0.7478042006730194, 0.7478042006730194, 0.7478042006730194, 0.5785315866789835, 0.5785315866789835, 0.5785315866789835, 0.7350629339178314, 0.7350629339178314, 0.7350629339178314, 0.09895956077732371, 0.09895956077732371, 0.09895956077732371, 0.13716500766609008, 0.13716500766609008, 0.13716500766609008, 0.11074983289620743, 0.11074983289620743, 0.11074983289620743, 0.13096201664097462, 0.13096201664097462, 0.13096201664097462, 0.23231249393487619, 0.23231249393487619, 0.23231249393487619, 0.15658373501311307, 0.15658373501311307, 0.15658373501311307, 0.2625334171903587, 0.2625334171903587, 0.2625334171903587, 0.4596330515346614, 0.4596330515346614, 0.4596330515346614, 0.2890096479557175, 0.2890096479557175, 0.2890096479557175, 0.15021272543942776, 0.15021272543942776, 0.15021272543942776, 0.18805464010995188, 0.18805464010995188, 0.18805464010995188, 0.1245693102587575, 0.1245693102587575, 0.1245693102587575, 0.1842378118507919, 0.1842378118507919, 0.1842378118507919, 0.20935219545872386, 0.20935219545872386, 0.20935219545872386, 0.18585602950540248, 0.18585602950540248, 0.18585602950540248, 0.2213866524489443, 0.2213866524489443, 0.2213866524489443, 0.22025046617891153, 0.22025046617891153, 0.22025046617891153, 0.23692036786108062, 0.23692036786108062, 0.23692036786108062, 0.9103431068115926, 0.9103431068115926, 0.9103431068115926, 0.2091665184582, 0.2091665184582, 0.2091665184582, 0.19248633645830482, 0.19248633645830482, 0.19248633645830482, 0.16270873542768727, 0.16270873542768727, 0.16270873542768727, 0.2081743244947164, 0.2081743244947164, 0.2081743244947164, 0.15560198298426953, 0.15560198298426953, 0.15560198298426953, 0.1903869070074663, 0.1903869070074663, 0.1903869070074663, 0.17952252355552645, 0.17952252355552645, 0.17952252355552645, 0.17457328757377877, 0.17457328757377877, 0.17457328757377877, 0.08039207521509728, 0.08039207521509728, 0.08039207521509728, 0.07775898568791784, 0.07775898568791784, 0.07775898568791784, 0.06479639674529192, 0.06479639674529192, 0.06479639674529192]}, "mutation_prompt": null}
{"id": "ed1387b3-5ea3-4509-abf9-1239e7692c27", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.w = 0.5  # Inertia weight\n        self.c1 = 1.5 # Cognitive coefficient\n        self.c2 = 1.5 # Social coefficient\n        self.CR = 0.9 # Crossover rate for DE\n        self.F = 0.8  # Differential weight for DE\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        num_evaluations = 0\n\n        # Initialize the swarm\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([func(p) for p in particles])\n        num_evaluations += self.population_size\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        while num_evaluations < self.budget:\n            # PSO Step\n            r1, r2 = np.random.rand(2)\n            velocities = self.w * velocities + \\\n                         self.c1 * r1 * (personal_best_positions - particles) + \\\n                         self.c2 * r2 * (global_best_position - particles)\n            particles = np.clip(particles + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate the particles\n            scores = np.array([func(p) for p in particles])\n            num_evaluations += self.population_size\n\n            # Update personal bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particles[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            # Update global best\n            current_best_idx = np.argmin(personal_best_scores)\n            current_best_score = personal_best_scores[current_best_idx]\n            if current_best_score < global_best_score:\n                global_best_score = current_best_score\n                global_best_position = personal_best_positions[current_best_idx]\n\n            # DE Step\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, particles[i])\n                f_trial = func(trial)\n                num_evaluations += 1\n                if f_trial < scores[i]:\n                    particles[i] = trial\n                    scores[i] = f_trial\n                    if f_trial < global_best_score:\n                        global_best_score = f_trial\n                        global_best_position = trial\n\n            if num_evaluations >= self.budget:\n                break\n        \n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Hybrid Particle Swarm and Differential Evolution algorithm that adaptively balances exploration and exploitation for efficient search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "46ac0923-2077-4fee-9017-2c497b7311d4", "metadata": {"aucs": [0.8331437918667058, 0.8331437918667058, 0.8331437918667058, 0.6511531581994486, 0.6511531581994486, 0.6511531581994486, 0.7376430613386622, 0.7376430613386622, 0.7376430613386622, 0.19567894658127205, 0.19567894658127205, 0.19567894658127205, 0.051844551248232396, 0.051844551248232396, 0.051844551248232396, 0.004687314299281153, 0.004687314299281153, 0.004687314299281153, 0.13299090142021008, 0.13299090142021008, 0.13299090142021008, 0.11390804009568112, 0.11390804009568112, 0.11390804009568112, 0.13746529132071317, 0.13746529132071317, 0.13746529132071317, 0.10531015869068994, 0.10531015869068994, 0.10531015869068994, 0.10542165348984223, 0.10542165348984223, 0.10542165348984223, 0.06459081396901367, 0.06459081396901367, 0.06459081396901367, 0.9137751402811921, 0.9137751402811921, 0.9137751402811921, 0.9865120728536092, 0.9865120728536092, 0.9865120728536092, 0.9824787781329174, 0.9824787781329174, 0.9824787781329174, 0.529297118361248, 0.529297118361248, 0.529297118361248, 0.49062934754061005, 0.49062934754061005, 0.49062934754061005, 0.40800885169232093, 0.40800885169232093, 0.40800885169232093, 0.059762091964330244, 0.059762091964330244, 0.059762091964330244, 0.1602736699754581, 0.1602736699754581, 0.1602736699754581, 0.173540681572528, 0.173540681572528, 0.173540681572528, 0.25914111320693345, 0.25914111320693345, 0.25914111320693345, 0.1683672917951008, 0.1683672917951008, 0.1683672917951008, 0.5128824925686791, 0.5128824925686791, 0.5128824925686791, 0.6651504606908376, 0.6651504606908376, 0.6651504606908376, 0.5757240221062881, 0.5757240221062881, 0.5757240221062881, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3300356225581783, 0.3300356225581783, 0.3300356225581783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.5091501396685754, 0.5091501396685754, 0.5091501396685754, 0.08799581278901536, 0.08799581278901536, 0.08799581278901536, 0.33983114603641296, 0.33983114603641296, 0.33983114603641296, 0.046332004315077224, 0.046332004315077224, 0.046332004315077224, 0.1603501221600071, 0.1603501221600071, 0.1603501221600071, 0.12580843239554884, 0.12580843239554884, 0.12580843239554884, 0.20820202113902186, 0.20820202113902186, 0.20820202113902186, 0.3035305555700316, 0.3035305555700316, 0.3035305555700316, 0.08019729671148268, 0.08019729671148268, 0.08019729671148268, 0.7478042006730194, 0.7478042006730194, 0.7478042006730194, 0.5785315866789835, 0.5785315866789835, 0.5785315866789835, 0.7350629339178314, 0.7350629339178314, 0.7350629339178314, 0.09895956077732371, 0.09895956077732371, 0.09895956077732371, 0.13716500766609008, 0.13716500766609008, 0.13716500766609008, 0.11074983289620743, 0.11074983289620743, 0.11074983289620743, 0.13096201664097462, 0.13096201664097462, 0.13096201664097462, 0.23231249393487619, 0.23231249393487619, 0.23231249393487619, 0.15658373501311307, 0.15658373501311307, 0.15658373501311307, 0.2625334171903587, 0.2625334171903587, 0.2625334171903587, 0.4596330515346614, 0.4596330515346614, 0.4596330515346614, 0.2890096479557175, 0.2890096479557175, 0.2890096479557175, 0.15021272543942776, 0.15021272543942776, 0.15021272543942776, 0.18805464010995188, 0.18805464010995188, 0.18805464010995188, 0.1245693102587575, 0.1245693102587575, 0.1245693102587575, 0.1842378118507919, 0.1842378118507919, 0.1842378118507919, 0.20935219545872386, 0.20935219545872386, 0.20935219545872386, 0.18585602950540248, 0.18585602950540248, 0.18585602950540248, 0.2213866524489443, 0.2213866524489443, 0.2213866524489443, 0.22025046617891153, 0.22025046617891153, 0.22025046617891153, 0.23692036786108062, 0.23692036786108062, 0.23692036786108062, 0.9103431068115926, 0.9103431068115926, 0.9103431068115926, 0.2091665184582, 0.2091665184582, 0.2091665184582, 0.19248633645830482, 0.19248633645830482, 0.19248633645830482, 0.16270873542768727, 0.16270873542768727, 0.16270873542768727, 0.2081743244947164, 0.2081743244947164, 0.2081743244947164, 0.15560198298426953, 0.15560198298426953, 0.15560198298426953, 0.1903869070074663, 0.1903869070074663, 0.1903869070074663, 0.17952252355552645, 0.17952252355552645, 0.17952252355552645, 0.17457328757377877, 0.17457328757377877, 0.17457328757377877, 0.08039207521509728, 0.08039207521509728, 0.08039207521509728, 0.07775898568791784, 0.07775898568791784, 0.07775898568791784, 0.06479639674529192, 0.06479639674529192, 0.06479639674529192]}, "mutation_prompt": null}
