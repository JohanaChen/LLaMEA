{"id": "6f811eaf-8633-4d79-9cd5-3652ed630b19", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_score = np.inf\n        self.f_evals = 0\n\n    def __call__(self, func):\n        while self.f_evals < self.budget:\n            for i in range(self.population_size):\n                current_score = func(self.particles[i])\n                self.f_evals += 1\n                if current_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = current_score\n                    self.personal_best_positions[i] = self.particles[i]\n                if current_score < self.global_best_score:\n                    self.global_best_score = current_score\n                    self.global_best_position = self.particles[i]\n\n            if self.f_evals >= self.budget:\n                break\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                inertia = 0.5\n                cognitive = 1.5\n                social = 1.5\n                self.velocities[i] = (inertia * self.velocities[i] +\n                                      cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) +\n                                      social * r2 * (self.global_best_position - self.particles[i]))\n                self.particles[i] += self.velocities[i]\n                self.particles[i] = np.clip(self.particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution mutation and crossover\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.personal_best_positions[a] + 0.8 * (self.personal_best_positions[b] - self.personal_best_positions[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                crossover_rate = 0.9\n                trial_vector = np.copy(self.particles[i])\n                for j in range(self.dim):\n                    if np.random.rand() < crossover_rate:\n                        trial_vector[j] = mutant_vector[j]\n                trial_score = func(trial_vector)\n                self.f_evals += 1\n                if trial_score < func(self.particles[i]):\n                    self.particles[i] = trial_vector\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for enhanced exploration and exploitation in black box optimization.", "configspace": "", "generation": 0, "fitness": 0.37657338584523187, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8401401929028299, 0.8196587041733124, 0.8114482860131208, 0.8264720190695023, 0.8410052297545391, 0.865112914967799, 0.8250878261189754, 0.8274117046655104, 0.8374509287452805, 0.5207050683436315, 0.04144333747415618, 0.672262948117117, 0.6643751733530787, 0.6331058929502936, 0.6956432308370877, 0.642131386861803, 0.6480258379633317, 0.6686881369201102, 0.09810752230939213, 0.13141668152792207, 0.14259315818305718, 0.12032327699690082, 0.11786314337901971, 0.13108250354816353, 0.10091779261432787, 0.12819357802710696, 0.09018694409531003, 0.1030257044110916, 0.11008843694274761, 0.11678490854076828, 0.08235889983151667, 0.10390355489739611, 0.09905480678112877, 0.08772627942473687, 0.11042357903209865, 0.09513663923106774, 0.9821706994010495, 0.9442325901722282, 0.9900849682418214, 0.9740027315298602, 0.9813165681509439, 0.9589056439887509, 0.979992521651602, 0.9870696423585398, 0.9815813820099734, 0.409839055040109, 0.4227547126342277, 0.393128832520136, 0.4077883803813622, 0.36664690326247895, 0.4160145115418211, 0.43155188407491796, 0.3738527848034351, 0.4266214653068672, 0.21750407460850596, 0.16806968618024876, 0.8341721234704864, 0.1861288273077859, 0.21092870298973831, 0.8003610069438052, 0.8109848242121015, 0.6896454794125764, 0.808820433292623, 0.1332650519585512, 0.4108273104831254, 0.40583856468936896, 0.6392243127631623, 0.13290338887759767, 0.3710568300689784, 0.13087776462869494, 0.4367579248755342, 0.5327767895989549, 0.13350984267384536, 9.999999999998899e-05, 0.5986102021523818, 0.5222382479175322, 0.6817755952988419, 0.4768930668407124, 0.4193481382426756, 0.43845169210848, 0.13040993788889066, 0.26071402947301525, 0.3576534563569138, 0.10203548007723617, 0.036003726732235175, 0.42582286532107605, 0.615758616456487, 0.3765665372674387, 0.4960284336709697, 0.6515663723524991, 0.6679729817111681, 0.5614994290940964, 0.673062381892003, 0.2754615787167658, 0.6653130636098554, 0.6001827232403597, 0.6625684314326412, 0.619178919829313, 0.6433812610329166, 0.1155325964098145, 0.15144687559136294, 0.09579755330935036, 0.19209478115550604, 0.2886577860503098, 0.20616061801943664, 0.2984560979221832, 0.13292010723037706, 0.25879852651736845, 0.4123959338950989, 0.4603266647425084, 0.4736305132341587, 0.33933509462167066, 0.5407713718824686, 0.532058188335877, 0.5361647087077885, 0.23925872662129255, 0.4999441968008951, 0.797752859499336, 0.7588492503111542, 0.7795236669821206, 0.7485553153772404, 0.7824900920117469, 0.7150101104490896, 0.7800910620700097, 0.7128139719829332, 0.8230463428992532, 0.07632409353108816, 0.10745665124737847, 0.11446064683082846, 0.14478496287619003, 0.12993741802620684, 0.1330776652732515, 0.09905874210525611, 0.1444943935914016, 0.11647241577957979, 0.13508835509731487, 0.17905835936200987, 0.1620747267507029, 0.1693443188352054, 0.29101124414126, 0.1579748996715794, 0.19804451562972913, 0.17819672862680913, 0.19109598841808006, 0.3984955728344862, 0.4166482586414074, 0.413011095300697, 0.5760452202786288, 0.2877794639330855, 0.3664819811116943, 0.4837745790499217, 0.48629572660864506, 0.4333081384655779, 0.22874166284688668, 0.19146070254398706, 0.2138818668784931, 0.2571822824664053, 0.21433694567550776, 0.23660501115938093, 0.4483555807583771, 0.4131492904215651, 0.3986431200922107, 0.19998522565416765, 0.18018792941961637, 0.18788671533282664, 0.17652847569423047, 0.1998847965963717, 0.1801075100699865, 0.18296092342385906, 0.17295405505877604, 0.18381330249650163, 0.18461858410620313, 0.3033015951801513, 0.1867190669544202, 0.23722346243363857, 0.21184148171465345, 0.1809606871338756, 0.19492735391836435, 0.19038134270692275, 0.19518543094796748, 0.7920708383699959, 0.18731119656710582, 0.1522132771303939, 0.8709776194473567, 0.19954791422512974, 0.19997074350003663, 0.1230895722346873, 0.16896646757089617, 0.17524839869141529, 0.08261953322417426, 0.2109947978740121, 0.8272063871143718, 0.20805287515279347, 0.8523946994987386, 0.20765740590361959, 0.21039320020154584, 0.8343172079592591, 0.15200838030899888, 0.17372926434181757, 0.17404261815540145, 0.18871316554592488, 0.18751413496410607, 0.1746336197726972, 0.2915341863639036, 0.173963661088395, 0.17874019270308394, 0.17782810768028035, 0.07041025147897473, 0.06625108415201864, 0.08014102534502454, 0.07472879158761192, 0.07766130197091681, 0.07443742643290585, 0.07630649879214813, 0.06619374689792634, 0.0753165601611554]}, "mutation_prompt": null}
{"id": "f3351e19-1a80-4980-8a8e-5933d9c4d4cf", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_score = np.inf\n        self.f_evals = 0\n\n    def __call__(self, func):\n        while self.f_evals < self.budget:\n            for i in range(self.population_size):\n                current_score = func(self.particles[i])\n                self.f_evals += 1\n                if current_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = current_score\n                    self.personal_best_positions[i] = self.particles[i]\n                if current_score < self.global_best_score:\n                    self.global_best_score = current_score\n                    self.global_best_position = self.particles[i]\n\n            if self.f_evals >= self.budget:\n                break\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                inertia = 0.5\n                cognitive = 1.5\n                social = 1.5\n                self.velocities[i] = (inertia * self.velocities[i] +\n                                      cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) +\n                                      social * r2 * (self.global_best_position - self.particles[i]))\n                self.particles[i] += self.velocities[i]\n                self.particles[i] = np.clip(self.particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution mutation and crossover\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.personal_best_positions[a] + 0.8 * (self.personal_best_positions[b] - self.personal_best_positions[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                crossover_rate = 0.9\n                trial_vector = np.copy(self.particles[i])\n                for j in range(self.dim):\n                    if np.random.rand() < crossover_rate:\n                        trial_vector[j] = mutant_vector[j]\n                trial_score = func(trial_vector)\n                self.f_evals += 1\n                if trial_score < func(self.particles[i]):\n                    self.particles[i] = trial_vector\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for enhanced exploration and exploitation in black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6f811eaf-8633-4d79-9cd5-3652ed630b19", "metadata": {"aucs": [0.8401401929028299, 0.8196587041733124, 0.8114482860131208, 0.8264720190695023, 0.8410052297545391, 0.865112914967799, 0.8250878261189754, 0.8274117046655104, 0.8374509287452805, 0.5207050683436315, 0.04144333747415618, 0.672262948117117, 0.6643751733530787, 0.6331058929502936, 0.6956432308370877, 0.642131386861803, 0.6480258379633317, 0.6686881369201102, 0.09810752230939213, 0.13141668152792207, 0.14259315818305718, 0.12032327699690082, 0.11786314337901971, 0.13108250354816353, 0.10091779261432787, 0.12819357802710696, 0.09018694409531003, 0.1030257044110916, 0.11008843694274761, 0.11678490854076828, 0.08235889983151667, 0.10390355489739611, 0.09905480678112877, 0.08772627942473687, 0.11042357903209865, 0.09513663923106774, 0.9821706994010495, 0.9442325901722282, 0.9900849682418214, 0.9740027315298602, 0.9813165681509439, 0.9589056439887509, 0.979992521651602, 0.9870696423585398, 0.9815813820099734, 0.409839055040109, 0.4227547126342277, 0.393128832520136, 0.4077883803813622, 0.36664690326247895, 0.4160145115418211, 0.43155188407491796, 0.3738527848034351, 0.4266214653068672, 0.21750407460850596, 0.16806968618024876, 0.8341721234704864, 0.1861288273077859, 0.21092870298973831, 0.8003610069438052, 0.8109848242121015, 0.6896454794125764, 0.808820433292623, 0.1332650519585512, 0.4108273104831254, 0.40583856468936896, 0.6392243127631623, 0.13290338887759767, 0.3710568300689784, 0.13087776462869494, 0.4367579248755342, 0.5327767895989549, 0.13350984267384536, 9.999999999998899e-05, 0.5986102021523818, 0.5222382479175322, 0.6817755952988419, 0.4768930668407124, 0.4193481382426756, 0.43845169210848, 0.13040993788889066, 0.26071402947301525, 0.3576534563569138, 0.10203548007723617, 0.036003726732235175, 0.42582286532107605, 0.615758616456487, 0.3765665372674387, 0.4960284336709697, 0.6515663723524991, 0.6679729817111681, 0.5614994290940964, 0.673062381892003, 0.2754615787167658, 0.6653130636098554, 0.6001827232403597, 0.6625684314326412, 0.619178919829313, 0.6433812610329166, 0.1155325964098145, 0.15144687559136294, 0.09579755330935036, 0.19209478115550604, 0.2886577860503098, 0.20616061801943664, 0.2984560979221832, 0.13292010723037706, 0.25879852651736845, 0.4123959338950989, 0.4603266647425084, 0.4736305132341587, 0.33933509462167066, 0.5407713718824686, 0.532058188335877, 0.5361647087077885, 0.23925872662129255, 0.4999441968008951, 0.797752859499336, 0.7588492503111542, 0.7795236669821206, 0.7485553153772404, 0.7824900920117469, 0.7150101104490896, 0.7800910620700097, 0.7128139719829332, 0.8230463428992532, 0.07632409353108816, 0.10745665124737847, 0.11446064683082846, 0.14478496287619003, 0.12993741802620684, 0.1330776652732515, 0.09905874210525611, 0.1444943935914016, 0.11647241577957979, 0.13508835509731487, 0.17905835936200987, 0.1620747267507029, 0.1693443188352054, 0.29101124414126, 0.1579748996715794, 0.19804451562972913, 0.17819672862680913, 0.19109598841808006, 0.3984955728344862, 0.4166482586414074, 0.413011095300697, 0.5760452202786288, 0.2877794639330855, 0.3664819811116943, 0.4837745790499217, 0.48629572660864506, 0.4333081384655779, 0.22874166284688668, 0.19146070254398706, 0.2138818668784931, 0.2571822824664053, 0.21433694567550776, 0.23660501115938093, 0.4483555807583771, 0.4131492904215651, 0.3986431200922107, 0.19998522565416765, 0.18018792941961637, 0.18788671533282664, 0.17652847569423047, 0.1998847965963717, 0.1801075100699865, 0.18296092342385906, 0.17295405505877604, 0.18381330249650163, 0.18461858410620313, 0.3033015951801513, 0.1867190669544202, 0.23722346243363857, 0.21184148171465345, 0.1809606871338756, 0.19492735391836435, 0.19038134270692275, 0.19518543094796748, 0.7920708383699959, 0.18731119656710582, 0.1522132771303939, 0.8709776194473567, 0.19954791422512974, 0.19997074350003663, 0.1230895722346873, 0.16896646757089617, 0.17524839869141529, 0.08261953322417426, 0.2109947978740121, 0.8272063871143718, 0.20805287515279347, 0.8523946994987386, 0.20765740590361959, 0.21039320020154584, 0.8343172079592591, 0.15200838030899888, 0.17372926434181757, 0.17404261815540145, 0.18871316554592488, 0.18751413496410607, 0.1746336197726972, 0.2915341863639036, 0.173963661088395, 0.17874019270308394, 0.17782810768028035, 0.07041025147897473, 0.06625108415201864, 0.08014102534502454, 0.07472879158761192, 0.07766130197091681, 0.07443742643290585, 0.07630649879214813, 0.06619374689792634, 0.0753165601611554]}, "mutation_prompt": null}
