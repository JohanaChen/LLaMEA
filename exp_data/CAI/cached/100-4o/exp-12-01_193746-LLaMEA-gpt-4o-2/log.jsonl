{"id": "8cc7ee6c-eb89-4ee3-904f-7a934db7c04b", "solution": "import numpy as np\n\nclass AdaptiveDECrowding:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(dim * 2)\n        self.scale_factor = 0.8\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        func_evals = self.population_size\n\n        # Optimization loop\n        while func_evals < self.budget:\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                if func_evals >= self.budget:\n                    break\n\n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = population[candidates]\n                mutant = np.clip(x1 + self.scale_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_probability or j == j_rand:\n                        trial[j] = mutant[j]\n\n                # Selection with crowding\n                trial_fitness = func(trial)\n                func_evals += 1\n\n                if trial_fitness < fitness[i]:\n                    new_population[i] = trial\n                    fitness[i] = trial_fitness\n\n            population = new_population\n\n        # Return the best solution found\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDECrowding", "description": "Adaptive Differential Evolution with Crowding and Dynamic Population Size for Efficient Global Optimization", "configspace": "", "generation": 0, "fitness": 0.43425680420266133, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8313012499878165, 0.8035738928001895, 0.8316858678424566, 0.8328720168597785, 0.8294141931482014, 0.830120847120583, 0.8390169664150419, 0.8474731049222689, 0.8343395021473226, 0.7121820922160157, 0.7300877972109647, 0.7288342465573001, 0.7356675912513762, 0.6953612129432838, 0.7066743205998289, 0.7244954617812751, 0.7222374208581319, 0.7386714572730939, 0.12352488297210584, 0.22032365921402164, 0.25740757682526305, 0.12867511943033516, 0.3382407129506968, 0.25530976682557305, 0.11214552484137441, 0.13611324844325823, 0.1390030599328338, 0.13449996343019788, 0.12210727167888213, 0.1327620611547814, 0.13072464161280928, 0.14283861142829823, 0.11655311140600533, 0.1406196172327553, 0.1107059252213698, 0.12219880108767067, 0.9826582566340349, 0.9786051325412285, 0.9493623269344348, 0.9081868530618358, 0.9881052735239926, 0.9723068031119154, 0.9536269717350097, 0.9345021161907234, 0.967424029838173, 0.5566416092418461, 0.575666713601294, 0.6183697461968117, 0.5934492031993884, 0.5811513370961121, 0.5892565355088412, 0.6067742375992817, 0.5834509206469003, 0.6233679632657128, 0.780216538798902, 0.8130291226270094, 0.7903815305299149, 0.8412706844024813, 0.8175553174652355, 0.7755886017051965, 0.7962825053105868, 0.8014376523852966, 0.8294937759341261, 0.6101195959194181, 0.49235602740634044, 0.5060994008793899, 0.578554167129599, 0.6398113019075375, 0.53084509461287, 0.521737550890163, 0.5277999361783011, 0.6081222894945831, 0.5441803960207066, 0.5692085549373365, 0.009832227226462598, 0.611183909369226, 0.6026874005274978, 0.6150017503428222, 0.5452098529345217, 0.5882732362264131, 0.4681529747040547, 0.5097447791793257, 0.5238204959037058, 0.571424756493218, 0.5717096828065209, 0.5408810636883918, 0.4919088947027419, 0.5356092945024544, 0.3409042771867884, 0.522209346417658, 0.649607112140897, 0.6266475744908521, 0.649631459786429, 0.5996221954319524, 0.613575126636818, 0.6794256500423885, 0.6707235914733334, 0.6390256409821324, 0.7252924545503276, 0.09849534370470514, 0.15606417819664253, 0.3482414966642321, 0.4356294335093639, 0.375946709892206, 0.4223694083970819, 0.24813192615233326, 0.33933886575212946, 0.28217190116297075, 0.38442395522431116, 0.4302225516432484, 0.43582682931344385, 0.4039643372177921, 0.4287116361058346, 0.44411828079620586, 0.3765410971785148, 0.39429514581343705, 0.4372264441902963, 0.753769843622586, 0.7622364287822136, 0.7787248407160573, 0.7386354144506525, 0.7941450904162213, 0.7588022546272801, 0.7633629382248517, 0.7733464473938664, 0.7627680048259302, 0.08848234069309724, 0.11482632086236555, 0.2746407762113089, 0.11234791665031374, 0.0901108636173662, 0.10119025362176126, 0.11177836876242508, 0.1116724848378643, 0.11808027382573494, 0.1342620412009915, 0.16422027734595013, 0.13271294320307403, 0.1550013509919952, 0.14118306805366632, 0.16939496941099952, 0.13894818040305779, 0.14514163201140362, 0.20837181861898035, 0.45210246606217597, 0.42527332753362834, 0.3892886524978303, 0.3790298006847711, 0.39981112926186557, 0.3983810878782704, 0.4495878556937515, 0.45112545079944044, 0.4048986122062108, 0.34364265096282665, 0.36824941943592926, 0.3207574913194309, 0.3380887877609371, 0.33421668220189327, 0.32702895514317276, 0.3722646370678766, 0.35571678350542557, 0.33744079876678257, 0.2292500341897722, 0.18425483432348488, 0.1939468751491722, 0.1860752463748997, 0.1869836354422879, 0.20247636286966064, 0.18503817036304016, 0.20127382222523438, 0.18535851546794813, 0.2781185008396543, 0.23714178183049106, 0.23615027055541526, 0.23506412109418096, 0.290982476815716, 0.40905297038197086, 0.4880620043442975, 0.19552769199702125, 0.4438401876294935, 0.18584947582206046, 0.8419026816428521, 0.21087695459687417, 0.20651344180084785, 0.18540737781905547, 0.1856095026973238, 0.18088194839615623, 0.16777796041058113, 0.17149598198041005, 0.4862474224001012, 0.16450096834665306, 0.8018537916056327, 0.16527596108355824, 0.20423762463387984, 0.7869931624112196, 0.2078160107270689, 0.2025074713803573, 0.8218322984102033, 0.2047307554465141, 0.17201566490950349, 0.19359369487540434, 0.1803143285648121, 0.1786187878844867, 0.19567410131268392, 0.17184677370499812, 0.2000870019540405, 0.15731726297315507, 0.06824553588402504, 0.08409181817483025, 0.07181031379921254, 0.07589639783160163, 0.07289052450530176, 0.05675320079789126, 0.07198643019312367, 0.06990393045848864, 0.06387075353457516]}, "mutation_prompt": null}
{"id": "30029bfe-b10d-48f3-8532-1b25a5bd8792", "solution": "import numpy as np\n\nclass AdaptiveDECrowding:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(dim * 2)\n        self.scale_factor = 0.8\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        func_evals = self.population_size\n\n        # Optimization loop\n        while func_evals < self.budget:\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                if func_evals >= self.budget:\n                    break\n\n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = population[candidates]\n                mutant = np.clip(x1 + self.scale_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_probability or j == j_rand:\n                        trial[j] = mutant[j]\n\n                # Selection with crowding\n                trial_fitness = func(trial)\n                func_evals += 1\n\n                if trial_fitness < fitness[i]:\n                    new_population[i] = trial\n                    fitness[i] = trial_fitness\n\n            population = new_population\n\n        # Return the best solution found\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDECrowding", "description": "Adaptive Differential Evolution with Crowding and Dynamic Population Size for Efficient Global Optimization", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8cc7ee6c-eb89-4ee3-904f-7a934db7c04b", "metadata": {"aucs": [0.8313012499878165, 0.8035738928001895, 0.8316858678424566, 0.8328720168597785, 0.8294141931482014, 0.830120847120583, 0.8390169664150419, 0.8474731049222689, 0.8343395021473226, 0.7121820922160157, 0.7300877972109647, 0.7288342465573001, 0.7356675912513762, 0.6953612129432838, 0.7066743205998289, 0.7244954617812751, 0.7222374208581319, 0.7386714572730939, 0.12352488297210584, 0.22032365921402164, 0.25740757682526305, 0.12867511943033516, 0.3382407129506968, 0.25530976682557305, 0.11214552484137441, 0.13611324844325823, 0.1390030599328338, 0.13449996343019788, 0.12210727167888213, 0.1327620611547814, 0.13072464161280928, 0.14283861142829823, 0.11655311140600533, 0.1406196172327553, 0.1107059252213698, 0.12219880108767067, 0.9826582566340349, 0.9786051325412285, 0.9493623269344348, 0.9081868530618358, 0.9881052735239926, 0.9723068031119154, 0.9536269717350097, 0.9345021161907234, 0.967424029838173, 0.5566416092418461, 0.575666713601294, 0.6183697461968117, 0.5934492031993884, 0.5811513370961121, 0.5892565355088412, 0.6067742375992817, 0.5834509206469003, 0.6233679632657128, 0.780216538798902, 0.8130291226270094, 0.7903815305299149, 0.8412706844024813, 0.8175553174652355, 0.7755886017051965, 0.7962825053105868, 0.8014376523852966, 0.8294937759341261, 0.6101195959194181, 0.49235602740634044, 0.5060994008793899, 0.578554167129599, 0.6398113019075375, 0.53084509461287, 0.521737550890163, 0.5277999361783011, 0.6081222894945831, 0.5441803960207066, 0.5692085549373365, 0.009832227226462598, 0.611183909369226, 0.6026874005274978, 0.6150017503428222, 0.5452098529345217, 0.5882732362264131, 0.4681529747040547, 0.5097447791793257, 0.5238204959037058, 0.571424756493218, 0.5717096828065209, 0.5408810636883918, 0.4919088947027419, 0.5356092945024544, 0.3409042771867884, 0.522209346417658, 0.649607112140897, 0.6266475744908521, 0.649631459786429, 0.5996221954319524, 0.613575126636818, 0.6794256500423885, 0.6707235914733334, 0.6390256409821324, 0.7252924545503276, 0.09849534370470514, 0.15606417819664253, 0.3482414966642321, 0.4356294335093639, 0.375946709892206, 0.4223694083970819, 0.24813192615233326, 0.33933886575212946, 0.28217190116297075, 0.38442395522431116, 0.4302225516432484, 0.43582682931344385, 0.4039643372177921, 0.4287116361058346, 0.44411828079620586, 0.3765410971785148, 0.39429514581343705, 0.4372264441902963, 0.753769843622586, 0.7622364287822136, 0.7787248407160573, 0.7386354144506525, 0.7941450904162213, 0.7588022546272801, 0.7633629382248517, 0.7733464473938664, 0.7627680048259302, 0.08848234069309724, 0.11482632086236555, 0.2746407762113089, 0.11234791665031374, 0.0901108636173662, 0.10119025362176126, 0.11177836876242508, 0.1116724848378643, 0.11808027382573494, 0.1342620412009915, 0.16422027734595013, 0.13271294320307403, 0.1550013509919952, 0.14118306805366632, 0.16939496941099952, 0.13894818040305779, 0.14514163201140362, 0.20837181861898035, 0.45210246606217597, 0.42527332753362834, 0.3892886524978303, 0.3790298006847711, 0.39981112926186557, 0.3983810878782704, 0.4495878556937515, 0.45112545079944044, 0.4048986122062108, 0.34364265096282665, 0.36824941943592926, 0.3207574913194309, 0.3380887877609371, 0.33421668220189327, 0.32702895514317276, 0.3722646370678766, 0.35571678350542557, 0.33744079876678257, 0.2292500341897722, 0.18425483432348488, 0.1939468751491722, 0.1860752463748997, 0.1869836354422879, 0.20247636286966064, 0.18503817036304016, 0.20127382222523438, 0.18535851546794813, 0.2781185008396543, 0.23714178183049106, 0.23615027055541526, 0.23506412109418096, 0.290982476815716, 0.40905297038197086, 0.4880620043442975, 0.19552769199702125, 0.4438401876294935, 0.18584947582206046, 0.8419026816428521, 0.21087695459687417, 0.20651344180084785, 0.18540737781905547, 0.1856095026973238, 0.18088194839615623, 0.16777796041058113, 0.17149598198041005, 0.4862474224001012, 0.16450096834665306, 0.8018537916056327, 0.16527596108355824, 0.20423762463387984, 0.7869931624112196, 0.2078160107270689, 0.2025074713803573, 0.8218322984102033, 0.2047307554465141, 0.17201566490950349, 0.19359369487540434, 0.1803143285648121, 0.1786187878844867, 0.19567410131268392, 0.17184677370499812, 0.2000870019540405, 0.15731726297315507, 0.06824553588402504, 0.08409181817483025, 0.07181031379921254, 0.07589639783160163, 0.07289052450530176, 0.05675320079789126, 0.07198643019312367, 0.06990393045848864, 0.06387075353457516]}, "mutation_prompt": null}
