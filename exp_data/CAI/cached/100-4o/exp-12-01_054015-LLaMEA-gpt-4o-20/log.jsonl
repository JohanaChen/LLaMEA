{"id": "82751914-b303-4948-a681-71b1346020a9", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.mutation_factor = 0.5\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation\n                indices = np.random.choice(range(self.pop_size), 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.mutation_factor * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n\n                # Ensure trial vector is within bounds\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                f_trial = func(trial)\n                evaluations += 1\n\n                # Update population with competitive fitness-based selection\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                \n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "AdaptiveDE", "description": "Adaptive Differential Evolution with Competitive Fitness-based Selection for efficient exploration and exploitation in black box optimization.", "configspace": "", "generation": 0, "fitness": 0.38441220199960974, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8220657623457011, 0.8104062729652128, 0.807613205041134, 0.8159278620142811, 0.8124829953944976, 0.8095859323304011, 0.8061102590161185, 0.8146898693458796, 0.8140031492345604, 0.6709342831777464, 0.6860520324386088, 0.6691837207632285, 0.656624659218827, 0.6711986997363012, 0.6776004932817015, 0.6510811880222321, 0.6692067695199341, 0.6723858166949276, 0.11245605290320781, 0.11041760539357526, 0.12266444072339322, 0.12598935942284661, 0.12074139039275911, 0.11543320939370938, 0.11697361981524479, 0.14307019495754758, 0.11074366012504522, 0.10944636771301663, 0.11268626755116784, 0.11060705046438257, 0.11730511915680597, 0.11486592691865172, 0.10568691699461996, 0.14397194362919596, 0.11111973460838453, 0.1134956266027588, 0.9650798579244725, 0.899472831468793, 0.9134154854589903, 0.9073024990428861, 0.9246995930758926, 0.8499581540193565, 0.9188760504262588, 0.9697307889032634, 0.9136179514735643, 0.47525357485809416, 0.5113324074265724, 0.5199221235838067, 0.48492921352849994, 0.5176283839244256, 0.4795101551950496, 0.5138418334074732, 0.5045149249723726, 0.5080006784946527, 0.7819116011013642, 0.7435490978730492, 0.7467293168032298, 0.7999880551632378, 0.836190400418288, 0.7756920549301463, 0.7833367166856167, 0.7693348403793199, 0.7847894720528137, 0.40426983714314524, 0.15469078014346505, 0.19402869419972668, 0.17379688038445107, 0.39566491805570425, 0.23293558801471592, 0.32942975351633663, 0.1807295708115727, 0.17901292376044187, 0.4466365412485944, 0.48972807736005775, 0.20876383429038758, 0.3539367716991393, 0.1901186987936151, 0.18560046732493873, 0.25195161535435506, 0.18128948612746387, 0.4191708783018927, 0.4288494436712953, 0.4261703593922149, 0.45330079110215304, 0.48863031188700146, 0.4203148354215924, 0.4056153200882683, 0.46047523428552384, 0.4511292291122879, 0.46881478254359477, 0.5399903423399581, 0.5418328902667529, 0.5605456306698313, 0.5490823008056145, 0.5363935948699506, 0.585861094194912, 0.5814413615541095, 0.6021683060310341, 0.6001234689274229, 0.12065607372268727, 0.16848015443227682, 0.13721619548369968, 0.2550765736311911, 0.2876789833519615, 0.18197694068359793, 0.1563506323558993, 0.1987248774721425, 0.13871867870058563, 0.3152995485714408, 0.34914146981593985, 0.34218616824965065, 0.3502565581214281, 0.34462565302992465, 0.3829327485052295, 0.32531926100282993, 0.3331991171418044, 0.3207788452666337, 0.7127821620652297, 0.7324942983274287, 0.725269640715688, 0.7210083814724171, 0.7140000317530585, 0.715244746033739, 0.7155152133701821, 0.7136160102115048, 0.7332165541736441, 0.10083005259161859, 0.1039522518711734, 0.11120762274627394, 0.09883701107451548, 0.10002240048728106, 0.12612846193959304, 0.0958068298325061, 0.09193894700551741, 0.09897263164866399, 0.1337950891169032, 0.21376630627748283, 0.13946141799850265, 0.13626736609301315, 0.15769678407211907, 0.14228977105791585, 0.15655205680495232, 0.14418107607536002, 0.16359399978607359, 0.3881389558492384, 0.4200526836058911, 0.43926111857977235, 0.42877699462439745, 0.4478406081923322, 0.4461952239281872, 0.47059172484874967, 0.44420549145066446, 0.4661711409952056, 0.32110778573535703, 0.33120500343542314, 0.328291302403783, 0.31574644604865076, 0.34415946939840236, 0.33436626195396657, 0.3514873984975936, 0.3230086395159142, 0.3206624376647156, 0.22395180568317186, 0.19411121595639735, 0.21538618189289938, 0.1891439334627566, 0.1999695299582771, 0.21094980802372765, 0.19910438519182339, 0.18222103382060273, 0.19827358370701742, 0.2306671925646362, 0.1948601106750909, 0.2000810567062672, 0.20712546261688902, 0.1786158748914468, 0.19306379725115275, 0.1846177540550138, 0.1941888618138108, 0.2014255971871124, 0.751790758554567, 0.163494695337992, 0.7759337324115934, 0.18234689968777706, 0.19255619605330399, 0.1737732218471858, 0.17962409940560864, 0.33946164666672396, 0.734714355542389, 0.7006381890054909, 0.20469733541678348, 0.5617035045086209, 0.5051071148311616, 0.16402482571467958, 0.44446462038082046, 0.713039831730921, 0.20659877620214007, 0.20934399066999754, 0.19359291951051272, 0.19362932348843698, 0.19455263691367053, 0.19237020458768028, 0.19143441309573528, 0.18779734537959136, 0.1870034062837903, 0.1779696715386323, 0.19023283668851387, 0.08548640474146518, 0.0972733826423906, 0.08304538977056164, 0.08014132974532617, 0.09113592259743963, 0.08078223603296031, 0.07717333876678345, 0.09126027246337598, 0.08281920378084762]}, "mutation_prompt": null}
{"id": "4ac58300-d2f5-491c-a7af-2e6260322fe1", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.mutation_factor = 0.5\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation\n                indices = np.random.choice(range(self.pop_size), 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.mutation_factor * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n\n                # Ensure trial vector is within bounds\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Selection\n                f_trial = func(trial)\n                evaluations += 1\n\n                # Update population with competitive fitness-based selection\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                \n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "AdaptiveDE", "description": "Adaptive Differential Evolution with Competitive Fitness-based Selection for efficient exploration and exploitation in black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "82751914-b303-4948-a681-71b1346020a9", "metadata": {"aucs": [0.8220657623457011, 0.8104062729652128, 0.807613205041134, 0.8159278620142811, 0.8124829953944976, 0.8095859323304011, 0.8061102590161185, 0.8146898693458796, 0.8140031492345604, 0.6709342831777464, 0.6860520324386088, 0.6691837207632285, 0.656624659218827, 0.6711986997363012, 0.6776004932817015, 0.6510811880222321, 0.6692067695199341, 0.6723858166949276, 0.11245605290320781, 0.11041760539357526, 0.12266444072339322, 0.12598935942284661, 0.12074139039275911, 0.11543320939370938, 0.11697361981524479, 0.14307019495754758, 0.11074366012504522, 0.10944636771301663, 0.11268626755116784, 0.11060705046438257, 0.11730511915680597, 0.11486592691865172, 0.10568691699461996, 0.14397194362919596, 0.11111973460838453, 0.1134956266027588, 0.9650798579244725, 0.899472831468793, 0.9134154854589903, 0.9073024990428861, 0.9246995930758926, 0.8499581540193565, 0.9188760504262588, 0.9697307889032634, 0.9136179514735643, 0.47525357485809416, 0.5113324074265724, 0.5199221235838067, 0.48492921352849994, 0.5176283839244256, 0.4795101551950496, 0.5138418334074732, 0.5045149249723726, 0.5080006784946527, 0.7819116011013642, 0.7435490978730492, 0.7467293168032298, 0.7999880551632378, 0.836190400418288, 0.7756920549301463, 0.7833367166856167, 0.7693348403793199, 0.7847894720528137, 0.40426983714314524, 0.15469078014346505, 0.19402869419972668, 0.17379688038445107, 0.39566491805570425, 0.23293558801471592, 0.32942975351633663, 0.1807295708115727, 0.17901292376044187, 0.4466365412485944, 0.48972807736005775, 0.20876383429038758, 0.3539367716991393, 0.1901186987936151, 0.18560046732493873, 0.25195161535435506, 0.18128948612746387, 0.4191708783018927, 0.4288494436712953, 0.4261703593922149, 0.45330079110215304, 0.48863031188700146, 0.4203148354215924, 0.4056153200882683, 0.46047523428552384, 0.4511292291122879, 0.46881478254359477, 0.5399903423399581, 0.5418328902667529, 0.5605456306698313, 0.5490823008056145, 0.5363935948699506, 0.585861094194912, 0.5814413615541095, 0.6021683060310341, 0.6001234689274229, 0.12065607372268727, 0.16848015443227682, 0.13721619548369968, 0.2550765736311911, 0.2876789833519615, 0.18197694068359793, 0.1563506323558993, 0.1987248774721425, 0.13871867870058563, 0.3152995485714408, 0.34914146981593985, 0.34218616824965065, 0.3502565581214281, 0.34462565302992465, 0.3829327485052295, 0.32531926100282993, 0.3331991171418044, 0.3207788452666337, 0.7127821620652297, 0.7324942983274287, 0.725269640715688, 0.7210083814724171, 0.7140000317530585, 0.715244746033739, 0.7155152133701821, 0.7136160102115048, 0.7332165541736441, 0.10083005259161859, 0.1039522518711734, 0.11120762274627394, 0.09883701107451548, 0.10002240048728106, 0.12612846193959304, 0.0958068298325061, 0.09193894700551741, 0.09897263164866399, 0.1337950891169032, 0.21376630627748283, 0.13946141799850265, 0.13626736609301315, 0.15769678407211907, 0.14228977105791585, 0.15655205680495232, 0.14418107607536002, 0.16359399978607359, 0.3881389558492384, 0.4200526836058911, 0.43926111857977235, 0.42877699462439745, 0.4478406081923322, 0.4461952239281872, 0.47059172484874967, 0.44420549145066446, 0.4661711409952056, 0.32110778573535703, 0.33120500343542314, 0.328291302403783, 0.31574644604865076, 0.34415946939840236, 0.33436626195396657, 0.3514873984975936, 0.3230086395159142, 0.3206624376647156, 0.22395180568317186, 0.19411121595639735, 0.21538618189289938, 0.1891439334627566, 0.1999695299582771, 0.21094980802372765, 0.19910438519182339, 0.18222103382060273, 0.19827358370701742, 0.2306671925646362, 0.1948601106750909, 0.2000810567062672, 0.20712546261688902, 0.1786158748914468, 0.19306379725115275, 0.1846177540550138, 0.1941888618138108, 0.2014255971871124, 0.751790758554567, 0.163494695337992, 0.7759337324115934, 0.18234689968777706, 0.19255619605330399, 0.1737732218471858, 0.17962409940560864, 0.33946164666672396, 0.734714355542389, 0.7006381890054909, 0.20469733541678348, 0.5617035045086209, 0.5051071148311616, 0.16402482571467958, 0.44446462038082046, 0.713039831730921, 0.20659877620214007, 0.20934399066999754, 0.19359291951051272, 0.19362932348843698, 0.19455263691367053, 0.19237020458768028, 0.19143441309573528, 0.18779734537959136, 0.1870034062837903, 0.1779696715386323, 0.19023283668851387, 0.08548640474146518, 0.0972733826423906, 0.08304538977056164, 0.08014132974532617, 0.09113592259743963, 0.08078223603296031, 0.07717333876678345, 0.09126027246337598, 0.08281920378084762]}, "mutation_prompt": null}
