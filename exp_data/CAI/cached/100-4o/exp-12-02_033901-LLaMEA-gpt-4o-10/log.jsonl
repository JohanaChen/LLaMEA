{"id": "e8d5948a-0064-430e-9f8e-f436c93900c4", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(self.dim))\n        self.w = 0.5  # inertia weight for PSO\n        self.c1 = 1.5  # cognitive (particle) weight\n        self.c2 = 1.5  # social (swarm) weight\n        self.f = 0.8  # differential evolution scale factor\n        self.cr = 0.9  # crossover probability\n\n    def __call__(self, func):\n        np.random.seed(42)\n        # Initialize population\n        particles = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        velocities = np.random.uniform(\n            -0.1, 0.1, (self.population_size, self.dim)\n        )\n        personal_best_positions = np.copy(particles)\n        personal_best_values = np.full(self.population_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n        \n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                current_value = func(particles[i])\n                evaluations += 1\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = particles[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = particles[i]\n\n            # Update velocities and positions for PSO\n            r1, r2 = np.random.rand(2)\n            velocities = (\n                self.w * velocities\n                + self.c1 * r1 * (personal_best_positions - particles)\n                + self.c2 * r2 * (global_best_position - particles)\n            )\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            # Apply Differential Evolution crossover\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = particles[idxs]\n                mutant = np.clip(a + self.f * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, particles[i])\n                \n                trial_value = func(trial)\n                evaluations += 1\n                if trial_value < personal_best_values[i]:\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial\n                    particles[i] = trial\n                    if trial_value < global_best_value:\n                        global_best_value = trial_value\n                        global_best_position = trial\n\n        return global_best_position, global_best_value", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization with Adaptive Differential Evolution that combines exploration and exploitation for efficient optimization.", "configspace": "", "generation": 0, "fitness": 0.2339075728782652, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.9306446657267692, 0.9306446657267692, 0.9306446657267692, 0.8483832112634774, 0.8483832112634774, 0.8483832112634774, 0.9224437604466696, 0.9224437604466696, 0.9224437604466696, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03205826253517119, 0.03205826253517119, 0.03205826253517119, 0.2201438539049808, 0.2201438539049808, 0.2201438539049808, 0.07505097888511358, 0.07505097888511358, 0.07505097888511358, 0.06505956180630912, 0.06505956180630912, 0.06505956180630912, 0.11237815411808738, 0.11237815411808738, 0.11237815411808738, 0.13302351724675432, 0.13302351724675432, 0.13302351724675432, 0.08786383804318754, 0.08786383804318754, 0.08786383804318754, 0.024326470128572697, 0.024326470128572697, 0.024326470128572697, 0.9900684639961785, 0.9900684639961785, 0.9900684639961785, 0.9911285543715306, 0.9911285543715306, 0.9911285543715306, 0.9882368359270639, 0.9882368359270639, 0.9882368359270639, 0.06222221567944508, 0.06222221567944508, 0.06222221567944508, 0.41174680577438216, 0.41174680577438216, 0.41174680577438216, 0.2938310533240467, 0.2938310533240467, 0.2938310533240467, 0.31682324539823437, 0.31682324539823437, 0.31682324539823437, 0.2152297990135107, 0.2152297990135107, 0.2152297990135107, 0.15188264862752554, 0.15188264862752554, 0.15188264862752554, 0.14993232242743015, 0.14993232242743015, 0.14993232242743015, 0.15758410552845092, 0.15758410552845092, 0.15758410552845092, 0.13446594384610966, 0.13446594384610966, 0.13446594384610966, 0.1642797268933911, 0.1642797268933911, 0.1642797268933911, 0.13261772443711528, 0.13261772443711528, 0.13261772443711528, 0.13723014748802886, 0.13723014748802886, 0.13723014748802886, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06546127201889562, 0.06546127201889562, 0.06546127201889562, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09689305028331441, 0.09689305028331441, 0.09689305028331441, 0.0736366638270991, 0.0736366638270991, 0.0736366638270991, 0.05057013300566726, 0.05057013300566726, 0.05057013300566726, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0912582744917394, 0.0912582744917394, 0.0912582744917394, 0.10702138374771852, 0.10702138374771852, 0.10702138374771852, 0.04464650646865498, 0.04464650646865498, 0.04464650646865498, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05028071070246298, 0.05028071070246298, 0.05028071070246298, 0.5394437865270534, 0.5394437865270534, 0.5394437865270534, 0.2079099750696478, 0.2079099750696478, 0.2079099750696478, 0.7096033653537779, 0.7096033653537779, 0.7096033653537779, 0.07934828850517095, 0.07934828850517095, 0.07934828850517095, 0.09869425090257067, 0.09869425090257067, 0.09869425090257067, 0.0872254827515524, 0.0872254827515524, 0.0872254827515524, 0.1693484646298462, 0.1693484646298462, 0.1693484646298462, 0.1571233894230185, 0.1571233894230185, 0.1571233894230185, 0.18389316043674941, 0.18389316043674941, 0.18389316043674941, 0.15390538367496098, 0.15390538367496098, 0.15390538367496098, 0.19279696137177338, 0.19279696137177338, 0.19279696137177338, 0.287381315345545, 0.287381315345545, 0.287381315345545, 0.2152146601351782, 0.2152146601351782, 0.2152146601351782, 0.15186776258867107, 0.15186776258867107, 0.15186776258867107, 0.13184547996537388, 0.13184547996537388, 0.13184547996537388, 0.18184683098596843, 0.18184683098596843, 0.18184683098596843, 0.21743745321175112, 0.21743745321175112, 0.21743745321175112, 0.27399821774900746, 0.27399821774900746, 0.27399821774900746, 0.2312180861208878, 0.2312180861208878, 0.2312180861208878, 0.1993782415298595, 0.1993782415298595, 0.1993782415298595, 0.2169511889848379, 0.2169511889848379, 0.2169511889848379, 0.2686933280678063, 0.2686933280678063, 0.2686933280678063, 0.16672343826399028, 0.16672343826399028, 0.16672343826399028, 0.9586932652332851, 0.9586932652332851, 0.9586932652332851, 0.1056871008961352, 0.1056871008961352, 0.1056871008961352, 0.16982038335164473, 0.16982038335164473, 0.16982038335164473, 0.19005530422550698, 0.19005530422550698, 0.19005530422550698, 0.2093025098087602, 0.2093025098087602, 0.2093025098087602, 0.27691713132714335, 0.27691713132714335, 0.27691713132714335, 0.21120675133567168, 0.21120675133567168, 0.21120675133567168, 0.1034733691804518, 0.1034733691804518, 0.1034733691804518, 0.08539602921721001, 0.08539602921721001, 0.08539602921721001, 0.08002102968119962, 0.08002102968119962, 0.08002102968119962]}, "mutation_prompt": null}
{"id": "ee3f35e1-0106-4e5c-8b99-397318dce26a", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(self.dim))\n        self.w = 0.9  # Start with higher inertia weight\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.f = 0.8\n        self.cr = 0.8  # Start with lower crossover probability\n\n    def __call__(self, func):\n        np.random.seed(42)\n        particles = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        velocities = np.random.uniform(\n            -0.1, 0.1, (self.population_size, self.dim)\n        )\n        personal_best_positions = np.copy(particles)\n        personal_best_values = np.full(self.population_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n        \n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Adjust inertia weight and crossover probability dynamically\n            w_min, w_max = 0.4, 0.9\n            self.w = w_max - (w_max - w_min) * (evaluations / self.budget)\n            self.cr = 0.9 - self.w  # Increase crossover probability as inertia weight decreases\n            \n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                current_value = func(particles[i])\n                evaluations += 1\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = particles[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = particles[i]\n\n            r1, r2 = np.random.rand(2)\n            velocities = (\n                self.w * velocities\n                + self.c1 * r1 * (personal_best_positions - particles)\n                + self.c2 * r2 * (global_best_position - particles)\n            )\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = particles[idxs]\n                mutant = np.clip(a + self.f * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, particles[i])\n                \n                trial_value = func(trial)\n                evaluations += 1\n                if trial_value < personal_best_values[i]:\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial\n                    particles[i] = trial\n                    if trial_value < global_best_value:\n                        global_best_value = trial_value\n                        global_best_position = trial\n\n        return global_best_position, global_best_value", "name": "HybridPSO_DE", "description": "An enhanced PSO-DE algorithm using dynamic control of inertia weight and crossover probability to adaptively balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": 0.19773517152805592, "feedback": "", "error": "", "parent_id": "e8d5948a-0064-430e-9f8e-f436c93900c4", "metadata": {"aucs": [0.6919749177751082, 0.6919749177751082, 0.6919749177751082, 0.18286273872015257, 0.18286273872015257, 0.18286273872015257, 0.18177452851692955, 0.18177452851692955, 0.18177452851692955, 0.42507366658795853, 0.42507366658795853, 0.42507366658795853, 0.397043427187207, 0.397043427187207, 0.397043427187207, 0.0034811366042822867, 0.0034811366042822867, 0.0034811366042822867, 0.03509188907232297, 0.03509188907232297, 0.03509188907232297, 0.05585066865527755, 0.05585066865527755, 0.05585066865527755, 0.07509921214038007, 0.07509921214038007, 0.07509921214038007, 0.005828137954346002, 0.005828137954346002, 0.005828137954346002, 0.08656157056988723, 0.08656157056988723, 0.08656157056988723, 0.119035927335431, 0.119035927335431, 0.119035927335431, 0.9608251388118446, 0.9608251388118446, 0.9608251388118446, 0.9906761956726116, 0.9906761956726116, 0.9906761956726116, 0.9883006970783039, 0.9883006970783039, 0.9883006970783039, 0.09833861327285853, 0.09833861327285853, 0.09833861327285853, 0.4279061589958981, 0.4279061589958981, 0.4279061589958981, 0.055342092249610286, 0.055342092249610286, 0.055342092249610286, 0.15981415311010205, 0.15981415311010205, 0.15981415311010205, 0.15931255015541157, 0.15931255015541157, 0.15931255015541157, 0.017919909676194723, 0.017919909676194723, 0.017919909676194723, 0.12436002911140132, 0.12436002911140132, 0.12436002911140132, 0.13341976216623186, 0.13341976216623186, 0.13341976216623186, 0.10766758022047795, 0.10766758022047795, 0.10766758022047795, 0.1904783453019756, 0.1904783453019756, 0.1904783453019756, 0.13422455704802394, 0.13422455704802394, 0.13422455704802394, 0.1673152090531752, 0.1673152090531752, 0.1673152090531752, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008742831546322272, 0.0008742831546322272, 0.0008742831546322272, 0.06970490367715554, 0.06970490367715554, 0.06970490367715554, 0.07384679758059343, 0.07384679758059343, 0.07384679758059343, 0.04598418764343237, 0.04598418764343237, 0.04598418764343237, 0.024172542926862106, 0.024172542926862106, 0.024172542926862106, 0.05096447052872932, 0.05096447052872932, 0.05096447052872932, 0.08176384433275141, 0.08176384433275141, 0.08176384433275141, 0.1686172321389433, 0.1686172321389433, 0.1686172321389433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0682529550212626, 0.0682529550212626, 0.0682529550212626, 0.4589407719442645, 0.4589407719442645, 0.4589407719442645, 0.20715007187450796, 0.20715007187450796, 0.20715007187450796, 0.5312357269550632, 0.5312357269550632, 0.5312357269550632, 0.050490055340702056, 0.050490055340702056, 0.050490055340702056, 0.10720177155142196, 0.10720177155142196, 0.10720177155142196, 0.093268466314405, 0.093268466314405, 0.093268466314405, 0.24930817925116544, 0.24930817925116544, 0.24930817925116544, 0.24293300690441866, 0.24293300690441866, 0.24293300690441866, 0.19325874670112875, 0.19325874670112875, 0.19325874670112875, 0.2641708746079986, 0.2641708746079986, 0.2641708746079986, 0.17671540906274508, 0.17671540906274508, 0.17671540906274508, 0.13005818024104498, 0.13005818024104498, 0.13005818024104498, 0.22125786322091967, 0.22125786322091967, 0.22125786322091967, 0.17445739674815564, 0.17445739674815564, 0.17445739674815564, 0.12765442940673688, 0.12765442940673688, 0.12765442940673688, 0.1970657760821165, 0.1970657760821165, 0.1970657760821165, 0.2222754214966014, 0.2222754214966014, 0.2222754214966014, 0.17170455306035493, 0.17170455306035493, 0.17170455306035493, 0.16253880695588374, 0.16253880695588374, 0.16253880695588374, 0.17295788055038863, 0.17295788055038863, 0.17295788055038863, 0.18764495571774675, 0.18764495571774675, 0.18764495571774675, 0.7773979084275088, 0.7773979084275088, 0.7773979084275088, 0.1659210503348859, 0.1659210503348859, 0.1659210503348859, 0.15624588567083897, 0.15624588567083897, 0.15624588567083897, 0.05189580126203053, 0.05189580126203053, 0.05189580126203053, 0.20372862499392386, 0.20372862499392386, 0.20372862499392386, 0.18967832889595237, 0.18967832889595237, 0.18967832889595237, 0.17362332412551407, 0.17362332412551407, 0.17362332412551407, 0.18965995284690274, 0.18965995284690274, 0.18965995284690274, 0.18962633107907112, 0.18962633107907112, 0.18962633107907112, 0.06681259452957478, 0.06681259452957478, 0.06681259452957478, 0.08886075968496021, 0.08886075968496021, 0.08886075968496021, 0.08113341413332709, 0.08113341413332709, 0.08113341413332709]}, "mutation_prompt": null}
