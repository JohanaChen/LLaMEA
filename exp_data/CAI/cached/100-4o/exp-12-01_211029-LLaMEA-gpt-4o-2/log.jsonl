{"id": "c1d7fcf9-61d0-4998-ac96-96c32bd2d7c4", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 30\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_positions = np.copy(self.positions)\n        self.best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.iterations = self.budget // self.population_size\n        self.annealing_schedule = np.linspace(1, 0, self.iterations)\n\n    def __call__(self, func):\n        eval_count = 0\n        for iteration in range(self.iterations):\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    return self.global_best_position\n                score = func(self.positions[i])\n                eval_count += 1\n\n                if score < self.best_scores[i]:\n                    self.best_scores[i] = score\n                    self.best_positions[i] = self.positions[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.positions[i]\n\n            r1, r2 = np.random.rand(2)\n            inertia_weight = 0.9 - 0.5 * (iteration / self.iterations)\n            cognitive_component = 2.0 * r1 * (self.best_positions - self.positions)\n            social_component = 2.0 * r2 * (self.global_best_position - self.positions)\n\n            self.velocities = inertia_weight * self.velocities + cognitive_component + social_component\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n            # Simulated Annealing adjustment\n            for i in range(self.population_size):\n                if np.random.rand() < self.annealing_schedule[iteration]:\n                    candidate_position = self.positions[i] + np.random.normal(0, 1, self.dim)\n                    candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                    candidate_score = func(candidate_position)\n                    eval_count += 1\n                    if candidate_score < self.best_scores[i]:\n                        self.best_scores[i] = candidate_score\n                        self.best_positions[i] = candidate_position\n                        if candidate_score < self.global_best_score:\n                            self.global_best_score = candidate_score\n                            self.global_best_position = candidate_position\n\n        return self.global_best_position", "name": "HybridPSOSA", "description": "A hybrid Particle Swarm Optimization with Simulated Annealing adaptation to balance exploration and exploitation dynamically.", "configspace": "", "generation": 0, "fitness": 0.16695784971858885, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.2417034755669265, 0.27163786963699355, 0.2817138928629803, 0.305303154267883, 0.3275475263868317, 0.3542789291152809, 0.3045257045584727, 0.32152222933649477, 0.39652908126340813, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023292233679122587, 9.999999999998899e-05, 0.0002369724492040648, 9.999999999998899e-05, 0.0012702072307849699, 0.03235743315546735, 0.08144006492847788, 0.06648019329337529, 0.09771306445961603, 0.123642075523819, 0.07771837039071594, 0.06946298325942646, 0.10950053647372537, 0.06285517144572261, 0.07913400671028847, 0.04790372019236511, 0.03515691796119447, 0.0868662370504939, 0.055374945551252885, 0.06123921615162142, 0.04791143153166244, 0.058224149505204714, 0.06348401576114882, 0.06878984296590951, 0.9678569516566847, 0.9606171422810688, 0.9818539128919251, 0.9827879175432338, 0.9622624626652878, 0.9834626491679945, 0.9779409594710864, 0.9895716019551455, 0.9888763667909122, 0.20107758580667123, 0.11966680577257771, 0.20290244432643612, 0.15855972956625097, 0.13940589266070835, 0.15960150189059874, 0.15589803670747837, 0.14334832983405466, 0.10965792610969805, 0.13702526799623138, 0.23132600140653126, 0.20490205143813633, 0.2046104084493683, 0.17664516276803055, 0.24174203091338597, 0.2129802421924566, 0.18989623776349807, 0.2976610125670285, 0.0840666461014925, 0.060069353038578854, 0.04039267311770722, 0.05125379469639446, 0.08829268485989872, 0.061670292960124384, 0.061487716755916466, 0.01778280879918348, 0.10397080418883564, 0.0924106387271666, 0.059880974256431685, 0.030052287890020346, 0.11004741541840302, 0.04934171118736286, 0.09725181534610294, 0.06177317078908928, 0.08502645957830468, 0.10115595901902197, 0.0008284887674940844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03335731821301269, 0.017161085223259986, 0.05199939526374986, 0.07548806380326567, 0.1037383394609609, 0.03337294501970878, 0.0878945566052971, 0.07549215325510017, 0.06774284622829274, 9.999999999998899e-05, 0.015248255343148776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003959792892763492, 9.999999999998899e-05, 9.999999999998899e-05, 0.00810636237211071, 0.026883712647298497, 0.007940254652949452, 0.017251050938189127, 0.04561102175205911, 0.03206407960960367, 0.02904922639042362, 0.025978751897924646, 0.040904507715857075, 0.32454113260281525, 0.287830543255458, 0.40500445621027203, 0.2675093300335232, 0.30355473637278707, 0.32039420796354856, 0.29222216809272206, 0.31289669254521235, 0.3097890768322581, 0.08236760149277489, 0.12027941053294211, 0.1079617939330959, 0.0795589595916768, 0.08071635986005554, 0.08756367118432895, 0.07010334077875358, 0.06277608212113805, 0.05660953408596836, 0.16110590252020007, 0.1435408396247676, 0.17313108464127347, 0.1536421808795394, 0.1641342672179522, 0.1433006711419812, 0.20351061407528892, 0.17034354433556642, 0.13248201982454832, 0.19632569176781112, 0.19709744325742606, 0.2874013512259528, 0.21823005364038595, 0.232219467655569, 0.22030803352168338, 0.2242841018870536, 0.2105391248844981, 0.20522689558382312, 0.1342925025256887, 0.10764989695871952, 0.145113868045036, 0.1693650012958431, 0.18743060739111017, 0.1537992161087568, 0.14024367366732948, 0.1286955889455903, 0.12286311963053465, 0.18179448725291736, 0.20139341065995364, 0.16858600781691535, 0.22166755553984507, 0.1840517297877311, 0.1916121181064434, 0.1827074196471279, 0.18099421071620414, 0.1553363102679941, 0.17135797063983083, 0.1838814623332068, 0.19220757951706113, 0.1685384911072224, 0.17463815118328185, 0.17705147004940902, 0.1765734515542179, 0.1632298166946914, 0.1638050346243657, 0.48293922976906456, 0.19984476504473336, 0.14851942146938013, 0.16834853811731132, 0.1475513477755661, 0.24519054216230285, 0.3111649762205009, 0.16401683331350037, 0.16392854525257372, 0.1183627751713493, 0.19580025993497996, 0.1568247451441226, 0.28695810801032207, 0.18935750861078482, 0.12633659473550118, 0.18756569280600555, 0.1944510030486436, 0.4035810119437655, 0.1748418521936861, 0.18568917406220609, 0.1854650864544637, 0.18539530787870118, 0.18236286925749268, 0.18381341792104056, 0.20330322888039143, 0.18598207785745824, 0.26002113766623247, 0.05652346636622785, 0.06993509222193717, 0.06588613434493795, 0.06867222618636093, 0.06351868156162876, 0.06863172846933174, 0.05654263190515563, 0.07287440845544968, 0.07036088171954746]}, "mutation_prompt": null}
{"id": "2735ee07-249d-4eed-8a0b-5ff0cc891d90", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 30\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.best_positions = np.copy(self.positions)\n        self.best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.iterations = self.budget // self.population_size\n        self.annealing_schedule = np.linspace(1, 0, self.iterations)\n\n    def __call__(self, func):\n        eval_count = 0\n        for iteration in range(self.iterations):\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    return self.global_best_position\n                score = func(self.positions[i])\n                eval_count += 1\n\n                if score < self.best_scores[i]:\n                    self.best_scores[i] = score\n                    self.best_positions[i] = self.positions[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.positions[i]\n\n            r1, r2 = np.random.rand(2)\n            inertia_weight = 0.9 - 0.5 * (iteration / self.iterations)\n            cognitive_component = 2.0 * r1 * (self.best_positions - self.positions)\n            social_component = 2.0 * r2 * (self.global_best_position - self.positions)\n\n            self.velocities = inertia_weight * self.velocities + cognitive_component + social_component\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n            # Simulated Annealing adjustment\n            for i in range(self.population_size):\n                if np.random.rand() < self.annealing_schedule[iteration]:\n                    candidate_position = self.positions[i] + np.random.normal(0, 1, self.dim)\n                    candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                    candidate_score = func(candidate_position)\n                    eval_count += 1\n                    if candidate_score < self.best_scores[i]:\n                        self.best_scores[i] = candidate_score\n                        self.best_positions[i] = candidate_position\n                        if candidate_score < self.global_best_score:\n                            self.global_best_score = candidate_score\n                            self.global_best_position = candidate_position\n\n        return self.global_best_position", "name": "HybridPSOSA", "description": "A hybrid Particle Swarm Optimization with Simulated Annealing adaptation to balance exploration and exploitation dynamically.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1d7fcf9-61d0-4998-ac96-96c32bd2d7c4", "metadata": {"aucs": [0.2417034755669265, 0.27163786963699355, 0.2817138928629803, 0.305303154267883, 0.3275475263868317, 0.3542789291152809, 0.3045257045584727, 0.32152222933649477, 0.39652908126340813, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023292233679122587, 9.999999999998899e-05, 0.0002369724492040648, 9.999999999998899e-05, 0.0012702072307849699, 0.03235743315546735, 0.08144006492847788, 0.06648019329337529, 0.09771306445961603, 0.123642075523819, 0.07771837039071594, 0.06946298325942646, 0.10950053647372537, 0.06285517144572261, 0.07913400671028847, 0.04790372019236511, 0.03515691796119447, 0.0868662370504939, 0.055374945551252885, 0.06123921615162142, 0.04791143153166244, 0.058224149505204714, 0.06348401576114882, 0.06878984296590951, 0.9678569516566847, 0.9606171422810688, 0.9818539128919251, 0.9827879175432338, 0.9622624626652878, 0.9834626491679945, 0.9779409594710864, 0.9895716019551455, 0.9888763667909122, 0.20107758580667123, 0.11966680577257771, 0.20290244432643612, 0.15855972956625097, 0.13940589266070835, 0.15960150189059874, 0.15589803670747837, 0.14334832983405466, 0.10965792610969805, 0.13702526799623138, 0.23132600140653126, 0.20490205143813633, 0.2046104084493683, 0.17664516276803055, 0.24174203091338597, 0.2129802421924566, 0.18989623776349807, 0.2976610125670285, 0.0840666461014925, 0.060069353038578854, 0.04039267311770722, 0.05125379469639446, 0.08829268485989872, 0.061670292960124384, 0.061487716755916466, 0.01778280879918348, 0.10397080418883564, 0.0924106387271666, 0.059880974256431685, 0.030052287890020346, 0.11004741541840302, 0.04934171118736286, 0.09725181534610294, 0.06177317078908928, 0.08502645957830468, 0.10115595901902197, 0.0008284887674940844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03335731821301269, 0.017161085223259986, 0.05199939526374986, 0.07548806380326567, 0.1037383394609609, 0.03337294501970878, 0.0878945566052971, 0.07549215325510017, 0.06774284622829274, 9.999999999998899e-05, 0.015248255343148776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003959792892763492, 9.999999999998899e-05, 9.999999999998899e-05, 0.00810636237211071, 0.026883712647298497, 0.007940254652949452, 0.017251050938189127, 0.04561102175205911, 0.03206407960960367, 0.02904922639042362, 0.025978751897924646, 0.040904507715857075, 0.32454113260281525, 0.287830543255458, 0.40500445621027203, 0.2675093300335232, 0.30355473637278707, 0.32039420796354856, 0.29222216809272206, 0.31289669254521235, 0.3097890768322581, 0.08236760149277489, 0.12027941053294211, 0.1079617939330959, 0.0795589595916768, 0.08071635986005554, 0.08756367118432895, 0.07010334077875358, 0.06277608212113805, 0.05660953408596836, 0.16110590252020007, 0.1435408396247676, 0.17313108464127347, 0.1536421808795394, 0.1641342672179522, 0.1433006711419812, 0.20351061407528892, 0.17034354433556642, 0.13248201982454832, 0.19632569176781112, 0.19709744325742606, 0.2874013512259528, 0.21823005364038595, 0.232219467655569, 0.22030803352168338, 0.2242841018870536, 0.2105391248844981, 0.20522689558382312, 0.1342925025256887, 0.10764989695871952, 0.145113868045036, 0.1693650012958431, 0.18743060739111017, 0.1537992161087568, 0.14024367366732948, 0.1286955889455903, 0.12286311963053465, 0.18179448725291736, 0.20139341065995364, 0.16858600781691535, 0.22166755553984507, 0.1840517297877311, 0.1916121181064434, 0.1827074196471279, 0.18099421071620414, 0.1553363102679941, 0.17135797063983083, 0.1838814623332068, 0.19220757951706113, 0.1685384911072224, 0.17463815118328185, 0.17705147004940902, 0.1765734515542179, 0.1632298166946914, 0.1638050346243657, 0.48293922976906456, 0.19984476504473336, 0.14851942146938013, 0.16834853811731132, 0.1475513477755661, 0.24519054216230285, 0.3111649762205009, 0.16401683331350037, 0.16392854525257372, 0.1183627751713493, 0.19580025993497996, 0.1568247451441226, 0.28695810801032207, 0.18935750861078482, 0.12633659473550118, 0.18756569280600555, 0.1944510030486436, 0.4035810119437655, 0.1748418521936861, 0.18568917406220609, 0.1854650864544637, 0.18539530787870118, 0.18236286925749268, 0.18381341792104056, 0.20330322888039143, 0.18598207785745824, 0.26002113766623247, 0.05652346636622785, 0.06993509222193717, 0.06588613434493795, 0.06867222618636093, 0.06351868156162876, 0.06863172846933174, 0.05654263190515563, 0.07287440845544968, 0.07036088171954746]}, "mutation_prompt": null}
