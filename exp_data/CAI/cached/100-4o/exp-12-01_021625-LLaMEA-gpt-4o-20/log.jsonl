{"id": "a876c339-8984-4b80-a724-0fa40ae0beb9", "solution": "import numpy as np\n\nclass HybridDEGaussian:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(10 * dim, budget // dim)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_evals = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        self.current_evals += self.population_size\n\n        while self.current_evals < self.budget:\n            for i in range(self.population_size):\n                if self.current_evals >= self.budget:\n                    break\n\n                # DE mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # DE crossover\n                crossover = np.random.rand(self.dim) < self.CR\n                if not np.any(crossover):\n                    crossover[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover, mutant, population[i])\n\n                # Gaussian random walk for exploitation\n                if np.random.rand() < 0.2:  # 20% chance to apply Gaussian walk\n                    step_size = (self.upper_bound - self.lower_bound) * 0.05\n                    trial = trial + np.random.normal(0, step_size, self.dim)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Evaluate the trial solution\n                trial_fitness = func(trial)\n                self.current_evals += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        # Return the best solution found\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "HybridDEGaussian", "description": "Utilize a hybrid approach combining Differential Evolution with adaptive Gaussian random walks for enhanced exploration and exploitation in high-dimensional search spaces.", "configspace": "", "generation": 0, "fitness": 0.2455303971676418, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.5329357448001949, 0.5429729170446369, 0.5564970552804346, 0.5911106124306912, 0.5849461819868944, 0.5494636263261405, 0.5678268370190358, 0.5532943894328632, 0.581503826080239, 0.3190139832583835, 0.2750206909642091, 0.2891966545864164, 0.2634010606703838, 0.2772742966012184, 0.35297885962580267, 0.2810812840564815, 0.3028715071000444, 0.29728732584525774, 0.08083193876880501, 0.09396107867587167, 0.10059169706317383, 0.09732558876566477, 0.09221877606523687, 0.09092418303790606, 0.10173871192394668, 0.09048913783008661, 0.09301309251717338, 0.07766398747760905, 0.0781046245561976, 0.08871333231231293, 0.0896491745902267, 0.08043041972166354, 0.0836964262842228, 0.08264896213431405, 0.0842620934787639, 0.08436945060273915, 0.95456037457705, 0.9248938569691743, 0.9101163664945063, 0.9251359811248399, 0.9608995498184909, 0.944952534295706, 0.9438170037621385, 0.932068509274893, 0.9619318667220559, 0.2599231754557817, 0.26217979089401655, 0.25625432152575356, 0.23762223409009697, 0.2654788667777409, 0.24273793467271898, 0.24276706292010763, 0.2782619474102437, 0.25982997467320423, 0.4356612244724968, 0.35791741875537686, 0.33555412867131873, 0.5415618771051669, 0.4863426657428074, 0.422598834872162, 0.48687704274804866, 0.5746324496429126, 0.40842881293337785, 0.14826001449049997, 0.17089236210159908, 0.18677470226238713, 0.16336880607027293, 0.1820586517125916, 0.19151188439008116, 0.16754323946374938, 0.17713888463817273, 0.17459590720080798, 0.2142731577117608, 0.13122618695342048, 0.14249074637269754, 0.16008121648304474, 0.18157109951545103, 0.17977153984482908, 0.14789968987922697, 0.13194963528842985, 0.1307625156590928, 0.113855710555827, 0.0814960370885689, 0.09445206317720223, 0.10729952718482927, 0.0852657440961, 0.08440178881765692, 0.09107423942136916, 0.07342780040933283, 0.0728530753160136, 0.21213757110863807, 0.21719753100515016, 0.22935464963444907, 0.1686555595671443, 0.16944177819592354, 0.1793617121026857, 0.257792845391009, 0.2518083436332781, 0.23795155841888704, 0.018166878489033644, 0.004106559207835536, 0.009666886496615179, 0.020215026476333886, 0.021150432480663395, 0.026849571824497764, 0.017814095726491175, 0.02870870265107639, 0.04125018795495816, 0.11623599325090395, 0.12123507894963492, 0.10663182821970463, 0.14722918923276973, 0.14198843250882365, 0.14257363505850662, 0.1366740945220759, 0.13536529244597384, 0.12095480175620521, 0.44443908309298985, 0.4331186078470529, 0.46270058782370893, 0.4433379030187732, 0.44193248827454534, 0.45301752818691954, 0.4626291165198684, 0.4407500911533614, 0.4604589362804884, 0.08645380276192904, 0.08407619978161496, 0.09058044255635556, 0.09209557045389427, 0.07726510996327873, 0.08103443732613502, 0.07845521868770122, 0.07101925271493126, 0.1188370184358144, 0.14818917929849162, 0.1497730725821541, 0.1618456209667254, 0.13445237609133676, 0.1945197110324477, 0.13674240076607802, 0.13031360710056705, 0.1402847446129899, 0.13343673109339438, 0.26272130337965427, 0.2602867366716458, 0.2576100511607945, 0.24504290335610934, 0.2331005534707118, 0.24190799948225528, 0.2855864300662434, 0.2765833995074026, 0.2638724014556473, 0.20055496716061139, 0.19802722018903318, 0.20301331342412343, 0.18191611849097367, 0.19384772101678638, 0.17882501089542968, 0.19869761663081942, 0.20526667165514756, 0.20103397959821023, 0.1704590061964476, 0.17899359812065885, 0.1780936928787753, 0.17525227249854636, 0.16722513165947728, 0.18539881653137302, 0.18511759784756288, 0.17191079470346737, 0.1934702732076724, 0.16551257021792476, 0.1742170238879267, 0.18246039186541252, 0.17192867961120684, 0.16727488300210147, 0.17962155480173936, 0.17799096923101043, 0.1865204646912012, 0.1732889815473041, 0.17396586803378378, 0.5961927980742685, 0.43625199634734, 0.5352771015483005, 0.3740489236231017, 0.40130046443730294, 0.5540149423229426, 0.2603799364080758, 0.533678859782734, 0.18728238290374255, 0.19163991435458316, 0.4119241905727976, 0.15984693963019525, 0.17414109475802309, 0.20005781825879043, 0.2072632729123186, 0.20782146450471317, 0.5382079156217439, 0.1765657654249766, 0.18418502075293186, 0.1862708102053342, 0.17734920889730332, 0.18131467245901212, 0.18119350157590264, 0.1796310054738075, 0.18973826086348855, 0.19962873214871046, 0.0753291535691164, 0.07097568967463963, 0.06755241525516831, 0.07141446667346663, 0.07031651207887368, 0.06200867328156068, 0.06705396242765271, 0.06546521504349889, 0.07175710204375318]}, "mutation_prompt": null}
{"id": "ff43301e-d398-48b9-af02-fc8c01349880", "solution": "import numpy as np\n\nclass HybridDEGaussian:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(10 * dim, budget // dim)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.current_evals = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        self.current_evals += self.population_size\n\n        while self.current_evals < self.budget:\n            for i in range(self.population_size):\n                if self.current_evals >= self.budget:\n                    break\n\n                # DE mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # DE crossover\n                crossover = np.random.rand(self.dim) < self.CR\n                if not np.any(crossover):\n                    crossover[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover, mutant, population[i])\n\n                # Gaussian random walk for exploitation\n                if np.random.rand() < 0.2:  # 20% chance to apply Gaussian walk\n                    step_size = (self.upper_bound - self.lower_bound) * 0.05\n                    trial = trial + np.random.normal(0, step_size, self.dim)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Evaluate the trial solution\n                trial_fitness = func(trial)\n                self.current_evals += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        # Return the best solution found\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "HybridDEGaussian", "description": "Utilize a hybrid approach combining Differential Evolution with adaptive Gaussian random walks for enhanced exploration and exploitation in high-dimensional search spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a876c339-8984-4b80-a724-0fa40ae0beb9", "metadata": {"aucs": [0.5329357448001949, 0.5429729170446369, 0.5564970552804346, 0.5911106124306912, 0.5849461819868944, 0.5494636263261405, 0.5678268370190358, 0.5532943894328632, 0.581503826080239, 0.3190139832583835, 0.2750206909642091, 0.2891966545864164, 0.2634010606703838, 0.2772742966012184, 0.35297885962580267, 0.2810812840564815, 0.3028715071000444, 0.29728732584525774, 0.08083193876880501, 0.09396107867587167, 0.10059169706317383, 0.09732558876566477, 0.09221877606523687, 0.09092418303790606, 0.10173871192394668, 0.09048913783008661, 0.09301309251717338, 0.07766398747760905, 0.0781046245561976, 0.08871333231231293, 0.0896491745902267, 0.08043041972166354, 0.0836964262842228, 0.08264896213431405, 0.0842620934787639, 0.08436945060273915, 0.95456037457705, 0.9248938569691743, 0.9101163664945063, 0.9251359811248399, 0.9608995498184909, 0.944952534295706, 0.9438170037621385, 0.932068509274893, 0.9619318667220559, 0.2599231754557817, 0.26217979089401655, 0.25625432152575356, 0.23762223409009697, 0.2654788667777409, 0.24273793467271898, 0.24276706292010763, 0.2782619474102437, 0.25982997467320423, 0.4356612244724968, 0.35791741875537686, 0.33555412867131873, 0.5415618771051669, 0.4863426657428074, 0.422598834872162, 0.48687704274804866, 0.5746324496429126, 0.40842881293337785, 0.14826001449049997, 0.17089236210159908, 0.18677470226238713, 0.16336880607027293, 0.1820586517125916, 0.19151188439008116, 0.16754323946374938, 0.17713888463817273, 0.17459590720080798, 0.2142731577117608, 0.13122618695342048, 0.14249074637269754, 0.16008121648304474, 0.18157109951545103, 0.17977153984482908, 0.14789968987922697, 0.13194963528842985, 0.1307625156590928, 0.113855710555827, 0.0814960370885689, 0.09445206317720223, 0.10729952718482927, 0.0852657440961, 0.08440178881765692, 0.09107423942136916, 0.07342780040933283, 0.0728530753160136, 0.21213757110863807, 0.21719753100515016, 0.22935464963444907, 0.1686555595671443, 0.16944177819592354, 0.1793617121026857, 0.257792845391009, 0.2518083436332781, 0.23795155841888704, 0.018166878489033644, 0.004106559207835536, 0.009666886496615179, 0.020215026476333886, 0.021150432480663395, 0.026849571824497764, 0.017814095726491175, 0.02870870265107639, 0.04125018795495816, 0.11623599325090395, 0.12123507894963492, 0.10663182821970463, 0.14722918923276973, 0.14198843250882365, 0.14257363505850662, 0.1366740945220759, 0.13536529244597384, 0.12095480175620521, 0.44443908309298985, 0.4331186078470529, 0.46270058782370893, 0.4433379030187732, 0.44193248827454534, 0.45301752818691954, 0.4626291165198684, 0.4407500911533614, 0.4604589362804884, 0.08645380276192904, 0.08407619978161496, 0.09058044255635556, 0.09209557045389427, 0.07726510996327873, 0.08103443732613502, 0.07845521868770122, 0.07101925271493126, 0.1188370184358144, 0.14818917929849162, 0.1497730725821541, 0.1618456209667254, 0.13445237609133676, 0.1945197110324477, 0.13674240076607802, 0.13031360710056705, 0.1402847446129899, 0.13343673109339438, 0.26272130337965427, 0.2602867366716458, 0.2576100511607945, 0.24504290335610934, 0.2331005534707118, 0.24190799948225528, 0.2855864300662434, 0.2765833995074026, 0.2638724014556473, 0.20055496716061139, 0.19802722018903318, 0.20301331342412343, 0.18191611849097367, 0.19384772101678638, 0.17882501089542968, 0.19869761663081942, 0.20526667165514756, 0.20103397959821023, 0.1704590061964476, 0.17899359812065885, 0.1780936928787753, 0.17525227249854636, 0.16722513165947728, 0.18539881653137302, 0.18511759784756288, 0.17191079470346737, 0.1934702732076724, 0.16551257021792476, 0.1742170238879267, 0.18246039186541252, 0.17192867961120684, 0.16727488300210147, 0.17962155480173936, 0.17799096923101043, 0.1865204646912012, 0.1732889815473041, 0.17396586803378378, 0.5961927980742685, 0.43625199634734, 0.5352771015483005, 0.3740489236231017, 0.40130046443730294, 0.5540149423229426, 0.2603799364080758, 0.533678859782734, 0.18728238290374255, 0.19163991435458316, 0.4119241905727976, 0.15984693963019525, 0.17414109475802309, 0.20005781825879043, 0.2072632729123186, 0.20782146450471317, 0.5382079156217439, 0.1765657654249766, 0.18418502075293186, 0.1862708102053342, 0.17734920889730332, 0.18131467245901212, 0.18119350157590264, 0.1796310054738075, 0.18973826086348855, 0.19962873214871046, 0.0753291535691164, 0.07097568967463963, 0.06755241525516831, 0.07141446667346663, 0.07031651207887368, 0.06200867328156068, 0.06705396242765271, 0.06546521504349889, 0.07175710204375318]}, "mutation_prompt": null}
