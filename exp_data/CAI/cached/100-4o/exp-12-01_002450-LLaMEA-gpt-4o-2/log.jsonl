{"id": "b83a0538-e7ba-472a-a6ea-74e8306f9689", "solution": "import numpy as np\n\nclass HybridPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_score = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                current_score = func(self.population[i])\n                self.evaluations += 1\n\n                if current_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = current_score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if current_score < self.global_best_score:\n                    self.global_best_score = current_score\n                    self.global_best_position = self.population[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia = self.w * self.velocities[i]\n                cognitive = self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                social = self.c2 * r2 * (self.global_best_position - self.population[i])\n                self.velocities[i] = inertia + cognitive + social\n\n                # Apply adaptive differential mutation\n                mutation_factor = 0.5 + 0.5 * np.random.rand()\n                differential_mutation = mutation_factor * (self.personal_best_positions[i] - self.global_best_position)\n                self.velocities[i] += differential_mutation\n\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n        return self.global_best_score, self.global_best_position", "name": "HybridPSO", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for balanced exploration and exploitation in black box optimization.", "configspace": "", "generation": 0, "fitness": 0.2857860622579815, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8238176569188795, 0.8207141087493247, 0.813156958867114, 0.8129942546033668, 0.796992206643563, 0.819423351421309, 0.818150159355465, 0.8450764844501548, 0.8497235761381474, 0.6710763442288266, 0.6574162728889021, 0.58780027960777, 0.6668193610964784, 0.6082576216309012, 0.6289450203140261, 0.6278934386715262, 0.670241626995246, 0.6638893446959466, 0.14319913473121038, 0.11486316982486156, 0.19880333394101735, 0.11771935762883945, 0.1207622512594031, 0.4928710712545523, 0.12683672455628714, 0.1397751950796332, 0.1333378725175144, 0.16601331966632293, 0.10646068454502022, 0.11463615274784655, 0.1268693587716463, 0.10396010224777297, 0.12080379920282647, 0.10090686355706746, 0.11767723746964132, 0.11107656448691816, 0.9871106222094849, 0.9839849614147902, 0.9797180126929816, 0.9833489166146049, 0.9782557582043852, 0.9801184887336635, 0.983836490317265, 0.9817757217305212, 0.982486910662327, 0.4768903827325245, 0.18386505723686952, 0.4469881884550003, 0.3797404654805592, 0.42419999398810126, 0.43859936780390774, 0.4069027738347708, 0.3338650776431741, 0.40240555024370883, 0.7192422656849566, 0.3698876034030333, 0.3135865782508229, 0.21525500384428675, 0.704192306253169, 0.19229964768741192, 0.471098771207928, 0.3338076509787634, 0.22792761515745763, 0.16001523152824682, 0.15604803397912181, 0.1659671932421879, 0.12303546943349208, 0.12658747582402574, 0.0980305332743503, 0.15416220523356372, 0.24299964189820367, 0.16585522060460534, 0.1269648481370832, 0.12387330754867232, 0.1275802616727164, 0.2923948059563415, 0.159980583001052, 0.15218912793434536, 0.15506328407908132, 0.17255356330850025, 0.2015217606331685, 9.999999999998899e-05, 0.017072493564096125, 9.999999999998899e-05, 9.999999999998899e-05, 0.009318693100788034, 9.999999999998899e-05, 0.02439566592813336, 0.03394162711781157, 9.999999999998899e-05, 0.061870426081750196, 0.0535799264050032, 0.07160401381600112, 0.09037603528756244, 0.024735737417035497, 0.07297440109465292, 0.0443007970154522, 0.06444219530353834, 0.03753373622858869, 0.04491918655490479, 0.0865939315132136, 0.04711453866900572, 0.09239842888705274, 0.12862615935741306, 0.12635028898047673, 0.14607460415653462, 0.11234156001259232, 0.06395489813812438, 0.0401981193249058, 0.24461020363513752, 0.24178714014690972, 0.10800905952037843, 0.15970979004900998, 0.09770024694915169, 0.05459239940805616, 0.21968135827942337, 0.07942583360444389, 0.48230974033834995, 0.5204798536381833, 0.4761422422831383, 0.4945070049739647, 0.49968612063847717, 0.5108507281145469, 0.5075620063707027, 0.5176164766061477, 0.5150675199763777, 0.09002628929043799, 0.10451114824694885, 0.14250168350166093, 0.1753675278766217, 0.07830742249218126, 0.11848686917886575, 0.1081401603056713, 0.10123207008908253, 0.10944568846883918, 0.1729190060479745, 0.1506560378236088, 0.15467457919794692, 0.2073113174640968, 0.15490356082080303, 0.1682868283156309, 0.20082559253521326, 0.17164875706191907, 0.16638703783859432, 0.29158329988540344, 0.3128908237611271, 0.3612737348472306, 0.2263284486413275, 0.34805857668704787, 0.3182685311240693, 0.3914188416610226, 0.3935116127469742, 0.26932002407160005, 0.20791542943362196, 0.2498832217522049, 0.19473530582596654, 0.24362950913330017, 0.20582315235480442, 0.3115706848637768, 0.2188432454240664, 0.3082440693571137, 0.16542186665088898, 0.20225807489277914, 0.19177949967963703, 0.19724095051602197, 0.24000304020825902, 0.21227758107659933, 0.21206743603911005, 0.18474208758309807, 0.20917698498644755, 0.22059394666474041, 0.23807541856299108, 0.22574029869027612, 0.20742630112015925, 0.5079991844268625, 0.20023663983464635, 0.4040897213558968, 0.21451174969888143, 0.2009638977451058, 0.24855179977064878, 0.1690977526591103, 0.16639359525571218, 0.17745324067477197, 0.8261519020705071, 0.22888708791706858, 0.6514050211458133, 0.46701126669819193, 0.16970927266219638, 0.20363637456363426, 0.310651004732976, 0.23791773576384845, 0.20853815406949738, 0.2767878535039052, 0.2314614533680357, 0.1997059667123633, 0.28205039977265844, 0.26406994588928623, 0.37488999989068184, 0.20920710919480034, 0.18555466133385456, 0.1848468092307355, 0.1916446271475173, 0.19392124812390532, 0.1986513849999536, 0.20091460290436092, 0.1928404367006068, 0.19538798729904516, 0.07766128308084685, 0.08769193237816986, 0.08212110847372456, 0.09068848360695769, 0.07574078895904679, 0.08982114772304517, 0.07493770209036443, 0.09294198730454029, 0.09718337318486991]}, "mutation_prompt": null}
{"id": "a5f0327c-b3a2-4dbf-9c80-9c5a2bc833d7", "solution": "import numpy as np\n\nclass HybridPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_score = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                current_score = func(self.population[i])\n                self.evaluations += 1\n\n                if current_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = current_score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if current_score < self.global_best_score:\n                    self.global_best_score = current_score\n                    self.global_best_position = self.population[i]\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia = self.w * self.velocities[i]\n                cognitive = self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                social = self.c2 * r2 * (self.global_best_position - self.population[i])\n                self.velocities[i] = inertia + cognitive + social\n\n                # Apply adaptive differential mutation\n                mutation_factor = 0.5 + 0.5 * np.random.rand()\n                differential_mutation = mutation_factor * (self.personal_best_positions[i] - self.global_best_position)\n                self.velocities[i] += differential_mutation\n\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n        return self.global_best_score, self.global_best_position", "name": "HybridPSO", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for balanced exploration and exploitation in black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b83a0538-e7ba-472a-a6ea-74e8306f9689", "metadata": {"aucs": [0.8238176569188795, 0.8207141087493247, 0.813156958867114, 0.8129942546033668, 0.796992206643563, 0.819423351421309, 0.818150159355465, 0.8450764844501548, 0.8497235761381474, 0.6710763442288266, 0.6574162728889021, 0.58780027960777, 0.6668193610964784, 0.6082576216309012, 0.6289450203140261, 0.6278934386715262, 0.670241626995246, 0.6638893446959466, 0.14319913473121038, 0.11486316982486156, 0.19880333394101735, 0.11771935762883945, 0.1207622512594031, 0.4928710712545523, 0.12683672455628714, 0.1397751950796332, 0.1333378725175144, 0.16601331966632293, 0.10646068454502022, 0.11463615274784655, 0.1268693587716463, 0.10396010224777297, 0.12080379920282647, 0.10090686355706746, 0.11767723746964132, 0.11107656448691816, 0.9871106222094849, 0.9839849614147902, 0.9797180126929816, 0.9833489166146049, 0.9782557582043852, 0.9801184887336635, 0.983836490317265, 0.9817757217305212, 0.982486910662327, 0.4768903827325245, 0.18386505723686952, 0.4469881884550003, 0.3797404654805592, 0.42419999398810126, 0.43859936780390774, 0.4069027738347708, 0.3338650776431741, 0.40240555024370883, 0.7192422656849566, 0.3698876034030333, 0.3135865782508229, 0.21525500384428675, 0.704192306253169, 0.19229964768741192, 0.471098771207928, 0.3338076509787634, 0.22792761515745763, 0.16001523152824682, 0.15604803397912181, 0.1659671932421879, 0.12303546943349208, 0.12658747582402574, 0.0980305332743503, 0.15416220523356372, 0.24299964189820367, 0.16585522060460534, 0.1269648481370832, 0.12387330754867232, 0.1275802616727164, 0.2923948059563415, 0.159980583001052, 0.15218912793434536, 0.15506328407908132, 0.17255356330850025, 0.2015217606331685, 9.999999999998899e-05, 0.017072493564096125, 9.999999999998899e-05, 9.999999999998899e-05, 0.009318693100788034, 9.999999999998899e-05, 0.02439566592813336, 0.03394162711781157, 9.999999999998899e-05, 0.061870426081750196, 0.0535799264050032, 0.07160401381600112, 0.09037603528756244, 0.024735737417035497, 0.07297440109465292, 0.0443007970154522, 0.06444219530353834, 0.03753373622858869, 0.04491918655490479, 0.0865939315132136, 0.04711453866900572, 0.09239842888705274, 0.12862615935741306, 0.12635028898047673, 0.14607460415653462, 0.11234156001259232, 0.06395489813812438, 0.0401981193249058, 0.24461020363513752, 0.24178714014690972, 0.10800905952037843, 0.15970979004900998, 0.09770024694915169, 0.05459239940805616, 0.21968135827942337, 0.07942583360444389, 0.48230974033834995, 0.5204798536381833, 0.4761422422831383, 0.4945070049739647, 0.49968612063847717, 0.5108507281145469, 0.5075620063707027, 0.5176164766061477, 0.5150675199763777, 0.09002628929043799, 0.10451114824694885, 0.14250168350166093, 0.1753675278766217, 0.07830742249218126, 0.11848686917886575, 0.1081401603056713, 0.10123207008908253, 0.10944568846883918, 0.1729190060479745, 0.1506560378236088, 0.15467457919794692, 0.2073113174640968, 0.15490356082080303, 0.1682868283156309, 0.20082559253521326, 0.17164875706191907, 0.16638703783859432, 0.29158329988540344, 0.3128908237611271, 0.3612737348472306, 0.2263284486413275, 0.34805857668704787, 0.3182685311240693, 0.3914188416610226, 0.3935116127469742, 0.26932002407160005, 0.20791542943362196, 0.2498832217522049, 0.19473530582596654, 0.24362950913330017, 0.20582315235480442, 0.3115706848637768, 0.2188432454240664, 0.3082440693571137, 0.16542186665088898, 0.20225807489277914, 0.19177949967963703, 0.19724095051602197, 0.24000304020825902, 0.21227758107659933, 0.21206743603911005, 0.18474208758309807, 0.20917698498644755, 0.22059394666474041, 0.23807541856299108, 0.22574029869027612, 0.20742630112015925, 0.5079991844268625, 0.20023663983464635, 0.4040897213558968, 0.21451174969888143, 0.2009638977451058, 0.24855179977064878, 0.1690977526591103, 0.16639359525571218, 0.17745324067477197, 0.8261519020705071, 0.22888708791706858, 0.6514050211458133, 0.46701126669819193, 0.16970927266219638, 0.20363637456363426, 0.310651004732976, 0.23791773576384845, 0.20853815406949738, 0.2767878535039052, 0.2314614533680357, 0.1997059667123633, 0.28205039977265844, 0.26406994588928623, 0.37488999989068184, 0.20920710919480034, 0.18555466133385456, 0.1848468092307355, 0.1916446271475173, 0.19392124812390532, 0.1986513849999536, 0.20091460290436092, 0.1928404367006068, 0.19538798729904516, 0.07766128308084685, 0.08769193237816986, 0.08212110847372456, 0.09068848360695769, 0.07574078895904679, 0.08982114772304517, 0.07493770209036443, 0.09294198730454029, 0.09718337318486991]}, "mutation_prompt": null}
