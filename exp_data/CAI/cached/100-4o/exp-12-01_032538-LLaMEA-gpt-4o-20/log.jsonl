{"id": "93369732-3723-48e9-9603-8c72d2848457", "solution": "import numpy as np\n\nclass DEPSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, dim))\n        self.p_best = self.population.copy()\n        self.p_best_fitness = np.full(self.pop_size, np.inf)\n        self.g_best = None\n        self.g_best_fitness = np.inf\n    \n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            # Evaluate fitness of the current population\n            for i in range(self.pop_size):\n                if self.fitness[i] == np.inf:\n                    self.fitness[i] = func(self.population[i])\n                    evaluations += 1\n                    if evaluations >= self.budget:\n                        break\n            \n            # Update personal bests\n            for i in range(self.pop_size):\n                if self.fitness[i] < self.p_best_fitness[i]:\n                    self.p_best[i] = self.population[i]\n                    self.p_best_fitness[i] = self.fitness[i]\n            \n            # Update global best\n            min_index = np.argmin(self.p_best_fitness)\n            if self.p_best_fitness[min_index] < self.g_best_fitness:\n                self.g_best = self.p_best[min_index]\n                self.g_best_fitness = self.p_best_fitness[min_index]\n            \n            # Differential Evolution (DE) Mutation and Crossover\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + 0.8 * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < 0.9\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n            \n            # Particle Swarm Optimization (PSO) Update\n            w = 0.5 + np.random.rand() / 2\n            c1 = 1.496\n            c2 = 1.496\n            for i in range(self.pop_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocities[i] = (w * self.velocities[i] + \n                                      c1 * r1 * (self.p_best[i] - self.population[i]) + \n                                      c2 * r2 * (self.g_best - self.population[i]))\n                \n                self.population[i] = np.clip(self.population[i] + self.velocities[i], \n                                             self.lower_bound, self.upper_bound)\n                self.fitness[i] = np.inf  # Re-evaluate in the next iteration\n                \n                if evaluations >= self.budget:\n                    break\n        \n        return self.g_best", "name": "DEPSOptimizer", "description": "Explores the search space using a dynamic fusion of differential evolution and particle swarm optimization to balance exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.19632273960913355, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.5456633703066849, 0.4394750107520393, 0.5109189339268665, 0.5664290915708934, 0.4774252863902567, 0.5673221288211296, 0.4807583989935177, 0.43422332439066813, 0.4638514351985654, 0.03309512341413534, 0.026785149200883596, 0.18375487845989835, 9.999999999998899e-05, 0.11610188110278619, 0.17057086633147522, 0.15544826526769284, 0.031005281241953897, 0.04507145726286632, 0.10810859837542319, 0.11064929847997629, 0.0632138476506845, 0.0909976828439818, 0.08314957839263515, 0.09023257452894484, 0.10857950418058848, 0.08109073654322452, 0.12993495974943037, 0.11689521624019139, 0.08727219559364818, 0.10436640203921232, 0.1089069189330929, 0.08169054666053877, 0.07491299984436395, 0.094637162272453, 0.08905519919625071, 0.07524524952928457, 0.9717103353925947, 0.9719152476364074, 0.97218603134553, 0.9637103749208581, 0.9705992371428939, 0.9622454907735143, 0.9571664269711134, 0.9583093166005807, 0.9717234374062451, 0.21163213337636932, 0.10222334871505467, 0.05845675929843508, 0.18226416937251666, 0.13880841749731876, 0.15243371071339407, 0.20667024958079705, 0.08625726257149913, 0.22042044069006084, 0.16795725780869875, 0.2053371040029891, 0.21092897571908498, 0.20038226164582906, 0.24598656597111024, 0.2517717142678889, 0.17726768295749262, 0.13917861152587652, 0.27451714071875233, 0.13776652868379247, 0.06732568935927485, 0.10697513560094452, 0.08373570986320811, 0.13222703132158697, 0.10627339290006543, 0.18010940304682121, 0.203387905291595, 0.133343874925258, 0.10146340762976036, 0.011387889253799188, 0.08766040752075022, 0.13632431710034376, 0.04415896563653843, 0.12212869077273736, 0.14400982740422275, 0.06803893302791442, 0.124253784552815, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024339811030017366, 0.0016109977974440026, 9.999999999998899e-05, 0.005828467186712483, 9.999999999998899e-05, 9.999999999998899e-05, 0.04881780207622344, 0.023877676962957395, 0.050873477228894126, 0.04045029048675208, 0.037503102418671386, 0.07621172101309548, 0.0307938560098886, 0.04729284714716342, 0.050844488492595374, 9.999999999998899e-05, 0.016037079816228705, 0.06177331512741091, 0.0303720402302341, 0.019217419114531786, 0.04039755040043913, 0.047978923398086404, 0.019285317849871864, 0.02390573063282353, 0.07082877249137343, 0.006038790639993352, 0.08725239994898115, 0.08148500702307315, 0.08788620974287953, 0.07529277099628984, 0.06123509442040653, 0.06032698437340733, 0.07050406304292556, 0.3950639905065193, 0.3914029122334345, 0.42156710529742925, 0.4027663482457229, 0.38555447479275506, 0.4396866512765756, 0.3957387656645346, 0.3304770914628027, 0.41117193891804193, 0.10787426672893596, 0.06842790516297659, 0.07559734961620401, 0.07498955213685798, 0.07976797874448116, 0.08260482055547147, 0.07815156492264619, 0.09075369215280005, 0.06746948692580956, 0.14937465485451373, 0.1998262543639332, 0.1529644762968162, 0.152087513898848, 0.14254849017838023, 0.16561661454047882, 0.19766438175510426, 0.1436434134631519, 0.13441422668479375, 0.24324702923089758, 0.1946259814234892, 0.27907343044195065, 0.2587725510408795, 0.21817251191951115, 0.28602316009860873, 0.32283473961089226, 0.24990406159211775, 0.2741955802081525, 0.21977293877079151, 0.1623919296578522, 0.2384057264355922, 0.14366677549635842, 0.16187627007655392, 0.17639128049876251, 0.23383185574819432, 0.2296398692420244, 0.2177710713060127, 0.18482867664668623, 0.1657233152253581, 0.16284490814979358, 0.23873066208927862, 0.16921406533574568, 0.17155863498098933, 0.18819673100661194, 0.19850229266165298, 0.17016949673461512, 0.19015229956032942, 0.2591357559517268, 0.19943898071522304, 0.21327666145904034, 0.1984871546832493, 0.1910711921675171, 0.17827497923336144, 0.17871911674104235, 0.1908897425252326, 0.5557923083992204, 0.15162060198070593, 0.150977787540031, 0.6383751327889691, 0.19221669602756308, 0.1666900900379904, 0.18803918412683018, 0.1446075715887336, 0.5997545577652066, 0.2841024663594728, 0.1801885167277003, 0.14773639382214465, 0.12940372936656508, 0.20198267962743388, 0.13673807630285173, 0.19625599873679478, 0.18549403035842194, 0.3785487660420387, 0.18357485412762087, 0.1938855319364221, 0.17955806182706713, 0.19460826006388676, 0.17561033315301522, 0.19904359871832056, 0.17866568189908683, 0.23207119844168023, 0.17400104957927565, 0.0671069112960273, 0.0658027879455898, 0.06281255273889652, 0.07143212917367403, 0.06529817649115432, 0.07116724567074939, 0.06739637038977764, 0.059132027956771305, 0.07047188721910136]}, "mutation_prompt": null}
{"id": "5ba1476b-0a43-4ccb-bddd-a7eb766c3a3c", "solution": "import numpy as np\n\nclass DEPSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, dim))\n        self.p_best = self.population.copy()\n        self.p_best_fitness = np.full(self.pop_size, np.inf)\n        self.g_best = None\n        self.g_best_fitness = np.inf\n    \n    def __call__(self, func):\n        evaluations = 0\n        adapt_rate = 0.9\n        \n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.fitness[i] == np.inf:\n                    self.fitness[i] = func(self.population[i])\n                    evaluations += 1\n                    if evaluations >= self.budget:\n                        break\n            \n            for i in range(self.pop_size):\n                if self.fitness[i] < self.p_best_fitness[i]:\n                    self.p_best[i] = self.population[i]\n                    self.p_best_fitness[i] = self.fitness[i]\n            \n            min_index = np.argmin(self.p_best_fitness)\n            if self.p_best_fitness[min_index] < self.g_best_fitness:\n                self.g_best = self.p_best[min_index]\n                self.g_best_fitness = self.p_best_fitness[min_index]\n            \n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                F = adapt_rate * np.random.rand()  # Adaptive parameter tuning\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < 0.9\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    adapt_rate = max(0.4, adapt_rate * 0.98)  # Adaptation mechanism\n\n                if evaluations >= self.budget:\n                    break\n            \n            w = 0.5 + np.random.rand() / 2\n            c1 = 1.496\n            c2 = 1.496\n            for i in range(self.pop_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocities[i] = (w * self.velocities[i] + \n                                      c1 * r1 * (self.p_best[i] - self.population[i]) + \n                                      c2 * r2 * (self.g_best - self.population[i]))\n                \n                self.population[i] = np.clip(self.population[i] + self.velocities[i], \n                                             self.lower_bound, self.upper_bound)\n                self.fitness[i] = np.inf\n                \n                if evaluations >= self.budget:\n                    break\n        \n        return self.g_best", "name": "DEPSOptimizer", "description": "This algorithm enhances DEPS with adaptive parameter tuning and chaotic local search to improve convergence and avoid premature stagnation.", "configspace": "", "generation": 1, "fitness": 0.19689519373780795, "feedback": "", "error": "", "parent_id": "93369732-3723-48e9-9603-8c72d2848457", "metadata": {"aucs": [0.5450775346667798, 0.5021739922543751, 0.4689324938407601, 0.5031651743460912, 0.5044910232568045, 0.4487765267689028, 0.6133438905211441, 0.567366980899408, 0.4747186007568768, 0.08524843301838736, 0.16130674051537464, 0.021943121541423527, 0.25999966684785436, 0.16928605385242168, 0.05730217700470075, 0.07538367355820086, 0.19699342853547763, 0.15873055615360987, 0.08875555576932825, 0.10578616547457609, 0.07571861334342411, 0.09719228170939909, 0.09063472169641662, 0.11192182441471354, 0.12820858883387387, 0.10417904128348765, 0.09543387929309011, 0.09762660728240569, 0.08772341871431744, 0.07562402438739502, 0.09771166653683938, 0.07893971378592757, 0.078062163188231, 0.0904661252122676, 0.07947830828283642, 0.07438257778302082, 0.9707814237844039, 0.9571353410030815, 0.9698423484754887, 0.963077972909122, 0.9543343926609097, 0.9578505511866588, 0.9685229367433279, 0.9716982866784988, 0.9633008682399329, 0.20636565244145988, 0.17728811694408964, 0.059054026711402585, 0.14062351186716204, 0.14109209766008446, 0.13812848152968005, 0.18726931453806916, 0.16505113600089039, 0.16221446375863124, 0.20788532633415413, 0.19622029827965448, 0.1678182709307774, 0.20456312992324, 0.1815992166581757, 0.1963492400788942, 0.21087984260569137, 0.15887946199792768, 0.166522812653895, 0.12112202311776987, 0.07798502445373034, 0.16772225236094707, 0.11409887185177703, 0.09437100978848445, 0.10280511089815736, 0.14190594069396134, 0.11153888407190826, 0.1378480036669515, 0.14713801878092803, 0.1321611928879043, 0.10843006929226906, 0.17584171469089638, 0.12244590949505163, 0.1304075925084036, 0.1204230799324496, 0.058026544074498254, 0.114079838109296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004452012359990265, 9.999999999998899e-05, 0.001748345038149246, 0.08514481574282451, 9.999999999998899e-05, 9.999999999998899e-05, 0.043613584574092035, 0.02537034879983202, 0.03298765325360109, 0.06636774033034232, 0.07216048805430242, 0.051130712330652583, 0.04965972154824849, 0.045132115305176246, 0.060082336663031866, 0.06915633150140044, 0.02833696381210249, 0.02103676033339541, 0.052665584541885746, 0.04529649714288264, 0.02243195337368431, 0.03915883909606288, 0.029477155003333033, 0.021684408589130233, 0.06455783375611157, 0.0617344155078432, 0.048628131897069604, 0.11878007485350062, 0.10270576326130376, 0.12392904776027402, 0.07924412245807666, 0.06902818840002078, 0.06618048386825792, 0.38797909547014875, 0.3764549054442601, 0.4215977539465646, 0.42324755580898377, 0.3862587391438618, 0.4082812264614768, 0.4491713932144097, 0.3846306929294516, 0.40014018014186126, 0.07759756534272233, 0.06418727634429033, 0.10297147451955246, 0.08592132111039974, 0.09426648155481254, 0.09746461614122459, 0.07745981432178595, 0.06866122021345722, 0.09689253713039414, 0.14374936380488068, 0.16329865989039316, 0.1483674030807549, 0.13843619311897926, 0.14572125041356143, 0.1731051481352106, 0.14185532925890254, 0.15922821782161523, 0.14151881551501955, 0.2050404304996477, 0.24258096720142208, 0.25979174149380224, 0.2368772948102349, 0.22311146281577565, 0.25900478347987166, 0.1890669144251621, 0.26396725116189856, 0.3139332932356049, 0.1648602401457172, 0.17386061574266332, 0.18381023160376764, 0.16884700040943468, 0.14975811476226175, 0.20140089082438273, 0.21150699553878927, 0.18617242652151966, 0.19171348716073455, 0.17900205436532235, 0.13772543236841028, 0.18178014741158088, 0.18662167451278444, 0.1712852272052271, 0.15904237162056412, 0.20196359599170788, 0.169746623018731, 0.18749570702486562, 0.1794951463092106, 0.19229483848742945, 0.18227650298343512, 0.18589985205620962, 0.19533997876044706, 0.1750575235405637, 0.18789254758497353, 0.1848496075070134, 0.17718584761938094, 0.16741404181225694, 0.19050554891789617, 0.2548980578214134, 0.6211366571718646, 0.19744198436996252, 0.16448168965769205, 0.22990075266964838, 0.17889719022912598, 0.507767857053719, 0.2538790291001347, 0.20661179298507126, 0.1590710411580527, 0.2933692385267964, 0.17410916016248734, 0.14647312736056994, 0.27085258705929394, 0.2061794139253349, 0.23342827836018765, 0.18002839962507167, 0.17894168492400708, 0.1842266544794442, 0.195066377114675, 0.18488459551425795, 0.17513646678136607, 0.1818316656547403, 0.1886369219800762, 0.18398164829179842, 0.0657721695398279, 0.0698179377193393, 0.07397072032979524, 0.05489248961031623, 0.06271819997639083, 0.07718528945210268, 0.06956776490926708, 0.061216056904225824, 0.06907892798137005]}, "mutation_prompt": null}
