{"id": "27402ca2-bb1d-4110-8179-3e42a61ac15d", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(40, budget // 10)\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.particles = self.initialize_particles()\n\n    def initialize_particles(self):\n        particles = []\n        for _ in range(self.population_size):\n            position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            velocity = np.random.uniform(-1, 1, self.dim)\n            best_position = position.copy()\n            best_value = np.inf\n            particles.append({'position': position, 'velocity': velocity, 'best_position': best_position, 'best_value': best_value})\n        return particles\n\n    def __call__(self, func):\n        evaluations = 0\n        \n        while evaluations < self.budget:\n            for particle in self.particles:\n                # Evaluate current position\n                current_value = func(particle['position'])\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n                # Update personal best\n                if current_value < particle['best_value']:\n                    particle['best_value'] = current_value\n                    particle['best_position'] = particle['position'].copy()\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_value = current_value\n                    self.global_best_position = particle['position'].copy()\n\n            # Update particle velocities and positions\n            w = self.w_max - (self.w_max - self.w_min) * (evaluations / self.budget)\n            for particle in self.particles:\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.c1 * r1 * (particle['best_position'] - particle['position'])\n                social_velocity = self.c2 * r2 * (self.global_best_position - particle['position'])\n                quantum_velocity = np.random.normal(0, 1, self.dim) * (self.upper_bound - self.lower_bound) * 0.1\n                particle['velocity'] = w * particle['velocity'] + cognitive_velocity + social_velocity + quantum_velocity\n                \n                # Update position\n                particle['position'] += particle['velocity']\n                particle['position'] = np.clip(particle['position'], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum mechanics principles to dynamically update velocities and positions for efficient exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.1492369660189769, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.263826186520443, 0.2295667893750477, 0.21199679946642014, 0.22828238408205093, 0.2520972358323291, 0.2563869425487497, 0.22204552770339947, 0.23600065545119153, 0.2486195852404105, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06958621566468504, 0.0685051889466074, 0.07116115721646743, 0.06308717740118808, 0.06817864694698439, 0.05962073922598632, 0.06294362259448594, 0.08672830580310054, 0.06680737047833518, 0.058399091893585275, 0.05800539724969278, 0.06122732725631941, 0.06595691255469405, 0.040649866456872186, 0.05493020121104675, 0.06494135932632195, 0.05107492002027192, 0.0581305549876443, 0.9874623130344627, 0.9917529046585718, 0.9845027367161976, 0.9674840283254176, 0.9821196105069838, 0.9852084615670521, 0.9882262419299381, 0.9921263145790111, 0.9920427909611895, 0.13934024928973776, 0.11907309490833762, 0.1337466645173523, 0.11191981503433834, 0.12855316955622997, 0.12256093911888877, 0.11424354005996706, 0.13923287801478468, 0.12081688767763754, 0.19279777655085295, 0.17063138696487912, 0.18032334023986074, 0.17989075193273052, 0.17357781853057674, 0.1463467751967511, 0.16483238840652825, 0.1885563926867201, 0.16978588411245998, 0.04836316910217431, 0.05428512394980023, 0.05220750370422378, 0.043733457643517104, 0.05769812166647792, 0.042456032362125584, 0.05945930023362611, 0.024832337134598648, 0.041187924440287293, 0.022723204102118366, 0.04295234260179115, 0.01696376010190237, 0.035591432066055084, 0.060205868564071396, 0.023013580332566175, 0.04084438415973257, 0.07190033784616168, 0.04615114130547704, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.057735088249253, 0.03419662068860785, 0.09302233025692552, 0.049956579834724124, 0.0794446504491152, 0.021775245156144263, 0.01911092010983395, 0.04322029377209169, 0.03451263627875145, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018556390338742346, 0.0065635208115610855, 0.018446456720682902, 0.03626932273208927, 0.03799466807028662, 0.01676609950484087, 0.018616687035183155, 0.0366697892648965, 0.02735231661532178, 0.29473334871022094, 0.28679522947959313, 0.24653488990937644, 0.256810072638062, 0.2475605844404165, 0.2386263921222006, 0.24192032776042538, 0.24508966983016778, 0.23437584765188135, 0.07475751924310192, 0.06399736493855146, 0.062159383107027844, 0.07244695036204829, 0.07068390011143422, 0.07110824141136762, 0.07092190821719946, 0.06210360897241429, 0.06475238065341982, 0.1725005959956183, 0.15542424080695894, 0.14860261591682955, 0.1644375884725192, 0.13078347889912023, 0.18650789496065423, 0.11962004147084104, 0.16620817592810544, 0.13821593354973993, 0.19299588210391527, 0.19514939159399514, 0.2009853567820945, 0.1862409571286665, 0.18575401619977494, 0.19814783846930328, 0.18779898907406045, 0.205300447911843, 0.19925380596256936, 0.14087990992578403, 0.12829990583324957, 0.14455238253142266, 0.12973332747600286, 0.13685788649036945, 0.1469869745322372, 0.15419899817968086, 0.14099918451803606, 0.11354652409592059, 0.17981063154154175, 0.16397523099289502, 0.19334469912387553, 0.17543827333061945, 0.16646690297153433, 0.16419269325541175, 0.1944545921533558, 0.17886738283419235, 0.16843114079976806, 0.16006761345444487, 0.1784493203371481, 0.1593336339077145, 0.17118849877590714, 0.15692113208273784, 0.16455064500879713, 0.16853553736371063, 0.16542615074577005, 0.15872313687006367, 0.12497761104814142, 0.23996270317179957, 0.2928497304662483, 0.19695397023949568, 0.19138310214454646, 0.14904873528971707, 0.15567027642947928, 0.17311737735038935, 0.1725042654646879, 0.11894905905113451, 0.17167191182491004, 0.19350324373120376, 0.15841010381586307, 0.14659993445913388, 0.18142478225090153, 0.19188847517330831, 0.18767196005747022, 0.2594095618940444, 0.18638269282718023, 0.19464973332638325, 0.1852308036733884, 0.17685387192534285, 0.1842299589480172, 0.2001098601587532, 0.18757575271037408, 0.20353377563991426, 0.19273170113520133, 0.05950238996653823, 0.061258056881690726, 0.06500139225856671, 0.06251170275506501, 0.07688787578692768, 0.06320176719495774, 0.07291311207361284, 0.0664964257980577, 0.06318984952130502]}, "mutation_prompt": null}
{"id": "b5700f59-7afd-4800-b373-90e53dc0c071", "solution": "import numpy as np\n\nclass AQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(40, budget // 10)\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.particles = self.initialize_particles()\n\n    def initialize_particles(self):\n        particles = []\n        for _ in range(self.population_size):\n            position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            velocity = np.random.uniform(-1, 1, self.dim)\n            best_position = position.copy()\n            best_value = np.inf\n            particles.append({'position': position, 'velocity': velocity, 'best_position': best_position, 'best_value': best_value})\n        return particles\n\n    def __call__(self, func):\n        evaluations = 0\n        \n        while evaluations < self.budget:\n            for particle in self.particles:\n                # Evaluate current position\n                current_value = func(particle['position'])\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n                # Update personal best\n                if current_value < particle['best_value']:\n                    particle['best_value'] = current_value\n                    particle['best_position'] = particle['position'].copy()\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_value = current_value\n                    self.global_best_position = particle['position'].copy()\n\n            # Update particle velocities and positions\n            w = self.w_max - (self.w_max - self.w_min) * (evaluations / self.budget)\n            for particle in self.particles:\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.c1 * r1 * (particle['best_position'] - particle['position'])\n                social_velocity = self.c2 * r2 * (self.global_best_position - particle['position'])\n                quantum_velocity = np.random.normal(0, 1, self.dim) * (self.upper_bound - self.lower_bound) * 0.1\n                particle['velocity'] = w * particle['velocity'] + cognitive_velocity + social_velocity + quantum_velocity\n                \n                # Update position\n                particle['position'] += particle['velocity']\n                particle['position'] = np.clip(particle['position'], self.lower_bound, self.upper_bound)\n\n        return self.global_best_position", "name": "AQIPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization (AQIPSO) using quantum mechanics principles to dynamically update velocities and positions for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "27402ca2-bb1d-4110-8179-3e42a61ac15d", "metadata": {"aucs": [0.263826186520443, 0.2295667893750477, 0.21199679946642014, 0.22828238408205093, 0.2520972358323291, 0.2563869425487497, 0.22204552770339947, 0.23600065545119153, 0.2486195852404105, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06958621566468504, 0.0685051889466074, 0.07116115721646743, 0.06308717740118808, 0.06817864694698439, 0.05962073922598632, 0.06294362259448594, 0.08672830580310054, 0.06680737047833518, 0.058399091893585275, 0.05800539724969278, 0.06122732725631941, 0.06595691255469405, 0.040649866456872186, 0.05493020121104675, 0.06494135932632195, 0.05107492002027192, 0.0581305549876443, 0.9874623130344627, 0.9917529046585718, 0.9845027367161976, 0.9674840283254176, 0.9821196105069838, 0.9852084615670521, 0.9882262419299381, 0.9921263145790111, 0.9920427909611895, 0.13934024928973776, 0.11907309490833762, 0.1337466645173523, 0.11191981503433834, 0.12855316955622997, 0.12256093911888877, 0.11424354005996706, 0.13923287801478468, 0.12081688767763754, 0.19279777655085295, 0.17063138696487912, 0.18032334023986074, 0.17989075193273052, 0.17357781853057674, 0.1463467751967511, 0.16483238840652825, 0.1885563926867201, 0.16978588411245998, 0.04836316910217431, 0.05428512394980023, 0.05220750370422378, 0.043733457643517104, 0.05769812166647792, 0.042456032362125584, 0.05945930023362611, 0.024832337134598648, 0.041187924440287293, 0.022723204102118366, 0.04295234260179115, 0.01696376010190237, 0.035591432066055084, 0.060205868564071396, 0.023013580332566175, 0.04084438415973257, 0.07190033784616168, 0.04615114130547704, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.057735088249253, 0.03419662068860785, 0.09302233025692552, 0.049956579834724124, 0.0794446504491152, 0.021775245156144263, 0.01911092010983395, 0.04322029377209169, 0.03451263627875145, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018556390338742346, 0.0065635208115610855, 0.018446456720682902, 0.03626932273208927, 0.03799466807028662, 0.01676609950484087, 0.018616687035183155, 0.0366697892648965, 0.02735231661532178, 0.29473334871022094, 0.28679522947959313, 0.24653488990937644, 0.256810072638062, 0.2475605844404165, 0.2386263921222006, 0.24192032776042538, 0.24508966983016778, 0.23437584765188135, 0.07475751924310192, 0.06399736493855146, 0.062159383107027844, 0.07244695036204829, 0.07068390011143422, 0.07110824141136762, 0.07092190821719946, 0.06210360897241429, 0.06475238065341982, 0.1725005959956183, 0.15542424080695894, 0.14860261591682955, 0.1644375884725192, 0.13078347889912023, 0.18650789496065423, 0.11962004147084104, 0.16620817592810544, 0.13821593354973993, 0.19299588210391527, 0.19514939159399514, 0.2009853567820945, 0.1862409571286665, 0.18575401619977494, 0.19814783846930328, 0.18779898907406045, 0.205300447911843, 0.19925380596256936, 0.14087990992578403, 0.12829990583324957, 0.14455238253142266, 0.12973332747600286, 0.13685788649036945, 0.1469869745322372, 0.15419899817968086, 0.14099918451803606, 0.11354652409592059, 0.17981063154154175, 0.16397523099289502, 0.19334469912387553, 0.17543827333061945, 0.16646690297153433, 0.16419269325541175, 0.1944545921533558, 0.17886738283419235, 0.16843114079976806, 0.16006761345444487, 0.1784493203371481, 0.1593336339077145, 0.17118849877590714, 0.15692113208273784, 0.16455064500879713, 0.16853553736371063, 0.16542615074577005, 0.15872313687006367, 0.12497761104814142, 0.23996270317179957, 0.2928497304662483, 0.19695397023949568, 0.19138310214454646, 0.14904873528971707, 0.15567027642947928, 0.17311737735038935, 0.1725042654646879, 0.11894905905113451, 0.17167191182491004, 0.19350324373120376, 0.15841010381586307, 0.14659993445913388, 0.18142478225090153, 0.19188847517330831, 0.18767196005747022, 0.2594095618940444, 0.18638269282718023, 0.19464973332638325, 0.1852308036733884, 0.17685387192534285, 0.1842299589480172, 0.2001098601587532, 0.18757575271037408, 0.20353377563991426, 0.19273170113520133, 0.05950238996653823, 0.061258056881690726, 0.06500139225856671, 0.06251170275506501, 0.07688787578692768, 0.06320176719495774, 0.07291311207361284, 0.0664964257980577, 0.06318984952130502]}, "mutation_prompt": null}
