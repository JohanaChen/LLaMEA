{"id": "e7beed92-8fc7-496b-bbce-a3a62bdfe101", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.global_best_position = None\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_score = np.inf\n\n    def mutate_and_crossover(self, target_idx):\n        indices = [idx for idx in range(self.population_size) if idx != target_idx]\n        a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n        crossover = np.random.rand(self.dim) < self.crossover_rate\n        trial = np.where(crossover, mutant, self.population[target_idx])\n        return trial\n\n    def update_particles(self, func):\n        for i in range(self.population_size):\n            score = func(self.population[i])\n            if score < self.personal_best_scores[i]:\n                self.personal_best_scores[i] = score\n                self.personal_best_positions[i] = self.population[i]\n            if score < self.global_best_score:\n                self.global_best_score = score\n                self.global_best_position = self.population[i]\n\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            inertia = self.w * self.velocities[i]\n            cognitive = self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n            social = self.c2 * r2 * (self.global_best_position - self.population[i])\n            self.velocities[i] = inertia + cognitive + social\n            self.population[i] = np.clip(self.population[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            self.update_particles(func)\n            for i in range(self.population_size):\n                trial = self.mutate_and_crossover(i)\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n        return self.global_best_position", "name": "HybridPSODE", "description": "A hybrid algorithm combining Particle Swarm Optimization with a Differential Evolution-inspired mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.24274522494096387, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7193924620289167, 0.6901066691249496, 0.7253831436903877, 0.7438713405305539, 0.6817135667032499, 0.1894836021421047, 0.658774259373365, 0.588141124276777, 0.6749757417207091, 0.24164650409373167, 0.31083521653631285, 9.999999999998899e-05, 0.29577930233766736, 0.03057956752433344, 0.052844783230659775, 0.430361684356937, 0.3608871263417849, 0.25013434153349, 0.13866616893565642, 0.11165807630604341, 0.12585095904169685, 0.13510569740991973, 0.13076687915217644, 0.25049628976646143, 0.1552318630977263, 0.11223180569767233, 0.13205962473619515, 0.11581270060411408, 0.12683206394726254, 0.09973483305855169, 0.18036424128831074, 0.1077830642493689, 0.1173695107573216, 0.12808571426386317, 0.12060079324620909, 0.11490610994231143, 0.988184842708277, 0.9856840184612612, 0.9940068796909616, 0.9892057054433347, 0.9896097260052061, 0.9908476255808248, 0.991288804624151, 0.9885321360132866, 0.9870819072790314, 0.41077168388561125, 0.35949116665326064, 0.3472719032153585, 0.14944364936317833, 0.4001173983632754, 0.3673448485861045, 0.4627700018301689, 0.08844617271439825, 0.4202021799554171, 0.6908695111362635, 0.5746080206760433, 0.46273403825149084, 0.2573363877698335, 0.20352664572669632, 0.2614474252498482, 0.21861974199881629, 0.13646374979533016, 0.21731347976615567, 0.1097070380606312, 0.18092910626276348, 0.16206127928484604, 0.15472184050125926, 0.18007035921071068, 0.1748082083309821, 0.17064386473666437, 0.16500155604727862, 0.1645851724748958, 0.1191014226080761, 0.05146128267756045, 0.1777430367900431, 0.1313291496995207, 0.11248811763171851, 0.11187674886007792, 0.12127591546668026, 0.11549528415846122, 0.09854843494275534, 9.999999999998899e-05, 0.034681375768392364, 0.0011233942949254727, 0.010900228230232956, 0.00044703315605509886, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10252145446479266, 0.028537196357176775, 0.07258805636463272, 0.05567704754763669, 0.01834686676156161, 0.010135300083677579, 0.12353406090379326, 0.007787272885513619, 0.035502630985048356, 9.999999999998899e-05, 0.03911468412134167, 0.032855622955974995, 0.05741591873480034, 0.05874827031157015, 0.08820107730251825, 0.07098572507090462, 0.09287630778872447, 0.06042422498926803, 0.08031550654363873, 0.151096624053903, 0.09104016958533867, 0.005172718300624712, 0.17851144900618365, 9.999999999998899e-05, 0.047485701950391146, 0.049419322032224766, 0.0762558271491871, 0.45792436233725575, 0.4961800833224378, 0.48868724684430875, 0.46413453598868915, 0.4754147272771302, 0.49742383045946204, 0.46788247623122337, 0.43077376543768575, 0.48603306572894267, 0.10086721989670877, 0.08680125345578615, 0.05358169355817677, 0.11234665786930331, 0.07403891687765152, 0.1096089282522893, 0.1317904327645234, 0.11815767959991896, 0.12981911539538182, 0.3718172504760412, 0.239684608537319, 0.23943743456101818, 0.46167587450711, 0.273620531366669, 0.34343206567965556, 0.19146980016785886, 0.30785338304972665, 0.2586152470765636, 0.25100679821174354, 0.2546087918117268, 0.3080704522720298, 0.25829687524106726, 0.23422376004407408, 0.33607944460840133, 0.3680223691542902, 0.3287885766494826, 0.17004544818904, 0.19298871259372263, 0.22342178551529746, 0.20555195912817326, 0.30029003951564515, 0.17732518299737998, 0.20779076030324017, 0.15776320015656997, 0.3326247064047798, 0.0902656955250104, 0.20566325964521726, 0.20290216217751267, 0.18668704939212932, 0.2017127326972301, 0.18899364153044684, 0.21480379287103468, 0.20016212284786195, 0.19724947986602404, 0.19657848301531577, 0.205766375415957, 0.31824159384540973, 0.20607173378074983, 0.19831389622567275, 0.45084749215545195, 0.22072154936234878, 0.19793001579546765, 0.20024394041746885, 0.2038888941742718, 0.8150139465641912, 0.12682321788180184, 0.15409888460947563, 0.16996995741699883, 0.19783213359509677, 0.19847319021856458, 0.09982738510490674, 0.16873643483961054, 0.1618616985890884, 0.3362992712128652, 0.2032396608772623, 0.12261000975650682, 0.20808944470480262, 0.3941349500499496, 0.20924865302258422, 0.10458170244033949, 0.6207430108066216, 0.19381946929468907, 0.21107225638233051, 0.1793306558218466, 0.2019719202509599, 0.18242534172007152, 0.197098073679415, 0.1977546395250851, 0.19630853347929744, 0.20265417505224104, 0.18902286088301146, 0.08362245123790413, 0.08480492941422413, 0.09466959763882643, 0.08614019451613053, 0.08803237596787261, 0.07297604810216984, 0.08357889609396485, 0.07809307029023171, 0.088959218715842]}, "mutation_prompt": null}
{"id": "7308df8f-ed7a-48f3-9d1d-a69d84bc8eb8", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.9  # Changed from 0.7 to 0.9\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.global_best_position = None\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_score = np.inf\n\n    def mutate_and_crossover(self, target_idx):\n        indices = [idx for idx in range(self.population_size) if idx != target_idx]\n        a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n        crossover = np.random.rand(self.dim) < self.crossover_rate\n        trial = np.where(crossover, mutant, self.population[target_idx])\n        return trial\n\n    def update_particles(self, func):\n        for i in range(self.population_size):\n            score = func(self.population[i])\n            if score < self.personal_best_scores[i]:\n                self.personal_best_scores[i] = score\n                self.personal_best_positions[i] = self.population[i]\n            if score < self.global_best_score:\n                self.global_best_score = score\n                self.global_best_position = self.population[i]\n\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            inertia = self.w * self.velocities[i]\n            cognitive = self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n            social = self.c2 * r2 * (self.global_best_position - self.population[i])\n            self.velocities[i] = inertia + cognitive + social\n            self.population[i] = np.clip(self.population[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            self.update_particles(func)\n            for i in range(self.population_size):\n                trial = self.mutate_and_crossover(i)\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n            self.w *= 0.99  # Introduced inertia weight decay\n        return self.global_best_position", "name": "HybridPSODE", "description": "Enhanced Hybrid PSODE with adaptive parameters and inertia weight decay for improved convergence and exploration-exploitation balance.", "configspace": "", "generation": 1, "fitness": 0.2512828677104344, "feedback": "", "error": "", "parent_id": "e7beed92-8fc7-496b-bbce-a3a62bdfe101", "metadata": {"aucs": [0.7846394217583893, 0.7535411502386136, 0.7851615990744032, 0.7976955660130081, 0.7983830257822129, 0.18839803785924947, 0.1822726698409478, 0.1813051799076414, 0.7945262549285509, 0.5908559101854307, 9.999999999998899e-05, 0.03575825332752425, 0.040304365246180196, 0.6142386695083051, 9.999999999998899e-05, 0.6743641711641305, 0.6379587915160305, 0.043531329700956856, 0.12586329330461898, 0.16039604914722871, 0.11277936273417766, 0.10632647017273322, 0.12510593915237733, 0.13927429980840422, 0.13556312070192766, 0.14302247622874276, 0.127438448462879, 0.10264195049050562, 0.09328311477813944, 0.142283859245952, 0.10851766241395089, 0.14182346619481612, 0.12633417138900693, 0.13256534381543827, 0.11053607591582237, 0.1191101379435846, 0.9884233472858224, 0.9857613032211129, 0.9935476512505659, 0.9903917005158066, 0.9900782143802791, 0.9908473684334769, 0.9905589749659285, 0.9908014473723448, 0.9873403928691334, 0.6702891157508144, 0.6834922607409273, 0.05883443643048847, 0.5874880651467216, 0.6530587747314838, 0.664201736810148, 0.2862990881024824, 0.08732653602641383, 0.6279092965826014, 0.21593211193245232, 0.7184481221397991, 0.17078889815042053, 0.199356540218529, 0.20512906873026004, 0.18326412360985933, 0.2190002259399133, 0.12470394412046737, 0.22543397692368616, 0.08972890487546759, 0.1989488724665801, 0.1895009850960372, 9.999999999998899e-05, 0.12174575043647984, 0.1826443629344674, 0.11964960444690209, 0.24817433444839165, 0.22520754573285917, 0.1927307359153798, 0.010013066077373733, 0.1534577221375445, 0.1158971415777198, 0.20058519875109104, 0.28529076719869373, 0.1327760580871149, 9.999999999998899e-05, 0.09677458186095333, 9.999999999998899e-05, 9.999999999998899e-05, 0.11552838540493271, 0.012588725029342829, 9.999999999998899e-05, 9.999999999998899e-05, 0.007290305339525904, 9.999999999998899e-05, 9.999999999998899e-05, 0.047913039299129045, 0.025302583310522042, 0.051905470424690625, 0.007691849859641442, 0.026775795728271046, 0.001787161551926375, 0.09813301448262113, 0.04079531613338405, 0.0329204905297118, 0.04215216252426346, 0.11736901999633542, 0.04221949740203068, 0.1067581374144656, 0.08168506911973017, 0.28212810518165177, 0.08870963795969145, 0.06631950943053999, 0.060776022307242994, 0.04137103821499133, 0.18102830913382195, 0.08858515790465571, 0.005670096596568697, 0.12075044191110063, 9.999999999998899e-05, 0.05256442523085847, 0.048327257276934654, 0.10114561624496032, 0.48323829984368827, 0.49982121210684216, 0.5018220077522221, 0.5071317930924591, 0.49421979618515965, 0.20762835056452045, 0.5288543213944692, 0.5377626003685336, 0.5289432706766533, 0.06322990997223765, 0.09306226903383263, 0.06139373426944805, 0.10474195334188074, 0.15929095940225102, 0.11133853084439727, 0.12823977325972868, 0.08487969880426227, 0.12922380144243306, 0.22154553964906976, 0.15193545969239441, 0.20201171990926736, 0.27745769099227036, 0.1702569990543369, 0.1322571397756045, 0.3227674153635607, 0.17475273635974486, 0.1977384807422784, 0.2834807339466413, 0.4285916555543111, 0.34950591345814064, 0.24952169801135993, 0.27843247322150755, 0.30038235871566454, 0.3737871830207907, 0.5250316836823496, 0.32236366078717527, 0.21512508496595784, 0.3338523667836, 0.2879273771278207, 0.30103063239497674, 0.16065068065636712, 0.27790909926913276, 0.24152894126209734, 0.29427223073367337, 0.1762160169463527, 0.2057108092783757, 0.19889208987095863, 0.2094454719943123, 0.20192186409973378, 0.22759538192529516, 0.19748798300944836, 0.2650762067910166, 0.20148893944386925, 0.17638648026941972, 0.17947704964704336, 0.19690294549780374, 0.19144774544054677, 0.171078887324555, 0.18245995083200917, 0.6929270073657209, 0.18489656792650744, 0.22232937340468906, 0.20154208135157714, 0.8444642263189236, 0.12435947938765535, 0.15250482458910974, 0.8486047718067632, 0.1965475725467415, 0.19637314706585163, 0.140708780020397, 0.1670153238755745, 0.15280154579783556, 0.16378961382728563, 0.2093725128147803, 0.11986823610769892, 0.20817515104947348, 0.6761951702324883, 0.20423451719771268, 0.10436300269100085, 0.1921325948979099, 0.20418394271551832, 0.19441276056193402, 0.18616426995834234, 0.19893069923244733, 0.18495971275297896, 0.1920435955971247, 0.22835198855534233, 0.1797318636040054, 0.2071892096693787, 0.19367615867606847, 0.08682340916811448, 0.07702763294315007, 0.09429754455797124, 0.08871263233618287, 0.09963458896186272, 0.09329820142652756, 0.08441572972931322, 0.0915577023937929, 0.10303158916180333]}, "mutation_prompt": null}
