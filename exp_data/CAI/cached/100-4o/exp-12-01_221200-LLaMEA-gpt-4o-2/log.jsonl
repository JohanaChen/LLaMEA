{"id": "3973bb2e-f0c0-404a-8daa-784529da0e2c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 30\n        self.w = 0.7  # Inertia weight\n        self.c1 = 1.5 # Cognitive (personal) weight\n        self.c2 = 1.5 # Social (global) weight\n        self.F = 0.8  # Differential evolution mutation factor\n        self.CR = 0.9 # Crossover probability\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.pbest_positions = np.copy(self.population)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # PSO Update\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.population[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n            \n            # Evaluate fitness\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                eval_count += 1\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.population[i]\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.population[i]\n                    \n                if eval_count >= self.budget:\n                    return self.gbest_position\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = [index for index in range(self.population_size) if index != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.pbest_positions[a] + self.F * (self.pbest_positions[b] - self.pbest_positions[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(self.population[i])\n                crossover = np.random.rand(self.dim) < self.CR\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                # Evaluate trial vector\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n                if trial_fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = trial_fitness\n                    self.pbest_positions[i] = trial_vector\n                if trial_fitness < self.gbest_score:\n                    self.gbest_score = trial_fitness\n                    self.gbest_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    return self.gbest_position\n        return self.gbest_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization and Differential Evolution algorithm that dynamically adapts to the fitness landscape to balance exploration and exploitation.", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "An exception occured: Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 32, in __call__\nTypeError: unsupported operand type(s) for -: 'NoneType' and 'float'\n.", "error": "TypeError(\"unsupported operand type(s) for -: 'NoneType' and 'float'\")Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 32, in __call__\nTypeError: unsupported operand type(s) for -: 'NoneType' and 'float'\n", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "a46f5b18-570f-4149-9bc8-0f9c31e8fe2f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 30\n        self.w = 0.7  # Inertia weight\n        self.c1 = 1.5 # Cognitive (personal) weight\n        self.c2 = 1.5 # Social (global) weight\n        self.F = 0.8  # Differential evolution mutation factor\n        self.CR = 0.9 # Crossover probability\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.pbest_positions = np.copy(self.population)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(self.dim)  # Default initialization to prevent NoneType errors\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # PSO Update\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.population[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n            \n            # Evaluate fitness\n            for i in range(self.population_size):\n                fitness = func(self.population[i])\n                eval_count += 1\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.population[i]\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.population[i]\n                    \n                if eval_count >= self.budget:\n                    return self.gbest_position\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = [index for index in range(self.population_size) if index != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.pbest_positions[a] + self.F * (self.pbest_positions[b] - self.pbest_positions[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(self.population[i])\n                crossover = np.random.rand(self.dim) < self.CR\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                # Evaluate trial vector\n                trial_fitness = func(trial_vector)\n                eval_count += 1\n                if trial_fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = trial_fitness\n                    self.pbest_positions[i] = trial_vector\n                if trial_fitness < self.gbest_score:\n                    self.gbest_score = trial_fitness\n                    self.gbest_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    return self.gbest_position\n        return self.gbest_position", "name": "HybridPSODE", "description": "A refined hybrid PSO and DE algorithm with a default initialization for `gbest_position` to prevent NoneType errors.", "configspace": "", "generation": 1, "fitness": 0.3178403048919884, "feedback": "", "error": "", "parent_id": "3973bb2e-f0c0-404a-8daa-784529da0e2c", "metadata": {"aucs": [0.6047402039815977, 0.6272161555342338, 0.721423168618896, 0.6769327714612483, 0.6333976793406813, 0.7035826229980522, 0.6706348429060959, 0.6352424978233053, 0.6511789596205632, 0.361937563379345, 0.3568800936571034, 0.3455564141943659, 0.34587757967930066, 0.34624787490999187, 0.3263032573846517, 0.3170573756702262, 0.2966795002839522, 0.31199170074579263, 0.23680450594944624, 0.24488517781464203, 0.13322542333764253, 0.09939805172075467, 0.15833318104035587, 0.11830388856648055, 0.14049418430016336, 0.14804023805822653, 0.17124136641998988, 0.12069140952541002, 0.12244117003998167, 0.10519627190505743, 0.11411368098556374, 0.11688051688025403, 0.11775852318577418, 0.1056486809771624, 0.13676483215684787, 0.10517297986932828, 0.9838983029403454, 0.9855732674712857, 0.9835540195759949, 0.9874339224701297, 0.9869580676981358, 0.9732192795899649, 0.967382269171722, 0.9833851976596355, 0.9832197333938608, 0.35263397281345155, 0.33262708492654214, 0.3742825013911377, 0.36035082512022953, 0.3703932664490849, 0.40135967677262074, 0.08713090223302022, 0.3357878981403465, 0.38471343434347227, 0.5526535504104466, 0.6210247135551338, 0.6302517165593524, 0.6232335342617898, 0.6540448901074272, 0.6182961395972741, 0.5863251838305434, 0.6850796612703367, 0.5948300771276477, 0.24329729937465716, 0.23551696849114734, 0.2521021393202846, 0.2577671938064, 0.2049139940188618, 0.15906534642004877, 0.24104000223297717, 0.24269460865053794, 0.24296643103038718, 0.2648215505304182, 0.23195110386519657, 0.30817495664626704, 0.24505219692197233, 0.2530104985852113, 0.3131899809139792, 0.2588953138792931, 0.24083459470708612, 0.28455199915654994, 0.10728460825324404, 0.13085458634320146, 0.09978580755883248, 0.14062356182686375, 0.1141697677251643, 0.1459405760435375, 0.13565274232411206, 0.13489752806446664, 0.10898662459636221, 0.27706571852870854, 0.314760722711138, 0.26782724034419614, 0.27121205795222636, 0.21949982128359535, 0.25896823175611894, 0.28380739484333184, 0.2974558218184794, 0.29860849357335073, 0.03955924149414991, 0.03381461774997774, 0.02920906747274743, 0.06217162086942918, 0.022819396600733843, 0.031678766369119704, 0.08023942004366913, 0.045399564032413964, 0.05969753425841884, 0.1440101771054857, 0.1557257972875692, 0.16299989964328254, 0.005659143816589718, 0.17232858733158885, 0.19418327373260114, 0.14781701039387896, 0.17432583953347935, 0.1421814229559044, 0.4980427909997214, 0.5101199526664313, 0.5574275750613653, 0.5144163893698293, 0.4983518267430742, 0.5189528305440004, 0.5236068156278257, 0.4998946680735744, 0.5252608697007921, 0.06652653213350912, 0.11829635908162361, 0.10747094854921546, 0.11191727223982784, 0.1130278183551574, 0.11829290637304968, 0.15142893415072722, 0.1262481182664149, 0.09523867177665579, 0.1534505674040667, 0.3167454952372396, 0.1801104586399188, 0.35148679528557936, 0.2661182642797767, 0.16243413009429974, 0.25164592890285964, 0.19747884251747505, 0.18125886568017335, 0.32200140678535183, 0.31898721988485745, 0.32053612631205575, 0.35825301817747446, 0.3532579707031065, 0.3323108474469939, 0.35504286727573486, 0.3760782332099698, 0.34634875093475737, 0.25373017323850566, 0.2541582665429324, 0.24209012701688615, 0.22442350747691975, 0.2407068707125617, 0.28011742038551957, 0.2710461869118378, 0.26229157481814225, 0.2909320030645859, 0.2604544137678044, 0.21910081192856434, 0.20601341421477504, 0.2275716094138558, 0.19413007703763052, 0.20863617221017206, 0.20556945995493048, 0.20235234674427893, 0.1949262607012907, 0.21976766208910425, 0.2277490605208653, 0.1911217792979193, 0.21075160636591728, 0.22534187542909723, 0.21746131496718046, 0.20659647307480833, 0.23603113753952598, 0.2211134486693468, 0.7423033509271524, 0.18115278055443995, 0.21015223164521335, 0.7903766807879832, 0.8040665988098409, 0.6898211986423091, 0.8078266956080244, 0.8397084832076368, 0.1842105685598331, 0.6912891000485515, 0.632313689633154, 0.7070733008834205, 0.2064976442593056, 0.7082153080464046, 0.6899789104614482, 0.67714713852285, 0.2108031167456057, 0.650165174708762, 0.19321559044976455, 0.21430840961527498, 0.2025456972948363, 0.19108040603675702, 0.18913417183591363, 0.18643188816862177, 0.19809510641426786, 0.17972148810703426, 0.2042569785368774, 0.09503686593147542, 0.1015739705914308, 0.09327518553498759, 0.07848345916505628, 0.0830317247583835, 0.08691250546838525, 0.12731424985245632, 0.09596551903605754, 0.09878324664788174]}, "mutation_prompt": null}
