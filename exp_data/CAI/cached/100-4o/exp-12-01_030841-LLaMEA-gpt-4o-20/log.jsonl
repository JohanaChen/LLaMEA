{"id": "b504a191-34fe-4f03-bf21-e83e0ec5f5fe", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.n_particles = 50  # Number of particles\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.n_particles, self.dim))\n        self.velocities = np.zeros((self.n_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_scores = np.full(self.n_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_score = np.inf\n        self.w = 0.7  # Inertia weight\n        self.c1 = 1.5  # Cognitive coefficient\n        self.c2 = 1.5  # Social coefficient\n        self.F = 0.5  # Differential evolution scale factor\n        self.CR = 0.9  # Differential evolution crossover probability\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            for i in range(self.n_particles):\n                current_score = func(self.particles[i])\n                evals += 1\n                if current_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = current_score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                if current_score < self.global_best_score:\n                    self.global_best_score = current_score\n                    self.global_best_position = self.particles[i]\n\n                if evals >= self.budget:\n                    break\n\n            # Update particle velocities and positions based on PSO\n            r1 = np.random.rand(self.n_particles, self.dim)\n            r2 = np.random.rand(self.n_particles, self.dim)\n            self.velocities = (\n                self.w * self.velocities\n                + self.c1 * r1 * (self.personal_best_positions - self.particles)\n                + self.c2 * r2 * (self.global_best_position - self.particles)\n            )\n            self.particles = self.particles + self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n\n            # Apply Differential Evolution on a subset of particles\n            for i in range(self.n_particles):\n                indices = np.random.choice(self.n_particles, 3, replace=False)\n                x0, x1, x2 = self.particles[indices]\n                mutant = x0 + self.F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.particles[i])\n                trial_score = func(trial)\n                evals += 1\n\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n\n                if evals >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "PSO_DE_Optimizer", "description": "Hybrid Particle Swarm Optimization with Differential Evolution to balance exploration and exploitation in high-dimensional search spaces.", "configspace": "", "generation": 0, "fitness": 0.2407736173854252, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6417295891533841, 0.6233453209960018, 0.5976234720855864, 0.6452932709150314, 0.6245257803148841, 0.6459946726351493, 0.6644200261882297, 0.600442904758905, 0.6263272483498177, 0.20448378573749704, 0.032543394763421385, 0.24036075232327714, 0.2004479301631501, 0.22789725010169437, 0.21779522153061837, 0.11875990805273717, 0.04489339102175349, 0.17605086498781364, 0.1039095453080967, 0.10013819760454112, 0.11519525567888123, 0.13341801798561514, 0.10644157648143371, 0.12045319022466061, 0.14959395373645312, 0.14794291599490494, 0.10351748394290827, 0.11269610845064493, 0.10556613571509621, 0.10152796255033048, 0.11188137313540725, 0.09506865353918037, 0.13067190121704386, 0.11195998109275573, 0.12939602131663064, 0.10707932909197804, 0.973158249119588, 0.9750920266414662, 0.9745395614401824, 0.9746331049183301, 0.976167774885946, 0.9748720838430828, 0.9793503412412657, 0.9688478010078112, 0.974132397812805, 0.3435245294763358, 0.3049478864447357, 0.37436450826059664, 0.33884361437055843, 0.27163374201556, 0.3386756680079024, 0.3022305558084283, 0.3208559266179467, 0.300916000725431, 0.2916627300747471, 0.1692909643254763, 0.21910384708178354, 0.34746076292329864, 0.2309417181666179, 0.2129649849570161, 0.20837116181114235, 0.46515855990066934, 0.47347114763402465, 0.16872297579690076, 0.08153229663875172, 0.15968883709564818, 0.09629289754316328, 0.1637381067798076, 0.16388017413679767, 0.15641989171241943, 0.14492341290825184, 0.15539200734138725, 0.19965441949634255, 0.11871092097889557, 0.11991602552083891, 0.19840742507142883, 0.1620541884014396, 0.1445467919747252, 0.17363392318067195, 0.1617534727498623, 0.12038526560811846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03442732595676956, 9.999999999998899e-05, 0.006520817199007767, 9.999999999998899e-05, 0.004295568434314001, 0.0012269585114932369, 0.1027141418008628, 0.05052508089390173, 0.08014008057028155, 0.07566681617441351, 0.06380479981197718, 0.04884105305021946, 0.05407399140515767, 0.08967607942891787, 0.04689911651032386, 0.04620506093244481, 0.020456663355475024, 0.023999785101675664, 0.050237324714685005, 0.06925753047480998, 0.05332457762310483, 0.059513624542602006, 0.057602975331347284, 0.11144027601450956, 0.12747284325286745, 0.06028394584272412, 0.13441987394231802, 0.07459131010549214, 0.1585958774472338, 0.15931374898898065, 0.12307735282962007, 0.04921693245338887, 0.07142692240072956, 0.4964768786008219, 0.4740286568889396, 0.44636105658615843, 0.4359239891330122, 0.4774939149318056, 0.4292918133614053, 0.4830334537044153, 0.44450378290419246, 0.44091896696900124, 0.10989596574098304, 0.08266143336707954, 0.09414837954360977, 0.11399311115440702, 0.09558054319652909, 0.12223900926021614, 0.11614278244408083, 0.08960606857132303, 0.11586616616718748, 0.17237213222560244, 0.14669196590646771, 0.18693892137265333, 0.2918383257184207, 0.2790540778215944, 0.16067928399627085, 0.18722505563504077, 0.19301461651627339, 0.21803035885935385, 0.31721810658003347, 0.3026472793433497, 0.2863419453006011, 0.3163644925580952, 0.33184202259059825, 0.26700960600930257, 0.32960082725176953, 0.3589219588717709, 0.3257420324894187, 0.2104693691845383, 0.2478804684881738, 0.24954242553543315, 0.209627835539832, 0.24565857937318492, 0.24959247810606155, 0.27081375690111154, 0.25521138827580914, 0.2738522792992858, 0.18760802253258757, 0.13573638582755687, 0.20133429535323188, 0.21634542821933977, 0.19108335014891686, 0.18239784188180097, 0.19524005184826776, 0.20221700841781498, 0.19698347990579446, 0.22870111285453365, 0.22776837142711337, 0.21796983390544022, 0.20240480916763748, 0.18448320311630573, 0.18622557161498943, 0.20140896186283186, 0.19847777844757553, 0.18420876381059248, 0.10304071336078346, 0.16616720174237454, 0.15160184022930878, 0.744108324397316, 0.19716726626538428, 0.19328555277011117, 0.14159053921933296, 0.16041063597776561, 0.7601391835212097, 0.6890466210868597, 0.20757972347941123, 0.20362301167769103, 0.5103182195303477, 0.47735461035145055, 0.1483005644766917, 0.20805379872529117, 0.15126198707034733, 0.4854696460724899, 0.17897030568994088, 0.2128531925639996, 0.18866729198270227, 0.18011630674399726, 0.20023725799250525, 0.20045292511786417, 0.19442000458358777, 0.19703183885027353, 0.18019718122754713, 0.07777967193431357, 0.09388651235761314, 0.08244942433686286, 0.07862606933342453, 0.0854329477538085, 0.08489342386382126, 0.10455061221971695, 0.08742735520234668, 0.08364223623043765]}, "mutation_prompt": null}
{"id": "7ee8f943-9001-4f2d-af4a-a6d8699c1881", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.n_particles = 50  # Number of particles\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.n_particles, self.dim))\n        self.velocities = np.zeros((self.n_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_scores = np.full(self.n_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_score = np.inf\n        self.w = 0.7  # Inertia weight\n        self.c1 = 1.5  # Cognitive coefficient\n        self.c2 = 1.5  # Social coefficient\n        self.F = 0.5  # Differential evolution scale factor\n        self.CR = 0.9  # Differential evolution crossover probability\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            for i in range(self.n_particles):\n                current_score = func(self.particles[i])\n                evals += 1\n                if current_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = current_score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                if current_score < self.global_best_score:\n                    self.global_best_score = current_score\n                    self.global_best_position = self.particles[i]\n\n                if evals >= self.budget:\n                    break\n\n            # Update particle velocities and positions based on PSO\n            r1 = np.random.rand(self.n_particles, self.dim)\n            r2 = np.random.rand(self.n_particles, self.dim)\n            self.velocities = (\n                self.w * self.velocities\n                + self.c1 * r1 * (self.personal_best_positions - self.particles)\n                + self.c2 * r2 * (self.global_best_position - self.particles)\n            )\n            self.particles = self.particles + self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n\n            # Apply Differential Evolution on a subset of particles\n            for i in range(self.n_particles):\n                indices = np.random.choice(self.n_particles, 3, replace=False)\n                x0, x1, x2 = self.particles[indices]\n                mutant = x0 + self.F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.particles[i])\n                trial_score = func(trial)\n                evals += 1\n\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n\n                if evals >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "PSO_DE_Optimizer", "description": "Hybrid Particle Swarm Optimization with Differential Evolution to balance exploration and exploitation in high-dimensional search spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b504a191-34fe-4f03-bf21-e83e0ec5f5fe", "metadata": {"aucs": [0.6417295891533841, 0.6233453209960018, 0.5976234720855864, 0.6452932709150314, 0.6245257803148841, 0.6459946726351493, 0.6644200261882297, 0.600442904758905, 0.6263272483498177, 0.20448378573749704, 0.032543394763421385, 0.24036075232327714, 0.2004479301631501, 0.22789725010169437, 0.21779522153061837, 0.11875990805273717, 0.04489339102175349, 0.17605086498781364, 0.1039095453080967, 0.10013819760454112, 0.11519525567888123, 0.13341801798561514, 0.10644157648143371, 0.12045319022466061, 0.14959395373645312, 0.14794291599490494, 0.10351748394290827, 0.11269610845064493, 0.10556613571509621, 0.10152796255033048, 0.11188137313540725, 0.09506865353918037, 0.13067190121704386, 0.11195998109275573, 0.12939602131663064, 0.10707932909197804, 0.973158249119588, 0.9750920266414662, 0.9745395614401824, 0.9746331049183301, 0.976167774885946, 0.9748720838430828, 0.9793503412412657, 0.9688478010078112, 0.974132397812805, 0.3435245294763358, 0.3049478864447357, 0.37436450826059664, 0.33884361437055843, 0.27163374201556, 0.3386756680079024, 0.3022305558084283, 0.3208559266179467, 0.300916000725431, 0.2916627300747471, 0.1692909643254763, 0.21910384708178354, 0.34746076292329864, 0.2309417181666179, 0.2129649849570161, 0.20837116181114235, 0.46515855990066934, 0.47347114763402465, 0.16872297579690076, 0.08153229663875172, 0.15968883709564818, 0.09629289754316328, 0.1637381067798076, 0.16388017413679767, 0.15641989171241943, 0.14492341290825184, 0.15539200734138725, 0.19965441949634255, 0.11871092097889557, 0.11991602552083891, 0.19840742507142883, 0.1620541884014396, 0.1445467919747252, 0.17363392318067195, 0.1617534727498623, 0.12038526560811846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03442732595676956, 9.999999999998899e-05, 0.006520817199007767, 9.999999999998899e-05, 0.004295568434314001, 0.0012269585114932369, 0.1027141418008628, 0.05052508089390173, 0.08014008057028155, 0.07566681617441351, 0.06380479981197718, 0.04884105305021946, 0.05407399140515767, 0.08967607942891787, 0.04689911651032386, 0.04620506093244481, 0.020456663355475024, 0.023999785101675664, 0.050237324714685005, 0.06925753047480998, 0.05332457762310483, 0.059513624542602006, 0.057602975331347284, 0.11144027601450956, 0.12747284325286745, 0.06028394584272412, 0.13441987394231802, 0.07459131010549214, 0.1585958774472338, 0.15931374898898065, 0.12307735282962007, 0.04921693245338887, 0.07142692240072956, 0.4964768786008219, 0.4740286568889396, 0.44636105658615843, 0.4359239891330122, 0.4774939149318056, 0.4292918133614053, 0.4830334537044153, 0.44450378290419246, 0.44091896696900124, 0.10989596574098304, 0.08266143336707954, 0.09414837954360977, 0.11399311115440702, 0.09558054319652909, 0.12223900926021614, 0.11614278244408083, 0.08960606857132303, 0.11586616616718748, 0.17237213222560244, 0.14669196590646771, 0.18693892137265333, 0.2918383257184207, 0.2790540778215944, 0.16067928399627085, 0.18722505563504077, 0.19301461651627339, 0.21803035885935385, 0.31721810658003347, 0.3026472793433497, 0.2863419453006011, 0.3163644925580952, 0.33184202259059825, 0.26700960600930257, 0.32960082725176953, 0.3589219588717709, 0.3257420324894187, 0.2104693691845383, 0.2478804684881738, 0.24954242553543315, 0.209627835539832, 0.24565857937318492, 0.24959247810606155, 0.27081375690111154, 0.25521138827580914, 0.2738522792992858, 0.18760802253258757, 0.13573638582755687, 0.20133429535323188, 0.21634542821933977, 0.19108335014891686, 0.18239784188180097, 0.19524005184826776, 0.20221700841781498, 0.19698347990579446, 0.22870111285453365, 0.22776837142711337, 0.21796983390544022, 0.20240480916763748, 0.18448320311630573, 0.18622557161498943, 0.20140896186283186, 0.19847777844757553, 0.18420876381059248, 0.10304071336078346, 0.16616720174237454, 0.15160184022930878, 0.744108324397316, 0.19716726626538428, 0.19328555277011117, 0.14159053921933296, 0.16041063597776561, 0.7601391835212097, 0.6890466210868597, 0.20757972347941123, 0.20362301167769103, 0.5103182195303477, 0.47735461035145055, 0.1483005644766917, 0.20805379872529117, 0.15126198707034733, 0.4854696460724899, 0.17897030568994088, 0.2128531925639996, 0.18866729198270227, 0.18011630674399726, 0.20023725799250525, 0.20045292511786417, 0.19442000458358777, 0.19703183885027353, 0.18019718122754713, 0.07777967193431357, 0.09388651235761314, 0.08244942433686286, 0.07862606933342453, 0.0854329477538085, 0.08489342386382126, 0.10455061221971695, 0.08742735520234668, 0.08364223623043765]}, "mutation_prompt": null}
