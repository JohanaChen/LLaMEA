{"id": "cf37dd95-1d6a-4dab-af07-3a408bae663d", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5, dim * 5)  # Population size\n        self.temperature = 1000  # Initial temperature for annealing\n        self.cooling_rate = 0.99  # Cooling rate for annealing\n    \n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # Differential Evolution mutation\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + 0.8 * (x1 - x2), self.lb, self.ub)\n                # Crossover\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Simulated Annealing\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lb, self.ub)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                # Metropolis acceptance criterion\n                if candidate_fitness < fitness[i] or \\\n                   np.random.rand() < np.exp((fitness[i] - candidate_fitness) / self.temperature):\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n\n            # Cool down\n            self.temperature *= self.cooling_rate\n        \n        # Return the best found solution\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]\n\n# Example usage:\n# optimizer = HybridDESA(budget=1000, dim=10)\n# best_solution, best_value = optimizer(my_black_box_function)", "name": "HybridDESA", "description": "A hybrid Differential Evolution and Simulated Annealing algorithm that adaptively balances exploration and exploitation to efficiently explore the search space.", "configspace": "", "generation": 0, "fitness": 0.19523187047350737, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.36575643198654517, 0.36259319280984015, 0.3773979028387997, 0.3779130282197678, 0.3475947089548903, 0.3720892548965138, 0.366239139982954, 0.3628339794630745, 0.35216508869701324, 0.1896732965905492, 0.186858925573975, 0.15536897129670924, 0.1958651401248841, 0.17148035681060192, 0.16711268909177524, 0.1820134422829679, 0.1946526733504147, 0.1775503045617417, 0.09352619762997161, 0.10842475358734993, 0.08940352362235515, 0.08417838712234038, 0.09344281766367368, 0.10812980377880776, 0.11886878224528119, 0.09052367715845322, 0.09533070930432419, 0.0929787744704843, 0.08149556918770429, 0.08269727615712086, 0.08367947876394832, 0.0808586952707454, 0.07842130060554187, 0.07073259859335701, 0.08516070216023908, 0.07921663147801661, 0.752222464707068, 0.9003825032261195, 0.6290802176231283, 0.8233463367584253, 0.8893309168274819, 0.864083581465118, 0.9352717897477096, 0.8125653782656972, 0.7579440319895296, 0.21303156211708352, 0.19153341720732653, 0.1946343547772461, 0.1820539930402908, 0.17545979873828366, 0.17908764045100467, 0.18980757461537145, 0.17953735843416196, 0.17504871170987357, 0.3004391297555309, 0.22999167778662588, 0.2187532426723372, 0.258157309248234, 0.2618851214237162, 0.2342341519763318, 0.2429660907460378, 0.24787843988589342, 0.22594817533372813, 0.12052687388776451, 0.11329295642955972, 0.129159608531614, 0.1413796635867457, 0.11825309235935344, 0.12575370750277215, 0.13428714682835585, 0.11985717652969852, 0.12045675997302407, 0.11533492835324177, 0.11457965481746923, 0.12376420782417896, 0.13199152675139814, 0.122881333793454, 0.11725496292325566, 0.13589164902265405, 0.12535060900632367, 0.10856901079029069, 0.07462621520807189, 0.09151527343742205, 0.08913650303917275, 0.09087079796120356, 0.10724917644359033, 0.06405177839676357, 0.07431909403593129, 0.08040082362578072, 0.0954985416617139, 0.13803620896651647, 0.13553563423328652, 0.14013187884830225, 0.1209293023594673, 0.10254475901884075, 0.1395499734240997, 0.15407859134048407, 0.11487777678324851, 0.12662213481468843, 0.055203344782455144, 0.05301544609385744, 0.041652950891411966, 0.12413641011259913, 0.1338718649265429, 0.061005998942970985, 0.04390444014381023, 0.05455786889722891, 0.055258994679982076, 0.06599089946737147, 0.06065806138508545, 0.06520250155268481, 0.05108580844748345, 0.08461512468640486, 0.07301572829948544, 0.06614529158885085, 0.06554526068313149, 0.059181264596612326, 0.3431147347186021, 0.324894207256048, 0.3309015969496486, 0.3594813429905981, 0.34703510216070466, 0.31964684000222865, 0.3465473792880449, 0.3574719001402549, 0.3328334685790474, 0.08592029254634892, 0.08680963106603923, 0.08022140146217449, 0.09352278332062158, 0.08344679630649643, 0.10316259770277014, 0.09919472907809246, 0.11338758018438988, 0.09195818453367333, 0.17652125921306472, 0.14594770168336813, 0.18123385925455926, 0.18826118220898003, 0.17456604155883815, 0.14324756008842598, 0.19380180749685083, 0.1940034840677668, 0.18899153245000966, 0.2384477679996202, 0.22982838195777278, 0.22487671473629833, 0.22389594094813348, 0.22863328762185964, 0.22526274881103425, 0.24842366659355075, 0.23482594905329635, 0.23909337348288984, 0.19906043080152047, 0.16619850179335938, 0.16479489613513454, 0.16566932764557585, 0.17648479504283165, 0.16732823241637984, 0.17343060153702772, 0.18019404887451385, 0.17032812032794886, 0.19336766697671692, 0.21727374627040408, 0.18344222757850226, 0.19166083678167412, 0.19455727587213245, 0.19139447480697147, 0.1799394525631195, 0.21314508614197858, 0.19620433226682021, 0.16928893643331777, 0.18173678612715138, 0.17551182956169142, 0.17413788132599817, 0.17332228960661467, 0.18131101745643685, 0.1855759043448666, 0.18433189121420768, 0.1689371189743335, 0.36460087696860255, 0.4031842025154707, 0.16281351442339587, 0.17678551483610294, 0.20829344646348114, 0.17691463719461475, 0.49046498345727096, 0.13913392137319003, 0.18139666689894152, 0.16176692213275434, 0.16531067007886846, 0.2699557303486162, 0.2424134115723856, 0.21744970716030898, 0.21106083925213037, 0.20099330464399423, 0.20089089484756573, 0.20749100491875394, 0.1906346640734825, 0.17949886371760326, 0.17592850481409916, 0.20532317038357728, 0.19479882019367922, 0.18134202962874613, 0.17939270978155142, 0.18685164403078647, 0.20088055573140695, 0.0690346226244819, 0.06742888028388039, 0.08245175922886505, 0.07092562637958089, 0.07063551176047744, 0.07334458857508652, 0.06949305360316826, 0.0663830041580129, 0.06726545828352704]}, "mutation_prompt": null}
{"id": "b78a7e1e-c3a3-4cd2-893b-b40cdf6d4c89", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5, dim * 5)  # Population size\n        self.temperature = 1000  # Initial temperature for annealing\n        self.cooling_rate = 0.99  # Cooling rate for annealing\n    \n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # Differential Evolution mutation\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                # Adaptive mutation factor\n                F = 0.5 + np.random.rand() * 0.5\n                mutant = np.clip(x0 + F * (x1 - x2), self.lb, self.ub)\n                # Crossover\n                crossover = np.random.rand(self.dim) < 0.9\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Simulated Annealing\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                candidate = population[i] + np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(candidate, self.lb, self.ub)\n                candidate_fitness = func(candidate)\n                evaluations += 1\n\n                # Metropolis acceptance criterion\n                if candidate_fitness < fitness[i] or \\\n                   np.random.rand() < np.exp((fitness[i] - candidate_fitness) / self.temperature):\n                    population[i] = candidate\n                    fitness[i] = candidate_fitness\n\n            # Cool down\n            self.temperature *= self.cooling_rate\n        \n        # Return the best found solution\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]\n\n# Example usage:\n# optimizer = HybridDESA(budget=1000, dim=10)\n# best_solution, best_value = optimizer(my_black_box_function)", "name": "HybridDESA", "description": "Introducing adaptive mutation scaling in Differential Evolution to improve balance between exploration and exploitation.", "configspace": "", "generation": 1, "fitness": 0.2080267608509255, "feedback": "", "error": "", "parent_id": "cf37dd95-1d6a-4dab-af07-3a408bae663d", "metadata": {"aucs": [0.35902483753671877, 0.34727483159627404, 0.3695046402016121, 0.36170342718472337, 0.38329816277726714, 0.3708985322803994, 0.3621087721921795, 0.3407247460665137, 0.3459876593538257, 0.25577368540452095, 0.26028152466028875, 0.2016169510364776, 0.2553330764460371, 0.22709143980038315, 0.2029887382263682, 0.2449767429943156, 0.247622557231156, 0.19808284091571005, 0.09624553271046765, 0.10086489845740965, 0.10451894487488667, 0.09420484359628789, 0.08253438655850909, 0.11293927774936874, 0.08775106107938702, 0.1079235713493083, 0.0871780780785757, 0.08219599851506132, 0.08753817158438792, 0.08380470288093367, 0.08846122910935106, 0.07919421776499236, 0.07883206146070043, 0.07762432490774063, 0.09653000201566553, 0.08724562433382266, 0.897705775024347, 0.7739776880157805, 0.8540614192882189, 0.7650963722192925, 0.9469538044410876, 0.9022619314214719, 0.8606214119442255, 0.8710122753177425, 0.8612376431750224, 0.21926793180379323, 0.17795095066354083, 0.18361326428586866, 0.18031685679571963, 0.21978894175089503, 0.1997428185226795, 0.20476604882186877, 0.20717692249553643, 0.18946070197015819, 0.21555277159243014, 0.24169208247540286, 0.2207322632812494, 0.2578219087854434, 0.2754352958463352, 0.25627081687163356, 0.2607634046990699, 0.23442114181007956, 0.3082457661915159, 0.14251928006790915, 0.11995086220348317, 0.139301422122873, 0.12411159022706719, 0.12337842273086785, 0.11975096862211099, 0.1379101784507386, 0.1337095516690442, 0.11726831972604324, 0.13257198485675048, 0.12433982667434595, 0.11955866826772876, 0.11598692189659965, 0.13823723015488854, 0.13313405084513563, 0.13716771254338145, 0.11007973267970461, 0.1303834320170999, 0.13219287488704978, 0.1143010179752848, 0.10258342736521664, 0.1041852046437276, 0.07893381350634987, 0.09937057446935327, 0.10818926344242574, 0.09573651222436674, 0.11734916817335816, 0.14658646670693065, 0.14413154300641706, 0.12640785293924361, 0.14843664207430796, 0.13671899929373232, 0.17665969661947334, 0.1405914775279743, 0.19330387799576942, 0.15524054000367338, 0.0952466515638547, 0.10362221993044007, 0.07091768697422718, 0.0537142285387161, 0.10143292126158798, 0.1864841127386343, 0.10354476272514912, 0.12191649838939889, 0.10493611293506766, 0.07211287860660909, 0.06930727507139545, 0.07010469383691109, 0.07377676593375815, 0.09597476834417484, 0.07635329724590834, 0.062312964205549215, 0.08331653206061951, 0.06385231650961032, 0.33651581790894725, 0.3574416022119815, 0.3737077504608187, 0.35575761143062, 0.41747185851820046, 0.35099185653667186, 0.3762856628809019, 0.36649150466502567, 0.3425740262056759, 0.08545477347645081, 0.08694707701504922, 0.09554939808336627, 0.09379679395532281, 0.09565861455245073, 0.09794375906764763, 0.12727737024845376, 0.08239087756936603, 0.08936922661930369, 0.14257100229813147, 0.13885885014525534, 0.1615785888461414, 0.17141951287805335, 0.16693803156120435, 0.1530449757261536, 0.18994877645020825, 0.20357479781008625, 0.22969109251657183, 0.264748235265473, 0.23079553532233776, 0.2385653304822356, 0.23822659337319663, 0.24019571604017775, 0.24407634595487948, 0.24746977809543236, 0.2594328397119875, 0.25635453045905765, 0.18344927294243218, 0.18343442566334467, 0.17751743303281675, 0.19179318774348741, 0.1811416037678737, 0.18224095178728583, 0.19984725407285964, 0.20042990427518226, 0.1705830917357407, 0.21095548371420414, 0.20334245040990806, 0.1892906329309082, 0.1966785169918821, 0.1914258268972132, 0.18870643697813982, 0.19462665886357466, 0.18915216248621258, 0.1874868351250999, 0.17378246604109826, 0.17571643773223966, 0.18857703391365366, 0.1755704916425117, 0.17898726598989234, 0.17664069732913956, 0.19318334916663116, 0.18353045738493967, 0.1716710005805442, 0.46490537754791705, 0.3981888780535964, 0.1705570306132589, 0.17327437444154425, 0.17749373797606982, 0.1760320728660263, 0.18303770066546232, 0.15823969921851855, 0.4156024231918478, 0.3487784683401314, 0.18629416344723448, 0.16582554374966474, 0.25518356707660983, 0.17489071083742513, 0.41222629749522366, 0.15097173354017268, 0.4561255148059218, 0.20107264129239, 0.19423138826348763, 0.18106860006969405, 0.18231527854455976, 0.19254447609752734, 0.19064246899376458, 0.18321829989469907, 0.19146693028462125, 0.174481210889587, 0.1775453407925197, 0.08421806120510422, 0.07621381032419938, 0.08127582951481582, 0.07009974992175116, 0.06620361116829987, 0.06661228399027919, 0.0729471470244436, 0.07662630510906565, 0.06945807508674551]}, "mutation_prompt": null}
