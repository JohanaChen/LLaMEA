{"id": "451040c3-1591-45ee-bd43-e1dcd055042c", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = np.array([-5.0, 5.0])\n        self.population_size = min(10 * dim, budget // 5)\n        self.mutation_factor = 0.5\n        self.crossover_rate = 0.7\n        self.populations = 3\n        self.evaluations = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n    \n    def differential_mutation(self, population):\n        indices = np.random.choice(np.arange(self.population_size), size=3, replace=False)\n        a, b, c = population[indices]\n        mutant_vector = a + self.mutation_factor * (b - c)\n        return np.clip(mutant_vector, self.bounds[0], self.bounds[1])\n    \n    def crossover(self, target, mutant):\n        crossover = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover, mutant, target)\n        return trial_vector\n    \n    def select(self, target, trial, func):\n        target_fitness = func(target)\n        trial_fitness = func(trial)\n        self.evaluations += 2\n        return (trial, trial_fitness) if trial_fitness < target_fitness else (target, target_fitness)\n\n    def __call__(self, func):\n        populations = [self.initialize_population() for _ in range(self.populations)]\n        best_solution = None\n        best_fitness = float('inf')\n        \n        while self.evaluations < self.budget:\n            for population in populations:\n                for i in range(self.population_size):\n                    target = population[i]\n                    mutant = self.differential_mutation(population)\n                    trial = self.crossover(target, mutant)\n                    best_candidate, candidate_fitness = self.select(target, trial, func)\n                    population[i] = best_candidate\n                    \n                    if candidate_fitness < best_fitness:\n                        best_solution, best_fitness = best_candidate, candidate_fitness\n\n                    if self.evaluations >= self.budget:\n                        break\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_solution", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy leveraging multi-population dynamics to balance exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.14783252914360018, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.30759027227542624, 0.2949613511836343, 0.2953829157982727, 0.32844146975046573, 0.3114728190195577, 0.3145326954420876, 0.3013807025690035, 0.3072522797847562, 0.3048269420644756, 0.03708942463863163, 0.042323804856382985, 0.03217924224280433, 0.045324886632720496, 0.03649078021881014, 0.04125168679206204, 0.02514411834540098, 0.03537764732648707, 0.03019405860173008, 0.08131293385838323, 0.06977395709903522, 0.06924433093292448, 0.07760923057461933, 0.0789552283583067, 0.07595726710829709, 0.08861023206911034, 0.07706377435887679, 0.07983968250150097, 0.06752975636179359, 0.06543016097450183, 0.07054123298517334, 0.07000766138923298, 0.0636200744472355, 0.06711627342530824, 0.07818720573598326, 0.09347731772122747, 0.06986757581625658, 0.7517430522466262, 0.8059696324285347, 0.805827063962658, 0.8355684208332119, 0.7680263018896414, 0.7523424707222623, 0.8232821742973003, 0.747122246766114, 0.8386314177989593, 0.11939661198934737, 0.10517984220848142, 0.09127563540814809, 0.11552176480172616, 0.09382720860134519, 0.09889820722495768, 0.10675324424415145, 0.11510267181142098, 0.12175814653820671, 0.19436839002136808, 0.17818148332107153, 0.1687739610212482, 0.18552096032593468, 0.1779031037552664, 0.18521434135005188, 0.1634483392899625, 0.18017629577877292, 0.17745032738937772, 0.07468341325814631, 0.06932242659854815, 0.05757423719149668, 0.07470362648640805, 0.06235505821547538, 0.061000130072446646, 0.07346844498321659, 0.07108602031001898, 0.08304674486950248, 0.0739546393354622, 0.04811665566272627, 0.06743692417185831, 0.0717194171541008, 0.05896828780462382, 0.07309388257602967, 0.06373992174522214, 0.07854957910877713, 0.061051286914075575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06677496186336085, 0.04645349292076084, 0.059407298441785716, 0.03752919401164112, 0.05591838523429282, 0.09288450014682292, 0.05742297379016781, 0.05781880131141537, 0.05708373486668972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02675696528456628, 0.018787108108778705, 0.02643904506720096, 0.04412654392526094, 0.03196954683009712, 0.027996823125537085, 0.04127984866452006, 0.032784727050299445, 0.04175094285713765, 0.2985534557459708, 0.2761881289578664, 0.29879244622840984, 0.28182412995595296, 0.287835967944862, 0.29497821715191486, 0.27777570692331377, 0.2727594261348111, 0.28108829921044975, 0.08486863847992354, 0.07192620324939292, 0.06719370271282732, 0.06320420440353158, 0.07327858965687661, 0.06947636621606756, 0.06960786789117024, 0.075348630127137, 0.06686980770578377, 0.11486391261669382, 0.1430437872326643, 0.1482192687862247, 0.15301042862326908, 0.13484028714813867, 0.1266486832669741, 0.12438866792786651, 0.12089529593023784, 0.12208186602682614, 0.17354064635617938, 0.19758472482605105, 0.19083888694967044, 0.182669455527242, 0.19405777254477374, 0.1966262618797775, 0.19588727490592528, 0.2177416239265474, 0.21178807428792257, 0.12107399378796413, 0.13001933023014567, 0.12489416731768377, 0.1427407063569155, 0.13468273603718028, 0.1540363247336336, 0.14280326215946282, 0.14298862296822956, 0.1329255517935508, 0.18742741597982981, 0.16833552760675052, 0.18565036567425508, 0.18079031733826234, 0.1697844378550979, 0.17661934490442677, 0.1656661128315633, 0.16346038815077446, 0.19674563035914028, 0.15668247175166672, 0.16653074036128024, 0.17059213869314804, 0.16692833026896603, 0.16406356902139874, 0.16849870908623465, 0.16743565489549472, 0.1547317640262057, 0.1709567591631609, 0.15262845917288193, 0.14559557494135333, 0.19896696574505457, 0.21761069582971115, 0.19954608184961575, 0.23184974676634773, 0.1351796565441613, 0.19410881789062517, 0.11325220987062368, 0.1593474828613276, 0.160270665800904, 0.17845232424520696, 0.16148235418607004, 0.13169785569052983, 0.18858858220285524, 0.16776530651478405, 0.16598555661185743, 0.16528476270303294, 0.16994707776451945, 0.1840488195672333, 0.17794599598079308, 0.1803651065197508, 0.20671250538832275, 0.18151825697890012, 0.175478112430409, 0.1787257812154408, 0.17154819722023673, 0.06237226960405318, 0.058072832113520434, 0.06824970148362242, 0.0689170299808084, 0.06762229863316693, 0.059260706514180694, 0.06198602224246419, 0.06790422336025437, 0.06469727853625884]}, "mutation_prompt": null}
{"id": "e4e69a01-ec81-4978-adb3-0faa121669ae", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = np.array([-5.0, 5.0])\n        self.population_size = min(10 * dim, budget // 5)\n        self.mutation_factor = 0.5\n        self.crossover_rate = 0.7\n        self.populations = 3\n        self.evaluations = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n    \n    def differential_mutation(self, population):\n        indices = np.random.choice(np.arange(self.population_size), size=3, replace=False)\n        a, b, c = population[indices]\n        mutant_vector = a + self.mutation_factor * (b - c)\n        return np.clip(mutant_vector, self.bounds[0], self.bounds[1])\n    \n    def crossover(self, target, mutant):\n        crossover = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover, mutant, target)\n        return trial_vector\n    \n    def select(self, target, trial, func):\n        target_fitness = func(target)\n        trial_fitness = func(trial)\n        self.evaluations += 2\n        return (trial, trial_fitness) if trial_fitness < target_fitness else (target, target_fitness)\n\n    def __call__(self, func):\n        populations = [self.initialize_population() for _ in range(self.populations)]\n        best_solution = None\n        best_fitness = float('inf')\n        \n        while self.evaluations < self.budget:\n            for population in populations:\n                for i in range(self.population_size):\n                    target = population[i]\n                    mutant = self.differential_mutation(population)\n                    trial = self.crossover(target, mutant)\n                    best_candidate, candidate_fitness = self.select(target, trial, func)\n                    population[i] = best_candidate\n                    \n                    if candidate_fitness < best_fitness:\n                        best_solution, best_fitness = best_candidate, candidate_fitness\n\n                    if self.evaluations >= self.budget:\n                        break\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_solution", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Mutation Strategy leveraging multi-population dynamics to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "451040c3-1591-45ee-bd43-e1dcd055042c", "metadata": {"aucs": [0.30759027227542624, 0.2949613511836343, 0.2953829157982727, 0.32844146975046573, 0.3114728190195577, 0.3145326954420876, 0.3013807025690035, 0.3072522797847562, 0.3048269420644756, 0.03708942463863163, 0.042323804856382985, 0.03217924224280433, 0.045324886632720496, 0.03649078021881014, 0.04125168679206204, 0.02514411834540098, 0.03537764732648707, 0.03019405860173008, 0.08131293385838323, 0.06977395709903522, 0.06924433093292448, 0.07760923057461933, 0.0789552283583067, 0.07595726710829709, 0.08861023206911034, 0.07706377435887679, 0.07983968250150097, 0.06752975636179359, 0.06543016097450183, 0.07054123298517334, 0.07000766138923298, 0.0636200744472355, 0.06711627342530824, 0.07818720573598326, 0.09347731772122747, 0.06986757581625658, 0.7517430522466262, 0.8059696324285347, 0.805827063962658, 0.8355684208332119, 0.7680263018896414, 0.7523424707222623, 0.8232821742973003, 0.747122246766114, 0.8386314177989593, 0.11939661198934737, 0.10517984220848142, 0.09127563540814809, 0.11552176480172616, 0.09382720860134519, 0.09889820722495768, 0.10675324424415145, 0.11510267181142098, 0.12175814653820671, 0.19436839002136808, 0.17818148332107153, 0.1687739610212482, 0.18552096032593468, 0.1779031037552664, 0.18521434135005188, 0.1634483392899625, 0.18017629577877292, 0.17745032738937772, 0.07468341325814631, 0.06932242659854815, 0.05757423719149668, 0.07470362648640805, 0.06235505821547538, 0.061000130072446646, 0.07346844498321659, 0.07108602031001898, 0.08304674486950248, 0.0739546393354622, 0.04811665566272627, 0.06743692417185831, 0.0717194171541008, 0.05896828780462382, 0.07309388257602967, 0.06373992174522214, 0.07854957910877713, 0.061051286914075575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06677496186336085, 0.04645349292076084, 0.059407298441785716, 0.03752919401164112, 0.05591838523429282, 0.09288450014682292, 0.05742297379016781, 0.05781880131141537, 0.05708373486668972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02675696528456628, 0.018787108108778705, 0.02643904506720096, 0.04412654392526094, 0.03196954683009712, 0.027996823125537085, 0.04127984866452006, 0.032784727050299445, 0.04175094285713765, 0.2985534557459708, 0.2761881289578664, 0.29879244622840984, 0.28182412995595296, 0.287835967944862, 0.29497821715191486, 0.27777570692331377, 0.2727594261348111, 0.28108829921044975, 0.08486863847992354, 0.07192620324939292, 0.06719370271282732, 0.06320420440353158, 0.07327858965687661, 0.06947636621606756, 0.06960786789117024, 0.075348630127137, 0.06686980770578377, 0.11486391261669382, 0.1430437872326643, 0.1482192687862247, 0.15301042862326908, 0.13484028714813867, 0.1266486832669741, 0.12438866792786651, 0.12089529593023784, 0.12208186602682614, 0.17354064635617938, 0.19758472482605105, 0.19083888694967044, 0.182669455527242, 0.19405777254477374, 0.1966262618797775, 0.19588727490592528, 0.2177416239265474, 0.21178807428792257, 0.12107399378796413, 0.13001933023014567, 0.12489416731768377, 0.1427407063569155, 0.13468273603718028, 0.1540363247336336, 0.14280326215946282, 0.14298862296822956, 0.1329255517935508, 0.18742741597982981, 0.16833552760675052, 0.18565036567425508, 0.18079031733826234, 0.1697844378550979, 0.17661934490442677, 0.1656661128315633, 0.16346038815077446, 0.19674563035914028, 0.15668247175166672, 0.16653074036128024, 0.17059213869314804, 0.16692833026896603, 0.16406356902139874, 0.16849870908623465, 0.16743565489549472, 0.1547317640262057, 0.1709567591631609, 0.15262845917288193, 0.14559557494135333, 0.19896696574505457, 0.21761069582971115, 0.19954608184961575, 0.23184974676634773, 0.1351796565441613, 0.19410881789062517, 0.11325220987062368, 0.1593474828613276, 0.160270665800904, 0.17845232424520696, 0.16148235418607004, 0.13169785569052983, 0.18858858220285524, 0.16776530651478405, 0.16598555661185743, 0.16528476270303294, 0.16994707776451945, 0.1840488195672333, 0.17794599598079308, 0.1803651065197508, 0.20671250538832275, 0.18151825697890012, 0.175478112430409, 0.1787257812154408, 0.17154819722023673, 0.06237226960405318, 0.058072832113520434, 0.06824970148362242, 0.0689170299808084, 0.06762229863316693, 0.059260706514180694, 0.06198602224246419, 0.06790422336025437, 0.06469727853625884]}, "mutation_prompt": null}
