{"id": "1496b10c-88e2-402b-8f84-7d14ce8fdff2", "solution": "import numpy as np\n\nclass HPSO_ADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.7\n        self.cognitive_constant = 1.5\n        self.social_constant = 1.5\n        self.F = 0.8  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        self.velocities = np.random.uniform(\n            -1, 1, (self.population_size, self.dim)\n        )\n        self.personal_best = self.population.copy()\n        self.global_best = self.population[np.argmin([float('inf')] * self.population_size)]\n        self.fitness = np.array([float('inf')] * self.population_size)\n        self.best_fitness = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_constant * r1 * (self.personal_best[i] - self.population[i])\n                    + self.social_constant * r2 * (self.global_best - self.population[i])\n                )\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n                if fitness < self.fitness[i]:\n                    self.fitness[i] = fitness\n                    self.personal_best[i] = self.population[i].copy()\n                    \n                    # Update global best\n                    if fitness < self.best_fitness:\n                        self.best_fitness = fitness\n                        self.global_best = self.population[i].copy()\n                \n                if self.evaluations >= self.budget:\n                    break\n            \n            # Adaptive Differential Evolution Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.random.rand(self.dim) < self.CR\n                offspring = np.where(trial, mutant, self.population[i])\n                \n                # Evaluate fitness of offspring\n                fitness = func(offspring)\n                self.evaluations += 1\n                \n                if fitness < self.fitness[i]:\n                    self.population[i] = offspring\n                    self.fitness[i] = fitness\n                    if fitness < self.best_fitness:\n                        self.best_fitness = fitness\n                        self.global_best = offspring\n                \n                if self.evaluations >= self.budget:\n                    break\n        \n        return self.global_best", "name": "HPSO_ADE", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Evolution (HPSO-ADE) combines exploration capabilities of PSO and adaptive mutation strategies of DE for enhanced convergence.", "configspace": "", "generation": 0, "fitness": 0.2889678913547637, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.812676593790951, 0.8253289186584308, 0.8214992265991949, 0.8202430513740916, 0.8254865280657036, 0.8300271346117228, 0.8179122427105714, 0.8200713872027392, 0.8034056164454598, 0.6266333973611008, 0.5424375483619257, 0.5438348637075515, 0.6483752652973294, 0.5174470912182312, 0.622936447617839, 0.583628925082409, 0.5927100087156021, 0.6039421096811982, 0.3105745314881082, 0.156728339700817, 0.16601759937543048, 0.24884166389400797, 0.15792532888008914, 0.144193435877218, 0.14982800395194462, 0.10879361829445133, 0.14394850328441933, 0.11854102318956083, 0.09787004768652352, 0.1392657638045468, 0.09887865580964095, 0.14345957797716802, 0.09960734883171063, 0.12548732232932636, 0.1177140317878167, 0.14357228667037691, 0.9886669253419228, 0.988366918338575, 0.9836204260296961, 0.9935032406268303, 0.9848145519462782, 0.991935680646802, 0.988471313663771, 0.9925718518518123, 0.9870481371797944, 0.5446895602059345, 0.5143002907745805, 0.49685452596085466, 0.4381985986963859, 0.47548044211420726, 0.24847997854834136, 0.5935337104464087, 0.17186405232891033, 0.5167243852777913, 0.2993552406320108, 0.19661345005828046, 0.22336831500409116, 0.2495912778061412, 0.24005251788987902, 0.3715211527698642, 0.17752069855412278, 0.17544233152322064, 0.7702431320903855, 0.1729939449047766, 0.1760171834694555, 0.19812264439731042, 0.19021878355470268, 0.12705381502825908, 0.12857908554353614, 0.19904889205457954, 0.1312359778130674, 0.18550912049813573, 0.21148153455244978, 0.19028292450065398, 0.18238768122430182, 0.21138822215016095, 0.13167531264399424, 0.14228179528624496, 0.12709809498020663, 0.09456964700451531, 0.20157363808807727, 9.999999999998899e-05, 9.999999999998899e-05, 0.030240962721808873, 0.004448260518632341, 0.0011922972598771286, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029420329270949508, 0.05838361392470137, 0.09397583077371197, 0.08399178236015614, 0.02270890975762907, 0.09930297696962698, 0.07135943514829701, 0.03928084265325582, 0.0703832760677704, 0.04157633063868138, 0.050899222660962695, 9.999999999998899e-05, 0.07375579869288007, 0.07188580052815308, 0.08852123511094923, 0.0627467089769903, 0.1307827418734656, 0.06568224718452198, 0.11106523153316417, 0.22048029046098672, 0.16723197720963656, 0.08050586685103811, 0.14976430604000157, 0.11811512300550153, 0.07965827477181808, 0.0783503443495327, 0.055086831644878265, 0.4970834419097838, 0.5356087635512078, 0.5272054586990969, 0.46047736180711907, 0.5397231259454585, 0.5342468678117678, 0.5068383985180237, 0.5155158998298912, 0.5268785294822144, 0.1208448406198398, 0.06609821093311097, 0.06924825890532138, 0.12567577869469226, 0.09310285194064905, 0.11652590953687014, 0.15324394739836267, 0.1141756596611796, 0.1374048777711081, 0.1578261825849291, 0.23509694507074086, 0.21070191204913247, 0.23846254891225827, 0.20754331084858135, 0.29312808993697015, 0.1640645388572144, 0.18145816801319237, 0.21165514689681775, 0.3532566351695152, 0.27248616844360696, 0.30261503399717804, 0.3910259713396673, 0.3843677510930139, 0.3911699520395613, 0.3334963401265375, 0.43831737534272264, 0.3901869306540391, 0.24776095584842006, 0.17433853274854028, 0.24140287585860243, 0.2922838000345235, 0.35009358135809365, 0.26730604429758, 0.20757018332041854, 0.289549145086642, 0.35411217835856545, 0.21910605364579527, 0.24034076713925467, 0.22122857577187105, 0.20577025849582398, 0.1951330497877657, 0.2049108405283928, 0.20051535701708034, 0.1970180511377363, 0.23296395459861574, 0.1825585374898231, 0.48550603502545464, 0.19419321112938304, 0.2248555436218833, 0.24475391111912537, 0.1994370829179506, 0.19069015919476484, 0.19790311790962312, 0.6333488117008488, 0.16346114674747636, 0.162505856525626, 0.17191530172576908, 0.8087647462612869, 0.16799242058495334, 0.8630650547479728, 0.8644109952874298, 0.14707530304524097, 0.1633657287398308, 0.8241393866428955, 0.21302273581881337, 0.1269949338518369, 0.16560989934276182, 0.20750546627905753, 0.2064082411961249, 0.22484457564630067, 0.1676132117386263, 0.32494932254587694, 0.19748934233991, 0.1817730669132991, 0.20459612028328678, 0.1951500647026707, 0.19018256107381104, 0.17607264730578176, 0.17890399754043795, 0.20257283854421848, 0.1952941386003808, 0.09769761357579443, 0.1451068992865312, 0.0833178385925708, 0.07850084738231577, 0.09547117409214356, 0.08066966078451365, 0.09326247074223104, 0.0927544269334668, 0.07750540537766337]}, "mutation_prompt": null}
{"id": "f3f48b19-ee9d-4641-ac83-8687f6870cd2", "solution": "import numpy as np\n\nclass HPSO_ADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.7\n        self.cognitive_constant = 1.5\n        self.social_constant = 1.5\n        self.F = 0.8  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        self.velocities = np.random.uniform(\n            -1, 1, (self.population_size, self.dim)\n        )\n        self.personal_best = self.population.copy()\n        self.global_best = self.population[np.argmin([float('inf')] * self.population_size)]\n        self.fitness = np.array([float('inf')] * self.population_size)\n        self.best_fitness = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_constant * r1 * (self.personal_best[i] - self.population[i])\n                    + self.social_constant * r2 * (self.global_best - self.population[i])\n                )\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate fitness\n                fitness = func(self.population[i])\n                self.evaluations += 1\n                if fitness < self.fitness[i]:\n                    self.fitness[i] = fitness\n                    self.personal_best[i] = self.population[i].copy()\n                    \n                    # Update global best\n                    if fitness < self.best_fitness:\n                        self.best_fitness = fitness\n                        self.global_best = self.population[i].copy()\n                \n                if self.evaluations >= self.budget:\n                    break\n            \n            # Adaptive Differential Evolution Update\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                self.F = 0.5 + 0.3 * np.cos(2 * np.pi * self.evaluations / self.budget)  # Dynamic adaptation\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.random.rand(self.dim) < self.CR\n                offspring = np.where(trial, mutant, self.population[i])\n                \n                # Evaluate fitness of offspring\n                fitness = func(offspring)\n                self.evaluations += 1\n                \n                if fitness < self.fitness[i]:\n                    self.population[i] = offspring\n                    self.fitness[i] = fitness\n                    if fitness < self.best_fitness:\n                        self.best_fitness = fitness\n                        self.global_best = offspring\n                \n                if self.evaluations >= self.budget:\n                    break\n        \n        return self.global_best", "name": "HPSO_ADE", "description": "Enhanced HPSO-ADE with dynamic adaptation of DE's mutation factor and crossover probability for better exploration-exploitation balance.", "configspace": "", "generation": 1, "fitness": 0.28997219759239484, "feedback": "", "error": "", "parent_id": "1496b10c-88e2-402b-8f84-7d14ce8fdff2", "metadata": {"aucs": [0.8294150443906099, 0.8290856742245274, 0.8333732702214883, 0.834657096906237, 0.8139490606232253, 0.8480700720503771, 0.8237608903256126, 0.8088613747030908, 0.7981983288498686, 0.6161288662543611, 0.3928048074491386, 0.5217504361142461, 0.614732983036095, 0.5261131382597019, 0.6365235567431498, 0.6511488297960366, 0.46479519892397825, 0.5606903874786264, 0.1387294436471338, 0.15575469921651852, 0.14071474831823017, 0.15661454147266263, 0.11599763666004348, 0.12381643513373419, 0.16211735165003427, 0.11352120420958456, 0.1443497821892925, 0.11201556845820437, 0.11821209616328165, 0.1295213315546775, 0.14980681419812047, 0.13278372751000422, 0.11125638329025878, 0.12644851547416824, 0.09849821307261242, 0.14768369696779193, 0.9886665594354273, 0.9883668156949004, 0.9836203161755226, 0.9935032298529255, 0.9848145208825997, 0.9919355446159001, 0.9884713097765458, 0.9925715156331042, 0.9870481112102789, 0.44997200554735595, 0.5461293934589795, 0.5269537848420891, 0.47789325081714795, 0.40723588465856697, 0.48924222939379347, 0.567300555152173, 0.39203479132112196, 0.49887552176345784, 0.22815007088104378, 0.20303364164498117, 0.2157971387348443, 0.24160387127594085, 0.1636662323308381, 0.871455901833105, 0.2901320389838179, 0.35088792666891855, 0.23082873757404732, 0.171639829840878, 0.1766628477065022, 0.18199456301344263, 0.18595006642416356, 0.12677877560326378, 0.12853580742856485, 0.19157674355283005, 0.23083766201355804, 0.1931516063220432, 0.21432859098086943, 0.17706204903158718, 0.17939518607816995, 0.2081607367688615, 0.17938508165798284, 0.12644396518517642, 0.12908824947090347, 0.10582542539760142, 0.20266427927402908, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005340692088581123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05194436850498896, 0.0979980943239811, 0.10395318636151829, 0.07407800145558174, 0.03024985800078306, 0.08108420587108123, 0.10311792006687903, 0.04605905968769819, 0.05439372724151814, 0.044767770727219935, 0.05157607510120321, 0.07176517361655843, 0.07369597324846933, 0.07070211074620969, 0.08807130486814552, 0.06567763726555242, 0.12334608408409209, 0.06586894649293795, 0.10683437788798911, 0.1542847747263164, 0.16330105381916926, 0.10996078706552981, 0.1566980524424031, 0.178684219579071, 0.0795875963177215, 0.0767864989126047, 0.05596520934976412, 0.4713127063702377, 0.49167535725220946, 0.4981918799399435, 0.5173192534439908, 0.5050878093728479, 0.5436268485909219, 0.5235201932453784, 0.478903323680695, 0.5126723995500233, 0.10391809828807619, 0.10915231981332962, 0.12203166419155165, 0.11320841063865972, 0.12154302417389828, 0.09812375368772797, 0.10935490188963193, 0.10096456415623511, 0.11068029365909349, 0.16838006618884171, 0.28548851548914467, 0.21560715613788206, 0.22077796895135693, 0.23407534562383214, 0.33600040564716527, 0.2705424652872417, 0.2879045152496372, 0.15700478376606464, 0.3114428025525168, 0.2987162357481039, 0.36763034858456844, 0.4034587316344873, 0.3929321164970131, 0.3141860183215077, 0.3388616392342043, 0.2992577078172147, 0.31110809236731096, 0.20855458258399628, 0.14889236677483386, 0.34835585888046405, 0.33172623107548915, 0.26657281165029556, 0.29138570096586747, 0.21747964056358937, 0.24454388689435036, 0.24101964779217488, 0.21544042249200368, 0.2540870711111586, 0.25101284990107475, 0.2584588736573622, 0.2075824995735508, 0.19413488341457186, 0.18727292420301023, 0.2084224766456848, 0.1844395116238653, 0.1930043178085219, 0.24285353160626533, 0.6436230278703697, 0.22525789339583324, 0.24949228174125904, 0.20304061351296132, 0.21910155663065034, 0.18349848687188175, 0.6299306526104341, 0.16421949548885184, 0.16308459479223403, 0.6129645696890974, 0.7883907281089498, 0.1679964670155839, 0.8547680524978563, 0.7379079017191061, 0.14793194080893168, 0.17621464500097261, 0.6512347152962801, 0.2130256785844804, 0.12701348158848536, 0.16559922702647945, 0.2085622657563223, 0.20731337336605926, 0.16739560225682693, 0.16761890290011672, 0.2117953442210213, 0.1862660105876316, 0.18663647928092097, 0.18567972402084965, 0.19633712099542655, 0.22275760912867637, 0.21685555546776336, 0.19984156060360758, 0.18885488477651657, 0.18154414498577065, 0.08950961183234973, 0.10938775995826222, 0.08483578928133106, 0.0861875700527851, 0.08133259061459008, 0.09311848447840243, 0.09777038888945411, 0.08277279467783483, 0.08925696401324434]}, "mutation_prompt": null}
