{"id": "2ec6e902-b433-4bfc-9a43-353d4b646605", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "7a9d4023-08e0-40aa-80e7-8905ff841acb", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < self.crossover_rate\n                trial[crossover_points] = mutant[crossover_points]\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                if self.evaluations >= self.budget:\n                    break\n            self.adapt_parameters()\n        return self.best_solution()\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n    def adapt_parameters(self):\n        self.mutation_factor = np.clip(self.mutation_factor + np.random.normal(0, 0.1), 0.5, 1.0)\n        self.crossover_rate = np.clip(self.crossover_rate + np.random.normal(0, 0.1), 0.5, 1.0)\n\n    def best_solution(self):\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "A Differential Evolution (DE) based optimizer that adapts mutation and crossover rates dynamically to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": 0.2661109920231678, "feedback": "", "error": "", "parent_id": "2ec6e902-b433-4bfc-9a43-353d4b646605", "metadata": {"aucs": [0.648143013690291, 0.681186006244376, 0.7316634707405603, 0.6847178718909686, 0.7187054359143148, 0.7505023830594122, 0.6743900912960207, 0.7060742073555342, 0.7420314687700426, 0.46362189951675825, 0.48164591076966956, 0.5240004705495108, 0.46784125934083187, 0.46790468583001643, 0.5520124271690094, 0.4623404342797812, 0.4446986293429315, 0.5102636910598755, 0.12481287711528022, 0.12759664448303487, 0.15618286251970925, 0.13301984674172795, 0.14547400329233495, 0.1231432549081325, 0.1196094961276174, 0.13320805585564177, 0.13372563766869405, 0.10820928311589872, 0.13437001342561494, 0.11583588286187219, 0.1242566847904718, 0.14473305155187333, 0.10712627063336111, 0.10919783997810395, 0.11819643743349206, 0.10926125974842837, 0.946354074561515, 0.9478512018871239, 0.9371799114828189, 0.9424817440064858, 0.9504335743002037, 0.9400426085455802, 0.9849982238334991, 0.9661130404051551, 0.9447904324096, 0.2618273746171972, 0.2550905643904915, 0.3215496354682208, 0.2763609682476723, 0.2941815407941847, 0.3265858060272111, 0.287980242306345, 0.28511601154322364, 0.3441298400573143, 0.44743206698989046, 0.37634355572337785, 0.6521239527776748, 0.41599958106906765, 0.463373288246695, 0.684997082591541, 0.361852671025943, 0.4267908825294673, 0.6921805540892945, 0.17992856534423862, 0.14075914758204056, 0.19947079231547638, 0.16180807008756581, 0.1569301434217648, 0.21151497187573598, 0.17554565431714997, 0.1744030874724073, 0.18040745651988965, 0.16586251079976133, 0.15401137934956766, 0.21531547344367785, 0.17330045389934456, 0.12437328286189986, 0.1956121901095188, 0.16672399003839677, 0.15530857411110432, 0.18290778791810658, 0.06733519114115083, 0.018459733029717373, 0.15617813244532464, 0.07785349403510211, 0.03539486866758523, 0.12170851539994765, 0.05928755507378869, 0.024825642166098394, 0.11384855622595624, 0.1595465246652057, 0.16154182488078805, 0.30019086787541693, 0.11533277942686604, 0.138525853110253, 0.2482863243966822, 0.19602582700200288, 0.14953721656676566, 0.2640689309685724, 0.012101397150046211, 0.007890734700431445, 0.004372620737950084, 0.02685732860899903, 9.999999999998899e-05, 0.05953631474117371, 0.034842708643265774, 0.011800752972132122, 0.023282110330373862, 0.12031987655332232, 0.10821057216111807, 0.15168446443530048, 0.12891336562490796, 0.136869300789774, 0.18086930010065383, 0.14274765123377042, 0.12712492746366244, 0.1600954648797306, 0.4788677958606592, 0.4617308667417269, 0.5059298765001874, 0.4727048175872751, 0.4778574976687193, 0.5291905949588752, 0.47049408673643156, 0.4607971549163309, 0.48334755792921746, 0.08616891456480558, 0.09959111002882148, 0.11111098204059111, 0.08677948143208014, 0.09855860596013988, 0.09668194677710706, 0.09066442427885124, 0.07883444714376764, 0.08494975575248487, 0.19396319539672613, 0.14573189336313985, 0.12236547307945989, 0.16519174501054312, 0.14219968846278175, 0.1507976629451414, 0.15564419093728432, 0.13411156619034248, 0.14008143464799416, 0.27340091240151887, 0.26057644103526656, 0.30557075790970445, 0.2659003291434797, 0.24460264563431622, 0.28278355551339385, 0.2819280043050606, 0.30227070815077006, 0.34566195523899745, 0.19656042433571763, 0.18806667540794686, 0.23806304329752837, 0.1897141168701173, 0.18127966079005808, 0.21714025627970712, 0.19524400765634786, 0.21833533115466153, 0.25059504233092034, 0.18574532250026687, 0.2013398710252291, 0.19133699681787564, 0.17198785064506972, 0.17790654588709365, 0.1900498855111712, 0.19791027196165356, 0.18889685866116168, 0.2048835830132727, 0.18069757047295076, 0.19735965094958585, 0.18271743008978936, 0.18136433550878717, 0.1933291746354281, 0.1951824395757411, 0.18250190087922824, 0.1950862925317144, 0.2019152107102763, 0.5390510096272181, 0.15428613520151935, 0.1494501135568549, 0.16917034900972516, 0.17227032287642052, 0.17282975117140553, 0.32459621433514485, 0.19993748887743346, 0.6852518704853376, 0.16556134759769991, 0.5483233068250779, 0.18425839012153966, 0.17687544642718767, 0.26762957364155326, 0.1951566368094716, 0.239083692047808, 0.520113967984746, 0.20733166367344757, 0.17394130687827203, 0.17690695054275352, 0.1887089021231243, 0.18205977478559232, 0.1773274026026569, 0.20540902171271158, 0.17699363282201408, 0.20711884611006803, 0.201872330967511, 0.07744664503763721, 0.07594415156029921, 0.08000233145017155, 0.07123064561360859, 0.073344187556595, 0.06909678743395564, 0.06973206231506812, 0.07120364520528677, 0.07459309760457034]}, "mutation_prompt": null}
