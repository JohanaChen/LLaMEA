{"id": "d3c44188-e21c-4e8e-8040-a8fb73dd24a2", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 20\n        self.c1 = 2.0  # cognitive coefficient\n        self.c2 = 2.0  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize PSO\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_positions = np.copy(pop)\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness\n            for i in range(self.pop_size):\n                score = func(pop[i])\n                evaluations += 1\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = pop[i]\n                if score < gbest_score:\n                    gbest_score = score\n                    gbest_position = pop[i]\n\n                if evaluations >= self.budget:\n                    break\n\n            # PSO update\n            r1, r2 = np.random.rand(2)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest_positions - pop) +\n                          self.c2 * r2 * (gbest_position - pop))\n            pop = pop + velocities\n            pop = np.clip(pop, self.bounds[0], self.bounds[1])\n            \n            # DE mutation and crossover\n            for i in range(self.pop_size):\n                indices = np.random.choice(range(self.pop_size), 3, replace=False)\n                a, b, c = pop[indices[0]], pop[indices[1]], pop[indices[2]]\n                donor_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(pop[i])\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_prob:\n                        trial_vector[j] = donor_vector[j]\n\n                trial_vector = np.clip(trial_vector, self.bounds[0], self.bounds[1])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                \n                if trial_score < pbest_scores[i]:\n                    pop[i] = trial_vector\n                    pbest_scores[i] = trial_score\n                    pbest_positions[i] = trial_vector\n                    if trial_score < gbest_score:\n                        gbest_score = trial_score\n                        gbest_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return gbest_position, gbest_score", "name": "HybridPSODE", "description": "A hybrid swarm-based algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) for enhanced exploration and exploitation capabilities.", "configspace": "", "generation": 0, "fitness": 0.2545324982295265, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8396655498404723, 0.1260106611309587, 0.8880297164162594, 0.1828894559801385, 0.81390206539309, 0.1888891899089995, 0.8347735558349004, 0.823158225790509, 0.8946534015672206, 9.999999999998899e-05, 9.999999999998899e-05, 0.04219213763910479, 0.6366150391673826, 0.394069508594419, 0.6250350319781723, 9.999999999998899e-05, 0.7238139351266804, 0.7014213577202821, 0.10924203691524503, 0.11036844278123192, 0.13515594943951115, 0.11201545490372444, 0.06587115962958179, 0.048343709627671205, 0.0835753106451832, 0.043621285886109584, 0.13866004013194455, 0.082742457778605, 0.10717903776623461, 0.07425033943303716, 0.044966709300762187, 0.07747563910237965, 0.15939827902949277, 0.005025728118663975, 0.11755767701778208, 0.12126358657991698, 0.9911271797021057, 0.9831634406495209, 0.9838645053130199, 0.9513434581986945, 0.9841571730338573, 0.9834853945442108, 0.9947406720634596, 0.987149891645156, 0.9868082423420914, 0.05456782661862458, 0.05347276410838753, 0.060049119015796015, 0.1514286236012815, 0.15172361293120395, 0.39516344833659145, 0.12073706148698582, 0.08873144009634748, 9.999999999998899e-05, 0.17057833869925632, 0.6565371044131316, 0.22425510818252503, 0.07185568412945686, 0.1821652111664599, 0.14364822519570986, 0.07924530851685818, 0.1309456829324226, 0.06823882364045131, 0.124341611320548, 0.5380329106797235, 0.12643680471982188, 9.999999999998899e-05, 0.5221959786790991, 0.1317592943006739, 0.6020460197694553, 0.6275039771315613, 0.2262044103168328, 0.38898985942857167, 9.999999999998899e-05, 0.35630622283954283, 0.5940826343908034, 0.49519592473534335, 0.21493374099326357, 0.46155823493716375, 0.4069885497658713, 0.10684463149146772, 9.999999999998899e-05, 9.999999999998899e-05, 0.06875791867106473, 9.999999999998899e-05, 9.999999999998899e-05, 0.018836300782160142, 0.18538178292883567, 0.01001162945063061, 0.08094890555879375, 0.04567574013123499, 0.7392379713616415, 0.29793536571228263, 0.15132178330529134, 0.046281014366045925, 0.02478117802619817, 0.08648293711892296, 0.0939217409076929, 0.12183384280074128, 9.999999999998899e-05, 0.11832142695566095, 0.2841250488328432, 9.999999999998899e-05, 0.09621637220925128, 0.09354011370258453, 0.10402408552146314, 0.10291562608066596, 0.07900158908684174, 0.05931944465813854, 0.15790829422550046, 0.5453537301026463, 9.999999999998899e-05, 9.999999999998899e-05, 0.006686629869424032, 0.08193394507946883, 9.999999999998899e-05, 0.08411321939694483, 0.7380857821981965, 0.8019869753331232, 0.6990109967039156, 0.13805937684030922, 0.18153759264600622, 0.20843929941602368, 0.6788230901553696, 0.7636770035238384, 0.7247526993875693, 0.06701743300932161, 0.08520796622556503, 0.0505766684697464, 0.11617189644183323, 0.09079474746349991, 0.18217190357334334, 0.06287842529972187, 0.09135445955566335, 0.07017273480679664, 0.16032731676044554, 0.26064864318579517, 0.16916136380212643, 0.24900220253925576, 0.36492208146944904, 0.1467400461018078, 0.188630920663589, 0.1357298561662943, 0.21097184455652085, 0.19900071315541668, 0.280943355449798, 0.47034213652428125, 0.26078559605348517, 0.23820966675362232, 0.2513908280165009, 0.3580625379845417, 0.4878423957007657, 0.1100794116356939, 0.24224793452532067, 0.1827961782773747, 0.20953698341822435, 0.2324459372475154, 0.32678171964666847, 0.23603610493314786, 0.20714463726386068, 0.26780943768406396, 0.08187464644770348, 0.21014428163814058, 0.2620186659823789, 0.21151079173135623, 0.20884148182355133, 0.15996042221203188, 0.19755814790113801, 0.20127514666893953, 0.2034933900890885, 0.21516108371135112, 0.19762462244103474, 0.2438259902899652, 0.19502156299396578, 0.1955405144003094, 0.2056566252221239, 0.17965985507863602, 0.16925044144064416, 0.24515900917125077, 0.1869709141134308, 0.8329072550928571, 0.12756397636149452, 0.1546293859383826, 0.17088587790716103, 0.2014678175069795, 0.20078174697039042, 0.0990844959293512, 0.16962736592335825, 0.16287107167275228, 0.07911613869857359, 0.16672408183187293, 0.1273872693469177, 0.20846706497915968, 0.16925262297653576, 0.21015477008891859, 0.20397362126539964, 0.3018935730590899, 0.8506488149006473, 0.2383240624591526, 0.260716381280082, 0.21336924618135322, 0.18346155240401463, 0.25381006928422056, 0.21070818679192038, 0.21545638903630115, 0.23285038425541582, 0.20005619828427057, 0.10920956516154479, 0.08658906124584942, 0.08493195171198109, 0.07473029643296336, 0.10409170348960184, 0.10523094365157926, 0.10921363732310496, 0.08156234106423477, 0.09761074406585102]}, "mutation_prompt": null}
{"id": "4ef79f0f-2b53-4e7c-903e-3ca7bb32e773", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.pop_size = 20\n        self.c1 = 2.0  # cognitive coefficient\n        self.c2 = 2.0  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize PSO\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_positions = np.copy(pop)\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness\n            for i in range(self.pop_size):\n                score = func(pop[i])\n                evaluations += 1\n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = pop[i]\n                if score < gbest_score:\n                    gbest_score = score\n                    gbest_position = pop[i]\n\n                if evaluations >= self.budget:\n                    break\n\n            # PSO update\n            r1, r2 = np.random.rand(2)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest_positions - pop) +\n                          self.c2 * r2 * (gbest_position - pop))\n            pop = pop + velocities\n            pop = np.clip(pop, self.bounds[0], self.bounds[1])\n            \n            # DE mutation and crossover\n            for i in range(self.pop_size):\n                indices = np.random.choice(range(self.pop_size), 3, replace=False)\n                a, b, c = pop[indices[0]], pop[indices[1]], pop[indices[2]]\n                donor_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(pop[i])\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_prob:\n                        trial_vector[j] = donor_vector[j]\n\n                trial_vector = np.clip(trial_vector, self.bounds[0], self.bounds[1])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                \n                if trial_score < pbest_scores[i]:\n                    pop[i] = trial_vector\n                    pbest_scores[i] = trial_score\n                    pbest_positions[i] = trial_vector\n                    if trial_score < gbest_score:\n                        gbest_score = trial_score\n                        gbest_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return gbest_position, gbest_score", "name": "HybridPSODE", "description": "A hybrid swarm-based algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) for enhanced exploration and exploitation capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d3c44188-e21c-4e8e-8040-a8fb73dd24a2", "metadata": {"aucs": [0.8396655498404723, 0.1260106611309587, 0.8880297164162594, 0.1828894559801385, 0.81390206539309, 0.1888891899089995, 0.8347735558349004, 0.823158225790509, 0.8946534015672206, 9.999999999998899e-05, 9.999999999998899e-05, 0.04219213763910479, 0.6366150391673826, 0.394069508594419, 0.6250350319781723, 9.999999999998899e-05, 0.7238139351266804, 0.7014213577202821, 0.10924203691524503, 0.11036844278123192, 0.13515594943951115, 0.11201545490372444, 0.06587115962958179, 0.048343709627671205, 0.0835753106451832, 0.043621285886109584, 0.13866004013194455, 0.082742457778605, 0.10717903776623461, 0.07425033943303716, 0.044966709300762187, 0.07747563910237965, 0.15939827902949277, 0.005025728118663975, 0.11755767701778208, 0.12126358657991698, 0.9911271797021057, 0.9831634406495209, 0.9838645053130199, 0.9513434581986945, 0.9841571730338573, 0.9834853945442108, 0.9947406720634596, 0.987149891645156, 0.9868082423420914, 0.05456782661862458, 0.05347276410838753, 0.060049119015796015, 0.1514286236012815, 0.15172361293120395, 0.39516344833659145, 0.12073706148698582, 0.08873144009634748, 9.999999999998899e-05, 0.17057833869925632, 0.6565371044131316, 0.22425510818252503, 0.07185568412945686, 0.1821652111664599, 0.14364822519570986, 0.07924530851685818, 0.1309456829324226, 0.06823882364045131, 0.124341611320548, 0.5380329106797235, 0.12643680471982188, 9.999999999998899e-05, 0.5221959786790991, 0.1317592943006739, 0.6020460197694553, 0.6275039771315613, 0.2262044103168328, 0.38898985942857167, 9.999999999998899e-05, 0.35630622283954283, 0.5940826343908034, 0.49519592473534335, 0.21493374099326357, 0.46155823493716375, 0.4069885497658713, 0.10684463149146772, 9.999999999998899e-05, 9.999999999998899e-05, 0.06875791867106473, 9.999999999998899e-05, 9.999999999998899e-05, 0.018836300782160142, 0.18538178292883567, 0.01001162945063061, 0.08094890555879375, 0.04567574013123499, 0.7392379713616415, 0.29793536571228263, 0.15132178330529134, 0.046281014366045925, 0.02478117802619817, 0.08648293711892296, 0.0939217409076929, 0.12183384280074128, 9.999999999998899e-05, 0.11832142695566095, 0.2841250488328432, 9.999999999998899e-05, 0.09621637220925128, 0.09354011370258453, 0.10402408552146314, 0.10291562608066596, 0.07900158908684174, 0.05931944465813854, 0.15790829422550046, 0.5453537301026463, 9.999999999998899e-05, 9.999999999998899e-05, 0.006686629869424032, 0.08193394507946883, 9.999999999998899e-05, 0.08411321939694483, 0.7380857821981965, 0.8019869753331232, 0.6990109967039156, 0.13805937684030922, 0.18153759264600622, 0.20843929941602368, 0.6788230901553696, 0.7636770035238384, 0.7247526993875693, 0.06701743300932161, 0.08520796622556503, 0.0505766684697464, 0.11617189644183323, 0.09079474746349991, 0.18217190357334334, 0.06287842529972187, 0.09135445955566335, 0.07017273480679664, 0.16032731676044554, 0.26064864318579517, 0.16916136380212643, 0.24900220253925576, 0.36492208146944904, 0.1467400461018078, 0.188630920663589, 0.1357298561662943, 0.21097184455652085, 0.19900071315541668, 0.280943355449798, 0.47034213652428125, 0.26078559605348517, 0.23820966675362232, 0.2513908280165009, 0.3580625379845417, 0.4878423957007657, 0.1100794116356939, 0.24224793452532067, 0.1827961782773747, 0.20953698341822435, 0.2324459372475154, 0.32678171964666847, 0.23603610493314786, 0.20714463726386068, 0.26780943768406396, 0.08187464644770348, 0.21014428163814058, 0.2620186659823789, 0.21151079173135623, 0.20884148182355133, 0.15996042221203188, 0.19755814790113801, 0.20127514666893953, 0.2034933900890885, 0.21516108371135112, 0.19762462244103474, 0.2438259902899652, 0.19502156299396578, 0.1955405144003094, 0.2056566252221239, 0.17965985507863602, 0.16925044144064416, 0.24515900917125077, 0.1869709141134308, 0.8329072550928571, 0.12756397636149452, 0.1546293859383826, 0.17088587790716103, 0.2014678175069795, 0.20078174697039042, 0.0990844959293512, 0.16962736592335825, 0.16287107167275228, 0.07911613869857359, 0.16672408183187293, 0.1273872693469177, 0.20846706497915968, 0.16925262297653576, 0.21015477008891859, 0.20397362126539964, 0.3018935730590899, 0.8506488149006473, 0.2383240624591526, 0.260716381280082, 0.21336924618135322, 0.18346155240401463, 0.25381006928422056, 0.21070818679192038, 0.21545638903630115, 0.23285038425541582, 0.20005619828427057, 0.10920956516154479, 0.08658906124584942, 0.08493195171198109, 0.07473029643296336, 0.10409170348960184, 0.10523094365157926, 0.10921363732310496, 0.08156234106423477, 0.09761074406585102]}, "mutation_prompt": null}
