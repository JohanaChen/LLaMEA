{"id": "98cde340-aaf9-4cec-8022-4752c9caada9", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "a0cb5ddd-1927-4daf-92c8-ebbcca438a94", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Local search phase\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            for _ in range(int(self.pop_size * 0.1)):  # 10% of population size\n                perturbation = np.random.normal(0, 0.1, self.dim)\n                new_solution = np.clip(best_individual + perturbation, self.lower_bound, self.upper_bound)\n                new_fitness = func(new_solution)\n                evaluations += 1\n\n                if new_fitness < fitness[best_idx]:\n                    population[best_idx] = new_solution\n                    fitness[best_idx] = new_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        return population[np.argmin(fitness)]", "name": "HybridDE", "description": "A novel hybrid metaheuristic combining differential evolution with a guided local search to efficiently navigate and exploit the search space.", "configspace": "", "generation": 1, "fitness": 0.2709976205601741, "feedback": "", "error": "", "parent_id": "98cde340-aaf9-4cec-8022-4752c9caada9", "metadata": {"aucs": [0.633683438373962, 0.5910576914562433, 0.6433270337527397, 0.6328895173690986, 0.6240224379830617, 0.6152733285524995, 0.6292867103089573, 0.6362697174315698, 0.6445812254570469, 0.33474956267058076, 0.3211731541356293, 0.36635569732963136, 0.3373413367081439, 0.3197455170699469, 0.332800995773325, 0.34716214539803913, 0.36352558366709586, 0.3735275083025521, 0.12102689013440904, 0.12106704409198943, 0.115712613657174, 0.1146993495338896, 0.10920471308913204, 0.11334562498608469, 0.11306285914946079, 0.1255175169195698, 0.10023219247597337, 0.09240093148413964, 0.09959486369705828, 0.08718530526922208, 0.09753581300926617, 0.08696119250398837, 0.08866379898094578, 0.09230549274657895, 0.08612984102307852, 0.0977067264919973, 0.9613330537050273, 0.9586020627030062, 0.9208296194474395, 0.9545537509081222, 0.9292806985673597, 0.9212498026094794, 0.9239114839498545, 0.9563665074647211, 0.9350220750703462, 0.29981400908195355, 0.28492248825247424, 0.3029803012929706, 0.296731853378428, 0.30676192191536333, 0.27005535916980394, 0.2761310089373369, 0.2908253179496789, 0.31938565880627856, 0.4740296544853322, 0.4458622493751172, 0.46714129510312896, 0.5689784984247082, 0.6019964561335348, 0.5149218483306959, 0.45938973972963093, 0.4841652358682931, 0.4798942056834866, 0.22692466170373515, 0.2103379191504392, 0.17895931839520618, 0.19356821054165274, 0.17017890460884977, 0.18185789001467223, 0.24658037390818044, 0.18863992718885747, 0.18164254276499825, 0.234319311431618, 0.12245434723521886, 0.18692287347248548, 0.22698637166616675, 0.20212451760025663, 0.228673335300847, 0.1545107947734452, 0.18616987358100345, 0.17591646804672367, 0.0805330659451573, 0.09922214868789347, 0.10402435792698383, 0.11456183562207567, 0.10992838479656852, 0.10928684567504299, 0.10018461291619474, 0.12265283602496424, 0.12706843653613398, 0.18622526218344726, 0.23374100133889408, 0.22780298712586922, 0.21966962071287366, 0.2055257780518569, 0.24169567965906846, 0.3532809026720084, 0.28228807134709244, 0.24368710336161703, 0.03360969875707287, 0.007621768225768211, 0.015369548421729662, 0.041248262596169316, 0.06309563117442563, 0.03945558161934859, 0.016364787076986742, 0.02819407523642692, 0.027119504590006782, 0.15757355296951514, 0.15451560137737508, 0.136763186533433, 0.1524727070525752, 0.16947378366972876, 0.16006634123691077, 0.15470491375414364, 0.16963428750159582, 0.16342816379961356, 0.48286675931556255, 0.4749299818031344, 0.4855702626020122, 0.4916477785655283, 0.49910059089564907, 0.4684139680209686, 0.4824382991498194, 0.4755147701993805, 0.46376677232915653, 0.11342999508979301, 0.12397062489164312, 0.13053099628471276, 0.08685581371545614, 0.10470947861235635, 0.10627149754448961, 0.10593159526872842, 0.15787369926036532, 0.10529413371280316, 0.1635836270035521, 0.204898489585856, 0.22805453114914875, 0.2295920746430936, 0.23484083918863075, 0.15605478215226176, 0.2541511456783644, 0.21157928654264546, 0.19300848343498334, 0.2572346766143776, 0.28152342123996954, 0.2724187429482474, 0.25206794374980446, 0.25328717214894836, 0.267259763875462, 0.29398715083765736, 0.2987820611968881, 0.2971942213972003, 0.2224551082865347, 0.21775508883400974, 0.20885029991502513, 0.2019695579351528, 0.20648926846254712, 0.18680593754653296, 0.2215159054331981, 0.2250246607268147, 0.22344963980279475, 0.17347720401805633, 0.18002835235358328, 0.19271590542619366, 0.19557106823417636, 0.1933383089585271, 0.19889403121729743, 0.2096384386139324, 0.19448277816863202, 0.1808689479213904, 0.19157229476056514, 0.19379940173596144, 0.20031967187864252, 0.18220397543734623, 0.1868459059596307, 0.1891459351221776, 0.18319596142934969, 0.18711270988818296, 0.212869086800186, 0.7038531151987331, 0.6384961379445704, 0.15944896628998917, 0.4487654063992811, 0.20105252205417523, 0.3726544394327248, 0.17486284957339526, 0.601742655298025, 0.20978310737827044, 0.661923550268819, 0.20984611977816936, 0.47316913840395003, 0.3009465089557456, 0.20522659026478662, 0.1510126848025638, 0.6628933944774185, 0.20997829451028638, 0.21026654004734568, 0.1870565502392596, 0.20142847197698766, 0.19173962800665711, 0.1817215991522969, 0.1796972987228408, 0.1827704467730228, 0.19785327977015787, 0.18922746358588016, 0.16765428884653888, 0.0740594411471881, 0.07816208271930625, 0.06762374307613661, 0.07049798465061663, 0.06801876782865313, 0.06753180580872853, 0.06970810215557921, 0.06822436898650197, 0.06443832606933997]}, "mutation_prompt": null}
