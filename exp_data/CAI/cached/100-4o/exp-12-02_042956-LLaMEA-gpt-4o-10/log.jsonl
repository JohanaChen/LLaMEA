{"id": "af3e8c54-f8dc-44dc-b61c-e34c66aefa73", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        # Initialize population\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = pop[indices]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pop[i])\n\n                # Evaluate trial vector\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Update mutation factor adaptively\n                self.mutation_factor = 0.5 + 0.5 * (1 - eval_count / self.budget)\n\n                if eval_count >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return pop[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "A customizable metaheuristic that combines differential evolution with adaptive learning rates to balance exploration and exploitation efficiently.", "configspace": "", "generation": 0, "fitness": 0.2622729826228151, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.57289534282855, 0.5745007740487715, 0.5776459609783287, 0.6218211769141542, 0.6071507897164017, 0.6307910042540112, 0.6135203304301375, 0.6107965158631051, 0.5944118937981451, 0.39486716260939614, 0.4100413918074738, 0.36975598165665535, 0.3595150646812386, 0.4031178971157392, 0.3678242777047699, 0.37541491275545724, 0.40497741156944567, 0.3900542586122816, 0.08893093456717449, 0.09774887690210321, 0.07903152125261625, 0.09070998850201417, 0.09960873861889141, 0.08385155251614018, 0.09505769123244723, 0.08824292764208952, 0.081405113191228, 0.0786055423272699, 0.07984885653645779, 0.07589556889796423, 0.08396740563171501, 0.08439409773842255, 0.07774914169298464, 0.08132338128708394, 0.08076099964428796, 0.08630604631140382, 0.9600342884834002, 0.9629150462144795, 0.947861153739037, 0.9682212157024994, 0.967524607078809, 0.9182037509679715, 0.9636115368806385, 0.9531192725162594, 0.9665125704323196, 0.2954682888404705, 0.26581493108003085, 0.27857138603771225, 0.2962039591797797, 0.26561481701318534, 0.2804921242485504, 0.3107840094966847, 0.2878402468208765, 0.2820693598713526, 0.4649239491986583, 0.45832429573847, 0.476807682295717, 0.509020164460376, 0.5389219770402521, 0.5446263110793271, 0.5300866207453114, 0.49289630905705784, 0.48689906700114394, 0.18810052611613026, 0.230234422235581, 0.16556748316626568, 0.16836507887579644, 0.1862310223076501, 0.19184255292313646, 0.20346081123892468, 0.17223350990785202, 0.16306552125767826, 0.11071191385973089, 0.2723996889383352, 0.021298680827044336, 0.19165415147156506, 0.17624847773987762, 0.17720451399277937, 0.21284942373290427, 0.14099361773634467, 0.21201211856255608, 0.13258791149620397, 0.11440452867343665, 0.1090390883912411, 0.12020383814264657, 0.12135550068635659, 0.13925846677599585, 0.12796315828227856, 0.13596971368656285, 0.1518383070670929, 0.21942843655096111, 0.22831939000401758, 0.2352890837804149, 0.2525372656729771, 0.23585950869081396, 0.24573109386574066, 0.2794073569615271, 0.24784263126085737, 0.30452473438971817, 0.05876569129624076, 0.0219331760317657, 0.06076428234237241, 0.07319421581380081, 0.033832663731699575, 0.05171986408175344, 0.052117593260779915, 0.03891055981990643, 0.05824856228703079, 0.14271473955427594, 0.15929968954214602, 0.15108809585082195, 0.1721908536182093, 0.17829545035988614, 0.15360392521721933, 0.1629310364479437, 0.14640579711568502, 0.1740866890532814, 0.47598926484159576, 0.46075728839065455, 0.4533550795321969, 0.4765434156102456, 0.455381587076636, 0.49277566197187617, 0.47829144577597726, 0.461338999409302, 0.4674584980643729, 0.0837370994911193, 0.0983608088501915, 0.07812782653790495, 0.08578135356150451, 0.06549572833468809, 0.08197820567700398, 0.09021039135096365, 0.09512140373131173, 0.0845762907770804, 0.16545231618264156, 0.1465800646482145, 0.1845489780204964, 0.13914637143589548, 0.28325912841660683, 0.13959846200792925, 0.15876331930951038, 0.13286187642033254, 0.17050644882275467, 0.2696636991821253, 0.25358827034736875, 0.25429868633705777, 0.263080153335308, 0.2615487639191404, 0.25425457742906765, 0.2678256388945264, 0.28865739306392657, 0.2901616007046819, 0.20275763096539667, 0.18376822768590284, 0.1964796133494342, 0.1831018928490059, 0.1928273921157756, 0.18944185407710123, 0.21477658410245204, 0.24287545927868137, 0.20479097065191043, 0.1794810546641875, 0.1711473081712589, 0.17117787044641664, 0.16421349931691254, 0.1860817514080979, 0.16741156344856023, 0.19005090522926094, 0.1896915441900745, 0.175910210831286, 0.18072349346850936, 0.1674545128162488, 0.16974453268744816, 0.1761865984778257, 0.1735279793641028, 0.17072808015438856, 0.16713526301552106, 0.16850347831385115, 0.1708720121686632, 0.16723131358483911, 0.6457567112212788, 0.17540151986124364, 0.522125310665201, 0.4237138573103776, 0.4668790780440153, 0.17455686432239548, 0.1635075888766061, 0.3951790927553136, 0.5366097005555432, 0.19555630187068596, 0.1833782993309191, 0.16848561669088302, 0.17255868065720192, 0.44918430699716516, 0.20595836165160852, 0.19496407743651512, 0.6688500503196895, 0.1995414245967444, 0.179682660535031, 0.19775253801730974, 0.18837671184989824, 0.17765836975143334, 0.1938639521479426, 0.19219501922963, 0.1883925404178839, 0.2018228521453027, 0.06906566312937845, 0.07041346682576188, 0.05929753869010679, 0.07098846433784312, 0.06389835304842306, 0.06963468410411877, 0.0712983599178828, 0.06567547949533548, 0.059526167675520436]}, "mutation_prompt": null}
{"id": "195e2cb3-6923-4991-9a25-606260c547f9", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        # Initialize population\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = pop[indices]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial = np.where(crossover_mask, mutant, pop[i])\n\n                # Evaluate trial vector\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Update mutation factor adaptively\n                self.mutation_factor = 0.5 + 0.5 * (1 - eval_count / self.budget)\n\n                if eval_count >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return pop[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "A customizable metaheuristic that combines differential evolution with adaptive learning rates to balance exploration and exploitation efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af3e8c54-f8dc-44dc-b61c-e34c66aefa73", "metadata": {"aucs": [0.57289534282855, 0.5745007740487715, 0.5776459609783287, 0.6218211769141542, 0.6071507897164017, 0.6307910042540112, 0.6135203304301375, 0.6107965158631051, 0.5944118937981451, 0.39486716260939614, 0.4100413918074738, 0.36975598165665535, 0.3595150646812386, 0.4031178971157392, 0.3678242777047699, 0.37541491275545724, 0.40497741156944567, 0.3900542586122816, 0.08893093456717449, 0.09774887690210321, 0.07903152125261625, 0.09070998850201417, 0.09960873861889141, 0.08385155251614018, 0.09505769123244723, 0.08824292764208952, 0.081405113191228, 0.0786055423272699, 0.07984885653645779, 0.07589556889796423, 0.08396740563171501, 0.08439409773842255, 0.07774914169298464, 0.08132338128708394, 0.08076099964428796, 0.08630604631140382, 0.9600342884834002, 0.9629150462144795, 0.947861153739037, 0.9682212157024994, 0.967524607078809, 0.9182037509679715, 0.9636115368806385, 0.9531192725162594, 0.9665125704323196, 0.2954682888404705, 0.26581493108003085, 0.27857138603771225, 0.2962039591797797, 0.26561481701318534, 0.2804921242485504, 0.3107840094966847, 0.2878402468208765, 0.2820693598713526, 0.4649239491986583, 0.45832429573847, 0.476807682295717, 0.509020164460376, 0.5389219770402521, 0.5446263110793271, 0.5300866207453114, 0.49289630905705784, 0.48689906700114394, 0.18810052611613026, 0.230234422235581, 0.16556748316626568, 0.16836507887579644, 0.1862310223076501, 0.19184255292313646, 0.20346081123892468, 0.17223350990785202, 0.16306552125767826, 0.11071191385973089, 0.2723996889383352, 0.021298680827044336, 0.19165415147156506, 0.17624847773987762, 0.17720451399277937, 0.21284942373290427, 0.14099361773634467, 0.21201211856255608, 0.13258791149620397, 0.11440452867343665, 0.1090390883912411, 0.12020383814264657, 0.12135550068635659, 0.13925846677599585, 0.12796315828227856, 0.13596971368656285, 0.1518383070670929, 0.21942843655096111, 0.22831939000401758, 0.2352890837804149, 0.2525372656729771, 0.23585950869081396, 0.24573109386574066, 0.2794073569615271, 0.24784263126085737, 0.30452473438971817, 0.05876569129624076, 0.0219331760317657, 0.06076428234237241, 0.07319421581380081, 0.033832663731699575, 0.05171986408175344, 0.052117593260779915, 0.03891055981990643, 0.05824856228703079, 0.14271473955427594, 0.15929968954214602, 0.15108809585082195, 0.1721908536182093, 0.17829545035988614, 0.15360392521721933, 0.1629310364479437, 0.14640579711568502, 0.1740866890532814, 0.47598926484159576, 0.46075728839065455, 0.4533550795321969, 0.4765434156102456, 0.455381587076636, 0.49277566197187617, 0.47829144577597726, 0.461338999409302, 0.4674584980643729, 0.0837370994911193, 0.0983608088501915, 0.07812782653790495, 0.08578135356150451, 0.06549572833468809, 0.08197820567700398, 0.09021039135096365, 0.09512140373131173, 0.0845762907770804, 0.16545231618264156, 0.1465800646482145, 0.1845489780204964, 0.13914637143589548, 0.28325912841660683, 0.13959846200792925, 0.15876331930951038, 0.13286187642033254, 0.17050644882275467, 0.2696636991821253, 0.25358827034736875, 0.25429868633705777, 0.263080153335308, 0.2615487639191404, 0.25425457742906765, 0.2678256388945264, 0.28865739306392657, 0.2901616007046819, 0.20275763096539667, 0.18376822768590284, 0.1964796133494342, 0.1831018928490059, 0.1928273921157756, 0.18944185407710123, 0.21477658410245204, 0.24287545927868137, 0.20479097065191043, 0.1794810546641875, 0.1711473081712589, 0.17117787044641664, 0.16421349931691254, 0.1860817514080979, 0.16741156344856023, 0.19005090522926094, 0.1896915441900745, 0.175910210831286, 0.18072349346850936, 0.1674545128162488, 0.16974453268744816, 0.1761865984778257, 0.1735279793641028, 0.17072808015438856, 0.16713526301552106, 0.16850347831385115, 0.1708720121686632, 0.16723131358483911, 0.6457567112212788, 0.17540151986124364, 0.522125310665201, 0.4237138573103776, 0.4668790780440153, 0.17455686432239548, 0.1635075888766061, 0.3951790927553136, 0.5366097005555432, 0.19555630187068596, 0.1833782993309191, 0.16848561669088302, 0.17255868065720192, 0.44918430699716516, 0.20595836165160852, 0.19496407743651512, 0.6688500503196895, 0.1995414245967444, 0.179682660535031, 0.19775253801730974, 0.18837671184989824, 0.17765836975143334, 0.1938639521479426, 0.19219501922963, 0.1883925404178839, 0.2018228521453027, 0.06906566312937845, 0.07041346682576188, 0.05929753869010679, 0.07098846433784312, 0.06389835304842306, 0.06963468410411877, 0.0712983599178828, 0.06567547949533548, 0.059526167675520436]}, "mutation_prompt": null}
