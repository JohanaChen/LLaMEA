{"id": "49e62963-23fc-4944-adf8-64e34ef5cf7c", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim, population_size=100, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        \n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                # Mutation\n                indices = list(range(0, i)) + list(range(i + 1, self.population_size))\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                \n                # Ensure mutation within bounds\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    \n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n                # Adaptive control parameters based on diversity\n                population_diversity = np.std(population, axis=0)\n                self.F = 0.4 + 0.2 * (np.mean(population_diversity) / (self.upper_bound - self.lower_bound))\n                self.CR = 0.8 - 0.3 * (np.mean(population_diversity) / (self.upper_bound - self.lower_bound))\n                self.F = np.clip(self.F, 0.1, 0.9)\n                self.CR = np.clip(self.CR, 0.1, 1.0)\n\n        return best", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm that dynamically adjusts mutation and crossover rates based on population diversity to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.2500086503976546, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6757671616398045, 0.6743257793965118, 0.6659534821286548, 0.6698607971378827, 0.6615203133397711, 0.6723949408158355, 0.7029878409725516, 0.6677579276030008, 0.6729612396014251, 0.42029666305097835, 0.4118128777278991, 0.41854094432714706, 0.3979710833713007, 0.44072697703056096, 0.4128147328110383, 0.38321222234633523, 0.4054842926598703, 0.4000805690174186, 0.11285245474762995, 0.1205361767182982, 0.10703938031885007, 0.10916253084238703, 0.10961295318306308, 0.10850270160961684, 0.10787039158876155, 0.11424987114457141, 0.11858812702234245, 0.09963288257339886, 0.1033064255900179, 0.09879150342704202, 0.09540121146545522, 0.09647013972875262, 0.0989629784743351, 0.09657983887158639, 0.09207390334252064, 0.09221837764069918, 0.9058113657406972, 0.9109700730236573, 0.913617837408855, 0.7443599782855126, 0.8886465164388463, 0.8660323121293253, 0.9430810905409833, 0.9085032854451706, 0.8865498161805923, 0.2987392302733146, 0.27090593789171047, 0.2661493894329856, 0.2724644824707133, 0.29392981956674014, 0.29322562363088556, 0.289199380440216, 0.24380598500698036, 0.26251258323472937, 0.45642368938677824, 0.49202254468447904, 0.4922724605480565, 0.5532808573292347, 0.4894336944390899, 0.5555958565861994, 0.5465132298975303, 0.5046629393907097, 0.4387814639083891, 0.1542505959387106, 0.16058741059094284, 0.15975736122673934, 0.15217483875989835, 0.15835066417234978, 0.14153336292764018, 0.14058941508556522, 0.14954381102878322, 0.1477593408909934, 0.13176768294057206, 0.13977683591715873, 0.1661680441003831, 0.17106161369147121, 0.137994743659982, 0.15902603897943535, 0.17232274354923194, 0.15499333076077548, 0.1453716503455662, 0.04098831808462111, 0.04260214081667235, 0.031196385214012468, 0.03956171294276278, 0.01645248965561441, 0.027206528986579714, 0.026731035753771004, 0.05304077116228434, 0.02562549119156443, 0.14470267750139554, 0.13397631684632305, 0.12985395209404327, 0.13269998323979582, 0.1228357599734462, 0.11909310738419443, 0.1661678602391301, 0.18948286284610072, 0.1909588341563061, 0.014168261850512343, 0.019664424945443515, 0.021748620497822446, 0.017165034541759217, 0.01810511025041983, 0.008084720042895621, 0.03257512445540833, 0.044821690516337886, 0.03749957888397826, 0.15131813795039284, 0.16284190230838758, 0.12783987931512952, 0.14559265837285462, 0.13664563498586557, 0.15023189862377928, 0.12784844292664088, 0.12210310718272444, 0.1267659116499843, 0.459613947019881, 0.4812783377798303, 0.5138158346376682, 0.4802773847594505, 0.4655404129829339, 0.4936790506045342, 0.4925466490772268, 0.5067375894892268, 0.5054251039464026, 0.11209393713582072, 0.09740343324908385, 0.0956796153000492, 0.09776706182331218, 0.0929692934821662, 0.11256886549216538, 0.09006051393619163, 0.10165479183669124, 0.08938621393698265, 0.1182477719337236, 0.1351565170202753, 0.14714829547532504, 0.14568996640772314, 0.13798781013960193, 0.1339801881109155, 0.14077017469657127, 0.13878489446500375, 0.12923659591153513, 0.30955221555732537, 0.30179985812048016, 0.2968346012865226, 0.30100619253906913, 0.3213735631787349, 0.3133873335432543, 0.3147731424004935, 0.3566982347448753, 0.34989854270541165, 0.20550556314372947, 0.21299851434467487, 0.2186222148283714, 0.20760180857347033, 0.2129634440236745, 0.2049525786273243, 0.23702770433915799, 0.23291041510840216, 0.23940132550521953, 0.20285043239415412, 0.2039718819702998, 0.19351269868360743, 0.2182618115132262, 0.20175067810442338, 0.20959337153061086, 0.1885009798834717, 0.18786270654622816, 0.18437361053228385, 0.18501965095329087, 0.1934331039554218, 0.18795551792185528, 0.18160749706071377, 0.18924879579601905, 0.20917601552012777, 0.17631123488452727, 0.20380531155462434, 0.19078576176332485, 0.1893275530281513, 0.1748166659599617, 0.24340151752383, 0.19504589149103368, 0.28659564457846265, 0.16009292216285576, 0.25746860178894815, 0.25146973813700135, 0.1921157287876697, 0.3324177892212937, 0.4415423327742509, 0.22063861323823686, 0.1949061465823566, 0.16928901202780255, 0.2652809948935576, 0.23952372084439744, 0.1888440339209384, 0.2641382179056464, 0.18292066211290547, 0.17997800484493598, 0.20059129961147615, 0.18253130190850708, 0.2051827672048232, 0.1823974382262913, 0.18247127876696234, 0.19418131353771229, 0.19978063013972092, 0.07615412431675028, 0.07802321286591829, 0.07441043291543825, 0.08104329203840532, 0.07518694565040152, 0.08097490781413508, 0.08266715565564353, 0.07085102049584402, 0.07974002059757224]}, "mutation_prompt": null}
{"id": "38bd4be0-2c48-4d29-a4a9-3a8c29fbd789", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim, population_size=100, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        \n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                \n                # Mutation\n                indices = list(range(0, i)) + list(range(i + 1, self.population_size))\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                \n                # Ensure mutation within bounds\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    \n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n                # Adaptive control parameters based on diversity\n                # Change here: Using entropy-based diversity\n                population_diversity = np.sum(-np.mean(np.log2(population + 1e-12), axis=0))  # Entropy-based diversity\n                self.F = 0.4 + 0.2 * (population_diversity / (self.upper_bound - self.lower_bound))\n                self.CR = 0.8 - 0.3 * (population_diversity / (self.upper_bound - self.lower_bound))\n                self.F = np.clip(self.F, 0.1, 0.9)\n                self.CR = np.clip(self.CR, 0.1, 1.0)\n\n        return best", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with entropy-based diversity measurement to improve adaptive parameter control.", "configspace": "", "generation": 1, "fitness": 0.05166694243757943, "feedback": "", "error": "", "parent_id": "49e62963-23fc-4944-adf8-64e34ef5cf7c", "metadata": {"aucs": [0.11869729595922507, 0.12023113931555696, 0.09169502728636048, 0.13112642370491867, 0.10750000009520266, 0.11042008850345264, 0.0998473575412605, 0.07553714411058787, 0.1094008673217095, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010834892625041559, 0.015169340368183293, 0.018911566204957708, 0.010643411704069683, 0.006592353378601756, 0.006669962766643223, 0.0288090533811044, 0.007792397052521438, 0.010674738340807233, 9.999999999998899e-05, 9.999999999998899e-05, 0.01140668175185855, 0.01959972157639278, 0.0004952459975243739, 9.999999999998899e-05, 0.014763392921912755, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.05881044770816646, 0.05823541065093363, 0.054877264043567076, 0.05331602884281661, 0.04865133012201606, 0.0639706079335367, 0.057803977829267716, 0.053494718807759134, 0.06274794416174423, 0.029078853981581276, 0.0188958639049861, 0.037102256751242346, 0.03923690144124814, 9.999999999998899e-05, 9.999999999998899e-05, 0.016675340803576577, 9.999999999998899e-05, 0.10027683525177622, 0.08224659834595494, 0.059824388882108726, 0.0667108215001172, 0.07285119553694963, 0.08132921701227258, 0.049366521008575415, 0.05931056463008866, 0.10017772473897679, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004514399195837737, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12539741187488818, 0.15756555760738078, 0.16308692172496542, 0.11299707672965909, 0.10274288241579344, 0.12416483807742551, 0.16112956940342849, 0.12648358403994353, 0.1210557193025883, 0.013739533971539819, 0.023159114465262642, 0.02198412468535549, 0.03266886175302153, 0.0008380415396770369, 0.01759993274736349, 0.005932183898287424, 0.021948067854712816, 0.0267656688986897, 0.08494000004272673, 0.08609370886951495, 0.11842175776965747, 0.13766266535167793, 0.13511880823300437, 0.10798713552628325, 0.08808199726801991, 0.08099219012337167, 0.0798722905190411, 0.11985149873023437, 0.12244191735429832, 0.1613932299901244, 0.13800672315110074, 0.1362913836684968, 0.161856142914947, 0.1219584187816024, 0.17377774300845283, 0.11544443549682837, 0.05985564337097804, 0.05884243066818107, 0.08398582550377798, 0.06657586399817106, 0.06633611147388963, 0.09793549997287943, 0.0837317855149382, 0.0997711199450243, 0.06766106901929891, 0.11943364695601921, 0.10491313827275839, 0.13345086981233123, 0.11551405703943707, 0.10248497347293928, 0.10896891037713907, 0.12245976138762271, 0.10201798564705933, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12680551929410044, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16207881422481074, 0.10630450851969886, 0.08967513334876764, 0.10161371339885394, 0.09360775873740623, 0.1207914665021157, 0.06995893837844436, 0.1070176662487543, 0.10511484148144368, 0.0693612576838919, 0.11040265245322212, 0.10838827416952768, 0.06932034027342138, 0.08059276491351852, 0.03738259240699027, 0.0794872468536234, 0.07376503436009862, 0.05346335986028028, 0.04699248306696513, 0.13480174570059533, 0.1608614726286951, 0.148124017676316, 0.14552268903905985, 0.1282201447801723, 0.13994288924415266, 0.14969714796693134, 0.15308535452138583, 0.14689007985489466, 0.027007085248150542, 0.024813730588825633, 0.031393493129599714, 0.0317145454957557, 0.03425093938292756, 0.0388165651178235, 0.031077609664734718, 0.03803354422653826, 0.02489289782248183]}, "mutation_prompt": null}
