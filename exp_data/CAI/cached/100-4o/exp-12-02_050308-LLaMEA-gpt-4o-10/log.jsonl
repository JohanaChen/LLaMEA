{"id": "6bdf093e-1583-4aaa-95ea-be9291e03a21", "solution": "import numpy as np\n\nclass APSO_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 40\n        self.inertia_weight = 0.7\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.local_search_radius = 0.1\n        self.evaluations = 0\n\n        # Initialize particles\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n\n                # Update global best\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n\n            # Update velocities and positions\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                cognitive_velocity = self.cognitive_coef * r1 * (self.personal_best_positions[i] - self.positions[i])\n                social_velocity = self.social_coef * r2 * (self.global_best_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n                self.positions[i] += self.velocities[i]\n\n                # Clamp positions to search space\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Perform local search around the global best position\n            if self.evaluations < self.budget:\n                local_search_position = self.global_best_position + np.random.uniform(\n                    -self.local_search_radius, self.local_search_radius, self.dim)\n                local_search_position = np.clip(local_search_position, self.lower_bound, self.upper_bound)\n                local_search_fitness = func(local_search_position)\n                self.evaluations += 1\n\n                if local_search_fitness < self.global_best_score:\n                    self.global_best_score = local_search_fitness\n                    self.global_best_position = local_search_position\n\n        return self.global_best_position, self.global_best_score", "name": "APSO_LS", "description": "Adaptive Particle Swarm Optimization with Local Search (APSO-LS) combining global exploration and adaptive local refinement.", "configspace": "", "generation": 0, "fitness": 0.2694308576334447, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.657049953751343, 0.7366368077479346, 0.7151463065992414, 0.6005284044426942, 0.7174887572163637, 0.746914912622528, 0.7138600105359791, 0.6751944520475193, 0.7058613281466356, 0.08139616885764878, 0.03235768661946836, 0.02521891287203648, 0.09203615572537638, 0.03996190874746075, 0.14893206822281613, 0.03751888270568615, 0.038322939204073925, 0.08118110462544303, 0.09076845555061497, 0.13814018774360703, 0.0985138940251874, 0.12209297285952647, 0.14410234620398932, 0.09463832516779891, 0.10406739396275955, 0.11390676926958498, 0.10812913200655616, 0.08050652426520577, 0.0861662645529585, 0.10480422303738801, 0.09675483409990626, 0.048454395107551895, 0.044377179177910286, 0.1102237322949462, 0.09399245677874535, 0.08401814108596684, 0.9902856875813149, 0.9921832779007536, 0.9910977604169825, 0.9730911543731654, 0.9787718794892519, 0.9776975792370759, 0.9905278910749713, 0.9856736904451449, 0.9913992051760755, 0.32597752262195234, 0.3557693917908207, 0.2499164063099839, 0.352074280813768, 0.4278123035603517, 0.3177560951851698, 0.349750885145482, 0.3057355513255877, 0.3687308372466085, 0.21568082241122288, 0.6741496892376793, 0.19642551063614677, 0.19387827168561678, 0.18950111376732426, 0.19331996459532663, 0.1797992213696349, 0.19531247435000332, 0.21684993724790835, 0.1523871408857349, 0.254073266945129, 0.17630597060765363, 0.19697404720385991, 0.31840820486898325, 0.1456681986385152, 0.16734256087560173, 0.5221598757061248, 0.16810561445747663, 0.3172187473238165, 0.2608630745902867, 0.3122909435053143, 0.17758137050065925, 0.18704920409317405, 0.27395432900159356, 0.14499283581252242, 0.1849256041259867, 0.12273458612918131, 0.06998164649274108, 0.05954793823143212, 0.053743424503166715, 9.999999999998899e-05, 0.03362911977114036, 0.011776599086014583, 0.18001253634278314, 0.03515329560230418, 0.11823942300540402, 0.1831184953853645, 0.12377916180866799, 0.11556727119355914, 0.3058404237120802, 0.06648416155117631, 0.07818911377603543, 0.266558436867509, 0.3164117872195531, 0.16263291465357288, 0.20358346610271838, 0.08970796376499823, 0.0475381577844195, 0.1701241229244198, 0.13371014348258636, 0.07302799792283676, 0.1430949747267305, 0.05752220936348218, 0.1072537826557729, 0.1502018838144713, 0.1425968886454786, 0.14477029180236256, 0.15721173741154393, 0.24993290359361076, 0.1995425238702183, 0.06733452020523967, 0.19131966593488792, 0.10513055316369935, 0.6608196213676563, 0.6471826129899675, 0.5929354074789874, 0.4869779285546527, 0.5085556705396894, 0.646947792685377, 0.5099146812582789, 0.4799023110272945, 0.5101845284938356, 0.07259325892727775, 0.0688707522193539, 0.1244254897265098, 0.14564522592444606, 0.10451809513556887, 0.15338938162759008, 0.0839957148412086, 0.09026598479423864, 0.09100776694485191, 0.23552648993474368, 0.27732089688304873, 0.19469835871442798, 0.2603882706741305, 0.20127031857597533, 0.15379927908246604, 0.24987699047342082, 0.1748403664289917, 0.20653325055992466, 0.2927592821676115, 0.2951669109738724, 0.2866432656299649, 0.2457950649803391, 0.26714195591767564, 0.22904572645918775, 0.25727759145692786, 0.3140308881313225, 0.24702642538919606, 0.22506442678554273, 0.17686456782534044, 0.1782874447365015, 0.2441071733741218, 0.19270782093653038, 0.23098245688550534, 0.24215068520977745, 0.2510835084214619, 0.20628420203062925, 0.24263941548749357, 0.2075943476768517, 0.22578210322296688, 0.22034144558019675, 0.18852604536730622, 0.26070581655210556, 0.23413302150800652, 0.23498904331029402, 0.204575183681322, 0.17509283370911466, 0.17658170004907792, 0.19499970133120792, 0.1904332491665487, 0.17947239856212183, 0.18788379928618948, 0.20018117178610506, 0.2093221423371605, 0.19044325315407318, 0.7170672827474976, 0.16377755173275765, 0.15350404698348796, 0.7059122456890989, 0.1984074128390676, 0.19993230885811464, 0.14094444205453693, 0.1699781893402027, 0.8671044718108512, 0.7758203700714055, 0.20297045054881768, 0.835708787728241, 0.7860904720186594, 0.7520825758197398, 0.15376818349847343, 0.21045495779360257, 0.10473430779905446, 0.827461432646447, 0.18936303181086878, 0.1867930353699715, 0.2313765962668134, 0.21822414892967756, 0.19983775183347274, 0.22312187839065334, 0.21718384762368692, 0.21095006517924875, 0.20218558965005973, 0.09360461269000264, 0.10016687977341776, 0.07655266417025375, 0.0785551057274595, 0.09218709731796626, 0.11000469403637758, 0.09549073660584306, 0.06898673302879399, 0.11242127097649046]}, "mutation_prompt": null}
{"id": "60331f8b-a6a2-40be-a2ab-cd216548b82c", "solution": "import numpy as np\n\nclass APSO_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 40\n        self.inertia_weight = 0.9  # Initial inertia weight\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.local_search_radius = 0.1\n        self.evaluations = 0\n\n        # Initialize particles\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.swarm_size, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n\n                # Update global best\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n\n            # Update inertia weight dynamically\n            self.inertia_weight = 0.4 + (0.5 * (1 - self.evaluations / self.budget))\n\n            # Update velocities and positions\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                cognitive_velocity = self.cognitive_coef * r1 * (self.personal_best_positions[i] - self.positions[i])\n                social_velocity = self.social_coef * r2 * (self.global_best_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                      cognitive_velocity + social_velocity)\n                self.positions[i] += self.velocities[i]\n\n                # Clamp positions to search space\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Perform local search with Gaussian mutation around the global best position\n            if self.evaluations < self.budget:\n                local_search_position = self.global_best_position + np.random.normal(\n                    0, self.local_search_radius, self.dim)\n                local_search_position = np.clip(local_search_position, self.lower_bound, self.upper_bound)\n                local_search_fitness = func(local_search_position)\n                self.evaluations += 1\n\n                if local_search_fitness < self.global_best_score:\n                    self.global_best_score = local_search_fitness\n                    self.global_best_position = local_search_position\n\n        return self.global_best_position, self.global_best_score", "name": "APSO_LS", "description": "Enhancing APSO-LS with dynamic inertia weight and Gaussian mutation for improved convergence and exploration.", "configspace": "", "generation": 1, "fitness": 0.2362863072864283, "feedback": "", "error": "", "parent_id": "6bdf093e-1583-4aaa-95ea-be9291e03a21", "metadata": {"aucs": [0.5879920166552421, 0.5179515308869227, 0.6043751532130522, 0.5774543698389928, 0.5652041743723634, 0.6281272453675292, 0.572120185353431, 0.5973885847282553, 0.578834361795439, 0.026430313671323202, 0.019897342985668143, 0.061921021653737474, 0.03390442773874569, 0.01977634976010778, 0.03222395412202006, 0.056195050011858205, 0.08878938539776915, 0.02556419983838709, 0.08461233008688818, 0.11352775284633754, 0.12768733135988863, 0.09683120289105429, 0.11188879176585664, 0.0726867687831606, 0.1186189210032711, 0.14775183877602283, 0.13234754808869276, 0.043953306390423275, 0.06789569218827451, 0.09268157272237909, 0.09602030905736159, 0.06304283508670272, 0.10826541119402189, 0.0895354285101162, 0.11880747210114662, 0.10175748608710433, 0.9916053647270059, 0.9921748513198391, 0.9903100016447901, 0.8842581288459428, 0.9848689106823246, 0.9840745406681526, 0.9906785567628981, 0.9858032639785872, 0.9914343559824522, 0.23908333763557477, 0.34216180233660154, 0.2414942973609523, 0.3412708755774063, 0.23027423850865103, 0.3709171315522861, 0.33928527420171606, 0.30700180705798263, 0.35276239940348664, 0.219427235325531, 0.2665662230045791, 0.30437231809602494, 0.21283842607077752, 0.11626812454307378, 0.2071147196540476, 0.12228533532738639, 0.7123827217507712, 0.21318585845705107, 0.1481793800457868, 0.13083592465797755, 0.08600030652776913, 0.11502271287379695, 0.11299080180030197, 0.13571059314756362, 0.1096529684963401, 0.08602027535593537, 0.37016139127866265, 0.17309799478026067, 0.19320826225012255, 0.2853629028364145, 0.1642157789121642, 0.15447563486790095, 0.3473098774312332, 0.11425575959477752, 0.419993983476052, 0.15355861389533143, 9.999999999998899e-05, 0.0979579662068718, 0.03304556470346087, 0.028198065871418265, 0.025768452626641958, 9.999999999998899e-05, 0.0028281287009532807, 0.04537267255008459, 0.056273866699068864, 0.18299446927299778, 0.11688867069995412, 0.16720717096610316, 0.09407667910127693, 0.031350569439960396, 0.08309907286039764, 0.06556900497364682, 0.22131970087998964, 0.06427306818020939, 0.0532286185034021, 0.042203992371848464, 0.03106188993242509, 0.05853544057035465, 0.05568349497179026, 0.03764955957594063, 0.09115197083364313, 0.04190346512515175, 0.12806411828904185, 0.146407029398544, 0.10781830437559126, 0.14470519323747844, 0.029663540928295706, 0.04377233277127657, 0.08013343416491847, 0.09395494190881293, 0.035254856753083375, 0.07447411470281518, 0.5553797645537268, 0.4819158375987529, 0.6138988794736957, 0.45760628007156345, 0.4835426805767945, 0.5351815263049939, 0.4253792079430988, 0.42130454813706675, 0.45413361201667735, 0.11303183325945798, 0.06965454381367342, 0.07940186334633836, 0.09358718362064233, 0.08331271371785465, 0.11742176226480006, 0.062430690958902746, 0.06530648499332925, 0.10388717601404329, 0.1727471046104192, 0.23961294273753875, 0.20725518623122363, 0.22928439229505038, 0.16182172259206695, 0.20117559806319618, 0.17593642352162164, 0.2350667889936625, 0.22786820937843844, 0.29146414309032886, 0.3228009952195232, 0.3216591567886886, 0.23815849329965655, 0.2273227998740195, 0.26561814266911454, 0.34724087121711367, 0.3338177223822699, 0.2681104482133071, 0.17217383998154823, 0.20342556990354055, 0.25937460102296894, 0.14926960640596632, 0.1822982836747712, 0.2346708792098683, 0.23890539106925734, 0.2785553578014799, 0.2216964313093015, 0.22686977108604123, 0.19303732773285942, 0.23108937039933675, 0.23819144310649176, 0.19580433989004864, 0.1996458665842561, 0.21117921549707164, 0.23007394652925128, 0.22879969745646156, 0.1926425104227133, 0.1920133208833581, 0.20153504476262585, 0.20020001825145484, 0.1935250246306598, 0.17937325500369572, 0.2106663835532122, 0.22006115754858124, 0.19959086068362208, 0.6052184567309069, 0.18506317889905843, 0.15284590487697225, 0.7148385420704062, 0.19635167711622115, 0.20054566970271814, 0.1395258466001389, 0.16924072459204398, 0.6140549169005549, 0.5884314809991062, 0.20885017163295372, 0.4915928661411706, 0.42156249106858146, 0.16566429762434087, 0.12315218870508438, 0.20694180293196784, 0.12576192141049747, 0.5795049847801641, 0.20082722663660058, 0.18505647397256275, 0.2203538978438111, 0.20566787722433943, 0.2096266391103404, 0.1876192927717849, 0.18711552248747088, 0.21700854160568228, 0.21765561537395428, 0.07805944297067757, 0.07271113122597739, 0.08003639429993858, 0.08546937013946132, 0.09177812479697511, 0.07840750277032071, 0.07294633737817235, 0.08840338231477929, 0.07384188273840042]}, "mutation_prompt": null}
