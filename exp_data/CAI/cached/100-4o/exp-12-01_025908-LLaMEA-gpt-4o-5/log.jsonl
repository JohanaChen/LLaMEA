{"id": "79edbcd6-c2cd-4279-b2b9-0199d11d0486", "solution": "import numpy as np\n\nclass HDE_APC_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = min(100, 10 * dim)\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                if self.fitness[i] < self.best_fitness:\n                    self.best_fitness = self.fitness[i]\n                    self.best_solution = self.population[i].copy()\n\n    def select_parents(self, i):\n        indices = list(range(self.population_size))\n        indices.remove(i)\n        return np.random.choice(indices, 3, replace=False)\n\n    def mutate(self, i):\n        a, b, c = self.select_parents(i)\n        mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n        mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for j in range(self.dim):\n            if np.random.rand() < self.CR or j == np.random.randint(self.dim):\n                trial[j] = mutant[j]\n        return trial\n\n    def local_search(self, target):\n        perturbation = np.random.normal(0, 0.1, self.dim)\n        candidate = np.clip(target + perturbation, self.bounds[0], self.bounds[1])\n        return candidate\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial.copy()\n\n                if evaluations < self.budget:\n                    local_candidate = self.local_search(self.population[i])\n                    local_fitness = func(local_candidate)\n                    evaluations += 1\n                    if local_fitness < self.fitness[i]:\n                        self.population[i] = local_candidate\n                        self.fitness[i] = local_fitness\n                        if local_fitness < self.best_fitness:\n                            self.best_fitness = local_fitness\n                            self.best_solution = local_candidate.copy()\n\n            # Adaptive parameter control\n            self.F = 0.4 + 0.3 * np.random.rand()\n            self.CR = 0.8 + 0.2 * np.random.rand()\n\n        return self.best_solution", "name": "HDE_APC_LS", "description": "A novel hybrid differential evolution with adaptive parameter control and local search intensification (HDE-APC-LS) to balance exploration and exploitation in black box optimization.", "configspace": "", "generation": 0, "fitness": 0.3063362438517282, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6807849780067718, 0.6386242520421892, 0.6427483789010522, 0.687289431781388, 0.6626644485645807, 0.687955870472694, 0.6573192171092037, 0.6688796710581659, 0.6455898151696728, 0.33627108040070375, 0.3481951680227382, 0.3724993808364877, 0.3219050451437876, 0.3470106717598693, 0.37914770520391894, 0.38597989058397053, 0.3707229152510426, 0.3913917635707269, 0.11313206565804268, 0.11950632985903709, 0.1144675469430807, 0.10162429249308558, 0.1078727680292384, 0.11384487822600586, 0.10910572406766228, 0.11907003315126208, 0.12404989446619896, 0.10511606225044157, 0.0947619804508184, 0.10291625190189901, 0.09332065015988011, 0.08220813136457039, 0.10624354313081352, 0.10720700882031875, 0.10444523967096031, 0.09407729005428411, 0.907520301166899, 0.8910757656553138, 0.8817266609088158, 0.8911498236517541, 0.8593587077740443, 0.8433088018644768, 0.8978934650290643, 0.831656993669854, 0.8863882705163255, 0.32634807651267206, 0.28675940702444713, 0.3107086120370034, 0.3057628841630513, 0.30608016891355705, 0.31095294874220103, 0.29377615524663925, 0.32239041277174996, 0.3288114451037182, 0.6763274114487545, 0.5317401308900426, 0.6867097367565045, 0.7237953293990926, 0.6776489890277961, 0.6710346556284752, 0.6318023216877117, 0.6302794919716889, 0.5305620097703352, 0.18596565817929434, 0.24791733551413075, 0.1784923234348571, 0.25685894266094267, 0.25187271804115285, 0.2389174402424118, 0.2092841182159948, 0.1579929653817317, 0.25354619319357197, 0.16616588767555862, 0.28722995807929397, 0.19477198660206063, 0.22875573513866443, 0.2755502780028988, 0.18212050019844594, 0.1775457903449078, 0.16494405435005755, 0.2271785436139464, 0.19785292932192378, 0.17443876363077992, 0.1781029876661958, 0.19101682516405094, 0.22323527253920283, 0.20632088563768625, 0.20034239737598603, 0.21858705372787424, 0.1785535509124938, 0.35148543825478695, 0.37360178551197987, 0.37854884307104486, 0.34025056239760576, 0.30688215491779725, 0.3217102780678128, 0.3598602493157548, 0.34486932214604205, 0.3376167446229954, 0.05927837486321952, 0.0629038736408416, 0.04574858216278754, 0.0999131458482343, 0.08656160148609893, 0.08363749850915392, 0.10748127662332119, 0.06820548383025893, 0.07374945941632927, 0.18467182813777783, 0.20119166714726133, 0.18171705110639724, 0.19495736246747053, 0.20795318458213852, 0.2118377929169405, 0.19716963392453413, 0.19060244675325044, 0.216556829116048, 0.5369503301829437, 0.5401708592905292, 0.5585284757619804, 0.5375711871784836, 0.562059470365776, 0.5505567932231993, 0.5667029756988673, 0.5242705580170279, 0.556666522690688, 0.09922883804696225, 0.10967238044121985, 0.12566533734292695, 0.10618769912489223, 0.10192904399365288, 0.09866578850018837, 0.09844255347698239, 0.10771136213695587, 0.09737565672188941, 0.19345553955132777, 0.18154398236374658, 0.18766216800945834, 0.18674611529478524, 0.19034056729666782, 0.19350094778412474, 0.2193118802737246, 0.18946582142465918, 0.19383651914587685, 0.3009626607086552, 0.2941171804379611, 0.27293874745944013, 0.3041106994189732, 0.2898175506606243, 0.2960859513476425, 0.30661215057916924, 0.30662810669537566, 0.3150698177423673, 0.22721364790034482, 0.2392949964812281, 0.2417231684278649, 0.2352057753954192, 0.2148987741188867, 0.23106466878979492, 0.25845308134829725, 0.229534674853214, 0.2508861018504658, 0.20292445027606276, 0.1973549183042278, 0.20533891289626138, 0.21201473300662588, 0.18522403144672028, 0.20399371604006544, 0.1844392006185952, 0.20132309901823375, 0.1955049198055443, 0.19554359028042445, 0.20089776913187107, 0.18483847408358423, 0.20725032464016413, 0.18769534813326705, 0.1848705601463012, 0.19776905947504997, 0.19634993516105625, 0.18437718082348065, 0.610286190559888, 0.18551902221616146, 0.5723230016053664, 0.6133806402529197, 0.6282997940558679, 0.6439092625218688, 0.6089093859684089, 0.18200288457732672, 0.5455699118421173, 0.5949705676807432, 0.4908434218405059, 0.48761497135862564, 0.5122925874641318, 0.15287110679304428, 0.48019212165531466, 0.6293615385260478, 0.510287181336617, 0.5585956108878419, 0.18954916336635275, 0.1897660021330707, 0.17558314819282517, 0.18083602240265384, 0.20100109294511226, 0.18935214695389913, 0.18683645526981307, 0.179457250188085, 0.17682779417188776, 0.07127596118037094, 0.07344608904318106, 0.08364292097681536, 0.08222757538488623, 0.07641423945071601, 0.08299011951063606, 0.07814285500634799, 0.08218035489036823, 0.08328101132812493]}, "mutation_prompt": null}
{"id": "d870e389-458e-4812-b8a0-207d74475d8b", "solution": "import numpy as np\n\nclass HDE_APC_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = min(100, 10 * dim)\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n                if self.fitness[i] < self.best_fitness:\n                    self.best_fitness = self.fitness[i]\n                    self.best_solution = self.population[i].copy()\n\n    def select_parents(self, i):\n        indices = list(range(self.population_size))\n        indices.remove(i)\n        return np.random.choice(indices, 3, replace=False)\n\n    def mutate(self, i):\n        a, b, c = self.select_parents(i)\n        mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n        mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n        return mutant\n\n    def crossover(self, target, mutant):\n        trial = np.copy(target)\n        for j in range(self.dim):\n            if np.random.rand() < self.CR or j == np.random.randint(self.dim):\n                trial[j] = mutant[j]\n        return trial\n\n    def local_search(self, target):\n        perturbation = np.random.normal(0, 0.1, self.dim)\n        candidate = np.clip(target + perturbation, self.bounds[0], self.bounds[1])\n        return candidate\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                trial = self.crossover(self.population[i], mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial.copy()\n\n                if evaluations < self.budget:\n                    local_candidate = self.local_search(self.population[i])\n                    local_fitness = func(local_candidate)\n                    evaluations += 1\n                    if local_fitness < self.fitness[i]:\n                        self.population[i] = local_candidate\n                        self.fitness[i] = local_fitness\n                        if local_fitness < self.best_fitness:\n                            self.best_fitness = local_fitness\n                            self.best_solution = local_candidate.copy()\n\n            # Adaptive parameter control\n            self.F = 0.4 + 0.3 * np.random.rand()\n            self.CR = 0.8 + 0.2 * np.random.rand()\n\n        return self.best_solution", "name": "HDE_APC_LS", "description": "A novel hybrid differential evolution with adaptive parameter control and local search intensification (HDE-APC-LS) to balance exploration and exploitation in black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79edbcd6-c2cd-4279-b2b9-0199d11d0486", "metadata": {"aucs": [0.6807849780067718, 0.6386242520421892, 0.6427483789010522, 0.687289431781388, 0.6626644485645807, 0.687955870472694, 0.6573192171092037, 0.6688796710581659, 0.6455898151696728, 0.33627108040070375, 0.3481951680227382, 0.3724993808364877, 0.3219050451437876, 0.3470106717598693, 0.37914770520391894, 0.38597989058397053, 0.3707229152510426, 0.3913917635707269, 0.11313206565804268, 0.11950632985903709, 0.1144675469430807, 0.10162429249308558, 0.1078727680292384, 0.11384487822600586, 0.10910572406766228, 0.11907003315126208, 0.12404989446619896, 0.10511606225044157, 0.0947619804508184, 0.10291625190189901, 0.09332065015988011, 0.08220813136457039, 0.10624354313081352, 0.10720700882031875, 0.10444523967096031, 0.09407729005428411, 0.907520301166899, 0.8910757656553138, 0.8817266609088158, 0.8911498236517541, 0.8593587077740443, 0.8433088018644768, 0.8978934650290643, 0.831656993669854, 0.8863882705163255, 0.32634807651267206, 0.28675940702444713, 0.3107086120370034, 0.3057628841630513, 0.30608016891355705, 0.31095294874220103, 0.29377615524663925, 0.32239041277174996, 0.3288114451037182, 0.6763274114487545, 0.5317401308900426, 0.6867097367565045, 0.7237953293990926, 0.6776489890277961, 0.6710346556284752, 0.6318023216877117, 0.6302794919716889, 0.5305620097703352, 0.18596565817929434, 0.24791733551413075, 0.1784923234348571, 0.25685894266094267, 0.25187271804115285, 0.2389174402424118, 0.2092841182159948, 0.1579929653817317, 0.25354619319357197, 0.16616588767555862, 0.28722995807929397, 0.19477198660206063, 0.22875573513866443, 0.2755502780028988, 0.18212050019844594, 0.1775457903449078, 0.16494405435005755, 0.2271785436139464, 0.19785292932192378, 0.17443876363077992, 0.1781029876661958, 0.19101682516405094, 0.22323527253920283, 0.20632088563768625, 0.20034239737598603, 0.21858705372787424, 0.1785535509124938, 0.35148543825478695, 0.37360178551197987, 0.37854884307104486, 0.34025056239760576, 0.30688215491779725, 0.3217102780678128, 0.3598602493157548, 0.34486932214604205, 0.3376167446229954, 0.05927837486321952, 0.0629038736408416, 0.04574858216278754, 0.0999131458482343, 0.08656160148609893, 0.08363749850915392, 0.10748127662332119, 0.06820548383025893, 0.07374945941632927, 0.18467182813777783, 0.20119166714726133, 0.18171705110639724, 0.19495736246747053, 0.20795318458213852, 0.2118377929169405, 0.19716963392453413, 0.19060244675325044, 0.216556829116048, 0.5369503301829437, 0.5401708592905292, 0.5585284757619804, 0.5375711871784836, 0.562059470365776, 0.5505567932231993, 0.5667029756988673, 0.5242705580170279, 0.556666522690688, 0.09922883804696225, 0.10967238044121985, 0.12566533734292695, 0.10618769912489223, 0.10192904399365288, 0.09866578850018837, 0.09844255347698239, 0.10771136213695587, 0.09737565672188941, 0.19345553955132777, 0.18154398236374658, 0.18766216800945834, 0.18674611529478524, 0.19034056729666782, 0.19350094778412474, 0.2193118802737246, 0.18946582142465918, 0.19383651914587685, 0.3009626607086552, 0.2941171804379611, 0.27293874745944013, 0.3041106994189732, 0.2898175506606243, 0.2960859513476425, 0.30661215057916924, 0.30662810669537566, 0.3150698177423673, 0.22721364790034482, 0.2392949964812281, 0.2417231684278649, 0.2352057753954192, 0.2148987741188867, 0.23106466878979492, 0.25845308134829725, 0.229534674853214, 0.2508861018504658, 0.20292445027606276, 0.1973549183042278, 0.20533891289626138, 0.21201473300662588, 0.18522403144672028, 0.20399371604006544, 0.1844392006185952, 0.20132309901823375, 0.1955049198055443, 0.19554359028042445, 0.20089776913187107, 0.18483847408358423, 0.20725032464016413, 0.18769534813326705, 0.1848705601463012, 0.19776905947504997, 0.19634993516105625, 0.18437718082348065, 0.610286190559888, 0.18551902221616146, 0.5723230016053664, 0.6133806402529197, 0.6282997940558679, 0.6439092625218688, 0.6089093859684089, 0.18200288457732672, 0.5455699118421173, 0.5949705676807432, 0.4908434218405059, 0.48761497135862564, 0.5122925874641318, 0.15287110679304428, 0.48019212165531466, 0.6293615385260478, 0.510287181336617, 0.5585956108878419, 0.18954916336635275, 0.1897660021330707, 0.17558314819282517, 0.18083602240265384, 0.20100109294511226, 0.18935214695389913, 0.18683645526981307, 0.179457250188085, 0.17682779417188776, 0.07127596118037094, 0.07344608904318106, 0.08364292097681536, 0.08222757538488623, 0.07641423945071601, 0.08299011951063606, 0.07814285500634799, 0.08218035489036823, 0.08328101132812493]}, "mutation_prompt": null}
