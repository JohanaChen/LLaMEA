{"id": "daf3fa1e-31ba-4f86-a6e0-b68d7fdd586c", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.f_lower_bound = -5.0\n        self.f_upper_bound = 5.0\n        self.population_size = max(5, 10 * dim)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.local_search_prob = 0.2  # Probability of performing a local search\n\n    def __call__(self, func):\n        pop = self.f_lower_bound + (self.f_upper_bound - self.f_lower_bound) * np.random.rand(self.population_size, self.dim)\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                candidates = [c for c in range(self.population_size) if c != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant = np.clip(pop[a] + self.F * (pop[b] - pop[c]), self.f_lower_bound, self.f_upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                \n                if np.random.rand() < self.local_search_prob:\n                    trial = self.adaptive_local_search(trial, func)\n                \n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    pop[i] = trial\n                \n                if evals >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return pop[best_index]\n\n    def adaptive_local_search(self, solution, func):\n        step_size = (self.f_upper_bound - self.f_lower_bound) * 0.05\n        best_local = solution\n        best_fitness = func(solution)\n\n        for _ in range(5):\n            candidate = best_local + step_size * (np.random.rand(self.dim) - 0.5)\n            candidate = np.clip(candidate, self.f_lower_bound, self.f_upper_bound)\n            candidate_fitness = func(candidate)\n\n            if candidate_fitness < best_fitness:\n                best_fitness = candidate_fitness\n                best_local = candidate\n\n        return best_local", "name": "HybridDEALS", "description": "Hybrid Differential Evolution with Adaptive Local Search combines global exploration using differential evolution and adaptive local refinement to enhance convergence on diverse optimization landscapes.", "configspace": "", "generation": 0, "fitness": 0.18764950181256956, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.3878985511475903, 0.37391459075859024, 0.38380158036688183, 0.4230778758658883, 0.42658420660563245, 0.43488200634067975, 0.4073717385439225, 0.4098314818402278, 0.4156748894953425, 0.14306399058590047, 0.13388947995741451, 0.13420331726163715, 0.14338540885074635, 0.11640505217412322, 0.14645974396965067, 0.1237386468518834, 0.15635018412834434, 0.1333283895464742, 0.08198026343971054, 0.0739150216130181, 0.08192491692169057, 0.08328291732170523, 0.08209841900781267, 0.07855970120689248, 0.08623157135416348, 0.08011614495765096, 0.08144756987904622, 0.07153644551263783, 0.07985146373752561, 0.06584778984913009, 0.06662952753855766, 0.06403003141649055, 0.06641130750911395, 0.07322983456280252, 0.06498766792800215, 0.07804881109126649, 0.9212854759755382, 0.8599837903690056, 0.8770598101387332, 0.958449226673253, 0.8999494770182322, 0.8747493349816287, 0.7900745762630003, 0.8887733460683844, 0.8926244401939921, 0.18517036867783832, 0.17923037690961696, 0.18181583786053646, 0.17955386450916144, 0.14962554471993572, 0.16899148769694006, 0.20433349534390566, 0.19626851403465084, 0.19093553359774462, 0.23212447764426092, 0.24596167918880174, 0.24122161976956213, 0.2698852769450554, 0.24527441556049745, 0.24047272142636233, 0.22218762946757498, 0.23828876179454495, 0.23070610460402186, 0.10702532380582075, 0.10257684335387507, 0.11400982232846146, 0.10862598613899976, 0.13132638772271443, 0.10899678107036703, 0.09734110948009256, 0.11194057414266112, 0.12622031524352728, 0.12712521035813407, 0.10227933550319634, 0.14457549354045862, 0.0764399673448859, 0.09600036044700411, 0.10089423796938446, 0.10415004051397969, 0.09744869078523155, 0.08883159948521246, 0.013168202372667803, 0.03925076987039522, 0.04547213437810438, 0.04303428528725328, 0.03292150344374789, 0.019927583994764464, 0.011030732806298849, 0.02462452216597799, 0.015041909191088387, 0.17081198478732984, 0.16260222798513946, 0.15049601115052225, 0.1271914650092587, 0.1360360260956962, 0.13246305536144265, 0.13722430539013497, 0.16277533626048912, 0.1569267901173118, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023228933921549677, 0.00019784733214001093, 0.06748743264283308, 0.06895324251596036, 0.08568590847227753, 0.07118565906466279, 0.08022965481806388, 0.09164817378849655, 0.07692791383590158, 0.07755096792166083, 0.08936712364953436, 0.34713803452837255, 0.3651545462584983, 0.3759312061903666, 0.3637326808777477, 0.34713636120373836, 0.3687539040676029, 0.33999929109570204, 0.3403474558478641, 0.35182351699121583, 0.07871393821031603, 0.09776766360888145, 0.0782726093236763, 0.09079671132554945, 0.08104687230406615, 0.07892686281988026, 0.06788517307778608, 0.07499707295136215, 0.07608844421781702, 0.14726169591370142, 0.16313756151427228, 0.13095508564657243, 0.13610959129857203, 0.13795897156699088, 0.14357844413526477, 0.16274275183504905, 0.13518095837422806, 0.1705642060399728, 0.22397682841926558, 0.2282067399594243, 0.22182520612758583, 0.20535108072199304, 0.21086574052242124, 0.20399034255042214, 0.22763023469310473, 0.22284408024617475, 0.2235492379605809, 0.15507911381750583, 0.1561173716598836, 0.16801561075459226, 0.15096042798030973, 0.15341085417549272, 0.14154623396228638, 0.1549040047314626, 0.1814986467649593, 0.16640260415512242, 0.16838481210631795, 0.17903909830555953, 0.17756514648275257, 0.18573590409081664, 0.17701745670566693, 0.17501824943169597, 0.1831831733860434, 0.17368594727805575, 0.16797161026904994, 0.16387082152525068, 0.15769686247986936, 0.16722417858847327, 0.1699223042550868, 0.16202754678416909, 0.1664386228656276, 0.17309546476176818, 0.15553074648105225, 0.17127949437927714, 0.29447485222064895, 0.17868390952772406, 0.35475405448783826, 0.24190310162534245, 0.17217540792459496, 0.2201220850369474, 0.16336158314669158, 0.214211385792627, 0.19889459202877613, 0.26409211576219993, 0.314673558861569, 0.28322526178453034, 0.18463509870714057, 0.2265837150737069, 0.23524949036672516, 0.18960072042661869, 0.30672352978378326, 0.1897986803870253, 0.1971615400745763, 0.18628152054453562, 0.19200702681200998, 0.19089840028183214, 0.21266872274149073, 0.17765201907455574, 0.19568150397228556, 0.18807075530863127, 0.1786350689960161, 0.06515175378644711, 0.06912526080713377, 0.05859048290995594, 0.07344075048429988, 0.07001036264308025, 0.06296390065295054, 0.06144881366680566, 0.06379286697154551, 0.074633619331957]}, "mutation_prompt": null}
{"id": "6bca7a17-8f99-4f3d-ad2e-c27fa487e174", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.f_lower_bound = -5.0\n        self.f_upper_bound = 5.0\n        self.population_size = max(5, 10 * dim)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.local_search_prob = 0.2  # Probability of performing a local search\n\n    def __call__(self, func):\n        pop = self.f_lower_bound + (self.f_upper_bound - self.f_lower_bound) * np.random.rand(self.population_size, self.dim)\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                candidates = [c for c in range(self.population_size) if c != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant = np.clip(pop[a] + self.F * (pop[b] - pop[c]), self.f_lower_bound, self.f_upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                \n                if np.random.rand() < self.local_search_prob:\n                    trial = self.adaptive_local_search(trial, func)\n                \n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    pop[i] = trial\n                \n                if evals >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return pop[best_index]\n\n    def adaptive_local_search(self, solution, func):\n        step_size = (self.f_upper_bound - self.f_lower_bound) * 0.05\n        best_local = solution\n        best_fitness = func(solution)\n\n        for _ in range(5):\n            candidate = best_local + step_size * (np.random.rand(self.dim) - 0.5)\n            candidate = np.clip(candidate, self.f_lower_bound, self.f_upper_bound)\n            candidate_fitness = func(candidate)\n\n            if candidate_fitness < best_fitness:\n                best_fitness = candidate_fitness\n                best_local = candidate\n\n        return best_local", "name": "HybridDEALS", "description": "Hybrid Differential Evolution with Adaptive Local Search combines global exploration using differential evolution and adaptive local refinement to enhance convergence on diverse optimization landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "daf3fa1e-31ba-4f86-a6e0-b68d7fdd586c", "metadata": {"aucs": [0.3878985511475903, 0.37391459075859024, 0.38380158036688183, 0.4230778758658883, 0.42658420660563245, 0.43488200634067975, 0.4073717385439225, 0.4098314818402278, 0.4156748894953425, 0.14306399058590047, 0.13388947995741451, 0.13420331726163715, 0.14338540885074635, 0.11640505217412322, 0.14645974396965067, 0.1237386468518834, 0.15635018412834434, 0.1333283895464742, 0.08198026343971054, 0.0739150216130181, 0.08192491692169057, 0.08328291732170523, 0.08209841900781267, 0.07855970120689248, 0.08623157135416348, 0.08011614495765096, 0.08144756987904622, 0.07153644551263783, 0.07985146373752561, 0.06584778984913009, 0.06662952753855766, 0.06403003141649055, 0.06641130750911395, 0.07322983456280252, 0.06498766792800215, 0.07804881109126649, 0.9212854759755382, 0.8599837903690056, 0.8770598101387332, 0.958449226673253, 0.8999494770182322, 0.8747493349816287, 0.7900745762630003, 0.8887733460683844, 0.8926244401939921, 0.18517036867783832, 0.17923037690961696, 0.18181583786053646, 0.17955386450916144, 0.14962554471993572, 0.16899148769694006, 0.20433349534390566, 0.19626851403465084, 0.19093553359774462, 0.23212447764426092, 0.24596167918880174, 0.24122161976956213, 0.2698852769450554, 0.24527441556049745, 0.24047272142636233, 0.22218762946757498, 0.23828876179454495, 0.23070610460402186, 0.10702532380582075, 0.10257684335387507, 0.11400982232846146, 0.10862598613899976, 0.13132638772271443, 0.10899678107036703, 0.09734110948009256, 0.11194057414266112, 0.12622031524352728, 0.12712521035813407, 0.10227933550319634, 0.14457549354045862, 0.0764399673448859, 0.09600036044700411, 0.10089423796938446, 0.10415004051397969, 0.09744869078523155, 0.08883159948521246, 0.013168202372667803, 0.03925076987039522, 0.04547213437810438, 0.04303428528725328, 0.03292150344374789, 0.019927583994764464, 0.011030732806298849, 0.02462452216597799, 0.015041909191088387, 0.17081198478732984, 0.16260222798513946, 0.15049601115052225, 0.1271914650092587, 0.1360360260956962, 0.13246305536144265, 0.13722430539013497, 0.16277533626048912, 0.1569267901173118, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023228933921549677, 0.00019784733214001093, 0.06748743264283308, 0.06895324251596036, 0.08568590847227753, 0.07118565906466279, 0.08022965481806388, 0.09164817378849655, 0.07692791383590158, 0.07755096792166083, 0.08936712364953436, 0.34713803452837255, 0.3651545462584983, 0.3759312061903666, 0.3637326808777477, 0.34713636120373836, 0.3687539040676029, 0.33999929109570204, 0.3403474558478641, 0.35182351699121583, 0.07871393821031603, 0.09776766360888145, 0.0782726093236763, 0.09079671132554945, 0.08104687230406615, 0.07892686281988026, 0.06788517307778608, 0.07499707295136215, 0.07608844421781702, 0.14726169591370142, 0.16313756151427228, 0.13095508564657243, 0.13610959129857203, 0.13795897156699088, 0.14357844413526477, 0.16274275183504905, 0.13518095837422806, 0.1705642060399728, 0.22397682841926558, 0.2282067399594243, 0.22182520612758583, 0.20535108072199304, 0.21086574052242124, 0.20399034255042214, 0.22763023469310473, 0.22284408024617475, 0.2235492379605809, 0.15507911381750583, 0.1561173716598836, 0.16801561075459226, 0.15096042798030973, 0.15341085417549272, 0.14154623396228638, 0.1549040047314626, 0.1814986467649593, 0.16640260415512242, 0.16838481210631795, 0.17903909830555953, 0.17756514648275257, 0.18573590409081664, 0.17701745670566693, 0.17501824943169597, 0.1831831733860434, 0.17368594727805575, 0.16797161026904994, 0.16387082152525068, 0.15769686247986936, 0.16722417858847327, 0.1699223042550868, 0.16202754678416909, 0.1664386228656276, 0.17309546476176818, 0.15553074648105225, 0.17127949437927714, 0.29447485222064895, 0.17868390952772406, 0.35475405448783826, 0.24190310162534245, 0.17217540792459496, 0.2201220850369474, 0.16336158314669158, 0.214211385792627, 0.19889459202877613, 0.26409211576219993, 0.314673558861569, 0.28322526178453034, 0.18463509870714057, 0.2265837150737069, 0.23524949036672516, 0.18960072042661869, 0.30672352978378326, 0.1897986803870253, 0.1971615400745763, 0.18628152054453562, 0.19200702681200998, 0.19089840028183214, 0.21266872274149073, 0.17765201907455574, 0.19568150397228556, 0.18807075530863127, 0.1786350689960161, 0.06515175378644711, 0.06912526080713377, 0.05859048290995594, 0.07344075048429988, 0.07001036264308025, 0.06296390065295054, 0.06144881366680566, 0.06379286697154551, 0.074633619331957]}, "mutation_prompt": null}
