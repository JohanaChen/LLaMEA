{"id": "8c10bc36-971f-458b-a95d-d346aad64c7b", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.c1 = 1.5  # PSO cognitive constant\n        self.c2 = 1.5  # PSO social constant\n        self.w = 0.7   # PSO inertia weight\n        self.F = 0.5   # DE differential weight\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, \n                                       self.upper_bound, \n                                       (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = np.copy(personal_best_positions[global_best_idx])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # Differential Evolution Step\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = a + self.F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(population[i])\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.CR:\n                        trial[j] = mutant[j]\n                \n                trial_score = func(trial)\n                eval_count += 1\n                \n                if trial_score < personal_best_scores[i]:\n                    personal_best_scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                \n                if trial_score < func(global_best_position):\n                    global_best_position = trial\n\n            # Particle Swarm Optimization Step\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.w * velocities[i] + \n                                 self.c1 * r1 * (personal_best_positions[i] - population[i]) +\n                                 self.c2 * r2 * (global_best_position - population[i]))\n                population[i] += velocities[i]\n                population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                \n                score = func(population[i])\n                eval_count += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = population[i]\n                \n                if score < func(global_best_position):\n                    global_best_position = population[i]\n\n            if eval_count >= self.budget:\n                break\n        \n        return global_best_position", "name": "HybridDEPSO", "description": "A hybrid metaheuristic combining Differential Evolution and Particle Swarm Optimization to adaptively balance exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.23182640575906552, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.5735158609675344, 0.5705014915995075, 0.5603662100253519, 0.18091256549290824, 0.6379609610010801, 0.5343967783806336, 0.5015022373779374, 0.5655475483643634, 0.5828320470924144, 0.11627606583660577, 0.15926692282543353, 0.10157229777070842, 0.03484739833718831, 0.18017793811374427, 9.999999999998899e-05, 0.03955604635211607, 0.20016975391474057, 9.999999999998899e-05, 0.08449717209413576, 0.1066884321826237, 0.10485916427341069, 0.08749210657140627, 0.0674105719585848, 0.061842327527887986, 0.08792712882499276, 0.093591560205176, 0.08885580434645579, 0.07754296162797092, 0.08333856020251873, 0.10099577939901205, 0.08253455696320655, 0.06628994252226061, 0.07792355991512345, 0.0805145520387548, 0.09632399329756902, 0.08407680969859066, 0.9868959478359107, 0.986314385784365, 0.991683397721093, 0.9675333770686365, 0.9858523352699162, 0.09966320213032598, 0.991754605292304, 0.9857992530955558, 0.9917954671820043, 0.2606527270361808, 0.13571269608917313, 0.05739900798087816, 0.2972862111731215, 0.35290614777052665, 0.1430262735583694, 0.08638758769864985, 0.05123106164732305, 0.04937224216674441, 0.6585299763028962, 0.5587743000532253, 0.21051286645736822, 0.6294774713323763, 0.17291907526045402, 0.6286370787763904, 0.3957520423346491, 0.459883426448626, 0.5323385899517756, 0.16384804793194385, 0.21914701271550918, 0.15927326453423318, 0.1440831483289059, 0.26030502524849786, 9.999999999998899e-05, 0.2592987009026321, 0.2204141950801064, 0.22770510382045828, 0.17460138890872134, 0.31904806432346355, 0.3143846135391263, 0.1874008259547263, 0.25594852995003303, 0.13046805401455164, 0.1720266319534467, 0.14659528367251773, 0.23261487103865275, 0.05884421675086016, 0.04298169852434408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040702610916201976, 0.0466144967597355, 0.09152585450273798, 0.012810837448626988, 0.0812764389600128, 0.03768240301247461, 0.07179507543479868, 0.12361914957744591, 0.06756645516358661, 0.0197640827028972, 0.07374767922126979, 0.2554267992971814, 0.05440480968061823, 0.04210125188063507, 0.024897330142691465, 0.13168466869585138, 0.039319877292148364, 0.03153184979652801, 0.09932747250008656, 0.07652130082668995, 0.035458611848037114, 0.03205336857129626, 0.03407482558857644, 9.999999999998899e-05, 0.15737695520236372, 0.16563704988158456, 0.19668999775542317, 0.131062873643921, 0.13873399391350727, 0.051032436599990016, 0.06641608090023388, 0.5053716371706546, 0.4773616389669887, 0.4398903586216568, 0.4694207899587617, 0.47445128638482825, 0.4672929611538371, 0.42095130611542786, 0.503468529402449, 0.4742319184276329, 0.0871076336584683, 0.08093914057745477, 0.10545524186742927, 0.10466468318987932, 0.10060641076082133, 0.09130963570885942, 0.09868474537681249, 0.09211037338673123, 0.12588399496258773, 0.1404701046358503, 0.1502591565329714, 0.15791778115319643, 0.16923975985302475, 0.39900500082934887, 0.15738636679547036, 0.19418538418249398, 0.18460761239067358, 0.22656641147172518, 0.3235097621148889, 0.31427602779461894, 0.2689675379991855, 0.293216064845356, 0.28724172254620284, 0.2607049642522481, 0.31474233826369713, 0.30649616292400383, 0.26075735016891466, 0.15762400134612709, 0.19157112245980012, 0.18297805387768007, 0.25425446503439986, 0.2267156454594963, 0.2205066950377842, 0.20887236433387335, 0.25692682307505554, 0.21100087011389212, 0.17428464469876703, 0.19428862470403718, 0.16888831379647296, 0.19729071861107006, 0.18018195682714433, 0.2049183461160896, 0.16273427147918806, 0.19725111754031577, 0.18881971558681376, 0.18071854411416755, 0.17804352193613104, 0.1854634879063497, 0.17323761514448088, 0.1713638938579719, 0.17363964731397463, 0.193044675117778, 0.17902897513613603, 0.18137715623437134, 0.18497974019483265, 0.13023422753306224, 0.11281403275025181, 0.7221853480607401, 0.1984481159032434, 0.1863231205888134, 0.10616433516322554, 0.1659375173194898, 0.7181422420121579, 0.7396553363146706, 0.20426171649562952, 0.10858987569019463, 0.193697017375139, 0.7156601303211596, 0.20528494774533457, 0.6886829914670833, 0.18409215346765406, 0.6280148353431921, 0.17676349955385118, 0.1880554676321059, 0.18681796758976332, 0.17298022600136698, 0.17875067048894822, 0.17220687299725101, 0.1753784777669103, 0.1862437639569977, 0.1774648623669205, 0.07371236945118931, 0.06604615841520989, 0.09698832823451542, 0.0652514791162746, 0.07602682174827935, 0.0737657777532752, 0.0818343622451323, 0.07128063972002874, 0.0772479784390655]}, "mutation_prompt": null}
{"id": "f8cd613e-9464-43de-9e15-cb68f23d59bc", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.c1 = 1.5  # PSO cognitive constant\n        self.c2 = 1.5  # PSO social constant\n        self.w = 0.7   # PSO inertia weight\n        self.F = 0.5   # DE differential weight\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, \n                                       self.upper_bound, \n                                       (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = np.copy(personal_best_positions[global_best_idx])\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # Differential Evolution Step\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = a + self.F * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(population[i])\n                \n                for j in range(self.dim):\n                    if np.random.rand() < self.CR:\n                        trial[j] = mutant[j]\n                \n                trial_score = func(trial)\n                eval_count += 1\n                \n                if trial_score < personal_best_scores[i]:\n                    personal_best_scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                \n                if trial_score < func(global_best_position):\n                    global_best_position = trial\n\n            # Particle Swarm Optimization Step\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.w * velocities[i] + \n                                 self.c1 * r1 * (personal_best_positions[i] - population[i]) +\n                                 self.c2 * r2 * (global_best_position - population[i]))\n                population[i] += velocities[i]\n                population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n                \n                score = func(population[i])\n                eval_count += 1\n                \n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = population[i]\n                \n                if score < func(global_best_position):\n                    global_best_position = population[i]\n\n            if eval_count >= self.budget:\n                break\n        \n        return global_best_position", "name": "HybridDEPSO", "description": "A hybrid metaheuristic combining Differential Evolution and Particle Swarm Optimization to adaptively balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8c10bc36-971f-458b-a95d-d346aad64c7b", "metadata": {"aucs": [0.5735158609675344, 0.5705014915995075, 0.5603662100253519, 0.18091256549290824, 0.6379609610010801, 0.5343967783806336, 0.5015022373779374, 0.5655475483643634, 0.5828320470924144, 0.11627606583660577, 0.15926692282543353, 0.10157229777070842, 0.03484739833718831, 0.18017793811374427, 9.999999999998899e-05, 0.03955604635211607, 0.20016975391474057, 9.999999999998899e-05, 0.08449717209413576, 0.1066884321826237, 0.10485916427341069, 0.08749210657140627, 0.0674105719585848, 0.061842327527887986, 0.08792712882499276, 0.093591560205176, 0.08885580434645579, 0.07754296162797092, 0.08333856020251873, 0.10099577939901205, 0.08253455696320655, 0.06628994252226061, 0.07792355991512345, 0.0805145520387548, 0.09632399329756902, 0.08407680969859066, 0.9868959478359107, 0.986314385784365, 0.991683397721093, 0.9675333770686365, 0.9858523352699162, 0.09966320213032598, 0.991754605292304, 0.9857992530955558, 0.9917954671820043, 0.2606527270361808, 0.13571269608917313, 0.05739900798087816, 0.2972862111731215, 0.35290614777052665, 0.1430262735583694, 0.08638758769864985, 0.05123106164732305, 0.04937224216674441, 0.6585299763028962, 0.5587743000532253, 0.21051286645736822, 0.6294774713323763, 0.17291907526045402, 0.6286370787763904, 0.3957520423346491, 0.459883426448626, 0.5323385899517756, 0.16384804793194385, 0.21914701271550918, 0.15927326453423318, 0.1440831483289059, 0.26030502524849786, 9.999999999998899e-05, 0.2592987009026321, 0.2204141950801064, 0.22770510382045828, 0.17460138890872134, 0.31904806432346355, 0.3143846135391263, 0.1874008259547263, 0.25594852995003303, 0.13046805401455164, 0.1720266319534467, 0.14659528367251773, 0.23261487103865275, 0.05884421675086016, 0.04298169852434408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040702610916201976, 0.0466144967597355, 0.09152585450273798, 0.012810837448626988, 0.0812764389600128, 0.03768240301247461, 0.07179507543479868, 0.12361914957744591, 0.06756645516358661, 0.0197640827028972, 0.07374767922126979, 0.2554267992971814, 0.05440480968061823, 0.04210125188063507, 0.024897330142691465, 0.13168466869585138, 0.039319877292148364, 0.03153184979652801, 0.09932747250008656, 0.07652130082668995, 0.035458611848037114, 0.03205336857129626, 0.03407482558857644, 9.999999999998899e-05, 0.15737695520236372, 0.16563704988158456, 0.19668999775542317, 0.131062873643921, 0.13873399391350727, 0.051032436599990016, 0.06641608090023388, 0.5053716371706546, 0.4773616389669887, 0.4398903586216568, 0.4694207899587617, 0.47445128638482825, 0.4672929611538371, 0.42095130611542786, 0.503468529402449, 0.4742319184276329, 0.0871076336584683, 0.08093914057745477, 0.10545524186742927, 0.10466468318987932, 0.10060641076082133, 0.09130963570885942, 0.09868474537681249, 0.09211037338673123, 0.12588399496258773, 0.1404701046358503, 0.1502591565329714, 0.15791778115319643, 0.16923975985302475, 0.39900500082934887, 0.15738636679547036, 0.19418538418249398, 0.18460761239067358, 0.22656641147172518, 0.3235097621148889, 0.31427602779461894, 0.2689675379991855, 0.293216064845356, 0.28724172254620284, 0.2607049642522481, 0.31474233826369713, 0.30649616292400383, 0.26075735016891466, 0.15762400134612709, 0.19157112245980012, 0.18297805387768007, 0.25425446503439986, 0.2267156454594963, 0.2205066950377842, 0.20887236433387335, 0.25692682307505554, 0.21100087011389212, 0.17428464469876703, 0.19428862470403718, 0.16888831379647296, 0.19729071861107006, 0.18018195682714433, 0.2049183461160896, 0.16273427147918806, 0.19725111754031577, 0.18881971558681376, 0.18071854411416755, 0.17804352193613104, 0.1854634879063497, 0.17323761514448088, 0.1713638938579719, 0.17363964731397463, 0.193044675117778, 0.17902897513613603, 0.18137715623437134, 0.18497974019483265, 0.13023422753306224, 0.11281403275025181, 0.7221853480607401, 0.1984481159032434, 0.1863231205888134, 0.10616433516322554, 0.1659375173194898, 0.7181422420121579, 0.7396553363146706, 0.20426171649562952, 0.10858987569019463, 0.193697017375139, 0.7156601303211596, 0.20528494774533457, 0.6886829914670833, 0.18409215346765406, 0.6280148353431921, 0.17676349955385118, 0.1880554676321059, 0.18681796758976332, 0.17298022600136698, 0.17875067048894822, 0.17220687299725101, 0.1753784777669103, 0.1862437639569977, 0.1774648623669205, 0.07371236945118931, 0.06604615841520989, 0.09698832823451542, 0.0652514791162746, 0.07602682174827935, 0.0737657777532752, 0.0818343622451323, 0.07128063972002874, 0.0772479784390655]}, "mutation_prompt": null}
