{"id": "4feb033e-7a60-4b76-b20a-9b33e0079f79", "solution": "import numpy as np\n\nclass HybridDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n        self.current_eval = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        self.current_eval += self.population_size\n        \n        # Main loop\n        while self.current_eval < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[idxs]\n                mutant = np.clip(x0 + self.f * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.cr\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_eval += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                # Early stopping if budget is exhausted\n                if self.current_eval >= self.budget:\n                    break\n\n            # Adaptive Local Search\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            if np.random.rand() < 0.2:  # 20% chance to perform local search\n                perturbation = np.random.normal(0, 0.1, self.dim)\n                local_solution = np.clip(best_individual + perturbation, self.lower_bound, self.upper_bound)\n                local_fitness = func(local_solution)\n                self.current_eval += 1\n                if local_fitness < fitness[best_idx]:\n                    fitness[best_idx] = local_fitness\n                    population[best_idx] = local_solution\n\n        return population[np.argmin(fitness)]\n\n# Example usage:\n# optimizer = HybridDEOptimizer(budget=10000, dim=10)\n# best_solution = optimizer(func)  # where func is the black box function to optimize", "name": "HybridDEOptimizer", "description": "Hybrid Differential Evolution with Adaptive Local Search for robust exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.2706246307311551, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6236788606102748, 0.6095552766691321, 0.6179135324089319, 0.6235220025743753, 0.6180709985936446, 0.6633520780495189, 0.6355622757970903, 0.6634146220043142, 0.6351700372769296, 0.41477267358105996, 0.3514180252358934, 0.3720501032929655, 0.3684685264613513, 0.3462541899718876, 0.38989538454287365, 0.3660155717389092, 0.4118262871435786, 0.3935851551303312, 0.08843142036290541, 0.09615278442911335, 0.09123643487039024, 0.10898488557844743, 0.08382061874476476, 0.08851433481579885, 0.10184006528299183, 0.10385378214456831, 0.11228219148686458, 0.08811524045260466, 0.08535043279717214, 0.11188257728322148, 0.09126203611296824, 0.08254103545340563, 0.08297502482273489, 0.09373188992337911, 0.08507606775241094, 0.0861566462059633, 0.9662320426212846, 0.95733992359723, 0.8987249982250516, 0.9477257487992891, 0.9781469676908757, 0.9492080530059048, 0.9518066231496765, 0.9462936454332709, 0.9568877411377308, 0.2781001669027796, 0.2616098111371715, 0.2841902566713792, 0.2758422293972198, 0.263011608584966, 0.27523251527703185, 0.27163917264519677, 0.2944364012509836, 0.3059175308848061, 0.48782994342721353, 0.5215637741528103, 0.4245042007914215, 0.5486589299689935, 0.5576555972527675, 0.6184123757582026, 0.4666776042952415, 0.5795366999026518, 0.5967818951099471, 0.20993508366769909, 0.17427454371454154, 0.20916556799241648, 0.19752518728287904, 0.1929563155970756, 0.18378861108371225, 0.21301843381193908, 0.19393811025571617, 0.20900861913551227, 0.27721625001056804, 0.291845266965979, 0.2111519200712445, 0.18661520930577136, 0.18644882452452893, 0.169601984691231, 0.16693274365856758, 0.16319222170944303, 0.18344811924580084, 0.16068117611110289, 0.10338064671755198, 0.13345699992995452, 0.15410818401618975, 0.13791123362470425, 0.15533740044699407, 0.12436344438808389, 0.1251895656154376, 0.10793726866347586, 0.26400522712578056, 0.25650190253896443, 0.23782350567069965, 0.23302281225866406, 0.2426535222501759, 0.258838663677216, 0.2719762443042336, 0.23942227987509734, 0.2813456620842153, 0.0497410388678603, 0.009233533375061387, 0.026977485141140956, 0.07065110818845732, 0.02764976033980815, 0.03745800832065993, 0.025472226323630442, 0.053042674853350014, 0.026118500452400495, 0.14760717735180806, 0.1537758370083384, 0.17791360380686505, 0.15745647569716437, 0.15986751194900406, 0.17930941370764797, 0.17428845221640388, 0.15359213396537452, 0.1713793353778439, 0.47524758330792627, 0.49403656508650984, 0.5078755563787658, 0.4717302237153298, 0.47687184186606, 0.49244331009936027, 0.47667266069881287, 0.4715625458359537, 0.4996302440133077, 0.07653941864232094, 0.09283785902405084, 0.1079062258146487, 0.09251345105934983, 0.09028173056555244, 0.0976131599303317, 0.08078499578519582, 0.09715326826304993, 0.08714388062082323, 0.24997950493667753, 0.1649801873802238, 0.146055053044564, 0.15962880263413592, 0.14529792554850862, 0.1626182686359643, 0.16148881088278155, 0.15126136174648197, 0.22402227832230814, 0.26821668368106744, 0.2584591321924522, 0.2871053782525784, 0.25040797308974294, 0.25774887947467207, 0.2448007488243975, 0.2813317689890906, 0.28296548057887505, 0.2751566402894844, 0.22153443200593848, 0.19027232779773462, 0.2084251254905345, 0.1929064041804357, 0.19891905247056563, 0.18455667637922268, 0.210826306471244, 0.2193393246229347, 0.21446060221800733, 0.17651869882074478, 0.18684218065244418, 0.19286955830577424, 0.17198345231089207, 0.18291011577688354, 0.18628152066694992, 0.25283216546654763, 0.1933653958584387, 0.1859207684489529, 0.1844102245568543, 0.18421754176560623, 0.18128009118710553, 0.17709362813879392, 0.18046137158276665, 0.18354252373866298, 0.18590769393966367, 0.17426643137825903, 0.19316878486175193, 0.16028045684521153, 0.49972450046410777, 0.7260352305753045, 0.17118070027740628, 0.24815679498161847, 0.6265951035955217, 0.18410589285816814, 0.18956891612449145, 0.2068375115165525, 0.4825695283950947, 0.5172274186869501, 0.19673279432134438, 0.27858638306307526, 0.25974635195358864, 0.4775346518250244, 0.20506567870229697, 0.5173484930344494, 0.20856433602466318, 0.17083303877997225, 0.18505806209272868, 0.19628830330104818, 0.20163218332777355, 0.18098100693235386, 0.1953337745277458, 0.21707296988082736, 0.19841756580737302, 0.18167010832819774, 0.06544908060677168, 0.0721567183201649, 0.0807225798798028, 0.07129062629585947, 0.06103343477306644, 0.07196111550089312, 0.06777506054110016, 0.07568111630181007, 0.06996839554222789]}, "mutation_prompt": null}
{"id": "c136a0f6-f698-4370-8280-da01737ac2b8", "solution": "import numpy as np\n\nclass HybridDEOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n        self.current_eval = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        self.current_eval += self.population_size\n        \n        # Main loop\n        while self.current_eval < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[idxs]\n                self.f = 0.5 + 0.3 * np.random.rand()  # Adaptive differential weight\n                mutant = np.clip(x0 + self.f * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.cr\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.current_eval += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                # Early stopping if budget is exhausted\n                if self.current_eval >= self.budget:\n                    break\n\n            # Adaptive Local Search\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            if np.random.rand() < 0.2:  # 20% chance to perform local search\n                perturbation = np.random.normal(0, 0.1, self.dim)\n                local_solution = np.clip(best_individual + perturbation, self.lower_bound, self.upper_bound)\n                local_fitness = func(local_solution)\n                self.current_eval += 1\n                if local_fitness < fitness[best_idx]:\n                    fitness[best_idx] = local_fitness\n                    population[best_idx] = local_solution\n\n        return population[np.argmin(fitness)]\n\n# Example usage:\n# optimizer = HybridDEOptimizer(budget=10000, dim=10)\n# best_solution = optimizer(func)  # where func is the black box function to optimize", "name": "HybridDEOptimizer", "description": "Enhanced mutation strategy by incorporating an adaptive differential weight to improve exploration.", "configspace": "", "generation": 1, "fitness": 0.33928581632919214, "feedback": "", "error": "", "parent_id": "4feb033e-7a60-4b76-b20a-9b33e0079f79", "metadata": {"aucs": [0.7364739510827039, 0.7551136303118248, 0.7577674768197933, 0.7277974480656666, 0.7520941775856995, 0.7377691665357584, 0.7227284050533183, 0.7631932307971063, 0.7351289428687073, 0.5613714515972772, 0.5549606168851063, 0.5806181666753933, 0.5239160469484629, 0.5608560250766117, 0.5684478634768424, 0.569868236594876, 0.5487134950345184, 0.5586715705716081, 0.09093320328985721, 0.10166777078272904, 0.10512346196830769, 0.11405213613178855, 0.09972102793166737, 0.10943159152032877, 0.1024086659204082, 0.0959525699713567, 0.09936344019993726, 0.10118260479864016, 0.09044395366392821, 0.08807120271275559, 0.1105708670515334, 0.09504390086536152, 0.09363034275090543, 0.10007909357109479, 0.0868127335549963, 0.09516769363138355, 0.90610709202963, 0.9685039271637378, 0.9318735963388671, 0.9157101549411106, 0.9370297850923129, 0.9700976713687374, 0.9595458039868501, 0.8307540102278732, 0.9451690597297299, 0.3866063149519322, 0.3843123811951671, 0.3601016887955477, 0.3798798020987698, 0.3922986632500124, 0.3613369815807347, 0.37890021186239553, 0.4203391456971427, 0.4082435711409558, 0.7732715391063624, 0.718776793896668, 0.6407235121631678, 0.6198310058501273, 0.7372585620144415, 0.7136565591381565, 0.6720347318938668, 0.7065896883772822, 0.6795798292660893, 0.2780643662546053, 0.35464404968654284, 0.2958972519727805, 0.34057676828319705, 0.27989605747911406, 0.2904245686315816, 0.2620353106182389, 0.26141255328046087, 0.30134078580427814, 0.204495063800469, 0.24092529115087036, 0.2996096627902516, 0.249330165800008, 0.34077447648143855, 0.26623557009787635, 0.29368326493751695, 0.2664987915372884, 0.28337602097822434, 0.300987911393773, 0.30339020650567994, 0.20004063297671826, 0.2541675334873722, 0.2517952897881469, 0.25877573860472414, 0.2632911678340387, 0.2736402608015721, 0.28721025245075005, 0.4090960478500838, 0.3936949574169619, 0.38103266973129946, 0.4075996497082026, 0.3969355807270587, 0.41539508566877226, 0.45376014200444303, 0.42938741426195526, 0.43649280326253836, 0.09157021031486767, 0.06698682548505708, 0.12330675276095082, 0.09055227127986731, 0.14206884905783612, 0.12320337319405683, 0.12884448607183074, 0.14854516507055437, 0.13196476650360178, 0.23136012140484608, 0.21462234347635445, 0.23172976165219938, 0.2572853849818062, 0.2683423191448452, 0.25089811341881685, 0.2231617912253273, 0.2501074442654564, 0.23793621348896976, 0.6378651848316654, 0.6183776168052529, 0.5749783130711845, 0.5930113913068324, 0.5621964404726452, 0.6180293948462008, 0.6026804637142398, 0.6156244310186056, 0.5983733057957749, 0.08980987201573531, 0.09741503697886855, 0.097300757671415, 0.08766975444112834, 0.08257589656102315, 0.08920074979924175, 0.09869466755554746, 0.09441449127607682, 0.09323990995426434, 0.15353265817179873, 0.23936173714025888, 0.15301152485728076, 0.16150662194263077, 0.14498812814011963, 0.14820823302597963, 0.1728041579489078, 0.16302180674907318, 0.16508112336489378, 0.3145466399290737, 0.3371349424505583, 0.3097009158024784, 0.3391620292727051, 0.3298667001894361, 0.32073336167830835, 0.3500265398012945, 0.36382426419628877, 0.3619050662757787, 0.2578890789813688, 0.27489011971506827, 0.2684189225921606, 0.2562666411434237, 0.25572876327969685, 0.2525272684558818, 0.29526209117625735, 0.28497488800975646, 0.26636816255315576, 0.18603411322048802, 0.20010593613110228, 0.19041345421859934, 0.1913572326014289, 0.18268299705520497, 0.20801161711266603, 0.1952348852832354, 0.1897059758938605, 0.1838130314784251, 0.18242985474448403, 0.19390429216402227, 0.1847789407299386, 0.20659575382401818, 0.18911962318849052, 0.1822257067047146, 0.20930672405557038, 0.19768826097801306, 0.1753519833503544, 0.17348820312665558, 0.5858347108685844, 0.5484167321319007, 0.18617381627330065, 0.18622914256526335, 0.5584418193096072, 0.6457216638479993, 0.539413350132508, 0.38086783507868194, 0.6306376472741114, 0.6775381106885916, 0.2013341386955485, 0.5090891163743065, 0.5535530086879533, 0.1623130736190036, 0.741802988831215, 0.7072024994054787, 0.20901173550436847, 0.17472313729025934, 0.2026221899475681, 0.23462178506295328, 0.19349627973186212, 0.18143179511455332, 0.18347869038228937, 0.1967454740140494, 0.1716783473583262, 0.18271117008153337, 0.07963051360831142, 0.07889057673638378, 0.07417708984770177, 0.07682700055647607, 0.08932965638303736, 0.06977662773112225, 0.07613864330020426, 0.07686608888205415, 0.07248341865576602]}, "mutation_prompt": null}
