{"id": "af10e047-acc3-4916-9666-5f8ed9525008", "solution": "import numpy as np\n\nclass HybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(50, self.budget // 2)\n        self.velocity_clamp = (self.lower_bound, self.upper_bound)\n        self.inertia_weight = 0.7\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        \n        global_best_position = None\n        global_best_score = float('inf')\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate current solution\n                score = func(population[i])\n                evaluations += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = population[i]\n                \n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = population[i]\n            \n            # Update inertia weight dynamically\n            self.inertia_weight = 0.4 + (0.3 * (self.budget - evaluations) / self.budget)\n            \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                \n                cognitive_component = self.cognitive_weight * r1 * (personal_best_positions[i] - population[i])\n                social_component = self.social_weight * r2 * (global_best_position - population[i])\n                \n                velocities[i] = (self.inertia_weight * velocities[i]) + cognitive_component + social_component\n                velocities[i] = np.clip(velocities[i], *self.velocity_clamp)\n                \n                population[i] += velocities[i]\n                population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n            \n            # Introduce mutation to avoid local optima stagnation\n            mutation_probability = 0.1\n            for i in range(self.population_size):\n                if np.random.rand() < mutation_probability:\n                    mutation_vector = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    population[i] = mutation_vector\n        \n        return global_best_position", "name": "HybridOptimizer", "description": "A hybrid evolutionary and swarm-based algorithm leveraging dynamic adaptive strategies to explore and exploit the search space efficiently within a limited budget.", "configspace": "", "generation": 0, "fitness": 0.1962190264980307, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.36511532851949025, 0.36511532851949025, 0.36511532851949025, 0.403421747842892, 0.403421747842892, 0.403421747842892, 0.40447355255576845, 0.40447355255576845, 0.40447355255576845, 0.007414177431530833, 0.007414177431530833, 0.007414177431530833, 0.019661951846370873, 0.019661951846370873, 0.019661951846370873, 0.03320009065532814, 0.03320009065532814, 0.03320009065532814, 0.08450013920390465, 0.08450013920390465, 0.08450013920390465, 0.0774307445555571, 0.0774307445555571, 0.0774307445555571, 0.07908203859709406, 0.07908203859709406, 0.07908203859709406, 0.08877967160613609, 0.08877967160613609, 0.08877967160613609, 0.0641877942431125, 0.0641877942431125, 0.0641877942431125, 0.09735532377422551, 0.09735532377422551, 0.09735532377422551, 0.9836950512766829, 0.9836950512766829, 0.9836950512766829, 0.9858063871090897, 0.9858063871090897, 0.9858063871090897, 0.9838317880719316, 0.9838317880719316, 0.9838317880719316, 0.19991450380666453, 0.19991450380666453, 0.19991450380666453, 0.14292567930488875, 0.14292567930488875, 0.14292567930488875, 0.1669246504028713, 0.1669246504028713, 0.1669246504028713, 0.2714995276085168, 0.2714995276085168, 0.2714995276085168, 0.17517312968467902, 0.17517312968467902, 0.17517312968467902, 0.25665686417409717, 0.25665686417409717, 0.25665686417409717, 0.09169834337471894, 0.09169834337471894, 0.09169834337471894, 0.10648611725386714, 0.10648611725386714, 0.10648611725386714, 0.12119892538313692, 0.12119892538313692, 0.12119892538313692, 0.1180826952263524, 0.1180826952263524, 0.1180826952263524, 0.10699780290026484, 0.10699780290026484, 0.10699780290026484, 0.08309597022833581, 0.08309597022833581, 0.08309597022833581, 0.0002843482576854184, 0.0002843482576854184, 0.0002843482576854184, 0.004143673460347941, 0.004143673460347941, 0.004143673460347941, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14837173449690177, 0.14837173449690177, 0.14837173449690177, 0.08281487332971971, 0.08281487332971971, 0.08281487332971971, 0.06802161882060409, 0.06802161882060409, 0.06802161882060409, 0.008112035226566672, 0.008112035226566672, 0.008112035226566672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04937077146979396, 0.04937077146979396, 0.04937077146979396, 0.08678159979788047, 0.08678159979788047, 0.08678159979788047, 0.05847186554229733, 0.05847186554229733, 0.05847186554229733, 0.32067007195012087, 0.32067007195012087, 0.32067007195012087, 0.38818133619611594, 0.38818133619611594, 0.38818133619611594, 0.4020617283442681, 0.4020617283442681, 0.4020617283442681, 0.11274987853742602, 0.11274987853742602, 0.11274987853742602, 0.07757034069475155, 0.07757034069475155, 0.07757034069475155, 0.07623537078899756, 0.07623537078899756, 0.07623537078899756, 0.23250518003596476, 0.23250518003596476, 0.23250518003596476, 0.2211920661023533, 0.2211920661023533, 0.2211920661023533, 0.14111969889070386, 0.14111969889070386, 0.14111969889070386, 0.23980310242339076, 0.23980310242339076, 0.23980310242339076, 0.2663665297735719, 0.2663665297735719, 0.2663665297735719, 0.232209802337363, 0.232209802337363, 0.232209802337363, 0.17122036951788555, 0.17122036951788555, 0.17122036951788555, 0.17211868526277774, 0.17211868526277774, 0.17211868526277774, 0.1813443479972371, 0.1813443479972371, 0.1813443479972371, 0.1846563345851222, 0.1846563345851222, 0.1846563345851222, 0.2100195606338815, 0.2100195606338815, 0.2100195606338815, 0.19417475446313737, 0.19417475446313737, 0.19417475446313737, 0.17825922103336211, 0.17825922103336211, 0.17825922103336211, 0.18051909785007825, 0.18051909785007825, 0.18051909785007825, 0.1769403887939972, 0.1769403887939972, 0.1769403887939972, 0.6108046678158567, 0.6108046678158567, 0.6108046678158567, 0.2863327095053374, 0.2863327095053374, 0.2863327095053374, 0.5665040070185242, 0.5665040070185242, 0.5665040070185242, 0.16686821821045794, 0.16686821821045794, 0.16686821821045794, 0.19652767201313004, 0.19652767201313004, 0.19652767201313004, 0.14491584757239784, 0.14491584757239784, 0.14491584757239784, 0.17416745006483614, 0.17416745006483614, 0.17416745006483614, 0.17905384838663196, 0.17905384838663196, 0.17905384838663196, 0.19642048566011905, 0.19642048566011905, 0.19642048566011905, 0.07437854013767498, 0.07437854013767498, 0.07437854013767498, 0.06965342982841771, 0.06965342982841771, 0.06965342982841771, 0.0769426483930129, 0.0769426483930129, 0.0769426483930129]}, "mutation_prompt": null}
{"id": "60723148-b601-4416-9bb0-c24a3281b50d", "solution": "import numpy as np\n\nclass HybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(50, self.budget // 2)\n        self.velocity_clamp = (self.lower_bound, self.upper_bound)\n        self.inertia_weight = 0.7\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        \n        global_best_position = None\n        global_best_score = float('inf')\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate current solution\n                score = func(population[i])\n                evaluations += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = population[i]\n                \n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = population[i]\n            \n            # Update inertia weight dynamically\n            self.inertia_weight = 0.4 + (0.3 * (self.budget - evaluations) / self.budget)\n            \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                \n                cognitive_component = self.cognitive_weight * r1 * (personal_best_positions[i] - population[i])\n                social_component = self.social_weight * r2 * (global_best_position - population[i])\n                \n                velocities[i] = (self.inertia_weight * velocities[i]) + cognitive_component + social_component\n                velocities[i] = np.clip(velocities[i], *self.velocity_clamp)\n                \n                population[i] += velocities[i]\n                population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n            \n            # Introduce mutation to avoid local optima stagnation\n            mutation_probability = 0.1\n            for i in range(self.population_size):\n                if np.random.rand() < mutation_probability:\n                    mutation_vector = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    population[i] = mutation_vector\n        \n        return global_best_position", "name": "HybridOptimizer", "description": "A hybrid evolutionary and swarm-based algorithm leveraging dynamic adaptive strategies to explore and exploit the search space efficiently within a limited budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af10e047-acc3-4916-9666-5f8ed9525008", "metadata": {"aucs": [0.36511532851949025, 0.36511532851949025, 0.36511532851949025, 0.403421747842892, 0.403421747842892, 0.403421747842892, 0.40447355255576845, 0.40447355255576845, 0.40447355255576845, 0.007414177431530833, 0.007414177431530833, 0.007414177431530833, 0.019661951846370873, 0.019661951846370873, 0.019661951846370873, 0.03320009065532814, 0.03320009065532814, 0.03320009065532814, 0.08450013920390465, 0.08450013920390465, 0.08450013920390465, 0.0774307445555571, 0.0774307445555571, 0.0774307445555571, 0.07908203859709406, 0.07908203859709406, 0.07908203859709406, 0.08877967160613609, 0.08877967160613609, 0.08877967160613609, 0.0641877942431125, 0.0641877942431125, 0.0641877942431125, 0.09735532377422551, 0.09735532377422551, 0.09735532377422551, 0.9836950512766829, 0.9836950512766829, 0.9836950512766829, 0.9858063871090897, 0.9858063871090897, 0.9858063871090897, 0.9838317880719316, 0.9838317880719316, 0.9838317880719316, 0.19991450380666453, 0.19991450380666453, 0.19991450380666453, 0.14292567930488875, 0.14292567930488875, 0.14292567930488875, 0.1669246504028713, 0.1669246504028713, 0.1669246504028713, 0.2714995276085168, 0.2714995276085168, 0.2714995276085168, 0.17517312968467902, 0.17517312968467902, 0.17517312968467902, 0.25665686417409717, 0.25665686417409717, 0.25665686417409717, 0.09169834337471894, 0.09169834337471894, 0.09169834337471894, 0.10648611725386714, 0.10648611725386714, 0.10648611725386714, 0.12119892538313692, 0.12119892538313692, 0.12119892538313692, 0.1180826952263524, 0.1180826952263524, 0.1180826952263524, 0.10699780290026484, 0.10699780290026484, 0.10699780290026484, 0.08309597022833581, 0.08309597022833581, 0.08309597022833581, 0.0002843482576854184, 0.0002843482576854184, 0.0002843482576854184, 0.004143673460347941, 0.004143673460347941, 0.004143673460347941, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14837173449690177, 0.14837173449690177, 0.14837173449690177, 0.08281487332971971, 0.08281487332971971, 0.08281487332971971, 0.06802161882060409, 0.06802161882060409, 0.06802161882060409, 0.008112035226566672, 0.008112035226566672, 0.008112035226566672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04937077146979396, 0.04937077146979396, 0.04937077146979396, 0.08678159979788047, 0.08678159979788047, 0.08678159979788047, 0.05847186554229733, 0.05847186554229733, 0.05847186554229733, 0.32067007195012087, 0.32067007195012087, 0.32067007195012087, 0.38818133619611594, 0.38818133619611594, 0.38818133619611594, 0.4020617283442681, 0.4020617283442681, 0.4020617283442681, 0.11274987853742602, 0.11274987853742602, 0.11274987853742602, 0.07757034069475155, 0.07757034069475155, 0.07757034069475155, 0.07623537078899756, 0.07623537078899756, 0.07623537078899756, 0.23250518003596476, 0.23250518003596476, 0.23250518003596476, 0.2211920661023533, 0.2211920661023533, 0.2211920661023533, 0.14111969889070386, 0.14111969889070386, 0.14111969889070386, 0.23980310242339076, 0.23980310242339076, 0.23980310242339076, 0.2663665297735719, 0.2663665297735719, 0.2663665297735719, 0.232209802337363, 0.232209802337363, 0.232209802337363, 0.17122036951788555, 0.17122036951788555, 0.17122036951788555, 0.17211868526277774, 0.17211868526277774, 0.17211868526277774, 0.1813443479972371, 0.1813443479972371, 0.1813443479972371, 0.1846563345851222, 0.1846563345851222, 0.1846563345851222, 0.2100195606338815, 0.2100195606338815, 0.2100195606338815, 0.19417475446313737, 0.19417475446313737, 0.19417475446313737, 0.17825922103336211, 0.17825922103336211, 0.17825922103336211, 0.18051909785007825, 0.18051909785007825, 0.18051909785007825, 0.1769403887939972, 0.1769403887939972, 0.1769403887939972, 0.6108046678158567, 0.6108046678158567, 0.6108046678158567, 0.2863327095053374, 0.2863327095053374, 0.2863327095053374, 0.5665040070185242, 0.5665040070185242, 0.5665040070185242, 0.16686821821045794, 0.16686821821045794, 0.16686821821045794, 0.19652767201313004, 0.19652767201313004, 0.19652767201313004, 0.14491584757239784, 0.14491584757239784, 0.14491584757239784, 0.17416745006483614, 0.17416745006483614, 0.17416745006483614, 0.17905384838663196, 0.17905384838663196, 0.17905384838663196, 0.19642048566011905, 0.19642048566011905, 0.19642048566011905, 0.07437854013767498, 0.07437854013767498, 0.07437854013767498, 0.06965342982841771, 0.06965342982841771, 0.06965342982841771, 0.0769426483930129, 0.0769426483930129, 0.0769426483930129]}, "mutation_prompt": null}
