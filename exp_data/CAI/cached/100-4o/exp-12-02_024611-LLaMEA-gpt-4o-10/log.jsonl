{"id": "62cf6a15-9a2e-4291-ba7d-bd953d7f1fef", "solution": "import numpy as np\n\nclass MSPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.num_particles = 30\n        self.num_swarms = 5\n        self.velocity_max = 0.2 * (self.bounds[1] - self.bounds[0])\n        self.c1 = 1.5  # personal best weight\n        self.c2 = 1.5  # global best weight\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        particles = np.random.uniform(self.bounds[0], self.bounds[1], (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.velocity_max, self.velocity_max, (self.num_particles, self.dim))\n        personal_bests = particles.copy()\n        personal_best_scores = np.array([func(x) for x in personal_bests])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_bests[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evals = self.num_particles\n        while evals < self.budget:\n            for swarm_id in range(self.num_swarms):\n                swarm_start = swarm_id * self.num_particles // self.num_swarms\n                swarm_end = (swarm_id + 1) * self.num_particles // self.num_swarms\n                for i in range(swarm_start, swarm_end):\n                    r1, r2 = np.random.rand(2)\n                    velocities[i] = (velocities[i] \n                                     + self.c1 * r1 * (personal_bests[i] - particles[i])\n                                     + self.c2 * r2 * (global_best - particles[i]))\n                    velocities[i] = np.clip(velocities[i], -self.velocity_max, self.velocity_max)\n                    particles[i] += velocities[i]\n                    particles[i] = np.clip(particles[i], self.bounds[0], self.bounds[1])\n\n                    score = func(particles[i])\n                    evals += 1\n                    if score < personal_best_scores[i]:\n                        personal_bests[i] = particles[i]\n                        personal_best_scores[i] = score\n                        if score < global_best_score:\n                            global_best = particles[i]\n                            global_best_score = score\n\n                    if evals >= self.budget:\n                        break\n                if evals >= self.budget:\n                    break\n        return global_best", "name": "MSPSO", "description": "A Multi-Swarm Particle Swarm Optimization (MSPSO) with adaptive neighborhood search balancing exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.17639712735197488, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.3828425007265551, 0.3828425007265551, 0.3828425007265551, 0.297799066361654, 0.297799066361654, 0.297799066361654, 0.3213902523271488, 0.3213902523271488, 0.3213902523271488, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07136943936479345, 0.07136943936479345, 0.07136943936479345, 0.07590681271957034, 0.07590681271957034, 0.07590681271957034, 0.07573252921938145, 0.07573252921938145, 0.07573252921938145, 0.0534161026395239, 0.0534161026395239, 0.0534161026395239, 0.05444840533825468, 0.05444840533825468, 0.05444840533825468, 0.06561416165730005, 0.06561416165730005, 0.06561416165730005, 0.9777417900613232, 0.9777417900613232, 0.9777417900613232, 0.9859368570299398, 0.9859368570299398, 0.9859368570299398, 0.9846094216991067, 0.9846094216991067, 0.9846094216991067, 0.18487608665732003, 0.18487608665732003, 0.18487608665732003, 0.1541373080160502, 0.1541373080160502, 0.1541373080160502, 0.14858571519350716, 0.14858571519350716, 0.14858571519350716, 0.1950896264147166, 0.1950896264147166, 0.1950896264147166, 0.20409701289925142, 0.20409701289925142, 0.20409701289925142, 0.18930749570695116, 0.18930749570695116, 0.18930749570695116, 0.07689702612646343, 0.07689702612646343, 0.07689702612646343, 0.11115231519486135, 0.11115231519486135, 0.11115231519486135, 0.10187364320993275, 0.10187364320993275, 0.10187364320993275, 0.12695272571823857, 0.12695272571823857, 0.12695272571823857, 0.12941678115554933, 0.12941678115554933, 0.12941678115554933, 0.12239533440168748, 0.12239533440168748, 0.12239533440168748, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10468842361706954, 0.10468842361706954, 0.10468842361706954, 0.05225968432175887, 0.05225968432175887, 0.05225968432175887, 0.14705978581832624, 0.14705978581832624, 0.14705978581832624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026306913849541202, 0.026306913849541202, 0.026306913849541202, 0.055137358338580245, 0.055137358338580245, 0.055137358338580245, 0.03569378860822947, 0.03569378860822947, 0.03569378860822947, 0.2984634942751013, 0.2984634942751013, 0.2984634942751013, 0.30109623572252486, 0.30109623572252486, 0.30109623572252486, 0.329927711000814, 0.329927711000814, 0.329927711000814, 0.09655335328689729, 0.09655335328689729, 0.09655335328689729, 0.09343785321390585, 0.09343785321390585, 0.09343785321390585, 0.0823119408235018, 0.0823119408235018, 0.0823119408235018, 0.18866419431723902, 0.18866419431723902, 0.18866419431723902, 0.17262084362234364, 0.17262084362234364, 0.17262084362234364, 0.15300845155049303, 0.15300845155049303, 0.15300845155049303, 0.20599572258179388, 0.20599572258179388, 0.20599572258179388, 0.20657887297959532, 0.20657887297959532, 0.20657887297959532, 0.21698466744759404, 0.21698466744759404, 0.21698466744759404, 0.16186995955347483, 0.16186995955347483, 0.16186995955347483, 0.1656008920002181, 0.1656008920002181, 0.1656008920002181, 0.10920121044327968, 0.10920121044327968, 0.10920121044327968, 0.20274110626743935, 0.20274110626743935, 0.20274110626743935, 0.20319141381629535, 0.20319141381629535, 0.20319141381629535, 0.21059082917462457, 0.21059082917462457, 0.21059082917462457, 0.1744647751537015, 0.1744647751537015, 0.1744647751537015, 0.17792950910563177, 0.17792950910563177, 0.17792950910563177, 0.1750513102849225, 0.1750513102849225, 0.1750513102849225, 0.3603698177613456, 0.3603698177613456, 0.3603698177613456, 0.1728954402609295, 0.1728954402609295, 0.1728954402609295, 0.16318186906170118, 0.16318186906170118, 0.16318186906170118, 0.31695959600673207, 0.31695959600673207, 0.31695959600673207, 0.25549265064963755, 0.25549265064963755, 0.25549265064963755, 0.15029298327972052, 0.15029298327972052, 0.15029298327972052, 0.19645385454843967, 0.19645385454843967, 0.19645385454843967, 0.19715800760099467, 0.19715800760099467, 0.19715800760099467, 0.19448815814640785, 0.19448815814640785, 0.19448815814640785, 0.08425117171596919, 0.08425117171596919, 0.08425117171596919, 0.08779268259390904, 0.08779268259390904, 0.08779268259390904, 0.08133822670242774, 0.08133822670242774, 0.08133822670242774]}, "mutation_prompt": null}
{"id": "ec1dd628-041a-4b3d-ab84-a687e1f5c46a", "solution": "import numpy as np\n\nclass MSPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = [-5.0, 5.0]\n        self.num_particles = 30\n        self.num_swarms = 5\n        self.velocity_max = 0.2 * (self.bounds[1] - self.bounds[0])\n        self.c1 = 1.5  # personal best weight\n        self.c2 = 1.5  # global best weight\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        particles = np.random.uniform(self.bounds[0], self.bounds[1], (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.velocity_max, self.velocity_max, (self.num_particles, self.dim))\n        personal_bests = particles.copy()\n        personal_best_scores = np.array([func(x) for x in personal_bests])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_bests[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evals = self.num_particles\n        while evals < self.budget:\n            for swarm_id in range(self.num_swarms):\n                swarm_start = swarm_id * self.num_particles // self.num_swarms\n                swarm_end = (swarm_id + 1) * self.num_particles // self.num_swarms\n                for i in range(swarm_start, swarm_end):\n                    r1, r2 = np.random.rand(2)\n                    velocities[i] = (velocities[i] \n                                     + self.c1 * r1 * (personal_bests[i] - particles[i])\n                                     + self.c2 * r2 * (global_best - particles[i]))\n                    velocities[i] = np.clip(velocities[i], -self.velocity_max, self.velocity_max)\n                    particles[i] += velocities[i]\n                    particles[i] = np.clip(particles[i], self.bounds[0], self.bounds[1])\n\n                    score = func(particles[i])\n                    evals += 1\n                    if score < personal_best_scores[i]:\n                        personal_bests[i] = particles[i]\n                        personal_best_scores[i] = score\n                        if score < global_best_score:\n                            global_best = particles[i]\n                            global_best_score = score\n\n                    if evals >= self.budget:\n                        break\n                if evals >= self.budget:\n                    break\n        return global_best", "name": "MSPSO", "description": "A Multi-Swarm Particle Swarm Optimization (MSPSO) with adaptive neighborhood search balancing exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "62cf6a15-9a2e-4291-ba7d-bd953d7f1fef", "metadata": {"aucs": [0.3828425007265551, 0.3828425007265551, 0.3828425007265551, 0.297799066361654, 0.297799066361654, 0.297799066361654, 0.3213902523271488, 0.3213902523271488, 0.3213902523271488, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07136943936479345, 0.07136943936479345, 0.07136943936479345, 0.07590681271957034, 0.07590681271957034, 0.07590681271957034, 0.07573252921938145, 0.07573252921938145, 0.07573252921938145, 0.0534161026395239, 0.0534161026395239, 0.0534161026395239, 0.05444840533825468, 0.05444840533825468, 0.05444840533825468, 0.06561416165730005, 0.06561416165730005, 0.06561416165730005, 0.9777417900613232, 0.9777417900613232, 0.9777417900613232, 0.9859368570299398, 0.9859368570299398, 0.9859368570299398, 0.9846094216991067, 0.9846094216991067, 0.9846094216991067, 0.18487608665732003, 0.18487608665732003, 0.18487608665732003, 0.1541373080160502, 0.1541373080160502, 0.1541373080160502, 0.14858571519350716, 0.14858571519350716, 0.14858571519350716, 0.1950896264147166, 0.1950896264147166, 0.1950896264147166, 0.20409701289925142, 0.20409701289925142, 0.20409701289925142, 0.18930749570695116, 0.18930749570695116, 0.18930749570695116, 0.07689702612646343, 0.07689702612646343, 0.07689702612646343, 0.11115231519486135, 0.11115231519486135, 0.11115231519486135, 0.10187364320993275, 0.10187364320993275, 0.10187364320993275, 0.12695272571823857, 0.12695272571823857, 0.12695272571823857, 0.12941678115554933, 0.12941678115554933, 0.12941678115554933, 0.12239533440168748, 0.12239533440168748, 0.12239533440168748, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10468842361706954, 0.10468842361706954, 0.10468842361706954, 0.05225968432175887, 0.05225968432175887, 0.05225968432175887, 0.14705978581832624, 0.14705978581832624, 0.14705978581832624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026306913849541202, 0.026306913849541202, 0.026306913849541202, 0.055137358338580245, 0.055137358338580245, 0.055137358338580245, 0.03569378860822947, 0.03569378860822947, 0.03569378860822947, 0.2984634942751013, 0.2984634942751013, 0.2984634942751013, 0.30109623572252486, 0.30109623572252486, 0.30109623572252486, 0.329927711000814, 0.329927711000814, 0.329927711000814, 0.09655335328689729, 0.09655335328689729, 0.09655335328689729, 0.09343785321390585, 0.09343785321390585, 0.09343785321390585, 0.0823119408235018, 0.0823119408235018, 0.0823119408235018, 0.18866419431723902, 0.18866419431723902, 0.18866419431723902, 0.17262084362234364, 0.17262084362234364, 0.17262084362234364, 0.15300845155049303, 0.15300845155049303, 0.15300845155049303, 0.20599572258179388, 0.20599572258179388, 0.20599572258179388, 0.20657887297959532, 0.20657887297959532, 0.20657887297959532, 0.21698466744759404, 0.21698466744759404, 0.21698466744759404, 0.16186995955347483, 0.16186995955347483, 0.16186995955347483, 0.1656008920002181, 0.1656008920002181, 0.1656008920002181, 0.10920121044327968, 0.10920121044327968, 0.10920121044327968, 0.20274110626743935, 0.20274110626743935, 0.20274110626743935, 0.20319141381629535, 0.20319141381629535, 0.20319141381629535, 0.21059082917462457, 0.21059082917462457, 0.21059082917462457, 0.1744647751537015, 0.1744647751537015, 0.1744647751537015, 0.17792950910563177, 0.17792950910563177, 0.17792950910563177, 0.1750513102849225, 0.1750513102849225, 0.1750513102849225, 0.3603698177613456, 0.3603698177613456, 0.3603698177613456, 0.1728954402609295, 0.1728954402609295, 0.1728954402609295, 0.16318186906170118, 0.16318186906170118, 0.16318186906170118, 0.31695959600673207, 0.31695959600673207, 0.31695959600673207, 0.25549265064963755, 0.25549265064963755, 0.25549265064963755, 0.15029298327972052, 0.15029298327972052, 0.15029298327972052, 0.19645385454843967, 0.19645385454843967, 0.19645385454843967, 0.19715800760099467, 0.19715800760099467, 0.19715800760099467, 0.19448815814640785, 0.19448815814640785, 0.19448815814640785, 0.08425117171596919, 0.08425117171596919, 0.08425117171596919, 0.08779268259390904, 0.08779268259390904, 0.08779268259390904, 0.08133822670242774, 0.08133822670242774, 0.08133822670242774]}, "mutation_prompt": null}
