{"id": "ee17ada9-81af-462d-8a58-5217a23d3a57", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.current_eval = 0\n    \n    def __call__(self, func):\n        w = 0.5  # Inertia weight\n        c1 = 1.5  # Cognitive coefficient\n        c2 = 1.5  # Social coefficient\n        F = 0.5  # DE scaling factor\n        CR = 0.9  # DE crossover rate\n        \n        while self.current_eval < self.budget:\n            # Evaluate the particles\n            for i in range(self.population_size):\n                if self.current_eval >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.current_eval += 1\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n            \n            # Update velocities and positions using PSO\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = c1 * r1 * (self.personal_best_positions[i] - self.particles[i])\n                social_velocity = c2 * r2 * (self.global_best_position - self.particles[i])\n                self.velocities[i] = w * self.velocities[i] + cognitive_velocity + social_velocity\n                self.particles[i] += self.velocities[i]\n                # Clip to bounds\n                self.particles[i] = np.clip(self.particles[i], self.lower_bound, self.upper_bound)\n            \n            # Apply DE mutation and crossover\n            for i in range(self.population_size):\n                if self.current_eval >= self.budget:\n                    break\n                # Mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = np.clip(self.particles[a] + F * (self.particles[b] - self.particles[c]), self.lower_bound, self.upper_bound)\n                \n                # Crossover\n                trial_vector = np.copy(self.particles[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                trial_vector[crossover_points] = mutant_vector[crossover_points]\n                \n                # Selection\n                trial_score = func(trial_vector)\n                self.current_eval += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.particles[i] = trial_vector\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n                    if trial_score < self.global_best_score:\n                        self.global_best_score = trial_score\n                        self.global_best_position = trial_vector\n        \n        return self.global_best_position", "name": "HybridPSO_DE", "description": "Novel hybrid metaheuristic combining particle swarm optimization (PSO) and differential evolution (DE) for efficient exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.27506140725212436, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8946538491385981, 0.7701291165581066, 0.9075609289490781, 0.9034741156900467, 0.18373415666901816, 0.18918983522385324, 0.9060749100516101, 0.9079077631466358, 0.9103417934238073, 0.8246709081865268, 0.04272951715161377, 0.766116170200088, 0.8166665856487114, 0.40572787704744173, 0.7732419113884644, 0.053533883890881984, 0.8030536452538738, 0.6922924867679077, 0.15394657949908264, 0.10562601766055157, 0.11536595635037505, 0.12406316070673207, 0.12487900811030339, 0.12923405961437384, 0.16153522467514725, 0.050742708505935874, 0.18976411057425224, 0.1155188036906376, 0.11091326519820233, 0.12327581000500754, 0.1400532742308329, 0.08963081716984656, 0.08757054355029792, 0.1035510408812228, 0.13344488214753525, 0.06520997648131399, 0.9804411321454144, 0.9757349029492581, 0.9879262278122344, 0.9799337223049408, 0.9836266301067775, 0.9802940091976002, 0.9845181450844205, 0.9880965997919585, 0.9808708139361876, 0.8135912704102691, 0.05980804514190663, 0.05992732730229233, 0.7176790586336652, 0.7702394225571056, 0.8014134550890034, 0.08884542906418669, 0.0883571206541568, 0.14128142482292827, 0.9251084891432556, 0.0766267963268592, 0.17091750581529008, 0.19419636821456232, 0.11681857499880643, 0.3892677532651615, 0.07019429957719603, 0.12703150998137758, 0.15134517305771966, 0.16631742238425107, 0.1812271309115009, 0.17626424820034226, 9.999999999998899e-05, 0.1336047587969328, 0.12849619998005768, 0.18924826548317542, 0.2546647825684324, 0.1863751830650916, 0.1360354449100245, 0.20253331762147664, 0.2232550759346129, 0.14333411254781092, 0.13683722547237975, 0.1365199989166136, 0.2287568543106594, 0.13782933907272987, 0.16910043780464312, 9.999999999998899e-05, 0.00036377934581832694, 9.999999999998899e-05, 0.049377766456831895, 9.999999999998899e-05, 0.03187299769163998, 0.007293065449457625, 9.999999999998899e-05, 0.010811464695059891, 0.19492143864608125, 0.03566977289090578, 0.0938277415864015, 0.08168276200038671, 0.0001235178189548103, 0.04389871008741897, 0.12451798318764173, 0.06088462724222554, 0.08888461790740598, 0.06685078028184166, 0.1823963837954784, 0.05140718294609692, 0.13611357067270147, 0.08036608961833824, 0.20691371539258563, 0.10282261509366086, 0.1006711972816583, 0.10305180181506546, 0.35992108526267697, 0.11656487242932911, 0.12694966128541985, 9.999999999998899e-05, 0.0066318251427245345, 9.999999999998899e-05, 0.05900446651839064, 0.1471762155038372, 0.08206972600155116, 0.6104677979071809, 0.5552396419947907, 0.5519749052381232, 0.5444679891740207, 0.574472434159154, 0.2090107264519796, 0.5956812348057756, 0.5987006319583197, 0.5947662673924845, 0.15935400918581022, 0.07553530901198591, 0.06398424071161446, 0.11228799800119416, 0.13204077043478446, 0.18777464151943957, 0.07488475628329871, 0.1108758240693416, 0.15998823855904687, 0.13709402488564104, 0.17317524170756093, 0.19147681541886064, 0.2555971591005043, 0.28023591540208204, 0.1806796368852399, 0.20076106420443318, 0.25959282158804553, 0.28126809018265986, 0.31181999979078046, 0.22102478666539427, 0.34879792675178256, 0.20263577620753281, 0.3705239045325167, 0.2485592384300731, 0.6305014294467342, 0.4991375981507442, 0.15266472138997667, 0.09343999655834245, 0.25644413310610936, 0.14818561542753683, 0.2019815941653923, 0.20674075129144454, 0.260208514869949, 0.2735716756556795, 0.2917960855937809, 0.10530950450654708, 0.2294605864946503, 0.19180533231165509, 0.21132490760442968, 0.22684167324492444, 0.16430465799557714, 0.21587935893884558, 0.24865539089038036, 0.2041719622334086, 0.22732722210244916, 0.8084223892371625, 0.19769869355529368, 0.20264161900654676, 0.2267369383692086, 0.19822820128958252, 0.18692654280888588, 0.22299510359299768, 0.1795494168923859, 0.1794552614095375, 0.9366211399778284, 0.1263647810960853, 0.12468467926563787, 0.9404633295476993, 0.20047159094721745, 0.20070389147584478, 0.11876432335103815, 0.16988384873875162, 0.16312002839205775, 0.15548193502976193, 0.21163728240239932, 0.07290055790208894, 0.29140640027570475, 0.45862445284538356, 0.21332686862104777, 0.10521223113924183, 0.3224144418990018, 0.7347310448570596, 0.21144097005446194, 0.22916930490718124, 0.1945662674592218, 0.1820385332558001, 0.20698182120444586, 0.18669526068169595, 0.2094180513914472, 0.1942699596432802, 0.20356017676530358, 0.10826076198715762, 0.09972273362094852, 0.09157277770441763, 0.0975025820575256, 0.09734733961476172, 0.0973739787598753, 0.08422694208705472, 0.10151252583994697, 0.08997732205809295]}, "mutation_prompt": null}
{"id": "0512893d-604e-4e5e-8945-0bd24700d035", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.current_eval = 0\n    \n    def __call__(self, func):\n        w = 0.5  # Inertia weight\n        c1 = 1.5  # Cognitive coefficient\n        c2 = 1.5  # Social coefficient\n        F = 0.5  # DE scaling factor\n        CR = 0.9  # DE crossover rate\n        \n        while self.current_eval < self.budget:\n            # Evaluate the particles\n            for i in range(self.population_size):\n                if self.current_eval >= self.budget:\n                    break\n                score = func(self.particles[i])\n                self.current_eval += 1\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n            \n            # Update velocities and positions using PSO\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = c1 * r1 * (self.personal_best_positions[i] - self.particles[i])\n                social_velocity = c2 * r2 * (self.global_best_position - self.particles[i])\n                self.velocities[i] = w * self.velocities[i] + cognitive_velocity + social_velocity\n                self.particles[i] += self.velocities[i]\n                # Clip to bounds\n                self.particles[i] = np.clip(self.particles[i], self.lower_bound, self.upper_bound)\n            \n            # Apply DE mutation and crossover\n            for i in range(self.population_size):\n                if self.current_eval >= self.budget:\n                    break\n                # Mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = np.clip(self.particles[a] + F * (self.particles[b] - self.particles[c]), self.lower_bound, self.upper_bound)\n                \n                # Crossover\n                trial_vector = np.copy(self.particles[i])\n                crossover_points = np.random.rand(self.dim) < CR\n                trial_vector[crossover_points] = mutant_vector[crossover_points]\n                \n                # Selection\n                trial_score = func(trial_vector)\n                self.current_eval += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.particles[i] = trial_vector\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n                    if trial_score < self.global_best_score:\n                        self.global_best_score = trial_score\n                        self.global_best_position = trial_vector\n        \n        return self.global_best_position", "name": "HybridPSO_DE", "description": "Novel hybrid metaheuristic combining particle swarm optimization (PSO) and differential evolution (DE) for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ee17ada9-81af-462d-8a58-5217a23d3a57", "metadata": {"aucs": [0.8946538491385981, 0.7701291165581066, 0.9075609289490781, 0.9034741156900467, 0.18373415666901816, 0.18918983522385324, 0.9060749100516101, 0.9079077631466358, 0.9103417934238073, 0.8246709081865268, 0.04272951715161377, 0.766116170200088, 0.8166665856487114, 0.40572787704744173, 0.7732419113884644, 0.053533883890881984, 0.8030536452538738, 0.6922924867679077, 0.15394657949908264, 0.10562601766055157, 0.11536595635037505, 0.12406316070673207, 0.12487900811030339, 0.12923405961437384, 0.16153522467514725, 0.050742708505935874, 0.18976411057425224, 0.1155188036906376, 0.11091326519820233, 0.12327581000500754, 0.1400532742308329, 0.08963081716984656, 0.08757054355029792, 0.1035510408812228, 0.13344488214753525, 0.06520997648131399, 0.9804411321454144, 0.9757349029492581, 0.9879262278122344, 0.9799337223049408, 0.9836266301067775, 0.9802940091976002, 0.9845181450844205, 0.9880965997919585, 0.9808708139361876, 0.8135912704102691, 0.05980804514190663, 0.05992732730229233, 0.7176790586336652, 0.7702394225571056, 0.8014134550890034, 0.08884542906418669, 0.0883571206541568, 0.14128142482292827, 0.9251084891432556, 0.0766267963268592, 0.17091750581529008, 0.19419636821456232, 0.11681857499880643, 0.3892677532651615, 0.07019429957719603, 0.12703150998137758, 0.15134517305771966, 0.16631742238425107, 0.1812271309115009, 0.17626424820034226, 9.999999999998899e-05, 0.1336047587969328, 0.12849619998005768, 0.18924826548317542, 0.2546647825684324, 0.1863751830650916, 0.1360354449100245, 0.20253331762147664, 0.2232550759346129, 0.14333411254781092, 0.13683722547237975, 0.1365199989166136, 0.2287568543106594, 0.13782933907272987, 0.16910043780464312, 9.999999999998899e-05, 0.00036377934581832694, 9.999999999998899e-05, 0.049377766456831895, 9.999999999998899e-05, 0.03187299769163998, 0.007293065449457625, 9.999999999998899e-05, 0.010811464695059891, 0.19492143864608125, 0.03566977289090578, 0.0938277415864015, 0.08168276200038671, 0.0001235178189548103, 0.04389871008741897, 0.12451798318764173, 0.06088462724222554, 0.08888461790740598, 0.06685078028184166, 0.1823963837954784, 0.05140718294609692, 0.13611357067270147, 0.08036608961833824, 0.20691371539258563, 0.10282261509366086, 0.1006711972816583, 0.10305180181506546, 0.35992108526267697, 0.11656487242932911, 0.12694966128541985, 9.999999999998899e-05, 0.0066318251427245345, 9.999999999998899e-05, 0.05900446651839064, 0.1471762155038372, 0.08206972600155116, 0.6104677979071809, 0.5552396419947907, 0.5519749052381232, 0.5444679891740207, 0.574472434159154, 0.2090107264519796, 0.5956812348057756, 0.5987006319583197, 0.5947662673924845, 0.15935400918581022, 0.07553530901198591, 0.06398424071161446, 0.11228799800119416, 0.13204077043478446, 0.18777464151943957, 0.07488475628329871, 0.1108758240693416, 0.15998823855904687, 0.13709402488564104, 0.17317524170756093, 0.19147681541886064, 0.2555971591005043, 0.28023591540208204, 0.1806796368852399, 0.20076106420443318, 0.25959282158804553, 0.28126809018265986, 0.31181999979078046, 0.22102478666539427, 0.34879792675178256, 0.20263577620753281, 0.3705239045325167, 0.2485592384300731, 0.6305014294467342, 0.4991375981507442, 0.15266472138997667, 0.09343999655834245, 0.25644413310610936, 0.14818561542753683, 0.2019815941653923, 0.20674075129144454, 0.260208514869949, 0.2735716756556795, 0.2917960855937809, 0.10530950450654708, 0.2294605864946503, 0.19180533231165509, 0.21132490760442968, 0.22684167324492444, 0.16430465799557714, 0.21587935893884558, 0.24865539089038036, 0.2041719622334086, 0.22732722210244916, 0.8084223892371625, 0.19769869355529368, 0.20264161900654676, 0.2267369383692086, 0.19822820128958252, 0.18692654280888588, 0.22299510359299768, 0.1795494168923859, 0.1794552614095375, 0.9366211399778284, 0.1263647810960853, 0.12468467926563787, 0.9404633295476993, 0.20047159094721745, 0.20070389147584478, 0.11876432335103815, 0.16988384873875162, 0.16312002839205775, 0.15548193502976193, 0.21163728240239932, 0.07290055790208894, 0.29140640027570475, 0.45862445284538356, 0.21332686862104777, 0.10521223113924183, 0.3224144418990018, 0.7347310448570596, 0.21144097005446194, 0.22916930490718124, 0.1945662674592218, 0.1820385332558001, 0.20698182120444586, 0.18669526068169595, 0.2094180513914472, 0.1942699596432802, 0.20356017676530358, 0.10826076198715762, 0.09972273362094852, 0.09157277770441763, 0.0975025820575256, 0.09734733961476172, 0.0973739787598753, 0.08422694208705472, 0.10151252583994697, 0.08997732205809295]}, "mutation_prompt": null}
