{"id": "0142a234-adfd-4da8-b46a-5c682b7928d4", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 50\n        self.inertia = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob = 0.7\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            eval_count += self.swarm_size\n\n            # Update personal bests\n            better_scores_idx = scores < self.personal_best_scores\n            self.personal_best_scores[better_scores_idx] = scores[better_scores_idx]\n            self.personal_best_positions[better_scores_idx] = self.positions[better_scores_idx]\n\n            # Update global best\n            min_score_idx = np.argmin(self.personal_best_scores)\n            if self.personal_best_scores[min_score_idx] < self.global_best_score:\n                self.global_best_score = self.personal_best_scores[min_score_idx]\n                self.global_best_position = self.personal_best_positions[min_score_idx]\n\n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.swarm_size, self.dim), np.random.rand(self.swarm_size, self.dim)\n            cognitive_term = self.cognitive_coeff * r1 * (self.personal_best_positions - self.positions)\n            social_term = self.social_coeff * r2 * (self.global_best_position - self.positions)\n            self.velocities = self.inertia * self.velocities + cognitive_term + social_term\n\n            # Apply mutation on velocities\n            for i in range(self.swarm_size):\n                if np.random.rand() < self.crossover_prob:\n                    idxs = np.random.choice(self.swarm_size, 3, replace=False)\n                    mutant_vector = self.positions[idxs[0]] + self.mutation_factor * (self.positions[idxs[1]] - self.positions[idxs[2]])\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    self.velocities[i] = mutant_vector - self.positions[i]\n\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation balance.", "configspace": "", "generation": 0, "fitness": 0.13819207152190685, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.19228906065994344, 0.18646223467066414, 0.1792634463964996, 0.2469533922212227, 0.2542852146990521, 0.245694634333659, 0.23255746584350612, 0.21902313196201417, 0.20731348030167118, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05246092454803952, 0.048570922757816715, 0.048140450051636474, 0.058616168100902755, 0.052273515462183395, 0.06700546919278572, 0.0570709530403829, 0.06695522931806408, 0.05316202327397368, 0.044139766705796446, 0.027587768288301007, 0.04033231605309884, 0.038130685034260425, 0.02815919710126924, 0.04079755407140673, 0.051089686016134506, 0.03924121171446737, 0.03699636773917514, 0.9758799379220799, 0.9845853790666879, 0.980968967769366, 0.9816771335530594, 0.9724675569519475, 0.9753523408834355, 0.9730642917236463, 0.9752989991374471, 0.9743566865912379, 0.09209044795184096, 0.10782503625870354, 0.10835857242905855, 0.10119196292647137, 0.10784556816745794, 0.13459186308296045, 0.10959730389237643, 0.11544949715853214, 0.12935234461728373, 0.14832692763357314, 0.18826707037280133, 0.13939748847867617, 0.162937647112519, 0.14822348101922866, 0.16149930642493981, 0.1312203109778557, 0.134155261104407, 0.15798906467613272, 0.02615682422029164, 0.01826573335353665, 0.053360399990053486, 0.04170463717295114, 0.022657339840231883, 0.04037488053370197, 0.03253456965998924, 0.01368117841131311, 0.012579170740163348, 0.005340310215724675, 0.006478377243988476, 0.07788302312799678, 0.03617091270275874, 0.002336393497295308, 0.04670803080737118, 0.011000138838701656, 0.05720176399896315, 0.01515950129401622, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0727868773727085, 0.05282299338971019, 0.06979686713274791, 0.04472340884508996, 0.030224220910104127, 0.04982741817548886, 0.03359090623153915, 0.04868068788238522, 0.04959629879269034, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0034527811445388412, 0.0034050243207544018, 9.999999999998899e-05, 0.0196715000040929, 0.01582105050578153, 0.0025321872760927233, 0.02282528147207319, 0.01841740705339512, 0.01507182457021694, 0.21369961347215238, 0.20555809377214596, 0.22784351043751527, 0.22576099198453026, 0.23698697416950443, 0.22173552070516045, 0.21640676655498792, 0.20591583797938906, 0.20487692610382569, 0.06907418506111229, 0.06822271054941831, 0.06926212527759579, 0.05796981659224587, 0.061195797845814415, 0.051051146009625015, 0.050717319826619534, 0.06261371717866315, 0.06206176311050948, 0.12988795956687227, 0.16254369549119618, 0.13262464207141433, 0.13745637017010937, 0.14920314386558198, 0.13657036769647002, 0.16280530266710136, 0.13461444196715677, 0.14026010203675665, 0.17746556835109473, 0.17306671515113625, 0.19839611165549587, 0.15747598706858024, 0.17061284603940707, 0.16786469910265756, 0.1920965391397712, 0.1837691124392773, 0.19593266018052624, 0.11736316641442701, 0.1194799129362305, 0.1270628747195931, 0.13605557487369735, 0.13034672982423168, 0.11259068133455385, 0.13712776162051488, 0.11529500025201345, 0.12560218996045347, 0.1850761884545643, 0.18262967813126685, 0.17436353173939956, 0.17732195896213887, 0.15297934335244878, 0.18296415407857625, 0.15101282061625776, 0.1664517643222786, 0.17319131307144708, 0.14696734870219974, 0.15150498004645363, 0.1502838152520033, 0.14754713243034145, 0.1471850710577599, 0.1579483906740714, 0.16799672188343662, 0.15389689645107119, 0.1426994802453868, 0.21137656966110585, 0.15858572926556813, 0.16343629415354022, 0.16955842631714546, 0.1608382333599866, 0.2244811745148021, 0.20017437681601247, 0.21417435428643072, 0.1708149792123944, 0.15577356495774475, 0.15676205666495913, 0.15781814198732413, 0.17105299314462263, 0.14859308129235504, 0.11993942110598199, 0.19148527536055948, 0.20097052259313997, 0.19283936861385087, 0.18286669695323932, 0.17880065671587853, 0.18001415765345863, 0.18162742030386791, 0.18512033693431584, 0.18114591796577884, 0.19896075549470194, 0.1795534887144664, 0.19650369525337663, 0.0481714101580647, 0.05576995275414298, 0.063929627116041, 0.061660874025529444, 0.05196102556677373, 0.05576135660980963, 0.061241758448359884, 0.05067724082244318, 0.05832031306575414]}, "mutation_prompt": null}
{"id": "f0e9ceb6-18f8-4256-a766-6798bf21b31f", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 50\n        self.inertia = 0.9  # Initial inertia\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob = 0.7\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        iteration = 0\n        while eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            eval_count += self.swarm_size\n\n            # Update personal bests\n            better_scores_idx = scores < self.personal_best_scores\n            self.personal_best_scores[better_scores_idx] = scores[better_scores_idx]\n            self.personal_best_positions[better_scores_idx] = self.positions[better_scores_idx]\n\n            # Update global best\n            min_score_idx = np.argmin(self.personal_best_scores)\n            if self.personal_best_scores[min_score_idx] < self.global_best_score:\n                self.global_best_score = self.personal_best_scores[min_score_idx]\n                self.global_best_position = self.personal_best_positions[min_score_idx]\n\n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.swarm_size, self.dim), np.random.rand(self.swarm_size, self.dim)\n            cognitive_term = self.cognitive_coeff * r1 * (self.personal_best_positions - self.positions)\n            social_term = self.social_coeff * r2 * (self.global_best_position - self.positions)\n            # Self-adaptive inertia\n            self.inertia = 0.9 - (0.5 * eval_count / self.budget)\n            self.velocities = self.inertia * self.velocities + cognitive_term + social_term\n\n            # Apply mutation on velocities\n            for i in range(self.swarm_size):\n                if np.random.rand() < self.crossover_prob:\n                    idxs = np.random.choice(self.swarm_size, 3, replace=False)\n                    mutant_vector = self.positions[idxs[0]] + self.mutation_factor * (self.positions[idxs[1]] - self.positions[idxs[2]])\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    self.velocities[i] = mutant_vector - self.positions[i]\n\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSOwithADM", "description": "Enhanced Hybrid PSO with Self-adaptive Inertia for dynamic exploration and exploitation trade-off.", "configspace": "", "generation": 1, "fitness": 0.1385626281916128, "feedback": "", "error": "", "parent_id": "0142a234-adfd-4da8-b46a-5c682b7928d4", "metadata": {"aucs": [0.20828174150417667, 0.20246871947305445, 0.20156041695612203, 0.241101837407676, 0.23337736575109513, 0.2576584332142797, 0.21918820382634419, 0.24012498600146814, 0.20495480501406205, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06386183961442837, 0.04996840357873644, 0.06248867234283806, 0.06608427989379473, 0.04964737434236066, 0.0537031941922953, 0.059539574639748793, 0.06992009096235419, 0.05911049300553839, 0.039638333369568346, 0.03608146986612737, 0.03552214227431194, 0.042500189638220554, 0.041187308309027504, 0.07554432366875918, 0.039694027319084335, 0.03510491773657465, 0.036265640880021266, 0.9754634969021623, 0.9890766023901688, 0.9780664120524032, 0.9817033918538987, 0.972621035443069, 0.975142997620377, 0.9744168310754672, 0.9714217899709583, 0.9726847047648266, 0.11218756059521906, 0.12795726839117683, 0.11035824249856396, 0.10331549872601464, 0.10373003373132339, 0.10476832902550526, 0.10838320749553654, 0.10768257082858512, 0.11127889944883318, 0.14783228055703113, 0.1309814802412882, 0.15949438893833268, 0.16039126003226634, 0.15769601257548183, 0.1607354693289471, 0.1509962936092506, 0.15573044314913187, 0.21919267085124172, 0.029104325490566185, 0.016950111746568797, 0.06033845246524816, 0.04907992483590984, 0.03207206789801642, 0.022109199146502223, 0.02311967149179417, 0.02442989415412522, 0.022625110242537105, 0.01966343072299681, 0.027284135219647787, 0.015225334611148167, 0.0030837343275714746, 0.0328832770332399, 0.010445883303932701, 0.033372281947885885, 0.006100610363308778, 0.016967816961546145, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04194205309139398, 0.042058327639745596, 0.04133973587687745, 0.0024983897802414168, 0.05013716815862557, 0.04461806233005261, 0.04820078655116322, 0.05629241372619398, 0.046120783683202715, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008232888754668433, 0.0018868197283471444, 0.003792420697394716, 0.0028561902002366413, 0.00851726561656252, 0.00845613748980345, 0.010652218362952381, 0.016785828873854602, 0.019031586301292536, 0.21346767435966563, 0.2149979030289353, 0.22496167568231695, 0.2394780573570362, 0.21935427706911836, 0.2253367527717458, 0.20542505661366162, 0.2200755464171813, 0.20621476171399267, 0.07213762148265501, 0.0684019066998629, 0.06996505488457683, 0.05296999528018009, 0.06762384609494199, 0.05193717775391049, 0.0485419786902499, 0.05962517253353383, 0.05532228644710924, 0.17928714641258303, 0.1617757529572873, 0.1462669009318266, 0.1329979499114181, 0.1308741862379691, 0.12479828602510812, 0.15221679169917157, 0.16698697769100168, 0.1478447844235683, 0.17570265340007118, 0.16989993747398202, 0.18101924034504635, 0.16935989490819758, 0.17280872535258673, 0.18096265917883925, 0.18841556393055425, 0.20257787964934348, 0.1809980893789952, 0.12363179476898134, 0.1118291809980928, 0.1321736792808097, 0.1514953227848186, 0.13672045586101667, 0.13915661320299, 0.1324447726725868, 0.13679895521620167, 0.12906644625325847, 0.14605881721282754, 0.15377887053034023, 0.15465668250741105, 0.1534832331229512, 0.16377782462576906, 0.14789147278113546, 0.14624686417902089, 0.16346397173289862, 0.16747135563333082, 0.14663744814880175, 0.16270743004015364, 0.16127479898415875, 0.15599596680179295, 0.16760483948290783, 0.15202389252439674, 0.14872332054842552, 0.16115943040810765, 0.1446991229981167, 0.1754909389516215, 0.13788158606069378, 0.16352855365281016, 0.15102491883940838, 0.2680909366192349, 0.18597544474344885, 0.160105516444643, 0.17383014032432187, 0.16504614314560018, 0.17874542091402124, 0.1737502793344161, 0.1582137467748166, 0.1857085734739924, 0.15283911100709502, 0.16106593431158145, 0.19264940691846444, 0.22567607942043755, 0.18687824656773933, 0.1855933018544751, 0.1799535339268168, 0.20312470344292766, 0.1826448890537532, 0.18086363114730197, 0.21561425626993858, 0.17664450601561188, 0.18767294671652146, 0.21707584548236414, 0.05439457480371179, 0.045375619503445486, 0.04653843562521054, 0.059920441884464326, 0.05650353499400229, 0.05232222523398977, 0.058591030557938795, 0.05456020788576932, 0.0551680036919624]}, "mutation_prompt": null}
