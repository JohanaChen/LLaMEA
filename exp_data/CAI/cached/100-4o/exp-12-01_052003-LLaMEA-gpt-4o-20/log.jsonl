{"id": "ec71fe6a-926d-49da-959e-b57ce0cf6734", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9 # Crossover rate\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5 # Cognitive component for PSO\n        self.c2 = 1.5 # Social component for PSO\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.best_individual = None\n        self.best_fitness = np.inf\n        self.personal_best = self.population.copy()\n        self.personal_best_fitness = np.full(self.pop_size, np.inf)\n        \n    def __call__(self, func):\n        evaluations = 0\n        \n        # Evaluate initial population\n        for i in range(self.pop_size):\n            fitness = func(self.population[i])\n            evaluations += 1\n            if fitness < self.personal_best_fitness[i]:\n                self.personal_best[i] = self.population[i].copy()\n                self.personal_best_fitness[i] = fitness\n            if fitness < self.best_fitness:\n                self.best_individual = self.population[i].copy()\n                self.best_fitness = fitness\n                \n        # Optimization loop\n        while evaluations < self.budget:\n            # Differential Evolution and PSO hybrid step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                # DE mutation\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # DE crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n                \n                # Evaluate trial vector\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < self.personal_best_fitness[i]:\n                    self.personal_best[i] = trial\n                    self.personal_best_fitness[i] = trial_fitness\n                    if trial_fitness < self.best_fitness:\n                        self.best_individual = trial\n                        self.best_fitness = trial_fitness\n                \n                # PSO velocity update\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocities[i] = (self.w * self.velocities[i] \n                                      + self.c1 * r1 * (self.personal_best[i] - self.population[i])\n                                      + self.c2 * r2 * (self.best_individual - self.population[i]))\n                \n                # PSO position update\n                self.population[i] = np.clip(self.population[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n                \n        return self.best_individual, self.best_fitness", "name": "HybridDEPSO", "description": "A hybrid metaheuristic combining Differential Evolution (DE) and Particle Swarm Optimization (PSO) to balance exploration and exploitation for robust performance across diverse optimization problems.", "configspace": "", "generation": 0, "fitness": 0.33327069143583515, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8985371230362283, 0.8938761880884826, 0.8903921443909553, 0.9063397486185165, 0.9102341852528503, 0.9098993360719856, 0.9017278650579043, 0.8878686720551868, 0.8842978700216353, 0.7907588251930204, 0.8072653588932637, 0.7997185555906968, 0.8058157650669858, 0.7894590957140442, 0.8021631507523257, 0.8024573934839089, 0.054664598583260116, 0.8159231145845209, 0.155221965904205, 0.14330144256578714, 0.1717054315632609, 0.07278659101419505, 0.15971114952425158, 0.0722782770064565, 0.14134268721688292, 0.18021594932916518, 0.15272063764924315, 0.10438994517973366, 0.11283211408403127, 0.13143782192442177, 0.12652166194890646, 0.12136235675426943, 0.17479334864893248, 0.11532478620703712, 0.13446360537464386, 0.15591513185409744, 0.9853348189782042, 0.9886303363153452, 0.9929167528270056, 0.9902726374697143, 0.9929799020332779, 0.9940623961738888, 0.9928939596632349, 0.9939431507262172, 0.9889251246740569, 0.8031156615585268, 0.796083598622458, 0.7870447566630192, 0.7889500968809806, 0.7590663513439047, 0.758823727884305, 0.8153278552881507, 0.08894537821600046, 0.7751524832583968, 0.17110478530029583, 0.38208661774990904, 0.17055303983628511, 0.19444794579821534, 0.2782382038502832, 0.21021685936501655, 0.9024788883219818, 0.12505506236594066, 0.7867307715488692, 0.22050135061222143, 0.27449886694334924, 0.2638895005714733, 0.1309594311677511, 0.10760159108670175, 0.23568475942320832, 0.25099100102648564, 0.2383034339704202, 0.13239805061076892, 0.12504842524519422, 0.25840745805513354, 0.2578877887264184, 0.2641164006818473, 0.29843618732103483, 0.30984374456738195, 0.28134839238471654, 0.10553148360059728, 0.29275662064464036, 0.0024772698122915715, 0.051406970623934845, 0.034678787493076735, 9.999999999998899e-05, 0.00023219831075182995, 0.030136829288573197, 0.0016692344468886011, 0.006618245900039121, 0.05642874132827369, 0.04961679809260133, 0.029782629754902867, 0.07792231211549117, 0.06443517201989013, 0.005099706072587473, 0.00941869000056117, 0.0335546675866748, 0.042205262137244626, 0.05793007729693578, 0.051092609217170515, 0.18924343716271919, 0.19844013716296172, 0.08033400320666229, 0.0792941701251757, 0.11598240071097132, 0.11166697676208381, 0.2106796215291168, 0.07453817272824559, 0.09442469386364771, 0.09340816940541263, 0.07722488941168337, 0.006678771939889749, 0.006711353639504147, 0.119262594113974, 0.18810629141214108, 0.07493431409912843, 0.08328548220957332, 0.5600569620729055, 0.6080312958027185, 0.589413615042526, 0.5987589237733099, 0.5789895074056833, 0.6393959122886956, 0.6330005500977578, 0.5983990793784828, 0.629252114027914, 0.1823764193569729, 0.10731897806835355, 0.11560374411897956, 0.11042850786274394, 0.16113511148248194, 0.11529771415150902, 0.09918988682473695, 0.11510859836994292, 0.09202813198561799, 0.17136174735598708, 0.2011494387065954, 0.2608106962385961, 0.2735179601577781, 0.7514487952287088, 0.2297052543887187, 0.27408893425167, 0.34110757164473204, 0.3960388200597539, 0.2470618424404133, 0.21918748675780442, 0.5350510405591518, 0.28961027125083916, 0.6261625122251331, 0.701838666461934, 0.7439578499513148, 0.5472326752687934, 0.5662967810529881, 0.2015128756611514, 0.17238684277652883, 0.20690965353440738, 0.3572080206569809, 0.29830623289942604, 0.24724682350805938, 0.23114869665571103, 0.37362208508908656, 0.26673928925173473, 0.19574877297698645, 0.22518192830782469, 0.2033128060513376, 0.20340882151266537, 0.17834290721157853, 0.19888127962482594, 0.21570424121535703, 0.21219359944862204, 0.21375645450833303, 0.7756398030018969, 0.24754079317668132, 0.2083116629379902, 0.22430073719996313, 0.2477575529101449, 0.8237606289465604, 0.1950740939091853, 0.7796394348905724, 0.18107226911266894, 0.1828984500601667, 0.16919876730677386, 0.1882112401152165, 0.9284729394405287, 0.20052616659739886, 0.2006710679104644, 0.10007822461729232, 0.1691412391329652, 0.158955166845691, 0.7369759082143961, 0.11304911495213177, 0.8936116701134673, 0.7938449626790367, 0.16845291439234422, 0.2114990092323894, 0.10473009205680706, 0.20939594880895473, 0.20060344841380362, 0.19029540158100855, 0.18571415056992002, 0.19676216635023347, 0.19954573075790327, 0.18768323843936252, 0.18142213989879297, 0.183311794386255, 0.17742050662259812, 0.18184434424904494, 0.08412893205419236, 0.10429318441707947, 0.09684446492248355, 0.08265919664843058, 0.09217444445924661, 0.09600652088679362, 0.08424436753284203, 0.09258003930518166, 0.0967694685417766]}, "mutation_prompt": null}
{"id": "edbd6e23-68cf-47c3-b179-f398f71a3e13", "solution": "import numpy as np\n\nclass ImprovedHybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.F = 0.5  # DE scaling factor\n        self.CR = 0.9 # Crossover rate\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5 # Cognitive component for PSO\n        self.c2 = 1.5 # Social component for PSO\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.best_individual = None\n        self.best_fitness = np.inf\n        self.personal_best = self.population.copy()\n        self.personal_best_fitness = np.full(self.pop_size, np.inf)\n        \n    def __call__(self, func):\n        evaluations = 0\n        \n        # Evaluate initial population\n        for i in range(self.pop_size):\n            fitness = func(self.population[i])\n            evaluations += 1\n            if fitness < self.personal_best_fitness[i]:\n                self.personal_best[i] = self.population[i].copy()\n                self.personal_best_fitness[i] = fitness\n            if fitness < self.best_fitness:\n                self.best_individual = self.population[i].copy()\n                self.best_fitness = fitness\n                \n        # Optimization loop\n        while evaluations < self.budget:\n            # Differential Evolution and PSO hybrid step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                # Adaptive DE mutation\n                self.F = 0.5 + 0.5 * (self.best_fitness / max(self.personal_best_fitness))\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # DE crossover with tournament selection\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n                \n                # Evaluate trial vector\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < self.personal_best_fitness[i]:\n                    self.personal_best[i] = trial\n                    self.personal_best_fitness[i] = trial_fitness\n                    if trial_fitness < self.best_fitness:\n                        self.best_individual = trial\n                        self.best_fitness = trial_fitness\n                \n                # PSO velocity update with adaptive inertia\n                self.w = 0.5 + 0.5 * (self.best_fitness / max(self.personal_best_fitness))\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocities[i] = (self.w * self.velocities[i] \n                                      + self.c1 * r1 * (self.personal_best[i] - self.population[i])\n                                      + self.c2 * r2 * (self.best_individual - self.population[i]))\n                \n                # PSO position update\n                self.population[i] = np.clip(self.population[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n                \n        return self.best_individual, self.best_fitness", "name": "ImprovedHybridDEPSO", "description": "An improved HybridDEPSO metaheuristic with adaptive parameters and tournament selection to enhance convergence speed and solution diversity.", "configspace": "", "generation": 1, "fitness": 0.14556645171303673, "feedback": "", "error": "", "parent_id": "ec71fe6a-926d-49da-959e-b57ce0cf6734", "metadata": {"aucs": [0.16324613736078897, 0.17339385503818827, 0.17499326521627478, 0.2594440347122191, 0.2111607752771164, 0.21350005784388937, 0.1645128864086195, 0.134509945887613, 0.18555393911524798, 0.048511914659169264, 0.07786431437978136, 9.999999999998899e-05, 0.051826590676591566, 0.049121940481415605, 0.09909962584135845, 0.05491371308142956, 0.015520120204844945, 0.02058659822402298, 0.004418432053229671, 0.01467079663371329, 0.004774339282824114, 0.058950485035716205, 0.05262468312646362, 0.07284177139016412, 0.05857035476302841, 0.061857339294792424, 0.06333225087568795, 0.01618850552953921, 0.002415956084707793, 0.013520303914290155, 0.05093500481392499, 0.06373263400556295, 0.05433751801460618, 0.05362659149831883, 0.05896591490714598, 0.04549240499458429, 0.9827789892615116, 0.9906140819477594, 0.9932123603198371, 0.9938345028828687, 0.993052182471563, 0.9961804509962516, 0.9934125497411925, 0.9933960655932311, 0.9860496323559659, 0.14032166876190244, 0.17578551692017919, 0.1460021302881922, 0.14888244195149147, 0.12976933309812066, 0.1566611133182232, 0.09052116140402067, 0.08758229674606577, 0.047213325627855185, 0.1567409416037725, 0.15263583333445763, 0.14531444454153009, 0.17488835695378258, 0.14962443438198003, 0.1696677123623198, 0.2267442327920779, 0.21973927332769772, 0.2547274751914701, 0.06415342293861681, 0.1080998485494914, 0.10625662187742635, 0.047344467476105434, 0.044253737269169924, 0.03720976555294475, 0.12926139577717588, 0.1127430984223875, 0.0741654967339691, 0.11349217694272173, 0.11432124175905933, 0.11191227756347488, 0.13629114080922178, 0.10441697939197014, 0.1102689097370696, 0.11660957378724657, 0.10748038591063835, 0.1204758073863531, 0.06453347029228984, 0.013364110404183838, 0.0004343162179378801, 0.0003170271968294669, 0.0002861078471967371, 0.0207862658561746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051775292788068916, 0.023738479455567396, 0.09454603669882922, 0.054953297937636814, 0.04558019143827896, 0.02228629319498543, 0.06235655332907131, 0.08786858450036561, 0.07328121516688557, 9.999999999998899e-05, 0.009338807351907952, 0.05588363114823136, 0.04274615016558059, 0.003472830716152231, 0.06032837360369392, 0.09005747259159758, 0.08364795895002586, 0.06527366360843212, 0.03033906755669391, 0.08497753801849117, 0.08728973494404124, 0.004127489373692672, 0.0011198252900107564, 0.06417220061256179, 0.010224820680861169, 9.999999999998899e-05, 0.00781544361162867, 0.13785659960447305, 0.11141543037622592, 0.17624755791796365, 0.18999962169365525, 0.18796559962044357, 0.15842387490922794, 0.21457075430205597, 0.17190597624033777, 0.2044821151579932, 0.06416209772211423, 0.06511755307418476, 0.062254688980804884, 0.06200052041755311, 0.07292048086646885, 0.07199905654506233, 0.05500837640625944, 0.06907966132851184, 0.06326496131609693, 0.17797022196407364, 0.12402366080070026, 0.13580375799264333, 0.13268070745468452, 0.12377050525498656, 0.16253763343553818, 0.19187669022595633, 0.13777662220288733, 0.16105599255432101, 0.12215072206639543, 0.14120430138059215, 0.11056185365062265, 0.1770688825083011, 0.16320371402821532, 0.162402343173903, 0.1863180423987999, 0.17645265751208572, 0.1654950532584618, 0.1286519356208723, 0.1360123931077667, 0.12310698779139295, 0.14058448964422054, 0.1255804599073217, 0.14835473103610397, 0.11705909727248853, 0.11533507046539637, 0.1149446159597417, 0.09894084642034873, 0.06811756917875467, 0.13345086981233123, 0.17184676482803551, 0.15059227013636023, 0.15903708842486886, 0.14771485368666382, 0.18191210221145493, 0.13443985652332702, 0.14752665518286667, 0.1444690749470363, 0.17021087853462014, 0.1510207189152708, 0.1629298612650213, 0.1640376583150015, 0.17502605546502747, 0.15343541980124642, 0.15580756268266327, 0.2617429093311854, 0.1788351380894594, 0.12239172788340946, 0.17777523454670863, 0.1940953481530756, 0.1525121808932206, 0.16296268915598178, 0.1624438643830074, 0.1553445257036925, 0.15834247173750504, 0.15106288303570437, 0.11607487263291894, 0.15724393606885756, 0.1943690779176378, 0.1140449899440622, 0.09025468712225715, 0.12591574010596573, 0.16364844425120806, 0.2015087849289311, 0.18105666946622578, 0.1892953518585283, 0.180875929609688, 0.18388196024195502, 0.18877029638586862, 0.20815414195388326, 0.2054340144781509, 0.18587890873541746, 0.04872336686505163, 0.05486300041419423, 0.056324600974750894, 0.056917436927669596, 0.05171158311890889, 0.05628540408449212, 0.0628835363292326, 0.06987421090558144, 0.08903336906759762]}, "mutation_prompt": null}
