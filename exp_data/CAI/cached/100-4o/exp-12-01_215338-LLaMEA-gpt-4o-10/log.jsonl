{"id": "67d5f98a-5416-4891-9c26-c7be0da8346a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.v_max = 0.2 * (self.upper_bound - self.lower_bound)\n        self.v_min = -self.v_max\n        self.c1 = 2.0  # cognitive coefficient\n        self.c2 = 2.0  # social coefficient\n        self.w = 0.7   # inertia weight\n        self.mutation_factor = 0.5\n        self.crossover_prob = 0.9\n\n    def initialize_particles(self):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(self.v_min, self.v_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        return positions, velocities, personal_best_positions, personal_best_scores\n\n    def de_mutation(self, population, best_idx):\n        idxs = [idx for idx in range(self.population_size) if idx != best_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant_vector = population[a] + self.mutation_factor * (population[b] - population[c])\n        mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n        return mutant_vector\n\n    def de_crossover(self, target, mutant):\n        crossover = np.random.rand(self.dim) < self.crossover_prob\n        trial_vector = np.where(crossover, mutant, target)\n        return trial_vector\n\n    def __call__(self, func):\n        positions, velocities, personal_best_positions, personal_best_scores = self.initialize_particles()\n        global_best_score = np.inf\n        global_best_position = None\n\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Evaluate fitness\n                score = func(positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # PSO velocity and position update\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + \n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            velocities = np.clip(velocities, self.v_min, self.v_max)\n            positions += velocities\n            positions = np.clip(positions, self.lower_bound, self.upper_bound)\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                mutant_vector = self.de_mutation(positions, i)\n                trial_vector = self.de_crossover(positions[i], mutant_vector)\n                \n                trial_score = func(trial_vector)\n                evaluations += 1\n                \n                if trial_score < personal_best_scores[i]:\n                    personal_best_scores[i] = trial_score\n                    personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n            if evaluations >= self.budget:\n                break\n        \n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Hybrid Particle Swarm Optimization with Differential Evolution mutation enhances global exploration and fine-tuning capabilities for diverse black-box optimization tasks.", "configspace": "", "generation": 0, "fitness": 0.18908012473211327, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.3912236421808002, 0.3535179454615902, 0.3598555212539595, 0.31469289231931696, 0.3062753273040125, 0.4135531197579063, 0.33598617749944937, 0.41029523732130657, 0.40984879645554406, 0.03389102674179589, 0.04745158273947525, 0.005166782244313439, 0.057111430948668884, 0.027083369972412896, 0.015551546468953736, 0.000554262126287508, 0.017815545084921225, 0.012559906171280444, 0.08719718050782044, 0.09745291995813843, 0.09321585398054089, 0.07029402268820306, 0.11158157223686571, 0.08282788869787927, 0.07018141602409411, 0.12514609456641446, 0.07598129661361841, 0.07933627059134318, 0.08244151170634473, 0.1031626062937907, 0.07972664575596555, 0.08661474725250295, 0.055886842262698355, 0.08406460670109717, 0.0863161786193567, 0.07760234627650675, 0.9646787514286669, 0.9503167406461982, 0.9592075787560141, 0.9482350219536545, 0.9369478471944097, 0.9503959981140221, 0.9517862334715712, 0.9408553886203723, 0.9411051057814293, 0.20561193256828425, 0.20270645706960688, 0.17238905139244542, 0.1528789898996067, 0.19470299305324656, 0.22224434858151232, 0.14458034858640678, 0.2199939425254055, 0.1879836330080682, 0.21991451339132795, 0.2258282221016893, 0.24325976836830654, 0.1895695034870548, 0.19122945343058828, 0.23915804885303982, 0.23940132195923547, 0.24217763897887645, 0.24384373043564134, 0.1486375401565727, 0.09185101495274461, 0.09575603899785423, 0.12028288111751861, 0.12833943080931987, 0.11397215518334491, 0.1138107121123687, 0.12845051593933243, 0.11508895731565993, 0.14039460330452003, 0.1252404707524296, 0.13023124647461792, 0.148711205550502, 0.11167768497027519, 0.11607990693955494, 0.1264155638483011, 0.10968386762602844, 0.0806284596007325, 9.999999999998899e-05, 0.01903336142496659, 9.999999999998899e-05, 0.02813554506351279, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11916990082055523, 0.06047117670560853, 0.1002580970308149, 0.08651785648998123, 0.03337707913951604, 0.06699926226514163, 0.19329988626629357, 0.11534388274508633, 0.07553888455936941, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015667799689273676, 0.039648517597680066, 0.09763974777103335, 0.06437910521955492, 0.07523107105214621, 9.999999999998899e-05, 0.09090634442947554, 0.060106703172618126, 0.039599149946226486, 0.05861462465099687, 0.3525358113094019, 0.34471321447770964, 0.31115442256305814, 0.3221517057696254, 0.36833781586395964, 0.3110437564899948, 0.3248513357087591, 0.3641814596059225, 0.33483953615547024, 0.07700017159196881, 0.06716084088752172, 0.08445270198354737, 0.08673864427154221, 0.137192642811221, 0.09235536482917328, 0.08797841329255351, 0.08374600846020652, 0.08697254467706628, 0.15772719198755547, 0.17681197305424845, 0.15369827195137364, 0.1552389147923543, 0.16152417875714842, 0.17928841051197797, 0.1886445982071675, 0.13668082461566589, 0.1575888531303392, 0.24009863591634417, 0.25313878946462987, 0.2305684670195315, 0.23297300117907582, 0.2271879177928977, 0.2518213551155998, 0.23069389807225082, 0.22374231138562561, 0.23741424679176615, 0.1667975282947931, 0.1616982432857501, 0.17815667743608088, 0.19793811191060162, 0.21437920887868767, 0.1991487771068713, 0.18368079145425387, 0.17678485639595187, 0.18093973084155845, 0.20854974637991874, 0.18625679268242, 0.21498312847698064, 0.2171901924942865, 0.19706161873275585, 0.2262160371519225, 0.18906233763112212, 0.20107381089763765, 0.22215772385498211, 0.1925857262480174, 0.17589124969553926, 0.19231576683604545, 0.17837631136689647, 0.1865012310616153, 0.2087164234307255, 0.20290210312340418, 0.16632585269407896, 0.18377709261607766, 0.4335366149320309, 0.15608807222146204, 0.15320550280155854, 0.48502755856586055, 0.19444243438837794, 0.16585298786776315, 0.17151900728189307, 0.1594046814739315, 0.49620725877665284, 0.44617153930191245, 0.19749952891067724, 0.37360822475557687, 0.2029891532649334, 0.3857367077545405, 0.15188641417611648, 0.27827531212721535, 0.10393466771891269, 0.31887938278073025, 0.19364157921221437, 0.17553176524326575, 0.19438184657803204, 0.18917689098216983, 0.18850895253692512, 0.17800124669865058, 0.18685719318639926, 0.17895055362859225, 0.1906511832496358, 0.08242069680896491, 0.08892151960475092, 0.07818628435762365, 0.07913158331072923, 0.0759402073442772, 0.08781517574890407, 0.07702225971698284, 0.0767142239741907, 0.07421650124739898]}, "mutation_prompt": null}
{"id": "fc055ed7-05cc-4545-811b-a7e9f2f1a766", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.v_max = 0.2 * (self.upper_bound - self.lower_bound)\n        self.v_min = -self.v_max\n        self.c1 = 2.0  # cognitive coefficient\n        self.c2 = 2.0  # social coefficient\n        self.w = 0.7   # inertia weight\n        self.mutation_factor = 0.5\n        self.crossover_prob = 0.9\n\n    def initialize_particles(self):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(self.v_min, self.v_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        return positions, velocities, personal_best_positions, personal_best_scores\n\n    def de_mutation(self, population, best_idx):\n        idxs = [idx for idx in range(self.population_size) if idx != best_idx]\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant_vector = population[a] + self.mutation_factor * (population[b] - population[c])\n        mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n        return mutant_vector\n\n    def de_crossover(self, target, mutant):\n        crossover = np.random.rand(self.dim) < self.crossover_prob\n        trial_vector = np.where(crossover, mutant, target)\n        return trial_vector\n\n    def __call__(self, func):\n        positions, velocities, personal_best_positions, personal_best_scores = self.initialize_particles()\n        global_best_score = np.inf\n        global_best_position = None\n\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Evaluate fitness\n                score = func(positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # PSO velocity and position update\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + \n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            velocities = np.clip(velocities, self.v_min, self.v_max)\n            positions += velocities\n            positions = np.clip(positions, self.lower_bound, self.upper_bound)\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                mutant_vector = self.de_mutation(positions, i)\n                trial_vector = self.de_crossover(positions[i], mutant_vector)\n                \n                trial_score = func(trial_vector)\n                evaluations += 1\n                \n                if trial_score < personal_best_scores[i]:\n                    personal_best_scores[i] = trial_score\n                    personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n            if evaluations >= self.budget:\n                break\n        \n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Hybrid Particle Swarm Optimization with Differential Evolution mutation enhances global exploration and fine-tuning capabilities for diverse black-box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "67d5f98a-5416-4891-9c26-c7be0da8346a", "metadata": {"aucs": [0.3912236421808002, 0.3535179454615902, 0.3598555212539595, 0.31469289231931696, 0.3062753273040125, 0.4135531197579063, 0.33598617749944937, 0.41029523732130657, 0.40984879645554406, 0.03389102674179589, 0.04745158273947525, 0.005166782244313439, 0.057111430948668884, 0.027083369972412896, 0.015551546468953736, 0.000554262126287508, 0.017815545084921225, 0.012559906171280444, 0.08719718050782044, 0.09745291995813843, 0.09321585398054089, 0.07029402268820306, 0.11158157223686571, 0.08282788869787927, 0.07018141602409411, 0.12514609456641446, 0.07598129661361841, 0.07933627059134318, 0.08244151170634473, 0.1031626062937907, 0.07972664575596555, 0.08661474725250295, 0.055886842262698355, 0.08406460670109717, 0.0863161786193567, 0.07760234627650675, 0.9646787514286669, 0.9503167406461982, 0.9592075787560141, 0.9482350219536545, 0.9369478471944097, 0.9503959981140221, 0.9517862334715712, 0.9408553886203723, 0.9411051057814293, 0.20561193256828425, 0.20270645706960688, 0.17238905139244542, 0.1528789898996067, 0.19470299305324656, 0.22224434858151232, 0.14458034858640678, 0.2199939425254055, 0.1879836330080682, 0.21991451339132795, 0.2258282221016893, 0.24325976836830654, 0.1895695034870548, 0.19122945343058828, 0.23915804885303982, 0.23940132195923547, 0.24217763897887645, 0.24384373043564134, 0.1486375401565727, 0.09185101495274461, 0.09575603899785423, 0.12028288111751861, 0.12833943080931987, 0.11397215518334491, 0.1138107121123687, 0.12845051593933243, 0.11508895731565993, 0.14039460330452003, 0.1252404707524296, 0.13023124647461792, 0.148711205550502, 0.11167768497027519, 0.11607990693955494, 0.1264155638483011, 0.10968386762602844, 0.0806284596007325, 9.999999999998899e-05, 0.01903336142496659, 9.999999999998899e-05, 0.02813554506351279, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11916990082055523, 0.06047117670560853, 0.1002580970308149, 0.08651785648998123, 0.03337707913951604, 0.06699926226514163, 0.19329988626629357, 0.11534388274508633, 0.07553888455936941, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015667799689273676, 0.039648517597680066, 0.09763974777103335, 0.06437910521955492, 0.07523107105214621, 9.999999999998899e-05, 0.09090634442947554, 0.060106703172618126, 0.039599149946226486, 0.05861462465099687, 0.3525358113094019, 0.34471321447770964, 0.31115442256305814, 0.3221517057696254, 0.36833781586395964, 0.3110437564899948, 0.3248513357087591, 0.3641814596059225, 0.33483953615547024, 0.07700017159196881, 0.06716084088752172, 0.08445270198354737, 0.08673864427154221, 0.137192642811221, 0.09235536482917328, 0.08797841329255351, 0.08374600846020652, 0.08697254467706628, 0.15772719198755547, 0.17681197305424845, 0.15369827195137364, 0.1552389147923543, 0.16152417875714842, 0.17928841051197797, 0.1886445982071675, 0.13668082461566589, 0.1575888531303392, 0.24009863591634417, 0.25313878946462987, 0.2305684670195315, 0.23297300117907582, 0.2271879177928977, 0.2518213551155998, 0.23069389807225082, 0.22374231138562561, 0.23741424679176615, 0.1667975282947931, 0.1616982432857501, 0.17815667743608088, 0.19793811191060162, 0.21437920887868767, 0.1991487771068713, 0.18368079145425387, 0.17678485639595187, 0.18093973084155845, 0.20854974637991874, 0.18625679268242, 0.21498312847698064, 0.2171901924942865, 0.19706161873275585, 0.2262160371519225, 0.18906233763112212, 0.20107381089763765, 0.22215772385498211, 0.1925857262480174, 0.17589124969553926, 0.19231576683604545, 0.17837631136689647, 0.1865012310616153, 0.2087164234307255, 0.20290210312340418, 0.16632585269407896, 0.18377709261607766, 0.4335366149320309, 0.15608807222146204, 0.15320550280155854, 0.48502755856586055, 0.19444243438837794, 0.16585298786776315, 0.17151900728189307, 0.1594046814739315, 0.49620725877665284, 0.44617153930191245, 0.19749952891067724, 0.37360822475557687, 0.2029891532649334, 0.3857367077545405, 0.15188641417611648, 0.27827531212721535, 0.10393466771891269, 0.31887938278073025, 0.19364157921221437, 0.17553176524326575, 0.19438184657803204, 0.18917689098216983, 0.18850895253692512, 0.17800124669865058, 0.18685719318639926, 0.17895055362859225, 0.1906511832496358, 0.08242069680896491, 0.08892151960475092, 0.07818628435762365, 0.07913158331072923, 0.0759402073442772, 0.08781517574890407, 0.07702225971698284, 0.0767142239741907, 0.07421650124739898]}, "mutation_prompt": null}
