{"id": "aa8730d5-f8ee-4e15-be35-49648dc4dd24", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.inertia_weight = 0.7\n        self.cognitive_coefficient = 1.4\n        self.social_coefficient = 1.4\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        \n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n        \n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Particle Swarm Optimization step\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i] +\n                                 self.cognitive_coefficient * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.social_coefficient * r2 * (global_best_position - positions[i]))\n                candidates = positions[i] + velocities[i]\n                \n                # Differential Evolution step\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = positions[indices]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate,\n                                        mutant_vector, candidates)\n                \n                # Evaluate new candidate\n                trial_score = func(trial_vector)\n                evaluations += 1\n                \n                if trial_score < personal_best_scores[i]:\n                    personal_best_scores[i] = trial_score\n                    personal_best_positions[i] = trial_vector\n                    \n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n            \n            positions = np.array([personal_best_positions[i] if np.random.rand() < 0.5 else positions[i]\n                                  for i in range(self.population_size)])\n        \n        return global_best_position", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm intelligence algorithm combines differential evolution and a simplified particle swarm optimization to balance exploration and exploitation in high-dimensional search spaces.", "configspace": "", "generation": 0, "fitness": 0.22295933259651732, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.4604066538223407, 0.4604066538223407, 0.4604066538223407, 0.49383162255512736, 0.49383162255512736, 0.49383162255512736, 0.47711945693718827, 0.47711945693718827, 0.47711945693718827, 0.21795423229604416, 0.21795423229604416, 0.21795423229604416, 0.18648759104923707, 0.18648759104923707, 0.18648759104923707, 0.21136605311837187, 0.21136605311837187, 0.21136605311837187, 0.10698557366138572, 0.10698557366138572, 0.10698557366138572, 0.07356005304726154, 0.07356005304726154, 0.07356005304726154, 0.08711981032689653, 0.08711981032689653, 0.08711981032689653, 0.06458806592875843, 0.06458806592875843, 0.06458806592875843, 0.07179003292556974, 0.07179003292556974, 0.07179003292556974, 0.07605934414802562, 0.07605934414802562, 0.07605934414802562, 0.9692764322849313, 0.9692764322849313, 0.9692764322849313, 0.9541889972038164, 0.9541889972038164, 0.9541889972038164, 0.9676952588213492, 0.9676952588213492, 0.9676952588213492, 0.20929382997185453, 0.20929382997185453, 0.20929382997185453, 0.21741353435046107, 0.21741353435046107, 0.21741353435046107, 0.2069673594648297, 0.2069673594648297, 0.2069673594648297, 0.394313852505772, 0.394313852505772, 0.394313852505772, 0.3708380940868856, 0.3708380940868856, 0.3708380940868856, 0.41135077227614225, 0.41135077227614225, 0.41135077227614225, 0.1469194153122778, 0.1469194153122778, 0.1469194153122778, 0.14885493209053946, 0.14885493209053946, 0.14885493209053946, 0.12534115651558075, 0.12534115651558075, 0.12534115651558075, 0.18444099850100593, 0.18444099850100593, 0.18444099850100593, 0.14581020802565614, 0.14581020802565614, 0.14581020802565614, 0.14470250224312442, 0.14470250224312442, 0.14470250224312442, 0.08712687703896427, 0.08712687703896427, 0.08712687703896427, 0.07829993080535247, 0.07829993080535247, 0.07829993080535247, 0.07371618398334978, 0.07371618398334978, 0.07371618398334978, 0.18952528332063323, 0.18952528332063323, 0.18952528332063323, 0.20986753678458103, 0.20986753678458103, 0.20986753678458103, 0.25077217623268544, 0.25077217623268544, 0.25077217623268544, 0.004618055801185794, 0.004618055801185794, 0.004618055801185794, 0.013504538237076535, 0.013504538237076535, 0.013504538237076535, 0.01872301345297711, 0.01872301345297711, 0.01872301345297711, 0.11651241796207501, 0.11651241796207501, 0.11651241796207501, 0.10442513944908549, 0.10442513944908549, 0.10442513944908549, 0.11299638966771308, 0.11299638966771308, 0.11299638966771308, 0.4089799086148562, 0.4089799086148562, 0.4089799086148562, 0.38364792741967435, 0.38364792741967435, 0.38364792741967435, 0.4039890827284638, 0.4039890827284638, 0.4039890827284638, 0.08725034690273492, 0.08725034690273492, 0.08725034690273492, 0.08494489453707488, 0.08494489453707488, 0.08494489453707488, 0.07984032389166373, 0.07984032389166373, 0.07984032389166373, 0.1375846805653731, 0.1375846805653731, 0.1375846805653731, 0.12661586662107294, 0.12661586662107294, 0.12661586662107294, 0.24808902304312108, 0.24808902304312108, 0.24808902304312108, 0.24127297442289197, 0.24127297442289197, 0.24127297442289197, 0.2393383522329825, 0.2393383522329825, 0.2393383522329825, 0.25189606566755296, 0.25189606566755296, 0.25189606566755296, 0.18332440823588636, 0.18332440823588636, 0.18332440823588636, 0.18489829024153137, 0.18489829024153137, 0.18489829024153137, 0.18999532173612121, 0.18999532173612121, 0.18999532173612121, 0.16847067415067718, 0.16847067415067718, 0.16847067415067718, 0.18655329847132307, 0.18655329847132307, 0.18655329847132307, 0.16945694245279497, 0.16945694245279497, 0.16945694245279497, 0.17304348068851994, 0.17304348068851994, 0.17304348068851994, 0.18545012053650944, 0.18545012053650944, 0.18545012053650944, 0.17105326926619013, 0.17105326926619013, 0.17105326926619013, 0.4697597912391366, 0.4697597912391366, 0.4697597912391366, 0.2629312924715488, 0.2629312924715488, 0.2629312924715488, 0.2809600053343928, 0.2809600053343928, 0.2809600053343928, 0.16677076417788672, 0.16677076417788672, 0.16677076417788672, 0.2369156015789079, 0.2369156015789079, 0.2369156015789079, 0.2017065037604281, 0.2017065037604281, 0.2017065037604281, 0.17183492372102738, 0.17183492372102738, 0.17183492372102738, 0.19268641989666857, 0.19268641989666857, 0.19268641989666857, 0.18375344947961203, 0.18375344947961203, 0.18375344947961203, 0.0645284922875482, 0.0645284922875482, 0.0645284922875482, 0.0654370811466426, 0.0654370811466426, 0.0654370811466426, 0.06532899322231811, 0.06532899322231811, 0.06532899322231811]}, "mutation_prompt": null}
{"id": "59932d69-b15a-4465-a81a-48c3a80b81ba", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.inertia_weight = 0.7\n        self.cognitive_coefficient = 1.4\n        self.social_coefficient = 1.4\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        \n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n        \n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Particle Swarm Optimization step\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i] +\n                                 self.cognitive_coefficient * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.social_coefficient * r2 * (global_best_position - positions[i]))\n                candidates = positions[i] + velocities[i]\n                \n                # Differential Evolution step\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = positions[indices]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate,\n                                        mutant_vector, candidates)\n                \n                # Evaluate new candidate\n                trial_score = func(trial_vector)\n                evaluations += 1\n                \n                if trial_score < personal_best_scores[i]:\n                    personal_best_scores[i] = trial_score\n                    personal_best_positions[i] = trial_vector\n                    \n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n            \n            positions = np.array([personal_best_positions[i] if np.random.rand() < 0.5 else positions[i]\n                                  for i in range(self.population_size)])\n        \n        return global_best_position", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm intelligence algorithm combines differential evolution and a simplified particle swarm optimization to balance exploration and exploitation in high-dimensional search spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "aa8730d5-f8ee-4e15-be35-49648dc4dd24", "metadata": {"aucs": [0.4604066538223407, 0.4604066538223407, 0.4604066538223407, 0.49383162255512736, 0.49383162255512736, 0.49383162255512736, 0.47711945693718827, 0.47711945693718827, 0.47711945693718827, 0.21795423229604416, 0.21795423229604416, 0.21795423229604416, 0.18648759104923707, 0.18648759104923707, 0.18648759104923707, 0.21136605311837187, 0.21136605311837187, 0.21136605311837187, 0.10698557366138572, 0.10698557366138572, 0.10698557366138572, 0.07356005304726154, 0.07356005304726154, 0.07356005304726154, 0.08711981032689653, 0.08711981032689653, 0.08711981032689653, 0.06458806592875843, 0.06458806592875843, 0.06458806592875843, 0.07179003292556974, 0.07179003292556974, 0.07179003292556974, 0.07605934414802562, 0.07605934414802562, 0.07605934414802562, 0.9692764322849313, 0.9692764322849313, 0.9692764322849313, 0.9541889972038164, 0.9541889972038164, 0.9541889972038164, 0.9676952588213492, 0.9676952588213492, 0.9676952588213492, 0.20929382997185453, 0.20929382997185453, 0.20929382997185453, 0.21741353435046107, 0.21741353435046107, 0.21741353435046107, 0.2069673594648297, 0.2069673594648297, 0.2069673594648297, 0.394313852505772, 0.394313852505772, 0.394313852505772, 0.3708380940868856, 0.3708380940868856, 0.3708380940868856, 0.41135077227614225, 0.41135077227614225, 0.41135077227614225, 0.1469194153122778, 0.1469194153122778, 0.1469194153122778, 0.14885493209053946, 0.14885493209053946, 0.14885493209053946, 0.12534115651558075, 0.12534115651558075, 0.12534115651558075, 0.18444099850100593, 0.18444099850100593, 0.18444099850100593, 0.14581020802565614, 0.14581020802565614, 0.14581020802565614, 0.14470250224312442, 0.14470250224312442, 0.14470250224312442, 0.08712687703896427, 0.08712687703896427, 0.08712687703896427, 0.07829993080535247, 0.07829993080535247, 0.07829993080535247, 0.07371618398334978, 0.07371618398334978, 0.07371618398334978, 0.18952528332063323, 0.18952528332063323, 0.18952528332063323, 0.20986753678458103, 0.20986753678458103, 0.20986753678458103, 0.25077217623268544, 0.25077217623268544, 0.25077217623268544, 0.004618055801185794, 0.004618055801185794, 0.004618055801185794, 0.013504538237076535, 0.013504538237076535, 0.013504538237076535, 0.01872301345297711, 0.01872301345297711, 0.01872301345297711, 0.11651241796207501, 0.11651241796207501, 0.11651241796207501, 0.10442513944908549, 0.10442513944908549, 0.10442513944908549, 0.11299638966771308, 0.11299638966771308, 0.11299638966771308, 0.4089799086148562, 0.4089799086148562, 0.4089799086148562, 0.38364792741967435, 0.38364792741967435, 0.38364792741967435, 0.4039890827284638, 0.4039890827284638, 0.4039890827284638, 0.08725034690273492, 0.08725034690273492, 0.08725034690273492, 0.08494489453707488, 0.08494489453707488, 0.08494489453707488, 0.07984032389166373, 0.07984032389166373, 0.07984032389166373, 0.1375846805653731, 0.1375846805653731, 0.1375846805653731, 0.12661586662107294, 0.12661586662107294, 0.12661586662107294, 0.24808902304312108, 0.24808902304312108, 0.24808902304312108, 0.24127297442289197, 0.24127297442289197, 0.24127297442289197, 0.2393383522329825, 0.2393383522329825, 0.2393383522329825, 0.25189606566755296, 0.25189606566755296, 0.25189606566755296, 0.18332440823588636, 0.18332440823588636, 0.18332440823588636, 0.18489829024153137, 0.18489829024153137, 0.18489829024153137, 0.18999532173612121, 0.18999532173612121, 0.18999532173612121, 0.16847067415067718, 0.16847067415067718, 0.16847067415067718, 0.18655329847132307, 0.18655329847132307, 0.18655329847132307, 0.16945694245279497, 0.16945694245279497, 0.16945694245279497, 0.17304348068851994, 0.17304348068851994, 0.17304348068851994, 0.18545012053650944, 0.18545012053650944, 0.18545012053650944, 0.17105326926619013, 0.17105326926619013, 0.17105326926619013, 0.4697597912391366, 0.4697597912391366, 0.4697597912391366, 0.2629312924715488, 0.2629312924715488, 0.2629312924715488, 0.2809600053343928, 0.2809600053343928, 0.2809600053343928, 0.16677076417788672, 0.16677076417788672, 0.16677076417788672, 0.2369156015789079, 0.2369156015789079, 0.2369156015789079, 0.2017065037604281, 0.2017065037604281, 0.2017065037604281, 0.17183492372102738, 0.17183492372102738, 0.17183492372102738, 0.19268641989666857, 0.19268641989666857, 0.19268641989666857, 0.18375344947961203, 0.18375344947961203, 0.18375344947961203, 0.0645284922875482, 0.0645284922875482, 0.0645284922875482, 0.0654370811466426, 0.0654370811466426, 0.0654370811466426, 0.06532899322231811, 0.06532899322231811, 0.06532899322231811]}, "mutation_prompt": null}
