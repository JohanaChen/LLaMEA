{"id": "4c1e72cc-2c57-44e7-80e8-4125c55bd8d7", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.mutation_factor = 0.5  # Differential weight\n        self.crossover_prob = 0.7  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.pop_size\n\n        while eval_count < self.budget:\n            for i in range(self.pop_size):\n                # Mutation\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(population[i])\n                crossover_points = np.random.rand(self.dim) < self.crossover_prob\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Dynamic parameter adjustment\n                self.mutation_factor = 0.5 + 0.5 * (1 - eval_count / self.budget)\n                self.crossover_prob = 0.7 - 0.3 * (eval_count / self.budget)\n\n                if eval_count >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "An adaptive Differential Evolution algorithm incorporating dynamic parameter adjustment and a mutation strategy to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.21645657307336685, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.655566569341806, 0.6471639510726988, 0.6213820622241188, 0.6444716849205294, 0.6568998549563877, 0.6505370363361751, 0.6466885220616206, 0.6464949312341481, 0.6268880913117363, 0.4318807762937409, 0.4416768313963002, 0.402262015888324, 0.44702702904774516, 0.4146433896487478, 0.4178753911702181, 0.42218288511659374, 0.40520245919532605, 0.41426299822995816, 0.1818248740945304, 0.14240974539721196, 0.14223397956939898, 0.1743713423422163, 0.15686495265690992, 0.1489981260893235, 0.12439893232094035, 0.1728234548212566, 0.12296878892151741, 0.11591834076456087, 0.1280791477450024, 0.11940049163986932, 0.13522444813219114, 0.12581898477139508, 0.12514076527424245, 0.12332724442218224, 0.13567991362015308, 0.11326132209981044, 0.9749388044002409, 0.9729652955725255, 0.9644027172668842, 0.9599345466538608, 0.9680162356917967, 0.9505834627682576, 0.9633710608106747, 0.9702692544385304, 0.9804495251439997, 0.21752623156497353, 0.20432651766422327, 0.20094650033471906, 0.21365750487792634, 0.21901107803499276, 0.21691585408408942, 0.2161916500714498, 0.22526294119212098, 0.22249502579980973, 0.21901037597288797, 0.20928150294506553, 0.21244787873136983, 0.22614409744310238, 0.22475689945902544, 0.23803061748633403, 0.22399791368055688, 0.24156549728141008, 0.2380202172818472, 0.1347671447319444, 0.11561016731861395, 0.13671475054002113, 0.11985764042489722, 0.1450698799544552, 0.1259076104462853, 0.13547232412249055, 0.14040841052073405, 0.12431127721212265, 0.0849863583469962, 0.12229729432567205, 0.08787384371204221, 0.11923551009046862, 0.11977062058516152, 0.11106380419940542, 0.09866378653814323, 0.0882252130312623, 0.11792302527507237, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04442677549734164, 0.06108468395246214, 0.05414565768331381, 0.07339109820242407, 0.06223465201939549, 0.04131270171933443, 0.11308973238078046, 0.0746426752228232, 0.06380201038581768, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002974589762786084, 9.999999999998899e-05, 0.07360301783660272, 0.07366422675273243, 0.06796972316673577, 0.08114238656467465, 0.07874816944306928, 0.08246222510640622, 0.0763152076363578, 0.08293316018441965, 0.08015428918901213, 0.3788910139627306, 0.4006832246059776, 0.41454611730874014, 0.4320454552813764, 0.4119440048077393, 0.41406694837657754, 0.41933866127075026, 0.43109924588299686, 0.42125331670359123, 0.08665835498606156, 0.08762134128069343, 0.07859779100819653, 0.07948148458008164, 0.08330642941023048, 0.08130272384417625, 0.08499829441170459, 0.08533119486960528, 0.08033637786142045, 0.1343272622699203, 0.1446667810377208, 0.1337664118771913, 0.13338455169710783, 0.14403598412081353, 0.15706498607027553, 0.16623883077168466, 0.15978243636965328, 0.15295731901602339, 0.2237071325447606, 0.23947156220804178, 0.23766592876869908, 0.2288743795064183, 0.2213706691513483, 0.2317111349551776, 0.2818027444347535, 0.2702792264307825, 0.2652360683038244, 0.16779829672191282, 0.14723152071360124, 0.17120251196379288, 0.14999175256598773, 0.13409402448230268, 0.1580897580562025, 0.18984122385527713, 0.177745207474989, 0.18000449456363676, 0.1842086362109876, 0.19170309321813706, 0.17536486110073835, 0.18463379578521644, 0.1854510601846896, 0.1953126010193016, 0.17578868821234794, 0.17337903428949397, 0.1841159428189696, 0.19429070656107772, 0.18650074930096305, 0.18467489719690489, 0.18639746401206003, 0.19586431616621613, 0.20123866242606792, 0.1970559477162931, 0.18865699845074202, 0.19518782731876716, 0.207480199939998, 0.20986375748232267, 0.16807175498973614, 0.16075827051157465, 0.1705885663961133, 0.16817407941342988, 0.18437837115240463, 0.1677242418212891, 0.1520618544191149, 0.15368988874158274, 0.18400774410440845, 0.21027033700636644, 0.21716984027793718, 0.1619642785664539, 0.17790936796615386, 0.20093411329798516, 0.27641719882581417, 0.2423852105060701, 0.17859444378841383, 0.19291675575969103, 0.18522360464668874, 0.17956135597660927, 0.18265485338435783, 0.19411404172845503, 0.17289650800111034, 0.1984809532185321, 0.17800648915773365, 0.06984870295958678, 0.07894323731305997, 0.07082658680301479, 0.07396486257665025, 0.06783892510270961, 0.07205524511293604, 0.07381719438714118, 0.0723377936542825, 0.07069350762014526]}, "mutation_prompt": null}
{"id": "8385221b-b3e7-47f3-8b8a-e1c93d14693e", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.mutation_factor = 0.5  # Differential weight\n        self.crossover_prob = 0.7  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.pop_size\n\n        while eval_count < self.budget:\n            for i in range(self.pop_size):\n                # Mutation\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(population[i])\n                crossover_points = np.random.rand(self.dim) < self.crossover_prob\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Dynamic parameter adjustment\n                self.mutation_factor = 0.5 + 0.5 * (1 - eval_count / self.budget)\n                self.crossover_prob = 0.7 - 0.3 * (eval_count / self.budget)\n\n                if eval_count >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "An adaptive Differential Evolution algorithm incorporating dynamic parameter adjustment and a mutation strategy to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4c1e72cc-2c57-44e7-80e8-4125c55bd8d7", "metadata": {"aucs": [0.655566569341806, 0.6471639510726988, 0.6213820622241188, 0.6444716849205294, 0.6568998549563877, 0.6505370363361751, 0.6466885220616206, 0.6464949312341481, 0.6268880913117363, 0.4318807762937409, 0.4416768313963002, 0.402262015888324, 0.44702702904774516, 0.4146433896487478, 0.4178753911702181, 0.42218288511659374, 0.40520245919532605, 0.41426299822995816, 0.1818248740945304, 0.14240974539721196, 0.14223397956939898, 0.1743713423422163, 0.15686495265690992, 0.1489981260893235, 0.12439893232094035, 0.1728234548212566, 0.12296878892151741, 0.11591834076456087, 0.1280791477450024, 0.11940049163986932, 0.13522444813219114, 0.12581898477139508, 0.12514076527424245, 0.12332724442218224, 0.13567991362015308, 0.11326132209981044, 0.9749388044002409, 0.9729652955725255, 0.9644027172668842, 0.9599345466538608, 0.9680162356917967, 0.9505834627682576, 0.9633710608106747, 0.9702692544385304, 0.9804495251439997, 0.21752623156497353, 0.20432651766422327, 0.20094650033471906, 0.21365750487792634, 0.21901107803499276, 0.21691585408408942, 0.2161916500714498, 0.22526294119212098, 0.22249502579980973, 0.21901037597288797, 0.20928150294506553, 0.21244787873136983, 0.22614409744310238, 0.22475689945902544, 0.23803061748633403, 0.22399791368055688, 0.24156549728141008, 0.2380202172818472, 0.1347671447319444, 0.11561016731861395, 0.13671475054002113, 0.11985764042489722, 0.1450698799544552, 0.1259076104462853, 0.13547232412249055, 0.14040841052073405, 0.12431127721212265, 0.0849863583469962, 0.12229729432567205, 0.08787384371204221, 0.11923551009046862, 0.11977062058516152, 0.11106380419940542, 0.09866378653814323, 0.0882252130312623, 0.11792302527507237, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04442677549734164, 0.06108468395246214, 0.05414565768331381, 0.07339109820242407, 0.06223465201939549, 0.04131270171933443, 0.11308973238078046, 0.0746426752228232, 0.06380201038581768, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002974589762786084, 9.999999999998899e-05, 0.07360301783660272, 0.07366422675273243, 0.06796972316673577, 0.08114238656467465, 0.07874816944306928, 0.08246222510640622, 0.0763152076363578, 0.08293316018441965, 0.08015428918901213, 0.3788910139627306, 0.4006832246059776, 0.41454611730874014, 0.4320454552813764, 0.4119440048077393, 0.41406694837657754, 0.41933866127075026, 0.43109924588299686, 0.42125331670359123, 0.08665835498606156, 0.08762134128069343, 0.07859779100819653, 0.07948148458008164, 0.08330642941023048, 0.08130272384417625, 0.08499829441170459, 0.08533119486960528, 0.08033637786142045, 0.1343272622699203, 0.1446667810377208, 0.1337664118771913, 0.13338455169710783, 0.14403598412081353, 0.15706498607027553, 0.16623883077168466, 0.15978243636965328, 0.15295731901602339, 0.2237071325447606, 0.23947156220804178, 0.23766592876869908, 0.2288743795064183, 0.2213706691513483, 0.2317111349551776, 0.2818027444347535, 0.2702792264307825, 0.2652360683038244, 0.16779829672191282, 0.14723152071360124, 0.17120251196379288, 0.14999175256598773, 0.13409402448230268, 0.1580897580562025, 0.18984122385527713, 0.177745207474989, 0.18000449456363676, 0.1842086362109876, 0.19170309321813706, 0.17536486110073835, 0.18463379578521644, 0.1854510601846896, 0.1953126010193016, 0.17578868821234794, 0.17337903428949397, 0.1841159428189696, 0.19429070656107772, 0.18650074930096305, 0.18467489719690489, 0.18639746401206003, 0.19586431616621613, 0.20123866242606792, 0.1970559477162931, 0.18865699845074202, 0.19518782731876716, 0.207480199939998, 0.20986375748232267, 0.16807175498973614, 0.16075827051157465, 0.1705885663961133, 0.16817407941342988, 0.18437837115240463, 0.1677242418212891, 0.1520618544191149, 0.15368988874158274, 0.18400774410440845, 0.21027033700636644, 0.21716984027793718, 0.1619642785664539, 0.17790936796615386, 0.20093411329798516, 0.27641719882581417, 0.2423852105060701, 0.17859444378841383, 0.19291675575969103, 0.18522360464668874, 0.17956135597660927, 0.18265485338435783, 0.19411404172845503, 0.17289650800111034, 0.1984809532185321, 0.17800648915773365, 0.06984870295958678, 0.07894323731305997, 0.07082658680301479, 0.07396486257665025, 0.06783892510270961, 0.07205524511293604, 0.07381719438714118, 0.0723377936542825, 0.07069350762014526]}, "mutation_prompt": null}
