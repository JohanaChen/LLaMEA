{"id": "2d3b902d-c12c-4e5a-ab2f-307182758c90", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim, pop_size=None):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size if pop_size else 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations += self.pop_size\n\n        best_idx = np.argmin(fitness)\n        best_vector = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                v = population[indices[0]] + self.F * (population[indices[1]] - population[indices[2]])\n                v = np.clip(v, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                u = np.where(crossover_mask, v, population[i])\n\n                # Selection\n                u_fitness = func(u)\n                self.evaluations += 1\n\n                if u_fitness < fitness[i]:\n                    population[i] = u\n                    fitness[i] = u_fitness\n\n                    if u_fitness < best_fitness:\n                        best_vector = u\n                        best_fitness = u_fitness\n\n                if self.evaluations >= self.budget:\n                    break\n\n            # Adaptive parameter control (e.g., F and CR adaptation)\n            self.F = 0.5 + 0.1 * (np.random.rand() - 0.5)\n            self.CR = 0.9 + 0.1 * (np.random.rand() - 0.5)\n\n        return best_vector, best_fitness", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Parameter Control to balance exploration and exploitation dynamically.", "configspace": "", "generation": 0, "fitness": 0.4027072075115614, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8102037737872114, 0.8052134149049599, 0.8092042823977268, 0.8091327580057418, 0.8152038306160377, 0.830429015296009, 0.8303591945301445, 0.8185391286152766, 0.8046046199880581, 0.6869584501741708, 0.6657537589930782, 0.6416830775390274, 0.6704597519758742, 0.663264666839888, 0.6718187740130539, 0.6780727518497981, 0.6548580624581769, 0.6832606458271577, 0.12073263003226276, 0.12017743653411439, 0.10636568366649712, 0.1239948669198444, 0.13684135688269072, 0.12174495960433107, 0.1024738226759564, 0.10931395518753084, 0.10500501674178309, 0.11328561430414974, 0.11470634078414899, 0.1014500439518703, 0.11261106922522335, 0.11451577060002327, 0.11745566586277145, 0.09858955145273973, 0.10876688388842792, 0.12082682861829941, 0.9385620026164195, 0.9455965958510322, 0.828411503475408, 0.8830382007798845, 0.918325878084702, 0.938754562330456, 0.8279667390957506, 0.9607834182171973, 0.9254539819891139, 0.45778045630133024, 0.5396467418628099, 0.469130308116845, 0.4634680270169004, 0.5057780905053963, 0.540578693504106, 0.49839281542732716, 0.513702272477812, 0.4894667978916617, 0.7612288436400112, 0.7748494512327833, 0.7447142775275382, 0.814378952320107, 0.8001471676994821, 0.818338257431547, 0.7341724101217026, 0.7930503098226573, 0.8150002848589443, 0.4272914284002055, 0.22101847433517963, 0.2319084540207722, 0.42666675729849945, 0.18011108824598354, 0.2736838915558043, 0.4731407982551413, 0.4357470138769024, 0.3872137565948671, 0.42262339818858274, 0.13000582770824676, 0.25365398319742005, 0.40967197935344835, 0.29261341329870616, 0.17401439867341173, 0.2975869014884239, 0.5569198441166732, 0.3934441170953138, 0.4575173516477178, 0.46284138444343403, 0.45092763158697424, 0.47736513117796275, 0.4053817782062462, 0.4256296147308144, 0.4660918983977449, 0.4875631582170231, 0.46026526486305297, 0.5871384267452877, 0.5724409512024631, 0.5899699763909239, 0.5889997311388382, 0.5800629931045613, 0.5830259038783456, 0.5987413352579704, 0.601250935568463, 0.5975989844450591, 0.1323982882495962, 0.2385718974062988, 0.14061816771087088, 0.262226911967795, 0.26162415152875607, 0.24726342719130678, 0.16832956742260052, 0.11639292760924769, 0.201808285833722, 0.3441839621234115, 0.3395792283250948, 0.329990398141665, 0.3559372075828078, 0.3605871894150493, 0.39365964438965273, 0.3432152592123727, 0.3535925750689295, 0.3118432741240019, 0.7301212624935076, 0.7321403802319023, 0.7420411111980011, 0.7300937522506123, 0.7306291201889676, 0.7528301919766978, 0.7180645814552775, 0.7220578929251347, 0.7464993830131119, 0.10005285016838006, 0.1164959709746286, 0.08719387361225017, 0.1717313596151815, 0.1011684176980927, 0.09958453466003336, 0.09741064179137826, 0.09227571543763335, 0.1163590797092624, 0.1474449604590089, 0.1451330486831972, 0.1719717410476147, 0.1536727306462462, 0.1370960744891696, 0.15182511762017348, 0.13162194374994685, 0.15793504855270624, 0.17433347269371002, 0.4448154464926919, 0.4501819590496806, 0.41478440375506065, 0.43143641776526864, 0.43309698198385616, 0.450785256458189, 0.4290353811103932, 0.46408379225867646, 0.45198115498550007, 0.33450914047853153, 0.3481733719263298, 0.35006483488163953, 0.324381121638723, 0.32913824637987277, 0.3185973311775936, 0.3856688078679098, 0.3430526181211643, 0.3518470271446047, 0.2111698139770688, 0.19792869706051208, 0.2136810914626256, 0.21193847446376135, 0.2031994215446724, 0.19124622754575893, 0.19575279012792457, 0.19280657482753472, 0.19497947436053087, 0.19053800305679958, 0.18547760137491687, 0.19248875888991157, 0.3510581137660407, 0.2979487557184267, 0.2228679263437977, 0.20203614543933812, 0.19780201126621244, 0.1825360324155797, 0.7898466598552554, 0.8244036943641347, 0.7683525540306256, 0.757774547958878, 0.19309370905418222, 0.7844826344709442, 0.7503216569839042, 0.17219667531088723, 0.5638052071536128, 0.7403141233219728, 0.2056831006202291, 0.7756430123313204, 0.19571190668472538, 0.4850198845917716, 0.16789349109277552, 0.6768370113074005, 0.20993403942634004, 0.20948573610281085, 0.20677084059550577, 0.2066831531131681, 0.20121609902143933, 0.21566996684330964, 0.18101786998275926, 0.18848655293116368, 0.17954321700539677, 0.19825329983436402, 0.18051533862132418, 0.09090405912637634, 0.08370920707718865, 0.07346626895245645, 0.08376226429962952, 0.07980489161450421, 0.07870730474570498, 0.07693273577192017, 0.08629959009621746, 0.07279621879151743]}, "mutation_prompt": null}
{"id": "fb904d96-211e-4a4a-ae4f-d368235b906f", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim, pop_size=None):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size if pop_size else 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations += self.pop_size\n\n        best_idx = np.argmin(fitness)\n        best_vector = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                v = population[indices[0]] + self.F * (population[indices[1]] - population[indices[2]])\n                v = np.clip(v, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                u = np.where(crossover_mask, v, population[i])\n\n                # Selection\n                u_fitness = func(u)\n                self.evaluations += 1\n\n                if u_fitness < fitness[i]:\n                    population[i] = u\n                    fitness[i] = u_fitness\n\n                    if u_fitness < best_fitness:\n                        best_vector = u\n                        best_fitness = u_fitness\n\n                if self.evaluations >= self.budget:\n                    break\n\n            # Adaptive parameter control (e.g., F and CR adaptation)\n            self.F = 0.5 + 0.1 * (np.random.rand() - 0.5)\n            self.CR = 0.9 + 0.1 * (np.random.rand() - 0.5)\n\n        return best_vector, best_fitness", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Parameter Control to balance exploration and exploitation dynamically.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2d3b902d-c12c-4e5a-ab2f-307182758c90", "metadata": {"aucs": [0.8102037737872114, 0.8052134149049599, 0.8092042823977268, 0.8091327580057418, 0.8152038306160377, 0.830429015296009, 0.8303591945301445, 0.8185391286152766, 0.8046046199880581, 0.6869584501741708, 0.6657537589930782, 0.6416830775390274, 0.6704597519758742, 0.663264666839888, 0.6718187740130539, 0.6780727518497981, 0.6548580624581769, 0.6832606458271577, 0.12073263003226276, 0.12017743653411439, 0.10636568366649712, 0.1239948669198444, 0.13684135688269072, 0.12174495960433107, 0.1024738226759564, 0.10931395518753084, 0.10500501674178309, 0.11328561430414974, 0.11470634078414899, 0.1014500439518703, 0.11261106922522335, 0.11451577060002327, 0.11745566586277145, 0.09858955145273973, 0.10876688388842792, 0.12082682861829941, 0.9385620026164195, 0.9455965958510322, 0.828411503475408, 0.8830382007798845, 0.918325878084702, 0.938754562330456, 0.8279667390957506, 0.9607834182171973, 0.9254539819891139, 0.45778045630133024, 0.5396467418628099, 0.469130308116845, 0.4634680270169004, 0.5057780905053963, 0.540578693504106, 0.49839281542732716, 0.513702272477812, 0.4894667978916617, 0.7612288436400112, 0.7748494512327833, 0.7447142775275382, 0.814378952320107, 0.8001471676994821, 0.818338257431547, 0.7341724101217026, 0.7930503098226573, 0.8150002848589443, 0.4272914284002055, 0.22101847433517963, 0.2319084540207722, 0.42666675729849945, 0.18011108824598354, 0.2736838915558043, 0.4731407982551413, 0.4357470138769024, 0.3872137565948671, 0.42262339818858274, 0.13000582770824676, 0.25365398319742005, 0.40967197935344835, 0.29261341329870616, 0.17401439867341173, 0.2975869014884239, 0.5569198441166732, 0.3934441170953138, 0.4575173516477178, 0.46284138444343403, 0.45092763158697424, 0.47736513117796275, 0.4053817782062462, 0.4256296147308144, 0.4660918983977449, 0.4875631582170231, 0.46026526486305297, 0.5871384267452877, 0.5724409512024631, 0.5899699763909239, 0.5889997311388382, 0.5800629931045613, 0.5830259038783456, 0.5987413352579704, 0.601250935568463, 0.5975989844450591, 0.1323982882495962, 0.2385718974062988, 0.14061816771087088, 0.262226911967795, 0.26162415152875607, 0.24726342719130678, 0.16832956742260052, 0.11639292760924769, 0.201808285833722, 0.3441839621234115, 0.3395792283250948, 0.329990398141665, 0.3559372075828078, 0.3605871894150493, 0.39365964438965273, 0.3432152592123727, 0.3535925750689295, 0.3118432741240019, 0.7301212624935076, 0.7321403802319023, 0.7420411111980011, 0.7300937522506123, 0.7306291201889676, 0.7528301919766978, 0.7180645814552775, 0.7220578929251347, 0.7464993830131119, 0.10005285016838006, 0.1164959709746286, 0.08719387361225017, 0.1717313596151815, 0.1011684176980927, 0.09958453466003336, 0.09741064179137826, 0.09227571543763335, 0.1163590797092624, 0.1474449604590089, 0.1451330486831972, 0.1719717410476147, 0.1536727306462462, 0.1370960744891696, 0.15182511762017348, 0.13162194374994685, 0.15793504855270624, 0.17433347269371002, 0.4448154464926919, 0.4501819590496806, 0.41478440375506065, 0.43143641776526864, 0.43309698198385616, 0.450785256458189, 0.4290353811103932, 0.46408379225867646, 0.45198115498550007, 0.33450914047853153, 0.3481733719263298, 0.35006483488163953, 0.324381121638723, 0.32913824637987277, 0.3185973311775936, 0.3856688078679098, 0.3430526181211643, 0.3518470271446047, 0.2111698139770688, 0.19792869706051208, 0.2136810914626256, 0.21193847446376135, 0.2031994215446724, 0.19124622754575893, 0.19575279012792457, 0.19280657482753472, 0.19497947436053087, 0.19053800305679958, 0.18547760137491687, 0.19248875888991157, 0.3510581137660407, 0.2979487557184267, 0.2228679263437977, 0.20203614543933812, 0.19780201126621244, 0.1825360324155797, 0.7898466598552554, 0.8244036943641347, 0.7683525540306256, 0.757774547958878, 0.19309370905418222, 0.7844826344709442, 0.7503216569839042, 0.17219667531088723, 0.5638052071536128, 0.7403141233219728, 0.2056831006202291, 0.7756430123313204, 0.19571190668472538, 0.4850198845917716, 0.16789349109277552, 0.6768370113074005, 0.20993403942634004, 0.20948573610281085, 0.20677084059550577, 0.2066831531131681, 0.20121609902143933, 0.21566996684330964, 0.18101786998275926, 0.18848655293116368, 0.17954321700539677, 0.19825329983436402, 0.18051533862132418, 0.09090405912637634, 0.08370920707718865, 0.07346626895245645, 0.08376226429962952, 0.07980489161450421, 0.07870730474570498, 0.07693273577192017, 0.08629959009621746, 0.07279621879151743]}, "mutation_prompt": null}
