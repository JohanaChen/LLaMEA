{"id": "9134aef9-fa5b-4de2-b6ec-b104957aa3dd", "solution": "import numpy as np\n\nclass AdaptiveMultimodalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.num_particles = min(50, 10 * dim)  # Define number of particles\n        self.inertia_weight = 0.7\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_clamp = 0.5 * (self.bounds[1] - self.bounds[0])\n        \n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.bounds[0], self.bounds[1], (self.num_particles, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.num_particles, self.dim)) * self.vel_clamp\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        eval_count = 0\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                score = func(positions[i])\n                eval_count += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n                if eval_count >= self.budget:\n                    break\n            \n            if eval_count >= self.budget:\n                break\n\n            for i in range(self.num_particles):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_weight * np.random.rand() * (personal_best_positions[i] - positions[i])\n                social = self.social_weight * np.random.rand() * (global_best_position - positions[i])\n\n                new_velocity = inertia + cognitive + social\n                new_velocity = np.clip(new_velocity, -self.vel_clamp, self.vel_clamp)\n\n                positions[i] += new_velocity\n                positions[i] = np.clip(positions[i], self.bounds[0], self.bounds[1])\n                velocities[i] = new_velocity\n\n        return global_best_position, global_best_score", "name": "AdaptiveMultimodalSearch", "description": "Adaptive Multimodal Search - blends exploration and exploitation using multi-swarm dynamics for efficient convergence.", "configspace": "", "generation": 0, "fitness": 0.24077208688338966, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6797181143341658, 0.6797181143341658, 0.6797181143341658, 0.6082536983196865, 0.6082536983196865, 0.6082536983196865, 0.5457687525624306, 0.5457687525624306, 0.5457687525624306, 0.21787097913705833, 0.21787097913705833, 0.21787097913705833, 0.07120821297213265, 0.07120821297213265, 0.07120821297213265, 0.047887491952689376, 0.047887491952689376, 0.047887491952689376, 0.11678461700596143, 0.11678461700596143, 0.11678461700596143, 0.14401872044148045, 0.14401872044148045, 0.14401872044148045, 0.08890854924906766, 0.08890854924906766, 0.08890854924906766, 0.12152583618978097, 0.12152583618978097, 0.12152583618978097, 0.09349331544787942, 0.09349331544787942, 0.09349331544787942, 0.10790042862817295, 0.10790042862817295, 0.10790042862817295, 0.9893816521780125, 0.9893816521780125, 0.9893816521780125, 0.9873707049385404, 0.9873707049385404, 0.9873707049385404, 0.9872892877277928, 0.9872892877277928, 0.9872892877277928, 0.23256834414928462, 0.23256834414928462, 0.23256834414928462, 0.1437024937699264, 0.1437024937699264, 0.1437024937699264, 0.3994886411535784, 0.3994886411535784, 0.3994886411535784, 0.22283929103505706, 0.22283929103505706, 0.22283929103505706, 0.2744782320715321, 0.2744782320715321, 0.2744782320715321, 0.11704458742412793, 0.11704458742412793, 0.11704458742412793, 0.21065071202241015, 0.21065071202241015, 0.21065071202241015, 0.11367396299254051, 0.11367396299254051, 0.11367396299254051, 0.23311984794733853, 0.23311984794733853, 0.23311984794733853, 0.1522875160162528, 0.1522875160162528, 0.1522875160162528, 0.2634758221045922, 0.2634758221045922, 0.2634758221045922, 0.11894444045408858, 0.11894444045408858, 0.11894444045408858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.24322388708853637, 0.24322388708853637, 0.24322388708853637, 0.22679303231215542, 0.22679303231215542, 0.22679303231215542, 0.06728410379698546, 0.06728410379698546, 0.06728410379698546, 0.1680397938279069, 0.1680397938279069, 0.1680397938279069, 0.022506715585923653, 0.022506715585923653, 0.022506715585923653, 0.08421498037069819, 0.08421498037069819, 0.08421498037069819, 0.040629481105225906, 0.040629481105225906, 0.040629481105225906, 0.20215083068310136, 0.20215083068310136, 0.20215083068310136, 0.043458621729001945, 0.043458621729001945, 0.043458621729001945, 0.06824279658816923, 0.06824279658816923, 0.06824279658816923, 0.50382728668323, 0.50382728668323, 0.50382728668323, 0.4589948171975662, 0.4589948171975662, 0.4589948171975662, 0.44588531366636563, 0.44588531366636563, 0.44588531366636563, 0.11852028816687799, 0.11852028816687799, 0.11852028816687799, 0.10859294875726899, 0.10859294875726899, 0.10859294875726899, 0.0828219005740306, 0.0828219005740306, 0.0828219005740306, 0.4013580099068157, 0.4013580099068157, 0.4013580099068157, 0.23416921301609328, 0.23416921301609328, 0.23416921301609328, 0.1892369181960697, 0.1892369181960697, 0.1892369181960697, 0.3526439886374183, 0.3526439886374183, 0.3526439886374183, 0.2309442106088, 0.2309442106088, 0.2309442106088, 0.23448045639645365, 0.23448045639645365, 0.23448045639645365, 0.14711517992865264, 0.14711517992865264, 0.14711517992865264, 0.19622310723344072, 0.19622310723344072, 0.19622310723344072, 0.20764828531600055, 0.20764828531600055, 0.20764828531600055, 0.23426445995374623, 0.23426445995374623, 0.23426445995374623, 0.3154385058457966, 0.3154385058457966, 0.3154385058457966, 0.2420380335107165, 0.2420380335107165, 0.2420380335107165, 0.18140935381517043, 0.18140935381517043, 0.18140935381517043, 0.19421638366085903, 0.19421638366085903, 0.19421638366085903, 0.18931953051542894, 0.18931953051542894, 0.18931953051542894, 0.7423926156884171, 0.7423926156884171, 0.7423926156884171, 0.211500652962487, 0.211500652962487, 0.211500652962487, 0.16924977378542716, 0.16924977378542716, 0.16924977378542716, 0.20719024857104995, 0.20719024857104995, 0.20719024857104995, 0.20770270119101075, 0.20770270119101075, 0.20770270119101075, 0.15497730490068284, 0.15497730490068284, 0.15497730490068284, 0.22694078515088778, 0.22694078515088778, 0.22694078515088778, 0.19608915971821084, 0.19608915971821084, 0.19608915971821084, 0.23791589402824997, 0.23791589402824997, 0.23791589402824997, 0.07535574233318243, 0.07535574233318243, 0.07535574233318243, 0.07544245135268024, 0.07544245135268024, 0.07544245135268024, 0.10528623902168055, 0.10528623902168055, 0.10528623902168055]}, "mutation_prompt": null}
{"id": "b9280ffa-1b5a-4558-a5df-9275d2ffc768", "solution": "import numpy as np\n\nclass AdaptiveMultimodalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.num_particles = min(50, 10 * dim)  # Define number of particles\n        self.inertia_weight = 0.7\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_clamp = 0.5 * (self.bounds[1] - self.bounds[0])\n        \n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.bounds[0], self.bounds[1], (self.num_particles, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.num_particles, self.dim)) * self.vel_clamp\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        eval_count = 0\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                score = func(positions[i])\n                eval_count += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n                if eval_count >= self.budget:\n                    break\n            \n            if eval_count >= self.budget:\n                break\n\n            for i in range(self.num_particles):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_weight * np.random.rand() * (personal_best_positions[i] - positions[i])\n                social = self.social_weight * np.random.rand() * (global_best_position - positions[i])\n\n                new_velocity = inertia + cognitive + social\n                new_velocity = np.clip(new_velocity, -self.vel_clamp, self.vel_clamp)\n\n                positions[i] += new_velocity\n                positions[i] = np.clip(positions[i], self.bounds[0], self.bounds[1])\n                velocities[i] = new_velocity\n\n        return global_best_position, global_best_score", "name": "AdaptiveMultimodalSearch", "description": "Adaptive Multimodal Search - blends exploration and exploitation using multi-swarm dynamics for efficient convergence.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9134aef9-fa5b-4de2-b6ec-b104957aa3dd", "metadata": {"aucs": [0.6797181143341658, 0.6797181143341658, 0.6797181143341658, 0.6082536983196865, 0.6082536983196865, 0.6082536983196865, 0.5457687525624306, 0.5457687525624306, 0.5457687525624306, 0.21787097913705833, 0.21787097913705833, 0.21787097913705833, 0.07120821297213265, 0.07120821297213265, 0.07120821297213265, 0.047887491952689376, 0.047887491952689376, 0.047887491952689376, 0.11678461700596143, 0.11678461700596143, 0.11678461700596143, 0.14401872044148045, 0.14401872044148045, 0.14401872044148045, 0.08890854924906766, 0.08890854924906766, 0.08890854924906766, 0.12152583618978097, 0.12152583618978097, 0.12152583618978097, 0.09349331544787942, 0.09349331544787942, 0.09349331544787942, 0.10790042862817295, 0.10790042862817295, 0.10790042862817295, 0.9893816521780125, 0.9893816521780125, 0.9893816521780125, 0.9873707049385404, 0.9873707049385404, 0.9873707049385404, 0.9872892877277928, 0.9872892877277928, 0.9872892877277928, 0.23256834414928462, 0.23256834414928462, 0.23256834414928462, 0.1437024937699264, 0.1437024937699264, 0.1437024937699264, 0.3994886411535784, 0.3994886411535784, 0.3994886411535784, 0.22283929103505706, 0.22283929103505706, 0.22283929103505706, 0.2744782320715321, 0.2744782320715321, 0.2744782320715321, 0.11704458742412793, 0.11704458742412793, 0.11704458742412793, 0.21065071202241015, 0.21065071202241015, 0.21065071202241015, 0.11367396299254051, 0.11367396299254051, 0.11367396299254051, 0.23311984794733853, 0.23311984794733853, 0.23311984794733853, 0.1522875160162528, 0.1522875160162528, 0.1522875160162528, 0.2634758221045922, 0.2634758221045922, 0.2634758221045922, 0.11894444045408858, 0.11894444045408858, 0.11894444045408858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.24322388708853637, 0.24322388708853637, 0.24322388708853637, 0.22679303231215542, 0.22679303231215542, 0.22679303231215542, 0.06728410379698546, 0.06728410379698546, 0.06728410379698546, 0.1680397938279069, 0.1680397938279069, 0.1680397938279069, 0.022506715585923653, 0.022506715585923653, 0.022506715585923653, 0.08421498037069819, 0.08421498037069819, 0.08421498037069819, 0.040629481105225906, 0.040629481105225906, 0.040629481105225906, 0.20215083068310136, 0.20215083068310136, 0.20215083068310136, 0.043458621729001945, 0.043458621729001945, 0.043458621729001945, 0.06824279658816923, 0.06824279658816923, 0.06824279658816923, 0.50382728668323, 0.50382728668323, 0.50382728668323, 0.4589948171975662, 0.4589948171975662, 0.4589948171975662, 0.44588531366636563, 0.44588531366636563, 0.44588531366636563, 0.11852028816687799, 0.11852028816687799, 0.11852028816687799, 0.10859294875726899, 0.10859294875726899, 0.10859294875726899, 0.0828219005740306, 0.0828219005740306, 0.0828219005740306, 0.4013580099068157, 0.4013580099068157, 0.4013580099068157, 0.23416921301609328, 0.23416921301609328, 0.23416921301609328, 0.1892369181960697, 0.1892369181960697, 0.1892369181960697, 0.3526439886374183, 0.3526439886374183, 0.3526439886374183, 0.2309442106088, 0.2309442106088, 0.2309442106088, 0.23448045639645365, 0.23448045639645365, 0.23448045639645365, 0.14711517992865264, 0.14711517992865264, 0.14711517992865264, 0.19622310723344072, 0.19622310723344072, 0.19622310723344072, 0.20764828531600055, 0.20764828531600055, 0.20764828531600055, 0.23426445995374623, 0.23426445995374623, 0.23426445995374623, 0.3154385058457966, 0.3154385058457966, 0.3154385058457966, 0.2420380335107165, 0.2420380335107165, 0.2420380335107165, 0.18140935381517043, 0.18140935381517043, 0.18140935381517043, 0.19421638366085903, 0.19421638366085903, 0.19421638366085903, 0.18931953051542894, 0.18931953051542894, 0.18931953051542894, 0.7423926156884171, 0.7423926156884171, 0.7423926156884171, 0.211500652962487, 0.211500652962487, 0.211500652962487, 0.16924977378542716, 0.16924977378542716, 0.16924977378542716, 0.20719024857104995, 0.20719024857104995, 0.20719024857104995, 0.20770270119101075, 0.20770270119101075, 0.20770270119101075, 0.15497730490068284, 0.15497730490068284, 0.15497730490068284, 0.22694078515088778, 0.22694078515088778, 0.22694078515088778, 0.19608915971821084, 0.19608915971821084, 0.19608915971821084, 0.23791589402824997, 0.23791589402824997, 0.23791589402824997, 0.07535574233318243, 0.07535574233318243, 0.07535574233318243, 0.07544245135268024, 0.07544245135268024, 0.07544245135268024, 0.10528623902168055, 0.10528623902168055, 0.10528623902168055]}, "mutation_prompt": null}
