{"id": "65e1f199-9c8c-4d95-8b19-d078dc121843", "solution": "import numpy as np\n\nclass DE_AMLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.local_search_prob = 0.1\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant_vector = a + self.mutation_factor * (b - c)\n        mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n        return mutant_vector\n\n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_mask, mutant, target)\n        return trial_vector\n\n    def _local_search(self, individual):\n        perturbation = np.random.normal(0, 0.1, self.dim)\n        candidate = individual + perturbation\n        return np.clip(candidate, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                mutant_vector = self._mutate(population)\n                trial_vector = self._crossover(population[i], mutant_vector)\n                if np.random.rand() < self.local_search_prob:\n                    trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "DE_AMLS", "description": "A hybrid Differential Evolution with Adaptive Mutation and Local Search (DE-AMLS) optimizing diverse strategies per iteration.", "configspace": "", "generation": 0, "fitness": 0.2564875919515973, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.5965042165596321, 0.552819266454005, 0.5575976477435987, 0.6216238411104145, 0.6267569739909864, 0.5809664504990424, 0.6140455980786802, 0.6364838877727839, 0.6012682773666169, 0.3057952491290056, 0.3512853855650492, 0.33483541521870996, 0.3224685643548548, 0.3667974073540611, 0.34603214217675426, 0.35159827626971596, 0.3608830746235996, 0.32436538007192794, 0.08928613449456058, 0.09856442521710362, 0.08711690872700817, 0.10596214349629951, 0.08533679364732416, 0.11202510859252857, 0.09985760575694824, 0.09399045431203101, 0.10807951006288663, 0.07832287438098118, 0.10233064991509677, 0.08203216048891282, 0.08901254058155739, 0.08450009811616221, 0.08511682400881526, 0.08742029951268848, 0.09469358254490978, 0.09340363510844729, 0.9595484208797114, 0.9318136719714544, 0.9271081150285649, 0.9544619996139132, 0.9149517091823768, 0.9232184726147199, 0.8888162988657674, 0.9683490514339325, 0.9533502393951788, 0.27956723645303094, 0.2555602853451945, 0.2780558986971179, 0.2781210792794332, 0.26765556411771363, 0.2736444778498317, 0.3374347674538297, 0.27963128647558255, 0.2738092040776289, 0.5338781595897033, 0.5090889257664328, 0.4964069178453767, 0.539571398926284, 0.5290298959241897, 0.5546368654905012, 0.5727656851756451, 0.5485331203231438, 0.5432583353004768, 0.17701762822225153, 0.22438247056486138, 0.16865601988908963, 0.1925051567756908, 0.19172333200106473, 0.17087998170238794, 0.20230328714910473, 0.19552898794157725, 0.24890912152222433, 0.11455871503525028, 0.16570873367283478, 0.23167760021619177, 0.20110454211807938, 0.16979734195442964, 0.19933974250042186, 0.19246550006830265, 0.14191607068978918, 0.18898358446846308, 0.09211879383979082, 0.13478731115891318, 0.07522066859822685, 0.10415716076692294, 0.1030042729766546, 0.09943337777547345, 0.1209975576493062, 0.11567845667738197, 0.10663425535614057, 0.22947095202993606, 0.24288955402647727, 0.23416853948049876, 0.2415009661155184, 0.23628789895655977, 0.21096401302008772, 0.24270281357011259, 0.2445883651840126, 0.25387510958742265, 0.02225130373434092, 0.011957316066532053, 0.07245332948829086, 0.059584758540371374, 0.04513642316008859, 0.028184342043269694, 0.01370441619074425, 0.03189949315354457, 0.021820255041664294, 0.14167729840858534, 0.12592160949027642, 0.15362007908832642, 0.14085383376232508, 0.149479842327505, 0.13164653874012344, 0.1514737083397869, 0.15757836665068448, 0.15541766044266148, 0.46798436505253527, 0.45917099413373796, 0.4636772610521499, 0.4917638779260215, 0.49008575332332727, 0.4661431002926537, 0.46369335243647514, 0.42964945611835426, 0.45822536440145245, 0.10010331378859827, 0.08768622810294235, 0.08668688615565023, 0.07515354563616639, 0.09459424607756906, 0.09698366661531566, 0.07887911249226565, 0.07953534577032806, 0.08104959759037234, 0.14570295284170787, 0.13265511138650377, 0.2227041821123963, 0.17735089544481075, 0.12480475630893995, 0.13109513747292023, 0.21506048378410092, 0.13495834295793951, 0.14270073562693675, 0.2717757784710728, 0.2617521111954102, 0.25678975491713296, 0.25958713836779157, 0.2546383741937781, 0.24399704004838907, 0.28469183789973884, 0.2922208673942325, 0.2929580615153655, 0.20570841196812706, 0.1932428469158587, 0.21053865534611527, 0.20817848961405694, 0.1800429916422509, 0.1820645133416552, 0.20912355654749304, 0.22535215354610505, 0.21624800649703668, 0.17749083298976054, 0.191661403864838, 0.19850816486222944, 0.173110889220078, 0.16715977295300255, 0.17131044936575723, 0.1938053078080646, 0.1728069284736199, 0.18075312864503323, 0.1823448801559825, 0.1809339467838429, 0.18130031519793166, 0.18061948788673077, 0.18156305763091451, 0.17301492497703586, 0.17102227664172565, 0.18228460532406177, 0.18148547602656195, 0.5966349177406607, 0.19425888192723884, 0.5861365886124891, 0.43959042641940527, 0.4526791746066833, 0.17722501840647042, 0.1749645426873352, 0.17758090428757167, 0.3798485514606992, 0.19805336760854264, 0.19634156781170542, 0.1605138446463985, 0.18858259326768045, 0.18661186907582916, 0.224828460571028, 0.5100294783717156, 0.2067338647454494, 0.20756148090138504, 0.17979582301361097, 0.17998026181505844, 0.17978802316982523, 0.19218267447015758, 0.18953865378593915, 0.18622932834910788, 0.18784347883770502, 0.1767737034735476, 0.17935522088546763, 0.06328133002345093, 0.07514098111036216, 0.06923293406461528, 0.062146704592083934, 0.07153949428573125, 0.06485586099870322, 0.07728477349266027, 0.06939741217083717, 0.06854882241590932]}, "mutation_prompt": null}
{"id": "2555d713-9c2a-41ac-a53c-c424d9db9331", "solution": "import numpy as np\n\nclass DE_AMLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.local_search_prob = 0.1\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant_vector = a + self.mutation_factor * (b - c)\n        mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n        return mutant_vector\n\n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n        trial_vector = np.where(crossover_mask, mutant, target)\n        return trial_vector\n\n    def _local_search(self, individual):\n        perturbation = np.random.normal(0, 0.1, self.dim)\n        candidate = individual + perturbation\n        return np.clip(candidate, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        num_evaluations = self.population_size\n\n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                mutant_vector = self._mutate(population)\n                trial_vector = self._crossover(population[i], mutant_vector)\n                if np.random.rand() < self.local_search_prob:\n                    trial_vector = self._local_search(trial_vector)\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if num_evaluations >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "DE_AMLS", "description": "A hybrid Differential Evolution with Adaptive Mutation and Local Search (DE-AMLS) optimizing diverse strategies per iteration.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65e1f199-9c8c-4d95-8b19-d078dc121843", "metadata": {"aucs": [0.5965042165596321, 0.552819266454005, 0.5575976477435987, 0.6216238411104145, 0.6267569739909864, 0.5809664504990424, 0.6140455980786802, 0.6364838877727839, 0.6012682773666169, 0.3057952491290056, 0.3512853855650492, 0.33483541521870996, 0.3224685643548548, 0.3667974073540611, 0.34603214217675426, 0.35159827626971596, 0.3608830746235996, 0.32436538007192794, 0.08928613449456058, 0.09856442521710362, 0.08711690872700817, 0.10596214349629951, 0.08533679364732416, 0.11202510859252857, 0.09985760575694824, 0.09399045431203101, 0.10807951006288663, 0.07832287438098118, 0.10233064991509677, 0.08203216048891282, 0.08901254058155739, 0.08450009811616221, 0.08511682400881526, 0.08742029951268848, 0.09469358254490978, 0.09340363510844729, 0.9595484208797114, 0.9318136719714544, 0.9271081150285649, 0.9544619996139132, 0.9149517091823768, 0.9232184726147199, 0.8888162988657674, 0.9683490514339325, 0.9533502393951788, 0.27956723645303094, 0.2555602853451945, 0.2780558986971179, 0.2781210792794332, 0.26765556411771363, 0.2736444778498317, 0.3374347674538297, 0.27963128647558255, 0.2738092040776289, 0.5338781595897033, 0.5090889257664328, 0.4964069178453767, 0.539571398926284, 0.5290298959241897, 0.5546368654905012, 0.5727656851756451, 0.5485331203231438, 0.5432583353004768, 0.17701762822225153, 0.22438247056486138, 0.16865601988908963, 0.1925051567756908, 0.19172333200106473, 0.17087998170238794, 0.20230328714910473, 0.19552898794157725, 0.24890912152222433, 0.11455871503525028, 0.16570873367283478, 0.23167760021619177, 0.20110454211807938, 0.16979734195442964, 0.19933974250042186, 0.19246550006830265, 0.14191607068978918, 0.18898358446846308, 0.09211879383979082, 0.13478731115891318, 0.07522066859822685, 0.10415716076692294, 0.1030042729766546, 0.09943337777547345, 0.1209975576493062, 0.11567845667738197, 0.10663425535614057, 0.22947095202993606, 0.24288955402647727, 0.23416853948049876, 0.2415009661155184, 0.23628789895655977, 0.21096401302008772, 0.24270281357011259, 0.2445883651840126, 0.25387510958742265, 0.02225130373434092, 0.011957316066532053, 0.07245332948829086, 0.059584758540371374, 0.04513642316008859, 0.028184342043269694, 0.01370441619074425, 0.03189949315354457, 0.021820255041664294, 0.14167729840858534, 0.12592160949027642, 0.15362007908832642, 0.14085383376232508, 0.149479842327505, 0.13164653874012344, 0.1514737083397869, 0.15757836665068448, 0.15541766044266148, 0.46798436505253527, 0.45917099413373796, 0.4636772610521499, 0.4917638779260215, 0.49008575332332727, 0.4661431002926537, 0.46369335243647514, 0.42964945611835426, 0.45822536440145245, 0.10010331378859827, 0.08768622810294235, 0.08668688615565023, 0.07515354563616639, 0.09459424607756906, 0.09698366661531566, 0.07887911249226565, 0.07953534577032806, 0.08104959759037234, 0.14570295284170787, 0.13265511138650377, 0.2227041821123963, 0.17735089544481075, 0.12480475630893995, 0.13109513747292023, 0.21506048378410092, 0.13495834295793951, 0.14270073562693675, 0.2717757784710728, 0.2617521111954102, 0.25678975491713296, 0.25958713836779157, 0.2546383741937781, 0.24399704004838907, 0.28469183789973884, 0.2922208673942325, 0.2929580615153655, 0.20570841196812706, 0.1932428469158587, 0.21053865534611527, 0.20817848961405694, 0.1800429916422509, 0.1820645133416552, 0.20912355654749304, 0.22535215354610505, 0.21624800649703668, 0.17749083298976054, 0.191661403864838, 0.19850816486222944, 0.173110889220078, 0.16715977295300255, 0.17131044936575723, 0.1938053078080646, 0.1728069284736199, 0.18075312864503323, 0.1823448801559825, 0.1809339467838429, 0.18130031519793166, 0.18061948788673077, 0.18156305763091451, 0.17301492497703586, 0.17102227664172565, 0.18228460532406177, 0.18148547602656195, 0.5966349177406607, 0.19425888192723884, 0.5861365886124891, 0.43959042641940527, 0.4526791746066833, 0.17722501840647042, 0.1749645426873352, 0.17758090428757167, 0.3798485514606992, 0.19805336760854264, 0.19634156781170542, 0.1605138446463985, 0.18858259326768045, 0.18661186907582916, 0.224828460571028, 0.5100294783717156, 0.2067338647454494, 0.20756148090138504, 0.17979582301361097, 0.17998026181505844, 0.17978802316982523, 0.19218267447015758, 0.18953865378593915, 0.18622932834910788, 0.18784347883770502, 0.1767737034735476, 0.17935522088546763, 0.06328133002345093, 0.07514098111036216, 0.06923293406461528, 0.062146704592083934, 0.07153949428573125, 0.06485586099870322, 0.07728477349266027, 0.06939741217083717, 0.06854882241590932]}, "mutation_prompt": null}
