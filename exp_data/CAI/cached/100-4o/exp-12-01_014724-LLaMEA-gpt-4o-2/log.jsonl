{"id": "31e2bf07-ce30-4cbc-a1cd-2d21e5a2bc39", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.strategy = 'best1bin'\n        self.f = 0.8\n        self.cr = 0.9\n        self.func_evals = 0\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        idxs = np.arange(self.population_size)\n        for i in range(self.population_size):\n            if self.func_evals >= self.budget:\n                break\n            a, b, c = population[np.random.choice(idxs[idxs != i], 3, replace=False)]\n            if self.strategy == 'best1bin':\n                mutant = np.clip(population[best_idx] + self.f * (b - c), self.lower_bound, self.upper_bound)\n            else:\n                mutant = np.clip(a + self.f * (b - c), self.lower_bound, self.upper_bound)\n            yield i, mutant\n\n    def _crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.cr\n        trial = np.where(crossover_mask, mutant, target)\n        return trial\n\n    def _select(self, population, scores, func, trials):\n        for i, trial in trials:\n            if self.func_evals >= self.budget:\n                break\n            trial_score = func(trial)\n            self.func_evals += 1\n            if trial_score < scores[i]:\n                population[i] = trial\n                scores[i] = trial_score\n        return population, scores\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        scores = np.array([func(ind) for ind in population])\n        self.func_evals += self.population_size\n        best_idx = np.argmin(scores)\n        best = population[best_idx]\n        best_score = scores[best_idx]\n        \n        while self.func_evals < self.budget:\n            trials = list(self._mutate(population, best_idx))\n            trials = [(i, self._crossover(population[i], mutant)) for i, mutant in trials]\n            population, scores = self._select(population, scores, func, trials)\n            best_idx = np.argmin(scores)\n            if scores[best_idx] < best_score:\n                best = population[best_idx]\n                best_score = scores[best_idx]\n                \n        return best", "name": "AdaptiveDifferentialEvolution", "description": "Utilize adaptive differential evolution with a greedy local search step to efficiently explore and exploit the search space within budget constraints.", "configspace": "", "generation": 0, "fitness": 0.40215119779414127, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7968330437700065, 0.7920951701360628, 0.8004006507046206, 0.8243739337687438, 0.8113164078695698, 0.8161897586710825, 0.8269406763534217, 0.8126995081664198, 0.814208064828878, 0.04115385194511112, 0.6344112473277339, 0.6853960881393799, 0.6593416149358762, 0.04564905474739678, 0.6480070686033549, 0.6541162956112816, 0.6627134564750927, 0.6540234170495483, 0.16469522717794083, 0.12351290458693842, 0.12807067053498833, 0.1594466774161234, 0.12939000722001637, 0.1297083359765897, 0.16086839474693293, 0.13963917610183674, 0.15940824420560729, 0.12213251884717902, 0.14087612222622825, 0.1083717397126166, 0.14099712912566942, 0.16103725239190358, 0.13449388641554816, 0.1271392272494546, 0.13022260985438427, 0.13281982206176723, 0.9836463039354136, 0.9799328057684753, 0.9839025093048017, 0.9682733853813619, 0.9838377684251466, 0.9808308992622918, 0.985735292241853, 0.9786379815569547, 0.9833815817118281, 0.47481894670484603, 0.464013876330425, 0.5294769327852116, 0.47727192509699157, 0.49022263206223693, 0.5544135736763108, 0.5613147996310184, 0.4997540425828818, 0.4772851284913121, 0.775151839328043, 0.7748828263497645, 0.8005049328848094, 0.8156824054731657, 0.20282157843638426, 0.7850634955395912, 0.7673337345334809, 0.7483276776456321, 0.7717379034284552, 0.5107850182048794, 0.523481272089019, 0.5345957592683649, 0.5394408161480742, 0.5473795232640088, 0.5898017446229906, 0.5436115897181028, 0.519763811216676, 0.5562622472197916, 0.5612868515372007, 0.021565265417834767, 0.12663619593927922, 0.5216504399747761, 0.5561575351833696, 0.5378515013559471, 0.507380345661621, 0.09962266346179294, 0.552825874605035, 0.4917085319429795, 0.4649233029924309, 0.4702187707334753, 0.47605360924119433, 0.40628196260075244, 0.4550829775423988, 0.4561063968615916, 0.5075860077446683, 0.47132003098863984, 0.5800365320726674, 0.6015407487923594, 0.5847094447628498, 0.5902861967085518, 0.5699755025027893, 0.5923310675993343, 0.6066863103863569, 0.608284297405421, 0.5976069961506427, 0.1030921960024842, 0.1461799725149785, 0.2531167030496114, 0.23973621487297458, 0.19875356469707217, 0.23054780049900325, 0.22644961020808474, 0.3210141009597577, 0.19199816104944956, 0.3586423625162618, 0.3122914153543176, 0.3447874381611994, 0.3991639169559992, 0.3377739549865939, 0.36342412324392726, 0.3466479020294361, 0.3334404660000567, 0.38051409628624355, 0.719239228549061, 0.697196921819561, 0.6996389760106082, 0.7186690384946787, 0.7196432040988701, 0.7083285024739101, 0.7181382670344618, 0.7023213943478706, 0.720420086859523, 0.12686152067176137, 0.09717323017925061, 0.10498620592207464, 0.09156532250238392, 0.08799832056485102, 0.10636113708429307, 0.12325957281119393, 0.14673648727396482, 0.1113038205169421, 0.17339815116754376, 0.14438131842388013, 0.2094873253589895, 0.21264476953580302, 0.18586644233014304, 0.17419717821568959, 0.3831275822749072, 0.2656958009937641, 0.15691516784307036, 0.45000529841236736, 0.43391504243771783, 0.46415070713940676, 0.43538389568947256, 0.45985190227233275, 0.43676358450534447, 0.2812689730980341, 0.47085268619809884, 0.4960256592977008, 0.3352326815538451, 0.3740613357925826, 0.36056226220386645, 0.28778577640099634, 0.3555669592641235, 0.32435591258964447, 0.3934731271368537, 0.36487260995664583, 0.34812227932212403, 0.2160832405799037, 0.1763817552614808, 0.18576110295664816, 0.20455967966445077, 0.19914499356434612, 0.1890097912797688, 0.1929814433188095, 0.22020947300880533, 0.2415433622776626, 0.2116334133121538, 0.23561799601712685, 0.18901823061411938, 0.23259341897990315, 0.21208084041664732, 0.1835057800891432, 0.20496934107765796, 0.21575199981970394, 0.2353352023819011, 0.8524354968283447, 0.18196854127035766, 0.15326739537121703, 0.8677157681022493, 0.1963190482468814, 0.1309574391607803, 0.17546487179967085, 0.16584039897756409, 0.8173978169728041, 0.7970358153542632, 0.20751001860011542, 0.16602356281877784, 0.20909652946548807, 0.8194327796045049, 0.16498251560849675, 0.1970203409601956, 0.19827896014593627, 0.855266846736189, 0.16581130805593514, 0.17924141600665844, 0.18861607723879514, 0.17613910271775512, 0.1874864965760904, 0.16941648265620113, 0.18126407342147344, 0.18188788278127854, 0.19330936518347286, 0.071313901035581, 0.077233164419785, 0.08328127903354221, 0.07895835396418682, 0.08720669003879389, 0.07358648426740333, 0.09296487682260779, 0.07460505231971803, 0.08296866489164989]}, "mutation_prompt": null}
{"id": "32038587-498a-4dc4-85cd-0d9b9f6cd62e", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.strategy = 'best1bin'\n        self.f = 0.8\n        self.cr = 0.9\n        self.func_evals = 0\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _mutate(self, population, best_idx):\n        idxs = np.arange(self.population_size)\n        for i in range(self.population_size):\n            if self.func_evals >= self.budget:\n                break\n            a, b, c = population[np.random.choice(idxs[idxs != i], 3, replace=False)]\n            if self.strategy == 'best1bin':\n                mutant = np.clip(population[best_idx] + self.f * (b - c), self.lower_bound, self.upper_bound)\n            else:\n                mutant = np.clip(a + self.f * (b - c), self.lower_bound, self.upper_bound)\n            yield i, mutant\n\n    def _crossover(self, target, mutant):\n        # Adaptively adjust crossover rate based on budget consumption\n        adaptive_cr = self.cr * (1 - self.func_evals / self.budget)\n        crossover_mask = np.random.rand(self.dim) < adaptive_cr\n        trial = np.where(crossover_mask, mutant, target)\n        return trial\n\n    def _select(self, population, scores, func, trials):\n        for i, trial in trials:\n            if self.func_evals >= self.budget:\n                break\n            trial_score = func(trial)\n            self.func_evals += 1\n            if trial_score < scores[i]:\n                population[i] = trial\n                scores[i] = trial_score\n        return population, scores\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        scores = np.array([func(ind) for ind in population])\n        self.func_evals += self.population_size\n        best_idx = np.argmin(scores)\n        best = population[best_idx]\n        best_score = scores[best_idx]\n        \n        while self.func_evals < self.budget:\n            trials = list(self._mutate(population, best_idx))\n            trials = [(i, self._crossover(population[i], mutant)) for i, mutant in trials]\n            population, scores = self._select(population, scores, func, trials)\n            best_idx = np.argmin(scores)\n            if scores[best_idx] < best_score:\n                best = population[best_idx]\n                best_score = scores[best_idx]\n                \n        return best", "name": "AdaptiveDifferentialEvolution", "description": "Adaptively adjust the crossover rate (cr) during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": 0.3040511562612262, "feedback": "", "error": "", "parent_id": "31e2bf07-ce30-4cbc-a1cd-2d21e5a2bc39", "metadata": {"aucs": [0.8038911977369381, 0.7905993995470874, 0.8078608020006459, 0.8217755894583048, 0.8111742503434762, 0.8148474184336478, 0.8116842320764898, 0.8157720240980858, 0.828135681461441, 0.6627418963141809, 0.6530120855277466, 0.6354994658494167, 0.6397667048607725, 0.6332869543291544, 0.6449164799046311, 0.6357204369377238, 0.6423890921203452, 0.6467433559809869, 0.3865835494438251, 0.39895185942462263, 0.14130498924133117, 0.343813211298887, 0.36868515873734564, 0.4293562138672746, 0.45552274119142544, 0.16177099321578392, 0.3859078365162668, 0.16085430691438085, 0.30601899623670137, 0.15474350337051745, 0.14075790653343268, 0.143736760711336, 0.15035290558197645, 0.1457149834145579, 0.1560793975276521, 0.3108721714268089, 0.9836463039354136, 0.9801158634579494, 0.9839025093048017, 0.9804776744319024, 0.9838535674797236, 0.9808308992622918, 0.9856349088062163, 0.9783389120901391, 0.9833815817118281, 0.339325817196917, 0.35951531441722784, 0.3228642954646801, 0.33855802081883835, 0.3082722700186259, 0.36840840932006247, 0.3177117288318644, 0.3460548291197396, 0.3251913629355221, 0.22518633488226192, 0.31900025752144323, 0.5254610562777271, 0.5770352578861973, 0.6697289890530521, 0.20236259571405257, 0.7027821769649469, 0.5507650342868176, 0.6599200428205881, 0.2116394656156687, 0.19731152919852635, 0.21286477612899435, 0.22099077649176102, 0.2242333333844253, 0.20199177491059195, 0.25112943296663714, 0.23278946793738176, 0.20149234068679112, 0.2182752438357346, 0.16637476166386989, 0.233060365989744, 0.2081899652204533, 0.2187830568845236, 0.22436781637408265, 0.18495816002688525, 0.1269826219667075, 0.21149662863071927, 0.0578009147894305, 0.053909599752205994, 0.03178298208967023, 0.03393206528847126, 0.05190556189693141, 0.018997232167080047, 0.03761555341319578, 0.0158552058990028, 0.008335010074305815, 0.11289760524037573, 0.1489987368371285, 0.19315984696892552, 0.17430467511428305, 0.11611049655783312, 0.1468424675213741, 0.1870119686029703, 0.17207765894768523, 0.16316618909633818, 0.012675484933935666, 0.0253729055348344, 0.03940088810024134, 0.005381567437277357, 0.049906004708127116, 0.015557960440932384, 0.012974310105169251, 0.011547823894344611, 0.07296617421452334, 0.15789906949266208, 0.15031048382482692, 0.14307271868267013, 0.16929160391231357, 0.16082450068736076, 0.15260938823430292, 0.15263910623211485, 0.1402966803521054, 0.07891816450998357, 0.4945667985605987, 0.4766761150636789, 0.5004761379630631, 0.5171766776638878, 0.5417198848390892, 0.5238499570363943, 0.5085086297271679, 0.48928565966899973, 0.47825601137535634, 0.10682643963749838, 0.09700124665079224, 0.10599148705694061, 0.09829938262013382, 0.10879308910699581, 0.10748093963541072, 0.10282512677024702, 0.09752671035917915, 0.09333366527481901, 0.17051441449951277, 0.14349997790705982, 0.1525468831246639, 0.1466906150570485, 0.1805905288470513, 0.18428135875631857, 0.29930431089328224, 0.15266688102592452, 0.21490399474190058, 0.3406347405887622, 0.3226599555901374, 0.3262296037435808, 0.3636813615409308, 0.29055419554112394, 0.31743716766014163, 0.3431686749542413, 0.40242536567560716, 0.3683197680511089, 0.22952030610945007, 0.21596399252936993, 0.22915957923446684, 0.213403712141518, 0.2333003584891673, 0.22880296600058314, 0.2702277654174764, 0.25685342923026167, 0.2595429574915029, 0.18742643816538662, 0.1760796955867152, 0.18875894623974032, 0.18089223992441972, 0.16850361506806988, 0.19343382698806266, 0.22379247191770058, 0.1809178952943673, 0.19317744406968385, 0.4021844201855541, 0.4380666169487244, 0.22467958645136088, 0.2046622636649048, 0.2288364191917519, 0.21168345556567525, 0.19858555632056363, 0.1964260905428763, 0.21259794288463574, 0.8497008390839558, 0.18206535544022773, 0.1531162450626814, 0.8460594796494001, 0.19555653394217132, 0.1310734279505752, 0.17360242772139423, 0.18620596032617598, 0.1826421641447752, 0.5676279775255146, 0.20941651036758602, 0.16472476401933167, 0.20987803561383878, 0.6550875929668102, 0.5224640569579717, 0.2109188669968326, 0.19802255655554013, 0.2062537539026268, 0.19010655728679826, 0.19488897631407187, 0.17651259532885033, 0.1827324582763452, 0.16843743251886678, 0.1886731318593905, 0.17931328622854859, 0.1806487367381695, 0.1955332026469221, 0.08211609913156703, 0.0707300870698715, 0.06604943751663106, 0.07593400147946161, 0.08210268271602106, 0.0748606828934919, 0.08961852372825851, 0.07820266661807074, 0.07553820786901355]}, "mutation_prompt": null}
