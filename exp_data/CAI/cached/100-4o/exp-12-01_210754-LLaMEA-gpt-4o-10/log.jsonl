{"id": "4afaefb5-936a-4e0c-89dc-4c1a3728857c", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass HybridPSO_ADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = min(max(20, dim * 5), budget // 10)\n        self.inertia = 0.7\n        self.cognitive = 1.5\n        self.social = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.7\n\n    def __call__(self, func):\n        num_evaluations = 0\n\n        # Initialize particle positions and velocities\n        pos = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        vel = np.zeros((self.population_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.array([func(ind) for ind in pos])\n        num_evaluations += self.population_size\n\n        gbest_idx = np.argmin(pbest_val)\n        gbest_pos = pbest_pos[gbest_idx, :]\n        gbest_val = pbest_val[gbest_idx]\n\n        while num_evaluations < self.budget:\n            # Particle Swarm Optimization Phase\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            vel = (self.inertia * vel +\n                   self.cognitive * r1 * (pbest_pos - pos) +\n                   self.social * r2 * (gbest_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lb, self.ub)\n\n            for i in range(self.population_size):\n                value = func(pos[i])\n                num_evaluations += 1\n                if num_evaluations >= self.budget:\n                    break\n                if value < pbest_val[i]:\n                    pbest_val[i] = value\n                    pbest_pos[i, :] = pos[i, :]\n                    if value < gbest_val:\n                        gbest_val = value\n                        gbest_pos = pos[i, :]\n\n            # Adaptive Differential Evolution Phase\n            if num_evaluations < self.budget:\n                indices = np.arange(self.population_size)\n                for i in range(self.population_size):\n                    idxs = np.random.choice(indices[indices != i], 3, replace=False)\n                    x0, x1, x2 = pos[idxs]\n                    mutant = np.clip(x0 + self.mutation_factor * (x1 - x2), self.lb, self.ub)\n                    cross_points = np.random.rand(self.dim) < self.crossover_rate\n                    if not np.any(cross_points):\n                        cross_points[np.random.randint(0, self.dim)] = True\n                    trial = np.where(cross_points, mutant, pos[i])\n                    trial_value = func(trial)\n                    num_evaluations += 1\n                    if trial_value < pbest_val[i]:\n                        pbest_val[i] = trial_value\n                        pbest_pos[i, :] = trial.copy()\n                        if trial_value < gbest_val:\n                            gbest_val = trial_value\n                            gbest_pos = trial.copy()\n\n        return gbest_pos, gbest_val", "name": "HybridPSO_ADE", "description": "A hybrid Particle Swarm Optimization (PSO) with Adaptive Differential Evolution (ADE) that balances exploration and exploitation by dynamically adjusting search strategies.", "configspace": "", "generation": 0, "fitness": 0.28723661876311585, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.806137376541363, 0.7737073850215577, 0.7852919978303547, 0.8120892372543778, 0.7891946919772224, 0.7944470984776748, 0.794355746738894, 0.7707017919189905, 0.7977301305346499, 0.5338022531886829, 0.3793415230639121, 0.5318035097386318, 0.508630132257518, 0.4685783854720901, 0.43738394025095806, 0.049162434638908015, 0.5293451106122338, 0.5362856452843283, 0.16930133752968302, 0.1453428524027771, 0.12654321747773534, 0.13216177770440718, 0.1323247000537201, 0.06712284130985646, 0.1651656681452358, 0.1416430313320256, 0.17142176809090393, 0.11248833653102552, 0.10365283453943352, 0.1575319623840935, 0.14533327452528977, 0.14452950139859477, 0.132838263544526, 0.13713709192422485, 0.14254285534269562, 0.1052796068170142, 0.9830039119759263, 0.9928048701577422, 0.9889106465249045, 0.9878147629374524, 0.9846054171400643, 0.9780202181320099, 0.9886916027948313, 0.9859590613109037, 0.9887349391213202, 0.47404256366703146, 0.4973507893767576, 0.5150421584328, 0.5707274195337417, 0.49957031495060156, 0.5555678453537668, 0.5106032305338377, 0.08881579275450535, 0.4562201325462514, 0.24282773734001006, 0.21961886468319813, 0.2227980641054882, 0.22139091194643068, 0.7024597405988895, 0.2078322104774003, 0.175117215176129, 0.14567264113032452, 0.22366582512730793, 0.12125110426163155, 0.19666993150332823, 0.2000087050317847, 0.1994578689574349, 0.17766834273637755, 0.1282895548637576, 0.22570146792168444, 0.11296789527433171, 0.20726342818678745, 0.2013079761730241, 0.01008755581977061, 0.24291213841356563, 0.19498639840329335, 0.19704804234481443, 0.19186405035938137, 0.21463197790448174, 0.13536719295866517, 0.11878245404387122, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03986048114216534, 9.999999999998899e-05, 0.02401289206453916, 0.06885887803375967, 9.999999999998899e-05, 0.0614142439134443, 0.08990901181143218, 0.07715990866090994, 0.0801248240510124, 0.12699026784717538, 9.999999999998899e-05, 0.05694863746086798, 0.1318493711652945, 0.0619042364245892, 0.0502571337987312, 0.0435076761637303, 9.999999999998899e-05, 0.05466386444545701, 0.07077034429126816, 0.12216755042850413, 0.06757711869541072, 0.22782915989347385, 0.06072375748979486, 0.06000723510189654, 0.048761309925233975, 0.22863202997422472, 0.11700221406163014, 0.049863622758373416, 0.03674621710743564, 0.11481631815122251, 0.10520190413350339, 0.12048937304447793, 0.08034902184001258, 0.48172248135061924, 0.4910846202470269, 0.5232474910135331, 0.5347147643746256, 0.5003081580495077, 0.5021189598424483, 0.5111230228462456, 0.5036949315358181, 0.5139658984871074, 0.15408007703817106, 0.07320306621800954, 0.07807302934568527, 0.14318383793307055, 0.11224650304699368, 0.11113498031211277, 0.10297674478165231, 0.13103362664349372, 0.12932455622520278, 0.17763591027318215, 0.20522759629913367, 0.20570980160554164, 0.2142902443508452, 0.2588576319279825, 0.2893373557247243, 0.26537933966588867, 0.47099578447211743, 0.21236984924391422, 0.4406030888460446, 0.41093179748899633, 0.3281958114936029, 0.4586612552365059, 0.217828190590023, 0.3487141694234842, 0.41012783331428493, 0.29551171566247125, 0.41566613166582533, 0.2608444738619451, 0.2771825164605388, 0.22129631651238535, 0.23517297834659057, 0.2050957421170162, 0.25960191301798574, 0.2704370010641499, 0.35057970862123966, 0.22494471807513783, 0.21203409855760835, 0.22789764441066784, 0.22424808301766486, 0.18368190350956037, 0.20636473671078803, 0.21130858408299713, 0.22773571474384702, 0.2073191322541641, 0.2504676982634605, 0.2194726142436768, 0.19519612726745128, 0.20888102428988142, 0.2012001000474254, 0.2055534405607482, 0.19509845905733203, 0.19909039742314283, 0.21086934693232962, 0.583456523426523, 0.8585487652507685, 0.12596688546541768, 0.12438522069417235, 0.8727832353518649, 0.2002603856161188, 0.8678144018884795, 0.12437426379894256, 0.16862430372228987, 0.8938716365927847, 0.630542832803443, 0.15473045130061092, 0.4269114874745743, 0.6380810914245685, 0.506977790383546, 0.2133105840111963, 0.1978636526120796, 0.1543686005548187, 0.1636026041700709, 0.19488222861716942, 0.1961964413657188, 0.2271158145679527, 0.18957743484812228, 0.19862718188275652, 0.20370267184469082, 0.19436915594038673, 0.20217735443340257, 0.17739002071944432, 0.08997361752367683, 0.07761019265252467, 0.10244743350449825, 0.07746000966401612, 0.0528310204929765, 0.07923805547250362, 0.08952494494071506, 0.08322256683744667, 0.09185117223435213]}, "mutation_prompt": null}
{"id": "e134ecf4-f75c-48b3-a8ea-561614c85f7d", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass HybridPSO_ADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = min(max(20, dim * 5), budget // 10)\n        self.inertia = 0.7\n        self.cognitive = 1.5\n        self.social = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.7\n\n    def __call__(self, func):\n        num_evaluations = 0\n\n        # Initialize particle positions and velocities\n        pos = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        vel = np.zeros((self.population_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.array([func(ind) for ind in pos])\n        num_evaluations += self.population_size\n\n        gbest_idx = np.argmin(pbest_val)\n        gbest_pos = pbest_pos[gbest_idx, :]\n        gbest_val = pbest_val[gbest_idx]\n\n        while num_evaluations < self.budget:\n            # Particle Swarm Optimization Phase\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            vel = (self.inertia * vel +\n                   self.cognitive * r1 * (pbest_pos - pos) +\n                   self.social * r2 * (gbest_pos - pos))\n            pos = pos + vel\n            pos = np.clip(pos, self.lb, self.ub)\n\n            for i in range(self.population_size):\n                value = func(pos[i])\n                num_evaluations += 1\n                if num_evaluations >= self.budget:\n                    break\n                if value < pbest_val[i]:\n                    pbest_val[i] = value\n                    pbest_pos[i, :] = pos[i, :]\n                    if value < gbest_val:\n                        gbest_val = value\n                        gbest_pos = pos[i, :]\n\n            # Adaptive Differential Evolution Phase\n            if num_evaluations < self.budget:\n                indices = np.arange(self.population_size)\n                for i in range(self.population_size):\n                    idxs = np.random.choice(indices[indices != i], 3, replace=False)\n                    x0, x1, x2 = pos[idxs]\n                    mutant = np.clip(x0 + self.mutation_factor * (x1 - x2), self.lb, self.ub)\n                    cross_points = np.random.rand(self.dim) < self.crossover_rate\n                    if not np.any(cross_points):\n                        cross_points[np.random.randint(0, self.dim)] = True\n                    trial = np.where(cross_points, mutant, pos[i])\n                    trial_value = func(trial)\n                    num_evaluations += 1\n                    if trial_value < pbest_val[i]:\n                        pbest_val[i] = trial_value\n                        pbest_pos[i, :] = trial.copy()\n                        if trial_value < gbest_val:\n                            gbest_val = trial_value\n                            gbest_pos = trial.copy()\n\n        return gbest_pos, gbest_val", "name": "HybridPSO_ADE", "description": "A hybrid Particle Swarm Optimization (PSO) with Adaptive Differential Evolution (ADE) that balances exploration and exploitation by dynamically adjusting search strategies.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4afaefb5-936a-4e0c-89dc-4c1a3728857c", "metadata": {"aucs": [0.806137376541363, 0.7737073850215577, 0.7852919978303547, 0.8120892372543778, 0.7891946919772224, 0.7944470984776748, 0.794355746738894, 0.7707017919189905, 0.7977301305346499, 0.5338022531886829, 0.3793415230639121, 0.5318035097386318, 0.508630132257518, 0.4685783854720901, 0.43738394025095806, 0.049162434638908015, 0.5293451106122338, 0.5362856452843283, 0.16930133752968302, 0.1453428524027771, 0.12654321747773534, 0.13216177770440718, 0.1323247000537201, 0.06712284130985646, 0.1651656681452358, 0.1416430313320256, 0.17142176809090393, 0.11248833653102552, 0.10365283453943352, 0.1575319623840935, 0.14533327452528977, 0.14452950139859477, 0.132838263544526, 0.13713709192422485, 0.14254285534269562, 0.1052796068170142, 0.9830039119759263, 0.9928048701577422, 0.9889106465249045, 0.9878147629374524, 0.9846054171400643, 0.9780202181320099, 0.9886916027948313, 0.9859590613109037, 0.9887349391213202, 0.47404256366703146, 0.4973507893767576, 0.5150421584328, 0.5707274195337417, 0.49957031495060156, 0.5555678453537668, 0.5106032305338377, 0.08881579275450535, 0.4562201325462514, 0.24282773734001006, 0.21961886468319813, 0.2227980641054882, 0.22139091194643068, 0.7024597405988895, 0.2078322104774003, 0.175117215176129, 0.14567264113032452, 0.22366582512730793, 0.12125110426163155, 0.19666993150332823, 0.2000087050317847, 0.1994578689574349, 0.17766834273637755, 0.1282895548637576, 0.22570146792168444, 0.11296789527433171, 0.20726342818678745, 0.2013079761730241, 0.01008755581977061, 0.24291213841356563, 0.19498639840329335, 0.19704804234481443, 0.19186405035938137, 0.21463197790448174, 0.13536719295866517, 0.11878245404387122, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03986048114216534, 9.999999999998899e-05, 0.02401289206453916, 0.06885887803375967, 9.999999999998899e-05, 0.0614142439134443, 0.08990901181143218, 0.07715990866090994, 0.0801248240510124, 0.12699026784717538, 9.999999999998899e-05, 0.05694863746086798, 0.1318493711652945, 0.0619042364245892, 0.0502571337987312, 0.0435076761637303, 9.999999999998899e-05, 0.05466386444545701, 0.07077034429126816, 0.12216755042850413, 0.06757711869541072, 0.22782915989347385, 0.06072375748979486, 0.06000723510189654, 0.048761309925233975, 0.22863202997422472, 0.11700221406163014, 0.049863622758373416, 0.03674621710743564, 0.11481631815122251, 0.10520190413350339, 0.12048937304447793, 0.08034902184001258, 0.48172248135061924, 0.4910846202470269, 0.5232474910135331, 0.5347147643746256, 0.5003081580495077, 0.5021189598424483, 0.5111230228462456, 0.5036949315358181, 0.5139658984871074, 0.15408007703817106, 0.07320306621800954, 0.07807302934568527, 0.14318383793307055, 0.11224650304699368, 0.11113498031211277, 0.10297674478165231, 0.13103362664349372, 0.12932455622520278, 0.17763591027318215, 0.20522759629913367, 0.20570980160554164, 0.2142902443508452, 0.2588576319279825, 0.2893373557247243, 0.26537933966588867, 0.47099578447211743, 0.21236984924391422, 0.4406030888460446, 0.41093179748899633, 0.3281958114936029, 0.4586612552365059, 0.217828190590023, 0.3487141694234842, 0.41012783331428493, 0.29551171566247125, 0.41566613166582533, 0.2608444738619451, 0.2771825164605388, 0.22129631651238535, 0.23517297834659057, 0.2050957421170162, 0.25960191301798574, 0.2704370010641499, 0.35057970862123966, 0.22494471807513783, 0.21203409855760835, 0.22789764441066784, 0.22424808301766486, 0.18368190350956037, 0.20636473671078803, 0.21130858408299713, 0.22773571474384702, 0.2073191322541641, 0.2504676982634605, 0.2194726142436768, 0.19519612726745128, 0.20888102428988142, 0.2012001000474254, 0.2055534405607482, 0.19509845905733203, 0.19909039742314283, 0.21086934693232962, 0.583456523426523, 0.8585487652507685, 0.12596688546541768, 0.12438522069417235, 0.8727832353518649, 0.2002603856161188, 0.8678144018884795, 0.12437426379894256, 0.16862430372228987, 0.8938716365927847, 0.630542832803443, 0.15473045130061092, 0.4269114874745743, 0.6380810914245685, 0.506977790383546, 0.2133105840111963, 0.1978636526120796, 0.1543686005548187, 0.1636026041700709, 0.19488222861716942, 0.1961964413657188, 0.2271158145679527, 0.18957743484812228, 0.19862718188275652, 0.20370267184469082, 0.19436915594038673, 0.20217735443340257, 0.17739002071944432, 0.08997361752367683, 0.07761019265252467, 0.10244743350449825, 0.07746000966401612, 0.0528310204929765, 0.07923805547250362, 0.08952494494071506, 0.08322256683744667, 0.09185117223435213]}, "mutation_prompt": null}
