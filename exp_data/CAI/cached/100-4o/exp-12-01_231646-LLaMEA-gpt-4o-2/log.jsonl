{"id": "04c88adc-b28b-443c-865a-580b28255dcb", "solution": "import numpy as np\n\nclass DE_PSO_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.inf * np.ones(self.population_size)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.f = 0.8  # DE scaling factor\n        self.cr = 0.9  # DE crossover rate\n        self.w = 0.5  # PSO inertia weight\n        self.c1 = 1.5  # PSO cognitive coefficient\n        self.c2 = 1.5  # PSO social coefficient\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            # Differential Evolution step\n            for i in range(self.population_size):\n                indices = list(range(0, i)) + list(range(i + 1, self.population_size))\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.population[a] + self.f * (self.population[b] - self.population[c])\n                trial_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == j_rand:\n                        trial_vector[j] = mutant_vector[j]\n                \n                # Evaluate trial vector\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n            \n            if evaluations >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.personal_best_positions[i] - self.population[i]) +\n                                      self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                \n                # Ensure boundary constraints\n                self.population[i] = np.clip(self.population[i], -5.0, 5.0)\n                \n                # Evaluate the new position\n                score = func(self.population[i])\n                evaluations += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                \n                if evaluations >= self.budget:\n                    break\n\n        return self.global_best_position", "name": "DE_PSO_Optimizer", "description": "This algorithm combines Differential Evolution and Particle Swarm Optimization to balance exploration and exploitation for effective search space traversal.", "configspace": "", "generation": 0, "fitness": 0.2647367925491653, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8773019187696451, 0.8687115858513242, 0.8693594440802, 0.18984509427648488, 0.8728317830824894, 0.19050729381431575, 0.8900173551649728, 0.8696824994866955, 0.8843963262038601, 0.07277185390961916, 0.07682005137101, 0.0751144607981491, 0.748421476487262, 0.04603985317564929, 0.7597597775687334, 0.6819054025136286, 0.018473605727742815, 9.999999999998899e-05, 0.11574269537776927, 0.14118944961419844, 0.11173953339423892, 0.14284869812791312, 0.1487662506792905, 0.18377133729954054, 0.14822317626790316, 0.049984244941992606, 0.12277065697720102, 0.10286801195046114, 0.0805869207436779, 0.13197919814047987, 0.11271160631033306, 0.12907886948368064, 0.13433712618699956, 0.08983666807755175, 0.11068223399358634, 0.14925616541812137, 0.9928685524571582, 0.9944650250143804, 0.9896922335394036, 0.9922682957130723, 0.9938896688065083, 0.9899901696926363, 0.9913507305876466, 0.994128611199586, 0.9896805635568389, 0.05968542633658658, 0.765279853248001, 0.05999723723115313, 0.15060799695364235, 0.7421430562039155, 0.6116632125804258, 0.0872858960964128, 0.7619235882362214, 0.12778539656583832, 0.16908455533090816, 0.22241861292808862, 0.22544439934350735, 0.21904269218684735, 0.15596640058607214, 0.20088887688312773, 0.1361892934891925, 0.11549336531275678, 0.1739784487009438, 0.2663122792762871, 0.1299765539874721, 0.2518670940400255, 0.10431013046731319, 0.10258910864320336, 0.2371726626415882, 0.3322608392343165, 0.13001924568554601, 0.18557221596917906, 0.1318602563279414, 0.24607681931750858, 0.25048050952847856, 0.283554613703775, 0.2752898727351346, 0.2808535539584863, 0.13687345982096855, 9.999999999998899e-05, 0.2715096144919148, 0.0006393395191022222, 0.0065100672879654375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001435111490996288, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010375532148055422, 0.03050986674248013, 0.03527156133874376, 0.061551360515124554, 0.04625872857367708, 0.0007202585828927077, 0.03493349953685587, 0.030290084540946394, 0.028216134118701275, 9.999999999998899e-05, 0.034343782916779086, 9.999999999998899e-05, 0.07601438778937486, 0.076265205868153, 0.23665479417987179, 0.13020447565268767, 0.0949782776951632, 0.07370447551019754, 0.07968220964739336, 0.05921843879015454, 0.13691812363118439, 0.14891417140340912, 9.999999999998899e-05, 0.006385739329847873, 0.04957511842770235, 0.04844237572589882, 0.08364443626634965, 0.5437459479062361, 0.5763613696852312, 0.5783948145744334, 0.5716031208290614, 0.5868426407508308, 0.608032932460901, 0.6147531436415006, 0.5841369704312652, 0.5591859636096189, 0.07642469782842942, 0.09794883464437731, 0.07634278515812765, 0.11041442933303969, 0.13445971328084838, 0.11046949542945417, 0.12872915004391838, 0.10101530801778913, 0.13704472405053258, 0.16618400735967276, 0.22082039643674933, 0.22577932584742544, 0.23104161887632058, 0.14408879444656364, 0.16782444242416472, 0.2377139629691939, 0.14116723285014776, 0.178618416075767, 0.2691777862145758, 0.4919707744194284, 0.5139785348015631, 0.24522021922989323, 0.2986834758459841, 0.30087066179647814, 0.5288121911574757, 0.20673396512252606, 0.3128249747016363, 0.2393963034057971, 0.23456346161031083, 0.2715095330774224, 0.24397366417966881, 0.3200047265451933, 0.2402742542897901, 0.330821517978226, 0.26551090157333346, 0.19288585421807425, 0.2079267595237666, 0.21713678249730262, 0.22741702844215406, 0.23101319325206882, 0.21815573944883893, 0.23035234706546492, 0.1976020784313849, 0.22914717510260285, 0.22510883683524552, 0.19190669573322705, 0.19202817464119182, 0.1867492490234267, 0.18880236586896193, 0.19120144206660916, 0.20565243983083414, 0.1927617584619543, 0.24771121158180354, 0.1792988014279927, 0.18187439909137637, 0.1848183458165027, 0.18767391074883177, 0.1780398941052621, 0.8979951269989803, 0.1666137306724098, 0.17044985059584783, 0.8938449310283474, 0.901678457665535, 0.16932490740223116, 0.11137912703091513, 0.7525098054582311, 0.844090771184256, 0.11050678944882475, 0.10770322554053713, 0.781066653925054, 0.1565198714711813, 0.2090929711676779, 0.22347445045483894, 0.20018692909998748, 0.203432231039, 0.18990416617809036, 0.22009441569621135, 0.1845777692466003, 0.17796107731958766, 0.19582500802556857, 0.18290901417002592, 0.09407208439399761, 0.09186320616227972, 0.08009899433979084, 0.09628886961708794, 0.13988683108972821, 0.09354580262394141, 0.08833699947939733, 0.09382932207453765, 0.09446696078678907]}, "mutation_prompt": null}
{"id": "c1968dc9-58e5-43fb-8acc-4ec9a7ab2b99", "solution": "import numpy as np\n\nclass DE_PSO_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.inf * np.ones(self.population_size)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.f = 0.8  # DE scaling factor\n        self.cr = 0.9  # DE crossover rate\n        self.w = 0.5  # PSO inertia weight\n        self.c1 = 1.5  # PSO cognitive coefficient\n        self.c2 = 1.5  # PSO social coefficient\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            # Differential Evolution step\n            for i in range(self.population_size):\n                indices = list(range(0, i)) + list(range(i + 1, self.population_size))\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.population[a] + self.f * (self.population[b] - self.population[c])\n                trial_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == j_rand:\n                        trial_vector[j] = mutant_vector[j]\n                \n                # Evaluate trial vector\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n            \n            if evaluations >= self.budget:\n                break\n\n            # Particle Swarm Optimization step\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.w = 0.4 + 0.5 * ((self.budget - evaluations) / self.budget)  # Adaptive inertia weight\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.personal_best_positions[i] - self.population[i]) +\n                                      self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                \n                # Ensure boundary constraints\n                self.population[i] = np.clip(self.population[i], -5.0, 5.0)\n                \n                # Evaluate the new position\n                score = func(self.population[i])\n                evaluations += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                \n                if evaluations >= self.budget:\n                    break\n\n        return self.global_best_position", "name": "DE_PSO_Optimizer", "description": "Integrate adaptive inertia weight adjustment to the PSO component for enhanced balance between exploration and exploitation.", "configspace": "", "generation": 1, "fitness": 0.19396968362160164, "feedback": "", "error": "", "parent_id": "04c88adc-b28b-443c-865a-580b28255dcb", "metadata": {"aucs": [0.5960083625448538, 0.1258888542565093, 0.657444898732775, 0.1880838820359707, 0.18882103541687112, 0.581206711400782, 0.6114411715131173, 0.17241644480823382, 0.16863422138124495, 0.35563759678817575, 0.3932010487762355, 0.33647781813107913, 0.3139943638402909, 0.047599148028664384, 0.3093345352173741, 0.014209586565138266, 0.030983247986403506, 0.29680920234397334, 0.3191581836672084, 0.12776713477357426, 0.1120665459076512, 0.06292749472550552, 0.06474702873715488, 0.12539253135917972, 0.11369062088223125, 0.0979296332754589, 0.1175126905681031, 0.09233808316712588, 0.04318934942490282, 0.0972018620652696, 0.09303314947030905, 0.09039706913397516, 0.1329502865316945, 0.10154991704288763, 0.1258430191197476, 0.09592116456653821, 0.9928442526018944, 0.9944996594438928, 0.9896018194301053, 0.9931257221630794, 0.9936190546922191, 0.9933760627365598, 0.9933417051905483, 0.9967019270686495, 0.9933255656343314, 0.3328706748388055, 0.10796376306571398, 9.999999999998899e-05, 0.13612374919906145, 0.13754324167082033, 0.14020660894966763, 0.05068261965619225, 0.0509672419134789, 0.11675146188445473, 0.13294047643917095, 0.49693641076681516, 0.15464395365174244, 0.23102942948201, 0.15152061618341572, 0.1816994041483445, 0.16070813441727683, 0.12508231119001434, 0.16175438342493875, 0.07250036680418381, 0.172709966246264, 0.14884662665661053, 0.07143012839213714, 0.077088670406812, 0.1025082565625709, 0.12859505895869827, 9.999999999998899e-05, 0.14487746704478088, 0.010080909390397075, 0.1555222214258727, 0.06193116148721689, 0.14215761684153527, 0.16407523001841806, 0.14917741880561952, 0.027549964453731812, 0.09676430972222883, 0.18868617268150834, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02988239413417726, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0249897938715401, 0.03131644515661591, 0.02948555843912548, 0.0002561993094486459, 0.028350114606630283, 0.0020924907220695177, 0.016540905372021353, 0.06013540706439402, 0.037032228414187185, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0535210502372544, 0.0487093401554064, 0.04327001412063325, 0.05135584104799307, 0.06018933715029762, 0.042103234187135574, 0.07006153698455708, 9.999999999998899e-05, 0.14233042543064434, 0.029279342961182175, 0.0267163851823099, 0.07725398463466904, 0.0389415201367046, 0.05932712724219813, 0.06092636379908978, 0.15074434242139656, 0.40015329426438606, 0.4353152115401524, 0.45831218771507065, 0.18110158322368042, 0.4419401828703813, 0.4320187465991404, 0.12000922385602275, 0.4391811174753406, 0.05503331369640896, 0.0875545469777782, 0.09077548249133616, 0.09781918595778427, 0.08187763590805919, 0.10101067991817958, 0.08702889708649364, 0.07337522787407436, 0.11246696633434672, 0.21256952473927437, 0.25397989304655644, 0.24083064257268083, 0.21545273178526803, 0.17303314100388145, 0.21946945088229153, 0.13298315771137204, 0.2708859155453386, 0.265029566515921, 0.23688142388333433, 0.23450820579045062, 0.1960573462025147, 0.2538386771835449, 0.21205242283639436, 0.30870744601147126, 0.25479309409077666, 0.19330748921570173, 0.322505088257222, 0.12614037368381692, 0.19843499120792385, 0.23846857035521107, 0.17071445957460907, 0.18213188199917474, 0.23873676850122239, 0.21822160406149493, 0.20680617431214754, 0.22139000954740218, 0.187177307308678, 0.2059350857456833, 0.19026691196472278, 0.19638578315809363, 0.18258318196490297, 0.1745552029537244, 0.18438919133428122, 0.1827585713205946, 0.16539137465047038, 0.18868396255035302, 0.17958429984424362, 0.19496940284735886, 0.21141042967484514, 0.20169433991399321, 0.19901501727196824, 0.19070648953974179, 0.21207386947579931, 0.18632842568338126, 0.2589024626583113, 0.247331722498087, 0.613635966957705, 0.16923078371812117, 0.16830595455577335, 0.19040135972733918, 0.1370690155640003, 0.6030090270616331, 0.11222397398296913, 0.1655307975256861, 0.3718820185316999, 0.1178098154634376, 0.10859799689684047, 0.10686605149152861, 0.10242269819041672, 0.19694914549261788, 0.14412044400171287, 0.18500652206438672, 0.20420127407171662, 0.19479950155376413, 0.18847645361223986, 0.18259423448863943, 0.2139060904451241, 0.19113599686682725, 0.17541148366246762, 0.1904414879067825, 0.17248758826716493, 0.07336028915407644, 0.07964089758891224, 0.10744063389949354, 0.08502260038957044, 0.0798925660613049, 0.07430569822505784, 0.08145845639720051, 0.05795767658355344, 0.07642952249164114]}, "mutation_prompt": null}
