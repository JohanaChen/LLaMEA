{"id": "4073f30a-5ca1-4e1a-9986-950f9fe93a9d", "solution": "import numpy as np\n\nclass HybridAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Set a reasonable population size\n        self.cr = 0.9  # Crossover probability\n        self.f = 0.8  # Differential weight\n        self.lb = -5.0  # Lower bound\n        self.ub = 5.0  # Upper bound\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n    \n    def local_search(self, individual, func):\n        # A simple local search strategy to refine the solution\n        step_size = 0.01\n        for _ in range(5):  # Perform few local moves\n            candidate = individual + np.random.uniform(-step_size, step_size, size=self.dim)\n            candidate = np.clip(candidate, self.lb, self.ub)\n            candidate_fitness = func(candidate)\n            if candidate_fitness < self.best_fitness:\n                self.best_solution = candidate\n                self.best_fitness = candidate_fitness\n                individual = candidate  # Update the individual\n        return individual\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Mutation\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.population[idxs]\n                mutant = a + self.f * (b - c)\n                mutant = np.clip(mutant, self.lb, self.ub)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.cr\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < func(self.population[i]):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n                # Apply local search to improve exploration\n                if evaluations % (self.population_size // 2) == 0:\n                    self.population[i] = self.local_search(self.population[i], func)\n                    evaluations += 1  # Each local search step counts as an evaluation\n\n        return self.best_solution", "name": "HybridAdaptiveDifferentialEvolution", "description": "Hybrid Adaptive Differential Evolution with Local Search for efficient global and local exploration.", "configspace": "", "generation": 0, "fitness": 0.1738460740649682, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.33016426490232165, 0.3699624253285416, 0.3918439375953928, 0.38477552091650336, 0.388265299115645, 0.3973231299209692, 0.3838292337589, 0.3597737832712158, 0.371662433051678, 0.1381935123710073, 0.11461224546733428, 0.11104017502728636, 0.1086939791795305, 0.1190350667072817, 0.10605698248914863, 0.15614702745067788, 0.13144173853421048, 0.11633533162039644, 0.08868190925601671, 0.0810884387626798, 0.07556327553731446, 0.0693104638364821, 0.12068443178965593, 0.07934452203750098, 0.0731508582702598, 0.08401230564625783, 0.07160289401482678, 0.06774977172868057, 0.06841503020059647, 0.05829538905156495, 0.0801861718121798, 0.0666629944340269, 0.06335525336215941, 0.07235155180479236, 0.05975481315523046, 0.05872816150453086, 0.9367960845855989, 0.8569212395614558, 0.9260899271680584, 0.9031554415758234, 0.8268991373222125, 0.8897563376547291, 0.9335758868400532, 0.9499435230204099, 0.9143100582036547, 0.15553217461322255, 0.15859376728330776, 0.1312956209361148, 0.1600399570826081, 0.156744773936505, 0.1430995429131775, 0.1485507180201474, 0.15485331652396161, 0.1515218923047862, 0.21265709813719602, 0.23579482668287588, 0.20527778409264252, 0.22667594805288793, 0.24444175720206296, 0.250543415174444, 0.21140233088906668, 0.2243828529164713, 0.23583835590883184, 0.09202717730382626, 0.08420240790551436, 0.07687040392722488, 0.0779347579612526, 0.0793443462619492, 0.09971563837348751, 0.09998092619941834, 0.09764320437208585, 0.08918181220271926, 0.08615423155494062, 0.07346404824556108, 0.08769400108758696, 0.06859155043042398, 0.1019471785750089, 0.08591298002423131, 0.09184482324079468, 0.08912961046057921, 0.09485055651555485, 0.002303174617007797, 0.015219074633502139, 0.01718339911882827, 0.03199753074045186, 0.010204132397924504, 0.007143958000928929, 0.016201890936857866, 0.015394804224253877, 0.027190680329193473, 0.10899091633977731, 0.15392808031053484, 0.10717995741516084, 0.07769881412510071, 0.10009938534589768, 0.10768374635441391, 0.13883416515358404, 0.1675634099168054, 0.12895162413129346, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00012027680845949629, 9.999999999998899e-05, 0.0002459419080274028, 0.01105036889591171, 9.999999999998899e-05, 0.06027447356666793, 0.06807934690087947, 0.0553660612950595, 0.0694408298031387, 0.0858126237777842, 0.074199473156909, 0.07352191588333445, 0.08719263162872393, 0.08631231052929833, 0.31830367073237087, 0.34555316742111053, 0.33220441637613607, 0.33337465857462034, 0.31989622187370914, 0.34554299823280166, 0.3044661163888229, 0.3222448622178171, 0.3118167289419884, 0.07281882067690548, 0.07081201165530038, 0.0854041762884542, 0.07209662492919522, 0.08112673934849968, 0.08548264653874271, 0.07084243009248292, 0.07471451686022268, 0.07131375432714371, 0.19168234323010447, 0.1345393362437175, 0.1351967909733789, 0.13933617524030995, 0.1363812134126139, 0.12288127862232545, 0.16030010415667273, 0.1340300045554066, 0.11879232406478135, 0.20058448132675666, 0.19989028086304395, 0.20684547904034178, 0.18568291872027887, 0.20574044626519394, 0.21488736760680183, 0.22937800377913342, 0.2290669135782648, 0.22405602305866512, 0.158621638613902, 0.1491625670197151, 0.14570023630400808, 0.1412788568251162, 0.13874564065636275, 0.1380667038818063, 0.15583305880481602, 0.1581486484878898, 0.15978691236786235, 0.17930981551523906, 0.16354054707511334, 0.19715785841922306, 0.1781933876230134, 0.20933366384498864, 0.18369069320374753, 0.17465815659732375, 0.16848650275028698, 0.188363870547808, 0.15515240673450026, 0.1553375021123633, 0.16817812794181286, 0.16643347689084598, 0.17359107858402933, 0.1572635083500854, 0.16809281905335482, 0.15978823523303054, 0.15052872281843743, 0.16072471882186, 0.2529613374534565, 0.14823131285832492, 0.23028268943298524, 0.15891483798477146, 0.14621312821753452, 0.14417273900405558, 0.15762494307330321, 0.15440078733745888, 0.1521015910157173, 0.18739725014253172, 0.16361205683284297, 0.1742715055279308, 0.20521722946083265, 0.18672565725487944, 0.18358796724434168, 0.1847838154463335, 0.1994805891649879, 0.18902408807901327, 0.19586456071230773, 0.18519127746970787, 0.18415756696012775, 0.20459743407564157, 0.1924632942379061, 0.19862260950430133, 0.1751833443635178, 0.19272452834033516, 0.06554882562572262, 0.061722782193364356, 0.06896682933669995, 0.05574230686638726, 0.06471112842699456, 0.055924775593281795, 0.061952227787725356, 0.06786252233827095, 0.06479431297390315]}, "mutation_prompt": null}
{"id": "0e0bce9d-7263-4db9-afb9-766acf4e94d1", "solution": "import numpy as np\n\nclass HybridAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Set a reasonable population size\n        self.cr = 0.9  # Crossover probability\n        self.f = 0.8  # Differential weight\n        self.lb = -5.0  # Lower bound\n        self.ub = 5.0  # Upper bound\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n    \n    def local_search(self, individual, func):\n        # A simple local search strategy to refine the solution\n        step_size = 0.01\n        for _ in range(5):  # Perform few local moves\n            candidate = individual + np.random.uniform(-step_size, step_size, size=self.dim)\n            candidate = np.clip(candidate, self.lb, self.ub)\n            candidate_fitness = func(candidate)\n            if candidate_fitness < self.best_fitness:\n                self.best_solution = candidate\n                self.best_fitness = candidate_fitness\n                individual = candidate  # Update the individual\n        return individual\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Mutation\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = self.population[idxs]\n                mutant = a + self.f * (b - c)\n                mutant = np.clip(mutant, self.lb, self.ub)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.cr\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < func(self.population[i]):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n                # Apply local search to improve exploration\n                if evaluations % (self.population_size // 2) == 0:\n                    self.population[i] = self.local_search(self.population[i], func)\n                    evaluations += 1  # Each local search step counts as an evaluation\n\n        return self.best_solution", "name": "HybridAdaptiveDifferentialEvolution", "description": "Hybrid Adaptive Differential Evolution with Local Search for efficient global and local exploration.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4073f30a-5ca1-4e1a-9986-950f9fe93a9d", "metadata": {"aucs": [0.33016426490232165, 0.3699624253285416, 0.3918439375953928, 0.38477552091650336, 0.388265299115645, 0.3973231299209692, 0.3838292337589, 0.3597737832712158, 0.371662433051678, 0.1381935123710073, 0.11461224546733428, 0.11104017502728636, 0.1086939791795305, 0.1190350667072817, 0.10605698248914863, 0.15614702745067788, 0.13144173853421048, 0.11633533162039644, 0.08868190925601671, 0.0810884387626798, 0.07556327553731446, 0.0693104638364821, 0.12068443178965593, 0.07934452203750098, 0.0731508582702598, 0.08401230564625783, 0.07160289401482678, 0.06774977172868057, 0.06841503020059647, 0.05829538905156495, 0.0801861718121798, 0.0666629944340269, 0.06335525336215941, 0.07235155180479236, 0.05975481315523046, 0.05872816150453086, 0.9367960845855989, 0.8569212395614558, 0.9260899271680584, 0.9031554415758234, 0.8268991373222125, 0.8897563376547291, 0.9335758868400532, 0.9499435230204099, 0.9143100582036547, 0.15553217461322255, 0.15859376728330776, 0.1312956209361148, 0.1600399570826081, 0.156744773936505, 0.1430995429131775, 0.1485507180201474, 0.15485331652396161, 0.1515218923047862, 0.21265709813719602, 0.23579482668287588, 0.20527778409264252, 0.22667594805288793, 0.24444175720206296, 0.250543415174444, 0.21140233088906668, 0.2243828529164713, 0.23583835590883184, 0.09202717730382626, 0.08420240790551436, 0.07687040392722488, 0.0779347579612526, 0.0793443462619492, 0.09971563837348751, 0.09998092619941834, 0.09764320437208585, 0.08918181220271926, 0.08615423155494062, 0.07346404824556108, 0.08769400108758696, 0.06859155043042398, 0.1019471785750089, 0.08591298002423131, 0.09184482324079468, 0.08912961046057921, 0.09485055651555485, 0.002303174617007797, 0.015219074633502139, 0.01718339911882827, 0.03199753074045186, 0.010204132397924504, 0.007143958000928929, 0.016201890936857866, 0.015394804224253877, 0.027190680329193473, 0.10899091633977731, 0.15392808031053484, 0.10717995741516084, 0.07769881412510071, 0.10009938534589768, 0.10768374635441391, 0.13883416515358404, 0.1675634099168054, 0.12895162413129346, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00012027680845949629, 9.999999999998899e-05, 0.0002459419080274028, 0.01105036889591171, 9.999999999998899e-05, 0.06027447356666793, 0.06807934690087947, 0.0553660612950595, 0.0694408298031387, 0.0858126237777842, 0.074199473156909, 0.07352191588333445, 0.08719263162872393, 0.08631231052929833, 0.31830367073237087, 0.34555316742111053, 0.33220441637613607, 0.33337465857462034, 0.31989622187370914, 0.34554299823280166, 0.3044661163888229, 0.3222448622178171, 0.3118167289419884, 0.07281882067690548, 0.07081201165530038, 0.0854041762884542, 0.07209662492919522, 0.08112673934849968, 0.08548264653874271, 0.07084243009248292, 0.07471451686022268, 0.07131375432714371, 0.19168234323010447, 0.1345393362437175, 0.1351967909733789, 0.13933617524030995, 0.1363812134126139, 0.12288127862232545, 0.16030010415667273, 0.1340300045554066, 0.11879232406478135, 0.20058448132675666, 0.19989028086304395, 0.20684547904034178, 0.18568291872027887, 0.20574044626519394, 0.21488736760680183, 0.22937800377913342, 0.2290669135782648, 0.22405602305866512, 0.158621638613902, 0.1491625670197151, 0.14570023630400808, 0.1412788568251162, 0.13874564065636275, 0.1380667038818063, 0.15583305880481602, 0.1581486484878898, 0.15978691236786235, 0.17930981551523906, 0.16354054707511334, 0.19715785841922306, 0.1781933876230134, 0.20933366384498864, 0.18369069320374753, 0.17465815659732375, 0.16848650275028698, 0.188363870547808, 0.15515240673450026, 0.1553375021123633, 0.16817812794181286, 0.16643347689084598, 0.17359107858402933, 0.1572635083500854, 0.16809281905335482, 0.15978823523303054, 0.15052872281843743, 0.16072471882186, 0.2529613374534565, 0.14823131285832492, 0.23028268943298524, 0.15891483798477146, 0.14621312821753452, 0.14417273900405558, 0.15762494307330321, 0.15440078733745888, 0.1521015910157173, 0.18739725014253172, 0.16361205683284297, 0.1742715055279308, 0.20521722946083265, 0.18672565725487944, 0.18358796724434168, 0.1847838154463335, 0.1994805891649879, 0.18902408807901327, 0.19586456071230773, 0.18519127746970787, 0.18415756696012775, 0.20459743407564157, 0.1924632942379061, 0.19862260950430133, 0.1751833443635178, 0.19272452834033516, 0.06554882562572262, 0.061722782193364356, 0.06896682933669995, 0.05574230686638726, 0.06471112842699456, 0.055924775593281795, 0.061952227787725356, 0.06786252233827095, 0.06479431297390315]}, "mutation_prompt": null}
