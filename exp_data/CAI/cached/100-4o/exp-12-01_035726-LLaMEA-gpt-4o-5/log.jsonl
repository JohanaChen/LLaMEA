{"id": "987cf281-2889-41bb-b161-ebe680b835c3", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # a common choice for DE\n        self.bounds = (-5.0, 5.0)\n    \n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], \n                                       (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        \n        evaluations = self.population_size\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Mutation\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n                F = np.random.uniform(0.5, 1.0)  # dynamic scaling factor\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < np.random.uniform(0.1, 0.9)\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                        \n        return best", "name": "AdaptiveDifferentialEvolution", "description": "An adaptive differential evolution algorithm with dynamic scaling and crossover rates tailored for efficient exploration and exploitation across the search space.", "configspace": "", "generation": 0, "fitness": 0.24192773241023785, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6935429067149532, 0.7155003442381265, 0.6956948517517239, 0.7057612762511942, 0.7100155022594415, 0.701615036302627, 0.7009562939219471, 0.6947073794517904, 0.6945650193585142, 0.4303685438315974, 0.45928745134611004, 0.4467548076467277, 0.476254665011132, 0.47819659092126987, 0.47267651313480774, 0.4283967256969954, 0.45813473765655854, 0.47805883921704684, 0.22295437928263528, 0.25856573341402767, 0.23917999555774094, 0.3201815180519826, 0.21604573836100627, 0.24642432744447895, 0.23231770476019242, 0.20157964155426245, 0.18428861574506683, 0.1790263454932206, 0.20042649568036996, 0.1908818594953876, 0.19881391908446144, 0.16897902419525612, 0.17270545354095668, 0.20406338850291716, 0.19192867503862676, 0.17905272743406964, 0.946522657520532, 0.9701461310939415, 0.96479290995983, 0.9699610089569952, 0.965779222730905, 0.9607149118467146, 0.9702769101134929, 0.9705386064081983, 0.9764882687698659, 0.26341655302945644, 0.25292863137730504, 0.2418671960900387, 0.2495993108828215, 0.25370561366643185, 0.24542106232859928, 0.24410963039696765, 0.24757001368635279, 0.2454976193006776, 0.2734768935354729, 0.24533872625776132, 0.3016156873787246, 0.29721440928779697, 0.25947911966552684, 0.3444428824299842, 0.26624018891222334, 0.24510942835070748, 0.4288040285518545, 0.16431632214237346, 0.1336106163881846, 0.16262790976026298, 0.1605067321651581, 0.13773287841653836, 0.1524159242314026, 0.1455040158410218, 0.13650827514633168, 0.15131949063726147, 0.1138344034939982, 0.10756056171512773, 0.1263381093537389, 0.1420535892920689, 0.14440632878155535, 0.13095422947933488, 0.11418297993501436, 0.15623693753479584, 0.14191831221593365, 0.00019206728301923714, 9.999999999998899e-05, 0.0034101893246701875, 0.029664672682039095, 9.999999999998899e-05, 0.0018722786538512004, 0.0023901644120647436, 0.00348050445187309, 9.999999999998899e-05, 0.06953087145224068, 0.0923980996646665, 0.06837379342929184, 0.07947877445585616, 0.07339202862669791, 0.07431899095928951, 0.12267029588675082, 0.1307283834210048, 0.10947105880329056, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0022216654422165805, 0.003780476717737624, 0.0030615339734909597, 0.10459218879201093, 0.08770661395069779, 0.1031772320406742, 0.11538750925994301, 0.10041434326176202, 0.11012051953259361, 0.09525207635857336, 0.09554336971452848, 0.0989975318010291, 0.42888574300151183, 0.44382602066399757, 0.4321779363544309, 0.4505972002713282, 0.4519936009848857, 0.4341249629918644, 0.4402231642884116, 0.4279069960648154, 0.44393252007269135, 0.08190208067231342, 0.10937584786050336, 0.09493477742547107, 0.08548554449785861, 0.08583845006040225, 0.08768177102044483, 0.08094798110219892, 0.0866463967695239, 0.08014061379654891, 0.12434773446523961, 0.11950276061631071, 0.15564481647075534, 0.15132020898810128, 0.1526373390467346, 0.14182545747629904, 0.1414583822817056, 0.16854579962422434, 0.15022173437575181, 0.25441835477082675, 0.24761857152329092, 0.2586485746262044, 0.2408105298581268, 0.2541669528784124, 0.22324217658232992, 0.2839792265678103, 0.2937145646492324, 0.2656734263160504, 0.19765638121899687, 0.18674063125766038, 0.1905084454800502, 0.1705925812746878, 0.16571290455130094, 0.18350628716637907, 0.19801741775855297, 0.19362658693092838, 0.1818183707026224, 0.1876484285600476, 0.20299334341919673, 0.17596227144553522, 0.20166441845259087, 0.21089184342128364, 0.18818056964191276, 0.20259978392070144, 0.18595142398997733, 0.19126495178014047, 0.19296615860073574, 0.1980717818876948, 0.20086466669329994, 0.19441737954842042, 0.2051494447087926, 0.19994537168054405, 0.1963732092602204, 0.2004012155998165, 0.19879119417187896, 0.25475917052719455, 0.15925604544792094, 0.20481126888528256, 0.2711299089204202, 0.21286723286234133, 0.2951104172062655, 0.3060674705989158, 0.22046531508417755, 0.24696788560409944, 0.28679837062699465, 0.17227160478217574, 0.19552033796675272, 0.18448395522382566, 0.18613683688882987, 0.1794933575150679, 0.19337878010252063, 0.3387471788752192, 0.2828978667973311, 0.17939156839994552, 0.19285151020718883, 0.19618835453970074, 0.19590117465315693, 0.17589970559335, 0.19278245120369897, 0.1817876566093931, 0.16959267274007872, 0.1836554381177129, 0.07333523949455434, 0.07526265022042111, 0.06673277939090216, 0.07460243838876846, 0.0878445467270651, 0.07623054737524448, 0.07561434928060484, 0.0738430653754989, 0.06348026547780905]}, "mutation_prompt": null}
{"id": "972b77dd-5fe3-4229-9573-45b51ee058d7", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # a common choice for DE\n        self.bounds = (-5.0, 5.0)\n    \n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], \n                                       (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        \n        evaluations = self.population_size\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Mutation\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = population[np.random.choice(candidates, 3, replace=False)]\n                F = np.random.uniform(0.5, 1.0)  # dynamic scaling factor\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < np.random.uniform(0.1, 0.9)\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                        \n        return best", "name": "AdaptiveDifferentialEvolution", "description": "An adaptive differential evolution algorithm with dynamic scaling and crossover rates tailored for efficient exploration and exploitation across the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "987cf281-2889-41bb-b161-ebe680b835c3", "metadata": {"aucs": [0.6935429067149532, 0.7155003442381265, 0.6956948517517239, 0.7057612762511942, 0.7100155022594415, 0.701615036302627, 0.7009562939219471, 0.6947073794517904, 0.6945650193585142, 0.4303685438315974, 0.45928745134611004, 0.4467548076467277, 0.476254665011132, 0.47819659092126987, 0.47267651313480774, 0.4283967256969954, 0.45813473765655854, 0.47805883921704684, 0.22295437928263528, 0.25856573341402767, 0.23917999555774094, 0.3201815180519826, 0.21604573836100627, 0.24642432744447895, 0.23231770476019242, 0.20157964155426245, 0.18428861574506683, 0.1790263454932206, 0.20042649568036996, 0.1908818594953876, 0.19881391908446144, 0.16897902419525612, 0.17270545354095668, 0.20406338850291716, 0.19192867503862676, 0.17905272743406964, 0.946522657520532, 0.9701461310939415, 0.96479290995983, 0.9699610089569952, 0.965779222730905, 0.9607149118467146, 0.9702769101134929, 0.9705386064081983, 0.9764882687698659, 0.26341655302945644, 0.25292863137730504, 0.2418671960900387, 0.2495993108828215, 0.25370561366643185, 0.24542106232859928, 0.24410963039696765, 0.24757001368635279, 0.2454976193006776, 0.2734768935354729, 0.24533872625776132, 0.3016156873787246, 0.29721440928779697, 0.25947911966552684, 0.3444428824299842, 0.26624018891222334, 0.24510942835070748, 0.4288040285518545, 0.16431632214237346, 0.1336106163881846, 0.16262790976026298, 0.1605067321651581, 0.13773287841653836, 0.1524159242314026, 0.1455040158410218, 0.13650827514633168, 0.15131949063726147, 0.1138344034939982, 0.10756056171512773, 0.1263381093537389, 0.1420535892920689, 0.14440632878155535, 0.13095422947933488, 0.11418297993501436, 0.15623693753479584, 0.14191831221593365, 0.00019206728301923714, 9.999999999998899e-05, 0.0034101893246701875, 0.029664672682039095, 9.999999999998899e-05, 0.0018722786538512004, 0.0023901644120647436, 0.00348050445187309, 9.999999999998899e-05, 0.06953087145224068, 0.0923980996646665, 0.06837379342929184, 0.07947877445585616, 0.07339202862669791, 0.07431899095928951, 0.12267029588675082, 0.1307283834210048, 0.10947105880329056, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0022216654422165805, 0.003780476717737624, 0.0030615339734909597, 0.10459218879201093, 0.08770661395069779, 0.1031772320406742, 0.11538750925994301, 0.10041434326176202, 0.11012051953259361, 0.09525207635857336, 0.09554336971452848, 0.0989975318010291, 0.42888574300151183, 0.44382602066399757, 0.4321779363544309, 0.4505972002713282, 0.4519936009848857, 0.4341249629918644, 0.4402231642884116, 0.4279069960648154, 0.44393252007269135, 0.08190208067231342, 0.10937584786050336, 0.09493477742547107, 0.08548554449785861, 0.08583845006040225, 0.08768177102044483, 0.08094798110219892, 0.0866463967695239, 0.08014061379654891, 0.12434773446523961, 0.11950276061631071, 0.15564481647075534, 0.15132020898810128, 0.1526373390467346, 0.14182545747629904, 0.1414583822817056, 0.16854579962422434, 0.15022173437575181, 0.25441835477082675, 0.24761857152329092, 0.2586485746262044, 0.2408105298581268, 0.2541669528784124, 0.22324217658232992, 0.2839792265678103, 0.2937145646492324, 0.2656734263160504, 0.19765638121899687, 0.18674063125766038, 0.1905084454800502, 0.1705925812746878, 0.16571290455130094, 0.18350628716637907, 0.19801741775855297, 0.19362658693092838, 0.1818183707026224, 0.1876484285600476, 0.20299334341919673, 0.17596227144553522, 0.20166441845259087, 0.21089184342128364, 0.18818056964191276, 0.20259978392070144, 0.18595142398997733, 0.19126495178014047, 0.19296615860073574, 0.1980717818876948, 0.20086466669329994, 0.19441737954842042, 0.2051494447087926, 0.19994537168054405, 0.1963732092602204, 0.2004012155998165, 0.19879119417187896, 0.25475917052719455, 0.15925604544792094, 0.20481126888528256, 0.2711299089204202, 0.21286723286234133, 0.2951104172062655, 0.3060674705989158, 0.22046531508417755, 0.24696788560409944, 0.28679837062699465, 0.17227160478217574, 0.19552033796675272, 0.18448395522382566, 0.18613683688882987, 0.1794933575150679, 0.19337878010252063, 0.3387471788752192, 0.2828978667973311, 0.17939156839994552, 0.19285151020718883, 0.19618835453970074, 0.19590117465315693, 0.17589970559335, 0.19278245120369897, 0.1817876566093931, 0.16959267274007872, 0.1836554381177129, 0.07333523949455434, 0.07526265022042111, 0.06673277939090216, 0.07460243838876846, 0.0878445467270651, 0.07623054737524448, 0.07561434928060484, 0.0738430653754989, 0.06348026547780905]}, "mutation_prompt": null}
