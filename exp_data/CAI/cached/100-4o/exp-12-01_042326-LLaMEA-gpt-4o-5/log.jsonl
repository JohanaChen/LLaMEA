{"id": "21051573-0b5b-4b5f-8b97-7f55463f9c97", "solution": "import numpy as np\n\nclass HEPSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.7\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n\n        # Evaluate initial particles\n        for i in range(self.population_size):\n            score = func(particles[i])\n            if score < personal_best_scores[i]:\n                personal_best_scores[i] = score\n                personal_best_positions[i] = particles[i]\n\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # Update velocities and positions\n            r1, r2 = np.random.rand(2, self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_weight * r1 * (personal_best_positions - particles) +\n                          self.social_weight * r2 * (global_best_position - particles))\n            particles += velocities\n            \n            # Clamp positions to bounds\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            # Evaluate new particles\n            for i in range(self.population_size):\n                score = func(particles[i])\n                evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = particles[i]\n                    if score < global_best_score:\n                        global_best_score = score\n                        global_best_position = particles[i]\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HEPSA", "description": "Hybrid Evolutionary-Particle Swarm Algorithm (HEPSA) combines principles of evolutionary strategies and particle swarm optimization to balance exploration and exploitation in search space efficiently.", "configspace": "", "generation": 0, "fitness": 0.21266528322902647, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7054037225825411, 0.8262420766490807, 0.7553752944610347, 0.8610632459148451, 0.2111395837908483, 0.18973357341311192, 0.4326063523803364, 0.1293964396723437, 0.3986400700288607, 0.631054753246548, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02284775655386817, 9.999999999998899e-05, 9.999999999998899e-05, 0.09800626143628599, 0.1370414565527155, 0.1548469983714189, 0.1345689732320896, 0.12496146573012301, 0.12680337678744802, 0.11044743329962403, 0.12458103924737574, 0.08980821177324927, 0.12543283613261158, 0.1145701347988759, 0.11434529205892108, 0.06638855489929063, 0.11243122367648817, 0.11282210075687193, 0.10819937780724997, 0.11277691516868416, 0.10485685360575281, 0.14140841552493744, 0.13656606678943295, 0.9927951731776428, 0.9852811748201823, 0.9944513201932383, 0.9868581463106867, 0.9908355814319855, 0.9909411338272135, 0.9891228355927848, 0.9910036704277513, 0.9907626025622283, 0.5093612627964184, 0.05535431688694914, 0.5341095759703839, 0.607386878974199, 0.14664619902409182, 0.1537023562004871, 0.08431149877756927, 0.05185335760908183, 0.017228673670548034, 0.17253772243571952, 0.22581013410412198, 0.2167676981790002, 0.20087257506648204, 0.19345703249320856, 0.2590820936357766, 0.12879288009185585, 0.12675555192655652, 0.4228944876255276, 0.11811923768658472, 0.22395841274754835, 9.999999999998899e-05, 0.23986031853734213, 0.18519642089805377, 0.09785962787367775, 9.999999999998899e-05, 0.13099909246204255, 0.2012092898821527, 0.20830822985499686, 0.08418973767194615, 0.18628126052312266, 0.13351307021405534, 0.19476924387557826, 0.17191672088192622, 0.23444903915929638, 0.03302662088518138, 0.2032085471158448, 9.999999999998899e-05, 9.999999999998899e-05, 0.01948963881544874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0063264126877921045, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994507967993888, 0.03128993717272499, 0.05303326231042793, 0.042872284327776455, 0.006973997506306118, 0.0032471880728764946, 0.18476419530259314, 0.02439517401518787, 0.02666985634229735, 0.04577284487145239, 9.999999999998899e-05, 0.07456635472432205, 0.06796322717860803, 0.2000569709069301, 0.07333976961226141, 0.16475188168289956, 0.0041316388965977335, 0.10297975607802523, 0.04769619549206805, 9.999999999998899e-05, 0.39089836210593776, 0.005814762040471266, 0.030078984345091486, 9.999999999998899e-05, 9.999999999998899e-05, 0.049904548217797995, 0.09432026280043648, 0.26375652163531027, 0.38595969032558575, 0.4907626147055878, 0.5219695770549126, 0.18239512360102772, 0.20871339899632713, 0.4597269061460786, 0.14001803287762526, 0.5064018130021688, 0.08345241466073294, 0.06285838877339123, 0.05304646324032636, 0.15313307542715593, 0.06340584802244609, 0.09948887675182283, 0.12251289556918743, 0.06423495311049332, 0.06959024576015893, 0.20535768496276408, 0.1522122272301656, 0.16111307028240995, 0.20140420829251549, 0.1380213483645848, 0.28510579418118887, 0.19916958652005368, 0.15284329147666653, 0.518850695682541, 0.26939248841143437, 0.16805417839990644, 0.14208060699828562, 0.33787486053962934, 0.2982500137010978, 0.2337280331626328, 0.2763297924564684, 0.28129971313817737, 0.17359110230777075, 0.08033124486212162, 0.18296927633221471, 0.14395675227999272, 0.2557960597421657, 0.154387636858616, 0.09107827477174724, 0.1529734771317922, 0.2327809662584387, 0.2675207977627231, 0.16095402189953334, 0.18936229058958787, 0.21140688238599736, 0.18166136006986677, 0.18955975897857746, 0.2194495246841116, 0.1591074712063708, 0.21877186743993304, 0.18925652919924052, 0.2230370511210381, 0.22455478791221206, 0.19028358574511972, 0.20750024158029123, 0.5065316642364142, 0.20119555507079345, 0.21007554934420403, 0.19834803134243106, 0.7109953462776428, 0.14018269034566633, 0.12663554769531615, 0.11806361077896232, 0.8524435874404624, 0.2003765281218256, 0.18496670280154515, 0.1001878110033082, 0.17029911597797331, 0.14352549319566565, 0.08345705751513799, 0.16641515718558852, 0.16673327614273437, 0.11182774076264235, 0.16761578911742758, 0.21246625886873394, 0.10422291189992938, 0.7813001672043377, 0.7590150339435185, 0.1815735175254507, 0.19315894130093403, 0.1799317732554484, 0.19352503952176814, 0.20847317466065107, 0.1791628722364761, 0.1760249240492585, 0.1722103613564595, 0.18298691820754676, 0.030252580658226225, 0.09815938459423801, 0.08579176888843654, 0.07696229157600543, 0.07364485805304744, 0.08941219952067825, 0.04771908290365956, 0.08136613581890906, 0.04237008687976651]}, "mutation_prompt": null}
{"id": "f604cd42-300f-497b-80c7-d1be1b687b66", "solution": "import numpy as np\n\nclass HEPSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.7\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n\n        # Evaluate initial particles\n        for i in range(self.population_size):\n            score = func(particles[i])\n            if score < personal_best_scores[i]:\n                personal_best_scores[i] = score\n                personal_best_positions[i] = particles[i]\n\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # Update velocities and positions\n            r1, r2 = np.random.rand(2, self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_weight * r1 * (personal_best_positions - particles) +\n                          self.social_weight * r2 * (global_best_position - particles))\n            particles += velocities\n            \n            # Clamp positions to bounds\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            # Evaluate new particles\n            for i in range(self.population_size):\n                score = func(particles[i])\n                evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = particles[i]\n                    if score < global_best_score:\n                        global_best_score = score\n                        global_best_position = particles[i]\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HEPSA", "description": "Hybrid Evolutionary-Particle Swarm Algorithm (HEPSA) combines principles of evolutionary strategies and particle swarm optimization to balance exploration and exploitation in search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21051573-0b5b-4b5f-8b97-7f55463f9c97", "metadata": {"aucs": [0.7054037225825411, 0.8262420766490807, 0.7553752944610347, 0.8610632459148451, 0.2111395837908483, 0.18973357341311192, 0.4326063523803364, 0.1293964396723437, 0.3986400700288607, 0.631054753246548, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02284775655386817, 9.999999999998899e-05, 9.999999999998899e-05, 0.09800626143628599, 0.1370414565527155, 0.1548469983714189, 0.1345689732320896, 0.12496146573012301, 0.12680337678744802, 0.11044743329962403, 0.12458103924737574, 0.08980821177324927, 0.12543283613261158, 0.1145701347988759, 0.11434529205892108, 0.06638855489929063, 0.11243122367648817, 0.11282210075687193, 0.10819937780724997, 0.11277691516868416, 0.10485685360575281, 0.14140841552493744, 0.13656606678943295, 0.9927951731776428, 0.9852811748201823, 0.9944513201932383, 0.9868581463106867, 0.9908355814319855, 0.9909411338272135, 0.9891228355927848, 0.9910036704277513, 0.9907626025622283, 0.5093612627964184, 0.05535431688694914, 0.5341095759703839, 0.607386878974199, 0.14664619902409182, 0.1537023562004871, 0.08431149877756927, 0.05185335760908183, 0.017228673670548034, 0.17253772243571952, 0.22581013410412198, 0.2167676981790002, 0.20087257506648204, 0.19345703249320856, 0.2590820936357766, 0.12879288009185585, 0.12675555192655652, 0.4228944876255276, 0.11811923768658472, 0.22395841274754835, 9.999999999998899e-05, 0.23986031853734213, 0.18519642089805377, 0.09785962787367775, 9.999999999998899e-05, 0.13099909246204255, 0.2012092898821527, 0.20830822985499686, 0.08418973767194615, 0.18628126052312266, 0.13351307021405534, 0.19476924387557826, 0.17191672088192622, 0.23444903915929638, 0.03302662088518138, 0.2032085471158448, 9.999999999998899e-05, 9.999999999998899e-05, 0.01948963881544874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0063264126877921045, 9.999999999998899e-05, 9.999999999998899e-05, 0.03994507967993888, 0.03128993717272499, 0.05303326231042793, 0.042872284327776455, 0.006973997506306118, 0.0032471880728764946, 0.18476419530259314, 0.02439517401518787, 0.02666985634229735, 0.04577284487145239, 9.999999999998899e-05, 0.07456635472432205, 0.06796322717860803, 0.2000569709069301, 0.07333976961226141, 0.16475188168289956, 0.0041316388965977335, 0.10297975607802523, 0.04769619549206805, 9.999999999998899e-05, 0.39089836210593776, 0.005814762040471266, 0.030078984345091486, 9.999999999998899e-05, 9.999999999998899e-05, 0.049904548217797995, 0.09432026280043648, 0.26375652163531027, 0.38595969032558575, 0.4907626147055878, 0.5219695770549126, 0.18239512360102772, 0.20871339899632713, 0.4597269061460786, 0.14001803287762526, 0.5064018130021688, 0.08345241466073294, 0.06285838877339123, 0.05304646324032636, 0.15313307542715593, 0.06340584802244609, 0.09948887675182283, 0.12251289556918743, 0.06423495311049332, 0.06959024576015893, 0.20535768496276408, 0.1522122272301656, 0.16111307028240995, 0.20140420829251549, 0.1380213483645848, 0.28510579418118887, 0.19916958652005368, 0.15284329147666653, 0.518850695682541, 0.26939248841143437, 0.16805417839990644, 0.14208060699828562, 0.33787486053962934, 0.2982500137010978, 0.2337280331626328, 0.2763297924564684, 0.28129971313817737, 0.17359110230777075, 0.08033124486212162, 0.18296927633221471, 0.14395675227999272, 0.2557960597421657, 0.154387636858616, 0.09107827477174724, 0.1529734771317922, 0.2327809662584387, 0.2675207977627231, 0.16095402189953334, 0.18936229058958787, 0.21140688238599736, 0.18166136006986677, 0.18955975897857746, 0.2194495246841116, 0.1591074712063708, 0.21877186743993304, 0.18925652919924052, 0.2230370511210381, 0.22455478791221206, 0.19028358574511972, 0.20750024158029123, 0.5065316642364142, 0.20119555507079345, 0.21007554934420403, 0.19834803134243106, 0.7109953462776428, 0.14018269034566633, 0.12663554769531615, 0.11806361077896232, 0.8524435874404624, 0.2003765281218256, 0.18496670280154515, 0.1001878110033082, 0.17029911597797331, 0.14352549319566565, 0.08345705751513799, 0.16641515718558852, 0.16673327614273437, 0.11182774076264235, 0.16761578911742758, 0.21246625886873394, 0.10422291189992938, 0.7813001672043377, 0.7590150339435185, 0.1815735175254507, 0.19315894130093403, 0.1799317732554484, 0.19352503952176814, 0.20847317466065107, 0.1791628722364761, 0.1760249240492585, 0.1722103613564595, 0.18298691820754676, 0.030252580658226225, 0.09815938459423801, 0.08579176888843654, 0.07696229157600543, 0.07364485805304744, 0.08941219952067825, 0.04771908290365956, 0.08136613581890906, 0.04237008687976651]}, "mutation_prompt": null}
