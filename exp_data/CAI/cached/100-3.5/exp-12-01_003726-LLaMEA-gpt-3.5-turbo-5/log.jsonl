{"id": "42275155-ccc5-4aad-a49c-5eb24f25c49b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30, de_pop_size=10, de_mut_prob=0.8, de_cross_prob=0.7):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.de_pop_size = de_pop_size\n        self.de_mut_prob = de_mut_prob\n        self.de_cross_prob = de_cross_prob\n\n    def __call__(self, func):\n        def fitness(individual):\n            return func(individual)\n\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        personal_best = swarm.copy()\n        global_best = swarm[np.argmin([fitness(x) for x in swarm])]\n\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                p = np.random.uniform(0, 1, self.dim)\n                v = np.random.uniform(-1, 1, self.dim)\n                swarm[i] = swarm[i] + p * (personal_best[i] - swarm[i]) + v * (global_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                if fitness(swarm[i]) < fitness(personal_best[i]):\n                    personal_best[i] = swarm[i]\n                    if fitness(swarm[i]) < fitness(global_best):\n                        global_best = swarm[i]\n\n            de_population = np.array([np.random.uniform(-5.0, 5.0, self.dim) for _ in range(self.de_pop_size)])\n            for j in range(self.de_pop_size):\n                idxs = np.random.choice(self.swarm_size, 3, replace=False)\n                mutant = swarm[idxs[0]] + self.de_mut_prob * (swarm[idxs[1]] - swarm[idxs[2]])\n                cross_points = np.random.rand(self.dim) < self.de_cross_prob\n                trial = de_population[j].copy()\n                trial[cross_points] = mutant[cross_points]\n                if fitness(trial) < fitness(de_population[j]):\n                    de_population[j] = trial\n\n            swarm = np.vstack((swarm, de_population))\n            swarm = swarm[np.argsort([fitness(x) for x in swarm])[:self.swarm_size]]\n\n        return global_best", "name": "HybridPSODE", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE).", "configspace": "", "generation": 0, "fitness": 0.18008084058819548, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.5922011426106217, 0.5505575041730275, 0.5948000560016249, 0.4719563567934887, 0.4950111028095342, 0.47004489711658093, 0.5479693310500341, 0.5220989489571837, 0.5457243192010836, 0.30548022419256726, 0.29442645445333304, 0.15153120386224728, 0.2141394882549339, 0.27613898058678754, 0.27535363346769315, 0.18691611892894722, 0.24243189204777815, 0.19125553044137278, 0.09088769803588348, 0.10981342415607942, 0.09466050144598159, 0.11755191222692296, 0.10245093193358612, 0.10342806103510016, 0.12592904666746907, 0.12013296222993086, 0.086399373283507, 0.07089545891022553, 0.07393292387100481, 0.08146258994413125, 0.11160501609640128, 0.0774518791502884, 0.07108783565561405, 0.0731921977625083, 0.07708980179688152, 0.0856079300216519, 0.5703230684833119, 0.2984721445859946, 0.29996241725503847, 0.3002022499569461, 0.27368016421031627, 0.27894919861915524, 0.2520917573479484, 0.40304996612784827, 0.34521180551015196, 0.13172008901616006, 0.15334187000479793, 0.12269729781521255, 0.16035936570558496, 0.15050808263279014, 0.21410843704904925, 0.1598656428122085, 0.12569031571096423, 0.13338241629930092, 0.29796344724379065, 0.19461860354621863, 0.18284161526872034, 0.25585152629285535, 0.4975488441023004, 0.24245327084002843, 0.17736051639407446, 0.2529251381706382, 0.19452638460157845, 0.2517416373580984, 0.11606000064375244, 0.102037902665567, 0.12261983376940011, 0.09266646300611026, 0.16183797492230156, 0.13145818513321628, 0.25116329991236064, 0.11646279437310691, 0.143879785133873, 0.12270147041425006, 0.11426869575347487, 0.11436912414353573, 0.10714443395462125, 0.11670811107112367, 0.2073869815317837, 0.1431534913055006, 0.0832638185204736, 9.999999999998899e-05, 9.999999999998899e-05, 0.0075925988549490064, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005978485292552627, 9.999999999998899e-05, 9.999999999998899e-05, 0.01988916619552694, 0.053161397071794125, 0.034029347073978866, 0.054537303292359174, 0.05239191694489054, 0.050925516026279594, 0.025862330379621712, 0.07042158064261239, 0.05917861718624462, 0.04955125414859163, 0.05077562957415627, 0.019323172958615076, 0.0383361883603518, 0.05122731958059645, 0.04921227936647132, 0.052859289608371496, 0.038261666550669315, 0.030606816301511408, 0.03208989474568558, 0.08728816437510034, 0.08057552333076712, 0.09701688011669518, 0.15185754939579854, 0.08378280399012039, 0.06280192195526046, 0.08436990048165738, 0.10788885537713777, 0.07791558477698235, 0.3860577226154057, 0.4037187594095425, 0.39854974489853756, 0.3852918447280176, 0.38856868015525015, 0.3978487196111137, 0.4648579895279624, 0.39264889361525024, 0.41832864063551833, 0.112622249732385, 0.09082233529897787, 0.07638881354756544, 0.07245569890444115, 0.08482364783434804, 0.10284459999603934, 0.09585945302544019, 0.08125905818460544, 0.08473538636626565, 0.135163215121895, 0.12442157928378073, 0.14274676589790902, 0.16708428717893153, 0.14487542815872545, 0.12749639831983717, 0.11088055745393266, 0.12748069451008637, 0.11528386778905753, 0.24432151820704018, 0.2421791236239037, 0.2600059359015996, 0.27337549465344935, 0.31840860877594357, 0.2992886376314814, 0.3085009509960658, 0.2513959581945111, 0.1832645865779482, 0.18471842590303977, 0.19687410466364674, 0.21058927623252865, 0.21322134429505946, 0.1556795416100858, 0.20346992372368478, 0.20905295089158094, 0.19790655082129338, 0.2054277632678737, 0.21245846377262856, 0.19643612214651796, 0.20277660518560736, 0.2081905944668112, 0.19092869153233705, 0.20561066533430894, 0.1777987109775706, 0.18192452054779717, 0.2043852887406229, 0.1675441770937236, 0.17278173949493247, 0.16896987965200938, 0.17516226837091597, 0.17962082523982625, 0.1733405303136637, 0.18442303361762002, 0.16934386823051906, 0.16698367802465452, 0.1776175196842973, 0.1699594522113408, 0.24971572253770213, 0.36271514477684685, 0.18575859122252036, 0.26940526286347444, 0.2693359996338438, 0.26436739223473393, 0.1940795467059243, 0.318911582122808, 0.17935037432437895, 0.2736750062415676, 0.14840297400173874, 0.19197549506902345, 0.1869292461670099, 0.21848661803603386, 0.20095961474830049, 0.17492169637542498, 0.16416018404269128, 0.17388290497364944, 0.16687697909066446, 0.19419982725643303, 0.17808324045991009, 0.16118961444952296, 0.19858777635913838, 0.1704021075420793, 0.18203200388492646, 0.06334888044727816, 0.07860229629176996, 0.0841921553072219, 0.08970943739202941, 0.08342510042239315, 0.08541733852240652, 0.06446464709593624, 0.0755990066319111, 0.0720707518300755]}, "mutation_prompt": null}
{"id": "6ff030f9-e15d-43ed-bec1-8aeec9225d8d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30, de_pop_size=10, de_mut_prob=0.8, de_cross_prob=0.7):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.de_pop_size = de_pop_size\n        self.de_mut_prob = de_mut_prob\n        self.de_cross_prob = de_cross_prob\n\n    def __call__(self, func):\n        def fitness(individual):\n            return func(individual)\n\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        personal_best = swarm.copy()\n        global_best = swarm[np.argmin([fitness(x) for x in swarm])]\n\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                p = np.random.uniform(0, 1, self.dim)\n                v = np.random.uniform(-1, 1, self.dim)\n                swarm[i] = swarm[i] + p * (personal_best[i] - swarm[i]) + v * (global_best - swarm[i])\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                if fitness(swarm[i]) < fitness(personal_best[i]):\n                    personal_best[i] = swarm[i]\n                    if fitness(swarm[i]) < fitness(global_best):\n                        global_best = swarm[i]\n\n            de_population = np.array([np.random.uniform(-5.0, 5.0, self.dim) for _ in range(self.de_pop_size)])\n            for j in range(self.de_pop_size):\n                idxs = np.random.choice(self.swarm_size, 3, replace=False)\n                mutant = swarm[idxs[0]] + self.de_mut_prob * (swarm[idxs[1]] - swarm[idxs[2]])\n                cross_points = np.random.rand(self.dim) < self.de_cross_prob\n                trial = de_population[j].copy()\n                trial[cross_points] = mutant[cross_points]\n                if fitness(trial) < fitness(de_population[j]):\n                    de_population[j] = trial\n\n            swarm = np.vstack((swarm, de_population))\n            swarm = swarm[np.argsort([fitness(x) for x in swarm])[:self.swarm_size]]\n\n        return global_best", "name": "HybridPSODE", "description": "A novel hybrid optimization algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE).", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "42275155-ccc5-4aad-a49c-5eb24f25c49b", "metadata": {"aucs": [0.5922011426106217, 0.5505575041730275, 0.5948000560016249, 0.4719563567934887, 0.4950111028095342, 0.47004489711658093, 0.5479693310500341, 0.5220989489571837, 0.5457243192010836, 0.30548022419256726, 0.29442645445333304, 0.15153120386224728, 0.2141394882549339, 0.27613898058678754, 0.27535363346769315, 0.18691611892894722, 0.24243189204777815, 0.19125553044137278, 0.09088769803588348, 0.10981342415607942, 0.09466050144598159, 0.11755191222692296, 0.10245093193358612, 0.10342806103510016, 0.12592904666746907, 0.12013296222993086, 0.086399373283507, 0.07089545891022553, 0.07393292387100481, 0.08146258994413125, 0.11160501609640128, 0.0774518791502884, 0.07108783565561405, 0.0731921977625083, 0.07708980179688152, 0.0856079300216519, 0.5703230684833119, 0.2984721445859946, 0.29996241725503847, 0.3002022499569461, 0.27368016421031627, 0.27894919861915524, 0.2520917573479484, 0.40304996612784827, 0.34521180551015196, 0.13172008901616006, 0.15334187000479793, 0.12269729781521255, 0.16035936570558496, 0.15050808263279014, 0.21410843704904925, 0.1598656428122085, 0.12569031571096423, 0.13338241629930092, 0.29796344724379065, 0.19461860354621863, 0.18284161526872034, 0.25585152629285535, 0.4975488441023004, 0.24245327084002843, 0.17736051639407446, 0.2529251381706382, 0.19452638460157845, 0.2517416373580984, 0.11606000064375244, 0.102037902665567, 0.12261983376940011, 0.09266646300611026, 0.16183797492230156, 0.13145818513321628, 0.25116329991236064, 0.11646279437310691, 0.143879785133873, 0.12270147041425006, 0.11426869575347487, 0.11436912414353573, 0.10714443395462125, 0.11670811107112367, 0.2073869815317837, 0.1431534913055006, 0.0832638185204736, 9.999999999998899e-05, 9.999999999998899e-05, 0.0075925988549490064, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005978485292552627, 9.999999999998899e-05, 9.999999999998899e-05, 0.01988916619552694, 0.053161397071794125, 0.034029347073978866, 0.054537303292359174, 0.05239191694489054, 0.050925516026279594, 0.025862330379621712, 0.07042158064261239, 0.05917861718624462, 0.04955125414859163, 0.05077562957415627, 0.019323172958615076, 0.0383361883603518, 0.05122731958059645, 0.04921227936647132, 0.052859289608371496, 0.038261666550669315, 0.030606816301511408, 0.03208989474568558, 0.08728816437510034, 0.08057552333076712, 0.09701688011669518, 0.15185754939579854, 0.08378280399012039, 0.06280192195526046, 0.08436990048165738, 0.10788885537713777, 0.07791558477698235, 0.3860577226154057, 0.4037187594095425, 0.39854974489853756, 0.3852918447280176, 0.38856868015525015, 0.3978487196111137, 0.4648579895279624, 0.39264889361525024, 0.41832864063551833, 0.112622249732385, 0.09082233529897787, 0.07638881354756544, 0.07245569890444115, 0.08482364783434804, 0.10284459999603934, 0.09585945302544019, 0.08125905818460544, 0.08473538636626565, 0.135163215121895, 0.12442157928378073, 0.14274676589790902, 0.16708428717893153, 0.14487542815872545, 0.12749639831983717, 0.11088055745393266, 0.12748069451008637, 0.11528386778905753, 0.24432151820704018, 0.2421791236239037, 0.2600059359015996, 0.27337549465344935, 0.31840860877594357, 0.2992886376314814, 0.3085009509960658, 0.2513959581945111, 0.1832645865779482, 0.18471842590303977, 0.19687410466364674, 0.21058927623252865, 0.21322134429505946, 0.1556795416100858, 0.20346992372368478, 0.20905295089158094, 0.19790655082129338, 0.2054277632678737, 0.21245846377262856, 0.19643612214651796, 0.20277660518560736, 0.2081905944668112, 0.19092869153233705, 0.20561066533430894, 0.1777987109775706, 0.18192452054779717, 0.2043852887406229, 0.1675441770937236, 0.17278173949493247, 0.16896987965200938, 0.17516226837091597, 0.17962082523982625, 0.1733405303136637, 0.18442303361762002, 0.16934386823051906, 0.16698367802465452, 0.1776175196842973, 0.1699594522113408, 0.24971572253770213, 0.36271514477684685, 0.18575859122252036, 0.26940526286347444, 0.2693359996338438, 0.26436739223473393, 0.1940795467059243, 0.318911582122808, 0.17935037432437895, 0.2736750062415676, 0.14840297400173874, 0.19197549506902345, 0.1869292461670099, 0.21848661803603386, 0.20095961474830049, 0.17492169637542498, 0.16416018404269128, 0.17388290497364944, 0.16687697909066446, 0.19419982725643303, 0.17808324045991009, 0.16118961444952296, 0.19858777635913838, 0.1704021075420793, 0.18203200388492646, 0.06334888044727816, 0.07860229629176996, 0.0841921553072219, 0.08970943739202941, 0.08342510042239315, 0.08541733852240652, 0.06446464709593624, 0.0755990066319111, 0.0720707518300755]}, "mutation_prompt": null}
