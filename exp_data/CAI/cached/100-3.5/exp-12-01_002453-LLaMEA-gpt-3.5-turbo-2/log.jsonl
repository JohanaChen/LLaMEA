{"id": "b4416306-19ce-4fa1-ba1c-c7b634ab4fe4", "solution": "import numpy as np\n\nclass HybridPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = budget // self.num_particles\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def local_search(current_position, current_value):\n            epsilon = 0.01\n            for _ in range(10):\n                new_position = current_position + epsilon * np.random.uniform(-1, 1, size=self.dim)\n                new_position = np.clip(new_position, self.lower_bound, self.upper_bound)\n                new_value = func(new_position)\n                if new_value < current_value:\n                    current_position = new_position\n                    current_value = new_value\n            return current_position, current_value\n\n        best_global_position = np.random.uniform(self.lower_bound, self.upper_bound, size=self.dim)\n        best_global_value = func(best_global_position)\n\n        for _ in range(self.max_iter):\n            for _ in range(self.num_particles):\n                particle_position = np.random.uniform(self.lower_bound, self.upper_bound, size=self.dim)\n                particle_value = func(particle_position)\n\n                if particle_value < best_global_value:\n                    best_global_position = particle_position\n                    best_global_value = particle_value\n\n                particle_position, particle_value = local_search(particle_position, particle_value)\n\n        return best_global_position", "name": "HybridPSO", "description": "Novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Local Search to efficiently explore and exploit the search space for black box optimization.", "configspace": "", "generation": 0, "fitness": 0.07036224514786141, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.12666272018964586, 0.1283199287983553, 0.16802646306440272, 0.14378435033005132, 0.1219539599755799, 0.11993037353680414, 0.14467305247282602, 0.12224411454530493, 0.1378478567034015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024446791038010063, 0.040115397461693125, 0.030882744188542866, 0.034980512706834443, 0.028724341162849276, 0.0287878246640636, 0.03114701378365936, 0.040295777648052145, 0.04071923201787553, 0.010226507579691124, 0.03106608883868378, 0.020879231829243117, 0.017963075637722037, 0.012243874030594792, 0.02148393841747076, 0.005310686012230503, 0.020201573520033933, 0.021725509636972506, 0.06486459038751013, 0.05878339645536801, 0.052801255031192484, 0.06789070358453297, 0.058988254257449246, 0.05478252974100484, 0.07571835171654695, 0.058579266213918846, 0.055725908098232635, 0.0372040237625515, 0.053105028431401524, 0.03881057477083072, 0.04279173319469942, 0.06198430682239264, 0.01681528836024515, 0.09582865509003824, 0.02665205056543507, 0.049113748982454686, 0.06364048034961811, 0.06442515975656882, 0.08952265442124496, 0.07197181512821338, 0.06764915640978075, 0.06227211948948319, 0.07951018418232947, 0.06735977360291001, 0.07437891507044625, 9.999999999998899e-05, 0.006022747068450518, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0370653195283529, 0.09604469184648479, 0.02689238245930703, 0.03243073180620848, 0.03790273463773208, 0.08731114924223893, 0.040993328864731504, 0.05087236482287294, 0.09929894297594788, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21662461938791433, 0.16323150035750367, 0.18173472077598007, 0.1593020705220095, 0.17082576406959737, 0.1404957568206351, 0.15088988057226893, 0.14939492743508875, 0.1450274331546838, 0.03054317137071416, 0.026523117480628966, 0.03630468429588252, 0.023309922229407642, 0.025713078665235645, 0.01884381279574121, 0.028016365716886815, 0.021495420325355896, 0.022751311726319945, 0.10119079706354983, 0.11404502939355876, 0.11532606440910309, 0.10357095972795882, 0.15056565972527547, 0.1181772528965448, 0.10824603244175501, 0.10887452109182505, 0.10431235575881914, 0.13698312741615337, 0.12771132711788435, 0.148812595194867, 0.1551562319184393, 0.14704936434089044, 0.1526777964851017, 0.12948693910107267, 0.15271848766310236, 0.14711518849985072, 0.09008965537549463, 0.0923046267784885, 0.09542480576662515, 0.11173001363745627, 0.10653533701387363, 0.08818152180647576, 0.09522715549239147, 0.09878770479683485, 0.09102109762756505, 0.15105557582487816, 0.16561195085731428, 0.15391565337559676, 0.15964207269300135, 0.15611327603977532, 0.15422351522064015, 0.1498715159146694, 0.14756624261395734, 0.1829287157884758, 0.028868627468340513, 0.12083135382327781, 0.11814725419415828, 0.12444161510363261, 0.002245478177702487, 0.13604912397281133, 0.088528918200252, 0.11135165659521373, 0.11267572820846783, 0.09885685931655952, 0.11726520194294188, 0.11105596908309212, 0.12787692439769582, 0.10720239971578371, 0.11349358921809238, 0.11512390071615719, 0.13606555787857377, 0.13883874710028998, 0.08810738013462727, 0.07930396080528512, 0.09888837678289875, 0.10644804095879534, 0.09479673057247351, 0.08586329812881377, 0.16355174039767995, 0.1036957113292436, 0.08911301468395783, 0.1963681548066244, 0.2009587665660737, 0.18848499749005077, 0.19903197154710328, 0.1918182424800352, 0.18235148993478445, 0.19188435336528986, 0.19895805059782046, 0.2050006341096028, 0.0652855147528757, 0.040283306436729616, 0.049815738680988764, 0.06243206503635612, 0.05124315763718279, 0.04477647462225198, 0.06607507909673227, 0.06343317691946448, 0.052131637460840485]}, "mutation_prompt": null}
{"id": "2be79b4d-4445-4990-889d-c855d13cd49b", "solution": "import numpy as np\n\nclass HybridPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = budget // self.num_particles\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def local_search(current_position, current_value):\n            epsilon = 0.01\n            for _ in range(10):\n                new_position = current_position + epsilon * np.random.uniform(-1, 1, size=self.dim)\n                new_position = np.clip(new_position, self.lower_bound, self.upper_bound)\n                new_value = func(new_position)\n                if new_value < current_value:\n                    current_position = new_position\n                    current_value = new_value\n            return current_position, current_value\n\n        best_global_position = np.random.uniform(self.lower_bound, self.upper_bound, size=self.dim)\n        best_global_value = func(best_global_position)\n\n        for _ in range(self.max_iter):\n            for _ in range(self.num_particles):\n                particle_position = np.random.uniform(self.lower_bound, self.upper_bound, size=self.dim)\n                particle_value = func(particle_position)\n\n                if particle_value < best_global_value:\n                    best_global_position = particle_position\n                    best_global_value = particle_value\n\n                particle_position, particle_value = local_search(particle_position, particle_value)\n\n        return best_global_position", "name": "HybridPSO", "description": "Novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Local Search to efficiently explore and exploit the search space for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b4416306-19ce-4fa1-ba1c-c7b634ab4fe4", "metadata": {"aucs": [0.12666272018964586, 0.1283199287983553, 0.16802646306440272, 0.14378435033005132, 0.1219539599755799, 0.11993037353680414, 0.14467305247282602, 0.12224411454530493, 0.1378478567034015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024446791038010063, 0.040115397461693125, 0.030882744188542866, 0.034980512706834443, 0.028724341162849276, 0.0287878246640636, 0.03114701378365936, 0.040295777648052145, 0.04071923201787553, 0.010226507579691124, 0.03106608883868378, 0.020879231829243117, 0.017963075637722037, 0.012243874030594792, 0.02148393841747076, 0.005310686012230503, 0.020201573520033933, 0.021725509636972506, 0.06486459038751013, 0.05878339645536801, 0.052801255031192484, 0.06789070358453297, 0.058988254257449246, 0.05478252974100484, 0.07571835171654695, 0.058579266213918846, 0.055725908098232635, 0.0372040237625515, 0.053105028431401524, 0.03881057477083072, 0.04279173319469942, 0.06198430682239264, 0.01681528836024515, 0.09582865509003824, 0.02665205056543507, 0.049113748982454686, 0.06364048034961811, 0.06442515975656882, 0.08952265442124496, 0.07197181512821338, 0.06764915640978075, 0.06227211948948319, 0.07951018418232947, 0.06735977360291001, 0.07437891507044625, 9.999999999998899e-05, 0.006022747068450518, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0370653195283529, 0.09604469184648479, 0.02689238245930703, 0.03243073180620848, 0.03790273463773208, 0.08731114924223893, 0.040993328864731504, 0.05087236482287294, 0.09929894297594788, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21662461938791433, 0.16323150035750367, 0.18173472077598007, 0.1593020705220095, 0.17082576406959737, 0.1404957568206351, 0.15088988057226893, 0.14939492743508875, 0.1450274331546838, 0.03054317137071416, 0.026523117480628966, 0.03630468429588252, 0.023309922229407642, 0.025713078665235645, 0.01884381279574121, 0.028016365716886815, 0.021495420325355896, 0.022751311726319945, 0.10119079706354983, 0.11404502939355876, 0.11532606440910309, 0.10357095972795882, 0.15056565972527547, 0.1181772528965448, 0.10824603244175501, 0.10887452109182505, 0.10431235575881914, 0.13698312741615337, 0.12771132711788435, 0.148812595194867, 0.1551562319184393, 0.14704936434089044, 0.1526777964851017, 0.12948693910107267, 0.15271848766310236, 0.14711518849985072, 0.09008965537549463, 0.0923046267784885, 0.09542480576662515, 0.11173001363745627, 0.10653533701387363, 0.08818152180647576, 0.09522715549239147, 0.09878770479683485, 0.09102109762756505, 0.15105557582487816, 0.16561195085731428, 0.15391565337559676, 0.15964207269300135, 0.15611327603977532, 0.15422351522064015, 0.1498715159146694, 0.14756624261395734, 0.1829287157884758, 0.028868627468340513, 0.12083135382327781, 0.11814725419415828, 0.12444161510363261, 0.002245478177702487, 0.13604912397281133, 0.088528918200252, 0.11135165659521373, 0.11267572820846783, 0.09885685931655952, 0.11726520194294188, 0.11105596908309212, 0.12787692439769582, 0.10720239971578371, 0.11349358921809238, 0.11512390071615719, 0.13606555787857377, 0.13883874710028998, 0.08810738013462727, 0.07930396080528512, 0.09888837678289875, 0.10644804095879534, 0.09479673057247351, 0.08586329812881377, 0.16355174039767995, 0.1036957113292436, 0.08911301468395783, 0.1963681548066244, 0.2009587665660737, 0.18848499749005077, 0.19903197154710328, 0.1918182424800352, 0.18235148993478445, 0.19188435336528986, 0.19895805059782046, 0.2050006341096028, 0.0652855147528757, 0.040283306436729616, 0.049815738680988764, 0.06243206503635612, 0.05124315763718279, 0.04477647462225198, 0.06607507909673227, 0.06343317691946448, 0.052131637460840485]}, "mutation_prompt": null}
