{"id": "dd8edfc4-1ac3-40c5-8a74-56bf9faf9fba", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.pitch_adjust_rate = pitch_adjust_rate\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n        def generate_new_harmony(memory):\n            new_harmony = []\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    new_harmony.append(np.random.uniform(-5.0, 5.0))\n                else:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_harmony.append(memory[idx, i])\n            return np.array(new_harmony)\n\n        def evaluate_harmony(harmony):\n            return func(harmony)\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_harmony = generate_new_harmony(harmony_memory)\n            if evaluate_harmony(new_harmony) < evaluate_harmony(harmony_memory[-1]):\n                harmony_memory[-1] = new_harmony\n                harmony_memory = harmony_memory[np.argsort([evaluate_harmony(h) for h in harmony_memory])]\n\n        best_solution = min(harmony_memory, key=evaluate_harmony)\n        return best_solution", "name": "HarmonySearch", "description": "Harmony Search Algorithm: A metaheuristic algorithm inspired by the musical improvisation process to search for optimal solutions in a multidimensional search space.", "configspace": "", "generation": 0, "fitness": 0.1296392495940495, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.321710151807995, 0.28960969060453745, 0.2937464413772466, 0.28470941889220724, 0.2947644106200823, 0.29730127416333074, 0.33088137364924464, 0.31827112631184995, 0.31969396559924357, 9.999999999998899e-05, 9.999999999998899e-05, 0.013002425205638102, 0.0036527012089442312, 9.999999999998899e-05, 0.015389520482214314, 0.004503059379407426, 0.042502682039299855, 9.999999999998899e-05, 0.11355469916733052, 0.1132372844635181, 0.1217027642420988, 0.12294518838520818, 0.13553655234819706, 0.12060336030747365, 0.10553384829633106, 0.11375538919876593, 0.12877929778160524, 0.11106251649539722, 0.10025391396526173, 0.1002220084307357, 0.1101725382620079, 0.12236467194764777, 0.10665324912532836, 0.10406282881947904, 0.10252416701286204, 0.10611236874759566, 0.15564395274912968, 0.16304935786569563, 0.1394216276232011, 0.16343083183262586, 0.1554868667578585, 0.15154445548387208, 0.1593704763650261, 0.16157881096917737, 0.1497361591008457, 0.12249595674534719, 0.10057393178495344, 0.13663663284981264, 0.1257949665852942, 0.14744690648217762, 0.11995577770175292, 0.13982553648755092, 0.10822212649114993, 0.13315524753507635, 0.18593687198245945, 0.17928987337732927, 0.156769626066934, 0.18151251983349004, 0.19068928645237815, 0.17641783490898777, 0.1427713124708747, 0.19344396070966563, 0.15915462348373444, 0.09199530729657457, 0.08954747177446021, 0.10019535435829419, 0.08752969372669117, 0.07996606872109402, 0.1098665112494226, 0.04509409506172524, 0.06719632532763975, 0.04156375792467404, 0.1107090445373149, 0.07728391573442006, 0.0567538349513832, 0.0844086460205894, 0.0671137973118906, 0.06237699707460309, 0.07673584261974575, 0.09573739635453293, 0.08541437967660948, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058631513545767455, 0.05097814436194059, 0.09277475630237986, 0.02457897907046791, 0.049393565420463026, 0.045712621399162656, 0.06142564858286492, 0.04147047721146446, 0.04435124970081161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02477150882700485, 0.029475622899561627, 0.03160239462204595, 0.006103982721783585, 0.05598580335480474, 0.02656499841241533, 0.030530199873925246, 0.054235241842347515, 0.03045777518263748, 0.3208589293937313, 0.29234417325765394, 0.2931225161653037, 0.2913433050047176, 0.27830193115946045, 0.26894995579545944, 0.29607301669278785, 0.2837347750818594, 0.29866194055932094, 0.07286055395771196, 0.06711032037214171, 0.07451659751409878, 0.062485836659426086, 0.08449576229623157, 0.058282834249832716, 0.06778975111594132, 0.07598831520968374, 0.06970948279665268, 0.1250981364055338, 0.11917848641998119, 0.14074918211456644, 0.1363846552011586, 0.13391325024567746, 0.11301605395948555, 0.1232226941676301, 0.10841059048065016, 0.15159010834505193, 0.237096158621649, 0.2106076908396829, 0.215419162254735, 0.21674281022736652, 0.19848588806799505, 0.20637913093769766, 0.21075554294666854, 0.21277338446316973, 0.19546353241228842, 0.14708378318335635, 0.14416013143037032, 0.15258785758117843, 0.13367219697628752, 0.1482741401864136, 0.14259113235849386, 0.15518162379639822, 0.13852296882687187, 0.1496685120900062, 0.19901678390281463, 0.16383189699557843, 0.18760339195119136, 0.21392290869120156, 0.17168775867037078, 0.15406174992719457, 0.1904223202011318, 0.16076372699491603, 0.18004947308082297, 0.1776139310997169, 0.17494534887383706, 0.17303858399554106, 0.18615171334754343, 0.1837611235768627, 0.17345031828471624, 0.21835303573100717, 0.22161233525767543, 0.17791328170801812, 0.1321668617686932, 0.24462920742915428, 0.25109065473794046, 0.2644818328198093, 0.18916855361484164, 0.27519733346495223, 0.24868847914432335, 0.25560558572851355, 0.15721257490834173, 0.20537024080508048, 0.19252186067896304, 0.23129303993953598, 0.15107091985958454, 0.13740789725454594, 0.17927188723371001, 0.18853703818058531, 0.2679789274714276, 0.16408358871479634, 0.1748175648956214, 0.1740232556646235, 0.18054267411552505, 0.17763145581639672, 0.19349912801068436, 0.1895035756432949, 0.1670669921679473, 0.17375275014651836, 0.17619846519979654, 0.055327620052252, 0.06079715604016456, 0.08144055588582955, 0.06337376757840552, 0.0679433137401646, 0.05604601197368597, 0.05975301065719174, 0.06549192003852511, 0.058330384732748985]}, "mutation_prompt": null}
{"id": "48c9a3ac-4915-44fb-8f32-ed47399a44f4", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.pitch_adjust_rate = pitch_adjust_rate\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n        def generate_new_harmony(memory):\n            new_harmony = []\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    new_harmony.append(np.random.uniform(-5.0, 5.0))\n                else:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_harmony.append(memory[idx, i])\n            return np.array(new_harmony)\n\n        def evaluate_harmony(harmony):\n            return func(harmony)\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_harmony = generate_new_harmony(harmony_memory)\n            if evaluate_harmony(new_harmony) < evaluate_harmony(harmony_memory[-1]):\n                harmony_memory[-1] = new_harmony\n                harmony_memory = harmony_memory[np.argsort([evaluate_harmony(h) for h in harmony_memory])]\n\n        best_solution = min(harmony_memory, key=evaluate_harmony)\n        return best_solution", "name": "HarmonySearch", "description": "Harmony Search Algorithm: A metaheuristic algorithm inspired by the musical improvisation process to search for optimal solutions in a multidimensional search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dd8edfc4-1ac3-40c5-8a74-56bf9faf9fba", "metadata": {"aucs": [0.321710151807995, 0.28960969060453745, 0.2937464413772466, 0.28470941889220724, 0.2947644106200823, 0.29730127416333074, 0.33088137364924464, 0.31827112631184995, 0.31969396559924357, 9.999999999998899e-05, 9.999999999998899e-05, 0.013002425205638102, 0.0036527012089442312, 9.999999999998899e-05, 0.015389520482214314, 0.004503059379407426, 0.042502682039299855, 9.999999999998899e-05, 0.11355469916733052, 0.1132372844635181, 0.1217027642420988, 0.12294518838520818, 0.13553655234819706, 0.12060336030747365, 0.10553384829633106, 0.11375538919876593, 0.12877929778160524, 0.11106251649539722, 0.10025391396526173, 0.1002220084307357, 0.1101725382620079, 0.12236467194764777, 0.10665324912532836, 0.10406282881947904, 0.10252416701286204, 0.10611236874759566, 0.15564395274912968, 0.16304935786569563, 0.1394216276232011, 0.16343083183262586, 0.1554868667578585, 0.15154445548387208, 0.1593704763650261, 0.16157881096917737, 0.1497361591008457, 0.12249595674534719, 0.10057393178495344, 0.13663663284981264, 0.1257949665852942, 0.14744690648217762, 0.11995577770175292, 0.13982553648755092, 0.10822212649114993, 0.13315524753507635, 0.18593687198245945, 0.17928987337732927, 0.156769626066934, 0.18151251983349004, 0.19068928645237815, 0.17641783490898777, 0.1427713124708747, 0.19344396070966563, 0.15915462348373444, 0.09199530729657457, 0.08954747177446021, 0.10019535435829419, 0.08752969372669117, 0.07996606872109402, 0.1098665112494226, 0.04509409506172524, 0.06719632532763975, 0.04156375792467404, 0.1107090445373149, 0.07728391573442006, 0.0567538349513832, 0.0844086460205894, 0.0671137973118906, 0.06237699707460309, 0.07673584261974575, 0.09573739635453293, 0.08541437967660948, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058631513545767455, 0.05097814436194059, 0.09277475630237986, 0.02457897907046791, 0.049393565420463026, 0.045712621399162656, 0.06142564858286492, 0.04147047721146446, 0.04435124970081161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02477150882700485, 0.029475622899561627, 0.03160239462204595, 0.006103982721783585, 0.05598580335480474, 0.02656499841241533, 0.030530199873925246, 0.054235241842347515, 0.03045777518263748, 0.3208589293937313, 0.29234417325765394, 0.2931225161653037, 0.2913433050047176, 0.27830193115946045, 0.26894995579545944, 0.29607301669278785, 0.2837347750818594, 0.29866194055932094, 0.07286055395771196, 0.06711032037214171, 0.07451659751409878, 0.062485836659426086, 0.08449576229623157, 0.058282834249832716, 0.06778975111594132, 0.07598831520968374, 0.06970948279665268, 0.1250981364055338, 0.11917848641998119, 0.14074918211456644, 0.1363846552011586, 0.13391325024567746, 0.11301605395948555, 0.1232226941676301, 0.10841059048065016, 0.15159010834505193, 0.237096158621649, 0.2106076908396829, 0.215419162254735, 0.21674281022736652, 0.19848588806799505, 0.20637913093769766, 0.21075554294666854, 0.21277338446316973, 0.19546353241228842, 0.14708378318335635, 0.14416013143037032, 0.15258785758117843, 0.13367219697628752, 0.1482741401864136, 0.14259113235849386, 0.15518162379639822, 0.13852296882687187, 0.1496685120900062, 0.19901678390281463, 0.16383189699557843, 0.18760339195119136, 0.21392290869120156, 0.17168775867037078, 0.15406174992719457, 0.1904223202011318, 0.16076372699491603, 0.18004947308082297, 0.1776139310997169, 0.17494534887383706, 0.17303858399554106, 0.18615171334754343, 0.1837611235768627, 0.17345031828471624, 0.21835303573100717, 0.22161233525767543, 0.17791328170801812, 0.1321668617686932, 0.24462920742915428, 0.25109065473794046, 0.2644818328198093, 0.18916855361484164, 0.27519733346495223, 0.24868847914432335, 0.25560558572851355, 0.15721257490834173, 0.20537024080508048, 0.19252186067896304, 0.23129303993953598, 0.15107091985958454, 0.13740789725454594, 0.17927188723371001, 0.18853703818058531, 0.2679789274714276, 0.16408358871479634, 0.1748175648956214, 0.1740232556646235, 0.18054267411552505, 0.17763145581639672, 0.19349912801068436, 0.1895035756432949, 0.1670669921679473, 0.17375275014651836, 0.17619846519979654, 0.055327620052252, 0.06079715604016456, 0.08144055588582955, 0.06337376757840552, 0.0679433137401646, 0.05604601197368597, 0.05975301065719174, 0.06549192003852511, 0.058330384732748985]}, "mutation_prompt": null}
