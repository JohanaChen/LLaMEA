{"id": "ea163168-78ad-4845-aab0-2e61b8a128c7", "solution": "import numpy as np\n\nclass ADEOC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_pop = 10  # population size\n        self.cr = 0.9  # crossover rate\n        self.f = 0.8  # differential weight\n        self.bounds = (-5.0, 5.0)\n    \n    def __call__(self, func):\n        def mutate(x_r1, x_r2, x_r3):\n            return x_r1 + self.f * (x_r2 - x_r3)\n        \n        def clip(x):\n            return np.clip(x, self.bounds[0], self.bounds[1])\n        \n        def orthogonal_crossover(x, v):\n            j_rand = np.random.randint(0, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < self.cr or j == j_rand:\n                    x[j] = v[j]\n            return x\n        \n        best_solution = np.random.uniform(*self.bounds, size=self.dim)\n        best_fitness = func(best_solution)\n        \n        population = np.random.uniform(*self.bounds, size=(self.n_pop, self.dim))\n        \n        for _ in range(self.budget):\n            for i in range(self.n_pop):\n                indices = np.random.choice(range(self.n_pop), size=3, replace=False)\n                x_r1, x_r2, x_r3 = population[indices]\n                \n                trial_solution = clip(mutate(population[i], x_r1, x_r2))\n                trial_solution = orthogonal_crossover(population[i], trial_solution)\n                \n                trial_fitness = func(trial_solution)\n                if trial_fitness < best_fitness:\n                    best_solution = np.copy(trial_solution)\n                    best_fitness = trial_fitness\n            \n            population = np.vstack((best_solution, population[1:]))\n        \n        return best_solution", "name": "ADEOC", "description": "An Adaptive Differential Evolution Algorithm with Orthogonal Crossover (ADEOC) that dynamically adjusts its strategy parameters and incorporates orthogonal crossover to efficiently explore and exploit the search space for black box optimization tasks.", "configspace": "", "generation": 0, "fitness": 0.13163865563510668, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.18503024385314415, 0.2118313283454819, 0.17751868358519418, 0.21591271024208436, 0.20459468104627454, 0.19919257132436585, 0.18617180344553885, 0.1871424858206202, 0.25295445951856754, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.070499896992813, 0.05375494263133773, 0.06812079904669277, 0.050113109966120284, 0.043411759684343854, 0.05249786408859691, 0.04882585325814892, 0.06329870360342704, 0.07974060860427568, 0.03799422864281099, 0.054712415181868757, 0.061002350770547165, 0.0809997318704413, 0.02949010288717202, 0.033477197030874595, 0.037236847045951094, 0.05662859612194315, 0.04367419658844207, 0.9676883055415635, 0.9782284115535175, 0.9941596204283579, 0.9789430239808511, 0.9718766790844182, 0.967760233624513, 0.9669001842842966, 0.9692067014490519, 0.971779964903841, 0.09567947547607258, 0.12020728991687846, 0.10708001740804263, 0.09748640251213436, 0.10691537107298188, 0.10515829326422954, 0.0904033030289878, 0.10070243223046926, 0.11869081551832206, 0.16595543640081212, 0.1334805821712174, 0.11803662291857875, 0.10773100736564245, 0.12054241363355245, 0.1324909219962177, 0.11930330193164518, 0.11310220716973962, 0.13669747746636418, 0.0050672058110922125, 0.017805111200765222, 0.001882491972753586, 0.038751679530617866, 0.013222087722191689, 0.002782516692898418, 0.045741292779684195, 0.020240826123685163, 9.999999999998899e-05, 0.02103755196509738, 0.007873049578281277, 0.04505867764950999, 0.004880159023912478, 0.010463196346433001, 0.013032512631209414, 0.020158811210703398, 0.030296202430067365, 0.007993054098985541, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043111294534526445, 0.023428360085751998, 0.045918675961848066, 0.057074349043461425, 0.038155854722618954, 0.0975489680936047, 0.032088900478408844, 0.01861321861543841, 0.05066457157344417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01661056445101272, 0.00692962765932903, 0.0011731506204938347, 9.999999999998899e-05, 0.0009840685435479335, 0.004905081057528848, 0.004168168814027373, 0.043737025567122334, 9.999999999998899e-05, 0.1958799859756637, 0.21721625208153506, 0.22312751777391093, 0.22649898553853998, 0.19035922684997564, 0.21867468745686525, 0.22866388839249874, 0.21477426680755063, 0.2081567682339206, 0.055680731674584094, 0.05106664321592902, 0.04751494390059108, 0.04595293133682665, 0.056745074264174966, 0.04598789874072806, 0.052091435036363376, 0.03461332707881337, 0.04975712215911465, 0.16864749325403094, 0.1302092340970592, 0.14716814378308662, 0.15640471594090344, 0.16015575616100064, 0.13176081667009365, 0.13108590798035324, 0.14580860959488184, 0.1384835051670572, 0.18833054891274414, 0.14837542728552267, 0.16317917892960354, 0.15901768517483528, 0.14946542812372776, 0.1654172524070786, 0.17726078050428828, 0.17095858136596798, 0.18107970734368417, 0.14013085199342168, 0.11009168720563178, 0.09359093484034298, 0.11901911555719269, 0.12311838167063038, 0.1218891410681816, 0.12036534537943444, 0.12388366654160732, 0.09910004841225195, 0.15046925899256236, 0.14952188266637623, 0.1585013642126123, 0.16331477342110923, 0.13584353778229052, 0.13722006435766598, 0.15259584704003248, 0.15534529138571596, 0.17095294298679908, 0.16859819424156886, 0.1623291121755721, 0.14671333132909747, 0.1471702792509917, 0.1444991774431752, 0.14184066890693392, 0.1496022067493712, 0.1452264219919207, 0.1624818156754967, 0.1666822468769924, 0.15677789521987617, 0.18251019222871312, 0.16538158015484572, 0.13545973480270312, 0.15053403204983917, 0.15172362972552655, 0.20465816530741177, 0.15135799019090768, 0.16436768831430404, 0.14260742409475902, 0.1345961832033461, 0.1390991124813512, 0.14909286828468937, 0.13966077146908973, 0.1711619618266197, 0.18950875236146014, 0.18057629296988276, 0.18312217760113547, 0.1750649393862006, 0.20202624148399917, 0.2168292326275233, 0.19777937844634486, 0.1814314524523869, 0.17034394169039135, 0.1849081927902838, 0.18552749180544037, 0.04880507965931924, 0.04837053118001966, 0.03674957558638248, 0.04906156267443018, 0.05558586024408918, 0.049049979313401715, 0.058484782200608376, 0.044892739251156444, 0.06474116061669044]}, "mutation_prompt": null}
{"id": "bc969840-2f91-4a58-bdc9-7953a636f58b", "solution": "import numpy as np\n\nclass ADEOC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_pop = 10  # population size\n        self.cr = 0.9  # crossover rate\n        self.f = 0.8  # differential weight\n        self.bounds = (-5.0, 5.0)\n    \n    def __call__(self, func):\n        def mutate(x_r1, x_r2, x_r3):\n            return x_r1 + self.f * (x_r2 - x_r3)\n        \n        def clip(x):\n            return np.clip(x, self.bounds[0], self.bounds[1])\n        \n        def orthogonal_crossover(x, v):\n            j_rand = np.random.randint(0, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < self.cr or j == j_rand:\n                    x[j] = v[j]\n            return x\n        \n        best_solution = np.random.uniform(*self.bounds, size=self.dim)\n        best_fitness = func(best_solution)\n        \n        population = np.random.uniform(*self.bounds, size=(self.n_pop, self.dim))\n        \n        for _ in range(self.budget):\n            for i in range(self.n_pop):\n                indices = np.random.choice(range(self.n_pop), size=3, replace=False)\n                x_r1, x_r2, x_r3 = population[indices]\n                \n                trial_solution = clip(mutate(population[i], x_r1, x_r2))\n                trial_solution = orthogonal_crossover(population[i], trial_solution)\n                \n                trial_fitness = func(trial_solution)\n                if trial_fitness < best_fitness:\n                    best_solution = np.copy(trial_solution)\n                    best_fitness = trial_fitness\n            \n            population = np.vstack((best_solution, population[1:]))\n        \n        return best_solution", "name": "ADEOC", "description": "An Adaptive Differential Evolution Algorithm with Orthogonal Crossover (ADEOC) that dynamically adjusts its strategy parameters and incorporates orthogonal crossover to efficiently explore and exploit the search space for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea163168-78ad-4845-aab0-2e61b8a128c7", "metadata": {"aucs": [0.18503024385314415, 0.2118313283454819, 0.17751868358519418, 0.21591271024208436, 0.20459468104627454, 0.19919257132436585, 0.18617180344553885, 0.1871424858206202, 0.25295445951856754, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.070499896992813, 0.05375494263133773, 0.06812079904669277, 0.050113109966120284, 0.043411759684343854, 0.05249786408859691, 0.04882585325814892, 0.06329870360342704, 0.07974060860427568, 0.03799422864281099, 0.054712415181868757, 0.061002350770547165, 0.0809997318704413, 0.02949010288717202, 0.033477197030874595, 0.037236847045951094, 0.05662859612194315, 0.04367419658844207, 0.9676883055415635, 0.9782284115535175, 0.9941596204283579, 0.9789430239808511, 0.9718766790844182, 0.967760233624513, 0.9669001842842966, 0.9692067014490519, 0.971779964903841, 0.09567947547607258, 0.12020728991687846, 0.10708001740804263, 0.09748640251213436, 0.10691537107298188, 0.10515829326422954, 0.0904033030289878, 0.10070243223046926, 0.11869081551832206, 0.16595543640081212, 0.1334805821712174, 0.11803662291857875, 0.10773100736564245, 0.12054241363355245, 0.1324909219962177, 0.11930330193164518, 0.11310220716973962, 0.13669747746636418, 0.0050672058110922125, 0.017805111200765222, 0.001882491972753586, 0.038751679530617866, 0.013222087722191689, 0.002782516692898418, 0.045741292779684195, 0.020240826123685163, 9.999999999998899e-05, 0.02103755196509738, 0.007873049578281277, 0.04505867764950999, 0.004880159023912478, 0.010463196346433001, 0.013032512631209414, 0.020158811210703398, 0.030296202430067365, 0.007993054098985541, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043111294534526445, 0.023428360085751998, 0.045918675961848066, 0.057074349043461425, 0.038155854722618954, 0.0975489680936047, 0.032088900478408844, 0.01861321861543841, 0.05066457157344417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01661056445101272, 0.00692962765932903, 0.0011731506204938347, 9.999999999998899e-05, 0.0009840685435479335, 0.004905081057528848, 0.004168168814027373, 0.043737025567122334, 9.999999999998899e-05, 0.1958799859756637, 0.21721625208153506, 0.22312751777391093, 0.22649898553853998, 0.19035922684997564, 0.21867468745686525, 0.22866388839249874, 0.21477426680755063, 0.2081567682339206, 0.055680731674584094, 0.05106664321592902, 0.04751494390059108, 0.04595293133682665, 0.056745074264174966, 0.04598789874072806, 0.052091435036363376, 0.03461332707881337, 0.04975712215911465, 0.16864749325403094, 0.1302092340970592, 0.14716814378308662, 0.15640471594090344, 0.16015575616100064, 0.13176081667009365, 0.13108590798035324, 0.14580860959488184, 0.1384835051670572, 0.18833054891274414, 0.14837542728552267, 0.16317917892960354, 0.15901768517483528, 0.14946542812372776, 0.1654172524070786, 0.17726078050428828, 0.17095858136596798, 0.18107970734368417, 0.14013085199342168, 0.11009168720563178, 0.09359093484034298, 0.11901911555719269, 0.12311838167063038, 0.1218891410681816, 0.12036534537943444, 0.12388366654160732, 0.09910004841225195, 0.15046925899256236, 0.14952188266637623, 0.1585013642126123, 0.16331477342110923, 0.13584353778229052, 0.13722006435766598, 0.15259584704003248, 0.15534529138571596, 0.17095294298679908, 0.16859819424156886, 0.1623291121755721, 0.14671333132909747, 0.1471702792509917, 0.1444991774431752, 0.14184066890693392, 0.1496022067493712, 0.1452264219919207, 0.1624818156754967, 0.1666822468769924, 0.15677789521987617, 0.18251019222871312, 0.16538158015484572, 0.13545973480270312, 0.15053403204983917, 0.15172362972552655, 0.20465816530741177, 0.15135799019090768, 0.16436768831430404, 0.14260742409475902, 0.1345961832033461, 0.1390991124813512, 0.14909286828468937, 0.13966077146908973, 0.1711619618266197, 0.18950875236146014, 0.18057629296988276, 0.18312217760113547, 0.1750649393862006, 0.20202624148399917, 0.2168292326275233, 0.19777937844634486, 0.1814314524523869, 0.17034394169039135, 0.1849081927902838, 0.18552749180544037, 0.04880507965931924, 0.04837053118001966, 0.03674957558638248, 0.04906156267443018, 0.05558586024408918, 0.049049979313401715, 0.058484782200608376, 0.044892739251156444, 0.06474116061669044]}, "mutation_prompt": null}
