{"id": "21d6b6c7-aa22-4319-a0d4-991e61427d6f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.494, c2=1.494, f=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        def pso_update_position(pop, vel):\n            return pop + vel\n\n        def de_update_position(pop, best, f):\n            mutant_pop = best + f * (pop - best)\n            return np.clip(mutant_pop, -5.0, 5.0)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        velocity = np.zeros((self.pop_size, self.dim))\n\n        for _ in range(self.budget):\n            fitness = evaluate_population(population)\n\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                \n                # PSO update\n                velocity[i] = self.w * velocity[i] + self.c1 * r1 * (best_individual - population[i]) + self.c2 * r2 * (best_individual - population[i])\n                population = pso_update_position(population, velocity)\n\n                # DE update\n                mutant = de_update_position(population[i], best_individual, self.f)\n                population[i] = mutant if func(mutant) < func(population[i]) else population[i]\n\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "HybridPSODE", "description": "Novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to balance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 0, "fitness": 0.09191096224396099, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.14779539231770455, 0.07769856146720144, 0.09823979619097845, 0.13822796462464393, 0.14175388109894227, 0.11597491743674382, 0.12230498559691294, 0.12312201253319599, 0.08517871778599762, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008516995458306753, 0.01467079663371329, 0.0403192926004724, 0.012799044353373423, 0.015018599536060218, 0.020937869999281045, 0.024943880733792723, 9.999999999998899e-05, 0.025494337651748356, 0.018215913445319698, 9.999999999998899e-05, 0.016953442313099587, 0.02777232981360378, 0.0057986447669329255, 0.0031589447736650733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.990734232300049, 0.991920363366694, 0.9914367265997065, 0.9881225391195899, 0.9902286577539415, 0.9908566304688657, 0.9916557144796391, 0.9909460022401584, 0.9908276062006538, 0.009039813035414235, 9.999999999998899e-05, 9.999999999998899e-05, 0.008253302038547239, 0.04589797106710847, 0.029579541330609027, 9.999999999998899e-05, 0.036239770559179485, 9.999999999998899e-05, 0.11102906395976442, 0.03775594762470191, 0.052233822106523387, 0.11294493471318034, 0.0551034811027592, 0.0934452661009002, 0.051515418194785, 0.0793845915949487, 0.011232275161103256, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022308836637009, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09007239958243085, 9.999999999998899e-05, 0.00023311061848019232, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1267676986524806, 0.17823910018127187, 0.18090483949755254, 0.16263269811994874, 0.15710102347239585, 0.13182962934209497, 0.18183591834031376, 0.10057879840830397, 0.1334731374915087, 0.04496107190909848, 0.01142883238260095, 0.009671634176351085, 0.016960483119638603, 9.999999999998899e-05, 0.023902368759608716, 0.007299110818740684, 0.0029864752313969456, 0.027630540860161146, 0.0932011555164014, 0.0931489576043476, 0.09293383220780782, 0.12024112823621669, 0.10852972522114013, 0.07636677044792084, 0.08808199726801991, 0.07284733671135035, 0.09687722451774083, 0.11130320106279612, 0.1017187012685632, 0.14352810184653642, 0.13800672315110074, 0.11759845509025146, 0.13481849168338633, 0.14984444427879806, 0.17377774300845283, 0.15232496900049097, 0.03812976025022474, 0.034008147686441226, 0.0811393881004453, 0.11514840534881987, 0.06406947898089654, 0.06924480251338205, 0.09949944101515995, 0.0997711199450243, 0.08842743806194175, 0.1618628134135952, 0.09518727101272217, 0.13345086981233123, 0.12105546642771647, 0.09507646710413065, 0.0950243866058803, 0.16847544668579995, 0.11318991268180056, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0962640569503439, 0.07638928647728715, 0.11082892228468522, 0.10346540805499027, 0.1207914665021157, 0.11329111747632614, 0.08554534334458463, 0.11809925911521113, 0.10642564236774321, 0.22012737343519262, 0.10051730792859848, 0.05161646644375795, 0.0654264693323734, 0.12989992973955633, 0.07806234007745061, 0.07974420783773017, 0.07044991403791823, 0.12429976013916744, 0.15593302954912758, 0.1364120295066268, 0.14763022729669195, 0.14979695633987644, 0.1495427161758789, 0.14983063227409443, 0.14969714796693134, 0.15259307814209044, 0.14689007985489466, 0.03307550136743853, 0.02188924990328156, 0.041693369249138246, 0.0425307988115492, 0.03425093938292756, 0.02812081311806036, 0.016228383701229143, 0.009288004662255434, 0.01801698080102665]}, "mutation_prompt": null}
{"id": "572912e6-9569-405f-8ea4-286da35eeccf", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.494, c2=1.494, f=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        def pso_update_position(pop, vel):\n            return pop + vel\n\n        def de_update_position(pop, best, f):\n            mutant_pop = best + f * (pop - best)\n            return np.clip(mutant_pop, -5.0, 5.0)\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        population = initialize_population()\n        velocity = np.zeros((self.pop_size, self.dim))\n\n        for _ in range(self.budget):\n            fitness = evaluate_population(population)\n\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                \n                # PSO update\n                velocity[i] = self.w * velocity[i] + self.c1 * r1 * (best_individual - population[i]) + self.c2 * r2 * (best_individual - population[i])\n                population = pso_update_position(population, velocity)\n\n                # DE update\n                mutant = de_update_position(population[i], best_individual, self.f)\n                population[i] = mutant if func(mutant) < func(population[i]) else population[i]\n\n        best_idx = np.argmin(evaluate_population(population))\n        best_solution = population[best_idx]\n        return best_solution", "name": "HybridPSODE", "description": "Novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to balance exploration and exploitation for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21d6b6c7-aa22-4319-a0d4-991e61427d6f", "metadata": {"aucs": [0.14779539231770455, 0.07769856146720144, 0.09823979619097845, 0.13822796462464393, 0.14175388109894227, 0.11597491743674382, 0.12230498559691294, 0.12312201253319599, 0.08517871778599762, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008516995458306753, 0.01467079663371329, 0.0403192926004724, 0.012799044353373423, 0.015018599536060218, 0.020937869999281045, 0.024943880733792723, 9.999999999998899e-05, 0.025494337651748356, 0.018215913445319698, 9.999999999998899e-05, 0.016953442313099587, 0.02777232981360378, 0.0057986447669329255, 0.0031589447736650733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.990734232300049, 0.991920363366694, 0.9914367265997065, 0.9881225391195899, 0.9902286577539415, 0.9908566304688657, 0.9916557144796391, 0.9909460022401584, 0.9908276062006538, 0.009039813035414235, 9.999999999998899e-05, 9.999999999998899e-05, 0.008253302038547239, 0.04589797106710847, 0.029579541330609027, 9.999999999998899e-05, 0.036239770559179485, 9.999999999998899e-05, 0.11102906395976442, 0.03775594762470191, 0.052233822106523387, 0.11294493471318034, 0.0551034811027592, 0.0934452661009002, 0.051515418194785, 0.0793845915949487, 0.011232275161103256, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022308836637009, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09007239958243085, 9.999999999998899e-05, 0.00023311061848019232, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1267676986524806, 0.17823910018127187, 0.18090483949755254, 0.16263269811994874, 0.15710102347239585, 0.13182962934209497, 0.18183591834031376, 0.10057879840830397, 0.1334731374915087, 0.04496107190909848, 0.01142883238260095, 0.009671634176351085, 0.016960483119638603, 9.999999999998899e-05, 0.023902368759608716, 0.007299110818740684, 0.0029864752313969456, 0.027630540860161146, 0.0932011555164014, 0.0931489576043476, 0.09293383220780782, 0.12024112823621669, 0.10852972522114013, 0.07636677044792084, 0.08808199726801991, 0.07284733671135035, 0.09687722451774083, 0.11130320106279612, 0.1017187012685632, 0.14352810184653642, 0.13800672315110074, 0.11759845509025146, 0.13481849168338633, 0.14984444427879806, 0.17377774300845283, 0.15232496900049097, 0.03812976025022474, 0.034008147686441226, 0.0811393881004453, 0.11514840534881987, 0.06406947898089654, 0.06924480251338205, 0.09949944101515995, 0.0997711199450243, 0.08842743806194175, 0.1618628134135952, 0.09518727101272217, 0.13345086981233123, 0.12105546642771647, 0.09507646710413065, 0.0950243866058803, 0.16847544668579995, 0.11318991268180056, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0962640569503439, 0.07638928647728715, 0.11082892228468522, 0.10346540805499027, 0.1207914665021157, 0.11329111747632614, 0.08554534334458463, 0.11809925911521113, 0.10642564236774321, 0.22012737343519262, 0.10051730792859848, 0.05161646644375795, 0.0654264693323734, 0.12989992973955633, 0.07806234007745061, 0.07974420783773017, 0.07044991403791823, 0.12429976013916744, 0.15593302954912758, 0.1364120295066268, 0.14763022729669195, 0.14979695633987644, 0.1495427161758789, 0.14983063227409443, 0.14969714796693134, 0.15259307814209044, 0.14689007985489466, 0.03307550136743853, 0.02188924990328156, 0.041693369249138246, 0.0425307988115492, 0.03425093938292756, 0.02812081311806036, 0.016228383701229143, 0.009288004662255434, 0.01801698080102665]}, "mutation_prompt": null}
