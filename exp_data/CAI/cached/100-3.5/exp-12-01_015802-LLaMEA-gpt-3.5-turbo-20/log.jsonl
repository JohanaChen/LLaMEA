{"id": "e3ca7a81-5aa5-4d5c-b34a-f2b77c6dc6ee", "solution": "import numpy as np\n\nclass BlackHoleOptimization:\n    def __init__(self, budget, dim, num_holes=10, num_iterations=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_holes = num_holes\n        self.num_iterations = num_iterations\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_holes, self.dim))\n\n        def calculate_fitness(population):\n            return np.array([func(individual) for individual in population])\n\n        def update_position(population, fitness):\n            best_idx = np.argmax(fitness)\n            centroid = np.mean(population, axis=0)\n            new_population = population.copy()\n            for i in range(self.num_holes):\n                if i != best_idx:\n                    direction = population[i] - population[best_idx]\n                    distance = np.linalg.norm(population[i] - population[best_idx])\n                    new_population[i] = population[i] + np.random.uniform() * 2 * direction / distance + centroid - population[i]\n            return new_population\n\n        population = initialize_population()\n        fitness = calculate_fitness(population)\n        \n        for _ in range(self.num_iterations):\n            new_population = update_position(population, fitness)\n            new_fitness = calculate_fitness(new_population)\n            if np.max(new_fitness) > np.max(fitness):\n                population = new_population\n                fitness = new_fitness\n\n        best_idx = np.argmax(fitness)\n        best_solution = population[best_idx]\n        \n        return best_solution", "name": "BlackHoleOptimization", "description": "Novel Black Hole Optimization Algorithm: A metaheuristic inspired by the gravitational interaction between black holes, where solutions are attracted towards global optima and repelled from local optima.", "configspace": "", "generation": 0, "fitness": 0.047560043220079916, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.12398309181586609, 0.09101856028712607, 0.1316634592190098, 0.031091112900906603, 0.05257887047805654, 0.03583628877890621, 0.0513093711528001, 0.08089697958505171, 0.07046269390186333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004255176686645434, 0.014572254733961398, 0.00143567345794271, 0.016210257663098804, 0.001118763235000153, 0.0, 0.018150078853236495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01950167310984563, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04508425064953536, 0.03357090568988552, 0.04278205048616768, 0.038992415216064225, 0.04678013722709051, 0.03048449185054758, 0.03318053535900256, 0.04889164439372451, 0.025752273873738685, 0.0, 0.0, 0.0, 0.0, 0.0002155180950882407, 0.00712173138515626, 0.0, 0.011194453811883998, 0.0, 0.10018685869141841, 0.10397175200763109, 0.08912684677460014, 0.004462664352365531, 0.0, 0.0, 0.02618192206204728, 0.0, 0.009809447265859084, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05307536627028164, 0.0, 0.0, 0.02870914658238055, 0.0, 0.0, 0.036865103256039755, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09117851132440791, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09169762301059126, 0.10693789276682075, 0.14829537673711346, 0.09416865854239309, 0.08653783063193132, 0.09571399605654807, 0.1262778038292034, 0.17925544885118794, 0.14951823716041235, 0.0, 0.0, 0.0, 0.006002370323320738, 0.01702105635318618, 0.017501683791087297, 0.003613129617644484, 0.026683378371530675, 0.02666833626570042, 0.09719656416145239, 0.07020538584667013, 0.09121101359274997, 0.10489304978470315, 0.07369952305215333, 0.0704152480412189, 0.07827993223186913, 0.05996351575990744, 0.08093877863257526, 0.11244732319241979, 0.1233638327422446, 0.11503632040630418, 0.11715502513756071, 0.12564083418372052, 0.13124498205910973, 0.12210505569210506, 0.11489872147439961, 0.08748077070650795, 0.05398673686000022, 0.05654714868975785, 0.06415321655293793, 0.053625542886736155, 0.08730830247125454, 0.0847189186902928, 0.05639263182623744, 0.050783290187532804, 0.03287572146040241, 0.21118643469487774, 0.1775958960264965, 0.20691026643860877, 0.19269755073118533, 0.21196128702174444, 0.20243299076629617, 0.2219365101733216, 0.16098999453822194, 0.18093314301161278, 0.0, 0.0, 0.0, 0.0, 0.16154612112805156, 0.1409284547587104, 0.009566453280090537, 0.0, 0.0, 0.05899170754008631, 0.08223726475609927, 0.06191128480188779, 0.0841272285063176, 0.12070353966556302, 0.09722315277244686, 0.060792270882974675, 0.056521377751770685, 0.0834682371602603, 0.0909178047586574, 0.0395779862831096, 0.10986625663519611, 0.019474357011315946, 0.029674434028210128, 0.045415615002123544, 0.01886693703538389, 0.028986032645317183, 0.0413383353460518, 0.16403059571136147, 0.17580696331735113, 0.15798151441867325, 0.15746738026744422, 0.1575901030581527, 0.16423675221619616, 0.1708751055028821, 0.1544255629082043, 0.1563035012417071, 0.052406772473897245, 0.05904134193346544, 0.05228232537046784, 0.06210695144791645, 0.040908027054559315, 0.08062148663445423, 0.037321463750521255, 0.039048752159509426, 0.037573269802778086]}, "mutation_prompt": null}
{"id": "2ca733a0-4ec5-4f0f-8e96-4e552943c849", "solution": "import numpy as np\n\nclass ImprovedBlackHoleOptimization(BlackHoleOptimization):\n    def __init__(self, budget, dim, num_holes=10, num_iterations=100, inertia_weight=0.5):\n        super().__init__(budget, dim, num_holes, num_iterations)\n        self.inertia_weight = inertia_weight\n\n    def __call__(self, func):\n        def update_position(population, fitness):\n            best_idx = np.argmax(fitness)\n            centroid = np.mean(population, axis=0)\n            new_population = population.copy()\n            for i in range(self.num_holes):\n                if i != best_idx:\n                    direction = population[i] - population[best_idx]\n                    distance = np.linalg.norm(population[i] - population[best_idx])\n                    inertia_term = self.inertia_weight * np.random.uniform() * direction / distance\n                    social_term = centroid - population[i]\n                    new_population[i] = population[i] + inertia_term + social_term\n            return new_population\n\n        population = initialize_population()\n        fitness = calculate_fitness(population)\n        \n        for _ in range(self.num_iterations):\n            new_population = update_position(population, fitness)\n            new_fitness = calculate_fitness(new_population)\n            if np.max(new_fitness) > np.max(fitness):\n                population = new_population\n                fitness = new_fitness\n\n        best_idx = np.argmax(fitness)\n        best_solution = population[best_idx]\n        \n        return best_solution", "name": "ImprovedBlackHoleOptimization", "description": "Improved Black Hole Optimization Algorithm with enhanced exploration-exploitation balance by incorporating a dynamic inertia weight.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_population' is not defined\").", "error": "NameError(\"name 'initialize_population' is not defined\")", "parent_id": "e3ca7a81-5aa5-4d5c-b34a-f2b77c6dc6ee", "metadata": {}, "mutation_prompt": null}
