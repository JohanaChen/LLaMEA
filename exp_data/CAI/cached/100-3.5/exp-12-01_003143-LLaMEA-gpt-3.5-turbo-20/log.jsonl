{"id": "89650f21-dcfe-4728-91ac-1087fe8cbc1b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30, f=0.5, cr=0.9, w=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.f = f\n        self.cr = cr\n        self.w = w\n\n    def __call__(self, func):\n        def create_particle():\n            return np.random.uniform(-5.0, 5.0, self.dim), np.inf\n\n        def mutate(particles, best, f, cr):\n            p_best, _ = best\n            new_particles = []\n            for particle, _ in particles:\n                idxs = np.random.choice(len(particles), 3, replace=False)\n                x1, x2, x3 = particles[idxs]\n                mutant = np.clip(x1 + f * (x2 - x3), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < cr\n                trial = np.where(crossover, mutant, particle)\n                new_particles.append((trial, func(trial)))\n            return new_particles\n\n        particles = [create_particle() for _ in range(self.swarm_size)]\n        global_best = min(particles, key=lambda x: x[1])\n\n        for _ in range(self.budget):\n            new_particles = mutate(particles, global_best, self.f, self.cr)\n            particles = sorted(new_particles, key=lambda x: x[1])[:self.swarm_size]\n            global_best = min(global_best, min(particles, key=lambda x: x[1]), key=lambda x: x[1])\n\n        return global_best[0]", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to balance exploration and exploitation for black box optimization.", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "An exception occured: Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 32, in __call__\n  File \"<string>\", line 21, in mutate\nTypeError: only integer scalar arrays can be converted to a scalar index\n.", "error": "TypeError('only integer scalar arrays can be converted to a scalar index')Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 32, in __call__\n  File \"<string>\", line 21, in mutate\nTypeError: only integer scalar arrays can be converted to a scalar index\n", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "74ab38a1-45c8-43e6-b6a2-ccdd38a7088f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30, f=0.5, cr=0.9, w=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.f = f\n        self.cr = cr\n        self.w = w\n\n    def __call__(self, func):\n        def create_particle():\n            return np.random.uniform(-5.0, 5.0, self.dim), np.inf\n\n        def mutate(particles, best, f, cr):\n            p_best, _ = best\n            new_particles = []\n            for particle, _ in particles:\n                idxs = np.random.choice(len(particles), 3, replace=False)\n                x1, x2, x3 = particles[idxs]\n                mutant = np.clip(x1 + f * (x2 - x3), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < cr\n                trial = np.where(crossover, mutant, particle)\n                new_particles.append((trial, func(trial)))\n            return new_particles\n\n        particles = [create_particle() for _ in range(self.swarm_size)]\n        global_best = min(particles, key=lambda x: x[1])\n\n        for _ in range(self.budget):\n            new_particles = mutate(particles, global_best, self.f, self.cr)\n            particles = sorted(new_particles, key=lambda x: x[1])[:self.swarm_size]\n            global_best = min(global_best, min(particles, key=lambda x: x[1]), key=lambda x: x[1])\n\n        return global_best[0]", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to balance exploration and exploitation for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "89650f21-dcfe-4728-91ac-1087fe8cbc1b", "metadata": {}, "mutation_prompt": null}
