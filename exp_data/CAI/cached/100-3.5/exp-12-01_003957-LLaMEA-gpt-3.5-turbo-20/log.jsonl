{"id": "d9599267-da4b-4268-8150-75caef87fc45", "solution": "import numpy as np\nfrom scipy.stats import rankdata\n\nclass EvoMultiObjAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.cr = 0.5\n        self.f = 0.5\n        self.w = 0.7\n\n    def __call__(self, func):\n        def mutate(x, pop, idx, f):\n            a, b, c = np.random.choice(pop, 3, replace=False)\n            mutant = np.clip(a + f * (b - c), -5.0, 5.0)\n            return mutant\n\n        def crossover(x, mutant, cr):\n            crossover_mask = np.random.rand(self.dim) < cr\n            trial = np.where(crossover_mask, mutant, x)\n            return trial\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        fitness = np.array([func(x) for x in pop])\n        for _ in range(self.budget):\n            rank = rankdata(fitness, method='ordinal')\n            ranks = len(rank) - rank + 1\n            weights = ranks / np.sum(ranks)\n            gbest = pop[np.argmax(weights)]\n\n            for i in range(self.pop_size):\n                mutant = mutate(pop[i], pop, i, self.f)\n                trial = crossover(pop[i], mutant, self.cr)\n                v = self.w * velocities[i] + np.random.uniform() * (gbest - pop[i]) + np.random.uniform() * (trial - pop[i])\n                velocities[i] = v\n                pop[i] = np.clip(pop[i] + v, -5.0, 5.0)\n                fitness[i] = func(pop[i])\n        return pop[np.argmin(fitness)]", "name": "EvoMultiObjAlgorithm", "description": "Evolutionary Multi-Objective Algorithm based on a combination of Differential Evolution and Particle Swarm Optimization with adaptive strategies for mutation and velocity updates.", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "An exception occured: Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 34, in __call__\n  File \"<string>\", line 15, in mutate\n  File \"mtrand.pyx\", line 930, in numpy.random.mtrand.RandomState.choice\nValueError: a must be 1-dimensional\n.", "error": "ValueError('a must be 1-dimensional')Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 34, in __call__\n  File \"<string>\", line 15, in mutate\n  File \"mtrand.pyx\", line 930, in numpy.random.mtrand.RandomState.choice\nValueError: a must be 1-dimensional\n", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "02e08842-51bd-4acc-b32e-dee1b141d459", "solution": "import numpy as np\nfrom scipy.stats import rankdata\n\nclass EvoMultiObjAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.cr = 0.5\n        self.f = 0.5\n        self.w = 0.7\n\n    def __call__(self, func):\n        def mutate(x, pop, idx, f):\n            a, b, c = np.random.choice(pop, 3, replace=False)\n            mutant = np.clip(x + f * (a - x + b - c), -5.0, 5.0)\n            return mutant\n\n        def crossover(x, mutant, cr):\n            crossover_mask = np.random.rand(self.dim) < cr\n            trial = np.where(crossover_mask, mutant, x)\n            return trial\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        fitness = np.array([func(x) for x in pop])\n        for _ in range(self.budget):\n            rank = rankdata(fitness, method='ordinal')\n            ranks = len(rank) - rank + 1\n            weights = ranks / np.sum(ranks)\n            gbest = pop[np.argmax(weights)]\n\n            for i in range(self.pop_size):\n                mutant = mutate(pop[i], pop, i, self.f)\n                trial = crossover(pop[i], mutant, self.cr)\n                v = self.w * velocities[i] + np.random.uniform() * (gbest - pop[i]) + np.random.uniform() * (trial - pop[i])\n                velocities[i] = v\n                pop[i] = np.clip(pop[i] + v, -5.0, 5.0)\n                fitness[i] = func(pop[i])\n        return pop[np.argmin(fitness)]", "name": "EvoMultiObjAlgorithm", "description": "Improved Evolutionary Multi-Objective Algorithm combining Differential Evolution and Particle Swarm Optimization with dynamic adaptation of mutation and velocity parameters.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('a must be 1-dimensional').", "error": "ValueError('a must be 1-dimensional')", "parent_id": "d9599267-da4b-4268-8150-75caef87fc45", "metadata": {}, "mutation_prompt": null}
