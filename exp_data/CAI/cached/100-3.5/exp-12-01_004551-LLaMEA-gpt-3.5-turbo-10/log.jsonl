{"id": "20edb922-db21-4532-9161-e121c7ad594c", "solution": "import numpy as np\n\nclass SocialLearningOptimization:\n    def __init__(self, budget, dim, pop_size=30, alpha=0.1, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        for _ in range(self.budget):\n            idx = np.argsort(fitness)\n            best_individual = population[idx[0]]\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(np.delete(np.arange(self.pop_size), i), 2, replace=False)\n                new_individual = population[i] + self.alpha * (best_individual - population[i]) + self.beta * (population[r1] - population[r2])\n                new_fitness = func(new_individual)\n                if new_fitness < fitness[i]:\n                    population[i] = new_individual\n                    fitness[i] = new_fitness\n        return population[idx[0]]", "name": "SocialLearningOptimization", "description": "A novel metaheuristic algorithm inspired by the concept of social learning and information diffusion, where individuals in a population adapt their search behavior based on the information exchanged with their neighbors.", "configspace": "", "generation": 0, "fitness": 0.36544257722633494, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8054439899966446, 0.7957901369287185, 0.797003113369006, 0.7944167278847025, 0.7743464447198868, 0.7847399115302864, 0.8010392596222925, 0.7880062486978693, 0.7793346376017602, 0.5785723250564361, 0.5760430814633077, 0.556296366053166, 0.5880527038260444, 0.5742080880308036, 0.5924458556837737, 0.5827167160126785, 0.5845419578923144, 0.5735304427602984, 0.11815872021254814, 0.08372462210056708, 0.10688727033070788, 0.08972897644602251, 0.08752165818574742, 0.0964318024460259, 0.08994788599983528, 0.0885456132712612, 0.09048998088002969, 0.0859817978373516, 0.08505105290526493, 0.08047530760042887, 0.0774464645277283, 0.08110586086795502, 0.08402785510802513, 0.09137623875684453, 0.08220298451603136, 0.09285522211165065, 0.9825641143758929, 0.9696518114513387, 0.9654948306322014, 0.9429572468473928, 0.9883740157848907, 0.9714596852978239, 0.9536494349784583, 0.9828018804893762, 0.9642482199713934, 0.5008672268863263, 0.48503716763612725, 0.5079497933476484, 0.48975756089183087, 0.514185414118326, 0.5221104528347555, 0.5034404710935325, 0.48997348299173005, 0.5067354399997186, 0.7786845540070318, 0.6495591006707763, 0.7245291170892015, 0.7468917082622122, 0.7009658803278498, 0.7201613337989041, 0.673834471601556, 0.7357865422872619, 0.7119015009058139, 0.2578833674931149, 0.17905371253415547, 0.24001450599804808, 0.20673969904752598, 0.30282272113581377, 0.25482785282862186, 0.25457805625274155, 0.19324829118493225, 0.25437432580679675, 0.2715002746610067, 0.27091481504135706, 0.24834058466555464, 0.2712951780978414, 0.18759405250482009, 0.26465373855550756, 0.2516996870173097, 0.25453033459012586, 0.24944956171009935, 0.5863047020281165, 0.5792480151223482, 0.5911274965104881, 0.5887980650865068, 0.5823264989082753, 0.5716060620026711, 0.5904410003454009, 0.6008443222009917, 0.5750286252671925, 0.6278620403100694, 0.6585693739749374, 0.6522894917685216, 0.6726298738047093, 0.6379663038585247, 0.6690548592336901, 0.6811777505451926, 0.6569930895550873, 0.6317535261562527, 0.040977198317045826, 0.07730818053713429, 0.0541490619337508, 0.3073240420904296, 0.31648267343801206, 0.2973920864525412, 0.05467971252859538, 0.06077232602195348, 0.10511118071996228, 0.46522231189076013, 0.45182786476088055, 0.4370563545175361, 0.43428973934489623, 0.42260988032720337, 0.45893264637533093, 0.4455074760826808, 0.4423770082260038, 0.46035388524184395, 0.7255684161678295, 0.7268452681128261, 0.7265003461905667, 0.7390097688363733, 0.7158437226595404, 0.7321040258729441, 0.7490436615573124, 0.732641382718709, 0.7280031226196539, 0.09601312488797298, 0.09904925810266518, 0.09435279150337905, 0.09017887085484289, 0.08600592921390848, 0.0940254063081829, 0.10983703928727351, 0.09185124142884382, 0.10845995125234908, 0.13064823535022985, 0.1130204768153219, 0.12120600625743772, 0.13146563080698703, 0.14599245865611332, 0.12323059560620842, 0.1330705322936928, 0.11374697330732508, 0.1316303514953071, 0.29335530427485856, 0.2598667334296282, 0.2692965126306608, 0.2760772198386269, 0.2844188107668695, 0.2639164131253996, 0.2787126283030772, 0.27092168934708294, 0.2733467591693025, 0.2128425579471146, 0.22184481496642416, 0.22124351552869892, 0.21106579112790091, 0.21760181621589292, 0.23159178927199453, 0.22304622240238436, 0.2152109213128378, 0.22744215668631806, 0.1948090051502015, 0.19156923897706346, 0.19240093686329196, 0.19064644531861785, 0.18310840932219452, 0.20237608437001464, 0.2038357069622896, 0.18232585706510018, 0.19331121790669503, 0.17783289209208764, 0.18551823978661308, 0.17656753555194682, 0.1878835046513324, 0.18639898825509504, 0.17677787468663064, 0.18807871905664286, 0.18618939297365122, 0.1872012281029306, 0.363845037862103, 0.24710411215349226, 0.342038837999614, 0.4411243456649262, 0.17465568553880528, 0.28376444471800566, 0.17411325666102673, 0.2737736647881347, 0.32274424266558854, 0.600106872209025, 0.18774717791235085, 0.6260656122789243, 0.2162974692553068, 0.2258918466453419, 0.3319033961124056, 0.25244793779073416, 0.29175305374958393, 0.22018961261003556, 0.18012716224935033, 0.19105697170764135, 0.17519092411454762, 0.19674475019625004, 0.20494065331207834, 0.195729994514099, 0.18967411266250833, 0.20370175425066928, 0.1750789210703173, 0.0795024713873117, 0.07448004098168604, 0.06862398953227289, 0.07899046145238353, 0.08516864807089009, 0.07956190523808104, 0.08478796974084912, 0.0691500323890627, 0.0775665253773754]}, "mutation_prompt": null}
{"id": "ae4f43b6-4fc7-4e92-8bfb-d4d3ef54ca04", "solution": "import numpy as np\n\nclass SocialLearningOptimization:\n    def __init__(self, budget, dim, pop_size=30, alpha=0.1, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        for _ in range(self.budget):\n            idx = np.argsort(fitness)\n            best_individual = population[idx[0]]\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(np.delete(np.arange(self.pop_size), i), 2, replace=False)\n                new_individual = population[i] + self.alpha * (best_individual - population[i]) + self.beta * (population[r1] - population[r2])\n                new_fitness = func(new_individual)\n                if new_fitness < fitness[i]:\n                    population[i] = new_individual\n                    fitness[i] = new_fitness\n        return population[idx[0]]", "name": "SocialLearningOptimization", "description": "A novel metaheuristic algorithm inspired by the concept of social learning and information diffusion, where individuals in a population adapt their search behavior based on the information exchanged with their neighbors.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20edb922-db21-4532-9161-e121c7ad594c", "metadata": {"aucs": [0.8054439899966446, 0.7957901369287185, 0.797003113369006, 0.7944167278847025, 0.7743464447198868, 0.7847399115302864, 0.8010392596222925, 0.7880062486978693, 0.7793346376017602, 0.5785723250564361, 0.5760430814633077, 0.556296366053166, 0.5880527038260444, 0.5742080880308036, 0.5924458556837737, 0.5827167160126785, 0.5845419578923144, 0.5735304427602984, 0.11815872021254814, 0.08372462210056708, 0.10688727033070788, 0.08972897644602251, 0.08752165818574742, 0.0964318024460259, 0.08994788599983528, 0.0885456132712612, 0.09048998088002969, 0.0859817978373516, 0.08505105290526493, 0.08047530760042887, 0.0774464645277283, 0.08110586086795502, 0.08402785510802513, 0.09137623875684453, 0.08220298451603136, 0.09285522211165065, 0.9825641143758929, 0.9696518114513387, 0.9654948306322014, 0.9429572468473928, 0.9883740157848907, 0.9714596852978239, 0.9536494349784583, 0.9828018804893762, 0.9642482199713934, 0.5008672268863263, 0.48503716763612725, 0.5079497933476484, 0.48975756089183087, 0.514185414118326, 0.5221104528347555, 0.5034404710935325, 0.48997348299173005, 0.5067354399997186, 0.7786845540070318, 0.6495591006707763, 0.7245291170892015, 0.7468917082622122, 0.7009658803278498, 0.7201613337989041, 0.673834471601556, 0.7357865422872619, 0.7119015009058139, 0.2578833674931149, 0.17905371253415547, 0.24001450599804808, 0.20673969904752598, 0.30282272113581377, 0.25482785282862186, 0.25457805625274155, 0.19324829118493225, 0.25437432580679675, 0.2715002746610067, 0.27091481504135706, 0.24834058466555464, 0.2712951780978414, 0.18759405250482009, 0.26465373855550756, 0.2516996870173097, 0.25453033459012586, 0.24944956171009935, 0.5863047020281165, 0.5792480151223482, 0.5911274965104881, 0.5887980650865068, 0.5823264989082753, 0.5716060620026711, 0.5904410003454009, 0.6008443222009917, 0.5750286252671925, 0.6278620403100694, 0.6585693739749374, 0.6522894917685216, 0.6726298738047093, 0.6379663038585247, 0.6690548592336901, 0.6811777505451926, 0.6569930895550873, 0.6317535261562527, 0.040977198317045826, 0.07730818053713429, 0.0541490619337508, 0.3073240420904296, 0.31648267343801206, 0.2973920864525412, 0.05467971252859538, 0.06077232602195348, 0.10511118071996228, 0.46522231189076013, 0.45182786476088055, 0.4370563545175361, 0.43428973934489623, 0.42260988032720337, 0.45893264637533093, 0.4455074760826808, 0.4423770082260038, 0.46035388524184395, 0.7255684161678295, 0.7268452681128261, 0.7265003461905667, 0.7390097688363733, 0.7158437226595404, 0.7321040258729441, 0.7490436615573124, 0.732641382718709, 0.7280031226196539, 0.09601312488797298, 0.09904925810266518, 0.09435279150337905, 0.09017887085484289, 0.08600592921390848, 0.0940254063081829, 0.10983703928727351, 0.09185124142884382, 0.10845995125234908, 0.13064823535022985, 0.1130204768153219, 0.12120600625743772, 0.13146563080698703, 0.14599245865611332, 0.12323059560620842, 0.1330705322936928, 0.11374697330732508, 0.1316303514953071, 0.29335530427485856, 0.2598667334296282, 0.2692965126306608, 0.2760772198386269, 0.2844188107668695, 0.2639164131253996, 0.2787126283030772, 0.27092168934708294, 0.2733467591693025, 0.2128425579471146, 0.22184481496642416, 0.22124351552869892, 0.21106579112790091, 0.21760181621589292, 0.23159178927199453, 0.22304622240238436, 0.2152109213128378, 0.22744215668631806, 0.1948090051502015, 0.19156923897706346, 0.19240093686329196, 0.19064644531861785, 0.18310840932219452, 0.20237608437001464, 0.2038357069622896, 0.18232585706510018, 0.19331121790669503, 0.17783289209208764, 0.18551823978661308, 0.17656753555194682, 0.1878835046513324, 0.18639898825509504, 0.17677787468663064, 0.18807871905664286, 0.18618939297365122, 0.1872012281029306, 0.363845037862103, 0.24710411215349226, 0.342038837999614, 0.4411243456649262, 0.17465568553880528, 0.28376444471800566, 0.17411325666102673, 0.2737736647881347, 0.32274424266558854, 0.600106872209025, 0.18774717791235085, 0.6260656122789243, 0.2162974692553068, 0.2258918466453419, 0.3319033961124056, 0.25244793779073416, 0.29175305374958393, 0.22018961261003556, 0.18012716224935033, 0.19105697170764135, 0.17519092411454762, 0.19674475019625004, 0.20494065331207834, 0.195729994514099, 0.18967411266250833, 0.20370175425066928, 0.1750789210703173, 0.0795024713873117, 0.07448004098168604, 0.06862398953227289, 0.07899046145238353, 0.08516864807089009, 0.07956190523808104, 0.08478796974084912, 0.0691500323890627, 0.0775665253773754]}, "mutation_prompt": null}
