{"id": "ee3d3498-d27a-432f-8ce7-bdbaa7548746", "solution": "import numpy as np\n\nclass DynamicCuckooSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def levy_flight(self, size):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, 1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (abs(v) ** (1 / beta))\n        return 0.01 * step\n        \n    def __call__(self, func):\n        n = self.budget\n        Nc = 5\n        pa = 0.25\n        x_best = np.random.uniform(-5, 5, self.dim)\n        f_best = func(x_best)\n        \n        for i in range(n):\n            x_new = x_best + self.levy_flight(self.dim)\n            x_new = np.clip(x_new, -5, 5)\n            f_new = func(x_new)\n            \n            if f_new < f_best:\n                x_best = x_new\n                f_best = f_new\n            \n            if np.random.rand() < pa:\n                x_cuckoo = np.random.uniform(-5, 5, self.dim)\n                f_cuckoo = func(x_cuckoo)\n                if f_cuckoo < f_best:\n                    x_best = x_cuckoo\n                    f_best = f_cuckoo\n            \n            if i % Nc == 0:\n                pa = max(0.1, pa * 0.95)\n        \n        return x_best", "name": "DynamicCuckooSearch", "description": "A novel metaheuristic algorithm called Dynamic Cuckoo Search (DCS) that dynamically updates the search strategy and step size to optimize black box functions efficiently.", "configspace": "", "generation": 0, "fitness": 0.23247304717500633, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6589529673746941, 0.6406582607306495, 0.6233354070258765, 0.620331838943321, 0.6369498281398709, 0.6378141984410317, 0.6413498560360458, 0.7115044148848304, 0.6436263302351364, 0.09638548196478547, 0.11917974833319045, 0.08821417745946414, 0.19892725978027315, 0.13524358208494813, 0.0730115602201653, 0.07652030718965275, 0.12248104455841635, 0.029701787343543784, 0.1474874258393395, 0.05331631017620153, 0.09682055093583708, 0.0861912780819104, 0.10051440313662774, 0.06662064918283028, 0.05833495757701945, 0.11538278363292753, 0.07556293726707353, 0.10838417873067652, 0.06464619707495844, 0.03154034451343102, 0.07654192165812057, 0.08366456533482292, 0.1394904380483507, 0.06687610377389397, 0.06654023172182844, 0.12770503006641953, 0.8880677875337382, 0.9599947265973733, 0.8087263360107756, 0.8731181347920074, 0.7719180270017761, 0.7093506300162766, 0.8245400509324052, 0.9154080122343102, 0.9275464937057993, 0.4815930299260499, 0.4792530970071218, 0.44702712381626497, 0.4412286930840823, 0.46568676176640456, 0.4683409755258179, 0.3536909933516077, 0.4352788932205184, 0.47725914102616407, 0.12426692938783579, 0.14735197954324053, 0.11324327903962894, 0.1737275401599907, 0.13954376999779328, 0.20245561965291592, 0.08760184724254527, 0.18866546493903946, 0.10420829077425975, 0.23428702942943935, 0.13442248869843154, 0.23644647378521433, 0.14886090436834198, 0.20610269710092766, 0.21264110061178454, 0.21039563390696037, 0.17089975233157217, 0.24288876777660962, 0.24128500322246316, 0.06731331753550729, 0.21342685368165892, 0.220971961232036, 0.21420342030639639, 0.13229388538489384, 0.2554179466048002, 0.2034675375781202, 0.24825688522929557, 0.1113792973970329, 0.024251825392574755, 0.010268013993291025, 0.011954986522570987, 0.00025555153016465493, 9.999999999998899e-05, 0.007185829601820126, 0.03963363986481616, 0.018512355217622067, 0.04113064348699391, 0.05430800194072383, 0.13405723253339963, 0.06963502051060988, 0.0523910484180089, 0.05085481231443323, 0.15885301759898995, 0.060487410826159826, 0.059365788670874275, 0.11251266711878738, 0.05088795966380766, 0.08866382601433687, 0.06617145111199785, 0.05733755358715187, 0.08478640682997174, 0.07503898749864879, 0.10440600511776943, 0.11017676428732615, 0.20657953819118313, 0.19003612318643293, 0.038807225538868395, 0.06171337824139844, 0.08235480800332318, 0.10276468335435962, 0.0865475446995424, 0.0869162612125981, 0.08312279919237753, 0.5172489744123487, 0.5178347247639069, 0.5080977361798209, 0.5461439093081086, 0.5711487269285922, 0.5254146692078928, 0.5447199533790164, 0.5289071861136526, 0.5474543147588132, 0.058146515701610224, 0.053227901716247694, 0.07357882713819253, 0.07175737919862624, 0.049071973159327764, 0.03383430819111233, 0.06207823901389642, 0.04073409632670588, 0.044341949441619954, 0.13237660157887599, 0.2120324409284423, 0.17683110952009828, 0.11277598183331883, 0.14415888079681705, 0.1531740637298179, 0.15222144457279574, 0.16487727793294848, 0.1276991520479267, 0.1798050999236035, 0.17639313303059334, 0.22615229385345714, 0.16838111803414013, 0.18900406178972018, 0.1553128257414479, 0.2695117925427769, 0.19907518479821606, 0.15611989301069829, 0.1411630371664463, 0.13863164035490116, 0.14571970536962686, 0.12862021824877412, 0.1022579626093415, 0.10055017968048763, 0.1394870590455275, 0.10634919698950085, 0.09470950794521504, 0.16588747289158234, 0.12571122000794965, 0.17321734808210898, 0.1669801783044551, 0.1564341900553412, 0.1333148185728742, 0.18119195454757686, 0.16471356574051044, 0.18601697032991404, 0.16279753931337604, 0.16683046664209578, 0.15961552667595424, 0.1722789219124734, 0.1832875351217541, 0.17284138808526206, 0.16164208879578712, 0.17234800492687152, 0.18929257169885338, 0.16371031276515857, 0.1403882281577169, 0.18011173827550098, 0.9168060580786238, 0.8577164492380925, 0.12669143624157386, 0.2011415744343671, 0.36238662225729945, 0.12291313316752006, 0.8898704872103024, 0.14333301411403354, 0.16661074698264022, 0.7816969506977932, 0.6581387573930642, 0.7860769639169201, 0.15727442953648607, 0.8720403744639431, 0.1685519475809688, 0.23876523189174836, 0.1867120692952079, 0.22392904376545886, 0.2301172037814163, 0.2371298532283861, 0.2032367190586858, 0.16790008068338924, 0.24560118879725412, 0.2357472092886581, 0.04517380087460621, 0.0675222796272319, 0.06513627488371243, 0.07110425208417037, 0.040567454973650996, 0.0846175952669439, 0.044034295488550534, 0.05422625364057587, 0.07973204570163583]}, "mutation_prompt": null}
{"id": "59b4410f-fc6f-43dd-9b90-acf1639dedc7", "solution": "import numpy as np\n\nclass DynamicCuckooSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def levy_flight(self, size):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, 1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (abs(v) ** (1 / beta))\n        return 0.01 * step\n        \n    def __call__(self, func):\n        n = self.budget\n        Nc = 5\n        pa = 0.25\n        x_best = np.random.uniform(-5, 5, self.dim)\n        f_best = func(x_best)\n        \n        for i in range(n):\n            x_new = x_best + self.levy_flight(self.dim)\n            x_new = np.clip(x_new, -5, 5)\n            f_new = func(x_new)\n            \n            if f_new < f_best:\n                x_best = x_new\n                f_best = f_new\n            \n            if np.random.rand() < pa:\n                x_cuckoo = np.random.uniform(-5, 5, self.dim)\n                f_cuckoo = func(x_cuckoo)\n                if f_cuckoo < f_best:\n                    x_best = x_cuckoo\n                    f_best = f_cuckoo\n            \n            if i % Nc == 0:\n                pa = max(0.1, pa * 0.95)\n        \n        return x_best", "name": "DynamicCuckooSearch", "description": "A novel metaheuristic algorithm called Dynamic Cuckoo Search (DCS) that dynamically updates the search strategy and step size to optimize black box functions efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ee3d3498-d27a-432f-8ce7-bdbaa7548746", "metadata": {"aucs": [0.6589529673746941, 0.6406582607306495, 0.6233354070258765, 0.620331838943321, 0.6369498281398709, 0.6378141984410317, 0.6413498560360458, 0.7115044148848304, 0.6436263302351364, 0.09638548196478547, 0.11917974833319045, 0.08821417745946414, 0.19892725978027315, 0.13524358208494813, 0.0730115602201653, 0.07652030718965275, 0.12248104455841635, 0.029701787343543784, 0.1474874258393395, 0.05331631017620153, 0.09682055093583708, 0.0861912780819104, 0.10051440313662774, 0.06662064918283028, 0.05833495757701945, 0.11538278363292753, 0.07556293726707353, 0.10838417873067652, 0.06464619707495844, 0.03154034451343102, 0.07654192165812057, 0.08366456533482292, 0.1394904380483507, 0.06687610377389397, 0.06654023172182844, 0.12770503006641953, 0.8880677875337382, 0.9599947265973733, 0.8087263360107756, 0.8731181347920074, 0.7719180270017761, 0.7093506300162766, 0.8245400509324052, 0.9154080122343102, 0.9275464937057993, 0.4815930299260499, 0.4792530970071218, 0.44702712381626497, 0.4412286930840823, 0.46568676176640456, 0.4683409755258179, 0.3536909933516077, 0.4352788932205184, 0.47725914102616407, 0.12426692938783579, 0.14735197954324053, 0.11324327903962894, 0.1737275401599907, 0.13954376999779328, 0.20245561965291592, 0.08760184724254527, 0.18866546493903946, 0.10420829077425975, 0.23428702942943935, 0.13442248869843154, 0.23644647378521433, 0.14886090436834198, 0.20610269710092766, 0.21264110061178454, 0.21039563390696037, 0.17089975233157217, 0.24288876777660962, 0.24128500322246316, 0.06731331753550729, 0.21342685368165892, 0.220971961232036, 0.21420342030639639, 0.13229388538489384, 0.2554179466048002, 0.2034675375781202, 0.24825688522929557, 0.1113792973970329, 0.024251825392574755, 0.010268013993291025, 0.011954986522570987, 0.00025555153016465493, 9.999999999998899e-05, 0.007185829601820126, 0.03963363986481616, 0.018512355217622067, 0.04113064348699391, 0.05430800194072383, 0.13405723253339963, 0.06963502051060988, 0.0523910484180089, 0.05085481231443323, 0.15885301759898995, 0.060487410826159826, 0.059365788670874275, 0.11251266711878738, 0.05088795966380766, 0.08866382601433687, 0.06617145111199785, 0.05733755358715187, 0.08478640682997174, 0.07503898749864879, 0.10440600511776943, 0.11017676428732615, 0.20657953819118313, 0.19003612318643293, 0.038807225538868395, 0.06171337824139844, 0.08235480800332318, 0.10276468335435962, 0.0865475446995424, 0.0869162612125981, 0.08312279919237753, 0.5172489744123487, 0.5178347247639069, 0.5080977361798209, 0.5461439093081086, 0.5711487269285922, 0.5254146692078928, 0.5447199533790164, 0.5289071861136526, 0.5474543147588132, 0.058146515701610224, 0.053227901716247694, 0.07357882713819253, 0.07175737919862624, 0.049071973159327764, 0.03383430819111233, 0.06207823901389642, 0.04073409632670588, 0.044341949441619954, 0.13237660157887599, 0.2120324409284423, 0.17683110952009828, 0.11277598183331883, 0.14415888079681705, 0.1531740637298179, 0.15222144457279574, 0.16487727793294848, 0.1276991520479267, 0.1798050999236035, 0.17639313303059334, 0.22615229385345714, 0.16838111803414013, 0.18900406178972018, 0.1553128257414479, 0.2695117925427769, 0.19907518479821606, 0.15611989301069829, 0.1411630371664463, 0.13863164035490116, 0.14571970536962686, 0.12862021824877412, 0.1022579626093415, 0.10055017968048763, 0.1394870590455275, 0.10634919698950085, 0.09470950794521504, 0.16588747289158234, 0.12571122000794965, 0.17321734808210898, 0.1669801783044551, 0.1564341900553412, 0.1333148185728742, 0.18119195454757686, 0.16471356574051044, 0.18601697032991404, 0.16279753931337604, 0.16683046664209578, 0.15961552667595424, 0.1722789219124734, 0.1832875351217541, 0.17284138808526206, 0.16164208879578712, 0.17234800492687152, 0.18929257169885338, 0.16371031276515857, 0.1403882281577169, 0.18011173827550098, 0.9168060580786238, 0.8577164492380925, 0.12669143624157386, 0.2011415744343671, 0.36238662225729945, 0.12291313316752006, 0.8898704872103024, 0.14333301411403354, 0.16661074698264022, 0.7816969506977932, 0.6581387573930642, 0.7860769639169201, 0.15727442953648607, 0.8720403744639431, 0.1685519475809688, 0.23876523189174836, 0.1867120692952079, 0.22392904376545886, 0.2301172037814163, 0.2371298532283861, 0.2032367190586858, 0.16790008068338924, 0.24560118879725412, 0.2357472092886581, 0.04517380087460621, 0.0675222796272319, 0.06513627488371243, 0.07110425208417037, 0.040567454973650996, 0.0846175952669439, 0.044034295488550534, 0.05422625364057587, 0.07973204570163583]}, "mutation_prompt": null}
