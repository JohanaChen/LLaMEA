{"id": "cdf88eae-01a6-4a61-a489-0a445485e36f", "solution": "import numpy as np\n\nclass PercolationAlgorithm:\n    def __init__(self, budget, dim, pop_size=50, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget // self.pop_size):\n            sorted_indices = np.argsort(fitness)\n            elite_pop = population[sorted_indices[:self.pop_size // 2]]\n            non_elite_pop = population[sorted_indices[self.pop_size // 2:]]\n            \n            for i in range(self.pop_size // 2, self.pop_size):\n                parent_idx = np.random.choice(range(self.pop_size // 2))\n                mutation_mask = np.random.choice([0, 1], size=self.dim, p=[1-self.mutation_rate, self.mutation_rate])\n                population[i] = elite_pop[parent_idx] + mutation_mask * np.random.uniform(-1.0, 1.0, self.dim)\n                fitness[i] = func(population[i])\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "PercolationAlgorithm", "description": "A novel optimization algorithm inspired by percolation theory, where solutions \"percolate\" through the search space by iteratively updating a population of candidate solutions based on their performance on the black box function.", "configspace": "", "generation": 0, "fitness": 0.08256515936369434, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.15153609953873926, 0.12059264291419347, 0.1561727199707097, 0.18339914059404894, 0.1257184758190686, 0.14883618369110352, 0.20694258355246276, 0.12804933020793652, 0.13854046120430863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04598930623735431, 0.04901967898357129, 0.049895271337309866, 0.03589832532289439, 0.03440074715743635, 0.05430421240296601, 0.04511178115762726, 0.03150801877363807, 0.05542292629114165, 0.02255560044097915, 0.017713091596405883, 0.02335196383924598, 0.057175366303170105, 0.038882139400155724, 0.007808503913247278, 0.015626813290320563, 0.025644497717503323, 0.018186179973536887, 0.07411857956040169, 0.07892191099002499, 0.07543578011359497, 0.07351069392820087, 0.07844571803411238, 0.06675876307709772, 0.11293467285575098, 0.08443705512806932, 0.06753590745905946, 0.06265423285318361, 0.007515105100136532, 0.016939957476411305, 0.035715789767416184, 0.02878497728717977, 0.017626819081613898, 0.1127573772292173, 0.03838827700183267, 0.005676536599592663, 0.14965210446182864, 0.15573881909335763, 0.09456568310088731, 0.2051960896204328, 0.15945735101301284, 0.08803395857125851, 0.1080760280205344, 0.1337502642302879, 0.18142599441304474, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06084576683035703, 0.010107154839844368, 0.037789340937752436, 0.01617122875727106, 0.0, 0.004404984010369262, 0.043469221992757934, 0.0, 0.04202227115250612, 0.0196145920050963, 0.0, 0.029269560630185154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07906884079688226, 0.046251129711314176, 0.0587883722385486, 0.058890071126548316, 0.017996332161051898, 0.02322330828265473, 0.16573611535485777, 0.04940213588386211, 0.03764059202517378, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02222453729080065, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0030242898175940613, 0.1829996256705435, 0.22870778241696121, 0.2109694751159823, 0.1264204920246561, 0.14969339402482185, 0.13546037501235764, 0.16896114258643535, 0.123246739630272, 0.18019780013803266, 0.060433041788870656, 0.023782975350538638, 0.036073029496451636, 0.08125353156040327, 0.04570970664937124, 0.06916217597973551, 0.029909708092578202, 0.04716196642523862, 0.06946810040977691, 0.11804648032796072, 0.1489917665044732, 0.14179152983450216, 0.17787784860386413, 0.14848117952528883, 0.12762406210386468, 0.15118058655977074, 0.11777920877209291, 0.1671018614874401, 0.1279921933711723, 0.14176812204174383, 0.18103676080528963, 0.17866011817179006, 0.15481565125314012, 0.16352798266783497, 0.17151416487566296, 0.21214527013885887, 0.1745957743289005, 0.06672231272013485, 0.09328264375882389, 0.12814332344669743, 0.1403542474301216, 0.10826143031493773, 0.10015321613407435, 0.13299470993639084, 0.14812058952058504, 0.1312125598643139, 0.1693715900026488, 0.12152094554752535, 0.1706482145195407, 0.1945109916518828, 0.17043596746547773, 0.18993989033056358, 0.18361042310419917, 0.15616144891579975, 0.15730421962806662, 0.14907481809646794, 0.09449077164309061, 0.16665893145130972, 0.15792819043151973, 0.07330348562171463, 0.127243836249187, 0.10320593432576719, 0.10977577330548449, 0.0891398583239923, 0.11937552746573088, 0.11724932754995077, 0.12405149515830305, 0.1368473934333706, 0.17367132726795675, 0.15724191311915459, 0.10692837481482098, 0.1643575444112364, 0.16814645691741859, 0.11031370369947613, 0.13332991878946254, 0.0767838081768043, 0.12529624306710885, 0.1480273824875229, 0.10895132300929677, 0.08781928794943428, 0.11723486640862224, 0.10158814434179642, 0.18213662216704019, 0.16982110452230992, 0.17242042101197697, 0.1931709211073307, 0.16610549881520043, 0.16500735511486597, 0.1854150109763747, 0.16688939646284673, 0.16655849849542714, 0.04260181278072794, 0.05034712035381561, 0.04706552454059765, 0.05459303048631026, 0.05825187486755712, 0.05421768541939187, 0.056708622033387335, 0.046032559788211413, 0.04312902451609446]}, "mutation_prompt": null}
{"id": "b3283f54-e528-438c-908a-a5d816fc5258", "solution": "import numpy as np\n\nclass PercolationAlgorithm:\n    def __init__(self, budget, dim, pop_size=50, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        \n        for _ in range(self.budget // self.pop_size):\n            sorted_indices = np.argsort(fitness)\n            elite_pop = population[sorted_indices[:self.pop_size // 2]]\n            non_elite_pop = population[sorted_indices[self.pop_size // 2:]]\n            \n            for i in range(self.pop_size // 2, self.pop_size):\n                parent_idx = np.random.choice(range(self.pop_size // 2))\n                mutation_mask = np.random.choice([0, 1], size=self.dim, p=[1-self.mutation_rate, self.mutation_rate])\n                population[i] = elite_pop[parent_idx] + mutation_mask * np.random.uniform(-1.0, 1.0, self.dim)\n                fitness[i] = func(population[i])\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "PercolationAlgorithm", "description": "A novel optimization algorithm inspired by percolation theory, where solutions \"percolate\" through the search space by iteratively updating a population of candidate solutions based on their performance on the black box function.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cdf88eae-01a6-4a61-a489-0a445485e36f", "metadata": {"aucs": [0.15153609953873926, 0.12059264291419347, 0.1561727199707097, 0.18339914059404894, 0.1257184758190686, 0.14883618369110352, 0.20694258355246276, 0.12804933020793652, 0.13854046120430863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04598930623735431, 0.04901967898357129, 0.049895271337309866, 0.03589832532289439, 0.03440074715743635, 0.05430421240296601, 0.04511178115762726, 0.03150801877363807, 0.05542292629114165, 0.02255560044097915, 0.017713091596405883, 0.02335196383924598, 0.057175366303170105, 0.038882139400155724, 0.007808503913247278, 0.015626813290320563, 0.025644497717503323, 0.018186179973536887, 0.07411857956040169, 0.07892191099002499, 0.07543578011359497, 0.07351069392820087, 0.07844571803411238, 0.06675876307709772, 0.11293467285575098, 0.08443705512806932, 0.06753590745905946, 0.06265423285318361, 0.007515105100136532, 0.016939957476411305, 0.035715789767416184, 0.02878497728717977, 0.017626819081613898, 0.1127573772292173, 0.03838827700183267, 0.005676536599592663, 0.14965210446182864, 0.15573881909335763, 0.09456568310088731, 0.2051960896204328, 0.15945735101301284, 0.08803395857125851, 0.1080760280205344, 0.1337502642302879, 0.18142599441304474, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06084576683035703, 0.010107154839844368, 0.037789340937752436, 0.01617122875727106, 0.0, 0.004404984010369262, 0.043469221992757934, 0.0, 0.04202227115250612, 0.0196145920050963, 0.0, 0.029269560630185154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07906884079688226, 0.046251129711314176, 0.0587883722385486, 0.058890071126548316, 0.017996332161051898, 0.02322330828265473, 0.16573611535485777, 0.04940213588386211, 0.03764059202517378, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02222453729080065, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0030242898175940613, 0.1829996256705435, 0.22870778241696121, 0.2109694751159823, 0.1264204920246561, 0.14969339402482185, 0.13546037501235764, 0.16896114258643535, 0.123246739630272, 0.18019780013803266, 0.060433041788870656, 0.023782975350538638, 0.036073029496451636, 0.08125353156040327, 0.04570970664937124, 0.06916217597973551, 0.029909708092578202, 0.04716196642523862, 0.06946810040977691, 0.11804648032796072, 0.1489917665044732, 0.14179152983450216, 0.17787784860386413, 0.14848117952528883, 0.12762406210386468, 0.15118058655977074, 0.11777920877209291, 0.1671018614874401, 0.1279921933711723, 0.14176812204174383, 0.18103676080528963, 0.17866011817179006, 0.15481565125314012, 0.16352798266783497, 0.17151416487566296, 0.21214527013885887, 0.1745957743289005, 0.06672231272013485, 0.09328264375882389, 0.12814332344669743, 0.1403542474301216, 0.10826143031493773, 0.10015321613407435, 0.13299470993639084, 0.14812058952058504, 0.1312125598643139, 0.1693715900026488, 0.12152094554752535, 0.1706482145195407, 0.1945109916518828, 0.17043596746547773, 0.18993989033056358, 0.18361042310419917, 0.15616144891579975, 0.15730421962806662, 0.14907481809646794, 0.09449077164309061, 0.16665893145130972, 0.15792819043151973, 0.07330348562171463, 0.127243836249187, 0.10320593432576719, 0.10977577330548449, 0.0891398583239923, 0.11937552746573088, 0.11724932754995077, 0.12405149515830305, 0.1368473934333706, 0.17367132726795675, 0.15724191311915459, 0.10692837481482098, 0.1643575444112364, 0.16814645691741859, 0.11031370369947613, 0.13332991878946254, 0.0767838081768043, 0.12529624306710885, 0.1480273824875229, 0.10895132300929677, 0.08781928794943428, 0.11723486640862224, 0.10158814434179642, 0.18213662216704019, 0.16982110452230992, 0.17242042101197697, 0.1931709211073307, 0.16610549881520043, 0.16500735511486597, 0.1854150109763747, 0.16688939646284673, 0.16655849849542714, 0.04260181278072794, 0.05034712035381561, 0.04706552454059765, 0.05459303048631026, 0.05825187486755712, 0.05421768541939187, 0.056708622033387335, 0.046032559788211413, 0.04312902451609446]}, "mutation_prompt": null}
