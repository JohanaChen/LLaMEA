{"id": "cb21febc-7cf9-4406-98f3-e21c8c4fadd1", "solution": "import numpy as np\n\nclass PSO_SA_Hybrid:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def fitness_function(x):\n            return func(x)\n\n        def simulated_annealing(x0, T_max=1.0, T_min=0.0001, alpha=0.95, max_iter=100):\n            def acceptance_probability(delta_e, temperature):\n                if delta_e < 0:\n                    return 1.0\n                return np.exp(-delta_e / temperature)\n\n            current_state = x0\n            best_state = current_state\n            for t in range(max_iter):\n                T = T_max * (alpha ** t)\n                new_state = current_state + np.random.uniform(-0.1, 0.1, size=self.dim)\n                delta_e = fitness_function(new_state) - fitness_function(current_state)\n                if acceptance_probability(delta_e, T) > np.random.rand():\n                    current_state = new_state\n                if fitness_function(new_state) < fitness_function(best_state):\n                    best_state = new_state\n            return best_state\n\n        def pso_sa_hybrid():\n            n_particles = 10\n            max_iter = self.budget // n_particles\n            bounds = (-5.0, 5.0)\n            swarm = np.random.uniform(bounds[0], bounds[1], size=(n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n\n            global_best = swarm[np.argmin([fitness_function(p) for p in swarm])]\n            for _ in range(max_iter):\n                for i in range(n_particles):\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = 0.5 * velocities[i] + 2.0 * r1 * (global_best - swarm[i]) + 2.0 * r2 * (simulated_annealing(swarm[i]) - swarm[i])\n                    swarm[i] = np.clip(swarm[i] + velocities[i], bounds[0], bounds[1])\n                    if fitness_function(swarm[i]) < fitness_function(global_best):\n                        global_best = swarm[i]\n\n            return global_best\n\n        return pso_sa_hybrid()", "name": "PSO_SA_Hybrid", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing for black box optimization problems.", "configspace": "", "generation": 0, "fitness": 0.09336366434276522, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.17288667573053773, 0.1751105033947612, 0.1534772988593469, 0.1520380105758874, 0.17887903320032383, 0.14129246666563033, 0.21238914533893638, 0.13521155166753196, 0.171104973255241, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06468556504541245, 0.02690937191561027, 0.00907853343355891, 0.031635230143925996, 0.016643426847794407, 0.03890541518406698, 0.03174077589873692, 0.013962415349184853, 0.020761349178741284, 0.038513360807007846, 0.028146707161050277, 0.016626444740679647, 0.043639305463168965, 0.019268194032185604, 0.02046685703856088, 0.030345181703209212, 0.006297520093019537, 0.0014049462502645493, 0.5036773056087485, 0.3767707611428087, 0.37776415742375735, 0.3611693784120704, 0.20464399662525534, 0.49622341927761104, 0.07216586856734752, 0.4866657368863445, 0.346827810554048, 0.1099920670291884, 0.029131022825072406, 0.028139292926791848, 0.043976061741643924, 0.10443038894840884, 0.07006894614068337, 0.10063024301260026, 0.04861762553513782, 0.08999661275432358, 0.1301677419204953, 0.05724377498374922, 0.04297975154137035, 0.15377190916749606, 0.0024708975572269587, 0.07187075372722862, 0.0627290025770546, 0.03457641517478516, 0.12416813038278363, 0.013908612849972135, 9.999999999998899e-05, 0.01801222152048032, 9.999999999998899e-05, 9.999999999998899e-05, 0.05847545569862955, 0.028784378533395882, 0.04503103363842842, 0.09253445968266938, 0.13370348223385697, 9.999999999998899e-05, 0.1018220350293303, 0.09247858514518015, 0.0015539240320533443, 0.06621952708336754, 0.14216343306288803, 9.999999999998899e-05, 0.08719058552597303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021528891614507994, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04576798447274011, 0.07439644598508699, 0.08074672151120288, 0.06826060014107427, 0.03481568709773741, 0.06338817307327804, 0.13408009987852387, 0.04230572987509551, 0.031187103598109167, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00850513968189548, 0.0046167276207242924, 0.0018865111276831215, 0.01883294962159221, 0.01609888067870413, 0.005773314227652038, 0.005364814875969737, 0.0014402223805555225, 0.010533672007333239, 0.1992060835379933, 0.22675567651658024, 0.22586291421824167, 0.1500061524734272, 0.14195487379486893, 0.12192507159674137, 0.19259206595907774, 0.15055678178736764, 0.17284622848684428, 0.03738570660139362, 0.018207487176247206, 0.009804636308750392, 0.02216087951863921, 0.05167413168611634, 0.05143036806782986, 0.020502652647286568, 0.0022753412207333623, 0.06483551597786663, 0.14732550454228655, 0.1671995055450305, 0.12035435060141553, 0.15241622680296185, 0.12017852175622667, 0.1509734777004731, 0.12278590018857027, 0.11988716791235399, 0.12053271063351279, 0.1252203390728771, 0.1453177556644687, 0.1209993434665384, 0.14479559126173058, 0.14041533236017623, 0.12250614137656979, 0.13947570445567814, 0.1277774198824655, 0.11814760084866904, 0.07025857255450496, 0.08243186147449577, 0.058426956281750986, 0.08252186328807143, 0.09210425842241055, 0.07090653374698364, 0.07381789797051863, 0.09541775806766872, 0.05088041116016806, 0.16300863867175086, 0.10080972982703829, 0.15718177201879102, 0.1591413592932398, 0.12281725627724482, 0.129352455064344, 0.18551714380406825, 0.15095487654574702, 0.14650003269998635, 0.1654748018361557, 0.10983754526664558, 0.12660040941366113, 0.15300707103083133, 0.1385905298408303, 0.1589353040235374, 0.16335647536976816, 0.09550826744021745, 0.09895486976084178, 0.17129552061198283, 0.10898658413371809, 0.2177274245814791, 0.16788419714247338, 0.18854245875817943, 0.10036834829704822, 0.1327095573104522, 0.11695500139417092, 0.15014071696603692, 0.14296495820915656, 0.1593024871321953, 0.174743203176574, 0.13834880232766333, 0.1127775090602563, 0.1489887111076854, 0.18510041165716085, 0.10053496869143563, 0.19919033289505783, 0.18388422327474852, 0.18606236243823482, 0.1784037937819135, 0.1743300841624179, 0.17063046441843543, 0.18473891628714356, 0.17583349556443595, 0.16920468307642822, 0.1763294059678856, 0.04718768829009168, 0.03865520538039613, 0.0489375154168048, 0.023236474644522054, 0.029219670147085375, 0.03497473393223949, 0.0573572449740517, 0.030210847458852497, 0.035390947645493]}, "mutation_prompt": null}
{"id": "3df57d28-ce77-4aae-b910-9de89fb1e0e7", "solution": "import numpy as np\n\nclass PSO_SA_Hybrid:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def fitness_function(x):\n            return func(x)\n\n        def simulated_annealing(x0, T_max=1.0, T_min=0.0001, alpha=0.95, max_iter=100):\n            def acceptance_probability(delta_e, temperature):\n                if delta_e < 0:\n                    return 1.0\n                return np.exp(-delta_e / temperature)\n\n            current_state = x0\n            best_state = current_state\n            for t in range(max_iter):\n                T = T_max * (alpha ** t)\n                new_state = current_state + np.random.uniform(-0.1, 0.1, size=self.dim)\n                delta_e = fitness_function(new_state) - fitness_function(current_state)\n                if acceptance_probability(delta_e, T) > np.random.rand():\n                    current_state = new_state\n                if fitness_function(new_state) < fitness_function(best_state):\n                    best_state = new_state\n            return best_state\n\n        def pso_sa_hybrid():\n            n_particles = 10\n            max_iter = self.budget // n_particles\n            bounds = (-5.0, 5.0)\n            swarm = np.random.uniform(bounds[0], bounds[1], size=(n_particles, self.dim))\n            velocities = np.zeros((n_particles, self.dim))\n\n            global_best = swarm[np.argmin([fitness_function(p) for p in swarm])]\n            for _ in range(max_iter):\n                for i in range(n_particles):\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = 0.5 * velocities[i] + 2.0 * r1 * (global_best - swarm[i]) + 2.0 * r2 * (simulated_annealing(swarm[i]) - swarm[i])\n                    swarm[i] = np.clip(swarm[i] + velocities[i], bounds[0], bounds[1])\n                    if fitness_function(swarm[i]) < fitness_function(global_best):\n                        global_best = swarm[i]\n\n            return global_best\n\n        return pso_sa_hybrid()", "name": "PSO_SA_Hybrid", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb21febc-7cf9-4406-98f3-e21c8c4fadd1", "metadata": {"aucs": [0.17288667573053773, 0.1751105033947612, 0.1534772988593469, 0.1520380105758874, 0.17887903320032383, 0.14129246666563033, 0.21238914533893638, 0.13521155166753196, 0.171104973255241, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06468556504541245, 0.02690937191561027, 0.00907853343355891, 0.031635230143925996, 0.016643426847794407, 0.03890541518406698, 0.03174077589873692, 0.013962415349184853, 0.020761349178741284, 0.038513360807007846, 0.028146707161050277, 0.016626444740679647, 0.043639305463168965, 0.019268194032185604, 0.02046685703856088, 0.030345181703209212, 0.006297520093019537, 0.0014049462502645493, 0.5036773056087485, 0.3767707611428087, 0.37776415742375735, 0.3611693784120704, 0.20464399662525534, 0.49622341927761104, 0.07216586856734752, 0.4866657368863445, 0.346827810554048, 0.1099920670291884, 0.029131022825072406, 0.028139292926791848, 0.043976061741643924, 0.10443038894840884, 0.07006894614068337, 0.10063024301260026, 0.04861762553513782, 0.08999661275432358, 0.1301677419204953, 0.05724377498374922, 0.04297975154137035, 0.15377190916749606, 0.0024708975572269587, 0.07187075372722862, 0.0627290025770546, 0.03457641517478516, 0.12416813038278363, 0.013908612849972135, 9.999999999998899e-05, 0.01801222152048032, 9.999999999998899e-05, 9.999999999998899e-05, 0.05847545569862955, 0.028784378533395882, 0.04503103363842842, 0.09253445968266938, 0.13370348223385697, 9.999999999998899e-05, 0.1018220350293303, 0.09247858514518015, 0.0015539240320533443, 0.06621952708336754, 0.14216343306288803, 9.999999999998899e-05, 0.08719058552597303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021528891614507994, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04576798447274011, 0.07439644598508699, 0.08074672151120288, 0.06826060014107427, 0.03481568709773741, 0.06338817307327804, 0.13408009987852387, 0.04230572987509551, 0.031187103598109167, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00850513968189548, 0.0046167276207242924, 0.0018865111276831215, 0.01883294962159221, 0.01609888067870413, 0.005773314227652038, 0.005364814875969737, 0.0014402223805555225, 0.010533672007333239, 0.1992060835379933, 0.22675567651658024, 0.22586291421824167, 0.1500061524734272, 0.14195487379486893, 0.12192507159674137, 0.19259206595907774, 0.15055678178736764, 0.17284622848684428, 0.03738570660139362, 0.018207487176247206, 0.009804636308750392, 0.02216087951863921, 0.05167413168611634, 0.05143036806782986, 0.020502652647286568, 0.0022753412207333623, 0.06483551597786663, 0.14732550454228655, 0.1671995055450305, 0.12035435060141553, 0.15241622680296185, 0.12017852175622667, 0.1509734777004731, 0.12278590018857027, 0.11988716791235399, 0.12053271063351279, 0.1252203390728771, 0.1453177556644687, 0.1209993434665384, 0.14479559126173058, 0.14041533236017623, 0.12250614137656979, 0.13947570445567814, 0.1277774198824655, 0.11814760084866904, 0.07025857255450496, 0.08243186147449577, 0.058426956281750986, 0.08252186328807143, 0.09210425842241055, 0.07090653374698364, 0.07381789797051863, 0.09541775806766872, 0.05088041116016806, 0.16300863867175086, 0.10080972982703829, 0.15718177201879102, 0.1591413592932398, 0.12281725627724482, 0.129352455064344, 0.18551714380406825, 0.15095487654574702, 0.14650003269998635, 0.1654748018361557, 0.10983754526664558, 0.12660040941366113, 0.15300707103083133, 0.1385905298408303, 0.1589353040235374, 0.16335647536976816, 0.09550826744021745, 0.09895486976084178, 0.17129552061198283, 0.10898658413371809, 0.2177274245814791, 0.16788419714247338, 0.18854245875817943, 0.10036834829704822, 0.1327095573104522, 0.11695500139417092, 0.15014071696603692, 0.14296495820915656, 0.1593024871321953, 0.174743203176574, 0.13834880232766333, 0.1127775090602563, 0.1489887111076854, 0.18510041165716085, 0.10053496869143563, 0.19919033289505783, 0.18388422327474852, 0.18606236243823482, 0.1784037937819135, 0.1743300841624179, 0.17063046441843543, 0.18473891628714356, 0.17583349556443595, 0.16920468307642822, 0.1763294059678856, 0.04718768829009168, 0.03865520538039613, 0.0489375154168048, 0.023236474644522054, 0.029219670147085375, 0.03497473393223949, 0.0573572449740517, 0.030210847458852497, 0.035390947645493]}, "mutation_prompt": null}
