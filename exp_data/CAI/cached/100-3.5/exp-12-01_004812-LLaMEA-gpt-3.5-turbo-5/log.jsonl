{"id": "bc04a82f-3ab1-48a9-9c79-60cb483ea9ce", "solution": "import numpy as np\n\nclass DEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def fitness(x):\n            return func(x)\n        \n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n        \n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        best_position = population[np.argmin([fitness(ind) for ind in population])]\n        best_fitness = fitness(best_position)\n        \n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                r1, r2, r3 = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant = clip(population[r1] + 0.5 * (population[r2] - population[r3]))\n                velocities[i] = 0.9 * velocities[i] + 0.8 * (best_position - population[i]) + 0.5 * (mutant - population[i])\n                population[i] = clip(population[i] + velocities[i])\n                \n                if fitness(population[i]) < fitness(best_position):\n                    best_position = population[i]\n                    best_fitness = fitness(best_position)\n        \n        return best_position", "name": "DEPSO", "description": "An innovative metaheuristic algorithm combining Differential Evolution and Particle Swarm Optimization to efficiently explore and exploit the search space for black box optimization.", "configspace": "", "generation": 0, "fitness": 0.0868864947829834, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.11459755822441764, 0.12257498561074476, 0.1639838692259904, 0.16842282678337728, 0.12009163907702058, 0.16870376649998686, 0.08332443902608722, 0.12361957365334797, 0.15963522791281615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0145078777188411, 0.024843402362458855, 0.01154608726858819, 0.010643411704069683, 0.007475841659002946, 0.027570948827671415, 0.030137481706549396, 0.01405530209884387, 0.03349564165719798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 0.011265470354189344, 0.008701250554091322, 9.999999999998899e-05, 0.014869601946201128, 9.999999999998899e-05, 0.9755848300190693, 0.9877700290076099, 0.9933343290633805, 0.09961111627865848, 0.9814138062193485, 0.9840749361139477, 0.08868614176816869, 0.9844928174743586, 0.9921744034245559, 0.05893085120926933, 0.05789011571673186, 0.058271177751372694, 0.06068566790431629, 0.020528478314071785, 0.05448523199625088, 0.09667776826641128, 0.0634912560157389, 0.0366058180677068, 0.10162576747462226, 0.038817594035265524, 0.029197839589918506, 0.032751878010377045, 0.09395147668514814, 0.08532956485172638, 0.044955734134204395, 0.10846987809766728, 0.06714145958006179, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006534383146811318, 0.011126629865912063, 0.009584353880600749, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14603006190477918, 0.18484702323184032, 0.1833592402915022, 0.11633954781647904, 0.1200402162017894, 0.17348760016758402, 0.17581722981926762, 0.12324132443339753, 0.1210557193025883, 0.0072210156455939645, 0.054184804859514046, 0.022861288721526374, 0.028082922496566742, 0.022697249695005084, 0.01759993274736349, 0.0032804580324442556, 0.03230138669988791, 0.0267656688986897, 0.12130987443436603, 0.08484246369889137, 0.07955693114787532, 0.10239921039058131, 0.10852972522114013, 0.0907998515835916, 0.10947596328894671, 0.08375687967709378, 0.0804275600794141, 0.12360178368633845, 0.15263320293385474, 0.10446882054430695, 0.13099841132325252, 0.11607720113004127, 0.14546411675784987, 0.14437720175522262, 0.17519393728576993, 0.12419613588758005, 0.11121753889304786, 0.051182964470340764, 0.10669951264043775, 0.0687485892132752, 0.06406947898089654, 0.06288222514660646, 0.08904242679393082, 0.11335170118678306, 0.056059773542337266, 0.10603091614036164, 0.1335434094165706, 0.13345086981233123, 0.12193832047865016, 0.0916057143268284, 0.18520878520289774, 0.12245976138762271, 0.10926415223302521, 0.1261963614278906, 9.999999999998899e-05, 0.13895335725027724, 9.999999999998899e-05, 9.999999999998899e-05, 0.13432872461081002, 0.13665306876170202, 0.07974100685523444, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568623559107733, 0.07466602457976645, 0.09984915178886844, 0.112790086831286, 0.1207914665021157, 0.11343674545807447, 0.08680971505089141, 0.12420490277033236, 0.11249491038572468, 0.05909776329987981, 0.06533509616680999, 0.025917120399299942, 0.0506857903344724, 0.06673649871332288, 0.053029840369224424, 0.16185442221324953, 0.05424409758730275, 0.045363123174637976, 0.14280505583635839, 0.18110486394339464, 0.14763022729669195, 0.12828295949087443, 0.15230527469807564, 0.13930078474666296, 0.13781857103314765, 0.1367009216932178, 0.21038161823141632, 0.025801149048264915, 0.023881105914189127, 0.031393493129599714, 0.03373733327574846, 0.035689392096832306, 0.023122651561465313, 0.014110386547103504, 0.018002695245132205, 0.037609518144938736]}, "mutation_prompt": null}
{"id": "4f48c4d0-9dcc-4668-a252-dabd28e7963f", "solution": "import numpy as np\n\nclass DEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iterations = budget // self.population_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def fitness(x):\n            return func(x)\n        \n        def clip(x):\n            return np.clip(x, self.lb, self.ub)\n        \n        population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        best_position = population[np.argmin([fitness(ind) for ind in population])]\n        best_fitness = fitness(best_position)\n        \n        for _ in range(self.max_iterations):\n            for i in range(self.population_size):\n                r1, r2, r3 = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant = clip(population[r1] + 0.5 * (population[r2] - population[r3]))\n                velocities[i] = 0.9 * velocities[i] + 0.8 * (best_position - population[i]) + 0.5 * (mutant - population[i])\n                population[i] = clip(population[i] + velocities[i])\n                \n                if fitness(population[i]) < fitness(best_position):\n                    best_position = population[i]\n                    best_fitness = fitness(best_position)\n        \n        return best_position", "name": "DEPSO", "description": "An innovative metaheuristic algorithm combining Differential Evolution and Particle Swarm Optimization to efficiently explore and exploit the search space for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bc04a82f-3ab1-48a9-9c79-60cb483ea9ce", "metadata": {"aucs": [0.11459755822441764, 0.12257498561074476, 0.1639838692259904, 0.16842282678337728, 0.12009163907702058, 0.16870376649998686, 0.08332443902608722, 0.12361957365334797, 0.15963522791281615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0145078777188411, 0.024843402362458855, 0.01154608726858819, 0.010643411704069683, 0.007475841659002946, 0.027570948827671415, 0.030137481706549396, 0.01405530209884387, 0.03349564165719798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 0.011265470354189344, 0.008701250554091322, 9.999999999998899e-05, 0.014869601946201128, 9.999999999998899e-05, 0.9755848300190693, 0.9877700290076099, 0.9933343290633805, 0.09961111627865848, 0.9814138062193485, 0.9840749361139477, 0.08868614176816869, 0.9844928174743586, 0.9921744034245559, 0.05893085120926933, 0.05789011571673186, 0.058271177751372694, 0.06068566790431629, 0.020528478314071785, 0.05448523199625088, 0.09667776826641128, 0.0634912560157389, 0.0366058180677068, 0.10162576747462226, 0.038817594035265524, 0.029197839589918506, 0.032751878010377045, 0.09395147668514814, 0.08532956485172638, 0.044955734134204395, 0.10846987809766728, 0.06714145958006179, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006534383146811318, 0.011126629865912063, 0.009584353880600749, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14603006190477918, 0.18484702323184032, 0.1833592402915022, 0.11633954781647904, 0.1200402162017894, 0.17348760016758402, 0.17581722981926762, 0.12324132443339753, 0.1210557193025883, 0.0072210156455939645, 0.054184804859514046, 0.022861288721526374, 0.028082922496566742, 0.022697249695005084, 0.01759993274736349, 0.0032804580324442556, 0.03230138669988791, 0.0267656688986897, 0.12130987443436603, 0.08484246369889137, 0.07955693114787532, 0.10239921039058131, 0.10852972522114013, 0.0907998515835916, 0.10947596328894671, 0.08375687967709378, 0.0804275600794141, 0.12360178368633845, 0.15263320293385474, 0.10446882054430695, 0.13099841132325252, 0.11607720113004127, 0.14546411675784987, 0.14437720175522262, 0.17519393728576993, 0.12419613588758005, 0.11121753889304786, 0.051182964470340764, 0.10669951264043775, 0.0687485892132752, 0.06406947898089654, 0.06288222514660646, 0.08904242679393082, 0.11335170118678306, 0.056059773542337266, 0.10603091614036164, 0.1335434094165706, 0.13345086981233123, 0.12193832047865016, 0.0916057143268284, 0.18520878520289774, 0.12245976138762271, 0.10926415223302521, 0.1261963614278906, 9.999999999998899e-05, 0.13895335725027724, 9.999999999998899e-05, 9.999999999998899e-05, 0.13432872461081002, 0.13665306876170202, 0.07974100685523444, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568623559107733, 0.07466602457976645, 0.09984915178886844, 0.112790086831286, 0.1207914665021157, 0.11343674545807447, 0.08680971505089141, 0.12420490277033236, 0.11249491038572468, 0.05909776329987981, 0.06533509616680999, 0.025917120399299942, 0.0506857903344724, 0.06673649871332288, 0.053029840369224424, 0.16185442221324953, 0.05424409758730275, 0.045363123174637976, 0.14280505583635839, 0.18110486394339464, 0.14763022729669195, 0.12828295949087443, 0.15230527469807564, 0.13930078474666296, 0.13781857103314765, 0.1367009216932178, 0.21038161823141632, 0.025801149048264915, 0.023881105914189127, 0.031393493129599714, 0.03373733327574846, 0.035689392096832306, 0.023122651561465313, 0.014110386547103504, 0.018002695245132205, 0.037609518144938736]}, "mutation_prompt": null}
