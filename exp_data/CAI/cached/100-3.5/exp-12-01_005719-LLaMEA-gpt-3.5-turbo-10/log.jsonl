{"id": "31ebb888-6ab9-47b1-b3a4-1e47ba9de002", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, c1=2.0, c2=2.0, w=0.9, max_temp=10.0, min_temp=0.001, cooling_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.max_temp = max_temp\n        self.min_temp = min_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        def pso_sa_optimize():\n            # PSO initialization\n            swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            swarm_velocity = np.zeros((self.swarm_size, self.dim))\n            pbest_position = swarm_position.copy()\n            pbest_value = np.full(self.swarm_size, np.inf)\n            gbest_position = np.zeros(self.dim)\n            gbest_value = np.inf\n\n            # SA initialization\n            temperature = self.max_temp\n\n            for _ in range(self.budget):\n                # PSO update\n                for i in range(self.swarm_size):\n                    fitness = func(swarm_position[i])\n                    if fitness < pbest_value[i]:\n                        pbest_value[i] = fitness\n                        pbest_position[i] = swarm_position[i].copy()\n                    if fitness < gbest_value:\n                        gbest_value = fitness\n                        gbest_position = swarm_position[i].copy()\n\n                    r1, r2 = np.random.rand(), np.random.rand()\n                    swarm_velocity[i] = self.w * swarm_velocity[i] + self.c1 * r1 * (pbest_position[i] - swarm_position[i]) + self.c2 * r2 * (gbest_position - swarm_position[i])\n                    swarm_position[i] += swarm_velocity[i]\n                    swarm_position[i] = np.clip(swarm_position[i], -5.0, 5.0)\n\n                # SA update\n                for i in range(self.swarm_size):\n                    new_position = pbest_position[i] + np.random.uniform(-1, 1, self.dim) * temperature\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    new_fitness = func(new_position)\n                    current_fitness = func(pbest_position[i])\n                    if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                        pbest_position[i] = new_position\n                        pbest_value[i] = new_fitness\n\n                temperature *= self.cooling_rate\n\n            return gbest_position\n\n        return pso_sa_optimize()\n        ", "name": "PSO_SA_Optimizer", "description": "Metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to explore the search space efficiently and escape local optima.", "configspace": "", "generation": 0, "fitness": 0.1832930446330331, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.3564194881479098, 0.2999895187773153, 0.3534354338305329, 0.33410837450715114, 0.294478988348306, 0.32090666715934346, 0.2967148202724367, 0.32989877191546757, 0.31219189069991904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02528286285295689, 9.999999999998899e-05, 0.08019167661860316, 0.08642904006489116, 0.12487854009911092, 0.09590133240693999, 0.09046379148189954, 0.10068806896198967, 0.0818580058396099, 0.1125862371179257, 0.11855327339193578, 0.13519356102037072, 0.06267467112506275, 0.08010638722337027, 0.08330810113152676, 0.07969097925471835, 0.08457867177706757, 0.08753102948441371, 0.06386266518155992, 0.06480060303494661, 0.9845936569934886, 0.9894920136092508, 0.9876626032284695, 0.9348171187564009, 0.9741176597300278, 0.966247582514748, 0.9757111324800762, 0.9884644873238778, 0.9667721031839307, 0.1383331081503797, 0.1609780266822166, 0.15416086722896616, 0.17050795189808743, 0.15535834738785592, 0.1556866728721421, 0.16116758606976722, 0.12259007958990131, 0.13707115214503396, 0.19474886440927675, 0.17121514288152406, 0.15201658413008556, 0.2623013584077778, 0.19570570661946474, 0.21342797616713405, 0.15686209101242843, 0.21423979972615848, 0.2108684728510818, 0.14130429508823095, 0.1124889708710669, 0.12434243042101445, 0.1101610393645418, 0.13875977599971234, 0.15475584909491558, 0.1355136205920351, 0.08880014965199245, 0.1529967534763036, 0.10783832660599602, 0.07929803474483832, 0.13740531417269286, 0.11083563471184443, 0.11320565795994375, 0.14385074083121385, 0.2073111488272561, 0.08540177793780224, 0.08541965911585936, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011820607994655119, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006371842843829856, 9.999999999998899e-05, 0.09085019080795609, 0.050218105416740544, 0.07666266999636517, 0.0482318220039295, 0.1279756042816036, 0.087720934972641, 0.08159308125026798, 0.04650102596977779, 0.06263200847696349, 0.02997572691151329, 0.011636174109235786, 0.08271770085024133, 0.05394166129743805, 0.03273789425113116, 0.07350062465334672, 0.06767538201305356, 0.03364979000746171, 0.02760080480298599, 0.1314480245264964, 0.11456329005985333, 0.08813385031607435, 0.06491299478907309, 0.11187806431596115, 0.058627780096092486, 0.05972993271750693, 0.09199901119977016, 0.07614834614422383, 0.26958911818833453, 0.32763040027257717, 0.31864144331965305, 0.31329661247807505, 0.345375972481739, 0.3311431382908263, 0.3473099313770207, 0.3031621004364107, 0.3196330647902954, 0.07374512525430887, 0.10315228326312786, 0.09955945328773141, 0.10385581922710807, 0.08550502472932475, 0.10173741545385151, 0.07245382893607288, 0.09621924610189181, 0.08416084266928625, 0.18414358057867064, 0.16219519937277704, 0.1815805110041666, 0.2380813667870213, 0.21858064024580315, 0.15056150138487356, 0.21562733951615642, 0.18663372413172796, 0.18301135856026884, 0.22260280899887364, 0.2676739360165, 0.21838750765223514, 0.20406138966504772, 0.20067615997657695, 0.20146689599219425, 0.2101910430613133, 0.25940557099797756, 0.25566488198929194, 0.1708824116248403, 0.19861396752473692, 0.16218032522287684, 0.18325959917471102, 0.15855900386859956, 0.19772039893295124, 0.17406920538414727, 0.2023376805404743, 0.1709666177090019, 0.20457809550886163, 0.18476032687552602, 0.18191541509196318, 0.24240074729134775, 0.20672141586763548, 0.1745458766271044, 0.20956629580172415, 0.18968202571970505, 0.21728673142664057, 0.19165356849518034, 0.16451457741734377, 0.18386638011054013, 0.1889137320612918, 0.19133227099138528, 0.18011367609914053, 0.18925072261190168, 0.19295660994773822, 0.18261821177618087, 0.18269994468839634, 0.17005120402497054, 0.15786932843118606, 0.3838864836946756, 0.20154201794037196, 0.2167216249038021, 0.1611328876799829, 0.18098308851556044, 0.19402569882112863, 0.3391099119593941, 0.17558803061124928, 0.2651609398746858, 0.19169665392075141, 0.33974733435242443, 0.1945651379777531, 0.20343660735963554, 0.20024340991234846, 0.19869662867853, 0.19132128607797916, 0.1993191293945129, 0.1985982187004296, 0.19876327593681598, 0.19743957753799646, 0.19470193251478662, 0.21378282233203438, 0.20418302851544334, 0.19302378249665575, 0.09581239959407617, 0.07771551779909003, 0.07729751123364237, 0.07658727578946434, 0.08120398174163379, 0.07685538959707428, 0.07225853903482171, 0.07472111659734804, 0.07408807198155332]}, "mutation_prompt": null}
{"id": "9102b838-c19e-4d8b-9951-ce9265498634", "solution": "import numpy as np\n\nclass Improved_PSO_SA_Optimizer(PSO_SA_Optimizer):\n    def __call__(self, func):\n        def improved_pso_sa_optimize():\n            # PSO initialization\n            swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            swarm_velocity = np.zeros((self.swarm_size, self.dim))\n            pbest_position = swarm_position.copy()\n            pbest_value = np.full(self.swarm_size, np.inf)\n            gbest_position = np.zeros(self.dim)\n            gbest_value = np.inf\n\n            # SA initialization\n            temperature = self.max_temp\n\n            for _ in range(self.budget):\n                # PSO update\n                for i in range(self.swarm_size):\n                    fitness = func(swarm_position[i])\n                    if fitness < pbest_value[i]:\n                        pbest_value[i] = fitness\n                        pbest_position[i] = swarm_position[i].copy()\n                    if fitness < gbest_value:\n                        gbest_value = fitness\n                        gbest_position = swarm_position[i].copy()\n\n                    r1, r2 = np.random.rand(), np.random.rand()\n                    inertia_weight = self.w * (1.0 - _ / self.budget)  # Dynamic inertia weight adaptation\n                    swarm_velocity[i] = inertia_weight * swarm_velocity[i] + self.c1 * r1 * (pbest_position[i] - swarm_position[i]) + self.c2 * r2 * (gbest_position - swarm_position[i])\n                    swarm_position[i] += swarm_velocity[i]\n                    swarm_position[i] = np.clip(swarm_position[i], -5.0, 5.0)\n\n                # SA update\n                for i in range(self.swarm_size):\n                    new_position = pbest_position[i] + np.random.uniform(-1, 1, self.dim) * temperature\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    new_fitness = func(new_position)\n                    current_fitness = func(pbest_position[i])\n                    if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                        pbest_position[i] = new_position\n                        pbest_value[i] = new_fitness\n\n                temperature *= self.cooling_rate\n\n            return gbest_position\n\n        return improved_pso_sa_optimize()", "name": "Improved_PSO_SA_Optimizer", "description": "Improved PSO_SA_Optimizer algorithm with dynamic inertia weight adaptation.", "configspace": "", "generation": 1, "fitness": 0.1835365041757342, "feedback": "", "error": "", "parent_id": "31ebb888-6ab9-47b1-b3a4-1e47ba9de002", "metadata": {"aucs": [0.3123104158505069, 0.28781466511221854, 0.2910948736942671, 0.299122344688188, 0.3169100400160374, 0.31213494224337246, 0.2903876352410253, 0.3320317247301495, 0.31210406260018375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011306308940068455, 9.999999999998899e-05, 9.999999999998899e-05, 0.022054405662637833, 9.999999999998899e-05, 0.08264258083067921, 0.08742456785125363, 0.11828879842588835, 0.12886094558924965, 0.09182224635204184, 0.10373876555673145, 0.08689465788323392, 0.08098094576700055, 0.10818268486272187, 0.11387885788944296, 0.06378026889655486, 0.08405776963557798, 0.08215718280830386, 0.07865185733387747, 0.06574650278108807, 0.08325420496832392, 0.0655837452199497, 0.06953191812800341, 0.9845936569934886, 0.9894920136092508, 0.9876626032284695, 0.934812890367288, 0.974117777389291, 0.9662475565408185, 0.9757111609147546, 0.9884644873238778, 0.9667721406482064, 0.17291171134669625, 0.15699617610298533, 0.13833733680605598, 0.19166034435705537, 0.15505709887485042, 0.15610506913894373, 0.15335568655137088, 0.14858603002871418, 0.12499735480666063, 0.23122837371803295, 0.20732023237912445, 0.1546828592063515, 0.20087154892320036, 0.2444454962598327, 0.224179133617332, 0.20395078023426372, 0.2170488352980804, 0.2682989946363026, 0.13576810353190816, 0.10515200217596044, 0.11214779414249099, 0.09851889906606104, 0.13027569548529627, 0.11174922110887875, 0.12464071996783044, 0.09610577314282853, 0.16628513479113682, 0.1050611453078647, 0.08603010612672646, 0.10446859921267182, 0.1443198813065264, 0.12630876737671948, 0.14180239144679285, 0.20794241448008555, 0.14061649388293895, 0.09629825988377361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.072994820931504, 0.008588827658314035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09443936405303743, 0.06100732955320454, 0.08466751193423572, 0.07835530039007677, 0.14302783041284783, 0.0716057537301431, 0.0891618810515451, 0.045275228538931844, 0.06781344539459355, 0.07833437918648145, 0.011084232995261512, 0.04008429935641922, 0.058597376971953996, 0.0005800527917523279, 0.023805399792827253, 0.06184631258860995, 0.025785448637381303, 0.02121683068318203, 0.12421608179621468, 0.09188456668019007, 0.1265900131101123, 0.061930115084889104, 0.07025128967761352, 0.0782841148952852, 0.05234252216721924, 0.06073257139026522, 0.08070750055734244, 0.27317045748276947, 0.334279246212867, 0.33723223092647303, 0.2729915423210394, 0.3107378751749581, 0.2683267369389245, 0.27722620134354825, 0.2472560019875083, 0.2910455613448729, 0.0964998337569194, 0.11477012851029922, 0.08839620603314358, 0.09815885098427402, 0.08174802163806505, 0.1300350360093565, 0.09583815026801423, 0.09382916467604596, 0.0943691979654544, 0.15660007710981716, 0.20663235832357296, 0.14188303844675831, 0.31205605751792886, 0.24557390351084274, 0.23829702406447717, 0.19892366228037206, 0.17794174460818735, 0.1903956031525258, 0.22002249758028836, 0.21782058567464857, 0.21415539481845258, 0.22970392822562846, 0.20493258759915534, 0.22184947834191437, 0.22953869152885387, 0.2505881459211521, 0.20505544367866058, 0.18838804380258567, 0.18954576594175865, 0.16754438724337728, 0.18464358379149626, 0.1458497399837001, 0.2040855502151977, 0.1889935019741812, 0.20419038534105238, 0.20227237791193142, 0.1912423497283493, 0.17790855466486832, 0.18210760220244415, 0.1943818300642559, 0.17969796373357405, 0.18186764286408097, 0.19271544915222016, 0.19829837148237173, 0.2074336895547132, 0.17967941485235261, 0.15745897585786717, 0.17866358720574604, 0.18819009680956755, 0.21242184737435832, 0.1730937759433826, 0.18920329793214585, 0.18144211810277844, 0.18785875484774073, 0.18375544574899327, 0.16350753579718624, 0.1545298007003748, 0.3867036176937224, 0.2366664961573901, 0.25475387259250193, 0.15708016063648633, 0.17641260707344464, 0.27356291443704295, 0.3680394783379828, 0.18565178998171528, 0.31614396206197903, 0.18901947115833928, 0.28413536572507414, 0.19253432876093735, 0.20270135767367747, 0.20099307149615908, 0.19748795628172966, 0.1999423424658373, 0.21104579141517643, 0.21021909462456234, 0.19270402039484824, 0.20916002244853704, 0.20305566834146782, 0.20050710122358772, 0.19445047457556808, 0.19947630131726368, 0.09071313983484997, 0.07065415910098471, 0.07106276945496515, 0.08426992188632432, 0.0782860062898908, 0.06090787136207343, 0.07036308851134332, 0.07424056070899099, 0.08132893784391437]}, "mutation_prompt": null}
