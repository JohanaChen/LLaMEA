{"id": "ecf14f51-6a05-486f-8dd7-bba053164827", "solution": "import numpy as np\n\nclass PSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.global_best_pos = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_val = float('inf')\n        self.pop_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.pop_velocities = np.zeros((self.pop_size, self.dim))\n        self.local_best_pos = np.copy(self.pop_positions)\n        self.local_best_val = np.full(self.pop_size, float('inf'))\n        self.inertia_weight = 0.9\n\n    def __call__(self, func):\n        evaluate_count = 0\n        for iter_count in range(self.max_iter):\n            for i in range(self.pop_size):\n                fitness_val = func(self.pop_positions[i])\n                evaluate_count += 1\n                if fitness_val < self.local_best_val[i]:\n                    self.local_best_val[i] = fitness_val\n                    self.local_best_pos[i] = np.copy(self.pop_positions[i])\n                \n                if fitness_val < self.global_best_val:\n                    self.global_best_val = fitness_val\n                    self.global_best_pos = np.copy(self.pop_positions[i])\n                \n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.pop_velocities[i] = self.inertia_weight * self.pop_velocities[i] + self.c1 * r1 * (self.local_best_pos[i] - self.pop_positions[i]) + self.c2 * r2 * (self.global_best_pos - self.pop_positions[i])\n                self.pop_positions[i] = np.clip(self.pop_positions[i] + self.pop_velocities[i], self.lower_bound, self.upper_bound)\n                \n                if evaluate_count >= self.budget:\n                    return self.global_best_pos\n        return self.global_best_pos", "name": "PSO", "description": "Particle Swarm Optimization with Dynamic Inertia Weight and Randomized Topology for Black Box Optimization", "configspace": "", "generation": 0, "fitness": 0.18030751021757999, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.3767765738534181, 0.3502336101940564, 0.35757814962783563, 0.4140311054778707, 0.38670598938759115, 0.46814921700583767, 0.34972410654627295, 0.3571834317982362, 0.37582967630958763, 0.0607253434396694, 0.0031805463769347675, 0.025389733523471847, 0.05209049588963166, 0.013133300390090197, 0.06998193414422227, 0.10137128435466347, 0.11892605650470156, 0.0, 0.0964240228634291, 0.07535849727292365, 0.07834955527137921, 0.11383567091115787, 0.11371191754033005, 0.07227117170812403, 0.08322306721002226, 0.08842271992927131, 0.09900505481437627, 0.07687727460858063, 0.06792546469569893, 0.07355052991236388, 0.06821809955917013, 0.10728849753641989, 0.09090716134218424, 0.0709971658662174, 0.057460697585183684, 0.042227430240249664, 0.9908284888959247, 0.9884857338523698, 0.9904621856735373, 0.9852548688201769, 0.9867901045197428, 0.9849564680707878, 0.9862684537420305, 0.988781878564882, 0.9883746354000169, 0.10719470151874244, 0.18603010647306406, 0.05910715014639156, 0.20253828293033171, 0.13922407508088486, 0.14301480657775156, 0.08295195073484463, 0.08743719534333683, 0.07642517583172082, 0.21771786664745307, 0.17326002417161068, 0.16453801247948463, 0.19138386784828887, 0.18936346899148748, 0.18992167235709834, 0.20824655146119364, 0.21884186772309866, 0.11627915861489913, 0.1059205232391256, 0.12579346092183952, 0.1097496154252744, 0.0685014020717053, 0.128555747986839, 0.06953391354775451, 0.1350617778892934, 0.10308304970760351, 0.10936192462662364, 0.09380244448136343, 0.016585753653319824, 0.09867669251633415, 0.10909254422842463, 0.12747067990873462, 0.1176809319850507, 0.12274118632076603, 0.014952821961940588, 0.11837417003583683, 0.0, 0.0, 0.0, 0.024908557302985357, 0.0, 0.0020783266793872324, 0.0, 0.0, 0.0, 0.0954287262823098, 0.03344871680837236, 0.10218077237471024, 0.006756140835701863, 0.0, 0.02591066104456785, 0.029207444546709982, 0.06048804746398073, 0.01648627498945221, 0.0, 0.0, 0.008913788046881699, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06835218005132593, 0.03159255752111345, 0.060330086606557254, 0.056606784445455194, 0.0, 0.042922976699318105, 0.057114832598676, 0.04259080491798617, 0.062022575154581316, 0.3256335331974961, 0.32791370760448346, 0.3488111148144295, 0.3768814904523424, 0.34234507638235834, 0.2079292771938951, 0.3440155447868224, 0.35915871647164654, 0.37326058141635166, 0.09777333358940232, 0.0580533380539755, 0.0921846358037115, 0.10190843762828095, 0.0895871578739803, 0.09809713422672117, 0.05238837497196325, 0.0653717028666253, 0.07955424792026455, 0.18391558082614468, 0.16265467453984161, 0.21029209764952328, 0.18601063970424236, 0.20939279056031057, 0.22249876802494728, 0.18200263319034526, 0.18798638677848967, 0.19321444738889482, 0.26207644767980987, 0.17356150735222986, 0.25167788909409805, 0.24198729038563138, 0.24602181233331444, 0.24683426990388324, 0.18928701279921656, 0.27936669698997363, 0.17988980351040484, 0.18016221180522518, 0.14762096027117766, 0.1649451817074823, 0.15325404342922755, 0.13065272392147564, 0.17523631375894078, 0.20653862017618763, 0.22493878844890036, 0.20024278107425597, 0.19781442384205572, 0.16184711265666718, 0.1965869341136285, 0.21746940166898188, 0.19194169814606576, 0.20164238564019188, 0.16533492610786238, 0.19333137483292495, 0.20775004220097082, 0.1926083394755771, 0.17922147850700998, 0.17469081956733812, 0.17346461137169422, 0.17495916899783392, 0.17402414124829702, 0.1750750338292122, 0.1819154933088084, 0.18366554304192206, 0.3162868779433635, 0.16831959157208243, 0.14886153126549073, 0.4936275343463149, 0.3766438186878055, 0.3647409326915573, 0.12196721526568688, 0.16958010033982596, 0.18299480910330823, 0.4007608980332452, 0.25991009932733056, 0.22607395400208408, 0.28346628864067047, 0.20622710714470305, 0.20393215881378868, 0.2082674386286374, 0.2009247368048701, 0.19888628085409932, 0.16466015559986058, 0.18249254282580518, 0.19457623784142097, 0.18359907674093767, 0.17883423936615805, 0.1825275500527601, 0.20959734777033756, 0.18055917064140903, 0.18541600727769525, 0.08136089150874637, 0.07144046463309073, 0.08071205707950901, 0.07213500818933394, 0.07894235153228579, 0.06810303640917226, 0.07295312140641019, 0.08256665538032226, 0.06498001112096441]}, "mutation_prompt": null}
{"id": "748ce959-c613-45a4-8d10-0c46e40538aa", "solution": "import numpy as np\n\nclass PSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.global_best_pos = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_val = float('inf')\n        self.pop_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.pop_velocities = np.zeros((self.pop_size, self.dim))\n        self.local_best_pos = np.copy(self.pop_positions)\n        self.local_best_val = np.full(self.pop_size, float('inf'))\n        self.inertia_weight = 0.9\n\n    def __call__(self, func):\n        evaluate_count = 0\n        for iter_count in range(self.max_iter):\n            for i in range(self.pop_size):\n                fitness_val = func(self.pop_positions[i])\n                evaluate_count += 1\n                if fitness_val < self.local_best_val[i]:\n                    self.local_best_val[i] = fitness_val\n                    self.local_best_pos[i] = np.copy(self.pop_positions[i])\n                \n                if fitness_val < self.global_best_val:\n                    self.global_best_val = fitness_val\n                    self.global_best_pos = np.copy(self.pop_positions[i])\n                \n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.pop_velocities[i] = self.inertia_weight * self.pop_velocities[i] + self.c1 * r1 * (self.local_best_pos[i] - self.pop_positions[i]) + self.c2 * r2 * (self.global_best_pos - self.pop_positions[i])\n                self.pop_positions[i] = np.clip(self.pop_positions[i] + self.pop_velocities[i], self.lower_bound, self.upper_bound)\n                \n                if evaluate_count >= self.budget:\n                    return self.global_best_pos\n        return self.global_best_pos", "name": "PSO", "description": "Particle Swarm Optimization with Dynamic Inertia Weight and Randomized Topology for Black Box Optimization", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ecf14f51-6a05-486f-8dd7-bba053164827", "metadata": {"aucs": [0.3767765738534181, 0.3502336101940564, 0.35757814962783563, 0.4140311054778707, 0.38670598938759115, 0.46814921700583767, 0.34972410654627295, 0.3571834317982362, 0.37582967630958763, 0.0607253434396694, 0.0031805463769347675, 0.025389733523471847, 0.05209049588963166, 0.013133300390090197, 0.06998193414422227, 0.10137128435466347, 0.11892605650470156, 0.0, 0.0964240228634291, 0.07535849727292365, 0.07834955527137921, 0.11383567091115787, 0.11371191754033005, 0.07227117170812403, 0.08322306721002226, 0.08842271992927131, 0.09900505481437627, 0.07687727460858063, 0.06792546469569893, 0.07355052991236388, 0.06821809955917013, 0.10728849753641989, 0.09090716134218424, 0.0709971658662174, 0.057460697585183684, 0.042227430240249664, 0.9908284888959247, 0.9884857338523698, 0.9904621856735373, 0.9852548688201769, 0.9867901045197428, 0.9849564680707878, 0.9862684537420305, 0.988781878564882, 0.9883746354000169, 0.10719470151874244, 0.18603010647306406, 0.05910715014639156, 0.20253828293033171, 0.13922407508088486, 0.14301480657775156, 0.08295195073484463, 0.08743719534333683, 0.07642517583172082, 0.21771786664745307, 0.17326002417161068, 0.16453801247948463, 0.19138386784828887, 0.18936346899148748, 0.18992167235709834, 0.20824655146119364, 0.21884186772309866, 0.11627915861489913, 0.1059205232391256, 0.12579346092183952, 0.1097496154252744, 0.0685014020717053, 0.128555747986839, 0.06953391354775451, 0.1350617778892934, 0.10308304970760351, 0.10936192462662364, 0.09380244448136343, 0.016585753653319824, 0.09867669251633415, 0.10909254422842463, 0.12747067990873462, 0.1176809319850507, 0.12274118632076603, 0.014952821961940588, 0.11837417003583683, 0.0, 0.0, 0.0, 0.024908557302985357, 0.0, 0.0020783266793872324, 0.0, 0.0, 0.0, 0.0954287262823098, 0.03344871680837236, 0.10218077237471024, 0.006756140835701863, 0.0, 0.02591066104456785, 0.029207444546709982, 0.06048804746398073, 0.01648627498945221, 0.0, 0.0, 0.008913788046881699, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06835218005132593, 0.03159255752111345, 0.060330086606557254, 0.056606784445455194, 0.0, 0.042922976699318105, 0.057114832598676, 0.04259080491798617, 0.062022575154581316, 0.3256335331974961, 0.32791370760448346, 0.3488111148144295, 0.3768814904523424, 0.34234507638235834, 0.2079292771938951, 0.3440155447868224, 0.35915871647164654, 0.37326058141635166, 0.09777333358940232, 0.0580533380539755, 0.0921846358037115, 0.10190843762828095, 0.0895871578739803, 0.09809713422672117, 0.05238837497196325, 0.0653717028666253, 0.07955424792026455, 0.18391558082614468, 0.16265467453984161, 0.21029209764952328, 0.18601063970424236, 0.20939279056031057, 0.22249876802494728, 0.18200263319034526, 0.18798638677848967, 0.19321444738889482, 0.26207644767980987, 0.17356150735222986, 0.25167788909409805, 0.24198729038563138, 0.24602181233331444, 0.24683426990388324, 0.18928701279921656, 0.27936669698997363, 0.17988980351040484, 0.18016221180522518, 0.14762096027117766, 0.1649451817074823, 0.15325404342922755, 0.13065272392147564, 0.17523631375894078, 0.20653862017618763, 0.22493878844890036, 0.20024278107425597, 0.19781442384205572, 0.16184711265666718, 0.1965869341136285, 0.21746940166898188, 0.19194169814606576, 0.20164238564019188, 0.16533492610786238, 0.19333137483292495, 0.20775004220097082, 0.1926083394755771, 0.17922147850700998, 0.17469081956733812, 0.17346461137169422, 0.17495916899783392, 0.17402414124829702, 0.1750750338292122, 0.1819154933088084, 0.18366554304192206, 0.3162868779433635, 0.16831959157208243, 0.14886153126549073, 0.4936275343463149, 0.3766438186878055, 0.3647409326915573, 0.12196721526568688, 0.16958010033982596, 0.18299480910330823, 0.4007608980332452, 0.25991009932733056, 0.22607395400208408, 0.28346628864067047, 0.20622710714470305, 0.20393215881378868, 0.2082674386286374, 0.2009247368048701, 0.19888628085409932, 0.16466015559986058, 0.18249254282580518, 0.19457623784142097, 0.18359907674093767, 0.17883423936615805, 0.1825275500527601, 0.20959734777033756, 0.18055917064140903, 0.18541600727769525, 0.08136089150874637, 0.07144046463309073, 0.08071205707950901, 0.07213500818933394, 0.07894235153228579, 0.06810303640917226, 0.07295312140641019, 0.08256665538032226, 0.06498001112096441]}, "mutation_prompt": null}
