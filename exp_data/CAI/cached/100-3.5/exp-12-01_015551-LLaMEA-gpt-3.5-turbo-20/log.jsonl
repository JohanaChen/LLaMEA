{"id": "c9af6180-ec34-4ac2-a0fc-64fd4725362b", "solution": "import numpy as np\n\nclass DEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n\n    def __call__(self, func):\n        def fitness(x):\n            return func(x)\n\n        def init_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w=0.5, c1=0.5, c2=0.5):\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -1, 1)\n\n        population = init_population()\n        fitness_values = np.array([fitness(ind) for ind in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness_values)]\n        velocity = np.zeros((self.pop_size, self.dim))\n\n        for _ in range(self.max_iter):\n            for i, ind in enumerate(population):\n                new_position = ind + velocity[i]\n                new_fitness = fitness(new_position)\n                if new_fitness < fitness_values[i]:\n                    fitness_values[i] = new_fitness\n                    pbest[i] = new_position\n                    if new_fitness < fitness(gbest):\n                        gbest = new_position\n                velocity = update_velocity(ind, velocity, pbest, gbest)\n\n        return gbest", "name": "DEPSO", "description": "An Evolutionary Algorithm using a combination of Differential Evolution (DE) and Particle Swarm Optimization (PSO) for global optimization in continuous search spaces.", "configspace": "", "generation": 0, "fitness": 0.05256533896792202, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.08774815958588056, 0.06432772651221763, 0.09169502728636048, 0.09649552077653867, 0.07878982423374892, 0.07905452276618685, 0.07795415841203734, 0.08196211583734458, 0.09374045219433624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008264996208611763, 0.01467079663371329, 0.008126487130533877, 0.016395363643894267, 0.005329811793237993, 0.010374873266619344, 0.018248263482334326, 9.999999999998899e-05, 0.010674738340807233, 0.0020174328877295977, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 0.005666126232793944, 9.999999999998899e-05, 0.0071917830083900736, 9.999999999998899e-05, 9.999999999998899e-05, 0.06231442802249698, 0.06505547154695379, 0.07492212563102352, 0.0667351155952387, 0.06438259901401311, 0.051818285168253375, 0.08666021387326805, 0.06370030060477294, 0.05734140740008409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314584388703226, 0.009735043469026317, 0.002902529962978906, 9.999999999998899e-05, 0.016059475033842086, 9.999999999998899e-05, 0.13085748959707233, 0.054474992092689356, 0.0566534725399892, 0.12984672614889003, 0.040507605483214304, 0.0598751071282142, 0.03226461674904224, 0.06113033110374888, 0.016954852789604402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025175525769734475, 0.010656914477108481, 0.015110378736372887, 0.010198887833819392, 9.999999999998899e-05, 0.0005690539300281516, 0.023912643703073444, 0.024292786072325545, 0.017835354706015605, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10888030686047845, 0.13879659513922615, 0.15001115974903245, 0.14659488093876405, 0.09708865527373767, 0.10135769117894111, 0.16112956940342849, 0.09716408355800721, 0.12183996152908272, 0.020805127911653343, 0.006438417989927947, 9.999999999998899e-05, 0.03774826839953782, 0.006442610945218807, 0.049507912179110325, 0.00447980579920404, 9.999999999998899e-05, 0.030300640892543584, 0.18378859091624455, 0.15115089192296693, 0.1186208175034591, 0.1277908018870274, 0.1185646374636462, 0.13597769703821372, 0.11984755993992036, 0.14013036585202376, 0.1192076763906853, 0.12201780696398268, 0.11482102277920347, 0.14352810184653642, 0.142017794561767, 0.11777147065065963, 0.12209086241276068, 0.13807074273161668, 0.17377774300845283, 0.11481732103822051, 0.06831861059199751, 0.04430630549054515, 0.06047704695544476, 0.07904298281913047, 0.06636404593296696, 0.06778965305318796, 0.0837317855149382, 0.0997711199450243, 0.06932896244039854, 0.12034683679946956, 0.09716547261069919, 0.13345086981233123, 0.15343008289932458, 0.10997335385826768, 0.18220167325972436, 0.12831101289538782, 0.0956922855576604, 0.1287243559484026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007247216448476812, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08291766359182529, 0.08632908214836821, 0.15093326031758403, 0.11783394293084659, 0.12107038325524444, 0.10816322493315433, 0.10656972023038747, 0.09643604708838482, 0.09334328375177248, 0.12092370799474561, 0.11422967345934121, 0.05123384078383442, 0.0903721492460281, 0.07764444048344321, 0.05008123291878086, 0.05346101531980785, 0.07135934473476735, 0.06823039783107065, 0.18493205175454785, 0.17839964946565545, 0.17661628646619265, 0.20690938815579552, 0.1755854172940965, 0.18040106795620636, 0.17360543470473933, 0.18751002255563987, 0.17846612686076824, 0.02179662917445635, 0.023004725698859918, 0.0798180366496003, 0.032219319535097934, 0.04071605560077207, 0.02274086433615541, 0.027693232561706638, 0.01746427931789074, 0.02583347259529223]}, "mutation_prompt": null}
{"id": "a563851d-d20a-488a-b908-7f4849e3b92f", "solution": "import numpy as np\n\nclass DEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n\n    def __call__(self, func):\n        def fitness(x):\n            return func(x)\n\n        def init_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.pop_size, self.dim))\n\n        def update_velocity(position, velocity, pbest, gbest, w=0.5, c1=0.5, c2=0.5):\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            new_velocity = w * velocity + c1 * r1 * (pbest - position) + c2 * r2 * (gbest - position)\n            return np.clip(new_velocity, -1, 1)\n\n        population = init_population()\n        fitness_values = np.array([fitness(ind) for ind in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness_values)]\n        velocity = np.zeros((self.pop_size, self.dim))\n\n        for _ in range(self.max_iter):\n            for i, ind in enumerate(population):\n                new_position = ind + velocity[i]\n                new_fitness = fitness(new_position)\n                if new_fitness < fitness_values[i]:\n                    fitness_values[i] = new_fitness\n                    pbest[i] = new_position\n                    if new_fitness < fitness(gbest):\n                        gbest = new_position\n                velocity = update_velocity(ind, velocity, pbest, gbest)\n\n        return gbest", "name": "DEPSO", "description": "An Evolutionary Algorithm using a combination of Differential Evolution (DE) and Particle Swarm Optimization (PSO) for global optimization in continuous search spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c9af6180-ec34-4ac2-a0fc-64fd4725362b", "metadata": {"aucs": [0.08774815958588056, 0.06432772651221763, 0.09169502728636048, 0.09649552077653867, 0.07878982423374892, 0.07905452276618685, 0.07795415841203734, 0.08196211583734458, 0.09374045219433624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008264996208611763, 0.01467079663371329, 0.008126487130533877, 0.016395363643894267, 0.005329811793237993, 0.010374873266619344, 0.018248263482334326, 9.999999999998899e-05, 0.010674738340807233, 0.0020174328877295977, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 0.005666126232793944, 9.999999999998899e-05, 0.0071917830083900736, 9.999999999998899e-05, 9.999999999998899e-05, 0.06231442802249698, 0.06505547154695379, 0.07492212563102352, 0.0667351155952387, 0.06438259901401311, 0.051818285168253375, 0.08666021387326805, 0.06370030060477294, 0.05734140740008409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314584388703226, 0.009735043469026317, 0.002902529962978906, 9.999999999998899e-05, 0.016059475033842086, 9.999999999998899e-05, 0.13085748959707233, 0.054474992092689356, 0.0566534725399892, 0.12984672614889003, 0.040507605483214304, 0.0598751071282142, 0.03226461674904224, 0.06113033110374888, 0.016954852789604402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025175525769734475, 0.010656914477108481, 0.015110378736372887, 0.010198887833819392, 9.999999999998899e-05, 0.0005690539300281516, 0.023912643703073444, 0.024292786072325545, 0.017835354706015605, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10888030686047845, 0.13879659513922615, 0.15001115974903245, 0.14659488093876405, 0.09708865527373767, 0.10135769117894111, 0.16112956940342849, 0.09716408355800721, 0.12183996152908272, 0.020805127911653343, 0.006438417989927947, 9.999999999998899e-05, 0.03774826839953782, 0.006442610945218807, 0.049507912179110325, 0.00447980579920404, 9.999999999998899e-05, 0.030300640892543584, 0.18378859091624455, 0.15115089192296693, 0.1186208175034591, 0.1277908018870274, 0.1185646374636462, 0.13597769703821372, 0.11984755993992036, 0.14013036585202376, 0.1192076763906853, 0.12201780696398268, 0.11482102277920347, 0.14352810184653642, 0.142017794561767, 0.11777147065065963, 0.12209086241276068, 0.13807074273161668, 0.17377774300845283, 0.11481732103822051, 0.06831861059199751, 0.04430630549054515, 0.06047704695544476, 0.07904298281913047, 0.06636404593296696, 0.06778965305318796, 0.0837317855149382, 0.0997711199450243, 0.06932896244039854, 0.12034683679946956, 0.09716547261069919, 0.13345086981233123, 0.15343008289932458, 0.10997335385826768, 0.18220167325972436, 0.12831101289538782, 0.0956922855576604, 0.1287243559484026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007247216448476812, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08291766359182529, 0.08632908214836821, 0.15093326031758403, 0.11783394293084659, 0.12107038325524444, 0.10816322493315433, 0.10656972023038747, 0.09643604708838482, 0.09334328375177248, 0.12092370799474561, 0.11422967345934121, 0.05123384078383442, 0.0903721492460281, 0.07764444048344321, 0.05008123291878086, 0.05346101531980785, 0.07135934473476735, 0.06823039783107065, 0.18493205175454785, 0.17839964946565545, 0.17661628646619265, 0.20690938815579552, 0.1755854172940965, 0.18040106795620636, 0.17360543470473933, 0.18751002255563987, 0.17846612686076824, 0.02179662917445635, 0.023004725698859918, 0.0798180366496003, 0.032219319535097934, 0.04071605560077207, 0.02274086433615541, 0.027693232561706638, 0.01746427931789074, 0.02583347259529223]}, "mutation_prompt": null}
