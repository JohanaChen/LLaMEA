{"id": "4d456363-4440-46e6-acf0-2a5bb055d6ba", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=20, c1=2.0, c2=2.0, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def create_particle():\n            return np.random.uniform(-5.0, 5.0, self.dim), np.inf, np.zeros(self.dim)\n\n        def update_particle(particle, g_best):\n            position, _, velocity = particle\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.f * velocity + self.c1 * r1 * (g_best[0] - position) + self.c2 * r2 * (particle[2] - position)\n            new_position = np.clip(position + velocity, -5.0, 5.0)\n            return new_position, objective_function(new_position), velocity\n\n        swarm = [create_particle() for _ in range(self.swarm_size)]\n        g_best = min(swarm, key=lambda x: x[1])\n\n        for _ in range(self.budget // self.swarm_size):\n            for i in range(self.swarm_size):\n                new_position, new_fitness, new_velocity = update_particle(swarm[i], g_best)\n                if new_fitness < swarm[i][1]:\n                    swarm[i] = new_position, new_fitness, new_velocity\n                    if new_fitness < g_best[1]:\n                        g_best = new_position, new_fitness, new_velocity\n\n            for i in range(self.swarm_size):\n                j, k, l = np.random.choice(range(self.swarm_size), 3, replace=False)\n                mutant = swarm[j][0] + self.f * (swarm[k][0] - swarm[l][0])\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_mask, mutant, swarm[i][0])\n                trial_fitness = objective_function(trial)\n                if trial_fitness < swarm[i][1]:\n                    swarm[i] = trial, trial_fitness, swarm[i][2]\n                    if trial_fitness < g_best[1]:\n                        g_best = trial, trial_fitness, swarm[i][2]\n\n        return g_best[0]\n\n# Usage example:\nbudget = 1000\ndim = 10\noptimizer = HybridPSODE(budget, dim)\nresult = optimizer(lambda x: np.sum(np.square(x)))\nprint(result)", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to exploit global and local search capabilities efficiently.", "configspace": "", "generation": 0, "fitness": 0.3302926888053301, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8303288827412676, 0.8403096974611381, 0.8541688143133722, 0.8565501927937191, 0.8327965875218756, 0.8551211516285686, 0.8164749327763228, 0.8648949621441933, 0.8227645560364736, 0.7403343869787593, 0.6935998690209366, 0.7079634985663258, 0.7521968172359335, 0.712878443771495, 0.765487089799898, 0.7340449805816279, 0.7537444316047903, 0.7241325456181962, 0.40843529025651937, 0.11159102638081042, 0.11091073247946026, 0.13864046429285304, 0.13213787482923034, 0.12322957788218991, 0.12112265463098193, 0.13036290056580657, 0.1637107303379145, 0.1313251906005205, 0.12819378756519895, 0.12564451286326406, 0.10606200683771128, 0.13078496855068422, 0.12325739342905995, 0.10161016286774938, 0.10421390720060808, 0.12874631339416787, 0.9884528800386099, 0.9898387706840247, 0.9689712221518285, 0.9814681395930194, 0.9926307194498838, 0.9889482681073578, 0.9597111779554818, 0.9938996742037245, 0.9956975421905647, 0.16053298222623014, 0.26872034722245686, 0.37525521766008496, 0.3445517395955964, 0.3244608711030732, 0.13145207756648558, 0.31026713528126937, 0.1729795742552942, 0.22837510243538572, 0.8511692806875976, 0.3687918500288965, 0.8272214579009596, 0.2096594458128005, 0.8281139823054904, 0.8338832576742975, 0.7978982505004367, 0.1451626396843072, 0.8270816842224199, 0.13055526738321654, 0.6042449039456406, 0.20271982661875076, 0.09831266590149956, 0.1446762658768359, 0.16182439289127437, 0.14116710674480004, 0.22225349762476454, 0.1807721954005883, 0.14744892902420248, 0.1424794831102033, 0.15599435199752476, 0.16119188185909206, 0.1546972987214703, 0.7021354320713229, 0.17835400901834852, 0.16248268228798535, 0.1541389282814094, 0.024383576854839384, 0.11736660643197905, 0.0013563267483396313, 0.0427115561794591, 0.03486373184833558, 0.06028952881519767, 0.09573738656575626, 9.999999999998899e-05, 0.08314335220949054, 0.11948005333284328, 0.07733353432652945, 0.19721333630887883, 0.23445157304581377, 0.242092098961192, 0.18906833183887484, 0.5171406753901001, 0.13837921063540437, 0.3237513647844823, 0.027925766093498394, 0.04699072624315437, 0.09211256993470163, 0.1450838029186312, 0.22086128659820115, 0.15525968620491293, 0.09728069701476472, 0.15716550099191828, 0.03892416352689654, 0.25173933029875484, 0.25026120457780077, 0.14487496340054007, 0.3137483350290866, 0.4579005527707758, 0.1627447079903701, 0.25489554027495487, 0.26425117313036595, 0.32680117844905976, 0.7965904460967308, 0.7143105837714678, 0.7139812692911157, 0.4359194096273764, 0.5172249539189294, 0.5315896667463271, 0.6411755617559926, 0.6904545969030468, 0.5976152615771924, 0.10927332485535424, 0.09512445298882777, 0.15112166922185533, 0.08540169650295992, 0.11470447607440404, 0.10567662064350247, 0.10407701111429546, 0.12366484899382779, 0.11714639415622463, 0.1324508812381835, 0.13629480493784507, 0.12808697960952176, 0.18964308782815031, 0.1793353023762504, 0.15994148761532345, 0.16566570864001096, 0.1465512976032669, 0.1618286950534017, 0.45107537284803534, 0.5359478255029257, 0.518998224631302, 0.39894640935870995, 0.46941382580390933, 0.4846173451401362, 0.4953094113467893, 0.4997686767327698, 0.27818768088277246, 0.34702680286338494, 0.34244571446863925, 0.41472796005141765, 0.395780335496564, 0.42314483155760296, 0.2683652083485266, 0.3829883481404316, 0.33864641820855457, 0.4010304338550237, 0.17094324977205289, 0.1904997157497652, 0.191651786030416, 0.21305836671540224, 0.18931111647104482, 0.23425413104337145, 0.19538038653293854, 0.18717511287957544, 0.2003511885468513, 0.20015340132221904, 0.2018811987977649, 0.20542675842338531, 0.6105356757326008, 0.2232365149404575, 0.22233988194402332, 0.2144760217978161, 0.21251994611271074, 0.19846144088740358, 0.339196469785895, 0.8255285631465372, 0.17441876850492577, 0.2676545199661716, 0.14312270163991048, 0.7991906885483595, 0.16194883622172507, 0.1779988609988168, 0.1866524455405557, 0.28907174167664096, 0.14575253089988094, 0.1949324770143941, 0.7787310681283369, 0.1267948272847521, 0.16760310926995137, 0.7693810278349973, 0.3101711143217233, 0.1508089902635782, 0.1973678476330396, 0.1808805592545114, 0.21236085487280476, 0.18124522496525586, 0.193547206877406, 0.1944676975539048, 0.1875465468769646, 0.1819120659443786, 0.18470820644344355, 0.08038239520596469, 0.0857128654609296, 0.08102456097355193, 0.07458683837169577, 0.10204615485633839, 0.08826812704496789, 0.09227967710809204, 0.09192406786256035, 0.07497476093762767]}, "mutation_prompt": null}
{"id": "1e32056d-fc55-4d6f-8465-993a06df694b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=20, c1=2.0, c2=2.0, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def create_particle():\n            return np.random.uniform(-5.0, 5.0, self.dim), np.inf, np.zeros(self.dim)\n\n        def update_particle(particle, g_best):\n            position, _, velocity = particle\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocity = self.f * velocity + self.c1 * r1 * (g_best[0] - position) + self.c2 * r2 * (particle[2] - position)\n            new_position = np.clip(position + velocity, -5.0, 5.0)\n            return new_position, objective_function(new_position), velocity\n\n        swarm = [create_particle() for _ in range(self.swarm_size)]\n        g_best = min(swarm, key=lambda x: x[1])\n\n        for _ in range(self.budget // self.swarm_size):\n            for i in range(self.swarm_size):\n                new_position, new_fitness, new_velocity = update_particle(swarm[i], g_best)\n                if new_fitness < swarm[i][1]:\n                    swarm[i] = new_position, new_fitness, new_velocity\n                    if new_fitness < g_best[1]:\n                        g_best = new_position, new_fitness, new_velocity\n\n            for i in range(self.swarm_size):\n                j, k, l = np.random.choice(range(self.swarm_size), 3, replace=False)\n                mutant = swarm[j][0] + self.f * (swarm[k][0] - swarm[l][0])\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_mask, mutant, swarm[i][0])\n                trial_fitness = objective_function(trial)\n                if trial_fitness < swarm[i][1]:\n                    swarm[i] = trial, trial_fitness, swarm[i][2]\n                    if trial_fitness < g_best[1]:\n                        g_best = trial, trial_fitness, swarm[i][2]\n\n        return g_best[0]\n\n# Usage example:\nbudget = 1000\ndim = 10\noptimizer = HybridPSODE(budget, dim)\nresult = optimizer(lambda x: np.sum(np.square(x)))\nprint(result)", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to exploit global and local search capabilities efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "4d456363-4440-46e6-acf0-2a5bb055d6ba", "metadata": {"aucs": [0.8303288827412676, 0.8403096974611381, 0.8541688143133722, 0.8565501927937191, 0.8327965875218756, 0.8551211516285686, 0.8164749327763228, 0.8648949621441933, 0.8227645560364736, 0.7403343869787593, 0.6935998690209366, 0.7079634985663258, 0.7521968172359335, 0.712878443771495, 0.765487089799898, 0.7340449805816279, 0.7537444316047903, 0.7241325456181962, 0.40843529025651937, 0.11159102638081042, 0.11091073247946026, 0.13864046429285304, 0.13213787482923034, 0.12322957788218991, 0.12112265463098193, 0.13036290056580657, 0.1637107303379145, 0.1313251906005205, 0.12819378756519895, 0.12564451286326406, 0.10606200683771128, 0.13078496855068422, 0.12325739342905995, 0.10161016286774938, 0.10421390720060808, 0.12874631339416787, 0.9884528800386099, 0.9898387706840247, 0.9689712221518285, 0.9814681395930194, 0.9926307194498838, 0.9889482681073578, 0.9597111779554818, 0.9938996742037245, 0.9956975421905647, 0.16053298222623014, 0.26872034722245686, 0.37525521766008496, 0.3445517395955964, 0.3244608711030732, 0.13145207756648558, 0.31026713528126937, 0.1729795742552942, 0.22837510243538572, 0.8511692806875976, 0.3687918500288965, 0.8272214579009596, 0.2096594458128005, 0.8281139823054904, 0.8338832576742975, 0.7978982505004367, 0.1451626396843072, 0.8270816842224199, 0.13055526738321654, 0.6042449039456406, 0.20271982661875076, 0.09831266590149956, 0.1446762658768359, 0.16182439289127437, 0.14116710674480004, 0.22225349762476454, 0.1807721954005883, 0.14744892902420248, 0.1424794831102033, 0.15599435199752476, 0.16119188185909206, 0.1546972987214703, 0.7021354320713229, 0.17835400901834852, 0.16248268228798535, 0.1541389282814094, 0.024383576854839384, 0.11736660643197905, 0.0013563267483396313, 0.0427115561794591, 0.03486373184833558, 0.06028952881519767, 0.09573738656575626, 9.999999999998899e-05, 0.08314335220949054, 0.11948005333284328, 0.07733353432652945, 0.19721333630887883, 0.23445157304581377, 0.242092098961192, 0.18906833183887484, 0.5171406753901001, 0.13837921063540437, 0.3237513647844823, 0.027925766093498394, 0.04699072624315437, 0.09211256993470163, 0.1450838029186312, 0.22086128659820115, 0.15525968620491293, 0.09728069701476472, 0.15716550099191828, 0.03892416352689654, 0.25173933029875484, 0.25026120457780077, 0.14487496340054007, 0.3137483350290866, 0.4579005527707758, 0.1627447079903701, 0.25489554027495487, 0.26425117313036595, 0.32680117844905976, 0.7965904460967308, 0.7143105837714678, 0.7139812692911157, 0.4359194096273764, 0.5172249539189294, 0.5315896667463271, 0.6411755617559926, 0.6904545969030468, 0.5976152615771924, 0.10927332485535424, 0.09512445298882777, 0.15112166922185533, 0.08540169650295992, 0.11470447607440404, 0.10567662064350247, 0.10407701111429546, 0.12366484899382779, 0.11714639415622463, 0.1324508812381835, 0.13629480493784507, 0.12808697960952176, 0.18964308782815031, 0.1793353023762504, 0.15994148761532345, 0.16566570864001096, 0.1465512976032669, 0.1618286950534017, 0.45107537284803534, 0.5359478255029257, 0.518998224631302, 0.39894640935870995, 0.46941382580390933, 0.4846173451401362, 0.4953094113467893, 0.4997686767327698, 0.27818768088277246, 0.34702680286338494, 0.34244571446863925, 0.41472796005141765, 0.395780335496564, 0.42314483155760296, 0.2683652083485266, 0.3829883481404316, 0.33864641820855457, 0.4010304338550237, 0.17094324977205289, 0.1904997157497652, 0.191651786030416, 0.21305836671540224, 0.18931111647104482, 0.23425413104337145, 0.19538038653293854, 0.18717511287957544, 0.2003511885468513, 0.20015340132221904, 0.2018811987977649, 0.20542675842338531, 0.6105356757326008, 0.2232365149404575, 0.22233988194402332, 0.2144760217978161, 0.21251994611271074, 0.19846144088740358, 0.339196469785895, 0.8255285631465372, 0.17441876850492577, 0.2676545199661716, 0.14312270163991048, 0.7991906885483595, 0.16194883622172507, 0.1779988609988168, 0.1866524455405557, 0.28907174167664096, 0.14575253089988094, 0.1949324770143941, 0.7787310681283369, 0.1267948272847521, 0.16760310926995137, 0.7693810278349973, 0.3101711143217233, 0.1508089902635782, 0.1973678476330396, 0.1808805592545114, 0.21236085487280476, 0.18124522496525586, 0.193547206877406, 0.1944676975539048, 0.1875465468769646, 0.1819120659443786, 0.18470820644344355, 0.08038239520596469, 0.0857128654609296, 0.08102456097355193, 0.07458683837169577, 0.10204615485633839, 0.08826812704496789, 0.09227967710809204, 0.09192406786256035, 0.07497476093762767]}, "mutation_prompt": null}
