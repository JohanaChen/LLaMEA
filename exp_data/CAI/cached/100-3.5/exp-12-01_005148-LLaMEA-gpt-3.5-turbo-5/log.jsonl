{"id": "40b8533e-99ed-48e7-955b-1e09d8b7a3f5", "solution": "import numpy as np\n\nclass HybridGA_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.crossover_rate = 0.8\n        self.mutation_rate = 0.1\n        self.sa_iterations = 100\n        self.temperature_max = 10.0\n        self.temperature_min = 1e-3\n\n    def __call__(self, func):\n        def simulate_annealing(current_solution, current_temperature):\n            best_solution = current_solution\n            best_fitness = func(best_solution)\n            for _ in range(self.sa_iterations):\n                new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n                new_solution = np.clip(new_solution, -5.0, 5.0)\n                new_fitness = func(new_solution)\n                if new_fitness < best_fitness or np.exp((best_fitness - new_fitness) / current_temperature) > np.random.rand():\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n                current_temperature *= 0.9\n                current_temperature = max(current_temperature, self.temperature_min)\n            return best_solution\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        for _ in range(self.budget // self.population_size):\n            children = []\n            for _ in range(self.population_size):\n                parent1 = population[np.random.randint(0, self.population_size)]\n                parent2 = population[np.random.randint(0, self.population_size)]\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                child = np.where(crossover_mask, parent1, parent2)\n                mutation_mask = np.random.rand(self.dim) < self.mutation_rate\n                child += np.random.normal(0, 0.1, self.dim) * mutation_mask\n                child = np.clip(child, -5.0, 5.0)\n                child = simulate_annealing(child, self.temperature_max)\n                children.append(child)\n            population = np.array(children)\n\n        best_solution = population[np.argmin([func(sol) for sol in population])]\n        return best_solution", "name": "HybridGA_SA", "description": "A novel hybrid algorithm combining Genetic Algorithm with Simulated Annealing for black box optimization problems.", "configspace": "", "generation": 0, "fitness": 0.055012337649649995, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.09191775630586485, 0.08249959730777245, 0.09393228532004727, 0.07736734522479183, 0.06441700324099675, 0.08052076447043999, 0.07862691779337672, 0.0679093897750086, 0.0825843669885753, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04973569150988222, 0.03307436708757472, 0.006025001315167144, 0.027970865426727665, 0.017488194948378832, 0.012791967373932844, 0.02300044324246886, 0.04621543888519786, 0.02992685499137715, 0.018370277163603732, 0.0038365245026752426, 0.025226237604249246, 0.03684683432637781, 0.02222029746705556, 0.0005890274322591926, 0.03167217506859121, 9.999999999998899e-05, 0.002954071967188665, 0.04616503696615071, 0.04553784981108344, 0.04351975712089462, 0.06132449147624197, 0.038319712342068324, 0.042631127872827745, 0.044856133653077945, 0.047279769148230066, 0.03540706149546513, 0.008755391599801765, 9.999999999998899e-05, 9.999999999998899e-05, 0.04760669614238744, 0.009403639801342067, 0.00914751837329364, 9.999999999998899e-05, 0.00842365704257586, 9.999999999998899e-05, 0.10911569798734921, 0.049361816489713384, 0.058165935599722274, 0.08611226530418459, 0.061474880650393415, 0.013032452264945427, 0.04677008201362298, 0.026362750830171144, 0.01158588048170428, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006782747326739003, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002274182063176866, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039639898942208984, 0.02802612957042805, 0.08091609859373727, 0.013495954221739659, 9.999999999998899e-05, 0.016380500342549564, 0.04946286233055541, 0.05555483019492258, 0.02682399212450637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10211788279753642, 0.15414792467644622, 0.15245899752422298, 0.13802575698936215, 0.14573414297182263, 0.0955634942536413, 0.15669527815702988, 0.1020250571054343, 0.12522639404307123, 0.02258390232395502, 0.018678152360507516, 0.017772598258470662, 0.031105782571975937, 0.02884687701497546, 0.0355903278413211, 0.02491288614055831, 0.010910826825858755, 0.058376495028859776, 0.10290131775048672, 0.12515533780851362, 0.1581058893355577, 0.12852227233982394, 0.11505728921968261, 0.10327102815707856, 0.13660319839497825, 0.11819747865301056, 0.12404501674045787, 0.11942826215888402, 0.14382081033122418, 0.14558197375218074, 0.13698854609366806, 0.13511333674907455, 0.14480867416083698, 0.1266900266622697, 0.17754467904596583, 0.14725472629969116, 0.07006175189494801, 0.05264234370268517, 0.07812189072698617, 0.07888560525166888, 0.07477268229959388, 0.06749225402057213, 0.06995290757566452, 0.11920390433287176, 0.06286142301730979, 0.1667280722986879, 0.1279091605364716, 0.1510763000329267, 0.1763318340472051, 0.16559513375907553, 0.139030384413801, 0.14594012301691361, 0.12646514004715737, 0.1622971968286775, 0.04889873903801256, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005954617974294196, 9.999999999998899e-05, 0.05004150947184005, 0.002183308421609076, 9.999999999998899e-05, 9.999999999998899e-05, 0.06563116197392282, 0.0945911655693924, 0.09184324150190348, 0.06803947008805045, 0.12753203650845502, 0.10458022719796556, 0.09664743781977958, 0.10758571810619355, 0.10026158391932227, 0.047514659718919994, 0.10776403783757882, 0.0659146836250255, 0.06925175573563735, 0.0459475153800899, 0.07434003269132772, 0.07775859003254204, 0.05372205532653751, 0.07188675129507627, 0.17806181977924262, 0.1893716949998404, 0.18585968727208102, 0.18023055577432112, 0.1913336427381669, 0.18340727287706815, 0.20220217647354743, 0.18686123430388846, 0.17596051026115966, 0.047775300931368836, 0.04332669531491351, 0.0321596605196639, 0.052664878409919624, 0.0596618130947445, 0.03882794628034003, 0.04101968056074112, 0.05860615941227387, 0.03994028759952728]}, "mutation_prompt": null}
{"id": "55ac3dfe-b758-4068-8197-7ab17b728023", "solution": "import numpy as np\n\nclass HybridGA_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.crossover_rate = 0.8\n        self.mutation_rate = 0.1\n        self.sa_iterations = 100\n        self.temperature_max = 10.0\n        self.temperature_min = 1e-3\n\n    def __call__(self, func):\n        def simulate_annealing(current_solution, current_temperature):\n            best_solution = current_solution\n            best_fitness = func(best_solution)\n            for _ in range(self.sa_iterations):\n                new_solution = current_solution + np.random.normal(0, 0.1, self.dim)\n                new_solution = np.clip(new_solution, -5.0, 5.0)\n                new_fitness = func(new_solution)\n                if new_fitness < best_fitness or np.exp((best_fitness - new_fitness) / current_temperature) > np.random.rand():\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n                current_temperature *= 0.9\n                current_temperature = max(current_temperature, self.temperature_min)\n            return best_solution\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        for _ in range(self.budget // self.population_size):\n            children = []\n            for _ in range(self.population_size):\n                parent1 = population[np.random.randint(0, self.population_size)]\n                parent2 = population[np.random.randint(0, self.population_size)]\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                child = np.where(crossover_mask, parent1, parent2)\n                mutation_mask = np.random.rand(self.dim) < self.mutation_rate\n                child += np.random.normal(0, 0.1, self.dim) * mutation_mask\n                child = np.clip(child, -5.0, 5.0)\n                child = simulate_annealing(child, self.temperature_max)\n                children.append(child)\n            population = np.array(children)\n\n        best_solution = population[np.argmin([func(sol) for sol in population])]\n        return best_solution", "name": "HybridGA_SA", "description": "A novel hybrid algorithm combining Genetic Algorithm with Simulated Annealing for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "40b8533e-99ed-48e7-955b-1e09d8b7a3f5", "metadata": {"aucs": [0.09191775630586485, 0.08249959730777245, 0.09393228532004727, 0.07736734522479183, 0.06441700324099675, 0.08052076447043999, 0.07862691779337672, 0.0679093897750086, 0.0825843669885753, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04973569150988222, 0.03307436708757472, 0.006025001315167144, 0.027970865426727665, 0.017488194948378832, 0.012791967373932844, 0.02300044324246886, 0.04621543888519786, 0.02992685499137715, 0.018370277163603732, 0.0038365245026752426, 0.025226237604249246, 0.03684683432637781, 0.02222029746705556, 0.0005890274322591926, 0.03167217506859121, 9.999999999998899e-05, 0.002954071967188665, 0.04616503696615071, 0.04553784981108344, 0.04351975712089462, 0.06132449147624197, 0.038319712342068324, 0.042631127872827745, 0.044856133653077945, 0.047279769148230066, 0.03540706149546513, 0.008755391599801765, 9.999999999998899e-05, 9.999999999998899e-05, 0.04760669614238744, 0.009403639801342067, 0.00914751837329364, 9.999999999998899e-05, 0.00842365704257586, 9.999999999998899e-05, 0.10911569798734921, 0.049361816489713384, 0.058165935599722274, 0.08611226530418459, 0.061474880650393415, 0.013032452264945427, 0.04677008201362298, 0.026362750830171144, 0.01158588048170428, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006782747326739003, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002274182063176866, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039639898942208984, 0.02802612957042805, 0.08091609859373727, 0.013495954221739659, 9.999999999998899e-05, 0.016380500342549564, 0.04946286233055541, 0.05555483019492258, 0.02682399212450637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10211788279753642, 0.15414792467644622, 0.15245899752422298, 0.13802575698936215, 0.14573414297182263, 0.0955634942536413, 0.15669527815702988, 0.1020250571054343, 0.12522639404307123, 0.02258390232395502, 0.018678152360507516, 0.017772598258470662, 0.031105782571975937, 0.02884687701497546, 0.0355903278413211, 0.02491288614055831, 0.010910826825858755, 0.058376495028859776, 0.10290131775048672, 0.12515533780851362, 0.1581058893355577, 0.12852227233982394, 0.11505728921968261, 0.10327102815707856, 0.13660319839497825, 0.11819747865301056, 0.12404501674045787, 0.11942826215888402, 0.14382081033122418, 0.14558197375218074, 0.13698854609366806, 0.13511333674907455, 0.14480867416083698, 0.1266900266622697, 0.17754467904596583, 0.14725472629969116, 0.07006175189494801, 0.05264234370268517, 0.07812189072698617, 0.07888560525166888, 0.07477268229959388, 0.06749225402057213, 0.06995290757566452, 0.11920390433287176, 0.06286142301730979, 0.1667280722986879, 0.1279091605364716, 0.1510763000329267, 0.1763318340472051, 0.16559513375907553, 0.139030384413801, 0.14594012301691361, 0.12646514004715737, 0.1622971968286775, 0.04889873903801256, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005954617974294196, 9.999999999998899e-05, 0.05004150947184005, 0.002183308421609076, 9.999999999998899e-05, 9.999999999998899e-05, 0.06563116197392282, 0.0945911655693924, 0.09184324150190348, 0.06803947008805045, 0.12753203650845502, 0.10458022719796556, 0.09664743781977958, 0.10758571810619355, 0.10026158391932227, 0.047514659718919994, 0.10776403783757882, 0.0659146836250255, 0.06925175573563735, 0.0459475153800899, 0.07434003269132772, 0.07775859003254204, 0.05372205532653751, 0.07188675129507627, 0.17806181977924262, 0.1893716949998404, 0.18585968727208102, 0.18023055577432112, 0.1913336427381669, 0.18340727287706815, 0.20220217647354743, 0.18686123430388846, 0.17596051026115966, 0.047775300931368836, 0.04332669531491351, 0.0321596605196639, 0.052664878409919624, 0.0596618130947445, 0.03882794628034003, 0.04101968056074112, 0.05860615941227387, 0.03994028759952728]}, "mutation_prompt": null}
