{"id": "a17515a8-188c-44ac-864c-ddb5a4a4c928", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        n_particles = 10\n        max_iter = self.budget // n_particles\n\n        # Initialize particle positions and velocities\n        particles_pos = np.random.uniform(-5.0, 5.0, (n_particles, self.dim))\n        particles_vel = np.random.uniform(-0.1, 0.1, (n_particles, self.dim))\n        personal_best = particles_pos.copy()\n        global_best = particles_pos[np.argmin([func(p) for p in particles_pos])]\n\n        for _ in range(max_iter):\n            T = 1.0 - _ / max_iter  # Temperature for SA\n            for i in range(n_particles):\n                # Update particle position using PSO\n                particles_vel[i] = 0.5 * particles_vel[i] + 2 * np.random.rand() * (personal_best[i] - particles_pos[i]) + \\\n                                    2 * np.random.rand() * (global_best - particles_pos[i])\n                particles_pos[i] = np.clip(particles_pos[i] + particles_vel[i], -5.0, 5.0)\n\n                # Perform Simulated Annealing\n                candidate = particles_pos[i] + np.random.normal(0, 0.1, self.dim)\n                if func(candidate) < func(particles_pos[i]) or np.random.rand() < np.exp((func(particles_pos[i]) - func(candidate)) / T):\n                    particles_pos[i] = candidate\n\n                # Update personal and global best\n                if func(particles_pos[i]) < func(personal_best[i]):\n                    personal_best[i] = particles_pos[i]\n                if func(particles_pos[i]) < func(global_best):\n                    global_best = particles_pos[i]\n\n        return global_best", "name": "PSO_SA_Optimizer", "description": "Novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) for black box optimization in continuous space.", "configspace": "", "generation": 0, "fitness": 0.18560601780501537, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.33552190860540243, 0.3479252035644884, 0.3533063865795256, 0.31986105457909775, 0.3650217268097091, 0.36023581189892107, 0.3563185742272692, 0.3444331690932426, 0.3614394626361648, 0.021720301004076514, 0.026991071161972968, 0.07217122354812566, 0.09112494713310548, 0.02898688987706033, 0.04894135520787024, 0.09700642869006604, 0.11627597369458709, 0.03207701654453343, 0.07714724278217422, 0.10526541188689265, 0.08508480866073098, 0.07014534835777286, 0.07440458658401294, 0.07085326885763987, 0.09947796798409869, 0.06577841407137641, 0.06664025284536346, 0.06791613372954874, 0.06563642844062811, 0.04593227661436139, 0.08378788086563405, 0.067498804223457, 0.0729171072135183, 0.06020128147244941, 0.07049930188578879, 0.0639862523063155, 0.9872795055960439, 0.9083086646450254, 0.9848587116370504, 0.96495338649067, 0.927353891437517, 0.9162199029049538, 0.89731147136655, 0.9579549898590274, 0.8745770173093234, 0.18597960314730067, 0.14782841787547696, 0.23209063146683873, 0.19270446127003138, 0.16885981832668018, 0.22716851005651528, 0.21152609607485173, 0.19978665815082863, 0.20117899297060904, 0.21470787282677017, 0.24430845657619782, 0.21474302296805137, 0.24877754349371395, 0.21169810853863258, 0.19936156564003094, 0.18762923215739902, 0.28557206287592707, 0.1681668174989831, 0.15826758529528362, 0.14889203064993795, 0.1814196433001718, 0.10650356199504474, 0.1370856674461849, 0.10403432300277216, 0.10880943285111067, 0.19543435214745086, 0.1762153317098779, 0.11160087064046187, 0.12335028641782575, 0.22230665185486975, 0.24186384797482197, 0.11035771671325745, 0.14708896394737025, 0.11524884001240387, 0.16804866124948525, 0.19913613164341326, 0.09047783173638291, 0.03256919139828118, 9.999999999998899e-05, 0.057421448549322296, 9.999999999998899e-05, 0.06499425681240589, 0.033523090191221905, 0.0462875812964787, 0.033186379015285095, 0.061138508274205194, 0.035030386509353084, 0.16669299584309394, 0.1107524402892317, 0.006597331762483227, 0.18981996857838113, 0.09644163242752835, 0.05530746717317381, 0.04662490202336467, 0.029856441280178503, 0.07360628737588593, 0.15018017272730666, 0.09312039667480876, 0.05103302164898871, 0.05026884160087608, 0.0355777348956684, 0.05526678997346679, 0.049260862219617785, 0.04220855950769142, 0.15860942794909316, 0.2117540873758722, 0.10057076650030472, 0.10429228691989079, 0.11102641763422894, 0.07235571684505737, 0.10410548832754829, 0.11083357898746926, 0.3182609143894656, 0.3542528762987359, 0.341738221349036, 0.36592511334835853, 0.2831364557775303, 0.32335659212859924, 0.35692146900450616, 0.29968747291616016, 0.3472966970465864, 0.05907996687353989, 0.08961008346594079, 0.06732315587470461, 0.07642881170608595, 0.08260597465978958, 0.10032367837498368, 0.06783651508432653, 0.05949529515871688, 0.09140821444012748, 0.15258929497181073, 0.1150021262654094, 0.1870736037840749, 0.16910584275286178, 0.15752332213957976, 0.11732157277676891, 0.1605152308365272, 0.15505264477588643, 0.2102356211104338, 0.24608970889685744, 0.226493112349188, 0.21620863940042812, 0.23801128375590475, 0.17287070259556236, 0.21193017296153294, 0.17065220716002583, 0.19871299574444, 0.22697741346475542, 0.13453688154252763, 0.18771950192874487, 0.16591616351757854, 0.18850202454111964, 0.1399357177242786, 0.1730576094993983, 0.1458966397346969, 0.16696564096007183, 0.17585798611103942, 0.17814100322311865, 0.1479555387292587, 0.14899482075646542, 0.16296025839883332, 0.13307414567045672, 0.17411604967305117, 0.17256537593314114, 0.18060532997068746, 0.20225241410632666, 0.16613778574000282, 0.16916856268577374, 0.18593579030828045, 0.16928007091481323, 0.19030014271547802, 0.17612865343160722, 0.17151545567331072, 0.17219422945969032, 0.16534018139389095, 0.18226099347757296, 0.18676621484302336, 0.1617576783686152, 0.1699538991469537, 0.19738242175282905, 0.112697376992823, 0.15728972549906772, 0.13932339751401146, 0.1576776543599675, 0.15011637307673031, 0.11062604763273354, 0.3005615772079937, 0.35111317586758706, 0.16739126422689388, 0.20295820047051094, 0.4498863819125952, 0.07987524005011981, 0.46341921923243956, 0.16476977508184287, 0.17660078674270896, 0.17672713902901882, 0.1674561135626651, 0.17936288801253564, 0.16747162516182468, 0.16081892172152779, 0.17379265639244912, 0.17153612926303197, 0.08030741110372386, 0.06131450932117255, 0.05998548084585398, 0.06516710028287476, 0.06275632244464546, 0.07292602016085892, 0.08336681705301618, 0.05336207355282918, 0.0699213805615162]}, "mutation_prompt": null}
{"id": "bfc33192-d56a-40b7-9397-363d4413b537", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        n_particles = 10\n        max_iter = self.budget // n_particles\n        inertia_weight = 0.5\n\n        # Initialize particle positions and velocities\n        particles_pos = np.random.uniform(-5.0, 5.0, (n_particles, self.dim))\n        particles_vel = np.random.uniform(-0.1, 0.1, (n_particles, self.dim))\n        personal_best = particles_pos.copy()\n        global_best = particles_pos[np.argmin([func(p) for p in particles_pos])]\n\n        for _ in range(max_iter):\n            T = 1.0 - _ / max_iter  # Temperature for SA\n            for i in range(n_particles):\n                # Update particle position using PSO\n                particles_vel[i] = inertia_weight * particles_vel[i] + 2 * np.random.rand() * (personal_best[i] - particles_pos[i]) + \\\n                                    2 * np.random.rand() * (global_best - particles_pos[i])\n                particles_pos[i] = np.clip(particles_pos[i] + particles_vel[i], -5.0, 5.0)\n\n                # Perform Simulated Annealing\n                candidate = particles_pos[i] + np.random.normal(0, 0.1, self.dim)\n                if func(candidate) < func(particles_pos[i]) or np.random.rand() < np.exp((func(particles_pos[i]) - func(candidate)) / T):\n                    particles_pos[i] = candidate\n\n                # Update personal and global best\n                if func(particles_pos[i]) < func(personal_best[i]):\n                    personal_best[i] = particles_pos[i]\n                if func(particles_pos[i]) < func(global_best):\n                    global_best = particles_pos[i]\n\n            inertia_weight = max(0.4, inertia_weight - 0.01)  # Update inertia weight dynamically\n\n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer with dynamic inertia weight adjustment for improved convergence speed.", "configspace": "", "generation": 1, "fitness": 0.19574720357346095, "feedback": "", "error": "", "parent_id": "a17515a8-188c-44ac-864c-ddb5a4a4c928", "metadata": {"aucs": [0.38470812909193974, 0.3689227645485089, 0.4068168093450272, 0.3933810128693167, 0.3890495433145489, 0.37945326999358675, 0.3843228334359795, 0.39666869283922734, 0.3771858382296098, 0.12642397772332803, 0.04264195168763041, 0.021076703269757302, 0.025916795475979804, 0.03723624259264291, 0.07339147300771165, 0.06263348919220058, 0.07696997304534126, 0.04037974497879604, 0.087483450952197, 0.09086531693502753, 0.08824239196478556, 0.13166138037994912, 0.07700982213509722, 0.08673533000952682, 0.06906406551519828, 0.08303693989589989, 0.10469302430748662, 0.08533305396633517, 0.08437978138566848, 0.0585254704979552, 0.08703436131789444, 0.02310949465664358, 0.07606536146968357, 0.06272532132123598, 0.07227620350851338, 0.06706561380298315, 0.9872794655306424, 0.9064938797615173, 0.9848133995762616, 0.9660112193770725, 0.9073415737717797, 0.9202471899657938, 0.8971551027838174, 0.9551743315954209, 0.899884700018603, 0.2421981191782595, 0.25585583337902607, 0.29487128120036177, 0.24759021841496043, 0.25817546654432744, 0.27081659790132384, 0.2734452627430033, 0.24111540851055768, 0.23811662096629915, 0.17137696493630195, 0.1888150483677531, 0.22489317877146364, 0.23815127018126137, 0.2460958580297864, 0.16926157586449375, 0.14089222831850534, 0.1907401556995928, 0.2745698998197399, 0.10281167870798091, 0.17048924641584595, 0.2496293110531631, 0.13782204688875221, 0.12676361458323082, 0.1642277618045378, 0.14495803599099932, 0.1701013782511669, 0.16596411603242833, 0.17111319458602225, 0.15311062172856638, 0.11464887461528928, 0.18448570611022974, 0.13895664140057107, 0.23784148237183633, 0.2763771092412788, 0.1411351546087759, 0.18056668804327836, 0.016458919438892883, 0.07197456294127003, 0.0004048129972074044, 0.03786264419815544, 0.008915490214197463, 0.021757934987458816, 0.013605180131714745, 0.00016966282489083717, 0.1640505868151555, 0.15836224311415503, 0.04066020327816766, 0.21265451172199656, 0.13521420296491393, 0.04549318496792909, 0.052366273302383304, 0.09600686654464463, 0.10054293387939583, 0.027201420899314654, 0.012668943521754183, 0.08639403693471759, 0.14074611693861228, 0.1499669851243025, 0.06255843860170085, 0.06744377361303289, 0.0635575625908461, 0.05653334996558512, 0.04357856066037091, 0.04256660989454919, 0.19899201587117887, 0.063827781541414, 0.12685815328106587, 0.11227822607104443, 0.04806096917287361, 0.10534859995070123, 0.05250388889872104, 0.05675112901260837, 0.3554252936990301, 0.3382624282507395, 0.3369552064655186, 0.33200413760247727, 0.3823490205946992, 0.3418491851800233, 0.369161787973007, 0.3477780692526795, 0.3592414139519937, 0.07359497380496482, 0.08368561755302906, 0.09242395637906031, 0.08533917147520664, 0.07625962054401025, 0.09612916080923894, 0.10442584275604949, 0.09404242844735577, 0.0801769295182867, 0.2252018465391522, 0.18467736582940153, 0.11805830406796236, 0.34101736801905547, 0.11316351575454697, 0.18434900219709693, 0.22246274887530915, 0.18119324944834747, 0.2526817585038116, 0.25030469887559637, 0.22261530743298086, 0.2409205609834899, 0.24657030752365272, 0.1462490065548986, 0.2174527672743568, 0.2218553786685047, 0.15576150952942902, 0.2502885233597125, 0.13118578868151032, 0.22152059204893126, 0.09395635442290917, 0.18128528295333057, 0.21054602436664516, 0.22015378796492135, 0.24137937828964606, 0.20474718315667884, 0.11640786355979693, 0.18261659037901035, 0.14113163438684406, 0.2026349177568495, 0.1629275806413869, 0.13452646812357694, 0.16652501961893418, 0.18557077202429273, 0.1847377634234424, 0.1814768641408262, 0.19088637160642408, 0.23218959440044096, 0.17644286531993036, 0.18325848916582488, 0.18333012532478987, 0.167732008562139, 0.17042136327638213, 0.21066384063533683, 0.17564295241346173, 0.18454163998459028, 0.17271959014822147, 0.16648869618703088, 0.1698878444480224, 0.1983435465856569, 0.10596632571314768, 0.1576598332742255, 0.12388503705280396, 0.16003440986085826, 0.4876331039252302, 0.11082403810325192, 0.3459868609298744, 0.41661520114872597, 0.16742518701703957, 0.1983956702610078, 0.13645556523083946, 0.08028672691719985, 0.3745306656219768, 0.17834397433426497, 0.17498884176221818, 0.1784109509626225, 0.17800695136548061, 0.17139630086661106, 0.17396619599871488, 0.19130346861632874, 0.1645626820690277, 0.16438704028149909, 0.07258415289275377, 0.0625585526382656, 0.0676674080772729, 0.06417322520828184, 0.06255122280584224, 0.08362299950330487, 0.07050464918157395, 0.07677631842891464, 0.07087923495393056]}, "mutation_prompt": null}
