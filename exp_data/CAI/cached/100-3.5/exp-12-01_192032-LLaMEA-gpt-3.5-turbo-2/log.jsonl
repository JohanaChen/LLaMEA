{"id": "6acbded8-15e8-43ea-b892-b21ff6c50e39", "solution": "import numpy as np\n\nclass HybridFireflySA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def firefly_search(pop_size, alpha=0.1, beta0=1.0, gamma=0.1):\n            def move_firefly(firefly, best_firefly):\n                beta = beta0 * np.exp(-gamma * np.linalg.norm(firefly - best_firefly))\n                return firefly + alpha * (np.random.rand(self.dim) - 0.5) + beta * (best_firefly - firefly) + 0.01 * np.random.randn(self.dim)\n            \n            pop = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n            best_firefly = min(pop, key=func)\n            \n            for _ in range(self.budget):\n                new_pop = [move_firefly(firefly, best_firefly) for firefly in pop]\n                pop = np.clip(new_pop, -5.0, 5.0)\n                best_firefly = min(pop, key=func)\n            \n            return best_firefly\n        \n        def simulated_annealing(init_solution, T=1.0, alpha=0.9):\n            current_solution = init_solution\n            best_solution = current_solution\n            \n            for _ in range(int(self.budget)):\n                new_solution = current_solution + 0.1 * np.random.randn(self.dim)\n                delta_E = func(new_solution) - func(current_solution)\n                \n                if delta_E < 0 or np.random.rand() < np.exp(-delta_E / T):\n                    current_solution = new_solution\n                \n                if func(current_solution) < func(best_solution):\n                    best_solution = current_solution\n                \n                T *= alpha\n            \n            return best_solution\n        \n        return firefly_search(20)  # Hybrid optimization using Firefly Algorithm with Simulated Annealing", "name": "HybridFireflySA", "description": "Novel Hybrid Firefly Algorithm with Simulated Annealing for Black Box Optimization", "configspace": "", "generation": 0, "fitness": 0.1991479566388375, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6090227807071521, 0.5611926011144865, 0.5889809654637059, 0.516855035723691, 0.5172882797993763, 0.5339149680523125, 0.575311002746745, 0.5333122100412825, 0.5335686858235749, 0.1002571388498682, 0.012218794691594481, 0.12916528627641566, 0.0632594475236612, 0.03608067728710007, 9.999999999998899e-05, 9.999999999998899e-05, 0.00011810699777092815, 9.999999999998899e-05, 0.05035503971021249, 0.05216304990788756, 0.03246956325226269, 0.09895968707511471, 0.06538757534848572, 0.05658433309669586, 0.07119203011280184, 0.06314717836476103, 0.05821791081173977, 0.05493900097350002, 0.1034057501804051, 0.014400227892056083, 0.0842348509284282, 0.05823359089593272, 0.010386506764189063, 0.03239128235005828, 0.019440904500484968, 0.014877590160475296, 0.6125748467814383, 0.2522620655551515, 0.6287509778104229, 0.31944144249378637, 0.32969132664312784, 0.4080168325162301, 0.6257635302156024, 0.512899094579141, 0.5009528289459726, 0.371687354241343, 0.3653669198800269, 0.3816171996957275, 0.3890906532651982, 0.3805339329669045, 0.36798400940595644, 0.41330651225640136, 0.35128117152227856, 0.34671081429983575, 0.23060436780934146, 0.11621363930913253, 0.1101492930381639, 0.10602245710882541, 0.07480102698638691, 0.05491431672926339, 0.09695649919376059, 0.15248098520295938, 0.11385590757054742, 0.17642728278397424, 0.21715553656398, 0.2051883826971812, 0.2580712997515787, 0.2704999469552971, 0.1897457025981385, 0.26709337911125886, 0.23741926626921805, 0.2835504931496112, 0.3189350153568189, 0.25501035528933635, 0.1278356512129638, 0.2577971370662613, 0.22531408942355602, 0.13641661559317253, 0.13420570566859114, 0.29830522276775995, 0.20176881828099202, 0.000611814024420676, 0.05436791926370843, 0.07837584401559727, 0.06636066575712374, 0.09654702680300253, 0.013135869233269148, 0.00346988535499293, 0.0001407789189279418, 0.0716820949666499, 0.09001263982085961, 0.04231332782572739, 0.0683504164777804, 0.06748167098928082, 0.004974960758548308, 0.014216589826124393, 0.09304751997587557, 0.07293844852487907, 0.06047897394613044, 0.036738802380043456, 0.006125819816042322, 0.011309549589592294, 0.015374561671831488, 0.022099926231453182, 0.04393041141388965, 0.07343572452162206, 0.0453984305266073, 0.02399015960725015, 0.10808620896855659, 0.1644106291393589, 0.11857553574466784, 0.13109277294139232, 0.12744538127428773, 0.0929795432920959, 0.13643893549577024, 0.13149361586713626, 0.12295424790228249, 0.48181743895128293, 0.47047788102284527, 0.4929092464590219, 0.471712928954917, 0.49913044404675655, 0.44481784975580274, 0.4783669942960488, 0.4911036316120371, 0.48826413997512796, 0.017257175301173766, 0.009830000712516052, 9.999999999998899e-05, 0.12078464059228322, 0.04797204524913179, 0.09102204214407716, 0.0564522488655439, 0.06519730592600681, 0.07407070064541754, 0.21472474470733172, 0.1413025213572271, 0.20338289787431618, 0.2898386260337745, 0.3043424784500618, 0.2109393046945428, 0.3584511168787946, 0.17523094824002527, 0.2206336837628443, 0.15343564848357927, 0.2013276175145683, 0.16815039768244788, 0.181929480827421, 0.24055611782237418, 0.1860485408739896, 0.13747667539165653, 0.22262551774050876, 0.1325339641105514, 0.1169906123074339, 0.08557782844227169, 0.12329271626536886, 0.13152994657021222, 0.186060759987985, 0.15859414996613597, 0.07818891027717201, 0.13458712519674298, 0.06768464572485278, 0.18597598413362104, 0.194412444423404, 0.21255913302941465, 0.21631424695872925, 0.23296544423616106, 0.1962040581539647, 0.21333070199805992, 0.1946086340345714, 0.1820947675932666, 0.1635063298115288, 0.19752521860432248, 0.16305240342933247, 0.15910034430173614, 0.15518858107721734, 0.16168166894661595, 0.174865564712525, 0.20277427564611972, 0.15271989527920637, 0.8970971237647802, 0.18989219529114587, 0.15406761956194404, 0.17390031772443815, 0.20171047492485872, 0.20165512158775722, 0.12295556452823708, 0.16970538944263203, 0.16596676803497012, 0.7828964079919893, 0.2092787466471362, 0.05162531933554804, 0.10471446812014107, 0.1698092044752315, 0.7950233749222423, 0.7024742881278867, 0.6393298976408044, 0.5248572300565268, 0.21129170194562208, 0.223908182149413, 0.19053929052040308, 0.19633936914578376, 0.19073420041748923, 0.20029594967550213, 0.20818201475711962, 0.17886483080865423, 0.19806792661972128, 0.09637687404050743, 0.0604890880333292, 0.06078274896707081, 0.0856915308460906, 0.10331624479995694, 0.06323541953083334, 0.0786652510161524, 0.09488102448978464, 0.09504542312959507]}, "mutation_prompt": null}
{"id": "ce77c83b-a79e-446d-9b7e-06efd99499d6", "solution": "import numpy as np\n\nclass HybridFireflySA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def firefly_search(pop_size, alpha=0.1, beta0=1.0, gamma=0.1):\n            def move_firefly(firefly, best_firefly):\n                beta = beta0 * np.exp(-gamma * np.linalg.norm(firefly - best_firefly))\n                return firefly + alpha * (np.random.rand(self.dim) - 0.5) + beta * (best_firefly - firefly) + 0.01 * np.random.randn(self.dim)\n            \n            pop = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n            best_firefly = min(pop, key=func)\n            \n            for _ in range(self.budget):\n                new_pop = [move_firefly(firefly, best_firefly) for firefly in pop]\n                pop = np.clip(new_pop, -5.0, 5.0)\n                best_firefly = min(pop, key=func)\n            \n            return best_firefly\n        \n        def simulated_annealing(init_solution, T=1.0, alpha=0.9):\n            current_solution = init_solution\n            best_solution = current_solution\n            \n            for _ in range(int(self.budget)):\n                new_solution = current_solution + 0.1 * np.random.randn(self.dim)\n                delta_E = func(new_solution) - func(current_solution)\n                \n                if delta_E < 0 or np.random.rand() < np.exp(-delta_E / T):\n                    current_solution = new_solution\n                \n                if func(current_solution) < func(best_solution):\n                    best_solution = current_solution\n                \n                T *= alpha\n            \n            return best_solution\n        \n        return firefly_search(20)  # Hybrid optimization using Firefly Algorithm with Simulated Annealing", "name": "HybridFireflySA", "description": "Novel Hybrid Firefly Algorithm with Simulated Annealing for Black Box Optimization", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6acbded8-15e8-43ea-b892-b21ff6c50e39", "metadata": {"aucs": [0.6090227807071521, 0.5611926011144865, 0.5889809654637059, 0.516855035723691, 0.5172882797993763, 0.5339149680523125, 0.575311002746745, 0.5333122100412825, 0.5335686858235749, 0.1002571388498682, 0.012218794691594481, 0.12916528627641566, 0.0632594475236612, 0.03608067728710007, 9.999999999998899e-05, 9.999999999998899e-05, 0.00011810699777092815, 9.999999999998899e-05, 0.05035503971021249, 0.05216304990788756, 0.03246956325226269, 0.09895968707511471, 0.06538757534848572, 0.05658433309669586, 0.07119203011280184, 0.06314717836476103, 0.05821791081173977, 0.05493900097350002, 0.1034057501804051, 0.014400227892056083, 0.0842348509284282, 0.05823359089593272, 0.010386506764189063, 0.03239128235005828, 0.019440904500484968, 0.014877590160475296, 0.6125748467814383, 0.2522620655551515, 0.6287509778104229, 0.31944144249378637, 0.32969132664312784, 0.4080168325162301, 0.6257635302156024, 0.512899094579141, 0.5009528289459726, 0.371687354241343, 0.3653669198800269, 0.3816171996957275, 0.3890906532651982, 0.3805339329669045, 0.36798400940595644, 0.41330651225640136, 0.35128117152227856, 0.34671081429983575, 0.23060436780934146, 0.11621363930913253, 0.1101492930381639, 0.10602245710882541, 0.07480102698638691, 0.05491431672926339, 0.09695649919376059, 0.15248098520295938, 0.11385590757054742, 0.17642728278397424, 0.21715553656398, 0.2051883826971812, 0.2580712997515787, 0.2704999469552971, 0.1897457025981385, 0.26709337911125886, 0.23741926626921805, 0.2835504931496112, 0.3189350153568189, 0.25501035528933635, 0.1278356512129638, 0.2577971370662613, 0.22531408942355602, 0.13641661559317253, 0.13420570566859114, 0.29830522276775995, 0.20176881828099202, 0.000611814024420676, 0.05436791926370843, 0.07837584401559727, 0.06636066575712374, 0.09654702680300253, 0.013135869233269148, 0.00346988535499293, 0.0001407789189279418, 0.0716820949666499, 0.09001263982085961, 0.04231332782572739, 0.0683504164777804, 0.06748167098928082, 0.004974960758548308, 0.014216589826124393, 0.09304751997587557, 0.07293844852487907, 0.06047897394613044, 0.036738802380043456, 0.006125819816042322, 0.011309549589592294, 0.015374561671831488, 0.022099926231453182, 0.04393041141388965, 0.07343572452162206, 0.0453984305266073, 0.02399015960725015, 0.10808620896855659, 0.1644106291393589, 0.11857553574466784, 0.13109277294139232, 0.12744538127428773, 0.0929795432920959, 0.13643893549577024, 0.13149361586713626, 0.12295424790228249, 0.48181743895128293, 0.47047788102284527, 0.4929092464590219, 0.471712928954917, 0.49913044404675655, 0.44481784975580274, 0.4783669942960488, 0.4911036316120371, 0.48826413997512796, 0.017257175301173766, 0.009830000712516052, 9.999999999998899e-05, 0.12078464059228322, 0.04797204524913179, 0.09102204214407716, 0.0564522488655439, 0.06519730592600681, 0.07407070064541754, 0.21472474470733172, 0.1413025213572271, 0.20338289787431618, 0.2898386260337745, 0.3043424784500618, 0.2109393046945428, 0.3584511168787946, 0.17523094824002527, 0.2206336837628443, 0.15343564848357927, 0.2013276175145683, 0.16815039768244788, 0.181929480827421, 0.24055611782237418, 0.1860485408739896, 0.13747667539165653, 0.22262551774050876, 0.1325339641105514, 0.1169906123074339, 0.08557782844227169, 0.12329271626536886, 0.13152994657021222, 0.186060759987985, 0.15859414996613597, 0.07818891027717201, 0.13458712519674298, 0.06768464572485278, 0.18597598413362104, 0.194412444423404, 0.21255913302941465, 0.21631424695872925, 0.23296544423616106, 0.1962040581539647, 0.21333070199805992, 0.1946086340345714, 0.1820947675932666, 0.1635063298115288, 0.19752521860432248, 0.16305240342933247, 0.15910034430173614, 0.15518858107721734, 0.16168166894661595, 0.174865564712525, 0.20277427564611972, 0.15271989527920637, 0.8970971237647802, 0.18989219529114587, 0.15406761956194404, 0.17390031772443815, 0.20171047492485872, 0.20165512158775722, 0.12295556452823708, 0.16970538944263203, 0.16596676803497012, 0.7828964079919893, 0.2092787466471362, 0.05162531933554804, 0.10471446812014107, 0.1698092044752315, 0.7950233749222423, 0.7024742881278867, 0.6393298976408044, 0.5248572300565268, 0.21129170194562208, 0.223908182149413, 0.19053929052040308, 0.19633936914578376, 0.19073420041748923, 0.20029594967550213, 0.20818201475711962, 0.17886483080865423, 0.19806792661972128, 0.09637687404050743, 0.0604890880333292, 0.06078274896707081, 0.0856915308460906, 0.10331624479995694, 0.06323541953083334, 0.0786652510161524, 0.09488102448978464, 0.09504542312959507]}, "mutation_prompt": null}
