{"id": "a49f1102-e0e0-4fdb-ad55-50e02683f9eb", "solution": "class HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (budget, dim))\n\n    def __call__(self, func):\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.7:\n                    new_solution[j] = np.random.choice(self.harmony_memory[:, j])\n            if func(new_solution) < func(self.harmony_memory[i]):\n                self.harmony_memory[i] = new_solution\n        return self.harmony_memory[np.argmin([func(sol) for sol in self.harmony_memory])]", "name": "HarmonySearch", "description": "Harmony Search Optimization Algorithm for Black Box Optimization on BBOB Test Suite", "configspace": "", "generation": 0, "fitness": 0.0912991433260731, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.18162017413019715, 0.1745404899867743, 0.1917677606001984, 0.15804171205368167, 0.17669340012522317, 0.16665038092786877, 0.1781882083850771, 0.17980825641498488, 0.17713949788106587, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040799784907077474, 0.04509021058864604, 0.05084426946481635, 0.044470485188186415, 0.0528870379859383, 0.04481995182640863, 0.05026097538475571, 0.06516365434933447, 0.05167726418543539, 0.03179342538994512, 0.03418663933734678, 0.039147160423199656, 0.030290800801860307, 0.04679645941013766, 0.05206950202167915, 0.036101314460890044, 0.03336916662260714, 0.03891948486102592, 0.10895541068603376, 0.07069074346053072, 0.08623071892406564, 0.0813984537632435, 0.09233084497887589, 0.08373749289354782, 0.09010292995649738, 0.08066638054461217, 0.07846432883657939, 0.07446645258596418, 0.08912019617294431, 0.11658141249557408, 0.08717862842104873, 0.06199846575615209, 0.05390864386654226, 0.09239788879864608, 0.06678516198914874, 0.0894403634800155, 0.1330282613029874, 0.1908423792106776, 0.142884581209751, 0.10385549802250493, 0.0992289461503304, 0.11971139972740807, 0.15032945012766796, 0.11790227577178791, 0.13028722676635718, 9.999999999998899e-05, 0.004418747451046645, 0.0037439054017442963, 0.007051008591344332, 9.999999999998899e-05, 9.999999999998899e-05, 0.007248658381110773, 0.005945649294266553, 0.016790757226985753, 0.0155497434054227, 0.05900446625691291, 0.003171805884389145, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.004386754093764433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04824946490472981, 0.06600492231431232, 0.04325570707499371, 0.09039763198634232, 0.05056728067280658, 0.05518483431415877, 0.03880176367026089, 0.03483222045307033, 0.0548300628114432, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007819009540320221, 0.002537501139155629, 9.999999999998899e-05, 0.21452227683051905, 0.19980045974216687, 0.19027748126541277, 0.20348539991740566, 0.1936388760036376, 0.19622403271704714, 0.19543207100480198, 0.23686297844074355, 0.19202424968927712, 0.03757794772105372, 0.05338874168145613, 0.0415247079077351, 0.0367416879166752, 0.04380740140696271, 0.04728996710059796, 0.0583796982373751, 0.04252689126548326, 0.045364380056070464, 0.13619382114103495, 0.13845515313101675, 0.1374367858349187, 0.13989114077770315, 0.1391763086415987, 0.12056879714386526, 0.14883078412420547, 0.14464330089026844, 0.16999910458782075, 0.16459633536769747, 0.15597917581491894, 0.16817092656759636, 0.17480924088638972, 0.17004431809566156, 0.17679827819517957, 0.1590188625274921, 0.173641857573549, 0.17366530967892446, 0.10630023607872952, 0.10076656178670296, 0.11060666870069602, 0.11634284738502687, 0.12716236274234338, 0.11233246973016653, 0.10184598634028641, 0.12308469985034298, 0.1256768032073925, 0.13730799775474556, 0.1576947582655308, 0.15271845682543916, 0.15918500376566713, 0.1545833996117646, 0.1740260112384463, 0.15139732508635784, 0.15399505934749302, 0.17698602297135146, 0.13429135593925745, 0.14814155267190632, 0.13371796461786856, 0.13891651772807656, 0.14985574355914666, 0.15493644566714393, 0.13790604259488204, 0.13617109485568457, 0.16088353937826072, 0.1483247310689234, 0.1644650513416216, 0.16282871262346232, 0.15652111323688, 0.1879631545981687, 0.17951236668877102, 0.1778864553320516, 0.16373368723226234, 0.15822197970842466, 0.15540789345193318, 0.18851040502622107, 0.16973065517778452, 0.15607615654495788, 0.15349920212308443, 0.1486139391690614, 0.18695387481501402, 0.17273799117991662, 0.19158911828513348, 0.17318914379431916, 0.18354605074578234, 0.17365376989996018, 0.18966266607349447, 0.20938651214639248, 0.17783614668788705, 0.17732777677458977, 0.17931443204849273, 0.20617915866347114, 0.05980475162558063, 0.04990516084387997, 0.06486389799795578, 0.057500970378657645, 0.058616724293660605, 0.049554598778171366, 0.07375031887953976, 0.05276593631202975, 0.050934789633681476]}, "mutation_prompt": null}
{"id": "2291cb56-7288-4866-b7ef-3614691175de", "solution": "class HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (budget, dim))\n\n    def __call__(self, func):\n        for i in range(self.budget):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < 0.7:\n                    new_solution[j] = np.random.choice(self.harmony_memory[:, j])\n            if func(new_solution) < func(self.harmony_memory[i]):\n                self.harmony_memory[i] = new_solution\n        return self.harmony_memory[np.argmin([func(sol) for sol in self.harmony_memory])]", "name": "HarmonySearch", "description": "Harmony Search Optimization Algorithm for Black Box Optimization on BBOB Test Suite", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a49f1102-e0e0-4fdb-ad55-50e02683f9eb", "metadata": {"aucs": [0.18162017413019715, 0.1745404899867743, 0.1917677606001984, 0.15804171205368167, 0.17669340012522317, 0.16665038092786877, 0.1781882083850771, 0.17980825641498488, 0.17713949788106587, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040799784907077474, 0.04509021058864604, 0.05084426946481635, 0.044470485188186415, 0.0528870379859383, 0.04481995182640863, 0.05026097538475571, 0.06516365434933447, 0.05167726418543539, 0.03179342538994512, 0.03418663933734678, 0.039147160423199656, 0.030290800801860307, 0.04679645941013766, 0.05206950202167915, 0.036101314460890044, 0.03336916662260714, 0.03891948486102592, 0.10895541068603376, 0.07069074346053072, 0.08623071892406564, 0.0813984537632435, 0.09233084497887589, 0.08373749289354782, 0.09010292995649738, 0.08066638054461217, 0.07846432883657939, 0.07446645258596418, 0.08912019617294431, 0.11658141249557408, 0.08717862842104873, 0.06199846575615209, 0.05390864386654226, 0.09239788879864608, 0.06678516198914874, 0.0894403634800155, 0.1330282613029874, 0.1908423792106776, 0.142884581209751, 0.10385549802250493, 0.0992289461503304, 0.11971139972740807, 0.15032945012766796, 0.11790227577178791, 0.13028722676635718, 9.999999999998899e-05, 0.004418747451046645, 0.0037439054017442963, 0.007051008591344332, 9.999999999998899e-05, 9.999999999998899e-05, 0.007248658381110773, 0.005945649294266553, 0.016790757226985753, 0.0155497434054227, 0.05900446625691291, 0.003171805884389145, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.004386754093764433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04824946490472981, 0.06600492231431232, 0.04325570707499371, 0.09039763198634232, 0.05056728067280658, 0.05518483431415877, 0.03880176367026089, 0.03483222045307033, 0.0548300628114432, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007819009540320221, 0.002537501139155629, 9.999999999998899e-05, 0.21452227683051905, 0.19980045974216687, 0.19027748126541277, 0.20348539991740566, 0.1936388760036376, 0.19622403271704714, 0.19543207100480198, 0.23686297844074355, 0.19202424968927712, 0.03757794772105372, 0.05338874168145613, 0.0415247079077351, 0.0367416879166752, 0.04380740140696271, 0.04728996710059796, 0.0583796982373751, 0.04252689126548326, 0.045364380056070464, 0.13619382114103495, 0.13845515313101675, 0.1374367858349187, 0.13989114077770315, 0.1391763086415987, 0.12056879714386526, 0.14883078412420547, 0.14464330089026844, 0.16999910458782075, 0.16459633536769747, 0.15597917581491894, 0.16817092656759636, 0.17480924088638972, 0.17004431809566156, 0.17679827819517957, 0.1590188625274921, 0.173641857573549, 0.17366530967892446, 0.10630023607872952, 0.10076656178670296, 0.11060666870069602, 0.11634284738502687, 0.12716236274234338, 0.11233246973016653, 0.10184598634028641, 0.12308469985034298, 0.1256768032073925, 0.13730799775474556, 0.1576947582655308, 0.15271845682543916, 0.15918500376566713, 0.1545833996117646, 0.1740260112384463, 0.15139732508635784, 0.15399505934749302, 0.17698602297135146, 0.13429135593925745, 0.14814155267190632, 0.13371796461786856, 0.13891651772807656, 0.14985574355914666, 0.15493644566714393, 0.13790604259488204, 0.13617109485568457, 0.16088353937826072, 0.1483247310689234, 0.1644650513416216, 0.16282871262346232, 0.15652111323688, 0.1879631545981687, 0.17951236668877102, 0.1778864553320516, 0.16373368723226234, 0.15822197970842466, 0.15540789345193318, 0.18851040502622107, 0.16973065517778452, 0.15607615654495788, 0.15349920212308443, 0.1486139391690614, 0.18695387481501402, 0.17273799117991662, 0.19158911828513348, 0.17318914379431916, 0.18354605074578234, 0.17365376989996018, 0.18966266607349447, 0.20938651214639248, 0.17783614668788705, 0.17732777677458977, 0.17931443204849273, 0.20617915866347114, 0.05980475162558063, 0.04990516084387997, 0.06486389799795578, 0.057500970378657645, 0.058616724293660605, 0.049554598778171366, 0.07375031887953976, 0.05276593631202975, 0.050934789633681476]}, "mutation_prompt": null}
