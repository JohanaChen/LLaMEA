{"id": "5e54be19-27b5-44e0-8638-2be8c9a1fe1c", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.particle_pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.particle_vel = np.zeros((self.num_particles, self.dim))\n        self.global_best_pos = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_val = float('inf')\n    \n    def __call__(self, func):\n        for t in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness_val = func(self.particle_pos[i])\n                if fitness_val < self.global_best_val:\n                    self.global_best_val = fitness_val\n                    self.global_best_pos = np.copy(self.particle_pos[i])\n                \n                # Update particle velocity and position using PSO\n                inertia_weight = 0.4\n                cognitive_weight = 0.8\n                social_weight = 0.8\n                r1, r2 = np.random.rand(), np.random.rand()\n                self.particle_vel[i] = inertia_weight * self.particle_vel[i] + \\\n                    cognitive_weight * r1 * (self.global_best_pos - self.particle_pos[i]) + \\\n                    social_weight * r2 * (self.global_best_pos - self.particle_pos[i])\n                self.particle_pos[i] = np.clip(self.particle_pos[i] + self.particle_vel[i], self.lower_bound, self.upper_bound)\n                \n                # Perform Simulated Annealing for local search\n                current_pos = self.particle_pos[i]\n                current_val = func(current_pos)\n                T = 1.0 - t / self.max_iter  # Annealing schedule\n                new_pos = current_pos + np.random.normal(0, T, self.dim)\n                new_pos = np.clip(new_pos, self.lower_bound, self.upper_bound)\n                new_val = func(new_pos)\n                if new_val < current_val or np.random.rand() < np.exp((current_val - new_val) / T):\n                    self.particle_pos[i] = new_pos\n\n        return self.global_best_pos", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm based on a combination of Particle Swarm Optimization (PSO) and Simulated Annealing (SA) for black box optimization problems.", "configspace": "", "generation": 0, "fitness": 0.22228820215007358, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8405234825539245, 0.8066101008813634, 0.8244986264619569, 0.7986795849366217, 0.7695606269271372, 0.7993075554215751, 0.7981833140296961, 0.7884402779109065, 0.7819887710699146, 9.999999999998899e-05, 0.03685758420319851, 9.999999999998899e-05, 0.14271472335941582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11240818455776136, 0.11007486902835029, 0.07978764074374156, 0.09184787042632647, 0.08135698310065198, 0.1111169360727925, 0.06752146783559343, 0.09476794497415608, 0.08591798561864283, 0.08898984417152511, 0.10706897532803017, 0.1039320606901436, 0.07098610062486455, 0.0979914432478467, 0.12110440445551862, 0.10812476079862987, 0.09657086171851037, 0.11495135698801118, 0.9739347070364249, 0.9436011464516979, 0.9771260809244375, 0.9564925120683132, 0.9685793129936472, 0.9650863885018451, 0.9756094266243064, 0.9736497171982735, 0.9795630495010325, 0.207750840745342, 0.23652481264943404, 0.18772837363325756, 0.25584174777607815, 0.24863484530805113, 0.20684897867583518, 0.25885036986603815, 0.2667132895497246, 0.1681415817083498, 0.3588329228198873, 0.23799000361778289, 0.29447914304301126, 0.20781525175319226, 0.21096271028093871, 0.27537175743084397, 0.22491643284725638, 0.17338840753563178, 0.19181657181536815, 0.14653233488557194, 0.12425622658220314, 0.12448135324035936, 0.09619587016312092, 0.12708160020750003, 0.1279755145084499, 0.15500426561389358, 0.11967195438905931, 0.14221405382214214, 0.1522438161443299, 0.10405840710110037, 0.19289277678934735, 0.13286721511326538, 0.13555631190904172, 0.13328354096439377, 0.19105246318534586, 9.999999999998899e-05, 0.13969279120094447, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04462322619505121, 9.999999999998899e-05, 0.025708821427144368, 0.037870016201055345, 9.999999999998899e-05, 0.054199995112803157, 0.0361366030401441, 0.036728293009281376, 0.12255339103106655, 0.12028923705687233, 0.02555812212658204, 0.06052338787832545, 0.20833082295606786, 0.061266473090288875, 0.04780959779265126, 9.999999999998899e-05, 9.999999999998899e-05, 0.012550925379085642, 0.06375555002584443, 9.999999999998899e-05, 0.0757737244968052, 9.999999999998899e-05, 0.011254938136180836, 9.999999999998899e-05, 0.018022245601959863, 0.2448785036310408, 0.08929603056260171, 0.14464663776348063, 0.021207625161554833, 0.049982592262962644, 0.08108111432400056, 0.15767287692085208, 0.08478308860169814, 0.46465416753120803, 0.44721356826267655, 0.43565743569410065, 0.43674391819672187, 0.48443919822002857, 0.5280374029075934, 0.4820159272380161, 0.44251943386885273, 0.5124220773210013, 0.06606389612257157, 0.08316864740478103, 0.06989008404686681, 0.14934185015024437, 0.12427600083073032, 0.16320225302054436, 0.0778523339297571, 0.08903233550878775, 0.08596507312284707, 0.2600962770520445, 0.17506943746933468, 0.1767996194863377, 0.17902371486145274, 0.3397902114314345, 0.18297381221604214, 0.18157442506511412, 0.18739627244774404, 0.17558940052025795, 0.2619006197291339, 0.2797440271069713, 0.1657546605246042, 0.24003960805637703, 0.22334650159748104, 0.24357194094724854, 0.22417329590990698, 0.2608949910851105, 0.18964604717269318, 0.19500663506225535, 0.20932647993717168, 0.1445970593323922, 0.24802495525929746, 0.18020085033707833, 0.13344465649441117, 0.19600603776740178, 0.18684997536901948, 0.23136414159083618, 0.238361893158766, 0.18230809417134286, 0.24269139803735318, 0.16650893451292725, 0.15860094003652014, 0.2109633681877391, 0.18627265643857416, 0.19474269389431487, 0.2273203760911714, 0.17356709999967912, 0.18954890814099334, 0.1952920349438516, 0.21278069071560823, 0.18717623612260903, 0.17917702746072195, 0.18481753966193637, 0.1973308053608277, 0.19272656838350888, 0.186322157054166, 0.12606986358461436, 0.15272645666477436, 0.8614463798092845, 0.2012623988294544, 0.19990938577924655, 0.11433336818062867, 0.1692587734746629, 0.1520479038963347, 0.0825315698333241, 0.21111603987979155, 0.6627137682136042, 0.20801102115864856, 0.30298732034584086, 0.21263715140488626, 0.10475869078913291, 0.538790529230428, 0.2413014815712582, 0.20789024997432592, 0.1897420319190476, 0.20744123812791682, 0.2186854463168686, 0.20870768069005097, 0.20722631092956723, 0.19938318094584084, 0.22001142701177623, 0.20881483560267577, 0.06568892823184591, 0.0805111067174008, 0.0918245867994425, 0.08871133340123338, 0.08012153682260703, 0.09274301768391613, 0.08696944026715359, 0.06992939839739942, 0.08523807625353585]}, "mutation_prompt": null}
{"id": "177efa77-ad4c-4509-9711-7e09f0f3d20c", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.max_iter = budget // self.num_particles\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.particle_pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.particle_vel = np.zeros((self.num_particles, self.dim))\n        self.global_best_pos = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_val = float('inf')\n    \n    def __call__(self, func):\n        for t in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness_val = func(self.particle_pos[i])\n                if fitness_val < self.global_best_val:\n                    self.global_best_val = fitness_val\n                    self.global_best_pos = np.copy(self.particle_pos[i])\n                \n                # Update particle velocity and position using PSO\n                inertia_weight = 0.4\n                cognitive_weight = 0.8\n                social_weight = 0.8\n                r1, r2 = np.random.rand(), np.random.rand()\n                self.particle_vel[i] = inertia_weight * self.particle_vel[i] + \\\n                    cognitive_weight * r1 * (self.global_best_pos - self.particle_pos[i]) + \\\n                    social_weight * r2 * (self.global_best_pos - self.particle_pos[i])\n                self.particle_pos[i] = np.clip(self.particle_pos[i] + self.particle_vel[i], self.lower_bound, self.upper_bound)\n                \n                # Perform Simulated Annealing for local search\n                current_pos = self.particle_pos[i]\n                current_val = func(current_pos)\n                T = 1.0 - t / self.max_iter  # Annealing schedule\n                new_pos = current_pos + np.random.normal(0, T, self.dim)\n                new_pos = np.clip(new_pos, self.lower_bound, self.upper_bound)\n                new_val = func(new_pos)\n                if new_val < current_val or np.random.rand() < np.exp((current_val - new_val) / T):\n                    self.particle_pos[i] = new_pos\n\n        return self.global_best_pos", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm based on a combination of Particle Swarm Optimization (PSO) and Simulated Annealing (SA) for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e54be19-27b5-44e0-8638-2be8c9a1fe1c", "metadata": {"aucs": [0.8405234825539245, 0.8066101008813634, 0.8244986264619569, 0.7986795849366217, 0.7695606269271372, 0.7993075554215751, 0.7981833140296961, 0.7884402779109065, 0.7819887710699146, 9.999999999998899e-05, 0.03685758420319851, 9.999999999998899e-05, 0.14271472335941582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11240818455776136, 0.11007486902835029, 0.07978764074374156, 0.09184787042632647, 0.08135698310065198, 0.1111169360727925, 0.06752146783559343, 0.09476794497415608, 0.08591798561864283, 0.08898984417152511, 0.10706897532803017, 0.1039320606901436, 0.07098610062486455, 0.0979914432478467, 0.12110440445551862, 0.10812476079862987, 0.09657086171851037, 0.11495135698801118, 0.9739347070364249, 0.9436011464516979, 0.9771260809244375, 0.9564925120683132, 0.9685793129936472, 0.9650863885018451, 0.9756094266243064, 0.9736497171982735, 0.9795630495010325, 0.207750840745342, 0.23652481264943404, 0.18772837363325756, 0.25584174777607815, 0.24863484530805113, 0.20684897867583518, 0.25885036986603815, 0.2667132895497246, 0.1681415817083498, 0.3588329228198873, 0.23799000361778289, 0.29447914304301126, 0.20781525175319226, 0.21096271028093871, 0.27537175743084397, 0.22491643284725638, 0.17338840753563178, 0.19181657181536815, 0.14653233488557194, 0.12425622658220314, 0.12448135324035936, 0.09619587016312092, 0.12708160020750003, 0.1279755145084499, 0.15500426561389358, 0.11967195438905931, 0.14221405382214214, 0.1522438161443299, 0.10405840710110037, 0.19289277678934735, 0.13286721511326538, 0.13555631190904172, 0.13328354096439377, 0.19105246318534586, 9.999999999998899e-05, 0.13969279120094447, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04462322619505121, 9.999999999998899e-05, 0.025708821427144368, 0.037870016201055345, 9.999999999998899e-05, 0.054199995112803157, 0.0361366030401441, 0.036728293009281376, 0.12255339103106655, 0.12028923705687233, 0.02555812212658204, 0.06052338787832545, 0.20833082295606786, 0.061266473090288875, 0.04780959779265126, 9.999999999998899e-05, 9.999999999998899e-05, 0.012550925379085642, 0.06375555002584443, 9.999999999998899e-05, 0.0757737244968052, 9.999999999998899e-05, 0.011254938136180836, 9.999999999998899e-05, 0.018022245601959863, 0.2448785036310408, 0.08929603056260171, 0.14464663776348063, 0.021207625161554833, 0.049982592262962644, 0.08108111432400056, 0.15767287692085208, 0.08478308860169814, 0.46465416753120803, 0.44721356826267655, 0.43565743569410065, 0.43674391819672187, 0.48443919822002857, 0.5280374029075934, 0.4820159272380161, 0.44251943386885273, 0.5124220773210013, 0.06606389612257157, 0.08316864740478103, 0.06989008404686681, 0.14934185015024437, 0.12427600083073032, 0.16320225302054436, 0.0778523339297571, 0.08903233550878775, 0.08596507312284707, 0.2600962770520445, 0.17506943746933468, 0.1767996194863377, 0.17902371486145274, 0.3397902114314345, 0.18297381221604214, 0.18157442506511412, 0.18739627244774404, 0.17558940052025795, 0.2619006197291339, 0.2797440271069713, 0.1657546605246042, 0.24003960805637703, 0.22334650159748104, 0.24357194094724854, 0.22417329590990698, 0.2608949910851105, 0.18964604717269318, 0.19500663506225535, 0.20932647993717168, 0.1445970593323922, 0.24802495525929746, 0.18020085033707833, 0.13344465649441117, 0.19600603776740178, 0.18684997536901948, 0.23136414159083618, 0.238361893158766, 0.18230809417134286, 0.24269139803735318, 0.16650893451292725, 0.15860094003652014, 0.2109633681877391, 0.18627265643857416, 0.19474269389431487, 0.2273203760911714, 0.17356709999967912, 0.18954890814099334, 0.1952920349438516, 0.21278069071560823, 0.18717623612260903, 0.17917702746072195, 0.18481753966193637, 0.1973308053608277, 0.19272656838350888, 0.186322157054166, 0.12606986358461436, 0.15272645666477436, 0.8614463798092845, 0.2012623988294544, 0.19990938577924655, 0.11433336818062867, 0.1692587734746629, 0.1520479038963347, 0.0825315698333241, 0.21111603987979155, 0.6627137682136042, 0.20801102115864856, 0.30298732034584086, 0.21263715140488626, 0.10475869078913291, 0.538790529230428, 0.2413014815712582, 0.20789024997432592, 0.1897420319190476, 0.20744123812791682, 0.2186854463168686, 0.20870768069005097, 0.20722631092956723, 0.19938318094584084, 0.22001142701177623, 0.20881483560267577, 0.06568892823184591, 0.0805111067174008, 0.0918245867994425, 0.08871133340123338, 0.08012153682260703, 0.09274301768391613, 0.08696944026715359, 0.06992939839739942, 0.08523807625353585]}, "mutation_prompt": null}
