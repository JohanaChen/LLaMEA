{"id": "3c9cdfce-afd7-4036-b8a7-12f65c816f3d", "solution": "import numpy as np\n\nclass PSOWithCauchy:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_coef=1.5, social_coef=2.0, cauchy_scale=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_coef = cognitive_coef\n        self.social_coef = social_coef\n        self.cauchy_scale = cauchy_scale\n\n    def __call__(self, func):\n        def cauchy_update(particle, gbest):\n            return particle + self.cauchy_scale * np.random.standard_cauchy(self.dim)\n\n        swarm = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_vals = np.array([func(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_vals)\n        gbest = pbest[gbest_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + \\\n                                self.cognitive_coef * r1 * (pbest[i] - swarm[i]) + \\\n                                self.social_coef * r2 * (gbest - swarm[i])\n                swarm[i] = swarm[i] + velocities[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n\n                if func(swarm[i]) < func(pbest[i]):\n                    pbest[i] = swarm[i].copy()\n\n                    if func(pbest[i]) < func(gbest):\n                        gbest = pbest[i].copy()\n\n        return gbest", "name": "PSOWithCauchy", "description": "A novel algorithm combining Particle Swarm Optimization (PSO) with a local search mechanism using Cauchy distribution for exploration and exploitation in the search space.", "configspace": "", "generation": 0, "fitness": 0.23033242933320947, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7923212448120309, 0.7575456663615167, 0.7743885784652716, 0.7832974758602425, 0.18898344203435347, 0.18232177315614118, 0.7672139785341456, 0.7850430086468232, 0.7594600309111809, 9.999999999998899e-05, 0.5156120858972795, 9.999999999998899e-05, 0.483688731079033, 0.041511857543966135, 9.999999999998899e-05, 9.999999999998899e-05, 0.010427707677230669, 0.04645503273072116, 0.10982866634172517, 0.0910906531062412, 0.11070557956346161, 0.11234706492666924, 0.10412457054532298, 0.1493122194458063, 0.13153511216552127, 0.11699474520319253, 0.1621179482010413, 0.14013879299368104, 0.10583126352248762, 0.10522112275306517, 0.09098547774300791, 0.10777932343600805, 0.13199028998290285, 0.12440186865586633, 0.11371062446709546, 0.11049478214441755, 0.9822372622964972, 0.9852156525305169, 0.9854592123579375, 0.976189917200088, 0.971625166913276, 0.9660074643004476, 0.9782673493485085, 0.9852262278938887, 0.9817609465801646, 0.4932262449021009, 0.414569708022444, 0.05927977510449722, 0.14772543463958276, 0.14737680571474943, 0.46223501805142364, 0.4929773237552818, 0.4552530299505766, 0.4181183137189235, 0.17155147226292033, 0.16325955598784292, 0.12879463285961623, 0.19402028572409546, 0.17278273668021082, 0.21208610805595363, 0.21480735942363127, 0.17941807080914984, 0.21924088119939034, 0.20615189635207154, 0.17796713245004392, 0.12174884423504573, 0.1131813253224414, 0.1130487645899555, 0.16511233287800553, 0.18014708331033813, 0.13266150169044555, 0.1764099819840228, 0.17280567420746207, 0.009794548183734375, 0.16044068888487528, 0.17607258566789463, 0.10460144203568944, 0.21050782906419885, 0.1656496849177187, 9.999999999998899e-05, 0.03311615139938362, 9.999999999998899e-05, 9.999999999998899e-05, 0.08206872920025321, 0.053526089248614905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04756653244352549, 0.027344580894311132, 0.08346491961063873, 0.0645812211040584, 9.999999999998899e-05, 0.00768469533487004, 0.06609764889955827, 0.08792097848986302, 0.019700988983862078, 0.21228118864063694, 0.028507652583493526, 0.05476319245883732, 0.0922896867875923, 0.06777209278865903, 0.06812079778893798, 0.08623102862667453, 9.999999999998899e-05, 0.06236411818386678, 0.08005819393522906, 0.049944828619958415, 0.009386600817293811, 0.07898032946003275, 9.999999999998899e-05, 0.006014945834538987, 0.04484225587615187, 0.0927451757561657, 0.07737026126611013, 0.4587989936323108, 0.5300296665552111, 0.5174704218696766, 0.5397514823556228, 0.5709725305318094, 0.20748201349345996, 0.49967490496359457, 0.497045819229343, 0.49866823563949136, 0.0965362331462637, 0.15149060419392257, 0.06858270132254385, 0.07915270220611637, 0.11209092533931797, 0.13472370316769788, 0.09057674943118998, 0.0923100243301338, 0.06530465256173879, 0.1959217683295279, 0.16951012951357736, 0.16624983622208855, 0.23854049572018599, 0.2408261868699788, 0.16534362031361038, 0.29821672343409467, 0.21362808970122993, 0.16214283125034268, 0.1448281771639418, 0.15193898107005754, 0.3368611022208854, 0.24538016792144546, 0.22070642153601172, 0.1928045128167999, 0.43725877274232205, 0.39492111092448434, 0.17947481083354655, 0.2075250270646153, 0.22348874637429217, 0.21053387152752168, 0.17530647109338948, 0.2595375120290154, 0.24716332010373565, 0.274946383110906, 0.2373215612671261, 0.20365073001962952, 0.22763436692460404, 0.19409041654133097, 0.1744780477451754, 0.21464220862411743, 0.21688185096001, 0.16471355753891181, 0.2101912267279501, 0.22548020620100462, 0.19337986498206094, 0.2208831448327372, 0.19772406404773013, 0.18930509514300597, 0.23129533936917335, 0.2218050261073048, 0.19085930969850728, 0.16770478247217868, 0.19563979339746196, 0.20554198762752462, 0.10419245722675219, 0.17325572900960962, 0.10767228914820004, 0.8604139671244194, 0.19891438806296213, 0.1960035047145111, 0.1594397140559316, 0.16813212710335335, 0.8449467110325382, 0.5450528350011355, 0.1543279719459535, 0.11095805764490518, 0.4515227437231564, 0.6520654525520688, 0.2077685178399984, 0.10317682744259893, 0.10344849436802683, 0.6198797760728716, 0.1827093854096804, 0.17319110550687422, 0.17944636424965377, 0.1701316254392592, 0.17408910425606539, 0.19406618512128193, 0.17424107036991754, 0.1658930248298831, 0.19075554959203422, 0.08755795208498929, 0.075230434885724, 0.06860392300144069, 0.07501738464578034, 0.08162286883612468, 0.07041098352162278, 0.08004982635953306, 0.0723619517091234, 0.09017554200243516]}, "mutation_prompt": null}
{"id": "3b2f91b3-b41b-4f3b-8af4-87a911a8c10f", "solution": "import numpy as np\n\nclass PSOWithCauchy:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_coef=1.5, social_coef=2.0, cauchy_scale=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_coef = cognitive_coef\n        self.social_coef = social_coef\n        self.cauchy_scale = cauchy_scale\n\n    def __call__(self, func):\n        def cauchy_update(particle, gbest):\n            return particle + self.cauchy_scale * np.random.standard_cauchy(self.dim)\n\n        swarm = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n        velocities = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_vals = np.array([func(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_vals)\n        gbest = pbest[gbest_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + \\\n                                self.cognitive_coef * r1 * (pbest[i] - swarm[i]) + \\\n                                self.social_coef * r2 * (gbest - swarm[i])\n                swarm[i] = swarm[i] + velocities[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n\n                if func(swarm[i]) < func(pbest[i]):\n                    pbest[i] = swarm[i].copy()\n\n                    if func(pbest[i]) < func(gbest):\n                        gbest = pbest[i].copy()\n\n        return gbest", "name": "PSOWithCauchy", "description": "A novel algorithm combining Particle Swarm Optimization (PSO) with a local search mechanism using Cauchy distribution for exploration and exploitation in the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3c9cdfce-afd7-4036-b8a7-12f65c816f3d", "metadata": {"aucs": [0.7923212448120309, 0.7575456663615167, 0.7743885784652716, 0.7832974758602425, 0.18898344203435347, 0.18232177315614118, 0.7672139785341456, 0.7850430086468232, 0.7594600309111809, 9.999999999998899e-05, 0.5156120858972795, 9.999999999998899e-05, 0.483688731079033, 0.041511857543966135, 9.999999999998899e-05, 9.999999999998899e-05, 0.010427707677230669, 0.04645503273072116, 0.10982866634172517, 0.0910906531062412, 0.11070557956346161, 0.11234706492666924, 0.10412457054532298, 0.1493122194458063, 0.13153511216552127, 0.11699474520319253, 0.1621179482010413, 0.14013879299368104, 0.10583126352248762, 0.10522112275306517, 0.09098547774300791, 0.10777932343600805, 0.13199028998290285, 0.12440186865586633, 0.11371062446709546, 0.11049478214441755, 0.9822372622964972, 0.9852156525305169, 0.9854592123579375, 0.976189917200088, 0.971625166913276, 0.9660074643004476, 0.9782673493485085, 0.9852262278938887, 0.9817609465801646, 0.4932262449021009, 0.414569708022444, 0.05927977510449722, 0.14772543463958276, 0.14737680571474943, 0.46223501805142364, 0.4929773237552818, 0.4552530299505766, 0.4181183137189235, 0.17155147226292033, 0.16325955598784292, 0.12879463285961623, 0.19402028572409546, 0.17278273668021082, 0.21208610805595363, 0.21480735942363127, 0.17941807080914984, 0.21924088119939034, 0.20615189635207154, 0.17796713245004392, 0.12174884423504573, 0.1131813253224414, 0.1130487645899555, 0.16511233287800553, 0.18014708331033813, 0.13266150169044555, 0.1764099819840228, 0.17280567420746207, 0.009794548183734375, 0.16044068888487528, 0.17607258566789463, 0.10460144203568944, 0.21050782906419885, 0.1656496849177187, 9.999999999998899e-05, 0.03311615139938362, 9.999999999998899e-05, 9.999999999998899e-05, 0.08206872920025321, 0.053526089248614905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04756653244352549, 0.027344580894311132, 0.08346491961063873, 0.0645812211040584, 9.999999999998899e-05, 0.00768469533487004, 0.06609764889955827, 0.08792097848986302, 0.019700988983862078, 0.21228118864063694, 0.028507652583493526, 0.05476319245883732, 0.0922896867875923, 0.06777209278865903, 0.06812079778893798, 0.08623102862667453, 9.999999999998899e-05, 0.06236411818386678, 0.08005819393522906, 0.049944828619958415, 0.009386600817293811, 0.07898032946003275, 9.999999999998899e-05, 0.006014945834538987, 0.04484225587615187, 0.0927451757561657, 0.07737026126611013, 0.4587989936323108, 0.5300296665552111, 0.5174704218696766, 0.5397514823556228, 0.5709725305318094, 0.20748201349345996, 0.49967490496359457, 0.497045819229343, 0.49866823563949136, 0.0965362331462637, 0.15149060419392257, 0.06858270132254385, 0.07915270220611637, 0.11209092533931797, 0.13472370316769788, 0.09057674943118998, 0.0923100243301338, 0.06530465256173879, 0.1959217683295279, 0.16951012951357736, 0.16624983622208855, 0.23854049572018599, 0.2408261868699788, 0.16534362031361038, 0.29821672343409467, 0.21362808970122993, 0.16214283125034268, 0.1448281771639418, 0.15193898107005754, 0.3368611022208854, 0.24538016792144546, 0.22070642153601172, 0.1928045128167999, 0.43725877274232205, 0.39492111092448434, 0.17947481083354655, 0.2075250270646153, 0.22348874637429217, 0.21053387152752168, 0.17530647109338948, 0.2595375120290154, 0.24716332010373565, 0.274946383110906, 0.2373215612671261, 0.20365073001962952, 0.22763436692460404, 0.19409041654133097, 0.1744780477451754, 0.21464220862411743, 0.21688185096001, 0.16471355753891181, 0.2101912267279501, 0.22548020620100462, 0.19337986498206094, 0.2208831448327372, 0.19772406404773013, 0.18930509514300597, 0.23129533936917335, 0.2218050261073048, 0.19085930969850728, 0.16770478247217868, 0.19563979339746196, 0.20554198762752462, 0.10419245722675219, 0.17325572900960962, 0.10767228914820004, 0.8604139671244194, 0.19891438806296213, 0.1960035047145111, 0.1594397140559316, 0.16813212710335335, 0.8449467110325382, 0.5450528350011355, 0.1543279719459535, 0.11095805764490518, 0.4515227437231564, 0.6520654525520688, 0.2077685178399984, 0.10317682744259893, 0.10344849436802683, 0.6198797760728716, 0.1827093854096804, 0.17319110550687422, 0.17944636424965377, 0.1701316254392592, 0.17408910425606539, 0.19406618512128193, 0.17424107036991754, 0.1658930248298831, 0.19075554959203422, 0.08755795208498929, 0.075230434885724, 0.06860392300144069, 0.07501738464578034, 0.08162286883612468, 0.07041098352162278, 0.08004982635953306, 0.0723619517091234, 0.09017554200243516]}, "mutation_prompt": null}
