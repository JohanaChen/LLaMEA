{"id": "30017687-c2dc-4c6c-8d8e-e619f9bac78a", "solution": "import numpy as np\n\nclass HybridBatDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.loudness = 0.5\n        self.pulse_rate = 0.5\n        self.alpha = 0.9\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_solution = population[np.argmin(fitness)]\n        for _ in range(self.budget):\n            new_population = population.copy()\n            for i in range(self.population_size):\n                if np.random.rand() > self.pulse_rate:\n                    frequency = np.mean(fitness)\n                    new_population[i] += (best_solution - population[i]) * self.loudness\n                    new_population[i] = np.clip(new_population[i], self.lower_bound, self.upper_bound)\n                    if np.random.rand() < self.alpha:\n                        best_bat = population[np.argmin(fitness)]\n                        new_population[i] += self.gamma * (best_bat - new_population[i])\n            new_fitness = np.array([func(individual) for individual in new_population])\n            population = new_population\n            fitness = new_fitness\n            best_solution = population[np.argmin(fitness)]\n        return best_solution", "name": "HybridBatDE", "description": "Hybrid Bat-Differential Evolution Algorithm combining the echolocation behavior of bats with the mutation and crossover of Differential Evolution for solving black box optimization problems.", "configspace": "", "generation": 0, "fitness": 0.06574547713802194, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.23311391725849462, 0.1437489257756832, 0.14906346192467046, 0.05179418879051667, 0.06627472645184973, 0.034627543676465034, 0.0890042842741735, 0.10187581171254956, 0.08190720137228658, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018035095041182503, 0.043623184470640286, 0.01713183076276914, 0.05477531148591175, 0.05146236423886641, 0.02030539363795869, 0.05471902568630138, 0.03938240857297437, 0.040629916228623775, 0.038631139429889494, 0.0380231255755219, 0.004639312929521688, 0.04451495751073531, 0.006490891884401551, 9.999999999998899e-05, 9.999999999998899e-05, 0.019052912063655114, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.06266015009006098, 0.010419596073711901, 9.999999999998899e-05, 0.017505683158572927, 0.06581604497332083, 0.020904959908629617, 9.999999999998899e-05, 0.017988947066826744, 9.999999999998899e-05, 0.13099667592446063, 0.07861145956786442, 0.08210864103642523, 0.023524244594535393, 9.999999999998899e-05, 0.04198742958467261, 0.053445593320957, 0.0007491191710843337, 0.06769396870038269, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10338608677425032, 9.999999999998899e-05, 9.999999999998899e-05, 0.003463441117267596, 0.018528438508251255, 9.999999999998899e-05, 0.012406865764687747, 0.0560921592990935, 0.04751627123785074, 0.07261465409831958, 9.999999999998899e-05, 0.040676366851234214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10215873334304093, 0.023878304813500062, 0.07489253138221119, 0.06429107037220616, 9.999999999998899e-05, 0.011954751732476288, 0.13114835735315333, 0.037510378008086986, 0.0530817519304112, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13812998874556548, 0.2229564785665823, 0.19286920877884228, 0.1059431405801623, 0.14066587798096264, 0.09612171643977185, 0.17401508599460647, 0.28970587260640046, 0.18821341612678133, 0.0005135353388139308, 9.999999999998899e-05, 9.999999999998899e-05, 0.02690834682241805, 0.04909702246807701, 0.04151128568795015, 0.030046068227916667, 0.040697911253744334, 0.05477590757680084, 0.134371617838977, 0.18212043189911997, 0.07034500476155159, 0.11410146372307084, 0.11399292252798221, 0.09269984084740901, 0.07302505706042506, 0.09478125855715558, 0.0939947200158866, 0.1385654916921174, 0.14729134207911032, 0.1332583838277397, 0.14748901061275632, 0.1506311808003229, 0.1566043083412696, 0.1325631959668392, 0.13725129007623604, 0.10746408171957078, 0.07085580486648091, 0.0843426061515049, 0.05985044534325845, 0.09966099653406091, 0.11558111382881975, 0.09294003611949464, 0.06956910006644668, 0.08876456249459008, 0.056791416042445086, 0.17722833169775043, 0.13666849172972584, 0.1727538199503511, 0.20044607099999834, 0.15878021115225327, 0.1915565595648251, 0.1685425268133247, 0.19622924302534717, 0.13185548380291712, 0.15592474291096659, 0.13302317565210975, 0.1477570720539888, 0.16313457224882222, 0.16453494622389753, 0.14874008558816387, 0.1494429039211438, 0.15544864093364974, 0.01790826292411385, 0.11326455561694637, 0.09003364102784728, 0.0688224269847365, 0.16905488859270568, 0.12631000115262325, 0.08941041162641528, 0.1043376411803274, 0.06351514539917247, 0.111882840084364, 0.11445580497915653, 0.07899122478077703, 0.10388208968202384, 0.020905342116339987, 0.03205112219919393, 0.052206300311494314, 0.08550713246788366, 0.04316604749553721, 0.05562785839293827, 0.13260034225962225, 0.17313413930408783, 0.15069058845261718, 0.14089714173907564, 0.18077427124953904, 0.1770411906495054, 0.17406497108678154, 0.11704249036048697, 0.14797303430286213, 0.05815494643300878, 0.04727924991790611, 0.041405089758958624, 0.04093812724146051, 0.05552803127630579, 0.04377804261369478, 0.04575418030866929, 0.05685240141603953, 0.049813908069863966]}, "mutation_prompt": null}
{"id": "42daca14-28da-4be6-b7ac-dce634e9101d", "solution": "import numpy as np\n\nclass HybridBatDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.loudness = 0.5\n        self.pulse_rate = 0.5\n        self.alpha = 0.9\n        self.gamma = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_solution = population[np.argmin(fitness)]\n        for _ in range(self.budget):\n            new_population = population.copy()\n            for i in range(self.population_size):\n                if np.random.rand() > self.pulse_rate:\n                    frequency = np.mean(fitness)\n                    new_population[i] += (best_solution - population[i]) * self.loudness\n                    new_population[i] = np.clip(new_population[i], self.lower_bound, self.upper_bound)\n                    if np.random.rand() < self.alpha:\n                        best_bat = population[np.argmin(fitness)]\n                        new_population[i] += self.gamma * (best_bat - new_population[i])\n            new_fitness = np.array([func(individual) for individual in new_population])\n            population = new_population\n            fitness = new_fitness\n            best_solution = population[np.argmin(fitness)]\n        return best_solution", "name": "HybridBatDE", "description": "Hybrid Bat-Differential Evolution Algorithm combining the echolocation behavior of bats with the mutation and crossover of Differential Evolution for solving black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "30017687-c2dc-4c6c-8d8e-e619f9bac78a", "metadata": {"aucs": [0.23311391725849462, 0.1437489257756832, 0.14906346192467046, 0.05179418879051667, 0.06627472645184973, 0.034627543676465034, 0.0890042842741735, 0.10187581171254956, 0.08190720137228658, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018035095041182503, 0.043623184470640286, 0.01713183076276914, 0.05477531148591175, 0.05146236423886641, 0.02030539363795869, 0.05471902568630138, 0.03938240857297437, 0.040629916228623775, 0.038631139429889494, 0.0380231255755219, 0.004639312929521688, 0.04451495751073531, 0.006490891884401551, 9.999999999998899e-05, 9.999999999998899e-05, 0.019052912063655114, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.06266015009006098, 0.010419596073711901, 9.999999999998899e-05, 0.017505683158572927, 0.06581604497332083, 0.020904959908629617, 9.999999999998899e-05, 0.017988947066826744, 9.999999999998899e-05, 0.13099667592446063, 0.07861145956786442, 0.08210864103642523, 0.023524244594535393, 9.999999999998899e-05, 0.04198742958467261, 0.053445593320957, 0.0007491191710843337, 0.06769396870038269, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10338608677425032, 9.999999999998899e-05, 9.999999999998899e-05, 0.003463441117267596, 0.018528438508251255, 9.999999999998899e-05, 0.012406865764687747, 0.0560921592990935, 0.04751627123785074, 0.07261465409831958, 9.999999999998899e-05, 0.040676366851234214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10215873334304093, 0.023878304813500062, 0.07489253138221119, 0.06429107037220616, 9.999999999998899e-05, 0.011954751732476288, 0.13114835735315333, 0.037510378008086986, 0.0530817519304112, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13812998874556548, 0.2229564785665823, 0.19286920877884228, 0.1059431405801623, 0.14066587798096264, 0.09612171643977185, 0.17401508599460647, 0.28970587260640046, 0.18821341612678133, 0.0005135353388139308, 9.999999999998899e-05, 9.999999999998899e-05, 0.02690834682241805, 0.04909702246807701, 0.04151128568795015, 0.030046068227916667, 0.040697911253744334, 0.05477590757680084, 0.134371617838977, 0.18212043189911997, 0.07034500476155159, 0.11410146372307084, 0.11399292252798221, 0.09269984084740901, 0.07302505706042506, 0.09478125855715558, 0.0939947200158866, 0.1385654916921174, 0.14729134207911032, 0.1332583838277397, 0.14748901061275632, 0.1506311808003229, 0.1566043083412696, 0.1325631959668392, 0.13725129007623604, 0.10746408171957078, 0.07085580486648091, 0.0843426061515049, 0.05985044534325845, 0.09966099653406091, 0.11558111382881975, 0.09294003611949464, 0.06956910006644668, 0.08876456249459008, 0.056791416042445086, 0.17722833169775043, 0.13666849172972584, 0.1727538199503511, 0.20044607099999834, 0.15878021115225327, 0.1915565595648251, 0.1685425268133247, 0.19622924302534717, 0.13185548380291712, 0.15592474291096659, 0.13302317565210975, 0.1477570720539888, 0.16313457224882222, 0.16453494622389753, 0.14874008558816387, 0.1494429039211438, 0.15544864093364974, 0.01790826292411385, 0.11326455561694637, 0.09003364102784728, 0.0688224269847365, 0.16905488859270568, 0.12631000115262325, 0.08941041162641528, 0.1043376411803274, 0.06351514539917247, 0.111882840084364, 0.11445580497915653, 0.07899122478077703, 0.10388208968202384, 0.020905342116339987, 0.03205112219919393, 0.052206300311494314, 0.08550713246788366, 0.04316604749553721, 0.05562785839293827, 0.13260034225962225, 0.17313413930408783, 0.15069058845261718, 0.14089714173907564, 0.18077427124953904, 0.1770411906495054, 0.17406497108678154, 0.11704249036048697, 0.14797303430286213, 0.05815494643300878, 0.04727924991790611, 0.041405089758958624, 0.04093812724146051, 0.05552803127630579, 0.04377804261369478, 0.04575418030866929, 0.05685240141603953, 0.049813908069863966]}, "mutation_prompt": null}
