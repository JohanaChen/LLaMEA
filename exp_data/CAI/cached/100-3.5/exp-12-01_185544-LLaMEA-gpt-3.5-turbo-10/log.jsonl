{"id": "e2cba0b0-0a4b-4ebc-98c6-082e06a04ffa", "solution": "import numpy as np\n\nclass EMAO:\n    def __init__(self, budget, dim, num_agents=10, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.num_agents = num_agents\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        agents = np.random.uniform(-5.0, 5.0, size=(self.num_agents, self.dim))\n        for _ in range(self.max_iter):\n            for i in range(self.num_agents):\n                if self.budget <= 0:\n                    break\n                new_position = agents[i] + np.random.uniform(-0.1, 0.1, size=self.dim)\n                if func(new_position) < func(agents[i]):\n                    agents[i] = new_position\n                self.budget -= 1\n            if _ % 10 == 0:  # Share information every 10 iterations\n                best_agent = agents[np.argmin([func(agent) for agent in agents])]\n                agents = [best_agent + np.random.uniform(-0.5, 0.5, size=self.dim) for _ in range(self.num_agents)]\n        return agents[np.argmin([func(agent) for agent in agents])]", "name": "EMAO", "description": "Evolutionary Multi-Agent Optimization (EMAO) algorithm where multiple agents evolve independently and share information periodically to improve search diversity and convergence.", "configspace": "", "generation": 0, "fitness": 0.10576316348040998, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.35325419502659383, 0.3604925910718286, 0.344976499166213, 0.1467239598622737, 0.24195846631707008, 0.18478095039824638, 0.3135430990985799, 0.31830807190647625, 0.3212762771618707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03364828283938692, 0.06397802339170777, 0.028604407149348865, 0.051570197179820365, 0.06280505414803339, 0.06394716783274412, 0.0476999410283403, 0.05346980501494358, 0.030455251555960405, 0.06039649270573377, 0.0, 0.018305946604701084, 0.08948109612185184, 0.0036674563534890847, 0.03254547038592248, 0.07354534347765929, 0.03266816790856997, 0.0, 0.14049269694934008, 0.07888515644865624, 0.16484787146388713, 0.11554316498392558, 0.10369307953092499, 0.07389032189480349, 0.07937067736467363, 0.11035436359968298, 0.06592773262404994, 0.07585900585109817, 0.08566983914101278, 0.04206799935042105, 0.1129884252766864, 0.12047584406704648, 0.08070280832356713, 0.12684383375214492, 0.12728429010811337, 0.027289075862459655, 0.3070356797324869, 0.08888965290202944, 0.10456133369674936, 0.22044737342032916, 0.043955130705509826, 0.08753280168562982, 0.08959091920418727, 0.06505869248237472, 0.06229503671665737, 0.10319612224527441, 0.0, 0.0, 0.0, 0.0, 0.0, 0.11866514188255062, 0.0933178692824107, 0.12014862471854593, 0.12752156748278853, 0.0, 0.1571728012539816, 0.12654019657642002, 0.07162057248553733, 0.13148872326726213, 0.16751531103226425, 0.0, 0.12212640805686237, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07301078830303775, 0.027496386881267987, 0.053290833293367035, 0.05917944356758287, 0.0, 0.023718023113290965, 0.1523770978885225, 0.021606823942531217, 0.04505540955770526, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03801273427041374, 0.04224097596637344, 0.04860859034226217, 0.03514135543516672, 0.0, 0.03365867212690388, 0.0, 0.0032879839465090877, 0.020815466703079433, 0.3351004313224797, 0.3083609049390983, 0.3431187011191603, 0.3031803515554231, 0.30190271854423534, 0.19187298902801964, 0.32223754598393173, 0.28274277523781133, 0.31685924717132186, 0.04028703143497281, 0.03920346592792889, 0.03612893211486645, 0.08246144303354119, 0.059556575593382344, 0.09308439459992623, 0.06502598631764156, 0.040650678896121506, 0.07690392661418932, 0.13200992964245162, 0.1912005610854861, 0.21157857609590447, 0.2137624291348903, 0.17735020769876808, 0.22743146147737303, 0.20147439643306475, 0.1385131489680662, 0.1371885343600734, 0.11342591912145994, 0.16384189600871868, 0.13293350823617034, 0.15562940558273508, 0.12956625181542136, 0.14808535575255333, 0.19410751963595185, 0.1339389957928614, 0.10675583691526647, 0.06225935233891433, 0.09205153967342705, 0.0714979868632265, 0.1368703939946887, 0.07120383070952119, 0.07150074819145646, 0.10622828653195715, 0.11324207448936063, 0.07154800512410042, 0.16868826487844546, 0.16155021639750322, 0.15854190260860845, 0.1957871448346281, 0.15871631913056372, 0.15873716693388618, 0.22583790488280464, 0.14244251899559657, 0.1609632803454153, 0.17083403817835374, 0.1642744697039361, 0.17734247392103974, 0.1597725456266611, 0.18279353741993232, 0.17744429426325148, 0.16247362600587456, 0.19541965464898137, 0.14970441282007974, 0.12077797150776237, 0.07601473671345027, 0.11928063947962675, 0.16801653176885667, 0.196979006933372, 0.10366715668399551, 0.13082223390841008, 0.11849805825966087, 0.15085314352714418, 0.10817294295318791, 0.1085688763646977, 0.27858460222743653, 0.20200166516848372, 0.1299143577122992, 0.1938546909693447, 0.15502769285135942, 0.07078716613503422, 0.2074728622018036, 0.17415571767556393, 0.15125451743616702, 0.1643043255343467, 0.18199787098026143, 0.1967322540582379, 0.1652070816497715, 0.16560708279119085, 0.19433646921473258, 0.17670035037541254, 0.052380069108004856, 0.06967196926655073, 0.063375002940386, 0.04769290860785114, 0.06255708070017141, 0.02511041848338813, 0.05935445508948056, 0.047785437649323304, 0.04165899767058401]}, "mutation_prompt": null}
{"id": "8abe73d6-db94-4d27-bb7f-d93efb56e6a5", "solution": "import numpy as np\n\nclass EMAO:\n    def __init__(self, budget, dim, num_agents=10, max_iter=100, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_agents = num_agents\n        self.max_iter = max_iter\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        agents = np.random.uniform(-5.0, 5.0, size=(self.num_agents, self.dim))\n        for _ in range(self.max_iter):\n            for i in range(self.num_agents):\n                if self.budget <= 0:\n                    break\n                mutation = np.random.uniform(-self.mutation_rate, self.mutation_rate, size=self.dim)\n                new_position = agents[i] + mutation\n                if func(new_position) < func(agents[i]):\n                    agents[i] = new_position\n                self.budget -= 1\n            if _ % 10 == 0:  # Share information every 10 iterations\n                best_agent = agents[np.argmin([func(agent) for agent in agents])]\n                agents = [best_agent + np.random.uniform(-0.5, 0.5, size=self.dim) for _ in range(self.num_agents)]\n        return agents[np.argmin([func(agent) for agent in agents])]", "name": "EMAO", "description": "Enhancing the exploration-exploitation balance by introducing a dynamic mutation rate based on fitness improvement.", "configspace": "", "generation": 1, "fitness": 0.10576316348040998, "feedback": "", "error": "", "parent_id": "e2cba0b0-0a4b-4ebc-98c6-082e06a04ffa", "metadata": {"aucs": [0.35325419502659383, 0.3604925910718286, 0.344976499166213, 0.1467239598622737, 0.24195846631707008, 0.18478095039824638, 0.3135430990985799, 0.31830807190647625, 0.3212762771618707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03364828283938692, 0.06397802339170777, 0.028604407149348865, 0.051570197179820365, 0.06280505414803339, 0.06394716783274412, 0.0476999410283403, 0.05346980501494358, 0.030455251555960405, 0.06039649270573377, 0.0, 0.018305946604701084, 0.08948109612185184, 0.0036674563534890847, 0.03254547038592248, 0.07354534347765929, 0.03266816790856997, 0.0, 0.14049269694934008, 0.07888515644865624, 0.16484787146388713, 0.11554316498392558, 0.10369307953092499, 0.07389032189480349, 0.07937067736467363, 0.11035436359968298, 0.06592773262404994, 0.07585900585109817, 0.08566983914101278, 0.04206799935042105, 0.1129884252766864, 0.12047584406704648, 0.08070280832356713, 0.12684383375214492, 0.12728429010811337, 0.027289075862459655, 0.3070356797324869, 0.08888965290202944, 0.10456133369674936, 0.22044737342032916, 0.043955130705509826, 0.08753280168562982, 0.08959091920418727, 0.06505869248237472, 0.06229503671665737, 0.10319612224527441, 0.0, 0.0, 0.0, 0.0, 0.0, 0.11866514188255062, 0.0933178692824107, 0.12014862471854593, 0.12752156748278853, 0.0, 0.1571728012539816, 0.12654019657642002, 0.07162057248553733, 0.13148872326726213, 0.16751531103226425, 0.0, 0.12212640805686237, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07301078830303775, 0.027496386881267987, 0.053290833293367035, 0.05917944356758287, 0.0, 0.023718023113290965, 0.1523770978885225, 0.021606823942531217, 0.04505540955770526, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03801273427041374, 0.04224097596637344, 0.04860859034226217, 0.03514135543516672, 0.0, 0.03365867212690388, 0.0, 0.0032879839465090877, 0.020815466703079433, 0.3351004313224797, 0.3083609049390983, 0.3431187011191603, 0.3031803515554231, 0.30190271854423534, 0.19187298902801964, 0.32223754598393173, 0.28274277523781133, 0.31685924717132186, 0.04028703143497281, 0.03920346592792889, 0.03612893211486645, 0.08246144303354119, 0.059556575593382344, 0.09308439459992623, 0.06502598631764156, 0.040650678896121506, 0.07690392661418932, 0.13200992964245162, 0.1912005610854861, 0.21157857609590447, 0.2137624291348903, 0.17735020769876808, 0.22743146147737303, 0.20147439643306475, 0.1385131489680662, 0.1371885343600734, 0.11342591912145994, 0.16384189600871868, 0.13293350823617034, 0.15562940558273508, 0.12956625181542136, 0.14808535575255333, 0.19410751963595185, 0.1339389957928614, 0.10675583691526647, 0.06225935233891433, 0.09205153967342705, 0.0714979868632265, 0.1368703939946887, 0.07120383070952119, 0.07150074819145646, 0.10622828653195715, 0.11324207448936063, 0.07154800512410042, 0.16868826487844546, 0.16155021639750322, 0.15854190260860845, 0.1957871448346281, 0.15871631913056372, 0.15873716693388618, 0.22583790488280464, 0.14244251899559657, 0.1609632803454153, 0.17083403817835374, 0.1642744697039361, 0.17734247392103974, 0.1597725456266611, 0.18279353741993232, 0.17744429426325148, 0.16247362600587456, 0.19541965464898137, 0.14970441282007974, 0.12077797150776237, 0.07601473671345027, 0.11928063947962675, 0.16801653176885667, 0.196979006933372, 0.10366715668399551, 0.13082223390841008, 0.11849805825966087, 0.15085314352714418, 0.10817294295318791, 0.1085688763646977, 0.27858460222743653, 0.20200166516848372, 0.1299143577122992, 0.1938546909693447, 0.15502769285135942, 0.07078716613503422, 0.2074728622018036, 0.17415571767556393, 0.15125451743616702, 0.1643043255343467, 0.18199787098026143, 0.1967322540582379, 0.1652070816497715, 0.16560708279119085, 0.19433646921473258, 0.17670035037541254, 0.052380069108004856, 0.06967196926655073, 0.063375002940386, 0.04769290860785114, 0.06255708070017141, 0.02511041848338813, 0.05935445508948056, 0.047785437649323304, 0.04165899767058401]}, "mutation_prompt": null}
