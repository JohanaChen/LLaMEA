{"id": "9e32203b-f892-4e39-ae46-426de46ac9e5", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, par=0.5, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.par = par\n        self.bandwidth = bw\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory(size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (size, self.dim))\n\n        def update_harmony_memory(hm, new_solution):\n            hm = np.vstack((hm, new_solution))\n            hm_fitness = np.array([func(sol) for sol in hm])\n            sorted_indices = np.argsort(hm_fitness)\n            return hm[sorted_indices][:len(hm)]\n\n        harmony_memory = initialize_harmony_memory(5)\n        for _ in range(self.budget-5):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = harmony_memory[np.random.randint(0, len(harmony_memory))][i]\n                    if np.random.rand() < self.par:\n                        new_solution[i] += np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n            harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        best_solution = harmony_memory[np.argmin([func(sol) for sol in harmony_memory])]\n        return best_solution", "name": "HarmonySearch", "description": "Harmony Search Algorithm: A novel metaheuristic algorithm inspired by music improvisation techniques to find optimal solutions by harmonizing different \"musical notes\" (parameter values) in a solution space.", "configspace": "", "generation": 0, "fitness": 0.046486719913449714, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.10029747427827496, 0.0957369037026996, 0.11695460287001025, 0.06132138645905083, 0.06963266607721075, 0.05458269693833229, 0.08729870771126302, 0.08498443931663657, 0.07118016053823906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01580119781266731, 0.0014269503364791047, 0.008033352805554395, 0.007677066912583519, 0.016586583464237137, 0.007432765773048744, 0.03189189731331821, 0.0102818903849069, 0.008448924453896, 9.999999999998899e-05, 9.999999999998899e-05, 0.02610336959420534, 9.999999999998899e-05, 0.0020153497474242332, 0.008093929468088956, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05156588115053806, 0.043389133210138375, 0.05109657000208756, 0.054610455247795064, 0.04687545855643349, 0.03862862672919387, 0.05752497171421367, 0.048986754550083944, 0.049733856889297434, 0.026431087325304525, 0.022669600759785302, 9.999999999998899e-05, 0.0143948488042972, 0.013646112774186259, 0.00955566535784802, 0.03582863201901887, 9.999999999998899e-05, 9.999999999998899e-05, 0.05206547875707057, 0.044074579541654946, 0.05743666605859399, 0.0721566739749353, 0.0603108111153966, 0.02412467947947894, 0.07896132481348572, 0.035899072350004446, 0.04152137303504444, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016861566573775022, 0.02685603186479224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12167821603935303, 0.15049346999946378, 0.15478640944489996, 0.09245002503237587, 0.13083836685018502, 0.1172509941338914, 0.11212723314725404, 0.19734817501088409, 0.12986868549746433, 0.010096338902788937, 0.006307189366509869, 0.019597337373450263, 0.0005497179201271463, 0.020834634347304037, 0.002588941302201997, 9.999999999998899e-05, 0.02792029367643878, 0.0267656688986897, 0.08406566318177433, 0.0724250104270533, 0.07979217515679737, 0.1060948702881993, 0.1085190338618458, 0.08206930271818402, 0.08941956318542599, 0.08038747665680634, 0.09833962743188407, 0.1309885159044708, 0.13005421621682, 0.13613958001532211, 0.12034570064525674, 0.1492360631896218, 0.12502120941681294, 0.11420206329748472, 0.11658087143034923, 0.1325908492046517, 0.04969192207200501, 0.05652973371659986, 0.04876245063360207, 0.0641968717083915, 0.0831511409835517, 0.06400161894441203, 0.08437369115753501, 0.06855011637496622, 0.05965608013764012, 0.10320190979494293, 0.10056883421996388, 0.09372629410757183, 0.12872552564177664, 0.11538567874990746, 0.11071431989616654, 0.12245976138762271, 0.09261735899619239, 0.10289386831383707, 9.999999999998899e-05, 0.12955112269119873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09560063818818221, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08546155775407283, 0.10386835462670918, 0.14105823014906005, 0.11609585972250058, 0.1207914665021157, 0.0693957151246044, 0.11492209766233696, 0.10752486726537258, 0.08258679986526563, 0.10365361608778279, 0.07336887368486023, 0.06359099761412801, 0.0641576249295307, 0.039347966026314185, 0.07478006872567822, 0.04193172552709423, 0.07214389211863148, 0.05100913972270915, 0.13659034060555164, 0.1549440786968862, 0.14763022729669195, 0.13473882464444464, 0.14246640492342644, 0.15245333363134683, 0.13662529300906956, 0.1454484153131893, 0.14743135987625988, 0.017800622827591317, 0.017537936937268905, 0.03664151573151597, 0.01528850260797987, 0.032335862066287024, 0.019051451624924942, 0.021709908450241677, 0.011937178165342122, 0.02389073628766314]}, "mutation_prompt": null}
{"id": "ed85f2f1-575a-42ca-9311-43130cc1e380", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, par=0.5, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.par = par\n        self.bandwidth = bw\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory(size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (size, self.dim))\n\n        def update_harmony_memory(hm, new_solution):\n            hm = np.vstack((hm, new_solution))\n            hm_fitness = np.array([func(sol) for sol in hm])\n            sorted_indices = np.argsort(hm_fitness)\n            return hm[sorted_indices][:len(hm)]\n\n        harmony_memory = initialize_harmony_memory(5)\n        for _ in range(self.budget-5):\n            new_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = harmony_memory[np.random.randint(0, len(harmony_memory))][i]\n                    if np.random.rand() < self.par:\n                        new_solution[i] += np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n            harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        best_solution = harmony_memory[np.argmin([func(sol) for sol in harmony_memory])]\n        return best_solution", "name": "HarmonySearch", "description": "Harmony Search Algorithm: A novel metaheuristic algorithm inspired by music improvisation techniques to find optimal solutions by harmonizing different \"musical notes\" (parameter values) in a solution space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e32203b-f892-4e39-ae46-426de46ac9e5", "metadata": {"aucs": [0.10029747427827496, 0.0957369037026996, 0.11695460287001025, 0.06132138645905083, 0.06963266607721075, 0.05458269693833229, 0.08729870771126302, 0.08498443931663657, 0.07118016053823906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01580119781266731, 0.0014269503364791047, 0.008033352805554395, 0.007677066912583519, 0.016586583464237137, 0.007432765773048744, 0.03189189731331821, 0.0102818903849069, 0.008448924453896, 9.999999999998899e-05, 9.999999999998899e-05, 0.02610336959420534, 9.999999999998899e-05, 0.0020153497474242332, 0.008093929468088956, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05156588115053806, 0.043389133210138375, 0.05109657000208756, 0.054610455247795064, 0.04687545855643349, 0.03862862672919387, 0.05752497171421367, 0.048986754550083944, 0.049733856889297434, 0.026431087325304525, 0.022669600759785302, 9.999999999998899e-05, 0.0143948488042972, 0.013646112774186259, 0.00955566535784802, 0.03582863201901887, 9.999999999998899e-05, 9.999999999998899e-05, 0.05206547875707057, 0.044074579541654946, 0.05743666605859399, 0.0721566739749353, 0.0603108111153966, 0.02412467947947894, 0.07896132481348572, 0.035899072350004446, 0.04152137303504444, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016861566573775022, 0.02685603186479224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12167821603935303, 0.15049346999946378, 0.15478640944489996, 0.09245002503237587, 0.13083836685018502, 0.1172509941338914, 0.11212723314725404, 0.19734817501088409, 0.12986868549746433, 0.010096338902788937, 0.006307189366509869, 0.019597337373450263, 0.0005497179201271463, 0.020834634347304037, 0.002588941302201997, 9.999999999998899e-05, 0.02792029367643878, 0.0267656688986897, 0.08406566318177433, 0.0724250104270533, 0.07979217515679737, 0.1060948702881993, 0.1085190338618458, 0.08206930271818402, 0.08941956318542599, 0.08038747665680634, 0.09833962743188407, 0.1309885159044708, 0.13005421621682, 0.13613958001532211, 0.12034570064525674, 0.1492360631896218, 0.12502120941681294, 0.11420206329748472, 0.11658087143034923, 0.1325908492046517, 0.04969192207200501, 0.05652973371659986, 0.04876245063360207, 0.0641968717083915, 0.0831511409835517, 0.06400161894441203, 0.08437369115753501, 0.06855011637496622, 0.05965608013764012, 0.10320190979494293, 0.10056883421996388, 0.09372629410757183, 0.12872552564177664, 0.11538567874990746, 0.11071431989616654, 0.12245976138762271, 0.09261735899619239, 0.10289386831383707, 9.999999999998899e-05, 0.12955112269119873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09560063818818221, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08546155775407283, 0.10386835462670918, 0.14105823014906005, 0.11609585972250058, 0.1207914665021157, 0.0693957151246044, 0.11492209766233696, 0.10752486726537258, 0.08258679986526563, 0.10365361608778279, 0.07336887368486023, 0.06359099761412801, 0.0641576249295307, 0.039347966026314185, 0.07478006872567822, 0.04193172552709423, 0.07214389211863148, 0.05100913972270915, 0.13659034060555164, 0.1549440786968862, 0.14763022729669195, 0.13473882464444464, 0.14246640492342644, 0.15245333363134683, 0.13662529300906956, 0.1454484153131893, 0.14743135987625988, 0.017800622827591317, 0.017537936937268905, 0.03664151573151597, 0.01528850260797987, 0.032335862066287024, 0.019051451624924942, 0.021709908450241677, 0.011937178165342122, 0.02389073628766314]}, "mutation_prompt": null}
