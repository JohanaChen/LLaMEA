{"id": "e41510bf-eddd-40a7-a270-552ece8e6199", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_local_evals=50, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_local_evals = max_local_evals\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        personal_best = swarm_position.copy()\n        global_best = personal_best[np.argmin([func(p) for p in personal_best])]\n        \n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                # Update velocity\n                inertia_weight = 0.5 + 0.5 * np.cos((np.pi * _)/self.max_iter)\n                cognitive_component = 1.5 * np.random.rand(self.dim) * (personal_best[i] - swarm_position[i])\n                social_component = 1.5 * np.random.rand(self.dim) * (global_best - swarm_position[i])\n                swarm_velocity[i] = inertia_weight * swarm_velocity[i] + cognitive_component + social_component\n                \n                # Update position\n                swarm_position[i] = np.clip(swarm_position[i] + swarm_velocity[i], -5.0, 5.0)\n                \n                # Local search with Simulated Annealing\n                local_position = swarm_position[i].copy()\n                local_best = local_position.copy()\n                for _ in range(self.max_local_evals):\n                    new_position = local_position + np.random.normal(0, 0.1, self.dim)\n                    if func(new_position) < func(local_position):\n                        local_position = new_position\n                        if func(local_position) < func(local_best):\n                            local_best = local_position\n                    else:\n                        delta_E = func(new_position) - func(local_position)\n                        if np.random.rand() < np.exp(-delta_E):\n                            local_position = new_position\n                \n                swarm_position[i] = local_best\n                \n                # Update personal best and global best\n                if func(swarm_position[i]) < func(personal_best[i]):\n                    personal_best[i] = swarm_position[i]\n                if func(personal_best[i]) < func(global_best):\n                    global_best = personal_best[i]\n        \n        return global_best", "name": "PSO_SA_Optimizer", "description": "A metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to explore the search space efficiently and escape local optima by using global and local search strategies in a balanced manner.", "configspace": "", "generation": 0, "fitness": 0.1215032682699057, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.21065631746765712, 0.18977815277325683, 0.26561068062743376, 0.20708341564633614, 0.19693995148693066, 0.22870398963612404, 0.2174434319892723, 0.2011092016890692, 0.20245161933362266, 9.999999999998899e-05, 9.999999999998899e-05, 0.00041033770903509126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04862441577013665, 0.060355823114047635, 0.06659494295950463, 0.09698879784023862, 0.059831411986877026, 0.04442657794226612, 0.06586747920328928, 0.024652101188999742, 0.055562398452782324, 0.05126488196829393, 0.03491660442373323, 0.03821203211790525, 0.08885789775271646, 0.030507319313722858, 0.05446686091188768, 0.02611173899341024, 0.04083524511527592, 0.04586767321490426, 0.3124851698599064, 0.45249989465743645, 0.40042088853734636, 0.3483745111188329, 0.29383035097215937, 0.1460715224847403, 0.4237396082258742, 0.2976485277891877, 0.19487902625613707, 0.14463603481912302, 0.14364100522317036, 0.10499371230149701, 0.1495213052367419, 0.1868517275071918, 0.19084617642718227, 0.13806805703174763, 0.08485935235821107, 0.19757913442737796, 0.17098021515917095, 0.11447712978999203, 0.11943552606951069, 0.18170936325453313, 0.1699111670418677, 0.12782313815257695, 0.13151264405748664, 0.15549568403342984, 0.11481579781372597, 0.14285852478207672, 0.11091784802049787, 0.13038551020206668, 0.10562282214708629, 0.1516240320189849, 0.08666908116591365, 0.12971802178823477, 0.10716520656294704, 0.1509146494295872, 0.14273745869560628, 0.0876706741904667, 0.10828937081693513, 0.13570522517137273, 0.08661098940447942, 0.12576257123374945, 0.1259776113289156, 0.026503354886199815, 0.09984626080316417, 9.999999999998899e-05, 9.999999999998899e-05, 0.015031687354228551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017346732422678368, 0.10134701863862883, 0.10260020918642165, 0.1182858761905522, 0.09083663751638815, 0.03782564381992415, 0.04411736968007751, 0.11649635670503355, 0.07156939285943065, 0.08343275299554376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051221911249143326, 0.05649158572369739, 0.044175216523397065, 0.02065442079502222, 0.04803921008710099, 0.05871573798853058, 0.07391302063556382, 0.02869855086962103, 0.07570445369392642, 0.23436861274715026, 0.21827492003121152, 0.17079416179588824, 0.18405311186523088, 0.15918388701251385, 0.20700003054764882, 0.2374139225087789, 0.21045721323189914, 0.22029573677009318, 0.05560630585399107, 0.03067030993640052, 0.022574312017244136, 0.05800085376797903, 0.040018821802454974, 0.06788277816415356, 0.0700309232132178, 0.05593829979306997, 0.06682026595520218, 0.1465049003838983, 0.145560035459943, 0.12898894883903744, 0.1373951377804733, 0.17598320651481103, 0.19890727159449617, 0.14739497279682057, 0.13074516550017035, 0.19349212980814423, 0.15203160734310184, 0.172519993914503, 0.18376317754563065, 0.16309084843960264, 0.16019295458108862, 0.15740927029435658, 0.16259203610299755, 0.19147698926059098, 0.14215730315189723, 0.10675836892757429, 0.07827402648445625, 0.0712772461648743, 0.10578000495689999, 0.10531156769195038, 0.11169944977323543, 0.10496624997202708, 0.13838485587558846, 0.09820750212845542, 0.18731190809750253, 0.16387855079010516, 0.16865520864442407, 0.17836916692883498, 0.14522643917622113, 0.15640454915641422, 0.1709849436550538, 0.15455851469484772, 0.1598319584305926, 0.15922307560773985, 0.16542353211268435, 0.1726637253295712, 0.16525696776681686, 0.16228690962300585, 0.16768935283543884, 0.1686871502745425, 0.1788117269651126, 0.1585082874464313, 0.2338788307217078, 0.13964276382659424, 0.13312033880171836, 0.35631596125402176, 0.1799165383032798, 0.16015676507562093, 0.11304371209499642, 0.15284838729251604, 0.25988207138218256, 0.313513744321564, 0.14427115771852272, 0.2619983292993985, 0.21674326314368897, 0.16145491911909926, 0.17178981863890808, 0.10468655670984428, 0.1841112845182571, 0.1400064005861783, 0.16290844899163837, 0.17805569668305066, 0.17980494506186584, 0.17049600913796148, 0.1694454371982398, 0.16233763736120854, 0.17591988245595147, 0.1666529181658727, 0.17126572546682362, 0.05644699055207947, 0.06146209908958811, 0.06903122219212454, 0.055065195765365615, 0.05701265209993123, 0.06856264766481579, 0.05097434599302031, 0.05025544121678982, 0.05809724292144458]}, "mutation_prompt": null}
{"id": "abeccbf5-f921-473f-a8d0-7df814e531fd", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_local_evals=50, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_local_evals = max_local_evals\n        self.max_iter = max_iter\n\n    def chaotic_map(self, x):\n        alpha = 2.0\n        return np.mod(x + alpha * np.sin(x), 2 * np.pi)\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        personal_best = swarm_position.copy()\n        global_best = personal_best[np.argmin([func(p) for p in personal_best])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                # Update velocity\n                inertia_weight = 0.5 + 0.5 * np.cos((np.pi * _)/self.max_iter)\n                cognitive_component = 1.5 * np.random.rand(self.dim) * (personal_best[i] - swarm_position[i])\n                social_component = 1.5 * np.random.rand(self.dim) * (global_best - swarm_position[i])\n                swarm_velocity[i] = inertia_weight * swarm_velocity[i] + cognitive_component + social_component\n                \n                # Integrate chaotic map for diversity\n                swarm_position[i] = np.clip(swarm_position[i] + self.chaotic_map(swarm_velocity[i]), -5.0, 5.0)\n\n                # Local search with Simulated Annealing\n                local_position = swarm_position[i].copy()\n                local_best = local_position.copy()\n                for _ in range(self.max_local_evals):\n                    new_position = local_position + np.random.normal(0, 0.1, self.dim)\n                    if func(new_position) < func(local_position):\n                        local_position = new_position\n                        if func(local_position) < func(local_best):\n                            local_best = local_position\n                    else:\n                        delta_E = func(new_position) - func(local_position)\n                        if np.random.rand() < np.exp(-delta_E):\n                            local_position = new_position\n                \n                swarm_position[i] = local_best\n                \n                # Update personal best and global best\n                if func(swarm_position[i]) < func(personal_best[i]):\n                    personal_best[i] = swarm_position[i]\n                if func(personal_best[i]) < func(global_best):\n                    global_best = personal_best[i]\n        \n        return global_best", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing exploration by introducing a chaotic map to diversify search trajectories.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 21, 9, '        for _ in range(self.max_iter):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 21, 9, '        for _ in range(self.max_iter):\\n'))", "parent_id": "e41510bf-eddd-40a7-a270-552ece8e6199", "metadata": {}, "mutation_prompt": null}
