{"id": "dd65c8e5-0786-415d-bd4b-32d38c34af00", "solution": "import numpy as np\n\nclass DE_PSO_Hybrid:\n    def __init__(self, budget, dim, pop_size=50, max_iter=1000, de_cr=0.5, de_f=0.8, pso_c1=2.0, pso_c2=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.max_iter = max_iter\n        self.de_cr = de_cr\n        self.de_f = de_f\n        self.pso_c1 = pso_c1\n        self.pso_c2 = pso_c2\n\n    def __call__(self, func):\n        def de(x, f, cr, pop):\n            mutant = x + f * (pop[np.random.choice(len(pop))] - pop[np.random.choice(len(pop))])\n            trial = np.where(np.random.rand(self.dim) < cr, mutant, x)\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_pos = population.copy()\n        pbest_val = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_val)\n        gbest_pos = pbest_pos[gbest_idx].copy()\n        gbest_val = pbest_val[gbest_idx]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                new_pos = de(population[i], self.de_f, self.de_cr, population)\n                new_val = func(new_pos)\n                if new_val < pbest_val[i]:\n                    pbest_val[i] = new_val\n                    pbest_pos[i] = new_pos\n                    if new_val < gbest_val:\n                        gbest_val = new_val\n                        gbest_pos = new_pos\n                velocity = velocities[i] + self.pso_c1 * np.random.rand() * (pbest_pos[i] - population[i]) + self.pso_c2 * np.random.rand() * (gbest_pos - population[i])\n                population[i] = population[i] + velocity\n            if np.sum(np.abs(velocities)) < 1e-6:\n                break\n\n        return gbest_pos", "name": "DE_PSO_Hybrid", "description": "A novel metaheuristic algorithm based on a hybrid approach combining Differential Evolution (DE) and Particle Swarm Optimization (PSO) for black box optimization.", "configspace": "", "generation": 0, "fitness": 0.048739051240805145, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.11860917256239123, 0.09328135303245266, 0.09160418974405948, 0.0942217514195951, 0.107410762746187, 0.11033114211644335, 0.09975734614470277, 0.12135085981246152, 0.07386471023933794, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010191328093744234, 0.025815080907434673, 0.005275638633511659, 0.010544468052148481, 0.006493004426635696, 0.029405407276033135, 0.018150078853237717, 0.007693168839173259, 0.010575797721399605, 0.0, 0.010098537913949768, 0.0, 0.019501673109847295, 0.010854023205299934, 0.006833238688536802, 0.014664865741570776, 0.0, 0.008002106348801497, 0.08492734498860877, 0.05938902487380071, 0.06485075904357995, 0.09495895689659228, 0.04829574985912444, 0.055109594343233925, 0.10882135940261939, 0.05268857321290765, 0.045641565730178635, 0.06265423285317939, 0.0, 0.0011042145797435232, 0.0, 0.00021551809509001707, 0.02661783460720324, 0.0, 0.011194453811883442, 0.0, 0.10018685869141841, 0.10121924495408763, 0.05973037536276371, 0.08604414441000974, 0.07275849405212154, 0.06695289846452745, 0.026181922062048946, 0.05921649636366433, 0.02521938165522175, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00949770279364004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.12049203233949246, 0.15748132322754993, 0.14829537673711224, 0.10270171191051303, 0.15381824766450514, 0.11156298824818256, 0.16104568613219816, 0.11870091041196118, 0.14862244682199233, 0.0, 0.0045367042554104176, 0.021886321886607996, 0.0325721299095072, 0.0067992136274397375, 0.01750168379108641, 0.01580807734222911, 0.0, 0.02666833626569931, 0.08484849337016587, 0.08600231476351272, 0.11833361437130152, 0.09846289938816155, 0.12004020705088392, 0.10789794917811235, 0.08799080449358865, 0.08090029113184061, 0.07717165476235766, 0.09597227240618145, 0.10736157825573356, 0.16130937881362284, 0.13792052181401182, 0.13296941013842956, 0.15856072973469204, 0.12255749618149925, 0.17369512487615557, 0.11374251144952907, 0.05976163112617183, 0.03548228170753087, 0.08389423256590178, 0.0568629005099881, 0.06584061025177557, 0.07067247160625079, 0.08364015581209883, 0.09968109929816094, 0.07152326799775888, 0.12147293680565874, 0.11773470239983708, 0.13336421106438578, 0.11026790024335642, 0.10060264701409705, 0.10887980745480186, 0.12237199858757519, 0.11329718998043359, 0.12610897469223925, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08588667362722757, 0.07457348599177205, 0.08157840845421871, 0.07318573935631267, 0.1207035396655618, 0.10738921944525337, 0.10692837481480588, 0.10502535409825287, 0.06926818844989102, 0.1103137036995071, 0.10258192672273381, 0.06922728298844572, 0.0505908534635271, 0.04015559158133475, 0.06841034370220933, 0.04680845216491614, 0.09133326552373433, 0.04133833534605069, 0.16606016832350323, 0.15655149527932755, 0.1475449842687161, 0.15709425601827698, 0.13195140578250053, 0.13566321928938108, 0.14961211855402434, 0.13105971799953475, 0.15138793445488408, 0.01351929609764324, 0.02443059468178488, 0.03129662407793532, 0.02691798931623457, 0.03415436066354671, 0.021311409996315533, 0.019102655536616164, 0.03793735337628057, 0.02304487659615495]}, "mutation_prompt": null}
{"id": "a4317124-1de1-4a19-9695-b820ec8ed0b9", "solution": "import numpy as np\n\nclass DE_PSO_Hybrid:\n    def __init__(self, budget, dim, pop_size=50, max_iter=1000, de_cr=0.5, de_f=0.8, pso_c1=2.0, pso_c2=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.max_iter = max_iter\n        self.de_cr = de_cr\n        self.de_f = de_f\n        self.pso_c1 = pso_c1\n        self.pso_c2 = pso_c2\n\n    def __call__(self, func):\n        def de(x, f, cr, pop):\n            mutant = x + f * (pop[np.random.choice(len(pop))] - pop[np.random.choice(len(pop))])\n            trial = np.where(np.random.rand(self.dim) < cr, mutant, x)\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_pos = population.copy()\n        pbest_val = np.array([func(ind) for ind in population])\n        gbest_idx = np.argmin(pbest_val)\n        gbest_pos = pbest_pos[gbest_idx].copy()\n        gbest_val = pbest_val[gbest_idx]\n\n        for _ in range(self.max_iter):\n            for i in range(self.pop_size):\n                new_pos = de(population[i], self.de_f, self.de_cr, population)\n                new_val = func(new_pos)\n                if new_val < pbest_val[i]:\n                    pbest_val[i] = new_val\n                    pbest_pos[i] = new_pos\n                    if new_val < gbest_val:\n                        gbest_val = new_val\n                        gbest_pos = new_pos\n                velocity = velocities[i] + self.pso_c1 * np.random.rand() * (pbest_pos[i] - population[i]) + self.pso_c2 * np.random.rand() * (gbest_pos - population[i])\n                population[i] = population[i] + velocity\n            if np.sum(np.abs(velocities)) < 1e-6:\n                break\n\n        return gbest_pos", "name": "DE_PSO_Hybrid", "description": "A novel metaheuristic algorithm based on a hybrid approach combining Differential Evolution (DE) and Particle Swarm Optimization (PSO) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dd65c8e5-0786-415d-bd4b-32d38c34af00", "metadata": {"aucs": [0.11860917256239123, 0.09328135303245266, 0.09160418974405948, 0.0942217514195951, 0.107410762746187, 0.11033114211644335, 0.09975734614470277, 0.12135085981246152, 0.07386471023933794, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010191328093744234, 0.025815080907434673, 0.005275638633511659, 0.010544468052148481, 0.006493004426635696, 0.029405407276033135, 0.018150078853237717, 0.007693168839173259, 0.010575797721399605, 0.0, 0.010098537913949768, 0.0, 0.019501673109847295, 0.010854023205299934, 0.006833238688536802, 0.014664865741570776, 0.0, 0.008002106348801497, 0.08492734498860877, 0.05938902487380071, 0.06485075904357995, 0.09495895689659228, 0.04829574985912444, 0.055109594343233925, 0.10882135940261939, 0.05268857321290765, 0.045641565730178635, 0.06265423285317939, 0.0, 0.0011042145797435232, 0.0, 0.00021551809509001707, 0.02661783460720324, 0.0, 0.011194453811883442, 0.0, 0.10018685869141841, 0.10121924495408763, 0.05973037536276371, 0.08604414441000974, 0.07275849405212154, 0.06695289846452745, 0.026181922062048946, 0.05921649636366433, 0.02521938165522175, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00949770279364004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.12049203233949246, 0.15748132322754993, 0.14829537673711224, 0.10270171191051303, 0.15381824766450514, 0.11156298824818256, 0.16104568613219816, 0.11870091041196118, 0.14862244682199233, 0.0, 0.0045367042554104176, 0.021886321886607996, 0.0325721299095072, 0.0067992136274397375, 0.01750168379108641, 0.01580807734222911, 0.0, 0.02666833626569931, 0.08484849337016587, 0.08600231476351272, 0.11833361437130152, 0.09846289938816155, 0.12004020705088392, 0.10789794917811235, 0.08799080449358865, 0.08090029113184061, 0.07717165476235766, 0.09597227240618145, 0.10736157825573356, 0.16130937881362284, 0.13792052181401182, 0.13296941013842956, 0.15856072973469204, 0.12255749618149925, 0.17369512487615557, 0.11374251144952907, 0.05976163112617183, 0.03548228170753087, 0.08389423256590178, 0.0568629005099881, 0.06584061025177557, 0.07067247160625079, 0.08364015581209883, 0.09968109929816094, 0.07152326799775888, 0.12147293680565874, 0.11773470239983708, 0.13336421106438578, 0.11026790024335642, 0.10060264701409705, 0.10887980745480186, 0.12237199858757519, 0.11329718998043359, 0.12610897469223925, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08588667362722757, 0.07457348599177205, 0.08157840845421871, 0.07318573935631267, 0.1207035396655618, 0.10738921944525337, 0.10692837481480588, 0.10502535409825287, 0.06926818844989102, 0.1103137036995071, 0.10258192672273381, 0.06922728298844572, 0.0505908534635271, 0.04015559158133475, 0.06841034370220933, 0.04680845216491614, 0.09133326552373433, 0.04133833534605069, 0.16606016832350323, 0.15655149527932755, 0.1475449842687161, 0.15709425601827698, 0.13195140578250053, 0.13566321928938108, 0.14961211855402434, 0.13105971799953475, 0.15138793445488408, 0.01351929609764324, 0.02443059468178488, 0.03129662407793532, 0.02691798931623457, 0.03415436066354671, 0.021311409996315533, 0.019102655536616164, 0.03793735337628057, 0.02304487659615495]}, "mutation_prompt": null}
