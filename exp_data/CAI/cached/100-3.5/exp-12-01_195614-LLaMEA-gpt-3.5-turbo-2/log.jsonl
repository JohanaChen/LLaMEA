{"id": "952e3162-4f4e-45c4-9fe3-4973d0276423", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        \n    def generate_initial_harmony(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n    \n    def pitch_adjustment(self, harmony):\n        new_harmony = np.copy(harmony)\n        for i in range(len(new_harmony)):\n            if np.random.rand() < self.hmcr:\n                if np.random.rand() < self.par:\n                    new_harmony[i] = new_harmony[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n        return np.clip(new_harmony, self.lower_bound, self.upper_bound)\n    \n    def __call__(self, func):\n        harmony_memory = [self.generate_initial_harmony() for _ in range(10)]\n        harmony_memory_fit = [func(harmony) for harmony in harmony_memory]\n        \n        for _ in range(self.budget - 10):\n            new_harmony = self.pitch_adjustment(harmony_memory[np.argmin(harmony_memory_fit)])\n            new_fit = func(new_harmony)\n            if new_fit < max(harmony_memory_fit):\n                idx = np.argmax(harmony_memory_fit)\n                harmony_memory[idx] = new_harmony\n                harmony_memory_fit[idx] = new_fit\n        \n        return harmony_memory[np.argmin(harmony_memory_fit)]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by the process of musicians improvising harmonious melodies, utilizing memory consideration and pitch adjustment.", "configspace": "", "generation": 0, "fitness": 0.10900592727640267, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6111237118002364, 0.5595225350365916, 0.635356497185568, 0.11488640464052913, 0.37699103866747474, 0.34382589399006025, 0.443419126106827, 0.4468539706386757, 0.5725252757987038, 0.29975445079754204, 0.06357069802273696, 0.04821967586455611, 0.3842073179227101, 0.00019121634565177903, 0.0003102063983480008, 0.03794326165786266, 0.02156116510465722, 0.011983954735700575, 0.0024661711082598625, 0.032908867449668144, 9.999999999998899e-05, 0.02102440330499189, 0.007819287940036723, 0.013117732852889308, 0.036736063029950805, 0.013225215424898296, 0.009825125198136497, 0.00292264760692873, 9.999999999998899e-05, 9.999999999998899e-05, 0.06333691389309293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10978823394126902, 0.06497112833812047, 0.14567827132300715, 0.08716176122541341, 0.08677960961211006, 0.07252839075845696, 0.07013987498696717, 0.09320826666310367, 0.06096703023192407, 0.18084620473471247, 0.07943093956155989, 0.03320174405503695, 0.16014821645961108, 0.11727116546971361, 0.10173230170574565, 0.24010668818617076, 0.1612928117596112, 0.060850994531957636, 0.10052113894644021, 0.03775594762470191, 0.006487473152022916, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.1293137407564784, 0.06127604785198437, 0.09084682569248526, 0.04868244297142987, 0.028410191826301667, 0.03448382867586586, 0.17247388515185647, 0.10487625568230674, 0.16858098350859674, 0.20174080281083695, 9.999999999998899e-05, 0.09667719577328227, 0.1802473510238789, 0.0920247525621879, 0.09926803053161859, 0.22589778141091277, 9.999999999998899e-05, 0.1584461924160998, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018100160637956053, 0.036637873173914204, 0.01071221459762528, 0.0017391702668408948, 9.999999999998899e-05, 9.999999999998899e-05, 0.07415986743200442, 0.026189183243397918, 0.0676588403252808, 0.06656377830539695, 9.999999999998899e-05, 0.011949334287701063, 0.21473099364272974, 0.02858368670477973, 0.04352430780308392, 0.02229656357254295, 0.06285443797848056, 0.1092006022021551, 0.06661062674909479, 0.055620052163794176, 0.05210921920777345, 0.03195590303403628, 0.0830525881739782, 0.0319125367291877, 0.028806174079645253, 0.04021867255502343, 0.0286176902349371, 0.03926450637893064, 0.002451330473873914, 0.05621108915190831, 0.009943693066216452, 0.03977572878248703, 0.057805630930463536, 0.36033650011682905, 0.377784216013218, 0.4251192495647358, 0.28186850932279106, 0.2953605366861336, 0.1927375057825872, 0.4218375405124052, 0.3124683731733868, 0.39771699608896316, 0.017114682327232233, 9.999999999998899e-05, 9.999999999998899e-05, 0.02368845942755249, 0.018537087426724774, 0.05210116045295632, 0.019274902838635533, 0.0029506069387118528, 0.07418604139373397, 0.08253288153385807, 0.08056279829147428, 0.07605304657542855, 0.1318612223493537, 0.0793632790996629, 0.07106557140505587, 0.06428980832379672, 0.06481065754677295, 0.09560224496996217, 0.11256334149995129, 0.1276643172531181, 0.1174821241341717, 0.1321414037508314, 0.11656982050453613, 0.1281531390444055, 0.1390660434132147, 0.1259055085875136, 0.1030766764012565, 0.0601015303439717, 0.06008428136450106, 0.056179521457271564, 0.08305302619728805, 0.06528246760256262, 0.05810299281176867, 0.07086848979220306, 0.06390644573297055, 0.04934715672191292, 0.1829040249864775, 0.08028270814775185, 0.16470067415109557, 0.14071999182742578, 0.10316264269354436, 0.10044812020867244, 0.17269299258656956, 0.11018444990192677, 0.16029781563501622, 0.1400821135383148, 0.1342680554304001, 0.19663193537685186, 0.12400352276386328, 0.16358657240335506, 0.17373233164395718, 0.14761737886719528, 0.12858390612875903, 0.12285086625812769, 0.11245743372044703, 0.07553006098348636, 0.12448643679486793, 0.1608269850815881, 0.1985174043665544, 0.10495118599038178, 0.13622310683805194, 0.11078546287517277, 0.0989468060671237, 0.07880067886190933, 0.10786742681520578, 0.2813505277403914, 0.3254784067138786, 0.05497913387975184, 0.17056601384927905, 0.13886118823179228, 0.0651920780614943, 0.24667061160268666, 0.19560821912272863, 0.15546037538596735, 0.19348501790283223, 0.21782347242445788, 0.22149482254391883, 0.20831213871247667, 0.14763305606634736, 0.17271792115935836, 0.26411886644474936, 0.033545594536605994, 0.04770498704421766, 0.06353686412361981, 0.015331909895392348, 0.04238182779818345, 0.01570667424765415, 0.04505399622608419, 0.038107961937258183, 0.037393596334401646]}, "mutation_prompt": null}
{"id": "221d50c5-7e31-40b2-bc2c-c12ce4b728c1", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        \n    def generate_initial_harmony(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n    \n    def pitch_adjustment(self, harmony):\n        new_harmony = np.copy(harmony)\n        for i in range(len(new_harmony)):\n            if np.random.rand() < self.hmcr:\n                if np.random.rand() < self.par:\n                    new_harmony[i] = new_harmony[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n        return np.clip(new_harmony, self.lower_bound, self.upper_bound)\n    \n    def __call__(self, func):\n        harmony_memory = [self.generate_initial_harmony() for _ in range(10)]\n        harmony_memory_fit = [func(harmony) for harmony in harmony_memory]\n        \n        for _ in range(self.budget - 10):\n            new_harmony = self.pitch_adjustment(harmony_memory[np.argmin(harmony_memory_fit)])\n            new_fit = func(new_harmony)\n            if new_fit < max(harmony_memory_fit):\n                idx = np.argmax(harmony_memory_fit)\n                harmony_memory[idx] = new_harmony\n                harmony_memory_fit[idx] = new_fit\n        \n        return harmony_memory[np.argmin(harmony_memory_fit)]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by the process of musicians improvising harmonious melodies, utilizing memory consideration and pitch adjustment.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "952e3162-4f4e-45c4-9fe3-4973d0276423", "metadata": {"aucs": [0.6111237118002364, 0.5595225350365916, 0.635356497185568, 0.11488640464052913, 0.37699103866747474, 0.34382589399006025, 0.443419126106827, 0.4468539706386757, 0.5725252757987038, 0.29975445079754204, 0.06357069802273696, 0.04821967586455611, 0.3842073179227101, 0.00019121634565177903, 0.0003102063983480008, 0.03794326165786266, 0.02156116510465722, 0.011983954735700575, 0.0024661711082598625, 0.032908867449668144, 9.999999999998899e-05, 0.02102440330499189, 0.007819287940036723, 0.013117732852889308, 0.036736063029950805, 0.013225215424898296, 0.009825125198136497, 0.00292264760692873, 9.999999999998899e-05, 9.999999999998899e-05, 0.06333691389309293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10978823394126902, 0.06497112833812047, 0.14567827132300715, 0.08716176122541341, 0.08677960961211006, 0.07252839075845696, 0.07013987498696717, 0.09320826666310367, 0.06096703023192407, 0.18084620473471247, 0.07943093956155989, 0.03320174405503695, 0.16014821645961108, 0.11727116546971361, 0.10173230170574565, 0.24010668818617076, 0.1612928117596112, 0.060850994531957636, 0.10052113894644021, 0.03775594762470191, 0.006487473152022916, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 0.1293137407564784, 0.06127604785198437, 0.09084682569248526, 0.04868244297142987, 0.028410191826301667, 0.03448382867586586, 0.17247388515185647, 0.10487625568230674, 0.16858098350859674, 0.20174080281083695, 9.999999999998899e-05, 0.09667719577328227, 0.1802473510238789, 0.0920247525621879, 0.09926803053161859, 0.22589778141091277, 9.999999999998899e-05, 0.1584461924160998, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018100160637956053, 0.036637873173914204, 0.01071221459762528, 0.0017391702668408948, 9.999999999998899e-05, 9.999999999998899e-05, 0.07415986743200442, 0.026189183243397918, 0.0676588403252808, 0.06656377830539695, 9.999999999998899e-05, 0.011949334287701063, 0.21473099364272974, 0.02858368670477973, 0.04352430780308392, 0.02229656357254295, 0.06285443797848056, 0.1092006022021551, 0.06661062674909479, 0.055620052163794176, 0.05210921920777345, 0.03195590303403628, 0.0830525881739782, 0.0319125367291877, 0.028806174079645253, 0.04021867255502343, 0.0286176902349371, 0.03926450637893064, 0.002451330473873914, 0.05621108915190831, 0.009943693066216452, 0.03977572878248703, 0.057805630930463536, 0.36033650011682905, 0.377784216013218, 0.4251192495647358, 0.28186850932279106, 0.2953605366861336, 0.1927375057825872, 0.4218375405124052, 0.3124683731733868, 0.39771699608896316, 0.017114682327232233, 9.999999999998899e-05, 9.999999999998899e-05, 0.02368845942755249, 0.018537087426724774, 0.05210116045295632, 0.019274902838635533, 0.0029506069387118528, 0.07418604139373397, 0.08253288153385807, 0.08056279829147428, 0.07605304657542855, 0.1318612223493537, 0.0793632790996629, 0.07106557140505587, 0.06428980832379672, 0.06481065754677295, 0.09560224496996217, 0.11256334149995129, 0.1276643172531181, 0.1174821241341717, 0.1321414037508314, 0.11656982050453613, 0.1281531390444055, 0.1390660434132147, 0.1259055085875136, 0.1030766764012565, 0.0601015303439717, 0.06008428136450106, 0.056179521457271564, 0.08305302619728805, 0.06528246760256262, 0.05810299281176867, 0.07086848979220306, 0.06390644573297055, 0.04934715672191292, 0.1829040249864775, 0.08028270814775185, 0.16470067415109557, 0.14071999182742578, 0.10316264269354436, 0.10044812020867244, 0.17269299258656956, 0.11018444990192677, 0.16029781563501622, 0.1400821135383148, 0.1342680554304001, 0.19663193537685186, 0.12400352276386328, 0.16358657240335506, 0.17373233164395718, 0.14761737886719528, 0.12858390612875903, 0.12285086625812769, 0.11245743372044703, 0.07553006098348636, 0.12448643679486793, 0.1608269850815881, 0.1985174043665544, 0.10495118599038178, 0.13622310683805194, 0.11078546287517277, 0.0989468060671237, 0.07880067886190933, 0.10786742681520578, 0.2813505277403914, 0.3254784067138786, 0.05497913387975184, 0.17056601384927905, 0.13886118823179228, 0.0651920780614943, 0.24667061160268666, 0.19560821912272863, 0.15546037538596735, 0.19348501790283223, 0.21782347242445788, 0.22149482254391883, 0.20831213871247667, 0.14763305606634736, 0.17271792115935836, 0.26411886644474936, 0.033545594536605994, 0.04770498704421766, 0.06353686412361981, 0.015331909895392348, 0.04238182779818345, 0.01570667424765415, 0.04505399622608419, 0.038107961937258183, 0.037393596334401646]}, "mutation_prompt": null}
