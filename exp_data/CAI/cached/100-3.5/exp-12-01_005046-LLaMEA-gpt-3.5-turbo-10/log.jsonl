{"id": "7376cf1d-3df9-451c-ab2f-8d1648be1cc0", "solution": "import numpy as np\n\nclass HarmonySearchAPA:\n    def __init__(self, budget, dim, hmcr=0.7, par=0.4, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.par = par\n        self.bw = bw\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.dim,))\n\n        def adjust_value(value, lower, upper):\n            return np.clip(value, lower, upper)\n\n        def explore_new_value(value, bw):\n            return adjust_value(value + np.random.uniform(-bw, bw), -5.0, 5.0)\n\n        def adjust_pitch_width(bw, iters):\n            return bw * 0.99 ** iters\n\n        harmony_memory = np.array([initialize_harmony_memory() for _ in range(10)])\n        fitness_values = np.array([func(hm) for hm in harmony_memory])\n        for _ in range(self.budget - 10):\n            new_solution = np.zeros(self.dim)\n            for d in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    idx = np.random.choice(len(harmony_memory))\n                    new_solution[d] = harmony_memory[idx][d]\n                    if np.random.rand() < self.par:\n                        new_solution[d] = explore_new_value(new_solution[d], self.bw)\n                else:\n                    new_solution[d] = np.random.uniform(-5.0, 5.0)\n            new_fitness = func(new_solution)\n            if new_fitness < max(fitness_values):\n                replace_idx = np.argmax(fitness_values)\n                harmony_memory[replace_idx] = new_solution\n                fitness_values[replace_idx] = new_fitness\n            self.bw = adjust_pitch_width(self.bw, _)\n        best_idx = np.argmin(fitness_values)\n        return harmony_memory[best_idx]", "name": "HarmonySearchAPA", "description": "A novel metaheuristic algorithm called Harmony Search with Adaptive Pitch Adjustment to optimize black box functions within a given budget.", "configspace": "", "generation": 0, "fitness": 0.17528360465234416, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.47554330262133504, 0.4395893546382166, 0.42844088111656264, 0.4532853411659453, 0.4516599856684145, 0.43810899096062916, 0.43722028631401055, 0.4204228807475967, 0.49008370061236695, 0.092296191067882, 0.10277388403048449, 0.026900583296917135, 0.09870411159434411, 0.17596577235715416, 0.06581576776036069, 0.016559198619174098, 0.03739480312825749, 0.002296471100344033, 0.23734332352700627, 0.23491907744468343, 0.1847172863509322, 0.20461774368751884, 0.23204557771645418, 0.19073657145884515, 0.21763589957322793, 0.2082978359656128, 0.1780894468807913, 0.21752422125863036, 0.22610335444373986, 0.16398800602431707, 0.15817804888817188, 0.18363924436270396, 0.1816397062184003, 0.17708434171939103, 0.16616165614732636, 0.18376039822271817, 0.2278911552619871, 0.20100661160395017, 0.21682154660718522, 0.23256895620667462, 0.19856470894491363, 0.22014293227531312, 0.23266308093347754, 0.21409945596978563, 0.21276237424644018, 0.22384601098297108, 0.17573170671326965, 0.18398095268825665, 0.2481095575758644, 0.16832046393706657, 0.2633934966993432, 0.15609068499088752, 0.18926896259979398, 0.20569727723343068, 0.26620077849046053, 0.20789562673598994, 0.21085450471774603, 0.26022859556531275, 0.2770832126434407, 0.2049049293555527, 0.30456882358826165, 0.2330424345408595, 0.23321445807563723, 0.12698246375520228, 0.14043067944306897, 0.14555980410761404, 0.13904320351003174, 0.1800690160939521, 0.140006982421357, 0.20567888342094198, 0.176632241417216, 0.17208779850286615, 0.09828495913431179, 0.09409820110681999, 0.17842257438198195, 0.16625640669769548, 0.1133062912741385, 0.14287772161453083, 0.13785661089986845, 0.13885250793083437, 0.16380597449981305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018019941551444818, 9.999999999998899e-05, 9.999999999998899e-05, 0.1075590489081123, 0.045867571250235994, 0.05929625609821865, 0.051595411300610405, 0.09055502278903027, 0.04747624099375536, 0.06903286063797442, 0.07086933839882936, 0.0735810021353056, 0.011555648422985176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004089214362374971, 0.04737413310042471, 0.06580627112194848, 0.06249911759270521, 0.06437949703004764, 0.07259315775025021, 0.05002074695597514, 0.07167002809815426, 0.08187885313988086, 0.12119149637420268, 0.3263937162130197, 0.34418430127468536, 0.34732881937800053, 0.3860935646874508, 0.3368437458862543, 0.3517980044632528, 0.31647783925855844, 0.35989588361373703, 0.35586507764986186, 0.0953700009717986, 0.0967019975502098, 0.09334194355777492, 0.11489912750114195, 0.08855029442659612, 0.09641850614646752, 0.06897080402772027, 0.10389083987241687, 0.07926362942082832, 0.17716435491186788, 0.14767878485196195, 0.28457416314588113, 0.16789331391727758, 0.1647969447505826, 0.13449946904792576, 0.15345978148652284, 0.15959630068768615, 0.2027523597685187, 0.21964715168372018, 0.23606381974940482, 0.23626285660535717, 0.22503306301277792, 0.21667965842314885, 0.28765926665795993, 0.29363575324128954, 0.24394674299042685, 0.19795909996456207, 0.14183940291320563, 0.1956386930939754, 0.15768038855391842, 0.1588250242128315, 0.1267820004725707, 0.19075134075032474, 0.24058047683279715, 0.20908406658523826, 0.1715901717764311, 0.2061429828776994, 0.17721072756828582, 0.2332077914946551, 0.18565185692440223, 0.18064977400502436, 0.1875590105813406, 0.20993306583089066, 0.18100354795642093, 0.19545605676504474, 0.21842891042338974, 0.19970604582764895, 0.2233027910706743, 0.21172282624627436, 0.22230758431887265, 0.2020942552482744, 0.18108368629602578, 0.18614229657863235, 0.23230276903848135, 0.1862101249171666, 0.3391383415649788, 0.18526107563310767, 0.47362080351583014, 0.37018730883715156, 0.2725396026677216, 0.17115448785502052, 0.17222978009621326, 0.23201409214696034, 0.16859978725222113, 0.20113467324373746, 0.2085264377268915, 0.1902432382998006, 0.29291928185768534, 0.2066787981626117, 0.46992506579035465, 0.14320518096441015, 0.14422304913480488, 0.18548819330652633, 0.18852402543057167, 0.22109697506456194, 0.18275938177016093, 0.1980482398305704, 0.19268317065610452, 0.18976852470120031, 0.18600694255673356, 0.17268307388954585, 0.06692386028556208, 0.07650252594961426, 0.0815077392814526, 0.10272485483013294, 0.0753532815009117, 0.07551608541021304, 0.06343572829745858, 0.0682144996217452, 0.07068036404001521]}, "mutation_prompt": null}
{"id": "68599165-cde9-4eb2-8c95-6a4e763a6034", "solution": "import numpy as np\n\nclass HarmonySearchAPA:\n    def __init__(self, budget, dim, hmcr=0.7, par=0.4, bw=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.par = par\n        self.bw = bw\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.dim,))\n\n        def adjust_value(value, lower, upper):\n            return np.clip(value, lower, upper)\n\n        def explore_new_value(value, bw):\n            return adjust_value(value + np.random.uniform(-bw, bw), -5.0, 5.0)\n\n        def adjust_pitch_width(bw, iters):\n            return bw * 0.99 ** iters\n\n        harmony_memory = np.array([initialize_harmony_memory() for _ in range(10)])\n        fitness_values = np.array([func(hm) for hm in harmony_memory])\n        for _ in range(self.budget - 10):\n            new_solution = np.zeros(self.dim)\n            for d in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    idx = np.random.choice(len(harmony_memory))\n                    new_solution[d] = harmony_memory[idx][d]\n                    if np.random.rand() < self.par:\n                        new_solution[d] = explore_new_value(new_solution[d], self.bw)\n                else:\n                    new_solution[d] = np.random.uniform(-5.0, 5.0)\n            new_fitness = func(new_solution)\n            if new_fitness < max(fitness_values):\n                replace_idx = np.argmax(fitness_values)\n                harmony_memory[replace_idx] = new_solution\n                fitness_values[replace_idx] = new_fitness\n            self.bw = adjust_pitch_width(self.bw, _)\n        best_idx = np.argmin(fitness_values)\n        return harmony_memory[best_idx]", "name": "HarmonySearchAPA", "description": "A novel metaheuristic algorithm called Harmony Search with Adaptive Pitch Adjustment to optimize black box functions within a given budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7376cf1d-3df9-451c-ab2f-8d1648be1cc0", "metadata": {"aucs": [0.47554330262133504, 0.4395893546382166, 0.42844088111656264, 0.4532853411659453, 0.4516599856684145, 0.43810899096062916, 0.43722028631401055, 0.4204228807475967, 0.49008370061236695, 0.092296191067882, 0.10277388403048449, 0.026900583296917135, 0.09870411159434411, 0.17596577235715416, 0.06581576776036069, 0.016559198619174098, 0.03739480312825749, 0.002296471100344033, 0.23734332352700627, 0.23491907744468343, 0.1847172863509322, 0.20461774368751884, 0.23204557771645418, 0.19073657145884515, 0.21763589957322793, 0.2082978359656128, 0.1780894468807913, 0.21752422125863036, 0.22610335444373986, 0.16398800602431707, 0.15817804888817188, 0.18363924436270396, 0.1816397062184003, 0.17708434171939103, 0.16616165614732636, 0.18376039822271817, 0.2278911552619871, 0.20100661160395017, 0.21682154660718522, 0.23256895620667462, 0.19856470894491363, 0.22014293227531312, 0.23266308093347754, 0.21409945596978563, 0.21276237424644018, 0.22384601098297108, 0.17573170671326965, 0.18398095268825665, 0.2481095575758644, 0.16832046393706657, 0.2633934966993432, 0.15609068499088752, 0.18926896259979398, 0.20569727723343068, 0.26620077849046053, 0.20789562673598994, 0.21085450471774603, 0.26022859556531275, 0.2770832126434407, 0.2049049293555527, 0.30456882358826165, 0.2330424345408595, 0.23321445807563723, 0.12698246375520228, 0.14043067944306897, 0.14555980410761404, 0.13904320351003174, 0.1800690160939521, 0.140006982421357, 0.20567888342094198, 0.176632241417216, 0.17208779850286615, 0.09828495913431179, 0.09409820110681999, 0.17842257438198195, 0.16625640669769548, 0.1133062912741385, 0.14287772161453083, 0.13785661089986845, 0.13885250793083437, 0.16380597449981305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018019941551444818, 9.999999999998899e-05, 9.999999999998899e-05, 0.1075590489081123, 0.045867571250235994, 0.05929625609821865, 0.051595411300610405, 0.09055502278903027, 0.04747624099375536, 0.06903286063797442, 0.07086933839882936, 0.0735810021353056, 0.011555648422985176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004089214362374971, 0.04737413310042471, 0.06580627112194848, 0.06249911759270521, 0.06437949703004764, 0.07259315775025021, 0.05002074695597514, 0.07167002809815426, 0.08187885313988086, 0.12119149637420268, 0.3263937162130197, 0.34418430127468536, 0.34732881937800053, 0.3860935646874508, 0.3368437458862543, 0.3517980044632528, 0.31647783925855844, 0.35989588361373703, 0.35586507764986186, 0.0953700009717986, 0.0967019975502098, 0.09334194355777492, 0.11489912750114195, 0.08855029442659612, 0.09641850614646752, 0.06897080402772027, 0.10389083987241687, 0.07926362942082832, 0.17716435491186788, 0.14767878485196195, 0.28457416314588113, 0.16789331391727758, 0.1647969447505826, 0.13449946904792576, 0.15345978148652284, 0.15959630068768615, 0.2027523597685187, 0.21964715168372018, 0.23606381974940482, 0.23626285660535717, 0.22503306301277792, 0.21667965842314885, 0.28765926665795993, 0.29363575324128954, 0.24394674299042685, 0.19795909996456207, 0.14183940291320563, 0.1956386930939754, 0.15768038855391842, 0.1588250242128315, 0.1267820004725707, 0.19075134075032474, 0.24058047683279715, 0.20908406658523826, 0.1715901717764311, 0.2061429828776994, 0.17721072756828582, 0.2332077914946551, 0.18565185692440223, 0.18064977400502436, 0.1875590105813406, 0.20993306583089066, 0.18100354795642093, 0.19545605676504474, 0.21842891042338974, 0.19970604582764895, 0.2233027910706743, 0.21172282624627436, 0.22230758431887265, 0.2020942552482744, 0.18108368629602578, 0.18614229657863235, 0.23230276903848135, 0.1862101249171666, 0.3391383415649788, 0.18526107563310767, 0.47362080351583014, 0.37018730883715156, 0.2725396026677216, 0.17115448785502052, 0.17222978009621326, 0.23201409214696034, 0.16859978725222113, 0.20113467324373746, 0.2085264377268915, 0.1902432382998006, 0.29291928185768534, 0.2066787981626117, 0.46992506579035465, 0.14320518096441015, 0.14422304913480488, 0.18548819330652633, 0.18852402543057167, 0.22109697506456194, 0.18275938177016093, 0.1980482398305704, 0.19268317065610452, 0.18976852470120031, 0.18600694255673356, 0.17268307388954585, 0.06692386028556208, 0.07650252594961426, 0.0815077392814526, 0.10272485483013294, 0.0753532815009117, 0.07551608541021304, 0.06343572829745858, 0.0682144996217452, 0.07068036404001521]}, "mutation_prompt": null}
