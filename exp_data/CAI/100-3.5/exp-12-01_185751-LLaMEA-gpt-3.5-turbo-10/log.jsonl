{"id": "c2bc54be-a607-47e6-b2ba-37c129371a3c", "solution": "import numpy as np\n\nclass DEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.f = 0.5\n        self.cr = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def rand_in_bounds(minimum, maximum):\n            return minimum + (maximum - minimum) * np.random.rand(self.dim)\n\n        def ensure_bounds(vec, minimum, maximum):\n            vec[vec < minimum] = minimum\n            vec[vec > maximum] = maximum\n            return vec\n\n        def cost_function(x):\n            return func(x)\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([cost_function(p) for p in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                candidate = population[i]\n                a, b, c = population[np.random.choice(self.population_size, 3, replace=False)]\n                mutant = ensure_bounds(a + self.f * (b - c), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, candidate)\n\n                y = candidate + self.c1 * np.random.rand(self.dim) * (best - candidate) + self.c2 * np.random.rand(self.dim) * (trial - candidate)\n                population[i] = ensure_bounds(y, self.lower_bound, self.upper_bound)\n\n                if cost_function(population[i]) < fitness[i]:\n                    fitness[i] = cost_function(population[i])\n                    if fitness[i] < cost_function(best):\n                        best = population[i]\n\n        return best", "name": "DEPSO", "description": "Novel metaheuristic algorithm combining Differential Evolution and Particle Swarm Optimization to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.1194682176046352, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.17707992012287777, 0.17980891717543568, 0.21966242567478245, 0.19103502840650977, 0.21093059105043044, 0.187493124653607, 0.2264514925481339, 0.20047025956836695, 0.24600859228779315, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04566069953843688, 0.048403814834265035, 0.043080691440828156, 0.047380057887007165, 0.03759738489601239, 0.025215877627331462, 0.05371359230246142, 0.06654637066650282, 0.05337105628390815, 0.022239676910607686, 0.030530413542402268, 0.016866972821596438, 0.03297730915910524, 0.030862225944564337, 0.009058536626679992, 0.028140464447818703, 0.03233569149034088, 0.09835191418375744, 0.9879458762802914, 0.9872405795659726, 0.9517035353721995, 0.931410906691148, 0.9241770083214077, 0.9890272311539076, 0.9666471811055587, 0.9575623740746809, 0.9568207033569318, 0.04585810105212318, 0.11388869753997155, 0.05432638375960919, 0.05999443491089007, 0.08687588804114077, 0.06516860944102576, 0.08105486443376264, 0.12208865784138123, 0.09091721509123141, 0.10027683525177622, 0.051313717680009585, 0.11669740124957573, 0.12681171240582623, 0.14442301581765293, 0.05829852793879109, 0.09376790740399044, 0.10646162191331476, 0.1139022002868062, 9.999999999998899e-05, 0.006663593731951689, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031122040574910192, 9.999999999998899e-05, 0.028056928531478453, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02670960859309257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03534947884769157, 0.029522921736773733, 0.04050790760658041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04173590829527951, 0.007980249776411097, 0.014547384755618675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007006161747988182, 0.017207337619295493, 0.011882784160061943, 0.20706569419709486, 0.14621154739021824, 0.15514704287231285, 0.1688150550169637, 0.18937446477890152, 0.1943982610507078, 0.1873733356184455, 0.24080693926847418, 0.19448516038494368, 0.053014343870901204, 0.06585019968529393, 0.038253934761867114, 0.054060315653159496, 0.03452451046140359, 0.03035972831862377, 0.042646870178273844, 0.0411246287939292, 0.0267656688986897, 0.16968784192580044, 0.1055052984315693, 0.13317917560524328, 0.1158420076434531, 0.1370809484420079, 0.16131179286354724, 0.10067901941500534, 0.14129869619580526, 0.14029661310605568, 0.12131450807625299, 0.16116280345741307, 0.1889120235274423, 0.1406258721480561, 0.142535586278409, 0.15137063397952621, 0.18370412684820747, 0.17377774300845283, 0.169329948989848, 0.10506572111577839, 0.10486990419035791, 0.12285831025200533, 0.09770236493668438, 0.09037835133751482, 0.08804477540423672, 0.09705558830333028, 0.13257283962136912, 0.09958939973786107, 0.1405804964062578, 0.13464491787337296, 0.13345086981233123, 0.1724691460364034, 0.14509316441769138, 0.16474283135476653, 0.14248156216094432, 0.16138091499456508, 0.1444460640354822, 0.14952482172467807, 0.14721146870695445, 0.13745998017485073, 0.1473990961254723, 0.14966836532714445, 0.1478789257820654, 0.12285879057244342, 0.16016924431114898, 0.1427176818101008, 0.17697296716809396, 0.13611550445477028, 0.11286950847680766, 0.1189055293687763, 0.16143531315763937, 0.11562814482374739, 0.09455375667206622, 0.10765892620107387, 0.1389846346347149, 0.16449720523537292, 0.10973445808301052, 0.13289620261668478, 0.160534703774184, 0.12071591445395136, 0.0715083100407422, 0.22771252890522597, 0.10963118238715486, 0.13109742277566183, 0.17244532365164633, 0.1707724812052933, 0.18540525487688841, 0.18112508889527212, 0.17394254147735277, 0.1955557429385424, 0.16938147214156418, 0.18483665698614438, 0.18869017055969195, 0.03923560942954918, 0.0490695764646889, 0.04268284106940756, 0.029729408925119105, 0.05112593739665061, 0.033486815828787986, 0.05114057726483534, 0.03588497669772095, 0.04774761636200531]}, "mutation_prompt": null}
{"id": "fde502cd-c0cc-4ab0-8694-4a84739a0708", "solution": "import numpy as np\n\nclass DEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.c1 = 1.49445\n        self.c2 = 1.49445\n        self.f = 0.5\n        self.cr = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def rand_in_bounds(minimum, maximum):\n            return minimum + (maximum - minimum) * np.random.rand(self.dim)\n\n        def ensure_bounds(vec, minimum, maximum):\n            vec[vec < minimum] = minimum\n            vec[vec > maximum] = maximum\n            return vec\n\n        def cost_function(x):\n            return func(x)\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([cost_function(p) for p in population])\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                candidate = population[i]\n                a, b, c = population[np.random.choice(self.population_size, 3, replace=False)]\n                mutant = ensure_bounds(a + self.f * (b - c), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, candidate)\n\n                y = candidate + self.c1 * np.random.rand(self.dim) * (best - candidate) + self.c2 * np.random.rand(self.dim) * (trial - candidate)\n                population[i] = ensure_bounds(y, self.lower_bound, self.upper_bound)\n\n                if cost_function(population[i]) < fitness[i]:\n                    fitness[i] = cost_function(population[i])\n                    if fitness[i] < cost_function(best):\n                        best = population[i]\n\n        return best", "name": "DEPSO", "description": "Novel metaheuristic algorithm combining Differential Evolution and Particle Swarm Optimization to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c2bc54be-a607-47e6-b2ba-37c129371a3c", "metadata": {"aucs": [0.17707992012287777, 0.17980891717543568, 0.21966242567478245, 0.19103502840650977, 0.21093059105043044, 0.187493124653607, 0.2264514925481339, 0.20047025956836695, 0.24600859228779315, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04566069953843688, 0.048403814834265035, 0.043080691440828156, 0.047380057887007165, 0.03759738489601239, 0.025215877627331462, 0.05371359230246142, 0.06654637066650282, 0.05337105628390815, 0.022239676910607686, 0.030530413542402268, 0.016866972821596438, 0.03297730915910524, 0.030862225944564337, 0.009058536626679992, 0.028140464447818703, 0.03233569149034088, 0.09835191418375744, 0.9879458762802914, 0.9872405795659726, 0.9517035353721995, 0.931410906691148, 0.9241770083214077, 0.9890272311539076, 0.9666471811055587, 0.9575623740746809, 0.9568207033569318, 0.04585810105212318, 0.11388869753997155, 0.05432638375960919, 0.05999443491089007, 0.08687588804114077, 0.06516860944102576, 0.08105486443376264, 0.12208865784138123, 0.09091721509123141, 0.10027683525177622, 0.051313717680009585, 0.11669740124957573, 0.12681171240582623, 0.14442301581765293, 0.05829852793879109, 0.09376790740399044, 0.10646162191331476, 0.1139022002868062, 9.999999999998899e-05, 0.006663593731951689, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031122040574910192, 9.999999999998899e-05, 0.028056928531478453, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02670960859309257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03534947884769157, 0.029522921736773733, 0.04050790760658041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04173590829527951, 0.007980249776411097, 0.014547384755618675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007006161747988182, 0.017207337619295493, 0.011882784160061943, 0.20706569419709486, 0.14621154739021824, 0.15514704287231285, 0.1688150550169637, 0.18937446477890152, 0.1943982610507078, 0.1873733356184455, 0.24080693926847418, 0.19448516038494368, 0.053014343870901204, 0.06585019968529393, 0.038253934761867114, 0.054060315653159496, 0.03452451046140359, 0.03035972831862377, 0.042646870178273844, 0.0411246287939292, 0.0267656688986897, 0.16968784192580044, 0.1055052984315693, 0.13317917560524328, 0.1158420076434531, 0.1370809484420079, 0.16131179286354724, 0.10067901941500534, 0.14129869619580526, 0.14029661310605568, 0.12131450807625299, 0.16116280345741307, 0.1889120235274423, 0.1406258721480561, 0.142535586278409, 0.15137063397952621, 0.18370412684820747, 0.17377774300845283, 0.169329948989848, 0.10506572111577839, 0.10486990419035791, 0.12285831025200533, 0.09770236493668438, 0.09037835133751482, 0.08804477540423672, 0.09705558830333028, 0.13257283962136912, 0.09958939973786107, 0.1405804964062578, 0.13464491787337296, 0.13345086981233123, 0.1724691460364034, 0.14509316441769138, 0.16474283135476653, 0.14248156216094432, 0.16138091499456508, 0.1444460640354822, 0.14952482172467807, 0.14721146870695445, 0.13745998017485073, 0.1473990961254723, 0.14966836532714445, 0.1478789257820654, 0.12285879057244342, 0.16016924431114898, 0.1427176818101008, 0.17697296716809396, 0.13611550445477028, 0.11286950847680766, 0.1189055293687763, 0.16143531315763937, 0.11562814482374739, 0.09455375667206622, 0.10765892620107387, 0.1389846346347149, 0.16449720523537292, 0.10973445808301052, 0.13289620261668478, 0.160534703774184, 0.12071591445395136, 0.0715083100407422, 0.22771252890522597, 0.10963118238715486, 0.13109742277566183, 0.17244532365164633, 0.1707724812052933, 0.18540525487688841, 0.18112508889527212, 0.17394254147735277, 0.1955557429385424, 0.16938147214156418, 0.18483665698614438, 0.18869017055969195, 0.03923560942954918, 0.0490695764646889, 0.04268284106940756, 0.029729408925119105, 0.05112593739665061, 0.033486815828787986, 0.05114057726483534, 0.03588497669772095, 0.04774761636200531]}, "mutation_prompt": null}
