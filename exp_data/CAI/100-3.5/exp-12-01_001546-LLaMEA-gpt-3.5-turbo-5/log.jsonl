{"id": "dff85c3d-b4cc-463d-9c38-8f275967ad7f", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.NP = 10  # population size\n        self.F = 0.5  # differential weight\n        self.CR = 0.9  # crossover rate\n        self.min_val = -5.0\n        self.max_val = 5.0\n        self.population = np.random.uniform(self.min_val, self.max_val, (self.NP, self.dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_population = []\n            for i in range(self.NP):\n                a, b, c = np.random.choice(self.NP, 3, replace=False)\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, self.min_val, self.max_val)\n\n                trial_vector = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() > self.CR:\n                        trial_vector[j] = mutant[j]\n\n                if func(trial_vector) < func(self.population[i]):\n                    self.population[i] = trial_vector\n\n                if self.best_solution is None or func(self.population[i]) < func(self.best_solution):\n                    self.best_solution = np.copy(self.population[i])\n\n            self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n            self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n        return self.best_solution", "name": "AdaptiveDE", "description": "An Adaptive Differential Evolution algorithm with a self-adaptive mutation strategy based on best solutions found during the optimization process.", "configspace": "", "generation": 0, "fitness": 0.2084459437314674, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.5667086089305362, 0.7109491738392536, 0.4060040199459878, 0.5184667149613793, 0.6840533283422883, 0.44951709080768343, 0.44535838788275395, 0.7673552621495271, 0.48922261420659063, 0.2304597420376595, 0.5256009857753274, 0.21205851876600212, 0.21408528206239774, 0.5015865162714841, 0.10274245190774622, 0.3994640053956825, 0.4912435055528529, 0.013759046193857483, 0.16376211944461083, 0.12626892345093688, 0.13619642672429033, 0.13644894598817714, 0.12655087716890634, 0.22496860318550527, 0.3322124947333438, 0.16219183132545456, 0.137231620730364, 0.153730314434679, 0.10033327213540433, 0.12747301899309005, 0.29781818892043654, 0.17919527392691958, 0.12018799633941757, 0.1471143862542018, 0.1553116043535291, 0.15852843210580925, 0.8876874292733303, 0.9221766630583502, 0.8827103304524746, 0.19524010278301307, 0.8123737949422978, 0.8367244151281589, 0.2181328767483529, 0.7977645295805427, 0.8613141206766107, 0.17080802890245428, 0.15472574688472962, 0.08615926796614892, 0.14846821583347813, 0.24705918488173517, 0.08713750746327897, 0.1535443676219469, 0.17657760474730444, 0.16865708897456133, 0.2575538722390476, 0.19163499543160467, 0.13154567486242086, 0.17323649704384902, 0.2702721383853043, 0.18905062374034665, 0.27934707647831913, 0.5333070883605091, 0.21451324272625638, 0.11632444115727358, 0.11212242163637598, 0.113304222059602, 0.17037423183006872, 0.11417980152455243, 0.10800048982846033, 0.12566850904016957, 0.18532910384386514, 0.18545303422871262, 0.10756398391988564, 0.11526344014273016, 0.1337717381979846, 0.10445617807050533, 0.18088073329174548, 0.13054039689856023, 0.11448125986358104, 0.10459586955284028, 0.13951195298271524, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002828315615909016, 9.999999999998899e-05, 0.005555281994698458, 0.059424659796538104, 0.0894333033405923, 0.0798129920458912, 0.09771003764588637, 0.14634688789633532, 0.04890275546624834, 0.038486136119871284, 0.14650125881126386, 0.037722835916325526, 0.08885771707093659, 0.08265835860739879, 0.10366206678409706, 0.08889925633045803, 0.05858303464843628, 0.06395452928507184, 0.06882432287512241, 0.042421601375657536, 0.05042122201682575, 0.08666464323078693, 0.12957895100253058, 0.0755014636924769, 0.15208657497565237, 0.09468774236363098, 0.15333304503159884, 0.12404761263461639, 0.09378338769918115, 0.13652368898442524, 0.11590379655729377, 0.11268499054066328, 0.34209414799421334, 0.4597727568110038, 0.45927984113475007, 0.38009042975760765, 0.5155115147736364, 0.23926690883717272, 0.31170506209737525, 0.4033646369592666, 0.39130105722629716, 0.08458430888066237, 0.09176504801175955, 0.10537148478659841, 0.08530412296627421, 0.08180701438786908, 0.11469645427977171, 0.116911137133209, 0.09116900368414715, 0.07712236145160023, 0.12371164045822458, 0.10863613751302292, 0.14906027079745365, 0.13180534561254242, 0.12968489238002823, 0.1198296528263143, 0.13250179770540815, 0.12903551326396134, 0.12546987652807817, 0.2376913493775028, 0.2764365347784754, 0.16558344660535462, 0.2265650975477711, 0.3397316649482207, 0.25049571395548786, 0.2204562348429948, 0.29587413091615145, 0.22756588476774064, 0.15913757505586168, 0.2192377209361963, 0.1311373740118652, 0.19390122680422095, 0.18761765549589937, 0.2010237867669712, 0.168896172469727, 0.22076466819687224, 0.1784074672222703, 0.23478292788127542, 0.17646178840278515, 0.18787462463179128, 0.1814481973297406, 0.16115897446564453, 0.17180199850255118, 0.19395017056571928, 0.1787638909097785, 0.20430609363072483, 0.19439562172389024, 0.1820872311939068, 0.20607116128383762, 0.18543173713607464, 0.20218339937949747, 0.2166582012912791, 0.20908447816611397, 0.18548530536496444, 0.2249665474792638, 0.15216516259133073, 0.621144928997303, 0.15129603853339157, 0.3664640048187906, 0.17540546113714095, 0.26549676700327396, 0.16718241937844047, 0.1480576681782293, 0.1512970536688366, 0.2746862675890893, 0.23580196965083244, 0.33938810143920184, 0.19475717475128862, 0.15314118609203065, 0.3213663628663914, 0.14543313346684406, 0.16830076494538193, 0.19127683217684333, 0.1626035868817255, 0.18346124808199593, 0.17120248829253049, 0.1530810024176269, 0.17171703599847155, 0.16598505623641435, 0.1753518243590403, 0.1740706351679966, 0.16772946916014297, 0.06388104833215402, 0.05389359553504436, 0.06714847123157575, 0.05749898707437606, 0.0713405619206473, 0.06603256086806775, 0.05716602213916944, 0.08036172005305686, 0.060842413809056195]}, "mutation_prompt": null}
{"id": "8657f145-8884-460d-b590-1638ab950aff", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.NP = 10  # population size\n        self.F = 0.5  # differential weight\n        self.CR = 0.9  # crossover rate\n        self.min_val = -5.0\n        self.max_val = 5.0\n        self.population = np.random.uniform(self.min_val, self.max_val, (self.NP, self.dim))\n        self.best_solution = None\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_population = []\n            for i in range(self.NP):\n                a, b, c = np.random.choice(self.NP, 3, replace=False)\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, self.min_val, self.max_val)\n\n                trial_vector = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() > self.CR:\n                        trial_vector[j] = mutant[j]\n\n                if func(trial_vector) < func(self.population[i]):\n                    self.population[i] = trial_vector\n\n                if self.best_solution is None or func(self.population[i]) < func(self.best_solution):\n                    self.best_solution = np.copy(self.population[i])\n\n            self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n            self.CR = max(0.1, min(0.9, self.CR + np.random.normal(0, 0.1)))\n\n        return self.best_solution", "name": "AdaptiveDE", "description": "An Adaptive Differential Evolution algorithm with a self-adaptive mutation strategy based on best solutions found during the optimization process.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "dff85c3d-b4cc-463d-9c38-8f275967ad7f", "metadata": {"aucs": [0.5667086089305362, 0.7109491738392536, 0.4060040199459878, 0.5184667149613793, 0.6840533283422883, 0.44951709080768343, 0.44535838788275395, 0.7673552621495271, 0.48922261420659063, 0.2304597420376595, 0.5256009857753274, 0.21205851876600212, 0.21408528206239774, 0.5015865162714841, 0.10274245190774622, 0.3994640053956825, 0.4912435055528529, 0.013759046193857483, 0.16376211944461083, 0.12626892345093688, 0.13619642672429033, 0.13644894598817714, 0.12655087716890634, 0.22496860318550527, 0.3322124947333438, 0.16219183132545456, 0.137231620730364, 0.153730314434679, 0.10033327213540433, 0.12747301899309005, 0.29781818892043654, 0.17919527392691958, 0.12018799633941757, 0.1471143862542018, 0.1553116043535291, 0.15852843210580925, 0.8876874292733303, 0.9221766630583502, 0.8827103304524746, 0.19524010278301307, 0.8123737949422978, 0.8367244151281589, 0.2181328767483529, 0.7977645295805427, 0.8613141206766107, 0.17080802890245428, 0.15472574688472962, 0.08615926796614892, 0.14846821583347813, 0.24705918488173517, 0.08713750746327897, 0.1535443676219469, 0.17657760474730444, 0.16865708897456133, 0.2575538722390476, 0.19163499543160467, 0.13154567486242086, 0.17323649704384902, 0.2702721383853043, 0.18905062374034665, 0.27934707647831913, 0.5333070883605091, 0.21451324272625638, 0.11632444115727358, 0.11212242163637598, 0.113304222059602, 0.17037423183006872, 0.11417980152455243, 0.10800048982846033, 0.12566850904016957, 0.18532910384386514, 0.18545303422871262, 0.10756398391988564, 0.11526344014273016, 0.1337717381979846, 0.10445617807050533, 0.18088073329174548, 0.13054039689856023, 0.11448125986358104, 0.10459586955284028, 0.13951195298271524, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002828315615909016, 9.999999999998899e-05, 0.005555281994698458, 0.059424659796538104, 0.0894333033405923, 0.0798129920458912, 0.09771003764588637, 0.14634688789633532, 0.04890275546624834, 0.038486136119871284, 0.14650125881126386, 0.037722835916325526, 0.08885771707093659, 0.08265835860739879, 0.10366206678409706, 0.08889925633045803, 0.05858303464843628, 0.06395452928507184, 0.06882432287512241, 0.042421601375657536, 0.05042122201682575, 0.08666464323078693, 0.12957895100253058, 0.0755014636924769, 0.15208657497565237, 0.09468774236363098, 0.15333304503159884, 0.12404761263461639, 0.09378338769918115, 0.13652368898442524, 0.11590379655729377, 0.11268499054066328, 0.34209414799421334, 0.4597727568110038, 0.45927984113475007, 0.38009042975760765, 0.5155115147736364, 0.23926690883717272, 0.31170506209737525, 0.4033646369592666, 0.39130105722629716, 0.08458430888066237, 0.09176504801175955, 0.10537148478659841, 0.08530412296627421, 0.08180701438786908, 0.11469645427977171, 0.116911137133209, 0.09116900368414715, 0.07712236145160023, 0.12371164045822458, 0.10863613751302292, 0.14906027079745365, 0.13180534561254242, 0.12968489238002823, 0.1198296528263143, 0.13250179770540815, 0.12903551326396134, 0.12546987652807817, 0.2376913493775028, 0.2764365347784754, 0.16558344660535462, 0.2265650975477711, 0.3397316649482207, 0.25049571395548786, 0.2204562348429948, 0.29587413091615145, 0.22756588476774064, 0.15913757505586168, 0.2192377209361963, 0.1311373740118652, 0.19390122680422095, 0.18761765549589937, 0.2010237867669712, 0.168896172469727, 0.22076466819687224, 0.1784074672222703, 0.23478292788127542, 0.17646178840278515, 0.18787462463179128, 0.1814481973297406, 0.16115897446564453, 0.17180199850255118, 0.19395017056571928, 0.1787638909097785, 0.20430609363072483, 0.19439562172389024, 0.1820872311939068, 0.20607116128383762, 0.18543173713607464, 0.20218339937949747, 0.2166582012912791, 0.20908447816611397, 0.18548530536496444, 0.2249665474792638, 0.15216516259133073, 0.621144928997303, 0.15129603853339157, 0.3664640048187906, 0.17540546113714095, 0.26549676700327396, 0.16718241937844047, 0.1480576681782293, 0.1512970536688366, 0.2746862675890893, 0.23580196965083244, 0.33938810143920184, 0.19475717475128862, 0.15314118609203065, 0.3213663628663914, 0.14543313346684406, 0.16830076494538193, 0.19127683217684333, 0.1626035868817255, 0.18346124808199593, 0.17120248829253049, 0.1530810024176269, 0.17171703599847155, 0.16598505623641435, 0.1753518243590403, 0.1740706351679966, 0.16772946916014297, 0.06388104833215402, 0.05389359553504436, 0.06714847123157575, 0.05749898707437606, 0.0713405619206473, 0.06603256086806775, 0.05716602213916944, 0.08036172005305686, 0.060842413809056195]}, "mutation_prompt": null}
