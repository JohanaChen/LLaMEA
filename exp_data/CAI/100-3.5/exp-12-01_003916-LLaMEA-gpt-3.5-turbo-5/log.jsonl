{"id": "bd4b1f0c-9a84-4a8f-b86d-c31c1f5d002b", "solution": "import numpy as np\n\nclass HybridPSOGA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim)), np.zeros((self.population_size, self.dim))\n\n        def fitness(x):\n            return func(x)\n\n        def PSO():\n            swarm, velocity = initialize_population()\n            pbest = swarm.copy()\n            pbest_fitness = np.apply_along_axis(fitness, 1, swarm)\n            gbest = pbest[np.argmin(pbest_fitness)]\n            gbest_fitness = np.min(pbest_fitness)\n\n            for _ in range(self.budget):\n                r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n                velocity = 0.5 * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n                velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n                swarm += velocity\n\n                current_fitness = np.apply_along_axis(fitness, 1, swarm)\n                update_indices = current_fitness < pbest_fitness\n                pbest[update_indices] = swarm[update_indices]\n                pbest_fitness[update_indices] = current_fitness[update_indices]\n\n                gbest_index = np.argmin(pbest_fitness)\n                if pbest_fitness[gbest_index] < gbest_fitness:\n                    gbest = pbest[gbest_index]\n                    gbest_fitness = pbest_fitness[gbest_index]\n\n            return gbest\n\n        def GA():\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n            for _ in range(self.budget):\n                fitness_values = np.apply_along_axis(fitness, 1, population)\n                parents = population[np.argsort(fitness_values)[:2]]\n                children = parents + self.mutation_rate * np.random.randn(2, self.dim)\n                population = np.vstack((population, children))\n\n            best_solution = population[np.argmin(np.apply_along_axis(fitness, 1, population))]\n            return best_solution\n\n        return PSO() if np.random.rand() < 0.5 else GA()", "name": "HybridPSOGA", "description": "An innovative hybrid algorithm combining Particle Swarm Optimization (PSO) and Genetic Algorithm (GA) to efficiently explore and exploit the search space for optimal solutions.", "configspace": "", "generation": 0, "fitness": 0.21113736413055334, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.17472150197543523, 0.9023077706867022, 0.8727497998246952, 0.08722572529888295, 0.8679170462952273, 0.8724152553804215, 0.24620427981660298, 0.8770045279476889, 0.8966563406036362, 9.999999999998899e-05, 0.7992255582219897, 0.8014315210241885, 9.999999999998899e-05, 0.8000349257707229, 0.8314897810048525, 9.999999999998899e-05, 0.7886678081516459, 0.7526338910296946, 0.01991283017416068, 0.08101407355228007, 0.09024933873574137, 0.030173813763018753, 0.05301416697547234, 0.03408326732586686, 0.021406786443509573, 0.07946572000641483, 0.03955657371315269, 0.04755607369602277, 0.09299825920581462, 0.07614203187625046, 0.0034316842990370633, 0.07570625759194094, 0.08525627166190264, 9.999999999998899e-05, 0.061034572881483284, 0.09628181275489767, 0.07714015398876561, 0.6928510985572246, 0.5260646798602139, 0.036643830680017864, 0.8156621597451227, 0.2857720759898591, 0.035791862436331034, 0.8955820283569105, 0.5648699436832463, 0.07760927792559591, 0.6319544121738252, 0.6899134956494298, 0.0048520007921138975, 0.7057667349056522, 0.725899233144966, 0.1309869228522974, 0.6997880171965714, 0.6477606256237277, 0.05105164283677044, 0.08314747507895626, 0.10867402398566206, 0.22580075880067185, 0.06806345499083966, 0.0014185308655061402, 0.13217219431010307, 0.10701942104701379, 0.1499376809148213, 9.999999999998899e-05, 0.1292346600825176, 0.18205353307549166, 0.0060281468085888745, 0.18990767268143915, 0.13128273596186646, 0.020107390566508343, 0.3667003783374857, 0.26638139113974424, 0.07990881467591804, 0.23404936715603353, 0.22917268160288629, 9.999999999998899e-05, 0.22822054897155797, 0.24840978543264025, 0.03025828388633367, 0.26076816230295186, 0.13200272012065362, 9.999999999998899e-05, 0.05098709070537588, 0.06271942814218745, 9.999999999998899e-05, 0.011304980932650643, 9.999999999998899e-05, 9.999999999998899e-05, 0.00374404170641629, 0.01535001373941014, 0.020579271864722748, 0.12513483125720326, 0.03929392098559181, 0.0038833401127857936, 0.05095451382596017, 0.043047025704999076, 0.011653172751020957, 0.12616722136719416, 0.06505983367273749, 9.999999999998899e-05, 0.24390432858294064, 0.37200622442055087, 9.999999999998899e-05, 0.07612751535110251, 0.11160816523633221, 9.999999999998899e-05, 0.12322833933901456, 0.0662068043820715, 9.999999999998899e-05, 0.06174507494625958, 0.0998467842228028, 9.999999999998899e-05, 0.09125324882825803, 0.1849408099726132, 0.02234916158183009, 0.33405788535740044, 0.23674337392245226, 0.21052383244804174, 0.5947665765533567, 0.5602627319518596, 0.25648155039080134, 0.5347264318946063, 0.561575645595972, 0.2466855741054068, 0.5802706509732991, 0.6261890125215573, 0.05156310095447991, 0.011488462971540714, 0.010019403350055245, 0.03377672051528113, 0.09243160894048907, 0.08080427237298349, 0.0010499894774191887, 0.08918968595321508, 0.040045245889878234, 0.21105584049514248, 0.1702312423388137, 0.16794577343596462, 0.19107327900052418, 0.2767918372587884, 0.14554191631920899, 0.10681511948321254, 0.1408706227533647, 0.17718767010412229, 0.11539875099927721, 0.18779079371008955, 0.18319212262851448, 0.1484020216009796, 0.39749757978362843, 0.2615818538574092, 0.1312702690098062, 0.16014212193337718, 0.1434670097903863, 0.07239317897010789, 0.22771912355872592, 0.1353461871614854, 0.07942001911033658, 0.23239668938288327, 0.2371779473640564, 0.06294863052940725, 0.07585806607823942, 0.07980218743155876, 0.15064171807254445, 0.2266423500203557, 0.2349434340920552, 0.1561175211278345, 0.2970215957974689, 0.24979143113886415, 0.16139896269741583, 0.23760597073654477, 0.2601648049024592, 0.16674991848461518, 0.16127612241795708, 0.1969937443999249, 0.16378146150219397, 0.17281939390150403, 0.1761780303088728, 0.139256471177299, 0.17766926053084042, 0.18344729244527125, 0.08820632491699709, 0.18533484426579194, 0.1869793608472402, 0.11273780017685764, 0.1508098947600076, 0.1464173547635752, 0.14840668206594765, 0.8469799887628069, 0.14418319792327516, 0.10579504083032132, 0.07182938374340808, 0.16251878458720492, 0.1099510961792074, 0.6057938393762079, 0.5231285843105846, 0.17525604286721586, 0.6226813152965212, 0.10394476204780645, 0.14209987506998456, 0.2155894966669739, 0.211035653654717, 0.17100917423962037, 0.21735386978518156, 0.2071019743344712, 0.1311814970533618, 0.1944410810844004, 0.22580448360858674, 0.025773537735584773, 0.0860492776272973, 0.08035658246848398, 0.0425589921663424, 0.11974194557765927, 0.07983299392325804, 0.05955890535241393, 0.09225225437082085, 0.07926124525963696]}, "mutation_prompt": null}
{"id": "b704110a-73e6-49e3-a36b-f33152f708a0", "solution": "import numpy as np\n\nclass HybridPSOGA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.2\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim)), np.zeros((self.population_size, self.dim))\n\n        def fitness(x):\n            return func(x)\n\n        def PSO():\n            swarm, velocity = initialize_population()\n            pbest = swarm.copy()\n            pbest_fitness = np.apply_along_axis(fitness, 1, swarm)\n            gbest = pbest[np.argmin(pbest_fitness)]\n            gbest_fitness = np.min(pbest_fitness)\n\n            for _ in range(self.budget):\n                r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n                velocity = 0.5 * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n                velocity = np.clip(velocity, -self.max_velocity, self.max_velocity)\n                swarm += velocity\n\n                current_fitness = np.apply_along_axis(fitness, 1, swarm)\n                update_indices = current_fitness < pbest_fitness\n                pbest[update_indices] = swarm[update_indices]\n                pbest_fitness[update_indices] = current_fitness[update_indices]\n\n                gbest_index = np.argmin(pbest_fitness)\n                if pbest_fitness[gbest_index] < gbest_fitness:\n                    gbest = pbest[gbest_index]\n                    gbest_fitness = pbest_fitness[gbest_index]\n\n            return gbest\n\n        def GA():\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n            for _ in range(self.budget):\n                fitness_values = np.apply_along_axis(fitness, 1, population)\n                parents = population[np.argsort(fitness_values)[:2]]\n                children = parents + self.mutation_rate * np.random.randn(2, self.dim)\n                population = np.vstack((population, children))\n\n            best_solution = population[np.argmin(np.apply_along_axis(fitness, 1, population))]\n            return best_solution\n\n        return PSO() if np.random.rand() < 0.5 else GA()", "name": "HybridPSOGA", "description": "An innovative hybrid algorithm combining Particle Swarm Optimization (PSO) and Genetic Algorithm (GA) to efficiently explore and exploit the search space for optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bd4b1f0c-9a84-4a8f-b86d-c31c1f5d002b", "metadata": {"aucs": [0.17472150197543523, 0.9023077706867022, 0.8727497998246952, 0.08722572529888295, 0.8679170462952273, 0.8724152553804215, 0.24620427981660298, 0.8770045279476889, 0.8966563406036362, 9.999999999998899e-05, 0.7992255582219897, 0.8014315210241885, 9.999999999998899e-05, 0.8000349257707229, 0.8314897810048525, 9.999999999998899e-05, 0.7886678081516459, 0.7526338910296946, 0.01991283017416068, 0.08101407355228007, 0.09024933873574137, 0.030173813763018753, 0.05301416697547234, 0.03408326732586686, 0.021406786443509573, 0.07946572000641483, 0.03955657371315269, 0.04755607369602277, 0.09299825920581462, 0.07614203187625046, 0.0034316842990370633, 0.07570625759194094, 0.08525627166190264, 9.999999999998899e-05, 0.061034572881483284, 0.09628181275489767, 0.07714015398876561, 0.6928510985572246, 0.5260646798602139, 0.036643830680017864, 0.8156621597451227, 0.2857720759898591, 0.035791862436331034, 0.8955820283569105, 0.5648699436832463, 0.07760927792559591, 0.6319544121738252, 0.6899134956494298, 0.0048520007921138975, 0.7057667349056522, 0.725899233144966, 0.1309869228522974, 0.6997880171965714, 0.6477606256237277, 0.05105164283677044, 0.08314747507895626, 0.10867402398566206, 0.22580075880067185, 0.06806345499083966, 0.0014185308655061402, 0.13217219431010307, 0.10701942104701379, 0.1499376809148213, 9.999999999998899e-05, 0.1292346600825176, 0.18205353307549166, 0.0060281468085888745, 0.18990767268143915, 0.13128273596186646, 0.020107390566508343, 0.3667003783374857, 0.26638139113974424, 0.07990881467591804, 0.23404936715603353, 0.22917268160288629, 9.999999999998899e-05, 0.22822054897155797, 0.24840978543264025, 0.03025828388633367, 0.26076816230295186, 0.13200272012065362, 9.999999999998899e-05, 0.05098709070537588, 0.06271942814218745, 9.999999999998899e-05, 0.011304980932650643, 9.999999999998899e-05, 9.999999999998899e-05, 0.00374404170641629, 0.01535001373941014, 0.020579271864722748, 0.12513483125720326, 0.03929392098559181, 0.0038833401127857936, 0.05095451382596017, 0.043047025704999076, 0.011653172751020957, 0.12616722136719416, 0.06505983367273749, 9.999999999998899e-05, 0.24390432858294064, 0.37200622442055087, 9.999999999998899e-05, 0.07612751535110251, 0.11160816523633221, 9.999999999998899e-05, 0.12322833933901456, 0.0662068043820715, 9.999999999998899e-05, 0.06174507494625958, 0.0998467842228028, 9.999999999998899e-05, 0.09125324882825803, 0.1849408099726132, 0.02234916158183009, 0.33405788535740044, 0.23674337392245226, 0.21052383244804174, 0.5947665765533567, 0.5602627319518596, 0.25648155039080134, 0.5347264318946063, 0.561575645595972, 0.2466855741054068, 0.5802706509732991, 0.6261890125215573, 0.05156310095447991, 0.011488462971540714, 0.010019403350055245, 0.03377672051528113, 0.09243160894048907, 0.08080427237298349, 0.0010499894774191887, 0.08918968595321508, 0.040045245889878234, 0.21105584049514248, 0.1702312423388137, 0.16794577343596462, 0.19107327900052418, 0.2767918372587884, 0.14554191631920899, 0.10681511948321254, 0.1408706227533647, 0.17718767010412229, 0.11539875099927721, 0.18779079371008955, 0.18319212262851448, 0.1484020216009796, 0.39749757978362843, 0.2615818538574092, 0.1312702690098062, 0.16014212193337718, 0.1434670097903863, 0.07239317897010789, 0.22771912355872592, 0.1353461871614854, 0.07942001911033658, 0.23239668938288327, 0.2371779473640564, 0.06294863052940725, 0.07585806607823942, 0.07980218743155876, 0.15064171807254445, 0.2266423500203557, 0.2349434340920552, 0.1561175211278345, 0.2970215957974689, 0.24979143113886415, 0.16139896269741583, 0.23760597073654477, 0.2601648049024592, 0.16674991848461518, 0.16127612241795708, 0.1969937443999249, 0.16378146150219397, 0.17281939390150403, 0.1761780303088728, 0.139256471177299, 0.17766926053084042, 0.18344729244527125, 0.08820632491699709, 0.18533484426579194, 0.1869793608472402, 0.11273780017685764, 0.1508098947600076, 0.1464173547635752, 0.14840668206594765, 0.8469799887628069, 0.14418319792327516, 0.10579504083032132, 0.07182938374340808, 0.16251878458720492, 0.1099510961792074, 0.6057938393762079, 0.5231285843105846, 0.17525604286721586, 0.6226813152965212, 0.10394476204780645, 0.14209987506998456, 0.2155894966669739, 0.211035653654717, 0.17100917423962037, 0.21735386978518156, 0.2071019743344712, 0.1311814970533618, 0.1944410810844004, 0.22580448360858674, 0.025773537735584773, 0.0860492776272973, 0.08035658246848398, 0.0425589921663424, 0.11974194557765927, 0.07983299392325804, 0.05955890535241393, 0.09225225437082085, 0.07926124525963696]}, "mutation_prompt": null}
