{"id": "fb9f6c63-33b2-4142-83ab-2c65a4f0b772", "solution": "import numpy as np\n\nclass QuantumInspiredBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, A=0.5, r=0.5, alpha=0.9, gamma=0.9, fmin=0, fmax=2):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.A = A\n        self.r = r\n        self.alpha = alpha\n        self.gamma = gamma\n        self.fmin = fmin\n        self.fmax = fmax\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                if np.random.rand() > self.gamma:\n                    frequencies = self.fmin + (self.fmax - self.fmin) * np.random.rand()\n                    velocities[i] += (population[i] - best_solution) * frequencies\n                else:\n                    velocities[i] += (population[i] - best_solution) * self.alpha\n\n                if np.random.rand() < self.A:\n                    for j in range(self.dim):\n                        if np.random.rand() < self.r:\n                            population[i, j] = best_solution[j] + np.random.uniform(-1, 1)\n                        else:\n                            population[i, j] += velocities[i, j]\n\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    fitness = func(population[i])\n                    t += 1\n\n                    if fitness < best_fitness:\n                        best_solution = population[i]\n                        best_fitness = fitness\n\n                    if t >= self.budget:\n                        break\n\n        return best_solution", "name": "QuantumInspiredBatAlgorithm", "description": "Quantum-Inspired Bat Algorithm (QIBA) that combines the echolocation behavior of bats with quantum computing principles to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.07735153489756698, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.07990990204184256, 0.07109543756725767, 0.07516620139322494, 0.09666953234166342, 0.06673291068397191, 0.07639837470584587, 0.07125133408397744, 0.060454202598430484, 0.09396432978568936, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02681680864068825, 0.030178208892459035, 9.999999999998899e-05, 0.00030133296337186977, 9.999999999998899e-05, 0.013498687908318208, 0.010975653200041458, 9.999999999998899e-05, 9.999999999998899e-05, 0.03187239890852356, 9.999999999998899e-05, 9.999999999998899e-05, 0.014029223567117555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9428753351038021, 0.9956540815717639, 0.9804015013498115, 0.6323623852832359, 0.7406757842271658, 0.2247042411998894, 0.9980845024010531, 0.9170205464376067, 0.9895360017773007, 9.999999999998899e-05, 9.999999999998899e-05, 0.029662604118231184, 9.999999999998899e-05, 0.021683049920102726, 0.00734417229141926, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07028748259620587, 0.025967013118545434, 0.01979673455831721, 0.055444325704671615, 0.00921319740403248, 0.025981221390079967, 0.023726239060507526, 0.0036489282605862705, 0.023400144036981874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008672804227689679, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00018545264521585558, 0.015489524111325093, 9.999999999998899e-05, 0.033710056541337186, 9.999999999998899e-05, 0.0014886722322678958, 0.0013164823958854432, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08557743982224342, 0.11161374304817362, 0.1316254324339945, 0.08369417898235965, 0.06600186652016105, 0.09324871377313482, 0.11956652868660678, 0.09515535757853244, 0.11071507121033353, 0.019113151825325803, 0.01945016885333184, 0.000398466920632945, 9.999999999998899e-05, 0.02155572734537059, 9.999999999998899e-05, 9.999999999998899e-05, 0.005983637650802676, 0.0075730036588441685, 0.12787340013361004, 0.1392024825889021, 0.12059807614170404, 0.12038833168350649, 0.13353357367981533, 0.11672025849155598, 0.12216513000666396, 0.14737399701887044, 0.14345509939323542, 0.13187800958697848, 0.10355920089541537, 0.11155899063691, 0.13134322870836657, 0.11698848326695133, 0.12280358038118488, 0.12492594244001853, 0.12489326925179578, 0.10685342945724974, 0.061709682682968725, 0.05022747151114437, 0.0592510224096956, 0.07513604355680581, 0.061827818558801484, 0.0708582604546073, 0.05922745695583875, 0.06135400577867112, 0.04571897426008431, 0.11679767526864637, 0.08727371398591055, 0.11508906521847984, 0.1252971488512441, 0.12111251098627762, 0.0985091088563177, 0.12879702563165063, 0.078653597489039, 0.1494443168904116, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14299086766130897, 0.0840326763543573, 0.11625505183666174, 0.10038130100569576, 0.09718590667865923, 0.08034592469102386, 0.09648191971214715, 0.08364056375247986, 0.07436833741073712, 0.07860553409878646, 0.055259420400917025, 0.04756939567484153, 0.08035586891242141, 0.050785582301895005, 0.04935807803182246, 0.038056643338911234, 0.07429262129716285, 0.11003834911857469, 0.08076832629395159, 0.1886730627207891, 0.18385972731456934, 0.19057844994788586, 0.17205139933086944, 0.18068069780148222, 0.17385407504666872, 0.18394981373161068, 0.18175456898939557, 0.1725721021040283, 0.009358638816962639, 0.0002231571287042433, 0.031557771822518066, 0.01692097008893312, 0.001948555878684921, 0.004889267763737881, 0.009315824050358024, 0.010522425736534946, 0.04462976636174931]}, "mutation_prompt": null}
{"id": "a5eb6ad6-1d31-4cd7-91f3-bef2a436fd60", "solution": "import numpy as np\n\nclass QuantumInspiredBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, A=0.5, r=0.5, alpha=0.9, gamma=0.9, fmin=0, fmax=2):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.A = A\n        self.r = r\n        self.alpha = alpha\n        self.gamma = gamma\n        self.fmin = fmin\n        self.fmax = fmax\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n\n        t = 0\n        while t < self.budget:\n            for i in range(self.population_size):\n                if np.random.rand() > self.gamma:\n                    frequencies = self.fmin + (self.fmax - self.fmin) * np.random.rand()\n                    velocities[i] += (population[i] - best_solution) * frequencies\n                else:\n                    velocities[i] += (population[i] - best_solution) * self.alpha\n\n                if np.random.rand() < self.A:\n                    for j in range(self.dim):\n                        if np.random.rand() < self.r:\n                            population[i, j] = best_solution[j] + np.random.uniform(-1, 1)\n                        else:\n                            population[i, j] += velocities[i, j]\n\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    fitness = func(population[i])\n                    t += 1\n\n                    if fitness < best_fitness:\n                        best_solution = population[i]\n                        best_fitness = fitness\n\n                    if t >= self.budget:\n                        break\n\n        return best_solution", "name": "QuantumInspiredBatAlgorithm", "description": "Quantum-Inspired Bat Algorithm (QIBA) that combines the echolocation behavior of bats with quantum computing principles to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb9f6c63-33b2-4142-83ab-2c65a4f0b772", "metadata": {"aucs": [0.07990990204184256, 0.07109543756725767, 0.07516620139322494, 0.09666953234166342, 0.06673291068397191, 0.07639837470584587, 0.07125133408397744, 0.060454202598430484, 0.09396432978568936, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02681680864068825, 0.030178208892459035, 9.999999999998899e-05, 0.00030133296337186977, 9.999999999998899e-05, 0.013498687908318208, 0.010975653200041458, 9.999999999998899e-05, 9.999999999998899e-05, 0.03187239890852356, 9.999999999998899e-05, 9.999999999998899e-05, 0.014029223567117555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9428753351038021, 0.9956540815717639, 0.9804015013498115, 0.6323623852832359, 0.7406757842271658, 0.2247042411998894, 0.9980845024010531, 0.9170205464376067, 0.9895360017773007, 9.999999999998899e-05, 9.999999999998899e-05, 0.029662604118231184, 9.999999999998899e-05, 0.021683049920102726, 0.00734417229141926, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07028748259620587, 0.025967013118545434, 0.01979673455831721, 0.055444325704671615, 0.00921319740403248, 0.025981221390079967, 0.023726239060507526, 0.0036489282605862705, 0.023400144036981874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008672804227689679, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00018545264521585558, 0.015489524111325093, 9.999999999998899e-05, 0.033710056541337186, 9.999999999998899e-05, 0.0014886722322678958, 0.0013164823958854432, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08557743982224342, 0.11161374304817362, 0.1316254324339945, 0.08369417898235965, 0.06600186652016105, 0.09324871377313482, 0.11956652868660678, 0.09515535757853244, 0.11071507121033353, 0.019113151825325803, 0.01945016885333184, 0.000398466920632945, 9.999999999998899e-05, 0.02155572734537059, 9.999999999998899e-05, 9.999999999998899e-05, 0.005983637650802676, 0.0075730036588441685, 0.12787340013361004, 0.1392024825889021, 0.12059807614170404, 0.12038833168350649, 0.13353357367981533, 0.11672025849155598, 0.12216513000666396, 0.14737399701887044, 0.14345509939323542, 0.13187800958697848, 0.10355920089541537, 0.11155899063691, 0.13134322870836657, 0.11698848326695133, 0.12280358038118488, 0.12492594244001853, 0.12489326925179578, 0.10685342945724974, 0.061709682682968725, 0.05022747151114437, 0.0592510224096956, 0.07513604355680581, 0.061827818558801484, 0.0708582604546073, 0.05922745695583875, 0.06135400577867112, 0.04571897426008431, 0.11679767526864637, 0.08727371398591055, 0.11508906521847984, 0.1252971488512441, 0.12111251098627762, 0.0985091088563177, 0.12879702563165063, 0.078653597489039, 0.1494443168904116, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14299086766130897, 0.0840326763543573, 0.11625505183666174, 0.10038130100569576, 0.09718590667865923, 0.08034592469102386, 0.09648191971214715, 0.08364056375247986, 0.07436833741073712, 0.07860553409878646, 0.055259420400917025, 0.04756939567484153, 0.08035586891242141, 0.050785582301895005, 0.04935807803182246, 0.038056643338911234, 0.07429262129716285, 0.11003834911857469, 0.08076832629395159, 0.1886730627207891, 0.18385972731456934, 0.19057844994788586, 0.17205139933086944, 0.18068069780148222, 0.17385407504666872, 0.18394981373161068, 0.18175456898939557, 0.1725721021040283, 0.009358638816962639, 0.0002231571287042433, 0.031557771822518066, 0.01692097008893312, 0.001948555878684921, 0.004889267763737881, 0.009315824050358024, 0.010522425736534946, 0.04462976636174931]}, "mutation_prompt": null}
