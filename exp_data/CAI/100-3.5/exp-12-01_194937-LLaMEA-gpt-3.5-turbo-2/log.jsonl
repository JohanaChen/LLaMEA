{"id": "67dffab8-c654-436d-b36d-f3c6c8ab83cb", "solution": "import numpy as np\n\nclass AdaptiveFireworksAlgorithm:\n    def __init__(self, budget, dim, explosion_amp=0.1, sparks_num=5):\n        self.budget = budget\n        self.dim = dim\n        self.explosion_amp = explosion_amp\n        self.sparks_num = sparks_num\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, size=self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.sparks_num):\n                spark = best_solution + np.random.normal(0, self.explosion_amp, size=self.dim)\n                spark_fitness = func(spark)\n                if spark_fitness < best_fitness:\n                    best_solution = spark\n                    best_fitness = spark_fitness\n        \n        return best_solution", "name": "AdaptiveFireworksAlgorithm", "description": "A novel metaheuristic algorithm called Adaptive Fireworks Algorithm (AFA) inspired by the explosive behavior of fireworks to guide the search for optimal solutions in the search space.", "configspace": "", "generation": 0, "fitness": 0.17717620549554913, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.5350357041633439, 0.48363700621527217, 0.475126753900867, 0.4808394469598313, 0.48313024367725543, 0.49102544394291425, 0.49089258527151425, 0.48139223655091723, 0.5002847477276714, 0.10525945728307418, 0.03637085456084843, 9.999999999998899e-05, 0.04175951483581153, 0.09764676915710302, 9.999999999998899e-05, 0.00934371791613231, 0.031384428244325635, 9.999999999998899e-05, 0.02198658111118168, 9.999999999998899e-05, 9.999999999998899e-05, 0.018140570671239753, 9.999999999998899e-05, 0.0070799794854148335, 0.015030682426905195, 9.999999999998899e-05, 0.005420128046527362, 0.03965473707450817, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004691024229221963, 9.999999999998899e-05, 9.999999999998899e-05, 0.003951472725855276, 9.999999999998899e-05, 9.999999999998899e-05, 0.9681947639578828, 0.9454119511683472, 0.9394697413570994, 0.96897060950845, 0.962025728108113, 0.9597584587376962, 0.9611789892110582, 0.9616714731707214, 0.9703412321847791, 0.344955691838312, 0.3630909137387879, 0.32965137474593686, 0.35225205514243785, 0.3494589320152449, 0.3346424774029191, 0.3422977070654839, 0.3599214906415158, 0.3507728106277518, 0.10146759100282199, 0.027768386928375577, 0.015634256350699594, 0.015385054244166696, 9.999999999998899e-05, 9.999999999998899e-05, 0.05355146805036348, 0.010585652755912056, 9.999999999998899e-05, 0.26341115815631355, 0.19429771033783105, 0.19909633729802967, 0.19634058074605365, 0.18692416769459463, 0.19261186942034747, 0.20552581568208483, 0.20221419765484128, 0.21143461905938132, 0.20762870324172555, 0.20424044148678366, 0.13171387663331702, 0.2074717896763949, 0.26130120948047597, 0.16222727434841655, 0.22989443779947738, 0.22372399937296328, 0.2029322211276562, 0.1388857022064025, 0.000416956732089413, 0.014567147330223795, 0.044917230318397006, 0.012161704933118966, 0.0020655350119702653, 0.025518956059983777, 0.06918537143479098, 0.03863017880294484, 0.10990088780242258, 0.07795895531316233, 0.19196935112068236, 0.09647161341784072, 0.03217145531469123, 0.03625287192622895, 0.20137930723746933, 0.04160096127763624, 0.07350103155614574, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027073363889812407, 0.011607201153795876, 9.999999999998899e-05, 0.005179538383223603, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1070994772205649, 0.12188603496787587, 0.08303181815039862, 0.14521871836025313, 0.11329980547522644, 0.04638385021581071, 0.06636868712341037, 0.07756249149637806, 0.06429663752451109, 0.4681061221066267, 0.436132925127625, 0.46177368196140556, 0.4389868615789484, 0.45024460876039196, 0.49989771559335316, 0.470933811658927, 0.4479465395608663, 0.4670672741547046, 9.999999999998899e-05, 9.999999999998899e-05, 0.004572153484344921, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014362068602998823, 9.999999999998899e-05, 0.005379638104745177, 9.999999999998899e-05, 0.17967113712819593, 0.17795562531522358, 0.24573617040339546, 0.12415831213047768, 0.19930464569681206, 0.08512771530060059, 0.060318436268148035, 0.19972975532115178, 0.12384710967579793, 0.11481957580549584, 0.10750149565762646, 0.10669207277679749, 0.1464804758574726, 0.06698125120443799, 0.11989907151695278, 0.15029917572123663, 0.0781042815801204, 0.09488589088887711, 0.054003369986483474, 0.04478103031064895, 0.03998098576896081, 0.12987588822453688, 0.0028026982510372944, 0.08345833458800334, 0.15715563768272423, 0.015049831467069952, 0.02273322626242702, 0.1792350074639082, 0.14569005413936287, 0.14202565558841618, 0.18422733034389205, 0.11641210820448034, 0.16297329542797434, 0.17334218159576575, 0.12323046044240049, 0.1503150277573021, 0.1719053561966979, 0.1883432410770547, 0.17733072658682958, 0.16362433171889912, 0.16996486443572845, 0.1866978585907655, 0.16400133630937253, 0.1647325538160902, 0.16883652321027676, 0.12337745362110508, 0.13724774096111614, 0.09891189705681791, 0.07670160386713609, 0.06573009273732766, 0.06202462495580019, 0.10882720930679157, 0.12718532931687154, 0.16848008910946033, 0.7422571707428464, 0.11344938195893506, 0.08263121878018209, 0.015881419962593957, 0.21218246929472617, 0.21252468645183054, 0.6742127059328241, 0.059127901563812535, 0.6272694790591766, 0.19058321670043188, 0.18176669842786386, 0.19462803238629944, 0.190294193706409, 0.19106660264093933, 0.18016054677786708, 0.18406775435477007, 0.18711042821426627, 0.173650702916748, 0.05916337892089518, 0.014175528023634199, 0.03611986232028486, 0.039423283697242684, 0.006455067270948134, 0.023718785545267074, 0.06668287819880703, 0.012729286161774711, 0.03221481564701023]}, "mutation_prompt": null}
{"id": "06261b73-1be4-4457-8bdc-7f52c1e770b5", "solution": "import numpy as np\n\nclass AdaptiveFireworksAlgorithm:\n    def __init__(self, budget, dim, explosion_amp=0.1, sparks_num=5):\n        self.budget = budget\n        self.dim = dim\n        self.explosion_amp = explosion_amp\n        self.sparks_num = sparks_num\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, size=self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            for _ in range(self.sparks_num):\n                spark = best_solution + np.random.normal(0, self.explosion_amp, size=self.dim)\n                spark_fitness = func(spark)\n                if spark_fitness < best_fitness:\n                    best_solution = spark\n                    best_fitness = spark_fitness\n        \n        return best_solution", "name": "AdaptiveFireworksAlgorithm", "description": "A novel metaheuristic algorithm called Adaptive Fireworks Algorithm (AFA) inspired by the explosive behavior of fireworks to guide the search for optimal solutions in the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "67dffab8-c654-436d-b36d-f3c6c8ab83cb", "metadata": {"aucs": [0.5350357041633439, 0.48363700621527217, 0.475126753900867, 0.4808394469598313, 0.48313024367725543, 0.49102544394291425, 0.49089258527151425, 0.48139223655091723, 0.5002847477276714, 0.10525945728307418, 0.03637085456084843, 9.999999999998899e-05, 0.04175951483581153, 0.09764676915710302, 9.999999999998899e-05, 0.00934371791613231, 0.031384428244325635, 9.999999999998899e-05, 0.02198658111118168, 9.999999999998899e-05, 9.999999999998899e-05, 0.018140570671239753, 9.999999999998899e-05, 0.0070799794854148335, 0.015030682426905195, 9.999999999998899e-05, 0.005420128046527362, 0.03965473707450817, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004691024229221963, 9.999999999998899e-05, 9.999999999998899e-05, 0.003951472725855276, 9.999999999998899e-05, 9.999999999998899e-05, 0.9681947639578828, 0.9454119511683472, 0.9394697413570994, 0.96897060950845, 0.962025728108113, 0.9597584587376962, 0.9611789892110582, 0.9616714731707214, 0.9703412321847791, 0.344955691838312, 0.3630909137387879, 0.32965137474593686, 0.35225205514243785, 0.3494589320152449, 0.3346424774029191, 0.3422977070654839, 0.3599214906415158, 0.3507728106277518, 0.10146759100282199, 0.027768386928375577, 0.015634256350699594, 0.015385054244166696, 9.999999999998899e-05, 9.999999999998899e-05, 0.05355146805036348, 0.010585652755912056, 9.999999999998899e-05, 0.26341115815631355, 0.19429771033783105, 0.19909633729802967, 0.19634058074605365, 0.18692416769459463, 0.19261186942034747, 0.20552581568208483, 0.20221419765484128, 0.21143461905938132, 0.20762870324172555, 0.20424044148678366, 0.13171387663331702, 0.2074717896763949, 0.26130120948047597, 0.16222727434841655, 0.22989443779947738, 0.22372399937296328, 0.2029322211276562, 0.1388857022064025, 0.000416956732089413, 0.014567147330223795, 0.044917230318397006, 0.012161704933118966, 0.0020655350119702653, 0.025518956059983777, 0.06918537143479098, 0.03863017880294484, 0.10990088780242258, 0.07795895531316233, 0.19196935112068236, 0.09647161341784072, 0.03217145531469123, 0.03625287192622895, 0.20137930723746933, 0.04160096127763624, 0.07350103155614574, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027073363889812407, 0.011607201153795876, 9.999999999998899e-05, 0.005179538383223603, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1070994772205649, 0.12188603496787587, 0.08303181815039862, 0.14521871836025313, 0.11329980547522644, 0.04638385021581071, 0.06636868712341037, 0.07756249149637806, 0.06429663752451109, 0.4681061221066267, 0.436132925127625, 0.46177368196140556, 0.4389868615789484, 0.45024460876039196, 0.49989771559335316, 0.470933811658927, 0.4479465395608663, 0.4670672741547046, 9.999999999998899e-05, 9.999999999998899e-05, 0.004572153484344921, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014362068602998823, 9.999999999998899e-05, 0.005379638104745177, 9.999999999998899e-05, 0.17967113712819593, 0.17795562531522358, 0.24573617040339546, 0.12415831213047768, 0.19930464569681206, 0.08512771530060059, 0.060318436268148035, 0.19972975532115178, 0.12384710967579793, 0.11481957580549584, 0.10750149565762646, 0.10669207277679749, 0.1464804758574726, 0.06698125120443799, 0.11989907151695278, 0.15029917572123663, 0.0781042815801204, 0.09488589088887711, 0.054003369986483474, 0.04478103031064895, 0.03998098576896081, 0.12987588822453688, 0.0028026982510372944, 0.08345833458800334, 0.15715563768272423, 0.015049831467069952, 0.02273322626242702, 0.1792350074639082, 0.14569005413936287, 0.14202565558841618, 0.18422733034389205, 0.11641210820448034, 0.16297329542797434, 0.17334218159576575, 0.12323046044240049, 0.1503150277573021, 0.1719053561966979, 0.1883432410770547, 0.17733072658682958, 0.16362433171889912, 0.16996486443572845, 0.1866978585907655, 0.16400133630937253, 0.1647325538160902, 0.16883652321027676, 0.12337745362110508, 0.13724774096111614, 0.09891189705681791, 0.07670160386713609, 0.06573009273732766, 0.06202462495580019, 0.10882720930679157, 0.12718532931687154, 0.16848008910946033, 0.7422571707428464, 0.11344938195893506, 0.08263121878018209, 0.015881419962593957, 0.21218246929472617, 0.21252468645183054, 0.6742127059328241, 0.059127901563812535, 0.6272694790591766, 0.19058321670043188, 0.18176669842786386, 0.19462803238629944, 0.190294193706409, 0.19106660264093933, 0.18016054677786708, 0.18406775435477007, 0.18711042821426627, 0.173650702916748, 0.05916337892089518, 0.014175528023634199, 0.03611986232028486, 0.039423283697242684, 0.006455067270948134, 0.023718785545267074, 0.06668287819880703, 0.012729286161774711, 0.03221481564701023]}, "mutation_prompt": null}
