{"id": "4a8ed52f-e9ab-4c5f-94e3-32e865408c12", "solution": "import numpy as np\n\nclass DynamicDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 10\n        self.F_min = 0.5\n        self.F_max = 0.9\n        self.CR = 0.9\n        self.M_F = 0.5\n        self.M_CR = 0.5\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                indices = np.arange(self.pop_size)\n                indices = indices[indices != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                F = np.random.normal(self.M_F, 0.1)\n                F = np.clip(F, self.F_min, self.F_max)\n                CR = np.random.normal(self.M_CR, 0.1)\n                CR = np.clip(CR, 0, 1)\n                \n                trial_vector = self.pop[a] + F * (self.pop[b] - self.pop[c])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        trial_vector[j] = np.clip(trial_vector[j], self.lower_bound, self.upper_bound)\n                    else:\n                        trial_vector[j] = self.pop[i, j]\n                \n                if func(trial_vector) < func(self.pop[i]):\n                    self.pop[i] = trial_vector\n                    self.M_F = 0.5 + 0.2 * (1 - (0.9 * _ / self.budget))\n                    self.M_CR = 0.5 + 0.1 * (1 - (0.9 * _ / self.budget))\n        \n        best_solution = self.pop[np.argmin([func(individual) for individual in self.pop])]\n        return best_solution", "name": "DynamicDE", "description": "The algorithm combines Differential Evolution with a dynamic mutation strategy for adaptive optimization in high-dimensional spaces.", "configspace": "", "generation": 0, "fitness": 0.34323531998315787, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.9086878531430215, 0.8929412803236783, 0.9089065088711484, 0.9000790285698113, 0.8847443929550068, 0.868634903980955, 0.8987777422244918, 0.899549662177561, 0.7471021355521618, 0.8001305680947208, 0.8240225120841538, 0.81696736993419, 0.7942234268309485, 0.7940599683328468, 0.8159346917189437, 0.8101526294873158, 0.8406010762749043, 0.8189054387788863, 0.6967456470102824, 0.1294069599844474, 0.1719172168591645, 0.17059720566824543, 0.1752113658214135, 0.5614808617371585, 0.5590796867147583, 0.597520937250446, 0.7084413978207568, 0.12042109008242607, 0.03715091723028652, 0.16344699314152078, 0.158839429345777, 0.488647492996963, 0.1391835833234134, 0.14217571930322304, 0.41171300275393274, 0.12309877064934627, 0.9696412652888882, 0.9714411481142615, 0.9657113680714152, 0.9861538216759455, 0.9639960244771255, 0.9524305815231778, 0.9653911126794753, 0.9561674974237829, 0.9624437272464644, 0.6641547804990332, 0.44707362593508315, 0.5848185662470282, 0.7052448984982744, 0.5772058673012201, 0.5976151290796579, 0.3575371321643406, 0.4463712741085687, 0.557699155385152, 0.8265248686308246, 0.7354881675518845, 0.16405722832274783, 0.7813083999387785, 0.20164658552412185, 0.7110069836155557, 0.7938320503764097, 0.8041053711334656, 0.23852311770008539, 0.1987487925884044, 0.17930909324098232, 0.1934897517870372, 0.12634422537636913, 0.13310992211285977, 0.23104844618988285, 0.17227212271293668, 0.541886521139171, 0.28290079060005113, 0.05149800415025496, 0.1209292248248448, 0.17345530580973645, 0.18988825346899796, 0.23642909846583393, 0.1581996187474971, 0.18767163028104272, 0.16238406229434532, 0.1299797086468839, 0.020434993448775085, 9.999999999998899e-05, 0.11640559783469795, 0.005964007595786969, 0.0606778252001231, 0.07881629774633836, 0.04063593470097371, 0.08585354528543543, 0.04401334294407555, 0.20456239524020792, 0.05527759058573645, 0.1203492715197102, 0.146164334186333, 0.05994605622669458, 0.031882976651435246, 0.157790903925501, 0.1527228306844558, 0.12732736022436852, 0.051588401410343376, 0.10570918453628242, 0.13680439378565512, 0.14544288252126392, 0.193091715148746, 0.09240260862685823, 0.06045473613846497, 0.13116321156052513, 0.07292384301317145, 0.2586234448146628, 0.20324050616476075, 0.10397192597189697, 0.2922723279263868, 0.25587920074943626, 0.2783517033703645, 0.13345608339176018, 0.1858266197163676, 0.2909176214507362, 0.535682550319226, 0.5672031190653748, 0.6593141335278949, 0.6117073685656543, 0.5589155362715026, 0.20651490922036264, 0.586832182193908, 0.5294312349356278, 0.633584872534469, 0.10068487793730041, 0.09082387496233257, 0.10782674212800791, 0.08244724227022782, 0.09842088553233386, 0.10270533104547286, 0.120921877601473, 0.10495316781415298, 0.12302465497015946, 0.16318869149462534, 0.1255900888617465, 0.13301691354928769, 0.12381243021281485, 0.12402326590208346, 0.13603313333384992, 0.1782304763585173, 0.19456378994134127, 0.13775108233036648, 0.43436465707555993, 0.5355772583410392, 0.45804364155864474, 0.3449079735992735, 0.4552448224354124, 0.43819096591234086, 0.47457846030150186, 0.49787431414170136, 0.5397229544585831, 0.24522127295843243, 0.2965630693497051, 0.22176905706964223, 0.21414843672448025, 0.25915255156665007, 0.29857055252330045, 0.315586135385828, 0.3479799489128421, 0.18558486368059768, 0.1822212433127295, 0.1911022807601237, 0.19258011366044492, 0.19357715917343765, 0.18838058853665884, 0.1702020805831257, 0.21539255195351792, 0.19776420893434488, 0.17635686410277396, 0.21470330375517022, 0.6622437296412089, 0.20346480607640394, 0.3358195125915362, 0.7304966837333509, 0.24309778506422963, 0.2039766878575403, 0.24076610068357152, 0.26368102494114787, 0.617194689413139, 0.19442654996753883, 0.16450851417149737, 0.9012483979022562, 0.18377485517544834, 0.16515363523520132, 0.7413718310375488, 0.14575242792876086, 0.15958685315074161, 0.3194970012583953, 0.21122230634985595, 0.07847389626890744, 0.15541566004772123, 0.18897596416041862, 0.20902841633970803, 0.4063551937187677, 0.20763730793114787, 0.6020387912739931, 0.1729288430584771, 0.18634524415560705, 0.1767000827859847, 0.17255174940628892, 0.19487012712774454, 0.17807253557977676, 0.16008497282307776, 0.18307528940513662, 0.18581051557931982, 0.07003707838100948, 0.06553736031206847, 0.08523749186973018, 0.08024071526289189, 0.08996199186504839, 0.09155131353202883, 0.0753162662653909, 0.08478790741251829, 0.09026578369545801]}, "mutation_prompt": null}
{"id": "8436e369-04fe-490f-a89c-54f3d34cbd0b", "solution": "import numpy as np\n\nclass DynamicDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 10\n        self.F_min = 0.5\n        self.F_max = 0.9\n        self.CR = 0.9\n        self.M_F = 0.5\n        self.M_CR = 0.5\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.pop_size):\n                indices = np.arange(self.pop_size)\n                indices = indices[indices != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                F = np.random.normal(self.M_F, 0.1)\n                F = np.clip(F, self.F_min, self.F_max)\n                CR = np.random.normal(self.M_CR, 0.1)\n                CR = np.clip(CR, 0, 1)\n                \n                trial_vector = self.pop[a] + F * (self.pop[b] - self.pop[c])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        trial_vector[j] = np.clip(trial_vector[j], self.lower_bound, self.upper_bound)\n                    else:\n                        trial_vector[j] = self.pop[i, j]\n                \n                if func(trial_vector) < func(self.pop[i]):\n                    self.pop[i] = trial_vector\n                    self.M_F = 0.5 + 0.2 * (1 - (0.9 * _ / self.budget))\n                    self.M_CR = 0.5 + 0.1 * (1 - (0.9 * _ / self.budget))\n        \n        best_solution = self.pop[np.argmin([func(individual) for individual in self.pop])]\n        return best_solution", "name": "DynamicDE", "description": "The algorithm combines Differential Evolution with a dynamic mutation strategy for adaptive optimization in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4a8ed52f-e9ab-4c5f-94e3-32e865408c12", "metadata": {"aucs": [0.9086878531430215, 0.8929412803236783, 0.9089065088711484, 0.9000790285698113, 0.8847443929550068, 0.868634903980955, 0.8987777422244918, 0.899549662177561, 0.7471021355521618, 0.8001305680947208, 0.8240225120841538, 0.81696736993419, 0.7942234268309485, 0.7940599683328468, 0.8159346917189437, 0.8101526294873158, 0.8406010762749043, 0.8189054387788863, 0.6967456470102824, 0.1294069599844474, 0.1719172168591645, 0.17059720566824543, 0.1752113658214135, 0.5614808617371585, 0.5590796867147583, 0.597520937250446, 0.7084413978207568, 0.12042109008242607, 0.03715091723028652, 0.16344699314152078, 0.158839429345777, 0.488647492996963, 0.1391835833234134, 0.14217571930322304, 0.41171300275393274, 0.12309877064934627, 0.9696412652888882, 0.9714411481142615, 0.9657113680714152, 0.9861538216759455, 0.9639960244771255, 0.9524305815231778, 0.9653911126794753, 0.9561674974237829, 0.9624437272464644, 0.6641547804990332, 0.44707362593508315, 0.5848185662470282, 0.7052448984982744, 0.5772058673012201, 0.5976151290796579, 0.3575371321643406, 0.4463712741085687, 0.557699155385152, 0.8265248686308246, 0.7354881675518845, 0.16405722832274783, 0.7813083999387785, 0.20164658552412185, 0.7110069836155557, 0.7938320503764097, 0.8041053711334656, 0.23852311770008539, 0.1987487925884044, 0.17930909324098232, 0.1934897517870372, 0.12634422537636913, 0.13310992211285977, 0.23104844618988285, 0.17227212271293668, 0.541886521139171, 0.28290079060005113, 0.05149800415025496, 0.1209292248248448, 0.17345530580973645, 0.18988825346899796, 0.23642909846583393, 0.1581996187474971, 0.18767163028104272, 0.16238406229434532, 0.1299797086468839, 0.020434993448775085, 9.999999999998899e-05, 0.11640559783469795, 0.005964007595786969, 0.0606778252001231, 0.07881629774633836, 0.04063593470097371, 0.08585354528543543, 0.04401334294407555, 0.20456239524020792, 0.05527759058573645, 0.1203492715197102, 0.146164334186333, 0.05994605622669458, 0.031882976651435246, 0.157790903925501, 0.1527228306844558, 0.12732736022436852, 0.051588401410343376, 0.10570918453628242, 0.13680439378565512, 0.14544288252126392, 0.193091715148746, 0.09240260862685823, 0.06045473613846497, 0.13116321156052513, 0.07292384301317145, 0.2586234448146628, 0.20324050616476075, 0.10397192597189697, 0.2922723279263868, 0.25587920074943626, 0.2783517033703645, 0.13345608339176018, 0.1858266197163676, 0.2909176214507362, 0.535682550319226, 0.5672031190653748, 0.6593141335278949, 0.6117073685656543, 0.5589155362715026, 0.20651490922036264, 0.586832182193908, 0.5294312349356278, 0.633584872534469, 0.10068487793730041, 0.09082387496233257, 0.10782674212800791, 0.08244724227022782, 0.09842088553233386, 0.10270533104547286, 0.120921877601473, 0.10495316781415298, 0.12302465497015946, 0.16318869149462534, 0.1255900888617465, 0.13301691354928769, 0.12381243021281485, 0.12402326590208346, 0.13603313333384992, 0.1782304763585173, 0.19456378994134127, 0.13775108233036648, 0.43436465707555993, 0.5355772583410392, 0.45804364155864474, 0.3449079735992735, 0.4552448224354124, 0.43819096591234086, 0.47457846030150186, 0.49787431414170136, 0.5397229544585831, 0.24522127295843243, 0.2965630693497051, 0.22176905706964223, 0.21414843672448025, 0.25915255156665007, 0.29857055252330045, 0.315586135385828, 0.3479799489128421, 0.18558486368059768, 0.1822212433127295, 0.1911022807601237, 0.19258011366044492, 0.19357715917343765, 0.18838058853665884, 0.1702020805831257, 0.21539255195351792, 0.19776420893434488, 0.17635686410277396, 0.21470330375517022, 0.6622437296412089, 0.20346480607640394, 0.3358195125915362, 0.7304966837333509, 0.24309778506422963, 0.2039766878575403, 0.24076610068357152, 0.26368102494114787, 0.617194689413139, 0.19442654996753883, 0.16450851417149737, 0.9012483979022562, 0.18377485517544834, 0.16515363523520132, 0.7413718310375488, 0.14575242792876086, 0.15958685315074161, 0.3194970012583953, 0.21122230634985595, 0.07847389626890744, 0.15541566004772123, 0.18897596416041862, 0.20902841633970803, 0.4063551937187677, 0.20763730793114787, 0.6020387912739931, 0.1729288430584771, 0.18634524415560705, 0.1767000827859847, 0.17255174940628892, 0.19487012712774454, 0.17807253557977676, 0.16008497282307776, 0.18307528940513662, 0.18581051557931982, 0.07003707838100948, 0.06553736031206847, 0.08523749186973018, 0.08024071526289189, 0.08996199186504839, 0.09155131353202883, 0.0753162662653909, 0.08478790741251829, 0.09026578369545801]}, "mutation_prompt": null}
