{"id": "a6422a87-1f57-4ab6-9d9d-30e531c7c9ed", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        harmony_memory_size = 20\n        bandwidth = 0.01\n        pitch_adjust_rate = 0.5\n        \n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (harmony_memory_size, self.dim))\n        \n        def improvise(harmony_memory):\n            new_harmony = np.copy(harmony_memory)\n            for i in range(self.dim):\n                rand = np.random.rand()\n                if rand < pitch_adjust_rate:\n                    rand_index = np.random.randint(harmony_memory_size)\n                    new_harmony[rand_index, i] = np.clip(harmony_memory[rand_index, i] + bandwidth * np.random.randn(), self.lower_bound, self.upper_bound)\n            return new_harmony\n        \n        harmony_memory = initialize_harmony_memory()\n        \n        for _ in range(self.budget):\n            new_solution = improvise(harmony_memory)\n            new_fitness = func(new_solution)\n            worst_index = np.argmax(new_fitness)\n            if new_fitness[worst_index] < func(harmony_memory[np.argmin(new_fitness)]):\n                harmony_memory[worst_index] = new_solution[worst_index]\n        \n        best_index = np.argmin(func(harmony_memory))\n        return harmony_memory[best_index]", "name": "HarmonySearch", "description": "Harmony Search Algorithm for Black Box Optimization, inspired by musicians' improvisation to find optimal solutions.", "configspace": "", "generation": 0, "fitness": 0.03903213252837953, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.07219834657922874, 0.0645225460304808, 0.09195778390456222, 0.08972597976233321, 0.06227029433417719, 0.07727274831881337, 0.07814146878935935, 0.07459324255889022, 0.06721274848635161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016938394374398036, 9.999999999998899e-05, 0.01120172371271455, 0.00161698821475742, 0.007701480274167394, 0.02187525823002756, 9.999999999998899e-05, 0.012170141266562129, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020912569545426418, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04532664670124198, 0.03381619860148222, 0.043005571819821675, 0.05349171205185699, 0.047075169739014044, 0.037626082204455624, 0.06407945321431796, 0.04919644805422341, 0.03940752918521562, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004466786964736347, 9.999999999998899e-05, 9.999999999998899e-05, 0.011513736143000108, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.008188094080661124, 0.004562218041036625, 0.02725496812965944, 9.999999999998899e-05, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017598625236137422, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10932554954466323, 0.11166090727763056, 0.148621983879605, 0.09438642790718754, 0.09721809736092768, 0.0962034749627324, 0.12429712726644904, 0.09733934198177918, 0.12122122090009291, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006593774494089155, 9.999999999998899e-05, 0.019032577363983783, 9.999999999998899e-05, 9.999999999998899e-05, 0.028271728295930387, 0.07316230336257123, 0.08321994937899657, 0.06359904959968155, 0.10434991841375763, 0.11867652646424631, 0.0607706832284679, 0.09436999089920772, 0.05103300648600817, 0.08013380114178759, 0.09685793610455584, 0.09756631703886653, 0.10454056063832873, 0.10957252416932117, 0.09533634049227113, 0.09468021141799532, 0.11541768604395675, 0.17746398234852478, 0.07871366679055158, 0.03886392398301575, 0.03544665357673116, 0.044633746223173176, 0.047631784355496865, 0.06579772501280678, 0.04924531177321201, 0.060177289324081173, 0.09679137987930464, 0.03518595296005278, 0.13495439997071734, 0.08795722511514559, 0.14259273832627273, 0.12953310790274386, 0.10864553584977676, 0.1250503361914067, 0.12270663532833881, 0.10201843455633064, 0.1383428691971509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05626153938323819, 0.07540915539963366, 0.08269427581076894, 0.06737205092329024, 0.12165329662984004, 0.06737326064591709, 0.07269472610424332, 0.09697573417950767, 0.05401422043583859, 0.03835613150008299, 0.06570094588218578, 0.02063948683939454, 0.051376686397524685, 0.03778264296385592, 0.04586010533572227, 0.047232079050681164, 0.02925390492038571, 0.04318787325856133, 0.14908323241453614, 0.14847192453668467, 0.15880804035314378, 0.13776002317289548, 0.1421232534418888, 0.13857923499999214, 0.15295667171920813, 0.14321932045723185, 0.18072378068796535, 0.0038147642510193425, 0.0206472118504496, 0.04011549122840208, 0.03936664623372377, 0.027195546250258884, 0.013614734442978449, 0.023486999235500683, 0.002516271778306378, 0.019375685213182225]}, "mutation_prompt": null}
{"id": "b93a8587-1359-4106-9d30-8698c2ef410d", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        harmony_memory_size = 20\n        bandwidth = 0.01\n        pitch_adjust_rate = 0.5\n        \n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (harmony_memory_size, self.dim))\n        \n        def improvise(harmony_memory):\n            new_harmony = np.copy(harmony_memory)\n            for i in range(self.dim):\n                rand = np.random.rand()\n                if rand < pitch_adjust_rate:\n                    rand_index = np.random.randint(harmony_memory_size)\n                    new_harmony[rand_index, i] = np.clip(harmony_memory[rand_index, i] + bandwidth * np.random.randn(), self.lower_bound, self.upper_bound)\n            return new_harmony\n        \n        harmony_memory = initialize_harmony_memory()\n        \n        for _ in range(self.budget):\n            new_solution = improvise(harmony_memory)\n            new_fitness = func(new_solution)\n            worst_index = np.argmax(new_fitness)\n            if new_fitness[worst_index] < func(harmony_memory[np.argmin(new_fitness)]):\n                harmony_memory[worst_index] = new_solution[worst_index]\n        \n        best_index = np.argmin(func(harmony_memory))\n        return harmony_memory[best_index]", "name": "HarmonySearch", "description": "Harmony Search Algorithm for Black Box Optimization, inspired by musicians' improvisation to find optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a6422a87-1f57-4ab6-9d9d-30e531c7c9ed", "metadata": {"aucs": [0.07219834657922874, 0.0645225460304808, 0.09195778390456222, 0.08972597976233321, 0.06227029433417719, 0.07727274831881337, 0.07814146878935935, 0.07459324255889022, 0.06721274848635161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016938394374398036, 9.999999999998899e-05, 0.01120172371271455, 0.00161698821475742, 0.007701480274167394, 0.02187525823002756, 9.999999999998899e-05, 0.012170141266562129, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020912569545426418, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04532664670124198, 0.03381619860148222, 0.043005571819821675, 0.05349171205185699, 0.047075169739014044, 0.037626082204455624, 0.06407945321431796, 0.04919644805422341, 0.03940752918521562, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004466786964736347, 9.999999999998899e-05, 9.999999999998899e-05, 0.011513736143000108, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.008188094080661124, 0.004562218041036625, 0.02725496812965944, 9.999999999998899e-05, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017598625236137422, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10932554954466323, 0.11166090727763056, 0.148621983879605, 0.09438642790718754, 0.09721809736092768, 0.0962034749627324, 0.12429712726644904, 0.09733934198177918, 0.12122122090009291, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006593774494089155, 9.999999999998899e-05, 0.019032577363983783, 9.999999999998899e-05, 9.999999999998899e-05, 0.028271728295930387, 0.07316230336257123, 0.08321994937899657, 0.06359904959968155, 0.10434991841375763, 0.11867652646424631, 0.0607706832284679, 0.09436999089920772, 0.05103300648600817, 0.08013380114178759, 0.09685793610455584, 0.09756631703886653, 0.10454056063832873, 0.10957252416932117, 0.09533634049227113, 0.09468021141799532, 0.11541768604395675, 0.17746398234852478, 0.07871366679055158, 0.03886392398301575, 0.03544665357673116, 0.044633746223173176, 0.047631784355496865, 0.06579772501280678, 0.04924531177321201, 0.060177289324081173, 0.09679137987930464, 0.03518595296005278, 0.13495439997071734, 0.08795722511514559, 0.14259273832627273, 0.12953310790274386, 0.10864553584977676, 0.1250503361914067, 0.12270663532833881, 0.10201843455633064, 0.1383428691971509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05626153938323819, 0.07540915539963366, 0.08269427581076894, 0.06737205092329024, 0.12165329662984004, 0.06737326064591709, 0.07269472610424332, 0.09697573417950767, 0.05401422043583859, 0.03835613150008299, 0.06570094588218578, 0.02063948683939454, 0.051376686397524685, 0.03778264296385592, 0.04586010533572227, 0.047232079050681164, 0.02925390492038571, 0.04318787325856133, 0.14908323241453614, 0.14847192453668467, 0.15880804035314378, 0.13776002317289548, 0.1421232534418888, 0.13857923499999214, 0.15295667171920813, 0.14321932045723185, 0.18072378068796535, 0.0038147642510193425, 0.0206472118504496, 0.04011549122840208, 0.03936664623372377, 0.027195546250258884, 0.013614734442978449, 0.023486999235500683, 0.002516271778306378, 0.019375685213182225]}, "mutation_prompt": null}
