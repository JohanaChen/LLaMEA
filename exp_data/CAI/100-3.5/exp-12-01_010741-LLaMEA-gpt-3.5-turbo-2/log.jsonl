{"id": "72b1ed04-1a64-41fe-92c4-ee2ea61eaed0", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n\n    def __call__(self, func):\n        def pso_update(particles, g_best, w=0.5, c1=1.5, c2=1.5):\n            for i in range(len(particles)):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                v_i = w * particles[i]['velocity'] + c1 * r1 * (particles[i]['p_best_pos'] - particles[i]['position']) + c2 * r2 * (g_best['position'] - particles[i]['position'])\n                particles[i]['position'] += v_i\n                particles[i]['velocity'] = v_i\n                particles[i]['position'] = np.clip(particles[i]['position'], -5.0, 5.0)\n            return particles\n\n        def de_update(population, f=0.5, cr=0.9):\n            for i in range(len(population)):\n                idxs = [idx for idx in range(len(population)) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant_vector = population[a]['position'] + f * (population[b]['position'] - population[c]['position'])\n                cross_points = np.random.rand(self.dim) < cr\n                trial_vector = np.where(cross_points, mutant_vector, population[i]['position'])\n                trial_vector = np.clip(trial_vector, -5.0, 5.0)\n                if func(trial_vector) < population[i]['fitness']:\n                    population[i]['position'] = trial_vector\n                    population[i]['fitness'] = func(trial_vector)\n            return population\n\n        particles = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'fitness': np.inf, 'p_best_pos': np.zeros(self.dim), 'p_best_fit': np.inf} for _ in range(self.population_size)]\n        g_best = {'position': np.zeros(self.dim), 'fitness': np.inf}\n\n        for _ in range(self.max_iter):\n            for i in range(len(particles)):\n                fitness_i = func(particles[i]['position'])\n                if fitness_i < particles[i]['fitness']:\n                    particles[i]['p_best_pos'] = particles[i]['position'].copy()\n                    particles[i]['p_best_fit'] = fitness_i\n                    if fitness_i < g_best['fitness']:\n                        g_best['position'] = particles[i]['position'].copy()\n                        g_best['fitness'] = fitness_i\n\n            particles = pso_update(particles, g_best)\n            particles = de_update(particles)\n\n        return g_best['position']", "name": "HybridPSODE", "description": "A hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) for global optimization in continuous search spaces.", "configspace": "", "generation": 0, "fitness": 0.25201711273790395, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7489185796830298, 0.7132168798919073, 0.756565792740737, 0.7114707798577063, 0.71196675731605, 0.7417669846337245, 0.7404301170315717, 0.7337583880847945, 0.6982824864921946, 0.4599122367885652, 0.5165266167433002, 0.1514477663009668, 0.4453142744025146, 0.357866363729046, 0.09134965541828499, 0.5041957066499528, 0.24615580567924256, 0.4998118312690929, 0.09010563317717546, 0.10612514511669358, 0.10528569909813346, 0.10854089980942805, 0.10018202125854148, 0.13510912721505064, 0.0916240054455113, 0.09307582429371253, 0.11925387797522013, 0.09702703089108689, 0.07543238636586647, 0.11444386429879538, 0.10344988923589593, 0.09637387620753779, 0.0924262434910248, 0.10381057145754202, 0.0936254781401078, 0.09433296301635796, 0.9531639176247405, 0.9596827749380248, 0.9388382030129522, 0.9342166986766882, 0.9259684399937288, 0.9551332775320346, 0.9608950543455865, 0.9719436376009436, 0.9406005364733963, 0.352420459037031, 0.21131057759478422, 0.45450845377742877, 0.4528896848637992, 0.20729524335661764, 0.16028739191528052, 0.3366497877651391, 0.262889930860294, 0.1881824499756778, 0.21688977583335212, 0.1491412536403448, 0.3077587535054528, 0.3490777738479749, 0.3235048213670927, 0.1812910076020824, 0.1746659272706942, 0.21527475290369524, 0.22639784699700305, 0.14549302981826817, 0.13487862956696395, 0.08897579488462948, 0.1348917735107007, 0.12246095431012305, 0.14570036313234846, 0.13997610924274773, 0.15178842742798937, 0.18293479871129437, 0.15816730771601817, 0.0946417598967233, 0.21736990705148962, 0.16154567202912384, 0.12333500089019545, 0.17185956093006804, 0.12492717423277044, 0.18518077075899542, 0.1280950999851186, 0.061968978112098005, 9.999999999998899e-05, 0.004414539242839743, 0.016089089009253432, 0.05944864638983349, 9.999999999998899e-05, 0.0076231378201002675, 9.999999999998899e-05, 9.999999999998899e-05, 0.09584899469010111, 0.06713661024114825, 0.10444854163364814, 0.08222269793177561, 0.01637874616892354, 0.06793432332419402, 0.07955506419858305, 0.10628233700408496, 0.11045882412123031, 0.07007601251852924, 0.02848990917489591, 0.1433654023965295, 0.06726290171771254, 0.1016337396317224, 0.06501361868342959, 0.0997720667079437, 0.05922365994098966, 0.05766060018801, 0.03929825585062685, 0.09959266835944947, 0.08385354723984528, 0.21696887187746183, 0.00582199930552707, 0.05804013616603221, 0.07368055125635042, 0.04413760728443772, 0.07726439675268215, 0.5270935061856675, 0.46803375956338467, 0.4609207798919752, 0.4496800403022787, 0.47630130289544004, 0.4680156105238218, 0.44554017462275974, 0.47254192119781324, 0.4923143630298309, 0.07232314144265617, 0.14995687515617373, 0.10184047550968045, 0.1020555661781124, 0.07856399001151493, 0.09221479374680819, 0.09237692000755271, 0.07837670343312897, 0.06775891203836804, 0.17582741026860227, 0.18785733642312086, 0.15907984671970066, 0.17499056488848597, 0.33313345958119356, 0.2207491310025359, 0.24947100102268183, 0.13752039276839445, 0.22009177443989492, 0.3139581622013863, 0.2793137287806843, 0.217796802767819, 0.21684521364644938, 0.32337862759850644, 0.3470849896671623, 0.30637923101606335, 0.3132891104321128, 0.3132121697647372, 0.19857661764058854, 0.2374654539700064, 0.2884164706586022, 0.25715071745607077, 0.3290822492173544, 0.19556955480776783, 0.2084940963669465, 0.16934969082312545, 0.1117450879422025, 0.1991842364936427, 0.19287723278681101, 0.19583140172120905, 0.22758423037546915, 0.26346712102456493, 0.23929417222896, 0.20170906340856587, 0.21107100525289502, 0.19117819803597846, 0.18264905926079777, 0.1769320994262651, 0.20701773803003776, 0.1928433837207335, 0.16743935231268936, 0.1931337722967441, 0.23527647502560245, 0.1820487357830084, 0.20879048342184459, 0.7627007976411206, 0.1933604628708463, 0.1563472938088144, 0.6379488475034519, 0.548487079117542, 0.700775538074196, 0.16736397826617944, 0.16641284182015315, 0.8513565882763169, 0.693920796588503, 0.155127453895188, 0.40011125159927474, 0.20406384147827739, 0.16449996909739528, 0.2053798861848405, 0.2002368390861453, 0.19713552268389767, 0.3790517014470388, 0.195985496831527, 0.18799132394075424, 0.20491575370087012, 0.19293001373861396, 0.18893978290040492, 0.1914954197408496, 0.21253406208419356, 0.18315526884223576, 0.18890145009068005, 0.0812667541162837, 0.08413030546619027, 0.08754378581560818, 0.07002738187257129, 0.07833860514053559, 0.08824351164324107, 0.09928395546200341, 0.08813345559595076, 0.13388524619680864]}, "mutation_prompt": null}
{"id": "3b51bde6-9e82-4e38-a57c-b3e3165fc1a0", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iter = budget // self.population_size\n\n    def __call__(self, func):\n        def pso_update(particles, g_best, w=0.5, c1=1.5, c2=1.5):\n            for i in range(len(particles)):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                v_i = w * particles[i]['velocity'] + c1 * r1 * (particles[i]['p_best_pos'] - particles[i]['position']) + c2 * r2 * (g_best['position'] - particles[i]['position'])\n                particles[i]['position'] += v_i\n                particles[i]['velocity'] = v_i\n                particles[i]['position'] = np.clip(particles[i]['position'], -5.0, 5.0)\n            return particles\n\n        def de_update(population, f=0.5, cr=0.9):\n            for i in range(len(population)):\n                idxs = [idx for idx in range(len(population)) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant_vector = population[a]['position'] + f * (population[b]['position'] - population[c]['position'])\n                cross_points = np.random.rand(self.dim) < cr\n                trial_vector = np.where(cross_points, mutant_vector, population[i]['position'])\n                trial_vector = np.clip(trial_vector, -5.0, 5.0)\n                if func(trial_vector) < population[i]['fitness']:\n                    population[i]['position'] = trial_vector\n                    population[i]['fitness'] = func(trial_vector)\n            return population\n\n        particles = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim), 'fitness': np.inf, 'p_best_pos': np.zeros(self.dim), 'p_best_fit': np.inf} for _ in range(self.population_size)]\n        g_best = {'position': np.zeros(self.dim), 'fitness': np.inf}\n\n        for _ in range(self.max_iter):\n            for i in range(len(particles)):\n                fitness_i = func(particles[i]['position'])\n                if fitness_i < particles[i]['fitness']:\n                    particles[i]['p_best_pos'] = particles[i]['position'].copy()\n                    particles[i]['p_best_fit'] = fitness_i\n                    if fitness_i < g_best['fitness']:\n                        g_best['position'] = particles[i]['position'].copy()\n                        g_best['fitness'] = fitness_i\n\n            particles = pso_update(particles, g_best)\n            particles = de_update(particles)\n\n        return g_best['position']", "name": "HybridPSODE", "description": "A hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) for global optimization in continuous search spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "72b1ed04-1a64-41fe-92c4-ee2ea61eaed0", "metadata": {"aucs": [0.7489185796830298, 0.7132168798919073, 0.756565792740737, 0.7114707798577063, 0.71196675731605, 0.7417669846337245, 0.7404301170315717, 0.7337583880847945, 0.6982824864921946, 0.4599122367885652, 0.5165266167433002, 0.1514477663009668, 0.4453142744025146, 0.357866363729046, 0.09134965541828499, 0.5041957066499528, 0.24615580567924256, 0.4998118312690929, 0.09010563317717546, 0.10612514511669358, 0.10528569909813346, 0.10854089980942805, 0.10018202125854148, 0.13510912721505064, 0.0916240054455113, 0.09307582429371253, 0.11925387797522013, 0.09702703089108689, 0.07543238636586647, 0.11444386429879538, 0.10344988923589593, 0.09637387620753779, 0.0924262434910248, 0.10381057145754202, 0.0936254781401078, 0.09433296301635796, 0.9531639176247405, 0.9596827749380248, 0.9388382030129522, 0.9342166986766882, 0.9259684399937288, 0.9551332775320346, 0.9608950543455865, 0.9719436376009436, 0.9406005364733963, 0.352420459037031, 0.21131057759478422, 0.45450845377742877, 0.4528896848637992, 0.20729524335661764, 0.16028739191528052, 0.3366497877651391, 0.262889930860294, 0.1881824499756778, 0.21688977583335212, 0.1491412536403448, 0.3077587535054528, 0.3490777738479749, 0.3235048213670927, 0.1812910076020824, 0.1746659272706942, 0.21527475290369524, 0.22639784699700305, 0.14549302981826817, 0.13487862956696395, 0.08897579488462948, 0.1348917735107007, 0.12246095431012305, 0.14570036313234846, 0.13997610924274773, 0.15178842742798937, 0.18293479871129437, 0.15816730771601817, 0.0946417598967233, 0.21736990705148962, 0.16154567202912384, 0.12333500089019545, 0.17185956093006804, 0.12492717423277044, 0.18518077075899542, 0.1280950999851186, 0.061968978112098005, 9.999999999998899e-05, 0.004414539242839743, 0.016089089009253432, 0.05944864638983349, 9.999999999998899e-05, 0.0076231378201002675, 9.999999999998899e-05, 9.999999999998899e-05, 0.09584899469010111, 0.06713661024114825, 0.10444854163364814, 0.08222269793177561, 0.01637874616892354, 0.06793432332419402, 0.07955506419858305, 0.10628233700408496, 0.11045882412123031, 0.07007601251852924, 0.02848990917489591, 0.1433654023965295, 0.06726290171771254, 0.1016337396317224, 0.06501361868342959, 0.0997720667079437, 0.05922365994098966, 0.05766060018801, 0.03929825585062685, 0.09959266835944947, 0.08385354723984528, 0.21696887187746183, 0.00582199930552707, 0.05804013616603221, 0.07368055125635042, 0.04413760728443772, 0.07726439675268215, 0.5270935061856675, 0.46803375956338467, 0.4609207798919752, 0.4496800403022787, 0.47630130289544004, 0.4680156105238218, 0.44554017462275974, 0.47254192119781324, 0.4923143630298309, 0.07232314144265617, 0.14995687515617373, 0.10184047550968045, 0.1020555661781124, 0.07856399001151493, 0.09221479374680819, 0.09237692000755271, 0.07837670343312897, 0.06775891203836804, 0.17582741026860227, 0.18785733642312086, 0.15907984671970066, 0.17499056488848597, 0.33313345958119356, 0.2207491310025359, 0.24947100102268183, 0.13752039276839445, 0.22009177443989492, 0.3139581622013863, 0.2793137287806843, 0.217796802767819, 0.21684521364644938, 0.32337862759850644, 0.3470849896671623, 0.30637923101606335, 0.3132891104321128, 0.3132121697647372, 0.19857661764058854, 0.2374654539700064, 0.2884164706586022, 0.25715071745607077, 0.3290822492173544, 0.19556955480776783, 0.2084940963669465, 0.16934969082312545, 0.1117450879422025, 0.1991842364936427, 0.19287723278681101, 0.19583140172120905, 0.22758423037546915, 0.26346712102456493, 0.23929417222896, 0.20170906340856587, 0.21107100525289502, 0.19117819803597846, 0.18264905926079777, 0.1769320994262651, 0.20701773803003776, 0.1928433837207335, 0.16743935231268936, 0.1931337722967441, 0.23527647502560245, 0.1820487357830084, 0.20879048342184459, 0.7627007976411206, 0.1933604628708463, 0.1563472938088144, 0.6379488475034519, 0.548487079117542, 0.700775538074196, 0.16736397826617944, 0.16641284182015315, 0.8513565882763169, 0.693920796588503, 0.155127453895188, 0.40011125159927474, 0.20406384147827739, 0.16449996909739528, 0.2053798861848405, 0.2002368390861453, 0.19713552268389767, 0.3790517014470388, 0.195985496831527, 0.18799132394075424, 0.20491575370087012, 0.19293001373861396, 0.18893978290040492, 0.1914954197408496, 0.21253406208419356, 0.18315526884223576, 0.18890145009068005, 0.0812667541162837, 0.08413030546619027, 0.08754378581560818, 0.07002738187257129, 0.07833860514053559, 0.08824351164324107, 0.09928395546200341, 0.08813345559595076, 0.13388524619680864]}, "mutation_prompt": null}
