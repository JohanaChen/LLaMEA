{"id": "2360875e-09a4-4d9f-9d15-adec907c2be9", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=20, pitch_adjust_rate=0.1, pitch_adjust_bandwidth=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.pitch_adjust_bandwidth = pitch_adjust_bandwidth\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def random_solution():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def pitch_adjust(solution):\n            indices = np.random.choice(self.dim, int(self.pitch_adjust_rate * self.dim), replace=False)\n            for idx in indices:\n                solution[idx] += np.random.uniform(-self.pitch_adjust_bandwidth, self.pitch_adjust_bandwidth)\n                solution[idx] = np.clip(solution[idx], self.lower_bound, self.upper_bound)\n            return solution\n\n        harmony_memory = [random_solution() for _ in range(self.harmony_memory_size)]\n        harmony_memory_fitness = [func(h) for h in harmony_memory]\n        \n        for _ in range(self.budget - self.harmony_memory_size):\n            new_solution = pitch_adjust(random_solution())\n            new_fitness = func(new_solution)\n            if new_fitness < max(harmony_memory_fitness):\n                idx_replace = np.argmax(harmony_memory_fitness)\n                harmony_memory[idx_replace] = new_solution\n                harmony_memory_fitness[idx_replace] = new_fitness\n        \n        best_solution_idx = np.argmin(harmony_memory_fitness)\n        return harmony_memory[best_solution_idx]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - a metaheuristic algorithm that mimics the process of musicians improvising harmonious musical performances, utilizing memory, pitch adjustment, and improvisation.", "configspace": "", "generation": 0, "fitness": 0.09139700656089161, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.1652403458305105, 0.18327240182986015, 0.17869548227943466, 0.20581664523230592, 0.14998428376798223, 0.20797211039707686, 0.16572758899583573, 0.2001642425843303, 0.17054525900925077, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06637058898163195, 0.04140106620840922, 0.05021461829754459, 0.043178254539336214, 0.044786745436038444, 0.057213589883299054, 0.05324024099923386, 0.050978038208369436, 0.044457216330247906, 0.032816515991129225, 0.031078940833445312, 0.04864217647984226, 0.03278525537172705, 0.03195042743126886, 0.03609477942237349, 0.03979987513449945, 0.027592242265428446, 0.03410589555686472, 0.08206829341914013, 0.08222182283463775, 0.07778821479647446, 0.08750999825439354, 0.08320684854550986, 0.08175454240165347, 0.0846599828951643, 0.07623199829387595, 0.09941388372847437, 0.09536318467767047, 0.0828911256067002, 0.06773569963602055, 0.08796924475809442, 0.05977153634442944, 0.05544930258409009, 0.05219682320146801, 0.09271732209335115, 0.06757499222277785, 0.12856892743232862, 0.1309456493517388, 0.11045128055639108, 0.13450353300274853, 0.14258367246706782, 0.11315357376563895, 0.11282552863653417, 0.16371804738783902, 0.13371395689060572, 9.999999999998899e-05, 0.00014455659438095125, 9.999999999998899e-05, 0.028408903973609068, 9.999999999998899e-05, 0.006258632013369292, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013600985617062689, 0.0008609271228068316, 0.00514803299797717, 0.012491913354306106, 9.999999999998899e-05, 0.005083457704173844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060887806607243466, 0.08497955924143608, 0.10058669640664719, 0.049894767794438355, 0.04169685337749818, 0.049022311948439534, 0.03149660970323598, 0.044605591954895996, 0.07090513299988765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0033150443963444465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1981484395089249, 0.1786706011185648, 0.17737920081296432, 0.22416757797620224, 0.19337461088227237, 0.1998796147075299, 0.20846245408009323, 0.19636143498073033, 0.20788104117620865, 0.041864941832867264, 0.03755881354919144, 0.04728052562730822, 0.04671376828722695, 0.04381369754653264, 0.049034889233619317, 0.045123655283970776, 0.03723065810989101, 0.049228815980541185, 0.14087839750674447, 0.1274108273051543, 0.15037399129645268, 0.14452239282219637, 0.1498875492578241, 0.1288746813878654, 0.1478177491857381, 0.13293434292108564, 0.13843957410031194, 0.16549862476947308, 0.16539360811264592, 0.16388355237827823, 0.16772256780991124, 0.16198667691578228, 0.17187987829384632, 0.15937142794489012, 0.1759127195879593, 0.16493764454999016, 0.11295423920878944, 0.10062608580860355, 0.10536215374144109, 0.11074091029333066, 0.10318973995136382, 0.10569987703268258, 0.11212770363585312, 0.10945747189206245, 0.10978181027208234, 0.1517641033628292, 0.16744865321817815, 0.15739620630899842, 0.1768633249747863, 0.1553115517483875, 0.15467627308479226, 0.15719991190185023, 0.15825235953617944, 0.15818630527837174, 0.1471444016211344, 0.14468069897132896, 0.14462814912103894, 0.14286449066455675, 0.15308869908532619, 0.1429241136097682, 0.15300549599708735, 0.15463695149598589, 0.16499779934502257, 0.16333752294456605, 0.16757381779843472, 0.19347036896996928, 0.15911782000432828, 0.21887002397275301, 0.16142641570705296, 0.1826508489337192, 0.18992466759085724, 0.19096614459998518, 0.2158628002902363, 0.16208835479158157, 0.2174962231762544, 0.17091597795304347, 0.19113431171523187, 0.20240896094845084, 0.20214070095105996, 0.1641083669830028, 0.17175598658077285, 0.18409364176831766, 0.18384625881866223, 0.17972932328510183, 0.18065890374352434, 0.18618248880676258, 0.17904638018861008, 0.1865716316910262, 0.18835151661694893, 0.1746859121949801, 0.05201446724676284, 0.04793723257944349, 0.0663647972660496, 0.05661979374489823, 0.05755920537207404, 0.05764244919948436, 0.05676047015995789, 0.0534686670041119, 0.04729982571746061]}, "mutation_prompt": null}
{"id": "adaf4378-1233-4bf0-8e39-e5e1e03d5329", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=20, pitch_adjust_rate=0.1, pitch_adjust_bandwidth=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.pitch_adjust_bandwidth = pitch_adjust_bandwidth\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def random_solution():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def pitch_adjust(solution):\n            indices = np.random.choice(self.dim, int(self.pitch_adjust_rate * self.dim), replace=False)\n            for idx in indices:\n                solution[idx] += np.random.uniform(-self.pitch_adjust_bandwidth, self.pitch_adjust_bandwidth)\n                solution[idx] = np.clip(solution[idx], self.lower_bound, self.upper_bound)\n            return solution\n\n        harmony_memory = [random_solution() for _ in range(self.harmony_memory_size)]\n        harmony_memory_fitness = [func(h) for h in harmony_memory]\n        \n        for _ in range(self.budget - self.harmony_memory_size):\n            new_solution = pitch_adjust(random_solution())\n            new_fitness = func(new_solution)\n            if new_fitness < max(harmony_memory_fitness):\n                idx_replace = np.argmax(harmony_memory_fitness)\n                harmony_memory[idx_replace] = new_solution\n                harmony_memory_fitness[idx_replace] = new_fitness\n        \n        best_solution_idx = np.argmin(harmony_memory_fitness)\n        return harmony_memory[best_solution_idx]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - a metaheuristic algorithm that mimics the process of musicians improvising harmonious musical performances, utilizing memory, pitch adjustment, and improvisation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2360875e-09a4-4d9f-9d15-adec907c2be9", "metadata": {"aucs": [0.1652403458305105, 0.18327240182986015, 0.17869548227943466, 0.20581664523230592, 0.14998428376798223, 0.20797211039707686, 0.16572758899583573, 0.2001642425843303, 0.17054525900925077, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06637058898163195, 0.04140106620840922, 0.05021461829754459, 0.043178254539336214, 0.044786745436038444, 0.057213589883299054, 0.05324024099923386, 0.050978038208369436, 0.044457216330247906, 0.032816515991129225, 0.031078940833445312, 0.04864217647984226, 0.03278525537172705, 0.03195042743126886, 0.03609477942237349, 0.03979987513449945, 0.027592242265428446, 0.03410589555686472, 0.08206829341914013, 0.08222182283463775, 0.07778821479647446, 0.08750999825439354, 0.08320684854550986, 0.08175454240165347, 0.0846599828951643, 0.07623199829387595, 0.09941388372847437, 0.09536318467767047, 0.0828911256067002, 0.06773569963602055, 0.08796924475809442, 0.05977153634442944, 0.05544930258409009, 0.05219682320146801, 0.09271732209335115, 0.06757499222277785, 0.12856892743232862, 0.1309456493517388, 0.11045128055639108, 0.13450353300274853, 0.14258367246706782, 0.11315357376563895, 0.11282552863653417, 0.16371804738783902, 0.13371395689060572, 9.999999999998899e-05, 0.00014455659438095125, 9.999999999998899e-05, 0.028408903973609068, 9.999999999998899e-05, 0.006258632013369292, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013600985617062689, 0.0008609271228068316, 0.00514803299797717, 0.012491913354306106, 9.999999999998899e-05, 0.005083457704173844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060887806607243466, 0.08497955924143608, 0.10058669640664719, 0.049894767794438355, 0.04169685337749818, 0.049022311948439534, 0.03149660970323598, 0.044605591954895996, 0.07090513299988765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0033150443963444465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1981484395089249, 0.1786706011185648, 0.17737920081296432, 0.22416757797620224, 0.19337461088227237, 0.1998796147075299, 0.20846245408009323, 0.19636143498073033, 0.20788104117620865, 0.041864941832867264, 0.03755881354919144, 0.04728052562730822, 0.04671376828722695, 0.04381369754653264, 0.049034889233619317, 0.045123655283970776, 0.03723065810989101, 0.049228815980541185, 0.14087839750674447, 0.1274108273051543, 0.15037399129645268, 0.14452239282219637, 0.1498875492578241, 0.1288746813878654, 0.1478177491857381, 0.13293434292108564, 0.13843957410031194, 0.16549862476947308, 0.16539360811264592, 0.16388355237827823, 0.16772256780991124, 0.16198667691578228, 0.17187987829384632, 0.15937142794489012, 0.1759127195879593, 0.16493764454999016, 0.11295423920878944, 0.10062608580860355, 0.10536215374144109, 0.11074091029333066, 0.10318973995136382, 0.10569987703268258, 0.11212770363585312, 0.10945747189206245, 0.10978181027208234, 0.1517641033628292, 0.16744865321817815, 0.15739620630899842, 0.1768633249747863, 0.1553115517483875, 0.15467627308479226, 0.15719991190185023, 0.15825235953617944, 0.15818630527837174, 0.1471444016211344, 0.14468069897132896, 0.14462814912103894, 0.14286449066455675, 0.15308869908532619, 0.1429241136097682, 0.15300549599708735, 0.15463695149598589, 0.16499779934502257, 0.16333752294456605, 0.16757381779843472, 0.19347036896996928, 0.15911782000432828, 0.21887002397275301, 0.16142641570705296, 0.1826508489337192, 0.18992466759085724, 0.19096614459998518, 0.2158628002902363, 0.16208835479158157, 0.2174962231762544, 0.17091597795304347, 0.19113431171523187, 0.20240896094845084, 0.20214070095105996, 0.1641083669830028, 0.17175598658077285, 0.18409364176831766, 0.18384625881866223, 0.17972932328510183, 0.18065890374352434, 0.18618248880676258, 0.17904638018861008, 0.1865716316910262, 0.18835151661694893, 0.1746859121949801, 0.05201446724676284, 0.04793723257944349, 0.0663647972660496, 0.05661979374489823, 0.05755920537207404, 0.05764244919948436, 0.05676047015995789, 0.0534686670041119, 0.04729982571746061]}, "mutation_prompt": null}
