{"id": "3ca8aaa5-6632-4f79-b43a-91dd8671a4a2", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def generate_random_solution():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def improvise_harmony(memory, bandwidth):\n            new_harmony = []\n            for i in range(self.dim):\n                if np.random.rand() < bandwidth:\n                    new_harmony.append(np.random.uniform(self.lower_bound, self.upper_bound))\n                else:\n                    idx = np.random.choice(len(memory))\n                    new_harmony.append(memory[idx][i])\n            return np.array(new_harmony)\n\n        harmony_memory = [generate_random_solution() for _ in range(10)]\n        bandwidth = 0.5\n\n        for _ in range(self.budget):\n            new_harmony = improvise_harmony(harmony_memory, bandwidth)\n            if func(new_harmony) < min(map(func, harmony_memory)):\n                idx = np.argmin(list(map(func, harmony_memory)))\n                harmony_memory[idx] = new_harmony\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "HarmonySearch", "description": "Harmony Search Algorithm for black-box optimization, where the main idea is to generate new candidate solutions by harmonizing promising solutions while incorporating random explorations.", "configspace": "", "generation": 0, "fitness": 0.066304512165853, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.1575086971218943, 0.14007628531093197, 0.14093832991133237, 0.1399661740336523, 0.1385058387292052, 0.16291570980554626, 0.11176481027152019, 0.16710713667245713, 0.1339887854209515, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03421156200115549, 0.031117210408167728, 0.02800484159231309, 0.02653333352254683, 0.023890701265396053, 0.02367739575282246, 0.033298985100126965, 0.03305269728163018, 0.028314703309547773, 0.017055920599760466, 0.021228101443722114, 0.010886718881606194, 0.04074587333098789, 0.018751957424557042, 0.027417875710841644, 0.018008495696555604, 0.010604369544629288, 0.00802390803389208, 0.08059151621662464, 0.05706203305194668, 0.05130705850532702, 0.060674844921776994, 0.059260739680625174, 0.06200915270546248, 0.055612768569706206, 0.05732673735459359, 0.057126392380484114, 0.06451938698200976, 0.02968915127054328, 0.06829654483542558, 0.05497888739393619, 0.047332839894688505, 0.02858801961382773, 0.04846992248241655, 0.022484441839983216, 0.07504500419938209, 0.11679284613357455, 0.08361974754045132, 0.08298901969550077, 0.079092643003012, 0.05451559032131281, 0.08543593519208115, 0.10357570311842934, 0.07971348405849799, 0.08006705729373131, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011109060722049091, 9.999999999998899e-05, 0.016894916424564643, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004286290919724878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001168121235737285, 0.004851714651323391, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03642732679523708, 9.999999999998899e-05, 0.06218349887468044, 9.999999999998899e-05, 0.013231022487995903, 0.058739210613372395, 0.03441659181887202, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1681484492530122, 0.15809027129583797, 0.1656409604019582, 0.16516743549484036, 0.1648560679801816, 0.15487477929859783, 0.15928757444143393, 0.17476032906835903, 0.1644599484078546, 0.04752502932515146, 0.033458336850381576, 0.024056965926864016, 0.013688854649691162, 0.033438461840294975, 0.02841088562095595, 0.04002572999369236, 0.02157696371903217, 0.03191474439566677, 0.10200161902291349, 0.0975851208321803, 0.10852129388564369, 0.11186076163609449, 0.09203444560694518, 0.1037814086079758, 0.10602562124445558, 0.09161233631319976, 0.1121084173135205, 0.13169244055170892, 0.134256569165482, 0.13961036899417156, 0.14305601001894064, 0.16089828665084405, 0.14854145438535993, 0.15209511148664367, 0.1294803675774432, 0.13915768826813768, 0.07072573393002801, 0.07630358328214137, 0.06442998046853499, 0.07942350728417769, 0.08009162489961785, 0.09832755493743373, 0.0879165484551202, 0.08219675322616837, 0.08139081094276368, 0.1339615475015593, 0.13872075232984338, 0.1371133308828807, 0.14712163486058394, 0.1368247890329527, 0.14309393164276496, 0.12644357161500253, 0.11344901761338022, 0.13772438476159277, 0.09583543246321369, 0.09084447122876316, 0.15918079943477947, 0.13665194943802383, 0.08232276927919424, 0.11849192012082999, 0.12338426364242716, 0.0586352579807764, 0.07015711821243276, 0.09097068625390181, 0.1272012902130718, 0.12933121192220565, 0.12354247350720837, 0.12078145690677755, 0.11367524888097247, 0.15049949516785532, 0.11556257873034248, 0.1171739739848261, 0.11337409509733776, 0.0756280950859658, 0.10609497992860029, 0.12496256428441344, 0.0916285437477663, 0.0949007968575557, 0.12449775383125894, 0.08979629827097813, 0.08429273488355271, 0.1631311563377965, 0.15859660624753957, 0.15786480158561755, 0.1563438963520537, 0.1625829540601279, 0.1462848577727962, 0.1551641382932426, 0.15865042937001395, 0.16509041900415, 0.04999876818809512, 0.032313535066600174, 0.05131388855506047, 0.0411238550946782, 0.038841619958022267, 0.03164389320261285, 0.03090360298846717, 0.031604848665552354, 0.04956128955811545]}, "mutation_prompt": null}
{"id": "abf292e7-889c-44a0-b711-5f3f8534baa6", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch(HarmonySearch):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_random_solution():\n            return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        def improvise_harmony(memory, bandwidth):\n            new_harmony = []\n            for i in range(self.dim):\n                if np.random.rand() < bandwidth:\n                    new_harmony.append(np.random.uniform(self.lower_bound, self.upper_bound))\n                else:\n                    idx = np.random.choice(len(memory))\n                    new_harmony.append(memory[idx][i])\n            return np.array(new_harmony)\n\n        harmony_memory = [generate_random_solution() for _ in range(10)]\n        base_bandwidth = 0.5\n\n        for _ in range(self.budget):\n            bandwidth = base_bandwidth * (1 - _ / self.budget)  # Adaptive bandwidth control\n            new_harmony = improvise_harmony(harmony_memory, bandwidth)\n            if func(new_harmony) < min(map(func, harmony_memory)):\n                idx = np.argmin(list(map(func, harmony_memory)))\n                harmony_memory[idx] = new_harmony\n\n        best_solution = min(harmony_memory, key=func)\n        return best_solution", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search Algorithm with Adaptive Bandwidth Control for black-box optimization.", "configspace": "", "generation": 1, "fitness": 0.06785402815850634, "feedback": "", "error": "", "parent_id": "3ca8aaa5-6632-4f79-b43a-91dd8671a4a2", "metadata": {"aucs": [0.14209610514282356, 0.1474958008978321, 0.13581510655165474, 0.15126233378669718, 0.10851506836216884, 0.18527264875597782, 0.11411907279596267, 0.1485531111783046, 0.1349004614410747, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04281271544043519, 0.0347526500598313, 0.030954884331233168, 0.020386467770396433, 0.027414682722607497, 0.017260296725155055, 0.02724062404731753, 0.03161730513500716, 0.02135633565525552, 0.02380945503788867, 0.019136768520194525, 0.032449191065092586, 0.040988764623670404, 0.043262095306945914, 0.02635764594881096, 0.02638067631001928, 0.013379378116077367, 0.01092666503078521, 0.07902458599861661, 0.058409534630129545, 0.056472642056742406, 0.06759884785956294, 0.06248919057908675, 0.062092840296133045, 0.06297398722478442, 0.05714511414174761, 0.05711672475499241, 0.05558472158626959, 0.03372866487525039, 0.025526837552391934, 0.04687313257622794, 0.03017057123833433, 0.033852163904161015, 0.05010891892320035, 0.014501818556122092, 0.0842803258948106, 0.11679284613357455, 0.09484952909538602, 0.08614862948327007, 0.10150616929796819, 0.08322182672450218, 0.08114597630904974, 0.10424566339870256, 0.0836661422872843, 0.07168801599300045, 9.999999999998899e-05, 0.007363198343257493, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007691015593832007, 0.011392354183218267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05289662249470384, 0.0212547590884411, 0.04045856303141515, 0.0036191696258152106, 9.999999999998899e-05, 0.058739210613372395, 0.03441659181887202, 0.009862089725204748, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1698862467239074, 0.14743440732904578, 0.20220028636803533, 0.15993634437866144, 0.1648560679801816, 0.15288627919231657, 0.1601525882388567, 0.1678778487705065, 0.16257972086495753, 0.04752502932515146, 0.02518737432191287, 0.024380850459925885, 0.02771280525022235, 0.037575808177778836, 0.03366405494616176, 0.04002572999369236, 0.02118890490410863, 0.028587012534028844, 0.10042259101252604, 0.11781702320416121, 0.12909044048893303, 0.10753538050544142, 0.08680697546935212, 0.11157257955646327, 0.10829209738216339, 0.1167898296445703, 0.11216156585508974, 0.12857852800132774, 0.1571386125395351, 0.131783545431164, 0.16061128439069594, 0.13860989081914432, 0.1858554186752227, 0.14000385941779203, 0.13423492788697367, 0.13921762263055681, 0.08554370575289683, 0.09553976016453836, 0.07661012860559391, 0.09453889043213382, 0.09510209270559411, 0.12171789201845074, 0.080398788228768, 0.06592117148261789, 0.0951718865909188, 0.1339615475015593, 0.1270707462492583, 0.14982830957272542, 0.12758388397066278, 0.12638195012456055, 0.14908357669125072, 0.12644357161500253, 0.11679243109437809, 0.1420681967019456, 0.0916114566318218, 0.09651568657949061, 0.15918079943477947, 0.1301339833693581, 0.019286688244701145, 0.11882352091684201, 0.12599889353407911, 0.023365089564887254, 0.12129079991265279, 0.0977961006720901, 0.13260671481456499, 0.11624954277405852, 0.1235496400013455, 0.1651227151962219, 0.11784984022468492, 0.15049949516785532, 0.10924847409044125, 0.1161423946493213, 0.13377081914104383, 0.09188976832678386, 0.10580502044894258, 0.12496256428441344, 0.1077464256508891, 0.10266761036912397, 0.13080724003747057, 0.10177795705628412, 0.07962214483072982, 0.15148090966509153, 0.16335425999561504, 0.1702381192172996, 0.1554548005664681, 0.16637103554620514, 0.17109225740964362, 0.15240823140753312, 0.1432350943895675, 0.17192475698104648, 0.04999876818809512, 0.02936748520500132, 0.04388979068683385, 0.0411238550946782, 0.041880677869935434, 0.029636726522344947, 0.04102829819581255, 0.029703974183584947, 0.04729628636566208]}, "mutation_prompt": null}
