{"id": "3c1a5ff9-552b-4d32-b72e-0c7b55b95e03", "solution": "import numpy as np\n\nclass BatDE:\n    def __init__(self, budget, dim, population_size=20, loudness=0.5, pulse_rate=0.5, f=0.5, cr=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.loudness = loudness\n        self.pulse_rate = pulse_rate\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, size=self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            population = [np.random.uniform(-5.0, 5.0, size=self.dim) for _ in range(self.population_size)]\n            velocities = np.zeros((self.population_size, self.dim))\n\n            for i, bat in enumerate(population):\n                if np.random.rand() > self.pulse_rate:\n                    frequencies = np.clip(np.random.normal(0.5, 0.1, self.dim), 0, 1)\n                    velocities[i] += (bat - best_solution) * frequencies\n\n                new_solution = bat + velocities[i]\n                if np.random.rand() < self.loudness and np.all(new_solution >= -5.0) and np.all(new_solution <= 5.0):\n                    trial_solution = bat + self.f * (best_solution - bat) + self.cr * (new_solution - population[np.random.randint(self.population_size)])\n                    trial_fitness = func(trial_solution)\n                    if trial_fitness < best_fitness:\n                        best_solution = trial_solution\n                        best_fitness = trial_fitness\n\n            self.loudness *= 0.9\n            self.pulse_rate *= 0.9\n\n        return best_solution", "name": "BatDE", "description": "Novel Hybrid Bat-Differential Evolution Metaheuristic for Black Box Optimization", "configspace": "", "generation": 0, "fitness": 0.04300381628895235, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.10489637116384087, 0.12115043845921614, 0.059680722466995184, 0.09536075919124465, 0.07802250768326213, 0.09160704603062209, 0.10715533949509681, 0.09152724448203242, 0.06266858793057906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010366999561781665, 0.0015153658279163373, 0.010478364319279398, 0.017339573089838245, 0.011543524722596676, 0.0033392880237063105, 0.0015920499953190337, 0.0238271841611728, 0.017935000570012738, 0.0181108793370649, 0.00043390941322707377, 0.0, 0.0, 0.0075983664223656655, 0.0, 0.0, 0.0, 0.0, 0.08277718519998745, 0.08881235032969126, 0.0407435444116212, 0.0637418862457988, 0.06460417191240175, 0.044620359773528406, 0.06863458374861275, 0.08260810292453147, 0.050771090041826894, 0.0, 0.0, 0.0, 0.0, 0.03288209768614547, 0.0132528742655732, 0.0, 0.01400371052997762, 0.0, 0.03984277406769465, 0.017484112949788355, 0.030706732023377703, 0.009937146557292165, 0.06765045816624682, 0.01704780797050731, 0.1449002326604324, 0.018435447784298398, 0.02077864960275544, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.15672685837706735, 0.11584550123461868, 0.12383033797696896, 0.13110958290360342, 0.10274816729641134, 0.10468359237536773, 0.14903601017384538, 0.10594380500193223, 0.11442973395975387, 0.04784489720726737, 0.012465327425262851, 0.0087662684628671, 0.007294302276985354, 0.0, 0.0, 0.021304875716066762, 0.01779334748350847, 0.0, 0.07089727211122177, 0.08623649060860039, 0.06161760644047465, 0.07931826669331876, 0.059189231421855726, 0.07423112476765603, 0.050490730264067474, 0.06998951764464745, 0.08104227535542086, 0.14475175253161654, 0.09721350848604993, 0.09847339642201203, 0.13192645229059108, 0.11587508461558538, 0.10068092812757679, 0.13004302592567962, 0.12300420958744163, 0.13734993666919615, 0.06758978702655882, 0.07221087299237483, 0.07013881734833027, 0.05973624354602858, 0.050828849412544175, 0.07897974172845101, 0.07379548645763734, 0.08295018204207971, 0.07802934009584483, 0.10306435726178975, 0.11252874516907918, 0.09756747828662593, 0.10220919930346795, 0.09906470758230368, 0.09332016687878864, 0.12963994450561334, 0.12262141760540513, 0.08539473358633276, 0.05270224361354414, 0.0, 0.13862770596348728, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.047075207947368636, 0.08692994663654696, 0.0839849232408455, 0.12175230694526018, 0.11173377489809022, 0.07760038507070766, 0.07050319138889338, 0.062164694009698374, 0.08313911198566948, 0.07083118140776534, 0.03957798628310871, 0.08052937449406872, 0.0650909487598541, 0.01806305712909073, 0.02672003953985147, 0.03374275436702878, 0.06188942811166831, 0.04782356836415491, 0.1504348722381803, 0.12230615413909762, 0.11855972646871238, 0.1625854716981805, 0.11803145694271389, 0.12456358843521431, 0.15293326930501572, 0.149738612991827, 0.1417218640678719, 0.03402201408097738, 0.022681364470340637, 0.03954855099742194, 0.010621501542834255, 0.027681213722106635, 0.03159182861950871, 0.014868315222896888, 0.007180343982791548, 0.01706400946825959]}, "mutation_prompt": null}
{"id": "3ee61f4e-40a1-4690-8e8f-a81eb37bb53e", "solution": "import numpy as np\n\nclass EnhancedBatDE(BatDE):\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, size=self.dim)\n        best_fitness = func(best_solution)\n\n        alpha = 0.9\n        beta = 0.9\n\n        for _ in range(self.budget):\n            population = [np.random.uniform(-5.0, 5.0, size=self.dim) for _ in range(self.population_size)]\n            velocities = np.zeros((self.population_size, self.dim))\n\n            for i, bat in enumerate(population):\n                if np.random.rand() > self.pulse_rate:\n                    frequencies = np.clip(np.random.normal(0.5, 0.1, self.dim), 0, 1)\n                    velocities[i] += (bat - best_solution) * frequencies\n\n                new_solution = bat + velocities[i]\n                if np.random.rand() < self.loudness and np.all(new_solution >= -5.0) and np.all(new_solution <= 5.0):\n                    trial_solution = bat + self.f * (best_solution - bat) + self.cr * (new_solution - population[np.random.randint(self.population_size)])\n                    trial_fitness = func(trial_solution)\n                    if trial_fitness < best_fitness:\n                        best_solution = trial_solution\n                        best_fitness = trial_fitness\n\n            self.loudness *= alpha\n            self.pulse_rate *= beta\n\n        return best_solution", "name": "EnhancedBatDE", "description": "Enhanced BatDE algorithm with adaptive loudness and pulse rate control for improved convergence speed and accuracy.", "configspace": "", "generation": 1, "fitness": 0.04300381628895235, "feedback": "", "error": "", "parent_id": "3c1a5ff9-552b-4d32-b72e-0c7b55b95e03", "metadata": {"aucs": [0.10489637116384087, 0.12115043845921614, 0.059680722466995184, 0.09536075919124465, 0.07802250768326213, 0.09160704603062209, 0.10715533949509681, 0.09152724448203242, 0.06266858793057906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010366999561781665, 0.0015153658279163373, 0.010478364319279398, 0.017339573089838245, 0.011543524722596676, 0.0033392880237063105, 0.0015920499953190337, 0.0238271841611728, 0.017935000570012738, 0.0181108793370649, 0.00043390941322707377, 0.0, 0.0, 0.0075983664223656655, 0.0, 0.0, 0.0, 0.0, 0.08277718519998745, 0.08881235032969126, 0.0407435444116212, 0.0637418862457988, 0.06460417191240175, 0.044620359773528406, 0.06863458374861275, 0.08260810292453147, 0.050771090041826894, 0.0, 0.0, 0.0, 0.0, 0.03288209768614547, 0.0132528742655732, 0.0, 0.01400371052997762, 0.0, 0.03984277406769465, 0.017484112949788355, 0.030706732023377703, 0.009937146557292165, 0.06765045816624682, 0.01704780797050731, 0.1449002326604324, 0.018435447784298398, 0.02077864960275544, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.15672685837706735, 0.11584550123461868, 0.12383033797696896, 0.13110958290360342, 0.10274816729641134, 0.10468359237536773, 0.14903601017384538, 0.10594380500193223, 0.11442973395975387, 0.04784489720726737, 0.012465327425262851, 0.0087662684628671, 0.007294302276985354, 0.0, 0.0, 0.021304875716066762, 0.01779334748350847, 0.0, 0.07089727211122177, 0.08623649060860039, 0.06161760644047465, 0.07931826669331876, 0.059189231421855726, 0.07423112476765603, 0.050490730264067474, 0.06998951764464745, 0.08104227535542086, 0.14475175253161654, 0.09721350848604993, 0.09847339642201203, 0.13192645229059108, 0.11587508461558538, 0.10068092812757679, 0.13004302592567962, 0.12300420958744163, 0.13734993666919615, 0.06758978702655882, 0.07221087299237483, 0.07013881734833027, 0.05973624354602858, 0.050828849412544175, 0.07897974172845101, 0.07379548645763734, 0.08295018204207971, 0.07802934009584483, 0.10306435726178975, 0.11252874516907918, 0.09756747828662593, 0.10220919930346795, 0.09906470758230368, 0.09332016687878864, 0.12963994450561334, 0.12262141760540513, 0.08539473358633276, 0.05270224361354414, 0.0, 0.13862770596348728, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.047075207947368636, 0.08692994663654696, 0.0839849232408455, 0.12175230694526018, 0.11173377489809022, 0.07760038507070766, 0.07050319138889338, 0.062164694009698374, 0.08313911198566948, 0.07083118140776534, 0.03957798628310871, 0.08052937449406872, 0.0650909487598541, 0.01806305712909073, 0.02672003953985147, 0.03374275436702878, 0.06188942811166831, 0.04782356836415491, 0.1504348722381803, 0.12230615413909762, 0.11855972646871238, 0.1625854716981805, 0.11803145694271389, 0.12456358843521431, 0.15293326930501572, 0.149738612991827, 0.1417218640678719, 0.03402201408097738, 0.022681364470340637, 0.03954855099742194, 0.010621501542834255, 0.027681213722106635, 0.03159182861950871, 0.014868315222896888, 0.007180343982791548, 0.01706400946825959]}, "mutation_prompt": null}
