{"id": "d8d01d6e-a3e7-42ee-988b-0b1531015c14", "solution": "import numpy as np\n\nclass PSO_ADE_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, pso_iter=100, de_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.pso_iter = pso_iter\n        self.de_iter = de_iter\n\n    def __call__(self, func):\n        def fitness(x):\n            return func(x)\n        \n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n        \n        def initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        swarm = initialize_swarm()\n        best_position = swarm[np.argmin([fitness(p) for p in swarm])]\n        \n        for _ in range(self.pso_iter):\n            for i in range(self.swarm_size):\n                new_position = swarm[i] + np.random.uniform() * (best_position - swarm[i])\n                new_position = within_bounds(new_position)\n                \n                if fitness(new_position) < fitness(swarm[i]):\n                    swarm[i] = new_position\n                    if fitness(new_position) < fitness(best_position):\n                        best_position = new_position\n        \n        for _ in range(self.de_iter):\n            for i in range(self.swarm_size):\n                mutant = np.clip(swarm[np.random.choice(self.swarm_size)] + np.random.uniform(-1, 1) * (swarm[np.random.choice(self.swarm_size)] - swarm[np.random.choice(self.swarm_size)]), -5.0, 5.0)\n                trial = swarm[i] + np.random.uniform() * (mutant - swarm[i])\n                trial = within_bounds(trial)\n                \n                if fitness(trial) < fitness(swarm[i]):\n                    swarm[i] = trial\n                    if fitness(trial) < fitness(best_position):\n                        best_position = trial\n\n        return best_position", "name": "PSO_ADE_Optimizer", "description": "Novel algorithm combining Particle Swarm Optimization (PSO) with Adaptive Differential Evolution (ADE) for black box optimization in continuous search spaces.", "configspace": "", "generation": 0, "fitness": 0.09117610442169123, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.24701560766078745, 0.14393074725791954, 0.397081506579428, 0.10391652063154655, 0.07782134801389462, 0.14092596510319122, 0.12693284433938856, 0.12868369875355168, 0.10628047018793896, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04580707624088931, 0.05093562990241485, 0.0640914478320247, 0.06752802500204746, 0.04934761084318651, 0.0906189378834048, 0.07706179506207755, 0.09499392060976619, 0.05978054258627541, 0.05063655017415836, 0.05680474724105389, 0.025372903443672823, 0.07661982426190572, 0.02593558963110043, 0.014776422948545198, 0.04475126478595137, 0.023204512583743564, 0.0028757118628657263, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.06662377844508194, 0.08585276196707292, 0.062156154294299104, 0.06240644050927935, 0.05922278489807509, 0.04657482677466085, 9.999999999998899e-05, 0.021324146336905825, 9.999999999998899e-05, 0.17114492121519598, 0.09051464894303296, 0.17072389445599623, 0.11348780997147623, 0.14530434119307378, 0.04593268647841264, 0.05175190177077271, 0.1216378880128074, 0.0700861018212443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04123539374204743, 9.999999999998899e-05, 0.11368997536602343, 9.999999999998899e-05, 9.999999999998899e-05, 0.14320967897304016, 0.05757422885691432, 0.06752086675876001, 0.08650071060500564, 0.06212688861165494, 0.014187709595063103, 0.12432209173717279, 0.025032741804458025, 0.005573721643460483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05381767224400136, 0.02303561647002006, 0.08907693836037345, 0.05555777336887768, 9.999999999998899e-05, 9.999999999998899e-05, 0.13595423072281188, 0.05238781369931245, 0.035860037124098354, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00036037195856020166, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2925668244645051, 0.2061407806873624, 0.24837009650385855, 0.1632278566702251, 0.15779945156943376, 0.12461969540265672, 0.2739523052307735, 0.2811354006793271, 0.22783081421057927, 0.02340735413034345, 0.0017597049244428842, 9.999999999998899e-05, 0.041223452501455315, 0.04417969720729675, 0.11998125628005296, 0.05812973807906141, 0.06350892504117633, 0.07326248305452043, 0.13551519431608927, 0.10283724095828162, 0.08832835652313731, 0.12259471751394524, 0.16613738169692627, 0.14047374596259454, 0.13869366619845336, 0.10996423351248852, 0.16325026545927335, 0.14323452232518397, 0.17036849131744458, 0.17105217753719704, 0.24627444624845607, 0.1896951469039997, 0.21244569861586737, 0.1793091587334662, 0.22044741762805053, 0.14914491376569328, 0.07426815304026602, 0.11108269088285339, 0.08765640209282122, 0.12052783231945463, 0.14026897828759988, 0.14101978505582125, 0.11778169345702949, 0.13590965693068702, 0.09350278011150259, 0.23585900476915045, 0.17853104554534527, 0.1580690349886913, 0.21436075735522353, 0.2798462307119536, 0.19154733747113906, 0.23990932898063722, 0.2119359962876406, 0.20703913333530932, 0.16584853079445672, 0.16002197768132098, 0.15517396413783102, 0.16398627937016774, 0.17296347560952963, 0.16159587018834887, 0.1587384925065226, 0.16145875794721176, 0.15551777534151356, 0.16125758822230474, 0.1693196965279702, 0.0820295318201828, 0.16685749244979775, 0.1682913442158741, 0.10388339286352255, 0.11330399215483267, 0.11285080698266114, 0.1561371367253418, 0.22647184176012602, 0.14024499415554237, 0.15321818105234397, 0.07896694943205351, 0.080692469232017, 0.06169077612765739, 0.08298581531462934, 0.08570830028744858, 0.11194811043875597, 0.18761587702435645, 0.1955802789274731, 0.22034130941861663, 0.18194518928428904, 0.1911658857112335, 0.21518107666480557, 0.18064032915983064, 0.1726242014694611, 0.23668996315978486, 0.08058818217548491, 0.05428865537490635, 0.06972475837491288, 0.07010766248433897, 0.05950716643987086, 0.07906614150357616, 0.06783091576318345, 0.0677479544685683, 0.07207418379350894]}, "mutation_prompt": null}
{"id": "a9c0bed5-b55e-48b0-8bcc-30465329ec8c", "solution": "import numpy as np\n\nclass PSO_ADE_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, pso_iter=100, de_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.pso_iter = pso_iter\n        self.de_iter = de_iter\n\n    def __call__(self, func):\n        def fitness(x):\n            return func(x)\n        \n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n        \n        def initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        swarm = initialize_swarm()\n        best_position = swarm[np.argmin([fitness(p) for p in swarm])]\n        \n        for _ in range(self.pso_iter):\n            for i in range(self.swarm_size):\n                new_position = swarm[i] + np.random.uniform() * (best_position - swarm[i])\n                new_position = within_bounds(new_position)\n                \n                if fitness(new_position) < fitness(swarm[i]):\n                    swarm[i] = new_position\n                    if fitness(new_position) < fitness(best_position):\n                        best_position = new_position\n        \n        for _ in range(self.de_iter):\n            for i in range(self.swarm_size):\n                mutant = np.clip(swarm[np.random.choice(self.swarm_size)] + np.random.uniform(-1, 1) * (swarm[np.random.choice(self.swarm_size)] - swarm[np.random.choice(self.swarm_size)]), -5.0, 5.0)\n                trial = swarm[i] + np.random.uniform() * (mutant - swarm[i])\n                trial = within_bounds(trial)\n                \n                if fitness(trial) < fitness(swarm[i]):\n                    swarm[i] = trial\n                    if fitness(trial) < fitness(best_position):\n                        best_position = trial\n\n        return best_position", "name": "PSO_ADE_Optimizer", "description": "Novel algorithm combining Particle Swarm Optimization (PSO) with Adaptive Differential Evolution (ADE) for black box optimization in continuous search spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d8d01d6e-a3e7-42ee-988b-0b1531015c14", "metadata": {"aucs": [0.24701560766078745, 0.14393074725791954, 0.397081506579428, 0.10391652063154655, 0.07782134801389462, 0.14092596510319122, 0.12693284433938856, 0.12868369875355168, 0.10628047018793896, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04580707624088931, 0.05093562990241485, 0.0640914478320247, 0.06752802500204746, 0.04934761084318651, 0.0906189378834048, 0.07706179506207755, 0.09499392060976619, 0.05978054258627541, 0.05063655017415836, 0.05680474724105389, 0.025372903443672823, 0.07661982426190572, 0.02593558963110043, 0.014776422948545198, 0.04475126478595137, 0.023204512583743564, 0.0028757118628657263, 0.045179741609489454, 0.04219942533172094, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.06662377844508194, 0.08585276196707292, 0.062156154294299104, 0.06240644050927935, 0.05922278489807509, 0.04657482677466085, 9.999999999998899e-05, 0.021324146336905825, 9.999999999998899e-05, 0.17114492121519598, 0.09051464894303296, 0.17072389445599623, 0.11348780997147623, 0.14530434119307378, 0.04593268647841264, 0.05175190177077271, 0.1216378880128074, 0.0700861018212443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04123539374204743, 9.999999999998899e-05, 0.11368997536602343, 9.999999999998899e-05, 9.999999999998899e-05, 0.14320967897304016, 0.05757422885691432, 0.06752086675876001, 0.08650071060500564, 0.06212688861165494, 0.014187709595063103, 0.12432209173717279, 0.025032741804458025, 0.005573721643460483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05381767224400136, 0.02303561647002006, 0.08907693836037345, 0.05555777336887768, 9.999999999998899e-05, 9.999999999998899e-05, 0.13595423072281188, 0.05238781369931245, 0.035860037124098354, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00036037195856020166, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2925668244645051, 0.2061407806873624, 0.24837009650385855, 0.1632278566702251, 0.15779945156943376, 0.12461969540265672, 0.2739523052307735, 0.2811354006793271, 0.22783081421057927, 0.02340735413034345, 0.0017597049244428842, 9.999999999998899e-05, 0.041223452501455315, 0.04417969720729675, 0.11998125628005296, 0.05812973807906141, 0.06350892504117633, 0.07326248305452043, 0.13551519431608927, 0.10283724095828162, 0.08832835652313731, 0.12259471751394524, 0.16613738169692627, 0.14047374596259454, 0.13869366619845336, 0.10996423351248852, 0.16325026545927335, 0.14323452232518397, 0.17036849131744458, 0.17105217753719704, 0.24627444624845607, 0.1896951469039997, 0.21244569861586737, 0.1793091587334662, 0.22044741762805053, 0.14914491376569328, 0.07426815304026602, 0.11108269088285339, 0.08765640209282122, 0.12052783231945463, 0.14026897828759988, 0.14101978505582125, 0.11778169345702949, 0.13590965693068702, 0.09350278011150259, 0.23585900476915045, 0.17853104554534527, 0.1580690349886913, 0.21436075735522353, 0.2798462307119536, 0.19154733747113906, 0.23990932898063722, 0.2119359962876406, 0.20703913333530932, 0.16584853079445672, 0.16002197768132098, 0.15517396413783102, 0.16398627937016774, 0.17296347560952963, 0.16159587018834887, 0.1587384925065226, 0.16145875794721176, 0.15551777534151356, 0.16125758822230474, 0.1693196965279702, 0.0820295318201828, 0.16685749244979775, 0.1682913442158741, 0.10388339286352255, 0.11330399215483267, 0.11285080698266114, 0.1561371367253418, 0.22647184176012602, 0.14024499415554237, 0.15321818105234397, 0.07896694943205351, 0.080692469232017, 0.06169077612765739, 0.08298581531462934, 0.08570830028744858, 0.11194811043875597, 0.18761587702435645, 0.1955802789274731, 0.22034130941861663, 0.18194518928428904, 0.1911658857112335, 0.21518107666480557, 0.18064032915983064, 0.1726242014694611, 0.23668996315978486, 0.08058818217548491, 0.05428865537490635, 0.06972475837491288, 0.07010766248433897, 0.05950716643987086, 0.07906614150357616, 0.06783091576318345, 0.0677479544685683, 0.07207418379350894]}, "mutation_prompt": null}
