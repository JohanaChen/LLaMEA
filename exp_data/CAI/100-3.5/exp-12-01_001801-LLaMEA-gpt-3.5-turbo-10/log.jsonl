{"id": "07bcc644-a877-4360-9b06-526ec91822cf", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def __call__(self, func):\n        def attractiveness(r):\n            return self.beta0 * np.exp(-self.gamma * r**2)\n\n        def distance(x, y):\n            return np.linalg.norm(x - y)\n\n        def levy_flight(dim):\n            sigma = (np.gamma(1 + self.alpha) * np.sin(np.pi * self.alpha / 2) / np.gamma((1 + self.alpha) / 2) / 2**((self.alpha - 1) / 2))**(1 / self.alpha)\n            u = np.random.normal(0, sigma, dim)\n            v = np.random.normal(0, 1, dim)\n            step = u / np.abs(v)**(1 / self.alpha)\n            return step\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if fitness[i] < fitness[j]:\n                        r = distance(population[i], population[j])\n                        beta = attractiveness(r)\n                        population[i] += beta * levy_flight(self.dim) + np.random.normal(0, 1, self.dim)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        fitness[i] = func(population[i])\n                        if fitness[i] < fitness[best_idx]:\n                            best_idx = i\n\n        return population[best_idx]", "name": "FireflyAlgorithm", "description": "An algorithm inspired by the behavior of fireflies in nature to guide the optimization process towards better solutions by adapting the attractiveness and distance-based movement.", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "An exception occured: Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 35, in __call__\n  File \"<string>\", line 19, in levy_flight\n  File \"/data/hyin/conda_envs/llm/lib/python3.8/site-packages/numpy/__init__.py\", line 320, in __getattr__\n    raise AttributeError(\"module {!r} has no attribute \"\nAttributeError: module 'numpy' has no attribute 'gamma'\n.", "error": "AttributeError(\"module 'numpy' has no attribute 'gamma'\")Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 35, in __call__\n  File \"<string>\", line 19, in levy_flight\n  File \"/data/hyin/conda_envs/llm/lib/python3.8/site-packages/numpy/__init__.py\", line 320, in __getattr__\n    raise AttributeError(\"module {!r} has no attribute \"\nAttributeError: module 'numpy' has no attribute 'gamma'\n", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "acf110b8-2791-4d74-90b1-7b09675f3e5c", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim, alpha=0.2, beta0=1.0, gamma=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def __call__(self, func):\n        def attractiveness(r):\n            return self.beta0 * np.exp(-self.gamma * r**2)\n\n        def distance(x, y):\n            return np.linalg.norm(x - y)\n\n        def levy_flight(dim):\n            sigma = (np.gamma(1 + self.alpha) * np.sin(np.pi * self.alpha / 2) / np.gamma((1 + self.alpha) / 2) / 2**((self.alpha - 1) / 2))**(1 / self.alpha)\n            u = np.random.normal(0, sigma, dim)\n            v = np.random.normal(0, 1, dim)\n            step = u / np.abs(v)**(1 / self.alpha)\n            return step\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if fitness[i] < fitness[j]:\n                        r = distance(population[i], population[j])\n                        beta = attractiveness(r)\n                        population[i] += beta * levy_flight(self.dim) + np.random.normal(0, 1, self.dim)\n                        population[i] = np.clip(population[i], -5.0, 5.0)\n                        fitness[i] = func(population[i])\n                        if fitness[i] < fitness[best_idx]:\n                            best_idx = i\n\n        return population[best_idx]", "name": "FireflyAlgorithm", "description": "An algorithm inspired by the behavior of fireflies in nature to guide the optimization process towards better solutions by adapting the attractiveness and distance-based movement.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "07bcc644-a877-4360-9b06-526ec91822cf", "metadata": {}, "mutation_prompt": null}
