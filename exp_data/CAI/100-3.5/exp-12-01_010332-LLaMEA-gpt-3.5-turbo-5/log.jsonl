{"id": "272d4efa-e033-4c6e-b78b-3bb980dc3a37", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, w=0.5, c1=1.5, c2=1.5, initial_temp=10.0, cooling_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best = swarm.copy()\n        global_best = personal_best[np.argmin([cost_function(p) for p in personal_best])]\n        temperature = self.initial_temp\n\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = self.w * velocities[i] + self.c1 * r1 * (personal_best[i] - swarm[i]) + self.c2 * r2 * (global_best - swarm[i])\n                new_position = swarm[i] + velocities[i]\n                if cost_function(new_position) < cost_function(swarm[i]):\n                    swarm[i] = new_position\n                    personal_best[i] = new_position\n                    if cost_function(new_position) < cost_function(global_best):\n                        global_best = new_position\n                else:\n                    acceptance_probability = np.exp(-(cost_function(new_position) - cost_function(swarm[i])) / temperature)\n                    if np.random.rand() < acceptance_probability:\n                        swarm[i] = new_position\n\n            temperature *= self.cooling_rate\n\n        return global_best", "name": "PSO_SA_Optimizer", "description": "Novel algorithm that combines Particle Swarm Optimization (PSO) with Simulated Annealing (SA) to explore and exploit the search space efficiently.", "configspace": "", "generation": 0, "fitness": 0.22707333874388344, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7875156261647402, 0.7945214520871468, 0.8233350909241348, 0.7329884054946563, 0.7649805659129854, 0.8088150308471249, 0.7538742752479893, 0.7984145860337354, 0.7704963115628963, 0.07040264664330209, 0.028472180940059655, 9.999999999998899e-05, 0.20210405203282078, 0.0001601419192879261, 0.010865666637034366, 9.999999999998899e-05, 0.12376208273991829, 0.06063149103239451, 0.07864115219225565, 0.048180453458152805, 0.09046826696348653, 0.07659695553178958, 0.04852636439643443, 0.0946701789062554, 0.05924233102036036, 0.0651326692394637, 0.08345241192562192, 0.07576340754736388, 0.07033434138548122, 0.08050920346930612, 0.13341500906786474, 0.09317022669500241, 0.07616233821752871, 0.06731946783446452, 0.027802002484662247, 0.015032997876123444, 0.9740377010910506, 0.9905869292876984, 0.9863832880650728, 0.9002877656464191, 0.9902384669967204, 0.9608650671712685, 0.9898037400651075, 0.982940466406594, 0.9788582193476214, 0.12486515774818485, 0.08873027419248969, 0.11533020600989097, 0.10273465453416808, 0.166361091657529, 0.14712666694672039, 0.23863372594501475, 0.17768999768137617, 0.09420412150710566, 0.22206031620305444, 0.11505912547360075, 0.11838545684069668, 0.16276950799451173, 0.1675978698640611, 0.20233479698795143, 0.22673191138182247, 0.1625145165495736, 0.15354621887220032, 0.19557488335886686, 0.11866088296164945, 0.1245155770112133, 0.1092853063975554, 0.16026207311032648, 0.5451557092810848, 0.22604880682729211, 0.34750587700040136, 0.1271183645793761, 0.1674329821828653, 0.09063335351374735, 0.1285531663714351, 0.1314648012537677, 0.17535466844345504, 0.12348148815295468, 0.11100008700557651, 0.5405979143038645, 0.28594147723443886, 0.016223727267233312, 0.030020481233077767, 0.009355257954960505, 0.046881452224001974, 0.053120549147935514, 0.03375492289359905, 0.016407648959331667, 9.999999999998899e-05, 0.10864438649360197, 0.10858637933213888, 0.07242924681255813, 0.2833925524253583, 0.07069854727908642, 0.07443403604968934, 0.02743408587226681, 0.1445434131980825, 0.06735128900927734, 0.10544942551458991, 9.999999999998899e-05, 0.11359484966885225, 0.2029803975223332, 0.22103517007329632, 0.17728809352132047, 0.09473702324688438, 0.06872324074719782, 0.07059941577627649, 0.0074177328543729715, 0.16046743455293677, 0.12032972611596615, 0.22747268943909393, 0.08632450057946661, 0.1811103616623605, 0.20786160460908631, 0.1572120620029458, 0.10521084450742835, 0.11754288963263171, 0.573476027195061, 0.6004539197688982, 0.492314491183944, 0.40715314072078634, 0.4409123579395575, 0.4360291834008525, 0.5432300022063559, 0.5658745509997596, 0.5199784069980898, 0.08603076195749704, 0.04857572304613422, 0.03522123991170667, 0.07988341898516449, 0.08997599577981019, 0.11490704212117053, 0.0785241068462792, 0.08719326007806472, 0.06390364899905965, 0.13418780476878034, 0.19682163729218205, 0.1388720070557714, 0.21846885479020395, 0.18718455208660412, 0.16342545153425458, 0.1971433759261123, 0.1386352582105137, 0.21409271552379072, 0.1297558106921004, 0.21819751664488196, 0.183233396874526, 0.24521801999609816, 0.2418950820877367, 0.2357420581563534, 0.2107438747689363, 0.2466830579352033, 0.26364848489667114, 0.16323630914947607, 0.04073116113278796, 0.21244215897512864, 0.1664638104494316, 0.2080925030884675, 0.2009735854895235, 0.11108509384595966, 0.25346397603868687, 0.20241239933507027, 0.223405948403251, 0.1709754934826746, 0.182151327324366, 0.26548236889117416, 0.26423840928462783, 0.17236912363964363, 0.21573842968109502, 0.2030792854585699, 0.203264247646185, 0.1822307182079388, 0.19572069089617505, 0.17315007818204264, 0.18834248051361846, 0.18516722939907349, 0.16128823868995457, 0.196902670634163, 0.17349309502425858, 0.19775575778536825, 0.1689843189386786, 0.12406857768925328, 0.15022184186275245, 0.17210652394274517, 0.19952019564339984, 0.19827137039039933, 0.09908041685101943, 0.16861815682788472, 0.841795865475922, 0.8455013166093565, 0.15471911497719337, 0.7340700336590521, 0.19978672573360556, 0.16619617599116243, 0.20255896271406248, 0.10538887881925108, 0.10315737996995034, 0.4307413547561165, 0.1906358971294685, 0.18759331955761882, 0.18747109912777293, 0.19515745195531686, 0.18583567328197648, 0.19692074205889498, 0.19549114672256862, 0.18310171498259786, 0.18572097755771666, 0.09308541566986983, 0.03187110329420595, 0.08427844491852088, 0.06413114890313831, 0.06055490868411528, 0.09318655241961482, 0.09322109085615615, 0.06498883421605917, 0.0945061063953192]}, "mutation_prompt": null}
{"id": "da411c43-2603-4a6a-b746-f17ff3b1fd69", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, w=0.5, c1=1.5, c2=1.5, initial_temp=10.0, cooling_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best = swarm.copy()\n        global_best = personal_best[np.argmin([cost_function(p) for p in personal_best])]\n        temperature = self.initial_temp\n\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = self.w * velocities[i] + self.c1 * r1 * (personal_best[i] - swarm[i]) + self.c2 * r2 * (global_best - swarm[i])\n                new_position = swarm[i] + velocities[i]\n                if cost_function(new_position) < cost_function(swarm[i]):\n                    swarm[i] = new_position\n                    personal_best[i] = new_position\n                    if cost_function(new_position) < cost_function(global_best):\n                        global_best = new_position\n                else:\n                    acceptance_probability = np.exp(-(cost_function(new_position) - cost_function(swarm[i])) / temperature)\n                    if np.random.rand() < acceptance_probability:\n                        swarm[i] = new_position\n\n            temperature *= self.cooling_rate\n\n        return global_best", "name": "PSO_SA_Optimizer", "description": "Novel algorithm that combines Particle Swarm Optimization (PSO) with Simulated Annealing (SA) to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "272d4efa-e033-4c6e-b78b-3bb980dc3a37", "metadata": {"aucs": [0.7875156261647402, 0.7945214520871468, 0.8233350909241348, 0.7329884054946563, 0.7649805659129854, 0.8088150308471249, 0.7538742752479893, 0.7984145860337354, 0.7704963115628963, 0.07040264664330209, 0.028472180940059655, 9.999999999998899e-05, 0.20210405203282078, 0.0001601419192879261, 0.010865666637034366, 9.999999999998899e-05, 0.12376208273991829, 0.06063149103239451, 0.07864115219225565, 0.048180453458152805, 0.09046826696348653, 0.07659695553178958, 0.04852636439643443, 0.0946701789062554, 0.05924233102036036, 0.0651326692394637, 0.08345241192562192, 0.07576340754736388, 0.07033434138548122, 0.08050920346930612, 0.13341500906786474, 0.09317022669500241, 0.07616233821752871, 0.06731946783446452, 0.027802002484662247, 0.015032997876123444, 0.9740377010910506, 0.9905869292876984, 0.9863832880650728, 0.9002877656464191, 0.9902384669967204, 0.9608650671712685, 0.9898037400651075, 0.982940466406594, 0.9788582193476214, 0.12486515774818485, 0.08873027419248969, 0.11533020600989097, 0.10273465453416808, 0.166361091657529, 0.14712666694672039, 0.23863372594501475, 0.17768999768137617, 0.09420412150710566, 0.22206031620305444, 0.11505912547360075, 0.11838545684069668, 0.16276950799451173, 0.1675978698640611, 0.20233479698795143, 0.22673191138182247, 0.1625145165495736, 0.15354621887220032, 0.19557488335886686, 0.11866088296164945, 0.1245155770112133, 0.1092853063975554, 0.16026207311032648, 0.5451557092810848, 0.22604880682729211, 0.34750587700040136, 0.1271183645793761, 0.1674329821828653, 0.09063335351374735, 0.1285531663714351, 0.1314648012537677, 0.17535466844345504, 0.12348148815295468, 0.11100008700557651, 0.5405979143038645, 0.28594147723443886, 0.016223727267233312, 0.030020481233077767, 0.009355257954960505, 0.046881452224001974, 0.053120549147935514, 0.03375492289359905, 0.016407648959331667, 9.999999999998899e-05, 0.10864438649360197, 0.10858637933213888, 0.07242924681255813, 0.2833925524253583, 0.07069854727908642, 0.07443403604968934, 0.02743408587226681, 0.1445434131980825, 0.06735128900927734, 0.10544942551458991, 9.999999999998899e-05, 0.11359484966885225, 0.2029803975223332, 0.22103517007329632, 0.17728809352132047, 0.09473702324688438, 0.06872324074719782, 0.07059941577627649, 0.0074177328543729715, 0.16046743455293677, 0.12032972611596615, 0.22747268943909393, 0.08632450057946661, 0.1811103616623605, 0.20786160460908631, 0.1572120620029458, 0.10521084450742835, 0.11754288963263171, 0.573476027195061, 0.6004539197688982, 0.492314491183944, 0.40715314072078634, 0.4409123579395575, 0.4360291834008525, 0.5432300022063559, 0.5658745509997596, 0.5199784069980898, 0.08603076195749704, 0.04857572304613422, 0.03522123991170667, 0.07988341898516449, 0.08997599577981019, 0.11490704212117053, 0.0785241068462792, 0.08719326007806472, 0.06390364899905965, 0.13418780476878034, 0.19682163729218205, 0.1388720070557714, 0.21846885479020395, 0.18718455208660412, 0.16342545153425458, 0.1971433759261123, 0.1386352582105137, 0.21409271552379072, 0.1297558106921004, 0.21819751664488196, 0.183233396874526, 0.24521801999609816, 0.2418950820877367, 0.2357420581563534, 0.2107438747689363, 0.2466830579352033, 0.26364848489667114, 0.16323630914947607, 0.04073116113278796, 0.21244215897512864, 0.1664638104494316, 0.2080925030884675, 0.2009735854895235, 0.11108509384595966, 0.25346397603868687, 0.20241239933507027, 0.223405948403251, 0.1709754934826746, 0.182151327324366, 0.26548236889117416, 0.26423840928462783, 0.17236912363964363, 0.21573842968109502, 0.2030792854585699, 0.203264247646185, 0.1822307182079388, 0.19572069089617505, 0.17315007818204264, 0.18834248051361846, 0.18516722939907349, 0.16128823868995457, 0.196902670634163, 0.17349309502425858, 0.19775575778536825, 0.1689843189386786, 0.12406857768925328, 0.15022184186275245, 0.17210652394274517, 0.19952019564339984, 0.19827137039039933, 0.09908041685101943, 0.16861815682788472, 0.841795865475922, 0.8455013166093565, 0.15471911497719337, 0.7340700336590521, 0.19978672573360556, 0.16619617599116243, 0.20255896271406248, 0.10538887881925108, 0.10315737996995034, 0.4307413547561165, 0.1906358971294685, 0.18759331955761882, 0.18747109912777293, 0.19515745195531686, 0.18583567328197648, 0.19692074205889498, 0.19549114672256862, 0.18310171498259786, 0.18572097755771666, 0.09308541566986983, 0.03187110329420595, 0.08427844491852088, 0.06413114890313831, 0.06055490868411528, 0.09318655241961482, 0.09322109085615615, 0.06498883421605917, 0.0945061063953192]}, "mutation_prompt": null}
