{"id": "af3d9c0e-48ee-4ad3-b483-cf591c1f0431", "solution": "import numpy as np\n\nclass GeneticSimulatedAnnealing:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.05\n        self.temperature = 1.0\n        self.min_temperature = 0.01\n        self.cooling_rate = 0.9\n\n    def _mutate(self, individual):\n        mutated_individual = individual + np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        mutated_individual = np.clip(mutated_individual, -5.0, 5.0)\n        return mutated_individual\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        \n        for _ in range(self.budget):\n            # Perform tournament selection\n            idx1, idx2 = np.random.choice(self.population_size, 2, replace=False)\n            parent1, parent2 = population[idx1], population[idx2]\n\n            # Crossover\n            child = (parent1 + parent2) / 2.0\n\n            # Mutation\n            mutated_child = self._mutate(child)\n\n            # Simulated Annealing\n            old_fitness = func(child)\n            new_fitness = func(mutated_child)\n            acceptance_prob = np.exp((old_fitness - new_fitness) / self.temperature)\n\n            if acceptance_prob > np.random.rand():\n                population[idx1] = mutated_child\n\n            # Cooling\n            self.temperature = max(self.min_temperature, self.temperature * self.cooling_rate)\n\n        # Return the best solution found\n        best_idx = np.argmin([func(ind) for ind in population])\n        return population[best_idx]", "name": "GeneticSimulatedAnnealing", "description": "A novel optimization algorithm using a combination of Genetic Algorithm and Simulated Annealing to explore and exploit the search space efficiently.", "configspace": "", "generation": 0, "fitness": 0.07542968508323346, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.18133511636944322, 0.142755170934333, 0.16905171901487415, 0.07057640797368459, 0.1080130874687113, 0.1176049368570743, 0.1441934143393815, 0.12646478726333077, 0.09452926144633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02751568812732419, 0.04283000343070087, 0.02205575360557155, 0.03709120250411302, 0.022647140535676735, 0.026828725616073856, 0.017359696186924123, 0.021481572490218093, 0.015180343013045272, 0.037156689770483586, 0.019564286888559712, 0.017668944853280077, 0.020387532209719228, 0.02959708565886654, 0.009536851063033258, 0.0009485992677684685, 0.019551155729675918, 0.01119006741495665, 0.03636780245616522, 0.03510578198494896, 0.023098694037497314, 0.031137592152609805, 0.03176411273236912, 0.033876717687525315, 0.031291775249901566, 0.03200226325116551, 0.03879995929712299, 0.06211464992521287, 9.999999999998899e-05, 0.009302683656320365, 0.03471519836551873, 0.028291832781039528, 0.03688237916295767, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11797684891276494, 0.1318448676835564, 0.12086127478921338, 0.015640097072292747, 0.05417080196045898, 9.999999999998899e-05, 0.006429594348900558, 0.05108341504081304, 0.005981332687745811, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08610642979719652, 0.06860397269545337, 0.0847980166805804, 0.09378588666321208, 0.09990149410280613, 0.09827600400583247, 0.12523891553889954, 0.13735024689205078, 0.05319957784798712, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034679586154187536, 0.04703837615505202, 0.0014171652579403338, 0.052208656763926053, 0.03294713646006908, 0.05712806796559722, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1467268771368032, 0.18769090541324662, 0.1753741624394215, 0.12231185105377285, 0.12783159451291448, 0.11404012099802163, 0.18994769453623972, 0.18064082697592, 0.21032473607181223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022492084196095496, 0.029262707841413382, 0.028885674236233894, 0.03515181754286989, 0.02777737380297418, 0.033430973256099006, 0.14736533224722204, 0.12628898488191387, 0.10747474988370309, 0.1029860857895083, 0.11573641372232701, 0.1287483238831313, 0.12291736712471812, 0.10890888306750401, 0.12496224880684381, 0.12333265254865655, 0.137531583067785, 0.1443078584212122, 0.16284819683997487, 0.1624021193559252, 0.1702093742224482, 0.13987205377779266, 0.14451293515655483, 0.13192142661995765, 0.12462236618362343, 0.07659233894201622, 0.08317389971488687, 0.11898219395428644, 0.12439780466680495, 0.14054708285608974, 0.09327467080515106, 0.07536094363872159, 0.08199297449646092, 0.23120331243824843, 0.2336158786450191, 0.20658083554736106, 0.2134233106277632, 0.2825096448830078, 0.21221350263609318, 0.19407477725681033, 0.24463387412685322, 0.1998870424036877, 0.13492491666614426, 0.07138890690001953, 0.15314716266827166, 0.13963027754848722, 0.16122269393360844, 0.14491500464256146, 0.1503153322163262, 0.14615170072576855, 0.14317404880575157, 0.1323055734580576, 0.13019848386271005, 0.1325906939265069, 0.1351633675238969, 0.10944801876276489, 0.09047984736856562, 0.08992572641363628, 0.0711078085420771, 0.1207327608190144, 0.09932727973295019, 0.23401538331812222, 0.1280969409036503, 0.07455426642122243, 0.10029287778317975, 0.09424607527832018, 0.1109299609184865, 0.09525697808177624, 0.21800853007075094, 0.20713073162004392, 0.1833076770907346, 0.19613406117278542, 0.1860588150085165, 0.19997195446817295, 0.18768138888641384, 0.20688183140017813, 0.2016162383159995, 0.19408382705103921, 0.04929543969968164, 0.05960050506339831, 0.06314666848282757, 0.05590051274152952, 0.05985883293336591, 0.07194698249723219, 0.0568743608095541, 0.05750286518686354, 0.07283177675351471]}, "mutation_prompt": null}
{"id": "4f8b5ff5-407e-4f36-ad76-6123ef5c3ad4", "solution": "import numpy as np\n\nclass GeneticSimulatedAnnealing:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.05\n        self.temperature = 1.0\n        self.min_temperature = 0.01\n        self.cooling_rate = 0.9\n\n    def _mutate(self, individual):\n        mutated_individual = individual + np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        mutated_individual = np.clip(mutated_individual, -5.0, 5.0)\n        return mutated_individual\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        \n        for _ in range(self.budget):\n            # Perform tournament selection\n            idx1, idx2 = np.random.choice(self.population_size, 2, replace=False)\n            parent1, parent2 = population[idx1], population[idx2]\n\n            # Crossover\n            child = (parent1 + parent2) / 2.0\n\n            # Mutation\n            mutated_child = self._mutate(child)\n\n            # Simulated Annealing\n            old_fitness = func(child)\n            new_fitness = func(mutated_child)\n            acceptance_prob = np.exp((old_fitness - new_fitness) / self.temperature)\n\n            if acceptance_prob > np.random.rand():\n                population[idx1] = mutated_child\n\n            # Cooling\n            self.temperature = max(self.min_temperature, self.temperature * self.cooling_rate)\n\n        # Return the best solution found\n        best_idx = np.argmin([func(ind) for ind in population])\n        return population[best_idx]", "name": "GeneticSimulatedAnnealing", "description": "A novel optimization algorithm using a combination of Genetic Algorithm and Simulated Annealing to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af3d9c0e-48ee-4ad3-b483-cf591c1f0431", "metadata": {"aucs": [0.18133511636944322, 0.142755170934333, 0.16905171901487415, 0.07057640797368459, 0.1080130874687113, 0.1176049368570743, 0.1441934143393815, 0.12646478726333077, 0.09452926144633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02751568812732419, 0.04283000343070087, 0.02205575360557155, 0.03709120250411302, 0.022647140535676735, 0.026828725616073856, 0.017359696186924123, 0.021481572490218093, 0.015180343013045272, 0.037156689770483586, 0.019564286888559712, 0.017668944853280077, 0.020387532209719228, 0.02959708565886654, 0.009536851063033258, 0.0009485992677684685, 0.019551155729675918, 0.01119006741495665, 0.03636780245616522, 0.03510578198494896, 0.023098694037497314, 0.031137592152609805, 0.03176411273236912, 0.033876717687525315, 0.031291775249901566, 0.03200226325116551, 0.03879995929712299, 0.06211464992521287, 9.999999999998899e-05, 0.009302683656320365, 0.03471519836551873, 0.028291832781039528, 0.03688237916295767, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11797684891276494, 0.1318448676835564, 0.12086127478921338, 0.015640097072292747, 0.05417080196045898, 9.999999999998899e-05, 0.006429594348900558, 0.05108341504081304, 0.005981332687745811, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08610642979719652, 0.06860397269545337, 0.0847980166805804, 0.09378588666321208, 0.09990149410280613, 0.09827600400583247, 0.12523891553889954, 0.13735024689205078, 0.05319957784798712, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034679586154187536, 0.04703837615505202, 0.0014171652579403338, 0.052208656763926053, 0.03294713646006908, 0.05712806796559722, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1467268771368032, 0.18769090541324662, 0.1753741624394215, 0.12231185105377285, 0.12783159451291448, 0.11404012099802163, 0.18994769453623972, 0.18064082697592, 0.21032473607181223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022492084196095496, 0.029262707841413382, 0.028885674236233894, 0.03515181754286989, 0.02777737380297418, 0.033430973256099006, 0.14736533224722204, 0.12628898488191387, 0.10747474988370309, 0.1029860857895083, 0.11573641372232701, 0.1287483238831313, 0.12291736712471812, 0.10890888306750401, 0.12496224880684381, 0.12333265254865655, 0.137531583067785, 0.1443078584212122, 0.16284819683997487, 0.1624021193559252, 0.1702093742224482, 0.13987205377779266, 0.14451293515655483, 0.13192142661995765, 0.12462236618362343, 0.07659233894201622, 0.08317389971488687, 0.11898219395428644, 0.12439780466680495, 0.14054708285608974, 0.09327467080515106, 0.07536094363872159, 0.08199297449646092, 0.23120331243824843, 0.2336158786450191, 0.20658083554736106, 0.2134233106277632, 0.2825096448830078, 0.21221350263609318, 0.19407477725681033, 0.24463387412685322, 0.1998870424036877, 0.13492491666614426, 0.07138890690001953, 0.15314716266827166, 0.13963027754848722, 0.16122269393360844, 0.14491500464256146, 0.1503153322163262, 0.14615170072576855, 0.14317404880575157, 0.1323055734580576, 0.13019848386271005, 0.1325906939265069, 0.1351633675238969, 0.10944801876276489, 0.09047984736856562, 0.08992572641363628, 0.0711078085420771, 0.1207327608190144, 0.09932727973295019, 0.23401538331812222, 0.1280969409036503, 0.07455426642122243, 0.10029287778317975, 0.09424607527832018, 0.1109299609184865, 0.09525697808177624, 0.21800853007075094, 0.20713073162004392, 0.1833076770907346, 0.19613406117278542, 0.1860588150085165, 0.19997195446817295, 0.18768138888641384, 0.20688183140017813, 0.2016162383159995, 0.19408382705103921, 0.04929543969968164, 0.05960050506339831, 0.06314666848282757, 0.05590051274152952, 0.05985883293336591, 0.07194698249723219, 0.0568743608095541, 0.05750286518686354, 0.07283177675351471]}, "mutation_prompt": null}
