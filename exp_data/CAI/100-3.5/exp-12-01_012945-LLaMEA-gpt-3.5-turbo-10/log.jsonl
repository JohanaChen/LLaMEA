{"id": "e4cdccac-f26a-4fa9-8e8b-878e04647003", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = 20\n        self.bandwidth = 0.01\n        self.HMCR = 0.9\n        self.PAR = 0.4\n        self.current_evals = 0\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        while self.current_evals < self.budget:\n            new_harmony = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.HMCR:\n                    if np.random.rand() < self.PAR:\n                        new_harmony[i] = self.harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                    else:\n                        new_harmony[i] = np.random.uniform(-5.0, 5.0)\n                else:\n                    new_harmony[i] = self.harmony_memory[np.random.randint(self.harmony_memory_size), i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                    \n            if func(new_harmony) < func(self.harmony_memory[np.argmin(func(self.harmony_memory)), :]):\n                self.harmony_memory[np.argmax(func(self.harmony_memory)), :] = new_harmony\n            self.current_evals += 1\n        \n        return self.harmony_memory[np.argmin(func(self.harmony_memory)), :]", "name": "AdaptiveHarmonySearch", "description": "An Adaptive Harmony Search Algorithm that dynamically adjusts the algorithm parameters based on the local search success, improvising the search process.", "configspace": "", "generation": 0, "fitness": 0.06178697836788161, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.1639793181127307, 0.1322317775513091, 0.188799641124625, 0.12373247925948294, 0.10631143664239606, 0.08622182493898423, 0.13596355690948936, 0.15024241401372362, 0.11644205368275395, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03884396921978028, 0.03127843838677313, 0.024897880973362763, 0.040055973585122806, 0.035065910274426626, 0.014690346111340458, 0.03048280499140854, 0.021197063892450352, 0.023231015670030164, 0.01118298158358666, 0.026215575762171484, 0.015707213974525458, 0.023214569273423913, 0.015681322507404727, 0.013679559553149367, 0.006613182664377604, 0.005921026692706999, 0.01325732576927019, 0.05240629272721131, 0.05227030426689394, 0.07124345774295848, 0.05955353270518737, 0.05607273972528404, 0.06328695234139325, 0.06387991787323499, 0.06267694861548789, 0.06537081356153773, 0.05170208935075116, 0.04414231873072638, 0.03462000711070745, 0.06805389503438364, 0.01760568827115272, 0.054538569327133524, 0.026613320984438693, 0.012534914980668721, 0.029677994262577112, 0.10026681181215302, 0.09742587384093071, 0.07639666955399915, 0.1064965764911372, 0.05649918419429745, 0.06571010006701472, 0.08950819005022737, 0.12618967536866765, 0.04937828814780132, 9.999999999998899e-05, 9.999999999998899e-05, 0.003994769808017051, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01114318584040408, 9.999999999998899e-05, 0.003577191276037728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0028457319461638875, 0.010288930482533543, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13532607474667113, 0.16544210820953853, 0.15593395651248232, 0.1490159077053791, 0.14597497708080154, 0.13347929765464506, 0.1593200112377755, 0.1407937171680136, 0.16439489539963348, 0.02802035908818179, 0.009610299448979842, 0.009717677069356445, 0.017781665441261585, 0.04961967994217065, 0.052049365134489545, 0.047762118145325494, 0.03510673583888879, 0.026763001531589725, 0.08510805432723823, 0.08841381784836977, 0.0903198592200688, 0.0985432030189648, 0.10851887610210431, 0.0885057112707871, 0.09284158852642721, 0.1123274096741318, 0.10564296270660312, 0.12471031383813092, 0.1424433696210382, 0.12438791306479413, 0.12965738532969096, 0.13061129704256524, 0.13134382848656623, 0.15036193626085037, 0.1737660436851597, 0.1187770623452481, 0.06490197047880752, 0.09148722998700998, 0.06555479226394068, 0.08458069146313918, 0.09626950581359628, 0.08143883236468152, 0.10103385212745963, 0.09385459731257029, 0.06336814528102497, 0.12999364880241593, 0.127787495387231, 0.13345713124557768, 0.11370037491787532, 0.1531172475143645, 0.14703952367377693, 0.15662392085261267, 0.17681771727446727, 0.12618760314869482, 0.09594633239596773, 0.06113493270313808, 0.1265381089575821, 0.006628349685731338, 0.12531475826363292, 0.13878341888001122, 0.14722530119973998, 0.09266647974582232, 0.02457849772483367, 0.09438897061967377, 0.09931764212048877, 0.10315610832030997, 0.10403715614203979, 0.12078857553623223, 0.123082459942777, 0.11057966059779833, 0.09783779301886075, 0.09686476907929431, 0.1423913055956294, 0.08723412657189944, 0.07733044866645666, 0.09458896193675215, 0.0903727669531934, 0.08558030201872047, 0.0914836235017108, 0.09342484204888057, 0.08192657404115966, 0.15391550220396133, 0.14545630785322794, 0.17692930710233323, 0.1502044836538342, 0.13833342377377544, 0.13497678721566486, 0.1504338308554123, 0.1522420823029006, 0.18748707900776773, 0.03429669661783441, 0.034961694489803796, 0.03240861489441682, 0.04794369042994662, 0.032414461393791894, 0.04477302183042697, 0.031979697533059515, 0.0347962858180445, 0.03271373497280006]}, "mutation_prompt": null}
{"id": "5c522e8c-f06e-480f-a804-31357ff26a7a", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = 20\n        self.bandwidth = 0.01\n        self.HMCR = 0.9\n        self.PAR = 0.4\n        self.current_evals = 0\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        while self.current_evals < self.budget:\n            new_harmony = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.HMCR:\n                    if np.random.rand() < self.PAR:\n                        new_harmony[i] = self.harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                    else:\n                        new_harmony[i] = np.random.uniform(-5.0, 5.0)\n                else:\n                    new_harmony[i] = self.harmony_memory[np.random.randint(self.harmony_memory_size), i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                    \n            if func(new_harmony) < func(self.harmony_memory[np.argmin(func(self.harmony_memory)), :]):\n                self.harmony_memory[np.argmax(func(self.harmony_memory)), :] = new_harmony\n            self.current_evals += 1\n        \n        return self.harmony_memory[np.argmin(func(self.harmony_memory)), :]", "name": "AdaptiveHarmonySearch", "description": "An Adaptive Harmony Search Algorithm that dynamically adjusts the algorithm parameters based on the local search success, improvising the search process.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e4cdccac-f26a-4fa9-8e8b-878e04647003", "metadata": {"aucs": [0.1639793181127307, 0.1322317775513091, 0.188799641124625, 0.12373247925948294, 0.10631143664239606, 0.08622182493898423, 0.13596355690948936, 0.15024241401372362, 0.11644205368275395, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03884396921978028, 0.03127843838677313, 0.024897880973362763, 0.040055973585122806, 0.035065910274426626, 0.014690346111340458, 0.03048280499140854, 0.021197063892450352, 0.023231015670030164, 0.01118298158358666, 0.026215575762171484, 0.015707213974525458, 0.023214569273423913, 0.015681322507404727, 0.013679559553149367, 0.006613182664377604, 0.005921026692706999, 0.01325732576927019, 0.05240629272721131, 0.05227030426689394, 0.07124345774295848, 0.05955353270518737, 0.05607273972528404, 0.06328695234139325, 0.06387991787323499, 0.06267694861548789, 0.06537081356153773, 0.05170208935075116, 0.04414231873072638, 0.03462000711070745, 0.06805389503438364, 0.01760568827115272, 0.054538569327133524, 0.026613320984438693, 0.012534914980668721, 0.029677994262577112, 0.10026681181215302, 0.09742587384093071, 0.07639666955399915, 0.1064965764911372, 0.05649918419429745, 0.06571010006701472, 0.08950819005022737, 0.12618967536866765, 0.04937828814780132, 9.999999999998899e-05, 9.999999999998899e-05, 0.003994769808017051, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01114318584040408, 9.999999999998899e-05, 0.003577191276037728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0028457319461638875, 0.010288930482533543, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13532607474667113, 0.16544210820953853, 0.15593395651248232, 0.1490159077053791, 0.14597497708080154, 0.13347929765464506, 0.1593200112377755, 0.1407937171680136, 0.16439489539963348, 0.02802035908818179, 0.009610299448979842, 0.009717677069356445, 0.017781665441261585, 0.04961967994217065, 0.052049365134489545, 0.047762118145325494, 0.03510673583888879, 0.026763001531589725, 0.08510805432723823, 0.08841381784836977, 0.0903198592200688, 0.0985432030189648, 0.10851887610210431, 0.0885057112707871, 0.09284158852642721, 0.1123274096741318, 0.10564296270660312, 0.12471031383813092, 0.1424433696210382, 0.12438791306479413, 0.12965738532969096, 0.13061129704256524, 0.13134382848656623, 0.15036193626085037, 0.1737660436851597, 0.1187770623452481, 0.06490197047880752, 0.09148722998700998, 0.06555479226394068, 0.08458069146313918, 0.09626950581359628, 0.08143883236468152, 0.10103385212745963, 0.09385459731257029, 0.06336814528102497, 0.12999364880241593, 0.127787495387231, 0.13345713124557768, 0.11370037491787532, 0.1531172475143645, 0.14703952367377693, 0.15662392085261267, 0.17681771727446727, 0.12618760314869482, 0.09594633239596773, 0.06113493270313808, 0.1265381089575821, 0.006628349685731338, 0.12531475826363292, 0.13878341888001122, 0.14722530119973998, 0.09266647974582232, 0.02457849772483367, 0.09438897061967377, 0.09931764212048877, 0.10315610832030997, 0.10403715614203979, 0.12078857553623223, 0.123082459942777, 0.11057966059779833, 0.09783779301886075, 0.09686476907929431, 0.1423913055956294, 0.08723412657189944, 0.07733044866645666, 0.09458896193675215, 0.0903727669531934, 0.08558030201872047, 0.0914836235017108, 0.09342484204888057, 0.08192657404115966, 0.15391550220396133, 0.14545630785322794, 0.17692930710233323, 0.1502044836538342, 0.13833342377377544, 0.13497678721566486, 0.1504338308554123, 0.1522420823029006, 0.18748707900776773, 0.03429669661783441, 0.034961694489803796, 0.03240861489441682, 0.04794369042994662, 0.032414461393791894, 0.04477302183042697, 0.031979697533059515, 0.0347962858180445, 0.03271373497280006]}, "mutation_prompt": null}
