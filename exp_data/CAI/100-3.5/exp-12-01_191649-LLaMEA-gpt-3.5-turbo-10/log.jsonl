{"id": "a12cbeef-aaa1-4765-964d-75c5b4b2c0fa", "solution": "import numpy as np\n\nclass BirdSwarmDEPSO:\n    def __init__(self, budget, dim, pop_size=20, c1=2.0, c2=2.0, f=0.5, cr=0.7):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        lb = -5.0\n        ub = 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = pop[r1] + self.f * (pop[r2] - pop[r3])\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, pop[i])\n                fitness_trial = func(trial)\n                \n                if fitness_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = fitness_trial\n            \n            g_best_idx = np.argmin(fitness)\n            g_best = pop[g_best_idx]\n            \n            for i in range(self.pop_size):\n                velocity = self.c1 * np.random.rand(self.dim) * (pop[i] - pop[i]) + \\\n                           self.c2 * np.random.rand(self.dim) * (g_best - pop[i])\n                pop[i] += velocity\n                pop[i] = np.clip(pop[i], lb, ub)\n                fitness[i] = func(pop[i])\n        \n        return pop[np.argmin(fitness)]", "name": "BirdSwarmDEPSO", "description": "An evolutionary algorithm inspired by the social behavior of birds, implementing a hybrid of Particle Swarm Optimization (PSO) and Differential Evolution (DE) for robust optimization across a diverse set of functions.", "configspace": "", "generation": 0, "fitness": 0.20636627557661424, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.9535787197139441, 0.7645932860961031, 0.5085803086433509, 0.537652292424193, 0.5554312947643794, 0.8093554180465177, 0.47754098191594296, 0.9423024830325725, 0.6676798450751291, 0.43096795643388774, 0.046949951944866175, 0.2629041491416091, 0.45552192676275627, 0.2463963284609536, 0.09731535858112716, 0.09272198373813756, 0.1016666893093301, 0.08676247741965093, 0.09075010299581554, 0.06539955623330806, 0.06323846489709262, 0.05666311951597547, 0.041569700901430195, 0.11987614547415992, 0.0816403664561296, 0.060583231737045384, 0.11995667576346059, 0.11984535013671649, 0.07116347230651987, 0.08902668586208817, 0.09455060543135296, 0.054916631932230286, 0.05029972242289715, 0.08101632769437295, 0.07833091922148139, 0.05332916516369024, 0.9854363560955364, 0.9820366479620228, 0.9894746604025401, 0.9825060290433435, 0.9791176015841456, 0.9816936216485197, 0.9863334705140203, 0.9883988662619259, 0.9767819403753687, 0.13901635169617899, 0.13102615228620196, 0.22222380847211054, 0.08760307957151747, 0.15378466226794085, 0.1714130643173457, 0.2119589338163228, 0.06303306465952796, 0.23301410487556218, 0.23243801501534322, 0.1364743170332804, 0.25442466963689314, 0.28358693023033243, 0.15700462901486922, 0.1470276377908002, 0.07563985836871778, 0.152592518897389, 0.146087160871332, 0.13022444994458116, 0.27830396575652117, 0.1371610477993439, 9.999999999998899e-05, 0.1473631693606281, 9.999999999998899e-05, 0.21424665221910333, 0.16399194774258719, 0.13164017441380915, 0.3271010419222753, 0.2200025761208414, 0.19384433733036832, 0.06968167973759498, 0.13086731435403776, 0.1326709982767743, 0.1389158853329756, 0.13633461001199942, 0.22742154205520437, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09136790559189267, 0.05029643639815695, 0.043578488282789984, 0.06588179134369598, 0.009416372931067452, 9.999999999998899e-05, 0.0791945287829201, 0.036902740405854284, 0.06693432047858427, 0.23364860990515535, 0.11967561907502933, 0.07390414848078564, 0.1459829915736487, 0.15526083574689653, 0.08679660745264028, 9.999999999998899e-05, 0.14978105867400715, 0.09114419389771611, 0.11622466526245301, 0.13892146929744054, 0.0193340520133648, 0.08964130651807045, 0.10776136682278392, 0.0663542094425813, 0.08603381510670838, 0.03868612596930254, 0.14209643578688358, 0.40207869465869583, 0.46704817886081185, 0.4586078113735783, 0.39213135875816363, 0.37831071188249354, 0.307308220010426, 0.46908893189704215, 0.36761133558020076, 0.39741578246262754, 0.04612694379050031, 0.11350085295165702, 0.0804248715878706, 0.11794154416387048, 0.06318860770746304, 0.08665596498651507, 0.12691461980533536, 0.08121172853370351, 0.0938398612065714, 0.1270904308371228, 0.1908573335397028, 0.12400834013923212, 0.1493132640484982, 0.19842758937630423, 0.16141941537338111, 0.18567123380222905, 0.1549895734350628, 0.16140963134995723, 0.18585552605545141, 0.1661128373631371, 0.13364475605346615, 0.14692886087744517, 0.22165884108047362, 0.2088401719912829, 0.19260307159376344, 0.2063952521322957, 0.2064496726496272, 0.19397665990108792, 0.12849410970304598, 0.08164053992957565, 0.12962265767755765, 0.11891602536867463, 0.18766062725767096, 0.11400827066805541, 0.20278284386653722, 0.07627430942202518, 0.1871941008962621, 0.18174554109237184, 0.1586791577649841, 0.19606223510892073, 0.15171526736343655, 0.2784077018386977, 0.1843508896927024, 0.21865930171203085, 0.17991189546887976, 0.19484187298121303, 0.19735894707201562, 0.22990190890036644, 0.17518899259361553, 0.18203979237861978, 0.1689498353314477, 0.17987261533479415, 0.21172360836299997, 0.16711369852266056, 0.1892222362317585, 0.12482933346359693, 0.1512157871607509, 0.17296877813311407, 0.20169611482790473, 0.17042791824427606, 0.1511230232299815, 0.17026179792788332, 0.10381257266336086, 0.28419729511455893, 0.17891381525954453, 0.4649592094870282, 0.12845782960853847, 0.16262251873811495, 0.21035402149261617, 0.10433125696856493, 0.29496497798740773, 0.11242566674339871, 0.20567345924241254, 0.19071577206149126, 0.20172619591760899, 0.1946782960406085, 0.21514430982348487, 0.1985626559486069, 0.2137690043238385, 0.2108697592260994, 0.2825864310140468, 0.08440903581794723, 0.03962330262499181, 0.079610468733742, 0.09062963381823796, 0.08298305983637233, 0.07425034938323838, 0.056771212105985014, 0.07003498067718883, 0.0920208805657865]}, "mutation_prompt": null}
{"id": "f3fffcaa-4e0d-4e7d-a508-b4f9f220acf9", "solution": "import numpy as np\n\nclass AdaptiveBirdSwarmDEPSO:\n    def __init__(self, budget, dim, pop_size=20, c1=2.0, c2=2.0, f=0.5, cr=0.7, f_decay=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.f_decay = f_decay\n\n    def __call__(self, func):\n        lb = -5.0\n        ub = 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = pop[r1] + self.f * (pop[r2] - pop[r3])\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, pop[i])\n                fitness_trial = func(trial)\n                \n                if fitness_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = fitness_trial\n            \n            g_best_idx = np.argmin(fitness)\n            g_best = pop[g_best_idx]\n            \n            for i in range(self.pop_size):\n                velocity = self.c1 * np.random.rand(self.dim) * (pop[i] - pop[i]) + \\\n                           self.c2 * np.random.rand(self.dim) * (g_best - pop[i])\n                pop[i] += velocity\n                pop[i] = np.clip(pop[i], lb, ub)\n                fitness[i] = func(pop[i])\n            \n            self.f *= self.f_decay\n        \n        return pop[np.argmin(fitness)]", "name": "AdaptiveBirdSwarmDEPSO", "description": "Improved BirdSwarmDEPSO algorithm by incorporating adaptive control of mutation rate.", "configspace": "", "generation": 1, "fitness": 0.18793677495584102, "feedback": "", "error": "", "parent_id": "a12cbeef-aaa1-4765-964d-75c5b4b2c0fa", "metadata": {"aucs": [0.4683081771400439, 0.4951818150996935, 0.5763231740737411, 0.9452793625290596, 0.41354082977992657, 0.5546518450382345, 0.3709401792785283, 0.6352709589939987, 0.42451339060893833, 0.21375726983531163, 0.042027532723403094, 9.999999999998899e-05, 0.19246877990104927, 0.05171391999356223, 9.999999999998899e-05, 0.10120612640206239, 9.999999999998899e-05, 9.999999999998899e-05, 0.07335146946220261, 0.06923608138861159, 0.11338841050769588, 0.055220130142738855, 0.05308359957776898, 0.11360360982845796, 0.0813866423377021, 0.05886864405734138, 0.12093857784415851, 0.11986210471532299, 0.06516859840272538, 0.10812653883501988, 0.11466115126861054, 0.030022400783200065, 0.05040737695583086, 0.05142005822126938, 0.07596754433706643, 0.05336066215653479, 0.9791767086756851, 0.9762742858866797, 0.988162660167767, 0.9826267397665701, 0.9703195355107938, 0.9815013681059052, 0.986351690562479, 0.9877779079067532, 0.9818384948525603, 0.15525177411174662, 0.13609690460530477, 0.33074107160096433, 0.0960311626883591, 0.15044333513362673, 0.1786150535926585, 0.12026682311126913, 0.09855630814086302, 0.3037883545539607, 0.21258652655173882, 0.13648399012270607, 0.25460538301307145, 0.27644499266893297, 0.1455446681378555, 0.15098581092690788, 0.0880790824774369, 0.13181002673672215, 0.10985107145899442, 0.13551742806072142, 0.14713836934716906, 0.1362450006982061, 9.999999999998899e-05, 0.1422402121115509, 9.999999999998899e-05, 0.2599139415021888, 0.10653638932814613, 0.11293143462916155, 0.14963312860218736, 0.22842422115792094, 0.13366471953335113, 0.02440497712255929, 0.1325591945579898, 0.15385736654335558, 0.13048200432744617, 0.14046188929740333, 0.20719665578067004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020236021351783928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08647099830585614, 0.03390930780878898, 0.05116443110636282, 0.06515521144863956, 0.010455768030425472, 9.999999999998899e-05, 0.06759510096135801, 0.0067403788514111, 0.07644718276825546, 9.999999999998899e-05, 0.1132409100173345, 0.08573784628596637, 0.10314593795124438, 9.999999999998899e-05, 0.007557312790432702, 0.21557090420717062, 0.16669383260103787, 0.1330310525942896, 0.10062777566746539, 0.1384156295380211, 0.01366347999512818, 0.07134195578130997, 0.06955426605037429, 0.07244364935492253, 0.08471299682760869, 0.040275555955341824, 0.13466050810666752, 0.4313151366175496, 0.5133255247978121, 0.3807207005645692, 0.20729477680603103, 0.251185463578107, 0.33540996953358604, 0.5404726154664714, 0.35367014600757607, 0.3680915264365754, 0.02587095267838191, 0.027587122414903797, 0.08764796553729559, 0.07161948617483227, 0.10940190294094443, 0.0492905335149173, 0.11821109224312909, 0.08004699156114603, 0.08720067373819673, 0.14507077942084667, 0.18315402151564053, 0.11632862296593816, 0.1914828675670457, 0.18364752654841243, 0.14190250812170035, 0.2083831055252544, 0.15152611530941862, 0.13290338879141528, 0.14878859593256744, 0.1589366984680708, 0.13549110885970317, 0.16087906658010165, 0.25951468402248734, 0.19463814749765707, 0.1609494888608498, 0.2233599681977123, 0.21661889943439072, 0.14899375557823258, 0.2013000302426161, 0.08734758569327639, 0.10114342307691437, 0.2265539573945955, 0.20155462907978772, 0.1265382572122835, 0.183731721131296, 0.058361069822770895, 0.20171172767770884, 0.1973997735450268, 0.15221161067772504, 0.1922236000496479, 0.12917889599425503, 0.20629914451441933, 0.25614472741710204, 0.2263054571714349, 0.16217067207284763, 0.18049501141638835, 0.18068381313173254, 0.22969559240480875, 0.17514814865280603, 0.17303415786528709, 0.19693602859706916, 0.2106334960563152, 0.1914202626492334, 0.16528789453055837, 0.16873582884926686, 0.12288822073784267, 0.15326761655098875, 0.1729597054643911, 0.19413410439700673, 0.17014312870971915, 0.1510933379114645, 0.1696874142436332, 0.10380486844685988, 0.14999429207002835, 0.16208656934735866, 0.35689234051054264, 0.12827660474597502, 0.16260240344408117, 0.21332627548546323, 0.10432894001934778, 0.2279066045628999, 0.112752689929695, 0.18510733115561584, 0.16746713621581422, 0.18499726912959513, 0.21078048086308332, 0.19321657251272994, 0.20518317971993283, 0.2829725270938195, 0.1988569662837386, 0.2187297888370151, 0.06675005447895876, 0.03819150727124565, 0.08958909740474696, 0.08271103847635408, 0.10384793625566013, 0.08075226984466499, 0.08258663361086782, 0.0709807901828794, 0.07707560756564757]}, "mutation_prompt": null}
