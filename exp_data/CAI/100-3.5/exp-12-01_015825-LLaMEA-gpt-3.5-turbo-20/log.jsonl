{"id": "bd1f32f2-a15a-4177-abb3-4fc31dd7ce5a", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = 10\n        self.bandwidth = 0.01\n        self.pitch_adjustment_rate = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n        def generate_new_harmony(harmony_memory):\n            new_harmony = np.copy(harmony_memory)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    new_harmony[:, i] += np.random.uniform(-self.bandwidth, self.bandwidth, self.harmony_memory_size)\n                    new_harmony[:, i] = np.clip(new_harmony[:, i], -5.0, 5.0)\n            return new_harmony\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        best_fitness = np.inf\n        num_evaluations = 0\n\n        while num_evaluations < self.budget:\n            new_harmony = generate_new_harmony(harmony_memory)\n            new_fitness = np.array([func(h) for h in new_harmony])\n            num_evaluations += self.harmony_memory_size\n\n            if np.min(new_fitness) < best_fitness:\n                best_fitness = np.min(new_fitness)\n                best_solution = new_harmony[np.argmin(new_fitness)]\n\n            harmony_memory = np.vstack((harmony_memory, new_harmony))\n            harmony_memory = harmony_memory[np.argsort(new_fitness)[:self.harmony_memory_size]]\n\n        return best_solution", "name": "AdaptiveHarmonySearch", "description": "A novel algorithm called Adaptive Harmony Search (AHS) that dynamically adjusts the pitch adjustment rate and bandwidth to explore and exploit the search space efficiently based on the local and global search information.", "configspace": "", "generation": 0, "fitness": 0.03494314930783103, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.07207459918341486, 0.06451375628661404, 0.08263065267284642, 0.01970610776491577, 0.05284096159923757, 0.02542626031355033, 0.051586435882565285, 0.0518285625882936, 0.06735056370506753, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01679200339507858, 9.999999999998899e-05, 0.00015952645235706164, 0.0017542206101160973, 9.999999999998899e-05, 0.020235193330458978, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021597169141934325, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04536223389583771, 0.03380415700393591, 0.04304361579748006, 0.039238474795824874, 0.04707229911094779, 0.030692778451984704, 0.03341386193949969, 0.04918414235872892, 0.025945547911885303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005146709836091334, 9.999999999998899e-05, 9.999999999998899e-05, 0.011513275000461731, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006487473152022916, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015532113745006737, 9.999999999998899e-05, 0.0021206554910450093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07876664583372361, 0.10734576583457744, 0.14868505845476898, 0.09446344875488843, 0.0807955496648618, 0.09602191479624944, 0.12431192226888776, 0.097466596069825, 0.1212748903483698, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007813080661876137, 9.999999999998899e-05, 0.018651689300801855, 9.999999999998899e-05, 9.999999999998899e-05, 0.029283342295550963, 0.07468331970500508, 0.08091181231113043, 0.060324339746475, 0.10732064552181486, 0.07498303181974864, 0.06415799698296654, 0.062439978079918856, 0.05324317985826599, 0.08291259209305102, 0.09746731095860706, 0.09916851612507849, 0.10504358964166183, 0.1095506553925476, 0.08379740498750365, 0.08445087596629253, 0.11655859274457347, 0.10162159635279677, 0.07901038868841737, 0.035406398535539285, 0.035451245455058955, 0.0361197267430553, 0.049447242128887736, 0.02017180454001899, 0.04156063219578188, 0.06113213976039844, 0.04027226966640973, 0.013737367318841454, 0.15855541331273015, 0.07812845563635895, 0.15188426837251734, 0.1581379468380233, 0.09724996217417015, 0.13657159053909185, 0.13583464497141173, 0.10342275270985524, 0.15341349646958846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.044336190371130346, 0.056425241643466295, 0.05715375126955147, 0.06757670917815572, 0.12172661369991133, 0.06258299969072778, 0.061562617401223374, 0.057119555315121806, 0.054036675154144564, 0.03856788320799476, 0.041326742083845014, 0.016538913256069154, 0.01884978424632211, 0.02173806576646453, 0.045964180326683146, 0.019131792135675063, 0.01592413326059272, 0.042703062456145746, 0.13405580811896256, 0.17053975555094658, 0.18994675673208983, 0.14548759043836124, 0.14500048420936384, 0.15973151344873382, 0.14324262994244474, 0.12391892993027287, 0.19666126894386593, 0.0031606340295158297, 0.021298075178489473, 0.041876484138648085, 0.0039570038639688, 0.013717611242421657, 0.012938921548853233, 0.013247393688201159, 0.0025554991308781583, 0.012991808147448158]}, "mutation_prompt": null}
{"id": "259f1d8e-5673-4e31-b739-5fa6daffeefe", "solution": "class EnhancedAdaptiveHarmonySearch(AdaptiveHarmonySearch):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.bandwidth_factor = 0.1\n\n    def __call__(self, func):\n        def generate_new_harmony(harmony_memory):\n            new_harmony = np.copy(harmony_memory)\n            self.bandwidth *= self.bandwidth_factor\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    new_harmony[:, i] += np.random.uniform(-self.bandwidth, self.bandwidth, self.harmony_memory_size)\n                    new_harmony[:, i] = np.clip(new_harmony[:, i], -5.0, 5.0)\n            return new_harmony", "name": "EnhancedAdaptiveHarmonySearch", "description": "Enhanced Adaptive Harmony Search algorithm by incorporating a dynamic bandwidth adjustment mechanism to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": 0.0, "feedback": "", "error": "", "parent_id": "bd1f32f2-a15a-4177-abb3-4fc31dd7ce5a", "metadata": {"aucs": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "mutation_prompt": null}
