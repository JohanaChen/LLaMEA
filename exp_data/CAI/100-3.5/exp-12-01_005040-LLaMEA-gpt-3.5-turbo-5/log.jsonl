{"id": "adf4b750-e233-4655-a7d3-ce5e7a2eb24f", "solution": "import numpy as np\n\nclass AdaptiveHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            best_idx = np.argmin(fitness)\n            best = pop[best_idx]\n            \n            for i in range(self.pop_size):\n                if np.random.rand() < 0.5:\n                    new_pop = pop + 0.1 * np.random.randn(self.pop_size, self.dim)\n                else:\n                    new_pop = pop + 0.1 * np.random.randn(self.pop_size, self.dim) + 0.5 * (best - pop[i]) * np.random.randn(self.dim)\n                \n                new_pop = np.clip(new_pop, lb, ub)\n                new_fitness = np.array([func(ind) for ind in new_pop])\n                \n                if np.min(new_fitness) < fitness[i]:\n                    pop[i] = new_pop[np.argmin(new_fitness)]\n                    fitness[i] = np.min(new_fitness)\n        \n        best_idx = np.argmin(fitness)\n        best_solution = pop[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "AdaptiveHybridMetaheuristic", "description": "An adaptive hybrid metaheuristic algorithm that combines Particle Swarm Optimization (PSO) and Differential Evolution (DE) with a dynamically adjusted exploration and exploitation strategy.", "configspace": "", "generation": 0, "fitness": 0.2135734114855492, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.4341941978952939, 0.4114510851140717, 0.4234692236133403, 0.4281615277720795, 0.41365328247079214, 0.4223269965526212, 0.4239385743574603, 0.41347737234593407, 0.44519892033189223, 0.059464958971175874, 0.04092793423614072, 9.999999999998899e-05, 0.03033808219598666, 0.04676546985497243, 0.006543736193489691, 0.04106400544548727, 0.031144225432182426, 0.003361709569638549, 0.06616431443111925, 0.13300337737189583, 0.0717042483706587, 0.1232935905443242, 0.12047594715748222, 0.10038176697960899, 0.07354632786729887, 0.11869251318072405, 0.11048712858812726, 0.08575847552206595, 0.09869161765096013, 0.06178026775259626, 0.11897553195832256, 0.05601336189630568, 0.08717180084051923, 0.10882218247424535, 0.08863470800073081, 0.0830857500648503, 0.5767277788060237, 0.8976864724265954, 0.8272792987853074, 0.8231466371201168, 0.7655881645931033, 0.5432877920137793, 0.7601272434835906, 0.8701900151147183, 0.8484307937516798, 0.23092338960985148, 0.2592598022709304, 0.24471004212777192, 0.2946410305717181, 0.23797297967806585, 0.23629225436872459, 0.2626892568529815, 0.23796211458521654, 0.2418846180875177, 0.5365110399725803, 0.6897229732194579, 0.38854800481216667, 0.30173164037906486, 0.675014587586219, 0.19487737513227343, 0.16785637660039943, 0.18834484326330347, 0.17242385158830187, 0.17717531695436262, 0.12805153001204794, 0.20151394927953625, 0.1257341440204398, 0.143288948096726, 0.16856641783830195, 0.12446125414542852, 0.11058881261240072, 0.1594156616208665, 0.1836322385927016, 0.1101718861618678, 0.13851100857946674, 0.14985006786753585, 0.14807333615491514, 0.15179729269683373, 0.1065944321039356, 0.14114634579052998, 0.15367755353977242, 9.999999999998899e-05, 0.008892543825500199, 0.020890556211079492, 0.0006805013080997124, 9.999999999998899e-05, 0.012817474908477955, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010629124186887218, 0.051439728258648065, 0.06943077519768759, 0.07086210909228485, 0.09926568568946237, 0.05948345201096239, 0.0745656393897336, 0.13430850066923028, 0.11545986442485645, 0.0991907420529129, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0908978259589277, 0.0452989041188836, 0.12488181463908643, 0.1064070535974333, 0.1065335355661493, 0.10390261308058757, 0.05972612266014854, 0.07441389315447267, 0.08760509322873389, 0.3947875041414425, 0.39405523602503967, 0.40523245299719957, 0.3967355542580664, 0.3586511176803713, 0.3896040110788962, 0.4204151723817512, 0.3614027199311175, 0.3958552120640366, 0.11104170603881625, 0.10774270777693395, 0.12503450039777175, 0.08412194522286232, 0.0817651038058661, 0.10750785095309834, 0.11144739854561281, 0.10212657577467288, 0.07710065699874435, 0.24065026523375832, 0.17477277164575222, 0.18676254838101136, 0.29260880078511753, 0.2744492732815711, 0.27854930657494326, 0.27547198210824697, 0.18267075536953614, 0.3316072492246439, 0.1819740250128521, 0.2874515512724768, 0.23996012700390368, 0.19079223171508508, 0.2847888185035795, 0.22401241349458012, 0.2617828923088906, 0.2914524374496942, 0.24063339423094032, 0.15518837208247238, 0.20035272377188762, 0.2107890301307137, 0.18792391724783308, 0.23526335557970712, 0.2183003575858521, 0.21154412412510248, 0.22085154591868306, 0.19767089083319012, 0.20628127121963158, 0.18999114616644752, 0.18247818506713032, 0.21371467722923632, 0.20275664853523745, 0.214321557514211, 0.1888824728859717, 0.18610605658610646, 0.21010151826002188, 0.22894493920987957, 0.21295062779093366, 0.2051142935674628, 0.2991408193675712, 0.22436721817154026, 0.18603774802594086, 0.20854544698393473, 0.1879314540813648, 0.16472322259283012, 0.5362057056570124, 0.5133622151515698, 0.16249709657351363, 0.6769439102163289, 0.19682509518137636, 0.1994992358022497, 0.1607167555984923, 0.16526114408504677, 0.6275364719584883, 0.532130055194453, 0.45330885205254656, 0.20198134890096886, 0.38230703931893084, 0.3719356795513874, 0.4462983120466588, 0.4635340561656951, 0.5243826069681604, 0.20371752580684432, 0.19471528237537783, 0.17926809270892152, 0.18948207738976874, 0.19628817256473108, 0.17631094796736124, 0.17902570003762808, 0.1795688592539243, 0.19140687489008368, 0.1848217295881014, 0.09600589477945143, 0.0787754241484252, 0.08716402334814188, 0.0813952303469998, 0.08233926499042432, 0.06897690386770772, 0.08748664588363386, 0.0690505347819943, 0.07837809819088648]}, "mutation_prompt": null}
{"id": "d4699ee0-567f-45fe-823a-50048a8e2f80", "solution": "import numpy as np\n\nclass AdaptiveHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iter = budget // self.pop_size\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.max_iter):\n            best_idx = np.argmin(fitness)\n            best = pop[best_idx]\n            \n            for i in range(self.pop_size):\n                if np.random.rand() < 0.5:\n                    new_pop = pop + 0.1 * np.random.randn(self.pop_size, self.dim)\n                else:\n                    new_pop = pop + 0.1 * np.random.randn(self.pop_size, self.dim) + 0.5 * (best - pop[i]) * np.random.randn(self.dim)\n                \n                new_pop = np.clip(new_pop, lb, ub)\n                new_fitness = np.array([func(ind) for ind in new_pop])\n                \n                if np.min(new_fitness) < fitness[i]:\n                    pop[i] = new_pop[np.argmin(new_fitness)]\n                    fitness[i] = np.min(new_fitness)\n        \n        best_idx = np.argmin(fitness)\n        best_solution = pop[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "AdaptiveHybridMetaheuristic", "description": "An adaptive hybrid metaheuristic algorithm that combines Particle Swarm Optimization (PSO) and Differential Evolution (DE) with a dynamically adjusted exploration and exploitation strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "adf4b750-e233-4655-a7d3-ce5e7a2eb24f", "metadata": {"aucs": [0.4341941978952939, 0.4114510851140717, 0.4234692236133403, 0.4281615277720795, 0.41365328247079214, 0.4223269965526212, 0.4239385743574603, 0.41347737234593407, 0.44519892033189223, 0.059464958971175874, 0.04092793423614072, 9.999999999998899e-05, 0.03033808219598666, 0.04676546985497243, 0.006543736193489691, 0.04106400544548727, 0.031144225432182426, 0.003361709569638549, 0.06616431443111925, 0.13300337737189583, 0.0717042483706587, 0.1232935905443242, 0.12047594715748222, 0.10038176697960899, 0.07354632786729887, 0.11869251318072405, 0.11048712858812726, 0.08575847552206595, 0.09869161765096013, 0.06178026775259626, 0.11897553195832256, 0.05601336189630568, 0.08717180084051923, 0.10882218247424535, 0.08863470800073081, 0.0830857500648503, 0.5767277788060237, 0.8976864724265954, 0.8272792987853074, 0.8231466371201168, 0.7655881645931033, 0.5432877920137793, 0.7601272434835906, 0.8701900151147183, 0.8484307937516798, 0.23092338960985148, 0.2592598022709304, 0.24471004212777192, 0.2946410305717181, 0.23797297967806585, 0.23629225436872459, 0.2626892568529815, 0.23796211458521654, 0.2418846180875177, 0.5365110399725803, 0.6897229732194579, 0.38854800481216667, 0.30173164037906486, 0.675014587586219, 0.19487737513227343, 0.16785637660039943, 0.18834484326330347, 0.17242385158830187, 0.17717531695436262, 0.12805153001204794, 0.20151394927953625, 0.1257341440204398, 0.143288948096726, 0.16856641783830195, 0.12446125414542852, 0.11058881261240072, 0.1594156616208665, 0.1836322385927016, 0.1101718861618678, 0.13851100857946674, 0.14985006786753585, 0.14807333615491514, 0.15179729269683373, 0.1065944321039356, 0.14114634579052998, 0.15367755353977242, 9.999999999998899e-05, 0.008892543825500199, 0.020890556211079492, 0.0006805013080997124, 9.999999999998899e-05, 0.012817474908477955, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010629124186887218, 0.051439728258648065, 0.06943077519768759, 0.07086210909228485, 0.09926568568946237, 0.05948345201096239, 0.0745656393897336, 0.13430850066923028, 0.11545986442485645, 0.0991907420529129, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0908978259589277, 0.0452989041188836, 0.12488181463908643, 0.1064070535974333, 0.1065335355661493, 0.10390261308058757, 0.05972612266014854, 0.07441389315447267, 0.08760509322873389, 0.3947875041414425, 0.39405523602503967, 0.40523245299719957, 0.3967355542580664, 0.3586511176803713, 0.3896040110788962, 0.4204151723817512, 0.3614027199311175, 0.3958552120640366, 0.11104170603881625, 0.10774270777693395, 0.12503450039777175, 0.08412194522286232, 0.0817651038058661, 0.10750785095309834, 0.11144739854561281, 0.10212657577467288, 0.07710065699874435, 0.24065026523375832, 0.17477277164575222, 0.18676254838101136, 0.29260880078511753, 0.2744492732815711, 0.27854930657494326, 0.27547198210824697, 0.18267075536953614, 0.3316072492246439, 0.1819740250128521, 0.2874515512724768, 0.23996012700390368, 0.19079223171508508, 0.2847888185035795, 0.22401241349458012, 0.2617828923088906, 0.2914524374496942, 0.24063339423094032, 0.15518837208247238, 0.20035272377188762, 0.2107890301307137, 0.18792391724783308, 0.23526335557970712, 0.2183003575858521, 0.21154412412510248, 0.22085154591868306, 0.19767089083319012, 0.20628127121963158, 0.18999114616644752, 0.18247818506713032, 0.21371467722923632, 0.20275664853523745, 0.214321557514211, 0.1888824728859717, 0.18610605658610646, 0.21010151826002188, 0.22894493920987957, 0.21295062779093366, 0.2051142935674628, 0.2991408193675712, 0.22436721817154026, 0.18603774802594086, 0.20854544698393473, 0.1879314540813648, 0.16472322259283012, 0.5362057056570124, 0.5133622151515698, 0.16249709657351363, 0.6769439102163289, 0.19682509518137636, 0.1994992358022497, 0.1607167555984923, 0.16526114408504677, 0.6275364719584883, 0.532130055194453, 0.45330885205254656, 0.20198134890096886, 0.38230703931893084, 0.3719356795513874, 0.4462983120466588, 0.4635340561656951, 0.5243826069681604, 0.20371752580684432, 0.19471528237537783, 0.17926809270892152, 0.18948207738976874, 0.19628817256473108, 0.17631094796736124, 0.17902570003762808, 0.1795688592539243, 0.19140687489008368, 0.1848217295881014, 0.09600589477945143, 0.0787754241484252, 0.08716402334814188, 0.0813952303469998, 0.08233926499042432, 0.06897690386770772, 0.08748664588363386, 0.0690505347819943, 0.07837809819088648]}, "mutation_prompt": null}
