{"id": "a3573f52-bf9e-4f71-9c75-239234e0c558", "solution": "import numpy as np\n\nclass AdaptiveCuckooSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.step_size = 0.1  # Initial step size\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def update_step_size(self, diversity):\n        self.step_size *= np.exp(-diversity)\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for _ in range(self.budget):\n            diversity = np.mean(np.std(population, axis=0))\n            self.update_step_size(diversity)\n            new_population = []\n            \n            for i in range(self.population_size):\n                cuckoo = population[i]\n                step = self.step_size * self.levy_flight()\n                random_cuckoo = population[np.random.randint(0, self.population_size)]\n                new_cuckoo = cuckoo + step * (cuckoo - random_cuckoo)\n                \n                if func(new_cuckoo) < fitness[i]:\n                    population[i] = new_cuckoo\n                    fitness[i] = func(new_cuckoo)\n                    \n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n        \n        return best_solution", "name": "AdaptiveCuckooSearch", "description": "An adaptive cuckoo search algorithm that dynamically adjusts its step size based on the population diversity to efficiently explore and exploit the search space for black box optimization.", "configspace": "", "generation": 0, "fitness": 0.032202730977069986, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.07187255477067866, 0.0643283163898184, 0.08238102187635832, 0.019690321830126645, 0.05295457765138034, 0.025301127363111076, 0.0514042408052795, 0.05163178280233238, 0.06713202716635713, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467116662002188, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013600329939499334, 9.999999999998899e-05, 0.018656871493933247, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019758426315354738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04551200732471539, 0.03371183284954349, 0.04297728490979358, 0.03939054207009507, 0.04692153946409705, 0.030616302341891832, 0.033521480937084513, 0.04903507806279794, 0.025878040969976923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005110142328650369, 9.999999999998899e-05, 9.999999999998899e-05, 0.011302200166415033, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006487473152022916, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03528943371390325, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07840160014917053, 0.1071355252266285, 0.14839787907357316, 0.09426282612539727, 0.08051072569150819, 0.09580442643642473, 0.12406497767128477, 0.09719816889798527, 0.12225188433079581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006133899332158355, 9.999999999998899e-05, 0.01761357419026377, 9.999999999998899e-05, 9.999999999998899e-05, 0.035840989569439596, 0.07219940548166981, 0.07013654120518131, 0.05705886411673977, 0.10701630691001518, 0.07157594038714521, 0.0584843594333313, 0.059685878752669286, 0.04858232463966761, 0.07857523500940788, 0.09898488860071653, 0.0962505646895383, 0.1035977871000976, 0.10857853459875, 0.08300139559150321, 0.08336601333815619, 0.12574195322444726, 0.1118958924785447, 0.07786990895647172, 0.03719922775107154, 0.0319045702395615, 0.03546479663997215, 0.051324058855155674, 0.01676465390856341, 0.03853469935041143, 0.06504449414623903, 0.03853008101012145, 0.012141712515680747, 0.10262987617031272, 0.06593292582622179, 0.13097335821377054, 0.10290361807560744, 0.06756558052378392, 0.09234000442048274, 0.12253690403851036, 0.07689407664426451, 0.1301048295060404, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05042478731022637, 0.056193663509018776, 0.058489085750101144, 0.06719324127605975, 0.12086202662284518, 0.06189678948376387, 0.06421775001855023, 0.057198767534930806, 0.05370274888850057, 0.03824286345526029, 0.040781203870633886, 0.016411999372475616, 0.018718302737546377, 0.021608505439743575, 0.0455372864971989, 0.018967023923064485, 0.015896650836092374, 0.041594433362096006, 0.10912872762194203, 0.14538182614916917, 0.15184501375901271, 0.13983250540998904, 0.11709970050890972, 0.12466905282576446, 0.1042261581753704, 0.11049986717276061, 0.14689768808249848, 0.0069667421003061225, 0.012217989967259535, 0.03395014875490765, 9.999999999998899e-05, 0.009059056834506918, 0.009308415344487342, 0.003992658727518084, 0.0013047149160174687, 0.011185286938116046]}, "mutation_prompt": null}
{"id": "62433e7c-7eb6-4e4d-b120-5e436ab11ed0", "solution": "import numpy as np\n\nclass AdaptiveCuckooSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.step_size = 0.1  # Initial step size\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def update_step_size(self, diversity):\n        self.step_size *= np.exp(-diversity)\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(x) for x in population])\n        \n        for _ in range(self.budget):\n            diversity = np.mean(np.std(population, axis=0))\n            self.update_step_size(diversity)\n            new_population = []\n            \n            for i in range(self.population_size):\n                cuckoo = population[i]\n                step = self.step_size * self.levy_flight()\n                random_cuckoo = population[np.random.randint(0, self.population_size)]\n                new_cuckoo = cuckoo + step * (cuckoo - random_cuckoo)\n                \n                if func(new_cuckoo) < fitness[i]:\n                    population[i] = new_cuckoo\n                    fitness[i] = func(new_cuckoo)\n                    \n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n        \n        return best_solution", "name": "AdaptiveCuckooSearch", "description": "An adaptive cuckoo search algorithm that dynamically adjusts its step size based on the population diversity to efficiently explore and exploit the search space for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a3573f52-bf9e-4f71-9c75-239234e0c558", "metadata": {"aucs": [0.07187255477067866, 0.0643283163898184, 0.08238102187635832, 0.019690321830126645, 0.05295457765138034, 0.025301127363111076, 0.0514042408052795, 0.05163178280233238, 0.06713202716635713, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467116662002188, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013600329939499334, 9.999999999998899e-05, 0.018656871493933247, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019758426315354738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04551200732471539, 0.03371183284954349, 0.04297728490979358, 0.03939054207009507, 0.04692153946409705, 0.030616302341891832, 0.033521480937084513, 0.04903507806279794, 0.025878040969976923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005110142328650369, 9.999999999998899e-05, 9.999999999998899e-05, 0.011302200166415033, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006487473152022916, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03528943371390325, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07840160014917053, 0.1071355252266285, 0.14839787907357316, 0.09426282612539727, 0.08051072569150819, 0.09580442643642473, 0.12406497767128477, 0.09719816889798527, 0.12225188433079581, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006133899332158355, 9.999999999998899e-05, 0.01761357419026377, 9.999999999998899e-05, 9.999999999998899e-05, 0.035840989569439596, 0.07219940548166981, 0.07013654120518131, 0.05705886411673977, 0.10701630691001518, 0.07157594038714521, 0.0584843594333313, 0.059685878752669286, 0.04858232463966761, 0.07857523500940788, 0.09898488860071653, 0.0962505646895383, 0.1035977871000976, 0.10857853459875, 0.08300139559150321, 0.08336601333815619, 0.12574195322444726, 0.1118958924785447, 0.07786990895647172, 0.03719922775107154, 0.0319045702395615, 0.03546479663997215, 0.051324058855155674, 0.01676465390856341, 0.03853469935041143, 0.06504449414623903, 0.03853008101012145, 0.012141712515680747, 0.10262987617031272, 0.06593292582622179, 0.13097335821377054, 0.10290361807560744, 0.06756558052378392, 0.09234000442048274, 0.12253690403851036, 0.07689407664426451, 0.1301048295060404, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05042478731022637, 0.056193663509018776, 0.058489085750101144, 0.06719324127605975, 0.12086202662284518, 0.06189678948376387, 0.06421775001855023, 0.057198767534930806, 0.05370274888850057, 0.03824286345526029, 0.040781203870633886, 0.016411999372475616, 0.018718302737546377, 0.021608505439743575, 0.0455372864971989, 0.018967023923064485, 0.015896650836092374, 0.041594433362096006, 0.10912872762194203, 0.14538182614916917, 0.15184501375901271, 0.13983250540998904, 0.11709970050890972, 0.12466905282576446, 0.1042261581753704, 0.11049986717276061, 0.14689768808249848, 0.0069667421003061225, 0.012217989967259535, 0.03395014875490765, 9.999999999998899e-05, 0.009059056834506918, 0.009308415344487342, 0.003992658727518084, 0.0013047149160174687, 0.011185286938116046]}, "mutation_prompt": null}
