{"id": "0ad497d1-848b-443f-83c1-b0d77573e7f3", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.num_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def mutate(x, best, gbest, F=0.5):\n            idxs = np.random.choice(self.population_size, size=3, replace=False)\n            a, b, c = x[idxs]\n            return np.clip(a + F * (b - c), -5.0, 5.0)\n\n        def apply_boundaries(x):\n            return np.clip(x, -5.0, 5.0)\n\n        population = initialize_population()\n        pbest = population.copy()\n        fitness_pbest = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(fitness_pbest)\n        gbest = pbest[gbest_idx]\n\n        for _ in range(self.num_iterations):\n            for i in range(self.population_size):\n                new_candidate = mutate(population[i], pbest[i], gbest)\n                new_candidate_fitness = func(new_candidate)\n                if new_candidate_fitness < fitness_pbest[i]:\n                    pbest[i] = new_candidate\n                    fitness_pbest[i] = new_candidate_fitness\n\n                if new_candidate_fitness < func(gbest):\n                    gbest = new_candidate\n\n                population[i] = apply_boundaries(new_candidate)\n\n        return gbest", "name": "HybridPSODE", "description": "Novel Hybrid Algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) for black box optimization.", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "An exception occured: Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 30, in __call__\n  File \"<string>\", line 16, in mutate\nIndexError: index 20 is out of bounds for axis 0 with size 5\n.", "error": "IndexError('index 20 is out of bounds for axis 0 with size 5')Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 30, in __call__\n  File \"<string>\", line 16, in mutate\nIndexError: index 20 is out of bounds for axis 0 with size 5\n", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "52f5444e-b09c-4b08-b9c5-67a48081295a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.num_iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n\n        def mutate(x, best, gbest, F=0.5):\n            idxs = np.random.choice(self.population_size, size=3, replace=False)\n            a, b, c = x[idxs]\n            return np.clip(a + F * (b - c), -5.0, 5.0)\n\n        def apply_boundaries(x):\n            return np.clip(x, -5.0, 5.0)\n\n        population = initialize_population()\n        pbest = population.copy()\n        fitness_pbest = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(fitness_pbest)\n        gbest = pbest[gbest_idx]\n\n        for _ in range(self.num_iterations):\n            for i in range(self.population_size):\n                new_candidate = mutate(population[i], pbest[i], gbest)\n                new_candidate_fitness = func(new_candidate)\n                if new_candidate_fitness < fitness_pbest[i]:\n                    pbest[i] = new_candidate\n                    fitness_pbest[i] = new_candidate_fitness\n\n                if new_candidate_fitness < func(gbest):\n                    gbest = new_candidate\n\n                population[i] = apply_boundaries(new_candidate)\n\n        return gbest", "name": "HybridPSODE", "description": "Novel Hybrid Algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0ad497d1-848b-443f-83c1-b0d77573e7f3", "metadata": {}, "mutation_prompt": null}
