{"id": "c004e041-bdb1-4c46-8122-373d019eef53", "solution": "import numpy as np\n\nclass PSO_ADE_Optimizer:\n    def __init__(self, budget, dim, population_size=30, max_iter=1000, c1=2.05, c2=2.05, f=0.5, k=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.k = k\n        \n    def __call__(self, func):\n        def pso_ade(func, budget, dim, population_size, max_iter, c1, c2, f, k):\n            # PSO Initialization\n            swarm_position = np.random.uniform(-5.0, 5.0, (population_size, dim))\n            swarm_velocity = np.zeros((population_size, dim))\n            pbest_position = swarm_position.copy()\n            pbest_value = np.full(population_size, np.inf)\n            gbest_position = np.zeros(dim)\n            gbest_value = np.inf\n            \n            # DE Initialization\n            candidates = np.random.uniform(-5.0, 5.0, (3*population_size, dim))\n            candidates_values = np.array([func(candidate) for candidate in candidates])\n            for i in range(max_iter):\n                for j in range(population_size):\n                    # PSO Update\n                    swarm_velocity[j] = f * swarm_velocity[j] + c1 * np.random.rand() * (pbest_position[j] - swarm_position[j]) + c2 * np.random.rand() * (gbest_position - swarm_position[j])\n                    swarm_position[j] = np.clip(swarm_position[j] + swarm_velocity[j], -5.0, 5.0)\n                    \n                    # ADE Update\n                    indices = np.random.choice(3*population_size, 3, replace=False)\n                    candidate = candidates[indices[0]] + k * (candidates[indices[1]] - candidates[indices[2]])\n                    candidate_value = func(candidate)\n                    if candidate_value < candidates_values[indices[0]]:\n                        candidates[indices[0]] = candidate\n                        candidates_values[indices[0]] = candidate_value\n                        \n                    # Update pbest and gbest\n                    if candidates_values[indices[0]] < pbest_value[j]:\n                        pbest_value[j] = candidates_values[indices[0]]\n                        pbest_position[j] = candidates[indices[0]]\n                    if pbest_value[j] < gbest_value:\n                        gbest_value = pbest_value[j]\n                        gbest_position = pbest_position[j]\n                        \n                    budget -= 1\n                    if budget == 0:\n                        return gbest_value\n                    \n            return gbest_value\n        \n        return pso_ade(func, self.budget, self.dim, self.population_size, self.max_iter, self.c1, self.c2, self.f, self.k)", "name": "PSO_ADE_Optimizer", "description": "An innovative metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Adaptive Differential Evolution (ADE) for efficient black box optimization in high-dimensional spaces.", "configspace": "", "generation": 0, "fitness": 0.16105560129557775, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.34116827056257415, 0.32606518711821986, 0.3426811629711951, 0.3168121761597109, 0.3057859688615546, 0.31148824695959354, 0.3100148389859756, 0.30501095627915054, 0.32369821941005594, 0.019850072124959706, 0.010603085157089298, 0.014406976924451032, 0.01016088060233522, 0.025569297692923598, 0.005626450931205396, 0.006733545856676404, 0.0031298008153413104, 0.009727471129122423, 0.07173222956321001, 0.06552960724398704, 0.07189754507779866, 0.06888364306239725, 0.07347647462893747, 0.07978780070663272, 0.062362688189565585, 0.07644579433955878, 0.06686146956997485, 0.0515459579964358, 0.05287977691000345, 0.05138973560989635, 0.0492551512533439, 0.06063921594185362, 0.050229682129346975, 0.06614886483705396, 0.06119730586733041, 0.05584346630828563, 0.9272856651867655, 0.9288251320291444, 0.9463815145921345, 0.9071269219576211, 0.9360061382658271, 0.9368975636897366, 0.9550686057867099, 0.9778807283900733, 0.9616577425408519, 0.1407668113247641, 0.12554088932658303, 0.11291544113504803, 0.10363291433883626, 0.12750933068664505, 0.11663748568169308, 0.10823879362948974, 0.09019260532901086, 0.1206829455683599, 0.22425904816451758, 0.21005708476870766, 0.22552365318705148, 0.2371462704320576, 0.20830474356762008, 0.20708522041399624, 0.21386554688158277, 0.21668144216325236, 0.20981125701068248, 0.06105436883668003, 0.07833088414413791, 0.066384038294381, 0.07798151648429996, 0.08179703223514878, 0.07061012840066627, 0.07977384718161684, 0.06884116769237114, 0.07990717545725579, 0.08453703136630342, 0.07781085589738956, 0.0823961033497792, 0.08753652729781503, 0.0914318615656422, 0.08574418772510417, 0.1024273777259872, 0.10835115408270357, 0.06788760736026311, 0.01606890789348303, 0.0032746754847108317, 0.004170932817674111, 0.004956993268526055, 0.015827492941254073, 0.01590643438844841, 0.015042161227902806, 0.023127094894240474, 0.007862450901659712, 0.08337783619061756, 0.11230674769295768, 0.11383075478409688, 0.15256515576884233, 0.10450400015692707, 0.10417166907121611, 0.10245786680209112, 0.10058312713416218, 0.107206896918151, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0558935975694449, 0.056795674503408056, 0.05567514278204966, 0.06113612271813307, 0.05205135304115416, 0.0474290003558806, 0.049922962091868084, 0.038383411952725544, 0.04189590494131157, 0.28305347285992033, 0.29596547202000634, 0.27563714903764247, 0.2839998763011409, 0.2801435258141409, 0.29259157221506427, 0.2874974499302795, 0.29114768012598535, 0.308360770274857, 0.06347649071122563, 0.07431041863856203, 0.07150603942534361, 0.07244433137628947, 0.06790127331549012, 0.08289619984780927, 0.07302631670578197, 0.08432074185422933, 0.08474128169164974, 0.11966746332953515, 0.12566761503563462, 0.13557958294906514, 0.1409550380254142, 0.13713610431102374, 0.12959359709449259, 0.15002595092086812, 0.1360741813120081, 0.14220343390538914, 0.1942488838323858, 0.20407942719268812, 0.18730955535350868, 0.18520594071259033, 0.1903972337073263, 0.1939983663611602, 0.19606559291011005, 0.18744767538653673, 0.1893837836443517, 0.13427824938087674, 0.13433566262882557, 0.13110400130072541, 0.12984444069599776, 0.1468033314067625, 0.14020174683777986, 0.14913824111983454, 0.14765124211104352, 0.13025050804120053, 0.1698734723317944, 0.174252285142101, 0.18865190310237, 0.17154760603006924, 0.1751339333439399, 0.16870014348533846, 0.16915699626209957, 0.1771341382092696, 0.19609822498277674, 0.17272427938472212, 0.17347715155015941, 0.16373243779294622, 0.17184058757603038, 0.1785405498399526, 0.1726502822096938, 0.1663927809223169, 0.1651638911857335, 0.171921472814614, 0.15382905767301747, 0.13682795430524963, 0.15492868823385675, 0.1616090990345741, 0.15928151040295746, 0.17783229415873048, 0.1873556626393048, 0.2123937241553442, 0.2741570364026311, 0.16473153068262036, 0.2513781283720655, 0.16485590870569033, 0.17159105948625564, 0.2162501056858851, 0.18983167981762294, 0.19067883912027628, 0.1613575302224366, 0.18582253598565224, 0.17552297204410627, 0.18675881873006406, 0.19222632216189472, 0.18726011160671152, 0.1890901399652335, 0.1926912899915768, 0.1782832891150662, 0.17409993101182408, 0.18331043219673393, 0.0663477611969191, 0.06785621282930931, 0.07340678704916825, 0.06432119744679243, 0.062289591670361966, 0.09702453409022616, 0.07022198321419659, 0.06407125640817446, 0.0591081089967842]}, "mutation_prompt": null}
{"id": "80ff4fe8-9bd4-4616-a8c9-ee780a201152", "solution": "import numpy as np\n\nclass PSO_ADE_Optimizer:\n    def __init__(self, budget, dim, population_size=30, max_iter=1000, c1=2.05, c2=2.05, f=0.5, k=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.k = k\n        \n    def __call__(self, func):\n        def pso_ade(func, budget, dim, population_size, max_iter, c1, c2, f, k):\n            # PSO Initialization\n            swarm_position = np.random.uniform(-5.0, 5.0, (population_size, dim))\n            swarm_velocity = np.zeros((population_size, dim))\n            pbest_position = swarm_position.copy()\n            pbest_value = np.full(population_size, np.inf)\n            gbest_position = np.zeros(dim)\n            gbest_value = np.inf\n            \n            # DE Initialization\n            candidates = np.random.uniform(-5.0, 5.0, (3*population_size, dim))\n            candidates_values = np.array([func(candidate) for candidate in candidates])\n            for i in range(max_iter):\n                for j in range(population_size):\n                    # PSO Update\n                    swarm_velocity[j] = f * swarm_velocity[j] + c1 * np.random.rand() * (pbest_position[j] - swarm_position[j]) + c2 * np.random.rand() * (gbest_position - swarm_position[j])\n                    swarm_position[j] = np.clip(swarm_position[j] + swarm_velocity[j], -5.0, 5.0)\n                    \n                    # ADE Update\n                    indices = np.random.choice(3*population_size, 3, replace=False)\n                    candidate = candidates[indices[0]] + k * (candidates[indices[1]] - candidates[indices[2]])\n                    candidate_value = func(candidate)\n                    if candidate_value < candidates_values[indices[0]]:\n                        candidates[indices[0]] = candidate\n                        candidates_values[indices[0]] = candidate_value\n                        \n                    # Update pbest and gbest\n                    if candidates_values[indices[0]] < pbest_value[j]:\n                        pbest_value[j] = candidates_values[indices[0]]\n                        pbest_position[j] = candidates[indices[0]]\n                    if pbest_value[j] < gbest_value:\n                        gbest_value = pbest_value[j]\n                        gbest_position = pbest_position[j]\n                        \n                    budget -= 1\n                    if budget == 0:\n                        return gbest_value\n                    \n            return gbest_value\n        \n        return pso_ade(func, self.budget, self.dim, self.population_size, self.max_iter, self.c1, self.c2, self.f, self.k)", "name": "PSO_ADE_Optimizer", "description": "An innovative metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Adaptive Differential Evolution (ADE) for efficient black box optimization in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c004e041-bdb1-4c46-8122-373d019eef53", "metadata": {"aucs": [0.34116827056257415, 0.32606518711821986, 0.3426811629711951, 0.3168121761597109, 0.3057859688615546, 0.31148824695959354, 0.3100148389859756, 0.30501095627915054, 0.32369821941005594, 0.019850072124959706, 0.010603085157089298, 0.014406976924451032, 0.01016088060233522, 0.025569297692923598, 0.005626450931205396, 0.006733545856676404, 0.0031298008153413104, 0.009727471129122423, 0.07173222956321001, 0.06552960724398704, 0.07189754507779866, 0.06888364306239725, 0.07347647462893747, 0.07978780070663272, 0.062362688189565585, 0.07644579433955878, 0.06686146956997485, 0.0515459579964358, 0.05287977691000345, 0.05138973560989635, 0.0492551512533439, 0.06063921594185362, 0.050229682129346975, 0.06614886483705396, 0.06119730586733041, 0.05584346630828563, 0.9272856651867655, 0.9288251320291444, 0.9463815145921345, 0.9071269219576211, 0.9360061382658271, 0.9368975636897366, 0.9550686057867099, 0.9778807283900733, 0.9616577425408519, 0.1407668113247641, 0.12554088932658303, 0.11291544113504803, 0.10363291433883626, 0.12750933068664505, 0.11663748568169308, 0.10823879362948974, 0.09019260532901086, 0.1206829455683599, 0.22425904816451758, 0.21005708476870766, 0.22552365318705148, 0.2371462704320576, 0.20830474356762008, 0.20708522041399624, 0.21386554688158277, 0.21668144216325236, 0.20981125701068248, 0.06105436883668003, 0.07833088414413791, 0.066384038294381, 0.07798151648429996, 0.08179703223514878, 0.07061012840066627, 0.07977384718161684, 0.06884116769237114, 0.07990717545725579, 0.08453703136630342, 0.07781085589738956, 0.0823961033497792, 0.08753652729781503, 0.0914318615656422, 0.08574418772510417, 0.1024273777259872, 0.10835115408270357, 0.06788760736026311, 0.01606890789348303, 0.0032746754847108317, 0.004170932817674111, 0.004956993268526055, 0.015827492941254073, 0.01590643438844841, 0.015042161227902806, 0.023127094894240474, 0.007862450901659712, 0.08337783619061756, 0.11230674769295768, 0.11383075478409688, 0.15256515576884233, 0.10450400015692707, 0.10417166907121611, 0.10245786680209112, 0.10058312713416218, 0.107206896918151, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0558935975694449, 0.056795674503408056, 0.05567514278204966, 0.06113612271813307, 0.05205135304115416, 0.0474290003558806, 0.049922962091868084, 0.038383411952725544, 0.04189590494131157, 0.28305347285992033, 0.29596547202000634, 0.27563714903764247, 0.2839998763011409, 0.2801435258141409, 0.29259157221506427, 0.2874974499302795, 0.29114768012598535, 0.308360770274857, 0.06347649071122563, 0.07431041863856203, 0.07150603942534361, 0.07244433137628947, 0.06790127331549012, 0.08289619984780927, 0.07302631670578197, 0.08432074185422933, 0.08474128169164974, 0.11966746332953515, 0.12566761503563462, 0.13557958294906514, 0.1409550380254142, 0.13713610431102374, 0.12959359709449259, 0.15002595092086812, 0.1360741813120081, 0.14220343390538914, 0.1942488838323858, 0.20407942719268812, 0.18730955535350868, 0.18520594071259033, 0.1903972337073263, 0.1939983663611602, 0.19606559291011005, 0.18744767538653673, 0.1893837836443517, 0.13427824938087674, 0.13433566262882557, 0.13110400130072541, 0.12984444069599776, 0.1468033314067625, 0.14020174683777986, 0.14913824111983454, 0.14765124211104352, 0.13025050804120053, 0.1698734723317944, 0.174252285142101, 0.18865190310237, 0.17154760603006924, 0.1751339333439399, 0.16870014348533846, 0.16915699626209957, 0.1771341382092696, 0.19609822498277674, 0.17272427938472212, 0.17347715155015941, 0.16373243779294622, 0.17184058757603038, 0.1785405498399526, 0.1726502822096938, 0.1663927809223169, 0.1651638911857335, 0.171921472814614, 0.15382905767301747, 0.13682795430524963, 0.15492868823385675, 0.1616090990345741, 0.15928151040295746, 0.17783229415873048, 0.1873556626393048, 0.2123937241553442, 0.2741570364026311, 0.16473153068262036, 0.2513781283720655, 0.16485590870569033, 0.17159105948625564, 0.2162501056858851, 0.18983167981762294, 0.19067883912027628, 0.1613575302224366, 0.18582253598565224, 0.17552297204410627, 0.18675881873006406, 0.19222632216189472, 0.18726011160671152, 0.1890901399652335, 0.1926912899915768, 0.1782832891150662, 0.17409993101182408, 0.18331043219673393, 0.0663477611969191, 0.06785621282930931, 0.07340678704916825, 0.06432119744679243, 0.062289591670361966, 0.09702453409022616, 0.07022198321419659, 0.06407125640817446, 0.0591081089967842]}, "mutation_prompt": null}
