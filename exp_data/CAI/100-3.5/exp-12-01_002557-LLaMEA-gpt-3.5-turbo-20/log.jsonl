{"id": "01569514-defe-4e05-bcdf-b8b28157a3e0", "solution": "import numpy as np\n\nclass QuantumInspiredBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, A=0.5, r=0.5, Qmin=0.0, Qmax=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.A = A\n        self.r = r\n        self.Qmin = Qmin\n        self.Qmax = Qmax\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_solution = population[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        for _ in range(self.budget):\n            Q = np.random.uniform(self.Qmin, self.Qmax, self.population_size)\n            v = np.random.uniform(-1, 1, (self.population_size, self.dim))\n            new_population = population + (population - best_solution) * self.A + v * Q[:, None]\n\n            for i in range(self.population_size):\n                for j in range(self.dim):\n                    if np.random.rand() > self.r:\n                        new_population[i, j] = best_solution[j] + np.random.uniform(-1, 1) * 5.0\n\n            new_population = np.clip(new_population, -5.0, 5.0)\n            new_fitness = np.array([func(ind) for ind in new_population])\n\n            for i in range(self.population_size):\n                if new_fitness[i] < fitness[i] and np.random.rand() < Q[i]:\n                    population[i] = new_population[i]\n                    fitness[i] = new_fitness[i]\n\n            if np.min(fitness) < best_fitness:\n                best_solution = population[np.argmin(fitness)]\n                best_fitness = np.min(fitness)\n\n        return best_solution", "name": "QuantumInspiredBatAlgorithm", "description": "Quantum-Inspired Bat Algorithm for Black Box Optimization", "configspace": "", "generation": 0, "fitness": 0.14310409873837862, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.22708506606497214, 0.23236837471757898, 0.20861482414594135, 0.23439700623322812, 0.23916718561101802, 0.2237970042546953, 0.21602493884076446, 0.24798004185085043, 0.24187288853544342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002526567069255692, 0.05611427972066685, 0.05796888694026925, 0.06541950038013133, 0.06248796557479486, 0.07441588337402771, 0.06210419546938939, 0.05467561646071517, 0.07210947439010928, 0.06012743398390774, 0.05228332629172017, 0.0525394535363648, 0.0528250084069658, 0.06622140105559082, 0.0718876664942818, 0.05087325738943271, 0.04898222500196048, 0.052748513544890185, 0.054541587136568204, 0.9884125004252057, 0.9862052000532576, 0.9973464679528847, 0.9918188742780367, 0.9920648855408768, 0.9828269697103567, 0.987731815260116, 0.9932548510780577, 0.9838636404734253, 0.10961717409174176, 0.09712996045516209, 0.13391572340407187, 0.11798580647030543, 0.10133146705226759, 0.12093410672235771, 0.09833059921078824, 0.14941866790948466, 0.13034886680025137, 0.18076831494656365, 0.13917220366259375, 0.15790420567156727, 0.1520887054348845, 0.16956883220104135, 0.14211978738573072, 0.19747357405149657, 0.15253977853908784, 0.1411179607798324, 0.0815414565105963, 0.07619797521379479, 0.051521227076247844, 0.06964477569621852, 0.06802299622985242, 0.030533866070021065, 0.06661063203480977, 0.025659455417187393, 0.029025020502621013, 0.022363233720119946, 0.023365856787393002, 0.03811201937749753, 0.013485753702322523, 0.05454787595493271, 0.03227390314464096, 0.06551698068073497, 0.020188917777313464, 0.048033298803114355, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049948942018194664, 0.03437608395598524, 0.03800630784921866, 0.08153821234909098, 0.01932733119800656, 0.00838085013608414, 0.027494762751954838, 0.04119645051270748, 0.03383929617772197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015217094482658289, 0.003913969830336095, 0.00795774703269636, 0.004510326773217832, 0.015289811213649807, 0.009512902864498018, 0.029170163863038057, 0.01082531472143311, 0.022797174517835028, 0.21926523201682524, 0.23465390511445117, 0.23410639809572842, 0.25027439913899163, 0.24363818887110955, 0.25704261005661755, 0.23311701702465315, 0.21659337592562333, 0.23505672060676708, 0.0827096059252399, 0.07970021940449445, 0.06343330121330437, 0.08263636607319569, 0.06268787372453155, 0.059166060616455796, 0.06071607904585363, 0.06619362170317289, 0.06611749212671691, 0.162914003233953, 0.1413904680358592, 0.14711010584209339, 0.15057120876126973, 0.14996385046488925, 0.11997765256701465, 0.15006398501896767, 0.16339413195631625, 0.12954402118603958, 0.19345515690108028, 0.18441893273940368, 0.17622028452266036, 0.19015813161371864, 0.17997735307410345, 0.1925661565529041, 0.18360500057890317, 0.1957482992214543, 0.18402820721539703, 0.12864397264799843, 0.13581336096155994, 0.14324607220664243, 0.12240375324262331, 0.11821975858627798, 0.12218911437180757, 0.12809544388728622, 0.1420508802347642, 0.14131153418516407, 0.18851010626363662, 0.1552506687246834, 0.15234984788949535, 0.1499388446011677, 0.16884881855323142, 0.1479103168972028, 0.14658056613410486, 0.15060070019075789, 0.14859969219390423, 0.16558053276661466, 0.17857350889753287, 0.15751230882083367, 0.14941540907756645, 0.15816879731579303, 0.15600343529279304, 0.1654796555295197, 0.16270215597184745, 0.15081357469194423, 0.16397966373907968, 0.16498466716956828, 0.17555215374440103, 0.21844332985877468, 0.14750295771944588, 0.16860204657276479, 0.17082715753812083, 0.174150970481723, 0.18951373019681428, 0.15092538639686248, 0.1490426522274767, 0.18205504908079595, 0.14597898710756618, 0.16721477145660024, 0.17401496441936093, 0.196677489251447, 0.19798202209900928, 0.18652161990339633, 0.18339709760180956, 0.17823909188186193, 0.1789956022936825, 0.2017669256095299, 0.20203011400982762, 0.18043677263714852, 0.17909130278505359, 0.18358112461340892, 0.18830685802274638, 0.044521275458005216, 0.0658823004715694, 0.053027666648307825, 0.060471405347959806, 0.07020610970882846, 0.07055056883206723, 0.056618329800868006, 0.053812215123254625, 0.0485542023894]}, "mutation_prompt": null}
{"id": "e8faec5e-71bd-4aa5-9551-9a7b023069bb", "solution": "import numpy as np\n\nclass QuantumInspiredBatAlgorithm:\n    def __init__(self, budget, dim, population_size=10, A=0.5, r=0.5, Qmin=0.0, Qmax=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.A = A\n        self.r = r\n        self.Qmin = Qmin\n        self.Qmax = Qmax\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_solution = population[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        for _ in range(self.budget):\n            Q = np.random.uniform(self.Qmin, self.Qmax, self.population_size)\n            v = np.random.uniform(-1, 1, (self.population_size, self.dim))\n            new_population = population + (population - best_solution) * self.A + v * Q[:, None]\n\n            for i in range(self.population_size):\n                for j in range(self.dim):\n                    if np.random.rand() > self.r:\n                        new_population[i, j] = best_solution[j] + np.random.uniform(-1, 1) * 5.0\n\n            new_population = np.clip(new_population, -5.0, 5.0)\n            new_fitness = np.array([func(ind) for ind in new_population])\n\n            for i in range(self.population_size):\n                if new_fitness[i] < fitness[i] and np.random.rand() < Q[i]:\n                    population[i] = new_population[i]\n                    fitness[i] = new_fitness[i]\n\n            if np.min(fitness) < best_fitness:\n                best_solution = population[np.argmin(fitness)]\n                best_fitness = np.min(fitness)\n\n        return best_solution", "name": "QuantumInspiredBatAlgorithm", "description": "Quantum-Inspired Bat Algorithm for Black Box Optimization", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "01569514-defe-4e05-bcdf-b8b28157a3e0", "metadata": {"aucs": [0.22708506606497214, 0.23236837471757898, 0.20861482414594135, 0.23439700623322812, 0.23916718561101802, 0.2237970042546953, 0.21602493884076446, 0.24798004185085043, 0.24187288853544342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002526567069255692, 0.05611427972066685, 0.05796888694026925, 0.06541950038013133, 0.06248796557479486, 0.07441588337402771, 0.06210419546938939, 0.05467561646071517, 0.07210947439010928, 0.06012743398390774, 0.05228332629172017, 0.0525394535363648, 0.0528250084069658, 0.06622140105559082, 0.0718876664942818, 0.05087325738943271, 0.04898222500196048, 0.052748513544890185, 0.054541587136568204, 0.9884125004252057, 0.9862052000532576, 0.9973464679528847, 0.9918188742780367, 0.9920648855408768, 0.9828269697103567, 0.987731815260116, 0.9932548510780577, 0.9838636404734253, 0.10961717409174176, 0.09712996045516209, 0.13391572340407187, 0.11798580647030543, 0.10133146705226759, 0.12093410672235771, 0.09833059921078824, 0.14941866790948466, 0.13034886680025137, 0.18076831494656365, 0.13917220366259375, 0.15790420567156727, 0.1520887054348845, 0.16956883220104135, 0.14211978738573072, 0.19747357405149657, 0.15253977853908784, 0.1411179607798324, 0.0815414565105963, 0.07619797521379479, 0.051521227076247844, 0.06964477569621852, 0.06802299622985242, 0.030533866070021065, 0.06661063203480977, 0.025659455417187393, 0.029025020502621013, 0.022363233720119946, 0.023365856787393002, 0.03811201937749753, 0.013485753702322523, 0.05454787595493271, 0.03227390314464096, 0.06551698068073497, 0.020188917777313464, 0.048033298803114355, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049948942018194664, 0.03437608395598524, 0.03800630784921866, 0.08153821234909098, 0.01932733119800656, 0.00838085013608414, 0.027494762751954838, 0.04119645051270748, 0.03383929617772197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015217094482658289, 0.003913969830336095, 0.00795774703269636, 0.004510326773217832, 0.015289811213649807, 0.009512902864498018, 0.029170163863038057, 0.01082531472143311, 0.022797174517835028, 0.21926523201682524, 0.23465390511445117, 0.23410639809572842, 0.25027439913899163, 0.24363818887110955, 0.25704261005661755, 0.23311701702465315, 0.21659337592562333, 0.23505672060676708, 0.0827096059252399, 0.07970021940449445, 0.06343330121330437, 0.08263636607319569, 0.06268787372453155, 0.059166060616455796, 0.06071607904585363, 0.06619362170317289, 0.06611749212671691, 0.162914003233953, 0.1413904680358592, 0.14711010584209339, 0.15057120876126973, 0.14996385046488925, 0.11997765256701465, 0.15006398501896767, 0.16339413195631625, 0.12954402118603958, 0.19345515690108028, 0.18441893273940368, 0.17622028452266036, 0.19015813161371864, 0.17997735307410345, 0.1925661565529041, 0.18360500057890317, 0.1957482992214543, 0.18402820721539703, 0.12864397264799843, 0.13581336096155994, 0.14324607220664243, 0.12240375324262331, 0.11821975858627798, 0.12218911437180757, 0.12809544388728622, 0.1420508802347642, 0.14131153418516407, 0.18851010626363662, 0.1552506687246834, 0.15234984788949535, 0.1499388446011677, 0.16884881855323142, 0.1479103168972028, 0.14658056613410486, 0.15060070019075789, 0.14859969219390423, 0.16558053276661466, 0.17857350889753287, 0.15751230882083367, 0.14941540907756645, 0.15816879731579303, 0.15600343529279304, 0.1654796555295197, 0.16270215597184745, 0.15081357469194423, 0.16397966373907968, 0.16498466716956828, 0.17555215374440103, 0.21844332985877468, 0.14750295771944588, 0.16860204657276479, 0.17082715753812083, 0.174150970481723, 0.18951373019681428, 0.15092538639686248, 0.1490426522274767, 0.18205504908079595, 0.14597898710756618, 0.16721477145660024, 0.17401496441936093, 0.196677489251447, 0.19798202209900928, 0.18652161990339633, 0.18339709760180956, 0.17823909188186193, 0.1789956022936825, 0.2017669256095299, 0.20203011400982762, 0.18043677263714852, 0.17909130278505359, 0.18358112461340892, 0.18830685802274638, 0.044521275458005216, 0.0658823004715694, 0.053027666648307825, 0.060471405347959806, 0.07020610970882846, 0.07055056883206723, 0.056618329800868006, 0.053812215123254625, 0.0485542023894]}, "mutation_prompt": null}
