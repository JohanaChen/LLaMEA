{"id": "1129c692-57fb-40ec-9009-59981a7a781e", "solution": "import numpy as np\n\nclass HybridFADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.firefly_alpha = 0.5\n        self.de_cr = 0.5\n        self.de_f = 0.5\n\n    def __call__(self, func):\n        def init_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        \n        def firefly_move(firefly, best_firefly):\n            beta = 1 / (1 + self.firefly_alpha * np.linalg.norm(firefly - best_firefly))\n            new_pos = firefly + beta * (best_firefly - firefly) + 0.01 * np.random.normal(size=self.dim)\n            return np.clip(new_pos, -5.0, 5.0)\n        \n        def de_mutation(population):\n            donor = np.zeros((self.population_size, self.dim))\n            for i in range(self.population_size):\n                candidates = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                donor[i] = np.clip(population[a] + self.de_f * (population[b] - population[c]), -5.0, 5.0)\n            return donor\n        \n        population = init_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        for _ in range(self.budget - self.population_size):\n            donor = de_mutation(population)\n            for i in range(self.population_size):\n                if func(donor[i]) < fitness[i]:\n                    population[i] = donor[i]\n                    fitness[i] = func(donor[i])\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n            \n            for i in range(self.population_size):\n                population[i] = firefly_move(population[i], best_solution)\n        \n        return best_solution", "name": "HybridFADE", "description": "Hybrid Firefly Algorithm with Differential Evolution (HybridFADE): Combines the attractiveness mechanism of firefly algorithm with the mutation strategy of differential evolution to explore and exploit the search space efficiently.", "configspace": "", "generation": 0, "fitness": 0.18740237924503997, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.5681570981175773, 0.5766886285114723, 0.5891708454208255, 0.5272970163794084, 0.5566644005562791, 0.49039461986850086, 0.4969462901145808, 0.5620530159723545, 0.38755360736877487, 0.06660112548356067, 0.006657345048506458, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11435069344612259, 0.1614694465648201, 0.09238661732875353, 0.10245752860388457, 0.09694036896785241, 0.06219765118466325, 0.06807221721982293, 0.14449069295366368, 0.09210495033519328, 0.07251240550016758, 0.06426785772235466, 0.09510770023134718, 0.09502950419113187, 0.05712748974272819, 0.06293639139671248, 0.09840542291659915, 0.07559830208398488, 0.07528262318667311, 0.07595792768496334, 0.09492785653039593, 0.07228745505969114, 0.1321125849962469, 0.09662319726170099, 0.09576574476092059, 0.12329142344568156, 0.13890486699704796, 0.3923754826363739, 0.30711850776959004, 0.08870805287131112, 0.2965566139713144, 0.2869564219515338, 0.1036099351194576, 0.1663637557416472, 0.19971340751421496, 0.20925333768548504, 0.1314108019896605, 0.9239378515537529, 0.22848694127439062, 0.36324252172049754, 0.26524129538469765, 0.38093002685701194, 0.11307036095316836, 0.1296061493162629, 0.9269024766530775, 0.23427736615483696, 0.24845434787093867, 0.09812793999400615, 0.1334831151512662, 0.18061074325886672, 0.1578101461044975, 9.999999999998899e-05, 0.1848631599117766, 0.12902123555700384, 0.20948153639489808, 0.2082692071243638, 0.16176859974244362, 0.13114272569888707, 0.11986865902057675, 0.12947954525466399, 0.11995695748228696, 0.1552307253359928, 0.1541165276539116, 0.12655027899463334, 0.03037864898503717, 0.04852139138974998, 0.05712230853348699, 0.007751655267158819, 0.1218797094946511, 0.036013661073170056, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07072543569893897, 0.09701166766537139, 0.10346047269742287, 0.04528648035583083, 0.062465352783481864, 0.03594254875899039, 0.09951146009195055, 0.12117038747477893, 0.21421164574554896, 0.03521599909753281, 0.026542710089259347, 0.06047408659835185, 0.048674581564096986, 0.08053388969551545, 0.031917504939664054, 0.013516681204234882, 0.00784169227239273, 0.05570259230274355, 0.1638741904038834, 0.10547085649076782, 0.08876680022359773, 0.011038985925994727, 0.11340833305497067, 0.07304132385162543, 0.119876184335455, 0.11364376628940331, 0.17185210425393904, 0.46958042724013016, 0.4968604417234531, 0.5007852525174239, 0.482727698268244, 0.47196813117257097, 0.4546430633849089, 0.447999910812939, 0.4703147450992292, 0.45274026459133243, 0.07436128132426856, 0.07137953080491022, 0.06910079616557763, 0.14544907927459605, 0.1565685246533931, 0.1228815950959159, 0.14306104883166715, 0.07174489658873062, 0.08029513720637005, 0.2568386829023762, 0.14912169497091077, 0.18868346216929444, 0.1942668658781891, 0.26884791217327875, 0.13833982531428868, 0.2838444392915417, 0.16725274609008633, 0.24926515469326083, 0.2473718900073355, 0.22686362659352421, 0.21790038032987247, 0.2300586905602956, 0.1858643767753163, 0.24298262677470772, 0.19355919599353688, 0.29369740668950695, 0.21107675977096774, 0.2046989534698379, 0.20228790886475545, 0.1237258441400958, 0.1776000049229104, 0.15020581785700537, 0.2835993100505857, 0.17574760961619051, 0.18124489315903025, 0.18586299500756298, 0.2672056068992218, 0.2311671641644678, 0.19227393917709434, 0.21949148191650758, 0.2163294684203395, 0.20469309338725095, 0.210539545967664, 0.24725003512999966, 0.18195802768001557, 0.16116809131421506, 0.19824075183067125, 0.16096969115403859, 0.22512083006279437, 0.1615216604231111, 0.2066698274234201, 0.19085983547454966, 0.1830704352069179, 0.16756735389530553, 0.18650087133642368, 0.18694781242785996, 0.18387399597155285, 0.6213168946798733, 0.1991667518830479, 0.8031127473009152, 0.18719211096752475, 0.27573775775973186, 0.164846949979073, 0.3757587851454782, 0.21159092795316325, 0.46717304196494225, 0.4122500411071296, 0.16313407569103178, 0.31695283933331364, 0.11203407313461522, 0.17779701754208777, 0.3182778790630276, 0.17219800947432817, 0.17475902322915227, 0.19229299457191018, 0.19147648598755773, 0.2418798052237877, 0.20847655200852833, 0.17870651087090095, 0.2030246306501271, 0.20347303190464228, 0.0842477527194655, 0.08250682273561838, 0.10291248172355483, 0.08192920855041408, 0.09362909526727947, 0.07993347554760133, 0.06201106450380689, 0.09104017321479518, 0.07264970772160728]}, "mutation_prompt": null}
{"id": "a5a523e3-bc9c-4a46-ba28-d6dc92f9853e", "solution": "import numpy as np\n\nclass EnhancedHybridFADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.firefly_alpha = 0.5\n        self.de_cr = 0.5\n        self.de_f = 0.5\n        self.local_search_rate = 0.1\n\n    def __call__(self, func):\n        def init_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        \n        def firefly_move(firefly, best_firefly):\n            beta = 1 / (1 + self.firefly_alpha * np.linalg.norm(firefly - best_firefly))\n            new_pos = firefly + beta * (best_firefly - firefly) + 0.01 * np.random.normal(size=self.dim)\n            return np.clip(new_pos, -5.0, 5.0)\n        \n        def de_mutation(population):\n            donor = np.zeros((self.population_size, self.dim))\n            for i in range(self.population_size):\n                candidates = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                donor[i] = np.clip(population[a] + self.de_f * (population[b] - population[c]), -5.0, 5.0)\n            return donor\n        \n        def local_search(individual):\n            perturbed = individual + self.local_search_rate * np.random.normal(size=self.dim)\n            return np.clip(perturbed, -5.0, 5.0)\n        \n        population = init_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        for _ in range(self.budget - self.population_size):\n            donor = de_mutation(population)\n            for i in range(self.population_size):\n                if func(donor[i]) < fitness[i]:\n                    population[i] = donor[i]\n                    fitness[i] = func(donor[i])\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n            \n            for i in range(self.population_size):\n                population[i] = firefly_move(population[i], best_solution)\n                population[i] = local_search(population[i])\n        \n        return best_solution", "name": "EnhancedHybridFADE", "description": "Enhanced Hybrid Firefly Algorithm with Differential Evolution (EnhancedHybridFADE): Incorporates a local search mechanism to improve exploitation of local optima.", "configspace": "", "generation": 1, "fitness": 0.16995904389589836, "feedback": "", "error": "", "parent_id": "1129c692-57fb-40ec-9009-59981a7a781e", "metadata": {"aucs": [0.4265529394262505, 0.3759133655396377, 0.4073874423385093, 0.4146917554256163, 0.40835629290267206, 0.43068338466431844, 0.4046608518505699, 0.39493117753402085, 0.3611432445896503, 0.01711629365071854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07241120817115898, 0.11617552854141144, 0.11143294574624851, 0.08855809350857302, 0.10916986983407972, 0.10130474825758407, 0.10047382950311712, 0.10466651058798582, 0.08989243976921879, 0.055581025484749635, 0.02279014334037399, 0.1273855364585592, 0.08723481019142276, 0.06593717127098386, 0.0522600369317997, 0.0436205903723339, 0.0849061534444685, 0.0794952392983147, 0.10991607211295162, 0.10340096730893433, 0.27224318282199444, 0.22549733472881128, 0.11768520559233475, 0.16579248908908284, 0.10036648986762864, 0.9254816990533598, 0.27232744238099527, 0.2704869746542339, 0.1620697189998015, 0.2529130743873915, 0.2231894073758275, 0.22042455986660192, 0.2500770506752943, 0.2614087764790822, 0.24314776098235047, 0.2512182065863503, 0.22149908925948758, 0.22368358463786997, 0.3162505338326167, 0.21150589871678527, 0.20467742961637547, 0.3221077585615143, 0.17579184924241942, 0.36013217967891087, 0.13569617181528215, 0.20530254802587855, 0.1495384488788266, 0.04942062536380687, 0.12328542096928707, 0.10962992855312992, 9.999999999998899e-05, 0.16129416862791657, 0.20163719979797712, 0.16849475580537132, 0.15943376132443554, 0.13936720062749353, 0.1296948386248743, 0.12494609371974164, 0.13867639259622466, 0.12535102420227062, 0.15750858446282823, 0.12488735426424391, 0.1359216439284593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02790139800477942, 0.088991146110173, 0.07086275592654456, 0.10453180504561421, 0.07895691656233284, 0.02678921382479149, 0.11595764491106564, 0.08947704033936221, 0.1048377167303377, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08881692387261597, 0.0777375037657343, 0.07716286453971966, 0.06849153338698144, 0.07741743908064613, 0.1139595800308898, 0.05931612366801786, 0.10161560770800604, 0.08276511185273971, 0.3776307149550854, 0.3854554705278238, 0.398164581451652, 0.3926153161513517, 0.3486241753718321, 0.40213582600699405, 0.40234442549113303, 0.3856181947428291, 0.36155283160654983, 0.09471912816670303, 0.08330163199345919, 0.07725651164920821, 0.12650204900690132, 0.08157941723675244, 0.11942920259869971, 0.07477717740129408, 0.09674926625484226, 0.11063440933854674, 0.18084441208862911, 0.13965889926499186, 0.2365256360899285, 0.21730716026893981, 0.196837596105783, 0.17148754227555796, 0.09357878696448207, 0.2403079975515805, 0.08979929268279652, 0.20531886222953788, 0.2859843329245052, 0.30357199877071916, 0.24941903171142865, 0.2632680478826024, 0.22827160292908522, 0.22779733184484252, 0.2451693010062076, 0.2257452508936011, 0.15498836269452043, 0.19353445621750354, 0.21919218182333589, 0.15284292425378132, 0.21160583857894166, 0.19599862270305768, 0.14906273780920942, 0.20317009190979007, 0.1780899178766353, 0.21372944471712174, 0.2246174613856179, 0.22495733587519862, 0.19704412042064812, 0.19991575076084933, 0.18387326178486896, 0.26696758678696664, 0.1822952407649876, 0.20497548349165795, 0.1904862789367906, 0.16457472892102598, 0.17094798805250921, 0.17349113475933065, 0.1692090385451004, 0.1971523694864854, 0.17409556401717474, 0.17848678181278133, 0.16634605982685968, 0.18566685267112804, 0.5819967300452822, 0.17194966717719073, 0.589010020043846, 0.19873172271083772, 0.16735380797688626, 0.6236630904334657, 0.143827220399938, 0.17590231782599275, 0.43937508869364894, 0.2079268200827512, 0.4364811025051456, 0.2041629770720016, 0.296107321670138, 0.1673195403841794, 0.2950928281456072, 0.27549321297351204, 0.3535289395318839, 0.18990851036926493, 0.17780759307253702, 0.17911799347796875, 0.18346952556784513, 0.185585096099671, 0.17385425181990977, 0.19620320014937465, 0.17741041429409687, 0.1749400681023321, 0.08317108969409015, 0.0778020333889532, 0.07568222781372824, 0.0831230285979927, 0.0698447402595217, 0.06989418059280672, 0.058310187289722704, 0.07492402681115273, 0.08848002402825894]}, "mutation_prompt": null}
