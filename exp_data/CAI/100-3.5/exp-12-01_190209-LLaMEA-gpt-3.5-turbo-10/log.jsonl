{"id": "7d713277-9c5d-4ad1-99a9-fe7d813e0fbb", "solution": "import numpy as np\n\nclass HWDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        F = 0.5\n        CR = 0.9\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget // pop_size):\n            new_pop = np.zeros((pop_size, self.dim))\n            for i in range(pop_size):\n                idxs = np.random.choice(pop_size, 3, replace=False)\n                mutant = pop[idxs[0]] + F * (pop[idxs[1]] - pop[idxs[2]])\n                crossover = np.random.rand(self.dim) < CR\n                new_pop[i] = np.where(crossover, mutant, pop[i])\n                \n            new_fitness = np.array([func(ind) for ind in new_pop])\n            for i in range(pop_size):\n                if new_fitness[i] < fitness[i]:\n                    pop[i] = new_pop[i]\n                    fitness[i] = new_fitness[i]\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "HWDE", "description": "Harmonic Weighted Differential Evolution (HWDE) combines the concepts of harmony search, weighted differential evolution, and mutation strategies to efficiently explore and exploit the search space for optimization.", "configspace": "", "generation": 0, "fitness": 0.36930351327018635, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7824365806801671, 0.7714263916463665, 0.7614049826609832, 0.742452796079082, 0.7587699121534148, 0.7569875541882396, 0.7594435388626667, 0.7869927533929265, 0.7559787517093892, 0.5693867979696134, 0.581635634134247, 0.5633195825572257, 0.5976007906295728, 0.5951388670344169, 0.5832603172774089, 0.5883593190890187, 0.5845812586123608, 0.5553382930888557, 0.12690189767852356, 0.12525368420416072, 0.11572673115297094, 0.12053041582649437, 0.1081227630879299, 0.11258100096579293, 0.12116139689931749, 0.12151766577150369, 0.1142156235528815, 0.10193256931965311, 0.09899152861200256, 0.10485856903788338, 0.10251653042900744, 0.09896961976327079, 0.10970416414069861, 0.10244835511550499, 0.10770550347020014, 0.12085044839590153, 0.9522047253971948, 0.9622497699435608, 0.9335127703316715, 0.9551651523855854, 0.9674130809840137, 0.9419593773241132, 0.9625219683870739, 0.9774148048481646, 0.9575507047242678, 0.43093984958718456, 0.4004774355299835, 0.41084828410570573, 0.5141249237358458, 0.354817995276103, 0.4142850217436882, 0.38959461852180044, 0.4034442915468097, 0.4021448332410774, 0.7232326284217001, 0.7510349431136658, 0.7272511723539463, 0.7818415281672195, 0.6959465478522687, 0.8235076301837156, 0.7526776648261162, 0.7250238124862638, 0.71525923051393, 0.2225512751160943, 0.18040659957224525, 0.2371062805059455, 0.231184701379195, 0.266736425643588, 0.4226374522491898, 0.23969257410641265, 0.4123129034105989, 0.233510266752335, 0.1692764722799941, 0.19157173704768382, 0.3095100001637826, 0.267526706785142, 0.1534705505925753, 0.17414446020174001, 0.28749054755539794, 0.25003029350792816, 0.2001250131451623, 0.3063128610758368, 0.3626617945566406, 0.2730479712648338, 0.34089458377445714, 0.3169325915238641, 0.311695530921848, 0.3582857459321981, 0.36340257105000395, 0.3125169534913489, 0.4520619045269628, 0.4731525949098395, 0.5089117619503145, 0.48069919643422176, 0.4541969591321846, 0.5378186538530437, 0.515049866933194, 0.4662101232149163, 0.5317274753658243, 0.1506289675532898, 0.10645326382046782, 0.05643800066678073, 0.214396587804623, 0.22760839091637453, 0.21282334822890037, 0.12342620138641136, 0.11455230583929155, 0.12971662663250683, 0.27999484948360676, 0.2580338598381776, 0.2682269394708021, 0.29173875029464014, 0.283649633356745, 0.3114225945246921, 0.25852677795108514, 0.29754459563885816, 0.2789197927322218, 0.683977550963585, 0.6922707669148418, 0.6796577516541662, 0.6974213666599636, 0.646317282030664, 0.6705981158727358, 0.6881426357526375, 0.6744431981809343, 0.6960138135484227, 0.10473916019784646, 0.09570501507590945, 0.10976945669141192, 0.10595762971423717, 0.09785106626014473, 0.11406753658051605, 0.11563247820235378, 0.09979269970754134, 0.08475387194584927, 0.12827785085712562, 0.1303952020826077, 0.1313980695445056, 0.16235303564824788, 0.20190330254349942, 0.1407559441513162, 0.1257486895211477, 0.11904445790901685, 0.13289486239238246, 0.37648489580666056, 0.39389039030988093, 0.40116977036055523, 0.4054760853300944, 0.391336737905988, 0.3936865129246505, 0.3951301049240582, 0.42020331729362503, 0.40316497179372734, 0.27906914213647427, 0.2843932517797906, 0.3155684361709664, 0.28821997474257066, 0.30963690124188714, 0.3020072710421644, 0.30561785671906705, 0.29460325987263636, 0.31274758870270036, 0.21706128103563171, 0.19409525026028718, 0.20029918311560713, 0.2706227764527005, 0.18881073704184015, 0.20499327184761384, 0.19528639260356484, 0.20140575575056552, 0.24828406378942391, 0.1861160897892471, 0.2445824323929091, 0.20187439122412076, 0.199870982053738, 0.18234380147672025, 0.18744562996525915, 0.3462937591967802, 0.18001132763616223, 0.19781866610055499, 0.6236017478094746, 0.18108267737716155, 0.1770607245210054, 0.6767753953843845, 0.6848699660345539, 0.7495790262328988, 0.563818673446012, 0.5943618930224099, 0.6754506502110565, 0.7611842437069181, 0.6531151138251488, 0.75997690644826, 0.6021444382020652, 0.6684610213720718, 0.2011717140850403, 0.2042960115000817, 0.5468895067018675, 0.6745428444615189, 0.20025732977138644, 0.18928684661030626, 0.19315267030063443, 0.2097806893772739, 0.2194811622220182, 0.1891189172010359, 0.2029604468695616, 0.18875453708519607, 0.19899795902532036, 0.08161353753379785, 0.07300493392043117, 0.07723567066482406, 0.09663257210529896, 0.07809261147229829, 0.07603622013999645, 0.07574257643642157, 0.07626348380046788, 0.08134683529987019]}, "mutation_prompt": null}
{"id": "55cd684e-0f28-4046-9c6a-acdfb41226c9", "solution": "import numpy as np\n\nclass ImprovedHWDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        F = 0.5\n        CR = 0.9\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget // pop_size):\n            new_pop = np.zeros((pop_size, self.dim))\n            for i in range(pop_size):\n                idxs = np.random.choice(pop_size, 3, replace=False)\n                mutant = pop[idxs[0]] + F * (pop[idxs[1]] - pop[idxs[2]])\n                adaptive_F = np.clip(np.random.normal(0.5, 0.1), 0, 1)\n                crossover = np.random.rand(self.dim) < CR\n                adaptive_CR = np.clip(np.random.normal(0.9, 0.1), 0, 1)\n                new_pop[i] = np.where(crossover, mutant, pop[i])\n                \n            new_fitness = np.array([func(ind) for ind in new_pop])\n            for i in range(pop_size):\n                if new_fitness[i] < fitness[i]:\n                    pop[i] = new_pop[i]\n                    fitness[i] = new_fitness[i]\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "ImprovedHWDE", "description": "Improved Harmonic Weighted Differential Evolution (HWDE) with adaptive mutation and crossover rates for enhanced exploration and exploitation in optimization.", "configspace": "", "generation": 1, "fitness": 0.35782051546908317, "feedback": "", "error": "", "parent_id": "7d713277-9c5d-4ad1-99a9-fe7d813e0fbb", "metadata": {"aucs": [0.7520071280109109, 0.7667845326795285, 0.7799561830298185, 0.7754931186746625, 0.7571626468424211, 0.7614953379061982, 0.7530675368418243, 0.7744781136285103, 0.7591210460525429, 0.5720237645869262, 0.5671612796684483, 0.588912186098997, 0.5819668026243501, 0.5740478311004473, 0.5822077803906218, 0.5708868659980687, 0.5561667716802853, 0.5854463364351323, 0.1175561249933682, 0.11587076732898327, 0.11725284616073672, 0.1339932257533626, 0.10405968528857812, 0.12112178002503293, 0.10313282879002417, 0.11812994270124078, 0.11798411256200436, 0.09816297220912673, 0.10639231930751936, 0.09596977432633447, 0.10738045967617182, 0.10987213382782468, 0.12184212506295555, 0.11008681528698439, 0.11832698408441122, 0.10447470192880703, 0.9628289830792818, 0.933857229086398, 0.9572918169734324, 0.9625052426381401, 0.9624877386783346, 0.9599782720000765, 0.9603640196867177, 0.9597743509831513, 0.9743695483634353, 0.4250321614950413, 0.39385426585787897, 0.3934017894173316, 0.35654537905831296, 0.3942461203525527, 0.3922595770775962, 0.41332634453132333, 0.43876793829545946, 0.42482955154893076, 0.7314125436059267, 0.7685574098200723, 0.6834057142193068, 0.7533268876432025, 0.7657933849807141, 0.7943497386100303, 0.7287982208761212, 0.7903665667319931, 0.7698197289481726, 0.20924846934073527, 0.14900002889065678, 0.1980005640159117, 0.274942257697928, 0.43254781647756213, 0.3008467965515347, 0.2057791163143543, 0.2172562648007661, 0.15658473135773476, 0.4002650020578319, 0.18842719587445744, 0.2751890538233548, 0.32119127308959194, 0.20025444622588917, 0.1902869138087191, 0.19325351190531526, 0.18711841253953965, 0.2243351795577091, 0.3863792031245673, 0.3709897974843882, 0.35616379534198284, 0.31207975759490136, 0.33695132519780857, 0.33216819390913566, 0.3419237681551297, 0.34491021050878123, 0.3466467731962035, 0.4684151894734976, 0.5614757899081413, 0.4773763964826321, 0.5117139892639091, 0.48849187098619085, 0.5066693237348309, 0.5352629017851058, 0.5380505130834674, 0.4850132822009354, 0.1562895865176952, 0.04187730308373305, 0.09753317259228622, 0.20742650420470554, 0.20626510424540878, 0.238639707434405, 0.11608202299619841, 0.10036345041327188, 0.12150781286164036, 0.2736204081695439, 0.251755135710359, 0.27039432495215265, 0.29575487151327473, 0.29920106941513536, 0.31083297782299146, 0.2630862060916349, 0.27658587989898553, 0.25746740883510943, 0.6657634273370867, 0.650103931524757, 0.7016713080128256, 0.6724584478951812, 0.6947370978715077, 0.6500942583724174, 0.6837291237257457, 0.6813215965264681, 0.6935681181069241, 0.10325220124205059, 0.09698590212358671, 0.16429011261061333, 0.10339335971822716, 0.09574830491768349, 0.10171341863649852, 0.09409636255826115, 0.09757738757341772, 0.09421364364873752, 0.11945731311206875, 0.147692178801881, 0.13080503002051613, 0.12039630123887513, 0.1377951571560101, 0.12903913567733927, 0.132123003111682, 0.14000243073968555, 0.13961191462522415, 0.3952068393457262, 0.4054936155322474, 0.39191300914987104, 0.3782148102543599, 0.385460061530143, 0.40502536033826386, 0.4240922911572861, 0.43930227768909036, 0.3977371594660607, 0.32056583759995483, 0.31926807512518374, 0.3207163981994713, 0.32582318523448184, 0.29670076429761405, 0.2874534026775303, 0.3101237466207283, 0.31363321442068504, 0.32566783450306735, 0.19549783900039364, 0.1834227438222018, 0.19358779644690993, 0.20734098202237272, 0.18560190962957301, 0.19862275854004274, 0.20136686944344295, 0.20330192894903898, 0.21548025608684673, 0.19030188421221061, 0.2096812376688426, 0.18336208039055357, 0.24737885462302855, 0.1904208678487045, 0.2146377381973994, 0.211307608306476, 0.19066507438865787, 0.19247448168130554, 0.18129979695550247, 0.17642238471661875, 0.6962456204424881, 0.7710121619830571, 0.18352746841547218, 0.7556841451921645, 0.4823209336271669, 0.64145531163507, 0.7016643647051255, 0.7414293811787562, 0.19229889542418455, 0.7558770358527053, 0.36450778187105637, 0.19074474014129728, 0.1935329268196354, 0.19253238648619064, 0.18880643784247486, 0.19592497134565245, 0.19706911877189381, 0.18785482945040077, 0.19241920730466455, 0.18685240987196938, 0.19569562702245868, 0.1831729595488385, 0.18693016396944262, 0.18594971053371268, 0.18967732742333387, 0.08462189580723212, 0.08704622194376732, 0.07715891703657674, 0.08065925814705188, 0.07922544566835155, 0.08254359295790858, 0.08845313965000645, 0.08429087314679051, 0.07439518850608873]}, "mutation_prompt": null}
