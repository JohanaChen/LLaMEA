{"id": "d1131415-afe7-491e-94b0-a42bfa7119fb", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30, cr=0.9, f=0.8, w=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.cr = cr\n        self.f = f\n        self.w = w\n\n    def __call__(self, func):\n        def initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def DE(x, a, b, c):\n            mutant = clipToBounds(a + self.f * (b - c))\n            return mutant\n\n        swarm = initialize_swarm()\n        fitness = [func(x) for x in swarm]\n        best_idx = np.argmin(fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                a, b, c = np.random.choice(swarm, 3, replace=False)\n                mutant = DE(swarm[i], a, b, c)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, swarm[i])\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness[i]:\n                    swarm[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < func(best_solution):\n                        best_solution = trial\n\n        return best_solution", "name": "HybridPSODE", "description": "A novel metaheuristic algorithm combining particle swarm optimization (PSO) and differential evolution (DE) to explore the search space efficiently and globally with the PSO component and exploit promising regions locally with the DE component.", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "An exception occured: Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 30, in __call__\n  File \"mtrand.pyx\", line 930, in numpy.random.mtrand.RandomState.choice\nValueError: a must be 1-dimensional\n.", "error": "ValueError('a must be 1-dimensional')Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 30, in __call__\n  File \"mtrand.pyx\", line 930, in numpy.random.mtrand.RandomState.choice\nValueError: a must be 1-dimensional\n", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "45aa3f20-2bb1-40c6-a5db-1c7ac66615ee", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30, cr=0.9, f=0.8, w=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.cr = cr\n        self.f = f\n        self.w = w\n\n    def __call__(self, func):\n        def initialize_swarm():\n            return np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def DE(x, a, b, c):\n            mutant = clipToBounds(a + self.f * (b - c))\n            return mutant\n\n        swarm = initialize_swarm()\n        fitness = [func(x) for x in swarm]\n        best_idx = np.argmin(fitness)\n        best_solution = swarm[best_idx]\n\n        for _ in range(self.budget - self.swarm_size):\n            for i in range(self.swarm_size):\n                a, b, c = np.random.choice(swarm, 3, replace=False)\n                mutant = DE(swarm[i], a, b, c)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, swarm[i])\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness[i]:\n                    swarm[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < func(best_solution):\n                        best_solution = trial\n\n        return best_solution", "name": "HybridPSODE", "description": "A novel metaheuristic algorithm combining particle swarm optimization (PSO) and differential evolution (DE) to explore the search space efficiently and globally with the PSO component and exploit promising regions locally with the DE component.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1131415-afe7-491e-94b0-a42bfa7119fb", "metadata": {}, "mutation_prompt": null}
