{"id": "8c729f7d-68c2-4dc5-bd2c-edc687a72e24", "solution": "import numpy as np\n\nclass AdaptiveDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_iter = budget // self.population_size\n        \n    def __call__(self, func):\n        def mutation(population, f=0.5):\n            idxs = np.arange(self.population_size)\n            while True:\n                r1, r2, r3 = np.random.choice(idxs, 3, replace=False)\n                mutant = population[r1] + f * (population[r2] - population[r3])\n                yield mutant\n        \n        def crossover(target, mutant, cr=0.9):\n            crossover_points = np.random.rand(self.dim) < cr\n            trial = np.where(crossover_points, mutant, target)\n            return trial\n        \n        def pso_update(particle, pbest, gbest, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * particle\n            cognitive = c1 * np.random.rand(self.dim) * (pbest - particle)\n            social = c2 * np.random.rand(self.dim) * (gbest - particle)\n            return inertia + cognitive + social\n        \n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        \n        for _ in range(self.max_iter):\n            for idx, particle in enumerate(population):\n                mutant_gen = mutation(population)\n                mutant = next(mutant_gen)\n                trial = crossover(particle, mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[idx]:\n                    population[idx] = trial\n                    fitness[idx] = trial_fitness\n                    pbest[idx] = trial\n                    if trial_fitness < func(gbest):\n                        gbest = trial\n            \n            for idx, particle in enumerate(population):\n                updated_particle = pso_update(particle, pbest[idx], gbest)\n                population[idx] = np.clip(updated_particle, -5.0, 5.0)\n        \n        return gbest", "name": "AdaptiveDEPSO", "description": "An adaptive hybrid metaheuristic algorithm combining Differential Evolution (DE) with Particle Swarm Optimization (PSO) where the algorithm dynamically switches between DE and PSO based on the convergence rate and diversity in the search space.", "configspace": "", "generation": 0, "fitness": 0.1597743527563479, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.2768595826761614, 0.2715750503572777, 0.2907688352395238, 0.22050486783820167, 0.22164754991806346, 0.23613312057970526, 0.23604326224715422, 0.27068418928750815, 0.24515824662264374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007893661079179215, 0.009705900666608258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08666087213284568, 0.06654109827951737, 0.06424861851790886, 0.08776215572435031, 0.061151253317606624, 0.07815576515910705, 0.07488456992327974, 0.07636014309693528, 0.08000761111776189, 0.06183032834969926, 0.06154172756910736, 0.060603007107140505, 0.07223564561481877, 0.06421943366316829, 0.07031543953692176, 0.05750610493970054, 0.05700893052515188, 0.05912116202465856, 0.8041298426845148, 0.8069884302211036, 0.7168560088206717, 0.7674726738369142, 0.9334592989890498, 0.9483430509966148, 0.7528368340031314, 0.9099100278925213, 0.8827009175880783, 0.1038087360316029, 0.12299583590753793, 0.12908181648955064, 0.14291479243846428, 0.14093701752208143, 0.1371817790792511, 0.16298258192617288, 0.1248857924419845, 0.13004675618485673, 0.24899770766870866, 0.22877096824409504, 0.22784909568842004, 0.16833265241605677, 0.18936424034006183, 0.22691349720544418, 0.19388385876403735, 0.17200706532661947, 0.21311424924345979, 0.09923418714129961, 0.08239822640594685, 0.1109398032490293, 0.05904705906133656, 0.0846463370382955, 0.06405649363252375, 0.08863215104899713, 0.07743549426794383, 0.07732316174431575, 0.20011233694580943, 0.16419422572121278, 0.15959887534989448, 0.17314031636748806, 0.1662227479633035, 0.1447454421193063, 0.218355290056912, 0.21018351305299243, 0.15936259208090942, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06353411482469706, 0.1119639637928107, 0.07989232555047476, 0.08288526075110547, 0.057086277675246655, 0.03814439821340199, 0.037393272127462684, 0.06765508728903091, 0.0689037601541459, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006235361735563716, 0.016744222525332586, 0.012397466956439396, 0.008228320589683591, 0.010420749686684161, 0.0026787235495790984, 0.004606811165543845, 0.006120161094209986, 0.0022295513309267267, 0.2499799559029069, 0.2668637786402407, 0.24203509655861166, 0.2815623774205145, 0.2628515986041122, 0.2511929450312823, 0.2789534736629422, 0.2930712607806031, 0.2838736661540243, 0.05511615188919694, 0.05648329696931398, 0.06800235076439387, 0.0772958559899265, 0.06806817003211563, 0.07575304276542139, 0.09039567951550287, 0.07825223223978106, 0.06558597746910366, 0.18734200994223715, 0.15380102834351816, 0.14588654538735646, 0.193122472249171, 0.13350556352014664, 0.12114160830321252, 0.13532814755755718, 0.13520673987877196, 0.14692724371021781, 0.19694236782424213, 0.19371812565960056, 0.2020585042605091, 0.2398911066343009, 0.2237722189862431, 0.2261615128443537, 0.19165413375466922, 0.21006507918864603, 0.1964354904914325, 0.13606713839575535, 0.1353221258462699, 0.13708454625960842, 0.17464185328733073, 0.18207176668101022, 0.1921122092660471, 0.14168412955364207, 0.17258722413088123, 0.1293470535410084, 0.22764427802545983, 0.19964296857071473, 0.20560163494206063, 0.21280341295819727, 0.18996086927054534, 0.19774217706336672, 0.19116291651026196, 0.2372577760135337, 0.19787689359732008, 0.1659448682359893, 0.17568325764817638, 0.17165991903346223, 0.16778179157368045, 0.1635367755908761, 0.16248668093899266, 0.1750621111263062, 0.16340349774624807, 0.16814126288795583, 0.1757403308798945, 0.17136134599520014, 0.1598863094674039, 0.23052349138322825, 0.25257052663005375, 0.1802965438707279, 0.3677006997191764, 0.2584265409147548, 0.2676956009817655, 0.24262667552281836, 0.18297130048661292, 0.27255533696615075, 0.2792068609918601, 0.22940323838068255, 0.17606633375041003, 0.20029953551264912, 0.20212355663142423, 0.15642454776021353, 0.1738475856899877, 0.17925596724022674, 0.1793906369785585, 0.21794430399998366, 0.18946618950261562, 0.18055184972538407, 0.17901402414378975, 0.2152678301953186, 0.19807109344967977, 0.07489838573741125, 0.06485309508474713, 0.07684162399636318, 0.06416212810577271, 0.06487144602935035, 0.06668095003664998, 0.05974901231512031, 0.06625679859437694, 0.06850880775733748]}, "mutation_prompt": null}
{"id": "735a7c0e-3332-4fe7-a860-8a1913a51349", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPSO(AdaptiveDEPSO):\n    def __call__(self, func):\n        def mutation(population, f=0.5):\n            idxs = np.arange(self.population_size)\n            while True:\n                r1, r2, r3 = np.random.choice(idxs, 3, replace=False)\n                mutant = population[r1] + f * (population[r2] - population[r3])\n                yield mutant\n        \n        def crossover(target, mutant, cr=0.9):\n            crossover_points = np.random.rand(self.dim) < cr\n            trial = np.where(crossover_points, mutant, target)\n            return trial\n        \n        def pso_update(particle, pbest, gbest, w=0.5, c1=1.5, c2=1.5):\n            inertia = w * particle\n            cognitive = c1 * np.random.rand(self.dim) * (pbest - particle)\n            social = c2 * np.random.rand(self.dim) * (gbest - particle)\n            return inertia + cognitive + social\n        \n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        \n        for _ in range(self.max_iter):\n            for idx, particle in enumerate(population):\n                mutant_gen = mutation(population)\n                mutant = next(mutant_gen)\n                trial = crossover(particle, mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[idx]:\n                    population[idx] = trial\n                    fitness[idx] = trial_fitness\n                    pbest[idx] = trial\n                    if trial_fitness < func(gbest):\n                        gbest = trial\n            \n            # Dynamic population adjustment based on fitness diversity\n            fitness_std = np.std(fitness)\n            if fitness_std < 0.1:  # Low diversity, increase population size\n                self.population_size += 5\n                population = np.vstack((population, np.random.uniform(-5.0, 5.0, (5, self.dim))))\n                fitness = np.append(fitness, [func(individual) for individual in population[-5:]])\n            \n            for idx, particle in enumerate(population):\n                updated_particle = pso_update(particle, pbest[idx], gbest)\n                population[idx] = np.clip(updated_particle, -5.0, 5.0)\n        \n        return gbest", "name": "EnhancedAdaptiveDEPSO", "description": "Enhanced AdaptiveDEPSO algorithm with dynamic population adjustment based on fitness diversity", "configspace": "", "generation": 1, "fitness": 0.1597743527563479, "feedback": "", "error": "", "parent_id": "8c729f7d-68c2-4dc5-bd2c-edc687a72e24", "metadata": {"aucs": [0.2768595826761614, 0.2715750503572777, 0.2907688352395238, 0.22050486783820167, 0.22164754991806346, 0.23613312057970526, 0.23604326224715422, 0.27068418928750815, 0.24515824662264374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007893661079179215, 0.009705900666608258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08666087213284568, 0.06654109827951737, 0.06424861851790886, 0.08776215572435031, 0.061151253317606624, 0.07815576515910705, 0.07488456992327974, 0.07636014309693528, 0.08000761111776189, 0.06183032834969926, 0.06154172756910736, 0.060603007107140505, 0.07223564561481877, 0.06421943366316829, 0.07031543953692176, 0.05750610493970054, 0.05700893052515188, 0.05912116202465856, 0.8041298426845148, 0.8069884302211036, 0.7168560088206717, 0.7674726738369142, 0.9334592989890498, 0.9483430509966148, 0.7528368340031314, 0.9099100278925213, 0.8827009175880783, 0.1038087360316029, 0.12299583590753793, 0.12908181648955064, 0.14291479243846428, 0.14093701752208143, 0.1371817790792511, 0.16298258192617288, 0.1248857924419845, 0.13004675618485673, 0.24899770766870866, 0.22877096824409504, 0.22784909568842004, 0.16833265241605677, 0.18936424034006183, 0.22691349720544418, 0.19388385876403735, 0.17200706532661947, 0.21311424924345979, 0.09923418714129961, 0.08239822640594685, 0.1109398032490293, 0.05904705906133656, 0.0846463370382955, 0.06405649363252375, 0.08863215104899713, 0.07743549426794383, 0.07732316174431575, 0.20011233694580943, 0.16419422572121278, 0.15959887534989448, 0.17314031636748806, 0.1662227479633035, 0.1447454421193063, 0.218355290056912, 0.21018351305299243, 0.15936259208090942, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06353411482469706, 0.1119639637928107, 0.07989232555047476, 0.08288526075110547, 0.057086277675246655, 0.03814439821340199, 0.037393272127462684, 0.06765508728903091, 0.0689037601541459, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006235361735563716, 0.016744222525332586, 0.012397466956439396, 0.008228320589683591, 0.010420749686684161, 0.0026787235495790984, 0.004606811165543845, 0.006120161094209986, 0.0022295513309267267, 0.2499799559029069, 0.2668637786402407, 0.24203509655861166, 0.2815623774205145, 0.2628515986041122, 0.2511929450312823, 0.2789534736629422, 0.2930712607806031, 0.2838736661540243, 0.05511615188919694, 0.05648329696931398, 0.06800235076439387, 0.0772958559899265, 0.06806817003211563, 0.07575304276542139, 0.09039567951550287, 0.07825223223978106, 0.06558597746910366, 0.18734200994223715, 0.15380102834351816, 0.14588654538735646, 0.193122472249171, 0.13350556352014664, 0.12114160830321252, 0.13532814755755718, 0.13520673987877196, 0.14692724371021781, 0.19694236782424213, 0.19371812565960056, 0.2020585042605091, 0.2398911066343009, 0.2237722189862431, 0.2261615128443537, 0.19165413375466922, 0.21006507918864603, 0.1964354904914325, 0.13606713839575535, 0.1353221258462699, 0.13708454625960842, 0.17464185328733073, 0.18207176668101022, 0.1921122092660471, 0.14168412955364207, 0.17258722413088123, 0.1293470535410084, 0.22764427802545983, 0.19964296857071473, 0.20560163494206063, 0.21280341295819727, 0.18996086927054534, 0.19774217706336672, 0.19116291651026196, 0.2372577760135337, 0.19787689359732008, 0.1659448682359893, 0.17568325764817638, 0.17165991903346223, 0.16778179157368045, 0.1635367755908761, 0.16248668093899266, 0.1750621111263062, 0.16340349774624807, 0.16814126288795583, 0.1757403308798945, 0.17136134599520014, 0.1598863094674039, 0.23052349138322825, 0.25257052663005375, 0.1802965438707279, 0.3677006997191764, 0.2584265409147548, 0.2676956009817655, 0.24262667552281836, 0.18297130048661292, 0.27255533696615075, 0.2792068609918601, 0.22940323838068255, 0.17606633375041003, 0.20029953551264912, 0.20212355663142423, 0.15642454776021353, 0.1738475856899877, 0.17925596724022674, 0.1793906369785585, 0.21794430399998366, 0.18946618950261562, 0.18055184972538407, 0.17901402414378975, 0.2152678301953186, 0.19807109344967977, 0.07489838573741125, 0.06485309508474713, 0.07684162399636318, 0.06416212810577271, 0.06487144602935035, 0.06668095003664998, 0.05974901231512031, 0.06625679859437694, 0.06850880775733748]}, "mutation_prompt": null}
