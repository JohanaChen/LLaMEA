{"id": "527b9fbf-ca1a-4eeb-a888-10d8c8dd4954", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10\n        self.bandwidth = 0.1\n\n    def generate_initial_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n    def generate_new_harmony(self):\n        new_harmony = np.zeros(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < 0.5:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n            else:\n                rand_idx = np.random.randint(self.harmony_memory_size)\n                new_harmony[i] = self.harmony_memory[rand_idx, i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                new_harmony[i] = np.clip(new_harmony[i], self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def __call__(self, func):\n        self.generate_initial_harmony_memory()\n        for _ in range(self.budget):\n            new_harmony = self.generate_new_harmony()\n            if func(new_harmony) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_harmony\n                self.harmony_memory = np.sort(self.harmony_memory, axis=0)\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Harmony Search Algorithm: A metaheuristic algorithm that mimics the process of musicians improvising together to find the best harmony, combining memory and randomization.", "configspace": "", "generation": 0, "fitness": 0.09164611590170706, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.22133471313961706, 0.20465491964572213, 0.19278028287035553, 0.20496292256919801, 0.18082579288735445, 0.21531085296554497, 0.22087121716836378, 0.20997558738999367, 0.22557345240266158, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07375488627902671, 0.04221359600808028, 0.04701194394706776, 0.04215629154033196, 0.047828389528744575, 0.05542975738837175, 0.08201585969189218, 0.08007911133255963, 0.05352288719212506, 0.04310926959226358, 0.045255464955734404, 0.043133273107133, 0.04375798836732736, 0.057630329796898305, 0.05502461180314078, 0.03472489237441134, 0.021717372087336817, 0.03189155747886929, 0.08787469078766208, 0.09346359965988371, 0.08287689105612095, 0.12842263922979147, 0.12379035845964481, 0.140230187953841, 0.145009621483003, 0.14002110944252621, 0.16091793407445254, 0.04831786219915446, 0.032452884890809774, 0.034322019584589136, 0.043287630834232926, 0.045889886836374405, 0.09706403349604276, 0.07247297244137352, 0.0399313722824034, 0.08433911032318231, 0.11824489859613319, 0.08018911897436043, 0.11528445577084945, 0.11476753730254008, 0.098018246613374, 0.12717869862651354, 0.11704857306939442, 0.1636624718231744, 0.12306853424769382, 0.11627783279185655, 0.008747425853499191, 0.03934700410256431, 9.999999999998899e-05, 0.003095491764742664, 0.03220640002181774, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04492944269793808, 0.025930514590170373, 0.010149889203298179, 0.0535102713065424, 9.999999999998899e-05, 0.058188228089222194, 0.08216619250735768, 9.999999999998899e-05, 0.0711478638242592, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0969648907131444, 0.050218408865054354, 0.03030650628537912, 0.0510555407841401, 0.010363489713407614, 0.031829078524298504, 0.028793849954545814, 0.037989926237220084, 0.013745378959274634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00755494526323941, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010934333114875905, 9.999999999998899e-05, 0.0031942808925882193, 0.1989229043180062, 0.23857632123304884, 0.2118269383101734, 0.17992488946286433, 0.21634354685434487, 0.20742417881587427, 0.18300114010600377, 0.20884506733691666, 0.2034606872909287, 0.036063224665414784, 0.04398717698259602, 0.03252041659959648, 0.04392771372986226, 0.04264078419102968, 0.07176301907552374, 0.06378094233536413, 0.062048252433011264, 0.059241420759343244, 0.13191053924120388, 0.1261670171524849, 0.13478813199063755, 0.1376958928150641, 0.15482343018443112, 0.1466500237881332, 0.14883053401256763, 0.1623486933993432, 0.11856736632475817, 0.14342221771328945, 0.1484650192970719, 0.14510104459446216, 0.16809502323245307, 0.18388553916864325, 0.1665763696900593, 0.17062318758918338, 0.1566105676820132, 0.15028776214993944, 0.09011741939806239, 0.12064155607262983, 0.09628451400837945, 0.09868614831432065, 0.11450260406981594, 0.10790386672069652, 0.11485627224150174, 0.10425727267186102, 0.1058491411899577, 0.15308606340463882, 0.1484312087433045, 0.14917272200439824, 0.1526964794363206, 0.140474666468259, 0.14545560825060544, 0.15614822547471008, 0.1538219972993713, 0.14154292666314539, 0.14819297063403336, 0.13508716607708926, 0.1562325787835238, 0.16398127660345452, 0.16858846921488535, 0.15491878750580834, 0.1600408573427149, 0.1508405694873416, 0.14171391889447693, 0.1627073360613971, 0.12219665450246775, 0.18835516162310095, 0.16282480349577633, 0.142071061749655, 0.22217340825077403, 0.11360334479717693, 0.12140871056638369, 0.1461532918699049, 0.2043432023946874, 0.13719568622473377, 0.15872507670374547, 0.13363553816783702, 0.1374497445331645, 0.19518543042578052, 0.11809575208643341, 0.14679760604703262, 0.10664293862787921, 0.17481644528167306, 0.17906370227210833, 0.1837252941974281, 0.16756474917104913, 0.1872328811574715, 0.189855060236787, 0.1840777284683801, 0.17461664449773162, 0.19457360215547082, 0.04476918963412824, 0.03515260735276193, 0.05530145469155723, 0.0558868602683098, 0.048528953391403395, 0.04831738989726242, 0.04427764719031968, 0.044490623854802624, 0.04465642157524252]}, "mutation_prompt": null}
{"id": "63de4106-a754-4fd3-b287-75e3802a6d1f", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10\n        self.bandwidth = 0.1\n        self.bandwidth_min = 0.01\n        self.bandwidth_max = 0.5\n\n    def generate_initial_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n    def generate_new_harmony(self):\n        new_harmony = np.zeros(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < 0.5:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n            else:\n                rand_idx = np.random.randint(self.harmony_memory_size)\n                new_harmony[i] = self.harmony_memory[rand_idx, i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                new_harmony[i] = np.clip(new_harmony[i], self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def __call__(self, func):\n        self.generate_initial_harmony_memory()\n        for _ in range(self.budget):\n            new_harmony = self.generate_new_harmony()\n            if func(new_harmony) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_harmony\n                self.harmony_memory = np.sort(self.harmony_memory, axis=0)\n                self.bandwidth = max(self.bandwidth_min, min(self.bandwidth_max, self.bandwidth * 0.99))\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Improved Harmony Search algorithm with adaptive bandwidth adjustment for better exploitation-exploration balance.", "configspace": "", "generation": 1, "fitness": 0.0913152158889491, "feedback": "", "error": "", "parent_id": "527b9fbf-ca1a-4eeb-a888-10d8c8dd4954", "metadata": {"aucs": [0.2213628965250517, 0.20440893855355757, 0.19278365876220815, 0.20560623074104, 0.1808667956661496, 0.21530677728336767, 0.22023520672087082, 0.21079840015543871, 0.22332641478549886, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0726167032536198, 0.04266523028811553, 0.0470043100193982, 0.04826179101688488, 0.047829712095561416, 0.03986036771154833, 0.058799547458127766, 0.07931170445849567, 0.058265343271620584, 0.039435535491969875, 0.043830801103009964, 0.04288724112394826, 0.05577030791879656, 0.05832845788581531, 0.055052449890675925, 0.03473338527640879, 0.021697886037928993, 0.03205202770429527, 0.0869509455452373, 0.0939827046013102, 0.08298789456401323, 0.12436075872140684, 0.12706532969601048, 0.13633762493876234, 0.13613963798611206, 0.13768498827218156, 0.1546159271890296, 0.048975902206821464, 0.032403964842940725, 0.03410430712185475, 0.04339274368978563, 0.04547277940309635, 0.08687224290477769, 0.07250737440000266, 0.04023891094377974, 0.08429380318779645, 0.11824405720380471, 0.08018911897436043, 0.11528445577084945, 0.11476753730254008, 0.098018246613374, 0.12741985924429478, 0.11704916882414129, 0.16434872829681957, 0.12306853424769382, 0.11346065659792548, 0.008681560419020573, 0.03959557873941466, 9.999999999998899e-05, 0.003090973527585028, 0.030056010004465894, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04519461211774689, 0.026134678616859364, 0.010108427595962755, 0.05325090288173229, 9.999999999998899e-05, 0.058274311762886444, 0.08147307333412956, 9.999999999998899e-05, 0.07084906333306007, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061650741252482155, 0.02621471218299576, 0.029245264478136246, 0.015692633277682777, 0.026597575014972397, 0.027742886627785457, 0.02560208472598602, 0.03496704418816243, 0.01730174466504708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0077817900281900165, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003158367320078126, 0.19890891217099127, 0.23657387054392542, 0.21372406962705437, 0.18038931508157385, 0.2160493306122827, 0.20741262835576801, 0.18311851433921145, 0.20880399931432025, 0.20346203543874097, 0.035035761703590795, 0.042691457802214616, 0.036755315791556, 0.041940452694585795, 0.050246888889943, 0.07245861870957437, 0.06167515870175888, 0.0534222147214779, 0.05896031705594229, 0.14197539062845355, 0.1295068663882677, 0.1685993953922773, 0.1227241334857988, 0.1224397650307707, 0.12403342729218891, 0.12257858239323793, 0.1945488796966155, 0.13916298248513193, 0.14569518065167197, 0.14857513884345752, 0.14390245678951363, 0.15702067140646558, 0.1792608782011602, 0.1650501848716298, 0.16945920835264694, 0.1617350478256081, 0.14882397756598986, 0.08598401557011515, 0.13091904346141314, 0.09457438305052801, 0.10377855519619261, 0.11645502963357734, 0.11185937518239408, 0.11470178975084999, 0.10398920524392674, 0.10251083150055407, 0.12914582125454377, 0.14803918227279844, 0.14465816117329, 0.1476690255879064, 0.14972557535598352, 0.1338013311221573, 0.15204447000350996, 0.15146345589489407, 0.2295813585056219, 0.14888338673897084, 0.1330639685781767, 0.15664089646096713, 0.1694587601419857, 0.16869140261494553, 0.15474652973507874, 0.15992725976412314, 0.1507601901406168, 0.13792979194433397, 0.16149105642391792, 0.12211226510542272, 0.1874487957795583, 0.16288917310050166, 0.14204033152189877, 0.22210763239467257, 0.11362662278771929, 0.12237643167111112, 0.1474210562404854, 0.20048623397726073, 0.13655220440456284, 0.15710490659153764, 0.13369718962383081, 0.1316964474814427, 0.19499803475076705, 0.11689530535407922, 0.14681932398377961, 0.10656944203642738, 0.19055393853610947, 0.18570784081670233, 0.1708469512213947, 0.1881413086648197, 0.2148796095491381, 0.182932044656669, 0.17405818409315565, 0.18462165532035613, 0.17768667939706995, 0.044703911278095254, 0.04237339220998093, 0.05429005108865714, 0.04530496055811273, 0.05978924076443304, 0.04448034649247001, 0.04356062359535828, 0.04339427418179531, 0.052704981040350374]}, "mutation_prompt": null}
