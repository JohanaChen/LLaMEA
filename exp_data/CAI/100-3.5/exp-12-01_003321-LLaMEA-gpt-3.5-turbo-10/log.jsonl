{"id": "a99f558b-6ef0-4d78-a12b-c0a01e34c97f", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10\n        self.bandwidth = 0.01\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < 0.7:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                else:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                    new_solution[i] = max(min(new_solution[i], self.upper_bound), self.lower_bound)\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(x) for x in self.harmony_memory])]\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Harmony Search Algorithm for Black Box Optimization using a musical improvisation-inspired metaheuristic to explore the search space and find optimal solutions.", "configspace": "", "generation": 0, "fitness": 0.10683944099298757, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.24347651364518763, 0.24817137928397703, 0.26602292370901826, 0.19873481173045104, 0.2222579924657634, 0.21553786645869732, 0.23342101660934644, 0.22660249315004444, 0.2448787054246785, 0.04756455959759842, 0.025227806446950662, 0.019622167058139017, 0.002603722927977281, 9.999999999998899e-05, 0.019884577851347007, 0.007455365274847803, 0.0181866812834649, 0.019158573754586405, 0.07016949541378947, 0.08872534678826682, 0.08774296138810356, 0.07119642575688467, 0.08723724260038057, 0.09343727982036576, 0.06882382533835585, 0.07939782301635878, 0.07721235589460052, 0.057689793309210646, 0.10655833561442452, 0.07207678742533741, 0.06869732075053092, 0.05245523868088653, 0.07466861826431526, 0.05771815992683327, 0.05369707523565137, 0.0837947333287773, 0.12294742794361357, 0.10891377108907196, 0.13300884205527508, 0.11147109821531542, 0.12099613373090268, 0.11918211586007588, 0.10443226181049192, 0.12365935283304952, 0.10588173476650065, 0.10358878338356048, 0.07305857717228337, 0.08357982476569303, 0.1164901450878093, 0.09881085428035552, 0.11698800632892925, 0.08151100734372307, 0.09558900032101669, 0.11142683602338, 0.1519729879655375, 0.14571936429843046, 0.12406031878885282, 0.12464886277700649, 0.15817012014289955, 0.16828470592246902, 0.1333999691787492, 0.16805424982566763, 0.13113874353205024, 0.01404703576666666, 0.06767443020881014, 0.056386231030881806, 0.051523464299895405, 0.05937693261343446, 0.05236360279601382, 0.030841418103519702, 0.030990821826241355, 0.044486977301570696, 0.0744210709609906, 0.049352101758798894, 0.032480340440762645, 0.07638756203255348, 0.028712940003973397, 0.07760928570551828, 0.034987345550611115, 0.06256037260058633, 0.02199998143032922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.044167660556534205, 0.03380447557073185, 0.061435989604463836, 0.024185730565214336, 0.0703921341337802, 0.02775093824868058, 0.04041727630634906, 0.03935721220708077, 0.025211371313957898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025707171599829826, 0.0367427286169828, 0.0093930529486137, 0.0001678872510554319, 0.01634248506850311, 0.006221780818846168, 0.010183000000431597, 0.0052589633025527105, 0.0031553687669613195, 0.2634532461276675, 0.24197835671284296, 0.2149795496657172, 0.2121984601006518, 0.2356221078267483, 0.2517808051380309, 0.25254712452158223, 0.2509057165568571, 0.2412575566054972, 0.05345158894982105, 0.060829899992572045, 0.05547987017826528, 0.05180789260177332, 0.05272054145094829, 0.045242386228316556, 0.053375094349715435, 0.0611689894470312, 0.05240811715992333, 0.1097014255827995, 0.11372026577223082, 0.13642586376460952, 0.12131526407157489, 0.12519998279079392, 0.17115299826412844, 0.11379486498019176, 0.12742773162080379, 0.12946340738897721, 0.18086271073733884, 0.1850402008893277, 0.18238440426564118, 0.1850199557026131, 0.19102160482095165, 0.1832701162108209, 0.17659612379291978, 0.1842920037320951, 0.20379744404331057, 0.11766567367548564, 0.13548482046853683, 0.11949425844766792, 0.12609565118997157, 0.11992457385156563, 0.1353290126677399, 0.13529434289935127, 0.13391473272526033, 0.13503967121724292, 0.1715074588307749, 0.1776603808338023, 0.16025956103485495, 0.15718985857251244, 0.16457011428957014, 0.1778164850482522, 0.17161600518727482, 0.15444783882908997, 0.16215980241443262, 0.16285109804975584, 0.15296445329860686, 0.1627536088888013, 0.15725052366363557, 0.16568412675276756, 0.15364464068037942, 0.15954025977190034, 0.1535436881196861, 0.14646919176731243, 0.1565265895156095, 0.14122895065822882, 0.16452947507862115, 0.20243670598679464, 0.16607317784510456, 0.25648562475724845, 0.17682836870313734, 0.16125898118838555, 0.2173438859945731, 0.14141582805434771, 0.2289742858804965, 0.14892816448340562, 0.16364207157909028, 0.17056367411263162, 0.15236352213799487, 0.22798914698359152, 0.14709033682970263, 0.15898097807452083, 0.1647715087605326, 0.1798959448690297, 0.1935084732661544, 0.18366587627582398, 0.18828237146447158, 0.176694147783669, 0.1852641189590043, 0.1665334371107834, 0.17608710235229885, 0.05041316598048673, 0.04914154972914653, 0.06516503456496281, 0.0738719672128787, 0.06512730251585108, 0.06649788072287866, 0.05895484527449957, 0.05264611350096815, 0.061184929077482963]}, "mutation_prompt": null}
{"id": "6d4f73a2-34cd-491a-be94-f45386f413d4", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10\n        self.bandwidth = 0.01\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < 0.7:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                else:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                    new_solution[i] = max(min(new_solution[i], self.upper_bound), self.lower_bound)\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(x) for x in self.harmony_memory])]\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Harmony Search Algorithm for Black Box Optimization using a musical improvisation-inspired metaheuristic to explore the search space and find optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a99f558b-6ef0-4d78-a12b-c0a01e34c97f", "metadata": {"aucs": [0.24347651364518763, 0.24817137928397703, 0.26602292370901826, 0.19873481173045104, 0.2222579924657634, 0.21553786645869732, 0.23342101660934644, 0.22660249315004444, 0.2448787054246785, 0.04756455959759842, 0.025227806446950662, 0.019622167058139017, 0.002603722927977281, 9.999999999998899e-05, 0.019884577851347007, 0.007455365274847803, 0.0181866812834649, 0.019158573754586405, 0.07016949541378947, 0.08872534678826682, 0.08774296138810356, 0.07119642575688467, 0.08723724260038057, 0.09343727982036576, 0.06882382533835585, 0.07939782301635878, 0.07721235589460052, 0.057689793309210646, 0.10655833561442452, 0.07207678742533741, 0.06869732075053092, 0.05245523868088653, 0.07466861826431526, 0.05771815992683327, 0.05369707523565137, 0.0837947333287773, 0.12294742794361357, 0.10891377108907196, 0.13300884205527508, 0.11147109821531542, 0.12099613373090268, 0.11918211586007588, 0.10443226181049192, 0.12365935283304952, 0.10588173476650065, 0.10358878338356048, 0.07305857717228337, 0.08357982476569303, 0.1164901450878093, 0.09881085428035552, 0.11698800632892925, 0.08151100734372307, 0.09558900032101669, 0.11142683602338, 0.1519729879655375, 0.14571936429843046, 0.12406031878885282, 0.12464886277700649, 0.15817012014289955, 0.16828470592246902, 0.1333999691787492, 0.16805424982566763, 0.13113874353205024, 0.01404703576666666, 0.06767443020881014, 0.056386231030881806, 0.051523464299895405, 0.05937693261343446, 0.05236360279601382, 0.030841418103519702, 0.030990821826241355, 0.044486977301570696, 0.0744210709609906, 0.049352101758798894, 0.032480340440762645, 0.07638756203255348, 0.028712940003973397, 0.07760928570551828, 0.034987345550611115, 0.06256037260058633, 0.02199998143032922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.044167660556534205, 0.03380447557073185, 0.061435989604463836, 0.024185730565214336, 0.0703921341337802, 0.02775093824868058, 0.04041727630634906, 0.03935721220708077, 0.025211371313957898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025707171599829826, 0.0367427286169828, 0.0093930529486137, 0.0001678872510554319, 0.01634248506850311, 0.006221780818846168, 0.010183000000431597, 0.0052589633025527105, 0.0031553687669613195, 0.2634532461276675, 0.24197835671284296, 0.2149795496657172, 0.2121984601006518, 0.2356221078267483, 0.2517808051380309, 0.25254712452158223, 0.2509057165568571, 0.2412575566054972, 0.05345158894982105, 0.060829899992572045, 0.05547987017826528, 0.05180789260177332, 0.05272054145094829, 0.045242386228316556, 0.053375094349715435, 0.0611689894470312, 0.05240811715992333, 0.1097014255827995, 0.11372026577223082, 0.13642586376460952, 0.12131526407157489, 0.12519998279079392, 0.17115299826412844, 0.11379486498019176, 0.12742773162080379, 0.12946340738897721, 0.18086271073733884, 0.1850402008893277, 0.18238440426564118, 0.1850199557026131, 0.19102160482095165, 0.1832701162108209, 0.17659612379291978, 0.1842920037320951, 0.20379744404331057, 0.11766567367548564, 0.13548482046853683, 0.11949425844766792, 0.12609565118997157, 0.11992457385156563, 0.1353290126677399, 0.13529434289935127, 0.13391473272526033, 0.13503967121724292, 0.1715074588307749, 0.1776603808338023, 0.16025956103485495, 0.15718985857251244, 0.16457011428957014, 0.1778164850482522, 0.17161600518727482, 0.15444783882908997, 0.16215980241443262, 0.16285109804975584, 0.15296445329860686, 0.1627536088888013, 0.15725052366363557, 0.16568412675276756, 0.15364464068037942, 0.15954025977190034, 0.1535436881196861, 0.14646919176731243, 0.1565265895156095, 0.14122895065822882, 0.16452947507862115, 0.20243670598679464, 0.16607317784510456, 0.25648562475724845, 0.17682836870313734, 0.16125898118838555, 0.2173438859945731, 0.14141582805434771, 0.2289742858804965, 0.14892816448340562, 0.16364207157909028, 0.17056367411263162, 0.15236352213799487, 0.22798914698359152, 0.14709033682970263, 0.15898097807452083, 0.1647715087605326, 0.1798959448690297, 0.1935084732661544, 0.18366587627582398, 0.18828237146447158, 0.176694147783669, 0.1852641189590043, 0.1665334371107834, 0.17608710235229885, 0.05041316598048673, 0.04914154972914653, 0.06516503456496281, 0.0738719672128787, 0.06512730251585108, 0.06649788072287866, 0.05895484527449957, 0.05264611350096815, 0.061184929077482963]}, "mutation_prompt": null}
