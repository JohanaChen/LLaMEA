{"id": "677b93a1-1fde-42fe-96a5-dda7fcfce283", "solution": "import numpy as np\n\nclass QIEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.num_iterations = budget // self.population_size\n        self.alpha = 0.5\n        self.beta = 0.1\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        for _ in range(self.num_iterations):\n            offspring = np.array([np.clip(individual + np.random.normal(0, 1, self.dim), -5.0, 5.0) for individual in population])\n            fitness_values = np.array([func(individual) for individual in offspring])\n            sorted_indices = np.argsort(fitness_values)\n            population = (1 - self.alpha) * population + self.alpha * offspring[sorted_indices[:self.population_size]]\n            population += self.beta * np.random.normal(0, 1, (self.population_size, self.dim))\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "QIEA", "description": "Quantum-Inspired Evolutionary Algorithm (QIEA) combines quantum computing principles with evolutionary strategies to optimize black box functions efficiently.", "configspace": "", "generation": 0, "fitness": 0.1083118491180557, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.25282504185371313, 0.25748464127639414, 0.2714264043675949, 0.2182321425504623, 0.19965580916138537, 0.2199665109404365, 0.2165251119704492, 0.25129807470718046, 0.23194636008711333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06028661758898257, 0.0726004301868316, 0.050557742500824454, 0.052006334889035166, 0.06740457266960387, 0.06636681153080537, 0.05165329228127302, 0.055234880197635006, 0.06756159513399185, 0.05739336580826204, 0.04386901806351995, 0.041860373854408106, 0.03639690656480088, 0.04010055984726457, 0.042973963565227535, 0.04155029306590319, 0.03872539283838505, 0.02868754078370417, 0.0953383384425961, 0.09561147526634795, 0.08734906523175356, 0.12255260948835256, 0.0886013151982541, 0.10791249189442864, 0.11661454156382511, 0.08802405952603809, 0.10533245570363414, 0.09817431703943258, 0.08742208590139366, 0.08484811200618747, 0.05480656668735551, 0.06376737671626653, 0.07318076231680948, 0.10335200260945054, 0.10808976887783794, 0.12657834164755555, 0.16256771478540066, 0.15631657153589973, 0.12585317838112353, 0.1881372035133413, 0.15345378626806327, 0.15445069312571702, 0.1472618805530892, 0.13176629856278965, 0.1998500815930807, 0.058586073529120375, 0.023730103265281133, 0.062362993916049714, 0.059610937399315334, 0.039272866777071425, 0.05689679861525854, 0.06928298857429405, 0.06309023196156816, 0.036638448180601135, 0.09849448401579453, 0.09339947442765917, 0.0841941008259175, 0.08340039062103732, 0.09641615569714557, 0.08287805086913536, 0.09386976107227196, 0.0822104175793209, 0.06278377884513686, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09972849009264373, 0.06728231048772737, 0.11696267909016733, 0.062034486230098995, 0.05412525538645607, 0.049056090166033184, 0.09063313016290153, 0.07128066310218417, 0.08717131959137914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330343295488766, 0.040538528334091994, 0.0037506497978225806, 0.003521957776856821, 0.003008774904751599, 0.002048991801074096, 9.999999999998899e-05, 0.002842247874156656, 0.012897815490741649, 0.25888578235924775, 0.23599018116512238, 0.25804373253122026, 0.2280289646464404, 0.202731589434479, 0.22007580972182528, 0.2653560547936157, 0.24035433826648145, 0.24948696950461458, 0.06898482816456475, 0.0533827936725606, 0.04698071053981567, 0.07240888150775171, 0.04998649621659601, 0.07444433839928677, 0.060308597331882985, 0.06851162114723486, 0.07251254853008016, 0.12852762432244158, 0.12446023197700284, 0.14899118844622083, 0.16789352436599236, 0.1544871172935287, 0.12535756778184493, 0.12137592110584228, 0.13904014035216372, 0.14857906031377643, 0.17379145583360078, 0.18414239158895274, 0.16410520059772393, 0.169813764553709, 0.20567888947647905, 0.19282775861586665, 0.1508309547117993, 0.18384503799869667, 0.1505471064350863, 0.10397317213606783, 0.1210394709375765, 0.09926785157154971, 0.12267268468704573, 0.13296679659598454, 0.12895610845030314, 0.09225346369339182, 0.12519851457776598, 0.09259534519095469, 0.1911541387464426, 0.1938135227296507, 0.18586101297175506, 0.18421614969022482, 0.20105130367090684, 0.18688744340485464, 0.20602222385283908, 0.20855532824791545, 0.2016592276147794, 0.16662000169010194, 0.17473289612878784, 0.16128188946625321, 0.1623762408322862, 0.1703392196065996, 0.16588190081948873, 0.16276869445367959, 0.17333090984947663, 0.16348774782621334, 0.1625410617915819, 0.20192316881358408, 0.15222103576018575, 0.1702153273076087, 0.1651291724937668, 0.17605896630689277, 0.15327178290721555, 0.14155717478957885, 0.150695185442549, 0.21674453224952173, 0.16910115823961425, 0.16912208295791475, 0.1489381429238792, 0.19631063221093514, 0.2414756540396269, 0.16222186012071294, 0.14982002463533484, 0.1168826429867249, 0.1850290430122492, 0.2020996634080131, 0.17144013414957515, 0.2005162184534386, 0.18522395630088928, 0.1874513233832391, 0.18326260358357227, 0.17653102827196454, 0.1751369030703358, 0.07353487176052764, 0.07650452698899224, 0.07250229298278976, 0.06952217344486167, 0.06958576921523796, 0.07518427687083606, 0.06604897364156936, 0.0767605491265384, 0.07412839023396012]}, "mutation_prompt": null}
{"id": "b6e1e5d3-6789-454a-9975-1dd1dfba029e", "solution": "import numpy as np\n\nclass QIEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.num_iterations = budget // self.population_size\n        self.alpha = 0.5\n        self.beta = 0.1\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        for _ in range(self.num_iterations):\n            offspring = np.array([np.clip(individual + np.random.normal(0, 1, self.dim), -5.0, 5.0) for individual in population])\n            fitness_values = np.array([func(individual) for individual in offspring])\n            sorted_indices = np.argsort(fitness_values)\n            population = (1 - self.alpha) * population + self.alpha * offspring[sorted_indices[:self.population_size]]\n            population += self.beta * np.random.normal(0, 1, (self.population_size, self.dim))\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "QIEA", "description": "Quantum-Inspired Evolutionary Algorithm (QIEA) combines quantum computing principles with evolutionary strategies to optimize black box functions efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "677b93a1-1fde-42fe-96a5-dda7fcfce283", "metadata": {"aucs": [0.25282504185371313, 0.25748464127639414, 0.2714264043675949, 0.2182321425504623, 0.19965580916138537, 0.2199665109404365, 0.2165251119704492, 0.25129807470718046, 0.23194636008711333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06028661758898257, 0.0726004301868316, 0.050557742500824454, 0.052006334889035166, 0.06740457266960387, 0.06636681153080537, 0.05165329228127302, 0.055234880197635006, 0.06756159513399185, 0.05739336580826204, 0.04386901806351995, 0.041860373854408106, 0.03639690656480088, 0.04010055984726457, 0.042973963565227535, 0.04155029306590319, 0.03872539283838505, 0.02868754078370417, 0.0953383384425961, 0.09561147526634795, 0.08734906523175356, 0.12255260948835256, 0.0886013151982541, 0.10791249189442864, 0.11661454156382511, 0.08802405952603809, 0.10533245570363414, 0.09817431703943258, 0.08742208590139366, 0.08484811200618747, 0.05480656668735551, 0.06376737671626653, 0.07318076231680948, 0.10335200260945054, 0.10808976887783794, 0.12657834164755555, 0.16256771478540066, 0.15631657153589973, 0.12585317838112353, 0.1881372035133413, 0.15345378626806327, 0.15445069312571702, 0.1472618805530892, 0.13176629856278965, 0.1998500815930807, 0.058586073529120375, 0.023730103265281133, 0.062362993916049714, 0.059610937399315334, 0.039272866777071425, 0.05689679861525854, 0.06928298857429405, 0.06309023196156816, 0.036638448180601135, 0.09849448401579453, 0.09339947442765917, 0.0841941008259175, 0.08340039062103732, 0.09641615569714557, 0.08287805086913536, 0.09386976107227196, 0.0822104175793209, 0.06278377884513686, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09972849009264373, 0.06728231048772737, 0.11696267909016733, 0.062034486230098995, 0.05412525538645607, 0.049056090166033184, 0.09063313016290153, 0.07128066310218417, 0.08717131959137914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012330343295488766, 0.040538528334091994, 0.0037506497978225806, 0.003521957776856821, 0.003008774904751599, 0.002048991801074096, 9.999999999998899e-05, 0.002842247874156656, 0.012897815490741649, 0.25888578235924775, 0.23599018116512238, 0.25804373253122026, 0.2280289646464404, 0.202731589434479, 0.22007580972182528, 0.2653560547936157, 0.24035433826648145, 0.24948696950461458, 0.06898482816456475, 0.0533827936725606, 0.04698071053981567, 0.07240888150775171, 0.04998649621659601, 0.07444433839928677, 0.060308597331882985, 0.06851162114723486, 0.07251254853008016, 0.12852762432244158, 0.12446023197700284, 0.14899118844622083, 0.16789352436599236, 0.1544871172935287, 0.12535756778184493, 0.12137592110584228, 0.13904014035216372, 0.14857906031377643, 0.17379145583360078, 0.18414239158895274, 0.16410520059772393, 0.169813764553709, 0.20567888947647905, 0.19282775861586665, 0.1508309547117993, 0.18384503799869667, 0.1505471064350863, 0.10397317213606783, 0.1210394709375765, 0.09926785157154971, 0.12267268468704573, 0.13296679659598454, 0.12895610845030314, 0.09225346369339182, 0.12519851457776598, 0.09259534519095469, 0.1911541387464426, 0.1938135227296507, 0.18586101297175506, 0.18421614969022482, 0.20105130367090684, 0.18688744340485464, 0.20602222385283908, 0.20855532824791545, 0.2016592276147794, 0.16662000169010194, 0.17473289612878784, 0.16128188946625321, 0.1623762408322862, 0.1703392196065996, 0.16588190081948873, 0.16276869445367959, 0.17333090984947663, 0.16348774782621334, 0.1625410617915819, 0.20192316881358408, 0.15222103576018575, 0.1702153273076087, 0.1651291724937668, 0.17605896630689277, 0.15327178290721555, 0.14155717478957885, 0.150695185442549, 0.21674453224952173, 0.16910115823961425, 0.16912208295791475, 0.1489381429238792, 0.19631063221093514, 0.2414756540396269, 0.16222186012071294, 0.14982002463533484, 0.1168826429867249, 0.1850290430122492, 0.2020996634080131, 0.17144013414957515, 0.2005162184534386, 0.18522395630088928, 0.1874513233832391, 0.18326260358357227, 0.17653102827196454, 0.1751369030703358, 0.07353487176052764, 0.07650452698899224, 0.07250229298278976, 0.06952217344486167, 0.06958576921523796, 0.07518427687083606, 0.06604897364156936, 0.0767605491265384, 0.07412839023396012]}, "mutation_prompt": null}
