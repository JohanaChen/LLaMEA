{"id": "737a7cef-26e2-49fc-879f-11b202ce9bda", "solution": "import numpy as np\n\nclass AdaptiveCuckooSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.step_size = 0.5\n        self.nests = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n    \n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_nests = np.clip(self.nests + np.random.normal(0, self.step_size, size=(self.population_size, self.dim)), -5.0, 5.0)\n            new_nests_fitness = np.array([func(nest) for nest in new_nests])\n            sorted_indices = np.argsort(new_nests_fitness)\n            self.nests[sorted_indices[:-1]] += np.random.normal(0, 0.1, size=(self.population_size-1, self.dim))\n            self.step_size *= 0.99\n        return self.nests[sorted_indices[0]]", "name": "AdaptiveCuckooSearch", "description": "An adaptive cuckoo search algorithm that dynamically adjusts the step size during the optimization process to balance exploration and exploitation while minimizing function evaluations.", "configspace": "", "generation": 0, "fitness": 0.061098374764421606, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.090817088553927, 0.09263563210476966, 0.14199188718413314, 0.04396658965068967, 0.06640272094699007, 0.04394440782506104, 0.09458681568939742, 0.16163900412258847, 0.09283578329211772, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007501891042011599, 0.03391202421543782, 0.03511993443020178, 0.04134253027277279, 0.023194112333378314, 0.01945285629222726, 0.0387915865770363, 0.025948548969396468, 0.018704987612056856, 0.029230508719829462, 9.999999999998899e-05, 0.024241644835647613, 0.04763677051460746, 9.999999999998899e-05, 9.999999999998899e-05, 0.007923389704839745, 9.999999999998899e-05, 9.999999999998899e-05, 0.06295307066337796, 0.04832351827525194, 0.08615148434224684, 0.045410502024902266, 0.06268566786474772, 0.048048077241111264, 0.03716189664110936, 0.0564481086776899, 0.044619300910630044, 0.026572749168709775, 9.999999999998899e-05, 0.03471687028081527, 0.006253769126452924, 0.018956056738946736, 0.055623463391136774, 9.999999999998899e-05, 0.021980585656283247, 0.023581835982378507, 0.13025231369536017, 0.05588800978718178, 0.045850463901868754, 0.13485200678838405, 0.003103181240897035, 0.046835757760025465, 0.07029753860252674, 0.024915227884802493, 0.14175192101956435, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005221419341181588, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05109452073774956, 0.05198264150789145, 0.07816702724821845, 0.07712772270231161, 0.034520533190381286, 0.017925475142490765, 0.07711126154643277, 0.06775201942205245, 0.0011364312793490372, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11515865539568293, 0.15526667842208286, 0.18075463584487939, 0.1021185166460924, 0.1280581108103097, 0.10064220753004738, 0.1451405260693842, 0.11913322476493338, 0.17411514661432503, 0.027867567309965535, 9.999999999998899e-05, 9.999999999998899e-05, 0.023845337910489484, 0.024624828404207655, 0.05045569077058265, 0.019810410935342193, 0.05032654709772433, 0.06574846945826429, 0.1502536712415795, 0.11837432482111254, 0.1424739931349268, 0.12890096281464325, 0.13743509681429822, 0.1347408752274507, 0.14956278136689327, 0.13786060988870563, 0.17789974522662433, 0.13158298422620196, 0.11943747911745395, 0.11815493943117383, 0.16632789660133984, 0.12040567523987933, 0.1407656831717624, 0.14013499081386194, 0.12089919401909632, 0.13144738111089738, 0.0766672470791182, 0.08013741142972808, 0.060416222204001335, 0.07995296926176798, 0.060777809953054596, 0.06425724559579793, 0.10462431765949587, 0.07447133601890343, 0.05866125644216702, 0.17574483587020728, 0.1208609527711767, 0.15156692890593715, 0.16758610057505507, 0.12538242913597097, 0.16812814836453105, 0.18182268827841674, 0.13670866858605113, 0.15342436583921648, 9.999999999998899e-05, 0.0355424253204808, 0.04298096101215798, 9.999999999998899e-05, 9.999999999998899e-05, 0.13412637016309892, 0.13962592525104156, 9.999999999998899e-05, 9.999999999998899e-05, 0.12316354612868596, 0.10723073727496102, 0.13018651632018607, 0.10625537802111262, 0.1869455907682669, 0.10810240798639281, 0.10465445243139948, 0.10084991826503864, 0.13483938566137854, 0.11673817229584182, 0.10634704308961795, 0.06622110315259855, 0.07673876253470002, 0.07908333178285687, 0.08722300772133673, 0.07125501911882004, 0.035267486151660865, 0.10420385251819242, 0.18064226993273136, 0.19247356506324298, 0.18040451377333888, 0.17700738892105305, 0.1984383674298631, 0.18118605788960207, 0.1824393370489139, 0.18638796063731966, 0.186313878981477, 0.05414119602857914, 0.03886564311141194, 0.06133047498579269, 0.04083513980943476, 0.020145517122472145, 0.04228796701074389, 0.030921234835494582, 0.04097590871256629, 0.03016221795481311]}, "mutation_prompt": null}
{"id": "b73bc886-8b04-4319-91ff-489010ba9ba4", "solution": "import numpy as np\n\nclass ImprovedAdaptiveCuckooSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.step_size = 0.5\n        self.nests = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n    \n    def levy_flight(self):\n        beta = 1.5\n        sigma = (gamma(1 + beta) * np.sin(np.pi * beta / 2) / (gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=(self.population_size, self.dim))\n        v = np.random.normal(0, 1, size=(self.population_size, self.dim))\n        step = u / np.abs(v) ** (1 / beta)\n        return 0.01 * step\n    \n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_nests = np.clip(self.nests + self.levy_flight(), -5.0, 5.0)\n            new_nests_fitness = np.array([func(nest) for nest in new_nests])\n            sorted_indices = np.argsort(new_nests_fitness)\n            self.nests[sorted_indices[:-1]] += np.random.normal(0, 0.1, size=(self.population_size-1, self.dim))\n            self.step_size *= 0.99\n        return self.nests[sorted_indices[0]]", "name": "ImprovedAdaptiveCuckooSearch", "description": "Improving the adaptive cuckoo search algorithm by introducing Levy flights for better exploration capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'gamma' is not defined\").", "error": "NameError(\"name 'gamma' is not defined\")", "parent_id": "737a7cef-26e2-49fc-879f-11b202ce9bda", "metadata": {}, "mutation_prompt": null}
