{"id": "5726d687-29c1-47a8-b3cd-0d06ce7780f4", "solution": "import numpy as np\n\nclass DSLO:\n    def __init__(self, budget, dim, n_pop=50, n_neigh=5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_pop = n_pop\n        self.n_neigh = n_neigh\n        self.alpha = alpha\n\n    def _initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, size=(self.n_pop, self.dim))\n\n    def _evaluate_fitness(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def _get_neighbors(self, idx, population):\n        distances = np.linalg.norm(population - population[idx], axis=1)\n        sorted_neighbors = np.argsort(distances)\n        return sorted_neighbors[1:self.n_neigh+1]\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = self._evaluate_fitness(population, func)\n        \n        for _ in range(self.budget - self.n_pop):\n            for i in range(self.n_pop):\n                neighbors = self._get_neighbors(i, population)\n                best_neighbor = neighbors[np.argmin(fitness[neighbors])]\n                social_mean = np.mean(population[neighbors], axis=0)\n                population[i] = (1 - self.alpha) * population[i] + self.alpha * social_mean\n                fitness[i] = func(population[i])\n                \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DSLO", "description": "Dynamic Social Learning Optimization (DSLO) algorithm where individuals adjust their social behavior based on the success and diversity of their neighbors to enhance global exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.06585604027182416, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.13972289425169515, 0.10428208064710909, 0.11341541713739167, 0.09431231635004056, 0.10750000009520266, 0.1287402160633565, 0.11942972463216883, 0.07970945357865333, 0.07250343914097956, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014340113890132455, 0.0318484402803515, 0.03212709604808717, 0.04122502712871445, 0.02187656246651637, 0.023475841736211978, 0.02535159814274701, 0.025494891580031598, 0.0443013443431064, 0.014775005759044335, 0.010685617171024342, 0.03551528315901631, 0.07720508950123695, 0.0234030542690411, 0.009718508807489368, 0.03732054572607524, 0.031234800893190195, 0.0026401433078564462, 0.045179741609489454, 0.045385788542351646, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.08656317791982582, 9.999999999998899e-05, 9.999999999998899e-05, 0.022369096941964428, 0.010786738276316266, 0.02237420906874632, 9.999999999998899e-05, 0.015581216974420053, 9.999999999998899e-05, 0.10542735638789691, 0.12428114942692625, 0.06058852282175575, 0.0667108215001172, 0.08883739246949263, 9.999999999998899e-05, 0.09705542775150866, 0.09507938107628833, 0.11963549419236041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05757320643077579, 0.06902490384748994, 0.03318253112165093, 0.021317602456143114, 0.014972598627239098, 0.015595269801252143, 9.999999999998899e-05, 0.04911424471137049, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20188645743287514, 0.1604953421694585, 0.14838054695461433, 0.13161027399956582, 0.1158963514528274, 0.10942591213131092, 0.1961504110942499, 0.1276156388426749, 0.21825674874888157, 0.0067280479608603505, 0.01271851027626869, 0.032710510091831346, 0.0510773343370825, 0.022582439969568435, 0.03900425876930336, 0.03275118238500785, 0.018297725958832944, 0.037283646867406595, 0.1170970239668101, 0.1487649812283014, 0.11842175776965747, 0.13012428809046794, 0.11372099090448484, 0.14228750363350773, 0.13824674486035016, 0.10066611194904196, 0.13397004893363462, 0.13203972065736902, 0.12209125140819432, 0.1613932299901244, 0.16088887524684792, 0.1505227564649425, 0.15269888074696591, 0.1354426999471563, 0.17530713369096151, 0.15223875253567798, 0.07034127513418587, 0.058595571753746856, 0.08398582550377798, 0.10933616888057018, 0.09171697991417282, 0.08784253024738697, 0.09308736585974764, 0.1330825811165327, 0.09883086490507009, 0.1423314166887838, 0.15085697553281885, 0.13908534812184048, 0.20157426263322453, 0.15728240914820601, 0.1356643243724044, 0.15253442933443218, 0.16008065847271558, 0.1424663756647997, 9.999999999998899e-05, 0.1450040322793027, 9.999999999998899e-05, 0.11264083963708305, 0.1543542487039764, 9.999999999998899e-05, 9.999999999998899e-05, 0.13546349905733368, 9.999999999998899e-05, 0.08415586941059827, 0.1365931557162665, 0.08167024703901915, 0.1659664720801749, 0.1534699728123038, 0.12041566155373495, 0.10753574693757151, 0.10511484148144368, 0.13020380965427225, 0.16463129967955414, 0.27713198175005416, 0.06932034027342138, 0.06648320846661426, 0.07506803467284084, 0.06488597028925347, 0.13199495554088114, 0.16144845430901134, 0.04143420019681854, 0.18676067703236288, 0.2084793929427443, 0.1839600767227646, 0.19364680433238035, 0.19399748803785666, 0.1851993824361965, 0.18889567844729116, 0.18497412447509665, 0.15297674697046337, 0.05651791605904177, 0.035982975703316655, 0.046648907203547973, 0.0431723195001954, 0.06945132395163978, 0.048293404227458314, 0.04182972960456133, 0.04623754289532411, 0.04741664383944977]}, "mutation_prompt": null}
{"id": "13d6443a-564f-4429-9bb8-6d9ef7f4f8ab", "solution": "import numpy as np\n\nclass DSLO:\n    def __init__(self, budget, dim, n_pop=50, n_neigh=5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_pop = n_pop\n        self.n_neigh = n_neigh\n        self.alpha = alpha\n\n    def _initialize_population(self):\n        return np.random.uniform(-5.0, 5.0, size=(self.n_pop, self.dim))\n\n    def _evaluate_fitness(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def _get_neighbors(self, idx, population):\n        distances = np.linalg.norm(population - population[idx], axis=1)\n        sorted_neighbors = np.argsort(distances)\n        return sorted_neighbors[1:self.n_neigh+1]\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = self._evaluate_fitness(population, func)\n        \n        for _ in range(self.budget - self.n_pop):\n            for i in range(self.n_pop):\n                neighbors = self._get_neighbors(i, population)\n                best_neighbor = neighbors[np.argmin(fitness[neighbors])]\n                social_mean = np.mean(population[neighbors], axis=0)\n                population[i] = (1 - self.alpha) * population[i] + self.alpha * social_mean\n                fitness[i] = func(population[i])\n                \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DSLO", "description": "Dynamic Social Learning Optimization (DSLO) algorithm where individuals adjust their social behavior based on the success and diversity of their neighbors to enhance global exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5726d687-29c1-47a8-b3cd-0d06ce7780f4", "metadata": {"aucs": [0.13972289425169515, 0.10428208064710909, 0.11341541713739167, 0.09431231635004056, 0.10750000009520266, 0.1287402160633565, 0.11942972463216883, 0.07970945357865333, 0.07250343914097956, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014340113890132455, 0.0318484402803515, 0.03212709604808717, 0.04122502712871445, 0.02187656246651637, 0.023475841736211978, 0.02535159814274701, 0.025494891580031598, 0.0443013443431064, 0.014775005759044335, 0.010685617171024342, 0.03551528315901631, 0.07720508950123695, 0.0234030542690411, 0.009718508807489368, 0.03732054572607524, 0.031234800893190195, 0.0026401433078564462, 0.045179741609489454, 0.045385788542351646, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.08656317791982582, 9.999999999998899e-05, 9.999999999998899e-05, 0.022369096941964428, 0.010786738276316266, 0.02237420906874632, 9.999999999998899e-05, 0.015581216974420053, 9.999999999998899e-05, 0.10542735638789691, 0.12428114942692625, 0.06058852282175575, 0.0667108215001172, 0.08883739246949263, 9.999999999998899e-05, 0.09705542775150866, 0.09507938107628833, 0.11963549419236041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05757320643077579, 0.06902490384748994, 0.03318253112165093, 0.021317602456143114, 0.014972598627239098, 0.015595269801252143, 9.999999999998899e-05, 0.04911424471137049, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20188645743287514, 0.1604953421694585, 0.14838054695461433, 0.13161027399956582, 0.1158963514528274, 0.10942591213131092, 0.1961504110942499, 0.1276156388426749, 0.21825674874888157, 0.0067280479608603505, 0.01271851027626869, 0.032710510091831346, 0.0510773343370825, 0.022582439969568435, 0.03900425876930336, 0.03275118238500785, 0.018297725958832944, 0.037283646867406595, 0.1170970239668101, 0.1487649812283014, 0.11842175776965747, 0.13012428809046794, 0.11372099090448484, 0.14228750363350773, 0.13824674486035016, 0.10066611194904196, 0.13397004893363462, 0.13203972065736902, 0.12209125140819432, 0.1613932299901244, 0.16088887524684792, 0.1505227564649425, 0.15269888074696591, 0.1354426999471563, 0.17530713369096151, 0.15223875253567798, 0.07034127513418587, 0.058595571753746856, 0.08398582550377798, 0.10933616888057018, 0.09171697991417282, 0.08784253024738697, 0.09308736585974764, 0.1330825811165327, 0.09883086490507009, 0.1423314166887838, 0.15085697553281885, 0.13908534812184048, 0.20157426263322453, 0.15728240914820601, 0.1356643243724044, 0.15253442933443218, 0.16008065847271558, 0.1424663756647997, 9.999999999998899e-05, 0.1450040322793027, 9.999999999998899e-05, 0.11264083963708305, 0.1543542487039764, 9.999999999998899e-05, 9.999999999998899e-05, 0.13546349905733368, 9.999999999998899e-05, 0.08415586941059827, 0.1365931557162665, 0.08167024703901915, 0.1659664720801749, 0.1534699728123038, 0.12041566155373495, 0.10753574693757151, 0.10511484148144368, 0.13020380965427225, 0.16463129967955414, 0.27713198175005416, 0.06932034027342138, 0.06648320846661426, 0.07506803467284084, 0.06488597028925347, 0.13199495554088114, 0.16144845430901134, 0.04143420019681854, 0.18676067703236288, 0.2084793929427443, 0.1839600767227646, 0.19364680433238035, 0.19399748803785666, 0.1851993824361965, 0.18889567844729116, 0.18497412447509665, 0.15297674697046337, 0.05651791605904177, 0.035982975703316655, 0.046648907203547973, 0.0431723195001954, 0.06945132395163978, 0.048293404227458314, 0.04182972960456133, 0.04623754289532411, 0.04741664383944977]}, "mutation_prompt": null}
