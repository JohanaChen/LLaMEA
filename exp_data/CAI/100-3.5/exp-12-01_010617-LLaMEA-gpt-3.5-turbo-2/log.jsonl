{"id": "29b6341d-9434-4cf4-8bbe-5c8ef0e306ca", "solution": "import numpy as np\nimport random\nimport math\n\nclass HybridGA_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        def simulated_annealing(current, T, func):\n            while T > 1e-3:\n                candidate = current + np.random.normal(0, T, self.dim)\n                candidate = np.clip(candidate, -5.0, 5.0)\n                delta_E = func(candidate) - func(current)\n                if delta_E < 0 or np.random.rand() < math.exp(-delta_E / T):\n                    current = candidate\n                T *= 0.995\n            return current\n        \n        population_size = 50\n        population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(population_size)]\n        \n        for _ in range(self.budget):\n            offspring = []\n            for ind in population:\n                mutation = ind + np.random.normal(0, 0.1, self.dim)\n                mutation = np.clip(mutation, -5.0, 5.0)\n                \n                if func(mutation) < func(ind):\n                    offspring.append(mutation)\n                else:\n                    offspring.append(ind)\n            \n            offspring.sort(key=lambda x: func(x))\n            population[:population_size//2] = offspring[:population_size//2]\n            \n            for i in range(population_size//2, population_size):\n                population[i] = simulated_annealing(population[i], 1.0, func)\n        \n        population.sort(key=lambda x: func(x))\n        return population[0]", "name": "HybridGA_SA", "description": "Novel Hybrid Genetic Algorithm with Simulated Annealing for Black Box Optimization incorporating diversity maintenance and local search for exploration-exploitation balance.", "configspace": "", "generation": 0, "fitness": 0.22335319053846078, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.425701246142409, 0.4621540623634701, 0.4395238492946574, 0.42671644401241304, 0.42043450313133224, 0.3963111824427886, 0.39421501936193093, 0.4239809642212513, 0.4602529020819288, 0.00015430118730108688, 9.999999999998899e-05, 0.0033505462417803278, 0.02852723588605055, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.047817428620461566, 0.006986684858588554, 0.10450715225460172, 0.1052766810484922, 0.09885277992618358, 0.08228817526010157, 0.11445375298180027, 0.08109780313857229, 0.09512946573822534, 0.08065234795274079, 0.11962820527882245, 0.0825048921885253, 0.12374820457207092, 0.062461425167820384, 0.08530589475512929, 0.10257048157392523, 0.06133651031801257, 0.09132077787881265, 0.09585710894310162, 0.0406579253958016, 0.7195764973269165, 0.9487422081803036, 0.7276147260310917, 0.7119228515517643, 0.9158806215259818, 0.8808240019959036, 0.9399973670119798, 0.9339776069472019, 0.9751301800075408, 0.5070094535460237, 0.41288983538505386, 0.40428535628522, 0.3863015060524808, 0.3968566081452657, 0.4229622444175487, 0.4317922232686363, 0.4161338805024236, 0.5050327253411746, 0.19218380198643803, 0.6290907031997937, 0.2776770508965276, 0.32113058762667956, 0.4016023500461552, 0.37042926958446487, 0.2948344525775638, 0.27237540789028214, 0.2203217100784307, 0.21039296937520602, 0.22443196996566295, 0.21257170545519088, 0.19232749582487285, 0.21351475183794066, 0.18647551103221516, 0.18774880020000462, 0.19581902414376084, 0.2100834324546751, 0.14679722758168534, 0.20107413396794827, 0.11246294121953526, 0.30191777185773316, 0.1991075178916586, 0.17780573279677048, 0.1806691353726919, 0.20133797707002454, 0.21391955731847223, 9.999999999998899e-05, 9.999999999998899e-05, 0.14881299931976155, 0.05163918033087189, 0.015176373671263566, 0.050961784541539434, 0.021286201701216867, 0.037947758387867014, 9.999999999998899e-05, 0.07056274568821186, 0.040850053758871185, 0.06310128424067274, 0.03323606724430306, 0.0860473888734643, 0.030303684231312356, 0.06068939565181497, 0.03833174603244083, 0.02743077386302506, 0.10795658411862186, 0.11057175011973508, 0.16842690791196202, 0.1569394073513991, 0.10398309133699601, 0.13729369884498321, 0.11129321383446189, 0.10184915320413834, 0.17315858516403237, 0.1810324701936683, 0.13297694563305562, 0.09981361294663216, 0.19811880181892516, 0.19647544678802065, 0.12782124443860432, 0.16406624412563175, 0.11728647127294112, 0.13906418508635288, 0.42156269304018423, 0.4024216594595985, 0.384350378406097, 0.38689995820198597, 0.40418593900970534, 0.4339781152008638, 0.37610757350971613, 0.39546910663138235, 0.3556466564730435, 0.08777763568818464, 0.10712392399214965, 0.10827778192809856, 0.10775048165947687, 0.14200994291975055, 0.09327316619197101, 0.1571297613786028, 0.07021396068718955, 0.11594396118352668, 0.4250786470157093, 0.2785697831250473, 0.46466801649736633, 0.21847449698702415, 0.28613753801651687, 0.1571083872403768, 0.2339498043601721, 0.19048215316699024, 0.2246809225565788, 0.18266168450465303, 0.1678484308131829, 0.2937571055281972, 0.21578097812868202, 0.17352202682947426, 0.2021733604187249, 0.157682770871566, 0.2269496170086852, 0.12254397389520533, 0.2526447987419981, 0.21186674833799035, 0.15824670505060368, 0.19256120878507754, 0.1364088255480379, 0.12632724787383431, 0.11943503836715774, 0.21877043221617043, 0.10284088333217856, 0.1762692015178391, 0.17152769728675754, 0.26103259473089657, 0.19650947452205236, 0.17718678764690954, 0.1966276513228229, 0.20520904699369402, 0.19718271978386281, 0.17086182338709854, 0.18067041750462665, 0.20847693368808307, 0.1823551781866639, 0.22195051393067378, 0.207479324540066, 0.1847080679838783, 0.22221735144931298, 0.19607499269720452, 0.19804728594673826, 0.11153838649775794, 0.4138828553084053, 0.3742847682272751, 0.4713546273965804, 0.19954000086696388, 0.13225492127119431, 0.14985351065570773, 0.15398464938379097, 0.15864907940782103, 0.4002215160561262, 0.4084313495716485, 0.3172204183134849, 0.11652641416781262, 0.18732278839250738, 0.11277615427592591, 0.13954886061946326, 0.3720616479941913, 0.15403939514878606, 0.20045346724850166, 0.2227641913978543, 0.26436191282554833, 0.22940394249041074, 0.25446247667566035, 0.2608223827839895, 0.24110185755132074, 0.2476724610069847, 0.24842753727579214, 0.07407134070242372, 0.11574746596048902, 0.07916496852972177, 0.07728445590559674, 0.06478413186423515, 0.11276941539901364, 0.07999724631060179, 0.1253705448912089, 0.07244258131402859]}, "mutation_prompt": null}
{"id": "e10563af-5f24-4ce9-816a-bd0d7c5278d6", "solution": "import numpy as np\nimport random\nimport math\n\nclass HybridGA_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        def simulated_annealing(current, T, func):\n            while T > 1e-3:\n                candidate = current + np.random.normal(0, T, self.dim)\n                candidate = np.clip(candidate, -5.0, 5.0)\n                delta_E = func(candidate) - func(current)\n                if delta_E < 0 or np.random.rand() < math.exp(-delta_E / T):\n                    current = candidate\n                T *= 0.995\n            return current\n        \n        population_size = 50\n        population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(population_size)]\n        \n        for _ in range(self.budget):\n            offspring = []\n            for ind in population:\n                mutation = ind + np.random.normal(0, 0.1, self.dim)\n                mutation = np.clip(mutation, -5.0, 5.0)\n                \n                if func(mutation) < func(ind):\n                    offspring.append(mutation)\n                else:\n                    offspring.append(ind)\n            \n            offspring.sort(key=lambda x: func(x))\n            population[:population_size//2] = offspring[:population_size//2]\n            \n            for i in range(population_size//2, population_size):\n                population[i] = simulated_annealing(population[i], 1.0, func)\n        \n        population.sort(key=lambda x: func(x))\n        return population[0]", "name": "HybridGA_SA", "description": "Novel Hybrid Genetic Algorithm with Simulated Annealing for Black Box Optimization incorporating diversity maintenance and local search for exploration-exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "29b6341d-9434-4cf4-8bbe-5c8ef0e306ca", "metadata": {"aucs": [0.425701246142409, 0.4621540623634701, 0.4395238492946574, 0.42671644401241304, 0.42043450313133224, 0.3963111824427886, 0.39421501936193093, 0.4239809642212513, 0.4602529020819288, 0.00015430118730108688, 9.999999999998899e-05, 0.0033505462417803278, 0.02852723588605055, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.047817428620461566, 0.006986684858588554, 0.10450715225460172, 0.1052766810484922, 0.09885277992618358, 0.08228817526010157, 0.11445375298180027, 0.08109780313857229, 0.09512946573822534, 0.08065234795274079, 0.11962820527882245, 0.0825048921885253, 0.12374820457207092, 0.062461425167820384, 0.08530589475512929, 0.10257048157392523, 0.06133651031801257, 0.09132077787881265, 0.09585710894310162, 0.0406579253958016, 0.7195764973269165, 0.9487422081803036, 0.7276147260310917, 0.7119228515517643, 0.9158806215259818, 0.8808240019959036, 0.9399973670119798, 0.9339776069472019, 0.9751301800075408, 0.5070094535460237, 0.41288983538505386, 0.40428535628522, 0.3863015060524808, 0.3968566081452657, 0.4229622444175487, 0.4317922232686363, 0.4161338805024236, 0.5050327253411746, 0.19218380198643803, 0.6290907031997937, 0.2776770508965276, 0.32113058762667956, 0.4016023500461552, 0.37042926958446487, 0.2948344525775638, 0.27237540789028214, 0.2203217100784307, 0.21039296937520602, 0.22443196996566295, 0.21257170545519088, 0.19232749582487285, 0.21351475183794066, 0.18647551103221516, 0.18774880020000462, 0.19581902414376084, 0.2100834324546751, 0.14679722758168534, 0.20107413396794827, 0.11246294121953526, 0.30191777185773316, 0.1991075178916586, 0.17780573279677048, 0.1806691353726919, 0.20133797707002454, 0.21391955731847223, 9.999999999998899e-05, 9.999999999998899e-05, 0.14881299931976155, 0.05163918033087189, 0.015176373671263566, 0.050961784541539434, 0.021286201701216867, 0.037947758387867014, 9.999999999998899e-05, 0.07056274568821186, 0.040850053758871185, 0.06310128424067274, 0.03323606724430306, 0.0860473888734643, 0.030303684231312356, 0.06068939565181497, 0.03833174603244083, 0.02743077386302506, 0.10795658411862186, 0.11057175011973508, 0.16842690791196202, 0.1569394073513991, 0.10398309133699601, 0.13729369884498321, 0.11129321383446189, 0.10184915320413834, 0.17315858516403237, 0.1810324701936683, 0.13297694563305562, 0.09981361294663216, 0.19811880181892516, 0.19647544678802065, 0.12782124443860432, 0.16406624412563175, 0.11728647127294112, 0.13906418508635288, 0.42156269304018423, 0.4024216594595985, 0.384350378406097, 0.38689995820198597, 0.40418593900970534, 0.4339781152008638, 0.37610757350971613, 0.39546910663138235, 0.3556466564730435, 0.08777763568818464, 0.10712392399214965, 0.10827778192809856, 0.10775048165947687, 0.14200994291975055, 0.09327316619197101, 0.1571297613786028, 0.07021396068718955, 0.11594396118352668, 0.4250786470157093, 0.2785697831250473, 0.46466801649736633, 0.21847449698702415, 0.28613753801651687, 0.1571083872403768, 0.2339498043601721, 0.19048215316699024, 0.2246809225565788, 0.18266168450465303, 0.1678484308131829, 0.2937571055281972, 0.21578097812868202, 0.17352202682947426, 0.2021733604187249, 0.157682770871566, 0.2269496170086852, 0.12254397389520533, 0.2526447987419981, 0.21186674833799035, 0.15824670505060368, 0.19256120878507754, 0.1364088255480379, 0.12632724787383431, 0.11943503836715774, 0.21877043221617043, 0.10284088333217856, 0.1762692015178391, 0.17152769728675754, 0.26103259473089657, 0.19650947452205236, 0.17718678764690954, 0.1966276513228229, 0.20520904699369402, 0.19718271978386281, 0.17086182338709854, 0.18067041750462665, 0.20847693368808307, 0.1823551781866639, 0.22195051393067378, 0.207479324540066, 0.1847080679838783, 0.22221735144931298, 0.19607499269720452, 0.19804728594673826, 0.11153838649775794, 0.4138828553084053, 0.3742847682272751, 0.4713546273965804, 0.19954000086696388, 0.13225492127119431, 0.14985351065570773, 0.15398464938379097, 0.15864907940782103, 0.4002215160561262, 0.4084313495716485, 0.3172204183134849, 0.11652641416781262, 0.18732278839250738, 0.11277615427592591, 0.13954886061946326, 0.3720616479941913, 0.15403939514878606, 0.20045346724850166, 0.2227641913978543, 0.26436191282554833, 0.22940394249041074, 0.25446247667566035, 0.2608223827839895, 0.24110185755132074, 0.2476724610069847, 0.24842753727579214, 0.07407134070242372, 0.11574746596048902, 0.07916496852972177, 0.07728445590559674, 0.06478413186423515, 0.11276941539901364, 0.07999724631060179, 0.1253705448912089, 0.07244258131402859]}, "mutation_prompt": null}
