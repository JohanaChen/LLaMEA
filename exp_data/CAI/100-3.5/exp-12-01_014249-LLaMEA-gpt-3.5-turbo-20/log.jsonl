{"id": "ae17a6c2-4a67-4f02-b834-418550135e79", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, de_mut=0.5, de_crossp=0.7, w=0.7, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.de_mut = de_mut\n        self.de_crossp = de_crossp\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def constrain(x):\n            return np.clip(x, -5.0, 5.0)\n\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        p_best = swarm.copy()\n        p_best_fitness = np.array([func(ind) for ind in p_best])\n        g_best_idx = np.argmin(p_best_fitness)\n        g_best = p_best[g_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = self.w * velocities[i] + self.c1 * r1 * (p_best[i] - swarm[i]) + self.c2 * r2 * (g_best - swarm[i])\n                swarm[i] += velocities[i]\n                swarm[i] = constrain(swarm[i])\n                if np.random.rand() < self.de_crossp:\n                    idxs = np.random.choice(self.swarm_size, 3, replace=False)\n                    mutant = swarm[idxs[0]] + self.de_mut * (swarm[idxs[1]] - swarm[idxs[2]])\n                    crossover_points = np.random.rand(self.dim) < self.de_crossp\n                    swarm[i] = np.where(crossover_points, mutant, swarm[i])\n                swarm[i] = constrain(swarm[i])\n                fitness = func(swarm[i])\n                if fitness < p_best_fitness[i]:\n                    p_best[i] = swarm[i].copy()\n                    p_best_fitness[i] = fitness\n                    if fitness < p_best_fitness[g_best_idx]:\n                        g_best_idx = i\n                        g_best = swarm[i].copy()\n\n        return g_best", "name": "PSO_DE_Optimizer", "description": "Novel algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) for efficient black box optimization.", "configspace": "", "generation": 0, "fitness": 0.13911575967654755, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.20076459049108664, 0.21815778407858566, 0.20442966344566438, 0.2440518760636835, 0.2736938212653919, 0.2674976796131219, 0.22976366001812198, 0.23147985701109441, 0.18237079301606318, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05618787805428693, 0.05737860928624472, 0.05103880980068154, 0.05799646269851677, 0.08514986322476392, 0.04788158093084349, 0.08436895752268014, 0.05368428869504238, 0.06447449813447637, 0.02976958641699934, 0.05115391344987352, 0.046703941608737254, 0.05120722413869083, 0.03404315368586519, 0.05027991709794355, 0.041338306104139466, 0.04986177056798913, 0.04931989463038666, 0.9898360821471784, 0.9902505148705829, 0.9907382817203713, 0.9903439999206104, 0.9903571356372965, 0.9874820320761653, 0.9907037855170293, 0.9906652483949157, 0.9880877207762511, 0.09764746272236902, 0.1383673113813798, 0.09283238921247339, 0.14110503873675484, 0.1074150521778734, 0.08913274091106538, 0.087431314689709, 0.1191661117541607, 0.08443043477726642, 0.180451598583242, 0.12794192307300523, 0.15907126969663477, 0.16208028020705478, 0.1527604043725883, 0.16723035104288642, 0.1896914366416823, 0.14160669244378787, 0.17216745291778968, 0.0044403528215252175, 0.008344276040954557, 0.011405204659942547, 0.02271777929060681, 0.022172915477805533, 0.017132542383326066, 0.02491716160016544, 0.04533154560599273, 0.05466427939053009, 0.0285245923949069, 0.0029191835058393067, 0.05578831856320576, 0.028231313005874115, 0.00856332051543851, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0104554014689624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058892709197643445, 0.04535213248280512, 0.056855173501398015, 0.011952451142338893, 0.003878165928117072, 0.004950136073895162, 0.06022799328982198, 0.017173656196759257, 0.035532198626330724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008340844926011393, 0.011072048550023417, 0.02363047204871893, 0.02678545603669813, 0.009285565173659416, 0.0131298097253435, 0.020429383412290503, 0.009813394709539014, 0.009470191093218783, 0.23577354517134763, 0.22743135995875075, 0.23953465300628562, 0.23230991831515035, 0.21015521749734412, 0.22828625985609363, 0.30958128307089117, 0.2467400179874112, 0.21736857335081117, 0.06883555505924777, 0.06651304843921702, 0.08251282648582803, 0.05525556916487406, 0.0646289200361041, 0.061454394012578795, 0.05752471617224508, 0.05551784981549246, 0.05168186688303322, 0.1362032171636436, 0.16445042374604113, 0.13677095748805856, 0.182711335600797, 0.1426842045223068, 0.18132758676456018, 0.14231110079518527, 0.1431299292592968, 0.13082959733796673, 0.17944395397897384, 0.18392435108784033, 0.19270153790955524, 0.15950600618888278, 0.1681447539369335, 0.16058060494635917, 0.19550018603682173, 0.20361303518669316, 0.19120303171172093, 0.12340521449764541, 0.11986285360533788, 0.124647892480938, 0.11602879880137584, 0.12786402943052233, 0.148957876909816, 0.12772880121947616, 0.1304861940880725, 0.12216497074577637, 0.21424841322863253, 0.12895258453956082, 0.16208009616669083, 0.15418144983729276, 0.14544897157763903, 0.1563049478360835, 0.16018596168555377, 0.1633103227074233, 0.16738026951681018, 0.15111701737451255, 0.15338060065053427, 0.15676741418580187, 0.14932156572376187, 0.15095616277987722, 0.1523554551333549, 0.15203452344184465, 0.15498108015009315, 0.14967663206490633, 0.24333092503692555, 0.16607178447798054, 0.167606499209759, 0.18211248120660162, 0.14123254437290766, 0.13695202212843594, 0.09765540198084599, 0.16511462082527817, 0.17833551205521836, 0.18086629395539444, 0.15432691856456981, 0.16795592222815992, 0.14713708764201694, 0.164438836481952, 0.16366159262733038, 0.20715664123998634, 0.19970674258390608, 0.1892477666986666, 0.194644546985694, 0.2158996856405463, 0.18515502170250753, 0.18545176038358413, 0.1951942766279352, 0.18662718231268505, 0.2004112501337293, 0.18045264728967192, 0.1876224677523577, 0.048112098753291366, 0.05048304870727893, 0.0537071699580316, 0.05543033862171365, 0.054830251123606843, 0.06327175702728238, 0.06164504398125137, 0.0548164468682113, 0.05145235876590082]}, "mutation_prompt": null}
{"id": "1f84e708-ac8f-4bd6-a362-19bd5970a8c8", "solution": "import numpy as np\n\nclass Improved_PSO_DE_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, de_mut=0.5, de_crossp=0.7, c1=1.5, c2=1.5, w_max=0.9, w_min=0.4):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.de_mut = de_mut\n        self.de_crossp = de_crossp\n        self.c1 = c1\n        self.c2 = c2\n        self.w_max = w_max\n        self.w_min = w_min\n\n    def __call__(self, func):\n        def constrain(x):\n            return np.clip(x, -5.0, 5.0)\n\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        p_best = swarm.copy()\n        p_best_fitness = np.array([func(ind) for ind in p_best])\n        g_best_idx = np.argmin(p_best_fitness)\n        g_best = p_best[g_best_idx].copy()\n\n        for iter_count in range(1, self.budget + 1):\n            w = self.w_max - (self.w_max - self.w_min) * iter_count / self.budget\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = w * velocities[i] + self.c1 * r1 * (p_best[i] - swarm[i]) + self.c2 * r2 * (g_best - swarm[i])\n                swarm[i] += velocities[i]\n                swarm[i] = constrain(swarm[i])\n                if np.random.rand() < self.de_crossp:\n                    idxs = np.random.choice(self.swarm_size, 3, replace=False)\n                    mutant = swarm[idxs[0]] + self.de_mut * (swarm[idxs[1]] - swarm[idxs[2])\n                    crossover_points = np.random.rand(self.dim) < self.de_crossp\n                    swarm[i] = np.where(crossover_points, mutant, swarm[i])\n                swarm[i] = constrain(swarm[i])\n                fitness = func(swarm[i])\n                if fitness < p_best_fitness[i]:\n                    p_best[i] = swarm[i].copy()\n                    p_best_fitness[i] = fitness\n                    if fitness < p_best_fitness[g_best_idx]:\n                        g_best_idx = i\n                        g_best = swarm[i].copy()\n\n        return g_best", "name": "Improved_PSO_DE_Optimizer", "description": "Improved PSO_DE_Optimizer with adaptive inertia weight to dynamically adjust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError(\"closing parenthesis ')' does not match opening parenthesis '['\", ('<string>', 35, 92, '                    mutant = swarm[idxs[0]] + self.de_mut * (swarm[idxs[1]] - swarm[idxs[2])')).", "error": "SyntaxError(\"closing parenthesis ')' does not match opening parenthesis '['\", ('<string>', 35, 92, '                    mutant = swarm[idxs[0]] + self.de_mut * (swarm[idxs[1]] - swarm[idxs[2])'))", "parent_id": "ae17a6c2-4a67-4f02-b834-418550135e79", "metadata": {}, "mutation_prompt": null}
