{"id": "1529bc1e-1c94-48a1-916a-e78725d6c612", "solution": "import numpy as np\n\nclass Hybrid_DE_PSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.cr = 0.7\n        self.f = 0.5\n        self.w = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n\n    def __call__(self, func):\n        def de_rand_1_bin(x, pop, f):\n            r1, r2, r3 = np.random.choice(pop, 3, replace=False)\n            return np.clip(r1 + f * (r2 - r3), -5.0, 5.0)\n\n        def pso_update(x, pbest, gbest):\n            v = self.w * x['velocity'] + self.c1 * np.random.rand(self.dim) * (pbest - x['position']) + \\\n                self.c2 * np.random.rand(self.dim) * (gbest - x['position'])\n            x['velocity'] = np.clip(v, -1.0, 1.0)\n            x['position'] = np.clip(x['position'] + x['velocity'], -5.0, 5.0)\n            return x\n\n        population = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim)} \n                      for _ in range(self.pop_size)]\n        pbest = np.array([p['position'] for p in population])\n        gbest = pbest[np.argmin([func(p) for p in pbest])]\n\n        for _ in range(self.budget - self.pop_size):\n            for i, x in enumerate(population):\n                trial = de_rand_1_bin(x['position'], [p['position'] for p in population if p != x], self.f)\n                trial = pso_update({'position': trial, 'velocity': x['velocity']}, pbest[i], gbest)\n                if func(trial['position']) < func(x['position']):\n                    x['position'] = trial['position']\n                    pbest[i] = trial['position']\n                    if func(trial['position']) < func(gbest):\n                        gbest = trial['position']\n\n        return gbest", "name": "Hybrid_DE_PSO", "description": "Hybrid Differential Evolution with Particle Swarm Optimization (DE-PSO): Combining the exploration of DE with the exploitation of PSO to efficiently optimize black box functions within a limited budget.", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "An exception occured: Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 33, in __call__\n  File \"<string>\", line 33, in <listcomp>\nValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\n.", "error": "ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()')Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 33, in __call__\n  File \"<string>\", line 33, in <listcomp>\nValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\n", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "fb326faa-9f5d-40f6-8da1-ef9089ec5714", "solution": "import numpy as np\n\nclass Hybrid_DE_PSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.cr = 0.7\n        self.f = 0.5\n        self.w = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n\n    def __call__(self, func):\n        def de_rand_1_bin(x, pop, f):\n            r1, r2, r3 = np.random.choice(pop, 3, replace=False)\n            return np.clip(r1 + f * (r2 - r3), -5.0, 5.0)\n\n        def pso_update(x, pbest, gbest):\n            v = self.w * x['velocity'] + self.c1 * np.random.rand(self.dim) * (pbest - x['position']) + \\\n                self.c2 * np.random.rand(self.dim) * (gbest - x['position'])\n            x['velocity'] = np.clip(v, -1.0, 1.0)\n            x['position'] = np.clip(x['position'] + x['velocity'], -5.0, 5.0)\n            return x\n\n        population = [{'position': np.random.uniform(-5.0, 5.0, self.dim), 'velocity': np.zeros(self.dim)} \n                      for _ in range(self.pop_size)]\n        pbest = np.array([p['position'] for p in population])\n        gbest = pbest[np.argmin([func(p) for p in pbest])]\n\n        for _ in range(self.budget - self.pop_size):\n            for i, x in enumerate(population):\n                trial = de_rand_1_bin(x['position'], [p['position'] for p in population if p != x], self.f)\n                trial = pso_update({'position': trial, 'velocity': x['velocity']}, pbest[i], gbest)\n                if func(trial['position']) < func(x['position']):\n                    x['position'] = trial['position']\n                    pbest[i] = trial['position']\n                    if func(trial['position']) < func(gbest):\n                        gbest = trial['position']\n\n        return gbest", "name": "Hybrid_DE_PSO", "description": "Hybrid Differential Evolution with Particle Swarm Optimization (DE-PSO): Combining the exploration of DE with the exploitation of PSO to efficiently optimize black box functions within a limited budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1529bc1e-1c94-48a1-916a-e78725d6c612", "metadata": {}, "mutation_prompt": null}
