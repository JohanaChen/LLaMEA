{"id": "4dd19214-3ea7-48fe-8c57-97de3f21aa3c", "solution": "import numpy as np\n\nclass PSO_DE_Metaheuristic:\n    def __init__(self, budget, dim, swarm_size=20, pso_iters=100, de_iters=100, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_cr=0.9, de_f=0.8):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.pso_iters = pso_iters\n        self.de_iters = de_iters\n        self.pso_w = pso_w\n        self.pso_c1 = pso_c1\n        self.pso_c2 = pso_c2\n        self.de_cr = de_cr\n        self.de_f = de_f\n\n    def __call__(self, func):\n        def fitness(x):\n            return func(x)\n        \n        def pso_update_position(x, v):\n            return x + v\n        \n        def de_mutation(x, v1, v2, v3):\n            return x + self.de_f * (v1 - x) + self.de_f * (v2 - v3)\n        \n        def bound_check(x):\n            return np.clip(x, -5.0, 5.0)\n        \n        # Initialization\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([fitness(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        # PSO optimization\n        for _ in range(self.pso_iters):\n            r1, r2 = np.random.rand(self.swarm_size, self.dim), np.random.rand(self.swarm_size, self.dim)\n            velocity = self.pso_w * velocity + self.pso_c1 * r1 * (pbest - swarm) + self.pso_c2 * r2 * (gbest - swarm)\n            swarm = pso_update_position(swarm, velocity)\n            swarm = np.array([bound_check(p) for p in swarm])\n            current_fitness = np.array([fitness(p) for p in swarm])\n            update_indices = current_fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = current_fitness[update_indices]\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        # DE optimization\n        for _ in range(self.de_iters):\n            for i in range(self.swarm_size):\n                candidates = np.delete(swarm, i, axis=0)\n                idxs = np.random.choice(len(candidates), 3, replace=False)\n                a, b, c = candidates[idxs]\n                new_point = de_mutation(swarm[i], a, b, c)\n                new_point = bound_check(new_point)\n                if fitness(new_point) < fitness(swarm[i]):\n                    swarm[i] = new_point\n            current_fitness = np.array([fitness(p) for p in swarm])\n            update_indices = current_fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = current_fitness[update_indices]\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "PSO_DE_Metaheuristic", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) for black-box optimization tasks.", "configspace": "", "generation": 0, "fitness": 0.26342215743846825, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.9489418325203833, 0.9502740803319065, 0.9505173361281929, 0.9523497273424819, 0.9545270427939427, 0.9473643354976368, 0.9561167413377857, 0.940327471463471, 0.9560904694256678, 0.4737119372580302, 0.04433023693999549, 0.0, 0.2877147554995033, 0.049999635345725046, 0.07834839799472215, 0.8921002850627737, 0.28065938946156743, 0.3604596955619378, 0.19488144327283263, 0.10188350680352631, 0.12471011520317932, 0.09832174756653111, 0.07580937026717205, 0.10723873304152587, 0.12645862325867763, 0.11730371631398373, 0.08125449901181347, 0.11305064718416413, 0.10292535591955254, 0.08103475750483846, 0.09419926074273188, 0.0813015236569743, 0.11233902834783671, 0.09007877662699726, 0.09752454345331751, 0.10652676490847912, 0.9910845240014254, 0.9853982266957543, 0.9943627621357913, 0.9811676429133926, 0.9889849176268725, 0.9892593961814088, 0.9852530815117739, 0.9892549708340705, 0.9904971403207853, 0.41231796073697624, 0.828564315756099, 0.7830711683887883, 0.3305959176198968, 0.15549662838196376, 0.15516598504610757, 0.12863234825419023, 0.08821224101684688, 0.5880686054950303, 0.15999709353084257, 0.16910022657207469, 0.2294033845551916, 0.2844581505846103, 0.19460948172663706, 0.38800012671964434, 0.08962486943419479, 0.12736582403451124, 0.22695788680522178, 0.1814357081125335, 0.16518140396925607, 0.168291229616634, 0.17367418404481583, 0.08692253689965779, 0.18615595637539284, 0.16568440125836148, 0.1636107806292848, 0.1881833681353059, 0.28231766177236817, 0.13111848443078922, 0.2418666752560814, 0.16300017520205878, 0.28115788282773924, 0.140391352895608, 0.20611967946169008, 0.0, 0.12785705085371013, 0.0, 0.0, 0.06576349861639752, 0.0522287314018286, 0.0, 0.057691801966089584, 0.0004908956928416641, 0.0, 0.21807323807682477, 0.14391315153542839, 0.04216825457554352, 0.06512325705599964, 0.3209224792337012, 0.029879092698765763, 0.033296200049476976, 0.2649982238967228, 0.17030129705300678, 0.04758000113648664, 0.054743246689809344, 0.0, 0.16541460187638113, 0.08516832204539493, 0.14663692185972, 0.08566690585948511, 0.3640992436783025, 0.11330593082515694, 0.079028509598295, 0.044412979917698436, 0.04458683044122824, 0.11914014029550235, 0.0068336866912788174, 0.38456972879002205, 0.006809211675220306, 0.08601609360959961, 0.5989010070609928, 0.09816084318799279, 0.630493908110227, 0.53154299830839, 0.6527078398608894, 0.5224605818721751, 0.5714521027816462, 0.5637610034351406, 0.6286753709986491, 0.8170757864195892, 0.5860872136829054, 0.11990469593508601, 0.09373883992019272, 0.06481238422501334, 0.13551614484283125, 0.08378998593423204, 0.12650419746097108, 0.0766187925457783, 0.07550339236854975, 0.08121755656124663, 0.2804653208005464, 0.1846212605870441, 0.2035564044751289, 0.37261238706725985, 0.3516349316961298, 0.14722278418139267, 0.25715327213199424, 0.12798989096605606, 0.21205805853955917, 0.2571931484747363, 0.2551855942543694, 0.19389671161426558, 0.3184172577165455, 0.17951321107008422, 0.21625838381799345, 0.2337023389651416, 0.23690935634980614, 0.18065991895395306, 0.20172878309095998, 0.2955747913809591, 0.20022245972629094, 0.2329332454374159, 0.2384730159354126, 0.2556803054292073, 0.17821830167840713, 0.35069252190404965, 0.08797472704604736, 0.23735999859654622, 0.23437201969310562, 0.18244209166887337, 0.2584506528926086, 0.21330671804559864, 0.1974846780223687, 0.21775245964696088, 0.18715168167488272, 0.2218280289050113, 0.18984424067654515, 0.18962722875034244, 0.18213211754324388, 0.21336489611560094, 0.1918516306963275, 0.1883963158829688, 0.2015368140125111, 0.21124229389367633, 0.21126879947328858, 0.10560384360446606, 0.1271310598590315, 0.15495527041848434, 0.17333164865964867, 0.20224554098243075, 0.1703722928796444, 0.10011961074640707, 0.17040206221152898, 0.15418315941542626, 0.08337782260169568, 0.1748403068951988, 0.07342814820039367, 0.4747564265562546, 0.17019634340913237, 0.2139877008352269, 0.1042593692820416, 0.5930269354598714, 0.4836181814500977, 0.1998849904560408, 0.20486914475752915, 0.20899837523847575, 0.20675589893377277, 0.26620390081112644, 0.20821503800581542, 0.17438330371284005, 0.2254754059485733, 0.19547587570155633, 0.10752931309293201, 0.06778735783904011, 0.061804737418468925, 0.07479959521159474, 0.10109750513397342, 0.08957560620432248, 0.09773322630919024, 0.051995015923506305, 0.0704686290362293]}, "mutation_prompt": null}
{"id": "b144e1b0-349e-4bf0-860e-2d71937557a1", "solution": "import numpy as np\n\nclass PSO_DE_Metaheuristic:\n    def __init__(self, budget, dim, swarm_size=20, pso_iters=100, de_iters=100, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_cr=0.9, de_f=0.8):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.pso_iters = pso_iters\n        self.de_iters = de_iters\n        self.pso_w = pso_w\n        self.pso_c1 = pso_c1\n        self.pso_c2 = pso_c2\n        self.de_cr = de_cr\n        self.de_f = de_f\n\n    def __call__(self, func):\n        def fitness(x):\n            return func(x)\n        \n        def pso_update_position(x, v):\n            return x + v\n        \n        def de_mutation(x, v1, v2, v3):\n            return x + self.de_f * (v1 - x) + self.de_f * (v2 - v3)\n        \n        def bound_check(x):\n            return np.clip(x, -5.0, 5.0)\n        \n        # Initialization\n        swarm = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocity = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        pbest_fitness = np.array([fitness(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        \n        # PSO optimization\n        for _ in range(self.pso_iters):\n            r1, r2 = np.random.rand(self.swarm_size, self.dim), np.random.rand(self.swarm_size, self.dim)\n            velocity = self.pso_w * velocity + self.pso_c1 * r1 * (pbest - swarm) + self.pso_c2 * r2 * (gbest - swarm)\n            swarm = pso_update_position(swarm, velocity)\n            swarm = np.array([bound_check(p) for p in swarm])\n            current_fitness = np.array([fitness(p) for p in swarm])\n            update_indices = current_fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = current_fitness[update_indices]\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        # DE optimization\n        for _ in range(self.de_iters):\n            for i in range(self.swarm_size):\n                candidates = np.delete(swarm, i, axis=0)\n                idxs = np.random.choice(len(candidates), 3, replace=False)\n                a, b, c = candidates[idxs]\n                new_point = de_mutation(swarm[i], a, b, c)\n                new_point = bound_check(new_point)\n                if fitness(new_point) < fitness(swarm[i]):\n                    swarm[i] = new_point\n            current_fitness = np.array([fitness(p) for p in swarm])\n            update_indices = current_fitness < pbest_fitness\n            pbest[update_indices] = swarm[update_indices]\n            pbest_fitness[update_indices] = current_fitness[update_indices]\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n        \n        return gbest", "name": "PSO_DE_Metaheuristic", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) for black-box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "4dd19214-3ea7-48fe-8c57-97de3f21aa3c", "metadata": {"aucs": [0.9489418325203833, 0.9502740803319065, 0.9505173361281929, 0.9523497273424819, 0.9545270427939427, 0.9473643354976368, 0.9561167413377857, 0.940327471463471, 0.9560904694256678, 0.4737119372580302, 0.04433023693999549, 0.0, 0.2877147554995033, 0.049999635345725046, 0.07834839799472215, 0.8921002850627737, 0.28065938946156743, 0.3604596955619378, 0.19488144327283263, 0.10188350680352631, 0.12471011520317932, 0.09832174756653111, 0.07580937026717205, 0.10723873304152587, 0.12645862325867763, 0.11730371631398373, 0.08125449901181347, 0.11305064718416413, 0.10292535591955254, 0.08103475750483846, 0.09419926074273188, 0.0813015236569743, 0.11233902834783671, 0.09007877662699726, 0.09752454345331751, 0.10652676490847912, 0.9910845240014254, 0.9853982266957543, 0.9943627621357913, 0.9811676429133926, 0.9889849176268725, 0.9892593961814088, 0.9852530815117739, 0.9892549708340705, 0.9904971403207853, 0.41231796073697624, 0.828564315756099, 0.7830711683887883, 0.3305959176198968, 0.15549662838196376, 0.15516598504610757, 0.12863234825419023, 0.08821224101684688, 0.5880686054950303, 0.15999709353084257, 0.16910022657207469, 0.2294033845551916, 0.2844581505846103, 0.19460948172663706, 0.38800012671964434, 0.08962486943419479, 0.12736582403451124, 0.22695788680522178, 0.1814357081125335, 0.16518140396925607, 0.168291229616634, 0.17367418404481583, 0.08692253689965779, 0.18615595637539284, 0.16568440125836148, 0.1636107806292848, 0.1881833681353059, 0.28231766177236817, 0.13111848443078922, 0.2418666752560814, 0.16300017520205878, 0.28115788282773924, 0.140391352895608, 0.20611967946169008, 0.0, 0.12785705085371013, 0.0, 0.0, 0.06576349861639752, 0.0522287314018286, 0.0, 0.057691801966089584, 0.0004908956928416641, 0.0, 0.21807323807682477, 0.14391315153542839, 0.04216825457554352, 0.06512325705599964, 0.3209224792337012, 0.029879092698765763, 0.033296200049476976, 0.2649982238967228, 0.17030129705300678, 0.04758000113648664, 0.054743246689809344, 0.0, 0.16541460187638113, 0.08516832204539493, 0.14663692185972, 0.08566690585948511, 0.3640992436783025, 0.11330593082515694, 0.079028509598295, 0.044412979917698436, 0.04458683044122824, 0.11914014029550235, 0.0068336866912788174, 0.38456972879002205, 0.006809211675220306, 0.08601609360959961, 0.5989010070609928, 0.09816084318799279, 0.630493908110227, 0.53154299830839, 0.6527078398608894, 0.5224605818721751, 0.5714521027816462, 0.5637610034351406, 0.6286753709986491, 0.8170757864195892, 0.5860872136829054, 0.11990469593508601, 0.09373883992019272, 0.06481238422501334, 0.13551614484283125, 0.08378998593423204, 0.12650419746097108, 0.0766187925457783, 0.07550339236854975, 0.08121755656124663, 0.2804653208005464, 0.1846212605870441, 0.2035564044751289, 0.37261238706725985, 0.3516349316961298, 0.14722278418139267, 0.25715327213199424, 0.12798989096605606, 0.21205805853955917, 0.2571931484747363, 0.2551855942543694, 0.19389671161426558, 0.3184172577165455, 0.17951321107008422, 0.21625838381799345, 0.2337023389651416, 0.23690935634980614, 0.18065991895395306, 0.20172878309095998, 0.2955747913809591, 0.20022245972629094, 0.2329332454374159, 0.2384730159354126, 0.2556803054292073, 0.17821830167840713, 0.35069252190404965, 0.08797472704604736, 0.23735999859654622, 0.23437201969310562, 0.18244209166887337, 0.2584506528926086, 0.21330671804559864, 0.1974846780223687, 0.21775245964696088, 0.18715168167488272, 0.2218280289050113, 0.18984424067654515, 0.18962722875034244, 0.18213211754324388, 0.21336489611560094, 0.1918516306963275, 0.1883963158829688, 0.2015368140125111, 0.21124229389367633, 0.21126879947328858, 0.10560384360446606, 0.1271310598590315, 0.15495527041848434, 0.17333164865964867, 0.20224554098243075, 0.1703722928796444, 0.10011961074640707, 0.17040206221152898, 0.15418315941542626, 0.08337782260169568, 0.1748403068951988, 0.07342814820039367, 0.4747564265562546, 0.17019634340913237, 0.2139877008352269, 0.1042593692820416, 0.5930269354598714, 0.4836181814500977, 0.1998849904560408, 0.20486914475752915, 0.20899837523847575, 0.20675589893377277, 0.26620390081112644, 0.20821503800581542, 0.17438330371284005, 0.2254754059485733, 0.19547587570155633, 0.10752931309293201, 0.06778735783904011, 0.061804737418468925, 0.07479959521159474, 0.10109750513397342, 0.08957560620432248, 0.09773322630919024, 0.051995015923506305, 0.0704686290362293]}, "mutation_prompt": null}
