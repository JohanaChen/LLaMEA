{"id": "689c6b3b-f466-413a-a3ca-ff860e789c0c", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 20\n        self.bandwidth = 0.01\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def improvise_new_harmony(harmony_memory):\n            new_harmony = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                else:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_harmony[i] = harmony_memory[idx, i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                    new_harmony[i] = np.clip(new_harmony[i], self.lower_bound, self.upper_bound)\n            return new_harmony\n\n        harmony_memory = initialize_harmony_memory()\n        harmony_values = np.array([func(h) for h in harmony_memory])\n        for _ in range(self.budget - self.harmony_memory_size):\n            new_harmony = improvise_new_harmony(harmony_memory)\n            new_value = func(new_harmony)\n            if new_value < np.max(harmony_values):\n                idx = np.argmax(harmony_values)\n                harmony_memory[idx] = new_harmony\n                harmony_values[idx] = new_value\n        best_idx = np.argmin(harmony_values)\n        return harmony_memory[best_idx]", "name": "HarmonySearch", "description": "Harmony Search Algorithm: A metaheuristic algorithm inspired by the improvisation process of musicians to find optimal solutions by searching the harmony in a solution space.", "configspace": "", "generation": 0, "fitness": 0.16238442073739773, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.3662188611288967, 0.41428651576364994, 0.3803956901415769, 0.37502058072766786, 0.4361508128121717, 0.39580043984857494, 0.3641763887383418, 0.38883035437910907, 0.3636960420237132, 0.11448246987309907, 0.08940331949907743, 0.08507458170146442, 0.09250653993336577, 0.1555934405401893, 0.12431864189252229, 0.0915655345767673, 0.11285324363724225, 0.09593412007897784, 0.14933913648276598, 0.1569274128168634, 0.19910882518618422, 0.2035300647334508, 0.15229208176826992, 0.1877378885774056, 0.14950140981305704, 0.14654606259000524, 0.21483078603005834, 0.15118685027322176, 0.1745778262631622, 0.13972472824673499, 0.11726848702812753, 0.15360020865973034, 0.14457119022145892, 0.12361926091908704, 0.19659995069216063, 0.20486964010139763, 0.18327509012670684, 0.1931655191895305, 0.2251941331045766, 0.25587500098188387, 0.19801115782760104, 0.18552691589942394, 0.23942152067150924, 0.19922306836884995, 0.21231575869139419, 0.16427205457493887, 0.13866143462911718, 0.1804642424899926, 0.154662220402339, 0.17608090853249014, 0.18664507247194262, 0.14685060128565586, 0.17871391633900402, 0.17909802766299776, 0.1694351555429372, 0.21409235324606357, 0.18164382585092353, 0.1831292160161092, 0.21677075615671715, 0.2517868578012451, 0.1979016357006793, 0.20915086347714928, 0.21579664801802412, 0.12099146942761674, 0.09348958730271739, 0.073123663290804, 0.09157115426063678, 0.11075220831743937, 0.08852234648428114, 0.13421294881526735, 0.15397849034436162, 0.12596713714340146, 0.11479722953816396, 0.11385693075060987, 0.11854444403704889, 0.10853016118900394, 0.0869048958917863, 0.1117576831279985, 0.11569033381055216, 0.11382410156756051, 0.11941504145383663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06013777063811865, 0.07230678811618141, 0.07148618724419664, 0.021137508408950234, 0.028557686673985727, 0.061277260363403196, 0.05755639911644228, 0.05665347601585835, 0.05533151797256941, 0.00010794431849259212, 0.002665408536219882, 0.004135565831107302, 9.999999999998899e-05, 0.0027971537983491057, 0.0020582606393434455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04274200145557938, 0.05289586481793962, 0.056990491091069684, 0.07122834422033197, 0.0753880229575743, 0.04260252016956978, 0.07593092840412774, 0.08356976416397843, 0.06250522576610695, 0.3533483489697503, 0.32699121153633737, 0.3333694913302322, 0.3475386438161687, 0.3314089632360674, 0.31323080018221705, 0.33511230144768667, 0.34113974390394286, 0.38163637246701654, 0.09281383245362662, 0.08075577669864598, 0.08298648904020078, 0.08404379534041362, 0.07701739831716148, 0.0911260857755708, 0.08710571402917267, 0.08542496539376587, 0.08337989893931863, 0.16440770249000436, 0.1452611017968788, 0.13353959328064868, 0.13790426088499042, 0.12964026321849065, 0.16280935654746553, 0.1487610280676761, 0.13392596425799963, 0.15793181842426018, 0.25283387701033055, 0.26006418994795566, 0.24379123954945725, 0.2368683944726221, 0.2260205108343024, 0.251997116315434, 0.24493705145571876, 0.2421973094063712, 0.2751001723628079, 0.16595062767965552, 0.1539781582268135, 0.1747055622516004, 0.16491623728731175, 0.1693378512261956, 0.18420403390663342, 0.18560523189203137, 0.19054667374213818, 0.18501004867501014, 0.1894970766716323, 0.18478496376126785, 0.17630997028881534, 0.18335794097866664, 0.186717624155316, 0.19816639157921612, 0.18926402959390654, 0.17695532987954177, 0.20809291223722326, 0.1729400137636139, 0.19310369037915653, 0.3187094533935355, 0.20846398669254318, 0.19950899149165913, 0.21071297607066297, 0.19794440803794555, 0.1859689507038541, 0.23198727895984517, 0.1606716889649068, 0.3498602115504408, 0.42280470305049245, 0.3692378745078507, 0.4157202619315713, 0.19990059197497645, 0.30447244256748207, 0.28870702655345803, 0.18718891987890218, 0.28910421870151537, 0.16093443425616238, 0.1604622134305841, 0.19356543232938173, 0.16555184703397385, 0.1991192454210282, 0.23766720817109677, 0.1596278986009323, 0.2095123727353181, 0.18458307407966945, 0.1693648772016364, 0.1841998275970954, 0.17247296777630727, 0.1993763259347896, 0.1802522968802428, 0.17725890981802983, 0.19041154830673523, 0.19000989995197637, 0.08624466730913738, 0.07721682242588046, 0.0692752331932841, 0.07395457098464908, 0.08312214123231243, 0.07062689496681418, 0.06510807723398848, 0.08346535301035418, 0.07422634275649975]}, "mutation_prompt": null}
{"id": "c1320eea-ffcc-4398-bb66-86e564bf1a70", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 20\n        self.bandwidth = 0.01\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n\n        def improvise_new_harmony(harmony_memory):\n            new_harmony = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                else:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_harmony[i] = harmony_memory[idx, i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                    new_harmony[i] = np.clip(new_harmony[i], self.lower_bound, self.upper_bound)\n            return new_harmony\n\n        harmony_memory = initialize_harmony_memory()\n        harmony_values = np.array([func(h) for h in harmony_memory])\n        for _ in range(self.budget - self.harmony_memory_size):\n            new_harmony = improvise_new_harmony(harmony_memory)\n            new_value = func(new_harmony)\n            if new_value < np.max(harmony_values):\n                idx = np.argmax(harmony_values)\n                harmony_memory[idx] = new_harmony\n                harmony_values[idx] = new_value\n        best_idx = np.argmin(harmony_values)\n        return harmony_memory[best_idx]", "name": "HarmonySearch", "description": "Harmony Search Algorithm: A metaheuristic algorithm inspired by the improvisation process of musicians to find optimal solutions by searching the harmony in a solution space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "689c6b3b-f466-413a-a3ca-ff860e789c0c", "metadata": {"aucs": [0.3662188611288967, 0.41428651576364994, 0.3803956901415769, 0.37502058072766786, 0.4361508128121717, 0.39580043984857494, 0.3641763887383418, 0.38883035437910907, 0.3636960420237132, 0.11448246987309907, 0.08940331949907743, 0.08507458170146442, 0.09250653993336577, 0.1555934405401893, 0.12431864189252229, 0.0915655345767673, 0.11285324363724225, 0.09593412007897784, 0.14933913648276598, 0.1569274128168634, 0.19910882518618422, 0.2035300647334508, 0.15229208176826992, 0.1877378885774056, 0.14950140981305704, 0.14654606259000524, 0.21483078603005834, 0.15118685027322176, 0.1745778262631622, 0.13972472824673499, 0.11726848702812753, 0.15360020865973034, 0.14457119022145892, 0.12361926091908704, 0.19659995069216063, 0.20486964010139763, 0.18327509012670684, 0.1931655191895305, 0.2251941331045766, 0.25587500098188387, 0.19801115782760104, 0.18552691589942394, 0.23942152067150924, 0.19922306836884995, 0.21231575869139419, 0.16427205457493887, 0.13866143462911718, 0.1804642424899926, 0.154662220402339, 0.17608090853249014, 0.18664507247194262, 0.14685060128565586, 0.17871391633900402, 0.17909802766299776, 0.1694351555429372, 0.21409235324606357, 0.18164382585092353, 0.1831292160161092, 0.21677075615671715, 0.2517868578012451, 0.1979016357006793, 0.20915086347714928, 0.21579664801802412, 0.12099146942761674, 0.09348958730271739, 0.073123663290804, 0.09157115426063678, 0.11075220831743937, 0.08852234648428114, 0.13421294881526735, 0.15397849034436162, 0.12596713714340146, 0.11479722953816396, 0.11385693075060987, 0.11854444403704889, 0.10853016118900394, 0.0869048958917863, 0.1117576831279985, 0.11569033381055216, 0.11382410156756051, 0.11941504145383663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06013777063811865, 0.07230678811618141, 0.07148618724419664, 0.021137508408950234, 0.028557686673985727, 0.061277260363403196, 0.05755639911644228, 0.05665347601585835, 0.05533151797256941, 0.00010794431849259212, 0.002665408536219882, 0.004135565831107302, 9.999999999998899e-05, 0.0027971537983491057, 0.0020582606393434455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04274200145557938, 0.05289586481793962, 0.056990491091069684, 0.07122834422033197, 0.0753880229575743, 0.04260252016956978, 0.07593092840412774, 0.08356976416397843, 0.06250522576610695, 0.3533483489697503, 0.32699121153633737, 0.3333694913302322, 0.3475386438161687, 0.3314089632360674, 0.31323080018221705, 0.33511230144768667, 0.34113974390394286, 0.38163637246701654, 0.09281383245362662, 0.08075577669864598, 0.08298648904020078, 0.08404379534041362, 0.07701739831716148, 0.0911260857755708, 0.08710571402917267, 0.08542496539376587, 0.08337989893931863, 0.16440770249000436, 0.1452611017968788, 0.13353959328064868, 0.13790426088499042, 0.12964026321849065, 0.16280935654746553, 0.1487610280676761, 0.13392596425799963, 0.15793181842426018, 0.25283387701033055, 0.26006418994795566, 0.24379123954945725, 0.2368683944726221, 0.2260205108343024, 0.251997116315434, 0.24493705145571876, 0.2421973094063712, 0.2751001723628079, 0.16595062767965552, 0.1539781582268135, 0.1747055622516004, 0.16491623728731175, 0.1693378512261956, 0.18420403390663342, 0.18560523189203137, 0.19054667374213818, 0.18501004867501014, 0.1894970766716323, 0.18478496376126785, 0.17630997028881534, 0.18335794097866664, 0.186717624155316, 0.19816639157921612, 0.18926402959390654, 0.17695532987954177, 0.20809291223722326, 0.1729400137636139, 0.19310369037915653, 0.3187094533935355, 0.20846398669254318, 0.19950899149165913, 0.21071297607066297, 0.19794440803794555, 0.1859689507038541, 0.23198727895984517, 0.1606716889649068, 0.3498602115504408, 0.42280470305049245, 0.3692378745078507, 0.4157202619315713, 0.19990059197497645, 0.30447244256748207, 0.28870702655345803, 0.18718891987890218, 0.28910421870151537, 0.16093443425616238, 0.1604622134305841, 0.19356543232938173, 0.16555184703397385, 0.1991192454210282, 0.23766720817109677, 0.1596278986009323, 0.2095123727353181, 0.18458307407966945, 0.1693648772016364, 0.1841998275970954, 0.17247296777630727, 0.1993763259347896, 0.1802522968802428, 0.17725890981802983, 0.19041154830673523, 0.19000989995197637, 0.08624466730913738, 0.07721682242588046, 0.0692752331932841, 0.07395457098464908, 0.08312214123231243, 0.07062689496681418, 0.06510807723398848, 0.08346535301035418, 0.07422634275649975]}, "mutation_prompt": null}
