{"id": "b538774b-f3f8-43d9-9ee0-76121cf646a6", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_search(swarm_size, max_iter):\n            # PSO initialization\n            swarm = np.random.uniform(-5.0, 5.0, (swarm_size, self.dim))\n            best_swarm_pos = swarm[np.argmin([func(p) for p in swarm])]\n            best_swarm_val = func(best_swarm_pos)\n\n            for _ in range(max_iter):\n                for i in range(swarm_size):\n                    new_pos = swarm[i] + np.random.uniform(-1, 1, self.dim) * (best_swarm_pos - swarm[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < func(swarm[i]):\n                        swarm[i] = new_pos\n                        if new_val < best_swarm_val:\n                            best_swarm_pos = new_pos\n                            best_swarm_val = new_val\n            return best_swarm_pos\n\n        def sa_search(init_temp, final_temp, cooling_rate):\n            # Simulated Annealing initialization\n            current_pos = np.random.uniform(-5.0, 5.0, self.dim)\n            current_val = func(current_pos)\n            best_pos = current_pos\n            best_val = current_val\n            temperature = init_temp\n\n            while temperature > final_temp:\n                new_pos = current_pos + np.random.uniform(-1, 1, self.dim)\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < current_val or np.random.rand() < np.exp((current_val - new_val) / temperature):\n                    current_pos = new_pos\n                    current_val = new_val\n                    if new_val < best_val:\n                        best_pos = new_pos\n                        best_val = new_val\n                temperature *= cooling_rate\n            return best_pos\n\n        # Hybrid PSO-SA optimization\n        best_pos = pso_search(30, 1000)  # PSO exploration phase\n        best_pos = sa_search(100, 0.1, 0.95)  # SA exploitation phase\n\n        return best_pos", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining particle swarm optimization (PSO) and simulated annealing (SA) to efficiently explore the search space while leveraging the strengths of both algorithms.", "configspace": "", "generation": 0, "fitness": 0.19034431343157024, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.38473420079408316, 0.4911543960208925, 0.5636144708884505, 0.46542516273443535, 0.44653637835830906, 0.7005739002011039, 0.4279708534709713, 0.6608010897314026, 0.3079390619199206, 0.2565601598832232, 0.3168921996282539, 9.999999999998899e-05, 0.6026384219907504, 0.3475561525658557, 0.39788937970135296, 0.22180696588592963, 0.17377328059206776, 0.22288503280065586, 0.14691549651730873, 0.12216075706474494, 0.1318369001614068, 0.1572665003600574, 0.1522986430703639, 0.10056997623406239, 0.13675541717773, 0.1516387694981719, 0.13440947258426061, 0.12336252608718279, 0.11755518824028022, 0.10464445542673406, 0.09474910959739213, 0.10768075344887762, 0.09895386319916466, 0.11120135397194686, 0.1175973462478207, 0.10679566781179006, 0.38836262355563844, 0.18561931455594538, 0.16693615882922808, 0.16988875568312012, 0.17493065578326827, 0.3670455782616534, 0.3320128845214225, 0.15969452039872845, 0.21905999643984408, 0.1487005051976772, 0.10445405554244447, 0.10926687737455865, 0.13873425581303578, 0.06833078578672358, 0.09191474970358338, 0.16974214866042314, 0.14528990691128163, 0.07553681879193386, 0.36183875560483025, 0.319419248113048, 0.19390813730560819, 0.3433488331577428, 0.33630364811166436, 0.24493743594877737, 0.16637625748905993, 0.22843221942916758, 0.17491964359971413, 0.256147383112559, 0.07339213847318171, 0.16264902139358206, 0.20176636279663984, 0.24859486062372738, 0.186820696013264, 0.2229284089388388, 0.15725819648632855, 0.10568203477294902, 0.12519651626625183, 0.09957103211525298, 0.10058123507027616, 0.13588251472460922, 0.13107146043291684, 0.11667466499836643, 0.13408888215364745, 0.1162545364313522, 0.14343452906231946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014356511033030595, 9.999999999998899e-05, 0.011346699991416465, 9.999999999998899e-05, 0.053318718521176756, 0.06947500706897569, 0.025052255767827214, 0.06526684877957034, 0.057810296965862484, 0.044343684281473505, 0.058124087526156276, 0.08637867936407184, 0.0605439799504236, 0.03724374871208169, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08988560403966472, 0.07311570006893597, 0.06564269000300993, 0.21462456110494588, 9.999999999998899e-05, 9.999999999998899e-05, 0.08677961321126204, 0.14666243062878526, 0.153026986914091, 0.013969399024299278, 0.04280016346949034, 0.04297272694910481, 0.12089406225050991, 0.16653626680455202, 0.05648858167317017, 0.38730677232388966, 0.3933897397067322, 0.48204529116891903, 0.499936167998942, 0.33048731915806007, 0.47990846830067035, 0.41086560549116224, 0.5005803090279852, 0.4142189382309055, 0.07926221747953988, 0.1305164759606965, 0.13584901780590486, 0.09770851991891394, 0.11275757579454926, 0.12431576326614291, 0.07363181739052449, 0.08958690449898898, 0.07502279068177575, 0.16435782292665335, 0.13246730156704745, 0.14167735736430387, 0.15988654838760485, 0.14062423265347257, 0.20796730305955557, 0.20634548980937106, 0.1222970250663935, 0.16891748182820798, 0.30395307527511384, 0.29556957513829885, 0.21978821024949025, 0.27493127476136914, 0.19493409040962195, 0.3334464353686968, 0.26957691632286973, 0.32158140472746655, 0.24049406795637585, 0.1878652655910773, 0.23989581310100916, 0.18706686779063442, 0.2382683478991141, 0.1810472807964355, 0.18280481081023336, 0.19092228053039395, 0.29179631921641225, 0.1555789556898306, 0.22157603478708066, 0.19144731680567773, 0.2013979909773399, 0.19736354541836165, 0.18370226454333394, 0.1998245341741245, 0.19278194186122455, 0.20387371268192134, 0.23471164948496093, 0.2179133630458827, 0.18467270376142253, 0.209050109970761, 0.22374294430248365, 0.19215578409220557, 0.22653749901673081, 0.21813223027415962, 0.21271734738758763, 0.20998205715717133, 0.4579322264588126, 0.17584109950037075, 0.38765794434765644, 0.32357523908102326, 0.19746322505372915, 0.17035988320857942, 0.5173897083813791, 0.1646369966400023, 0.283963243629173, 0.35152955417606246, 0.5428555584004692, 0.13535515032166512, 0.16470271592430308, 0.16921604949835145, 0.39167614592462097, 0.12065157417693884, 0.19182746618853086, 0.3864515196020788, 0.1679934110013772, 0.1878430558045756, 0.1687743337775892, 0.16746521856864094, 0.17370772982018112, 0.16978618108944776, 0.19044285498834435, 0.16104328886635344, 0.17566084970307605, 0.08603835617943001, 0.07900284053067008, 0.07436584308627825, 0.07698097396767112, 0.08390956145416006, 0.09803269408831461, 0.09857831271569006, 0.07899371622077, 0.0836310481920366]}, "mutation_prompt": null}
{"id": "0c3e388c-7d49-4cc1-a42a-3527c70ca389", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_search(swarm_size, max_iter):\n            # PSO initialization\n            swarm = np.random.uniform(-5.0, 5.0, (swarm_size, self.dim))\n            best_swarm_pos = swarm[np.argmin([func(p) for p in swarm])]\n            best_swarm_val = func(best_swarm_pos)\n\n            for _ in range(max_iter):\n                for i in range(swarm_size):\n                    new_pos = swarm[i] + np.random.uniform(-1, 1, self.dim) * (best_swarm_pos - swarm[i])\n                    new_pos = np.clip(new_pos, -5.0, 5.0)\n                    new_val = func(new_pos)\n                    if new_val < func(swarm[i]):\n                        swarm[i] = new_pos\n                        if new_val < best_swarm_val:\n                            best_swarm_pos = new_pos\n                            best_swarm_val = new_val\n            return best_swarm_pos\n\n        def sa_search(init_temp, final_temp, cooling_rate):\n            # Simulated Annealing initialization\n            current_pos = np.random.uniform(-5.0, 5.0, self.dim)\n            current_val = func(current_pos)\n            best_pos = current_pos\n            best_val = current_val\n            temperature = init_temp\n\n            while temperature > final_temp:\n                new_pos = current_pos + np.random.uniform(-1, 1, self.dim)\n                new_pos = np.clip(new_pos, -5.0, 5.0)\n                new_val = func(new_pos)\n                if new_val < current_val or np.random.rand() < np.exp((current_val - new_val) / temperature):\n                    current_pos = new_pos\n                    current_val = new_val\n                    if new_val < best_val:\n                        best_pos = new_pos\n                        best_val = new_val\n                temperature *= cooling_rate\n            return best_pos\n\n        # Improved Hybrid PSO-SA optimization\n        pso_ratio = 0.2  # Initial PSO exploitation ratio\n        for _ in range(self.budget):\n            best_pos = pso_search(30, int(1000 * pso_ratio))  # PSO exploration phase with dynamic iterations\n            best_pos = sa_search(100, 0.1, 0.95)  # SA exploitation phase\n            pso_ratio *= 0.95  # Adjust PSO exploitation ratio dynamically\n\n        return best_pos", "name": "HybridPSOSA", "description": "Improved HybridPSOSA algorithm by dynamically adjusting the exploration-exploitation trade-off during optimization.", "configspace": "", "generation": 1, "fitness": 0.19034431343157024, "feedback": "", "error": "", "parent_id": "b538774b-f3f8-43d9-9ee0-76121cf646a6", "metadata": {"aucs": [0.38473420079408316, 0.4911543960208925, 0.5636144708884505, 0.46542516273443535, 0.44653637835830906, 0.7005739002011039, 0.4279708534709713, 0.6608010897314026, 0.3079390619199206, 0.2565601598832232, 0.3168921996282539, 9.999999999998899e-05, 0.6026384219907504, 0.3475561525658557, 0.39788937970135296, 0.22180696588592963, 0.17377328059206776, 0.22288503280065586, 0.14691549651730873, 0.12216075706474494, 0.1318369001614068, 0.1572665003600574, 0.1522986430703639, 0.10056997623406239, 0.13675541717773, 0.1516387694981719, 0.13440947258426061, 0.12336252608718279, 0.11755518824028022, 0.10464445542673406, 0.09474910959739213, 0.10768075344887762, 0.09895386319916466, 0.11120135397194686, 0.1175973462478207, 0.10679566781179006, 0.38836262355563844, 0.18561931455594538, 0.16693615882922808, 0.16988875568312012, 0.17493065578326827, 0.3670455782616534, 0.3320128845214225, 0.15969452039872845, 0.21905999643984408, 0.1487005051976772, 0.10445405554244447, 0.10926687737455865, 0.13873425581303578, 0.06833078578672358, 0.09191474970358338, 0.16974214866042314, 0.14528990691128163, 0.07553681879193386, 0.36183875560483025, 0.319419248113048, 0.19390813730560819, 0.3433488331577428, 0.33630364811166436, 0.24493743594877737, 0.16637625748905993, 0.22843221942916758, 0.17491964359971413, 0.256147383112559, 0.07339213847318171, 0.16264902139358206, 0.20176636279663984, 0.24859486062372738, 0.186820696013264, 0.2229284089388388, 0.15725819648632855, 0.10568203477294902, 0.12519651626625183, 0.09957103211525298, 0.10058123507027616, 0.13588251472460922, 0.13107146043291684, 0.11667466499836643, 0.13408888215364745, 0.1162545364313522, 0.14343452906231946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014356511033030595, 9.999999999998899e-05, 0.011346699991416465, 9.999999999998899e-05, 0.053318718521176756, 0.06947500706897569, 0.025052255767827214, 0.06526684877957034, 0.057810296965862484, 0.044343684281473505, 0.058124087526156276, 0.08637867936407184, 0.0605439799504236, 0.03724374871208169, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08988560403966472, 0.07311570006893597, 0.06564269000300993, 0.21462456110494588, 9.999999999998899e-05, 9.999999999998899e-05, 0.08677961321126204, 0.14666243062878526, 0.153026986914091, 0.013969399024299278, 0.04280016346949034, 0.04297272694910481, 0.12089406225050991, 0.16653626680455202, 0.05648858167317017, 0.38730677232388966, 0.3933897397067322, 0.48204529116891903, 0.499936167998942, 0.33048731915806007, 0.47990846830067035, 0.41086560549116224, 0.5005803090279852, 0.4142189382309055, 0.07926221747953988, 0.1305164759606965, 0.13584901780590486, 0.09770851991891394, 0.11275757579454926, 0.12431576326614291, 0.07363181739052449, 0.08958690449898898, 0.07502279068177575, 0.16435782292665335, 0.13246730156704745, 0.14167735736430387, 0.15988654838760485, 0.14062423265347257, 0.20796730305955557, 0.20634548980937106, 0.1222970250663935, 0.16891748182820798, 0.30395307527511384, 0.29556957513829885, 0.21978821024949025, 0.27493127476136914, 0.19493409040962195, 0.3334464353686968, 0.26957691632286973, 0.32158140472746655, 0.24049406795637585, 0.1878652655910773, 0.23989581310100916, 0.18706686779063442, 0.2382683478991141, 0.1810472807964355, 0.18280481081023336, 0.19092228053039395, 0.29179631921641225, 0.1555789556898306, 0.22157603478708066, 0.19144731680567773, 0.2013979909773399, 0.19736354541836165, 0.18370226454333394, 0.1998245341741245, 0.19278194186122455, 0.20387371268192134, 0.23471164948496093, 0.2179133630458827, 0.18467270376142253, 0.209050109970761, 0.22374294430248365, 0.19215578409220557, 0.22653749901673081, 0.21813223027415962, 0.21271734738758763, 0.20998205715717133, 0.4579322264588126, 0.17584109950037075, 0.38765794434765644, 0.32357523908102326, 0.19746322505372915, 0.17035988320857942, 0.5173897083813791, 0.1646369966400023, 0.283963243629173, 0.35152955417606246, 0.5428555584004692, 0.13535515032166512, 0.16470271592430308, 0.16921604949835145, 0.39167614592462097, 0.12065157417693884, 0.19182746618853086, 0.3864515196020788, 0.1679934110013772, 0.1878430558045756, 0.1687743337775892, 0.16746521856864094, 0.17370772982018112, 0.16978618108944776, 0.19044285498834435, 0.16104328886635344, 0.17566084970307605, 0.08603835617943001, 0.07900284053067008, 0.07436584308627825, 0.07698097396767112, 0.08390956145416006, 0.09803269408831461, 0.09857831271569006, 0.07899371622077, 0.0836310481920366]}, "mutation_prompt": null}
