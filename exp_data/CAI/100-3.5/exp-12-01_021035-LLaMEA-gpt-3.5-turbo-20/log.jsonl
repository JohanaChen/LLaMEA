{"id": "cd81b91c-e39c-49f4-bd89-98e52b2caef8", "solution": "import numpy as np\n\nclass DE_PSO_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iters = budget // self.pop_size\n        self.cr = 0.9\n        self.f = 0.8\n        self.w = 0.5\n        self.c1 = 1.496\n        self.c2 = 1.496\n\n    def __call__(self, func):\n        def random_init_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.pop_size, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def mutate(parents, target_idx):\n            r1, r2, r3 = np.random.choice(len(parents), 3, replace=False)\n            mutant = parents[r1] + self.f * (parents[r2] - parents[r3])\n            crossover = np.random.rand(self.dim) < self.cr\n            trial = np.where(crossover, mutant, parents[target_idx])\n            return trial\n\n        def update_velocity_velocity(position, velocity, pbest, gbest):\n            cognitive = self.c1 * np.random.rand(self.dim) * (pbest - position)\n            social = self.c2 * np.random.rand(self.dim) * (gbest - position)\n            return self.w * velocity + cognitive + social\n\n        population = random_init_population()\n        fitness = evaluate_population(population)\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        velocity = np.zeros((self.pop_size, self.dim))\n\n        for _ in range(self.max_iters):\n            for i in range(self.pop_size):\n                trial = mutate(population, i)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                if trial_fitness < func(gbest):\n                    gbest = trial\n\n                velocity[i] = update_velocity_velocity(population[i], velocity[i], pbest[i], gbest)\n                population[i] += velocity[i]\n\n        return gbest", "name": "DE_PSO_Optimizer", "description": "An innovative hybrid algorithm combining Differential Evolution (DE) and Particle Swarm Optimization (PSO) for black box optimization on the BBOB test suite.", "configspace": "", "generation": 0, "fitness": 0.2735881114341187, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7590630816588484, 0.7911583726298494, 0.8045786000094741, 0.7903125750506813, 0.7543869923769083, 0.7738025896156574, 0.7741529366051512, 0.7767271653009126, 0.7531781783556968, 0.5665921343246305, 0.6024784712588664, 0.5091769017030849, 0.5226005985208275, 0.6067860397529257, 0.5981238234144384, 0.5377789421423618, 0.5941601199439821, 0.5765455355206857, 0.13822224258061888, 0.12431445050148271, 0.10937841735159892, 0.12313746072901721, 0.14021590350878832, 0.1006795795184875, 0.08422647848753606, 0.08917491570679226, 0.11859738406326736, 0.1402225081619437, 0.09838120362557279, 0.10568768719369526, 0.1094483456381542, 0.09787338348734798, 0.1210222085878555, 0.11046895107238508, 0.11979640642887479, 0.08817994826998621, 0.9859068795018696, 0.9827149731772177, 0.9918302429899958, 0.9818409653730006, 0.9838820456456162, 0.9848605556767928, 0.9871315235687016, 0.9811157569215563, 0.9821441781684646, 0.36216039741118644, 0.3991171207828029, 0.36751563271909105, 0.38111976479569043, 0.37324656422290914, 0.372284721497129, 0.3101513465822394, 0.3365401777077808, 0.3603387374278961, 0.634156401110556, 0.2062446490052805, 0.22014074126121164, 0.3607624137019557, 0.2705265864227703, 0.18481230217377398, 0.5520597270697889, 0.22444105875034448, 0.20490611702422168, 0.20854360101708003, 0.1946330846004526, 0.16705527475893633, 0.1614786890315778, 0.18062888458711202, 0.18194228639549703, 0.12224944624655587, 0.20581023016933742, 0.17264181711609616, 0.20078656819580276, 0.10389532152312675, 0.20272904602847286, 0.12422868765192374, 0.19878780333070278, 0.19622044023771723, 0.21775636345621352, 0.18976444926129898, 0.1093448839527007, 9.999999999998899e-05, 9.999999999998899e-05, 0.021933556887362093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005497166783062335, 9.999999999998899e-05, 9.999999999998899e-05, 0.042859178414990984, 0.03757649860888579, 0.021448890527833497, 0.06408844309145212, 0.00615629116419425, 0.05753959665358577, 0.018621858772599253, 0.04604170343495517, 9.999999999998899e-05, 9.999999999998899e-05, 0.016844430127132326, 0.23357656530310134, 9.999999999998899e-05, 0.02619311376429523, 9.999999999998899e-05, 0.048710672724310955, 0.017550204903571842, 0.08528837715893367, 0.18331452932908787, 0.14095813922003986, 0.14799608568929312, 0.1482659885526817, 0.07100228995306768, 0.14293245925879294, 0.11385094143022578, 0.12562915312598377, 0.07108102841268171, 0.4940059357049137, 0.4998705659003605, 0.48459605478187395, 0.4699616862675694, 0.5057628865208427, 0.5008895627836456, 0.5185250544416702, 0.49287023882363346, 0.5061092069537638, 0.1130740016826377, 0.11845812034601422, 0.10888713173594511, 0.09813923098837263, 0.10133490190617644, 0.0940522143460597, 0.08559286263850752, 0.08109048147061027, 0.09994813052389784, 0.12398400096836137, 0.13581020969047863, 0.12637673915805558, 0.1452467169112528, 0.1602865270500008, 0.15864697076967804, 0.13390269921865472, 0.13837128658952258, 0.15740241294470292, 0.3744964872412261, 0.3297476985979625, 0.4302146598213814, 0.37887741208762504, 0.21307741477779196, 0.42594107457664165, 0.4579168663993982, 0.45683046044020104, 0.42681494605392856, 0.2759242971494146, 0.30431847055644645, 0.19148616151613518, 0.23442353415572648, 0.29273433404119953, 0.25651323696056827, 0.2110766334716897, 0.3520799001261089, 0.31044993027586565, 0.1966041195714462, 0.20521501335751058, 0.17075534591785968, 0.1907716152196295, 0.17368167777568067, 0.1795025628838237, 0.20418118535539764, 0.19935464892761046, 0.170162158456568, 0.20397628597674267, 0.20015575873362879, 0.1956800542852526, 0.17912290896912908, 0.21714515530491263, 0.19797976958948227, 0.18187873131300325, 0.22532439269773408, 0.19761116117580013, 0.18036162136973777, 0.762966088793829, 0.17120472641945084, 0.19389374215512734, 0.7350933325160605, 0.18793684901579322, 0.7336548076354829, 0.19978686476215324, 0.783202070887904, 0.6263481085047202, 0.14932064464971062, 0.5043711972048004, 0.20233902111089608, 0.1643620430910272, 0.20510962883681305, 0.10119925402615193, 0.10569689957286588, 0.5795586030637474, 0.16997622643155097, 0.17978569053878168, 0.17676326390604713, 0.1854063096530365, 0.165227385389229, 0.18724361149823576, 0.17208464425081127, 0.16405878952478692, 0.19530250510012614, 0.09777495471748221, 0.0734680766345096, 0.07445296045005412, 0.07783659597384118, 0.07785843877607823, 0.07346289504730175, 0.08307727135492404, 0.08649267872781674, 0.07599621866008643]}, "mutation_prompt": null}
{"id": "c5025da6-ca90-4acc-b7aa-3ea188f3a3fe", "solution": "import numpy as np\n\nclass DE_PSO_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iters = budget // self.pop_size\n        self.cr = 0.9\n        self.f = 0.8\n        self.w = 0.5\n        self.c1 = 1.496\n        self.c2 = 1.496\n\n    def __call__(self, func):\n        def random_init_population():\n            return np.random.uniform(low=-5.0, high=5.0, size=(self.pop_size, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def mutate(parents, target_idx):\n            r1, r2, r3 = np.random.choice(len(parents), 3, replace=False)\n            mutant = parents[r1] + self.f * (parents[r2] - parents[r3])\n            crossover = np.random.rand(self.dim) < self.cr\n            trial = np.where(crossover, mutant, parents[target_idx])\n            return trial\n\n        def update_velocity_velocity(position, velocity, pbest, gbest):\n            cognitive = self.c1 * np.random.rand(self.dim) * (pbest - position)\n            social = self.c2 * np.random.rand(self.dim) * (gbest - position)\n            return self.w * velocity + cognitive + social\n\n        population = random_init_population()\n        fitness = evaluate_population(population)\n        pbest = population.copy()\n        gbest = population[np.argmin(fitness)]\n        velocity = np.zeros((self.pop_size, self.dim))\n\n        for _ in range(self.max_iters):\n            for i in range(self.pop_size):\n                trial = mutate(population, i)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    pbest[i] = trial\n                if trial_fitness < func(gbest):\n                    gbest = trial\n\n                velocity[i] = update_velocity_velocity(population[i], velocity[i], pbest[i], gbest)\n                population[i] += velocity[i]\n\n        return gbest", "name": "DE_PSO_Optimizer", "description": "An innovative hybrid algorithm combining Differential Evolution (DE) and Particle Swarm Optimization (PSO) for black box optimization on the BBOB test suite.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cd81b91c-e39c-49f4-bd89-98e52b2caef8", "metadata": {"aucs": [0.7590630816588484, 0.7911583726298494, 0.8045786000094741, 0.7903125750506813, 0.7543869923769083, 0.7738025896156574, 0.7741529366051512, 0.7767271653009126, 0.7531781783556968, 0.5665921343246305, 0.6024784712588664, 0.5091769017030849, 0.5226005985208275, 0.6067860397529257, 0.5981238234144384, 0.5377789421423618, 0.5941601199439821, 0.5765455355206857, 0.13822224258061888, 0.12431445050148271, 0.10937841735159892, 0.12313746072901721, 0.14021590350878832, 0.1006795795184875, 0.08422647848753606, 0.08917491570679226, 0.11859738406326736, 0.1402225081619437, 0.09838120362557279, 0.10568768719369526, 0.1094483456381542, 0.09787338348734798, 0.1210222085878555, 0.11046895107238508, 0.11979640642887479, 0.08817994826998621, 0.9859068795018696, 0.9827149731772177, 0.9918302429899958, 0.9818409653730006, 0.9838820456456162, 0.9848605556767928, 0.9871315235687016, 0.9811157569215563, 0.9821441781684646, 0.36216039741118644, 0.3991171207828029, 0.36751563271909105, 0.38111976479569043, 0.37324656422290914, 0.372284721497129, 0.3101513465822394, 0.3365401777077808, 0.3603387374278961, 0.634156401110556, 0.2062446490052805, 0.22014074126121164, 0.3607624137019557, 0.2705265864227703, 0.18481230217377398, 0.5520597270697889, 0.22444105875034448, 0.20490611702422168, 0.20854360101708003, 0.1946330846004526, 0.16705527475893633, 0.1614786890315778, 0.18062888458711202, 0.18194228639549703, 0.12224944624655587, 0.20581023016933742, 0.17264181711609616, 0.20078656819580276, 0.10389532152312675, 0.20272904602847286, 0.12422868765192374, 0.19878780333070278, 0.19622044023771723, 0.21775636345621352, 0.18976444926129898, 0.1093448839527007, 9.999999999998899e-05, 9.999999999998899e-05, 0.021933556887362093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005497166783062335, 9.999999999998899e-05, 9.999999999998899e-05, 0.042859178414990984, 0.03757649860888579, 0.021448890527833497, 0.06408844309145212, 0.00615629116419425, 0.05753959665358577, 0.018621858772599253, 0.04604170343495517, 9.999999999998899e-05, 9.999999999998899e-05, 0.016844430127132326, 0.23357656530310134, 9.999999999998899e-05, 0.02619311376429523, 9.999999999998899e-05, 0.048710672724310955, 0.017550204903571842, 0.08528837715893367, 0.18331452932908787, 0.14095813922003986, 0.14799608568929312, 0.1482659885526817, 0.07100228995306768, 0.14293245925879294, 0.11385094143022578, 0.12562915312598377, 0.07108102841268171, 0.4940059357049137, 0.4998705659003605, 0.48459605478187395, 0.4699616862675694, 0.5057628865208427, 0.5008895627836456, 0.5185250544416702, 0.49287023882363346, 0.5061092069537638, 0.1130740016826377, 0.11845812034601422, 0.10888713173594511, 0.09813923098837263, 0.10133490190617644, 0.0940522143460597, 0.08559286263850752, 0.08109048147061027, 0.09994813052389784, 0.12398400096836137, 0.13581020969047863, 0.12637673915805558, 0.1452467169112528, 0.1602865270500008, 0.15864697076967804, 0.13390269921865472, 0.13837128658952258, 0.15740241294470292, 0.3744964872412261, 0.3297476985979625, 0.4302146598213814, 0.37887741208762504, 0.21307741477779196, 0.42594107457664165, 0.4579168663993982, 0.45683046044020104, 0.42681494605392856, 0.2759242971494146, 0.30431847055644645, 0.19148616151613518, 0.23442353415572648, 0.29273433404119953, 0.25651323696056827, 0.2110766334716897, 0.3520799001261089, 0.31044993027586565, 0.1966041195714462, 0.20521501335751058, 0.17075534591785968, 0.1907716152196295, 0.17368167777568067, 0.1795025628838237, 0.20418118535539764, 0.19935464892761046, 0.170162158456568, 0.20397628597674267, 0.20015575873362879, 0.1956800542852526, 0.17912290896912908, 0.21714515530491263, 0.19797976958948227, 0.18187873131300325, 0.22532439269773408, 0.19761116117580013, 0.18036162136973777, 0.762966088793829, 0.17120472641945084, 0.19389374215512734, 0.7350933325160605, 0.18793684901579322, 0.7336548076354829, 0.19978686476215324, 0.783202070887904, 0.6263481085047202, 0.14932064464971062, 0.5043711972048004, 0.20233902111089608, 0.1643620430910272, 0.20510962883681305, 0.10119925402615193, 0.10569689957286588, 0.5795586030637474, 0.16997622643155097, 0.17978569053878168, 0.17676326390604713, 0.1854063096530365, 0.165227385389229, 0.18724361149823576, 0.17208464425081127, 0.16405878952478692, 0.19530250510012614, 0.09777495471748221, 0.0734680766345096, 0.07445296045005412, 0.07783659597384118, 0.07785843877607823, 0.07346289504730175, 0.08307727135492404, 0.08649267872781674, 0.07599621866008643]}, "mutation_prompt": null}
