{"id": "601d6621-7466-448c-8893-bc52db366c6f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def evaluate(x):\n            return func(within_bounds(x))\n\n        swarm_size = 10\n        pso_max_iter = int(self.budget / 2)\n        de_max_iter = int(self.budget / 2)\n        pso_w = 0.5\n        pso_c1 = 1.5\n        pso_c2 = 1.5\n\n        # Initialize particles randomly within the search space\n        particles = np.random.uniform(-5.0, 5.0, (swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        pbest = particles.copy()\n\n        # PSO optimization\n        for _ in range(pso_max_iter):\n            for i in range(swarm_size):\n                if evaluate(particles[i]) < evaluate(pbest[i]):\n                    pbest[i] = particles[i]\n            gbest = pbest[np.argmin([evaluate(p) for p in pbest])]\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = pso_w * velocities[i] + pso_c1 * r1 * (pbest[i] - particles[i]) + pso_c2 * r2 * (gbest - particles[i])\n                particles[i] = within_bounds(particles[i] + velocities[i])\n\n        # DE optimization\n        bounds = [(-5.0, 5.0)] * self.dim\n        for _ in range(de_max_iter):\n            for i in range(swarm_size):\n                mutant = within_bounds(particles[i] + 0.8 * (particles[np.random.choice(range(swarm_size))] - particles[np.random.choice(range(swarm_size))]))\n                trial = np.where(np.random.uniform(0, 1, self.dim) < 0.5, mutant, particles[i])\n                if evaluate(trial) < evaluate(particles[i]):\n                    particles[i] = trial\n\n        return evaluate(gbest)", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) for global exploration and exploitation to optimize black box functions in a constrained evaluation budget.", "configspace": "", "generation": 0, "fitness": 0.136272209893337, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.36946317920794247, 0.2747710852187706, 0.2062664053075054, 0.0950039148055759, 0.2457362556121706, 0.13383527015168095, 0.24087328684018938, 0.39764273440030706, 0.31754452814751566, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02940747416655809, 0.04383830897499952, 0.025549883063377243, 0.06214666629473409, 0.05181491219409107, 0.0483839988902206, 0.04893726513564434, 0.05466582662500419, 0.04514150465194322, 0.06632264728833837, 0.004191835538183697, 0.045037353324449025, 0.04633801052489306, 0.006701182269628014, 0.04050322116652583, 0.03453961661138871, 0.022328690653344196, 0.025088984412219184, 0.9860134987855869, 0.9492054503521165, 0.9863078084706817, 0.9651072473204478, 0.958957959853694, 0.07473230254271335, 0.09884155550231388, 0.9735326561691083, 0.055472451643916565, 0.11472105291040191, 0.035594798847586984, 0.05987764211191604, 0.037675377637527374, 0.15071344424200106, 0.03842471920357515, 0.1515163973411121, 0.05158196224389466, 9.999999999998899e-05, 0.14335387955490864, 0.08020996328042351, 0.07613528908708156, 0.1471956403992366, 0.17600913509670302, 0.09487708361290881, 0.059464709683679784, 0.1849985857586275, 0.14838416428688017, 9.999999999998899e-05, 0.0069800343079392535, 9.999999999998899e-05, 0.12757773039949538, 9.999999999998899e-05, 0.0031385555053536907, 0.19607873469567272, 0.13252894949202598, 0.1582015087665366, 9.999999999998899e-05, 0.04302317543239098, 0.07343358810931755, 0.13844623043194937, 0.13101933233064844, 0.13339270234530798, 0.12138828480325847, 0.1060373827917227, 0.1186987726787676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10467499247503076, 0.030266829112240212, 0.07778839925901393, 0.07008027260323213, 0.03177394331166994, 0.002647893633856091, 0.1334848429922878, 0.012743119170841588, 0.020440252674511217, 0.034070366076088265, 0.18843169977337093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1046368620349647, 0.07341527981706786, 0.0849621296615436, 9.999999999998899e-05, 0.0203064939709513, 0.013554231233195768, 0.03685633081421569, 0.027767121592162214, 0.00922909476003353, 0.026275260062826655, 0.055651771552052365, 0.23736557716305007, 0.3686530375951538, 0.4350099983340415, 0.2186756209688796, 0.21845080013545948, 0.14813452223021706, 0.19563728254488177, 0.3370331341529731, 0.37361725466704776, 0.05810269012102032, 0.08737538803545974, 0.011767654137328276, 0.08422457704412012, 0.10757041155446645, 0.11183964392237433, 0.09763972990281422, 0.08042621831453234, 0.046799277479896206, 0.22295664327604214, 0.16898548198292396, 0.11595081415114727, 0.2608932490633079, 0.22375403215583556, 0.14599913064274295, 0.1959607515359798, 0.10913875868831313, 0.13248990875987565, 0.1540087950834712, 0.2031307516117199, 0.14918664469319975, 0.15234774682885732, 0.17205154400950962, 0.21049524089750338, 0.15317528458897756, 0.194920803163122, 0.10321840717295327, 0.11724643664620193, 0.14954583817291056, 0.10245945089201525, 0.09798619685442933, 0.10733664761754058, 0.06524337771737987, 0.07124373684598828, 0.11144889229381383, 0.0690741604657269, 0.21856044460516477, 0.17827655463980385, 0.20875075581326064, 0.19955026225027506, 0.17880989738892217, 0.21553321048227625, 0.23285931937102233, 0.19936816785002742, 0.2451776966808774, 0.17703396560506512, 0.17715806975835835, 0.18192936226169631, 0.15876419814915788, 0.16169499162390644, 0.15576083011546493, 0.17661150441147788, 0.1770207285406965, 0.1682180370721792, 0.1691329714093821, 0.739452676266233, 0.1032651269728938, 0.1733992344693034, 0.19665092652989125, 0.09501343587526112, 0.12176009053045111, 0.11296998524382285, 0.15139065357622472, 0.07896281967918017, 0.1096941778931918, 0.21862358683936056, 0.07885365349125872, 0.07699663524547473, 0.1753828263737056, 0.07793469170564438, 0.11289812132070687, 0.1711309258296826, 0.18273534105342748, 0.19538766878120917, 0.20398684029078107, 0.17965015650859917, 0.2381868612490956, 0.1677988420508647, 0.186473946367264, 0.2060152549424008, 0.19687170986013414, 0.09021374204864518, 0.07055806302786749, 0.061233238158466485, 0.09136418507906474, 0.11327952351822645, 0.06011395086350024, 0.045513416438951904, 0.09278374538748435, 0.06658778526051645]}, "mutation_prompt": null}
{"id": "c7807b5e-2d70-4df9-8c7d-1a95205e1c3e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def evaluate(x):\n            return func(within_bounds(x))\n\n        swarm_size = 10\n        pso_max_iter = int(self.budget / 2)\n        de_max_iter = int(self.budget / 2)\n        pso_w = 0.5\n        pso_c1 = 1.5\n        pso_c2 = 1.5\n\n        # Initialize particles randomly within the search space\n        particles = np.random.uniform(-5.0, 5.0, (swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        pbest = particles.copy()\n\n        # PSO optimization\n        for _ in range(pso_max_iter):\n            for i in range(swarm_size):\n                if evaluate(particles[i]) < evaluate(pbest[i]):\n                    pbest[i] = particles[i]\n            gbest = pbest[np.argmin([evaluate(p) for p in pbest])]\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocities[i] = pso_w * velocities[i] + pso_c1 * r1 * (pbest[i] - particles[i]) + pso_c2 * r2 * (gbest - particles[i])\n                particles[i] = within_bounds(particles[i] + velocities[i])\n\n        # DE optimization\n        bounds = [(-5.0, 5.0)] * self.dim\n        for _ in range(de_max_iter):\n            for i in range(swarm_size):\n                mutant = within_bounds(particles[i] + 0.8 * (particles[np.random.choice(range(swarm_size))] - particles[np.random.choice(range(swarm_size))]))\n                trial = np.where(np.random.uniform(0, 1, self.dim) < 0.5, mutant, particles[i])\n                if evaluate(trial) < evaluate(particles[i]):\n                    particles[i] = trial\n\n        return evaluate(gbest)", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) for global exploration and exploitation to optimize black box functions in a constrained evaluation budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "601d6621-7466-448c-8893-bc52db366c6f", "metadata": {"aucs": [0.36946317920794247, 0.2747710852187706, 0.2062664053075054, 0.0950039148055759, 0.2457362556121706, 0.13383527015168095, 0.24087328684018938, 0.39764273440030706, 0.31754452814751566, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02940747416655809, 0.04383830897499952, 0.025549883063377243, 0.06214666629473409, 0.05181491219409107, 0.0483839988902206, 0.04893726513564434, 0.05466582662500419, 0.04514150465194322, 0.06632264728833837, 0.004191835538183697, 0.045037353324449025, 0.04633801052489306, 0.006701182269628014, 0.04050322116652583, 0.03453961661138871, 0.022328690653344196, 0.025088984412219184, 0.9860134987855869, 0.9492054503521165, 0.9863078084706817, 0.9651072473204478, 0.958957959853694, 0.07473230254271335, 0.09884155550231388, 0.9735326561691083, 0.055472451643916565, 0.11472105291040191, 0.035594798847586984, 0.05987764211191604, 0.037675377637527374, 0.15071344424200106, 0.03842471920357515, 0.1515163973411121, 0.05158196224389466, 9.999999999998899e-05, 0.14335387955490864, 0.08020996328042351, 0.07613528908708156, 0.1471956403992366, 0.17600913509670302, 0.09487708361290881, 0.059464709683679784, 0.1849985857586275, 0.14838416428688017, 9.999999999998899e-05, 0.0069800343079392535, 9.999999999998899e-05, 0.12757773039949538, 9.999999999998899e-05, 0.0031385555053536907, 0.19607873469567272, 0.13252894949202598, 0.1582015087665366, 9.999999999998899e-05, 0.04302317543239098, 0.07343358810931755, 0.13844623043194937, 0.13101933233064844, 0.13339270234530798, 0.12138828480325847, 0.1060373827917227, 0.1186987726787676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10467499247503076, 0.030266829112240212, 0.07778839925901393, 0.07008027260323213, 0.03177394331166994, 0.002647893633856091, 0.1334848429922878, 0.012743119170841588, 0.020440252674511217, 0.034070366076088265, 0.18843169977337093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1046368620349647, 0.07341527981706786, 0.0849621296615436, 9.999999999998899e-05, 0.0203064939709513, 0.013554231233195768, 0.03685633081421569, 0.027767121592162214, 0.00922909476003353, 0.026275260062826655, 0.055651771552052365, 0.23736557716305007, 0.3686530375951538, 0.4350099983340415, 0.2186756209688796, 0.21845080013545948, 0.14813452223021706, 0.19563728254488177, 0.3370331341529731, 0.37361725466704776, 0.05810269012102032, 0.08737538803545974, 0.011767654137328276, 0.08422457704412012, 0.10757041155446645, 0.11183964392237433, 0.09763972990281422, 0.08042621831453234, 0.046799277479896206, 0.22295664327604214, 0.16898548198292396, 0.11595081415114727, 0.2608932490633079, 0.22375403215583556, 0.14599913064274295, 0.1959607515359798, 0.10913875868831313, 0.13248990875987565, 0.1540087950834712, 0.2031307516117199, 0.14918664469319975, 0.15234774682885732, 0.17205154400950962, 0.21049524089750338, 0.15317528458897756, 0.194920803163122, 0.10321840717295327, 0.11724643664620193, 0.14954583817291056, 0.10245945089201525, 0.09798619685442933, 0.10733664761754058, 0.06524337771737987, 0.07124373684598828, 0.11144889229381383, 0.0690741604657269, 0.21856044460516477, 0.17827655463980385, 0.20875075581326064, 0.19955026225027506, 0.17880989738892217, 0.21553321048227625, 0.23285931937102233, 0.19936816785002742, 0.2451776966808774, 0.17703396560506512, 0.17715806975835835, 0.18192936226169631, 0.15876419814915788, 0.16169499162390644, 0.15576083011546493, 0.17661150441147788, 0.1770207285406965, 0.1682180370721792, 0.1691329714093821, 0.739452676266233, 0.1032651269728938, 0.1733992344693034, 0.19665092652989125, 0.09501343587526112, 0.12176009053045111, 0.11296998524382285, 0.15139065357622472, 0.07896281967918017, 0.1096941778931918, 0.21862358683936056, 0.07885365349125872, 0.07699663524547473, 0.1753828263737056, 0.07793469170564438, 0.11289812132070687, 0.1711309258296826, 0.18273534105342748, 0.19538766878120917, 0.20398684029078107, 0.17965015650859917, 0.2381868612490956, 0.1677988420508647, 0.186473946367264, 0.2060152549424008, 0.19687170986013414, 0.09021374204864518, 0.07055806302786749, 0.061233238158466485, 0.09136418507906474, 0.11327952351822645, 0.06011395086350024, 0.045513416438951904, 0.09278374538748435, 0.06658778526051645]}, "mutation_prompt": null}
