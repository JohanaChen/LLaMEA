{"id": "50d47bf6-1a8b-4562-96a8-082988ad5b7f", "solution": "import numpy as np\n\nclass HSDEH:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.hmcr = 0.7\n        self.par = 0.5\n        self.f = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def harmonize(population):\n            new_population = np.zeros((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                for j in range(self.dim):\n                    if np.random.rand() < self.hmcr:\n                        new_population[i, j] = population[np.random.randint(self.pop_size), j]\n                    else:\n                        new_population[i, j] = np.random.uniform(-5.0, 5.0)\n            return new_population\n\n        def evolve(population):\n            new_population = np.zeros((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                new_individual = population[i] + self.f * (a - b)\n                for j in range(self.dim):\n                    if np.random.rand() > self.par:\n                        new_individual[j] = c[j]\n                new_population[i] = np.clip(new_individual, -5.0, 5.0)\n            return new_population\n\n        population = initialize_population()\n        evaluations_left = self.budget\n        while evaluations_left > 0:\n            harmonized_population = harmonize(population)\n            mutated_population = evolve(harmonized_population)\n            population_evaluations = evaluate_population(population)\n            mutated_evaluations = evaluate_population(mutated_population)\n            for i in range(self.pop_size):\n                if mutated_evaluations[i] < population_evaluations[i]:\n                    population[i] = mutated_population[i]\n            evaluations_left -= self.pop_size\n\n        best_idx = np.argmin(evaluate_population(population))\n        return population[best_idx]", "name": "HSDEH", "description": "Novel Metaheuristic Algorithm: Harmony Search-based Differential Evolution Hybrid (HSDEH) for black box optimization problems using a combination of harmony search and differential evolution strategies.", "configspace": "", "generation": 0, "fitness": 0.1774109922261754, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.35382842978844065, 0.37107984667456695, 0.37434193027119633, 0.3538250535522538, 0.3803507988509479, 0.3458538505340998, 0.33924898257546343, 0.3801025211254022, 0.3930587516160695, 0.10191320626043066, 0.07114378140188982, 0.13782153747205395, 0.11449977840442482, 0.07297509264313717, 0.04698215737440037, 0.00832079386184048, 0.06538573771064948, 0.016676378641549472, 0.1269638021975419, 0.14506218194764153, 0.13925457856773338, 0.1825691936206626, 0.13736265997463537, 0.1195008234464533, 0.11219073647096589, 0.141328867306877, 0.13668617427835672, 0.09689944451789179, 0.09987191643045934, 0.10291295869697892, 0.10696430047103478, 0.1146132629992277, 0.11834373512201779, 0.10022326255593872, 0.1527860178654551, 0.1131668104100283, 0.9335696093300373, 0.9215465317135549, 0.8637209601204315, 0.936559371608448, 0.9116197125881317, 0.8937762338486442, 0.9563590076426579, 0.9321613658360132, 0.9120639988615424, 0.13662676585502997, 0.11211681014226416, 0.1510794897130905, 0.14265986575838885, 0.19382373341230263, 0.15811615740865237, 0.13946314062131604, 0.15155304253891178, 0.1421925640377727, 0.1740442349021427, 0.12253091846213315, 0.20671930826100138, 0.26039363826274253, 0.2100774514589907, 0.24560102536431028, 0.1696439360544828, 0.1674962526609901, 0.17734761158803503, 0.11171594017040276, 0.12355526250907356, 0.09248327900718756, 0.07830164340635126, 0.12213351562779895, 0.11087641615373123, 0.09618922021823151, 0.1345110389596894, 0.11610938247141767, 0.04799864327726755, 0.12323132222789535, 0.11088050417541728, 0.1104260659097347, 0.11796152151296357, 0.10795181315227687, 0.10758953410788508, 0.10395572454473201, 0.09829605063485614, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006480024452164557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05353722318479992, 0.07583372507387143, 0.059153375619117154, 0.013727169473589984, 0.014083624095803993, 0.029098028182712232, 0.02631309703882967, 0.05956273574095705, 0.06870833513093344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055549786811966206, 0.059926016938698146, 0.021550105288242083, 0.040319944613166236, 0.04884196492496884, 0.036615541516484496, 0.04812062630426006, 0.041016282744005594, 0.051537639864766116, 0.32491469978392395, 0.3789351002855915, 0.36183560818223903, 0.31810470855206774, 0.297619962271802, 0.34147449595811474, 0.35352740862829346, 0.31254427196805656, 0.35336631229020965, 0.08884199753051292, 0.06895883712723805, 0.08545278500259879, 0.07133304896441062, 0.08127479941053006, 0.07761866129958106, 0.06252602046478428, 0.07782950083318196, 0.08753087971425921, 0.12712737895229909, 0.1438372623746904, 0.18380523277940153, 0.1277512869152131, 0.151645724089, 0.14077642555420333, 0.12215009908340713, 0.14041953763240422, 0.11954695712478747, 0.2284344983608153, 0.23253037543563138, 0.28621679615061135, 0.2215393179493833, 0.21545702055071048, 0.25203867500203947, 0.2586607574504547, 0.20928002663904421, 0.23616582568116073, 0.19425016896821223, 0.13867195218500816, 0.17764584959581498, 0.17364008017675137, 0.18032626758712778, 0.14587369185972388, 0.17629510240743962, 0.19176754783393757, 0.18069344056216474, 0.17245529917901625, 0.18085501356479639, 0.16844742361071963, 0.2211699586963377, 0.19899299352175825, 0.1877532142141054, 0.16486693625782067, 0.170573914070415, 0.16298209033531807, 0.18377503030371223, 0.18068662537920677, 0.19054145066184125, 0.16946323127552276, 0.20751049398966848, 0.17535819102488748, 0.2147371229681826, 0.20071432546989987, 0.19413174159496716, 0.16642550732311068, 0.1725086840589103, 0.1787797609106727, 0.29797604218873175, 0.3443564738783107, 0.17312316652034043, 0.12572054987199355, 0.24844044948949295, 0.3971667636332783, 0.2290612664497479, 0.19832110244044698, 0.19908510906792642, 0.22171062303068578, 0.16402130047390806, 0.14167479233634983, 0.13829398552712924, 0.15850160671734326, 0.2297068992311163, 0.17626627551693452, 0.18178733332822183, 0.17980322729019027, 0.19787523897566772, 0.17266581392698932, 0.17150635358921773, 0.17355320782098027, 0.18559143961329305, 0.19102598830093243, 0.07232068919584345, 0.06691847749218538, 0.07784658443168357, 0.07348971314362296, 0.06528339278555106, 0.08059200776231124, 0.07010581632614044, 0.06701041113137385, 0.07002461703621032]}, "mutation_prompt": null}
{"id": "98fee121-cda6-4a16-b65f-ba80c9a4116d", "solution": "import numpy as np\n\nclass HSDEH:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10\n        self.hmcr = 0.7\n        self.par = 0.5\n        self.f = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def harmonize(population):\n            new_population = np.zeros((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                for j in range(self.dim):\n                    if np.random.rand() < self.hmcr:\n                        new_population[i, j] = population[np.random.randint(self.pop_size), j]\n                    else:\n                        new_population[i, j] = np.random.uniform(-5.0, 5.0)\n            return new_population\n\n        def evolve(population):\n            new_population = np.zeros((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                new_individual = population[i] + self.f * (a - b)\n                for j in range(self.dim):\n                    if np.random.rand() > self.par:\n                        new_individual[j] = c[j]\n                new_population[i] = np.clip(new_individual, -5.0, 5.0)\n            return new_population\n\n        population = initialize_population()\n        evaluations_left = self.budget\n        while evaluations_left > 0:\n            harmonized_population = harmonize(population)\n            mutated_population = evolve(harmonized_population)\n            population_evaluations = evaluate_population(population)\n            mutated_evaluations = evaluate_population(mutated_population)\n            for i in range(self.pop_size):\n                if mutated_evaluations[i] < population_evaluations[i]:\n                    population[i] = mutated_population[i]\n            evaluations_left -= self.pop_size\n\n        best_idx = np.argmin(evaluate_population(population))\n        return population[best_idx]", "name": "HSDEH", "description": "Novel Metaheuristic Algorithm: Harmony Search-based Differential Evolution Hybrid (HSDEH) for black box optimization problems using a combination of harmony search and differential evolution strategies.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "50d47bf6-1a8b-4562-96a8-082988ad5b7f", "metadata": {"aucs": [0.35382842978844065, 0.37107984667456695, 0.37434193027119633, 0.3538250535522538, 0.3803507988509479, 0.3458538505340998, 0.33924898257546343, 0.3801025211254022, 0.3930587516160695, 0.10191320626043066, 0.07114378140188982, 0.13782153747205395, 0.11449977840442482, 0.07297509264313717, 0.04698215737440037, 0.00832079386184048, 0.06538573771064948, 0.016676378641549472, 0.1269638021975419, 0.14506218194764153, 0.13925457856773338, 0.1825691936206626, 0.13736265997463537, 0.1195008234464533, 0.11219073647096589, 0.141328867306877, 0.13668617427835672, 0.09689944451789179, 0.09987191643045934, 0.10291295869697892, 0.10696430047103478, 0.1146132629992277, 0.11834373512201779, 0.10022326255593872, 0.1527860178654551, 0.1131668104100283, 0.9335696093300373, 0.9215465317135549, 0.8637209601204315, 0.936559371608448, 0.9116197125881317, 0.8937762338486442, 0.9563590076426579, 0.9321613658360132, 0.9120639988615424, 0.13662676585502997, 0.11211681014226416, 0.1510794897130905, 0.14265986575838885, 0.19382373341230263, 0.15811615740865237, 0.13946314062131604, 0.15155304253891178, 0.1421925640377727, 0.1740442349021427, 0.12253091846213315, 0.20671930826100138, 0.26039363826274253, 0.2100774514589907, 0.24560102536431028, 0.1696439360544828, 0.1674962526609901, 0.17734761158803503, 0.11171594017040276, 0.12355526250907356, 0.09248327900718756, 0.07830164340635126, 0.12213351562779895, 0.11087641615373123, 0.09618922021823151, 0.1345110389596894, 0.11610938247141767, 0.04799864327726755, 0.12323132222789535, 0.11088050417541728, 0.1104260659097347, 0.11796152151296357, 0.10795181315227687, 0.10758953410788508, 0.10395572454473201, 0.09829605063485614, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006480024452164557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05353722318479992, 0.07583372507387143, 0.059153375619117154, 0.013727169473589984, 0.014083624095803993, 0.029098028182712232, 0.02631309703882967, 0.05956273574095705, 0.06870833513093344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055549786811966206, 0.059926016938698146, 0.021550105288242083, 0.040319944613166236, 0.04884196492496884, 0.036615541516484496, 0.04812062630426006, 0.041016282744005594, 0.051537639864766116, 0.32491469978392395, 0.3789351002855915, 0.36183560818223903, 0.31810470855206774, 0.297619962271802, 0.34147449595811474, 0.35352740862829346, 0.31254427196805656, 0.35336631229020965, 0.08884199753051292, 0.06895883712723805, 0.08545278500259879, 0.07133304896441062, 0.08127479941053006, 0.07761866129958106, 0.06252602046478428, 0.07782950083318196, 0.08753087971425921, 0.12712737895229909, 0.1438372623746904, 0.18380523277940153, 0.1277512869152131, 0.151645724089, 0.14077642555420333, 0.12215009908340713, 0.14041953763240422, 0.11954695712478747, 0.2284344983608153, 0.23253037543563138, 0.28621679615061135, 0.2215393179493833, 0.21545702055071048, 0.25203867500203947, 0.2586607574504547, 0.20928002663904421, 0.23616582568116073, 0.19425016896821223, 0.13867195218500816, 0.17764584959581498, 0.17364008017675137, 0.18032626758712778, 0.14587369185972388, 0.17629510240743962, 0.19176754783393757, 0.18069344056216474, 0.17245529917901625, 0.18085501356479639, 0.16844742361071963, 0.2211699586963377, 0.19899299352175825, 0.1877532142141054, 0.16486693625782067, 0.170573914070415, 0.16298209033531807, 0.18377503030371223, 0.18068662537920677, 0.19054145066184125, 0.16946323127552276, 0.20751049398966848, 0.17535819102488748, 0.2147371229681826, 0.20071432546989987, 0.19413174159496716, 0.16642550732311068, 0.1725086840589103, 0.1787797609106727, 0.29797604218873175, 0.3443564738783107, 0.17312316652034043, 0.12572054987199355, 0.24844044948949295, 0.3971667636332783, 0.2290612664497479, 0.19832110244044698, 0.19908510906792642, 0.22171062303068578, 0.16402130047390806, 0.14167479233634983, 0.13829398552712924, 0.15850160671734326, 0.2297068992311163, 0.17626627551693452, 0.18178733332822183, 0.17980322729019027, 0.19787523897566772, 0.17266581392698932, 0.17150635358921773, 0.17355320782098027, 0.18559143961329305, 0.19102598830093243, 0.07232068919584345, 0.06691847749218538, 0.07784658443168357, 0.07348971314362296, 0.06528339278555106, 0.08059200776231124, 0.07010581632614044, 0.06701041113137385, 0.07002461703621032]}, "mutation_prompt": null}
