{"id": "64e55f4c-a156-47d9-898d-4b2157faea2d", "solution": "import numpy as np\n\nclass QPSO:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.9, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle_position(particle, global_best):\n            r1, r2 = np.random.rand(), np.random.rand()\n            new_position = particle + self.alpha * r1 * (global_best - particle) + self.beta * r2 * (global_best - particle)\n            return np.clip(new_position, -5.0, 5.0)\n\n        particles = initialize_particles()\n        fitness_values = np.array([func(p) for p in particles])\n        global_best = particles[np.argmin(fitness_values)]\n        evals = self.num_particles\n\n        while evals < self.budget:\n            for i in range(self.num_particles):\n                new_position = update_particle_position(particles[i], global_best)\n                new_fitness = func(new_position)\n                evals += 1\n\n                if new_fitness < fitness_values[i]:\n                    particles[i] = new_position\n                    fitness_values[i] = new_fitness\n\n                    if new_fitness < func(global_best):\n                        global_best = new_position\n\n                if evals >= self.budget:\n                    break\n\n        return global_best", "name": "QPSO", "description": "Quantum Particle Swarm Optimization (QPSO) algorithm that combines quantum behavior with particle swarm optimization for efficient black box function optimization.", "configspace": "", "generation": 0, "fitness": 0.11730613803978988, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.30833132106741457, 0.30430074074286795, 0.41304975793771315, 0.18749943386044365, 0.19073698510843973, 0.24020518220076303, 0.26410908859248605, 0.3165823517583525, 0.29485482665990415, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08243698359790197, 0.0457667795734511, 0.09007066231419503, 0.0963732333932843, 0.04487861901323653, 0.06959254122752301, 0.06746185992850062, 0.0436753508535247, 0.1268084454667716, 0.06834958685452108, 0.05705702774228416, 0.05708409625066002, 0.06166037647520828, 0.02089356943151266, 0.01595203031608272, 0.014359474449985088, 0.023517469227553045, 0.013223417597125753, 0.22246796029432325, 0.9917040109880982, 0.9867833253077216, 0.07106978019101584, 0.07907932606283308, 0.059782863511462336, 0.09593694505884154, 0.08383538658550027, 0.07763130041054755, 0.08770298269064747, 0.03028473294695977, 0.022284741734253433, 0.10986513359207495, 0.11631247436530667, 0.11813466981471976, 9.999999999998899e-05, 0.05847993234946258, 0.06386897272259562, 0.11952024612546297, 0.10580290782693813, 0.11787210251350622, 0.16876934945460909, 0.07971219928636508, 0.18358496563133386, 0.07826356306638427, 0.1220460313922751, 0.09739355642482317, 0.16874889878311528, 0.13069126533394393, 9.999999999998899e-05, 0.08101823328339419, 0.09525508523191961, 9.999999999998899e-05, 0.10920350529517142, 0.12457993871432116, 9.999999999998899e-05, 0.13210983993969572, 0.016953663619055037, 0.021017059190435616, 0.11813458086422812, 0.14987518872565764, 0.12346739913487381, 0.03356204512594341, 0.09051591789286706, 0.14441862337438782, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05851926302192678, 0.02099289841814589, 0.07740312880921518, 0.06870650176673698, 9.999999999998899e-05, 9.999999999998899e-05, 0.0960009763948978, 0.0540309360810699, 0.08835551960985322, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016780567632954102, 0.005852150484133567, 9.999999999998899e-05, 9.999999999998899e-05, 0.030162929189051613, 9.999999999998899e-05, 9.999999999998899e-05, 0.006145999338609709, 0.2779772220755212, 0.27509948946492446, 0.2636655834749104, 0.13653719610424653, 0.17780346313292084, 0.1251869101298242, 0.3145726459393381, 0.19008836462123413, 0.18152806095586782, 0.038750045071148764, 0.016401551497806977, 0.04177865990713869, 0.0698216110670844, 0.056836518358473365, 0.07757099127934741, 0.11787499371406918, 0.05097964899841323, 0.05214682911179991, 0.14072594758211276, 0.13274469651306275, 0.12117956203244051, 0.11918586355240546, 0.16405117077662912, 0.15751922107356675, 0.1359277756109437, 0.10721770310055823, 0.13732678987029034, 0.13423817334583055, 0.2064960187588406, 0.1641078660811489, 0.19360354950991365, 0.18706520609157706, 0.15918797715555666, 0.18949522698782173, 0.22790795969525424, 0.18877730651559987, 0.07076198042483339, 0.14954872779165185, 0.10485868470848814, 0.17853103743848664, 0.16541874883032592, 0.08801956446354686, 0.13345339219970542, 0.13349267743522264, 0.10872387027476293, 0.26241472860666604, 0.23198572084787894, 0.2513876418651253, 0.19239559407445306, 0.17049939644130485, 0.15623311666230022, 0.24961896744596257, 0.20876028522588796, 0.24068506321944172, 0.16502507160777236, 0.18296458886466482, 0.20862504178486174, 0.16322655112516005, 0.1794906939641735, 0.1796597060970867, 0.17653948830138377, 0.16894604494111642, 0.17455944739778895, 0.293500003113744, 0.11764996050222731, 0.15270082247418226, 0.17129877095782053, 0.18523522973981643, 0.17839209525736532, 0.09735151571132716, 0.15747130274521737, 0.3818720347873009, 0.23128813516338453, 0.15296549816927452, 0.19365786217168457, 0.11868043765090897, 0.1689931856091993, 0.13036173037432652, 0.10444300247685168, 0.09381212400987171, 0.1125271789027551, 0.1738242745064339, 0.16559416889468126, 0.20619398200932526, 0.1782904540430934, 0.2122091065027385, 0.23086108588959597, 0.19978608778467855, 0.21150178765209482, 0.2034807093872889, 0.040850190292008315, 0.06918391612138697, 0.05888619627592584, 0.08134909967408499, 0.07871007315629852, 0.06813130523979583, 0.04206615733215857, 0.05506174235750472, 0.05941817121521309]}, "mutation_prompt": null}
{"id": "0c067bfb-f22e-4ea0-96f6-3638b24295f7", "solution": "import numpy as np\n\nclass QPSO:\n    def __init__(self, budget, dim, num_particles=30, alpha=0.9, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle_position(particle, global_best):\n            r1, r2 = np.random.rand(), np.random.rand()\n            new_position = particle + self.alpha * r1 * (global_best - particle) + self.beta * r2 * (global_best - particle)\n            return np.clip(new_position, -5.0, 5.0)\n\n        particles = initialize_particles()\n        fitness_values = np.array([func(p) for p in particles])\n        global_best = particles[np.argmin(fitness_values)]\n        evals = self.num_particles\n\n        while evals < self.budget:\n            for i in range(self.num_particles):\n                new_position = update_particle_position(particles[i], global_best)\n                new_fitness = func(new_position)\n                evals += 1\n\n                if new_fitness < fitness_values[i]:\n                    particles[i] = new_position\n                    fitness_values[i] = new_fitness\n\n                    if new_fitness < func(global_best):\n                        global_best = new_position\n\n                if evals >= self.budget:\n                    break\n\n        return global_best", "name": "QPSO", "description": "Quantum Particle Swarm Optimization (QPSO) algorithm that combines quantum behavior with particle swarm optimization for efficient black box function optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64e55f4c-a156-47d9-898d-4b2157faea2d", "metadata": {"aucs": [0.30833132106741457, 0.30430074074286795, 0.41304975793771315, 0.18749943386044365, 0.19073698510843973, 0.24020518220076303, 0.26410908859248605, 0.3165823517583525, 0.29485482665990415, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08243698359790197, 0.0457667795734511, 0.09007066231419503, 0.0963732333932843, 0.04487861901323653, 0.06959254122752301, 0.06746185992850062, 0.0436753508535247, 0.1268084454667716, 0.06834958685452108, 0.05705702774228416, 0.05708409625066002, 0.06166037647520828, 0.02089356943151266, 0.01595203031608272, 0.014359474449985088, 0.023517469227553045, 0.013223417597125753, 0.22246796029432325, 0.9917040109880982, 0.9867833253077216, 0.07106978019101584, 0.07907932606283308, 0.059782863511462336, 0.09593694505884154, 0.08383538658550027, 0.07763130041054755, 0.08770298269064747, 0.03028473294695977, 0.022284741734253433, 0.10986513359207495, 0.11631247436530667, 0.11813466981471976, 9.999999999998899e-05, 0.05847993234946258, 0.06386897272259562, 0.11952024612546297, 0.10580290782693813, 0.11787210251350622, 0.16876934945460909, 0.07971219928636508, 0.18358496563133386, 0.07826356306638427, 0.1220460313922751, 0.09739355642482317, 0.16874889878311528, 0.13069126533394393, 9.999999999998899e-05, 0.08101823328339419, 0.09525508523191961, 9.999999999998899e-05, 0.10920350529517142, 0.12457993871432116, 9.999999999998899e-05, 0.13210983993969572, 0.016953663619055037, 0.021017059190435616, 0.11813458086422812, 0.14987518872565764, 0.12346739913487381, 0.03356204512594341, 0.09051591789286706, 0.14441862337438782, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05851926302192678, 0.02099289841814589, 0.07740312880921518, 0.06870650176673698, 9.999999999998899e-05, 9.999999999998899e-05, 0.0960009763948978, 0.0540309360810699, 0.08835551960985322, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016780567632954102, 0.005852150484133567, 9.999999999998899e-05, 9.999999999998899e-05, 0.030162929189051613, 9.999999999998899e-05, 9.999999999998899e-05, 0.006145999338609709, 0.2779772220755212, 0.27509948946492446, 0.2636655834749104, 0.13653719610424653, 0.17780346313292084, 0.1251869101298242, 0.3145726459393381, 0.19008836462123413, 0.18152806095586782, 0.038750045071148764, 0.016401551497806977, 0.04177865990713869, 0.0698216110670844, 0.056836518358473365, 0.07757099127934741, 0.11787499371406918, 0.05097964899841323, 0.05214682911179991, 0.14072594758211276, 0.13274469651306275, 0.12117956203244051, 0.11918586355240546, 0.16405117077662912, 0.15751922107356675, 0.1359277756109437, 0.10721770310055823, 0.13732678987029034, 0.13423817334583055, 0.2064960187588406, 0.1641078660811489, 0.19360354950991365, 0.18706520609157706, 0.15918797715555666, 0.18949522698782173, 0.22790795969525424, 0.18877730651559987, 0.07076198042483339, 0.14954872779165185, 0.10485868470848814, 0.17853103743848664, 0.16541874883032592, 0.08801956446354686, 0.13345339219970542, 0.13349267743522264, 0.10872387027476293, 0.26241472860666604, 0.23198572084787894, 0.2513876418651253, 0.19239559407445306, 0.17049939644130485, 0.15623311666230022, 0.24961896744596257, 0.20876028522588796, 0.24068506321944172, 0.16502507160777236, 0.18296458886466482, 0.20862504178486174, 0.16322655112516005, 0.1794906939641735, 0.1796597060970867, 0.17653948830138377, 0.16894604494111642, 0.17455944739778895, 0.293500003113744, 0.11764996050222731, 0.15270082247418226, 0.17129877095782053, 0.18523522973981643, 0.17839209525736532, 0.09735151571132716, 0.15747130274521737, 0.3818720347873009, 0.23128813516338453, 0.15296549816927452, 0.19365786217168457, 0.11868043765090897, 0.1689931856091993, 0.13036173037432652, 0.10444300247685168, 0.09381212400987171, 0.1125271789027551, 0.1738242745064339, 0.16559416889468126, 0.20619398200932526, 0.1782904540430934, 0.2122091065027385, 0.23086108588959597, 0.19978608778467855, 0.21150178765209482, 0.2034807093872889, 0.040850190292008315, 0.06918391612138697, 0.05888619627592584, 0.08134909967408499, 0.07871007315629852, 0.06813130523979583, 0.04206615733215857, 0.05506174235750472, 0.05941817121521309]}, "mutation_prompt": null}
