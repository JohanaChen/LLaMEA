{"id": "7c0b45ab-a5b9-43e2-ace3-fe4f596464a7", "solution": "import numpy as np\n\nclass EMOOAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.max_generations = budget // self.population_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def random_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.population_size, self.dim))\n\n        def differential_evolution(population, f=0.5, cr=0.9):\n            mutated = population + f * (population[np.random.choice(self.population_size, size=self.population_size, replace=True)] - population)\n            crossover = np.random.rand(self.population_size, self.dim) < cr\n            trial_population = np.where(crossover, mutated, population)\n            return trial_population\n\n        def particle_swarm_optimization(population, w=0.5, c1=1.5, c2=1.5):\n            velocity = np.zeros((self.population_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = np.array([func(ind) for ind in pbest])\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            for _ in range(self.max_generations):\n                r1, r2 = np.random.rand(2, self.population_size, self.dim)\n                velocity = w * velocity + c1 * r1 * (pbest - population) + c2 * r2 * (gbest - population)\n                population = population + velocity\n                fitness_values = np.array([func(ind) for ind in population])\n\n                improved = fitness_values < pbest_fitness\n                pbest[improved] = population[improved]\n                pbest_fitness[improved] = fitness_values[improved]\n\n                gbest_idx = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_idx]\n\n            return gbest\n\n        current_population = random_population()\n        best_solution = particle_swarm_optimization(current_population)\n        return best_solution", "name": "EMOOAlgorithm", "description": "Evolutionary Multi-Objective Optimization using a combination of Differential Evolution and Particle Swarm Optimization with dynamic parameter adaptation.", "configspace": "", "generation": 0, "fitness": 0.32982082519200756, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8949852842773226, 0.9017437033078668, 0.9078728333790362, 0.8957326458647907, 0.9009092876954169, 0.8967279596095334, 0.902130014143916, 0.8928483561598998, 0.8935921923105077, 0.780278233487931, 0.7073223067589125, 0.7878947333038103, 0.7848071808782269, 0.762414139251623, 0.7832597583999885, 0.7841499502962779, 0.7838056153860343, 0.769475495302518, 0.17556840978501664, 0.17607980704237403, 0.1242509312417549, 0.1597678072150538, 0.12809501322521577, 0.6926221455957122, 0.16583618222144303, 0.18552519605591355, 0.14307853107344803, 0.0899396509593855, 0.08898767021286402, 0.13058266324348478, 0.10842688999916295, 0.13965076462775594, 0.11449138346016186, 0.10771914268587202, 0.13171734832693616, 0.12990110944829536, 0.9774520834896789, 0.9816252430840031, 0.9855694650016714, 0.9774717200080704, 0.9814843753764427, 0.9726332408534144, 0.9864961331010277, 0.9774849422092992, 0.9776968871748526, 0.7821039905991803, 0.6341739420284978, 0.7589065919655154, 0.7662693096714481, 0.7426425800002486, 0.7785039666087101, 0.7469904856505432, 0.6333026994966042, 0.7501145870815299, 0.2285443251350905, 0.23015693680606986, 0.26890287603269447, 0.38576263184487514, 0.3814519963979658, 0.9204020403951285, 0.22034006901329406, 0.1523726456097927, 0.3952328279148385, 0.24859345486620854, 0.22023577580333487, 0.13099612819161266, 0.12870472540601263, 0.19177075800589916, 0.21051369220330596, 0.2229310949047867, 0.13264857607875924, 0.19553621875133054, 0.22683133761203067, 0.2359860969873937, 0.22429588687298152, 0.1324888301796866, 0.24092668458791489, 0.2297149913893104, 0.18101946204358188, 0.2474042207108803, 0.09594304281916832, 9.999999999998899e-05, 0.022011189531041087, 0.017712893523631257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008129586420274615, 9.999999999998899e-05, 0.05251623711522557, 0.1215736732601741, 0.0605874507644778, 0.11045852071935547, 0.08283713807604176, 0.03020355571026978, 0.042605096148729205, 0.039632994537194044, 0.110268767470867, 0.05354878479016589, 0.09163210219481965, 0.195377500677951, 0.17434621983293186, 0.26475634354857036, 0.09612007910340203, 0.2541411790199831, 0.12164161086018432, 0.0981816489524785, 0.12881885031145046, 0.3425026307320964, 0.168962492909992, 0.11471887758233557, 0.08983434364907805, 0.14477232558677955, 0.1375616453567422, 0.18946741603495143, 0.11317327023809698, 0.12286307393925322, 0.5203060983382022, 0.638998361950639, 0.6509953578858387, 0.5714714153817486, 0.5667842148248272, 0.5442182342992423, 0.5801752624358283, 0.5803453302524875, 0.5658928312410677, 0.13783074366290693, 0.1164049859394588, 0.1120484531217697, 0.112411803598497, 0.07575549758847011, 0.1061881534974507, 0.11461635532027759, 0.10305860329580396, 0.10865280880115202, 0.22165567356491422, 0.23408413391573202, 0.2487512254794486, 0.15609922807500076, 0.28693625674804335, 0.30318367988583994, 0.3155108024309625, 0.17588900655210293, 0.3429825747177331, 0.23893446678525, 0.4145161220485025, 0.44697691160501896, 0.3788948713350514, 0.24233175527568607, 0.5796621413481122, 0.2299199217320954, 0.5871149785385665, 0.29138777457931797, 0.1563403862348205, 0.2731546467573769, 0.28524026946616776, 0.20201349807246072, 0.2366501637687337, 0.20128216047831315, 0.25858295912822205, 0.27063022148902793, 0.20194299494508605, 0.21913132592436801, 0.24801015702863638, 0.16700338119368097, 0.2036644569998446, 0.2612346472904361, 0.19206310525551373, 0.2060570842150169, 0.2585612745574457, 0.24845480531773767, 0.253620327137294, 0.18645883166968014, 0.20268159950518605, 0.21261735782793312, 0.20851849214446005, 0.18171615172213285, 0.25451985827737633, 0.21440573885393743, 0.24449173899203636, 0.1870489342924302, 0.17323834191796117, 0.15293709066891037, 0.9345653494722882, 0.20137957128387207, 0.11951553551443506, 0.1427808263953424, 0.16510654738538744, 0.9378825564541036, 0.8233637654185743, 0.21264127888257767, 0.0735779836162106, 0.21060852580773437, 0.6366278252651836, 0.15523896797376913, 0.7695850927350005, 0.1565752717057296, 0.7676695096057857, 0.21937565799891923, 0.1933050134996065, 0.20206674572415673, 0.2231840479688686, 0.19480849175505977, 0.2368884606694711, 0.21989117280577364, 0.20559838650522944, 0.22648156669768482, 0.09793124738970782, 0.10105771970323418, 0.09450581536455083, 0.08805066785590421, 0.08911193506623805, 0.08238481694433086, 0.10700294218170514, 0.08051403744686703, 0.10180209417661301]}, "mutation_prompt": null}
{"id": "2407d656-122a-41d9-9117-1d32937cd9c4", "solution": "import numpy as np\n\nclass EMOOAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.max_generations = budget // self.population_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def random_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.population_size, self.dim))\n\n        def differential_evolution(population, f=0.5, cr=0.9):\n            mutated = population + f * (population[np.random.choice(self.population_size, size=self.population_size, replace=True)] - population)\n            crossover = np.random.rand(self.population_size, self.dim) < cr\n            trial_population = np.where(crossover, mutated, population)\n            return trial_population\n\n        def particle_swarm_optimization(population, w=0.5, c1=1.5, c2=1.5, m=0.2):  # Added mutation parameter\n            velocity = np.zeros((self.population_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = np.array([func(ind) for ind in pbest])\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx]\n\n            for _ in range(self.max_generations):\n                r1, r2 = np.random.rand(2, self.population_size, self.dim)\n                velocity = w * velocity + c1 * r1 * (pbest - population) + c2 * r2 * (gbest - population)\n                population = population + velocity\n                fitness_values = np.array([func(ind) for ind in population])\n\n                improved = fitness_values < pbest_fitness\n                pbest[improved] = population[improved]\n                pbest_fitness[improved] = fitness_values[improved]\n\n                # Introducing mutation for exploration\n                mutation_mask = np.random.rand(self.population_size, self.dim) < m\n                mutated_population = population + np.random.uniform(-1, 1, size=(self.population_size, self.dim)) * mutation_mask\n                mutated_fitness_values = np.array([func(ind) for ind in mutated_population])\n                population = np.where(mutated_fitness_values < fitness_values, mutated_population, population)\n                fitness_values = np.where(mutated_fitness_values < fitness_values, mutated_fitness_values, fitness_values)\n\n                gbest_idx = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_idx]\n\n            return gbest\n\n        current_population = random_population()\n        best_solution = particle_swarm_optimization(current_population)\n        return best_solution", "name": "EMOOAlgorithm", "description": "Improved EMOOAlgorithm by introducing a mutation mechanism within particle swarm optimization to enhance exploration.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (50,) (50,5) (50,5) ').", "error": "ValueError('operands could not be broadcast together with shapes (50,) (50,5) (50,5) ')", "parent_id": "7c0b45ab-a5b9-43e2-ace3-fe4f596464a7", "metadata": {}, "mutation_prompt": null}
