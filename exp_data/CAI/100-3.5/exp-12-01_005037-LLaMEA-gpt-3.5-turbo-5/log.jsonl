{"id": "2052f7f8-2d66-4892-a365-6c59f4bd6e56", "solution": "import numpy as np\n\nclass DynamicDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.NP = 10\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        best_sol = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fit = func(best_sol)\n        for _ in range(self.budget):\n            trial_population = []\n            for _ in range(self.NP):\n                a, b, c = np.random.choice(range(self.NP), 3, replace=False)\n                mutant_vec = best_sol + self.F * (best_sol - trial_population[a]) + self.F * (trial_population[b] - trial_population[c])\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vec = np.where(crossover_mask, mutant_vec, best_sol)\n                trial_fit = func(trial_vec)\n                if trial_fit < best_fit:\n                    best_sol = trial_vec\n                    best_fit = trial_fit\n                trial_population.append(trial_vec)\n        return best_sol", "name": "DynamicDE", "description": "An improved version of the Differential Evolution algorithm with a dynamically adjusting mutation strategy to balance exploration and exploitation.", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "An exception occured: Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 18, in __call__\nIndexError: list index out of range\n.", "error": "IndexError('list index out of range')Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 18, in __call__\nIndexError: list index out of range\n", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "5a6ef75f-7b90-4c3c-b5a0-6a43c6155163", "solution": "import numpy as np\n\nclass DynamicDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.NP = 10\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        best_sol = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fit = func(best_sol)\n        for _ in range(self.budget):\n            trial_population = []\n            for _ in range(self.NP):\n                a, b, c = np.random.choice(range(self.NP), 3, replace=False)\n                mutant_vec = best_sol + self.F * (best_sol - trial_population[a]) + self.F * (trial_population[b] - trial_population[c])\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vec = np.where(crossover_mask, mutant_vec, best_sol)\n                trial_fit = func(trial_vec)\n                if trial_fit < best_fit:\n                    best_sol = trial_vec\n                    best_fit = trial_fit\n                trial_population.append(trial_vec)\n        return best_sol", "name": "DynamicDE", "description": "An improved version of the Differential Evolution algorithm with a dynamically adjusting mutation strategy to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "2052f7f8-2d66-4892-a365-6c59f4bd6e56", "metadata": {}, "mutation_prompt": null}
