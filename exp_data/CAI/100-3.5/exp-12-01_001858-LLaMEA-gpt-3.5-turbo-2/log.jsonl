{"id": "6cf2afdb-5ea3-4253-9ee7-616ab3cb27b1", "solution": "import numpy as np\n\nclass HarmonySearchAM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_rate = 0.7\n        self.pitch_adjust_rate = 0.5\n        self.bandwidth = (self.upper_bound - self.lower_bound) * 0.01\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (int(self.harmony_memory_rate * budget), dim))\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n        for i in range(self.budget):\n            if np.random.rand() < self.harmony_memory_rate:\n                index = np.random.randint(len(self.harmony_memory))\n                for j in range(self.dim):\n                    if np.random.rand() < self.pitch_adjust_rate:\n                        harmonies[i, j] = self.harmony_memory[index, j] + np.random.uniform(-self.bandwidth, self.bandwidth)\n            harmonies[i] = np.clip(harmonies[i], self.lower_bound, self.upper_bound)\n            harmonies[i] = np.clip(harmonies[i], self.lower_bound, self.upper_bound)\n            if func(harmonies[i]) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = harmonies[i]\n                self.harmony_memory = self.harmony_memory[np.argsort([func(h) for h in self.harmony_memory])]\n        return self.harmony_memory[0]", "name": "HarmonySearchAM", "description": "A novel metaheuristic algorithm called \"Harmony Search with Adaptive Memory\" that dynamically adjusts pitch adjustment and memory consideration to balance exploration and exploitation for black box optimization.", "configspace": "", "generation": 0, "fitness": 0.09085838038946538, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.177638427745492, 0.17576981809996217, 0.17022910954911585, 0.168491425041288, 0.1881474166321525, 0.17424037618125143, 0.1785134503132927, 0.16105143783152764, 0.19025705338425192, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04203468078209316, 0.0463712312426976, 0.036242621834864264, 0.041009817395274095, 0.037312911435916085, 0.03828283420091716, 0.05282060304206393, 0.06700968355571746, 0.058697959752307516, 0.025220498569760497, 0.030921490438553745, 0.048710672395130716, 0.02595365077653511, 0.049256295938478245, 0.058125718850330466, 0.03767739033282891, 0.03991373300032519, 0.029726087722539485, 0.08740906558470929, 0.07325761724047775, 0.09085876997287012, 0.08820910445223784, 0.08032426034106832, 0.08637797103368938, 0.08220878216016592, 0.0862040812558067, 0.07931788281329533, 0.07971774788656472, 0.07509360903604134, 0.10165693891320993, 0.06430098606981394, 0.06226385035348936, 0.051963145096798, 0.09468529756495425, 0.056896453334403074, 0.09983305513459895, 0.12550941009441408, 0.19300766514440593, 0.14803157828349323, 0.1036869308903049, 0.09158667183813618, 0.1274637751263903, 0.11787848900928333, 0.13678641945167092, 0.11356311437116473, 0.004348029005056042, 0.004558269530374082, 0.003685304379861587, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019845166439700912, 0.008141837660891382, 0.06955668591673547, 9.999999999998899e-05, 0.011979769218241065, 0.0353474315333131, 0.011845946020409781, 0.017985993012930468, 0.006566459565182425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05290881898869959, 0.06856016617664229, 0.044888310376679175, 0.0693080084135771, 0.026724765321271104, 0.055757365452125285, 0.05294211901201196, 0.04999059190096411, 0.0642009244907471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752573358540959, 9.999999999998899e-05, 0.2207433031926136, 0.19287142124564516, 0.19492348330976106, 0.20554444038904862, 0.18923129631109548, 0.20720325658846783, 0.19779150687967062, 0.17840579300799742, 0.20212469074338402, 0.04999957771121044, 0.04184426284110976, 0.04400821583565884, 0.043170459610778145, 0.040436389620021496, 0.045989972636442, 0.07324504181335756, 0.04398332101198699, 0.05228608645154764, 0.1370742528291583, 0.12295702425796295, 0.12951702282558542, 0.1410394256794678, 0.14108210074559135, 0.12471621955496426, 0.1503119134019073, 0.14860433116592608, 0.13225327395261044, 0.1716929720945647, 0.1594943101152121, 0.17603443055235168, 0.1677377481804444, 0.1821391651290749, 0.17693738106671097, 0.16589366703230912, 0.17344421122677345, 0.15367175638324038, 0.11461691484296521, 0.10381468541681282, 0.11846467432150021, 0.11173048542918418, 0.136076639544789, 0.11674383683385603, 0.10473014242441825, 0.12335511763587204, 0.1228937066351915, 0.1410345420737682, 0.16234148850973162, 0.1582525918890122, 0.16030555127179613, 0.14503531203982423, 0.16228727727900727, 0.1485588727623408, 0.1735526516615098, 0.1826894159107746, 0.14188906937615042, 0.14646030222327466, 0.13991946616492712, 0.1409559744311547, 0.14376045219359912, 0.1527902130303268, 0.14086923487823166, 0.14155055358167412, 0.16194794869120144, 0.18398534661410293, 0.1667431472030768, 0.16651487299825807, 0.15929438802742857, 0.1509523258559342, 0.14185394395494388, 0.16136413580888787, 0.1633719110955133, 0.1759447652795818, 0.1566966963758406, 0.1580127418052636, 0.16044335336234616, 0.1502982776510624, 0.18881247924742728, 0.16042355301790867, 0.1684966755878926, 0.17306220425809427, 0.20283052218203534, 0.16839090546318125, 0.190879046116455, 0.1751360067071811, 0.18675221945214926, 0.2134459699865926, 0.18373508871228894, 0.1759257986888566, 0.1887030719722984, 0.20567311587444126, 0.05833110590115975, 0.05528057490808003, 0.06578565071541886, 0.05185235337200522, 0.05931231287137706, 0.05333198703492781, 0.07530959676481797, 0.05490519083582679, 0.06071437770323973]}, "mutation_prompt": null}
{"id": "e84364a5-9e69-4602-9fb4-f44aefaa7d3b", "solution": "import numpy as np\n\nclass HarmonySearchAM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_rate = 0.7\n        self.pitch_adjust_rate = 0.5\n        self.bandwidth = (self.upper_bound - self.lower_bound) * 0.01\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (int(self.harmony_memory_rate * budget), dim))\n\n    def __call__(self, func):\n        harmonies = np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n        for i in range(self.budget):\n            if np.random.rand() < self.harmony_memory_rate:\n                index = np.random.randint(len(self.harmony_memory))\n                for j in range(self.dim):\n                    if np.random.rand() < self.pitch_adjust_rate:\n                        self.bandwidth = np.maximum(self.bandwidth * 0.9, 1e-8)  # Self-adaptive bandwidth adjustment\n                        harmonies[i, j] = self.harmony_memory[index, j] + np.random.uniform(-self.bandwidth, self.bandwidth)\n            harmonies[i] = np.clip(harmonies[i], self.lower_bound, self.upper_bound)\n            if func(harmonies[i]) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = harmonies[i]\n                self.harmony_memory = self.harmony_memory[np.argsort([func(h) for h in self.harmony_memory])]\n        return self.harmony_memory[0]", "name": "HarmonySearchAM", "description": "Enhancing the Harmony Search with Adaptive Memory algorithm by introducing a self-adaptive bandwidth adjustment during pitch adjustment to improve convergence speed and exploration abilities.", "configspace": "", "generation": 1, "fitness": 0.09086019291270368, "feedback": "", "error": "", "parent_id": "6cf2afdb-5ea3-4253-9ee7-616ab3cb27b1", "metadata": {"aucs": [0.17763849071602622, 0.17576981101209077, 0.17022910954911585, 0.1684919913261148, 0.18814738895317273, 0.17424035670030913, 0.1785134503132927, 0.16105144406988658, 0.19025705338425192, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04203468078209316, 0.04637179071502051, 0.036245705577585996, 0.041009817395274095, 0.037312911435916085, 0.03828283420091716, 0.05282060304206393, 0.06700968355571746, 0.058697959752307516, 0.025220498569760497, 0.030921490438553745, 0.048727806310907895, 0.02595979582471064, 0.049256295938478245, 0.05828293506402826, 0.03767739033282891, 0.03991373300032519, 0.029726087722539485, 0.08740911360944137, 0.07325764074032304, 0.09085876997287012, 0.08820910445223784, 0.08032429236316851, 0.08637797103368938, 0.08220878216016592, 0.08620411270182327, 0.07931788281329533, 0.07971774788656472, 0.07509360903604134, 0.10165693891320993, 0.06430098606981394, 0.06226385035348936, 0.051963145096798, 0.09468529756495425, 0.056896453334403074, 0.09983305513459895, 0.12550941009441408, 0.19300766514440593, 0.14803157828349323, 0.1036869308903049, 0.09158667183813618, 0.1274637751263903, 0.11787848900928333, 0.13678641945167092, 0.11356311437116473, 0.004348029005056042, 0.004558269530374082, 0.003685304379861587, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019845166439700912, 0.008141837660891382, 0.06955668591673547, 9.999999999998899e-05, 0.011979769218241065, 0.0353474315333131, 0.011845946020409781, 0.017985993012930468, 0.006566459565182425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05290881898869959, 0.06856016617664229, 0.044888310376679175, 0.0693080084135771, 0.026724765321271104, 0.055757365452125285, 0.05294211901201196, 0.04999059190096411, 0.0642009244907471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006752573358540959, 9.999999999998899e-05, 0.22074374255822993, 0.19287141423796228, 0.19492348330976106, 0.20554450553130588, 0.18923107031690867, 0.20720325658846783, 0.19779164738464028, 0.17840581207529194, 0.20212480776520692, 0.04999957771121044, 0.042022044708837525, 0.04400821583565884, 0.043170459610778145, 0.040436389620021496, 0.045989972636442, 0.07324504181335756, 0.04398332101198699, 0.05228608645154764, 0.13707687522803425, 0.12295567805405228, 0.12951715627817828, 0.14104222764066032, 0.14108178741883715, 0.12469905445094298, 0.1503119134019073, 0.14860303025824073, 0.13225348257233638, 0.1716929720945647, 0.15949534146528555, 0.17603443055235168, 0.16773745834216947, 0.1821412460480588, 0.17693738106671097, 0.1658932880702183, 0.17344000062278486, 0.15367066021179399, 0.11461638648654893, 0.1038117384185151, 0.11846467432150021, 0.11173124695607928, 0.13607848566021208, 0.11674383683385603, 0.10472816525140438, 0.12332706723761988, 0.1228937066351915, 0.14103472111870052, 0.16235070743610414, 0.15828347195023684, 0.16012347436049146, 0.1450138593249536, 0.16236151573684, 0.14855894147584803, 0.17360259553038704, 0.18269181776010435, 0.14188906937615042, 0.1464599973124605, 0.13991946616492712, 0.1409559744311547, 0.14376045219359912, 0.1527902130303268, 0.14086923487823166, 0.14155055358167412, 0.16194794869120144, 0.18398537058522624, 0.16674311171094647, 0.1665148600550208, 0.15934323328478261, 0.15095228487168932, 0.14185091503414404, 0.1613641335724897, 0.16337190536349555, 0.1759509943176849, 0.1566966989935159, 0.15801277621284282, 0.16044335499010154, 0.1502982714773996, 0.18881246453378042, 0.16042355301790867, 0.16849629934469212, 0.17306220198355937, 0.20283052218203534, 0.1683903964143506, 0.19087973988834928, 0.17515502708188802, 0.186790907343795, 0.21346925829005703, 0.18373513319288048, 0.17590592090538082, 0.188703488811222, 0.20567311587444126, 0.05833110590115975, 0.0552805008706313, 0.06578569045387084, 0.05185235337200522, 0.05931231287137706, 0.05333198703492781, 0.07530959676481797, 0.05490519083582679, 0.06071437770323973]}, "mutation_prompt": null}
