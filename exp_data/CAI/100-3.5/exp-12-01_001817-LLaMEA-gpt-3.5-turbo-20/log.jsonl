{"id": "4c24a7f9-229e-47dc-be6e-aca0b669d6d7", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.hms = 10  # Harmony Memory Size\n        self.hmcr = 0.9  # Harmony Memory Consideration Rate\n        self.par = 0.5  # Pitch Adjustment Rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.hms, self.dim))\n\n        def generate_new_harmony(harmony_memory):\n            new_harmony = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_harmony[i] = harmony_memory[np.random.randint(self.hms), i]\n                else:\n                    new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                    if np.random.rand() < self.par:\n                        new_harmony[i] += np.random.normal(0, 1)\n            return new_harmony\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_harmony = generate_new_harmony(harmony_memory)\n            harmony_memory = np.vstack((harmony_memory, new_harmony))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))[:self.hms]]\n\n        return harmony_memory[np.argmin(func(harmony_memory))]", "name": "HarmonySearch", "description": "Novel Harmony Search algorithm with adaptive parameter tuning for global optimization over continuous search spaces.", "configspace": "", "generation": 0, "fitness": 0.1075239929728729, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.24782905348967166, 0.2371055254828799, 0.2489220601169162, 0.2254184393293499, 0.27868863661064447, 0.3217460540697672, 0.27317206258176885, 0.2865089841391667, 0.27088951093792935, 0.006797646469791974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08603883549422842, 0.06585724467032728, 0.09088459959297002, 0.0930731506668171, 0.10200042170108392, 0.08124706536281556, 0.10271117896226556, 0.09628191285514842, 0.0710056904352403, 0.09049332763955631, 0.04928891598898322, 0.07557388126524622, 0.09916132101342134, 0.06744594060028175, 0.0832190588920041, 0.057248676115108754, 0.07493051008500895, 0.0471913429383487, 0.16735861374773098, 0.14666055299938308, 0.18235204645069525, 0.480188500158485, 0.17287339099545285, 0.1913786866010534, 0.7264737336586357, 0.15987644336704399, 0.20287543783320916, 0.08509230172362092, 0.09804552882132234, 0.11637915578373537, 0.06968093639564688, 0.03671294036527728, 0.0758992258137432, 0.1418798443024023, 0.07623386675380717, 0.0854755835507589, 0.1224873651249263, 0.09476687010900864, 0.09547287159419104, 0.16864551753300805, 0.22212933172879112, 0.12114596392905663, 0.1265213502075585, 0.08465480293513705, 0.12307333679381283, 0.04476394896843017, 0.02217486353929321, 0.03360507318648054, 0.03440619472071316, 0.0718845795201658, 0.04557430216932734, 0.00734647712367964, 0.06222654211100509, 0.05753266590269157, 0.040324079944673574, 9.999999999998899e-05, 0.03500460394072147, 0.039438893574530676, 0.026766769199203178, 0.1100661395900484, 0.061898227423674124, 0.01062244867973472, 0.07289799758925242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012908717053357055, 0.06204769232307794, 0.023460316718111995, 0.008996192436734551, 0.016196884030863834, 9.999999999998899e-05, 0.0030283140347246995, 0.01645504300638767, 0.07267913972543971, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04878848354988152, 0.009976724808366644, 0.025250475639751357, 0.018858495476412274, 0.03367646555980919, 0.01815155859898676, 0.034424341316855456, 0.003002682265110135, 0.013736422087828215, 0.23619996961127931, 0.20360704969205834, 0.2762196781947409, 0.24266465044020447, 0.2841419381396074, 0.22316505752385796, 0.2278355503910513, 0.2659756166108438, 0.2928397597364282, 0.0403831316879274, 0.04753868266068695, 0.06202646925351418, 0.05347748549237241, 0.0422849578680391, 0.06451765782003471, 0.03727954821746693, 0.07046081102394708, 0.06686301320246091, 0.12130936228324662, 0.0976550169715702, 0.1309377171210393, 0.13066039499876825, 0.15264036270468861, 0.13877807628276895, 0.0999107138548816, 0.09916137026655869, 0.12404729690706007, 0.18906646958436646, 0.20870928792933385, 0.16195435607451314, 0.14867472239195645, 0.16494212428836763, 0.17916504009107137, 0.21010104840475619, 0.13916918162251113, 0.15611998743872135, 0.09241264111551861, 0.08690709608453273, 0.1065989815923869, 0.14072880321372871, 0.1307088922550571, 0.10003869689242151, 0.10217651542786976, 0.11422812719778286, 0.11073069465057928, 0.1789412420785904, 0.16395054382189433, 0.14250059390755865, 0.1540968519782735, 0.14014204916589856, 0.15377285487051484, 0.17630458275107352, 0.14773905521318598, 0.1590251279324464, 0.1711310631203511, 0.15751770718535296, 0.17684521646239004, 0.16342089025458828, 0.16477033164320276, 0.13679211885590392, 0.1694293748722876, 0.09366796770996022, 0.16894117852553936, 0.1652337505161109, 0.2530882763124781, 0.16968059482505538, 0.21792346473729873, 0.24309374838687015, 0.12725100198578565, 0.11273888055617953, 0.11133362202611174, 0.10488316412448817, 0.21811740705371152, 0.15019838669789876, 0.08155115904760168, 0.07749126257352379, 0.23663920322473786, 0.16959252754419796, 0.08023021351949733, 0.12806645254683702, 0.13078895010547253, 0.15734104603487464, 0.14942789451848626, 0.14763022729669195, 0.1536348562682952, 0.1699607426687919, 0.15587593167630953, 0.1439058564373441, 0.1584882963403692, 0.1539442407999655, 0.05859112708133085, 0.04609934128293203, 0.056153635359819654, 0.05118572982719394, 0.056139125542778334, 0.05809244790650514, 0.0464804744516748, 0.05685372857530657, 0.03905380147488835]}, "mutation_prompt": null}
{"id": "7eefcd67-6774-4d71-a021-d563d63a54f3", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.hms = 10  # Harmony Memory Size\n        self.hmcr = 0.9  # Harmony Memory Consideration Rate\n        self.par = 0.5  # Pitch Adjustment Rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.hms, self.dim))\n\n        def generate_new_harmony(harmony_memory):\n            new_harmony = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_harmony[i] = harmony_memory[np.random.randint(self.hms), i]\n                else:\n                    new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                    if np.random.rand() < self.par:\n                        new_harmony[i] += np.random.normal(0, 1)\n            return new_harmony\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_harmony = generate_new_harmony(harmony_memory)\n            harmony_memory = np.vstack((harmony_memory, new_harmony))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))[:self.hms]]\n\n        return harmony_memory[np.argmin(func(harmony_memory))]", "name": "HarmonySearch", "description": "Novel Harmony Search algorithm with adaptive parameter tuning for global optimization over continuous search spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4c24a7f9-229e-47dc-be6e-aca0b669d6d7", "metadata": {"aucs": [0.24782905348967166, 0.2371055254828799, 0.2489220601169162, 0.2254184393293499, 0.27868863661064447, 0.3217460540697672, 0.27317206258176885, 0.2865089841391667, 0.27088951093792935, 0.006797646469791974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08603883549422842, 0.06585724467032728, 0.09088459959297002, 0.0930731506668171, 0.10200042170108392, 0.08124706536281556, 0.10271117896226556, 0.09628191285514842, 0.0710056904352403, 0.09049332763955631, 0.04928891598898322, 0.07557388126524622, 0.09916132101342134, 0.06744594060028175, 0.0832190588920041, 0.057248676115108754, 0.07493051008500895, 0.0471913429383487, 0.16735861374773098, 0.14666055299938308, 0.18235204645069525, 0.480188500158485, 0.17287339099545285, 0.1913786866010534, 0.7264737336586357, 0.15987644336704399, 0.20287543783320916, 0.08509230172362092, 0.09804552882132234, 0.11637915578373537, 0.06968093639564688, 0.03671294036527728, 0.0758992258137432, 0.1418798443024023, 0.07623386675380717, 0.0854755835507589, 0.1224873651249263, 0.09476687010900864, 0.09547287159419104, 0.16864551753300805, 0.22212933172879112, 0.12114596392905663, 0.1265213502075585, 0.08465480293513705, 0.12307333679381283, 0.04476394896843017, 0.02217486353929321, 0.03360507318648054, 0.03440619472071316, 0.0718845795201658, 0.04557430216932734, 0.00734647712367964, 0.06222654211100509, 0.05753266590269157, 0.040324079944673574, 9.999999999998899e-05, 0.03500460394072147, 0.039438893574530676, 0.026766769199203178, 0.1100661395900484, 0.061898227423674124, 0.01062244867973472, 0.07289799758925242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012908717053357055, 0.06204769232307794, 0.023460316718111995, 0.008996192436734551, 0.016196884030863834, 9.999999999998899e-05, 0.0030283140347246995, 0.01645504300638767, 0.07267913972543971, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04878848354988152, 0.009976724808366644, 0.025250475639751357, 0.018858495476412274, 0.03367646555980919, 0.01815155859898676, 0.034424341316855456, 0.003002682265110135, 0.013736422087828215, 0.23619996961127931, 0.20360704969205834, 0.2762196781947409, 0.24266465044020447, 0.2841419381396074, 0.22316505752385796, 0.2278355503910513, 0.2659756166108438, 0.2928397597364282, 0.0403831316879274, 0.04753868266068695, 0.06202646925351418, 0.05347748549237241, 0.0422849578680391, 0.06451765782003471, 0.03727954821746693, 0.07046081102394708, 0.06686301320246091, 0.12130936228324662, 0.0976550169715702, 0.1309377171210393, 0.13066039499876825, 0.15264036270468861, 0.13877807628276895, 0.0999107138548816, 0.09916137026655869, 0.12404729690706007, 0.18906646958436646, 0.20870928792933385, 0.16195435607451314, 0.14867472239195645, 0.16494212428836763, 0.17916504009107137, 0.21010104840475619, 0.13916918162251113, 0.15611998743872135, 0.09241264111551861, 0.08690709608453273, 0.1065989815923869, 0.14072880321372871, 0.1307088922550571, 0.10003869689242151, 0.10217651542786976, 0.11422812719778286, 0.11073069465057928, 0.1789412420785904, 0.16395054382189433, 0.14250059390755865, 0.1540968519782735, 0.14014204916589856, 0.15377285487051484, 0.17630458275107352, 0.14773905521318598, 0.1590251279324464, 0.1711310631203511, 0.15751770718535296, 0.17684521646239004, 0.16342089025458828, 0.16477033164320276, 0.13679211885590392, 0.1694293748722876, 0.09366796770996022, 0.16894117852553936, 0.1652337505161109, 0.2530882763124781, 0.16968059482505538, 0.21792346473729873, 0.24309374838687015, 0.12725100198578565, 0.11273888055617953, 0.11133362202611174, 0.10488316412448817, 0.21811740705371152, 0.15019838669789876, 0.08155115904760168, 0.07749126257352379, 0.23663920322473786, 0.16959252754419796, 0.08023021351949733, 0.12806645254683702, 0.13078895010547253, 0.15734104603487464, 0.14942789451848626, 0.14763022729669195, 0.1536348562682952, 0.1699607426687919, 0.15587593167630953, 0.1439058564373441, 0.1584882963403692, 0.1539442407999655, 0.05859112708133085, 0.04609934128293203, 0.056153635359819654, 0.05118572982719394, 0.056139125542778334, 0.05809244790650514, 0.0464804744516748, 0.05685372857530657, 0.03905380147488835]}, "mutation_prompt": null}
