{"id": "e6f5af2b-047d-4aa0-888e-875fcda182d9", "solution": "import numpy as np\n\nclass FireflyLevyCauchy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.alpha = 0.5\n        self.beta_0 = 1.0\n        self.gamma = 0.1\n        self.step_size = 0.1\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.beta_0) * np.math.sin(np.pi * self.beta_0 / 2) / (np.math.gamma((1 + self.beta_0) / 2) * self.beta_0 * 2 ** ((self.beta_0 - 1) / 2))) ** (1 / self.beta_0)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / self.beta_0)\n        return step\n\n    def cauchy_mutation(self, x):\n        mutated_x = x + self.gamma / (1 + self.step_size) * np.tan(np.pi * (np.random.rand() - 0.5))\n        return mutated_x\n\n    def __call__(self, func):\n        population = 10 * np.random.rand(self.population_size, self.dim) - 5.0\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:\n                        attractiveness = self.alpha * np.exp(-np.linalg.norm(population[j] - population[i])**2)\n                        step = self.levy_flight()\n                        new_position = population[i] + attractiveness * (population[j] - population[i]) + step\n                        new_position = np.clip(new_position, -5.0, 5.0)\n                        new_position = self.cauchy_mutation(new_position)\n                        new_fitness = func(new_position)\n                        \n                        if new_fitness < fitness[i]:\n                            population[i] = new_position\n                            fitness[i] = new_fitness\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyLevyCauchy", "description": "An enhanced version of the Firefly Algorithm combining Levy flight and Cauchy mutation for improved exploration-exploitation trade-off.", "configspace": "", "generation": 0, "fitness": 0.0690590291131507, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.12170216039510418, 0.10264812616487906, 0.10837110632350744, 0.08952233024927114, 0.06659579708573382, 0.09391039481555885, 0.11974714313549517, 0.12075414005022433, 0.08919829418928715, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04573572854170793, 0.045497513425529545, 0.03997701297672107, 0.010643411704069683, 0.0079489734192153, 0.01605245520194387, 0.018524541061695876, 0.006548313520828741, 0.02466987950999011, 0.03564642726679035, 0.046576283254765816, 0.027850402861561818, 0.02394760885235847, 0.011278993471182552, 0.01921633409180301, 0.005739374750768023, 0.00656173957457562, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.04720578031751099, 0.0638860334912611, 0.048986754550083944, 0.05483073205067157, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06267533099385414, 0.018634452257363043, 0.050575667143735736, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.11505304783895776, 0.09062747232389023, 0.09019419350842073, 0.09180282964414566, 0.04098725659427904, 0.03445339952857562, 0.11034297831675266, 0.05931056463008866, 0.10216404243437682, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04742337945384156, 0.035468775732226954, 0.045736459931635554, 0.058537346471358664, 0.04781239157149464, 0.0280618962585657, 0.048580742366548524, 0.014845702863376387, 0.03252612515849873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10765468056468941, 0.05113217117225044, 0.09469242549222168, 0.06525660054138038, 0.05665538740178655, 0.057032852814499546, 0.08389419378369423, 0.06399319104118095, 0.026312461853078672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17323788894496062, 0.14154700861582536, 0.14838054695461433, 0.15188698394833378, 0.11045659476000513, 0.10958974387871656, 0.1499676012876875, 0.1387618113484923, 0.15627870923436782, 0.018638213130144687, 0.04001174340942648, 0.007729048610944256, 0.03239948842827267, 0.038392963748794307, 0.046410824446838306, 0.034858074782384785, 0.026618797315206555, 0.0335940812747334, 0.12494947797737, 0.11795498767092616, 0.11343909059899782, 0.11138604062155177, 0.13088506016587598, 0.13135715322750852, 0.13233002348040468, 0.14428898598865803, 0.10787060394082915, 0.13297616523402545, 0.14387710274687215, 0.14908500921935208, 0.14436992549135885, 0.14252716981334812, 0.14122312443134355, 0.163067271120528, 0.17377774300845283, 0.1372273653482371, 0.06858548706643197, 0.08063786135605455, 0.09638262092374805, 0.09372301675162165, 0.09681963143563166, 0.07840263057574415, 0.09343542299181662, 0.12898678353821602, 0.07604530286937172, 0.15299195937527987, 0.15664190186559568, 0.1594142623409729, 0.1931504882074362, 0.11984744565788075, 0.1475085488099066, 0.16485931149640598, 0.14114931294785094, 0.16514120040464586, 0.0693910240513762, 0.1256213608700083, 0.0014414469665443574, 0.14153528539592497, 0.14970605889512956, 0.12361483900056736, 0.15058484565596064, 0.15304119140682138, 0.13667272343373604, 0.13088150979587498, 0.10427374829790259, 0.1012138543841371, 0.13777071349935066, 0.12233176358927433, 0.1666037789231315, 0.0893285735853746, 0.12069350470206386, 0.1273464541646988, 0.09468627319664136, 0.10715818385573417, 0.1315067420486663, 0.08224111624626673, 0.08363260367645364, 0.07323999094071332, 0.11157057079682142, 0.12457922756179085, 0.09531834815285822, 0.19419616217912572, 0.1717683467211527, 0.19032528787513925, 0.193327166218779, 0.1724879977035989, 0.17779037221686178, 0.18694078825030624, 0.1863233145406159, 0.18243050136942385, 0.03412910214735365, 0.04084479538917152, 0.04216496024613203, 0.04842432211379333, 0.037056720794191644, 0.042404832899956446, 0.07163226496199226, 0.04042263183700001, 0.042473454985965664]}, "mutation_prompt": null}
{"id": "ed9b074e-d587-4811-9341-65f61de17f6c", "solution": "import numpy as np\n\nclass FireflyLevyCauchy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.alpha = 0.5\n        self.beta_0 = 1.0\n        self.gamma = 0.1\n        self.step_size = 0.1\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + self.beta_0) * np.math.sin(np.pi * self.beta_0 / 2) / (np.math.gamma((1 + self.beta_0) / 2) * self.beta_0 * 2 ** ((self.beta_0 - 1) / 2))) ** (1 / self.beta_0)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / self.beta_0)\n        return step\n\n    def cauchy_mutation(self, x):\n        mutated_x = x + self.gamma / (1 + self.step_size) * np.tan(np.pi * (np.random.rand() - 0.5))\n        return mutated_x\n\n    def __call__(self, func):\n        population = 10 * np.random.rand(self.population_size, self.dim) - 5.0\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:\n                        attractiveness = self.alpha * np.exp(-np.linalg.norm(population[j] - population[i])**2)\n                        step = self.levy_flight()\n                        new_position = population[i] + attractiveness * (population[j] - population[i]) + step\n                        new_position = np.clip(new_position, -5.0, 5.0)\n                        new_position = self.cauchy_mutation(new_position)\n                        new_fitness = func(new_position)\n                        \n                        if new_fitness < fitness[i]:\n                            population[i] = new_position\n                            fitness[i] = new_fitness\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        return best_solution", "name": "FireflyLevyCauchy", "description": "An enhanced version of the Firefly Algorithm combining Levy flight and Cauchy mutation for improved exploration-exploitation trade-off.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e6f5af2b-047d-4aa0-888e-875fcda182d9", "metadata": {"aucs": [0.12170216039510418, 0.10264812616487906, 0.10837110632350744, 0.08952233024927114, 0.06659579708573382, 0.09391039481555885, 0.11974714313549517, 0.12075414005022433, 0.08919829418928715, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04573572854170793, 0.045497513425529545, 0.03997701297672107, 0.010643411704069683, 0.0079489734192153, 0.01605245520194387, 0.018524541061695876, 0.006548313520828741, 0.02466987950999011, 0.03564642726679035, 0.046576283254765816, 0.027850402861561818, 0.02394760885235847, 0.011278993471182552, 0.01921633409180301, 0.005739374750768023, 0.00656173957457562, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.04720578031751099, 0.0638860334912611, 0.048986754550083944, 0.05483073205067157, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06267533099385414, 0.018634452257363043, 0.050575667143735736, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.11505304783895776, 0.09062747232389023, 0.09019419350842073, 0.09180282964414566, 0.04098725659427904, 0.03445339952857562, 0.11034297831675266, 0.05931056463008866, 0.10216404243437682, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04742337945384156, 0.035468775732226954, 0.045736459931635554, 0.058537346471358664, 0.04781239157149464, 0.0280618962585657, 0.048580742366548524, 0.014845702863376387, 0.03252612515849873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10765468056468941, 0.05113217117225044, 0.09469242549222168, 0.06525660054138038, 0.05665538740178655, 0.057032852814499546, 0.08389419378369423, 0.06399319104118095, 0.026312461853078672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17323788894496062, 0.14154700861582536, 0.14838054695461433, 0.15188698394833378, 0.11045659476000513, 0.10958974387871656, 0.1499676012876875, 0.1387618113484923, 0.15627870923436782, 0.018638213130144687, 0.04001174340942648, 0.007729048610944256, 0.03239948842827267, 0.038392963748794307, 0.046410824446838306, 0.034858074782384785, 0.026618797315206555, 0.0335940812747334, 0.12494947797737, 0.11795498767092616, 0.11343909059899782, 0.11138604062155177, 0.13088506016587598, 0.13135715322750852, 0.13233002348040468, 0.14428898598865803, 0.10787060394082915, 0.13297616523402545, 0.14387710274687215, 0.14908500921935208, 0.14436992549135885, 0.14252716981334812, 0.14122312443134355, 0.163067271120528, 0.17377774300845283, 0.1372273653482371, 0.06858548706643197, 0.08063786135605455, 0.09638262092374805, 0.09372301675162165, 0.09681963143563166, 0.07840263057574415, 0.09343542299181662, 0.12898678353821602, 0.07604530286937172, 0.15299195937527987, 0.15664190186559568, 0.1594142623409729, 0.1931504882074362, 0.11984744565788075, 0.1475085488099066, 0.16485931149640598, 0.14114931294785094, 0.16514120040464586, 0.0693910240513762, 0.1256213608700083, 0.0014414469665443574, 0.14153528539592497, 0.14970605889512956, 0.12361483900056736, 0.15058484565596064, 0.15304119140682138, 0.13667272343373604, 0.13088150979587498, 0.10427374829790259, 0.1012138543841371, 0.13777071349935066, 0.12233176358927433, 0.1666037789231315, 0.0893285735853746, 0.12069350470206386, 0.1273464541646988, 0.09468627319664136, 0.10715818385573417, 0.1315067420486663, 0.08224111624626673, 0.08363260367645364, 0.07323999094071332, 0.11157057079682142, 0.12457922756179085, 0.09531834815285822, 0.19419616217912572, 0.1717683467211527, 0.19032528787513925, 0.193327166218779, 0.1724879977035989, 0.17779037221686178, 0.18694078825030624, 0.1863233145406159, 0.18243050136942385, 0.03412910214735365, 0.04084479538917152, 0.04216496024613203, 0.04842432211379333, 0.037056720794191644, 0.042404832899956446, 0.07163226496199226, 0.04042263183700001, 0.042473454985965664]}, "mutation_prompt": null}
