{"id": "ebe542bd-bb24-4474-bfd1-5e0d3bce14cf", "solution": "import numpy as np\n\nclass QuantumHarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, par=0.3, band=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.par = par\n        self.band = band\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def _initialize_population(self, size):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (size, self.dim))\n    \n    def _quantum_gates(self, population):\n        return np.where(np.random.rand(*population.shape) < 0.5, population, -population)\n    \n    def __call__(self, func):\n        population = self._initialize_population(50)\n        fitness = [func(ind) for ind in population]\n        \n        for _ in range(self.budget - 50):\n            new_member = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_member[i] = population[np.random.randint(len(population))][i]\n                else:\n                    new_member[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                    if np.random.rand() < self.par:\n                        new_member[i] += self.band * self._quantum_gates(population[:, i].reshape(-1, 1))[0][0]\n            new_fitness = func(new_member)\n            \n            if new_fitness < max(fitness):\n                idx = np.argmax(fitness)\n                population[idx] = new_member\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "QuantumHarmonySearch", "description": "Quantum-inspired Harmony Search algorithm that combines quantum computing principles with Harmony Search for black-box optimization.", "configspace": "", "generation": 0, "fitness": 0.17380829398233993, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.4434137975473892, 0.42224490172236917, 0.39031381214750904, 0.4165881873421007, 0.4282490084564491, 0.4583229044276813, 0.41992223535928985, 0.412520726690626, 0.4352613831818323, 0.10458746134469088, 0.004748849614678141, 0.11447655663314893, 0.16893627849691184, 0.022347248526905394, 0.03329846112297796, 0.06539833488510616, 0.03632427277277983, 0.028176383000845795, 0.1750027953386185, 0.17361632102905677, 0.20736123733005318, 0.1979238747590243, 0.23092431509143085, 0.1775905202740472, 0.18058066901347736, 0.2054732863304224, 0.18976892326912875, 0.15781852780072803, 0.160530030561158, 0.16944457254056433, 0.16088079555249402, 0.16382038801670828, 0.1386676073743014, 0.1454290125875939, 0.15069358754907425, 0.18944497335648613, 0.24273035336763737, 0.20138135991921946, 0.22356436531322843, 0.2399567405531393, 0.22342360910268844, 0.20032882491321025, 0.20128889273165973, 0.21551986153542568, 0.1928640726062535, 0.14275070654168664, 0.17361238889229824, 0.21050972099891152, 0.23631970061536034, 0.15729785045647893, 0.19418435555566482, 0.14750213356680053, 0.16268875418619588, 0.15271530934723543, 0.19738930448567094, 0.2102181370396703, 0.21252517244365554, 0.24339111700145255, 0.26236540555703736, 0.27420901278274223, 0.1737754169694936, 0.23089412673122955, 0.23176694052498104, 0.1676197524185209, 0.17582118846064132, 0.1774386044823052, 0.13608559861296632, 0.13365723713282862, 0.12324016534935023, 0.1767734123818716, 0.15443143733302678, 0.11941290470063615, 0.12627060085928932, 0.1282143880762605, 0.1177321666513732, 0.13467388705001382, 0.13989856409178514, 0.13108952204004365, 0.12348767319077125, 0.11818934098206102, 0.12255691976749639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07029589661553726, 0.08190200954723792, 0.08587914553650955, 0.08223361830702802, 0.057906005509177016, 0.0892577520616531, 0.10012393965949573, 0.05832943886288722, 0.07865597621390441, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0066312914553271485, 9.999999999998899e-05, 0.06074578157233412, 0.10740341923413599, 0.06119525805007342, 0.06360307660985631, 0.13065921015597015, 0.09707794813371762, 0.06976193158484423, 0.06858204854701, 0.0683169164849764, 0.364733624831733, 0.34878071920487086, 0.36334752787828206, 0.38632590885325, 0.3525550638312911, 0.35445273163765645, 0.3841891525977882, 0.40217791730425745, 0.39833568154258436, 0.08773825236368593, 0.10828006454940187, 0.08447822458977261, 0.09308388829171566, 0.08101635635052573, 0.08751850241659631, 0.09868854113096825, 0.08596866376265466, 0.08934122194608152, 0.16294134943540173, 0.12830227085891566, 0.15103405218196253, 0.14124197962268448, 0.15100070440557134, 0.14993124588994, 0.1584548880709774, 0.15788398455682695, 0.13556140189018406, 0.22775011707251192, 0.268553274294547, 0.24975416633397796, 0.2333527269309047, 0.21875210292595237, 0.2678600820014764, 0.26264169862006415, 0.29010056171635357, 0.29107483224678565, 0.17722385113652162, 0.2092378567941654, 0.1868341206743216, 0.1843913978030398, 0.18585477106556458, 0.19755558951414054, 0.20701745029130803, 0.2147138632957435, 0.22493486895359305, 0.2053341975829437, 0.1989912762704963, 0.18202600739616925, 0.18269366541053422, 0.23544335650673165, 0.19346218988253072, 0.19581274828835937, 0.20034674387344498, 0.20005550328729982, 0.1976074762795712, 0.22200907036752793, 0.2498542433288954, 0.2924489447084072, 0.2126756273066709, 0.26113981835663935, 0.19164871476561451, 0.22016403925557193, 0.2149910979953774, 0.17406760709655134, 0.1812275181331745, 0.3182764681873419, 0.19197389941053322, 0.3795571361967309, 0.36954853553622447, 0.3155952087194097, 0.53080414437134, 0.2050297346157972, 0.1961264863760096, 0.16561749070569876, 0.28960145112005875, 0.2033706411091043, 0.29932946884991607, 0.18972848431110712, 0.11184908711117847, 0.25648695618332806, 0.2704812296835456, 0.17550846253122032, 0.18605641108487125, 0.19468042106952388, 0.19181789180821363, 0.17107707471765843, 0.1883236149262031, 0.17736463973516525, 0.1987957552647711, 0.19382650985638938, 0.07256331973334984, 0.07046114270583403, 0.08260785112679281, 0.07400333123321101, 0.07709689475477388, 0.0570439938794014, 0.07805934442242557, 0.0796727090453162, 0.08115870953431625]}, "mutation_prompt": null}
{"id": "e5c315b7-f2b7-4c5b-9f2b-988f044427b5", "solution": "import numpy as np\n\nclass ImprovedQuantumHarmonySearch:\n    def __init__(self, budget, dim, hmcr=0.7, par=0.3, band=0.01, de_weight=0.5, de_crossp=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = hmcr\n        self.par = par\n        self.band = band\n        self.de_weight = de_weight\n        self.de_crossp = de_crossp\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def _initialize_population(self, size):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (size, self.dim))\n    \n    def _quantum_gates(self, population):\n        return np.where(np.random.rand(*population.shape) < 0.5, population, -population)\n    \n    def _differential_evolution(self, population, f):\n        mutant = population[np.random.choice(len(population), 3, replace=False)]\n        v = population[np.argmin(f)] + self.de_weight * (mutant[0] - mutant[1])\n        for i in range(self.dim):\n            if np.random.rand() > self.de_crossp:\n                v[i] = mutant[2][i]\n            if v[i] < self.lower_bound:\n                v[i] = self.lower_bound\n            elif v[i] > self.upper_bound:\n                v[i] = self.upper_bound\n        return v\n    \n    def __call__(self, func):\n        population = self._initialize_population(50)\n        fitness = [func(ind) for ind in population]\n        \n        for _ in range(self.budget - 50):\n            new_member = np.zeros(self.dim)\n            \n            if np.random.rand() < self.hmcr:\n                new_member = population[np.random.randint(len(population))]\n            else:\n                new_member = self._differential_evolution(population, fitness)\n                \n            new_member += np.where(np.random.rand(self.dim) < self.par, self.band * self._quantum_gates(population), 0)\n            new_fitness = func(new_member)\n            \n            if new_fitness < max(fitness):\n                idx = np.argmax(fitness)\n                population[idx] = new_member\n                fitness[idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedQuantumHarmonySearch", "description": "Improved QuantumHarmonySearch algorithm by incorporating Differential Evolution to enhance exploration capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: ValueError(\"non-broadcastable output operand with shape (5,) doesn't match the broadcast shape (50,5)\").", "error": "ValueError(\"non-broadcastable output operand with shape (5,) doesn't match the broadcast shape (50,5)\")", "parent_id": "ebe542bd-bb24-4474-bfd1-5e0d3bce14cf", "metadata": {}, "mutation_prompt": null}
