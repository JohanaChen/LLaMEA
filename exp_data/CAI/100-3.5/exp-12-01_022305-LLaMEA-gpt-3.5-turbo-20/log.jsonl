{"id": "74e80785-a88a-45eb-a4e6-ca4ea49585a2", "solution": "import numpy as np\n\nclass AdaptiveCuckooSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pa = 0.25\n        self.alpha = 1.5\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        s = np.random.normal(0, 1, self.dim)\n        u = np.random.normal(0, sigma, self.dim)\n        v = s / (abs(u) ** (1 / beta))\n        step = 0.01 * v\n        return step\n\n    def __call__(self, func):\n        def generate_cuckoo(nest):\n            new_nest = nest + self.levy_flight()\n            return np.clip(new_nest, -5.0, 5.0)\n\n        def replace_worst(nests, new_nest):\n            idx = np.argmax([func(nest) for nest in nests])\n            nests[idx] = new_nest\n            return nests\n\n        nests = np.random.uniform(-5.0, 5.0, (self.alpha*10, self.dim))\n        nests_fit = np.array([func(nest) for nest in nests])\n        best_nest = nests[np.argmin(nests_fit)]\n\n        for _ in range(self.budget):\n            idx = np.random.randint(self.alpha*10)\n            new_nest = generate_cuckoo(nests[idx])\n            new_fit = func(new_nest)\n            if new_fit < nests_fit[idx]:\n                nests_fit[idx] = new_fit\n                nests = replace_worst(nests, new_nest)\n                best_nest = new_nest if new_fit < func(best_nest) else best_nest\n                \n        return best_nest", "name": "AdaptiveCuckooSearch", "description": "An Adaptive Cuckoo Search Algorithm for Black Box Optimization", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "An exception occured: Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 29, in __call__\n  File \"mtrand.pyx\", line 1141, in numpy.random.mtrand.RandomState.uniform\n  File \"_common.pyx\", line 636, in numpy.random._common.cont\nTypeError: 'float' object cannot be interpreted as an integer\n.", "error": "TypeError(\"'float' object cannot be interpreted as an integer\")Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 29, in __call__\n  File \"mtrand.pyx\", line 1141, in numpy.random.mtrand.RandomState.uniform\n  File \"_common.pyx\", line 636, in numpy.random._common.cont\nTypeError: 'float' object cannot be interpreted as an integer\n", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "fa235c6f-acc8-467a-b5a4-7c149fbe26e5", "solution": "import numpy as np\n\nclass DynamicStepSizeACS(AdaptiveCuckooSearch):\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta\n        s = np.random.normal(0, 1, self.dim)\n        u = np.random.normal(0, sigma, self.dim)\n        v = s / (abs(u) ** (1 / beta))\n        step = 0.01 * v\n        step_size = 0.1 + np.random.rand() * 0.9  # Dynamic step size adaptation\n        return step * step_size", "name": "DynamicStepSizeACS", "description": "Refinement of the Adaptive Cuckoo Search algorithm by introducing dynamic step size adaptation for Levy flights.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 7, 9, '        s = np.random.normal(0, 1, self.dim)\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 7, 9, '        s = np.random.normal(0, 1, self.dim)\\n'))", "parent_id": "74e80785-a88a-45eb-a4e6-ca4ea49585a2", "metadata": {}, "mutation_prompt": null}
