{"id": "d13d19c6-ef92-4f28-bced-470765f0178b", "solution": "import numpy as np\n\nclass SSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step\n        \n        def spider_move(spider_pos, best_pos):\n            new_pos = spider_pos + levy_flight() * (best_pos - spider_pos)\n            return np.clip(new_pos, -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness_values = np.apply_along_axis(func, 1, population)\n        best_pos = population[np.argmin(fitness_values)]\n\n        for _ in range(self.iterations):\n            for i, spider_pos in enumerate(population):\n                new_pos = spider_move(spider_pos, best_pos)\n                new_fitness = func(new_pos)\n                if new_fitness < fitness_values[i]:\n                    population[i] = new_pos\n                    fitness_values[i] = new_fitness\n                    if new_fitness < func(best_pos):\n                        best_pos = new_pos\n\n        return best_pos", "name": "SSO", "description": "Novel algorithm based on Social Spider Optimization (SSO) for black box optimization problems.", "configspace": "", "generation": 0, "fitness": 0.09773385735787528, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.1181600315198501, 0.24459743568048675, 0.2913212089077917, 0.03769117897116647, 0.2128730310274024, 0.19205455687348505, 0.2051204384987897, 0.19070412273993576, 0.22304259655426195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02743401632755449, 0.043870920472761865, 0.028157968559367696, 0.025802104691115213, 0.06754137599556431, 0.036145942401, 0.06879512549009437, 0.01879823811354786, 0.054905767204814215, 0.04472481409031537, 9.999999999998899e-05, 0.029581954750617312, 0.04321143471974409, 9.999999999998899e-05, 0.012099485977743685, 0.007147464539080439, 0.004148857688652585, 9.999999999998899e-05, 0.07475763502989463, 0.05003176132885856, 0.9802175486076126, 0.09921740733525186, 0.0750028504454926, 0.07490532651097981, 0.9763077753114997, 0.99057517091558, 0.05559093546716576, 0.06317574710881069, 0.010600573844525174, 0.015998128882887208, 0.06496651229718098, 0.04625286792736372, 0.030742167491302985, 0.0707900972810589, 0.0357101862112601, 9.999999999998899e-05, 0.11179062029791931, 0.09802765840868666, 0.09718303715755561, 0.07947174280372782, 0.009750648814792151, 0.06036630688870248, 0.05926691730930256, 0.09199980430144494, 0.22207787569205162, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07049044890490308, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032001325683327364, 9.999999999998899e-05, 9.999999999998899e-05, 0.06255821309370546, 0.07289853454407891, 9.999999999998899e-05, 9.999999999998899e-05, 0.07438584812050941, 9.999999999998899e-05, 9.999999999998899e-05, 0.07984574907325881, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.081970249556506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0865927585784877, 0.022994655594186897, 0.07480185234665315, 0.06455625924056418, 9.999999999998899e-05, 0.020274732486008307, 0.15648432606437468, 0.022120595764998696, 0.02105671636778439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002937935956144777, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18989456194580245, 0.1953073249750613, 0.22036868528820308, 0.10990709127428144, 0.23504008928227615, 0.1700439090733502, 0.14218900155084846, 0.3505063626582283, 0.27167600122266566, 0.024125025493256125, 0.052163237250342886, 0.041776816286523855, 0.04653729908582738, 0.051921750248770104, 0.052128689465281264, 0.05505404381073131, 0.04693712445946985, 0.05997633208408859, 0.10772128815222315, 0.14404792587655868, 0.11896141198429722, 0.19614583119981077, 0.1543901008098102, 0.16385791496670332, 0.10607059308545974, 0.089484847208956, 0.2308300252748794, 0.14620020936270917, 0.1457772476591621, 0.1313797176800381, 0.18179423651733506, 0.16726386777972824, 0.16029766374369614, 0.14125246425886984, 0.14985522439819, 0.19100321538375975, 0.10366446008694696, 0.13275406746944318, 0.0697944465560798, 0.08066676463720801, 0.11147684113335687, 0.14811757428933892, 0.08638722215318884, 0.12743087954467247, 0.10776523247541903, 0.247093662788745, 0.17754806004428048, 0.17953215731364558, 0.19500364204794596, 0.21280687042365087, 0.22119488855381386, 0.20091084879563437, 0.19855928058560846, 0.24426420300777119, 0.15061254557439718, 0.20939627711738096, 0.17631397757120015, 0.16427853730463282, 0.1556363220440128, 0.15051835713369388, 0.1643893666615024, 0.15299570683733632, 9.999999999998899e-05, 0.13567755002744541, 0.0899375063536958, 0.10806295516098385, 0.16947679447914088, 0.1674761391534454, 0.12882126045863918, 0.1227540689768446, 0.14838095313360555, 0.11303975450939541, 0.16805882517000914, 0.08264495410465311, 0.0647689416733761, 0.11095751403303389, 0.05044953727611412, 0.09186836287058364, 0.04961548570443752, 0.08308153769022741, 0.11495088460722713, 0.1780956261380312, 0.19831415266593078, 0.18435952905221975, 0.18007648840713386, 0.16233143398853278, 0.16688017802251764, 0.2081499306406006, 0.18556938290727798, 0.18989464284763702, 0.05445190228438446, 0.06809620885030765, 0.06930653008693133, 0.046213712140252716, 0.05391867421324381, 0.06549769656924509, 0.05545252546024326, 0.06139047008531362, 0.04761417976875015]}, "mutation_prompt": null}
{"id": "339ee817-e096-4fac-98e5-975615281a3b", "solution": "import numpy as np\n\nclass SSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.iterations = budget // self.population_size\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma)\n            v = np.random.normal(0, 1)\n            step = u / abs(v) ** (1 / beta)\n            return step\n        \n        def spider_move(spider_pos, best_pos):\n            new_pos = spider_pos + levy_flight() * (best_pos - spider_pos)\n            return np.clip(new_pos, -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness_values = np.apply_along_axis(func, 1, population)\n        best_pos = population[np.argmin(fitness_values)]\n\n        for _ in range(self.iterations):\n            for i, spider_pos in enumerate(population):\n                new_pos = spider_move(spider_pos, best_pos)\n                new_fitness = func(new_pos)\n                if new_fitness < fitness_values[i]:\n                    population[i] = new_pos\n                    fitness_values[i] = new_fitness\n                    if new_fitness < func(best_pos):\n                        best_pos = new_pos\n\n        return best_pos", "name": "SSO", "description": "Novel algorithm based on Social Spider Optimization (SSO) for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d13d19c6-ef92-4f28-bced-470765f0178b", "metadata": {"aucs": [0.1181600315198501, 0.24459743568048675, 0.2913212089077917, 0.03769117897116647, 0.2128730310274024, 0.19205455687348505, 0.2051204384987897, 0.19070412273993576, 0.22304259655426195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02743401632755449, 0.043870920472761865, 0.028157968559367696, 0.025802104691115213, 0.06754137599556431, 0.036145942401, 0.06879512549009437, 0.01879823811354786, 0.054905767204814215, 0.04472481409031537, 9.999999999998899e-05, 0.029581954750617312, 0.04321143471974409, 9.999999999998899e-05, 0.012099485977743685, 0.007147464539080439, 0.004148857688652585, 9.999999999998899e-05, 0.07475763502989463, 0.05003176132885856, 0.9802175486076126, 0.09921740733525186, 0.0750028504454926, 0.07490532651097981, 0.9763077753114997, 0.99057517091558, 0.05559093546716576, 0.06317574710881069, 0.010600573844525174, 0.015998128882887208, 0.06496651229718098, 0.04625286792736372, 0.030742167491302985, 0.0707900972810589, 0.0357101862112601, 9.999999999998899e-05, 0.11179062029791931, 0.09802765840868666, 0.09718303715755561, 0.07947174280372782, 0.009750648814792151, 0.06036630688870248, 0.05926691730930256, 0.09199980430144494, 0.22207787569205162, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07049044890490308, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032001325683327364, 9.999999999998899e-05, 9.999999999998899e-05, 0.06255821309370546, 0.07289853454407891, 9.999999999998899e-05, 9.999999999998899e-05, 0.07438584812050941, 9.999999999998899e-05, 9.999999999998899e-05, 0.07984574907325881, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.081970249556506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0865927585784877, 0.022994655594186897, 0.07480185234665315, 0.06455625924056418, 9.999999999998899e-05, 0.020274732486008307, 0.15648432606437468, 0.022120595764998696, 0.02105671636778439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002937935956144777, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18989456194580245, 0.1953073249750613, 0.22036868528820308, 0.10990709127428144, 0.23504008928227615, 0.1700439090733502, 0.14218900155084846, 0.3505063626582283, 0.27167600122266566, 0.024125025493256125, 0.052163237250342886, 0.041776816286523855, 0.04653729908582738, 0.051921750248770104, 0.052128689465281264, 0.05505404381073131, 0.04693712445946985, 0.05997633208408859, 0.10772128815222315, 0.14404792587655868, 0.11896141198429722, 0.19614583119981077, 0.1543901008098102, 0.16385791496670332, 0.10607059308545974, 0.089484847208956, 0.2308300252748794, 0.14620020936270917, 0.1457772476591621, 0.1313797176800381, 0.18179423651733506, 0.16726386777972824, 0.16029766374369614, 0.14125246425886984, 0.14985522439819, 0.19100321538375975, 0.10366446008694696, 0.13275406746944318, 0.0697944465560798, 0.08066676463720801, 0.11147684113335687, 0.14811757428933892, 0.08638722215318884, 0.12743087954467247, 0.10776523247541903, 0.247093662788745, 0.17754806004428048, 0.17953215731364558, 0.19500364204794596, 0.21280687042365087, 0.22119488855381386, 0.20091084879563437, 0.19855928058560846, 0.24426420300777119, 0.15061254557439718, 0.20939627711738096, 0.17631397757120015, 0.16427853730463282, 0.1556363220440128, 0.15051835713369388, 0.1643893666615024, 0.15299570683733632, 9.999999999998899e-05, 0.13567755002744541, 0.0899375063536958, 0.10806295516098385, 0.16947679447914088, 0.1674761391534454, 0.12882126045863918, 0.1227540689768446, 0.14838095313360555, 0.11303975450939541, 0.16805882517000914, 0.08264495410465311, 0.0647689416733761, 0.11095751403303389, 0.05044953727611412, 0.09186836287058364, 0.04961548570443752, 0.08308153769022741, 0.11495088460722713, 0.1780956261380312, 0.19831415266593078, 0.18435952905221975, 0.18007648840713386, 0.16233143398853278, 0.16688017802251764, 0.2081499306406006, 0.18556938290727798, 0.18989464284763702, 0.05445190228438446, 0.06809620885030765, 0.06930653008693133, 0.046213712140252716, 0.05391867421324381, 0.06549769656924509, 0.05545252546024326, 0.06139047008531362, 0.04761417976875015]}, "mutation_prompt": null}
