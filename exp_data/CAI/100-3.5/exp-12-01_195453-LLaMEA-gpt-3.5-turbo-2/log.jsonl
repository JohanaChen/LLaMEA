{"id": "d41cfd2c-5eb1-409a-ae7e-5642b1c44235", "solution": "import numpy as np\n\nclass HybridPSO_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        def pso_sa_optimizer():\n            # PSO initialization\n            swarm_size = 20\n            max_iter = 100\n            inertia_weight = 0.5\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            p_best_pos = np.random.uniform(-5.0, 5.0, (swarm_size, self.dim))\n            p_best_val = np.full((swarm_size,), np.inf)\n            g_best_pos = np.zeros(self.dim)\n            g_best_val = np.inf\n            velocities = np.zeros((swarm_size, self.dim))\n            \n            # SA initialization\n            initial_temp = 100.0\n            final_temp = 0.1\n            cooling_rate = 0.95\n            curr_temp = initial_temp\n            curr_pos = np.random.uniform(-5.0, 5.0, self.dim)\n            best_pos = curr_pos\n            best_val = np.inf\n            \n            for _ in range(max_iter):\n                for i in range(swarm_size):\n                    # PSO update\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_weight * np.random.rand() * (p_best_pos[i] - curr_pos) + social_weight * np.random.rand() * (g_best_pos - curr_pos)\n                    curr_pos = curr_pos + velocities[i]\n                    \n                    # SA update\n                    new_pos = curr_pos + np.random.normal(0, 0.1, self.dim)\n                    if func(new_pos) < func(curr_pos) or np.random.rand() < np.exp((func(curr_pos) - func(new_pos)) / curr_temp):\n                        curr_pos = new_pos\n                    curr_temp = curr_temp * cooling_rate\n                    \n                    # Update PSO best\n                    curr_val = func(curr_pos)\n                    if curr_val < p_best_val[i]:\n                        p_best_val[i] = curr_val\n                        p_best_pos[i] = curr_pos\n                    if curr_val < best_val:\n                        best_val = curr_val\n                        best_pos = curr_pos\n                if best_val < g_best_val:\n                    g_best_val = best_val\n                    g_best_pos = best_pos\n                \n            return g_best_pos\n        \n        return pso_sa_optimizer()", "name": "HybridPSO_SA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to explore the search space efficiently and exploit promising regions effectively.", "configspace": "", "generation": 0, "fitness": 0.07917842345762754, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.18499702595069623, 0.09671727599326574, 0.14289288596574568, 0.055075150823882146, 0.025651442818737213, 0.07735028213424444, 0.06385890411306794, 0.052281707010501166, 0.07235273434637368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007223877612177465, 0.01724285214807353, 0.01775710837502087, 0.012632867236524348, 0.008369425637756667, 0.009180462140541912, 0.0, 0.0, 0.0, 0.0, 0.00543966143501351, 0.02971113996328023, 0.0, 0.01715889776740298, 0.003031312932913033, 0.0, 7.413365527098037e-05, 0.0, 0.9709492947069852, 0.12950515645509764, 0.9615811742385967, 0.9889922976348268, 0.9413586330626289, 0.9856696378996401, 0.9043143562300349, 0.9708190145767244, 0.9844247367665081, 0.0, 0.0, 0.014731101055210694, 0.0, 0.008404988290026116, 0.03123580245196167, 0.0, 0.0, 0.0, 0.13315193873609765, 0.003924603222929868, 0.10014500148219818, 0.0, 0.005130998839667833, 0.053705072682134425, 0.0, 0.0015287513168479316, 0.037143830233797415, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.013940297541253699, 0.0, 0.01674511301752646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.022797037590129188, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.17526458716549642, 0.08029329889659342, 0.15948416168346158, 0.09664813011815965, 0.1049404925400721, 0.12446899550930379, 0.14358866397598735, 0.13071354580925076, 0.13655709393869453, 0.0, 0.0, 0.017170861485018007, 0.0, 0.0, 0.0, 0.011499610080243139, 0.008196405492521097, 0.010718932562633232, 0.06971193449721846, 0.08929228442563397, 0.09024383333934871, 0.04898015936971911, 0.05964536052647995, 0.11519499638199726, 0.08493928552661945, 0.08040262054856961, 0.09973160033448258, 0.11345348295112712, 0.11004062492655753, 0.11611050597673511, 0.11286301526604459, 0.1158249346561463, 0.14272504156843735, 0.12153431451882701, 0.11137932985743426, 0.12486182063849571, 0.05842291682511791, 0.055451131510441676, 0.054601691665426055, 0.06640504058452368, 0.05527766586412475, 0.044580732282919255, 0.05279649205471282, 0.051979717461714925, 0.05651463258584377, 0.13724059223266416, 0.10676443721729678, 0.1304122213915072, 0.1171005029449732, 0.14069212654140806, 0.14145814748862373, 0.1377015881764322, 0.10719213169200192, 0.12626432577600866, 0.0, 0.0, 0.13407153181079867, 0.1293448711651075, 0.1350670128652377, 0.13895928212902986, 0.0, 0.0, 0.1273569668253003, 0.11931426987202176, 0.08734395394273087, 0.15228537089776606, 0.06586264505009598, 0.06394513302611016, 0.08749823633651999, 0.054634605995489305, 0.05645369118810417, 0.030362781069394496, 0.07369965616008844, 0.04977235282857839, 0.03319529014377165, 0.04875476482167418, 0.04765910462218348, 0.020678227943243255, 0.03590625242311818, 0.015435042324775328, 0.017761772193833125, 0.21027806398401316, 0.1068673632220376, 0.1555205816149985, 0.1317733418459226, 0.12634160895137014, 0.14550548100563188, 0.12935081578397511, 0.12967732261041276, 0.17016371177767575, 0.030559781223413296, 0.018294975140902947, 0.03265502196276571, 0.033653073565072966, 0.018904998478383117, 0.026819532149195413, 0.01561621769237076, 0.036125787736854154, 0.032534967513216495]}, "mutation_prompt": null}
{"id": "bace56ab-69ac-4357-a3e7-c4ac9b5bb591", "solution": "import numpy as np\n\nclass HybridPSO_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        def pso_sa_optimizer():\n            # PSO initialization\n            swarm_size = 20\n            max_iter = 100\n            inertia_weight = 0.5\n            cognitive_weight = 1.5\n            social_weight = 1.5\n            p_best_pos = np.random.uniform(-5.0, 5.0, (swarm_size, self.dim))\n            p_best_val = np.full((swarm_size,), np.inf)\n            g_best_pos = np.zeros(self.dim)\n            g_best_val = np.inf\n            velocities = np.zeros((swarm_size, self.dim))\n            \n            # SA initialization\n            initial_temp = 100.0\n            final_temp = 0.1\n            cooling_rate = 0.95\n            curr_temp = initial_temp\n            curr_pos = np.random.uniform(-5.0, 5.0, self.dim)\n            best_pos = curr_pos\n            best_val = np.inf\n            \n            for _ in range(max_iter):\n                for i in range(swarm_size):\n                    # PSO update\n                    velocities[i] = inertia_weight * velocities[i] + cognitive_weight * np.random.rand() * (p_best_pos[i] - curr_pos) + social_weight * np.random.rand() * (g_best_pos - curr_pos)\n                    curr_pos = curr_pos + velocities[i]\n                    \n                    # SA update\n                    new_pos = curr_pos + np.random.normal(0, 0.1, self.dim)\n                    if func(new_pos) < func(curr_pos) or np.random.rand() < np.exp((func(curr_pos) - func(new_pos)) / curr_temp):\n                        curr_pos = new_pos\n                    curr_temp = curr_temp * cooling_rate\n                    \n                    # Update PSO best\n                    curr_val = func(curr_pos)\n                    if curr_val < p_best_val[i]:\n                        p_best_val[i] = curr_val\n                        p_best_pos[i] = curr_pos\n                    if curr_val < best_val:\n                        best_val = curr_val\n                        best_pos = curr_pos\n                if best_val < g_best_val:\n                    g_best_val = best_val\n                    g_best_pos = best_pos\n                \n            return g_best_pos\n        \n        return pso_sa_optimizer()", "name": "HybridPSO_SA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to explore the search space efficiently and exploit promising regions effectively.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d41cfd2c-5eb1-409a-ae7e-5642b1c44235", "metadata": {"aucs": [0.18499702595069623, 0.09671727599326574, 0.14289288596574568, 0.055075150823882146, 0.025651442818737213, 0.07735028213424444, 0.06385890411306794, 0.052281707010501166, 0.07235273434637368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007223877612177465, 0.01724285214807353, 0.01775710837502087, 0.012632867236524348, 0.008369425637756667, 0.009180462140541912, 0.0, 0.0, 0.0, 0.0, 0.00543966143501351, 0.02971113996328023, 0.0, 0.01715889776740298, 0.003031312932913033, 0.0, 7.413365527098037e-05, 0.0, 0.9709492947069852, 0.12950515645509764, 0.9615811742385967, 0.9889922976348268, 0.9413586330626289, 0.9856696378996401, 0.9043143562300349, 0.9708190145767244, 0.9844247367665081, 0.0, 0.0, 0.014731101055210694, 0.0, 0.008404988290026116, 0.03123580245196167, 0.0, 0.0, 0.0, 0.13315193873609765, 0.003924603222929868, 0.10014500148219818, 0.0, 0.005130998839667833, 0.053705072682134425, 0.0, 0.0015287513168479316, 0.037143830233797415, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.013940297541253699, 0.0, 0.01674511301752646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.022797037590129188, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.17526458716549642, 0.08029329889659342, 0.15948416168346158, 0.09664813011815965, 0.1049404925400721, 0.12446899550930379, 0.14358866397598735, 0.13071354580925076, 0.13655709393869453, 0.0, 0.0, 0.017170861485018007, 0.0, 0.0, 0.0, 0.011499610080243139, 0.008196405492521097, 0.010718932562633232, 0.06971193449721846, 0.08929228442563397, 0.09024383333934871, 0.04898015936971911, 0.05964536052647995, 0.11519499638199726, 0.08493928552661945, 0.08040262054856961, 0.09973160033448258, 0.11345348295112712, 0.11004062492655753, 0.11611050597673511, 0.11286301526604459, 0.1158249346561463, 0.14272504156843735, 0.12153431451882701, 0.11137932985743426, 0.12486182063849571, 0.05842291682511791, 0.055451131510441676, 0.054601691665426055, 0.06640504058452368, 0.05527766586412475, 0.044580732282919255, 0.05279649205471282, 0.051979717461714925, 0.05651463258584377, 0.13724059223266416, 0.10676443721729678, 0.1304122213915072, 0.1171005029449732, 0.14069212654140806, 0.14145814748862373, 0.1377015881764322, 0.10719213169200192, 0.12626432577600866, 0.0, 0.0, 0.13407153181079867, 0.1293448711651075, 0.1350670128652377, 0.13895928212902986, 0.0, 0.0, 0.1273569668253003, 0.11931426987202176, 0.08734395394273087, 0.15228537089776606, 0.06586264505009598, 0.06394513302611016, 0.08749823633651999, 0.054634605995489305, 0.05645369118810417, 0.030362781069394496, 0.07369965616008844, 0.04977235282857839, 0.03319529014377165, 0.04875476482167418, 0.04765910462218348, 0.020678227943243255, 0.03590625242311818, 0.015435042324775328, 0.017761772193833125, 0.21027806398401316, 0.1068673632220376, 0.1555205816149985, 0.1317733418459226, 0.12634160895137014, 0.14550548100563188, 0.12935081578397511, 0.12967732261041276, 0.17016371177767575, 0.030559781223413296, 0.018294975140902947, 0.03265502196276571, 0.033653073565072966, 0.018904998478383117, 0.026819532149195413, 0.01561621769237076, 0.036125787736854154, 0.032534967513216495]}, "mutation_prompt": null}
