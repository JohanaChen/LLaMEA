{"id": "4f363214-7138-4d79-afee-7f6cc3032629", "solution": "import numpy as np\n\nclass AdaptiveCuckooSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.pa = 0.25\n        self.nests = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_nest = self.nests[np.argmax([func(nest) for nest in self.nests])]\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_nests = self.nests.copy()\n            for i in range(self.population_size):\n                step_size = 0.01 + 0.9 * (_ / self.budget)\n                step = step_size * np.random.randn(self.dim)\n                cuckoo = self.nests[i] + step\n                cuckoo = np.clip(cuckoo, -5.0, 5.0)\n                if func(cuckoo) < func(self.nests[i]) and np.random.rand() < self.pa:\n                    new_nests[i] = cuckoo\n            new_nests[np.argmax([func(nest) for nest in new_nests])] = self.best_nest\n            self.nests = new_nests\n            self.best_nest = self.nests[np.argmax([func(nest) for nest in self.nests])]\n        return self.best_nest", "name": "AdaptiveCuckooSearch", "description": "An adaptive cuckoo search algorithm with dynamic step size to efficiently explore the search space and exploit promising regions while adapting the search behavior during optimization.", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "An exception occured: Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 50, in evaluateBBOB\n    algorithm = globals()[algorithm_name](\n  File \"<string>\", line 10, in __init__\n  File \"<string>\", line 10, in <listcomp>\nNameError: name 'func' is not defined\n.", "error": "NameError(\"name 'func' is not defined\")Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 50, in evaluateBBOB\n    algorithm = globals()[algorithm_name](\n  File \"<string>\", line 10, in __init__\n  File \"<string>\", line 10, in <listcomp>\nNameError: name 'func' is not defined\n", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "87f16f29-b6ac-4607-aeb4-9d165fb68e0e", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.pa = 0.25\n        self.nests = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.best_nest = self.nests[np.argmax([func(nest) for nest in self.nests])]\n\n    def levy_flight(self, dim):\n        beta = 1.5\n        sigma = (gamma(1 + beta) * np.sin(np.pi * beta / 2) / (gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.randn(dim) * sigma\n        v = np.random.randn(dim)\n        step = u / abs(v) ** (1 / beta)\n        return 0.01 * step\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_nests = self.nests.copy()\n            for i in range(self.population_size):\n                if np.random.rand() > self.pa:\n                    step = self.levy_flight(self.dim)\n                else:\n                    step_size = 0.01 + 0.9 * (_ / self.budget)\n                    step = step_size * np.random.randn(self.dim)\n                cuckoo = self.nests[i] + step\n                cuckoo = np.clip(cuckoo, -5.0, 5.0)\n                if func(cuckoo) < func(self.nests[i]):\n                    new_nests[i] = cuckoo\n            new_nests[np.argmax([func(nest) for nest in new_nests])] = self.best_nest\n            self.nests = new_nests\n            self.best_nest = self.nests[np.argmax([func(nest) for nest in self.nests])]\n        return self.best_nest", "name": "EnhancedCuckooSearch", "description": "Enhancing the adaptive cuckoo search algorithm by incorporating a levy flight step for improved exploration capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'func' is not defined\").", "error": "NameError(\"name 'func' is not defined\")", "parent_id": "4f363214-7138-4d79-afee-7f6cc3032629", "metadata": {}, "mutation_prompt": null}
