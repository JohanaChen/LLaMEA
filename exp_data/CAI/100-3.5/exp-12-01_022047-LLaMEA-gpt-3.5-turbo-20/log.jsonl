{"id": "3a8d3101-081d-4cc4-bb90-a45f7c076ddc", "solution": "import numpy as np\n\nclass HarmonySearchAMEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = 10\n        self.bandwidth = 0.01\n        self.par_min = 0.3\n        self.par_max = 0.9\n        self.hmCR = 0.95\n        self.evap_rate = 0.7\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n        def explore_new_solution(harmony_memory):\n            new_solution = np.zeros(self.dim)\n            for d in range(self.dim):\n                r = np.random.rand()\n                if r < self.hmCR:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[d] = harmony_memory[idx, d]\n                else:\n                    new_solution[d] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        for _ in range(self.budget):\n            new_harmony = explore_new_solution(harmony_memory)\n            new_fitness = objective_function(new_harmony)\n            if best_solution is None or new_fitness < objective_function(best_solution):\n                best_solution = new_harmony.copy()\n            worst_idx = np.argmax([objective_function(h) for h in harmony_memory])\n            if new_fitness < objective_function(harmony_memory[worst_idx]):\n                harmony_memory[worst_idx] = new_harmony\n            harmony_memory = harmony_memory * (1 - self.evap_rate) + best_solution * self.evap_rate\n        return best_solution", "name": "HarmonySearchAMEA", "description": "A novel metaheuristic algorithm named \"Harmony Search with Adaptive Memory and Evolutionary Strategy\" that combines the Harmony Search algorithm with adaptive memory and evolutionary strategy for improved optimization performance.", "configspace": "", "generation": 0, "fitness": 0.08409466123950408, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.21807118838938222, 0.25096752884196016, 0.27575635955797984, 0.2637621162768884, 0.2848440178412671, 0.19093294771242275, 0.1948858362865532, 0.227509870508521, 0.22945829583896016, 0.0001440515088914074, 0.001482583161858786, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0835367487291383, 0.09284717388740815, 0.08330007484404467, 0.06793248598295998, 0.07552764618834829, 0.07977479245577856, 0.06318739326282263, 0.05651426398965398, 0.08833925441350599, 0.07233461593790746, 0.05791663697072924, 0.06925980508609175, 0.08701316823400596, 0.06863938510060852, 0.0692744597010082, 0.024698901219407654, 0.04741533102021911, 0.045971417399100045, 0.09739072714508656, 0.0823901525566394, 0.09420131869208814, 0.11640758687434194, 0.07928600246401551, 0.12778647874338933, 0.11750235036980017, 0.08157320977203542, 0.11871138719988505, 0.07323551031587117, 0.0815935246278564, 0.0404458334986999, 0.0021027277830084623, 0.01946145723071291, 0.047114627954476185, 0.08668994104680372, 0.06241569045965134, 0.05834345152386888, 0.10026681181215302, 0.08068561790297046, 0.02558971481843053, 0.10590650042599448, 0.1448258950847996, 0.09821495698545712, 0.1626731811718498, 0.10443114499365236, 0.08368078459180228, 0.007435783388261563, 0.004861735575808823, 0.05010068583053284, 0.0003280881947881342, 0.00853127507682927, 0.05894548486175499, 0.08463069721110916, 0.02754153255629377, 0.04411897880482374, 9.999999999998899e-05, 9.999999999998899e-05, 0.061775822640268596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03843952854368404, 0.02743864490098713, 0.048928657462533165, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03469870562096089, 0.045604998121855145, 0.012728213530963095, 0.00807822716251283, 0.03270701712556878, 0.03632206466397858, 0.05913852029340538, 0.006503738307978013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05052236823840739, 0.000193084284481837, 0.006077124761895369, 0.03349861232295048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21764020469362955, 0.25267759914784793, 0.2580559556745615, 0.19410967316952932, 0.2688699817206013, 0.241380093416678, 0.17815979507836, 0.22798538082554243, 0.2517508018749801, 0.03415876549581098, 0.05534098509923169, 0.0342605730036416, 0.028052574132100383, 0.0142152957488757, 0.06011570045499193, 0.010915680573599484, 0.03270755165039152, 0.026943329644268488, 0.0869096477755067, 0.07921517940123612, 0.17703085027412235, 0.11207772427761686, 0.12455326554503243, 0.10450350304788569, 0.08076037642282008, 0.11342757095855616, 0.09633978540857957, 0.13365817478965214, 0.12624697600263568, 0.1385624616748663, 0.1194198986834144, 0.12690577232875289, 0.20604369832979663, 0.1508959361164698, 0.14474569258854075, 0.11602504085458654, 0.06541269678677819, 0.10218246002584108, 0.06654751576918516, 0.064019515338269, 0.0720883920328721, 0.08972109973739884, 0.06434594910536162, 0.10327285761056426, 0.07839076247164611, 0.13069598410431826, 0.12875484089575473, 0.12958958516049535, 0.14727074123720418, 0.12532272088981278, 0.1140354346159802, 0.15878425913932692, 0.14738472515715673, 0.13307119896294228, 0.1544017718909959, 0.1168638817622697, 0.12867339958894686, 0.13457059977841035, 0.06442193417532449, 0.1516508637973809, 0.1361279361831883, 0.1134607968321314, 0.12070958372250129, 0.08886400874570466, 0.1334298353117298, 0.12680319196948509, 0.30567747405403056, 0.12078539461639226, 0.2161201425157735, 0.15276705970535986, 0.09430310689219856, 0.10919108728966509, 0.10465435429931969, 0.14950066291401198, 0.10666304107996494, 0.11456306604473698, 0.10005760628398619, 0.04550790036449959, 0.08303635363563278, 0.06760191843761809, 0.10087085823144704, 0.1715444673196307, 0.15725092829740261, 0.14817628968052055, 0.18178139603151744, 0.15668935239647708, 0.16288926968649553, 0.14911093655683527, 0.14011602490636033, 0.17641938638074495, 0.04821048612546841, 0.028217819906666275, 0.03710193811571083, 0.06302150764247649, 0.03591512637774086, 0.03724143347588782, 0.031923844071153895, 0.04703158928478002, 0.04800044055329111]}, "mutation_prompt": null}
{"id": "8e7efcec-8a6b-41d2-9447-2a5d4569c54c", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchAMEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = 10\n        self.bandwidth = 0.01\n        self.par_min = 0.3\n        self.par_max = 0.9\n        self.hmCR = 0.95\n        self.evap_rate = 0.7\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n        def explore_new_solution(harmony_memory):\n            new_solution = np.zeros(self.dim)\n            for d in range(self.dim):\n                r = np.random.rand()\n                if r < self.hmCR:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[d] = harmony_memory[idx, d]\n                else:\n                    new_solution[d] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        best_solution = None\n        for _ in range(self.budget):\n            new_harmony = explore_new_solution(harmony_memory)\n            new_fitness = objective_function(new_harmony)\n            if best_solution is None or new_fitness < objective_function(best_solution):\n                best_solution = new_harmony.copy()\n            worst_idx = np.argmax([objective_function(h) for h in harmony_memory])\n            if new_fitness < objective_function(harmony_memory[worst_idx]):\n                harmony_memory[worst_idx] = new_harmony\n            adapt_rate = 1 - (objective_function(new_harmony) - objective_function(best_solution)) / self.budget\n            harmony_memory = harmony_memory * adapt_rate + best_solution * (1 - adapt_rate)\n        return best_solution", "name": "ImprovedHarmonySearchAMEA", "description": "Improving the memory update mechanism by incorporating a dynamic adaptation of the evaporation rate based on the performance of solutions.", "configspace": "", "generation": 1, "fitness": 0.08207726486905503, "feedback": "", "error": "", "parent_id": "3a8d3101-081d-4cc4-bb90-a45f7c076ddc", "metadata": {"aucs": [0.21196496852305868, 0.23697447844021413, 0.20234926619714622, 0.2537608547124648, 0.2496387679259734, 0.2381737955980785, 0.20253311378263583, 0.20546730946505476, 0.20337262626985997, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08053032054160814, 0.07679649757562512, 0.04141830608343022, 0.060461976463109024, 0.07859003513994689, 0.08108760560663231, 0.0800938544822688, 0.06437382792475022, 0.06935729611236696, 0.06990937362030059, 0.05849740671379999, 0.05927851955863184, 0.07343703816282854, 0.05770974729886236, 0.05063995690193901, 0.031143077208149905, 0.08352193622460158, 0.06664703309216025, 0.10471465440074301, 0.08634612535115016, 0.10491382459440612, 0.12352181106059412, 0.09117819798764792, 0.10380904404615099, 0.12242417894622881, 0.0889722388418912, 0.09029230254461307, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031547499169881643, 9.999999999998899e-05, 9.999999999998899e-05, 0.011292213577072885, 9.999999999998899e-05, 0.11939562079939647, 0.1134831005012078, 0.09868615027095473, 0.1664645622877612, 0.0951632616835657, 0.09182976683286348, 0.0798398953282855, 0.22902389318945748, 0.13824307478697406, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002231124830053721, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002645867754310194, 0.0019888639547580578, 9.999999999998899e-05, 0.007569236337415908, 0.0002094753066754773, 0.016574430311302235, 9.999999999998899e-05, 0.016270067060085824, 9.999999999998899e-05, 0.24825341474173657, 0.23140758010756535, 0.2468695394014787, 0.19149875900483926, 0.2524381572451292, 0.28909482732087577, 0.2324160018612209, 0.25976420356721475, 0.257667620563904, 0.05624712485428773, 0.035524371423425904, 0.040871686286098496, 0.051757624917565415, 0.0625211965400273, 0.11119364141729216, 0.039427281468779385, 0.04126879615902801, 0.05425438564335583, 0.1132181991249206, 0.13500501216548988, 0.11129477949440536, 0.12288971562082751, 0.14078270987184294, 0.11827972327827263, 0.10149534743814637, 0.10803345534429043, 0.09223110871906104, 0.12421149245053797, 0.17473743356629912, 0.15096434749754262, 0.1712018551515504, 0.15275088020396488, 0.15758989190404538, 0.13103416594767026, 0.1756480151367692, 0.13740372513424715, 0.10054287181342425, 0.09884777836449576, 0.10927443711545204, 0.12705872930415585, 0.10265356499642198, 0.10129215591092344, 0.09702773393430886, 0.12790624762877778, 0.1188349278770644, 0.13668775879172113, 0.14147791346938943, 0.16842243097446574, 0.15659839846522228, 0.15625399964336406, 0.1607460786009982, 0.17550435969563638, 0.16806864925383247, 0.1855120267157938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035718315574174264, 0.16584697605599108, 0.1521724085452283, 9.999999999998899e-05, 9.999999999998899e-05, 0.1379734307227516, 0.29166457963662984, 0.15484570181624602, 0.26903979682323553, 0.16551471984886978, 0.19300157831345655, 0.11938217295523723, 0.11252667609175138, 0.12231768327706283, 0.14642065516616187, 0.0881259659269763, 0.0727869538633833, 0.10976481730370724, 0.1321425160049594, 0.09577966951657324, 0.09681718639162495, 0.09593063650525235, 0.07558494043775077, 0.16072710012632085, 0.16162523787568372, 0.16450549808712112, 0.1836025854807235, 0.1541440199547668, 0.16153184277944288, 0.19137960173635327, 0.18084232779174692, 0.18890026733355025, 0.06091318398228218, 0.04530134412463083, 0.04816709915143769, 0.06227321306789124, 0.04651430891088271, 0.08059827628314975, 0.04550145819943996, 0.04122409206596256, 0.06159479365556075]}, "mutation_prompt": null}
