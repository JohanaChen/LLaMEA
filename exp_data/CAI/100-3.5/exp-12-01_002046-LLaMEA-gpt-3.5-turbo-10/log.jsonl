{"id": "32efc5ef-c515-468f-a71b-5043b0232376", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.particles = np.random.uniform(-5.0, 5.0, (10, dim))\n        self.best_position = self.particles[np.argmin([func(x) for x in self.particles])]\n        self.best_value = func(self.best_position)\n        self.temperature = 1.0\n        self.alpha = 0.95\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for particle in self.particles:\n                new_particle = particle + np.random.normal(0, 1, self.dim)\n                new_particle = np.clip(new_particle, -5.0, 5.0)\n                new_value = func(new_particle)\n                if new_value < func(particle):\n                    particle[:] = new_particle\n                    if new_value < self.best_value:\n                        self.best_position = new_particle\n                        self.best_value = new_value\n                else:\n                    if np.random.rand() < np.exp((func(particle) - new_value) / self.temperature):\n                        particle[:] = new_particle\n            self.temperature *= self.alpha\n        return self.best_position", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for efficient global optimization in continuous search spaces.", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "An exception occured: Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 50, in evaluateBBOB\n    algorithm = globals()[algorithm_name](\n  File \"<string>\", line 8, in __init__\n  File \"<string>\", line 8, in <listcomp>\nNameError: name 'func' is not defined\n.", "error": "NameError(\"name 'func' is not defined\")Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 50, in evaluateBBOB\n    algorithm = globals()[algorithm_name](\n  File \"<string>\", line 8, in __init__\n  File \"<string>\", line 8, in <listcomp>\nNameError: name 'func' is not defined\n", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "aa42890a-d728-430f-acbc-a425b371b65e", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.particles = np.random.uniform(-5.0, 5.0, (10, dim))\n        self.best_position = self.particles[np.argmin([func(x) for x in self.particles])]\n        self.best_value = func(self.best_position)\n        self.temperature = 1.0\n        self.alpha = 0.95\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for particle in self.particles:\n                new_particle = particle + np.random.normal(0, 1, self.dim)\n                new_particle = np.clip(new_particle, -5.0, 5.0)\n                new_value = func(new_particle)\n                if new_value < func(particle):\n                    particle[:] = new_particle\n                    if new_value < self.best_value:\n                        self.best_position = new_particle\n                        self.best_value = new_value\n                else:\n                    if np.random.rand() < np.exp((func(particle) - new_value) / self.temperature):\n                        particle[:] = new_particle\n            self.temperature *= self.alpha\n        return self.best_position", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for efficient global optimization in continuous search spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32efc5ef-c515-468f-a71b-5043b0232376", "metadata": {}, "mutation_prompt": null}
