{"id": "c850622a-ff9c-46c2-a215-2b69ca9c8f5b", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.alpha = 0.2\n        self.beta = 1.0\n        self.gamma = 0.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n    \n    def attractiveness(self, light_intensity):\n        return self.beta * np.exp(-self.gamma * light_intensity)\n    \n    def move_firefly(self, firefly, target_firefly):\n        attractiveness = self.attractiveness(target_firefly.light_intensity)\n        firefly += attractiveness * (target_firefly.position - firefly) + self.alpha * np.random.uniform(-1, 1, self.dim)\n        return np.clip(firefly, self.lower_bound, self.upper_bound)\n    \n    def __call__(self, func):\n        for _ in range(self.budget):\n            light_intensity = np.array([func(firefly) for firefly in self.population])\n            sorted_indices = np.argsort(light_intensity)\n            for i, idx in enumerate(sorted_indices):\n                for j in range(i+1, self.population_size):\n                    self.population[idx] = self.move_firefly(self.population[idx], self.population[sorted_indices[j]])\n        return self.population[sorted_indices[0]]", "name": "FireflyAlgorithm", "description": "A novel metaheuristic algorithm inspired by the behavior of fireflies in nature, where fireflies attract each other based on their light intensity. Each firefly moves towards the brighter fireflies in the search space, ultimately converging towards the global optimum.", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "An exception occured: Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 29, in __call__\n  File \"<string>\", line 19, in move_firefly\nAttributeError: 'numpy.ndarray' object has no attribute 'light_intensity'\n.", "error": "AttributeError(\"'numpy.ndarray' object has no attribute 'light_intensity'\")Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 29, in __call__\n  File \"<string>\", line 19, in move_firefly\nAttributeError: 'numpy.ndarray' object has no attribute 'light_intensity'\n", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "b4c500ee-4bf8-4bea-9cd3-81d793217871", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.alpha = 0.2\n        self.beta = 1.0\n        self.gamma = 0.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n    \n    def attractiveness(self, light_intensity):\n        return self.beta * np.exp(-self.gamma * light_intensity)\n    \n    def move_firefly(self, firefly, target_firefly):\n        attractiveness = self.attractiveness(target_firefly.light_intensity)\n        firefly += attractiveness * (target_firefly.position - firefly) + self.alpha * np.random.uniform(-1, 1, self.dim)\n        return np.clip(firefly, self.lower_bound, self.upper_bound)\n    \n    def __call__(self, func):\n        for _ in range(self.budget):\n            light_intensity = np.array([func(firefly) for firefly in self.population])\n            sorted_indices = np.argsort(light_intensity)\n            for i, idx in enumerate(sorted_indices):\n                for j in range(i+1, self.population_size):\n                    self.population[idx] = self.move_firefly(self.population[idx], self.population[sorted_indices[j]])\n        return self.population[sorted_indices[0]]", "name": "FireflyAlgorithm", "description": "A novel metaheuristic algorithm inspired by the behavior of fireflies in nature, where fireflies attract each other based on their light intensity. Each firefly moves towards the brighter fireflies in the search space, ultimately converging towards the global optimum.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c850622a-ff9c-46c2-a215-2b69ca9c8f5b", "metadata": {}, "mutation_prompt": null}
