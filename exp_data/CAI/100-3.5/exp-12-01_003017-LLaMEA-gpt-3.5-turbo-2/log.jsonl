{"id": "9b7a0bd4-8271-4828-ad43-5dbb67ebdaf0", "solution": "import numpy as np\n\nclass HybridBatSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.loudness = 0.5\n        self.pulse_rate = 0.5\n        self.alpha = 0.95\n        self.gamma = 0.1\n        self.temperature = 100.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (gamma(1 + beta) * np.sin(np.pi * beta / 2) / (gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return step\n\n        def new_solution(current, best):\n            new_pos = current + levy_flight()\n            for i in range(self.dim):\n                if np.random.rand() > self.pulse_rate:\n                    new_pos[i] = best[i] + np.random.uniform(-1, 1) * (current[i] - best[i])\n            return new_pos\n\n        def acceptance_probability(current, new_pos):\n            current_val = func(current)\n            new_val = func(new_pos)\n            if new_val < current_val or np.random.rand() < np.exp((current_val - new_val) / self.temperature):\n                return True\n            return False\n\n        def annealing():\n            return self.temperature * self.alpha\n\n        solutions = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        best_solution = solutions[np.argmin([func(sol) for sol in solutions])]\n\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                if np.random.rand() > self.loudness:\n                    solutions[i] = new_solution(solutions[i], best_solution)\n                if acceptance_probability(solutions[i], best_solution):\n                    best_solution = solutions[i]\n\n            self.temperature = annealing()\n\n        return best_solution", "name": "HybridBatSA", "description": "Hybrid Bat Algorithm with Simulated Annealing", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "An exception occured: Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 46, in __call__\n  File \"<string>\", line 24, in new_solution\n  File \"<string>\", line 17, in levy_flight\nNameError: name 'gamma' is not defined\n.", "error": "NameError(\"name 'gamma' is not defined\")Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 46, in __call__\n  File \"<string>\", line 24, in new_solution\n  File \"<string>\", line 17, in levy_flight\nNameError: name 'gamma' is not defined\n", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "9dafc9d7-2b91-4f34-b305-5c28ef5260bc", "solution": "import numpy as np\n\nclass HybridBatSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.loudness = 0.5\n        self.pulse_rate = 0.5\n        self.alpha = 0.95\n        self.gamma = 0.1\n        self.temperature = 100.0\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (gamma(1 + beta) * np.sin(np.pi * beta / 2) / (gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return step\n\n        def new_solution(current, best):\n            new_pos = current + levy_flight()\n            for i in range(self.dim):\n                if np.random.rand() > self.pulse_rate:\n                    new_pos[i] = best[i] + np.random.uniform(-1, 1) * (current[i] - best[i])\n            return new_pos\n\n        def acceptance_probability(current, new_pos):\n            current_val = func(current)\n            new_val = func(new_pos)\n            if new_val < current_val or np.random.rand() < np.exp((current_val - new_val) / self.temperature):\n                return True\n            return False\n\n        def annealing():\n            return self.temperature * self.alpha\n\n        solutions = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        best_solution = solutions[np.argmin([func(sol) for sol in solutions])]\n\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                if np.random.rand() > self.loudness:\n                    solutions[i] = new_solution(solutions[i], best_solution)\n                if acceptance_probability(solutions[i], best_solution):\n                    best_solution = solutions[i]\n\n            self.temperature = annealing()\n\n        return best_solution", "name": "HybridBatSA", "description": "Hybrid Bat Algorithm with Simulated Annealing", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b7a0bd4-8271-4828-ad43-5dbb67ebdaf0", "metadata": {}, "mutation_prompt": null}
