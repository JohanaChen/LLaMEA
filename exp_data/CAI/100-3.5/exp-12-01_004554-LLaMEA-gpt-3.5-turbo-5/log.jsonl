{"id": "a3b8c730-ec85-483f-8745-3bffa712756c", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def fitness(position):\n            return func(position)\n\n        lb = -5.0\n        ub = 5.0\n        pop_size = 30\n        max_iter = self.budget // pop_size\n\n        inertia_weight = 0.7\n        c1 = 2.0\n        c2 = 2.0\n\n        pop = np.random.uniform(lb, ub, (pop_size, self.dim))\n        velocity = np.zeros((pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([fitness(ind) for ind in pop])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n\n        for _ in range(max_iter):\n            for i in range(pop_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                velocity[i] = inertia_weight * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = np.clip(pop[i] + velocity[i], lb, ub)\n\n                fitness_val = fitness(pop[i])\n                if fitness_val < pbest_fitness[i]:\n                    pbest[i] = pop[i].copy()\n                    pbest_fitness[i] = fitness_val\n\n                    if fitness_val < pbest_fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = pop[i].copy()\n\n        return gbest", "name": "DynamicPSO", "description": "Particle Swarm Optimization (PSO) algorithm with dynamically adjusting social and cognitive weights based on population diversity.", "configspace": "", "generation": 0, "fitness": 0.24080649833839243, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6529584557789583, 0.6912490204682034, 0.6680500395288329, 0.6810658621362133, 0.5665143943906426, 0.7036426430140084, 0.7137321537975505, 0.7045142515240259, 0.7622546736201057, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3636077755550826, 0.284229042910466, 0.35013035894140254, 0.30923613605531286, 0.15221865914234511, 0.14992487545447708, 0.10415121910920444, 0.1022017011651698, 0.1448455853045727, 0.12682371744133503, 0.13076236266655328, 0.09994143761631624, 0.13529080117741488, 0.1393022329759348, 0.10973650236964017, 0.1125381979249469, 0.10898093871566106, 0.10486538349335783, 0.10523957328751654, 0.12733727783228643, 0.17314235901167063, 0.10220121664578075, 0.11844732218938392, 0.9933601256925094, 0.9941291589985412, 0.9942818889249054, 0.9922942375033273, 0.9907325552683499, 0.9891889475561386, 0.9925183835852666, 0.9941614847736984, 0.9932766891597511, 0.26514510400323765, 0.2902740839496786, 0.28078484626623024, 0.1480500991432243, 0.32423171834551623, 0.15120729497879926, 0.3223160277304642, 0.3137595154906526, 0.08815246496260332, 0.2259833449125781, 0.38875086969010286, 0.16970212439152033, 0.19526222425330875, 0.1906371950065313, 0.16076021602743584, 0.30910946536792616, 0.24226346327565784, 0.27959143783435225, 0.1607155655216571, 0.16654428535134758, 0.12123618868554553, 0.09404731575436509, 0.12582184788904016, 0.11748999022064477, 0.14417910207136608, 0.1807165454797559, 0.30720458382078497, 0.17552601077853702, 0.021662263600738307, 0.1616359271624107, 0.1708787572676671, 0.12393060096310671, 0.14575932915164935, 0.16367716243377994, 9.999999999998899e-05, 0.11782759398133935, 0.001795008038545487, 9.999999999998899e-05, 0.010662845267676135, 0.036659237050225, 9.999999999998899e-05, 0.035664245979573184, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054364766855108604, 0.03954353298083646, 0.09681423935110456, 0.07753646540526626, 9.999999999998899e-05, 0.031772467903267154, 0.07145860647873958, 0.04526468422843788, 0.029365483274870208, 0.05563148275547025, 9.999999999998899e-05, 9.999999999998899e-05, 0.07629510482379087, 0.05908169925567708, 0.05189048857390366, 0.044245367127497603, 9.999999999998899e-05, 0.055246322157160854, 0.16521571192638385, 0.053952162343467336, 0.14433890443448982, 0.17773156680142677, 0.005489664524625737, 0.13390321310590647, 0.047943794273748286, 0.07903457956726523, 0.12309923882456786, 0.5096305883144062, 0.42878020277460205, 0.4667613596509367, 0.47087343178537133, 0.4756950568572197, 0.42331101745824484, 0.4525643404574764, 0.4530124914001009, 0.43416157159010826, 0.09372569189675961, 0.0940125344324475, 0.06706910820910128, 0.11570899051686989, 0.10447596021356043, 0.11501547732915574, 0.06927237251646423, 0.06811640178414113, 0.10982982580620049, 0.21982353313002523, 0.20404919957149537, 0.20498152572746364, 0.2495753981124248, 0.18960734051669215, 0.18318577578631234, 0.1597293022289894, 0.26821677295318835, 0.1920016541153169, 0.24302981682526437, 0.24307419219572712, 0.36645157577751153, 0.29801790021412566, 0.36824781310536414, 0.1917944695403886, 0.26948834777581265, 0.3974070651073687, 0.18902719474019558, 0.2009564825991732, 0.1730322797636078, 0.24057136100410104, 0.23561334607816087, 0.1527888760889109, 0.2248247372585529, 0.22247843631527042, 0.27171745900230704, 0.1569225053392631, 0.18861614298855256, 0.18155746753491353, 0.20574134370880715, 0.17525953697785934, 0.18892866125876073, 0.178544831091489, 0.18788878303389378, 0.1866948587549655, 0.21311646778089177, 0.20995400927153174, 0.2286987628990086, 0.21561795082398916, 0.20093601595613197, 0.22210097833832187, 0.2076420565341931, 0.36970463461339753, 0.22877142106254533, 0.18864572468518148, 0.7718208189854054, 0.7614426464830703, 0.15053891105855677, 0.7041153820377777, 0.19935948998496722, 0.19949356234887272, 0.7555713378241943, 0.17004192807723761, 0.7455077138035371, 0.43600664016397506, 0.14612995970190001, 0.11203944317910386, 0.4954527489227434, 0.4082139735547494, 0.20860942667834903, 0.18915158954801659, 0.20861615671208178, 0.42358119855877974, 0.20384144076661526, 0.16803245492868768, 0.19040078765110624, 0.20314096582822205, 0.20987881659289487, 0.18993961478482124, 0.19038355133407903, 0.194233836728258, 0.1973411901127552, 0.10387909331328649, 0.07392958662180371, 0.08178486868374779, 0.08298943324104346, 0.08483774389354926, 0.07604736890785857, 0.07890408203409349, 0.07715675178656278, 0.09142360329999666]}, "mutation_prompt": null}
{"id": "fe66f3ba-da64-4149-b4c6-c5097f154e8f", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def fitness(position):\n            return func(position)\n\n        lb = -5.0\n        ub = 5.0\n        pop_size = 30\n        max_iter = self.budget // pop_size\n\n        inertia_weight = 0.7\n        c1 = 2.0\n        c2 = 2.0\n\n        pop = np.random.uniform(lb, ub, (pop_size, self.dim))\n        velocity = np.zeros((pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([fitness(ind) for ind in pop])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx].copy()\n\n        for _ in range(max_iter):\n            for i in range(pop_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n\n                velocity[i] = inertia_weight * velocity[i] + c1 * r1 * (pbest[i] - pop[i]) + c2 * r2 * (gbest - pop[i])\n                pop[i] = np.clip(pop[i] + velocity[i], lb, ub)\n\n                fitness_val = fitness(pop[i])\n                if fitness_val < pbest_fitness[i]:\n                    pbest[i] = pop[i].copy()\n                    pbest_fitness[i] = fitness_val\n\n                    if fitness_val < pbest_fitness[gbest_idx]:\n                        gbest_idx = i\n                        gbest = pop[i].copy()\n\n        return gbest", "name": "DynamicPSO", "description": "Particle Swarm Optimization (PSO) algorithm with dynamically adjusting social and cognitive weights based on population diversity.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a3b8c730-ec85-483f-8745-3bffa712756c", "metadata": {"aucs": [0.6529584557789583, 0.6912490204682034, 0.6680500395288329, 0.6810658621362133, 0.5665143943906426, 0.7036426430140084, 0.7137321537975505, 0.7045142515240259, 0.7622546736201057, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3636077755550826, 0.284229042910466, 0.35013035894140254, 0.30923613605531286, 0.15221865914234511, 0.14992487545447708, 0.10415121910920444, 0.1022017011651698, 0.1448455853045727, 0.12682371744133503, 0.13076236266655328, 0.09994143761631624, 0.13529080117741488, 0.1393022329759348, 0.10973650236964017, 0.1125381979249469, 0.10898093871566106, 0.10486538349335783, 0.10523957328751654, 0.12733727783228643, 0.17314235901167063, 0.10220121664578075, 0.11844732218938392, 0.9933601256925094, 0.9941291589985412, 0.9942818889249054, 0.9922942375033273, 0.9907325552683499, 0.9891889475561386, 0.9925183835852666, 0.9941614847736984, 0.9932766891597511, 0.26514510400323765, 0.2902740839496786, 0.28078484626623024, 0.1480500991432243, 0.32423171834551623, 0.15120729497879926, 0.3223160277304642, 0.3137595154906526, 0.08815246496260332, 0.2259833449125781, 0.38875086969010286, 0.16970212439152033, 0.19526222425330875, 0.1906371950065313, 0.16076021602743584, 0.30910946536792616, 0.24226346327565784, 0.27959143783435225, 0.1607155655216571, 0.16654428535134758, 0.12123618868554553, 0.09404731575436509, 0.12582184788904016, 0.11748999022064477, 0.14417910207136608, 0.1807165454797559, 0.30720458382078497, 0.17552601077853702, 0.021662263600738307, 0.1616359271624107, 0.1708787572676671, 0.12393060096310671, 0.14575932915164935, 0.16367716243377994, 9.999999999998899e-05, 0.11782759398133935, 0.001795008038545487, 9.999999999998899e-05, 0.010662845267676135, 0.036659237050225, 9.999999999998899e-05, 0.035664245979573184, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054364766855108604, 0.03954353298083646, 0.09681423935110456, 0.07753646540526626, 9.999999999998899e-05, 0.031772467903267154, 0.07145860647873958, 0.04526468422843788, 0.029365483274870208, 0.05563148275547025, 9.999999999998899e-05, 9.999999999998899e-05, 0.07629510482379087, 0.05908169925567708, 0.05189048857390366, 0.044245367127497603, 9.999999999998899e-05, 0.055246322157160854, 0.16521571192638385, 0.053952162343467336, 0.14433890443448982, 0.17773156680142677, 0.005489664524625737, 0.13390321310590647, 0.047943794273748286, 0.07903457956726523, 0.12309923882456786, 0.5096305883144062, 0.42878020277460205, 0.4667613596509367, 0.47087343178537133, 0.4756950568572197, 0.42331101745824484, 0.4525643404574764, 0.4530124914001009, 0.43416157159010826, 0.09372569189675961, 0.0940125344324475, 0.06706910820910128, 0.11570899051686989, 0.10447596021356043, 0.11501547732915574, 0.06927237251646423, 0.06811640178414113, 0.10982982580620049, 0.21982353313002523, 0.20404919957149537, 0.20498152572746364, 0.2495753981124248, 0.18960734051669215, 0.18318577578631234, 0.1597293022289894, 0.26821677295318835, 0.1920016541153169, 0.24302981682526437, 0.24307419219572712, 0.36645157577751153, 0.29801790021412566, 0.36824781310536414, 0.1917944695403886, 0.26948834777581265, 0.3974070651073687, 0.18902719474019558, 0.2009564825991732, 0.1730322797636078, 0.24057136100410104, 0.23561334607816087, 0.1527888760889109, 0.2248247372585529, 0.22247843631527042, 0.27171745900230704, 0.1569225053392631, 0.18861614298855256, 0.18155746753491353, 0.20574134370880715, 0.17525953697785934, 0.18892866125876073, 0.178544831091489, 0.18788878303389378, 0.1866948587549655, 0.21311646778089177, 0.20995400927153174, 0.2286987628990086, 0.21561795082398916, 0.20093601595613197, 0.22210097833832187, 0.2076420565341931, 0.36970463461339753, 0.22877142106254533, 0.18864572468518148, 0.7718208189854054, 0.7614426464830703, 0.15053891105855677, 0.7041153820377777, 0.19935948998496722, 0.19949356234887272, 0.7555713378241943, 0.17004192807723761, 0.7455077138035371, 0.43600664016397506, 0.14612995970190001, 0.11203944317910386, 0.4954527489227434, 0.4082139735547494, 0.20860942667834903, 0.18915158954801659, 0.20861615671208178, 0.42358119855877974, 0.20384144076661526, 0.16803245492868768, 0.19040078765110624, 0.20314096582822205, 0.20987881659289487, 0.18993961478482124, 0.19038355133407903, 0.194233836728258, 0.1973411901127552, 0.10387909331328649, 0.07392958662180371, 0.08178486868374779, 0.08298943324104346, 0.08483774389354926, 0.07604736890785857, 0.07890408203409349, 0.07715675178656278, 0.09142360329999666]}, "mutation_prompt": null}
