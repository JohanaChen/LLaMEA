{"id": "c27581cf-1063-4a3f-97e7-00a48ce63591", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=20, pitch_adjust_rate=0.5, bandwidth=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.bandwidth = bandwidth\n\n    def generate_harmony(self):\n        return np.random.uniform(-5.0, 5.0, self.dim)\n\n    def __call__(self, func):\n        harmony_memory = [self.generate_harmony() for _ in range(self.harmony_memory_size)]\n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.normal(np.mean(harmony_memory, axis=0), self.bandwidth), -5.0, 5.0)\n            if func(new_harmony) < func(harmony_memory[-1]):\n                harmony_memory[-1] = new_harmony\n                harmony_memory = sorted(harmony_memory, key=lambda x: func(x))\n        return harmony_memory[0]", "name": "HarmonySearch", "description": "Novel Harmony Search Algorithm for Black Box Optimization on BBOB test suite", "configspace": "", "generation": 0, "fitness": 0.04693465878520561, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.15376899054149706, 0.12576230798798604, 0.16482706715377504, 0.08953267671093967, 0.06363636078282875, 0.0890316436726043, 0.084927623758419, 0.08454969760514308, 0.06723986124488968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00925937459068027, 0.021514274412036904, 9.999999999998899e-05, 0.021704447239816016, 0.035153059998063174, 0.029136786294454264, 0.03265618410303428, 0.01479475176839129, 0.013767961784494354, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959581850962422, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024816146102164982, 0.0336608325009935, 0.04286921224027718, 0.053369347845141246, 0.046866101214943945, 0.03742140156294749, 0.06394032832553276, 0.04897697486289021, 0.03919416713874058, 9.999999999998899e-05, 0.005970290824538815, 9.999999999998899e-05, 0.03337852183676371, 0.029217308833572653, 0.011184995568346623, 9.999999999998899e-05, 0.012579249986497287, 9.999999999998899e-05, 0.11416315607284122, 0.14246451303411645, 0.07995336053593816, 0.007968622597834152, 0.028571025546398787, 9.999999999998899e-05, 0.0400760581704922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009160447592444498, 0.08246695193091769, 9.999999999998899e-05, 0.05099682569706987, 0.0015122866625358888, 0.00029877841767211866, 9.999999999998899e-05, 0.022583389556849798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02310745670305059, 9.999999999998899e-05, 0.08220820128327866, 0.018348283578236257, 0.0004888094003581145, 0.001949180188588806, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16113327984130377, 0.03952397808040764, 0.04780948945663188, 0.04808206297650308, 0.10031278892252327, 0.02355652250430451, 0.13986808041099952, 0.145624973351978, 0.15705689494761632, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012349587030584863, 0.010854541993860711, 0.01759643065956129, 0.040291413523827924, 0.034227704700089956, 0.026760334164489863, 0.09448623050319327, 0.012016792857577507, 0.06788313412510139, 0.04764932567119451, 0.015883948087220046, 0.056419943216579616, 0.0881582429987493, 0.03658816047078073, 0.01244351257671883, 0.10828058237650307, 0.12641911259905447, 0.11793515398007581, 0.13062360570015885, 0.1514914183851519, 0.128627505155128, 0.11419328512713744, 0.1737647185016471, 0.09400258910629222, 0.045752260448680526, 0.05992060339674754, 0.061540787765834604, 0.08888412111445321, 0.12406584122695707, 0.07554290097503813, 0.056477930846412394, 0.09385117720826108, 0.024151839951871645, 0.180895793271439, 0.19811162930958115, 0.17894072086728885, 0.20853345215121832, 0.20083433433173492, 0.19623966346838828, 0.17022019853412762, 0.13054927887892265, 0.1463213583384717, 9.999999999998899e-05, 9.999999999998899e-05, 0.00012611809931895035, 0.027915319884915135, 0.15287369426764563, 9.999999999998899e-05, 9.999999999998899e-05, 0.077477551287501, 9.999999999998899e-05, 0.055680563201920275, 0.08532145299903005, 0.02114863758641916, 0.04021507230638943, 0.12077178218916085, 0.06901474966147036, 0.07249639174148648, 0.09642348507627685, 0.035747923555760286, 0.08929309590998924, 0.01637852677003393, 0.062213719331221884, 0.05067929078960387, 0.010790538252687498, 0.04550499132602004, 0.04689649706848009, 0.05596552082104367, 0.04143139367556847, 0.1463026253596228, 0.12830667100594817, 0.1532675865899833, 0.13072683373134408, 0.1516510242055098, 0.14824052433679202, 0.12842262597342957, 0.1366749761474625, 0.14678907061932656, 0.05764097407253843, 0.037157614362156366, 0.0331838837509878, 0.04795669923802526, 0.05074146485657549, 0.04263074129645561, 0.06680902788604104, 0.050993610641444476, 0.07329808050300002]}, "mutation_prompt": null}
{"id": "53d82b04-6c2c-4442-a17a-ad38d55498f2", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=20, pitch_adjust_rate=0.5, bandwidth=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.bandwidth = bandwidth\n\n    def generate_harmony(self):\n        return np.random.uniform(-5.0, 5.0, self.dim)\n\n    def __call__(self, func):\n        harmony_memory = [self.generate_harmony() for _ in range(self.harmony_memory_size)]\n        for _ in range(self.budget):\n            new_harmony = np.clip(np.random.normal(np.mean(harmony_memory, axis=0), self.bandwidth), -5.0, 5.0)\n            if func(new_harmony) < func(harmony_memory[-1]):\n                harmony_memory[-1] = new_harmony\n                harmony_memory = sorted(harmony_memory, key=lambda x: func(x))\n        return harmony_memory[0]", "name": "HarmonySearch", "description": "Novel Harmony Search Algorithm for Black Box Optimization on BBOB test suite", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c27581cf-1063-4a3f-97e7-00a48ce63591", "metadata": {"aucs": [0.15376899054149706, 0.12576230798798604, 0.16482706715377504, 0.08953267671093967, 0.06363636078282875, 0.0890316436726043, 0.084927623758419, 0.08454969760514308, 0.06723986124488968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00925937459068027, 0.021514274412036904, 9.999999999998899e-05, 0.021704447239816016, 0.035153059998063174, 0.029136786294454264, 0.03265618410303428, 0.01479475176839129, 0.013767961784494354, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959581850962422, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024816146102164982, 0.0336608325009935, 0.04286921224027718, 0.053369347845141246, 0.046866101214943945, 0.03742140156294749, 0.06394032832553276, 0.04897697486289021, 0.03919416713874058, 9.999999999998899e-05, 0.005970290824538815, 9.999999999998899e-05, 0.03337852183676371, 0.029217308833572653, 0.011184995568346623, 9.999999999998899e-05, 0.012579249986497287, 9.999999999998899e-05, 0.11416315607284122, 0.14246451303411645, 0.07995336053593816, 0.007968622597834152, 0.028571025546398787, 9.999999999998899e-05, 0.0400760581704922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009160447592444498, 0.08246695193091769, 9.999999999998899e-05, 0.05099682569706987, 0.0015122866625358888, 0.00029877841767211866, 9.999999999998899e-05, 0.022583389556849798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02310745670305059, 9.999999999998899e-05, 0.08220820128327866, 0.018348283578236257, 0.0004888094003581145, 0.001949180188588806, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16113327984130377, 0.03952397808040764, 0.04780948945663188, 0.04808206297650308, 0.10031278892252327, 0.02355652250430451, 0.13986808041099952, 0.145624973351978, 0.15705689494761632, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012349587030584863, 0.010854541993860711, 0.01759643065956129, 0.040291413523827924, 0.034227704700089956, 0.026760334164489863, 0.09448623050319327, 0.012016792857577507, 0.06788313412510139, 0.04764932567119451, 0.015883948087220046, 0.056419943216579616, 0.0881582429987493, 0.03658816047078073, 0.01244351257671883, 0.10828058237650307, 0.12641911259905447, 0.11793515398007581, 0.13062360570015885, 0.1514914183851519, 0.128627505155128, 0.11419328512713744, 0.1737647185016471, 0.09400258910629222, 0.045752260448680526, 0.05992060339674754, 0.061540787765834604, 0.08888412111445321, 0.12406584122695707, 0.07554290097503813, 0.056477930846412394, 0.09385117720826108, 0.024151839951871645, 0.180895793271439, 0.19811162930958115, 0.17894072086728885, 0.20853345215121832, 0.20083433433173492, 0.19623966346838828, 0.17022019853412762, 0.13054927887892265, 0.1463213583384717, 9.999999999998899e-05, 9.999999999998899e-05, 0.00012611809931895035, 0.027915319884915135, 0.15287369426764563, 9.999999999998899e-05, 9.999999999998899e-05, 0.077477551287501, 9.999999999998899e-05, 0.055680563201920275, 0.08532145299903005, 0.02114863758641916, 0.04021507230638943, 0.12077178218916085, 0.06901474966147036, 0.07249639174148648, 0.09642348507627685, 0.035747923555760286, 0.08929309590998924, 0.01637852677003393, 0.062213719331221884, 0.05067929078960387, 0.010790538252687498, 0.04550499132602004, 0.04689649706848009, 0.05596552082104367, 0.04143139367556847, 0.1463026253596228, 0.12830667100594817, 0.1532675865899833, 0.13072683373134408, 0.1516510242055098, 0.14824052433679202, 0.12842262597342957, 0.1366749761474625, 0.14678907061932656, 0.05764097407253843, 0.037157614362156366, 0.0331838837509878, 0.04795669923802526, 0.05074146485657549, 0.04263074129645561, 0.06680902788604104, 0.050993610641444476, 0.07329808050300002]}, "mutation_prompt": null}
