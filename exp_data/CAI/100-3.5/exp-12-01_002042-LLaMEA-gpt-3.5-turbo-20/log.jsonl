{"id": "7302bc40-b56b-4bd5-9ee7-5316e46dbe02", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=100.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        def sa_acceptance_probability(curr_cost, new_cost, temp):\n            return np.exp((curr_cost - new_cost) / temp)\n\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def evaluate_particle(particle):\n            return func(particle)\n\n        def pso_sa_optimize():\n            particles = initialize_particles()\n            global_best = particles[np.argmin([evaluate_particle(p) for p in particles])]\n            global_best_cost = evaluate_particle(global_best)\n            temp = self.initial_temp\n\n            for _ in range(self.max_iter):\n                for i, particle in enumerate(particles):\n                    particle_cost = evaluate_particle(particle)\n                    if particle_cost < evaluate_particle(global_best):\n                        global_best = particle.copy()\n                        global_best_cost = particle_cost\n\n                    new_particle = particle + np.random.uniform(-1, 1, size=self.dim) * (global_best - particle) + np.random.uniform(-1, 1, size=self.dim) * (particles[np.random.randint(0, self.num_particles)] - particle)\n                    new_particle_cost = evaluate_particle(new_particle)\n\n                    if new_particle_cost < particle_cost or np.random.rand() < sa_acceptance_probability(particle_cost, new_particle_cost, temp):\n                        particles[i] = new_particle\n\n                temp *= self.cooling_rate\n\n            return global_best\n\n        return pso_sa_optimize()", "name": "PSO_SA_Optimizer", "description": "Metaheuristic algorithm utilizing a combination of Particle Swarm Optimization (PSO) and Simulated Annealing (SA) for enhanced exploration and exploitation in black box optimization problems.", "configspace": "", "generation": 0, "fitness": 0.14726208559939516, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.20207786176682396, 0.19928997731259424, 0.24909356563426877, 0.21255115281200265, 0.2237599290122686, 0.2323052997899281, 0.22377891540629802, 0.26569813167761847, 0.21737488782894232, 0.12948112511607812, 0.15011032051342277, 0.11909796206012757, 0.11532397273530659, 0.1568452341148322, 0.1363561213606379, 0.11871982231591804, 0.15147505610950118, 0.14190656006478786, 0.06811379267763573, 0.06873591345575658, 0.09375375561815558, 0.0818177196676454, 0.06654410347827833, 0.07657170417065173, 0.07378138654994382, 0.09230609708514659, 0.06922734170010647, 0.07297181293645283, 0.05961835903533741, 0.06363572820437235, 0.06419519372673499, 0.059650625123141565, 0.06718404962124513, 0.073216038454611, 0.056660517015288514, 0.07436112918924953, 0.9452907573590112, 0.9346801165090701, 0.939422753865707, 0.9477513313127695, 0.9783958180864922, 0.9385474041170883, 0.9383978434714693, 0.94995260898931, 0.9405930492818858, 0.1258458750458492, 0.07969857319407692, 0.09160870775070795, 0.11645340908782587, 0.15432098223364943, 0.14957982495419841, 0.10497724445373047, 0.09925792721075255, 0.11370015115092102, 0.16194949282844262, 0.16205688927978923, 0.1300055574857102, 0.1534286296660894, 0.1707230171170766, 0.1854791654234884, 0.18678130879441845, 0.1393759389372019, 0.1821671901440306, 0.11424302318817003, 0.09468283406183287, 0.10873816713252216, 0.11561241506243136, 0.11119505249857287, 0.07681972643147983, 0.10203733997421227, 0.10474626963811173, 0.1005580825720841, 0.12182796193510281, 0.10002389696852365, 0.11610019888674017, 0.0924969917596381, 0.08473925220316358, 0.11532255758636034, 0.08311509731600142, 0.11925659215062656, 0.1363875684265624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02413485113934144, 0.0058783677311433635, 0.011102419180697876, 9.999999999998899e-05, 9.999999999998899e-05, 0.00029746435309663255, 9.999999999998899e-05, 0.006977543027298139, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010124537486877472, 9.999999999998899e-05, 0.002339373023581559, 0.0012230475421881604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08420313757478526, 0.06446062637083216, 0.049371814921630675, 0.02853833648887849, 0.07875883498723579, 0.051438953860411085, 0.063492825947432, 0.05277573869210206, 0.04968796094073591, 0.22489127914691898, 0.21229069972348202, 0.22460227567669666, 0.21274192537139025, 0.22665291221571404, 0.2067596911191718, 0.22716434978761035, 0.21452493196718259, 0.22853304269288932, 0.06492888869913804, 0.05785373465365551, 0.07775992831952683, 0.05501122494802824, 0.06381256691801407, 0.07149050134278656, 0.06109202301535299, 0.08651445487886289, 0.08015510258444447, 0.1198652551014, 0.10873932455068847, 0.1129057204401579, 0.1047717694217446, 0.10923121513451861, 0.0943093314910537, 0.0993597538062686, 0.10827508009972675, 0.10849568823359457, 0.1736303427880821, 0.1653014503845074, 0.17317936648600463, 0.17073142004747155, 0.1790530085000258, 0.17376556241539276, 0.1815680294878732, 0.21226581358219354, 0.1637401813219188, 0.13084752838076197, 0.12798018106161213, 0.1139052786535496, 0.13382394150377508, 0.13877312595381208, 0.14464617256787515, 0.1366652020665664, 0.14809718599630728, 0.1522640545910805, 0.1487685909284464, 0.1434723984265016, 0.1618488438449276, 0.14366914664438735, 0.15146326026682322, 0.16045380805331222, 0.15979419934396755, 0.1432509203500012, 0.15041454251199615, 0.17034498905811524, 0.17705442983292174, 0.15677709262946082, 0.15882264334900442, 0.1650288718563394, 0.1503511552070118, 0.16314398370577365, 0.16167237152441172, 0.16139975412546537, 0.13501383697904568, 0.13373683213265652, 0.22489124147666728, 0.14853162355899263, 0.14187526421197905, 0.13139029566398408, 0.12268057461612247, 0.202857645989735, 0.1256392665340358, 0.15290912612549346, 0.152556919108084, 0.10425278305690155, 0.14359144208706653, 0.12479717287206915, 0.11734746778862992, 0.1325005179084877, 0.10103442519291295, 0.1749014529475864, 0.1482070609724433, 0.15722481517084708, 0.1518520221602685, 0.14836384860061513, 0.15822332408388662, 0.16982274659439045, 0.14989370294360693, 0.18095970702939568, 0.16685572595012055, 0.06040730388677007, 0.07409268339568986, 0.055557874635447146, 0.06322696466251998, 0.06238199099403885, 0.06545066546551737, 0.055133615636329125, 0.06581670226831593, 0.0713120279407371]}, "mutation_prompt": null}
{"id": "215c6113-5b92-4015-9818-df69da8a4447", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, num_particles=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=100.0, cooling_rate=0.95, inertia_weight=0.9, inertia_weight_range=(0.4, 0.9)):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n        self.inertia_weight = inertia_weight\n        self.inertia_weight_range = inertia_weight_range\n\n    def __call__(self, func):\n        def sa_acceptance_probability(curr_cost, new_cost, temp):\n            return np.exp((curr_cost - new_cost) / temp)\n\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def evaluate_particle(particle):\n            return func(particle)\n\n        def pso_sa_optimize():\n            particles = initialize_particles()\n            global_best = particles[np.argmin([evaluate_particle(p) for p in particles])]\n            global_best_cost = evaluate_particle(global_best)\n            temp = self.initial_temp\n\n            for _ in range(self.max_iter):\n                for i, particle in enumerate(particles):\n                    particle_cost = evaluate_particle(particle)\n                    if particle_cost < evaluate_particle(global_best):\n                        global_best = particle.copy()\n                        global_best_cost = particle_cost\n\n                    new_particle = particle + self.inertia_weight * np.random.uniform(-1, 1, size=self.dim) * (global_best - particle) + self.inertia_weight * np.random.uniform(-1, 1, size=self.dim) * (particles[np.random.randint(0, self.num_particles)] - particle)\n                    new_particle_cost = evaluate_particle(new_particle)\n\n                    if new_particle_cost < particle_cost or np.random.rand() < sa_acceptance_probability(particle_cost, new_particle_cost, temp):\n                        particles[i] = new_particle\n\n                temp *= self.cooling_rate\n                self.inertia_weight = self.inertia_weight_range[0] + (_ / self.max_iter) * (self.inertia_weight_range[1] - self.inertia_weight_range[0])\n\n            return global_best\n\n        return pso_sa_optimize()", "name": "PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer with dynamic inertia weight adjustment for improved convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 1, "fitness": 0.1534759833713166, "feedback": "", "error": "", "parent_id": "7302bc40-b56b-4bd5-9ee7-5316e46dbe02", "metadata": {"aucs": [0.2622705143484344, 0.22982177655702218, 0.23055518094580352, 0.22804736349297505, 0.22578486043807156, 0.22722919515795736, 0.20449808502606093, 0.24176874688320182, 0.22569219478352365, 0.11550793437576468, 0.12394736838004994, 0.12640356408453612, 0.12584375782391666, 0.12555457332000297, 0.11808741170276404, 0.10264298988648657, 0.10467465452179281, 0.1125588963346138, 0.0760542669497074, 0.08650871101135693, 0.0880453947770018, 0.0844408969015219, 0.07113269879277595, 0.08227362350223466, 0.07542465050623248, 0.0968449396667016, 0.07463772994390017, 0.06878645208981393, 0.0603761117435917, 0.06052835397678247, 0.0569530799199125, 0.05891678355732022, 0.06424702566542129, 0.07343600328067257, 0.06647543032418612, 0.05888487055995717, 0.8936463764134348, 0.9118333765483165, 0.8048955541771365, 0.8484395041254639, 0.8034049626240181, 0.8315744138035379, 0.8851909625153009, 0.8840611974160127, 0.8092285346439685, 0.12017541629932671, 0.10465105708699918, 0.1329911964077224, 0.10691631856904349, 0.15533835301150933, 0.11249360285497656, 0.15833227023774576, 0.15698399831071908, 0.12642825773341682, 0.18340708818092877, 0.19349867307344681, 0.17234594829164596, 0.22307572568071665, 0.23560330769653814, 0.23819427555525208, 0.17200854679163435, 0.18459587810562483, 0.1599526209495178, 0.11714257074206469, 0.1049794693871714, 0.1039173381335673, 0.09650717973762113, 0.1098336689731968, 0.09809691813011845, 0.13747056501387667, 0.15241215659175378, 0.13310558139515938, 0.13312228417992733, 0.10713570225371527, 0.07905763541255151, 0.10507874030709086, 0.13848673599111316, 0.12412439105331141, 0.11274536781422995, 0.12368543247200137, 0.11919352489027457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003065808229982925, 9.999999999998899e-05, 9.999999999998899e-05, 0.027555984042026416, 0.04564469905067048, 0.07022466457694387, 0.057468592745965164, 0.011255468833824334, 0.02326298384055192, 0.06427744180398309, 0.03752060366377796, 0.051821432287652014, 0.0003321424073489121, 9.999999999998899e-05, 0.026877023548248502, 0.006906367554253667, 0.0076905247623982875, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001498965608630165, 0.08729082205860106, 0.045513613369431716, 0.05239998022250092, 0.099905593307555, 0.05882671777570647, 0.06171131598985613, 0.059566156344330934, 0.058809557166213944, 0.0414385989708238, 0.263725127829456, 0.2515689724615422, 0.23615291650257142, 0.2151271393337323, 0.21734735604089128, 0.2199251961975569, 0.2616910409372214, 0.22118374821909115, 0.22704392544151075, 0.06841401498484467, 0.06946288948170842, 0.055999915946311374, 0.06621672706177795, 0.061372049391658745, 0.08111536166412714, 0.07229233523532808, 0.07634046889787827, 0.07499027477104869, 0.15273754863629052, 0.11510976539773587, 0.1328918549063257, 0.10520876811354951, 0.11756127513456283, 0.11098335673273796, 0.11026665817977577, 0.11929858054470555, 0.12167014048093494, 0.16290419261136102, 0.17843873305756264, 0.17415936479780247, 0.17609167618931532, 0.18421602456738428, 0.19911709369114983, 0.1808274385417058, 0.19358006301635355, 0.16603129508228198, 0.13876776621071563, 0.1390059588278445, 0.15271886553446434, 0.1503217135961673, 0.14983664420957443, 0.12742198215114586, 0.14270308328540926, 0.15468391776345347, 0.12992904077968104, 0.1691398999126763, 0.17058238340444698, 0.16107581185675157, 0.19668936472260534, 0.15474644107239688, 0.17424880978211077, 0.16875330996436388, 0.1682334479443658, 0.18575737917318447, 0.16744220648072428, 0.1709059027936939, 0.1956102639231514, 0.16474095908151354, 0.17250262752560352, 0.16850515764003648, 0.1639910645227114, 0.16639702157195757, 0.17583016468026924, 0.21662815186217899, 0.1463593420931013, 0.14747895790925725, 0.232456681796663, 0.23901775223487398, 0.26230093756291073, 0.1675681691551414, 0.18298150568782356, 0.13959283137569345, 0.1982211294563967, 0.1481441607174554, 0.12473691246537177, 0.11781046029435727, 0.16233016133121259, 0.12972752272773236, 0.1588843135908442, 0.13972269862104825, 0.17705245392451674, 0.17118575868549812, 0.1639487769686795, 0.15723974795507734, 0.1573958336010386, 0.17113005100671796, 0.16475265805999262, 0.17697743934768984, 0.17738668463643403, 0.15906682461739985, 0.06745682001779407, 0.06369800725284225, 0.06411186292332549, 0.06315770721833636, 0.08139129076661178, 0.0665717131244743, 0.06695949315766159, 0.0591033461831012, 0.0643759424082827]}, "mutation_prompt": null}
