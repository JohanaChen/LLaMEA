{"id": "633b0f71-ecbf-4c74-be5b-1492d81f136b", "solution": "import numpy as np\n\nclass HybridPSODWS:\n    def __init__(self, budget, dim, w=0.7, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n\n        for _ in range(self.budget):\n            for i in range(self.dim):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = self.w * velocity[i] + self.c1 * r1 * (swarm[i] - swarm[i]) + self.c2 * r2 * (swarm[i] - swarm[i])\n                swarm[i] = swarm[i] + velocity[i]\n\n        fitness = [func(individual) for individual in swarm]\n        best_index = np.argmin(fitness)\n        best_solution = swarm[best_index]\n        \n        return best_solution", "name": "HybridPSODWS", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Dimension-wise Search (DWS) to efficiently explore and exploit the search space for global optimization.", "configspace": "", "generation": 0, "fitness": 0.026476294028471032, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.07172115044991989, 0.06423415049946268, 0.0822881188591662, 0.019485674469137626, 0.05257887047805776, 0.02519121602229535, 0.03212835352014176, 0.05058928098587567, 0.06701824832800662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0011187632349987098, 0.0, 0.018150078853237717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.045084250649534585, 0.03357090568988674, 0.04278205048616679, 0.03899241521606378, 0.04678013722708951, 0.03048449185054647, 0.033180535359004004, 0.048891644393723954, 0.025752273873738907, 0.0, 0.0, 0.0, 0.0, 0.00021551809509001707, 0.0, 0.0, 0.0, 0.0, 0.03232362276045497, 0.0, 0.0, 0.004462664352364976, 0.0, 0.0, 0.026181922062049168, 0.0, 0.009809447265860083, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02363530066906916, 0.10693789276682164, 0.14829537673711224, 0.06701850967150258, 0.08041876921715974, 0.04447476872710854, 0.09452415868638986, 0.08474685940847848, 0.11419823301066623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02666833626569931, 0.0569233726682411, 0.06726366127807482, 0.05459392587769929, 0.09846289938816166, 0.06572254448697334, 0.056336845919289225, 0.0353290699247053, 0.025779377491665922, 0.07717165476235788, 0.09116171693588637, 0.09616018134012394, 0.10350813781504964, 0.10264986706467083, 0.08290739212077247, 0.06784689140952793, 0.11411347464502575, 0.10004631021926003, 0.07123303423380878, 0.03322226033550901, 0.03075358899712477, 0.034551307077603455, 0.04455513106718245, 0.015390172400233548, 0.028339450902190366, 0.05639263182623655, 0.038433917477429747, 0.005985681479316551, 0.09154377975027184, 0.04267402731730685, 0.06795011122388206, 0.09121143776311746, 0.06737852077118656, 0.06900071412896536, 0.12237199858757519, 0.04831892369221691, 0.08893517487915614, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02795548024787675, 0.05604888032687072, 0.0508856862033461, 0.06709542404813507, 0.1207035396655618, 0.01912504625711986, 0.03382267488617996, 0.05652137775177002, 0.053579659675793145, 0.03590455183669694, 0.03957798628310871, 0.01630315145370509, 0.018507963261033322, 0.02150250198996473, 0.04541561500212232, 0.01642972030755685, 0.013831983821562921, 0.02297079570432159, 0.10087028022501032, 0.12008703439342805, 0.1475449842687161, 0.10726544462840137, 0.08005211408412838, 0.12456358843521431, 0.09945213886469684, 0.06815648712583366, 0.08824570648974184, 0.0, 0.0020608381811069165, 0.009878077650213868, 0.0, 0.0057755656362813435, 0.0, 0.003688085859674395, 0.0, 0.006903948184889486]}, "mutation_prompt": null}
{"id": "00a490c3-26f1-4142-b7dc-9f49e732b058", "solution": "import numpy as np\n\nclass HybridPSODWS:\n    def __init__(self, budget, dim, w=0.7, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.dim, self.dim))\n        velocity = np.zeros((self.dim, self.dim))\n\n        for _ in range(self.budget):\n            for i in range(self.dim):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = self.w * velocity[i] + self.c1 * r1 * (swarm[i] - swarm[i]) + self.c2 * r2 * (swarm[i] - swarm[i])\n                swarm[i] = swarm[i] + velocity[i]\n\n        fitness = [func(individual) for individual in swarm]\n        best_index = np.argmin(fitness)\n        best_solution = swarm[best_index]\n        \n        return best_solution", "name": "HybridPSODWS", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Dimension-wise Search (DWS) to efficiently explore and exploit the search space for global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "633b0f71-ecbf-4c74-be5b-1492d81f136b", "metadata": {"aucs": [0.07172115044991989, 0.06423415049946268, 0.0822881188591662, 0.019485674469137626, 0.05257887047805776, 0.02519121602229535, 0.03212835352014176, 0.05058928098587567, 0.06701824832800662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0011187632349987098, 0.0, 0.018150078853237717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.045084250649534585, 0.03357090568988674, 0.04278205048616679, 0.03899241521606378, 0.04678013722708951, 0.03048449185054647, 0.033180535359004004, 0.048891644393723954, 0.025752273873738907, 0.0, 0.0, 0.0, 0.0, 0.00021551809509001707, 0.0, 0.0, 0.0, 0.0, 0.03232362276045497, 0.0, 0.0, 0.004462664352364976, 0.0, 0.0, 0.026181922062049168, 0.0, 0.009809447265860083, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02363530066906916, 0.10693789276682164, 0.14829537673711224, 0.06701850967150258, 0.08041876921715974, 0.04447476872710854, 0.09452415868638986, 0.08474685940847848, 0.11419823301066623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02666833626569931, 0.0569233726682411, 0.06726366127807482, 0.05459392587769929, 0.09846289938816166, 0.06572254448697334, 0.056336845919289225, 0.0353290699247053, 0.025779377491665922, 0.07717165476235788, 0.09116171693588637, 0.09616018134012394, 0.10350813781504964, 0.10264986706467083, 0.08290739212077247, 0.06784689140952793, 0.11411347464502575, 0.10004631021926003, 0.07123303423380878, 0.03322226033550901, 0.03075358899712477, 0.034551307077603455, 0.04455513106718245, 0.015390172400233548, 0.028339450902190366, 0.05639263182623655, 0.038433917477429747, 0.005985681479316551, 0.09154377975027184, 0.04267402731730685, 0.06795011122388206, 0.09121143776311746, 0.06737852077118656, 0.06900071412896536, 0.12237199858757519, 0.04831892369221691, 0.08893517487915614, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02795548024787675, 0.05604888032687072, 0.0508856862033461, 0.06709542404813507, 0.1207035396655618, 0.01912504625711986, 0.03382267488617996, 0.05652137775177002, 0.053579659675793145, 0.03590455183669694, 0.03957798628310871, 0.01630315145370509, 0.018507963261033322, 0.02150250198996473, 0.04541561500212232, 0.01642972030755685, 0.013831983821562921, 0.02297079570432159, 0.10087028022501032, 0.12008703439342805, 0.1475449842687161, 0.10726544462840137, 0.08005211408412838, 0.12456358843521431, 0.09945213886469684, 0.06815648712583366, 0.08824570648974184, 0.0, 0.0020608381811069165, 0.009878077650213868, 0.0, 0.0057755656362813435, 0.0, 0.003688085859674395, 0.0, 0.006903948184889486]}, "mutation_prompt": null}
