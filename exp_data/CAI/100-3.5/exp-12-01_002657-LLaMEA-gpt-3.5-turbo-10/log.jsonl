{"id": "274a6fc1-3f8f-4c2a-bce8-07547bb1b1e2", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=20, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n\n    def __call__(self, func):\n        # Initialize harmony memory\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_memory_fitness = np.array([func(h) for h in harmony_memory])\n\n        for _ in range(self.budget):\n            # Create a new harmony\n            new_harmony = np.zeros(self.dim)\n            for d in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    index = np.random.randint(self.harmony_memory_size)\n                    new_harmony[d] = harmony_memory[index, d] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                else:\n                    new_harmony[d] = np.random.uniform(-5.0, 5.0)\n\n            new_fitness = func(new_harmony)\n            # Update harmony memory if new harmony is better\n            if new_fitness < harmony_memory_fitness.max():\n                index = np.argmax(harmony_memory_fitness)\n                harmony_memory[index] = new_harmony\n                harmony_memory_fitness[index] = new_fitness\n\n        best_index = np.argmin(harmony_memory_fitness)\n        best_solution = harmony_memory[best_index]\n        return best_solution", "name": "HarmonySearch", "description": "Harmony Search (HS) algorithm is inspired by the musical improvisation process, where new solutions are created by harmonizing existing ones with random adjustments.", "configspace": "", "generation": 0, "fitness": 0.16620134173647652, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.36036033266520606, 0.3353984926502662, 0.38597007406437556, 0.3603942670904051, 0.41913874096808135, 0.383527260718735, 0.35448369803611723, 0.4224781039119885, 0.42081550599973216, 0.12047356082102922, 0.08125412240551833, 0.10385108848709423, 0.11207828429745537, 0.15635503934695882, 0.11865871960142671, 0.11971069454146077, 0.1157114682284981, 0.09701379575888514, 0.16554337560798338, 0.1953783005657097, 0.15138531584564974, 0.16238328708383454, 0.1577366603894086, 0.20508829342016943, 0.14337775304539813, 0.16327226748812662, 0.1537906580581625, 0.16265680043384423, 0.17004292564371848, 0.12220847997912987, 0.1566002153983731, 0.1473821224681946, 0.15003484739712325, 0.15566111059161958, 0.12179303112105755, 0.1375106366590464, 0.24654825512887113, 0.19516381663913862, 0.19366474724534577, 0.23507323354384202, 0.20466046453996, 0.1927983268123119, 0.20568249546165673, 0.19718728370821637, 0.1903643659770049, 0.16556884563817365, 0.1658416717749387, 0.16455765260591504, 0.16564840615215504, 0.17187919328779133, 0.17207721799606368, 0.17538927119367964, 0.1939360209792137, 0.18800862629955595, 0.17919095652345063, 0.14679682853778175, 0.19806203244158893, 0.23780917252647638, 0.17858002852882893, 0.2016214981496075, 0.2008972481306408, 0.2798885483309771, 0.22169856554116407, 0.10038681557330442, 0.16767989599419253, 0.12288349062689607, 0.11632329227805838, 0.1116240314463921, 0.13121515773445913, 0.14556691303941993, 0.10819576053944713, 0.13673347605542474, 0.10948046504117903, 0.12140059642007928, 0.10830050766339916, 0.1651126465315993, 0.11489566787168348, 0.13793607979755507, 0.10680605189567016, 0.17612277239131058, 0.12291756654869646, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08094559248097777, 0.09803808089843857, 0.07670747719285953, 0.03805939613902298, 0.06058197354863337, 0.0414770494597958, 0.06925320272429702, 0.03366817353993412, 0.10070568252973566, 9.999999999998899e-05, 0.003533252426598299, 9.999999999998899e-05, 0.008398616177251683, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009200680594141697, 9.999999999998899e-05, 0.045566424265255256, 0.04227725610628785, 0.07137942887374649, 0.046265907767930714, 0.08274926218926881, 0.06461267965604256, 0.05838024246905682, 0.08768756448818238, 0.07244670402921749, 0.3205243614718831, 0.3238398476662523, 0.36884247698985195, 0.3785274766538449, 0.3505158295659493, 0.37127312104633325, 0.3764773048873489, 0.32875465297066764, 0.37869352207276896, 0.08888989929026248, 0.10042574345153621, 0.08914322519885154, 0.07463458235797205, 0.07227519399829907, 0.07865341269017301, 0.07847394179892142, 0.06322373355094346, 0.09917905797101556, 0.1367439865346387, 0.1412473982725505, 0.13714207830588787, 0.15970352802448784, 0.13881992174312963, 0.14942873100398157, 0.1364948338808779, 0.13856651921467456, 0.1332187284648786, 0.273050448609199, 0.23553673431531164, 0.25241790611224957, 0.23717494637941916, 0.2540488661069741, 0.2314627058182256, 0.25646180417191966, 0.24963844500635746, 0.2674776096607354, 0.19094682799505613, 0.18817432757678776, 0.1815699549992449, 0.16145410721796394, 0.19001882365380995, 0.18985534602221765, 0.21885743165859073, 0.18647297713571043, 0.17450750041417562, 0.1837759934956178, 0.19153725777052666, 0.1805694140486629, 0.1868657734268736, 0.20366426719623376, 0.1793440553470096, 0.19231329208702896, 0.17473085219674356, 0.17955910773160377, 0.18105815069039743, 0.19103304844563085, 0.21943382615943796, 0.1984861554112305, 0.23005022414341736, 0.21682776164456297, 0.1943566716023284, 0.2651667582664968, 0.1794446216991893, 0.34456168530677656, 0.1884235475426882, 0.1692010165254747, 0.35228775232588116, 0.1676602552002059, 0.48656887889459566, 0.15680968332817125, 0.30954165126871713, 0.4007981511392603, 0.36864139575201893, 0.32243507170408203, 0.1927604883707681, 0.16085684316636029, 0.22207353095096238, 0.18667662700668153, 0.29571049681248796, 0.3166262034221107, 0.15188842450756734, 0.17672594372350592, 0.19284387041700823, 0.19295372740868666, 0.17716611531103377, 0.20909030343435775, 0.18554802813367355, 0.17855031703124258, 0.18434317786356347, 0.1900543556081561, 0.06802552009319973, 0.06602888944897312, 0.06558143176916698, 0.07348629072400559, 0.08103114117603405, 0.0698015185026879, 0.09113153334378399, 0.07559440343908386, 0.0718245016414607]}, "mutation_prompt": null}
{"id": "9a1fcf9a-96c4-4188-aed9-d548d96eef53", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=20, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n\n    def __call__(self, func):\n        # Initialize harmony memory\n        harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        harmony_memory_fitness = np.array([func(h) for h in harmony_memory])\n\n        for _ in range(self.budget):\n            # Create a new harmony\n            new_harmony = np.zeros(self.dim)\n            for d in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    index = np.random.randint(self.harmony_memory_size)\n                    new_harmony[d] = harmony_memory[index, d] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                else:\n                    new_harmony[d] = np.random.uniform(-5.0, 5.0)\n\n            new_fitness = func(new_harmony)\n            # Update harmony memory if new harmony is better\n            if new_fitness < harmony_memory_fitness.max():\n                index = np.argmax(harmony_memory_fitness)\n                harmony_memory[index] = new_harmony\n                harmony_memory_fitness[index] = new_fitness\n\n        best_index = np.argmin(harmony_memory_fitness)\n        best_solution = harmony_memory[best_index]\n        return best_solution", "name": "HarmonySearch", "description": "Harmony Search (HS) algorithm is inspired by the musical improvisation process, where new solutions are created by harmonizing existing ones with random adjustments.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "274a6fc1-3f8f-4c2a-bce8-07547bb1b1e2", "metadata": {"aucs": [0.36036033266520606, 0.3353984926502662, 0.38597007406437556, 0.3603942670904051, 0.41913874096808135, 0.383527260718735, 0.35448369803611723, 0.4224781039119885, 0.42081550599973216, 0.12047356082102922, 0.08125412240551833, 0.10385108848709423, 0.11207828429745537, 0.15635503934695882, 0.11865871960142671, 0.11971069454146077, 0.1157114682284981, 0.09701379575888514, 0.16554337560798338, 0.1953783005657097, 0.15138531584564974, 0.16238328708383454, 0.1577366603894086, 0.20508829342016943, 0.14337775304539813, 0.16327226748812662, 0.1537906580581625, 0.16265680043384423, 0.17004292564371848, 0.12220847997912987, 0.1566002153983731, 0.1473821224681946, 0.15003484739712325, 0.15566111059161958, 0.12179303112105755, 0.1375106366590464, 0.24654825512887113, 0.19516381663913862, 0.19366474724534577, 0.23507323354384202, 0.20466046453996, 0.1927983268123119, 0.20568249546165673, 0.19718728370821637, 0.1903643659770049, 0.16556884563817365, 0.1658416717749387, 0.16455765260591504, 0.16564840615215504, 0.17187919328779133, 0.17207721799606368, 0.17538927119367964, 0.1939360209792137, 0.18800862629955595, 0.17919095652345063, 0.14679682853778175, 0.19806203244158893, 0.23780917252647638, 0.17858002852882893, 0.2016214981496075, 0.2008972481306408, 0.2798885483309771, 0.22169856554116407, 0.10038681557330442, 0.16767989599419253, 0.12288349062689607, 0.11632329227805838, 0.1116240314463921, 0.13121515773445913, 0.14556691303941993, 0.10819576053944713, 0.13673347605542474, 0.10948046504117903, 0.12140059642007928, 0.10830050766339916, 0.1651126465315993, 0.11489566787168348, 0.13793607979755507, 0.10680605189567016, 0.17612277239131058, 0.12291756654869646, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08094559248097777, 0.09803808089843857, 0.07670747719285953, 0.03805939613902298, 0.06058197354863337, 0.0414770494597958, 0.06925320272429702, 0.03366817353993412, 0.10070568252973566, 9.999999999998899e-05, 0.003533252426598299, 9.999999999998899e-05, 0.008398616177251683, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009200680594141697, 9.999999999998899e-05, 0.045566424265255256, 0.04227725610628785, 0.07137942887374649, 0.046265907767930714, 0.08274926218926881, 0.06461267965604256, 0.05838024246905682, 0.08768756448818238, 0.07244670402921749, 0.3205243614718831, 0.3238398476662523, 0.36884247698985195, 0.3785274766538449, 0.3505158295659493, 0.37127312104633325, 0.3764773048873489, 0.32875465297066764, 0.37869352207276896, 0.08888989929026248, 0.10042574345153621, 0.08914322519885154, 0.07463458235797205, 0.07227519399829907, 0.07865341269017301, 0.07847394179892142, 0.06322373355094346, 0.09917905797101556, 0.1367439865346387, 0.1412473982725505, 0.13714207830588787, 0.15970352802448784, 0.13881992174312963, 0.14942873100398157, 0.1364948338808779, 0.13856651921467456, 0.1332187284648786, 0.273050448609199, 0.23553673431531164, 0.25241790611224957, 0.23717494637941916, 0.2540488661069741, 0.2314627058182256, 0.25646180417191966, 0.24963844500635746, 0.2674776096607354, 0.19094682799505613, 0.18817432757678776, 0.1815699549992449, 0.16145410721796394, 0.19001882365380995, 0.18985534602221765, 0.21885743165859073, 0.18647297713571043, 0.17450750041417562, 0.1837759934956178, 0.19153725777052666, 0.1805694140486629, 0.1868657734268736, 0.20366426719623376, 0.1793440553470096, 0.19231329208702896, 0.17473085219674356, 0.17955910773160377, 0.18105815069039743, 0.19103304844563085, 0.21943382615943796, 0.1984861554112305, 0.23005022414341736, 0.21682776164456297, 0.1943566716023284, 0.2651667582664968, 0.1794446216991893, 0.34456168530677656, 0.1884235475426882, 0.1692010165254747, 0.35228775232588116, 0.1676602552002059, 0.48656887889459566, 0.15680968332817125, 0.30954165126871713, 0.4007981511392603, 0.36864139575201893, 0.32243507170408203, 0.1927604883707681, 0.16085684316636029, 0.22207353095096238, 0.18667662700668153, 0.29571049681248796, 0.3166262034221107, 0.15188842450756734, 0.17672594372350592, 0.19284387041700823, 0.19295372740868666, 0.17716611531103377, 0.20909030343435775, 0.18554802813367355, 0.17855031703124258, 0.18434317786356347, 0.1900543556081561, 0.06802552009319973, 0.06602888944897312, 0.06558143176916698, 0.07348629072400559, 0.08103114117603405, 0.0698015185026879, 0.09113153334378399, 0.07559440343908386, 0.0718245016414607]}, "mutation_prompt": null}
