{"id": "639de9e4-068c-4f5d-81b2-428c178ca4a4", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def fitness(x):\n            return func(x)\n\n        pop_size = 30\n        max_iter = self.budget // pop_size\n        pop = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        velocity = np.random.uniform(-1, 1, size=(pop_size, self.dim))\n        pbest = pop.copy()\n        gbest = pbest[np.argmin([fitness(ind) for ind in pbest])]\n\n        for _ in range(max_iter):\n            for i in range(pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - pop[i]) + 2 * r2 * (gbest - pop[i])\n                pop[i] = np.clip(pop[i] + velocity[i], -5.0, 5.0)\n                if fitness(pop[i]) < fitness(pbest[i]):\n                    pbest[i] = pop[i]\n                    if fitness(pop[i]) < fitness(gbest):\n                        gbest = pop[i]\n\n        return gbest", "name": "HybridPSODE", "description": "Utilizing a hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation in optimizing black box functions.", "configspace": "", "generation": 0, "fitness": 0.2419255785470623, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6780389662495077, 0.5828229948194701, 0.6788637235964063, 0.7472767436734381, 0.6629656282362428, 0.7148470115283899, 0.718465965251391, 0.6137201279612929, 0.6261435030855489, 0.19776062630858782, 0.13233777868195595, 9.999999999998899e-05, 0.027672760013270237, 0.23795968991301497, 0.04108500735459841, 0.36637839526831706, 0.03089466260571283, 0.364753267497158, 0.09036314809293977, 0.10129528344269234, 0.08517587631490009, 0.07155627904439443, 0.09173954334730716, 0.12108907796315382, 0.10473589998015975, 0.08938184502679902, 0.09227171183426619, 0.10190241803921674, 0.08409082585708527, 0.08539437155912855, 0.08340480907111536, 0.08429567800631266, 0.07932131593609815, 0.08625380426223495, 0.0870975007665975, 0.07886563974894889, 0.9869378428969968, 0.9942387966833925, 0.9884789631878009, 0.09967151665640317, 0.9892527352147238, 0.0995293604630364, 0.98740575761779, 0.9695023976368704, 0.9886833373282525, 0.3256918803228769, 0.05765016666335143, 0.2216927039375869, 0.21585384523197604, 0.19188005500869265, 0.3393986296109661, 0.156773343266711, 0.2329475347875134, 9.999999999998899e-05, 0.1690131940306554, 0.3545557861677415, 0.6431229122887626, 0.6951874442451784, 0.22511441910723717, 0.2019367106221902, 0.08572809117891445, 0.21025433506618485, 0.2131360342995302, 0.42963819475585674, 0.15709188188475331, 0.20088863962720938, 0.18320765490525193, 0.2253369934169217, 0.23531568971738304, 0.44157475589808937, 0.2400268649700702, 0.12494336597999012, 0.2872026717825793, 0.23981526790816454, 0.12065895107470426, 0.1991292488533123, 0.3512298736427356, 0.21429052743166943, 0.1845286597260859, 0.04321727849596224, 0.12406364233723566, 9.999999999998899e-05, 0.049070424818437486, 9.999999999998899e-05, 0.01460922185757385, 0.0367272777888773, 0.03497696616262014, 0.08549590354316383, 0.00341284471881953, 0.12295952443767222, 0.05005053600494069, 0.06474924156579198, 0.0665828799956274, 0.0585309741937583, 0.00167623345250012, 0.028531253255435374, 0.11728333938456492, 0.07200657657738174, 0.04894619556730062, 0.03785001310216196, 0.03356479115907751, 0.12961688972739072, 0.05354154240851261, 0.11361051261086907, 0.1454780632365893, 0.10000444494397376, 0.13743059147302594, 0.04891228828593308, 0.2766485021247219, 0.0889013382975381, 0.28762767209166573, 0.005426575903009101, 0.005660124368084829, 0.2673640876011786, 0.07301246295265806, 0.23665948874621634, 0.10197859255439379, 0.5241080095489438, 0.5084535417047489, 0.6164661805743823, 0.597958632311051, 0.5550038977296563, 0.6170015016795314, 0.5618818897657403, 0.5424288983851392, 0.5870936926577587, 0.07335008060037251, 0.07172722056345826, 0.00307968477660725, 0.0816253310077345, 0.09941048963984889, 0.08132597567707167, 0.07203615436205713, 0.07395247559018825, 0.10896275207420314, 0.16198230493118737, 0.2055648647991788, 0.15725461341502345, 0.39007262073927385, 0.1776441540053575, 0.16893760094679744, 0.14907703040030174, 0.18582171184238883, 0.17324996233809342, 0.27528749512684036, 0.33604713981457357, 0.35483176135874395, 0.3352471189635805, 0.2908784509449541, 0.33469969230571694, 0.301486721622954, 0.3597851111311625, 0.26431440983757437, 0.22585449404600988, 0.227954352369926, 0.2023027408131972, 0.1977795296383118, 0.2560338586738379, 0.23233561593094088, 0.27111952451127963, 0.2407706595768282, 0.15412732666057927, 0.2112133758197262, 0.17020530015010316, 0.1842530669878737, 0.1713834204542789, 0.18158864543775988, 0.18601350875319245, 0.19687663911154263, 0.18147234730697415, 0.21744572515934812, 0.1892462102243634, 0.1784730477471943, 0.17616326170622743, 0.16908692308934192, 0.17956145973526438, 0.1721259660290465, 0.2076251563824102, 0.20063091903285146, 0.17917494538005208, 0.8410822104458547, 0.18405650462796785, 0.09979331532875435, 0.7754455519803555, 0.19819124767834095, 0.19946174558591556, 0.09901048970400339, 0.16379538418208683, 0.19759132134740898, 0.7070251242977442, 0.1544115885156141, 0.10087974487594509, 0.6432773303250083, 0.1677414732392335, 0.20893296052432075, 0.20093236198576858, 0.7689808862676512, 0.835386565561911, 0.18104914296900743, 0.1784113684696842, 0.19303963502216648, 0.17662531274831672, 0.1764618446584314, 0.18270314843543278, 0.1821444854834463, 0.17602432481924024, 0.18755929002458382, 0.07732069083561433, 0.061358261451224694, 0.07354090937608149, 0.06890643641223382, 0.06717378471876256, 0.07312465789248346, 0.06585655534152934, 0.07137993890440686, 0.07306496704983378]}, "mutation_prompt": null}
{"id": "d03ae4f5-5145-4951-b1e4-6a378f789678", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def fitness(x):\n            return func(x)\n\n        pop_size = 30\n        max_iter = self.budget // pop_size\n        pop = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        velocity = np.random.uniform(-1, 1, size=(pop_size, self.dim))\n        pbest = pop.copy()\n        gbest = pbest[np.argmin([fitness(ind) for ind in pbest])]\n\n        for _ in range(max_iter):\n            for i in range(pop_size):\n                r1, r2 = np.random.uniform(0, 1, size=2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - pop[i]) + 2 * r2 * (gbest - pop[i])\n                pop[i] = np.clip(pop[i] + velocity[i], -5.0, 5.0)\n                if fitness(pop[i]) < fitness(pbest[i]):\n                    pbest[i] = pop[i]\n                    if fitness(pop[i]) < fitness(gbest):\n                        gbest = pop[i]\n\n        return gbest", "name": "HybridPSODE", "description": "Utilizing a hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation in optimizing black box functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "639de9e4-068c-4f5d-81b2-428c178ca4a4", "metadata": {"aucs": [0.6780389662495077, 0.5828229948194701, 0.6788637235964063, 0.7472767436734381, 0.6629656282362428, 0.7148470115283899, 0.718465965251391, 0.6137201279612929, 0.6261435030855489, 0.19776062630858782, 0.13233777868195595, 9.999999999998899e-05, 0.027672760013270237, 0.23795968991301497, 0.04108500735459841, 0.36637839526831706, 0.03089466260571283, 0.364753267497158, 0.09036314809293977, 0.10129528344269234, 0.08517587631490009, 0.07155627904439443, 0.09173954334730716, 0.12108907796315382, 0.10473589998015975, 0.08938184502679902, 0.09227171183426619, 0.10190241803921674, 0.08409082585708527, 0.08539437155912855, 0.08340480907111536, 0.08429567800631266, 0.07932131593609815, 0.08625380426223495, 0.0870975007665975, 0.07886563974894889, 0.9869378428969968, 0.9942387966833925, 0.9884789631878009, 0.09967151665640317, 0.9892527352147238, 0.0995293604630364, 0.98740575761779, 0.9695023976368704, 0.9886833373282525, 0.3256918803228769, 0.05765016666335143, 0.2216927039375869, 0.21585384523197604, 0.19188005500869265, 0.3393986296109661, 0.156773343266711, 0.2329475347875134, 9.999999999998899e-05, 0.1690131940306554, 0.3545557861677415, 0.6431229122887626, 0.6951874442451784, 0.22511441910723717, 0.2019367106221902, 0.08572809117891445, 0.21025433506618485, 0.2131360342995302, 0.42963819475585674, 0.15709188188475331, 0.20088863962720938, 0.18320765490525193, 0.2253369934169217, 0.23531568971738304, 0.44157475589808937, 0.2400268649700702, 0.12494336597999012, 0.2872026717825793, 0.23981526790816454, 0.12065895107470426, 0.1991292488533123, 0.3512298736427356, 0.21429052743166943, 0.1845286597260859, 0.04321727849596224, 0.12406364233723566, 9.999999999998899e-05, 0.049070424818437486, 9.999999999998899e-05, 0.01460922185757385, 0.0367272777888773, 0.03497696616262014, 0.08549590354316383, 0.00341284471881953, 0.12295952443767222, 0.05005053600494069, 0.06474924156579198, 0.0665828799956274, 0.0585309741937583, 0.00167623345250012, 0.028531253255435374, 0.11728333938456492, 0.07200657657738174, 0.04894619556730062, 0.03785001310216196, 0.03356479115907751, 0.12961688972739072, 0.05354154240851261, 0.11361051261086907, 0.1454780632365893, 0.10000444494397376, 0.13743059147302594, 0.04891228828593308, 0.2766485021247219, 0.0889013382975381, 0.28762767209166573, 0.005426575903009101, 0.005660124368084829, 0.2673640876011786, 0.07301246295265806, 0.23665948874621634, 0.10197859255439379, 0.5241080095489438, 0.5084535417047489, 0.6164661805743823, 0.597958632311051, 0.5550038977296563, 0.6170015016795314, 0.5618818897657403, 0.5424288983851392, 0.5870936926577587, 0.07335008060037251, 0.07172722056345826, 0.00307968477660725, 0.0816253310077345, 0.09941048963984889, 0.08132597567707167, 0.07203615436205713, 0.07395247559018825, 0.10896275207420314, 0.16198230493118737, 0.2055648647991788, 0.15725461341502345, 0.39007262073927385, 0.1776441540053575, 0.16893760094679744, 0.14907703040030174, 0.18582171184238883, 0.17324996233809342, 0.27528749512684036, 0.33604713981457357, 0.35483176135874395, 0.3352471189635805, 0.2908784509449541, 0.33469969230571694, 0.301486721622954, 0.3597851111311625, 0.26431440983757437, 0.22585449404600988, 0.227954352369926, 0.2023027408131972, 0.1977795296383118, 0.2560338586738379, 0.23233561593094088, 0.27111952451127963, 0.2407706595768282, 0.15412732666057927, 0.2112133758197262, 0.17020530015010316, 0.1842530669878737, 0.1713834204542789, 0.18158864543775988, 0.18601350875319245, 0.19687663911154263, 0.18147234730697415, 0.21744572515934812, 0.1892462102243634, 0.1784730477471943, 0.17616326170622743, 0.16908692308934192, 0.17956145973526438, 0.1721259660290465, 0.2076251563824102, 0.20063091903285146, 0.17917494538005208, 0.8410822104458547, 0.18405650462796785, 0.09979331532875435, 0.7754455519803555, 0.19819124767834095, 0.19946174558591556, 0.09901048970400339, 0.16379538418208683, 0.19759132134740898, 0.7070251242977442, 0.1544115885156141, 0.10087974487594509, 0.6432773303250083, 0.1677414732392335, 0.20893296052432075, 0.20093236198576858, 0.7689808862676512, 0.835386565561911, 0.18104914296900743, 0.1784113684696842, 0.19303963502216648, 0.17662531274831672, 0.1764618446584314, 0.18270314843543278, 0.1821444854834463, 0.17602432481924024, 0.18755929002458382, 0.07732069083561433, 0.061358261451224694, 0.07354090937608149, 0.06890643641223382, 0.06717378471876256, 0.07312465789248346, 0.06585655534152934, 0.07137993890440686, 0.07306496704983378]}, "mutation_prompt": null}
