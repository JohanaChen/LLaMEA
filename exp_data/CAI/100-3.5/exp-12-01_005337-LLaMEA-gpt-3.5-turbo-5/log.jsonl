{"id": "bd15ca15-f16e-4f69-9b54-cc425902dbef", "solution": "import numpy as np\n\nclass DEPSO:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        best_idx = np.argmin(fitness)\n        best_pos = pop[best_idx].copy()\n        \n        for _ in range(self.budget - self.pop_size):\n            new_pop = np.zeros((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = pop[idxs]\n                mutant = pop[i] + self.f * (a - pop[i]) + self.f * (b - c)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, pop[i])\n                pbest = pop[best_idx]\n                vel = self.w * (pop[i] + self.c1 * np.random.rand() * (pbest - pop[i]) + self.c2 * np.random.rand() * (best_pos - pop[i]) - pop[i])\n                new_pop[i] = trial + vel\n            new_fitness = np.apply_along_axis(func, 1, new_pop)\n            for i in range(self.pop_size):\n                if new_fitness[i] < fitness[i]:\n                    pop[i] = new_pop[i]\n                    fitness[i] = new_fitness[i]\n                    if new_fitness[i] < func(best_pos):\n                        best_pos = new_pop[i].copy()\n        return best_pos", "name": "DEPSO", "description": "Metaheuristic algorithm combining Differential Evolution (DE) with Particle Swarm Optimization (PSO) for global and local exploration in black box optimization.", "configspace": "", "generation": 0, "fitness": 0.3601358932441802, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.9040259778753688, 0.8877823250858308, 0.8982255072667082, 0.904913134638602, 0.8863579225783149, 0.895621310211791, 0.8836257096550819, 0.8911124515642966, 0.8985827094683111, 0.1721761427927473, 0.2277341988335666, 0.09785698686278388, 0.5431791633787988, 0.7890046503921191, 0.10463766102574212, 9.999999999998899e-05, 0.810448599697436, 0.037261442865139216, 0.10263225966388378, 0.12581046433617904, 0.1301344444042012, 0.12661495548063717, 0.1183329678716244, 0.10462220305367687, 0.12097633986760226, 0.14270776053301926, 0.13394504639912885, 0.0921329610879622, 0.10852791354727664, 0.09437913781127427, 0.09028406196563787, 0.08677558811891162, 0.08389182931240413, 0.11180867597413002, 0.09204022599963557, 0.11424754398516634, 0.9819584263346793, 0.9919113579040746, 0.9822999862430345, 0.9360552382132992, 0.9734346670841939, 0.22901561766023248, 0.9590579154360936, 0.9860135608271506, 0.9669944202241294, 0.29844315850910597, 0.2768855627681903, 0.45671250006778874, 0.42772718737652937, 0.5171192655054649, 0.27626687934524274, 0.18921442831224478, 0.17588989066937233, 0.2935813568199772, 0.22927851917372766, 0.8508233604485134, 0.832031281104316, 0.9039241379964473, 0.37727066797227204, 0.906861542071085, 0.23335803970256697, 0.8818394318510913, 0.8817992651315892, 0.1900132939868705, 0.13282320927307412, 0.13125789523305287, 0.22469580892617746, 0.15567490047280386, 0.14330161592867785, 0.14135726142373894, 0.21527424996038091, 0.163322670508251, 0.1524184417870913, 0.13344017735515112, 0.13126022404417004, 0.12940200336808705, 0.1416055829470202, 0.19950361914237424, 0.1511803662622735, 0.13090177078881482, 0.13426090156819115, 0.156677640862111, 0.6284614909974708, 0.20308913394227324, 0.21953902712150553, 0.70300400742538, 0.0702732283298596, 0.0660039218753602, 0.020292770863928333, 0.649376361660708, 0.1525598650332466, 0.1475051036446704, 0.46542480819578946, 0.8039881993907864, 0.5719714177112416, 0.31697370207493236, 0.7917083098124162, 0.1451132831793448, 0.7729565433104633, 0.35893505361631606, 0.12221906605981858, 0.1707790242425492, 0.4176865100903736, 0.23402722179250401, 0.11335957699290555, 0.33020024285351823, 0.19413105472173808, 0.0631731163372451, 0.22441669724408297, 0.45156784329310484, 0.17440538699653518, 0.16591403703280705, 0.2255227654167996, 0.4946760768583853, 0.20132336229647851, 0.25498174715883914, 0.13052608609562322, 0.581270072534148, 0.8509407992296574, 0.6931402622191509, 0.8630898918577999, 0.706796935949358, 0.8363919888848868, 0.8635685311072996, 0.6480299228512016, 0.6720564696608999, 0.1372619347055516, 0.11199377351745876, 0.09201998663118449, 0.13100609669570562, 0.1356889994286894, 0.14601948874669557, 0.13539769204689, 0.1533681901822136, 0.09583809911142127, 0.14308811618374306, 0.4886520241478908, 0.26246088251342037, 0.24898676132288744, 0.5093625542315324, 0.26204269148930137, 0.6021598929002501, 0.17119032872601347, 0.22401142631053894, 0.28662611149623674, 0.630522082610766, 0.38126715445347126, 0.30165663714444535, 0.4682688455190095, 0.6402288923921049, 0.6842152100640941, 0.7444437583049367, 0.6865751527322009, 0.30453990702755906, 0.3239853986760467, 0.48997718188560513, 0.6494473418359048, 0.39513185453936694, 0.5455022782199646, 0.24163584453328868, 0.6168278897417803, 0.5652562764685238, 0.2237558834076705, 0.20591164228899816, 0.19516923680903397, 0.2267160548094843, 0.2454921515296975, 0.20736161790770546, 0.19942111062844448, 0.2213950155043919, 0.2161227198691018, 0.19883548062049217, 0.6360010391255297, 0.21818887077457727, 0.22139561973338773, 0.683817043787992, 0.19642177374124858, 0.17752760666539436, 0.22221924351483024, 0.2228082492144654, 0.9254888789869258, 0.9052362001467681, 0.15041210759497703, 0.9327100691751149, 0.1996367014650744, 0.19828522662054837, 0.09931461543626718, 0.16836924476741733, 0.8969841495772177, 0.9224424486927184, 0.15601016848484417, 0.11154923791529658, 0.21154041908464105, 0.4161029524927571, 0.212204274165804, 0.10490237599291341, 0.09348500651849334, 0.3468503823065605, 0.1808020796542431, 0.1869685447403272, 0.17521554521910299, 0.180278865199626, 0.18312998137529712, 0.18708127956647003, 0.18178177527718065, 0.18017686527353216, 0.1851382453774707, 0.0673916141237918, 0.09163072730531552, 0.11717160343662358, 0.09062694712162467, 0.08630254117814562, 0.09180190424000645, 0.08082021700574993, 0.09036994606308002, 0.0979021925327439]}, "mutation_prompt": null}
{"id": "a5f1ea41-4988-474f-952a-7065d62d57c0", "solution": "import numpy as np\n\nclass DEPSO:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, pop)\n        best_idx = np.argmin(fitness)\n        best_pos = pop[best_idx].copy()\n        \n        for _ in range(self.budget - self.pop_size):\n            new_pop = np.zeros((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                idxs = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = pop[idxs]\n                mutant = pop[i] + self.f * (a - pop[i]) + self.f * (b - c)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, pop[i])\n                pbest = pop[best_idx]\n                vel = self.w * (pop[i] + self.c1 * np.random.rand() * (pbest - pop[i]) + self.c2 * np.random.rand() * (best_pos - pop[i]) - pop[i])\n                new_pop[i] = trial + vel\n            new_fitness = np.apply_along_axis(func, 1, new_pop)\n            for i in range(self.pop_size):\n                if new_fitness[i] < fitness[i]:\n                    pop[i] = new_pop[i]\n                    fitness[i] = new_fitness[i]\n                    if new_fitness[i] < func(best_pos):\n                        best_pos = new_pop[i].copy()\n        return best_pos", "name": "DEPSO", "description": "Metaheuristic algorithm combining Differential Evolution (DE) with Particle Swarm Optimization (PSO) for global and local exploration in black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bd15ca15-f16e-4f69-9b54-cc425902dbef", "metadata": {"aucs": [0.9040259778753688, 0.8877823250858308, 0.8982255072667082, 0.904913134638602, 0.8863579225783149, 0.895621310211791, 0.8836257096550819, 0.8911124515642966, 0.8985827094683111, 0.1721761427927473, 0.2277341988335666, 0.09785698686278388, 0.5431791633787988, 0.7890046503921191, 0.10463766102574212, 9.999999999998899e-05, 0.810448599697436, 0.037261442865139216, 0.10263225966388378, 0.12581046433617904, 0.1301344444042012, 0.12661495548063717, 0.1183329678716244, 0.10462220305367687, 0.12097633986760226, 0.14270776053301926, 0.13394504639912885, 0.0921329610879622, 0.10852791354727664, 0.09437913781127427, 0.09028406196563787, 0.08677558811891162, 0.08389182931240413, 0.11180867597413002, 0.09204022599963557, 0.11424754398516634, 0.9819584263346793, 0.9919113579040746, 0.9822999862430345, 0.9360552382132992, 0.9734346670841939, 0.22901561766023248, 0.9590579154360936, 0.9860135608271506, 0.9669944202241294, 0.29844315850910597, 0.2768855627681903, 0.45671250006778874, 0.42772718737652937, 0.5171192655054649, 0.27626687934524274, 0.18921442831224478, 0.17588989066937233, 0.2935813568199772, 0.22927851917372766, 0.8508233604485134, 0.832031281104316, 0.9039241379964473, 0.37727066797227204, 0.906861542071085, 0.23335803970256697, 0.8818394318510913, 0.8817992651315892, 0.1900132939868705, 0.13282320927307412, 0.13125789523305287, 0.22469580892617746, 0.15567490047280386, 0.14330161592867785, 0.14135726142373894, 0.21527424996038091, 0.163322670508251, 0.1524184417870913, 0.13344017735515112, 0.13126022404417004, 0.12940200336808705, 0.1416055829470202, 0.19950361914237424, 0.1511803662622735, 0.13090177078881482, 0.13426090156819115, 0.156677640862111, 0.6284614909974708, 0.20308913394227324, 0.21953902712150553, 0.70300400742538, 0.0702732283298596, 0.0660039218753602, 0.020292770863928333, 0.649376361660708, 0.1525598650332466, 0.1475051036446704, 0.46542480819578946, 0.8039881993907864, 0.5719714177112416, 0.31697370207493236, 0.7917083098124162, 0.1451132831793448, 0.7729565433104633, 0.35893505361631606, 0.12221906605981858, 0.1707790242425492, 0.4176865100903736, 0.23402722179250401, 0.11335957699290555, 0.33020024285351823, 0.19413105472173808, 0.0631731163372451, 0.22441669724408297, 0.45156784329310484, 0.17440538699653518, 0.16591403703280705, 0.2255227654167996, 0.4946760768583853, 0.20132336229647851, 0.25498174715883914, 0.13052608609562322, 0.581270072534148, 0.8509407992296574, 0.6931402622191509, 0.8630898918577999, 0.706796935949358, 0.8363919888848868, 0.8635685311072996, 0.6480299228512016, 0.6720564696608999, 0.1372619347055516, 0.11199377351745876, 0.09201998663118449, 0.13100609669570562, 0.1356889994286894, 0.14601948874669557, 0.13539769204689, 0.1533681901822136, 0.09583809911142127, 0.14308811618374306, 0.4886520241478908, 0.26246088251342037, 0.24898676132288744, 0.5093625542315324, 0.26204269148930137, 0.6021598929002501, 0.17119032872601347, 0.22401142631053894, 0.28662611149623674, 0.630522082610766, 0.38126715445347126, 0.30165663714444535, 0.4682688455190095, 0.6402288923921049, 0.6842152100640941, 0.7444437583049367, 0.6865751527322009, 0.30453990702755906, 0.3239853986760467, 0.48997718188560513, 0.6494473418359048, 0.39513185453936694, 0.5455022782199646, 0.24163584453328868, 0.6168278897417803, 0.5652562764685238, 0.2237558834076705, 0.20591164228899816, 0.19516923680903397, 0.2267160548094843, 0.2454921515296975, 0.20736161790770546, 0.19942111062844448, 0.2213950155043919, 0.2161227198691018, 0.19883548062049217, 0.6360010391255297, 0.21818887077457727, 0.22139561973338773, 0.683817043787992, 0.19642177374124858, 0.17752760666539436, 0.22221924351483024, 0.2228082492144654, 0.9254888789869258, 0.9052362001467681, 0.15041210759497703, 0.9327100691751149, 0.1996367014650744, 0.19828522662054837, 0.09931461543626718, 0.16836924476741733, 0.8969841495772177, 0.9224424486927184, 0.15601016848484417, 0.11154923791529658, 0.21154041908464105, 0.4161029524927571, 0.212204274165804, 0.10490237599291341, 0.09348500651849334, 0.3468503823065605, 0.1808020796542431, 0.1869685447403272, 0.17521554521910299, 0.180278865199626, 0.18312998137529712, 0.18708127956647003, 0.18178177527718065, 0.18017686527353216, 0.1851382453774707, 0.0673916141237918, 0.09163072730531552, 0.11717160343662358, 0.09062694712162467, 0.08630254117814562, 0.09180190424000645, 0.08082021700574993, 0.09036994606308002, 0.0979021925327439]}, "mutation_prompt": null}
