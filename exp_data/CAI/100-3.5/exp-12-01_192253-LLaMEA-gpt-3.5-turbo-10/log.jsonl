{"id": "a3b689df-9fc5-4212-a531-4bc519ff8c97", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30, f=0.5, cr=0.9, w=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.f = f\n        self.cr = cr\n        self.w = w\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_solution = swarm[np.argmin([func(x) for x in swarm])]\n        \n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                r1, r2, r3 = np.random.choice(self.swarm_size, 3, replace=False)\n                v = velocities[i] + self.f * (swarm[r1] - swarm[i]) + self.cr * (swarm[r2] - swarm[r3])\n                new_position = swarm[i] + v\n                new_position = np.clip(new_position, -5.0, 5.0)\n                \n                if func(new_position) < func(swarm[i]):\n                    swarm[i] = new_position\n                    velocities[i] = v\n\n                if func(swarm[i]) < func(best_solution):\n                    best_solution = swarm[i]\n\n        return best_solution", "name": "HybridPSODE", "description": "A novel Metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) techniques for black box optimization.", "configspace": "", "generation": 0, "fitness": 0.10572907450293055, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.13081714830651492, 0.13717119673556932, 0.1561720730084999, 0.16055009972263046, 0.14732450544739095, 0.15302805454415214, 0.154825810724192, 0.14771033452520899, 0.15134936129075505, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02330560678835314, 0.03168943877437158, 0.02415888380204434, 0.034074220666526545, 0.02447822231317698, 0.03658662448024752, 0.03268244109008789, 0.025333207458981488, 0.026536079697232928, 0.015134184141682105, 0.01504760202757005, 0.010869233932513822, 0.02121472420975845, 0.017654986873001488, 0.016567334882717333, 0.011252927960388126, 0.016819789544118557, 0.008922782885127156, 0.959439751241949, 0.9819095697873057, 0.9738187544325615, 0.9369918257644225, 0.9405400735410151, 0.9523996923308815, 0.953979446888424, 0.9340593714589746, 0.9710597446279261, 0.04536516004334468, 0.02807900779105743, 0.049470963064955686, 0.05397432842052097, 0.02620183617424887, 0.07096873744068821, 0.04380082301267485, 0.04964308909383586, 0.06053172718712008, 0.12109409659672943, 0.09810241995965407, 0.08365456273050353, 0.10334042149906031, 0.1015642647645858, 0.0878721057758487, 0.09834365482460894, 0.08612815883308467, 0.11242518285482406, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0092919700989752, 0.00826507421521272, 0.0074724562317586285, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013372351980786124, 0.025300113032352467, 0.026416945754826004, 0.009011083036782663, 0.04111871697704139, 0.02643774550058242, 0.0025127025785898205, 0.005049658140320212, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030548225849710287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15639791543234494, 0.19250024507072716, 0.1945921228499271, 0.17797539212109426, 0.16479565183382505, 0.1454973911714782, 0.1770445938582037, 0.17229728799980515, 0.15465744241839852, 0.03672734702043978, 0.044960839644196726, 0.0280182708086546, 0.06197969108700563, 0.027901244358832233, 0.029348091249166486, 0.03442965340659321, 0.02534246397109452, 0.04320890646771369, 0.1352616799989106, 0.11536783425930475, 0.1333409919049824, 0.18758440351201833, 0.130360331321433, 0.11400223201531934, 0.10828794362440963, 0.14470036275372222, 0.10431649575288626, 0.1420733984563327, 0.13790474797499064, 0.1536284658054159, 0.13999581510742642, 0.1389642008725679, 0.1388165921505684, 0.1426679804719463, 0.1822255536418811, 0.14650069824756573, 0.06924665713661071, 0.09496913158669174, 0.0953653177842545, 0.10529714756665165, 0.08267537477358422, 0.08519009287834944, 0.09573499477109204, 0.10875889263231298, 0.09853828009522625, 0.12959566535711653, 0.10944697794448488, 0.1420625705904791, 0.13603489753982634, 0.12871650840220317, 0.14936103612391072, 0.12656023542218042, 0.13437802221690576, 0.12720974314107736, 0.053193683518926616, 0.00767473806987673, 0.04156054160341249, 0.02858065543041688, 0.12898197959665558, 0.029026725810869514, 9.999999999998899e-05, 0.12060369284957084, 0.08317232035154354, 0.11970998338861971, 0.11517834410193206, 0.13351834406486596, 0.129685109516961, 0.1207914665021157, 0.13347609653984094, 0.13214057193872175, 0.10446708605021904, 0.10932788151876793, 0.13545543496717605, 0.10981810759551003, 0.09167975848749288, 0.10505946626533369, 0.16705296532846914, 0.14327887346206514, 0.117648465340085, 0.15524789431597164, 0.17470081284813077, 0.16821289019429098, 0.16229658425527016, 0.15713894653257643, 0.1625914412332906, 0.18188693330623573, 0.1676918727655793, 0.1601374305705462, 0.1714303967091435, 0.16393179823269444, 0.05142881893195006, 0.035348574479067474, 0.035301942624553106, 0.03456810614673633, 0.03988825297124132, 0.033254914985267336, 0.03323486209456428, 0.030149309284216885, 0.03660090714226372]}, "mutation_prompt": null}
{"id": "e2478638-c239-4683-8c43-c8ced978d797", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30, f=0.5, cr=0.9, w=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.f = f\n        self.cr = cr\n        self.w = w\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_solution = swarm[np.argmin([func(x) for x in swarm])\n        \n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                r1, r2, r3 = np.random.choice(self.swarm_size, 3, replace=False)\n                v = velocities[i] + self.f * (swarm[r1] - swarm[i]) + self.cr * (swarm[r2] - swarm[r3])\n                new_position = swarm[i] + v\n                new_position = np.clip(new_position, -5.0, 5.0)\n                \n                # Introducing crowding distance term for diversity maintenance\n                crowding_distance = np.linalg.norm(swarm - swarm[i], axis=1).sum()\n                fitness_new = func(new_position) - crowding_distance\n                fitness_old = func(swarm[i]) - crowding_distance\n                \n                if fitness_new < fitness_old:\n                    swarm[i] = new_position\n                    velocities[i] = v\n\n                if fitness_new < func(best_solution):\n                    best_solution = swarm[i]\n\n        return best_solution", "name": "HybridPSODE", "description": "Improving the diversity maintenance by adding a crowding distance term to the fitness evaluation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 17, 9, '        for _ in range(self.budget):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 17, 9, '        for _ in range(self.budget):\\n'))", "parent_id": "a3b689df-9fc5-4212-a531-4bc519ff8c97", "metadata": {}, "mutation_prompt": null}
