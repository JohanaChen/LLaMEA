{"id": "bbef21e4-2564-48f1-99d9-722dfcb28a93", "solution": "import numpy as np\n\nclass AntBeeOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.rho = 0.1\n        self.num_ants = 10\n        self.num_bees = 10\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            # Ant phase\n            ant_solutions = [best_solution + np.random.uniform(-self.rho, self.rho, self.dim) for _ in range(self.num_ants)]\n            ant_solutions = [np.clip(solution, self.lower_bound, self.upper_bound) for solution in ant_solutions]\n            ant_fitness = [func(solution) for solution in ant_solutions]\n            ant_best_idx = np.argmin(ant_fitness)\n            \n            # Bee phase\n            bee_solutions = [best_solution + np.random.normal(0, 1, self.dim) for _ in range(self.num_bees)]\n            bee_solutions = [np.clip(solution, self.lower_bound, self.upper_bound) for solution in bee_solutions]\n            bee_fitness = [func(solution) for solution in bee_solutions]\n            bee_best_idx = np.argmin(bee_fitness)\n            \n            if ant_fitness[ant_best_idx] < best_fitness:\n                best_solution = ant_solutions[ant_best_idx]\n                best_fitness = ant_fitness[ant_best_idx]\n            if bee_fitness[bee_best_idx] < best_fitness:\n                best_solution = bee_solutions[bee_best_idx]\n                best_fitness = bee_fitness[bee_best_idx]\n        \n        return best_solution", "name": "AntBeeOptimization", "description": "A novel metaheuristic algorithm inspired by the behavior of social insects to optimize black box functions using a combination of ant colony optimization and artificial bee colony algorithms.", "configspace": "", "generation": 0, "fitness": 0.22415731465557145, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.4817245344531751, 0.5146858362738429, 0.5117979418579837, 0.4744968019155902, 0.49833158049566106, 0.488962535042179, 0.49111318781694213, 0.4762426454497788, 0.47680886985226956, 9.999999999998899e-05, 0.04805407029179365, 9.999999999998899e-05, 0.004539715957129764, 0.057291290447906484, 9.999999999998899e-05, 9.999999999998899e-05, 0.05542814009851549, 9.999999999998899e-05, 0.07162418451770391, 0.08602952741358005, 0.12285065170779941, 0.1306826851890881, 0.08563124165657265, 0.07288841035736626, 0.17111413808750475, 0.09951616695803223, 0.08761278812266626, 0.06999932284409338, 0.07696738609166165, 0.058201884861094566, 0.08951847609694874, 0.10343802945048597, 0.053224951507260254, 0.1051170451489446, 0.07248585876576019, 0.09448085005813422, 0.9630363366673819, 0.9621288383218006, 0.949770117282846, 0.9435102044037307, 0.9692466731992768, 0.9715322058409421, 0.9695503491990797, 0.9481194413793819, 0.9737672080797839, 0.3451410825829727, 0.36204682092021523, 0.3511932175981749, 0.33937740531727345, 0.39664791719330494, 0.3665525052254427, 0.3706708930242453, 0.3531748449545904, 0.357728253366146, 0.44897840120182075, 0.19127650447408728, 0.6661595281811213, 0.2073671512409372, 0.20128312709776086, 0.25583514642028726, 0.22476800302388433, 0.2164502885861238, 0.2297031397087288, 0.22240532842502447, 0.13305355779281658, 0.1944834923429728, 0.12932441490808433, 0.1816176263022563, 0.1260587907448547, 0.18065752839641647, 0.18380031316333345, 0.1793768099162839, 0.17852548125880308, 0.1749080465974685, 0.1954205453830974, 0.24926350049851242, 0.18791974106947096, 0.18380602010855684, 0.16834740969405992, 0.18868766217989474, 0.17867952321899905, 0.040599308475366525, 0.0005094323064173123, 0.009013801289254442, 0.05123498202931698, 0.010739257159235738, 0.02610875689254244, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10567611004806954, 0.09166814972215653, 0.13653650082088242, 0.11192104095118083, 0.04130046491234518, 0.02529405116352723, 0.1545780277653912, 0.054635095986489635, 0.11427380042727397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002003529759163958, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11539593135279924, 0.11237286031370108, 0.04669550518266119, 0.12663357875619508, 0.0937956234849947, 0.1057897525292596, 0.12443058641835791, 0.08049688377726871, 0.13892492651543176, 0.446723190947807, 0.46496229001544753, 0.4489052807328786, 0.4383979593345587, 0.4560957966635154, 0.47346688670140336, 0.47809536896519067, 0.5000780696776752, 0.4859385554319099, 0.10467117094272838, 0.06912137737971502, 0.09842302149178339, 0.07313630119942571, 0.10355719385879092, 0.06930122246191806, 0.14615850714801493, 0.14644518201535917, 0.05902951576738946, 0.1452447187820397, 0.16880261420706955, 0.2986244081050137, 0.24325170362871884, 0.23063190253070498, 0.19149571432732504, 0.21136252208142847, 0.19803622407696642, 0.23856292987182692, 0.31893575035072463, 0.22816342765079212, 0.1762098951089598, 0.2458207792595365, 0.3084035848857962, 0.11844978096763803, 0.19994111831714712, 0.21349034647244647, 0.24913436449062853, 0.2195025242055887, 0.15908003159448658, 0.11463081714820711, 0.25236416339747514, 0.15411088729288536, 0.2657956911599799, 0.17022714697116248, 0.14350723123027742, 0.21623130124369416, 0.22540227832183013, 0.20861661346207538, 0.2097534798655727, 0.2176549473870426, 0.2225824831163824, 0.21127259250726604, 0.19288390023029212, 0.2413995465376768, 0.23762084672801564, 0.1808243265625733, 0.1766731691646306, 0.1801929669766218, 0.18766017703090876, 0.18033273587735454, 0.19342077900017862, 0.18793203774294887, 0.18550810981562849, 0.18391111819627626, 0.18895137548304297, 0.13748481882836638, 0.7590330790120353, 0.1722703922043033, 0.19524351900210124, 0.7832995580760906, 0.13494732521175246, 0.14947751071228899, 0.16678634656939373, 0.7008760078104412, 0.11316477916827494, 0.631652088594024, 0.1692839849378328, 0.21324180983434038, 0.15567423773034583, 0.6791141125550315, 0.16868707509945835, 0.09486414085278339, 0.1955254796495164, 0.18035635621022206, 0.1810051433707378, 0.19031096664682223, 0.19987465773498203, 0.17905859040939198, 0.20925214384223068, 0.19478763906791718, 0.18911597752533105, 0.1451592628405013, 0.09045666767774696, 0.09957783977195345, 0.08115740980994302, 0.06834287726986477, 0.08903364482902854, 0.07853107959817263, 0.06436646989458317, 0.07741491583628701]}, "mutation_prompt": null}
{"id": "7c5179a3-f790-4f41-b206-79a187e5aa75", "solution": "import numpy as np\n\nclass AntBeeOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.rho = 0.1\n        self.num_ants = 10\n        self.num_bees = 10\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            # Ant phase\n            ant_solutions = [best_solution + np.random.uniform(-self.rho, self.rho, self.dim) for _ in range(self.num_ants)]\n            ant_solutions = [np.clip(solution, self.lower_bound, self.upper_bound) for solution in ant_solutions]\n            ant_fitness = [func(solution) for solution in ant_solutions]\n            ant_best_idx = np.argmin(ant_fitness)\n            \n            # Bee phase\n            bee_solutions = [best_solution + np.random.normal(0, 1, self.dim) for _ in range(self.num_bees)]\n            bee_solutions = [np.clip(solution, self.lower_bound, self.upper_bound) for solution in bee_solutions]\n            bee_fitness = [func(solution) for solution in bee_solutions]\n            bee_best_idx = np.argmin(bee_fitness)\n            \n            if ant_fitness[ant_best_idx] < best_fitness:\n                best_solution = ant_solutions[ant_best_idx]\n                best_fitness = ant_fitness[ant_best_idx]\n            if bee_fitness[bee_best_idx] < best_fitness:\n                best_solution = bee_solutions[bee_best_idx]\n                best_fitness = bee_fitness[bee_best_idx]\n        \n        return best_solution", "name": "AntBeeOptimization", "description": "A novel metaheuristic algorithm inspired by the behavior of social insects to optimize black box functions using a combination of ant colony optimization and artificial bee colony algorithms.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bbef21e4-2564-48f1-99d9-722dfcb28a93", "metadata": {"aucs": [0.4817245344531751, 0.5146858362738429, 0.5117979418579837, 0.4744968019155902, 0.49833158049566106, 0.488962535042179, 0.49111318781694213, 0.4762426454497788, 0.47680886985226956, 9.999999999998899e-05, 0.04805407029179365, 9.999999999998899e-05, 0.004539715957129764, 0.057291290447906484, 9.999999999998899e-05, 9.999999999998899e-05, 0.05542814009851549, 9.999999999998899e-05, 0.07162418451770391, 0.08602952741358005, 0.12285065170779941, 0.1306826851890881, 0.08563124165657265, 0.07288841035736626, 0.17111413808750475, 0.09951616695803223, 0.08761278812266626, 0.06999932284409338, 0.07696738609166165, 0.058201884861094566, 0.08951847609694874, 0.10343802945048597, 0.053224951507260254, 0.1051170451489446, 0.07248585876576019, 0.09448085005813422, 0.9630363366673819, 0.9621288383218006, 0.949770117282846, 0.9435102044037307, 0.9692466731992768, 0.9715322058409421, 0.9695503491990797, 0.9481194413793819, 0.9737672080797839, 0.3451410825829727, 0.36204682092021523, 0.3511932175981749, 0.33937740531727345, 0.39664791719330494, 0.3665525052254427, 0.3706708930242453, 0.3531748449545904, 0.357728253366146, 0.44897840120182075, 0.19127650447408728, 0.6661595281811213, 0.2073671512409372, 0.20128312709776086, 0.25583514642028726, 0.22476800302388433, 0.2164502885861238, 0.2297031397087288, 0.22240532842502447, 0.13305355779281658, 0.1944834923429728, 0.12932441490808433, 0.1816176263022563, 0.1260587907448547, 0.18065752839641647, 0.18380031316333345, 0.1793768099162839, 0.17852548125880308, 0.1749080465974685, 0.1954205453830974, 0.24926350049851242, 0.18791974106947096, 0.18380602010855684, 0.16834740969405992, 0.18868766217989474, 0.17867952321899905, 0.040599308475366525, 0.0005094323064173123, 0.009013801289254442, 0.05123498202931698, 0.010739257159235738, 0.02610875689254244, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10567611004806954, 0.09166814972215653, 0.13653650082088242, 0.11192104095118083, 0.04130046491234518, 0.02529405116352723, 0.1545780277653912, 0.054635095986489635, 0.11427380042727397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002003529759163958, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11539593135279924, 0.11237286031370108, 0.04669550518266119, 0.12663357875619508, 0.0937956234849947, 0.1057897525292596, 0.12443058641835791, 0.08049688377726871, 0.13892492651543176, 0.446723190947807, 0.46496229001544753, 0.4489052807328786, 0.4383979593345587, 0.4560957966635154, 0.47346688670140336, 0.47809536896519067, 0.5000780696776752, 0.4859385554319099, 0.10467117094272838, 0.06912137737971502, 0.09842302149178339, 0.07313630119942571, 0.10355719385879092, 0.06930122246191806, 0.14615850714801493, 0.14644518201535917, 0.05902951576738946, 0.1452447187820397, 0.16880261420706955, 0.2986244081050137, 0.24325170362871884, 0.23063190253070498, 0.19149571432732504, 0.21136252208142847, 0.19803622407696642, 0.23856292987182692, 0.31893575035072463, 0.22816342765079212, 0.1762098951089598, 0.2458207792595365, 0.3084035848857962, 0.11844978096763803, 0.19994111831714712, 0.21349034647244647, 0.24913436449062853, 0.2195025242055887, 0.15908003159448658, 0.11463081714820711, 0.25236416339747514, 0.15411088729288536, 0.2657956911599799, 0.17022714697116248, 0.14350723123027742, 0.21623130124369416, 0.22540227832183013, 0.20861661346207538, 0.2097534798655727, 0.2176549473870426, 0.2225824831163824, 0.21127259250726604, 0.19288390023029212, 0.2413995465376768, 0.23762084672801564, 0.1808243265625733, 0.1766731691646306, 0.1801929669766218, 0.18766017703090876, 0.18033273587735454, 0.19342077900017862, 0.18793203774294887, 0.18550810981562849, 0.18391111819627626, 0.18895137548304297, 0.13748481882836638, 0.7590330790120353, 0.1722703922043033, 0.19524351900210124, 0.7832995580760906, 0.13494732521175246, 0.14947751071228899, 0.16678634656939373, 0.7008760078104412, 0.11316477916827494, 0.631652088594024, 0.1692839849378328, 0.21324180983434038, 0.15567423773034583, 0.6791141125550315, 0.16868707509945835, 0.09486414085278339, 0.1955254796495164, 0.18035635621022206, 0.1810051433707378, 0.19031096664682223, 0.19987465773498203, 0.17905859040939198, 0.20925214384223068, 0.19478763906791718, 0.18911597752533105, 0.1451592628405013, 0.09045666767774696, 0.09957783977195345, 0.08115740980994302, 0.06834287726986477, 0.08903364482902854, 0.07853107959817263, 0.06436646989458317, 0.07741491583628701]}, "mutation_prompt": null}
