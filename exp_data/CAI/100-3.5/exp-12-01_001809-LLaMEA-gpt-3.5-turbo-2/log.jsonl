{"id": "35a848b6-0644-416b-8ecc-2e232f1cbced", "solution": "import numpy as np\n\nclass HybridFireflyGeneticAlgorithm:\n    def __init__(self, budget, dim, num_fireflies=20, num_gen=100, p_crossover=0.8, p_mutation=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_fireflies = num_fireflies\n        self.num_gen = num_gen\n        self.p_crossover = p_crossover\n        self.p_mutation = p_mutation\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_fireflies, self.dim))\n\n        def firefly_move(curr_firefly, best_firefly):\n            beta0 = 1.0\n            gamma = 0.1\n            alpha = 0.2\n            epsilon = 0.01\n            r = np.linalg.norm(curr_firefly - best_firefly)\n            beta = beta0 * np.exp(-gamma * r**2)\n            return curr_firefly + alpha * (best_firefly - curr_firefly) + epsilon * (np.random.rand(self.dim) - 0.5)\n\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def genetic_crossover(parent1, parent2):\n            mask = np.random.randint(0, 2, size=self.dim)\n            child1 = np.where(mask, parent1, parent2)\n            child2 = np.where(mask, parent2, parent1)\n            return child1, child2\n\n        def genetic_mutation(individual):\n            mask = np.random.rand(self.dim) < self.p_mutation\n            individual[mask] = np.random.uniform(-5.0, 5.0, size=np.sum(mask))\n            return individual\n\n        population = initialize_population()\n        fitness_values = evaluate_population(population)\n        best_index = np.argmin(fitness_values)\n        best_solution = population[best_index].copy()\n\n        for _ in range(self.num_gen):\n            for i in range(self.num_fireflies):\n                new_position = firefly_move(population[i], best_solution)\n                if np.any(new_position < -5.0) or np.any(new_position > 5.0):\n                    continue\n                new_fitness = func(new_position)\n                if new_fitness < fitness_values[i]:\n                    population[i] = new_position\n                    fitness_values[i] = new_fitness\n\n            population = np.array([genetic_mutation(individual) for individual in population])\n\n            for _ in range(self.num_fireflies // 2):\n                idx1, idx2 = np.random.choice(self.num_fireflies, size=2, replace=False)\n                if np.random.rand() < self.p_crossover:\n                    population[idx1], population[idx2] = genetic_crossover(population[idx1], population[idx2])\n\n            current_best_index = np.argmin(fitness_values)\n            if fitness_values[current_best_index] < fitness_values[best_index]:\n                best_index = current_best_index\n                best_solution = population[best_index].copy()\n\n        return best_solution", "name": "HybridFireflyGeneticAlgorithm", "description": "Hybrid Firefly-Genetic Algorithm: Combining the exploration of fireflies with the exploitation of genetic algorithms to efficiently optimize black box functions.", "configspace": "", "generation": 0, "fitness": 0.08968575114636679, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.24159432028934646, 0.18128548289053892, 0.2005231485525396, 0.12803845220721344, 0.1692474649946456, 0.1811315243032734, 0.20879845694983634, 0.12960362148697535, 0.12426137502985146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04463653668481804, 0.03628333573232689, 0.03251494341695038, 0.03182294817583009, 0.04453893462581693, 0.05480206285524458, 0.05194339449505059, 0.053936433953862606, 0.06928681288580296, 0.03324345333786527, 0.02863921591754859, 0.03964028074000003, 0.0377026534302326, 0.024493022041112145, 0.04979598183691958, 0.029565648741778916, 0.034478040486058625, 0.04238793547622044, 0.04733806475474556, 0.04352361628011914, 0.0477356074428712, 0.07971059503831734, 0.07195577596981917, 0.056272390580463405, 0.07591881274259127, 0.07435257667619188, 0.05161940266294518, 0.1066624511872214, 0.08366862719896584, 0.07583286741147566, 0.06472431359117858, 0.1039210406023614, 0.0901177536592328, 0.003196883796232952, 0.09760230236766998, 0.028929174249352263, 0.1243474119291832, 0.13816131900453987, 0.1466660823254431, 0.07537658486274701, 0.11004712995626598, 0.09184911407160123, 0.07110183933596359, 0.13975156142098855, 0.1088820816377043, 0.0, 0.01704111081181947, 0.0, 0.08430669578259498, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.917185406361213e-05, 0.07867676656796407, 0.023375110781893582, 0.0, 0.0641923407285172, 0.0705822561885947, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03253431644306748, 0.043796435618077, 0.058832689463983345, 0.0, 0.042631128667741214, 0.0, 0.052834823646881746, 0.036193993744357056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.24862082221316184, 0.23165722196401017, 0.20311799800907437, 0.31226565617611957, 0.1602665968909589, 0.2004223442624945, 0.18869006881748096, 0.23289998211883445, 0.2563676745286241, 0.033578728148824455, 0.03977120199566708, 0.025759484892108775, 0.05395774012127241, 0.05658836245859711, 0.04582183351711866, 0.038713040271514565, 0.04323009518882959, 0.048357922968664924, 0.13162695103305955, 0.11976927092397438, 0.12544921110565788, 0.14652998222327118, 0.12490193206727707, 0.12065104309438812, 0.11316783178054979, 0.12314199544211846, 0.11416497518777091, 0.16907236314766527, 0.18500719402258547, 0.18240751705535474, 0.15663655729599013, 0.17368869757245287, 0.1761683595868282, 0.21463791598440207, 0.17495379074945105, 0.17862177768656273, 0.11382026042683369, 0.11891787104209928, 0.09741549539200456, 0.15392008295110116, 0.10507206356598475, 0.12952553902595776, 0.12315494412034789, 0.10676914795977521, 0.10164037402550252, 0.16934679999012114, 0.15440709949637788, 0.15730295882866807, 0.18055379708400998, 0.1566784807916085, 0.1609608176307824, 0.16619702968616734, 0.18600469224610128, 0.14689332661572263, 0.17449463210627725, 0.15306681131411892, 0.1542618579894992, 0.1501911931680162, 0.15572316155827626, 0.1718108193670549, 0.16248118130302247, 0.14467156754582733, 0.1505501884328866, 0.22661037416716923, 0.11876786936470995, 0.19614961961429522, 0.17262451935499246, 0.14780285032701068, 0.16871317794605545, 0.1504563703434284, 0.14579666459335439, 0.21764517659703408, 0.21781288282013056, 0.19194616555146204, 0.1230643283101519, 0.12774293425175642, 0.1179137739546735, 0.1401323050176645, 0.17014803047268345, 0.16076793311994775, 0.22086616769147427, 0.1668452193423866, 0.1750986860264253, 0.19160170407367283, 0.1683512387803635, 0.18755336593235183, 0.17241593298602953, 0.1844013212377389, 0.17700726045157134, 0.1901896334841442, 0.059751908342768556, 0.06561079161700833, 0.048217261373210585, 0.05800775183845219, 0.07044672705817079, 0.051040456449957694, 0.052738787580132174, 0.051010490172058054, 0.07184853061052088]}, "mutation_prompt": null}
{"id": "440fc4a8-b34e-4c32-adf8-7a58b72e423e", "solution": "import numpy as np\n\nclass HybridFireflyGeneticAlgorithm:\n    def __init__(self, budget, dim, num_fireflies=20, num_gen=100, p_crossover=0.8, p_mutation=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_fireflies = num_fireflies\n        self.num_gen = num_gen\n        self.p_crossover = p_crossover\n        self.p_mutation = p_mutation\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_fireflies, self.dim))\n\n        def firefly_move(curr_firefly, best_firefly):\n            beta0 = 1.0\n            gamma = 0.1\n            alpha = 0.2\n            epsilon = 0.01\n            r = np.linalg.norm(curr_firefly - best_firefly)\n            beta = beta0 * np.exp(-gamma * r**2)\n            return curr_firefly + alpha * (best_firefly - curr_firefly) + epsilon * (np.random.rand(self.dim) - 0.5)\n\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def genetic_crossover(parent1, parent2):\n            mask = np.random.randint(0, 2, size=self.dim)\n            child1 = np.where(mask, parent1, parent2)\n            child2 = np.where(mask, parent2, parent1)\n            return child1, child2\n\n        def genetic_mutation(individual):\n            mask = np.random.rand(self.dim) < self.p_mutation\n            individual[mask] = np.random.uniform(-5.0, 5.0, size=np.sum(mask))\n            return individual\n\n        population = initialize_population()\n        fitness_values = evaluate_population(population)\n        best_index = np.argmin(fitness_values)\n        best_solution = population[best_index].copy()\n\n        for _ in range(self.num_gen):\n            for i in range(self.num_fireflies):\n                new_position = firefly_move(population[i], best_solution)\n                if np.any(new_position < -5.0) or np.any(new_position > 5.0):\n                    continue\n                new_fitness = func(new_position)\n                if new_fitness < fitness_values[i]:\n                    population[i] = new_position\n                    fitness_values[i] = new_fitness\n\n            population = np.array([genetic_mutation(individual) for individual in population])\n\n            for _ in range(self.num_fireflies // 2):\n                idx1, idx2 = np.random.choice(self.num_fireflies, size=2, replace=False)\n                if np.random.rand() < self.p_crossover:\n                    population[idx1], population[idx2] = genetic_crossover(population[idx1], population[idx2])\n\n            current_best_index = np.argmin(fitness_values)\n            if fitness_values[current_best_index] < fitness_values[best_index]:\n                best_index = current_best_index\n                best_solution = population[best_index].copy()\n\n        return best_solution", "name": "HybridFireflyGeneticAlgorithm", "description": "Hybrid Firefly-Genetic Algorithm: Combining the exploration of fireflies with the exploitation of genetic algorithms to efficiently optimize black box functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "35a848b6-0644-416b-8ecc-2e232f1cbced", "metadata": {"aucs": [0.24159432028934646, 0.18128548289053892, 0.2005231485525396, 0.12803845220721344, 0.1692474649946456, 0.1811315243032734, 0.20879845694983634, 0.12960362148697535, 0.12426137502985146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04463653668481804, 0.03628333573232689, 0.03251494341695038, 0.03182294817583009, 0.04453893462581693, 0.05480206285524458, 0.05194339449505059, 0.053936433953862606, 0.06928681288580296, 0.03324345333786527, 0.02863921591754859, 0.03964028074000003, 0.0377026534302326, 0.024493022041112145, 0.04979598183691958, 0.029565648741778916, 0.034478040486058625, 0.04238793547622044, 0.04733806475474556, 0.04352361628011914, 0.0477356074428712, 0.07971059503831734, 0.07195577596981917, 0.056272390580463405, 0.07591881274259127, 0.07435257667619188, 0.05161940266294518, 0.1066624511872214, 0.08366862719896584, 0.07583286741147566, 0.06472431359117858, 0.1039210406023614, 0.0901177536592328, 0.003196883796232952, 0.09760230236766998, 0.028929174249352263, 0.1243474119291832, 0.13816131900453987, 0.1466660823254431, 0.07537658486274701, 0.11004712995626598, 0.09184911407160123, 0.07110183933596359, 0.13975156142098855, 0.1088820816377043, 0.0, 0.01704111081181947, 0.0, 0.08430669578259498, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.917185406361213e-05, 0.07867676656796407, 0.023375110781893582, 0.0, 0.0641923407285172, 0.0705822561885947, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03253431644306748, 0.043796435618077, 0.058832689463983345, 0.0, 0.042631128667741214, 0.0, 0.052834823646881746, 0.036193993744357056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.24862082221316184, 0.23165722196401017, 0.20311799800907437, 0.31226565617611957, 0.1602665968909589, 0.2004223442624945, 0.18869006881748096, 0.23289998211883445, 0.2563676745286241, 0.033578728148824455, 0.03977120199566708, 0.025759484892108775, 0.05395774012127241, 0.05658836245859711, 0.04582183351711866, 0.038713040271514565, 0.04323009518882959, 0.048357922968664924, 0.13162695103305955, 0.11976927092397438, 0.12544921110565788, 0.14652998222327118, 0.12490193206727707, 0.12065104309438812, 0.11316783178054979, 0.12314199544211846, 0.11416497518777091, 0.16907236314766527, 0.18500719402258547, 0.18240751705535474, 0.15663655729599013, 0.17368869757245287, 0.1761683595868282, 0.21463791598440207, 0.17495379074945105, 0.17862177768656273, 0.11382026042683369, 0.11891787104209928, 0.09741549539200456, 0.15392008295110116, 0.10507206356598475, 0.12952553902595776, 0.12315494412034789, 0.10676914795977521, 0.10164037402550252, 0.16934679999012114, 0.15440709949637788, 0.15730295882866807, 0.18055379708400998, 0.1566784807916085, 0.1609608176307824, 0.16619702968616734, 0.18600469224610128, 0.14689332661572263, 0.17449463210627725, 0.15306681131411892, 0.1542618579894992, 0.1501911931680162, 0.15572316155827626, 0.1718108193670549, 0.16248118130302247, 0.14467156754582733, 0.1505501884328866, 0.22661037416716923, 0.11876786936470995, 0.19614961961429522, 0.17262451935499246, 0.14780285032701068, 0.16871317794605545, 0.1504563703434284, 0.14579666459335439, 0.21764517659703408, 0.21781288282013056, 0.19194616555146204, 0.1230643283101519, 0.12774293425175642, 0.1179137739546735, 0.1401323050176645, 0.17014803047268345, 0.16076793311994775, 0.22086616769147427, 0.1668452193423866, 0.1750986860264253, 0.19160170407367283, 0.1683512387803635, 0.18755336593235183, 0.17241593298602953, 0.1844013212377389, 0.17700726045157134, 0.1901896334841442, 0.059751908342768556, 0.06561079161700833, 0.048217261373210585, 0.05800775183845219, 0.07044672705817079, 0.051040456449957694, 0.052738787580132174, 0.051010490172058054, 0.07184853061052088]}, "mutation_prompt": null}
