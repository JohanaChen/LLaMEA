{"id": "f85211c2-aef2-43f1-908e-2eeec85199ce", "solution": "import numpy as np\n\nclass HFA_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def levy_flight(dim):\n            beta = 1.5\n            sigma = (gamma(1 + beta) * np.sin(np.pi * beta / 2) / (gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, dim)\n            v = np.random.normal(0, 1, dim)\n            step = u / np.power(np.abs(v), 1/beta)\n            return step\n\n        def de_mutate(x, a, b, c, F):\n            return x + F * (a - x) + F * (b - c)\n\n        def clip_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness_values = [func(ind) for ind in population]\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        while self.budget > 0:\n            for i in range(self.budget):\n                r = np.random.uniform(0, 1)\n                if r < 0.7:\n                    for j in range(self.dim):\n                        r1, r2, r3 = np.random.choice(population, 3, replace=False)\n                        new_sol = de_mutate(population[i, j], r1[j], r2[j], r3[j], 0.5)\n                        population[i, j] = clip_bounds(new_sol)\n                else:\n                    step = levy_flight(self.dim)\n                    population[i] += step\n                    population[i] = clip_bounds(population[i])\n\n                fitness_values[i] = func(population[i])\n                if fitness_values[i] < func(best_solution):\n                    best_solution = np.copy(population[i])\n\n                self.budget -= 1\n                if self.budget <= 0:\n                    break\n\n        return best_solution", "name": "HFA_DE", "description": "Hybrid Firefly Algorithm with Differential Evolution (HFA-DE) for optimization by combining the global exploration of firefly algorithm with the local exploitation of differential evolution.", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "An exception occured: Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 34, in __call__\n  File \"mtrand.pyx\", line 930, in numpy.random.mtrand.RandomState.choice\nValueError: a must be 1-dimensional\n.", "error": "ValueError('a must be 1-dimensional')Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 34, in __call__\n  File \"mtrand.pyx\", line 930, in numpy.random.mtrand.RandomState.choice\nValueError: a must be 1-dimensional\n", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "22bc5782-dce2-4b02-87cb-bca743671e8d", "solution": "import numpy as np\n\nclass HFA_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def levy_flight(dim):\n            beta = 1.5\n            sigma = (gamma(1 + beta) * np.sin(np.pi * beta / 2) / (gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, dim)\n            v = np.random.normal(0, 1, dim)\n            step = u / np.power(np.abs(v), 1/beta)\n            return step\n\n        def de_mutate(x, a, b, c, F):\n            return x + F * (a - x) + F * (b - c)\n\n        def clip_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        fitness_values = [func(ind) for ind in population]\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        while self.budget > 0:\n            for i in range(self.budget):\n                r = np.random.uniform(0, 1)\n                if r < 0.7:\n                    for j in range(self.dim):\n                        r1, r2, r3 = np.random.choice(population, 3, replace=False)\n                        new_sol = de_mutate(population[i, j], r1[j], r2[j], r3[j], 0.5)\n                        population[i, j] = clip_bounds(new_sol)\n                else:\n                    step = levy_flight(self.dim)\n                    population[i] += step\n                    population[i] = clip_bounds(population[i])\n\n                fitness_values[i] = func(population[i])\n                if fitness_values[i] < func(best_solution):\n                    best_solution = np.copy(population[i])\n\n                self.budget -= 1\n                if self.budget <= 0:\n                    break\n\n        return best_solution", "name": "HFA_DE", "description": "Hybrid Firefly Algorithm with Differential Evolution (HFA-DE) for optimization by combining the global exploration of firefly algorithm with the local exploitation of differential evolution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f85211c2-aef2-43f1-908e-2eeec85199ce", "metadata": {}, "mutation_prompt": null}
