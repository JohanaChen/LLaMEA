{"id": "b7660fdb-8b83-45ed-902b-8a5669115073", "solution": "import numpy as np\n\nclass FireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FireworksAlgorithm", "description": "Fireworks Algorithm (FWA) is inspired by the explosive behavior of fireworks to enhance exploration and exploitation in the search space.", "configspace": "", "generation": 0, "fitness": 0.05793214231301503, "feedback": "The algorithm FireworksAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": null, "metadata": {"aucs": [0.11681650879196737, 0.1016139661360177, 0.10695278705889744, 0.05618224066209765, 0.07531686356862033, 0.02929816001122565, 0.09803183918217184, 0.09850045480545344, 0.07951792965559634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012471050607500533, 0.03605066122906553, 0.01304308798531506, 0.02248915267254925, 0.01811947379324852, 0.023356324749289836, 0.03867337515994462, 0.026086904937138944, 0.02044502808355042, 0.018493923742737062, 0.002578015965748248, 0.0020415202704494595, 0.04533863891422696, 0.0012795507212285395, 9.999999999998899e-05, 9.999999999998899e-05, 0.016181719325019883, 9.999999999998899e-05, 0.04660136380611746, 0.033667547960281485, 0.046613505930137245, 0.04099621949610888, 0.04834555259094053, 0.04100648689422581, 0.041841431831869724, 0.048986754550083944, 0.03776752731846866, 0.028832444803030377, 0.014623315384910685, 0.03147097941178312, 0.013109872291880098, 0.029005611431956235, 0.029335754029444217, 9.999999999998899e-05, 0.014963371889242127, 9.999999999998899e-05, 0.10069383157695189, 0.08339228192607373, 0.05265312756320395, 0.014315214226281014, 9.999999999998899e-05, 0.020137125586318638, 0.03699323518252473, 0.032706914992808755, 0.07363617695648117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0033187993877825672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003674805521231561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0568926066030363, 0.0705944827078756, 0.047350671963296787, 0.006001042937819556, 0.01729389175169871, 9.999999999998899e-05, 0.01624363291114972, 0.04741848988091757, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12934864659137257, 0.11845891178869172, 0.1682307390827682, 0.09540695173543368, 0.12092807068116929, 0.10916478595818424, 0.1594494884433072, 0.15143718539372653, 0.13319199432960582, 0.0018949537339374434, 9.999999999998899e-05, 0.0012121491439233134, 0.02745479134875528, 0.03721610906206774, 0.057993288509361585, 0.02294058302476265, 0.03947880657334757, 0.04191275173218889, 0.14613239769737807, 0.12146507114096816, 0.12313047959235823, 0.11476291169877118, 0.11254812926681879, 0.1286101486127572, 0.11912025217223021, 0.16077691864532828, 0.11043934248945186, 0.12123429515402617, 0.16279771888938577, 0.11781328484444054, 0.129519216093961, 0.13324313452835101, 0.1296816367531568, 0.11821285753477584, 0.14497292737503142, 0.11005300476865487, 0.06779006464928183, 0.11102990342620067, 0.06301549803811446, 0.07433162937810467, 0.08738182509668002, 0.08475193350384103, 0.06689526684600167, 0.08823960485699955, 0.05190157615014357, 0.18200667935093073, 0.14184727652380202, 0.1574229301442418, 0.1740452321416427, 0.18064120996907163, 0.1697127052791253, 0.17547417635004492, 0.17171892369956676, 0.1462790687445562, 0.061502422820157165, 0.04746945658212176, 0.011276516000888637, 0.007273081093987832, 0.12444188438190906, 0.07416859380656116, 0.08499355247566764, 0.11225812636278332, 0.1167889176211615, 0.14773696354998533, 0.08723555986618048, 0.10679803255774711, 0.10476072971097761, 0.12382584754152703, 0.14390021442078982, 0.10138878728639522, 0.09271239897650807, 0.10408837632631163, 0.052361760350168485, 0.08864054158322432, 0.07250888837594427, 0.060396527355139784, 0.0977712651027457, 0.06800530323137577, 0.05854466714064288, 0.08520281157651366, 0.0440015053059275, 0.18599646416445414, 0.18387142571949722, 0.17912959656362015, 0.17277357813265448, 0.16858943727121756, 0.16726171274881874, 0.17435487176854947, 0.1851880392851354, 0.18088751615828524, 0.05110165726096261, 0.052258098243730955, 0.04374066413295552, 0.035848247171092584, 0.04014777863876806, 0.06209843519337643, 0.04793992391570023, 0.05080053052406497, 0.04111934345122703]}, "mutation_prompt": null}
{"id": "755eea12-03cc-41ec-b2d7-b05a2404dcea", "solution": "class AdaptiveFireworksAlgorithm(FireworksAlgorithm):\n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            for i in range(population_size):\n                mutation_rate = np.random.uniform(0.1, 0.9)  # Adaptive mutation rate\n                for j in range(self.dim):\n                    sparks[i][j] *= mutation_rate * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "AdaptiveFireworksAlgorithm", "description": "Introducing adaptive mutation rates based on individual performance to enhance exploration and exploitation dynamically.", "configspace": "", "generation": 1, "fitness": 0.049572146784017716, "feedback": "The algorithm AdaptiveFireworksAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.06.", "error": "", "parent_id": "b7660fdb-8b83-45ed-902b-8a5669115073", "metadata": {"aucs": [0.10728819373755794, 0.09594753658193622, 0.0939535548174052, 0.04634870040035399, 0.05663185157038464, 0.026512643076196385, 0.07817679351027507, 0.07475641026522573, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005520620819750688, 0.01467079663371329, 0.012313771115618377, 0.010472064296345507, 0.013896014403782853, 0.010547956095028677, 0.02072146851967316, 0.006052782275308477, 0.004142041301516519, 0.015247873044617166, 9.999999999998899e-05, 0.009552226605506808, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.03932036182823284, 0.04687545855643349, 0.03104052522373879, 0.0374531483326086, 0.048986754550083944, 0.027245480648508624, 0.03275791899739566, 9.999999999998899e-05, 0.033562045401694385, 0.019825593735796065, 0.01629569653849361, 9.999999999998899e-05, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.039474440684910794, 0.039890879776041444, 0.019213391879472907, 9.999999999998899e-05, 0.021591480662950246, 0.026279303607937843, 0.003500097719783879, 0.05214352373315889, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030775394243922616, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06259535749922851, 0.03558885834198078, 0.036789883154878744, 0.056926339961920314, 0.019839569020092318, 0.019744042791225547, 0.09133323690138118, 0.02441445331284886, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1285006313807242, 0.12467141060362952, 0.1636510876385484, 0.09787501226365658, 0.105686046745887, 0.09580441870675127, 0.1333485895494705, 0.13765189909359377, 0.12350957819085628, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018367234842735725, 0.013721980409544643, 0.026185804196224516, 0.020918033975148353, 0.022312349071993642, 0.035434528287087264, 0.11299635533972219, 0.1404962429202955, 0.11247474228624488, 0.11543338808584935, 0.10682854837194045, 0.09287963550094736, 0.12230839228614365, 0.13385779196189562, 0.10746253218324875, 0.12085557521109969, 0.14162676915611594, 0.1234062872287901, 0.13978523279127453, 0.12642439025392416, 0.13417631905527594, 0.1299986968994823, 0.12468141028810131, 0.10794358849382824, 0.05161067280548082, 0.08034307328472168, 0.056545395504307594, 0.07332140309289048, 0.080622774091194, 0.0682391657078475, 0.07121204692335648, 0.06650012144232864, 0.046537759302370474, 0.1458947949640762, 0.1311312873272985, 0.16934429060727074, 0.15752821006587148, 0.13687251124339095, 0.14642307153406908, 0.17684152916564977, 0.14402008461352545, 0.15307279997868883, 9.999999999998899e-05, 9.999999999998899e-05, 0.06447784523444389, 9.999999999998899e-05, 0.014837103986697686, 0.001063519638886845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06856606959000333, 0.13876708136180527, 0.09351223791477592, 0.08735299850566225, 0.1207914665021157, 0.07617973456598881, 0.06439344739075825, 0.09788578581256624, 0.09518499622650967, 0.041829379112028775, 0.07184392002823092, 0.051119124473345434, 0.10700850337674328, 0.05498665511616729, 0.04762328120453385, 0.04686215318915854, 0.03678674654813008, 0.04556316061487009, 0.17457893717895823, 0.17492597773661023, 0.17209836277292612, 0.18198028408502576, 0.18055408381281413, 0.17433145031099173, 0.1746082371444183, 0.18188602691258704, 0.17729433452633092, 0.04221843921469759, 0.039236108229783184, 0.05340786556106125, 0.050385992650395894, 0.029525899440865366, 0.044709344227966685, 0.03339753701723125, 0.04204040662834874, 0.04050853392960385]}, "mutation_prompt": null}
{"id": "298d519b-a2c1-4763-9d12-ef122cffcb28", "solution": "import numpy as np\n\nclass FireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FireworksAlgorithm", "description": "Fireworks Algorithm (FWA) is inspired by the explosive behavior of fireworks to enhance exploration and exploitation in the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b7660fdb-8b83-45ed-902b-8a5669115073", "metadata": {"aucs": [0.11681650879196737, 0.1016139661360177, 0.10695278705889744, 0.05618224066209765, 0.07531686356862033, 0.02929816001122565, 0.09803183918217184, 0.09850045480545344, 0.07951792965559634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012471050607500533, 0.03605066122906553, 0.01304308798531506, 0.02248915267254925, 0.01811947379324852, 0.023356324749289836, 0.03867337515994462, 0.026086904937138944, 0.02044502808355042, 0.018493923742737062, 0.002578015965748248, 0.0020415202704494595, 0.04533863891422696, 0.0012795507212285395, 9.999999999998899e-05, 9.999999999998899e-05, 0.016181719325019883, 9.999999999998899e-05, 0.04660136380611746, 0.033667547960281485, 0.046613505930137245, 0.04099621949610888, 0.04834555259094053, 0.04100648689422581, 0.041841431831869724, 0.048986754550083944, 0.03776752731846866, 0.028832444803030377, 0.014623315384910685, 0.03147097941178312, 0.013109872291880098, 0.029005611431956235, 0.029335754029444217, 9.999999999998899e-05, 0.014963371889242127, 9.999999999998899e-05, 0.10069383157695189, 0.08339228192607373, 0.05265312756320395, 0.014315214226281014, 9.999999999998899e-05, 0.020137125586318638, 0.03699323518252473, 0.032706914992808755, 0.07363617695648117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0033187993877825672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003674805521231561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0568926066030363, 0.0705944827078756, 0.047350671963296787, 0.006001042937819556, 0.01729389175169871, 9.999999999998899e-05, 0.01624363291114972, 0.04741848988091757, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12934864659137257, 0.11845891178869172, 0.1682307390827682, 0.09540695173543368, 0.12092807068116929, 0.10916478595818424, 0.1594494884433072, 0.15143718539372653, 0.13319199432960582, 0.0018949537339374434, 9.999999999998899e-05, 0.0012121491439233134, 0.02745479134875528, 0.03721610906206774, 0.057993288509361585, 0.02294058302476265, 0.03947880657334757, 0.04191275173218889, 0.14613239769737807, 0.12146507114096816, 0.12313047959235823, 0.11476291169877118, 0.11254812926681879, 0.1286101486127572, 0.11912025217223021, 0.16077691864532828, 0.11043934248945186, 0.12123429515402617, 0.16279771888938577, 0.11781328484444054, 0.129519216093961, 0.13324313452835101, 0.1296816367531568, 0.11821285753477584, 0.14497292737503142, 0.11005300476865487, 0.06779006464928183, 0.11102990342620067, 0.06301549803811446, 0.07433162937810467, 0.08738182509668002, 0.08475193350384103, 0.06689526684600167, 0.08823960485699955, 0.05190157615014357, 0.18200667935093073, 0.14184727652380202, 0.1574229301442418, 0.1740452321416427, 0.18064120996907163, 0.1697127052791253, 0.17547417635004492, 0.17171892369956676, 0.1462790687445562, 0.061502422820157165, 0.04746945658212176, 0.011276516000888637, 0.007273081093987832, 0.12444188438190906, 0.07416859380656116, 0.08499355247566764, 0.11225812636278332, 0.1167889176211615, 0.14773696354998533, 0.08723555986618048, 0.10679803255774711, 0.10476072971097761, 0.12382584754152703, 0.14390021442078982, 0.10138878728639522, 0.09271239897650807, 0.10408837632631163, 0.052361760350168485, 0.08864054158322432, 0.07250888837594427, 0.060396527355139784, 0.0977712651027457, 0.06800530323137577, 0.05854466714064288, 0.08520281157651366, 0.0440015053059275, 0.18599646416445414, 0.18387142571949722, 0.17912959656362015, 0.17277357813265448, 0.16858943727121756, 0.16726171274881874, 0.17435487176854947, 0.1851880392851354, 0.18088751615828524, 0.05110165726096261, 0.052258098243730955, 0.04374066413295552, 0.035848247171092584, 0.04014777863876806, 0.06209843519337643, 0.04793992391570023, 0.05080053052406497, 0.04111934345122703]}, "mutation_prompt": null}
{"id": "509a534d-f422-479e-bb17-6be98a098e68", "solution": "import numpy as np\n\nclass EnhancedFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            scaling_factor = np.random.uniform(0.5, 1.5)  # Dynamic mutation scaling\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= scaling_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "EnhancedFireworksAlgorithm", "description": "Introducing dynamic mutation scaling based on individual fireworks' performance to enhance exploration and exploitation.", "configspace": "", "generation": 3, "fitness": 0.06184826408324983, "feedback": "The algorithm EnhancedFireworksAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "b7660fdb-8b83-45ed-902b-8a5669115073", "metadata": {"aucs": [0.13495936333667724, 0.10550620940815458, 0.1272164872747953, 0.06156891937675313, 0.0875808407200408, 0.03845901598642465, 0.08517418532115895, 0.12908477082400605, 0.08882715200182756, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011679175172221057, 0.028736531277751443, 0.030592255160652115, 0.05053241083243687, 0.03991239706743144, 0.029233985858128086, 0.05126646140602975, 0.020592601286141488, 0.021038269791369246, 0.03126942066265914, 0.003228772460889151, 0.01261053986554983, 0.03465677887939145, 9.999999999998899e-05, 0.00407718453103556, 0.0053124812492846285, 0.006664852174833702, 0.003241875948022055, 0.04852759340035795, 0.04168233885758854, 0.043609780671883924, 0.04787238525644877, 0.04687545855643349, 0.030829977860394098, 0.04470542611746875, 0.048986754550083944, 0.02751391138749293, 0.06608072417078037, 0.01175702176833604, 0.02880978093797204, 0.03237521288649481, 0.01871193450141273, 9.999999999998899e-05, 0.04004524630938955, 0.014946569750968641, 9.999999999998899e-05, 0.10972089972068666, 0.06868009706871325, 0.07614928688835532, 0.023403368035753047, 0.0029081237201104004, 0.04069902782146295, 0.04364751301824932, 0.03288471878209054, 0.11042262970481564, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00928292028041311, 0.000201406603906773, 0.0027893992629099973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039817698767108056, 0.05661847062910452, 0.09757690822195075, 0.05125551954604457, 0.04342552370780739, 0.01275876487376082, 0.0698008428233543, 0.03842097578355974, 0.026536357668196064, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14971387388635682, 0.15809760504712123, 0.1674054567069032, 0.11522143979375798, 0.11006391314517405, 0.11095868259310793, 0.15398240479055292, 0.13069516860398056, 0.15523437474809487, 0.003678646449816747, 0.007558922289633618, 9.999999999998899e-05, 0.022398430451711304, 0.023448582396280115, 0.052655360801141415, 0.058652940333163706, 0.05294199368647423, 0.05776914243284703, 0.13311282288132587, 0.13382928803262417, 0.16107105278594758, 0.1254680436776816, 0.15020597378544553, 0.12129902259396463, 0.12436813592237284, 0.1166991232411061, 0.1186716769092262, 0.15365859912434987, 0.15065152673147097, 0.1313898508897029, 0.15100776818466966, 0.12276667290981802, 0.16240451460379335, 0.13078381068184153, 0.11531068488274554, 0.11751176848335343, 0.07432422745559075, 0.04657384082213534, 0.07920117355905587, 0.08924745802254697, 0.08091978754699958, 0.09427800431477174, 0.09782450978093948, 0.08220755882025932, 0.06650699486606859, 0.16992980058592544, 0.12061960294914187, 0.17751678312822283, 0.15967490883295887, 0.17164180046856548, 0.16414477913558567, 0.16900125380300246, 0.1438880754118529, 0.1649402004007916, 0.12531530960871018, 0.07286457241933353, 0.10395234863593583, 0.04096554400738517, 0.11777069773623772, 0.08939887987384043, 0.005549259616562829, 0.039684154503681235, 0.09293352330684246, 0.10120343924886532, 0.09646242632987978, 0.11229155095968524, 0.1476598071447699, 0.13344291056802304, 0.1014859373230611, 0.07435030576246082, 0.11096917184723099, 0.10770249451932501, 0.08199319866032662, 0.0755640759050944, 0.06372535585301453, 0.11384291747536623, 0.07264178571612412, 0.05222359855115233, 0.0730639369905457, 0.06735688091875014, 0.06667067940020222, 0.2182034845567422, 0.16892863156471083, 0.18756980398175005, 0.1686189068804892, 0.1734257544078579, 0.17899703070965622, 0.1665299044734122, 0.1718611744645313, 0.1921064488818095, 0.05691465939426177, 0.04742454870991697, 0.07108805042941035, 0.04902545921562673, 0.03958570773355585, 0.06218450913971374, 0.046714723691572035, 0.06397815984572486, 0.05300177885131885]}, "mutation_prompt": null}
{"id": "5392422f-37aa-475d-afdf-28d371cb402c", "solution": "import numpy as np\n\nclass EnhancedFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            scaling_factor = np.random.uniform(0.5, 1.5)  # Dynamic mutation scaling\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= scaling_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "EnhancedFireworksAlgorithm", "description": "Introducing dynamic mutation scaling based on individual fireworks' performance to enhance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "509a534d-f422-479e-bb17-6be98a098e68", "metadata": {"aucs": [0.13495936333667724, 0.10550620940815458, 0.1272164872747953, 0.06156891937675313, 0.0875808407200408, 0.03845901598642465, 0.08517418532115895, 0.12908477082400605, 0.08882715200182756, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011679175172221057, 0.028736531277751443, 0.030592255160652115, 0.05053241083243687, 0.03991239706743144, 0.029233985858128086, 0.05126646140602975, 0.020592601286141488, 0.021038269791369246, 0.03126942066265914, 0.003228772460889151, 0.01261053986554983, 0.03465677887939145, 9.999999999998899e-05, 0.00407718453103556, 0.0053124812492846285, 0.006664852174833702, 0.003241875948022055, 0.04852759340035795, 0.04168233885758854, 0.043609780671883924, 0.04787238525644877, 0.04687545855643349, 0.030829977860394098, 0.04470542611746875, 0.048986754550083944, 0.02751391138749293, 0.06608072417078037, 0.01175702176833604, 0.02880978093797204, 0.03237521288649481, 0.01871193450141273, 9.999999999998899e-05, 0.04004524630938955, 0.014946569750968641, 9.999999999998899e-05, 0.10972089972068666, 0.06868009706871325, 0.07614928688835532, 0.023403368035753047, 0.0029081237201104004, 0.04069902782146295, 0.04364751301824932, 0.03288471878209054, 0.11042262970481564, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00928292028041311, 0.000201406603906773, 0.0027893992629099973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039817698767108056, 0.05661847062910452, 0.09757690822195075, 0.05125551954604457, 0.04342552370780739, 0.01275876487376082, 0.0698008428233543, 0.03842097578355974, 0.026536357668196064, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14971387388635682, 0.15809760504712123, 0.1674054567069032, 0.11522143979375798, 0.11006391314517405, 0.11095868259310793, 0.15398240479055292, 0.13069516860398056, 0.15523437474809487, 0.003678646449816747, 0.007558922289633618, 9.999999999998899e-05, 0.022398430451711304, 0.023448582396280115, 0.052655360801141415, 0.058652940333163706, 0.05294199368647423, 0.05776914243284703, 0.13311282288132587, 0.13382928803262417, 0.16107105278594758, 0.1254680436776816, 0.15020597378544553, 0.12129902259396463, 0.12436813592237284, 0.1166991232411061, 0.1186716769092262, 0.15365859912434987, 0.15065152673147097, 0.1313898508897029, 0.15100776818466966, 0.12276667290981802, 0.16240451460379335, 0.13078381068184153, 0.11531068488274554, 0.11751176848335343, 0.07432422745559075, 0.04657384082213534, 0.07920117355905587, 0.08924745802254697, 0.08091978754699958, 0.09427800431477174, 0.09782450978093948, 0.08220755882025932, 0.06650699486606859, 0.16992980058592544, 0.12061960294914187, 0.17751678312822283, 0.15967490883295887, 0.17164180046856548, 0.16414477913558567, 0.16900125380300246, 0.1438880754118529, 0.1649402004007916, 0.12531530960871018, 0.07286457241933353, 0.10395234863593583, 0.04096554400738517, 0.11777069773623772, 0.08939887987384043, 0.005549259616562829, 0.039684154503681235, 0.09293352330684246, 0.10120343924886532, 0.09646242632987978, 0.11229155095968524, 0.1476598071447699, 0.13344291056802304, 0.1014859373230611, 0.07435030576246082, 0.11096917184723099, 0.10770249451932501, 0.08199319866032662, 0.0755640759050944, 0.06372535585301453, 0.11384291747536623, 0.07264178571612412, 0.05222359855115233, 0.0730639369905457, 0.06735688091875014, 0.06667067940020222, 0.2182034845567422, 0.16892863156471083, 0.18756980398175005, 0.1686189068804892, 0.1734257544078579, 0.17899703070965622, 0.1665299044734122, 0.1718611744645313, 0.1921064488818095, 0.05691465939426177, 0.04742454870991697, 0.07108805042941035, 0.04902545921562673, 0.03958570773355585, 0.06218450913971374, 0.046714723691572035, 0.06397815984572486, 0.05300177885131885]}, "mutation_prompt": null}
{"id": "7ab3b66a-bedd-4a0d-b675-eebb5e905ccc", "solution": "import numpy as np\n\nclass EnhancedFireworksAlgorithmSpeedup:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            scaling_factor = np.random.uniform(0.5, 1.5)  # Dynamic mutation scaling\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= scaling_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n            if np.random.rand() < 0.1:  # Adaptive population size control\n                population_size = np.clip(int(population_size * np.random.uniform(0.8, 1.2)), 1, 50)\n                fireworks = np.vstack((fireworks, np.random.uniform(-5.0, 5.0, size=(population_size, self.dim)))\n        return best_firework", "name": "EnhancedFireworksAlgorithmSpeedup", "description": "Implement adaptive population size control to dynamically adjust the number of fireworks based on individual performance for faster convergence.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 23, 9, '        return best_firework\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 23, 9, '        return best_firework\\n'))", "parent_id": "509a534d-f422-479e-bb17-6be98a098e68", "metadata": {}, "mutation_prompt": null}
{"id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 6, "fitness": 0.09935256951152337, "feedback": "The algorithm FastFireworksAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.15.", "error": "", "parent_id": "509a534d-f422-479e-bb17-6be98a098e68", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "76e1aabe-f76e-4ce7-9cab-59c06d371820", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "5a2dcc59-41df-49ed-9768-8ed0553c036b", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "4bcd70ed-0fe4-43c8-a2ac-90c0a046de3b", "solution": "import numpy as np\n\nclass FastFireworksAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def local_search(self, func, current_solution):\n        candidate_solution = current_solution.copy()\n        step_size = 0.1\n        for _ in range(10):\n            candidate_solution += np.random.uniform(-step_size, step_size, size=self.dim)\n            if func(candidate_solution) < func(current_solution):\n                current_solution = candidate_solution\n        return current_solution\n\n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0)\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n            best_firework = self.local_search(func, best_firework)  # Introducing local search step\n        return best_firework", "name": "FastFireworksAlgorithmImproved", "description": "Improving exploration-exploitation balance by introducing a local search step with adaptive step size to exploit promising regions effectively.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 24, 44, '            for i in range(population_size):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 24, 44, '            for i in range(population_size):\\n'))", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {}, "mutation_prompt": null}
{"id": "7e6ca5a2-735b-4ba8-b6c1-c0895dd58b3e", "solution": "import numpy as np\n\nclass EnhancedFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            fitness_scores = [func(firework) for firework in fireworks]\n            for i in range(population_size):\n                selection_prob = diversity_factor * fitness_scores[i] / sum(fitness_scores)\n                for j in range(self.dim):\n                    sparks[i][j] *= selection_prob * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "EnhancedFastFireworksAlgorithm", "description": "Enhancing exploration by introducing a dynamic selection mechanism for the sparks based on both population diversity and individual fitness.", "configspace": "", "generation": 10, "fitness": 0.03922239947691118, "feedback": "The algorithm EnhancedFastFireworksAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.07181397830146763, 0.07439618446128848, 0.08262786977520131, 0.026402494224938344, 0.05267361210777377, 0.02552399358725177, 0.06142910453425687, 0.05874713933432962, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010428241141516859, 0.018230513908781387, 0.000741314890460143, 0.0005183844074665434, 0.002499995558344903, 9.999999999998899e-05, 0.018248263482334326, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006487473152022916, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.02954320500453378, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09436836308647034, 0.1070271971752389, 0.14840195416149582, 0.09425923977458062, 0.10456900144508796, 0.0957139960565504, 0.1240568991094797, 0.10912253247266412, 0.1210557193025883, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 0.0012579046631393531, 0.01759993274736349, 9.999999999998899e-05, 9.999999999998899e-05, 0.0267656688986897, 0.10065218937779041, 0.10853623823487746, 0.08075123300935827, 0.1230482997222172, 0.1322929019254192, 0.07972266465418254, 0.08391457877832686, 0.11930223723928524, 0.10425548484022906, 0.09624088136763598, 0.09708942679249599, 0.11296072965740056, 0.11563086436872749, 0.1052648726301526, 0.10456258476418478, 0.11420206329748472, 0.11069303217504112, 0.09370535320938944, 0.04110796187655219, 0.048768390461071065, 0.04065082079463411, 0.05239119375533752, 0.05514062144153542, 0.05019580988321182, 0.06349896561003021, 0.04256471226200087, 0.03354440058106756, 0.1330139778081959, 0.09376308044662474, 0.14724350777453676, 0.14138722049748775, 0.0966346189516255, 0.13273188554991133, 0.1494761052859973, 0.10568571161623419, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05674414499923364, 0.06762109224556256, 0.06753076647108025, 0.07079396085165868, 0.1207914665021157, 0.06182779574310626, 0.06911153951958005, 0.06007389139715835, 0.06421319637201306, 0.04754420202245602, 0.04695709511550472, 0.016936348418538194, 0.033567277338991675, 0.06038452711357456, 0.045511073114331335, 0.020885250411867173, 0.01826404539468718, 0.04143420019681854, 0.18066833795503767, 0.17496422726963334, 0.17167028266773465, 0.1837172342632487, 0.18676925611620288, 0.17991129896796743, 0.17211380853149416, 0.17222402235599799, 0.17352624096418878, 0.026301620556582916, 0.0396861607253679, 0.04064517540283796, 0.019996744236901565, 0.023270905659510066, 0.02745981424160604, 0.033368500535452594, 0.023706514067159512, 0.030420208860093445]}, "mutation_prompt": null}
{"id": "55ab8251-2e51-4bcc-9b68-3eda66725986", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "b14de6fb-52c1-4de2-8960-99e9c02e1be9", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "14b9666c-9aee-47e1-a171-1f13c3ac57f6", "solution": "class FastFireworksAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                mutated_firework = fireworks[i] + 0.5 * np.random.uniform() * (fireworks[i] - best_firework)  # Differential evolution mutation\n                for j in range(self.dim):\n                    sparks[i][j] = diversity_factor * mutated_firework[j]  # Hybrid mutation strategy\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithmImproved", "description": "Implementing a hybrid mutation strategy combining differential evolution with dynamic diversity scaling to improve convergence.", "configspace": "", "generation": 13, "fitness": 0.035460398113492504, "feedback": "The algorithm FastFireworksAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.08.", "error": "", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.07172115044992011, 0.0642341504994629, 0.0822881188591662, 0.019485674469137626, 0.05257887047805776, 0.025191216022295126, 0.051309371152801986, 0.051535794705865556, 0.06701824832800662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.014572254733962064, 0.0, 0.0, 0.0011187632349987098, 0.0, 0.018150078853237717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.019501673109847295, 0.0, 0.0, 0.0, 0.0, 0.0, 0.997930043909457, 0.03886038474070774, 0.07840964767879177, 0.04658937175442657, 0.05602083799072166, 0.034622015927503025, 0.033180535359004004, 0.06243432210507749, 0.025752273873738685, 0.0, 0.0, 0.0, 0.0, 0.00021551809509001707, 0.0, 0.0, 0.01119445381188322, 0.0, 0.10018685869141841, 0.03765971698870674, 0.006388112346703334, 0.004462664352365198, 0.0, 0.0, 0.026181922062048946, 0.0, 0.009809447265860194, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07830854760949713, 0.10693789276682164, 0.14829537673711224, 0.09416865854239476, 0.08041876921715974, 0.09571399605654951, 0.1239692985348404, 0.09707379230406277, 0.12096781838999726, 0.0, 0.0, 0.0, 0.006002370323321182, 0.0, 0.01750168379108641, 0.0, 0.0, 0.02666833626569931, 0.07028246122685633, 0.06726366127807482, 0.05459392587769929, 0.09846289938816155, 0.06572254448697346, 0.056336845919289225, 0.05488481188470995, 0.04846289571906348, 0.07717165476235766, 0.09597227240618145, 0.09616018134012416, 0.10350813781504964, 0.10838250165484586, 0.08290739212077258, 0.08317157286626975, 0.11411347464502575, 0.10004631021926003, 0.07775611701398777, 0.03322226033550901, 0.03075358899712477, 0.034551307077603455, 0.04455513106718245, 0.015390172400233548, 0.03704448605922828, 0.05639263182623655, 0.038433917477429747, 0.011774946489725324, 0.09154377975027184, 0.06023522738925313, 0.11080991306893939, 0.1028008393912958, 0.06737852077118656, 0.0816703972194458, 0.12237199858757519, 0.06484693399681674, 0.12610897469223925, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04375744941512982, 0.05604888032687072, 0.056166897525550485, 0.06709542404813507, 0.12070353966556191, 0.06165711078819802, 0.06079227088297268, 0.05652137775177013, 0.053579659675793145, 0.038145025866380466, 0.03957798628310871, 0.01630315145370509, 0.01850796326103321, 0.02150250198996473, 0.0454156150021221, 0.01886693703538289, 0.015736471619919423, 0.04133833534605069, 0.10087028022501054, 0.12008703439342805, 0.1475449842687161, 0.10726544462840115, 0.11393539758803017, 0.12456358843521431, 0.10047330010600874, 0.10853850474266835, 0.14680476350940774, 0.0, 0.012105424203345372, 0.03129662407793532, 0.0, 0.0057755656362814545, 0.008161729106915816, 0.003688085859674395, 0.0, 0.006903948184889264]}, "mutation_prompt": null}
{"id": "09d9cedd-e972-4e39-87d3-64ee46ba0548", "solution": "import numpy as np\n\nclass FastFireworksAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            pop_diversity = np.mean(np.std(fireworks, axis=0))\n            ind_diversity = np.std(fireworks, axis=1)\n            for i in range(population_size):\n                spark_magnitude = (pop_diversity * 0.7 + ind_diversity[i] * 0.3) * np.random.uniform(0.9, 1.1)\n                sparks[i] *= spark_magnitude\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithmImproved", "description": "Implementing a novel diversity-driven mutation strategy by adjusting spark magnitudes based on a weighted combination of population diversity and individual diversity.", "configspace": "", "generation": 14, "fitness": 0.06469363537052676, "feedback": "The algorithm FastFireworksAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.07.", "error": "", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.10633309920837619, 0.09555583904854537, 0.10079063364878382, 0.0611628798577909, 0.13938947175519156, 0.049124567940648345, 0.11342361302982118, 0.11759028697549834, 0.08835135342000122, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014957115704614776, 0.047013061202439865, 0.017285766996591567, 0.039400983609864326, 0.009769110516385293, 0.0020426439083599535, 0.044313932664435396, 0.00629414700750297, 0.01370396215647307, 0.015301175890079288, 0.0075203679097485265, 0.004050845664372527, 0.038341305360957256, 0.0044246305206075975, 9.999999999998899e-05, 0.02706752254517919, 9.999999999998899e-05, 9.999999999998899e-05, 0.22761818992179195, 0.06192526560013778, 0.5822614127278141, 0.09005881375883185, 0.06653052770389656, 0.06652976598261573, 0.08509663909150567, 0.07587573152060156, 0.06495406080041033, 0.03241225351447663, 9.999999999998899e-05, 0.02155418798812514, 0.019818461147299016, 0.011480665418187486, 0.0326510492187545, 0.07957361552218623, 0.022363263606040906, 9.999999999998899e-05, 0.12734870713090118, 0.06235477579792137, 0.07376683449475718, 0.02767192928335227, 0.00811956793612767, 0.08446427353022923, 0.02966200243858963, 0.07718282854075065, 0.08936790932061411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04316313574504416, 9.999999999998899e-05, 9.999999999998899e-05, 0.018618059304406742, 9.999999999998899e-05, 9.999999999998899e-05, 0.005698156836698609, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09232621231270766, 0.05686583178299698, 0.06822165386578671, 0.020502734876659323, 0.02346529886220161, 0.0376548613025679, 0.03716908442400768, 0.025660274161185992, 0.06860458575721584, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14365894017016578, 0.13513847719394723, 0.15841364375157718, 0.13721912048827511, 0.10308439880830478, 0.13228012626194918, 0.14356468942127798, 0.12292158731996805, 0.17005721604819568, 0.028469773344329208, 9.999999999998899e-05, 9.999999999998899e-05, 0.04409924633855611, 0.015716217633488627, 0.05405472187232785, 0.03449988933726911, 0.020174293754704364, 0.04185887840156499, 0.13174564912999742, 0.10200556090302837, 0.16846648574131362, 0.12930755910337188, 0.11495899064029325, 0.14695217506287628, 0.16350992500368355, 0.1660740486495672, 0.16065902310999458, 0.1286255405617569, 0.14114125373683695, 0.13191033798162954, 0.18489328892448853, 0.12600136969293196, 0.13459883384172788, 0.13675530525311586, 0.1370249540813262, 0.10554181400368634, 0.0683200883769558, 0.08945120094036463, 0.05516130932629659, 0.12001861697477689, 0.073839535961153, 0.07580759717985841, 0.07943763625376232, 0.07035829083059031, 0.05655827828622839, 0.19779415075337115, 0.129351369449475, 0.13799611721001825, 0.1997669302409637, 0.12640069738840465, 0.13097357666799803, 0.21205234955633168, 0.11978002085267181, 0.16081029029811666, 9.999999999998899e-05, 9.999999999998899e-05, 0.04848513897985851, 9.999999999998899e-05, 9.999999999998899e-05, 0.08302864837611301, 9.999999999998899e-05, 9.999999999998899e-05, 0.0703391541643088, 0.11230900146195366, 0.10100655538548031, 0.09833931533137197, 0.11010711587152566, 0.13985077933447188, 0.09959451201746328, 0.13783163198702808, 0.10562979088598257, 0.09509925839154654, 0.09707914928903594, 0.08829566999740857, 0.11634512305192968, 0.10730002677140271, 0.11268995373334201, 0.05661685801715666, 0.11928743684472098, 0.060397060500123945, 0.1399237960874421, 0.17150842500306607, 0.16266445748423541, 0.16832744339910077, 0.1999896641677822, 0.1709254072676768, 0.1851991680937667, 0.1866086030644304, 0.172143186926503, 0.18052193923786475, 0.038367190163160925, 0.0376032214376264, 0.038616684049782246, 0.055457658191866765, 0.04284433618502026, 0.03684840524694677, 0.0477840400795112, 0.04836901430780194, 0.04302808936344149]}, "mutation_prompt": null}
{"id": "7c05e203-db71-4484-a2b2-4274fd2e31fa", "solution": "import numpy as np\n\nclass EnhancedFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            performance_ratio = [func(firework) / func(best_firework) for firework in fireworks]   # Adaptive mutation based on individual performance\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= performance_ratio[i]  # Adjusting spark magnitude based on individual performance\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "EnhancedFastFireworksAlgorithm", "description": "Introducing an adaptive mutation strategy based on individual performance to adjust exploration and exploitation balance dynamically.", "configspace": "", "generation": 15, "fitness": 0.04373562457134069, "feedback": "The algorithm EnhancedFastFireworksAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.08899908737909323, 0.0749513802167514, 0.09812068122990203, 0.025014219978014673, 0.05770996101896686, 0.03194275165591609, 0.07437345533700013, 0.06974373321372918, 0.0801851696516549, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.008658349452875025, 0.03520838211774857, 0.0003273203249641865, 0.010729041192566346, 0.015047561196091519, 0.0, 0.028229094781910158, 0.0, 0.003726850961037975, 0.0, 0.0, 9.999999999998899e-05, 0.01950167310984674, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0476177469887894, 0.03861505723033498, 0.04389439386925309, 0.0470510119902785, 0.053897951616341366, 0.03256357628908868, 0.04086405214688926, 0.05627108164820582, 0.029369721467978338, 0.0, 0.0, 0.0, 0.0, 0.00021551809509001707, 0.0, 0.0, 0.012106180139753842, 0.0, 0.11095044946483668, 0.044323504207838815, 0.01564869333710517, 0.02659678398515497, 9.999999999998899e-05, 0.0014695460439290153, 0.039853695199297046, 0.00790483212360471, 0.03177568671409281, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10079068621375631, 0.10849117162596666, 0.15245422773579553, 0.10008410346197871, 0.1062321702498582, 0.099646511116122, 0.12965460072969837, 0.10299726813943522, 0.12512519592364857, 0.008532815985188291, 0.0, 9.999999999998899e-05, 0.02079759939579784, 0.020980926400023803, 0.055844546725474564, 0.0023145495369888414, 0.004620548249159917, 0.03845900260675894, 0.10739539797864506, 0.11885082084048482, 0.11562576709974237, 0.12366264039132224, 0.09085624461841357, 0.1001355422946375, 0.11779162162533263, 0.11348997363322377, 0.10887791610109454, 0.10039552435061883, 0.108564913111732, 0.10350813781504953, 0.15241454776594732, 0.10312906644335817, 0.11050557075360701, 0.13757451652346686, 0.11860925670990341, 0.0963309859505116, 0.053497232214814394, 0.049748335009302536, 0.05277601496141815, 0.08837051401705698, 0.05404387097895669, 0.0727288536711016, 0.07293238608210717, 0.06852869979719856, 0.03747778308428551, 0.15493062275666303, 0.075986361246562, 0.1401840124713294, 0.1523982143614807, 0.10316865635261163, 0.13843274856938437, 0.1599962002565224, 0.10453052324095502, 0.1261963614278906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08228655952109742, 0.08829053660677821, 0.08568480686034563, 0.10568118590779307, 0.1275216057442078, 0.06988009763793868, 0.08216553181503383, 0.09149340678098161, 0.08740604646980443, 0.08166302452963048, 0.07721666506431846, 0.021905049273323263, 0.03716547605270992, 0.05511321706012151, 0.056994770611885515, 0.03432335051175284, 0.04217981562076056, 0.1219133819371867, 0.17168154198871233, 0.17643040643501373, 0.18498408805389066, 0.16097400263548256, 0.16549208766088996, 0.158440813055995, 0.1708168633010262, 0.17127913038515397, 0.1798619817982544, 0.02906838550161761, 0.023904096050722412, 0.03200383595849288, 0.027499134479997855, 0.037418272799040087, 0.022442853522083195, 0.026262396785389885, 0.01641940631264227, 0.027701128701198452]}, "mutation_prompt": null}
{"id": "7b3d8569-dd4e-46e9-b909-8cea771eaf68", "solution": "import numpy as np\n\nclass EnhancedFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0)\n                                       # Novel differentiation strategy to enhance diversity and exploration\n                                       + np.abs(np.mean(fireworks, axis=0) - fireworks[np.argmax([func(firework) for firework in fireworks])]))\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "EnhancedFastFireworksAlgorithm", "description": "Implementing a novel differentiation strategy to explore diverse solutions and enhance the algorithm's convergence speed.", "configspace": "", "generation": 16, "fitness": 0.08465794572867712, "feedback": "The algorithm EnhancedFastFireworksAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.18.", "error": "", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.15607509620724047, 0.12646589707811418, 0.08319426715848965, 0.1251701724231411, 0.08028580684723163, 0.11279922005932275, 0.10272099053709804, 0.0871034114871776, 0.08064515481803503, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.017903754135325523, 0.01888627614277938, 0.0, 0.015310371612058615, 0.009346839728774703, 0.0, 0.03643265868823675, 0.014052923024503783, 0.03309877666896155, 0.0025600176446815004, 0.0, 0.012398560438726003, 0.02405052968008181, 0.0, 0.0, 0.009657826808490033, 0.020430560428057243, 0.0, 0.1353181566658126, 0.9792579094970375, 0.9749528005965574, 0.9653843997058377, 0.9727036608711926, 0.9752620996839858, 0.9644741269751309, 0.9710229816526186, 0.9672135928601094, 0.07515643565907781, 0.05281459030747193, 0.0, 0.0, 0.013021646212448834, 0.0, 0.0, 0.01931393354558586, 0.0, 0.10018685869141841, 0.06682769988748838, 0.030310339239628004, 0.06977387375296273, 0.0, 0.05402411685601349, 0.048917240673548634, 0.022841475531304556, 0.00980944726585986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.033467293017001465, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.012709658999303763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07306315768567306, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.13057644737616447, 0.12194089563196286, 0.16821670711257464, 0.09801959797742532, 0.18782202117866342, 0.09916841124910403, 0.15426867162187685, 0.17194613899441735, 0.15248696317837873, 0.0025332543873599622, 0.017869640804208164, 0.0, 0.02874285442960922, 0.016058474549722646, 0.036177581376788615, 0.007141141866799483, 0.011079549310130776, 0.026668336265699644, 0.0864863915945232, 0.10164418482335746, 0.081542470619274, 0.09846289938816133, 0.06572254448697334, 0.08201717248140306, 0.08063854141519444, 0.06866287763256496, 0.07717165476235788, 0.11587002341161845, 0.11853163731603689, 0.1035081378150493, 0.12982294824680396, 0.11774801530068402, 0.11231498986019817, 0.11411347464502575, 0.10004631021926014, 0.0959633206971483, 0.0369459173606308, 0.05657685409781221, 0.03455130707760323, 0.10214309670825383, 0.06551755889753785, 0.059485712255661904, 0.056392631826235995, 0.059068814523374424, 0.042580722786777936, 0.1518176788138721, 0.14010862598317797, 0.11301636351131616, 0.1527667743818174, 0.11176223642175465, 0.09910576428888596, 0.12358506857720253, 0.10997875953584568, 0.12610897469223925, 0.0, 0.0, 0.1282766499888388, 0.01277974907388435, 0.13078259069726028, 0.0, 0.13760448873512832, 0.0, 0.0, 0.061714318090054676, 0.06033232299729263, 0.1442409461666101, 0.28963607528394475, 0.12070353966556213, 0.0922754372831005, 0.08888985054144183, 0.0866191418261878, 0.09473332655554145, 0.09813501959604287, 0.11788857493013405, 0.0296030820109372, 0.09754364177005137, 0.1281792087301885, 0.05020242247760309, 0.0834796889601801, 0.07381777587315752, 0.06319143588764653, 0.1568821410267447, 0.12008703439342794, 0.16473385417996955, 0.13495306245393535, 0.11729077448988723, 0.12719587736696636, 0.1509540935468624, 0.14129637593211797, 0.14680476350940774, 0.03580372865352033, 0.0362720848173933, 0.033905850533317405, 0.021236377871083123, 0.03517791766600642, 0.015967667600503277, 0.026943585603190878, 0.0348199149191305, 0.016248134473887732]}, "mutation_prompt": null}
{"id": "31ab938a-8514-4ffb-b74b-000aaddf9453", "solution": "import numpy as np\n\nclass EnhancedFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0)\n            pso_factor = 0.5  # Introducing PSO exploration factor\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= (diversity_factor * np.abs(best_firework[j] - fireworks[i][j]) + pso_factor * np.random.uniform() * (best_firework[j] - fireworks[i][j]))\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "EnhancedFastFireworksAlgorithm", "description": "Introducing a hybrid approach by incorporating Particle Swarm Optimization (PSO) to enhance exploration capabilities and improve convergence speed.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 15, 13, '            pso_factor = 0.5  # Introducing PSO exploration factor\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 15, 13, '            pso_factor = 0.5  # Introducing PSO exploration factor\\n'))", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {}, "mutation_prompt": null}
{"id": "3f426780-bc85-405b-87d2-460c7e58f94b", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "541410e0-638e-4d5c-a04e-c4ea53463329", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "02cfed2e-cbf0-4bc1-8f1b-dcfab5500bd7", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "4b22675b-12a2-43f1-b029-393aef062410", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "0e16794a-f57b-4811-a836-8b36a10d80fe", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "68e96589-ff5c-490b-89a8-16a862bc707b", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "82960095-8a79-480e-9d92-d55595abbc07", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "9c818f3c-480a-4370-945e-b385d218bba1", "solution": "import numpy as np\n\nclass EnhancedFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0)) * np.mean([func(firework) for firework in fireworks])  # Enhanced dynamic mutation scaling based on both diversity and individual performance\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "EnhancedFastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on both population diversity and individual performance to enhance convergence speed.", "configspace": "", "generation": 25, "fitness": 0.061807592665439955, "feedback": "The algorithm EnhancedFastFireworksAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.18.", "error": "", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.07172115044992011, 0.06423415049946268, 0.0822881188591662, 0.019485674469137626, 0.05257887047805776, 0.025191216022295126, 0.051309371152801986, 0.051535794705865556, 0.06701824832800662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.014572254733962064, 0.0, 0.0, 0.0011187632349987098, 0.0, 0.018150078853237606, 0.0, 0.0, 0.0, 0.0, 0.0, 0.019501673109847295, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9955278286233117, 0.9958379916243908, 0.04278205048616679, 0.9956686707001253, 0.9977057178774802, 0.9980541225893832, 0.05185960791526234, 0.9920039552878621, 0.9942651035819423, 0.0, 0.0, 0.0, 0.0, 0.00021551809509001707, 0.0, 0.0, 0.01119445381188322, 0.0, 0.10018685869141841, 0.03765971698870674, 0.006388112346703334, 0.004462664352365198, 0.0, 0.0, 0.026181922062048946, 0.0, 0.009809447265860194, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07830854760949713, 0.10693789276682164, 0.14938378461126411, 0.09416865854239476, 0.08041876921715974, 0.09571399605654951, 0.1239692985348404, 0.09707379230406299, 0.12096781838999726, 0.0, 0.0, 0.0, 0.006002370323321293, 0.0, 0.01750168379108641, 0.0, 0.0, 0.02666833626569931, 0.07028246122685633, 0.06726366127807482, 0.05459392587769929, 0.09846289938816166, 0.06572254448697346, 0.05633684591928945, 0.05488481188470995, 0.04846289571906326, 0.07717165476235766, 0.09597227240618145, 0.09616018134012416, 0.10350813781504986, 0.10838250165484586, 0.08290739212077258, 0.08317157286626975, 0.11411347464502597, 0.10004631021926003, 0.07775611701398755, 0.03322226033550901, 0.03075358899712477, 0.034551307077603455, 0.044555131067182674, 0.015390172400233548, 0.037044486059228054, 0.05639263182623633, 0.038433917477429747, 0.011774946489725324, 0.09154377975027184, 0.06023522738925313, 0.11080991306893939, 0.10280083939129603, 0.06737852077118656, 0.0816703972194458, 0.12237199858757519, 0.06484693399681674, 0.12610897469223914, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04375744941512971, 0.05604888032687072, 0.05616689752555071, 0.06709542404813507, 0.1207035396655618, 0.06165711078819791, 0.06079227088297268, 0.05652137775177002, 0.053579659675793145, 0.038145025866380466, 0.03957798628310871, 0.01630315145370509, 0.01850796326103321, 0.02150250198996473, 0.0454156150021221, 0.01886693703538289, 0.015736471619919423, 0.04133833534605069, 0.10087028022501032, 0.12008703439342794, 0.1475449842687161, 0.10726544462840115, 0.11393539758803017, 0.12456358843521431, 0.10047330010600874, 0.10853850474266835, 0.14680476350940774, 0.0, 0.012105424203345372, 0.03129662407793532, 0.0, 0.0057755656362813435, 0.008161729106915816, 0.003688085859674395, 0.0, 0.006903948184889264]}, "mutation_prompt": null}
{"id": "16944a0a-474e-4a83-b261-58089d80281c", "solution": "import numpy as np\n\nclass EnhancedFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            individual_distances = np.linalg.norm(fireworks - best_firework, axis=1)\n            for i in range(population_size):\n                sparks[i] *= np.mean(individual_distances) / (individual_distances[i] + 1e-6)  # Dynamic mutation scaling based on individual firework distances\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "EnhancedFastFireworksAlgorithm", "description": "Implementing a dynamic mutation scaling based on individual firework distances to enhance exploration-exploitation balance.", "configspace": "", "generation": 26, "fitness": 0.07181751470792402, "feedback": "The algorithm EnhancedFastFireworksAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.20.", "error": "", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.07172115044992011, 0.06423415049946302, 0.08228811885916654, 0.019485674469137848, 0.05257887047805776, 0.025191216022295126, 0.051309371152801764, 0.05153579470586578, 0.06701824832800651, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.014572254733962287, 0.0, 0.0, 0.0011187632349987098, 0.0, 0.018150078853237717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.019501673109847073, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9977020662751778, 0.9977708370315104, 0.9949147059567203, 0.9975906722179235, 0.9907472608418467, 0.9987327786430076, 0.9940966177010918, 0.9958083615439901, 0.9970718835888565, 0.0, 0.0, 0.0, 0.0, 0.00021551809509035014, 0.0, 0.0, 0.011194453811883442, 0.0, 0.10018685869141841, 0.037659716988706404, 0.006388112346703778, 0.004462664352365198, 0.0, 0.0, 0.02618192206204928, 0.0, 0.00980944726585986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07830854760949701, 0.10693789276682186, 0.14829537673711257, 0.09416865854239498, 0.08041876921715974, 0.09571399605654951, 0.12396929853484018, 0.09707379230406299, 0.12096781838999704, 0.0, 0.0, 0.0, 0.006002370323321182, 0.0, 0.01750168379108641, 0.0, 0.0, 0.026668336265699533, 0.07028246122685633, 0.06726366127807448, 0.05459392587769929, 0.09846289938816166, 0.0703355201421868, 0.05633684591928945, 0.05488481188470995, 0.04846289571906326, 0.07717165476235788, 0.11219164693848294, 0.10364457883684319, 0.10350813781504953, 0.10838250165484609, 0.08290739212077258, 0.0966380629939847, 0.11411347464502575, 0.10004631021926014, 0.09393366860947405, 0.040257992356927175, 0.05601664170756193, 0.034551307077603455, 0.04455513106718223, 0.020315542033174316, 0.06706794963864815, 0.05639263182623633, 0.038433917477429747, 0.021457973554100507, 0.09154377975027206, 0.0602352273892528, 0.11080991306893939, 0.10280083939129603, 0.06737852077118656, 0.110406214043402, 0.12237199858757541, 0.06484693399681674, 0.12610897469223925, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.049884517533475115, 0.05604888032687072, 0.05616689752555026, 0.06709542404813551, 0.12070353966556213, 0.06165711078819802, 0.060792270882972343, 0.05652137775177013, 0.05357965967579348, 0.03886462287147752, 0.039577986283108824, 0.016303151453704756, 0.01850796326103321, 0.021502501989964506, 0.04541561500212232, 0.01886693703538256, 0.015736471619919534, 0.04133833534605069, 0.10087028022501021, 0.12008703439342794, 0.14754498426871598, 0.11533905650032061, 0.1427804093585091, 0.14226780250476745, 0.10274286900100305, 0.10853850474266824, 0.14680476350940774, 0.008672361346616864, 0.01210542420334515, 0.03129662407793499, 0.006009940019941817, 0.0057755656362814545, 0.019538674327007732, 0.003688085859674173, 0.0, 0.015979812564380302]}, "mutation_prompt": null}
{"id": "49449ba0-bd99-4f8f-8f60-268fc712bc01", "solution": "import numpy as np\n\nclass EnhancedFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        elitism_percentage = 0.2  # Preserve top 20% of individuals\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])\n        for _ in range((self.budget // population_size) - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0)\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            combined_fireworks = np.vstack((fireworks, best_firework))\n            indices = np.argsort([func(firework) for firework in combined_fireworks])[:int((1 - elitism_percentage) * population_size)]\n            fireworks = combined_fireworks[indices]\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "EnhancedFastFireworksAlgorithm", "description": "Introducing elitism by preserving a percentage of top individuals to maintain promising solutions and enhance convergence speed.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 13, 9, '        for _ in range((self.budget // population_size) - 1):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 13, 9, '        for _ in range((self.budget // population_size) - 1):\\n'))", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {}, "mutation_prompt": null}
{"id": "d2a0ab50-b4b9-48f3-a001-cbd416e845bb", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "21ee683f-01bc-40ff-ba99-b129a1e1a1b1", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "68b02ec1-c363-4f66-87ea-5f3970d34b95", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "610d7b0e-4cb7-4b8e-909c-5752d5f14514", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "1025e640-3165-4eb4-8cba-dc7891611608", "solution": "import numpy as np\n\nclass EnhancedFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0) * np.random.uniform(0.8, 1.2, size=self.dim))  # Dynamic mutation scaling based on population diversity with individual variation\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            individual_performance = [func(firework) for firework in fireworks]\n            population_size = int(max(min(population_size * np.mean(individual_performance) / (np.max(individual_performance) + 1e-8), 2), population_size)  # Adaptive population size based on individual performance\n            best_firework = fireworks[np.argmin(individual_performance)]\n        return best_firework", "name": "EnhancedFastFireworksAlgorithm", "description": "Introducing a dynamic population size adaptation based on individual performance to enhance exploration and exploitation.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 21, 13, '            best_firework = fireworks[np.argmin(individual_performance)]\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 21, 13, '            best_firework = fireworks[np.argmin(individual_performance)]\\n'))", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {}, "mutation_prompt": null}
{"id": "07acd910-4036-4ed7-ab22-059e902f3f73", "solution": "import numpy as np\n\nclass EnhancedFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0) + np.random.uniform(-0.05, 0.05, size=self.dim))  # Introduce dynamic social learning for enhanced information sharing\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "EnhancedFastFireworksAlgorithm", "description": "Incorporating a dynamic social learning mechanism to enhance information sharing among fireworks, leading to faster convergence.", "configspace": "", "generation": 33, "fitness": 0.09675603035400344, "feedback": "The algorithm EnhancedFastFireworksAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.14.", "error": "", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.09445995224892467, 0.11289500655124507, 0.15788987727760118, 0.08913072058747162, 0.06318030325759061, 0.06045798247619627, 0.07926979113417221, 0.10382144814139449, 0.10755309937806157, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.10371590139105336, 0.05593889736059532, 0.030136794708840675, 0.07143853934572397, 0.0451648684114998, 0.045042642018920054, 0.07197081757632584, 0.039637298750525574, 0.07130214146386538, 0.04488824961610394, 0.020108659508405125, 0.023782967290884693, 0.09133541482587348, 0.019284542382112857, 0.005358190507601446, 0.06517425838777235, 0.04010750622752424, 9.999999999998899e-05, 0.9168865912284163, 0.9349349695548389, 0.04586513579908025, 0.9677275345617975, 0.06561290067913284, 0.05381415621451402, 0.9704686092916384, 0.06615865006946386, 0.03787871212780081, 0.07821747989610595, 0.02779584456825268, 0.05860587263731687, 0.04655554183747879, 0.023586735865687825, 0.03776026059515303, 0.0, 0.016267885598287846, 9.999999999998899e-05, 0.13654738503889252, 0.10370362723310644, 0.09639788500248547, 0.13406766396028358, 0.06276573350567338, 0.09180020258355437, 0.07825795614361453, 0.10544462795269405, 0.10518181156125106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.009794399722090952, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010632583801107653, 9.999999999998899e-05, 0.04841924736372816, 9.999999999998899e-05, 9.999999999998899e-05, 0.06845929910054149, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.06643001567575246, 0.10469137323940447, 0.0, 0.04261158401952103, 0.0678774558452585, 0.13957716303785905, 0.0011985454952908592, 0.014994877804403783, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.002380457165894412, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.15378852801050757, 0.20873657497266773, 0.20458490188427647, 0.18715440651339477, 0.1847904041508195, 0.1400932673481955, 0.19279904230124845, 0.2521403627072186, 0.16882135920942654, 0.020550395146186617, 0.05738255471743703, 0.01063516491164318, 0.03890637467525482, 0.04551979337860523, 0.06807411775456074, 0.08156117978533817, 0.06636793395832652, 0.08276621253012129, 0.07907172757867864, 0.1304210080121626, 0.1685188352891157, 0.12615440253802468, 0.12495155855683426, 0.13328400555975783, 0.12302819082218341, 0.14301485177122764, 0.13217827726371512, 0.17172182132381242, 0.17572576058660816, 0.1361112000024114, 0.1475050726223509, 0.18178160416288025, 0.17088553972449516, 0.14617946417265992, 0.13195301130176795, 0.11616279260373485, 0.0979373315108214, 0.19777296215208895, 0.07789143683080724, 0.12646721433228703, 0.13750956187103947, 0.10411890601552731, 0.09739883540877503, 0.13454626317663076, 0.08304709315451897, 0.15049807826875927, 0.18252626502606506, 0.17543501050403143, 0.1980676141109441, 0.14574836364086474, 0.2071862040828898, 0.13841245548281933, 0.18079503222925453, 0.2155541917578222, 0.13934364758039341, 0.17056333565646686, 0.14382081880844033, 0.16014276041108622, 0.1785093892672276, 0.16351240263582456, 0.17172167823243067, 0.014984231861362773, 0.15923742872969637, 0.14478192838068915, 0.12121549919461361, 0.1370074261235159, 0.11181771267155605, 0.1643184105602199, 0.17165511625192154, 0.17291469397345605, 0.11316842554606299, 0.21666297596328743, 0.1690804254403503, 0.2763213475979378, 0.09869746381799671, 0.08746807812366353, 0.1100934370506167, 0.21774008104028342, 0.09573695710088281, 0.09719452449055155, 0.0684036747044745, 0.16348471153192146, 0.14701056275841407, 0.1627147291093337, 0.14529378762134493, 0.17312985240654455, 0.208400361394394, 0.16592779219077125, 0.1878750462001869, 0.17305920619575843, 0.06883367641222571, 0.041603042693849734, 0.05828967397733831, 0.0817032889081909, 0.07262184546911499, 0.08422175860927295, 0.04919348550199887, 0.04161992466450026, 0.08755477559731828]}, "mutation_prompt": null}
{"id": "a9d6beea-37ed-43a6-bef9-650460283768", "solution": "import numpy as np\n\nclass EnhancedFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        elite_firework = best_firework.copy()  # Introduce elite firework to preserve best solution\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0)\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(elite_firework[j] - fireworks[i][j])  # Guide sparks towards the elite firework\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n            if func(best_firework) < func(elite_firework):  # Update elite firework if a better solution is found\n                elite_firework = best_firework.copy()\n        return elite_firework", "name": "EnhancedFastFireworksAlgorithm", "description": "Introducing an elitism mechanism to preserve the best solution found so far and guide the search towards promising regions.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 16, 44, '            for i in range(population_size):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 16, 44, '            for i in range(population_size):\\n'))", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {}, "mutation_prompt": null}
{"id": "6c402660-8391-46f2-829c-3495ca43345c", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "73b85e87-ec0a-4d05-ab37-fc282c4bdc9e", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "88e95b51-e15e-46ee-91b2-5321b5423fbc", "solution": "import numpy as np\n\nclass EnhancedFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            for i in range(population_size):\n                knowledge_factor = np.random.uniform(0.1, 0.5)  # Adaptive learning rate based on individual knowledge\n                for j in range(self.dim):\n                    sparks[i][j] *= knowledge_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "EnhancedFastFireworksAlgorithm", "description": "Introducing a novel mutation strategy based on adaptive learning rate and individual knowledge to accelerate convergence.", "configspace": "", "generation": 37, "fitness": 0.04302454232138076, "feedback": "The algorithm EnhancedFastFireworksAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.07991128093620847, 0.075920246132258, 0.08682322027238076, 0.03050622929789437, 0.05267361210777377, 0.025632777099387938, 0.06239805359234418, 0.06775725051241521, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006548861733952638, 0.01467079663371329, 0.0021923388090592244, 0.0095288539002788, 0.004117217547352281, 0.00016169510175045865, 0.018248263482334326, 0.0008585043116012825, 0.003250755646990955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03059812250937377, 0.03327721672346584, 0.048986754550083944, 0.02613970858223691, 0.008969553364749472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.0150386701027172, 0.017711494900162883, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 0.00031883811423616404, 0.03582075218217107, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012929085676309127, 0.04769568541870717, 0.015125646750673183, 0.05429048632254818, 0.016320076600533695, 0.01368927977962231, 0.025564558806537185, 0.031488220823957414, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11142667746756452, 0.11147976603337573, 0.1529567911803963, 0.09425923977458062, 0.09108282080766361, 0.09580441870675127, 0.127332007972911, 0.12238993206240734, 0.1210557193025883, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010935482428068632, 0.01379166054285308, 0.02362693033496721, 0.006454584562168519, 0.007066973171059754, 0.027485259512153415, 0.09994391163075123, 0.13693778442697369, 0.09476155619553561, 0.11019983469583061, 0.11276619347658035, 0.09878847649632538, 0.1140705114488102, 0.1246962263662883, 0.1248258299224162, 0.11202024533075927, 0.1316797920939865, 0.11582889697878584, 0.1262786521876882, 0.11024393622571893, 0.12120009477562543, 0.11921308912505901, 0.11092896990672307, 0.0974332093771424, 0.048987599516103764, 0.06103638645456522, 0.050526365691220376, 0.060444296458875724, 0.061351497859413184, 0.06687047873565588, 0.06773350969600656, 0.06122951787566022, 0.033823078194416656, 0.11278795958961496, 0.09903104734923163, 0.14442402417740108, 0.15039434962135334, 0.1132332773586262, 0.14282513594094637, 0.15812019927904508, 0.11961321302170258, 0.16352102826290194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06488307925578662, 0.07188855549277973, 0.0826083698132859, 0.07326629217948721, 0.1207914665021157, 0.06175509045412764, 0.07290448528946358, 0.06649622631057506, 0.08241083181395847, 0.03824121102611444, 0.05768551607710326, 0.029270634703130072, 0.0364947636475077, 0.03466539204217989, 0.04570986151475687, 0.022043345498862443, 0.020028251492844484, 0.044378472509680966, 0.18052280907355778, 0.17541473648026729, 0.1779380087874246, 0.16987098434436954, 0.18027035783504763, 0.2073644174572361, 0.18434011307859566, 0.18070828049763676, 0.16994174054283862, 0.04017437011069891, 0.030887384750638236, 0.05281464280968373, 0.028839152320722317, 0.01925196656827155, 0.03919203151158768, 0.02295329391985812, 0.032880867828806504, 0.03160434659025779]}, "mutation_prompt": null}
{"id": "5d1a10f4-4d42-4b51-8fd9-39f056611fcb", "solution": "import numpy as np\n\nclass EnhancedFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            fitness_factor = np.mean([func(firework) for firework in fireworks])  # Incorporating individual fitness\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j]) * fitness_factor\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "EnhancedFastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on both population diversity and individual fitness to enhance convergence speed.", "configspace": "", "generation": 38, "fitness": 0.061807592665439955, "feedback": "The algorithm EnhancedFastFireworksAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.18.", "error": "", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.07172115044992011, 0.06423415049946268, 0.0822881188591662, 0.019485674469137848, 0.05257887047805776, 0.02519121602229535, 0.051309371152801764, 0.051535794705865556, 0.06701824832800662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.014572254733962064, 0.0, 0.0, 0.0011187632349987098, 0.0, 0.018150078853237606, 0.0, 0.0, 0.0, 0.0, 0.0, 0.019501673109847295, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9955278286233117, 0.9958379916243908, 0.04278205048616679, 0.9956686707001253, 0.9977057178774802, 0.9980541225893832, 0.05185960791526234, 0.9920039552878621, 0.9942651035819423, 0.0, 0.0, 0.0, 0.0, 0.00021551809509001707, 0.0, 0.0, 0.01119445381188322, 0.0, 0.10018685869141841, 0.03765971698870674, 0.006388112346703334, 0.004462664352365198, 0.0, 0.0, 0.026181922062048946, 0.0, 0.009809447265860194, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07830854760949713, 0.10693789276682164, 0.14938378461126411, 0.09416865854239476, 0.08041876921715974, 0.09571399605654951, 0.1239692985348404, 0.09707379230406299, 0.12096781838999726, 0.0, 0.0, 0.0, 0.006002370323321293, 0.0, 0.01750168379108641, 0.0, 0.0, 0.02666833626569931, 0.07028246122685633, 0.06726366127807482, 0.05459392587769929, 0.09846289938816166, 0.06572254448697346, 0.05633684591928945, 0.05488481188470995, 0.04846289571906326, 0.07717165476235766, 0.09597227240618145, 0.09616018134012416, 0.10350813781504986, 0.10838250165484586, 0.08290739212077258, 0.08317157286626975, 0.11411347464502597, 0.10004631021926003, 0.07775611701398755, 0.03322226033550901, 0.03075358899712477, 0.034551307077603455, 0.044555131067182674, 0.015390172400233548, 0.037044486059228054, 0.05639263182623633, 0.038433917477429747, 0.011774946489725324, 0.09154377975027184, 0.06023522738925313, 0.11080991306893939, 0.10280083939129603, 0.06737852077118656, 0.0816703972194458, 0.12237199858757519, 0.06484693399681674, 0.12610897469223914, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04375744941512971, 0.05604888032687072, 0.05616689752555071, 0.06709542404813507, 0.1207035396655618, 0.06165711078819791, 0.060792270882972455, 0.05652137775177002, 0.053579659675793145, 0.038145025866380466, 0.03957798628310871, 0.016303151453704978, 0.01850796326103321, 0.02150250198996473, 0.0454156150021221, 0.01886693703538289, 0.015736471619919423, 0.04133833534605069, 0.10087028022501032, 0.12008703439342794, 0.1475449842687161, 0.10726544462840115, 0.11393539758803017, 0.12456358843521431, 0.10047330010600874, 0.10853850474266835, 0.14680476350940774, 0.0, 0.012105424203345372, 0.03129662407793532, 0.0, 0.0057755656362813435, 0.008161729106915816, 0.003688085859674395, 0.0, 0.006903948184889264]}, "mutation_prompt": null}
{"id": "e878f9cb-777b-4dca-97b7-147fc7898949", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "9a6fb0aa-b9ca-4584-8e1f-601ecd02d5fe", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "b1e3d494-eca0-419b-bb9a-af7aa9bb51c8", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridFireworksPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0)\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n          \n            def objective(x):\n                return func(x)\n          \n            swarm = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n            best_swarm = swarm[np.argmin([func(p) for p in swarm])]\n            for _ in range(self.budget // population_size - 1):\n                for i in range(population_size):\n                    new_particle = swarm[i] + np.random.uniform(0, 1, size=self.dim) * (best_swarm - swarm[i]) + np.random.uniform(0, 1, size=self.dim) * (best_firework - swarm[i])\n                    if func(new_particle) < func(swarm[i]):\n                        swarm[i] = new_particle\n                best_swarm = swarm[np.argmin([func(p) for p in swarm])]\n            best_firework = min([best_firework, best_swarm], key=lambda x: func(x))\n        \n        return best_firework", "name": "HybridFireworksPSO", "description": "Implementing a hybrid approach by combining FastFireworksAlgorithm with Particle Swarm Optimization for enhanced exploration and exploitation.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 16, 44, '            for i in range(population_size):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 16, 44, '            for i in range(population_size):\\n'))", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {}, "mutation_prompt": null}
{"id": "eb3d9322-4e72-467d-accf-b76ede8376ea", "solution": "class EnhancedFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            distances = np.linalg.norm(fireworks - best_firework, axis=1)  # Calculate distances to the best firework\n            diversity_factor = np.mean(distances)  # Dynamic mutation scaling based on individual firework distances\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "EnhancedFastFireworksAlgorithm", "description": "Implementing a dynamic mutation scaling based on individual firework distances to enhance diversity exploration and improve convergence speed.", "configspace": "", "generation": 42, "fitness": 0.0878944025811738, "feedback": "The algorithm EnhancedFastFireworksAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.16.", "error": "", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.13519826236564025, 0.10977430381521514, 0.1044809587764739, 0.12903308274490932, 0.09766744712214892, 0.05687809344509298, 0.0895771783150221, 0.1381197163624549, 0.09412609029931285, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0015134538853982527, 0.0279476957956043, 0.007004546738722084, 0.021273078498511677, 0.012395280037859835, 0.013022216839137735, 0.0429590921649835, 0.038066627490055516, 0.010050460726955701, 9.999999999998899e-05, 0.00978412236402515, 9.999999999998899e-05, 0.01959972157639278, 0.004786982951756724, 9.999999999998899e-05, 0.016782984684014846, 0.010066564236733022, 9.999999999998899e-05, 0.739845074972839, 0.7759967433523728, 0.8324258725427396, 0.8718245894416778, 0.7028798604529067, 0.8542882300967578, 0.83482187771189, 0.8918675151813484, 0.8303305038847302, 0.02874155902358233, 0.028585591632264373, 9.999999999998899e-05, 0.039140285836506195, 0.012560237278478437, 0.03539684103612051, 9.999999999998899e-05, 0.016189153278563406, 9.999999999998899e-05, 0.12518885996849072, 0.08410851418250109, 0.07868659758353169, 0.06067993288674811, 0.014009445759662786, 0.06095613935904953, 0.0314147964294853, 0.04651837650995183, 0.04434410833818525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007935599741198396, 0.030630348012702258, 9.999999999998899e-05, 0.009832584435516378, 0.026507642471484183, 0.048792219774909995, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15272834971268223, 0.11785503990428059, 0.14838054695461433, 0.14810121376728236, 0.17928410709743658, 0.1270187855344631, 0.15153098845753143, 0.17267728776490476, 0.13683443429280506, 0.0022518190332805332, 9.999999999998899e-05, 9.999999999998899e-05, 0.02937718526966815, 0.021772984511368332, 0.06945048104991636, 0.04292054139884627, 0.018454642784065944, 0.028569978974117283, 0.09903162686609068, 0.10084243190644049, 0.09628356554651019, 0.10000003236277066, 0.10717875688907674, 0.14007445232829063, 0.10029273809564332, 0.10567312713817989, 0.10859221296043686, 0.1347164594721888, 0.10339594087524384, 0.1400552074149567, 0.14142621867597993, 0.20595279908681574, 0.16059744813559007, 0.12936060472081423, 0.15029922424004272, 0.1091688445097243, 0.08699002043130677, 0.05230892652984398, 0.052522270699400186, 0.08623183450946037, 0.12021954464696571, 0.08022110518422287, 0.06731132562662046, 0.07931290798101942, 0.08181615708873446, 0.12863978875418558, 0.11710185278110297, 0.1255549665468536, 0.10939813778984031, 0.1240037533067978, 0.10348268992835641, 0.12481703003234412, 0.10487657929196359, 0.1261963614278906, 0.006632122447720712, 9.999999999998899e-05, 0.041416251900532774, 0.12440202333066552, 9.999999999998899e-05, 0.13937825595708275, 9.999999999998899e-05, 0.1431793443534587, 0.13340665904810045, 0.11000266815625748, 0.10887460721122266, 0.09931829542315795, 0.09562370661192454, 0.1207914665021157, 0.09030043111632746, 0.10901957450665867, 0.07887755550623066, 0.09883459097428482, 0.06658128898745486, 0.055640432188649336, 0.046160566513883006, 0.10795250940613677, 0.06497341944875157, 0.1033589088849447, 0.06957044601216023, 0.10517041555849194, 0.10977891761360314, 0.16231077865509547, 0.16925194894433693, 0.16528404811492803, 0.16401860200590057, 0.15174594674729525, 0.1596133129965579, 0.18458417053437592, 0.17409227083993883, 0.15404792131040268, 0.02157647062880219, 0.0213716689121618, 0.04638665792494956, 0.040610754631193235, 0.057953846204592985, 0.03790649780796829, 0.040935459981922606, 0.039816143446039676, 0.051677607485676735]}, "mutation_prompt": null}
{"id": "1834102a-ed8d-4cda-afcc-dfb48e94653e", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "b642185a-18ad-402e-ae8f-b9fbe2191168", "solution": "import numpy as np\n\nclass EnhancedFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0)\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n            best_indices = np.argsort([func(firework) for firework in fireworks])[:population_size // 2]  # Select top performing fireworks\n            for i in range(population_size):\n                if i not in best_indices:\n                    fireworks[i] += 0.3 * (fireworks[best_indices[0]] - fireworks[i])  # Social learning\n        return best_firework", "name": "EnhancedFastFireworksAlgorithm", "description": "Introducing a social learning strategy where each firework learns from the best performing firework in the population to enhance convergence speed.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 15, 44, '            for i in range(population_size):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 15, 44, '            for i in range(population_size):\\n'))", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {}, "mutation_prompt": null}
{"id": "d0459b06-ace1-4777-8f95-5aefbd24858c", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "ae2aa9e4-84eb-4646-b7d7-aaf5920e2d0a", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "2fc878ac-6b98-4f66-a134-ab51d59dd30b", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "d6958e74-b583-4a58-af7e-4320d8994bb9", "solution": "import numpy as np\n\nclass FastFireworksAlgorithmDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0)\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n\n            # Differential Evolution Strategy\n            for i in range(population_size):\n                candidate = fireworks[i] + np.random.uniform(-0.2, 0.2, size=self.dim) * (fireworks[np.random.randint(population_size)] - fireworks[np.random.randint(population_size)])\n                if func(candidate) < func(fireworks[i]):\n                    fireworks[i] = candidate\n\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithmDE", "description": "Implement a differential evolution strategy to explore new solutions and accelerate convergence.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 15, 44, '            for i in range(population_size):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 15, 44, '            for i in range(population_size):\\n'))", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {}, "mutation_prompt": null}
{"id": "362ecdab-aad5-4867-b668-e1c47f7b55c5", "solution": "import numpy as np\n\nclass EnhancedFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0) + 1e-6)  # Dynamic mutation scaling based on population diversity with bias\n            fitness_values = [func(firework) for firework in fireworks]\n            normalized_fitness = (fitness_values - np.min(fitness_values)) / (np.max(fitness_values) - np.min(fitness_values))\n            selection_probabilities = 1 - normalized_fitness\n            selection_probabilities /= np.sum(selection_probabilities)\n            selected_indices = np.random.choice(range(population_size), population_size, p=selection_probabilities)\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[selected_indices[i]][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "EnhancedFastFireworksAlgorithm", "description": "Implementing a dynamic selection mechanism to bias the creation of sparks towards regions with better fitness values.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('probabilities contain NaN').", "error": "ValueError('probabilities contain NaN')", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {}, "mutation_prompt": null}
{"id": "38ad42ec-c60e-4a7f-8446-a73162ae71bc", "solution": "import numpy as np\n\nclass EnhancedFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            performance_factors = np.abs([func(firework) for firework in fireworks]) / np.max(np.abs([func(firework) for firework in fireworks]))\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * performance_factors[i] * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "EnhancedFastFireworksAlgorithm", "description": "Utilizing a self-adaptive mechanism to adjust the sparks' magnitude based on individual firework performance for accelerated convergence.", "configspace": "", "generation": 50, "fitness": 0.05492579808102838, "feedback": "The algorithm EnhancedFastFireworksAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.09.", "error": "", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.11315184146939172, 0.07752063434224743, 0.09055702370388297, 0.07193287893339106, 0.06216118966380435, 0.03623059880880497, 0.13596677403797053, 0.09771554131703286, 0.07656193429278979, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.017354539803329128, 0.01467079663371329, 0.0060612023372476065, 0.007970339111852964, 0.004224405111231677, 0.0021586748480347806, 0.018248263482334326, 0.00010551294200777939, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012136668974640497, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04518231440073084, 0.033667547960281485, 0.04321945865895982, 0.890081404331475, 0.04767460142173019, 0.6639788096207466, 0.053581884858440176, 0.048986754550083944, 0.3865138384001158, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03781639954352345, 0.022307760327577086, 0.006301723171845852, 9.999999999998899e-05, 0.0008509347122733768, 0.026279303607937843, 0.00017411571655212565, 0.028345288492512166, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08413603474907627, 0.10738003274138175, 0.16436046820482075, 0.10909059635988105, 0.10218431899059088, 0.09913773249091606, 0.12418639548725441, 0.14272696480542413, 0.1216476440497869, 0.007127401087061447, 0.002605368117919671, 9.999999999998899e-05, 0.012446425831341035, 0.0032985543052947985, 0.01759993274736349, 0.01212698339731455, 0.0011182639563347418, 0.0267656688986897, 0.12375215597206335, 0.1101382522064479, 0.10529399265416217, 0.10049745284557576, 0.10328924869586442, 0.12066372292490446, 0.13820515683491563, 0.10452274684115215, 0.12531470328872307, 0.10310195910674669, 0.1063781051088698, 0.10468843149784912, 0.1275359977218331, 0.11582672625007195, 0.10929116118202586, 0.123849873356766, 0.1278603309632077, 0.1060410587652576, 0.03920645592230043, 0.05709912592802158, 0.045012033416462316, 0.06445858145372385, 0.0687210566949723, 0.05398321103189441, 0.06688333402163338, 0.08270456907288826, 0.03759970327100637, 0.14060090663450775, 0.09365743993199027, 0.12025307851373979, 0.1285284239971961, 0.11196427046149315, 0.10144319399555302, 0.16574238971675492, 0.13283093939182922, 0.1498296649565909, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08204403100429458, 0.07533123909326134, 0.0951021987704691, 0.08081017977803129, 0.12670859437724358, 0.08398484404244833, 0.09642021668487233, 0.09647783652545772, 0.10799085239173023, 0.23397833134158552, 0.25663990045140495, 0.1764405601914989, 0.07892606574754368, 0.10189517903173395, 0.06738897402909438, 0.03497606551399879, 0.10568398362822196, 0.04143420019681854, 0.18508172429342296, 0.17214930793717265, 0.16890518302237922, 0.17759471439583918, 0.18285416342417649, 0.17395762416865967, 0.17891028280302512, 0.16776288392746863, 0.16512973676668263, 0.02492687705383345, 0.025220008302848873, 0.031393493129599714, 0.02180191670102427, 0.01005676669853306, 0.01941676425858585, 0.012200376593091589, 0.010120813330101952, 0.030594910469010195]}, "mutation_prompt": null}
{"id": "2904a99e-8f20-4d1c-b5c2-538f9372e6a3", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "8e1b6a67-d18c-4c5b-bc44-bf5c6017577e", "solution": "import numpy as np\n\nclass EnhancedFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0)\n                                       + np.abs(np.mean(fireworks, axis=0) - best_firework) * 0.1)  # Dynamic adjustment of sparks\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "EnhancedFireworksAlgorithm", "description": "Utilizing a dynamic adjustment of sparks based on individual firework performance to enhance convergence speed.", "configspace": "", "generation": 52, "fitness": 0.06953122521710399, "feedback": "The algorithm EnhancedFireworksAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.07.", "error": "", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.12162098371618979, 0.20474447212921354, 0.11822644424244588, 0.1118454585384765, 0.11591301601738291, 0.04834632324884025, 0.10767234470377862, 0.13543000951961914, 0.1098377621571286, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04913020348822261, 0.01467079663371329, 0.0043135286798202666, 0.033474871565950304, 0.042540618185795576, 0.025768389198816855, 0.04095524280950036, 0.040610687949326874, 0.01859105275502171, 0.05565139108747552, 0.00436685244705981, 9.999999999998899e-05, 0.03609906289325426, 9.999999999998899e-05, 9.999999999998899e-05, 0.02526071651036932, 0.007451488476204249, 9.999999999998899e-05, 0.07809185287799758, 0.04621529471369101, 0.39412215213077817, 0.4497123444238068, 0.17298099773562248, 0.0641273250925547, 0.40163888510541246, 0.09161611875843467, 0.1893105352373966, 9.999999999998899e-05, 0.029508307925911192, 0.01597687342578935, 0.007636448537298612, 0.04472478322854512, 0.006747089474252843, 0.04987940074305808, 0.013881777749767177, 0.02671827781753977, 0.11273181083918682, 0.09256059973296449, 0.04138874069393983, 0.09681092827723736, 0.041311916884239186, 0.06787647319793544, 0.05593422806533721, 0.061093892729847776, 0.13916597337046954, 9.999999999998899e-05, 0.04306781589395359, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04212199781553094, 0.03907389643227421, 0.025983925269227215, 9.999999999998899e-05, 0.005174048417658894, 0.025710003593698127, 0.03736699545420474, 0.06387544529858646, 0.0237666575308616, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1302328131303293, 0.1565079362458689, 0.14838054695461433, 0.1301563224593597, 0.1279647517205651, 0.10328073543043359, 0.1505232165998761, 0.13646730374405158, 0.13402717239259998, 0.007728578499233474, 9.999999999998899e-05, 9.999999999998899e-05, 0.03591394104039958, 0.03161339133944452, 0.042079726103585346, 0.026343395042031315, 0.05943010393307302, 0.03703116753803026, 0.09565383875268307, 0.12039554356568427, 0.2090378882538303, 0.11947801482378129, 0.1258795522027012, 0.12088071868921668, 0.1429149003688388, 0.11498205080169477, 0.13872176724728236, 0.12154898099847666, 0.14224001298487843, 0.12539301298126027, 0.16512072805741462, 0.14574621745381355, 0.13043283199698563, 0.14211621921081974, 0.15838455103657034, 0.09974257348131377, 0.060119505222725134, 0.09066125161476124, 0.07208885043108426, 0.11598865002233183, 0.10154688359688113, 0.0893824475217625, 0.07940893133687277, 0.09641674933496125, 0.05087252847298096, 0.16726424555540576, 0.1387377368280861, 0.12824682449793368, 0.1336380047518192, 0.16985315108915477, 0.1096950836292323, 0.14207643967975403, 0.17961277150258925, 0.13865044111309688, 0.15631333222625077, 9.999999999998899e-05, 9.999999999998899e-05, 0.12370576427010205, 0.1358732032079133, 9.999999999998899e-05, 0.12128660730011065, 0.026045906875203917, 9.999999999998899e-05, 0.10531065120621519, 0.1331609433875527, 0.11672451638027925, 0.11389399677102952, 0.1265544182866568, 0.10874506519175686, 0.10509475812826463, 0.10057274959812401, 0.11637854153805205, 0.09008954712469097, 0.1105970547463252, 0.06804701504434818, 0.11132271081920297, 0.20269543985382787, 0.06411660749076076, 0.08398967540723501, 0.06410592547394212, 0.060129975060901786, 0.18653880259835942, 0.19126750341314414, 0.17400647135703895, 0.16221982970462612, 0.17944676890122724, 0.1671992320346215, 0.18479310303992902, 0.18011134082539393, 0.1908068673432607, 0.058941138768327406, 0.0329886067170142, 0.03591484798448641, 0.06068018001046527, 0.06622813382569326, 0.028512462450949738, 0.04769825810848338, 0.05316949070057142, 0.0559306710113342]}, "mutation_prompt": null}
{"id": "73ce4e50-46e1-404f-bc8c-3d1f945f6e80", "solution": "import numpy as np\n\nclass FastFireworksAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            fitnesses = [func(firework) for firework in fireworks]\n            diversity_factor = np.mean(np.std(fireworks, axis=0)) * np.mean(fitnesses)  # Dynamic mutation scaling based on individual firework fitness\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithmImproved", "description": "Introducing a dynamic mutation scaling based on individual firework fitness to adaptively adjust exploration-exploitation balance for faster convergence.", "configspace": "", "generation": 53, "fitness": 0.061807592665439955, "feedback": "The algorithm FastFireworksAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.18.", "error": "", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.07172115044992011, 0.06423415049946268, 0.0822881188591662, 0.019485674469137626, 0.05257887047805776, 0.025191216022295126, 0.051309371152801986, 0.051535794705865556, 0.06701824832800662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.014572254733962064, 0.0, 0.0, 0.0011187632349987098, 0.0, 0.018150078853237606, 0.0, 0.0, 0.0, 0.0, 0.0, 0.019501673109847295, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9955278286233117, 0.9958379916243908, 0.04278205048616679, 0.9956686707001253, 0.9977057178774802, 0.9980541225893832, 0.05185960791526234, 0.9920039552878621, 0.9942651035819423, 0.0, 0.0, 0.0, 0.0, 0.00021551809509001707, 0.0, 0.0, 0.01119445381188322, 0.0, 0.10018685869141841, 0.03765971698870674, 0.006388112346703334, 0.004462664352365198, 0.0, 0.0, 0.026181922062048946, 0.0, 0.009809447265860194, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07830854760949713, 0.10693789276682164, 0.14938378461126411, 0.09416865854239476, 0.08041876921715974, 0.09571399605654951, 0.1239692985348404, 0.09707379230406299, 0.12096781838999726, 0.0, 0.0, 0.0, 0.006002370323321293, 0.0, 0.01750168379108641, 0.0, 0.0, 0.02666833626569931, 0.07028246122685633, 0.06726366127807482, 0.05459392587769929, 0.09846289938816166, 0.06572254448697346, 0.05633684591928945, 0.05488481188470995, 0.04846289571906326, 0.07717165476235766, 0.09597227240618145, 0.09616018134012416, 0.10350813781504986, 0.10838250165484586, 0.08290739212077258, 0.08317157286626975, 0.11411347464502597, 0.10004631021926003, 0.07775611701398755, 0.03322226033550901, 0.03075358899712477, 0.034551307077603455, 0.044555131067182674, 0.015390172400233548, 0.037044486059228054, 0.05639263182623633, 0.038433917477429747, 0.011774946489725324, 0.09154377975027184, 0.06023522738925313, 0.11080991306893939, 0.10280083939129603, 0.06737852077118656, 0.0816703972194458, 0.12237199858757519, 0.06484693399681674, 0.12610897469223914, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04375744941512971, 0.05604888032687072, 0.05616689752555071, 0.06709542404813507, 0.1207035396655618, 0.06165711078819791, 0.06079227088297268, 0.05652137775177002, 0.053579659675793145, 0.038145025866380466, 0.03957798628310871, 0.01630315145370509, 0.01850796326103321, 0.02150250198996473, 0.0454156150021221, 0.01886693703538289, 0.015736471619919423, 0.04133833534605069, 0.10087028022501032, 0.12008703439342794, 0.1475449842687161, 0.10726544462840115, 0.11393539758803017, 0.12456358843521431, 0.10047330010600874, 0.10853850474266835, 0.14680476350940774, 0.0, 0.012105424203345372, 0.03129662407793532, 0.0, 0.0057755656362813435, 0.008161729106915816, 0.003688085859674395, 0.0, 0.006903948184889264]}, "mutation_prompt": null}
{"id": "63d5a5a7-9d1f-4f21-aa28-f50b308b2873", "solution": "import numpy as np\n\nclass EnhancedFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            diversity_factor = np.mean(np.std(fireworks, axis=0) + 1e-6)  # Ensure non-zero division\n            for i in range(population_size):\n                sparks = np.random.uniform(-0.1, 0.1, size=self.dim) * diversity_factor * np.abs(best_firework - fireworks[i])\n                new_firework = fireworks[i] + sparks\n                if func(new_firework) < func(fireworks[i]):  # Update firework if spark improves fitness\n                    fireworks[i] = new_firework\n                    if func(new_firework) < func(best_firework):  # Update best firework if improved\n                        best_firework = new_firework\n        return best_firework", "name": "EnhancedFastFireworksAlgorithm", "description": "Implementing a dynamic selection of sparks based on individual firework fitness to promote diversity and exploration.", "configspace": "", "generation": 54, "fitness": 0.09293864624508581, "feedback": "The algorithm EnhancedFastFireworksAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.2198898592927767, 0.19001599816270998, 0.19389121006595833, 0.11854231494826728, 0.1397679820338793, 0.09295311883107338, 0.15059115893133257, 0.16133611799470415, 0.11623155500534921, 0.0058380165826241726, 0.050683713644896655, 9.999999999998899e-05, 0.02573810535032839, 0.021063416059223905, 0.00038040839853148434, 9.999999999998899e-05, 0.008696424886755816, 0.0026818892066919897, 0.03404739341080276, 0.05194774506809663, 0.03588513819327421, 0.05240495697732672, 0.03840991728916465, 0.03673034009059517, 0.05668269549584204, 0.01985884108319791, 0.03341756108590255, 0.040398271651232553, 0.032710754742981574, 0.026216247766287393, 0.02843222046232896, 0.006764031090817246, 0.00833167583061678, 0.011222143480559499, 0.02087221678312612, 9.999999999998899e-05, 0.13209249731203687, 0.11114522477863087, 0.06036398849022406, 0.12289574906007783, 0.09253578402105123, 0.06836564794725541, 0.1724775346524937, 0.08860235269265271, 0.09091065334997894, 0.1133637591585821, 0.08956054981417005, 0.13993555337267827, 0.058022736715418244, 0.05908134973985402, 0.05541808837182127, 0.09624874906675718, 0.05993968224259605, 0.03037299235284463, 0.12468279105053293, 0.09132347079554515, 0.08813824910210988, 0.1277098801709351, 0.08931377123445239, 0.05937268806159157, 0.0621444402025243, 0.1002009481636571, 0.12996093730018943, 0.030796795755897444, 0.04877758370743668, 0.06993437502231681, 0.0470285765551165, 0.04022042803940562, 9.999999999998899e-05, 0.07307848775029702, 0.06984373104808128, 0.1282560837799681, 0.03981444177112936, 0.08068929539461911, 0.09751992705974366, 0.09205799968608408, 0.11716412178890279, 0.02799785627652196, 0.059996647843993944, 0.06984995883820777, 0.06700795167660456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.052781178542448126, 9.999999999998899e-05, 0.016845792985135444, 9.999999999998899e-05, 9.999999999998899e-05, 0.07901617309248576, 0.06529852359452071, 0.13704358883773982, 0.05083900739273306, 0.03911295458642927, 0.06560209759791702, 0.0694619968573974, 0.0725463186268629, 0.09228038801233784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025723222108561483, 0.04244254950830151, 0.013574409796981435, 9.999999999998899e-05, 0.005404098978048166, 0.018365937911841157, 9.999999999998899e-05, 9.999999999998899e-05, 0.01311673365708721, 0.2317464873535049, 0.2207682345815255, 0.2251050210808111, 0.1404053122769401, 0.20373917048824042, 0.14997256289306693, 0.23239316861110149, 0.2735419654115381, 0.21457684499819663, 0.02514554511942646, 0.00951103304367118, 9.999999999998899e-05, 0.027431457144623028, 0.05100583548766613, 0.05123721497372202, 0.05507218394307478, 0.03198915685930004, 0.04544270450985255, 0.15684060539222522, 0.12416826369699652, 0.155578015580208, 0.15442212138078848, 0.1385504500850575, 0.16219841974249616, 0.17066916379009744, 0.14831299372395845, 0.13217993785878246, 0.13129804673877077, 0.15579283101854413, 0.13343981531621107, 0.13040911302231284, 0.15615127625927194, 0.1372879259000872, 0.13673991567984434, 0.13517990641075994, 0.13188481903792804, 0.07851876030803084, 0.11427971845528917, 0.07836015400241303, 0.08391906095453594, 0.12807611578997335, 0.06912084818654096, 0.07677751973071045, 0.08064387558497732, 0.061358301040498, 0.1885849989941547, 0.1420848898302094, 0.16446087708389057, 0.15600401842395295, 0.1775309550113916, 0.18050814716508046, 0.17083234694194327, 0.16167081559090168, 0.16498719255566963, 0.17278412133896692, 0.17439767220401858, 0.1623815779458968, 0.16306145596900112, 0.18061358355987156, 0.15657143453706124, 0.18656703065752822, 0.16464790927067063, 0.15250206593810545, 0.15547162467314812, 0.15953336745927282, 0.16709021135096358, 0.20161559406859297, 0.1660434779741623, 0.15696476758997635, 0.1493185870486945, 0.14246925876356908, 0.15003363206238718, 0.2552593583252488, 0.16091134141840124, 0.08199618118703833, 0.1549312143981073, 0.18820483053908066, 0.14625838801924018, 0.19853853842883395, 0.13955620862746998, 0.14821526076449032, 0.18105085967961865, 0.18522302798525048, 0.17776335820333367, 0.1903789488172274, 0.17229757729274442, 0.17945315821479668, 0.17552982687083551, 0.16074824927170195, 0.1758633505371867, 0.04952467835246677, 0.06265608997048089, 0.057074250519548175, 0.04251084221748824, 0.03864914571929201, 0.04089375351662694, 0.04120087646204962, 0.037963247969960534, 0.04341879495829348]}, "mutation_prompt": null}
{"id": "3611d7ac-9e67-4836-927a-5f9d233650b1", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "362a1d26-5a7f-409e-a1cc-cc18dbf03feb", "solution": "import numpy as np\n\nclass DynamicPopulationFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0) * np.random.uniform(0.9, 1.1))  # Dynamic mutation scaling based on population diversity with adaptive factor\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            population_size = max(2, min(20, int(np.clip(np.mean([func(firework) for firework in fireworks]) * 10, 2, 20))))  # Adaptive population size adjustment based on fitness\n            fireworks = fireworks[:population_size]\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "DynamicPopulationFastFireworksAlgorithm", "description": "Implementing dynamic population size adaptation to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 10 is out of bounds for axis 0 with size 10').", "error": "IndexError('index 10 is out of bounds for axis 0 with size 10')", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {}, "mutation_prompt": null}
{"id": "ab979aa2-c37e-4206-827c-7bba2a7d3ede", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "e5256f97-f3d9-471f-ab24-6afa0659dccb", "solution": "import numpy as np\n\nclass EnhancedFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            for i in range(population_size):\n                diversity_factor = np.mean(np.abs(fireworks[i] - np.mean(fireworks, axis=0)))  # Dynamic mutation scaling based on individual fireworks' diversity\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "EnhancedFastFireworksAlgorithm", "description": "Implementing a dynamic mutation scaling based on individual firework diversity to enhance convergence speed.", "configspace": "", "generation": 58, "fitness": 0.07894129257746163, "feedback": "The algorithm EnhancedFastFireworksAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.14.", "error": "", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.1136914368853359, 0.09899772143101127, 0.13685855888672782, 0.07061812690515723, 0.08152365175212528, 0.03766138682021736, 0.08700124594011827, 0.10963778968012505, 0.08998055545547468, 9.999999999998899e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05221121454759792, 0.023863062414252956, 0.03766190704088479, 0.017189447884869202, 0.029073373363822208, 0.027407786991805683, 0.03546597041342414, 0.028715985865305105, 0.01206682127565839, 0.007613475811889314, 0.0, 0.016999759033091477, 0.05447383266364614, 0.001762806613797685, 9.999999999998899e-05, 0.0, 0.017238146074750493, 9.999999999998899e-05, 0.9664379378286159, 0.03916066651843886, 0.04742159249801947, 0.9639565334177544, 0.05115604264142526, 0.8311192726532981, 0.9657701508919823, 0.054999331501064064, 0.5812820681007835, 0.02231971795253007, 0.011321533100569603, 0.03256643616108301, 0.03537833869186924, 0.09007748443876751, 0.022063419060206257, 0.04817248798350515, 0.02025018399376277, 9.999999999998899e-05, 0.10572911098724924, 0.1043560443678474, 0.05595033968591456, 0.00902815718036376, 0.0028786838047440977, 0.09251678568641786, 0.02618192206204928, 0.0273485447681433, 0.05125377687603372, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.006086463732314251, 0.0, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 0.0, 0.00024298387745036454, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.08409134684068709, 0.07172677488165624, 0.0, 0.0, 0.03709953032114377, 0.0, 0.056460654997729565, 0.07850978241860829, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 0.0, 9.999999999998899e-05, 0.15668625368446087, 0.10693789276682197, 0.1730538489423269, 0.11992287698634752, 0.12355417095792309, 0.11616481570386983, 0.16886771867087336, 0.16729643861532784, 0.13985409531680493, 0.019868157247027507, 0.0013920159364643192, 9.999999999998899e-05, 0.040336873372758264, 0.03666499540029999, 0.042321315364202916, 0.03883044294277893, 0.017268323114485562, 0.03298050529163088, 0.08377934393604813, 0.1111581429926447, 0.10537435047288823, 0.09846289938816166, 0.10661595930454859, 0.11856080036164507, 0.09960660609898897, 0.1361621704206164, 0.18995469587389524, 0.12289368380747656, 0.16207973201902492, 0.1286561871942009, 0.13714095821017924, 0.15309235101130325, 0.12662600865438178, 0.11411347464502575, 0.12073856273722172, 0.1142398617743915, 0.09246396248736088, 0.08701075325648666, 0.060551716520355736, 0.07610871275081532, 0.060930535291632615, 0.07782984796738313, 0.0746068615092389, 0.08796489940756691, 0.08279389915359947, 0.12049992813936528, 0.11881712770176234, 0.20585237596862127, 0.2015920026346425, 0.13921648902456507, 0.16476036247775172, 0.12586427042009252, 0.09239240375869284, 0.18667906052142802, 0.14344489144598882, 0.0, 0.15136546563685638, 0.1295876644806131, 0.13834268679356176, 0.15327362678034429, 0.13881994184162905, 0.07333301777376366, 9.999999999998899e-05, 0.07359308941986287, 0.10599150825402825, 0.08795612682349419, 0.08593942364454632, 0.12070353966556235, 0.12873803885192336, 0.1671403041401598, 0.12162021191945749, 0.11073511149594939, 0.038145025866380244, 0.06890206272659494, 0.094908657376233, 0.10422967619718948, 0.09658420052828898, 0.0752740998412843, 0.05286782585832994, 0.10761691957864683, 0.04143420019681854, 0.1392382915455369, 0.198728789287408, 0.17510680546934598, 0.13844902493198774, 0.18152852553779852, 0.18074628959420602, 0.14690471394559645, 0.17880489705943003, 0.18189890473154646, 0.020198734744298008, 0.06173008436118521, 0.056803626884351255, 0.02166688495927005, 0.017510066695556104, 0.07524832879907606, 0.02206573342489848, 0.023468011584224735, 0.0500542641569629]}, "mutation_prompt": null}
{"id": "33eb372e-6565-4f65-9377-02b150467f51", "solution": "import numpy as np\n\nclass EnhancedFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0) * 1.1)  # Modified diversity factor\n            for i in range(population_size):\n                sparks[i] = sparks[i] * (best_firework - fireworks[i]) + np.random.uniform(-0.1, 0.1, size=self.dim)  # Guided search strategy\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "EnhancedFastFireworksAlgorithm", "description": "Incorporating a guided search strategy by biasing sparks towards the best firework position to improve convergence speed.", "configspace": "", "generation": 59, "fitness": 0.06817542239519413, "feedback": "The algorithm EnhancedFastFireworksAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.06.", "error": "", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.10965036325040711, 0.14734045750390656, 0.1389617147293697, 0.06510466701612272, 0.06940849387961079, 0.08784360654777068, 0.08674290406106588, 0.11996798658808805, 0.13897950152812022, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041527838745639256, 0.0298628344438564, 0.013771039855359213, 0.03428704993508069, 0.038397524723083554, 0.01485054428625443, 0.05631546086628991, 0.048753039728154035, 0.013571112667501772, 0.03009368039582827, 0.021448251401500973, 0.004170658852073572, 0.036959722210401225, 0.0005214532374290259, 0.010811741835324962, 9.999999999998899e-05, 0.0031757689776977793, 0.007111762012319001, 0.07625652115888992, 0.049625226624176455, 0.06733748962757202, 0.05535476822152874, 0.0795207400190171, 0.0537287330202213, 0.0528688831032883, 0.07214633083739741, 0.06630633842629285, 0.08148977911142119, 0.04865698956907272, 0.015193168371024357, 0.005855099784210838, 0.013085922472312661, 0.011578592006164179, 0.007315997943748487, 0.011293333694524565, 9.999999999998899e-05, 0.13399673047645233, 0.07352249668697275, 0.04601353228299088, 0.058838225547669154, 0.018847156800089415, 0.07367057933926024, 0.06807574183444975, 0.01785769950907634, 0.14569635275714266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007191724794669563, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001014122875342971, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033718217033507414, 0.07905142220304118, 0.05926363197786555, 0.05247703482057875, 0.04024610198037548, 0.02617927799000286, 0.06118753028882418, 0.08342904249883176, 0.04572928509313656, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15171094068446855, 0.1584985453567993, 0.16334610214672052, 0.10239770458440867, 0.11957255011222878, 0.11173964054067942, 0.1638967401942406, 0.13593569063485633, 0.1723402523025841, 0.016972129391264246, 0.0019313681470460864, 9.999999999998899e-05, 0.02058509489006699, 0.05637182483730796, 0.040286510181760216, 0.024464041188277608, 0.03731876849575422, 0.06182797963103093, 0.17266603396537228, 0.168767185889237, 0.16229008144627677, 0.14582075665955907, 0.1469345836872733, 0.14941471537375905, 0.11823719299587354, 0.13842017681962993, 0.1602095359666369, 0.13113727924741436, 0.16769719301430885, 0.1317834022878529, 0.15026300201189058, 0.1525427793615436, 0.1384243171678461, 0.1415315617613554, 0.1395408571101343, 0.1312887579226366, 0.08624917426406786, 0.11155034483336879, 0.06795703375300888, 0.08622603717596888, 0.11356744643425631, 0.11064266731409567, 0.0810816190262742, 0.07275792751226673, 0.07720087525587538, 0.17010497428993587, 0.16116789439628088, 0.15936837253078007, 0.18088460238331372, 0.168344851216909, 0.15697904087188475, 0.16158708066694527, 0.1511383482436478, 0.1548856225617936, 0.11070258877179873, 0.09361554284208817, 9.999999999998899e-05, 0.04322907093850481, 0.13591018736589355, 0.12200685128414168, 0.1327841061621673, 9.999999999998899e-05, 0.05995135188806433, 0.11444640892835067, 0.1215458153416521, 0.0978425860459825, 0.14657317001424508, 0.15646686132526466, 0.09002421506141, 0.10604952170813353, 0.10080611156334929, 0.10849507917819834, 0.07164853241448221, 0.1764880093883614, 0.07395888896005232, 0.20834468016796548, 0.12358005453795029, 0.10065418073476429, 0.10607590007549339, 0.16890703637163784, 0.06797749969964462, 0.17784949547620932, 0.17713329909392728, 0.17549244957513765, 0.18961517515628823, 0.1834281703046039, 0.18911655061344312, 0.2079900321137904, 0.18710347257021198, 0.1766604284385801, 0.05120574304464576, 0.05140638404717557, 0.06445826510347141, 0.051847365617331165, 0.07031264690462846, 0.042734034650717345, 0.056885853776050155, 0.06139832586171701, 0.052833637761441454]}, "mutation_prompt": null}
{"id": "5633e76e-41e1-4d25-99bd-6e63a123be99", "solution": "import numpy as np\n\nclass EnhancedFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0)\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            # Competitive selection among sparks to keep diverse solutions\n            spark_fitness = [func(spark) for spark in sparks]\n            indices = np.argsort(spark_fitness)[:population_size // 2]\n            fireworks[:population_size // 2] = sparks[indices]\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "EnhancedFastFireworksAlgorithm", "description": "Implementing a competitive selection mechanism among sparks to promote diversity and exploration in the search space, enhancing convergence speed.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 15, 44, '            for i in range(population_size):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 15, 44, '            for i in range(population_size):\\n'))", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {}, "mutation_prompt": null}
{"id": "ce2bdcf8-b1d0-4fd6-b382-c30ec719aceb", "solution": "import numpy as np\n\nclass EnhancedFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            chaos_factor = np.mean(np.abs(np.sin(np.sum(fireworks, axis=1))) * np.random.uniform(0.5, 1.5)  # Novel adaptation of chaos theory\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= chaos_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "EnhancedFireworksAlgorithm", "description": "Introducing a novel adaptation of chaos theory to generate diverse sparks for exploration, improving convergence speed.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 15, 44, '            for i in range(population_size):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 15, 44, '            for i in range(population_size):\\n'))", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {}, "mutation_prompt": null}
{"id": "c4278d79-ed8a-4cd0-8627-33873b475208", "solution": "import numpy as np\n\nclass EnhancedFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            local_search_behavior = np.abs(fireworks - best_firework)\n            mean_local_search = np.mean(local_search_behavior, axis=0)\n            diversity_factor = np.mean(mean_local_search)  # Self-adaptive mutation scaling based on local search behavior\n            sparks *= diversity_factor\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "EnhancedFastFireworksAlgorithm", "description": "Implementing a self-adaptive mechanism to adjust the mutation step size based on the local search behavior of each firework.", "configspace": "", "generation": 62, "fitness": 0.06878122032067663, "feedback": "The algorithm EnhancedFastFireworksAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.08.", "error": "", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.12902988169119411, 0.2318165003536543, 0.10923790408728251, 0.10848294020080718, 0.09455038811041727, 0.05065516954560467, 0.10551755944834951, 0.12747844436355604, 0.11549509399039048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0463904672008697, 0.01467079663371329, 9.999999999998899e-05, 0.042685439589718044, 0.05990411434805776, 0.01901009087854688, 0.0373404928733464, 0.04184047875941033, 0.009427653679242587, 0.04582837362710712, 9.999999999998899e-05, 9.999999999998899e-05, 0.035591777515864176, 9.999999999998899e-05, 9.999999999998899e-05, 0.03697757887122555, 0.007302422244724438, 9.999999999998899e-05, 0.07820349023877848, 0.04628445941889381, 0.49995026420059263, 0.4319271897386714, 0.1702643896506123, 0.06764142350471214, 0.4013390954848767, 0.08641976261241413, 0.062152007160101164, 9.999999999998899e-05, 0.02528086336444535, 0.0007623508550744784, 9.999999999998899e-05, 0.042018331145851184, 0.013008737601078013, 9.999999999998899e-05, 0.014176700012043186, 0.035182472036733636, 0.11273181083918682, 0.09658167555300534, 0.05143886055838642, 0.09669163546989179, 0.028201693526224147, 0.06863736250803754, 0.06077427802541424, 0.056909634620545546, 0.13740307710044342, 9.999999999998899e-05, 0.03962381353319344, 9.999999999998899e-05, 9.999999999998899e-05, 0.00024892447925684014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0630208932347539, 0.022099743963773677, 0.01756751863929895, 0.018592167975003182, 0.04515881317981618, 0.013949072316369882, 0.049988369359168616, 0.07269120773416149, 0.030971519325899477, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12413437415129902, 0.15091350413811266, 0.15589175488442342, 0.12057912345795907, 0.1299833634611809, 0.10277741816997299, 0.14375481492149123, 0.142970803151534, 0.13804292340779012, 0.009771290776819264, 9.999999999998899e-05, 9.999999999998899e-05, 0.03393808528420883, 0.03531674021762521, 0.03972802266480502, 0.03329735604644268, 0.04727443366518003, 0.039674792926402525, 0.12489657616018957, 0.1197164238414764, 0.13597979422057083, 0.14697284810508227, 0.11669800961306176, 0.11287578462041548, 0.114515123345454, 0.13291481315719633, 0.1426362350908632, 0.12085939759528397, 0.1473363569005356, 0.1316544532146896, 0.16126080735504533, 0.14988582847079857, 0.120231705356451, 0.1382663293918266, 0.142709552455746, 0.09622001668967606, 0.055066701421673137, 0.09070623371097386, 0.070618837780279, 0.09556480881221086, 0.10077735127264165, 0.07805398401308827, 0.08012410261180791, 0.10826321189138521, 0.04784584983197715, 0.19117009747543656, 0.16168773582211016, 0.12234259381303836, 0.15706222474475584, 0.1631204352851957, 0.10085788984825816, 0.14202744319171345, 0.1601193485954382, 0.14294292419168342, 0.14570027827079213, 9.999999999998899e-05, 9.999999999998899e-05, 0.13052410866822506, 0.14576894252161166, 9.999999999998899e-05, 0.13594585862488784, 0.012378021622380997, 9.999999999998899e-05, 0.11751451806919722, 0.12923168824272668, 0.11190211162550168, 0.15015380092847885, 0.12758420448549002, 0.09003707130029837, 0.11021341740877943, 0.09949741910964072, 0.13821773099522738, 0.10750097313893514, 0.09388165067289533, 0.06270351701293553, 0.10744095356628491, 0.11924633946003194, 0.08760942370152192, 0.060843521399273626, 0.07250874417780484, 0.09094021640797001, 0.18026809779620323, 0.19619173685448932, 0.1769286500095213, 0.18423829839961658, 0.17823990548656643, 0.16660613318502782, 0.17331609640261814, 0.17904519127563367, 0.16628959307080038, 0.053023330860737405, 0.040962820834372415, 0.038979471884252215, 0.038325030434334995, 0.050907963240476084, 0.034502494413342744, 0.05033939230439177, 0.05294086811994092, 0.04243619507986818]}, "mutation_prompt": null}
{"id": "4d7b1de0-0050-4851-9d7c-112434b66279", "solution": "import numpy as np\n\nclass EnhancedFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            individual_factors = [np.abs(func(firework) - func(best_firework)) for firework in fireworks]\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= individual_factors[i]  # Adaptive mutation scaling based on individual performance\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "EnhancedFireworksAlgorithm", "description": "Implementing a novel adaptive mutation strategy based on individual performance to guide the search towards promising regions for faster convergence.", "configspace": "", "generation": 63, "fitness": 0.04040326972264218, "feedback": "The algorithm EnhancedFireworksAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.07.", "error": "", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.07172115044992011, 0.08489416254129323, 0.08228811885916654, 0.03074355187566813, 0.05257887047805776, 0.05140609673806884, 0.051440021431359284, 0.05153579470586578, 0.06868464670560603, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.014572254733962064, 0.0, 0.0, 0.0011187632349987098, 0.0, 0.018150078853237606, 0.0, 0.0, 0.0, 0.0, 0.0, 0.019501673109847295, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04542041869230384, 0.8680708368765697, 0.07037537496843393, 0.05906372485541289, 0.09293170255026872, 0.04916370673305659, 0.11185928245619015, 0.1809091412556213, 0.10660621904579604, 0.0, 0.0, 0.0, 0.0, 0.00021551809509001707, 0.0, 0.0, 0.01119445381188322, 0.0, 0.10018685869141841, 0.04981817946571121, 0.006388112346703556, 0.004462664352364976, 0.0, 0.0, 0.026181922062049168, 0.0017939891458421675, 0.0117608802170307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07882314418254388, 0.10693789276682164, 0.14829537673711224, 0.09416865854239498, 0.08041876921715974, 0.09571399605654951, 0.12396929853484018, 0.0989289037719927, 0.12096781838999726, 0.0, 0.0, 0.0, 0.006002370323321182, 0.0, 0.01750168379108652, 0.0, 0.0, 0.02666833626569931, 0.07028246122685611, 0.0672636612780747, 0.05459392587769929, 0.09846289938816188, 0.0861829488457021, 0.056336845919289225, 0.07684145379351537, 0.04846289571906348, 0.07717165476235788, 0.10096250127316164, 0.09851123023825259, 0.10973928004108113, 0.1270650932853108, 0.08575445069324539, 0.1270600632757658, 0.11411347464502575, 0.10004631021926003, 0.08329016496640285, 0.03322226033550901, 0.03075358899712477, 0.034551307077603455, 0.050904728967934854, 0.032311670709980755, 0.037044486059228054, 0.07078374114900521, 0.038433917477429747, 0.019079511417944395, 0.10175688036180852, 0.06395255051707394, 0.12024724044523338, 0.11573729010063649, 0.08192955100701982, 0.10674745336187175, 0.12237199858757541, 0.08809613143200656, 0.12610897469223914, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05866465212845218, 0.06221057237412042, 0.10713703304127176, 0.07599656759280349, 0.12070353966556213, 0.06165711078819802, 0.13391845504315514, 0.06532974831140292, 0.06470240139055472, 0.05098478182436361, 0.039577986283108824, 0.048207478349968746, 0.04957442266164325, 0.021888261102784745, 0.04541561500212232, 0.02410514214077719, 0.01626588263628237, 0.04133833534605069, 0.1330332281840343, 0.12806143447971785, 0.14754498426871576, 0.14531256109664248, 0.15088115007182368, 0.13706349315346267, 0.1460656724419801, 0.1264829994206913, 0.1468047635094072, 0.030518336186985517, 0.012105424203345483, 0.03129662407793543, 0.01635261808931976, 0.0057755656362814545, 0.008356849215912399, 0.011001523342639152, 0.002289523705706231, 0.010872507259718445]}, "mutation_prompt": null}
{"id": "6c4d15fc-fa5f-4f7c-93a9-2514e554123b", "solution": "import numpy as np\n\nclass EnhancedFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0)\n                                       * np.abs(best_firework - fireworks), axis=1)  # Dynamic step size adaptation\n            for i in range(population_size):\n                sparks[i] *= diversity_factor[i]\n            fireworks += sparks\n            new_fitness = [func(firework) for firework in fireworks]\n            best_firework = fireworks[np.argmin(new_fitness)]\n            if new_fitness[i] < func(best_firework):\n                best_firework = fireworks[i]\n        return best_firework", "name": "EnhancedFireworksAlgorithm", "description": "Utilizing a dynamic step size adaptation based on the individual's fitness improvement to enhance exploration-exploitation balance and improve convergence speed.", "configspace": "", "generation": 64, "fitness": 0.08207968063397678, "feedback": "The algorithm EnhancedFireworksAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.18.", "error": "", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.09682718225075604, 0.06485792239220156, 0.10183141712829313, 0.09160365604428611, 0.05519545473723442, 0.038107807615960665, 0.07330668028101117, 0.06615055353459187, 0.07335194778740184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.014572254733962842, 0.012473304701155596, 0.02844274743934916, 0.003590701790747719, 0.021471881500830348, 0.018150078853237384, 0.0, 0.015210505295863208, 0.04038944744050277, 0.0, 0.0, 0.019501673109845963, 0.0, 0.0, 0.006338007966253056, 0.0, 0.00013937255910767554, 0.9676193267602973, 0.9641714469691745, 0.9499656721222702, 0.9605410106015597, 0.06503760236682266, 0.9439821008546561, 0.9637522573356859, 0.9613874086120431, 0.9377564324295172, 0.0, 0.0, 0.0, 0.0, 0.00021551809509035014, 0.007971617173339163, 0.0, 0.011194453811883665, 0.03325929711094522, 0.1001868586914183, 0.05797625661715278, 0.07079300718378512, 0.01365967067400875, 0.014690167522154796, 0.00993652985646809, 0.05280499371009917, 0.059021954587310965, 0.14528735901231993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009302166700169257, 0.0, 0.0, 0.0019104880277084346, 0.005044242901537488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0898154934698121, 0.1069378927668222, 0.14829537673711368, 0.13842968756671903, 0.12616506952578022, 0.1304068618001062, 0.1239692985348404, 0.13133802366673897, 0.14373364069324124, 0.0, 0.0, 0.0, 0.006002370323321182, 0.001957076156134052, 0.028804565714489194, 0.000614150651474632, 0.009626450076927862, 0.038847134419649265, 0.07312572263316164, 0.11632115838268131, 0.11685549019506603, 0.10390207188647238, 0.10531165051735258, 0.10788504615297156, 0.11019288265461569, 0.10593235256443145, 0.10334756007942558, 0.14701828350680446, 0.10498475435953003, 0.12087768420311518, 0.14572752096987807, 0.11651845381899872, 0.11963556897352101, 0.12954535742238127, 0.10328369876752408, 0.10290433413952815, 0.07570919742382465, 0.062229227521933494, 0.04964304984917922, 0.07401044644361265, 0.04920613197458401, 0.04690105485592644, 0.08588097474776046, 0.06447784328681005, 0.062063390318524925, 0.14421386703338268, 0.08986393813467675, 0.1378672901798289, 0.12527829995383277, 0.0979474321660384, 0.15218238878809331, 0.12334246147454664, 0.10472278472789254, 0.12872223369291147, 0.0, 0.0, 0.1306444212002984, 0.0, 0.1597942455269835, 0.10064518532553157, 0.0, 0.0, 0.0, 0.08253209395684424, 0.06652618425918166, 0.09932076662260914, 0.08203070746452135, 0.12070353966556235, 0.08015625241604851, 0.10308992488833724, 0.0687079729775909, 0.13364252706107926, 0.05871133365678327, 0.03957798628310916, 0.09228384420135094, 0.08854275985992266, 0.048372035191205254, 0.12107810482107906, 0.06330358881139508, 0.05244556425363045, 0.09821617589230902, 0.18482218430829656, 0.1471360867605388, 0.15951159727329944, 0.15859995725574572, 0.17121781265499125, 0.17266177553125994, 0.17223129294983863, 0.1705599162837258, 0.16412614577353268, 0.016396014900450062, 0.01363469917223592, 0.03129662407793443, 0.043356780998026645, 0.025828200434717785, 0.036503695404729086, 0.04100374304446719, 0.01211502150311794, 0.036329121482702065]}, "mutation_prompt": null}
{"id": "b262b684-c0a6-40fb-8911-a52a4ec67bd4", "solution": "import numpy as np\n\nclass EnhancedFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            fitness_values = [func(firework) for firework in fireworks]\n            diversity_factor = np.mean(np.std(fireworks, axis=0))\n            for i in range(population_size):\n                for j in range(self.dim):\n                    amplitude_factor = 1.0 + (fitness_values[i] - min(fitness_values)) / max(1e-6, max(fitness_values) - min(fitness_values))\n                    sparks[i][j] *= diversity_factor * amplitude_factor\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "EnhancedFastFireworksAlgorithm", "description": "Implementing a self-adaptive mechanism to adjust the sparks' amplitudes based on the individual firework's fitness to enhance exploration and exploitation balance.", "configspace": "", "generation": 65, "fitness": 0.0617314545612929, "feedback": "The algorithm EnhancedFastFireworksAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.11984497324567078, 0.16686655220710978, 0.11886765661601562, 0.09479536052193993, 0.08922473021169686, 0.048119728427060915, 0.10390180705494678, 0.1263239986689667, 0.0992073549653798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.048545483666311506, 0.015559633477071455, 0.0017448023533348511, 0.044808745251175064, 0.03357599292059499, 0.017074102058455387, 0.036643695105709195, 0.035203528533642725, 0.016096886731533644, 0.05239183940355774, 0.012440566665541386, 9.999999999998899e-05, 0.02815597095950273, 9.999999999998899e-05, 9.999999999998899e-05, 0.03153234156416451, 0.004322443180851954, 9.999999999998899e-05, 0.06375904144404121, 0.04784172705749201, 0.062076112047541265, 0.28375257241975615, 0.0636970664757911, 0.055327664669156396, 0.07942375619406461, 0.06534722814010352, 0.050035140954739155, 9.999999999998899e-05, 0.01752389282351563, 0.004176090062265936, 0.008191218458868943, 0.03783099163897785, 0.005463628480747329, 0.018460538580729713, 0.013684126580726153, 0.01474576171074582, 0.11266917265980969, 0.0842053653135697, 0.030443046351862124, 0.0950963936379432, 0.031025032471465375, 0.0598820668135408, 0.05722300591502061, 0.056833165553481946, 0.13418269574748554, 9.999999999998899e-05, 0.03653718256605776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02026266659784015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027377387494886718, 0.015368806445594574, 0.03700918770244077, 0.010165748439421751, 0.015317114227114126, 0.007229856302456761, 0.03338783536468781, 0.01953280205727026, 0.022502225468891246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13122961315727955, 0.13778824210764773, 0.1487527601049181, 0.12790089298689677, 0.12479186654127805, 0.10234012279565308, 0.15273040126933923, 0.13072438647973827, 0.13024133115291114, 0.009095781539648073, 0.000724298800269807, 9.999999999998899e-05, 0.025034819184128865, 0.03336854566459646, 0.04269422338472195, 0.03258886521850146, 0.05244549116251762, 0.040274288698659566, 0.10137876961692205, 0.1247913405683897, 0.16086985630883266, 0.15210186771839196, 0.13105135620740838, 0.11609711044870241, 0.1124756338513484, 0.14409304296533043, 0.11461014998001462, 0.11710562438180294, 0.13721796402700515, 0.12451047652281266, 0.16332655256578743, 0.14488207036534584, 0.12159990183333336, 0.13492987625326092, 0.14004296333389699, 0.11004468492904085, 0.055903706650496154, 0.06954352124320462, 0.06632423837627266, 0.11950569248878018, 0.0880544653459594, 0.07143722988366497, 0.08320715124120448, 0.09735278474402098, 0.044280235627032205, 0.1668665309634504, 0.14577749636391968, 0.1280584992984708, 0.14615869328120357, 0.14682038278297682, 0.10778942228702959, 0.16447050219055503, 0.19342295085225303, 0.1266039542185079, 0.14792082320467725, 0.040257877966048516, 9.999999999998899e-05, 0.10748890509863707, 0.1263808502450573, 9.999999999998899e-05, 0.11532818243566856, 9.999999999998899e-05, 9.999999999998899e-05, 0.09650128453858287, 0.123957075400848, 0.1037512630519446, 0.11390554707400113, 0.12840471944779586, 0.07213263000546122, 0.12584776885499627, 0.09144093926775254, 0.10748869979972497, 0.08862941454057105, 0.19868847869462258, 0.04543037244267922, 0.1329592168171011, 0.12275291890992335, 0.11033564853814659, 0.06648708385293012, 0.11114961516340749, 0.07823648801949679, 0.1866700417284518, 0.17266219849757913, 0.15716912264047556, 0.16285615890765182, 0.18835508757990715, 0.17417568015841478, 0.18140330224815837, 0.16926145906530632, 0.16193987970168489, 0.04570090492152923, 0.03702406759056143, 0.03781578739963587, 0.05231960885253917, 0.05059705439906792, 0.022884719080630944, 0.04498871522725001, 0.05115158855408575, 0.037074866690589126]}, "mutation_prompt": null}
{"id": "5b9dda45-fce0-40d4-8c4f-58e02f269c20", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "ddb6baf0-6af2-4696-a866-0efbaae63099", "solution": "import numpy as np\n\nclass EnhancedFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            \n            # Dynamic selection mechanism to prioritize exploration of diverse regions\n            diversity_scores = np.std(fireworks, axis=1)\n            selected_indices = np.argsort(diversity_scores)[:int(population_size * 0.5)]\n            selected_fireworks = fireworks[selected_indices]\n            \n            for i in range(population_size):\n                if i not in selected_indices:\n                    fireworks[i] += sparks[i]  # Continue with original sparks for non-selected fireworks\n                else:\n                    for j in range(self.dim):\n                        sparks[i][j] *= np.abs(best_firework[j] - selected_fireworks[i][j])  # Adjust sparks based on diversity\n                    fireworks[i] += sparks[i]\n            \n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        \n        return best_firework", "name": "EnhancedFastFireworksAlgorithm", "description": "Implementing a dynamic selection mechanism to prioritize exploration of diverse regions in the search space for enhanced convergence speed.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 7 is out of bounds for axis 0 with size 5').", "error": "IndexError('index 7 is out of bounds for axis 0 with size 5')", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {}, "mutation_prompt": null}
{"id": "26f6bffc-87eb-405c-94cd-19e07ba1e71e", "solution": "import numpy as np\n\nclass EnhancedFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0)\n            distance_factor = np.abs(best_firework - fireworks) / np.max(np.abs(fireworks))\n            sparks *= diversity_factor * distance_factor\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "EnhancedFastFireworksAlgorithm", "description": "Implementing a dynamic adjustment of sparks' magnitude proportional to the distance from the best firework to intensify exploration and exploit the search space efficiently.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 15, 13, '            distance_factor = np.abs(best_firework - fireworks) / np.max(np.abs(fireworks))\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 15, 13, '            distance_factor = np.abs(best_firework - fireworks) / np.max(np.abs(fireworks))\\n'))", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {}, "mutation_prompt": null}
{"id": "e7f54ec7-f04a-4a08-b2f9-8142020ff53e", "solution": "import numpy as np\n\nclass EnhancedFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0) * np.abs(best_firework - fireworks) / np.maximum(1, np.abs(best_firework - fireworks)))\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor[j]\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "EnhancedFastFireworksAlgorithm", "description": "Implementing a dynamic step size adaptation based on individual performance to improve exploration-exploitation balance.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('invalid index to scalar variable.').", "error": "IndexError('invalid index to scalar variable.')", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {}, "mutation_prompt": null}
{"id": "6223d940-6413-4456-a03e-873da3aba0cc", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "80d0e9c8-3fa0-4e10-9058-b07d3aa9833d", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "2c4c2aca-3cdd-4745-b263-39c85ec10467", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "898c05b6-fb6d-4037-9f9f-f0d452f470ae", "solution": "import numpy as np\n\nclass EnhancedFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            fitness_diff = np.abs(func(fireworks) - func(fireworks + sparks))\n            diversity_factor = np.mean(fitness_diff)  # Dynamic mutation scaling based on fitness improvement\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "EnhancedFastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling factor for each dimension based on individual fitness improvements to enhance convergence speed.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"unsupported operand type(s) for -: 'list' and 'list'\").", "error": "TypeError(\"unsupported operand type(s) for -: 'list' and 'list'\")", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {}, "mutation_prompt": null}
{"id": "095ed713-5ffa-48d2-97b9-988916acf10d", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "3892b299-857b-41b8-b79a-bb4fe7791c89", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "1bfa106f-cbf9-4241-b799-b82a3406e6c5", "solution": "import numpy as np\n\nclass DynamicNeighborhoodSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            neighborhood_size = int(np.clip(self.budget / (10 * population_size), 1, self.dim))  # Dynamic neighborhood size\n            for i in range(population_size):\n                neighborhood_indices = np.random.choice(np.arange(self.dim), size=neighborhood_size, replace=False)\n                for j in neighborhood_indices:\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "DynamicNeighborhoodSearch", "description": "Implementing a dynamic neighborhood search strategy to explore diverse regions and improve convergence speed.", "configspace": "", "generation": 76, "fitness": 0.09703153000730137, "feedback": "The algorithm DynamicNeighborhoodSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.13.", "error": "", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.11925789300492706, 0.209374378153381, 0.20008533787949345, 0.06798519964060012, 0.11133125675803912, 0.0719717633189324, 0.1104258799307507, 0.15681028037932987, 0.11480762648721177, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.017103299393756655, 0.07350335234126038, 0.08015259319340562, 0.05722782194541509, 0.0928043920408047, 0.04512335907799969, 0.05782510528689089, 0.03110682561350986, 0.02089427807219013, 0.07097314281986855, 0.051373092529361175, 0.02611390377640377, 0.04226952793152028, 0.040486272740631435, 0.05378938806390998, 0.0, 0.05738174317781253, 0.030571843994540715, 0.10631164885024713, 0.0447196534454799, 0.9602715223957262, 0.4488795999809252, 0.04687545855643349, 0.9659855816260126, 0.09894960686749887, 0.048986754550083944, 0.9674067660180227, 0.09622559398655173, 0.0014786206851192807, 0.03949997540124839, 0.04292622919400435, 0.03783050140653066, 0.038285472258958175, 0.049400452897251146, 0.053884871582675076, 9.999999999998899e-05, 0.10159260796503256, 0.1660433597105282, 0.07089319047634779, 0.1545156211723886, 0.022290424337746972, 0.020853569999229826, 0.05368241941566665, 0.04767426236742345, 0.11762190424724395, 0.0, 0.0, 0.010782269193148397, 0.028580256477242938, 0.00454116063236687, 9.999999999998899e-05, 0.013323133485296235, 9.999999999998899e-05, 0.019786702066106443, 0.02079133479873274, 0.026763402527346658, 0.0031946240479876487, 0.026830934499789905, 9.999999999998899e-05, 0.03220049292270066, 9.999999999998899e-05, 0.03810633486109449, 0.034849179542920106, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.07557949568068434, 0.026272489010544242, 0.09152776936617246, 0.035791391265799555, 0.0, 0.04182181665356288, 0.0476195278297864, 0.029538657303477156, 0.0431528289055354, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.1993514606165646, 0.17605265619105503, 0.2631183567062956, 0.10281961890163571, 0.14274373572082855, 0.11362994038130658, 0.2169811045659158, 0.23598231739869757, 0.2713837209618347, 0.010706283723562082, 0.027290722689537694, 0.04617116842545588, 0.05806349891168827, 0.05381102401840032, 0.07081277004941766, 0.05918465486113078, 0.06527550404366178, 0.06022428357444298, 0.12105609324994726, 0.1279338902521271, 0.121732267538889, 0.22344256860858736, 0.16067671298839192, 0.11699830813980339, 0.09442902202428194, 0.18866228907201954, 0.10799219478017186, 0.1420732646224877, 0.200659503490333, 0.14482219042934663, 0.1771825201756767, 0.17584313597370127, 0.18765994903722005, 0.137679582278059, 0.1795353245454202, 0.12696045390962585, 0.10813166176599576, 0.10482307743309172, 0.08371072823993086, 0.09978719542667092, 0.14599086583855547, 0.08562213885062753, 0.0743339084785215, 0.11006877069542786, 0.05387377419174755, 0.1790370211503428, 0.20631139605649473, 0.21513356728497712, 0.19275122381395415, 0.16468878443242507, 0.19031116101970813, 0.18112980254061128, 0.2173981022902428, 0.2154105222111239, 0.14111896383175104, 0.15811217279649903, 0.17327442171328145, 0.13690191264887475, 0.17113909968365193, 0.15230199464086858, 0.1472569415959868, 0.168323558871454, 0.17012201034169827, 0.15820524174034167, 0.11419462089828725, 0.1666986180686647, 0.15455901706395958, 0.1852455964494507, 0.09422049275512856, 0.12235612906396254, 0.11209934216696982, 0.15872769245898488, 0.1896362066331745, 0.07312015135828753, 0.10514179693558634, 0.09712946114210608, 0.15466074950783149, 0.12822754493109223, 0.10935217513232287, 0.15904133346454385, 0.11345027555884302, 0.18172536057551902, 0.17157770095730063, 0.18407669227915335, 0.1427475587308762, 0.17976001201598957, 0.1525326951679301, 0.18813309119162192, 0.18185123783841262, 0.17733577228693087, 0.0797838442732185, 0.06189054961149776, 0.07612831340116666, 0.021979731883478237, 0.07712894532707304, 0.0681305887948489, 0.05267395962946486, 0.07750238127866504, 0.06398970228575473]}, "mutation_prompt": null}
{"id": "8eb4d745-f1ad-4e31-9c15-af1a167a122a", "solution": "import numpy as np\n\nclass FastFireworksAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            performance = [func(firework) for firework in fireworks]\n            spark_amplitudes = np.mean(np.abs(sparks), axis=1) * np.array(performance) / np.mean(performance)\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= spark_amplitudes[i]\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithmImproved", "description": "Implementing a self-adaptive mechanism to dynamically adjust the sparks' amplitudes based on their individual performance for enhanced exploration-exploitation balance.", "configspace": "", "generation": 77, "fitness": 0.0362928943322081, "feedback": "The algorithm FastFireworksAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.07259725465581812, 0.06494622732898692, 0.0826747312595526, 0.019815918606841065, 0.052880036240358974, 0.02556976335744221, 0.05394216192012102, 0.05308658832657598, 0.06871953467680747, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022128465791566354, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013115879301439648, 9.999999999998899e-05, 0.019368993806760937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020585211243268176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045335031207549226, 0.03383897081584242, 0.04289134809073525, 0.039761662233116835, 0.04734083731434635, 0.030641860730686532, 0.033759383943772314, 0.04929992459545807, 0.025896409107022955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031570509236023003, 9.999999999998899e-05, 9.999999999998899e-05, 0.011295325435420778, 9.999999999998899e-05, 0.10054460991850833, 0.03775594762470191, 0.007708556951195877, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07915075275537542, 0.10723360589593633, 0.15052404113950835, 0.0952074662868817, 0.09445973294238941, 0.09918045899196826, 0.1242541874740124, 0.09729750582537966, 0.1212522250097745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007499891243390122, 9.999999999998899e-05, 0.021557397409913914, 9.999999999998899e-05, 9.999999999998899e-05, 0.02704830836063188, 0.07037543064596374, 0.08161480997625836, 0.06050119033509016, 0.1074139920487529, 0.08330179841652374, 0.06677620990011635, 0.06050147629932656, 0.053827939897792776, 0.08124271171456365, 0.09702174781017203, 0.09733825502039994, 0.1070723598314065, 0.11047841000179504, 0.0864234630950188, 0.08761505634607947, 0.11779905696086734, 0.1034158657890859, 0.07984040142383741, 0.03412182203879732, 0.031211275866614097, 0.03486025444734475, 0.05934458298733458, 0.023514854067714475, 0.04590451218408831, 0.0627198716691304, 0.04003610854195394, 0.016207725173778775, 0.14936915296325948, 0.07770013863104364, 0.14231585937092117, 0.16061255117112472, 0.09727127079437814, 0.14880136998446436, 0.15818617658262102, 0.10115708295150128, 0.14092773456716767, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04515492962727219, 0.056143274529988574, 0.05771760472964249, 0.06848621136204469, 0.12090053513071775, 0.06274595459645949, 0.06387665582727386, 0.05819170419785846, 0.056286708123018614, 0.04070502676077559, 0.04597010795690348, 0.01726172150196803, 0.019206589938010832, 0.021769046504567457, 0.04722605803843838, 0.019187671701639708, 0.016100627889318986, 0.04180742786621816, 0.16873812142914413, 0.17716891559469528, 0.1973852049700725, 0.15729539606835297, 0.1843097807388393, 0.16922455664284042, 0.15322732524621674, 0.16870916006870007, 0.19646935204358296, 0.012015922311002902, 0.034281229555117365, 0.04834357634738318, 0.013847367998460869, 0.017449325769426483, 0.021414056146266902, 0.012740529229216757, 0.010038836083810954, 0.02141853450965414]}, "mutation_prompt": null}
{"id": "e3543ec2-6f98-4935-bc59-df8a54225399", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "f06a44ca-7a41-4381-a2cd-afad11653584", "solution": "import numpy as np\n\nclass EnhancedFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j]) * np.abs(np.sum(best_firework) - np.sum(fireworks[i]))  # Introducing distance factor\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "EnhancedFastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on both population diversity and distance from the best firework to improve convergence speed.", "configspace": "", "generation": 79, "fitness": 0.061133773053392106, "feedback": "The algorithm EnhancedFastFireworksAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.16.", "error": "", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.08619076530949588, 0.11927796928765, 0.0822881188591662, 0.040476623618704966, 0.05257887047805776, 0.03332129212639123, 0.0636790980896853, 0.07274302776413788, 0.06701824832800662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.014572254733962064, 0.00010728253384373332, 0.0, 0.0011187632349989318, 0.0, 0.03393177370878697, 0.010957773898161216, 0.004659498588054367, 0.0, 0.0, 0.0, 0.019501673109847073, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07230722133614531, 0.9961786191306949, 0.9949267098250377, 0.9969437101869786, 0.08114510033425282, 0.20999067462502208, 0.9944348211898537, 0.9958211337461149, 0.9971927758755649, 0.0, 0.0, 0.0, 0.0, 0.00021551809509001707, 0.0, 0.0, 0.01119445381188322, 0.0, 0.1001868586914183, 0.03765971698870674, 0.006388112346703556, 0.004462664352365198, 0.0, 0.0, 0.026181922062049168, 0.0, 0.009809447265860194, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.13914188982992381, 0.10693789276682164, 0.14829537673711224, 0.09416865854239498, 0.08041876921715996, 0.09571399605654951, 0.13855463494460762, 0.09707379230406277, 0.12096781838999726, 0.00809646124074459, 0.0, 0.0, 0.006002370323321293, 0.0, 0.01750168379108641, 0.0, 0.0, 0.02666833626569931, 0.07028246122685633, 0.06726366127807482, 0.07557212736076524, 0.09846289938816166, 0.07743290722014351, 0.058816065102114456, 0.05488481188470995, 0.04846289571906326, 0.07717165476235766, 0.09597227240618145, 0.09616018134012394, 0.10350813781504986, 0.10838250165484586, 0.0957262576560366, 0.09846106145523936, 0.11989880476782766, 0.10004631021926003, 0.09844577086772277, 0.039077286721426185, 0.03075358899712477, 0.034551307077603455, 0.04455513106718245, 0.04160901430853359, 0.050249420071530215, 0.05639263182623655, 0.038433917477429524, 0.03047286160384466, 0.09719333606686209, 0.10783523937389439, 0.11080991306893939, 0.10280083939129603, 0.08290296819466947, 0.0816703972194458, 0.12237199858757519, 0.07381508202845288, 0.12610897469223914, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0507823117385533, 0.05604888032687072, 0.05616689752555071, 0.06709542404813507, 0.12070353966556191, 0.06165711078819791, 0.060792270882972455, 0.05652137775177013, 0.08098631475344575, 0.038145025866380244, 0.03957798628310871, 0.01630315145370509, 0.030528540782466584, 0.02150250198996473, 0.0454156150021221, 0.01886693703538289, 0.01623279134528388, 0.04133833534605069, 0.10087028022501054, 0.12008703439342805, 0.1475449842687161, 0.10726544462840137, 0.11393539758803017, 0.12456358843521431, 0.10047330010600886, 0.10853850474266835, 0.14680476350940774, 0.003260030740454334, 0.012105424203345372, 0.03129662407793532, 0.018701383393392668, 0.0057755656362813435, 0.011071538083104349, 0.020456479446794407, 0.005377819927406047, 0.014542939700578739]}, "mutation_prompt": null}
{"id": "0dc24739-bafe-4e5b-bdc1-1438ae5555bb", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "831b0384-f2ef-493c-8427-d74b830fcc0b", "solution": "import numpy as np\n\nclass EnhancedFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            individual_factors = np.abs(sparks)  # Dynamic mutation scaling based on individual firework's performance\n            fireworks += sparks * individual_factors\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "EnhancedFastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on individual firework's performance to enhance convergence speed.", "configspace": "", "generation": 81, "fitness": 0.03922243952830858, "feedback": "The algorithm EnhancedFastFireworksAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.07397583119942752, 0.06605118136867472, 0.08305288473671679, 0.019993297282279165, 0.053159878325009235, 0.02576690875575771, 0.05438922315338568, 0.05415281730890942, 0.07001290819569062, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024975898278913666, 9.999999999998899e-05, 9.999999999998899e-05, 0.004369192623829066, 0.0006453707077618276, 0.022665894656089924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0237323510522347, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04626334041228164, 0.03439306119191532, 0.04318583168287182, 0.04122133780359816, 0.047728741857080204, 0.030860662529624494, 0.035323208055545674, 0.049860926974275244, 0.026020648420781445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007802115071322557, 9.999999999998899e-05, 9.999999999998899e-05, 0.011360193028121857, 9.999999999998899e-05, 0.1007843301236262, 0.04517227715531957, 0.00890792757040948, 0.00626091978804999, 9.999999999998899e-05, 9.999999999998899e-05, 0.03102974816514925, 9.999999999998899e-05, 0.030874223351224472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022907001911369296, 0.023330740452713106, 0.04956789274256679, 0.04196952389475406, 9.999999999998899e-05, 0.00044582062792852817, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08032752880699068, 0.10829309220975103, 0.15068626597414236, 0.0947464062691522, 0.08384506886496679, 0.09620927004955249, 0.1245535933801537, 0.09747907228902442, 0.12150395767770883, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011800178823985097, 0.00013221933399509833, 0.03226830491574095, 9.999999999998899e-05, 9.999999999998899e-05, 0.03856645851107332, 0.08445443632277527, 0.09439024333601143, 0.06442451111713055, 0.11352767015900167, 0.09064073434931308, 0.08252352570782773, 0.06560928151592038, 0.0645179814291863, 0.08642324382935362, 0.10753126520173917, 0.10772443674345178, 0.10359778603806002, 0.11678257068291864, 0.09354293567183469, 0.10253164343465238, 0.1250811030608684, 0.10479219721465616, 0.08179774912637472, 0.04634876516023756, 0.05623376914750078, 0.03532217579714125, 0.07765237310211537, 0.03689594530530771, 0.050463954579155645, 0.06600537838886034, 0.042149762667300084, 0.020402580388741987, 0.1655584173779323, 0.07787899268102827, 0.15627635978269305, 0.16181770898523196, 0.1003503789075667, 0.13358575257365046, 0.174731610989726, 0.1041742467767719, 0.1392549226925337, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04627577700824437, 0.056143274529988574, 0.05911522374524503, 0.07286328697777866, 0.12194623618719147, 0.06504830222894575, 0.06710398700109743, 0.06068222734475526, 0.057195735339287235, 0.04248264766698717, 0.047329429580503346, 0.018141217011767186, 0.020432191093843866, 0.023088757292746398, 0.048915067672718915, 0.01949623263791067, 0.016797546447680167, 0.04848499471906509, 0.18250263187125504, 0.1897458221890822, 0.17818532194836334, 0.18837374253867345, 0.17218913591913365, 0.16826654081907477, 0.17167461901995107, 0.16472623584161716, 0.18879568448984652, 0.027649126199202123, 0.03672877471947633, 0.05586382397312861, 0.02088233417714147, 0.03488128004854896, 0.03521483638212264, 0.02622766187508918, 0.019550253232819892, 0.028946944142544617]}, "mutation_prompt": null}
{"id": "b54fc728-c283-40f6-804b-73d6220e3c37", "solution": "import numpy as np\n\nclass FastFireworksAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.inertia_weight = 0.5\n\n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0) * self.inertia_weight)  \n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n            self.inertia_weight *= 0.95  # Update inertia weight for self-adaptation\n        return best_firework", "name": "FastFireworksAlgorithmImproved", "description": "Implementing a self-adaptive inertia weight mechanism to balance exploration and exploitation and further improve convergence speed.", "configspace": "", "generation": 82, "fitness": 0.037638894947556976, "feedback": "The algorithm FastFireworksAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.07780635802953306, 0.06771179872820632, 0.08237988959495246, 0.03547840253462442, 0.05267361210777377, 0.026022611185376077, 0.05140423906395497, 0.05457852123213647, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 0.00371370128770232, 0.0016228650430508695, 9.999999999998899e-05, 0.018248263482334326, 0.002332392004792516, 9.999999999998899e-05, 0.0004450818528646261, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045179741609489454, 0.033667547960281485, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006487473152022916, 0.0046046495205323, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0694972951453261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08728568783656432, 0.1070271971752389, 0.14838054695461433, 0.09425923977458062, 0.08051072568095674, 0.09580441870675127, 0.1240568991094797, 0.10695465018657158, 0.12399113234642645, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 0.0009287572581845316, 0.0267656688986897, 0.07037543064596374, 0.06735693451091307, 0.08115768910098364, 0.09855305120349966, 0.08965087563562868, 0.10832505779603474, 0.0783556226055192, 0.0760590665076526, 0.09248162494306178, 0.1106109561238704, 0.10890871845595762, 0.10637894818719451, 0.12438856045924152, 0.12069664595183671, 0.10864205167332508, 0.11420206329748472, 0.1001363042967901, 0.08953042621279106, 0.04557668993755015, 0.054918286170923425, 0.03968499194070951, 0.05785661165534106, 0.0476736368395686, 0.05953237091368557, 0.06598195610714896, 0.038530072755655564, 0.028521528824571596, 0.11961110788302909, 0.08143083911696647, 0.13295151844179687, 0.1268700786542013, 0.10434729904057183, 0.11303819544266158, 0.14175889688799048, 0.09718511677087716, 0.14151164163541996, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10250005932144812, 0.056143274529988574, 0.08238222783970417, 0.1093264807406451, 0.1207914665021157, 0.061750941843425444, 0.06964592706264106, 0.07068121000973371, 0.056931298810479536, 0.039525883417591334, 0.06631370709380413, 0.01671464904933251, 0.02729956177788395, 0.04571271321049786, 0.045511073114331335, 0.021231020678990298, 0.016933829185406313, 0.04143420019681854, 0.15942760619708174, 0.17185702763323607, 0.15058788413008328, 0.14311770563573045, 0.17222345091789826, 0.15283557751954702, 0.1387131501396054, 0.17174806777762186, 0.157733740637524, 0.019826094590115084, 0.019355668608631693, 0.031393493129599714, 0.022840234507912838, 0.026776672789090683, 0.013352242465934583, 0.030100652967729236, 0.01129904229238965, 0.02522323185995179]}, "mutation_prompt": null}
{"id": "a114901b-aa07-49a7-8352-2c24f03ec2bb", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "d8e640c7-2043-462e-bae1-78a018bb0fb6", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "c7f90e7e-80d1-48e0-8443-1e4a724ab1b4", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridFireworksPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])\n        pso_global_best = best_firework\n        \n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n            \n            pso_local_best = best_firework\n            pso_population = fireworks.copy()\n            \n            def pso_objective(x):\n                return func(x)\n            \n            pso_result = minimize(pso_objective, pso_local_best, method='nelder-mead', options={'xatol': 1e-8, 'disp': False})\n            pso_global_best = pso_result.x if pso_result.fun < func(pso_global_best) else pso_global_best\n\n        return pso_global_best", "name": "HybridFireworksPSO", "description": "Implement a hybrid algorithm combining FastFireworksAlgorithm with Particle Swarm Optimization (PSO) for enhanced convergence speed.", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 13, 9, '        pso_global_best = best_firework\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 13, 9, '        pso_global_best = best_firework\\n'))", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {}, "mutation_prompt": null}
{"id": "e95c503b-94d8-4d84-9de0-48325ad992fd", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "f39c10c8-d2bf-4749-95d1-1eaf846320bb", "solution": "import numpy as np\n\nclass FastFireworksAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0)\n                                       * np.random.uniform(0.9, 1.1, size=self.dim))  # Introducing chaotic perturbation for mutation scaling\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithmImproved", "description": "Employing a novel chaotic perturbation mechanism to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 87, "fitness": 0.09400147603586542, "feedback": "The algorithm FastFireworksAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.12.", "error": "", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.11844378342868223, 0.10423193605536052, 0.14510068089530304, 0.08931866728823568, 0.06263998705933116, 0.061126806672884615, 0.0820288465976804, 0.23603803613363405, 0.10681173728040627, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.06813032900045202, 0.10989147694827262, 0.02573585673340295, 0.05051132857628271, 0.026214666383246765, 0.03668183159626204, 0.04585664846132209, 0.049943070160721414, 0.06382414638265987, 0.05188315219673967, 0.020959602197411886, 0.024933525726107075, 0.06376953190910462, 0.0072873082420820134, 0.00024230477615871937, 0.07612806220005297, 0.016907198857557204, 9.999999999998899e-05, 0.9243717461745817, 0.13645664827179083, 0.04616679650211408, 0.9677794845913914, 0.129565814832998, 0.04355972221638915, 0.9669553850896397, 0.06308821280131038, 0.034777614337281215, 0.06938571248819791, 0.03332724605183235, 0.06572424466788074, 0.03652519412343014, 0.11133327002615223, 0.03769159038474923, 0.0, 0.016466831666118176, 9.999999999998899e-05, 0.1855196695433623, 0.08388733939898574, 0.08161968241577966, 0.15363007309365717, 0.05440884794283807, 0.09225569670490297, 0.08813672359991032, 0.10942406276850236, 0.0899508172214144, 9.999999999998899e-05, 0.0, 0.00706384665128057, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0019873291527278125, 0.08222987626824885, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.06864421045143465, 0.0, 9.999999999998899e-05, 0.056216505212650536, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 0.02823502990349047, 0.10472072691993473, 0.0, 0.04836842372719907, 0.0902609456241682, 0.07062508554665325, 0.04779683680042113, 0.024158891739435973, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.023024202018897766, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.13127028030949528, 0.18445653394226125, 0.20621831422585535, 0.189661705655221, 0.14103469992582163, 0.13878918351912417, 0.14162403910763555, 0.27946190937840976, 0.17631292233598883, 0.03480695335393624, 0.04610702731888794, 0.015401058109001275, 0.0423882848005418, 0.053802637265301434, 0.06119149786346756, 0.020516249863719693, 0.06417797012867299, 0.06410813859969078, 0.07597639956030544, 0.14098931973176554, 0.17592875306284061, 0.10578248664517109, 0.1394457117189417, 0.13427739871783484, 0.1185376494230953, 0.12546788310908563, 0.11632096696405458, 0.17354315837798218, 0.19251109973657143, 0.13347092414937012, 0.18681653231747908, 0.1860419247200693, 0.17109758091124183, 0.12875422130286118, 0.16758170680297657, 0.10979274166378328, 0.1233484575708611, 0.12256876336620026, 0.10232427696773017, 0.10138470443294278, 0.1098579601687627, 0.08878233770542188, 0.09487967241366946, 0.10115376315507552, 0.061470995927327965, 0.1551551288152654, 0.18936212070422986, 0.20311295324004508, 0.14387955325888446, 0.1878178916183686, 0.2204363541727019, 0.13798040329172012, 0.17266835975679784, 0.2049598419199098, 0.14011528726953826, 0.16138223381419703, 0.1709843135261453, 0.13627282022152798, 0.16844818836402042, 0.17742349827632187, 0.16083052190563685, 0.049792802532415914, 0.16908511945163596, 0.1275945060474143, 0.1575610632739124, 0.13969668808430014, 0.09907181374642293, 0.15666331572676695, 0.10341826827089518, 0.2861166401257951, 0.10450399355984086, 0.1301097086969878, 0.30282604505600086, 0.17914475577903521, 0.14097556532176791, 0.089275742052358, 0.10879243515042802, 0.2861761835271436, 0.16651073833300978, 0.09500747188825409, 0.061827363549845527, 0.1786290966649875, 0.1737898422048938, 0.17142440895334854, 0.18185948113315142, 0.18618604080469192, 0.17970685293686217, 0.15331599739875224, 0.18708876499349247, 0.1804624788656003, 0.04423472662793626, 0.0666326559525714, 0.06440567155168087, 0.04008032953707019, 0.04982771889422688, 0.07419654159205025, 0.0582808829514222, 0.0588035033877613, 0.06749648394932795]}, "mutation_prompt": null}
{"id": "e32fc2a4-20c7-4970-b5f2-d8cf9085c07c", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "056ca2d9-4838-49df-bd15-471ba8f6f92b", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "59fa6c3e-7b95-4e09-b80b-3c024eb33c8f", "solution": "import numpy as np\n\nclass FastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "FastFireworksAlgorithm", "description": "Introducing a dynamic mutation scaling based on population diversity to accelerate convergence.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.14224256476043662, 0.15446857801274905, 0.14230726207755873, 0.11439576780828775, 0.09612188020855505, 0.056509627614617086, 0.10405090403127815, 0.09161723971284941, 0.12351728955357177, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.04408289564681911, 0.09107095800009934, 0.05055573531411339, 0.04300011145953997, 0.04497699387034848, 0.06418641373968004, 0.03255947691125982, 0.07134345582572454, 0.06383059968182292, 0.03816082586949254, 0.0, 0.04602177702145782, 0.07284759856912881, 0.0, 9.999999999998899e-05, 0.03677660018252904, 0.029267090413993335, 9.999999999998899e-05, 0.9666645081213788, 0.5722013402082209, 0.058118511788646576, 0.9641189125645996, 0.9471467384780712, 0.09737301539514498, 0.9656686489545669, 0.9427414865161835, 0.03840174698089882, 0.05187693124114234, 0.020854505795941836, 0.05796523644993634, 0.015302794053829727, 0.08728575004672623, 0.0023941839808457877, 0.09729397531213779, 0.02074394246586675, 0.03311322664803007, 0.1245952805292656, 0.12924469667022076, 0.052996577086822594, 0.15471169443222044, 0.019732594774904633, 0.10359727696817567, 0.08619301321103179, 0.061488933800221246, 0.0574251282388728, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.044734868778779524, 0.01851076056786438, 9.999999999998899e-05, 0.007529509940589207, 0.029946239319350698, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012657531951156487, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 0.051777767669969, 9.999999999998899e-05, 0.0621640999773172, 0.0, 0.0, 0.0, 0.055456296733349175, 0.0697617992350934, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.1864161368176448, 0.14069184195316498, 0.22861524715550818, 0.12062887913006048, 0.22096292311610688, 0.12810083579248543, 0.20144591596092942, 0.20150380269556845, 0.241604582397553, 0.019596350091143355, 0.025547042114141383, 9.999999999998899e-05, 0.025160173461482138, 0.0666476518277912, 0.06914723399494849, 0.029418078951606863, 0.04986568304954342, 0.05392206723174009, 0.07028246122685655, 0.09435993564901379, 0.12671346951261697, 0.15573704363869167, 0.14229044743308694, 0.12479853440023814, 0.0971019889216359, 0.1154845376707252, 0.13631818982150612, 0.15903411275263257, 0.13911745107092954, 0.12347252620440619, 0.14822773545989798, 0.1644762411612355, 0.1796736386558665, 0.15492420601901125, 0.1587719559344558, 0.13285668790895233, 0.14273467132882656, 0.07957517290863214, 0.05774318249610899, 0.19262570493948028, 0.09178976888981794, 0.06510733370060862, 0.10675552790912757, 0.11705839316183231, 0.14340977126856613, 0.18066208266975248, 0.12606533182264446, 0.1800225943059921, 0.14576852249892835, 0.17847644251182626, 0.19782303043098048, 0.1536003524837004, 0.1370494516646089, 0.17077321649590993, 0.1424969865309209, 0.1432941356529267, 0.15746987274291335, 0.14670966754529002, 0.16451894120372967, 0.13343340012874505, 0.16123462216309048, 0.1510226042311531, 0.13112163079063632, 0.07962236602531847, 0.10449700778817173, 0.14156450040971302, 0.1513646312575858, 0.13630886102318074, 0.11927866859006431, 0.11188117790722008, 0.12128029319503497, 0.14847861405849438, 0.06574902043989972, 0.10618750398947885, 0.20873318522471962, 0.07283177772316685, 0.13565428122050271, 0.0964911192714244, 0.17497431353189163, 0.16480155853074197, 0.10514571578320031, 0.16753135083391424, 0.1955604908273868, 0.17298258390154808, 0.1909423621008728, 0.1708536010999323, 0.16232862719796337, 0.162945317682761, 0.1826797541942129, 0.19924320739429568, 0.06621695928317117, 0.03749020584114082, 0.05425861837805768, 0.06380185161673813, 0.07218563048229354, 0.11230146904246252, 0.029547389133399382, 0.06326295668618476, 0.04091884998969031]}, "mutation_prompt": null}
{"id": "858d978b-c35a-4fcd-a8b9-916ef9a780be", "solution": "import numpy as np\n\nclass EnhancedFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.normal(0, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "EnhancedFastFireworksAlgorithm", "description": "Utilize a dynamic Gaussian mutation strategy based on the distance from the best firework to enhance exploration and convergence speed.", "configspace": "", "generation": 91, "fitness": 0.09802268752499586, "feedback": "The algorithm EnhancedFastFireworksAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.19.", "error": "", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.10559748211748499, 0.15070337158598868, 0.1451646126549302, 0.0567963080813888, 0.06453130590430178, 0.06116152983102108, 0.18930940226849835, 0.11293033573394184, 0.1272529044723162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.024020634643621475, 0.014572254733962064, 0.02504853122740769, 0.009914809656213941, 0.010462196416255898, 0.028917697499712403, 0.018150078853237717, 0.0040300163775033315, 0.022273985344643754, 0.015665957283517162, 0.0, 0.055013857839474434, 0.019501673109847295, 0.0, 0.04449676203490616, 0.0, 0.013909165048154093, 0.0, 0.9824459149928657, 0.991302217340244, 0.9667083435868027, 0.9857215170265217, 0.9826512548064095, 0.9757729018129524, 0.9865210491690655, 0.9818871895017022, 0.9780476691161137, 0.047376790249653244, 0.04036489861449388, 0.06010290172279387, 0.0224182559687508, 0.011647930433493103, 0.07714615594831953, 0.03779008914451476, 0.027475017196874063, 9.999999999998899e-05, 0.11943700774347565, 0.06095818549186949, 0.0801078897689751, 0.09206670528682226, 0.03226819768012479, 0.07038192892168316, 0.04091900784946678, 0.023477917864046294, 0.10075103385899498, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.020252402521433344, 0.0, 0.0, 0.0018593787267767725, 0.0, 0.0, 0.036260719913853046, 0.008073605330348066, 0.0, 0.006827166618227465, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.999999999998899e-05, 0.010176239016684518, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.014136870421011194, 0.010219934938677233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010789887641245, 0.0, 0.0, 0.0, 0.14585117601451913, 0.13420627290108111, 0.19221466146392485, 0.0967455472241947, 0.15774200681017614, 0.2017057610487314, 0.13246448153600865, 0.16931415290706298, 0.24898406070723866, 0.0126703467759256, 0.0, 0.017199323351485107, 0.040460638885140954, 0.016978876470559956, 0.08955285274782365, 0.025143733656646905, 0.027495039273294775, 0.07249261819894182, 0.07384175815789362, 0.09933881014688051, 0.128628998733209, 0.09846289938816166, 0.07443336118445221, 0.09586062361250447, 0.11847368710625683, 0.07609297741121679, 0.1552974787348569, 0.12198563371212368, 0.11817278823954169, 0.1514116388363791, 0.12319468751345086, 0.11922035703702805, 0.1846369746635821, 0.11411347464502575, 0.11464684877489106, 0.11995446865568626, 0.04451532112982581, 0.19609556283105, 0.061699310781558214, 0.08479120120304573, 0.06557992453595185, 0.11424984387988502, 0.06016942204400222, 0.11873031235828202, 0.07640521502805708, 0.1283114313638194, 0.11376043812812897, 0.20255559417018343, 0.15763433316465103, 0.08252647859124096, 0.18272717267490968, 0.14100464074242025, 0.12113955526850262, 0.1769872498310786, 0.1449872905244416, 0.0, 0.17649572118628165, 0.0, 0.0, 0.17175792121123779, 0.13723463849407957, 0.0, 0.0, 0.07098234298920503, 0.06951409035177691, 0.09869157807190987, 0.10337323093639372, 0.12070353966556191, 0.1129632117132725, 0.09862760165152118, 0.10120154797398317, 0.1122533263757226, 0.03844352091514169, 0.0612597995416454, 0.16163480303643085, 0.045613914748172446, 0.05933203833008993, 0.16195942440111444, 0.0751352632239457, 0.01994611175834693, 0.0657667596673358, 0.15095280122817, 0.2009746185017519, 0.1548559011542262, 0.13977181318080822, 0.12779574499837565, 0.18348272727597414, 0.12407944493117917, 0.12562339546108048, 0.16616050506839708, 0.03285172557479055, 0.030317903372807264, 0.032460860699006444, 0.026196366360347167, 0.0660444992238699, 0.04425444749494001, 0.028631804699830954, 0.038555516564292014, 0.08017167964554484]}, "mutation_prompt": null}
{"id": "2effe357-536f-4695-947a-f4ade60400d6", "solution": "import numpy as np\n\nclass EnhancedFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            fitness_scores = [func(firework) for firework in fireworks]\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0))  # Dynamic mutation scaling based on population diversity\n            selected_sparks = sparks[np.argsort(fitness_scores)[:population_size // 2]]  # Select sparks based on fitness\n            for i in range(population_size):\n                for j in range(self.dim):\n                    selected_sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += selected_sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "EnhancedFireworksAlgorithm", "description": "Introducing a dynamic selection of sparks based on their fitness to enhance diversity and convergence speed.", "configspace": "", "generation": 92, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 5 is out of bounds for axis 0 with size 5').", "error": "IndexError('index 5 is out of bounds for axis 0 with size 5')", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {}, "mutation_prompt": null}
{"id": "5be93aed-a52a-41c5-afa1-c3ddcdb63d16", "solution": "import numpy as np\n\nclass EnhancedFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0) * np.abs(best_firework - fireworks), axis=1)  # Adaptive selection of sparks based on individual firework performance\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor[i]\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        return best_firework", "name": "EnhancedFastFireworksAlgorithm", "description": "Introducing adaptive selection of sparks based on individual firework performance to enhance diversity and convergence speed.", "configspace": "", "generation": 93, "fitness": 0.08226577253954909, "feedback": "The algorithm EnhancedFastFireworksAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.18.", "error": "", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.09687093335219799, 0.06485804758475411, 0.10187966459409215, 0.0917653596092678, 0.05520470927430032, 0.0381245838860208, 0.07332987002644209, 0.06616783975994445, 0.07338242772771775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.014572254733962842, 0.012568470252767083, 0.028484935011523937, 0.003594867890829523, 0.021522022644616112, 0.018150078853237606, 0.0, 0.015261022801775881, 0.04050819547153239, 0.0, 0.0, 0.019501673109846185, 0.0, 0.0, 0.006354319495916916, 0.0, 0.00014061435619150409, 0.9704751491656481, 0.9673117911462511, 0.954356718305613, 0.9639962047377982, 0.06508834455476042, 0.9489176097339629, 0.9669414550718658, 0.9648016644172662, 0.9432776215210693, 0.0, 0.0, 0.0, 0.0, 0.00021551809509057218, 0.00801543235183233, 0.0, 0.011194453811883665, 0.033373400115900065, 0.10018685869141841, 0.05800399096058262, 0.07109423805696424, 0.01366306682964602, 0.014739781334891955, 0.009954810471494047, 0.05288384110666744, 0.05915864531633197, 0.14580289283692982, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009313491241145111, 0.0, 0.0, 0.0019168358230448046, 0.005056693979356708, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08981552671458015, 0.1069378927668222, 0.14829537673711346, 0.13861811011417047, 0.12628101561290117, 0.13064208795785215, 0.12396929853484018, 0.13134835666775302, 0.14386481262912054, 0.0, 0.0, 0.0, 0.006002370323321182, 0.00195885711522481, 0.0288360630632285, 0.0006152802970628146, 0.009643467672113326, 0.038865167459923744, 0.07312744321495046, 0.11636593315497612, 0.1168679874982207, 0.10391024752884204, 0.10532575247955389, 0.10791491860571445, 0.11023038927993734, 0.10594402915224022, 0.10336073498647025, 0.14723744204153377, 0.10499592190137486, 0.12091785710372205, 0.14580057716802874, 0.11656269002214481, 0.11964756738459514, 0.1295867340287763, 0.10329013430046596, 0.10295267241565942, 0.07582936221720671, 0.062270970264710956, 0.049650253809567446, 0.07407044230559745, 0.0492175887633417, 0.04692191803231127, 0.08596573947931518, 0.0645458790919845, 0.062218664644668964, 0.1442563223342913, 0.08988127342894803, 0.1379443301007175, 0.12532671294581343, 0.09795965441786592, 0.15265442451207478, 0.12334255881285028, 0.10478679731229246, 0.12872758598989187, 0.0, 0.0, 0.1314702215914294, 0.0, 0.16040951343582033, 0.10112232748099448, 0.0, 0.0, 0.0, 0.08253209395684424, 0.0665445669416107, 0.09942508272568251, 0.08204276658368437, 0.12070353966556235, 0.08019372967925487, 0.10316454696779909, 0.06872074168419262, 0.13384226061955562, 0.05873697425663105, 0.039577986283108824, 0.09274056463400993, 0.08864115603265177, 0.048372035191205254, 0.12123306718630211, 0.0633962263225103, 0.052521598340502185, 0.09849028206325383, 0.1849103325716852, 0.14717259902764668, 0.15953711772823298, 0.15862688653073642, 0.17129921640614143, 0.17271175395810967, 0.17240246058001307, 0.1705955638425226, 0.1641590347255888, 0.016403208470057717, 0.013635160352865716, 0.03129662407793343, 0.04342879586887871, 0.025867595223789563, 0.03663878318548919, 0.041069009312846405, 0.01212801520956186, 0.036357835316861764]}, "mutation_prompt": null}
{"id": "3f979073-17fc-4b4e-bb0e-892356172d87", "solution": "import numpy as np\n\nclass AdaptiveFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0)\n                                       * np.linspace(1.0, 0.1, num=self.budget // population_size - 1)[:, np.newaxis])\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            fireworks += sparks\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n            if np.random.rand() < 0.1:  # Adjust population size dynamically\n                population_size = min(20, int(population_size * 1.2))\n                fireworks = np.concatenate((fireworks, np.random.uniform(-5.0, 5.0, size=(population_size - fireworks.shape[0], self.dim))))\n        return best_firework", "name": "AdaptiveFastFireworksAlgorithm", "description": "Implement a dynamic mechanism to adjust the population size based on the optimization progress to enhance convergence speed.", "configspace": "", "generation": 94, "fitness": 0.10126152814130977, "feedback": "The algorithm AdaptiveFastFireworksAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.10.", "error": "", "parent_id": "7e6695eb-d7f0-4df5-b4c3-f19aebe262f3", "metadata": {"aucs": [0.2421215512053363, 0.2628319120603856, 0.18523921259993792, 0.09682587561594025, 0.14692696329044086, 0.12641597485160727, 0.16362162420741566, 0.11177961689975402, 0.20453661783609434, 9.999999999998899e-05, 0.0, 0.001517133894607059, 9.999999999998899e-05, 0.006168844050328026, 9.999999999998899e-05, 0.0, 0.0031882133195082485, 9.999999999998899e-05, 0.05288711716765815, 0.07097663625387662, 0.08270964498138933, 0.04683220516418929, 0.08880176985726251, 0.09067921378060184, 0.0723843374718055, 0.05714334955235589, 0.06855962181395103, 0.041465666859760275, 0.06132274591139342, 0.044305438327703284, 0.06173421663473855, 0.026047644509658685, 0.04514841319131979, 0.03599294702676947, 0.02570795980075613, 0.0482965182888484, 0.05952233414328911, 0.8294580372477848, 0.11883834254194481, 0.5832019348210253, 0.751169184836025, 0.0585674113597171, 0.11277027786436267, 0.08623128848173622, 0.0705993130684135, 0.06743524168180826, 0.04063546355923553, 0.00579033184038058, 0.033293154490541044, 0.07603648114029515, 0.06736687731183555, 0.06273057754525979, 0.04637201310785399, 0.05934607839834716, 0.14521041229660403, 0.12536999859463227, 0.10978542248392065, 0.07491648248867389, 0.18245590198152495, 0.0947945874438667, 0.05294765913306965, 0.1884165987191816, 0.13825871726708427, 0.035464243881794255, 0.08711536177968904, 0.007362745129383064, 0.00032980378653391096, 9.999999999998899e-05, 0.008272827013482864, 0.02251238275464662, 0.03644366997706294, 0.0434493482279118, 0.010654367506400586, 0.08406957681180505, 0.023847337380247025, 9.999999999998899e-05, 0.09161859343530121, 0.028837456031538977, 0.046568412845292007, 0.059594331137826306, 0.017940460067086716, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06491508986333028, 0.06049023434072698, 0.14016137077719737, 0.025053708277174125, 0.13630120616567365, 0.007929486490087068, 0.053679819586796684, 0.0, 0.06352389928216218, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0022912093754332563, 9.999999999998899e-05, 9.999999999998899e-05, 0.000618101150328787, 9.999999999998899e-05, 0.17874172877161587, 0.2658260312449834, 0.2212531639912193, 0.18899326011712925, 0.17939644954095946, 0.1858885698056606, 0.15014444258827386, 0.19141521274492657, 0.24512400969148274, 0.033268835942017905, 0.08184309120952915, 0.07469996185415217, 0.04015607149302303, 0.058960128962120106, 0.06297014978260707, 0.06327760873865695, 0.06273445420171808, 0.05435722730241632, 0.14191269500378334, 0.13881956617893554, 0.1298366792194776, 0.14837388848468802, 0.16911828061200318, 0.14141447512344096, 0.11360298296536331, 0.14349863799837403, 0.14444916892797177, 0.15067654965664423, 0.19472803781667936, 0.14102563056706363, 0.15676415837236657, 0.18409193768844867, 0.19969623603631959, 0.1420456379133579, 0.16219654938400085, 0.1867866002646229, 0.09318946014065566, 0.10175697193752564, 0.10387817834560409, 0.11278331567648292, 0.13975466951715976, 0.10262233596385228, 0.09586536672663515, 0.12142933628175756, 0.14213941799724272, 0.18650823536019356, 0.19171893431992926, 0.20087261841731008, 0.17029790669027667, 0.18305458568783806, 0.193667422317362, 0.1651467390075766, 0.1826619131936459, 0.17399748008206983, 0.08024876480075505, 0.16639176555106094, 0.15893316955429582, 0.13771080352204912, 0.1547149498791225, 0.10566719395949786, 0.14577193352669582, 0.14731819322989081, 0.14922058412492845, 0.14389587298774675, 0.13089625317764586, 0.13896995599934037, 0.14391878824770465, 0.15193195903439027, 0.1978821590518387, 0.13858418349786406, 0.1538310207371807, 0.1332286219966241, 0.14658421856122372, 0.17351404435911533, 0.13862308331851092, 0.13990693991435177, 0.13367911016024647, 0.17430489230043478, 0.100465443980441, 0.1423240273989893, 0.12482990088545542, 0.1817833127616959, 0.1822157244182918, 0.1726359640324746, 0.17224618665080849, 0.17686904313558283, 0.1823283918198345, 0.18372680018927945, 0.18922835679885652, 0.18454797106058873, 0.0690463005886569, 0.06783100749805493, 0.07032014915399054, 0.05828630999499751, 0.06538454540337102, 0.06298214161674387, 0.07420675666274712, 0.08932087539220668, 0.07121525637945958]}, "mutation_prompt": null}
{"id": "5f014ff5-f692-4f1a-91e0-722169989696", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0)\n                                       * np.linspace(1.0, 0.1, num=self.budget // population_size - 1)[:, np.newaxis])\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            # Introduce mutation\n            mutation = np.random.uniform(-0.5, 0.5, size=(population_size, self.dim))\n            fireworks += sparks + mutation\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n            if np.random.rand() < 0.1:\n                population_size = min(20, int(population_size * 1.2))\n                fireworks = np.concatenate((fireworks, np.random.uniform(-5.0, 5.0, size=(population_size - fireworks.shape[0], self.dim))))\n        return best_firework", "name": "EnhancedAdaptiveFastFireworksAlgorithm", "description": "Introduce a mutation step to explore the search space more extensively and potentially escape local optima.", "configspace": "", "generation": 95, "fitness": 0.1221648402713968, "feedback": "The algorithm EnhancedAdaptiveFastFireworksAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.16.", "error": "", "parent_id": "3f979073-17fc-4b4e-bb0e-892356172d87", "metadata": {"aucs": [0.19285757146334304, 0.1645675639227968, 0.18490168654500694, 0.13598403194507136, 0.2352210566115326, 0.2012556774418034, 0.1510067733180065, 0.22197826093859796, 0.17616123094831926, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.029737809112806435, 0.052581276782856734, 0.05785124452163404, 0.05831012345273934, 0.05478668015830879, 0.07287941352899618, 0.07864241229692781, 0.04184280371018756, 0.06165355607638634, 0.008714888461953896, 0.042724154013373705, 0.04931039483245658, 0.028742461592760282, 0.05772188699511149, 0.034822347431758494, 0.003867483740613853, 0.04859377835815937, 0.03566472425504019, 0.8517138739952149, 0.7666161420880182, 0.7336693784425247, 0.8485228076302016, 0.8406337719784637, 0.7297932943724794, 0.8227040771617209, 0.8530375971681047, 0.7028749437408315, 0.12143667286433191, 0.09092342627270389, 0.11007806517152408, 0.12133558867836947, 0.08832153938132958, 0.07140834973076948, 0.11469396164831636, 0.07870762454761793, 0.078410072200496, 0.16368143959861392, 0.1609513974087824, 0.15600401745062575, 0.14811894762214184, 0.14407838284086205, 0.09005949408343972, 0.1411903691929871, 0.10206112014452051, 0.16278101107393073, 0.020701861440177494, 0.006974092683212252, 0.0332828781399096, 0.0, 0.0, 0.008158907600465337, 0.06720640415466839, 0.012171883788046012, 0.030621906473903393, 9.999999999998899e-05, 0.014527090467875814, 0.06138245926540187, 0.023593124861597037, 0.05196651476543668, 0.027078767426979566, 0.0, 0.0, 0.03271348928516837, 0.0, 0.0, 0.0, 0.0, 9.999999999998899e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007773910874378842, 0.011684389329764233, 0.008911032708335154, 0.05161425250836982, 0.019037513782970916, 0.013092112841074255, 0.06948104197955762, 0.01866582803799466, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.005704037392032846, 0.0, 0.018709437697157605, 0.0, 0.029141478919895825, 0.006601197067507947, 0.0, 0.0029127810674602905, 9.999999999998899e-05, 0.2231393418983998, 0.23285744305557343, 0.2145970884994356, 0.16173018125878114, 0.22406181511580348, 0.18202448657694226, 0.21882189600545032, 0.21045123253449893, 0.2048318646718813, 0.03207363532456453, 0.05998737120289721, 0.018100323377556737, 0.0454203860936645, 0.0714626487810257, 0.05537315192089687, 0.06308027377462966, 0.055386221646887446, 0.048407381926301785, 0.12817169014495444, 0.13029860546716066, 0.12058596550692091, 0.10377006053713178, 0.1164694424045929, 0.14276198286027575, 0.12714194382449495, 0.12953358679208082, 0.12388970809844557, 0.15406816331814766, 0.19162421713012212, 0.15858539928841142, 0.16867335056656996, 0.16247818886521437, 0.18606211631792413, 0.15775741726660053, 0.18368488418307005, 0.18216314831222624, 0.09560907567303234, 0.11868435731066529, 0.11263865603911649, 0.12155833995453846, 0.1433898336284143, 0.1181924709764064, 0.12230747859030233, 0.12312847586406328, 0.12495829695895533, 0.15751505399735577, 0.16189055687395648, 0.1700111161018123, 0.15864435457904402, 0.15096636223860116, 0.1718722226487518, 0.1621337119912054, 0.17720468133926448, 0.16870108322000688, 0.13526355846502935, 0.14625588266603595, 0.1428404864267715, 0.14597199323411136, 0.15956468658850065, 0.14430037145468522, 0.12183713946986152, 0.13410161447273417, 0.1486358575060145, 0.17880735378868262, 0.1587852174939668, 0.16113129330442666, 0.14522224881575807, 0.17767939798167953, 0.22131811608628993, 0.15204760491145353, 0.14885968904108415, 0.1691488817915966, 0.1908681993023763, 0.19889898632116254, 0.1887951184788893, 0.15639083570511247, 0.15176484625509223, 0.27729211670303644, 0.11846408206934322, 0.10805860885779583, 0.12286459555932017, 0.17167964308712502, 0.15816096033005633, 0.1989091955707214, 0.16382251765582934, 0.17511524586033644, 0.1684395931812136, 0.17486302919889563, 0.15993512692217848, 0.1642824609770308, 0.04765041730762298, 0.06336968574458512, 0.057281624147051846, 0.05927531195886859, 0.0665520458519182, 0.10479498486516314, 0.04566201662435776, 0.06640506704860105, 0.05660799349950396]}, "mutation_prompt": null}
{"id": "eac9a73d-d5e9-4ebb-8e37-0b5af6cc550e", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0)\n                                       * np.linspace(1.0, 0.1, num=self.budget // population_size - 1)[:, np.newaxis])\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            # Introduce dynamic mutation scaling\n            mutation_scale = 0.5 * (1 - np.mean(np.std(fireworks, axis=0)))\n            mutation = np.random.uniform(-mutation_scale, mutation_scale, size=(population_size, self.dim))\n            fireworks += sparks + mutation\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n            if np.random.rand() < 0.1:\n                population_size = min(20, int(population_size * 1.2))\n                fireworks = np.concatenate((fireworks, np.random.uniform(-5.0, 5.0, size=(population_size - fireworks.shape[0], self.dim))))\n        return best_firework", "name": "EnhancedAdaptiveFastFireworksAlgorithm", "description": "Enhance diversity maintenance by introducing dynamic mutation scaling based on the diversity level to promote exploration efficiently.", "configspace": "", "generation": 96, "fitness": -Infinity, "feedback": "An exception occurred: OverflowError('Range exceeds valid bounds').", "error": "OverflowError('Range exceeds valid bounds')", "parent_id": "5f014ff5-f692-4f1a-91e0-722169989696", "metadata": {}, "mutation_prompt": null}
{"id": "96493db2-c73f-4377-924c-cb2870af7c29", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0)\n                                       * np.linspace(1.0, 0.1, num=self.budget // population_size - 1)[:, np.newaxis])\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            # Introduce mutation\n            mutation = np.random.uniform(-0.5, 0.5, size=(population_size, self.dim))\n            fireworks += sparks + mutation\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n            if np.random.rand() < 0.1:\n                population_size = min(20, int(population_size * 1.2))\n                fireworks = np.concatenate((fireworks, np.random.uniform(-5.0, 5.0, size=(population_size - fireworks.shape[0], self.dim))))\n        return best_firework", "name": "EnhancedAdaptiveFastFireworksAlgorithm", "description": "Introduce a mutation step to explore the search space more extensively and potentially escape local optima.", "configspace": "", "generation": 96, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5f014ff5-f692-4f1a-91e0-722169989696", "metadata": {"aucs": [0.19285757146334304, 0.1645675639227968, 0.18490168654500694, 0.13598403194507136, 0.2352210566115326, 0.2012556774418034, 0.1510067733180065, 0.22197826093859796, 0.17616123094831926, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.029737809112806435, 0.052581276782856734, 0.05785124452163404, 0.05831012345273934, 0.05478668015830879, 0.07287941352899618, 0.07864241229692781, 0.04184280371018756, 0.06165355607638634, 0.008714888461953896, 0.042724154013373705, 0.04931039483245658, 0.028742461592760282, 0.05772188699511149, 0.034822347431758494, 0.003867483740613853, 0.04859377835815937, 0.03566472425504019, 0.8517138739952149, 0.7666161420880182, 0.7336693784425247, 0.8485228076302016, 0.8406337719784637, 0.7297932943724794, 0.8227040771617209, 0.8530375971681047, 0.7028749437408315, 0.12143667286433191, 0.09092342627270389, 0.11007806517152408, 0.12133558867836947, 0.08832153938132958, 0.07140834973076948, 0.11469396164831636, 0.07870762454761793, 0.078410072200496, 0.16368143959861392, 0.1609513974087824, 0.15600401745062575, 0.14811894762214184, 0.14407838284086205, 0.09005949408343972, 0.1411903691929871, 0.10206112014452051, 0.16278101107393073, 0.020701861440177494, 0.006974092683212252, 0.0332828781399096, 0.0, 0.0, 0.008158907600465337, 0.06720640415466839, 0.012171883788046012, 0.030621906473903393, 9.999999999998899e-05, 0.014527090467875814, 0.06138245926540187, 0.023593124861597037, 0.05196651476543668, 0.027078767426979566, 0.0, 0.0, 0.03271348928516837, 0.0, 0.0, 0.0, 0.0, 9.999999999998899e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007773910874378842, 0.011684389329764233, 0.008911032708335154, 0.05161425250836982, 0.019037513782970916, 0.013092112841074255, 0.06948104197955762, 0.01866582803799466, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.005704037392032846, 0.0, 0.018709437697157605, 0.0, 0.029141478919895825, 0.006601197067507947, 0.0, 0.0029127810674602905, 9.999999999998899e-05, 0.2231393418983998, 0.23285744305557343, 0.2145970884994356, 0.16173018125878114, 0.22406181511580348, 0.18202448657694226, 0.21882189600545032, 0.21045123253449893, 0.2048318646718813, 0.03207363532456453, 0.05998737120289721, 0.018100323377556737, 0.0454203860936645, 0.0714626487810257, 0.05537315192089687, 0.06308027377462966, 0.055386221646887446, 0.048407381926301785, 0.12817169014495444, 0.13029860546716066, 0.12058596550692091, 0.10377006053713178, 0.1164694424045929, 0.14276198286027575, 0.12714194382449495, 0.12953358679208082, 0.12388970809844557, 0.15406816331814766, 0.19162421713012212, 0.15858539928841142, 0.16867335056656996, 0.16247818886521437, 0.18606211631792413, 0.15775741726660053, 0.18368488418307005, 0.18216314831222624, 0.09560907567303234, 0.11868435731066529, 0.11263865603911649, 0.12155833995453846, 0.1433898336284143, 0.1181924709764064, 0.12230747859030233, 0.12312847586406328, 0.12495829695895533, 0.15751505399735577, 0.16189055687395648, 0.1700111161018123, 0.15864435457904402, 0.15096636223860116, 0.1718722226487518, 0.1621337119912054, 0.17720468133926448, 0.16870108322000688, 0.13526355846502935, 0.14625588266603595, 0.1428404864267715, 0.14597199323411136, 0.15956468658850065, 0.14430037145468522, 0.12183713946986152, 0.13410161447273417, 0.1486358575060145, 0.17880735378868262, 0.1587852174939668, 0.16113129330442666, 0.14522224881575807, 0.17767939798167953, 0.22131811608628993, 0.15204760491145353, 0.14885968904108415, 0.1691488817915966, 0.1908681993023763, 0.19889898632116254, 0.1887951184788893, 0.15639083570511247, 0.15176484625509223, 0.27729211670303644, 0.11846408206934322, 0.10805860885779583, 0.12286459555932017, 0.17167964308712502, 0.15816096033005633, 0.1989091955707214, 0.16382251765582934, 0.17511524586033644, 0.1684395931812136, 0.17486302919889563, 0.15993512692217848, 0.1642824609770308, 0.04765041730762298, 0.06336968574458512, 0.057281624147051846, 0.05927531195886859, 0.0665520458519182, 0.10479498486516314, 0.04566201662435776, 0.06640506704860105, 0.05660799349950396]}, "mutation_prompt": null}
{"id": "ba03c83d-3c5c-48e4-babe-7684a3029766", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0)\n                                       * np.linspace(1.0, 0.1, num=self.budget // population_size - 1)[:, np.newaxis])\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            # Introduce mutation\n            mutation = np.random.uniform(-0.5, 0.5, size=(population_size, self.dim))\n            fireworks += sparks + mutation\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n            if np.random.rand() < 0.1:\n                population_size = min(20, int(population_size * 1.2))\n                fireworks = np.concatenate((fireworks, np.random.uniform(-5.0, 5.0, size=(population_size - fireworks.shape[0], self.dim))))\n        return best_firework", "name": "EnhancedAdaptiveFastFireworksAlgorithm", "description": "Introduce a mutation step to explore the search space more extensively and potentially escape local optima.", "configspace": "", "generation": 96, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5f014ff5-f692-4f1a-91e0-722169989696", "metadata": {"aucs": [0.19285757146334304, 0.1645675639227968, 0.18490168654500694, 0.13598403194507136, 0.2352210566115326, 0.2012556774418034, 0.1510067733180065, 0.22197826093859796, 0.17616123094831926, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.029737809112806435, 0.052581276782856734, 0.05785124452163404, 0.05831012345273934, 0.05478668015830879, 0.07287941352899618, 0.07864241229692781, 0.04184280371018756, 0.06165355607638634, 0.008714888461953896, 0.042724154013373705, 0.04931039483245658, 0.028742461592760282, 0.05772188699511149, 0.034822347431758494, 0.003867483740613853, 0.04859377835815937, 0.03566472425504019, 0.8517138739952149, 0.7666161420880182, 0.7336693784425247, 0.8485228076302016, 0.8406337719784637, 0.7297932943724794, 0.8227040771617209, 0.8530375971681047, 0.7028749437408315, 0.12143667286433191, 0.09092342627270389, 0.11007806517152408, 0.12133558867836947, 0.08832153938132958, 0.07140834973076948, 0.11469396164831636, 0.07870762454761793, 0.078410072200496, 0.16368143959861392, 0.1609513974087824, 0.15600401745062575, 0.14811894762214184, 0.14407838284086205, 0.09005949408343972, 0.1411903691929871, 0.10206112014452051, 0.16278101107393073, 0.020701861440177494, 0.006974092683212252, 0.0332828781399096, 0.0, 0.0, 0.008158907600465337, 0.06720640415466839, 0.012171883788046012, 0.030621906473903393, 9.999999999998899e-05, 0.014527090467875814, 0.06138245926540187, 0.023593124861597037, 0.05196651476543668, 0.027078767426979566, 0.0, 0.0, 0.03271348928516837, 0.0, 0.0, 0.0, 0.0, 9.999999999998899e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007773910874378842, 0.011684389329764233, 0.008911032708335154, 0.05161425250836982, 0.019037513782970916, 0.013092112841074255, 0.06948104197955762, 0.01866582803799466, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.005704037392032846, 0.0, 0.018709437697157605, 0.0, 0.029141478919895825, 0.006601197067507947, 0.0, 0.0029127810674602905, 9.999999999998899e-05, 0.2231393418983998, 0.23285744305557343, 0.2145970884994356, 0.16173018125878114, 0.22406181511580348, 0.18202448657694226, 0.21882189600545032, 0.21045123253449893, 0.2048318646718813, 0.03207363532456453, 0.05998737120289721, 0.018100323377556737, 0.0454203860936645, 0.0714626487810257, 0.05537315192089687, 0.06308027377462966, 0.055386221646887446, 0.048407381926301785, 0.12817169014495444, 0.13029860546716066, 0.12058596550692091, 0.10377006053713178, 0.1164694424045929, 0.14276198286027575, 0.12714194382449495, 0.12953358679208082, 0.12388970809844557, 0.15406816331814766, 0.19162421713012212, 0.15858539928841142, 0.16867335056656996, 0.16247818886521437, 0.18606211631792413, 0.15775741726660053, 0.18368488418307005, 0.18216314831222624, 0.09560907567303234, 0.11868435731066529, 0.11263865603911649, 0.12155833995453846, 0.1433898336284143, 0.1181924709764064, 0.12230747859030233, 0.12312847586406328, 0.12495829695895533, 0.15751505399735577, 0.16189055687395648, 0.1700111161018123, 0.15864435457904402, 0.15096636223860116, 0.1718722226487518, 0.1621337119912054, 0.17720468133926448, 0.16870108322000688, 0.13526355846502935, 0.14625588266603595, 0.1428404864267715, 0.14597199323411136, 0.15956468658850065, 0.14430037145468522, 0.12183713946986152, 0.13410161447273417, 0.1486358575060145, 0.17880735378868262, 0.1587852174939668, 0.16113129330442666, 0.14522224881575807, 0.17767939798167953, 0.22131811608628993, 0.15204760491145353, 0.14885968904108415, 0.1691488817915966, 0.1908681993023763, 0.19889898632116254, 0.1887951184788893, 0.15639083570511247, 0.15176484625509223, 0.27729211670303644, 0.11846408206934322, 0.10805860885779583, 0.12286459555932017, 0.17167964308712502, 0.15816096033005633, 0.1989091955707214, 0.16382251765582934, 0.17511524586033644, 0.1684395931812136, 0.17486302919889563, 0.15993512692217848, 0.1642824609770308, 0.04765041730762298, 0.06336968574458512, 0.057281624147051846, 0.05927531195886859, 0.0665520458519182, 0.10479498486516314, 0.04566201662435776, 0.06640506704860105, 0.05660799349950396]}, "mutation_prompt": null}
{"id": "4da29a87-ddc4-41c1-82d1-23215c2a7837", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFastFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        population_size = 10\n        fireworks = np.random.uniform(-5.0, 5.0, size=(population_size, self.dim))\n        best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n        for _ in range(self.budget // population_size - 1):\n            sparks = np.random.uniform(-0.1, 0.1, size=(population_size, self.dim))\n            diversity_factor = np.mean(np.std(fireworks, axis=0)\n                                       * np.linspace(1.0, 0.1, num=self.budget // population_size - 1)[:, np.newaxis])\n            for i in range(population_size):\n                for j in range(self.dim):\n                    sparks[i][j] *= diversity_factor * np.abs(best_firework[j] - fireworks[i][j])\n            # Introduce mutation\n            mutation = np.random.uniform(-0.5, 0.5, size=(population_size, self.dim))\n            fireworks += sparks + mutation\n            best_firework = fireworks[np.argmin([func(firework) for firework in fireworks])]\n            if np.random.rand() < 0.1:\n                population_size = min(20, int(population_size * 1.2))\n                fireworks = np.concatenate((fireworks, np.random.uniform(-5.0, 5.0, size=(population_size - fireworks.shape[0], self.dim))))\n        return best_firework", "name": "EnhancedAdaptiveFastFireworksAlgorithm", "description": "Introduce a mutation step to explore the search space more extensively and potentially escape local optima.", "configspace": "", "generation": 96, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5f014ff5-f692-4f1a-91e0-722169989696", "metadata": {"aucs": [0.19285757146334304, 0.1645675639227968, 0.18490168654500694, 0.13598403194507136, 0.2352210566115326, 0.2012556774418034, 0.1510067733180065, 0.22197826093859796, 0.17616123094831926, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.029737809112806435, 0.052581276782856734, 0.05785124452163404, 0.05831012345273934, 0.05478668015830879, 0.07287941352899618, 0.07864241229692781, 0.04184280371018756, 0.06165355607638634, 0.008714888461953896, 0.042724154013373705, 0.04931039483245658, 0.028742461592760282, 0.05772188699511149, 0.034822347431758494, 0.003867483740613853, 0.04859377835815937, 0.03566472425504019, 0.8517138739952149, 0.7666161420880182, 0.7336693784425247, 0.8485228076302016, 0.8406337719784637, 0.7297932943724794, 0.8227040771617209, 0.8530375971681047, 0.7028749437408315, 0.12143667286433191, 0.09092342627270389, 0.11007806517152408, 0.12133558867836947, 0.08832153938132958, 0.07140834973076948, 0.11469396164831636, 0.07870762454761793, 0.078410072200496, 0.16368143959861392, 0.1609513974087824, 0.15600401745062575, 0.14811894762214184, 0.14407838284086205, 0.09005949408343972, 0.1411903691929871, 0.10206112014452051, 0.16278101107393073, 0.020701861440177494, 0.006974092683212252, 0.0332828781399096, 0.0, 0.0, 0.008158907600465337, 0.06720640415466839, 0.012171883788046012, 0.030621906473903393, 9.999999999998899e-05, 0.014527090467875814, 0.06138245926540187, 0.023593124861597037, 0.05196651476543668, 0.027078767426979566, 0.0, 0.0, 0.03271348928516837, 0.0, 0.0, 0.0, 0.0, 9.999999999998899e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007773910874378842, 0.011684389329764233, 0.008911032708335154, 0.05161425250836982, 0.019037513782970916, 0.013092112841074255, 0.06948104197955762, 0.01866582803799466, 9.999999999998899e-05, 0.0, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 0.0, 9.999999999998899e-05, 9.999999999998899e-05, 0.005704037392032846, 0.0, 0.018709437697157605, 0.0, 0.029141478919895825, 0.006601197067507947, 0.0, 0.0029127810674602905, 9.999999999998899e-05, 0.2231393418983998, 0.23285744305557343, 0.2145970884994356, 0.16173018125878114, 0.22406181511580348, 0.18202448657694226, 0.21882189600545032, 0.21045123253449893, 0.2048318646718813, 0.03207363532456453, 0.05998737120289721, 0.018100323377556737, 0.0454203860936645, 0.0714626487810257, 0.05537315192089687, 0.06308027377462966, 0.055386221646887446, 0.048407381926301785, 0.12817169014495444, 0.13029860546716066, 0.12058596550692091, 0.10377006053713178, 0.1164694424045929, 0.14276198286027575, 0.12714194382449495, 0.12953358679208082, 0.12388970809844557, 0.15406816331814766, 0.19162421713012212, 0.15858539928841142, 0.16867335056656996, 0.16247818886521437, 0.18606211631792413, 0.15775741726660053, 0.18368488418307005, 0.18216314831222624, 0.09560907567303234, 0.11868435731066529, 0.11263865603911649, 0.12155833995453846, 0.1433898336284143, 0.1181924709764064, 0.12230747859030233, 0.12312847586406328, 0.12495829695895533, 0.15751505399735577, 0.16189055687395648, 0.1700111161018123, 0.15864435457904402, 0.15096636223860116, 0.1718722226487518, 0.1621337119912054, 0.17720468133926448, 0.16870108322000688, 0.13526355846502935, 0.14625588266603595, 0.1428404864267715, 0.14597199323411136, 0.15956468658850065, 0.14430037145468522, 0.12183713946986152, 0.13410161447273417, 0.1486358575060145, 0.17880735378868262, 0.1587852174939668, 0.16113129330442666, 0.14522224881575807, 0.17767939798167953, 0.22131811608628993, 0.15204760491145353, 0.14885968904108415, 0.1691488817915966, 0.1908681993023763, 0.19889898632116254, 0.1887951184788893, 0.15639083570511247, 0.15176484625509223, 0.27729211670303644, 0.11846408206934322, 0.10805860885779583, 0.12286459555932017, 0.17167964308712502, 0.15816096033005633, 0.1989091955707214, 0.16382251765582934, 0.17511524586033644, 0.1684395931812136, 0.17486302919889563, 0.15993512692217848, 0.1642824609770308, 0.04765041730762298, 0.06336968574458512, 0.057281624147051846, 0.05927531195886859, 0.0665520458519182, 0.10479498486516314, 0.04566201662435776, 0.06640506704860105, 0.05660799349950396]}, "mutation_prompt": null}
